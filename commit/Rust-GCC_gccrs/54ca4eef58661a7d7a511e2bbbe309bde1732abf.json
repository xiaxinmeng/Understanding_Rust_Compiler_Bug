{"sha": "54ca4eef58661a7d7a511e2bbbe309bde1732abf", "node_id": "C_kwDOANBUbNoAKDU0Y2E0ZWVmNTg2NjFhN2Q3YTUxMWUyYmJiZTMwOWJkZTE3MzJhYmY", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-11-07T12:23:41Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-11-09T08:00:35Z"}, "message": "sphinx: remove texinfo files\n\ngcc/d/ChangeLog:\n\n\t* gdc.texi: Removed.\n\ngcc/ChangeLog:\n\n\t* doc/analyzer.texi: Removed.\n\t* doc/avr-mmcu.texi: Removed.\n\t* doc/bugreport.texi: Removed.\n\t* doc/cfg.texi: Removed.\n\t* doc/collect2.texi: Removed.\n\t* doc/compat.texi: Removed.\n\t* doc/configfiles.texi: Removed.\n\t* doc/configterms.texi: Removed.\n\t* doc/contrib.texi: Removed.\n\t* doc/contribute.texi: Removed.\n\t* doc/cpp.texi: Removed.\n\t* doc/cppdiropts.texi: Removed.\n\t* doc/cppenv.texi: Removed.\n\t* doc/cppinternals.texi: Removed.\n\t* doc/cppopts.texi: Removed.\n\t* doc/cppwarnopts.texi: Removed.\n\t* doc/extend.texi: Removed.\n\t* doc/fragments.texi: Removed.\n\t* doc/frontends.texi: Removed.\n\t* doc/gcc.texi: Removed.\n\t* doc/gccint.texi: Removed.\n\t* doc/gcov-dump.texi: Removed.\n\t* doc/gcov-tool.texi: Removed.\n\t* doc/gcov.texi: Removed.\n\t* doc/generic.texi: Removed.\n\t* doc/gimple.texi: Removed.\n\t* doc/gnu.texi: Removed.\n\t* doc/gty.texi: Removed.\n\t* doc/headerdirs.texi: Removed.\n\t* doc/hostconfig.texi: Removed.\n\t* doc/implement-c.texi: Removed.\n\t* doc/implement-cxx.texi: Removed.\n\t* doc/include/fdl.texi: Removed.\n\t* doc/include/funding.texi: Removed.\n\t* doc/include/gcc-common.texi: Removed.\n\t* doc/include/gpl_v3.texi: Removed.\n\t* doc/install.texi: Removed.\n\t* doc/interface.texi: Removed.\n\t* doc/invoke.texi: Removed.\n\t* doc/languages.texi: Removed.\n\t* doc/libgcc.texi: Removed.\n\t* doc/loop.texi: Removed.\n\t* doc/lto-dump.texi: Removed.\n\t* doc/lto.texi: Removed.\n\t* doc/makefile.texi: Removed.\n\t* doc/match-and-simplify.texi: Removed.\n\t* doc/md.texi: Removed.\n\t* doc/objc.texi: Removed.\n\t* doc/optinfo.texi: Removed.\n\t* doc/options.texi: Removed.\n\t* doc/passes.texi: Removed.\n\t* doc/plugins.texi: Removed.\n\t* doc/poly-int.texi: Removed.\n\t* doc/portability.texi: Removed.\n\t* doc/rtl.texi: Removed.\n\t* doc/service.texi: Removed.\n\t* doc/sourcebuild.texi: Removed.\n\t* doc/standards.texi: Removed.\n\t* doc/tm.texi: Removed.\n\t* doc/tree-ssa.texi: Removed.\n\t* doc/trouble.texi: Removed.\n\t* doc/ux.texi: Removed.\n\t* doc/tm.texi.in: Removed.\n\ngcc/fortran/ChangeLog:\n\n\t* gfc-internals.texi: Removed.\n\t* gfortran.texi: Removed.\n\t* intrinsic.texi: Removed.\n\t* invoke.texi: Removed.\n\ngcc/go/ChangeLog:\n\n\t* gccgo.texi: Removed.\n\nlibgomp/ChangeLog:\n\n\t* libgomp.texi: Removed.\n\nlibiberty/ChangeLog:\n\n\t* at-file.texi: Removed.\n\t* copying-lib.texi: Removed.\n\t* functions.texi: Removed.\n\t* libiberty.texi: Removed.\n\t* obstacks.texi: Removed.\n\nlibitm/ChangeLog:\n\n\t* libitm.texi: Removed.\n\nlibquadmath/ChangeLog:\n\n\t* libquadmath.texi: Removed.", "tree": {"sha": "4f9067b036a4e7c08d0d483246cb5ab5a0d60d41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f9067b036a4e7c08d0d483246cb5ab5a0d60d41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54ca4eef58661a7d7a511e2bbbe309bde1732abf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ca4eef58661a7d7a511e2bbbe309bde1732abf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54ca4eef58661a7d7a511e2bbbe309bde1732abf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ca4eef58661a7d7a511e2bbbe309bde1732abf/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "564a805f9f08b4346a854ab8dca2e5b561a7a28e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/564a805f9f08b4346a854ab8dca2e5b561a7a28e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/564a805f9f08b4346a854ab8dca2e5b561a7a28e"}], "stats": {"total": 177510, "additions": 0, "deletions": 177510}, "files": [{"sha": "d3bf75ccfa9fa1bd10dca62324109af77b5daa38", "filename": "gcc/d/gdc.texi", "status": "removed", "additions": 0, "deletions": 853, "changes": 853, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fd%2Fgdc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fd%2Fgdc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fgdc.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,853 +0,0 @@\n-\\input texinfo @c -*-texinfo-*-\n-@setfilename gdc.info\n-@settitle The GNU D Compiler\n-\n-@c Merge the standard indexes into a single one.\n-@syncodeindex fn cp\n-@syncodeindex vr cp\n-@syncodeindex ky cp\n-@syncodeindex pg cp\n-@syncodeindex tp cp\n-\n-@include gcc-common.texi\n-\n-@c Copyright years for this manual.\n-@set copyrights-d 2006-2022\n-\n-@copying\n-@c man begin COPYRIGHT\n-Copyright @copyright{} @value{copyrights-d} Free Software Foundation, Inc.\n-\n-Permission is granted to copy, distribute and/or modify this document\n-under the terms of the GNU Free Documentation License, Version 1.3 or\n-any later version published by the Free Software Foundation; with no\n-Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.\n-A copy of the license is included in the\n-@c man end\n-section entitled ``GNU Free Documentation License''.\n-@ignore\n-@c man begin COPYRIGHT\n-man page gfdl(7).\n-@c man end\n-@end ignore\n-@end copying\n-\n-@ifinfo\n-@format\n-@dircategory Software development\n-@direntry\n-* gdc: (gdc).               A GCC-based compiler for the D language\n-@end direntry\n-@end format\n-\n-@insertcopying\n-@end ifinfo\n-\n-@titlepage\n-@title The GNU D Compiler\n-@versionsubtitle\n-@author David Friedman, Iain Buclaw\n-\n-@page\n-@vskip 0pt plus 1filll\n-Published by the Free Software Foundation @*\n-51 Franklin Street, Fifth Floor@*\n-Boston, MA 02110-1301, USA@*\n-@sp 1\n-@insertcopying\n-@end titlepage\n-@contents\n-@page\n-\n-@node Top\n-@top Introduction\n-\n-This manual describes how to use @command{gdc}, the GNU compiler for\n-the D programming language.  This manual is specifically about\n-@command{gdc}.  For more information about the D programming\n-language in general, including language specifications and standard\n-package documentation, see @uref{https://dlang.org/}.\n-\n-@menu\n-* Copying::                     The GNU General Public License.\n-* GNU Free Documentation License::\n-                                How you can share and copy this manual.\n-* Invoking gdc::                How to run gdc.\n-* Index::                       Index.\n-@end menu\n-\n-\n-@include gpl_v3.texi\n-\n-@include fdl.texi\n-\n-\n-@node Invoking gdc\n-@chapter Invoking gdc\n-\n-@c man title gdc A GCC-based compiler for the D language\n-\n-@ignore\n-@c man begin SYNOPSIS gdc\n-gdc [@option{-c}|@option{-S}] [@option{-g}] [@option{-pg}]\n-    [@option{-O}@var{level}] [@option{-W}@var{warn}@dots{}]\n-    [@option{-I}@var{dir}@dots{}] [@option{-L}@var{dir}@dots{}]\n-    [@option{-f}@var{option}@dots{}] [@option{-m}@var{machine-option}@dots{}]\n-    [@option{-o} @var{outfile}] [@@@var{file}] @var{infile}@dots{}\n-\n-Only the most useful options are listed here; see below for the\n-remainder.\n-@c man end\n-@c man begin SEEALSO\n-gpl(7), gfdl(7), fsf-funding(7), gcc(1)\n-and the Info entries for @file{gdc} and @file{gcc}.\n-@c man end\n-@end ignore\n-\n-@c man begin DESCRIPTION gdc\n-\n-The @command{gdc} command is the GNU compiler for the D language and\n-supports many of the same options as @command{gcc}.  @xref{Option Summary, ,\n-Option Summary, gcc, Using the GNU Compiler Collection (GCC)}.\n-This manual only documents the options specific to @command{gdc}.\n-\n-@c man end\n-\n-@menu\n-* Input and Output files::  Controlling the kind of output:\n-                            an executable, object files, assembler files,\n-* Runtime Options::         Options controlling runtime behavior\n-* Directory Options::       Where to find module files\n-* Code Generation::         Options controlling the output of gdc\n-* Warnings::                Options controlling warnings specific to gdc\n-* Linking::                 Options influencing the linking step\n-* Developer Options::       Options useful for developers of gdc\n-@end menu\n-\n-@c man begin OPTIONS\n-\n-@node Input and Output files\n-@section Input and Output files\n-@cindex suffixes for D source\n-@cindex D source file suffixes\n-\n-For any given input file, the file name suffix determines what kind of\n-compilation is done.  The following kinds of input file names are supported:\n-\n-@table @gcctabopt\n-@item @var{file}.d\n-D source files.\n-@item @var{file}.dd\n-Ddoc source files.\n-@item @var{file}.di\n-D interface files.\n-@end table\n-\n-You can specify more than one input file on the @command{gdc} command line,\n-each being compiled separately in the compilation process.  If you specify a\n-@code{-o @var{file}} option, all the input files are compiled together,\n-producing a single output file, named @var{file}.  This is allowed even\n-when using @code{-S} or @code{-c}.\n-\n-@cindex D interface files.\n-A D interface file contains only what an import of the module needs,\n-rather than the whole implementation of that module.  They can be created\n-by @command{gdc} from a D source file by using the @code{-H} option.\n-When the compiler resolves an import declaration, it searches for matching\n-@file{.di} files first, then for @file{.d}.\n-\n-@cindex Ddoc source files.\n-A Ddoc source file contains code in the D macro processor language.  It is\n-primarily designed for use in producing user documentation from embedded\n-comments, with a slight affinity towards HTML generation.  If a @file{.d}\n-source file starts with the string @code{Ddoc} then it is treated as general\n-purpose documentation, not as a D source file.\n-\n-@node Runtime Options\n-@section Runtime Options\n-@cindex options, runtime\n-\n-These options affect the runtime behavior of programs compiled with\n-@command{gdc}.\n-\n-@table @gcctabopt\n-\n-@item -fall-instantiations\n-@cindex @option{-fall-instantiations}\n-@cindex @option{-fno-all-instantiations}\n-Generate code for all template instantiations.  The default template emission\n-strategy is to not generate code for declarations that were either\n-instantiated speculatively, such as from @code{__traits(compiles, ...)}, or\n-that come from an imported module not being compiled.\n-\n-@item -fno-assert\n-@cindex @option{-fassert}\n-@cindex @option{-fno-assert}\n-Turn off code generation for @code{assert} contracts.\n-\n-@item -fno-bounds-check\n-@cindex @option{-fbounds-check}\n-@cindex @option{-fno-bounds-check}\n-Turns off array bounds checking for all functions, which can improve\n-performance for code that uses arrays extensively.  Note that this\n-can result in unpredictable behavior if the code in question actually\n-does violate array bounds constraints.  It is safe to use this option\n-if you are sure that your code never throws a @code{RangeError}.\n-\n-@item -fbounds-check=@var{value}\n-@cindex @option{-fbounds-check=}\n-An alternative to @option{-fbounds-check} that allows more control\n-as to where bounds checking is turned on or off.  The following values\n-are supported:\n-\n-@table @samp\n-@item on\n-Turns on array bounds checking for all functions.\n-@item safeonly\n-Turns on array bounds checking only for @code{@@safe} functions.\n-@item off\n-Turns off array bounds checking completely.\n-@end table\n-\n-@item -fno-builtin\n-@cindex @option{-fbuiltin}\n-@cindex @option{-fno-builtin}\n-Don't recognize built-in functions unless they begin with the prefix\n-@samp{__builtin_}.  By default, the compiler will recognize when a\n-function in the @code{core.stdc} package is a built-in function.\n-\n-@item -fcheckaction=@var{value}\n-@cindex @option{-fcheckaction}\n-This option controls what code is generated on an assertion, bounds check, or\n-final switch failure.  The following values are supported:\n-\n-@table @samp\n-@item context\n-Throw an @code{AssertError} with extra context information.\n-@item halt\n-Halt the program execution.\n-@item throw\n-Throw an @code{AssertError} (the default).\n-@end table\n-\n-@item -fdebug\n-@item -fdebug=@var{value}\n-@cindex @option{-fdebug}\n-@cindex @option{-fno-debug}\n-Turn on compilation of conditional @code{debug} code into the program.\n-The @option{-fdebug} option itself sets the debug level to @code{1},\n-while @option{-fdebug=} enables @code{debug} code that are identified\n-by any of the following values:\n-\n-@table @samp\n-@item level\n-Sets the debug level to @var{level}, any @code{debug} code <= @var{level}\n-is compiled into the program.\n-@item ident\n-Turns on compilation of any @code{debug} code identified by @var{ident}.\n-@end table\n-\n-@item -fno-druntime\n-@cindex @option{-fdruntime}\n-@cindex @option{-fno-druntime}\n-Implements @uref{https://dlang.org/spec/betterc.html}.  Assumes that\n-compilation targets an environment without a D runtime library.\n-\n-This is equivalent to compiling with the following options:\n-\n-@example\n-gdc -nophoboslib -fno-exceptions -fno-moduleinfo -fno-rtti\n-@end example\n-\n-@item -fextern-std=@var{standard}\n-@cindex @option{-fextern-std}\n-Sets the C++ name mangling compatibility to the version identified by\n-@var{standard}.  The following values are supported:\n-\n-@table @samp\n-@item c++98\n-@item c++03\n-Sets @code{__traits(getTargetInfo, \"cppStd\")} to @code{199711}.\n-@item c++11\n-Sets @code{__traits(getTargetInfo, \"cppStd\")} to @code{201103}.\n-@item c++14\n-Sets @code{__traits(getTargetInfo, \"cppStd\")} to @code{201402}.\n-@item c++17\n-Sets @code{__traits(getTargetInfo, \"cppStd\")} to @code{201703}.\n-This is the default.\n-@item c++20\n-Sets @code{__traits(getTargetInfo, \"cppStd\")} to @code{202002}.\n-@end table\n-\n-@item -fno-invariants\n-@cindex @option{-finvariants}\n-@cindex @option{-fno-invariants}\n-Turns off code generation for class @code{invariant} contracts.\n-\n-@item -fmain\n-@cindex @option{-fmain}\n-Generates a default @code{main()} function when compiling.  This is useful when\n-unittesting a library, as it enables running the unittests in a library without\n-having to manually define an entry-point function.  This option does nothing\n-when @code{main} is already defined in user code.\n-\n-@item -fno-moduleinfo\n-@cindex @option{-fmoduleinfo}\n-@cindex @option{-fno-moduleinfo}\n-Turns off generation of the @code{ModuleInfo} and related functions\n-that would become unreferenced without it, which may allow linking\n-to programs not written in D.  Functions that are not be generated\n-include module constructors and destructors (@code{static this} and\n-@code{static ~this}), @code{unittest} code, and @code{DSO} registry\n-functions for dynamically linked code.\n-\n-@item -fonly=@var{filename}\n-@cindex @option{-fonly}\n-Tells the compiler to parse and run semantic analysis on all modules\n-on the command line, but only generate code for the module specified\n-by @var{filename}.\n-\n-@item -fno-postconditions\n-@cindex @option{-fpostconditions}\n-@cindex @option{-fno-postconditions}\n-Turns off code generation for postcondition @code{out} contracts.\n-\n-@item -fno-preconditions\n-@cindex @option{-fpreconditions}\n-@cindex @option{-fno-preconditions}\n-Turns off code generation for precondition @code{in} contracts.\n-\n-@item -fpreview=@var{id}\n-@cindex @option{-fpreview}\n-Turns on an upcoming D language change identified by @var{id}.  The following\n-values are supported:\n-\n-@table @samp\n-@item all\n-Turns on all upcoming D language features.\n-@item dip1000\n-Implements @uref{https://github.com/dlang/DIPs/blob/master/DIPs/other/DIP1000.md}\n-(Scoped pointers).\n-@item dip1008\n-Implements @uref{https://github.com/dlang/DIPs/blob/master/DIPs/other/DIP1008.md}\n-(Allow exceptions in @code{@@nogc} code).\n-@item dip1021\n-Implements @uref{https://github.com/dlang/DIPs/blob/master/DIPs/accepted/DIP1021.md}\n-(Mutable function arguments).\n-@item dip25\n-Implements @uref{https://github.com/dlang/DIPs/blob/master/DIPs/archive/DIP25.md}\n-(Sealed references).\n-@item dtorfields\n-Turns on generation for destructing fields of partially constructed objects.\n-@item fieldwise\n-Turns on generation of struct equality to use field-wise comparisons.\n-@item fixaliasthis\n-Implements new lookup rules that check the current scope for @code{alias this}\n-before searching in upper scopes.\n-@item fiximmutableconv\n-Disallows unsound immutable conversions that were formerly incorrectly\n-permitted.\n-@item in\n-Implements @code{in} parameters to mean @code{scope const [ref]} and accepts\n-rvalues.\n-@item inclusiveincontracts\n-Implements @code{in} contracts of overridden methods to be a superset of parent\n-contract.\n-@item intpromote\n-Implements C-style integral promotion for unary @code{+}, @code{-} and @code{~}\n-expressions.\n-@item nosharedaccess\n-Turns off and disallows all access to shared memory objects.\n-@item rvaluerefparam\n-Implements rvalue arguments to @code{ref} parameters.\n-@item systemvariables\n-Disables access to variables marked @code{@@system} from @code{@@safe} code.\n-@end table\n-\n-@item -frelease\n-@cindex @option{-frelease}\n-@cindex @option{-fno-release}\n-Turns on compiling in release mode, which means not emitting runtime\n-checks for contracts and asserts.  Array bounds checking is not done\n-for @code{@@system} and @code{@@trusted} functions, and assertion\n-failures are undefined behavior.\n-\n-This is equivalent to compiling with the following options:\n-\n-@example\n-gdc -fno-assert -fbounds-check=safe -fno-invariants \\\n-    -fno-postconditions -fno-preconditions -fno-switch-errors\n-@end example\n-\n-@item -frevert=\n-@cindex @option{-frevert}\n-Turns off a D language feature identified by @var{id}.  The following values\n-are supported:\n-\n-@table @samp\n-@item all\n-Turns off all revertable D language features.\n-@item dip25\n-Reverts @uref{https://github.com/dlang/DIPs/blob/master/DIPs/archive/DIP25.md}\n-(Sealed references).\n-@item dtorfields\n-Turns off generation for destructing fields of partially constructed objects.\n-@item markdown\n-Turns off Markdown replacements in Ddoc comments.\n-@end table\n-\n-@item -fno-rtti\n-@cindex @option{-frtti}\n-@cindex @option{-fno-rtti}\n-Turns off generation of run-time type information for all user defined types.\n-Any code that uses features of the language that require access to this\n-information will result in an error.\n-\n-@item -fno-switch-errors\n-@cindex @option{-fswitch-errors}\n-@cindex @option{-fno-switch-errors}\n-This option controls what code is generated when no case is matched\n-in a @code{final switch} statement.  The default run time behavior\n-is to throw a @code{SwitchError}.  Turning off @option{-fswitch-errors}\n-means that instead the execution of the program is immediately halted.\n-\n-@item -funittest\n-@cindex @option{-funittest}\n-@cindex @option{-fno-unittest}\n-Turns on compilation of @code{unittest} code, and turns on the\n-@code{version(unittest)} identifier.  This implies @option{-fassert}.\n-\n-@item -fversion=@var{value}\n-@cindex @option{-fversion}\n-Turns on compilation of conditional @code{version} code into the program\n-identified by any of the following values:\n-\n-@table @samp\n-@item level\n-Sets the version level to @var{level}, any @code{version} code >= @var{level}\n-is compiled into the program.\n-@item ident\n-Turns on compilation of @code{version} code identified by @var{ident}.\n-@end table\n-\n-@item -fno-weak-templates\n-@cindex @option{-fweak-templates}\n-@cindex @option{-fno-weak-templates}\n-Turns off emission of declarations that can be defined in multiple objects as\n-weak symbols.  The default is to emit all public symbols as weak, unless the\n-target lacks support for weak symbols.  Disabling this option means that common\n-symbols are instead put in COMDAT or become private.\n-\n-@end table\n-\n-@node Directory Options\n-@section Options for Directory Search\n-@cindex directory options\n-@cindex options, directory search\n-@cindex search path\n-\n-These options specify directories to search for files, libraries, and\n-other parts of the compiler:\n-\n-@table @gcctabopt\n-\n-@item -I@var{dir}\n-@cindex @option{-I}\n-Specify a directory to use when searching for imported modules at\n-compile time.  Multiple @option{-I} options can be used, and the\n-paths are searched in the same order.\n-\n-@item -J@var{dir}\n-@cindex @option{-J}\n-Specify a directory to use when searching for files in string imports\n-at compile time.  This switch is required in order to use\n-@code{import(file)} expressions.  Multiple @option{-J} options can be\n-used, and the paths are searched in the same order.\n-\n-@item -L@var{dir}\n-@cindex @option{-L}\n-When linking, specify a library search directory, as with @command{gcc}.\n-\n-@item -B@var{dir}\n-@cindex @option{-B}\n-This option specifies where to find the executables, libraries,\n-source files, and data files of the compiler itself, as with @command{gcc}.\n-\n-@item -fmodule-file=@var{module}=@var{spec}\n-@cindex @option{-fmodule-file}\n-This option manipulates file paths of imported modules, such that if an\n-imported module matches all or the leftmost part of @var{module}, the file\n-path in @var{spec} is used as the location to search for D sources.\n-This is used when the source file path and names are not the same as the\n-package and module hierarchy.  Consider the following examples:\n-\n-@example\n-gdc test.d -fmodule-file=A.B=foo.d -fmodule-file=C=bar\n-@end example\n-\n-This will tell the compiler to search in all import paths for the source\n-file @var{foo.d} when importing @var{A.B}, and the directory @var{bar/}\n-when importing @var{C}, as annotated in the following D code:\n-\n-@example\n-module test;\n-import A.B;     // Matches A.B, searches for foo.d\n-import C.D.E;   // Matches C, searches for bar/D/E.d\n-import A.B.C;   // No match, searches for A/B/C.d\n-@end example\n-\n-@item -imultilib @var{dir}\n-@cindex @option{-imultilib}\n-Use @var{dir} as a subdirectory of the gcc directory containing\n-target-specific D sources and interfaces.\n-\n-@item -iprefix @var{prefix}\n-@cindex @option{-iprefix}\n-Specify @var{prefix} as the prefix for the gcc directory containing\n-target-specific D sources and interfaces.  If the @var{prefix} represents\n-a directory, you should include the final @code{'/'}.\n-\n-@item -nostdinc\n-@cindex @option{-nostdinc}\n-Do not search the standard system directories for D source and interface\n-files.  Only the directories that have been specified with @option{-I} options\n-(and the directory of the current file, if appropriate) are searched.\n-\n-@end table\n-\n-@node Code Generation\n-@section Code Generation\n-@cindex options, code generation\n-\n-In addition to the many @command{gcc} options controlling code generation,\n-@command{gdc} has several options specific to itself.\n-\n-@table @gcctabopt\n-\n-@item -H\n-@cindex @option{-H}\n-Generates D interface files for all modules being compiled.  The compiler\n-determines the output file based on the name of the input file, removes\n-any directory components and suffix, and applies the @file{.di} suffix.\n-\n-@item -Hd @var{dir}\n-@cindex @option{-Hd}\n-Same as @option{-H}, but writes interface files to directory @var{dir}.\n-This option can be used with @option{-Hf @var{file}} to independently set the\n-output file and directory path.\n-\n-@item -Hf @var{file}\n-@cindex @option{-Hf}\n-Same as @option{-H} but writes interface files to @var{file}.  This option can\n-be used with @option{-Hd @var{dir}} to independently set the output file and\n-directory path.\n-\n-@item -M\n-@cindex @option{-M}\n-Output the module dependencies of all source files being compiled in a\n-format suitable for @command{make}.  The compiler outputs one\n-@command{make} rule containing the object file name for that source file,\n-a colon, and the names of all imported files.\n-\n-@item -MM\n-@cindex @option{-MM}\n-Like @option{-M} but does not mention imported modules from the D standard\n-library package directories.\n-\n-@item -MF @var{file}\n-@cindex @option{-MF}\n-When used with @option{-M} or @option{-MM}, specifies a @var{file} to write\n-the dependencies to.  When used with the driver options @option{-MD} or\n-@option{-MMD}, @option{-MF} overrides the default dependency output file.\n-\n-@item -MG\n-@cindex @option{-MG}\n-This option is for compatibility with @command{gcc}, and is ignored by the\n-compiler.\n-\n-@item -MP\n-@cindex @option{-MP}\n-Outputs a phony target for each dependency other than the modules being\n-compiled, causing each to depend on nothing.\n-\n-@item -MT @var{target}\n-@cindex @option{-MT}\n-Change the @var{target} of the rule emitted by dependency generation\n-to be exactly the string you specify.  If you want multiple targets,\n-you can specify them as a single argument to @option{-MT}, or use\n-multiple @option{-MT} options.\n-\n-@item -MQ @var{target}\n-@cindex @option{-MQ}\n-Same as @option{-MT}, but it quotes any characters which are special to\n-@command{make}.\n-\n-@item -MD\n-@cindex @option{-MD}\n-This option is equivalent to @option{-M -MF @var{file}}.  The driver\n-determines @var{file} by removing any directory components and suffix\n-from the input file, and then adding a @file{.deps} suffix.\n-\n-@item -MMD\n-@cindex @option{-MMD}\n-Like @option{-MD} but does not mention imported modules from the D standard\n-library package directories.\n-\n-@item -X\n-@cindex @option{-X}\n-Output information describing the contents of all source files being\n-compiled in JSON format to a file.  The driver determines @var{file} by\n-removing any directory components and suffix from the input file, and then\n-adding a @file{.json} suffix.\n-\n-@item -Xf @var{file}\n-@cindex @option{-Xf}\n-Same as @option{-X}, but writes all JSON contents to the specified\n-@var{file}.\n-\n-@item -fdoc\n-@cindex @option{-fdoc}\n-Generates @code{Ddoc} documentation and writes it to a file.  The compiler\n-determines @var{file} by removing any directory components and suffix\n-from the input file, and then adding a @file{.html} suffix.\n-\n-@item -fdoc-dir=@var{dir}\n-@cindex @option{-fdoc-dir}\n-Same as @option{-fdoc}, but writes documentation to directory @var{dir}.\n-This option can be used with @option{-fdoc-file=@var{file}} to\n-independently set the output file and directory path.\n-\n-@item -fdoc-file=@var{file}\n-@cindex @option{-fdoc-file}\n-Same as @option{-fdoc}, but writes documentation to @var{file}.  This\n-option can be used with @option{-fdoc-dir=@var{dir}} to independently\n-set the output file and directory path.\n-\n-@item -fdoc-inc=@var{file}\n-@cindex @option{-fdoc-inc}\n-Specify @var{file} as a @var{Ddoc} macro file to be read.  Multiple\n-@option{-fdoc-inc} options can be used, and files are read and processed\n-in the same order.\n-\n-@item -fdump-c++-spec=@var{file}\n-For D source files, generate corresponding C++ declarations in @var{file}.\n-\n-@item -fdump-c++-spec-verbose\n-In conjunction with @option{-fdump-c++-spec=} above, add comments for ignored\n-declarations in the generated C++ header.\n-\n-@item -fsave-mixins=@var{file}\n-@cindex @option{-fsave-mixins}\n-Generates code expanded from D @code{mixin} statements and writes the\n-processed sources to @var{file}.  This is useful to debug errors in compilation\n-and provides source for debuggers to show when requested.\n-\n-@end table\n-\n-@node Warnings\n-@section Warnings\n-@cindex options to control warnings\n-@cindex warning messages\n-@cindex messages, warning\n-@cindex suppressing warnings\n-\n-Warnings are diagnostic messages that report constructions that\n-are not inherently erroneous but that are risky or suggest there\n-is likely to be a bug in the program.  Unless @option{-Werror} is\n-specified, they do not prevent compilation of the program.\n-\n-@table @gcctabopt\n-\n-@item -Wall\n-@cindex @option{-Wall}\n-@cindex @option{-Wno-all}\n-Turns on all warnings messages.  Warnings are not a defined part of\n-the D language, and all constructs for which this may generate a\n-warning message are valid code.\n-\n-@item -Walloca\n-@cindex @option{-Walloca}\n-This option warns on all uses of \"alloca\" in the source.\n-\n-@item -Walloca-larger-than=@var{n}\n-@cindex @option{-Walloca-larger-than}\n-@cindex @option{-Wno-alloca-larger-than}\n-Warn on unbounded uses of alloca, and on bounded uses of alloca\n-whose bound can be larger than @var{n} bytes.\n-@option{-Wno-alloca-larger-than} disables\n-@option{-Walloca-larger-than} warning and is equivalent to\n-@option{-Walloca-larger-than=@var{SIZE_MAX}} or larger.\n-\n-@item -Wcast-result\n-@cindex @option{-Wcast-result}\n-@cindex @option{-Wno-cast-result}\n-Warn about casts that will produce a null or zero result.  Currently\n-this is only done for casting between an imaginary and non-imaginary\n-data type, or casting between a D and C++ class.\n-\n-@item -Wno-deprecated\n-@cindex @option{-Wdeprecated}\n-@cindex @option{-Wno-deprecated}\n-Do not warn about usage of deprecated features and symbols with\n-@code{deprecated} attributes.\n-\n-@item -Werror\n-@cindex @option{-Werror}\n-@cindex @option{-Wno-error}\n-Turns all warnings into errors.\n-\n-@item -Wspeculative\n-@cindex @option{-Wspeculative}\n-@cindex @option{-Wno-speculative}\n-List all error messages from speculative compiles, such as\n-@code{__traits(compiles, ...)}.  This option does not report\n-messages as warnings, and these messages therefore never become\n-errors when the @option{-Werror} option is also used.\n-\n-@item -Wtemplates\n-@cindex @option{-Wtemplates}\n-@cindex @option{-Wno-templates}\n-Warn when a template instantiation is encountered.  Some coding\n-rules disallow templates, and this may be used to enforce that rule.\n-\n-@item -Wunknown-pragmas\n-@cindex @option{-Wunknown-pragmas}\n-@cindex @option{-Wno-unknown-pragmas}\n-Warn when a @code{pragma()} is encountered that is not understood by\n-@command{gdc}.  This differs from @option{-fignore-unknown-pragmas}\n-where a pragma that is part of the D language, but not implemented by\n-the compiler, won't get reported.\n-\n-@item -Wno-varargs\n-@cindex Wvarargs\n-@cindex Wno-varargs\n-Do not warn upon questionable usage of the macros used to handle variable\n-arguments like @code{va_start}.\n-\n-@item -fignore-unknown-pragmas\n-@cindex @option{-fignore-unknown-pragmas}\n-@cindex @option{-fno-ignore-unknown-pragmas}\n-Turns off errors for unsupported pragmas.\n-\n-@item -fmax-errors=@var{n}\n-@cindex @option{-fmax-errors}\n-Limits the maximum number of error messages to @var{n}, at which point\n-@command{gdc} bails out rather than attempting to continue processing the\n-source code.  If @var{n} is 0 (the default), there is no limit on the\n-number of error messages produced.\n-\n-@item -fsyntax-only\n-@cindex @option{-fsyntax-only}\n-@cindex @option{-fno-syntax-only}\n-Check the code for syntax errors, but do not actually compile it.  This\n-can be used in conjunction with @option{-fdoc} or @option{-H} to generate\n-files for each module present on the command-line, but no other output\n-file.\n-\n-@item -ftransition=@var{id}\n-@cindex @option{-ftransition}\n-Report additional information about D language changes identified by\n-@var{id}.  The following values are supported:\n-\n-@table @samp\n-@item all\n-List information on all D language transitions.\n-@item complex\n-List all usages of complex or imaginary types.\n-@item field\n-List all non-mutable fields which occupy an object instance.\n-@item in\n-List all usages of @code{in} on parameter.\n-@item nogc\n-List all hidden GC allocations.\n-@item templates\n-List statistics on template instantiations.\n-@item tls\n-List all variables going into thread local storage.\n-@item vmarkdown\n-List instances of Markdown replacements in Ddoc.\n-@end table\n-\n-@end table\n-\n-@node Linking\n-@section Options for Linking\n-@cindex options, linking\n-@cindex linking, static\n-\n-These options come into play when the compiler links object files into an\n-executable output file.  They are meaningless if the compiler is not doing\n-a link step.\n-\n-@table @gcctabopt\n-\n-@item -defaultlib=@var{libname}\n-@cindex @option{-defaultlib=}\n-Specify the library to use instead of libphobos when linking.  Options\n-specifying the linkage of libphobos, such as @option{-static-libphobos}\n-or @option{-shared-libphobos}, are ignored.\n-\n-@item -debuglib=@var{libname}\n-@cindex @option{-debuglib=}\n-Specify the debug library to use instead of libphobos when linking.\n-This option has no effect unless the @option{-g} option was also given\n-on the command line.  Options specifying the linkage of libphobos, such\n-as @option{-static-libphobos} or @option{-shared-libphobos}, are ignored.\n-\n-@item -nophoboslib\n-@cindex @option{-nophoboslib}\n-Do not use the Phobos or D runtime library when linking.  Options specifying\n-the linkage of libphobos, such as @option{-static-libphobos} or\n-@option{-shared-libphobos}, are ignored.  The standard system libraries are\n-used normally, unless @option{-nostdlib} or @option{-nodefaultlibs} is used.\n-\n-@item -shared-libphobos\n-@cindex @option{-shared-libphobos}\n-On systems that provide @file{libgphobos} and @file{libgdruntime} as a\n-shared and a static library, this option forces the use of the shared\n-version.  If no shared version was built when the compiler was configured,\n-this option has no effect.\n-\n-@item -static-libphobos\n-@cindex @option{-static-libphobos}\n-On systems that provide @file{libgphobos} and @file{libgdruntime} as a\n-shared and a static library, this option forces the use of the static\n-version.  If no static version was built when the compiler was configured,\n-this option has no effect.\n-\n-@end table\n-\n-@node Developer Options\n-@section Developer Options\n-@cindex developer options\n-@cindex debug dump options\n-@cindex dump options\n-\n-This section describes command-line options that are primarily of\n-interest to developers or language tooling.\n-\n-@table @gcctabopt\n-\n-@item -fdump-d-original\n-@cindex @option{-fdump-d-original}\n-Output the internal front-end AST after the @code{semantic3} stage.\n-This option is only useful for debugging the GNU D compiler itself.\n-\n-@item -v\n-@cindex @option{-v}\n-Dump information about the compiler language processing stages as the source\n-program is being compiled.  This includes listing all modules that are\n-processed through the @code{parse}, @code{semantic}, @code{semantic2}, and\n-@code{semantic3} stages; all @code{import} modules and their file paths;\n-and all @code{function} bodies that are being compiled.\n-\n-@end table\n-\n-@c man end\n-\n-@node Index\n-@unnumbered Index\n-\n-@printindex cp\n-\n-@bye"}, {"sha": "ec49f951435d4a3b6fc3cf37e58b6042748d43ca", "filename": "gcc/doc/analyzer.texi", "status": "removed", "additions": 0, "deletions": 569, "changes": 569, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fanalyzer.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fanalyzer.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fanalyzer.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,569 +0,0 @@\n-@c Copyright (C) 2019-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-@c Contributed by David Malcolm <dmalcolm@redhat.com>.\n-\n-@node Static Analyzer\n-@chapter Static Analyzer\n-@cindex analyzer\n-@cindex static analysis\n-@cindex static analyzer\n-\n-@menu\n-* Analyzer Internals::       Analyzer Internals\n-* Debugging the Analyzer::   Useful debugging tips\n-@end menu\n-\n-@node Analyzer Internals\n-@section Analyzer Internals\n-@cindex analyzer, internals\n-@cindex static analyzer, internals\n-\n-@subsection Overview\n-\n-The analyzer implementation works on the gimple-SSA representation.\n-(I chose this in the hopes of making it easy to work with LTO to\n-do whole-program analysis).\n-\n-The implementation is read-only: it doesn't attempt to change anything,\n-just emit warnings.\n-\n-The gimple representation can be seen using @option{-fdump-ipa-analyzer}.\n-@quotation Tip\n-If the analyzer ICEs before this is written out, one workaround is to use\n-@option{--param=analyzer-bb-explosion-factor=0} to force the analyzer\n-to bail out after analyzing the first basic block.\n-@end quotation\n-\n-First, we build a @code{supergraph} which combines the callgraph and all\n-of the CFGs into a single directed graph, with both interprocedural and\n-intraprocedural edges.  The nodes and edges in the supergraph are called\n-``supernodes'' and ``superedges'', and often referred to in code as\n-@code{snodes} and @code{sedges}.  Basic blocks in the CFGs are split at\n-interprocedural calls, so there can be more than one supernode per\n-basic block.  Most statements will be in just one supernode, but a call\n-statement can appear in two supernodes: at the end of one for the call,\n-and again at the start of another for the return.\n-\n-The supergraph can be seen using @option{-fdump-analyzer-supergraph}.\n-\n-We then build an @code{analysis_plan} which walks the callgraph to\n-determine which calls might be suitable for being summarized (rather\n-than fully explored) and thus in what order to explore the functions.\n-\n-Next is the heart of the analyzer: we use a worklist to explore state\n-within the supergraph, building an \"exploded graph\".\n-Nodes in the exploded graph correspond to <point,@w{ }state> pairs, as in\n-     \"Precise Interprocedural Dataflow Analysis via Graph Reachability\"\n-     (Thomas Reps, Susan Horwitz and Mooly Sagiv).\n-\n-We reuse nodes for <point, state> pairs we've already seen, and avoid\n-tracking state too closely, so that (hopefully) we rapidly converge\n-on a final exploded graph, and terminate the analysis.  We also bail\n-out if the number of exploded <end-of-basic-block, state> nodes gets\n-larger than a particular multiple of the total number of basic blocks\n-(to ensure termination in the face of pathological state-explosion\n-cases, or bugs).  We also stop exploring a point once we hit a limit\n-of states for that point.\n-\n-We can identify problems directly when processing a <point,@w{ }state>\n-instance.  For example, if we're finding the successors of\n-\n-@smallexample\n-   <point: before-stmt: \"free (ptr);\",\n-    state: @{\"ptr\": freed@}>\n-@end smallexample\n-\n-then we can detect a double-free of \"ptr\".  We can then emit a path\n-to reach the problem by finding the simplest route through the graph.\n-\n-Program points in the analysis are much more fine-grained than in the\n-CFG and supergraph, with points (and thus potentially exploded nodes)\n-for various events, including before individual statements.\n-By default the exploded graph merges multiple consecutive statements\n-in a supernode into one exploded edge to minimize the size of the\n-exploded graph.  This can be suppressed via\n-@option{-fanalyzer-fine-grained}.\n-The fine-grained approach seems to make things simpler and more debuggable\n-that other approaches I tried, in that each point is responsible for one\n-thing.\n-\n-Program points in the analysis also have a \"call string\" identifying the\n-stack of callsites below them, so that paths in the exploded graph\n-correspond to interprocedurally valid paths: we always return to the\n-correct call site, propagating state information accordingly.\n-We avoid infinite recursion by stopping the analysis if a callsite\n-appears more than @code{analyzer-max-recursion-depth} in a callstring\n-(defaulting to 2).\n-\n-@subsection Graphs\n-\n-Nodes and edges in the exploded graph are called ``exploded nodes'' and\n-``exploded edges'' and often referred to in the code as\n-@code{enodes} and @code{eedges} (especially when distinguishing them\n-from the @code{snodes} and @code{sedges} in the supergraph).\n-\n-Each graph numbers its nodes, giving unique identifiers - supernodes\n-are referred to throughout dumps in the form @samp{SN': @var{index}} and\n-exploded nodes in the form @samp{EN: @var{index}} (e.g. @samp{SN: 2} and\n-@samp{EN:29}).\n-\n-The supergraph can be seen using @option{-fdump-analyzer-supergraph-graph}.\n-\n-The exploded graph can be seen using @option{-fdump-analyzer-exploded-graph}\n-and other dump options.  Exploded nodes are color-coded in the .dot output\n-based on state-machine states to make it easier to see state changes at\n-a glance.\n-\n-@subsection State Tracking\n-\n-There's a tension between:\n-@itemize @bullet\n-@item\n-precision of analysis in the straight-line case, vs\n-@item\n-exponential blow-up in the face of control flow.\n-@end itemize\n-\n-For example, in general, given this CFG:\n-\n-@smallexample\n-      A\n-     / \\\n-    B   C\n-     \\ /\n-      D\n-     / \\\n-    E   F\n-     \\ /\n-      G\n-@end smallexample\n-\n-we want to avoid differences in state-tracking in B and C from\n-leading to blow-up.  If we don't prevent state blowup, we end up\n-with exponential growth of the exploded graph like this:\n-\n-@smallexample\n-\n-           1:A\n-          /   \\\n-         /     \\\n-        /       \\\n-      2:B       3:C\n-       |         |\n-      4:D       5:D        (2 exploded nodes for D)\n-     /   \\     /   \\\n-   6:E   7:F 8:E   9:F\n-    |     |   |     |\n-   10:G 11:G 12:G  13:G    (4 exploded nodes for G)\n-\n-@end smallexample\n-\n-Similar issues arise with loops.\n-\n-To prevent this, we follow various approaches:\n-\n-@enumerate a\n-@item\n-state pruning: which tries to discard state that won't be relevant\n-later on withing the function.\n-This can be disabled via @option{-fno-analyzer-state-purge}.\n-\n-@item\n-state merging.  We can try to find the commonality between two\n-program_state instances to make a third, simpler program_state.\n-We have two strategies here:\n-\n-  @enumerate\n-  @item\n-     the worklist keeps new nodes for the same program_point together,\n-     and tries to merge them before processing, and thus before they have\n-     successors.  Hence, in the above, the two nodes for D (4 and 5) reach\n-     the front of the worklist together, and we create a node for D with\n-     the merger of the incoming states.\n-\n-  @item\n-     try merging with the state of existing enodes for the program_point\n-     (which may have already been explored).  There will be duplication,\n-     but only one set of duplication; subsequent duplicates are more likely\n-     to hit the cache.  In particular, (hopefully) all merger chains are\n-     finite, and so we guarantee termination.\n-     This is intended to help with loops: we ought to explore the first\n-     iteration, and then have a \"subsequent iterations\" exploration,\n-     which uses a state merged from that of the first, to be more abstract.\n-  @end enumerate\n-\n-We avoid merging pairs of states that have state-machine differences,\n-as these are the kinds of differences that are likely to be most\n-interesting.  So, for example, given:\n-\n-@smallexample\n-      if (condition)\n-        ptr = malloc (size);\n-      else\n-        ptr = local_buf;\n-\n-      .... do things with 'ptr'\n-\n-      if (condition)\n-        free (ptr);\n-\n-      ...etc\n-@end smallexample\n-\n-then we end up with an exploded graph that looks like this:\n-\n-@smallexample\n-\n-                   if (condition)\n-                     / T      \\ F\n-            ---------          ----------\n-           /                             \\\n-      ptr = malloc (size)             ptr = local_buf\n-          |                               |\n-      copy of                         copy of\n-        \"do things with 'ptr'\"          \"do things with 'ptr'\"\n-      with ptr: heap-allocated        with ptr: stack-allocated\n-          |                               |\n-      if (condition)                  if (condition)\n-          | known to be T                 | known to be F\n-      free (ptr);                         |\n-           \\                             /\n-            -----------------------------\n-                         | ('ptr' is pruned, so states can be merged)\n-                        etc\n-\n-@end smallexample\n-\n-where some duplication has occurred, but only for the places where the\n-the different paths are worth exploringly separately.\n-\n-Merging can be disabled via @option{-fno-analyzer-state-merge}.\n-@end enumerate\n-\n-@subsection Region Model\n-\n-Part of the state stored at a @code{exploded_node} is a @code{region_model}.\n-This is an implementation of the region-based ternary model described in\n-@url{https://www.researchgate.net/publication/221430855_A_Memory_Model_for_Static_Analysis_of_C_Programs,\n-\"A Memory Model for Static Analysis of C Programs\"}\n-(Zhongxing Xu, Ted Kremenek, and Jian Zhang).\n-\n-A @code{region_model} encapsulates a representation of the state of\n-memory, with a @code{store} recording a binding between @code{region}\n-instances, to @code{svalue} instances.  The bindings are organized into\n-clusters, where regions accessible via well-defined pointer arithmetic\n-are in the same cluster.  The representation is graph-like because values\n-can be pointers to regions.  It also stores a constraint_manager,\n-capturing relationships between the values.\n-\n-Because each node in the @code{exploded_graph} has a @code{region_model},\n-and each of the latter is graph-like, the @code{exploded_graph} is in some\n-ways a graph of graphs.\n-\n-Here's an example of printing a @code{program_state}, showing the\n-@code{region_model} within it, along with state for the @code{malloc}\n-state machine.\n-\n-@smallexample\n-(gdb) call debug (*this)\n-rmodel:\n-stack depth: 1\n-  frame (index 0): frame: \u2018test\u2019@@1\n-clusters within frame: \u2018test\u2019@@1\n-  cluster for: ptr_3: &HEAP_ALLOCATED_REGION(12)\n-m_called_unknown_fn: FALSE\n-constraint_manager:\n-  equiv classes:\n-  constraints:\n-malloc:\n-  0x2e89590: &HEAP_ALLOCATED_REGION(12): unchecked ('ptr_3')\n-@end smallexample\n-\n-This is the state at the point of returning from @code{calls_malloc} back\n-to @code{test} in the following:\n-\n-@smallexample\n-void *\n-calls_malloc (void)\n-@{\n-  void *result = malloc (1024);\n-  return result;\n-@}\n-\n-void test (void)\n-@{\n-  void *ptr = calls_malloc ();\n-  /* etc.  */\n-@}\n-@end smallexample\n-\n-Within the store, there is the cluster for @code{ptr_3} within the frame\n-for @code{test}, where the whole cluster is bound to a pointer value,\n-pointing at @code{HEAP_ALLOCATED_REGION(12)}.  Additionally, this pointer\n-has the @code{unchecked} state for the @code{malloc} state machine\n-indicating it hasn't yet been checked against NULL since the allocation\n-call.\n-\n-@subsection Analyzer Paths\n-\n-We need to explain to the user what the problem is, and to persuade them\n-that there really is a problem.  Hence having a @code{diagnostic_path}\n-isn't just an incidental detail of the analyzer; it's required.\n-\n-Paths ought to be:\n-@itemize @bullet\n-@item\n-interprocedurally-valid\n-@item\n-feasible\n-@end itemize\n-\n-Without state-merging, all paths in the exploded graph are feasible\n-(in terms of constraints being satisfied).\n-With state-merging, paths in the exploded graph can be infeasible.\n-\n-We collate warnings and only emit them for the simplest path\n-e.g. for a bug in a utility function, with lots of routes to calling it,\n-we only emit the simplest path (which could be intraprocedural, if\n-it can be reproduced without a caller).\n-\n-We thus want to find the shortest feasible path through the exploded\n-graph from the origin to the exploded node at which the diagnostic was\n-saved.  Unfortunately, if we simply find the shortest such path and\n-check if it's feasible we might falsely reject the diagnostic, as there\n-might be a longer path that is feasible.  Examples include the cases\n-where the diagnostic requires us to go at least once around a loop for a\n-later condition to be satisfied, or where for a later condition to be\n-satisfied we need to enter a suite of code that the simpler path skips.\n-\n-We attempt to find the shortest feasible path to each diagnostic by\n-first constructing a ``trimmed graph'' from the exploded graph,\n-containing only those nodes and edges from which there are paths to\n-the target node, and using Dijkstra's algorithm to order the trimmed\n-nodes by minimal distance to the target.\n-\n-We then use a worklist to iteratively build a ``feasible graph''\n-(actually a tree), capturing the pertinent state along each path, in\n-which every path to a ``feasible node'' is feasible by construction,\n-restricting ourselves to the trimmed graph to ensure we stay on target,\n-and ordering the worklist so that the first feasible path we find to the\n-target node is the shortest possible path.  Hence we start by trying the\n-shortest possible path, but if that fails, we explore progressively\n-longer paths, eventually trying iterations through loops.  The\n-exploration is captured in the feasible_graph, which can be dumped as a\n-.dot file via @option{-fdump-analyzer-feasibility} to visualize the\n-exploration.  The indices of the feasible nodes show the order in which\n-they were created.  We effectively explore the tree of feasible paths in\n-order of shortest path until we either find a feasible path to the\n-target node, or hit a limit and give up.\n-\n-This is something of a brute-force approach, but the trimmed graph\n-hopefully keeps the complexity manageable.\n-\n-This algorithm can be disabled (for debugging purposes) via\n-@option{-fno-analyzer-feasibility}, which simply uses the shortest path,\n-and notes if it is infeasible.\n-\n-The above gives us a shortest feasible @code{exploded_path} through the\n-@code{exploded_graph} (a list of @code{exploded_edge *}).  We use this\n-@code{exploded_path} to build a @code{diagnostic_path} (a list of\n-@strong{events} for the diagnostic subsystem) - specifically a\n-@code{checker_path}.\n-\n-Having built the @code{checker_path}, we prune it to try to eliminate\n-events that aren't relevant, to minimize how much the user has to read.\n-\n-After pruning, we notify each event in the path of its ID and record the\n-IDs of interesting events, allowing for events to refer to other events\n-in their descriptions.  The @code{pending_diagnostic} class has various\n-vfuncs to support emitting more precise descriptions, so that e.g.\n-\n-@itemize @bullet\n-@item\n-a deref-of-unchecked-malloc diagnostic might use:\n-@smallexample\n-  returning possibly-NULL pointer to 'make_obj' from 'allocator'\n-@end smallexample\n-for a @code{return_event} to make it clearer how the unchecked value moves\n-from callee back to caller\n-@item\n-a double-free diagnostic might use:\n-@smallexample\n-  second 'free' here; first 'free' was at (3)\n-@end smallexample\n-and a use-after-free might use\n-@smallexample\n-  use after 'free' here; memory was freed at (2)\n-@end smallexample\n-@end itemize\n-\n-At this point we can emit the diagnostic.\n-\n-@subsection Limitations\n-\n-@itemize @bullet\n-@item\n-Only for C so far\n-@item\n-The implementation of call summaries is currently very simplistic.\n-@item\n-Lack of function pointer analysis\n-@item\n-The constraint-handling code assumes reflexivity in some places\n-(that values are equal to themselves), which is not the case for NaN.\n-As a simple workaround, constraints on floating-point values are\n-currently ignored.\n-@item\n-There are various other limitations in the region model (grep for TODO/xfail\n-in the testsuite).\n-@item\n-The constraint_manager's implementation of transitivity is currently too\n-expensive to enable by default and so must be manually enabled via\n-@option{-fanalyzer-transitivity}).\n-@item\n-The checkers are currently hardcoded and don't allow for user extensibility\n-(e.g. adding allocate/release pairs).\n-@item\n-Although the analyzer's test suite has a proof-of-concept test case for\n-LTO, LTO support hasn't had extensive testing.  There are various\n-lang-specific things in the analyzer that assume C rather than LTO.\n-For example, SSA names are printed to the user in ``raw'' form, rather\n-than printing the underlying variable name.\n-@end itemize\n-\n-Some ideas for other checkers\n-@itemize @bullet\n-@item\n-File-descriptor-based APIs\n-@item\n-Linux kernel internal APIs\n-@item\n-Signal handling\n-@end itemize\n-\n-@node Debugging the Analyzer\n-@section Debugging the Analyzer\n-@cindex analyzer, debugging\n-@cindex static analyzer, debugging\n-\n-@subsection Special Functions for Debugging the Analyzer\n-\n-The analyzer recognizes various special functions by name, for use\n-in debugging the analyzer.  Declarations can be seen in the testsuite\n-in @file{analyzer-decls.h}.  None of these functions are actually\n-implemented.\n-\n-Add:\n-@smallexample\n-  __analyzer_break ();\n-@end smallexample\n-to the source being analyzed to trigger a breakpoint in the analyzer when\n-that source is reached.  By putting a series of these in the source, it's\n-much easier to effectively step through the program state as it's analyzed.\n-\n-The analyzer handles:\n-\n-@smallexample\n-__analyzer_describe (0, expr);\n-@end smallexample\n-\n-by emitting a warning describing the 2nd argument (which can be of any\n-type), at a verbosity level given by the 1st argument.  This is for use when\n-debugging, and may be of use in DejaGnu tests.\n-\n-@smallexample\n-__analyzer_dump ();\n-@end smallexample\n-\n-will dump the copious information about the analyzer's state each time it\n-reaches the call in its traversal of the source.\n-\n-@smallexample\n-extern void __analyzer_dump_capacity (const void *ptr);\n-@end smallexample\n-\n-will emit a warning describing the capacity of the base region of\n-the region pointed to by the 1st argument.\n-\n-@smallexample\n-extern void __analyzer_dump_escaped (void);\n-@end smallexample\n-\n-will emit a warning giving the number of decls that have escaped on this\n-analysis path, followed by a comma-separated list of their names,\n-in alphabetical order.\n-\n-@smallexample\n-__analyzer_dump_path ();\n-@end smallexample\n-\n-will emit a placeholder ``note'' diagnostic with a path to that call site,\n-if the analyzer finds a feasible path to it.\n-\n-The builtin @code{__analyzer_dump_exploded_nodes} will emit a warning\n-after analysis containing information on all of the exploded nodes at that\n-program point:\n-\n-@smallexample\n-  __analyzer_dump_exploded_nodes (0);\n-@end smallexample\n-\n-will output the number of ``processed'' nodes, and the IDs of\n-both ``processed'' and ``merger'' nodes, such as:\n-\n-@smallexample\n-warning: 2 processed enodes: [EN: 56, EN: 58] merger(s): [EN: 54-55, EN: 57, EN: 59]\n-@end smallexample\n-\n-With a non-zero argument\n-\n-@smallexample\n-  __analyzer_dump_exploded_nodes (1);\n-@end smallexample\n-\n-it will also dump all of the states within the ``processed'' nodes.\n-\n-@smallexample\n-   __analyzer_dump_region_model ();\n-@end smallexample\n-will dump the region_model's state to stderr.\n-\n-@smallexample\n-__analyzer_dump_state (\"malloc\", ptr);\n-@end smallexample\n-\n-will emit a warning describing the state of the 2nd argument\n-(which can be of any type) with respect to the state machine with\n-a name matching the 1st argument (which must be a string literal).\n-This is for use when debugging, and may be of use in DejaGnu tests.\n-\n-@smallexample\n-__analyzer_eval (expr);\n-@end smallexample\n-will emit a warning with text \"TRUE\", FALSE\" or \"UNKNOWN\" based on the\n-truthfulness of the argument.  This is useful for writing DejaGnu tests.\n-\n-@smallexample\n-__analyzer_get_unknown_ptr ();\n-@end smallexample\n-will obtain an unknown @code{void *}.\n-\n-@subsection Other Debugging Techniques\n-\n-The option @option{-fdump-analyzer-json} will dump both the supergraph\n-and the exploded graph in compressed JSON form.\n-\n-One approach when tracking down where a particular bogus state is\n-introduced into the @code{exploded_graph} is to add custom code to\n-@code{program_state::validate}.\n-\n-The debug function @code{region::is_named_decl_p} can be used when debugging,\n-such as for assertions and conditional breakpoints.  For example, when\n-tracking down a bug in handling a decl called @code{yy_buffer_stack}, I\n-temporarily added a:\n-@smallexample\n-  gcc_assert (!m_base_region->is_named_decl_p (\"yy_buffer_stack\"));\n-@end smallexample\n-to @code{binding_cluster::mark_as_escaped} to trap a point where\n-@code{yy_buffer_stack} was mistakenly being treated as having escaped."}, {"sha": "c3e9817928a3cbd906faaee89e22a676800d524b", "filename": "gcc/doc/avr-mmcu.texi", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Favr-mmcu.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Favr-mmcu.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Favr-mmcu.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,83 +0,0 @@\n-@c Copyright (C) 2012-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc/doc/include/fdl.texi.\n-\n-@c This file is generated automatically using\n-@c gcc/config/avr/gen-avr-mmcu-texi.cc from:\n-@c\t gcc/config/avr/avr-arch.h\n-@c\t gcc/config/avr/avr-devices.cc\n-@c\t gcc/config/avr/avr-mcus.def\n-\n-@c Please do not edit manually.\n-\n-@table @code\n-\n-@item avr2\n-``Classic'' devices with up to 8@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{attiny22}, @code{attiny26}, @code{at90s2313}, @code{at90s2323}, @code{at90s2333}, @code{at90s2343}, @code{at90s4414}, @code{at90s4433}, @code{at90s4434}, @code{at90c8534}, @code{at90s8515}, @code{at90s8535}.\n-\n-@item avr25\n-``Classic'' devices with up to 8@tie{}KiB of program memory and with the @code{MOVW} instruction.\n-@*@var{mcu}@tie{}= @code{attiny13}, @code{attiny13a}, @code{attiny24}, @code{attiny24a}, @code{attiny25}, @code{attiny261}, @code{attiny261a}, @code{attiny2313}, @code{attiny2313a}, @code{attiny43u}, @code{attiny44}, @code{attiny44a}, @code{attiny45}, @code{attiny48}, @code{attiny441}, @code{attiny461}, @code{attiny461a}, @code{attiny4313}, @code{attiny84}, @code{attiny84a}, @code{attiny85}, @code{attiny87}, @code{attiny88}, @code{attiny828}, @code{attiny841}, @code{attiny861}, @code{attiny861a}, @code{ata5272}, @code{ata6616c}, @code{at86rf401}.\n-\n-@item avr3\n-``Classic'' devices with 16@tie{}KiB up to 64@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{at76c711}, @code{at43usb355}.\n-\n-@item avr31\n-``Classic'' devices with 128@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{atmega103}, @code{at43usb320}.\n-\n-@item avr35\n-``Classic'' devices with 16@tie{}KiB up to 64@tie{}KiB of program memory and with the @code{MOVW} instruction.\n-@*@var{mcu}@tie{}= @code{attiny167}, @code{attiny1634}, @code{atmega8u2}, @code{atmega16u2}, @code{atmega32u2}, @code{ata5505}, @code{ata6617c}, @code{ata664251}, @code{at90usb82}, @code{at90usb162}.\n-\n-@item avr4\n-``Enhanced'' devices with up to 8@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{atmega48}, @code{atmega48a}, @code{atmega48p}, @code{atmega48pa}, @code{atmega48pb}, @code{atmega8}, @code{atmega8a}, @code{atmega8hva}, @code{atmega88}, @code{atmega88a}, @code{atmega88p}, @code{atmega88pa}, @code{atmega88pb}, @code{atmega8515}, @code{atmega8535}, @code{ata6285}, @code{ata6286}, @code{ata6289}, @code{ata6612c}, @code{at90pwm1}, @code{at90pwm2}, @code{at90pwm2b}, @code{at90pwm3}, @code{at90pwm3b}, @code{at90pwm81}.\n-\n-@item avr5\n-``Enhanced'' devices with 16@tie{}KiB up to 64@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{atmega16}, @code{atmega16a}, @code{atmega16hva}, @code{atmega16hva2}, @code{atmega16hvb}, @code{atmega16hvbrevb}, @code{atmega16m1}, @code{atmega16u4}, @code{atmega161}, @code{atmega162}, @code{atmega163}, @code{atmega164a}, @code{atmega164p}, @code{atmega164pa}, @code{atmega165}, @code{atmega165a}, @code{atmega165p}, @code{atmega165pa}, @code{atmega168}, @code{atmega168a}, @code{atmega168p}, @code{atmega168pa}, @code{atmega168pb}, @code{atmega169}, @code{atmega169a}, @code{atmega169p}, @code{atmega169pa}, @code{atmega32}, @code{atmega32a}, @code{atmega32c1}, @code{atmega32hvb}, @code{atmega32hvbrevb}, @code{atmega32m1}, @code{atmega32u4}, @code{atmega32u6}, @code{atmega323}, @code{atmega324a}, @code{atmega324p}, @code{atmega324pa}, @code{atmega324pb}, @code{atmega325}, @code{atmega325a}, @code{atmega325p}, @code{atmega325pa}, @code{atmega328}, @code{atmega328p}, @code{atmega328pb}, @code{atmega329}, @code{atmega329a}, @code{atmega329p}, @code{atmega329pa}, @code{atmega3250}, @code{atmega3250a}, @code{atmega3250p}, @code{atmega3250pa}, @code{atmega3290}, @code{atmega3290a}, @code{atmega3290p}, @code{atmega3290pa}, @code{atmega406}, @code{atmega64}, @code{atmega64a}, @code{atmega64c1}, @code{atmega64hve}, @code{atmega64hve2}, @code{atmega64m1}, @code{atmega64rfr2}, @code{atmega640}, @code{atmega644}, @code{atmega644a}, @code{atmega644p}, @code{atmega644pa}, @code{atmega644rfr2}, @code{atmega645}, @code{atmega645a}, @code{atmega645p}, @code{atmega649}, @code{atmega649a}, @code{atmega649p}, @code{atmega6450}, @code{atmega6450a}, @code{atmega6450p}, @code{atmega6490}, @code{atmega6490a}, @code{atmega6490p}, @code{ata5795}, @code{ata5790}, @code{ata5790n}, @code{ata5791}, @code{ata6613c}, @code{ata6614q}, @code{ata5782}, @code{ata5831}, @code{ata8210}, @code{ata8510}, @code{ata5702m322}, @code{at90pwm161}, @code{at90pwm216}, @code{at90pwm316}, @code{at90can32}, @code{at90can64}, @code{at90scr100}, @code{at90usb646}, @code{at90usb647}, @code{at94k}, @code{m3000}.\n-\n-@item avr51\n-``Enhanced'' devices with 128@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{atmega128}, @code{atmega128a}, @code{atmega128rfa1}, @code{atmega128rfr2}, @code{atmega1280}, @code{atmega1281}, @code{atmega1284}, @code{atmega1284p}, @code{atmega1284rfr2}, @code{at90can128}, @code{at90usb1286}, @code{at90usb1287}.\n-\n-@item avr6\n-``Enhanced'' devices with 3-byte PC, i.e.@: with more than 128@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{atmega256rfr2}, @code{atmega2560}, @code{atmega2561}, @code{atmega2564rfr2}.\n-\n-@item avrxmega2\n-``XMEGA'' devices with more than 8@tie{}KiB and up to 64@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{atxmega8e5}, @code{atxmega16a4}, @code{atxmega16a4u}, @code{atxmega16c4}, @code{atxmega16d4}, @code{atxmega16e5}, @code{atxmega32a4}, @code{atxmega32a4u}, @code{atxmega32c3}, @code{atxmega32c4}, @code{atxmega32d3}, @code{atxmega32d4}, @code{atxmega32e5}, @code{avr64da28}, @code{avr64da32}, @code{avr64da48}, @code{avr64da64}, @code{avr64db28}, @code{avr64db32}, @code{avr64db48}, @code{avr64db64}.\n-\n-@item avrxmega3\n-``XMEGA'' devices with up to 64@tie{}KiB of combined program memory and RAM, and with program memory visible in the RAM address space.\n-@*@var{mcu}@tie{}= @code{attiny202}, @code{attiny204}, @code{attiny212}, @code{attiny214}, @code{attiny402}, @code{attiny404}, @code{attiny406}, @code{attiny412}, @code{attiny414}, @code{attiny416}, @code{attiny417}, @code{attiny804}, @code{attiny806}, @code{attiny807}, @code{attiny814}, @code{attiny816}, @code{attiny817}, @code{attiny1604}, @code{attiny1606}, @code{attiny1607}, @code{attiny1614}, @code{attiny1616}, @code{attiny1617}, @code{attiny3214}, @code{attiny3216}, @code{attiny3217}, @code{atmega808}, @code{atmega809}, @code{atmega1608}, @code{atmega1609}, @code{atmega3208}, @code{atmega3209}, @code{atmega4808}, @code{atmega4809}, @code{avr32da28}, @code{avr32da32}, @code{avr32da48}, @code{avr32db28}, @code{avr32db32}, @code{avr32db48}.\n-\n-@item avrxmega4\n-``XMEGA'' devices with more than 64@tie{}KiB and up to 128@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{atxmega64a3}, @code{atxmega64a3u}, @code{atxmega64a4u}, @code{atxmega64b1}, @code{atxmega64b3}, @code{atxmega64c3}, @code{atxmega64d3}, @code{atxmega64d4}, @code{avr128da28}, @code{avr128da32}, @code{avr128da48}, @code{avr128da64}, @code{avr128db28}, @code{avr128db32}, @code{avr128db48}, @code{avr128db64}.\n-\n-@item avrxmega5\n-``XMEGA'' devices with more than 64@tie{}KiB and up to 128@tie{}KiB of program memory and more than 64@tie{}KiB of RAM.\n-@*@var{mcu}@tie{}= @code{atxmega64a1}, @code{atxmega64a1u}.\n-\n-@item avrxmega6\n-``XMEGA'' devices with more than 128@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{atxmega128a3}, @code{atxmega128a3u}, @code{atxmega128b1}, @code{atxmega128b3}, @code{atxmega128c3}, @code{atxmega128d3}, @code{atxmega128d4}, @code{atxmega192a3}, @code{atxmega192a3u}, @code{atxmega192c3}, @code{atxmega192d3}, @code{atxmega256a3}, @code{atxmega256a3b}, @code{atxmega256a3bu}, @code{atxmega256a3u}, @code{atxmega256c3}, @code{atxmega256d3}, @code{atxmega384c3}, @code{atxmega384d3}.\n-\n-@item avrxmega7\n-``XMEGA'' devices with more than 128@tie{}KiB of program memory and more than 64@tie{}KiB of RAM.\n-@*@var{mcu}@tie{}= @code{atxmega128a1}, @code{atxmega128a1u}, @code{atxmega128a4u}.\n-\n-@item avrtiny\n-``TINY'' Tiny core devices with 512@tie{}B up to 4@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{attiny4}, @code{attiny5}, @code{attiny9}, @code{attiny10}, @code{attiny20}, @code{attiny40}.\n-\n-@item avr1\n-This ISA is implemented by the minimal AVR core and supported for assembler only.\n-@*@var{mcu}@tie{}= @code{attiny11}, @code{attiny12}, @code{attiny15}, @code{attiny28}, @code{at90s1200}.\n-\n-@end table"}, {"sha": "84246faeceea2d6561b73a2408e5060c80e824ec", "filename": "gcc/doc/bugreport.texi", "status": "removed", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fbugreport.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fbugreport.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fbugreport.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,88 +0,0 @@\n-@c Copyright (C) 1988-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@node Bugs\n-@chapter Reporting Bugs\n-@cindex bugs\n-@cindex reporting bugs\n-\n-Your bug reports play an essential role in making GCC reliable.\n-\n-When you encounter a problem, the first thing to do is to see if it is\n-already known.  @xref{Trouble}.  If it isn't known, then you should\n-report the problem.\n-\n-@menu\n-* Criteria:  Bug Criteria.   Have you really found a bug?\n-* Reporting: Bug Reporting.  How to report a bug effectively.\n-@end menu\n-\n-@node Bug Criteria\n-@section Have You Found a Bug?\n-@cindex bug criteria\n-\n-If you are not sure whether you have found a bug, here are some guidelines:\n-\n-@itemize @bullet\n-@cindex fatal signal\n-@cindex core dump\n-@item\n-If the compiler gets a fatal signal, for any input whatever, that is a\n-compiler bug.  Reliable compilers never crash.\n-\n-@cindex invalid assembly code\n-@cindex assembly code, invalid\n-@item\n-If the compiler produces invalid assembly code, for any input whatever\n-(except an @code{asm} statement), that is a compiler bug, unless the\n-compiler reports errors (not just warnings) which would ordinarily\n-prevent the assembler from being run.\n-\n-@cindex undefined behavior\n-@cindex undefined function value\n-@cindex increment operators\n-@item\n-If the compiler produces valid assembly code that does not correctly\n-execute the input source code, that is a compiler bug.\n-\n-However, you must double-check to make sure, because you may have a\n-program whose behavior is undefined, which happened by chance to give\n-the desired results with another C or C++ compiler.\n-\n-For example, in many nonoptimizing compilers, you can write @samp{x;}\n-at the end of a function instead of @samp{return x;}, with the same\n-results.  But the value of the function is undefined if @code{return}\n-is omitted; it is not a bug when GCC produces different results.\n-\n-Problems often result from expressions with two increment operators,\n-as in @code{f (*p++, *p++)}.  Your previous compiler might have\n-interpreted that expression the way you intended; GCC might\n-interpret it another way.  Neither compiler is wrong.  The bug is\n-in your code.\n-\n-After you have localized the error to a single source line, it should\n-be easy to check for these things.  If your program is correct and\n-well defined, you have found a compiler bug.\n-\n-@item\n-If the compiler produces an error message for valid input, that is a\n-compiler bug.\n-\n-@cindex invalid input\n-@item\n-If the compiler does not produce an error message for invalid input,\n-that is a compiler bug.  However, you should note that your idea of\n-``invalid input'' might be someone else's idea of ``an extension'' or\n-``support for traditional practice''.\n-\n-@item\n-If you are an experienced user of one of the languages GCC supports, your\n-suggestions for improvement of GCC are welcome in any case.\n-@end itemize\n-\n-@node Bug Reporting\n-@section How and Where to Report Bugs\n-@cindex compiler bugs, reporting\n-\n-Bugs should be reported to the bug database at @value{BUGURL}."}, {"sha": "32aacdd0aa82dafe486fb354a1bb9ef45fe3af08", "filename": "gcc/doc/cfg.texi", "status": "removed", "additions": 0, "deletions": 684, "changes": 684, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fcfg.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fcfg.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcfg.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,684 +0,0 @@\n-@c -*-texinfo-*-\n-@c Copyright (C) 2001-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@c ---------------------------------------------------------------------\n-@c Control Flow Graph\n-@c ---------------------------------------------------------------------\n-\n-@node Control Flow\n-@chapter Control Flow Graph\n-@cindex CFG, Control Flow Graph\n-@findex basic-block.h\n-\n-A control flow graph (CFG) is a data structure built on top of the\n-intermediate code representation (the RTL or @code{GIMPLE} instruction\n-stream) abstracting the control flow behavior of a function that is\n-being compiled.  The CFG is a directed graph where the vertices\n-represent basic blocks and edges represent possible transfer of\n-control flow from one basic block to another.  The data structures\n-used to represent the control flow graph are defined in\n-@file{basic-block.h}.\n-\n-In GCC, the representation of control flow is maintained throughout\n-the compilation process, from constructing the CFG early in \n-@code{pass_build_cfg} to @code{pass_free_cfg} (see @file{passes.def}).\n-The CFG takes various different modes and may undergo extensive\n-manipulations, but the graph is always valid between its construction\n-and its release.  This way, transfer of information such as data flow,\n-a measured profile, or the loop tree, can be propagated through the\n-passes pipeline, and even from @code{GIMPLE} to @code{RTL}.\n-\n-Often the CFG may be better viewed as integral part of instruction\n-chain, than structure built on the top of it.  Updating the compiler's\n-intermediate representation for instructions cannot be easily done\n-without proper maintenance of the CFG simultaneously.\n-\n-@menu\n-* Basic Blocks::           The definition and representation of basic blocks.\n-* Edges::                  Types of edges and their representation.\n-* Profile information::    Representation of frequencies and probabilities.\n-* Maintaining the CFG::    Keeping the control flow graph and up to date.\n-* Liveness information::   Using and maintaining liveness information.\n-@end menu\n-\n-\n-@node Basic Blocks\n-@section Basic Blocks\n-\n-@cindex basic block\n-@findex basic_block\n-A basic block is a straight-line sequence of code with only one entry\n-point and only one exit.  In GCC, basic blocks are represented using\n-the @code{basic_block} data type.\n-\n-@findex ENTRY_BLOCK_PTR, EXIT_BLOCK_PTR\n-Special basic blocks represent possible entry and exit points of a\n-function.  These blocks are called @code{ENTRY_BLOCK_PTR} and\n-@code{EXIT_BLOCK_PTR}.  These blocks do not contain any code.\n-\n-@findex BASIC_BLOCK\n-The @code{BASIC_BLOCK} array contains all basic blocks in an\n-unspecified order.  Each @code{basic_block} structure has a field\n-that holds a unique integer identifier @code{index} that is the\n-index of the block in the @code{BASIC_BLOCK} array.\n-The total number of basic blocks in the function is\n-@code{n_basic_blocks}.  Both the basic block indices and\n-the total number of basic blocks may vary during the compilation\n-process, as passes reorder, create, duplicate, and destroy basic\n-blocks.  The index for any block should never be greater than\n-@code{last_basic_block}.  The indices 0 and 1 are special codes\n-reserved for @code{ENTRY_BLOCK} and @code{EXIT_BLOCK}, the\n-indices of @code{ENTRY_BLOCK_PTR} and @code{EXIT_BLOCK_PTR}.\n-\n-@findex next_bb, prev_bb, FOR_EACH_BB, FOR_ALL_BB\n-Two pointer members of the @code{basic_block} structure are the\n-pointers @code{next_bb} and @code{prev_bb}.  These are used to keep\n-doubly linked chain of basic blocks in the same order as the\n-underlying instruction stream.  The chain of basic blocks is updated\n-transparently by the provided API for manipulating the CFG@.  The macro\n-@code{FOR_EACH_BB} can be used to visit all the basic blocks in\n-lexicographical order, except @code{ENTRY_BLOCK} and @code{EXIT_BLOCK}.\n-The macro @code{FOR_ALL_BB} also visits all basic blocks in\n-lexicographical order, including @code{ENTRY_BLOCK} and @code{EXIT_BLOCK}.\n-\n-@findex post_order_compute, inverted_post_order_compute, walk_dominator_tree\n-The functions @code{post_order_compute} and @code{inverted_post_order_compute}\n-can be used to compute topological orders of the CFG.  The orders are\n-stored as vectors of basic block indices.  The @code{BASIC_BLOCK} array\n-can be used to iterate each basic block by index.\n-Dominator traversals are also possible using\n-@code{walk_dominator_tree}.  Given two basic blocks A and B, block A\n-dominates block B if A is @emph{always} executed before B@.\n-\n-Each @code{basic_block} also contains pointers to the first\n-instruction (the @dfn{head}) and the last instruction (the @dfn{tail})\n-or @dfn{end} of the instruction stream contained in a basic block.  In\n-fact, since the @code{basic_block} data type is used to represent\n-blocks in both major intermediate representations of GCC (@code{GIMPLE}\n-and RTL), there are pointers to the head and end of a basic block for\n-both representations, stored in intermediate representation specific\n-data in the @code{il} field of @code{struct basic_block_def}.\n-\n-@findex CODE_LABEL\n-@findex NOTE_INSN_BASIC_BLOCK\n-For RTL, these pointers are @code{BB_HEAD} and @code{BB_END}.\n-\n-@cindex insn notes, notes\n-@findex NOTE_INSN_BASIC_BLOCK\n-In the RTL representation of a function, the instruction stream\n-contains not only the ``real'' instructions, but also @dfn{notes}\n-or @dfn{insn notes} (to distinguish them from @dfn{reg notes}).\n-Any function that moves or duplicates the basic blocks needs\n-to take care of updating of these notes.  Many of these notes expect\n-that the instruction stream consists of linear regions, so updating\n-can sometimes be tedious.  All types of insn notes are defined\n-in @file{insn-notes.def}.\n-\n-In the RTL function representation, the instructions contained in a\n-basic block always follow a @code{NOTE_INSN_BASIC_BLOCK}, but zero\n-or more @code{CODE_LABEL} nodes can precede the block note.\n-A basic block ends with a control flow instruction or with the last\n-instruction before the next @code{CODE_LABEL} or\n-@code{NOTE_INSN_BASIC_BLOCK}.\n-By definition, a @code{CODE_LABEL} cannot appear in the middle of\n-the instruction stream of a basic block.\n-\n-@findex can_fallthru\n-@cindex table jump\n-In addition to notes, the jump table vectors are also represented as\n-``pseudo-instructions'' inside the insn stream.  These vectors never\n-appear in the basic block and should always be placed just after the\n-table jump instructions referencing them.  After removing the\n-table-jump it is often difficult to eliminate the code computing the\n-address and referencing the vector, so cleaning up these vectors is\n-postponed until after liveness analysis.   Thus the jump table vectors\n-may appear in the insn stream unreferenced and without any purpose.\n-Before any edge is made @dfn{fall-thru}, the existence of such\n-construct in the way needs to be checked by calling\n-@code{can_fallthru} function.\n-\n-@cindex GIMPLE statement iterators\n-For the @code{GIMPLE} representation, the PHI nodes and statements\n-contained in a basic block are in a @code{gimple_seq} pointed to by\n-the basic block intermediate language specific pointers.\n-Abstract containers and iterators are used to access the PHI nodes\n-and statements in a basic blocks.  These iterators are called\n-@dfn{GIMPLE statement iterators} (GSIs).  Grep for @code{^gsi}\n-in the various @file{gimple-*} and @file{tree-*} files.\n-There is a @code{gimple_stmt_iterator} type for iterating over\n-all kinds of statement, and a @code{gphi_iterator} subclass for\n-iterating over PHI nodes.\n-The following snippet will pretty-print all PHI nodes the statements\n-of the current function in the GIMPLE representation.\n-\n-@smallexample\n-basic_block bb;\n-\n-FOR_EACH_BB (bb)\n-  @{\n-   gphi_iterator pi;\n-   gimple_stmt_iterator si;\n-\n-   for (pi = gsi_start_phis (bb); !gsi_end_p (pi); gsi_next (&pi))\n-     @{\n-       gphi *phi = pi.phi ();\n-       print_gimple_stmt (dump_file, phi, 0, TDF_SLIM);\n-     @}\n-   for (si = gsi_start_bb (bb); !gsi_end_p (si); gsi_next (&si))\n-     @{\n-       gimple stmt = gsi_stmt (si);\n-       print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n-     @}\n-  @}\n-@end smallexample\n-\n-\n-@node Edges\n-@section Edges\n-\n-@cindex edge in the flow graph\n-@findex edge\n-Edges represent possible control flow transfers from the end of some\n-basic block A to the head of another basic block B@.  We say that A is\n-a predecessor of B, and B is a successor of A@.  Edges are represented\n-in GCC with the @code{edge} data type.  Each @code{edge} acts as a\n-link between two basic blocks: The @code{src} member of an edge\n-points to the predecessor basic block of the @code{dest} basic block.\n-The members @code{preds} and @code{succs} of the @code{basic_block} data\n-type point to type-safe vectors of edges to the predecessors and\n-successors of the block.\n-\n-@cindex edge iterators\n-When walking the edges in an edge vector, @dfn{edge iterators} should\n-be used.  Edge iterators are constructed using the\n-@code{edge_iterator} data structure and several methods are available\n-to operate on them:\n-\n-@ftable @code\n-@item ei_start\n-This function initializes an @code{edge_iterator} that points to the\n-first edge in a vector of edges.\n-\n-@item ei_last\n-This function initializes an @code{edge_iterator} that points to the\n-last edge in a vector of edges.\n-\n-@item ei_end_p\n-This predicate is @code{true} if an @code{edge_iterator} represents\n-the last edge in an edge vector.\n-\n-@item ei_one_before_end_p\n-This predicate is @code{true} if an @code{edge_iterator} represents\n-the second last edge in an edge vector.\n-\n-@item ei_next\n-This function takes a pointer to an @code{edge_iterator} and makes it\n-point to the next edge in the sequence.\n-\n-@item ei_prev\n-This function takes a pointer to an @code{edge_iterator} and makes it\n-point to the previous edge in the sequence.\n-\n-@item ei_edge\n-This function returns the @code{edge} currently pointed to by an\n-@code{edge_iterator}.\n-\n-@item ei_safe_edge\n-This function returns the @code{edge} currently pointed to by an\n-@code{edge_iterator}, but returns @code{NULL} if the iterator is\n-pointing at the end of the sequence.  This function has been provided\n-for existing code makes the assumption that a @code{NULL} edge\n-indicates the end of the sequence.\n-\n-@end ftable\n-\n-The convenience macro @code{FOR_EACH_EDGE} can be used to visit all of\n-the edges in a sequence of predecessor or successor edges.  It must\n-not be used when an element might be removed during the traversal,\n-otherwise elements will be missed.  Here is an example of how to use\n-the macro:\n-\n-@smallexample\n-edge e;\n-edge_iterator ei;\n-\n-FOR_EACH_EDGE (e, ei, bb->succs)\n-  @{\n-     if (e->flags & EDGE_FALLTHRU)\n-       break;\n-  @}\n-@end smallexample\n-\n-@findex fall-thru\n-There are various reasons why control flow may transfer from one block\n-to another.  One possibility is that some instruction, for example a\n-@code{CODE_LABEL}, in a linearized instruction stream just always\n-starts a new basic block.  In this case a @dfn{fall-thru} edge links\n-the basic block to the first following basic block.  But there are\n-several other reasons why edges may be created.  The @code{flags}\n-field of the @code{edge} data type is used to store information\n-about the type of edge we are dealing with.  Each edge is of one of\n-the following types:\n-\n-@table @emph\n-@item jump\n-No type flags are set for edges corresponding to jump instructions.\n-These edges are used for unconditional or conditional jumps and in\n-RTL also for table jumps.  They are the easiest to manipulate as they\n-may be freely redirected when the flow graph is not in SSA form.\n-\n-@item fall-thru\n-@findex EDGE_FALLTHRU, force_nonfallthru\n-Fall-thru edges are present in case where the basic block may continue\n-execution to the following one without branching.  These edges have\n-the @code{EDGE_FALLTHRU} flag set.  Unlike other types of edges, these\n-edges must come into the basic block immediately following in the\n-instruction stream.  The function @code{force_nonfallthru} is\n-available to insert an unconditional jump in the case that redirection\n-is needed.  Note that this may require creation of a new basic block.\n-\n-@item exception handling\n-@cindex exception handling\n-@findex EDGE_ABNORMAL, EDGE_EH\n-Exception handling edges represent possible control transfers from a\n-trapping instruction to an exception handler.  The definition of\n-``trapping'' varies.  In C++, only function calls can throw, but for\n-Ada exceptions like division by zero or segmentation fault are\n-defined and thus each instruction possibly throwing this kind of\n-exception needs to be handled as control flow instruction.  Exception\n-edges have the @code{EDGE_ABNORMAL} and @code{EDGE_EH} flags set.\n-\n-@findex purge_dead_edges\n-When updating the instruction stream it is easy to change possibly\n-trapping instruction to non-trapping, by simply removing the exception\n-edge.  The opposite conversion is difficult, but should not happen\n-anyway.  The edges can be eliminated via @code{purge_dead_edges} call.\n-\n-@findex REG_EH_REGION, EDGE_ABNORMAL_CALL\n-In the RTL representation, the destination of an exception edge is\n-specified by @code{REG_EH_REGION} note attached to the insn.\n-In case of a trapping call the @code{EDGE_ABNORMAL_CALL} flag is set\n-too.  In the @code{GIMPLE} representation, this extra flag is not set.\n-\n-@findex may_trap_p, tree_could_trap_p\n-In the RTL representation, the predicate @code{may_trap_p} may be used\n-to check whether instruction still may trap or not.  For the tree\n-representation, the @code{tree_could_trap_p} predicate is available,\n-but this predicate only checks for possible memory traps, as in\n-dereferencing an invalid pointer location.\n-\n-\n-@item sibling calls\n-@cindex sibling call\n-@findex EDGE_ABNORMAL, EDGE_SIBCALL\n-Sibling calls or tail calls terminate the function in a non-standard\n-way and thus an edge to the exit must be present.\n-@code{EDGE_SIBCALL} and @code{EDGE_ABNORMAL} are set in such case.\n-These edges only exist in the RTL representation.\n-\n-@item computed jumps\n-@cindex computed jump\n-@findex EDGE_ABNORMAL\n-Computed jumps contain edges to all labels in the function referenced\n-from the code.  All those edges have @code{EDGE_ABNORMAL} flag set.\n-The edges used to represent computed jumps often cause compile time\n-performance problems, since functions consisting of many taken labels\n-and many computed jumps may have @emph{very} dense flow graphs, so\n-these edges need to be handled with special care.  During the earlier\n-stages of the compilation process, GCC tries to avoid such dense flow\n-graphs by factoring computed jumps.  For example, given the following\n-series of jumps,\n-\n-@smallexample\n-  goto *x;\n-  [ @dots{} ]\n-\n-  goto *x;\n-  [ @dots{} ]\n-\n-  goto *x;\n-  [ @dots{} ]\n-@end smallexample\n-\n-@noindent\n-factoring the computed jumps results in the following code sequence\n-which has a much simpler flow graph:\n-\n-@smallexample\n-  goto y;\n-  [ @dots{} ]\n-\n-  goto y;\n-  [ @dots{} ]\n-\n-  goto y;\n-  [ @dots{} ]\n-\n-y:\n-  goto *x;\n-@end smallexample\n-\n-@findex pass_duplicate_computed_gotos\n-However, the classic problem with this transformation is that it has a\n-runtime cost in there resulting code: An extra jump.  Therefore, the\n-computed jumps are un-factored in the later passes of the compiler\n-(in the pass called @code{pass_duplicate_computed_gotos}).\n-Be aware of that when you work on passes in that area.  There have\n-been numerous examples already where the compile time for code with\n-unfactored computed jumps caused some serious headaches.\n-\n-@item nonlocal goto handlers\n-@cindex nonlocal goto handler\n-@findex EDGE_ABNORMAL, EDGE_ABNORMAL_CALL\n-GCC allows nested functions to return into caller using a @code{goto}\n-to a label passed to as an argument to the callee.  The labels passed\n-to nested functions contain special code to cleanup after function\n-call.  Such sections of code are referred to as ``nonlocal goto\n-receivers''.  If a function contains such nonlocal goto receivers, an\n-edge from the call to the label is created with the\n-@code{EDGE_ABNORMAL} and @code{EDGE_ABNORMAL_CALL} flags set.\n-\n-@item function entry points\n-@cindex function entry point, alternate function entry point\n-@findex LABEL_ALTERNATE_NAME\n-By definition, execution of function starts at basic block 0, so there\n-is always an edge from the @code{ENTRY_BLOCK_PTR} to basic block 0.\n-There is no @code{GIMPLE} representation for alternate entry points at\n-this moment.  In RTL, alternate entry points are specified by\n-@code{CODE_LABEL} with @code{LABEL_ALTERNATE_NAME} defined.  This\n-feature is currently used for multiple entry point prologues and is\n-limited to post-reload passes only.  This can be used by back-ends to\n-emit alternate prologues for functions called from different contexts.\n-In future full support for multiple entry functions defined by Fortran\n-90 needs to be implemented.\n-\n-@item function exits\n-In the pre-reload representation a function terminates after the last\n-instruction in the insn chain and no explicit return instructions are\n-used.  This corresponds to the fall-thru edge into exit block.  After\n-reload, optimal RTL epilogues are used that use explicit (conditional)\n-return instructions that are represented by edges with no flags set.\n-\n-@end table\n-\n-\n-@node Profile information\n-@section Profile information\n-\n-@cindex profile representation\n-In many cases a compiler must make a choice whether to trade speed in\n-one part of code for speed in another, or to trade code size for code\n-speed.  In such cases it is useful to know information about how often\n-some given block will be executed.  That is the purpose for\n-maintaining profile within the flow graph.\n-GCC can handle profile information obtained through @dfn{profile\n-feedback}, but it can also estimate branch probabilities based on\n-statics and heuristics.\n-\n-@cindex profile feedback\n-The feedback based profile is produced by compiling the program with\n-instrumentation, executing it on a train run and reading the numbers\n-of executions of basic blocks and edges back to the compiler while\n-re-compiling the program to produce the final executable.  This method\n-provides very accurate information about where a program spends most\n-of its time on the train run.  Whether it matches the average run of\n-course depends on the choice of train data set, but several studies\n-have shown that the behavior of a program usually changes just\n-marginally over different data sets.\n-\n-@cindex Static profile estimation\n-@cindex branch prediction\n-@findex predict.def\n-When profile feedback is not available, the compiler may be asked to\n-attempt to predict the behavior of each branch in the program using a\n-set of heuristics (see @file{predict.def} for details) and compute\n-estimated frequencies of each basic block by propagating the\n-probabilities over the graph.\n-\n-@findex frequency, count, BB_FREQ_BASE\n-Each @code{basic_block} contains two integer fields to represent\n-profile information: @code{frequency} and @code{count}.  The\n-@code{frequency} is an estimation how often is basic block executed\n-within a function.  It is represented as an integer scaled in the\n-range from 0 to @code{BB_FREQ_BASE}.  The most frequently executed\n-basic block in function is initially set to @code{BB_FREQ_BASE} and\n-the rest of frequencies are scaled accordingly.  During optimization,\n-the frequency of the most frequent basic block can both decrease (for\n-instance by loop unrolling) or grow (for instance by cross-jumping\n-optimization), so scaling sometimes has to be performed multiple\n-times.\n-\n-@findex gcov_type\n-The @code{count} contains hard-counted numbers of execution measured\n-during training runs and is nonzero only when profile feedback is\n-available.  This value is represented as the host's widest integer\n-(typically a 64 bit integer) of the special type @code{gcov_type}.\n-\n-Most optimization passes can use only the frequency information of a\n-basic block, but a few passes may want to know hard execution counts.\n-The frequencies should always match the counts after scaling, however\n-during updating of the profile information numerical error may\n-accumulate into quite large errors.\n-\n-@findex REG_BR_PROB_BASE, EDGE_FREQUENCY\n-Each edge also contains a branch probability field: an integer in the\n-range from 0 to @code{REG_BR_PROB_BASE}.  It represents probability of\n-passing control from the end of the @code{src} basic block to the\n-@code{dest} basic block, i.e.@: the probability that control will flow\n-along this edge.  The @code{EDGE_FREQUENCY} macro is available to\n-compute how frequently a given edge is taken.  There is a @code{count}\n-field for each edge as well, representing same information as for a\n-basic block.\n-\n-The basic block frequencies are not represented in the instruction\n-stream, but in the RTL representation the edge frequencies are\n-represented for conditional jumps (via the @code{REG_BR_PROB}\n-macro) since they are used when instructions are output to the\n-assembly file and the flow graph is no longer maintained.\n-\n-@cindex reverse probability\n-The probability that control flow arrives via a given edge to its\n-destination basic block is called @dfn{reverse probability} and is not\n-directly represented, but it may be easily computed from frequencies\n-of basic blocks.\n-\n-@findex redirect_edge_and_branch\n-Updating profile information is a delicate task that can unfortunately\n-not be easily integrated with the CFG manipulation API@.  Many of the\n-functions and hooks to modify the CFG, such as\n-@code{redirect_edge_and_branch}, do not have enough information to\n-easily update the profile, so updating it is in the majority of cases\n-left up to the caller.  It is difficult to uncover bugs in the profile\n-updating code, because they manifest themselves only by producing\n-worse code, and checking profile consistency is not possible because\n-of numeric error accumulation.  Hence special attention needs to be\n-given to this issue in each pass that modifies the CFG@.\n-\n-@findex REG_BR_PROB_BASE, BB_FREQ_BASE, count\n-It is important to point out that @code{REG_BR_PROB_BASE} and\n-@code{BB_FREQ_BASE} are both set low enough to be possible to compute\n-second power of any frequency or probability in the flow graph, it is\n-not possible to even square the @code{count} field, as modern CPUs are\n-fast enough to execute $2^32$ operations quickly.\n-\n-\n-@node Maintaining the CFG\n-@section Maintaining the CFG\n-@findex cfghooks.h\n-\n-An important task of each compiler pass is to keep both the control\n-flow graph and all profile information up-to-date.  Reconstruction of\n-the control flow graph after each pass is not an option, since it may be\n-very expensive and lost profile information cannot be reconstructed at\n-all.\n-\n-GCC has two major intermediate representations, and both use the\n-@code{basic_block} and @code{edge} data types to represent control\n-flow.  Both representations share as much of the CFG maintenance code\n-as possible.  For each representation, a set of @dfn{hooks} is defined\n-so that each representation can provide its own implementation of CFG\n-manipulation routines when necessary.  These hooks are defined in\n-@file{cfghooks.h}.  There are hooks for almost all common CFG\n-manipulations, including block splitting and merging, edge redirection\n-and creating and deleting basic blocks.  These hooks should provide\n-everything you need to maintain and manipulate the CFG in both the RTL\n-and @code{GIMPLE} representation.\n-\n-At the moment, the basic block boundaries are maintained transparently\n-when modifying instructions, so there rarely is a need to move them\n-manually (such as in case someone wants to output instruction outside\n-basic block explicitly).\n-\n-@findex BLOCK_FOR_INSN, gimple_bb\n-In the RTL representation, each instruction has a\n-@code{BLOCK_FOR_INSN} value that represents pointer to the basic block\n-that contains the instruction.  In the @code{GIMPLE} representation, the\n-function @code{gimple_bb} returns a pointer to the basic block\n-containing the queried statement.\n-\n-@cindex GIMPLE statement iterators\n-When changes need to be applied to a function in its @code{GIMPLE}\n-representation, @dfn{GIMPLE statement iterators} should be used.  These\n-iterators provide an integrated abstraction of the flow graph and the\n-instruction stream.  Block statement iterators are constructed using\n-the @code{gimple_stmt_iterator} data structure and several modifiers are\n-available, including the following:\n-\n-@ftable @code\n-@item gsi_start\n-This function initializes a @code{gimple_stmt_iterator} that points to\n-the first non-empty statement in a basic block.\n-\n-@item gsi_last\n-This function initializes a @code{gimple_stmt_iterator} that points to\n-the last statement in a basic block.\n-\n-@item gsi_end_p\n-This predicate is @code{true} if a @code{gimple_stmt_iterator}\n-represents the end of a basic block.\n-\n-@item gsi_next\n-This function takes a @code{gimple_stmt_iterator} and makes it point to\n-its successor.\n-\n-@item gsi_prev\n-This function takes a @code{gimple_stmt_iterator} and makes it point to\n-its predecessor.\n-\n-@item gsi_insert_after\n-This function inserts a statement after the @code{gimple_stmt_iterator}\n-passed in.  The final parameter determines whether the statement\n-iterator is updated to point to the newly inserted statement, or left\n-pointing to the original statement.\n-\n-@item gsi_insert_before\n-This function inserts a statement before the @code{gimple_stmt_iterator}\n-passed in.  The final parameter determines whether the statement\n-iterator is updated to point to the newly inserted statement, or left\n-pointing to the original  statement.\n-\n-@item gsi_remove\n-This function removes the @code{gimple_stmt_iterator} passed in and\n-rechains the remaining statements in a basic block, if any.\n-@end ftable\n-\n-@findex BB_HEAD, BB_END\n-In the RTL representation, the macros @code{BB_HEAD} and @code{BB_END}\n-may be used to get the head and end @code{rtx} of a basic block.  No\n-abstract iterators are defined for traversing the insn chain, but you\n-can just use @code{NEXT_INSN} and @code{PREV_INSN} instead.  @xref{Insns}.\n-\n-@findex purge_dead_edges\n-Usually a code manipulating pass simplifies the instruction stream and\n-the flow of control, possibly eliminating some edges.  This may for\n-example happen when a conditional jump is replaced with an\n-unconditional jump.  Updating of edges\n-is not transparent and each optimization pass is required to do so\n-manually.  However only few cases occur in practice.  The pass may\n-call @code{purge_dead_edges} on a given basic block to remove\n-superfluous edges, if any.\n-\n-@findex redirect_edge_and_branch, redirect_jump\n-Another common scenario is redirection of branch instructions, but\n-this is best modeled as redirection of edges in the control flow graph\n-and thus use of @code{redirect_edge_and_branch} is preferred over more\n-low level functions, such as @code{redirect_jump} that operate on RTL\n-chain only.  The CFG hooks defined in @file{cfghooks.h} should provide\n-the complete API required for manipulating and maintaining the CFG@.\n-\n-@findex split_block\n-It is also possible that a pass has to insert control flow instruction\n-into the middle of a basic block, thus creating an entry point in the\n-middle of the basic block, which is impossible by definition: The\n-block must be split to make sure it only has one entry point, i.e.@: the\n-head of the basic block.  The CFG hook @code{split_block} may be used\n-when an instruction in the middle of a basic block has to become the\n-target of a jump or branch instruction.\n-\n-@findex insert_insn_on_edge\n-@findex commit_edge_insertions\n-@findex gsi_insert_on_edge\n-@findex gsi_commit_edge_inserts\n-@cindex edge splitting\n-For a global optimizer, a common operation is to split edges in the\n-flow graph and insert instructions on them.  In the RTL\n-representation, this can be easily done using the\n-@code{insert_insn_on_edge} function that emits an instruction\n-``on the edge'', caching it for a later @code{commit_edge_insertions}\n-call that will take care of moving the inserted instructions off the\n-edge into the instruction stream contained in a basic block.  This\n-includes the creation of new basic blocks where needed.  In the\n-@code{GIMPLE} representation, the equivalent functions are\n-@code{gsi_insert_on_edge} which inserts a block statement\n-iterator on an edge, and @code{gsi_commit_edge_inserts} which flushes\n-the instruction to actual instruction stream.\n-\n-@findex verify_flow_info\n-@cindex CFG verification\n-While debugging the optimization pass, the @code{verify_flow_info}\n-function may be useful to find bugs in the control flow graph updating\n-code.\n-\n-\n-@node Liveness information\n-@section Liveness information\n-@cindex Liveness representation\n-Liveness information is useful to determine whether some register is\n-``live'' at given point of program, i.e.@: that it contains a value that\n-may be used at a later point in the program.  This information is\n-used, for instance, during register allocation, as the pseudo\n-registers only need to be assigned to a unique hard register or to a\n-stack slot if they are live.  The hard registers and stack slots may\n-be freely reused for other values when a register is dead.\n-\n-Liveness information is available in the back end starting with\n-@code{pass_df_initialize} and ending with @code{pass_df_finish}.  Three\n-flavors of live analysis are available: With @code{LR}, it is possible\n-to determine at any point @code{P} in the function if the register may be\n-used on some path from @code{P} to the end of the function.  With\n-@code{UR}, it is possible to determine if there is a path from the\n-beginning of the function to @code{P} that defines the variable.\n-@code{LIVE} is the intersection of the @code{LR} and @code{UR} and a\n-variable is live at @code{P} if there is both an assignment that reaches\n-it from the beginning of the function and a use that can be reached on\n-some path from @code{P} to the end of the function.\n-\n-In general @code{LIVE} is the most useful of the three.  The macros\n-@code{DF_[LR,UR,LIVE]_[IN,OUT]} can be used to access this information.\n-The macros take a basic block number and return a bitmap that is indexed\n-by the register number.  This information is only guaranteed to be up to\n-date after calls are made to @code{df_analyze}.  See the file\n-@code{df-core.cc} for details on using the dataflow.\n-\n-\n-@findex REG_DEAD, REG_UNUSED\n-The liveness information is stored partly in the RTL instruction stream\n-and partly in the flow graph.  Local information is stored in the\n-instruction stream: Each instruction may contain @code{REG_DEAD} notes\n-representing that the value of a given register is no longer needed, or\n-@code{REG_UNUSED} notes representing that the value computed by the\n-instruction is never used.  The second is useful for instructions\n-computing multiple values at once.\n-"}, {"sha": "8155b7906c99f9bbd9624ed43df81329bb796212", "filename": "gcc/doc/collect2.texi", "status": "removed", "additions": 0, "deletions": 89, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fcollect2.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fcollect2.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcollect2.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,89 +0,0 @@\n-@c Copyright (C) 1988-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@node Collect2\n-@chapter @code{collect2}\n-\n-GCC uses a utility called @code{collect2} on nearly all systems to arrange\n-to call various initialization functions at start time.\n-\n-The program @code{collect2} works by linking the program once and\n-looking through the linker output file for symbols with particular names\n-indicating they are constructor functions.  If it finds any, it\n-creates a new temporary @samp{.c} file containing a table of them,\n-compiles it, and links the program a second time including that file.\n-\n-@findex __main\n-@cindex constructors, automatic calls\n-The actual calls to the constructors are carried out by a subroutine\n-called @code{__main}, which is called (automatically) at the beginning\n-of the body of @code{main} (provided @code{main} was compiled with GNU\n-CC)@.  Calling @code{__main} is necessary, even when compiling C code, to\n-allow linking C and C++ object code together.  (If you use\n-@option{-nostdlib}, you get an unresolved reference to @code{__main},\n-since it's defined in the standard GCC library.  Include @option{-lgcc} at\n-the end of your compiler command line to resolve this reference.)\n-\n-The program @code{collect2} is installed as @code{ld} in the directory\n-where the passes of the compiler are installed.  When @code{collect2}\n-needs to find the @emph{real} @code{ld}, it tries the following file\n-names:\n-\n-@itemize @bullet\n-@item\n-a hard coded linker file name, if GCC was configured with the\n-@option{--with-ld} option.\n-\n-@item\n-@file{real-ld} in the directories listed in the compiler's search\n-directories.\n-\n-@item\n-@file{real-ld} in the directories listed in the environment variable\n-@code{PATH}.\n-\n-@item\n-The file specified in the @code{REAL_LD_FILE_NAME} configuration macro,\n-if specified.\n-\n-@item\n-@file{ld} in the compiler's search directories, except that\n-@code{collect2} will not execute itself recursively.\n-\n-@item\n-@file{ld} in @code{PATH}.\n-@end itemize\n-\n-``The compiler's search directories'' means all the directories where\n-@command{gcc} searches for passes of the compiler.  This includes\n-directories that you specify with @option{-B}.\n-\n-Cross-compilers search a little differently:\n-\n-@itemize @bullet\n-@item\n-@file{real-ld} in the compiler's search directories.\n-\n-@item\n-@file{@var{target}-real-ld} in @code{PATH}.\n-\n-@item\n-The file specified in the @code{REAL_LD_FILE_NAME} configuration macro,\n-if specified.\n-\n-@item\n-@file{ld} in the compiler's search directories.\n-\n-@item\n-@file{@var{target}-ld} in @code{PATH}.\n-@end itemize\n-\n-@code{collect2} explicitly avoids running @code{ld} using the file name\n-under which @code{collect2} itself was invoked.  In fact, it remembers\n-up a list of such names---in case one copy of @code{collect2} finds\n-another copy (or version) of @code{collect2} installed as @code{ld} in a\n-second place in the search path.\n-\n-@code{collect2} searches for the utilities @code{nm} and @code{strip}\n-using the same algorithm as above for @code{ld}."}, {"sha": "ae265fa01de6c4e9c173dcfe40c2942344ff3260", "filename": "gcc/doc/compat.texi", "status": "removed", "additions": 0, "deletions": 156, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fcompat.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fcompat.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcompat.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,156 +0,0 @@\n-@c Copyright (C) 2002-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@node Compatibility\n-@chapter Binary Compatibility\n-@cindex binary compatibility\n-@cindex ABI\n-@cindex application binary interface\n-\n-Binary compatibility encompasses several related concepts:\n-\n-@table @dfn\n-@item application binary interface (ABI)\n-The set of runtime conventions followed by all of the tools that deal\n-with binary representations of a program, including compilers, assemblers,\n-linkers, and language runtime support.\n-Some ABIs are formal with a written specification, possibly designed\n-by multiple interested parties.  Others are simply the way things are\n-actually done by a particular set of tools.\n-\n-@item ABI conformance\n-A compiler conforms to an ABI if it generates code that follows all of\n-the specifications enumerated by that ABI@.\n-A library conforms to an ABI if it is implemented according to that ABI@.\n-An application conforms to an ABI if it is built using tools that conform\n-to that ABI and does not contain source code that specifically changes\n-behavior specified by the ABI@.\n-\n-@item calling conventions\n-Calling conventions are a subset of an ABI that specify of how arguments\n-are passed and function results are returned.\n-\n-@item interoperability\n-Different sets of tools are interoperable if they generate files that\n-can be used in the same program.  The set of tools includes compilers,\n-assemblers, linkers, libraries, header files, startup files, and debuggers.\n-Binaries produced by different sets of tools are not interoperable unless\n-they implement the same ABI@.  This applies to different versions of the\n-same tools as well as tools from different vendors.\n-\n-@item intercallability\n-Whether a function in a binary built by one set of tools can call a\n-function in a binary built by a different set of tools is a subset\n-of interoperability.\n-\n-@item implementation-defined features\n-Language standards include lists of implementation-defined features whose\n-behavior can vary from one implementation to another.  Some of these\n-features are normally covered by a platform's ABI and others are not.\n-The features that are not covered by an ABI generally affect how a\n-program behaves, but not intercallability.\n-\n-@item compatibility\n-Conformance to the same ABI and the same behavior of implementation-defined\n-features are both relevant for compatibility.\n-@end table\n-\n-The application binary interface implemented by a C or C++ compiler\n-affects code generation and runtime support for:\n-\n-@itemize @bullet\n-@item\n-size and alignment of data types\n-@item\n-layout of structured types\n-@item\n-calling conventions\n-@item\n-register usage conventions\n-@item\n-interfaces for runtime arithmetic support\n-@item\n-object file formats\n-@end itemize\n-\n-In addition, the application binary interface implemented by a C++ compiler\n-affects code generation and runtime support for:\n-@itemize @bullet\n-@item\n-name mangling\n-@item\n-exception handling\n-@item\n-invoking constructors and destructors\n-@item\n-layout, alignment, and padding of classes\n-@item\n-layout and alignment of virtual tables\n-@end itemize\n-\n-Some GCC compilation options cause the compiler to generate code that\n-does not conform to the platform's default ABI@.  Other options cause\n-different program behavior for implementation-defined features that are\n-not covered by an ABI@.  These options are provided for consistency with\n-other compilers that do not follow the platform's default ABI or the\n-usual behavior of implementation-defined features for the platform.\n-Be very careful about using such options.\n-\n-Most platforms have a well-defined ABI that covers C code, but ABIs\n-that cover C++ functionality are not yet common.\n-\n-Starting with GCC 3.2, GCC binary conventions for C++ are based on a\n-written, vendor-neutral C++ ABI that was designed to be specific to\n-64-bit Itanium but also includes generic specifications that apply to\n-any platform.\n-This C++ ABI is also implemented by other compiler vendors on some\n-platforms, notably GNU/Linux and BSD systems.\n-We have tried hard to provide a stable ABI that will be compatible with\n-future GCC releases, but it is possible that we will encounter problems\n-that make this difficult.  Such problems could include different\n-interpretations of the C++ ABI by different vendors, bugs in the ABI, or\n-bugs in the implementation of the ABI in different compilers.\n-GCC's @option{-Wabi} switch warns when G++ generates code that is\n-probably not compatible with the C++ ABI@.\n-\n-The C++ library used with a C++ compiler includes the Standard C++\n-Library, with functionality defined in the C++ Standard, plus language\n-runtime support.  The runtime support is included in a C++ ABI, but there\n-is no formal ABI for the Standard C++ Library.  Two implementations\n-of that library are interoperable if one follows the de-facto ABI of the\n-other and if they are both built with the same compiler, or with compilers\n-that conform to the same ABI for C++ compiler and runtime support.\n-\n-When G++ and another C++ compiler conform to the same C++ ABI, but the\n-implementations of the Standard C++ Library that they normally use do not\n-follow the same ABI for the Standard C++ Library, object files built with\n-those compilers can be used in the same program only if they use the same\n-C++ library.  This requires specifying the location of the C++ library\n-header files when invoking the compiler whose usual library is not being\n-used.  The location of GCC's C++ header files depends on how the GCC\n-build was configured, but can be seen by using the G++ @option{-v} option.\n-With default configuration options for G++ 3.3 the compile line for a\n-different C++ compiler needs to include\n-\n-@smallexample\n-    -I@var{gcc_install_directory}/include/c++/3.3\n-@end smallexample\n-\n-Similarly, compiling code with G++ that must use a C++ library other\n-than the GNU C++ library requires specifying the location of the header\n-files for that other library.\n-\n-The most straightforward way to link a program to use a particular\n-C++ library is to use a C++ driver that specifies that C++ library by\n-default.  The @command{g++} driver, for example, tells the linker where\n-to find GCC's C++ library (@file{libstdc++}) plus the other libraries\n-and startup files it needs, in the proper order.\n-\n-If a program must use a different C++ library and it's not possible\n-to do the final link using a C++ driver that uses that library by default,\n-it is necessary to tell @command{g++} the location and name of that\n-library.  It might also be necessary to specify different startup files\n-and other runtime support libraries, and to suppress the use of GCC's\n-support libraries with one or more of the options @option{-nostdlib},\n-@option{-nostartfiles}, and @option{-nodefaultlibs}."}, {"sha": "76f69559ec3d00eeeb0068727e1703eee7d59f88", "filename": "gcc/doc/configfiles.texi", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fconfigfiles.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fconfigfiles.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fconfigfiles.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,69 +0,0 @@\n-@c Copyright (C) 1988-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@node Configuration Files\n-@subsubsection Files Created by @code{configure}\n-\n-Here we spell out what files will be set up by @file{configure} in the\n-@file{gcc} directory.  Some other files are created as temporary files\n-in the configuration process, and are not used in the subsequent\n-build; these are not documented.\n-\n-@itemize @bullet\n-@item\n-@file{Makefile} is constructed from @file{Makefile.in}, together with\n-the host and target fragments (@pxref{Fragments, , Makefile\n-Fragments}) @file{t-@var{target}} and @file{x-@var{host}} from\n-@file{config}, if any, and language Makefile fragments\n-@file{@var{language}/Make-lang.in}.\n-@item\n-@file{auto-host.h} contains information about the host machine\n-determined by @file{configure}.  If the host machine is different from\n-the build machine, then @file{auto-build.h} is also created,\n-containing such information about the build machine.\n-@item\n-@file{config.status} is a script that may be run to recreate the\n-current configuration.\n-@item\n-@file{configargs.h} is a header containing details of the arguments\n-passed to @file{configure} to configure GCC, and of the thread model\n-used.\n-@item\n-@file{cstamp-h} is used as a timestamp.\n-@item\n-If a language @file{config-lang.in} file (@pxref{Front End Config, ,\n-The Front End @file{config-lang.in} File}) sets @code{outputs}, then\n-the files listed in @code{outputs} there are also generated.\n-@end itemize\n-\n-The following configuration headers are created from the Makefile,\n-using @file{mkconfig.sh}, rather than directly by @file{configure}.\n-@file{config.h}, @file{bconfig.h} and @file{tconfig.h} all contain the\n-@file{xm-@var{machine}.h} header, if any, appropriate to the host,\n-build and target machines respectively, the configuration headers for\n-the target, and some definitions; for the host and build machines,\n-these include the autoconfigured headers generated by\n-@file{configure}.  The other configuration headers are determined by\n-@file{config.gcc}.  They also contain the typedefs for @code{rtx},\n-@code{rtvec} and @code{tree}.\n-\n-@itemize @bullet\n-@item\n-@file{config.h}, for use in programs that run on the host machine.\n-@item\n-@file{bconfig.h}, for use in programs that run on the build machine.\n-@item\n-@file{tconfig.h}, for use in programs and libraries for the target\n-machine.\n-@item\n-@file{tm_p.h}, which includes the header @file{@var{machine}-protos.h}\n-that contains prototypes for functions in the target\n-@file{@var{machine}.c} file.  The\n-@file{@var{machine}-protos.h} header is included after the @file{rtl.h}\n-and/or @file{tree.h} would have been included.\n-The @file{tm_p.h} also\n-includes the header @file{tm-preds.h} which is generated by\n-@file{genpreds} program during the build to define the declarations\n-and inline functions for the predicate functions.\n-@end itemize"}, {"sha": "b53655b431643f3d52fd9629494e1b76c411d71f", "filename": "gcc/doc/configterms.texi", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fconfigterms.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fconfigterms.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fconfigterms.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,61 +0,0 @@\n-@c Copyright (C) 2001-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@node Configure Terms\n-@section Configure Terms and History\n-@cindex configure terms\n-@cindex canadian\n-\n-The configure and build process has a long and colorful history, and can\n-be confusing to anyone who doesn't know why things are the way they are.\n-While there are other documents which describe the configuration process\n-in detail, here are a few things that everyone working on GCC should\n-know.\n-\n-There are three system names that the build knows about: the machine you\n-are building on (@dfn{build}), the machine that you are building for\n-(@dfn{host}), and the machine that GCC will produce code for\n-(@dfn{target}).  When you configure GCC, you specify these with\n-@option{--build=}, @option{--host=}, and @option{--target=}.\n-\n-Specifying the host without specifying the build should be avoided, as\n-@command{configure} may (and once did) assume that the host you specify\n-is also the build, which may not be true.\n-\n-If build, host, and target are all the same, this is called a\n-@dfn{native}.  If build and host are the same but target is different,\n-this is called a @dfn{cross}.  If build, host, and target are all\n-different this is called a @dfn{canadian} (for obscure reasons dealing\n-with Canada's political party and the background of the person working\n-on the build at that time).  If host and target are the same, but build\n-is different, you are using a cross-compiler to build a native for a\n-different system.  Some people call this a @dfn{host-x-host},\n-@dfn{crossed native}, or @dfn{cross-built native}.  If build and target\n-are the same, but host is different, you are using a cross compiler to\n-build a cross compiler that produces code for the machine you're\n-building on.  This is rare, so there is no common way of describing it.\n-There is a proposal to call this a @dfn{crossback}.\n-\n-If build and host are the same, the GCC you are building will also be\n-used to build the target libraries (like @code{libstdc++}).  If build and host\n-are different, you must have already built and installed a cross\n-compiler that will be used to build the target libraries (if you\n-configured with @option{--target=foo-bar}, this compiler will be called\n-@command{foo-bar-gcc}).\n-\n-In the case of target libraries, the machine you're building for is the\n-machine you specified with @option{--target}.  So, build is the machine\n-you're building on (no change there), host is the machine you're\n-building for (the target libraries are built for the target, so host is\n-the target you specified), and target doesn't apply (because you're not\n-building a compiler, you're building libraries).  The configure/make\n-process will adjust these variables as needed.  It also sets\n-@code{$with_cross_host} to the original @option{--host} value in case you\n-need it.\n-\n-The @code{libiberty} support library is built up to three times: once\n-for the host, once for the target (even if they are the same), and once\n-for the build if build and host are different.  This allows it to be\n-used by all programs which are generated in the course of the build\n-process."}, {"sha": "e14cf5e47513934de7d42ba50c1f6c1ba52bcdc3", "filename": "gcc/doc/contrib.texi", "status": "removed", "additions": 0, "deletions": 1776, "changes": 1776, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fcontrib.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fcontrib.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcontrib.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,1776 +0,0 @@\n-@c Copyright (C) 1988-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@node Contributors\n-@unnumbered Contributors to GCC\n-@cindex contributors\n-\n-The GCC project would like to thank its many contributors.  Without them the\n-project would not have been nearly as successful as it has been.  Any omissions\n-in this list are accidental.  Feel free to contact\n-@email{law@@redhat.com} or @email{gerald@@pfeifer.com} if you have been left\n-out or some of your contributions are not listed.  Please keep this list in\n-alphabetical order.\n-\n-@itemize @bullet\n-\n-@item\n-Analog Devices helped implement the support for complex data types\n-and iterators.\n-\n-@item\n-John David Anglin for threading-related fixes and improvements to\n-libstdc++-v3, and the HP-UX port.\n-\n-@item\n-James van Artsdalen wrote the code that makes efficient use of\n-the Intel 80387 register stack.\n-\n-@item\n-Abramo and Roberto Bagnara for the SysV68 Motorola 3300 Delta Series\n-port.\n-\n-@item\n-Alasdair Baird for various bug fixes.\n-\n-@item\n-Giovanni Bajo for analyzing lots of complicated C++ problem reports.\n-\n-@item\n-Peter Barada for his work to improve code generation for new\n-ColdFire cores.\n-\n-@item\n-Gerald Baumgartner added the signature extension to the C++ front end.\n-\n-@item\n-Godmar Back for his Java improvements and encouragement.\n-\n-@item\n-Scott Bambrough for help porting the Java compiler.\n-\n-@item\n-Wolfgang Bangerth for processing tons of bug reports.\n-\n-@item\n-Jon Beniston for his Microsoft Windows port of Java and port to Lattice Mico32.\n-\n-@item\n-Daniel Berlin for better DWARF 2 support, faster/better optimizations,\n-improved alias analysis, plus migrating GCC to Bugzilla.\n-\n-@item\n-Geoff Berry for his Java object serialization work and various patches.\n-\n-@item\n-David Binderman tests weekly snapshots of GCC trunk against Fedora Rawhide\n-for several architectures.\n-\n-@item\n-Laurynas Biveinis for memory management work and DJGPP port fixes.\n-\n-@item\n-Uros Bizjak for the implementation of x87 math built-in functions and\n-for various middle end and i386 back end improvements and bug fixes.\n-\n-@item\n-Eric Blake for helping to make GCJ and libgcj conform to the\n-specifications.\n-\n-@item\n-Janne Blomqvist for contributions to GNU Fortran.\n-\n-@item\n-Hans-J. Boehm for his garbage collector, IA-64 libffi port, and other\n-Java work.\n-\n-@item\n-Segher Boessenkool for helping maintain the PowerPC port and the\n-instruction combiner plus various contributions to the middle end.\n-\n-@item\n-Neil Booth for work on cpplib, lang hooks, debug hooks and other\n-miscellaneous clean-ups.\n-\n-@item\n-Steven Bosscher for integrating the GNU Fortran front end into GCC and for\n-contributing to the tree-ssa branch.\n-\n-@item\n-Eric Botcazou for fixing middle- and backend bugs left and right.\n-\n-@item\n-Per Bothner for his direction via the steering committee and various\n-improvements to the infrastructure for supporting new languages.  Chill\n-front end implementation.  Initial implementations of\n-cpplib, fix-header, config.guess, libio, and past C++ library (libg++)\n-maintainer.  Dreaming up, designing and implementing much of GCJ@.\n-\n-@item\n-Devon Bowen helped port GCC to the Tahoe.\n-\n-@item\n-Don Bowman for mips-vxworks contributions.\n-\n-@item\n-James Bowman for the FT32 port.\n-\n-@item\n-Dave Brolley for work on cpplib and Chill.\n-\n-@item\n-Paul Brook for work on the ARM architecture and maintaining GNU Fortran.\n-\n-@item\n-Robert Brown implemented the support for Encore 32000 systems.\n-\n-@item\n-Christian Bruel for improvements to local store elimination.\n-\n-@item\n-Herman A.J. ten Brugge for various fixes.\n-\n-@item\n-Joerg Brunsmann for Java compiler hacking and help with the GCJ FAQ@.\n-\n-@item\n-Joe Buck for his direction via the steering committee from its creation\n-to 2013.\n-\n-@item\n-Iain Buclaw for the D frontend.\n-\n-@item\n-Craig Burley for leadership of the G77 Fortran effort.\n-\n-@item\n-Tobias Burnus for contributions to GNU Fortran.\n-\n-@item\n-Stephan Buys for contributing Doxygen notes for libstdc++.\n-\n-@item\n-Paolo Carlini for libstdc++ work: lots of efficiency improvements to\n-the C++ strings, streambufs and formatted I/O, hard detective work on\n-the frustrating localization issues, and keeping up with the problem reports.\n-\n-@item\n-John Carr for his alias work, SPARC hacking, infrastructure improvements,\n-previous contributions to the steering committee, loop optimizations, etc.\n-\n-@item\n-Stephane Carrez for 68HC11 and 68HC12 ports.\n-\n-@item\n-Steve Chamberlain for support for the Renesas SH and H8 processors\n-and the PicoJava processor, and for GCJ config fixes.\n-\n-@item\n-Glenn Chambers for help with the GCJ FAQ@.\n-\n-@item\n-John-Marc Chandonia for various libgcj patches.\n-\n-@item\n-Denis Chertykov for contributing and maintaining the AVR port, the first GCC port\n-for an 8-bit architecture.\n-\n-@item\n-Kito Cheng for his work on the RISC-V port, including bringing up the test\n-suite and maintenance.\n-\n-@item\n-Scott Christley for his Objective-C contributions.\n-\n-@item\n-Eric Christopher for his Java porting help and clean-ups.\n-\n-@item\n-Branko Cibej for more warning contributions.\n-\n-@item\n-The @uref{https://www.gnu.org/software/classpath/,,GNU Classpath project}\n-for all of their merged runtime code.\n-\n-@item\n-Nick Clifton for arm, mcore, fr30, v850, m32r, msp430 rx work,\n-@option{--help}, and other random hacking.\n-\n-@item\n-Michael Cook for libstdc++ cleanup patches to reduce warnings.\n-\n-@item\n-R. Kelley Cook for making GCC buildable from a read-only directory as\n-well as other miscellaneous build process and documentation clean-ups.\n-\n-@item\n-Ralf Corsepius for SH testing and minor bug fixing.\n-\n-@item\n-Fran@,{c}ois-Xavier Coudert for contributions to GNU Fortran.\n-\n-@item\n-Stan Cox for care and feeding of the x86 port and lots of behind\n-the scenes hacking.\n-\n-@item\n-Alex Crain provided changes for the 3b1.\n-\n-@item\n-Ian Dall for major improvements to the NS32k port.\n-\n-@item\n-Paul Dale for his work to add uClinux platform support to the\n-m68k backend.\n-\n-@item\n-Palmer Dabbelt for his work maintaining the RISC-V port.\n-\n-@item\n-Dario Dariol contributed the four varieties of sample programs\n-that print a copy of their source.\n-\n-@item\n-Russell Davidson for fstream and stringstream fixes in libstdc++.\n-\n-@item\n-Bud Davis for work on the G77 and GNU Fortran compilers.\n-\n-@item\n-Mo DeJong for GCJ and libgcj bug fixes.\n-\n-@item\n-Jerry DeLisle for contributions to GNU Fortran.\n-\n-@item\n-DJ Delorie for the DJGPP port, build and libiberty maintenance,\n-various bug fixes, and the M32C, MeP, MSP430, and RL78 ports.\n-\n-@item\n-Arnaud Desitter for helping to debug GNU Fortran.\n-\n-@item\n-Gabriel Dos Reis for contributions to G++, contributions and\n-maintenance of GCC diagnostics infrastructure, libstdc++-v3,\n-including @code{valarray<>}, @code{complex<>}, maintaining the numerics library\n-(including that pesky @code{<limits>} :-) and keeping up-to-date anything\n-to do with numbers.\n-\n-@item\n-Ulrich Drepper for his work on glibc, testing of GCC using glibc, ISO C99\n-support, CFG dumping support, etc., plus support of the C++ runtime\n-libraries including for all kinds of C interface issues, contributing and\n-maintaining @code{complex<>}, sanity checking and disbursement, configuration\n-architecture, libio maintenance, and early math work.\n-\n-@item\n-Fran@,{c}ois Dumont for his work on libstdc++-v3, especially maintaining and\n-improving @code{debug-mode} and associative and unordered containers.\n-\n-@item\n-Zdenek Dvorak for a new loop unroller and various fixes.\n-\n-@item\n-Michael Eager for his work on the Xilinx MicroBlaze port.\n-\n-@item\n-Richard Earnshaw for his ongoing work with the ARM@.\n-\n-@item\n-David Edelsohn for his direction via the steering committee, ongoing work\n-with the RS6000/PowerPC port, help cleaning up Haifa loop changes,\n-doing the entire AIX port of libstdc++ with his bare hands, and for\n-ensuring GCC properly keeps working on AIX@.\n-\n-@item\n-Kevin Ediger for the floating point formatting of num_put::do_put in\n-libstdc++.\n-\n-@item\n-Phil Edwards for libstdc++ work including configuration hackery,\n-documentation maintainer, chief breaker of the web pages, the occasional\n-iostream bug fix, and work on shared library symbol versioning.\n-\n-@item\n-Paul Eggert for random hacking all over GCC@.\n-\n-@item\n-Mark Elbrecht for various DJGPP improvements, and for libstdc++\n-configuration support for locales and fstream-related fixes.\n-\n-@item\n-Vadim Egorov for libstdc++ fixes in strings, streambufs, and iostreams.\n-\n-@item\n-Christian Ehrhardt for dealing with bug reports.\n-\n-@item\n-Ben Elliston for his work to move the Objective-C runtime into its\n-own subdirectory and for his work on autoconf.\n-\n-@item\n-Revital Eres for work on the PowerPC 750CL port.\n-\n-@item\n-Marc Espie for OpenBSD support.\n-\n-@item\n-Doug Evans for much of the global optimization framework, arc, m32r,\n-and SPARC work.\n-\n-@item\n-Christopher Faylor for his work on the Cygwin port and for caring and\n-feeding the gcc.gnu.org box and saving its users tons of spam.\n-\n-@item\n-Fred Fish for BeOS support and Ada fixes.\n-\n-@item\n-Ivan Fontes Garcia for the Portuguese translation of the GCJ FAQ@.\n-\n-@item\n-Peter Gerwinski for various bug fixes and the Pascal front end.\n-\n-@item\n-Kaveh R.@: Ghazi for his direction via the steering committee, amazing\n-work to make @samp{-W -Wall -W* -Werror} useful, and \n-testing GCC on a plethora of platforms.  Kaveh extends his gratitude to\n-the CAIP Center at Rutgers University for providing him with computing\n-resources to work on Free Software from the late 1980s to 2010.\n-\n-@item\n-John Gilmore for a donation to the FSF earmarked improving GNU Java.\n-\n-@item\n-Judy Goldberg for c++ contributions.\n-\n-@item\n-Torbjorn Granlund for various fixes and the c-torture testsuite,\n-multiply- and divide-by-constant optimization, improved long long\n-support, improved leaf function register allocation, and his direction\n-via the steering committee.\n-\n-@item\n-Jonny Grant for improvements to @code{collect2's} @option{--help} documentation.\n-\n-@item\n-Anthony Green for his @option{-Os} contributions, the moxie port, and\n-Java front end work.\n-\n-@item\n-Stu Grossman for gdb hacking, allowing GCJ developers to debug Java code.\n-\n-@item\n-Michael K. Gschwind contributed the port to the PDP-11.\n-\n-@item\n-Richard Biener for his ongoing middle-end contributions and bug fixes\n-and for release management.\n-\n-@item\n-Ron Guilmette implemented the @command{protoize} and @command{unprotoize}\n-tools, the support for DWARF 1 symbolic debugging information, and much of\n-the support for System V Release 4.  He has also worked heavily on the\n-Intel 386 and 860 support.\n-\n-@item\n-Sumanth Gundapaneni for contributing the CR16 port.\n-\n-@item\n-Mostafa Hagog for Swing Modulo Scheduling (SMS) and post reload GCSE@.\n-\n-@item\n-Bruno Haible for improvements in the runtime overhead for EH, new\n-warnings and assorted bug fixes.\n-\n-@item\n-Andrew Haley for his amazing Java compiler and library efforts.\n-\n-@item\n-Chris Hanson assisted in making GCC work on HP-UX for the 9000 series 300.\n-\n-@item\n-Michael Hayes for various thankless work he's done trying to get\n-the c30/c40 ports functional.  Lots of loop and unroll improvements and\n-fixes.\n-\n-@item\n-Dara Hazeghi for wading through myriads of target-specific bug reports.\n-\n-@item\n-Kate Hedstrom for staking the G77 folks with an initial testsuite.\n-\n-@item\n-Richard Henderson for his ongoing SPARC, alpha, ia32, and ia64 work, loop\n-opts, and generally fixing lots of old problems we've ignored for\n-years, flow rewrite and lots of further stuff, including reviewing\n-tons of patches.\n-\n-@item\n-Aldy Hernandez for working on the PowerPC port, SIMD support, and\n-various fixes.\n-\n-@item\n-Nobuyuki Hikichi of Software Research Associates, Tokyo, contributed\n-the support for the Sony NEWS machine.\n-\n-@item\n-Kazu Hirata for caring and feeding the Renesas H8/300 port and various fixes.\n-\n-@item\n-Katherine Holcomb for work on GNU Fortran.\n-\n-@item\n-Manfred Hollstein for his ongoing work to keep the m88k alive, lots\n-of testing and bug fixing, particularly of GCC configury code.\n-\n-@item\n-Steve Holmgren for MachTen patches.\n-\n-@item\n-Mat Hostetter for work on the TILE-Gx and TILEPro ports.\n-\n-@item\n-Jan Hubicka for his x86 port improvements.\n-\n-@item\n-Falk Hueffner for working on C and optimization bug reports.\n-\n-@item\n-Bernardo Innocenti for his m68k work, including merging of\n-ColdFire improvements and uClinux support.\n-\n-@item\n-Christian Iseli for various bug fixes.\n-\n-@item\n-Kamil Iskra for general m68k hacking.\n-\n-@item\n-Lee Iverson for random fixes and MIPS testing.\n-\n-@item\n-Balaji V. Iyer for Cilk+ development and merging.\n-\n-@item\n-Andreas Jaeger for testing and benchmarking of GCC and various bug fixes.\n-\n-@item\n-Martin Jambor for his work on inter-procedural optimizations, the\n-switch conversion pass, and scalar replacement of aggregates.\n-\n-@item\n-Jakub Jelinek for his SPARC work and sibling call optimizations as well\n-as lots of bug fixes and test cases, and for improving the Java build\n-system.\n-\n-@item\n-Janis Johnson for ia64 testing and fixes, her quality improvement\n-sidetracks, and web page maintenance.\n-\n-@item\n-Kean Johnston for SCO OpenServer support and various fixes.\n-\n-@item\n-Tim Josling for the sample language treelang based originally on Richard\n-Kenner's ``toy'' language.\n-\n-@item\n-Nicolai Josuttis for additional libstdc++ documentation.\n-\n-@item\n-Klaus Kaempf for his ongoing work to make alpha-vms a viable target.\n-\n-@item\n-Steven G. Kargl for work on GNU Fortran.\n-\n-@item\n-David Kashtan of SRI adapted GCC to VMS@.\n-\n-@item\n-Ryszard Kabatek for many, many libstdc++ bug fixes and optimizations of\n-strings, especially member functions, and for auto_ptr fixes.\n-\n-@item\n-Geoffrey Keating for his ongoing work to make the PPC work for GNU/Linux\n-and his automatic regression tester.\n-\n-@item\n-Brendan Kehoe for his ongoing work with G++ and for a lot of early work\n-in just about every part of libstdc++.\n-\n-@item\n-Oliver M. Kellogg of Deutsche Aerospace contributed the port to the\n-MIL-STD-1750A@.\n-\n-@item\n-Richard Kenner of the New York University Ultracomputer Research\n-Laboratory wrote the machine descriptions for the AMD 29000, the DEC\n-Alpha, the IBM RT PC, and the IBM RS/6000 as well as the support for\n-instruction attributes.  He also made changes to better support RISC\n-processors including changes to common subexpression elimination,\n-strength reduction, function calling sequence handling, and condition\n-code support, in addition to generalizing the code for frame pointer\n-elimination and delay slot scheduling.  Richard Kenner was also the\n-head maintainer of GCC for several years.\n-\n-@item\n-Mumit Khan for various contributions to the Cygwin and Mingw32 ports and\n-maintaining binary releases for Microsoft Windows hosts, and for massive libstdc++\n-porting work to Cygwin/Mingw32.\n-\n-@item\n-Robin Kirkham for cpu32 support.\n-\n-@item\n-Mark Klein for PA improvements.\n-\n-@item\n-Thomas Koenig for various bug fixes.\n-\n-@item\n-Bruce Korb for the new and improved fixincludes code.\n-\n-@item\n-Benjamin Kosnik for his G++ work and for leading the libstdc++-v3 effort.\n-\n-@item\n-Maxim Kuvyrkov for contributions to the instruction scheduler, the Android \n-and m68k/Coldfire ports, and optimizations.\n-\n-@item\n-Charles LaBrec contributed the support for the Integrated Solutions\n-68020 system.\n-\n-@item\n-Asher Langton and Mike Kumbera for contributing Cray pointer support\n-to GNU Fortran, and for other GNU Fortran improvements.\n-\n-@item\n-Jeff Law for his direction via the steering committee, coordinating the\n-entire egcs project and GCC 2.95, rolling out snapshots and releases,\n-handling merges from GCC2, reviewing tons of patches that might have\n-fallen through the cracks else, and random but extensive hacking.\n-\n-@item\n-Walter Lee for work on the TILE-Gx and TILEPro ports.\n-\n-@item\n-Marc Lehmann for his direction via the steering committee and helping\n-with analysis and improvements of x86 performance.\n-\n-@item\n-Victor Leikehman for work on GNU Fortran.\n-\n-@item\n-Ted Lemon wrote parts of the RTL reader and printer.\n-\n-@item\n-Kriang Lerdsuwanakij for C++ improvements including template as template\n-parameter support, and many C++ fixes.\n-\n-@item\n-Warren Levy for tremendous work on libgcj (Java Runtime Library) and\n-random work on the Java front end.\n-\n-@item\n-Alain Lichnewsky ported GCC to the MIPS CPU@.\n-\n-@item\n-Oskar Liljeblad for hacking on AWT and his many Java bug reports and\n-patches.\n-\n-@item\n-Robert Lipe for OpenServer support, new testsuites, testing, etc.\n-\n-@item\n-Chen Liqin for various S+core related fixes/improvement, and for\n-maintaining the S+core port.\n-\n-@item\n-Martin Liska for his work on identical code folding, the sanitizers,\n-HSA, general bug fixing and for running automated regression testing of GCC\n-and reporting numerous bugs.\n-\n-@item\n-Weiwen Liu for testing and various bug fixes.\n-\n-@item\n-Manuel L@'opez-Ib@'a@~nez for improving @option{-Wconversion} and\n-many other diagnostics fixes and improvements.\n-\n-@item\n-Dave Love for his ongoing work with the Fortran front end and\n-runtime libraries.\n-\n-@item\n-Martin von L@\"owis for internal consistency checking infrastructure,\n-various C++ improvements including namespace support, and tons of\n-assistance with libstdc++/compiler merges.\n-\n-@item\n-H.J. Lu for his previous contributions to the steering committee, many x86\n-bug reports, prototype patches, and keeping the GNU/Linux ports working.\n-\n-@item\n-Greg McGary for random fixes and (someday) bounded pointers.\n-\n-@item\n-Andrew MacLeod for his ongoing work in building a real EH system,\n-various code generation improvements, work on the global optimizer, etc.\n-\n-@item\n-Vladimir Makarov for hacking some ugly i960 problems, PowerPC hacking\n-improvements to compile-time performance, overall knowledge and\n-direction in the area of instruction scheduling, design and\n-implementation of the automaton based instruction scheduler and\n-design and implementation of the integrated and local register allocators.\n-\n-@item\n-David Malcolm for his work on improving GCC diagnostics, JIT, self-tests\n-and unit testing.\n-\n-@item\n-Bob Manson for his behind the scenes work on dejagnu.\n-\n-@item\n-John Marino for contributing the DragonFly BSD port.\n-\n-@item\n-Philip Martin for lots of libstdc++ string and vector iterator fixes and\n-improvements, and string clean up and testsuites.\n-\n-@item\n-Michael Matz for his work on dominance tree discovery, the x86-64 port,\n-link-time optimization framework and general optimization improvements.\n-\n-@item\n-All of the Mauve project contributors for Java test code.\n-\n-@item\n-Bryce McKinlay for numerous GCJ and libgcj fixes and improvements.\n-\n-@item\n-Adam Megacz for his work on the Microsoft Windows port of GCJ@.\n-\n-@item\n-Michael Meissner for LRS framework, ia32, m32r, v850, m88k, MIPS,\n-powerpc, haifa, ECOFF debug support, and other assorted hacking.\n-\n-@item\n-Jason Merrill for his direction via the steering committee and leading\n-the G++ effort.\n-\n-@item\n-Martin Michlmayr for testing GCC on several architectures using the\n-entire Debian archive.\n-\n-@item\n-David Miller for his direction via the steering committee, lots of\n-SPARC work, improvements in jump.cc and interfacing with the Linux kernel\n-developers.\n-\n-@item\n-Gary Miller ported GCC to Charles River Data Systems machines.\n-\n-@item\n-Alfred Minarik for libstdc++ string and ios bug fixes, and turning the\n-entire libstdc++ testsuite namespace-compatible.\n-\n-@item\n-Mark Mitchell for his direction via the steering committee, mountains of\n-C++ work, load/store hoisting out of loops, alias analysis improvements,\n-ISO C @code{restrict} support, and serving as release manager from 2000\n-to 2011.\n-\n-@item\n-Alan Modra for various GNU/Linux bits and testing.\n-\n-@item\n-Toon Moene for his direction via the steering committee, Fortran\n-maintenance, and his ongoing work to make us make Fortran run fast.\n-\n-@item\n-Jason Molenda for major help in the care and feeding of all the services\n-on the gcc.gnu.org (formerly egcs.cygnus.com) machine---mail, web\n-services, ftp services, etc etc.  Doing all this work on scrap paper and\n-the backs of envelopes would have been@dots{} difficult.\n-\n-@item\n-Catherine Moore for fixing various ugly problems we have sent her\n-way, including the haifa bug which was killing the Alpha & PowerPC\n-Linux kernels.\n-\n-@item\n-Mike Moreton for his various Java patches.\n-\n-@item\n-David Mosberger-Tang for various Alpha improvements, and for the initial\n-IA-64 port.\n-\n-@item\n-Stephen Moshier contributed the floating point emulator that assists in\n-cross-compilation and permits support for floating point numbers wider\n-than 64 bits and for ISO C99 support.\n-\n-@item\n-Bill Moyer for his behind the scenes work on various issues.\n-\n-@item\n-Philippe De Muyter for his work on the m68k port.\n-\n-@item\n-Joseph S. Myers for his work on the PDP-11 port, format checking and ISO\n-C99 support, and continuous emphasis on (and contributions to) documentation.\n-\n-@item\n-Nathan Myers for his work on libstdc++-v3: architecture and authorship\n-through the first three snapshots, including implementation of locale\n-infrastructure, string, shadow C headers, and the initial project\n-documentation (DESIGN, CHECKLIST, and so forth).  Later, more work on\n-MT-safe string and shadow headers.\n-\n-@item\n-Felix Natter for documentation on porting libstdc++.\n-\n-@item\n-Nathanael Nerode for cleaning up the configuration/build process.\n-\n-@item\n-NeXT, Inc.@: donated the front end that supports the Objective-C\n-language.\n-\n-@item\n-Hans-Peter Nilsson for the CRIS and MMIX ports, improvements to the search\n-engine setup, various documentation fixes and other small fixes.\n-\n-@item\n-Geoff Noer for his work on getting cygwin native builds working.\n-\n-@item\n-Vegard Nossum for running automated regression testing of GCC and reporting\n-numerous bugs.\n-\n-@item\n-Diego Novillo for his work on Tree SSA, OpenMP, SPEC performance\n-tracking web pages, GIMPLE tuples, and assorted fixes.\n-\n-@item\n-David O'Brien for the FreeBSD/alpha, FreeBSD/AMD x86-64, FreeBSD/ARM,\n-FreeBSD/PowerPC, and FreeBSD/SPARC64 ports and related infrastructure\n-improvements.\n-\n-@item\n-Alexandre Oliva for various build infrastructure improvements, scripts and\n-amazing testing work, including keeping libtool issues sane and happy.\n-\n-@item\n-Stefan Olsson for work on mt_alloc.\n-\n-@item\n-Melissa O'Neill for various NeXT fixes.\n-\n-@item\n-Rainer Orth for random MIPS work, including improvements to GCC's o32\n-ABI support, improvements to dejagnu's MIPS support, Java configuration\n-clean-ups and porting work, and maintaining the IRIX, Solaris 2, and\n-Tru64 UNIX ports.\n-\n-@item\n-Steven Pemberton for his contribution of @file{enquire} which allowed GCC to\n-determine various properties of the floating point unit and generate\n-@file{float.h} in older versions of GCC.\n-\n-@item\n-Hartmut Penner for work on the s390 port.\n-\n-@item\n-Paul Petersen wrote the machine description for the Alliant FX/8.\n-\n-@item\n-Alexandre Petit-Bianco for implementing much of the Java compiler and\n-continued Java maintainership.\n-\n-@item\n-Matthias Pfaller for major improvements to the NS32k port.\n-\n-@item\n-Gerald Pfeifer for his direction via the steering committee, pointing\n-out lots of problems we need to solve, maintenance of the web pages, and\n-taking care of documentation maintenance in general.\n-\n-@item\n-Marek Polacek for his work on the C front end, the sanitizers and general\n-bug fixing.\n-\n-@item\n-Andrew Pinski for processing bug reports by the dozen.\n-\n-@item\n-Ovidiu Predescu for his work on the Objective-C front end and runtime\n-libraries.\n-\n-@item\n-Jerry Quinn for major performance improvements in C++ formatted I/O@.\n-\n-@item\n-Ken Raeburn for various improvements to checker, MIPS ports and various\n-cleanups in the compiler.\n-\n-@item\n-Rolf W. Rasmussen for hacking on AWT@.\n-\n-@item\n-David Reese of Sun Microsystems contributed to the Solaris on PowerPC\n-port.\n-\n-@item\n-John Regehr for running automated regression testing of GCC and reporting\n-numerous bugs.\n-\n-@item\n-Volker Reichelt for running automated regression testing of GCC and reporting\n-numerous bugs and for keeping up with the problem reports.\n-\n-@item\n-Joern Rennecke for maintaining the sh port, loop, regmove & reload\n-hacking and developing and maintaining the Epiphany port.\n-\n-@item\n-Loren J. Rittle for improvements to libstdc++-v3 including the FreeBSD\n-port, threading fixes, thread-related configury changes, critical\n-threading documentation, and solutions to really tricky I/O problems,\n-as well as keeping GCC properly working on FreeBSD and continuous testing.\n-\n-@item\n-Craig Rodrigues for processing tons of bug reports.\n-\n-@item\n-Ola R@\"onnerup for work on mt_alloc.\n-\n-@item\n-Gavin Romig-Koch for lots of behind the scenes MIPS work.\n-\n-@item\n-David Ronis inspired and encouraged Craig to rewrite the G77\n-documentation in texinfo format by contributing a first pass at a\n-translation of the old @file{g77-0.5.16/f/DOC} file.\n-\n-@item\n-Ken Rose for fixes to GCC's delay slot filling code.\n-\n-@item\n-Ira Rosen for her contributions to the auto-vectorizer.\n-\n-@item\n-Paul Rubin wrote most of the preprocessor.\n-\n-@item\n-P@'etur Run@'olfsson for major performance improvements in C++ formatted I/O and\n-large file support in C++ filebuf.\n-\n-@item\n-Chip Salzenberg for libstdc++ patches and improvements to locales, traits,\n-Makefiles, libio, libtool hackery, and ``long long'' support.\n-\n-@item\n-Juha Sarlin for improvements to the H8 code generator.\n-\n-@item\n-Greg Satz assisted in making GCC work on HP-UX for the 9000 series 300.\n-\n-@item\n-Roger Sayle for improvements to constant folding and GCC's RTL optimizers\n-as well as for fixing numerous bugs.\n-\n-@item\n-Bradley Schatz for his work on the GCJ FAQ@.\n-\n-@item\n-Peter Schauer wrote the code to allow debugging to work on the Alpha.\n-\n-@item\n-William Schelter did most of the work on the Intel 80386 support.\n-\n-@item\n-Tobias Schl@\"uter for work on GNU Fortran.\n-\n-@item\n-Bernd Schmidt for various code generation improvements and major\n-work in the reload pass, serving as release manager for\n-GCC 2.95.3, and work on the Blackfin and C6X ports.\n-\n-@item\n-Peter Schmid for constant testing of libstdc++---especially application\n-testing, going above and beyond what was requested for the release\n-criteria---and libstdc++ header file tweaks.\n-\n-@item\n-Jason Schroeder for jcf-dump patches.\n-\n-@item\n-Andreas Schwab for his work on the m68k port.\n-\n-@item\n-Lars Segerlund for work on GNU Fortran.\n-\n-@item\n-Dodji Seketeli for numerous C++ bug fixes and debug info improvements.\n-\n-@item\n-Tim Shen for major work on @code{<regex>}.\n-\n-@item\n-Joel Sherrill for his direction via the steering committee, RTEMS\n-contributions and RTEMS testing.\n-\n-@item\n-Nathan Sidwell for many C++ fixes/improvements.\n-\n-@item\n-Jeffrey Siegal for helping RMS with the original design of GCC, some\n-code which handles the parse tree and RTL data structures, constant\n-folding and help with the original VAX & m68k ports.\n-\n-@item\n-Kenny Simpson for prompting libstdc++ fixes due to defect reports from\n-the LWG (thereby keeping GCC in line with updates from the ISO)@.\n-\n-@item\n-Franz Sirl for his ongoing work with making the PPC port stable\n-for GNU/Linux.\n-\n-@item\n-Andrey Slepuhin for assorted AIX hacking.\n-\n-@item\n-Trevor Smigiel for contributing the SPU port.\n-\n-@item\n-Christopher Smith did the port for Convex machines.\n-\n-@item\n-Danny Smith for his major efforts on the Mingw (and Cygwin) ports.\n-Retired from GCC maintainership August 2010, having mentored two \n-new maintainers into the role.\n-\n-@item\n-Randy Smith finished the Sun FPA support.\n-\n-@item\n-Ed Smith-Rowland for his continuous work on libstdc++-v3, special functions,\n-@code{<random>}, and various improvements to C++11 features.\n-\n-@item\n-Scott Snyder for queue, iterator, istream, and string fixes and libstdc++\n-testsuite entries.  Also for providing the patch to G77 to add\n-rudimentary support for @code{INTEGER*1}, @code{INTEGER*2}, and\n-@code{LOGICAL*1}.\n-\n-@item\n-Zdenek Sojka for running automated regression testing of GCC and reporting\n-numerous bugs.\n-\n-@item\n-Arseny Solokha for running automated regression testing of GCC and reporting\n-numerous bugs.\n-\n-@item\n-Jayant Sonar for contributing the CR16 port.\n-\n-@item\n-Brad Spencer for contributions to the GLIBCPP_FORCE_NEW technique.\n-\n-@item\n-Richard Stallman, for writing the original GCC and launching the GNU project.\n-\n-@item\n-Jan Stein of the Chalmers Computer Society provided support for\n-Genix, as well as part of the 32000 machine description.\n-\n-@item\n-Gerhard Steinmetz for running automated regression testing of GCC and reporting\n-numerous bugs.\n-\n-@item\n-Nigel Stephens for various mips16 related fixes/improvements.\n-\n-@item\n-Jonathan Stone wrote the machine description for the Pyramid computer.\n-\n-@item\n-Graham Stott for various infrastructure improvements.\n-\n-@item\n-John Stracke for his Java HTTP protocol fixes.\n-\n-@item\n-Mike Stump for his Elxsi port, G++ contributions over the years and more\n-recently his vxworks contributions\n-\n-@item\n-Jeff Sturm for Java porting help, bug fixes, and encouragement.\n-\n-@item\n-Zhendong Su for running automated regression testing of GCC and reporting\n-numerous bugs.\n-\n-@item\n-Chengnian Sun for running automated regression testing of GCC and reporting\n-numerous bugs.\n-\n-@item\n-Shigeya Suzuki for this fixes for the bsdi platforms.\n-\n-@item\n-Ian Lance Taylor for the Go frontend, the initial mips16 and mips64\n-support, general configury hacking, fixincludes, etc.\n-\n-@item\n-Holger Teutsch provided the support for the Clipper CPU@.\n-\n-@item\n-Gary Thomas for his ongoing work to make the PPC work for GNU/Linux.\n-\n-@item\n-Paul Thomas for contributions to GNU Fortran.\n-\n-@item\n-Philipp Thomas for random bug fixes throughout the compiler\n-\n-@item\n-Jason Thorpe for thread support in libstdc++ on NetBSD@.\n-\n-@item\n-Kresten Krab Thorup wrote the run time support for the Objective-C\n-language and the fantastic Java bytecode interpreter.\n-\n-@item\n-Michael Tiemann for random bug fixes, the first instruction scheduler,\n-initial C++ support, function integration, NS32k, SPARC and M88k\n-machine description work, delay slot scheduling.\n-\n-@item\n-Andreas Tobler for his work porting libgcj to Darwin.\n-\n-@item\n-Teemu Torma for thread safe exception handling support.\n-\n-@item\n-Leonard Tower wrote parts of the parser, RTL generator, and RTL\n-definitions, and of the VAX machine description.\n-\n-@item\n-Daniel Towner and Hariharan Sandanagobalane contributed and\n-maintain the picoChip port.\n-\n-@item\n-Tom Tromey for internationalization support and for his many Java\n-contributions and libgcj maintainership.\n-\n-@item\n-Lassi Tuura for improvements to config.guess to determine HP processor\n-types.\n-\n-@item\n-Petter Urkedal for libstdc++ CXXFLAGS, math, and algorithms fixes.\n-\n-@item\n-Andy Vaught for the design and initial implementation of the GNU Fortran\n-front end.\n-\n-@item\n-Brent Verner for work with the libstdc++ cshadow files and their\n-associated configure steps.\n-\n-@item\n-Todd Vierling for contributions for NetBSD ports.\n-\n-@item\n-Andrew Waterman for contributing the RISC-V port, as well as maintaining it.\n-\n-@item\n-Jonathan Wakely for contributing libstdc++ Doxygen notes and XHTML\n-guidance and maintaining libstdc++.\n-\n-@item\n-Dean Wakerley for converting the install documentation from HTML to texinfo\n-in time for GCC 3.0.\n-\n-@item\n-Krister Walfridsson for random bug fixes.\n-\n-@item\n-Feng Wang for contributions to GNU Fortran.\n-\n-@item\n-Stephen M. Webb for time and effort on making libstdc++ shadow files\n-work with the tricky Solaris 8+ headers, and for pushing the build-time\n-header tree. Also, for starting and driving the @code{<regex>} effort.\n-\n-@item\n-John Wehle for various improvements for the x86 code generator,\n-related infrastructure improvements to help x86 code generation,\n-value range propagation and other work, WE32k port.\n-\n-@item\n-Ulrich Weigand for work on the s390 port.\n-\n-@item\n-Janus Weil for contributions to GNU Fortran.\n-\n-@item\n-Zack Weinberg for major work on cpplib and various other bug fixes.\n-\n-@item\n-Matt Welsh for help with Linux Threads support in GCJ@.\n-\n-@item\n-Urban Widmark for help fixing java.io.\n-\n-@item\n-Mark Wielaard for new Java library code and his work integrating with\n-Classpath.\n-\n-@item\n-Dale Wiles helped port GCC to the Tahoe.\n-\n-@item\n-Bob Wilson from Tensilica, Inc.@: for the Xtensa port.\n-\n-@item\n-Jim Wilson for his direction via the steering committee, tackling hard\n-problems in various places that nobody else wanted to work on, strength\n-reduction and other loop optimizations.\n-\n-@item\n-Paul Woegerer and Tal Agmon for the CRX port.\n-\n-@item\n-Carlo Wood for various fixes.\n-\n-@item\n-Tom Wood for work on the m88k port.\n-\n-@item\n-Chung-Ju Wu for his work on the Andes NDS32 port.\n-\n-@item\n-Canqun Yang for work on GNU Fortran.\n-\n-@item\n-Masanobu Yuhara of Fujitsu Laboratories implemented the machine\n-description for the Tron architecture (specifically, the Gmicro).\n-\n-@item\n-Kevin Zachmann helped port GCC to the Tahoe.\n-\n-@item\n-Ayal Zaks for Swing Modulo Scheduling (SMS).\n-\n-@item\n-Qirun Zhang for running automated regression testing of GCC and reporting\n-numerous bugs.\n-\n-@item\n-Xiaoqiang Zhang for work on GNU Fortran.\n-\n-@item\n-Gilles Zunino for help porting Java to Irix.\n-\n-@end itemize\n-\n-The following people are recognized for their contributions to GNAT,\n-the Ada front end of GCC:\n-@itemize @bullet\n-@item\n-Bernard Banner\n-\n-@item\n-Romain Berrendonner\n-\n-@item\n-Geert Bosch\n-\n-@item\n-Emmanuel Briot\n-\n-@item\n-Joel Brobecker\n-\n-@item\n-Ben Brosgol\n-\n-@item\n-Vincent Celier\n-\n-@item\n-Arnaud Charlet\n-\n-@item\n-Chien Chieng\n-\n-@item\n-Cyrille Comar\n-\n-@item\n-Cyrille Crozes\n-\n-@item\n-Robert Dewar\n-\n-@item\n-Gary Dismukes\n-\n-@item\n-Robert Duff\n-\n-@item\n-Ed Falis\n-\n-@item\n-Ramon Fernandez\n-\n-@item\n-Sam Figueroa\n-\n-@item\n-Vasiliy Fofanov\n-\n-@item\n-Michael Friess\n-\n-@item\n-Franco Gasperoni\n-\n-@item\n-Ted Giering\n-\n-@item\n-Matthew Gingell\n-\n-@item\n-Laurent Guerby\n-\n-@item\n-Jerome Guitton\n-\n-@item\n-Olivier Hainque\n-\n-@item\n-Jerome Hugues\n-\n-@item\n-Hristian Kirtchev\n-\n-@item\n-Jerome Lambourg\n-\n-@item\n-Bruno Leclerc\n-\n-@item\n-Albert Lee\n-\n-@item\n-Sean McNeil\n-\n-@item\n-Javier Miranda\n-\n-@item\n-Laurent Nana\n-\n-@item\n-Pascal Obry\n-\n-@item\n-Dong-Ik Oh\n-\n-@item\n-Laurent Pautet\n-\n-@item\n-Brett Porter\n-\n-@item\n-Thomas Quinot\n-\n-@item\n-Nicolas Roche\n-\n-@item\n-Pat Rogers\n-\n-@item\n-Jose Ruiz\n-\n-@item\n-Douglas Rupp\n-\n-@item\n-Sergey Rybin\n-\n-@item\n-Gail Schenker\n-\n-@item\n-Ed Schonberg\n-\n-@item\n-Nicolas Setton\n-\n-@item\n-Samuel Tardieu\n-\n-@end itemize\n-\n-\n-The following people are recognized for their contributions of new\n-features, bug reports, testing and integration of classpath/libgcj for\n-GCC version 4.1:\n-@itemize @bullet\n-@item\n-Lillian Angel for @code{JTree} implementation and lots Free Swing\n-additions and bug fixes.\n-\n-@item\n-Wolfgang Baer for @code{GapContent} bug fixes.\n-\n-@item\n-Anthony Balkissoon for @code{JList}, Free Swing 1.5 updates and mouse event\n-fixes, lots of Free Swing work including @code{JTable} editing.\n-\n-@item\n-Stuart Ballard for RMI constant fixes.\n-\n-@item\n-Goffredo Baroncelli for @code{HTTPURLConnection} fixes.\n-\n-@item\n-Gary Benson for @code{MessageFormat} fixes.\n-\n-@item\n-Daniel Bonniot for @code{Serialization} fixes.\n-\n-@item\n-Chris Burdess for lots of gnu.xml and http protocol fixes, @code{StAX}\n-and @code{DOM xml:id} support.\n-\n-@item\n-Ka-Hing Cheung for @code{TreePath} and @code{TreeSelection} fixes.\n-\n-@item\n-Archie Cobbs for build fixes, VM interface updates,\n-@code{URLClassLoader} updates.\n-\n-@item\n-Kelley Cook for build fixes.\n-\n-@item\n-Martin Cordova for Suggestions for better @code{SocketTimeoutException}.\n-\n-@item\n-David Daney for @code{BitSet} bug fixes, @code{HttpURLConnection}\n-rewrite and improvements.\n-\n-@item\n-Thomas Fitzsimmons for lots of upgrades to the gtk+ AWT and Cairo 2D\n-support. Lots of imageio framework additions, lots of AWT and Free\n-Swing bug fixes.\n-\n-@item\n-Jeroen Frijters for @code{ClassLoader} and nio cleanups, serialization fixes,\n-better @code{Proxy} support, bug fixes and IKVM integration.\n-\n-@item\n-Santiago Gala for @code{AccessControlContext} fixes.\n-\n-@item\n-Nicolas Geoffray for @code{VMClassLoader} and @code{AccessController}\n-improvements.\n-\n-@item\n-David Gilbert for @code{basic} and @code{metal} icon and plaf support\n-and lots of documenting, Lots of Free Swing and metal theme\n-additions. @code{MetalIconFactory} implementation.\n-\n-@item\n-Anthony Green for @code{MIDI} framework, @code{ALSA} and @code{DSSI}\n-providers.\n-\n-@item\n-Andrew Haley for @code{Serialization} and @code{URLClassLoader} fixes,\n-gcj build speedups.\n-\n-@item\n-Kim Ho for @code{JFileChooser} implementation.\n-\n-@item\n-Andrew John Hughes for @code{Locale} and net fixes, URI RFC2986\n-updates, @code{Serialization} fixes, @code{Properties} XML support and\n-generic branch work, VMIntegration guide update.\n-\n-@item\n-Bastiaan Huisman for @code{TimeZone} bug fixing.\n-\n-@item\n-Andreas Jaeger for mprec updates.\n-\n-@item\n-Paul Jenner for better @option{-Werror} support.\n-\n-@item\n-Ito Kazumitsu for @code{NetworkInterface} implementation and updates.\n-\n-@item\n-Roman Kennke for @code{BoxLayout}, @code{GrayFilter} and\n-@code{SplitPane}, plus bug fixes all over. Lots of Free Swing work\n-including styled text.\n-\n-@item\n-Simon Kitching for @code{String} cleanups and optimization suggestions.\n-\n-@item\n-Michael Koch for configuration fixes, @code{Locale} updates, bug and\n-build fixes.\n-\n-@item\n-Guilhem Lavaux for configuration, thread and channel fixes and Kaffe\n-integration. JCL native @code{Pointer} updates. Logger bug fixes.\n-\n-@item\n-David Lichteblau for JCL support library global/local reference\n-cleanups.\n-\n-@item\n-Aaron Luchko for JDWP updates and documentation fixes.\n-\n-@item\n-Ziga Mahkovec for @code{Graphics2D} upgraded to Cairo 0.5 and new regex\n-features.\n-\n-@item\n-Sven de Marothy for BMP imageio support, CSS and @code{TextLayout}\n-fixes. @code{GtkImage} rewrite, 2D, awt, free swing and date/time fixes and\n-implementing the Qt4 peers.\n-\n-@item\n-Casey Marshall for crypto algorithm fixes, @code{FileChannel} lock,\n-@code{SystemLogger} and @code{FileHandler} rotate implementations, NIO\n-@code{FileChannel.map} support, security and policy updates.\n-\n-@item\n-Bryce McKinlay for RMI work.\n-\n-@item\n-Audrius Meskauskas for lots of Free Corba, RMI and HTML work plus\n-testing and documenting.\n-\n-@item\n-Kalle Olavi Niemitalo for build fixes.\n-\n-@item\n-Rainer Orth for build fixes.\n-\n-@item\n-Andrew Overholt for @code{File} locking fixes.\n-\n-@item\n-Ingo Proetel for @code{Image}, @code{Logger} and @code{URLClassLoader}\n-updates.\n-\n-@item\n-Olga Rodimina for @code{MenuSelectionManager} implementation.\n-\n-@item\n-Jan Roehrich for @code{BasicTreeUI} and @code{JTree} fixes.\n-\n-@item\n-Julian Scheid for documentation updates and gjdoc support.\n-\n-@item\n-Christian Schlichtherle for zip fixes and cleanups.\n-\n-@item\n-Robert Schuster for documentation updates and beans fixes,\n-@code{TreeNode} enumerations and @code{ActionCommand} and various\n-fixes, XML and URL, AWT and Free Swing bug fixes.\n-\n-@item\n-Keith Seitz for lots of JDWP work.\n-\n-@item\n-Christian Thalinger for 64-bit cleanups, Configuration and VM\n-interface fixes and @code{CACAO} integration, @code{fdlibm} updates.\n-\n-@item\n-Gael Thomas for @code{VMClassLoader} boot packages support suggestions.\n-\n-@item\n-Andreas Tobler for Darwin and Solaris testing and fixing, @code{Qt4}\n-support for Darwin/OS X, @code{Graphics2D} support, @code{gtk+}\n-updates.\n-\n-@item\n-Dalibor Topic for better @code{DEBUG} support, build cleanups and\n-Kaffe integration. @code{Qt4} build infrastructure, @code{SHA1PRNG}\n-and @code{GdkPixbugDecoder} updates.\n-\n-@item\n-Tom Tromey for Eclipse integration, generics work, lots of bug fixes\n-and gcj integration including coordinating The Big Merge.\n-\n-@item\n-Mark Wielaard for bug fixes, packaging and release management,\n-@code{Clipboard} implementation, system call interrupts and network\n-timeouts and @code{GdkPixpufDecoder} fixes.\n-\n-@end itemize\n-\n-\n-In addition to the above, all of which also contributed time and energy in\n-testing GCC, we would like to thank the following for their contributions\n-to testing:\n-\n-@itemize @bullet\n-@item\n-Michael Abd-El-Malek\n-\n-@item\n-Thomas Arend\n-\n-@item\n-Bonzo Armstrong\n-\n-@item\n-Steven Ashe\n-\n-@item\n-Chris Baldwin\n-\n-@item\n-David Billinghurst\n-\n-@item\n-Jim Blandy\n-\n-@item\n-Stephane Bortzmeyer\n-\n-@item\n-Horst von Brand\n-\n-@item\n-Frank Braun\n-\n-@item\n-Rodney Brown\n-\n-@item\n-Sidney Cadot\n-\n-@item\n-Bradford Castalia\n-\n-@item\n-Robert Clark\n-\n-@item\n-Jonathan Corbet\n-\n-@item\n-Ralph Doncaster\n-\n-@item\n-Richard Emberson\n-\n-@item\n-Levente Farkas\n-\n-@item\n-Graham Fawcett\n-\n-@item\n-Mark Fernyhough\n-\n-@item\n-Robert A. French\n-\n-@item\n-J@\"orgen Freyh\n-\n-@item\n-Mark K. Gardner\n-\n-@item\n-Charles-Antoine Gauthier\n-\n-@item\n-Yung Shing Gene\n-\n-@item\n-David Gilbert\n-\n-@item\n-Simon Gornall\n-\n-@item\n-Fred Gray\n-\n-@item\n-John Griffin\n-\n-@item\n-Patrik Hagglund\n-\n-@item\n-Phil Hargett\n-\n-@item\n-Amancio Hasty\n-\n-@item\n-Takafumi Hayashi\n-\n-@item\n-Bryan W. Headley\n-\n-@item\n-Kevin B. Hendricks\n-\n-@item\n-Joep Jansen\n-\n-@item\n-Christian Joensson\n-\n-@item\n-Michel Kern\n-\n-@item\n-David Kidd\n-\n-@item\n-Tobias Kuipers\n-\n-@item\n-Anand Krishnaswamy\n-\n-@item\n-A. O. V. Le Blanc\n-\n-@item\n-llewelly\n-\n-@item\n-Damon Love\n-\n-@item\n-Brad Lucier\n-\n-@item\n-Matthias Klose\n-\n-@item\n-Martin Knoblauch\n-\n-@item\n-Rick Lutowski\n-\n-@item\n-Jesse Macnish\n-\n-@item\n-Stefan Morrell\n-\n-@item\n-Anon A. Mous\n-\n-@item\n-Matthias Mueller\n-\n-@item\n-Pekka Nikander\n-\n-@item\n-Rick Niles\n-\n-@item\n-Jon Olson\n-\n-@item\n-Magnus Persson\n-\n-@item\n-Chris Pollard\n-\n-@item\n-Richard Polton\n-\n-@item\n-Derk Reefman\n-\n-@item\n-David Rees\n-\n-@item\n-Paul Reilly\n-\n-@item\n-Tom Reilly\n-\n-@item\n-Torsten Rueger\n-\n-@item\n-Danny Sadinoff\n-\n-@item\n-Marc Schifer\n-\n-@item\n-Erik Schnetter\n-\n-@item\n-Wayne K. Schroll\n-\n-@item\n-David Schuler\n-\n-@item\n-Vin Shelton\n-\n-@item\n-Tim Souder\n-\n-@item\n-Adam Sulmicki\n-\n-@item\n-Bill Thorson\n-\n-@item\n-George Talbot\n-\n-@item\n-Pedro A. M. Vazquez\n-\n-@item\n-Gregory Warnes\n-\n-@item\n-Ian Watson\n-\n-@item\n-David E. Young\n-\n-@item\n-And many others\n-@end itemize\n-\n-And finally we'd like to thank everyone who uses the compiler, provides\n-feedback and generally reminds us why we're doing this work in the first\n-place."}, {"sha": "74d8670348bc4fe77a045e6ef6950693c3b5cef6", "filename": "gcc/doc/contribute.texi", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fcontribute.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fcontribute.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcontribute.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,24 +0,0 @@\n-@c Copyright (C) 1988-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@node Contributing\n-@chapter Contributing to GCC Development\n-\n-If you would like to help pretest GCC releases to assure they work well,\n-current development sources are available via Git (see\n-@uref{https://gcc.gnu.org/git.html}).  Source and binary snapshots are\n-also available for FTP; see @uref{https://gcc.gnu.org/snapshots.html}.\n-\n-If you would like to work on improvements to GCC, please read the\n-advice at these URLs:\n-\n-@smallexample\n-@uref{https://gcc.gnu.org/contribute.html}\n-@uref{https://gcc.gnu.org/contributewhy.html}\n-@end smallexample\n-\n-@noindent\n-for information on how to make useful contributions and avoid\n-duplication of effort.  Suggested projects are listed at\n-@uref{https://gcc.gnu.org/projects/}."}, {"sha": "90b2767e39a0ffe8dc815b3bdbe49efe933cb603", "filename": "gcc/doc/cpp.texi", "status": "removed", "additions": 0, "deletions": 4600, "changes": 4600, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "7ab5b8b7376dc4d3589daaf4c07df60c0f6db4b0", "filename": "gcc/doc/cppdiropts.texi", "status": "removed", "additions": 0, "deletions": 154, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fcppdiropts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fcppdiropts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppdiropts.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,154 +0,0 @@\n-@c Copyright (C) 1999-2022 Free Software Foundation, Inc.\n-@c This is part of the CPP and GCC manuals.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@c ---------------------------------------------------------------------\n-@c Options affecting include directory search in the preprocessor\n-@c ---------------------------------------------------------------------\n-\n-@c If this file is included with the flag ``cppmanual'' set, it is\n-@c formatted for inclusion in the CPP manual; otherwise the main GCC manual.\n-\n-@item -I @var{dir}\n-@itemx -iquote @var{dir}\n-@itemx -isystem @var{dir}\n-@itemx -idirafter @var{dir}\n-@opindex I\n-@opindex iquote\n-@opindex isystem\n-@opindex idirafter\n-Add the directory @var{dir} to the list of directories to be searched\n-for header files during preprocessing.\n-@ifset cppmanual\n-@xref{Search Path}.\n-@end ifset\n-If @var{dir} begins with @samp{=} or @code{$SYSROOT}, then the @samp{=}\n-or @code{$SYSROOT} is replaced by the sysroot prefix; see\n-@option{--sysroot} and @option{-isysroot}.\n-\n-Directories specified with @option{-iquote} apply only to the quote \n-form of the directive, @code{@w{#include \"@var{file}\"}}.\n-Directories specified with @option{-I}, @option{-isystem}, \n-or @option{-idirafter} apply to lookup for both the\n-@code{@w{#include \"@var{file}\"}} and\n-@code{@w{#include <@var{file}>}} directives.\n-\n-You can specify any number or combination of these options on the \n-command line to search for header files in several directories.  \n-The lookup order is as follows:\n-\n-@enumerate\n-@item\n-For the quote form of the include directive, the directory of the current\n-file is searched first.\n-\n-@item\n-For the quote form of the include directive, the directories specified\n-by @option{-iquote} options are searched in left-to-right order,\n-as they appear on the command line.\n-\n-@item\n-Directories specified with @option{-I} options are scanned in\n-left-to-right order.\n-\n-@item\n-Directories specified with @option{-isystem} options are scanned in\n-left-to-right order.\n-\n-@item\n-Standard system directories are scanned.\n-\n-@item\n-Directories specified with @option{-idirafter} options are scanned in\n-left-to-right order.\n-@end enumerate\n-\n-You can use @option{-I} to override a system header\n-file, substituting your own version, since these directories are\n-searched before the standard system header file directories.  \n-However, you should\n-not use this option to add directories that contain vendor-supplied\n-system header files; use @option{-isystem} for that.\n-\n-The @option{-isystem} and @option{-idirafter} options also mark the directory\n-as a system directory, so that it gets the same special treatment that\n-is applied to the standard system directories.\n-@ifset cppmanual\n-@xref{System Headers}.\n-@end ifset\n-\n-If a standard system include directory, or a directory specified with\n-@option{-isystem}, is also specified with @option{-I}, the @option{-I}\n-option is ignored.  The directory is still searched but as a\n-system directory at its normal position in the system include chain.\n-This is to ensure that GCC's procedure to fix buggy system headers and\n-the ordering for the @code{#include_next} directive are not inadvertently\n-changed.\n-If you really need to change the search order for system directories,\n-use the @option{-nostdinc} and/or @option{-isystem} options.\n-@ifset cppmanual\n-@xref{System Headers}.\n-@end ifset\n-\n-@item -I-\n-@opindex I-\n-Split the include path.\n-This option has been deprecated.  Please use @option{-iquote} instead for\n-@option{-I} directories before the @option{-I-} and remove the @option{-I-}\n-option.\n-\n-Any directories specified with @option{-I}\n-options before @option{-I-} are searched only for headers requested with\n-@code{@w{#include \"@var{file}\"}}; they are not searched for\n-@code{@w{#include <@var{file}>}}.  If additional directories are\n-specified with @option{-I} options after the @option{-I-}, those\n-directories are searched for all @samp{#include} directives.\n-\n-In addition, @option{-I-} inhibits the use of the directory of the current\n-file directory as the first search directory for @code{@w{#include\n-\"@var{file}\"}}.  There is no way to override this effect of @option{-I-}.\n-@ifset cppmanual\n-@xref{Search Path}.\n-@end ifset\n-\n-@item -iprefix @var{prefix}\n-@opindex iprefix\n-Specify @var{prefix} as the prefix for subsequent @option{-iwithprefix}\n-options.  If the prefix represents a directory, you should include the\n-final @samp{/}.\n-\n-@item -iwithprefix @var{dir}\n-@itemx -iwithprefixbefore @var{dir}\n-@opindex iwithprefix\n-@opindex iwithprefixbefore\n-Append @var{dir} to the prefix specified previously with\n-@option{-iprefix}, and add the resulting directory to the include search\n-path.  @option{-iwithprefixbefore} puts it in the same place @option{-I}\n-would; @option{-iwithprefix} puts it where @option{-idirafter} would.\n-\n-@item -isysroot @var{dir}\n-@opindex isysroot\n-This option is like the @option{--sysroot} option, but applies only to\n-header files (except for Darwin targets, where it applies to both header\n-files and libraries).  See the @option{--sysroot} option for more\n-information.\n-\n-@item -imultilib @var{dir}\n-@opindex imultilib\n-Use @var{dir} as a subdirectory of the directory containing\n-target-specific C++ headers.\n-\n-@item -nostdinc\n-@opindex nostdinc\n-Do not search the standard system directories for header files.\n-Only the directories explicitly specified with @option{-I},\n-@option{-iquote}, @option{-isystem}, and/or @option{-idirafter}\n-options (and the directory of the current file, if appropriate) \n-are searched.\n-\n-@item -nostdinc++\n-@opindex nostdinc++\n-Do not search for header files in the C++-specific standard directories,\n-but do still search the other standard directories.  (This option is\n-used when building the C++ library.)\n-"}, {"sha": "c8125bd34fe1a3af4f1ae1fc360cbda84a14936c", "filename": "gcc/doc/cppenv.texi", "status": "removed", "additions": 0, "deletions": 99, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fcppenv.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fcppenv.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppenv.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,99 +0,0 @@\n-@c Copyright (C) 1999-2022 Free Software Foundation, Inc.\n-@c This is part of the CPP and GCC manuals.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@c ---------------------------------------------------------------------\n-@c Environment variables affecting the preprocessor\n-@c ---------------------------------------------------------------------\n-\n-@c If this file is included with the flag ``cppmanual'' set, it is\n-@c formatted for inclusion in the CPP manual; otherwise the main GCC manual.\n-\n-@vtable @env\n-@item CPATH\n-@itemx C_INCLUDE_PATH\n-@itemx CPLUS_INCLUDE_PATH\n-@itemx OBJC_INCLUDE_PATH\n-@c Commented out until ObjC++ is part of GCC:\n-@c @itemx OBJCPLUS_INCLUDE_PATH\n-Each variable's value is a list of directories separated by a special\n-character, much like @env{PATH}, in which to look for header files.\n-The special character, @code{PATH_SEPARATOR}, is target-dependent and\n-determined at GCC build time.  For Microsoft Windows-based targets it is a\n-semicolon, and for almost all other targets it is a colon.\n-\n-@env{CPATH} specifies a list of directories to be searched as if\n-specified with @option{-I}, but after any paths given with @option{-I}\n-options on the command line.  This environment variable is used\n-regardless of which language is being preprocessed.\n-\n-The remaining environment variables apply only when preprocessing the\n-particular language indicated.  Each specifies a list of directories\n-to be searched as if specified with @option{-isystem}, but after any\n-paths given with @option{-isystem} options on the command line.\n-\n-In all these variables, an empty element instructs the compiler to\n-search its current working directory.  Empty elements can appear at the\n-beginning or end of a path.  For instance, if the value of\n-@env{CPATH} is @code{:/special/include}, that has the same\n-effect as @samp{@w{-I. -I/special/include}}.\n-\n-@c man end\n-@ifset cppmanual\n-See also @ref{Search Path}.\n-@end ifset\n-@c man begin ENVIRONMENT\n-\n-@item DEPENDENCIES_OUTPUT\n-@cindex dependencies for make as output\n-If this variable is set, its value specifies how to output\n-dependencies for Make based on the non-system header files processed\n-by the compiler.  System header files are ignored in the dependency\n-output.\n-\n-The value of @env{DEPENDENCIES_OUTPUT} can be just a file name, in\n-which case the Make rules are written to that file, guessing the target\n-name from the source file name.  Or the value can have the form\n-@samp{@var{file} @var{target}}, in which case the rules are written to\n-file @var{file} using @var{target} as the target name.\n-\n-In other words, this environment variable is equivalent to combining\n-the options @option{-MM} and @option{-MF}\n-@ifset cppmanual\n-(@pxref{Invocation}),\n-@end ifset\n-@ifclear cppmanual\n-(@pxref{Preprocessor Options}),\n-@end ifclear\n-with an optional @option{-MT} switch too.\n-\n-@item SUNPRO_DEPENDENCIES\n-@cindex dependencies for make as output\n-This variable is the same as @env{DEPENDENCIES_OUTPUT} (see above),\n-except that system header files are not ignored, so it implies\n-@option{-M} rather than @option{-MM}.  However, the dependence on the\n-main input file is omitted.\n-@ifset cppmanual\n-@xref{Invocation}.\n-@end ifset\n-@ifclear cppmanual\n-@xref{Preprocessor Options}.\n-@end ifclear\n-\n-@item SOURCE_DATE_EPOCH\n-If this variable is set, its value specifies a UNIX timestamp to be\n-used in replacement of the current date and time in the @code{__DATE__}\n-and @code{__TIME__} macros, so that the embedded timestamps become\n-reproducible.\n-\n-The value of @env{SOURCE_DATE_EPOCH} must be a UNIX timestamp,\n-defined as the number of seconds (excluding leap seconds) since\n-01 Jan 1970 00:00:00 represented in ASCII; identical to the output of\n-@code{date +%s} on GNU/Linux and other systems that support the\n-@code{%s} extension in the @code{date} command.\n-\n-The value should be a known timestamp such as the last modification\n-time of the source or package and it should be set by the build\n-process.\n-\n-@end vtable"}, {"sha": "75adbbe7bec6b4b6c3904fd5b366ecf6f82cdf8e", "filename": "gcc/doc/cppinternals.texi", "status": "removed", "additions": 0, "deletions": 1066, "changes": 1066, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fcppinternals.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fcppinternals.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,1066 +0,0 @@\n-\\input texinfo\n-@setfilename cppinternals.info\n-@settitle The GNU C Preprocessor Internals\n-\n-@include gcc-common.texi\n-\n-@ifinfo\n-@dircategory Software development\n-@direntry\n-* Cpplib: (cppinternals).      Cpplib internals.\n-@end direntry\n-@end ifinfo\n-\n-@c @smallbook\n-@c @cropmarks\n-@c @finalout\n-@setchapternewpage odd\n-@ifinfo\n-This file documents the internals of the GNU C Preprocessor.\n-\n-Copyright (C) 2000-2022 Free Software Foundation, Inc.\n-\n-Permission is granted to make and distribute verbatim copies of\n-this manual provided the copyright notice and this permission notice\n-are preserved on all copies.\n-\n-@ignore\n-Permission is granted to process this file through Tex and print the\n-results, provided the printed document carries copying permission\n-notice identical to this one except for the removal of this paragraph\n-(this paragraph not being relevant to the printed manual).\n-\n-@end ignore\n-Permission is granted to copy and distribute modified versions of this\n-manual under the conditions for verbatim copying, provided also that\n-the entire resulting derived work is distributed under the terms of a\n-permission notice identical to this one.\n-\n-Permission is granted to copy and distribute translations of this manual\n-into another language, under the above conditions for modified versions.\n-@end ifinfo\n-\n-@titlepage\n-@title Cpplib Internals\n-@versionsubtitle\n-@author Neil Booth\n-@page\n-@vskip 0pt plus 1filll\n-@c man begin COPYRIGHT\n-Copyright @copyright{} 2000-2022 Free Software Foundation, Inc.\n-\n-Permission is granted to make and distribute verbatim copies of\n-this manual provided the copyright notice and this permission notice\n-are preserved on all copies.\n-\n-Permission is granted to copy and distribute modified versions of this\n-manual under the conditions for verbatim copying, provided also that\n-the entire resulting derived work is distributed under the terms of a\n-permission notice identical to this one.\n-\n-Permission is granted to copy and distribute translations of this manual\n-into another language, under the above conditions for modified versions.\n-@c man end\n-@end titlepage\n-@contents\n-@page\n-\n-@ifnottex\n-@node Top\n-@top\n-@chapter Cpplib---the GNU C Preprocessor\n-\n-The GNU C preprocessor is\n-implemented as a library, @dfn{cpplib}, so it can be easily shared between\n-a stand-alone preprocessor, and a preprocessor integrated with the C,\n-C++ and Objective-C front ends.  It is also available for use by other\n-programs, though this is not recommended as its exposed interface has\n-not yet reached a point of reasonable stability.\n-\n-The library has been written to be re-entrant, so that it can be used\n-to preprocess many files simultaneously if necessary.  It has also been\n-written with the preprocessing token as the fundamental unit; the\n-preprocessor in previous versions of GCC would operate on text strings\n-as the fundamental unit.\n-\n-This brief manual documents the internals of cpplib, and explains some\n-of the tricky issues.  It is intended that, along with the comments in\n-the source code, a reasonably competent C programmer should be able to\n-figure out what the code is doing, and why things have been implemented\n-the way they have.\n-\n-@menu\n-* Conventions::         Conventions used in the code.\n-* Lexer::               The combined C, C++ and Objective-C Lexer.\n-* Hash Nodes::          All identifiers are entered into a hash table.\n-* Macro Expansion::     Macro expansion algorithm.\n-* Token Spacing::       Spacing and paste avoidance issues.\n-* Line Numbering::      Tracking location within files.\n-* Guard Macros::        Optimizing header files with guard macros.\n-* Files::               File handling.\n-* Concept Index::       Index.\n-@end menu\n-@end ifnottex\n-\n-@node Conventions\n-@unnumbered Conventions\n-@cindex interface\n-@cindex header files\n-\n-cpplib has two interfaces---one is exposed internally only, and the\n-other is for both internal and external use.\n-\n-The convention is that functions and types that are exposed to multiple\n-files internally are prefixed with @samp{_cpp_}, and are to be found in\n-the file @file{internal.h}.  Functions and types exposed to external\n-clients are in @file{cpplib.h}, and prefixed with @samp{cpp_}.  For\n-historical reasons this is no longer quite true, but we should strive to\n-stick to it.\n-\n-We are striving to reduce the information exposed in @file{cpplib.h} to the\n-bare minimum necessary, and then to keep it there.  This makes clear\n-exactly what external clients are entitled to assume, and allows us to\n-change internals in the future without worrying whether library clients\n-are perhaps relying on some kind of undocumented implementation-specific\n-behavior.\n-\n-@node Lexer\n-@unnumbered The Lexer\n-@cindex lexer\n-@cindex newlines\n-@cindex escaped newlines\n-\n-@section Overview\n-The lexer is contained in the file @file{lex.cc}.  It is a hand-coded\n-lexer, and not implemented as a state machine.  It can understand C, C++\n-and Objective-C source code, and has been extended to allow reasonably\n-successful preprocessing of assembly language.  The lexer does not make\n-an initial pass to strip out trigraphs and escaped newlines, but handles\n-them as they are encountered in a single pass of the input file.  It\n-returns preprocessing tokens individually, not a line at a time.\n-\n-It is mostly transparent to users of the library, since the library's\n-interface for obtaining the next token, @code{cpp_get_token}, takes care\n-of lexing new tokens, handling directives, and expanding macros as\n-necessary.  However, the lexer does expose some functionality so that\n-clients of the library can easily spell a given token, such as\n-@code{cpp_spell_token} and @code{cpp_token_len}.  These functions are\n-useful when generating diagnostics, and for emitting the preprocessed\n-output.\n-\n-@section Lexing a token\n-Lexing of an individual token is handled by @code{_cpp_lex_direct} and\n-its subroutines.  In its current form the code is quite complicated,\n-with read ahead characters and such-like, since it strives to not step\n-back in the character stream in preparation for handling non-ASCII file\n-encodings.  The current plan is to convert any such files to UTF-8\n-before processing them.  This complexity is therefore unnecessary and\n-will be removed, so I'll not discuss it further here.\n-\n-The job of @code{_cpp_lex_direct} is simply to lex a token.  It is not\n-responsible for issues like directive handling, returning lookahead\n-tokens directly, multiple-include optimization, or conditional block\n-skipping.  It necessarily has a minor r@^ole to play in memory\n-management of lexed lines.  I discuss these issues in a separate section\n-(@pxref{Lexing a line}).\n-\n-The lexer places the token it lexes into storage pointed to by the\n-variable @code{cur_token}, and then increments it.  This variable is\n-important for correct diagnostic positioning.  Unless a specific line\n-and column are passed to the diagnostic routines, they will examine the\n-@code{line} and @code{col} values of the token just before the location\n-that @code{cur_token} points to, and use that location to report the\n-diagnostic.\n-\n-The lexer does not consider whitespace to be a token in its own right.\n-If whitespace (other than a new line) precedes a token, it sets the\n-@code{PREV_WHITE} bit in the token's flags.  Each token has its\n-@code{line} and @code{col} variables set to the line and column of the\n-first character of the token.  This line number is the line number in\n-the translation unit, and can be converted to a source (file, line) pair\n-using the line map code.\n-\n-The first token on a logical, i.e.@: unescaped, line has the flag\n-@code{BOL} set for beginning-of-line.  This flag is intended for\n-internal use, both to distinguish a @samp{#} that begins a directive\n-from one that doesn't, and to generate a call-back to clients that want\n-to be notified about the start of every non-directive line with tokens\n-on it.  Clients cannot reliably determine this for themselves: the first\n-token might be a macro, and the tokens of a macro expansion do not have\n-the @code{BOL} flag set.  The macro expansion may even be empty, and the\n-next token on the line certainly won't have the @code{BOL} flag set.\n-\n-New lines are treated specially; exactly how the lexer handles them is\n-context-dependent.  The C standard mandates that directives are\n-terminated by the first unescaped newline character, even if it appears\n-in the middle of a macro expansion.  Therefore, if the state variable\n-@code{in_directive} is set, the lexer returns a @code{CPP_EOF} token,\n-which is normally used to indicate end-of-file, to indicate\n-end-of-directive.  In a directive a @code{CPP_EOF} token never means\n-end-of-file.  Conveniently, if the caller was @code{collect_args}, it\n-already handles @code{CPP_EOF} as if it were end-of-file, and reports an\n-error about an unterminated macro argument list.\n-\n-The C standard also specifies that a new line in the middle of the\n-arguments to a macro is treated as whitespace.  This white space is\n-important in case the macro argument is stringized.  The state variable\n-@code{parsing_args} is nonzero when the preprocessor is collecting the\n-arguments to a macro call.  It is set to 1 when looking for the opening\n-parenthesis to a function-like macro, and 2 when collecting the actual\n-arguments up to the closing parenthesis, since these two cases need to\n-be distinguished sometimes.  One such time is here: the lexer sets the\n-@code{PREV_WHITE} flag of a token if it meets a new line when\n-@code{parsing_args} is set to 2.  It doesn't set it if it meets a new\n-line when @code{parsing_args} is 1, since then code like\n-\n-@smallexample\n-#define foo() bar\n-foo\n-baz\n-@end smallexample\n-\n-@noindent would be output with an erroneous space before @samp{baz}:\n-\n-@smallexample\n-foo\n- baz\n-@end smallexample\n-\n-This is a good example of the subtlety of getting token spacing correct\n-in the preprocessor; there are plenty of tests in the testsuite for\n-corner cases like this.\n-\n-The lexer is written to treat each of @samp{\\r}, @samp{\\n}, @samp{\\r\\n}\n-and @samp{\\n\\r} as a single new line indicator.  This allows it to\n-transparently preprocess MS-DOS, Macintosh and Unix files without their\n-needing to pass through a special filter beforehand.\n-\n-We also decided to treat a backslash, either @samp{\\} or the trigraph\n-@samp{??/}, separated from one of the above newline indicators by\n-non-comment whitespace only, as intending to escape the newline.  It\n-tends to be a typing mistake, and cannot reasonably be mistaken for\n-anything else in any of the C-family grammars.  Since handling it this\n-way is not strictly conforming to the ISO standard, the library issues a\n-warning wherever it encounters it.\n-\n-Handling newlines like this is made simpler by doing it in one place\n-only.  The function @code{handle_newline} takes care of all newline\n-characters, and @code{skip_escaped_newlines} takes care of arbitrarily\n-long sequences of escaped newlines, deferring to @code{handle_newline}\n-to handle the newlines themselves.\n-\n-The most painful aspect of lexing ISO-standard C and C++ is handling\n-trigraphs and backlash-escaped newlines.  Trigraphs are processed before\n-any interpretation of the meaning of a character is made, and unfortunately\n-there is a trigraph representation for a backslash, so it is possible for\n-the trigraph @samp{??/} to introduce an escaped newline.\n-\n-Escaped newlines are tedious because theoretically they can occur\n-anywhere---between the @samp{+} and @samp{=} of the @samp{+=} token,\n-within the characters of an identifier, and even between the @samp{*}\n-and @samp{/} that terminates a comment.  Moreover, you cannot be sure\n-there is just one---there might be an arbitrarily long sequence of them.\n-\n-So, for example, the routine that lexes a number, @code{parse_number},\n-cannot assume that it can scan forwards until the first non-number\n-character and be done with it, because this could be the @samp{\\}\n-introducing an escaped newline, or the @samp{?} introducing the trigraph\n-sequence that represents the @samp{\\} of an escaped newline.  If it\n-encounters a @samp{?} or @samp{\\}, it calls @code{skip_escaped_newlines}\n-to skip over any potential escaped newlines before checking whether the\n-number has been finished.\n-\n-Similarly code in the main body of @code{_cpp_lex_direct} cannot simply\n-check for a @samp{=} after a @samp{+} character to determine whether it\n-has a @samp{+=} token; it needs to be prepared for an escaped newline of\n-some sort.  Such cases use the function @code{get_effective_char}, which\n-returns the first character after any intervening escaped newlines.\n-\n-The lexer needs to keep track of the correct column position, including\n-counting tabs as specified by the @option{-ftabstop=} option.  This\n-should be done even within C-style comments; they can appear in the\n-middle of a line, and we want to report diagnostics in the correct\n-position for text appearing after the end of the comment.\n-\n-@anchor{Invalid identifiers}\n-Some identifiers, such as @code{__VA_ARGS__} and poisoned identifiers,\n-may be invalid and require a diagnostic.  However, if they appear in a\n-macro expansion we don't want to complain with each use of the macro.\n-It is therefore best to catch them during the lexing stage, in\n-@code{parse_identifier}.  In both cases, whether a diagnostic is needed\n-or not is dependent upon the lexer's state.  For example, we don't want\n-to issue a diagnostic for re-poisoning a poisoned identifier, or for\n-using @code{__VA_ARGS__} in the expansion of a variable-argument macro.\n-Therefore @code{parse_identifier} makes use of state flags to determine\n-whether a diagnostic is appropriate.  Since we change state on a\n-per-token basis, and don't lex whole lines at a time, this is not a\n-problem.\n-\n-Another place where state flags are used to change behavior is whilst\n-lexing header names.  Normally, a @samp{<} would be lexed as a single\n-token.  After a @code{#include} directive, though, it should be lexed as\n-a single token as far as the nearest @samp{>} character.  Note that we\n-don't allow the terminators of header names to be escaped; the first\n-@samp{\"} or @samp{>} terminates the header name.\n-\n-Interpretation of some character sequences depends upon whether we are\n-lexing C, C++ or Objective-C, and on the revision of the standard in\n-force.  For example, @samp{::} is a single token in C++, but in C it is\n-two separate @samp{:} tokens and almost certainly a syntax error.  Such\n-cases are handled by @code{_cpp_lex_direct} based upon command-line\n-flags stored in the @code{cpp_options} structure.\n-\n-Once a token has been lexed, it leads an independent existence.  The\n-spelling of numbers, identifiers and strings is copied to permanent\n-storage from the original input buffer, so a token remains valid and\n-correct even if its source buffer is freed with @code{_cpp_pop_buffer}.\n-The storage holding the spellings of such tokens remains until the\n-client program calls cpp_destroy, probably at the end of the translation\n-unit.\n-\n-@anchor{Lexing a line}\n-@section Lexing a line\n-@cindex token run\n-\n-When the preprocessor was changed to return pointers to tokens, one\n-feature I wanted was some sort of guarantee regarding how long a\n-returned pointer remains valid.  This is important to the stand-alone\n-preprocessor, the future direction of the C family front ends, and even\n-to cpplib itself internally.\n-\n-Occasionally the preprocessor wants to be able to peek ahead in the\n-token stream.  For example, after the name of a function-like macro, it\n-wants to check the next token to see if it is an opening parenthesis.\n-Another example is that, after reading the first few tokens of a\n-@code{#pragma} directive and not recognizing it as a registered pragma,\n-it wants to backtrack and allow the user-defined handler for unknown\n-pragmas to access the full @code{#pragma} token stream.  The stand-alone\n-preprocessor wants to be able to test the current token with the\n-previous one to see if a space needs to be inserted to preserve their\n-separate tokenization upon re-lexing (paste avoidance), so it needs to\n-be sure the pointer to the previous token is still valid.  The\n-recursive-descent C++ parser wants to be able to perform tentative\n-parsing arbitrarily far ahead in the token stream, and then to be able\n-to jump back to a prior position in that stream if necessary.\n-\n-The rule I chose, which is fairly natural, is to arrange that the\n-preprocessor lex all tokens on a line consecutively into a token buffer,\n-which I call a @dfn{token run}, and when meeting an unescaped new line\n-(newlines within comments do not count either), to start lexing back at\n-the beginning of the run.  Note that we do @emph{not} lex a line of\n-tokens at once; if we did that @code{parse_identifier} would not have\n-state flags available to warn about invalid identifiers (@pxref{Invalid\n-identifiers}).\n-\n-In other words, accessing tokens that appeared earlier in the current\n-line is valid, but since each logical line overwrites the tokens of the\n-previous line, tokens from prior lines are unavailable.  In particular,\n-since a directive only occupies a single logical line, this means that\n-the directive handlers like the @code{#pragma} handler can jump around\n-in the directive's tokens if necessary.\n-\n-Two issues remain: what about tokens that arise from macro expansions,\n-and what happens when we have a long line that overflows the token run?\n-\n-Since we promise clients that we preserve the validity of pointers that\n-we have already returned for tokens that appeared earlier in the line,\n-we cannot reallocate the run.  Instead, on overflow it is expanded by\n-chaining a new token run on to the end of the existing one.\n-\n-The tokens forming a macro's replacement list are collected by the\n-@code{#define} handler, and placed in storage that is only freed by\n-@code{cpp_destroy}.  So if a macro is expanded in the line of tokens,\n-the pointers to the tokens of its expansion that are returned will always\n-remain valid.  However, macros are a little trickier than that, since\n-they give rise to three sources of fresh tokens.  They are the built-in\n-macros like @code{__LINE__}, and the @samp{#} and @samp{##} operators\n-for stringizing and token pasting.  I handled this by allocating\n-space for these tokens from the lexer's token run chain.  This means\n-they automatically receive the same lifetime guarantees as lexed tokens,\n-and we don't need to concern ourselves with freeing them.\n-\n-Lexing into a line of tokens solves some of the token memory management\n-issues, but not all.  The opening parenthesis after a function-like\n-macro name might lie on a different line, and the front ends definitely\n-want the ability to look ahead past the end of the current line.  So\n-cpplib only moves back to the start of the token run at the end of a\n-line if the variable @code{keep_tokens} is zero.  Line-buffering is\n-quite natural for the preprocessor, and as a result the only time cpplib\n-needs to increment this variable is whilst looking for the opening\n-parenthesis to, and reading the arguments of, a function-like macro.  In\n-the near future cpplib will export an interface to increment and\n-decrement this variable, so that clients can share full control over the\n-lifetime of token pointers too.\n-\n-The routine @code{_cpp_lex_token} handles moving to new token runs,\n-calling @code{_cpp_lex_direct} to lex new tokens, or returning\n-previously-lexed tokens if we stepped back in the token stream.  It also\n-checks each token for the @code{BOL} flag, which might indicate a\n-directive that needs to be handled, or require a start-of-line call-back\n-to be made.  @code{_cpp_lex_token} also handles skipping over tokens in\n-failed conditional blocks, and invalidates the control macro of the\n-multiple-include optimization if a token was successfully lexed outside\n-a directive.  In other words, its callers do not need to concern\n-themselves with such issues.\n-\n-@node Hash Nodes\n-@unnumbered Hash Nodes\n-@cindex hash table\n-@cindex identifiers\n-@cindex macros\n-@cindex assertions\n-@cindex named operators\n-\n-When cpplib encounters an ``identifier'', it generates a hash code for\n-it and stores it in the hash table.  By ``identifier'' we mean tokens\n-with type @code{CPP_NAME}; this includes identifiers in the usual C\n-sense, as well as keywords, directive names, macro names and so on.  For\n-example, all of @code{pragma}, @code{int}, @code{foo} and\n-@code{__GNUC__} are identifiers and hashed when lexed.\n-\n-Each node in the hash table contain various information about the\n-identifier it represents.  For example, its length and type.  At any one\n-time, each identifier falls into exactly one of three categories:\n-\n-@itemize @bullet\n-@item Macros\n-\n-These have been declared to be macros, either on the command line or\n-with @code{#define}.  A few, such as @code{__TIME__} are built-ins\n-entered in the hash table during initialization.  The hash node for a\n-normal macro points to a structure with more information about the\n-macro, such as whether it is function-like, how many arguments it takes,\n-and its expansion.  Built-in macros are flagged as special, and instead\n-contain an enum indicating which of the various built-in macros it is.\n-\n-@item Assertions\n-\n-Assertions are in a separate namespace to macros.  To enforce this, cpp\n-actually prepends a @code{#} character before hashing and entering it in\n-the hash table.  An assertion's node points to a chain of answers to\n-that assertion.\n-\n-@item Void\n-\n-Everything else falls into this category---an identifier that is not\n-currently a macro, or a macro that has since been undefined with\n-@code{#undef}.\n-\n-When preprocessing C++, this category also includes the named operators,\n-such as @code{xor}.  In expressions these behave like the operators they\n-represent, but in contexts where the spelling of a token matters they\n-are spelt differently.  This spelling distinction is relevant when they\n-are operands of the stringizing and pasting macro operators @code{#} and\n-@code{##}.  Named operator hash nodes are flagged, both to catch the\n-spelling distinction and to prevent them from being defined as macros.\n-@end itemize\n-\n-The same identifiers share the same hash node.  Since each identifier\n-token, after lexing, contains a pointer to its hash node, this is used\n-to provide rapid lookup of various information.  For example, when\n-parsing a @code{#define} statement, CPP flags each argument's identifier\n-hash node with the index of that argument.  This makes duplicated\n-argument checking an O(1) operation for each argument.  Similarly, for\n-each identifier in the macro's expansion, lookup to see if it is an\n-argument, and which argument it is, is also an O(1) operation.  Further,\n-each directive name, such as @code{endif}, has an associated directive\n-enum stored in its hash node, so that directive lookup is also O(1).\n-\n-@node Macro Expansion\n-@unnumbered Macro Expansion Algorithm\n-@cindex macro expansion\n-\n-Macro expansion is a tricky operation, fraught with nasty corner cases\n-and situations that render what you thought was a nifty way to\n-optimize the preprocessor's expansion algorithm wrong in quite subtle\n-ways.\n-\n-I strongly recommend you have a good grasp of how the C and C++\n-standards require macros to be expanded before diving into this\n-section, let alone the code!.  If you don't have a clear mental\n-picture of how things like nested macro expansion, stringizing and\n-token pasting are supposed to work, damage to your sanity can quickly\n-result.\n-\n-@section Internal representation of macros\n-@cindex macro representation (internal)\n-\n-The preprocessor stores macro expansions in tokenized form.  This\n-saves repeated lexing passes during expansion, at the cost of a small\n-increase in memory consumption on average.  The tokens are stored\n-contiguously in memory, so a pointer to the first one and a token\n-count is all you need to get the replacement list of a macro.\n-\n-If the macro is a function-like macro the preprocessor also stores its\n-parameters, in the form of an ordered list of pointers to the hash\n-table entry of each parameter's identifier.  Further, in the macro's\n-stored expansion each occurrence of a parameter is replaced with a\n-special token of type @code{CPP_MACRO_ARG}.  Each such token holds the\n-index of the parameter it represents in the parameter list, which\n-allows rapid replacement of parameters with their arguments during\n-expansion.  Despite this optimization it is still necessary to store\n-the original parameters to the macro, both for dumping with e.g.,\n-@option{-dD}, and to warn about non-trivial macro redefinitions when\n-the parameter names have changed.\n-\n-@section Macro expansion overview\n-The preprocessor maintains a @dfn{context stack}, implemented as a\n-linked list of @code{cpp_context} structures, which together represent\n-the macro expansion state at any one time.  The @code{struct\n-cpp_reader} member variable @code{context} points to the current top\n-of this stack.  The top normally holds the unexpanded replacement list\n-of the innermost macro under expansion, except when cpplib is about to\n-pre-expand an argument, in which case it holds that argument's\n-unexpanded tokens.\n-\n-When there are no macros under expansion, cpplib is in @dfn{base\n-context}.  All contexts other than the base context contain a\n-contiguous list of tokens delimited by a starting and ending token.\n-When not in base context, cpplib obtains the next token from the list\n-of the top context.  If there are no tokens left in the list, it pops\n-that context off the stack, and subsequent ones if necessary, until an\n-unexhausted context is found or it returns to base context.  In base\n-context, cpplib reads tokens directly from the lexer.\n-\n-If it encounters an identifier that is both a macro and enabled for\n-expansion, cpplib prepares to push a new context for that macro on the\n-stack by calling the routine @code{enter_macro_context}.  When this\n-routine returns, the new context will contain the unexpanded tokens of\n-the replacement list of that macro.  In the case of function-like\n-macros, @code{enter_macro_context} also replaces any parameters in the\n-replacement list, stored as @code{CPP_MACRO_ARG} tokens, with the\n-appropriate macro argument.  If the standard requires that the\n-parameter be replaced with its expanded argument, the argument will\n-have been fully macro expanded first.\n-\n-@code{enter_macro_context} also handles special macros like\n-@code{__LINE__}.  Although these macros expand to a single token which\n-cannot contain any further macros, for reasons of token spacing\n-(@pxref{Token Spacing}) and simplicity of implementation, cpplib\n-handles these special macros by pushing a context containing just that\n-one token.\n-\n-The final thing that @code{enter_macro_context} does before returning\n-is to mark the macro disabled for expansion (except for special macros\n-like @code{__TIME__}).  The macro is re-enabled when its context is\n-later popped from the context stack, as described above.  This strict\n-ordering ensures that a macro is disabled whilst its expansion is\n-being scanned, but that it is @emph{not} disabled whilst any arguments\n-to it are being expanded.\n-\n-@section Scanning the replacement list for macros to expand\n-The C standard states that, after any parameters have been replaced\n-with their possibly-expanded arguments, the replacement list is\n-scanned for nested macros.  Further, any identifiers in the\n-replacement list that are not expanded during this scan are never\n-again eligible for expansion in the future, if the reason they were\n-not expanded is that the macro in question was disabled.\n-\n-Clearly this latter condition can only apply to tokens resulting from\n-argument pre-expansion.  Other tokens never have an opportunity to be\n-re-tested for expansion.  It is possible for identifiers that are\n-function-like macros to not expand initially but to expand during a\n-later scan.  This occurs when the identifier is the last token of an\n-argument (and therefore originally followed by a comma or a closing\n-parenthesis in its macro's argument list), and when it replaces its\n-parameter in the macro's replacement list, the subsequent token\n-happens to be an opening parenthesis (itself possibly the first token\n-of an argument).\n-\n-It is important to note that when cpplib reads the last token of a\n-given context, that context still remains on the stack.  Only when\n-looking for the @emph{next} token do we pop it off the stack and drop\n-to a lower context.  This makes backing up by one token easy, but more\n-importantly ensures that the macro corresponding to the current\n-context is still disabled when we are considering the last token of\n-its replacement list for expansion (or indeed expanding it).  As an\n-example, which illustrates many of the points above, consider\n-\n-@smallexample\n-#define foo(x) bar x\n-foo(foo) (2)\n-@end smallexample\n-\n-@noindent which fully expands to @samp{bar foo (2)}.  During pre-expansion\n-of the argument, @samp{foo} does not expand even though the macro is\n-enabled, since it has no following parenthesis [pre-expansion of an\n-argument only uses tokens from that argument; it cannot take tokens\n-from whatever follows the macro invocation].  This still leaves the\n-argument token @samp{foo} eligible for future expansion.  Then, when\n-re-scanning after argument replacement, the token @samp{foo} is\n-rejected for expansion, and marked ineligible for future expansion,\n-since the macro is now disabled.  It is disabled because the\n-replacement list @samp{bar foo} of the macro is still on the context\n-stack.\n-\n-If instead the algorithm looked for an opening parenthesis first and\n-then tested whether the macro were disabled it would be subtly wrong.\n-In the example above, the replacement list of @samp{foo} would be\n-popped in the process of finding the parenthesis, re-enabling\n-@samp{foo} and expanding it a second time.\n-\n-@section Looking for a function-like macro's opening parenthesis\n-Function-like macros only expand when immediately followed by a\n-parenthesis.  To do this cpplib needs to temporarily disable macros\n-and read the next token.  Unfortunately, because of spacing issues\n-(@pxref{Token Spacing}), there can be fake padding tokens in-between,\n-and if the next real token is not a parenthesis cpplib needs to be\n-able to back up that one token as well as retain the information in\n-any intervening padding tokens.\n-\n-Backing up more than one token when macros are involved is not\n-permitted by cpplib, because in general it might involve issues like\n-restoring popped contexts onto the context stack, which are too hard.\n-Instead, searching for the parenthesis is handled by a special\n-function, @code{funlike_invocation_p}, which remembers padding\n-information as it reads tokens.  If the next real token is not an\n-opening parenthesis, it backs up that one token, and then pushes an\n-extra context just containing the padding information if necessary.\n-\n-@section Marking tokens ineligible for future expansion\n-As discussed above, cpplib needs a way of marking tokens as\n-unexpandable.  Since the tokens cpplib handles are read-only once they\n-have been lexed, it instead makes a copy of the token and adds the\n-flag @code{NO_EXPAND} to the copy.\n-\n-For efficiency and to simplify memory management by avoiding having to\n-remember to free these tokens, they are allocated as temporary tokens\n-from the lexer's current token run (@pxref{Lexing a line}) using the\n-function @code{_cpp_temp_token}.  The tokens are then re-used once the\n-current line of tokens has been read in.\n-\n-This might sound unsafe.  However, tokens runs are not re-used at the\n-end of a line if it happens to be in the middle of a macro argument\n-list, and cpplib only wants to back-up more than one lexer token in\n-situations where no macro expansion is involved, so the optimization\n-is safe.\n-\n-@node Token Spacing\n-@unnumbered Token Spacing\n-@cindex paste avoidance\n-@cindex spacing\n-@cindex token spacing\n-\n-First, consider an issue that only concerns the stand-alone\n-preprocessor: there needs to be a guarantee that re-reading its preprocessed\n-output results in an identical token stream.  Without taking special\n-measures, this might not be the case because of macro substitution.\n-For example:\n-\n-@smallexample\n-#define PLUS +\n-#define EMPTY\n-#define f(x) =x=\n-+PLUS -EMPTY- PLUS+ f(=)\n-        @expansion{} + + - - + + = = =\n-@emph{not}\n-        @expansion{} ++ -- ++ ===\n-@end smallexample\n-\n-One solution would be to simply insert a space between all adjacent\n-tokens.  However, we would like to keep space insertion to a minimum,\n-both for aesthetic reasons and because it causes problems for people who\n-still try to abuse the preprocessor for things like Fortran source and\n-Makefiles.\n-\n-For now, just notice that when tokens are added (or removed, as shown by\n-the @code{EMPTY} example) from the original lexed token stream, we need\n-to check for accidental token pasting.  We call this @dfn{paste\n-avoidance}.  Token addition and removal can only occur because of macro\n-expansion, but accidental pasting can occur in many places: both before\n-and after each macro replacement, each argument replacement, and\n-additionally each token created by the @samp{#} and @samp{##} operators.\n-\n-Look at how the preprocessor gets whitespace output correct\n-normally.  The @code{cpp_token} structure contains a flags byte, and one\n-of those flags is @code{PREV_WHITE}.  This is flagged by the lexer, and\n-indicates that the token was preceded by whitespace of some form other\n-than a new line.  The stand-alone preprocessor can use this flag to\n-decide whether to insert a space between tokens in the output.\n-\n-Now consider the result of the following macro expansion:\n-\n-@smallexample\n-#define add(x, y, z) x + y +z;\n-sum = add (1,2, 3);\n-        @expansion{} sum = 1 + 2 +3;\n-@end smallexample\n-\n-The interesting thing here is that the tokens @samp{1} and @samp{2} are\n-output with a preceding space, and @samp{3} is output without a\n-preceding space, but when lexed none of these tokens had that property.\n-Careful consideration reveals that @samp{1} gets its preceding\n-whitespace from the space preceding @samp{add} in the macro invocation,\n-@emph{not} replacement list.  @samp{2} gets its whitespace from the\n-space preceding the parameter @samp{y} in the macro replacement list,\n-and @samp{3} has no preceding space because parameter @samp{z} has none\n-in the replacement list.\n-\n-Once lexed, tokens are effectively fixed and cannot be altered, since\n-pointers to them might be held in many places, in particular by\n-in-progress macro expansions.  So instead of modifying the two tokens\n-above, the preprocessor inserts a special token, which I call a\n-@dfn{padding token}, into the token stream to indicate that spacing of\n-the subsequent token is special.  The preprocessor inserts padding\n-tokens in front of every macro expansion and expanded macro argument.\n-These point to a @dfn{source token} from which the subsequent real token\n-should inherit its spacing.  In the above example, the source tokens are\n-@samp{add} in the macro invocation, and @samp{y} and @samp{z} in the\n-macro replacement list, respectively.\n-\n-It is quite easy to get multiple padding tokens in a row, for example if\n-a macro's first replacement token expands straight into another macro.\n-\n-@smallexample\n-#define foo bar\n-#define bar baz\n-[foo]\n-        @expansion{} [baz]\n-@end smallexample\n-\n-Here, two padding tokens are generated with sources the @samp{foo} token\n-between the brackets, and the @samp{bar} token from foo's replacement\n-list, respectively.  Clearly the first padding token is the one to\n-use, so the output code should contain a rule that the first\n-padding token in a sequence is the one that matters.\n-\n-But what if a macro expansion is left?  Adjusting the above\n-example slightly:\n-\n-@smallexample\n-#define foo bar\n-#define bar EMPTY baz\n-#define EMPTY\n-[foo] EMPTY;\n-        @expansion{} [ baz] ;\n-@end smallexample\n-\n-As shown, now there should be a space before @samp{baz} and the\n-semicolon in the output.\n-\n-The rules we decided above fail for @samp{baz}: we generate three\n-padding tokens, one per macro invocation, before the token @samp{baz}.\n-We would then have it take its spacing from the first of these, which\n-carries source token @samp{foo} with no leading space.\n-\n-It is vital that cpplib get spacing correct in these examples since any\n-of these macro expansions could be stringized, where spacing matters.\n-\n-So, this demonstrates that not just entering macro and argument\n-expansions, but leaving them requires special handling too.  I made\n-cpplib insert a padding token with a @code{NULL} source token when\n-leaving macro expansions, as well as after each replaced argument in a\n-macro's replacement list.  It also inserts appropriate padding tokens on\n-either side of tokens created by the @samp{#} and @samp{##} operators.\n-I expanded the rule so that, if we see a padding token with a\n-@code{NULL} source token, @emph{and} that source token has no leading\n-space, then we behave as if we have seen no padding tokens at all.  A\n-quick check shows this rule will then get the above example correct as\n-well.\n-\n-Now a relationship with paste avoidance is apparent: we have to be\n-careful about paste avoidance in exactly the same locations we have\n-padding tokens in order to get white space correct.  This makes\n-implementation of paste avoidance easy: wherever the stand-alone\n-preprocessor is fixing up spacing because of padding tokens, and it\n-turns out that no space is needed, it has to take the extra step to\n-check that a space is not needed after all to avoid an accidental paste.\n-The function @code{cpp_avoid_paste} advises whether a space is required\n-between two consecutive tokens.  To avoid excessive spacing, it tries\n-hard to only require a space if one is likely to be necessary, but for\n-reasons of efficiency it is slightly conservative and might recommend a\n-space where one is not strictly needed.\n-\n-@node Line Numbering\n-@unnumbered Line numbering\n-@cindex line numbers\n-\n-@section Just which line number anyway?\n-\n-There are three reasonable requirements a cpplib client might have for\n-the line number of a token passed to it:\n-\n-@itemize @bullet\n-@item\n-The source line it was lexed on.\n-@item\n-The line it is output on.  This can be different to the line it was\n-lexed on if, for example, there are intervening escaped newlines or\n-C-style comments.  For example:\n-\n-@smallexample\n-foo /* @r{A long\n-comment} */ bar \\\n-baz\n-@result{}\n-foo bar baz\n-@end smallexample\n-\n-@item\n-If the token results from a macro expansion, the line of the macro name,\n-or possibly the line of the closing parenthesis in the case of\n-function-like macro expansion.\n-@end itemize\n-\n-The @code{cpp_token} structure contains @code{line} and @code{col}\n-members.  The lexer fills these in with the line and column of the first\n-character of the token.  Consequently, but maybe unexpectedly, a token\n-from the replacement list of a macro expansion carries the location of\n-the token within the @code{#define} directive, because cpplib expands a\n-macro by returning pointers to the tokens in its replacement list.  The\n-current implementation of cpplib assigns tokens created from built-in\n-macros and the @samp{#} and @samp{##} operators the location of the most\n-recently lexed token.  This is a because they are allocated from the\n-lexer's token runs, and because of the way the diagnostic routines infer\n-the appropriate location to report.\n-\n-The diagnostic routines in cpplib display the location of the most\n-recently @emph{lexed} token, unless they are passed a specific line and\n-column to report.  For diagnostics regarding tokens that arise from\n-macro expansions, it might also be helpful for the user to see the\n-original location in the macro definition that the token came from.\n-Since that is exactly the information each token carries, such an\n-enhancement could be made relatively easily in future.\n-\n-The stand-alone preprocessor faces a similar problem when determining\n-the correct line to output the token on: the position attached to a\n-token is fairly useless if the token came from a macro expansion.  All\n-tokens on a logical line should be output on its first physical line, so\n-the token's reported location is also wrong if it is part of a physical\n-line other than the first.\n-\n-To solve these issues, cpplib provides a callback that is generated\n-whenever it lexes a preprocessing token that starts a new logical line\n-other than a directive.  It passes this token (which may be a\n-@code{CPP_EOF} token indicating the end of the translation unit) to the\n-callback routine, which can then use the line and column of this token\n-to produce correct output.\n-\n-@section Representation of line numbers\n-\n-As mentioned above, cpplib stores with each token the line number that\n-it was lexed on.  In fact, this number is not the number of the line in\n-the source file, but instead bears more resemblance to the number of the\n-line in the translation unit.\n-\n-The preprocessor maintains a monotonic increasing line count, which is\n-incremented at every new line character (and also at the end of any\n-buffer that does not end in a new line).  Since a line number of zero is\n-useful to indicate certain special states and conditions, this variable\n-starts counting from one.\n-\n-This variable therefore uniquely enumerates each line in the translation\n-unit.  With some simple infrastructure, it is straight forward to map\n-from this to the original source file and line number pair, saving space\n-whenever line number information needs to be saved.  The code the\n-implements this mapping lies in the files @file{line-map.cc} and\n-@file{line-map.h}.\n-\n-Command-line macros and assertions are implemented by pushing a buffer\n-containing the right hand side of an equivalent @code{#define} or\n-@code{#assert} directive.  Some built-in macros are handled similarly.\n-Since these are all processed before the first line of the main input\n-file, it will typically have an assigned line closer to twenty than to\n-one.\n-\n-@node Guard Macros\n-@unnumbered The Multiple-Include Optimization\n-@cindex guard macros\n-@cindex controlling macros\n-@cindex multiple-include optimization\n-\n-Header files are often of the form\n-\n-@smallexample\n-#ifndef FOO\n-#define FOO\n-@dots{}\n-#endif\n-@end smallexample\n-\n-@noindent\n-to prevent the compiler from processing them more than once.  The\n-preprocessor notices such header files, so that if the header file\n-appears in a subsequent @code{#include} directive and @code{FOO} is\n-defined, then it is ignored and it doesn't preprocess or even re-open\n-the file a second time.  This is referred to as the @dfn{multiple\n-include optimization}.\n-\n-Under what circumstances is such an optimization valid?  If the file\n-were included a second time, it can only be optimized away if that\n-inclusion would result in no tokens to return, and no relevant\n-directives to process.  Therefore the current implementation imposes\n-requirements and makes some allowances as follows:\n-\n-@enumerate\n-@item\n-There must be no tokens outside the controlling @code{#if}-@code{#endif}\n-pair, but whitespace and comments are permitted.\n-\n-@item\n-There must be no directives outside the controlling directive pair, but\n-the @dfn{null directive} (a line containing nothing other than a single\n-@samp{#} and possibly whitespace) is permitted.\n-\n-@item\n-The opening directive must be of the form\n-\n-@smallexample\n-#ifndef FOO\n-@end smallexample\n-\n-or\n-\n-@smallexample\n-#if !defined FOO     [equivalently, #if !defined(FOO)]\n-@end smallexample\n-\n-@item\n-In the second form above, the tokens forming the @code{#if} expression\n-must have come directly from the source file---no macro expansion must\n-have been involved.  This is because macro definitions can change, and\n-tracking whether or not a relevant change has been made is not worth the\n-implementation cost.\n-\n-@item\n-There can be no @code{#else} or @code{#elif} directives at the outer\n-conditional block level, because they would probably contain something\n-of interest to a subsequent pass.\n-@end enumerate\n-\n-First, when pushing a new file on the buffer stack,\n-@code{_stack_include_file} sets the controlling macro @code{mi_cmacro} to\n-@code{NULL}, and sets @code{mi_valid} to @code{true}.  This indicates\n-that the preprocessor has not yet encountered anything that would\n-invalidate the multiple-include optimization.  As described in the next\n-few paragraphs, these two variables having these values effectively\n-indicates top-of-file.\n-\n-When about to return a token that is not part of a directive,\n-@code{_cpp_lex_token} sets @code{mi_valid} to @code{false}.  This\n-enforces the constraint that tokens outside the controlling conditional\n-block invalidate the optimization.\n-\n-The @code{do_if}, when appropriate, and @code{do_ifndef} directive\n-handlers pass the controlling macro to the function\n-@code{push_conditional}.  cpplib maintains a stack of nested conditional\n-blocks, and after processing every opening conditional this function\n-pushes an @code{if_stack} structure onto the stack.  In this structure\n-it records the controlling macro for the block, provided there is one\n-and we're at top-of-file (as described above).  If an @code{#elif} or\n-@code{#else} directive is encountered, the controlling macro for that\n-block is cleared to @code{NULL}.  Otherwise, it survives until the\n-@code{#endif} closing the block, upon which @code{do_endif} sets\n-@code{mi_valid} to true and stores the controlling macro in\n-@code{mi_cmacro}.\n-\n-@code{_cpp_handle_directive} clears @code{mi_valid} when processing any\n-directive other than an opening conditional and the null directive.\n-With this, and requiring top-of-file to record a controlling macro, and\n-no @code{#else} or @code{#elif} for it to survive and be copied to\n-@code{mi_cmacro} by @code{do_endif}, we have enforced the absence of\n-directives outside the main conditional block for the optimization to be\n-on.\n-\n-Note that whilst we are inside the conditional block, @code{mi_valid} is\n-likely to be reset to @code{false}, but this does not matter since\n-the closing @code{#endif} restores it to @code{true} if appropriate.\n-\n-Finally, since @code{_cpp_lex_direct} pops the file off the buffer stack\n-at @code{EOF} without returning a token, if the @code{#endif} directive\n-was not followed by any tokens, @code{mi_valid} is @code{true} and\n-@code{_cpp_pop_file_buffer} remembers the controlling macro associated\n-with the file.  Subsequent calls to @code{stack_include_file} result in\n-no buffer being pushed if the controlling macro is defined, effecting\n-the optimization.\n-\n-A quick word on how we handle the\n-\n-@smallexample\n-#if !defined FOO\n-@end smallexample\n-\n-@noindent\n-case.  @code{_cpp_parse_expr} and @code{parse_defined} take steps to see\n-whether the three stages @samp{!}, @samp{defined-expression} and\n-@samp{end-of-directive} occur in order in a @code{#if} expression.  If\n-so, they return the guard macro to @code{do_if} in the variable\n-@code{mi_ind_cmacro}, and otherwise set it to @code{NULL}.\n-@code{enter_macro_context} sets @code{mi_valid} to false, so if a macro\n-was expanded whilst parsing any part of the expression, then the\n-top-of-file test in @code{push_conditional} fails and the optimization\n-is turned off.\n-\n-@node Files\n-@unnumbered File Handling\n-@cindex files\n-\n-Fairly obviously, the file handling code of cpplib resides in the file\n-@file{files.cc}.  It takes care of the details of file searching,\n-opening, reading and caching, for both the main source file and all the\n-headers it recursively includes.\n-\n-The basic strategy is to minimize the number of system calls.  On many\n-systems, the basic @code{open ()} and @code{fstat ()} system calls can\n-be quite expensive.  For every @code{#include}-d file, we need to try\n-all the directories in the search path until we find a match.  Some\n-projects, such as glibc, pass twenty or thirty include paths on the\n-command line, so this can rapidly become time consuming.\n-\n-For a header file we have not encountered before we have little choice\n-but to do this.  However, it is often the case that the same headers are\n-repeatedly included, and in these cases we try to avoid repeating the\n-filesystem queries whilst searching for the correct file.\n-\n-For each file we try to open, we store the constructed path in a splay\n-tree.  This path first undergoes simplification by the function\n-@code{_cpp_simplify_pathname}.  For example,\n-@file{/usr/include/bits/../foo.h} is simplified to\n-@file{/usr/include/foo.h} before we enter it in the splay tree and try\n-to @code{open ()} the file.  CPP will then find subsequent uses of\n-@file{foo.h}, even as @file{/usr/include/foo.h}, in the splay tree and\n-save system calls.\n-\n-Further, it is likely the file contents have also been cached, saving a\n-@code{read ()} system call.  We don't bother caching the contents of\n-header files that are re-inclusion protected, and whose re-inclusion\n-macro is defined when we leave the header file for the first time.  If\n-the host supports it, we try to map suitably large files into memory,\n-rather than reading them in directly.\n-\n-The include paths are internally stored on a null-terminated\n-singly-linked list, starting with the @code{\"header.h\"} directory search\n-chain, which then links into the @code{<header.h>} directory chain.\n-\n-Files included with the @code{<foo.h>} syntax start the lookup directly\n-in the second half of this chain.  However, files included with the\n-@code{\"foo.h\"} syntax start at the beginning of the chain, but with one\n-extra directory prepended.  This is the directory of the current file;\n-the one containing the @code{#include} directive.  Prepending this\n-directory on a per-file basis is handled by the function\n-@code{search_from}.\n-\n-Note that a header included with a directory component, such as\n-@code{#include \"mydir/foo.h\"} and opened as\n-@file{/usr/local/include/mydir/foo.h}, will have the complete path minus\n-the basename @samp{foo.h} as the current directory.\n-\n-Enough information is stored in the splay tree that CPP can immediately\n-tell whether it can skip the header file because of the multiple include\n-optimization, whether the file didn't exist or couldn't be opened for\n-some reason, or whether the header was flagged not to be re-used, as it\n-is with the obsolete @code{#import} directive.\n-\n-For the benefit of MS-DOS filesystems with an 8.3 filename limitation,\n-CPP offers the ability to treat various include file names as aliases\n-for the real header files with shorter names.  The map from one to the\n-other is found in a special file called @samp{header.gcc}, stored in the\n-command line (or system) include directories to which the mapping\n-applies.  This may be higher up the directory tree than the full path to\n-the file minus the base name.\n-\n-@node Concept Index\n-@unnumbered Concept Index\n-@printindex cp\n-\n-@bye"}, {"sha": "c0a92b370183848cc4508a735e455a2533db0d7b", "filename": "gcc/doc/cppopts.texi", "status": "removed", "additions": 0, "deletions": 557, "changes": 557, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,557 +0,0 @@\n-@c Copyright (C) 1999-2022 Free Software Foundation, Inc.\n-@c This is part of the CPP and GCC manuals.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@c ---------------------------------------------------------------------\n-@c Options affecting the preprocessor\n-@c ---------------------------------------------------------------------\n-\n-@c If this file is included with the flag ``cppmanual'' set, it is\n-@c formatted for inclusion in the CPP manual; otherwise the main GCC manual.\n-\n-@item -D @var{name}\n-@opindex D\n-Predefine @var{name} as a macro, with definition @code{1}.\n-\n-@item -D @var{name}=@var{definition}\n-The contents of @var{definition} are tokenized and processed as if\n-they appeared during translation phase three in a @samp{#define}\n-directive.  In particular, the definition is truncated by\n-embedded newline characters.\n-\n-If you are invoking the preprocessor from a shell or shell-like\n-program you may need to use the shell's quoting syntax to protect\n-characters such as spaces that have a meaning in the shell syntax.\n-\n-If you wish to define a function-like macro on the command line, write\n-its argument list with surrounding parentheses before the equals sign\n-(if any).  Parentheses are meaningful to most shells, so you should\n-quote the option.  With @command{sh} and @command{csh},\n-@option{-D'@var{name}(@var{args@dots{}})=@var{definition}'} works.\n-\n-@option{-D} and @option{-U} options are processed in the order they\n-are given on the command line.  All @option{-imacros @var{file}} and\n-@option{-include @var{file}} options are processed after all\n-@option{-D} and @option{-U} options.\n-\n-@item -U @var{name}\n-@opindex U\n-Cancel any previous definition of @var{name}, either built in or\n-provided with a @option{-D} option.\n-\n-@item -include @var{file}\n-@opindex include\n-Process @var{file} as if @code{#include \"file\"} appeared as the first\n-line of the primary source file.  However, the first directory searched\n-for @var{file} is the preprocessor's working directory @emph{instead of}\n-the directory containing the main source file.  If not found there, it\n-is searched for in the remainder of the @code{#include \"@dots{}\"} search\n-chain as normal.\n-\n-If multiple @option{-include} options are given, the files are included\n-in the order they appear on the command line.\n-\n-@item -imacros @var{file}\n-@opindex imacros\n-Exactly like @option{-include}, except that any output produced by\n-scanning @var{file} is thrown away.  Macros it defines remain defined.\n-This allows you to acquire all the macros from a header without also\n-processing its declarations.\n-\n-All files specified by @option{-imacros} are processed before all files\n-specified by @option{-include}.\n-\n-@item -undef\n-@opindex undef\n-Do not predefine any system-specific or GCC-specific macros.  The\n-standard predefined macros remain defined.\n-@ifset cppmanual\n-@xref{Standard Predefined Macros}.\n-@end ifset\n-\n-@item -pthread\n-@opindex pthread\n-Define additional macros required for using the POSIX threads library.\n-You should use this option consistently for both compilation and linking.\n-This option is supported on GNU/Linux targets, most other Unix derivatives,\n-and also on x86 Cygwin and MinGW targets.\n-\n-@item -M\n-@opindex M\n-@cindex @command{make}\n-@cindex dependencies, @command{make}\n-Instead of outputting the result of preprocessing, output a rule\n-suitable for @command{make} describing the dependencies of the main\n-source file.  The preprocessor outputs one @command{make} rule containing\n-the object file name for that source file, a colon, and the names of all\n-the included files, including those coming from @option{-include} or\n-@option{-imacros} command-line options.\n-\n-Unless specified explicitly (with @option{-MT} or @option{-MQ}), the\n-object file name consists of the name of the source file with any\n-suffix replaced with object file suffix and with any leading directory\n-parts removed.  If there are many included files then the rule is\n-split into several lines using @samp{\\}-newline.  The rule has no\n-commands.\n-\n-This option does not suppress the preprocessor's debug output, such as\n-@option{-dM}.  To avoid mixing such debug output with the dependency\n-rules you should explicitly specify the dependency output file with\n-@option{-MF}, or use an environment variable like\n-@env{DEPENDENCIES_OUTPUT} (@pxref{Environment Variables}).  Debug output\n-is still sent to the regular output stream as normal.\n-\n-Passing @option{-M} to the driver implies @option{-E}, and suppresses\n-warnings with an implicit @option{-w}.\n-\n-@item -MM\n-@opindex MM\n-Like @option{-M} but do not mention header files that are found in\n-system header directories, nor header files that are included,\n-directly or indirectly, from such a header.\n-\n-This implies that the choice of angle brackets or double quotes in an\n-@samp{#include} directive does not in itself determine whether that\n-header appears in @option{-MM} dependency output.\n-\n-@anchor{dashMF}\n-@item -MF @var{file}\n-@opindex MF\n-When used with @option{-M} or @option{-MM}, specifies a\n-file to write the dependencies to.  If no @option{-MF} switch is given\n-the preprocessor sends the rules to the same place it would send\n-preprocessed output.\n-\n-When used with the driver options @option{-MD} or @option{-MMD},\n-@option{-MF} overrides the default dependency output file.\n-\n-If @var{file} is @file{-}, then the dependencies are written to @file{stdout}.\n-\n-@item -MG\n-@opindex MG\n-In conjunction with an option such as @option{-M} requesting\n-dependency generation, @option{-MG} assumes missing header files are\n-generated files and adds them to the dependency list without raising\n-an error.  The dependency filename is taken directly from the\n-@code{#include} directive without prepending any path.  @option{-MG}\n-also suppresses preprocessed output, as a missing header file renders\n-this useless.\n-\n-This feature is used in automatic updating of makefiles.\n-\n-@item -Mno-modules\n-@opindex Mno-modules\n-Disable dependency generation for compiled module interfaces.\n-\n-@item -MP\n-@opindex MP\n-This option instructs CPP to add a phony target for each dependency\n-other than the main file, causing each to depend on nothing.  These\n-dummy rules work around errors @command{make} gives if you remove header\n-files without updating the @file{Makefile} to match.\n-\n-This is typical output:\n-\n-@smallexample\n-test.o: test.c test.h\n-\n-test.h:\n-@end smallexample\n-\n-@item -MT @var{target}\n-@opindex MT\n-\n-Change the target of the rule emitted by dependency generation.  By\n-default CPP takes the name of the main input file, deletes any\n-directory components and any file suffix such as @samp{.c}, and\n-appends the platform's usual object suffix.  The result is the target.\n-\n-An @option{-MT} option sets the target to be exactly the string you\n-specify.  If you want multiple targets, you can specify them as a single\n-argument to @option{-MT}, or use multiple @option{-MT} options.\n-\n-For example, @option{@w{-MT '$(objpfx)foo.o'}} might give\n-\n-@smallexample\n-$(objpfx)foo.o: foo.c\n-@end smallexample\n-\n-@item -MQ @var{target}\n-@opindex MQ\n-\n-Same as @option{-MT}, but it quotes any characters which are special to\n-Make.  @option{@w{-MQ '$(objpfx)foo.o'}} gives\n-\n-@smallexample\n-$$(objpfx)foo.o: foo.c\n-@end smallexample\n-\n-The default target is automatically quoted, as if it were given with\n-@option{-MQ}.\n-\n-@item -MD\n-@opindex MD\n-@option{-MD} is equivalent to @option{-M -MF @var{file}}, except that\n-@option{-E} is not implied.  The driver determines @var{file} based on\n-whether an @option{-o} option is given.  If it is, the driver uses its\n-argument but with a suffix of @file{.d}, otherwise it takes the name\n-of the input file, removes any directory components and suffix, and\n-applies a @file{.d} suffix.\n-\n-If @option{-MD} is used in conjunction with @option{-E}, any\n-@option{-o} switch is understood to specify the dependency output file\n-(@pxref{dashMF,,-MF}), but if used without @option{-E}, each @option{-o}\n-is understood to specify a target object file.\n-\n-Since @option{-E} is not implied, @option{-MD} can be used to generate\n-a dependency output file as a side effect of the compilation process.\n-\n-@item -MMD\n-@opindex MMD\n-Like @option{-MD} except mention only user header files, not system\n-header files.\n-\n-@item -fpreprocessed\n-@opindex fpreprocessed\n-Indicate to the preprocessor that the input file has already been\n-preprocessed.  This suppresses things like macro expansion, trigraph\n-conversion, escaped newline splicing, and processing of most directives.\n-The preprocessor still recognizes and removes comments, so that you can\n-pass a file preprocessed with @option{-C} to the compiler without\n-problems.  In this mode the integrated preprocessor is little more than\n-a tokenizer for the front ends.\n-\n-@option{-fpreprocessed} is implicit if the input file has one of the\n-extensions @samp{.i}, @samp{.ii} or @samp{.mi}.  These are the\n-extensions that GCC uses for preprocessed files created by\n-@option{-save-temps}.\n-\n-@item -fdirectives-only\n-@opindex fdirectives-only\n-When preprocessing, handle directives, but do not expand macros.\n-\n-The option's behavior depends on the @option{-E} and @option{-fpreprocessed}\n-options.\n-\n-With @option{-E}, preprocessing is limited to the handling of directives\n-such as @code{#define}, @code{#ifdef}, and @code{#error}.  Other\n-preprocessor operations, such as macro expansion and trigraph\n-conversion are not performed.  In addition, the @option{-dD} option is\n-implicitly enabled.\n-\n-With @option{-fpreprocessed}, predefinition of command line and most\n-builtin macros is disabled.  Macros such as @code{__LINE__}, which are\n-contextually dependent, are handled normally.  This enables compilation of\n-files previously preprocessed with @code{-E -fdirectives-only}.\n-\n-With both @option{-E} and @option{-fpreprocessed}, the rules for\n-@option{-fpreprocessed} take precedence.  This enables full preprocessing of\n-files previously preprocessed with @code{-E -fdirectives-only}.\n-\n-@item -fdollars-in-identifiers\n-@opindex fdollars-in-identifiers\n-@anchor{fdollars-in-identifiers}\n-Accept @samp{$} in identifiers.\n-@ifset cppmanual\n-@xref{Identifier characters}.\n-@end ifset\n-\n-@item -fextended-identifiers\n-@opindex fextended-identifiers\n-Accept universal character names and extended characters in\n-identifiers.  This option is enabled by default for C99 (and later C\n-standard versions) and C++.\n-\n-@item -fno-canonical-system-headers\n-@opindex fno-canonical-system-headers\n-When preprocessing, do not shorten system header paths with canonicalization.\n-\n-@item -fmax-include-depth=@var{depth}\n-@opindex fmax-include-depth\n-Set the maximum depth of the nested #include. The default is 200. \n-\n-@item -ftabstop=@var{width}\n-@opindex ftabstop\n-Set the distance between tab stops.  This helps the preprocessor report\n-correct column numbers in warnings or errors, even if tabs appear on the\n-line.  If the value is less than 1 or greater than 100, the option is\n-ignored.  The default is 8.\n-\n-@item -ftrack-macro-expansion@r{[}=@var{level}@r{]}\n-@opindex ftrack-macro-expansion\n-Track locations of tokens across macro expansions. This allows the\n-compiler to emit diagnostic about the current macro expansion stack\n-when a compilation error occurs in a macro expansion. Using this\n-option makes the preprocessor and the compiler consume more\n-memory. The @var{level} parameter can be used to choose the level of\n-precision of token location tracking thus decreasing the memory\n-consumption if necessary. Value @samp{0} of @var{level} de-activates\n-this option. Value @samp{1} tracks tokens locations in a\n-degraded mode for the sake of minimal memory overhead. In this mode\n-all tokens resulting from the expansion of an argument of a\n-function-like macro have the same location. Value @samp{2} tracks\n-tokens locations completely. This value is the most memory hungry.\n-When this option is given no argument, the default parameter value is\n-@samp{2}.\n-\n-Note that @code{-ftrack-macro-expansion=2} is activated by default.\n-\n-@item -fmacro-prefix-map=@var{old}=@var{new}\n-@opindex fmacro-prefix-map\n-When preprocessing files residing in directory @file{@var{old}},\n-expand the @code{__FILE__} and @code{__BASE_FILE__} macros as if the\n-files resided in directory @file{@var{new}} instead.  This can be used\n-to change an absolute path to a relative path by using @file{.} for\n-@var{new} which can result in more reproducible builds that are\n-location independent.  This option also affects\n-@code{__builtin_FILE()} during compilation.  See also\n-@option{-ffile-prefix-map}.\n-\n-@item -fexec-charset=@var{charset}\n-@opindex fexec-charset\n-@cindex character set, execution\n-Set the execution character set, used for string and character\n-constants.  The default is UTF-8.  @var{charset} can be any encoding\n-supported by the system's @code{iconv} library routine.\n-\n-@item -fwide-exec-charset=@var{charset}\n-@opindex fwide-exec-charset\n-@cindex character set, wide execution\n-Set the wide execution character set, used for wide string and\n-character constants.  The default is one of UTF-32BE, UTF-32LE, UTF-16BE,\n-or UTF-16LE, whichever corresponds to the width of @code{wchar_t} and the\n-big-endian or little-endian byte order being used for code generation.  As\n-with @option{-fexec-charset}, @var{charset} can be any encoding supported\n-by the system's @code{iconv} library routine; however, you will have\n-problems with encodings that do not fit exactly in @code{wchar_t}.\n-\n-@item -finput-charset=@var{charset}\n-@opindex finput-charset\n-@cindex character set, input\n-Set the input character set, used for translation from the character\n-set of the input file to the source character set used by GCC@.  If the\n-locale does not specify, or GCC cannot get this information from the\n-locale, the default is UTF-8.  This can be overridden by either the locale\n-or this command-line option.  Currently the command-line option takes\n-precedence if there's a conflict.  @var{charset} can be any encoding\n-supported by the system's @code{iconv} library routine.\n-\n-@ifclear cppmanual\n-@item -fpch-deps\n-@opindex fpch-deps\n-When using precompiled headers (@pxref{Precompiled Headers}), this flag\n-causes the dependency-output flags to also list the files from the\n-precompiled header's dependencies.  If not specified, only the\n-precompiled header are listed and not the files that were used to\n-create it, because those files are not consulted when a precompiled\n-header is used.\n-\n-@item -fpch-preprocess\n-@opindex fpch-preprocess\n-This option allows use of a precompiled header (@pxref{Precompiled\n-Headers}) together with @option{-E}.  It inserts a special @code{#pragma},\n-@code{#pragma GCC pch_preprocess \"@var{filename}\"} in the output to mark\n-the place where the precompiled header was found, and its @var{filename}.\n-When @option{-fpreprocessed} is in use, GCC recognizes this @code{#pragma}\n-and loads the PCH@.\n-\n-This option is off by default, because the resulting preprocessed output\n-is only really suitable as input to GCC@.  It is switched on by\n-@option{-save-temps}.\n-\n-You should not write this @code{#pragma} in your own code, but it is\n-safe to edit the filename if the PCH file is available in a different\n-location.  The filename may be absolute or it may be relative to GCC's\n-current directory.\n-@end ifclear\n-\n-@item -fworking-directory\n-@opindex fworking-directory\n-@opindex fno-working-directory\n-Enable generation of linemarkers in the preprocessor output that\n-let the compiler know the current working directory at the time of\n-preprocessing.  When this option is enabled, the preprocessor\n-emits, after the initial linemarker, a second linemarker with the\n-current working directory followed by two slashes.  GCC uses this\n-directory, when it's present in the preprocessed input, as the\n-directory emitted as the current working directory in some debugging\n-information formats.  This option is implicitly enabled if debugging\n-information is enabled, but this can be inhibited with the negated\n-form @option{-fno-working-directory}.  If the @option{-P} flag is\n-present in the command line, this option has no effect, since no\n-@code{#line} directives are emitted whatsoever.\n-\n-@item -A @var{predicate}=@var{answer}\n-@opindex A\n-Make an assertion with the predicate @var{predicate} and answer\n-@var{answer}.  This form is preferred to the older form @option{-A\n-@var{predicate}(@var{answer})}, which is still supported, because\n-it does not use shell special characters.\n-@ifset cppmanual\n-@xref{Obsolete Features}.\n-@end ifset\n-\n-@item -A -@var{predicate}=@var{answer}\n-Cancel an assertion with the predicate @var{predicate} and answer\n-@var{answer}.\n-\n-@item -C\n-@opindex C\n-Do not discard comments.  All comments are passed through to the output\n-file, except for comments in processed directives, which are deleted\n-along with the directive.\n-\n-You should be prepared for side effects when using @option{-C}; it\n-causes the preprocessor to treat comments as tokens in their own right.\n-For example, comments appearing at the start of what would be a\n-directive line have the effect of turning that line into an ordinary\n-source line, since the first token on the line is no longer a @samp{#}.\n-\n-@item -CC\n-@opindex CC\n-Do not discard comments, including during macro expansion.  This is\n-like @option{-C}, except that comments contained within macros are\n-also passed through to the output file where the macro is expanded.\n-\n-In addition to the side effects of the @option{-C} option, the\n-@option{-CC} option causes all C++-style comments inside a macro\n-to be converted to C-style comments.  This is to prevent later use\n-of that macro from inadvertently commenting out the remainder of\n-the source line.\n-\n-The @option{-CC} option is generally used to support lint comments.\n-\n-@item -P\n-@opindex P\n-Inhibit generation of linemarkers in the output from the preprocessor.\n-This might be useful when running the preprocessor on something that is\n-not C code, and will be sent to a program which might be confused by the\n-linemarkers.\n-@ifset cppmanual\n-@xref{Preprocessor Output}.\n-@end ifset\n-\n-@cindex traditional C language\n-@cindex C language, traditional\n-@item -traditional\n-@itemx -traditional-cpp\n-@opindex traditional-cpp\n-@opindex traditional\n-\n-Try to imitate the behavior of pre-standard C preprocessors, as\n-opposed to ISO C preprocessors.\n-@ifset cppmanual\n-@xref{Traditional Mode}.\n-@end ifset\n-@ifclear cppmanual\n-See the GNU CPP manual for details.\n-@end ifclear\n-\n-Note that GCC does not otherwise attempt to emulate a pre-standard \n-C compiler, and these options are only supported with the @option{-E} \n-switch, or when invoking CPP explicitly.\n-\n-@item -trigraphs\n-@opindex trigraphs\n-Support ISO C trigraphs.\n-These are three-character sequences, all starting with @samp{??}, that\n-are defined by ISO C to stand for single characters.  For example,\n-@samp{??/} stands for @samp{\\}, so @samp{'??/n'} is a character\n-constant for a newline.\n-@ifset cppmanual\n-@xref{Initial processing}.\n-@end ifset\n-\n-@ifclear cppmanual\n-The nine trigraphs and their replacements are\n-\n-@smallexample\n-Trigraph:       ??(  ??)  ??<  ??>  ??=  ??/  ??'  ??!  ??-\n-Replacement:      [    ]    @{    @}    #    \\    ^    |    ~\n-@end smallexample\n-@end ifclear\n-\n-By default, GCC ignores trigraphs, but in\n-standard-conforming modes it converts them.  See the @option{-std} and\n-@option{-ansi} options.\n-\n-@item -remap\n-@opindex remap\n-Enable special code to work around file systems which only permit very\n-short file names, such as MS-DOS@.\n-\n-@item -H\n-@opindex H\n-Print the name of each header file used, in addition to other normal\n-activities.  Each name is indented to show how deep in the\n-@samp{#include} stack it is.  Precompiled header files are also\n-printed, even if they are found to be invalid; an invalid precompiled\n-header file is printed with @samp{...x} and a valid one with @samp{...!} .\n-\n-@item -d@var{letters}\n-@opindex d\n-Says to make debugging dumps during compilation as specified by\n-@var{letters}.  The flags documented here are those relevant to the\n-preprocessor.  Other @var{letters} are interpreted\n-by the compiler proper, or reserved for future versions of GCC, and so\n-are silently ignored.  If you specify @var{letters} whose behavior\n-conflicts, the result is undefined.\n-@ifclear cppmanual\n-@xref{Developer Options}, for more information.\n-@end ifclear\n-\n-@table @gcctabopt\n-@item -dM\n-@opindex dM\n-Instead of the normal output, generate a list of @samp{#define}\n-directives for all the macros defined during the execution of the\n-preprocessor, including predefined macros.  This gives you a way of\n-finding out what is predefined in your version of the preprocessor.\n-Assuming you have no file @file{foo.h}, the command\n-\n-@smallexample\n-touch foo.h; cpp -dM foo.h\n-@end smallexample\n-\n-@noindent\n-shows all the predefined macros.\n-\n-@ifclear cppmanual\n-If you use @option{-dM} without the @option{-E} option, @option{-dM} is\n-interpreted as a synonym for @option{-fdump-rtl-mach}.\n-@xref{Developer Options, , ,gcc}.\n-@end ifclear\n-\n-@item -dD\n-@opindex dD\n-Like @option{-dM} except in two respects: it does @emph{not} include the\n-predefined macros, and it outputs @emph{both} the @samp{#define}\n-directives and the result of preprocessing.  Both kinds of output go to\n-the standard output file.\n-\n-@item -dN\n-@opindex dN\n-Like @option{-dD}, but emit only the macro names, not their expansions.\n-\n-@item -dI\n-@opindex dI\n-Output @samp{#include} directives in addition to the result of\n-preprocessing.\n-\n-@item -dU\n-@opindex dU\n-Like @option{-dD} except that only macros that are expanded, or whose\n-definedness is tested in preprocessor directives, are output; the\n-output is delayed until the use or test of the macro; and\n-@samp{#undef} directives are also output for macros tested but\n-undefined at the time.\n-@end table\n-\n-@item -fdebug-cpp\n-@opindex fdebug-cpp\n-This option is only useful for debugging GCC.  When used from CPP or with\n-@option{-E}, it dumps debugging information about location maps.  Every\n-token in the output is preceded by the dump of the map its location\n-belongs to.\n-\n-When used from GCC without @option{-E}, this option has no effect."}, {"sha": "fa048249369a45bab2f36a19eefa24cffd76340f", "filename": "gcc/doc/cppwarnopts.texi", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fcppwarnopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fcppwarnopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppwarnopts.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,82 +0,0 @@\n-@c Copyright (C) 1999-2022 Free Software Foundation, Inc.\n-@c This is part of the CPP and GCC manuals.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@c ---------------------------------------------------------------------\n-@c Options affecting preprocessor warnings\n-@c ---------------------------------------------------------------------\n-\n-@c If this file is included with the flag ``cppmanual'' set, it is\n-@c formatted for inclusion in the CPP manual; otherwise the main GCC manual.\n-\n-@item -Wcomment\n-@itemx -Wcomments\n-@opindex Wcomment\n-@opindex Wcomments\n-Warn whenever a comment-start sequence @samp{/*} appears in a @samp{/*}\n-comment, or whenever a backslash-newline appears in a @samp{//} comment.\n-This warning is enabled by @option{-Wall}.\n-\n-@item -Wtrigraphs\n-@opindex Wtrigraphs\n-@anchor{Wtrigraphs}\n-Warn if any trigraphs are encountered that might change the meaning of\n-the program.  Trigraphs within comments are not warned about,\n-except those that would form escaped newlines.\n-\n-This option is implied by @option{-Wall}.  If @option{-Wall} is not\n-given, this option is still enabled unless trigraphs are enabled.  To\n-get trigraph conversion without warnings, but get the other\n-@option{-Wall} warnings, use @samp{-trigraphs -Wall -Wno-trigraphs}.\n-\n-@item -Wundef\n-@opindex Wundef\n-@opindex Wno-undef\n-Warn if an undefined identifier is evaluated in an @code{#if} directive.\n-Such identifiers are replaced with zero.\n-\n-@item -Wexpansion-to-defined\n-@opindex Wexpansion-to-defined\n-Warn whenever @samp{defined} is encountered in the expansion of a macro\n-(including the case where the macro is expanded by an @samp{#if} directive).\n-Such usage is not portable.\n-This warning is also enabled by @option{-Wpedantic} and @option{-Wextra}.\n-\n-@item -Wunused-macros\n-@opindex Wunused-macros\n-Warn about macros defined in the main file that are unused.  A macro\n-is @dfn{used} if it is expanded or tested for existence at least once.\n-The preprocessor also warns if the macro has not been used at the\n-time it is redefined or undefined.\n-\n-Built-in macros, macros defined on the command line, and macros\n-defined in include files are not warned about.\n-\n-@emph{Note:} If a macro is actually used, but only used in skipped\n-conditional blocks, then the preprocessor reports it as unused.  To avoid the\n-warning in such a case, you might improve the scope of the macro's\n-definition by, for example, moving it into the first skipped block.\n-Alternatively, you could provide a dummy use with something like:\n-\n-@smallexample\n-#if defined the_macro_causing_the_warning\n-#endif\n-@end smallexample\n-\n-@item -Wno-endif-labels\n-@opindex Wno-endif-labels\n-@opindex Wendif-labels\n-Do not warn whenever an @code{#else} or an @code{#endif} are followed by text.\n-This sometimes happens in older programs with code of the form\n-\n-@smallexample\n-#if FOO\n-@dots{}\n-#else FOO\n-@dots{}\n-#endif FOO\n-@end smallexample\n-\n-@noindent\n-The second and third @code{FOO} should be in comments.\n-This warning is on by default."}, {"sha": "8da0db9770dc9f79e2f2c4905385c3a82582c18d", "filename": "gcc/doc/extend.texi", "status": "removed", "additions": 0, "deletions": 25550, "changes": 25550, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "d2d98c794de6794e3c454bf4e053621a996d8090", "filename": "gcc/doc/fragments.texi", "status": "removed", "additions": 0, "deletions": 273, "changes": 273, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Ffragments.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Ffragments.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ffragments.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,273 +0,0 @@\n-@c Copyright (C) 1988-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@node Fragments\n-@chapter Makefile Fragments\n-@cindex makefile fragment\n-\n-When you configure GCC using the @file{configure} script, it will\n-construct the file @file{Makefile} from the template file\n-@file{Makefile.in}.  When it does this, it can incorporate makefile\n-fragments from the @file{config} directory.  These are used to set\n-Makefile parameters that are not amenable to being calculated by\n-autoconf.  The list of fragments to incorporate is set by\n-@file{config.gcc} (and occasionally @file{config.build}\n-and @file{config.host}); @xref{System Config}.\n-\n-Fragments are named either @file{t-@var{target}} or @file{x-@var{host}},\n-depending on whether they are relevant to configuring GCC to produce\n-code for a particular target, or to configuring GCC to run on a\n-particular host.  Here @var{target} and @var{host} are mnemonics\n-which usually have some relationship to the canonical system name, but\n-no formal connection.\n-\n-If these files do not exist, it means nothing needs to be added for a\n-given target or host.  Most targets need a few @file{t-@var{target}}\n-fragments, but needing @file{x-@var{host}} fragments is rare.\n-\n-@menu\n-* Target Fragment:: Writing @file{t-@var{target}} files.\n-* Host Fragment::   Writing @file{x-@var{host}} files.\n-@end menu\n-\n-@node Target Fragment\n-@section Target Makefile Fragments\n-@cindex target makefile fragment\n-@cindex @file{t-@var{target}}\n-\n-Target makefile fragments can set these Makefile variables.\n-\n-@table @code\n-@findex LIBGCC2_CFLAGS\n-@item LIBGCC2_CFLAGS\n-Compiler flags to use when compiling @file{libgcc2.c}.\n-\n-@findex LIB2FUNCS_EXTRA\n-@item LIB2FUNCS_EXTRA\n-A list of source file names to be compiled or assembled and inserted\n-into @file{libgcc.a}.\n-\n-@findex CRTSTUFF_T_CFLAGS\n-@item CRTSTUFF_T_CFLAGS\n-Special flags used when compiling @file{crtstuff.c}.\n-@xref{Initialization}.\n-\n-@findex CRTSTUFF_T_CFLAGS_S\n-@item CRTSTUFF_T_CFLAGS_S\n-Special flags used when compiling @file{crtstuff.c} for shared\n-linking.  Used if you use @file{crtbeginS.o} and @file{crtendS.o}\n-in @code{EXTRA-PARTS}.\n-@xref{Initialization}.\n-\n-@findex MULTILIB_OPTIONS\n-@item MULTILIB_OPTIONS\n-For some targets, invoking GCC in different ways produces objects\n-that cannot be linked together.  For example, for some targets GCC\n-produces both big and little endian code.  For these targets, you must\n-arrange for multiple versions of @file{libgcc.a} to be compiled, one for\n-each set of incompatible options.  When GCC invokes the linker, it\n-arranges to link in the right version of @file{libgcc.a}, based on\n-the command line options used.\n-\n-The @code{MULTILIB_OPTIONS} macro lists the set of options for which\n-special versions of @file{libgcc.a} must be built.  Write options that\n-are mutually incompatible side by side, separated by a slash.  Write\n-options that may be used together separated by a space.  The build\n-procedure will build all combinations of compatible options.\n-\n-For example, if you set @code{MULTILIB_OPTIONS} to @samp{m68000/m68020\n-msoft-float}, @file{Makefile} will build special versions of\n-@file{libgcc.a} using the following sets of options:  @option{-m68000},\n-@option{-m68020}, @option{-msoft-float}, @samp{-m68000 -msoft-float}, and\n-@samp{-m68020 -msoft-float}.\n-\n-@findex MULTILIB_DIRNAMES\n-@item MULTILIB_DIRNAMES\n-If @code{MULTILIB_OPTIONS} is used, this variable specifies the\n-directory names that should be used to hold the various libraries.\n-Write one element in @code{MULTILIB_DIRNAMES} for each element in\n-@code{MULTILIB_OPTIONS}.  If @code{MULTILIB_DIRNAMES} is not used, the\n-default value will be @code{MULTILIB_OPTIONS}, with all slashes treated\n-as spaces.\n-\n-@code{MULTILIB_DIRNAMES} describes the multilib directories using GCC\n-conventions and is applied to directories that are part of the GCC\n-installation.  When multilib-enabled, the compiler will add a\n-subdirectory of the form @var{prefix}/@var{multilib} before each\n-directory in the search path for libraries and crt files.\n-\n-For example, if @code{MULTILIB_OPTIONS} is set to @samp{m68000/m68020\n-msoft-float}, then the default value of @code{MULTILIB_DIRNAMES} is\n-@samp{m68000 m68020 msoft-float}.  You may specify a different value if\n-you desire a different set of directory names.\n-\n-@findex MULTILIB_MATCHES\n-@item MULTILIB_MATCHES\n-Sometimes the same option may be written in two different ways.  If an\n-option is listed in @code{MULTILIB_OPTIONS}, GCC needs to know about\n-any synonyms.  In that case, set @code{MULTILIB_MATCHES} to a list of\n-items of the form @samp{option=option} to describe all relevant\n-synonyms.  For example, @samp{m68000=mc68000 m68020=mc68020}.\n-\n-@findex MULTILIB_EXCEPTIONS\n-@item MULTILIB_EXCEPTIONS\n-Sometimes when there are multiple sets of @code{MULTILIB_OPTIONS} being\n-specified, there are combinations that should not be built.  In that\n-case, set @code{MULTILIB_EXCEPTIONS} to be all of the switch exceptions\n-in shell case syntax that should not be built.\n-\n-For example the ARM processor cannot execute both hardware floating\n-point instructions and the reduced size THUMB instructions at the same\n-time, so there is no need to build libraries with both of these\n-options enabled.  Therefore @code{MULTILIB_EXCEPTIONS} is set to:\n-@smallexample\n-*mthumb/*mhard-float*\n-@end smallexample\n-\n-@findex MULTILIB_REQUIRED\n-@item MULTILIB_REQUIRED\n-Sometimes when there are only a few combinations are required, it would\n-be a big effort to come up with a @code{MULTILIB_EXCEPTIONS} list to\n-cover all undesired ones.  In such a case, just listing all the required\n-combinations in @code{MULTILIB_REQUIRED} would be more straightforward.\n-\n-The way to specify the entries in @code{MULTILIB_REQUIRED} is same with\n-the way used for @code{MULTILIB_EXCEPTIONS}, only this time what are\n-required will be specified.  Suppose there are multiple sets of\n-@code{MULTILIB_OPTIONS} and only two combinations are required, one\n-for ARMv7-M and one for ARMv7-R with hard floating-point ABI and FPU, the\n-@code{MULTILIB_REQUIRED} can be set to:\n-@smallexample\n-@code{MULTILIB_REQUIRED} =  mthumb/march=armv7-m\n-@code{MULTILIB_REQUIRED} += march=armv7-r/mfloat-abi=hard/mfpu=vfpv3-d16\n-@end smallexample\n-\n-The @code{MULTILIB_REQUIRED} can be used together with\n-@code{MULTILIB_EXCEPTIONS}.  The option combinations generated from\n-@code{MULTILIB_OPTIONS} will be filtered by @code{MULTILIB_EXCEPTIONS}\n-and then by @code{MULTILIB_REQUIRED}.\n-\n-@findex MULTILIB_REUSE\n-@item MULTILIB_REUSE\n-Sometimes it is desirable to reuse one existing multilib for different\n-sets of options.  Such kind of reuse can minimize the number of multilib\n-variants.  And for some targets it is better to reuse an existing multilib\n-than to fall back to default multilib when there is no corresponding multilib.\n-This can be done by adding reuse rules to @code{MULTILIB_REUSE}.\n-\n-A reuse rule is comprised of two parts connected by equality sign.  The left\n-part is the option set used to build multilib and the right part is the option\n-set that will reuse this multilib.  Both parts should only use options\n-specified in @code{MULTILIB_OPTIONS} and the equality signs found in options\n-name should be replaced with periods.  An explicit period in the rule can be\n-escaped by preceding it with a backslash.  The order of options in the left\n-part matters and should be same with those specified in\n-@code{MULTILIB_REQUIRED} or aligned with the order in @code{MULTILIB_OPTIONS}.\n-There is no such limitation for options in the right part as we don't build\n-multilib from them.\n-\n-@code{MULTILIB_REUSE} is different from @code{MULTILIB_MATCHES} in that it\n-sets up relations between two option sets rather than two options.  Here is an\n-example to demo how we reuse libraries built in Thumb mode for applications built\n-in ARM mode:\n-@smallexample\n-@code{MULTILIB_REUSE} = mthumb/march.armv7-r=marm/march.armv7-r\n-@end smallexample\n-\n-Before the advent of @code{MULTILIB_REUSE}, GCC select multilib by comparing command\n-line options with options used to build multilib.  The @code{MULTILIB_REUSE} is\n-complementary to that way.  Only when the original comparison matches nothing it will\n-work to see if it is OK to reuse some existing multilib.\n-\n-@findex MULTILIB_EXTRA_OPTS\n-@item MULTILIB_EXTRA_OPTS\n-Sometimes it is desirable that when building multiple versions of\n-@file{libgcc.a} certain options should always be passed on to the\n-compiler.  In that case, set @code{MULTILIB_EXTRA_OPTS} to be the list\n-of options to be used for all builds.  If you set this, you should\n-probably set @code{CRTSTUFF_T_CFLAGS} to a dash followed by it.\n-\n-@findex MULTILIB_OSDIRNAMES\n-@item MULTILIB_OSDIRNAMES\n-If @code{MULTILIB_OPTIONS} is used, this variable specifies \n-a list of subdirectory names, that are used to modify the search\n-path depending on the chosen multilib.  Unlike @code{MULTILIB_DIRNAMES},\n-@code{MULTILIB_OSDIRNAMES} describes the multilib directories using\n-operating systems conventions, and is applied to the directories such as\n-@code{lib} or those in the @env{LIBRARY_PATH} environment variable.\n-The format is either the same as of\n-@code{MULTILIB_DIRNAMES}, or a set of mappings.  When it is the same\n-as @code{MULTILIB_DIRNAMES}, it describes the multilib directories\n-using operating system conventions, rather than GCC conventions.  When it is a set\n-of mappings of the form @var{gccdir}=@var{osdir}, the left side gives\n-the GCC convention and the right gives the equivalent OS defined\n-location.  If the @var{osdir} part begins with a @samp{!},\n-GCC will not search in the non-multilib directory and use\n-exclusively the multilib directory.  Otherwise, the compiler will\n-examine the search path for libraries and crt files twice; the first\n-time it will add @var{multilib} to each directory in the search path,\n-the second it will not.\n-\n-For configurations that support both multilib and multiarch,\n-@code{MULTILIB_OSDIRNAMES} also encodes the multiarch name, thus\n-subsuming @code{MULTIARCH_DIRNAME}.  The multiarch name is appended to\n-each directory name, separated by a colon (e.g.@:\n-@samp{../lib32:i386-linux-gnu}).\n-\n-Each multiarch subdirectory will be searched before the corresponding OS\n-multilib directory, for example @samp{/lib/i386-linux-gnu} before\n-@samp{/lib/../lib32}.  The multiarch name will also be used to modify the\n-system header search path, as explained for @code{MULTIARCH_DIRNAME}.\n-\n-@findex MULTIARCH_DIRNAME\n-@item MULTIARCH_DIRNAME\n-This variable specifies the multiarch name for configurations that are\n-multiarch-enabled but not multilibbed configurations.\n-\n-The multiarch name is used to augment the search path for libraries, crt\n-files and system header files with additional locations.  The compiler\n-will add a multiarch subdirectory of the form\n-@var{prefix}/@var{multiarch} before each directory in the library and\n-crt search path.  It will also add two directories\n-@code{LOCAL_INCLUDE_DIR}/@var{multiarch} and\n-@code{NATIVE_SYSTEM_HEADER_DIR}/@var{multiarch}) to the system header\n-search path, respectively before @code{LOCAL_INCLUDE_DIR} and\n-@code{NATIVE_SYSTEM_HEADER_DIR}.\n-\n-@code{MULTIARCH_DIRNAME} is not used for configurations that support\n-both multilib and multiarch.  In that case, multiarch names are encoded\n-in @code{MULTILIB_OSDIRNAMES} instead.\n-\n-More documentation about multiarch can be found at\n-@uref{https://wiki.debian.org/Multiarch}.\n-\n-@findex SPECS\n-@item SPECS\n-Unfortunately, setting @code{MULTILIB_EXTRA_OPTS} is not enough, since\n-it does not affect the build of target libraries, at least not the\n-build of the default multilib.  One possible work-around is to use\n-@code{DRIVER_SELF_SPECS} to bring options from the @file{specs} file\n-as if they had been passed in the compiler driver command line.\n-However, you don't want to be adding these options after the toolchain\n-is installed, so you can instead tweak the @file{specs} file that will\n-be used during the toolchain build, while you still install the\n-original, built-in @file{specs}.  The trick is to set @code{SPECS} to\n-some other filename (say @file{specs.install}), that will then be\n-created out of the built-in specs, and introduce a @file{Makefile}\n-rule to generate the @file{specs} file that's going to be used at\n-build time out of your @file{specs.install}.\n-\n-@item T_CFLAGS\n-These are extra flags to pass to the C compiler.  They are used both\n-when building GCC, and when compiling things with the just-built GCC@.\n-This variable is deprecated and should not be used.\n-@end table\n-\n-@node Host Fragment\n-@section Host Makefile Fragments\n-@cindex host makefile fragment\n-@cindex @file{x-@var{host}}\n-\n-The use of @file{x-@var{host}} fragments is discouraged.  You should only\n-use it for makefile dependencies."}, {"sha": "e1b5b6153fcbcf6ebe350ab65fe0bb6898628165", "filename": "gcc/doc/frontends.texi", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Ffrontends.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Ffrontends.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ffrontends.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,61 +0,0 @@\n-@c Copyright (C) 1988-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@node G++ and GCC\n-@chapter Programming Languages Supported by GCC\n-\n-@cindex GCC\n-@cindex GNU Compiler Collection\n-@cindex GNU C Compiler\n-@cindex Ada\n-@cindex D\n-@cindex Fortran\n-@cindex Go\n-@cindex Objective-C\n-@cindex Objective-C++\n-GCC stands for ``GNU Compiler Collection''.  GCC is an integrated\n-distribution of compilers for several major programming languages.  These\n-languages currently include C, C++, Objective-C, Objective-C++,\n-Fortran, Ada, D, and Go.\n-\n-The abbreviation @dfn{GCC} has multiple meanings in common use.  The\n-current official meaning is ``GNU Compiler Collection'', which refers\n-generically to the complete suite of tools.  The name historically stood\n-for ``GNU C Compiler'', and this usage is still common when the emphasis\n-is on compiling C programs.  Finally, the name is also used when speaking\n-of the @dfn{language-independent} component of GCC: code shared among the\n-compilers for all supported languages.\n-\n-The language-independent component of GCC includes the majority of the\n-optimizers, as well as the ``back ends'' that generate machine code for\n-various processors.\n-\n-@cindex COBOL\n-@cindex Mercury\n-The part of a compiler that is specific to a particular language is\n-called the ``front end''.  In addition to the front ends that are\n-integrated components of GCC, there are several other front ends that\n-are maintained separately.  These support languages such as\n-Mercury, and COBOL@.  To use these, they must be built together with\n-GCC proper.\n-\n-@cindex C++\n-@cindex G++\n-@cindex Ada\n-@cindex GNAT\n-Most of the compilers for languages other than C have their own names.\n-The C++ compiler is G++, the Ada compiler is GNAT, and so on.  When we\n-talk about compiling one of those languages, we might refer to that\n-compiler by its own name, or as GCC@.  Either is correct.\n-\n-@cindex compiler compared to C++ preprocessor\n-@cindex intermediate C version, nonexistent\n-@cindex C intermediate output, nonexistent\n-Historically, compilers for many languages, including C++ and Fortran,\n-have been implemented as ``preprocessors'' which emit another high\n-level language such as C@.  None of the compilers included in GCC are\n-implemented this way; they all generate machine code directly.  This\n-sort of preprocessor should not be confused with the @dfn{C\n-preprocessor}, which is an integral feature of the C, C++, Objective-C\n-and Objective-C++ languages."}, {"sha": "21bea70e2d80a7de196620e667f44a640d555647", "filename": "gcc/doc/gcc.texi", "status": "removed", "additions": 0, "deletions": 219, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,219 +0,0 @@\n-\\input texinfo  @c -*-texinfo-*-\n-@c %**start of header\n-@setfilename gcc.info\n-@c INTERNALS is used by md.texi to determine whether to include the\n-@c whole of that file, in the internals manual, or only the part\n-@c dealing with constraints, in the user manual.\n-@clear INTERNALS\n-\n-@c NOTE: checks/things to do:\n-@c\n-@c -have bob do a search in all seven files for \"mew\" (ideally --mew,\n-@c  but i may have forgotten the occasional \"--\"..).\n-@c     Just checked... all have `--'!  Bob 22Jul96\n-@c     Use this to search:   grep -n '\\-\\-mew' *.texi\n-@c -item/itemx, text after all (sub/sub)section titles, etc..\n-@c -consider putting the lists of options on pp 17--> etc in columns or\n-@c  some such.\n-@c -overfulls.  do a search for \"mew\" in the files, and you will see\n-@c   overfulls that i noted but could not deal with.\n-@c -have to add text:  beginning of chapter 8\n-\n-@c\n-@c anything else?                       --mew 10feb93\n-\n-@include gcc-common.texi\n-\n-@settitle Using the GNU Compiler Collection (GCC)\n-\n-@c Create a separate index for command line options.\n-@defcodeindex op\n-@c Merge the standard indexes into a single one.\n-@syncodeindex fn cp\n-@syncodeindex vr cp\n-@syncodeindex ky cp\n-@syncodeindex pg cp\n-@syncodeindex tp cp\n-\n-@paragraphindent 1\n-\n-@c %**end of header\n-\n-@copying\n-Copyright @copyright{} 1988-2022 Free Software Foundation, Inc.\n-\n-Permission is granted to copy, distribute and/or modify this document\n-under the terms of the GNU Free Documentation License, Version 1.3 or\n-any later version published by the Free Software Foundation; with the\n-Invariant Sections being ``Funding Free Software'', the Front-Cover\n-Texts being (a) (see below), and with the Back-Cover Texts being (b)\n-(see below).  A copy of the license is included in the section entitled\n-``GNU Free Documentation License''.\n-\n-(a) The FSF's Front-Cover Text is:\n-\n-     A GNU Manual\n-\n-(b) The FSF's Back-Cover Text is:\n-\n-     You have freedom to copy and modify this GNU Manual, like GNU\n-     software.  Copies published by the Free Software Foundation raise\n-     funds for GNU development.\n-@end copying\n-@ifnottex\n-@dircategory Software development\n-@direntry\n-* gcc: (gcc).                  The GNU Compiler Collection.\n-* g++: (gcc).                  The GNU C++ compiler.\n-* gcov: (gcc) Gcov.            @command{gcov}---a test coverage program.\n-* gcov-tool: (gcc) Gcov-tool.  @command{gcov-tool}---an offline gcda profile processing program.\n-* gcov-dump: (gcc) Gcov-dump.  @command{gcov-dump}---an offline gcda and gcno profile dump tool.\n-* lto-dump: (gcc) lto-dump.    @command{lto-dump}---Tool for\n-dumping LTO object files.\n-@end direntry\n-This file documents the use of the GNU compilers.\n-@sp 1\n-@insertcopying\n-@sp 1\n-@end ifnottex\n-\n-@setchapternewpage odd\n-@titlepage\n-@title Using the GNU Compiler Collection\n-@versionsubtitle\n-@author Richard M. Stallman and the @sc{GCC} Developer Community\n-@page\n-@vskip 0pt plus 1filll\n-Published by:\n-@multitable @columnfractions 0.5 0.5\n-@item GNU Press\n-@tab Website: @uref{http://www.gnupress.org}\n-@item a division of the\n-@tab General: @email{press@@gnu.org}\n-@item Free Software Foundation\n-@tab Orders:  @email{sales@@gnu.org}\n-@item 51 Franklin Street, Fifth Floor\n-@tab Tel 617-542-5942\n-@item Boston, MA 02110-1301 USA\n-@tab Fax 617-542-2652\n-@end multitable\n-@sp 2\n-@ifset FSFPRINT\n-@c Update this ISBN when printing a new edition.\n-@acronym{ISBN} 1-882114-39-6\n-\n-Cover art by Gary M. Torrisi.  Cover design by Jonathan Richard.\n-@end ifset\n-@ifclear FSFPRINT\n-Last printed October 2003 for GCC 3.3.1.@*\n-Printed copies are available for $45 each.\n-@end ifclear\n-@sp 1\n-@insertcopying\n-@end titlepage\n-@summarycontents\n-@contents\n-@page\n-\n-@node Top, G++ and GCC\n-@top Introduction\n-@cindex introduction\n-\n-This manual documents how to use the GNU compilers,\n-as well as their features and incompatibilities, and how to report\n-bugs.  It corresponds to the compilers\n-@ifset VERSION_PACKAGE\n-@value{VERSION_PACKAGE}\n-@end ifset\n-version @value{version-GCC}.\n-The internals of the GNU compilers, including how to port them to new\n-targets and some information about how to write front ends for new\n-languages, are documented in a separate manual.  @xref{Top,,\n-Introduction, gccint, GNU Compiler Collection (GCC) Internals}.\n-\n-@menu\n-* G++ and GCC::     You can compile C or C++ programs.\n-* Standards::       Language standards supported by GCC.\n-* Invoking GCC::    Command options supported by @samp{gcc}.\n-* C Implementation:: How GCC implements the ISO C specification.\n-* C++ Implementation:: How GCC implements the ISO C++ specification.\n-* C Extensions::    GNU extensions to the C language family.\n-* C++ Extensions::  GNU extensions to the C++ language.\n-* Objective-C::     GNU Objective-C runtime features.\n-* Compatibility::   Binary Compatibility\n-* Gcov::            @command{gcov}---a test coverage program.\n-* Gcov-tool::       @command{gcov-tool}---an offline gcda profile processing program.\n-* Gcov-dump::       @command{gcov-dump}---an offline gcda and gcno profile dump tool.\n-* lto-dump::        @command{lto-dump}---Tool for dumping LTO\n-object files.\n-* Trouble::         If you have trouble using GCC.\n-* Bugs::            How, why and where to report bugs.\n-* Service::         How To Get Help with GCC\n-* Contributing::    How to contribute to testing and developing GCC.\n-\n-* Funding::         How to help assure funding for free software.\n-* GNU Project::     The GNU Project and GNU/Linux.\n-\n-* Copying::         GNU General Public License says\n-                    how you can copy and share GCC.\n-* GNU Free Documentation License:: How you can copy and share this manual.\n-* Contributors::    People who have contributed to GCC.\n-\n-* Option Index::    Index to command line options.\n-* Keyword Index::   Index of concepts and symbol names.\n-@end menu\n-\n-@include frontends.texi\n-@include standards.texi\n-@include invoke.texi\n-@include implement-c.texi\n-@include implement-cxx.texi\n-@include extend.texi\n-@include objc.texi\n-@include compat.texi\n-@include gcov.texi\n-@include gcov-tool.texi\n-@include gcov-dump.texi\n-@include lto-dump.texi\n-@include trouble.texi\n-@include bugreport.texi\n-@include service.texi\n-@include contribute.texi\n-\n-@include funding.texi\n-@include gnu.texi\n-@include gpl_v3.texi\n-\n-@c ---------------------------------------------------------------------\n-@c GFDL\n-@c ---------------------------------------------------------------------\n-\n-@include fdl.texi\n-\n-@include contrib.texi\n-\n-@c ---------------------------------------------------------------------\n-@c Indexes\n-@c ---------------------------------------------------------------------\n-\n-@node Option Index\n-@unnumbered Option Index\n-\n-GCC's command line options are indexed here without any initial @samp{-}\n-or @samp{--}.  Where an option has both positive and negative forms\n-(such as @option{-f@var{option}} and @option{-fno-@var{option}}),\n-relevant entries in the manual are indexed under the most appropriate\n-form; it may sometimes be useful to look up both forms.\n-\n-@printindex op\n-\n-@node Keyword Index\n-@unnumbered Keyword Index\n-\n-@printindex cp\n-\n-@c ---------------------------------------------------------------------\n-@c Epilogue\n-@c ---------------------------------------------------------------------\n-\n-@bye"}, {"sha": "f6aa065e0a1e05042db32e8e00f8567b67b5651b", "filename": "gcc/doc/gccint.texi", "status": "removed", "additions": 0, "deletions": 206, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fgccint.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fgccint.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgccint.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,206 +0,0 @@\n-\\input texinfo  @c -*-texinfo-*-\n-@c %**start of header\n-@setfilename gccint.info\n-@c INTERNALS is used by md.texi to determine whether to include the\n-@c whole of that file, in the internals manual, or only the part\n-@c dealing with constraints, in the user manual.\n-@set INTERNALS\n-\n-@c See miscellaneous notes in gcc.texi on checks/things to do.\n-\n-@include gcc-common.texi\n-\n-@settitle GNU Compiler Collection (GCC) Internals\n-\n-@c Create a separate index for command line options.\n-@defcodeindex op\n-@c Merge the standard indexes into a single one.\n-@syncodeindex fn cp\n-@syncodeindex vr cp\n-@syncodeindex ky cp\n-@syncodeindex pg cp\n-@syncodeindex tp cp\n-\n-@paragraphindent 1\n-\n-@c %**end of header\n-\n-@copying\n-Copyright @copyright{} 1988-2022 Free Software Foundation, Inc.\n-\n-Permission is granted to copy, distribute and/or modify this document\n-under the terms of the GNU Free Documentation License, Version 1.3 or\n-any later version published by the Free Software Foundation; with the\n-Invariant Sections being ``Funding Free Software'', the Front-Cover\n-Texts being (a) (see below), and with the Back-Cover Texts being (b)\n-(see below).  A copy of the license is included in the section entitled\n-``GNU Free Documentation License''.\n-\n-(a) The FSF's Front-Cover Text is:\n-\n-     A GNU Manual\n-\n-(b) The FSF's Back-Cover Text is:\n-\n-     You have freedom to copy and modify this GNU Manual, like GNU\n-     software.  Copies published by the Free Software Foundation raise\n-     funds for GNU development.\n-@end copying\n-@ifnottex\n-@dircategory Software development\n-@direntry\n-* gccint: (gccint).            Internals of the GNU Compiler Collection.\n-@end direntry\n-This file documents the internals of the GNU compilers.\n-@sp 1\n-@insertcopying\n-@sp 1\n-@end ifnottex\n-\n-@setchapternewpage odd\n-@titlepage\n-@title GNU Compiler Collection Internals\n-@versionsubtitle\n-@author Richard M. Stallman and the @sc{GCC} Developer Community\n-@page\n-@vskip 0pt plus 1filll\n-@insertcopying\n-@end titlepage\n-@summarycontents\n-@contents\n-@page\n-\n-@node Top, Contributing\n-@top Introduction\n-@cindex introduction\n-\n-This manual documents the internals of the GNU compilers, including\n-how to port them to new targets and some information about how to\n-write front ends for new languages.  It corresponds to the compilers\n-@ifset VERSION_PACKAGE\n-@value{VERSION_PACKAGE}\n-@end ifset\n-version @value{version-GCC}.  The use of the GNU compilers is documented in a\n-separate manual.  @xref{Top,, Introduction, gcc, Using the GNU\n-Compiler Collection (GCC)}.\n-\n-This manual is mainly a reference manual rather than a tutorial.  It\n-discusses how to contribute to GCC (@pxref{Contributing}), the\n-characteristics of the machines supported by GCC as hosts and targets\n-(@pxref{Portability}), how GCC relates to the ABIs on such systems\n-(@pxref{Interface}), and the characteristics of the languages for\n-which GCC front ends are written (@pxref{Languages}).  It then\n-describes the GCC source tree structure and build system, some of the\n-interfaces to GCC front ends, and how support for a target system is\n-implemented in GCC@.\n-\n-Additional tutorial information is linked to from\n-@uref{https://gcc.gnu.org/readings.html}.\n-\n-@menu\n-* Contributing::    How to contribute to testing and developing GCC.\n-* Portability::     Goals of GCC's portability features.\n-* Interface::       Function-call interface of GCC output.\n-* Libgcc::          Low-level runtime library used by GCC.\n-* Languages::       Languages for which GCC front ends are written.\n-* Source Tree::     GCC source tree structure and build system.\n-* Testsuites::      GCC testsuites.\n-* Options::         Option specification files.\n-* Passes::          Order of passes, what they do, and what each file is for.\n-* poly_int::        Representation of runtime sizes and offsets.\n-* GENERIC::         Language-independent representation generated by Front Ends\n-* GIMPLE::          Tuple representation used by Tree SSA optimizers\n-* Tree SSA::        Analysis and optimization of GIMPLE\n-* RTL::             Machine-dependent low-level intermediate representation.\n-* Control Flow::    Maintaining and manipulating the control flow graph.\n-* Loop Analysis and Representation:: Analysis and representation of loops\n-* Machine Desc::    How to write machine description instruction patterns.\n-* Target Macros::   How to write the machine description C macros and functions.\n-* Host Config::     Writing the @file{xm-@var{machine}.h} file.\n-* Fragments::       Writing the @file{t-@var{target}} and @file{x-@var{host}} files.\n-* Collect2::        How @code{collect2} works; how it finds @code{ld}.\n-* Header Dirs::     Understanding the standard header file directories.\n-* Type Information:: GCC's memory management; generating type information.\n-* Plugins::         Extending the compiler with plugins.\n-* LTO::             Using Link-Time Optimization.\n-\n-* Match and Simplify:: How to write expression simplification patterns for GIMPLE and GENERIC\n-* Static Analyzer:: Working with the static analyzer.\n-* User Experience Guidelines:: Guidelines for implementing diagnostics and options.\n-* Funding::         How to help assure funding for free software.\n-* GNU Project::     The GNU Project and GNU/Linux.\n-\n-* Copying::         GNU General Public License says\n-                    how you can copy and share GCC.\n-* GNU Free Documentation License:: How you can copy and share this manual.\n-* Contributors::    People who have contributed to GCC.\n-\n-* Option Index::    Index to command line options.\n-* Concept Index::   Index of concepts and symbol names.\n-@end menu\n-\n-@include contribute.texi\n-@include portability.texi\n-@include interface.texi\n-@include libgcc.texi\n-@include languages.texi\n-@include sourcebuild.texi\n-@include options.texi\n-@include passes.texi\n-@include poly-int.texi\n-@include generic.texi\n-@include gimple.texi\n-@include tree-ssa.texi\n-@include rtl.texi\n-@include cfg.texi\n-@include loop.texi\n-@include md.texi\n-@include tm.texi\n-@include hostconfig.texi\n-@include fragments.texi\n-@include collect2.texi\n-@include headerdirs.texi\n-@include gty.texi\n-@include plugins.texi\n-@include lto.texi\n-@include match-and-simplify.texi\n-@include analyzer.texi\n-@include ux.texi\n-\n-@include funding.texi\n-@include gnu.texi\n-@include gpl_v3.texi\n-\n-@c ---------------------------------------------------------------------\n-@c GFDL\n-@c ---------------------------------------------------------------------\n-\n-@include fdl.texi\n-\n-@include contrib.texi\n-\n-@c ---------------------------------------------------------------------\n-@c Indexes\n-@c ---------------------------------------------------------------------\n-\n-@node Option Index\n-@unnumbered Option Index\n-\n-GCC's command line options are indexed here without any initial @samp{-}\n-or @samp{--}.  Where an option has both positive and negative forms\n-(such as @option{-f@var{option}} and @option{-fno-@var{option}}),\n-relevant entries in the manual are indexed under the most appropriate\n-form; it may sometimes be useful to look up both forms.\n-\n-@printindex op\n-\n-@node Concept Index\n-@unnumbered Concept Index\n-\n-@printindex cp\n-\n-@c ---------------------------------------------------------------------\n-@c Epilogue\n-@c ---------------------------------------------------------------------\n-\n-@bye"}, {"sha": "0491ab17bc1f6e8df648a94e99a1a98aadd02c79", "filename": "gcc/doc/gcov-dump.texi", "status": "removed", "additions": 0, "deletions": 99, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fgcov-dump.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fgcov-dump.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcov-dump.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,99 +0,0 @@\n-@c Copyright (C) 2017-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@ignore\n-@c man begin COPYRIGHT\n-Copyright @copyright{} 2017-2022 Free Software Foundation, Inc.\n-\n-Permission is granted to copy, distribute and/or modify this document\n-under the terms of the GNU Free Documentation License, Version 1.3 or\n-any later version published by the Free Software Foundation; with the\n-Invariant Sections being ``GNU General Public License'' and ``Funding\n-Free Software'', the Front-Cover texts being (a) (see below), and with\n-the Back-Cover Texts being (b) (see below).  A copy of the license is\n-included in the gfdl(7) man page.\n-\n-(a) The FSF's Front-Cover Text is:\n-\n-     A GNU Manual\n-\n-(b) The FSF's Back-Cover Text is:\n-\n-     You have freedom to copy and modify this GNU Manual, like GNU\n-     software.  Copies published by the Free Software Foundation raise\n-     funds for GNU development.\n-@c man end\n-@c Set file name and title for the man page.\n-@setfilename gcov-dump\n-@settitle offline gcda and gcno profile dump tool\n-@end ignore\n-\n-@node Gcov-dump\n-@chapter @command{gcov-dump}---an Offline Gcda and Gcno Profile Dump Tool\n-\n-@menu\n-* Gcov-dump Intro::             Introduction to gcov-dump.\n-* Invoking Gcov-dump::          How to use gcov-dump.\n-@end menu\n-\n-@node Gcov-dump Intro\n-@section Introduction to @command{gcov-dump}\n-@c man begin DESCRIPTION\n-\n-@command{gcov-dump} is a tool you can use in conjunction with GCC to\n-dump content of gcda and gcno profile files offline.\n-\n-@c man end\n-\n-@node Invoking Gcov-dump\n-@section Invoking @command{gcov-dump}\n-\n-@smallexample\n-Usage: gcov-dump @r{[}@var{OPTION}@r{]} ... @var{gcovfiles}\n-@end smallexample\n-\n-@command{gcov-dump} accepts the following options:\n-\n-@ignore\n-@c man begin SYNOPSIS\n-gcov-dump [@option{-v}|@option{--version}]\n-     [@option{-h}|@option{--help}]\n-     [@option{-l}|@option{--long}]\n-     [@option{-p}|@option{--positions}]\n-     [@option{-r}|@option{--raw}]\n-     [@option{-s}|@option{--stable}]\n-     @var{gcovfiles}\n-@c man end\n-@end ignore\n-\n-@c man begin OPTIONS\n-@table @gcctabopt\n-@item -h\n-@itemx --help\n-Display help about using @command{gcov-dump} (on the standard output), and\n-exit without doing any further processing.\n-\n-@item -l\n-@itemx --long\n-Dump content of records.\n-\n-@item -p\n-@itemx --positions\n-Dump positions of records.\n-\n-@item -r\n-@itemx --raw\n-Print content records in raw format.\n-\n-@item -s\n-@itemx --stable\n-Print content in stable format usable for comparison.\n-\n-@item -v\n-@itemx --version\n-Display the @command{gcov-dump} version number (on the standard output),\n-and exit without doing any further processing.\n-@end table\n-\n-@c man end"}, {"sha": "77150836acc4d7ee5d2256d0746eb73c9302de26", "filename": "gcc/doc/gcov-tool.texi", "status": "removed", "additions": 0, "deletions": 267, "changes": 267, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fgcov-tool.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fgcov-tool.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcov-tool.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,267 +0,0 @@\n-@c Copyright (C) 2014-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@ignore\n-@c man begin COPYRIGHT\n-Copyright @copyright{} 2014-2022 Free Software Foundation, Inc.\n-\n-Permission is granted to copy, distribute and/or modify this document\n-under the terms of the GNU Free Documentation License, Version 1.3 or\n-any later version published by the Free Software Foundation; with the\n-Invariant Sections being ``GNU General Public License'' and ``Funding\n-Free Software'', the Front-Cover texts being (a) (see below), and with\n-the Back-Cover Texts being (b) (see below).  A copy of the license is\n-included in the gfdl(7) man page.\n-\n-(a) The FSF's Front-Cover Text is:\n-\n-     A GNU Manual\n-\n-(b) The FSF's Back-Cover Text is:\n-\n-     You have freedom to copy and modify this GNU Manual, like GNU\n-     software.  Copies published by the Free Software Foundation raise\n-     funds for GNU development.\n-@c man end\n-@c Set file name and title for the man page.\n-@setfilename gcov-tool\n-@settitle offline gcda profile processing tool\n-@end ignore\n-\n-@node Gcov-tool\n-@chapter @command{gcov-tool}---an Offline Gcda Profile Processing Tool\n-\n-@command{gcov-tool} is a tool you can use in conjunction with GCC to\n-manipulate or process gcda profile files offline.\n-\n-@menu\n-* Gcov-tool Intro::             Introduction to gcov-tool.\n-* Invoking Gcov-tool::          How to use gcov-tool.\n-@end menu\n-\n-@node Gcov-tool Intro\n-@section Introduction to @command{gcov-tool}\n-@c man begin DESCRIPTION\n-\n-@command{gcov-tool} is an offline tool to process gcc's gcda profile files.\n-\n-Current gcov-tool supports the following functionalities:\n-\n-@itemize @bullet\n-@item\n-merge two sets of profiles with weights.\n-\n-@item\n-read a stream of profiles with associated filenames and merge it with a set of\n-profiles with weights.\n-\n-@item\n-read one set of profile and rewrite profile contents. One can scale or\n-normalize the count values.\n-@end itemize\n-\n-Examples of the use cases for this tool are:\n-@itemize @bullet\n-@item\n-Collect the profiles for different set of inputs, and use this tool to merge\n-them. One can specify the weight to factor in the relative importance of\n-each input.\n-\n-@item\n-Collect profiles from target systems without a filesystem (freestanding\n-environments).  Merge the collected profiles with associated profiles\n-present on the host system.  One can specify the weight to factor in the\n-relative importance of each input.\n-\n-@item\n-Rewrite the profile after removing a subset of the gcda files, while maintaining\n-the consistency of the summary and the histogram.\n-\n-@item\n-It can also be used to debug or libgcov code as the tools shares the majority\n-code as the runtime library.\n-@end itemize\n-\n-Note that for the merging operation, this profile generated offline may\n-contain slight different values from the online merged profile. Here are\n-a list of typical differences:\n-\n-@itemize @bullet\n-@item\n-histogram difference: This offline tool recomputes the histogram after merging\n-the counters. The resulting histogram, therefore, is precise. The online\n-merging does not have this capability -- the histogram is merged from two\n-histograms and the result is an approximation.\n-\n-@item\n-summary checksum difference: Summary checksum uses a CRC32 operation. The value\n-depends on the link list order of gcov-info objects. This order is different in\n-gcov-tool from that in the online merge. It's expected to have different\n-summary checksums. It does not really matter as the compiler does not use this\n-checksum anywhere.\n-\n-@item\n-value profile counter values difference: Some counter values for value profile\n-are runtime dependent, like heap addresses. It's normal to see some difference\n-in these kind of counters.\n-@end itemize\n-\n-@c man end\n-\n-@node Invoking Gcov-tool\n-@section Invoking @command{gcov-tool}\n-\n-@smallexample\n-gcov-tool @r{[}@var{global-options}@r{]} SUB_COMMAND @r{[}@var{sub_command-options}@r{]} @var{profile_dir}\n-@end smallexample\n-\n-@command{gcov-tool} accepts the following options:\n-\n-@ignore\n-@c man begin SYNOPSIS\n-gcov-tool [@option{-v}|@option{--version}] [@option{-h}|@option{--help}]\n-\n-gcov-tool merge [merge-options] @var{directory1} @var{directory2}\n-     [@option{-o}|@option{--output} @var{directory}]\n-     [@option{-v}|@option{--verbose}]\n-     [@option{-w}|@option{--weight} @var{w1,w2}]\n-\n-gcov-tool merge-stream [merge-stream-options] [@var{file}]\n-     [@option{-v}|@option{--verbose}]\n-     [@option{-w}|@option{--weight} @var{w1,w2}]\n-\n-gcov-tool rewrite [rewrite-options] @var{directory}\n-     [@option{-n}|@option{--normalize} @var{long_long_value}]\n-     [@option{-o}|@option{--output} @var{directory}]\n-     [@option{-s}|@option{--scale} @var{float_or_simple-frac_value}]\n-     [@option{-v}|@option{--verbose}]\n-\n-gcov-tool overlap [overlap-options] @var{directory1} @var{directory2}\n-     [@option{-f}|@option{--function}]\n-     [@option{-F}|@option{--fullname}]\n-     [@option{-h}|@option{--hotonly}]\n-     [@option{-o}|@option{--object}]\n-     [@option{-t}|@option{--hot_threshold}] @var{float}\n-     [@option{-v}|@option{--verbose}]\n-\n-@c man end\n-@c man begin SEEALSO\n-gpl(7), gfdl(7), fsf-funding(7), gcc(1), gcov(1) and the Info entry for\n-@file{gcc}.\n-@c man end\n-@end ignore\n-\n-@c man begin OPTIONS\n-@table @gcctabopt\n-@item -h\n-@itemx --help\n-Display help about using @command{gcov-tool} (on the standard output), and\n-exit without doing any further processing.\n-\n-@item -v\n-@itemx --version\n-Display the @command{gcov-tool} version number (on the standard output),\n-and exit without doing any further processing.\n-\n-@item merge\n-Merge two profile directories.\n-@table @gcctabopt\n-\n-@item -o @var{directory}\n-@itemx --output @var{directory}\n-Set the output profile directory. Default output directory name is\n-@var{merged_profile}.\n-\n-@item -v\n-@itemx --verbose\n-Set the verbose mode.\n-\n-@item -w @var{w1},@var{w2}\n-@itemx --weight @var{w1},@var{w2}\n-Set the merge weights of the @var{directory1} and @var{directory2},\n-respectively. The default weights are 1 for both.\n-@end table\n-\n-@item merge-stream\n-Collect profiles with associated filenames from a @emph{gcfn} and @emph{gcda}\n-data stream.  Read the stream from the file specified by @var{file} or from\n-@file{stdin}.  Merge the profiles with associated profiles in the host\n-filesystem.  Apply the optional weights while merging profiles.\n-\n-For the generation of a @emph{gcfn} and @emph{gcda} data stream on the target\n-system, please have a look at the @code{__gcov_filename_to_gcfn()} and\n-@code{__gcov_info_to_gcda()} functions declared in @code{#include <gcov.h>}.\n-@table @gcctabopt\n-\n-@item -v\n-@itemx --verbose\n-Set the verbose mode.\n-\n-@item -w @var{w1},@var{w2}\n-@itemx --weight @var{w1},@var{w2}\n-Set the merge weights of the profiles from the @emph{gcfn} and @emph{gcda} data\n-stream and the associated profiles in the host filesystem, respectively.  The\n-default weights are 1 for both.\n-@end table\n-\n-@item rewrite\n-Read the specified profile directory and rewrite to a new directory.\n-@table @gcctabopt\n-\n-@item -n @var{long_long_value}\n-@itemx --normalize <long_long_value>\n-Normalize the profile. The specified value is the max counter value\n-in the new profile.\n-\n-@item -o @var{directory}\n-@itemx --output @var{directory}\n-Set the output profile directory. Default output name is @var{rewrite_profile}.\n-\n-@item -s @var{float_or_simple-frac_value}\n-@itemx --scale @var{float_or_simple-frac_value}\n-Scale the profile counters. The specified value can be in floating point value,\n-or simple fraction value form, such 1, 2, 2/3, and 5/3.\n-\n-@item -v\n-@itemx --verbose\n-Set the verbose mode.\n-@end table\n-\n-@item overlap\n-Compute the overlap score between the two specified profile directories.\n-The overlap score is computed based on the arc profiles. It is defined as\n-the sum of min (p1_counter[i] / p1_sum_all, p2_counter[i] / p2_sum_all),\n-for all arc counter i, where p1_counter[i] and p2_counter[i] are two\n-matched counters and p1_sum_all and p2_sum_all are the sum of counter\n-values in profile 1 and profile 2, respectively.\n-\n-@table @gcctabopt\n-@item -f\n-@itemx --function\n-Print function level overlap score.\n-\n-@item -F\n-@itemx --fullname\n-Print full gcda filename.\n-\n-@item -h\n-@itemx --hotonly\n-Only print info for hot objects/functions.\n-\n-@item -o\n-@itemx --object\n-Print object level overlap score.\n-\n-@item -t @var{float}\n-@itemx --hot_threshold <float>\n-Set the threshold for hot counter value.\n-\n-@item -v\n-@itemx --verbose\n-Set the verbose mode.\n-@end table\n-\n-@end table\n-\n-@c man end"}, {"sha": "a1f7d26e610cc38e8238ae1a14362d0a4deeba84", "filename": "gcc/doc/gcov.texi", "status": "removed", "additions": 0, "deletions": 1362, "changes": 1362, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fgcov.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fgcov.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcov.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,1362 +0,0 @@\n-@c Copyright (C) 1996-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@ignore\n-@c man begin COPYRIGHT\n-Copyright @copyright{} 1996-2022 Free Software Foundation, Inc.\n-\n-Permission is granted to copy, distribute and/or modify this document\n-under the terms of the GNU Free Documentation License, Version 1.3 or\n-any later version published by the Free Software Foundation; with the\n-Invariant Sections being ``GNU General Public License'' and ``Funding\n-Free Software'', the Front-Cover texts being (a) (see below), and with\n-the Back-Cover Texts being (b) (see below).  A copy of the license is\n-included in the gfdl(7) man page.\n-\n-(a) The FSF's Front-Cover Text is:\n-\n-     A GNU Manual\n-\n-(b) The FSF's Back-Cover Text is:\n-\n-     You have freedom to copy and modify this GNU Manual, like GNU\n-     software.  Copies published by the Free Software Foundation raise\n-     funds for GNU development.\n-@c man end\n-@c Set file name and title for the man page.\n-@setfilename gcov\n-@settitle coverage testing tool\n-@end ignore\n-\n-@node Gcov\n-@chapter @command{gcov}---a Test Coverage Program\n-\n-@command{gcov} is a tool you can use in conjunction with GCC to\n-test code coverage in your programs.\n-\n-@menu\n-* Gcov Intro::                  Introduction to gcov.\n-* Invoking Gcov::               How to use gcov.\n-* Gcov and Optimization::       Using gcov with GCC optimization.\n-* Gcov Data Files::             The files used by gcov.\n-* Cross-profiling::             Data file relocation.\n-* Freestanding Environments::   How to use profiling and test\n-                                coverage in freestanding environments.\n-@end menu\n-\n-@node Gcov Intro\n-@section Introduction to @command{gcov}\n-@c man begin DESCRIPTION\n-\n-@command{gcov} is a test coverage program.  Use it in concert with GCC\n-to analyze your programs to help create more efficient, faster running\n-code and to discover untested parts of your program.  You can use\n-@command{gcov} as a profiling tool to help discover where your\n-optimization efforts will best affect your code.  You can also use\n-@command{gcov} along with the other profiling tool, @command{gprof}, to\n-assess which parts of your code use the greatest amount of computing\n-time.\n-\n-Profiling tools help you analyze your code's performance.  Using a\n-profiler such as @command{gcov} or @command{gprof}, you can find out some\n-basic performance statistics, such as:\n-\n-@itemize @bullet\n-@item\n-how often each line of code executes\n-\n-@item\n-what lines of code are actually executed\n-\n-@item\n-how much computing time each section of code uses\n-@end itemize\n-\n-Once you know these things about how your code works when compiled, you\n-can look at each module to see which modules should be optimized.\n-@command{gcov} helps you determine where to work on optimization.\n-\n-Software developers also use coverage testing in concert with\n-testsuites, to make sure software is actually good enough for a release.\n-Testsuites can verify that a program works as expected; a coverage\n-program tests to see how much of the program is exercised by the\n-testsuite.  Developers can then determine what kinds of test cases need\n-to be added to the testsuites to create both better testing and a better\n-final product.\n-\n-You should compile your code without optimization if you plan to use\n-@command{gcov} because the optimization, by combining some lines of code\n-into one function, may not give you as much information as you need to\n-look for `hot spots' where the code is using a great deal of computer\n-time.  Likewise, because @command{gcov} accumulates statistics by line (at\n-the lowest resolution), it works best with a programming style that\n-places only one statement on each line.  If you use complicated macros\n-that expand to loops or to other control structures, the statistics are\n-less helpful---they only report on the line where the macro call\n-appears.  If your complex macros behave like functions, you can replace\n-them with inline functions to solve this problem.\n-\n-@command{gcov} creates a logfile called @file{@var{sourcefile}.gcov} which\n-indicates how many times each line of a source file @file{@var{sourcefile}.c}\n-has executed.  You can use these logfiles along with @command{gprof} to aid\n-in fine-tuning the performance of your programs.  @command{gprof} gives\n-timing information you can use along with the information you get from\n-@command{gcov}.\n-\n-@command{gcov} works only on code compiled with GCC@.  It is not\n-compatible with any other profiling or test coverage mechanism.\n-\n-@c man end\n-\n-@node Invoking Gcov\n-@section Invoking @command{gcov}\n-\n-@smallexample\n-gcov @r{[}@var{options}@r{]} @var{files}\n-@end smallexample\n-\n-@command{gcov} accepts the following options:\n-\n-@ignore\n-@c man begin SYNOPSIS\n-gcov [@option{-v}|@option{--version}] [@option{-h}|@option{--help}]\n-     [@option{-a}|@option{--all-blocks}]\n-     [@option{-b}|@option{--branch-probabilities}]\n-     [@option{-c}|@option{--branch-counts}]\n-     [@option{-d}|@option{--display-progress}]\n-     [@option{-f}|@option{--function-summaries}]\n-     [@option{-j}|@option{--json-format}]\n-     [@option{-H}|@option{--human-readable}]\n-     [@option{-k}|@option{--use-colors}]\n-     [@option{-l}|@option{--long-file-names}]\n-     [@option{-m}|@option{--demangled-names}]\n-     [@option{-n}|@option{--no-output}]\n-     [@option{-o}|@option{--object-directory} @var{directory|file}]\n-     [@option{-p}|@option{--preserve-paths}]\n-     [@option{-q}|@option{--use-hotness-colors}]\n-     [@option{-r}|@option{--relative-only}]\n-     [@option{-s}|@option{--source-prefix} @var{directory}]\n-     [@option{-t}|@option{--stdout}]\n-     [@option{-u}|@option{--unconditional-branches}]\n-     [@option{-x}|@option{--hash-filenames}]\n-     @var{files}\n-@c man end\n-@c man begin SEEALSO\n-gpl(7), gfdl(7), fsf-funding(7), gcc(1) and the Info entry for @file{gcc}.\n-@c man end\n-@end ignore\n-\n-@c man begin OPTIONS\n-@table @gcctabopt\n-\n-@item -a\n-@itemx --all-blocks\n-Write individual execution counts for every basic block.  Normally gcov\n-outputs execution counts only for the main blocks of a line.  With this\n-option you can determine if blocks within a single line are not being\n-executed.\n-\n-@item -b\n-@itemx --branch-probabilities\n-Write branch frequencies to the output file, and write branch summary\n-info to the standard output.  This option allows you to see how often\n-each branch in your program was taken.  Unconditional branches will not\n-be shown, unless the @option{-u} option is given.\n-\n-@item -c\n-@itemx --branch-counts\n-Write branch frequencies as the number of branches taken, rather than\n-the percentage of branches taken.\n-\n-@item -d\n-@itemx --display-progress\n-Display the progress on the standard output.\n-\n-@item -f\n-@itemx --function-summaries\n-Output summaries for each function in addition to the file level summary.\n-\n-@item -h\n-@itemx --help\n-Display help about using @command{gcov} (on the standard output), and\n-exit without doing any further processing.\n-\n-@item -j\n-@itemx --json-format\n-Output gcov file in an easy-to-parse JSON intermediate format\n-which does not require source code for generation.  The JSON\n-file is compressed with gzip compression algorithm\n-and the files have @file{.gcov.json.gz} extension.\n-\n-Structure of the JSON is following:\n-\n-@smallexample\n-@{\n-  \"current_working_directory\": \"foo/bar\",\n-  \"data_file\": \"a.out\",\n-  \"format_version\": \"1\",\n-  \"gcc_version\": \"11.1.1 20210510\"\n-  \"files\": [\"$file\"]\n-@}\n-@end smallexample\n-\n-Fields of the root element have following semantics:\n-\n-@itemize @bullet\n-@item\n-@var{current_working_directory}: working directory where\n-a compilation unit was compiled\n-\n-@item\n-@var{data_file}: name of the data file (GCDA)\n-\n-@item\n-@var{format_version}: semantic version of the format\n-\n-@item\n-@var{gcc_version}: version of the GCC compiler\n-@end itemize\n-\n-Each @var{file} has the following form:\n-\n-@smallexample\n-@{\n-  \"file\": \"a.c\",\n-  \"functions\": [\"$function\"],\n-  \"lines\": [\"$line\"]\n-@}\n-@end smallexample\n-\n-Fields of the @var{file} element have following semantics:\n-\n-@itemize @bullet\n-@item\n-@var{file_name}: name of the source file\n-@end itemize\n-\n-Each @var{function} has the following form:\n-\n-@smallexample\n-@{\n-  \"blocks\": 2,\n-  \"blocks_executed\": 2,\n-  \"demangled_name\": \"foo\",\n-  \"end_column\": 1,\n-  \"end_line\": 4,\n-  \"execution_count\": 1,\n-  \"name\": \"foo\",\n-  \"start_column\": 5,\n-  \"start_line\": 1\n-@}\n-@end smallexample\n-\n-Fields of the @var{function} element have following semantics:\n-\n-@itemize @bullet\n-@item\n-@var{blocks}: number of blocks that are in the function\n-\n-@item\n-@var{blocks_executed}: number of executed blocks of the function\n-\n-@item\n-@var{demangled_name}: demangled name of the function\n-\n-@item\n-@var{end_column}: column in the source file where the function ends\n-\n-@item\n-@var{end_line}: line in the source file where the function ends\n-\n-@item\n-@var{execution_count}: number of executions of the function\n-\n-@item\n-@var{name}: name of the function\n-\n-@item\n-@var{start_column}: column in the source file where the function begins\n-\n-@item\n-@var{start_line}: line in the source file where the function begins\n-@end itemize\n-\n-Note that line numbers and column numbers number from 1.  In the current\n-implementation, @var{start_line} and @var{start_column} do not include\n-any template parameters and the leading return type but that\n-this is likely to be fixed in the future.\n-\n-Each @var{line} has the following form:\n-\n-@smallexample\n-@{\n-  \"branches\": [\"$branch\"],\n-  \"count\": 2,\n-  \"line_number\": 15,\n-  \"unexecuted_block\": false,\n-  \"function_name\": \"foo\",\n-@}\n-@end smallexample\n-\n-Branches are present only with @var{-b} option.\n-Fields of the @var{line} element have following semantics:\n-\n-@itemize @bullet\n-@item\n-@var{count}: number of executions of the line\n-\n-@item\n-@var{line_number}: line number\n-\n-@item\n-@var{unexecuted_block}: flag whether the line contains an unexecuted block\n-(not all statements on the line are executed)\n-\n-@item\n-@var{function_name}: a name of a function this @var{line} belongs to\n-(for a line with an inlined statements can be not set)\n-@end itemize\n-\n-Each @var{branch} has the following form:\n-\n-@smallexample\n-@{\n-  \"count\": 11,\n-  \"fallthrough\": true,\n-  \"throw\": false\n-@}\n-@end smallexample\n-\n-Fields of the @var{branch} element have following semantics:\n-\n-@itemize @bullet\n-@item\n-@var{count}: number of executions of the branch\n-\n-@item\n-@var{fallthrough}: true when the branch is a fall through branch\n-\n-@item\n-@var{throw}: true when the branch is an exceptional branch\n-@end itemize\n-\n-@item -H\n-@itemx --human-readable\n-Write counts in human readable format (like 24.6k).\n-\n-@item -k\n-@itemx --use-colors\n-\n-Use colors for lines of code that have zero coverage.  We use red color for\n-non-exceptional lines and cyan for exceptional.  Same colors are used for\n-basic blocks with @option{-a} option.\n-\n-@item -l\n-@itemx --long-file-names\n-Create long file names for included source files.  For example, if the\n-header file @file{x.h} contains code, and was included in the file\n-@file{a.c}, then running @command{gcov} on the file @file{a.c} will\n-produce an output file called @file{a.c##x.h.gcov} instead of\n-@file{x.h.gcov}.  This can be useful if @file{x.h} is included in\n-multiple source files and you want to see the individual\n-contributions.  If you use the @samp{-p} option, both the including\n-and included file names will be complete path names.\n-\n-@item -m\n-@itemx --demangled-names\n-Display demangled function names in output. The default is to show\n-mangled function names.\n-\n-@item -n\n-@itemx --no-output\n-Do not create the @command{gcov} output file.\n-\n-@item -o @var{directory|file}\n-@itemx --object-directory @var{directory}\n-@itemx --object-file @var{file}\n-Specify either the directory containing the gcov data files, or the\n-object path name.  The @file{.gcno}, and\n-@file{.gcda} data files are searched for using this option.  If a directory\n-is specified, the data files are in that directory and named after the\n-input file name, without its extension.  If a file is specified here,\n-the data files are named after that file, without its extension.\n-\n-@item -p\n-@itemx --preserve-paths\n-Preserve complete path information in the names of generated\n-@file{.gcov} files.  Without this option, just the filename component is\n-used.  With this option, all directories are used, with @samp{/} characters\n-translated to @samp{#} characters, @file{.} directory components\n-removed and unremoveable @file{..}\n-components renamed to @samp{^}.  This is useful if sourcefiles are in several\n-different directories.\n-\n-@item -q\n-@itemx --use-hotness-colors\n-\n-Emit perf-like colored output for hot lines.  Legend of the color scale\n-is printed at the very beginning of the output file.\n-\n-@item -r\n-@itemx --relative-only\n-Only output information about source files with a relative pathname\n-(after source prefix elision).  Absolute paths are usually system\n-header files and coverage of any inline functions therein is normally\n-uninteresting.\n-\n-@item -s @var{directory}\n-@itemx --source-prefix @var{directory}\n-A prefix for source file names to remove when generating the output\n-coverage files.  This option is useful when building in a separate\n-directory, and the pathname to the source directory is not wanted when\n-determining the output file names.  Note that this prefix detection is\n-applied before determining whether the source file is absolute.\n-\n-@item -t\n-@itemx --stdout\n-Output to standard output instead of output files.\n-\n-@item -u\n-@itemx --unconditional-branches\n-When branch probabilities are given, include those of unconditional branches.\n-Unconditional branches are normally not interesting.\n-\n-@item -v\n-@itemx --version\n-Display the @command{gcov} version number (on the standard output),\n-and exit without doing any further processing.\n-\n-@item -w\n-@itemx --verbose\n-Print verbose informations related to basic blocks and arcs.\n-\n-@item -x\n-@itemx --hash-filenames\n-When using @var{--preserve-paths},\n-gcov uses the full pathname of the source files to create\n-an output filename.  This can lead to long filenames that can overflow\n-filesystem limits.  This option creates names of the form\n-@file{@var{source-file}##@var{md5}.gcov},\n-where the @var{source-file} component is the final filename part and\n-the @var{md5} component is calculated from the full mangled name that\n-would have been used otherwise.  The option is an alternative\n-to the @var{--preserve-paths} on systems which have a filesystem limit.\n-\n-@end table\n-\n-@command{gcov} should be run with the current directory the same as that\n-when you invoked the compiler.  Otherwise it will not be able to locate\n-the source files.  @command{gcov} produces files called\n-@file{@var{mangledname}.gcov} in the current directory.  These contain\n-the coverage information of the source file they correspond to.\n-One @file{.gcov} file is produced for each source (or header) file\n-containing code,\n-which was compiled to produce the data files.  The @var{mangledname} part\n-of the output file name is usually simply the source file name, but can\n-be something more complicated if the @samp{-l} or @samp{-p} options are\n-given.  Refer to those options for details.\n-\n-If you invoke @command{gcov} with multiple input files, the\n-contributions from each input file are summed.  Typically you would\n-invoke it with the same list of files as the final link of your executable.\n-\n-The @file{.gcov} files contain the @samp{:} separated fields along with\n-program source code.  The format is\n-\n-@smallexample\n-@var{execution_count}:@var{line_number}:@var{source line text}\n-@end smallexample\n-\n-Additional block information may succeed each line, when requested by\n-command line option.  The @var{execution_count} is @samp{-} for lines\n-containing no code.  Unexecuted lines are marked @samp{#####} or\n-@samp{=====}, depending on whether they are reachable by\n-non-exceptional paths or only exceptional paths such as C++ exception\n-handlers, respectively. Given the @samp{-a} option, unexecuted blocks are\n-marked @samp{$$$$$} or @samp{%%%%%}, depending on whether a basic block\n-is reachable via non-exceptional or exceptional paths.\n-Executed basic blocks having a statement with zero @var{execution_count}\n-end with @samp{*} character and are colored with magenta color with\n-the @option{-k} option.  This functionality is not supported in Ada.\n-\n-Note that GCC can completely remove the bodies of functions that are\n-not needed -- for instance if they are inlined everywhere.  Such functions\n-are marked with @samp{-}, which can be confusing.\n-Use the @option{-fkeep-inline-functions} and @option{-fkeep-static-functions}\n-options to retain these functions and\n-allow gcov to properly show their @var{execution_count}.\n-\n-Some lines of information at the start have @var{line_number} of zero.\n-These preamble lines are of the form\n-\n-@smallexample\n--:0:@var{tag}:@var{value}\n-@end smallexample\n-\n-The ordering and number of these preamble lines will be augmented as\n-@command{gcov} development progresses --- do not rely on them remaining\n-unchanged.  Use @var{tag} to locate a particular preamble line.\n-\n-The additional block information is of the form\n-\n-@smallexample\n-@var{tag} @var{information}\n-@end smallexample\n-\n-The @var{information} is human readable, but designed to be simple\n-enough for machine parsing too.\n-\n-When printing percentages, 0% and 100% are only printed when the values\n-are @emph{exactly} 0% and 100% respectively.  Other values which would\n-conventionally be rounded to 0% or 100% are instead printed as the\n-nearest non-boundary value.\n-\n-When using @command{gcov}, you must first compile your program\n-with a special GCC option @samp{--coverage}.\n-This tells the compiler to generate additional information needed by\n-gcov (basically a flow graph of the program) and also includes\n-additional code in the object files for generating the extra profiling\n-information needed by gcov.  These additional files are placed in the\n-directory where the object file is located.\n-\n-Running the program will cause profile output to be generated.  For each\n-source file compiled with @option{-fprofile-arcs}, an accompanying\n-@file{.gcda} file will be placed in the object file directory.\n-\n-Running @command{gcov} with your program's source file names as arguments\n-will now produce a listing of the code along with frequency of execution\n-for each line.  For example, if your program is called @file{tmp.cpp}, this\n-is what you see when you use the basic @command{gcov} facility:\n-\n-@smallexample\n-$ g++ --coverage tmp.cpp -c\n-$ g++ --coverage tmp.o\n-$ a.out\n-$ gcov tmp.cpp -m\n-File 'tmp.cpp'\n-Lines executed:92.86% of 14\n-Creating 'tmp.cpp.gcov'\n-@end smallexample\n-\n-The file @file{tmp.cpp.gcov} contains output from @command{gcov}.\n-Here is a sample:\n-\n-@smallexample\n-        -:    0:Source:tmp.cpp\n-        -:    0:Working directory:/home/gcc/testcase\n-        -:    0:Graph:tmp.gcno\n-        -:    0:Data:tmp.gcda\n-        -:    0:Runs:1\n-        -:    0:Programs:1\n-        -:    1:#include <stdio.h>\n-        -:    2:\n-        -:    3:template<class T>\n-        -:    4:class Foo\n-        -:    5:@{\n-        -:    6:  public:\n-       1*:    7:  Foo(): b (1000) @{@}\n-------------------\n-Foo<char>::Foo():\n-    #####:    7:  Foo(): b (1000) @{@}\n-------------------\n-Foo<int>::Foo():\n-        1:    7:  Foo(): b (1000) @{@}\n-------------------\n-       2*:    8:  void inc () @{ b++; @}\n-------------------\n-Foo<char>::inc():\n-    #####:    8:  void inc () @{ b++; @}\n-------------------\n-Foo<int>::inc():\n-        2:    8:  void inc () @{ b++; @}\n-------------------\n-        -:    9:\n-        -:   10:  private:\n-        -:   11:  int b;\n-        -:   12:@};\n-        -:   13:\n-        -:   14:template class Foo<int>;\n-        -:   15:template class Foo<char>;\n-        -:   16:\n-        -:   17:int\n-        1:   18:main (void)\n-        -:   19:@{\n-        -:   20:  int i, total;\n-        1:   21:  Foo<int> counter;\n-        -:   22:\n-        1:   23:  counter.inc();\n-        1:   24:  counter.inc();\n-        1:   25:  total = 0;\n-        -:   26:\n-       11:   27:  for (i = 0; i < 10; i++)\n-       10:   28:    total += i;\n-        -:   29:\n-       1*:   30:  int v = total > 100 ? 1 : 2;\n-        -:   31:\n-        1:   32:  if (total != 45)\n-    #####:   33:    printf (\"Failure\\n\");\n-        -:   34:  else\n-        1:   35:    printf (\"Success\\n\");\n-        1:   36:  return 0;\n-        -:   37:@}\n-@end smallexample\n-\n-Note that line 7 is shown in the report multiple times.  First occurrence\n-presents total number of execution of the line and the next two belong\n-to instances of class Foo constructors.  As you can also see, line 30 contains\n-some unexecuted basic blocks and thus execution count has asterisk symbol.\n-\n-When you use the @option{-a} option, you will get individual block\n-counts, and the output looks like this:\n-\n-@smallexample\n-        -:    0:Source:tmp.cpp\n-        -:    0:Working directory:/home/gcc/testcase\n-        -:    0:Graph:tmp.gcno\n-        -:    0:Data:tmp.gcda\n-        -:    0:Runs:1\n-        -:    0:Programs:1\n-        -:    1:#include <stdio.h>\n-        -:    2:\n-        -:    3:template<class T>\n-        -:    4:class Foo\n-        -:    5:@{\n-        -:    6:  public:\n-       1*:    7:  Foo(): b (1000) @{@}\n-------------------\n-Foo<char>::Foo():\n-    #####:    7:  Foo(): b (1000) @{@}\n-------------------\n-Foo<int>::Foo():\n-        1:    7:  Foo(): b (1000) @{@}\n-------------------\n-       2*:    8:  void inc () @{ b++; @}\n-------------------\n-Foo<char>::inc():\n-    #####:    8:  void inc () @{ b++; @}\n-------------------\n-Foo<int>::inc():\n-        2:    8:  void inc () @{ b++; @}\n-------------------\n-        -:    9:\n-        -:   10:  private:\n-        -:   11:  int b;\n-        -:   12:@};\n-        -:   13:\n-        -:   14:template class Foo<int>;\n-        -:   15:template class Foo<char>;\n-        -:   16:\n-        -:   17:int\n-        1:   18:main (void)\n-        -:   19:@{\n-        -:   20:  int i, total;\n-        1:   21:  Foo<int> counter;\n-        1:   21-block  0\n-        -:   22:\n-        1:   23:  counter.inc();\n-        1:   23-block  0\n-        1:   24:  counter.inc();\n-        1:   24-block  0\n-        1:   25:  total = 0;\n-        -:   26:\n-       11:   27:  for (i = 0; i < 10; i++)\n-        1:   27-block  0\n-       11:   27-block  1\n-       10:   28:    total += i;\n-       10:   28-block  0\n-        -:   29:\n-       1*:   30:  int v = total > 100 ? 1 : 2;\n-        1:   30-block  0\n-    %%%%%:   30-block  1\n-        1:   30-block  2\n-        -:   31:\n-        1:   32:  if (total != 45)\n-        1:   32-block  0\n-    #####:   33:    printf (\"Failure\\n\");\n-    %%%%%:   33-block  0\n-        -:   34:  else\n-        1:   35:    printf (\"Success\\n\");\n-        1:   35-block  0\n-        1:   36:  return 0;\n-        1:   36-block  0\n-        -:   37:@}\n-@end smallexample\n-\n-In this mode, each basic block is only shown on one line -- the last\n-line of the block.  A multi-line block will only contribute to the\n-execution count of that last line, and other lines will not be shown\n-to contain code, unless previous blocks end on those lines.\n-The total execution count of a line is shown and subsequent lines show\n-the execution counts for individual blocks that end on that line.  After each\n-block, the branch and call counts of the block will be shown, if the\n-@option{-b} option is given.\n-\n-Because of the way GCC instruments calls, a call count can be shown\n-after a line with no individual blocks.\n-As you can see, line 33 contains a basic block that was not executed.\n-\n-@need 450\n-When you use the @option{-b} option, your output looks like this:\n-\n-@smallexample\n-        -:    0:Source:tmp.cpp\n-        -:    0:Working directory:/home/gcc/testcase\n-        -:    0:Graph:tmp.gcno\n-        -:    0:Data:tmp.gcda\n-        -:    0:Runs:1\n-        -:    0:Programs:1\n-        -:    1:#include <stdio.h>\n-        -:    2:\n-        -:    3:template<class T>\n-        -:    4:class Foo\n-        -:    5:@{\n-        -:    6:  public:\n-       1*:    7:  Foo(): b (1000) @{@}\n-------------------\n-Foo<char>::Foo():\n-function Foo<char>::Foo() called 0 returned 0% blocks executed 0%\n-    #####:    7:  Foo(): b (1000) @{@}\n-------------------\n-Foo<int>::Foo():\n-function Foo<int>::Foo() called 1 returned 100% blocks executed 100%\n-        1:    7:  Foo(): b (1000) @{@}\n-------------------\n-       2*:    8:  void inc () @{ b++; @}\n-------------------\n-Foo<char>::inc():\n-function Foo<char>::inc() called 0 returned 0% blocks executed 0%\n-    #####:    8:  void inc () @{ b++; @}\n-------------------\n-Foo<int>::inc():\n-function Foo<int>::inc() called 2 returned 100% blocks executed 100%\n-        2:    8:  void inc () @{ b++; @}\n-------------------\n-        -:    9:\n-        -:   10:  private:\n-        -:   11:  int b;\n-        -:   12:@};\n-        -:   13:\n-        -:   14:template class Foo<int>;\n-        -:   15:template class Foo<char>;\n-        -:   16:\n-        -:   17:int\n-function main called 1 returned 100% blocks executed 81%\n-        1:   18:main (void)\n-        -:   19:@{\n-        -:   20:  int i, total;\n-        1:   21:  Foo<int> counter;\n-call    0 returned 100%\n-branch  1 taken 100% (fallthrough)\n-branch  2 taken 0% (throw)\n-        -:   22:\n-        1:   23:  counter.inc();\n-call    0 returned 100%\n-branch  1 taken 100% (fallthrough)\n-branch  2 taken 0% (throw)\n-        1:   24:  counter.inc();\n-call    0 returned 100%\n-branch  1 taken 100% (fallthrough)\n-branch  2 taken 0% (throw)\n-        1:   25:  total = 0;\n-        -:   26:\n-       11:   27:  for (i = 0; i < 10; i++)\n-branch  0 taken 91% (fallthrough)\n-branch  1 taken 9%\n-       10:   28:    total += i;\n-        -:   29:\n-       1*:   30:  int v = total > 100 ? 1 : 2;\n-branch  0 taken 0% (fallthrough)\n-branch  1 taken 100%\n-        -:   31:\n-        1:   32:  if (total != 45)\n-branch  0 taken 0% (fallthrough)\n-branch  1 taken 100%\n-    #####:   33:    printf (\"Failure\\n\");\n-call    0 never executed\n-branch  1 never executed\n-branch  2 never executed\n-        -:   34:  else\n-        1:   35:    printf (\"Success\\n\");\n-call    0 returned 100%\n-branch  1 taken 100% (fallthrough)\n-branch  2 taken 0% (throw)\n-        1:   36:  return 0;\n-        -:   37:@}\n-@end smallexample\n-\n-For each function, a line is printed showing how many times the function\n-is called, how many times it returns and what percentage of the\n-function's blocks were executed.\n-\n-For each basic block, a line is printed after the last line of the basic\n-block describing the branch or call that ends the basic block.  There can\n-be multiple branches and calls listed for a single source line if there\n-are multiple basic blocks that end on that line.  In this case, the\n-branches and calls are each given a number.  There is no simple way to map\n-these branches and calls back to source constructs.  In general, though,\n-the lowest numbered branch or call will correspond to the leftmost construct\n-on the source line.\n-\n-For a branch, if it was executed at least once, then a percentage\n-indicating the number of times the branch was taken divided by the\n-number of times the branch was executed will be printed.  Otherwise, the\n-message ``never executed'' is printed.\n-\n-For a call, if it was executed at least once, then a percentage\n-indicating the number of times the call returned divided by the number\n-of times the call was executed will be printed.  This will usually be\n-100%, but may be less for functions that call @code{exit} or @code{longjmp},\n-and thus may not return every time they are called.\n-\n-The execution counts are cumulative.  If the example program were\n-executed again without removing the @file{.gcda} file, the count for the\n-number of times each line in the source was executed would be added to\n-the results of the previous run(s).  This is potentially useful in\n-several ways.  For example, it could be used to accumulate data over a\n-number of program runs as part of a test verification suite, or to\n-provide more accurate long-term information over a large number of\n-program runs.\n-\n-The data in the @file{.gcda} files is saved immediately before the program\n-exits.  For each source file compiled with @option{-fprofile-arcs}, the\n-profiling code first attempts to read in an existing @file{.gcda} file; if\n-the file doesn't match the executable (differing number of basic block\n-counts) it will ignore the contents of the file.  It then adds in the\n-new execution counts and finally writes the data to the file.\n-\n-@node Gcov and Optimization\n-@section Using @command{gcov} with GCC Optimization\n-\n-If you plan to use @command{gcov} to help optimize your code, you must\n-first compile your program with a special GCC option\n-@samp{--coverage}.  Aside from that, you can use any\n-other GCC options; but if you want to prove that every single line\n-in your program was executed, you should not compile with optimization\n-at the same time.  On some machines the optimizer can eliminate some\n-simple code lines by combining them with other lines.  For example, code\n-like this:\n-\n-@smallexample\n-if (a != b)\n-  c = 1;\n-else\n-  c = 0;\n-@end smallexample\n-\n-@noindent\n-can be compiled into one instruction on some machines.  In this case,\n-there is no way for @command{gcov} to calculate separate execution counts\n-for each line because there isn't separate code for each line.  Hence\n-the @command{gcov} output looks like this if you compiled the program with\n-optimization:\n-\n-@smallexample\n-      100:   12:if (a != b)\n-      100:   13:  c = 1;\n-      100:   14:else\n-      100:   15:  c = 0;\n-@end smallexample\n-\n-The output shows that this block of code, combined by optimization,\n-executed 100 times.  In one sense this result is correct, because there\n-was only one instruction representing all four of these lines.  However,\n-the output does not indicate how many times the result was 0 and how\n-many times the result was 1.\n-\n-Inlineable functions can create unexpected line counts.  Line counts are\n-shown for the source code of the inlineable function, but what is shown\n-depends on where the function is inlined, or if it is not inlined at all.\n-\n-If the function is not inlined, the compiler must emit an out of line\n-copy of the function, in any object file that needs it.  If\n-@file{fileA.o} and @file{fileB.o} both contain out of line bodies of a\n-particular inlineable function, they will also both contain coverage\n-counts for that function.  When @file{fileA.o} and @file{fileB.o} are\n-linked together, the linker will, on many systems, select one of those\n-out of line bodies for all calls to that function, and remove or ignore\n-the other.  Unfortunately, it will not remove the coverage counters for\n-the unused function body.  Hence when instrumented, all but one use of\n-that function will show zero counts.\n-\n-If the function is inlined in several places, the block structure in\n-each location might not be the same.  For instance, a condition might\n-now be calculable at compile time in some instances.  Because the\n-coverage of all the uses of the inline function will be shown for the\n-same source lines, the line counts themselves might seem inconsistent.\n-\n-Long-running applications can use the @code{__gcov_reset} and @code{__gcov_dump}\n-facilities to restrict profile collection to the program region of\n-interest. Calling @code{__gcov_reset(void)} will clear all run-time profile\n-counters to zero, and calling @code{__gcov_dump(void)} will cause the profile\n-information collected at that point to be dumped to @file{.gcda} output files.\n-Instrumented applications use a static destructor with priority 99\n-to invoke the @code{__gcov_dump} function. Thus @code{__gcov_dump}\n-is executed after all user defined static destructors,\n-as well as handlers registered with @code{atexit}.\n-\n-If an executable loads a dynamic shared object via dlopen functionality,\n-@option{-Wl,--dynamic-list-data} is needed to dump all profile data.\n-\n-Profiling run-time library reports various errors related to profile\n-manipulation and profile saving.  Errors are printed into standard error output\n-or @samp{GCOV_ERROR_FILE} file, if environment variable is used.\n-In order to terminate immediately after an errors occurs\n-set @samp{GCOV_EXIT_AT_ERROR} environment variable.\n-That can help users to find profile clashing which leads\n-to a misleading profile.\n-\n-@c man end\n-\n-@node Gcov Data Files\n-@section Brief Description of @command{gcov} Data Files\n-\n-@command{gcov} uses two files for profiling.  The names of these files\n-are derived from the original @emph{object} file by substituting the\n-file suffix with either @file{.gcno}, or @file{.gcda}.  The files\n-contain coverage and profile data stored in a platform-independent format.\n-The @file{.gcno} files are placed in the same directory as the object\n-file.  By default, the @file{.gcda} files are also stored in the same\n-directory as the object file, but the GCC @option{-fprofile-dir} option\n-may be used to store the @file{.gcda} files in a separate directory.\n-\n-The @file{.gcno} notes file is generated when the source file is compiled\n-with the GCC @option{-ftest-coverage} option.  It contains information to\n-reconstruct the basic block graphs and assign source line numbers to\n-blocks.\n-\n-The @file{.gcda} count data file is generated when a program containing\n-object files built with the GCC @option{-fprofile-arcs} option is executed.\n-A separate @file{.gcda} file is created for each object file compiled with\n-this option.  It contains arc transition counts, value profile counts, and\n-some summary information.\n-\n-It is not recommended to access the coverage files directly.\n-Consumers should use the intermediate format that is provided\n-by @command{gcov} tool via @option{--json-format} option.\n-\n-@node Cross-profiling\n-@section Data File Relocation to Support Cross-Profiling\n-\n-Running the program will cause profile output to be generated.  For each\n-source file compiled with @option{-fprofile-arcs}, an accompanying @file{.gcda}\n-file will be placed in the object file directory. That implicitly requires\n-running the program on the same system as it was built or having the same\n-absolute directory structure on the target system. The program will try\n-to create the needed directory structure, if it is not already present.\n-\n-To support cross-profiling, a program compiled with @option{-fprofile-arcs}\n-can relocate the data files based on two environment variables:\n-\n-@itemize @bullet\n-@item\n-GCOV_PREFIX contains the prefix to add to the absolute paths\n-in the object file. Prefix can be absolute, or relative.  The\n-default is no prefix.\n-\n-@item\n-GCOV_PREFIX_STRIP indicates the how many initial directory names to strip off\n-the hardwired absolute paths. Default value is 0.\n-\n-@emph{Note:} If GCOV_PREFIX_STRIP is set without GCOV_PREFIX is undefined,\n- then a relative path is made out of the hardwired absolute paths.\n-@end itemize\n-\n-For example, if the object file @file{/user/build/foo.o} was built with\n-@option{-fprofile-arcs}, the final executable will try to create the data file\n-@file{/user/build/foo.gcda} when running on the target system.  This will\n-fail if the corresponding directory does not exist and it is unable to create\n-it.  This can be overcome by, for example, setting the environment as\n-@samp{GCOV_PREFIX=/target/run} and @samp{GCOV_PREFIX_STRIP=1}.  Such a\n-setting will name the data file @file{/target/run/build/foo.gcda}.\n-\n-You must move the data files to the expected directory tree in order to\n-use them for profile directed optimizations (@option{-fprofile-use}), or to\n-use the @command{gcov} tool.\n-\n-@node Freestanding Environments\n-@section Profiling and Test Coverage in Freestanding Environments\n-\n-In case your application runs in a hosted environment such as GNU/Linux, then\n-this section is likely not relevant to you.  This section is intended for\n-application developers targeting freestanding environments (for example\n-embedded systems) with limited resources.  In particular, systems or test cases\n-which do not support constructors/destructors or the C library file I/O.  In\n-this section, the @dfn{target system} runs your application instrumented for\n-profiling or test coverage.  You develop and analyze your application on the\n-@dfn{host system}.  We now provide an overview how profiling and test coverage\n-can be obtained in this scenario followed by a tutorial which can be exercised\n-on the host system.  Finally, some system initialization caveats are listed.\n-\n-@subsection Overview\n-\n-For an application instrumented for profiling or test coverage, the compiler\n-generates some global data structures which are updated by instrumentation code\n-while the application runs.  These data structures are called the @dfn{gcov\n-information}.  Normally, when the application exits, the gcov information is\n-stored to @file{.gcda} files.  There is one file per translation unit\n-instrumented for profiling or test coverage.  The function\n-@code{__gcov_exit()}, which stores the gcov information to a file, is called by\n-a global destructor function for each translation unit instrumented for\n-profiling or test coverage.  It runs at process exit.  In a global constructor\n-function, the @code{__gcov_init()} function is called to register the gcov\n-information of a translation unit in a global list.  In some situations, this\n-procedure does not work.  Firstly, if you want to profile the global\n-constructor or exit processing of an operating system, the compiler generated\n-functions may conflict with the test objectives.  Secondly, you may want to\n-test early parts of the system initialization or abnormal program behaviour\n-which do not allow a global constructor or exit processing.  Thirdly, you need\n-a filesystem to store the files.\n-\n-The @option{-fprofile-info-section} GCC option enables you to use profiling and\n-test coverage in freestanding environments.  This option disables the use of\n-global constructors and destructors for the gcov information.  Instead, a\n-pointer to the gcov information is stored in a special linker input section for\n-each translation unit which is compiled with this option.  By default, the\n-section name is @code{.gcov_info}.  The gcov information is statically\n-initialized.  The pointers to the gcov information from all translation units\n-of an executable can be collected by the linker in a contiguous memory block.\n-For the GNU linker, the below linker script output section definition can be\n-used to achieve this:\n-\n-@smallexample\n-  .gcov_info      :\n-  @{\n-    PROVIDE (__gcov_info_start = .);\n-    KEEP (*(.gcov_info))\n-    PROVIDE (__gcov_info_end = .);\n-  @}\n-@end smallexample\n-\n-The linker will provide two global symbols, @code{__gcov_info_start} and\n-@code{__gcov_info_end}, which define the start and end of the array of pointers\n-to gcov information blocks, respectively.  The @code{KEEP ()} directive is\n-required to prevent a garbage collection of the pointers.  They are not\n-directly referenced by anything in the executable.  The section may be placed\n-in a read-only memory area.\n-\n-In order to transfer the profiling and test coverage data from the target to\n-the host system, the application has to provide a function to produce a\n-reliable in order byte stream from the target to the host.  The byte stream may\n-be compressed and encoded using error detection and correction codes to meet\n-application-specific requirements.  The GCC provided @file{libgcov} target\n-library provides two functions, @code{__gcov_info_to_gcda()} and\n-@code{__gcov_filename_to_gcfn()}, to generate a byte stream from a gcov\n-information bock.  The functions are declared in @code{#include <gcov.h>}.  The\n-byte stream can be deserialized by the @command{merge-stream} subcommand of the\n-@command{gcov-tool} to create or update @file{.gcda} files in the host\n-filesystem for the instrumented application.\n-\n-@subsection Tutorial\n-\n-This tutorial should be exercised on the host system.  We will build a program\n-instrumented for test coverage.  The program runs an application and dumps the\n-gcov information to @file{stderr} encoded as a printable character stream.  The\n-application simply decodes such character streams from @file{stdin} and writes\n-the decoded character stream to @file{stdout} (warning: this is binary data).\n-The decoded character stream is consumed by the @command{merge-stream}\n-subcommand of the @command{gcov-tool} to create or update the @file{.gcda}\n-files.\n-\n-To get started, create an empty directory.  Change into the new directory.\n-Then you will create the following three files in this directory\n-\n-@enumerate\n-@item\n-@file{app.h} - a header file included by @file{app.c} and @file{main.c},\n-\n-@item\n-@file{app.c} - a source file which contains an example application, and\n-\n-@item\n-@file{main.c} - a source file which contains the program main function and code\n-to dump the gcov information.\n-@end enumerate\n-\n-Firstly, create the header file @file{app.h} with the following content:\n-\n-@smallexample\n-static const unsigned char a = 'a';\n-\n-static inline unsigned char *\n-encode (unsigned char c, unsigned char buf[2])\n-@{\n-  buf[0] = c % 16 + a;\n-  buf[1] = (c / 16) % 16 + a;\n-  return buf;\n-@}\n-\n-extern void application (void);\n-@end smallexample\n-\n-Secondly, create the source file @file{app.c} with the following content:\n-\n-@smallexample\n-#include \"app.h\"\n-\n-#include <stdio.h>\n-\n-/* The application reads a character stream encoded by encode() from stdin,\n-   decodes it, and writes the decoded characters to stdout.  Characters other\n-   than the 16 characters 'a' to 'p' are ignored.  */\n-\n-static int can_decode (unsigned char c)\n-@{\n-  return (unsigned char)(c - a) < 16;\n-@}\n-\n-void\n-application (void)\n-@{\n-  int first = 1;\n-  int i;\n-  unsigned char c;\n-\n-  while ((i = fgetc (stdin)) != EOF)\n-    @{\n-      unsigned char x = (unsigned char)i;\n-\n-      if (can_decode (x))\n-        @{\n-          if (first)\n-            c = x - a;\n-          else\n-            fputc (c + 16 * (x - a), stdout);\n-          first = !first;\n-        @}\n-      else\n-        first = 1;\n-    @}\n-@}\n-@end smallexample\n-\n-Thirdly, create the source file @file{main.c} with the following content:\n-\n-@smallexample\n-#include \"app.h\"\n-\n-#include <gcov.h>\n-#include <stdio.h>\n-#include <stdlib.h>\n-\n-/* The start and end symbols are provided by the linker script.  We use the\n-   array notation to avoid issues with a potential small-data area.  */\n-\n-extern const struct gcov_info *const __gcov_info_start[];\n-extern const struct gcov_info *const __gcov_info_end[];\n-\n-/* This function shall produce a reliable in order byte stream to transfer the\n-   gcov information from the target to the host system.  */\n-\n-static void\n-dump (const void *d, unsigned n, void *arg)\n-@{\n-  (void)arg;\n-  const unsigned char *c = d;\n-  unsigned char buf[2];\n-\n-  for (unsigned i = 0; i < n; ++i)\n-    fwrite (encode (c[i], buf), sizeof (buf), 1, stderr);\n-@}\n-\n-/* The filename is serialized to a gcfn data stream by the\n-   __gcov_filename_to_gcfn() function.  The gcfn data is used by the\n-   \"merge-stream\" subcommand of the \"gcov-tool\" to figure out the filename\n-   associated with the gcov information. */\n-\n-static void\n-filename (const char *f, void *arg)\n-@{\n-  __gcov_filename_to_gcfn (f, dump, arg);\n-@}\n-\n-/* The __gcov_info_to_gcda() function may have to allocate memory under\n-   certain conditions.  Simply try it out if it is needed for your application\n-   or not.  */\n-\n-static void *\n-allocate (unsigned length, void *arg)\n-@{\n-  (void)arg;\n-  return malloc (length);\n-@}\n-\n-/* Dump the gcov information of all translation units.  */\n-\n-static void\n-dump_gcov_info (void)\n-@{\n-  const struct gcov_info *const *info = __gcov_info_start;\n-  const struct gcov_info *const *end = __gcov_info_end;\n-\n-  /* Obfuscate variable to prevent compiler optimizations.  */\n-  __asm__ (\"\" : \"+r\" (info));\n-\n-  while (info != end)\n-  @{\n-    void *arg = NULL;\n-    __gcov_info_to_gcda (*info, filename, dump, allocate, arg);\n-    fputc ('\\n', stderr);\n-    ++info;\n-  @}\n-@}\n-\n-/* The main() function just runs the application and then dumps the gcov\n-   information to stderr.  */\n-\n-int\n-main (void)\n-@{\n-  application ();\n-  dump_gcov_info ();\n-  return 0;\n-@}\n-@end smallexample\n-\n-If we compile @file{app.c} with test coverage and no extra profiling options,\n-then a global constructor (@code{_sub_I_00100_0} here, it may have a different\n-name in your environment) and destructor (@code{_sub_D_00100_1}) is used to\n-register and dump the gcov information, respectively.  We also see undefined\n-references to @code{__gcov_init} and @code{__gcov_exit}:\n-\n-@smallexample\n-$ gcc --coverage -c app.c\n-$ nm app.o\n-0000000000000000 r a\n-0000000000000030 T application\n-0000000000000000 t can_decode\n-                 U fgetc\n-                 U fputc\n-0000000000000000 b __gcov0.application\n-0000000000000038 b __gcov0.can_decode\n-0000000000000000 d __gcov_.application\n-00000000000000c0 d __gcov_.can_decode\n-                 U __gcov_exit\n-                 U __gcov_init\n-                 U __gcov_merge_add\n-                 U stdin\n-                 U stdout\n-0000000000000161 t _sub_D_00100_1\n-0000000000000151 t _sub_I_00100_0\n-@end smallexample\n-\n-Compile @file{app.c} and @file{main.c} with test coverage and\n-@option{-fprofile-info-section}.  Now, a read-only pointer size object is\n-present in the @code{.gcov_info} section and there are no undefined references\n-to @code{__gcov_init} and @code{__gcov_exit}:\n-\n-@smallexample\n-$ gcc --coverage -fprofile-info-section -c main.c\n-$ gcc --coverage -fprofile-info-section -c app.c\n-$ objdump -h app.o\n-\n-app.o:     file format elf64-x86-64\n-\n-Sections:\n-Idx Name          Size      VMA               LMA               File off  Algn\n-  0 .text         00000151  0000000000000000  0000000000000000  00000040  2**0\n-                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE\n-  1 .data         00000100  0000000000000000  0000000000000000  000001a0  2**5\n-                  CONTENTS, ALLOC, LOAD, RELOC, DATA\n-  2 .bss          00000040  0000000000000000  0000000000000000  000002a0  2**5\n-                  ALLOC\n-  3 .rodata       0000003c  0000000000000000  0000000000000000  000002a0  2**3\n-                  CONTENTS, ALLOC, LOAD, READONLY, DATA\n-  4 .gcov_info    00000008  0000000000000000  0000000000000000  000002e0  2**3\n-                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA\n-  5 .comment      0000004e  0000000000000000  0000000000000000  000002e8  2**0\n-                  CONTENTS, READONLY\n-  6 .note.GNU-stack 00000000  0000000000000000  0000000000000000  00000336  2**0\n-                  CONTENTS, READONLY\n-  7 .eh_frame     00000058  0000000000000000  0000000000000000  00000338  2**3\n-                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA\n-@end smallexample\n-\n-We have to customize the program link procedure so that all the\n-@code{.gcov_info} linker input sections are placed in a contiguous memory block\n-with a begin and end symbol.  Firstly, get the default linker script using the\n-following commands (we assume a GNU linker):\n-\n-@smallexample\n-$ ld --verbose | sed '1,/^===/d' | sed '/^===/d' > linkcmds\n-@end smallexample\n-\n-Secondly, open the file @file{linkcmds} with a text editor and place the linker\n-output section definition from the overview after the @code{.rodata} section\n-definition.  Link the program executable using the customized linker script:\n-\n-@smallexample\n-$ gcc --coverage main.o app.o -T linkcmds -Wl,-Map,app.map\n-@end smallexample\n-\n-In the linker map file @file{app.map}, we see that the linker placed the\n-read-only pointer size objects of our objects files @file{main.o} and\n-@file{app.o} into a contiguous memory block and provided the symbols\n-@code{__gcov_info_start} and @code{__gcov_info_end}:\n-\n-@smallexample\n-$ grep -C 1 \"\\.gcov_info\" app.map\n-\n-.gcov_info      0x0000000000403ac0       0x10\n-                0x0000000000403ac0                PROVIDE (__gcov_info_start = .)\n- *(.gcov_info)\n- .gcov_info     0x0000000000403ac0        0x8 main.o\n- .gcov_info     0x0000000000403ac8        0x8 app.o\n-                0x0000000000403ad0                PROVIDE (__gcov_info_end = .)\n-@end smallexample\n-\n-Make sure no @file{.gcda} files are present.  Run the program with nothing to\n-decode and dump @file{stderr} to the file @file{gcda-0.txt} (first run).  Run\n-the program to decode @file{gcda-0.txt} and send it to the @command{gcov-tool}\n-using the @command{merge-stream} subcommand to create the @file{.gcda} files\n-(second run).  Run @command{gcov} to produce a report for @file{app.c}.  We see\n-that the first run with nothing to decode results in a partially covered\n-application:\n-\n-@smallexample\n-$ rm -f app.gcda main.gcda\n-$ echo \"\" | ./a.out 2>gcda-0.txt\n-$ ./a.out <gcda-0.txt 2>gcda-1.txt | gcov-tool merge-stream\n-$ gcov -bc app.c\n-File 'app.c'\n-Lines executed:69.23% of 13\n-Branches executed:66.67% of 6\n-Taken at least once:50.00% of 6\n-Calls executed:66.67% of 3\n-Creating 'app.c.gcov'\n-\n-Lines executed:69.23% of 13\n-@end smallexample\n-\n-Run the program to decode @file{gcda-1.txt} and send it to the\n-@command{gcov-tool} using the @command{merge-stream} subcommand to update the\n-@file{.gcda} files.  Run @command{gcov} to produce a report for @file{app.c}.\n-Since the second run decoded the gcov information of the first run, we have now\n-a fully covered application:\n-\n-@smallexample\n-$ ./a.out <gcda-1.txt 2>gcda-2.txt | gcov-tool merge-stream\n-$ gcov -bc app.c\n-File 'app.c'\n-Lines executed:100.00% of 13\n-Branches executed:100.00% of 6\n-Taken at least once:100.00% of 6\n-Calls executed:100.00% of 3\n-Creating 'app.c.gcov'\n-\n-Lines executed:100.00% of 13\n-@end smallexample\n-\n-@subsection System Initialization Caveats\n-\n-The gcov information of a translation unit consists of several global data\n-structures.  For example, the instrumented code may update program flow graph\n-edge counters in a zero-initialized data structure.  It is safe to run\n-instrumented code before the zero-initialized data is cleared to zero.  The\n-coverage information obtained before the zero-initialized data is cleared to\n-zero is unusable.  Dumping the gcov information using\n-@code{__gcov_info_to_gcda()} before the zero-initialized data is cleared to\n-zero or the initialized data is loaded, is undefined behaviour.  Clearing the\n-zero-initialized data to zero through a function instrumented for profiling or\n-test coverage is undefined behaviour, since it may produce inconsistent program\n-flow graph edge counters for example."}, {"sha": "e5f9d1be8ea81f3da002ec3bb925590d331a2551", "filename": "gcc/doc/generic.texi", "status": "removed", "additions": 0, "deletions": 3619, "changes": 3619, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fgeneric.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fgeneric.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgeneric.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "7832fa6ff90d737f3c6a2a3108007530cc7a3483", "filename": "gcc/doc/gimple.texi", "status": "removed", "additions": 0, "deletions": 2772, "changes": 2772, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fgimple.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fgimple.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgimple.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "8ff116aedf5e6c652b1a97d017d6352a0212ff2e", "filename": "gcc/doc/gnu.texi", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fgnu.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fgnu.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgnu.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,20 +0,0 @@\n-@c Copyright (C) 2001 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@node GNU Project\n-@unnumbered The GNU Project and GNU/Linux\n-\n-The GNU Project was launched in 1984 to develop a complete Unix-like\n-operating system which is free software: the GNU system.  (GNU is a\n-recursive acronym for ``GNU's Not Unix''; it is pronounced\n-``guh-NEW''@.)  Variants of the GNU operating system, which use the\n-kernel Linux, are now widely used; though these systems are often\n-referred to as ``Linux'', they are more accurately called GNU/Linux\n-systems.\n-\n-For more information, see:\n-@smallexample\n-@uref{https://www.gnu.org/}\n-@uref{https://www.gnu.org/gnu/linux-and-gnu.html}\n-@end smallexample"}, {"sha": "4f791b300ba44c82b88686edee33bffeac946f9e", "filename": "gcc/doc/gty.texi", "status": "removed", "additions": 0, "deletions": 735, "changes": 735, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fgty.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fgty.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgty.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,735 +0,0 @@\n-@c Copyright (C) 2002-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@node Type Information\n-@chapter Memory Management and Type Information\n-@cindex GGC\n-@findex GTY\n-\n-GCC uses some fairly sophisticated memory management techniques, which\n-involve determining information about GCC's data structures from GCC's\n-source code and using this information to perform garbage collection and\n-implement precompiled headers.\n-\n-A full C++ parser would be too complicated for this task, so a limited\n-subset of C++ is interpreted and special markers are used to determine\n-what parts of the source to look at.  All @code{struct}, @code{union}\n-and @code{template} structure declarations that define data structures\n-that are allocated under control of the garbage collector must be\n-marked.  All global variables that hold pointers to garbage-collected\n-memory must also be marked.  Finally, all global variables that need\n-to be saved and restored by a precompiled header must be marked.  (The\n-precompiled header mechanism can only save static variables if they're\n-scalar. Complex data structures must be allocated in garbage-collected\n-memory to be saved in a precompiled header.)\n-\n-The full format of a marker is\n-@smallexample\n-GTY (([@var{option}] [(@var{param})], [@var{option}] [(@var{param})] @dots{}))\n-@end smallexample\n-@noindent\n-but in most cases no options are needed.  The outer double parentheses\n-are still necessary, though: @code{GTY(())}.  Markers can appear:\n-\n-@itemize @bullet\n-@item\n-In a structure definition, before the open brace;\n-@item\n-In a global variable declaration, after the keyword @code{static} or\n-@code{extern}; and\n-@item\n-In a structure field definition, before the name of the field.\n-@end itemize\n-\n-Here are some examples of marking simple data structures and globals.\n-\n-@smallexample\n-struct GTY(()) @var{tag}\n-@{\n-  @var{fields}@dots{}\n-@};\n-\n-typedef struct GTY(()) @var{tag}\n-@{\n-  @var{fields}@dots{}\n-@} *@var{typename};\n-\n-static GTY(()) struct @var{tag} *@var{list};   /* @r{points to GC memory} */\n-static GTY(()) int @var{counter};        /* @r{save counter in a PCH} */\n-@end smallexample\n-\n-The parser understands simple typedefs such as\n-@code{typedef struct @var{tag} *@var{name};} and\n-@code{typedef int @var{name};}.\n-These don't need to be marked.\n-\n-However, in combination with GTY, avoid using typedefs such as\n-@code{typedef int_hash<@dots{}> @var{name};}\n-for these generate infinite-recursion code.\n-See @uref{https://gcc.gnu.org/PR103157,PR103157}.\n-Instead, you may use\n-@code{struct @var{name} : int_hash<@dots{}> @{@};},\n-for example.\n-\n-Since @code{gengtype}'s understanding of C++ is limited, there are\n-several constructs and declarations that are not supported inside\n-classes/structures marked for automatic GC code generation.  The\n-following C++ constructs produce a @code{gengtype} error on\n-structures/classes marked for automatic GC code generation:\n-\n-@itemize @bullet\n-@item\n-Type definitions inside classes/structures are not supported.\n-@item\n-Enumerations inside classes/structures are not supported.\n-@end itemize\n-\n-If you have a class or structure using any of the above constructs,\n-you need to mark that class as @code{GTY ((user))} and provide your\n-own marking routines (see section @ref{User GC} for details).\n-\n-It is always valid to include function definitions inside classes.\n-Those are always ignored by @code{gengtype}, as it only cares about\n-data members.\n-\n-@menu\n-* GTY Options::         What goes inside a @code{GTY(())}.\n-* Inheritance and GTY:: Adding GTY to a class hierarchy.\n-* User GC::\t\tAdding user-provided GC marking routines.\n-* GGC Roots::           Making global variables GGC roots.\n-* Files::               How the generated files work.\n-* Invoking the garbage collector::   How to invoke the garbage collector.\n-* Troubleshooting::     When something does not work as expected.\n-@end menu\n-\n-@node GTY Options\n-@section The Inside of a @code{GTY(())}\n-\n-Sometimes the C code is not enough to fully describe the type\n-structure.  Extra information can be provided with @code{GTY} options\n-and additional markers.  Some options take a parameter, which may be\n-either a string or a type name, depending on the parameter.  If an\n-option takes no parameter, it is acceptable either to omit the\n-parameter entirely, or to provide an empty string as a parameter.  For\n-example, @code{@w{GTY ((skip))}} and @code{@w{GTY ((skip (\"\")))}} are\n-equivalent.\n-\n-When the parameter is a string, often it is a fragment of C code.  Four\n-special escapes may be used in these strings, to refer to pieces of\n-the data structure being marked:\n-\n-@cindex % in GTY option\n-@table @code\n-@item %h\n-The current structure.\n-@item %1\n-The structure that immediately contains the current structure.\n-@item %0\n-The outermost structure that contains the current structure.\n-@item %a\n-A partial expression of the form @code{[i1][i2]@dots{}} that indexes\n-the array item currently being marked.\n-@end table\n-\n-For instance, suppose that you have a structure of the form\n-@smallexample\n-struct A @{\n-  @dots{}\n-@};\n-struct B @{\n-  struct A foo[12];\n-@};\n-@end smallexample\n-@noindent\n-and @code{b} is a variable of type @code{struct B}.  When marking\n-@samp{b.foo[11]}, @code{%h} would expand to @samp{b.foo[11]},\n-@code{%0} and @code{%1} would both expand to @samp{b}, and @code{%a}\n-would expand to @samp{[11]}.\n-\n-As in ordinary C, adjacent strings will be concatenated; this is\n-helpful when you have a complicated expression.\n-@smallexample\n-@group\n-GTY ((chain_next (\"TREE_CODE (&%h.generic) == INTEGER_TYPE\"\n-                  \" ? TYPE_NEXT_VARIANT (&%h.generic)\"\n-                  \" : TREE_CHAIN (&%h.generic)\")))\n-@end group\n-@end smallexample\n-\n-The available options are:\n-\n-@table @code\n-@findex length\n-@item length (\"@var{expression}\")\n-\n-There are two places the type machinery will need to be explicitly told\n-the length of an array of non-atomic objects.  The first case is when a\n-structure ends in a variable-length array, like this:\n-@smallexample\n-struct GTY(()) rtvec_def @{\n-  int num_elem;         /* @r{number of elements} */\n-  rtx GTY ((length (\"%h.num_elem\"))) elem[1];\n-@};\n-@end smallexample\n-\n-In this case, the @code{length} option is used to override the specified\n-array length (which should usually be @code{1}).  The parameter of the\n-option is a fragment of C code that calculates the length.\n-\n-The second case is when a structure or a global variable contains a\n-pointer to an array, like this:\n-@smallexample\n-struct gimple_omp_for_iter * GTY((length (\"%h.collapse\"))) iter;\n-@end smallexample\n-In this case, @code{iter} has been allocated by writing something like\n-@smallexample\n-  x->iter = ggc_alloc_cleared_vec_gimple_omp_for_iter (collapse);\n-@end smallexample\n-and the @code{collapse} provides the length of the field.\n-\n-This second use of @code{length} also works on global variables, like:\n-@verbatim\n-static GTY((length(\"reg_known_value_size\"))) rtx *reg_known_value;\n-@end verbatim\n-\n-Note that the @code{length} option is only meant for use with arrays of\n-non-atomic objects, that is, objects that contain pointers pointing to\n-other GTY-managed objects.  For other GC-allocated arrays and strings\n-you should use @code{atomic} or @code{string_length}.\n-\n-@findex string_length\n-@item string_length (\"@var{expression}\")\n-\n-In order to simplify production of PCH, a structure member that is a plain\n-array of bytes (an optionally @code{const} and/or @code{unsigned} @code{char\n-*}) is treated specially by the infrastructure. Even if such an array has not\n-been allocated in GC-controlled memory, it will still be written properly into\n-a PCH.  The machinery responsible for this needs to know the length of the\n-data; by default, the length is determined by calling @code{strlen} on the\n-pointer.  The @code{string_length} option specifies an alternate way to\n-determine the length, such as by inspecting another struct member:\n-\n-@smallexample\n-struct GTY(()) non_terminated_string @{\n-  size_t sz;\n-  const char * GTY((string_length (\"%h.sz\"))) data;\n-@};\n-@end smallexample\n-\n-@findex skip\n-@item skip\n-\n-If @code{skip} is applied to a field, the type machinery will ignore it.\n-This is somewhat dangerous; the only safe use is in a union when one\n-field really isn't ever used.\n-\n-@findex callback\n-@item callback\n-\n-@code{callback} should be applied to fields with pointer to function type\n-and causes the field to be ignored similarly to @code{skip}, except when\n-writing PCH and the field is non-NULL it will remember the field's address\n-for relocation purposes if the process writing PCH has different load base\n-from a process reading PCH.\n-\n-@findex for_user\n-@item for_user\n-\n-Use this to mark types that need to be marked by user gc routines, but are not\n-refered to in a template argument.  So if you have some user gc type T1 and a\n-non user gc type T2 you can give T2 the for_user option so that the marking\n-functions for T1 can call non mangled functions to mark T2.\n-\n-@findex desc\n-@findex tag\n-@findex default\n-@item desc (\"@var{expression}\")\n-@itemx tag (\"@var{constant}\")\n-@itemx default\n-\n-The type machinery needs to be told which field of a @code{union} is\n-currently active.  This is done by giving each field a constant\n-@code{tag} value, and then specifying a discriminator using @code{desc}.\n-The value of the expression given by @code{desc} is compared against\n-each @code{tag} value, each of which should be different.  If no\n-@code{tag} is matched, the field marked with @code{default} is used if\n-there is one, otherwise no field in the union will be marked.\n-\n-In the @code{desc} option, the ``current structure'' is the union that\n-it discriminates.  Use @code{%1} to mean the structure containing it.\n-There are no escapes available to the @code{tag} option, since it is a\n-constant.\n-\n-For example,\n-@smallexample\n-struct GTY(()) tree_binding\n-@{\n-  struct tree_common common;\n-  union tree_binding_u @{\n-    tree GTY ((tag (\"0\"))) scope;\n-    struct cp_binding_level * GTY ((tag (\"1\"))) level;\n-  @} GTY ((desc (\"BINDING_HAS_LEVEL_P ((tree)&%0)\"))) xscope;\n-  tree value;\n-@};\n-@end smallexample\n-\n-In this example, the value of BINDING_HAS_LEVEL_P when applied to a\n-@code{struct tree_binding *} is presumed to be 0 or 1.  If 1, the type\n-mechanism will treat the field @code{level} as being present and if 0,\n-will treat the field @code{scope} as being present.\n-\n-The @code{desc} and @code{tag} options can also be used for inheritance\n-to denote which subclass an instance is.  See @ref{Inheritance and GTY}\n-for more information.\n-\n-@findex cache\n-@item cache\n-\n-When the @code{cache} option is applied to a global variable gt_cleare_cache is\n-called on that variable between the mark and sweep phases of garbage\n-collection.  The gt_clear_cache function is free to mark blocks as used, or to\n-clear pointers in the variable.\n-\n-@findex deletable\n-@item deletable\n-\n-@code{deletable}, when applied to a global variable, indicates that when\n-garbage collection runs, there's no need to mark anything pointed to\n-by this variable, it can just be set to @code{NULL} instead.  This is used\n-to keep a list of free structures around for re-use.\n-\n-@findex maybe_undef\n-@item maybe_undef\n-\n-When applied to a field, @code{maybe_undef} indicates that it's OK if\n-the structure that this fields points to is never defined, so long as\n-this field is always @code{NULL}.  This is used to avoid requiring\n-backends to define certain optional structures.  It doesn't work with\n-language frontends.\n-\n-@findex nested_ptr\n-@item nested_ptr (@var{type}, \"@var{to expression}\", \"@var{from expression}\")\n-\n-The type machinery expects all pointers to point to the start of an\n-object.  Sometimes for abstraction purposes it's convenient to have\n-a pointer which points inside an object.  So long as it's possible to\n-convert the original object to and from the pointer, such pointers\n-can still be used.  @var{type} is the type of the original object,\n-the @var{to expression} returns the pointer given the original object,\n-and the @var{from expression} returns the original object given\n-the pointer.  The pointer will be available using the @code{%h}\n-escape.\n-\n-@findex chain_next\n-@findex chain_prev\n-@findex chain_circular\n-@item chain_next (\"@var{expression}\")\n-@itemx chain_prev (\"@var{expression}\")\n-@itemx chain_circular (\"@var{expression}\")\n-\n-It's helpful for the type machinery to know if objects are often\n-chained together in long lists; this lets it generate code that uses\n-less stack space by iterating along the list instead of recursing down\n-it.  @code{chain_next} is an expression for the next item in the list,\n-@code{chain_prev} is an expression for the previous item.  For singly\n-linked lists, use only @code{chain_next}; for doubly linked lists, use\n-both.  The machinery requires that taking the next item of the\n-previous item gives the original item.  @code{chain_circular} is similar\n-to @code{chain_next}, but can be used for circular single linked lists.\n-\n-@findex reorder\n-@item reorder (\"@var{function name}\")\n-\n-Some data structures depend on the relative ordering of pointers.  If\n-the precompiled header machinery needs to change that ordering, it\n-will call the function referenced by the @code{reorder} option, before\n-changing the pointers in the object that's pointed to by the field the\n-option applies to.  The function must take four arguments, with the\n-signature @samp{@w{void *, void *, gt_pointer_operator, void *}}.\n-The first parameter is a pointer to the structure that contains the\n-object being updated, or the object itself if there is no containing\n-structure.  The second parameter is a cookie that should be ignored.\n-The third parameter is a routine that, given a pointer, will update it\n-to its correct new value.  The fourth parameter is a cookie that must\n-be passed to the second parameter.\n-\n-PCH cannot handle data structures that depend on the absolute values\n-of pointers.  @code{reorder} functions can be expensive.  When\n-possible, it is better to depend on properties of the data, like an ID\n-number or the hash of a string instead.\n-\n-@findex atomic\n-@item atomic\n-\n-The @code{atomic} option can only be used with pointers.  It informs\n-the GC machinery that the memory that the pointer points to does not\n-contain any pointers, and hence it should be treated by the GC and PCH\n-machinery as an ``atomic'' block of memory that does not need to be\n-examined when scanning memory for pointers.  In particular, the\n-machinery will not scan that memory for pointers to mark them as\n-reachable (when marking pointers for GC) or to relocate them (when\n-writing a PCH file).\n-\n-The @code{atomic} option differs from the @code{skip} option.\n-@code{atomic} keeps the memory under Garbage Collection, but makes the\n-GC ignore the contents of the memory.  @code{skip} is more drastic in\n-that it causes the pointer and the memory to be completely ignored by\n-the Garbage Collector.  So, memory marked as @code{atomic} is\n-automatically freed when no longer reachable, while memory marked as\n-@code{skip} is not.\n-\n-The @code{atomic} option must be used with great care, because all\n-sorts of problem can occur if used incorrectly, that is, if the memory\n-the pointer points to does actually contain a pointer.\n-\n-Here is an example of how to use it:\n-@smallexample\n-struct GTY(()) my_struct @{\n-  int number_of_elements;\n-  unsigned int * GTY ((atomic)) elements;\n-@};\n-@end smallexample\n-In this case, @code{elements} is a pointer under GC, and the memory it\n-points to needs to be allocated using the Garbage Collector, and will\n-be freed automatically by the Garbage Collector when it is no longer\n-referenced.  But the memory that the pointer points to is an array of\n-@code{unsigned int} elements, and the GC must not try to scan it to\n-find pointers to mark or relocate, which is why it is marked with the\n-@code{atomic} option.\n-\n-Note that, currently, global variables cannot be marked with\n-@code{atomic}; only fields of a struct can.  This is a known\n-limitation.  It would be useful to be able to mark global pointers\n-with @code{atomic} to make the PCH machinery aware of them so that\n-they are saved and restored correctly to PCH files.\n-\n-@findex special\n-@item special (\"@var{name}\")\n-\n-The @code{special} option is used to mark types that have to be dealt\n-with by special case machinery.  The parameter is the name of the\n-special case.  See @file{gengtype.cc} for further details.  Avoid\n-adding new special cases unless there is no other alternative.\n-\n-@findex user\n-@item user\n-\n-The @code{user} option indicates that the code to mark structure\n-fields is completely handled by user-provided routines.  See section\n-@ref{User GC} for details on what functions need to be provided.\n-@end table\n-\n-@node Inheritance and GTY\n-@section Support for inheritance\n-gengtype has some support for simple class hierarchies.  You can use\n-this to have gengtype autogenerate marking routines, provided:\n-\n-@itemize @bullet\n-@item\n-There must be a concrete base class, with a discriminator expression\n-that can be used to identify which subclass an instance is.\n-@item\n-Only single inheritance is used.\n-@item\n-None of the classes within the hierarchy are templates.\n-@end itemize\n-\n-If your class hierarchy does not fit in this pattern, you must use\n-@ref{User GC} instead.\n-\n-The base class and its discriminator must be identified using the ``desc''\n-option.  Each concrete subclass must use the ``tag'' option to identify\n-which value of the discriminator it corresponds to.\n-\n-Every class in the hierarchy must have a @code{GTY(())} marker, as\n-gengtype will only attempt to parse classes that have such a marker\n-@footnote{Classes lacking such a marker will not be identified as being\n-part of the hierarchy, and so the marking routines will not handle them,\n-leading to a assertion failure within the marking routines due to an\n-unknown tag value (assuming that assertions are enabled).}.\n-\n-@smallexample\n-class GTY((desc(\"%h.kind\"), tag(\"0\"))) example_base\n-@{\n-public:\n-    int kind;\n-    tree a;\n-@};\n-\n-class GTY((tag(\"1\"))) some_subclass : public example_base\n-@{\n-public:\n-    tree b;\n-@};\n-\n-class GTY((tag(\"2\"))) some_other_subclass : public example_base\n-@{\n-public:\n-    tree c;\n-@};\n-@end smallexample\n-\n-The generated marking routines for the above will contain a ``switch''\n-on ``kind'', visiting all appropriate fields.  For example, if kind is\n-2, it will cast to ``some_other_subclass'' and visit fields a, b, and c.\n-\n-@node User GC\n-@section Support for user-provided GC marking routines\n-@cindex user gc\n-The garbage collector supports types for which no automatic marking\n-code is generated.  For these types, the user is required to provide\n-three functions: one to act as a marker for garbage collection, and\n-two functions to act as marker and pointer walker for pre-compiled\n-headers.\n-\n-Given a structure @code{struct GTY((user)) my_struct}, the following functions\n-should be defined to mark @code{my_struct}:\n-\n-@smallexample\n-void gt_ggc_mx (my_struct *p)\n-@{\n-  /* This marks field 'fld'.  */\n-  gt_ggc_mx (p->fld);\n-@}\n-\n-void gt_pch_nx (my_struct *p)\n-@{\n-  /* This marks field 'fld'.  */\n-  gt_pch_nx (tp->fld);\n-@}\n-\n-void gt_pch_nx (my_struct *p, gt_pointer_operator op, void *cookie)\n-@{\n-  /* For every field 'fld', call the given pointer operator.  */\n-  op (&(tp->fld), NULL, cookie);\n-@}\n-@end smallexample\n-\n-In general, each marker @code{M} should call @code{M} for every\n-pointer field in the structure.  Fields that are not allocated in GC\n-or are not pointers must be ignored.\n-\n-For embedded lists (e.g., structures with a @code{next} or @code{prev}\n-pointer), the marker must follow the chain and mark every element in\n-it.\n-\n-Note that the rules for the pointer walker @code{gt_pch_nx (my_struct\n-*, gt_pointer_operator, void *)} are slightly different.  In this\n-case, the operation @code{op} must be applied to the @emph{address} of\n-every pointer field.\n-\n-@subsection User-provided marking routines for template types\n-When a template type @code{TP} is marked with @code{GTY}, all\n-instances of that type are considered user-provided types.  This means\n-that the individual instances of @code{TP} do not need to be marked\n-with @code{GTY}.  The user needs to provide template functions to mark\n-all the fields of the type.\n-\n-The following code snippets represent all the functions that need to\n-be provided. Note that type @code{TP} may reference to more than one\n-type. In these snippets, there is only one type @code{T}, but there\n-could be more.\n-\n-@smallexample\n-template<typename T>\n-void gt_ggc_mx (TP<T> *tp)\n-@{\n-  extern void gt_ggc_mx (T&);\n-\n-  /* This marks field 'fld' of type 'T'.  */\n-  gt_ggc_mx (tp->fld);\n-@}\n-\n-template<typename T>\n-void gt_pch_nx (TP<T> *tp)\n-@{\n-  extern void gt_pch_nx (T&);\n-\n-  /* This marks field 'fld' of type 'T'.  */\n-  gt_pch_nx (tp->fld);\n-@}\n-\n-template<typename T>\n-void gt_pch_nx (TP<T *> *tp, gt_pointer_operator op, void *cookie)\n-@{\n-  /* For every field 'fld' of 'tp' with type 'T *', call the given\n-     pointer operator.  */\n-  op (&(tp->fld), NULL, cookie);\n-@}\n-\n-template<typename T>\n-void gt_pch_nx (TP<T> *tp, gt_pointer_operator, void *cookie)\n-@{\n-  extern void gt_pch_nx (T *, gt_pointer_operator, void *);\n-\n-  /* For every field 'fld' of 'tp' with type 'T', call the pointer\n-     walker for all the fields of T.  */\n-  gt_pch_nx (&(tp->fld), op, cookie);\n-@}\n-@end smallexample\n-\n-Support for user-defined types is currently limited. The following\n-restrictions apply:\n-\n-@enumerate\n-@item Type @code{TP} and all the argument types @code{T} must be\n-marked with @code{GTY}.\n-\n-@item Type @code{TP} can only have type names in its argument list.\n-\n-@item The pointer walker functions are different for @code{TP<T>} and\n-@code{TP<T *>}. In the case of @code{TP<T>}, references to\n-@code{T} must be handled by calling @code{gt_pch_nx} (which\n-will, in turn, walk all the pointers inside fields of @code{T}).\n-In the case of @code{TP<T *>}, references to @code{T *} must be\n-handled by calling the @code{op} function on the address of the\n-pointer (see the code snippets above).\n-@end enumerate\n-\n-@node GGC Roots\n-@section Marking Roots for the Garbage Collector\n-@cindex roots, marking\n-@cindex marking roots\n-\n-In addition to keeping track of types, the type machinery also locates\n-the global variables (@dfn{roots}) that the garbage collector starts\n-at.  Roots must be declared using one of the following syntaxes:\n-\n-@itemize @bullet\n-@item\n-@code{extern GTY(([@var{options}])) @var{type} @var{name};}\n-@item\n-@code{static GTY(([@var{options}])) @var{type} @var{name};}\n-@end itemize\n-@noindent\n-The syntax\n-@itemize @bullet\n-@item\n-@code{GTY(([@var{options}])) @var{type} @var{name};}\n-@end itemize\n-@noindent\n-is @emph{not} accepted.  There should be an @code{extern} declaration\n-of such a variable in a header somewhere---mark that, not the\n-definition.  Or, if the variable is only used in one file, make it\n-@code{static}.\n-\n-@node Files\n-@section Source Files Containing Type Information\n-@cindex generated files\n-@cindex files, generated\n-\n-Whenever you add @code{GTY} markers to a source file that previously\n-had none, or create a new source file containing @code{GTY} markers,\n-there are three things you need to do:\n-\n-@enumerate\n-@item\n-You need to add the file to the list of source files the type\n-machinery scans.  There are four cases:\n-\n-@enumerate a\n-@item\n-For a back-end file, this is usually done\n-automatically; if not, you should add it to @code{target_gtfiles} in\n-the appropriate port's entries in @file{config.gcc}.\n-\n-@item\n-For files shared by all front ends, add the filename to the\n-@code{GTFILES} variable in @file{Makefile.in}.\n-\n-@item\n-For files that are part of one front end, add the filename to the\n-@code{gtfiles} variable defined in the appropriate\n-@file{config-lang.in}.\n-Headers should appear before non-headers in this list.\n-\n-@item\n-For files that are part of some but not all front ends, add the\n-filename to the @code{gtfiles} variable of @emph{all} the front ends\n-that use it.\n-@end enumerate\n-\n-@item\n-If the file was a header file, you'll need to check that it's included\n-in the right place to be visible to the generated files.  For a back-end\n-header file, this should be done automatically.  For a front-end header\n-file, it needs to be included by the same file that includes\n-@file{gtype-@var{lang}.h}.  For other header files, it needs to be\n-included in @file{gtype-desc.cc}, which is a generated file, so add it to\n-@code{ifiles} in @code{open_base_file} in @file{gengtype.cc}.\n-\n-For source files that aren't header files, the machinery will generate a\n-header file that should be included in the source file you just changed.\n-The file will be called @file{gt-@var{path}.h} where @var{path} is the\n-pathname relative to the @file{gcc} directory with slashes replaced by\n-@verb{|-|}, so for example the header file to be included in\n-@file{cp/parser.cc} is called @file{gt-cp-parser.h}.  The\n-generated header file should be included after everything else in the\n-source file.\n-\n-@end enumerate\n-\n-For language frontends, there is another file that needs to be included\n-somewhere.  It will be called @file{gtype-@var{lang}.h}, where\n-@var{lang} is the name of the subdirectory the language is contained in.\n-\n-Plugins can add additional root tables.  Run the @code{gengtype}\n-utility in plugin mode as @code{gengtype -P pluginout.h @var{source-dir}\n-@var{file-list} @var{plugin*.c}} with your plugin files\n-@var{plugin*.c} using @code{GTY} to generate the @var{pluginout.h} file.\n-The GCC build tree is needed to be present in that mode.\n-\n-\n-@node Invoking the garbage collector\n-@section How to invoke the garbage collector\n-@cindex garbage collector, invocation\n-@findex ggc_collect\n-\n-The GCC garbage collector GGC is only invoked explicitly. In contrast\n-with many other garbage collectors, it is not implicitly invoked by\n-allocation routines when a lot of memory has been consumed. So the\n-only way to have GGC reclaim storage is to call the @code{ggc_collect}\n-function explicitly.\n-With @var{mode} @code{GGC_COLLECT_FORCE} or otherwise (default\n-@code{GGC_COLLECT_HEURISTIC}) when the internal heuristic decides to\n-collect, this call is potentially an expensive operation, as it may\n-have to scan the entire heap.  Beware that local variables (on the GCC\n-call stack) are not followed by such an invocation (as many other\n-garbage collectors do): you should reference all your data from static\n-or external @code{GTY}-ed variables, and it is advised to call\n-@code{ggc_collect} with a shallow call stack.  The GGC is an exact mark\n-and sweep garbage collector (so it does not scan the call stack for\n-pointers).  In practice GCC passes don't often call @code{ggc_collect}\n-themselves, because it is called by the pass manager between passes.\n-\n-At the time of the @code{ggc_collect} call all pointers in the GC-marked\n-structures must be valid or @code{NULL}.  In practice this means that\n-there should not be uninitialized pointer fields in the structures even\n-if your code never reads or writes those fields at a particular\n-instance.  One way to ensure this is to use cleared versions of\n-allocators unless all the fields are initialized manually immediately\n-after allocation.\n-\n-@node Troubleshooting\n-@section Troubleshooting the garbage collector\n-@cindex garbage collector, troubleshooting\n-\n-With the current garbage collector implementation, most issues should\n-show up as GCC compilation errors.  Some of the most commonly\n-encountered issues are described below.\n-\n-@itemize @bullet\n-@item Gengtype does not produce allocators for a @code{GTY}-marked type.\n-Gengtype checks if there is at least one possible path from GC roots to\n-at least one instance of each type before outputting allocators.  If\n-there is no such path, the @code{GTY} markers will be ignored and no\n-allocators will be output.  Solve this by making sure that there exists\n-at least one such path.  If creating it is unfeasible or raises a ``code\n-smell'', consider if you really must use GC for allocating such type.\n-\n-@item Link-time errors about undefined @code{gt_ggc_r_foo_bar} and\n-similarly-named symbols.  Check if your @file{foo_bar} source file has\n-@code{#include \"gt-foo_bar.h\"} as its very last line.\n-\n-@end itemize"}, {"sha": "82269342a0d4b5cce2c57295fcba6894787b0777", "filename": "gcc/doc/headerdirs.texi", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fheaderdirs.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fheaderdirs.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fheaderdirs.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,32 +0,0 @@\n-@c Copyright (C) 1988-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@node Header Dirs\n-@chapter Standard Header File Directories\n-\n-@code{GCC_INCLUDE_DIR} means the same thing for native and cross.  It is\n-where GCC stores its private include files, and also where GCC\n-stores the fixed include files.  A cross compiled GCC runs\n-@code{fixincludes} on the header files in @file{$(tooldir)/include}.\n-(If the cross compilation header files need to be fixed, they must be\n-installed before GCC is built.  If the cross compilation header files\n-are already suitable for GCC, nothing special need be done).\n-\n-@code{GPLUSPLUS_INCLUDE_DIR} means the same thing for native and cross.  It\n-is where @command{g++} looks first for header files.  The C++ library\n-installs only target independent header files in that directory.\n-\n-@code{LOCAL_INCLUDE_DIR} is used only by native compilers.  GCC\n-doesn't install anything there.  It is normally\n-@file{/usr/local/include}.  This is where local additions to a packaged\n-system should place header files.\n-\n-@code{CROSS_INCLUDE_DIR} is used only by cross compilers.  GCC\n-doesn't install anything there.\n-\n-@code{TOOL_INCLUDE_DIR} is used for both native and cross compilers.  It\n-is the place for other packages to install header files that GCC will\n-use.  For a cross-compiler, this is the equivalent of\n-@file{/usr/include}.  When you build a cross-compiler,\n-@code{fixincludes} processes any header files in this directory."}, {"sha": "4b6ca464cf5e0ade4ad12c736e2cb2a5c855586a", "filename": "gcc/doc/hostconfig.texi", "status": "removed", "additions": 0, "deletions": 229, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fhostconfig.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fhostconfig.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fhostconfig.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,229 +0,0 @@\n-@c Copyright (C) 1988-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gccint.texi.\n-\n-@node Host Config\n-@chapter Host Configuration\n-@cindex host configuration\n-\n-Most details about the machine and system on which the compiler is\n-actually running are detected by the @command{configure} script.  Some\n-things are impossible for @command{configure} to detect; these are\n-described in two ways, either by macros defined in a file named\n-@file{xm-@var{machine}.h} or by hook functions in the file specified\n-by the @var{out_host_hook_obj} variable in @file{config.gcc}.  (The\n-intention is that very few hosts will need a header file but nearly\n-every fully supported host will need to override some hooks.)\n-\n-If you need to define only a few macros, and they have simple\n-definitions, consider using the @code{xm_defines} variable in your\n-@file{config.gcc} entry instead of creating a host configuration\n-header.  @xref{System Config}.\n-\n-@menu\n-* Host Common::         Things every host probably needs implemented.\n-* Filesystem::          Your host cannot have the letter `a' in filenames?\n-* Host Misc::           Rare configuration options for hosts.\n-@end menu\n-\n-@node Host Common\n-@section Host Common\n-@cindex host hooks\n-@cindex host functions\n-\n-Some things are just not portable, even between similar operating systems,\n-and are too difficult for autoconf to detect.  They get implemented using\n-hook functions in the file specified by the @var{host_hook_obj}\n-variable in @file{config.gcc}.\n-\n-@deftypefn {Host Hook} void HOST_HOOKS_EXTRA_SIGNALS (void)\n-This host hook is used to set up handling for extra signals.  The most\n-common thing to do in this hook is to detect stack overflow.\n-@end deftypefn\n-\n-@deftypefn {Host Hook} {void *} HOST_HOOKS_GT_PCH_GET_ADDRESS (size_t @\n-  @var{size}, int @var{fd})\n-This host hook returns the address of some space that is likely to be\n-free in some subsequent invocation of the compiler.  We intend to load\n-the PCH data at this address such that the data need not be relocated.\n-The area should be able to hold @var{size} bytes.  If the host uses\n-@code{mmap}, @var{fd} is an open file descriptor that can be used for\n-probing.\n-@end deftypefn\n-\n-@deftypefn {Host Hook} int HOST_HOOKS_GT_PCH_USE_ADDRESS (void * @var{address}, @\n-  size_t @var{size}, int @var{fd}, size_t @var{offset})\n-This host hook is called when a PCH file is about to be loaded.\n-We want to load @var{size} bytes from @var{fd} at @var{offset}\n-into memory at @var{address}.  The given address will be the result of\n-a previous invocation of @code{HOST_HOOKS_GT_PCH_GET_ADDRESS}.\n-Return @minus{}1 if we couldn't allocate @var{size} bytes at @var{address}.\n-Return 0 if the memory is allocated but the data is not loaded.  Return 1\n-if the hook has performed everything.\n-\n-If the implementation uses reserved address space, free any reserved\n-space beyond @var{size}, regardless of the return value.  If no PCH will\n-be loaded, this hook may be called with @var{size} zero, in which case\n-all reserved address space should be freed.\n-\n-Do not try to handle values of @var{address} that could not have been\n-returned by this executable; just return @minus{}1.  Such values usually\n-indicate an out-of-date PCH file (built by some other GCC executable),\n-and such a PCH file won't work.\n-@end deftypefn\n-\n-@deftypefn {Host Hook} size_t HOST_HOOKS_GT_PCH_ALLOC_GRANULARITY (void);\n-This host hook returns the alignment required for allocating virtual\n-memory.  Usually this is the same as getpagesize, but on some hosts the\n-alignment for reserving memory differs from the pagesize for committing\n-memory.\n-@end deftypefn\n-\n-@node Filesystem\n-@section Host Filesystem\n-@cindex configuration file\n-@cindex @file{xm-@var{machine}.h}\n-\n-GCC needs to know a number of things about the semantics of the host\n-machine's filesystem.  Filesystems with Unix and MS-DOS semantics are\n-automatically detected.  For other systems, you can define the\n-following macros in @file{xm-@var{machine}.h}.\n-\n-@ftable @code\n-@item HAVE_DOS_BASED_FILE_SYSTEM\n-This macro is automatically defined by @file{system.h} if the host\n-file system obeys the semantics defined by MS-DOS instead of Unix.\n-DOS file systems are case insensitive, file specifications may begin\n-with a drive letter, and both forward slash and backslash (@samp{/}\n-and @samp{\\}) are directory separators.\n-\n-@item DIR_SEPARATOR\n-@itemx DIR_SEPARATOR_2\n-If defined, these macros expand to character constants specifying\n-separators for directory names within a file specification.\n-@file{system.h} will automatically give them appropriate values on\n-Unix and MS-DOS file systems.  If your file system is neither of\n-these, define one or both appropriately in @file{xm-@var{machine}.h}.\n-\n-However, operating systems like VMS, where constructing a pathname is\n-more complicated than just stringing together directory names\n-separated by a special character, should not define either of these\n-macros.\n-\n-@item PATH_SEPARATOR\n-If defined, this macro should expand to a character constant\n-specifying the separator for elements of search paths.  The default\n-value is a colon (@samp{:}).  DOS-based systems usually, but not\n-always, use semicolon (@samp{;}).\n-\n-@item VMS\n-Define this macro if the host system is VMS@.\n-\n-@item HOST_OBJECT_SUFFIX\n-Define this macro to be a C string representing the suffix for object\n-files on your host machine.  If you do not define this macro, GCC will\n-use @samp{.o} as the suffix for object files.\n-\n-@item HOST_EXECUTABLE_SUFFIX\n-Define this macro to be a C string representing the suffix for\n-executable files on your host machine.  If you do not define this macro,\n-GCC will use the null string as the suffix for executable files.\n-\n-@item HOST_BIT_BUCKET\n-A pathname defined by the host operating system, which can be opened as\n-a file and written to, but all the information written is discarded.\n-This is commonly known as a @dfn{bit bucket} or @dfn{null device}.  If\n-you do not define this macro, GCC will use @samp{/dev/null} as the bit\n-bucket.  If the host does not support a bit bucket, define this macro to\n-an invalid filename.\n-\n-@item UPDATE_PATH_HOST_CANONICALIZE (@var{path})\n-If defined, a C statement (sans semicolon) that performs host-dependent\n-canonicalization when a path used in a compilation driver or\n-preprocessor is canonicalized.  @var{path} is a malloc-ed path to be\n-canonicalized.  If the C statement does canonicalize @var{path} into a\n-different buffer, the old path should be freed and the new buffer should\n-have been allocated with malloc.\n-\n-@item DUMPFILE_FORMAT\n-Define this macro to be a C string representing the format to use for\n-constructing the index part of debugging dump file names.  The resultant\n-string must fit in fifteen bytes.  The full filename will be the\n-concatenation of: the prefix of the assembler file name, the string\n-resulting from applying this format to an index number, and a string\n-unique to each dump file kind, e.g.@: @samp{rtl}.\n-\n-If you do not define this macro, GCC will use @samp{.%02d.}.  You should\n-define this macro if using the default will create an invalid file name.\n-\n-@item DELETE_IF_ORDINARY\n-Define this macro to be a C statement (sans semicolon) that performs\n-host-dependent removal of ordinary temp files in the compilation driver.\n-\n-If you do not define this macro, GCC will use the default version.  You\n-should define this macro if the default version does not reliably remove\n-the temp file as, for example, on VMS which allows multiple versions\n-of a file.\n-\n-@item HOST_LACKS_INODE_NUMBERS\n-Define this macro if the host filesystem does not report meaningful inode\n-numbers in struct stat.\n-@end ftable\n-\n-@node Host Misc\n-@section Host Misc\n-@cindex configuration file\n-@cindex @file{xm-@var{machine}.h}\n-\n-@ftable @code\n-@item FATAL_EXIT_CODE\n-A C expression for the status code to be returned when the compiler\n-exits after serious errors.  The default is the system-provided macro\n-@samp{EXIT_FAILURE}, or @samp{1} if the system doesn't define that\n-macro.  Define this macro only if these defaults are incorrect.\n-\n-@item SUCCESS_EXIT_CODE\n-A C expression for the status code to be returned when the compiler\n-exits without serious errors.  (Warnings are not serious errors.)  The\n-default is the system-provided macro @samp{EXIT_SUCCESS}, or @samp{0} if\n-the system doesn't define that macro.  Define this macro only if these\n-defaults are incorrect.\n-\n-@item USE_C_ALLOCA\n-Define this macro if GCC should use the C implementation of @code{alloca}\n-provided by @file{libiberty.a}.  This only affects how some parts of the\n-compiler itself allocate memory.  It does not change code generation.\n-\n-When GCC is built with a compiler other than itself, the C @code{alloca}\n-is always used.  This is because most other implementations have serious\n-bugs.  You should define this macro only on a system where no\n-stack-based @code{alloca} can possibly work.  For instance, if a system\n-has a small limit on the size of the stack, GCC's builtin @code{alloca}\n-will not work reliably.\n-\n-@item COLLECT2_HOST_INITIALIZATION\n-If defined, a C statement (sans semicolon) that performs host-dependent\n-initialization when @code{collect2} is being initialized.\n-\n-@item GCC_DRIVER_HOST_INITIALIZATION\n-If defined, a C statement (sans semicolon) that performs host-dependent\n-initialization when a compilation driver is being initialized.\n-\n-@item HOST_LONG_LONG_FORMAT\n-If defined, the string used to indicate an argument of type @code{long\n-long} to functions like @code{printf}.  The default value is\n-@code{\"ll\"}.\n-\n-@item HOST_LONG_FORMAT\n-If defined, the string used to indicate an argument of type @code{long}\n-to functions like @code{printf}.  The default value is @code{\"l\"}.\n-\n-@item HOST_PTR_PRINTF\n-If defined, the string used to indicate an argument of type @code{void *}\n-to functions like @code{printf}.  The default value is @code{\"%p\"}.\n-@end ftable\n-\n-In addition, if @command{configure} generates an incorrect definition of\n-any of the macros in @file{auto-host.h}, you can override that\n-definition in a host configuration header.  If you need to do this,\n-first see if it is possible to fix @command{configure}."}, {"sha": "c2088ffa777dc67d015ccda27896eb1695fcf2a2", "filename": "gcc/doc/implement-c.texi", "status": "removed", "additions": 0, "deletions": 746, "changes": 746, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fimplement-c.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fimplement-c.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fimplement-c.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,746 +0,0 @@\n-@c Copyright (C) 2001-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@node C Implementation\n-@chapter C Implementation-Defined Behavior\n-@cindex implementation-defined behavior, C language\n-\n-A conforming implementation of ISO C is required to document its\n-choice of behavior in each of the areas that are designated\n-``implementation defined''.  The following lists all such areas,\n-along with the section numbers from the ISO/IEC 9899:1990, ISO/IEC\n-9899:1999 and ISO/IEC 9899:2011 standards.  Some areas are only\n-implementation-defined in one version of the standard.\n-\n-Some choices depend on the externally determined ABI for the platform\n-(including standard character encodings) which GCC follows; these are\n-listed as ``determined by ABI'' below.  @xref{Compatibility, , Binary\n-Compatibility}, and @uref{https://gcc.gnu.org/readings.html}.  Some\n-choices are documented in the preprocessor manual.\n-@xref{Implementation-defined behavior, , Implementation-defined\n-behavior, cpp, The C Preprocessor}.  Some choices are made by the\n-library and operating system (or other environment when compiling for\n-a freestanding environment); refer to their documentation for details.\n-\n-@menu\n-* Translation implementation::\n-* Environment implementation::\n-* Identifiers implementation::\n-* Characters implementation::\n-* Integers implementation::\n-* Floating point implementation::\n-* Arrays and pointers implementation::\n-* Hints implementation::\n-* Structures unions enumerations and bit-fields implementation::\n-* Qualifiers implementation::\n-* Declarators implementation::\n-* Statements implementation::\n-* Preprocessing directives implementation::\n-* Library functions implementation::\n-* Architecture implementation::\n-* Locale-specific behavior implementation::\n-@end menu\n-\n-@node Translation implementation\n-@section Translation\n-\n-@itemize @bullet\n-@item\n-@cite{How a diagnostic is identified (C90 3.7, C99 and C11 3.10, C90,\n-C99 and C11 5.1.1.3).}\n-\n-Diagnostics consist of all the output sent to stderr by GCC@.\n-\n-@item\n-@cite{Whether each nonempty sequence of white-space characters other than\n-new-line is retained or replaced by one space character in translation\n-phase 3 (C90, C99 and C11 5.1.1.2).}\n-\n-@xref{Implementation-defined behavior, , Implementation-defined\n-behavior, cpp, The C Preprocessor}.\n-\n-@end itemize\n-\n-@node Environment implementation\n-@section Environment\n-\n-The behavior of most of these points are dependent on the implementation\n-of the C library, and are not defined by GCC itself.\n-\n-@itemize @bullet\n-@item\n-@cite{The mapping between physical source file multibyte characters\n-and the source character set in translation phase 1 (C90, C99 and C11\n-5.1.1.2).}\n-\n-@xref{Implementation-defined behavior, , Implementation-defined\n-behavior, cpp, The C Preprocessor}.\n-\n-@end itemize\n-\n-@node Identifiers implementation\n-@section Identifiers\n-\n-@itemize @bullet\n-@item\n-@cite{Which additional multibyte characters may appear in identifiers\n-and their correspondence to universal character names (C99 and C11 6.4.2).}\n-\n-@xref{Implementation-defined behavior, , Implementation-defined\n-behavior, cpp, The C Preprocessor}.\n-\n-@item\n-@cite{The number of significant initial characters in an identifier\n-(C90 6.1.2, C90, C99 and C11 5.2.4.1, C99 and C11 6.4.2).}\n-\n-For internal names, all characters are significant.  For external names,\n-the number of significant characters are defined by the linker; for\n-almost all targets, all characters are significant.\n-\n-@item\n-@cite{Whether case distinctions are significant in an identifier with\n-external linkage (C90 6.1.2).}\n-\n-This is a property of the linker.  C99 and C11 require that case distinctions\n-are always significant in identifiers with external linkage and\n-systems without this property are not supported by GCC@.\n-\n-@end itemize\n-\n-@node Characters implementation\n-@section Characters\n-\n-@itemize @bullet\n-@item\n-@cite{The number of bits in a byte (C90 3.4, C99 and C11 3.6).}\n-\n-Determined by ABI@.\n-\n-@item\n-@cite{The values of the members of the execution character set (C90,\n-C99 and C11 5.2.1).}\n-\n-Determined by ABI@.\n-\n-@item\n-@cite{The unique value of the member of the execution character set produced\n-for each of the standard alphabetic escape sequences (C90, C99 and C11\n-5.2.2).}\n-\n-Determined by ABI@.\n-\n-@item\n-@cite{The value of a @code{char} object into which has been stored any\n-character other than a member of the basic execution character set\n-(C90 6.1.2.5, C99 and C11 6.2.5).}\n-\n-Determined by ABI@.\n-\n-@item\n-@cite{Which of @code{signed char} or @code{unsigned char} has the same\n-range, representation, and behavior as ``plain'' @code{char} (C90\n-6.1.2.5, C90 6.2.1.1, C99 and C11 6.2.5, C99 and C11 6.3.1.1).}\n-\n-@opindex fsigned-char\n-@opindex funsigned-char\n-Determined by ABI@.  The options @option{-funsigned-char} and\n-@option{-fsigned-char} change the default.  @xref{C Dialect Options, ,\n-Options Controlling C Dialect}.\n-\n-@item\n-@cite{The mapping of members of the source character set (in character\n-constants and string literals) to members of the execution character\n-set (C90 6.1.3.4, C99 and C11 6.4.4.4, C90, C99 and C11 5.1.1.2).}\n-\n-Determined by ABI@.\n-\n-@item\n-@cite{The value of an integer character constant containing more than one\n-character or containing a character or escape sequence that does not map\n-to a single-byte execution character (C90 6.1.3.4, C99 and C11 6.4.4.4).}\n-\n-@xref{Implementation-defined behavior, , Implementation-defined\n-behavior, cpp, The C Preprocessor}.\n-\n-@item\n-@cite{The value of a wide character constant containing more than one\n-multibyte character or a single multibyte character that maps to\n-multiple members of the extended execution character set, or\n-containing a multibyte character or escape sequence not represented in\n-the extended execution character set (C90 6.1.3.4, C99 and C11\n-6.4.4.4).}\n-\n-@xref{Implementation-defined behavior, , Implementation-defined\n-behavior, cpp, The C Preprocessor}.\n-\n-@item\n-@cite{The current locale used to convert a wide character constant consisting\n-of a single multibyte character that maps to a member of the extended\n-execution character set into a corresponding wide character code (C90\n-6.1.3.4, C99 and C11 6.4.4.4).}\n-\n-@xref{Implementation-defined behavior, , Implementation-defined\n-behavior, cpp, The C Preprocessor}.\n-\n-@item\n-@cite{Whether differently-prefixed wide string literal tokens can be\n-concatenated and, if so, the treatment of the resulting multibyte\n-character sequence (C11 6.4.5).}\n-\n-Such tokens may not be concatenated.\n-\n-@item\n-@cite{The current locale used to convert a wide string literal into\n-corresponding wide character codes (C90 6.1.4, C99 and C11 6.4.5).}\n-\n-@xref{Implementation-defined behavior, , Implementation-defined\n-behavior, cpp, The C Preprocessor}.\n-\n-@item\n-@cite{The value of a string literal containing a multibyte character or escape\n-sequence not represented in the execution character set (C90 6.1.4,\n-C99 and C11 6.4.5).}\n-\n-@xref{Implementation-defined behavior, , Implementation-defined\n-behavior, cpp, The C Preprocessor}.\n-\n-@item\n-@cite{The encoding of any of @code{wchar_t}, @code{char16_t}, and\n-@code{char32_t} where the corresponding standard encoding macro\n-(@code{__STDC_ISO_10646__}, @code{__STDC_UTF_16__}, or\n-@code{__STDC_UTF_32__}) is not defined (C11 6.10.8.2).}\n-\n-@xref{Implementation-defined behavior, , Implementation-defined\n-behavior, cpp, The C Preprocessor}.  @code{char16_t} and\n-@code{char32_t} literals are always encoded in UTF-16 and UTF-32\n-respectively.\n-\n-@end itemize\n-\n-@node Integers implementation\n-@section Integers\n-\n-@itemize @bullet\n-@item\n-@cite{Any extended integer types that exist in the implementation (C99\n-and C11 6.2.5).}\n-\n-GCC does not support any extended integer types.\n-@c The __mode__ attribute might create types of precisions not\n-@c otherwise supported, but the syntax isn't right for use everywhere\n-@c the standard type names might be used.  Predefined typedefs should\n-@c be used if any extended integer types are to be defined.  The\n-@c __int128_t and __uint128_t typedefs are not extended integer types\n-@c as they are generally longer than the ABI-specified intmax_t.\n-\n-@item\n-@cite{Whether signed integer types are represented using sign and magnitude,\n-two's complement, or one's complement, and whether the extraordinary value\n-is a trap representation or an ordinary value (C99 and C11 6.2.6.2).}\n-\n-GCC supports only two's complement integer types, and all bit patterns\n-are ordinary values.\n-\n-@item\n-@cite{The rank of any extended integer type relative to another extended\n-integer type with the same precision (C99 and C11 6.3.1.1).}\n-\n-GCC does not support any extended integer types.\n-@c If it did, there would only be one of each precision and signedness.\n-\n-@item\n-@cite{The result of, or the signal raised by, converting an integer to a\n-signed integer type when the value cannot be represented in an object of\n-that type (C90 6.2.1.2, C99 and C11 6.3.1.3).}\n-\n-For conversion to a type of width @math{N}, the value is reduced\n-modulo @math{2^N} to be within range of the type; no signal is raised.\n-\n-@item\n-@cite{The results of some bitwise operations on signed integers (C90\n-6.3, C99 and C11 6.5).}\n-\n-Bitwise operators act on the representation of the value including\n-both the sign and value bits, where the sign bit is considered\n-immediately above the highest-value value bit.  Signed @samp{>>} acts\n-on negative numbers by sign extension.\n-\n-As an extension to the C language, GCC does not use the latitude given in\n-C99 and C11 only to treat certain aspects of signed @samp{<<} as undefined.\n-However, @option{-fsanitize=shift} (and @option{-fsanitize=undefined}) will\n-diagnose such cases.  They are also diagnosed where constant\n-expressions are required.\n-\n-@item\n-@cite{The sign of the remainder on integer division (C90 6.3.5).}\n-\n-GCC always follows the C99 and C11 requirement that the result of division is\n-truncated towards zero.\n-\n-@end itemize\n-\n-@node Floating point implementation\n-@section Floating Point\n-\n-@itemize @bullet\n-@item\n-@cite{The accuracy of the floating-point operations and of the library\n-functions in @code{<math.h>} and @code{<complex.h>} that return floating-point\n-results (C90, C99 and C11 5.2.4.2.2).}\n-\n-The accuracy is unknown.\n-\n-@item\n-@cite{The rounding behaviors characterized by non-standard values\n-of @code{FLT_ROUNDS} @gol\n-(C90, C99 and C11 5.2.4.2.2).}\n-\n-GCC does not use such values.\n-\n-@item\n-@cite{The evaluation methods characterized by non-standard negative\n-values of @code{FLT_EVAL_METHOD} (C99 and C11 5.2.4.2.2).}\n-\n-GCC does not use such values.\n-\n-@item\n-@cite{The direction of rounding when an integer is converted to a\n-floating-point number that cannot exactly represent the original\n-value (C90 6.2.1.3, C99 and C11 6.3.1.4).}\n-\n-C99 Annex F is followed.\n-\n-@item\n-@cite{The direction of rounding when a floating-point number is\n-converted to a narrower floating-point number (C90 6.2.1.4, C99 and C11\n-6.3.1.5).}\n-\n-C99 Annex F is followed.\n-\n-@item\n-@cite{How the nearest representable value or the larger or smaller\n-representable value immediately adjacent to the nearest representable\n-value is chosen for certain floating constants (C90 6.1.3.1, C99 and C11\n-6.4.4.2).}\n-\n-C99 Annex F is followed.\n-\n-@item\n-@cite{Whether and how floating expressions are contracted when not\n-disallowed by the @code{FP_CONTRACT} pragma (C99 and C11 6.5).}\n-\n-Expressions are currently only contracted if @option{-ffp-contract=fast},\n-@option{-funsafe-math-optimizations} or @option{-ffast-math} are used.\n-This is subject to change.\n-\n-@item\n-@cite{The default state for the @code{FENV_ACCESS} pragma (C99 and C11\n-7.6.1).}\n-\n-This pragma is not implemented, but the default is to ``off'' unless\n-@option{-frounding-math} is used and @option{-fno-trapping-math} is not\n-in which case it is ``on''.\n-\n-@item\n-@cite{Additional floating-point exceptions, rounding modes, environments,\n-and classifications, and their macro names (C99 and C11 7.6, C99 and\n-C11 7.12).}\n-\n-This is dependent on the implementation of the C library, and is not\n-defined by GCC itself.\n-\n-@item\n-@cite{The default state for the @code{FP_CONTRACT} pragma (C99 and C11\n-7.12.2).}\n-\n-This pragma is not implemented.  Expressions are currently only\n-contracted if @option{-ffp-contract=fast},\n-@option{-funsafe-math-optimizations} or @option{-ffast-math} are used.\n-This is subject to change.\n-\n-@item\n-@cite{Whether the ``inexact'' floating-point exception can be raised\n-when the rounded result actually does equal the mathematical result\n-in an IEC 60559 conformant implementation (C99 F.9).}\n-\n-This is dependent on the implementation of the C library, and is not\n-defined by GCC itself.\n-\n-@item\n-@cite{Whether the ``underflow'' (and ``inexact'') floating-point\n-exception can be raised when a result is tiny but not inexact in an\n-IEC 60559 conformant implementation (C99 F.9).}\n-\n-This is dependent on the implementation of the C library, and is not\n-defined by GCC itself.\n-\n-@end itemize\n-\n-@node Arrays and pointers implementation\n-@section Arrays and Pointers\n-\n-@itemize @bullet\n-@item\n-@cite{The result of converting a pointer to an integer or\n-vice versa (C90 6.3.4, C99 and C11 6.3.2.3).}\n-\n-A cast from pointer to integer discards most-significant bits if the\n-pointer representation is larger than the integer type,\n-sign-extends@footnote{Future versions of GCC may zero-extend, or use\n-a target-defined @code{ptr_extend} pattern.  Do not rely on sign extension.}\n-if the pointer representation is smaller than the integer type, otherwise\n-the bits are unchanged.\n-@c ??? We've always claimed that pointers were unsigned entities.\n-@c Shouldn't we therefore be doing zero-extension?  If so, the bug\n-@c is in convert_to_integer, where we call type_for_size and request\n-@c a signed integral type.  On the other hand, it might be most useful\n-@c for the target if we extend according to POINTERS_EXTEND_UNSIGNED.\n-\n-A cast from integer to pointer discards most-significant bits if the\n-pointer representation is smaller than the integer type, extends according\n-to the signedness of the integer type if the pointer representation\n-is larger than the integer type, otherwise the bits are unchanged.\n-\n-When casting from pointer to integer and back again, the resulting\n-pointer must reference the same object as the original pointer, otherwise\n-the behavior is undefined.  That is, one may not use integer arithmetic to\n-avoid the undefined behavior of pointer arithmetic as proscribed in\n-C99 and C11 6.5.6/8.\n-\n-@item\n-@cite{The size of the result of subtracting two pointers to elements\n-of the same array (C90 6.3.6, C99 and C11 6.5.6).}\n-\n-The value is as specified in the standard and the type is determined\n-by the ABI@.\n-\n-@end itemize\n-\n-@node Hints implementation\n-@section Hints\n-\n-@itemize @bullet\n-@item\n-@cite{The extent to which suggestions made by using the @code{register}\n-storage-class specifier are effective (C90 6.5.1, C99 and C11 6.7.1).}\n-\n-The @code{register} specifier affects code generation only in these ways:\n-\n-@itemize @bullet\n-@item\n-When used as part of the register variable extension, see\n-@ref{Explicit Register Variables}.\n-\n-@item\n-When @option{-O0} is in use, the compiler allocates distinct stack\n-memory for all variables that do not have the @code{register}\n-storage-class specifier; if @code{register} is specified, the variable\n-may have a shorter lifespan than the code would indicate and may never\n-be placed in memory.\n-\n-@item\n-On some rare x86 targets, @code{setjmp} doesn't save the registers in\n-all circumstances.  In those cases, GCC doesn't allocate any variables\n-in registers unless they are marked @code{register}.\n-\n-@end itemize\n-\n-@item\n-@cite{The extent to which suggestions made by using the inline function\n-specifier are effective (C99 and C11 6.7.4).}\n-\n-GCC will not inline any functions if the @option{-fno-inline} option is\n-used or if @option{-O0} is used.  Otherwise, GCC may still be unable to\n-inline a function for many reasons; the @option{-Winline} option may be\n-used to determine if a function has not been inlined and why not.\n-\n-@end itemize\n-\n-@node Structures unions enumerations and bit-fields implementation\n-@section Structures, Unions, Enumerations, and Bit-Fields\n-\n-@itemize @bullet\n-@item\n-@cite{A member of a union object is accessed using a member of a\n-different type (C90 6.3.2.3).}\n-\n-The relevant bytes of the representation of the object are treated as\n-an object of the type used for the access.  @xref{Type-punning}.  This\n-may be a trap representation.\n-\n-@item\n-@cite{Whether a ``plain'' @code{int} bit-field is treated as a\n-@code{signed int} bit-field or as an @code{unsigned int} bit-field\n-(C90 6.5.2, C90 6.5.2.1, C99 and C11 6.7.2, C99 and C11 6.7.2.1).}\n-\n-@opindex funsigned-bitfields\n-By default it is treated as @code{signed int} but this may be changed\n-by the @option{-funsigned-bitfields} option.\n-\n-@item\n-@cite{Allowable bit-field types other than @code{_Bool}, @code{signed int},\n-and @code{unsigned int} (C99 and C11 6.7.2.1).}\n-\n-Other integer types, such as @code{long int}, and enumerated types are\n-permitted even in strictly conforming mode.\n-\n-@item\n-@cite{Whether atomic types are permitted for bit-fields (C11 6.7.2.1).}\n-\n-Atomic types are not permitted for bit-fields.\n-\n-@item\n-@cite{Whether a bit-field can straddle a storage-unit boundary (C90\n-6.5.2.1, C99 and C11 6.7.2.1).}\n-\n-Determined by ABI@.\n-\n-@item\n-@cite{The order of allocation of bit-fields within a unit (C90\n-6.5.2.1, C99 and C11 6.7.2.1).}\n-\n-Determined by ABI@.\n-\n-@item\n-@cite{The alignment of non-bit-field members of structures (C90\n-6.5.2.1, C99 and C11 6.7.2.1).}\n-\n-Determined by ABI@.\n-\n-@item\n-@cite{The integer type compatible with each enumerated type (C90\n-6.5.2.2, C99 and C11 6.7.2.2).}\n-\n-@opindex fshort-enums\n-Normally, the type is @code{unsigned int} if there are no negative\n-values in the enumeration, otherwise @code{int}.  If\n-@option{-fshort-enums} is specified, then if there are negative values\n-it is the first of @code{signed char}, @code{short} and @code{int}\n-that can represent all the values, otherwise it is the first of\n-@code{unsigned char}, @code{unsigned short} and @code{unsigned int}\n-that can represent all the values.\n-@c On a few unusual targets with 64-bit int, this doesn't agree with\n-@c the code and one of the types accessed via mode attributes (which\n-@c are not currently considered extended integer types) may be used.\n-@c If these types are made extended integer types, it would still be\n-@c the case that -fshort-enums stops the implementation from\n-@c conforming to C90 on those targets.\n-\n-On some targets, @option{-fshort-enums} is the default; this is\n-determined by the ABI@.\n-\n-@end itemize\n-\n-@node Qualifiers implementation\n-@section Qualifiers\n-\n-@itemize @bullet\n-@item\n-@cite{What constitutes an access to an object that has volatile-qualified\n-type (C90 6.5.3, C99 and C11 6.7.3).}\n-\n-Such an object is normally accessed by pointers and used for accessing\n-hardware.  In most expressions, it is intuitively obvious what is a read\n-and what is a write.  For example\n-\n-@smallexample\n-volatile int *dst = @var{somevalue};\n-volatile int *src = @var{someothervalue};\n-*dst = *src;\n-@end smallexample\n-\n-@noindent\n-will cause a read of the volatile object pointed to by @var{src} and store the\n-value into the volatile object pointed to by @var{dst}.  There is no\n-guarantee that these reads and writes are atomic, especially for objects\n-larger than @code{int}.\n-\n-However, if the volatile storage is not being modified, and the value of\n-the volatile storage is not used, then the situation is less obvious.\n-For example\n-\n-@smallexample\n-volatile int *src = @var{somevalue};\n-*src;\n-@end smallexample\n-\n-According to the C standard, such an expression is an rvalue whose type\n-is the unqualified version of its original type, i.e.@: @code{int}.  Whether\n-GCC interprets this as a read of the volatile object being pointed to or\n-only as a request to evaluate the expression for its side effects depends\n-on this type.\n-\n-If it is a scalar type, or on most targets an aggregate type whose only\n-member object is of a scalar type, or a union type whose member objects\n-are of scalar types, the expression is interpreted by GCC as a read of\n-the volatile object; in the other cases, the expression is only evaluated\n-for its side effects.\n-\n-When an object of an aggregate type, with the same size and alignment as a\n-scalar type @code{S}, is the subject of a volatile access by an assignment\n-expression or an atomic function, the access to it is performed as if the\n-object's declared type were @code{volatile S}.\n-\n-@end itemize\n-\n-@node Declarators implementation\n-@section Declarators\n-\n-@itemize @bullet\n-@item\n-@cite{The maximum number of declarators that may modify an arithmetic,\n-structure or union type (C90 6.5.4).}\n-\n-GCC is only limited by available memory.\n-\n-@end itemize\n-\n-@node Statements implementation\n-@section Statements\n-\n-@itemize @bullet\n-@item\n-@cite{The maximum number of @code{case} values in a @code{switch}\n-statement (C90 6.6.4.2).}\n-\n-GCC is only limited by available memory.\n-\n-@end itemize\n-\n-@node Preprocessing directives implementation\n-@section Preprocessing Directives\n-\n-@xref{Implementation-defined behavior, , Implementation-defined\n-behavior, cpp, The C Preprocessor}, for details of these aspects of\n-implementation-defined behavior.\n-\n-@itemize @bullet\n-@item\n-@cite{The locations within @code{#pragma} directives where header name\n-preprocessing tokens are recognized (C11 6.4, C11 6.4.7).}\n-\n-@item\n-@cite{How sequences in both forms of header names are mapped to headers\n-or external source file names (C90 6.1.7, C99 and C11 6.4.7).}\n-\n-@item\n-@cite{Whether the value of a character constant in a constant expression\n-that controls conditional inclusion matches the value of the same character\n-constant in the execution character set (C90 6.8.1, C99 and C11 6.10.1).}\n-\n-@item\n-@cite{Whether the value of a single-character character constant in a\n-constant expression that controls conditional inclusion may have a\n-negative value (C90 6.8.1, C99 and C11 6.10.1).}\n-\n-@item\n-@cite{The places that are searched for an included @samp{<>} delimited\n-header, and how the places are specified or the header is\n-identified (C90 6.8.2, C99 and C11 6.10.2).}\n-\n-@item\n-@cite{How the named source file is searched for in an included @samp{\"\"}\n-delimited header (C90 6.8.2, C99 and C11 6.10.2).}\n-\n-@item\n-@cite{The method by which preprocessing tokens (possibly resulting from\n-macro expansion) in a @code{#include} directive are combined into a header\n-name (C90 6.8.2, C99 and C11 6.10.2).}\n-\n-@item\n-@cite{The nesting limit for @code{#include} processing (C90 6.8.2, C99\n-and C11 6.10.2).}\n-\n-@item\n-@cite{Whether the @samp{#} operator inserts a @samp{\\} character before\n-the @samp{\\} character that begins a universal character name in a\n-character constant or string literal (C99 and C11 6.10.3.2).}\n-\n-@item\n-@cite{The behavior on each recognized non-@code{STDC #pragma}\n-directive (C90 6.8.6, C99 and C11 6.10.6).}\n-\n-@xref{Pragmas, , Pragmas, cpp, The C Preprocessor}, for details of\n-pragmas accepted by GCC on all targets.  @xref{Pragmas, , Pragmas\n-Accepted by GCC}, for details of target-specific pragmas.\n-\n-@item\n-@cite{The definitions for @code{__DATE__} and @code{__TIME__} when\n-respectively, the date and time of translation are not available (C90\n-6.8.8, C99 6.10.8, C11 6.10.8.1).}\n-\n-@end itemize\n-\n-@node Library functions implementation\n-@section Library Functions\n-\n-The behavior of most of these points are dependent on the implementation\n-of the C library, and are not defined by GCC itself.\n-\n-@itemize @bullet\n-@item\n-@cite{The null pointer constant to which the macro @code{NULL} expands\n-(C90 7.1.6, C99 7.17, C11 7.19).}\n-\n-In @code{<stddef.h>}, @code{NULL} expands to @code{((void *)0)}.  GCC\n-does not provide the other headers which define @code{NULL} and some\n-library implementations may use other definitions in those headers.\n-\n-@end itemize\n-\n-@node Architecture implementation\n-@section Architecture\n-\n-@itemize @bullet\n-@item\n-@cite{The values or expressions assigned to the macros specified in the\n-headers @code{<float.h>}, @code{<limits.h>}, and @code{<stdint.h>}\n-(C90, C99 and C11 5.2.4.2, C99 7.18.2, C99 7.18.3, C11 7.20.2, C11 7.20.3).}\n-\n-Determined by ABI@.\n-\n-@item\n-@cite{The result of attempting to indirectly access an object with\n-automatic or thread storage duration from a thread other than the one\n-with which it is associated (C11 6.2.4).}\n-\n-Such accesses are supported, subject to the same requirements for\n-synchronization for concurrent accesses as for concurrent accesses to\n-any object.\n-\n-@item\n-@cite{The number, order, and encoding of bytes in any object\n-(when not explicitly specified in this International Standard) (C99\n-and C11 6.2.6.1).}\n-\n-Determined by ABI@.\n-\n-@item\n-@cite{Whether any extended alignments are supported and the contexts\n-in which they are supported (C11 6.2.8).}\n-\n-Extended alignments up to @math{2^{28}} (bytes) are supported for\n-objects of automatic storage duration.  Alignments supported for\n-objects of static and thread storage duration are determined by the\n-ABI.\n-\n-@item\n-@cite{Valid alignment values other than those returned by an _Alignof\n-expression for fundamental types, if any (C11 6.2.8).}\n-\n-Valid alignments are powers of 2 up to and including @math{2^{28}}.\n-\n-@item\n-@cite{The value of the result of the @code{sizeof} and @code{_Alignof}\n-operators (C90 6.3.3.4, C99 and C11 6.5.3.4).}\n-\n-Determined by ABI@.\n-\n-@end itemize\n-\n-@node Locale-specific behavior implementation\n-@section Locale-Specific Behavior\n-\n-The behavior of these points are dependent on the implementation\n-of the C library, and are not defined by GCC itself."}, {"sha": "1eee18c0b091f3034d41a7d50149bd347ee77971", "filename": "gcc/doc/implement-cxx.texi", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fimplement-cxx.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fimplement-cxx.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fimplement-cxx.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,62 +0,0 @@\n-@c Copyright (C) 2009-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@node C++ Implementation\n-@chapter C++ Implementation-Defined Behavior\n-@cindex implementation-defined behavior, C++ language\n-\n-A conforming implementation of ISO C++ is required to document its\n-choice of behavior in each of the areas that are designated\n-``implementation defined''.  The following lists all such areas,\n-along with the section numbers from the ISO/IEC 14882:1998 and ISO/IEC\n-14882:2003 standards.  Some areas are only implementation-defined in\n-one version of the standard.\n-\n-Some choices depend on the externally determined ABI for the platform\n-(including standard character encodings) which GCC follows; these are\n-listed as ``determined by ABI'' below.  @xref{Compatibility, , Binary\n-Compatibility}, and @uref{https://gcc.gnu.org/readings.html}.  Some\n-choices are documented in the preprocessor manual.\n-@xref{Implementation-defined behavior, , Implementation-defined\n-behavior, cpp, The C Preprocessor}.  Some choices are documented in\n-the corresponding document for the C language.  @xref{C\n-Implementation}.  Some choices are made by the library and operating\n-system (or other environment when compiling for a freestanding\n-environment); refer to their documentation for details.\n-\n-@menu\n-* Conditionally-supported behavior::\n-* Exception handling::\n-@end menu\n-\n-@node Conditionally-supported behavior\n-@section Conditionally-Supported Behavior\n-\n-@cite{Each implementation shall include documentation that identifies\n-all conditionally-supported constructs that it does not support (C++0x\n-1.4).}\n-\n-@itemize @bullet\n-@item\n-@cite{Whether an argument of class type with a non-trivial copy\n-constructor or destructor can be passed to ... (C++0x 5.2.2).}\n-\n-Such argument passing is supported, using the same\n-pass-by-invisible-reference approach used for normal function\n-arguments of such types.\n-\n-@end itemize\n-\n-@node Exception handling\n-@section Exception Handling\n-\n-@itemize @bullet\n-@item\n-@cite{In the situation where no matching handler is found, it is\n-implementation-defined whether or not the stack is unwound before\n-std::terminate() is called (C++98 15.5.1).}\n-\n-The stack is not unwound before std::terminate is called.\n-\n-@end itemize"}, {"sha": "e2bcdfd579b2b5ca30beb91fa9dde4df179b6af8", "filename": "gcc/doc/include/fdl.texi", "status": "removed", "additions": 0, "deletions": 547, "changes": 547, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Finclude%2Ffdl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Finclude%2Ffdl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finclude%2Ffdl.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,547 +0,0 @@\n-@ignore\n-@c Set file name and title for man page.\n-@setfilename gfdl\n-@settitle GNU Free Documentation License\n-@c man begin SEEALSO\n-gpl(7), fsf-funding(7).\n-@c man end\n-@c man begin COPYRIGHT\n-Copyright @copyright{} 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.\n-@uref{https://fsf.org/}\n-\n-Everyone is permitted to copy and distribute verbatim copies\n-of this license document, but changing it is not allowed.\n-@c This file is intended to be included within another document,\n-@c hence no sectioning command or @node.\n-@c man end\n-@end ignore\n-@c Special handling for inclusion in the install manual.\n-@ifset gfdlhtml\n-@ifnothtml\n-@comment node-name,     next,          previous, up\n-@node    GNU Free Documentation License, Concept Index, Specific, Top\n-@end ifnothtml\n-@html\n-<h1 align=\"center\">Installing GCC: GNU Free Documentation License</h1>\n-@end html\n-@ifnothtml\n-@unnumbered GNU Free Documentation License\n-@end ifnothtml\n-@end ifset\n-@c man begin DESCRIPTION\n-@ifclear gfdlhtml\n-@comment For some cases, this default @node/@unnumbered is not applicable and\n-@comment causes warnings.  In those cases, the including file can set\n-@comment nodefaultgnufreedocumentationlicensenode and provide it's own version.\n-@comment F.i., when this file is included in an @raisesections context, the\n-@comment including file can use an @unnumberedsec.\n-@ifclear nodefaultgnufreedocumentationlicensenode\n-@node GNU Free Documentation License\n-@unnumbered GNU Free Documentation License\n-@end ifclear\n-@end ifclear\n-\n-@cindex FDL, GNU Free Documentation License\n-@center Version 1.3, 3 November 2008\n-\n-@display\n-Copyright @copyright{} 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.\n-@uref{https://fsf.org/}\n-\n-Everyone is permitted to copy and distribute verbatim copies\n-of this license document, but changing it is not allowed.\n-@end display\n-\n-@enumerate 0\n-@item\n-PREAMBLE\n-\n-The purpose of this License is to make a manual, textbook, or other\n-functional and useful document @dfn{free} in the sense of freedom: to\n-assure everyone the effective freedom to copy and redistribute it,\n-with or without modifying it, either commercially or noncommercially.\n-Secondarily, this License preserves for the author and publisher a way\n-to get credit for their work, while not being considered responsible\n-for modifications made by others.\n-\n-This License is a kind of ``copyleft'', which means that derivative\n-works of the document must themselves be free in the same sense.  It\n-complements the GNU General Public License, which is a copyleft\n-license designed for free software.\n-\n-We have designed this License in order to use it for manuals for free\n-software, because free software needs free documentation: a free\n-program should come with manuals providing the same freedoms that the\n-software does.  But this License is not limited to software manuals;\n-it can be used for any textual work, regardless of subject matter or\n-whether it is published as a printed book.  We recommend this License\n-principally for works whose purpose is instruction or reference.\n-\n-@item\n-APPLICABILITY AND DEFINITIONS\n-\n-This License applies to any manual or other work, in any medium, that\n-contains a notice placed by the copyright holder saying it can be\n-distributed under the terms of this License.  Such a notice grants a\n-world-wide, royalty-free license, unlimited in duration, to use that\n-work under the conditions stated herein.  The ``Document'', below,\n-refers to any such manual or work.  Any member of the public is a\n-licensee, and is addressed as ``you''.  You accept the license if you\n-copy, modify or distribute the work in a way requiring permission\n-under copyright law.\n-\n-A ``Modified Version'' of the Document means any work containing the\n-Document or a portion of it, either copied verbatim, or with\n-modifications and/or translated into another language.\n-\n-A ``Secondary Section'' is a named appendix or a front-matter section\n-of the Document that deals exclusively with the relationship of the\n-publishers or authors of the Document to the Document's overall\n-subject (or to related matters) and contains nothing that could fall\n-directly within that overall subject.  (Thus, if the Document is in\n-part a textbook of mathematics, a Secondary Section may not explain\n-any mathematics.)  The relationship could be a matter of historical\n-connection with the subject or with related matters, or of legal,\n-commercial, philosophical, ethical or political position regarding\n-them.\n-\n-The ``Invariant Sections'' are certain Secondary Sections whose titles\n-are designated, as being those of Invariant Sections, in the notice\n-that says that the Document is released under this License.  If a\n-section does not fit the above definition of Secondary then it is not\n-allowed to be designated as Invariant.  The Document may contain zero\n-Invariant Sections.  If the Document does not identify any Invariant\n-Sections then there are none.\n-\n-The ``Cover Texts'' are certain short passages of text that are listed,\n-as Front-Cover Texts or Back-Cover Texts, in the notice that says that\n-the Document is released under this License.  A Front-Cover Text may\n-be at most 5 words, and a Back-Cover Text may be at most 25 words.\n-\n-A ``Transparent'' copy of the Document means a machine-readable copy,\n-represented in a format whose specification is available to the\n-general public, that is suitable for revising the document\n-straightforwardly with generic text editors or (for images composed of\n-pixels) generic paint programs or (for drawings) some widely available\n-drawing editor, and that is suitable for input to text formatters or\n-for automatic translation to a variety of formats suitable for input\n-to text formatters.  A copy made in an otherwise Transparent file\n-format whose markup, or absence of markup, has been arranged to thwart\n-or discourage subsequent modification by readers is not Transparent.\n-An image format is not Transparent if used for any substantial amount\n-of text.  A copy that is not ``Transparent'' is called ``Opaque''.\n-\n-Examples of suitable formats for Transparent copies include plain\n-@sc{ascii} without markup, Texinfo input format, La@TeX{} input\n-format, @acronym{SGML} or @acronym{XML} using a publicly available\n-@acronym{DTD}, and standard-conforming simple @acronym{HTML},\n-PostScript or @acronym{PDF} designed for human modification.  Examples\n-of transparent image formats include @acronym{PNG}, @acronym{XCF} and\n-@acronym{JPG}.  Opaque formats include proprietary formats that can be\n-read and edited only by proprietary word processors, @acronym{SGML} or\n-@acronym{XML} for which the @acronym{DTD} and/or processing tools are\n-not generally available, and the machine-generated @acronym{HTML},\n-PostScript or @acronym{PDF} produced by some word processors for\n-output purposes only.\n-\n-The ``Title Page'' means, for a printed book, the title page itself,\n-plus such following pages as are needed to hold, legibly, the material\n-this License requires to appear in the title page.  For works in\n-formats which do not have any title page as such, ``Title Page'' means\n-the text near the most prominent appearance of the work's title,\n-preceding the beginning of the body of the text.\n-\n-The ``publisher'' means any person or entity that distributes copies\n-of the Document to the public.\n-\n-A section ``Entitled XYZ'' means a named subunit of the Document whose\n-title either is precisely XYZ or contains XYZ in parentheses following\n-text that translates XYZ in another language.  (Here XYZ stands for a\n-specific section name mentioned below, such as ``Acknowledgements'',\n-``Dedications'', ``Endorsements'', or ``History''.)  To ``Preserve the Title''\n-of such a section when you modify the Document means that it remains a\n-section ``Entitled XYZ'' according to this definition.\n-\n-The Document may include Warranty Disclaimers next to the notice which\n-states that this License applies to the Document.  These Warranty\n-Disclaimers are considered to be included by reference in this\n-License, but only as regards disclaiming warranties: any other\n-implication that these Warranty Disclaimers may have is void and has\n-no effect on the meaning of this License.\n-\n-@item\n-VERBATIM COPYING\n-\n-You may copy and distribute the Document in any medium, either\n-commercially or noncommercially, provided that this License, the\n-copyright notices, and the license notice saying this License applies\n-to the Document are reproduced in all copies, and that you add no other\n-conditions whatsoever to those of this License.  You may not use\n-technical measures to obstruct or control the reading or further\n-copying of the copies you make or distribute.  However, you may accept\n-compensation in exchange for copies.  If you distribute a large enough\n-number of copies you must also follow the conditions in section 3.\n-\n-You may also lend copies, under the same conditions stated above, and\n-you may publicly display copies.\n-\n-@item\n-COPYING IN QUANTITY\n-\n-If you publish printed copies (or copies in media that commonly have\n-printed covers) of the Document, numbering more than 100, and the\n-Document's license notice requires Cover Texts, you must enclose the\n-copies in covers that carry, clearly and legibly, all these Cover\n-Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on\n-the back cover.  Both covers must also clearly and legibly identify\n-you as the publisher of these copies.  The front cover must present\n-the full title with all words of the title equally prominent and\n-visible.  You may add other material on the covers in addition.\n-Copying with changes limited to the covers, as long as they preserve\n-the title of the Document and satisfy these conditions, can be treated\n-as verbatim copying in other respects.\n-\n-If the required texts for either cover are too voluminous to fit\n-legibly, you should put the first ones listed (as many as fit\n-reasonably) on the actual cover, and continue the rest onto adjacent\n-pages.\n-\n-If you publish or distribute Opaque copies of the Document numbering\n-more than 100, you must either include a machine-readable Transparent\n-copy along with each Opaque copy, or state in or with each Opaque copy\n-a computer-network location from which the general network-using\n-public has access to download using public-standard network protocols\n-a complete Transparent copy of the Document, free of added material.\n-If you use the latter option, you must take reasonably prudent steps,\n-when you begin distribution of Opaque copies in quantity, to ensure\n-that this Transparent copy will remain thus accessible at the stated\n-location until at least one year after the last time you distribute an\n-Opaque copy (directly or through your agents or retailers) of that\n-edition to the public.\n-\n-It is requested, but not required, that you contact the authors of the\n-Document well before redistributing any large number of copies, to give\n-them a chance to provide you with an updated version of the Document.\n-\n-@item\n-MODIFICATIONS\n-\n-You may copy and distribute a Modified Version of the Document under\n-the conditions of sections 2 and 3 above, provided that you release\n-the Modified Version under precisely this License, with the Modified\n-Version filling the role of the Document, thus licensing distribution\n-and modification of the Modified Version to whoever possesses a copy\n-of it.  In addition, you must do these things in the Modified Version:\n-\n-@enumerate A\n-@item\n-Use in the Title Page (and on the covers, if any) a title distinct\n-from that of the Document, and from those of previous versions\n-(which should, if there were any, be listed in the History section\n-of the Document).  You may use the same title as a previous version\n-if the original publisher of that version gives permission.\n-\n-@item\n-List on the Title Page, as authors, one or more persons or entities\n-responsible for authorship of the modifications in the Modified\n-Version, together with at least five of the principal authors of the\n-Document (all of its principal authors, if it has fewer than five),\n-unless they release you from this requirement.\n-\n-@item\n-State on the Title page the name of the publisher of the\n-Modified Version, as the publisher.\n-\n-@item\n-Preserve all the copyright notices of the Document.\n-\n-@item\n-Add an appropriate copyright notice for your modifications\n-adjacent to the other copyright notices.\n-\n-@item\n-Include, immediately after the copyright notices, a license notice\n-giving the public permission to use the Modified Version under the\n-terms of this License, in the form shown in the Addendum below.\n-\n-@item\n-Preserve in that license notice the full lists of Invariant Sections\n-and required Cover Texts given in the Document's license notice.\n-\n-@item\n-Include an unaltered copy of this License.\n-\n-@item\n-Preserve the section Entitled ``History'', Preserve its Title, and add\n-to it an item stating at least the title, year, new authors, and\n-publisher of the Modified Version as given on the Title Page.  If\n-there is no section Entitled ``History'' in the Document, create one\n-stating the title, year, authors, and publisher of the Document as\n-given on its Title Page, then add an item describing the Modified\n-Version as stated in the previous sentence.\n-\n-@item\n-Preserve the network location, if any, given in the Document for\n-public access to a Transparent copy of the Document, and likewise\n-the network locations given in the Document for previous versions\n-it was based on.  These may be placed in the ``History'' section.\n-You may omit a network location for a work that was published at\n-least four years before the Document itself, or if the original\n-publisher of the version it refers to gives permission.\n-\n-@item\n-For any section Entitled ``Acknowledgements'' or ``Dedications'', Preserve\n-the Title of the section, and preserve in the section all the\n-substance and tone of each of the contributor acknowledgements and/or\n-dedications given therein.\n-\n-@item\n-Preserve all the Invariant Sections of the Document,\n-unaltered in their text and in their titles.  Section numbers\n-or the equivalent are not considered part of the section titles.\n-\n-@item\n-Delete any section Entitled ``Endorsements''.  Such a section\n-may not be included in the Modified Version.\n-\n-@item\n-Do not retitle any existing section to be Entitled ``Endorsements'' or\n-to conflict in title with any Invariant Section.\n-\n-@item\n-Preserve any Warranty Disclaimers.\n-@end enumerate\n-\n-If the Modified Version includes new front-matter sections or\n-appendices that qualify as Secondary Sections and contain no material\n-copied from the Document, you may at your option designate some or all\n-of these sections as invariant.  To do this, add their titles to the\n-list of Invariant Sections in the Modified Version's license notice.\n-These titles must be distinct from any other section titles.\n-\n-You may add a section Entitled ``Endorsements'', provided it contains\n-nothing but endorsements of your Modified Version by various\n-parties---for example, statements of peer review or that the text has\n-been approved by an organization as the authoritative definition of a\n-standard.\n-\n-You may add a passage of up to five words as a Front-Cover Text, and a\n-passage of up to 25 words as a Back-Cover Text, to the end of the list\n-of Cover Texts in the Modified Version.  Only one passage of\n-Front-Cover Text and one of Back-Cover Text may be added by (or\n-through arrangements made by) any one entity.  If the Document already\n-includes a cover text for the same cover, previously added by you or\n-by arrangement made by the same entity you are acting on behalf of,\n-you may not add another; but you may replace the old one, on explicit\n-permission from the previous publisher that added the old one.\n-\n-The author(s) and publisher(s) of the Document do not by this License\n-give permission to use their names for publicity for or to assert or\n-imply endorsement of any Modified Version.\n-\n-@item\n-COMBINING DOCUMENTS\n-\n-You may combine the Document with other documents released under this\n-License, under the terms defined in section 4 above for modified\n-versions, provided that you include in the combination all of the\n-Invariant Sections of all of the original documents, unmodified, and\n-list them all as Invariant Sections of your combined work in its\n-license notice, and that you preserve all their Warranty Disclaimers.\n-\n-The combined work need only contain one copy of this License, and\n-multiple identical Invariant Sections may be replaced with a single\n-copy.  If there are multiple Invariant Sections with the same name but\n-different contents, make the title of each such section unique by\n-adding at the end of it, in parentheses, the name of the original\n-author or publisher of that section if known, or else a unique number.\n-Make the same adjustment to the section titles in the list of\n-Invariant Sections in the license notice of the combined work.\n-\n-In the combination, you must combine any sections Entitled ``History''\n-in the various original documents, forming one section Entitled\n-``History''; likewise combine any sections Entitled ``Acknowledgements'',\n-and any sections Entitled ``Dedications''.  You must delete all\n-sections Entitled ``Endorsements.''\n-\n-@item\n-COLLECTIONS OF DOCUMENTS\n-\n-You may make a collection consisting of the Document and other documents\n-released under this License, and replace the individual copies of this\n-License in the various documents with a single copy that is included in\n-the collection, provided that you follow the rules of this License for\n-verbatim copying of each of the documents in all other respects.\n-\n-You may extract a single document from such a collection, and distribute\n-it individually under this License, provided you insert a copy of this\n-License into the extracted document, and follow this License in all\n-other respects regarding verbatim copying of that document.\n-\n-@item\n-AGGREGATION WITH INDEPENDENT WORKS\n-\n-A compilation of the Document or its derivatives with other separate\n-and independent documents or works, in or on a volume of a storage or\n-distribution medium, is called an ``aggregate'' if the copyright\n-resulting from the compilation is not used to limit the legal rights\n-of the compilation's users beyond what the individual works permit.\n-When the Document is included in an aggregate, this License does not\n-apply to the other works in the aggregate which are not themselves\n-derivative works of the Document.\n-\n-If the Cover Text requirement of section 3 is applicable to these\n-copies of the Document, then if the Document is less than one half of\n-the entire aggregate, the Document's Cover Texts may be placed on\n-covers that bracket the Document within the aggregate, or the\n-electronic equivalent of covers if the Document is in electronic form.\n-Otherwise they must appear on printed covers that bracket the whole\n-aggregate.\n-\n-@item\n-TRANSLATION\n-\n-Translation is considered a kind of modification, so you may\n-distribute translations of the Document under the terms of section 4.\n-Replacing Invariant Sections with translations requires special\n-permission from their copyright holders, but you may include\n-translations of some or all Invariant Sections in addition to the\n-original versions of these Invariant Sections.  You may include a\n-translation of this License, and all the license notices in the\n-Document, and any Warranty Disclaimers, provided that you also include\n-the original English version of this License and the original versions\n-of those notices and disclaimers.  In case of a disagreement between\n-the translation and the original version of this License or a notice\n-or disclaimer, the original version will prevail.\n-\n-If a section in the Document is Entitled ``Acknowledgements'',\n-``Dedications'', or ``History'', the requirement (section 4) to Preserve\n-its Title (section 1) will typically require changing the actual\n-title.\n-\n-@item\n-TERMINATION\n-\n-You may not copy, modify, sublicense, or distribute the Document\n-except as expressly provided under this License.  Any attempt\n-otherwise to copy, modify, sublicense, or distribute it is void, and\n-will automatically terminate your rights under this License.\n-\n-However, if you cease all violation of this License, then your license\n-from a particular copyright holder is reinstated (a) provisionally,\n-unless and until the copyright holder explicitly and finally\n-terminates your license, and (b) permanently, if the copyright holder\n-fails to notify you of the violation by some reasonable means prior to\n-60 days after the cessation.\n-\n-Moreover, your license from a particular copyright holder is\n-reinstated permanently if the copyright holder notifies you of the\n-violation by some reasonable means, this is the first time you have\n-received notice of violation of this License (for any work) from that\n-copyright holder, and you cure the violation prior to 30 days after\n-your receipt of the notice.\n-\n-Termination of your rights under this section does not terminate the\n-licenses of parties who have received copies or rights from you under\n-this License.  If your rights have been terminated and not permanently\n-reinstated, receipt of a copy of some or all of the same material does\n-not give you any rights to use it.\n-\n-@item\n-FUTURE REVISIONS OF THIS LICENSE\n-\n-The Free Software Foundation may publish new, revised versions\n-of the GNU Free Documentation License from time to time.  Such new\n-versions will be similar in spirit to the present version, but may\n-differ in detail to address new problems or concerns.  See\n-@uref{https://www.gnu.org/copyleft/}.\n-\n-Each version of the License is given a distinguishing version number.\n-If the Document specifies that a particular numbered version of this\n-License ``or any later version'' applies to it, you have the option of\n-following the terms and conditions either of that specified version or\n-of any later version that has been published (not as a draft) by the\n-Free Software Foundation.  If the Document does not specify a version\n-number of this License, you may choose any version ever published (not\n-as a draft) by the Free Software Foundation.  If the Document\n-specifies that a proxy can decide which future versions of this\n-License can be used, that proxy's public statement of acceptance of a\n-version permanently authorizes you to choose that version for the\n-Document.\n-\n-@item\n-RELICENSING\n-\n-``Massive Multiauthor Collaboration Site'' (or ``MMC Site'') means any\n-World Wide Web server that publishes copyrightable works and also\n-provides prominent facilities for anybody to edit those works.  A\n-public wiki that anybody can edit is an example of such a server.  A\n-``Massive Multiauthor Collaboration'' (or ``MMC'') contained in the\n-site means any set of copyrightable works thus published on the MMC\n-site.\n-\n-``CC-BY-SA'' means the Creative Commons Attribution-Share Alike 3.0\n-license published by Creative Commons Corporation, a not-for-profit\n-corporation with a principal place of business in San Francisco,\n-California, as well as future copyleft versions of that license\n-published by that same organization.\n-\n-``Incorporate'' means to publish or republish a Document, in whole or\n-in part, as part of another Document.\n-\n-An MMC is ``eligible for relicensing'' if it is licensed under this\n-License, and if all works that were first published under this License\n-somewhere other than this MMC, and subsequently incorporated in whole\n-or in part into the MMC, (1) had no cover texts or invariant sections,\n-and (2) were thus incorporated prior to November 1, 2008.\n-\n-The operator of an MMC Site may republish an MMC contained in the site\n-under CC-BY-SA on the same site at any time before August 1, 2009,\n-provided the MMC is eligible for relicensing.\n-\n-@end enumerate\n-\n-@page\n-@unnumberedsec ADDENDUM: How to use this License for your documents\n-\n-To use this License in a document you have written, include a copy of\n-the License in the document and put the following copyright and\n-license notices just after the title page:\n-\n-@smallexample\n-@group\n-  Copyright (C)  @var{year}  @var{your name}.\n-  Permission is granted to copy, distribute and/or modify this document\n-  under the terms of the GNU Free Documentation License, Version 1.3\n-  or any later version published by the Free Software Foundation;\n-  with no Invariant Sections, no Front-Cover Texts, and no Back-Cover\n-  Texts.  A copy of the license is included in the section entitled ``GNU\n-  Free Documentation License''.\n-@end group\n-@end smallexample\n-\n-If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,\n-replace the ``with...Texts.'' line with this:\n-\n-@smallexample\n-@group\n-    with the Invariant Sections being @var{list their titles}, with\n-    the Front-Cover Texts being @var{list}, and with the Back-Cover Texts\n-    being @var{list}.\n-@end group\n-@end smallexample\n-\n-If you have Invariant Sections without Cover Texts, or some other\n-combination of the three, merge those two alternatives to suit the\n-situation.\n-\n-If your document contains nontrivial examples of program code, we\n-recommend releasing these examples in parallel under your choice of\n-free software license, such as the GNU General Public License,\n-to permit their use in free software.\n-\n-@c Local Variables:\n-@c ispell-local-pdict: \"ispell-dict\"\n-@c End:\n-\n-@c man end"}, {"sha": "d1583fabc0d8bec19f49bd13e78821cb0bc04527", "filename": "gcc/doc/include/funding.texi", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Finclude%2Ffunding.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Finclude%2Ffunding.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finclude%2Ffunding.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,60 +0,0 @@\n-@ignore\n-@c Set file name and title for man page.\n-@setfilename fsf-funding\n-@settitle Funding Free Software\n-@c man begin SEEALSO\n-gpl(7), gfdl(7).\n-@c man end\n-@end ignore\n-@node Funding\n-@c man begin DESCRIPTION\n-@unnumbered Funding Free Software\n-\n-If you want to have more free software a few years from now, it makes\n-sense for you to help encourage people to contribute funds for its\n-development.  The most effective approach known is to encourage\n-commercial redistributors to donate.\n-\n-Users of free software systems can boost the pace of development by\n-encouraging for-a-fee distributors to donate part of their selling price\n-to free software developers---the Free Software Foundation, and others.\n-\n-The way to convince distributors to do this is to demand it and expect\n-it from them.  So when you compare distributors, judge them partly by\n-how much they give to free software development.  Show distributors\n-they must compete to be the one who gives the most.\n-\n-To make this approach work, you must insist on numbers that you can\n-compare, such as, ``We will donate ten dollars to the Frobnitz project\n-for each disk sold.''  Don't be satisfied with a vague promise, such as\n-``A portion of the profits are donated,'' since it doesn't give a basis\n-for comparison.\n-\n-Even a precise fraction ``of the profits from this disk'' is not very\n-meaningful, since creative accounting and unrelated business decisions\n-can greatly alter what fraction of the sales price counts as profit.\n-If the price you pay is $50, ten percent of the profit is probably\n-less than a dollar; it might be a few cents, or nothing at all.\n-\n-Some redistributors do development work themselves.  This is useful too;\n-but to keep everyone honest, you need to inquire how much they do, and\n-what kind.  Some kinds of development make much more long-term\n-difference than others.  For example, maintaining a separate version of\n-a program contributes very little; maintaining the standard version of a\n-program for the whole community contributes much.  Easy new ports\n-contribute little, since someone else would surely do them; difficult\n-ports such as adding a new CPU to the GNU Compiler Collection contribute more;\n-major new features or packages contribute the most.\n-\n-By establishing the idea that supporting further development is ``the\n-proper thing to do'' when distributing free software for a fee, we can\n-assure a steady flow of resources into making more free software.\n-@c man end\n-\n-@display\n-@c man begin COPYRIGHT\n-Copyright @copyright{} 1994 Free Software Foundation, Inc.\n-Verbatim copying and redistribution of this section is permitted\n-without royalty; alteration is not permitted.\n-@c man end\n-@end display"}, {"sha": "4365e4fe1d8fd2bc5c973041748f8d5d1b719bff", "filename": "gcc/doc/include/gcc-common.texi", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Finclude%2Fgcc-common.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Finclude%2Fgcc-common.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finclude%2Fgcc-common.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,73 +0,0 @@\n-@c Copyright (C) 2001-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@c Version number and development mode.\n-@c version-GCC is @set to the base GCC version number.\n-@c DEVELOPMENT is @set for an in-development version, @clear for a\n-@c release version (corresponding to ``experimental''/anything else\n-@c in gcc/DEV-PHASE).\n-\n-@include gcc-vers.texi\n-\n-@c Common macros to support generating man pages:\n-\n-@macro gcctabopt{body}\n-@code{\\body\\}\n-@end macro\n-@macro gccoptlist{body}\n-@smallexample\n-\\body\\\n-@end smallexample\n-@end macro\n-@c Makeinfo handles the above macro OK, TeX needs manual line breaks;\n-@c they get lost at some point in handling the macro.  But if @macro is\n-@c used here rather than @alias, it produces double line breaks.\n-@iftex\n-@alias gol = *\n-@end iftex\n-@ifnottex\n-@macro gol\n-@end macro\n-@end ifnottex\n-\n-@c For FSF printing, define FSFPRINT.  Also update the ISBN and last\n-@c printing date for the manual being printed.\n-@c @set FSFPRINT\n-@ifset FSFPRINT\n-@smallbook\n-@finalout\n-@c Cause even numbered pages to be printed on the left hand side of\n-@c the page and odd numbered pages to be printed on the right hand\n-@c side of the page.  Using this, you can print on both sides of a\n-@c sheet of paper and have the text on the same part of the sheet.\n-\n-@c The text on right hand pages is pushed towards the right hand\n-@c margin and the text on left hand pages is pushed toward the left\n-@c hand margin.\n-@c (To provide the reverse effect, set bindingoffset to -0.75in.)\n-@tex\n-\\global\\bindingoffset=0.75in\n-\\global\\normaloffset =0.75in\n-@end tex\n-@end ifset\n-\n-@c Macro to generate a \"For the N.N.N version\" subtitle on the title\n-@c page of TeX documentation.  This macro should be used in the\n-@c titlepage environment after the title and any other subtitles have\n-@c been placed, and before any authors are placed.\n-@macro versionsubtitle\n-@ifclear DEVELOPMENT\n-@subtitle For @sc{gcc} version @value{version-GCC}\n-@end ifclear\n-@ifset DEVELOPMENT\n-@subtitle For @sc{gcc} version @value{version-GCC} (pre-release)\n-@end ifset\n-@ifset VERSION_PACKAGE\n-@sp 1\n-@subtitle @value{VERSION_PACKAGE}\n-@end ifset\n-@c Even if there are no authors, the second titlepage line should be\n-@c forced to the bottom of the page.\n-@vskip 0pt plus 1filll\n-@end macro"}, {"sha": "c978f2154d2027de906cd03be80f87741ff17000", "filename": "gcc/doc/include/gpl_v3.texi", "status": "removed", "additions": 0, "deletions": 733, "changes": 733, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Finclude%2Fgpl_v3.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Finclude%2Fgpl_v3.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finclude%2Fgpl_v3.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,733 +0,0 @@\n-@ignore\n-@c Set file name and title for man page.\n-@setfilename gpl\n-@settitle GNU General Public License\n-@c man begin SEEALSO\n-gfdl(7), fsf-funding(7).\n-@c man end\n-@c man begin COPYRIGHT\n-Copyright @copyright{} 2007 Free Software Foundation, Inc.\n-\n-Everyone is permitted to copy and distribute verbatim copies of this\n-license document, but changing it is not allowed.\n-@c man end\n-@end ignore\n-@node Copying\n-@c man begin DESCRIPTION\n-@unnumbered GNU General Public License\n-@center Version 3, 29 June 2007\n-\n-@c This file is intended to be included in another file.\n-\n-@display\n-Copyright @copyright{} 2007 Free Software Foundation, Inc. @url{https://fsf.org/}\n-\n-Everyone is permitted to copy and distribute verbatim copies of this\n-license document, but changing it is not allowed.\n-@end display\n-\n-@heading Preamble\n-\n-The GNU General Public License is a free, copyleft license for\n-software and other kinds of works.\n-\n-The licenses for most software and other practical works are designed\n-to take away your freedom to share and change the works.  By contrast,\n-the GNU General Public License is intended to guarantee your freedom\n-to share and change all versions of a program--to make sure it remains\n-free software for all its users.  We, the Free Software Foundation,\n-use the GNU General Public License for most of our software; it\n-applies also to any other work released this way by its authors.  You\n-can apply it to your programs, too.\n-\n-When we speak of free software, we are referring to freedom, not\n-price.  Our General Public Licenses are designed to make sure that you\n-have the freedom to distribute copies of free software (and charge for\n-them if you wish), that you receive source code or can get it if you\n-want it, that you can change the software or use pieces of it in new\n-free programs, and that you know you can do these things.\n-\n-To protect your rights, we need to prevent others from denying you\n-these rights or asking you to surrender the rights.  Therefore, you\n-have certain responsibilities if you distribute copies of the\n-software, or if you modify it: responsibilities to respect the freedom\n-of others.\n-\n-For example, if you distribute copies of such a program, whether\n-gratis or for a fee, you must pass on to the recipients the same\n-freedoms that you received.  You must make sure that they, too,\n-receive or can get the source code.  And you must show them these\n-terms so they know their rights.\n-\n-Developers that use the GNU GPL protect your rights with two steps:\n-(1) assert copyright on the software, and (2) offer you this License\n-giving you legal permission to copy, distribute and/or modify it.\n-\n-For the developers' and authors' protection, the GPL clearly explains\n-that there is no warranty for this free software.  For both users' and\n-authors' sake, the GPL requires that modified versions be marked as\n-changed, so that their problems will not be attributed erroneously to\n-authors of previous versions.\n-\n-Some devices are designed to deny users access to install or run\n-modified versions of the software inside them, although the\n-manufacturer can do so.  This is fundamentally incompatible with the\n-aim of protecting users' freedom to change the software.  The\n-systematic pattern of such abuse occurs in the area of products for\n-individuals to use, which is precisely where it is most unacceptable.\n-Therefore, we have designed this version of the GPL to prohibit the\n-practice for those products.  If such problems arise substantially in\n-other domains, we stand ready to extend this provision to those\n-domains in future versions of the GPL, as needed to protect the\n-freedom of users.\n-\n-Finally, every program is threatened constantly by software patents.\n-States should not allow patents to restrict development and use of\n-software on general-purpose computers, but in those that do, we wish\n-to avoid the special danger that patents applied to a free program\n-could make it effectively proprietary.  To prevent this, the GPL\n-assures that patents cannot be used to render the program non-free.\n-\n-The precise terms and conditions for copying, distribution and\n-modification follow.\n-\n-@heading TERMS AND CONDITIONS\n-\n-@enumerate 0\n-@item Definitions.\n-\n-``This License'' refers to version 3 of the GNU General Public License.\n-\n-``Copyright'' also means copyright-like laws that apply to other kinds\n-of works, such as semiconductor masks.\n-\n-``The Program'' refers to any copyrightable work licensed under this\n-License.  Each licensee is addressed as ``you''.  ``Licensees'' and\n-``recipients'' may be individuals or organizations.\n-\n-To ``modify'' a work means to copy from or adapt all or part of the work\n-in a fashion requiring copyright permission, other than the making of\n-an exact copy.  The resulting work is called a ``modified version'' of\n-the earlier work or a work ``based on'' the earlier work.\n-\n-A ``covered work'' means either the unmodified Program or a work based\n-on the Program.\n-\n-To ``propagate'' a work means to do anything with it that, without\n-permission, would make you directly or secondarily liable for\n-infringement under applicable copyright law, except executing it on a\n-computer or modifying a private copy.  Propagation includes copying,\n-distribution (with or without modification), making available to the\n-public, and in some countries other activities as well.\n-\n-To ``convey'' a work means any kind of propagation that enables other\n-parties to make or receive copies.  Mere interaction with a user\n-through a computer network, with no transfer of a copy, is not\n-conveying.\n-\n-An interactive user interface displays ``Appropriate Legal Notices'' to\n-the extent that it includes a convenient and prominently visible\n-feature that (1) displays an appropriate copyright notice, and (2)\n-tells the user that there is no warranty for the work (except to the\n-extent that warranties are provided), that licensees may convey the\n-work under this License, and how to view a copy of this License.  If\n-the interface presents a list of user commands or options, such as a\n-menu, a prominent item in the list meets this criterion.\n-\n-@item Source Code.\n-\n-The ``source code'' for a work means the preferred form of the work for\n-making modifications to it.  ``Object code'' means any non-source form\n-of a work.\n-\n-A ``Standard Interface'' means an interface that either is an official\n-standard defined by a recognized standards body, or, in the case of\n-interfaces specified for a particular programming language, one that\n-is widely used among developers working in that language.\n-\n-The ``System Libraries'' of an executable work include anything, other\n-than the work as a whole, that (a) is included in the normal form of\n-packaging a Major Component, but which is not part of that Major\n-Component, and (b) serves only to enable use of the work with that\n-Major Component, or to implement a Standard Interface for which an\n-implementation is available to the public in source code form.  A\n-``Major Component'', in this context, means a major essential component\n-(kernel, window system, and so on) of the specific operating system\n-(if any) on which the executable work runs, or a compiler used to\n-produce the work, or an object code interpreter used to run it.\n-\n-The ``Corresponding Source'' for a work in object code form means all\n-the source code needed to generate, install, and (for an executable\n-work) run the object code and to modify the work, including scripts to\n-control those activities.  However, it does not include the work's\n-System Libraries, or general-purpose tools or generally available free\n-programs which are used unmodified in performing those activities but\n-which are not part of the work.  For example, Corresponding Source\n-includes interface definition files associated with source files for\n-the work, and the source code for shared libraries and dynamically\n-linked subprograms that the work is specifically designed to require,\n-such as by intimate data communication or control flow between those\n-subprograms and other parts of the work.\n-\n-The Corresponding Source need not include anything that users can\n-regenerate automatically from other parts of the Corresponding Source.\n-\n-The Corresponding Source for a work in source code form is that same\n-work.\n-\n-@item Basic Permissions.\n-\n-All rights granted under this License are granted for the term of\n-copyright on the Program, and are irrevocable provided the stated\n-conditions are met.  This License explicitly affirms your unlimited\n-permission to run the unmodified Program.  The output from running a\n-covered work is covered by this License only if the output, given its\n-content, constitutes a covered work.  This License acknowledges your\n-rights of fair use or other equivalent, as provided by copyright law.\n-\n-You may make, run and propagate covered works that you do not convey,\n-without conditions so long as your license otherwise remains in force.\n-You may convey covered works to others for the sole purpose of having\n-them make modifications exclusively for you, or provide you with\n-facilities for running those works, provided that you comply with the\n-terms of this License in conveying all material for which you do not\n-control copyright.  Those thus making or running the covered works for\n-you must do so exclusively on your behalf, under your direction and\n-control, on terms that prohibit them from making any copies of your\n-copyrighted material outside their relationship with you.\n-\n-Conveying under any other circumstances is permitted solely under the\n-conditions stated below.  Sublicensing is not allowed; section 10\n-makes it unnecessary.\n-\n-@item Protecting Users' Legal Rights From Anti-Circumvention Law.\n-\n-No covered work shall be deemed part of an effective technological\n-measure under any applicable law fulfilling obligations under article\n-11 of the WIPO copyright treaty adopted on 20 December 1996, or\n-similar laws prohibiting or restricting circumvention of such\n-measures.\n-\n-When you convey a covered work, you waive any legal power to forbid\n-circumvention of technological measures to the extent such\n-circumvention is effected by exercising rights under this License with\n-respect to the covered work, and you disclaim any intention to limit\n-operation or modification of the work as a means of enforcing, against\n-the work's users, your or third parties' legal rights to forbid\n-circumvention of technological measures.\n-\n-@item Conveying Verbatim Copies.\n-\n-You may convey verbatim copies of the Program's source code as you\n-receive it, in any medium, provided that you conspicuously and\n-appropriately publish on each copy an appropriate copyright notice;\n-keep intact all notices stating that this License and any\n-non-permissive terms added in accord with section 7 apply to the code;\n-keep intact all notices of the absence of any warranty; and give all\n-recipients a copy of this License along with the Program.\n-\n-You may charge any price or no price for each copy that you convey,\n-and you may offer support or warranty protection for a fee.\n-\n-@item Conveying Modified Source Versions.\n-\n-You may convey a work based on the Program, or the modifications to\n-produce it from the Program, in the form of source code under the\n-terms of section 4, provided that you also meet all of these\n-conditions:\n-\n-@enumerate a\n-@item \n-The work must carry prominent notices stating that you modified it,\n-and giving a relevant date.\n-\n-@item\n-The work must carry prominent notices stating that it is released\n-under this License and any conditions added under section 7.  This\n-requirement modifies the requirement in section 4 to ``keep intact all\n-notices''.\n-\n-@item\n-You must license the entire work, as a whole, under this License to\n-anyone who comes into possession of a copy.  This License will\n-therefore apply, along with any applicable section 7 additional terms,\n-to the whole of the work, and all its parts, regardless of how they\n-are packaged.  This License gives no permission to license the work in\n-any other way, but it does not invalidate such permission if you have\n-separately received it.\n-\n-@item\n-If the work has interactive user interfaces, each must display\n-Appropriate Legal Notices; however, if the Program has interactive\n-interfaces that do not display Appropriate Legal Notices, your work\n-need not make them do so.\n-@end enumerate\n-\n-A compilation of a covered work with other separate and independent\n-works, which are not by their nature extensions of the covered work,\n-and which are not combined with it such as to form a larger program,\n-in or on a volume of a storage or distribution medium, is called an\n-``aggregate'' if the compilation and its resulting copyright are not\n-used to limit the access or legal rights of the compilation's users\n-beyond what the individual works permit.  Inclusion of a covered work\n-in an aggregate does not cause this License to apply to the other\n-parts of the aggregate.\n-\n-@item  Conveying Non-Source Forms.\n-\n-You may convey a covered work in object code form under the terms of\n-sections 4 and 5, provided that you also convey the machine-readable\n-Corresponding Source under the terms of this License, in one of these\n-ways:\n-\n-@enumerate a\n-@item\n-Convey the object code in, or embodied in, a physical product\n-(including a physical distribution medium), accompanied by the\n-Corresponding Source fixed on a durable physical medium customarily\n-used for software interchange.\n-\n-@item\n-Convey the object code in, or embodied in, a physical product\n-(including a physical distribution medium), accompanied by a written\n-offer, valid for at least three years and valid for as long as you\n-offer spare parts or customer support for that product model, to give\n-anyone who possesses the object code either (1) a copy of the\n-Corresponding Source for all the software in the product that is\n-covered by this License, on a durable physical medium customarily used\n-for software interchange, for a price no more than your reasonable\n-cost of physically performing this conveying of source, or (2) access\n-to copy the Corresponding Source from a network server at no charge.\n-\n-@item\n-Convey individual copies of the object code with a copy of the written\n-offer to provide the Corresponding Source.  This alternative is\n-allowed only occasionally and noncommercially, and only if you\n-received the object code with such an offer, in accord with subsection\n-6b.\n-\n-@item\n-Convey the object code by offering access from a designated place\n-(gratis or for a charge), and offer equivalent access to the\n-Corresponding Source in the same way through the same place at no\n-further charge.  You need not require recipients to copy the\n-Corresponding Source along with the object code.  If the place to copy\n-the object code is a network server, the Corresponding Source may be\n-on a different server (operated by you or a third party) that supports\n-equivalent copying facilities, provided you maintain clear directions\n-next to the object code saying where to find the Corresponding Source.\n-Regardless of what server hosts the Corresponding Source, you remain\n-obligated to ensure that it is available for as long as needed to\n-satisfy these requirements.\n-\n-@item\n-Convey the object code using peer-to-peer transmission, provided you\n-inform other peers where the object code and Corresponding Source of\n-the work are being offered to the general public at no charge under\n-subsection 6d.\n-\n-@end enumerate\n-\n-A separable portion of the object code, whose source code is excluded\n-from the Corresponding Source as a System Library, need not be\n-included in conveying the object code work.\n-\n-A ``User Product'' is either (1) a ``consumer product'', which means any\n-tangible personal property which is normally used for personal,\n-family, or household purposes, or (2) anything designed or sold for\n-incorporation into a dwelling.  In determining whether a product is a\n-consumer product, doubtful cases shall be resolved in favor of\n-coverage.  For a particular product received by a particular user,\n-``normally used'' refers to a typical or common use of that class of\n-product, regardless of the status of the particular user or of the way\n-in which the particular user actually uses, or expects or is expected\n-to use, the product.  A product is a consumer product regardless of\n-whether the product has substantial commercial, industrial or\n-non-consumer uses, unless such uses represent the only significant\n-mode of use of the product.\n-\n-``Installation Information'' for a User Product means any methods,\n-procedures, authorization keys, or other information required to\n-install and execute modified versions of a covered work in that User\n-Product from a modified version of its Corresponding Source.  The\n-information must suffice to ensure that the continued functioning of\n-the modified object code is in no case prevented or interfered with\n-solely because modification has been made.\n-\n-If you convey an object code work under this section in, or with, or\n-specifically for use in, a User Product, and the conveying occurs as\n-part of a transaction in which the right of possession and use of the\n-User Product is transferred to the recipient in perpetuity or for a\n-fixed term (regardless of how the transaction is characterized), the\n-Corresponding Source conveyed under this section must be accompanied\n-by the Installation Information.  But this requirement does not apply\n-if neither you nor any third party retains the ability to install\n-modified object code on the User Product (for example, the work has\n-been installed in ROM).\n-\n-The requirement to provide Installation Information does not include a\n-requirement to continue to provide support service, warranty, or\n-updates for a work that has been modified or installed by the\n-recipient, or for the User Product in which it has been modified or\n-installed.  Access to a network may be denied when the modification\n-itself materially and adversely affects the operation of the network\n-or violates the rules and protocols for communication across the\n-network.\n-\n-Corresponding Source conveyed, and Installation Information provided,\n-in accord with this section must be in a format that is publicly\n-documented (and with an implementation available to the public in\n-source code form), and must require no special password or key for\n-unpacking, reading or copying.\n-\n-@item Additional Terms.\n-\n-``Additional permissions'' are terms that supplement the terms of this\n-License by making exceptions from one or more of its conditions.\n-Additional permissions that are applicable to the entire Program shall\n-be treated as though they were included in this License, to the extent\n-that they are valid under applicable law.  If additional permissions\n-apply only to part of the Program, that part may be used separately\n-under those permissions, but the entire Program remains governed by\n-this License without regard to the additional permissions.\n-\n-When you convey a copy of a covered work, you may at your option\n-remove any additional permissions from that copy, or from any part of\n-it.  (Additional permissions may be written to require their own\n-removal in certain cases when you modify the work.)  You may place\n-additional permissions on material, added by you to a covered work,\n-for which you have or can give appropriate copyright permission.\n-\n-Notwithstanding any other provision of this License, for material you\n-add to a covered work, you may (if authorized by the copyright holders\n-of that material) supplement the terms of this License with terms:\n-\n-@enumerate a\n-@item\n-Disclaiming warranty or limiting liability differently from the terms\n-of sections 15 and 16 of this License; or\n-\n-@item\n-Requiring preservation of specified reasonable legal notices or author\n-attributions in that material or in the Appropriate Legal Notices\n-displayed by works containing it; or\n-\n-@item\n-Prohibiting misrepresentation of the origin of that material, or\n-requiring that modified versions of such material be marked in\n-reasonable ways as different from the original version; or\n-\n-@item\n-Limiting the use for publicity purposes of names of licensors or\n-authors of the material; or\n-\n-@item\n-Declining to grant rights under trademark law for use of some trade\n-names, trademarks, or service marks; or\n-\n-@item\n-Requiring indemnification of licensors and authors of that material by\n-anyone who conveys the material (or modified versions of it) with\n-contractual assumptions of liability to the recipient, for any\n-liability that these contractual assumptions directly impose on those\n-licensors and authors.\n-@end enumerate\n-\n-All other non-permissive additional terms are considered ``further\n-restrictions'' within the meaning of section 10.  If the Program as you\n-received it, or any part of it, contains a notice stating that it is\n-governed by this License along with a term that is a further\n-restriction, you may remove that term.  If a license document contains\n-a further restriction but permits relicensing or conveying under this\n-License, you may add to a covered work material governed by the terms\n-of that license document, provided that the further restriction does\n-not survive such relicensing or conveying.\n-\n-If you add terms to a covered work in accord with this section, you\n-must place, in the relevant source files, a statement of the\n-additional terms that apply to those files, or a notice indicating\n-where to find the applicable terms.\n-\n-Additional terms, permissive or non-permissive, may be stated in the\n-form of a separately written license, or stated as exceptions; the\n-above requirements apply either way.\n-\n-@item Termination.\n-\n-You may not propagate or modify a covered work except as expressly\n-provided under this License.  Any attempt otherwise to propagate or\n-modify it is void, and will automatically terminate your rights under\n-this License (including any patent licenses granted under the third\n-paragraph of section 11).\n-\n-However, if you cease all violation of this License, then your license\n-from a particular copyright holder is reinstated (a) provisionally,\n-unless and until the copyright holder explicitly and finally\n-terminates your license, and (b) permanently, if the copyright holder\n-fails to notify you of the violation by some reasonable means prior to\n-60 days after the cessation.\n-\n-Moreover, your license from a particular copyright holder is\n-reinstated permanently if the copyright holder notifies you of the\n-violation by some reasonable means, this is the first time you have\n-received notice of violation of this License (for any work) from that\n-copyright holder, and you cure the violation prior to 30 days after\n-your receipt of the notice.\n-\n-Termination of your rights under this section does not terminate the\n-licenses of parties who have received copies or rights from you under\n-this License.  If your rights have been terminated and not permanently\n-reinstated, you do not qualify to receive new licenses for the same\n-material under section 10.\n-\n-@item Acceptance Not Required for Having Copies.\n-\n-You are not required to accept this License in order to receive or run\n-a copy of the Program.  Ancillary propagation of a covered work\n-occurring solely as a consequence of using peer-to-peer transmission\n-to receive a copy likewise does not require acceptance.  However,\n-nothing other than this License grants you permission to propagate or\n-modify any covered work.  These actions infringe copyright if you do\n-not accept this License.  Therefore, by modifying or propagating a\n-covered work, you indicate your acceptance of this License to do so.\n-\n-@item Automatic Licensing of Downstream Recipients.\n-\n-Each time you convey a covered work, the recipient automatically\n-receives a license from the original licensors, to run, modify and\n-propagate that work, subject to this License.  You are not responsible\n-for enforcing compliance by third parties with this License.\n-\n-An ``entity transaction'' is a transaction transferring control of an\n-organization, or substantially all assets of one, or subdividing an\n-organization, or merging organizations.  If propagation of a covered\n-work results from an entity transaction, each party to that\n-transaction who receives a copy of the work also receives whatever\n-licenses to the work the party's predecessor in interest had or could\n-give under the previous paragraph, plus a right to possession of the\n-Corresponding Source of the work from the predecessor in interest, if\n-the predecessor has it or can get it with reasonable efforts.\n-\n-You may not impose any further restrictions on the exercise of the\n-rights granted or affirmed under this License.  For example, you may\n-not impose a license fee, royalty, or other charge for exercise of\n-rights granted under this License, and you may not initiate litigation\n-(including a cross-claim or counterclaim in a lawsuit) alleging that\n-any patent claim is infringed by making, using, selling, offering for\n-sale, or importing the Program or any portion of it.\n-\n-@item Patents.\n-\n-A ``contributor'' is a copyright holder who authorizes use under this\n-License of the Program or a work on which the Program is based.  The\n-work thus licensed is called the contributor's ``contributor version''.\n-\n-A contributor's ``essential patent claims'' are all patent claims owned\n-or controlled by the contributor, whether already acquired or\n-hereafter acquired, that would be infringed by some manner, permitted\n-by this License, of making, using, or selling its contributor version,\n-but do not include claims that would be infringed only as a\n-consequence of further modification of the contributor version.  For\n-purposes of this definition, ``control'' includes the right to grant\n-patent sublicenses in a manner consistent with the requirements of\n-this License.\n-\n-Each contributor grants you a non-exclusive, worldwide, royalty-free\n-patent license under the contributor's essential patent claims, to\n-make, use, sell, offer for sale, import and otherwise run, modify and\n-propagate the contents of its contributor version.\n-\n-In the following three paragraphs, a ``patent license'' is any express\n-agreement or commitment, however denominated, not to enforce a patent\n-(such as an express permission to practice a patent or covenant not to\n-sue for patent infringement).  To ``grant'' such a patent license to a\n-party means to make such an agreement or commitment not to enforce a\n-patent against the party.\n-\n-If you convey a covered work, knowingly relying on a patent license,\n-and the Corresponding Source of the work is not available for anyone\n-to copy, free of charge and under the terms of this License, through a\n-publicly available network server or other readily accessible means,\n-then you must either (1) cause the Corresponding Source to be so\n-available, or (2) arrange to deprive yourself of the benefit of the\n-patent license for this particular work, or (3) arrange, in a manner\n-consistent with the requirements of this License, to extend the patent\n-license to downstream recipients.  ``Knowingly relying'' means you have\n-actual knowledge that, but for the patent license, your conveying the\n-covered work in a country, or your recipient's use of the covered work\n-in a country, would infringe one or more identifiable patents in that\n-country that you have reason to believe are valid.\n-\n-If, pursuant to or in connection with a single transaction or\n-arrangement, you convey, or propagate by procuring conveyance of, a\n-covered work, and grant a patent license to some of the parties\n-receiving the covered work authorizing them to use, propagate, modify\n-or convey a specific copy of the covered work, then the patent license\n-you grant is automatically extended to all recipients of the covered\n-work and works based on it.\n-\n-A patent license is ``discriminatory'' if it does not include within the\n-scope of its coverage, prohibits the exercise of, or is conditioned on\n-the non-exercise of one or more of the rights that are specifically\n-granted under this License.  You may not convey a covered work if you\n-are a party to an arrangement with a third party that is in the\n-business of distributing software, under which you make payment to the\n-third party based on the extent of your activity of conveying the\n-work, and under which the third party grants, to any of the parties\n-who would receive the covered work from you, a discriminatory patent\n-license (a) in connection with copies of the covered work conveyed by\n-you (or copies made from those copies), or (b) primarily for and in\n-connection with specific products or compilations that contain the\n-covered work, unless you entered into that arrangement, or that patent\n-license was granted, prior to 28 March 2007.\n-\n-Nothing in this License shall be construed as excluding or limiting\n-any implied license or other defenses to infringement that may\n-otherwise be available to you under applicable patent law.\n-\n-@item No Surrender of Others' Freedom.\n-\n-If conditions are imposed on you (whether by court order, agreement or\n-otherwise) that contradict the conditions of this License, they do not\n-excuse you from the conditions of this License.  If you cannot convey\n-a covered work so as to satisfy simultaneously your obligations under\n-this License and any other pertinent obligations, then as a\n-consequence you may not convey it at all.  For example, if you agree\n-to terms that obligate you to collect a royalty for further conveying\n-from those to whom you convey the Program, the only way you could\n-satisfy both those terms and this License would be to refrain entirely\n-from conveying the Program.\n-\n-@item Use with the GNU Affero General Public License.\n-\n-Notwithstanding any other provision of this License, you have\n-permission to link or combine any covered work with a work licensed\n-under version 3 of the GNU Affero General Public License into a single\n-combined work, and to convey the resulting work.  The terms of this\n-License will continue to apply to the part which is the covered work,\n-but the special requirements of the GNU Affero General Public License,\n-section 13, concerning interaction through a network will apply to the\n-combination as such.\n-\n-@item Revised Versions of this License.\n-\n-The Free Software Foundation may publish revised and/or new versions\n-of the GNU General Public License from time to time.  Such new\n-versions will be similar in spirit to the present version, but may\n-differ in detail to address new problems or concerns.\n-\n-Each version is given a distinguishing version number.  If the Program\n-specifies that a certain numbered version of the GNU General Public\n-License ``or any later version'' applies to it, you have the option of\n-following the terms and conditions either of that numbered version or\n-of any later version published by the Free Software Foundation.  If\n-the Program does not specify a version number of the GNU General\n-Public License, you may choose any version ever published by the Free\n-Software Foundation.\n-\n-If the Program specifies that a proxy can decide which future versions\n-of the GNU General Public License can be used, that proxy's public\n-statement of acceptance of a version permanently authorizes you to\n-choose that version for the Program.\n-\n-Later license versions may give you additional or different\n-permissions.  However, no additional obligations are imposed on any\n-author or copyright holder as a result of your choosing to follow a\n-later version.\n-\n-@item Disclaimer of Warranty.\n-\n-THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\n-APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\n-HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM ``AS IS'' WITHOUT\n-WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT\n-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n-A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND\n-PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE\n-DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR\n-CORRECTION.\n-\n-@item Limitation of Liability.\n-\n-IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\n-WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR\n-CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\n-INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES\n-ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT\n-NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR\n-LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM\n-TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER\n-PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n-\n-@item Interpretation of Sections 15 and 16.\n-\n-If the disclaimer of warranty and limitation of liability provided\n-above cannot be given local legal effect according to their terms,\n-reviewing courts shall apply local law that most closely approximates\n-an absolute waiver of all civil liability in connection with the\n-Program, unless a warranty or assumption of liability accompanies a\n-copy of the Program in return for a fee.\n-\n-@end enumerate\n-\n-@heading END OF TERMS AND CONDITIONS\n-\n-@heading How to Apply These Terms to Your New Programs\n-\n-If you develop a new program, and you want it to be of the greatest\n-possible use to the public, the best way to achieve this is to make it\n-free software which everyone can redistribute and change under these\n-terms.\n-\n-To do so, attach the following notices to the program.  It is safest\n-to attach them to the start of each source file to most effectively\n-state the exclusion of warranty; and each file should have at least\n-the ``copyright'' line and a pointer to where the full notice is found.\n-\n-@smallexample\n-@var{one line to give the program's name and a brief idea of what it does.}  \n-Copyright (C) @var{year} @var{name of author}\n-\n-This program is free software: you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation, either version 3 of the License, or (at\n-your option) any later version.\n-\n-This program is distributed in the hope that it will be useful, but\n-WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with this program.  If not, see @url{https://www.gnu.org/licenses/}.\n-@end smallexample\n-\n-Also add information on how to contact you by electronic and paper mail.\n-\n-If the program does terminal interaction, make it output a short\n-notice like this when it starts in an interactive mode:\n-\n-@smallexample\n-@var{program} Copyright (C) @var{year} @var{name of author} \n-This program comes with ABSOLUTELY NO WARRANTY; for details type @samp{show w}.\n-This is free software, and you are welcome to redistribute it\n-under certain conditions; type @samp{show c} for details.\n-@end smallexample\n-\n-The hypothetical commands @samp{show w} and @samp{show c} should show\n-the appropriate parts of the General Public License.  Of course, your\n-program's commands might be different; for a GUI interface, you would\n-use an ``about box''.\n-\n-You should also get your employer (if you work as a programmer) or school,\n-if any, to sign a ``copyright disclaimer'' for the program, if necessary.\n-For more information on this, and how to apply and follow the GNU GPL, see\n-@url{https://www.gnu.org/licenses/}.\n-\n-The GNU General Public License does not permit incorporating your\n-program into proprietary programs.  If your program is a subroutine\n-library, you may consider it more useful to permit linking proprietary\n-applications with the library.  If this is what you want to do, use\n-the GNU Lesser General Public License instead of this License.  But\n-first, please read @url{https://www.gnu.org/licenses/why-not-lgpl.html}.\n-@c man end"}, {"sha": "a01b8053afef58f5553e9c6c888f6ae9b364773a", "filename": "gcc/doc/install.texi", "status": "removed", "additions": 0, "deletions": 5268, "changes": 5268, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "e1dfc927aa72ba04f89a96296a6b36167549b7f3", "filename": "gcc/doc/interface.texi", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Finterface.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Finterface.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finterface.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,70 +0,0 @@\n-@c Copyright (C) 1988-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@node Interface\n-@chapter Interfacing to GCC Output\n-@cindex interfacing to GCC output\n-@cindex run-time conventions\n-@cindex function call conventions\n-@cindex conventions, run-time\n-\n-GCC is normally configured to use the same function calling convention\n-normally in use on the target system.  This is done with the\n-machine-description macros described (@pxref{Target Macros}).\n-\n-@cindex unions, returning\n-@cindex structures, returning\n-@cindex returning structures and unions\n-However, returning of structure and union values is done differently on\n-some target machines.  As a result, functions compiled with PCC\n-returning such types cannot be called from code compiled with GCC,\n-and vice versa.  This does not cause trouble often because few Unix\n-library routines return structures or unions.\n-\n-GCC code returns structures and unions that are 1, 2, 4 or 8 bytes\n-long in the same registers used for @code{int} or @code{double} return\n-values.  (GCC typically allocates variables of such types in\n-registers also.)  Structures and unions of other sizes are returned by\n-storing them into an address passed by the caller (usually in a\n-register).  The target hook @code{TARGET_STRUCT_VALUE_RTX}\n-tells GCC where to pass this address.\n-\n-By contrast, PCC on most target machines returns structures and unions\n-of any size by copying the data into an area of static storage, and then\n-returning the address of that storage as if it were a pointer value.\n-The caller must copy the data from that memory area to the place where\n-the value is wanted.  This is slower than the method used by GCC, and\n-fails to be reentrant.\n-\n-On some target machines, such as RISC machines and the 80386, the\n-standard system convention is to pass to the subroutine the address of\n-where to return the value.  On these machines, GCC has been\n-configured to be compatible with the standard compiler, when this method\n-is used.  It may not be compatible for structures of 1, 2, 4 or 8 bytes.\n-\n-@cindex argument passing\n-@cindex passing arguments\n-GCC uses the system's standard convention for passing arguments.  On\n-some machines, the first few arguments are passed in registers; in\n-others, all are passed on the stack.  It would be possible to use\n-registers for argument passing on any machine, and this would probably\n-result in a significant speedup.  But the result would be complete\n-incompatibility with code that follows the standard convention.  So this\n-change is practical only if you are switching to GCC as the sole C\n-compiler for the system.  We may implement register argument passing on\n-certain machines once we have a complete GNU system so that we can\n-compile the libraries with GCC@.\n-\n-On some machines (particularly the SPARC), certain types of arguments\n-are passed ``by invisible reference''.  This means that the value is\n-stored in memory, and the address of the memory location is passed to\n-the subroutine.\n-\n-@cindex @code{longjmp} and automatic variables\n-If you use @code{longjmp}, beware of automatic variables.  ISO C says that\n-automatic variables that are not declared @code{volatile} have undefined\n-values after a @code{longjmp}.  And this is all GCC promises to do,\n-because it is very difficult to restore register variables correctly, and\n-one of GCC's features is that it can put variables in registers without\n-your asking it to."}, {"sha": "975ee64103ff743e2707427d0e4a95ce13803bb7", "filename": "gcc/doc/invoke.texi", "status": "removed", "additions": 0, "deletions": 35442, "changes": 35442, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "df36d7edfcf29dc57d2e7d1ebd27b7e237e0d1ca", "filename": "gcc/doc/languages.texi", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Flanguages.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Flanguages.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Flanguages.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,36 +0,0 @@\n-@c Copyright (C) 2002-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@node Languages\n-@chapter Language Front Ends in GCC\n-\n-The interface to front ends for languages in GCC, and in particular\n-the @code{tree} structure (@pxref{GENERIC}), was initially designed for\n-C, and many aspects of it are still somewhat biased towards C and\n-C-like languages.  It is, however, reasonably well suited to other\n-procedural languages, and front ends for many such languages have been\n-written for GCC@.\n-\n-Writing a compiler as a front end for GCC, rather than compiling\n-directly to assembler or generating C code which is then compiled by\n-GCC, has several advantages:\n-\n-@itemize @bullet\n-@item GCC front ends benefit from the support for many different\n-target machines already present in GCC@.\n-@item GCC front ends benefit from all the optimizations in GCC@.  Some\n-of these, such as alias analysis, may work better when GCC is\n-compiling directly from source code than when it is compiling from\n-generated C code.\n-@item Better debugging information is generated when compiling\n-directly from source code than when going via intermediate generated C\n-code.\n-@end itemize\n-\n-Because of the advantages of writing a compiler as a GCC front end,\n-GCC front ends have also been created for languages very different\n-from those for which GCC was designed, such as the declarative\n-logic/functional language Mercury.  For these reasons, it may also be\n-useful to implement compilers created for specialized purposes (for\n-example, as part of a research project) as GCC front ends."}, {"sha": "9933833478705c9e6f5b1bdbbb499f4e073ebd49", "filename": "gcc/doc/libgcc.texi", "status": "removed", "additions": 0, "deletions": 2304, "changes": 2304, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Flibgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Flibgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Flibgcc.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "6e8657a074d2447db7ae9b75cbfbb71282b84287", "filename": "gcc/doc/loop.texi", "status": "removed", "additions": 0, "deletions": 626, "changes": 626, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Floop.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Floop.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Floop.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,626 +0,0 @@\n-@c Copyright (C) 2006-2022 Free Software Foundation, Inc.\n-@c Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@c ---------------------------------------------------------------------\n-@c Loop Representation\n-@c ---------------------------------------------------------------------\n-\n-@node Loop Analysis and Representation\n-@chapter Analysis and Representation of Loops\n-\n-GCC provides extensive infrastructure for work with natural loops, i.e.,\n-strongly connected components of CFG with only one entry block.  This\n-chapter describes representation of loops in GCC, both on GIMPLE and in\n-RTL, as well as the interfaces to loop-related analyses (induction\n-variable analysis and number of iterations analysis).\n-\n-@menu\n-* Loop representation::         Representation and analysis of loops.\n-* Loop querying::               Getting information about loops.\n-* Loop manipulation::           Loop manipulation functions.\n-* LCSSA::                       Loop-closed SSA form.\n-* Scalar evolutions::           Induction variables on GIMPLE.\n-* loop-iv::                     Induction variables on RTL.\n-* Number of iterations::        Number of iterations analysis.\n-* Dependency analysis::         Data dependency analysis.\n-@end menu\n-\n-@node Loop representation\n-@section Loop representation\n-@cindex Loop representation\n-@cindex Loop analysis\n-\n-This chapter describes the representation of loops in GCC, and functions\n-that can be used to build, modify and analyze this representation.  Most\n-of the interfaces and data structures are declared in @file{cfgloop.h}.\n-Loop structures are analyzed and this information disposed or updated\n-at the discretion of individual passes.  Still most of the generic\n-CFG manipulation routines are aware of loop structures and try to\n-keep them up-to-date.  By this means an increasing part of the\n-compilation pipeline is setup to maintain loop structure across\n-passes to allow attaching meta information to individual loops\n-for consumption by later passes.\n-\n-In general, a natural loop has one entry block (header) and possibly\n-several back edges (latches) leading to the header from the inside of\n-the loop.  Loops with several latches may appear if several loops share\n-a single header, or if there is a branching in the middle of the loop.\n-The representation of loops in GCC however allows only loops with a\n-single latch.  During loop analysis, headers of such loops are split and\n-forwarder blocks are created in order to disambiguate their structures.\n-Heuristic based on profile information and structure of the induction\n-variables in the loops is used to determine whether the latches\n-correspond to sub-loops or to control flow in a single loop.  This means\n-that the analysis sometimes changes the CFG, and if you run it in the\n-middle of an optimization pass, you must be able to deal with the new\n-blocks.  You may avoid CFG changes by passing\n-@code{LOOPS_MAY_HAVE_MULTIPLE_LATCHES} flag to the loop discovery,\n-note however that most other loop manipulation functions will not work\n-correctly for loops with multiple latch edges (the functions that only\n-query membership of blocks to loops and subloop relationships, or\n-enumerate and test loop exits, can be expected to work).\n-\n-Body of the loop is the set of blocks that are dominated by its header,\n-and reachable from its latch against the direction of edges in CFG@.  The\n-loops are organized in a containment hierarchy (tree) such that all the\n-loops immediately contained inside loop L are the children of L in the\n-tree.  This tree is represented by the @code{struct loops} structure.\n-The root of this tree is a fake loop that contains all blocks in the\n-function.  Each of the loops is represented in a @code{struct loop}\n-structure.  Each loop is assigned an index (@code{num} field of the\n-@code{struct loop} structure), and the pointer to the loop is stored in\n-the corresponding field of the @code{larray} vector in the loops\n-structure.  The indices do not have to be continuous, there may be\n-empty (@code{NULL}) entries in the @code{larray} created by deleting\n-loops.  Also, there is no guarantee on the relative order of a loop\n-and its subloops in the numbering.  The index of a loop never changes.\n-\n-The entries of the @code{larray} field should not be accessed directly.\n-The function @code{get_loop} returns the loop description for a loop with\n-the given index.  @code{number_of_loops} function returns number of loops\n-in the function.  To traverse all loops, use a range-based for loop with\n-class @code{loops_list} instance. The @code{flags} argument passed to the\n-constructor function of class @code{loops_list} is used to determine the\n-direction of traversal and the set of loops visited.  Each loop is\n-guaranteed to be visited exactly once, regardless of the changes to the\n-loop tree, and the loops may be removed during the traversal.  The newly\n-created loops are never traversed, if they need to be visited, this must\n-be done separately after their creation.\n-\n-Each basic block contains the reference to the innermost loop it belongs\n-to (@code{loop_father}).  For this reason, it is only possible to have\n-one @code{struct loops} structure initialized at the same time for each\n-CFG@.  The global variable @code{current_loops} contains the\n-@code{struct loops} structure.  Many of the loop manipulation functions\n-assume that dominance information is up-to-date.\n-\n-The loops are analyzed through @code{loop_optimizer_init} function.  The\n-argument of this function is a set of flags represented in an integer\n-bitmask.  These flags specify what other properties of the loop\n-structures should be calculated/enforced and preserved later:\n-\n-@itemize\n-@item @code{LOOPS_MAY_HAVE_MULTIPLE_LATCHES}: If this flag is set, no\n-changes to CFG will be performed in the loop analysis, in particular,\n-loops with multiple latch edges will not be disambiguated.  If a loop\n-has multiple latches, its latch block is set to NULL@.  Most of\n-the loop manipulation functions will not work for loops in this shape.\n-No other flags that require CFG changes can be passed to\n-loop_optimizer_init.\n-@item @code{LOOPS_HAVE_PREHEADERS}: Forwarder blocks are created in such\n-a way that each loop has only one entry edge, and additionally, the\n-source block of this entry edge has only one successor.  This creates a\n-natural place where the code can be moved out of the loop, and ensures\n-that the entry edge of the loop leads from its immediate super-loop.\n-@item @code{LOOPS_HAVE_SIMPLE_LATCHES}: Forwarder blocks are created to\n-force the latch block of each loop to have only one successor.  This\n-ensures that the latch of the loop does not belong to any of its\n-sub-loops, and makes manipulation with the loops significantly easier.\n-Most of the loop manipulation functions assume that the loops are in\n-this shape.  Note that with this flag, the ``normal'' loop without any\n-control flow inside and with one exit consists of two basic blocks.\n-@item @code{LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS}: Basic blocks and\n-edges in the strongly connected components that are not natural loops\n-(have more than one entry block) are marked with\n-@code{BB_IRREDUCIBLE_LOOP} and @code{EDGE_IRREDUCIBLE_LOOP} flags.  The\n-flag is not set for blocks and edges that belong to natural loops that\n-are in such an irreducible region (but it is set for the entry and exit\n-edges of such a loop, if they lead to/from this region).\n-@item @code{LOOPS_HAVE_RECORDED_EXITS}: The lists of exits are recorded\n-and updated for each loop.  This makes some functions (e.g.,\n-@code{get_loop_exit_edges}) more efficient.  Some functions (e.g.,\n-@code{single_exit}) can be used only if the lists of exits are\n-recorded.\n-@end itemize\n-\n-These properties may also be computed/enforced later, using functions\n-@code{create_preheaders}, @code{force_single_succ_latches},\n-@code{mark_irreducible_loops} and @code{record_loop_exits}.\n-The properties can be queried using @code{loops_state_satisfies_p}.\n-\n-The memory occupied by the loops structures should be freed with\n-@code{loop_optimizer_finalize} function.  When loop structures are\n-setup to be preserved across passes this function reduces the\n-information to be kept up-to-date to a minimum (only\n-@code{LOOPS_MAY_HAVE_MULTIPLE_LATCHES} set).\n-\n-The CFG manipulation functions in general do not update loop structures.\n-Specialized versions that additionally do so are provided for the most\n-common tasks.  On GIMPLE, @code{cleanup_tree_cfg_loop} function can be\n-used to cleanup CFG while updating the loops structures if\n-@code{current_loops} is set.\n-\n-At the moment loop structure is preserved from the start of GIMPLE\n-loop optimizations until the end of RTL loop optimizations.  During\n-this time a loop can be tracked by its @code{struct loop} and number.\n-\n-@node Loop querying\n-@section Loop querying\n-@cindex Loop querying\n-\n-The functions to query the information about loops are declared in\n-@file{cfgloop.h}.  Some of the information can be taken directly from\n-the structures.  @code{loop_father} field of each basic block contains\n-the innermost loop to that the block belongs.  The most useful fields of\n-loop structure (that are kept up-to-date at all times) are:\n-\n-@itemize\n-@item @code{header}, @code{latch}: Header and latch basic blocks of the\n-loop.\n-@item @code{num_nodes}: Number of basic blocks in the loop (including\n-the basic blocks of the sub-loops).\n-@item @code{outer}, @code{inner}, @code{next}: The super-loop, the first\n-sub-loop, and the sibling of the loop in the loops tree.\n-@end itemize\n-\n-There are other fields in the loop structures, many of them used only by\n-some of the passes, or not updated during CFG changes; in general, they\n-should not be accessed directly.\n-\n-The most important functions to query loop structures are:\n-\n-@itemize\n-@item @code{loop_depth}: The depth of the loop in the loops tree, i.e., the\n-number of super-loops of the loop.\n-@item @code{flow_loops_dump}: Dumps the information about loops to a\n-file.\n-@item @code{verify_loop_structure}: Checks consistency of the loop\n-structures.\n-@item @code{loop_latch_edge}: Returns the latch edge of a loop.\n-@item @code{loop_preheader_edge}: If loops have preheaders, returns\n-the preheader edge of a loop.\n-@item @code{flow_loop_nested_p}: Tests whether loop is a sub-loop of\n-another loop.\n-@item @code{flow_bb_inside_loop_p}: Tests whether a basic block belongs\n-to a loop (including its sub-loops).\n-@item @code{find_common_loop}: Finds the common super-loop of two loops.\n-@item @code{superloop_at_depth}: Returns the super-loop of a loop with\n-the given depth.\n-@item @code{tree_num_loop_insns}, @code{num_loop_insns}: Estimates the\n-number of insns in the loop, on GIMPLE and on RTL.\n-@item @code{loop_exit_edge_p}: Tests whether edge is an exit from a\n-loop.\n-@item @code{mark_loop_exit_edges}: Marks all exit edges of all loops\n-with @code{EDGE_LOOP_EXIT} flag.\n-@item @code{get_loop_body}, @code{get_loop_body_in_dom_order},\n-@code{get_loop_body_in_bfs_order}: Enumerates the basic blocks in the\n-loop in depth-first search order in reversed CFG, ordered by dominance\n-relation, and breath-first search order, respectively.\n-@item @code{single_exit}: Returns the single exit edge of the loop, or\n-@code{NULL} if the loop has more than one exit.  You can only use this\n-function if @code{LOOPS_HAVE_RECORDED_EXITS} is used.\n-@item @code{get_loop_exit_edges}: Enumerates the exit edges of a loop.\n-@item @code{just_once_each_iteration_p}: Returns true if the basic block\n-is executed exactly once during each iteration of a loop (that is, it\n-does not belong to a sub-loop, and it dominates the latch of the loop).\n-@end itemize\n-\n-@node Loop manipulation\n-@section Loop manipulation\n-@cindex Loop manipulation\n-\n-The loops tree can be manipulated using the following functions:\n-\n-@itemize\n-@item @code{flow_loop_tree_node_add}: Adds a node to the tree.\n-@item @code{flow_loop_tree_node_remove}: Removes a node from the tree.\n-@item @code{add_bb_to_loop}: Adds a basic block to a loop.\n-@item @code{remove_bb_from_loops}: Removes a basic block from loops.\n-@end itemize\n-\n-Most low-level CFG functions update loops automatically.  The following\n-functions handle some more complicated cases of CFG manipulations:\n-\n-@itemize\n-@item @code{remove_path}: Removes an edge and all blocks it dominates.\n-@item @code{split_loop_exit_edge}: Splits exit edge of the loop,\n-ensuring that PHI node arguments remain in the loop (this ensures that\n-loop-closed SSA form is preserved).  Only useful on GIMPLE.\n-@end itemize\n-\n-Finally, there are some higher-level loop transformations implemented.\n-While some of them are written so that they should work on non-innermost\n-loops, they are mostly untested in that case, and at the moment, they\n-are only reliable for the innermost loops:\n-\n-@itemize\n-@item @code{create_iv}: Creates a new induction variable.  Only works on\n-GIMPLE@.  @code{standard_iv_increment_position} can be used to find a\n-suitable place for the iv increment.\n-@item @code{duplicate_loop_body_to_header_edge},\n-@code{tree_duplicate_loop_body_to_header_edge}: These functions (on RTL and\n-on GIMPLE) duplicate the body of the loop prescribed number of times on\n-one of the edges entering loop header, thus performing either loop\n-unrolling or loop peeling.  @code{can_duplicate_loop_p}\n-(@code{can_unroll_loop_p} on GIMPLE) must be true for the duplicated\n-loop.\n-@item @code{loop_version}: This function creates a copy of a loop, and\n-a branch before them that selects one of them depending on the\n-prescribed condition.  This is useful for optimizations that need to\n-verify some assumptions in runtime (one of the copies of the loop is\n-usually left unchanged, while the other one is transformed in some way).\n-@item @code{tree_unroll_loop}: Unrolls the loop, including peeling the\n-extra iterations to make the number of iterations divisible by unroll\n-factor, updating the exit condition, and removing the exits that now\n-cannot be taken.  Works only on GIMPLE.\n-@end itemize\n-\n-@node LCSSA\n-@section Loop-closed SSA form\n-@cindex LCSSA\n-@cindex Loop-closed SSA form\n-\n-Throughout the loop optimizations on tree level, one extra condition is\n-enforced on the SSA form:  No SSA name is used outside of the loop in\n-that it is defined.  The SSA form satisfying this condition is called\n-``loop-closed SSA form'' -- LCSSA@.  To enforce LCSSA, PHI nodes must be\n-created at the exits of the loops for the SSA names that are used\n-outside of them.  Only the real operands (not virtual SSA names) are\n-held in LCSSA, in order to save memory.\n-\n-There are various benefits of LCSSA:\n-\n-@itemize\n-@item Many optimizations (value range analysis, final value\n-replacement) are interested in the values that are defined in the loop\n-and used outside of it, i.e., exactly those for that we create new PHI\n-nodes.\n-@item In induction variable analysis, it is not necessary to specify the\n-loop in that the analysis should be performed -- the scalar evolution\n-analysis always returns the results with respect to the loop in that the\n-SSA name is defined.\n-@item It makes updating of SSA form during loop transformations simpler.\n-Without LCSSA, operations like loop unrolling may force creation of PHI\n-nodes arbitrarily far from the loop, while in LCSSA, the SSA form can be\n-updated locally.  However, since we only keep real operands in LCSSA, we\n-cannot use this advantage (we could have local updating of real\n-operands, but it is not much more efficient than to use generic SSA form\n-updating for it as well; the amount of changes to SSA is the same).\n-@end itemize\n-\n-However, it also means LCSSA must be updated.  This is usually\n-straightforward, unless you create a new value in loop and use it\n-outside, or unless you manipulate loop exit edges (functions are\n-provided to make these manipulations simple).\n-@code{rewrite_into_loop_closed_ssa} is used to rewrite SSA form to\n-LCSSA, and @code{verify_loop_closed_ssa} to check that the invariant of\n-LCSSA is preserved.\n-\n-@node Scalar evolutions\n-@section Scalar evolutions\n-@cindex Scalar evolutions\n-@cindex IV analysis on GIMPLE\n-\n-Scalar evolutions (SCEV) are used to represent results of induction\n-variable analysis on GIMPLE@.  They enable us to represent variables with\n-complicated behavior in a simple and consistent way (we only use it to\n-express values of polynomial induction variables, but it is possible to\n-extend it).  The interfaces to SCEV analysis are declared in\n-@file{tree-scalar-evolution.h}.  To use scalar evolutions analysis,\n-@code{scev_initialize} must be used.  To stop using SCEV,\n-@code{scev_finalize} should be used.  SCEV analysis caches results in\n-order to save time and memory.  This cache however is made invalid by\n-most of the loop transformations, including removal of code.  If such a\n-transformation is performed, @code{scev_reset} must be called to clean\n-the caches.\n-\n-Given an SSA name, its behavior in loops can be analyzed using the\n-@code{analyze_scalar_evolution} function.  The returned SCEV however\n-does not have to be fully analyzed and it may contain references to\n-other SSA names defined in the loop.  To resolve these (potentially\n-recursive) references, @code{instantiate_parameters} or\n-@code{resolve_mixers} functions must be used.\n-@code{instantiate_parameters} is useful when you use the results of SCEV\n-only for some analysis, and when you work with whole nest of loops at\n-once.  It will try replacing all SSA names by their SCEV in all loops,\n-including the super-loops of the current loop, thus providing a complete\n-information about the behavior of the variable in the loop nest.\n-@code{resolve_mixers} is useful if you work with only one loop at a\n-time, and if you possibly need to create code based on the value of the\n-induction variable.  It will only resolve the SSA names defined in the\n-current loop, leaving the SSA names defined outside unchanged, even if\n-their evolution in the outer loops is known.\n-\n-The SCEV is a normal tree expression, except for the fact that it may\n-contain several special tree nodes.  One of them is\n-@code{SCEV_NOT_KNOWN}, used for SSA names whose value cannot be\n-expressed.  The other one is @code{POLYNOMIAL_CHREC}.  Polynomial chrec\n-has three arguments -- base, step and loop (both base and step may\n-contain further polynomial chrecs).  Type of the expression and of base\n-and step must be the same.  A variable has evolution\n-@code{POLYNOMIAL_CHREC(base, step, loop)} if it is (in the specified\n-loop) equivalent to @code{x_1} in the following example\n-\n-@smallexample\n-while (@dots{})\n-  @{\n-    x_1 = phi (base, x_2);\n-    x_2 = x_1 + step;\n-  @}\n-@end smallexample\n-\n-Note that this includes the language restrictions on the operations.\n-For example, if we compile C code and @code{x} has signed type, then the\n-overflow in addition would cause undefined behavior, and we may assume\n-that this does not happen.  Hence, the value with this SCEV cannot\n-overflow (which restricts the number of iterations of such a loop).\n-\n-In many cases, one wants to restrict the attention just to affine\n-induction variables.  In this case, the extra expressive power of SCEV\n-is not useful, and may complicate the optimizations.  In this case,\n-@code{simple_iv} function may be used to analyze a value -- the result\n-is a loop-invariant base and step.\n-\n-@node loop-iv\n-@section IV analysis on RTL\n-@cindex IV analysis on RTL\n-\n-The induction variable on RTL is simple and only allows analysis of\n-affine induction variables, and only in one loop at once.  The interface\n-is declared in @file{cfgloop.h}.  Before analyzing induction variables\n-in a loop L, @code{iv_analysis_loop_init} function must be called on L.\n-After the analysis (possibly calling @code{iv_analysis_loop_init} for\n-several loops) is finished, @code{iv_analysis_done} should be called.\n-The following functions can be used to access the results of the\n-analysis:\n-\n-@itemize\n-@item @code{iv_analyze}: Analyzes a single register used in the given\n-insn.  If no use of the register in this insn is found, the following\n-insns are scanned, so that this function can be called on the insn\n-returned by get_condition.\n-@item @code{iv_analyze_result}: Analyzes result of the assignment in the\n-given insn.\n-@item @code{iv_analyze_expr}: Analyzes a more complicated expression.\n-All its operands are analyzed by @code{iv_analyze}, and hence they must\n-be used in the specified insn or one of the following insns.\n-@end itemize\n-\n-The description of the induction variable is provided in @code{struct\n-rtx_iv}.  In order to handle subregs, the representation is a bit\n-complicated; if the value of the @code{extend} field is not\n-@code{UNKNOWN}, the value of the induction variable in the i-th\n-iteration is\n-\n-@smallexample\n-delta + mult * extend_@{extend_mode@} (subreg_@{mode@} (base + i * step)),\n-@end smallexample\n-\n-with the following exception:  if @code{first_special} is true, then the\n-value in the first iteration (when @code{i} is zero) is @code{delta +\n-mult * base}.  However, if @code{extend} is equal to @code{UNKNOWN},\n-then @code{first_special} must be false, @code{delta} 0, @code{mult} 1\n-and the value in the i-th iteration is\n-\n-@smallexample\n-subreg_@{mode@} (base + i * step)\n-@end smallexample\n-\n-The function @code{get_iv_value} can be used to perform these\n-calculations.\n-\n-@node Number of iterations\n-@section Number of iterations analysis\n-@cindex Number of iterations analysis\n-\n-Both on GIMPLE and on RTL, there are functions available to determine\n-the number of iterations of a loop, with a similar interface.  The\n-number of iterations of a loop in GCC is defined as the number of\n-executions of the loop latch.  In many cases, it is not possible to\n-determine the number of iterations unconditionally -- the determined\n-number is correct only if some assumptions are satisfied.  The analysis\n-tries to verify these conditions using the information contained in the\n-program; if it fails, the conditions are returned together with the\n-result.  The following information and conditions are provided by the\n-analysis:\n-\n-@itemize\n-@item @code{assumptions}: If this condition is false, the rest of\n-the information is invalid.\n-@item @code{noloop_assumptions} on RTL, @code{may_be_zero} on GIMPLE: If\n-this condition is true, the loop exits in the first iteration.\n-@item @code{infinite}: If this condition is true, the loop is infinite.\n-This condition is only available on RTL@.  On GIMPLE, conditions for\n-finiteness of the loop are included in @code{assumptions}.\n-@item @code{niter_expr} on RTL, @code{niter} on GIMPLE: The expression\n-that gives number of iterations.  The number of iterations is defined as\n-the number of executions of the loop latch.\n-@end itemize\n-\n-Both on GIMPLE and on RTL, it necessary for the induction variable\n-analysis framework to be initialized (SCEV on GIMPLE, loop-iv on RTL).\n-On GIMPLE, the results are stored to @code{struct tree_niter_desc}\n-structure.  Number of iterations before the loop is exited through a\n-given exit can be determined using @code{number_of_iterations_exit}\n-function.  On RTL, the results are returned in @code{struct niter_desc}\n-structure.  The corresponding function is named\n-@code{check_simple_exit}.  There are also functions that pass through\n-all the exits of a loop and try to find one with easy to determine\n-number of iterations -- @code{find_loop_niter} on GIMPLE and\n-@code{find_simple_exit} on RTL@.  Finally, there are functions that\n-provide the same information, but additionally cache it, so that\n-repeated calls to number of iterations are not so costly --\n-@code{number_of_latch_executions} on GIMPLE and @code{get_simple_loop_desc}\n-on RTL.\n-\n-Note that some of these functions may behave slightly differently than\n-others -- some of them return only the expression for the number of\n-iterations, and fail if there are some assumptions.  The function\n-@code{number_of_latch_executions} works only for single-exit loops.\n-The function @code{number_of_cond_exit_executions} can be used to\n-determine number of executions of the exit condition of a single-exit\n-loop (i.e., the @code{number_of_latch_executions} increased by one).\n-\n-On GIMPLE, below constraint flags affect semantics of some APIs of number\n-of iterations analyzer:\n-\n-@itemize\n-@item @code{LOOP_C_INFINITE}: If this constraint flag is set, the loop\n-is known to be infinite.  APIs like @code{number_of_iterations_exit} can\n-return false directly without doing any analysis.\n-@item @code{LOOP_C_FINITE}: If this constraint flag is set, the loop is\n-known to be finite, in other words, loop's number of iterations can be\n-computed with @code{assumptions} be true.\n-@end itemize\n-\n-Generally, the constraint flags are set/cleared by consumers which are\n-loop optimizers.  It's also the consumers' responsibility to set/clear\n-constraints correctly.  Failing to do that might result in hard to track\n-down bugs in scev/niter consumers.  One typical use case is vectorizer:\n-it drives number of iterations analyzer by setting @code{LOOP_C_FINITE}\n-and vectorizes possibly infinite loop by versioning loop with analysis\n-result.  In return, constraints set by consumers can also help number of\n-iterations analyzer in following optimizers.  For example, @code{niter}\n-of a loop versioned under @code{assumptions} is valid unconditionally.\n-\n-Other constraints may be added in the future, for example, a constraint\n-indicating that loops' latch must roll thus @code{may_be_zero} would be\n-false unconditionally.\n-\n-@node Dependency analysis\n-@section Data Dependency Analysis\n-@cindex Data Dependency Analysis\n-\n-The code for the data dependence analysis can be found in\n-@file{tree-data-ref.cc} and its interface and data structures are\n-described in @file{tree-data-ref.h}.  The function that computes the\n-data dependences for all the array and pointer references for a given\n-loop is @code{compute_data_dependences_for_loop}.  This function is\n-currently used by the linear loop transform and the vectorization\n-passes.  Before calling this function, one has to allocate two vectors:\n-a first vector will contain the set of data references that are\n-contained in the analyzed loop body, and the second vector will contain\n-the dependence relations between the data references.  Thus if the\n-vector of data references is of size @code{n}, the vector containing the\n-dependence relations will contain @code{n*n} elements.  However if the\n-analyzed loop contains side effects, such as calls that potentially can\n-interfere with the data references in the current analyzed loop, the\n-analysis stops while scanning the loop body for data references, and\n-inserts a single @code{chrec_dont_know} in the dependence relation\n-array.\n-\n-The data references are discovered in a particular order during the\n-scanning of the loop body: the loop body is analyzed in execution order,\n-and the data references of each statement are pushed at the end of the\n-data reference array.  Two data references syntactically occur in the\n-program in the same order as in the array of data references.  This\n-syntactic order is important in some classical data dependence tests,\n-and mapping this order to the elements of this array avoids costly\n-queries to the loop body representation.\n-\n-Three types of data references are currently handled: ARRAY_REF,\n-INDIRECT_REF and COMPONENT_REF@. The data structure for the data reference\n-is @code{data_reference}, where @code{data_reference_p} is a name of a\n-pointer to the data reference structure. The structure contains the\n-following elements:\n-\n-@itemize\n-@item @code{base_object_info}: Provides information about the base object\n-of the data reference and its access functions. These access functions\n-represent the evolution of the data reference in the loop relative to\n-its base, in keeping with the classical meaning of the data reference\n-access function for the support of arrays. For example, for a reference\n-@code{a.b[i][j]}, the base object is @code{a.b} and the access functions,\n-one for each array subscript, are:\n-@code{@{i_init, + i_step@}_1, @{j_init, +, j_step@}_2}.\n-\n-@item @code{first_location_in_loop}: Provides information about the first\n-location accessed by the data reference in the loop and about the access\n-function used to represent evolution relative to this location. This data\n-is used to support pointers, and is not used for arrays (for which we\n-have base objects). Pointer accesses are represented as a one-dimensional\n-access that starts from the first location accessed in the loop. For\n-example:\n-\n-@smallexample\n-      for1 i\n-         for2 j\n-          *((int *)p + i + j) = a[i][j];\n-@end smallexample\n-\n-The access function of the pointer access is @code{@{0, + 4B@}_for2}\n-relative to @code{p + i}. The access functions of the array are\n-@code{@{i_init, + i_step@}_for1} and @code{@{j_init, +, j_step@}_for2}\n-relative to @code{a}.\n-\n-Usually, the object the pointer refers to is either unknown, or we cannot\n-prove that the access is confined to the boundaries of a certain object.\n-\n-Two data references can be compared only if at least one of these two\n-representations has all its fields filled for both data references.\n-\n-The current strategy for data dependence tests is as follows:\n-If both @code{a} and @code{b} are represented as arrays, compare\n-@code{a.base_object} and @code{b.base_object};\n-if they are equal, apply dependence tests (use access functions based on\n-base_objects).\n-Else if both @code{a} and @code{b} are represented as pointers, compare\n-@code{a.first_location} and @code{b.first_location};\n-if they are equal, apply dependence tests (use access functions based on\n-first location).\n-However, if @code{a} and @code{b} are represented differently, only try\n-to prove that the bases are definitely different.\n-\n-@item Aliasing information.\n-@item Alignment information.\n-@end itemize\n-\n-The structure describing the relation between two data references is\n-@code{data_dependence_relation} and the shorter name for a pointer to\n-such a structure is @code{ddr_p}.  This structure contains:\n-\n-@itemize\n-@item a pointer to each data reference,\n-@item a tree node @code{are_dependent} that is set to @code{chrec_known}\n-if the analysis has proved that there is no dependence between these two\n-data references, @code{chrec_dont_know} if the analysis was not able to\n-determine any useful result and potentially there could exist a\n-dependence between these data references, and @code{are_dependent} is\n-set to @code{NULL_TREE} if there exist a dependence relation between the\n-data references, and the description of this dependence relation is\n-given in the @code{subscripts}, @code{dir_vects}, and @code{dist_vects}\n-arrays,\n-@item a boolean that determines whether the dependence relation can be\n-represented by a classical distance vector,\n-@item an array @code{subscripts} that contains a description of each\n-subscript of the data references.  Given two array accesses a\n-subscript is the tuple composed of the access functions for a given\n-dimension.  For example, given @code{A[f1][f2][f3]} and\n-@code{B[g1][g2][g3]}, there are three subscripts: @code{(f1, g1), (f2,\n-g2), (f3, g3)}.\n-@item two arrays @code{dir_vects} and @code{dist_vects} that contain\n-classical representations of the data dependences under the form of\n-direction and distance dependence vectors,\n-@item an array of loops @code{loop_nest} that contains the loops to\n-which the distance and direction vectors refer to.\n-@end itemize\n-\n-Several functions for pretty printing the information extracted by the\n-data dependence analysis are available: @code{dump_ddrs} prints with a\n-maximum verbosity the details of a data dependence relations array,\n-@code{dump_dist_dir_vectors} prints only the classical distance and\n-direction vectors for a data dependence relations array, and\n-@code{dump_data_references} prints the details of the data references\n-contained in a data reference array."}, {"sha": "d7fb346e25c025272819560a5f80889a4c678a6c", "filename": "gcc/doc/lto-dump.texi", "status": "removed", "additions": 0, "deletions": 131, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Flto-dump.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Flto-dump.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Flto-dump.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,131 +0,0 @@\n-@c Copyright (C) 2018-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@ignore\n-@c man begin COPYRIGHT\n-Copyright @copyright{} 2017-2022 Free Software Foundation, Inc.\n-\n-Permission is granted to copy, distribute and/or modify this document\n-under the terms of the GNU Free Documentation License, Version 1.3 or\n-any later version published by the Free Software Foundation; with the\n-Invariant Sections being ``GNU General Public License'' and ``Funding\n-Free Software'', the Front-Cover texts being (a) (see below), and with\n-the Back-Cover Texts being (b) (see below).  A copy of the license is\n-included in the gfdl(7) man page.\n-\n-(a) The FSF's Front-Cover Text is:\n-\n-     A GNU Manual\n-\n-(b) The FSF's Back-Cover Text is:\n-\n-     You have freedom to copy and modify this GNU Manual, like GNU\n-     software.  Copies published by the Free Software Foundation raise\n-     funds for GNU development.\n-@c man end\n-@c Set file name and title for the man page.\n-@setfilename lto-dump\n-@settitle Tool for dumping LTO object files.\n-@end ignore\n-\n-@node lto-dump\n-@chapter @command{lto-dump}---Tool for dumping LTO object files.\n-\n-@menu\n-* lto-dump Intro::             Introduction to lto-dump.\n-* Invoking lto-dump::          How to use lto-dump.\n-@end menu\n-\n-@node lto-dump Intro\n-@section Introduction to @command{lto-dump}\n-@c man begin DESCRIPTION\n-\n-@command{lto-dump} is a tool you can use in conjunction with GCC to\n-dump link time optimization object files.\n-\n-@c man end\n-\n-@node Invoking lto-dump\n-@section Invoking @command{lto-dump}\n-\n-@smallexample\n-Usage: lto-dump @r{[}@var{OPTION}@r{]} ... @var{objfiles}\n-@end smallexample\n-\n-@command{lto-dump} accepts the following options:\n-\n-@ignore\n-@c man begin SYNOPSIS\n-lto-dump [@option{-list}]\n-     [@option{-demangle}]\n-     [@option{-defined-only}]\n-     [@option{-print-value}]\n-     [@option{-name-sort}]\n-     [@option{-size-sort}]\n-     [@option{-reverse-sort}]\n-     [@option{-no-sort}]\n-     [@option{-symbol=}]\n-     [@option{-objects}]\n-     [@option{-type-stats}]\n-     [@option{-tree-stats}]\n-     [@option{-gimple-stats}]\n-     [@option{-dump-level=}]\n-     [@option{-dump-body=}]\n-     [@option{-help}] @var{lto-dump}\n-@c man end\n-@end ignore\n-\n-@c man begin OPTIONS\n-@table @gcctabopt\n-@item -list\n-Dumps list of details of functions and variables.\n-\n-@item -demangle\n-Dump the demangled output.\n-\n-@item -defined-only\n-Dump only the defined symbols.\n-\n-@item -print-value\n-Dump initial values of the variables.\n-\n-@item -name-sort\n-Sort the symbols alphabetically.\n-\n-@item -size-sort\n-Sort the symbols according to size.\n-\n-@item -reverse-sort\n-Dump the symbols in reverse order.\n-\n-@item -no-sort\n-Dump the symbols in order of occurrence.\n-\n-@item -symbol=\n-Dump the details of specific symbol.\n-\n-@item -objects\n-Dump the details of LTO objects.\n-\n-@item -type-stats\n-Dump the statistics of tree types.\n-\n-@item -tree-stats\n-Dump the statistics of trees.\n-\n-@item -gimple-stats\n-Dump the statistics of gimple statements.\n-\n-@item -dump-level=\n-For deciding the optimization level of body.\n-\n-@item -dump-body=\n-Dump the specific gimple body.\n-\n-@item -help\n-Display the dump tool help.\n-\n-@end table\n-\n-@c man end"}, {"sha": "8ee2a5bdc970ce5113f44d6b1fb7e45283679d2f", "filename": "gcc/doc/lto.texi", "status": "removed", "additions": 0, "deletions": 591, "changes": 591, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Flto.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Flto.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Flto.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,591 +0,0 @@\n-@c Copyright (C) 2010-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-@c Contributed by Jan Hubicka <jh@suse.cz> and\n-@c Diego Novillo <dnovillo@google.com>\n-\n-@node LTO\n-@chapter Link Time Optimization\n-@cindex lto\n-@cindex whopr\n-@cindex wpa\n-@cindex ltrans\n-\n-Link Time Optimization (LTO) gives GCC the capability of\n-dumping its internal representation (GIMPLE) to disk,\n-so that all the different compilation units that make up\n-a single executable can be optimized as a single module.\n-This expands the scope of inter-procedural optimizations\n-to encompass the whole program (or, rather, everything\n-that is visible at link time).\n-\n-@menu\n-* LTO Overview::            Overview of LTO.\n-* LTO object file layout::  LTO file sections in ELF.\n-* IPA::                     Using summary information in IPA passes.\n-* WHOPR::                   Whole program assumptions,\n-                            linker plugin and symbol visibilities.\n-* Internal flags::          Internal flags controlling @code{lto1}.\n-@end menu\n-\n-@node LTO Overview\n-@section Design Overview\n-\n-Link time optimization is implemented as a GCC front end for a\n-bytecode representation of GIMPLE that is emitted in special sections\n-of @code{.o} files.  Currently, LTO support is enabled in most\n-ELF-based systems, as well as darwin, cygwin and mingw systems.\n-\n-By default, object files generated with LTO support contain only GIMPLE\n-bytecode.  Such objects are called ``slim'', and they require that\n-tools like @code{ar} and @code{nm} understand symbol tables of LTO\n-sections.  For most targets these tools have been extended to use the\n-plugin infrastructure, so GCC can support ``slim'' objects consisting\n-of the intermediate code alone.\n-\n-GIMPLE bytecode could also be saved alongside final object code if\n-the @option{-ffat-lto-objects} option is passed, or if no plugin support\n-is detected for @code{ar} and @code{nm} when GCC is configured.  It makes\n-the object files generated with LTO support larger than regular object\n-files.  This ``fat'' object format allows to ship one set of fat\n-objects which could be used both for development and the production of\n-optimized builds.  A, perhaps surprising, side effect of this feature\n-is that any mistake in the toolchain leads to LTO information not\n-being used (e.g.@: an older @code{libtool} calling @code{ld} directly).\n-This is both an advantage, as the system is more robust, and a\n-disadvantage, as the user is not informed that the optimization has\n-been disabled.\n-\n-At the highest level, LTO splits the compiler in two.  The first half\n-(the ``writer'') produces a streaming representation of all the\n-internal data structures needed to optimize and generate code.  This\n-includes declarations, types, the callgraph and the GIMPLE representation\n-of function bodies.\n-\n-When @option{-flto} is given during compilation of a source file, the\n-pass manager executes all the passes in @code{all_lto_gen_passes}.\n-Currently, this phase is composed of two IPA passes:\n-\n-@itemize @bullet\n-@item @code{pass_ipa_lto_gimple_out}\n-This pass executes the function @code{lto_output} in\n-@file{lto-streamer-out.cc}, which traverses the call graph encoding\n-every reachable declaration, type and function.  This generates a\n-memory representation of all the file sections described below.\n-\n-@item @code{pass_ipa_lto_finish_out}\n-This pass executes the function @code{produce_asm_for_decls} in\n-@file{lto-streamer-out.cc}, which takes the memory image built in the\n-previous pass and encodes it in the corresponding ELF file sections.\n-@end itemize\n-\n-The second half of LTO support is the ``reader''.  This is implemented\n-as the GCC front end @file{lto1} in @file{lto/lto.cc}.  When\n-@file{collect2} detects a link set of @code{.o}/@code{.a} files with\n-LTO information and the @option{-flto} is enabled, it invokes\n-@file{lto1} which reads the set of files and aggregates them into a\n-single translation unit for optimization.  The main entry point for\n-the reader is @file{lto/lto.cc}:@code{lto_main}.\n-\n-@subsection LTO modes of operation\n-\n-One of the main goals of the GCC link-time infrastructure was to allow\n-effective compilation of large programs.  For this reason GCC implements two\n-link-time compilation modes.\n-\n-@enumerate\n-@item\t@emph{LTO mode}, in which the whole program is read into the\n-compiler at link-time and optimized in a similar way as if it\n-were a single source-level compilation unit.\n-\n-@item\t@emph{WHOPR or partitioned mode}, designed to utilize multiple\n-CPUs and/or a distributed compilation environment to quickly link\n-large applications.  WHOPR stands for WHOle Program optimizeR (not to\n-be confused with the semantics of @option{-fwhole-program}).  It\n-partitions the aggregated callgraph from many different @code{.o}\n-files and distributes the compilation of the sub-graphs to different\n-CPUs.\n-\n-Note that distributed compilation is not implemented yet, but since\n-the parallelism is facilitated via generating a @code{Makefile}, it\n-would be easy to implement.\n-@end enumerate\n-\n-WHOPR splits LTO into three main stages:\n-@enumerate\n-@item Local generation (LGEN)\n-This stage executes in parallel.  Every file in the program is compiled\n-into the intermediate language and packaged together with the local\n-call-graph and summary information.  This stage is the same for both\n-the LTO and WHOPR compilation mode.\n-\n-@item Whole Program Analysis (WPA)\n-WPA is performed sequentially.  The global call-graph is generated, and\n-a global analysis procedure makes transformation decisions.  The global\n-call-graph is partitioned to facilitate parallel optimization during\n-phase 3.  The results of the WPA stage are stored into new object files\n-which contain the partitions of program expressed in the intermediate\n-language and the optimization decisions.\n-\n-@item Local transformations (LTRANS)\n-This stage executes in parallel.  All the decisions made during phase 2\n-are implemented locally in each partitioned object file, and the final\n-object code is generated.  Optimizations which cannot be decided\n-efficiently during the phase 2 may be performed on the local\n-call-graph partitions.\n-@end enumerate\n-\n-WHOPR can be seen as an extension of the usual LTO mode of\n-compilation.  In LTO, WPA and LTRANS are executed within a single\n-execution of the compiler, after the whole program has been read into\n-memory.\n-\n-When compiling in WHOPR mode, the callgraph is partitioned during\n-the WPA stage.  The whole program is split into a given number of\n-partitions of roughly the same size.  The compiler tries to\n-minimize the number of references which cross partition boundaries.\n-The main advantage of WHOPR is to allow the parallel execution of\n-LTRANS stages, which are the most time-consuming part of the\n-compilation process.  Additionally, it avoids the need to load the\n-whole program into memory.\n-\n-\n-@node LTO object file layout\n-@section LTO file sections\n-\n-LTO information is stored in several ELF sections inside object files.\n-Data structures and enum codes for sections are defined in\n-@file{lto-streamer.h}.\n-\n-These sections are emitted from @file{lto-streamer-out.cc} and mapped\n-in all at once from @file{lto/lto.cc}:@code{lto_file_read}.  The\n-individual functions dealing with the reading/writing of each section\n-are described below.\n-\n-@itemize @bullet\n-@item Command line options (@code{.gnu.lto_.opts})\n-\n-This section contains the command line options used to generate the\n-object files.  This is used at link time to determine the optimization\n-level and other settings when they are not explicitly specified at the\n-linker command line.\n-\n-Currently, GCC does not support combining LTO object files compiled\n-with different set of the command line options into a single binary.\n-At link time, the options given on the command line and the options\n-saved on all the files in a link-time set are applied globally.  No\n-attempt is made at validating the combination of flags (other than the\n-usual validation done by option processing).  This is implemented in\n-@file{lto/lto.cc}:@code{lto_read_all_file_options}.\n-\n-\n-@item Symbol table (@code{.gnu.lto_.symtab})\n-\n-This table replaces the ELF symbol table for functions and variables\n-represented in the LTO IL.  Symbols used and exported by the optimized\n-assembly code of ``fat'' objects might not match the ones used and\n-exported by the intermediate code.  This table is necessary because\n-the intermediate code is less optimized and thus requires a separate\n-symbol table.\n-\n-Additionally, the binary code in the ``fat'' object will lack a call\n-to a function, since the call was optimized out at compilation time\n-after the intermediate language was streamed out.  In some special\n-cases, the same optimization may not happen during link-time\n-optimization.  This would lead to an undefined symbol if only one\n-symbol table was used.\n-\n-The symbol table is emitted in\n-@file{lto-streamer-out.cc}:@code{produce_symtab}.\n-\n-\n-@item Global declarations and types (@code{.gnu.lto_.decls})\n-\n-This section contains an intermediate language dump of all\n-declarations and types required to represent the callgraph, static\n-variables and top-level debug info.\n-\n-The contents of this section are emitted in\n-@file{lto-streamer-out.cc}:@code{produce_asm_for_decls}.  Types and\n-symbols are emitted in a topological order that preserves the sharing\n-of pointers when the file is read back in\n-(@file{lto.cc}:@code{read_cgraph_and_symbols}).\n-\n-\n-@item The callgraph (@code{.gnu.lto_.cgraph})\n-\n-This section contains the basic data structure used by the GCC\n-inter-procedural optimization infrastructure.  This section stores an\n-annotated multi-graph which represents the functions and call sites as\n-well as the variables, aliases and top-level @code{asm} statements.\n-\n-This section is emitted in\n-@file{lto-streamer-out.cc}:@code{output_cgraph} and read in\n-@file{lto-cgraph.cc}:@code{input_cgraph}.\n-\n-\n-@item IPA references (@code{.gnu.lto_.refs})\n-\n-This section contains references between function and static\n-variables.  It is emitted by @file{lto-cgraph.cc}:@code{output_refs}\n-and read by @file{lto-cgraph.cc}:@code{input_refs}.\n-\n-\n-@item Function bodies (@code{.gnu.lto_.function_body.<name>})\n-\n-This section contains function bodies in the intermediate language\n-representation.  Every function body is in a separate section to allow\n-copying of the section independently to different object files or\n-reading the function on demand.\n-\n-Functions are emitted in\n-@file{lto-streamer-out.cc}:@code{output_function} and read in\n-@file{lto-streamer-in.cc}:@code{input_function}.\n-\n-\n-@item Static variable initializers (@code{.gnu.lto_.vars})\n-\n-This section contains all the symbols in the global variable pool.  It\n-is emitted by @file{lto-cgraph.cc}:@code{output_varpool} and read in\n-@file{lto-cgraph.cc}:@code{input_cgraph}.\n-\n-@item Summaries and optimization summaries used by IPA passes\n-(@code{.gnu.lto_.<xxx>}, where @code{<xxx>} is one of @code{jmpfuncs},\n-@code{pureconst} or @code{reference})\n-\n-These sections are used by IPA passes that need to emit summary\n-information during LTO generation to be read and aggregated at\n-link time.  Each pass is responsible for implementing two pass manager\n-hooks: one for writing the summary and another for reading it in.  The\n-format of these sections is entirely up to each individual pass.  The\n-only requirement is that the writer and reader hooks agree on the\n-format.\n-@end itemize\n-\n-\n-@node IPA\n-@section Using summary information in IPA passes\n-\n-Programs are represented internally as a @emph{callgraph} (a\n-multi-graph where nodes are functions and edges are call sites)\n-and a @emph{varpool} (a list of static and external variables in\n-the program).\n-\n-The inter-procedural optimization is organized as a sequence of\n-individual passes, which operate on the callgraph and the\n-varpool.  To make the implementation of WHOPR possible, every\n-inter-procedural optimization pass is split into several stages\n-that are executed at different times during WHOPR compilation:\n-\n-@itemize @bullet\n-@item LGEN time\n-@enumerate\n-@item @emph{Generate summary} (@code{generate_summary} in\n-@code{struct ipa_opt_pass_d}).  This stage analyzes every function\n-body and variable initializer is examined and stores relevant\n-information into a pass-specific data structure.\n-\n-@item @emph{Write summary} (@code{write_summary} in\n-@code{struct ipa_opt_pass_d}).  This stage writes all the\n-pass-specific information generated by @code{generate_summary}.\n-Summaries go into their own @code{LTO_section_*} sections that\n-have to be declared in @file{lto-streamer.h}:@code{enum\n-lto_section_type}.  A new section is created by calling\n-@code{create_output_block} and data can be written using the\n-@code{lto_output_*} routines.\n-@end enumerate\n-\n-@item WPA time\n-@enumerate\n-@item @emph{Read summary} (@code{read_summary} in\n-@code{struct ipa_opt_pass_d}).  This stage reads all the\n-pass-specific information in exactly the same order that it was\n-written by @code{write_summary}.\n-\n-@item @emph{Execute} (@code{execute} in @code{struct\n-opt_pass}).  This performs inter-procedural propagation.  This\n-must be done without actual access to the individual function\n-bodies or variable initializers.  Typically, this results in a\n-transitive closure operation over the summary information of all\n-the nodes in the callgraph.\n-\n-@item @emph{Write optimization summary}\n-(@code{write_optimization_summary} in @code{struct\n-ipa_opt_pass_d}).  This writes the result of the inter-procedural\n-propagation into the object file.  This can use the same data\n-structures and helper routines used in @code{write_summary}.\n-@end enumerate\n-\n-@item LTRANS time\n-@enumerate\n-@item @emph{Read optimization summary}\n-(@code{read_optimization_summary} in @code{struct\n-ipa_opt_pass_d}).  The counterpart to\n-@code{write_optimization_summary}.  This reads the interprocedural\n-optimization decisions in exactly the same format emitted by\n-@code{write_optimization_summary}.\n-\n-@item @emph{Transform} (@code{function_transform} and\n-@code{variable_transform} in @code{struct ipa_opt_pass_d}).\n-The actual function bodies and variable initializers are updated\n-based on the information passed down from the @emph{Execute} stage.\n-@end enumerate\n-@end itemize\n-\n-The implementation of the inter-procedural passes are shared\n-between LTO, WHOPR and classic non-LTO compilation.\n-\n-@itemize\n-@item During the traditional file-by-file mode every pass executes its\n-own @emph{Generate summary}, @emph{Execute}, and @emph{Transform}\n-stages within the single execution context of the compiler.\n-\n-@item In LTO compilation mode, every pass uses @emph{Generate\n-summary} and @emph{Write summary} stages at compilation time,\n-while the @emph{Read summary}, @emph{Execute}, and\n-@emph{Transform} stages are executed at link time.\n-\n-@item In WHOPR mode all stages are used.\n-@end itemize\n-\n-To simplify development, the GCC pass manager differentiates\n-between normal inter-procedural passes (@pxref{Regular IPA passes}),\n-small inter-procedural passes (@pxref{Small IPA passes})\n-and late inter-procedural passes (@pxref{Late IPA passes}).\n-A small or late IPA pass (@code{SIMPLE_IPA_PASS}) does\n-everything at once and thus cannot be executed during WPA in\n-WHOPR mode.  It defines only the @emph{Execute} stage and during\n-this stage it accesses and modifies the function bodies.  Such\n-passes are useful for optimization at LGEN or LTRANS time and are\n-used, for example, to implement early optimization before writing\n-object files.  The simple inter-procedural passes can also be used\n-for easier prototyping and development of a new inter-procedural\n-pass.\n-\n-\n-@subsection Virtual clones\n-\n-One of the main challenges of introducing the WHOPR compilation\n-mode was addressing the interactions between optimization passes.\n-In LTO compilation mode, the passes are executed in a sequence,\n-each of which consists of analysis (or @emph{Generate summary}),\n-propagation (or @emph{Execute}) and @emph{Transform} stages.\n-Once the work of one pass is finished, the next pass sees the\n-updated program representation and can execute.  This makes the\n-individual passes dependent on each other.\n-\n-In WHOPR mode all passes first execute their @emph{Generate\n-summary} stage.  Then summary writing marks the end of the LGEN\n-stage.  At WPA time,\n-the summaries are read back into memory and all passes run the\n-@emph{Execute} stage.  Optimization summaries are streamed and\n-sent to LTRANS, where all the passes execute the @emph{Transform}\n-stage.\n-\n-Most optimization passes split naturally into analysis,\n-propagation and transformation stages.  But some do not.  The\n-main problem arises when one pass performs changes and the\n-following pass gets confused by seeing different callgraphs\n-between the @emph{Transform} stage and the @emph{Generate summary}\n-or @emph{Execute} stage.  This means that the passes are required\n-to communicate their decisions with each other.\n-\n-To facilitate this communication, the GCC callgraph\n-infrastructure implements @emph{virtual clones}, a method of\n-representing the changes performed by the optimization passes in\n-the callgraph without needing to update function bodies.\n-\n-A @emph{virtual clone} in the callgraph is a function that has no\n-associated body, just a description of how to create its body based\n-on a different function (which itself may be a virtual clone).\n-\n-The description of function modifications includes adjustments to\n-the function's signature (which allows, for example, removing or\n-adding function arguments), substitutions to perform on the\n-function body, and, for inlined functions, a pointer to the\n-function that it will be inlined into.\n-\n-It is also possible to redirect any edge of the callgraph from a\n-function to its virtual clone.  This implies updating of the call\n-site to adjust for the new function signature.\n-\n-Most of the transformations performed by inter-procedural\n-optimizations can be represented via virtual clones.  For\n-instance, a constant propagation pass can produce a virtual clone\n-of the function which replaces one of its arguments by a\n-constant.  The inliner can represent its decisions by producing a\n-clone of a function whose body will be later integrated into\n-a given function.\n-\n-Using @emph{virtual clones}, the program can be easily updated\n-during the @emph{Execute} stage, solving most of pass interactions\n-problems that would otherwise occur during @emph{Transform}.\n-\n-Virtual clones are later materialized in the LTRANS stage and\n-turned into real functions.  Passes executed after the virtual\n-clone were introduced also perform their @emph{Transform} stage\n-on new functions, so for a pass there is no significant\n-difference between operating on a real function or a virtual\n-clone introduced before its @emph{Execute} stage.\n-\n-Optimization passes then work on virtual clones introduced before\n-their @emph{Execute} stage as if they were real functions.  The\n-only difference is that clones are not visible during the\n-@emph{Generate Summary} stage.\n-\n-To keep function summaries updated, the callgraph interface\n-allows an optimizer to register a callback that is called every\n-time a new clone is introduced as well as when the actual\n-function or variable is generated or when a function or variable\n-is removed.  These hooks are registered in the @emph{Generate\n-summary} stage and allow the pass to keep its information intact\n-until the @emph{Execute} stage.  The same hooks can also be\n-registered during the @emph{Execute} stage to keep the\n-optimization summaries updated for the @emph{Transform} stage.\n-\n-@subsection IPA references\n-\n-GCC represents IPA references in the callgraph.  For a function\n-or variable @code{A}, the @emph{IPA reference} is a list of all\n-locations where the address of @code{A} is taken and, when\n-@code{A} is a variable, a list of all direct stores and reads\n-to/from @code{A}.  References represent an oriented multi-graph on\n-the union of nodes of the callgraph and the varpool.  See\n-@file{ipa-reference.cc}:@code{ipa_reference_write_optimization_summary}\n-and\n-@file{ipa-reference.cc}:@code{ipa_reference_read_optimization_summary}\n-for details.\n-\n-@subsection Jump functions\n-Suppose that an optimization pass sees a function @code{A} and it\n-knows the values of (some of) its arguments.  The @emph{jump\n-function} describes the value of a parameter of a given function\n-call in function @code{A} based on this knowledge.\n-\n-Jump functions are used by several optimizations, such as the\n-inter-procedural constant propagation pass and the\n-devirtualization pass.  The inliner also uses jump functions to\n-perform inlining of callbacks.\n-\n-@node WHOPR\n-@section Whole program assumptions, linker plugin and symbol visibilities\n-\n-Link-time optimization gives relatively minor benefits when used\n-alone.  The problem is that propagation of inter-procedural\n-information does not work well across functions and variables\n-that are called or referenced by other compilation units (such as\n-from a dynamically linked library).  We say that such functions\n-and variables are @emph{externally visible}.\n-\n-To make the situation even more difficult, many applications\n-organize themselves as a set of shared libraries, and the default\n-ELF visibility rules allow one to overwrite any externally\n-visible symbol with a different symbol at runtime.  This\n-basically disables any optimizations across such functions and\n-variables, because the compiler cannot be sure that the function\n-body it is seeing is the same function body that will be used at\n-runtime.  Any function or variable not declared @code{static} in\n-the sources degrades the quality of inter-procedural\n-optimization.\n-\n-To avoid this problem the compiler must assume that it sees the\n-whole program when doing link-time optimization.  Strictly\n-speaking, the whole program is rarely visible even at link-time.\n-Standard system libraries are usually linked dynamically or not\n-provided with the link-time information.  In GCC, the whole\n-program option (@option{-fwhole-program}) asserts that every\n-function and variable defined in the current compilation\n-unit is static, except for function @code{main} (note: at\n-link time, the current unit is the union of all objects compiled\n-with LTO).  Since some functions and variables need to\n-be referenced externally, for example by another DSO or from an\n-assembler file, GCC also provides the function and variable\n-attribute @code{externally_visible} which can be used to disable\n-the effect of @option{-fwhole-program} on a specific symbol.\n-\n-The whole program mode assumptions are slightly more complex in\n-C++, where inline functions in headers are put into @emph{COMDAT}\n-sections.  COMDAT function and variables can be defined by\n-multiple object files and their bodies are unified at link-time\n-and dynamic link-time.  COMDAT functions are changed to local only\n-when their address is not taken and thus un-sharing them with a\n-library is not harmful.  COMDAT variables always remain externally\n-visible, however for readonly variables it is assumed that their\n-initializers cannot be overwritten by a different value.\n-\n-GCC provides the function and variable attribute\n-@code{visibility} that can be used to specify the visibility of\n-externally visible symbols (or alternatively an\n-@option{-fdefault-visibility} command line option).  ELF defines\n-the @code{default}, @code{protected}, @code{hidden} and\n-@code{internal} visibilities.\n-\n-The most commonly used is visibility is @code{hidden}.  It\n-specifies that the symbol cannot be referenced from outside of\n-the current shared library.  Unfortunately, this information\n-cannot be used directly by the link-time optimization in the\n-compiler since the whole shared library also might contain\n-non-LTO objects and those are not visible to the compiler.\n-\n-GCC solves this problem using linker plugins.  A @emph{linker\n-plugin} is an interface to the linker that allows an external\n-program to claim the ownership of a given object file.  The linker\n-then performs the linking procedure by querying the plugin about\n-the symbol table of the claimed objects and once the linking\n-decisions are complete, the plugin is allowed to provide the\n-final object file before the actual linking is made.  The linker\n-plugin obtains the symbol resolution information which specifies\n-which symbols provided by the claimed objects are bound from the\n-rest of a binary being linked.\n-\n-GCC is designed to be independent of the rest of the toolchain\n-and aims to support linkers without plugin support.  For this\n-reason it does not use the linker plugin by default.  Instead,\n-the object files are examined by @command{collect2} before being\n-passed to the linker and objects found to have LTO sections are\n-passed to @command{lto1} first.  This mode does not work for\n-library archives.  The decision on what object files from the\n-archive are needed depends on the actual linking and thus GCC\n-would have to implement the linker itself.  The resolution\n-information is missing too and thus GCC needs to make an educated\n-guess based on @option{-fwhole-program}.  Without the linker\n-plugin GCC also assumes that symbols are declared @code{hidden}\n-and not referred by non-LTO code by default.\n-\n-@node Internal flags\n-@section Internal flags controlling @code{lto1}\n-\n-The following flags are passed into @command{lto1} and are not\n-meant to be used directly from the command line.\n-\n-@itemize\n-@item -fwpa\n-@opindex fwpa\n-This option runs the serial part of the link-time optimizer\n-performing the inter-procedural propagation (WPA mode).  The\n-compiler reads in summary information from all inputs and\n-performs an analysis based on summary information only.  It\n-generates object files for subsequent runs of the link-time\n-optimizer where individual object files are optimized using both\n-summary information from the WPA mode and the actual function\n-bodies.  It then drives the LTRANS phase.\n-\n-@item -fltrans\n-@opindex fltrans\n-This option runs the link-time optimizer in the\n-local-transformation (LTRANS) mode, which reads in output from a\n-previous run of the LTO in WPA mode.  In the LTRANS mode, LTO\n-optimizes an object and produces the final assembly.\n-\n-@item -fltrans-output-list=@var{file}\n-@opindex fltrans-output-list\n-This option specifies a file to which the names of LTRANS output\n-files are written.  This option is only meaningful in conjunction\n-with @option{-fwpa}.\n-\n-@item -fresolution=@var{file}\n-@opindex fresolution\n-This option specifies the linker resolution file.  This option is\n-only meaningful in conjunction with @option{-fwpa} and as option\n-to pass through to the LTO linker plugin.\n-@end itemize"}, {"sha": "5186c1cd9d537183f52336fca6e0ac565f54cf2c", "filename": "gcc/doc/makefile.texi", "status": "removed", "additions": 0, "deletions": 201, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fmakefile.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fmakefile.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmakefile.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,201 +0,0 @@\n-@c Copyright (C) 2001-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@node Makefile\n-@subsection Makefile Targets\n-@cindex makefile targets\n-@cindex targets, makefile\n-\n-These targets are available from the @samp{gcc} directory:\n-\n-@table @code\n-@item all\n-This is the default target.  Depending on what your build/host/target\n-configuration is, it coordinates all the things that need to be built.\n-\n-@item doc\n-Produce info-formatted documentation and man pages.  Essentially it\n-calls @samp{make man} and @samp{make info}.\n-\n-@item dvi\n-Produce DVI-formatted documentation.\n-\n-@item pdf\n-Produce PDF-formatted documentation.\n-\n-@item html\n-Produce HTML-formatted documentation.\n-\n-@item man\n-Generate man pages.\n-\n-@item info\n-Generate info-formatted pages.\n-\n-@item mostlyclean\n-Delete the files made while building the compiler.\n-\n-@item clean\n-That, and all the other files built by @samp{make all}.\n-\n-@item distclean\n-That, and all the files created by @command{configure}.\n-\n-@item maintainer-clean\n-Distclean plus any file that can be generated from other files.  Note\n-that additional tools may be required beyond what is normally needed to\n-build GCC.\n-\n-@item srcextra\n-Generates files in the source directory that are not version-controlled but\n-should go into a release tarball.\n-\n-@item srcinfo\n-@itemx srcman\n-Copies the info-formatted and manpage documentation into the source\n-directory usually for the purpose of generating a release tarball.\n-\n-@item install\n-Installs GCC.\n-\n-@item uninstall\n-Deletes installed files, though this is not supported.\n-\n-@item check\n-Run the testsuite.  This creates a @file{testsuite} subdirectory that\n-has various @file{.sum} and @file{.log} files containing the results of\n-the testing.  You can run subsets with, for example, @samp{make check-gcc}.\n-You can specify specific tests by setting @env{RUNTESTFLAGS} to be the name\n-of the @file{.exp} file, optionally followed by (for some tests) an equals\n-and a file wildcard, like:\n-\n-@smallexample\n-make check-gcc RUNTESTFLAGS=\"execute.exp=19980413-*\"\n-@end smallexample\n-\n-Note that running the testsuite may require additional tools be\n-installed, such as Tcl or DejaGnu.\n-@end table\n-\n-The toplevel tree from which you start GCC compilation is not\n-the GCC directory, but rather a complex Makefile that coordinates\n-the various steps of the build, including bootstrapping the compiler\n-and using the new compiler to build target libraries.\n-\n-When GCC is configured for a native configuration, the default action\n-for @command{make} is to do a full three-stage bootstrap.  This means\n-that GCC is built three times---once with the native compiler, once with\n-the native-built compiler it just built, and once with the compiler it\n-built the second time.  In theory, the last two should produce the same\n-results, which @samp{make compare} can check.  Each stage is configured\n-separately and compiled into a separate directory, to minimize problems\n-due to ABI incompatibilities between the native compiler and GCC.\n-\n-If you do a change, rebuilding will also start from the first stage\n-and ``bubble'' up the change through the three stages.  Each stage\n-is taken from its build directory (if it had been built previously),\n-rebuilt, and copied to its subdirectory.  This will allow you to, for\n-example, continue a bootstrap after fixing a bug which causes the\n-stage2 build to crash.  It does not provide as good coverage of the\n-compiler as bootstrapping from scratch, but it ensures that the new\n-code is syntactically correct (e.g., that you did not use GCC extensions\n-by mistake), and avoids spurious bootstrap comparison\n-failures@footnote{Except if the compiler was buggy and miscompiled\n-some of the files that were not modified.  In this case, it's best\n-to use @command{make restrap}.}.\n-\n-Other targets available from the top level include:\n-\n-@table @code\n-@item bootstrap-lean\n-Like @code{bootstrap}, except that the various stages are removed once\n-they're no longer needed.  This saves disk space.\n-\n-@item bootstrap2\n-@itemx bootstrap2-lean\n-Performs only the first two stages of bootstrap.  Unlike a three-stage\n-bootstrap, this does not perform a comparison to test that the compiler\n-is running properly.  Note that the disk space required by a ``lean''\n-bootstrap is approximately independent of the number of stages.\n-\n-@item stage@var{N}-bubble (@var{N} = 1@dots{}4, profile, feedback)\n-Rebuild all the stages up to @var{N}, with the appropriate flags,\n-``bubbling'' the changes as described above.\n-\n-@item all-stage@var{N} (@var{N} = 1@dots{}4, profile, feedback)\n-Assuming that stage @var{N} has already been built, rebuild it with the\n-appropriate flags.  This is rarely needed.\n-\n-@item cleanstrap\n-Remove everything (@samp{make clean}) and rebuilds (@samp{make bootstrap}).\n-\n-@item compare\n-Compares the results of stages 2 and 3.  This ensures that the compiler\n-is running properly, since it should produce the same object files\n-regardless of how it itself was compiled.\n-\n-@item distclean-stage@var{N} (@var{N} = 1@dots{}4, profile, feedback)\n-Wipe stage @var{N} and all the following ones.\n-\n-For example,\n-@samp{make distclean-stage3} wipes stage 3 and all the following ones,\n-so that another @command{make} then rebuilds them from scratch.\n-This can be useful if you're doing changes where\n-``bubbling'' the changes as described above is not sufficient,\n-but a full @command{make restrap} isn't necessary either.\n-\n-@item profiledbootstrap\n-Builds a compiler with profiling feedback information.  In this case,\n-the second and third stages are named @samp{profile} and @samp{feedback},\n-respectively.  For more information, see the installation instructions.\n-\n-@item restrap\n-Restart a bootstrap, so that everything that was not built with\n-the system compiler is rebuilt.\n-\n-@item stage@var{N}-start (@var{N} = 1@dots{}4, profile, feedback)\n-For each package that is bootstrapped, rename directories so that,\n-for example, @file{gcc} points to the stage@var{N} GCC, compiled\n-with the stage@var{N-1} GCC@footnote{Customarily, the system compiler\n-is also termed the @file{stage0} GCC.}.\n-\n-You will invoke this target if you need to test or debug the\n-stage@var{N} GCC@.  If you only need to execute GCC (but you need\n-not run @samp{make} either to rebuild it or to run test suites),\n-you should be able to work directly in the @file{stage@var{N}-gcc}\n-directory.  This makes it easier to debug multiple stages in\n-parallel.\n-\n-@item stage\n-For each package that is bootstrapped, relocate its build directory\n-to indicate its stage.  For example, if the @file{gcc} directory\n-points to the stage2 GCC, after invoking this target it will be\n-renamed to @file{stage2-gcc}.\n-\n-@end table\n-\n-If you wish to use non-default GCC flags when compiling the stage2 and\n-stage3 compilers, set @code{BOOT_CFLAGS} on the command line when doing\n-@samp{make}.\n-\n-Usually, the first stage only builds the languages that the compiler\n-is written in: typically, C and maybe Ada.  If you are debugging a\n-miscompilation of a different stage2 front-end (for example, of the\n-Fortran front-end), you may want to have front-ends for other languages\n-in the first stage as well.  To do so, set @code{STAGE1_LANGUAGES}\n-on the command line when doing @samp{make}.\n-\n-For example, in the aforementioned scenario of debugging a Fortran\n-front-end miscompilation caused by the stage1 compiler, you may need a\n-command like\n-\n-@example\n-make stage2-bubble STAGE1_LANGUAGES=c,fortran\n-@end example\n-\n-Alternatively, you can use per-language targets to build and test\n-languages that are not enabled by default in stage1.  For example,\n-@command{make f951} will build a Fortran compiler even in the stage1\n-build directory.\n-"}, {"sha": "b33d83518a7652e0d4a22d36fadcfb1720dd68e6", "filename": "gcc/doc/match-and-simplify.texi", "status": "removed", "additions": 0, "deletions": 453, "changes": 453, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fmatch-and-simplify.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fmatch-and-simplify.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmatch-and-simplify.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,453 +0,0 @@\n-@c Copyright (C) 2014-2022 Free Software Foundation, Inc.\n-@c Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@node Match and Simplify\n-@chapter Match and Simplify\n-@cindex Match and Simplify\n-\n-The GIMPLE and GENERIC pattern matching project match-and-simplify\n-tries to address several issues.\n-\n-@enumerate\n-@item unify expression simplifications currently spread and duplicated\n-    over separate files like fold-const.cc, gimple-fold.cc and builtins.cc\n-@item allow for a cheap way to implement building and simplifying\n-    non-trivial GIMPLE expressions, avoiding the need to go through\n-    building and simplifying GENERIC via fold_buildN and then\n-    gimplifying via force_gimple_operand\n-@end enumerate\n-\n-To address these the project introduces a simple domain-specific language\n-to write expression simplifications from which code targeting GIMPLE\n-and GENERIC is auto-generated.  The GENERIC variant follows the\n-fold_buildN API while for the GIMPLE variant and to address 2) new\n-APIs are introduced.\n-\n-@menu\n-* GIMPLE API::\n-* The Language::\n-@end menu\n-\n-@node GIMPLE API\n-@section GIMPLE API\n-@cindex GIMPLE API\n-\n-@deftypefn {GIMPLE function} tree gimple_simplify (enum tree_code, tree, tree, gimple_seq *, tree (*)(tree))\n-@deftypefnx {GIMPLE function} tree gimple_simplify (enum tree_code, tree, tree, tree, gimple_seq *, tree (*)(tree))\n-@deftypefnx {GIMPLE function} tree gimple_simplify (enum tree_code, tree, tree, tree, tree, gimple_seq *, tree (*)(tree))\n-@deftypefnx {GIMPLE function} tree gimple_simplify (enum built_in_function, tree, tree, gimple_seq *, tree (*)(tree))\n-@deftypefnx {GIMPLE function} tree gimple_simplify (enum built_in_function, tree, tree, tree, gimple_seq *, tree (*)(tree))\n-@deftypefnx {GIMPLE function} tree gimple_simplify (enum built_in_function, tree, tree, tree, tree, gimple_seq *, tree (*)(tree))\n-The main GIMPLE API entry to the expression simplifications mimicking\n-that of the GENERIC fold_@{unary,binary,ternary@} functions.\n-@end deftypefn\n-\n-thus providing n-ary overloads for operation or function.  The\n-additional arguments are a gimple_seq where built statements are\n-inserted on (if @code{NULL} then simplifications requiring new statements\n-are not performed) and a valueization hook that can be used to\n-tie simplifications to a SSA lattice.\n-\n-In addition to those APIs @code{fold_stmt} is overloaded with\n-a valueization hook:\n-\n-@deftypefn bool fold_stmt (gimple_stmt_iterator *, tree (*)(tree));\n-@end deftypefn\n-\n-\n-On top of these a @code{fold_buildN}-like API for GIMPLE is introduced:\n-\n-@deftypefn {GIMPLE function} tree gimple_build (gimple_seq *, location_t, enum tree_code, tree, tree, tree (*valueize) (tree) = NULL);\n-@deftypefnx {GIMPLE function} tree gimple_build (gimple_seq *, location_t, enum tree_code, tree, tree, tree, tree (*valueize) (tree) = NULL);\n-@deftypefnx {GIMPLE function} tree gimple_build (gimple_seq *, location_t, enum tree_code, tree, tree, tree, tree, tree (*valueize) (tree) = NULL);\n-@deftypefnx {GIMPLE function} tree gimple_build (gimple_seq *, location_t, enum built_in_function, tree, tree, tree (*valueize) (tree) = NULL);\n-@deftypefnx {GIMPLE function} tree gimple_build (gimple_seq *, location_t, enum built_in_function, tree, tree, tree, tree (*valueize) (tree) = NULL);\n-@deftypefnx {GIMPLE function} tree gimple_build (gimple_seq *, location_t, enum built_in_function, tree, tree, tree, tree, tree (*valueize) (tree) = NULL);\n-@deftypefnx {GIMPLE function} tree gimple_convert (gimple_seq *, location_t, tree, tree);\n-@end deftypefn\n-\n-which is supposed to replace @code{force_gimple_operand (fold_buildN (...), ...)}\n-and calls to @code{fold_convert}.  Overloads without the @code{location_t}\n-argument exist.  Built statements are inserted on the provided sequence\n-and simplification is performed using the optional valueization hook.\n-\n-\n-@node The Language\n-@section The Language\n-@cindex The Language\n-\n-The language in which to write expression simplifications resembles\n-other domain-specific languages GCC uses.  Thus it is lispy.  Let's\n-start with an example from the match.pd file:\n-\n-@smallexample\n-(simplify\n-  (bit_and @@0 integer_all_onesp)\n-  @@0)\n-@end smallexample\n-\n-This example contains all required parts of an expression simplification.\n-A simplification is wrapped inside a @code{(simplify ...)} expression.\n-That contains at least two operands - an expression that is matched\n-with the GIMPLE or GENERIC IL and a replacement expression that is\n-returned if the match was successful.\n-\n-Expressions have an operator ID, @code{bit_and} in this case.  Expressions can\n-be lower-case tree codes with @code{_expr} stripped off or builtin\n-function code names in all-caps, like @code{BUILT_IN_SQRT}.\n-\n-@code{@@n} denotes a so-called capture.  It captures the operand and lets\n-you refer to it in other places of the match-and-simplify.  In the\n-above example it is referred to in the replacement expression.  Captures\n-are @code{@@} followed by a number or an identifier.\n-\n-@smallexample\n-(simplify\n-  (bit_xor @@0 @@0)\n-  @{ build_zero_cst (type); @})\n-@end smallexample\n-\n-In this example @code{@@0} is mentioned twice which constrains the matched\n-expression to have two equal operands.  Usually matches are constrained\n-to equal types.  If operands may be constants and conversions are involved,\n-matching by value might be preferred in which case use @code{@@@@0} to\n-denote a by-value match and the specific operand you want to refer to\n-in the result part.  This example also introduces\n-operands written in C code.  These can be used in the expression\n-replacements and are supposed to evaluate to a tree node which has to\n-be a valid GIMPLE operand (so you cannot generate expressions in C code).\n-\n-@smallexample\n-(simplify\n-  (trunc_mod integer_zerop@@0 @@1)\n-  (if (!integer_zerop (@@1))\n-   @@0))\n-@end smallexample\n-\n-Here @code{@@0} captures the first operand of the trunc_mod expression\n-which is also predicated with @code{integer_zerop}.  Expression operands\n-may be either expressions, predicates or captures.  Captures\n-can be unconstrained or capture expressions or predicates.\n-\n-This example introduces an optional operand of simplify,\n-the if-expression.  This condition is evaluated after the\n-expression matched in the IL and is required to evaluate to true\n-to enable the replacement expression in the second operand\n-position.  The expression operand of the @code{if} is a standard C\n-expression which may contain references to captures.  The @code{if}\n-has an optional third operand which may contain the replacement\n-expression that is enabled when the condition evaluates to false.\n-\n-A @code{if} expression can be used to specify a common condition\n-for multiple simplify patterns, avoiding the need\n-to repeat that multiple times:\n-\n-@smallexample\n-(if (!TYPE_SATURATING (type)\n-     && !FLOAT_TYPE_P (type) && !FIXED_POINT_TYPE_P (type))\n-  (simplify\n-    (minus (plus @@0 @@1) @@0)\n-    @@1)\n-  (simplify\n-    (minus (minus @@0 @@1) @@0)\n-    (negate @@1)))\n-@end smallexample\n-\n-Note that @code{if}s in outer position do not have the optional\n-else clause but instead have multiple then clauses.\n-\n-Ifs can be nested.\n-\n-There exists a @code{switch} expression which can be used to\n-chain conditions avoiding nesting @code{if}s too much:\n-\n-@smallexample\n-(simplify\n- (simple_comparison @@0 REAL_CST@@1)\n- (switch\n-  /* a CMP (-0) -> a CMP 0  */\n-  (if (REAL_VALUE_MINUS_ZERO (TREE_REAL_CST (@@1)))\n-   (cmp @@0 @{ build_real (TREE_TYPE (@@1), dconst0); @}))\n-  /* x != NaN is always true, other ops are always false.  */\n-  (if (REAL_VALUE_ISNAN (TREE_REAL_CST (@@1))\n-       && ! HONOR_SNANS (@@1))\n-   @{ constant_boolean_node (cmp == NE_EXPR, type); @})))\n-@end smallexample\n-\n-Is equal to\n-\n-@smallexample\n-(simplify\n- (simple_comparison @@0 REAL_CST@@1)\n- (switch\n-  /* a CMP (-0) -> a CMP 0  */\n-  (if (REAL_VALUE_MINUS_ZERO (TREE_REAL_CST (@@1)))\n-   (cmp @@0 @{ build_real (TREE_TYPE (@@1), dconst0); @})\n-   /* x != NaN is always true, other ops are always false.  */\n-   (if (REAL_VALUE_ISNAN (TREE_REAL_CST (@@1))\n-        && ! HONOR_SNANS (@@1))\n-    @{ constant_boolean_node (cmp == NE_EXPR, type); @}))))\n-@end smallexample\n-\n-which has the second @code{if} in the else operand of the first.\n-The @code{switch} expression takes @code{if} expressions as\n-operands (which may not have else clauses) and as a last operand\n-a replacement expression which should be enabled by default if\n-no other condition evaluated to true.\n-\n-Captures can also be used for capturing results of sub-expressions.\n-\n-@smallexample\n-#if GIMPLE\n-(simplify\n-  (pointer_plus (addr@@2 @@0) INTEGER_CST_P@@1)\n-  (if (is_gimple_min_invariant (@@2)))\n-  @{\n-    poly_int64 off;\n-    tree base = get_addr_base_and_unit_offset (@@0, &off);\n-    off += tree_to_uhwi (@@1);\n-    /* Now with that we should be able to simply write\n-       (addr (mem_ref (addr @@base) (plus @@off @@1)))  */\n-    build1 (ADDR_EXPR, type,\n-            build2 (MEM_REF, TREE_TYPE (TREE_TYPE (@@2)),\n-                    build_fold_addr_expr (base),\n-                    build_int_cst (ptr_type_node, off)));\n-  @})\n-#endif\n-@end smallexample\n-\n-In the above example, @code{@@2} captures the result of the expression\n-@code{(addr @@0)}.  For the outermost expression only its type can be\n-captured, and the keyword @code{type} is reserved for this purpose.  The\n-above example also gives a way to conditionalize patterns to only apply\n-to @code{GIMPLE} or @code{GENERIC} by means of using the pre-defined\n-preprocessor macros @code{GIMPLE} and @code{GENERIC} and using\n-preprocessor directives.\n-\n-@smallexample\n-(simplify\n-  (bit_and:c integral_op_p@@0 (bit_ior:c (bit_not @@0) @@1))\n-  (bit_and @@1 @@0))\n-@end smallexample\n-\n-Here we introduce flags on match expressions.  The flag used\n-above, @code{c}, denotes that the expression should\n-be also matched commutated.  Thus the above match expression\n-is really the following four match expressions:\n-\n-@smallexample\n-  (bit_and integral_op_p@@0 (bit_ior (bit_not @@0) @@1))\n-  (bit_and (bit_ior (bit_not @@0) @@1) integral_op_p@@0)\n-  (bit_and integral_op_p@@0 (bit_ior @@1 (bit_not @@0)))\n-  (bit_and (bit_ior @@1 (bit_not @@0)) integral_op_p@@0)\n-@end smallexample\n-\n-Usual canonicalizations you know from GENERIC expressions are\n-applied before matching, so for example constant operands always\n-come second in commutative expressions.\n-\n-The second supported flag is @code{s} which tells the code\n-generator to fail the pattern if the expression marked with\n-@code{s} does have more than one use and the simplification\n-results in an expression with more than one operator.\n-For example in\n-\n-@smallexample\n-(simplify\n-  (pointer_plus (pointer_plus:s @@0 @@1) @@3)\n-  (pointer_plus @@0 (plus @@1 @@3)))\n-@end smallexample\n-\n-this avoids the association if @code{(pointer_plus @@0 @@1)} is\n-used outside of the matched expression and thus it would stay\n-live and not trivially removed by dead code elimination.\n-Now consider @code{((x + 3) + -3)} with the temporary\n-holding @code{(x + 3)} used elsewhere.  This simplifies down\n-to @code{x} which is desirable and thus flagging with @code{s}\n-does not prevent the transform.  Now consider @code{((x + 3) + 1)}\n-which simplifies to @code{(x + 4)}.  Despite being flagged with\n-@code{s} the simplification will be performed.  The\n-simplification of @code{((x + a) + 1)} to @code{(x + (a + 1))} will\n-not performed in this case though.\n-\n-More features exist to avoid too much repetition.\n-\n-@smallexample\n-(for op (plus pointer_plus minus bit_ior bit_xor)\n-  (simplify\n-    (op @@0 integer_zerop)\n-    @@0))\n-@end smallexample\n-\n-A @code{for} expression can be used to repeat a pattern for each\n-operator specified, substituting @code{op}.  @code{for} can be\n-nested and a @code{for} can have multiple operators to iterate.\n-\n-@smallexample\n-(for opa (plus minus)\n-     opb (minus plus)\n-  (for opc (plus minus)\n-    (simplify...\n-@end smallexample\n-\n-In this example the pattern will be repeated four times with\n-@code{opa, opb, opc} being @code{plus, minus, plus};\n-@code{plus, minus, minus}; @code{minus, plus, plus};\n-@code{minus, plus, minus}.\n-\n-To avoid repeating operator lists in @code{for} you can name\n-them via\n-\n-@smallexample\n-(define_operator_list pmm plus minus mult)\n-@end smallexample\n-\n-and use them in @code{for} operator lists where they get expanded.\n-\n-@smallexample\n-(for opa (pmm trunc_div)\n- (simplify...\n-@end smallexample\n-\n-So this example iterates over @code{plus}, @code{minus}, @code{mult}\n-and @code{trunc_div}.\n-\n-Using operator lists can also remove the need to explicitly write\n-a @code{for}.  All operator list uses that appear in a @code{simplify}\n-or @code{match} pattern in operator positions will implicitly\n-be added to a new @code{for}.  For example\n-\n-@smallexample\n-(define_operator_list SQRT BUILT_IN_SQRTF BUILT_IN_SQRT BUILT_IN_SQRTL)\n-(define_operator_list POW BUILT_IN_POWF BUILT_IN_POW BUILT_IN_POWL)\n-(simplify\n- (SQRT (POW @@0 @@1))\n- (POW (abs @@0) (mult @@1 @{ built_real (TREE_TYPE (@@1), dconsthalf); @})))\n-@end smallexample\n-\n-is the same as\n-\n-@smallexample\n-(for SQRT (BUILT_IN_SQRTF BUILT_IN_SQRT BUILT_IN_SQRTL)\n-     POW (BUILT_IN_POWF BUILT_IN_POW BUILT_IN_POWL)\n- (simplify\n-  (SQRT (POW @@0 @@1))\n-  (POW (abs @@0) (mult @@1 @{ built_real (TREE_TYPE (@@1), dconsthalf); @}))))\n-@end smallexample\n-\n-@code{for}s and operator lists can include the special identifier\n-@code{null} that matches nothing and can never be generated.  This can\n-be used to pad an operator list so that it has a standard form,\n-even if there isn't a suitable operator for every form.\n-\n-Another building block are @code{with} expressions in the\n-result expression which nest the generated code in a new C block\n-followed by its argument:\n-\n-@smallexample\n-(simplify\n- (convert (mult @@0 @@1))\n- (with @{ tree utype = unsigned_type_for (type); @}\n-  (convert (mult (convert:utype @@0) (convert:utype @@1)))))\n-@end smallexample\n-\n-This allows code nested in the @code{with} to refer to the declared\n-variables.  In the above case we use the feature to specify the\n-type of a generated expression with the @code{:type} syntax where\n-@code{type} needs to be an identifier that refers to the desired type.\n-Usually the types of the generated result expressions are\n-determined from the context, but sometimes like in the above case\n-it is required that you specify them explicitly.\n-\n-Another modifier for generated expressions is @code{!} which\n-tells the machinery to only consider the simplification in case\n-the marked expression simplified to a simple operand.  Consider\n-for example\n-\n-@smallexample\n-(simplify\n-  (plus (vec_cond:s @@0 @@1 @@2) @@3)\n-  (vec_cond @@0 (plus! @@1 @@3) (plus! @@2 @@3)))\n-@end smallexample\n-\n-which moves the outer @code{plus} operation to the inner arms\n-of the @code{vec_cond} expression but only if the actual plus\n-operations both simplify.  Note that on @code{GENERIC} a simple\n-operand means that the result satisfies @code{!EXPR_P} which\n-can be limiting if the operation itself simplifies but the\n-remaining operand is an (unrelated) expression.\n-\n-As intermediate conversions are often optional there is a way to\n-avoid the need to repeat patterns both with and without such\n-conversions.  Namely you can mark a conversion as being optional\n-with a @code{?}:\n-\n-@smallexample\n-(simplify\n- (eq (convert@@0 @@1) (convert@? @@2))\n- (eq @@1 (convert @@2)))\n-@end smallexample\n-\n-which will match both @code{(eq (convert @@1) (convert @@2))} and\n-@code{(eq (convert @@1) @@2)}.  The optional converts are supposed\n-to be all either present or not, thus\n-@code{(eq (convert@? @@1) (convert@? @@2))} will result in two\n-patterns only.  If you want to match all four combinations you\n-have access to two additional conditional converts as in\n-@code{(eq (convert1@? @@1) (convert2@? @@2))}.\n-\n-The support for @code{?} marking extends to all unary operations\n-including predicates you declare yourself with @code{match}.\n-\n-Predicates available from the GCC middle-end need to be made\n-available explicitly via @code{define_predicates}:\n-\n-@smallexample\n-(define_predicates\n- integer_onep integer_zerop integer_all_onesp)\n-@end smallexample\n-\n-You can also define predicates using the pattern matching language\n-and the @code{match} form:\n-\n-@smallexample\n-(match negate_expr_p\n- INTEGER_CST\n- (if (TYPE_OVERFLOW_WRAPS (type)\n-      || may_negate_without_overflow_p (t))))\n-(match negate_expr_p\n- (negate @@0))\n-@end smallexample\n-\n-This shows that for @code{match} expressions there is @code{t}\n-available which captures the outermost expression (something\n-not possible in the @code{simplify} context).  As you can see\n-@code{match} has an identifier as first operand which is how\n-you refer to the predicate in patterns.  Multiple @code{match}\n-for the same identifier add additional cases where the predicate\n-matches.\n-\n-Predicates can also match an expression in which case you need\n-to provide a template specifying the identifier and where to\n-get its operands from:\n-\n-@smallexample\n-(match (logical_inverted_value @@0)\n- (eq @@0 integer_zerop))\n-(match (logical_inverted_value @@0)\n- (bit_not truth_valued_p@@0))\n-@end smallexample\n-\n-You can use the above predicate like\n-\n-@smallexample\n-(simplify\n- (bit_and @@0 (logical_inverted_value @@0))\n- @{ build_zero_cst (type); @})\n-@end smallexample\n-\n-Which will match a bitwise and of an operand with its logical\n-inverted value.\n-"}, {"sha": "d0a71ecbb806de3a6564c6ffe973fec5da5c597b", "filename": "gcc/doc/md.texi", "status": "removed", "additions": 0, "deletions": 11679, "changes": 11679, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "147785d4818b73136a4fc6bbd5ad27d299560568", "filename": "gcc/doc/objc.texi", "status": "removed", "additions": 0, "deletions": 1210, "changes": 1210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fobjc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fobjc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fobjc.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,1210 +0,0 @@\n-@c Copyright (C) 1988-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@node Objective-C\n-@comment  node-name,  next,  previous,  up\n-\n-@chapter GNU Objective-C Features\n-\n-This document is meant to describe some of the GNU Objective-C\n-features.  It is not intended to teach you Objective-C.  There are\n-several resources on the Internet that present the language.\n-\n-@menu\n-* GNU Objective-C runtime API::\n-* Executing code before main::\n-* Type encoding::\n-* Garbage Collection::\n-* Constant string objects::\n-* compatibility_alias::\n-* Exceptions::\n-* Synchronization::\n-* Fast enumeration::\n-* Messaging with the GNU Objective-C runtime::\n-@end menu\n-\n-@c =========================================================================\n-@node GNU Objective-C runtime API\n-@section GNU Objective-C Runtime API\n-\n-This section is specific for the GNU Objective-C runtime.  If you are\n-using a different runtime, you can skip it.\n-\n-The GNU Objective-C runtime provides an API that allows you to\n-interact with the Objective-C runtime system, querying the live\n-runtime structures and even manipulating them.  This allows you for\n-example to inspect and navigate classes, methods and protocols; to\n-define new classes or new methods, and even to modify existing classes\n-or protocols.\n-\n-If you are using a ``Foundation'' library such as GNUstep-Base, this\n-library will provide you with a rich set of functionality to do most\n-of the inspection tasks, and you probably will only need direct access\n-to the GNU Objective-C runtime API to define new classes or methods.\n-\n-@menu\n-* Modern GNU Objective-C runtime API::\n-* Traditional GNU Objective-C runtime API::\n-@end menu\n-\n-@c =========================================================================\n-@node Modern GNU Objective-C runtime API\n-@subsection Modern GNU Objective-C Runtime API\n-\n-The GNU Objective-C runtime provides an API which is similar to the\n-one provided by the ``Objective-C 2.0'' Apple/NeXT Objective-C\n-runtime.  The API is documented in the public header files of the GNU\n-Objective-C runtime:\n-\n-@itemize @bullet\n-\n-@item\n-@file{objc/objc.h}: this is the basic Objective-C header file,\n-defining the basic Objective-C types such as @code{id}, @code{Class}\n-and @code{BOOL}.  You have to include this header to do almost\n-anything with Objective-C.\n-\n-@item\n-@file{objc/runtime.h}: this header declares most of the public runtime\n-API functions allowing you to inspect and manipulate the Objective-C\n-runtime data structures.  These functions are fairly standardized\n-across Objective-C runtimes and are almost identical to the Apple/NeXT\n-Objective-C runtime ones.  It does not declare functions in some\n-specialized areas (constructing and forwarding message invocations,\n-threading) which are in the other headers below.  You have to include\n-@file{objc/objc.h} and @file{objc/runtime.h} to use any of the\n-functions, such as @code{class_getName()}, declared in\n-@file{objc/runtime.h}.\n-\n-@item\n-@file{objc/message.h}: this header declares public functions used to\n-construct, deconstruct and forward message invocations.  Because\n-messaging is done in quite a different way on different runtimes,\n-functions in this header are specific to the GNU Objective-C runtime\n-implementation.\n-\n-@item\n-@file{objc/objc-exception.h}: this header declares some public\n-functions related to Objective-C exceptions.  For example functions in\n-this header allow you to throw an Objective-C exception from plain\n-C/C++ code.\n-\n-@item\n-@file{objc/objc-sync.h}: this header declares some public functions\n-related to the Objective-C @code{@@synchronized()} syntax, allowing\n-you to emulate an Objective-C @code{@@synchronized()} block in plain\n-C/C++ code.\n-\n-@item\n-@file{objc/thr.h}: this header declares a public runtime API threading\n-layer that is only provided by the GNU Objective-C runtime.  It\n-declares functions such as @code{objc_mutex_lock()}, which provide a\n-platform-independent set of threading functions.\n-\n-@end itemize\n-\n-The header files contain detailed documentation for each function in\n-the GNU Objective-C runtime API.\n-\n-@c =========================================================================\n-@node Traditional GNU Objective-C runtime API\n-@subsection Traditional GNU Objective-C Runtime API\n-\n-The GNU Objective-C runtime used to provide a different API, which we\n-call the ``traditional'' GNU Objective-C runtime API.  Functions\n-belonging to this API are easy to recognize because they use a\n-different naming convention, such as @code{class_get_super_class()}\n-(traditional API) instead of @code{class_getSuperclass()} (modern\n-API).  Software using this API includes the file\n-@file{objc/objc-api.h} where it is declared.\n-\n-Starting with GCC 4.7.0, the traditional GNU runtime API is no longer\n-available.\n-\n-@c =========================================================================\n-@node Executing code before main\n-@section @code{+load}: Executing Code before @code{main}\n-\n-This section is specific for the GNU Objective-C runtime.  If you are\n-using a different runtime, you can skip it.\n-\n-The GNU Objective-C runtime provides a way that allows you to execute\n-code before the execution of the program enters the @code{main}\n-function.  The code is executed on a per-class and a per-category basis,\n-through a special class method @code{+load}.\n-\n-This facility is very useful if you want to initialize global variables\n-which can be accessed by the program directly, without sending a message\n-to the class first.  The usual way to initialize global variables, in the\n-@code{+initialize} method, might not be useful because\n-@code{+initialize} is only called when the first message is sent to a\n-class object, which in some cases could be too late.\n-\n-Suppose for example you have a @code{FileStream} class that declares\n-@code{Stdin}, @code{Stdout} and @code{Stderr} as global variables, like\n-below:\n-\n-@smallexample\n-\n-FileStream *Stdin = nil;\n-FileStream *Stdout = nil;\n-FileStream *Stderr = nil;\n-\n-@@implementation FileStream\n-\n-+ (void)initialize\n-@{\n-    Stdin = [[FileStream new] initWithFd:0];\n-    Stdout = [[FileStream new] initWithFd:1];\n-    Stderr = [[FileStream new] initWithFd:2];\n-@}\n-\n-/* @r{Other methods here} */\n-@@end\n-\n-@end smallexample\n-\n-In this example, the initialization of @code{Stdin}, @code{Stdout} and\n-@code{Stderr} in @code{+initialize} occurs too late.  The programmer can\n-send a message to one of these objects before the variables are actually\n-initialized, thus sending messages to the @code{nil} object.  The\n-@code{+initialize} method which actually initializes the global\n-variables is not invoked until the first message is sent to the class\n-object.  The solution would require these variables to be initialized\n-just before entering @code{main}.\n-\n-The correct solution of the above problem is to use the @code{+load}\n-method instead of @code{+initialize}:\n-\n-@smallexample\n-\n-@@implementation FileStream\n-\n-+ (void)load\n-@{\n-    Stdin = [[FileStream new] initWithFd:0];\n-    Stdout = [[FileStream new] initWithFd:1];\n-    Stderr = [[FileStream new] initWithFd:2];\n-@}\n-\n-/* @r{Other methods here} */\n-@@end\n-\n-@end smallexample\n-\n-The @code{+load} is a method that is not overridden by categories.  If a\n-class and a category of it both implement @code{+load}, both methods are\n-invoked.  This allows some additional initializations to be performed in\n-a category.\n-\n-This mechanism is not intended to be a replacement for @code{+initialize}.\n-You should be aware of its limitations when you decide to use it\n-instead of @code{+initialize}.\n-\n-@menu\n-* What you can and what you cannot do in +load::\n-@end menu\n-\n-\n-@node What you can and what you cannot do in +load\n-@subsection What You Can and Cannot Do in @code{+load}\n-\n-@code{+load} is to be used only as a last resort.  Because it is\n-executed very early, most of the Objective-C runtime machinery will\n-not be ready when @code{+load} is executed; hence @code{+load} works\n-best for executing C code that is independent on the Objective-C\n-runtime.\n-\n-The @code{+load} implementation in the GNU runtime guarantees you the\n-following things:\n-\n-@itemize @bullet\n-\n-@item\n-you can write whatever C code you like;\n-\n-@item\n-you can allocate and send messages to objects whose class is implemented\n-in the same file;\n-\n-@item\n-the @code{+load} implementation of all super classes of a class are\n-executed before the @code{+load} of that class is executed;\n-\n-@item\n-the @code{+load} implementation of a class is executed before the\n-@code{+load} implementation of any category.\n-\n-@end itemize\n-\n-In particular, the following things, even if they can work in a\n-particular case, are not guaranteed:\n-\n-@itemize @bullet\n-\n-@item\n-allocation of or sending messages to arbitrary objects;\n-\n-@item\n-allocation of or sending messages to objects whose classes have a\n-category implemented in the same file;\n-\n-@item\n-sending messages to Objective-C constant strings (@code{@@\"this is a\n-constant string\"});\n-\n-@end itemize\n-\n-You should make no assumptions about receiving @code{+load} in sibling\n-classes when you write @code{+load} of a class.  The order in which\n-sibling classes receive @code{+load} is not guaranteed.\n-\n-The order in which @code{+load} and @code{+initialize} are called could\n-be problematic if this matters.  If you don't allocate objects inside\n-@code{+load}, it is guaranteed that @code{+load} is called before\n-@code{+initialize}.  If you create an object inside @code{+load} the\n-@code{+initialize} method of object's class is invoked even if\n-@code{+load} was not invoked.  Note if you explicitly call @code{+load}\n-on a class, @code{+initialize} will be called first.  To avoid possible\n-problems try to implement only one of these methods.\n-\n-The @code{+load} method is also invoked when a bundle is dynamically\n-loaded into your running program.  This happens automatically without any\n-intervening operation from you.  When you write bundles and you need to\n-write @code{+load} you can safely create and send messages to objects whose\n-classes already exist in the running program.  The same restrictions as\n-above apply to classes defined in bundle.\n-\n-\n-\n-@node Type encoding\n-@section Type Encoding\n-\n-This is an advanced section.  Type encodings are used extensively by\n-the compiler and by the runtime, but you generally do not need to know\n-about them to use Objective-C.\n-\n-The Objective-C compiler generates type encodings for all the types.\n-These type encodings are used at runtime to find out information about\n-selectors and methods and about objects and classes.\n-\n-The types are encoded in the following way:\n-\n-@c @sp 1\n-\n-@multitable @columnfractions .25 .75\n-@item @code{_Bool}\n-@tab @code{B}\n-@item @code{char}\n-@tab @code{c}\n-@item @code{unsigned char}\n-@tab @code{C}\n-@item @code{short}\n-@tab @code{s}\n-@item @code{unsigned short}\n-@tab @code{S}\n-@item @code{int}\n-@tab @code{i}\n-@item @code{unsigned int}\n-@tab @code{I}\n-@item @code{long}\n-@tab @code{l}\n-@item @code{unsigned long}\n-@tab @code{L}\n-@item @code{long long}\n-@tab @code{q}\n-@item @code{unsigned long long}\n-@tab @code{Q}\n-@item @code{float}\n-@tab @code{f}\n-@item @code{double}\n-@tab @code{d}\n-@item @code{long double}\n-@tab @code{D}\n-@item @code{void}\n-@tab @code{v}\n-@item @code{id}\n-@tab @code{@@}\n-@item @code{Class}\n-@tab @code{#}\n-@item @code{SEL}\n-@tab @code{:}\n-@item @code{char*}\n-@tab @code{*}\n-@item @code{enum}\n-@tab an @code{enum} is encoded exactly as the integer type that the compiler uses for it, which depends on the enumeration\n-values.  Often the compiler users @code{unsigned int}, which is then encoded as @code{I}.\n-@item unknown type\n-@tab @code{?}\n-@item Complex types\n-@tab @code{j} followed by the inner type.  For example @code{_Complex double} is encoded as \"jd\".\n-@item bit-fields\n-@tab @code{b} followed by the starting position of the bit-field, the type of the bit-field and the size of the bit-field (the bit-fields encoding was changed from the NeXT's compiler encoding, see below)\n-@end multitable\n-\n-@c @sp 1\n-\n-The encoding of bit-fields has changed to allow bit-fields to be\n-properly handled by the runtime functions that compute sizes and\n-alignments of types that contain bit-fields.  The previous encoding\n-contained only the size of the bit-field.  Using only this information\n-it is not possible to reliably compute the size occupied by the\n-bit-field.  This is very important in the presence of the Boehm's\n-garbage collector because the objects are allocated using the typed\n-memory facility available in this collector.  The typed memory\n-allocation requires information about where the pointers are located\n-inside the object.\n-\n-The position in the bit-field is the position, counting in bits, of the\n-bit closest to the beginning of the structure.\n-\n-The non-atomic types are encoded as follows:\n-\n-@c @sp 1\n-\n-@multitable @columnfractions .2 .8\n-@item pointers\n-@tab @samp{^} followed by the pointed type.\n-@item arrays\n-@tab @samp{[} followed by the number of elements in the array followed by the type of the elements followed by @samp{]}\n-@item structures\n-@tab @samp{@{} followed by the name of the structure (or @samp{?} if the structure is unnamed), the @samp{=} sign, the type of the members and by @samp{@}}\n-@item unions\n-@tab @samp{(} followed by the name of the structure (or @samp{?} if the union is unnamed), the @samp{=} sign, the type of the members followed by @samp{)}\n-@item vectors\n-@tab @samp{![} followed by the vector_size (the number of bytes composing the vector) followed by a comma, followed by the alignment (in bytes) of the vector, followed by the type of the elements followed by @samp{]}\n-@end multitable\n-\n-Here are some types and their encodings, as they are generated by the\n-compiler on an i386 machine:\n-\n-@sp 1\n-\n-@multitable @columnfractions .60 .40\n-@headitem Objective-C type\n-@tab Compiler encoding\n-@item\n-@smallexample\n-int a[10];\n-@end smallexample\n-@tab @code{[10i]}\n-@item\n-@smallexample\n-struct @{\n-  int i;\n-  float f[3];\n-  int a:3;\n-  int b:2;\n-  char c;\n-@}\n-@end smallexample\n-@tab @code{@{?=i[3f]b128i3b131i2c@}}\n-@item\n-@smallexample\n-int a __attribute__ ((vector_size (16)));\n-@end smallexample\n-@tab @code{![16,16i]} (alignment depends on the machine)\n-@end multitable\n-\n-@sp 1\n-\n-In addition to the types the compiler also encodes the type\n-specifiers.  The table below describes the encoding of the current\n-Objective-C type specifiers:\n-\n-@sp 1\n-\n-@multitable @columnfractions .25 .75\n-@headitem Specifier\n-@tab Encoding\n-@item @code{const}\n-@tab @code{r}\n-@item @code{in}\n-@tab @code{n}\n-@item @code{inout}\n-@tab @code{N}\n-@item @code{out}\n-@tab @code{o}\n-@item @code{bycopy}\n-@tab @code{O}\n-@item @code{byref}\n-@tab @code{R}\n-@item @code{oneway}\n-@tab @code{V}\n-@end multitable\n-\n-@sp 1\n-\n-The type specifiers are encoded just before the type.  Unlike types\n-however, the type specifiers are only encoded when they appear in method\n-argument types.\n-\n-Note how @code{const} interacts with pointers:\n-\n-@sp 1\n-\n-@multitable @columnfractions .25 .75\n-@headitem Objective-C type\n-@tab Compiler encoding\n-@item\n-@smallexample\n-const int\n-@end smallexample\n-@tab @code{ri}\n-@item\n-@smallexample\n-const int*\n-@end smallexample\n-@tab @code{^ri}\n-@item\n-@smallexample\n-int *const\n-@end smallexample\n-@tab @code{r^i}\n-@end multitable\n-\n-@sp 1\n-\n-@code{const int*} is a pointer to a @code{const int}, and so is\n-encoded as @code{^ri}.  @code{int* const}, instead, is a @code{const}\n-pointer to an @code{int}, and so is encoded as @code{r^i}.\n-\n-Finally, there is a complication when encoding @code{const char *}\n-versus @code{char * const}.  Because @code{char *} is encoded as\n-@code{*} and not as @code{^c}, there is no way to express the fact\n-that @code{r} applies to the pointer or to the pointee.\n-\n-Hence, it is assumed as a convention that @code{r*} means @code{const\n-char *} (since it is what is most often meant), and there is no way to\n-encode @code{char *const}.  @code{char *const} would simply be encoded\n-as @code{*}, and the @code{const} is lost.\n-\n-@menu\n-* Legacy type encoding::\n-* @@encode::\n-* Method signatures::\n-@end menu\n-\n-@node Legacy type encoding\n-@subsection Legacy Type Encoding\n-\n-Unfortunately, historically GCC used to have a number of bugs in its\n-encoding code.  The NeXT runtime expects GCC to emit type encodings in\n-this historical format (compatible with GCC-3.3), so when using the\n-NeXT runtime, GCC will introduce on purpose a number of incorrect\n-encodings:\n-\n-@itemize @bullet\n-\n-@item\n-the read-only qualifier of the pointee gets emitted before the '^'.\n-The read-only qualifier of the pointer itself gets ignored, unless it\n-is a typedef.  Also, the 'r' is only emitted for the outermost type.\n-\n-@item\n-32-bit longs are encoded as 'l' or 'L', but not always.  For typedefs,\n-the compiler uses 'i' or 'I' instead if encoding a struct field or a\n-pointer.\n-\n-@item\n-@code{enum}s are always encoded as 'i' (int) even if they are actually\n-unsigned or long.\n-\n-@end itemize\n-\n-In addition to that, the NeXT runtime uses a different encoding for\n-bitfields.  It encodes them as @code{b} followed by the size, without\n-a bit offset or the underlying field type.\n-\n-@node @@encode\n-@subsection @code{@@encode}\n-\n-GNU Objective-C supports the @code{@@encode} syntax that allows you to\n-create a type encoding from a C/Objective-C type.  For example,\n-@code{@@encode(int)} is compiled by the compiler into @code{\"i\"}.\n-\n-@code{@@encode} does not support type qualifiers other than\n-@code{const}.  For example, @code{@@encode(const char*)} is valid and\n-is compiled into @code{\"r*\"}, while @code{@@encode(bycopy char *)} is\n-invalid and will cause a compilation error.\n-\n-@node Method signatures\n-@subsection Method Signatures\n-\n-This section documents the encoding of method types, which is rarely\n-needed to use Objective-C.  You should skip it at a first reading; the\n-runtime provides functions that will work on methods and can walk\n-through the list of parameters and interpret them for you.  These\n-functions are part of the public ``API'' and are the preferred way to\n-interact with method signatures from user code.\n-\n-But if you need to debug a problem with method signatures and need to\n-know how they are implemented (i.e., the ``ABI''), read on.\n-\n-Methods have their ``signature'' encoded and made available to the\n-runtime.  The ``signature'' encodes all the information required to\n-dynamically build invocations of the method at runtime: return type\n-and arguments.\n-\n-The ``signature'' is a null-terminated string, composed of the following:\n-\n-@itemize @bullet\n-\n-@item\n-The return type, including type qualifiers.  For example, a method\n-returning @code{int} would have @code{i} here.\n-\n-@item\n-The total size (in bytes) required to pass all the parameters.  This\n-includes the two hidden parameters (the object @code{self} and the\n-method selector @code{_cmd}).\n-\n-@item\n-Each argument, with the type encoding, followed by the offset (in\n-bytes) of the argument in the list of parameters.\n-\n-@end itemize\n-\n-For example, a method with no arguments and returning @code{int} would\n-have the signature @code{i8@@0:4} if the size of a pointer is 4.  The\n-signature is interpreted as follows: the @code{i} is the return type\n-(an @code{int}), the @code{8} is the total size of the parameters in\n-bytes (two pointers each of size 4), the @code{@@0} is the first\n-parameter (an object at byte offset @code{0}) and @code{:4} is the\n-second parameter (a @code{SEL} at byte offset @code{4}).\n-\n-You can easily find more examples by running the ``strings'' program\n-on an Objective-C object file compiled by GCC.  You'll see a lot of\n-strings that look very much like @code{i8@@0:4}.  They are signatures\n-of Objective-C methods.\n-\n-\n-@node Garbage Collection\n-@section Garbage Collection\n-\n-This section is specific for the GNU Objective-C runtime.  If you are\n-using a different runtime, you can skip it.\n-\n-Support for garbage collection with the GNU runtime has been added by\n-using a powerful conservative garbage collector, known as the\n-Boehm-Demers-Weiser conservative garbage collector.\n-\n-To enable the support for it you have to configure the compiler using\n-an additional argument, @w{@option{--enable-objc-gc}}.  This will\n-build the boehm-gc library, and build an additional runtime library\n-which has several enhancements to support the garbage collector.  The\n-new library has a new name, @file{libobjc_gc.a} to not conflict with\n-the non-garbage-collected library.\n-\n-When the garbage collector is used, the objects are allocated using the\n-so-called typed memory allocation mechanism available in the\n-Boehm-Demers-Weiser collector.  This mode requires precise information on\n-where pointers are located inside objects.  This information is computed\n-once per class, immediately after the class has been initialized.\n-\n-There is a new runtime function @code{class_ivar_set_gcinvisible()}\n-which can be used to declare a so-called @dfn{weak pointer}\n-reference.  Such a pointer is basically hidden for the garbage collector;\n-this can be useful in certain situations, especially when you want to\n-keep track of the allocated objects, yet allow them to be\n-collected.  This kind of pointers can only be members of objects, you\n-cannot declare a global pointer as a weak reference.  Every type which is\n-a pointer type can be declared a weak pointer, including @code{id},\n-@code{Class} and @code{SEL}.\n-\n-Here is an example of how to use this feature.  Suppose you want to\n-implement a class whose instances hold a weak pointer reference; the\n-following class does this:\n-\n-@smallexample\n-\n-@@interface WeakPointer : Object\n-@{\n-    const void* weakPointer;\n-@}\n-\n-- initWithPointer:(const void*)p;\n-- (const void*)weakPointer;\n-@@end\n-\n-\n-@@implementation WeakPointer\n-\n-+ (void)initialize\n-@{\n-  if (self == objc_lookUpClass (\"WeakPointer\"))\n-    class_ivar_set_gcinvisible (self, \"weakPointer\", YES);\n-@}\n-\n-- initWithPointer:(const void*)p\n-@{\n-  weakPointer = p;\n-  return self;\n-@}\n-\n-- (const void*)weakPointer\n-@{\n-  return weakPointer;\n-@}\n-\n-@@end\n-\n-@end smallexample\n-\n-Weak pointers are supported through a new type character specifier\n-represented by the @samp{!} character.  The\n-@code{class_ivar_set_gcinvisible()} function adds or removes this\n-specifier to the string type description of the instance variable named\n-as argument.\n-\n-@c =========================================================================\n-@node Constant string objects\n-@section Constant String Objects\n-\n-GNU Objective-C provides constant string objects that are generated\n-directly by the compiler.  You declare a constant string object by\n-prefixing a C constant string with the character @samp{@@}:\n-\n-@smallexample\n-  id myString = @@\"this is a constant string object\";\n-@end smallexample\n-\n-The constant string objects are by default instances of the\n-@code{NXConstantString} class which is provided by the GNU Objective-C\n-runtime.  To get the definition of this class you must include the\n-@file{objc/NXConstStr.h} header file.\n-\n-User defined libraries may want to implement their own constant string\n-class.  To be able to support them, the GNU Objective-C compiler provides\n-a new command line options @option{-fconstant-string-class=@var{class-name}}.\n-The provided class should adhere to a strict structure, the same\n-as @code{NXConstantString}'s structure:\n-\n-@smallexample\n-\n-@@interface MyConstantStringClass\n-@{\n-  Class isa;\n-  char *c_string;\n-  unsigned int len;\n-@}\n-@@end\n-\n-@end smallexample\n-\n-@code{NXConstantString} inherits from @code{Object}; user class\n-libraries may choose to inherit the customized constant string class\n-from a different class than @code{Object}.  There is no requirement in\n-the methods the constant string class has to implement, but the final\n-ivar layout of the class must be the compatible with the given\n-structure.\n-\n-When the compiler creates the statically allocated constant string\n-object, the @code{c_string} field will be filled by the compiler with\n-the string; the @code{length} field will be filled by the compiler with\n-the string length; the @code{isa} pointer will be filled with\n-@code{NULL} by the compiler, and it will later be fixed up automatically\n-at runtime by the GNU Objective-C runtime library to point to the class\n-which was set by the @option{-fconstant-string-class} option when the\n-object file is loaded (if you wonder how it works behind the scenes, the\n-name of the class to use, and the list of static objects to fixup, are\n-stored by the compiler in the object file in a place where the GNU\n-runtime library will find them at runtime).\n-\n-As a result, when a file is compiled with the\n-@option{-fconstant-string-class} option, all the constant string objects\n-will be instances of the class specified as argument to this option.  It\n-is possible to have multiple compilation units referring to different\n-constant string classes, neither the compiler nor the linker impose any\n-restrictions in doing this.\n-\n-@c =========================================================================\n-@node compatibility_alias\n-@section @code{compatibility_alias}\n-\n-The keyword @code{@@compatibility_alias} allows you to define a class name\n-as equivalent to another class name.  For example:\n-\n-@smallexample\n-@@compatibility_alias WOApplication GSWApplication;\n-@end smallexample\n-\n-tells the compiler that each time it encounters @code{WOApplication} as\n-a class name, it should replace it with @code{GSWApplication} (that is,\n-@code{WOApplication} is just an alias for @code{GSWApplication}).\n-\n-There are some constraints on how this can be used---\n-\n-@itemize @bullet\n-\n-@item @code{WOApplication} (the alias) must not be an existing class;\n-\n-@item @code{GSWApplication} (the real class) must be an existing class.\n-\n-@end itemize\n-\n-@c =========================================================================\n-@node Exceptions\n-@section Exceptions\n-\n-GNU Objective-C provides exception support built into the language, as\n-in the following example:\n-\n-@smallexample\n-  @@try @{\n-    @dots{}\n-       @@throw expr;\n-    @dots{}\n-  @}\n-  @@catch (AnObjCClass *exc) @{\n-    @dots{}\n-      @@throw expr;\n-    @dots{}\n-      @@throw;\n-    @dots{}\n-  @}\n-  @@catch (AnotherClass *exc) @{\n-    @dots{}\n-  @}\n-  @@catch (id allOthers) @{\n-    @dots{}\n-  @}\n-  @@finally @{\n-    @dots{}\n-      @@throw expr;\n-    @dots{}\n-  @}\n-@end smallexample\n-\n-The @code{@@throw} statement may appear anywhere in an Objective-C or\n-Objective-C++ program; when used inside of a @code{@@catch} block, the\n-@code{@@throw} may appear without an argument (as shown above), in\n-which case the object caught by the @code{@@catch} will be rethrown.\n-\n-Note that only (pointers to) Objective-C objects may be thrown and\n-caught using this scheme.  When an object is thrown, it will be caught\n-by the nearest @code{@@catch} clause capable of handling objects of\n-that type, analogously to how @code{catch} blocks work in C++ and\n-Java.  A @code{@@catch(id @dots{})} clause (as shown above) may also\n-be provided to catch any and all Objective-C exceptions not caught by\n-previous @code{@@catch} clauses (if any).\n-\n-The @code{@@finally} clause, if present, will be executed upon exit\n-from the immediately preceding @code{@@try @dots{} @@catch} section.\n-This will happen regardless of whether any exceptions are thrown,\n-caught or rethrown inside the @code{@@try @dots{} @@catch} section,\n-analogously to the behavior of the @code{finally} clause in Java.\n-\n-There are several caveats to using the new exception mechanism:\n-\n-@itemize @bullet\n-@item\n-The @option{-fobjc-exceptions} command line option must be used when\n-compiling Objective-C files that use exceptions.\n-\n-@item\n-With the GNU runtime, exceptions are always implemented as ``native''\n-exceptions and it is recommended that the @option{-fexceptions} and\n-@option{-shared-libgcc} options are used when linking.\n-\n-@item\n-With the NeXT runtime, although currently designed to be binary\n-compatible with @code{NS_HANDLER}-style idioms provided by the\n-@code{NSException} class, the new exceptions can only be used on Mac\n-OS X 10.3 (Panther) and later systems, due to additional functionality\n-needed in the NeXT Objective-C runtime.\n-\n-@item\n-As mentioned above, the new exceptions do not support handling\n-types other than Objective-C objects.   Furthermore, when used from\n-Objective-C++, the Objective-C exception model does not interoperate with C++\n-exceptions at this time.  This means you cannot @code{@@throw} an exception\n-from Objective-C and @code{catch} it in C++, or vice versa\n-(i.e., @code{throw @dots{} @@catch}).\n-@end itemize\n-\n-@c =========================================================================\n-@node Synchronization\n-@section Synchronization\n-\n-GNU Objective-C provides support for synchronized blocks:\n-\n-@smallexample\n-  @@synchronized (ObjCClass *guard) @{\n-    @dots{}\n-  @}\n-@end smallexample\n-\n-Upon entering the @code{@@synchronized} block, a thread of execution\n-shall first check whether a lock has been placed on the corresponding\n-@code{guard} object by another thread.  If it has, the current thread\n-shall wait until the other thread relinquishes its lock.  Once\n-@code{guard} becomes available, the current thread will place its own\n-lock on it, execute the code contained in the @code{@@synchronized}\n-block, and finally relinquish the lock (thereby making @code{guard}\n-available to other threads).\n-\n-Unlike Java, Objective-C does not allow for entire methods to be\n-marked @code{@@synchronized}.  Note that throwing exceptions out of\n-@code{@@synchronized} blocks is allowed, and will cause the guarding\n-object to be unlocked properly.\n-\n-Because of the interactions between synchronization and exception\n-handling, you can only use @code{@@synchronized} when compiling with\n-exceptions enabled, that is with the command line option\n-@option{-fobjc-exceptions}.\n-\n-\n-@c =========================================================================\n-@node Fast enumeration\n-@section Fast Enumeration\n-\n-@menu\n-* Using fast enumeration::\n-* c99-like fast enumeration syntax::\n-* Fast enumeration details::\n-* Fast enumeration protocol::\n-@end menu\n-\n-@c ================================\n-@node Using fast enumeration\n-@subsection Using Fast Enumeration\n-\n-GNU Objective-C provides support for the fast enumeration syntax:\n-\n-@smallexample\n-  id array = @dots{};\n-  id object;\n-\n-  for (object in array)\n-  @{\n-    /* Do something with 'object' */\n-  @}\n-@end smallexample\n-\n-@code{array} needs to be an Objective-C object (usually a collection\n-object, for example an array, a dictionary or a set) which implements\n-the ``Fast Enumeration Protocol'' (see below).  If you are using a\n-Foundation library such as GNUstep Base or Apple Cocoa Foundation, all\n-collection objects in the library implement this protocol and can be\n-used in this way.\n-\n-The code above would iterate over all objects in @code{array}.  For\n-each of them, it assigns it to @code{object}, then executes the\n-@code{Do something with 'object'} statements.\n-\n-Here is a fully worked-out example using a Foundation library (which\n-provides the implementation of @code{NSArray}, @code{NSString} and\n-@code{NSLog}):\n-\n-@smallexample\n-  NSArray *array = [NSArray arrayWithObjects: @@\"1\", @@\"2\", @@\"3\", nil];\n-  NSString *object;\n-\n-  for (object in array)\n-    NSLog (@@\"Iterating over %@@\", object);\n-@end smallexample\n-\n-\n-@c ================================\n-@node c99-like fast enumeration syntax\n-@subsection C99-Like Fast Enumeration Syntax\n-\n-A c99-like declaration syntax is also allowed:\n-\n-@smallexample\n-  id array = @dots{};\n-\n-  for (id object in array)\n-  @{\n-    /* Do something with 'object'  */\n-  @}\n-@end smallexample\n-\n-this is completely equivalent to:\n-\n-@smallexample\n-  id array = @dots{};\n-\n-  @{\n-    id object;\n-    for (object in array)\n-    @{\n-      /* Do something with 'object'  */\n-    @}\n-  @}\n-@end smallexample\n-\n-but can save some typing.\n-\n-Note that the option @option{-std=c99} is not required to allow this\n-syntax in Objective-C.\n-\n-@c ================================\n-@node Fast enumeration details\n-@subsection Fast Enumeration Details\n-\n-Here is a more technical description with the gory details.  Consider the code\n-\n-@smallexample\n-  for (@var{object expression} in @var{collection expression})\n-  @{\n-    @var{statements}\n-  @}\n-@end smallexample\n-\n-here is what happens when you run it:\n-\n-@itemize @bullet\n-@item\n-@code{@var{collection expression}} is evaluated exactly once and the\n-result is used as the collection object to iterate over.  This means\n-it is safe to write code such as @code{for (object in [NSDictionary\n-keyEnumerator]) @dots{}}.\n-\n-@item\n-the iteration is implemented by the compiler by repeatedly getting\n-batches of objects from the collection object using the fast\n-enumeration protocol (see below), then iterating over all objects in\n-the batch.  This is faster than a normal enumeration where objects are\n-retrieved one by one (hence the name ``fast enumeration'').\n-\n-@item\n-if there are no objects in the collection, then\n-@code{@var{object expression}} is set to @code{nil} and the loop\n-immediately terminates.\n-\n-@item\n-if there are objects in the collection, then for each object in the\n-collection (in the order they are returned) @code{@var{object expression}}\n-is set to the object, then @code{@var{statements}} are executed.\n-\n-@item\n-@code{@var{statements}} can contain @code{break} and @code{continue}\n-commands, which will abort the iteration or skip to the next loop\n-iteration as expected.\n-\n-@item\n-when the iteration ends because there are no more objects to iterate\n-over, @code{@var{object expression}} is set to @code{nil}.  This allows\n-you to determine whether the iteration finished because a @code{break}\n-command was used (in which case @code{@var{object expression}} will remain\n-set to the last object that was iterated over) or because it iterated\n-over all the objects (in which case @code{@var{object expression}} will be\n-set to @code{nil}).\n-\n-@item\n-@code{@var{statements}} must not make any changes to the collection\n-object; if they do, it is a hard error and the fast enumeration\n-terminates by invoking @code{objc_enumerationMutation}, a runtime\n-function that normally aborts the program but which can be customized\n-by Foundation libraries via @code{objc_set_mutation_handler} to do\n-something different, such as raising an exception.\n-\n-@end itemize\n-\n-@c ================================\n-@node Fast enumeration protocol\n-@subsection Fast Enumeration Protocol\n-\n-If you want your own collection object to be usable with fast\n-enumeration, you need to have it implement the method\n-\n-@smallexample\n-- (unsigned long) countByEnumeratingWithState: (NSFastEnumerationState *)state\n-                                      objects: (id *)objects\n-                                        count: (unsigned long)len;\n-@end smallexample\n-\n-where @code{NSFastEnumerationState} must be defined in your code as follows:\n-\n-@smallexample\n-typedef struct\n-@{\n-  unsigned long state;\n-  id            *itemsPtr;\n-  unsigned long *mutationsPtr;\n-  unsigned long extra[5];\n-@} NSFastEnumerationState;\n-@end smallexample\n-\n-If no @code{NSFastEnumerationState} is defined in your code, the\n-compiler will automatically replace @code{NSFastEnumerationState *}\n-with @code{struct __objcFastEnumerationState *}, where that type is\n-silently defined by the compiler in an identical way.  This can be\n-confusing and we recommend that you define\n-@code{NSFastEnumerationState} (as shown above) instead.\n-\n-The method is called repeatedly during a fast enumeration to retrieve\n-batches of objects.  Each invocation of the method should retrieve the\n-next batch of objects.\n-\n-The return value of the method is the number of objects in the current\n-batch; this should not exceed @code{len}, which is the maximum size of\n-a batch as requested by the caller.  The batch itself is returned in\n-the @code{itemsPtr} field of the @code{NSFastEnumerationState} struct.\n-\n-To help with returning the objects, the @code{objects} array is a C\n-array preallocated by the caller (on the stack) of size @code{len}.\n-In many cases you can put the objects you want to return in that\n-@code{objects} array, then do @code{itemsPtr = objects}.  But you\n-don't have to; if your collection already has the objects to return in\n-some form of C array, it could return them from there instead.\n-\n-The @code{state} and @code{extra} fields of the\n-@code{NSFastEnumerationState} structure allows your collection object\n-to keep track of the state of the enumeration.  In a simple array\n-implementation, @code{state} may keep track of the index of the last\n-object that was returned, and @code{extra} may be unused.\n-\n-The @code{mutationsPtr} field of the @code{NSFastEnumerationState} is\n-used to keep track of mutations.  It should point to a number; before\n-working on each object, the fast enumeration loop will check that this\n-number has not changed.  If it has, a mutation has happened and the\n-fast enumeration will abort.  So, @code{mutationsPtr} could be set to\n-point to some sort of version number of your collection, which is\n-increased by one every time there is a change (for example when an\n-object is added or removed).  Or, if you are content with less strict\n-mutation checks, it could point to the number of objects in your\n-collection or some other value that can be checked to perform an\n-approximate check that the collection has not been mutated.\n-\n-Finally, note how we declared the @code{len} argument and the return\n-value to be of type @code{unsigned long}.  They could also be declared\n-to be of type @code{unsigned int} and everything would still work.\n-\n-@c =========================================================================\n-@node Messaging with the GNU Objective-C runtime\n-@section Messaging with the GNU Objective-C Runtime\n-\n-This section is specific for the GNU Objective-C runtime.  If you are\n-using a different runtime, you can skip it.\n-\n-The implementation of messaging in the GNU Objective-C runtime is\n-designed to be portable, and so is based on standard C.\n-\n-Sending a message in the GNU Objective-C runtime is composed of two\n-separate steps.  First, there is a call to the lookup function,\n-@code{objc_msg_lookup ()} (or, in the case of messages to super,\n-@code{objc_msg_lookup_super ()}).  This runtime function takes as\n-argument the receiver and the selector of the method to be called; it\n-returns the @code{IMP}, that is a pointer to the function implementing\n-the method.  The second step of method invocation consists of casting\n-this pointer function to the appropriate function pointer type, and\n-calling the function pointed to it with the right arguments.\n-\n-For example, when the compiler encounters a method invocation such as\n-@code{[object init]}, it compiles it into a call to\n-@code{objc_msg_lookup (object, @@selector(init))} followed by a cast\n-of the returned value to the appropriate function pointer type, and\n-then it calls it.\n-\n-@menu\n-* Dynamically registering methods::\n-* Forwarding hook::\n-@end menu\n-\n-@c =========================================================================\n-@node Dynamically registering methods\n-@subsection Dynamically Registering Methods\n-\n-If @code{objc_msg_lookup()} does not find a suitable method\n-implementation, because the receiver does not implement the required\n-method, it tries to see if the class can dynamically register the\n-method.\n-\n-To do so, the runtime checks if the class of the receiver implements\n-the method\n-\n-@smallexample\n-+ (BOOL) resolveInstanceMethod: (SEL)selector;\n-@end smallexample\n-\n-in the case of an instance method, or\n-\n-@smallexample\n-+ (BOOL) resolveClassMethod: (SEL)selector;\n-@end smallexample\n-\n-in the case of a class method.  If the class implements it, the\n-runtime invokes it, passing as argument the selector of the original\n-method, and if it returns @code{YES}, the runtime tries the lookup\n-again, which could now succeed if a matching method was added\n-dynamically by @code{+resolveInstanceMethod:} or\n-@code{+resolveClassMethod:}.\n-\n-This allows classes to dynamically register methods (by adding them to\n-the class using @code{class_addMethod}) when they are first called.\n-To do so, a class should implement @code{+resolveInstanceMethod:} (or,\n-depending on the case, @code{+resolveClassMethod:}) and have it\n-recognize the selectors of methods that can be registered dynamically\n-at runtime, register them, and return @code{YES}.  It should return\n-@code{NO} for methods that it does not dynamically registered at\n-runtime.\n-\n-If @code{+resolveInstanceMethod:} (or @code{+resolveClassMethod:}) is\n-not implemented or returns @code{NO}, the runtime then tries the\n-forwarding hook.\n-\n-Support for @code{+resolveInstanceMethod:} and\n-@code{resolveClassMethod:} was added to the GNU Objective-C runtime in\n-GCC version 4.6.\n-\n-@c =========================================================================\n-@node Forwarding hook\n-@subsection Forwarding Hook\n-\n-The GNU Objective-C runtime provides a hook, called\n-@code{__objc_msg_forward2}, which is called by\n-@code{objc_msg_lookup()} when it cannot find a method implementation in\n-the runtime tables and after calling @code{+resolveInstanceMethod:}\n-and @code{+resolveClassMethod:} has been attempted and did not succeed\n-in dynamically registering the method.\n-\n-To configure the hook, you set the global variable\n-@code{__objc_msg_forward2} to a function with the same argument and\n-return types of @code{objc_msg_lookup()}.  When\n-@code{objc_msg_lookup()} cannot find a method implementation, it\n-invokes the hook function you provided to get a method implementation\n-to return.  So, in practice @code{__objc_msg_forward2} allows you to\n-extend @code{objc_msg_lookup()} by adding some custom code that is\n-called to do a further lookup when no standard method implementation\n-can be found using the normal lookup.\n-\n-This hook is generally reserved for ``Foundation'' libraries such as\n-GNUstep Base, which use it to implement their high-level method\n-forwarding API, typically based around the @code{forwardInvocation:}\n-method.  So, unless you are implementing your own ``Foundation''\n-library, you should not set this hook.\n-\n-In a typical forwarding implementation, the @code{__objc_msg_forward2}\n-hook function determines the argument and return type of the method\n-that is being looked up, and then creates a function that takes these\n-arguments and has that return type, and returns it to the caller.\n-Creating this function is non-trivial and is typically performed using\n-a dedicated library such as @code{libffi}.\n-\n-The forwarding method implementation thus created is returned by\n-@code{objc_msg_lookup()} and is executed as if it was a normal method\n-implementation.  When the forwarding method implementation is called,\n-it is usually expected to pack all arguments into some sort of object\n-(typically, an @code{NSInvocation} in a ``Foundation'' library), and\n-hand it over to the programmer (@code{forwardInvocation:}) who is then\n-allowed to manipulate the method invocation using a high-level API\n-provided by the ``Foundation'' library.  For example, the programmer\n-may want to examine the method invocation arguments and name and\n-potentially change them before forwarding the method invocation to one\n-or more local objects (@code{performInvocation:}) or even to remote\n-objects (by using Distributed Objects or some other mechanism).  When\n-all this completes, the return value is passed back and must be\n-returned correctly to the original caller.\n-\n-Note that the GNU Objective-C runtime currently provides no support\n-for method forwarding or method invocations other than the\n-@code{__objc_msg_forward2} hook.\n-\n-If the forwarding hook does not exist or returns @code{NULL}, the\n-runtime currently attempts forwarding using an older, deprecated API,\n-and if that fails, it aborts the program.  In future versions of the\n-GNU Objective-C runtime, the runtime will immediately abort."}, {"sha": "c02446303412941eecf4dc4444943e26080a4de0", "filename": "gcc/doc/optinfo.texi", "status": "removed", "additions": 0, "deletions": 246, "changes": 246, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Foptinfo.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Foptinfo.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptinfo.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,246 +0,0 @@\n-@c Copyright (C) 2013-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@cindex optimization dumps\n-\n-This section is describes dump infrastructure which is common to both\n-pass dumps as well as optimization dumps. The goal for this\n-infrastructure is to provide both gcc developers and users detailed\n-information about various compiler transformations and optimizations.\n-\n-@menu\n-* Dump setup::                         Setup of optimization dumps.\n-* Optimization groups::                Groups made up of optimization passes.\n-* Dump files and streams::             Dump output file names and streams.\n-* Dump output verbosity::              How much information to dump.\n-* Dump types::                         Various types of dump functions.\n-* Dump examples::                      Sample usage.\n-@end menu\n-\n-@node Dump setup\n-@subsection Dump setup\n-@cindex dump setup\n-\n-A dump_manager class is defined in @file{dumpfile.h}. Various passes\n-register dumping pass-specific information via @code{dump_register} in\n-@file{passes.cc}. During the registration, an optimization pass can\n-select its optimization group (@pxref{Optimization groups}). After\n-that optimization information corresponding to the entire group\n-(presumably from multiple passes) can be output via command-line\n-switches. Note that if a pass does not fit into any of the pre-defined\n-groups, it can select @code{OPTGROUP_NONE}.\n-\n-Note that in general, a pass need not know its dump output file name,\n-whether certain flags are enabled, etc. However, for legacy reasons,\n-passes could also call @code{dump_begin} which returns a stream in\n-case the particular pass has optimization dumps enabled. A pass could\n-call @code{dump_end} when the dump has ended. These methods should go\n-away once all the passes are converted to use the new dump\n-infrastructure.\n-\n-The recommended way to setup the dump output is via @code{dump_start}\n-and @code{dump_end}.\n-\n-@node Optimization groups\n-@subsection Optimization groups\n-@cindex optimization groups\n-The optimization passes are grouped into several categories. Currently\n-defined categories in @file{dumpfile.h} are\n-\n-@ftable @code\n-\n-@item OPTGROUP_IPA\n-IPA optimization passes. Enabled by @option{-ipa}\n-\n-@item OPTGROUP_LOOP\n-Loop optimization passes. Enabled by @option{-loop}.\n-\n-@item OPTGROUP_INLINE\n-Inlining passes. Enabled by @option{-inline}.\n-\n-@item OPTGROUP_OMP\n-OMP (Offloading and Multi Processing) passes. Enabled by\n-@option{-omp}.\n-\n-@item OPTGROUP_VEC\n-Vectorization passes. Enabled by @option{-vec}.\n-\n-@item OPTGROUP_OTHER\n-All other optimization passes which do not fall into one of the above.\n-\n-@item OPTGROUP_ALL\n-All optimization passes. Enabled by @option{-optall}.\n-\n-@end ftable\n-\n-By using groups a user could selectively enable optimization\n-information only for a group of passes. By default, the optimization\n-information for all the passes is dumped.\n-\n-@node Dump files and streams\n-@subsection Dump files and streams\n-@cindex optimization info file names\n-\n-There are two separate output streams available for outputting\n-optimization information from passes. Note that both these streams\n-accept @code{stderr} and @code{stdout} as valid streams and thus it is\n-possible to dump output to standard output or error. This is specially\n-handy for outputting all available information in a single file by\n-redirecting @code{stderr}.\n-\n-@table @code\n-@item @code{pstream}\n-This stream is for pass-specific dump output. For example,\n-@option{-fdump-tree-vect=foo.v} dumps tree vectorization pass output\n-into the given file name @file{foo.v}. If the file name is not provided,\n-the default file name is based on the source file and pass number. Note\n-that one could also use special file names @code{stdout} and\n-@code{stderr} for dumping to standard output and standard error\n-respectively.\n-\n-@item @code{alt_stream}\n-This steam is used for printing optimization specific output in\n-response to the @option{-fopt-info}. Again a file name can be given. If\n-the file name is not given, it defaults to @code{stderr}.\n-@end table\n-\n-@node Dump output verbosity\n-@subsection Dump output verbosity\n-@cindex dump verbosity\n-\n-The dump verbosity has the following options\n-\n-@table @samp\n-@item optimized\n-Print information when an optimization is successfully applied. It is\n-up to a pass to decide which information is relevant. For example, the\n-vectorizer passes print the source location of loops which got\n-successfully vectorized.\n-\n-@item missed\n-Print information about missed optimizations. Individual passes\n-control which information to include in the output. For example,\n-\n-@smallexample\n-gcc -O2 -ftree-vectorize -fopt-info-vec-missed\n-@end smallexample\n-\n-will print information about missed optimization opportunities from\n-vectorization passes on stderr.\n-\n-@item note\n-Print verbose information about optimizations, such as certain\n-transformations, more detailed messages about decisions etc.\n-\n-@item all\n-Print detailed optimization information. This includes\n-@var{optimized}, @var{missed}, and @var{note}.\n-@end table\n-\n-@node Dump types\n-@subsection Dump types\n-@cindex dump types\n-\n-@ftable @code\n-\n-@item dump_printf\n-\n-This is a generic method for doing formatted output. It takes an\n-additional argument @code{dump_kind} which signifies the type of\n-dump. This method outputs information only when the dumps are enabled\n-for this particular @code{dump_kind}. Note that the caller doesn't\n-need to know if the particular dump is enabled or not, or even the\n-file name. The caller only needs to decide which dump output\n-information is relevant, and under what conditions. This determines\n-the associated flags.\n-\n-Consider the following example from @file{loop-unroll.cc} where an\n-informative message about a loop (along with its location) is printed\n-when any of the following flags is enabled\n-@itemize @minus\n-\n-@item optimization messages\n-@item RTL dumps\n-@item detailed dumps\n-\n-@end itemize\n-\n-@example\n-int report_flags = MSG_OPTIMIZED_LOCATIONS | TDF_RTL | TDF_DETAILS;\n-dump_printf_loc (report_flags, insn,\n-                 \"loop turned into non-loop; it never loops.\\n\");\n-@end example\n-\n-@item dump_basic_block\n-Output basic block.\n-@item dump_generic_expr\n-Output generic expression.\n-@item dump_gimple_stmt\n-Output gimple statement.\n-\n-Note that the above methods also have variants prefixed with\n-@code{_loc}, such as @code{dump_printf_loc}, which are similar except\n-they also output the source location information.  The @code{_loc} variants\n-take a @code{const dump_location_t &}.  This class can be constructed from\n-a @code{gimple *} or from a @code{rtx_insn *}, and so callers can pass\n-a @code{gimple *} or a @code{rtx_insn *} as the @code{_loc} argument.\n-The @code{dump_location_t} constructor will extract the source location\n-from the statement or instruction, along with the profile count, and\n-the location in GCC's own source code (or the plugin) from which the dump\n-call was emitted.  Only the source location is currently used.\n-There is also a @code{dump_user_location_t} class, capturing the\n-source location and profile count, but not the dump emission location,\n-so that locations in the user's code can be passed around.  This\n-can also be constructed from a @code{gimple *} and from a @code{rtx_insn *},\n-and it too can be passed as the @code{_loc} argument.\n-\n-@end ftable\n-\n-@node Dump examples\n-@subsection Dump examples\n-@cindex dump examples\n-\n-@smallexample\n-gcc -O3 -fopt-info-missed=missed.all\n-@end smallexample\n-\n-outputs missed optimization report from all the passes into\n-@file{missed.all}.\n-\n-As another example,\n-@smallexample\n-gcc -O3 -fopt-info-inline-optimized-missed=inline.txt\n-@end smallexample\n-\n-will output information about missed optimizations as well as\n-optimized locations from all the inlining passes into\n-@file{inline.txt}.\n-\n-If the @var{filename} is provided, then the dumps from all the\n-applicable optimizations are concatenated into the @file{filename}.\n-Otherwise the dump is output onto @file{stderr}. If @var{options} is\n-omitted, it defaults to @option{optimized-optall}, which means dump\n-all information about successful optimizations from all the passes.\n-In the following example, the optimization information is output on\n-to @file{stderr}.\n-\n-@smallexample\n-gcc -O3 -fopt-info\n-@end smallexample\n-\n-Note that @option{-fopt-info-vec-missed} behaves the same as\n-@option{-fopt-info-missed-vec}.  The order of the optimization group\n-names and message types listed after @option{-fopt-info} does not matter.\n-\n-As another example, consider\n-\n-@smallexample\n-gcc -fopt-info-vec-missed=vec.miss -fopt-info-loop-optimized=loop.opt\n-@end smallexample\n-\n-Here the two output file names @file{vec.miss} and @file{loop.opt} are\n-in conflict since only one output file is allowed. In this case, only\n-the first option takes effect and the subsequent options are\n-ignored. Thus only the @file{vec.miss} is produced which containts\n-dumps from the vectorizer about missed opportunities."}, {"sha": "17ba923890e6a992f9f6840cedc2f8859b39d74b", "filename": "gcc/doc/options.texi", "status": "removed", "additions": 0, "deletions": 590, "changes": 590, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,590 +0,0 @@\n-@c Copyright (C) 2003-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@node Options\n-@chapter Option specification files\n-@cindex option specification files\n-@cindex @samp{optc-gen.awk}\n-\n-Most GCC command-line options are described by special option\n-definition files, the names of which conventionally end in\n-@code{.opt}.  This chapter describes the format of these files.\n-\n-@menu\n-* Option file format::   The general layout of the files\n-* Option properties::    Supported option properties\n-@end menu\n-\n-@node Option file format\n-@section Option file format\n-\n-Option files are a simple list of records in which each field occupies\n-its own line and in which the records themselves are separated by\n-blank lines.  Comments may appear on their own line anywhere within\n-the file and are preceded by semicolons.  Whitespace is allowed before\n-the semicolon.\n-\n-The files can contain the following types of record:\n-\n-@itemize @bullet\n-@item\n-A language definition record.  These records have two fields: the\n-string @samp{Language} and the name of the language.  Once a language\n-has been declared in this way, it can be used as an option property.\n-@xref{Option properties}.\n-\n-@item\n-A target specific save record to save additional information. These\n-records have two fields: the string @samp{TargetSave}, and a\n-declaration type to go in the @code{cl_target_option} structure.\n-\n-@item\n-A variable record to define a variable used to store option\n-information.  These records have two fields: the string\n-@samp{Variable}, and a declaration of the type and name of the\n-variable, optionally with an initializer (but without any trailing\n-@samp{;}).  These records may be used for variables used for many\n-options where declaring the initializer in a single option definition\n-record, or duplicating it in many records, would be inappropriate, or\n-for variables set in option handlers rather than referenced by\n-@code{Var} properties.\n-\n-@item\n-A variable record to define a variable used to store option\n-information.  These records have two fields: the string\n-@samp{TargetVariable}, and a declaration of the type and name of the\n-variable, optionally with an initializer (but without any trailing\n-@samp{;}).  @samp{TargetVariable} is a combination of @samp{Variable}\n-and @samp{TargetSave} records in that the variable is defined in the\n-@code{gcc_options} structure, but these variables are also stored in\n-the @code{cl_target_option} structure.  The variables are saved in the\n-target save code and restored in the target restore code.\n-\n-@item\n-A variable record to record any additional files that the\n-@file{options.h} file should include.  This is useful to provide\n-enumeration or structure definitions needed for target variables.\n-These records have two fields: the string @samp{HeaderInclude} and the\n-name of the include file.\n-\n-@item\n-A variable record to record any additional files that the\n-@file{options.cc} or @file{options-save.cc} file should include.  This\n-is useful to provide\n-inline functions needed for target variables and/or @code{#ifdef}\n-sequences to properly set up the initialization.  These records have\n-two fields: the string @samp{SourceInclude} and the name of the\n-include file.\n-\n-@item\n-An enumeration record to define a set of strings that may be used as\n-arguments to an option or options.  These records have three fields:\n-the string @samp{Enum}, a space-separated list of properties and help\n-text used to describe the set of strings in @option{--help} output.\n-Properties use the same format as option properties; the following are\n-valid:\n-@table @code\n-@item Name(@var{name})\n-This property is required; @var{name} must be a name (suitable for use\n-in C identifiers) used to identify the set of strings in @code{Enum}\n-option properties.\n-\n-@item Type(@var{type})\n-This property is required; @var{type} is the C type for variables set\n-by options using this enumeration together with @code{Var}.\n-\n-@item UnknownError(@var{message})\n-The message @var{message} will be used as an error message if the\n-argument is invalid; for enumerations without @code{UnknownError}, a\n-generic error message is used.  @var{message} should contain a single\n-@samp{%qs} format, which will be used to format the invalid argument.\n-@end table\n-\n-@item\n-An enumeration value record to define one of the strings in a set\n-given in an @samp{Enum} record.  These records have two fields: the\n-string @samp{EnumValue} and a space-separated list of properties.\n-Properties use the same format as option properties; the following are\n-valid:\n-@table @code\n-@item Enum(@var{name})\n-This property is required; @var{name} says which @samp{Enum} record\n-this @samp{EnumValue} record corresponds to.\n-\n-@item String(@var{string})\n-This property is required; @var{string} is the string option argument\n-being described by this record.\n-\n-@item Value(@var{value})\n-This property is required; it says what value (representable as\n-@code{int}) should be used for the given string.\n-\n-@item Canonical\n-This property is optional.  If present, it says the present string is\n-the canonical one among all those with the given value.  Other strings\n-yielding that value will be mapped to this one so specs do not need to\n-handle them.\n-\n-@item DriverOnly\n-This property is optional.  If present, the present string will only\n-be accepted by the driver.  This is used for cases such as\n-@option{-march=native} that are processed by the driver so that\n-@samp{gcc -v} shows how the options chosen depended on the system on\n-which the compiler was run.\n-\n-@item Set(@var{number})\n-This property is optional, required for enumerations used in\n-@code{EnumSet} options.  @var{number} should be decimal number between\n-1 and 64 inclusive and divides the enumeration into a set of\n-sets of mutually exclusive arguments.  Arguments with the same\n-@var{number} can't be specified together in the same option, but\n-arguments with different @var{number} can.  @var{value} needs to be\n-chosen such that a mask of all @var{value} values from the same set\n-@var{number} bitwise ored doesn't overlap with masks for other sets.\n-When @code{-foption=arg_from_set1,arg_from_set4} and\n-@code{-fno-option=arg_from_set3} are used, the effect is that previous\n-value of the @code{Var} will get bits from set 1 and 4 masks cleared,\n-ored @code{Value} of @code{arg_from_set1} and @code{arg_from_set4}\n-and then will get bits from set 3 mask cleared.\n-@end table\n-\n-@item\n-An option definition record.  These records have the following fields:\n-@enumerate\n-@item\n-the name of the option, with the leading ``-'' removed\n-@item\n-a space-separated list of option properties (@pxref{Option properties})\n-@item\n-the help text to use for @option{--help} (omitted if the second field\n-contains the @code{Undocumented} property).\n-@end enumerate\n-\n-By default, all options beginning with ``f'', ``W'' or ``m'' are\n-implicitly assumed to take a ``no-'' form.  This form should not be\n-listed separately.  If an option beginning with one of these letters\n-does not have a ``no-'' form, you can use the @code{RejectNegative}\n-property to reject it.\n-\n-The help text is automatically line-wrapped before being displayed.\n-Normally the name of the option is printed on the left-hand side of\n-the output and the help text is printed on the right.  However, if the\n-help text contains a tab character, the text to the left of the tab is\n-used instead of the option's name and the text to the right of the\n-tab forms the help text.  This allows you to elaborate on what type\n-of argument the option takes.\n-\n-There is no support for different help texts for different languages.\n-If an option is supported for multiple languages, use a generic\n-description that is correct for all of them.\n-\n-If an option has multiple option definition records (in different\n-front ends' @file{*.opt} files, and/or @file{gcc/common.opt}, for\n-example), convention is to not duplicate the help text for each of\n-them, but instead put a comment like @code{; documented in common.opt}\n-in place of the help text for all but one of the multiple option\n-definition records.\n-\n-@item\n-A target mask record.  These records have one field of the form\n-@samp{Mask(@var{x})}.  The options-processing script will automatically\n-allocate a bit in @code{target_flags} (@pxref{Run-time Target}) for\n-each mask name @var{x} and set the macro @code{MASK_@var{x}} to the\n-appropriate bitmask.  It will also declare a @code{TARGET_@var{x}}\n-macro that has the value 1 when bit @code{MASK_@var{x}} is set and\n-0 otherwise.\n-\n-They are primarily intended to declare target masks that are not\n-associated with user options, either because these masks represent\n-internal switches or because the options are not available on all\n-configurations and yet the masks always need to be defined.\n-@end itemize\n-\n-@node Option properties\n-@section Option properties\n-\n-The second field of an option record can specify any of the following\n-properties.  When an option takes an argument, it is enclosed in parentheses\n-following the option property name.  The parser that handles option files\n-is quite simplistic, and will be tricked by any nested parentheses within\n-the argument text itself; in this case, the entire option argument can\n-be wrapped in curly braces within the parentheses to demarcate it, e.g.:\n-\n-@smallexample\n-Condition(@{defined (USE_CYGWIN_LIBSTDCXX_WRAPPERS)@})\n-@end smallexample\n-\n-@table @code\n-@item Common\n-The option is available for all languages and targets.\n-\n-@item Target\n-The option is available for all languages but is target-specific.\n-\n-@item Driver\n-The option is handled by the compiler driver using code not shared\n-with the compilers proper (@file{cc1} etc.).\n-\n-@item @var{language}\n-The option is available when compiling for the given language.\n-\n-It is possible to specify several different languages for the same\n-option.  Each @var{language} must have been declared by an earlier\n-@code{Language} record.  @xref{Option file format}.\n-\n-@item RejectDriver\n-The option is only handled by the compilers proper (@file{cc1} etc.)@:\n-and should not be accepted by the driver.\n-\n-@item RejectNegative\n-The option does not have a ``no-'' form.  All options beginning with\n-``f'', ``W'' or ``m'' are assumed to have a ``no-'' form unless this\n-property is used.\n-\n-@item Negative(@var{othername})\n-The option will turn off another option @var{othername}, which is\n-the option name with the leading ``-'' removed.  This chain action will\n-propagate through the @code{Negative} property of the option to be\n-turned off.  The driver will prune options, removing those that are\n-turned off by some later option.  This pruning is not done for options\n-with @code{Joined} or @code{JoinedOrMissing} properties, unless the\n-options have both the @code{RejectNegative} property and the @code{Negative}\n-property mentions itself.\n-\n-As a consequence, if you have a group of mutually-exclusive\n-options, their @code{Negative} properties should form a circular chain.\n-For example, if options @option{-@var{a}}, @option{-@var{b}} and\n-@option{-@var{c}} are mutually exclusive, their respective @code{Negative}\n-properties should be @samp{Negative(@var{b})}, @samp{Negative(@var{c})}\n-and @samp{Negative(@var{a})}.\n-\n-@item Joined\n-@itemx Separate\n-The option takes a mandatory argument.  @code{Joined} indicates\n-that the option and argument can be included in the same @code{argv}\n-entry (as with @code{-mflush-func=@var{name}}, for example).\n-@code{Separate} indicates that the option and argument can be\n-separate @code{argv} entries (as with @code{-o}).  An option is\n-allowed to have both of these properties.\n-\n-@item JoinedOrMissing\n-The option takes an optional argument.  If the argument is given,\n-it will be part of the same @code{argv} entry as the option itself.\n-\n-This property cannot be used alongside @code{Joined} or @code{Separate}.\n-\n-@item MissingArgError(@var{message})\n-For an option marked @code{Joined} or @code{Separate}, the message\n-@var{message} will be used as an error message if the mandatory\n-argument is missing; for options without @code{MissingArgError}, a\n-generic error message is used.  @var{message} should contain a single\n-@samp{%qs} format, which will be used to format the name of the option\n-passed.\n-\n-@item Args(@var{n})\n-For an option marked @code{Separate}, indicate that it takes @var{n}\n-arguments.  The default is 1.\n-\n-@item UInteger\n-The option's argument is a non-negative integer consisting of either\n-decimal or hexadecimal digits interpreted as @code{int}.  Hexadecimal\n-integers may optionally start with the @code{0x} or @code{0X} prefix.\n-The option parser validates and converts the argument before passing\n-it to the relevant option handler.  @code{UInteger} should also be used\n-with options like @code{-falign-loops} where both @code{-falign-loops}\n-and @code{-falign-loops}=@var{n} are supported to make sure the saved\n-options are given a full integer.  Positive values of the argument in\n-excess of @code{INT_MAX} wrap around zero.\n-\n-@item Host_Wide_Int\n-The option's argument is a non-negative integer consisting of either\n-decimal or hexadecimal digits interpreted as the widest integer type\n-on the host.  As with an @code{UInteger} argument, hexadecimal integers\n-may optionally start with the @code{0x} or @code{0X} prefix.  The option\n-parser validates and converts the argument before passing it to\n-the relevant option handler.  @code{Host_Wide_Int} should be used with\n-options that need to accept very large values.  Positive values of\n-the argument in excess of @code{HOST_WIDE_INT_M1U} are assigned\n-@code{HOST_WIDE_INT_M1U}.\n-\n-@item IntegerRange(@var{n}, @var{m})\n-The options's arguments are integers of type @code{int}.  The option's\n-parser validates that the value of an option integer argument is within\n-the closed range [@var{n}, @var{m}].\n-\n-@item ByteSize\n-A property applicable only to @code{UInteger} or @code{Host_Wide_Int}\n-arguments.  The option's integer argument is interpreted as if in infinite\n-precision using saturation arithmetic in the corresponding type.  The argument\n-may be followed by a @samp{byte-size} suffix designating a multiple of bytes\n-such as @code{kB} and @code{KiB} for kilobyte and kibibyte, respectively,\n-@code{MB} and @code{MiB} for megabyte and mebibyte, @code{GB} and @code{GiB}\n-for gigabyte and gigibyte, and so on.  @code{ByteSize} should be used for\n-with options that take a very large argument representing a size in bytes,\n-such as @option{-Wlarger-than=}.\n-\n-@item ToLower\n-The option's argument should be converted to lowercase as part of\n-putting it in canonical form, and before comparing with the strings\n-indicated by any @code{Enum} property.\n-\n-@item NoDriverArg\n-For an option marked @code{Separate}, the option only takes an\n-argument in the compiler proper, not in the driver.  This is for\n-compatibility with existing options that are used both directly and\n-via @option{-Wp,}; new options should not have this property.\n-\n-@item Var(@var{var})\n-The state of this option should be stored in variable @var{var}\n-(actually a macro for @code{global_options.x_@var{var}}).\n-The way that the state is stored depends on the type of option:\n-\n-@item WarnRemoved\n-The option is removed and every usage of such option will\n-result in a warning.  We use it option backward compatibility.\n-\n-@item Var(@var{var}, @var{set})\n-The option controls an integer variable @var{var} and is active when\n-@var{var} equals @var{set}.  The option parser will set @var{var} to\n-@var{set} when the positive form of the option is used and @code{!@var{set}}\n-when the ``no-'' form is used.\n-\n-@var{var} is declared in the same way as for the single-argument form\n-described above.\n-\n-@itemize @bullet\n-@item\n-If the option uses the @code{Mask} or @code{InverseMask} properties,\n-@var{var} is the integer variable that contains the mask.\n-\n-@item\n-If the option is a normal on/off switch, @var{var} is an integer\n-variable that is nonzero when the option is enabled.  The options\n-parser will set the variable to 1 when the positive form of the\n-option is used and 0 when the ``no-'' form is used.\n-\n-@item\n-If the option takes an argument and has the @code{UInteger} property,\n-@var{var} is an integer variable that stores the value of the argument.\n-\n-@item\n-If the option takes an argument and has the @code{Enum} property,\n-@var{var} is a variable (type given in the @code{Type} property of the\n-@samp{Enum} record whose @code{Name} property has the same argument as\n-the @code{Enum} property of this option) that stores the value of the\n-argument.\n-\n-@item\n-If the option has the @code{Defer} property, @var{var} is a pointer to\n-a @code{VEC(cl_deferred_option,heap)} that stores the option for later\n-processing.  (@var{var} is declared with type @code{void *} and needs\n-to be cast to @code{VEC(cl_deferred_option,heap)} before use.)\n-\n-@item\n-Otherwise, if the option takes an argument, @var{var} is a pointer to\n-the argument string.  The pointer will be null if the argument is optional\n-and wasn't given.\n-@end itemize\n-\n-The option-processing script will usually zero-initialize @var{var}.\n-You can modify this behavior using @code{Init}.\n-\n-@item Init(@var{value})\n-The variable specified by the @code{Var} property should be statically\n-initialized to @var{value}.  If more than one option using the same\n-variable specifies @code{Init}, all must specify the same initializer.\n-\n-@item Mask(@var{name})\n-The option is associated with a bit in the @code{target_flags}\n-variable (@pxref{Run-time Target}) and is active when that bit is set.\n-You may also specify @code{Var} to select a variable other than\n-@code{target_flags}.\n-\n-The options-processing script will automatically allocate a unique bit\n-for the option.  If the option is attached to @samp{target_flags},\n-the script will set the macro @code{MASK_@var{name}} to the appropriate\n-bitmask.  It will also declare a @code{TARGET_@var{name}} macro that has\n-the value 1 when the option is active and 0 otherwise.  If you use @code{Var}\n-to attach the option to a different variable, the bitmask macro with be\n-called @code{OPTION_MASK_@var{name}}.\n-\n-@item InverseMask(@var{othername})\n-@itemx InverseMask(@var{othername}, @var{thisname})\n-The option is the inverse of another option that has the\n-@code{Mask(@var{othername})} property.  If @var{thisname} is given,\n-the options-processing script will declare a @code{TARGET_@var{thisname}}\n-macro that is 1 when the option is active and 0 otherwise.\n-\n-@item Enum(@var{name})\n-The option's argument is a string from the set of strings associated\n-with the corresponding @samp{Enum} record.  The string is checked and\n-converted to the integer specified in the corresponding\n-@samp{EnumValue} record before being passed to option handlers.\n-\n-@item EnumSet\n-Must be used together with the @code{Enum(@var{name})} property.\n-Corresponding @samp{Enum} record must use @code{Set} properties.\n-The option's argument is either a string from the set like for\n-@code{Enum(@var{name})}, but with a slightly different behavior that\n-the whole @code{Var} isn't overwritten, but only the bits in all the\n-enumeration values with the same set bitwise ored together.\n-Or option's argument can be a comma separated list of strings where\n-each string is from a different @code{Set(@var{number})}.\n-\n-@item EnumBitSet\n-Must be used together with the @code{Enum(@var{name})} property.\n-Similar to @samp{EnumSet}, but corresponding @samp{Enum} record must\n-not use @code{Set} properties, each @code{EnumValue} should have\n-@code{Value} that is a power of 2, each value is treated as its own\n-set and its value as the set's mask, so there are no mutually\n-exclusive arguments.\n-\n-@item Defer\n-The option should be stored in a vector, specified with @code{Var},\n-for later processing.\n-\n-@item Alias(@var{opt})\n-@itemx Alias(@var{opt}, @var{arg})\n-@itemx Alias(@var{opt}, @var{posarg}, @var{negarg})\n-The option is an alias for @option{-@var{opt}} (or the negative form\n-of that option, depending on @code{NegativeAlias}).  In the first form,\n-any argument passed to the alias is considered to be passed to\n-@option{-@var{opt}}, and @option{-@var{opt}} is considered to be\n-negated if the alias is used in negated form.  In the second form, the\n-alias may not be negated or have an argument, and @var{posarg} is\n-considered to be passed as an argument to @option{-@var{opt}}.  In the\n-third form, the alias may not have an argument, if the alias is used\n-in the positive form then @var{posarg} is considered to be passed to\n-@option{-@var{opt}}, and if the alias is used in the negative form\n-then @var{negarg} is considered to be passed to @option{-@var{opt}}.\n-\n-Aliases should not specify @code{Var} or @code{Mask} or\n-@code{UInteger}.  Aliases should normally specify the same languages\n-as the target of the alias; the flags on the target will be used to\n-determine any diagnostic for use of an option for the wrong language,\n-while those on the alias will be used to identify what command-line\n-text is the option and what text is any argument to that option.\n-\n-When an @code{Alias} definition is used for an option, driver specs do\n-not need to handle it and no @samp{OPT_} enumeration value is defined\n-for it; only the canonical form of the option will be seen in those\n-places.\n-\n-@item NegativeAlias\n-For an option marked with @code{Alias(@var{opt})}, the option is\n-considered to be an alias for the positive form of @option{-@var{opt}}\n-if negated and for the negative form of @option{-@var{opt}} if not\n-negated.  @code{NegativeAlias} may not be used with the forms of\n-@code{Alias} taking more than one argument.\n-\n-@item Ignore\n-This option is ignored apart from printing any warning specified using\n-@code{Warn}.  The option will not be seen by specs and no @samp{OPT_}\n-enumeration value is defined for it.\n-\n-@item SeparateAlias\n-For an option marked with @code{Joined}, @code{Separate} and\n-@code{Alias}, the option only acts as an alias when passed a separate\n-argument; with a joined argument it acts as a normal option, with an\n-@samp{OPT_} enumeration value.  This is for compatibility with the\n-Java @option{-d} option and should not be used for new options.\n-\n-@item Warn(@var{message})\n-If this option is used, output the warning @var{message}.\n-@var{message} is a format string, either taking a single operand with\n-a @samp{%qs} format which is the option name, or not taking any\n-operands, which is passed to the @samp{warning} function.  If an alias\n-is marked @code{Warn}, the target of the alias must not also be marked\n-@code{Warn}.\n-\n-@item Warning\n-This is a warning option and should be shown as such in\n-@option{--help} output.  This flag does not currently affect anything\n-other than @option{--help}.\n-\n-@item Optimization\n-This is an optimization option.  It should be shown as such in\n-@option{--help} output, and any associated variable named using\n-@code{Var} should be saved and restored when the optimization level is\n-changed with @code{optimize} attributes.\n-\n-@item PerFunction\n-This is an option that can be overridden on a per-function basis.\n-@code{Optimization} implies @code{PerFunction}, but options that do not\n-affect executable code generation may use this flag instead, so that the\n-option is not taken into account in ways that might affect executable\n-code generation.\n-\n-@item Param\n-This is an option that is a parameter.\n-\n-@item Undocumented\n-The option is deliberately missing documentation and should not\n-be included in the @option{--help} output.\n-\n-@item Condition(@var{cond})\n-The option should only be accepted if preprocessor condition\n-@var{cond} is true.  Note that any C declarations associated with the\n-option will be present even if @var{cond} is false; @var{cond} simply\n-controls whether the option is accepted and whether it is printed in\n-the @option{--help} output.\n-\n-@item Save\n-Build the @code{cl_target_option} structure to hold a copy of the\n-option, add the functions @code{cl_target_option_save} and\n-@code{cl_target_option_restore} to save and restore the options.\n-\n-@item SetByCombined\n-The option may also be set by a combined option such as\n-@option{-ffast-math}.  This causes the @code{gcc_options} struct to\n-have a field @code{frontend_set_@var{name}}, where @code{@var{name}}\n-is the name of the field holding the value of this option (without the\n-leading @code{x_}).  This gives the front end a way to indicate that\n-the value has been set explicitly and should not be changed by the\n-combined option.  For example, some front ends use this to prevent\n-@option{-ffast-math} and @option{-fno-fast-math} from changing the\n-value of @option{-fmath-errno} for languages that do not use\n-@code{errno}.\n-\n-@item EnabledBy(@var{opt})\n-@itemx EnabledBy(@var{opt} || @var{opt2})\n-@itemx EnabledBy(@var{opt} && @var{opt2})\n-If not explicitly set, the option is set to the value of\n-@option{-@var{opt}}; multiple options can be given, separated by\n-@code{||}.  The third form using @code{&&} specifies that the option is\n-only set if both @var{opt} and @var{opt2} are set. The options @var{opt}\n-and @var{opt2} must have the @code{Common} property; otherwise, use\n-@code{LangEnabledBy}.\n-\n-@item LangEnabledBy(@var{language}, @var{opt})\n-@itemx LangEnabledBy(@var{language}, @var{opt}, @var{posarg}, @var{negarg})\n-When compiling for the given language, the option is set to the value\n-of @option{-@var{opt}}, if not explicitly set. @var{opt} can be also a list\n-of @code{||} separated options. In the second form, if\n-@var{opt} is used in the positive form then @var{posarg} is considered\n-to be passed to the option, and if @var{opt} is used in the negative\n-form then @var{negarg} is considered to be passed to the option.  It\n-is possible to specify several different languages.  Each\n-@var{language} must have been declared by an earlier @code{Language}\n-record.  @xref{Option file format}.\n-\n-@item NoDWARFRecord\n-The option is omitted from the producer string written by\n-@option{-grecord-gcc-switches}.\n-\n-@item PchIgnore\n-Even if this is a target option, this option will not be recorded / compared\n-to determine if a precompiled header file matches.\n-\n-@item CPP(@var{var})\n-The state of this option should be kept in sync with the preprocessor\n-option @var{var}.  If this property is set, then properties @code{Var}\n-and @code{Init} must be set as well.\n-\n-@item CppReason(@var{CPP_W_Enum})\n-This warning option corresponds to @code{cpplib.h} warning reason code\n-@var{CPP_W_Enum}.  This should only be used for warning options of the\n-C-family front-ends.\n-\n-@end table"}, {"sha": "9e8b4f50ad6c7f8d393306531bd74fc14a8c642f", "filename": "gcc/doc/passes.texi", "status": "removed", "additions": 0, "deletions": 1196, "changes": 1196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fpasses.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fpasses.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fpasses.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,1196 +0,0 @@\n-@c markers: BUG TODO\n-\n-@c Copyright (C) 1988-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@node Passes\n-@chapter Passes and Files of the Compiler\n-@cindex passes and files of the compiler\n-@cindex files and passes of the compiler\n-@cindex compiler passes and files\n-@cindex pass dumps\n-\n-This chapter is dedicated to giving an overview of the optimization and\n-code generation passes of the compiler.  In the process, it describes\n-some of the language front end interface, though this description is no\n-where near complete.\n-\n-@menu\n-* Parsing pass::         The language front end turns text into bits.\n-* Gimplification pass::  The bits are turned into something we can optimize.\n-* Pass manager::         Sequencing the optimization passes.\n-* IPA passes::           Inter-procedural optimizations.\n-* Tree SSA passes::      Optimizations on a high-level representation.\n-* RTL passes::           Optimizations on a low-level representation.\n-* Optimization info::    Dumping optimization information from passes.\n-@end menu\n-\n-@node Parsing pass\n-@section Parsing pass\n-@cindex GENERIC\n-@findex lang_hooks.parse_file\n-The language front end is invoked only once, via\n-@code{lang_hooks.parse_file}, to parse the entire input.  The language\n-front end may use any intermediate language representation deemed\n-appropriate.  The C front end uses GENERIC trees (@pxref{GENERIC}), plus\n-a double handful of language specific tree codes defined in\n-@file{c-common.def}.  The Fortran front end uses a completely different\n-private representation.\n-\n-@cindex GIMPLE\n-@cindex gimplification\n-@cindex gimplifier\n-@cindex language-independent intermediate representation\n-@cindex intermediate representation lowering\n-@cindex lowering, language-dependent intermediate representation\n-At some point the front end must translate the representation used in the\n-front end to a representation understood by the language-independent\n-portions of the compiler.  Current practice takes one of two forms.\n-The C front end manually invokes the gimplifier (@pxref{GIMPLE}) on each function,\n-and uses the gimplifier callbacks to convert the language-specific tree\n-nodes directly to GIMPLE before passing the function off to be compiled.\n-The Fortran front end converts from a private representation to GENERIC,\n-which is later lowered to GIMPLE when the function is compiled.  Which\n-route to choose probably depends on how well GENERIC (plus extensions)\n-can be made to match up with the source language and necessary parsing\n-data structures.\n-\n-BUG: Gimplification must occur before nested function lowering,\n-and nested function lowering must be done by the front end before\n-passing the data off to cgraph.\n-\n-TODO: Cgraph should control nested function lowering.  It would\n-only be invoked when it is certain that the outer-most function\n-is used.\n-\n-TODO: Cgraph needs a gimplify_function callback.  It should be\n-invoked when (1) it is certain that the function is used, (2)\n-warning flags specified by the user require some amount of\n-compilation in order to honor, (3) the language indicates that\n-semantic analysis is not complete until gimplification occurs.\n-Hum@dots{} this sounds overly complicated.  Perhaps we should just\n-have the front end gimplify always; in most cases it's only one\n-function call.\n-\n-The front end needs to pass all function definitions and top level\n-declarations off to the middle-end so that they can be compiled and\n-emitted to the object file.  For a simple procedural language, it is\n-usually most convenient to do this as each top level declaration or\n-definition is seen.  There is also a distinction to be made between\n-generating functional code and generating complete debug information.\n-The only thing that is absolutely required for functional code is that\n-function and data @emph{definitions} be passed to the middle-end.  For\n-complete debug information, function, data and type declarations\n-should all be passed as well.\n-\n-@findex rest_of_decl_compilation\n-@findex rest_of_type_compilation\n-@findex cgraph_finalize_function\n-In any case, the front end needs each complete top-level function or\n-data declaration, and each data definition should be passed to\n-@code{rest_of_decl_compilation}.  Each complete type definition should\n-be passed to @code{rest_of_type_compilation}.  Each function definition\n-should be passed to @code{cgraph_finalize_function}.\n-\n-TODO: I know rest_of_compilation currently has all sorts of\n-RTL generation semantics.  I plan to move all code generation\n-bits (both Tree and RTL) to compile_function.  Should we hide\n-cgraph from the front ends and move back to rest_of_compilation\n-as the official interface?  Possibly we should rename all three\n-interfaces such that the names match in some meaningful way and\n-that is more descriptive than \"rest_of\".\n-\n-The middle-end will, at its option, emit the function and data\n-definitions immediately or queue them for later processing.\n-\n-@node Gimplification pass\n-@section Gimplification pass\n-\n-@cindex gimplification\n-@cindex GIMPLE\n-@dfn{Gimplification} is a whimsical term for the process of converting\n-the intermediate representation of a function into the GIMPLE language\n-(@pxref{GIMPLE}).  The term stuck, and so words like ``gimplification'',\n-``gimplify'', ``gimplifier'' and the like are sprinkled throughout this\n-section of code.\n-\n-While a front end may certainly choose to generate GIMPLE directly if\n-it chooses, this can be a moderately complex process unless the\n-intermediate language used by the front end is already fairly simple.\n-Usually it is easier to generate GENERIC trees plus extensions\n-and let the language-independent gimplifier do most of the work.\n-\n-@findex gimplify_function_tree\n-@findex gimplify_expr\n-@findex lang_hooks.gimplify_expr\n-The main entry point to this pass is @code{gimplify_function_tree}\n-located in @file{gimplify.cc}.  From here we process the entire\n-function gimplifying each statement in turn.  The main workhorse\n-for this pass is @code{gimplify_expr}.  Approximately everything\n-passes through here at least once, and it is from here that we\n-invoke the @code{lang_hooks.gimplify_expr} callback.\n-\n-The callback should examine the expression in question and return\n-@code{GS_UNHANDLED} if the expression is not a language specific\n-construct that requires attention.  Otherwise it should alter the\n-expression in some way to such that forward progress is made toward\n-producing valid GIMPLE@.  If the callback is certain that the\n-transformation is complete and the expression is valid GIMPLE, it\n-should return @code{GS_ALL_DONE}.  Otherwise it should return\n-@code{GS_OK}, which will cause the expression to be processed again.\n-If the callback encounters an error during the transformation (because\n-the front end is relying on the gimplification process to finish\n-semantic checks), it should return @code{GS_ERROR}.\n-\n-@node Pass manager\n-@section Pass manager\n-\n-The pass manager is located in @file{passes.cc}, @file{tree-optimize.c}\n-and @file{tree-pass.h}.\n-It processes passes as described in @file{passes.def}.\n-Its job is to run all of the individual passes in the correct order,\n-and take care of standard bookkeeping that applies to every pass.\n-\n-The theory of operation is that each pass defines a structure that\n-represents everything we need to know about that pass---when it\n-should be run, how it should be run, what intermediate language\n-form or on-the-side data structures it needs.  We register the pass\n-to be run in some particular order, and the pass manager arranges\n-for everything to happen in the correct order.\n-\n-The actuality doesn't completely live up to the theory at present.\n-Command-line switches and @code{timevar_id_t} enumerations must still\n-be defined elsewhere.  The pass manager validates constraints but does\n-not attempt to (re-)generate data structures or lower intermediate\n-language form based on the requirements of the next pass.  Nevertheless,\n-what is present is useful, and a far sight better than nothing at all.\n-\n-Each pass should have a unique name.\n-Each pass may have its own dump file (for GCC debugging purposes).\n-Passes with a name starting with a star do not dump anything.\n-Sometimes passes are supposed to share a dump file / option name.\n-To still give these unique names, you can use a prefix that is delimited\n-by a space from the part that is used for the dump file / option name.\n-E.g. When the pass name is \"ud dce\", the name used for dump file/options\n-is \"dce\".\n-\n-TODO: describe the global variables set up by the pass manager,\n-and a brief description of how a new pass should use it.\n-I need to look at what info RTL passes use first@enddots{}\n-\n-@node IPA passes\n-@section Inter-procedural optimization passes\n-@cindex IPA passes\n-@cindex inter-procedural optimization passes\n-\n-The inter-procedural optimization (IPA) passes use call graph\n-information to perform transformations across function boundaries.\n-IPA is a critical part of link-time optimization (LTO) and\n-whole-program (WHOPR) optimization, and these passes are structured\n-with the needs of LTO and WHOPR in mind by dividing their operations\n-into stages.  For detailed discussion of the LTO/WHOPR IPA pass stages\n-and interfaces, see @ref{IPA}.\n-\n-The following briefly describes the inter-procedural optimization (IPA)\n-passes, which are split into small IPA passes, regular IPA passes,\n-and late IPA passes, according to the LTO/WHOPR processing model.\n-\n-@menu\n-* Small IPA passes::\n-* Regular IPA passes::\n-* Late IPA passes::\n-@end menu\n-\n-@node Small IPA passes\n-@subsection Small IPA passes\n-@cindex small IPA passes\n-A small IPA pass is a pass derived from @code{simple_ipa_opt_pass}.\n-As described in @ref{IPA}, it does everything at once and \n-defines only the @emph{Execute} stage.  During this\n-stage it accesses and modifies the function bodies.\n-No @code{generate_summary}, @code{read_summary}, or @code{write_summary}\n-hooks are defined.\n-\n-@itemize @bullet\n-@item IPA free lang data\n-\n-This pass frees resources that are used by the front end but are\n-not needed once it is done.  It is located in @file{tree.cc} and is described by\n-@code{pass_ipa_free_lang_data}.\n-\n-@item IPA function and variable visibility\n-\n-This is a local function pass handling visibilities of all symbols.  This\n-happens before LTO streaming, so @option{-fwhole-program} should be ignored\n-at this level.  It is located in @file{ipa-visibility.cc} and is described by\n-@code{pass_ipa_function_and_variable_visibility}.\n-\n-@item IPA remove symbols\n-\n-This pass performs reachability analysis and reclaims all unreachable nodes.\n-It is located in @file{passes.cc} and is described by\n-@code{pass_ipa_remove_symbols}.\n-\n-@item IPA OpenACC\n-\n-This is a pass group for OpenACC processing.  It is located in\n-@file{tree-ssa-loop.cc} and is described by @code{pass_ipa_oacc}.\n-\n-@item IPA points-to analysis\n-\n-This is a tree-based points-to analysis pass. The idea behind this analyzer\n-is to generate set constraints from the program, then solve the resulting\n-constraints in order to generate the points-to sets.  It is located in \n-@file{tree-ssa-structalias.cc} and is described by @code{pass_ipa_pta}.\n-\n-@item IPA OpenACC kernels\n-\n-This is a pass group for processing OpenACC kernels regions.  It is a\n-subpass of the IPA OpenACC pass group that runs on offloaded functions\n-containing OpenACC kernels loops.  It is located in\n-@file{tree-ssa-loop.cc} and is described by\n-@code{pass_ipa_oacc_kernels}.\n-\n-@item Target clone\n-\n-This is a pass for parsing functions with multiple target attributes.\n-It is located in @file{multiple_target.cc} and is described by\n-@code{pass_target_clone}.\n-\n-@item IPA auto profile\n-\n-This pass uses AutoFDO profiling data to annotate the control flow graph.\n-It is located in @file{auto-profile.cc} and is described by\n-@code{pass_ipa_auto_profile}.\n-\n-@item IPA tree profile\n-\n-This pass does profiling for all functions in the call graph. \n-It calculates branch\n-probabilities and basic block execution counts. It is located\n-in @file{tree-profile.cc} and is described by @code{pass_ipa_tree_profile}.\n-\n-@item IPA free function summary\n-\n-This pass is a small IPA pass when argument @code{small_p} is true.\n-It releases inline function summaries and call summaries.\n-It is located in @file{ipa-fnsummary.cc} and is described by\n-@code{pass_ipa_free_free_fn_summary}.\n-\n-@item IPA increase alignment\n-\n-This pass increases the alignment of global arrays to improve\n-vectorization. It is located in @file{tree-vectorizer.cc}\n-and is described by @code{pass_ipa_increase_alignment}.\n-\n-@item IPA transactional memory\n-\n-This pass is for transactional memory support.\n-It is located in @file{trans-mem.cc} and is described by\n-@code{pass_ipa_tm}.\n-\n-@item IPA lower emulated TLS\n-\n-This pass lowers thread-local storage (TLS) operations\n-to emulation functions provided by libgcc.\n-It is located in @file{tree-emutls.cc} and is described by\n-@code{pass_ipa_lower_emutls}.\n-\n-@end itemize\n-\n-@node Regular IPA passes\n-@subsection Regular IPA passes\n-@cindex regular IPA passes\n-\n-A regular IPA pass is a pass derived from @code{ipa_opt_pass_d} that\n-is executed in WHOPR compilation. Regular IPA passes may have summary\n-hooks implemented in any of the LGEN, WPA or LTRANS stages (@pxref{IPA}).\n-\n-@itemize @bullet\n-@item IPA whole program visibility\n-\n-This pass performs various optimizations involving symbol visibility\n-with @option{-fwhole-program}, including symbol privatization,\n-discovering local functions, and dismantling comdat groups.  It is\n-located in @file{ipa-visibility.cc} and is described by\n-@code{pass_ipa_whole_program_visibility}.\n-\n-@item IPA profile\n-\n-The IPA profile pass propagates profiling frequencies across the call\n-graph.  It is located in @file{ipa-profile.cc} and is described by\n-@code{pass_ipa_profile}.\n-\n-@item IPA identical code folding\n-\n-This is the inter-procedural identical code folding pass.\n-The goal of this transformation is to discover functions\n-and read-only variables that have exactly the same semantics.  It is\n-located in @file{ipa-icf.cc} and is described by @code{pass_ipa_icf}.\n-\n-@item IPA devirtualization\n-\n-This pass performs speculative devirtualization based on the type\n-inheritance graph.  When a polymorphic call has only one likely target\n-in the unit, it is turned into a speculative call. It is located in\n-@file{ipa-devirt.cc} and is described by @code{pass_ipa_devirt}.\n-\n-@item IPA constant propagation\n-\n-The goal of this pass is to discover functions that are always invoked\n-with some arguments with the same known constant values and to modify\n-the functions accordingly.  It can also do partial specialization and\n-type-based devirtualization.  It is located in @file{ipa-cp.cc} and is\n-described by @code{pass_ipa_cp}.\n-\n-@item IPA scalar replacement of aggregates\n-\n-This pass can replace an aggregate parameter with a set of other parameters\n-representing part of the original, turning those passed by reference\n-into new ones which pass the value directly.  It also removes unused\n-function return values and unused function parameters.  This pass is\n-located in @file{ipa-sra.cc} and is described by @code{pass_ipa_sra}.\n-\n-@item IPA constructor/destructor merge\n-\n-This pass merges multiple constructors and destructors for static\n-objects into single functions.  It's only run at LTO time unless the\n-target doesn't support constructors and destructors natively.  The\n-pass is located in @file{ipa.cc} and is described by\n-@code{pass_ipa_cdtor_merge}.\n-\n-@item IPA function summary\n-\n-This pass provides function analysis for inter-procedural passes.\n-It collects estimates of function body size, execution time, and frame\n-size for each function.  It also estimates information about function\n-calls: call statement size, time and how often the parameters change\n-for each call.  It is located in @file{ipa-fnsummary.cc} and is\n-described by @code{pass_ipa_fn_summary}.\n-\n-@item IPA inline\n-\n-The IPA inline pass handles function inlining with whole-program\n-knowledge. Small functions that are candidates for inlining are\n-ordered in increasing badness, bounded by unit growth parameters.\n-Unreachable functions are removed from the call graph.  Functions called\n-once and not exported from the unit are inlined.  This pass is located in\n-@file{ipa-inline.cc} and is described by @code{pass_ipa_inline}.\n-\n-@item IPA pure/const analysis\n-\n-This pass marks functions as being either const (@code{TREE_READONLY}) or\n-pure (@code{DECL_PURE_P}).  The per-function information is produced\n-by @code{pure_const_generate_summary}, then the global information is computed\n-by performing a transitive closure over the call graph.   It is located in\n-@file{ipa-pure-const.cc} and is described by @code{pass_ipa_pure_const}.\n-\n-@item IPA free function summary\n-\n-This pass is a regular IPA pass when argument @code{small_p} is false.\n-It releases inline function summaries and call summaries.\n-It is located in @file{ipa-fnsummary.cc} and is described by\n-@code{pass_ipa_free_fn_summary}.\n-\n-@item IPA reference\n-\n-This pass gathers information about how variables whose scope is\n-confined to the compilation unit are used.  It is located in\n-@file{ipa-reference.cc} and is described by @code{pass_ipa_reference}.\n-\n-@item IPA single use\n-\n-This pass checks whether variables are used by a single function.\n-It is located in @file{ipa.cc} and is described by\n-@code{pass_ipa_single_use}.\n-\n-@item IPA comdats\n-\n-This pass looks for static symbols that are used exclusively\n-within one comdat group, and moves them into that comdat group. It is\n-located in @file{ipa-comdats.cc} and is described by\n-@code{pass_ipa_comdats}.\n-\n-@end itemize\n-\n-@node Late IPA passes\n-@subsection Late IPA passes\n-@cindex late IPA passes\n-\n-Late IPA passes are simple IPA passes executed after\n-the regular passes.  In WHOPR mode the passes are executed after\n-partitioning and thus see just parts of the compiled unit.\n-\n-@itemize @bullet\n-@item Materialize all clones\n-\n-Once all functions from compilation unit are in memory, produce all clones\n-and update all calls.  It is located in @file{ipa.cc} and is described by\n-@code{pass_materialize_all_clones}.\n-\n-@item IPA points-to analysis\n-\n-Points-to analysis; this is the same as the points-to-analysis pass\n-run with the small IPA passes (@pxref{Small IPA passes}).\n-\n-@item OpenMP simd clone\n-\n-This is the OpenMP constructs' SIMD clone pass.  It creates the appropriate\n-SIMD clones for functions tagged as elemental SIMD functions.\n-It is located in @file{omp-simd-clone.cc} and is described by\n-@code{pass_omp_simd_clone}.\n-\n-@end itemize\n-\n-@node Tree SSA passes\n-@section Tree SSA passes\n-\n-The following briefly describes the Tree optimization passes that are\n-run after gimplification and what source files they are located in.\n-\n-@itemize @bullet\n-@item Remove useless statements\n-\n-This pass is an extremely simple sweep across the gimple code in which\n-we identify obviously dead code and remove it.  Here we do things like\n-simplify @code{if} statements with constant conditions, remove\n-exception handling constructs surrounding code that obviously cannot\n-throw, remove lexical bindings that contain no variables, and other\n-assorted simplistic cleanups.  The idea is to get rid of the obvious\n-stuff quickly rather than wait until later when it's more work to get\n-rid of it.  This pass is located in @file{tree-cfg.cc} and described by\n-@code{pass_remove_useless_stmts}.\n-\n-@item OpenMP lowering\n-\n-If OpenMP generation (@option{-fopenmp}) is enabled, this pass lowers\n-OpenMP constructs into GIMPLE.\n-\n-Lowering of OpenMP constructs involves creating replacement\n-expressions for local variables that have been mapped using data\n-sharing clauses, exposing the control flow of most synchronization\n-directives and adding region markers to facilitate the creation of the\n-control flow graph.  The pass is located in @file{omp-low.cc} and is\n-described by @code{pass_lower_omp}.\n-\n-@item OpenMP expansion\n-\n-If OpenMP generation (@option{-fopenmp}) is enabled, this pass expands\n-parallel regions into their own functions to be invoked by the thread\n-library.  The pass is located in @file{omp-low.cc} and is described by\n-@code{pass_expand_omp}.\n-\n-@item Lower control flow\n-\n-This pass flattens @code{if} statements (@code{COND_EXPR})\n-and moves lexical bindings (@code{BIND_EXPR}) out of line.  After\n-this pass, all @code{if} statements will have exactly two @code{goto}\n-statements in its @code{then} and @code{else} arms.  Lexical binding\n-information for each statement will be found in @code{TREE_BLOCK} rather\n-than being inferred from its position under a @code{BIND_EXPR}.  This\n-pass is found in @file{gimple-low.cc} and is described by\n-@code{pass_lower_cf}.\n-\n-@item Lower exception handling control flow\n-\n-This pass decomposes high-level exception handling constructs\n-(@code{TRY_FINALLY_EXPR} and @code{TRY_CATCH_EXPR}) into a form\n-that explicitly represents the control flow involved.  After this\n-pass, @code{lookup_stmt_eh_region} will return a non-negative\n-number for any statement that may have EH control flow semantics;\n-examine @code{tree_can_throw_internal} or @code{tree_can_throw_external}\n-for exact semantics.  Exact control flow may be extracted from\n-@code{foreach_reachable_handler}.  The EH region nesting tree is defined\n-in @file{except.h} and built in @file{except.cc}.  The lowering pass\n-itself is in @file{tree-eh.cc} and is described by @code{pass_lower_eh}.\n-\n-@item Build the control flow graph\n-\n-This pass decomposes a function into basic blocks and creates all of\n-the edges that connect them.  It is located in @file{tree-cfg.cc} and\n-is described by @code{pass_build_cfg}.\n-\n-@item Find all referenced variables\n-\n-This pass walks the entire function and collects an array of all\n-variables referenced in the function, @code{referenced_vars}.  The\n-index at which a variable is found in the array is used as a UID\n-for the variable within this function.  This data is needed by the\n-SSA rewriting routines.  The pass is located in @file{tree-dfa.cc}\n-and is described by @code{pass_referenced_vars}.\n-\n-@item Enter static single assignment form\n-\n-This pass rewrites the function such that it is in SSA form.  After\n-this pass, all @code{is_gimple_reg} variables will be referenced by\n-@code{SSA_NAME}, and all occurrences of other variables will be\n-annotated with @code{VDEFS} and @code{VUSES}; PHI nodes will have\n-been inserted as necessary for each basic block.  This pass is\n-located in @file{tree-ssa.cc} and is described by @code{pass_build_ssa}.\n-\n-@item Warn for uninitialized variables\n-\n-This pass scans the function for uses of @code{SSA_NAME}s that\n-are fed by default definition.  For non-parameter variables, such\n-uses are uninitialized.  The pass is run twice, before and after\n-optimization (if turned on).  In the first pass we only warn for uses that are\n-positively uninitialized; in the second pass we warn for uses that\n-are possibly uninitialized.  The pass is located in @file{tree-ssa.cc}\n-and is defined by @code{pass_early_warn_uninitialized} and\n-@code{pass_late_warn_uninitialized}.\n-\n-@item Dead code elimination\n-\n-This pass scans the function for statements without side effects whose\n-result is unused.  It does not do memory life analysis, so any value\n-that is stored in memory is considered used.  The pass is run multiple\n-times throughout the optimization process.  It is located in\n-@file{tree-ssa-dce.cc} and is described by @code{pass_dce}.\n-\n-@item Dominator optimizations\n-\n-This pass performs trivial dominator-based copy and constant propagation,\n-expression simplification, and jump threading.  It is run multiple times\n-throughout the optimization process.  It is located in @file{tree-ssa-dom.cc}\n-and is described by @code{pass_dominator}.\n-\n-@item Forward propagation of single-use variables\n-\n-This pass attempts to remove redundant computation by substituting\n-variables that are used once into the expression that uses them and\n-seeing if the result can be simplified.  It is located in\n-@file{tree-ssa-forwprop.cc} and is described by @code{pass_forwprop}.\n-\n-@item Copy Renaming\n-\n-This pass attempts to change the name of compiler temporaries involved in\n-copy operations such that SSA->normal can coalesce the copy away.  When compiler\n-temporaries are copies of user variables, it also renames the compiler\n-temporary to the user variable resulting in better use of user symbols.  It is\n-located in @file{tree-ssa-copyrename.c} and is described by\n-@code{pass_copyrename}.\n-\n-@item PHI node optimizations\n-\n-This pass recognizes forms of PHI inputs that can be represented as\n-conditional expressions and rewrites them into straight line code.\n-It is located in @file{tree-ssa-phiopt.cc} and is described by\n-@code{pass_phiopt}.\n-\n-@item May-alias optimization\n-\n-This pass performs a flow sensitive SSA-based points-to analysis.\n-The resulting may-alias, must-alias, and escape analysis information\n-is used to promote variables from in-memory addressable objects to\n-non-aliased variables that can be renamed into SSA form.  We also\n-update the @code{VDEF}/@code{VUSE} memory tags for non-renameable\n-aggregates so that we get fewer false kills.  The pass is located\n-in @file{tree-ssa-alias.cc} and is described by @code{pass_may_alias}.\n-\n-Interprocedural points-to information is located in\n-@file{tree-ssa-structalias.cc} and described by @code{pass_ipa_pta}.\n-\n-@item Profiling\n-\n-This pass instruments the function in order to collect runtime block\n-and value profiling data.  Such data may be fed back into the compiler\n-on a subsequent run so as to allow optimization based on expected\n-execution frequencies.  The pass is located in @file{tree-profile.cc} and\n-is described by @code{pass_ipa_tree_profile}.\n-\n-@item Static profile estimation\n-\n-This pass implements series of heuristics to guess propababilities\n-of branches.  The resulting predictions are turned into edge profile\n-by propagating branches across the control flow graphs.\n-The pass is located in @file{tree-profile.cc} and is described by\n-@code{pass_profile}.\n-\n-@item Lower complex arithmetic\n-\n-This pass rewrites complex arithmetic operations into their component\n-scalar arithmetic operations.  The pass is located in @file{tree-complex.cc}\n-and is described by @code{pass_lower_complex}.\n-\n-@item Scalar replacement of aggregates\n-\n-This pass rewrites suitable non-aliased local aggregate variables into\n-a set of scalar variables.  The resulting scalar variables are\n-rewritten into SSA form, which allows subsequent optimization passes\n-to do a significantly better job with them.  The pass is located in\n-@file{tree-sra.cc} and is described by @code{pass_sra}.\n-\n-@item Dead store elimination\n-\n-This pass eliminates stores to memory that are subsequently overwritten\n-by another store, without any intervening loads.  The pass is located\n-in @file{tree-ssa-dse.cc} and is described by @code{pass_dse}.\n-\n-@item Tail recursion elimination\n-\n-This pass transforms tail recursion into a loop.  It is located in\n-@file{tree-tailcall.cc} and is described by @code{pass_tail_recursion}.\n-\n-@item Forward store motion\n-\n-This pass sinks stores and assignments down the flowgraph closer to their\n-use point.  The pass is located in @file{tree-ssa-sink.cc} and is\n-described by @code{pass_sink_code}.\n-\n-@item Partial redundancy elimination\n-\n-This pass eliminates partially redundant computations, as well as\n-performing load motion.  The pass is located in @file{tree-ssa-pre.cc}\n-and is described by @code{pass_pre}.\n-\n-Just before partial redundancy elimination, if\n-@option{-funsafe-math-optimizations} is on, GCC tries to convert\n-divisions to multiplications by the reciprocal.  The pass is located\n-in @file{tree-ssa-math-opts.cc} and is described by\n-@code{pass_cse_reciprocal}.\n-\n-@item Full redundancy elimination\n-\n-This is a simpler form of PRE that only eliminates redundancies that\n-occur on all paths.  It is located in @file{tree-ssa-pre.cc} and\n-described by @code{pass_fre}.\n-\n-@item Loop optimization\n-\n-The main driver of the pass is placed in @file{tree-ssa-loop.cc}\n-and described by @code{pass_loop}.\n-\n-The optimizations performed by this pass are:\n-\n-Loop invariant motion.  This pass moves only invariants that\n-would be hard to handle on RTL level (function calls, operations that expand to\n-nontrivial sequences of insns).  With @option{-funswitch-loops} it also moves\n-operands of conditions that are invariant out of the loop, so that we can use\n-just trivial invariantness analysis in loop unswitching.  The pass also includes\n-store motion.  The pass is implemented in @file{tree-ssa-loop-im.cc}.\n-\n-Canonical induction variable creation.  This pass creates a simple counter\n-for number of iterations of the loop and replaces the exit condition of the\n-loop using it, in case when a complicated analysis is necessary to determine\n-the number of iterations.  Later optimizations then may determine the number\n-easily.  The pass is implemented in @file{tree-ssa-loop-ivcanon.cc}.\n-\n-Induction variable optimizations.  This pass performs standard induction\n-variable optimizations, including strength reduction, induction variable\n-merging and induction variable elimination.  The pass is implemented in\n-@file{tree-ssa-loop-ivopts.cc}.\n-\n-Loop unswitching.  This pass moves the conditional jumps that are invariant\n-out of the loops.  To achieve this, a duplicate of the loop is created for\n-each possible outcome of conditional jump(s).  The pass is implemented in\n-@file{tree-ssa-loop-unswitch.cc}.\n-\n-Loop splitting.  If a loop contains a conditional statement that is\n-always true for one part of the iteration space and false for the other\n-this pass splits the loop into two, one dealing with one side the other\n-only with the other, thereby removing one inner-loop conditional.  The\n-pass is implemented in @file{tree-ssa-loop-split.cc}.\n-\n-The optimizations also use various utility functions contained in\n-@file{tree-ssa-loop-manip.cc}, @file{cfgloop.cc}, @file{cfgloopanal.cc} and\n-@file{cfgloopmanip.cc}.\n-\n-Vectorization.  This pass transforms loops to operate on vector types\n-instead of scalar types.  Data parallelism across loop iterations is exploited\n-to group data elements from consecutive iterations into a vector and operate\n-on them in parallel.  Depending on available target support the loop is\n-conceptually unrolled by a factor @code{VF} (vectorization factor), which is\n-the number of elements operated upon in parallel in each iteration, and the\n-@code{VF} copies of each scalar operation are fused to form a vector operation.\n-Additional loop transformations such as peeling and versioning may take place\n-to align the number of iterations, and to align the memory accesses in the\n-loop.\n-The pass is implemented in @file{tree-vectorizer.cc} (the main driver),\n-@file{tree-vect-loop.cc} and @file{tree-vect-loop-manip.cc} (loop specific parts\n-and general loop utilities), @file{tree-vect-slp} (loop-aware SLP\n-functionality), @file{tree-vect-stmts.cc}, @file{tree-vect-data-refs.cc} and\n-@file{tree-vect-slp-patterns.cc} containing the SLP pattern matcher.\n-Analysis of data references is in @file{tree-data-ref.cc}.\n-\n-SLP Vectorization.  This pass performs vectorization of straight-line code. The\n-pass is implemented in @file{tree-vectorizer.cc} (the main driver),\n-@file{tree-vect-slp.cc}, @file{tree-vect-stmts.cc} and\n-@file{tree-vect-data-refs.cc}.\n-\n-Autoparallelization.  This pass splits the loop iteration space to run\n-into several threads.  The pass is implemented in @file{tree-parloops.cc}.\n-\n-Graphite is a loop transformation framework based on the polyhedral\n-model.  Graphite stands for Gimple Represented as Polyhedra.  The\n-internals of this infrastructure are documented in\n-@w{@uref{https://gcc.gnu.org/wiki/Graphite}}.  The passes working on\n-this representation are implemented in the various @file{graphite-*}\n-files.\n-\n-@item Tree level if-conversion for vectorizer\n-\n-This pass applies if-conversion to simple loops to help vectorizer.\n-We identify if convertible loops, if-convert statements and merge\n-basic blocks in one big block.  The idea is to present loop in such\n-form so that vectorizer can have one to one mapping between statements\n-and available vector operations.  This pass is located in\n-@file{tree-if-conv.cc} and is described by @code{pass_if_conversion}.\n-\n-@item Conditional constant propagation\n-\n-This pass relaxes a lattice of values in order to identify those\n-that must be constant even in the presence of conditional branches.\n-The pass is located in @file{tree-ssa-ccp.cc} and is described\n-by @code{pass_ccp}.\n-\n-A related pass that works on memory loads and stores, and not just\n-register values, is located in @file{tree-ssa-ccp.cc} and described by\n-@code{pass_store_ccp}.\n-\n-@item Conditional copy propagation\n-\n-This is similar to constant propagation but the lattice of values is\n-the ``copy-of'' relation.  It eliminates redundant copies from the\n-code.  The pass is located in @file{tree-ssa-copy.cc} and described by\n-@code{pass_copy_prop}.\n-\n-A related pass that works on memory copies, and not just register\n-copies, is located in @file{tree-ssa-copy.cc} and described by\n-@code{pass_store_copy_prop}.\n-\n-@item Value range propagation\n-\n-This transformation is similar to constant propagation but\n-instead of propagating single constant values, it propagates\n-known value ranges.  The implementation is based on Patterson's\n-range propagation algorithm (Accurate Static Branch Prediction by\n-Value Range Propagation, J. R. C. Patterson, PLDI '95).  In\n-contrast to Patterson's algorithm, this implementation does not\n-propagate branch probabilities nor it uses more than a single\n-range per SSA name. This means that the current implementation\n-cannot be used for branch prediction (though adapting it would\n-not be difficult).  The pass is located in @file{tree-vrp.cc} and is\n-described by @code{pass_vrp}.\n-\n-@item Folding built-in functions\n-\n-This pass simplifies built-in functions, as applicable, with constant\n-arguments or with inferable string lengths.  It is located in\n-@file{tree-ssa-ccp.cc} and is described by @code{pass_fold_builtins}.\n-\n-@item Split critical edges\n-\n-This pass identifies critical edges and inserts empty basic blocks\n-such that the edge is no longer critical.  The pass is located in\n-@file{tree-cfg.cc} and is described by @code{pass_split_crit_edges}.\n-\n-@item Control dependence dead code elimination\n-\n-This pass is a stronger form of dead code elimination that can\n-eliminate unnecessary control flow statements.   It is located\n-in @file{tree-ssa-dce.cc} and is described by @code{pass_cd_dce}.\n-\n-@item Tail call elimination\n-\n-This pass identifies function calls that may be rewritten into\n-jumps.  No code transformation is actually applied here, but the\n-data and control flow problem is solved.  The code transformation\n-requires target support, and so is delayed until RTL@.  In the\n-meantime @code{CALL_EXPR_TAILCALL} is set indicating the possibility.\n-The pass is located in @file{tree-tailcall.cc} and is described by\n-@code{pass_tail_calls}.  The RTL transformation is handled by\n-@code{fixup_tail_calls} in @file{calls.cc}.\n-\n-@item Warn for function return without value\n-\n-For non-void functions, this pass locates return statements that do\n-not specify a value and issues a warning.  Such a statement may have\n-been injected by falling off the end of the function.  This pass is\n-run last so that we have as much time as possible to prove that the\n-statement is not reachable.  It is located in @file{tree-cfg.cc} and\n-is described by @code{pass_warn_function_return}.\n-\n-@item Leave static single assignment form\n-\n-This pass rewrites the function such that it is in normal form.  At\n-the same time, we eliminate as many single-use temporaries as possible,\n-so the intermediate language is no longer GIMPLE, but GENERIC@.  The\n-pass is located in @file{tree-outof-ssa.cc} and is described by\n-@code{pass_del_ssa}.\n-\n-@item Merge PHI nodes that feed into one another\n-\n-This is part of the CFG cleanup passes.  It attempts to join PHI nodes\n-from a forwarder CFG block into another block with PHI nodes.  The\n-pass is located in @file{tree-cfgcleanup.cc} and is described by\n-@code{pass_merge_phi}.\n-\n-@item Return value optimization\n-\n-If a function always returns the same local variable, and that local\n-variable is an aggregate type, then the variable is replaced with the\n-return value for the function (i.e., the function's DECL_RESULT).  This\n-is equivalent to the C++ named return value optimization applied to\n-GIMPLE@.  The pass is located in @file{tree-nrv.cc} and is described by\n-@code{pass_nrv}.\n-\n-@item Return slot optimization\n-\n-If a function returns a memory object and is called as @code{var =\n-foo()}, this pass tries to change the call so that the address of\n-@code{var} is sent to the caller to avoid an extra memory copy.  This\n-pass is located in @code{tree-nrv.cc} and is described by\n-@code{pass_return_slot}.\n-\n-@item Optimize calls to @code{__builtin_object_size}\n-\n-This is a propagation pass similar to CCP that tries to remove calls\n-to @code{__builtin_object_size} when the size of the object can be\n-computed at compile-time.  This pass is located in\n-@file{tree-object-size.cc} and is described by\n-@code{pass_object_sizes}.\n-\n-@item Loop invariant motion\n-\n-This pass removes expensive loop-invariant computations out of loops.\n-The pass is located in @file{tree-ssa-loop.cc} and described by\n-@code{pass_lim}.\n-\n-@item Loop nest optimizations\n-\n-This is a family of loop transformations that works on loop nests.  It\n-includes loop interchange, scaling, skewing and reversal and they are\n-all geared to the optimization of data locality in array traversals\n-and the removal of dependencies that hamper optimizations such as loop\n-parallelization and vectorization.  The pass is located in\n-@file{tree-loop-linear.c} and described by\n-@code{pass_linear_transform}.\n-\n-@item Removal of empty loops\n-\n-This pass removes loops with no code in them.  The pass is located in\n-@file{tree-ssa-loop-ivcanon.cc} and described by\n-@code{pass_empty_loop}.\n-\n-@item Unrolling of small loops\n-\n-This pass completely unrolls loops with few iterations.  The pass\n-is located in @file{tree-ssa-loop-ivcanon.cc} and described by\n-@code{pass_complete_unroll}.\n-\n-@item Predictive commoning\n-\n-This pass makes the code reuse the computations from the previous\n-iterations of the loops, especially loads and stores to memory.\n-It does so by storing the values of these computations to a bank\n-of temporary variables that are rotated at the end of loop.  To avoid\n-the need for this rotation, the loop is then unrolled and the copies\n-of the loop body are rewritten to use the appropriate version of\n-the temporary variable.  This pass is located in @file{tree-predcom.cc}\n-and described by @code{pass_predcom}.\n-\n-@item Array prefetching\n-\n-This pass issues prefetch instructions for array references inside\n-loops.  The pass is located in @file{tree-ssa-loop-prefetch.cc} and\n-described by @code{pass_loop_prefetch}.\n-\n-@item Reassociation\n-\n-This pass rewrites arithmetic expressions to enable optimizations that\n-operate on them, like redundancy elimination and vectorization.  The\n-pass is located in @file{tree-ssa-reassoc.cc} and described by\n-@code{pass_reassoc}.\n-\n-@item Optimization of @code{stdarg} functions\n-\n-This pass tries to avoid the saving of register arguments into the\n-stack on entry to @code{stdarg} functions.  If the function doesn't\n-use any @code{va_start} macros, no registers need to be saved.  If\n-@code{va_start} macros are used, the @code{va_list} variables don't\n-escape the function, it is only necessary to save registers that will\n-be used in @code{va_arg} macros.  For instance, if @code{va_arg} is\n-only used with integral types in the function, floating point\n-registers don't need to be saved.  This pass is located in\n-@code{tree-stdarg.cc} and described by @code{pass_stdarg}.\n-\n-@end itemize\n-\n-@node RTL passes\n-@section RTL passes\n-\n-The following briefly describes the RTL generation and optimization\n-passes that are run after the Tree optimization passes.\n-\n-@itemize @bullet\n-@item RTL generation\n-\n-@c Avoiding overfull is tricky here.\n-The source files for RTL generation include\n-@file{stmt.cc},\n-@file{calls.cc},\n-@file{expr.cc},\n-@file{explow.cc},\n-@file{expmed.cc},\n-@file{function.cc},\n-@file{optabs.cc}\n-and @file{emit-rtl.cc}.\n-Also, the file\n-@file{insn-emit.cc}, generated from the machine description by the\n-program @code{genemit}, is used in this pass.  The header file\n-@file{expr.h} is used for communication within this pass.\n-\n-@findex genflags\n-@findex gencodes\n-The header files @file{insn-flags.h} and @file{insn-codes.h},\n-generated from the machine description by the programs @code{genflags}\n-and @code{gencodes}, tell this pass which standard names are available\n-for use and which patterns correspond to them.\n-\n-@item Generation of exception landing pads\n-\n-This pass generates the glue that handles communication between the\n-exception handling library routines and the exception handlers within\n-the function.  Entry points in the function that are invoked by the\n-exception handling library are called @dfn{landing pads}.  The code\n-for this pass is located in @file{except.cc}.\n-\n-@item Control flow graph cleanup\n-\n-This pass removes unreachable code, simplifies jumps to next, jumps to\n-jump, jumps across jumps, etc.  The pass is run multiple times.\n-For historical reasons, it is occasionally referred to as the ``jump\n-optimization pass''.  The bulk of the code for this pass is in\n-@file{cfgcleanup.cc}, and there are support routines in @file{cfgrtl.cc}\n-and @file{jump.cc}.\n-\n-@item Forward propagation of single-def values\n-\n-This pass attempts to remove redundant computation by substituting\n-variables that come from a single definition, and\n-seeing if the result can be simplified.  It performs copy propagation\n-and addressing mode selection.  The pass is run twice, with values\n-being propagated into loops only on the second run.  The code is\n-located in @file{fwprop.cc}.\n-\n-@item Common subexpression elimination\n-\n-This pass removes redundant computation within basic blocks, and\n-optimizes addressing modes based on cost.  The pass is run twice.\n-The code for this pass is located in @file{cse.cc}.\n-\n-@item Global common subexpression elimination\n-\n-This pass performs two\n-different types of GCSE  depending on whether you are optimizing for\n-size or not (LCM based GCSE tends to increase code size for a gain in\n-speed, while Morel-Renvoise based GCSE does not).\n-When optimizing for size, GCSE is done using Morel-Renvoise Partial\n-Redundancy Elimination, with the exception that it does not try to move\n-invariants out of loops---that is left to  the loop optimization pass.\n-If MR PRE GCSE is done, code hoisting (aka unification) is also done, as\n-well as load motion.\n-If you are optimizing for speed, LCM (lazy code motion) based GCSE is\n-done.  LCM is based on the work of Knoop, Ruthing, and Steffen.  LCM\n-based GCSE also does loop invariant code motion.  We also perform load\n-and store motion when optimizing for speed.\n-Regardless of which type of GCSE is used, the GCSE pass also performs\n-global constant and  copy propagation.\n-The source file for this pass is @file{gcse.cc}, and the LCM routines\n-are in @file{lcm.cc}.\n-\n-@item Loop optimization\n-\n-This pass performs several loop related optimizations.\n-The source files @file{cfgloopanal.cc} and @file{cfgloopmanip.cc} contain\n-generic loop analysis and manipulation code.  Initialization and finalization\n-of loop structures is handled by @file{loop-init.cc}.\n-A loop invariant motion pass is implemented in @file{loop-invariant.cc}.\n-Basic block level optimizations---unrolling, and peeling loops---\n-are implemented in @file{loop-unroll.cc}.\n-Replacing of the exit condition of loops by special machine-dependent\n-instructions is handled by @file{loop-doloop.cc}.\n-\n-@item Jump bypassing\n-\n-This pass is an aggressive form of GCSE that transforms the control\n-flow graph of a function by propagating constants into conditional\n-branch instructions.  The source file for this pass is @file{gcse.cc}.\n-\n-@item If conversion\n-\n-This pass attempts to replace conditional branches and surrounding\n-assignments with arithmetic, boolean value producing comparison\n-instructions, and conditional move instructions.  In the very last\n-invocation after reload/LRA, it will generate predicated instructions\n-when supported by the target.  The code is located in @file{ifcvt.cc}.\n-\n-@item Web construction\n-\n-This pass splits independent uses of each pseudo-register.  This can\n-improve effect of the other transformation, such as CSE or register\n-allocation.  The code for this pass is located in @file{web.cc}.\n-\n-@item Instruction combination\n-\n-This pass attempts to combine groups of two or three instructions that\n-are related by data flow into single instructions.  It combines the\n-RTL expressions for the instructions by substitution, simplifies the\n-result using algebra, and then attempts to match the result against\n-the machine description.  The code is located in @file{combine.cc}.\n-\n-@item Mode switching optimization\n-\n-This pass looks for instructions that require the processor to be in a\n-specific ``mode'' and minimizes the number of mode changes required to\n-satisfy all users.  What these modes are, and what they apply to are\n-completely target-specific.  The code for this pass is located in\n-@file{mode-switching.cc}.\n-\n-@cindex modulo scheduling\n-@cindex sms, swing, software pipelining\n-@item Modulo scheduling\n-\n-This pass looks at innermost loops and reorders their instructions\n-by overlapping different iterations.  Modulo scheduling is performed\n-immediately before instruction scheduling.  The code for this pass is\n-located in @file{modulo-sched.cc}.\n-\n-@item Instruction scheduling\n-\n-This pass looks for instructions whose output will not be available by\n-the time that it is used in subsequent instructions.  Memory loads and\n-floating point instructions often have this behavior on RISC machines.\n-It re-orders instructions within a basic block to try to separate the\n-definition and use of items that otherwise would cause pipeline\n-stalls.  This pass is performed twice, before and after register\n-allocation.  The code for this pass is located in @file{haifa-sched.cc},\n-@file{sched-deps.cc}, @file{sched-ebb.cc}, @file{sched-rgn.cc} and\n-@file{sched-vis.c}.\n-\n-@item Register allocation\n-\n-These passes make sure that all occurrences of pseudo registers are\n-eliminated, either by allocating them to a hard register, replacing\n-them by an equivalent expression (e.g.@: a constant) or by placing\n-them on the stack.  This is done in several subpasses:\n-\n-@itemize @bullet\n-@item\n-The integrated register allocator (@acronym{IRA}).  It is called\n-integrated because coalescing, register live range splitting, and hard\n-register preferencing are done on-the-fly during coloring.  It also\n-has better integration with the reload/LRA pass.  Pseudo-registers spilled\n-by the allocator or the reload/LRA have still a chance to get\n-hard-registers if the reload/LRA evicts some pseudo-registers from\n-hard-registers.  The allocator helps to choose better pseudos for\n-spilling based on their live ranges and to coalesce stack slots\n-allocated for the spilled pseudo-registers.  IRA is a regional\n-register allocator which is transformed into Chaitin-Briggs allocator\n-if there is one region.  By default, IRA chooses regions using\n-register pressure but the user can force it to use one region or\n-regions corresponding to all loops.\n-\n-Source files of the allocator are @file{ira.cc}, @file{ira-build.cc},\n-@file{ira-costs.cc}, @file{ira-conflicts.cc}, @file{ira-color.cc},\n-@file{ira-emit.cc}, @file{ira-lives}, plus header files @file{ira.h}\n-and @file{ira-int.h} used for the communication between the allocator\n-and the rest of the compiler and between the IRA files.\n-\n-@cindex reloading\n-@item\n-Reloading.  This pass renumbers pseudo registers with the hardware\n-registers numbers they were allocated.  Pseudo registers that did not\n-get hard registers are replaced with stack slots.  Then it finds\n-instructions that are invalid because a value has failed to end up in\n-a register, or has ended up in a register of the wrong kind.  It fixes\n-up these instructions by reloading the problematical values\n-temporarily into registers.  Additional instructions are generated to\n-do the copying.\n-\n-The reload pass also optionally eliminates the frame pointer and inserts\n-instructions to save and restore call-clobbered registers around calls.\n-\n-Source files are @file{reload.cc} and @file{reload1.cc}, plus the header\n-@file{reload.h} used for communication between them.\n-\n-@cindex Local Register Allocator (LRA)\n-@item\n-This pass is a modern replacement of the reload pass.  Source files\n-are @file{lra.cc}, @file{lra-assign.c}, @file{lra-coalesce.cc},\n-@file{lra-constraints.cc}, @file{lra-eliminations.cc},\n-@file{lra-lives.cc}, @file{lra-remat.cc}, @file{lra-spills.cc}, the\n-header @file{lra-int.h} used for communication between them, and the\n-header @file{lra.h} used for communication between LRA and the rest of\n-compiler.\n-\n-Unlike the reload pass, intermediate LRA decisions are reflected in\n-RTL as much as possible.  This reduces the number of target-dependent\n-macros and hooks, leaving instruction constraints as the primary\n-source of control.\n-\n-LRA is run on targets for which TARGET_LRA_P returns true.\n-@end itemize\n-\n-@item Basic block reordering\n-\n-This pass implements profile guided code positioning.  If profile\n-information is not available, various types of static analysis are\n-performed to make the predictions normally coming from the profile\n-feedback (IE execution frequency, branch probability, etc).  It is\n-implemented in the file @file{bb-reorder.cc}, and the various\n-prediction routines are in @file{predict.cc}.\n-\n-@item Variable tracking\n-\n-This pass computes where the variables are stored at each\n-position in code and generates notes describing the variable locations\n-to RTL code.  The location lists are then generated according to these\n-notes to debug information if the debugging information format supports\n-location lists.  The code is located in @file{var-tracking.cc}.\n-\n-@item Delayed branch scheduling\n-\n-This optional pass attempts to find instructions that can go into the\n-delay slots of other instructions, usually jumps and calls.  The code\n-for this pass is located in @file{reorg.cc}.\n-\n-@item Branch shortening\n-\n-On many RISC machines, branch instructions have a limited range.\n-Thus, longer sequences of instructions must be used for long branches.\n-In this pass, the compiler figures out what how far each instruction\n-will be from each other instruction, and therefore whether the usual\n-instructions, or the longer sequences, must be used for each branch.\n-The code for this pass is located in @file{final.cc}.\n-\n-@item Register-to-stack conversion\n-\n-Conversion from usage of some hard registers to usage of a register\n-stack may be done at this point.  Currently, this is supported only\n-for the floating-point registers of the Intel 80387 coprocessor.  The\n-code for this pass is located in @file{reg-stack.cc}.\n-\n-@item Final\n-\n-This pass outputs the assembler code for the function.  The source files\n-are @file{final.cc} plus @file{insn-output.cc}; the latter is generated\n-automatically from the machine description by the tool @file{genoutput}.\n-The header file @file{conditions.h} is used for communication between\n-these files.\n-\n-@item Debugging information output\n-\n-This is run after final because it must output the stack slot offsets\n-for pseudo registers that did not get hard registers.  Source files\n-are @file{dwarfout.c} for\n-DWARF symbol table format, files @file{dwarf2out.cc} and @file{dwarf2asm.cc}\n-for DWARF2 symbol table format, and @file{vmsdbgout.cc} for VMS debug\n-symbol table format.\n-\n-@end itemize\n-\n-@node Optimization info\n-@section Optimization info\n-@include optinfo.texi"}, {"sha": "6d1a5fa7607254b4b8f973f7e40b29c0153d7930", "filename": "gcc/doc/plugins.texi", "status": "removed", "additions": 0, "deletions": 562, "changes": 562, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fplugins.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fplugins.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fplugins.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,562 +0,0 @@\n-@c Copyright (C) 2009-2022 Free Software Foundation, Inc.\n-@c Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@node Plugins\n-@chapter Plugins\n-@cindex Plugins\n-\n-GCC plugins are loadable modules that provide extra features to the\n-compiler.  Like GCC itself they can be distributed in source and\n-binary forms.\n-\n-GCC plugins provide developers with a rich subset of\n-the GCC API to allow them to extend GCC as they see fit.\n-Whether it is writing an additional optimization pass,\n-transforming code, or analyzing information, plugins\n-can be quite useful.\n-\n-@menu\n-* Plugins loading::      How can we load plugins.\n-* Plugin API::           The APIs for plugins.\n-* Plugins pass::         How a plugin interact with the pass manager.\n-* Plugins GC::           How a plugin Interact with GCC Garbage Collector.\n-* Plugins description::  Giving information about a plugin itself.\n-* Plugins attr::         Registering custom attributes or pragmas.\n-* Plugins recording::    Recording information about pass execution.\n-* Plugins gate::         Controlling which passes are being run.\n-* Plugins tracking::     Keeping track of available passes.\n-* Plugins building::     How can we build a plugin.\n-@end menu\n-\n-@node Plugins loading\n-@section Loading Plugins\n-\n-Plugins are supported on platforms that support @option{-ldl\n--rdynamic} as well as Windows/MinGW. They are loaded by the compiler\n-using @code{dlopen} or equivalent and invoked at pre-determined\n-locations in the compilation process.\n-\n-Plugins are loaded with\n-\n-@option{-fplugin=/path/to/@var{name}.@var{ext}} @option{-fplugin-arg-@var{name}-@var{key1}[=@var{value1}]}\n-\n-Where @var{name} is the plugin name and @var{ext} is the platform-specific\n-dynamic library extension. It should be @code{dll} on Windows/MinGW,\n-@code{dylib} on Darwin/Mac OS X, and @code{so} on all other platforms.\n-The plugin arguments are parsed by GCC and passed to respective\n-plugins as key-value pairs. Multiple plugins can be invoked by\n-specifying multiple @option{-fplugin} arguments.\n-\n-A plugin can be simply given by its short name (no dots or\n-slashes). When simply passing @option{-fplugin=@var{name}}, the plugin is\n-loaded from the @file{plugin} directory, so @option{-fplugin=@var{name}} is\n-the same as @option{-fplugin=`gcc -print-file-name=plugin`/@var{name}.@var{ext}},\n-using backquote shell syntax to query the @file{plugin} directory.\n-\n-@node Plugin API\n-@section Plugin API\n-\n-Plugins are activated by the compiler at specific events as defined in\n-@file{gcc-plugin.h}.  For each event of interest, the plugin should\n-call @code{register_callback} specifying the name of the event and\n-address of the callback function that will handle that event.\n-\n-The header @file{gcc-plugin.h} must be the first gcc header to be included.\n-\n-@subsection Plugin license check\n-\n-Every plugin should define the global symbol @code{plugin_is_GPL_compatible}\n-to assert that it has been licensed under a GPL-compatible license.\n-If this symbol does not exist, the compiler will emit a fatal error\n-and exit with the error message:\n-\n-@smallexample\n-fatal error: plugin @var{name} is not licensed under a GPL-compatible license\n-@var{name}: undefined symbol: plugin_is_GPL_compatible\n-compilation terminated\n-@end smallexample\n-\n-The declared type of the symbol should be int, to match a forward declaration\n-in @file{gcc-plugin.h} that suppresses C++ mangling.  It does not need to be in\n-any allocated section, though.  The compiler merely asserts that\n-the symbol exists in the global scope.  Something like this is enough:\n-\n-@smallexample\n-int plugin_is_GPL_compatible;\n-@end smallexample\n-\n-@subsection Plugin initialization\n-\n-Every plugin should export a function called @code{plugin_init} that\n-is called right after the plugin is loaded. This function is\n-responsible for registering all the callbacks required by the plugin\n-and do any other required initialization.\n-\n-This function is called from @code{compile_file} right before invoking\n-the parser.  The arguments to @code{plugin_init} are:\n-\n-@itemize @bullet\n-@item @code{plugin_info}: Plugin invocation information.\n-@item @code{version}: GCC version.\n-@end itemize\n-\n-The @code{plugin_info} struct is defined as follows:\n-\n-@smallexample\n-struct plugin_name_args\n-@{\n-  char *base_name;              /* Short name of the plugin\n-                                   (filename without .so suffix). */\n-  const char *full_name;        /* Path to the plugin as specified with\n-                                   -fplugin=. */\n-  int argc;                     /* Number of arguments specified with\n-                                   -fplugin-arg-.... */\n-  struct plugin_argument *argv; /* Array of ARGC key-value pairs. */\n-  const char *version;          /* Version string provided by plugin. */\n-  const char *help;             /* Help string provided by plugin. */\n-@}\n-@end smallexample\n-\n-If initialization fails, @code{plugin_init} must return a non-zero\n-value.  Otherwise, it should return 0.\n-\n-The version of the GCC compiler loading the plugin is described by the\n-following structure:\n-\n-@smallexample\n-struct plugin_gcc_version\n-@{\n-  const char *basever;\n-  const char *datestamp;\n-  const char *devphase;\n-  const char *revision;\n-  const char *configuration_arguments;\n-@};\n-@end smallexample\n-\n-The function @code{plugin_default_version_check} takes two pointers to\n-such structure and compare them field by field. It can be used by the\n-plugin's @code{plugin_init} function.\n-\n-The version of GCC used to compile the plugin can be found in the symbol\n-@code{gcc_version} defined in the header @file{plugin-version.h}. The\n-recommended version check to perform looks like\n-\n-@smallexample\n-#include \"plugin-version.h\"\n-...\n-\n-int\n-plugin_init (struct plugin_name_args *plugin_info,\n-             struct plugin_gcc_version *version)\n-@{\n-  if (!plugin_default_version_check (version, &gcc_version))\n-    return 1;\n-\n-@}\n-@end smallexample\n-\n-but you can also check the individual fields if you want a less strict check.\n-\n-@subsection Plugin callbacks\n-\n-Callback functions have the following prototype:\n-\n-@smallexample\n-/* The prototype for a plugin callback function.\n-     gcc_data  - event-specific data provided by GCC\n-     user_data - plugin-specific data provided by the plug-in.  */\n-typedef void (*plugin_callback_func)(void *gcc_data, void *user_data);\n-@end smallexample\n-\n-Callbacks can be invoked at the following pre-determined events:\n-\n-\n-@smallexample\n-enum plugin_event\n-@{\n-  PLUGIN_START_PARSE_FUNCTION,  /* Called before parsing the body of a function. */\n-  PLUGIN_FINISH_PARSE_FUNCTION, /* After finishing parsing a function. */\n-  PLUGIN_PASS_MANAGER_SETUP,    /* To hook into pass manager.  */\n-  PLUGIN_FINISH_TYPE,           /* After finishing parsing a type.  */\n-  PLUGIN_FINISH_DECL,           /* After finishing parsing a declaration. */\n-  PLUGIN_FINISH_UNIT,           /* Useful for summary processing.  */\n-  PLUGIN_PRE_GENERICIZE,        /* Allows to see low level AST in C and C++ frontends.  */\n-  PLUGIN_FINISH,                /* Called before GCC exits.  */\n-  PLUGIN_INFO,                  /* Information about the plugin. */\n-  PLUGIN_GGC_START,             /* Called at start of GCC Garbage Collection. */\n-  PLUGIN_GGC_MARKING,           /* Extend the GGC marking. */\n-  PLUGIN_GGC_END,               /* Called at end of GGC. */\n-  PLUGIN_REGISTER_GGC_ROOTS,    /* Register an extra GGC root table. */\n-  PLUGIN_ATTRIBUTES,            /* Called during attribute registration */\n-  PLUGIN_START_UNIT,            /* Called before processing a translation unit.  */\n-  PLUGIN_PRAGMAS,               /* Called during pragma registration. */\n-  /* Called before first pass from all_passes.  */\n-  PLUGIN_ALL_PASSES_START,\n-  /* Called after last pass from all_passes.  */\n-  PLUGIN_ALL_PASSES_END,\n-  /* Called before first ipa pass.  */\n-  PLUGIN_ALL_IPA_PASSES_START,\n-  /* Called after last ipa pass.  */\n-  PLUGIN_ALL_IPA_PASSES_END,\n-  /* Allows to override pass gate decision for current_pass.  */\n-  PLUGIN_OVERRIDE_GATE,\n-  /* Called before executing a pass.  */\n-  PLUGIN_PASS_EXECUTION,\n-  /* Called before executing subpasses of a GIMPLE_PASS in\n-     execute_ipa_pass_list.  */\n-  PLUGIN_EARLY_GIMPLE_PASSES_START,\n-  /* Called after executing subpasses of a GIMPLE_PASS in\n-     execute_ipa_pass_list.  */\n-  PLUGIN_EARLY_GIMPLE_PASSES_END,\n-  /* Called when a pass is first instantiated.  */\n-  PLUGIN_NEW_PASS,\n-/* Called when a file is #include-d or given via the #line directive.\n-   This could happen many times.  The event data is the included file path,\n-   as a const char* pointer.  */\n-  PLUGIN_INCLUDE_FILE,\n-\n-  /* Called when -fanalyzer starts. The event data is an\n-     ana::plugin_analyzer_init_iface *.  */\n-  PLUGIN_ANALYZER_INIT,\n-\n-  PLUGIN_EVENT_FIRST_DYNAMIC    /* Dummy event used for indexing callback\n-                                   array.  */\n-@};\n-@end smallexample\n-\n-In addition, plugins can also look up the enumerator of a named event,\n-and / or generate new events dynamically, by calling the function\n-@code{get_named_event_id}.\n-\n-To register a callback, the plugin calls @code{register_callback} with\n-the arguments:\n-\n-@itemize\n-@item @code{char *name}: Plugin name.\n-@item @code{int event}: The event code.\n-@item @code{plugin_callback_func callback}: The function that handles @code{event}.\n-@item @code{void *user_data}: Pointer to plugin-specific data.\n-@end itemize\n-\n-For the @i{PLUGIN_PASS_MANAGER_SETUP}, @i{PLUGIN_INFO}, and\n-@i{PLUGIN_REGISTER_GGC_ROOTS} pseudo-events the @code{callback} should be null,\n-and the @code{user_data} is specific.\n-\n-When the @i{PLUGIN_PRAGMAS} event is triggered (with a null pointer as\n-data from GCC), plugins may register their own pragmas.  Notice that\n-pragmas are not available from @file{lto1}, so plugins used with\n-@code{-flto} option to GCC during link-time optimization cannot use\n-pragmas and do not even see functions like @code{c_register_pragma} or\n-@code{pragma_lex}.\n-\n-The @i{PLUGIN_INCLUDE_FILE} event, with a @code{const char*} file path as\n-GCC data, is triggered for processing of @code{#include} or\n-@code{#line} directives.\n-\n-The @i{PLUGIN_FINISH} event is the last time that plugins can call GCC\n-functions, notably emit diagnostics with @code{warning}, @code{error}\n-etc.\n-\n-\n-@node Plugins pass\n-@section Interacting with the pass manager\n-\n-There needs to be a way to add/reorder/remove passes dynamically. This\n-is useful for both analysis plugins (plugging in after a certain pass\n-such as CFG or an IPA pass) and optimization plugins.\n-\n-Basic support for inserting new passes or replacing existing passes is\n-provided. A plugin registers a new pass with GCC by calling\n-@code{register_callback} with the @code{PLUGIN_PASS_MANAGER_SETUP}\n-event and a pointer to a @code{struct register_pass_info} object defined as follows\n-\n-@smallexample\n-enum pass_positioning_ops\n-@{\n-  PASS_POS_INSERT_AFTER,  // Insert after the reference pass.\n-  PASS_POS_INSERT_BEFORE, // Insert before the reference pass.\n-  PASS_POS_REPLACE        // Replace the reference pass.\n-@};\n-\n-struct register_pass_info\n-@{\n-  struct opt_pass *pass;            /* New pass provided by the plugin.  */\n-  const char *reference_pass_name;  /* Name of the reference pass for hooking\n-                                       up the new pass.  */\n-  int ref_pass_instance_number;     /* Insert the pass at the specified\n-                                       instance number of the reference pass.  */\n-                                    /* Do it for every instance if it is 0.  */\n-  enum pass_positioning_ops pos_op; /* how to insert the new pass.  */\n-@};\n-\n-\n-/* Sample plugin code that registers a new pass.  */\n-int\n-plugin_init (struct plugin_name_args *plugin_info,\n-             struct plugin_gcc_version *version)\n-@{\n-  struct register_pass_info pass_info;\n-\n-  ...\n-\n-  /* Code to fill in the pass_info object with new pass information.  */\n-\n-  ...\n-\n-  /* Register the new pass.  */\n-  register_callback (plugin_info->base_name, PLUGIN_PASS_MANAGER_SETUP, NULL, &pass_info);\n-\n-  ...\n-@}\n-@end smallexample\n-\n-\n-@node Plugins GC\n-@section Interacting with the GCC Garbage Collector\n-\n-Some plugins may want to be informed when GGC (the GCC Garbage\n-Collector) is running. They can register callbacks for the\n-@code{PLUGIN_GGC_START} and @code{PLUGIN_GGC_END} events (for which\n-the callback is called with a null @code{gcc_data}) to be notified of\n-the start or end of the GCC garbage collection.\n-\n-Some plugins may need to have GGC mark additional data. This can be\n-done by registering a callback (called with a null @code{gcc_data})\n-for the @code{PLUGIN_GGC_MARKING} event. Such callbacks can call the\n-@code{ggc_set_mark} routine, preferably through the @code{ggc_mark} macro\n-(and conversely, these routines should usually not be used in plugins\n-outside of the @code{PLUGIN_GGC_MARKING} event).  Plugins that wish to hold\n-weak references to gc data may also use this event to drop weak references when\n-the object is about to be collected.  The @code{ggc_marked_p} function can be\n-used to tell if an object is marked, or is about to  be collected.  The\n-@code{gt_clear_cache} overloads which some types define may also be of use in\n-managing weak references.\n-\n-Some plugins may need to add extra GGC root tables, e.g.@: to handle their own\n-@code{GTY}-ed data. This can be done with the @code{PLUGIN_REGISTER_GGC_ROOTS}\n-pseudo-event with a null callback and the extra root table (of type @code{struct\n-ggc_root_tab*}) as @code{user_data}.  Running the\n- @code{gengtype -p @var{source-dir} @var{file-list} @var{plugin*.c} ...}\n-utility generates these extra root tables.\n-\n-You should understand the details of memory management inside GCC\n-before using @code{PLUGIN_GGC_MARKING} or @code{PLUGIN_REGISTER_GGC_ROOTS}.\n-\n-\n-@node Plugins description\n-@section Giving information about a plugin\n-\n-A plugin should give some information to the user about itself. This\n-uses the following structure:\n-\n-@smallexample\n-struct plugin_info\n-@{\n-  const char *version;\n-  const char *help;\n-@};\n-@end smallexample\n-\n-Such a structure is passed as the @code{user_data} by the plugin's\n-init routine using @code{register_callback} with the\n-@code{PLUGIN_INFO} pseudo-event and a null callback.\n-\n-@node Plugins attr\n-@section Registering custom attributes or pragmas\n-\n-For analysis (or other) purposes it is useful to be able to add custom\n-attributes or pragmas.\n-\n-The @code{PLUGIN_ATTRIBUTES} callback is called during attribute\n-registration. Use the @code{register_attribute} function to register\n-custom attributes.\n-\n-@smallexample\n-/* Attribute handler callback */\n-static tree\n-handle_user_attribute (tree *node, tree name, tree args,\n-                       int flags, bool *no_add_attrs)\n-@{\n-  return NULL_TREE;\n-@}\n-\n-/* Attribute definition */\n-static struct attribute_spec user_attr =\n-  @{ \"user\", 1, 1, false,  false, false, false, handle_user_attribute, NULL @};\n-\n-/* Plugin callback called during attribute registration.\n-Registered with register_callback (plugin_name, PLUGIN_ATTRIBUTES, register_attributes, NULL)\n-*/\n-static void\n-register_attributes (void *event_data, void *data)\n-@{\n-  warning (0, G_(\"Callback to register attributes\"));\n-  register_attribute (&user_attr);\n-@}\n-\n-@end smallexample\n-\n-\n-The @i{PLUGIN_PRAGMAS} callback is called once during pragmas\n-registration. Use the @code{c_register_pragma},\n-@code{c_register_pragma_with_data},\n-@code{c_register_pragma_with_expansion},\n-@code{c_register_pragma_with_expansion_and_data} functions to register\n-custom pragmas and their handlers (which often want to call\n-@code{pragma_lex}) from @file{c-family/c-pragma.h}.\n-\n-@smallexample\n-/* Plugin callback called during pragmas registration. Registered with\n-     register_callback (plugin_name, PLUGIN_PRAGMAS,\n-                        register_my_pragma, NULL);\n-*/\n-static void\n-register_my_pragma (void *event_data, void *data)\n-@{\n-  warning (0, G_(\"Callback to register pragmas\"));\n-  c_register_pragma (\"GCCPLUGIN\", \"sayhello\", handle_pragma_sayhello);\n-@}\n-@end smallexample\n-\n-It is suggested to pass @code{\"GCCPLUGIN\"} (or a short name identifying\n-your plugin) as the ``space'' argument of your pragma.\n-\n-Pragmas registered with @code{c_register_pragma_with_expansion} or\n-@code{c_register_pragma_with_expansion_and_data} support\n-preprocessor expansions. For example:\n-\n-@smallexample\n-#define NUMBER 10\n-#pragma GCCPLUGIN foothreshold (NUMBER)\n-@end smallexample\n-\n-@node Plugins recording\n-@section Recording information about pass execution\n-\n-The event PLUGIN_PASS_EXECUTION passes the pointer to the executed pass\n-(the same as current_pass) as @code{gcc_data} to the callback.  You can also\n-inspect cfun to find out about which function this pass is executed for.\n-Note that this event will only be invoked if the gate check (if\n-applicable, modified by PLUGIN_OVERRIDE_GATE) succeeds.\n-You can use other hooks, like @code{PLUGIN_ALL_PASSES_START},\n-@code{PLUGIN_ALL_PASSES_END}, @code{PLUGIN_ALL_IPA_PASSES_START},\n-@code{PLUGIN_ALL_IPA_PASSES_END}, @code{PLUGIN_EARLY_GIMPLE_PASSES_START},\n-and/or @code{PLUGIN_EARLY_GIMPLE_PASSES_END} to manipulate global state\n-in your plugin(s) in order to get context for the pass execution.\n-\n-\n-@node Plugins gate\n-@section Controlling which passes are being run\n-\n-After the original gate function for a pass is called, its result\n-- the gate status - is stored as an integer.\n-Then the event @code{PLUGIN_OVERRIDE_GATE} is invoked, with a pointer\n-to the gate status in the @code{gcc_data} parameter to the callback function.\n-A nonzero value of the gate status means that the pass is to be executed.\n-You can both read and write the gate status via the passed pointer.\n-\n-\n-@node Plugins tracking\n-@section Keeping track of available passes\n-\n-When your plugin is loaded, you can inspect the various\n-pass lists to determine what passes are available.  However, other\n-plugins might add new passes.  Also, future changes to GCC might cause\n-generic passes to be added after plugin loading.\n-When a pass is first added to one of the pass lists, the event\n-@code{PLUGIN_NEW_PASS} is invoked, with the callback parameter\n-@code{gcc_data} pointing to the new pass.\n-\n-\n-@node Plugins building\n-@section Building GCC plugins\n-\n-If plugins are enabled, GCC installs the headers needed to build a\n-plugin (somewhere in the installation tree, e.g.@: under\n-@file{/usr/local}).  In particular a @file{plugin/include} directory\n-is installed, containing all the header files needed to build plugins.\n-\n-On most systems, you can query this @code{plugin} directory by\n-invoking @command{gcc -print-file-name=plugin} (replace if needed\n-@command{gcc} with the appropriate program path).\n-\n-Inside plugins, this @code{plugin} directory name can be queried by\n-calling @code{default_plugin_dir_name ()}.\n-\n-Plugins may know, when they are compiled, the GCC version for which\n-@file{plugin-version.h} is provided.  The constant macros\n-@code{GCCPLUGIN_VERSION_MAJOR}, @code{GCCPLUGIN_VERSION_MINOR},\n-@code{GCCPLUGIN_VERSION_PATCHLEVEL}, @code{GCCPLUGIN_VERSION} are\n-integer numbers, so a plugin could ensure it is built for GCC 4.7 with \n-@smallexample\n-#if GCCPLUGIN_VERSION != 4007\n-#error this GCC plugin is for GCC 4.7\n-#endif\n-@end smallexample\n-\n-The following GNU Makefile excerpt shows how to build a simple plugin:\n-\n-@smallexample\n-HOST_GCC=g++\n-TARGET_GCC=gcc\n-PLUGIN_SOURCE_FILES= plugin1.c plugin2.cc\n-GCCPLUGINS_DIR:= $(shell $(TARGET_GCC) -print-file-name=plugin)\n-CXXFLAGS+= -I$(GCCPLUGINS_DIR)/include -fPIC -fno-rtti -O2\n-\n-plugin.so: $(PLUGIN_SOURCE_FILES)\n-   $(HOST_GCC) -shared $(CXXFLAGS) $^ -o $@@\n-@end smallexample\n-\n-A single source file plugin may be built with @code{g++ -I`gcc\n--print-file-name=plugin`/include -fPIC -shared -fno-rtti -O2 plugin.cc -o\n-plugin.so}, using backquote shell syntax to query the @file{plugin}\n-directory.\n-\n-Plugin support on Windows/MinGW has a number of limitations and\n-additional requirements. When building a plugin on Windows we have to\n-link an import library for the corresponding backend executable, for\n-example, @file{cc1.exe}, @file{cc1plus.exe}, etc., in order to gain\n-access to the symbols provided by GCC. This means that on Windows a\n-plugin is language-specific, for example, for C, C++, etc. If you wish\n-to use your plugin with multiple languages, then you will need to\n-build multiple plugin libraries and either instruct your users on how\n-to load the correct version or provide a compiler wrapper that does\n-this automatically.\n-\n-Additionally, on Windows the plugin library has to export the\n-@code{plugin_is_GPL_compatible} and @code{plugin_init} symbols. If you\n-do not wish to modify the source code of your plugin, then you can use\n-the @option{-Wl,--export-all-symbols} option or provide a suitable DEF\n-file. Alternatively, you can export just these two symbols by decorating\n-them with @code{__declspec(dllexport)}, for example:\n-\n-@smallexample\n-#ifdef _WIN32\n-__declspec(dllexport)\n-#endif\n-int plugin_is_GPL_compatible;\n-\n-#ifdef _WIN32\n-__declspec(dllexport)\n-#endif\n-int plugin_init (plugin_name_args *, plugin_gcc_version *)\n-@end smallexample\n-\n-The import libraries are installed into the @code{plugin} directory\n-and their names are derived by appending the @code{.a} extension to\n-the backend executable names, for example, @file{cc1.exe.a},\n-@file{cc1plus.exe.a}, etc. The following command line shows how to\n-build the single source file plugin on Windows to be used with the C++\n-compiler:\n-\n-@smallexample\n-g++ -I`gcc -print-file-name=plugin`/include -shared -Wl,--export-all-symbols \\\n--o plugin.dll plugin.cc `gcc -print-file-name=plugin`/cc1plus.exe.a\n-@end smallexample\n-\n-When a plugin needs to use @command{gengtype}, be sure that both\n-@file{gengtype} and @file{gtype.state} have the same version as the\n-GCC for which the plugin is built."}, {"sha": "d60bb02aabf264792a54631cb5567ca0d30c7c6d", "filename": "gcc/doc/poly-int.texi", "status": "removed", "additions": 0, "deletions": 1060, "changes": 1060, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fpoly-int.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fpoly-int.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fpoly-int.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,1060 +0,0 @@\n-@node poly_int\n-@chapter Sizes and offsets as runtime invariants\n-@cindex polynomial integers\n-@findex poly_int\n-\n-GCC allows the size of a hardware register to be a runtime invariant\n-rather than a compile-time constant.  This in turn means that various\n-sizes and offsets must also be runtime invariants rather than\n-compile-time constants, such as:\n-\n-@itemize @bullet\n-@item\n-the size of a general @code{machine_mode} (@pxref{Machine Modes});\n-\n-@item\n-the size of a spill slot;\n-\n-@item\n-the offset of something within a stack frame;\n-\n-@item\n-the number of elements in a vector;\n-\n-@item\n-the size and offset of a @code{mem} rtx (@pxref{Regs and Memory}); and\n-\n-@item\n-the byte offset in a @code{subreg} rtx (@pxref{Regs and Memory}).\n-@end itemize\n-\n-The motivating example is the Arm SVE ISA, whose vector registers can be\n-any multiple of 128 bits between 128 and 2048 inclusive.  The compiler\n-normally produces code that works for all SVE register sizes, with the\n-actual size only being known at runtime.\n-\n-GCC's main representation of such runtime invariants is the\n-@code{poly_int} class.  This chapter describes what @code{poly_int}\n-does, lists the available operations, and gives some general\n-usage guidelines.\n-\n-@menu\n-* Overview of @code{poly_int}::\n-* Consequences of using @code{poly_int}::\n-* Comparisons involving @code{poly_int}::\n-* Arithmetic on @code{poly_int}s::\n-* Alignment of @code{poly_int}s::\n-* Computing bounds on @code{poly_int}s::\n-* Converting @code{poly_int}s::\n-* Miscellaneous @code{poly_int} routines::\n-* Guidelines for using @code{poly_int}::\n-@end menu\n-\n-@node Overview of @code{poly_int}\n-@section Overview of @code{poly_int}\n-\n-@cindex @code{poly_int}, runtime value\n-We define indeterminates @var{x1}, @dots{}, @var{xn} whose values are\n-only known at runtime and use polynomials of the form:\n-\n-@smallexample\n-@var{c0} + @var{c1} * @var{x1} + @dots{} + @var{cn} * @var{xn}\n-@end smallexample\n-\n-to represent a size or offset whose value might depend on some\n-of these indeterminates.  The coefficients @var{c0}, @dots{}, @var{cn}\n-are always known at compile time, with the @var{c0} term being the\n-``constant'' part that does not depend on any runtime value.\n-\n-GCC uses the @code{poly_int} class to represent these coefficients.\n-The class has two template parameters: the first specifies the number of\n-coefficients (@var{n} + 1) and the second specifies the type of the\n-coefficients.  For example, @samp{poly_int<2, unsigned short>} represents\n-a polynomial with two coefficients (and thus one indeterminate), with each\n-coefficient having type @code{unsigned short}.  When @var{n} is 0,\n-the class degenerates to a single compile-time constant @var{c0}.\n-\n-@cindex @code{poly_int}, template parameters\n-@findex NUM_POLY_INT_COEFFS\n-The number of coefficients needed for compilation is a fixed\n-property of each target and is specified by the configuration macro\n-@code{NUM_POLY_INT_COEFFS}.  The default value is 1, since most targets\n-do not have such runtime invariants.  Targets that need a different\n-value should @code{#define} the macro in their @file{@var{cpu}-modes.def}\n-file.  @xref{Back End}.\n-\n-@cindex @code{poly_int}, invariant range\n-@code{poly_int} makes the simplifying requirement that each indeterminate\n-must be a nonnegative integer.  An indeterminate value of 0 should usually\n-represent the minimum possible runtime value, with @var{c0} specifying\n-the value in that case.\n-\n-For example, when targetting the Arm SVE ISA, the single indeterminate\n-represents the number of 128-bit blocks in a vector @emph{beyond the minimum\n-length of 128 bits}.  Thus the number of 64-bit doublewords in a vector\n-is 2 + 2 * @var{x1}.  If an aggregate has a single SVE vector and 16\n-additional bytes, its total size is 32 + 16 * @var{x1} bytes.\n-\n-The header file @file{poly-int-types.h} provides typedefs for the\n-most common forms of @code{poly_int}, all having\n-@code{NUM_POLY_INT_COEFFS} coefficients:\n-\n-@cindex @code{poly_int}, main typedefs\n-@table @code\n-@item poly_uint16\n-a @samp{poly_int} with @code{unsigned short} coefficients.\n-\n-@item poly_int64\n-a @samp{poly_int} with @code{HOST_WIDE_INT} coefficients.\n-\n-@item poly_uint64\n-a @samp{poly_int} with @code{unsigned HOST_WIDE_INT} coefficients.\n-\n-@item poly_offset_int\n-a @samp{poly_int} with @code{offset_int} coefficients.\n-\n-@item poly_wide_int\n-a @samp{poly_int} with @code{wide_int} coefficients.\n-\n-@item poly_widest_int\n-a @samp{poly_int} with @code{widest_int} coefficients.\n-@end table\n-\n-Since the main purpose of @code{poly_int} is to represent sizes and\n-offsets, the last two typedefs are only rarely used.\n-\n-@node Consequences of using @code{poly_int}\n-@section Consequences of using @code{poly_int}\n-\n-The two main consequences of using polynomial sizes and offsets are that:\n-\n-@itemize\n-@item\n-there is no total ordering between the values at compile time, and\n-\n-@item\n-some operations might yield results that cannot be expressed as a\n-@code{poly_int}.\n-@end itemize\n-\n-For example, if @var{x} is a runtime invariant, we cannot tell at\n-compile time whether:\n-\n-@smallexample\n-3 + 4@var{x} <= 1 + 5@var{x}\n-@end smallexample\n-\n-since the condition is false when @var{x} <= 1 and true when @var{x} >= 2.\n-\n-Similarly, @code{poly_int} cannot represent the result of:\n-\n-@smallexample\n-(3 + 4@var{x}) * (1 + 5@var{x})\n-@end smallexample\n-\n-since it cannot (and in practice does not need to) store powers greater\n-than one.  It also cannot represent the result of:\n-\n-@smallexample\n-(3 + 4@var{x}) / (1 + 5@var{x})\n-@end smallexample\n-\n-The following sections describe how we deal with these restrictions.\n-\n-@cindex @code{poly_int}, use in target-independent code\n-As described earlier, a @code{poly_int<1, @var{T}>} has no indeterminates\n-and so degenerates to a compile-time constant of type @var{T}.  It would\n-be possible in that case to do all normal arithmetic on the @var{T},\n-and to compare the @var{T} using the normal C++ operators.  We deliberately\n-prevent target-independent code from doing this, since the compiler needs\n-to support other @code{poly_int<@var{n}, @var{T}>} as well, regardless of\n-the current target's @code{NUM_POLY_INT_COEFFS}.\n-\n-@cindex @code{poly_int}, use in target-specific code\n-However, it would be very artificial to force target-specific code\n-to follow these restrictions if the target has no runtime indeterminates.\n-There is therefore an implicit conversion from @code{poly_int<1, @var{T}>}\n-to @var{T} when compiling target-specific translation units.\n-\n-@node Comparisons involving @code{poly_int}\n-@section Comparisons involving @code{poly_int}\n-\n-In general we need to compare sizes and offsets in two situations:\n-those in which the values need to be ordered, and those in which\n-the values can be unordered.  More loosely, the distinction is often\n-between values that have a definite link (usually because they refer to the\n-same underlying register or memory location) and values that have\n-no definite link.  An example of the former is the relationship between\n-the inner and outer sizes of a subreg, where we must know at compile time\n-whether the subreg is paradoxical, partial, or complete.  An example of\n-the latter is alias analysis: we might want to check whether two\n-arbitrary memory references overlap.\n-\n-Referring back to the examples in the previous section, it makes sense\n-to ask whether a memory reference of size @samp{3 + 4@var{x}} overlaps\n-one of size @samp{1 + 5@var{x}}, but it does not make sense to have a\n-subreg in which the outer mode has @samp{3 + 4@var{x}} bytes and the\n-inner mode has @samp{1 + 5@var{x}} bytes (or vice versa).  Such subregs\n-are always invalid and should trigger an internal compiler error\n-if formed.\n-\n-The underlying operators are the same in both cases, but the distinction\n-affects how they are used.\n-\n-@menu\n-* Comparison functions for @code{poly_int}::\n-* Properties of the @code{poly_int} comparisons::\n-* Comparing potentially-unordered @code{poly_int}s::\n-* Comparing ordered @code{poly_int}s::\n-* Checking for a @code{poly_int} marker value::\n-* Range checks on @code{poly_int}s::\n-* Sorting @code{poly_int}s::\n-@end menu\n-\n-@node Comparison functions for @code{poly_int}\n-@subsection Comparison functions for @code{poly_int}\n-\n-@code{poly_int} provides the following routines for checking whether\n-a particular condition ``may be'' (might be) true:\n-\n-@example\n-maybe_lt maybe_le maybe_eq maybe_ge maybe_gt\n-                  maybe_ne\n-@end example\n-\n-The functions have their natural meaning:\n-\n-@table @samp\n-@item maybe_lt(@var{a}, @var{b})\n-Return true if @var{a} might be less than @var{b}.\n-\n-@item maybe_le(@var{a}, @var{b})\n-Return true if @var{a} might be less than or equal to @var{b}.\n-\n-@item maybe_eq(@var{a}, @var{b})\n-Return true if @var{a} might be equal to @var{b}.\n-\n-@item maybe_ne(@var{a}, @var{b})\n-Return true if @var{a} might not be equal to @var{b}.\n-\n-@item maybe_ge(@var{a}, @var{b})\n-Return true if @var{a} might be greater than or equal to @var{b}.\n-\n-@item maybe_gt(@var{a}, @var{b})\n-Return true if @var{a} might be greater than @var{b}.\n-@end table\n-\n-For readability, @code{poly_int} also provides ``known'' inverses of these\n-functions:\n-\n-@example\n-known_lt (@var{a}, @var{b}) == !maybe_ge (@var{a}, @var{b})\n-known_le (@var{a}, @var{b}) == !maybe_gt (@var{a}, @var{b})\n-known_eq (@var{a}, @var{b}) == !maybe_ne (@var{a}, @var{b})\n-known_ge (@var{a}, @var{b}) == !maybe_lt (@var{a}, @var{b})\n-known_gt (@var{a}, @var{b}) == !maybe_le (@var{a}, @var{b})\n-known_ne (@var{a}, @var{b}) == !maybe_eq (@var{a}, @var{b})\n-@end example\n-\n-@node Properties of the @code{poly_int} comparisons\n-@subsection Properties of the @code{poly_int} comparisons\n-\n-All ``maybe'' relations except @code{maybe_ne} are transitive, so for example:\n-\n-@smallexample\n-maybe_lt (@var{a}, @var{b}) && maybe_lt (@var{b}, @var{c}) implies maybe_lt (@var{a}, @var{c})\n-@end smallexample\n-\n-for all @var{a}, @var{b} and @var{c}.  @code{maybe_lt}, @code{maybe_gt}\n-and @code{maybe_ne} are irreflexive, so for example:\n-\n-@smallexample\n-!maybe_lt (@var{a}, @var{a})\n-@end smallexample\n-\n-is true for all @var{a}.  @code{maybe_le}, @code{maybe_eq} and @code{maybe_ge}\n-are reflexive, so for example:\n-\n-@smallexample\n-maybe_le (@var{a}, @var{a})\n-@end smallexample\n-\n-is true for all @var{a}.  @code{maybe_eq} and @code{maybe_ne} are symmetric, so:\n-\n-@smallexample\n-maybe_eq (@var{a}, @var{b}) == maybe_eq (@var{b}, @var{a})\n-maybe_ne (@var{a}, @var{b}) == maybe_ne (@var{b}, @var{a})\n-@end smallexample\n-\n-for all @var{a} and @var{b}.  In addition:\n-\n-@smallexample\n-maybe_le (@var{a}, @var{b}) == maybe_lt (@var{a}, @var{b}) || maybe_eq (@var{a}, @var{b})\n-maybe_ge (@var{a}, @var{b}) == maybe_gt (@var{a}, @var{b}) || maybe_eq (@var{a}, @var{b})\n-maybe_lt (@var{a}, @var{b}) == maybe_gt (@var{b}, @var{a})\n-maybe_le (@var{a}, @var{b}) == maybe_ge (@var{b}, @var{a})\n-@end smallexample\n-\n-However:\n-\n-@smallexample\n-maybe_le (@var{a}, @var{b}) && maybe_le (@var{b}, @var{a}) does not imply !maybe_ne (@var{a}, @var{b}) [== known_eq (@var{a}, @var{b})]\n-maybe_ge (@var{a}, @var{b}) && maybe_ge (@var{b}, @var{a}) does not imply !maybe_ne (@var{a}, @var{b}) [== known_eq (@var{a}, @var{b})]\n-@end smallexample\n-\n-One example is again @samp{@var{a} == 3 + 4@var{x}}\n-and @samp{@var{b} == 1 + 5@var{x}}, where @samp{maybe_le (@var{a}, @var{b})},\n-@samp{maybe_ge (@var{a}, @var{b})} and @samp{maybe_ne (@var{a}, @var{b})}\n-all hold.  @code{maybe_le} and @code{maybe_ge} are therefore not antisymetric\n-and do not form a partial order.\n-\n-From the above, it follows that:\n-\n-@itemize @bullet\n-@item\n-All ``known'' relations except @code{known_ne} are transitive.\n-\n-@item\n-@code{known_lt}, @code{known_ne} and @code{known_gt} are irreflexive.\n-\n-@item\n-@code{known_le}, @code{known_eq} and @code{known_ge} are reflexive.\n-@end itemize\n-\n-Also:\n-\n-@smallexample\n-known_lt (@var{a}, @var{b}) == known_gt (@var{b}, @var{a})\n-known_le (@var{a}, @var{b}) == known_ge (@var{b}, @var{a})\n-known_lt (@var{a}, @var{b}) implies !known_lt (@var{b}, @var{a})  [asymmetry]\n-known_gt (@var{a}, @var{b}) implies !known_gt (@var{b}, @var{a})\n-known_le (@var{a}, @var{b}) && known_le (@var{b}, @var{a}) == known_eq (@var{a}, @var{b}) [== !maybe_ne (@var{a}, @var{b})]\n-known_ge (@var{a}, @var{b}) && known_ge (@var{b}, @var{a}) == known_eq (@var{a}, @var{b}) [== !maybe_ne (@var{a}, @var{b})]\n-@end smallexample\n-\n-@code{known_le} and @code{known_ge} are therefore antisymmetric and are\n-partial orders.  However:\n-\n-@smallexample\n-known_le (@var{a}, @var{b}) does not imply known_lt (@var{a}, @var{b}) || known_eq (@var{a}, @var{b})\n-known_ge (@var{a}, @var{b}) does not imply known_gt (@var{a}, @var{b}) || known_eq (@var{a}, @var{b})\n-@end smallexample\n-\n-For example, @samp{known_le (4, 4 + 4@var{x})} holds because the runtime\n-indeterminate @var{x} is a nonnegative integer, but neither\n-@code{known_lt (4, 4 + 4@var{x})} nor @code{known_eq (4, 4 + 4@var{x})} hold.\n-\n-@node Comparing potentially-unordered @code{poly_int}s\n-@subsection Comparing potentially-unordered @code{poly_int}s\n-\n-In cases where there is no definite link between two @code{poly_int}s,\n-we can usually make a conservatively-correct assumption.  For example,\n-the conservative assumption for alias analysis is that two references\n-@emph{might} alias.\n-\n-One way of checking whether [@var{begin1}, @var{end1}) might overlap\n-[@var{begin2}, @var{end2}) using the @code{poly_int} comparisons is:\n-\n-@smallexample\n-maybe_gt (@var{end1}, @var{begin2}) && maybe_gt (@var{end2}, @var{begin1})\n-@end smallexample\n-\n-and another (equivalent) way is:\n-\n-@smallexample\n-!(known_le (@var{end1}, @var{begin2}) || known_le (@var{end2}, @var{begin1}))\n-@end smallexample\n-\n-However, in this particular example, it is better to use the range helper\n-functions instead.  @xref{Range checks on @code{poly_int}s}.\n-\n-@node Comparing ordered @code{poly_int}s\n-@subsection Comparing ordered @code{poly_int}s\n-\n-In cases where there is a definite link between two @code{poly_int}s,\n-such as the outer and inner sizes of subregs, we usually require the sizes\n-to be ordered by the @code{known_le} partial order.  @code{poly_int} provides\n-the following utility functions for ordered values:\n-\n-@table @samp\n-@item ordered_p (@var{a}, @var{b})\n-Return true if @var{a} and @var{b} are ordered by the @code{known_le}\n-partial order.\n-\n-@item ordered_min (@var{a}, @var{b})\n-Assert that @var{a} and @var{b} are ordered by @code{known_le} and return the\n-minimum of the two.  When using this function, please add a comment explaining\n-why the values are known to be ordered.\n-\n-@item ordered_max (@var{a}, @var{b})\n-Assert that @var{a} and @var{b} are ordered by @code{known_le} and return the\n-maximum of the two.  When using this function, please add a comment explaining\n-why the values are known to be ordered.\n-@end table\n-\n-For example, if a subreg has an outer mode of size @var{outer} and an\n-inner mode of size @var{inner}:\n-\n-@itemize @bullet\n-@item\n-the subreg is complete if known_eq (@var{inner}, @var{outer})\n-\n-@item\n-otherwise, the subreg is paradoxical if known_le (@var{inner}, @var{outer})\n-\n-@item\n-otherwise, the subreg is partial if known_le (@var{outer}, @var{inner})\n-\n-@item\n-otherwise, the subreg is ill-formed\n-@end itemize\n-\n-Thus the subreg is only valid if\n-@samp{ordered_p (@var{outer}, @var{inner})} is true.  If this condition\n-is already known to be true then:\n-\n-@itemize @bullet\n-@item\n-the subreg is complete if known_eq (@var{inner}, @var{outer})\n-\n-@item\n-the subreg is paradoxical if maybe_lt (@var{inner}, @var{outer})\n-\n-@item\n-the subreg is partial if maybe_lt (@var{outer}, @var{inner})\n-@end itemize\n-\n-with the three conditions being mutually exclusive.\n-\n-Code that checks whether a subreg is valid would therefore generally\n-check whether @code{ordered_p} holds (in addition to whatever other\n-checks are required for subreg validity).  Code that is dealing\n-with existing subregs can assert that @code{ordered_p} holds\n-and use either of the classifications above.\n-\n-@node Checking for a @code{poly_int} marker value\n-@subsection Checking for a @code{poly_int} marker value\n-\n-It is sometimes useful to have a special ``marker value'' that is not\n-meant to be taken literally.  For example, some code uses a size\n-of -1 to represent an unknown size, rather than having to carry around\n-a separate boolean to say whether the size is known.\n-\n-The best way of checking whether something is a marker value is\n-@code{known_eq}.  Conversely the best way of checking whether something\n-is @emph{not} a marker value is @code{maybe_ne}.\n-\n-Thus in the size example just mentioned, @samp{known_eq (size, -1)} would\n-check for an unknown size and @samp{maybe_ne (size, -1)} would check for a\n-known size.\n-\n-@node Range checks on @code{poly_int}s\n-@subsection Range checks on @code{poly_int}s\n-\n-As well as the core comparisons\n-(@pxref{Comparison functions for @code{poly_int}}), @code{poly_int} provides\n-utilities for various kinds of range check.  In each case the range\n-is represented by a start position and a size rather than a start\n-position and an end position; this is because the former is used\n-much more often than the latter in GCC@.  Also, the sizes can be\n--1 (or all ones for unsigned sizes) to indicate a range with a known\n-start position but an unknown size.  All other sizes must be nonnegative.\n-A range of size 0 does not contain anything or overlap anything.\n-\n-@table @samp\n-@item known_size_p (@var{size})\n-Return true if @var{size} represents a known range size, false if it\n-is -1 or all ones (for signed and unsigned types respectively).\n-\n-@item ranges_maybe_overlap_p (@var{pos1}, @var{size1}, @var{pos2}, @var{size2})\n-Return true if the range described by @var{pos1} and @var{size1} @emph{might}\n-overlap the range described by @var{pos2} and @var{size2} (in other words,\n-return true if we cannot prove that the ranges are disjoint).\n-\n-@item ranges_known_overlap_p (@var{pos1}, @var{size1}, @var{pos2}, @var{size2})\n-Return true if the range described by @var{pos1} and @var{size1} is known to\n-overlap the range described by @var{pos2} and @var{size2}.\n-\n-@item known_subrange_p (@var{pos1}, @var{size1}, @var{pos2}, @var{size2})\n-Return true if the range described by @var{pos1} and @var{size1} is known to\n-be contained in the range described by @var{pos2} and @var{size2}.\n-\n-@item maybe_in_range_p (@var{value}, @var{pos}, @var{size})\n-Return true if @var{value} @emph{might} be in the range described by\n-@var{pos} and @var{size} (in other words, return true if we cannot\n-prove that @var{value} is outside that range).\n-\n-@item known_in_range_p (@var{value}, @var{pos}, @var{size})\n-Return true if @var{value} is known to be in the range described\n-by @var{pos} and @var{size}.\n-\n-@item endpoint_representable_p (@var{pos}, @var{size})\n-Return true if the range described by @var{pos} and @var{size} is\n-open-ended or if the endpoint (@var{pos} + @var{size}) is representable\n-in the same type as @var{pos} and @var{size}.  The function returns false\n-if adding @var{size} to @var{pos} makes conceptual sense but could overflow.\n-@end table\n-\n-There is also a @code{poly_int} version of the @code{IN_RANGE_P} macro:\n-\n-@table @samp\n-@item coeffs_in_range_p (@var{x}, @var{lower}, @var{upper})\n-Return true if every coefficient of @var{x} is in the inclusive range\n-[@var{lower}, @var{upper}].  This function can be useful when testing\n-whether an operation would cause the values of coefficients to\n-overflow.\n-\n-Note that the function does not indicate whether @var{x} itself is in the\n-given range.  @var{x} can be either a constant or a @code{poly_int}.\n-@end table\n-\n-@node Sorting @code{poly_int}s\n-@subsection Sorting @code{poly_int}s\n-\n-@code{poly_int} provides the following routine for sorting:\n-\n-@table @samp\n-@item compare_sizes_for_sort (@var{a}, @var{b})\n-Compare @var{a} and @var{b} in reverse lexicographical order (that is,\n-compare the highest-indexed coefficients first).  This can be useful when\n-sorting data structures, since it has the effect of separating constant\n-and non-constant values.  If all values are nonnegative, the constant\n-values come first.\n-\n-Note that the values do not necessarily end up in numerical order.\n-For example, @samp{1 + 1@var{x}} would come after @samp{100} in the sort order,\n-but may well be less than @samp{100} at run time.\n-@end table\n-\n-@node Arithmetic on @code{poly_int}s\n-@section Arithmetic on @code{poly_int}s\n-\n-Addition, subtraction, negation and bit inversion all work normally for\n-@code{poly_int}s.  Multiplication by a constant multiplier and left\n-shifting by a constant shift amount also work normally.  General\n-multiplication of two @code{poly_int}s is not supported and is not\n-useful in practice.\n-\n-Other operations are only conditionally supported: the operation\n-might succeed or might fail, depending on the inputs.\n-\n-This section describes both types of operation.\n-\n-@menu\n-* Using @code{poly_int} with C++ arithmetic operators::\n-* @code{wi} arithmetic on @code{poly_int}s::\n-* Division of @code{poly_int}s::\n-* Other @code{poly_int} arithmetic::\n-@end menu\n-\n-@node Using @code{poly_int} with C++ arithmetic operators\n-@subsection Using @code{poly_int} with C++ arithmetic operators\n-\n-The following C++ expressions are supported, where @var{p1} and @var{p2}\n-are @code{poly_int}s and where @var{c1} and @var{c2} are scalars:\n-\n-@smallexample\n--@var{p1}\n-~@var{p1}\n-\n-@var{p1} + @var{p2}\n-@var{p1} + @var{c2}\n-@var{c1} + @var{p2}\n-\n-@var{p1} - @var{p2}\n-@var{p1} - @var{c2}\n-@var{c1} - @var{p2}\n-\n-@var{c1} * @var{p2}\n-@var{p1} * @var{c2}\n-\n-@var{p1} << @var{c2}\n-\n-@var{p1} += @var{p2}\n-@var{p1} += @var{c2}\n-\n-@var{p1} -= @var{p2}\n-@var{p1} -= @var{c2}\n-\n-@var{p1} *= @var{c2}\n-@var{p1} <<= @var{c2}\n-@end smallexample\n-\n-These arithmetic operations handle integer ranks in a similar way\n-to C++.  The main difference is that every coefficient narrower than\n-@code{HOST_WIDE_INT} promotes to @code{HOST_WIDE_INT}, whereas in\n-C++ everything narrower than @code{int} promotes to @code{int}.\n-For example:\n-\n-@smallexample\n-poly_uint16     + int          -> poly_int64\n-unsigned int    + poly_uint16  -> poly_int64\n-poly_int64      + int          -> poly_int64\n-poly_int32      + poly_uint64  -> poly_uint64\n-uint64          + poly_int64   -> poly_uint64\n-poly_offset_int + int32        -> poly_offset_int\n-offset_int      + poly_uint16  -> poly_offset_int\n-@end smallexample\n-\n-In the first two examples, both coefficients are narrower than\n-@code{HOST_WIDE_INT}, so the result has coefficients of type\n-@code{HOST_WIDE_INT}.  In the other examples, the coefficient\n-with the highest rank ``wins''.\n-\n-If one of the operands is @code{wide_int} or @code{poly_wide_int},\n-the rules are the same as for @code{wide_int} arithmetic.\n-\n-@node @code{wi} arithmetic on @code{poly_int}s\n-@subsection @code{wi} arithmetic on @code{poly_int}s\n-\n-As well as the C++ operators, @code{poly_int} supports the following\n-@code{wi} routines:\n-\n-@smallexample\n-wi::neg (@var{p1}, &@var{overflow})\n-\n-wi::add (@var{p1}, @var{p2})\n-wi::add (@var{p1}, @var{c2})\n-wi::add (@var{c1}, @var{p1})\n-wi::add (@var{p1}, @var{p2}, @var{sign}, &@var{overflow})\n-\n-wi::sub (@var{p1}, @var{p2})\n-wi::sub (@var{p1}, @var{c2})\n-wi::sub (@var{c1}, @var{p1})\n-wi::sub (@var{p1}, @var{p2}, @var{sign}, &@var{overflow})\n-\n-wi::mul (@var{p1}, @var{c2})\n-wi::mul (@var{c1}, @var{p1})\n-wi::mul (@var{p1}, @var{c2}, @var{sign}, &@var{overflow})\n-\n-wi::lshift (@var{p1}, @var{c2})\n-@end smallexample\n-\n-These routines just check whether overflow occurs on any individual\n-coefficient; it is not possible to know at compile time whether the\n-final runtime value would overflow.\n-\n-@node Division of @code{poly_int}s\n-@subsection Division of @code{poly_int}s\n-\n-Division of @code{poly_int}s is possible for certain inputs.  The functions\n-for division return true if the operation is possible and in most cases\n-return the results by pointer.  The routines are:\n-\n-@table @samp\n-@item multiple_p (@var{a}, @var{b})\n-@itemx multiple_p (@var{a}, @var{b}, &@var{quotient})\n-Return true if @var{a} is an exact multiple of @var{b}, storing the result\n-in @var{quotient} if so.  There are overloads for various combinations\n-of polynomial and constant @var{a}, @var{b} and @var{quotient}.\n-\n-@item constant_multiple_p (@var{a}, @var{b})\n-@itemx constant_multiple_p (@var{a}, @var{b}, &@var{quotient})\n-Like @code{multiple_p}, but also test whether the multiple is a\n-compile-time constant.\n-\n-@item can_div_trunc_p (@var{a}, @var{b}, &@var{quotient})\n-@itemx can_div_trunc_p (@var{a}, @var{b}, &@var{quotient}, &@var{remainder})\n-Return true if we can calculate @samp{trunc (@var{a} / @var{b})} at compile\n-time, storing the result in @var{quotient} and @var{remainder} if so.\n-\n-@item can_div_away_from_zero_p (@var{a}, @var{b}, &@var{quotient})\n-Return true if we can calculate @samp{@var{a} / @var{b}} at compile time,\n-rounding away from zero.  Store the result in @var{quotient} if so.\n-\n-Note that this is true if and only if @code{can_div_trunc_p} is true.\n-The only difference is in the rounding of the result.\n-@end table\n-\n-There is also an asserting form of division:\n-\n-@table @samp\n-@item exact_div (@var{a}, @var{b})\n-Assert that @var{a} is a multiple of @var{b} and return\n-@samp{@var{a} / @var{b}}.  The result is a @code{poly_int} if @var{a}\n-is a @code{poly_int}.\n-@end table\n-\n-@node Other @code{poly_int} arithmetic\n-@subsection Other @code{poly_int} arithmetic\n-\n-There are tentative routines for other operations besides division:\n-\n-@table @samp\n-@item can_ior_p (@var{a}, @var{b}, &@var{result})\n-Return true if we can calculate @samp{@var{a} | @var{b}} at compile time,\n-storing the result in @var{result} if so.\n-@end table\n-\n-Also, ANDs with a value @samp{(1 << @var{y}) - 1} or its inverse can be\n-treated as alignment operations.  @xref{Alignment of @code{poly_int}s}.\n-\n-In addition, the following miscellaneous routines are available:\n-\n-@table @samp\n-@item coeff_gcd (@var{a})\n-Return the greatest common divisor of all nonzero coefficients in\n-@var{a}, or zero if @var{a} is known to be zero.\n-\n-@item common_multiple (@var{a}, @var{b})\n-Return a value that is a multiple of both @var{a} and @var{b}, where\n-one value is a @code{poly_int} and the other is a scalar.  The result\n-will be the least common multiple for some indeterminate values but\n-not necessarily for all.\n-\n-@item force_common_multiple (@var{a}, @var{b})\n-Return a value that is a multiple of both @code{poly_int} @var{a} and\n-@code{poly_int} @var{b}, asserting that such a value exists.  The\n-result will be the least common multiple for some indeterminate values\n-but not necessarily for all.\n-\n-When using this routine, please add a comment explaining why the\n-assertion is known to hold.\n-@end table\n-\n-Please add any other operations that you find to be useful.\n-\n-@node Alignment of @code{poly_int}s\n-@section Alignment of @code{poly_int}s\n-\n-@code{poly_int} provides various routines for aligning values and for querying\n-misalignments.  In each case the alignment must be a power of 2.\n-\n-@table @samp\n-@item can_align_p (@var{value}, @var{align})\n-Return true if we can align @var{value} up or down to the nearest multiple\n-of @var{align} at compile time.  The answer is the same for both directions.\n-\n-@item can_align_down (@var{value}, @var{align}, &@var{aligned})\n-Return true if @code{can_align_p}; if so, set @var{aligned} to the greatest\n-aligned value that is less than or equal to @var{value}.\n-\n-@item can_align_up (@var{value}, @var{align}, &@var{aligned})\n-Return true if @code{can_align_p}; if so, set @var{aligned} to the lowest\n-aligned value that is greater than or equal to @var{value}.\n-\n-@item known_equal_after_align_down (@var{a}, @var{b}, @var{align})\n-Return true if we can align @var{a} and @var{b} down to the nearest\n-@var{align} boundary at compile time and if the two results are equal.\n-\n-@item known_equal_after_align_up (@var{a}, @var{b}, @var{align})\n-Return true if we can align @var{a} and @var{b} up to the nearest\n-@var{align} boundary at compile time and if the two results are equal.\n-\n-@item aligned_lower_bound (@var{value}, @var{align})\n-Return a result that is no greater than @var{value} and that is aligned\n-to @var{align}.  The result will the closest aligned value for some\n-indeterminate values but not necessarily for all.\n-\n-For example, suppose we are allocating an object of @var{size} bytes\n-in a downward-growing stack whose current limit is given by @var{limit}.\n-If the object requires @var{align} bytes of alignment, the new stack\n-limit is given by:\n-\n-@smallexample\n-aligned_lower_bound (@var{limit} - @var{size}, @var{align})\n-@end smallexample\n-\n-@item aligned_upper_bound (@var{value}, @var{align})\n-Likewise return a result that is no less than @var{value} and that is\n-aligned to @var{align}.  This is the routine that would be used for\n-upward-growing stacks in the scenario just described.\n-\n-@item known_misalignment (@var{value}, @var{align}, &@var{misalign})\n-Return true if we can calculate the misalignment of @var{value}\n-with respect to @var{align} at compile time, storing the result in\n-@var{misalign} if so.\n-\n-@item known_alignment (@var{value})\n-Return the minimum alignment that @var{value} is known to have\n-(in other words, the largest alignment that can be guaranteed\n-whatever the values of the indeterminates turn out to be).\n-Return 0 if @var{value} is known to be 0.\n-\n-@item force_align_down (@var{value}, @var{align})\n-Assert that @var{value} can be aligned down to @var{align} at compile\n-time and return the result.  When using this routine, please add a\n-comment explaining why the assertion is known to hold.\n-\n-@item force_align_up (@var{value}, @var{align})\n-Likewise, but aligning up.\n-\n-@item force_align_down_and_div (@var{value}, @var{align})\n-Divide the result of @code{force_align_down} by @var{align}.  Again,\n-please add a comment explaining why the assertion in @code{force_align_down}\n-is known to hold.\n-\n-@item force_align_up_and_div (@var{value}, @var{align})\n-Likewise for @code{force_align_up}.\n-\n-@item force_get_misalignment (@var{value}, @var{align})\n-Assert that we can calculate the misalignment of @var{value} with\n-respect to @var{align} at compile time and return the misalignment.\n-When using this function, please add a comment explaining why\n-the assertion is known to hold.\n-@end table\n-\n-@node Computing bounds on @code{poly_int}s\n-@section Computing bounds on @code{poly_int}s\n-\n-@code{poly_int} also provides routines for calculating lower and upper bounds:\n-\n-@table @samp\n-@item constant_lower_bound (@var{a})\n-Assert that @var{a} is nonnegative and return the smallest value it can have.\n-\n-@item constant_lower_bound_with_limit (@var{a}, @var{b})\n-Return the least value @var{a} can have, given that the context in\n-which @var{a} appears guarantees that the answer is no less than @var{b}.\n-In other words, the caller is asserting that @var{a} is greater than or\n-equal to @var{b} even if @samp{known_ge (@var{a}, @var{b})} doesn't hold.\n-\n-@item constant_upper_bound_with_limit (@var{a}, @var{b})\n-Return the greatest value @var{a} can have, given that the context in\n-which @var{a} appears guarantees that the answer is no greater than @var{b}.\n-In other words, the caller is asserting that @var{a} is less than or equal\n-to @var{b} even if @samp{known_le (@var{a}, @var{b})} doesn't hold.\n-\n-@item lower_bound (@var{a}, @var{b})\n-Return a value that is always less than or equal to both @var{a} and @var{b}.\n-It will be the greatest such value for some indeterminate values\n-but necessarily for all.\n-\n-@item upper_bound (@var{a}, @var{b})\n-Return a value that is always greater than or equal to both @var{a} and\n-@var{b}.  It will be the least such value for some indeterminate values\n-but necessarily for all.\n-@end table\n-\n-@node Converting @code{poly_int}s\n-@section Converting @code{poly_int}s\n-\n-A @code{poly_int<@var{n}, @var{T}>} can be constructed from up to\n-@var{n} individual @var{T} coefficients, with the remaining coefficients\n-being implicitly zero.  In particular, this means that every\n-@code{poly_int<@var{n}, @var{T}>} can be constructed from a single\n-scalar @var{T}, or something compatible with @var{T}.\n-\n-Also, a @code{poly_int<@var{n}, @var{T}>} can be constructed from\n-a @code{poly_int<@var{n}, @var{U}>} if @var{T} can be constructed\n-from @var{U}.\n-\n-The following functions provide other forms of conversion,\n-or test whether such a conversion would succeed.\n-\n-@table @samp\n-@item @var{value}.is_constant ()\n-Return true if @code{poly_int} @var{value} is a compile-time constant.\n-\n-@item @var{value}.is_constant (&@var{c1})\n-Return true if @code{poly_int} @var{value} is a compile-time constant,\n-storing it in @var{c1} if so.  @var{c1} must be able to hold all\n-constant values of @var{value} without loss of precision.\n-\n-@item @var{value}.to_constant ()\n-Assert that @var{value} is a compile-time constant and return its value.\n-When using this function, please add a comment explaining why the\n-condition is known to hold (for example, because an earlier phase\n-of analysis rejected non-constants).\n-\n-@item @var{value}.to_shwi (&@var{p2})\n-Return true if @samp{poly_int<@var{N}, @var{T}>} @var{value} can be\n-represented without loss of precision as a\n-@samp{poly_int<@var{N}, @code{HOST_WIDE_INT}>}, storing it in that\n-form in @var{p2} if so.\n-\n-@item @var{value}.to_uhwi (&@var{p2})\n-Return true if @samp{poly_int<@var{N}, @var{T}>} @var{value} can be\n-represented without loss of precision as a\n-@samp{poly_int<@var{N}, @code{unsigned HOST_WIDE_INT}>}, storing it in that\n-form in @var{p2} if so.\n-\n-@item @var{value}.force_shwi ()\n-Forcibly convert each coefficient of @samp{poly_int<@var{N}, @var{T}>}\n-@var{value} to @code{HOST_WIDE_INT}, truncating any that are out of range.\n-Return the result as a @samp{poly_int<@var{N}, @code{HOST_WIDE_INT}>}.\n-\n-@item @var{value}.force_uhwi ()\n-Forcibly convert each coefficient of @samp{poly_int<@var{N}, @var{T}>}\n-@var{value} to @code{unsigned HOST_WIDE_INT}, truncating any that are\n-out of range.  Return the result as a\n-@samp{poly_int<@var{N}, @code{unsigned HOST_WIDE_INT}>}.\n-\n-@item wi::shwi (@var{value}, @var{precision})\n-Return a @code{poly_int} with the same value as @var{value}, but with\n-the coefficients converted from @code{HOST_WIDE_INT} to @code{wide_int}.\n-@var{precision} specifies the precision of the @code{wide_int} cofficients;\n-if this is wider than a @code{HOST_WIDE_INT}, the coefficients of\n-@var{value} will be sign-extended to fit.\n-\n-@item wi::uhwi (@var{value}, @var{precision})\n-Like @code{wi::shwi}, except that @var{value} has coefficients of\n-type @code{unsigned HOST_WIDE_INT}.  If @var{precision} is wider than\n-a @code{HOST_WIDE_INT}, the coefficients of @var{value} will be\n-zero-extended to fit.\n-\n-@item wi::sext (@var{value}, @var{precision})\n-Return a @code{poly_int} of the same type as @var{value}, sign-extending\n-every coefficient from the low @var{precision} bits.  This in effect\n-applies @code{wi::sext} to each coefficient individually.\n-\n-@item wi::zext (@var{value}, @var{precision})\n-Like @code{wi::sext}, but for zero extension.\n-\n-@item poly_wide_int::from (@var{value}, @var{precision}, @var{sign})\n-Convert @var{value} to a @code{poly_wide_int} in which each coefficient\n-has @var{precision} bits.  Extend the coefficients according to\n-@var{sign} if the coefficients have fewer bits.\n-\n-@item poly_offset_int::from (@var{value}, @var{sign})\n-Convert @var{value} to a @code{poly_offset_int}, extending its coefficients\n-according to @var{sign} if they have fewer bits than @code{offset_int}.\n-\n-@item poly_widest_int::from (@var{value}, @var{sign})\n-Convert @var{value} to a @code{poly_widest_int}, extending its coefficients\n-according to @var{sign} if they have fewer bits than @code{widest_int}.\n-@end table\n-\n-@node Miscellaneous @code{poly_int} routines\n-@section Miscellaneous @code{poly_int} routines\n-\n-@table @samp\n-@item print_dec (@var{value}, @var{file}, @var{sign})\n-@itemx print_dec (@var{value}, @var{file})\n-Print @var{value} to @var{file} as a decimal value, interpreting\n-the coefficients according to @var{sign}.  The final argument is\n-optional if @var{value} has an inherent sign; for example,\n-@code{poly_int64} values print as signed by default and\n-@code{poly_uint64} values print as unsigned by default.\n-\n-This is a simply a @code{poly_int} version of a wide-int routine.\n-@end table\n-\n-@node Guidelines for using @code{poly_int}\n-@section Guidelines for using @code{poly_int}\n-\n-One of the main design goals of @code{poly_int} was to make it easy\n-to write target-independent code that handles variable-sized registers\n-even when the current target has fixed-sized registers.  There are two\n-aspects to this:\n-\n-@itemize\n-@item\n-The set of @code{poly_int} operations should be complete enough that\n-the question in most cases becomes ``Can we do this operation on these\n-particular @code{poly_int} values?  If not, bail out'' rather than\n-``Are these @code{poly_int} values constant?  If so, do the operation,\n-otherwise bail out''.\n-\n-@item\n-If target-independent code compiles and runs correctly on a target\n-with one value of @code{NUM_POLY_INT_COEFFS}, and if the code does not\n-use asserting functions like @code{to_constant}, it is reasonable to\n-assume that the code also works on targets with other values of\n-@code{NUM_POLY_INT_COEFFS}.  There is no need to check this during\n-everyday development.\n-@end itemize\n-\n-So the general principle is: if target-independent code is dealing\n-with a @code{poly_int} value, it is better to operate on it as a\n-@code{poly_int} if at all possible, choosing conservatively-correct\n-behavior if a particular operation fails.  For example, the following\n-code handles an index @code{pos} into a sequence of vectors that each\n-have @code{nunits} elements:\n-\n-@smallexample\n-/* Calculate which vector contains the result, and which lane of\n-   that vector we need.  */\n-if (!can_div_trunc_p (pos, nunits, &vec_entry, &vec_index))\n-  @{\n-    if (dump_enabled_p ())\n-      dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-                       \"Cannot determine which vector holds the\"\n-                       \" final result.\\n\");\n-    return false;\n-  @}\n-@end smallexample\n-\n-However, there are some contexts in which operating on a\n-@code{poly_int} is not possible or does not make sense.  One example\n-is when handling static initializers, since no current target supports\n-the concept of a variable-length static initializer.  In these\n-situations, a reasonable fallback is:\n-\n-@smallexample\n-if (@var{poly_value}.is_constant (&@var{const_value}))\n-  @{\n-    @dots{}\n-    /* Operate on @var{const_value}.  */\n-    @dots{}\n-  @}\n-else\n-  @{\n-    @dots{}\n-    /* Conservatively correct fallback.  */\n-    @dots{}\n-  @}\n-@end smallexample\n-\n-@code{poly_int} also provides some asserting functions like\n-@code{to_constant}.  Please only use these functions if there is a\n-good theoretical reason to believe that the assertion cannot fire.\n-For example, if some work is divided into an analysis phase and an\n-implementation phase, the analysis phase might reject inputs that are\n-not @code{is_constant}, in which case the implementation phase can\n-reasonably use @code{to_constant} on the remaining inputs.  The assertions\n-should not be used to discover whether a condition ever occurs ``in the\n-field''; in other words, they should not be used to restrict code to\n-constants at first, with the intention of only implementing a\n-@code{poly_int} version if a user hits the assertion.\n-\n-If a particular asserting function like @code{to_constant} is needed\n-more than once for the same reason, it is probably worth adding a\n-helper function or macro for that situation, so that the justification\n-only needs to be given once.  For example:\n-\n-@smallexample\n-/* Return the size of an element in a vector of size SIZE, given that\n-   the vector has NELTS elements.  The return value is in the same units\n-   as SIZE (either bits or bytes).\n-\n-   to_constant () is safe in this situation because vector elements are\n-   always constant-sized scalars.  */\n-#define vector_element_size(SIZE, NELTS) \\\n-  (exact_div (SIZE, NELTS).to_constant ())\n-@end smallexample\n-\n-Target-specific code in @file{config/@var{cpu}} only needs to handle\n-non-constant @code{poly_int}s if @code{NUM_POLY_INT_COEFFS} is greater\n-than one.  For other targets, @code{poly_int} degenerates to a compile-time\n-constant and is often interchangable with a normal scalar integer.\n-There are two main exceptions:\n-\n-@itemize\n-@item\n-Sometimes an explicit cast to an integer type might be needed, such as to\n-resolve ambiguities in a @code{?:} expression, or when passing values\n-through @code{...} to things like print functions.\n-\n-@item\n-Target macros are included in target-independent code and so do not\n-have access to the implicit conversion to a scalar integer.\n-If this becomes a problem for a particular target macro, the\n-possible solutions, in order of preference, are:\n-\n-@itemize\n-@item\n-Convert the target macro to a target hook (for all targets).\n-\n-@item\n-Put the target's implementation of the target macro in its\n-@file{@var{cpu}.c} file and call it from the target macro in the\n-@file{@var{cpu}.h} file.\n-\n-@item\n-Add @code{to_constant ()} calls where necessary.  The previous option\n-is preferable because it will help with any future conversion of the\n-macro to a hook.\n-@end itemize\n-@end itemize\n-"}, {"sha": "3e1ad5fe55bdf31f52ec30dd894aae9d88161c32", "filename": "gcc/doc/portability.texi", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fportability.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fportability.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fportability.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e", "patch": "@@ -1,39 +0,0 @@\n-@c Copyright (C) 1988-2022 Free Software Foundation, Inc.\n-@c This is part of the GCC manual.\n-@c For copying conditions, see the file gcc.texi.\n-\n-@node Portability\n-@chapter GCC and Portability\n-@cindex portability\n-@cindex GCC and portability\n-\n-GCC itself aims to be portable to any machine where @code{int} is at least\n-a 32-bit type.  It aims to target machines with a flat (non-segmented) byte\n-addressed data address space (the code address space can be separate).\n-Target ABIs may have 8, 16, 32 or 64-bit @code{int} type.  @code{char}\n-can be wider than 8 bits.\n-\n-GCC gets most of the information about the target machine from a machine\n-description which gives an algebraic formula for each of the machine's\n-instructions.  This is a very clean way to describe the target.  But when\n-the compiler needs information that is difficult to express in this\n-fashion, ad-hoc parameters have been defined for machine descriptions.\n-The purpose of portability is to reduce the total work needed on the\n-compiler; it was not of interest for its own sake.\n-\n-@cindex endianness\n-@cindex autoincrement addressing, availability\n-@findex abort\n-GCC does not contain machine dependent code, but it does contain code\n-that depends on machine parameters such as endianness (whether the most\n-significant byte has the highest or lowest address of the bytes in a word)\n-and the availability of autoincrement addressing.  In the RTL-generation\n-pass, it is often necessary to have multiple strategies for generating code\n-for a particular kind of syntax tree, strategies that are usable for different\n-combinations of parameters.  Often, not all possible cases have been\n-addressed, but only the common ones or only the ones that have been\n-encountered.  As a result, a new target may require additional\n-strategies.  You will know\n-if this happens because the compiler will call @code{abort}.  Fortunately,\n-the new strategies can be added in a machine-independent fashion, and will\n-affect only the target machines that need them."}, {"sha": "43c9ee8bffeac5d7b0509234b4ea9b1bf2f460ab", "filename": "gcc/doc/rtl.texi", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "28f90ddfc94382a0f80fb772fc3dfbc0efb54d18", "filename": "gcc/doc/service.texi", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fservice.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fservice.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fservice.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "766266942f9f73ea600f601064b3d571037b47c9", "filename": "gcc/doc/sourcebuild.texi", "status": "removed", "additions": 0, "deletions": 3987, "changes": 3987, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "f878615ca300ece167d597d78f45655f41af2408", "filename": "gcc/doc/standards.texi", "status": "removed", "additions": 0, "deletions": 336, "changes": 336, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fstandards.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fstandards.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fstandards.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "8572313b308f42e1d4cb329ee6c8d9be40d06a76", "filename": "gcc/doc/tm.texi", "status": "removed", "additions": 0, "deletions": 12436, "changes": 12436, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "986e8f0da0904a755d302c370212b9a7e80e9936", "filename": "gcc/doc/tm.texi.in", "status": "removed", "additions": 0, "deletions": 7984, "changes": 7984, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "f962ef9b1eead5059b65a21766e04fffcfba5582", "filename": "gcc/doc/tree-ssa.texi", "status": "removed", "additions": 0, "deletions": 826, "changes": 826, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Ftree-ssa.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Ftree-ssa.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftree-ssa.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "c3f4d396bc5581b72128a936d72cafc83e6c87fc", "filename": "gcc/doc/trouble.texi", "status": "removed", "additions": 0, "deletions": 1197, "changes": 1197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Ftrouble.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Ftrouble.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftrouble.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "1e27b2b0c098aaa09b271919ad09ad42be82f18a", "filename": "gcc/doc/ux.texi", "status": "removed", "additions": 0, "deletions": 661, "changes": 661, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fux.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fdoc%2Fux.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fux.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "1409e286105928bf13a12f35eb8965d0b0ec6e16", "filename": "gcc/fortran/gfc-internals.texi", "status": "removed", "additions": 0, "deletions": 968, "changes": 968, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Ffortran%2Fgfc-internals.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Ffortran%2Fgfc-internals.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfc-internals.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "4b4ecd528a7daec31bdba5ed13ab91edfc0200b1", "filename": "gcc/fortran/gfortran.texi", "status": "removed", "additions": 0, "deletions": 5573, "changes": 5573, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "55f53fc113708f948429ceced001ef09f2937656", "filename": "gcc/fortran/intrinsic.texi", "status": "removed", "additions": 0, "deletions": 15435, "changes": 15435, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "58502d38ac8772e2467b75e42bdf723c74589c06", "filename": "gcc/fortran/invoke.texi", "status": "removed", "additions": 0, "deletions": 2133, "changes": 2133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "66020aa7eb7c853cf99b5447c753138cd9402a57", "filename": "gcc/go/gccgo.texi", "status": "removed", "additions": 0, "deletions": 521, "changes": 521, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fgo%2Fgccgo.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/gcc%2Fgo%2Fgccgo.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgccgo.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "10fefa97922c9370ba3dd24c4a880072db8b4b8b", "filename": "libgomp/libgomp.texi", "status": "removed", "additions": 0, "deletions": 4884, "changes": 4884, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/libgomp%2Flibgomp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/libgomp%2Flibgomp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "080d1951d62df67643aaffa7a5acabf5d756864e", "filename": "libiberty/at-file.texi", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/libiberty%2Fat-file.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/libiberty%2Fat-file.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fat-file.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "7f32e1fb90b0a95338a2a6627323ef2e9967a427", "filename": "libiberty/copying-lib.texi", "status": "removed", "additions": 0, "deletions": 560, "changes": 560, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/libiberty%2Fcopying-lib.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/libiberty%2Fcopying-lib.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcopying-lib.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "b56b02e06862a5204fd5763a46223df94bfe2680", "filename": "libiberty/functions.texi", "status": "removed", "additions": 0, "deletions": 2063, "changes": 2063, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "ad1f8e3d35aa498129c4a48f6087bad37c10d12a", "filename": "libiberty/libiberty.texi", "status": "removed", "additions": 0, "deletions": 313, "changes": 313, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/libiberty%2Flibiberty.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/libiberty%2Flibiberty.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Flibiberty.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "b2d2403210bb7de78344ebeb8d8b55e40e31d61d", "filename": "libiberty/obstacks.texi", "status": "removed", "additions": 0, "deletions": 774, "changes": 774, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/libiberty%2Fobstacks.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/libiberty%2Fobstacks.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fobstacks.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "7dff5f8fc5c1568beea1385ec317ad3d5f385843", "filename": "libitm/libitm.texi", "status": "removed", "additions": 0, "deletions": 788, "changes": 788, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/libitm%2Flibitm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/libitm%2Flibitm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Flibitm.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}, {"sha": "fad8e62d8bc6b5d459650b206ccc3da3abca6ecf", "filename": "libquadmath/libquadmath.texi", "status": "removed", "additions": 0, "deletions": 392, "changes": 392, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564a805f9f08b4346a854ab8dca2e5b561a7a28e/libquadmath%2Flibquadmath.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564a805f9f08b4346a854ab8dca2e5b561a7a28e/libquadmath%2Flibquadmath.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Flibquadmath.texi?ref=564a805f9f08b4346a854ab8dca2e5b561a7a28e"}]}