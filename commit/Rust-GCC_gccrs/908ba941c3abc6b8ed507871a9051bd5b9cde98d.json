{"sha": "908ba941c3abc6b8ed507871a9051bd5b9cde98d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA4YmE5NDFjM2FiYzZiOGVkNTA3ODcxYTkwNTFiZDViOWNkZTk4ZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2013-05-24T08:27:55Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-05-24T08:27:55Z"}, "message": "decl.c (gnat_to_gnu_entity): Constify a handful of local variables.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Record_Type>: Constify\n\ta handful of local variables.\n\tFor a derived untagged type that renames discriminants, change the type\n\tof the stored discriminants to a subtype with the bounds of the type\n\tof the visible discriminants.\n\t(build_subst_list): Rename local variable.\n\nFrom-SVN: r199279", "tree": {"sha": "aff76747988831bf15f6b6d874837f6db04db488", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aff76747988831bf15f6b6d874837f6db04db488"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/908ba941c3abc6b8ed507871a9051bd5b9cde98d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/908ba941c3abc6b8ed507871a9051bd5b9cde98d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/908ba941c3abc6b8ed507871a9051bd5b9cde98d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/908ba941c3abc6b8ed507871a9051bd5b9cde98d/comments", "author": null, "committer": null, "parents": [{"sha": "b17c024fa920895a860c675836e98fc49c01e9ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b17c024fa920895a860c675836e98fc49c01e9ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b17c024fa920895a860c675836e98fc49c01e9ce"}], "stats": {"total": 102, "additions": 89, "deletions": 13}, "files": [{"sha": "d7e6209746a51434a165340f2c6a4fb0c0766efc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/908ba941c3abc6b8ed507871a9051bd5b9cde98d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/908ba941c3abc6b8ed507871a9051bd5b9cde98d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=908ba941c3abc6b8ed507871a9051bd5b9cde98d", "patch": "@@ -1,3 +1,12 @@\n+2013-05-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Record_Type>: Constify\n+\ta handful of local variables.\n+\tFor a derived untagged type that renames discriminants, change the type\n+\tof the stored discriminants to a subtype with the bounds of the type\n+\tof the visible discriminants.\n+\t(build_subst_list): Rename local variable.\n+\n 2013-05-16  Jason Merrill  <jason@redhat.com>\n \n \t* gcc-interface/Make-lang.in (gnat1$(exeext)): Use link mutex."}, {"sha": "b859731231c6096237db5ec79b9f2fb089140cae", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 60, "deletions": 13, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/908ba941c3abc6b8ed507871a9051bd5b9cde98d/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/908ba941c3abc6b8ed507871a9051bd5b9cde98d/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=908ba941c3abc6b8ed507871a9051bd5b9cde98d", "patch": "@@ -2913,10 +2913,12 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n       {\n \tNode_Id full_definition = Declaration_Node (gnat_entity);\n \tNode_Id record_definition = Type_Definition (full_definition);\n+\tNode_Id gnat_constr;\n \tEntity_Id gnat_field;\n-\ttree gnu_field, gnu_field_list = NULL_TREE, gnu_get_parent;\n+\ttree gnu_field, gnu_field_list = NULL_TREE;\n+\ttree gnu_get_parent;\n \t/* Set PACKED in keeping with gnat_to_gnu_field.  */\n-\tint packed\n+\tconst int packed\n \t  = Is_Packed (gnat_entity)\n \t    ? 1\n \t    : Component_Alignment (gnat_entity) == Calign_Storage_Unit\n@@ -2926,13 +2928,13 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t     && Known_RM_Size (gnat_entity)))\n \t\t? -2\n \t\t: 0;\n-\tbool has_discr = Has_Discriminants (gnat_entity);\n-\tbool has_rep = Has_Specified_Layout (gnat_entity);\n-\tbool all_rep = has_rep;\n-\tbool is_extension\n+\tconst bool has_discr = Has_Discriminants (gnat_entity);\n+\tconst bool has_rep = Has_Specified_Layout (gnat_entity);\n+\tconst bool is_extension\n \t  = (Is_Tagged_Type (gnat_entity)\n \t     && Nkind (record_definition) == N_Derived_Type_Definition);\n-\tbool is_unchecked_union = Is_Unchecked_Union (gnat_entity);\n+\tconst bool is_unchecked_union = Is_Unchecked_Union (gnat_entity);\n+\tbool all_rep = has_rep;\n \n \t/* See if all fields have a rep clause.  Stop when we find one\n \t   that doesn't.  */\n@@ -3171,6 +3173,51 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t}\n \t    }\n \n+\t/* If we have a derived untagged type that renames discriminants in\n+\t   the root type, the (stored) discriminants are a just copy of the\n+\t   discriminants of the root type.  This means that any constraints\n+\t   added by the renaming in the derivation are disregarded as far\n+\t   as the layout of the derived type is concerned.  To rescue them,\n+\t   we change the type of the (stored) discriminants to a subtype\n+\t   with the bounds of the type of the visible discriminants.  */\n+\tif (has_discr\n+\t    && !is_extension\n+\t    && Stored_Constraint (gnat_entity) != No_Elist)\n+\t  for (gnat_constr = First_Elmt (Stored_Constraint (gnat_entity));\n+\t       gnat_constr != No_Elmt;\n+\t       gnat_constr = Next_Elmt (gnat_constr))\n+\t    if (Nkind (Node (gnat_constr)) == N_Identifier\n+\t\t/* Ignore access discriminants.  */\n+\t\t&& !Is_Access_Type (Etype (Node (gnat_constr)))\n+\t\t&& Ekind (Entity (Node (gnat_constr))) == E_Discriminant)\n+\t      {\n+\t\tEntity_Id gnat_discr = Entity (Node (gnat_constr));\n+\t\ttree gnu_discr_type = gnat_to_gnu_type (Etype (gnat_discr));\n+\t\ttree gnu_ref\n+\t\t  = gnat_to_gnu_entity (Original_Record_Component (gnat_discr),\n+\t\t\t\t\tNULL_TREE, 0);\n+\n+\t\t/* GNU_REF must be an expression using a PLACEHOLDER_EXPR built\n+\t\t   just above for one of the stored discriminants.  */\n+\t\tgcc_assert (TREE_TYPE (TREE_OPERAND (gnu_ref, 0)) == gnu_type);\n+\n+\t\tif (gnu_discr_type != TREE_TYPE (gnu_ref))\n+\t\t  {\n+\t\t    const unsigned prec = TYPE_PRECISION (TREE_TYPE (gnu_ref));\n+\t\t    tree gnu_subtype\n+\t\t      = TYPE_UNSIGNED (TREE_TYPE (gnu_ref))\n+\t\t        ? make_unsigned_type (prec) : make_signed_type (prec);\n+\t\t    TREE_TYPE (gnu_subtype) = TREE_TYPE (gnu_ref);\n+\t\t    TYPE_EXTRA_SUBTYPE_P (gnu_subtype) = 1;\n+\t\t    SET_TYPE_RM_MIN_VALUE (gnu_subtype,\n+\t\t\t\t\t   TYPE_MIN_VALUE (gnu_discr_type));\n+\t\t    SET_TYPE_RM_MAX_VALUE (gnu_subtype,\n+\t\t\t\t\t   TYPE_MAX_VALUE (gnu_discr_type));\n+\t\t    TREE_TYPE (gnu_ref)\n+\t\t      = TREE_TYPE (TREE_OPERAND (gnu_ref, 1)) = gnu_subtype;\n+\t\t  }\n+\t      }\n+\n \t/* Add the fields into the record type and finish it up.  */\n \tcomponents_to_record (gnu_type, Component_List (record_definition),\n \t\t\t      gnu_field_list, packed, definition, false,\n@@ -5969,7 +6016,7 @@ elaborate_entity (Entity_Id gnat_entity)\n \t       Present (gnat_field);\n \t       gnat_field = Next_Discriminant (gnat_field),\n \t       gnat_discriminant_expr = Next_Elmt (gnat_discriminant_expr))\n-\t    /* ??? For now, ignore access discriminants.  */\n+\t    /* Ignore access discriminants.  */\n \t    if (!Is_Access_Type (Etype (Node (gnat_discriminant_expr))))\n \t      elaborate_expression (Node (gnat_discriminant_expr),\n \t\t\t\t    gnat_entity, get_entity_name (gnat_field),\n@@ -7623,20 +7670,20 @@ build_subst_list (Entity_Id gnat_subtype, Entity_Id gnat_type, bool definition)\n {\n   vec<subst_pair> gnu_list = vNULL;\n   Entity_Id gnat_discrim;\n-  Node_Id gnat_value;\n+  Node_Id gnat_constr;\n \n   for (gnat_discrim = First_Stored_Discriminant (gnat_type),\n-       gnat_value = First_Elmt (Stored_Constraint (gnat_subtype));\n+       gnat_constr = First_Elmt (Stored_Constraint (gnat_subtype));\n        Present (gnat_discrim);\n        gnat_discrim = Next_Stored_Discriminant (gnat_discrim),\n-       gnat_value = Next_Elmt (gnat_value))\n+       gnat_constr = Next_Elmt (gnat_constr))\n     /* Ignore access discriminants.  */\n-    if (!Is_Access_Type (Etype (Node (gnat_value))))\n+    if (!Is_Access_Type (Etype (Node (gnat_constr))))\n       {\n \ttree gnu_field = gnat_to_gnu_field_decl (gnat_discrim);\n \ttree replacement = convert (TREE_TYPE (gnu_field),\n \t\t\t\t    elaborate_expression\n-\t\t\t\t    (Node (gnat_value), gnat_subtype,\n+\t\t\t\t    (Node (gnat_constr), gnat_subtype,\n \t\t\t\t     get_entity_name (gnat_discrim),\n \t\t\t\t     definition, true, false));\n \tsubst_pair s = {gnu_field, replacement};"}, {"sha": "f9ef3c062a7e79cb79b609d06e5131bc2ce26c9d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/908ba941c3abc6b8ed507871a9051bd5b9cde98d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/908ba941c3abc6b8ed507871a9051bd5b9cde98d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=908ba941c3abc6b8ed507871a9051bd5b9cde98d", "patch": "@@ -1,3 +1,7 @@\n+2013-05-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/derived_type4.adb: New test.\n+\n 2013-05-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.dg/builtin-bswap-6.c: New test."}, {"sha": "22c41ecc64894e93f9de92818202071c818048a2", "filename": "gcc/testsuite/gnat.dg/derived_type4.adb", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/908ba941c3abc6b8ed507871a9051bd5b9cde98d/gcc%2Ftestsuite%2Fgnat.dg%2Fderived_type4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/908ba941c3abc6b8ed507871a9051bd5b9cde98d/gcc%2Ftestsuite%2Fgnat.dg%2Fderived_type4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fderived_type4.adb?ref=908ba941c3abc6b8ed507871a9051bd5b9cde98d", "patch": "@@ -0,0 +1,16 @@\n+-- { dg-do compile }\n+\n+procedure Derived_Type4 is\n+\n+  type Root (D : Positive) is record\n+     S : String (1 .. D);\n+  end record;\n+\n+  subtype Short is Positive range 1 .. 10;\n+  type Derived (N : Short := 1) is new Root (D => N);\n+\n+  Obj : Derived;\n+\n+begin\n+  Obj := (N => 5, S => \"Hello\");\n+end;"}]}