{"sha": "c6521daac82b717bad7e9e90dc8dd3c4e24ba2c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY1MjFkYWFjODJiNzE3YmFkN2U5ZTkwZGM4ZGQzYzRlMjRiYTJjMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-08-14T08:31:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-08-14T08:31:54Z"}, "message": "re PR rtl-optimization/91154 (456.hmmer regression on Haswell caused by r272922)\n\n2019-08-14  Richard Biener  <rguenther@suse.de>\n\n\tPR target/91154\n\t* config/i386/i386-features.c\n\t(dimode_scalar_chain::compute_convert_gain): Compute and dump\n\tindividual instruction gain.  Fix reg-reg copy GRP cost.  Use\n\tix86_cost->sse_op for vector instruction costs.\n\nFrom-SVN: r274422", "tree": {"sha": "6d92d65f1b44b9f91814bc46a6a0901c87e6dbab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d92d65f1b44b9f91814bc46a6a0901c87e6dbab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6521daac82b717bad7e9e90dc8dd3c4e24ba2c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6521daac82b717bad7e9e90dc8dd3c4e24ba2c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6521daac82b717bad7e9e90dc8dd3c4e24ba2c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6521daac82b717bad7e9e90dc8dd3c4e24ba2c2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a942af61c16f38f7fe51ed72a7ac23f73f62f2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a942af61c16f38f7fe51ed72a7ac23f73f62f2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a942af61c16f38f7fe51ed72a7ac23f73f62f2a"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "1dee72251e68d338b7f6dda12de682a40f02a92e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6521daac82b717bad7e9e90dc8dd3c4e24ba2c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6521daac82b717bad7e9e90dc8dd3c4e24ba2c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6521daac82b717bad7e9e90dc8dd3c4e24ba2c2", "patch": "@@ -1,3 +1,11 @@\n+2019-08-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR target/91154\n+\t* config/i386/i386-features.c\n+\t(dimode_scalar_chain::compute_convert_gain): Compute and dump\n+\tindividual instruction gain.  Fix reg-reg copy GRP cost.  Use\n+\tix86_cost->sse_op for vector instruction costs.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/iterators.md (UNSPEC_COND_FCMUO): New unspec."}, {"sha": "ee23c2bacea722debb3c431753ee858fe36ef702", "filename": "gcc/config/i386/i386-features.c", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6521daac82b717bad7e9e90dc8dd3c4e24ba2c2/gcc%2Fconfig%2Fi386%2Fi386-features.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6521daac82b717bad7e9e90dc8dd3c4e24ba2c2/gcc%2Fconfig%2Fi386%2Fi386-features.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.c?ref=c6521daac82b717bad7e9e90dc8dd3c4e24ba2c2", "patch": "@@ -497,57 +497,65 @@ dimode_scalar_chain::compute_convert_gain ()\n       rtx def_set = single_set (insn);\n       rtx src = SET_SRC (def_set);\n       rtx dst = SET_DEST (def_set);\n+      int igain = 0;\n \n       if (REG_P (src) && REG_P (dst))\n-\tgain += COSTS_N_INSNS (2) - ix86_cost->xmm_move;\n+\tigain += 2 - ix86_cost->xmm_move;\n       else if (REG_P (src) && MEM_P (dst))\n-\tgain += 2 * ix86_cost->int_store[2] - ix86_cost->sse_store[1];\n+\tigain += 2 * ix86_cost->int_store[2] - ix86_cost->sse_store[1];\n       else if (MEM_P (src) && REG_P (dst))\n-\tgain += 2 * ix86_cost->int_load[2] - ix86_cost->sse_load[1];\n+\tigain += 2 * ix86_cost->int_load[2] - ix86_cost->sse_load[1];\n       else if (GET_CODE (src) == ASHIFT\n \t       || GET_CODE (src) == ASHIFTRT\n \t       || GET_CODE (src) == LSHIFTRT)\n \t{\n     \t  if (CONST_INT_P (XEXP (src, 0)))\n-\t    gain -= vector_const_cost (XEXP (src, 0));\n-\t  gain += ix86_cost->shift_const;\n+\t    igain -= vector_const_cost (XEXP (src, 0));\n+\t  igain += 2 * ix86_cost->shift_const - ix86_cost->sse_op;\n \t  if (INTVAL (XEXP (src, 1)) >= 32)\n-\t    gain -= COSTS_N_INSNS (1);\n+\t    igain -= COSTS_N_INSNS (1);\n \t}\n       else if (GET_CODE (src) == PLUS\n \t       || GET_CODE (src) == MINUS\n \t       || GET_CODE (src) == IOR\n \t       || GET_CODE (src) == XOR\n \t       || GET_CODE (src) == AND)\n \t{\n-\t  gain += ix86_cost->add;\n+\t  igain += 2 * ix86_cost->add - ix86_cost->sse_op;\n \t  /* Additional gain for andnot for targets without BMI.  */\n \t  if (GET_CODE (XEXP (src, 0)) == NOT\n \t      && !TARGET_BMI)\n-\t    gain += 2 * ix86_cost->add;\n+\t    igain += 2 * ix86_cost->add;\n \n \t  if (CONST_INT_P (XEXP (src, 0)))\n-\t    gain -= vector_const_cost (XEXP (src, 0));\n+\t    igain -= vector_const_cost (XEXP (src, 0));\n \t  if (CONST_INT_P (XEXP (src, 1)))\n-\t    gain -= vector_const_cost (XEXP (src, 1));\n+\t    igain -= vector_const_cost (XEXP (src, 1));\n \t}\n       else if (GET_CODE (src) == NEG\n \t       || GET_CODE (src) == NOT)\n-\tgain += ix86_cost->add - COSTS_N_INSNS (1);\n+\tigain += 2 * ix86_cost->add - ix86_cost->sse_op - COSTS_N_INSNS (1);\n       else if (GET_CODE (src) == COMPARE)\n \t{\n \t  /* Assume comparison cost is the same.  */\n \t}\n       else if (CONST_INT_P (src))\n \t{\n \t  if (REG_P (dst))\n-\t    gain += COSTS_N_INSNS (2);\n+\t    igain += 2 * COSTS_N_INSNS (1);\n \t  else if (MEM_P (dst))\n-\t    gain += 2 * ix86_cost->int_store[2] - ix86_cost->sse_store[1];\n-\t  gain -= vector_const_cost (src);\n+\t    igain += 2 * ix86_cost->int_store[2] - ix86_cost->sse_store[1];\n+\t  igain -= vector_const_cost (src);\n \t}\n       else\n \tgcc_unreachable ();\n+\n+      if (igain != 0 && dump_file)\n+\t{\n+\t  fprintf (dump_file, \"  Instruction gain %d for \", igain);\n+\t  dump_insn_slim (dump_file, insn);\n+\t}\n+      gain += igain;\n     }\n \n   if (dump_file)"}]}