{"sha": "5d22c1a51893bd13a8cdc47dd635d2ed0e7646df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQyMmMxYTUxODkzYmQxM2E4Y2RjNDdkZDYzNWQyZWQwZTc2NDZkZg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2002-01-11T23:07:54Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2002-01-11T23:07:54Z"}, "message": "invoke.texi: Avoid overfull hboxes.\n\n\t* doc/invoke.texi: Avoid overfull hboxes.  Add summary of D30V\n\toptions.  Use @table @gcctabopt for MMIX options.  Add index\n\tentries for MMIX options.  Start new paragraph with first\n\theading of the machine-dependent options.\n\nFrom-SVN: r48783", "tree": {"sha": "b5b269d1ab2b7f4820b8860fdae1409864aeaad1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5b269d1ab2b7f4820b8860fdae1409864aeaad1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d22c1a51893bd13a8cdc47dd635d2ed0e7646df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d22c1a51893bd13a8cdc47dd635d2ed0e7646df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d22c1a51893bd13a8cdc47dd635d2ed0e7646df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d22c1a51893bd13a8cdc47dd635d2ed0e7646df/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bfea93644d234bb658b91613bd153faa1c7609b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bfea93644d234bb658b91613bd153faa1c7609b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bfea93644d234bb658b91613bd153faa1c7609b"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "e67d3852503de45556c90f42b5f47753e39029bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d22c1a51893bd13a8cdc47dd635d2ed0e7646df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d22c1a51893bd13a8cdc47dd635d2ed0e7646df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d22c1a51893bd13a8cdc47dd635d2ed0e7646df", "patch": "@@ -1,3 +1,10 @@\n+2002-01-11  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* doc/invoke.texi: Avoid overfull hboxes.  Add summary of D30V\n+\toptions.  Use @table @gcctabopt for MMIX options.  Add index\n+\tentries for MMIX options.  Start new paragraph with first\n+\theading of the machine-dependent options.\n+\n 2002-01-11  Craig Rodrigues  <rodrigc@gcc.gnu.org>\n \n \tPR other/5299"}, {"sha": "4bcfc2c5e43c342cea679bf7d41f983ecc21e20d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d22c1a51893bd13a8cdc47dd635d2ed0e7646df/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d22c1a51893bd13a8cdc47dd635d2ed0e7646df/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5d22c1a51893bd13a8cdc47dd635d2ed0e7646df", "patch": "@@ -274,8 +274,8 @@ in the following sections.\n -fno-inline  -fno-math-errno  -fno-peephole  -fno-peephole2 @gol\n -funsafe-math-optimizations -fno-trapping-math @gol\n -fomit-frame-pointer  -foptimize-register-move @gol\n--foptimize-sibling-calls  -fprefetch-loop-arrays  -freduce-all-givs @gol\n--fregmove  -frename-registers @gol\n+-foptimize-sibling-calls  -fprefetch-loop-arrays @gol\n+-freduce-all-givs -fregmove  -frename-registers @gol\n -frerun-cse-after-loop  -frerun-loop-opt @gol\n -fschedule-insns  -fschedule-insns2 @gol\n -fsingle-precision-constant  -fssa -fssa-ccp -fssa-dce @gol\n@@ -324,6 +324,7 @@ in the following sections.\n \n @item Machine Dependent Options\n @xref{Submodel Options,,Hardware Models and Configurations}.\n+\n @emph{M680x0 Options}\n @gccoptlist{\n -m68000  -m68020  -m68020-40  -m68020-60  -m68030  -m68040 @gol\n@@ -602,6 +603,11 @@ in the following sections.\n -minline-divide-max-throughput  -mno-dwarf2-asm @gol\n -mfixed-range=@var{register-range}}\n \n+@emph{D30V Options}\n+@gccoptlist{\n+-mextmem  -mextmemory  -monchip  -mno-asm-optimize  -masm-optimize @gol\n+-mbranch-cost=@var{n} -mcond-exec=@var{n}}\n+\n @emph{S/390 and zSeries Options}\n @gccoptlist{\n -mhard-float  -msoft-float  -mbackchain  -mno-backchain @gol\n@@ -631,7 +637,8 @@ in the following sections.\n @gccoptlist{\n -fcall-saved-@var{reg}  -fcall-used-@var{reg} @gol\n -ffixed-@var{reg} -fexceptions @gol\n--fnon-call-exceptions  -funwind-tables -fasynchronous-unwind-tables @gol\n+-fnon-call-exceptions  -funwind-tables @gol\n+-fasynchronous-unwind-tables @gol\n -finhibit-size-directive  -finstrument-functions @gol\n -fno-common  -fno-ident  -fno-gnu-linker @gol\n -fpcc-struct-return  -fpic  -fPIC @gol\n@@ -9719,52 +9726,69 @@ Like @option{-sim}, but pass linker options to locate initialized data at\n \n These options are defined for the MMIX:\n \n-@table @code\n+@table @gcctabopt\n @item -mlibfuncs\n @itemx -mno-libfuncs\n+@opindex mlibfuncs\n+@opindex mno-libfuncs\n Specify that intrinsic library functions are being compiled, passing all\n values in registers, no matter the size.\n \n @item -mepsilon\n @itemx -mno-epsilon\n+@opindex mepsilon\n+@opindex mno-epsilon\n Generate floating-point comparison instructions that compare with respect\n to the @code{rE} epsilon register.\n \n @item -mabi=mmixware\n @itemx -mabi=gnu\n+@opindex mabi-mmixware\n+@opindex mabi=gnu\n Generate code that passes function parameters and return values that (in\n the called function) are seen as registers @code{$0} and up, as opposed to\n the GNU ABI which uses global registers @code{$231} and up.\n \n @item -mzero-extend\n @itemx -mno-zero-extend\n+@opindex mzero-extend\n+@opindex mno-zero-extend\n When reading data from memory in sizes shorter than 64 bits, use (do not\n use) zero-extending load instructions by default, rather than\n sign-extending ones.\n \n @item -mknuthdiv\n @itemx -mno-knuthdiv\n+@opindex mknuthdiv\n+@opindex mno-knuthdiv\n Make the result of a division yielding a remainder have the same sign as\n the divisor.  With the default, @option{-mno-knuthdiv}, the sign of the\n remainder follows the sign of the dividend.  Both methods are\n arithmetically valid, the latter being almost exclusively used.\n \n @item -mtoplevel-symbols\n @itemx -mno-toplevel-symbols\n+@opindex mtoplevel-symbols\n+@opindex mno-toplevel-symbols\n Prepend (do not prepend) a @samp{:} to all global symbols, so the assembly\n code can be used with the @code{PREFIX} assembly directive.\n \n @item -melf\n+@opindex melf\n Generate an executable in the ELF format, rather than the default\n @samp{mmo} format used by the @command{mmix} simulator.\n \n @item -mbranch-predict\n @itemx -mno-branch-predict\n+@opindex mbranch-predict\n+@opindex mno-branch-predict\n Use (do not use) the probable-branch instructions, when static branch\n prediction indicates a probable branch.\n \n @item -mreg-stack-fill-bug-workaround\n @itemx -mno-reg-stack-fill-bug-workaround\n+@opindex mreg-stack-fill-bug-workaround\n+@opindex mno-reg-stack-fill-bug-workaround\n Work around (do not work around) an inconsistency in the circular\n register stack mechanism in the @command{mmix} simulator, which\n causes entries in the register stack to not be flushed to memory if"}]}