{"sha": "990101f9738d06674ef25141d0903a5ffb1dd690", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkwMTAxZjk3MzhkMDY2NzRlZjI1MTQxZDA5MDNhNWZmYjFkZDY5MA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-05-22T18:48:19Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-05-22T18:48:19Z"}, "message": "mkcheck.in (static_fail): Remove S_FLAG decoration on output.\n\n\n2001-05-21  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* mkcheck.in (static_fail): Remove S_FLAG decoration on output.\n\n\t* include/bits/std_sstream.h (stringbuf::setbuf): Require both\n\targuments to be non-null.\n\t* include/bits/fstream.tcc (filebuf::_M_allocate_buffers): Only\n\ttry allocations if allocated size is greater than zero.\n\t(filebuf::_M_filebuf_init): Change to\n\t(filebuf::_M_allocate_file): Which is what it does now.\n\t(filebuf::_M_allocate_bufers): Change to\n\t(filebuf::_M_allocate_internal_buffer): This, and create\n\t(filebuf::_M_allocate_pback_buffer): New.\n\t(filebuf::_M_destroy_internal_buffer): New.\n\t(filebuf::_M_buf_allocated): New data member.\n\t(filebuf::setbuf): Use new logic, allow use of external buffer.\n\t* testsuite/27_io/stringbuf_virtuals.cc: New file.\n\t* testsuite/27_io/filebuf_virtuals.cc: New file.\n\nFrom-SVN: r42458", "tree": {"sha": "c574ed686c7b6e36bb64e1e91f253684840f886e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c574ed686c7b6e36bb64e1e91f253684840f886e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/990101f9738d06674ef25141d0903a5ffb1dd690", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/990101f9738d06674ef25141d0903a5ffb1dd690", "html_url": "https://github.com/Rust-GCC/gccrs/commit/990101f9738d06674ef25141d0903a5ffb1dd690", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/990101f9738d06674ef25141d0903a5ffb1dd690/comments", "author": null, "committer": null, "parents": [{"sha": "14fc34261e441958450b279b79ab7a622c41aa33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14fc34261e441958450b279b79ab7a622c41aa33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14fc34261e441958450b279b79ab7a622c41aa33"}], "stats": {"total": 244, "additions": 213, "deletions": 31}, "files": [{"sha": "af211191da6b6b4cffbdebb4377dcbece02bd940", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990101f9738d06674ef25141d0903a5ffb1dd690/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990101f9738d06674ef25141d0903a5ffb1dd690/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=990101f9738d06674ef25141d0903a5ffb1dd690", "patch": "@@ -1,3 +1,22 @@\n+2001-05-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* mkcheck.in (static_fail): Remove S_FLAG decoration on output.\n+\n+\t* include/bits/std_sstream.h (stringbuf::setbuf): Require both\n+\targuments to be non-null.\n+\t* include/bits/fstream.tcc (filebuf::_M_allocate_buffers): Only\n+\ttry allocations if allocated size is greater than zero.\n+\t(filebuf::_M_filebuf_init): Change to\n+\t(filebuf::_M_allocate_file): Which is what it does now. \n+\t(filebuf::_M_allocate_bufers): Change to\n+\t(filebuf::_M_allocate_internal_buffer): This, and create\n+\t(filebuf::_M_allocate_pback_buffer): New.\n+\t(filebuf::_M_destroy_internal_buffer): New.\n+\t(filebuf::_M_buf_allocated): New data member.\n+\t(filebuf::setbuf): Use new logic, allow use of external buffer.\n+\t* testsuite/27_io/stringbuf_virtuals.cc: New file.\n+\t* testsuite/27_io/filebuf_virtuals.cc: New file.\n+\n 2001-05-21  Stephen M. Webb  <stephen@bregmasoft.com>\n \n \t* include/c_std/bits/std_cstring.h (memchr): Define \"C\" functions to"}, {"sha": "b201831f85b105e8cd5e9c62a844e0e36cdd4aaf", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 72, "deletions": 15, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990101f9738d06674ef25141d0903a5ffb1dd690/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990101f9738d06674ef25141d0903a5ffb1dd690/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=990101f9738d06674ef25141d0903a5ffb1dd690", "patch": "@@ -39,7 +39,7 @@ namespace std\n   template<typename _CharT, typename _Traits>\n     void\n     basic_filebuf<_CharT, _Traits>::\n-    _M_filebuf_init()\n+    _M_allocate_file()\n     {\n       if (!_M_file)\n \t{\n@@ -57,19 +57,46 @@ namespace std\n   template<typename _CharT, typename _Traits>\n     void\n     basic_filebuf<_CharT, _Traits>::\n-    _M_allocate_buffers()\n+    _M_allocate_internal_buffer()\n     {\n-      if (!_M_buf)\n+      if (!_M_buf && _M_buf_size_opt)\n \t{\n \t  _M_buf_size = _M_buf_size_opt;\n+\n \t  // Allocate internal buffer.\n \t  try { _M_buf = new char_type[_M_buf_size]; }\n \t  catch(...) \n \t    {\n \t      delete [] _M_buf;\n \t      __throw_exception_again;\n \t    }\n-\t  \n+\t  _M_buf_allocated = true;\n+\t}\n+    }\n+\n+  // Both close and setbuf need to deallocate internal buffers, if it exists.\n+  template<typename _CharT, typename _Traits>\n+    void\n+    basic_filebuf<_CharT, _Traits>::\n+    _M_destroy_internal_buffer()\n+    {\n+      if (_M_buf_allocated)\n+\t{\n+\t  delete [] _M_buf;\n+\t  _M_buf = NULL;\n+\t  _M_buf_allocated = false;\n+\t  this->setg(NULL, NULL, NULL);\n+\t  this->setp(NULL, NULL);\n+\t}\n+    }\n+\n+ template<typename _CharT, typename _Traits>\n+    void\n+    basic_filebuf<_CharT, _Traits>::\n+    _M_allocate_pback_buffer()\n+    {\n+      if (!_M_pback && _M_pback_size)\n+\t{\n \t  // Allocate pback buffer.\n \t  try \n \t    { _M_pback = new char_type[_M_pback_size]; }\n@@ -85,26 +112,29 @@ namespace std\n     basic_filebuf<_CharT, _Traits>::\n     basic_filebuf() \n     : __streambuf_type(), _M_file(NULL), _M_state_cur(__state_type()), \n-    _M_state_beg(__state_type()), _M_last_overflowed(false)\n+    _M_state_beg(__state_type()), _M_buf_allocated(false), \n+    _M_last_overflowed(false)\n     { }\n \n   template<typename _CharT, typename _Traits>\n     basic_filebuf<_CharT, _Traits>::\n     basic_filebuf(__c_file_type* __f, ios_base::openmode __mode, int_type __s)\n     : __streambuf_type(),  _M_file(NULL), _M_state_cur(__state_type()), \n-    _M_state_beg(__state_type()), _M_last_overflowed(false)\n+    _M_state_beg(__state_type()), _M_buf_allocated(false), \n+    _M_last_overflowed(false)\n     {\n-      _M_filebuf_init();\n+      _M_allocate_file();\n       _M_file->sys_open(__f, __mode);\n       if (this->is_open())\n \t{\n \t  _M_mode = __mode;\n \t  if (__s)\n \t    {\n \t      _M_buf_size_opt = __s;\n-\t      _M_allocate_buffers();\n+\t      _M_allocate_internal_buffer();\n \t      _M_set_indeterminate();\n \t    }\n+\t  _M_allocate_pback_buffer();\n \t}\n     }\n \n@@ -116,11 +146,12 @@ namespace std\n       __filebuf_type *__ret = NULL;\n       if (!this->is_open())\n \t{\n-\t  _M_filebuf_init();\n+\t  _M_allocate_file();\n \t  _M_file->open(__s, __mode);\n \t  if (this->is_open())\n \t    {\n-\t      _M_allocate_buffers();\n+\t      _M_allocate_internal_buffer();\n+\t      _M_allocate_pback_buffer();\n \t      _M_mode = __mode;\n \t      \n \t      // For time being, set both (in/out) sets  of pointers.\n@@ -159,14 +190,12 @@ namespace std\n #endif\n \n \t  _M_mode = ios_base::openmode(0);\n-\t  if (_M_buf)\n+\t  _M_destroy_internal_buffer();\n+\n+\t  if (_M_pback)\n \t    {\n-\t      delete [] _M_buf;\n-\t      _M_buf = NULL;\n \t      delete [] _M_pback;\n \t      _M_pback = NULL;\n-\t      this->setg(NULL, NULL, NULL);\n-\t      this->setp(NULL, NULL);\n \t    }\n \t  __ret = this;\n \t}\n@@ -432,6 +461,34 @@ namespace std\n       return __ret;\n     }\n \n+  template<typename _CharT, typename _Traits>\n+    basic_filebuf<_CharT, _Traits>::__streambuf_type* \n+    basic_filebuf<_CharT, _Traits>::\n+    setbuf(char_type* __s, streamsize __n)\n+    {\n+      if (!this->is_open() && __s == 0 && __n == 0)\n+\t_M_buf_size_opt = 0;\n+      else if (__s && __n)\n+\t{\n+\t  // This is implementation-defined behavior, and assumes\n+\t  // that an external char_type array of length (__s + __n)\n+\t  // exists and has been pre-allocated. If this is not the\n+\t  // case, things will quickly blow up.\n+\t  // Step 1: Destroy the current internal array.\n+\t  _M_destroy_internal_buffer();\n+\t  \n+\t  // Step 2: Use the external array.\n+\t  _M_buf = __s;\n+\t  _M_buf_size_opt = _M_buf_size = __n;\n+\t  _M_set_indeterminate();\n+\t  \n+\t// Step 3: Make sure a pback buffer is allocated.\n+\t  _M_allocate_pback_buffer();\n+\t}\n+      _M_last_overflowed = false;\t\n+      return this; \n+    }\n+  \n   template<typename _CharT, typename _Traits>\n     basic_filebuf<_CharT, _Traits>::pos_type\n     basic_filebuf<_CharT, _Traits>::"}, {"sha": "83f31dc0c5a757657887188d6b36f0837ddef665", "filename": "libstdc++-v3/include/bits/std_fstream.h", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990101f9738d06674ef25141d0903a5ffb1dd690/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990101f9738d06674ef25141d0903a5ffb1dd690/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_fstream.h?ref=990101f9738d06674ef25141d0903a5ffb1dd690", "patch": "@@ -78,6 +78,9 @@ namespace std\n       // MT lock inherited from libio or other low-level io library.\n       __c_lock          \t_M_lock;\n \n+      // Set iff _M_buf is allocated memory from _M_allocate_internal_buffer..\n+      bool\t\t\t_M_buf_allocated;\n+\n       // XXX Needed? \n       bool\t\t\t_M_last_overflowed;  \n   \n@@ -107,13 +110,18 @@ namespace std\n       close(void);\n \n     protected:\n-      // Allocate up pback and internal buffers.\n       void \n-      _M_allocate_buffers();\n+      _M_allocate_internal_buffer();\n+\n+      void \n+      _M_destroy_internal_buffer();\n+\n+      void \n+      _M_allocate_pback_buffer();\n \n       // Create __file_type object and initialize it properly.\n       void\n-      _M_filebuf_init();\n+      _M_allocate_file();\n \n       // Overridden virtual functions:\n       virtual streamsize \n@@ -151,16 +159,7 @@ namespace std\n       _M_really_overflow(int_type __c = _Traits::eof());\n     \n       virtual __streambuf_type* \n-      setbuf(char_type* __s, streamsize __n)\n-      {\n-\tif (!this->is_open() && __s == 0 && __n == 0)\n-\t  {\n-\t    _M_buf_size = 0;\n-\t    _M_buf_size_opt = 0;\n-\t  }\n-\t_M_last_overflowed = false;\t\n-\treturn this; \n-      }\n+      setbuf(char_type* __s, streamsize __n);\n     \n       virtual pos_type \n       seekoff(off_type __off, ios_base::seekdir __way,"}, {"sha": "d03bdfa100daa49e01e2af11eb7398d09c82522f", "filename": "libstdc++-v3/include/bits/std_sstream.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990101f9738d06674ef25141d0903a5ffb1dd690/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_sstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990101f9738d06674ef25141d0903a5ffb1dd690/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_sstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_sstream.h?ref=990101f9738d06674ef25141d0903a5ffb1dd690", "patch": "@@ -143,7 +143,7 @@ namespace std\n       virtual __streambuf_type* \n       setbuf(char_type* __s, streamsize __n)\n       { \n-\tif (__n) \n+\tif (__s && __n) \n \t  {\n \t    _M_string = __string_type(__s, __n);\n \t    _M_really_sync(0, 0);"}, {"sha": "b15d14e68b5fd8887daf5fbb91fff4270a94f7e9", "filename": "libstdc++-v3/mkcheck.in", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990101f9738d06674ef25141d0903a5ffb1dd690/libstdc%2B%2B-v3%2Fmkcheck.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990101f9738d06674ef25141d0903a5ffb1dd690/libstdc%2B%2B-v3%2Fmkcheck.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmkcheck.in?ref=990101f9738d06674ef25141d0903a5ffb1dd690", "patch": "@@ -393,8 +393,7 @@ test_file()\n \n     printf \"%s\\t\" \"$RESULT\"\n     printf \"%-2s %d\\t%.3f\\t%s\\t%s\\t%s\\t%s %s\\n\"   \\\n-        \"$RESULT\" $C_TIME $E_TIME $TEXT $DATA $SIZE $NAME \"$S_FLAG\"    \\\n-        >> $RESULTS_FILE\n+        \"$RESULT\" $C_TIME $E_TIME $TEXT $DATA $SIZE $NAME >> $RESULTS_FILE\n }\n \n setup_size_command"}, {"sha": "50860cba4b6b13384486295a30df81c12ee62735", "filename": "libstdc++-v3/testsuite/27_io/filebuf_virtuals.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990101f9738d06674ef25141d0903a5ffb1dd690/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_virtuals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990101f9738d06674ef25141d0903a5ffb1dd690/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_virtuals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_virtuals.cc?ref=990101f9738d06674ef25141d0903a5ffb1dd690", "patch": "@@ -0,0 +1,62 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <debug_assert.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test = true;\n+  char buf[512];\n+  const char* strlit = \"how to tell a story and other essays: mark twain\";\n+  const size_t strlitsize = strlen(strlit);\n+  filebuf fbuf01;\n+\n+  fbuf01.pubsetbuf(buf, 512);\n+  fbuf01.sputn(strlit, strlitsize);\n+  VERIFY( strncmp(strlit, buf, strlitsize) != 0 );\n+}\n+\n+void test02()\n+{\n+  using namespace std;\n+\n+  bool test = true;\n+  char buf[512];\n+  const char* strlit = \"how to tell a story and other essays: mark twain\";\n+  const size_t strlitsize = strlen(strlit);\n+  filebuf fbuf01;\n+  fbuf01.open(\"tmp\", ios_base::out);\n+\n+  fbuf01.pubsetbuf(buf, strlitsize);\n+  fbuf01.sputn(strlit, strlitsize);\n+  VERIFY( strncmp(strlit, buf, strlitsize) == 0 );\n+}\n+\n+main() \n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "ebaf92ccaa35452c2e3268631fe88439214b378a", "filename": "libstdc++-v3/testsuite/27_io/stringbuf_virtuals.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990101f9738d06674ef25141d0903a5ffb1dd690/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringbuf_virtuals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990101f9738d06674ef25141d0903a5ffb1dd690/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringbuf_virtuals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringbuf_virtuals.cc?ref=990101f9738d06674ef25141d0903a5ffb1dd690", "patch": "@@ -0,0 +1,46 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1.3 Overridden virtual functions\n+\n+#include <sstream>\n+#include <debug_assert.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test = true;\n+  char buf[512];\n+  const char* strlit = \"how to tell a story and other essays: mark twain\";\n+  const size_t strlitsize = strlen(strlit);\n+  stringbuf sbuf(ios_base::out);\n+\n+  sbuf.pubsetbuf(buf, strlitsize);\n+  sbuf.sputn(strlit, strlitsize);\n+  VERIFY( strncmp(strlit, buf, strlitsize) != 0 );\n+}\n+\n+int main() \n+{\n+  test01();\n+\n+  return 0;\n+}"}]}