{"sha": "c6b664e2c4c127025e076d8b584abe0976694629", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZiNjY0ZTJjNGMxMjcwMjVlMDc2ZDhiNTg0YWJlMDk3NjY5NDYyOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-12T13:14:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-12T13:14:35Z"}, "message": "libcpp: Fix up -fdirectives-only preprocessing of includes not ending with newline [PR100392]\n\nIf a header doesn't end with a new-line, with -fdirectives-only we right now\npreprocess it as\nint i = 1;# 2 \"pr100392.c\" 2\ni.e. the line directive isn't on the next line, which means we fail to parse\nit when compiling.\n\nGCC 10 and earlier libcpp/directives-only.c had for this:\n  if (!pfile->state.skipping && cur != base)\n    {\n      /* If the file was not newline terminated, add rlimit, which is\n         guaranteed to point to a newline, to the end of our range.  */\n      if (cur[-1] != '\\n')\n        {\n          cur++;\n          CPP_INCREMENT_LINE (pfile, 0);\n          lines++;\n        }\n\n      cb->print_lines (lines, base, cur - base);\n    }\nand we have the assertion\n      /* Files always end in a newline or carriage return.  We rely on this for\n         character peeking safety.  */\n      gcc_assert (buffer->rlimit[0] == '\\n' || buffer->rlimit[0] == '\\r');\nSo, this patch just does readd the more less same thing, so that we emit\na newline after the inline even when it wasn't there before.\n\n2021-05-12  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR preprocessor/100392\n\t* lex.c (cpp_directive_only_process): If buffer doesn't end with '\\n',\n\tadd buffer->rlimit[0] character to the printed range and\n\tCPP_INCREMENT_LINE and increment line_count.\n\n\t* gcc.dg/cpp/pr100392.c: New test.\n\t* gcc.dg/cpp/pr100392.h: New file.", "tree": {"sha": "b83d6b28af9baa0cbd624ac68d008f507f663db2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b83d6b28af9baa0cbd624ac68d008f507f663db2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6b664e2c4c127025e076d8b584abe0976694629", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6b664e2c4c127025e076d8b584abe0976694629", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6b664e2c4c127025e076d8b584abe0976694629", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6b664e2c4c127025e076d8b584abe0976694629/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc186594e3ee86a57841442e96306dddfd8eb85d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc186594e3ee86a57841442e96306dddfd8eb85d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc186594e3ee86a57841442e96306dddfd8eb85d"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "670ad2b742ca237f5ea29f2765c2820b9104520c", "filename": "gcc/testsuite/gcc.dg/cpp/pr100392.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b664e2c4c127025e076d8b584abe0976694629/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr100392.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b664e2c4c127025e076d8b584abe0976694629/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr100392.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr100392.c?ref=c6b664e2c4c127025e076d8b584abe0976694629", "patch": "@@ -0,0 +1,5 @@\n+/* PR preprocessor/100392 */\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -fdirectives-only\" } */\n+\n+#include \"pr100392.h\""}, {"sha": "340bc92cd562c58e00477bc98ab8ee75989d2ed2", "filename": "gcc/testsuite/gcc.dg/cpp/pr100392.h", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b664e2c4c127025e076d8b584abe0976694629/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr100392.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b664e2c4c127025e076d8b584abe0976694629/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr100392.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr100392.h?ref=c6b664e2c4c127025e076d8b584abe0976694629", "patch": "@@ -0,0 +1,4 @@\n+/* PR preprocessor/100392 */\n+\n+/* No newline after ; below.  */\n+int i = 1;\n\\ No newline at end of file"}, {"sha": "6fd722ab2637a1c138ad9ac4d7dfbfa8ebeb4ee8", "filename": "libcpp/lex.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b664e2c4c127025e076d8b584abe0976694629/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b664e2c4c127025e076d8b584abe0976694629/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=c6b664e2c4c127025e076d8b584abe0976694629", "patch": "@@ -4768,7 +4768,18 @@ cpp_directive_only_process (cpp_reader *pfile,\n \t}\n \n       if (buffer->rlimit > base && !pfile->state.skipping)\n-\tcb (pfile, CPP_DO_print, data, line_count, base, buffer->rlimit - base);\n+\t{\n+\t  const unsigned char *limit = buffer->rlimit;\n+\t  /* If the file was not newline terminated, add rlimit, which is\n+\t     guaranteed to point to a newline, to the end of our range.  */\n+\t  if (limit[-1] != '\\n')\n+\t    {\n+\t      limit++;\n+\t      CPP_INCREMENT_LINE (pfile, 0);\n+\t      line_count++;\n+\t    }\n+\t  cb (pfile, CPP_DO_print, data, line_count, base, limit - base);\n+\t}\n \n       _cpp_pop_buffer (pfile);\n     }"}]}