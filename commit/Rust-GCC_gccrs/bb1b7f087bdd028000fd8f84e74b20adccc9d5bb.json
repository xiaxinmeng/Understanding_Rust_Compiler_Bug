{"sha": "bb1b7f087bdd028000fd8f84e74b20adccc9d5bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmIxYjdmMDg3YmRkMDI4MDAwZmQ4Zjg0ZTc0YjIwYWRjY2M5ZDViYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-18T13:23:19Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-18T13:28:38Z"}, "message": "libstdc++: Remove redundant copying of std::async arguments [PR 69724]\n\nAs was previously done for std::thread, this removes an unnecessary copy\nof an rvalue of type thread::_Invoker. Instead of creating the rvalue\nand then moving that into the shared state, the member of the shared\nstate is initialized directly from the forwarded callable and bound\narguments.\n\nThis also slightly simplifies std::thread creation to remove the\n_S_make_state helper function.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/69724\n\t* include/std/future (__future_base::_S_make_deferred_state)\n\t(__future_base::_S_make_async_state): Remove.\n\t(__future_base::_Deferred_state): Change constructor to accept a\n\tparameter pack of arguments and forward them to the call\n\twrapper.\n\t(__future_base::_Async_state_impl): Likewise. Replace lambda\n\texpression with a named member function.\n\t(async): Construct state object directly from the arguments,\n\tinstead of using thread::__make_invoker, _S_make_deferred_state\n\tand _S_make_async_state. Move shared state into the returned\n\tfuture.\n\t* include/std/thread (thread::_Call_wrapper): New alias\n\ttemplate for use by constructor and std::async.\n\t(thread::thread(Callable&&, Args&&...)): Create state object\n\tdirectly instead of using _S_make_state.\n\t(thread::__make_invoker, thread::__decayed_tuple)\n\t(thread::_S_make_state): Remove.\n\t* testsuite/30_threads/async/69724.cc: New test.", "tree": {"sha": "65bdb476307e00f202d1de0f0b1d649342d4788e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65bdb476307e00f202d1de0f0b1d649342d4788e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb1b7f087bdd028000fd8f84e74b20adccc9d5bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb1b7f087bdd028000fd8f84e74b20adccc9d5bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb1b7f087bdd028000fd8f84e74b20adccc9d5bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb1b7f087bdd028000fd8f84e74b20adccc9d5bb/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "634046d1a81b48a48b3564ff2f90974f6b7b087b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/634046d1a81b48a48b3564ff2f90974f6b7b087b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/634046d1a81b48a48b3564ff2f90974f6b7b087b"}], "stats": {"total": 252, "additions": 170, "deletions": 82}, "files": [{"sha": "e0816c2f5e1574417e25244bb52cb05e196ce0c9", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 44, "deletions": 57, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb1b7f087bdd028000fd8f84e74b20adccc9d5bb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb1b7f087bdd028000fd8f84e74b20adccc9d5bb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=bb1b7f087bdd028000fd8f84e74b20adccc9d5bb", "patch": "@@ -605,14 +605,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _Fn, typename _Alloc, typename _Signature>\n       class _Task_state;\n \n-    template<typename _BoundFn>\n-      static std::shared_ptr<_State_base>\n-      _S_make_deferred_state(_BoundFn&& __fn);\n-\n-    template<typename _BoundFn>\n-      static std::shared_ptr<_State_base>\n-      _S_make_async_state(_BoundFn&& __fn);\n-\n     template<typename _Res_ptr, typename _Fn,\n \t     typename _Res = typename _Res_ptr::element_type::result_type>\n       struct _Task_setter;\n@@ -1614,10 +1606,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __future_base::_State_base\n     {\n     public:\n-      explicit\n-      _Deferred_state(_BoundFn&& __fn)\n-      : _M_result(new _Result<_Res>()), _M_fn(std::move(__fn))\n-      { }\n+      template<typename... _Args>\n+\texplicit\n+\t_Deferred_state(_Args&&... __args)\n+\t: _M_result(new _Result<_Res>()),\n+\t  _M_fn{{std::forward<_Args>(__args)...}}\n+\t{ }\n \n     private:\n       typedef __future_base::_Ptr<_Result<_Res>> _Ptr_type;\n@@ -1679,69 +1673,63 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __future_base::_Async_state_commonV2\n     {\n     public:\n-      explicit\n-      _Async_state_impl(_BoundFn&& __fn)\n-      : _M_result(new _Result<_Res>()), _M_fn(std::move(__fn))\n-      {\n-\t_M_thread = std::thread{ [this] {\n-\t    __try\n-\t      {\n-\t\t_M_set_result(_S_task_setter(_M_result, _M_fn));\n-\t      }\n-\t    __catch (const __cxxabiv1::__forced_unwind&)\n-\t      {\n-\t\t// make the shared state ready on thread cancellation\n-\t\tif (static_cast<bool>(_M_result))\n-\t\t  this->_M_break_promise(std::move(_M_result));\n-\t\t__throw_exception_again;\n-\t      }\n-        } };\n-      }\n+      template<typename... _Args>\n+\texplicit\n+\t_Async_state_impl(_Args&&... __args)\n+\t: _M_result(new _Result<_Res>()),\n+\t  _M_fn{{std::forward<_Args>(__args)...}}\n+\t{\n+\t  _M_thread = std::thread{&_Async_state_impl::_M_run, this};\n+\t}\n \n       // Must not destroy _M_result and _M_fn until the thread finishes.\n       // Call join() directly rather than through _M_join() because no other\n       // thread can be referring to this state if it is being destroyed.\n-      ~_Async_state_impl() { if (_M_thread.joinable()) _M_thread.join(); }\n+      ~_Async_state_impl()\n+      {\n+\tif (_M_thread.joinable())\n+\t  _M_thread.join();\n+      }\n \n     private:\n+      void\n+      _M_run()\n+      {\n+\t__try\n+\t  {\n+\t    _M_set_result(_S_task_setter(_M_result, _M_fn));\n+\t  }\n+\t__catch (const __cxxabiv1::__forced_unwind&)\n+\t  {\n+\t    // make the shared state ready on thread cancellation\n+\t    if (static_cast<bool>(_M_result))\n+\t      this->_M_break_promise(std::move(_M_result));\n+\t    __throw_exception_again;\n+\t  }\n+      }\n+\n       typedef __future_base::_Ptr<_Result<_Res>> _Ptr_type;\n       _Ptr_type _M_result;\n       _BoundFn _M_fn;\n     };\n \n-  template<typename _BoundFn>\n-    inline std::shared_ptr<__future_base::_State_base>\n-    __future_base::_S_make_deferred_state(_BoundFn&& __fn)\n-    {\n-      typedef typename remove_reference<_BoundFn>::type __fn_type;\n-      typedef _Deferred_state<__fn_type> __state_type;\n-      return std::make_shared<__state_type>(std::move(__fn));\n-    }\n-\n-  template<typename _BoundFn>\n-    inline std::shared_ptr<__future_base::_State_base>\n-    __future_base::_S_make_async_state(_BoundFn&& __fn)\n-    {\n-      typedef typename remove_reference<_BoundFn>::type __fn_type;\n-      typedef _Async_state_impl<__fn_type> __state_type;\n-      return std::make_shared<__state_type>(std::move(__fn));\n-    }\n-\n \n   /// async\n   template<typename _Fn, typename... _Args>\n     _GLIBCXX_NODISCARD future<__async_result_of<_Fn, _Args...>>\n     async(launch __policy, _Fn&& __fn, _Args&&... __args)\n     {\n+      using _Wr = std::thread::_Call_wrapper<_Fn, _Args...>;\n+      using _As = __future_base::_Async_state_impl<_Wr>;\n+      using _Ds = __future_base::_Deferred_state<_Wr>;\n+\n       std::shared_ptr<__future_base::_State_base> __state;\n       if ((__policy & launch::async) == launch::async)\n \t{\n \t  __try\n \t    {\n-\t      __state = __future_base::_S_make_async_state(\n-\t\t  std::thread::__make_invoker(std::forward<_Fn>(__fn),\n-\t\t\t\t\t      std::forward<_Args>(__args)...)\n-\t\t  );\n+\t      __state = std::make_shared<_As>(std::forward<_Fn>(__fn),\n+\t\t\t\t\t      std::forward<_Args>(__args)...);\n \t    }\n #if __cpp_exceptions\n \t  catch(const system_error& __e)\n@@ -1754,11 +1742,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n       if (!__state)\n \t{\n-\t  __state = __future_base::_S_make_deferred_state(\n-\t      std::thread::__make_invoker(std::forward<_Fn>(__fn),\n-\t\t\t\t\t  std::forward<_Args>(__args)...));\n+\t  __state = std::make_shared<_Ds>(std::forward<_Fn>(__fn),\n+\t\t\t\t\t  std::forward<_Args>(__args)...);\n \t}\n-      return future<__async_result_of<_Fn, _Args...>>(__state);\n+      return future<__async_result_of<_Fn, _Args...>>(std::move(__state));\n     }\n \n   /// async, potential overload"}, {"sha": "887ee579962738458d28d9cbeedc04a47b7d8b18", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb1b7f087bdd028000fd8f84e74b20adccc9d5bb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb1b7f087bdd028000fd8f84e74b20adccc9d5bb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=bb1b7f087bdd028000fd8f84e74b20adccc9d5bb", "patch": "@@ -145,11 +145,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #else\n \tauto __depend = nullptr;\n #endif\n-\t// A call wrapper holding tuple{DECAY_COPY(__f), DECAY_COPY(__args)...}\n-\tusing _Invoker_type = _Invoker<__decayed_tuple<_Callable, _Args...>>;\n-\n-\t_M_start_thread(_S_make_state<_Invoker_type>(\n-\t      std::forward<_Callable>(__f), std::forward<_Args>(__args)...),\n+\tusing _Wrapper = _Call_wrapper<_Callable, _Args...>;\n+\t// Create a call wrapper with DECAY_COPY(__f) as its target object\n+\t// and DECAY_COPY(__args)... as its bound argument entities.\n+\t_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(\n+\t      std::forward<_Callable>(__f), std::forward<_Args>(__args)...)),\n \t    __depend);\n       }\n \n@@ -220,13 +220,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     void\n     _M_start_thread(_State_ptr, void (*)());\n \n-    template<typename _Callable, typename... _Args>\n-      static _State_ptr\n-      _S_make_state(_Args&&... __args)\n-      {\n-\tusing _Impl = _State_impl<_Callable>;\n-\treturn _State_ptr{new _Impl{std::forward<_Args>(__args)...}};\n-      }\n #if _GLIBCXX_THREAD_ABI_COMPAT\n   public:\n     struct _Impl_base;\n@@ -274,20 +267,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n       };\n \n-    template<typename... _Tp>\n-      using __decayed_tuple = tuple<typename decay<_Tp>::type...>;\n-\n   public:\n-    // Returns a call wrapper that stores\n-    // tuple{DECAY_COPY(__callable), DECAY_COPY(__args)...}.\n-    template<typename _Callable, typename... _Args>\n-      static _Invoker<__decayed_tuple<_Callable, _Args...>>\n-      __make_invoker(_Callable&& __callable, _Args&&... __args)\n-      {\n-\treturn { __decayed_tuple<_Callable, _Args...>{\n-\t    std::forward<_Callable>(__callable), std::forward<_Args>(__args)...\n-\t} };\n-      }\n+    template<typename... _Tp>\n+      using _Call_wrapper = _Invoker<tuple<typename decay<_Tp>::type...>>;\n   };\n \n   inline void"}, {"sha": "0771d638cd17fe3014c458d677100ba243321caf", "filename": "libstdc++-v3/testsuite/30_threads/async/69724.cc", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb1b7f087bdd028000fd8f84e74b20adccc9d5bb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2F69724.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb1b7f087bdd028000fd8f84e74b20adccc9d5bb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2F69724.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2F69724.cc?ref=bb1b7f087bdd028000fd8f84e74b20adccc9d5bb", "patch": "@@ -0,0 +1,119 @@\n+// Copyright (C) 2019-2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run }\n+// { dg-options \"-pthread\"  }\n+// { dg-require-effective-target c++11 }\n+// { dg-require-effective-target pthread }\n+// { dg-require-gthreads \"\" }\n+\n+#include <future>\n+#include <testsuite_rvalref.h>\n+\n+struct F : __gnu_test::copycounter\n+{\n+  F() = default;\n+\n+  F(const F&) = default;\n+\n+  // Move constructor copies base class, to use counter:\n+  F(F&& f) : copycounter(f) { f.valid = false; }\n+\n+  void run() { VERIFY(this->valid); }\n+};\n+\n+void\n+test01()\n+{\n+  std::future<void> fut;\n+\n+  F::copycount = 0;\n+  fut = std::async(&F::run, F{});\n+  VERIFY( F::copycount == 1 );\n+  fut.get();\n+  VERIFY( F::copycount == 1 );\n+\n+  F::copycount = 0;\n+  fut = std::async(std::launch::async, &F::run, F{});\n+  VERIFY( F::copycount == 1 );\n+  fut.get();\n+  VERIFY( F::copycount == 1 );\n+\n+  F::copycount = 0;\n+  fut = std::async(std::launch::deferred, &F::run, F{});\n+  VERIFY( F::copycount == 1 );\n+  fut.get();\n+  VERIFY( F::copycount == 1 );\n+}\n+\n+void\n+test02()\n+{\n+  std::future<void> fut;\n+  const F f;\n+\n+  F::copycount = 0;\n+  fut = std::async(&F::run, f);\n+  VERIFY( F::copycount == 1 );\n+  fut.get();\n+  VERIFY( F::copycount == 1 );\n+\n+  F::copycount = 0;\n+  fut = std::async(std::launch::async, &F::run, f);\n+  VERIFY( F::copycount == 1 );\n+  fut.get();\n+  VERIFY( F::copycount == 1 );\n+\n+  F::copycount = 0;\n+  fut = std::async(std::launch::deferred, &F::run, f);\n+  VERIFY( F::copycount == 1 );\n+  fut.get();\n+  VERIFY( F::copycount == 1 );\n+}\n+\n+void\n+test03()\n+{\n+  std::future<void> fut;\n+  F f;\n+\n+  F::copycount = 0;\n+  fut = std::async(&F::run, std::ref(f));\n+  VERIFY( F::copycount == 0 );\n+  fut.get();\n+  VERIFY( F::copycount == 0 );\n+\n+  F::copycount = 0;\n+  fut = std::async(std::launch::async, &F::run, std::ref(f));\n+  VERIFY( F::copycount == 0 );\n+  fut.get();\n+  VERIFY( F::copycount == 0 );\n+\n+  F::copycount = 0;\n+  fut = std::async(std::launch::deferred, &F::run, std::ref(f));\n+  VERIFY( F::copycount == 0 );\n+  fut.get();\n+  VERIFY( F::copycount == 0 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}]}