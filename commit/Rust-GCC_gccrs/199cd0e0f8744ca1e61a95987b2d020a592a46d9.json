{"sha": "199cd0e0f8744ca1e61a95987b2d020a592a46d9", "node_id": "C_kwDOANBUbNoAKDE5OWNkMGUwZjg3NDRjYTFlNjFhOTU5ODdiMmQwMjBhNTkyYTQ2ZDk", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-21T12:29:06Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-21T13:23:07Z"}, "message": "tree-optimization/100089 - BB vectorization of if-converted loop bodies\n\nThe PR complains that when we only partially BB vectorize an\nif-converted loop body that this can leave unvectorized code\nunconditionally executed and thus effectively slow down code.\nFor -O2 we already mitigated the issue by not doing BB vectorization\nwhen not all if-converted stmts were covered but the issue is\npresent with -O3 as well.  Thus the following simply extends the\nfix to cover all but the unlimited cost models.  It is after all\nvery likely that we vectorize some stmts, if only a single\npaired store.\n\n2022-01-21  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/100089\n\t* tree-vect-slp.cc (vect_slp_region): Reject BB vectorization\n\tof if-converted loops with unvectorized COND_EXPRs for\n\tall but the unlimited cost models.", "tree": {"sha": "b06960797e39b8d674a77c2e6dc6fe616cd14d26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b06960797e39b8d674a77c2e6dc6fe616cd14d26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/199cd0e0f8744ca1e61a95987b2d020a592a46d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/199cd0e0f8744ca1e61a95987b2d020a592a46d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/199cd0e0f8744ca1e61a95987b2d020a592a46d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/199cd0e0f8744ca1e61a95987b2d020a592a46d9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d47aae7cd4bb4dbf1e59a52c2a3f127151c8fab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d47aae7cd4bb4dbf1e59a52c2a3f127151c8fab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d47aae7cd4bb4dbf1e59a52c2a3f127151c8fab"}], "stats": {"total": 7, "additions": 3, "deletions": 4}, "files": [{"sha": "926106c4ecd87f7a07d75480b602192bc402caf5", "filename": "gcc/tree-vect-slp.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/199cd0e0f8744ca1e61a95987b2d020a592a46d9/gcc%2Ftree-vect-slp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/199cd0e0f8744ca1e61a95987b2d020a592a46d9/gcc%2Ftree-vect-slp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.cc?ref=199cd0e0f8744ca1e61a95987b2d020a592a46d9", "patch": "@@ -5906,9 +5906,8 @@ vect_slp_region (vec<basic_block> bbs, vec<data_reference_p> datarefs,\n \t      profitable_subgraphs.safe_push (instance);\n \t    }\n \n-\t  /* When we're vectorizing an if-converted loop body with the\n-\t     very-cheap cost model make sure we vectorized all if-converted\n-\t     code.  */\n+\t  /* When we're vectorizing an if-converted loop body make sure\n+\t     we vectorized all if-converted code.  */\n \t  if (!profitable_subgraphs.is_empty ()\n \t      && orig_loop)\n \t    {\n@@ -5924,7 +5923,7 @@ vect_slp_region (vec<basic_block> bbs, vec<data_reference_p> datarefs,\n \t\t      gimple_set_visited (gsi_stmt (gsi), false);\n \t\t      continue;\n \t\t    }\n-\t\t  if (flag_vect_cost_model != VECT_COST_MODEL_VERY_CHEAP)\n+\t\t  if (flag_vect_cost_model == VECT_COST_MODEL_UNLIMITED)\n \t\t    continue;\n \n \t\t  if (gassign *ass = dyn_cast <gassign *> (gsi_stmt (gsi)))"}]}