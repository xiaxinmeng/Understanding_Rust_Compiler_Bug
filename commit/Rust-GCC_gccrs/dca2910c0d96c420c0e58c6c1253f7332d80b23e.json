{"sha": "dca2910c0d96c420c0e58c6c1253f7332d80b23e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNhMjkxMGMwZDk2YzQyMGMwZTU4YzZjMTI1M2Y3MzMyZDgwYjIzZQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2016-10-17T16:52:44Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2016-10-17T16:52:44Z"}, "message": "test_align-7.c: Use long long instead of long.\n\n2016-10-17  Andrew Pinski  <apinski@cavium.com>\n\n        * gcc.target/aarch64/aapcs64/test_align-7.c: Use long\n        long instead of long.\n        * gcc.target/aarch64/cinc_common_1.c: Likewise.\n        * gcc.target/aarch64/combine_bfi_1.c: Likewise.\n        * gcc.target/aarch64/fmul_fcvt_1.c: Likewise.\n        * gcc.target/aarch64/mult-synth_4.c: Likewise.\n        * gcc.target/aarch64/pr68102_1.c: Likewise.\n        * gcc.target/aarch64/target_attr_3.c: Likewise.\n\nFrom-SVN: r241259", "tree": {"sha": "7e4f359ae07ecdff9e01cad7714e5a7dd5792fe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e4f359ae07ecdff9e01cad7714e5a7dd5792fe5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dca2910c0d96c420c0e58c6c1253f7332d80b23e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dca2910c0d96c420c0e58c6c1253f7332d80b23e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dca2910c0d96c420c0e58c6c1253f7332d80b23e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dca2910c0d96c420c0e58c6c1253f7332d80b23e/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d4d78403cbd2fe450425ce8e9e42c8b14b8fca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d4d78403cbd2fe450425ce8e9e42c8b14b8fca9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d4d78403cbd2fe450425ce8e9e42c8b14b8fca9"}], "stats": {"total": 61, "additions": 36, "deletions": 25}, "files": [{"sha": "c65cfe066e7c13390e37a626e6a2fdbbfbc20215", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca2910c0d96c420c0e58c6c1253f7332d80b23e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca2910c0d96c420c0e58c6c1253f7332d80b23e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dca2910c0d96c420c0e58c6c1253f7332d80b23e", "patch": "@@ -1,3 +1,14 @@\n+2016-10-17  Andrew Pinski  <apinski@cavium.com>\n+\n+\t* gcc.target/aarch64/aapcs64/test_align-7.c: Use long\n+\tlong instead of long.\n+\t* gcc.target/aarch64/cinc_common_1.c: Likewise.\n+\t* gcc.target/aarch64/combine_bfi_1.c: Likewise.\n+\t* gcc.target/aarch64/fmul_fcvt_1.c: Likewise.\n+\t* gcc.target/aarch64/mult-synth_4.c: Likewise.\n+\t* gcc.target/aarch64/pr68102_1.c: Likewise.\n+\t* gcc.target/aarch64/target_attr_3.c: Likewise.\n+\n 2016-10-17  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/77988"}, {"sha": "dac8e00317e2ee9d8a4b6fb6c771035f656d0ddc", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_align-7.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca2910c0d96c420c0e58c6c1253f7332d80b23e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca2910c0d96c420c0e58c6c1253f7332d80b23e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-7.c?ref=dca2910c0d96c420c0e58c6c1253f7332d80b23e", "patch": "@@ -7,8 +7,8 @@\n \n struct s\n   {\n-    long x;\n-    long y;\n+    long long x;\n+    long long y;\n   };\n \n /* This still has size 16, so is still passed by value.  */"}, {"sha": "f93364f74ba04e8dc11914a5a1bc342edf5e0751", "filename": "gcc/testsuite/gcc.target/aarch64/cinc_common_1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca2910c0d96c420c0e58c6c1253f7332d80b23e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcinc_common_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca2910c0d96c420c0e58c6c1253f7332d80b23e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcinc_common_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcinc_common_1.c?ref=dca2910c0d96c420c0e58c6c1253f7332d80b23e", "patch": "@@ -15,14 +15,14 @@ barsi (int x)\n   return x > 100 ? x + 4 : x + 3;\n }\n \n-long\n-foodi (long x)\n+long long\n+foodi (long long x)\n {\n   return x > 100 ? x - 2 : x - 1;\n }\n \n-long\n-bardi (long x)\n+long long\n+bardi (long long x)\n {\n   return x > 100 ? x + 4 : x + 3;\n }"}, {"sha": "9cc3bdb3ddfc286bfb6c079aaba27fb5edb1806c", "filename": "gcc/testsuite/gcc.target/aarch64/combine_bfi_1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca2910c0d96c420c0e58c6c1253f7332d80b23e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcombine_bfi_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca2910c0d96c420c0e58c6c1253f7332d80b23e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcombine_bfi_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcombine_bfi_1.c?ref=dca2910c0d96c420c0e58c6c1253f7332d80b23e", "patch": "@@ -25,8 +25,8 @@ f4 (int x, int y)\n   return (x & ~0xff) | (y & 0xff);\n }\n \n-long\n-f5 (long x, long y)\n+long long\n+f5 (long long x, long long y)\n {\n   return (x & ~0xffffffffull) | (y & 0xffffffff);\n }"}, {"sha": "f78f6ee0f8eb38cafa53612899153d8faf7e60bf", "filename": "gcc/testsuite/gcc.target/aarch64/fmul_fcvt_1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca2910c0d96c420c0e58c6c1253f7332d80b23e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmul_fcvt_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca2910c0d96c420c0e58c6c1253f7332d80b23e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmul_fcvt_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmul_fcvt_1.c?ref=dca2910c0d96c420c0e58c6c1253f7332d80b23e", "patch": "@@ -27,13 +27,13 @@ ulsffoo##__a (float x)\t\\\n }\n \n #define FUNC_DEFD(__a)\t\\\n-long\t\t\t\\\n+long long\t\t\t\\\n dffoo##__a (double x)\t\\\n {\t\t\t\\\n   return x * __a##.0;\t\\\n }\t\t\t\\\n \t\t\t\\\n-unsigned long\t\t\\\n+unsigned long long\t\\\n udffoo##__a (double x)\t\\\n {\t\t\t\\\n   return x * __a##.0;\t\\\n@@ -101,18 +101,18 @@ do\t\t\t\t\t\t\t\t\\\n       __builtin_abort ();\t\t\t\t\t\\\n     if (usffoo##__a (__b) != (unsigned int)(__b * __a))\t\\\n       __builtin_abort ();\t\t\t\t\t\\\n-    if (lsffoo##__a (__b) != (long)(__b * __a))\t\t\\\n+    if (lsffoo##__a (__b) != (long long)(__b * __a))\t\t\\\n       __builtin_abort ();\t\t\t\t\t\\\n-    if (ulsffoo##__a (__b) != (unsigned long)(__b * __a))\t\\\n+    if (ulsffoo##__a (__b) != (unsigned long long)(__b * __a))\t\\\n       __builtin_abort ();\t\t\t\t\t\\\n   } while (0)\n \n #define FUNC_TESTD(__a, __b)\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n-    if (dffoo##__a (__b) != (long)(__b * __a))\t\t\t\\\n+    if (dffoo##__a (__b) != (long long)(__b * __a))\t\t\\\n       __builtin_abort ();\t\t\t\t\t\\\n-    if (udffoo##__a (__b) != (unsigned long)(__b * __a))\t\\\n+    if (udffoo##__a (__b) != (unsigned long long)(__b * __a))\t\\\n       __builtin_abort ();\t\t\t\t\t\\\n     if (sdffoo##__a (__b) != (int)(__b * __a))\t\t\t\\\n       __builtin_abort ();\t\t\t\t\t\\"}, {"sha": "a37786f366174e9c55cd7d45371f9794be568a02", "filename": "gcc/testsuite/gcc.target/aarch64/mult-synth_4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca2910c0d96c420c0e58c6c1253f7332d80b23e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmult-synth_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca2910c0d96c420c0e58c6c1253f7332d80b23e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmult-synth_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmult-synth_4.c?ref=dca2910c0d96c420c0e58c6c1253f7332d80b23e", "patch": "@@ -1,10 +1,10 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mcpu=cortex-a57 -save-temps\" } */\n \n-long\n+long long\n foo (int x, int y)\n {\n-   return (long)x * 6L;\n+   return (long long)x * 6LL;\n }\n \n /* { dg-final { scan-assembler-times \"smull\\tx\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+\" 1 } } */"}, {"sha": "5bd81d884d75eaa654c9ea86a4d86340b8cca451", "filename": "gcc/testsuite/gcc.target/aarch64/pr68102_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca2910c0d96c420c0e58c6c1253f7332d80b23e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr68102_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca2910c0d96c420c0e58c6c1253f7332d80b23e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr68102_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr68102_1.c?ref=dca2910c0d96c420c0e58c6c1253f7332d80b23e", "patch": "@@ -3,7 +3,7 @@\n \n typedef __Float64x1_t float64x1_t;\n \n-typedef long int64_t;\n+typedef long long int64_t;\n \n extern int64_t bar (float64x1_t f);\n "}, {"sha": "9f9c27654f6cfcceb65f32d1c4cf3f8fd8b13bfb", "filename": "gcc/testsuite/gcc.target/aarch64/target_attr_3.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dca2910c0d96c420c0e58c6c1253f7332d80b23e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dca2910c0d96c420c0e58c6c1253f7332d80b23e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_3.c?ref=dca2910c0d96c420c0e58c6c1253f7332d80b23e", "patch": "@@ -5,25 +5,25 @@\n    and the fix is applied once.  */\n \n __attribute__ ((target (\"fix-cortex-a53-835769\")))\n-unsigned long\n-test (unsigned long a, double b, unsigned long c,\n-      unsigned long d, unsigned long *e)\n+unsigned long long\n+test (unsigned long long a, double b, unsigned long long c,\n+      unsigned long long d, unsigned long  long *e)\n {\n   double result;\n-  volatile unsigned long tmp = *e;\n+  volatile unsigned long long tmp = *e;\n   __asm__ __volatile (\"// %0, %1\"\n \t\t\t: \"=w\" (result)\n \t\t\t: \"0\" (b)\n \t\t\t:    /* No clobbers.  */);\n   return c * d + d;\n }\n \n-unsigned long\n-test2 (unsigned long a, double b, unsigned long c,\n-       unsigned long d, unsigned long *e)\n+unsigned long long\n+test2 (unsigned long long a, double b, unsigned long long c,\n+       unsigned long long d, unsigned long long *e)\n {\n   double result;\n-  volatile unsigned long tmp = *e;\n+  volatile unsigned long long tmp = *e;\n   __asm__ __volatile (\"// %0, %1\"\n \t\t\t: \"=w\" (result)\n \t\t\t: \"0\" (b)"}]}