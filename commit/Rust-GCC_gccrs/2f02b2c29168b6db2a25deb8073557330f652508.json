{"sha": "2f02b2c29168b6db2a25deb8073557330f652508", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYwMmIyYzI5MTY4YjZkYjJhMjVkZWI4MDczNTU3MzMwZjY1MjUwOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-11-13T17:26:41Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-11-13T17:26:41Z"}, "message": "re PR lto/81351 (Many LTO testcases FAIL)\n\n\tPR lto/81351\n\t* debug.h (dwarf2out_do_eh_frame): Declare.\n\t* dwarf2cfi.c (dwarf2out_do_eh_frame): New predicate.\n\t(dwarf2out_do_frame): Use it.\n\t(dwarf2out_do_cfi_asm): Likewise.\n\t* dwarf2out.c (dwarf2out_frame_finish): Likewise.\n\t(dwarf2out_assembly_start): Likewise.\n\t(dwarf2out_begin_prologue): Fix comment.\n\t* toplev.c (compile_file): Always call dwarf2out_frame_finish\n\tif the target needs either debug or unwind DWARF2 info.\n\t* lto-opts.c (lto_write_options): Do not save -fexceptions,\n\t-fnon-call-exceptions, -ffp-contract, -fmath-errno, -fsigned-zeros,\n\t-ftrapping-math, -ftrapv and -fwrapv.\n\nFrom-SVN: r254697", "tree": {"sha": "7258aea2ab239cf5e6c08384f4eb1d2d0464e1a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7258aea2ab239cf5e6c08384f4eb1d2d0464e1a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f02b2c29168b6db2a25deb8073557330f652508", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f02b2c29168b6db2a25deb8073557330f652508", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f02b2c29168b6db2a25deb8073557330f652508", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f02b2c29168b6db2a25deb8073557330f652508/comments", "author": null, "committer": null, "parents": [{"sha": "41f0e8194de366399afb726a6862843d81f896a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41f0e8194de366399afb726a6862843d81f896a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41f0e8194de366399afb726a6862843d81f896a3"}], "stats": {"total": 120, "additions": 38, "deletions": 82}, "files": [{"sha": "241e9ca6ab1e7bfe5503affc0693d2a8973a00b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f02b2c29168b6db2a25deb8073557330f652508/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f02b2c29168b6db2a25deb8073557330f652508/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f02b2c29168b6db2a25deb8073557330f652508", "patch": "@@ -1,3 +1,19 @@\n+2017-11-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR lto/81351\n+\t* debug.h (dwarf2out_do_eh_frame): Declare.\n+\t* dwarf2cfi.c (dwarf2out_do_eh_frame): New predicate.\n+\t(dwarf2out_do_frame): Use it.\n+\t(dwarf2out_do_cfi_asm): Likewise.\n+\t* dwarf2out.c (dwarf2out_frame_finish): Likewise.\n+\t(dwarf2out_assembly_start): Likewise.\n+\t(dwarf2out_begin_prologue): Fix comment.\n+\t* toplev.c (compile_file): Always call dwarf2out_frame_finish\n+\tif the target needs either debug or unwind DWARF2 info.\n+\t* lto-opts.c (lto_write_options): Do not save -fexceptions,\n+\t-fnon-call-exceptions, -ffp-contract, -fmath-errno, -fsigned-zeros,\n+\t-ftrapping-math, -ftrapv and -fwrapv.\n+\n 2017-11-13  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* cgraph.c (cgraph_edge::sreal_frequency): New function."}, {"sha": "277d990c20f0e991a828ea534e4ed64f6d2527ee", "filename": "gcc/debug.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f02b2c29168b6db2a25deb8073557330f652508/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f02b2c29168b6db2a25deb8073557330f652508/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=2f02b2c29168b6db2a25deb8073557330f652508", "patch": "@@ -241,8 +241,7 @@ extern void dwarf2out_vms_end_prologue (unsigned int, const char *);\n extern void dwarf2out_vms_begin_epilogue (unsigned int, const char *);\n extern void dwarf2out_end_epilogue (unsigned int, const char *);\n extern void dwarf2out_frame_finish (void);\n-/* Decide whether we want to emit frame unwind information for the current\n-   translation unit.  */\n+extern bool dwarf2out_do_eh_frame (void);\n extern bool dwarf2out_do_frame (void);\n extern bool dwarf2out_do_cfi_asm (void);\n extern void dwarf2out_switch_text_section (void);"}, {"sha": "62117e7c8505959b3665394c987437df7cadc434", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f02b2c29168b6db2a25deb8073557330f652508/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f02b2c29168b6db2a25deb8073557330f652508/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=2f02b2c29168b6db2a25deb8073557330f652508", "patch": "@@ -3402,6 +3402,17 @@ debug_cfi_row (dw_cfi_row *row)\n    This variable is tri-state, with 0 unset, >0 true, <0 false.  */\n static GTY(()) signed char saved_do_cfi_asm = 0;\n \n+/* Decide whether to emit EH frame unwind information for the current\n+   translation unit.  */\n+\n+bool\n+dwarf2out_do_eh_frame (void)\n+{\n+  return\n+    (flag_unwind_tables || flag_exceptions)\n+    && targetm_common.except_unwind_info (&global_options) == UI_DWARF2;\n+}\n+\n /* Decide whether we want to emit frame unwind information for the current\n    translation unit.  */\n \n@@ -3420,8 +3431,7 @@ dwarf2out_do_frame (void)\n   if (targetm.debug_unwind_info () == UI_DWARF2)\n     return true;\n \n-  if ((flag_unwind_tables || flag_exceptions)\n-      && targetm_common.except_unwind_info (&global_options) == UI_DWARF2)\n+  if (dwarf2out_do_eh_frame ())\n     return true;\n \n   return false;\n@@ -3456,9 +3466,7 @@ dwarf2out_do_cfi_asm (void)\n \n   /* If we can't get the assembler to emit only .debug_frame, and we don't need\n      dwarf2 unwind info for exceptions, then emit .debug_frame by hand.  */\n-  if (!HAVE_GAS_CFI_SECTIONS_DIRECTIVE\n-      && !flag_unwind_tables && !flag_exceptions\n-      && targetm_common.except_unwind_info (&global_options) != UI_DWARF2)\n+  if (!HAVE_GAS_CFI_SECTIONS_DIRECTIVE && !dwarf2out_do_eh_frame ())\n     return false;\n \n   /* Success!  */"}, {"sha": "df854672724f223ea42b6b06a953852077c295cc", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f02b2c29168b6db2a25deb8073557330f652508/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f02b2c29168b6db2a25deb8073557330f652508/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=2f02b2c29168b6db2a25deb8073557330f652508", "patch": "@@ -263,7 +263,6 @@ static GTY(()) int dw2_string_counter;\n static GTY(()) bool have_multiple_function_sections = false;\n \n /* Whether the default text and cold text sections have been used at all.  */\n-\n static GTY(()) bool text_section_used = false;\n static GTY(()) bool cold_text_section_used = false;\n \n@@ -1060,7 +1059,7 @@ dwarf2out_begin_prologue (unsigned int line ATTRIBUTE_UNUSED,\n   dup_label = xstrdup (label);\n   current_function_func_begin_label = dup_label;\n \n-  /* We can elide the fde allocation if we're not emitting debug info.  */\n+  /* We can elide FDE allocation if we're not emitting frame unwind info.  */\n   if (!do_frame)\n     return;\n \n@@ -1180,8 +1179,7 @@ dwarf2out_frame_finish (void)\n     output_call_frame_info (0);\n \n   /* Output another copy for the unwinder.  */\n-  if ((flag_unwind_tables || flag_exceptions)\n-      && targetm_common.except_unwind_info (&global_options) == UI_DWARF2)\n+  if (dwarf2out_do_eh_frame ())\n     output_call_frame_info (1);\n }\n \n@@ -27522,8 +27520,7 @@ dwarf2out_assembly_start (void)\n \n   if (HAVE_GAS_CFI_SECTIONS_DIRECTIVE\n       && dwarf2out_do_cfi_asm ()\n-      && (!(flag_unwind_tables || flag_exceptions)\n-\t  || targetm_common.except_unwind_info (&global_options) != UI_DWARF2))\n+      && !dwarf2out_do_eh_frame ())\n     fprintf (asm_out_file, \"\\t.cfi_sections\\t.debug_frame\\n\");\n }\n "}, {"sha": "e39f05d0e9c4265a19ced65d084c0488bdb71dd3", "filename": "gcc/lto-opts.c", "status": "modified", "additions": 2, "deletions": 65, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f02b2c29168b6db2a25deb8073557330f652508/gcc%2Flto-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f02b2c29168b6db2a25deb8073557330f652508/gcc%2Flto-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-opts.c?ref=2f02b2c29168b6db2a25deb8073557330f652508", "patch": "@@ -70,73 +70,10 @@ lto_write_options (void)\n \n   obstack_init (&temporary_obstack);\n \n-  /* Output options that affect GIMPLE IL semantics and are implicitly\n-     enabled by the frontend.\n-     This for now includes an explicit set of options that we also handle\n-     explicitly in lto-wrapper.c.  In the end the effects on GIMPLE IL\n-     semantics should be explicitely encoded in the IL or saved per\n-     function rather than per compilation unit.  */\n-  /* -fexceptions causes the EH machinery to be initialized, enabling\n-     generation of unwind data so that explicit throw() calls work.  */\n-  if (!global_options_set.x_flag_exceptions\n-      && global_options.x_flag_exceptions)\n-    append_to_collect_gcc_options (&temporary_obstack, &first_p,\n-\t\t\t\t   \"-fexceptions\");\n-  /* -fnon-call-exceptions changes the generation of exception\n-      regions.  It is enabled implicitly by the Go frontend.  */\n-  if (!global_options_set.x_flag_non_call_exceptions\n-      && global_options.x_flag_non_call_exceptions)\n-    append_to_collect_gcc_options (&temporary_obstack, &first_p,\n-\t\t\t\t   \"-fnon-call-exceptions\");\n-  /* The default -ffp-contract changes depending on the language\n-     standard.  Pass thru conservative standard settings.  */\n-  if (!global_options_set.x_flag_fp_contract_mode)\n-    switch (global_options.x_flag_fp_contract_mode)\n-      {\n-      case FP_CONTRACT_OFF:\n-\tappend_to_collect_gcc_options (&temporary_obstack, &first_p,\n-\t\t\t\t       \"-ffp-contract=off\");\n-\tbreak;\n-      case FP_CONTRACT_ON:\n-\tappend_to_collect_gcc_options (&temporary_obstack, &first_p,\n-\t\t\t\t       \"-ffp-contract=on\");\n-\tbreak;\n-      case FP_CONTRACT_FAST:\n-\t/* Nothing.  That merges conservatively and is the default for LTO.  */\n-\tbreak;\n-      default:\n-\tgcc_unreachable ();\n-      }\n-  /* The default -fmath-errno, -fsigned-zeros and -ftrapping-math change\n-     depending on the language (they can be disabled by the Ada front-end).\n-     Pass thru conservative standard settings.  */\n-  if (!global_options_set.x_flag_errno_math)\n-    append_to_collect_gcc_options (&temporary_obstack, &first_p,\n-\t\t\t\t   global_options.x_flag_errno_math\n-\t\t\t\t   ? \"-fmath-errno\"\n-\t\t\t\t   : \"-fno-math-errno\");\n-  if (!global_options_set.x_flag_signed_zeros)\n-    append_to_collect_gcc_options (&temporary_obstack, &first_p,\n-\t\t\t\t   global_options.x_flag_signed_zeros\n-\t\t\t\t   ? \"-fsigned-zeros\"\n-\t\t\t\t   : \"-fno-signed-zeros\");\n-  if (!global_options_set.x_flag_trapping_math)\n-    append_to_collect_gcc_options (&temporary_obstack, &first_p,\n-\t\t\t\t   global_options.x_flag_trapping_math\n-\t\t\t\t   ? \"-ftrapping-math\"\n-\t\t\t\t   : \"-fno-trapping-math\");\n-  /* We need to merge -f[no-]strict-overflow, -f[no-]wrapv and -f[no-]trapv\n-     conservatively, so stream out their defaults.  */\n-  if (!global_options_set.x_flag_wrapv\n-      && global_options.x_flag_wrapv)\n-    append_to_collect_gcc_options (&temporary_obstack, &first_p, \"-fwrapv\");\n-  if (!global_options_set.x_flag_trapv\n-      && !global_options.x_flag_trapv)\n-    append_to_collect_gcc_options (&temporary_obstack, &first_p, \"-fno-trapv\");\n-\n   if (!global_options_set.x_flag_openmp\n       && !global_options.x_flag_openmp)\n-    append_to_collect_gcc_options (&temporary_obstack, &first_p, \"-fno-openmp\");\n+    append_to_collect_gcc_options (&temporary_obstack, &first_p,\n+\t\t\t\t   \"-fno-openmp\");\n   if (!global_options_set.x_flag_openacc\n       && !global_options.x_flag_openacc)\n     append_to_collect_gcc_options (&temporary_obstack, &first_p,"}, {"sha": "2f154960a170dc2fc0a14a9b6e58a0ba3ebc4788", "filename": "gcc/toplev.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f02b2c29168b6db2a25deb8073557330f652508/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f02b2c29168b6db2a25deb8073557330f652508/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=2f02b2c29168b6db2a25deb8073557330f652508", "patch": "@@ -525,10 +525,9 @@ compile_file (void)\n       /* Do dbx symbols.  */\n       timevar_push (TV_SYMOUT);\n \n-    #if defined DWARF2_DEBUGGING_INFO || defined DWARF2_UNWIND_INFO\n-      if (dwarf2out_do_frame ())\n-\tdwarf2out_frame_finish ();\n-    #endif\n+#if defined DWARF2_DEBUGGING_INFO || defined DWARF2_UNWIND_INFO\n+      dwarf2out_frame_finish ();\n+#endif\n \n       (*debug_hooks->finish) (main_input_filename);\n       timevar_pop (TV_SYMOUT);"}]}