{"sha": "c107334d5c3780a3c78067922b8b2a8caf7ea2b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEwNzMzNGQ1YzM3ODBhM2M3ODA2NzkyMmI4YjJhOGNhZjdlYTJiMA==", "commit": {"author": {"name": "David S. Miller", "email": "davem@tanya.rutgers.edu", "date": "1997-09-23T07:14:07Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-09-23T07:14:07Z"}, "message": "reorg.c (dbr_schedule): At end of this pass...\n\n        * reorg.c (dbr_schedule): At end of this pass, add REG_BR_PRED\n        note holding get_jump_flags() calculation to all JUMP_INSNs.\n        * rtl.h (enum reg_note): New note types REG_BR_PRED and REG_SAVE_AREA.\n        * rtl.c (reg_note_name): Add new note types.\n\nFrom-SVN: r15670", "tree": {"sha": "bacbc60b12bc81575fde04ef6114280a5e5fbc54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bacbc60b12bc81575fde04ef6114280a5e5fbc54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c107334d5c3780a3c78067922b8b2a8caf7ea2b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c107334d5c3780a3c78067922b8b2a8caf7ea2b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c107334d5c3780a3c78067922b8b2a8caf7ea2b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c107334d5c3780a3c78067922b8b2a8caf7ea2b0/comments", "author": null, "committer": null, "parents": [{"sha": "5cd278f39919dc2c8ff16d5b74e096cf3cafba32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cd278f39919dc2c8ff16d5b74e096cf3cafba32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cd278f39919dc2c8ff16d5b74e096cf3cafba32"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "1964beb7f8bfce58962e693025dd9afa52c9f378", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c107334d5c3780a3c78067922b8b2a8caf7ea2b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c107334d5c3780a3c78067922b8b2a8caf7ea2b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c107334d5c3780a3c78067922b8b2a8caf7ea2b0", "patch": "@@ -1,3 +1,10 @@\n+Tue Sep 23 01:15:50 1997  David S. Miller  <davem@tanya.rutgers.edu>\n+\n+\t* reorg.c (dbr_schedule): At end of this pass, add REG_BR_PRED\n+\tnote holding get_jump_flags() calculation to all JUMP_INSNs.\n+\t* rtl.h (enum reg_note): New note types REG_BR_PRED and REG_SAVE_AREA.\n+\t* rtl.c (reg_note_name): Add new note types.\n+\n Tue Sep 23 00:59:54 1997  Jeffrey A Law  (law@cygnus.com)\n \n \t* rtlanal.c (computed_jump_p): Fix typo in last change."}, {"sha": "28553e6583d19803c36fd1a1ead061bc1c63233e", "filename": "gcc/reorg.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c107334d5c3780a3c78067922b8b2a8caf7ea2b0/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c107334d5c3780a3c78067922b8b2a8caf7ea2b0/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=c107334d5c3780a3c78067922b8b2a8caf7ea2b0", "patch": "@@ -4617,5 +4617,22 @@ dbr_schedule (first, file)\n \t    }\n \t}\n     }\n+\n+  /* For all JUMP insns, fill in branch prediction notes, so that during\n+     assembler output a target can set branch prediction bits in the code.\n+     We have to do this now, as up until this point the destinations of\n+     JUMPS can be moved around and changed, but past right here that cannot\n+     happen.  */\n+  for (insn = first; insn; insn = NEXT_INSN (insn))\n+    {\n+      int pred_flags;\n+\n+      if (GET_CODE (insn) != JUMP_INSN)\n+\tcontinue;\n+\n+      pred_flags = get_jump_flags (insn, JUMP_LABEL (insn));\n+      REG_NOTES (insn) = gen_rtx (EXPR_LIST, REG_BR_PRED,\n+\t\t\t\t  GEN_INT (pred_flags), REG_NOTES (insn));\n+    }\n }\n #endif /* DELAY_SLOTS */"}, {"sha": "b61b95ee3521de1618910f7158a5e105a8492cdd", "filename": "gcc/rtl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c107334d5c3780a3c78067922b8b2a8caf7ea2b0/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c107334d5c3780a3c78067922b8b2a8caf7ea2b0/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=c107334d5c3780a3c78067922b8b2a8caf7ea2b0", "patch": "@@ -181,7 +181,8 @@ char *reg_note_name[] = { \"\", \"REG_DEAD\", \"REG_INC\", \"REG_EQUIV\", \"REG_WAS_0\",\n \t\t\t  \"REG_NONNEG\", \"REG_NO_CONFLICT\", \"REG_UNUSED\",\n \t\t\t  \"REG_CC_SETTER\", \"REG_CC_USER\", \"REG_LABEL\",\n \t\t\t  \"REG_DEP_ANTI\", \"REG_DEP_OUTPUT\", \"REG_BR_PROB\",\n-\t\t\t  \"REG_EXEC_COUNT\", \"REG_NOALIAS\" };\n+\t\t\t  \"REG_EXEC_COUNT\", \"REG_NOALIAS\", \"REG_SAVE_AREA\",\n+\t\t\t  \"REG_BR_PRED\" };\n \n /* Allocate an rtx vector of N elements.\n    Store the length, and initialize all elements to zero.  */"}, {"sha": "f95adc5735d22b33cfa0a934ff204e18cdca084a", "filename": "gcc/rtl.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c107334d5c3780a3c78067922b8b2a8caf7ea2b0/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c107334d5c3780a3c78067922b8b2a8caf7ea2b0/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=c107334d5c3780a3c78067922b8b2a8caf7ea2b0", "patch": "@@ -307,7 +307,12 @@ typedef struct rtvec_def{\n    probability that this call won't return.\n      REG_EXEC_COUNT is attached to the first insn of each basic block, and\n    the first insn after each CALL_INSN.  It indicates how many times this\n-   block was executed.  */\n+   block was executed.\n+     REG_SAVE_AREA is used to optimize rtl generated by dynamic stack\n+   allocations for targets where SETJMP_VIA_SAVE_AREA is true.\n+     REG_BR_PRED is attached to JUMP_INSNs only, it holds the branch prediction\n+   flags computed by get_jump_flags() after dbr scheduling is complete.  */\n+\n \n #define REG_NOTES(INSN)\t((INSN)->fld[6].rtx)\n \n@@ -317,7 +322,8 @@ enum reg_note { REG_DEAD = 1, REG_INC = 2, REG_EQUIV = 3, REG_WAS_0 = 4,\n \t\tREG_NONNEG = 8, REG_NO_CONFLICT = 9, REG_UNUSED = 10,\n \t\tREG_CC_SETTER = 11, REG_CC_USER = 12, REG_LABEL = 13,\n \t\tREG_DEP_ANTI = 14, REG_DEP_OUTPUT = 15, REG_BR_PROB = 16,\n-\t\tREG_EXEC_COUNT = 17, REG_NOALIAS = 18 };\n+\t\tREG_EXEC_COUNT = 17, REG_NOALIAS = 18, REG_SAVE_AREA = 19,\n+\t\tREG_BR_PRED = 20 };\n /* The base value for branch probability notes.  */\n #define REG_BR_PROB_BASE  10000\n "}]}