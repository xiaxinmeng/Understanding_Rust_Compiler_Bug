{"sha": "736d0f28783f12fa042892bc186866dd5101088f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM2ZDBmMjg3ODNmMTJmYTA0Mjg5MmJjMTg2ODY2ZGQ1MTAxMDg4Zg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-02T18:26:56Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-02T18:26:56Z"}, "message": "Add a vec_perm_indices_to_tree helper function\n\nThis patch adds a function for creating a VECTOR_CST from a\nvec_perm_indices, operating directly on the encoding.\n\n2018-01-02  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* vec-perm-indices.h (vec_perm_indices_to_tree): Declare.\n\t* vec-perm-indices.c (vec_perm_indices_to_tree): New function.\n\t* tree-ssa-forwprop.c (simplify_vector_constructor): Use it.\n\t* tree-vect-slp.c (vect_transform_slp_perm_load): Likewise.\n\t* tree-vect-stmts.c (vectorizable_bswap): Likewise.\n\t(vect_gen_perm_mask_any): Likewise.\n\nFrom-SVN: r256096", "tree": {"sha": "54c83634cd4ce7f8d3f8660188d476af4c271b1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54c83634cd4ce7f8d3f8660188d476af4c271b1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/736d0f28783f12fa042892bc186866dd5101088f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/736d0f28783f12fa042892bc186866dd5101088f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/736d0f28783f12fa042892bc186866dd5101088f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/736d0f28783f12fa042892bc186866dd5101088f/comments", "author": null, "committer": null, "parents": [{"sha": "e3342de49cbee48957acc749b9566eee230860be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3342de49cbee48957acc749b9566eee230860be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3342de49cbee48957acc749b9566eee230860be"}], "stats": {"total": 51, "additions": 28, "deletions": 23}, "files": [{"sha": "7fc70c00cfd81b72e92d9eb5eaedeb7840ac9bcb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736d0f28783f12fa042892bc186866dd5101088f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736d0f28783f12fa042892bc186866dd5101088f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=736d0f28783f12fa042892bc186866dd5101088f", "patch": "@@ -1,3 +1,12 @@\n+2018-01-02  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* vec-perm-indices.h (vec_perm_indices_to_tree): Declare.\n+\t* vec-perm-indices.c (vec_perm_indices_to_tree): New function.\n+\t* tree-ssa-forwprop.c (simplify_vector_constructor): Use it.\n+\t* tree-vect-slp.c (vect_transform_slp_perm_load): Likewise.\n+\t* tree-vect-stmts.c (vectorizable_bswap): Likewise.\n+\t(vect_gen_perm_mask_any): Likewise.\n+\n 2018-01-02  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* int-vector-builder.h: New file."}, {"sha": "ff8d976338b9b68190bf87c2567c267d8c55edcc", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736d0f28783f12fa042892bc186866dd5101088f/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736d0f28783f12fa042892bc186866dd5101088f/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=736d0f28783f12fa042892bc186866dd5101088f", "patch": "@@ -2119,10 +2119,7 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n \t  || GET_MODE_SIZE (TYPE_MODE (mask_type))\n \t     != GET_MODE_SIZE (TYPE_MODE (type)))\n \treturn false;\n-      tree_vector_builder mask_elts (mask_type, nelts, 1);\n-      for (i = 0; i < nelts; i++)\n-\tmask_elts.quick_push (build_int_cst (TREE_TYPE (mask_type), sel[i]));\n-      op2 = mask_elts.build ();\n+      op2 = vec_perm_indices_to_tree (mask_type, indices);\n       if (conv_code == ERROR_MARK)\n \tgimple_assign_set_rhs_with_ops (gsi, VEC_PERM_EXPR, orig, orig, op2);\n       else"}, {"sha": "58177ec7d1772592b2d3701bfa0016f73bfbcf2d", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736d0f28783f12fa042892bc186866dd5101088f/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736d0f28783f12fa042892bc186866dd5101088f/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=736d0f28783f12fa042892bc186866dd5101088f", "patch": "@@ -3675,13 +3675,7 @@ vect_transform_slp_perm_load (slp_tree node, vec<tree> dr_chain,\n \t\t  tree mask_vec = NULL_TREE;\n \t\t  \n \t\t  if (! noop_p)\n-\t\t    {\n-\t\t      tree_vector_builder mask_elts (mask_type, nunits, 1);\n-\t\t      for (int l = 0; l < nunits; ++l)\n-\t\t\tmask_elts.quick_push (build_int_cst (mask_element_type,\n-\t\t\t\t\t\t\t     mask[l]));\n-\t\t      mask_vec = mask_elts.build ();\n-\t\t    }\n+\t\t    mask_vec = vec_perm_indices_to_tree (mask_type, indices);\n \n \t\t  if (second_vec_index == -1)\n \t\t    second_vec_index = first_vec_index;"}, {"sha": "8f26320f01803eb62d4266d1cac1373d4f485fd7", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736d0f28783f12fa042892bc186866dd5101088f/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736d0f28783f12fa042892bc186866dd5101088f/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=736d0f28783f12fa042892bc186866dd5101088f", "patch": "@@ -2529,10 +2529,7 @@ vectorizable_bswap (gimple *stmt, gimple_stmt_iterator *gsi,\n       return true;\n     }\n \n-  tree_vector_builder telts (char_vectype, num_bytes, 1);\n-  for (unsigned i = 0; i < num_bytes; ++i)\n-    telts.quick_push (build_int_cst (char_type_node, elts[i]));\n-  tree bswap_vconst = telts.build ();\n+  tree bswap_vconst = vec_perm_indices_to_tree (char_vectype, indices);\n \n   /* Transform.  */\n   vec<tree> vec_oprnds = vNULL;\n@@ -6538,17 +6535,10 @@ vect_gen_perm_mask_any (tree vectype, const vec_perm_indices &sel)\n {\n   tree mask_elt_type, mask_type;\n \n-  unsigned int nunits = sel.length ();\n-  gcc_checking_assert (nunits == TYPE_VECTOR_SUBPARTS (vectype));\n-\n   mask_elt_type = lang_hooks.types.type_for_mode\n     (int_mode_for_mode (TYPE_MODE (TREE_TYPE (vectype))).require (), 1);\n   mask_type = get_vectype_for_scalar_type (mask_elt_type);\n-\n-  tree_vector_builder mask_elts (mask_type, nunits, 1);\n-  for (unsigned int i = 0; i < nunits; ++i)\n-    mask_elts.quick_push (build_int_cst (mask_elt_type, sel[i]));\n-  return mask_elts.build ();\n+  return vec_perm_indices_to_tree (mask_type, sel);\n }\n \n /* Checked version of vect_gen_perm_mask_any.  Asserts can_vec_perm_const_p,"}, {"sha": "558ab2efcf2bf30cec5737747e4cae154eb5a920", "filename": "gcc/vec-perm-indices.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736d0f28783f12fa042892bc186866dd5101088f/gcc%2Fvec-perm-indices.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736d0f28783f12fa042892bc186866dd5101088f/gcc%2Fvec-perm-indices.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec-perm-indices.c?ref=736d0f28783f12fa042892bc186866dd5101088f", "patch": "@@ -152,6 +152,20 @@ tree_to_vec_perm_builder (vec_perm_builder *builder, tree cst)\n   return true;\n }\n \n+/* Return a VECTOR_CST of type TYPE for the permutation vector in INDICES.  */\n+\n+tree\n+vec_perm_indices_to_tree (tree type, const vec_perm_indices &indices)\n+{\n+  gcc_assert (TYPE_VECTOR_SUBPARTS (type) == indices.length ());\n+  tree_vector_builder sel (type, indices.encoding ().npatterns (),\n+\t\t\t   indices.encoding ().nelts_per_pattern ());\n+  unsigned int encoded_nelts = sel.encoded_nelts ();\n+  for (unsigned int i = 0; i < encoded_nelts; i++)\n+    sel.quick_push (build_int_cst (TREE_TYPE (type), indices[i]));\n+  return sel.build ();\n+}\n+\n /* Return a CONST_VECTOR of mode MODE that contains the elements of\n    INDICES.  */\n "}, {"sha": "1048f558d97c6e07a2f60e1f5515aa383fd76725", "filename": "gcc/vec-perm-indices.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736d0f28783f12fa042892bc186866dd5101088f/gcc%2Fvec-perm-indices.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736d0f28783f12fa042892bc186866dd5101088f/gcc%2Fvec-perm-indices.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec-perm-indices.h?ref=736d0f28783f12fa042892bc186866dd5101088f", "patch": "@@ -88,6 +88,7 @@ class vec_perm_indices\n };\n \n bool tree_to_vec_perm_builder (vec_perm_builder *, tree);\n+tree vec_perm_indices_to_tree (tree, const vec_perm_indices &);\n rtx vec_perm_indices_to_rtx (machine_mode, const vec_perm_indices &);\n \n inline"}]}