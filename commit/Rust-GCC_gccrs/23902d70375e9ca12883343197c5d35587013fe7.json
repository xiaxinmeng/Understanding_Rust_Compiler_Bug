{"sha": "23902d70375e9ca12883343197c5d35587013fe7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM5MDJkNzAzNzVlOWNhMTI4ODMzNDMxOTdjNWQzNTU4NzAxM2ZlNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2017-09-19T21:14:11Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-09-19T21:14:11Z"}, "message": "i386.md (*scc_bt<mode>): New insn_and_split pattern.\n\n\t* config/i386/i386.md (*scc_bt<mode>): New insn_and_split pattern.\n\t(*scc_bt<mode>_1): Ditto.\n\t(*scc_bt<mode>_mask): Ditto.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/bt-5.c: New test.\n\t* gcc.target/i386/bt-6.c: Ditto.\n\t* gcc.target/i386/bt-mask-3.c: Ditto.\n\t* gcc.target/i386/bt-mask-4.c: Ditto.\n\nFrom-SVN: r252986", "tree": {"sha": "45eff328143736550cd7506901e953be2196dc9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45eff328143736550cd7506901e953be2196dc9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23902d70375e9ca12883343197c5d35587013fe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23902d70375e9ca12883343197c5d35587013fe7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23902d70375e9ca12883343197c5d35587013fe7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23902d70375e9ca12883343197c5d35587013fe7/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "14a1a59f17a6d78640aaa81b6e22bbc96903d3f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14a1a59f17a6d78640aaa81b6e22bbc96903d3f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14a1a59f17a6d78640aaa81b6e22bbc96903d3f9"}], "stats": {"total": 152, "additions": 152, "deletions": 0}, "files": [{"sha": "9576c8c4f4773a7b2f669350d49220fef8453733", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23902d70375e9ca12883343197c5d35587013fe7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23902d70375e9ca12883343197c5d35587013fe7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23902d70375e9ca12883343197c5d35587013fe7", "patch": "@@ -1,3 +1,9 @@\n+2017-09-19  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*scc_bt<mode>): New insn_and_split pattern.\n+\t(*scc_bt<mode>_1): Ditto.\n+\t(*scc_bt<mode>_mask): Ditto.\n+\n 2017-09-19  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (ix86_split_long_move): Do not handle"}, {"sha": "b1bde14ad5e8c75d718f296ca644f137c9053755", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23902d70375e9ca12883343197c5d35587013fe7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23902d70375e9ca12883343197c5d35587013fe7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=23902d70375e9ca12883343197c5d35587013fe7", "patch": "@@ -11246,6 +11246,98 @@\n \t  (const_string \"SI\")\n \t  (const_string \"<MODE>\")))])\n \n+(define_insn_and_split \"*scc_bt<mode>\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\")\n+  \t(match_operator 1 \"bt_comparison_operator\"\n+\t  [(zero_extract:SWI48\n+\t     (match_operand:SWI48 2 \"nonimmediate_operand\")\n+\t     (const_int 1)\n+\t     (match_operand:SI 3 \"nonmemory_operand\"))\n+\t   (const_int 0)]))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"(TARGET_USE_BT || optimize_function_for_size_p (cfun))\n+   && (CONST_INT_P (operands[3])\n+       ? (INTVAL (operands[3]) < GET_MODE_BITSIZE (<MODE>mode)\n+\t  && INTVAL (operands[3])\n+\t       >= (optimize_function_for_size_p (cfun) ? 8 : 32))\n+       : !memory_operand (operands[2], <MODE>mode))\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(compare:CCC\n+\t  (zero_extract:SWI48\n+\t    (match_dup 2)\n+\t    (const_int 1)\n+\t    (match_dup 3))\n+\t  (const_int 0)))\n+   (set (match_dup 0)\n+\t(match_op_dup 1 [(reg:CCC FLAGS_REG) (const_int 0)]))]\n+{\n+  operands[1] = shallow_copy_rtx (operands[1]);\n+  PUT_CODE (operands[1], reverse_condition (GET_CODE (operands[1])));\n+})\n+\n+(define_insn_and_split \"*scc_bt<mode>_1\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\")\n+  \t(match_operator 1 \"bt_comparison_operator\"\n+\t  [(zero_extract:SWI48\n+\t     (match_operand:SWI48 2 \"register_operand\")\n+\t     (const_int 1)\n+\t     (zero_extend:SI\n+\t       (match_operand:QI 3 \"register_operand\")))\n+\t   (const_int 0)]))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"(TARGET_USE_BT || optimize_function_for_size_p (cfun))\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(compare:CCC\n+\t  (zero_extract:SWI48\n+\t    (match_dup 2)\n+\t    (const_int 1)\n+\t    (match_dup 3))\n+\t  (const_int 0)))\n+   (set (match_dup 0)\n+\t(match_op_dup 1 [(reg:CCC FLAGS_REG) (const_int 0)]))]\n+{\n+  operands[3] = lowpart_subreg (SImode, operands[3], QImode);\n+  operands[1] = shallow_copy_rtx (operands[1]);\n+  PUT_CODE (operands[1], reverse_condition (GET_CODE (operands[1])));\n+})\n+\n+;; Avoid useless masking of bit offset operand.\n+(define_insn_and_split \"*scc_bt<mode>_mask\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\")\n+  \t(match_operator 1 \"bt_comparison_operator\"\n+\t  [(zero_extract:SWI48\n+\t     (match_operand:SWI48 2 \"register_operand\")\n+\t     (const_int 1)\n+\t     (and:SI\n+\t       (match_operand:SI 3 \"register_operand\")\n+\t       (match_operand 4 \"const_int_operand\")))]))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"(TARGET_USE_BT || optimize_function_for_size_p (cfun))\n+   && (INTVAL (operands[4]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n+      == GET_MODE_BITSIZE (<MODE>mode)-1\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(compare:CCC\n+\t  (zero_extract:SWI48\n+\t    (match_dup 2)\n+\t    (const_int 1)\n+\t    (match_dup 3))\n+\t  (const_int 0)))\n+   (set (match_dup 0)\n+\t(match_op_dup 1 [(reg:CCC FLAGS_REG) (const_int 0)]))]\n+{\n+  operands[1] = shallow_copy_rtx (operands[1]);\n+  PUT_CODE (operands[1], reverse_condition (GET_CODE (operands[1])));\n+})\n+\n (define_insn_and_split \"*jcc_bt<mode>\"\n   [(set (pc)\n   \t(if_then_else (match_operator 0 \"bt_comparison_operator\""}, {"sha": "011420575b27935a86b8cc060418120fad2d9f15", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23902d70375e9ca12883343197c5d35587013fe7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23902d70375e9ca12883343197c5d35587013fe7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=23902d70375e9ca12883343197c5d35587013fe7", "patch": "@@ -1,3 +1,10 @@\n+2017-09-19  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/bt-5.c: New test.\n+\t* gcc.target/i386/bt-6.c: Ditto.\n+\t* gcc.target/i386/bt-mask-3.c: Ditto.\n+\t* gcc.target/i386/bt-mask-4.c: Ditto.\n+\n 2017-09-19  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/tree-ssa/pr31146-2.C: Only do scan-tree-dump for c++14_down."}, {"sha": "309adfe291e62a3be5485d04c847d13e5ba0f99d", "filename": "gcc/testsuite/gcc.target/i386/bt-5.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23902d70375e9ca12883343197c5d35587013fe7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23902d70375e9ca12883343197c5d35587013fe7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-5.c?ref=23902d70375e9ca12883343197c5d35587013fe7", "patch": "@@ -0,0 +1,11 @@\n+/* PR target/36473 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=core2\" } */\n+/* { dg-additional-options \"-mregparm=2\" { target ia32 } } */\n+\n+int test(unsigned x, unsigned n)\n+{\n+  return !(x & ( 0x01 << n ));\n+}\n+\n+/* { dg-final { scan-assembler \"btl\\[ \\t\\]\" } } */"}, {"sha": "994ec432e0e5de7d756c3e52128b2038725f5589", "filename": "gcc/testsuite/gcc.target/i386/bt-6.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23902d70375e9ca12883343197c5d35587013fe7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23902d70375e9ca12883343197c5d35587013fe7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-6.c?ref=23902d70375e9ca12883343197c5d35587013fe7", "patch": "@@ -0,0 +1,12 @@\n+/* PR target/36473 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=core2\" } */\n+/* { dg-additional-options \"-mregparm=2\" { target ia32 } } */\n+\n+int test(unsigned long x, unsigned long n)\n+{\n+  return !(x & ( (long)0x01 << n ));\n+}\n+\n+/* { dg-final { scan-assembler \"btl\\[ \\t\\]\" { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler \"btq\\[ \\t\\]\" { target lp64 } } } */"}, {"sha": "bf3a404b0d50b849404ca2dc6a83578cfa205885", "filename": "gcc/testsuite/gcc.target/i386/bt-mask-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23902d70375e9ca12883343197c5d35587013fe7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-mask-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23902d70375e9ca12883343197c5d35587013fe7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-mask-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-mask-3.c?ref=23902d70375e9ca12883343197c5d35587013fe7", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=core2\" } */\n+/* { dg-additional-options \"-mregparm=2\" { target ia32 } } */\n+\n+int test (unsigned x, unsigned n)\n+{\n+  n &= 0x1f;\n+\n+  return !(x & (0x01 << n));\n+}\n+\n+/* { dg-final { scan-assembler-not \"and\\[lq\\]\\[ \\t\\]\" } } */"}, {"sha": "819864686f44102d77f31ca57e08638e2cf0be94", "filename": "gcc/testsuite/gcc.target/i386/bt-mask-4.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23902d70375e9ca12883343197c5d35587013fe7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-mask-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23902d70375e9ca12883343197c5d35587013fe7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-mask-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-mask-4.c?ref=23902d70375e9ca12883343197c5d35587013fe7", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=core2\" } */\n+/* { dg-additional-options \"-mregparm=2\" { target ia32 } } */\n+\n+int test (unsigned long x, unsigned long n)\n+{\n+  n &= 0x3f;\n+\n+  return !(x & ((long)0x01 << n));\n+}\n+\n+/* { dg-final { scan-assembler-not \"and\\[lq\\]\\[ \\t\\]\" } } */"}]}