{"sha": "5f7409731ea5a9ffecfb27527adeae31fb2353a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY3NDA5NzMxZWE1YTlmZmVjZmIyNzUyN2FkZWFlMzFmYjIzNTNhMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-07-05T17:08:52Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-07-05T17:08:52Z"}, "message": "ia64: Use pc_rtx to save the return address.\n\nWhen actually emitting dwarf2, this now produces proper results.\nWhen emitting ia64 unwind info, this removes a hard-coded assumption.\n\n        * config/ia64/ia64.c (ia64_expand_prologue): Use pc_rtx to\n        indicate the return address save.\n        (process_cfa_register): Likewise.\n\nFrom-SVN: r175873", "tree": {"sha": "3365e8fcc1131c939c3e2b950c3d6669eca6b9ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3365e8fcc1131c939c3e2b950c3d6669eca6b9ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f7409731ea5a9ffecfb27527adeae31fb2353a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f7409731ea5a9ffecfb27527adeae31fb2353a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f7409731ea5a9ffecfb27527adeae31fb2353a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f7409731ea5a9ffecfb27527adeae31fb2353a0/comments", "author": null, "committer": null, "parents": [{"sha": "a18801474ab1eaccefe977859bc8b1764dbd0312", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a18801474ab1eaccefe977859bc8b1764dbd0312", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a18801474ab1eaccefe977859bc8b1764dbd0312"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "87515bad37e30ac82e6bf2dbf95b0ac2ff9c656a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f7409731ea5a9ffecfb27527adeae31fb2353a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f7409731ea5a9ffecfb27527adeae31fb2353a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f7409731ea5a9ffecfb27527adeae31fb2353a0", "patch": "@@ -1,5 +1,9 @@\n 2011-07-05  Richard Henderson  <rth@redhat.com>\n \n+\t* config/ia64/ia64.c (ia64_expand_prologue): Use pc_rtx to\n+\tindicate the return address save.\n+\t(process_cfa_register): Likewise.\n+\n \t* config/ia64/ia64.c (ia64_dwarf2out_def_steady_cfa): Remove.\n \t(process_cfa_adjust_cfa, ia64_asm_unwind_emit): Don't call it.\n "}, {"sha": "b37919c957404c0e3b76a9af7c5d34b3fd72c7bc", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f7409731ea5a9ffecfb27527adeae31fb2353a0/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f7409731ea5a9ffecfb27527adeae31fb2353a0/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=5f7409731ea5a9ffecfb27527adeae31fb2353a0", "patch": "@@ -3444,7 +3444,8 @@ ia64_expand_prologue (void)\n           reg_emitted (reg_save_b0);\n \t  insn = emit_move_insn (alt_reg, reg);\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n-\t  add_reg_note (insn, REG_CFA_REGISTER, NULL_RTX);\n+\t  add_reg_note (insn, REG_CFA_REGISTER,\n+\t\t\tgen_rtx_SET (VOIDmode, alt_reg, pc_rtx));\n \n \t  /* Even if we're not going to generate an epilogue, we still\n \t     need to save the register so that EH works.  */\n@@ -9737,20 +9738,22 @@ process_cfa_register (FILE *asm_out_file, rtx pat, bool unwind)\n {\n   rtx dest = SET_DEST (pat);\n   rtx src = SET_SRC (pat);\n-\n   int dest_regno = REGNO (dest);\n-  int src_regno = REGNO (src);\n+  int src_regno;\n \n-  switch (src_regno)\n+  if (src == pc_rtx)\n     {\n-    case BR_REG (0):\n       /* Saving return address pointer.  */\n-      gcc_assert (dest_regno == current_frame_info.r[reg_save_b0]);\n       if (unwind)\n \tfprintf (asm_out_file, \"\\t.save rp, r%d\\n\",\n \t\t ia64_dbx_register_number (dest_regno));\n-      break;\n+      return;\n+    }\n+\n+  src_regno = REGNO (src);\n \n+  switch (src_regno)\n+    {\n     case PR_REG (0):\n       gcc_assert (dest_regno == current_frame_info.r[reg_save_pr]);\n       if (unwind)"}]}