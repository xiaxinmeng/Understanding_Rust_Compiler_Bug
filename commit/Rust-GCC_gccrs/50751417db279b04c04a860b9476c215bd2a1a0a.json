{"sha": "50751417db279b04c04a860b9476c215bd2a1a0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA3NTE0MTdkYjI3OWIwNGMwNGE4NjBiOTQ3NmMyMTViZDJhMWEwYQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2013-06-13T03:22:20Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2013-06-13T03:22:20Z"}, "message": "rs6000.h (LONG_DOUBLE_LARGE_FIRST): Define.\n\n\t* config/rs6000/rs6000.h (LONG_DOUBLE_LARGE_FIRST): Define.\n\t* config/rs6000/rs6000.md (signbittf2): New insn.\n\t(extenddftf2_internal): Use LONG_DOUBLE_LARGE_FIRST.\n\t(abstf2_internal, cmptf_internal2): Likewise.\n\t* config/rs6000/spe.md (spe_abstf2_cmp, spe_abstf2_tst): Likewise.\n\nFrom-SVN: r200055", "tree": {"sha": "334dcd6992f032c9ccae0cee61d50184e161e593", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/334dcd6992f032c9ccae0cee61d50184e161e593"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50751417db279b04c04a860b9476c215bd2a1a0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50751417db279b04c04a860b9476c215bd2a1a0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50751417db279b04c04a860b9476c215bd2a1a0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50751417db279b04c04a860b9476c215bd2a1a0a/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bcc193bf4616b02f5b8869fee13c34cf1d8984e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcc193bf4616b02f5b8869fee13c34cf1d8984e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcc193bf4616b02f5b8869fee13c34cf1d8984e8"}], "stats": {"total": 68, "additions": 58, "deletions": 10}, "files": [{"sha": "21d85fa48f08c0a6ad70c6b8c47fd5a70f0d9ef3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50751417db279b04c04a860b9476c215bd2a1a0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50751417db279b04c04a860b9476c215bd2a1a0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50751417db279b04c04a860b9476c215bd2a1a0a", "patch": "@@ -1,3 +1,11 @@\n+2013-06-13  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.h (LONG_DOUBLE_LARGE_FIRST): Define.\n+\t* config/rs6000/rs6000.md (signbittf2): New insn.\n+\t(extenddftf2_internal): Use LONG_DOUBLE_LARGE_FIRST.\n+\t(abstf2_internal, cmptf_internal2): Likewise.\n+\t* config/rs6000/spe.md (spe_abstf2_cmp, spe_abstf2_tst): Likewise.\n+\n 2013-06-12  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \t    Pat Haugen <pthaugen@us.ibm.com>\n \t    Peter Bergner <bergner@vnet.ibm.com>"}, {"sha": "021e72a80e32d41d181d93c93a0daee0637a0f4b", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50751417db279b04c04a860b9476c215bd2a1a0a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50751417db279b04c04a860b9476c215bd2a1a0a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=50751417db279b04c04a860b9476c215bd2a1a0a", "patch": "@@ -715,6 +715,11 @@ extern unsigned char rs6000_recip_bits[];\n    instructions for them.  Might as well be consistent with bits and bytes.  */\n #define WORDS_BIG_ENDIAN 1\n \n+/* This says that for the IBM long double the larger magnitude double\n+   comes first.  It's really a two element double array, and arrays\n+   don't index differently between little- and big-endian.  */\n+#define LONG_DOUBLE_LARGE_FIRST 1\n+\n #define MAX_BITS_PER_WORD 64\n \n /* Width of a word, in units (bytes).  */"}, {"sha": "a0f462a99c1d7f3fd59be9c6ba52782292a08776", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50751417db279b04c04a860b9476c215bd2a1a0a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50751417db279b04c04a860b9476c215bd2a1a0a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=50751417db279b04c04a860b9476c215bd2a1a0a", "patch": "@@ -5184,6 +5184,41 @@\n   \"frsqrtes %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n+;; This expander is here to avoid FLOAT_WORDS_BIGENDIAN tests in\n+;; builtins.c and optabs.c that are not correct for IBM long double\n+;; when little-endian.\n+(define_expand \"signbittf2\"\n+  [(set (match_dup 2)\n+\t(float_truncate:DF (match_operand:TF 1 \"gpc_reg_operand\" \"\")))\n+   (set (match_dup 3)\n+   \t(subreg:DI (match_dup 2) 0))\n+   (set (match_dup 4)\n+   \t(match_dup 5))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+  \t(match_dup 6))]\n+  \"!TARGET_IEEEQUAD\n+   && TARGET_HARD_FLOAT\n+   && (TARGET_FPRS || TARGET_E500_DOUBLE)\n+   && TARGET_LONG_DOUBLE_128\"\n+{\n+  operands[2] = gen_reg_rtx (DFmode);\n+  operands[3] = gen_reg_rtx (DImode);\n+  if (TARGET_POWERPC64)\n+    {\n+      operands[4] = gen_reg_rtx (DImode);\n+      operands[5] = gen_rtx_LSHIFTRT (DImode, operands[3], GEN_INT (63));\n+      operands[6] = gen_rtx_SUBREG (SImode, operands[4],\n+\t\t\t\t    WORDS_BIG_ENDIAN ? 4 : 0);\n+    }\n+  else\n+    {\n+      operands[4] = gen_reg_rtx (SImode);\n+      operands[5] = gen_rtx_SUBREG (SImode, operands[3],\n+\t\t\t\t    WORDS_BIG_ENDIAN ? 0 : 4);\n+      operands[6] = gen_rtx_LSHIFTRT (SImode, operands[4], GEN_INT (31));\n+    }\n+})\n+\n (define_expand \"copysign<mode>3\"\n   [(set (match_dup 3)\n         (abs:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\" \"\")))\n@@ -9266,8 +9301,8 @@\n   \"&& reload_completed\"\n   [(pc)]\n {\n-  const int lo_word = FLOAT_WORDS_BIG_ENDIAN ? GET_MODE_SIZE (DFmode) : 0;\n-  const int hi_word = FLOAT_WORDS_BIG_ENDIAN ? 0 : GET_MODE_SIZE (DFmode);\n+  const int lo_word = LONG_DOUBLE_LARGE_FIRST ? GET_MODE_SIZE (DFmode) : 0;\n+  const int hi_word = LONG_DOUBLE_LARGE_FIRST ? 0 : GET_MODE_SIZE (DFmode);\n   emit_move_insn (simplify_gen_subreg (DFmode, operands[0], TFmode, hi_word),\n \t\t  operands[1]);\n   emit_move_insn (simplify_gen_subreg (DFmode, operands[0], TFmode, lo_word),\n@@ -9496,8 +9531,8 @@\n    && TARGET_LONG_DOUBLE_128\"\n   \"\n {\n-  const int hi_word = FLOAT_WORDS_BIG_ENDIAN ? 0 : GET_MODE_SIZE (DFmode);\n-  const int lo_word = FLOAT_WORDS_BIG_ENDIAN ? GET_MODE_SIZE (DFmode) : 0;\n+  const int hi_word = LONG_DOUBLE_LARGE_FIRST ? 0 : GET_MODE_SIZE (DFmode);\n+  const int lo_word = LONG_DOUBLE_LARGE_FIRST ? GET_MODE_SIZE (DFmode) : 0;\n   operands[3] = gen_reg_rtx (DFmode);\n   operands[4] = gen_reg_rtx (CCFPmode);\n   operands[5] = simplify_gen_subreg (DFmode, operands[0], TFmode, hi_word);\n@@ -12885,8 +12920,8 @@\n    (match_dup 13)]\n {\n   REAL_VALUE_TYPE rv;\n-  const int lo_word = FLOAT_WORDS_BIG_ENDIAN ? GET_MODE_SIZE (DFmode) : 0;\n-  const int hi_word = FLOAT_WORDS_BIG_ENDIAN ? 0 : GET_MODE_SIZE (DFmode);\n+  const int lo_word = LONG_DOUBLE_LARGE_FIRST ? GET_MODE_SIZE (DFmode) : 0;\n+  const int hi_word = LONG_DOUBLE_LARGE_FIRST ? 0 : GET_MODE_SIZE (DFmode);\n \n   operands[5] = simplify_gen_subreg (DFmode, operands[1], TFmode, hi_word);\n   operands[6] = simplify_gen_subreg (DFmode, operands[1], TFmode, lo_word);"}, {"sha": "bf10a5dc18092cdabb11c3cf775581712be14d62", "filename": "gcc/config/rs6000/spe.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50751417db279b04c04a860b9476c215bd2a1a0a/gcc%2Fconfig%2Frs6000%2Fspe.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50751417db279b04c04a860b9476c215bd2a1a0a/gcc%2Fconfig%2Frs6000%2Fspe.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fspe.md?ref=50751417db279b04c04a860b9476c215bd2a1a0a", "patch": "@@ -2604,8 +2604,8 @@\n    && TARGET_HARD_FLOAT && TARGET_E500_DOUBLE && TARGET_LONG_DOUBLE_128\"\n   \"\n {\n-  const int hi_word = FLOAT_WORDS_BIG_ENDIAN ? 0 : GET_MODE_SIZE (DFmode);\n-  const int lo_word = FLOAT_WORDS_BIG_ENDIAN ? GET_MODE_SIZE (DFmode) : 0;\n+  const int hi_word = LONG_DOUBLE_LARGE_FIRST ? 0 : GET_MODE_SIZE (DFmode);\n+  const int lo_word = LONG_DOUBLE_LARGE_FIRST ? GET_MODE_SIZE (DFmode) : 0;\n   operands[3] = gen_reg_rtx (DFmode);\n   operands[4] = gen_reg_rtx (CCFPmode);\n   operands[5] = simplify_gen_subreg (DFmode, operands[0], TFmode, hi_word);\n@@ -2627,8 +2627,8 @@\n    && TARGET_HARD_FLOAT && TARGET_E500_DOUBLE && TARGET_LONG_DOUBLE_128\"\n   \"\n {\n-  const int hi_word = FLOAT_WORDS_BIG_ENDIAN ? 0 : GET_MODE_SIZE (DFmode);\n-  const int lo_word = FLOAT_WORDS_BIG_ENDIAN ? GET_MODE_SIZE (DFmode) : 0;\n+  const int hi_word = LONG_DOUBLE_LARGE_FIRST ? 0 : GET_MODE_SIZE (DFmode);\n+  const int lo_word = LONG_DOUBLE_LARGE_FIRST ? GET_MODE_SIZE (DFmode) : 0;\n   operands[3] = gen_reg_rtx (DFmode);\n   operands[4] = gen_reg_rtx (CCFPmode);\n   operands[5] = simplify_gen_subreg (DFmode, operands[0], TFmode, hi_word);"}]}