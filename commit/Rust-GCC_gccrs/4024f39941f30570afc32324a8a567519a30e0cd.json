{"sha": "4024f39941f30570afc32324a8a567519a30e0cd", "node_id": "C_kwDOANBUbNoAKDQwMjRmMzk5NDFmMzA1NzBhZmMzMjMyNGE4YTU2NzUxOWEzMGUwY2Q", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-02-13T12:22:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-02-16T14:38:38Z"}, "message": "libstdc++: Enable CTAD for std::basic_format_args (LWG 3810)\n\nThis was just approved in Issaquah.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/format (__format::_Arg_store): New class template.\n\t(basic_format_args): Remove nested type _Store and add deduction\n\tguide from _Arg_store.\n\t(basic_format_arg, make_format_args): Adjust.\n\t* testsuite/std/format/arguments/lwg3810.cc: New test.", "tree": {"sha": "84fa8f409ecc4a1a4accd157399e83fb714cb497", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84fa8f409ecc4a1a4accd157399e83fb714cb497"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4024f39941f30570afc32324a8a567519a30e0cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4024f39941f30570afc32324a8a567519a30e0cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4024f39941f30570afc32324a8a567519a30e0cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4024f39941f30570afc32324a8a567519a30e0cd/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "916ce577ad109be69a3100fc79b3933d741eb990", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/916ce577ad109be69a3100fc79b3933d741eb990", "html_url": "https://github.com/Rust-GCC/gccrs/commit/916ce577ad109be69a3100fc79b3933d741eb990"}], "stats": {"total": 126, "additions": 82, "deletions": 44}, "files": [{"sha": "b1e627048de956d46c364707b8ccf81654f1ce9c", "filename": "libstdc++-v3/include/std/format", "status": "modified", "additions": 57, "deletions": 44, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4024f39941f30570afc32324a8a567519a30e0cd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fformat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4024f39941f30570afc32324a8a567519a30e0cd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fformat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fformat?ref=4024f39941f30570afc32324a8a567519a30e0cd", "patch": "@@ -2757,6 +2757,10 @@ namespace __format\n \t}\n       };\n \n+  // [format.arg.store], class template format-arg-store\n+  template<typename _Context, typename... _Args>\n+    class _Arg_store;\n+\n } // namespace __format\n /// @endcond\n \n@@ -2833,6 +2837,9 @@ namespace __format\n       template<typename _Ctx>\n \tfriend class basic_format_args;\n \n+      template<typename _Ctx, typename... _Args>\n+\tfriend class __format::_Arg_store;\n+\n       static_assert(is_trivially_copyable_v<__format::_Arg_value<_Context>>);\n \n       __format::_Arg_value<_Context> _M_val;\n@@ -3150,11 +3157,11 @@ namespace __format\n \n       static_assert( __format::_Arg_max_ <= (1 << _S_packed_type_bits) );\n \n-      // [format.arg.store], class template format-arg-store\n-      // XXX: Should this be defined outside the class, so basic_format_args\n-      // can use CTAD with a _Store argument?\n       template<typename... _Args>\n-\tclass _Store;\n+\tusing _Store = __format::_Arg_store<_Context, _Args...>;\n+\n+      template<typename _Ctx, typename... _Args>\n+\tfriend class __format::_Arg_store;\n \n       using uint64_t = __UINT64_TYPE__;\n       using _Format_arg = basic_format_arg<_Context>;\n@@ -3215,52 +3222,60 @@ namespace __format\n       }\n     };\n \n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 3810. CTAD for std::basic_format_args\n+  template<typename _Context, typename... _Args>\n+    basic_format_args(__format::_Arg_store<_Context, _Args...>)\n+      -> basic_format_args<_Context>;\n+\n+  template<typename _Context, typename... _Args>\n+    auto\n+    make_format_args(_Args&&... __fmt_args) noexcept;\n+\n   // An array of type-erased formatting arguments.\n-  template<typename _Context>\n-    template<typename... _Args>\n-      class basic_format_args<_Context>::_Store\n-      {\n-\tfriend class basic_format_args;\n+  template<typename _Context, typename... _Args>\n+    class __format::_Arg_store\n+    {\n+      friend std::basic_format_args<_Context>;\n \n-\ttemplate<typename _Ctx, typename... _Argz>\n-\t  friend auto\n-\t  make_format_args(_Argz&&...) noexcept;\n+      template<typename _Ctx, typename... _Argz>\n+\tfriend auto\n+\tstd::make_format_args(_Argz&&...) noexcept;\n \n-\t// For a sufficiently small number of arguments we only store values.\n-\t// basic_format_args can get the types from the _Args pack.\n-\tstatic constexpr bool _S_values_only\n-\t  = sizeof...(_Args) <= _S_max_packed_args;\n+      // For a sufficiently small number of arguments we only store values.\n+      // basic_format_args can get the types from the _Args pack.\n+      static constexpr bool _S_values_only\n+\t= sizeof...(_Args) <= basic_format_args<_Context>::_S_max_packed_args;\n \n-\tusing _Element_t\n-\t  = __conditional_t<_S_values_only,\n-\t\t\t    __format::_Arg_value<_Context>,\n-\t\t\t    basic_format_arg<_Context>>;\n+      using _Element_t\n+\t= __conditional_t<_S_values_only,\n+\t\t\t  __format::_Arg_value<_Context>,\n+\t\t\t  basic_format_arg<_Context>>;\n \n-\t_Element_t _M_args[sizeof...(_Args)];\n+      _Element_t _M_args[sizeof...(_Args)];\n \n-\ttemplate<typename _Tp>\n-\t  static _Element_t\n-\t  _S_make_elt(_Tp& __v)\n-\t  {\n-\t    basic_format_arg<_Context> __arg(__v);\n-\t    if constexpr (_S_values_only)\n-\t      return __arg._M_val;\n-\t    else\n-\t      return __arg;\n-\t  }\n+      template<typename _Tp>\n+\tstatic _Element_t\n+\t_S_make_elt(_Tp& __v)\n+\t{\n+\t  basic_format_arg<_Context> __arg(__v);\n+\t  if constexpr (_S_values_only)\n+\t    return __arg._M_val;\n+\t  else\n+\t    return __arg;\n+\t}\n \n-\ttemplate<typename... _Tp>\n-\t  requires (sizeof...(_Tp) == sizeof...(_Args))\n-\t  [[__gnu__::__always_inline__]]\n-\t  _Store(_Tp&... __a) noexcept\n-\t  : _M_args{_S_make_elt(__a)...}\n-\t  { }\n-      };\n+      template<typename... _Tp>\n+\trequires (sizeof...(_Tp) == sizeof...(_Args))\n+\t[[__gnu__::__always_inline__]]\n+\t_Arg_store(_Tp&... __a) noexcept\n+\t: _M_args{_S_make_elt(__a)...}\n+\t{ }\n+    };\n \n   template<typename _Context>\n-    template<typename... _Args> requires (sizeof...(_Args) == 0)\n-      class basic_format_args<_Context>::_Store<_Args...>\n-      { };\n+    class __format::_Arg_store<_Context>\n+    { };\n \n   template<typename _Context>\n     template<typename... _Args>\n@@ -3300,10 +3315,8 @@ namespace __format\n     inline auto\n     make_format_args(_Args&&... __fmt_args) noexcept\n     {\n-      using _Fmt_args = basic_format_args<_Context>;\n       using _Fmt_arg = basic_format_arg<_Context>;\n-      using _Store = typename _Fmt_args::template\n-\t\t     _Store<typename _Fmt_arg::template\n+      using _Store = __format::_Arg_store<_Context, typename _Fmt_arg::template\n \t\t     _Normalize<remove_reference_t<_Args>>...>;\n       return _Store(__fmt_args...);\n     }"}, {"sha": "c1be229040f7afc8003eaf9be73faada13d4961a", "filename": "libstdc++-v3/testsuite/std/format/arguments/lwg3810.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4024f39941f30570afc32324a8a567519a30e0cd/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fformat%2Farguments%2Flwg3810.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4024f39941f30570afc32324a8a567519a30e0cd/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fformat%2Farguments%2Flwg3810.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fformat%2Farguments%2Flwg3810.cc?ref=4024f39941f30570afc32324a8a567519a30e0cd", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do compile { target c++20 } }\n+// { dg-options \"-std=gnu++20\" }\n+\n+// LWG 3810. CTAD for std::basic_format_args\n+\n+#include <format>\n+\n+auto args_store = std::make_format_args(1,2,3);\n+std::basic_format_args args = args_store;\n+static_assert(std::is_same_v<decltype(args), std::format_args>);\n+\n+\n+template<typename Context>\n+void foo(std::basic_format_args<Context>);\n+\n+void\n+test_ctad()\n+{\n+  using std::basic_format_args;\n+  using std::make_format_args;\n+  using SomeContext = std::wformat_context;\n+\n+  // foo(make_format_args<SomeContext>(\u2026)); // won't work\n+  foo(basic_format_args(make_format_args<SomeContext>(1, 2, 3))); // should work\n+}"}]}