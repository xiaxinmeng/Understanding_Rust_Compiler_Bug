{"sha": "3a4416fb2a3f4781921f3633526500dccfc748c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E0NDE2ZmIyYTNmNDc4MTkyMWYzNjMzNTI2NTAwZGNjZmM3NDhjMg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-08-18T15:07:55Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-08-18T15:07:55Z"}, "message": "i386.h (FIXED_REGISTERS): Update encoding to be -ffixed-reg safe, by preserving the meanings of zero and one.\n\n\n\t* config/i386/i386.h (FIXED_REGISTERS): Update encoding to be\n\t-ffixed-reg safe, by preserving the meanings of zero and one.\n\t(CALL_USED_REGISTERS): Likewise.\n\t(CONDITIONAL_REGISTER_USAGE): Update to process new encodings.\n\nFrom-SVN: r86185", "tree": {"sha": "e333db5f85c24e72cf9498f46d80b46117085b40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e333db5f85c24e72cf9498f46d80b46117085b40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a4416fb2a3f4781921f3633526500dccfc748c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a4416fb2a3f4781921f3633526500dccfc748c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a4416fb2a3f4781921f3633526500dccfc748c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a4416fb2a3f4781921f3633526500dccfc748c2/comments", "author": null, "committer": null, "parents": [{"sha": "1619aa6f3e47bcb5f8e88c293a3c716a22288302", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1619aa6f3e47bcb5f8e88c293a3c716a22288302", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1619aa6f3e47bcb5f8e88c293a3c716a22288302"}], "stats": {"total": 51, "additions": 32, "deletions": 19}, "files": [{"sha": "89ce5f380fc95f06c121e97ff00b017442b7dd8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4416fb2a3f4781921f3633526500dccfc748c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4416fb2a3f4781921f3633526500dccfc748c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a4416fb2a3f4781921f3633526500dccfc748c2", "patch": "@@ -1,3 +1,10 @@\n+2004-08-18  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* config/i386/i386.h (FIXED_REGISTERS): Update encoding to be\n+\t-ffixed-reg safe, by preserving the meanings of zero and one.\n+\t(CALL_USED_REGISTERS): Likewise.\n+\t(CONDITIONAL_REGISTER_USAGE): Update to process new encodings.\n+\n 2004-08-18  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/sh.c (split_branches): Check the result of"}, {"sha": "3fdd6197e4f7b0652b0d5ba89398f9154c410204", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4416fb2a3f4781921f3633526500dccfc748c2/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4416fb2a3f4781921f3633526500dccfc748c2/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=3a4416fb2a3f4781921f3633526500dccfc748c2", "patch": "@@ -932,23 +932,25 @@ extern int x86_prefetch_sse;\n    and are not available for the register allocator.\n    On the 80386, the stack pointer is such, as is the arg pointer.\n \n-   The value is a mask - bit 1 is set for fixed registers\n-   for 32bit target, while 2 is set for fixed registers for 64bit.\n-   Proper value is computed in the CONDITIONAL_REGISTER_USAGE.\n+   The value is zero if the register is not fixed on either 32 or\n+   64 bit targets, one if the register if fixed on both 32 and 64\n+   bit targets, two if it is only fixed on 32bit targets and three\n+   if its only fixed on 64bit targets.\n+   Proper values are computed in the CONDITIONAL_REGISTER_USAGE.\n  */\n #define FIXED_REGISTERS\t\t\t\t\t\t\\\n /*ax,dx,cx,bx,si,di,bp,sp,st,st1,st2,st3,st4,st5,st6,st7*/\t\\\n-{  0, 0, 0, 0, 0, 0, 0, 3, 0,  0,  0,  0,  0,  0,  0,  0,\t\\\n+{  0, 0, 0, 0, 0, 0, 0, 1, 0,  0,  0,  0,  0,  0,  0,  0,\t\\\n /*arg,flags,fpsr,dir,frame*/\t\t\t\t\t\\\n-    3,    3,   3,  3,    3,\t\t\t\t\t\\\n+    1,    1,   1,  1,    1,\t\t\t\t\t\\\n /*xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7*/\t\t\t\\\n      0,   0,   0,   0,   0,   0,   0,   0,\t\t\t\\\n /*mmx0,mmx1,mmx2,mmx3,mmx4,mmx5,mmx6,mmx7*/\t\t\t\\\n      0,   0,   0,   0,   0,   0,   0,   0,\t\t\t\\\n /*  r8,  r9, r10, r11, r12, r13, r14, r15*/\t\t\t\\\n-     1,   1,   1,   1,   1,   1,   1,   1,\t\t\t\\\n+     2,   2,   2,   2,   2,   2,   2,   2,\t\t\t\\\n /*xmm8,xmm9,xmm10,xmm11,xmm12,xmm13,xmm14,xmm15*/\t\t\\\n-     1,   1,    1,    1,    1,    1,    1,    1}\n+     2,   2,    2,    2,    2,    2,    2,    2}\n \n \n /* 1 for registers not available across function calls.\n@@ -958,23 +960,25 @@ extern int x86_prefetch_sse;\n    and the register where structure-value addresses are passed.\n    Aside from that, you can include as many other registers as you like.\n \n-   The value is a mask - bit 1 is set for call used\n-   for 32bit target, while 2 is set for call used for 64bit.\n-   Proper value is computed in the CONDITIONAL_REGISTER_USAGE.\n+   The value is zero if the register is not fixed on either 32 or\n+   64 bit targets, one if the register if fixed on both 32 and 64\n+   bit targets, two if it is only fixed on 32bit targets and three\n+   if its only fixed on 64bit targets.\n+   Proper values are computed in the CONDITIONAL_REGISTER_USAGE.\n */\n #define CALL_USED_REGISTERS\t\t\t\t\t\\\n /*ax,dx,cx,bx,si,di,bp,sp,st,st1,st2,st3,st4,st5,st6,st7*/\t\\\n-{  3, 3, 3, 0, 2, 2, 0, 3, 3,  3,  3,  3,  3,  3,  3,  3,\t\\\n+{  1, 1, 1, 0, 3, 3, 0, 1, 1,  1,  1,  1,  1,  1,  1,  1,\t\\\n /*arg,flags,fpsr,dir,frame*/\t\t\t\t\t\\\n-     3,   3,   3,  3,    3,\t\t\t\t\t\\\n+     1,   1,   1,  1,    1,\t\t\t\t\t\\\n /*xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7*/\t\t\t\\\n-     3,   3,   3,   3,   3,  3,    3,   3,\t\t\t\\\n+     1,   1,   1,   1,   1,  1,    1,   1,\t\t\t\\\n /*mmx0,mmx1,mmx2,mmx3,mmx4,mmx5,mmx6,mmx7*/\t\t\t\\\n-     3,   3,   3,   3,   3,   3,   3,   3,\t\t\t\\\n+     1,   1,   1,   1,   1,   1,   1,   1,\t\t\t\\\n /*  r8,  r9, r10, r11, r12, r13, r14, r15*/\t\t\t\\\n-     3,   3,   3,   3,   1,   1,   1,   1,\t\t\t\\\n+     1,   1,   1,   1,   2,   2,   2,   2,\t\t\t\\\n /*xmm8,xmm9,xmm10,xmm11,xmm12,xmm13,xmm14,xmm15*/\t\t\\\n-     3,   3,    3,    3,    3,    3,    3,    3}\t\t\\\n+     1,   1,    1,    1,    1,    1,    1,    1}\t\t\\\n \n /* Order in which to allocate registers.  Each register must be\n    listed once, even those in FIXED_REGISTERS.  List frame pointer\n@@ -1004,9 +1008,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n     int i;\t\t\t\t\t\t\t\t\\\n     for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-        fixed_regs[i] = (fixed_regs[i] & (TARGET_64BIT ? 2 : 1)) != 0;\t\\\n-        call_used_regs[i] = (call_used_regs[i]\t\t\t\t\\\n-\t\t\t     & (TARGET_64BIT ? 2 : 1)) != 0;\t\t\\\n+\tif (fixed_regs[i] > 1)\t\t\t\t\t\t\\\n+\t  fixed_regs[i] = (fixed_regs[i] == (TARGET_64BIT ? 3 : 2));\t\\\n+\tif (call_used_regs[i] > 1)\t\t\t\t\t\\\n+\t  call_used_regs[i] = (call_used_regs[i]\t\t\t\\\n+\t\t\t       == (TARGET_64BIT ? 3 : 2));\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n     if (PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM)\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\"}]}