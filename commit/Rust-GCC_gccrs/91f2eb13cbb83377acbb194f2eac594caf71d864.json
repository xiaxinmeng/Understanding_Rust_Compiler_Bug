{"sha": "91f2eb13cbb83377acbb194f2eac594caf71d864", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFmMmViMTNjYmI4MzM3N2FjYmIxOTRmMmVhYzU5NGNhZjcxZDg2NA==", "commit": {"author": {"name": "Andris Pavenis", "email": "andris.pavenis@iki.fi", "date": "2016-10-11T18:24:45Z"}, "committer": {"name": "Andris Pavenis", "email": "andris@gcc.gnu.org", "date": "2016-10-11T18:24:45Z"}, "message": "adaint.c: Include process.h, signal.h, dir.h and utime.h for DJGPP.\n\n2016-10-11  Andris Pavenis  <andris.pavenis@iki.fi>\n\n\t* adaint.c: Include process.h, signal.h, dir.h and utime.h for DJGPP.\n\tISALPHA: include <ctype.h> and define to isalpha for DJGPP when IN_RTS is defined.\n\t(DIR_SEPARATOR) define to '\\\\' for DJGPP.\n\t(__gnat_get_file_names_case_sensitive): return 0 for DJGPP unless\n\toverriden in environment\n\t(__gnat_is_absolute_path): Support MS-DOS style absolute paths for DJGPP.\n\t(__gnat_portable_spawn): Use spewnvp for DJGPP.\n\t(__gnat_portable_no_block_spawn): Use spawnvp for DJGPP.\n\t(__gnat_portable_wait): Return 0 for DJGPP.\n\nFrom-SVN: r240999", "tree": {"sha": "b59af555c8794be83da22b346b05a8d6cfab718c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b59af555c8794be83da22b346b05a8d6cfab718c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91f2eb13cbb83377acbb194f2eac594caf71d864", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91f2eb13cbb83377acbb194f2eac594caf71d864", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91f2eb13cbb83377acbb194f2eac594caf71d864", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91f2eb13cbb83377acbb194f2eac594caf71d864/comments", "author": {"login": "apavenis", "id": 33935463, "node_id": "MDQ6VXNlcjMzOTM1NDYz", "avatar_url": "https://avatars.githubusercontent.com/u/33935463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apavenis", "html_url": "https://github.com/apavenis", "followers_url": "https://api.github.com/users/apavenis/followers", "following_url": "https://api.github.com/users/apavenis/following{/other_user}", "gists_url": "https://api.github.com/users/apavenis/gists{/gist_id}", "starred_url": "https://api.github.com/users/apavenis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apavenis/subscriptions", "organizations_url": "https://api.github.com/users/apavenis/orgs", "repos_url": "https://api.github.com/users/apavenis/repos", "events_url": "https://api.github.com/users/apavenis/events{/privacy}", "received_events_url": "https://api.github.com/users/apavenis/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a5297b0470db4d1875a651e578a9b538f5da6d3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5297b0470db4d1875a651e578a9b538f5da6d3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5297b0470db4d1875a651e578a9b538f5da6d3f"}], "stats": {"total": 51, "additions": 44, "deletions": 7}, "files": [{"sha": "b3b1955c92c47373e979e6f3eed7155161b983f0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f2eb13cbb83377acbb194f2eac594caf71d864/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f2eb13cbb83377acbb194f2eac594caf71d864/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=91f2eb13cbb83377acbb194f2eac594caf71d864", "patch": "@@ -1,3 +1,15 @@\n+2016-10-11  Andris Pavenis  <andris.pavenis@iki.fi>\n+\n+\t* adaint.c: Include process.h, signal.h, dir.h and utime.h for DJGPP.\n+\tISALPHA: include <ctype.h> and define to isalpha for DJGPP when IN_RTS is defined.\n+\t(DIR_SEPARATOR) define to '\\\\' for DJGPP.\n+\t(__gnat_get_file_names_case_sensitive): return 0 for DJGPP unless\n+\toverriden in environment\n+\t(__gnat_is_absolute_path): Support MS-DOS style absolute paths for DJGPP.\n+\t(__gnat_portable_spawn): Use spewnvp for DJGPP.\n+\t(__gnat_portable_no_block_spawn): Use spawnvp for DJGPP.\n+\t(__gnat_portable_wait): Return 0 for DJGPP.\n+\n 2016-10-11  Andris Pavenis  <andris.pavenis@iki.fi>\n \n \t* gcc-interface/Makefile.in (LIBGNAT_TARGET_PAIRS): Define for DJGPP target"}, {"sha": "353914708adbdf301f9d59aaa55debfed469f901", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f2eb13cbb83377acbb194f2eac594caf71d864/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f2eb13cbb83377acbb194f2eac594caf71d864/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=91f2eb13cbb83377acbb194f2eac594caf71d864", "patch": "@@ -112,7 +112,18 @@\n extern \"C\" {\n #endif\n \n-#if defined (__MINGW32__) || defined (__CYGWIN__)\n+#if defined (__DJGPP__)\n+\n+/* For isalpha-like tests in the compiler, we're expected to resort to\n+   safe-ctype.h/ISALPHA.  This isn't available for the runtime library\n+   build, so we fallback on ctype.h/isalpha there.  */\n+\n+#ifdef IN_RTS\n+#include <ctype.h>\n+#define ISALPHA isalpha\n+#endif\n+\n+#elif defined (__MINGW32__) || defined (__CYGWIN__)\n \n #include \"mingw32.h\"\n \n@@ -165,11 +176,16 @@ UINT CurrentCCSEncoding;\n #include <sys/wait.h>\n #endif\n \n-#if defined (_WIN32)\n-\n+#if defined (__DJGPP__)\n #include <process.h>\n #include <signal.h>\n #include <dir.h>\n+#include <utime.h>\n+#undef DIR_SEPARATOR\n+#define DIR_SEPARATOR '\\\\'\n+\n+#elif defined (_WIN32)\n+\n #include <windows.h>\n #include <accctrl.h>\n #include <aclapi.h>\n@@ -554,7 +570,7 @@ __gnat_get_file_names_case_sensitive (void)\n \t{\n \t  /* By default, we suppose filesystems aren't case sensitive on\n \t     Windows and Darwin (but they are on arm-darwin).  */\n-#if defined (WINNT) \\\n+#if defined (WINNT) || defined (__DJGPP__) \\\n   || (defined (__APPLE__) && !(defined (__arm__) || defined (__arm64__)))\n \t  file_names_case_sensitive_cache = 0;\n #else\n@@ -570,7 +586,7 @@ __gnat_get_file_names_case_sensitive (void)\n int\n __gnat_get_env_vars_case_sensitive (void)\n {\n-#if defined (WINNT)\n+#if defined (WINNT) || defined (__DJGPP__)\n  return 0;\n #else\n  return 1;\n@@ -1640,7 +1656,7 @@ __gnat_is_absolute_path (char *name, int length)\n #else\n   return (length != 0) &&\n      (*name == '/' || *name == DIR_SEPARATOR\n-#if defined (WINNT)\n+#if defined (WINNT) || defined(__DJGPP__)\n       || (length > 1 && ISALPHA (name[0]) && name[1] == ':')\n #endif\n \t  );\n@@ -2228,7 +2244,7 @@ __gnat_portable_spawn (char *args[] ATTRIBUTE_UNUSED)\n #if defined (__vxworks) || defined(__PikeOS__)\n   return -1;\n \n-#elif defined (_WIN32)\n+#elif defined (__DJGPP__) || defined (_WIN32)\n   /* args[0] must be quotes as it could contain a full pathname with spaces */\n   char *args_0 = args[0];\n   args[0] = (char *)xmalloc (strlen (args_0) + 3);\n@@ -2600,6 +2616,12 @@ __gnat_portable_no_block_spawn (char *args[] ATTRIBUTE_UNUSED)\n   /* Not supported.  */\n   return -1;\n \n+#elif defined(__DJGPP__)\n+  if (spawnvp (P_WAIT, args[0], args) != 0)\n+    return -1;\n+  else\n+    return 0;\n+\n #elif defined (_WIN32)\n \n   HANDLE h = NULL;\n@@ -2643,6 +2665,9 @@ __gnat_portable_wait (int *process_status)\n \n   pid = win32_wait (&status);\n \n+#elif defined (__DJGPP__)\n+  /* Child process has already ended in case of DJGPP.\n+     No need to do anything. Just return success. */\n #else\n \n   pid = waitpid (-1, &status, 0);"}]}