{"sha": "cc5cec10532400521b1e04129530007a724ff493", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M1Y2VjMTA1MzI0MDA1MjFiMWUwNDEyOTUzMDAwN2E3MjRmZjQ5Mw==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2014-01-26T16:07:28Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2014-01-26T16:07:28Z"}, "message": "pa.c (pa_attr_length_indirect_call): Adjust length of portable runtime and PIC indirect calls.\n\n\t* config/pa/pa.c (pa_attr_length_indirect_call): Adjust length of\n\tportable runtime and PIC indirect calls.\n\t(pa_output_indirect_call): Remove unnecessary nop from portable runtime\n\tand PIC call sequences.  Use ldo instead of blr to set return register\n\tin PIC call sequence.\n\nFrom-SVN: r207120", "tree": {"sha": "f2aa478643e3f224f022b55b55a19572db4515e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2aa478643e3f224f022b55b55a19572db4515e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc5cec10532400521b1e04129530007a724ff493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc5cec10532400521b1e04129530007a724ff493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc5cec10532400521b1e04129530007a724ff493", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc5cec10532400521b1e04129530007a724ff493/comments", "author": null, "committer": null, "parents": [{"sha": "1674321ac2a5506fb01a746830c3d4185ba84c72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1674321ac2a5506fb01a746830c3d4185ba84c72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1674321ac2a5506fb01a746830c3d4185ba84c72"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "460af5b2ea544960c3edc9cfc387e82910529a70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5cec10532400521b1e04129530007a724ff493/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5cec10532400521b1e04129530007a724ff493/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc5cec10532400521b1e04129530007a724ff493", "patch": "@@ -1,3 +1,11 @@\n+2014-01-26  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/pa.c (pa_attr_length_indirect_call): Adjust length of\n+\tportable runtime and PIC indirect calls.\n+\t(pa_output_indirect_call): Remove unnecessary nop from portable runtime\n+\tand PIC call sequences.  Use ldo instead of blr to set return register\n+\tin PIC call sequence.\n+\n 2014-01-25  Walter Lee  <walt@tilera.com>\n \n \t* config/tilegx/sync.md (atomic_fetch_sub): Fix negation and"}, {"sha": "c5f87eab5d21a7b38b6f3fc12514ac42cb898280", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc5cec10532400521b1e04129530007a724ff493/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc5cec10532400521b1e04129530007a724ff493/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=cc5cec10532400521b1e04129530007a724ff493", "patch": "@@ -8106,10 +8106,10 @@ pa_attr_length_indirect_call (rtx insn)\n     return 8;\n \n   if (flag_pic)\n-    return 24;\n+    return 20;\n \n   if (TARGET_PORTABLE_RUNTIME)\n-    return 20;\n+    return 16;\n \n   /* Out of reach, can use ble.  */\n   return 12;\n@@ -8154,28 +8154,28 @@ pa_output_indirect_call (rtx insn, rtx call_dest)\n     return \".CALL\\tARGW0=GR\\n\\tldil L'$$dyncall,%%r2\\n\\tble R'$$dyncall(%%sr4,%%r2)\\n\\tcopy %%r31,%%r2\";\n \n   /* Long millicode call for portable runtime.  */\n-  if (pa_attr_length_indirect_call (insn) == 20)\n-    return \"ldil L'$$dyncall,%%r31\\n\\tldo R'$$dyncall(%%r31),%%r31\\n\\tblr %%r0,%%r2\\n\\tbv,n %%r0(%%r31)\\n\\tnop\";\n+  if (pa_attr_length_indirect_call (insn) == 16)\n+    return \"ldil L'$$dyncall,%%r31\\n\\tldo R'$$dyncall(%%r31),%%r31\\n\\tblr %%r0,%%r2\\n\\tbv,n %%r0(%%r31)\";\n \n   /* We need a long PIC call to $$dyncall.  */\n   xoperands[0] = NULL_RTX;\n-  output_asm_insn (\"{bl|b,l} .+8,%%r1\", xoperands);\n+  output_asm_insn (\"{bl|b,l} .+8,%%r2\", xoperands);\n   if (TARGET_SOM || !TARGET_GAS)\n     {\n       xoperands[0] = gen_label_rtx ();\n-      output_asm_insn (\"addil L'$$dyncall-%0,%%r1\", xoperands);\n+      output_asm_insn (\"addil L'$$dyncall-%0,%%r2\", xoperands);\n       targetm.asm_out.internal_label (asm_out_file, \"L\",\n \t\t\t\t      CODE_LABEL_NUMBER (xoperands[0]));\n       output_asm_insn (\"ldo R'$$dyncall-%0(%%r1),%%r1\", xoperands);\n     }\n   else\n     {\n-      output_asm_insn (\"addil L'$$dyncall-$PIC_pcrel$0+4,%%r1\", xoperands);\n+      output_asm_insn (\"addil L'$$dyncall-$PIC_pcrel$0+4,%%r2\", xoperands);\n       output_asm_insn (\"ldo R'$$dyncall-$PIC_pcrel$0+8(%%r1),%%r1\",\n \t\t       xoperands);\n     }\n-  output_asm_insn (\"blr %%r0,%%r2\", xoperands);\n-  output_asm_insn (\"bv,n %%r0(%%r1)\\n\\tnop\", xoperands);\n+  output_asm_insn (\"bv %%r0(%%r1)\", xoperands);\n+  output_asm_insn (\"ldo 12(%%r2),%%r2\", xoperands);\n   return \"\";\n }\n "}]}