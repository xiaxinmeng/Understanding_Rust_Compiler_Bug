{"sha": "e62197363e27c2ee4aca61c467185851acc7e776", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYyMTk3MzYzZTI3YzJlZTRhY2E2MWM0NjcxODU4NTFhY2M3ZTc3Ng==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-04-30T20:56:24Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-04-30T20:56:24Z"}, "message": "h8300.c (one_insn_adds_subs_operand): New function.\n\n        * h8300/h8300.c (one_insn_adds_subs_operand): New function.\n        (h8300_adjust_insn_length): New function.\n        * h8300/h8300.h (ADJUST_INSN_LENGTH): Define.\n        * h8300/h8300.md: Remove obsolete comments.\n        (move patterns): Tweak constraints.\n        (tst patterns): Use \"register_operand\" for predicate.\n        (adds pattern): Use one_insn_adds_subs_operand to get length\n        computation correct.\n        (subs pattern): Similarly.\n        (movstrhi): Remove unused expander.\n        (fancy*, pxor, and-not patterns): Remove.  No longer needed.\n\nFrom-SVN: r11907", "tree": {"sha": "d22fe2caba0f3339195ac4d7de79901bada97b4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d22fe2caba0f3339195ac4d7de79901bada97b4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e62197363e27c2ee4aca61c467185851acc7e776", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e62197363e27c2ee4aca61c467185851acc7e776", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e62197363e27c2ee4aca61c467185851acc7e776", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e62197363e27c2ee4aca61c467185851acc7e776/comments", "author": null, "committer": null, "parents": [{"sha": "731a7b1f40a1a5c2a2128ab535e1395f92eee053", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/731a7b1f40a1a5c2a2128ab535e1395f92eee053", "html_url": "https://github.com/Rust-GCC/gccrs/commit/731a7b1f40a1a5c2a2128ab535e1395f92eee053"}], "stats": {"total": 352, "additions": 126, "deletions": 226}, "files": [{"sha": "87e45e48c91fbf47d8957ebcdcd686df7afc05ac", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e62197363e27c2ee4aca61c467185851acc7e776/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e62197363e27c2ee4aca61c467185851acc7e776/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=e62197363e27c2ee4aca61c467185851acc7e776", "patch": "@@ -454,6 +454,24 @@ adds_subs_operand (op, mode)\n   return 0;\n }\n \n+/* Return nonzero if op is an adds/subs operand which only requires\n+   one insn to implement.  It is assumed that OP is already an adds/subs\n+   operand.  */\n+int\n+one_insn_adds_subs_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  int val = INTVAL (op);\n+\n+  if (val == 1 || val == -1\n+      || val == 2 || val == -2\n+      || (TARGET_H8300H\n+\t  && (val == 4 || val == -4)))\n+    return 1;\n+  return 0;\n+}\n+\n char *\n output_adds_subs (operands)\n      rtx *operands;\n@@ -2253,3 +2271,76 @@ output_simode_bld (bild, log2, operands)\n   /* All done.  */\n   return \"\";\n }\n+\n+/* Given INSN and it's current length LENGTH, return the adjustment\n+   (in bytes) to correctly compute INSN's length.\n+\n+   We use this to get the lengths of various memory references correct.  */\n+\n+h8300_adjust_insn_length (insn, length)\n+     rtx insn;\n+     int length;\n+{\n+  rtx pat = PATTERN (insn);\n+\n+  /* Adjust length for reg->mem and mem->reg copies.  */\n+  if (GET_CODE (pat) == SET\n+      && (GET_CODE (SET_SRC (pat)) == MEM\n+\t  || GET_CODE (SET_DEST (pat)) == MEM))\n+    {\n+      /* This insn might need a length adjustment.  */\n+      rtx addr;\n+\n+      if (GET_CODE (SET_SRC (pat)) == MEM)\n+\taddr = XEXP (SET_SRC (pat), 0);\n+      else\n+\taddr = XEXP (SET_DEST (pat), 0);\n+\n+      /* On the H8/300, only one adjustment is necessary; if the\n+\t address mode is register indirect, then this insn is two\n+\t bytes shorter than indicated in the machine description.  */\n+      if (TARGET_H8300 && GET_CODE (addr) == REG)\n+\treturn -2;\n+\n+      /* On the H8/300H, register indirect is 6 bytes shorter than\n+\t indicated in the machine description.  */\n+      if (TARGET_H8300H && GET_CODE (addr) == REG)\n+\treturn -6;\n+\n+      /* On the H8/300H, reg + d, for small displacements is 4 bytes\n+\t shorter than indicated in the machine description.  */\n+      if (TARGET_H8300H\n+\t  && GET_CODE (addr) == PLUS\n+\t  && GET_CODE (XEXP (addr, 0)) == REG\n+\t  && GET_CODE (XEXP (addr, 1)) == CONST_INT\n+\t  && INTVAL (XEXP (addr, 1)) > -32768\n+\t  && INTVAL (XEXP (addr, 1)) < 32767)\n+\treturn -4;\n+    }\n+\n+  /* Loading some constants needs adjustment.  */\n+  if (GET_CODE (pat) == SET\n+      && GET_CODE (SET_SRC (pat)) == CONST_INT\n+      && GET_MODE (SET_DEST (pat)) == SImode\n+      && INTVAL (SET_SRC (pat)) != 0)\n+    {\n+      if (TARGET_H8300\n+\t  && ((INTVAL (SET_SRC (pat)) & 0xffff) == 0\n+\t      || ((INTVAL (SET_SRC (pat)) >> 16) & 0xffff) == 0))\n+\treturn -2;\n+\n+      if (TARGET_H8300H)\n+\t{\n+\t  int val = INTVAL (SET_SRC (pat));\n+\n+\t  if (val == (val & 0xff)\n+\t      || val == (val & 0xff00))\n+\t    return -6;\n+\n+\t  if (val == -4 || val == -2 || val == -1)\n+\t    return -6;\n+\t}\n+    }\n+\n+  return 0;\n+}"}, {"sha": "0b6667e95ec3f26f301be671a3e6bf9a0db48f65", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e62197363e27c2ee4aca61c467185851acc7e776/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e62197363e27c2ee4aca61c467185851acc7e776/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=e62197363e27c2ee4aca61c467185851acc7e776", "patch": "@@ -929,6 +929,9 @@ extern int h8300_valid_machine_decl_attribute ();\n #define VALID_MACHINE_DECL_ATTRIBUTE(DECL, ATTRIBUTES, IDENTIFIER, ARGS) \\\n h8300_valid_machine_decl_attribute (DECL, ATTRIBUTES, IDENTIFIER, ARGS)\n \n+#define ADJUST_INSN_LENGTH(INSN, LENGTH) \\\n+  LENGTH += h8300_adjust_insn_length (INSN, LENGTH);\n+\n /* Compute the cost of computing a constant rtl expression RTX\n    whose rtx-code is CODE.  The body of this macro is a portion\n    of a switch statement.  If the code is computed here,"}, {"sha": "f49031019e9deb4e6a37665a74edf98a72561be3", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 32, "deletions": 226, "changes": 258, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e62197363e27c2ee4aca61c467185851acc7e776/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e62197363e27c2ee4aca61c467185851acc7e776/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=e62197363e27c2ee4aca61c467185851acc7e776", "patch": "@@ -29,27 +29,10 @@\n (define_attr \"cpu\" \"h8300,h8300h\"\n   (const (symbol_ref \"cpu_type\")))\n \n-;; ??? If we can remove the operand type on all the insns, do it.\n-;; ??? Otherwise, try to have the operand type on all the insns.\n-;; ??? Many patterns have overly conservative lengths.  In particular:\n-;;\n-;;\t* movXX insns using register indirect addressing.\n-;; \t* insns referencing the 8-bit area with an 8-bit address.\n-\n-;; Loading some 32bit integer constants could be done more\n-;; efficiently.  For example loading the value 4 as a 32bit\n-;; is normally done via mov.l #4,erX.  sub.l erX,erX, inc.l #4,erX \n-;; would be more efficient time and space-wise.  Similar sequences\n-;; can be found using bit-set insns dec, etc\n-\n ;; Many logical operations should have \"bit\" variants if only one\n ;; bit is going to be operated on.\n \n ;; Should be HI & SImode tstXX insns which test one bit using btst.\n-;;\n-;; Some insns allow general operations, but lengths don't take\n-;; into account that a general operand may be a memory reference\n-;; with a long length.  (EXTEND insns)\n \n ;; On the h8300h, adds/subs operate on the 32bit \"er\" registers.  Right\n ;; now GCC doesn't expose the \"e\" half to the compiler, so using add/subs\n@@ -203,7 +186,7 @@\n \n (define_insn \"movhi_internal\"\n   [(set (match_operand:HI 0 \"general_operand_dst\" \"=r,r,<,r,o\")\n-\t(match_operand:HI 1 \"general_operand_src\" \"I,r>,r,ion,r\"))]\n+\t(match_operand:HI 1 \"general_operand_src\" \"I,r>,r,io,r\"))]\n   \"register_operand (operands[0],HImode)\n    || register_operand (operands[1], HImode)\"\n   \"@\n@@ -293,7 +276,7 @@\n \n (define_insn \"movsi_h8300\"\n   [(set (match_operand:SI 0 \"general_operand_dst\" \"=r,r,r,o,<,r\")\n-\t(match_operand:SI 1 \"general_operand_src\" \"I,r,ion,r,r,>\"))]\n+\t(match_operand:SI 1 \"general_operand_src\" \"I,r,io,r,r,>\"))]\n   \"TARGET_H8300\n    && (register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode))\"\n@@ -358,7 +341,7 @@\n \n (define_insn \"movsf_h8300\"\n   [(set (match_operand:SF 0 \"general_operand_dst\" \"=r,r,r,o,<,r\")\n-\t(match_operand:SF 1 \"general_operand_src\" \"I,r,ion,r,r,>\"))]\n+\t(match_operand:SF 1 \"general_operand_src\" \"I,r,io,r,r,>\"))]\n   \"TARGET_H8300\n    && (register_operand (operands[0], SFmode)\n        || register_operand (operands[1], SFmode))\"\n@@ -417,7 +400,7 @@\n \n (define_insn \"movsi_h8300h\"\n   [(set (match_operand:SI 0 \"general_operand_dst\" \"=r,r,r,o,<,r\")\n-\t(match_operand:SI 1 \"general_operand_src\" \"I,r,ion,r,r,>\"))]\n+\t(match_operand:SI 1 \"general_operand_src\" \"I,r,io,r,r,>\"))]\n   \"TARGET_H8300H\n    && (register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode))\"\n@@ -458,7 +441,7 @@\n \n (define_insn \"movsf_h8300h\"\n   [(set (match_operand:SF 0 \"general_operand_dst\" \"=r,r,r,o,<,r\")\n-\t(match_operand:SF 1 \"general_operand_src\" \"I,r,ion,r,r,>\"))]\n+\t(match_operand:SF 1 \"general_operand_src\" \"I,r,io,r,r,>\"))]\n   \"TARGET_H8300H\n    && (register_operand (operands[0], SFmode)\n        || register_operand (operands[1], SFmode))\"\n@@ -485,21 +468,21 @@\n    (set_attr \"cc\" \"set_zn_c0\")])\n   \n (define_insn \"tstqi\"\n-  [(set (cc0) (match_operand:QI 0 \"general_operand\" \"r\"))]\n+  [(set (cc0) (match_operand:QI 0 \"register_operand\" \"r\"))]\n   \"\"\n   \"mov.b\t%X0,%X0\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"set\")])\n \n (define_insn \"tsthi\"\n-  [(set (cc0) (match_operand:HI 0 \"general_operand\" \"r\"))]\n+  [(set (cc0) (match_operand:HI 0 \"register_operand\" \"r\"))]\n   \"\"\n   \"mov.w\t%T0,%T0\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"set\")])\n \n (define_insn \"tstsi\"\n-  [(set (cc0) (match_operand:SI 0 \"general_operand\" \"r\"))]\n+  [(set (cc0) (match_operand:SI 0 \"register_operand\" \"r\"))]\n   \"TARGET_H8300H\"\n   \"mov.l\t%S0,%S0\"\n   [(set_attr \"length\" \"2\")\n@@ -582,8 +565,12 @@\n \t\t (match_operand:HI 2 \"adds_subs_operand\" \"i\")))]\n   \"\"\n   \"* return output_adds_subs (operands);\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"cc\" \"none_0hit\")])\n+  [(set_attr \"cc\" \"none_0hit\")\n+   (set (attr \"length\")\n+        (if_then_else (ne (match_operand:HI 2 \"one_insn_adds_subs_operand\" \"\")\n+\t\t\t  (const_int 0))\n+\t\t      (const_int 2)\n+\t\t      (const_int 4)))])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=&r,r,&r\")\n@@ -623,8 +610,12 @@\n \t\t (match_operand:SI 2 \"adds_subs_operand\" \"i\")))]\n   \"TARGET_H8300H\"\n   \"* return output_adds_subs (operands);\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"cc\" \"none_0hit\")])\n+  [(set_attr \"cc\" \"none_0hit\")\n+   (set (attr \"length\")\n+        (if_then_else (ne (match_operand:HI 2 \"one_insn_adds_subs_operand\" \"\")\n+\t\t\t  (const_int 0))\n+\t\t      (const_int 2)\n+\t\t      (const_int 4)))])\n \n (define_insn \"addsi_h8300\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r,&r\")\n@@ -684,8 +675,12 @@\n   operands[2] = GEN_INT (-INTVAL (operands[2]));\n   return output_adds_subs (operands);\n }\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"cc\" \"none_0hit\")])\n+  [(set_attr \"cc\" \"none_0hit\")\n+   (set (attr \"length\")\n+        (if_then_else (ne (match_operand:HI 2 \"one_insn_adds_subs_operand\" \"\")\n+\t\t\t  (const_int 0))\n+\t\t      (const_int 2)\n+\t\t      (const_int 4)))])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,&r\")\n@@ -738,8 +733,12 @@\n   operands[2] = GEN_INT (-INTVAL (operands[2]));\n   return output_adds_subs (operands);\n }\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"cc\" \"none_0hit\")])\n+  [(set_attr \"cc\" \"none_0hit\")\n+   (set (attr \"length\")\n+        (if_then_else (ne (match_operand:HI 2 \"one_insn_adds_subs_operand\" \"\")\n+\t\t\t  (const_int 0))\n+\t\t      (const_int 2)\n+\t\t      (const_int 4)))])\n \n (define_insn \"subsi3_h8300h\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n@@ -2279,54 +2278,6 @@\n   [(set_attr \"cc\" \"clobber\")\n    (set_attr \"length\" \"6\")])\n \n-\f\n-;; -------------------------------------------\n-;; BLK moves\n-;; -------------------------------------------\n-\n-(define_expand \"movstrhi\"\n-  [(parallel [(set (mem:BLK (match_operand:BLK 0 \"general_operand\" \"\"))\n-\t\t   (mem:BLK (match_operand:BLK 1 \"general_operand\" \"\")))\n-\t     (use (match_operand:HI 2 \"general_operand\" \"\"))\n-\t     (use (match_operand:HI 3 \"immediate_operand\" \"\"))\n-\t     (clobber (match_dup 3))\n-  ])]\n-  \"\"\n-  \"\n-{\n-\trtx src_ptr = copy_to_mode_reg (Pmode, XEXP(operands[1], 0));\n-\trtx dst_ptr = copy_to_mode_reg (Pmode, XEXP(operands[0], 0));\n-\t\n-        int max = GET_CODE (operands[2]) == CONST_INT\n-\t  ? MIN (INTVAL (operands[2]), INTVAL (operands[3])) : 1;\n-\tenum machine_mode mode = max >= 2 ? HImode : QImode;\n-\trtx tmpreg = gen_reg_rtx (mode);\n-\trtx increment = mode == QImode ? const1_rtx : const2_rtx;\n-\trtx length = operands[2];\n-\trtx label = gen_label_rtx ();\n-\trtx end_src_ptr = gen_reg_rtx (Pmode);\n-\n-/*\temit_move_insn (length, gen_rtx(MINUS, HImode, length, increment));*/\n-\tFAIL;\n-\tif (Pmode == HImode)\n-\t  emit_insn (gen_addhi3 (end_src_ptr, src_ptr, length));\n-\telse\n-\t  emit_insn (gen_addsi3 (end_src_ptr, src_ptr, length));\n-\n-\temit_label (label);\n-\temit_move_insn (tmpreg, gen_rtx (MEM, mode, src_ptr));\n-\temit_move_insn (gen_rtx (MEM, mode, dst_ptr), tmpreg);\n-\temit_insn (gen_rtx (SET, VOIDmode, src_ptr,\n-\t\t\t    gen_rtx (PLUS, Pmode, src_ptr, increment)));\n-\temit_insn (gen_rtx (SET, VOIDmode, dst_ptr,\n-\t\t\t    gen_rtx (PLUS, Pmode, dst_ptr, increment)));\n-\n-\temit_insn (gen_rtx (SET, VOIDmode, cc0_rtx,\n-\t\t\t    gen_rtx (COMPARE, Pmode, src_ptr, end_src_ptr)));\n-\temit_jump_insn (gen_bne (label));\n-\n-\tDONE;\t\n-}\")\n \f\n ;; ----------------------------------------------\n ;; Peepholes go at the end.\n@@ -2400,148 +2351,3 @@\n   [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"set\")])\n \n-(define_insn \"fancybset1\"\n-  [(set (match_operand:QI 0 \"bit_operand\" \"=Ur\")\n-\t(ior:QI (subreg:QI \n-\t\t (ashift:HI (const_int 1)\n-\t\t\t    (subreg:QI (match_operand:HI 1 \"register_operand\" \"ri\") 0)) 0)\n-\t\t(match_dup 0)))]\n-  \"\"\n-  \"bset\t%X1,%R0\"\n-  [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"clobber\")])\n-\n-(define_insn \"fancybset\"\n-  [(set (match_operand:QI 0 \"bit_operand\" \"=Ur\")\n-\t(ior:QI (subreg:QI \n-\t\t (ashift:HI (const_int 1)\n-\t\t\t    (match_operand:HI 1 \"nonmemory_operand\" \"ri\") ) 0)\n-\t\t(match_operand:QI 2 \"general_operand_src\" \"Ur>\")))]\n-  \"\"\n-  \"mov.b\t%R2,%R0\\;bset\t%X1,%R0\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"cc\" \"clobber\")])\n-\n-(define_insn \"fancybclr4\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=Ur,Ur\")\n-\t(and:QI \n-\t (subreg:QI \n-\t  (rotate:HI (const_int -2)\n-\t\t     (match_operand:HI 2 \"nonmemory_operand\" \"ri,ri\") ) 0)\n-\t (match_operand:QI 1 \"general_operand\" \"0,Ur\")))\n-   (clobber (match_scratch:HI 3 \"=X,&r\"))]\n-  \"\"\n-  \"@\n-   bclr\t%X2,%R0; l1\n-   mov.b\t%R1,%X3\\;mov.b\t%3,%0\\;bclr\t%X2,%R0; l3\"\n-  [(set_attr \"length\" \"8\")\n-   (set_attr \"cc\" \"clobber\")])\n-\n-(define_insn \"fancybclr5\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=Ur,Ur\")\n-\t(and:QI \n-\t (subreg:QI \n-\t  (rotate:HI (const_int -2)\n-\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"ri,ri\")) 0)\n-\t (match_operand:QI 1 \"general_operand\" \"0,Ur\")))\n-   (clobber (match_scratch:HI 3 \"=X,&r\"))]\n-  \"\"\n-  \"@\n-   bclr\t%X2,%R0; l1\n-   mov.b\t%R1,%X3\\;mov.b\t%3,%0\\;bclr\t%X2,%R0;l2\"\n-  [(set_attr \"length\" \"8\")\n-   (set_attr \"cc\" \"clobber\")])\n-\n-(define_insn \"fancybclr2\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=U,r\")\n-\t(and:QI \n-\t (subreg:QI \n-\t  (rotate:HI (const_int -2)\n-\t\t     (match_operand:HI 2 \"nonmemory_operand\" \"ri,ri\") ) 0)\n-\t (match_operand:QI 1 \"general_operand\" \"0,0\")))]\n-  \"\"\n-  \"bclr\t%X2,%R0\"\n-  [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"clobber\")])\n-\n-(define_insn \"fancybclr3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=U,r\")\n-\t(and:QI \n-\t (subreg:QI \n-\t  (rotate:HI (const_int -2)\n-\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"ri,ri\")) 0)\n-\t (match_operand:QI 1 \"general_operand\" \"0,0\")))]\n-  \"\"\n-  \"bclr\t%X2,%R0\"\n-  [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"clobber\")])\n-\n-(define_insn \"fancybsetp3\"\n-  [(set (match_operand:QI 0 \"bit_operand\" \"=Ur\")\n-\t(ior:QI (subreg:QI (ashift:HI (const_int 1)\n-\t\t\t\t      (match_operand:QI 1 \"register_operand\" \"r\")) 0)\n-\t\t(match_operand:QI 2 \"bit_operand\" \"0\")))]\n-  \"\"\n-  \"bset\t%X1,%R0\"\n-  [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"clobber\")])\n-\n-(define_insn \"fancybsetp2\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=r,U\")\n-\t(ior:QI (subreg:QI (ashift:HI (const_int 1)\n-\t\t\t\t      (match_operand:QI 1 \"register_operand\" \"r,r\")) 0)\n-\t\t(match_operand:QI 2 \"general_operand_src\" \"U,r>\")))]\n-  \"\"\n-  \"mov.b\t%R2,%R0\\;bset\t%X1,%R0\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"cc\" \"clobber\")])\n-\t\n-(define_insn \"fancybnot\"\n-  [(set (match_operand:QI 0 \"bit_operand\" \"=Ur\")\n-\t(xor:QI (subreg:QI (ashift:HI (const_int 1)\n-\t\t\t\t      (match_operand:QI 1 \"register_operand\" \"r\")) 0)\n-\t\t(match_operand:QI 2 \"bit_operand\" \"0\")))]\n-\n-  \"\"\n-  \"bnot\t%X1,%R0\"\n-  [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"clobber\")])\n-\n-(define_insn \"pxor\"\n-  [(set (zero_extract:QI (match_operand:HI 0 \"register_operand\" \"=r,r\")\n-\t\t\t (const_int 1)\n-\t\t\t (match_operand 1 \"immediate_operand\" \"n,n\"))\n-\t(and:QI (not:QI (match_operand:QI 2 \"bit_operand\" \"r,U\"))\n-\t\t\t(const_int 1)))]\n-  \"\"\n-  \"bld\t#0,%R2\\;bist\t%1,%0\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"cc\" \"clobber\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n-\t(and:QI (not:QI (match_operand:QI 1 \"register_operand\" \"0\"))\n-\t\t(match_operand:QI 2 \"nonmemory_operand\" \"rJ\")))]\n-  \"\"\n-  \"not.b\t%X0\\;and.b\t%X2,%X0\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"cc\" \"clobber\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(and:HI (not:HI (match_operand:HI 1 \"register_operand\" \"0\"))\n-\t\t(match_operand:HI 2 \"nonmemory_operand\" \"rJ\")))]\n-  \"TARGET_H8300H\"\n-  \"not.w\t%T0\\;and.w\t%T2,%T0\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"cc\" \"clobber\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(and:SI (not:SI (match_operand:SI 1 \"register_operand\" \"0\"))\n-\t\t(match_operand:QI 2 \"nonmemory_operand\" \"rJ\")))]\n-  \"TARGET_H8300H\"\n-  \"not.l\t%S0\\;and.l\t%S2,%S0\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"cc\" \"clobber\")])\n-"}]}