{"sha": "3dfdc0d1e1c4e00a77f2afc41d577c1b36cb4702", "node_id": "C_kwDOANBUbNoAKDNkZmRjMGQxZTFjNGUwMGE3N2YyYWZjNDFkNTc3YzFiMzZjYjQ3MDI", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-19T15:14:02Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-20T16:45:24Z"}, "message": "A false UNORDERED_<cond> means neither operand can be a NAN.\n\nThe false side of UNORDERED_<cond> means neither operand can be a NAN.\nAdjust all the op[12]_range entries for the UNORDERED operators such\nthat a known NAN on one operands means the other operands is\nundefined.\n\ngcc/ChangeLog:\n\n\t* range-op-float.cc (foperator_unordered_le::op1_range): Adjust\n\tfalse side with a NAN operand.\n\t(foperator_unordered_le::op2_range): Same.\n\t(foperator_unordered_gt::op1_range): Same.\n\t(foperator_unordered_gt::op2_range): Same.\n\t(foperator_unordered_ge::op1_range): Same.\n\t(foperator_unordered_ge::op2_range): Same.\n\t(foperator_unordered_equal::op1_range): Same.", "tree": {"sha": "ecb51448422d849292f3e7f616da4955b63f6dac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecb51448422d849292f3e7f616da4955b63f6dac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dfdc0d1e1c4e00a77f2afc41d577c1b36cb4702", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dfdc0d1e1c4e00a77f2afc41d577c1b36cb4702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dfdc0d1e1c4e00a77f2afc41d577c1b36cb4702", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dfdc0d1e1c4e00a77f2afc41d577c1b36cb4702/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a8b37f5476ba1f92fd9a85add035ace89535e79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a8b37f5476ba1f92fd9a85add035ace89535e79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a8b37f5476ba1f92fd9a85add035ace89535e79"}], "stats": {"total": 51, "additions": 41, "deletions": 10}, "files": [{"sha": "0cb07c2ec294e0ad1e80ff6819d6c60d965e6b2b", "filename": "gcc/range-op-float.cc", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dfdc0d1e1c4e00a77f2afc41d577c1b36cb4702/gcc%2Frange-op-float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dfdc0d1e1c4e00a77f2afc41d577c1b36cb4702/gcc%2Frange-op-float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op-float.cc?ref=3dfdc0d1e1c4e00a77f2afc41d577c1b36cb4702", "patch": "@@ -1351,7 +1351,11 @@ foperator_unordered_le::op1_range (frange &r, tree type,\n       break;\n \n     case BRS_FALSE:\n-      if (build_gt (r, type, op2))\n+      // A false UNORDERED_LE means both operands are !NAN, so it's\n+      // impossible for op2 to be a NAN.\n+      if (op2.known_isnan ())\n+\tr.set_undefined ();\n+      else if (build_gt (r, type, op2))\n \tr.clear_nan ();\n       break;\n \n@@ -1375,7 +1379,11 @@ foperator_unordered_le::op2_range (frange &r,\n       break;\n \n     case BRS_FALSE:\n-      if (build_lt (r, type, op1))\n+      // A false UNORDERED_LE means both operands are !NAN, so it's\n+      // impossible for op1 to be a NAN.\n+      if (op1.known_isnan ())\n+\tr.set_undefined ();\n+      else if (build_lt (r, type, op1))\n \tr.clear_nan ();\n       break;\n \n@@ -1434,7 +1442,11 @@ foperator_unordered_gt::op1_range (frange &r,\n       break;\n \n     case BRS_FALSE:\n-      if (build_le (r, type, op2))\n+      // A false UNORDERED_GT means both operands are !NAN, so it's\n+      // impossible for op2 to be a NAN.\n+      if (op2.known_isnan ())\n+\tr.set_undefined ();\n+      else if (build_le (r, type, op2))\n \tr.clear_nan ();\n       break;\n \n@@ -1458,7 +1470,11 @@ foperator_unordered_gt::op2_range (frange &r,\n       break;\n \n     case BRS_FALSE:\n-      if (build_ge (r, type, op1))\n+      // A false UNORDERED_GT means both operands are !NAN, so it's\n+      // impossible for op1 to be a NAN.\n+      if (op1.known_isnan ())\n+\tr.set_undefined ();\n+      else if (build_ge (r, type, op1))\n \tr.clear_nan ();\n       break;\n \n@@ -1517,7 +1533,11 @@ foperator_unordered_ge::op1_range (frange &r,\n       break;\n \n     case BRS_FALSE:\n-      if (build_lt (r, type, op2))\n+      // A false UNORDERED_GE means both operands are !NAN, so it's\n+      // impossible for op2 to be a NAN.\n+      if (op2.known_isnan ())\n+\tr.set_undefined ();\n+      else if (build_lt (r, type, op2))\n \tr.clear_nan ();\n       break;\n \n@@ -1540,7 +1560,11 @@ foperator_unordered_ge::op2_range (frange &r, tree type,\n       break;\n \n     case BRS_FALSE:\n-      if (build_gt (r, type, op1))\n+      // A false UNORDERED_GE means both operands are !NAN, so it's\n+      // impossible for op1 to be a NAN.\n+      if (op1.known_isnan ())\n+\tr.set_undefined ();\n+      else if (build_gt (r, type, op1))\n \tr.clear_nan ();\n       break;\n \n@@ -1606,10 +1630,17 @@ foperator_unordered_equal::op1_range (frange &r, tree type,\n       break;\n \n     case BRS_FALSE:\n-      // The false side indictates !NAN and not equal.  We can at least\n-      // represent !NAN.\n-      r.set_varying (type);\n-      r.clear_nan ();\n+      // A false UNORDERED_EQ means both operands are !NAN, so it's\n+      // impossible for op2 to be a NAN.\n+      if (op2.known_isnan ())\n+\tr.set_undefined ();\n+      else\n+\t{\n+\t  // The false side indictates !NAN and not equal.  We can at least\n+\t  // represent !NAN.\n+\t  r.set_varying (type);\n+\t  r.clear_nan ();\n+\t}\n       break;\n \n     default:"}]}