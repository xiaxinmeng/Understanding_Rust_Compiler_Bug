{"sha": "2407343c3da5e8dc3aee56ab3b7ba168de432973", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQwNzM0M2MzZGE1ZThkYzNhZWU1NmFiM2I3YmExNjhkZTQzMjk3Mw==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2012-10-16T16:11:00Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2012-10-16T16:11:00Z"}, "message": "loop-doloop.c (doloop_modify): Pass doloop_end pattern to gen_doloop_begin.\n\n        * loop-doloop.c (doloop_modify): Pass doloop_end pattern to\n        gen_doloop_begin.\n        (doloop_optimize): Pass flag to indicate if loop is entered at top\n        to gen_doloop_end.\n        * config/arm/thumb2.md (doloop_end): Accept extra operand.\n        * config/bfin/bfin.md (doloop_end): Likewise.\n        * config/c6x/c6x.md (doloop_end): Likewise.\n        * config/ia64/ia64.md (doloop_end): Likewise.\n        * config/mep/mep.md (doloop_begin, doloop_end): Likewise.\n        * config/rs6000/rs6000.md (doloop_end): Likewise.\n        * config/s390/s390.md (doloop_end): Likewise.\n        * config/sh/sh.md (doloop_end): Likewise.\n        * config/spu/spu.md (doloop_end): Likewise.\n        * config/tilegx/tilegx.md (doloop_end): Likewise.\n        * config/tilepro/tilepro.md (doloop_end): Likewise.\n        * doc/md.texi (doloop_end): Document new operand.\n        * basic-block.h (contains_no_active_insn_p): Declare.\n        * cfgrtl.c (contains_no_active_insn_p): New function, factored\n        out of ...\n        (forwarder_block_p): ... here.\n\nFrom-SVN: r192505", "tree": {"sha": "151f058d31629859a64d2c1171d2f55fdcb003d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/151f058d31629859a64d2c1171d2f55fdcb003d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2407343c3da5e8dc3aee56ab3b7ba168de432973", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2407343c3da5e8dc3aee56ab3b7ba168de432973", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2407343c3da5e8dc3aee56ab3b7ba168de432973", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2407343c3da5e8dc3aee56ab3b7ba168de432973/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d919140b83feaa44cf32f4e3e9c31ac78278ac27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d919140b83feaa44cf32f4e3e9c31ac78278ac27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d919140b83feaa44cf32f4e3e9c31ac78278ac27"}], "stats": {"total": 114, "additions": 88, "deletions": 26}, "files": [{"sha": "0b14270ee51215e08de9b65db261039f980b9278", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2407343c3da5e8dc3aee56ab3b7ba168de432973", "patch": "@@ -1,3 +1,26 @@\n+2012-10-16  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\t* loop-doloop.c (doloop_modify): Pass doloop_end pattern to\n+\tgen_doloop_begin.\n+\t(doloop_optimize): Pass flag to indicate if loop is entered at top\n+\tto gen_doloop_end.\n+\t* config/arm/thumb2.md (doloop_end): Accept extra operand.\n+\t* config/bfin/bfin.md (doloop_end): Likewise.\n+\t* config/c6x/c6x.md (doloop_end): Likewise.\n+\t* config/ia64/ia64.md (doloop_end): Likewise.\n+\t* config/mep/mep.md (doloop_begin, doloop_end): Likewise.\n+\t* config/rs6000/rs6000.md (doloop_end): Likewise.\n+\t* config/s390/s390.md (doloop_end): Likewise.\n+\t* config/sh/sh.md (doloop_end): Likewise.\n+\t* config/spu/spu.md (doloop_end): Likewise.\n+\t* config/tilegx/tilegx.md (doloop_end): Likewise.\n+\t* config/tilepro/tilepro.md (doloop_end): Likewise.\n+\t* doc/md.texi (doloop_end): Document new operand.\n+\t* basic-block.h (contains_no_active_insn_p): Declare.\n+\t* cfgrtl.c (contains_no_active_insn_p): New function, factored\n+\tout of ...\n+\t(forwarder_block_p): ... here.\n+\n 2012-10-16  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c/53063"}, {"sha": "d9bd3b7e550d7f0c5254ce030a9ded75ab7fc63e", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=2407343c3da5e8dc3aee56ab3b7ba168de432973", "patch": "@@ -802,6 +802,7 @@ extern bool purge_all_dead_edges (void);\n extern bool purge_dead_edges (basic_block);\n extern bool fixup_abnormal_edges (void);\n extern basic_block force_nonfallthru_and_redirect (edge, basic_block, rtx);\n+extern bool contains_no_active_insn_p (const_basic_block);\n extern bool forwarder_block_p (const_basic_block);\n extern bool can_fallthru (basic_block, basic_block);\n "}, {"sha": "b58562fcc5f5851a080c2ec8a7bfaab0028c12ad", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=2407343c3da5e8dc3aee56ab3b7ba168de432973", "patch": "@@ -541,17 +541,34 @@ flow_active_insn_p (const_rtx insn)\n \n /* Return true if the block has no effect and only forwards control flow to\n    its single destination.  */\n-/* FIXME: Make this a cfg hook.  */\n \n bool\n-forwarder_block_p (const_basic_block bb)\n+contains_no_active_insn_p (const_basic_block bb)\n {\n   rtx insn;\n \n   if (bb == EXIT_BLOCK_PTR || bb == ENTRY_BLOCK_PTR\n       || !single_succ_p (bb))\n     return false;\n \n+  for (insn = BB_HEAD (bb); insn != BB_END (bb); insn = NEXT_INSN (insn))\n+    if (INSN_P (insn) && flow_active_insn_p (insn))\n+      return false;\n+\n+  return (!INSN_P (insn)\n+\t  || (JUMP_P (insn) && simplejump_p (insn))\n+\t  || !flow_active_insn_p (insn));\n+}\n+\n+/* Likewise, but protect loop latches, headers and preheaders.  */\n+/* FIXME: Make this a cfg hook.  */\n+\n+bool\n+forwarder_block_p (const_basic_block bb)\n+{\n+  if (!contains_no_active_insn_p (bb))\n+    return false;\n+\n   /* Protect loop latches, headers and preheaders.  */\n   if (current_loops)\n     {\n@@ -563,13 +580,7 @@ forwarder_block_p (const_basic_block bb)\n \treturn false;\n     }\n \n-  for (insn = BB_HEAD (bb); insn != BB_END (bb); insn = NEXT_INSN (insn))\n-    if (INSN_P (insn) && flow_active_insn_p (insn))\n-      return false;\n-\n-  return (!INSN_P (insn)\n-\t  || (JUMP_P (insn) && simplejump_p (insn))\n-\t  || !flow_active_insn_p (insn));\n+  return true;\n }\n \n /* Return nonzero if we can reach target from src by falling through.  */"}, {"sha": "a5302f479f5091d08f4bf1a9ee9b0423692372af", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=2407343c3da5e8dc3aee56ab3b7ba168de432973", "patch": "@@ -996,7 +996,8 @@\n    (use (match_operand 1 \"\" \"\"))      ; iterations; zero if unknown\n    (use (match_operand 2 \"\" \"\"))      ; max iterations\n    (use (match_operand 3 \"\" \"\"))      ; loop level\n-   (use (match_operand 4 \"\" \"\"))]     ; label\n+   (use (match_operand 4 \"\" \"\"))      ; label\n+   (use (match_operand 5 \"\" \"\"))]     ; flag: 1 if loop entered at top, else 0\n   \"TARGET_32BIT\"\n   \"\n  {"}, {"sha": "63ad1755020e35b54d94c57ed206ac1f0733ac4e", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=2407343c3da5e8dc3aee56ab3b7ba168de432973", "patch": "@@ -1933,6 +1933,7 @@\n ; operand 2 is the maximum number of loop iterations\n ; operand 3 is the number of levels of enclosed loops\n ; operand 4 is the label to jump to at the top of the loop\n+; operand 5 indicates if the loop is entered at the top\n (define_expand \"doloop_end\"\n   [(parallel [(set (pc) (if_then_else\n \t\t\t  (ne (match_operand:SI 0 \"\" \"\")\n@@ -1943,7 +1944,7 @@\n \t\t   (plus:SI (match_dup 0)\n \t\t\t    (const_int -1)))\n \t      (unspec [(const_int 0)] UNSPEC_LSETUP_END)\n-\t      (clobber (match_scratch:SI 5 \"\"))])]\n+\t      (clobber (match_operand 5 \"\"))])] ; match_scratch\n   \"\"\n {\n   /* The loop optimizer doesn't check the predicates... */\n@@ -1956,6 +1957,7 @@\n       && (unsigned HOST_WIDE_INT) INTVAL (operands[2]) >= 0xFFFFFFFF)\n     FAIL;\n   bfin_hardware_loop ();\n+  operands[5] = gen_rtx_SCRATCH (SImode);\n })\n \n (define_insn \"loop_end\""}, {"sha": "e612ef6829382432d547fb0c632ed8f70cd88692", "filename": "gcc/config/c6x/c6x.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fconfig%2Fc6x%2Fc6x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fconfig%2Fc6x%2Fc6x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.md?ref=2407343c3da5e8dc3aee56ab3b7ba168de432973", "patch": "@@ -1425,6 +1425,7 @@\n ; operand 2 is the maximum number of loop iterations\n ; operand 3 is the number of levels of enclosed loops\n ; operand 4 is the label to jump to at the top of the loop\n+; operand 5 indicates if the loop is entered at the top\n (define_expand \"doloop_end\"\n   [(parallel [(set (pc) (if_then_else\n \t\t\t  (ne (match_operand:SI 0 \"\" \"\")\n@@ -1434,12 +1435,13 @@\n \t      (set (match_dup 0)\n \t\t   (plus:SI (match_dup 0)\n \t\t\t    (const_int -1)))\n-\t      (clobber (match_scratch:SI 5 \"\"))])]\n+\t      (clobber (match_operand 5 \"\"))])] ; match_scratch\n   \"TARGET_INSNS_64PLUS && optimize\"\n {\n   /* The loop optimizer doesn't check the predicates... */\n   if (GET_MODE (operands[0]) != SImode)\n     FAIL;\n+  operands[5] = gen_rtx_SCRATCH (SImode);\n })\n \n (define_insn \"mvilc\""}, {"sha": "f84f1ad633257005ada2d3ef7dd377e6ff4d2b67", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=2407343c3da5e8dc3aee56ab3b7ba168de432973", "patch": "@@ -3960,7 +3960,8 @@\n    (use (match_operand 1 \"\" \"\"))\t; iterations; zero if unknown\n    (use (match_operand 2 \"\" \"\"))\t; max iterations\n    (use (match_operand 3 \"\" \"\"))\t; loop level\n-   (use (match_operand 4 \"\" \"\"))]\t; label\n+   (use (match_operand 4 \"\" \"\"))\t; label\n+   (use (match_operand 5 \"\" \"\"))]\t; flag: 1 if loop entered at top, else 0\n   \"\"\n {\n   /* Only use cloop on innermost loops.  */"}, {"sha": "35b6e1490bc3dd66b07abcd6bcda19a7a76ade13", "filename": "gcc/config/mep/mep.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fconfig%2Fmep%2Fmep.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fconfig%2Fmep%2Fmep.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.md?ref=2407343c3da5e8dc3aee56ab3b7ba168de432973", "patch": "@@ -2079,7 +2079,8 @@\n   [(use (match_operand 0 \"register_operand\" \"\"))\n    (use (match_operand:QI 1 \"const_int_operand\" \"\"))\n    (use (match_operand:QI 2 \"const_int_operand\" \"\"))\n-   (use (match_operand:QI 3 \"const_int_operand\" \"\"))]\n+   (use (match_operand:QI 3 \"const_int_operand\" \"\"))\n+   (use (match_operand 4 \"\" \"\"))]\n   \"!profile_arc_flag && TARGET_OPT_REPEAT\"\n   \"if (INTVAL (operands[3]) > 1)\n      FAIL;\n@@ -2115,7 +2116,8 @@\n    (use (match_operand:QI 1 \"const_int_operand\" \"\"))\n    (use (match_operand:QI 2 \"const_int_operand\" \"\"))\n    (use (match_operand:QI 3 \"const_int_operand\" \"\"))\n-   (use (label_ref (match_operand 4 \"\" \"\")))]\n+   (use (label_ref (match_operand 4 \"\" \"\")))\n+   (use (match_operand 5 \"\" \"\"))]\n   \"!profile_arc_flag && TARGET_OPT_REPEAT\"\n   \"if (INTVAL (operands[3]) > 1)\n      FAIL;"}, {"sha": "5bf2fec18e4f996853a9228c9839554a08ca16b3", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=2407343c3da5e8dc3aee56ab3b7ba168de432973", "patch": "@@ -13085,7 +13085,8 @@\n    (use (match_operand 1 \"\" \"\"))\t; iterations; zero if unknown\n    (use (match_operand 2 \"\" \"\"))\t; max iterations\n    (use (match_operand 3 \"\" \"\"))\t; loop level\n-   (use (match_operand 4 \"\" \"\"))]\t; label\n+   (use (match_operand 4 \"\" \"\"))\t; label\n+   (use (match_operand 5 \"\" \"\"))]\t; flag: 1 if loop entered at top, else 0\n   \"\"\n   \"\n {"}, {"sha": "9279a9876c4fc07c7a536df3ec415656624c852f", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=2407343c3da5e8dc3aee56ab3b7ba168de432973", "patch": "@@ -8166,7 +8166,8 @@\n    (use (match_operand 1 \"\" \"\"))        ; iterations; zero if unknown\n    (use (match_operand 2 \"\" \"\"))        ; max iterations\n    (use (match_operand 3 \"\" \"\"))        ; loop level\n-   (use (match_operand 4 \"\" \"\"))]       ; label\n+   (use (match_operand 4 \"\" \"\"))        ; label\n+   (use (match_operand 5 \"\" \"\"))]       ; flag: 1 if loop entered at top, else 0\n   \"\"\n {\n   if (GET_MODE (operands[0]) == SImode && !TARGET_CPU_ZARCH)"}, {"sha": "2ef4a1a4ee0b6158c549c53637e50293af4ea686", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=2407343c3da5e8dc3aee56ab3b7ba168de432973", "patch": "@@ -8474,11 +8474,14 @@ label:\n \t\t\t  (pc)))\n \t      (set (match_dup 0)\n \t\t   (plus:SI (match_dup 0) (const_int -1)))\n-\t      (clobber (reg:SI T_REG))])]\n+\t      (clobber (reg:SI T_REG))])\n+   (match_operand 5 \"\" \"\")]\n   \"TARGET_SH2\"\n {\n   if (GET_MODE (operands[0]) != SImode)\n     FAIL;\n+  emit_insn (gen_doloop_end_split (operands[0], operands[4], operands[0]));\n+  DONE;\n })\n \n (define_insn_and_split \"doloop_end_split\""}, {"sha": "3446e986f2712ff5f7e95ba21db29750ef6da7fe", "filename": "gcc/config/spu/spu.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fconfig%2Fspu%2Fspu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fconfig%2Fspu%2Fspu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.md?ref=2407343c3da5e8dc3aee56ab3b7ba168de432973", "patch": "@@ -4490,7 +4490,8 @@ selb\\t%0,%4,%0,%3\"\n     (use (match_operand 1 \"\" \"\"))      ; iterations; zero if unknown\n     (use (match_operand 2 \"\" \"\"))      ; max iterations\n     (use (match_operand 3 \"\" \"\"))      ; loop level\n-    (use (match_operand 4 \"\" \"\"))]     ; label\n+    (use (match_operand 4 \"\" \"\"))      ; label\n+    (match_operand 5 \"\" \"\")]\n    \"\"\n    \"\n  {"}, {"sha": "b5dc9c8844fd99c0fcd042d97ca8485ce1a4615d", "filename": "gcc/config/tilegx/tilegx.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fconfig%2Ftilegx%2Ftilegx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fconfig%2Ftilegx%2Ftilegx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.md?ref=2407343c3da5e8dc3aee56ab3b7ba168de432973", "patch": "@@ -2316,7 +2316,8 @@\n    (use (match_operand 1 \"\" \"\"))    ;; iterations; zero if unknown\n    (use (match_operand 2 \"\" \"\"))    ;; max iterations\n    (use (match_operand 3 \"\" \"\"))    ;; loop level\n-   (use (match_operand 4 \"\" \"\"))]   ;; label\n+   (use (match_operand 4 \"\" \"\"))    ;; label\n+   (use (match_operand 5 \"\" \"\"))]   ;; flag: 1 if loop entered at top, else 0\n    \"\"\n {\n   if (optimize > 0 && flag_modulo_sched)"}, {"sha": "1d1838e6de877f22a1d3db14d238f7c45c089a6e", "filename": "gcc/config/tilepro/tilepro.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fconfig%2Ftilepro%2Ftilepro.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fconfig%2Ftilepro%2Ftilepro.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.md?ref=2407343c3da5e8dc3aee56ab3b7ba168de432973", "patch": "@@ -1322,7 +1322,8 @@\n    (use (match_operand 1 \"\" \"\"))    ;; iterations; zero if unknown\n    (use (match_operand 2 \"\" \"\"))    ;; max iterations\n    (use (match_operand 3 \"\" \"\"))    ;; loop level\n-   (use (match_operand 4 \"\" \"\"))]   ;; label\n+   (use (match_operand 4 \"\" \"\"))    ;; label\n+   (use (match_operand 5 \"\" \"\"))]   ;; flag: 1 if loop entered at top, else 0\n    \"\"\n {\n   if (optimize > 0)"}, {"sha": "32866d5c156d03b975e0bbf3657ecd0b0beaa0df", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=2407343c3da5e8dc3aee56ab3b7ba168de432973", "patch": "@@ -5517,7 +5517,9 @@ iterations as a @code{const_int} or @code{const0_rtx} if this cannot be\n determined until run-time; operand 2 is the actual or estimated maximum\n number of iterations as a @code{const_int}; operand 3 is the number of\n enclosed loops as a @code{const_int} (an innermost loop has a value of\n-1); operand 4 is the label to jump to if the register is nonzero.\n+1); operand 4 is the label to jump to if the register is nonzero;\n+operand 5 is const1_rtx if the loop in entered at its top, const0_rtx\n+otherwise.\n @xref{Looping Patterns}.\n \n This optional instruction pattern should be defined for machines with"}, {"sha": "9be87c64aea0a0598d969202b0d885267dcb08e4", "filename": "gcc/loop-doloop.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Floop-doloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2407343c3da5e8dc3aee56ab3b7ba168de432973/gcc%2Floop-doloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-doloop.c?ref=2407343c3da5e8dc3aee56ab3b7ba168de432973", "patch": "@@ -1,5 +1,5 @@\n /* Perform doloop optimizations\n-   Copyright (C) 2004, 2005, 2006, 2007, 2008, 2010\n+   Copyright (C) 2004, 2005, 2006, 2007, 2008, 2010, 2012\n    Free Software Foundation, Inc.\n    Based on code by Michael P. Hayes (m.hayes@elec.canterbury.ac.nz)\n \n@@ -561,7 +561,8 @@ doloop_modify (struct loop *loop, struct niter_desc *desc,\n     init = gen_doloop_begin (counter_reg,\n \t\t\t     desc->const_iter ? desc->niter_expr : const0_rtx,\n \t\t\t     iter_rtx,\n-\t\t\t     GEN_INT (level));\n+\t\t\t     GEN_INT (level),\n+\t\t\t     doloop_seq);\n     if (init)\n       {\n \tstart_sequence ();\n@@ -619,6 +620,7 @@ doloop_optimize (struct loop *loop)\n   unsigned word_mode_size;\n   unsigned HOST_WIDE_INT word_mode_max;\n   double_int iter;\n+  int entered_at_top;\n \n   if (dump_file)\n     fprintf (dump_file, \"Doloop: Processing loop %d.\\n\", loop->num);\n@@ -681,8 +683,14 @@ doloop_optimize (struct loop *loop)\n      not like.  */\n   start_label = block_label (desc->in_edge->dest);\n   doloop_reg = gen_reg_rtx (mode);\n+  entered_at_top = loop_preheader_edge (loop)->dest == desc->in_edge->dest;\n+  fprintf (stderr, \"entered at top orig: %d\\n\", entered_at_top);\n+  entered_at_top = (loop->latch == desc->in_edge->dest\n+                      && contains_no_active_insn_p (loop->latch));\n+  fprintf (stderr, \"entered at top Zdenek: %d\\n\", entered_at_top);\n   doloop_seq = gen_doloop_end (doloop_reg, iterations, iterations_max,\n-\t\t\t       GEN_INT (level), start_label);\n+\t\t\t       GEN_INT (level), start_label,\n+\t\t\t       GEN_INT (entered_at_top));\n \n   word_mode_size = GET_MODE_PRECISION (word_mode);\n   word_mode_max\n@@ -712,7 +720,8 @@ doloop_optimize (struct loop *loop)\n \t}\n       PUT_MODE (doloop_reg, word_mode);\n       doloop_seq = gen_doloop_end (doloop_reg, iterations, iterations_max,\n-\t\t\t\t   GEN_INT (level), start_label);\n+\t\t\t\t   GEN_INT (level), start_label,\n+\t\t\t\t   GEN_INT (entered_at_top));\n     }\n   if (! doloop_seq)\n     {"}]}