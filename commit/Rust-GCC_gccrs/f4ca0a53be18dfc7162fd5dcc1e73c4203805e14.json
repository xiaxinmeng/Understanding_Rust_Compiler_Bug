{"sha": "f4ca0a53be18dfc7162fd5dcc1e73c4203805e14", "node_id": "C_kwDOANBUbNoAKGY0Y2EwYTUzYmUxOGRmYzcxNjJmZDVkY2MxZTczYzQyMDM4MDVlMTQ", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2022-01-19T14:11:32Z"}, "committer": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2022-01-19T14:14:47Z"}, "message": "vect: Fix epilogue mode skipping\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/103997\n\t* tree-vect-loop.cc (vect_analyze_loop): Fix mode skipping for epilogue\n\tvectorization.", "tree": {"sha": "e97006f3292a4830ced2c6aadff610c147e38a21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e97006f3292a4830ced2c6aadff610c147e38a21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4ca0a53be18dfc7162fd5dcc1e73c4203805e14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ca0a53be18dfc7162fd5dcc1e73c4203805e14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4ca0a53be18dfc7162fd5dcc1e73c4203805e14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ca0a53be18dfc7162fd5dcc1e73c4203805e14/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffc7f200adbdf47f14b3594d9b21855c19cf797a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffc7f200adbdf47f14b3594d9b21855c19cf797a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffc7f200adbdf47f14b3594d9b21855c19cf797a"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "4860bfd33445d42189cf67150def7df8f22f3ff6", "filename": "gcc/tree-vect-loop.cc", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ca0a53be18dfc7162fd5dcc1e73c4203805e14/gcc%2Ftree-vect-loop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ca0a53be18dfc7162fd5dcc1e73c4203805e14/gcc%2Ftree-vect-loop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.cc?ref=f4ca0a53be18dfc7162fd5dcc1e73c4203805e14", "patch": "@@ -3004,13 +3004,23 @@ vect_analyze_loop (class loop *loop, vec_info_shared *shared)\n   unsigned int mode_i = 0;\n   unsigned HOST_WIDE_INT simdlen = loop->simdlen;\n \n+  /* Keep track of the VF for each mode.  Initialize all to 0 which indicates\n+     a mode has not been analyzed.  */\n+  auto_vec<poly_uint64, 8> cached_vf_per_mode;\n+  for (unsigned i = 0; i < vector_modes.length (); ++i)\n+    cached_vf_per_mode.safe_push (0);\n+\n   /* First determine the main loop vectorization mode, either the first\n      one that works, starting with auto-detecting the vector mode and then\n      following the targets order of preference, or the one with the\n      lowest cost if pick_lowest_cost_p.  */\n   while (1)\n     {\n       bool fatal;\n+      unsigned int last_mode_i = mode_i;\n+      /* Set cached VF to -1 prior to analysis, which indicates a mode has\n+\t failed.  */\n+      cached_vf_per_mode[last_mode_i] = -1;\n       opt_loop_vec_info loop_vinfo\n \t= vect_analyze_loop_1 (loop, shared, &loop_form_info,\n \t\t\t       NULL, vector_modes, mode_i,\n@@ -3020,6 +3030,12 @@ vect_analyze_loop (class loop *loop, vec_info_shared *shared)\n \n       if (loop_vinfo)\n \t{\n+\t  /*  Analyzis has been successful so update the VF value.  The\n+\t      VF should always be a multiple of unroll_factor and we want to\n+\t      capture the original VF here.  */\n+\t  cached_vf_per_mode[last_mode_i]\n+\t    = exact_div (LOOP_VINFO_VECT_FACTOR (loop_vinfo),\n+\t\t\t loop_vinfo->suggested_unroll_factor);\n \t  /* Once we hit the desired simdlen for the first time,\n \t     discard any previous attempts.  */\n \t  if (simdlen\n@@ -3100,12 +3116,10 @@ vect_analyze_loop (class loop *loop, vec_info_shared *shared)\n     {\n       /* If the target does not support partial vectors we can shorten the\n \t number of modes to analyze for the epilogue as we know we can't pick a\n-\t mode that has at least as many NUNITS as the main loop's vectorization\n-\t factor, since that would imply the epilogue's vectorization factor\n-\t would be at least as high as the main loop's and we would be\n-\t vectorizing for more scalar iterations than there would be left.  */\n+\t mode that would lead to a VF at least as big as the\n+\t FIRST_VINFO_VF.  */\n       if (!supports_partial_vectors\n-\t  && maybe_ge (GET_MODE_NUNITS (vector_modes[mode_i]), first_vinfo_vf))\n+\t  && maybe_ge (cached_vf_per_mode[mode_i], first_vinfo_vf))\n \t{\n \t  mode_i++;\n \t  if (mode_i == vector_modes.length ())"}]}