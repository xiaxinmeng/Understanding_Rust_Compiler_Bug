{"sha": "88f7b07de7579251f5134b65dad406fdfda3d057", "node_id": "C_kwDOANBUbNoAKDg4ZjdiMDdkZTc1NzkyNTFmNTEzNGI2NWRhZDQwNmZkZmRhM2QwNTc", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2022-04-07T17:23:20Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-19T14:05:29Z"}, "message": "[Ada] Improve optimization of \"=\" on bit-packed arrays\n\nThis patch fixes a performance regression, introduced by a previous bug\nfix.  That fix had the unintended side effect of removing the\noptimization in cases where the two operands are of two different\ncompiler-generated modular types.\n\ngcc/ada/\n\n\t* exp_pakd.adb (Expand_Packed_Eq): Replace the check for *same*\n\tmodular type, with a check for any modular type, and assert that\n\tthe two types have the same modulus and so on.\n\t* exp_pakd.ads: Minor comment improvements.", "tree": {"sha": "f1c8accae93142fd6cbcf5b10b07e29106b9dd06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1c8accae93142fd6cbcf5b10b07e29106b9dd06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88f7b07de7579251f5134b65dad406fdfda3d057", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f7b07de7579251f5134b65dad406fdfda3d057", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88f7b07de7579251f5134b65dad406fdfda3d057", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f7b07de7579251f5134b65dad406fdfda3d057/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cc07f401a69f14638cfd37b27401e4e0fd8fc65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cc07f401a69f14638cfd37b27401e4e0fd8fc65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cc07f401a69f14638cfd37b27401e4e0fd8fc65"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "d4a62ace9c2afc0a046f9f9d9df400581625b097", "filename": "gcc/ada/exp_pakd.adb", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f7b07de7579251f5134b65dad406fdfda3d057/gcc%2Fada%2Fexp_pakd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f7b07de7579251f5134b65dad406fdfda3d057/gcc%2Fada%2Fexp_pakd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.adb?ref=88f7b07de7579251f5134b65dad406fdfda3d057", "patch": "@@ -1930,9 +1930,17 @@ package body Exp_Pakd is\n       --  modular case we guarantee that the unused bits are always zeroes.\n       --  We do have to compare the lengths because we could be comparing\n       --  two different subtypes of the same base type. We can only do this\n-      --  if the PATs on both sides are the same.\n+      --  if the PATs on both sides are modular (in which case they are\n+      --  necessarily structurally the same -- same Modulus and so on);\n+      --  otherwise, we have a case where the right operand is not of\n+      --  compile time known size.\n+\n+      if Is_Modular_Integer_Type (PAT)\n+        and then Is_Modular_Integer_Type (Etype (R))\n+      then\n+         pragma Assert (RM_Size (Etype (R)) = RM_Size (PAT));\n+         pragma Assert (Modulus (Etype (R)) = Modulus (PAT));\n \n-      if Is_Modular_Integer_Type (PAT) and then PAT = Etype (R) then\n          Rewrite (N,\n            Make_And_Then (Loc,\n              Left_Opnd =>"}, {"sha": "e80787acdd7f93fe6d886b54fe62668b750d5603", "filename": "gcc/ada/exp_pakd.ads", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f7b07de7579251f5134b65dad406fdfda3d057/gcc%2Fada%2Fexp_pakd.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f7b07de7579251f5134b65dad406fdfda3d057/gcc%2Fada%2Fexp_pakd.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.ads?ref=88f7b07de7579251f5134b65dad406fdfda3d057", "patch": "@@ -41,18 +41,19 @@ package Exp_Pakd is\n \n    --  This packed array type has the name xxxPn, where xxx is the name\n    --  of the packed type, and n is the component size. The expanded\n-   --  declaration declares a type that is one of the following:\n+   --  declaration declares a type that is one of the following (sizes\n+   --  below are in bytes):\n \n    --    For an unconstrained array with component size 1,2,4 or any other\n    --    odd component size. These are the cases in which we do not need\n    --    to align the underlying array.\n \n    --      type xxxPn is new Packed_Bytes1;\n \n-   --    For an unconstrained array with component size that is divisible\n-   --    by 2, but not divisible by 4 (other than 2 itself). These are the\n-   --    cases in which we can generate better code if the underlying array\n-   --    is 2-byte aligned (see System.Pack_14 in file s-pack14 for example).\n+   --    For an unconstrained array with component size greater than 2, that is\n+   --    divisible by 2, but not divisible by 4. These are the cases in which\n+   --    we can generate better code if the underlying array is 2-byte aligned\n+   --    (see System.Pack_14 in file s-pack14 for example).\n \n    --      type xxxPn is new Packed_Bytes2;\n \n@@ -942,7 +943,7 @@ package Exp_Pakd is\n    --  N is an N_Op_Eq node where the operands are packed arrays whose\n    --  representation is an array-of-bytes type (the case where a modular\n    --  type is used for the representation does not require any special\n-   --  handling, because in the modular case, unused bits are zeroes.\n+   --  handling, because in the modular case, unused bits are zeroes).\n \n    procedure Expand_Packed_Not (N : Node_Id);\n    --  N is an N_Op_Not node where the operand is packed array of Boolean"}]}