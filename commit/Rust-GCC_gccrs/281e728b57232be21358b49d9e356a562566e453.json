{"sha": "281e728b57232be21358b49d9e356a562566e453", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgxZTcyOGI1NzIzMmJlMjEzNThiNDlkOWUzNTZhNTYyNTY2ZTQ1Mw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-07-16T13:55:50Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-07-16T13:55:50Z"}, "message": "genattrtab.c (make_canonical): Add a file_location parameter.\n\ngcc/\n\t* genattrtab.c (make_canonical): Add a file_location parameter.\n\tUse fatal_at rather than fatal.\n\t(get_attr_value): Likewise.  Update call to make_canonical.\n\t(fill_attr, make_length_attrs, optimize_attrs, gen_attr)\n\t(make_internal_attr): Update calls accordingly.\n\nFrom-SVN: r225884", "tree": {"sha": "59e5184d9d7f5857f58afdaf8d462509fd6398ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59e5184d9d7f5857f58afdaf8d462509fd6398ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/281e728b57232be21358b49d9e356a562566e453", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/281e728b57232be21358b49d9e356a562566e453", "html_url": "https://github.com/Rust-GCC/gccrs/commit/281e728b57232be21358b49d9e356a562566e453", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/281e728b57232be21358b49d9e356a562566e453/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d2d3e43b917f87ce4e8378076888dd03e4c7cc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d2d3e43b917f87ce4e8378076888dd03e4c7cc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d2d3e43b917f87ce4e8378076888dd03e4c7cc2"}], "stats": {"total": 45, "additions": 29, "deletions": 16}, "files": [{"sha": "7046378a4797b22e9d15517dd193e78d8be277ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/281e728b57232be21358b49d9e356a562566e453/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/281e728b57232be21358b49d9e356a562566e453/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=281e728b57232be21358b49d9e356a562566e453", "patch": "@@ -1,3 +1,11 @@\n+2015-07-16  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* genattrtab.c (make_canonical): Add a file_location parameter.\n+\tUse fatal_at rather than fatal.\n+\t(get_attr_value): Likewise.  Update call to make_canonical.\n+\t(fill_attr, make_length_attrs, optimize_attrs, gen_attr)\n+\t(make_internal_attr): Update calls accordingly.\n+\n 2015-07-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* read-md.h (message_with_line, error_with_line): Delete."}, {"sha": "1f57c360418cf7db043c022330f00f3c50a56b0a", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/281e728b57232be21358b49d9e356a562566e453/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/281e728b57232be21358b49d9e356a562566e453/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=281e728b57232be21358b49d9e356a562566e453", "patch": "@@ -1171,10 +1171,10 @@ check_defs (void)\n /* Given a valid expression for an attribute value, remove any IF_THEN_ELSE\n    expressions by converting them into a COND.  This removes cases from this\n    program.  Also, replace an attribute value of \"*\" with the default attribute\n-   value.  */\n+   value.  LOC is the location to use for error reporting.  */\n \n static rtx\n-make_canonical (struct attr_desc *attr, rtx exp)\n+make_canonical (file_location loc, struct attr_desc *attr, rtx exp)\n {\n   int i;\n   rtx newexp;\n@@ -1189,7 +1189,7 @@ make_canonical (struct attr_desc *attr, rtx exp)\n       if (! strcmp (XSTR (exp, 0), \"*\"))\n \t{\n \t  if (attr->default_val == 0)\n-\t    fatal (\"(attr_value \\\"*\\\") used in invalid context\");\n+\t    fatal_at (loc, \"(attr_value \\\"*\\\") used in invalid context\");\n \t  exp = attr->default_val->value;\n \t}\n       else\n@@ -1225,14 +1225,14 @@ make_canonical (struct attr_desc *attr, rtx exp)\n \n \t/* First, check for degenerate COND.  */\n \tif (XVECLEN (exp, 0) == 0)\n-\t  return make_canonical (attr, XEXP (exp, 1));\n-\tdefval = XEXP (exp, 1) = make_canonical (attr, XEXP (exp, 1));\n+\t  return make_canonical (loc, attr, XEXP (exp, 1));\n+\tdefval = XEXP (exp, 1) = make_canonical (loc, attr, XEXP (exp, 1));\n \n \tfor (i = 0; i < XVECLEN (exp, 0); i += 2)\n \t  {\n \t    XVECEXP (exp, 0, i) = copy_boolean (XVECEXP (exp, 0, i));\n \t    XVECEXP (exp, 0, i + 1)\n-\t      = make_canonical (attr, XVECEXP (exp, 0, i + 1));\n+\t      = make_canonical (loc, attr, XVECEXP (exp, 0, i + 1));\n \t    if (! rtx_equal_p (XVECEXP (exp, 0, i + 1), defval))\n \t      allsame = 0;\n \t  }\n@@ -1275,19 +1275,21 @@ copy_boolean (rtx exp)\n    `insn_code' is the code of an insn whose attribute has the specified\n    value (-2 if not processing an insn).  We ensure that all insns for\n    a given value have the same number of alternatives if the value checks\n-   alternatives.  */\n+   alternatives.  LOC is the location to use for error reporting.  */\n \n static struct attr_value *\n-get_attr_value (rtx value, struct attr_desc *attr, int insn_code)\n+get_attr_value (file_location loc, rtx value, struct attr_desc *attr,\n+\t\tint insn_code)\n {\n   struct attr_value *av;\n   uint64_t num_alt = 0;\n \n-  value = make_canonical (attr, value);\n+  value = make_canonical (loc, attr, value);\n   if (compares_alternatives_p (value))\n     {\n       if (insn_code < 0 || insn_alternatives == NULL)\n-\tfatal (\"(eq_attr \\\"alternatives\\\" ...) used in non-insn context\");\n+\tfatal_at (loc, \"(eq_attr \\\"alternatives\\\" ...) used in non-insn\"\n+\t\t  \" context\");\n       else\n \tnum_alt = insn_alternatives[insn_code];\n     }\n@@ -1439,7 +1441,7 @@ fill_attr (struct attr_desc *attr)\n       if (value == NULL)\n \tav = attr->default_val;\n       else\n-\tav = get_attr_value (value, attr, id->insn_code);\n+\tav = get_attr_value (id->loc, value, attr, id->insn_code);\n \n       ie = oballoc (struct insn_ent);\n       ie->def = id;\n@@ -1552,7 +1554,7 @@ make_length_attrs (void)\n     return;\n \n   if (! length_attr->is_numeric)\n-    fatal (\"length attribute must be numeric\");\n+    fatal_at (length_attr->loc, \"length attribute must be numeric\");\n \n   length_attr->is_const = 0;\n   length_attr->is_special = 1;\n@@ -1568,7 +1570,8 @@ make_length_attrs (void)\n       for (av = length_attr->first_value; av; av = av->next)\n \tfor (ie = av->first_insn; ie; ie = ie->next)\n \t  {\n-\t    new_av = get_attr_value (substitute_address (av->value,\n+\t    new_av = get_attr_value (ie->def->loc,\n+\t\t\t\t     substitute_address (av->value,\n \t\t\t\t\t\t\t no_address_fn[i],\n \t\t\t\t\t\t\t address_fn[i]),\n \t\t\t\t     new_attr, ie->def->insn_code);\n@@ -3041,7 +3044,8 @@ optimize_attrs (int max_insn_code)\n \t    {\n \t      newexp = attr_copy_rtx (newexp);\n \t      remove_insn_ent (av, ie);\n-\t      av = get_attr_value (newexp, attr, ie->def->insn_code);\n+\t      av = get_attr_value (ie->def->loc, newexp, attr,\n+\t\t\t\t   ie->def->insn_code);\n \t      iv->av = av;\n \t      insert_insn_ent (av, ie);\n \t    }\n@@ -3183,7 +3187,7 @@ gen_attr (md_rtx_info *info)\n \n   /* Set up the default value.  */\n   XEXP (def, 2) = check_attr_value (XEXP (def, 2), attr);\n-  attr->default_val = get_attr_value (XEXP (def, 2), attr, -2);\n+  attr->default_val = get_attr_value (info->loc, XEXP (def, 2), attr, -2);\n }\n \n /* Given a pattern for DEFINE_PEEPHOLE or DEFINE_INSN, return the number of\n@@ -4613,7 +4617,8 @@ make_internal_attr (const char *name, rtx value, int special)\n   attr->is_numeric = 1;\n   attr->is_const = 0;\n   attr->is_special = (special & ATTR_SPECIAL) != 0;\n-  attr->default_val = get_attr_value (value, attr, -2);\n+  attr->default_val = get_attr_value (file_location (\"<internal>\", 0),\n+\t\t\t\t      value, attr, -2);\n }\n \n /* Find the most used value of an attribute.  */"}]}