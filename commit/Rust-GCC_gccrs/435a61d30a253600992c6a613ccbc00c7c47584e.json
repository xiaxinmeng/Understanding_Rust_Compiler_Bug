{"sha": "435a61d30a253600992c6a613ccbc00c7c47584e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM1YTYxZDMwYTI1MzYwMDk5MmM2YTYxM2NjYmMwMGM3YzQ3NTg0ZQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2009-03-17T12:50:52Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-03-17T12:50:52Z"}, "message": "re PR target/39473 (Typo in untyped_call in i386.md)\n\n2009-03-16  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/39473\n\t* config/i386/i386.c (ix86_expand_call): Check extra clobbers\n\tfor ms->sysv ABI calls only in 64bit mode.\n\n\t* config/i386/i386.md (untyped_call): Support 32bit.\n\nFrom-SVN: r144901", "tree": {"sha": "87d661932320ce8959cb7a4597ff373e3f91ff01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87d661932320ce8959cb7a4597ff373e3f91ff01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/435a61d30a253600992c6a613ccbc00c7c47584e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/435a61d30a253600992c6a613ccbc00c7c47584e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/435a61d30a253600992c6a613ccbc00c7c47584e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/435a61d30a253600992c6a613ccbc00c7c47584e/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1cb3c37c534eff3d75813c54b8eefbc52a8da4d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cb3c37c534eff3d75813c54b8eefbc52a8da4d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cb3c37c534eff3d75813c54b8eefbc52a8da4d8"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "be2837f2854d6871be8180fead3fac4716d05326", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435a61d30a253600992c6a613ccbc00c7c47584e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435a61d30a253600992c6a613ccbc00c7c47584e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=435a61d30a253600992c6a613ccbc00c7c47584e", "patch": "@@ -1,3 +1,11 @@\n+2009-03-16  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/39473\n+\t* config/i386/i386.c (ix86_expand_call): Check extra clobbers\n+\tfor ms->sysv ABI calls only in 64bit mode.\n+\n+\t* config/i386/i386.md (untyped_call): Support 32bit.\n+\n 2009-03-16  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* doc/extend.texi: Replace x86_65 with x86_64."}, {"sha": "bc912b60b5af8fe285fac9450dd84909abdbd173", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435a61d30a253600992c6a613ccbc00c7c47584e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435a61d30a253600992c6a613ccbc00c7c47584e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=435a61d30a253600992c6a613ccbc00c7c47584e", "patch": "@@ -18617,12 +18617,7 @@ ix86_expand_call (rtx retval, rtx fnaddr, rtx callarg1,\n \t\t  rtx pop, int sibcall)\n {\n   rtx use = NULL, call;\n-  enum calling_abi function_call_abi;\n \n-  if (callarg2 && INTVAL (callarg2) == -2)\n-    function_call_abi = MS_ABI;\n-  else\n-    function_call_abi = SYSV_ABI;\n   if (pop == const0_rtx)\n     pop = NULL;\n   gcc_assert (!TARGET_64BIT || !pop);\n@@ -18678,12 +18673,13 @@ ix86_expand_call (rtx retval, rtx fnaddr, rtx callarg1,\n       pop = gen_rtx_PLUS (Pmode, stack_pointer_rtx, pop);\n       pop = gen_rtx_SET (VOIDmode, stack_pointer_rtx, pop);\n       call = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, call, pop));\n-      gcc_assert (ix86_cfun_abi () != MS_ABI || function_call_abi != SYSV_ABI);\n     }\n-  /* We need to represent that SI and DI registers are clobbered\n-     by SYSV calls.  */\n-  if (ix86_cfun_abi () == MS_ABI && function_call_abi == SYSV_ABI)\n+  if (TARGET_64BIT\n+      && ix86_cfun_abi () == MS_ABI\n+      && (!callarg2 || INTVAL (callarg2) != -2))\n     {\n+      /* We need to represent that SI and DI registers are clobbered\n+\t by SYSV calls.  */\n       static int clobbered_registers[] = {\n \tXMM6_REG, XMM7_REG, XMM8_REG,\n \tXMM9_REG, XMM10_REG, XMM11_REG,"}, {"sha": "023f2e19f9817004456817daadd1745dc9106f0e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435a61d30a253600992c6a613ccbc00c7c47584e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435a61d30a253600992c6a613ccbc00c7c47584e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=435a61d30a253600992c6a613ccbc00c7c47584e", "patch": "@@ -15159,13 +15159,19 @@\n   /* In order to give reg-stack an easier job in validating two\n      coprocessor registers as containing a possible return value,\n      simply pretend the untyped call returns a complex long double\n-     value.  */\n+     value. \n+\n+     We can't use SSE_REGPARM_MAX here since callee is unprototyped\n+     and should have the default ABI.  */\n \n   ix86_expand_call ((TARGET_FLOAT_RETURNS_IN_80387\n \t\t     ? gen_rtx_REG (XCmode, FIRST_FLOAT_REG) : NULL),\n \t\t    operands[0], const0_rtx,\n-\t\t    GEN_INT ((DEFAULT_ABI == SYSV_ABI ? X86_64_SSE_REGPARM_MAX\n-\t\t    \t\t\t\t      : X64_SSE_REGPARM_MAX)\n+\t\t    GEN_INT ((TARGET_64BIT\n+\t\t\t      ? (DEFAULT_ABI == SYSV_ABI\n+\t\t\t\t ? X86_64_SSE_REGPARM_MAX\n+\t\t\t\t : X64_SSE_REGPARM_MAX)\n+\t\t\t      : X86_32_SSE_REGPARM_MAX)\n \t\t    \t     - 1),\n \t\t    NULL, 0);\n "}]}