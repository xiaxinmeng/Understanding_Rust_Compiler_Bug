{"sha": "0df824fade1ddb1db395ff1340bd24691c2cc821", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRmODI0ZmFkZTFkZGIxZGIzOTVmZjEzNDBiZDI0NjkxYzJjYzgyMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-06-15T22:45:02Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-06-15T22:45:02Z"}, "message": "escape: Analyze binary expressions.\n\nBinary expressions might contain function calls that cause an object\nto escape.  Previously, there were not analyzed.\n\nReviewed-on: https://go-review.googlesource.com/10660\n\nFrom-SVN: r224496", "tree": {"sha": "d6d4ae67acb9431c9181d57a20a864dccbfd4d97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6d4ae67acb9431c9181d57a20a864dccbfd4d97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0df824fade1ddb1db395ff1340bd24691c2cc821", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0df824fade1ddb1db395ff1340bd24691c2cc821", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0df824fade1ddb1db395ff1340bd24691c2cc821", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0df824fade1ddb1db395ff1340bd24691c2cc821/comments", "author": null, "committer": null, "parents": [{"sha": "7faaf44a7f673db903e6b85b2d8d30e189622973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7faaf44a7f673db903e6b85b2d8d30e189622973", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7faaf44a7f673db903e6b85b2d8d30e189622973"}], "stats": {"total": 51, "additions": 34, "deletions": 17}, "files": [{"sha": "199ba948ac561da9ba1221861c8d484f4f0efda4", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df824fade1ddb1db395ff1340bd24691c2cc821/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df824fade1ddb1db395ff1340bd24691c2cc821/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=0df824fade1ddb1db395ff1340bd24691c2cc821", "patch": "@@ -1,4 +1,4 @@\n-8eeba3ad318863eea867669609a1910101c23f00\n+a5122ab435cf40c22b110487eb5f189ee28e77f4\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "d54b7cc9eb2dc31346e07c3aeab5c31c082d25ab", "filename": "gcc/go/gofrontend/escape.cc", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df824fade1ddb1db395ff1340bd24691c2cc821/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df824fade1ddb1db395ff1340bd24691c2cc821/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fescape.cc?ref=0df824fade1ddb1db395ff1340bd24691c2cc821", "patch": "@@ -453,6 +453,11 @@ class Build_connection_graphs : public Traverse\n   void\n   handle_composite_literal(Named_object* object, Expression* expr);\n \n+  // Handle analysis of the left and right operands of a binary expression\n+  // with respect to OBJECT.\n+  void\n+  handle_binary(Named_object* object, Expression* expr);\n+\n   // Resolve the outermost named object of EXPR if there is one.\n   Named_object*\n   resolve_var_reference(Expression* expr);\n@@ -931,6 +936,31 @@ Build_connection_graphs::handle_composite_literal(Named_object* object,\n     }\n }\n \n+// Given an OBJECT reference in a binary expression E, analyze the left and\n+// right operands for possible edges.\n+\n+void\n+Build_connection_graphs::handle_binary(Named_object* object, Expression* e)\n+{\n+  Binary_expression* be = e->binary_expression();\n+  go_assert(be != NULL);\n+  Expression* left = be->left();\n+  Expression* right = be->right();\n+\n+  if (left->call_result_expression() != NULL)\n+    left = left->call_result_expression()->call();\n+  if (left->call_expression() != NULL)\n+    this->handle_call(object, left);\n+  else if (left->binary_expression() != NULL)\n+    this->handle_binary(object, left);\n+  if (right->call_result_expression() != NULL)\n+    right = right->call_result_expression()->call();\n+  if (right->call_expression() != NULL)\n+    this->handle_call(object, right);\n+  else if (right->binary_expression() != NULL)\n+    this->handle_binary(object, right);\n+}\n+\n // Create connection nodes for each variable in a called function.\n \n int\n@@ -1024,8 +1054,6 @@ Build_connection_graphs::variable(Named_object* var)\n \t\t || rhs_no != var)\n \t\tbreak;\n \n-\t      var_node->connection_node()->set_escape_state(Node::ESCAPE_ARG);\n-\n \t      Node* def_node = this->gogo_->add_connection_node(lhs_no);\n \t      def_node->add_edge(var_node);\n \t    }\n@@ -1075,20 +1103,7 @@ Build_connection_graphs::variable(Named_object* var)\n \t      if (cond->call_expression() != NULL)\n \t\tthis->handle_call(var, cond);\n \t      else if (cond->binary_expression() != NULL)\n-\t\t{\n-\t\t  Binary_expression* comp = cond->binary_expression();\n-\t\t  Expression* left = comp->left();\n-\t\t  Expression* right = comp->right();\n-\n-\t\t  if (left->call_result_expression() != NULL)\n-\t\t    left = left->call_result_expression()->call();\n-\t\t  if (left->call_expression() != NULL)\n-\t\t    this->handle_call(var, left);\n-\t\t  if (right->call_result_expression() != NULL)\n-\t\t    right = right->call_result_expression()->call();\n-\t\t  if (right->call_expression() != NULL)\n-\t\t    this->handle_call(var, right);\n-\t\t}\n+\t\tthis->handle_binary(var, cond);\n \t    }\n \t    break;\n \n@@ -1117,6 +1132,8 @@ Build_connection_graphs::variable(Named_object* var)\n \t\tinit = init->call_result_expression()->call();\n \t      if (init->call_expression() != NULL)\n \t\tthis->handle_call(var, init);\n+\t      else if (init->binary_expression() != NULL)\n+\t\tthis->handle_binary(var, init);\n \t    }\n \t    break;\n "}]}