{"sha": "450a927a7a65632a4aca39258ff2dd943802196e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUwYTkyN2E3YTY1NjMyYTRhY2EzOTI1OGZmMmRkOTQzODAyMTk2ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-02-09T21:46:18Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-02-09T21:46:18Z"}, "message": "re PR c++/39109 (Accessible constructor required for new)\n\n        PR c++/39109\n        * semantics.c (simplify_aggr_init_expr): Do zero-initialization here.\n        * init.c (build_value_init): Not here. Don't build a TARGET_EXPR.\n        * tree.c (get_target_expr): Handle AGGR_INIT_EXPR.\n        * cp-gimplify.c (cp_gimplify_init_expr): Remove special handling\n        for build_value_init TARGET_EXPR.\n        * cp-tree.h (AGGR_INIT_ZERO_FIRST): New macro.\n\nFrom-SVN: r144044", "tree": {"sha": "82fa13f1148b5e6f8aca8bed6ab67a8e148af277", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82fa13f1148b5e6f8aca8bed6ab67a8e148af277"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/450a927a7a65632a4aca39258ff2dd943802196e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/450a927a7a65632a4aca39258ff2dd943802196e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/450a927a7a65632a4aca39258ff2dd943802196e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/450a927a7a65632a4aca39258ff2dd943802196e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a3b094ff2c230c3b8294ace002c77f28cfc1994", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a3b094ff2c230c3b8294ace002c77f28cfc1994", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a3b094ff2c230c3b8294ace002c77f28cfc1994"}], "stats": {"total": 69, "additions": 49, "deletions": 20}, "files": [{"sha": "2db00fd979b12fc2b40317200322a0fbc2e587ee", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/450a927a7a65632a4aca39258ff2dd943802196e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/450a927a7a65632a4aca39258ff2dd943802196e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=450a927a7a65632a4aca39258ff2dd943802196e", "patch": "@@ -1,3 +1,13 @@\n+2009-02-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/39109\n+\t* semantics.c (simplify_aggr_init_expr): Do zero-initialization here.\n+\t* init.c (build_value_init): Not here. Don't build a TARGET_EXPR.\n+\t* tree.c (get_target_expr): Handle AGGR_INIT_EXPR.\n+\t* cp-gimplify.c (cp_gimplify_init_expr): Remove special handling\n+\tfor build_value_init TARGET_EXPR.\n+\t* cp-tree.h (AGGR_INIT_ZERO_FIRST): New macro.\n+\n 2009-02-06  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/35147"}, {"sha": "838a9d6fa423f0efe29649d3f03bbd93ff7200f9", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/450a927a7a65632a4aca39258ff2dd943802196e/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/450a927a7a65632a4aca39258ff2dd943802196e/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=450a927a7a65632a4aca39258ff2dd943802196e", "patch": "@@ -460,14 +460,6 @@ cp_gimplify_init_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t  if (from != sub)\n \t    TREE_TYPE (from) = void_type_node;\n \t}\n-      else if (TREE_CODE (sub) == INIT_EXPR\n-\t       && TREE_OPERAND (sub, 0) == slot)\n-\t{\n-\t  /* An INIT_EXPR under TARGET_EXPR created by build_value_init,\n-\t     will be followed by an AGGR_INIT_EXPR.  */\n-\t  gimplify_expr (&to, pre_p, post_p, is_gimple_lvalue, fb_lvalue);\n-\t  TREE_OPERAND (sub, 0) = to;\n-\t}\n \n       if (t == sub)\n \tbreak;"}, {"sha": "87eefa33437ef1b62753b7d6ce7a13ef0219facd", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/450a927a7a65632a4aca39258ff2dd943802196e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/450a927a7a65632a4aca39258ff2dd943802196e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=450a927a7a65632a4aca39258ff2dd943802196e", "patch": "@@ -2492,6 +2492,11 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n #define AGGR_INIT_VIA_CTOR_P(NODE) \\\n   TREE_LANG_FLAG_0 (AGGR_INIT_EXPR_CHECK (NODE))\n \n+/* Nonzero if expanding this AGGR_INIT_EXPR should first zero-initialize\n+   the object.  */\n+#define AGGR_INIT_ZERO_FIRST(NODE) \\\n+  TREE_LANG_FLAG_2 (AGGR_INIT_EXPR_CHECK (NODE))\n+\n /* AGGR_INIT_EXPR accessors.  These are equivalent to the CALL_EXPR\n    accessors, except for AGGR_INIT_EXPR_SLOT (which takes the place of\n    CALL_EXPR_STATIC_CHAIN).  */"}, {"sha": "d4dafedd54fdd5f8e2ca4ea363f9f838e71daa77", "filename": "gcc/cp/init.c", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/450a927a7a65632a4aca39258ff2dd943802196e/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/450a927a7a65632a4aca39258ff2dd943802196e/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=450a927a7a65632a4aca39258ff2dd943802196e", "patch": "@@ -309,21 +309,13 @@ build_value_init (tree type)\n \t  /* This is a class that needs constructing, but doesn't have\n \t     a user-provided constructor.  So we need to zero-initialize\n \t     the object and then call the implicitly defined ctor.\n-\t     Implement this by sticking the zero-initialization inside\n-\t     the TARGET_EXPR for the constructor call;\n-\t     cp_gimplify_init_expr will know how to handle it.  */\n-\t  tree init = build_zero_init (type, NULL_TREE,\n-\t\t\t\t       /*static_storage_p=*/false);\n+\t     This will be handled in simplify_aggr_init_expr.  */\n \t  tree ctor = build_special_member_call\n \t    (NULL_TREE, complete_ctor_identifier,\n \t     NULL_TREE, type, LOOKUP_NORMAL, tf_warning_or_error);\n \n-\t  ctor = build_cplus_new (type, ctor);\n-\t  init = build2 (INIT_EXPR, void_type_node,\n-\t\t\t TARGET_EXPR_SLOT (ctor), init);\n-\t  init = build2 (COMPOUND_EXPR, void_type_node, init,\n-\t\t\t TARGET_EXPR_INITIAL (ctor));\n-\t  TARGET_EXPR_INITIAL (ctor) = init;\n+\t  ctor = build_aggr_init_expr (type, ctor);\n+\t  AGGR_INIT_ZERO_FIRST (ctor) = 1;\n \t  return ctor;\n \t}\n       else if (TREE_CODE (type) != UNION_TYPE)"}, {"sha": "55b0bae6cbb32643a3e804ad0073edeed7fcfb60", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/450a927a7a65632a4aca39258ff2dd943802196e/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/450a927a7a65632a4aca39258ff2dd943802196e/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=450a927a7a65632a4aca39258ff2dd943802196e", "patch": "@@ -3125,6 +3125,15 @@ simplify_aggr_init_expr (tree *tp)\n       call_expr = build2 (COMPOUND_EXPR, TREE_TYPE (slot), call_expr, slot);\n     }\n \n+  if (AGGR_INIT_ZERO_FIRST (aggr_init_expr))\n+    {\n+      tree init = build_zero_init (type, NULL_TREE,\n+\t\t\t\t   /*static_storage_p=*/false);\n+      init = build2 (INIT_EXPR, void_type_node, slot, init);\n+      call_expr = build2 (COMPOUND_EXPR, TREE_TYPE (call_expr),\n+\t\t\t  init, call_expr);\n+    }\n+\n   *tp = call_expr;\n }\n "}, {"sha": "606a94649745d03c0e3efc59176064dd200327d6", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/450a927a7a65632a4aca39258ff2dd943802196e/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/450a927a7a65632a4aca39258ff2dd943802196e/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=450a927a7a65632a4aca39258ff2dd943802196e", "patch": "@@ -487,7 +487,10 @@ force_target_expr (tree type, tree init)\n tree\n get_target_expr (tree init)\n {\n-  return build_target_expr_with_type (init, TREE_TYPE (init));\n+  if (TREE_CODE (init) == AGGR_INIT_EXPR)\n+    return build_target_expr (AGGR_INIT_EXPR_SLOT (init), init);\n+  else\n+    return build_target_expr_with_type (init, TREE_TYPE (init));\n }\n \n /* If EXPR is a bitfield reference, convert it to the declared type of"}, {"sha": "ebd148d9cdfa2755f35cec9004dcc0c9bfe10688", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/450a927a7a65632a4aca39258ff2dd943802196e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/450a927a7a65632a4aca39258ff2dd943802196e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=450a927a7a65632a4aca39258ff2dd943802196e", "patch": "@@ -1,3 +1,8 @@\n+2009-02-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/39109\n+\t* g++.dg/init/value6.C: New test.\n+\n 2009-02-09  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/x86_64/abi/abi-x86_64.exp: Use glob instead of"}, {"sha": "d7d29bf0a3e10710d19497e686c04f0a78dd5bf4", "filename": "gcc/testsuite/g++.dg/init/value6.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/450a927a7a65632a4aca39258ff2dd943802196e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvalue6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/450a927a7a65632a4aca39258ff2dd943802196e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvalue6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvalue6.C?ref=450a927a7a65632a4aca39258ff2dd943802196e", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/39109\n+\n+struct N\n+{\n+  private:\n+    virtual ~N ();\n+};\n+\n+N *\n+foo ()\n+{\n+  return new N ();\n+}"}]}