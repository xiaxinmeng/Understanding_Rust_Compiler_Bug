{"sha": "5eda3d66aa0bb2baef0ae78a8674092350b75e16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVkYTNkNjZhYTBiYjJiYWVmMGFlNzhhODY3NDA5MjM1MGI3NWUxNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-01-25T00:45:14Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-01-25T00:45:14Z"}, "message": "builtins.c (expand_tree_builtin): Move ...\n\n        * builtins.c (expand_tree_builtin): Move ...\n        * c-common.c (expand_tree_builtin): ... here.\n\nFrom-SVN: r31598", "tree": {"sha": "b95a5b674897709b08b27062d7d65cc9af886f91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b95a5b674897709b08b27062d7d65cc9af886f91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5eda3d66aa0bb2baef0ae78a8674092350b75e16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eda3d66aa0bb2baef0ae78a8674092350b75e16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5eda3d66aa0bb2baef0ae78a8674092350b75e16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eda3d66aa0bb2baef0ae78a8674092350b75e16/comments", "author": null, "committer": null, "parents": [{"sha": "52b38064755bdf4b3200eeb38bc65ec6d7de870e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52b38064755bdf4b3200eeb38bc65ec6d7de870e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52b38064755bdf4b3200eeb38bc65ec6d7de870e"}], "stats": {"total": 203, "additions": 106, "deletions": 97}, "files": [{"sha": "8faec20ec2b207fe89a8e3d09aaddd0c9abd5fb0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eda3d66aa0bb2baef0ae78a8674092350b75e16/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eda3d66aa0bb2baef0ae78a8674092350b75e16/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5eda3d66aa0bb2baef0ae78a8674092350b75e16", "patch": "@@ -1,3 +1,8 @@\n+2000-01-24  Richard Henderson  <rth@cygnus.com>\n+\n+\t* builtins.c (expand_tree_builtin): Move ...\n+\t* c-common.c (expand_tree_builtin): ... here.\n+\n 2000-01-25  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* loop.h (LOOP_INFO): New accessor macro."}, {"sha": "1ca5b5dbb5e7f6dfab2daf2c5081164ecd21a23e", "filename": "gcc/builtins.c", "status": "modified", "additions": 0, "deletions": 97, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eda3d66aa0bb2baef0ae78a8674092350b75e16/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eda3d66aa0bb2baef0ae78a8674092350b75e16/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=5eda3d66aa0bb2baef0ae78a8674092350b75e16", "patch": "@@ -2520,100 +2520,3 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n      to be called normally.  */\n   return expand_call (exp, target, ignore);\n }\n-\n-/* Recognize certain built-in functions so we can make tree-codes\n-   other than CALL_EXPR.  We do this when it enables fold-const.c\n-   to do something useful.  */\n-\n-tree\n-expand_tree_builtin (function, params, coerced_params)\n-     tree function, params, coerced_params;\n-{\n-  enum tree_code code;\n-\n-  if (DECL_BUILT_IN_CLASS (function) != BUILT_IN_NORMAL)\n-    return NULL_TREE;\n-\n-  switch (DECL_FUNCTION_CODE (function))\n-    {\n-    case BUILT_IN_ABS:\n-    case BUILT_IN_LABS:\n-    case BUILT_IN_FABS:\n-      if (coerced_params == 0)\n-\treturn integer_zero_node;\n-      return build_unary_op (ABS_EXPR, TREE_VALUE (coerced_params), 0);\n-\n-    case BUILT_IN_ISGREATER:\n-      if (TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT)\n-\tcode = UNLE_EXPR;\n-      else\n-\tcode = LE_EXPR;\n-      goto unordered_cmp;\n-\n-    case BUILT_IN_ISGREATEREQUAL:\n-      if (TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT)\n-\tcode = UNLT_EXPR;\n-      else\n-\tcode = LT_EXPR;\n-      goto unordered_cmp;\n-\n-    case BUILT_IN_ISLESS:\n-      if (TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT)\n-\tcode = UNGE_EXPR;\n-      else\n-\tcode = GE_EXPR;\n-      goto unordered_cmp;\n-\n-    case BUILT_IN_ISLESSEQUAL:\n-      if (TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT)\n-\tcode = UNGT_EXPR;\n-      else\n-\tcode = GT_EXPR;\n-      goto unordered_cmp;\n-\n-    case BUILT_IN_ISLESSGREATER:\n-      if (TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT)\n-\tcode = UNEQ_EXPR;\n-      else\n-\tcode = EQ_EXPR;\n-      goto unordered_cmp;\n-\n-    case BUILT_IN_ISUNORDERED:\n-      if (TARGET_FLOAT_FORMAT != IEEE_FLOAT_FORMAT)\n-\treturn integer_zero_node;\n-      code = UNORDERED_EXPR;\n-      goto unordered_cmp;\n-\n-    unordered_cmp:\n-      {\n-\ttree arg0, arg1;\n-\n-\tif (params == 0\n-\t    || TREE_CHAIN (params) == 0)\n-\t  {\n-\t    error (\"too few arguments to function `%s'\",\n-\t\t   IDENTIFIER_POINTER (DECL_NAME (function)));\n-\t    return error_mark_node;\n-\t  }\n-\telse if (TREE_CHAIN (TREE_CHAIN (params)) != 0)\n-\t  {\n-\t    error (\"too many arguments to function `%s'\",\n-\t\t   IDENTIFIER_POINTER (DECL_NAME (function)));\n-\t    return error_mark_node;\n-\t  }\n-\n-\targ0 = TREE_VALUE (params);\n-\targ1 = TREE_VALUE (TREE_CHAIN (params));\n-\targ0 = build_binary_op (code, arg0, arg1, 0);\n-\tif (code != UNORDERED_EXPR)\n-\t  arg0 = build_unary_op (TRUTH_NOT_EXPR, arg0, 0);\n-\treturn arg0;\n-      }\n-      break;\n-\n-    default:\n-      break;\n-    }\n-\n-  return NULL_TREE;\n-}"}, {"sha": "f7d670cb40cce08ef430a40d43a109f47fd4d999", "filename": "gcc/c-common.c", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eda3d66aa0bb2baef0ae78a8674092350b75e16/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eda3d66aa0bb2baef0ae78a8674092350b75e16/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=5eda3d66aa0bb2baef0ae78a8674092350b75e16", "patch": "@@ -3960,3 +3960,104 @@ self_promoting_args_p (parms)\n     }\n   return 1;\n }\n+\n+/* Recognize certain built-in functions so we can make tree-codes\n+   other than CALL_EXPR.  We do this when it enables fold-const.c\n+   to do something useful.  */\n+/* ??? By rights this should go in builtins.c, but only C and C++\n+   implement build_{binary,unary}_op.  Not exactly sure what bits\n+   of functionality are actually needed from those functions, or\n+   where the similar functionality exists in the other front ends.  */\n+\n+tree\n+expand_tree_builtin (function, params, coerced_params)\n+     tree function, params, coerced_params;\n+{\n+  enum tree_code code;\n+\n+  if (DECL_BUILT_IN_CLASS (function) != BUILT_IN_NORMAL)\n+    return NULL_TREE;\n+\n+  switch (DECL_FUNCTION_CODE (function))\n+    {\n+    case BUILT_IN_ABS:\n+    case BUILT_IN_LABS:\n+    case BUILT_IN_FABS:\n+      if (coerced_params == 0)\n+\treturn integer_zero_node;\n+      return build_unary_op (ABS_EXPR, TREE_VALUE (coerced_params), 0);\n+\n+    case BUILT_IN_ISGREATER:\n+      if (TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT)\n+\tcode = UNLE_EXPR;\n+      else\n+\tcode = LE_EXPR;\n+      goto unordered_cmp;\n+\n+    case BUILT_IN_ISGREATEREQUAL:\n+      if (TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT)\n+\tcode = UNLT_EXPR;\n+      else\n+\tcode = LT_EXPR;\n+      goto unordered_cmp;\n+\n+    case BUILT_IN_ISLESS:\n+      if (TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT)\n+\tcode = UNGE_EXPR;\n+      else\n+\tcode = GE_EXPR;\n+      goto unordered_cmp;\n+\n+    case BUILT_IN_ISLESSEQUAL:\n+      if (TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT)\n+\tcode = UNGT_EXPR;\n+      else\n+\tcode = GT_EXPR;\n+      goto unordered_cmp;\n+\n+    case BUILT_IN_ISLESSGREATER:\n+      if (TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT)\n+\tcode = UNEQ_EXPR;\n+      else\n+\tcode = EQ_EXPR;\n+      goto unordered_cmp;\n+\n+    case BUILT_IN_ISUNORDERED:\n+      if (TARGET_FLOAT_FORMAT != IEEE_FLOAT_FORMAT)\n+\treturn integer_zero_node;\n+      code = UNORDERED_EXPR;\n+      goto unordered_cmp;\n+\n+    unordered_cmp:\n+      {\n+\ttree arg0, arg1;\n+\n+\tif (params == 0\n+\t    || TREE_CHAIN (params) == 0)\n+\t  {\n+\t    error (\"too few arguments to function `%s'\",\n+\t\t   IDENTIFIER_POINTER (DECL_NAME (function)));\n+\t    return error_mark_node;\n+\t  }\n+\telse if (TREE_CHAIN (TREE_CHAIN (params)) != 0)\n+\t  {\n+\t    error (\"too many arguments to function `%s'\",\n+\t\t   IDENTIFIER_POINTER (DECL_NAME (function)));\n+\t    return error_mark_node;\n+\t  }\n+\n+\targ0 = TREE_VALUE (params);\n+\targ1 = TREE_VALUE (TREE_CHAIN (params));\n+\targ0 = build_binary_op (code, arg0, arg1, 0);\n+\tif (code != UNORDERED_EXPR)\n+\t  arg0 = build_unary_op (TRUTH_NOT_EXPR, arg0, 0);\n+\treturn arg0;\n+      }\n+      break;\n+\n+    default:\n+      break;\n+    }\n+\n+  return NULL_TREE;\n+}"}]}