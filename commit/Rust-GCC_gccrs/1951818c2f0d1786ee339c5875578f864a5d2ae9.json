{"sha": "1951818c2f0d1786ee339c5875578f864a5d2ae9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk1MTgxOGMyZjBkMTc4NmVlMzM5YzU4NzU1NzhmODY0YTVkMmFlOQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2002-04-09T20:07:15Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-04-09T20:07:15Z"}, "message": "config.gcc (sh-*-elf*): Use sh/embed-elf.h instead of sh/elf.h.\n\n\t* config.gcc (sh-*-elf*): Use sh/embed-elf.h instead of sh/elf.h.\n\t(sh64-*-elf*, sh-*-rtemself*): Likewise.\n\t* config/sh/embed_bb.c: New file.\n\t* config/sh/embed-elf.h: New file.\n\t* sh.h (CPP_SPEC): Supply __SIZE_TYPE__ and __PTRDIFF_TYPE__\n\tif -m[12345]* option is given.  Don't use subtarget_cpp_ptr_spec.\n\t(CPP_DEFAULT_CPU_SPEC): Add settings for __SIZE_TYPE__ and\n\t__PTRDIFF_TYPE__ .\n\t(SUBTARGET_CPP_PTR_SPEC): Don't define.\n\t(EXTRA_SPECS): Remove subtarget_cpp_ptr_spec.\n\tAdd subtarget_asm_endian_spec.\n\t(ASM_SPEC): Use subtarget_asm_endian_spec.\n\t(SUBTARGET_ASM_ENDIAN_SPEC): Define.\n\t(RETURN_ADDR_RTX): Use PR_MEDIA_REG for TARGET_SH5.\n\t(WCHAR_UNSIGNED): Define.\n\t(SH_ELF_WCHAR_TYPE, SH_DBX_REGISTER_NUMBER): Define.\n\t(DBX_REGISTER_NUMBER): Use SH_DBX_REGISTER_NUMBER.\n\t(ALLOCATE_INITIAL_VALUE): Use PR_MEDIA_REG for TARGET_SH5.\n\tFix value.\n\t* sh.c (calc_live_regs): Use PR_MEDIA_REG for TARGET_SH5.\n\t(sh_adjust_cost): Likewise.\n\tsh64.h (CPP_DEFAULT_CPU_SPEC): Add settings for __SIZE_TYPE__ and\n\t__PTRDIFF_TYPE__ .\n\t(SUBTARGET_CPP_PTR_SPEC, WCHAR_TYPE): Don't #undef/ #define.\n\t(WCHAR_TYPE_SIZE): Likewise.\n\t(ASM_SPEC): Use subtarget_asm_endian_spec.\n\t(SH_ELF_WCHAR_TYPE): #undef/ #define.\n\t(MAX_WCHAR_TYPE_SIZE): Don't #undef.\n\t* config/sh/elf.h (WCHAR_UNSIGNED): #undef .\n\t(MAX_WCHAR_TYPE_SIZE): Don't #define .\n\t(WCHAR_TYPE, WCHAR_TYPE_SIZE): #undef / #define .\n\t(USER_LABEL_PREFIX): Don't #undef /#define .\n\t(DBX_REGISTER_NUMBER): Use SH_DBX_REGISTER_NUMBER.\n\t* config/elf/linux.h (USER_LABEL_PREFIX): Don't #undef /#define .\n\t(SIZE_TYPE, PTRDIFF_TYPE, WCHAR_TYPE, WCHAR_TYPE_SIZE): Likewise.\n\t(ASM_SPEC): Likewise.\n\t(SUBTARGET_ASM_ENDIAN_SPEC): #undef / #define .\n\t(CC1_SPEC): don't supply -m3 for -m4*, -m5*.\n\t* t-sh: (LIB1ASMFUNCS): Use LIB1ASMFUNCS_CACHE.\n\t(LIB2FUNCS_EXTRA): Define.\n\t* t-sh64 (LIB2FUNCS_EXTRA): Define.\n\t* config/sh/t-linux (LIB1ASMFUNCS): Don't redefine.\n\t(LIB1ASMFUNCS_CACHE): Define.\n\t(LIB2FUNCS_EXTRA): Redefine empty.\n\nFrom-SVN: r52091", "tree": {"sha": "c9258b87b28cb4ff5b18739fab18482fb5ad9d19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9258b87b28cb4ff5b18739fab18482fb5ad9d19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1951818c2f0d1786ee339c5875578f864a5d2ae9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1951818c2f0d1786ee339c5875578f864a5d2ae9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1951818c2f0d1786ee339c5875578f864a5d2ae9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1951818c2f0d1786ee339c5875578f864a5d2ae9/comments", "author": null, "committer": null, "parents": [{"sha": "3429579991a67f01bb6339b92a7e1abc2ab08ea0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3429579991a67f01bb6339b92a7e1abc2ab08ea0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3429579991a67f01bb6339b92a7e1abc2ab08ea0"}], "stats": {"total": 254, "additions": 150, "deletions": 104}, "files": [{"sha": "eb7cdb86eaaf5872db69d15969b43f5d3407104c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1951818c2f0d1786ee339c5875578f864a5d2ae9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1951818c2f0d1786ee339c5875578f864a5d2ae9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1951818c2f0d1786ee339c5875578f864a5d2ae9", "patch": "@@ -1,3 +1,50 @@\n+Tue Apr  9 19:15:57 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* config.gcc (sh-*-elf*): Use sh/embed-elf.h instead of sh/elf.h.\n+\t(sh64-*-elf*, sh-*-rtemself*): Likewise.\n+\t* config/sh/embed_bb.c: New file.\n+\t* config/sh/embed-elf.h: New file.\n+\t* sh.h (CPP_SPEC): Supply __SIZE_TYPE__ and __PTRDIFF_TYPE__\n+\tif -m[12345]* option is given.  Don't use subtarget_cpp_ptr_spec.\n+\t(CPP_DEFAULT_CPU_SPEC): Add settings for __SIZE_TYPE__ and\n+\t__PTRDIFF_TYPE__ .\n+\t(SUBTARGET_CPP_PTR_SPEC): Don't define.\n+\t(EXTRA_SPECS): Remove subtarget_cpp_ptr_spec.\n+\tAdd subtarget_asm_endian_spec.\n+\t(ASM_SPEC): Use subtarget_asm_endian_spec.\n+\t(SUBTARGET_ASM_ENDIAN_SPEC): Define.\n+\t(RETURN_ADDR_RTX): Use PR_MEDIA_REG for TARGET_SH5.\n+\t(WCHAR_UNSIGNED): Define.\n+\t(SH_ELF_WCHAR_TYPE, SH_DBX_REGISTER_NUMBER): Define.\n+\t(DBX_REGISTER_NUMBER): Use SH_DBX_REGISTER_NUMBER.\n+\t(ALLOCATE_INITIAL_VALUE): Use PR_MEDIA_REG for TARGET_SH5.\n+\tFix value.\n+\t* sh.c (calc_live_regs): Use PR_MEDIA_REG for TARGET_SH5.\n+\t(sh_adjust_cost): Likewise.\n+\tsh64.h (CPP_DEFAULT_CPU_SPEC): Add settings for __SIZE_TYPE__ and\n+\t__PTRDIFF_TYPE__ .\n+\t(SUBTARGET_CPP_PTR_SPEC, WCHAR_TYPE): Don't #undef/ #define.\n+\t(WCHAR_TYPE_SIZE): Likewise.\n+\t(ASM_SPEC): Use subtarget_asm_endian_spec.\n+\t(SH_ELF_WCHAR_TYPE): #undef/ #define.\n+\t(MAX_WCHAR_TYPE_SIZE): Don't #undef.\n+\t* config/sh/elf.h (WCHAR_UNSIGNED): #undef .\n+\t(MAX_WCHAR_TYPE_SIZE): Don't #define .\n+\t(WCHAR_TYPE, WCHAR_TYPE_SIZE): #undef / #define .\n+\t(USER_LABEL_PREFIX): Don't #undef /#define .\n+\t(DBX_REGISTER_NUMBER): Use SH_DBX_REGISTER_NUMBER.\n+\t* config/elf/linux.h (USER_LABEL_PREFIX): Don't #undef /#define .\n+\t(SIZE_TYPE, PTRDIFF_TYPE, WCHAR_TYPE, WCHAR_TYPE_SIZE): Likewise.\n+\t(ASM_SPEC): Likewise.\n+\t(SUBTARGET_ASM_ENDIAN_SPEC): #undef / #define .\n+\t(CC1_SPEC): don't supply -m3 for -m4*, -m5*.\n+\t* t-sh: (LIB1ASMFUNCS): Use LIB1ASMFUNCS_CACHE.\n+\t(LIB2FUNCS_EXTRA): Define.\n+\t* t-sh64 (LIB2FUNCS_EXTRA): Define.\n+\t* config/sh/t-linux (LIB1ASMFUNCS): Don't redefine.\n+\t(LIB1ASMFUNCS_CACHE): Define.\n+\t(LIB2FUNCS_EXTRA): Redefine empty.\n+\n 2002-04-08  Richard Henderson  <rth@redhat.com>\n \n \t* reorg.c (get_branch_condition): Use reversed_comparison_code."}, {"sha": "2934558c91d70853c9b117b67254db4768bf656f", "filename": "gcc/config.gcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1951818c2f0d1786ee339c5875578f864a5d2ae9/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1951818c2f0d1786ee339c5875578f864a5d2ae9/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=1951818c2f0d1786ee339c5875578f864a5d2ae9", "patch": "@@ -2925,12 +2925,12 @@ s390x-*-linux*)\n \t;;\n sh-*-elf*)\n \ttmake_file=\"sh/t-sh sh/t-elf\"\n-\ttm_file=\"${tm_file} sh/elf.h\"\n+\ttm_file=\"${tm_file} sh/embed-elf.h\"\n \tfloat_format=sh\n \t;;\n sh64-*-elf*)\n \ttmake_file=\"sh/t-sh sh/t-elf sh/t-sh64\"\n-\ttm_file=\"${tm_file} sh/sh.h sh/elf.h sh/sh64.h\"\n+\ttm_file=\"${tm_file} sh/sh.h sh/embed-elf.h sh/sh64.h\"\n \tfloat_format=sh\n \textra_headers=\"../../config/sh/shmedia.h ../../config/sh/ushmedia.h ../../config/sh/sshmedia.h\"\n \t# Not strictly necessary to check this, but a good idea anyway.\n@@ -2941,7 +2941,7 @@ sh64-*-elf*)\n sh-*-rtemself*)\n \txm_defines=POSIX\n \ttmake_file=\"sh/t-sh sh/t-elf t-rtems\"\n-\ttm_file=\"${tm_file} sh/elf.h sh/rtemself.h rtems.h\"\n+\ttm_file=\"${tm_file} sh/embed-elf.h sh/rtemself.h rtems.h\"\n \tfloat_format=sh\n \tif test x$enable_threads = xyes; then\n \t  thread_file='rtems'"}, {"sha": "247f735d494fb68a43193ba77aa2367ea033fe1e", "filename": "gcc/config/sh/elf.h", "status": "modified", "additions": 14, "deletions": 33, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1951818c2f0d1786ee339c5875578f864a5d2ae9/gcc%2Fconfig%2Fsh%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1951818c2f0d1786ee339c5875578f864a5d2ae9/gcc%2Fconfig%2Fsh%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Felf.h?ref=1951818c2f0d1786ee339c5875578f864a5d2ae9", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for gcc for Hitachi / SuperH SH using ELF.\n-   Copyright (C) 1996, 1997, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Ian Lance Taylor <ian@cygnus.com>.\n \n This file is part of GNU CC.\n@@ -30,6 +30,9 @@ Boston, MA 02111-1307, USA.  */\n #undef SIZE_TYPE\n #undef PTRDIFF_TYPE\n \n+/* And one that is defined in sh.h and should be undefined in svr4.h...  */\n+#undef WCHAR_UNSIGNED\n+\n /* Be ELF-like.  */\n /* TODO: convert includes to ${tm_file} list in config.gcc.  */\n #include \"dbxelf.h\"\n@@ -49,17 +52,17 @@ Boston, MA 02111-1307, USA.  */\n /* use a more compact format for line information */\n #define DWARF2_ASM_LINE_DEBUG_INFO 1\n \n-/* WCHAR_TYPE_SIZE is defined to BITS_PER_WORD in svr4.h, but\n-   BITS_PER_WORD isn't constant any more.  Fortunately, on no SH\n-   platform is it wider than 32-bits.  */\n-#define MAX_WCHAR_TYPE_SIZE 32\n+/* WCHAR_TYPE / WCHAR_TYPE_SIZE are defined to long int / BITS_PER_WORD in\n+   svr4.h, but these work out as 64 bit for shmedia64.  */\n+#undef WCHAR_TYPE\n+/* #define WCHAR_TYPE (TARGET_SH5 ? \"int\" : \"long int\") */\n+#define WCHAR_TYPE SH_ELF_WCHAR_TYPE\n+   \n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 32\n \n-/* The prefix to add to user-visible assembler symbols.\n-   Note that svr4.h redefined it from the original value (that we want)\n-   in sh.h */\n \n-#undef USER_LABEL_PREFIX\n-#define USER_LABEL_PREFIX \"_\"\n+/* The prefix to add to user-visible assembler symbols.  */\n \n #undef LOCAL_LABEL_PREFIX\n #define LOCAL_LABEL_PREFIX \".\"\n@@ -109,29 +112,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* svr4.h undefined DBX_REGISTER_NUMBER, so we need to define it\n    again.  */\n-#define DBX_REGISTER_NUMBER(REGNO)\t\t\t\t\t\\\n-  (GENERAL_REGISTER_P (REGNO)\t\t\t\t\t\t\\\n-   ? ((REGNO) - FIRST_GENERAL_REG)\t\t\t\t\t\\\n-   : FP_REGISTER_P (REGNO)\t\t\t\t\t\t\\\n-   ? ((REGNO) - FIRST_FP_REG + (TARGET_SH5 ? (TARGET_SHCOMPACT ? 245\t\\\n-\t\t\t\t\t      : 77) : 25))\t\t\\\n-   : XD_REGISTER_P (REGNO)\t\t\t\t\t\t\\\n-   ? ((REGNO) - FIRST_XD_REG + (TARGET_SH5 ? 289 : 87))\t\t\t\\\n-   : TARGET_REGISTER_P (REGNO)\t\t\t\t\t\t\\\n-   ? ((REGNO) - FIRST_TARGET_REG + 68)\t\t\t\t\t\\\n-   : (REGNO) == PR_REG\t\t\t\t\t\t\t\\\n-   ? (TARGET_SH5 ? 241 : 17)\t\t\t\t\t\t\\\n-   : (REGNO) == T_REG\t\t\t\t\t\t\t\\\n-   ? (TARGET_SH5 ? 242 : 18)\t\t\t\t\t\t\\\n-   : (REGNO) == GBR_REG\t\t\t\t\t\t\t\\\n-   ? (TARGET_SH5 ? 238 : 19)\t\t\t\t\t\t\\\n-   : (REGNO) == MACH_REG\t\t\t\t\t\t\\\n-   ? (TARGET_SH5 ? 239 : 20)\t\t\t\t\t\t\\\n-   : (REGNO) == MACL_REG\t\t\t\t\t\t\\\n-   ? (TARGET_SH5 ? 240 : 21)\t\t\t\t\t\t\\\n-   : (REGNO) == FPUL_REG\t\t\t\t\t\t\\\n-   ? (TARGET_SH5 ? 244 : 23)\t\t\t\t\t\t\\\n-   : (abort(), -1))\n+#define DBX_REGISTER_NUMBER(REGNO) SH_DBX_REGISTER_NUMBER (REGNO)\n \n #undef ASM_GENERATE_INTERNAL_LABEL\n #define ASM_GENERATE_INTERNAL_LABEL(STRING, PREFIX, NUM) \\"}, {"sha": "4afc78339ad8ce9d960ba11a13a2af9fe84618eb", "filename": "gcc/config/sh/embed-elf.h", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1951818c2f0d1786ee339c5875578f864a5d2ae9/gcc%2Fconfig%2Fsh%2Fembed-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1951818c2f0d1786ee339c5875578f864a5d2ae9/gcc%2Fconfig%2Fsh%2Fembed-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fembed-elf.h?ref=1951818c2f0d1786ee339c5875578f864a5d2ae9", "patch": "@@ -0,0 +1,28 @@\n+/* Definitions of target machine for GNU compiler for Hitachi / SuperH SH \n+   non-Linux embedded targets.\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Contributed by J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"sh/elf.h\"\n+\n+#undef USER_LABEL_PREFIX\n+#define USER_LABEL_PREFIX \"_\"\n+\n+#undef TARGET_HAS_F_SETLKW"}, {"sha": "722b101463c114c34f7ff579fee30f042ae97d34", "filename": "gcc/config/sh/embed_bb.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1951818c2f0d1786ee339c5875578f864a5d2ae9/gcc%2Fconfig%2Fsh%2Fembed_bb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1951818c2f0d1786ee339c5875578f864a5d2ae9/gcc%2Fconfig%2Fsh%2Fembed_bb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fembed_bb.c?ref=1951818c2f0d1786ee339c5875578f864a5d2ae9", "patch": "@@ -0,0 +1,3 @@\n+#define L_bb\n+#undef inhibit_libc\n+#include \"../../libgcc2.c\""}, {"sha": "be5bcb581489b4b26ab97b05fa9af02abb686238", "filename": "gcc/config/sh/linux.h", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1951818c2f0d1786ee339c5875578f864a5d2ae9/gcc%2Fconfig%2Fsh%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1951818c2f0d1786ee339c5875578f864a5d2ae9/gcc%2Fconfig%2Fsh%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flinux.h?ref=1951818c2f0d1786ee339c5875578f864a5d2ae9", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for SH running Linux-based GNU systems using ELF\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n    Contributed by Kazumoto Kojima <kkojima@rr.iij4u.or.jp>\n \n This file is part of GNU CC.\n@@ -23,22 +23,6 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_VERSION\n #define TARGET_VERSION  fputs (\" (SH GNU/Linux with ELF)\", stderr);\n \n-/* Return to the original ELF way.  */\n-#undef USER_LABEL_PREFIX\n-#define USER_LABEL_PREFIX \"\"\n-\n-#undef SIZE_TYPE\n-#define SIZE_TYPE \"unsigned int\"\n- \n-#undef PTRDIFF_TYPE\n-#define PTRDIFF_TYPE \"int\"\n-  \n-#undef WCHAR_TYPE\n-#define WCHAR_TYPE \"long int\"\n-   \n-#undef WCHAR_TYPE_SIZE\n-#define WCHAR_TYPE_SIZE BITS_PER_WORD\n-\n #undef SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC \"\\\n    %{fPIC:-D__PIC__ -D__pic__} \\\n@@ -59,12 +43,12 @@ Boston, MA 02111-1307, USA.  */\n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \"-D__ELF__ -Dunix -D__sh__ -Dlinux -Asystem=posix\"\n \n-#undef ASM_SPEC\n-#define ASM_SPEC  \"%{!mb:-little} %{mrelax:-relax}\"\n+#undef SUBTARGET_ASM_ENDIAN_SPEC\n+#define SUBTARGET_ASM_ENDIAN_SPEC \"%{!mb:-little}\"\n \n #undef CC1_SPEC\n #define CC1_SPEC \\\n-  \"-musermode %{!mb:-ml} %{!m3e:%{!m4:-m3}}\"\n+  \"-musermode %{!mb:-ml} %{!m3e:%{!m4*:%{!m5*:-m3}}}\"\n \n #undef CC1PLUS_SPEC\n #define CC1PLUS_SPEC \\"}, {"sha": "6abdfe6258d94725759b6b8c041881897c2b68ee", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1951818c2f0d1786ee339c5875578f864a5d2ae9/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1951818c2f0d1786ee339c5875578f864a5d2ae9/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=1951818c2f0d1786ee339c5875578f864a5d2ae9", "patch": "@@ -1,4 +1,4 @@\n-/* Definitions of target machine for GNU compiler for Hitachi / SuperH SH\n+/* Definitions of target machine for GNU compiler for Hitachi / SuperH SH.\n    Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000\n    Free Software Foundation, Inc.\n    Contributed by Steve Chamberlain (sac@cygnus.com)."}, {"sha": "ff3c08930ea4d8d6384d5b3645b9828179f1e4dc", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1951818c2f0d1786ee339c5875578f864a5d2ae9/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1951818c2f0d1786ee339c5875578f864a5d2ae9/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=1951818c2f0d1786ee339c5875578f864a5d2ae9", "patch": "@@ -4343,10 +4343,11 @@ calc_live_regs (count_ptr, live_regs_mask)\n \t  target_flags &= ~FPU_SINGLE_BIT;\n \t  break;\n \t}\n-  pr_initial = has_hard_reg_initial_val (Pmode, PR_REG);\n+  pr_initial = has_hard_reg_initial_val (Pmode,\n+\t\t\t\t\t TARGET_SH5 ? PR_MEDIA_REG : PR_REG);\n   pr_live = (pr_initial\n-\t     ? REGNO (pr_initial) != PR_REG\n-\t     : regs_ever_live[PR_REG]);\n+\t     ? REGNO (pr_initial) != (TARGET_SH5 ? PR_MEDIA_REG : PR_REG)\n+\t     : regs_ever_live[TARGET_SH5 ? PR_MEDIA_REG : PR_REG]);\n   /* Force PR to be live if the prologue has to call the SHmedia\n      argument decoder or register saver.  */\n   if (TARGET_SHCOMPACT\n@@ -4356,7 +4357,7 @@ calc_live_regs (count_ptr, live_regs_mask)\n     pr_live = 1;\n   for (count = 0, reg = FIRST_PSEUDO_REGISTER - 1; reg >= 0; reg--)\n     {\n-      if (reg == PR_REG\n+      if (reg == (TARGET_SH5 ? PR_MEDIA_REG : PR_REG)\n \t  ? pr_live\n \t  : (interrupt_handler && ! pragma_trapa)\n \t  ? (/* Need to save all the regs ever live.  */\n@@ -6697,7 +6698,7 @@ sh_adjust_cost (insn, link, dep_insn, cost)\n int\n sh_pr_n_sets ()\n {\n-  return REG_N_SETS (PR_REG);\n+  return REG_N_SETS (TARGET_SH5 ? PR_MEDIA_REG : PR_REG);\n }\n \n /* SHmedia requires registers for branches, so we can't generate new"}, {"sha": "0f9345cd302f23c8588f9a15dcbab83404afa995", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1951818c2f0d1786ee339c5875578f864a5d2ae9/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1951818c2f0d1786ee339c5875578f864a5d2ae9/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=1951818c2f0d1786ee339c5875578f864a5d2ae9", "patch": "@@ -56,10 +56,11 @@ extern int code_for_indirect_jump_scratch;\n %{m4-single:-D__SH4_SINGLE__} \\\n %{m4-nofpu:-D__sh3__ -D__SH4_NOFPU__} \\\n %{m4:-D__SH4__} \\\n+%{m1|m2|m3*|m4*:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n+%{m5*:-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int} \\\n %{!m1:%{!m2:%{!m3*:%{!m4*:%{!m5*:%(cpp_default_cpu_spec)}}}}} \\\n %{mhitachi:-D__HITACHI__} \\\n %(subtarget_cpp_spec) \\\n-%(subtarget_cpp_ptr_spec) \\\n %(subtarget_cpp_endian_spec) \"\n \n #ifndef SUBTARGET_CPP_ENDIAN_SPEC\n@@ -71,25 +72,24 @@ extern int code_for_indirect_jump_scratch;\n #endif\n \n #ifndef CPP_DEFAULT_CPU_SPEC\n-#define CPP_DEFAULT_CPU_SPEC \"-D__sh1__\"\n+#define CPP_DEFAULT_CPU_SPEC \\\n+  \"-D__sh1__ -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int\"\n #endif\n \n-#ifndef SUBTARGET_CPP_PTR_SPEC\n-#define SUBTARGET_CPP_PTR_SPEC \"\\\n-%{m5-64media|m5-64media-nofpu|m5-32media|m5-32media-nofpu|m5-compact|m5-compact-nofpu:-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int} \\\n-%{!m5-64media:%{!m5-64media-nofpu:%{!m5-32media:%{!m5-32media-nofpu:%{!m5-compact:%{!m5-compact-nofpu:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int}}}}}} \\\n-\"\n-#endif\n \n #define EXTRA_SPECS\t\t\t\t\t\t\\\n   { \"subtarget_cpp_spec\", SUBTARGET_CPP_SPEC },\t\t\t\\\n   { \"subtarget_cpp_endian_spec\", SUBTARGET_CPP_ENDIAN_SPEC },\t\\\n-  { \"subtarget_cpp_ptr_spec\", SUBTARGET_CPP_PTR_SPEC },\t\t\\\n-  { \"cpp_default_cpu_spec\", CPP_DEFAULT_CPU_SPEC },\n+  { \"cpp_default_cpu_spec\", CPP_DEFAULT_CPU_SPEC },\t\t\\\n+  { \"subtarget_asm_endian_spec\", SUBTARGET_ASM_ENDIAN_SPEC },\n \n #define CPP_PREDEFINES \"-D__sh__ -Acpu=sh -Amachine=sh\"\n \n-#define ASM_SPEC  \"%{ml:-little} %{mrelax:-relax}\"\n+#define ASM_SPEC  \"%(subtarget_asm_endian_spec) %{mrelax:-relax}\"\n+\n+#ifndef SUBTARGET_ASM_ENDIAN_SPEC\n+#define SUBTARGET_ASM_ENDIAN_SPEC \"%{ml:-little}\"\n+#endif\n \n #define LINK_SPEC \"%{ml:-m shl} %{mrelax:-relax}\"\n \n@@ -2057,7 +2057,7 @@ while (0)\n \n #define RETURN_ADDR_RTX(COUNT, FRAME)\t\\\n   (((COUNT) == 0)\t\t\t\t\\\n-   ? get_hard_reg_initial_val (Pmode, PR_REG) \\\n+   ? get_hard_reg_initial_val (Pmode, TARGET_SHMEDIA ? PR_MEDIA_REG : PR_REG) \\\n    : (rtx) 0)\n \f\n /* Generate necessary RTL for __builtin_saveregs().  */\n@@ -2522,6 +2522,9 @@ while (0)\n \n #define WCHAR_TYPE \"short unsigned int\"\n #define WCHAR_TYPE_SIZE 16\n+#define WCHAR_UNSIGNED 1\n+\n+#define SH_ELF_WCHAR_TYPE \"long int\"\n \n /* Don't cse the address of the function being compiled.  */\n /*#define NO_RECURSIVE_FUNCTION_CSE 1*/\n@@ -2892,8 +2895,11 @@ while (0)\n /* DBX register number for a given compiler register number.  */\n /* GDB has FPUL at 23 and FP0 at 25, so we must add one to all FP registers\n    to match gdb.  */\n-/* If you change this macro, make sure you update it in elf.h too.  */\n-#define DBX_REGISTER_NUMBER(REGNO) \\\n+/* svr4.h undefines this macro, yet we really want to use the same numbers\n+   for coff as for elf, so we go via another macro: SH_DBX_REGISTER_NUMBER.  */\n+#define DBX_REGISTER_NUMBER(REGNO) SH_DBX_REGISTER_NUMBER (REGNO)\n+\n+#define SH_DBX_REGISTER_NUMBER(REGNO) \\\n   (GENERAL_REGISTER_P (REGNO) \\\n    ? ((REGNO) - FIRST_GENERAL_REG) \\\n    : FP_REGISTER_P (REGNO) \\\n@@ -3298,10 +3304,13 @@ extern struct rtx_def *fpscr_rtx;\n #endif /* (defined CRT_BEGIN || defined CRT_END) && ! __SHMEDIA__ */\n \n #define ALLOCATE_INITIAL_VALUE(hard_reg) \\\n-  (REGNO (hard_reg) == PR_REG \\\n+  (REGNO (hard_reg) == (TARGET_SH5 ? PR_MEDIA_REG : PR_REG) \\\n    ? (current_function_is_leaf && ! sh_pr_n_sets () \\\n       ? (hard_reg) \\\n-      : gen_rtx_MEM (Pmode, arg_pointer_rtx)) \\\n+      : gen_rtx_MEM (Pmode, TARGET_SH5 \\\n+\t\t\t    ? (plus_constant (arg_pointer_rtx, \\\n+\t\t\t\t\t      TARGET_SHMEDIA64 ? -8 : -4)) \\\n+\t\t\t    : frame_pointer_rtx)) \\\n    : NULL_RTX)\n \n #endif /* ! GCC_SH_H */"}, {"sha": "a2e225d841ba737c6efa1e9ee8f5a833f82acc8c", "filename": "gcc/config/sh/sh64.h", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1951818c2f0d1786ee339c5875578f864a5d2ae9/gcc%2Fconfig%2Fsh%2Fsh64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1951818c2f0d1786ee339c5875578f864a5d2ae9/gcc%2Fconfig%2Fsh%2Fsh64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh64.h?ref=1951818c2f0d1786ee339c5875578f864a5d2ae9", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler for SuperH SH 5.\n-   Copyright 2000, 2001 Free Software Foundation, Inc.\n+   Copyright 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Alexandre Oliva <aoliva@redhat.com>\n \n This file is part of GNU CC.\n@@ -24,20 +24,15 @@ Boston, MA 02111-1307, USA.  */\n   fputs (\" (SuperH SH)\", stderr);\n \n #undef CPP_DEFAULT_CPU_SPEC\n-#define CPP_DEFAULT_CPU_SPEC \"-D__SH5__=32 -D__SHMEDIA__\"\n-\n-#undef SUBTARGET_CPP_PTR_SPEC\n-#define SUBTARGET_CPP_PTR_SPEC \"\\\n-%{!m1:%{!m2:%{!m3:%{!m3e:%{!m4:%{!m4-single:%{!m4-single-only:%{!m4-nofpu:-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int}}}}}}}} \\\n-%{m1|m2|m3|m3e|m4|m4-single|m4-single-only|m4-nofpu:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-\"\n+#define CPP_DEFAULT_CPU_SPEC \"-D__SH5__=32 -D__SHMEDIA__ \\\n+-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int\"\n \n #undef ASM_SPEC\n-#define ASM_SPEC  \"%{ml:-little} %{mrelax:-relax} \\\n-%{m5-compact:--isa=SHcompact} %{m5-compact-nofpu:--isa=shcompact} \\\n-%{m5-32media:--isa=SHmedia --abi=32} %{m5-32media-nofpu:--isa=SHmedia --abi=32} \\\n-%{m5-64media:--isa=SHmedia --abi=64} %{m5-64media-nofpu:--isa=SHmedia --abi=64} \\\n-%{!m1:%{!m2:%{!m3:%{!m3e:%{!m4:%{!m4-single:%{!m4-single-only:%{!m4-nofpu:%{!m5-64media:%{!m5-64media-nofpu:%{!m5-32media:%{!m5-32media-nofpu:%{!m5-compact:%{!m5-compact-nofpu:--isa=SHmedia --abi=32}}}}}}}}}}}}}} \\\n+#define ASM_SPEC  \"%(subtarget_asm_endian_spec) %{mrelax:-relax} \\\n+%{m5-compact*:--isa=SHcompact} \\\n+%{m5-32media*:--isa=SHmedia --abi=32} \\\n+%{m5-64media*:--isa=SHmedia --abi=64} \\\n+%{!m1:%{!m2:%{!m3*:%{!m4*:%{!m5*:--isa=SHmedia --abi=32}}}}} \\\n \"\n \n #undef LINK_SPEC\n@@ -54,12 +49,5 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT  (SH5_BIT|SH4_BIT|SH3E_BIT)\n \n-/* These have been overridden in svr4.h, included in elf.h.  Restore\n-   them.  */\n-#undef WCHAR_TYPE\n-#define WCHAR_TYPE \"short unsigned int\"\n-\n-#undef WCHAR_TYPE_SIZE\n-#define WCHAR_TYPE_SIZE 16\n-\n-#undef MAX_WCHAR_TYPE_SIZE\n+#undef SH_ELF_WCHAR_TYPE\n+#define SH_ELF_WCHAR_TYPE \"int\""}, {"sha": "a0343b47d80a9b90490870cdcab05240528d6930", "filename": "gcc/config/sh/t-linux", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1951818c2f0d1786ee339c5875578f864a5d2ae9/gcc%2Fconfig%2Fsh%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1951818c2f0d1786ee339c5875578f864a5d2ae9/gcc%2Fconfig%2Fsh%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-linux?ref=1951818c2f0d1786ee339c5875578f864a5d2ae9", "patch": "@@ -1,7 +1,7 @@\n TARGET_LIBGCC2_CFLAGS = -fpic\n-LIB1ASMFUNCS = _ashiftrt _ashiftrt_n _ashiftlt _lshiftrt _movstr \\\n-  _movstr_i4 _mulsi3 _sdivsi3 _sdivsi3_i4 _udivsi3 _udivsi3_i4 _set_fpscr \\\n-  _ic_invalidate\n+LIB1ASMFUNCS_CACHE = _ic_invalidate\n+\n+LIB2FUNCS_EXTRA=\n \n MULTILIB_OPTIONS= mb m3e/m4\n MULTILIB_DIRNAMES= "}, {"sha": "15433f93b9d79ac143227c7cfa060be56f3a5d15", "filename": "gcc/config/sh/t-sh", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1951818c2f0d1786ee339c5875578f864a5d2ae9/gcc%2Fconfig%2Fsh%2Ft-sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1951818c2f0d1786ee339c5875578f864a5d2ae9/gcc%2Fconfig%2Fsh%2Ft-sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-sh?ref=1951818c2f0d1786ee339c5875578f864a5d2ae9", "patch": "@@ -1,6 +1,9 @@\n LIB1ASMSRC = sh/lib1funcs.asm\n LIB1ASMFUNCS = _ashiftrt _ashiftrt_n _ashiftlt _lshiftrt _movstr \\\n-  _movstr_i4 _mulsi3 _sdivsi3 _sdivsi3_i4 _udivsi3 _udivsi3_i4 _set_fpscr\n+  _movstr_i4 _mulsi3 _sdivsi3 _sdivsi3_i4 _udivsi3 _udivsi3_i4 _set_fpscr \\\n+  $(LIB1ASMFUNCS_CACHE)\n+\n+LIB2FUNCS_EXTRA=$(srcdir)/config/sh/embed_bb.c\n \n # We want fine grained libraries, so use the new code to build the\n # floating point emulation libraries."}, {"sha": "91c1db80c16be8860cd77c263abd581416ee6bc2", "filename": "gcc/config/sh/t-sh64", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1951818c2f0d1786ee339c5875578f864a5d2ae9/gcc%2Fconfig%2Fsh%2Ft-sh64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1951818c2f0d1786ee339c5875578f864a5d2ae9/gcc%2Fconfig%2Fsh%2Ft-sh64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-sh64?ref=1951818c2f0d1786ee339c5875578f864a5d2ae9", "patch": "@@ -6,6 +6,8 @@ LIB1ASMFUNCS = \\\n   _shcompact_incoming_args _ic_invalidate _nested_trampoline \\\n   _push_pop_shmedia_regs\n \n+LIB2FUNCS_EXTRA=$(srcdir)/config/sh/embed_bb.c\n+\n MULTILIB_OPTIONS= ml m5-32media-nofpu/m5-compact/m5-compact-nofpu/m5-64media/m5-64media-nofpu\n MULTILIB_DIRNAMES= ml nofpu compact nofpu/compact media64 nofpu/media64\n MULTILIB_MATCHES="}]}