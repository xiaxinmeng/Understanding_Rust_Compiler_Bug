{"sha": "511c8687a8754142bb4434acfa7a2b0278d8f3d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTExYzg2ODdhODc1NDE0MmJiNDQzNGFjZmE3YTJiMDI3OGQ4ZjNkNw==", "commit": {"author": {"name": "Maxim Ostapenko", "email": "m.ostapenko@samsung.com", "date": "2016-11-16T11:13:19Z"}, "committer": {"name": "Maxim Ostapenko", "email": "chefmax@gcc.gnu.org", "date": "2016-11-16T11:13:19Z"}, "message": "re PR sanitizer/78307 (missing symbols in libubsan without changing the soname)\n\n\tPR sanitizer/78307\n\t* ubsan/ubsan_handlers.cc (__ubsan_handle_cfi_bad_icall): New function.\n\t( __ubsan_handle_cfi_bad_icall_abort): Likewise. \n\t* ubsan/ubsan_handlers.h (struct CFIBadIcallData): New type.\n\t* ubsan/ubsan_handlers_cxx.cc (__ubsan_handle_cfi_bad_type): New\n\tfunction.\n\t(__ubsan_handle_cfi_bad_type_abort): Likewise.\n\t* ubsan/ubsan_handlers_cxx.h (struct CFIBadTypeData): New type.\n\t(__ubsan_handle_cfi_bad_type): Export function.\n\t(__ubsan_handle_cfi_bad_type_abort): Likewise.\n\t* HOWTO_MERGE: Update documentation.\n\nFrom-SVN: r242478", "tree": {"sha": "ba2f184fd344d51d38b6283f41122708328b876a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba2f184fd344d51d38b6283f41122708328b876a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/511c8687a8754142bb4434acfa7a2b0278d8f3d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/511c8687a8754142bb4434acfa7a2b0278d8f3d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/511c8687a8754142bb4434acfa7a2b0278d8f3d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/511c8687a8754142bb4434acfa7a2b0278d8f3d7/comments", "author": null, "committer": null, "parents": [{"sha": "024f701ca1dc69ff3d6a3d0ec727debc224018f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/024f701ca1dc69ff3d6a3d0ec727debc224018f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/024f701ca1dc69ff3d6a3d0ec727debc224018f0"}], "stats": {"total": 72, "additions": 71, "deletions": 1}, "files": [{"sha": "f8a0fcd89f2eef96a095b45181d52b3dcdbeded6", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/511c8687a8754142bb4434acfa7a2b0278d8f3d7/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/511c8687a8754142bb4434acfa7a2b0278d8f3d7/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=511c8687a8754142bb4434acfa7a2b0278d8f3d7", "patch": "@@ -1,3 +1,17 @@\n+2016-11-16  Maxim Ostapenko  <m.ostapenko@samsung.com>\n+\n+\tPR sanitizer/78307\n+\t* ubsan/ubsan_handlers.cc (__ubsan_handle_cfi_bad_icall): New function.\n+\t( __ubsan_handle_cfi_bad_icall_abort): Likewise. \n+\t* ubsan/ubsan_handlers.h (struct CFIBadIcallData): New type.\n+\t* ubsan/ubsan_handlers_cxx.cc (__ubsan_handle_cfi_bad_type): New\n+\tfunction.\n+\t(__ubsan_handle_cfi_bad_type_abort): Likewise.\n+\t* ubsan/ubsan_handlers_cxx.h (struct CFIBadTypeData): New type.\n+\t(__ubsan_handle_cfi_bad_type): Export function.\n+\t(__ubsan_handle_cfi_bad_type_abort): Likewise.\n+\t* HOWTO_MERGE: Update documentation.\n+\n 2016-11-15  Matthias Klose  <doko@ubuntu.com>\n \n \t* configure: Regenerate."}, {"sha": "81121aa385ff029c38583f8e2dbd746883ea7bee", "filename": "libsanitizer/HOWTO_MERGE", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/511c8687a8754142bb4434acfa7a2b0278d8f3d7/libsanitizer%2FHOWTO_MERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/511c8687a8754142bb4434acfa7a2b0278d8f3d7/libsanitizer%2FHOWTO_MERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FHOWTO_MERGE?ref=511c8687a8754142bb4434acfa7a2b0278d8f3d7", "patch": "@@ -11,7 +11,8 @@ general list of actions required to perform the merge:\n   in corresponding CMakeLists.txt and config-ix.cmake files from compiler-rt source\n   directory.\n * Apply all needed GCC-specific patches to libsanitizer (note that some of\n-  them might be already included to upstream).\n+  them might be already included to upstream).  The list of these patches is stored\n+  into LOCAL_PATCHES file.\n * Apply all necessary compiler changes.  Be especially careful here, you must\n   not break ABI between compiler and library.  You can reveal these changes by\n   inspecting the history of AddressSanitizer.cpp and ThreadSanitizer.cpp files\n@@ -37,3 +38,4 @@ general list of actions required to perform the merge:\n   in libasan, configure/Makefile changes). The review process has O(N^2) complexity, so you\n   would simplify and probably speed up the review process by doing this.\n * Send your patches for review to GCC Patches Mailing List (gcc-patches@gcc.gnu.org).\n+* Update LOCAL_PATCHES file when you've committed the whole patch set with new revisions numbers."}, {"sha": "5631e457a1c9656b726bcf0cd7f09976af3041d1", "filename": "libsanitizer/ubsan/ubsan_handlers.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/511c8687a8754142bb4434acfa7a2b0278d8f3d7/libsanitizer%2Fubsan%2Fubsan_handlers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/511c8687a8754142bb4434acfa7a2b0278d8f3d7/libsanitizer%2Fubsan%2Fubsan_handlers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2Fubsan_handlers.cc?ref=511c8687a8754142bb4434acfa7a2b0278d8f3d7", "patch": "@@ -558,6 +558,21 @@ static void HandleCFIBadType(CFICheckFailData *Data, ValueHandle Vtable,\n #endif\n }  // namespace __ubsan\n \n+void __ubsan::__ubsan_handle_cfi_bad_icall(CFIBadIcallData *CallData,\n+                                           ValueHandle Function) {\n+  GET_REPORT_OPTIONS(false);\n+  CFICheckFailData Data = {CFITCK_ICall, CallData->Loc, CallData->Type};\n+  handleCFIBadIcall(&Data, Function, Opts);\n+}\n+\n+void __ubsan::__ubsan_handle_cfi_bad_icall_abort(CFIBadIcallData *CallData,\n+                                                 ValueHandle Function) {\n+  GET_REPORT_OPTIONS(true);\n+  CFICheckFailData Data = {CFITCK_ICall, CallData->Loc, CallData->Type};\n+  handleCFIBadIcall(&Data, Function, Opts);\n+  Die();\n+}\n+\n void __ubsan::__ubsan_handle_cfi_check_fail(CFICheckFailData *Data,\n                                             ValueHandle Value,\n                                             uptr ValidVtable) {"}, {"sha": "394c9eac29879e570b0daa9771aaee54ab531676", "filename": "libsanitizer/ubsan/ubsan_handlers.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/511c8687a8754142bb4434acfa7a2b0278d8f3d7/libsanitizer%2Fubsan%2Fubsan_handlers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/511c8687a8754142bb4434acfa7a2b0278d8f3d7/libsanitizer%2Fubsan%2Fubsan_handlers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2Fubsan_handlers.h?ref=511c8687a8754142bb4434acfa7a2b0278d8f3d7", "patch": "@@ -156,12 +156,20 @@ enum CFITypeCheckKind : unsigned char {\n   CFITCK_ICall,\n };\n \n+struct CFIBadIcallData {\n+  SourceLocation Loc;\n+  const TypeDescriptor &Type;\n+};\n+\n struct CFICheckFailData {\n   CFITypeCheckKind CheckKind;\n   SourceLocation Loc;\n   const TypeDescriptor &Type;\n };\n \n+/// \\brief Handle control flow integrity failure for indirect function calls.\n+RECOVERABLE(cfi_bad_icall, CFIBadIcallData *Data, ValueHandle Function)\n+\n /// \\brief Handle control flow integrity failures.\n RECOVERABLE(cfi_check_fail, CFICheckFailData *Data, ValueHandle Function,\n             uptr VtableIsValid)"}, {"sha": "007a1d6d0c2f63c93cb7313b166532dac9a36375", "filename": "libsanitizer/ubsan/ubsan_handlers_cxx.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/511c8687a8754142bb4434acfa7a2b0278d8f3d7/libsanitizer%2Fubsan%2Fubsan_handlers_cxx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/511c8687a8754142bb4434acfa7a2b0278d8f3d7/libsanitizer%2Fubsan%2Fubsan_handlers_cxx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2Fubsan_handlers_cxx.cc?ref=511c8687a8754142bb4434acfa7a2b0278d8f3d7", "patch": "@@ -142,4 +142,22 @@ void HandleCFIBadType(CFICheckFailData *Data, ValueHandle Vtable,\n }\n }  // namespace __ubsan\n \n+void __ubsan::__ubsan_handle_cfi_bad_type(CFIBadTypeData *TypeData,\n+                                          ValueHandle Vtable) {\n+  GET_REPORT_OPTIONS(false);\n+  CFITypeCheckKind TypeCheckKind\n+    = static_cast<CFITypeCheckKind> (TypeData->TypeCheckKind);\n+  CFICheckFailData Data = {TypeCheckKind, TypeData->Loc, TypeData->Type};\n+  HandleCFIBadType(&Data, Vtable, false, Opts);\n+}\n+\n+void __ubsan::__ubsan_handle_cfi_bad_type_abort(CFIBadTypeData *TypeData,\n+                                                ValueHandle Vtable) {\n+  GET_REPORT_OPTIONS(true);\n+  CFITypeCheckKind TypeCheckKind\n+    = static_cast<CFITypeCheckKind> (TypeData->TypeCheckKind);\n+  CFICheckFailData Data = {TypeCheckKind, TypeData->Loc, TypeData->Type};\n+  HandleCFIBadType(&Data, Vtable, false, Opts);\n+}\n+\n #endif // CAN_SANITIZE_UB"}, {"sha": "6ace2b3472b209974e454806a59f6a7f3481c9c4", "filename": "libsanitizer/ubsan/ubsan_handlers_cxx.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/511c8687a8754142bb4434acfa7a2b0278d8f3d7/libsanitizer%2Fubsan%2Fubsan_handlers_cxx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/511c8687a8754142bb4434acfa7a2b0278d8f3d7/libsanitizer%2Fubsan%2Fubsan_handlers_cxx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2Fubsan_handlers_cxx.h?ref=511c8687a8754142bb4434acfa7a2b0278d8f3d7", "patch": "@@ -23,6 +23,12 @@ struct DynamicTypeCacheMissData {\n   unsigned char TypeCheckKind;\n };\n \n+struct CFIBadTypeData {\n+  SourceLocation Loc;\n+  const TypeDescriptor &Type;\n+  unsigned char TypeCheckKind;\n+};\n+\n /// \\brief Handle a runtime type check failure, caused by an incorrect vptr.\n /// When this handler is called, all we know is that the type was not in the\n /// cache; this does not necessarily imply the existence of a bug.\n@@ -32,6 +38,13 @@ void __ubsan_handle_dynamic_type_cache_miss(\n extern \"C\" SANITIZER_INTERFACE_ATTRIBUTE\n void __ubsan_handle_dynamic_type_cache_miss_abort(\n   DynamicTypeCacheMissData *Data, ValueHandle Pointer, ValueHandle Hash);\n+\n+/// \\brief Handle a control flow integrity check failure by printing a\n+/// diagnostic.\n+extern \"C\" SANITIZER_INTERFACE_ATTRIBUTE void\n+__ubsan_handle_cfi_bad_type(CFIBadTypeData *Data, ValueHandle Vtable);\n+extern \"C\" SANITIZER_INTERFACE_ATTRIBUTE void\n+__ubsan_handle_cfi_bad_type_abort(CFIBadTypeData *Data, ValueHandle Vtable);\n }\n \n #endif // UBSAN_HANDLERS_H"}]}