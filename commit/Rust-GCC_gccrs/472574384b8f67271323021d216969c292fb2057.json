{"sha": "472574384b8f67271323021d216969c292fb2057", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDcyNTc0Mzg0YjhmNjcyNzEzMjMwMjFkMjE2OTY5YzI5MmZiMjA1Nw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-11-30T14:45:15Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-11-30T14:45:15Z"}, "message": "[multiple changes]\n\n2009-11-30  Pascal Obry  <obry@adacore.com>\n\n\t* expect.c: Fix cast to avoid warnings in x86-64 Windows.\n\n2009-11-30  Thomas Quinot  <quinot@adacore.com>\n\n\t* gnat_rm.texi, s-sechas.adb, s-sechas.ads, s-shshco.adb,\n\ts-shshco.ads, g-md5.adb, g-md5.ads, g-sha256.ads, s-shsh64.adb,\n\ts-shsh64.ads, s-sehamd.adb, s-sehamd.ads, g-sha512.ads, g-sha1.adb,\n\tg-sha1.ads, Makefile.rtl, g-sha224.ads, g-sha384.ads, s-shsh32.adb,\n\ts-shsh32.ads, s-sehash.adb, s-sehash.ads: Reimplementation of GNAT.MD5\n\tand GNAT.SHA1 to factor shared code and avoid unnecessary stack copies.\n\tAlso introduce new functions SHA-{224,256,384,512}\n\nFrom-SVN: r154812", "tree": {"sha": "e7a407d411fe6cebd3380036f323670e2daea090", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7a407d411fe6cebd3380036f323670e2daea090"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/472574384b8f67271323021d216969c292fb2057", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/472574384b8f67271323021d216969c292fb2057", "html_url": "https://github.com/Rust-GCC/gccrs/commit/472574384b8f67271323021d216969c292fb2057", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/472574384b8f67271323021d216969c292fb2057/comments", "author": null, "committer": null, "parents": [{"sha": "0f79311b1012d84125088eaf252d6b8824b3bb81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f79311b1012d84125088eaf252d6b8824b3bb81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f79311b1012d84125088eaf252d6b8824b3bb81"}], "stats": {"total": 3159, "additions": 2084, "deletions": 1075}, "files": [{"sha": "149391c7cfe872f06847602dc977c3d4f517f29b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=472574384b8f67271323021d216969c292fb2057", "patch": "@@ -1,3 +1,17 @@\n+2009-11-30  Pascal Obry  <obry@adacore.com>\n+\n+\t* expect.c: Fix cast to avoid warnings in x86-64 Windows.\n+\n+2009-11-30  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* gnat_rm.texi, s-sechas.adb, s-sechas.ads, s-shshco.adb,\n+\ts-shshco.ads, g-md5.adb, g-md5.ads, g-sha256.ads, s-shsh64.adb,\n+\ts-shsh64.ads, s-sehamd.adb, s-sehamd.ads, g-sha512.ads, g-sha1.adb,\n+\tg-sha1.ads, Makefile.rtl, g-sha224.ads, g-sha384.ads, s-shsh32.adb,\n+\ts-shsh32.ads, s-sehash.adb, s-sehash.ads: Reimplementation of GNAT.MD5\n+\tand GNAT.SHA1 to factor shared code and avoid unnecessary stack copies.\n+\tAlso introduce new functions SHA-{224,256,384,512}\n+\n 2009-11-30  Jerome Lambourg  <lambourg@adacore.com>\n \n \t* exp_ch3.adb (Make_Predefined_Primitive_Specs): Improve comment for"}, {"sha": "5b095292d435cfb8eb3e3f44e6c687e29ab72b2b", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=472574384b8f67271323021d216969c292fb2057", "patch": "@@ -80,9 +80,9 @@ GNATRTL_TASKING_OBJS= \\\n GNATRTL_NONTASKING_OBJS= \\\n   a-assert$(objext) \\\n   a-calari$(objext) \\\n+  a-calcon$(objext) \\\n   a-caldel$(objext) \\\n   a-calend$(objext) \\\n-  a-calcon$(objext) \\\n   a-calfor$(objext) \\\n   a-catizo$(objext) \\\n   a-cdlili$(objext) \\\n@@ -146,12 +146,12 @@ GNATRTL_NONTASKING_OBJS= \\\n   a-izteio$(objext) \\\n   a-lcteio$(objext) \\\n   a-lfteio$(objext) \\\n-  a-llctio$(objext) \\\n   a-lfwtio$(objext) \\\n   a-lfztio$(objext) \\\n   a-liteio$(objext) \\\n   a-liwtio$(objext) \\\n   a-liztio$(objext) \\\n+  a-llctio$(objext) \\\n   a-llftio$(objext) \\\n   a-llfwti$(objext) \\\n   a-llfzti$(objext) \\\n@@ -239,9 +239,9 @@ GNATRTL_NONTASKING_OBJS= \\\n   a-szuzha$(objext) \\\n   a-szuzti$(objext) \\\n   a-tags$(objext) \\\n-  a-tgdico$(objext) \\\n   a-teioed$(objext) \\\n   a-textio$(objext) \\\n+  a-tgdico$(objext) \\\n   a-tiboio$(objext) \\\n   a-ticoau$(objext) \\\n   a-ticoio$(objext) \\\n@@ -337,18 +337,18 @@ GNATRTL_NONTASKING_OBJS= \\\n   g-crc32$(objext) \\\n   g-ctrl_c$(objext) \\\n   g-curexc$(objext) \\\n-  g-debuti$(objext) \\\n   g-debpoo$(objext) \\\n+  g-debuti$(objext) \\\n   g-decstr$(objext) \\\n   g-deutst$(objext) \\\n   g-diopit$(objext) \\\n   g-dirope$(objext) \\\n-  g-dyntab$(objext) \\\n   g-dynhta$(objext) \\\n+  g-dyntab$(objext) \\\n   g-encstr$(objext) \\\n   g-enutst$(objext) \\\n-  g-except$(objext) \\\n   g-excact$(objext) \\\n+  g-except$(objext) \\\n   g-exctra$(objext) \\\n   g-expect$(objext) \\\n   g-flocon$(objext) \\\n@@ -370,9 +370,13 @@ GNATRTL_NONTASKING_OBJS= \\\n   g-sercom$(objext) \\\n   g-sestin$(objext) \\\n   g-sha1$(objext) \\\n+  g-sha224$(objext) \\\n+  g-sha256$(objext) \\\n+  g-sha384$(objext) \\\n+  g-sha512$(objext) \\\n   g-souinf$(objext) \\\n-  g-speche$(objext) \\\n   g-spchge$(objext) \\\n+  g-speche$(objext) \\\n   g-spipat$(objext) \\\n   g-spitbo$(objext) \\\n   g-sptabo$(objext) \\\n@@ -384,8 +388,8 @@ GNATRTL_NONTASKING_OBJS= \\\n   g-tasloc$(objext) \\\n   g-timsta$(objext) \\\n   g-traceb$(objext) \\\n-  g-utf_32$(objext) \\\n   g-u3spch$(objext) \\\n+  g-utf_32$(objext) \\\n   g-wispch$(objext) \\\n   g-wistsp$(objext) \\\n   g-zspche$(objext) \\\n@@ -430,13 +434,13 @@ GNATRTL_NONTASKING_OBJS= \\\n   s-conca7$(objext) \\\n   s-conca8$(objext) \\\n   s-conca9$(objext) \\\n+  s-crc32$(objext)  \\\n   s-crtl$(objext)   \\\n   s-crtrun$(objext) \\\n-  s-crc32$(objext)  \\\n   s-direio$(objext) \\\n   s-dsaser$(objext) \\\n-  s-exctab$(objext) \\\n   s-except$(objext) \\\n+  s-exctab$(objext) \\\n   s-exnint$(objext) \\\n   s-exnllf$(objext) \\\n   s-exnlli$(objext) \\\n@@ -453,14 +457,15 @@ GNATRTL_NONTASKING_OBJS= \\\n   s-ficobl$(objext) \\\n   s-fileio$(objext) \\\n   s-filofl$(objext) \\\n-  s-fishfl$(objext) \\\n   s-finimp$(objext) \\\n   s-finroo$(objext) \\\n+  s-fishfl$(objext) \\\n   s-fore$(objext)   \\\n   s-fvadfl$(objext) \\\n   s-fvaffl$(objext) \\\n   s-fvagfl$(objext) \\\n   s-geveop$(objext) \\\n+  s-gloloc$(objext) \\\n   s-htable$(objext) \\\n   s-imenne$(objext) \\\n   s-imgbiu$(objext) \\\n@@ -479,10 +484,11 @@ GNATRTL_NONTASKING_OBJS= \\\n   s-imgwch$(objext) \\\n   s-imgwiu$(objext) \\\n   s-io$(objext)     \\\n-  s-gloloc$(objext) \\\n   s-maccod$(objext) \\\n   s-mantis$(objext) \\\n   s-mastop$(objext) \\\n+  s-memcop$(objext) \\\n+  s-memory$(objext) \\\n   s-os_lib$(objext) \\\n   s-osprim$(objext) \\\n   s-pack03$(objext) \\\n@@ -556,22 +562,26 @@ GNATRTL_NONTASKING_OBJS= \\\n   s-rident$(objext) \\\n   s-rpc$(objext)    \\\n   s-scaval$(objext) \\\n+  s-sechas$(objext) \\\n   s-secsta$(objext) \\\n+  s-sehamd$(objext) \\\n+  s-sehash$(objext) \\\n   s-sequio$(objext) \\\n   s-shasto$(objext) \\\n+  s-shsh32$(objext) \\\n+  s-shsh64$(objext) \\\n+  s-shshco$(objext) \\\n+  s-soflin$(objext) \\\n   s-stache$(objext) \\\n+  s-stalib$(objext) \\\n   s-stausa$(objext) \\\n   s-stchop$(objext) \\\n-  s-stalib$(objext) \\\n   s-stoele$(objext) \\\n   s-stopoo$(objext) \\\n   s-stratt$(objext) \\\n   s-strhas$(objext) \\\n-  s-ststop$(objext) \\\n-  s-soflin$(objext) \\\n-  s-memory$(objext) \\\n-  s-memcop$(objext) \\\n   s-string$(objext) \\\n+  s-ststop$(objext) \\\n   s-tasloc$(objext) \\\n   s-traceb$(objext) \\\n   s-traces$(objext) \\"}, {"sha": "4f0f73fd15b39d03b7583b367c935771a4d53642", "filename": "gcc/ada/expect.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fexpect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fexpect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpect.c?ref=472574384b8f67271323021d216969c292fb2057", "patch": "@@ -143,8 +143,8 @@ __gnat_pipe (int *fd)\n   HANDLE read, write;\n \n   CreatePipe (&read, &write, NULL, 0);\n-  fd[0]=_open_osfhandle ((long)read, 0);\n-  fd[1]=_open_osfhandle ((long)write, 0);\n+  fd[0]=_open_osfhandle ((intptr_t)read, 0);\n+  fd[1]=_open_osfhandle ((intptr_t)write, 0);\n   return 0;  /* always success */\n }\n "}, {"sha": "40c5af37ab7fa9fe7cad09fb607a6aaccb467997", "filename": "gcc/ada/g-md5.adb", "status": "modified", "additions": 9, "deletions": 526, "changes": 535, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fg-md5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fg-md5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-md5.adb?ref=472574384b8f67271323021d216969c292fb2057", "patch": "@@ -1,12 +1,12 @@\n ------------------------------------------------------------------------------\n --                                                                          --\n---                         GNAT LIBRARY COMPONENTS                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n --                                                                          --\n --                             G N A T . M D 5                              --\n --                                                                          --\n---                                B o d y                                   --\n+--                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2008, AdaCore                     --\n+--           Copyright (C) 2009, Free Software Foundation, Inc.             --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -16,8 +16,8 @@\n -- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n -- for  more details.  You should have  received  a copy of the GNU General --\n -- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n--- Boston, MA 02110-1301, USA.                                              --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n --                                                                          --\n -- As a special exception,  if other files  instantiate  generics from this --\n -- unit, or you link  this unit with other files  to produce an executable, --\n@@ -31,525 +31,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Ada.Unchecked_Conversion;\n+--  This package does not require a body, since it is a package renaming. We\n+--  provide a dummy file containing a No_Body pragma so that previous versions\n+--  of the body (which did exist) will not interfere.\n \n-package body GNAT.MD5 is\n-\n-   use Interfaces;\n-\n-   Padding : constant String :=\n-     (1 => Character'Val (16#80#), 2 .. 64 => ASCII.NUL);\n-\n-   Hex_Digit : constant array (Unsigned_32 range 0 .. 15) of Character :=\n-     ('0', '1', '2', '3', '4', '5', '6', '7',\n-      '8', '9', 'a', 'b', 'c', 'd', 'e', 'f');\n-   --  Look-up table for each hex digit of the Message-Digest.\n-   --  Used by function Digest (Context).\n-\n-   --  The sixteen values used to rotate the context words.\n-   --  Four for each rounds. Used in procedure Transform.\n-\n-   --  Round 1\n-\n-   S11 : constant := 7;\n-   S12 : constant := 12;\n-   S13 : constant := 17;\n-   S14 : constant := 22;\n-\n-   --  Round 2\n-\n-   S21 : constant := 5;\n-   S22 : constant := 9;\n-   S23 : constant := 14;\n-   S24 : constant := 20;\n-\n-   --  Round 3\n-\n-   S31 : constant := 4;\n-   S32 : constant := 11;\n-   S33 : constant := 16;\n-   S34 : constant := 23;\n-\n-   --  Round 4\n-\n-   S41 : constant := 6;\n-   S42 : constant := 10;\n-   S43 : constant := 15;\n-   S44 : constant := 21;\n-\n-   type Sixteen_Words is array (Natural range 0 .. 15)\n-     of Interfaces.Unsigned_32;\n-   --  Sixteen 32-bit words, converted from block of 64 characters.\n-   --  Used in procedure Decode and Transform.\n-\n-   procedure Decode\n-     (Block : String;\n-      X     : out Sixteen_Words);\n-   --  Convert a String of 64 characters into 16 32-bit numbers\n-\n-   --  The following functions (F, FF, G, GG, H, HH, I and II) are the\n-   --  equivalent of the macros of the same name in the example\n-   --  C implementation in the annex of RFC 1321.\n-\n-   function F (X, Y, Z : Unsigned_32) return Unsigned_32;\n-   pragma Inline (F);\n-\n-   procedure FF\n-     (A       : in out Unsigned_32;\n-      B, C, D : Unsigned_32;\n-      X       : Unsigned_32;\n-      AC      : Unsigned_32;\n-      S       : Positive);\n-   pragma Inline (FF);\n-\n-   function G (X, Y, Z : Unsigned_32) return Unsigned_32;\n-   pragma Inline (G);\n-\n-   procedure GG\n-     (A       : in out Unsigned_32;\n-      B, C, D : Unsigned_32;\n-      X       : Unsigned_32;\n-      AC      : Unsigned_32;\n-      S       : Positive);\n-   pragma Inline (GG);\n-\n-   function H (X, Y, Z : Unsigned_32) return Unsigned_32;\n-   pragma Inline (H);\n-\n-   procedure HH\n-     (A       : in out Unsigned_32;\n-      B, C, D : Unsigned_32;\n-      X       : Unsigned_32;\n-      AC      : Unsigned_32;\n-      S       : Positive);\n-   pragma Inline (HH);\n-\n-   function I (X, Y, Z : Unsigned_32) return Unsigned_32;\n-   pragma Inline (I);\n-\n-   procedure II\n-     (A       : in out Unsigned_32;\n-      B, C, D : Unsigned_32;\n-      X       : Unsigned_32;\n-      AC      : Unsigned_32;\n-      S       : Positive);\n-   pragma Inline (II);\n-\n-   procedure Transform\n-     (C     : in out Context;\n-      Block : String);\n-   --  Process one block of 64 characters\n-\n-   ------------\n-   -- Decode --\n-   ------------\n-\n-   procedure Decode\n-     (Block : String;\n-      X     : out Sixteen_Words)\n-   is\n-      Cur : Positive := Block'First;\n-\n-   begin\n-      pragma Assert (Block'Length = 64);\n-\n-      for Index in X'Range loop\n-         X (Index) :=\n-           Unsigned_32 (Character'Pos (Block (Cur))) +\n-           Shift_Left (Unsigned_32 (Character'Pos (Block (Cur + 1))), 8) +\n-           Shift_Left (Unsigned_32 (Character'Pos (Block (Cur + 2))), 16) +\n-           Shift_Left (Unsigned_32 (Character'Pos (Block (Cur + 3))), 24);\n-         Cur := Cur + 4;\n-      end loop;\n-   end Decode;\n-\n-   ------------\n-   -- Digest --\n-   ------------\n-\n-   function Digest (C : Context) return Message_Digest is\n-      Result : Message_Digest;\n-\n-      Cur : Natural := 1;\n-      --  Index in Result where the next character will be placed\n-\n-      Last_Block : String (1 .. 64);\n-\n-      C1 : Context := C;\n-\n-      procedure Convert (X : Unsigned_32);\n-      --  Put the contribution of one of the four words (A, B, C, D) of the\n-      --  Context in Result. Increments Cur.\n-\n-      -------------\n-      -- Convert --\n-      -------------\n-\n-      procedure Convert (X : Unsigned_32) is\n-         Y : Unsigned_32 := X;\n-      begin\n-         for J in 1 .. 4 loop\n-            Result (Cur + 1) := Hex_Digit (Y and Unsigned_32'(16#0F#));\n-            Y := Shift_Right (Y, 4);\n-            Result (Cur) := Hex_Digit (Y and Unsigned_32'(16#0F#));\n-            Y := Shift_Right (Y, 4);\n-            Cur := Cur + 2;\n-         end loop;\n-      end Convert;\n-\n-   --  Start of processing for Digest\n-\n-   begin\n-      --  Process characters in the context buffer, if any\n-\n-      Last_Block (1 .. C.Last) := C.Buffer (1 .. C.Last);\n-\n-      --  Too many magic literals below, should be defined as constants ???\n-\n-      if C.Last > 55 then\n-         Last_Block (C.Last + 1 .. 64) := Padding (1 .. 64 - C.Last);\n-         Transform (C1, Last_Block);\n-         Last_Block := (others => ASCII.NUL);\n-\n-      else\n-         Last_Block (C.Last + 1 .. 56) := Padding (1 .. 56 - C.Last);\n-      end if;\n-\n-      --  Add the input length (as stored in the context) as 8 characters\n-\n-      Last_Block (57 .. 64) := (others => ASCII.NUL);\n-\n-      declare\n-         L : Unsigned_64 := Unsigned_64 (C.Length) * 8;\n-         Idx : Positive := 57;\n-\n-      begin\n-         while L > 0 loop\n-            Last_Block (Idx) := Character'Val (L and 16#Ff#);\n-            L := Shift_Right (L, 8);\n-            Idx := Idx + 1;\n-         end loop;\n-      end;\n-\n-      Transform (C1, Last_Block);\n-\n-      Convert (C1.A);\n-      Convert (C1.B);\n-      Convert (C1.C);\n-      Convert (C1.D);\n-      return Result;\n-   end Digest;\n-\n-   function Digest (S : String) return Message_Digest is\n-      C : Context;\n-   begin\n-      Update (C, S);\n-      return Digest (C);\n-   end Digest;\n-\n-   function Digest\n-     (A : Ada.Streams.Stream_Element_Array) return Message_Digest\n-   is\n-      C : Context;\n-   begin\n-      Update (C, A);\n-      return Digest (C);\n-   end Digest;\n-\n-   -------\n-   -- F --\n-   -------\n-\n-   function F (X, Y, Z : Unsigned_32) return Unsigned_32 is\n-   begin\n-      return (X and Y) or ((not X) and Z);\n-   end F;\n-\n-   --------\n-   -- FF --\n-   --------\n-\n-   procedure FF\n-     (A       : in out Unsigned_32;\n-      B, C, D : Unsigned_32;\n-      X       : Unsigned_32;\n-      AC      : Unsigned_32;\n-      S       : Positive)\n-   is\n-   begin\n-      A := A + F (B, C, D) + X + AC;\n-      A := Rotate_Left (A, S);\n-      A := A + B;\n-   end FF;\n-\n-   -------\n-   -- G --\n-   -------\n-\n-   function G (X, Y, Z : Unsigned_32) return Unsigned_32 is\n-   begin\n-      return (X and Z) or (Y and (not Z));\n-   end G;\n-\n-   --------\n-   -- GG --\n-   --------\n-\n-   procedure GG\n-     (A       : in out Unsigned_32;\n-      B, C, D : Unsigned_32;\n-      X       : Unsigned_32;\n-      AC      : Unsigned_32;\n-      S       : Positive)\n-   is\n-   begin\n-      A := A + G (B, C, D) + X + AC;\n-      A := Rotate_Left (A, S);\n-      A := A + B;\n-   end GG;\n-\n-   -------\n-   -- H --\n-   -------\n-\n-   function H (X, Y, Z : Unsigned_32) return Unsigned_32 is\n-   begin\n-      return X xor Y xor Z;\n-   end H;\n-\n-   --------\n-   -- HH --\n-   --------\n-\n-   procedure HH\n-     (A       : in out Unsigned_32;\n-      B, C, D : Unsigned_32;\n-      X       : Unsigned_32;\n-      AC      : Unsigned_32;\n-      S       : Positive)\n-   is\n-   begin\n-      A := A + H (B, C, D) + X + AC;\n-      A := Rotate_Left (A, S);\n-      A := A + B;\n-   end HH;\n-\n-   -------\n-   -- I --\n-   -------\n-\n-   function I (X, Y, Z : Unsigned_32) return Unsigned_32 is\n-   begin\n-      return Y xor (X or (not Z));\n-   end I;\n-\n-   --------\n-   -- II --\n-   --------\n-\n-   procedure II\n-     (A       : in out Unsigned_32;\n-      B, C, D : Unsigned_32;\n-      X       : Unsigned_32;\n-      AC      : Unsigned_32;\n-      S       : Positive)\n-   is\n-   begin\n-      A := A + I (B, C, D) + X + AC;\n-      A := Rotate_Left (A, S);\n-      A := A + B;\n-   end II;\n-\n-   ---------------\n-   -- Transform --\n-   ---------------\n-\n-   procedure Transform\n-     (C     : in out Context;\n-      Block : String)\n-   is\n-      X : Sixteen_Words;\n-\n-      AA : Unsigned_32 := C.A;\n-      BB : Unsigned_32 := C.B;\n-      CC : Unsigned_32 := C.C;\n-      DD : Unsigned_32 := C.D;\n-\n-   begin\n-      pragma Assert (Block'Length = 64);\n-\n-      Decode (Block, X);\n-\n-      --  Round 1\n-\n-      FF (AA, BB, CC, DD, X (00), 16#D76aa478#, S11); --  1\n-      FF (DD, AA, BB, CC, X (01), 16#E8c7b756#, S12); --  2\n-      FF (CC, DD, AA, BB, X (02), 16#242070db#, S13); --  3\n-      FF (BB, CC, DD, AA, X (03), 16#C1bdceee#, S14); --  4\n-\n-      FF (AA, BB, CC, DD, X (04), 16#f57c0faf#, S11); --  5\n-      FF (DD, AA, BB, CC, X (05), 16#4787c62a#, S12); --  6\n-      FF (CC, DD, AA, BB, X (06), 16#a8304613#, S13); --  7\n-      FF (BB, CC, DD, AA, X (07), 16#fd469501#, S14); --  8\n-\n-      FF (AA, BB, CC, DD, X (08), 16#698098d8#, S11); --  9\n-      FF (DD, AA, BB, CC, X (09), 16#8b44f7af#, S12); --  10\n-      FF (CC, DD, AA, BB, X (10), 16#ffff5bb1#, S13); --  11\n-      FF (BB, CC, DD, AA, X (11), 16#895cd7be#, S14); --  12\n-\n-      FF (AA, BB, CC, DD, X (12), 16#6b901122#, S11); --  13\n-      FF (DD, AA, BB, CC, X (13), 16#fd987193#, S12); --  14\n-      FF (CC, DD, AA, BB, X (14), 16#a679438e#, S13); --  15\n-      FF (BB, CC, DD, AA, X (15), 16#49b40821#, S14); --  16\n-\n-      --  Round 2\n-\n-      GG (AA, BB, CC, DD, X (01), 16#f61e2562#, S21); --  17\n-      GG (DD, AA, BB, CC, X (06), 16#c040b340#, S22); --  18\n-      GG (CC, DD, AA, BB, X (11), 16#265e5a51#, S23); --  19\n-      GG (BB, CC, DD, AA, X (00), 16#e9b6c7aa#, S24); --  20\n-\n-      GG (AA, BB, CC, DD, X (05), 16#d62f105d#, S21); --  21\n-      GG (DD, AA, BB, CC, X (10), 16#02441453#, S22); --  22\n-      GG (CC, DD, AA, BB, X (15), 16#d8a1e681#, S23); --  23\n-      GG (BB, CC, DD, AA, X (04), 16#e7d3fbc8#, S24); --  24\n-\n-      GG (AA, BB, CC, DD, X (09), 16#21e1cde6#, S21); --  25\n-      GG (DD, AA, BB, CC, X (14), 16#c33707d6#, S22); --  26\n-      GG (CC, DD, AA, BB, X (03), 16#f4d50d87#, S23); --  27\n-      GG (BB, CC, DD, AA, X (08), 16#455a14ed#, S24); --  28\n-\n-      GG (AA, BB, CC, DD, X (13), 16#a9e3e905#, S21); --  29\n-      GG (DD, AA, BB, CC, X (02), 16#fcefa3f8#, S22); --  30\n-      GG (CC, DD, AA, BB, X (07), 16#676f02d9#, S23); --  31\n-      GG (BB, CC, DD, AA, X (12), 16#8d2a4c8a#, S24); --  32\n-\n-      --  Round 3\n-\n-      HH (AA, BB, CC, DD, X (05), 16#fffa3942#, S31); --  33\n-      HH (DD, AA, BB, CC, X (08), 16#8771f681#, S32); --  34\n-      HH (CC, DD, AA, BB, X (11), 16#6d9d6122#, S33); --  35\n-      HH (BB, CC, DD, AA, X (14), 16#fde5380c#, S34); --  36\n-\n-      HH (AA, BB, CC, DD, X (01), 16#a4beea44#, S31); --  37\n-      HH (DD, AA, BB, CC, X (04), 16#4bdecfa9#, S32); --  38\n-      HH (CC, DD, AA, BB, X (07), 16#f6bb4b60#, S33); --  39\n-      HH (BB, CC, DD, AA, X (10), 16#bebfbc70#, S34); --  40\n-\n-      HH (AA, BB, CC, DD, X (13), 16#289b7ec6#, S31); --  41\n-      HH (DD, AA, BB, CC, X (00), 16#eaa127fa#, S32); --  42\n-      HH (CC, DD, AA, BB, X (03), 16#d4ef3085#, S33); --  43\n-      HH (BB, CC, DD, AA, X (06), 16#04881d05#, S34); --  44\n-\n-      HH (AA, BB, CC, DD, X (09), 16#d9d4d039#, S31); --  45\n-      HH (DD, AA, BB, CC, X (12), 16#e6db99e5#, S32); --  46\n-      HH (CC, DD, AA, BB, X (15), 16#1fa27cf8#, S33); --  47\n-      HH (BB, CC, DD, AA, X (02), 16#c4ac5665#, S34); --  48\n-\n-      --  Round 4\n-\n-      II (AA, BB, CC, DD, X (00), 16#f4292244#, S41); --  49\n-      II (DD, AA, BB, CC, X (07), 16#432aff97#, S42); --  50\n-      II (CC, DD, AA, BB, X (14), 16#ab9423a7#, S43); --  51\n-      II (BB, CC, DD, AA, X (05), 16#fc93a039#, S44); --  52\n-\n-      II (AA, BB, CC, DD, X (12), 16#655b59c3#, S41); --  53\n-      II (DD, AA, BB, CC, X (03), 16#8f0ccc92#, S42); --  54\n-      II (CC, DD, AA, BB, X (10), 16#ffeff47d#, S43); --  55\n-      II (BB, CC, DD, AA, X (01), 16#85845dd1#, S44); --  56\n-\n-      II (AA, BB, CC, DD, X (08), 16#6fa87e4f#, S41); --  57\n-      II (DD, AA, BB, CC, X (15), 16#fe2ce6e0#, S42); --  58\n-      II (CC, DD, AA, BB, X (06), 16#a3014314#, S43); --  59\n-      II (BB, CC, DD, AA, X (13), 16#4e0811a1#, S44); --  60\n-\n-      II (AA, BB, CC, DD, X (04), 16#f7537e82#, S41); --  61\n-      II (DD, AA, BB, CC, X (11), 16#bd3af235#, S42); --  62\n-      II (CC, DD, AA, BB, X (02), 16#2ad7d2bb#, S43); --  63\n-      II (BB, CC, DD, AA, X (09), 16#eb86d391#, S44); --  64\n-\n-      C.A := C.A + AA;\n-      C.B := C.B + BB;\n-      C.C := C.C + CC;\n-      C.D := C.D + DD;\n-\n-   end Transform;\n-\n-   ------------\n-   -- Update --\n-   ------------\n-\n-   procedure Update\n-     (C     : in out Context;\n-      Input : String)\n-   is\n-      Inp : constant String := C.Buffer (1 .. C.Last) & Input;\n-      Cur        : Positive := Inp'First;\n-\n-   begin\n-      C.Length := C.Length + Input'Length;\n-\n-      while Cur + 63 <= Inp'Last loop\n-         Transform (C, Inp (Cur .. Cur + 63));\n-         Cur := Cur + 64;\n-      end loop;\n-\n-      C.Last := Inp'Last - Cur + 1;\n-      C.Buffer (1 .. C.Last) := Inp (Cur .. Inp'Last);\n-   end Update;\n-\n-   procedure Update\n-     (C     : in out Context;\n-      Input : Ada.Streams.Stream_Element_Array)\n-   is\n-      subtype Stream_Array is Ada.Streams.Stream_Element_Array (Input'Range);\n-      subtype Stream_String is\n-        String (1 + Integer (Input'First) .. 1 + Integer (Input'Last));\n-\n-      function To_String is new Ada.Unchecked_Conversion\n-        (Stream_Array, Stream_String);\n-\n-      String_Input : constant String := To_String (Input);\n-   begin\n-      Update (C, String_Input);\n-   end Update;\n-\n-   -----------------\n-   -- Wide_Digest --\n-   -----------------\n-\n-   function Wide_Digest (W : Wide_String) return Message_Digest is\n-      C : Context;\n-   begin\n-      Wide_Update (C, W);\n-      return Digest (C);\n-   end Wide_Digest;\n-\n-   -----------------\n-   -- Wide_Update --\n-   -----------------\n-\n-   procedure Wide_Update\n-     (C     : in out Context;\n-      Input : Wide_String)\n-   is\n-      String_Input : String (1 .. 2 * Input'Length);\n-      Cur          : Positive := 1;\n-\n-   begin\n-      for Index in Input'Range loop\n-         String_Input (Cur) :=\n-           Character'Val\n-            (Unsigned_32 (Wide_Character'Pos (Input (Index))) and 16#FF#);\n-         Cur := Cur + 1;\n-         String_Input (Cur) :=\n-           Character'Val\n-           (Shift_Right (Unsigned_32 (Wide_Character'Pos (Input (Index))), 8)\n-            and 16#FF#);\n-         Cur := Cur + 1;\n-      end loop;\n-\n-      Update (C, String_Input);\n-   end Wide_Update;\n-\n-end GNAT.MD5;\n+pragma No_Body;"}, {"sha": "ac0985c278d5ef28413aa71e8bf5805478d801e8", "filename": "gcc/ada/g-md5.ads", "status": "modified", "additions": 13, "deletions": 82, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fg-md5.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fg-md5.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-md5.ads?ref=472574384b8f67271323021d216969c292fb2057", "patch": "@@ -1,12 +1,12 @@\n ------------------------------------------------------------------------------\n --                                                                          --\n---                         GNAT LIBRARY COMPONENTS                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n --                                                                          --\n --                             G N A T . M D 5                              --\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2008, AdaCore                     --\n+--           Copyright (C) 2009, Free Software Foundation, Inc.             --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -16,8 +16,8 @@\n -- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n -- for  more details.  You should have  received  a copy of the GNU General --\n -- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n--- Boston, MA 02110-1301, USA.                                              --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n --                                                                          --\n -- As a special exception,  if other files  instantiate  generics from this --\n -- unit, or you link  this unit with other files  to produce an executable, --\n@@ -31,81 +31,12 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package implements the MD5 Message-Digest Algorithm as described in\n---  RFC 1321. The complete text of RFC 1321 can be found at:\n---\n---          http://www.ietf.org/rfc/rfc1321.txt\n---\n---  The implementation is derived from the RSA Data Security, Inc. MD5\n---  Message-Digest Algorithm, as described in RFC 1321.\n-\n-with Ada.Streams;\n-with Interfaces;\n-\n-package GNAT.MD5 is\n-\n-   type Context is private;\n-   --  This type is the four-word (16 byte) MD buffer, as described in\n-   --  RFC 1321 (3.3). Its initial value is Initial_Context below.\n-\n-   Initial_Context : constant Context;\n-   --  Initial value of a Context object. May be used to reinitialize\n-   --  a Context value by simple assignment of this value to the object.\n-\n-   procedure Update\n-     (C     : in out Context;\n-      Input : String);\n-   procedure Wide_Update\n-     (C     : in out Context;\n-      Input : Wide_String);\n-   procedure Update\n-     (C     : in out Context;\n-      Input : Ada.Streams.Stream_Element_Array);\n-   --  Modify the Context C. If C has the initial value Initial_Context,\n-   --  then, after a call to one of these procedures, Digest (C) will return\n-   --  the Message-Digest of Input.\n-   --\n-   --  These procedures may be called successively with the same context and\n-   --  different inputs, and these several successive calls will produce\n-   --  the same final context as a call with the concatenation of the inputs.\n-\n-   subtype Message_Digest is String (1 .. 32);\n-   --  The string type returned by function Digest\n-\n-   function Digest (C : Context) return Message_Digest;\n-   --  Extracts the Message-Digest from a context. This function should be\n-   --  used after one or several calls to Update.\n-\n-   function Digest      (S : String)      return Message_Digest;\n-   function Wide_Digest (W : Wide_String) return Message_Digest;\n-   function Digest\n-     (A    : Ada.Streams.Stream_Element_Array)\n-      return Message_Digest;\n-   --  These functions are equivalent to the corresponding Update (or\n-   --  Wide_Update) on a default initialized Context, followed by Digest\n-   --  on the resulting Context.\n-\n-private\n-\n-   --  Magic numbers\n-\n-   Initial_A : constant := 16#67452301#;\n-   Initial_B : constant := 16#EFCDAB89#;\n-   Initial_C : constant := 16#98BADCFE#;\n-   Initial_D : constant := 16#10325476#;\n-\n-   type Context is record\n-      A : Interfaces.Unsigned_32 := Initial_A;\n-      B : Interfaces.Unsigned_32 := Initial_B;\n-      C : Interfaces.Unsigned_32 := Initial_C;\n-      D : Interfaces.Unsigned_32 := Initial_D;\n-      Buffer : String (1 .. 64)  := (others => ASCII.NUL);\n-      Last   : Natural := 0;\n-      Length : Natural := 0;\n-   end record;\n-\n-   Initial_Context : constant Context :=\n-     (A => Initial_A, B => Initial_B, C => Initial_C, D => Initial_D,\n-      Buffer => (others => ASCII.NUL), Last => 0, Length => 0);\n-\n-end GNAT.MD5;\n+with System.Secure_Hashes.MD5;\n+package GNAT.MD5 is new System.Secure_Hashes.H\n+  (Block_Words    => System.Secure_Hashes.MD5.Block_Words,\n+   State_Words    => 4,\n+   Hash_Words     => 4,\n+   Hash_Bit_Order => System.Low_Order_First,\n+   Hash_State     => System.Secure_Hashes.MD5.Hash_State,\n+   Initial_State  => System.Secure_Hashes.MD5.Initial_State,\n+   Transform      => System.Secure_Hashes.MD5.Transform);"}, {"sha": "912539347869b72e5fca144a0029949f34df0555", "filename": "gcc/ada/g-sha1.adb", "status": "modified", "additions": 17, "deletions": 360, "changes": 377, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fg-sha1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fg-sha1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sha1.adb?ref=472574384b8f67271323021d216969c292fb2057", "patch": "@@ -1,379 +1,36 @@\n ------------------------------------------------------------------------------\n --                                                                          --\n---                         GNAT LIBRARY COMPONENTS                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n --                                                                          --\n --                           G N A T . S H A 1                              --\n --                                                                          --\n---                                B o d y                                   --\n+--                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2006, AdaCore                     --\n+--           Copyright (C) 2009, Free Software Foundation, Inc.             --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n -- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n -- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n--- Boston, MA 02110-1301, USA.                                              --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n --                                                                          --\n--- As a special exception,  if other files  instantiate  generics from this --\n--- unit, or you link  this unit with other files  to produce an executable, --\n--- this  unit  does not  by itself cause  the resulting  executable  to  be --\n--- covered  by the  GNU  General  Public  License.  This exception does not --\n--- however invalidate  any other reasons why  the executable file  might be --\n--- covered by the  GNU Public License.                                      --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n --                                                                          --\n -- GNAT was originally developed  by the GNAT team at  New York University. --\n -- Extensive contributions were provided by Ada Core Technologies Inc.      --\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  Note: the code for this unit is derived from GNAT.MD5\n-\n-with Ada.Unchecked_Conversion;\n-\n-package body GNAT.SHA1 is\n-\n-   use Interfaces;\n-\n-   Padding : constant String :=\n-     (1 => Character'Val (16#80#), 2 .. 64 => ASCII.NUL);\n-\n-   Hex_Digit : constant array (Unsigned_32 range 0 .. 15) of Character :=\n-     ('0', '1', '2', '3', '4', '5', '6', '7',\n-      '8', '9', 'a', 'b', 'c', 'd', 'e', 'f');\n-   --  Look-up table for each hex digit of the Message-Digest.\n-   --  Used by function Digest (Context).\n-\n-   type Sixteen_Words is array (Natural range 0 .. 15)\n-     of Interfaces.Unsigned_32;\n-   --  Sixteen 32-bit words, converted from block of 64 characters.\n-   --  Used in procedure Decode and Transform.\n-\n-   procedure Decode (Block : String; X : out Sixteen_Words);\n-   --  Convert a String of 64 characters into 16 32-bit numbers\n-\n-   --  The following functions are the four elementary components of each\n-   --  of the four round groups (0 .. 19, 20 .. 39, 40 .. 59, and 60 .. 79)\n-   --  defined in RFC 3174.\n-\n-   function F0 (B, C, D : Unsigned_32) return Unsigned_32;\n-   pragma Inline (F0);\n-\n-   function F1 (B, C, D : Unsigned_32) return Unsigned_32;\n-   pragma Inline (F1);\n-\n-   function F2 (B, C, D : Unsigned_32) return Unsigned_32;\n-   pragma Inline (F2);\n-\n-   function F3 (B, C, D : Unsigned_32) return Unsigned_32;\n-   pragma Inline (F3);\n-\n-   procedure Transform (Ctx : in out Context; Block : String);\n-   --  Process one block of 64 characters\n-\n-   ------------\n-   -- Decode --\n-   ------------\n-\n-   procedure Decode (Block : String; X : out Sixteen_Words) is\n-      Cur : Positive := Block'First;\n-\n-   begin\n-      pragma Assert (Block'Length = 64);\n-\n-      for Index in X'Range loop\n-         X (Index) :=\n-           Unsigned_32 (Character'Pos (Block (Cur + 3))) +\n-           Shift_Left (Unsigned_32 (Character'Pos (Block (Cur + 2))), 8) +\n-           Shift_Left (Unsigned_32 (Character'Pos (Block (Cur + 1))), 16) +\n-           Shift_Left (Unsigned_32 (Character'Pos (Block (Cur))), 24);\n-         Cur := Cur + 4;\n-      end loop;\n-   end Decode;\n-\n-   ------------\n-   -- Digest --\n-   ------------\n-\n-   function Digest (C : Context) return Message_Digest is\n-      Result : Message_Digest;\n-\n-      Cur : Natural := 1;\n-      --  Index in Result where the next character will be placed\n-\n-      Last_Block : String (1 .. 64);\n-\n-      C1 : Context := C;\n-\n-      procedure Convert (X : Unsigned_32);\n-      --  Put the contribution of one of the five H words of the Context in\n-      --  Result. Increments Cur.\n-\n-      -------------\n-      -- Convert --\n-      -------------\n-\n-      procedure Convert (X : Unsigned_32) is\n-         Y : Unsigned_32 := X;\n-      begin\n-         for J in 1 .. 8 loop\n-            Y := Rotate_Left (Y, 4);\n-            Result (Cur) := Hex_Digit (Y and Unsigned_32'(16#0F#));\n-            Cur := Cur + 1;\n-         end loop;\n-      end Convert;\n-\n-   --  Start of processing for Digest\n-\n-   begin\n-      --  Process characters in the context buffer, if any\n-\n-      pragma Assert (C.Last /= C.Buffer'Last);\n-      Last_Block (1 .. C.Last) := C.Buffer (1 .. C.Last);\n-\n-      if C.Last > 55 then\n-         Last_Block (C.Last + 1 .. 64) := Padding (1 .. 64 - C.Last);\n-         Transform (C1, Last_Block);\n-         Last_Block := (others => ASCII.NUL);\n-\n-      else\n-         Last_Block (C.Last + 1 .. 56) := Padding (1 .. 56 - C.Last);\n-      end if;\n-\n-      --  Add the input length (as stored in the context) as 8 characters\n-\n-      Last_Block (57 .. 64) := (others => ASCII.NUL);\n-\n-      declare\n-         L   : Unsigned_64 := Unsigned_64 (C.Length) * 8;\n-         Idx : Positive := 64;\n-      begin\n-         while L > 0 loop\n-            Last_Block (Idx) := Character'Val (L and 16#Ff#);\n-            L := Shift_Right (L, 8);\n-            Idx := Idx - 1;\n-         end loop;\n-      end;\n-\n-      Transform (C1, Last_Block);\n-\n-      Convert (C1.H (0));\n-      Convert (C1.H (1));\n-      Convert (C1.H (2));\n-      Convert (C1.H (3));\n-      Convert (C1.H (4));\n-      return Result;\n-   end Digest;\n-\n-   function Digest (S : String) return Message_Digest is\n-      C : Context;\n-   begin\n-      Update (C, S);\n-      return Digest (C);\n-   end Digest;\n-\n-   function Digest\n-     (A : Ada.Streams.Stream_Element_Array) return Message_Digest\n-   is\n-      C : Context;\n-   begin\n-      Update (C, A);\n-      return Digest (C);\n-   end Digest;\n-\n-   --------\n-   -- F0 --\n-   --------\n-\n-   function F0\n-     (B, C, D : Interfaces.Unsigned_32) return Interfaces.Unsigned_32\n-   is\n-   begin\n-      return (B and C) or ((not B) and D);\n-   end F0;\n-\n-   --------\n-   -- F1 --\n-   --------\n-\n-   function F1\n-     (B, C, D : Interfaces.Unsigned_32) return Interfaces.Unsigned_32\n-   is\n-   begin\n-      return B xor C xor D;\n-   end F1;\n-\n-   --------\n-   -- F2 --\n-   --------\n-\n-   function F2\n-     (B, C, D : Interfaces.Unsigned_32) return Interfaces.Unsigned_32\n-   is\n-   begin\n-      return (B and C) or (B and D) or (C and D);\n-   end F2;\n-\n-   --------\n-   -- F3 --\n-   --------\n-\n-   function F3\n-     (B, C, D : Interfaces.Unsigned_32) return Interfaces.Unsigned_32\n-     renames F1;\n-\n-   ---------------\n-   -- Transform --\n-   ---------------\n-\n-   procedure Transform\n-     (Ctx   : in out Context;\n-      Block : String)\n-   is\n-      W : array (0 .. 79) of Interfaces.Unsigned_32;\n-\n-      A, B, C, D, E, Temp : Interfaces.Unsigned_32;\n-\n-   begin\n-      pragma Assert (Block'Length = 64);\n-\n-      --  a. Divide data block into sixteen words\n-\n-      Decode (Block, Sixteen_Words (W (0 .. 15)));\n-\n-      --  b. Prepare working block of 80 words\n-\n-      for T in 16 .. 79 loop\n-\n-         --  W(t) = S^1(W(t-3) XOR W(t-8) XOR W(t-14) XOR W(t-16))\n-\n-         W (T) := Rotate_Left\n-           (W (T - 3) xor W (T - 8) xor W (T - 14) xor W (T - 16), 1);\n-\n-      end loop;\n-\n-      --  c. Set up transformation variables\n-\n-      A := Ctx.H (0);\n-      B := Ctx.H (1);\n-      C := Ctx.H (2);\n-      D := Ctx.H (3);\n-      E := Ctx.H (4);\n-\n-      --  d. For each of the 80 rounds, compute:\n-\n-      --  TEMP = S^5(A) + f(t;B,C,D) + E + W(t) + K(t);\n-      --  E = D;  D = C;  C = S^30(B);  B = A; A = TEMP;\n-\n-      for T in 0 .. 19 loop\n-         Temp := Rotate_Left (A, 5) + F0 (B, C, D) + E + W (T) + 16#5A827999#;\n-         E := D; D := C; C := Rotate_Left (B, 30); B := A; A := Temp;\n-      end loop;\n-\n-      for T in 20 .. 39 loop\n-         Temp := Rotate_Left (A, 5) + F1 (B, C, D) + E + W (T) + 16#6ED9EBA1#;\n-         E := D; D := C; C := Rotate_Left (B, 30); B := A; A := Temp;\n-      end loop;\n-\n-      for T in 40 .. 59 loop\n-         Temp := Rotate_Left (A, 5) + F2 (B, C, D) + E + W (T) + 16#8F1BBCDC#;\n-         E := D; D := C; C := Rotate_Left (B, 30); B := A; A := Temp;\n-      end loop;\n-\n-      for T in 60 .. 79 loop\n-         Temp := Rotate_Left (A, 5) + F3 (B, C, D) + E + W (T) + 16#CA62C1D6#;\n-         E := D; D := C; C := Rotate_Left (B, 30); B := A; A := Temp;\n-      end loop;\n-\n-      --  e. Update context:\n-      --  H0 = H0 + A, H1 = H1 + B, H2 = H2 + C, H3 = H3 + D, H4 = H4 + E\n-\n-      Ctx.H (0) := Ctx.H (0) + A;\n-      Ctx.H (1) := Ctx.H (1) + B;\n-      Ctx.H (2) := Ctx.H (2) + C;\n-      Ctx.H (3) := Ctx.H (3) + D;\n-      Ctx.H (4) := Ctx.H (4) + E;\n-   end Transform;\n-\n-   ------------\n-   -- Update --\n-   ------------\n-\n-   procedure Update\n-     (C     : in out Context;\n-      Input : String)\n-   is\n-      Inp : constant String := C.Buffer (1 .. C.Last) & Input;\n-      Cur : Positive := Inp'First;\n-\n-   begin\n-      C.Length := C.Length + Input'Length;\n-\n-      while Cur + 63 <= Inp'Last loop\n-         Transform (C, Inp (Cur .. Cur + 63));\n-         Cur := Cur + 64;\n-      end loop;\n-\n-      C.Last := Inp'Last - Cur + 1;\n-      C.Buffer (1 .. C.Last) := Inp (Cur .. Inp'Last);\n-   end Update;\n-\n-   procedure Update\n-     (C     : in out Context;\n-      Input : Ada.Streams.Stream_Element_Array)\n-   is\n-      subtype Stream_Array is Ada.Streams.Stream_Element_Array (Input'Range);\n-      subtype Stream_String is\n-        String (1 + Integer (Input'First) .. 1 + Integer (Input'Last));\n-\n-      function To_String is new Ada.Unchecked_Conversion\n-        (Stream_Array, Stream_String);\n-\n-      String_Input : constant String := To_String (Input);\n-   begin\n-      Update (C, String_Input);\n-   end Update;\n-\n-   -----------------\n-   -- Wide_Digest --\n-   -----------------\n-\n-   function Wide_Digest (W : Wide_String) return Message_Digest is\n-      C : Context;\n-   begin\n-      Wide_Update (C, W);\n-      return Digest (C);\n-   end Wide_Digest;\n-\n-   -----------------\n-   -- Wide_Update --\n-   -----------------\n-\n-   procedure Wide_Update\n-     (C     : in out Context;\n-      Input : Wide_String)\n-   is\n-      String_Input : String (1 .. 2 * Input'Length);\n-      Cur          : Positive := 1;\n-\n-   begin\n-      for Index in Input'Range loop\n-         String_Input (Cur) :=\n-           Character'Val\n-            (Unsigned_32 (Wide_Character'Pos (Input (Index))) and 16#FF#);\n-         Cur := Cur + 1;\n-         String_Input (Cur) :=\n-           Character'Val\n-           (Shift_Right (Unsigned_32 (Wide_Character'Pos (Input (Index))), 8)\n-            and 16#FF#);\n-         Cur := Cur + 1;\n-      end loop;\n-\n-      Update (C, String_Input);\n-   end Wide_Update;\n+--  This package does not require a body, since it is a package renaming. We\n+--  provide a dummy file containing a No_Body pragma so that previous versions\n+--  of the body (which did exist) will not interfere.\n \n-end GNAT.SHA1;\n+pragma No_Body;"}, {"sha": "912510bdd774e281ff56b1e4b6fc3e031adae32c", "filename": "gcc/ada/g-sha1.ads", "status": "modified", "additions": 13, "deletions": 87, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fg-sha1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fg-sha1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sha1.ads?ref=472574384b8f67271323021d216969c292fb2057", "patch": "@@ -1,12 +1,12 @@\n ------------------------------------------------------------------------------\n --                                                                          --\n---                         GNAT LIBRARY COMPONENTS                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n --                                                                          --\n --                            G N A T . S H A 1                             --\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2006, AdaCore                     --\n+--           Copyright (C) 2009, Free Software Foundation, Inc.             --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -16,8 +16,8 @@\n -- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n -- for  more details.  You should have  received  a copy of the GNU General --\n -- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n--- Boston, MA 02110-1301, USA.                                              --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n --                                                                          --\n -- As a special exception,  if other files  instantiate  generics from this --\n -- unit, or you link  this unit with other files  to produce an executable, --\n@@ -31,86 +31,12 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package implements the US Secure Hash Algorithm 1 (SHA1) as described\n---  in RFC 3174. The complete text of RFC 3174 can be found at:\n-\n---          http://www.ietf.org/rfc/rfc3174.txt\n-\n---  Note: the code for this unit is derived from GNAT.MD5\n-\n-with Ada.Streams;\n-with Interfaces;\n-\n-package GNAT.SHA1 is\n-\n-   type Context is private;\n-   --  This type holds the five-word (20 byte) buffer H, as described in\n-   --  RFC 3174 (6.1). Its initial value is Initial_Context below.\n-\n-   Initial_Context : constant Context;\n-   --  Initial value of a Context object. May be used to reinitialize\n-   --  a Context value by simple assignment of this value to the object.\n-\n-   procedure Update\n-     (C     : in out Context;\n-      Input : String);\n-   procedure Wide_Update\n-     (C     : in out Context;\n-      Input : Wide_String);\n-   procedure Update\n-     (C     : in out Context;\n-      Input : Ada.Streams.Stream_Element_Array);\n-   --  Modify the Context C. If C has the initial value Initial_Context,\n-   --  then, after a call to one of these procedures, Digest (C) will return\n-   --  the Message-Digest of Input.\n-   --\n-   --  These procedures may be called successively with the same context and\n-   --  different inputs, and these several successive calls will produce\n-   --  the same final context as a call with the concatenation of the inputs.\n-\n-   subtype Message_Digest is String (1 .. 40);\n-   --  The string type returned by function Digest\n-\n-   function Digest (C : Context) return Message_Digest;\n-   --  Extracts the Message-Digest from a context. This function should be\n-   --  used after one or several calls to Update.\n-\n-   function Digest      (S : String)      return Message_Digest;\n-   function Wide_Digest (W : Wide_String) return Message_Digest;\n-   function Digest\n-     (A : Ada.Streams.Stream_Element_Array) return Message_Digest;\n-   --  These functions are equivalent to the corresponding Update (or\n-   --  Wide_Update) on a default initialized Context, followed by Digest\n-   --  on the resulting Context.\n-\n-private\n-\n-   --  Magic numbers\n-\n-   Initial_H0 : constant := 16#67452301#;\n-   Initial_H1 : constant := 16#EFCDAB89#;\n-   Initial_H2 : constant := 16#98BADCFE#;\n-   Initial_H3 : constant := 16#10325476#;\n-   Initial_H4 : constant := 16#C3D2E1F0#;\n-\n-   type H_Type is array (0 .. 4) of Interfaces.Unsigned_32;\n-\n-   Initial_H : constant H_Type :=\n-                (0 => Initial_H0,\n-                 1 => Initial_H1,\n-                 2 => Initial_H2,\n-                 3 => Initial_H3,\n-                 4 => Initial_H4);\n-\n-   type Context is record\n-      H      : H_Type := Initial_H;\n-      Buffer : String (1 .. 64)  := (others => ASCII.NUL);\n-      Last   : Natural := 0;\n-      Length : Natural := 0;\n-   end record;\n-\n-   Initial_Context : constant Context :=\n-     (H => Initial_H,\n-      Buffer => (others => ASCII.NUL), Last => 0, Length => 0);\n-\n-end GNAT.SHA1;\n+with System.Secure_Hashes.SHA1;\n+package GNAT.SHA1 is new System.Secure_Hashes.H\n+  (Block_Words    => System.Secure_Hashes.SHA1.Block_Words,\n+   State_Words    => 5,\n+   Hash_Words     => 5,\n+   Hash_Bit_Order => System.High_Order_First,\n+   Hash_State     => System.Secure_Hashes.SHA1.Hash_State,\n+   Initial_State  => System.Secure_Hashes.SHA1.Initial_State,\n+   Transform      => System.Secure_Hashes.SHA1.Transform);"}, {"sha": "1a6391d62293f0780f22464870b888bd3b8fe668", "filename": "gcc/ada/g-sha224.ads", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fg-sha224.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fg-sha224.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sha224.ads?ref=472574384b8f67271323021d216969c292fb2057", "patch": "@@ -0,0 +1,41 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                          G N A T . S H A 2 2 4                           --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--           Copyright (C) 2009, Free Software Foundation, Inc.             --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Secure_Hashes.SHA2_Common;\n+with System.Secure_Hashes.SHA2_32;\n+package GNAT.SHA224 is new System.Secure_Hashes.H\n+  (Block_Words    => System.Secure_Hashes.SHA2_Common.Block_Words,\n+   State_Words    => 8,\n+   Hash_Words     => 7,\n+   Hash_Bit_Order => System.High_Order_First,\n+   Hash_State     => System.Secure_Hashes.SHA2_32.Hash_State,\n+   Initial_State  => System.Secure_Hashes.SHA2_32.SHA224_Init_State,\n+   Transform      => System.Secure_Hashes.SHA2_32.Transform);"}, {"sha": "6f3de58986cd5633be5b1500d85e914380748dc0", "filename": "gcc/ada/g-sha256.ads", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fg-sha256.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fg-sha256.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sha256.ads?ref=472574384b8f67271323021d216969c292fb2057", "patch": "@@ -0,0 +1,41 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                          G N A T . S H A 2 5 6                           --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--           Copyright (C) 2009, Free Software Foundation, Inc.             --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Secure_Hashes.SHA2_Common;\n+with System.Secure_Hashes.SHA2_32;\n+package GNAT.SHA256 is new System.Secure_Hashes.H\n+  (Block_Words    => System.Secure_Hashes.SHA2_Common.Block_Words,\n+   State_Words    => 8,\n+   Hash_Words     => 8,\n+   Hash_Bit_Order => System.High_Order_First,\n+   Hash_State     => System.Secure_Hashes.SHA2_32.Hash_State,\n+   Initial_State  => System.Secure_Hashes.SHA2_32.SHA256_Init_State,\n+   Transform      => System.Secure_Hashes.SHA2_32.Transform);"}, {"sha": "5fcd180e57029c4e752aff271df6abbbbe8ec374", "filename": "gcc/ada/g-sha384.ads", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fg-sha384.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fg-sha384.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sha384.ads?ref=472574384b8f67271323021d216969c292fb2057", "patch": "@@ -0,0 +1,41 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                          G N A T . S H A 3 8 4                           --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--           Copyright (C) 2009, Free Software Foundation, Inc.             --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Secure_Hashes.SHA2_Common;\n+with System.Secure_Hashes.SHA2_64;\n+package GNAT.SHA384 is new System.Secure_Hashes.H\n+  (Block_Words    => System.Secure_Hashes.SHA2_Common.Block_Words,\n+   State_Words    => 8,\n+   Hash_Words     => 6,\n+   Hash_Bit_Order => System.High_Order_First,\n+   Hash_State     => System.Secure_Hashes.SHA2_64.Hash_State,\n+   Initial_State  => System.Secure_Hashes.SHA2_64.SHA384_Init_State,\n+   Transform      => System.Secure_Hashes.SHA2_64.Transform);"}, {"sha": "7b39512c41c2148156d2d493c21b557d0f614758", "filename": "gcc/ada/g-sha512.ads", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fg-sha512.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fg-sha512.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sha512.ads?ref=472574384b8f67271323021d216969c292fb2057", "patch": "@@ -0,0 +1,41 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                          G N A T . S H A 5 1 2                           --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--           Copyright (C) 2009, Free Software Foundation, Inc.             --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Secure_Hashes.SHA2_Common;\n+with System.Secure_Hashes.SHA2_64;\n+package GNAT.SHA512 is new System.Secure_Hashes.H\n+  (Block_Words    => System.Secure_Hashes.SHA2_Common.Block_Words,\n+   State_Words    => 8,\n+   Hash_Words     => 8,\n+   Hash_Bit_Order => System.High_Order_First,\n+   Hash_State     => System.Secure_Hashes.SHA2_64.Hash_State,\n+   Initial_State  => System.Secure_Hashes.SHA2_64.SHA512_Init_State,\n+   Transform      => System.Secure_Hashes.SHA2_64.Transform);"}, {"sha": "46823f9ebaddc4e7c365aef08324323b8ffeb01c", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=472574384b8f67271323021d216969c292fb2057", "patch": "@@ -377,6 +377,10 @@ The GNAT Library\n * GNAT.Semaphores (g-semaph.ads)::\n * GNAT.Serial_Communications (g-sercom.ads)::\n * GNAT.SHA1 (g-sha1.ads)::\n+* GNAT.SHA224 (g-sha224.ads)::\n+* GNAT.SHA256 (g-sha256.ads)::\n+* GNAT.SHA384 (g-sha384.ads)::\n+* GNAT.SHA512 (g-sha512.ads)::\n * GNAT.Signals (g-signal.ads)::\n * GNAT.Sockets (g-socket.ads)::\n * GNAT.Source_Info (g-souinf.ads)::\n@@ -13554,6 +13558,10 @@ of GNAT, and will generate a warning message.\n * GNAT.Semaphores (g-semaph.ads)::\n * GNAT.Serial_Communications (g-sercom.ads)::\n * GNAT.SHA1 (g-sha1.ads)::\n+* GNAT.SHA224 (g-sha224.ads)::\n+* GNAT.SHA256 (g-sha256.ads)::\n+* GNAT.SHA384 (g-sha384.ads)::\n+* GNAT.SHA512 (g-sha512.ads)::\n * GNAT.Signals (g-signal.ads)::\n * GNAT.Sockets (g-socket.ads)::\n * GNAT.Source_Info (g-souinf.ads)::\n@@ -14551,7 +14559,40 @@ port. This is only supported on GNU/Linux and Windows.\n @cindex Secure Hash Algorithm SHA-1\n \n @noindent\n-Implements the SHA-1 Secure Hash Algorithm as described in RFC 3174.\n+Implements the SHA-1 Secure Hash Algorithm as described in FIPS PUB 180-3\n+and RFC 3174.\n+\n+@node GNAT.SHA224 (g-sha224.ads)\n+@section @code{GNAT.SHA224} (@file{g-sha224.ads})\n+@cindex @code{GNAT.SHA224} (@file{g-sha224.ads})\n+@cindex Secure Hash Algorithm SHA-224\n+\n+@noindent\n+Implements the SHA-224 Secure Hash Algorithm as described in FIPS PUB 180-3.\n+\n+@node GNAT.SHA256 (g-sha256.ads)\n+@section @code{GNAT.SHA256} (@file{g-sha256.ads})\n+@cindex @code{GNAT.SHA256} (@file{g-sha256.ads})\n+@cindex Secure Hash Algorithm SHA-256\n+\n+@noindent\n+Implements the SHA-256 Secure Hash Algorithm as described in FIPS PUB 180-3.\n+\n+@node GNAT.SHA384 (g-sha384.ads)\n+@section @code{GNAT.SHA384} (@file{g-sha384.ads})\n+@cindex @code{GNAT.SHA384} (@file{g-sha384.ads})\n+@cindex Secure Hash Algorithm SHA-384\n+\n+@noindent\n+Implements the SHA-384 Secure Hash Algorithm as described in FIPS PUB 180-3.\n+\n+@node GNAT.SHA512 (g-sha512.ads)\n+@section @code{GNAT.SHA512} (@file{g-sha512.ads})\n+@cindex @code{GNAT.SHA512} (@file{g-sha512.ads})\n+@cindex Secure Hash Algorithm SHA-512\n+\n+@noindent\n+Implements the SHA-512 Secure Hash Algorithm as described in FIPS PUB 180-3.\n \n @node GNAT.Signals (g-signal.ads)\n @section @code{GNAT.Signals} (@file{g-signal.ads})"}, {"sha": "72121eb5a7fd6dd7bded1bc7e4e4ffc8382039c8", "filename": "gcc/ada/s-sechas.adb", "status": "added", "additions": 358, "deletions": 0, "changes": 358, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fs-sechas.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fs-sechas.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-sechas.adb?ref=472574384b8f67271323021d216969c292fb2057", "patch": "@@ -0,0 +1,358 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                 S Y S T E M . S E C U R E _ H A S H E S                  --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--           Copyright (C) 2009, Free Software Foundation, Inc.             --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System;     use System;\n+with Interfaces; use Interfaces;\n+\n+package body System.Secure_Hashes is\n+\n+   use Ada.Streams;\n+\n+   Hex_Digit : constant array (Stream_Element range 0 .. 15) of Character :=\n+                 ('0', '1', '2', '3', '4', '5', '6', '7',\n+                  '8', '9', 'a', 'b', 'c', 'd', 'e', 'f');\n+\n+   type Fill_Buffer_Access is\n+     access procedure\n+       (M     : in out Message_State;\n+        S     : String;\n+        First : Natural;\n+        Last  : out Natural);\n+   --  A procedure to transfer data from S into M's block buffer until either\n+   --  the block buffer is full or all data from S has been consumed.\n+\n+   procedure Fill_Buffer_Copy\n+     (M     : in out Message_State;\n+      S     : String;\n+      First : Natural;\n+      Last  : out Natural);\n+   --  Transfer procedure which just copies data from S to M\n+\n+   procedure Fill_Buffer_Swap\n+     (M     : in out Message_State;\n+      S     : String;\n+      First : Natural;\n+      Last  : out Natural);\n+   --  Transfer procedure which swaps bytes from S when copying into M\n+\n+   procedure To_String (SEA : Stream_Element_Array; S : out String);\n+   --  Return the hexadecimal representation of SEA\n+\n+   ----------------------\n+   -- Fill_Buffer_Copy --\n+   ----------------------\n+\n+   procedure Fill_Buffer_Copy\n+     (M     : in out Message_State;\n+      S     : String;\n+      First : Natural;\n+      Last  : out Natural)\n+   is\n+      Buf_String : String (M.Buffer'Range);\n+      for Buf_String'Address use M.Buffer'Address;\n+      pragma Import (Ada, Buf_String);\n+      Length : constant Natural :=\n+                  Natural'Min (M.Block_Length - M.Last, S'Last - First + 1);\n+   begin\n+      pragma Assert (Length > 0);\n+\n+      Buf_String (M.Last + 1 .. M.Last + Length) :=\n+        S (First .. First + Length);\n+      M.Last := M.Last + Length;\n+      Last := First + Length - 1;\n+   end Fill_Buffer_Copy;\n+\n+   ----------------------\n+   -- Fill_Buffer_Swap --\n+   ----------------------\n+\n+   procedure Fill_Buffer_Swap\n+     (M     : in out Message_State;\n+      S     : String;\n+      First : Natural;\n+      Last  : out Natural)\n+   is\n+      Length : constant Natural :=\n+                  Natural'Min (M.Block_Length - M.Last, S'Last - First + 1);\n+   begin\n+      Last := First;\n+      while Last - First < Length loop\n+         M.Buffer (M.Last + 1 + Last - First) :=\n+            (if (Last - First) mod 2 = 0 then S (Last + 1) else S (Last - 1));\n+         Last := Last + 1;\n+      end loop;\n+      M.Last := M.Last + Length;\n+      Last := First + Length - 1;\n+   end Fill_Buffer_Swap;\n+\n+   ---------------\n+   -- To_String --\n+   ---------------\n+\n+   procedure To_String (SEA : Stream_Element_Array; S : out String) is\n+      pragma Assert (S'Length = 2 * SEA'Length);\n+   begin\n+      for J in SEA'Range loop\n+         declare\n+            S_J : constant Natural := 1 + Natural (J - SEA'First) * 2;\n+         begin\n+            S (S_J)     := Hex_Digit (SEA (J) / 16);\n+            S (S_J + 1) := Hex_Digit (SEA (J) mod 16);\n+         end;\n+      end loop;\n+   end To_String;\n+\n+   -------\n+   -- H --\n+   -------\n+\n+   package body H is\n+\n+      procedure Update\n+        (C           : in out Context;\n+         S           : String;\n+         Fill_Buffer : Fill_Buffer_Access);\n+      --  Internal common routine for all Update procedures\n+\n+      procedure Final\n+        (C         : Context;\n+         Hash_Bits : out Ada.Streams.Stream_Element_Array);\n+      --  Perform final hashing operations (data padding) and extract the\n+      --  (possibly truncated) state of C into Hash_Bits.\n+\n+      ------------\n+      -- Digest --\n+      ------------\n+\n+      function Digest (C : Context) return Message_Digest is\n+         Hash_Bits : Stream_Element_Array\n+                       (1 .. Stream_Element_Offset (Hash_Length));\n+      begin\n+         Final (C, Hash_Bits);\n+         return MD : Message_Digest do\n+            To_String (Hash_Bits, MD);\n+         end return;\n+      end Digest;\n+\n+      ------------\n+      -- Digest --\n+      ------------\n+\n+      function Digest (S : String) return Message_Digest is\n+         C : Context;\n+      begin\n+         Update (C, S);\n+         return Digest (C);\n+      end Digest;\n+\n+      ------------\n+      -- Digest --\n+      ------------\n+\n+      function Digest (A : Stream_Element_Array) return Message_Digest is\n+         C : Context;\n+      begin\n+         Update (C, A);\n+         return Digest (C);\n+      end Digest;\n+\n+      -----------\n+      -- Final --\n+      -----------\n+\n+      --  Once a complete message has been processed, it is padded with one\n+      --  1 bit followed by enough 0 bits so that the last block is\n+      --  2 * Word'Size bits short of being completed. The last 2 * Word'Size\n+      --  bits are set to the message size in bits (excluding padding).\n+\n+      procedure Final\n+        (C          : Context;\n+         Hash_Bits  : out Stream_Element_Array)\n+      is\n+         FC : Context := C;\n+\n+         Zeroes : Natural;\n+         --  Number of 0 bytes in padding\n+\n+         Message_Length : Unsigned_64 := FC.M_State.Length;\n+         --  Message length in bytes\n+\n+         Size_Length : constant Natural :=\n+                         2 * Hash_State.Word'Size / 8;\n+         --  Length in bytes of the size representation\n+\n+      begin\n+         Zeroes := (Block_Length - 1 - Size_Length - FC.M_State.Last)\n+                     mod FC.M_State.Block_Length;\n+         declare\n+            Pad : String (1 .. 1 + Zeroes + Size_Length) :=\n+                    (1 => Character'Val (128), others => ASCII.NUL);\n+            Index : Natural;\n+            First_Index : Natural;\n+         begin\n+            First_Index := (if Hash_Bit_Order = Low_Order_First then\n+                              Pad'Last - Size_Length + 1\n+                            else\n+                              Pad'Last);\n+\n+            Index := First_Index;\n+            while Message_Length > 0 loop\n+               if Index = First_Index then\n+                  --  Message_Length is in bytes, but we need to store it as\n+                  --  a bit count).\n+\n+                  Pad (Index) := Character'Val\n+                                   (Shift_Left (Message_Length and 16#1f#, 3));\n+                  Message_Length := Shift_Right (Message_Length, 5);\n+               else\n+                  Pad (Index) := Character'Val (Message_Length and 16#ff#);\n+                  Message_Length := Shift_Right (Message_Length, 8);\n+               end if;\n+               Index := Index +\n+                          (if Hash_Bit_Order = Low_Order_First then 1 else -1);\n+            end loop;\n+\n+            Update (FC, Pad);\n+         end;\n+\n+         pragma Assert (FC.M_State.Last = 0);\n+\n+         Hash_State.To_Hash (FC.H_State, Hash_Bits);\n+      end Final;\n+\n+      ------------\n+      -- Update --\n+      ------------\n+\n+      procedure Update\n+        (C           : in out Context;\n+         S           : String;\n+         Fill_Buffer : Fill_Buffer_Access)\n+      is\n+         Last : Natural := S'First - 1;\n+      begin\n+         C.M_State.Length := C.M_State.Length + S'Length;\n+\n+         while Last < S'Last loop\n+            Fill_Buffer (C.M_State, S, Last + 1, Last);\n+\n+            if C.M_State.Last = Block_Length then\n+               Transform (C.H_State, C.M_State);\n+               C.M_State.Last := 0;\n+            end if;\n+         end loop;\n+\n+      end Update;\n+\n+      ------------\n+      -- Update --\n+      ------------\n+\n+      procedure Update (C : in out Context; Input : String) is\n+      begin\n+         Update (C, Input, Fill_Buffer_Copy'Access);\n+      end Update;\n+\n+      ------------\n+      -- Update --\n+      ------------\n+\n+      procedure Update (C : in out Context; Input : Stream_Element_Array) is\n+         S : String (1 .. Input'Length);\n+         for S'Address use Input'Address;\n+         pragma Import (Ada, S);\n+      begin\n+         Update (C, S, Fill_Buffer_Copy'Access);\n+      end Update;\n+\n+      -----------------\n+      -- Wide_Update --\n+      -----------------\n+\n+      procedure Wide_Update (C : in out Context; Input : Wide_String) is\n+         S : String (1 .. 2 * Input'Length);\n+         for S'Address use Input'Address;\n+         pragma Import (Ada, S);\n+      begin\n+         Update\n+           (C, S,\n+            (if System.Default_Bit_Order /= Low_Order_First\n+               then Fill_Buffer_Swap'Access\n+               else Fill_Buffer_Copy'Access));\n+      end Wide_Update;\n+\n+      -----------------\n+      -- Wide_Digest --\n+      -----------------\n+\n+      function Wide_Digest (W : Wide_String) return Message_Digest is\n+         C : Context;\n+      begin\n+         Wide_Update (C, W);\n+         return Digest (C);\n+      end Wide_Digest;\n+\n+   end H;\n+\n+   -------------------------\n+   -- Hash_Function_State --\n+   -------------------------\n+\n+   package body Hash_Function_State is\n+\n+      -------------\n+      -- To_Hash --\n+      -------------\n+\n+      procedure To_Hash (H : State; H_Bits : out Stream_Element_Array) is\n+         Hash_Words : constant Natural := H'Size / Word'Size;\n+         Result : State (1 .. Hash_Words) :=\n+                    H (H'Last - Hash_Words + 1 .. H'Last);\n+\n+         R_SEA : Stream_Element_Array (1 .. Result'Size / 8);\n+         for R_SEA'Address use Result'Address;\n+         pragma Import (Ada, R_SEA);\n+      begin\n+         if System.Default_Bit_Order /= Hash_Bit_Order then\n+            for J in Result'Range loop\n+               Swap (Result (J)'Address);\n+            end loop;\n+         end if;\n+\n+         --  Return truncated hash\n+\n+         pragma Assert (H_Bits'Length <= R_SEA'Length);\n+         H_Bits := R_SEA (R_SEA'First .. R_SEA'First + H_Bits'Length - 1);\n+      end To_Hash;\n+\n+   end Hash_Function_State;\n+\n+end System.Secure_Hashes;"}, {"sha": "3d9bc7635c0b969dc86c72afb355119a1b6f31aa", "filename": "gcc/ada/s-sechas.ads", "status": "added", "additions": 178, "deletions": 0, "changes": 178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fs-sechas.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fs-sechas.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-sechas.ads?ref=472574384b8f67271323021d216969c292fb2057", "patch": "@@ -0,0 +1,178 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                 S Y S T E M . S E C U R E _ H A S H E S                  --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--           Copyright (C) 2009, Free Software Foundation, Inc.             --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides common suporting code for a family of secure\n+--  hash functions (including MD5 and the FIPS PUB 180-3 functions SHA-1,\n+--  SHA-224, SHA-256, SHA-384 and SHA-512).\n+\n+with Ada.Streams;\n+with Interfaces;\n+\n+package System.Secure_Hashes is\n+\n+   type Buffer_Type is new String;\n+   for Buffer_Type'Alignment use 8;\n+   --  Secure hash functions use a string buffer that is also accessed as an\n+   --  array of words, which may require up to 64 bit alignment.\n+\n+   --  The function-independent part of processing state:\n+   --  A buffer of data being accumulated until a complete block is ready for\n+   --  hashing.\n+\n+   type Message_State (Block_Length : Natural) is record\n+      Last   : Natural := 0;\n+      --  Index of last used element in Buffer\n+\n+      Length : Interfaces.Unsigned_64 := 0;\n+      --  Total length of processed data\n+\n+      Buffer : Buffer_Type (1 .. Block_Length);\n+      --  Data buffer\n+   end record;\n+\n+   --  The function-specific part of processing state:\n+   --  Each hash function maintains an internal state as an array of words,\n+   --  which is ultimately converted to a stream representation with the\n+   --  appropriate bit order.\n+\n+   generic\n+      type Word is mod <>;\n+      --  Either 32 or 64 bits\n+\n+      with procedure Swap (X : System.Address);\n+      --  Byte swapping function for a Word at X\n+\n+      Hash_Bit_Order : System.Bit_Order;\n+      --  Bit order of the produced hash\n+\n+   package Hash_Function_State is\n+\n+      type State is array (Natural range <>) of Word;\n+      --  Used to store a hash function's internal state\n+\n+      procedure To_Hash\n+        (H      : State;\n+         H_Bits : out Ada.Streams.Stream_Element_Array);\n+      --  Convert H to stream representation with the given bit order.\n+      --  If H_Bits is smaller than the internal hash state, then the state\n+      --  is truncated.\n+\n+   end Hash_Function_State;\n+\n+   --  Generic hashing framework:\n+   --  The user interface for each implemented secure hash function is an\n+   --  instance of this generic package.\n+\n+   generic\n+      Block_Words    : Natural;\n+      --  Number of words in each block\n+\n+      State_Words    : Natural;\n+      --  Number of words in internal state\n+\n+      Hash_Words     : Natural;\n+      --  Number of words in the final hash (must be no greater than\n+      --  State_Words).\n+\n+      Hash_Bit_Order : System.Bit_Order;\n+      --  Bit order used for conversion between bit representation and word\n+      --  representation.\n+\n+      with package Hash_State is new Hash_Function_State (<>);\n+      --  Hash function state package\n+\n+      Initial_State : Hash_State.State;\n+      --  Initial value of the hash function state\n+\n+      with procedure Transform\n+        (H : in out Hash_State.State;\n+         M : in out Message_State);\n+      --  Transformation function updating H by processing a complete data\n+      --  block from M.\n+\n+   package H is\n+\n+      pragma Assert (Hash_Words <= State_Words);\n+\n+      type Context is private;\n+      --  The internal processing state of the hashing function\n+\n+      Initial_Context : constant Context;\n+      --  Initial value of a Context object. May be used to reinitialize\n+      --  a Context value by simple assignment of this value to the object.\n+\n+      procedure Update      (C : in out Context; Input : String);\n+      procedure Wide_Update (C : in out Context; Input : Wide_String);\n+      procedure Update\n+        (C : in out Context; Input : Ada.Streams.Stream_Element_Array);\n+      --  Update C to process the given input. Successive calls to\n+      --  Update are equivalent to a single call with the concatenation\n+      --  of the inputs. For the Wide_String version, each Wide_Character is\n+      --  processed low order byte first.\n+\n+      Word_Length : constant Natural := Hash_State.Word'Size / 8;\n+      Hash_Length : constant Natural := Hash_Words * Word_Length;\n+\n+      subtype Message_Digest is String (1 .. 2 * Hash_Length);\n+      --  The fixed-length string returned by Digest, providing the\n+      --  hash in hexadecimal representation.\n+\n+      function Digest      (C  : Context)     return Message_Digest;\n+      --  Return the hash for the data accumulated with C in hexadecimal\n+      --  representation.\n+\n+      function Digest      (S : String)      return Message_Digest;\n+      function Wide_Digest (W : Wide_String) return Message_Digest;\n+      function Digest\n+        (A : Ada.Streams.Stream_Element_Array) return Message_Digest;\n+      --  These functions are equivalent to the corresponding Update (or\n+      --  Wide_Update) on a default initialized Context, followed by Digest\n+      --  on the resulting Context.\n+\n+   private\n+\n+      Block_Length : constant Natural := Block_Words * Word_Length;\n+      --  Length in bytes of a data block\n+\n+      type Context is record\n+         H_State : Hash_State.State (0 .. State_Words - 1) := Initial_State;\n+         --  Function-specific state\n+\n+         M_State : Message_State (Block_Length);\n+         --  Function-independent state (block buffer)\n+      end record;\n+\n+      Initial_Context : constant Context := (others => <>);\n+      --  Initial values are provided by default initialization of Context\n+\n+   end H;\n+\n+end System.Secure_Hashes;"}, {"sha": "30fff896364dc6b2a706fbb1153fdb7c93859b86", "filename": "gcc/ada/s-sehamd.adb", "status": "added", "additions": 340, "deletions": 0, "changes": 340, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fs-sehamd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fs-sehamd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-sehamd.adb?ref=472574384b8f67271323021d216969c292fb2057", "patch": "@@ -0,0 +1,340 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--             S Y S T E M . S E C U R E _ H A S H E S . M D 5              --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--         Copyright (C) 2002-2009, Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with GNAT.Byte_Swapping; use GNAT.Byte_Swapping;\n+\n+package body System.Secure_Hashes.MD5 is\n+\n+   use Interfaces;\n+\n+   --  The sixteen values used to rotate the context words.\n+   --  Four for each rounds. Used in procedure Transform.\n+\n+   --  Round 1\n+\n+   S11 : constant := 7;\n+   S12 : constant := 12;\n+   S13 : constant := 17;\n+   S14 : constant := 22;\n+\n+   --  Round 2\n+\n+   S21 : constant := 5;\n+   S22 : constant := 9;\n+   S23 : constant := 14;\n+   S24 : constant := 20;\n+\n+   --  Round 3\n+\n+   S31 : constant := 4;\n+   S32 : constant := 11;\n+   S33 : constant := 16;\n+   S34 : constant := 23;\n+\n+   --  Round 4\n+\n+   S41 : constant := 6;\n+   S42 : constant := 10;\n+   S43 : constant := 15;\n+   S44 : constant := 21;\n+\n+   --  The following functions (F, FF, G, GG, H, HH, I and II) are the\n+   --  equivalent of the macros of the same name in the example\n+   --  C implementation in the annex of RFC 1321.\n+\n+   function F (X, Y, Z : Unsigned_32) return Unsigned_32;\n+   pragma Inline (F);\n+\n+   procedure FF\n+     (A       : in out Unsigned_32;\n+      B, C, D : Unsigned_32;\n+      X       : Unsigned_32;\n+      AC      : Unsigned_32;\n+      S       : Positive);\n+   pragma Inline (FF);\n+\n+   function G (X, Y, Z : Unsigned_32) return Unsigned_32;\n+   pragma Inline (G);\n+\n+   procedure GG\n+     (A       : in out Unsigned_32;\n+      B, C, D : Unsigned_32;\n+      X       : Unsigned_32;\n+      AC      : Unsigned_32;\n+      S       : Positive);\n+   pragma Inline (GG);\n+\n+   function H (X, Y, Z : Unsigned_32) return Unsigned_32;\n+   pragma Inline (H);\n+\n+   procedure HH\n+     (A       : in out Unsigned_32;\n+      B, C, D : Unsigned_32;\n+      X       : Unsigned_32;\n+      AC      : Unsigned_32;\n+      S       : Positive);\n+   pragma Inline (HH);\n+\n+   function I (X, Y, Z : Unsigned_32) return Unsigned_32;\n+   pragma Inline (I);\n+\n+   procedure II\n+     (A       : in out Unsigned_32;\n+      B, C, D : Unsigned_32;\n+      X       : Unsigned_32;\n+      AC      : Unsigned_32;\n+      S       : Positive);\n+   pragma Inline (II);\n+\n+   -------\n+   -- F --\n+   -------\n+\n+   function F (X, Y, Z : Unsigned_32) return Unsigned_32 is\n+   begin\n+      return (X and Y) or ((not X) and Z);\n+   end F;\n+\n+   --------\n+   -- FF --\n+   --------\n+\n+   procedure FF\n+     (A       : in out Unsigned_32;\n+      B, C, D : Unsigned_32;\n+      X       : Unsigned_32;\n+      AC      : Unsigned_32;\n+      S       : Positive)\n+   is\n+   begin\n+      A := A + F (B, C, D) + X + AC;\n+      A := Rotate_Left (A, S);\n+      A := A + B;\n+   end FF;\n+\n+   -------\n+   -- G --\n+   -------\n+\n+   function G (X, Y, Z : Unsigned_32) return Unsigned_32 is\n+   begin\n+      return (X and Z) or (Y and (not Z));\n+   end G;\n+\n+   --------\n+   -- GG --\n+   --------\n+\n+   procedure GG\n+     (A       : in out Unsigned_32;\n+      B, C, D : Unsigned_32;\n+      X       : Unsigned_32;\n+      AC      : Unsigned_32;\n+      S       : Positive)\n+   is\n+   begin\n+      A := A + G (B, C, D) + X + AC;\n+      A := Rotate_Left (A, S);\n+      A := A + B;\n+   end GG;\n+\n+   -------\n+   -- H --\n+   -------\n+\n+   function H (X, Y, Z : Unsigned_32) return Unsigned_32 is\n+   begin\n+      return X xor Y xor Z;\n+   end H;\n+\n+   --------\n+   -- HH --\n+   --------\n+\n+   procedure HH\n+     (A       : in out Unsigned_32;\n+      B, C, D : Unsigned_32;\n+      X       : Unsigned_32;\n+      AC      : Unsigned_32;\n+      S       : Positive)\n+   is\n+   begin\n+      A := A + H (B, C, D) + X + AC;\n+      A := Rotate_Left (A, S);\n+      A := A + B;\n+   end HH;\n+\n+   -------\n+   -- I --\n+   -------\n+\n+   function I (X, Y, Z : Unsigned_32) return Unsigned_32 is\n+   begin\n+      return Y xor (X or (not Z));\n+   end I;\n+\n+   --------\n+   -- II --\n+   --------\n+\n+   procedure II\n+     (A       : in out Unsigned_32;\n+      B, C, D : Unsigned_32;\n+      X       : Unsigned_32;\n+      AC      : Unsigned_32;\n+      S       : Positive)\n+   is\n+   begin\n+      A := A + I (B, C, D) + X + AC;\n+      A := Rotate_Left (A, S);\n+      A := A + B;\n+   end II;\n+\n+   ---------------\n+   -- Transform --\n+   ---------------\n+\n+   procedure Transform\n+     (H : in out Hash_State.State;\n+      M : in out Message_State)\n+   is\n+      X : array (0 .. 15) of Interfaces.Unsigned_32;\n+      for X'Address use M.Buffer'Address;\n+      pragma Import (Ada, X);\n+\n+      AA : Unsigned_32 := H (0);\n+      BB : Unsigned_32 := H (1);\n+      CC : Unsigned_32 := H (2);\n+      DD : Unsigned_32 := H (3);\n+\n+   begin\n+      if System.Default_Bit_Order /= Low_Order_First then\n+         for J in X'Range loop\n+            Swap4 (X (J)'Address);\n+         end loop;\n+      end if;\n+\n+      --  Round 1\n+\n+      FF (AA, BB, CC, DD, X (00), 16#D76aa478#, S11); --  1\n+      FF (DD, AA, BB, CC, X (01), 16#E8c7b756#, S12); --  2\n+      FF (CC, DD, AA, BB, X (02), 16#242070db#, S13); --  3\n+      FF (BB, CC, DD, AA, X (03), 16#C1bdceee#, S14); --  4\n+\n+      FF (AA, BB, CC, DD, X (04), 16#f57c0faf#, S11); --  5\n+      FF (DD, AA, BB, CC, X (05), 16#4787c62a#, S12); --  6\n+      FF (CC, DD, AA, BB, X (06), 16#a8304613#, S13); --  7\n+      FF (BB, CC, DD, AA, X (07), 16#fd469501#, S14); --  8\n+\n+      FF (AA, BB, CC, DD, X (08), 16#698098d8#, S11); --  9\n+      FF (DD, AA, BB, CC, X (09), 16#8b44f7af#, S12); --  10\n+      FF (CC, DD, AA, BB, X (10), 16#ffff5bb1#, S13); --  11\n+      FF (BB, CC, DD, AA, X (11), 16#895cd7be#, S14); --  12\n+\n+      FF (AA, BB, CC, DD, X (12), 16#6b901122#, S11); --  13\n+      FF (DD, AA, BB, CC, X (13), 16#fd987193#, S12); --  14\n+      FF (CC, DD, AA, BB, X (14), 16#a679438e#, S13); --  15\n+      FF (BB, CC, DD, AA, X (15), 16#49b40821#, S14); --  16\n+\n+      --  Round 2\n+\n+      GG (AA, BB, CC, DD, X (01), 16#f61e2562#, S21); --  17\n+      GG (DD, AA, BB, CC, X (06), 16#c040b340#, S22); --  18\n+      GG (CC, DD, AA, BB, X (11), 16#265e5a51#, S23); --  19\n+      GG (BB, CC, DD, AA, X (00), 16#e9b6c7aa#, S24); --  20\n+\n+      GG (AA, BB, CC, DD, X (05), 16#d62f105d#, S21); --  21\n+      GG (DD, AA, BB, CC, X (10), 16#02441453#, S22); --  22\n+      GG (CC, DD, AA, BB, X (15), 16#d8a1e681#, S23); --  23\n+      GG (BB, CC, DD, AA, X (04), 16#e7d3fbc8#, S24); --  24\n+\n+      GG (AA, BB, CC, DD, X (09), 16#21e1cde6#, S21); --  25\n+      GG (DD, AA, BB, CC, X (14), 16#c33707d6#, S22); --  26\n+      GG (CC, DD, AA, BB, X (03), 16#f4d50d87#, S23); --  27\n+      GG (BB, CC, DD, AA, X (08), 16#455a14ed#, S24); --  28\n+\n+      GG (AA, BB, CC, DD, X (13), 16#a9e3e905#, S21); --  29\n+      GG (DD, AA, BB, CC, X (02), 16#fcefa3f8#, S22); --  30\n+      GG (CC, DD, AA, BB, X (07), 16#676f02d9#, S23); --  31\n+      GG (BB, CC, DD, AA, X (12), 16#8d2a4c8a#, S24); --  32\n+\n+      --  Round 3\n+\n+      HH (AA, BB, CC, DD, X (05), 16#fffa3942#, S31); --  33\n+      HH (DD, AA, BB, CC, X (08), 16#8771f681#, S32); --  34\n+      HH (CC, DD, AA, BB, X (11), 16#6d9d6122#, S33); --  35\n+      HH (BB, CC, DD, AA, X (14), 16#fde5380c#, S34); --  36\n+\n+      HH (AA, BB, CC, DD, X (01), 16#a4beea44#, S31); --  37\n+      HH (DD, AA, BB, CC, X (04), 16#4bdecfa9#, S32); --  38\n+      HH (CC, DD, AA, BB, X (07), 16#f6bb4b60#, S33); --  39\n+      HH (BB, CC, DD, AA, X (10), 16#bebfbc70#, S34); --  40\n+\n+      HH (AA, BB, CC, DD, X (13), 16#289b7ec6#, S31); --  41\n+      HH (DD, AA, BB, CC, X (00), 16#eaa127fa#, S32); --  42\n+      HH (CC, DD, AA, BB, X (03), 16#d4ef3085#, S33); --  43\n+      HH (BB, CC, DD, AA, X (06), 16#04881d05#, S34); --  44\n+\n+      HH (AA, BB, CC, DD, X (09), 16#d9d4d039#, S31); --  45\n+      HH (DD, AA, BB, CC, X (12), 16#e6db99e5#, S32); --  46\n+      HH (CC, DD, AA, BB, X (15), 16#1fa27cf8#, S33); --  47\n+      HH (BB, CC, DD, AA, X (02), 16#c4ac5665#, S34); --  48\n+\n+      --  Round 4\n+\n+      II (AA, BB, CC, DD, X (00), 16#f4292244#, S41); --  49\n+      II (DD, AA, BB, CC, X (07), 16#432aff97#, S42); --  50\n+      II (CC, DD, AA, BB, X (14), 16#ab9423a7#, S43); --  51\n+      II (BB, CC, DD, AA, X (05), 16#fc93a039#, S44); --  52\n+\n+      II (AA, BB, CC, DD, X (12), 16#655b59c3#, S41); --  53\n+      II (DD, AA, BB, CC, X (03), 16#8f0ccc92#, S42); --  54\n+      II (CC, DD, AA, BB, X (10), 16#ffeff47d#, S43); --  55\n+      II (BB, CC, DD, AA, X (01), 16#85845dd1#, S44); --  56\n+\n+      II (AA, BB, CC, DD, X (08), 16#6fa87e4f#, S41); --  57\n+      II (DD, AA, BB, CC, X (15), 16#fe2ce6e0#, S42); --  58\n+      II (CC, DD, AA, BB, X (06), 16#a3014314#, S43); --  59\n+      II (BB, CC, DD, AA, X (13), 16#4e0811a1#, S44); --  60\n+\n+      II (AA, BB, CC, DD, X (04), 16#f7537e82#, S41); --  61\n+      II (DD, AA, BB, CC, X (11), 16#bd3af235#, S42); --  62\n+      II (CC, DD, AA, BB, X (02), 16#2ad7d2bb#, S43); --  63\n+      II (BB, CC, DD, AA, X (09), 16#eb86d391#, S44); --  64\n+\n+      H (0) := H (0) + AA;\n+      H (1) := H (1) + BB;\n+      H (2) := H (2) + CC;\n+      H (3) := H (3) + DD;\n+\n+   end Transform;\n+\n+end System.Secure_Hashes.MD5;"}, {"sha": "63385d38005e60914bd589cba93ff9e4172aa42e", "filename": "gcc/ada/s-sehamd.ads", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fs-sehamd.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fs-sehamd.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-sehamd.ads?ref=472574384b8f67271323021d216969c292fb2057", "patch": "@@ -0,0 +1,71 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--             S Y S T E M . S E C U R E _ H A S H E S . M D 5              --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--         Copyright (C) 2002-2009, Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides supporting code for implementation of the MD5\n+--  Message-Digest Algorithm as described in RFC 1321. The complete text of\n+--  RFC 1321 can be found at:\n+--          http://www.ietf.org/rfc/rfc1321.txt\n+\n+with GNAT.Byte_Swapping;\n+with Interfaces;\n+\n+package System.Secure_Hashes.MD5 is\n+\n+   package Hash_State is\n+     new System.Secure_Hashes.Hash_Function_State\n+           (Word           => Interfaces.Unsigned_32,\n+            Swap           => GNAT.Byte_Swapping.Swap4,\n+            Hash_Bit_Order => System.Low_Order_First);\n+   --  MD5 operates on 32-bit little endian words\n+\n+   Block_Words  : constant := 16;\n+   --  Messages are processed in chunks of 16 words\n+\n+   procedure Transform\n+     (H : in out Hash_State.State;\n+      M : in out Message_State);\n+   --  Transformation function applied for each block\n+\n+   Initial_State : constant Hash_State.State;\n+   --  Initialization vector\n+\n+private\n+\n+   Initial_A : constant := 16#67452301#;\n+   Initial_B : constant := 16#EFCDAB89#;\n+   Initial_C : constant := 16#98BADCFE#;\n+   Initial_D : constant := 16#10325476#;\n+\n+   Initial_State : constant Hash_State.State :=\n+                     (Initial_A, Initial_B, Initial_C, Initial_D);\n+   --  Initialization vector from RFC 1321\n+\n+end System.Secure_Hashes.MD5;"}, {"sha": "8cd919a9e65e590cb4e781be43686fafb8047463", "filename": "gcc/ada/s-sehash.adb", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fs-sehash.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fs-sehash.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-sehash.adb?ref=472574384b8f67271323021d216969c292fb2057", "patch": "@@ -0,0 +1,177 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--            S Y S T E M . S E C U R E _ H A S H E S . S H A 1             --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--         Copyright (C) 2002-2009, Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package body System.Secure_Hashes.SHA1 is\n+\n+   use Interfaces;\n+   use GNAT.Byte_Swapping;\n+\n+   --  The following functions are the four elementary components of each\n+   --  of the four round groups (0 .. 19, 20 .. 39, 40 .. 59, and 60 .. 79)\n+   --  defined in RFC 3174.\n+\n+   function F0 (B, C, D : Unsigned_32) return Unsigned_32;\n+   pragma Inline (F0);\n+\n+   function F1 (B, C, D : Unsigned_32) return Unsigned_32;\n+   pragma Inline (F1);\n+\n+   function F2 (B, C, D : Unsigned_32) return Unsigned_32;\n+   pragma Inline (F2);\n+\n+   function F3 (B, C, D : Unsigned_32) return Unsigned_32;\n+   pragma Inline (F3);\n+\n+   --------\n+   -- F0 --\n+   --------\n+\n+   function F0\n+     (B, C, D : Interfaces.Unsigned_32) return Interfaces.Unsigned_32\n+   is\n+   begin\n+      return (B and C) or ((not B) and D);\n+   end F0;\n+\n+   --------\n+   -- F1 --\n+   --------\n+\n+   function F1\n+     (B, C, D : Interfaces.Unsigned_32) return Interfaces.Unsigned_32\n+   is\n+   begin\n+      return B xor C xor D;\n+   end F1;\n+\n+   --------\n+   -- F2 --\n+   --------\n+\n+   function F2\n+     (B, C, D : Interfaces.Unsigned_32) return Interfaces.Unsigned_32\n+   is\n+   begin\n+      return (B and C) or (B and D) or (C and D);\n+   end F2;\n+\n+   --------\n+   -- F3 --\n+   --------\n+\n+   function F3\n+     (B, C, D : Interfaces.Unsigned_32) return Interfaces.Unsigned_32\n+     renames F1;\n+\n+   ---------------\n+   -- Transform --\n+   ---------------\n+\n+   procedure Transform\n+     (H : in out Hash_State.State;\n+      M : in out Message_State)\n+   is\n+      type Words is array (Natural range <>) of Interfaces.Unsigned_32;\n+\n+      X : Words (0 .. 15);\n+      for X'Address use M.Buffer'Address;\n+      pragma Import (Ada, X);\n+\n+      W : Words (0 .. 79);\n+\n+      A, B, C, D, E, Temp : Interfaces.Unsigned_32;\n+\n+   begin\n+      if System.Default_Bit_Order /= High_Order_First then\n+         for J in X'Range loop\n+            Swap4 (X (J)'Address);\n+         end loop;\n+      end if;\n+\n+      --  a. Divide data block into sixteen words\n+\n+      W (0 .. 15) := X;\n+\n+      --  b. Prepare working block of 80 words\n+\n+      for T in 16 .. 79 loop\n+\n+         --  W(t) = S^1(W(t-3) XOR W(t-8) XOR W(t-14) XOR W(t-16))\n+\n+         W (T) := Rotate_Left\n+           (W (T - 3) xor W (T - 8) xor W (T - 14) xor W (T - 16), 1);\n+\n+      end loop;\n+\n+      --  c. Set up transformation variables\n+\n+      A := H (0);\n+      B := H (1);\n+      C := H (2);\n+      D := H (3);\n+      E := H (4);\n+\n+      --  d. For each of the 80 rounds, compute:\n+\n+      --  TEMP = S^5(A) + f(t;B,C,D) + E + W(t) + K(t);\n+      --  E = D;  D = C;  C = S^30(B);  B = A; A = TEMP;\n+\n+      for T in 0 .. 19 loop\n+         Temp := Rotate_Left (A, 5) + F0 (B, C, D) + E + W (T) + 16#5A827999#;\n+         E := D; D := C; C := Rotate_Left (B, 30); B := A; A := Temp;\n+      end loop;\n+\n+      for T in 20 .. 39 loop\n+         Temp := Rotate_Left (A, 5) + F1 (B, C, D) + E + W (T) + 16#6ED9EBA1#;\n+         E := D; D := C; C := Rotate_Left (B, 30); B := A; A := Temp;\n+      end loop;\n+\n+      for T in 40 .. 59 loop\n+         Temp := Rotate_Left (A, 5) + F2 (B, C, D) + E + W (T) + 16#8F1BBCDC#;\n+         E := D; D := C; C := Rotate_Left (B, 30); B := A; A := Temp;\n+      end loop;\n+\n+      for T in 60 .. 79 loop\n+         Temp := Rotate_Left (A, 5) + F3 (B, C, D) + E + W (T) + 16#CA62C1D6#;\n+         E := D; D := C; C := Rotate_Left (B, 30); B := A; A := Temp;\n+      end loop;\n+\n+      --  e. Update context:\n+      --  H0 = H0 + A, H1 = H1 + B, H2 = H2 + C, H3 = H3 + D, H4 = H4 + E\n+\n+      H (0) := H (0) + A;\n+      H (1) := H (1) + B;\n+      H (2) := H (2) + C;\n+      H (3) := H (3) + D;\n+      H (4) := H (4) + E;\n+   end Transform;\n+\n+end System.Secure_Hashes.SHA1;"}, {"sha": "63d31a8dff98900eeb8849d49388812a2141dfa0", "filename": "gcc/ada/s-sehash.ads", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fs-sehash.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fs-sehash.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-sehash.ads?ref=472574384b8f67271323021d216969c292fb2057", "patch": "@@ -0,0 +1,69 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--            S Y S T E M . S E C U R E _ H A S H E S . S H A 1             --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--         Copyright (C) 2002-2009, Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides supporting code for implementation of the SHA-1\n+--  secure hash function as decsribed in FIPS PUB 180-3. The complete text\n+--  of FIPS PUB 180-3 can be found at:\n+--    http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf\n+\n+with GNAT.Byte_Swapping;\n+with Interfaces;\n+\n+package System.Secure_Hashes.SHA1 is\n+\n+   package Hash_State is new Hash_Function_State\n+     (Word           => Interfaces.Unsigned_32,\n+      Swap           => GNAT.Byte_Swapping.Swap4,\n+      Hash_Bit_Order => System.High_Order_First);\n+   --  SHA-1 operates on 32-bit big endian words\n+\n+   Block_Words : constant := 16;\n+   --  Messages are processed in chunks of 16 words\n+\n+   procedure Transform\n+     (H : in out Hash_State.State;\n+      M : in out Message_State);\n+   --  Transformation function applied for each block\n+\n+   Initial_State : constant Hash_State.State;\n+   --  Initialization vector\n+\n+private\n+\n+   Initial_State : constant Hash_State.State :=\n+                     (0 => 16#67452301#,\n+                      1 => 16#EFCDAB89#,\n+                      2 => 16#98BADCFE#,\n+                      3 => 16#10325476#,\n+                      4 => 16#C3D2E1F0#);\n+   --  Initialization vector from FIPS PUB 180-3\n+\n+end System.Secure_Hashes.SHA1;"}, {"sha": "48baadbe867cff4455d161434991a4de1f69a589", "filename": "gcc/ada/s-shsh32.adb", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fs-shsh32.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fs-shsh32.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-shsh32.adb?ref=472574384b8f67271323021d216969c292fb2057", "patch": "@@ -0,0 +1,80 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--         S Y S T E M . S E C U R E _ H A S H E S . S H A 2 _ 3 2          --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--           Copyright (C) 2009, Free Software Foundation, Inc.             --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package body System.Secure_Hashes.SHA2_32 is\n+\n+   use Interfaces;\n+\n+   ------------\n+   -- Sigma0 --\n+   ------------\n+\n+   function Sigma0 (X : Word) return Word is\n+   begin\n+      return Rotate_Right (X, 2)\n+         xor Rotate_Right (X, 13)\n+         xor Rotate_Right (X, 22);\n+   end Sigma0;\n+\n+   ------------\n+   -- Sigma1 --\n+   ------------\n+\n+   function Sigma1 (X : Word) return Word is\n+   begin\n+      return Rotate_Right (X, 6)\n+         xor Rotate_Right (X, 11)\n+         xor Rotate_Right (X, 25);\n+   end Sigma1;\n+\n+   --------\n+   -- S0 --\n+   --------\n+\n+   function S0 (X : Word) return Word is\n+   begin\n+      return Rotate_Right (X, 7)\n+         xor Rotate_Right (X, 18)\n+         xor Shift_Right  (X, 3);\n+   end S0;\n+\n+   --------\n+   -- S1 --\n+   --------\n+\n+   function S1 (X : Word) return Word is\n+   begin\n+      return Rotate_Right (X, 17)\n+         xor Rotate_Right (X, 19)\n+         xor Shift_Right  (X, 10);\n+   end S1;\n+\n+end System.Secure_Hashes.SHA2_32;"}, {"sha": "293d06f71c437438578b906dc70aad0899690512", "filename": "gcc/ada/s-shsh32.ads", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fs-shsh32.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fs-shsh32.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-shsh32.ads?ref=472574384b8f67271323021d216969c292fb2057", "patch": "@@ -0,0 +1,105 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--         S Y S T E M . S E C U R E _ H A S H E S . S H A 2 _ 3 2          --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--           Copyright (C) 2009, Free Software Foundation, Inc.             --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This pacakge provides support for the 32-bit FIPS PUB 180-3 functions\n+--  SHA-256 and SHA-224.\n+\n+with Interfaces;\n+with GNAT.Byte_Swapping;\n+with System.Secure_Hashes.SHA2_Common;\n+\n+package System.Secure_Hashes.SHA2_32 is\n+\n+   subtype Word is Interfaces.Unsigned_32;\n+\n+   package Hash_State is new Hash_Function_State\n+     (Word           => Word,\n+      Swap           => GNAT.Byte_Swapping.Swap4,\n+      Hash_Bit_Order => System.High_Order_First);\n+   --  SHA-224 and SHA-256 operate on 32-bit big endian words\n+\n+   K : constant Hash_State.State (0 .. 63) :=\n+         (16#428a2f98#, 16#71374491#, 16#b5c0fbcf#, 16#e9b5dba5#,\n+          16#3956c25b#, 16#59f111f1#, 16#923f82a4#, 16#ab1c5ed5#,\n+          16#d807aa98#, 16#12835b01#, 16#243185be#, 16#550c7dc3#,\n+          16#72be5d74#, 16#80deb1fe#, 16#9bdc06a7#, 16#c19bf174#,\n+          16#e49b69c1#, 16#efbe4786#, 16#0fc19dc6#, 16#240ca1cc#,\n+          16#2de92c6f#, 16#4a7484aa#, 16#5cb0a9dc#, 16#76f988da#,\n+          16#983e5152#, 16#a831c66d#, 16#b00327c8#, 16#bf597fc7#,\n+          16#c6e00bf3#, 16#d5a79147#, 16#06ca6351#, 16#14292967#,\n+          16#27b70a85#, 16#2e1b2138#, 16#4d2c6dfc#, 16#53380d13#,\n+          16#650a7354#, 16#766a0abb#, 16#81c2c92e#, 16#92722c85#,\n+          16#a2bfe8a1#, 16#a81a664b#, 16#c24b8b70#, 16#c76c51a3#,\n+          16#d192e819#, 16#d6990624#, 16#f40e3585#, 16#106aa070#,\n+          16#19a4c116#, 16#1e376c08#, 16#2748774c#, 16#34b0bcb5#,\n+          16#391c0cb3#, 16#4ed8aa4a#, 16#5b9cca4f#, 16#682e6ff3#,\n+          16#748f82ee#, 16#78a5636f#, 16#84c87814#, 16#8cc70208#,\n+          16#90befffa#, 16#a4506ceb#, 16#bef9a3f7#, 16#c67178f2#);\n+   --  Constants from FIPS PUB 180-3\n+\n+   function Sigma0 (X : Word) return Word;\n+   function Sigma1 (X : Word) return Word;\n+   function S0 (X : Word) return Word;\n+   function S1 (X : Word) return Word;\n+   pragma Inline (Sigma0, Sigma1, S0, S1);\n+   --  Elementary functions Sigma^256_0, Sigma^256_1, sigma^256_0, sigma^256_1\n+   --  from FIPS PUB 180-3.\n+\n+   procedure Transform is new SHA2_Common.Transform\n+     (Hash_State => Hash_State,\n+      K          => K,\n+      Rounds     => 64,\n+      Sigma0     => Sigma0,\n+      Sigma1     => Sigma1,\n+      S0         => S0,\n+      S1         => S1);\n+\n+   SHA224_Init_State : constant Hash_State.State (0 .. 7) :=\n+                         (0 => 16#c1059ed8#,\n+                          1 => 16#367cd507#,\n+                          2 => 16#3070dd17#,\n+                          3 => 16#f70e5939#,\n+                          4 => 16#ffc00b31#,\n+                          5 => 16#68581511#,\n+                          6 => 16#64f98fa7#,\n+                          7 => 16#befa4fa4#);\n+   SHA256_Init_State : constant Hash_State.State (0 .. 7) :=\n+                         (0 => 16#6a09e667#,\n+                          1 => 16#bb67ae85#,\n+                          2 => 16#3c6ef372#,\n+                          3 => 16#a54ff53a#,\n+                          4 => 16#510e527f#,\n+                          5 => 16#9b05688c#,\n+                          6 => 16#1f83d9ab#,\n+                          7 => 16#5be0cd19#);\n+   --  Initialization vectors from FIPS PUB 180-3\n+\n+end System.Secure_Hashes.SHA2_32;"}, {"sha": "d49a6bd9b3afa01cf63b7bfe6a5e9bf73bf54d81", "filename": "gcc/ada/s-shsh64.adb", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fs-shsh64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fs-shsh64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-shsh64.adb?ref=472574384b8f67271323021d216969c292fb2057", "patch": "@@ -0,0 +1,80 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--         S Y S T E M . S E C U R E _ H A S H E S . S H A 2 _ 6 4          --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--           Copyright (C) 2009, Free Software Foundation, Inc.             --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package body System.Secure_Hashes.SHA2_64 is\n+\n+   use Interfaces;\n+\n+   ------------\n+   -- Sigma0 --\n+   ------------\n+\n+   function Sigma0 (X : Word) return Word is\n+   begin\n+      return Rotate_Right (X, 28)\n+         xor Rotate_Right (X, 34)\n+         xor Rotate_Right (X, 39);\n+   end Sigma0;\n+\n+   ------------\n+   -- Sigma1 --\n+   ------------\n+\n+   function Sigma1 (X : Word) return Word is\n+   begin\n+      return Rotate_Right (X, 14)\n+         xor Rotate_Right (X, 18)\n+         xor Rotate_Right (X, 41);\n+   end Sigma1;\n+\n+   --------\n+   -- S0 --\n+   --------\n+\n+   function S0 (X : Word) return Word is\n+   begin\n+      return Rotate_Right (X, 1)\n+         xor Rotate_Right (X, 8)\n+         xor Shift_Right  (X, 7);\n+   end S0;\n+\n+   --------\n+   -- S1 --\n+   --------\n+\n+   function S1 (X : Word) return Word is\n+   begin\n+      return Rotate_Right (X, 19)\n+         xor Rotate_Right (X, 61)\n+         xor Shift_Right  (X, 6);\n+   end S1;\n+\n+end System.Secure_Hashes.SHA2_64;"}, {"sha": "c8949733e2e4247c26d3676a290ff0c24dc77b3a", "filename": "gcc/ada/s-shsh64.ads", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fs-shsh64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fs-shsh64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-shsh64.ads?ref=472574384b8f67271323021d216969c292fb2057", "patch": "@@ -0,0 +1,129 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--         S Y S T E M . S E C U R E _ H A S H E S . S H A 2 _ 6 4          --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--           Copyright (C) 2009, Free Software Foundation, Inc.             --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This pacakge provides support for the 64-bit FIPS PUB 180-3 functions\n+--  (SHA-384 and SHA-512).\n+\n+with Interfaces;\n+with GNAT.Byte_Swapping;\n+\n+with System.Secure_Hashes.SHA2_Common;\n+\n+package System.Secure_Hashes.SHA2_64 is\n+   subtype Word is Interfaces.Unsigned_64;\n+\n+   package Hash_State is new Hash_Function_State\n+     (Word           => Word,\n+      Swap           => GNAT.Byte_Swapping.Swap8,\n+      Hash_Bit_Order => System.High_Order_First);\n+   --  SHA-384 and SHA-512 operate on 64-bit big endian words\n+\n+   K : Hash_State.State (0 .. 79) :=\n+         (16#428a2f98d728ae22#, 16#7137449123ef65cd#,\n+          16#b5c0fbcfec4d3b2f#, 16#e9b5dba58189dbbc#,\n+          16#3956c25bf348b538#, 16#59f111f1b605d019#,\n+          16#923f82a4af194f9b#, 16#ab1c5ed5da6d8118#,\n+          16#d807aa98a3030242#, 16#12835b0145706fbe#,\n+          16#243185be4ee4b28c#, 16#550c7dc3d5ffb4e2#,\n+          16#72be5d74f27b896f#, 16#80deb1fe3b1696b1#,\n+          16#9bdc06a725c71235#, 16#c19bf174cf692694#,\n+          16#e49b69c19ef14ad2#, 16#efbe4786384f25e3#,\n+          16#0fc19dc68b8cd5b5#, 16#240ca1cc77ac9c65#,\n+          16#2de92c6f592b0275#, 16#4a7484aa6ea6e483#,\n+          16#5cb0a9dcbd41fbd4#, 16#76f988da831153b5#,\n+          16#983e5152ee66dfab#, 16#a831c66d2db43210#,\n+          16#b00327c898fb213f#, 16#bf597fc7beef0ee4#,\n+          16#c6e00bf33da88fc2#, 16#d5a79147930aa725#,\n+          16#06ca6351e003826f#, 16#142929670a0e6e70#,\n+          16#27b70a8546d22ffc#, 16#2e1b21385c26c926#,\n+          16#4d2c6dfc5ac42aed#, 16#53380d139d95b3df#,\n+          16#650a73548baf63de#, 16#766a0abb3c77b2a8#,\n+          16#81c2c92e47edaee6#, 16#92722c851482353b#,\n+          16#a2bfe8a14cf10364#, 16#a81a664bbc423001#,\n+          16#c24b8b70d0f89791#, 16#c76c51a30654be30#,\n+          16#d192e819d6ef5218#, 16#d69906245565a910#,\n+          16#f40e35855771202a#, 16#106aa07032bbd1b8#,\n+          16#19a4c116b8d2d0c8#, 16#1e376c085141ab53#,\n+          16#2748774cdf8eeb99#, 16#34b0bcb5e19b48a8#,\n+          16#391c0cb3c5c95a63#, 16#4ed8aa4ae3418acb#,\n+          16#5b9cca4f7763e373#, 16#682e6ff3d6b2b8a3#,\n+          16#748f82ee5defb2fc#, 16#78a5636f43172f60#,\n+          16#84c87814a1f0ab72#, 16#8cc702081a6439ec#,\n+          16#90befffa23631e28#, 16#a4506cebde82bde9#,\n+          16#bef9a3f7b2c67915#, 16#c67178f2e372532b#,\n+          16#ca273eceea26619c#, 16#d186b8c721c0c207#,\n+          16#eada7dd6cde0eb1e#, 16#f57d4f7fee6ed178#,\n+          16#06f067aa72176fba#, 16#0a637dc5a2c898a6#,\n+          16#113f9804bef90dae#, 16#1b710b35131c471b#,\n+          16#28db77f523047d84#, 16#32caab7b40c72493#,\n+          16#3c9ebe0a15c9bebc#, 16#431d67c49c100d4c#,\n+          16#4cc5d4becb3e42b6#, 16#597f299cfc657e2a#,\n+          16#5fcb6fab3ad6faec#, 16#6c44198c4a475817#);\n+   --  Constants from FIPS PUB 180-3\n+\n+   function Sigma0 (X : Word) return Word;\n+   function Sigma1 (X : Word) return Word;\n+   function S0 (X : Word) return Word;\n+   function S1 (X : Word) return Word;\n+   pragma Inline (Sigma0, Sigma1, S0, S1);\n+   --  Elementary functions Sigma^512_0, Sigma^512_1, sigma^512_0, sigma^512_1\n+   --  from FIPS PUB 180-3.\n+\n+   procedure Transform is new SHA2_Common.Transform\n+     (Hash_State => Hash_State,\n+      K          => K,\n+      Rounds     => 80,\n+      Sigma0     => Sigma0,\n+      Sigma1     => Sigma1,\n+      S0         => S0,\n+      S1         => S1);\n+\n+   SHA384_Init_State : constant Hash_State.State :=\n+                         (0 => 16#cbbb9d5dc1059ed8#,\n+                          1 => 16#629a292a367cd507#,\n+                          2 => 16#9159015a3070dd17#,\n+                          3 => 16#152fecd8f70e5939#,\n+                          4 => 16#67332667ffc00b31#,\n+                          5 => 16#8eb44a8768581511#,\n+                          6 => 16#db0c2e0d64f98fa7#,\n+                          7 => 16#47b5481dbefa4fa4#);\n+   SHA512_Init_State : constant Hash_State.State :=\n+                         (0 => 16#6a09e667f3bcc908#,\n+                          1 => 16#bb67ae8584caa73b#,\n+                          2 => 16#3c6ef372fe94f82b#,\n+                          3 => 16#a54ff53a5f1d36f1#,\n+                          4 => 16#510e527fade682d1#,\n+                          5 => 16#9b05688c2b3e6c1f#,\n+                          6 => 16#1f83d9abfb41bd6b#,\n+                          7 => 16#5be0cd19137e2179#);\n+   --  Initialization vectors from FIPS PUB 180-3\n+\n+end System.Secure_Hashes.SHA2_64;"}, {"sha": "8b54406f10a6ee8666f8c625e95a3d49fc7875bc", "filename": "gcc/ada/s-shshco.adb", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fs-shshco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fs-shshco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-shshco.adb?ref=472574384b8f67271323021d216969c292fb2057", "patch": "@@ -0,0 +1,133 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--     S Y S T E M . S E C U R E _ H A S H E S . S H A 2 _ C O M M O N      --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--           Copyright (C) 2009, Free Software Foundation, Inc.             --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package body System.Secure_Hashes.SHA2_Common is\n+\n+   ---------------\n+   -- Transform --\n+   ---------------\n+\n+   procedure Transform\n+     (H_St : in out Hash_State.State;\n+      M_St : in out Message_State)\n+   is\n+      subtype Word is Hash_State.Word;\n+      use type Hash_State.Word;\n+\n+      function Ch (X, Y, Z : Word) return Word;\n+      function Maj (X, Y, Z : Word) return Word;\n+      pragma Inline (Ch, Maj);\n+      --  Elementary functions from FIPS PUB 180-3\n+\n+      --------\n+      -- Ch --\n+      --------\n+\n+      function Ch (X, Y, Z : Word) return Word is\n+      begin\n+         return (X and Y) xor ((not X) and Z);\n+      end Ch;\n+\n+      ---------\n+      -- Maj --\n+      ---------\n+\n+      function Maj (X, Y, Z : Word) return Word is\n+      begin\n+         return (X and Y) xor (X and Z) xor (Y and Z);\n+      end Maj;\n+\n+      type Words is array (Natural range <>) of Word;\n+\n+      X : Words (0 .. 15);\n+      for X'Address use M_St.Buffer'Address;\n+      pragma Import (Ada, X);\n+\n+      W : Words (0 .. Rounds - 1);\n+\n+      A, B, C, D, E, F, G, H, T1, T2 : Word;\n+\n+   --  Start of processing for Transform\n+\n+   begin\n+      if System.Default_Bit_Order /= High_Order_First then\n+         for J in X'Range loop\n+            Hash_State.Swap (X (J)'Address);\n+         end loop;\n+      end if;\n+\n+      --  1. Prepare message schedule\n+\n+      W (0 .. 15) := X;\n+\n+      for T in 16 .. Rounds - 1 loop\n+         W (T) := S1 (W (T - 2)) + W (T - 7) + S0 (W (T - 15)) + W (T - 16);\n+      end loop;\n+\n+      --  2. Initialize working variables\n+\n+      A := H_St (0);\n+      B := H_St (1);\n+      C := H_St (2);\n+      D := H_St (3);\n+      E := H_St (4);\n+      F := H_St (5);\n+      G := H_St (6);\n+      H := H_St (7);\n+\n+      --  3. Perform transformation rounds\n+\n+      for T in 0 .. Rounds - 1 loop\n+         T1 := H + Sigma1 (E) + Ch (E, F, G) + K (T) + W (T);\n+         T2 := Sigma0 (A) + Maj (A, B, C);\n+         H := G;\n+         G := F;\n+         F := E;\n+         E := D + T1;\n+         D := C;\n+         C := B;\n+         B := A;\n+         A := T1 + T2;\n+      end loop;\n+\n+      --  4. Update hash state\n+\n+      H_St (0) := A + H_St (0);\n+      H_St (1) := B + H_St (1);\n+      H_St (2) := C + H_St (2);\n+      H_St (3) := D + H_St (3);\n+      H_St (4) := E + H_St (4);\n+      H_St (5) := F + H_St (5);\n+      H_St (6) := G + H_St (6);\n+      H_St (7) := H + H_St (7);\n+   end Transform;\n+\n+end System.Secure_Hashes.SHA2_Common;"}, {"sha": "d4600f12b58e05cb09da144aca23747b63232754", "filename": "gcc/ada/s-shshco.ads", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fs-shshco.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472574384b8f67271323021d216969c292fb2057/gcc%2Fada%2Fs-shshco.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-shshco.ads?ref=472574384b8f67271323021d216969c292fb2057", "patch": "@@ -0,0 +1,63 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--     S Y S T E M . S E C U R E _ H A S H E S . S H A 2 _ C O M M O N      --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--           Copyright (C) 2009, Free Software Foundation, Inc.             --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides supporting code for implementation of the following\n+--  secure hash functions described in FIPS PUB 180-3: SHA-224, SHA-256,\n+--  SHA-384, SHA-512. It contains the generic transform operation that is\n+--  common to the above four functions. The complete text of FIPS PUB 180-3\n+--  can be found at:\n+--    http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf\n+\n+package System.Secure_Hashes.SHA2_Common is\n+\n+   Block_Words : constant := 16;\n+   --  All functions operate on blocks of 16 words\n+\n+   generic\n+      with package Hash_State is new Hash_Function_State (<>);\n+\n+      Rounds : Natural;\n+      --  Number of transformation rounds\n+\n+      K : Hash_State.State;\n+      --  Constants used in the transform operation\n+\n+      with function Sigma0 (X : Hash_State.Word) return Hash_State.Word is <>;\n+      with function Sigma1 (X : Hash_State.Word) return Hash_State.Word is <>;\n+      with function S0 (X : Hash_State.Word) return Hash_State.Word is <>;\n+      with function S1 (X : Hash_State.Word) return Hash_State.Word is <>;\n+      --  FIPS PUB 180-3 elementary functions\n+\n+   procedure Transform\n+     (H_St : in out Hash_State.State;\n+      M_St : in out Message_State);\n+\n+end System.Secure_Hashes.SHA2_Common;"}]}