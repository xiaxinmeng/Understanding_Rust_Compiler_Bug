{"sha": "8f0c696a7b5079c5deea4b4301b16b41145e7986", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYwYzY5NmE3YjUwNzljNWRlZWE0YjQzMDFiMTZiNDExNDVlNzk4Ng==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-05-26T12:00:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-05-26T12:00:48Z"}, "message": "fold-const.c (fold_binary_loc): Move X % -Y -> X % Y and X % C -> X & (C - 1) for C being a power-of two to ...\n\n2015-05-26  Richard Biener  <rguenther@suse.de>\n\n\t* fold-const.c (fold_binary_loc): Move X % -Y -> X % Y and\n\tX % C -> X & (C - 1) for C being a power-of two to ...\n\t* match.pd: ... patterns.\n\nFrom-SVN: r223690", "tree": {"sha": "93308095f66ea23ff7e2686d0c3d93c9eb180d0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93308095f66ea23ff7e2686d0c3d93c9eb180d0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f0c696a7b5079c5deea4b4301b16b41145e7986", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f0c696a7b5079c5deea4b4301b16b41145e7986", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f0c696a7b5079c5deea4b4301b16b41145e7986", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f0c696a7b5079c5deea4b4301b16b41145e7986/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "534bd33b61d08e0bf4d58efbeb3da5a368f8a247", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/534bd33b61d08e0bf4d58efbeb3da5a368f8a247", "html_url": "https://github.com/Rust-GCC/gccrs/commit/534bd33b61d08e0bf4d58efbeb3da5a368f8a247"}], "stats": {"total": 67, "additions": 30, "deletions": 37}, "files": [{"sha": "8fc8fbe3ccee5eff686b7ac910f2944ec1e963f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0c696a7b5079c5deea4b4301b16b41145e7986/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0c696a7b5079c5deea4b4301b16b41145e7986/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f0c696a7b5079c5deea4b4301b16b41145e7986", "patch": "@@ -1,3 +1,9 @@\n+2015-05-26  Richard Biener  <rguenther@suse.de>\n+\n+\t* fold-const.c (fold_binary_loc): Move X % -Y -> X % Y and\n+\tX % C -> X & (C - 1) for C being a power-of two to ...\n+\t* match.pd: ... patterns.\n+\n 2015-05-26  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* match.pd (swapped_tcc_comparison): New operator list."}, {"sha": "55196b54c6ba88d836e6e7d2f5e79d5d65ccc275", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0c696a7b5079c5deea4b4301b16b41145e7986/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0c696a7b5079c5deea4b4301b16b41145e7986/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=8f0c696a7b5079c5deea4b4301b16b41145e7986", "patch": "@@ -11941,15 +11941,6 @@ fold_binary_loc (location_t loc,\n     case FLOOR_MOD_EXPR:\n     case ROUND_MOD_EXPR:\n     case TRUNC_MOD_EXPR:\n-      /* X % -Y is the same as X % Y.  */\n-      if (code == TRUNC_MOD_EXPR\n-\t  && !TYPE_UNSIGNED (type)\n-\t  && TREE_CODE (arg1) == NEGATE_EXPR\n-\t  && !TYPE_OVERFLOW_TRAPS (type))\n-\treturn fold_build2_loc (loc, code, type, fold_convert_loc (loc, type, arg0),\n-\t\t\t    fold_convert_loc (loc, type,\n-\t\t\t\t\t      TREE_OPERAND (arg1, 0)));\n-\n       strict_overflow_p = false;\n       if (TREE_CODE (arg1) == INTEGER_CST\n \t  && 0 != (tem = extract_muldiv (op0, arg1, code, NULL_TREE,\n@@ -11962,34 +11953,6 @@ fold_binary_loc (location_t loc,\n \t  return fold_convert_loc (loc, type, tem);\n \t}\n \n-      /* Optimize TRUNC_MOD_EXPR by a power of two into a BIT_AND_EXPR,\n-         i.e. \"X % C\" into \"X & (C - 1)\", if X and C are positive.  */\n-      if ((code == TRUNC_MOD_EXPR || code == FLOOR_MOD_EXPR)\n-\t  && (TYPE_UNSIGNED (type)\n-\t      || tree_expr_nonnegative_warnv_p (op0, &strict_overflow_p)))\n-\t{\n-\t  tree c = arg1;\n-\t  /* Also optimize A % (C << N)  where C is a power of 2,\n-\t     to A & ((C << N) - 1).  */\n-\t  if (TREE_CODE (arg1) == LSHIFT_EXPR)\n-\t    c = TREE_OPERAND (arg1, 0);\n-\n-\t  if (integer_pow2p (c) && tree_int_cst_sgn (c) > 0)\n-\t    {\n-\t      tree mask\n-\t\t= fold_build2_loc (loc, MINUS_EXPR, TREE_TYPE (arg1), arg1,\n-\t\t\t\t   build_int_cst (TREE_TYPE (arg1), 1));\n-\t      if (strict_overflow_p)\n-\t\tfold_overflow_warning ((\"assuming signed overflow does not \"\n-\t\t\t\t\t\"occur when simplifying \"\n-\t\t\t\t\t\"X % (power of two)\"),\n-\t\t\t\t       WARN_STRICT_OVERFLOW_MISC);\n-\t      return fold_build2_loc (loc, BIT_AND_EXPR, type,\n-\t\t\t\t      fold_convert_loc (loc, type, arg0),\n-\t\t\t\t      fold_convert_loc (loc, type, mask));\n-\t    }\n-\t}\n-\n       return NULL_TREE;\n \n     case LROTATE_EXPR:"}, {"sha": "abd785178fc0f7795284559e4b6a8d5f4607adc6", "filename": "gcc/match.pd", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0c696a7b5079c5deea4b4301b16b41145e7986/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0c696a7b5079c5deea4b4301b16b41145e7986/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=8f0c696a7b5079c5deea4b4301b16b41145e7986", "patch": "@@ -230,6 +230,30 @@ along with GCC; see the file COPYING3.  If not see\n        && !sign_bit_p (@1, @1))\n    (trunc_mod @0 (negate @1))))\n \n+/* X % -Y is the same as X % Y.  */\n+(simplify\n+ (trunc_mod @0 (convert? (negate @1)))\n+ (if (!TYPE_UNSIGNED (type)\n+      && !TYPE_OVERFLOW_TRAPS (type)\n+      && tree_nop_conversion_p (type, TREE_TYPE (@1)))\n+  (trunc_mod @0 (convert @1))))\n+\n+/* Optimize TRUNC_MOD_EXPR by a power of two into a BIT_AND_EXPR,\n+   i.e. \"X % C\" into \"X & (C - 1)\", if X and C are positive.\n+   Also optimize A % (C << N)  where C is a power of 2,\n+   to A & ((C << N) - 1).  */\n+(match (power_of_two_cand @1)\n+ INTEGER_CST@1)\n+(match (power_of_two_cand @1)\n+ (lshift INTEGER_CST@1 @2))\n+(for mod (trunc_mod floor_mod)\n+ (simplify\n+  (mod @0 (power_of_two_cand@1 @2))\n+  (if ((TYPE_UNSIGNED (type)\n+\t|| tree_expr_nonnegative_p (@0))\n+\t&& integer_pow2p (@2) && tree_int_cst_sgn (@2) > 0)\n+   (bit_and @0 (minus @1 { build_int_cst (TREE_TYPE (@1), 1); })))))\n+\n /* X % Y is smaller than Y.  */\n (for cmp (lt ge)\n  (simplify"}]}