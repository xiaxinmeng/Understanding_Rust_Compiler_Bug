{"sha": "fa19795ec4394113e1d79f4660d97b2da23cfaca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmExOTc5NWVjNDM5NDExM2UxZDc5ZjQ2NjBkOTdiMmRhMjNjZmFjYQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2010-07-12T19:03:35Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2010-07-12T19:03:35Z"}, "message": "Makefile.in (target-globals.o): Depend on builtins.h.\n\ngcc/\n\t* Makefile.in (target-globals.o): Depend on builtins.h.\n\t* builtins.h: New file.\n\t* builtins.c: Include builtins.h.\n\t(default_target_builtins): New variable.\n\t(this_target_builtins): New conditional variable.\n\t(apply_args_mode, apply_result_mode): Redefine as macros.\n\t* target-globals.h (this_target_builtins): Declare.\n\t(target_globals): Add a builtins field.\n\t(restore_target_globals): Copy the builtins field to\n\tthis_target_builtins.\n\t* target-globals.c: Include builtins.h.\n\t(default_target_globals): Initialize the builtins field.\n\t(save_target_globals): Likewise.\n\nFrom-SVN: r162105", "tree": {"sha": "62ef72086ece76b905d83fddffb7913f0ad12b2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62ef72086ece76b905d83fddffb7913f0ad12b2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa19795ec4394113e1d79f4660d97b2da23cfaca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa19795ec4394113e1d79f4660d97b2da23cfaca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa19795ec4394113e1d79f4660d97b2da23cfaca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa19795ec4394113e1d79f4660d97b2da23cfaca/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c371bb73807c48f1a708c51f113caea45f0347b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c371bb73807c48f1a708c51f113caea45f0347b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c371bb73807c48f1a708c51f113caea45f0347b1"}], "stats": {"total": 98, "additions": 83, "deletions": 15}, "files": [{"sha": "be54183d7e77bb70b4a045664ceb842f5dfd94c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa19795ec4394113e1d79f4660d97b2da23cfaca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa19795ec4394113e1d79f4660d97b2da23cfaca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa19795ec4394113e1d79f4660d97b2da23cfaca", "patch": "@@ -1,3 +1,19 @@\n+2010-07-12  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* Makefile.in (target-globals.o): Depend on builtins.h.\n+\t* builtins.h: New file.\n+\t* builtins.c: Include builtins.h.\n+\t(default_target_builtins): New variable.\n+\t(this_target_builtins): New conditional variable.\n+\t(apply_args_mode, apply_result_mode): Redefine as macros.\n+\t* target-globals.h (this_target_builtins): Declare.\n+\t(target_globals): Add a builtins field.\n+\t(restore_target_globals): Copy the builtins field to\n+\tthis_target_builtins.\n+\t* target-globals.c: Include builtins.h.\n+\t(default_target_globals): Initialize the builtins field.\n+\t(save_target_globals): Likewise.\n+\n 2010-07-12  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* expmed.h (alg_code, mult_cost, MULT_COST_LESS, CHEAPER_MULT_COST)"}, {"sha": "1db2ecbda5601467bb7d076c5cbb4d791ce7f9ca", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa19795ec4394113e1d79f4660d97b2da23cfaca/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa19795ec4394113e1d79f4660d97b2da23cfaca/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=fa19795ec4394113e1d79f4660d97b2da23cfaca", "patch": "@@ -3483,7 +3483,7 @@ lower-subreg.o : lower-subreg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n target-globals.o : target-globals.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) insn-config.h $(MACHMODE_H) $(GGC_H) $(TOPLEV_H) target-globals.h \\\n    $(FLAGS_H) $(REGS_H) $(RTL_H) reload.h expmed.h $(EXPR_H) $(OPTABS_H) \\\n-   $(LIBFUNCS_H) $(CFGLOOP_H) $(IRA_INT_H)\n+   $(LIBFUNCS_H) $(CFGLOOP_H) $(IRA_INT_H) builtins.h\n \n $(out_object_file): $(out_file) $(CONFIG_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(REGS_H) hard-reg-set.h insn-config.h conditions.h \\"}, {"sha": "73a70f22ffea0c6d5ccbf601f484f76aa5632e5a", "filename": "gcc/builtins.c", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa19795ec4394113e1d79f4660d97b2da23cfaca/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa19795ec4394113e1d79f4660d97b2da23cfaca/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=fa19795ec4394113e1d79f4660d97b2da23cfaca", "patch": "@@ -50,6 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-flow.h\"\n #include \"value-prof.h\"\n #include \"diagnostic-core.h\"\n+#include \"builtins.h\"\n \n #ifndef SLOW_UNALIGNED_ACCESS\n #define SLOW_UNALIGNED_ACCESS(MODE, ALIGN) STRICT_ALIGNMENT\n@@ -60,6 +61,11 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n static tree do_mpc_arg1 (tree, tree, int (*)(mpc_ptr, mpc_srcptr, mpc_rnd_t));\n \n+struct target_builtins default_target_builtins;\n+#if SWITCHABLE_TARGET\n+struct target_builtins *this_target_builtins = &default_target_builtins;\n+#endif\n+\n /* Define the names of the builtin function types and codes.  */\n const char *const built_in_class_names[4]\n   = {\"NOT_BUILT_IN\", \"BUILT_IN_FRONTEND\", \"BUILT_IN_MD\", \"BUILT_IN_NORMAL\"};\n@@ -1249,19 +1255,10 @@ get_memory_rtx (tree exp, tree len)\n \f\n /* Built-in functions to perform an untyped call and return.  */\n \n-/* For each register that may be used for calling a function, this\n-   gives a mode used to copy the register's value.  VOIDmode indicates\n-   the register is not used for calling a function.  If the machine\n-   has register windows, this gives only the outbound registers.\n-   INCOMING_REGNO gives the corresponding inbound register.  */\n-static enum machine_mode apply_args_mode[FIRST_PSEUDO_REGISTER];\n-\n-/* For each register that may be used for returning values, this gives\n-   a mode used to copy the register's value.  VOIDmode indicates the\n-   register is not used for returning values.  If the machine has\n-   register windows, this gives only the outbound registers.\n-   INCOMING_REGNO gives the corresponding inbound register.  */\n-static enum machine_mode apply_result_mode[FIRST_PSEUDO_REGISTER];\n+#define apply_args_mode \\\n+  (this_target_builtins->x_apply_args_mode)\n+#define apply_result_mode \\\n+  (this_target_builtins->x_apply_result_mode)\n \n /* Return the size required for the block returned by __builtin_apply_args,\n    and initialize apply_args_mode.  */"}, {"sha": "a7d14581e99970f4ac8b7398b7d649340b73f8dd", "filename": "gcc/builtins.h", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa19795ec4394113e1d79f4660d97b2da23cfaca/gcc%2Fbuiltins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa19795ec4394113e1d79f4660d97b2da23cfaca/gcc%2Fbuiltins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.h?ref=fa19795ec4394113e1d79f4660d97b2da23cfaca", "patch": "@@ -0,0 +1,49 @@\n+/* Expand builtin functions.\n+   Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n+   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_BUILTINS_H\n+#define GCC_BUILTINS_H\n+\n+/* Target-dependent globals.  */\n+struct target_builtins {\n+  /* For each register that may be used for calling a function, this\n+     gives a mode used to copy the register's value.  VOIDmode indicates\n+     the register is not used for calling a function.  If the machine\n+     has register windows, this gives only the outbound registers.\n+     INCOMING_REGNO gives the corresponding inbound register.  */\n+  enum machine_mode x_apply_args_mode[FIRST_PSEUDO_REGISTER];\n+\n+  /* For each register that may be used for returning values, this gives\n+     a mode used to copy the register's value.  VOIDmode indicates the\n+     register is not used for returning values.  If the machine has\n+     register windows, this gives only the outbound registers.\n+     INCOMING_REGNO gives the corresponding inbound register.  */\n+  enum machine_mode x_apply_result_mode[FIRST_PSEUDO_REGISTER];\n+};\n+\n+extern GTY(()) struct target_builtins default_target_builtins;\n+#if SWITCHABLE_TARGET\n+extern struct target_builtins *this_target_builtins;\n+#else\n+#define this_target_builtins (&default_target_builtins)\n+#endif\n+\n+#endif"}, {"sha": "cca93a53f91f651bfcba701040cfc40108851fff", "filename": "gcc/target-globals.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa19795ec4394113e1d79f4660d97b2da23cfaca/gcc%2Ftarget-globals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa19795ec4394113e1d79f4660d97b2da23cfaca/gcc%2Ftarget-globals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-globals.c?ref=fa19795ec4394113e1d79f4660d97b2da23cfaca", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"libfuncs.h\"\n #include \"cfgloop.h\"\n #include \"ira-int.h\"\n+#include \"builtins.h\"\n \n #if SWITCHABLE_TARGET\n struct target_globals default_target_globals = {\n@@ -50,7 +51,8 @@ struct target_globals default_target_globals = {\n   &default_target_libfuncs,\n   &default_target_cfgloop,\n   &default_target_ira,\n-  &default_target_ira_int\n+  &default_target_ira_int,\n+  &default_target_builtins\n };\n \n struct target_globals *\n@@ -70,6 +72,7 @@ save_target_globals (void)\n   g->cfgloop = XCNEW (struct target_cfgloop);\n   g->ira = XCNEW (struct target_ira);\n   g->ira_int = XCNEW (struct target_ira_int);\n+  g->builtins = XCNEW (struct target_builtins);\n   restore_target_globals (g);\n   target_reinit ();\n   return g;"}, {"sha": "a0cf73730c21ba48d5e479f21fd1e79c9bebf0b2", "filename": "gcc/target-globals.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa19795ec4394113e1d79f4660d97b2da23cfaca/gcc%2Ftarget-globals.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa19795ec4394113e1d79f4660d97b2da23cfaca/gcc%2Ftarget-globals.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-globals.h?ref=fa19795ec4394113e1d79f4660d97b2da23cfaca", "patch": "@@ -32,6 +32,7 @@ extern struct target_libfuncs *this_target_libfuncs;\n extern struct target_cfgloop *this_target_cfgloop;\n extern struct target_ira *this_target_ira;\n extern struct target_ira_int *this_target_ira_int;\n+extern struct target_builtins *this_target_builtins;\n \n struct GTY(()) target_globals {\n   struct target_flag_state *GTY((skip)) flag_state;\n@@ -45,6 +46,7 @@ struct GTY(()) target_globals {\n   struct target_cfgloop *GTY((skip)) cfgloop;\n   struct target_ira *GTY((skip)) ira;\n   struct target_ira_int *GTY((skip)) ira_int;\n+  struct target_builtins *GTY((skip)) builtins;\n };\n \n extern struct target_globals default_target_globals;\n@@ -65,6 +67,7 @@ restore_target_globals (struct target_globals *g)\n   this_target_cfgloop = g->cfgloop;\n   this_target_ira = g->ira;\n   this_target_ira_int = g->ira_int;\n+  this_target_builtins = g->builtins;\n }\n #endif\n "}]}