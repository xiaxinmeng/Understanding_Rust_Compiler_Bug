{"sha": "d2f55c5c66c85b644d09982c3c7b2462596766c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJmNTVjNWM2NmM4NWI2NDRkMDk5ODJjM2M3YjI0NjI1OTY3NjZjNw==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2003-03-11T15:43:25Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2003-03-11T15:43:25Z"}, "message": "cris.md: Remove lingering EGCS reference.\n\n\t* config/cris/cris.md: Remove lingering EGCS reference.\n\t(\"*extopqihi_side_biap\"): For HI operation, match\n\tcris_additive_operand_extend_operator, not\n\tcris_operand_extend_operator.  Adjust condition.\n\t(\"*extopqihi_side\", \"*extopqihi\"): Ditto.\n\t(\"*extopqisi_side_biap\"): Correct operand numbers in condition.\n\t(\"*extophisi_side_biap\", \"*extopqisi_swap_side_biap\"): Ditto.\n\t(\"*extophisi_swap_side_biap\", \"*extopqisi_swap\"): Ditto.\n\t(\"*extophisi_swap\"): Ditto.\n\t(\"*extopqihi_swap_side_biap\"): For HI operation, match a simple\n\tPLUS, not cris_operand_extend_operator.  Adjust condition and\n\toutput template.\n\t(\"*extopqihi_swap_side\", \"*extopqihi_swap\"): Ditto.\n\t* config/cris/cris.h (PREDICATE_CODES): Add\n\tcris_additive_operand_extend_operator.\n\t* config/cris/cris.c (cris_additive_operand_extend_operator):\n\tNew predicate.\n\nFrom-SVN: r64174", "tree": {"sha": "833db57fcb37b9366622ea740272ef2bf058fc8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/833db57fcb37b9366622ea740272ef2bf058fc8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2f55c5c66c85b644d09982c3c7b2462596766c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2f55c5c66c85b644d09982c3c7b2462596766c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2f55c5c66c85b644d09982c3c7b2462596766c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2f55c5c66c85b644d09982c3c7b2462596766c7/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "436f8a4ce077dc372f70d1b57ab693c4aa0c6c6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/436f8a4ce077dc372f70d1b57ab693c4aa0c6c6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/436f8a4ce077dc372f70d1b57ab693c4aa0c6c6d"}], "stats": {"total": 137, "additions": 81, "deletions": 56}, "files": [{"sha": "2d5e77776719f996426a93ff5f4923697355813e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f55c5c66c85b644d09982c3c7b2462596766c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f55c5c66c85b644d09982c3c7b2462596766c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2f55c5c66c85b644d09982c3c7b2462596766c7", "patch": "@@ -1,3 +1,23 @@\n+2003-03-11  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* config/cris/cris.md: Remove lingering EGCS reference.\n+\t(\"*extopqihi_side_biap\"): For HI operation, match\n+\tcris_additive_operand_extend_operator, not\n+\tcris_operand_extend_operator.  Adjust condition.\n+\t(\"*extopqihi_side\", \"*extopqihi\"): Ditto.\n+\t(\"*extopqisi_side_biap\"): Correct operand numbers in condition.\n+\t(\"*extophisi_side_biap\", \"*extopqisi_swap_side_biap\"): Ditto.\n+\t(\"*extophisi_swap_side_biap\", \"*extopqisi_swap\"): Ditto.\n+\t(\"*extophisi_swap\"): Ditto.\n+\t(\"*extopqihi_swap_side_biap\"): For HI operation, match a simple\n+\tPLUS, not cris_operand_extend_operator.  Adjust condition and\n+\toutput template.\n+\t(\"*extopqihi_swap_side\", \"*extopqihi_swap\"): Ditto.\n+\t* config/cris/cris.h (PREDICATE_CODES): Add\n+\tcris_additive_operand_extend_operator.\n+\t* config/cris/cris.c (cris_additive_operand_extend_operator):\n+\tNew predicate.\n+\n 2003-03-11  Hartmut Penner  <hpenner@de.ibm.com>\n \n \t* df.c (read_modify_subreg_p): Change from static to global."}, {"sha": "ed3bc9eacbc3778213f91f3f80cd0931124a8076", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f55c5c66c85b644d09982c3c7b2462596766c7/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f55c5c66c85b644d09982c3c7b2462596766c7/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=d2f55c5c66c85b644d09982c3c7b2462596766c7", "patch": "@@ -337,6 +337,22 @@ cris_operand_extend_operator (x, mode)\n \t  && (code == PLUS || code == MINUS || code == UMIN));\n }\n \n+/* Check if MODE is same as mode for X, and X is PLUS or MINUS.  */\n+\n+int\n+cris_additive_operand_extend_operator (x, mode)\n+     rtx x;\n+     enum machine_mode mode;\n+{\n+  enum rtx_code code = GET_CODE (x);\n+\n+  if (mode == VOIDmode)\n+    mode = GET_MODE (x);\n+\n+  return (GET_MODE (x) == mode\n+\t  && (code == PLUS || code == MINUS));\n+}\n+\n /* Check to see if MODE is same as mode for X, and X is SIGN_EXTEND or\n    ZERO_EXTEND.  */\n "}, {"sha": "98a27a643b36643fa4327ebee61f05ba5e9bb449", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f55c5c66c85b644d09982c3c7b2462596766c7/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f55c5c66c85b644d09982c3c7b2462596766c7/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=d2f55c5c66c85b644d09982c3c7b2462596766c7", "patch": "@@ -1643,6 +1643,8 @@ call_ ## FUNC (void)\t\t\t\t\t\t\\\n   {PLUS, IOR, AND, UMIN}},\t\t\t\t\\\n  {\"cris_operand_extend_operator\",\t\t\t\\\n   {PLUS, MINUS, UMIN}},\t\t\t\t\t\\\n+ {\"cris_additive_operand_extend_operator\",\t\t\\\n+  {PLUS, MINUS}},\t\t\t\t\t\\\n  {\"cris_extend_operator\",\t\t\t\t\\\n   {ZERO_EXTEND, SIGN_EXTEND}},\t\t\t\t\\\n  {\"cris_plus_or_bound_operator\",\t\t\t\\"}, {"sha": "2ec2502b1e5adaccc6223b22307f96522ad531c6", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 43, "deletions": 56, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f55c5c66c85b644d09982c3c7b2462596766c7/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f55c5c66c85b644d09982c3c7b2462596766c7/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=d2f55c5c66c85b644d09982c3c7b2462596766c7", "patch": "@@ -1,5 +1,5 @@\n ;; GCC machine description for CRIS cpu cores.\n-;; Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+;; Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n ;; Contributed by Axis Communications.\n \n ;; This file is part of GCC.\n@@ -34,7 +34,7 @@\n ;; gcc-2.7.2 (and problably not on gcc-2.8.1), relating to that when a\n ;; constant is substituted into an operand, the actual mode must be\n ;; deduced from the pattern.  There is reasonable hope that that has been\n-;; fixed in egcs post 1.1.1, so FIXME: try again.\n+;; fixed, so FIXME: try again.\n \n ;; You will notice that three-operand alternatives (\"=r\", \"r\", \"!To\")\n ;; are marked with a \"!\" constraint modifier to avoid being reloaded\n@@ -1886,7 +1886,7 @@\n (define_insn \"*extopqihi_side_biap\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n \t(match_operator:HI\n-\t 6 \"cris_operand_extend_operator\"\n+\t 6 \"cris_additive_operand_extend_operator\"\n \t [(match_operand:HI 1 \"register_operand\" \"0,0\")\n \t  (match_operator:HI\n \t   7 \"cris_extend_operator\"\n@@ -1898,8 +1898,7 @@\n \t(plus:SI (mult:SI (match_dup 2)\n \t\t\t  (match_dup 3))\n \t\t (match_dup 4)))]\n-  \"(GET_CODE (operands[5]) != UMIN || GET_CODE (operands[7]) == ZERO_EXTEND)\n-   && cris_side_effect_mode_ok (MULT, operands, 5, 4, 2, 3, 0)\"\n+  \"cris_side_effect_mode_ok (MULT, operands, 5, 4, 2, 3, 0)\"\n   \"@\n    #\n    %x6%e7.%m7 [%5=%4+%2%T3],%0\")\n@@ -1921,7 +1920,7 @@\n \t(plus:SI (mult:SI (match_dup 2)\n \t\t\t  (match_dup 3))\n \t\t (match_dup 4)))]\n-  \"(GET_CODE (operands[5]) != UMIN || GET_CODE (operands[7]) == ZERO_EXTEND)\n+  \"(GET_CODE (operands[6]) != UMIN || GET_CODE (operands[7]) == ZERO_EXTEND)\n    && cris_side_effect_mode_ok (MULT, operands, 5, 4, 2, 3, 0)\"\n   \"@\n    #\n@@ -1944,7 +1943,7 @@\n \t(plus:SI (mult:SI (match_dup 2)\n \t\t\t  (match_dup 3))\n \t\t (match_dup 4)))]\n-  \"(GET_CODE (operands[5]) != UMIN || GET_CODE (operands[7]) == ZERO_EXTEND)\n+  \"(GET_CODE (operands[6]) != UMIN || GET_CODE (operands[7]) == ZERO_EXTEND)\n    && cris_side_effect_mode_ok (MULT, operands, 5, 4, 2, 3, 0)\"\n   \"@\n    #\n@@ -1959,7 +1958,7 @@\n (define_insn \"*extopqihi_side\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r\")\n \t(match_operator:HI\n-\t 5 \"cris_operand_extend_operator\"\n+\t 5 \"cris_additive_operand_extend_operator\"\n \t [(match_operand:HI 1 \"register_operand\" \"0,0,0\")\n \t  (match_operator:HI\n \t   6 \"cris_extend_operator\"\n@@ -1970,8 +1969,7 @@\n    (set (match_operand:SI 4 \"register_operand\" \"=*2,r,r\")\n \t(plus:SI (match_dup 2)\n \t\t (match_dup 3)))]\n-  \"(GET_CODE (operands[5]) != UMIN || GET_CODE (operands[6]) == ZERO_EXTEND)\n-   && cris_side_effect_mode_ok (PLUS, operands, 4, 2, 3, -1, 0)\"\n+  \"cris_side_effect_mode_ok (PLUS, operands, 4, 2, 3, -1, 0)\"\n   \"*\n {\n   if (which_alternative == 0\n@@ -2053,28 +2051,25 @@\n \n ;; QImode to HImode\n ;; FIXME: GCC should widen.\n-;; FIXME: These could have anonymous mode for operand 0.\n \n (define_insn \"*extopqihi_swap_side_biap\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n-\t(match_operator:HI\n-\t 7 \"cris_plus_or_bound_operator\"\n-\t [(match_operator:HI\n-\t   6 \"cris_extend_operator\"\n-\t   [(mem:QI (plus:SI\n-\t\t     (mult:SI (match_operand:SI 2 \"register_operand\" \"r,r\")\n-\t\t\t      (match_operand:SI 3 \"const_int_operand\" \"n,n\"))\n-\t\t     (match_operand:SI 4 \"register_operand\" \"r,r\")))])\n-\t  (match_operand:HI 1 \"register_operand\" \"0,0\")]))\n+\t(plus:HI\n+\t (match_operator:HI\n+\t  6 \"cris_extend_operator\"\n+\t  [(mem:QI (plus:SI\n+\t\t    (mult:SI (match_operand:SI 2 \"register_operand\" \"r,r\")\n+\t\t\t     (match_operand:SI 3 \"const_int_operand\" \"n,n\"))\n+\t\t    (match_operand:SI 4 \"register_operand\" \"r,r\")))])\n+\t (match_operand:HI 1 \"register_operand\" \"0,0\")))\n    (set (match_operand:SI 5 \"register_operand\" \"=*4,r\")\n \t(plus:SI (mult:SI (match_dup 2)\n \t\t\t  (match_dup 3))\n \t\t (match_dup 4)))]\n-  \"(GET_CODE (operands[6]) != UMIN || GET_CODE (operands[6]) == ZERO_EXTEND)\n-   && cris_side_effect_mode_ok (MULT, operands, 5, 4, 2, 3, 0)\"\n+  \"cris_side_effect_mode_ok (MULT, operands, 5, 4, 2, 3, 0)\"\n   \"@\n    #\n-   %x7%e6.%m6 [%5=%4+%2%T3],%0\")\n+   add%e6.b [%5=%4+%2%T3],%0\")\n \n ;; QImode to SImode\n \n@@ -2093,7 +2088,7 @@\n \t(plus:SI (mult:SI (match_dup 2)\n \t\t\t  (match_dup 3))\n \t\t (match_dup 4)))]\n-  \"(GET_CODE (operands[6]) != UMIN || GET_CODE (operands[6]) == ZERO_EXTEND)\n+  \"(GET_CODE (operands[7]) != UMIN || GET_CODE (operands[6]) == ZERO_EXTEND)\n    && cris_side_effect_mode_ok (MULT, operands, 5, 4, 2, 3, 0)\"\n   \"@\n    #\n@@ -2115,7 +2110,7 @@\n \t(plus:SI (mult:SI (match_dup 2)\n \t\t\t  (match_dup 3))\n \t\t (match_dup 4)))]\n-  \"(GET_CODE (operands[6]) != UMIN || GET_CODE (operands[6]) == ZERO_EXTEND)\n+  \"(GET_CODE (operands[7]) != UMIN || GET_CODE (operands[6]) == ZERO_EXTEND)\n    && cris_side_effect_mode_ok (MULT, operands, 5, 4, 2, 3, 0)\"\n   \"@\n    #\n@@ -2129,19 +2124,17 @@\n \n (define_insn \"*extopqihi_swap_side\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r\")\n-\t(match_operator:HI\n-\t 6 \"cris_plus_or_bound_operator\"\n-\t [(match_operator:HI\n-\t   5 \"cris_extend_operator\"\n-\t   [(mem:QI (plus:SI\n-\t\t     (match_operand:SI 2 \"cris_bdap_operand\" \"%r,r,r\")\n-\t\t     (match_operand:SI 3 \"cris_bdap_operand\" \"r>Ri,r,>Ri\")))])\n-\t  (match_operand:HI 1 \"register_operand\" \"0,0,0\")]))\n+\t(plus:HI\n+\t (match_operator:HI\n+\t  5 \"cris_extend_operator\"\n+\t  [(mem:QI (plus:SI\n+\t\t    (match_operand:SI 2 \"cris_bdap_operand\" \"%r,r,r\")\n+\t\t    (match_operand:SI 3 \"cris_bdap_operand\" \"r>Ri,r,>Ri\")))])\n+\t (match_operand:HI 1 \"register_operand\" \"0,0,0\")))\n    (set (match_operand:SI 4 \"register_operand\" \"=*2,r,r\")\n \t(plus:SI (match_dup 2)\n \t\t (match_dup 3)))]\n-  \"(GET_CODE (operands[6]) != UMIN || GET_CODE (operands[5]) == ZERO_EXTEND)\n-   && cris_side_effect_mode_ok (PLUS, operands, 4, 2, 3, -1, 0)\"\n+  \"cris_side_effect_mode_ok (PLUS, operands, 4, 2, 3, -1, 0)\"\n   \"*\n {\n   if (which_alternative == 0\n@@ -2151,7 +2144,7 @@\n \t  || CONST_OK_FOR_LETTER_P (INTVAL (operands[3]), 'N')\n \t  || CONST_OK_FOR_LETTER_P (INTVAL (operands[3]), 'J')))\n     return \\\"#\\\";\n-  return \\\"%x6%e5.%m5 [%4=%2%S3],%0\\\";\n+  return \\\"add%e5.b [%4=%2%S3],%0\\\";\n }\")\n \n ;; QImode to SImode\n@@ -2221,13 +2214,12 @@\n (define_insn \"*extopqihi\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r,r\")\n \t(match_operator:HI\n-\t 3 \"cris_operand_extend_operator\"\n+\t 3 \"cris_additive_operand_extend_operator\"\n \t [(match_operand:HI 1 \"register_operand\" \"0,0,0,r\")\n \t  (match_operator:HI\n \t   4 \"cris_extend_operator\"\n \t   [(match_operand:QI 2 \"nonimmediate_operand\" \"r,Q>,m,!To\")])]))]\n-  \"(GET_CODE (operands[3]) != UMIN || GET_CODE (operands[4]) == ZERO_EXTEND)\n-   && GET_MODE_SIZE (GET_MODE (operands[0])) <= UNITS_PER_WORD\n+  \"GET_MODE_SIZE (GET_MODE (operands[0])) <= UNITS_PER_WORD\n    && (operands[1] != frame_pointer_rtx || GET_CODE (operands[3]) != PLUS)\"\n   \"@\n    %x3%e4.%m4 %2,%0\n@@ -2285,20 +2277,17 @@\n \n (define_insn \"*extopqihi_swap\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r,r\")\n-\t(match_operator:HI\n-\t 4 \"cris_plus_or_bound_operator\"\n-\t [(match_operator:HI\n-\t   3 \"cris_extend_operator\"\n-\t   [(match_operand:QI 2 \"nonimmediate_operand\" \"r,Q>,m,!To\")])\n-\t  (match_operand:HI 1 \"register_operand\" \"0,0,0,r\")]))]\n-  \"(GET_CODE (operands[3]) != UMIN || GET_CODE (operands[4]) == ZERO_EXTEND)\n-   && GET_MODE_SIZE (GET_MODE (operands[0])) <= UNITS_PER_WORD\n-   && operands[1] != frame_pointer_rtx\"\n+\t(plus:HI\n+\t (match_operator:HI\n+\t  3 \"cris_extend_operator\"\n+\t  [(match_operand:QI 2 \"nonimmediate_operand\" \"r,Q>,m,!To\")])\n+\t (match_operand:HI 1 \"register_operand\" \"0,0,0,r\")))]\n+  \"operands[1] != frame_pointer_rtx\"\n   \"@\n-   %x4%e3.%m3 %2,%0\n-   %x4%e3.%m3 %2,%0\n-   %x4%e3.%m3 %2,%0\n-   %x4%e3.%m3 %2,%1,%0\"\n+   add%e3.b %2,%0\n+   add%e3.b %2,%0\n+   add%e3.b %2,%0\n+   add%e3.b %2,%1,%0\"\n   [(set_attr \"slottable\" \"yes,yes,no,no\")\n    (set_attr \"cc\" \"clobber\")])\n \n@@ -2312,8 +2301,7 @@\n \t   3 \"cris_extend_operator\"\n \t   [(match_operand:QI 2 \"nonimmediate_operand\" \"r,Q>,m,!To\")])\n \t  (match_operand:SI 1 \"register_operand\" \"0,0,0,r\")]))]\n-  \"(GET_CODE (operands[3]) != UMIN || GET_CODE (operands[4]) == ZERO_EXTEND)\n-   && GET_MODE_SIZE (GET_MODE (operands[0])) <= UNITS_PER_WORD\n+  \"(GET_CODE (operands[4]) != UMIN || GET_CODE (operands[3]) == ZERO_EXTEND)\n    && operands[1] != frame_pointer_rtx\"\n   \"@\n    %x4%e3.%m3 %2,%0\n@@ -2332,8 +2320,7 @@\n \t   3 \"cris_extend_operator\"\n \t   [(match_operand:HI 2 \"nonimmediate_operand\" \"r,Q>,m,!To\")])\n \t  (match_operand:SI 1 \"register_operand\" \"0,0,0,r\")]))]\n-  \"(GET_CODE (operands[3]) != UMIN || GET_CODE (operands[4]) == ZERO_EXTEND)\n-   && GET_MODE_SIZE (GET_MODE (operands[0])) <= UNITS_PER_WORD\n+  \"(GET_CODE (operands[4]) != UMIN || GET_CODE (operands[3]) == ZERO_EXTEND)\n    && operands[1] != frame_pointer_rtx\"\n   \"@\n    %x4%e3.%m3 %2,%0"}]}