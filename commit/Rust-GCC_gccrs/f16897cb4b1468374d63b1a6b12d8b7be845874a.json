{"sha": "f16897cb4b1468374d63b1a6b12d8b7be845874a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE2ODk3Y2I0YjE0NjgzNzRkNjNiMWE2YjEyZDhiN2JlODQ1ODc0YQ==", "commit": {"author": {"name": "Austin Law", "email": "austinklaw@gmail.com", "date": "2020-11-22T19:26:48Z"}, "committer": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-11-22T19:28:58Z"}, "message": "H8 cc0 conversion\n\ngcc/\n\t* config/h8300/addsub.md: Turn existing patterns into\n\tdefine_insn_and_split style patterns where the splitter\n\tadds a clobber of the condition code register.  Drop \"cc\"\n\tattribute.  Add _clobber_flags patterns to match output of\n\tthe splitters.\n\t(add<mod>3_incdec): Remove pattern\n\t(adds/subs splitter): Only run before reload.\n\t* config/h8300/bitfield.md: Turn existing patterns into\n\tdefine_insn_and_split style patterns where the splitter\n\tadds a clobber of the condition code register.  Drop \"cc\"\n\tattribute.  Add _clobber_flags patterns to match output\n\tof the splitters.\n\t(cstoreqi4, cstorehi4, cstoresi4): Comment out\n\t(*bstzhireg, *cmpstz, *bstz, *bistz, *cmpcondset): Likewise\n\t(*condbset, *cmpcondbclr, *condbclr): Likewise.\n\t(*cmpcondbsetreg, *condbsetreg, *cmpcondbclrreg): Likewise.\n\t(*condbclrreg): Likewise.\n\t* config/h8300/combiner.md: Turn existing patterns into\n\tdefine_insn_and_split style patterns where the splitter\n\tadds a clobber of the condition code register.  Drop \"cc\"\n\tattribute.  Add _clobber_flags patterns to match output of\n\tthe splitters.  Add appropriate CC register clobbers to\n\texisting splitters.\n\t(*addsi3_and_r_1): Disable for now.\n\t(*addsi3_and_not_r_1, bit-test branches): Likewise.\n\t* config/h8300/divmod.md: Turn existing patterns into\n\tdefine_insn_and_split style patterns where the splitter\n\tadds a clobber of the condition code register.  Drop \"cc\"\n\tattribute.  Add _clobber_flags patterns to match output of\n\tthe splitters.\n\t* config/h8300/extensions.md: Turn existing patterns into\n\tdefine_insn_and_split style patterns where the splitter\n\tadds a clobber of the condition code register.  Drop \"cc\"\n\tattribute.  Add _clobber_flags patterns to match output of\n\tthe splitters.\n\t* config/h8300/genmova.sh: Drop \"cc\" attribute from patterns.\n\t* config/h8300/mova.md: Drop \"cc\" attribute from patterns.\n\t* config/h8300/h8300-modes.def: Add CCZN and CCZNV modes.\n\t* config/h8300/h8300-protos.h (output_plussi): Update prototype.\n\t(compute_plussi_length): Likewise.\n\t(h8300_select_cc_mode): Add prototype.\n\t(compute_a_shift_cc): Remove prototype\n\t(cmpute_logical_op_cc): Likewise.\n\t* config/h8300/h8300.c (names_big): Add \"cc\" register.\n\t(names_extended, names_upper_extended): Likewise.\n\t(h8300_emit_stack_adjustment): Be more selective about setting\n\tRTX_FRAME_RELATED_P.\n\t(h8300_print_operand): Handle CCZN mode\n\t(h8300_select_cc_mode): New function.\n\t(notice_update_cc): if-0 out.  Only kept for reference purposes.\n\t(h8300_expand_store): Likewise.\n\t(h8300_binary_length): Handle new insn forms.\n\t(output_plussi): Add argument for NEED_FLAGS and handle that case.\n\t(compute_plussi_length): Likewise.\n\t(compute_logical_op_cc): Return integer.\n\t(TARGET_FLAGS_REGNUM): Define.\n\t* config/h8300/h8300.h (FIRST_PSEUDO_REGISTER): Bump for cc register.\n\t(FIXED_REGISTERS, CALL_USED_REGISTERS): Handle cc register.\n\t(REG_ALLOC_ORDER, REGISTER_NAMES): Likewise.\n\t(SELECT_CC_MODE): Define.\n\t* config/h8300/h8300.md: Add CC_REG.\n\tDo not include peepholes.md for now.\n\t* config/h8300/jumpcall.md (cbranchqi4): Consolidate into\n\tcbranch<mode>4.\n\t(cbranchhi4, cbranchsi4): Likewise.\n\t(cbranch<mode>4): New expander.\n\t(branch): New define_insn_and_split for use before reload.\n\t(branch_1, branch_1_false): New patterns to match splitter output.\n\tRemove code to manage cc_status.flags.\n\t* config/h8300/logical.md: Turn existing patterns into\n\tdefine_insn_and_split style patterns where the splitter\n\tadds a clobber of the condition code register.  Drop \"cc\"\n\tattribute.  Add _clobber_flags patterns to match output of\n\tthe splitters.  Move various peepholes into this file.\n\t* config/h8300/movepush.md: Turn existing patterns into\n\tdefine_insn_and_split style patterns where the splitter\n\tadds a clobber of the condition code register.  Drop \"cc\"\n\tattribute.  Add _clobber_flags patterns to match output of\n\tthe splitters.\n\t* config/h8300/multiply.md: Turn existing patterns into\n\tdefine_insn_and_split style patterns where the splitter\n\tadds a clobber of the condition code register.  Drop \"cc\"\n\tattribute.  Add _clobber_flags patterns to match output of\n\tthe splitters.\n\t* config/h8300/other.md: Turn existing patterns into\n\tdefine_insn_and_split style patterns where the splitter\n\tadds a clobber of the condition code register.  Drop \"cc\"\n\tattribute.  Add _clobber_flags patterns to match output of\n\tthe splitters.\n\t* config/h8300/peepholes.md: Remove peepholes that were moved\n\telsewhere.\n\t* config/h8300/predicates.md (simple_memory_operand): New.\n\t* config/h8300/proepi.md: Drop \"cc\" attribute setting.\n\t* config/h8300/shiftrotate.md: Turn existing patterns into\n\tdefine_insn_and_split style patterns where the splitter\n\tadds a clobber of the condition code register.  Drop \"cc\"\n\tattribute.  Add _clobber_flags patterns to match output of\n\tthe splitters.\n\t* config/h8300/testcompare.md: Turn existing patterns into\n\tdefine_insn_and_split style patterns where the splitter\n\tadds a clobber of the condition code register.  Drop \"cc\"\n\tattribute.  Add _clobber_flags patterns to match output of\n\tthe splitters.  Disable various patterns for now.\n\tMove some peepholes that were previously in peepholes.md here.", "tree": {"sha": "bfbff9b65e86ef22c0c3449379eee643bf2edbb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfbff9b65e86ef22c0c3449379eee643bf2edbb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f16897cb4b1468374d63b1a6b12d8b7be845874a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f16897cb4b1468374d63b1a6b12d8b7be845874a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f16897cb4b1468374d63b1a6b12d8b7be845874a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f16897cb4b1468374d63b1a6b12d8b7be845874a/comments", "author": null, "committer": null, "parents": [{"sha": "23045f8b062e20672f5170fc66532de7a5d9a1d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23045f8b062e20672f5170fc66532de7a5d9a1d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23045f8b062e20672f5170fc66532de7a5d9a1d6"}], "stats": {"total": 4006, "additions": 2834, "deletions": 1172}, "files": [{"sha": "d0877c008bf05203646a99c21c176128716c34b8", "filename": "gcc/config/h8300/addsub.md", "status": "modified", "additions": 105, "deletions": 47, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Faddsub.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Faddsub.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Faddsub.md?ref=f16897cb4b1468374d63b1a6b12d8b7be845874a", "patch": "@@ -9,83 +9,106 @@\n   \"\"\n   \"\")\n \n-(define_insn \"*addqi3\"\n+(define_insn_and_split \"*addqi3\"\n   [(set (match_operand:QI 0 \"h8300_dst_operand\" \"=rQ\")\n \t(plus:QI (match_operand:QI 1 \"h8300_dst_operand\" \"%0\")\n \t\t (match_operand:QI 2 \"h8300_src_operand\" \"rQi\")))]\n   \"h8300_operands_match_p (operands)\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (plus:QI (match_dup 1) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*addqi3_clobber_flags\"\n+  [(set (match_operand:QI 0 \"h8300_dst_operand\" \"=rQ\")\n+\t(plus:QI (match_operand:QI 1 \"h8300_dst_operand\" \"%0\")\n+\t\t (match_operand:QI 2 \"h8300_src_operand\" \"rQi\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"reload_completed && h8300_operands_match_p (operands)\"\n   \"add.b\t%X2,%X0\"\n-  [(set_attr \"length_table\" \"add\")\n-   (set_attr \"cc\" \"set_zn\")])\n+  [(set_attr \"length_table\" \"add\")])\n \n-(define_insn \"*addhi3_h8300hs\"\n+(define_insn_and_split \"*addhi\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r,r,r\")\n \t(plus:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0,0,0\")\n \t\t (match_operand:HI 2 \"h8300_src_operand\" \"L,N,J,n,r\")))]\n   \"!TARGET_H8300SX\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (plus:HI (match_dup 1) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*addhi3_clobber_flags\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r,r,r\")\n+\t(plus:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0,0,0\")\n+\t\t (match_operand:HI 2 \"h8300_src_operand\" \"L,N,J,n,r\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"reload_completed && !TARGET_H8300SX\"\n   \"@\n    adds\t%2,%S0\n    subs\t%G2,%S0\n    add.b\t%t2,%t0\n    add.w\t%T2,%T0\n    add.w\t%T2,%T0\"\n-  [(set_attr \"length\" \"2,2,2,4,2\")\n-   (set_attr \"cc\" \"none_0hit,none_0hit,clobber,set_zn,set_zn\")])\n-\n-(define_insn \"*add<mode>3_incdec\"\n-  [(set (match_operand:HSI 0 \"register_operand\" \"=r,r\")\n-\t(unspec:HSI [(match_operand:HSI 1 \"register_operand\" \"0,0\")\n-\t\t     (match_operand:HSI 2 \"incdec_operand\" \"M,O\")]\n-\t\t    UNSPEC_INCDEC))]\n-  \"\"\n-  {\n-    if (which_alternative == 0)\n-      return <MODE>mode == HImode ? \"inc.w\\t%2,%T0\" : \"inc.l\\t%2,%S0\";\n-    else if (which_alternative == 1)\n-      return <MODE>mode == HImode ? \"dec.w\\t%G2,%T0\" : \"dec.l\\t%G2,%S0\";\n-    gcc_unreachable ();\n-   }\n-  [(set_attr \"length\" \"2,2\")\n-   (set_attr \"cc\" \"set_zn,set_zn\")])\n+  [(set_attr \"length\" \"2,2,2,4,2\")])\n \n-(define_insn \"*addhi3_h8sx\"\n+(define_insn_and_split \"*addhi3_h8sx\"\n   [(set (match_operand:HI 0 \"h8300_dst_operand\" \"=rU,rU,r,rQ\")\n \t(plus:HI (match_operand:HI 1 \"h8300_dst_operand\" \"%0,0,0,0\")\n \t\t (match_operand:HI 2 \"h8300_src_operand\" \"P3>X,P3<X,J,rQi\")))]\n   \"TARGET_H8300SX && h8300_operands_match_p (operands)\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (plus:HI (match_dup 1) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*addhi3_h8sx_clobber_flags\"\n+  [(set (match_operand:HI 0 \"h8300_dst_operand\" \"=rU,rU,r,rQ\")\n+\t(plus:HI (match_operand:HI 1 \"h8300_dst_operand\" \"%0,0,0,0\")\n+\t\t (match_operand:HI 2 \"h8300_src_operand\" \"P3>X,P3<X,J,rQi\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"reload_completed && TARGET_H8300SX && h8300_operands_match_p (operands)\"\n   \"@\n    add.w\t%T2:3,%T0\n    sub.w\t%G2:3,%T0\n    add.b\t%t2,%t0\n    add.w\t%T2,%T0\"\n   [(set_attr \"length_table\" \"short_immediate,short_immediate,*,add\")\n-   (set_attr \"length\" \"*,*,2,*\")\n-   (set_attr \"cc\" \"set_zn\")])\n+   (set_attr \"length\" \"*,*,2,*\")])\n \n (define_split\n   [(set (match_operand:HSI 0 \"register_operand\" \"\")\n \t(plus:HSI (match_dup 0)\n \t\t (match_operand:HSI 1 \"two_insn_adds_subs_operand\" \"\")))]\n-  \"\"\n+  \"!reload_completed\"\n   [(const_int 0)]\n   {\n     split_adds_subs (<MODE>mode, operands);\n     DONE;\n   })\n \n \n-(define_insn \"*addsi_h8300hs\"\n+(define_insn_and_split \"*addsi\"\n   [(set (match_operand:SI 0 \"h8300_dst_operand\" \"=rQ,rQ\")\n \t(plus:SI (match_operand:SI 1 \"h8300_dst_operand\" \"%0,0\")\n \t\t (match_operand:SI 2 \"h8300_src_operand\" \"i,rQ\")))]\n   \"h8300_operands_match_p (operands)\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (plus:SI (match_dup 1) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*addsi_clobber_flags\"\n+  [(set (match_operand:SI 0 \"h8300_dst_operand\" \"=rQ,rQ\")\n+\t(plus:SI (match_operand:SI 1 \"h8300_dst_operand\" \"%0,0\")\n+\t\t (match_operand:SI 2 \"h8300_src_operand\" \"i,rQ\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"reload_completed && h8300_operands_match_p (operands)\"\n {\n-  return output_plussi (operands);\n+  return output_plussi (operands, false);\n }\n   [(set (attr \"length\")\n-\t(symbol_ref \"compute_plussi_length (operands)\"))\n-   (set (attr \"cc\")\n-\t(symbol_ref \"compute_plussi_cc (operands)\"))])\n+\t(symbol_ref \"compute_plussi_length (operands, false)\"))])\n \n ;; ----------------------------------------------------------------------\n ;; SUBTRACT INSTRUCTIONS\n@@ -95,33 +118,51 @@\n   [(set (match_operand:QHSI 0 \"register_operand\" \"\")\n \t(minus:QHSI (match_operand:QHSI 1 \"register_operand\" \"\")\n \t\t    (match_operand:QHSI 2 \"h8300_src_operand\" \"\")))]\n-  \"\"\n-  {\n-  })\n+  \"\")\n \n-(define_insn \"*subqi3\"\n+(define_insn_and_split \"*subqi3\"\n   [(set (match_operand:QI 0 \"h8300_dst_operand\" \"=rQ\")\n \t(minus:QI (match_operand:QI 1 \"h8300_dst_operand\" \"0\")\n \t\t  (match_operand:QI 2 \"h8300_dst_operand\" \"rQ\")))]\n   \"h8300_operands_match_p (operands)\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (minus:QI (match_dup 1) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*subqi3_clobber_flags\"\n+  [(set (match_operand:QI 0 \"h8300_dst_operand\" \"=rQ\")\n+\t(minus:QI (match_operand:QI 1 \"h8300_dst_operand\" \"0\")\n+\t\t  (match_operand:QI 2 \"h8300_dst_operand\" \"rQ\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"reload_completed && h8300_operands_match_p (operands)\"\n   \"sub.b\t%X2,%X0\"\n-  [(set_attr \"length_table\" \"add\")\n-   (set_attr \"cc\" \"set_zn\")])\n+  [(set_attr \"length_table\" \"add\")])\n \n-(define_insn \"*sub<mode>3_h8300hs\"\n+(define_insn_and_split \"*sub<mode>3\"\n   [(set (match_operand:HSI 0 \"h8300_dst_operand\" \"=rQ,rQ\")\n \t(minus:HSI (match_operand:HSI 1 \"h8300_dst_operand\" \"0,0\")\n \t\t   (match_operand:HSI 2 \"h8300_src_operand\" \"rQ,i\")))]\n   \"h8300_operands_match_p (operands)\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (minus:HSI (match_dup 1) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*sub<mode>3_clobber_flags\"\n+  [(set (match_operand:HSI 0 \"h8300_dst_operand\" \"=rQ,rQ\")\n+\t(minus:HSI (match_operand:HSI 1 \"h8300_dst_operand\" \"0,0\")\n+\t\t   (match_operand:HSI 2 \"h8300_src_operand\" \"rQ,i\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"reload_completed && h8300_operands_match_p (operands)\"\n   { \n     if (<MODE>mode == HImode)\n       return \"sub.w\t%T2,%T0\";\n     else if (<MODE>mode == SImode)\n       return \"sub.l\t%S2,%S0\";\n     gcc_unreachable ();\n   }\n-  [(set_attr \"length_table\" \"add\")\n-   (set_attr \"cc\" \"set_zn\")])\n+  [(set_attr \"length_table\" \"add\")])\n \n ;; ----------------------------------------------------------------------\n ;; NEGATION INSTRUCTIONS\n@@ -133,10 +174,20 @@\n   \"\"\n   \"\")\n \n-(define_insn \"*neg<mode>2\"\n+(define_insn_and_split \"*neg<mode>2\"\n   [(set (match_operand:QHSI 0 \"h8300_dst_operand\" \"=rQ\")\n \t(neg:QHSI (match_operand:QHSI 1 \"h8300_dst_operand\" \"0\")))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (neg:QHSI (match_dup 1)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*neg<mode>2_clobber_flags\"\n+  [(set (match_operand:QHSI 0 \"h8300_dst_operand\" \"=rQ\")\n+\t(neg:QHSI (match_operand:QHSI 1 \"h8300_dst_operand\" \"0\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"reload_completed\"\n   {\n     if (<MODE>mode == E_QImode)\n       return \"neg\t%X0\";\n@@ -146,14 +197,21 @@\n       return \"neg.l\t%S0\";\n     gcc_unreachable ();\n   }\n-  [(set_attr \"length_table\" \"unary\")\n-   (set_attr \"cc\" \"set_zn\")])\n+  [(set_attr \"length_table\" \"unary\")])\n \n-\n-(define_insn \"*negsf2_h8300hs\"\n+(define_insn_and_split \"*negsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=r\")\n-       (neg:SF (match_operand:SF 1 \"register_operand\" \"0\")))]\n+\t(neg:SF (match_operand:SF 1 \"register_operand\" \"0\")))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (neg:SF (match_dup 1)))\n+\t      (clobber (reg:CC CC_REG))])])\n+  \n+(define_insn \"*negsf2_clobber_flags\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=r\")\n+       (neg:SF (match_operand:SF 1 \"register_operand\" \"0\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"reload_completed\"\n   \"xor.w\\\\t#32768,%e0\"\n   [(set_attr \"length\" \"4\")])\n-"}, {"sha": "8fa6fde433a2003e27356ce7cab7617fb88c9233", "filename": "gcc/config/h8300/bitfield.md", "status": "modified", "additions": 333, "deletions": 229, "changes": 562, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fbitfield.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fbitfield.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fbitfield.md?ref=f16897cb4b1468374d63b1a6b12d8b7be845874a", "patch": "@@ -15,27 +15,57 @@\n ;; Inverted loads with a 16bit destination.\n ;;\n \n-(define_insn \"\"\n+(define_insn_and_split \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=&r\")\n \t(zero_extract:HI (xor:HI (match_operand:HI 1 \"register_operand\" \"r\")\n \t\t\t\t (match_operand:HI 3 \"const_int_operand\" \"n\"))\n \t\t\t (const_int 1)\n \t\t\t (match_operand:HI 2 \"const_int_operand\" \"n\")))]\n   \"(TARGET_H8300SX)\n     && (1 << INTVAL (operands[2])) == INTVAL (operands[3])\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (zero_extract:HI (xor:HI (match_dup 1) (match_dup 3))\n+\t\t\t\t    (const_int 1)\n+\t\t\t\t    (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=&r\")\n+\t(zero_extract:HI (xor:HI (match_operand:HI 1 \"register_operand\" \"r\")\n+\t\t\t\t (match_operand:HI 3 \"const_int_operand\" \"n\"))\n+\t\t\t (const_int 1)\n+\t\t\t (match_operand:HI 2 \"const_int_operand\" \"n\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"(TARGET_H8300SX)\n+    && (1 << INTVAL (operands[2])) == INTVAL (operands[3])\"\n   \"sub.w\t%0,%0\\;bild\t%Z2,%Y1\\;bst\t#0,%X0\"\n   [(set_attr \"length\" \"8\")])\n \n ;;\n ;; Normal loads with a 32bit destination.\n ;;\n \n-(define_insn \"*extzv_1_r_h8300hs\"\n+(define_insn_and_split \"*extzv_1_r\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"?0,r\")\n \t\t\t (const_int 1)\n \t\t\t (match_operand 2 \"const_int_operand\" \"n,n\")))]\n   \"INTVAL (operands[2]) < 16\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (zero_extract:SI (match_dup 1) (const_int 1) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*extzv_1_r_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"?0,r\")\n+\t\t\t (const_int 1)\n+\t\t\t (match_operand 2 \"const_int_operand\" \"n,n\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"INTVAL (operands[2]) < 16\"\n {\n   return output_simode_bld (0, operands);\n }\n@@ -46,14 +76,31 @@\n ;; Inverted loads with a 32bit destination.\n ;;\n \n-(define_insn \"*extzv_1_r_inv_h8300hs\"\n+(define_insn_and_split \"*extzv_1_r_inv\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(zero_extract:SI (xor:SI (match_operand:SI 1 \"register_operand\" \"?0,r\")\n \t\t\t\t (match_operand 3 \"const_int_operand\" \"n,n\"))\n \t\t\t (const_int 1)\n \t\t\t (match_operand 2 \"const_int_operand\" \"n,n\")))]\n   \"INTVAL (operands[2]) < 16\n     && (1 << INTVAL (operands[2])) == INTVAL (operands[3])\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (zero_extract:SI (xor:SI (match_dup 1) (match_dup 3))\n+\t\t\t\t    (const_int 1)\n+\t\t\t\t    (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*extzv_1_r_inv_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(zero_extract:SI (xor:SI (match_operand:SI 1 \"register_operand\" \"?0,r\")\n+\t\t\t\t (match_operand 3 \"const_int_operand\" \"n,n\"))\n+\t\t\t (const_int 1)\n+\t\t\t (match_operand 2 \"const_int_operand\" \"n,n\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"INTVAL (operands[2]) < 16\n+    && (1 << INTVAL (operands[2])) == INTVAL (operands[3])\"\n {\n   return output_simode_bld (1, operands);\n }\n@@ -107,12 +154,25 @@\n     FAIL;\n   })\n \n-(define_insn \"\"\n+(define_insn_and_split \"\"\n   [(set (zero_extract:HI (match_operand:HI 0 \"register_operand\" \"+r\")\n \t\t\t (const_int 1)\n \t\t\t (match_operand:HI 1 \"immediate_operand\" \"n\"))\n \t(match_operand:HI 2 \"register_operand\" \"r\"))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (zero_extract:HI (match_dup 0) (const_int 1) (match_dup 1))\n+\t\t   (match_dup 2))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"\"\n+  [(set (zero_extract:HI (match_operand:HI 0 \"register_operand\" \"+r\")\n+\t\t\t (const_int 1)\n+\t\t\t (match_operand:HI 1 \"immediate_operand\" \"n\"))\n+\t(match_operand:HI 2 \"register_operand\" \"r\"))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"bld\t#0,%R2\\;bst\t%Z1,%Y0 ; i1\"\n   [(set_attr \"length\" \"4\")])\n \n@@ -164,18 +224,36 @@\n \n ;; BAND, BOR, and BXOR patterns\n \n-(define_insn \"\"\n+(define_insn_and_split \"\"\n   [(set (match_operand:HI 0 \"bit_operand\" \"=Ur\")\n \t(match_operator:HI 4 \"bit_operator\"\n \t [(zero_extract:HI (match_operand:HI 1 \"register_operand\" \"r\")\n \t\t\t   (const_int 1)\n \t\t\t   (match_operand:HI 2 \"immediate_operand\" \"n\"))\n \t  (match_operand:HI 3 \"bit_operand\" \"0\")]))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (match_op_dup 4 [(zero_extract:HI (match_dup 1)\n+\t\t\t\t\t\t     (const_int 1)\n+\t\t\t\t\t\t     (match_dup 2))\n+\t\t\t\t    (match_dup 3)]))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"\"\n+  [(set (match_operand:HI 0 \"bit_operand\" \"=Ur\")\n+\t(match_operator:HI 4 \"bit_operator\"\n+\t [(zero_extract:HI (match_operand:HI 1 \"register_operand\" \"r\")\n+\t\t\t   (const_int 1)\n+\t\t\t   (match_operand:HI 2 \"immediate_operand\" \"n\"))\n+\t  (match_operand:HI 3 \"bit_operand\" \"0\")]))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"bld\t%Z2,%Y1\\;b%c4\t#0,%R0\\;bst\t#0,%R0; bl1\"\n   [(set_attr \"length\" \"6\")])\n \n-(define_insn \"\"\n+(define_insn_and_split \"\"\n   [(set (match_operand:HI 0 \"bit_operand\" \"=Ur\")\n \t(match_operator:HI 5 \"bit_operator\"\n \t [(zero_extract:HI (match_operand:HI 1 \"register_operand\" \"r\")\n@@ -185,15 +263,50 @@\n \t\t\t   (const_int 1)\n \t\t\t   (match_operand:HI 4 \"immediate_operand\" \"n\"))]))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (match_op_dup 5 [(zero_extract:HI (match_dup 1)\n+\t\t\t\t\t\t     (const_int 1)\n+\t\t\t\t\t\t     (match_dup 2))\n+\t\t\t\t    (zero_extract:HI (match_dup 3)\n+\t\t\t\t\t\t     (const_int 1)\n+\t\t\t\t\t\t     (match_dup 4))]))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"\"\n+  [(set (match_operand:HI 0 \"bit_operand\" \"=Ur\")\n+\t(match_operator:HI 5 \"bit_operator\"\n+\t [(zero_extract:HI (match_operand:HI 1 \"register_operand\" \"r\")\n+\t\t\t   (const_int 1)\n+\t\t\t   (match_operand:HI 2 \"immediate_operand\" \"n\"))\n+\t  (zero_extract:HI (match_operand:HI 3 \"register_operand\" \"r\")\n+\t\t\t   (const_int 1)\n+\t\t\t   (match_operand:HI 4 \"immediate_operand\" \"n\"))]))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"bld\t%Z2,%Y1\\;b%c5\t%Z4,%Y3\\;bst\t#0,%R0; bl3\"\n   [(set_attr \"length\" \"6\")])\n \n-(define_insn \"bfld\"\n+(define_insn_and_split \"bfld\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n \t(zero_extract:QI (match_operand:QI 1 \"bit_memory_operand\" \"WU\")\n \t\t\t (match_operand:QI 2 \"immediate_operand\" \"n\")\n \t\t\t (match_operand:QI 3 \"immediate_operand\" \"n\")))]\n   \"TARGET_H8300SX && INTVAL (operands[2]) + INTVAL (operands[3]) <= 8\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (zero_extract:QI (match_dup 1) (match_dup 2) (match_dup 3)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"bfld_clobber_flags\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n+\t(zero_extract:QI (match_operand:QI 1 \"bit_memory_operand\" \"WU\")\n+\t\t\t (match_operand:QI 2 \"immediate_operand\" \"n\")\n+\t\t\t (match_operand:QI 3 \"immediate_operand\" \"n\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_H8300SX && INTVAL (operands[2]) + INTVAL (operands[3]) <= 8\"\n {\n   operands[2] = GEN_INT ((1 << (INTVAL (operands[2]) + INTVAL (operands[3])))\n \t\t\t - (1 << INTVAL (operands[3])));\n@@ -202,12 +315,25 @@\n   [(set_attr \"cc\" \"none_0hit\")\n    (set_attr \"length_table\" \"bitfield\")])\n \n-(define_insn \"bfst\"\n+(define_insn_and_split \"bfst\"\n   [(set (zero_extract:QI (match_operand:QI 0 \"bit_memory_operand\" \"+WU\")\n \t\t\t (match_operand:QI 2 \"immediate_operand\" \"n\")\n \t\t\t (match_operand:QI 3 \"immediate_operand\" \"n\"))\n \t(match_operand:QI 1 \"register_operand\" \"r\"))]\n   \"TARGET_H8300SX && INTVAL (operands[2]) + INTVAL (operands[3]) <= 8\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (zero_extract:QI (match_dup 0) (match_dup 2) (match_dup 3))\n+\t\t   (match_dup 1))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"bfst_clobber_flags\"\n+  [(set (zero_extract:QI (match_operand:QI 0 \"bit_memory_operand\" \"+WU\")\n+\t\t\t (match_operand:QI 2 \"immediate_operand\" \"n\")\n+\t\t\t (match_operand:QI 3 \"immediate_operand\" \"n\"))\n+\t(match_operand:QI 1 \"register_operand\" \"r\"))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_H8300SX && INTVAL (operands[2]) + INTVAL (operands[3]) <= 8\"\n {\n   operands[2] = GEN_INT ((1 << (INTVAL (operands[2]) + INTVAL (operands[3])))\n \t\t\t - (1 << INTVAL (operands[3])));\n@@ -216,225 +342,203 @@\n   [(set_attr \"cc\" \"none_0hit\")\n    (set_attr \"length_table\" \"bitfield\")])\n \n-(define_expand \"cstoreqi4\"\n-  [(use (match_operator 1 \"eqne_operator\"\n-         [(match_operand:QI 2 \"h8300_dst_operand\" \"\")\n-          (match_operand:QI 3 \"h8300_src_operand\" \"\")]))\n-   (clobber (match_operand:HI 0 \"register_operand\"))]\n-  \"TARGET_H8300SX\"\n-  {\n-    h8300_expand_store (operands);\n-    DONE;\n-  })\n-\n-(define_expand \"cstorehi4\"\n-  [(use (match_operator 1 \"eqne_operator\"\n-         [(match_operand:HI 2 \"h8300_dst_operand\" \"\")\n-          (match_operand:HI 3 \"h8300_src_operand\" \"\")]))\n-   (clobber (match_operand:HI 0 \"register_operand\"))]\n-  \"TARGET_H8300SX\"\n-  {\n-    h8300_expand_store (operands);\n-    DONE;\n-  })\n-\n-(define_expand \"cstoresi4\"\n-  [(use (match_operator 1 \"eqne_operator\"\n-         [(match_operand:SI 2 \"h8300_dst_operand\" \"\")\n-          (match_operand:SI 3 \"h8300_src_operand\" \"\")]))\n-   (clobber (match_operand:HI 0 \"register_operand\"))]\n-  \"TARGET_H8300SX\"\n-  {\n-    h8300_expand_store (operands);\n-    DONE;\n-  })\n-\n-(define_insn \"*bstzhireg\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(match_operator:HI 1 \"eqne_operator\" [(cc0) (const_int 0)]))]\n-  \"TARGET_H8300SX\"\n-  \"mulu.w\t#0,%T0\\;b%k1\t.Lh8BR%=\\;inc.w\t#1,%T0\\\\n.Lh8BR%=:\"\n-  [(set_attr \"cc\" \"clobber\")])\n-\n-(define_insn_and_split \"*cmpstz\"\n-  [(set (zero_extract:QI (match_operand:QI 0 \"bit_memory_operand\" \"+WU,WU\")\n-\t\t\t (const_int 1)\n-\t\t\t (match_operand:QI 1 \"immediate_operand\" \"n,n\"))\n-\t(match_operator:QI 2 \"eqne_operator\"\n-\t [(match_operand 3 \"h8300_dst_operand\" \"r,rQ\")\n-\t  (match_operand 4 \"h8300_src_operand\" \"I,rQi\")]))]\n-  \"TARGET_H8300SX\n-   && (GET_MODE (operands[3]) == GET_MODE (operands[4])\n-       || GET_CODE (operands[4]) == CONST_INT)\n-   && GET_MODE_CLASS (GET_MODE (operands[3])) == MODE_INT\n-   && GET_MODE_SIZE (GET_MODE (operands[3])) <= 4\"\n-  \"#\"\n-  \"reload_completed\"\n-  [(set (cc0) (match_dup 5))\n-   (set (zero_extract:QI (match_dup 0) (const_int 1) (match_dup 1))\n-\t(match_op_dup:QI 2 [(cc0) (const_int 0)]))]\n-  {\n-    operands[5] = gen_rtx_COMPARE (VOIDmode, operands[3], operands[4]);\n-  }\n-  [(set_attr \"cc\" \"set_znv,compare\")])\n-\n-(define_insn \"*bstz\"\n-  [(set (zero_extract:QI (match_operand:QI 0 \"bit_memory_operand\" \"+WU\")\n-\t\t\t (const_int 1)\n-\t\t\t (match_operand:QI 1 \"immediate_operand\" \"n\"))\n-\t(eq:QI (cc0) (const_int 0)))]\n-  \"TARGET_H8300SX && reload_completed\"\n-  \"bstz\t%1,%0\"\n-  [(set_attr \"cc\" \"none_0hit\")\n-   (set_attr \"length_table\" \"unary\")])\n-\n-(define_insn \"*bistz\"\n-  [(set (zero_extract:QI (match_operand:QI 0 \"bit_memory_operand\" \"+WU\")\n-\t\t\t (const_int 1)\n-\t\t\t (match_operand:QI 1 \"immediate_operand\" \"n\"))\n-\t(ne:QI (cc0) (const_int 0)))]\n-  \"TARGET_H8300SX && reload_completed\"\n-  \"bistz\t%1,%0\"\n-  [(set_attr \"cc\" \"none_0hit\")\n-   (set_attr \"length_table\" \"unary\")])\n-\n-(define_insn_and_split \"*cmpcondbset\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=WU,WU\")\n-\t(if_then_else:QI (match_operator 1 \"eqne_operator\"\n-\t\t\t  [(match_operand 2 \"h8300_dst_operand\" \"r,rQ\")\n-\t\t\t   (match_operand 3 \"h8300_src_operand\" \"I,rQi\")])\n-\t\t\t (ior:QI (match_operand:QI 4 \"bit_memory_operand\" \"0,0\")\n-\t\t\t\t (match_operand:QI 5 \"single_one_operand\" \"n,n\"))\n-\t\t\t (match_dup 4)))]\n-  \"TARGET_H8300SX\"\n-  \"#\"\n-  \"reload_completed\"\n-  [(set (cc0) (match_dup 6))\n-   (set (match_dup 0)\n-\t(if_then_else:QI (match_op_dup 1 [(cc0) (const_int 0)])\n-\t\t\t (ior:QI (match_dup 4) (match_dup 5))\n-\t\t\t (match_dup 4)))]\n-  {\n-    operands[6] = gen_rtx_COMPARE (VOIDmode, operands[2], operands[3]);\n-  }\n-  [(set_attr \"cc\" \"set_znv,compare\")])\n-\n-(define_insn \"*condbset\"\n-  [(set (match_operand:QI 0 \"bit_memory_operand\" \"=WU\")\n-\t(if_then_else:QI (match_operator:QI 2 \"eqne_operator\"\n-\t\t\t  [(cc0) (const_int 0)])\n-\t\t\t (ior:QI (match_operand:QI 3 \"bit_memory_operand\" \"0\")\n-\t\t\t\t (match_operand:QI 1 \"single_one_operand\" \"n\"))\n-\t\t\t (match_dup 3)))]\n-  \"TARGET_H8300SX && reload_completed\"\n-  \"bset/%j2\\t%V1,%0\"\n-  [(set_attr \"cc\" \"none_0hit\")\n-   (set_attr \"length_table\" \"logicb\")])\n-\n-(define_insn_and_split \"*cmpcondbclr\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=WU,WU\")\n-\t(if_then_else:QI (match_operator 1 \"eqne_operator\"\n-\t\t\t  [(match_operand 2 \"h8300_dst_operand\" \"r,rQ\")\n-\t\t\t   (match_operand 3 \"h8300_src_operand\" \"I,rQi\")])\n-\t\t\t (and:QI (match_operand:QI 4 \"bit_memory_operand\" \"0,0\")\n-\t\t\t\t (match_operand:QI 5 \"single_zero_operand\" \"n,n\"))\n-\t\t\t (match_dup 4)))]\n-  \"TARGET_H8300SX\"\n-  \"#\"\n-  \"reload_completed\"\n-  [(set (cc0) (match_dup 6))\n-   (set (match_dup 0)\n-\t(if_then_else:QI (match_op_dup 1 [(cc0) (const_int 0)])\n-\t\t\t (and:QI (match_dup 4) (match_dup 5))\n-\t\t\t (match_dup 4)))]\n-  {\n-    operands[6] = gen_rtx_COMPARE (VOIDmode, operands[2], operands[3]);\n-  }\n-  [(set_attr \"cc\" \"set_znv,compare\")])\n-\n-(define_insn \"*condbclr\"\n-  [(set (match_operand:QI 0 \"bit_memory_operand\" \"=WU\")\n-\t(if_then_else:QI (match_operator:QI 2 \"eqne_operator\"\n-\t\t\t  [(cc0) (const_int 0)])\n-\t\t\t (and:QI (match_operand:QI 3 \"bit_memory_operand\" \"0\")\n-\t\t\t\t (match_operand:QI 1 \"single_zero_operand\" \"n\"))\n-\t\t\t (match_dup 3)))]\n-  \"TARGET_H8300SX && reload_completed\"\n-  \"bclr/%j2\\t%W1,%0\"\n-  [(set_attr \"cc\" \"none_0hit\")\n-   (set_attr \"length_table\" \"logicb\")])\n-\n-(define_insn_and_split \"*cmpcondbsetreg\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=WU,WU\")\n-\t(if_then_else:QI (match_operator 1 \"eqne_operator\"\n-\t\t\t  [(match_operand 2 \"h8300_dst_operand\" \"r,rQ\")\n-\t\t\t   (match_operand 3 \"h8300_src_operand\" \"I,rQi\")])\n-\t\t\t (ior:QI (match_operand:QI 4 \"bit_memory_operand\" \"0,0\")\n-\t\t\t\t (ashift:QI (const_int 1)\n-\t\t\t\t\t    (match_operand:QI 5 \"register_operand\" \"r,r\")))\n-\t\t\t (match_dup 4)))]\n-  \"TARGET_H8300SX\"\n-  \"#\"\n-  \"reload_completed\"\n-  [(set (cc0) (match_dup 6))\n-   (set (match_dup 0)\n-\t(if_then_else:QI (match_op_dup 1 [(cc0) (const_int 0)])\n-\t\t\t (ior:QI (match_dup 4)\n-\t\t\t\t (ashift:QI (const_int 1)\n-\t\t\t\t\t    (match_operand:QI 5 \"register_operand\" \"r,r\")))\n-\t\t\t (match_dup 4)))]\n-  {\n-    operands[6] = gen_rtx_COMPARE (VOIDmode, operands[2], operands[3]);\n-  }\n-  [(set_attr \"cc\" \"set_znv,compare\")])\n-\n-(define_insn \"*condbsetreg\"\n-  [(set (match_operand:QI 0 \"bit_memory_operand\" \"=WU\")\n-\t(if_then_else:QI (match_operator:QI 2 \"eqne_operator\"\n-\t\t\t  [(cc0) (const_int 0)])\n-\t\t\t (ior:QI (match_operand:QI 3 \"bit_memory_operand\" \"0\")\n-\t\t\t\t (ashift:QI (const_int 1)\n-\t\t\t\t\t    (match_operand:QI 1 \"register_operand\" \"r\")))\n-\t\t\t (match_dup 3)))]\n-  \"TARGET_H8300SX && reload_completed\"\n-  \"bset/%j2\\t%R1,%0\"\n-  [(set_attr \"cc\" \"none_0hit\")\n-   (set_attr \"length_table\" \"logicb\")])\n-\n-(define_insn_and_split \"*cmpcondbclrreg\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=WU,WU\")\n-\t(if_then_else:QI (match_operator 1 \"eqne_operator\"\n-\t\t\t  [(match_operand 2 \"h8300_dst_operand\" \"r,rQ\")\n-\t\t\t   (match_operand 3 \"h8300_src_operand\" \"I,rQi\")])\n-\t\t\t (and:QI (match_operand:QI 4 \"bit_memory_operand\" \"0,0\")\n-\t\t\t\t (ashift:QI (const_int 1)\n-\t\t\t\t\t    (match_operand:QI 5 \"register_operand\" \"r,r\")))\n-\t\t\t (match_dup 4)))]\n-  \"TARGET_H8300SX\"\n-  \"#\"\n-  \"reload_completed\"\n-  [(set (cc0) (match_dup 6))\n-   (set (match_dup 0)\n-\t(if_then_else:QI (match_op_dup 1 [(cc0) (const_int 0)])\n-\t\t\t (and:QI (match_dup 4)\n-\t\t\t\t (ashift:QI (const_int 1)\n-\t\t\t\t\t    (match_operand:QI 5 \"register_operand\" \"r,r\")))\n-\t\t\t (match_dup 4)))]\n-  {\n-    operands[6] = gen_rtx_COMPARE (VOIDmode, operands[2], operands[3]);\n-  }\n-  [(set_attr \"cc\" \"set_znv,compare\")])\n-\n-(define_insn \"*condbclrreg\"\n-  [(set (match_operand:QI 0 \"bit_memory_operand\" \"=WU\")\n-\t(if_then_else:QI (match_operator:QI 2 \"eqne_operator\"\n-\t\t\t  [(cc0) (const_int 0)])\n-\t\t\t (and:QI (match_operand:QI 3 \"bit_memory_operand\" \"0\")\n-\t\t\t\t (ashift:QI (const_int 1)\n-\t\t\t\t\t    (match_operand:QI 1 \"register_operand\" \"r\")))\n-\t\t\t (match_dup 3)))]\n-  \"TARGET_H8300SX && reload_completed\"\n-  \"bclr/%j2\\t%R1,%0\"\n-  [(set_attr \"cc\" \"none_0hit\")\n-   (set_attr \"length_table\" \"logicb\")])\n+;;(define_expand \"cstore<mode>4\"\n+;;  [(use (match_operator 1 \"eqne_operator\"\n+;;         [(match_operand:QHSI 2 \"h8300_dst_operand\" \"\")\n+;;          (match_operand:QHSI 3 \"h8300_src_operand\" \"\")]))\n+;;   (clobber (match_operand:QHSI 0 \"register_operand\"))]\n+;;  \"TARGET_H8300SX\"\n+;;  {\n+;;    h8300_expand_store (operands);\n+;;    DONE;\n+;;  })\n+\n+;;(define_insn \"*bstzhireg\"\n+;;  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+;;\t(match_operator:HI 1 \"eqne_operator\" [(cc0) (const_int 0)]))]\n+;;  \"TARGET_H8300SX\"\n+;;  \"mulu.w\t#0,%T0\\;b%k1\t.Lh8BR%=\\;inc.w\t#1,%T0\\\\n.Lh8BR%=:\"\n+;;  [(set_attr \"cc\" \"clobber\")])\n+\n+;;(define_insn_and_split \"*cmpstz\"\n+;;  [(set (zero_extract:QI (match_operand:QI 0 \"bit_memory_operand\" \"+WU,WU\")\n+;;\t\t\t (const_int 1)\n+;;\t\t\t (match_operand:QI 1 \"immediate_operand\" \"n,n\"))\n+;;\t(match_operator:QI 2 \"eqne_operator\"\n+;;\t [(match_operand 3 \"h8300_dst_operand\" \"r,rQ\")\n+;;\t  (match_operand 4 \"h8300_src_operand\" \"I,rQi\")]))]\n+;;  \"TARGET_H8300SX\n+;;   && (GET_MODE (operands[3]) == GET_MODE (operands[4])\n+;;       || GET_CODE (operands[4]) == CONST_INT)\n+;;   && GET_MODE_CLASS (GET_MODE (operands[3])) == MODE_INT\n+;;   && GET_MODE_SIZE (GET_MODE (operands[3])) <= 4\"\n+;;  \"#\"\n+;;  \"reload_completed\"\n+;;  [(set (cc0) (match_dup 5))\n+;;   (set (zero_extract:QI (match_dup 0) (const_int 1) (match_dup 1))\n+;;\t(match_op_dup:QI 2 [(cc0) (const_int 0)]))]\n+;;  {\n+;;    operands[5] = gen_rtx_COMPARE (VOIDmode, operands[3], operands[4]);\n+;;  }\n+;;  [(set_attr \"cc\" \"set_znv,compare\")])\n+\n+;;(define_insn \"*bstz\"\n+;;  [(set (zero_extract:QI (match_operand:QI 0 \"bit_memory_operand\" \"+WU\")\n+;;\t\t\t (const_int 1)\n+;;\t\t\t (match_operand:QI 1 \"immediate_operand\" \"n\"))\n+;;\t(eq:QI (cc0) (const_int 0)))]\n+;;  \"TARGET_H8300SX && reload_completed\"\n+;;  \"bstz\t%1,%0\"\n+;;  [(set_attr \"cc\" \"none_0hit\")\n+;;   (set_attr \"length_table\" \"unary\")])\n+\n+;;(define_insn \"*bistz\"\n+;;  [(set (zero_extract:QI (match_operand:QI 0 \"bit_memory_operand\" \"+WU\")\n+;;\t\t\t (const_int 1)\n+;;\t\t\t (match_operand:QI 1 \"immediate_operand\" \"n\"))\n+;;\t(ne:QI (cc0) (const_int 0)))]\n+;;  \"TARGET_H8300SX && reload_completed\"\n+;;  \"bistz\t%1,%0\"\n+;;  [(set_attr \"cc\" \"none_0hit\")\n+;;   (set_attr \"length_table\" \"unary\")])\n+\n+;;(define_insn_and_split \"*cmpcondbset\"\n+;;  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=WU,WU\")\n+;;\t(if_then_else:QI (match_operator 1 \"eqne_operator\"\n+;;\t\t\t  [(match_operand 2 \"h8300_dst_operand\" \"r,rQ\")\n+;;\t\t\t   (match_operand 3 \"h8300_src_operand\" \"I,rQi\")])\n+;;\t\t\t (ior:QI (match_operand:QI 4 \"bit_memory_operand\" \"0,0\")\n+;;\t\t\t\t (match_operand:QI 5 \"single_one_operand\" \"n,n\"))\n+;;\t\t\t (match_dup 4)))]\n+;;  \"TARGET_H8300SX\"\n+;;  \"#\"\n+;;  \"reload_completed\"\n+;;  [(set (cc0) (match_dup 6))\n+;;   (set (match_dup 0)\n+;;\t(if_then_else:QI (match_op_dup 1 [(cc0) (const_int 0)])\n+;;\t\t\t (ior:QI (match_dup 4) (match_dup 5))\n+;;\t\t\t (match_dup 4)))]\n+;;  {\n+;;    operands[6] = gen_rtx_COMPARE (VOIDmode, operands[2], operands[3]);\n+;;  }\n+;; [(set_attr \"cc\" \"set_znv,compare\")])\n+\n+;;(define_insn \"*condbset\"\n+;;  [(set (match_operand:QI 0 \"bit_memory_operand\" \"=WU\")\n+;;\t(if_then_else:QI (match_operator:QI 2 \"eqne_operator\"\n+;;\t\t\t  [(cc0) (const_int 0)])\n+;;\t\t\t (ior:QI (match_operand:QI 3 \"bit_memory_operand\" \"0\")\n+;;\t\t\t\t (match_operand:QI 1 \"single_one_operand\" \"n\"))\n+;;\t\t\t (match_dup 3)))]\n+;;  \"TARGET_H8300SX && reload_completed\"\n+;;  \"bset/%j2\\t%V1,%0\"\n+;;  [(set_attr \"cc\" \"none_0hit\")\n+;;   (set_attr \"length_table\" \"logicb\")])\n+\n+;;(define_insn_and_split \"*cmpcondbclr\"\n+;;  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=WU,WU\")\n+;;\t(if_then_else:QI (match_operator 1 \"eqne_operator\"\n+;;\t\t\t  [(match_operand 2 \"h8300_dst_operand\" \"r,rQ\")\n+;;\t\t\t   (match_operand 3 \"h8300_src_operand\" \"I,rQi\")])\n+;;\t\t\t (and:QI (match_operand:QI 4 \"bit_memory_operand\" \"0,0\")\n+;;\t\t\t\t (match_operand:QI 5 \"single_zero_operand\" \"n,n\"))\n+;;\t\t\t (match_dup 4)))]\n+;;  \"TARGET_H8300SX\"\n+;;  \"#\"\n+;;  \"reload_completed\"\n+;;  [(set (cc0) (match_dup 6))\n+;;   (set (match_dup 0)\n+;;\t(if_then_else:QI (match_op_dup 1 [(cc0) (const_int 0)])\n+;;\t\t\t (and:QI (match_dup 4) (match_dup 5))\n+;;\t\t\t (match_dup 4)))]\n+;;  {\n+;;    operands[6] = gen_rtx_COMPARE (VOIDmode, operands[2], operands[3]);\n+;;  }\n+;;  [(set_attr \"cc\" \"set_znv,compare\")])\n+\n+;;(define_insn \"*condbclr\"\n+;;  [(set (match_operand:QI 0 \"bit_memory_operand\" \"=WU\")\n+;;\t(if_then_else:QI (match_operator:QI 2 \"eqne_operator\"\n+;;\t\t\t  [(cc0) (const_int 0)])\n+;;\t\t\t (and:QI (match_operand:QI 3 \"bit_memory_operand\" \"0\")\n+;;\t\t\t\t (match_operand:QI 1 \"single_zero_operand\" \"n\"))\n+;;\t\t\t (match_dup 3)))]\n+;;  \"TARGET_H8300SX && reload_completed\"\n+;;  \"bclr/%j2\\t%W1,%0\"\n+;;  [(set_attr \"cc\" \"none_0hit\")\n+;;   (set_attr \"length_table\" \"logicb\")])\n+\n+;;(define_insn_and_split \"*cmpcondbsetreg\"\n+;;  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=WU,WU\")\n+;;\t(if_then_else:QI (match_operator 1 \"eqne_operator\"\n+;;\t\t\t  [(match_operand 2 \"h8300_dst_operand\" \"r,rQ\")\n+;;\t\t\t   (match_operand 3 \"h8300_src_operand\" \"I,rQi\")])\n+;;\t\t\t (ior:QI (match_operand:QI 4 \"bit_memory_operand\" \"0,0\")\n+;;\t\t\t\t (ashift:QI (const_int 1)\n+;;\t\t\t\t\t    (match_operand:QI 5 \"register_operand\" \"r,r\")))\n+;;\t\t\t (match_dup 4)))]\n+;;  \"TARGET_H8300SX\"\n+;;  \"#\"\n+;;  \"reload_completed\"\n+;;  [(set (cc0) (match_dup 6))\n+;;   (set (match_dup 0)\n+;;\t(if_then_else:QI (match_op_dup 1 [(cc0) (const_int 0)])\n+;;\t\t\t (ior:QI (match_dup 4)\n+;;\t\t\t\t (ashift:QI (const_int 1)\n+;;\t\t\t\t\t    (match_operand:QI 5 \"register_operand\" \"r,r\")))\n+;;\t\t\t (match_dup 4)))]\n+;;  {\n+;;    operands[6] = gen_rtx_COMPARE (VOIDmode, operands[2], operands[3]);\n+;;  }\n+;;  [(set_attr \"cc\" \"set_znv,compare\")])\n+\n+;;(define_insn \"*condbsetreg\"\n+;;  [(set (match_operand:QI 0 \"bit_memory_operand\" \"=WU\")\n+;;\t(if_then_else:QI (match_operator:QI 2 \"eqne_operator\"\n+;;\t\t\t  [(cc0) (const_int 0)])\n+;;\t\t\t (ior:QI (match_operand:QI 3 \"bit_memory_operand\" \"0\")\n+;;\t\t\t\t (ashift:QI (const_int 1)\n+;;\t\t\t\t\t    (match_operand:QI 1 \"register_operand\" \"r\")))\n+;;\t\t\t (match_dup 3)))]\n+;;  \"TARGET_H8300SX && reload_completed\"\n+;;  \"bset/%j2\\t%R1,%0\"\n+;;  [(set_attr \"cc\" \"none_0hit\")\n+;;   (set_attr \"length_table\" \"logicb\")])\n+\n+;;(define_insn_and_split \"*cmpcondbclrreg\"\n+;;  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=WU,WU\")\n+;;\t(if_then_else:QI (match_operator 1 \"eqne_operator\"\n+;;\t\t\t  [(match_operand 2 \"h8300_dst_operand\" \"r,rQ\")\n+;;\t\t\t   (match_operand 3 \"h8300_src_operand\" \"I,rQi\")])\n+;;\t\t\t (and:QI (match_operand:QI 4 \"bit_memory_operand\" \"0,0\")\n+;;\t\t\t\t (ashift:QI (const_int 1)\n+;;\t\t\t\t\t    (match_operand:QI 5 \"register_operand\" \"r,r\")))\n+;;\t\t\t (match_dup 4)))]\n+;;  \"TARGET_H8300SX\"\n+;;  \"#\"\n+;;  \"reload_completed\"\n+;;  [(set (cc0) (match_dup 6))\n+;;   (set (match_dup 0)\n+;;\t(if_then_else:QI (match_op_dup 1 [(cc0) (const_int 0)])\n+;;\t\t\t (and:QI (match_dup 4)\n+;;\t\t\t\t (ashift:QI (const_int 1)\n+;;\t\t\t\t\t    (match_operand:QI 5 \"register_operand\" \"r,r\")))\n+;;\t\t\t (match_dup 4)))]\n+;;  {\n+;;    operands[6] = gen_rtx_COMPARE (VOIDmode, operands[2], operands[3]);\n+;;  }\n+;;  [(set_attr \"cc\" \"set_znv,compare\")])\n+\n+;;(define_insn \"*condbclrreg\"\n+;;  [(set (match_operand:QI 0 \"bit_memory_operand\" \"=WU\")\n+;;\t(if_then_else:QI (match_operator:QI 2 \"eqne_operator\"\n+;;\t\t\t  [(cc0) (const_int 0)])\n+;;\t\t\t (and:QI (match_operand:QI 3 \"bit_memory_operand\" \"0\")\n+;;\t\t\t\t (ashift:QI (const_int 1)\n+;;\t\t\t\t\t    (match_operand:QI 1 \"register_operand\" \"r\")))\n+;;\t\t\t (match_dup 3)))]\n+;;  \"TARGET_H8300SX && reload_completed\"\n+;;  \"bclr/%j2\\t%R1,%0\"\n+;;  [(set_attr \"cc\" \"none_0hit\")\n+;;   (set_attr \"length_table\" \"logicb\")])\n "}, {"sha": "432c1d88a6159f560ae34c866cc7a3f12d5c47ff", "filename": "gcc/config/h8300/combiner.md", "status": "modified", "additions": 691, "deletions": 186, "changes": 877, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fcombiner.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fcombiner.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fcombiner.md?ref=f16897cb4b1468374d63b1a6b12d8b7be845874a", "patch": "@@ -4,85 +4,193 @@\n \n ;; insv:SI\n \n-(define_insn \"*insv_si_1_n\"\n+(define_insn_and_split \"*insv_si_1_n\"\n   [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+r\")\n \t\t\t (const_int 1)\n \t\t\t (match_operand:SI 1 \"const_int_operand\" \"n\"))\n \t(match_operand:SI 2 \"register_operand\" \"r\"))]\n   \"INTVAL (operands[1]) < 16\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (zero_extract:SI (match_dup 0) (const_int 1) (match_dup 1))\n+\t\t   (match_dup 2))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*insv_si_1_n_clobber_flags\"\n+  [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+r\")\n+\t\t\t (const_int 1)\n+\t\t\t (match_operand:SI 1 \"const_int_operand\" \"n\"))\n+\t(match_operand:SI 2 \"register_operand\" \"r\"))\n+   (clobber (reg:CC CC_REG))]\n+  \"INTVAL (operands[1]) < 16\"\n   \"bld\\\\t#0,%w2\\;bst\\\\t%Z1,%Y0\"\n   [(set_attr \"length\" \"4\")])\n \n-(define_insn \"*insv_si_1_n_lshiftrt\"\n+(define_insn_and_split \"*insv_si_1_n_lshiftrt\"\n   [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+r\")\n \t\t\t (const_int 1)\n \t\t\t (match_operand:SI 1 \"const_int_operand\" \"n\"))\n \t(lshiftrt:SI (match_operand:SI 2 \"register_operand\" \"r\")\n \t\t     (match_operand:SI 3 \"const_int_operand\" \"n\")))]\n   \"INTVAL (operands[1]) < 16 && INTVAL (operands[3]) < 16\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (zero_extract:SI (match_dup 0) (const_int 1) (match_dup 1))\n+\t\t   (lshiftrt:SI (match_dup 2) (match_dup 3)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*insv_si_1_n_lshiftrt_clobber_flags\"\n+  [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+r\")\n+\t\t\t (const_int 1)\n+\t\t\t (match_operand:SI 1 \"const_int_operand\" \"n\"))\n+\t(lshiftrt:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t     (match_operand:SI 3 \"const_int_operand\" \"n\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"INTVAL (operands[1]) < 16 && INTVAL (operands[3]) < 16\"\n   \"bld\\\\t%Z3,%Y2\\;bst\\\\t%Z1,%Y0\"\n   [(set_attr \"length\" \"4\")])\n \n-(define_insn \"*insv_si_1_n_lshiftrt_16\"\n+(define_insn_and_split \"*insv_si_1_n_lshiftrt_16\"\n   [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+r\")\n \t\t\t (const_int 1)\n \t\t\t (match_operand:SI 1 \"const_int_operand\" \"n\"))\n \t(lshiftrt:SI (match_operand:SI 2 \"register_operand\" \"r\")\n \t\t     (const_int 16)))]\n   \"INTVAL (operands[1]) < 16\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (zero_extract:SI (match_dup 0) (const_int 1) (match_dup 1))\n+\t\t   (lshiftrt:SI (match_dup 2) (const_int 16)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*insv_si_1_n_lshiftrt_16_clobber_flags\"\n+  [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+r\")\n+\t\t\t (const_int 1)\n+\t\t\t (match_operand:SI 1 \"const_int_operand\" \"n\"))\n+\t(lshiftrt:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t     (const_int 16)))\n+   (clobber (reg:CC CC_REG))]\n+  \"INTVAL (operands[1]) < 16\"\n   \"rotr.w\\\\t%e2\\;rotl.w\\\\t%e2\\;bst\\\\t%Z1,%Y0\"\n   [(set_attr \"length\" \"6\")])\n \n-(define_insn \"*insv_si_8_8\"\n+(define_insn_and_split \"*insv_si_8_8\"\n   [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+r\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n \t(match_operand:SI 1 \"register_operand\" \"r\"))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (zero_extract:SI (match_dup 0) (const_int 8) (const_int 8))\n+\t\t   (match_dup 1))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*insv_si_8_8_clobber_flags\"\n+  [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+r\")\n+\t\t\t (const_int 8)\n+\t\t\t (const_int 8))\n+\t(match_operand:SI 1 \"register_operand\" \"r\"))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"mov.b\\\\t%w1,%x0\"\n   [(set_attr \"length\" \"2\")])\n \n-(define_insn \"*insv_si_8_8_lshiftrt_8\"\n+(define_insn_and_split \"*insv_si_8_8_lshiftrt_8\"\n   [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+r\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n \t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t     (const_int 8)))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (zero_extract:SI (match_dup 0) (const_int 8) (const_int 8))\n+\t\t   (lshiftrt:SI (match_dup 1) (const_int 8)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*insv_si_8_8_lshiftrt_8_clobber_flags\"\n+  [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+r\")\n+\t\t\t (const_int 8)\n+\t\t\t (const_int 8))\n+\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t     (const_int 8)))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"mov.b\\\\t%x1,%x0\"\n   [(set_attr \"length\" \"2\")])\n \n ;; extzv:SI\n \n-(define_insn \"*extzv_8_8\"\n+(define_insn_and_split \"*extzv_8_8\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"?0,r\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8)))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (zero_extract:SI (match_dup 1) (const_int 8) (const_int 8)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*extzv_8_8_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"?0,r\")\n+\t\t\t (const_int 8)\n+\t\t\t (const_int 8)))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"@\n    mov.b\\\\t%x1,%w0\\;extu.w\\\\t%f0\\;extu.l\\\\t%S0\n    sub.l\\\\t%S0,%S0\\;mov.b\\\\t%x1,%w0\"\n   [(set_attr \"cc\" \"set_znv,clobber\")\n    (set_attr \"length\" \"6,4\")])\n \n-(define_insn \"*extzv_8_16\"\n+(define_insn_and_split \"*extzv_8_16\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 16)))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (zero_extract:SI (match_dup 1) (const_int 8) (const_int 16)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*extzv_8_16_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t (const_int 8)\n+\t\t\t (const_int 16)))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"mov.w\\\\t%e1,%f0\\;extu.w\\\\t%f0\\;extu.l\\\\t%S0\"\n   [(set_attr \"cc\" \"set_znv\")\n    (set_attr \"length\" \"6\")])\n \n-(define_insn \"*extzv_16_8\"\n+(define_insn_and_split \"*extzv_16_8\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t (const_int 16)\n \t\t\t (const_int 8)))\n    (clobber (match_scratch:SI 2 \"=&r\"))]\n   \"TARGET_H8300H\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (zero_extract:SI (match_dup 1) (const_int 16) (const_int 8)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*extzv_16_8_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t (const_int 16)\n+\t\t\t (const_int 8)))\n+   (clobber (match_scratch:SI 2 \"=&r\"))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_H8300H\"\n   \"mov.w\\\\t%e1,%f2\\;mov.b\\\\t%x1,%w0\\;mov.b\\\\t%w2,%x0\\;extu.l\\\\t%S0\"\n   [(set_attr \"length\" \"8\")\n    (set_attr \"cc\" \"set_znv\")])\n@@ -100,12 +208,13 @@\n   [(parallel [(set (match_dup 0)\n \t\t   (ashift:SI (match_dup 0)\n \t\t\t      (const_int 1)))\n-\t      (clobber (scratch:QI))])\n+\t      (clobber (scratch:QI))\n+\t      (clobber (reg:CC CC_REG))])\n    (parallel [(set (match_dup 0)\n \t\t   (lshiftrt:SI (match_dup 0)\n \t\t\t\t(const_int 24)))\n-\t      (clobber (scratch:QI))])]\n-  \"\")\n+\t      (clobber (scratch:QI))\n+\t      (clobber (reg:CC CC_REG))])])\n \n ;; and:SI\n \n@@ -122,12 +231,13 @@\n   [(parallel [(set (match_dup 0)\n \t\t   (ashift:SI (match_dup 0)\n \t\t\t      (const_int 16)))\n-\t      (clobber (scratch:QI))])\n+\t      (clobber (scratch:QI))\n+\t      (clobber (reg:CC CC_REG))])\n    (parallel [(set (match_dup 0)\n \t\t   (lshiftrt:SI (match_dup 0)\n \t\t\t\t(const_int 1)))\n-\t      (clobber (scratch:QI))])]\n-  \"\")\n+\t      (clobber (scratch:QI))\n+\t      (clobber (reg:CC CC_REG))])])\n \n ;; Transform (SImode << B) & 0xffff into (SImode) (HImode << B).\n \n@@ -145,22 +255,39 @@\n   [(parallel [(set (match_dup 5)\n \t\t   (ashift:HI (match_dup 5)\n \t\t\t      (match_dup 2)))\n-\t      (clobber (match_dup 4))])\n-   (set (match_dup 0)\n-\t(zero_extend:SI (match_dup 5)))]\n+\t      (clobber (match_dup 4))\n+\t      (clobber (reg:CC CC_REG))])\n+   (parallel [(set (match_dup 0)\n+\t\t   (zero_extend:SI (match_dup 5)))\n+\t      (clobber (reg:CC CC_REG))])]\n   {\n     operands[5] = gen_rtx_REG (HImode, REGNO (operands[0]));\n   })\n \n ;; Accept (A >> 30) & 2 and the like.\n \n-(define_insn \"*andsi3_lshiftrt_n_sb\"\n+(define_insn_and_split \"*andsi3_lshiftrt_n_sb\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(and:SI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t\t     (match_operand:SI 2 \"const_int_operand\" \"n\"))\n \t\t(match_operand:SI 3 \"single_one_operand\" \"n\")))]\n   \"exact_log2 (INTVAL (operands[3])) < 16\n    && INTVAL (operands[2]) + exact_log2 (INTVAL (operands[3])) == 31\"\n+  \"#\"\n+  \"\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (and:SI (lshiftrt:SI (match_dup 1) (match_dup 2))\n+\t\t\t   (match_dup 3)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*andsi3_lshiftrt_n_sb\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(and:SI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t\t     (match_operand:SI 2 \"const_int_operand\" \"n\"))\n+\t\t(match_operand:SI 3 \"single_one_operand\" \"n\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"exact_log2 (INTVAL (operands[3])) < 16\n+   && INTVAL (operands[2]) + exact_log2 (INTVAL (operands[3])) == 31\"\n {\n   operands[3] = GEN_INT (exact_log2 (INTVAL (operands[3])));\n   return \"shll.l\\\\t%S0\\;xor.l\\\\t%S0,%S0\\;bst\\\\t%Z3,%Y0\";\n@@ -175,172 +302,330 @@\n   \"\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(set (match_dup 0)\n-\t(and:SI (lshiftrt:SI (match_dup 0)\n-\t\t\t     (const_int 25))\n-\t\t(const_int 64)))\n+  [(parallel [(set (match_dup 0)\n+\t\t   (and:SI (lshiftrt:SI (match_dup 0) (const_int 25))\n+\t\t\t   (const_int 64)))\n+\t      (clobber (reg:CC CC_REG))])\n    (parallel [(set (match_dup 0)\n \t\t   (ashift:SI (match_dup 0)\n \t\t\t      (const_int 16)))\n-\t      (clobber (scratch:QI))])]\n-  \"\")\n+\t      (clobber (scratch:QI))\n+\t      (clobber (reg:CC CC_REG))])])\n \n ;; plus:SI\n \n-(define_insn \"*addsi3_upper\"\n+(define_insn_and_split \"*addsi3_upper\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t  (const_int 65536))\n \t\t (match_operand:SI 2 \"register_operand\" \"0\")))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (plus:SI (mult:SI (match_dup 1) (const_int 65536))\n+\t\t\t    (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*addsi3_upper_clobber_regs\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t  (const_int 65536))\n+\t\t (match_operand:SI 2 \"register_operand\" \"0\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"add.w\\\\t%f1,%e0\"\n   [(set_attr \"length\" \"2\")])\n \n-(define_insn \"*addsi3_lshiftrt_16_zexthi\"\n+(define_insn_and_split \"*addsi3_lshiftrt_16_zexthi\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(plus:SI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t      (const_int 16))\n \t\t (zero_extend:SI (match_operand:HI 2 \"register_operand\" \"0\"))))]\n   \"\"\n-  \"add.w\\\\t%e1,%f0\\;xor.w\\\\t%e0,%e0\\;rotxl.w\\\\t%e0\"\n-  [(set_attr \"length\" \"6\")])\n-\n-(define_insn_and_split \"*addsi3_and_r_1\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(plus:SI (and:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t (const_int 1))\n-\t\t (match_operand:SI 2 \"register_operand\" \"0\")))]\n-  \"\"\n   \"#\"\n-  \"&& reload_completed\"\n-  [(set (cc0) (compare (zero_extract:SI (match_dup 1)\n-\t\t\t\t\t(const_int 1)\n-\t\t\t\t\t(const_int 0))\n-\t\t       (const_int 0)))\n-   (set (pc)\n-        (if_then_else (eq (cc0)\n-\t\t\t  (const_int 0))\n-\t\t      (label_ref (match_dup 3))\n-\t\t      (pc)))\n-   (set (match_dup 2)\n-        (plus:SI (match_dup 2)\n-\t\t (const_int 1)))\n-   (match_dup 3)]\n-  {\n-    operands[3] = gen_label_rtx ();\n-  })\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (plus:SI (lshiftrt:SI (match_dup 1) (const_int 16))\n+\t\t\t    (zero_extend:SI (match_dup 2))))\n+\t      (clobber (reg:CC CC_REG))])])\n \n-(define_insn_and_split \"*addsi3_and_not_r_1\"\n+(define_insn \"*addsi3_lshiftrt_16_zexthi_clobber_flags\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(plus:SI (and:SI (not:SI (match_operand:SI 1 \"register_operand\" \"r\"))\n-\t\t\t (const_int 1))\n-\t\t (match_operand:SI 2 \"register_operand\" \"0\")))]\n+\t(plus:SI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t      (const_int 16))\n+\t\t (zero_extend:SI (match_operand:HI 2 \"register_operand\" \"0\"))))\n+   (clobber (reg:CC CC_REG))]\n   \"\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(set (cc0) (compare (zero_extract:SI (match_dup 1)\n-\t\t\t\t\t(const_int 1)\n-\t\t\t\t\t(const_int 0))\n-\t\t       (const_int 0)))\n-   (set (pc)\n-        (if_then_else (ne (cc0)\n-\t\t\t  (const_int 0))\n-\t\t      (label_ref (match_dup 3))\n-\t\t      (pc)))\n-   (set (match_dup 2)\n-        (plus:SI (match_dup 2)\n-\t\t (const_int 1)))\n-   (match_dup 3)]\n-  {\n-    operands[3] = gen_label_rtx ();\n-  })\n+  \"add.w\\\\t%e1,%f0\\;xor.w\\\\t%e0,%e0\\;rotxl.w\\\\t%e0\"\n+  [(set_attr \"length\" \"6\")])\n+\n+;;(define_insn_and_split \"*addsi3_and_r_1\"\n+;;  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+;;\t(plus:SI (and:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+;;\t\t\t (const_int 1))\n+;;\t\t (match_operand:SI 2 \"register_operand\" \"0\")))]\n+;;  \"\"\n+;;  \"#\"\n+;;  \"&& reload_completed\"\n+;;  [(set (cc0) (compare (zero_extract:SI (match_dup 1)\n+;;\t\t\t\t\t(const_int 1)\n+;;\t\t\t\t\t(const_int 0))\n+;;\t\t       (const_int 0)))\n+;;   (set (pc)\n+;;        (if_then_else (eq (cc0)\n+;;\t\t\t  (const_int 0))\n+;;\t\t      (label_ref (match_dup 3))\n+;;\t\t      (pc)))\n+;;   (set (match_dup 2)\n+;;        (plus:SI (match_dup 2)\n+;;\t\t (const_int 1)))\n+;;   (match_dup 3)]\n+;;  {\n+;;    operands[3] = gen_label_rtx ();\n+;;  })\n+\n+;;(define_insn_and_split \"*addsi3_and_not_r_1\"\n+;;  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+;;\t(plus:SI (and:SI (not:SI (match_operand:SI 1 \"register_operand\" \"r\"))\n+;;\t\t\t (const_int 1))\n+;;\t\t (match_operand:SI 2 \"register_operand\" \"0\")))]\n+;;  \"\"\n+;;  \"#\"\n+;;  \"&& reload_completed\"\n+;;  [(set (cc0) (compare (zero_extract:SI (match_dup 1)\n+;;\t\t\t\t\t(const_int 1)\n+;;\t\t\t\t\t(const_int 0))\n+;;\t\t       (const_int 0)))\n+;;   (set (pc)\n+;;        (if_then_else (ne (cc0)\n+;;\t\t\t  (const_int 0))\n+;;\t\t      (label_ref (match_dup 3))\n+;;\t\t      (pc)))\n+;;   (set (match_dup 2)\n+;;        (plus:SI (match_dup 2)\n+;;\t\t (const_int 1)))\n+;;   (match_dup 3)]\n+;;  {\n+;;    operands[3] = gen_label_rtx ();\n+;;  })\n \n ;; [ix]or:HI\n \n-(define_insn \"*ixorhi3_zext\"\n+(define_insn_and_split \"*ixorhi3_zext\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(match_operator:HI 1 \"iorxor_operator\"\n \t [(zero_extend:HI (match_operand:QI 2 \"register_operand\" \"r\"))\n \t  (match_operand:HI 3 \"register_operand\" \"0\")]))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (match_op_dup 1 [(zero_extend:HI (match_dup 2))\n+\t\t\t\t    (match_dup 3)]))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+\n+(define_insn \"*ixorhi3_zext_clobber_flags\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(match_operator:HI 1 \"iorxor_operator\"\n+\t [(zero_extend:HI (match_operand:QI 2 \"register_operand\" \"r\"))\n+\t  (match_operand:HI 3 \"register_operand\" \"0\")]))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"%c1.b\\\\t%X2,%s0\"\n   [(set_attr \"length\" \"2\")])\n \n ;; [ix]or:SI\n \n-(define_insn \"*ixorsi3_zext_qi\"\n+(define_insn_and_split \"*ixorsi3_zext_qi\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(match_operator:SI 1 \"iorxor_operator\"\n \t [(zero_extend:SI (match_operand:QI 2 \"register_operand\" \"r\"))\n \t  (match_operand:SI 3 \"register_operand\" \"0\")]))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (match_op_dup 1 [(zero_extend:SI (match_dup 2))\n+\t\t\t\t    (match_dup 3)]))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*ixorsi3_zext_qi_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(match_operator:SI 1 \"iorxor_operator\"\n+\t [(zero_extend:SI (match_operand:QI 2 \"register_operand\" \"r\"))\n+\t  (match_operand:SI 3 \"register_operand\" \"0\")]))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"%c1.b\\\\t%X2,%w0\"\n   [(set_attr \"length\" \"2\")])\n \n-(define_insn \"*ixorsi3_zext_hi\"\n+(define_insn_and_split \"*ixorsi3_zext_hi\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(match_operator:SI 1 \"iorxor_operator\"\n \t [(zero_extend:SI (match_operand:HI 2 \"register_operand\" \"r\"))\n \t  (match_operand:SI 3 \"register_operand\" \"0\")]))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (match_op_dup 1 [(zero_extend:SI (match_dup 2))\n+\t\t\t\t    (match_dup 3)]))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*ixorsi3_zext_hi_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(match_operator:SI 1 \"iorxor_operator\"\n+\t [(zero_extend:SI (match_operand:HI 2 \"register_operand\" \"r\"))\n+\t  (match_operand:SI 3 \"register_operand\" \"0\")]))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"%c1.w\\\\t%T2,%f0\"\n   [(set_attr \"length\" \"2\")])\n \n-(define_insn \"*ixorsi3_ashift_16\"\n+(define_insn_and_split \"*ixorsi3_ashift_16\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(match_operator:SI 1 \"iorxor_operator\"\n \t [(ashift:SI (match_operand:SI 2 \"register_operand\" \"r\")\n \t\t     (const_int 16))\n \t  (match_operand:SI 3 \"register_operand\" \"0\")]))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (match_op_dup 1 [(ashift:SI (match_dup 2) (const_int 16))\n+\t\t\t\t    (match_dup 3)]))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*ixorsi3_ashift_16_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(match_operator:SI 1 \"iorxor_operator\"\n+\t [(ashift:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t     (const_int 16))\n+\t  (match_operand:SI 3 \"register_operand\" \"0\")]))\n+  (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"%c1.w\\\\t%f2,%e0\"\n   [(set_attr \"length\" \"2\")])\n \n-(define_insn \"*ixorsi3_lshiftrt_16\"\n+(define_insn_and_split \"*ixorsi3_lshiftrt_16\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(match_operator:SI 1 \"iorxor_operator\"\n \t [(lshiftrt:SI (match_operand:SI 2 \"register_operand\" \"r\")\n \t\t       (const_int 16))\n \t  (match_operand:SI 3 \"register_operand\" \"0\")]))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (match_op_dup 1 [(lshiftrt:SI (match_dup 2) (const_int 16))\n+\t\t\t\t    (match_dup 3)]))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*ixorsi3_lshiftrt_16_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(match_operator:SI 1 \"iorxor_operator\"\n+\t [(lshiftrt:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t       (const_int 16))\n+\t  (match_operand:SI 3 \"register_operand\" \"0\")]))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"%c1.w\\\\t%e2,%f0\"\n   [(set_attr \"length\" \"2\")])\n \n ;; ior:HI\n \n-(define_insn \"*iorhi3_ashift_8\"\n+(define_insn_and_split \"*iorhi3_ashift_8\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(ior:HI (ashift:HI (match_operand:HI 1 \"register_operand\" \"r\")\n \t\t\t   (const_int 8))\n \t\t(match_operand:HI 2 \"register_operand\" \"0\")))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (ior:HI (ashift:HI (match_dup 1) (const_int 8))\n+\t\t\t   (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*iorhi3_ashift_8_clobber_flags\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(ior:HI (ashift:HI (match_operand:HI 1 \"register_operand\" \"r\")\n+\t\t\t   (const_int 8))\n+\t\t(match_operand:HI 2 \"register_operand\" \"0\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"or.b\\\\t%s1,%t0\"\n   [(set_attr \"length\" \"2\")])\n \n-(define_insn \"*iorhi3_lshiftrt_8\"\n+(define_insn_and_split \"*iorhi3_lshiftrt_8\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(ior:HI (lshiftrt:HI (match_operand:HI 1 \"register_operand\" \"r\")\n \t\t\t     (const_int 8))\n \t\t(match_operand:HI 2 \"register_operand\" \"0\")))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (ior:HI (lshiftrt:HI (match_dup 1) (const_int 8))\n+\t\t\t   (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*iorhi3_lshiftrt_8_clobber_flags\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(ior:HI (lshiftrt:HI (match_operand:HI 1 \"register_operand\" \"r\")\n+\t\t\t     (const_int 8))\n+\t\t(match_operand:HI 2 \"register_operand\" \"0\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"or.b\\\\t%t1,%s0\"\n   [(set_attr \"length\" \"2\")])\n \n-(define_insn \"*iorhi3_two_qi\"\n+(define_insn_and_split \"*iorhi3_two_qi\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(ior:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"0\"))\n \t\t(ashift:HI (match_operand:HI 2 \"register_operand\" \"r\")\n \t\t\t   (const_int 8))))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (ior:HI (zero_extend:HI (match_dup 1))\n+\t\t\t   (ashift:HI (match_dup 2) (const_int 8))))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*iorhi3_two_qi_clobber_flags\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(ior:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"0\"))\n+\t\t(ashift:HI (match_operand:HI 2 \"register_operand\" \"r\")\n+\t\t\t   (const_int 8))))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"mov.b\\\\t%s2,%t0\"\n   [(set_attr \"length\" \"2\")])\n \n-(define_insn \"*iorhi3_two_qi_mem\"\n+(define_insn_and_split \"*iorhi3_two_qi_mem\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=&r\")\n \t(ior:HI (zero_extend:HI (match_operand:QI 1 \"memory_operand\" \"m\"))\n \t\t(ashift:HI (subreg:HI (match_operand:QI 2 \"memory_operand\" \"m\") 0)\n \t\t\t   (const_int 8))))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (ior:HI (zero_extend:HI (match_dup 1))\n+\t\t\t   (ashift:HI (subreg:HI (match_dup 2) 0)\n+\t\t\t\t      (const_int 8))))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*iorhi3_two_qi_mem_clobber_flags\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=&r\")\n+\t(ior:HI (zero_extend:HI (match_operand:QI 1 \"memory_operand\" \"m\"))\n+\t\t(ashift:HI (subreg:HI (match_operand:QI 2 \"memory_operand\" \"m\") 0)\n+\t\t\t   (const_int 8))))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"mov.b\\\\t%X2,%t0\\;mov.b\\\\t%X1,%s0\"\n   [(set_attr \"length\" \"16\")])\n \n@@ -351,20 +636,34 @@\n \t\t\t   (const_int 8))))]\n   \"reload_completed\n    && byte_accesses_mergeable_p (XEXP (operands[2], 0), XEXP (operands[1], 0))\"\n-  [(set (match_dup 0)\n-\t(match_dup 3))]\n+  [(parallel [(set (match_dup 0) (match_dup 3))\n+\t      (clobber (reg:CC CC_REG))])]\n   {\n     operands[3] = gen_rtx_MEM (HImode, XEXP (operands[2], 0));\n   })\n \n ;; ior:SI\n \n-(define_insn \"*iorsi3_two_hi\"\n+(define_insn_and_split \"*iorsi3_two_hi\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(ior:SI (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"0\"))\n \t\t(ashift:SI (match_operand:SI 2 \"register_operand\" \"r\")\n \t\t\t   (const_int 16))))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (ior:SI (zero_extend:SI (match_dup 1))\n+\t\t\t   (ashift:SI (match_dup 2) (const_int 16))))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*iorsi3_two_hi_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ior:SI (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"0\"))\n+\t\t(ashift:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t   (const_int 16))))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"mov.w\\\\t%f2,%e0\"\n   [(set_attr \"length\" \"2\")])\n \n@@ -377,23 +676,39 @@\n   \"\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(set (match_dup 3)\n-\t(ior:HI (zero_extend:HI (match_dup 1))\n-\t\t(ashift:HI (subreg:HI (match_dup 2) 0)\n-\t\t\t   (const_int 8))))\n-   (set (match_dup 0)\n-\t(zero_extend:SI (match_dup 3)))]\n+  [(parallel [(set (match_dup 3)\n+\t\t   (ior:HI (zero_extend:HI (match_dup 1))\n+\t\t\t   (ashift:HI (subreg:HI (match_dup 2) 0)\n+\t\t\t\t      (const_int 8))))\n+\t      (clobber (reg:CC CC_REG))])\n+   (parallel [(set (match_dup 0) (zero_extend:SI (match_dup 3)))\n+\t      (clobber (reg:CC CC_REG))])]\n   {\n     operands[3] = gen_rtx_REG (HImode, REGNO (operands[0]));\n   })\n \n-(define_insn \"*iorsi3_e2f\"\n+(define_insn_and_split \"*iorsi3_e2f\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(ior:SI (and:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t\t(const_int -65536))\n \t\t(lshiftrt:SI (match_operand:SI 2 \"register_operand\" \"r\")\n \t\t\t     (const_int 16))))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (ior:SI (and:SI (match_dup 1) (const_int -65536))\n+\t\t\t   (lshiftrt:SI (match_dup 2) (const_int 16))))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*iorsi3_e2f_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ior:SI (and:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t\t(const_int -65536))\n+\t\t(lshiftrt:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t     (const_int 16))))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"mov.w\\\\t%e2,%f0\"\n   [(set_attr \"length\" \"2\")])\n \n@@ -405,43 +720,87 @@\n   \"\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(set (match_dup 3)\n-\t(ior:HI (zero_extend:HI (match_dup 1))\n-\t\t(ashift:HI (match_dup 4)\n-\t\t\t   (const_int 8))))\n-   (set (match_dup 0)\n-\t(sign_extend:SI (match_dup 3)))]\n+  [(parallel [(set (match_dup 3)\n+\t\t   (ior:HI (zero_extend:HI (match_dup 1))\n+\t\t\t   (ashift:HI (match_dup 4) (const_int 8))))\n+\t      (clobber (reg:CC CC_REG))])\n+   (parallel [(set (match_dup 0) (sign_extend:SI (match_dup 3)))\n+\t      (clobber (reg:CC CC_REG))])]\n   {\n     operands[3] = gen_rtx_REG (HImode, REGNO (operands[0]));\n     operands[4] = gen_rtx_REG (HImode, REGNO (operands[2]));\n   })\n \n-(define_insn \"*iorsi3_w\"\n+(define_insn_and_split \"*iorsi3_w\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,&r\")\n \t(ior:SI (and:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n \t\t\t(const_int -256))\n \t\t(zero_extend:SI (match_operand:QI 2 \"general_operand_src\" \"r,g>\"))))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (ior:SI (and:SI (match_dup 1) (const_int -256))\n+\t\t\t   (zero_extend:SI (match_dup 2))))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*iorsi3_w_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,&r\")\n+\t(ior:SI (and:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n+\t\t\t(const_int -256))\n+\t\t(zero_extend:SI (match_operand:QI 2 \"general_operand_src\" \"r,g>\"))))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"mov.b\\\\t%X2,%w0\"\n   [(set_attr \"length\" \"2,8\")])\n \n-(define_insn \"*iorsi3_ashift_31\"\n+(define_insn_and_split \"*iorsi3_ashift_31\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n \t(ior:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t   (const_int 31))\n \t\t(match_operand:SI 2 \"register_operand\" \"0\")))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (ior:SI (ashift:SI (match_dup 1) (const_int 31))\n+\t\t\t   (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*iorsi3_ashift_31_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n+\t(ior:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t   (const_int 31))\n+\t\t(match_operand:SI 2 \"register_operand\" \"0\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"rotxl.l\\\\t%S0\\;bor\\\\t#0,%w1\\;rotxr.l\\\\t%S0\"\n   [(set_attr \"length\" \"6\")\n    (set_attr \"cc\" \"set_znv\")])\n \n-(define_insn \"*iorsi3_and_ashift\"\n+(define_insn_and_split \"*iorsi3_and_ashift\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(ior:SI (and:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t\t   (match_operand:SI 2 \"const_int_operand\" \"n\"))\n \t\t\t(match_operand:SI 3 \"single_one_operand\" \"n\"))\n \t\t(match_operand:SI 4 \"register_operand\" \"0\")))]\n   \"(INTVAL (operands[3]) & ~0xffff) == 0\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (ior:SI (and:SI (ashift:SI (match_dup 1) (match_dup 2))\n+\t\t\t\t   (match_dup 3))\n+\t\t\t  (match_dup 4)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*iorsi3_and_ashift_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ior:SI (and:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t\t   (match_operand:SI 2 \"const_int_operand\" \"n\"))\n+\t\t\t(match_operand:SI 3 \"single_one_operand\" \"n\"))\n+\t\t(match_operand:SI 4 \"register_operand\" \"0\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"(INTVAL (operands[3]) & ~0xffff) == 0\"\n {\n   rtx srcpos = GEN_INT (exact_log2 (INTVAL (operands[3]))\n \t\t\t- INTVAL (operands[2]));\n@@ -452,13 +811,29 @@\n }\n   [(set_attr \"length\" \"6\")])\n \n-(define_insn \"*iorsi3_and_lshiftrt\"\n+(define_insn_and_split \"*iorsi3_and_lshiftrt\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(ior:SI (and:SI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t\t     (match_operand:SI 2 \"const_int_operand\" \"n\"))\n \t\t\t(match_operand:SI 3 \"single_one_operand\" \"n\"))\n \t\t(match_operand:SI 4 \"register_operand\" \"0\")))]\n   \"((INTVAL (operands[3]) << INTVAL (operands[2])) & ~0xffff) == 0\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (ior:SI (and:SI (lshiftrt:SI (match_dup 1) (match_dup 2))\n+\t\t\t\t   (match_dup 3))\n+\t\t\t   (match_dup 4)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*iorsi3_and_lshiftrt_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ior:SI (and:SI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t\t     (match_operand:SI 2 \"const_int_operand\" \"n\"))\n+\t\t\t(match_operand:SI 3 \"single_one_operand\" \"n\"))\n+\t\t(match_operand:SI 4 \"register_operand\" \"0\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"((INTVAL (operands[3]) << INTVAL (operands[2])) & ~0xffff) == 0\"\n {\n   rtx srcpos = GEN_INT (exact_log2 (INTVAL (operands[3]))\n \t\t\t+ INTVAL (operands[2]));\n@@ -469,34 +844,86 @@\n }\n   [(set_attr \"length\" \"6\")])\n \n-(define_insn \"*iorsi3_zero_extract\"\n+(define_insn_and_split \"*iorsi3_zero_extract\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(ior:SI (zero_extract:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t\t (const_int 1)\n \t\t\t\t (match_operand:SI 2 \"const_int_operand\" \"n\"))\n \t\t(match_operand:SI 3 \"register_operand\" \"0\")))]\n   \"INTVAL (operands[2]) < 16\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (ior:SI (zero_extract:SI (match_dup 1)\n+\t\t\t\t\t    (const_int 1)\n+\t\t\t\t\t    (match_dup 2))\n+\t\t\t   (match_dup 3)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*iorsi3_zero_extract_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ior:SI (zero_extract:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t\t (const_int 1)\n+\t\t\t\t (match_operand:SI 2 \"const_int_operand\" \"n\"))\n+\t\t(match_operand:SI 3 \"register_operand\" \"0\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"INTVAL (operands[2]) < 16\"\n   \"bld\\\\t%Z2,%Y1\\;bor\\\\t#0,%w0\\;bst\\\\t#0,%w0\"\n   [(set_attr \"length\" \"6\")])\n \n-(define_insn \"*iorsi3_and_lshiftrt_n_sb\"\n+(define_insn_and_split \"*iorsi3_and_lshiftrt_n_sb\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(ior:SI (and:SI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t\t     (const_int 30))\n \t\t\t(const_int 2))\n \t\t(match_operand:SI 2 \"register_operand\" \"0\")))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (ior:SI (and:SI (lshiftrt:SI (match_dup 1) (const_int 30))\n+\t\t\t\t   (const_int 2))\n+\t\t\t   (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*iorsi3_and_lshiftrt_n_sb_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ior:SI (and:SI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t\t     (const_int 30))\n+\t\t\t(const_int 2))\n+\t\t(match_operand:SI 2 \"register_operand\" \"0\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"rotl.l\\\\t%S1\\;rotr.l\\\\t%S1\\;bor\\\\t#1,%w0\\;bst\\\\t#1,%w0\"\n   [(set_attr \"length\" \"8\")])\n \n-(define_insn \"*iorsi3_and_lshiftrt_9_sb\"\n+(define_insn_and_split \"*iorsi3_and_lshiftrt_9_sb\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(ior:SI (and:SI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t\t     (const_int 9))\n \t\t\t(const_int 4194304))\n \t\t(match_operand:SI 2 \"register_operand\" \"0\")))\n    (clobber (match_scratch:HI 3 \"=&r\"))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (ior:SI (and:SI (lshiftrt:SI (match_dup 1) (const_int 9))\n+\t\t\t\t   (const_int 4194304))\n+\t\t\t   (match_dup 2)))\n+\t      (clobber (match_dup 3))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+\n+(define_insn \"*iorsi3_and_lshiftrt_9_sb_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ior:SI (and:SI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t\t     (const_int 9))\n+\t\t\t(const_int 4194304))\n+\t\t(match_operand:SI 2 \"register_operand\" \"0\")))\n+   (clobber (match_scratch:HI 3 \"=&r\"))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n {\n   if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n     return \"shll.l\\\\t%S1\\;xor.w\\\\t%T3,%T3\\;bst\\\\t#6,%s3\\;or.w\\\\t%T3,%e0\";\n@@ -528,11 +955,12 @@\n   [(parallel [(set (match_dup 3)\n \t\t   (ashift:HI (match_dup 3)\n \t\t\t      (const_int 7)))\n-\t      (clobber (scratch:QI))])\n-   (set (match_dup 0)\n-\t(ior:SI (ashift:SI (match_dup 1)\n-\t\t\t   (const_int 16))\n-\t\t(match_dup 0)))]\n+\t      (clobber (scratch:QI))\n+\t      (clobber (reg:CC CC_REG))])\n+   (parallel [(set (match_dup 0)\n+\t\t    (ior:SI (ashift:SI (match_dup 1) (const_int 16))\n+\t\t\t    (match_dup 0)))\n+\t      (clobber (reg:CC CC_REG))])]\n   {\n     operands[3] = gen_rtx_REG (HImode, REGNO (operands[1]));\n   })\n@@ -546,27 +974,43 @@\n   \"epilogue_completed\n    && !(find_regno_note (insn, REG_DEAD, REGNO (operands[1]))\n \t&& REGNO (operands[0]) != REGNO (operands[1]))\"\n-  [(set (match_dup 2)\n-\t(match_dup 1))\n+  [(parallel [(set (match_dup 2) (match_dup 1))\n+\t      (clobber (reg:CC CC_REG))])\n    (parallel [(set (match_dup 3)\n \t\t   (ashift:HI (match_dup 3)\n \t\t\t      (const_int 7)))\n-\t      (clobber (scratch:QI))])\n-   (set (match_dup 0)\n-\t(ior:SI (ashift:SI (match_dup 2)\n-\t\t\t   (const_int 16))\n-\t\t(match_dup 0)))]\n+\t      (clobber (scratch:QI))\n+\t      (clobber (reg:CC CC_REG))])\n+   (parallel [(set (match_dup 0)\n+\t\t   (ior:SI (ashift:SI (match_dup 2) (const_int 16))\n+\t\t\t   (match_dup 0)))\n+\t      (clobber (reg:CC CC_REG))])]\n   {\n     operands[3] = gen_rtx_REG (HImode, REGNO (operands[2]));\n   })\n \n-(define_insn \"*iorsi2_and_1_lshiftrt_1\"\n+(define_insn_and_split \"*iorsi2_and_1_lshiftrt_1\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(ior:SI (and:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t\t(const_int 1))\n \t\t(lshiftrt:SI (match_dup 1)\n \t\t\t     (const_int 1))))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (ior:SI (and:SI (match_dup 1) (const_int 1))\n+\t\t\t   (lshiftrt:SI (match_dup 1) (const_int 1))))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*iorsi2_and_1_lshiftrt_1_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ior:SI (and:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t\t(const_int 1))\n+\t\t(lshiftrt:SI (match_dup 1)\n+\t\t\t     (const_int 1))))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"shlr.l\\\\t%S0\\;bor\\\\t#0,%w0\\;bst\\\\t#0,%w0\"\n   [(set_attr \"length\" \"6\")])\n \n@@ -579,14 +1023,15 @@\n   \"\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(set (match_dup 3)\n-        (ior:HI (ashift:HI (match_dup 4)\n-\t\t\t   (const_int 8))\n-\t\t(match_dup 3)))\n+  [(parallel [(set (match_dup 3)\n+\t\t   (ior:HI (ashift:HI (match_dup 4) (const_int 8))\n+\t\t\t   (match_dup 3)))\n+\t      (clobber (reg:CC CC_REG))])\n    (parallel [(set (match_dup 0)\n \t\t   (ashift:SI (match_dup 0)\n \t\t\t      (const_int 16)))\n-\t      (clobber (scratch:QI))])]\n+\t      (clobber (scratch:QI))\n+\t      (clobber (reg:CC CC_REG))])]\n   {\n     operands[3] = gen_rtx_REG (HImode, REGNO (operands[0]));\n     operands[4] = gen_rtx_REG (HImode, REGNO (operands[2]));\n@@ -602,14 +1047,16 @@\n   \"\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(set (match_dup 3)\n-        (ior:HI (zero_extend:HI (match_dup 1))\n-\t\t(ashift:HI (subreg:HI (match_dup 2) 0)\n-\t\t\t   (const_int 8))))\n+  [(parallel [(set (match_dup 3)\n+\t\t   (ior:HI (zero_extend:HI (match_dup 1))\n+\t\t\t   (ashift:HI (subreg:HI (match_dup 2) 0)\n+\t\t\t\t      (const_int 8))))\n+\t      (clobber (reg:CC CC_REG))])\n    (parallel [(set (match_dup 0)\n \t\t   (ashift:SI (match_dup 0)\n \t\t\t      (const_int 16)))\n-\t      (clobber (scratch:QI))])]\n+\t      (clobber (scratch:QI))\n+\t      (clobber (reg:CC CC_REG))])]\n   {\n     operands[3] = gen_rtx_REG (HImode, REGNO (operands[0]));\n   })\n@@ -637,11 +1084,12 @@\n   [(parallel [(set (match_dup 3)\n \t\t   (ashift:HI (match_dup 3)\n \t\t\t      (const_int 7)))\n-\t      (clobber (scratch:QI))])\n-   (set (match_dup 0)\n-\t(plus:SI (mult:SI (match_dup 1)\n-\t\t\t  (const_int 65536))\n-\t\t (match_dup 0)))]\n+\t      (clobber (scratch:QI))\n+\t      (clobber (reg:CC CC_REG))])\n+   (parallel [(set (match_dup 0)\n+\t\t   (plus:SI (mult:SI (match_dup 1) (const_int 65536))\n+\t\t\t    (match_dup 0)))\n+\t      (clobber (reg:CC CC_REG))])]\n   {\n     operands[3] = gen_rtx_REG (HImode, REGNO (operands[1]));\n   })\n@@ -655,16 +1103,17 @@\n   \"epilogue_completed\n    && !(find_regno_note (insn, REG_DEAD, REGNO (operands[1]))\n \t&& REGNO (operands[0]) != REGNO (operands[1]))\"\n-  [(set (match_dup 2)\n-\t(match_dup 1))\n+  [(parallel [(set (match_dup 2) (match_dup 1))\n+\t      (clobber (reg:CC CC_REG))])\n    (parallel [(set (match_dup 3)\n \t\t   (ashift:HI (match_dup 3)\n \t\t\t      (const_int 7)))\n-\t      (clobber (scratch:QI))])\n-   (set (match_dup 0)\n-\t(plus:SI (mult:SI (match_dup 2)\n-\t\t\t  (const_int 65536))\n-\t\t (match_dup 0)))]\n+\t      (clobber (scratch:QI))\n+\t      (clobber (reg:CC CC_REG))])\n+   (parallel [(set (match_dup 0)\n+\t\t   (plus:SI (mult:SI (match_dup 2) (const_int 65536))\n+\t\t\t    (match_dup 0)))\n+\t      (clobber (reg:CC CC_REG))])]\n   {\n     operands[3] = gen_rtx_REG (HImode, REGNO (operands[2]));\n   })\n@@ -681,93 +1130,149 @@\n   [(parallel [(set (match_dup 2)\n \t\t   (ashift:HI (match_dup 2)\n \t\t\t      (const_int 8)))\n-\t      (clobber (scratch:QI))])\n-   (set (match_dup 0)\n-\t(sign_extend:SI (match_dup 2)))\n+\t      (clobber (scratch:QI))\n+\t      (clobber (reg:CC CC_REG))])\n+   (parallel [(set (match_dup 0) (sign_extend:SI (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])\n    (parallel [(set (match_dup 0)\n \t\t   (ashiftrt:SI (match_dup 0)\n \t\t\t\t(const_int 1)))\n-\t      (clobber (scratch:QI))])]\n+\t      (clobber (scratch:QI))\n+\t      (clobber (reg:CC CC_REG))])]\n   {\n     operands[2] = gen_rtx_REG (HImode, REGNO (operands[0]));\n   })\n \n ;; Storing a part of HImode to QImode.\n \n-(define_insn \"\"\n+(define_insn_and_split \"\"\n   [(set (match_operand:QI 0 \"general_operand_dst\" \"=rm<\")\n \t(subreg:QI (lshiftrt:HI (match_operand:HI 1 \"register_operand\" \"r\")\n \t\t\t\t(const_int 8)) 1))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (subreg:QI (lshiftrt:HI (match_dup 1)\n+\t\t\t\t\t\t\t (const_int 8)) 1))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"\"\n+  [(set (match_operand:QI 0 \"general_operand_dst\" \"=rm<\")\n+\t(subreg:QI (lshiftrt:HI (match_operand:HI 1 \"register_operand\" \"r\")\n+\t\t\t\t(const_int 8)) 1))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"mov.b\\\\t%t1,%R0\"\n   [(set_attr \"cc\" \"set_znv\")\n    (set_attr \"length\" \"8\")])\n \n ;; Storing a part of SImode to QImode.\n \n-(define_insn \"\"\n+(define_insn_and_split \"\"\n   [(set (match_operand:QI 0 \"general_operand_dst\" \"=rm<\")\n \t(subreg:QI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t\t(const_int 8)) 3))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (subreg:QI (lshiftrt:SI (match_dup 1) (const_int 8)) 3))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"\"\n+  [(set (match_operand:QI 0 \"general_operand_dst\" \"=rm<\")\n+\t(subreg:QI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t\t(const_int 8)) 3))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"mov.b\\\\t%x1,%R0\"\n   [(set_attr \"cc\" \"set_znv\")\n    (set_attr \"length\" \"8\")])\n \n-(define_insn \"\"\n+(define_insn_and_split \"\"\n   [(set (match_operand:QI 0 \"general_operand_dst\" \"=rm<\")\n \t(subreg:QI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t\t(const_int 16)) 3))\n    (clobber (match_scratch:SI 2 \"=&r\"))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (subreg:QI (lshiftrt:SI (match_dup 1) (const_int 16)) 3))\n+\t      (clobber (match_dup 2))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"\"\n+  [(set (match_operand:QI 0 \"general_operand_dst\" \"=rm<\")\n+\t(subreg:QI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t\t(const_int 16)) 3))\n+   (clobber (match_scratch:SI 2 \"=&r\"))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"mov.w\\\\t%e1,%f2\\;mov.b\\\\t%w2,%R0\"\n   [(set_attr \"cc\" \"set_znv\")\n    (set_attr \"length\" \"10\")])\n \n-(define_insn \"\"\n+(define_insn_and_split \"\"\n   [(set (match_operand:QI 0 \"general_operand_dst\" \"=rm<\")\n \t(subreg:QI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t\t(const_int 24)) 3))\n    (clobber (match_scratch:SI 2 \"=&r\"))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (subreg:QI (lshiftrt:SI (match_dup 1) (const_int 24)) 3))\n+\t      (clobber (match_dup 2))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"\"\n+  [(set (match_operand:QI 0 \"general_operand_dst\" \"=rm<\")\n+\t(subreg:QI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t\t(const_int 24)) 3))\n+   (clobber (match_scratch:SI 2 \"=&r\"))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"mov.w\\\\t%e1,%f2\\;mov.b\\\\t%x2,%R0\"\n   [(set_attr \"cc\" \"set_znv\")\n    (set_attr \"length\" \"10\")])\n \n-(define_insn_and_split \"\"\n-  [(set (pc)\n-\t(if_then_else (eq (zero_extract:SI (subreg:SI (match_operand:QI 0 \"register_operand\" \"\") 0)\n-\t\t\t\t\t   (const_int 1)\n-\t\t\t\t\t   (const_int 7))\n-\t\t\t  (const_int 0))\n-\t\t      (match_operand 1 \"pc_or_label_operand\" \"\")\n-\t\t      (match_operand 2 \"pc_or_label_operand\" \"\")))]\n-  \"operands[1] == pc_rtx || operands[2] == pc_rtx\"\n-  \"#\"\n-  \"\"\n-  [(set (cc0) (compare (match_dup 0)\n-\t\t       (const_int 0)))\n-   (set (pc)\n-\t(if_then_else (ge (cc0)\n-\t\t\t  (const_int 0))\n-\t\t      (match_dup 1)\n-\t\t      (match_dup 2)))])\n-\n-(define_insn_and_split \"\"\n-  [(set (pc)\n-\t(if_then_else (ne (zero_extract:SI (subreg:SI (match_operand:QI 0 \"register_operand\" \"\") 0)\n-\t\t\t\t\t   (const_int 1)\n-\t\t\t\t\t   (const_int 7))\n-\t\t\t  (const_int 0))\n-\t\t      (match_operand 1 \"pc_or_label_operand\" \"\")\n-\t\t      (match_operand 2 \"pc_or_label_operand\" \"\")))]\n-  \"operands[1] == pc_rtx || operands[2] == pc_rtx\"\n-  \"#\"\n-  \"\"\n-  [(set (cc0) (compare (match_dup 0)\n-\t\t       (const_int 0)))\n-   (set (pc)\n-\t(if_then_else (lt (cc0)\n-\t\t\t  (const_int 0))\n-\t\t      (match_dup 1)\n-\t\t      (match_dup 2)))])\n+;;(define_insn_and_split \"\"\n+;;  [(set (pc)\n+;;\t(if_then_else (eq (zero_extract:SI (subreg:SI (match_operand:QI 0 \"register_operand\" \"\") 0)\n+;;\t\t\t\t\t   (const_int 1)\n+;;\t\t\t\t\t   (const_int 7))\n+;;\t\t\t  (const_int 0))\n+;;\t\t      (label_ref (match_operand 1 \"\" \"\"))\n+;;\t\t      (pc)))]\n+;;  \"\"\n+;;  \"#\"\n+;;  \"\"\n+;;  [(set (cc0) (compare (match_dup 0)\n+;;\t\t       (const_int 0)))\n+;;   (set (pc)\n+;;\t(if_then_else (ge (cc0)\n+;;\t\t\t  (const_int 0))\n+;;\t\t      (label_ref (match_dup 1))\n+;;\t\t      (pc)))]\n+;;  \"\")\n+;; \n+;; (define_insn_and_split \"\"\n+;;  [(set (pc)\n+;; \t(if_then_else (ne (zero_extract:SI (subreg:SI (match_operand:QI 0 \"register_operand\" \"\") 0)\n+;; \t\t\t\t\t   (const_int 1)\n+;; \t\t\t\t\t   (const_int 7))\n+;; \t\t\t  (const_int 0))\n+;; \t\t      (label_ref (match_operand 1 \"\" \"\"))\n+;; \t\t      (pc)))]\n+;;   \"\"\n+;;   \"#\"\n+;;   \"\"\n+;;   [(set (cc0) (compare (match_dup 0)\n+;; \t\t       (const_int 0)))\n+;;    (set (pc)\n+;; \t(if_then_else (lt (cc0)\n+;; \t\t\t  (const_int 0))\n+;; \t\t      (label_ref (match_dup 1))\n+;; \t\t      (pc)))]\n+;;   \"\")"}, {"sha": "b5ab6b727bba0cbab254c6ce24cc31196d0c5aca", "filename": "gcc/config/h8300/divmod.md", "status": "modified", "additions": 121, "deletions": 6, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fdivmod.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fdivmod.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fdivmod.md?ref=f16897cb4b1468374d63b1a6b12d8b7be845874a", "patch": "@@ -2,23 +2,45 @@\n ;; DIVIDE/MOD INSTRUCTIONS\n ;; ----------------------------------------------------------------------\n \n-(define_insn \"udiv<mode>3\"\n+(define_insn_and_split \"udiv<mode>3\"\n   [(set (match_operand:HSI 0 \"register_operand\" \"=r\")\n \t(udiv:HSI (match_operand:HSI 1 \"register_operand\" \"0\")\n \t\t  (match_operand:HSI 2 \"reg_or_nibble_operand\" \"r IP4>X\")))]\n   \"TARGET_H8300SX\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (udiv:HSI (match_dup 1) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"udiv<mode>3_clobber_flags\"\n+  [(set (match_operand:HSI 0 \"register_operand\" \"=r\")\n+\t(udiv:HSI (match_operand:HSI 1 \"register_operand\" \"0\")\n+\t\t  (match_operand:HSI 2 \"reg_or_nibble_operand\" \"r IP4>X\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_H8300SX\"\n   { return <MODE>mode == HImode ? \"divu.w\\\\t%T2,%T0\" : \"divu.l\\\\t%S2,%S0\"; }\n   [(set_attr \"length\" \"4\")])\n \n-(define_insn \"div<mode>3\"\n+(define_insn_and_split \"div<mode>3\"\n   [(set (match_operand:HSI 0 \"register_operand\" \"=r\")\n \t(div:HSI (match_operand:HSI 1 \"register_operand\" \"0\")\n \t\t (match_operand:HSI 2 \"reg_or_nibble_operand\" \"r IP4>X\")))]\n   \"TARGET_H8300SX\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (div:HSI (match_dup 1) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"div<mode>3_clobber_flags\"\n+  [(set (match_operand:HSI 0 \"register_operand\" \"=r\")\n+\t(div:HSI (match_operand:HSI 1 \"register_operand\" \"0\")\n+\t\t (match_operand:HSI 2 \"reg_or_nibble_operand\" \"r IP4>X\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_H8300SX\"\n   { return <MODE>mode == HImode ? \"divs.w\\\\t%T2,%T0\" : \"divs.l\\\\t%S2,%S0\"; }\n   [(set_attr \"length\" \"4\")])\n \n-(define_insn \"udivmodqi4\"\n+(define_insn_and_split \"udivmodqi4\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n \t(truncate:QI\n \t  (udiv:HI\n@@ -30,6 +52,30 @@\n \t    (match_dup 1)\n \t    (zero_extend:HI (match_dup 2)))))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (truncate:QI\n+\t\t\t\t   (udiv:HI (match_dup 1)\n+\t\t\t\t\t    (zero_extend:HI (match_dup 2)))))\n+\t      (set (match_dup 3) (truncate:QI\n+\t\t\t\t   (umod:HI (match_dup 1)\n+\t\t\t\t\t    (zero_extend:HI (match_dup 2)))))\n+\t      (clobber (reg:CC CC_REG))])])\n+\t\t\t\t\t\t\t\n+\n+(define_insn \"udivmodqi4_clobber_flags\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n+\t(truncate:QI\n+\t  (udiv:HI\n+\t    (match_operand:HI 1 \"register_operand\" \"0\")\n+\t    (zero_extend:HI (match_operand:QI 2 \"register_operand\" \"r\")))))\n+   (set (match_operand:QI 3 \"register_operand\" \"=r\")\n+\t(truncate:QI\n+\t  (umod:HI\n+\t    (match_dup 1)\n+\t    (zero_extend:HI (match_dup 2)))))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n {\n   if (find_reg_note (insn, REG_UNUSED, operands[3]))\n     return \"divxu.b\\\\t%X2,%T0\";\n@@ -38,7 +84,7 @@\n }\n   [(set_attr \"length\" \"4\")])\n \n-(define_insn \"divmodqi4\"\n+(define_insn_and_split \"divmodqi4\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n \t(truncate:QI\n \t  (div:HI\n@@ -50,6 +96,29 @@\n \t    (match_dup 1)\n \t    (sign_extend:HI (match_dup 2)))))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (truncate:QI\n+\t\t\t\t   (div:HI (match_dup 1)\n+\t\t\t\t\t   (sign_extend:HI (match_dup 2)))))\n+\t      (set (match_dup 3) (truncate:QI\n+\t\t\t\t   (mod:HI (match_dup 1)\n+\t\t\t\t\t   (sign_extend:HI (match_dup 2)))))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"divmodqi4_clobber_flags\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n+\t(truncate:QI\n+\t  (div:HI\n+\t    (match_operand:HI 1 \"register_operand\" \"0\")\n+\t    (sign_extend:HI (match_operand:QI 2 \"register_operand\" \"r\")))))\n+   (set (match_operand:QI 3 \"register_operand\" \"=r\")\n+\t(truncate:QI\n+\t  (mod:HI\n+\t    (match_dup 1)\n+\t    (sign_extend:HI (match_dup 2)))))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n {\n   if (find_reg_note (insn, REG_UNUSED, operands[3]))\n     return \"divxs.b\\\\t%X2,%T0\";\n@@ -58,7 +127,7 @@\n }\n   [(set_attr \"length\" \"6\")])\n \n-(define_insn \"udivmodhi4\"\n+(define_insn_and_split \"udivmodhi4\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(truncate:HI\n \t  (udiv:SI\n@@ -70,6 +139,29 @@\n \t    (match_dup 1)\n \t    (zero_extend:SI (match_dup 2)))))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (truncate:HI\n+\t\t\t\t   (udiv:SI (match_dup 1)\n+\t\t\t\t\t    (zero_extend:SI (match_dup 2)))))\n+\t      (set (match_dup 3) (truncate:HI\n+\t\t\t\t   (umod:SI (match_dup 1)\n+\t\t\t\t\t    (zero_extend:SI (match_dup 2)))))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"udivmodhi4_clobber_flags\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(truncate:HI\n+\t  (udiv:SI\n+\t    (match_operand:SI 1 \"register_operand\" \"0\")\n+\t    (zero_extend:SI (match_operand:HI 2 \"register_operand\" \"r\")))))\n+   (set (match_operand:HI 3 \"register_operand\" \"=r\")\n+\t(truncate:HI\n+\t  (umod:SI\n+\t    (match_dup 1)\n+\t    (zero_extend:SI (match_dup 2)))))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n {\n   if (find_reg_note (insn, REG_UNUSED, operands[3]))\n     return \"divxu.w\\\\t%T2,%S0\";\n@@ -78,7 +170,7 @@\n }\n   [(set_attr \"length\" \"4\")])\n \n-(define_insn \"divmodhi4\"\n+(define_insn_and_split \"divmodhi4\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(truncate:HI\n \t  (div:SI\n@@ -90,6 +182,29 @@\n \t    (match_dup 1)\n \t    (sign_extend:SI (match_dup 2)))))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (truncate:HI\n+\t\t\t\t   (div:SI (match_dup 1)\n+\t\t\t\t\t   (sign_extend:SI (match_dup 2)))))\n+\t      (set (match_dup 3) (truncate:HI\n+\t\t\t\t   (mod:SI (match_dup 1)\n+\t\t\t\t\t   (sign_extend:SI (match_dup 2)))))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"divmodhi4_clobber_flags\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(truncate:HI\n+\t  (div:SI\n+\t    (match_operand:SI 1 \"register_operand\" \"0\")\n+\t    (sign_extend:SI (match_operand:HI 2 \"register_operand\" \"r\")))))\n+   (set (match_operand:HI 3 \"register_operand\" \"=r\")\n+\t(truncate:HI\n+\t  (mod:SI\n+\t    (match_dup 1)\n+\t    (sign_extend:SI (match_dup 2)))))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n {\n   if (find_reg_note (insn, REG_UNUSED, operands[3]))\n     return \"divxs.w\\\\t%T2,%S0\";"}, {"sha": "7631230ac33af58c7eabe259148cfff86c4f8208", "filename": "gcc/config/h8300/extensions.md", "status": "modified", "additions": 96, "deletions": 40, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fextensions.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fextensions.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fextensions.md?ref=f16897cb4b1468374d63b1a6b12d8b7be845874a", "patch": "@@ -11,15 +11,24 @@\n       operands[1] = force_reg (QImode, operands[1]);\n   })\n \n-(define_insn \"*zero_extendqihi2_h8300hs\"\n+(define_insn_and_split \"*zero_extendqihi2\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:HI (match_operand:QI 1 \"general_operand_src\" \"0,g>\")))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (zero_extend:HI (match_dup 1)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*zero_extendqihi2_clobber_flags\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n+\t(zero_extend:HI (match_operand:QI 1 \"general_operand_src\" \"0,g>\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"@\n   extu.w\t%T0\n   #\"\n-  [(set_attr \"length\" \"2,10\")\n-   (set_attr \"cc\" \"set_znv,set_znv\")])\n+  [(set_attr \"length\" \"2,10\")])\n \n ;; Split the zero extension of a general operand (actually a memory\n ;; operand) into a load of the operand and the actual zero extension\n@@ -28,34 +37,36 @@\n \n (define_split\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n-\t(zero_extend:HI (match_operand:QI 1 \"general_operand_src\" \"\")))]\n+\t(zero_extend:HI (match_operand:QI 1 \"general_operand_src\" \"\")))\n+   (clobber (reg:CC CC_REG))]\n   \"reload_completed\"\n-  [(set (match_dup 2)\n-\t(match_dup 1))\n-   (set (match_dup 0)\n-\t(zero_extend:HI (match_dup 2)))]\n+  [(set (match_dup 2) (match_dup 1))\n+   (parallel [(set (match_dup 0) (zero_extend:HI (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])]\n   {\n     operands[2] = gen_rtx_REG (QImode, REGNO (operands[0]));\n   })\n \n-(define_insn \"*zero_extendqisi2_h8300hs\"\n+(define_insn \"*zero_extendqisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:SI (match_operand:QI 1 \"general_operand_src\" \"0,g>\")))]\n-  \"!TARGET_H8300SX\"\n+  \"!reload_completed && !TARGET_H8300SX\"\n   \"#\")\n \n+;; Two cases for the !H8/SX target.  One where there is an overlap\n+;; between the source and destination, one where there is no overlap\n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(zero_extend:SI (match_operand:QI 1 \"general_operand_src\" \"\")))]\n   \"!TARGET_H8300SX\n     && reg_overlap_mentioned_p (operands[0], operands[1])\n     && reload_completed\"\n-  [(set (match_dup 2)\n-\t(match_dup 1))\n-   (set (match_dup 3)\n-\t(zero_extend:HI (match_dup 2)))\n-   (set (match_dup 0)\n-\t(zero_extend:SI (match_dup 3)))]\n+  [(parallel [(set (match_dup 2) (match_dup 1))\n+\t      (clobber (reg:CC CC_REG))])\n+   (parallel [(set (match_dup 3) (zero_extend:HI (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])\n+   (parallel [(set (match_dup 0) (zero_extend:SI (match_dup 3)))\n+\t      (clobber (reg:CC CC_REG))])]\n   {\n     operands[2] = gen_lowpart (QImode, operands[0]);\n     operands[3] = gen_lowpart (HImode, operands[0]);\n@@ -67,86 +78,131 @@\n   \"!TARGET_H8300SX\n     && !reg_overlap_mentioned_p (operands[0], operands[1])\n     && reload_completed\"\n-  [(set (match_dup 0)\n-\t(const_int 0))\n-   (set (strict_low_part (match_dup 2))\n-\t(match_dup 1))]\n+  [(parallel [(set (match_dup 0) (const_int 0))\n+\t      (clobber (reg:CC CC_REG))])\n+   (parallel [(set (strict_low_part (match_dup 2)) (match_dup 1))\n+\t      (clobber (reg:CC CC_REG))])]\n   {\n     operands[2] = gen_rtx_REG (QImode, REGNO (operands[0]));\n   })\n \n-(define_insn \"*zero_extendqisi2_h8sx\"\n+(define_insn_and_split \"*zero_extendqisi2_h8sx\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(zero_extend:SI (match_operand:QI 1 \"register_operand\" \"0\")))]\n   \"TARGET_H8300SX\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (zero_extend:SI (match_dup 1)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*zero_extendqisi2_h8sx_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:SI (match_operand:QI 1 \"register_operand\" \"0\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_H8300SX\"\n   \"extu.l\\t#2,%0\"\n-  [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_znv\")])\n+  [(set_attr \"length\" \"2\")])\n \n (define_expand \"zero_extendhisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(zero_extend:SI (match_operand:HI 1 \"register_operand\" \"\")))]\n   \"\"\n   \"\")\n \n-(define_insn \"*zero_extendhisi2_h8300hs\"\n+(define_insn_and_split \"*zero_extendhisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(zero_extend:SI (match_operand:HI 1 \"register_operand\" \"0\")))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (zero_extend:SI (match_dup 1)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*zero_extendhisi2_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:SI (match_operand:HI 1 \"register_operand\" \"0\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"extu.l\t%S0\"\n-  [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_znv\")])\n+  [(set_attr \"length\" \"2\")])\n \n (define_expand \"extendqi<mode>2\"\n   [(set (match_operand:HSI 0 \"register_operand\" \"\")\n \t(sign_extend:HSI (match_operand:QI 1 \"register_operand\" \"\")))]\n   \"\"\n   \"\")\n \n-(define_insn \"*extendqihi2_h8300hs\"\n+(define_insn_and_split \"*extendqihi2\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(sign_extend:HI (match_operand:QI 1 \"register_operand\" \"0\")))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (sign_extend:HI (match_dup 1)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*extendqihi2_clobber_flags\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:HI (match_operand:QI 1 \"register_operand\" \"0\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"exts.w\t%T0\"\n-  [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_znv\")])\n+  [(set_attr \"length\" \"2\")])\n \n ;; The following pattern is needed because without the pattern, the\n ;; combiner would split (sign_extend:SI (reg:QI)) into two 24-bit\n ;; shifts, one ashift and one ashiftrt.\n \n-(define_insn_and_split \"*extendqisi2_h8300hs\"\n+(define_insn_and_split \"*extendqisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(sign_extend:SI (match_operand:QI 1 \"register_operand\" \"0\")))]\n   \"!TARGET_H8300SX\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(set (match_dup 2)\n-\t(sign_extend:HI (match_dup 1)))\n-   (set (match_dup 0)\n-\t(sign_extend:SI (match_dup 2)))]\n+  [(parallel [(set (match_dup 2) (sign_extend:HI (match_dup 1)))\n+\t      (clobber (reg:CC CC_REG))])\n+   (parallel [(set (match_dup 0) (sign_extend:SI (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])]\n   {\n     operands[2] = gen_rtx_REG (HImode, REGNO (operands[0]));\n   })\n \n-(define_insn \"*extendqisi2_h8sx\"\n+(define_insn_and_split \"*extendqisi2_h8sx\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(sign_extend:SI (match_operand:QI 1 \"register_operand\" \"0\")))]\n   \"TARGET_H8300SX\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (sign_extend:SI (match_dup 1)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*extendqisi2_h8sx_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:SI (match_operand:QI 1 \"register_operand\" \"0\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_H8300SX\"\n   \"exts.l\\t#2,%0\"\n-  [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_znv\")])\n+  [(set_attr \"length\" \"2\")])\n \n (define_expand \"extendhisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(sign_extend:SI (match_operand:HI 1 \"register_operand\" \"\")))]\n   \"\"\n   \"\")\n \n-(define_insn \"*extendhisi2_h8300hs\"\n+(define_insn_and_split \"*extendhisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(sign_extend:SI (match_operand:HI 1 \"register_operand\" \"0\")))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (sign_extend:SI (match_dup 1)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*extendhisi2_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:SI (match_operand:HI 1 \"register_operand\" \"0\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"exts.l\t%S0\"\n-  [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_znv\")])\n+  [(set_attr \"length\" \"2\")])"}, {"sha": "8ab018f70e14ed6bf9bf05ded256b4ee25848979", "filename": "gcc/config/h8300/genmova.sh", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fgenmova.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fgenmova.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fgenmova.sh?ref=f16897cb4b1468374d63b1a6b12d8b7be845874a", "patch": "@@ -71,8 +71,7 @@ for s in QI HI; do\n \t\t (match_operand:$d 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/b.l @(%o2%C2,$src),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n EOF\n \t;;\n@@ -115,8 +114,7 @@ EOF\n \t\t (match_operand:$d 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/$opsize.l @(%o2%C2,$src),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n EOF\n \t    ;;\n@@ -134,8 +132,7 @@ EOF\n \t\t  (const_int $amount)))]\n   \"TARGET_H8300SX\"\n   \"mova/$opsize.l @(0,$src),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:$d 0 \"register_operand\" \"=r,r\")\n@@ -144,8 +141,7 @@ EOF\n \t\t (match_operand:$d 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/$opsize.l @(%o2%C2,$src),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n EOF\n \n@@ -174,8 +170,7 @@ EOF\n \t\t(const_int $mask)))]\n   \"TARGET_H8300SX\"\n   \"mova/$opsize.l @(0,$src),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:$d 0 \"register_operand\" \"=r\")\n@@ -185,8 +180,7 @@ EOF\n \t\t (match_operand:$d 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/$opsize.l @(%o2%C2,$src),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n EOF\n \t      done"}, {"sha": "2f36c7ead8d8fcb005ed600f0900ddb2e5e2eb81", "filename": "gcc/config/h8300/h8300-modes.def", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fh8300-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fh8300-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-modes.def?ref=f16897cb4b1468374d63b1a6b12d8b7be845874a", "patch": "@@ -0,0 +1,21 @@\n+/* Definitions of target machine for GNU compiler. \n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+CC_MODE (CCZN);\n+CC_MODE (CCZNV);"}, {"sha": "2d900369ef587c62dfed1becced8cc66cab488df", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=f16897cb4b1468374d63b1a6b12d8b7be845874a", "patch": "@@ -26,23 +26,25 @@ along with GCC; see the file COPYING3.  If not see\n /* Declarations for functions used in insn-output.c.  */\n #ifdef RTX_CODE\n extern unsigned int compute_mov_length (rtx *);\n-extern const char *output_plussi (rtx *);\n-extern unsigned int compute_plussi_length (rtx *);\n+extern const char *output_plussi (rtx *, bool);\n+extern unsigned int compute_plussi_length (rtx *, bool);\n extern const char *output_a_shift (rtx *);\n extern unsigned int compute_a_shift_length (rtx, rtx *);\n extern const char *output_a_rotate (enum rtx_code, rtx *);\n extern unsigned int compute_a_rotate_length (rtx *);\n extern const char *output_simode_bld (int, rtx[]);\n extern void final_prescan_insn (rtx_insn *, rtx *, int);\n extern int h8300_expand_movsi (rtx[]);\n+extern machine_mode  h8300_select_cc_mode (RTX_CODE, rtx, rtx);\n extern void notice_update_cc (rtx, rtx_insn *);\n extern const char *output_logical_op (machine_mode, rtx *);\n extern unsigned int compute_logical_op_length (machine_mode,\n \t\t\t\t\t       rtx *);\n+\n+extern int compute_logical_op_cc (machine_mode, rtx *);\n+extern int compute_a_shift_cc (rtx, rtx *);\n #ifdef HAVE_ATTR_cc\n extern enum attr_cc compute_plussi_cc (rtx *);\n-extern enum attr_cc compute_a_shift_cc (rtx, rtx *);\n-extern enum attr_cc compute_logical_op_cc (machine_mode, rtx *);\n #endif\n extern void h8300_expand_branch (rtx[]);\n extern void h8300_expand_store (rtx[]);"}, {"sha": "1982e2605bce1e81c0195409746bdd7fdc90645a", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 108, "deletions": 26, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=f16897cb4b1468374d63b1a6b12d8b7be845874a", "patch": "@@ -132,13 +132,13 @@ static int pragma_interrupt;\n static int pragma_saveall;\n \n static const char *const names_big[] =\n-{ \"r0\", \"r1\", \"r2\", \"r3\", \"r4\", \"r5\", \"r6\", \"r7\" };\n+{ \"r0\", \"r1\", \"r2\", \"r3\", \"r4\", \"r5\", \"r6\", \"r7\", \"cc\" };\n \n static const char *const names_extended[] =\n-{ \"er0\", \"er1\", \"er2\", \"er3\", \"er4\", \"er5\", \"er6\", \"er7\" };\n+{ \"er0\", \"er1\", \"er2\", \"er3\", \"er4\", \"er5\", \"er6\", \"er7\", \"cc\" };\n \n static const char *const names_upper_extended[] =\n-{ \"e0\", \"e1\", \"e2\", \"e3\", \"e4\", \"e5\", \"e6\", \"e7\" };\n+{ \"e0\", \"e1\", \"e2\", \"e3\", \"e4\", \"e5\", \"e6\", \"e7\", \"cc\" };\n \n /* Points to one of the above.  */\n /* ??? The above could be put in an array indexed by CPU_TYPE.  */\n@@ -469,11 +469,11 @@ h8300_emit_stack_adjustment (int sign, HOST_WIDE_INT size, bool in_prologue)\n \t\t\t\t\t   stack_pointer_rtx,\n \t\t\t\t\t    GEN_INT (sign * size)));\n       if (size < 4)\n-        F (x, in_prologue);\n+        F (x, 0);\n     }\n   else\n     F (emit_insn (gen_addsi3 (stack_pointer_rtx,\n-\t\t\t      stack_pointer_rtx, GEN_INT (sign * size))), in_prologue);\n+\t\t\t      stack_pointer_rtx, GEN_INT (sign * size))), 0);\n }\n \n /* Round up frame size SIZE.  */\n@@ -520,7 +520,7 @@ push (int rn, bool in_prologue)\n     x = gen_push_h8300hs_advanced (reg);\n   else\n     x = gen_push_h8300hs_normal (reg);\n-  x = F (emit_insn (x), in_prologue);\n+  x = F (emit_insn (x), 0);\n   add_reg_note (x, REG_INC, stack_pointer_rtx);\n   return x;\n }\n@@ -756,7 +756,7 @@ h8300_expand_prologue (void)\n     {\n       /* Push fp.  */\n       push (HARD_FRAME_POINTER_REGNUM, true);\n-      F (emit_move_insn (hard_frame_pointer_rtx, stack_pointer_rtx), true);\n+      F (emit_move_insn (hard_frame_pointer_rtx, stack_pointer_rtx), 0);\n     }\n \n   /* Push the rest of the registers in ascending order.  */\n@@ -1508,10 +1508,20 @@ h8300_print_operand (FILE *file, rtx x, int code)\n \t}\n       break;\n     case 'j':\n-      fputs (cond_string (GET_CODE (x)), file);\n+      if (GET_CODE (x) == LT && GET_MODE (XEXP (x, 0)) == E_CCZNmode)\n+\tfputs (\"mi\", file);\n+      else if (GET_CODE (x) == GE && GET_MODE (XEXP (x, 0)) == E_CCZNmode)\n+\tfputs (\"pl\", file);\n+      else\n+\tfputs (cond_string (GET_CODE (x)), file);\n       break;\n     case 'k':\n-      fputs (cond_string (reverse_condition (GET_CODE (x))), file);\n+      if (GET_CODE (x) == LT && GET_MODE (XEXP (x, 0)) == E_CCZNmode)\n+\tfputs (\"pl\", file);\n+      else if (GET_CODE (x) == GE && GET_MODE (XEXP (x, 0)) == E_CCZNmode)\n+\tfputs (\"mi\", file);\n+      else\n+\tfputs (cond_string (reverse_condition (GET_CODE (x))), file);\n       break;\n     case 'm':\n       gcc_assert (GET_CODE (x) == CONST_INT);\n@@ -1920,6 +1930,23 @@ h8300_return_addr_rtx (int count, rtx frame)\n   return ret;\n }\n \n+\n+machine_mode\n+h8300_select_cc_mode (enum rtx_code cond, rtx op0, rtx op1)\n+{\n+  if (op1 == const0_rtx\n+      && (cond == EQ || cond == NE || cond == LT || cond == GE)\n+      && (GET_CODE (op0) == PLUS || GET_CODE (op0) == MINUS\n+          || GET_CODE (op0) == NEG || GET_CODE (op0) == AND\n+          || GET_CODE (op0) == IOR || GET_CODE (op0) == XOR\n+          || GET_CODE (op0) == NOT || GET_CODE (op0) == ASHIFT\n+\t  || GET_CODE (op0) == REG || GET_CODE (op0) == MULT))\n+    return CCZNmode;\n+\n+  return CCmode;\n+}\n+\n+#if 0\n /* Update the condition code from the insn.  */\n \n void\n@@ -1986,6 +2013,7 @@ notice_update_cc (rtx body, rtx_insn *insn)\n       break;\n     }\n }\n+#endif\n \f\n /* Given that X occurs in an address of the form (plus X constant),\n    return the part of X that is expected to be a register.  There are\n@@ -2344,8 +2372,18 @@ static unsigned int\n h8300_binary_length (rtx_insn *insn, const h8300_length_table *table)\n {\n   rtx set;\n+  rtx pattern;\n+\n+  if (GET_CODE (insn) != INSN)\n+    gcc_unreachable ();\n \n-  set = single_set (insn);\n+  pattern = PATTERN (insn);\n+  if (GET_CODE (pattern) == PARALLEL\n+      && GET_CODE (XVECEXP (pattern, 0, 0)) == SET\n+      && GET_CODE (SET_SRC (XVECEXP (pattern, 0, 0))) == COMPARE)\n+    set = XVECEXP (pattern, 0, 1);\n+  else\n+    set = single_set (insn);\n   gcc_assert (set);\n \n   if (BINARY_P (SET_SRC (set)))\n@@ -2678,7 +2716,7 @@ compute_mov_length (rtx *operands)\n /* Output an addition insn.  */\n \n const char *\n-output_plussi (rtx *operands)\n+output_plussi (rtx *operands, bool need_flags)\n {\n   machine_mode mode = GET_MODE (operands[0]);\n \n@@ -2698,25 +2736,54 @@ output_plussi (rtx *operands)\n \n       switch ((unsigned int) intval & 0xffffffff)\n \t{\n+\t/* INC/DEC set the flags, but adds/subs do not.  So if we\n+\t   need flags, use the former and not the latter.  */\n \tcase 0x00000001:\n+\t  if (need_flags)\n+\t    return \"inc.l\\t#1,%S0\";\n+\t  else\n+\t    return \"adds\\t%2,%S0\";\n \tcase 0x00000002:\n-\tcase 0x00000004:\n-\t  return \"adds\\t%2,%S0\";\n-\n+\t  if (need_flags)\n+\t    return \"inc.l\\t#2,%S0\";\n+\t  else\n+\t    return \"adds\\t%2,%S0\";\n \tcase 0xffffffff:\n+\t  if (need_flags)\n+\t    return \"dec.l\\t#1,%S0\";\n+\t  else\n+\t    return \"subs\\t%G2,%S0\";\n \tcase 0xfffffffe:\n+\t  if (need_flags)\n+\t    return \"dec.l\\t#2,%S0\";\n+\t  else\n+\t    return \"subs\\t%G2,%S0\";\n+\n+\t/* These six cases have optimized paths when we do not\n+\t   need flags.  Otherwise we let them fallthru.  */\n+\tcase 0x00000004:\n+\t  if (!need_flags)\n+\t    return \"adds\\t%2,%S0\";\n+\n \tcase 0xfffffffc:\n-\t  return \"subs\\t%G2,%S0\";\n+\t  if (!need_flags)\n+\t    return \"subs\\t%G2,%S0\";\n \n \tcase 0x00010000:\n \tcase 0x00020000:\n-\t  operands[2] = GEN_INT (intval >> 16);\n-\t  return \"inc.w\\t%2,%e0\";\n+\t  if (!need_flags)\n+\t    {\n+\t      operands[2] = GEN_INT (intval >> 16);\n+\t      return \"inc.w\\t%2,%e0\";\n+\t    }\n \n \tcase 0xffff0000:\n \tcase 0xfffe0000:\n-\t  operands[2] = GEN_INT (intval >> 16);\n-\t  return \"dec.w\\t%G2,%e0\";\n+\t  if (!need_flags)\n+\t    {\n+\t      operands[2] = GEN_INT (intval >> 16);\n+\t      return \"dec.w\\t%G2,%e0\";\n+\t    }\n \t}\n \n       /* See if we can finish with 4 bytes.  */\n@@ -2740,7 +2807,7 @@ output_plussi (rtx *operands)\n /* Compute the length of an addition insn.  */\n \n unsigned int\n-compute_plussi_length (rtx *operands)\n+compute_plussi_length (rtx *operands, bool need_flags)\n {\n   machine_mode mode = GET_MODE (operands[0]);\n \n@@ -2762,21 +2829,31 @@ compute_plussi_length (rtx *operands)\n \t{\n \tcase 0x00000001:\n \tcase 0x00000002:\n-\tcase 0x00000004:\n \t  return 2;\n+\tcase 0x00000004:\n+\t  if (need_flags)\n+\t    return 6;\n+\t  else\n+\t    return 2;\n \n \tcase 0xffffffff:\n \tcase 0xfffffffe:\n-\tcase 0xfffffffc:\n \t  return 2;\n+\tcase 0xfffffffc:\n+\t  if (need_flags)\n+\t    return 6;\n+\t  else\n+\t    return 2;\n \n \tcase 0x00010000:\n \tcase 0x00020000:\n-\t  return 2;\n+\t  if (!need_flags)\n+\t    return 2;\n \n \tcase 0xffff0000:\n \tcase 0xfffe0000:\n-\t  return 2;\n+\t  if (!need_flags)\n+\t    return 2;\n \t}\n \n       /* See if we can finish with 4 bytes.  */\n@@ -3122,7 +3199,7 @@ compute_logical_op_length (machine_mode mode, rtx *operands)\n \n /* Compute which flag bits are valid after a logical insn.  */\n \n-enum attr_cc\n+int\n compute_logical_op_cc (machine_mode mode, rtx *operands)\n {\n   /* Figure out the logical op that we need to perform.  */\n@@ -3195,6 +3272,7 @@ compute_logical_op_cc (machine_mode mode, rtx *operands)\n   return cc;\n }\n \f\n+#if 0\n /* Expand a conditional branch.  */\n \n void\n@@ -3234,6 +3312,7 @@ h8300_expand_store (rtx operands[])\n   tmp = gen_rtx_fmt_ee (code, GET_MODE (dest), cc0_rtx, const0_rtx);\n   emit_insn (gen_rtx_SET (dest, tmp));\n }\n+#endif\n \f\n /* Shifts.\n \n@@ -4299,7 +4378,7 @@ compute_a_shift_length (rtx insn ATTRIBUTE_UNUSED, rtx *operands)\n \n /* Compute which flag bits are valid after a shift insn.  */\n \n-enum attr_cc\n+int\n compute_a_shift_cc (rtx insn ATTRIBUTE_UNUSED, rtx *operands)\n {\n   rtx shift = operands[3];\n@@ -5533,4 +5612,7 @@ h8300_push_rounding (poly_int64 bytes)\n #undef TARGET_HAVE_SPECULATION_SAFE_VALUE\n #define TARGET_HAVE_SPECULATION_SAFE_VALUE speculation_safe_value_not_needed\n \n+#undef TARGET_FLAGS_REGNUM\n+#define TARGET_FLAGS_REGNUM 12\n+\n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "99d85ff8138ad02e6a836e2fb9e30bc3904631b3", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=f16897cb4b1468374d63b1a6b12d8b7be845874a", "patch": "@@ -195,14 +195,14 @@ extern const char * const *h8_reg_names;\n    eliminated during reloading in favor of either the stack or frame\n    pointer.  */\n \n-#define FIRST_PSEUDO_REGISTER 12\n+#define FIRST_PSEUDO_REGISTER 13\n \n /* 1 for registers that have pervasive standard uses\n    and are not available for the register allocator.  */\n \n #define FIXED_REGISTERS\t\t\t\t\\\n-/* r0 r1 r2 r3 r4 r5 r6 r7 mac ap rap fp */\t\\\n-  { 0, 0, 0, 0, 0, 0, 0, 1,  0, 1,  1, 1 }\n+/* r0 r1 r2 r3 r4 r5 r6 r7 mac ap rap fp cc */\t\\\n+  { 0, 0, 0, 0, 0, 0, 0, 1,  0, 1,  1, 1, 1 }\n \n /* 1 for registers not available across function calls.\n    These must include the FIXED_REGISTERS and also any\n@@ -216,11 +216,11 @@ extern const char * const *h8_reg_names;\n \n #define CALL_USED_REGISTERS\t\t\t\\\n /* r0 r1 r2 r3 r4 r5 r6 r7 mac ap rap fp */\t\\\n-  { 1, 1, 1, 1, 0, 0, 0, 1,  1, 1,  1, 1 }\n+  { 1, 1, 1, 1, 0, 0, 0, 1,  1, 1,  1, 1, 1 }\n \n #define REG_ALLOC_ORDER\t\t\t\t\\\n /* r0 r1 r2 r3 r4 r5 r6 r7 mac ap rap  fp */\t\\\n-  { 2, 3, 0, 1, 4, 5, 6, 8,  7, 9, 10, 11 }\n+  { 2, 3, 0, 1, 4, 5, 6, 8,  7, 9, 10, 11, 12 }\n \n /* A C expression that is nonzero if hard register NEW_REG can be\n    considered for use as a rename register for OLD_REG register */\n@@ -521,6 +521,8 @@ struct cum_arg\n #define MOVE_MAX\t4\n #define MAX_MOVE_MAX\t4\n \n+#define SELECT_CC_MODE(OP, X, Y)       h8300_select_cc_mode (OP, X, Y)\n+\n /* Nonzero if access to memory by bytes is slow and undesirable.  */\n #define SLOW_BYTE_ACCESS TARGET_SLOWBYTE\n \n@@ -633,7 +635,7 @@ struct cum_arg\n    This sequence is indexed by compiler's hard-register-number (see above).  */\n \n #define REGISTER_NAMES \\\n-{ \"r0\", \"r1\", \"r2\", \"r3\", \"r4\", \"r5\", \"r6\", \"sp\", \"mac\", \"ap\", \"rap\", \"fp\" }\n+{ \"r0\", \"r1\", \"r2\", \"r3\", \"r4\", \"r5\", \"r6\", \"sp\", \"mac\", \"ap\", \"rap\", \"fp\", \"cc\" }\n \n #define ADDITIONAL_REGISTER_NAMES \\\n { {\"er0\", 0}, {\"er1\", 1}, {\"er2\", 2}, {\"er3\", 3}, {\"er4\", 4}, \\"}, {"sha": "7ed2453f43320b02372b7adb2808b4030e4fb243", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=f16897cb4b1468374d63b1a6b12d8b7be845874a", "patch": "@@ -65,7 +65,8 @@\n    (MAC_REG\t 8)\n    (AP_REG\t 9)\n    (RAP_REG\t10)\n-   (FP_REG\t11)])\n+   (FP_REG\t11)\n+   (CC_REG\t12)])\n \n ;; ----------------------------------------------------------------------\n ;; ATTRIBUTES\n@@ -211,4 +212,4 @@\n (include \"shiftrotate.md\")\n (include \"bitfield.md\")\n (include \"combiner.md\")\n-(include \"peepholes.md\")\n+;;(include \"peepholes.md\")"}, {"sha": "6c72724b669c21d0705bbe075e8a87c0f84b901c", "filename": "gcc/config/h8300/jumpcall.md", "status": "modified", "additions": 34, "deletions": 61, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fjumpcall.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fjumpcall.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fjumpcall.md?ref=f16897cb4b1468374d63b1a6b12d8b7be845874a", "patch": "@@ -4,57 +4,41 @@\n \n ;; Conditional jump instructions\n \n-(define_expand \"cbranchqi4\"\n-  [(use (match_operator 0 \"ordered_comparison_operator\"\n-         [(match_operand:QI 1 \"h8300_dst_operand\" \"\")\n-          (match_operand:QI 2 \"h8300_src_operand\" \"\")]))\n-   (use (match_operand 3 \"\"))]\n-  \"\"\n-  {\n-    h8300_expand_branch (operands);\n-    DONE;\n-  })\n-\n-(define_expand \"cbranchhi4\"\n-  [(use (match_operator 0 \"ordered_comparison_operator\"\n-         [(match_operand:HI 1 \"h8300_dst_operand\" \"\")\n-          (match_operand:HI 2 \"h8300_src_operand\" \"\")]))\n-   (use (match_operand 3 \"\"))]\n-  \"\"\n-  {\n-    h8300_expand_branch (operands);\n-    DONE;\n-  })\n+(define_expand \"cbranch<mode>4\"\n+  [(set (pc)\n+\t(if_then_else (match_operator 0 \"ordered_comparison_operator\"\n+\t\t        [(match_operand:QHSI 1 \"h8300_dst_operand\")\n+\t\t\t (match_operand:QHSI 2 \"h8300_src_operand\")])\n+\t\t      (label_ref (match_operand 3 \"\"))\n+\t\t      (pc)))]\n+  \"\")\n \n-(define_expand \"cbranchsi4\"\n-  [(use (match_operator 0 \"ordered_comparison_operator\"\n-         [(match_operand:SI 1 \"h8300_dst_operand\" \"\")\n-          (match_operand:SI 2 \"h8300_src_operand\" \"\")]))\n-   (use (match_operand 3 \"\"))]\n+(define_insn_and_split \"*branch\"\n+  [(set (pc)\n+\t(if_then_else (match_operator 0 \"comparison_operator\"\n+\t\t       [(match_operand:QHSI 1 \"h8300_dst_operand\" \"rQ\")\n+\t\t\t(match_operand:QHSI 2 \"h8300_src_operand\" \"rQi\")])\n+\t\t      (label_ref (match_operand 3 \"\" \"\"))\n+\t\t      (pc)))]\n   \"\"\n-  {\n-    h8300_expand_branch (operands);\n-    DONE;\n-  })\n+  \"#\"\n+  \"reload_completed\"\n+  [(set (reg:CC CC_REG)\n+\t(compare:CC (match_dup 1) (match_dup 2)))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 0\n+\t\t       [(reg:CC CC_REG) (const_int 0)])\n+\t\t      (label_ref (match_dup 3)) (pc)))]\n+  \"\")\n \n-(define_insn \"branch_true\"\n+(define_insn \"*branch_1\"\n   [(set (pc)\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t       [(cc0) (const_int 0)])\n+\t\t       [(reg:CC CC_REG) (const_int 0)])\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n-  \"\"\n+  \"reload_completed\"\n {\n-  if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0\n-      && (GET_CODE (operands[1]) == GT\n-\t  || GET_CODE (operands[1]) == GE\n-\t  || GET_CODE (operands[1]) == LE\n-\t  || GET_CODE (operands[1]) == LT))\n-    {\n-      cc_status.flags &= ~CC_OVERFLOW_UNUSABLE;\n-      return 0;\n-    }\n-\n   if (get_attr_length (insn) == 2)\n     return \"b%j1\t%l0\";\n   else if (get_attr_length (insn) == 4)\n@@ -65,32 +49,23 @@\n  [(set_attr \"type\" \"branch\")\n    (set_attr \"cc\" \"none\")])\n \n-(define_insn \"branch_false\"\n+\n+(define_insn \"*branch_1_false\"\n   [(set (pc)\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t       [(cc0) (const_int 0)])\n+\t\t       [(reg:CC CC_REG) (const_int 0)])\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n-  \"\"\n+  \"reload_completed\"\n {\n-  if ((cc_status.flags & CC_OVERFLOW_UNUSABLE) != 0\n-      && (GET_CODE (operands[1]) == GT\n-\t  || GET_CODE (operands[1]) == GE\n-\t  || GET_CODE (operands[1]) == LE\n-\t  || GET_CODE (operands[1]) == LT))\n-    {\n-      cc_status.flags &= ~CC_OVERFLOW_UNUSABLE;\n-      return 0;\n-    }\n-\n   if (get_attr_length (insn) == 2)\n     return \"b%k1\t%l0\";\n   else if (get_attr_length (insn) == 4)\n     return \"b%k1\t%l0:16\";\n   else\n     return \"b%j1\t.Lh8BR%=\\;jmp\t@%l0\\\\n.Lh8BR%=:\";\n }\n-  [(set_attr \"type\" \"branch\")\n+ [(set_attr \"type\" \"branch\")\n    (set_attr \"cc\" \"none\")])\n \n ;; The brabc/brabs patterns have been disabled because their length computation\n@@ -125,8 +100,7 @@\n     }\n }\n   [(set_attr \"type\" \"bitbranch\")\n-   (set_attr \"length_table\" \"bitbranch\")\n-   (set_attr \"cc\" \"none\")])\n+   (set_attr \"length_table\" \"bitbranch\")])\n \n (define_insn \"*brabs\"\n   [(set (pc)\n@@ -150,8 +124,7 @@\n     }\n }\n   [(set_attr \"type\" \"bitbranch\")\n-   (set_attr \"length_table\" \"bitbranch\")\n-   (set_attr \"cc\" \"none\")])\n+   (set_attr \"length_table\" \"bitbranch\")])\n \n ;; Unconditional and other jump instructions.\n "}, {"sha": "e4d3d330b6e94d6ed3b5ae573e2279e469749093", "filename": "gcc/config/h8300/logical.md", "status": "modified", "additions": 207, "deletions": 30, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Flogical.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Flogical.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Flogical.md?ref=f16897cb4b1468374d63b1a6b12d8b7be845874a", "patch": "@@ -24,30 +24,59 @@\n     operands[2] = GEN_INT ((INTVAL (operands[2])) >> 8);\n   })\n \n-(define_insn \"*andqi3_2\"\n+(define_insn \"bclrhi_msx\"\n+  [(set (match_operand:HI 0 \"bit_register_indirect_operand\" \"=m\")\n+\t(and:HI (match_operand:HI 1 \"bit_register_indirect_operand\" \"%0\")\n+\t\t(match_operand:HI 2 \"single_zero_operand\" \"Y0\")))]\n+  \"TARGET_H8300SX\"\n+  \"bclr\\\\t%W2,%0\"\n+  [(set_attr \"length\" \"8\")])\n+\n+(define_insn_and_split \"*andqi3_2\"\n   [(set (match_operand:QI 0 \"bit_operand\" \"=U,rQ,r\")\n \t(and:QI (match_operand:QI 1 \"bit_operand\" \"%0,0,WU\")\n \t\t(match_operand:QI 2 \"h8300_src_operand\" \"Y0,rQi,IP1>X\")))]\n   \"TARGET_H8300SX\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (and:QI (match_dup 1) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*andqi3_2_clobber_flags\"\n+  [(set (match_operand:QI 0 \"bit_operand\" \"=U,rQ,r\")\n+\t(and:QI (match_operand:QI 1 \"bit_operand\" \"%0,0,WU\")\n+\t\t(match_operand:QI 2 \"h8300_src_operand\" \"Y0,rQi,IP1>X\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_H8300SX\"\n   \"@\n    bclr\\\\t %W2,%R0\n    and  %X2,%X0\n    bfld %2,%1,%R0\"\n   [(set_attr \"length\" \"8,*,8\")\n-   (set_attr \"length_table\" \"*,logicb,*\")\n-   (set_attr \"cc\" \"none_0hit,set_znv,none_0hit\")])\n+   (set_attr \"length_table\" \"*,logicb,*\")])\n \n-(define_insn \"andqi3_1\"\n+(define_insn_and_split \"andqi3_1\"\n   [(set (match_operand:QI 0 \"bit_operand\" \"=U,r\")\n \t(and:QI (match_operand:QI 1 \"bit_operand\" \"%0,0\")\n \t\t(match_operand:QI 2 \"h8300_src_operand\" \"Y0,rn\")))]\n   \"register_operand (operands[0], QImode)\n    || single_zero_operand (operands[2], QImode)\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (and:QI (match_dup 1) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"andqi3_1_clobber_flags\"\n+  [(set (match_operand:QI 0 \"bit_operand\" \"=U,r\")\n+\t(and:QI (match_operand:QI 1 \"bit_operand\" \"%0,0\")\n+\t\t(match_operand:QI 2 \"h8300_src_operand\" \"Y0,rn\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"register_operand (operands[0], QImode)\n+   || single_zero_operand (operands[2], QImode)\"\n   \"@\n    bclr %W2,%R0\n    and  %X2,%X0\"\n-  [(set_attr \"length\" \"2,8\")\n-   (set_attr \"cc\" \"none_0hit,set_znv\")])\n+  [(set_attr \"length\" \"2,8\")])\n \n (define_expand \"and<mode>3\"\n   [(set (match_operand:QHSI 0 \"register_operand\" \"\")\n@@ -56,7 +85,7 @@\n   \"\"\n   \"\")\n \n-(define_insn \"*andor<mode>3\"\n+(define_insn_and_split \"*andor<mode>3\"\n   [(set (match_operand:QHSI 0 \"register_operand\" \"=r\")\n \t(ior:QHSI (and:QHSI (match_operand:QHSI 2 \"register_operand\" \"r\")\n \t\t\t    (match_operand:QHSI 3 \"single_one_operand\" \"n\"))\n@@ -65,6 +94,23 @@\n     || <MODE>mode == HImode\n     || (<MODE>mode == SImode\n \t&& (INTVAL (operands[3]) & 0xffff) != 0))\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (ior:QHSI (and:QHSI (match_dup 2)\n+\t\t\t\t\t\t     (match_dup 3))\n+\t\t\t\t\t   (match_dup 1)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*andor<mode>3_clobber_flags\"\n+  [(set (match_operand:QHSI 0 \"register_operand\" \"=r\")\n+\t(ior:QHSI (and:QHSI (match_operand:QHSI 2 \"register_operand\" \"r\")\n+\t\t\t    (match_operand:QHSI 3 \"single_one_operand\" \"n\"))\n+\t\t  (match_operand:QHSI 1 \"register_operand\" \"0\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"(<MODE>mode == QImode\n+    || <MODE>mode == HImode\n+    || (<MODE>mode == SImode\n+\t&& (INTVAL (operands[3]) & 0xffff) != 0))\"\n   {\n     if (<MODE>mode == QImode)\n       return \"bld\\\\t%V3,%X2\\;bor\\\\t%V3,%X0\\;bst\\\\t%V3,%X0\";\n@@ -96,13 +142,29 @@\n   }\n   [(set_attr \"length\" \"6\")])\n \n-(define_insn \"*andorsi3_shift_8\"\n+(define_insn_and_split \"*andorsi3_shift_8\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(ior:SI (and:SI (ashift:SI (match_operand:SI 2 \"register_operand\" \"r\")\n \t\t\t\t   (const_int 8))\n \t\t\t(const_int 65280))\n \t\t(match_operand:SI 1 \"register_operand\" \"0\")))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (ior:SI (and:SI (ashift:SI (match_dup 2)\n+\t\t\t\t\t\t\t    (const_int 8))\n+\t\t\t\t\t\t (const_int 65280))\n+\t\t\t\t\t (match_dup 1)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*andorsi3_shift_8_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ior:SI (and:SI (ashift:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t\t   (const_int 8))\n+\t\t\t(const_int 65280))\n+\t\t(match_operand:SI 1 \"register_operand\" \"0\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"or.b\\\\t%w2,%x0\"\n   [(set_attr \"length\" \"2\")])\n \n@@ -118,36 +180,41 @@\n   { return <CODE> == IOR ? \"bset\\\\t%V2,%0\" : \"bnot\\\\t%V2,%0\"; }\n   [(set_attr \"length\" \"8\")])\n \n-(define_split\n-  [(set (match_operand:HI 0 \"bit_register_indirect_operand\")\n-\t(ors:HI (match_operand:HI 1 \"bit_register_indirect_operand\")\n-\t\t(match_operand:HI 2 \"single_one_operand\")))]\n-  \"TARGET_H8300SX && abs (INTVAL (operands[2])) > 0xff\"\n-  [(set (match_dup 0)\n-\t(and:QI (match_dup 1)\n-\t\t(match_dup 2)))]\n-  {\n-    operands[0] = adjust_address (operands[0], QImode, 0);\n-    operands[1] = adjust_address (operands[1], QImode, 0);\n-    operands[2] = GEN_INT ((INTVAL (operands[2])) >> 8);\n-  })\n+(define_insn \"b<code>hi_msx\"\n+  [(set (match_operand:HI 0 \"bit_register_indirect_operand\" \"=m\")\n+\t(ors:HI (match_operand:HI 1 \"bit_register_indirect_operand\" \"%0\")\n+\t\t(match_operand:HI 2 \"single_one_operand\" \"Y2\")))]\n+  \"TARGET_H8300SX\"\n+  { return <CODE> == IOR ? \"bset\\\\t%V2,%0\" : \"bnot\\\\t%V2,%0\"; }\n+  [(set_attr \"length\" \"8\")])\n \n-(define_insn \"<code>qi3_1\"\n+(define_insn_and_split \"<code>qi3_1\"\n   [(set (match_operand:QI 0 \"bit_operand\" \"=U,rQ\")\n \t(ors:QI (match_operand:QI 1 \"bit_operand\" \"%0,0\")\n \t\t(match_operand:QI 2 \"h8300_src_operand\" \"Y2,rQi\")))]\n   \"TARGET_H8300SX || register_operand (operands[0], QImode)\n    || single_one_operand (operands[2], QImode)\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (ors:QI (match_dup 1) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"<code>qi3_1_clobber_flags\"\n+  [(set (match_operand:QI 0 \"bit_operand\" \"=U,rQ\")\n+\t(ors:QI (match_operand:QI 1 \"bit_operand\" \"%0,0\")\n+\t\t(match_operand:QI 2 \"h8300_src_operand\" \"Y2,rQi\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_H8300SX || register_operand (operands[0], QImode)\n+   || single_one_operand (operands[2], QImode)\"\n   {\n     if (which_alternative == 0)\n-      return <CODE> == IOR ? \"bset\\\\t%V2,%R0\" : \"bnot\\\\t%V2,%R0\"; \n+      return <CODE> == IOR ? \"bset\\\\t%V2,%R0\" : \"bnot\\\\t%V2,%R0\";\n     else if (which_alternative == 1)\n       return <CODE> == IOR ? \"or\\\\t%X2,%X0\" : \"xor\\\\t%X2,%X0\";\n     gcc_unreachable ();\n   }\n   [(set_attr \"length\" \"8,*\")\n-   (set_attr \"length_table\" \"*,logicb\")\n-   (set_attr \"cc\" \"none_0hit,set_znv\")])\n+   (set_attr \"length_table\" \"*,logicb\")])\n \n (define_expand \"<code><mode>3\"\n   [(set (match_operand:QHSI 0 \"register_operand\" \"\")\n@@ -160,27 +227,48 @@\n ;; {AND,IOR,XOR}{HI3,SI3} PATTERNS\n ;; ----------------------------------------------------------------------\n \n-(define_insn \"*logical<mode>3\"\n+(define_insn_and_split \"*logical<mode>3\"\n   [(set (match_operand:HSI 0 \"h8300_dst_operand\" \"=rQ\")\n \t(match_operator:HSI 3 \"bit_operator\"\n \t  [(match_operand:HSI 1 \"h8300_dst_operand\" \"%0\")\n \t   (match_operand:HSI 2 \"h8300_src_operand\" \"rQi\")]))]\n   \"h8300_operands_match_p (operands)\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (match_op_dup 3 [(match_dup 1) (match_dup 2)]))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*logical<mode>3_clobber_flags\"\n+  [(set (match_operand:HSI 0 \"h8300_dst_operand\" \"=rQ\")\n+\t(match_operator:HSI 3 \"bit_operator\"\n+\t  [(match_operand:HSI 1 \"h8300_dst_operand\" \"%0\")\n+\t   (match_operand:HSI 2 \"h8300_src_operand\" \"rQi\")]))\n+   (clobber (reg:CC CC_REG))]\n+  \"h8300_operands_match_p (operands)\"\n   { return output_logical_op (<MODE>mode, operands); }\n   [(set (attr \"length\")\n-\t(symbol_ref \"compute_logical_op_length (<MODE>mode, operands)\"))\n-   (set (attr \"cc\")\n-\t(symbol_ref \"compute_logical_op_cc (<MODE>mode, operands)\"))])\n+\t(symbol_ref \"compute_logical_op_length (<MODE>mode, operands)\"))])\n \n \f\n ;; ----------------------------------------------------------------------\n ;; NOT INSTRUCTIONS\n ;; ----------------------------------------------------------------------\n \n-(define_insn \"one_cmpl<mode>2\"\n+(define_insn_and_split \"one_cmpl<mode>2\"\n   [(set (match_operand:QHSI 0 \"h8300_dst_operand\" \"=rQ\")\n \t(not:QHSI (match_operand:QHSI 1 \"h8300_dst_operand\" \"0\")))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (not:QHSI (match_dup 1)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"one_cmpl<mode>2_clobber_flags\"\n+  [(set (match_operand:QHSI 0 \"h8300_dst_operand\" \"=rQ\")\n+\t(not:QHSI (match_operand:QHSI 1 \"h8300_dst_operand\" \"0\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   {\n     if (<MODE>mode == E_QImode)\n       return \"not\t%X0\";\n@@ -192,3 +280,92 @@\n   }\n   [(set_attr \"length_table\" \"unary\")\n    (set_attr \"cc\" \"set_znv\")])\n+\n+;; The next four peephole2's will try to transform\n+;;\n+;;   mov.b A,r0l    (or mov.l A,er0)\n+;;   and.l #CST,er0\n+;;\n+;; into\n+;;\n+;;   sub.l er0\n+;;   mov.b A,r0l\n+;;   and.b #CST,r0l (if CST is not 255)\n+\n+(define_peephole2\n+  [(parallel [(set (match_operand:QI 0 \"register_operand\" \"\")\n+\t\t   (match_operand:QI 1 \"general_operand\" \"\"))\n+\t      (clobber (reg:CC CC_REG))])\n+   (parallel [(set (match_operand:SI 2 \"register_operand\" \"\")\n+\t\t   (and:SI (match_dup 2) (const_int 255)))\n+\t      (clobber (reg:CC CC_REG))])]\n+  \"!reg_overlap_mentioned_p (operands[2], operands[1])\n+   && REGNO (operands[0]) == REGNO (operands[2])\"\n+  [(parallel [(set (match_dup 2) (const_int 0))\n+\t      (clobber (reg:CC CC_REG))])\n+   (parallel [(set (strict_low_part (match_dup 0)) (match_dup 1))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_peephole2\n+  [(parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t\t   (match_operand:SI 1 \"nonimmediate_operand\" \"\"))\n+\t      (clobber (reg:CC CC_REG))])\n+   (parallel [(set (match_dup 0)\n+\t\t   (and:SI (match_dup 0) (const_int 255)))\n+\t      (clobber (reg:CC CC_REG))])]\n+  \"!reg_overlap_mentioned_p (operands[0], operands[1])\n+   && !(GET_CODE (operands[1]) == MEM && !offsettable_memref_p (operands[1]))\n+   && !(GET_CODE (operands[1]) == MEM && MEM_VOLATILE_P (operands[1]))\"\n+  [(parallel [(set (match_dup 0) (const_int 0))\n+\t      (clobber (reg:CC CC_REG))])\n+   (parallel [(set (strict_low_part (match_dup 2)) (match_dup 3))\n+\t      (clobber (reg:CC CC_REG))])]\n+  {\n+    operands[2] = gen_lowpart (QImode, operands[0]);\n+    operands[3] = gen_lowpart (QImode, operands[1]);\n+  })\n+\n+(define_peephole2\n+  [(parallel [(set (match_operand 0 \"register_operand\" \"\")\n+\t\t   (match_operand 1 \"nonimmediate_operand\" \"\"))\n+\t      (clobber (reg:CC CC_REG))])\n+   (parallel [(set (match_operand:SI 2 \"register_operand\" \"\")\n+\t\t   (and:SI (match_dup 2)\n+\t\t\t   (match_operand:SI 3 \"const_int_qi_operand\" \"\")))\n+\t      (clobber (reg:CC CC_REG))])]\n+  \"(GET_MODE (operands[0]) == QImode\n+    || GET_MODE (operands[0]) == HImode\n+    || GET_MODE (operands[0]) == SImode)\n+   && GET_MODE (operands[0]) == GET_MODE (operands[1])\n+   && REGNO (operands[0]) == REGNO (operands[2])\n+   && !reg_overlap_mentioned_p (operands[2], operands[1])\n+   && !(GET_MODE (operands[1]) != QImode\n+\t&& GET_CODE (operands[1]) == MEM\n+\t&& !offsettable_memref_p (operands[1]))\n+   && !(GET_MODE (operands[1]) != QImode\n+\t&& GET_CODE (operands[1]) == MEM\n+\t&& MEM_VOLATILE_P (operands[1]))\"\n+  [(parallel [(set (match_dup 2) (const_int 0))\n+\t      (clobber (reg:CC CC_REG))])\n+   (parallel [(set (strict_low_part (match_dup 4)) (match_dup 5))\n+\t      (clobber (reg:CC CC_REG))])\n+   (parallel [(set (match_dup 2) (and:SI (match_dup 2) (match_dup 6)))\n+\t      (clobber (reg:CC CC_REG))])]\n+  {\n+    operands[4] = gen_lowpart (QImode, operands[0]);\n+    operands[5] = gen_lowpart (QImode, operands[1]);\n+    operands[6] = GEN_INT (~0xff | INTVAL (operands[3]));\n+  })\n+\n+(define_peephole2\n+  [(parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t\t   (match_operand:SI 1 \"register_operand\" \"\"))\n+\t      (clobber (reg:CC CC_REG))])\n+   (parallel [(set (match_dup 0) (and:SI (match_dup 0) (const_int 65280)))\n+\t      (clobber (reg:CC CC_REG))])]\n+  \"!reg_overlap_mentioned_p (operands[0], operands[1])\"\n+  [(parallel [(set (match_dup 0) (const_int 0))\n+\t      (clobber (reg:CC CC_REG))])\n+   (parallel [(set (zero_extract:SI (match_dup 0) (const_int 8) (const_int 8))\n+\t\t   (lshiftrt:SI (match_dup 1) (const_int 8)))\n+\t      (clobber (reg:CC CC_REG))])])"}, {"sha": "cdcd4b8f6a42248d47a3facfcb8b2ebb1c536e68", "filename": "gcc/config/h8300/mova.md", "status": "modified", "additions": 83, "deletions": 166, "changes": 249, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fmova.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fmova.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fmova.md?ref=f16897cb4b1468374d63b1a6b12d8b7be845874a", "patch": "@@ -24,8 +24,7 @@\n \t\t (match_operand:QI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n@@ -34,8 +33,7 @@\n \t\t (match_operand:QI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n@@ -44,8 +42,7 @@\n \t\t (match_operand:QI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n@@ -54,26 +51,23 @@\n \t\t (match_operand:QI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n \t(plus:HI (zero_extend:HI (match_operand:QI 1 \"h8300_dst_operand\" \"0,rQ\"))\n \t\t (match_operand:HI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/b.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n \t(mult:HI (zero_extend:HI (match_operand:QI 1 \"h8300_dst_operand\" \"0,rQ\"))\n \t\t  (const_int 2)))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(0,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n@@ -82,8 +76,7 @@\n \t\t (match_operand:HI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -92,8 +85,7 @@\n \t\t(const_int 510)))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(0,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -103,8 +95,7 @@\n \t\t (match_operand:HI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -113,8 +104,7 @@\n \t\t(const_int 510)))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(0,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -124,17 +114,15 @@\n \t\t (match_operand:HI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n \t(ashift:HI (zero_extend:HI (match_operand:QI 1 \"h8300_dst_operand\" \"0,rQ\"))\n \t\t  (const_int 1)))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(0,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n@@ -143,8 +131,7 @@\n \t\t (match_operand:HI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -153,8 +140,7 @@\n \t\t(const_int 510)))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(0,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -164,8 +150,7 @@\n \t\t (match_operand:HI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -174,8 +159,7 @@\n \t\t(const_int 510)))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(0,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -185,17 +169,15 @@\n \t\t (match_operand:HI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n \t(mult:HI (zero_extend:HI (match_operand:QI 1 \"h8300_dst_operand\" \"0,rQ\"))\n \t\t  (const_int 4)))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(0,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n@@ -204,8 +186,7 @@\n \t\t (match_operand:HI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -214,8 +195,7 @@\n \t\t(const_int 1020)))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(0,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -225,8 +205,7 @@\n \t\t (match_operand:HI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -235,8 +214,7 @@\n \t\t(const_int 1020)))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(0,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -246,17 +224,15 @@\n \t\t (match_operand:HI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n \t(ashift:HI (zero_extend:HI (match_operand:QI 1 \"h8300_dst_operand\" \"0,rQ\"))\n \t\t  (const_int 2)))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(0,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n@@ -265,8 +241,7 @@\n \t\t (match_operand:HI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -275,8 +250,7 @@\n \t\t(const_int 1020)))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(0,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -286,8 +260,7 @@\n \t\t (match_operand:HI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -296,8 +269,7 @@\n \t\t(const_int 1020)))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(0,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -307,26 +279,23 @@\n \t\t (match_operand:HI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(plus:SI (zero_extend:SI (match_operand:QI 1 \"h8300_dst_operand\" \"0,rQ\"))\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/b.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(mult:SI (zero_extend:SI (match_operand:QI 1 \"h8300_dst_operand\" \"0,rQ\"))\n \t\t  (const_int 2)))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(0,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n@@ -335,8 +304,7 @@\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -345,8 +313,7 @@\n \t\t(const_int 510)))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(0,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -356,8 +323,7 @@\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -366,8 +332,7 @@\n \t\t(const_int 510)))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(0,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -377,17 +342,15 @@\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(ashift:SI (zero_extend:SI (match_operand:QI 1 \"h8300_dst_operand\" \"0,rQ\"))\n \t\t  (const_int 1)))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(0,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n@@ -396,8 +359,7 @@\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -406,8 +368,7 @@\n \t\t(const_int 510)))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(0,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -417,8 +378,7 @@\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -427,8 +387,7 @@\n \t\t(const_int 510)))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(0,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -438,17 +397,15 @@\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(mult:SI (zero_extend:SI (match_operand:QI 1 \"h8300_dst_operand\" \"0,rQ\"))\n \t\t  (const_int 4)))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(0,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n@@ -457,8 +414,7 @@\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -467,8 +423,7 @@\n \t\t(const_int 1020)))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(0,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -478,8 +433,7 @@\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -488,8 +442,7 @@\n \t\t(const_int 1020)))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(0,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -499,17 +452,15 @@\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(ashift:SI (zero_extend:SI (match_operand:QI 1 \"h8300_dst_operand\" \"0,rQ\"))\n \t\t  (const_int 2)))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(0,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n@@ -518,8 +469,7 @@\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -528,8 +478,7 @@\n \t\t(const_int 1020)))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(0,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -539,8 +488,7 @@\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -549,8 +497,7 @@\n \t\t(const_int 1020)))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(0,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -560,8 +507,7 @@\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(%o2%C2,%X1.b),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n@@ -570,8 +516,7 @@\n \t\t (match_operand:HI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(%o2%C2,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n@@ -580,8 +525,7 @@\n \t\t (match_operand:HI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(%o2%C2,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n@@ -590,8 +534,7 @@\n \t\t (match_operand:HI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(%o2%C2,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n@@ -600,26 +543,23 @@\n \t\t (match_operand:HI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(%o2%C2,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(plus:SI (zero_extend:SI (match_operand:HI 1 \"h8300_dst_operand\" \"0,rQ\"))\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/b.l @(%o2%C2,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(mult:SI (zero_extend:SI (match_operand:HI 1 \"h8300_dst_operand\" \"0,rQ\"))\n \t\t  (const_int 2)))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(0,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n@@ -628,8 +568,7 @@\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(%o2%C2,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -638,8 +577,7 @@\n \t\t(const_int 131070)))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(0,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -649,8 +587,7 @@\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(%o2%C2,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -659,8 +596,7 @@\n \t\t(const_int 131070)))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(0,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -670,17 +606,15 @@\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(%o2%C2,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(ashift:SI (zero_extend:SI (match_operand:HI 1 \"h8300_dst_operand\" \"0,rQ\"))\n \t\t  (const_int 1)))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(0,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n@@ -689,8 +623,7 @@\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(%o2%C2,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -699,8 +632,7 @@\n \t\t(const_int 131070)))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(0,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -710,8 +642,7 @@\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(%o2%C2,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -720,8 +651,7 @@\n \t\t(const_int 131070)))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(0,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -731,17 +661,15 @@\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/w.l @(%o2%C2,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(mult:SI (zero_extend:SI (match_operand:HI 1 \"h8300_dst_operand\" \"0,rQ\"))\n \t\t  (const_int 4)))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(0,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n@@ -750,8 +678,7 @@\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(%o2%C2,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -760,8 +687,7 @@\n \t\t(const_int 262140)))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(0,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -771,8 +697,7 @@\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(%o2%C2,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -781,8 +706,7 @@\n \t\t(const_int 262140)))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(0,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -792,17 +716,15 @@\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(%o2%C2,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(ashift:SI (zero_extend:SI (match_operand:HI 1 \"h8300_dst_operand\" \"0,rQ\"))\n \t\t  (const_int 2)))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(0,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n@@ -811,8 +733,7 @@\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(%o2%C2,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -821,8 +742,7 @@\n \t\t(const_int 262140)))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(0,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -832,8 +752,7 @@\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(%o2%C2,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -842,8 +761,7 @@\n \t\t(const_int 262140)))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(0,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova_zero\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova_zero\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -853,6 +771,5 @@\n \t\t (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_H8300SX\"\n   \"mova/l.l @(%o2%C2,%T1.w),%S0\"\n-  [(set_attr \"length_table\" \"mova\")\n-   (set_attr \"cc\" \"none\")])\n+  [(set_attr \"length_table\" \"mova\")])\n "}, {"sha": "b106cd54f5d5cf51801a59310a2b2f2eab0d896a", "filename": "gcc/config/h8300/movepush.md", "status": "modified", "additions": 143, "deletions": 37, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fmovepush.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fmovepush.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fmovepush.md?ref=f16897cb4b1468374d63b1a6b12d8b7be845874a", "patch": "@@ -4,31 +4,47 @@\n \n ;; movqi\n \n-(define_insn \"*movqi_h8nosx\"\n+(define_insn_and_split \"*movqi\"\n   [(set (match_operand:QI 0 \"general_operand_dst\" \"=r,r ,<,r,r,m\")\n \t(match_operand:QI 1 \"general_operand_src\" \" I,r>,r,n,m,r\"))]\n-  \"!TARGET_H8300SX\n-    && h8300_move_ok (operands[0], operands[1])\"\n+  \"!TARGET_H8300SX && h8300_move_ok (operands[0], operands[1])\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (match_dup 1))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*movqi_clobber_flags\"\n+  [(set (match_operand:QI 0 \"general_operand_dst\" \"=r,r ,<,r,r,m\")\n+\t(match_operand:QI 1 \"general_operand_src\" \" I,r>,r,n,m,r\"))\n+   (clobber (reg:CC CC_REG))]\n+  \"!TARGET_H8300SX && h8300_move_ok (operands[0], operands[1])\"\n   \"@\n    sub.b\t%X0,%X0\n    mov.b\t%R1,%X0\n    mov.b\t%X1,%R0\n    mov.b\t%R1,%X0\n    mov.b\t%R1,%X0\n    mov.b\t%X1,%R0\"\n-  [(set (attr \"length\")\n-\t(symbol_ref \"compute_mov_length (operands)\"))\n-   (set_attr \"cc\" \"set_zn,set_znv,set_znv,set_znv,set_znv,set_znv\")])\n+  [(set (attr \"length\") (symbol_ref \"compute_mov_length (operands)\"))])\n \n-(define_insn \"*movqi_h8sx\"\n+(define_insn_and_split \"*movqi_h8sx\"\n   [(set (match_operand:QI 0 \"general_operand_dst\" \"=Z,rQ\")\n \t(match_operand:QI 1 \"general_operand_src\" \"P4>X,rQi\"))]\n   \"TARGET_H8300SX\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (match_dup 1))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*movqi_h8sx_clobber_flags\"\n+  [(set (match_operand:QI 0 \"general_operand_dst\" \"=Z,rQ\")\n+\t(match_operand:QI 1 \"general_operand_src\" \"P4>X,rQi\"))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_H8300SX\"\n   \"@\n     mov.b\t%X1:4,%X0\n     mov.b\t%X1,%X0\"\n-  [(set_attr \"length_table\" \"mov_imm4,movb\")\n-   (set_attr \"cc\" \"set_znv\")])\n+  [(set_attr \"length_table\" \"mov_imm4,movb\")])\n \n (define_expand \"mov<mode>\"\n   [(set (match_operand:QHSIF 0 \"general_operand_dst\" \"\")\n@@ -48,67 +64,115 @@\n       }\n   })\n \n-(define_insn \"movstrictqi\"\n+(define_insn_and_split \"movstrictqi\"\n   [(set (strict_low_part (match_operand:QI 0 \"general_operand_dst\" \"+r,r\"))\n \t\t\t (match_operand:QI 1 \"general_operand_src\" \"I,rmi>\"))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (strict_low_part (match_dup 0)) (match_dup 1))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+\n+(define_insn \"movstrictqi_clobber_flags\"\n+  [(set (strict_low_part (match_operand:QI 0 \"general_operand_dst\" \"+r,r\"))\n+\t\t\t (match_operand:QI 1 \"general_operand_src\" \"I,rmi>\"))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"@\n    sub.b\t%X0,%X0\n    mov.b\t%X1,%X0\"\n   [(set_attr \"length\" \"2,*\")\n-   (set_attr \"length_table\" \"*,movb\")\n-   (set_attr \"cc\" \"set_zn,set_znv\")])\n+   (set_attr \"length_table\" \"*,movb\")])\n \n ;; movhi\n \n-(define_insn \"*movhi_h8nosx\"\n+(define_insn_and_split \"*movhi\"\n   [(set (match_operand:HI 0 \"general_operand_dst\" \"=r,r,<,r,r,m\")\n \t(match_operand:HI 1 \"general_operand_src\" \"I,r>,r,i,m,r\"))]\n   \"!TARGET_H8300SX\n     && h8300_move_ok (operands[0], operands[1])\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (match_dup 1))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*movhi_clobber_flags\"\n+  [(set (match_operand:HI 0 \"general_operand_dst\" \"=r,r,<,r,r,m\")\n+\t(match_operand:HI 1 \"general_operand_src\" \"I,r>,r,i,m,r\"))\n+   (clobber (reg:CC CC_REG))]\n+  \"!TARGET_H8300SX\n+    && h8300_move_ok (operands[0], operands[1])\"\n   \"@\n    sub.w\t%T0,%T0\n    mov.w\t%T1,%T0\n    mov.w\t%T1,%T0\n    mov.w\t%T1,%T0\n    mov.w\t%T1,%T0\n    mov.w\t%T1,%T0\"\n-  [(set (attr \"length\")\n-\t(symbol_ref \"compute_mov_length (operands)\"))\n-   (set_attr \"cc\" \"set_zn,set_znv,set_znv,set_znv,set_znv,set_znv\")])\n+  [(set (attr \"length\") (symbol_ref \"compute_mov_length (operands)\"))])\n \n-(define_insn \"*movhi_h8sx\"\n+(define_insn_and_split \"*movhi_h8sx\"\n   [(set (match_operand:HI 0 \"general_operand_dst\" \"=r,r,Z,Q,rQ\")\n \t(match_operand:HI 1 \"general_operand_src\" \"I,P3>X,P4>X,IP8>X,rQi\"))]\n   \"TARGET_H8300SX\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (match_dup 1))\n+\t      (clobber (reg:CC CC_REG))])])\n+  \n+(define_insn \"*movhi_h8sx_clobber_flags\"\n+  [(set (match_operand:HI 0 \"general_operand_dst\" \"=r,r,Z,Q,rQ\")\n+\t(match_operand:HI 1 \"general_operand_src\" \"I,P3>X,P4>X,IP8>X,rQi\"))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_H8300SX\"\n   \"@\n    sub.w\t%T0,%T0\n    mov.w\t%T1:3,%T0\n    mov.w\t%T1:4,%T0\n    mov.w\t%T1,%T0\n    mov.w\t%T1,%T0\"\n   [(set_attr \"length_table\" \"*,*,mov_imm4,short_immediate,movw\")\n-   (set_attr \"length\" \"2,2,*,*,*\")\n-   (set_attr \"cc\" \"set_zn,set_znv,set_znv,set_znv,set_znv\")])\n+   (set_attr \"length\" \"2,2,*,*,*\")])\n \n-(define_insn \"movstricthi\"\n+(define_insn_and_split \"movstricthi\"\n   [(set (strict_low_part (match_operand:HI 0 \"general_operand_dst\" \"+r,r,r\"))\n \t\t\t (match_operand:HI 1 \"general_operand_src\" \"I,P3>X,rmi\"))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (strict_low_part (match_dup 0)) (match_dup 1))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"movstricthi_clobber_flags\"\n+  [(set (strict_low_part (match_operand:HI 0 \"general_operand_dst\" \"+r,r,r\"))\n+\t\t\t (match_operand:HI 1 \"general_operand_src\" \"I,P3>X,rmi\"))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"@\n    sub.w\t%T0,%T0\n    mov.w\t%T1,%T0\n    mov.w\t%T1,%T0\"\n   [(set_attr \"length\" \"2,2,*\")\n-   (set_attr \"length_table\" \"*,*,movw\")\n-   (set_attr \"cc\" \"set_zn,set_znv,set_znv\")])\n+   (set_attr \"length_table\" \"*,*,movw\")])\n \n ;; movsi\n-(define_insn \"*movsi_h8300hs\"\n+(define_insn_and_split \"*movsi\"\n   [(set (match_operand:SI 0 \"general_operand_dst\" \"=r,r,r,<,r,r,m,*a,*a,r\")\n \t(match_operand:SI 1 \"general_operand_src\" \"I,r,i,r,>,m,r,I,r,*a\"))]\n   \"(TARGET_H8300S || TARGET_H8300H) && !TARGET_H8300SX\n     && h8300_move_ok (operands[0], operands[1])\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (match_dup 1))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*movsi_clobber_flags\"\n+  [(set (match_operand:SI 0 \"general_operand_dst\" \"=r,r,r,<,r,r,m,*a,*a,r\")\n+\t(match_operand:SI 1 \"general_operand_src\" \"I,r,i,r,>,m,r,I,r,*a\"))\n+   (clobber (reg:CC CC_REG))]\n+  \"(TARGET_H8300S || TARGET_H8300H) && !TARGET_H8300SX\n+    && h8300_move_ok (operands[0], operands[1])\"\n {\n   switch (which_alternative)\n     {\n@@ -169,14 +233,22 @@\n     }\n    return \"mov.l\t%S1,%S0\";\n }\n-  [(set (attr \"length\")\n-\t(symbol_ref \"compute_mov_length (operands)\"))\n-   (set_attr \"cc\" \"set_zn,set_znv,clobber,set_znv,set_znv,set_znv,set_znv,none_0hit,none_0hit,set_znv\")])\n+  [(set (attr \"length\") (symbol_ref \"compute_mov_length (operands)\"))])\n \n-(define_insn \"*movsi_h8sx\"\n+(define_insn_and_split \"*movsi_h8sx\"\n   [(set (match_operand:SI 0 \"general_operand_dst\" \"=r,r,Q,rQ,*a,*a,r\")\n \t(match_operand:SI 1 \"general_operand_src\" \"I,P3>X,IP8>X,rQi,I,r,*a\"))]\n   \"TARGET_H8300SX\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (match_dup 1))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*movsi_h8sx_clobber_flags\"\n+  [(set (match_operand:SI 0 \"general_operand_dst\" \"=r,r,Q,rQ,*a,*a,r\")\n+\t(match_operand:SI 1 \"general_operand_src\" \"I,P3>X,IP8>X,rQi,I,r,*a\"))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_H8300SX\"\n   \"@\n    sub.l\t%S0,%S0\n    mov.l\t%S1:3,%S0\n@@ -186,48 +258,82 @@\n    clrmac\\;ldmac\t%1,macl\n    stmac\tmacl,%0\"\n   [(set_attr \"length_table\" \"*,*,short_immediate,movl,*,*,*\")\n-   (set_attr \"length\" \"2,2,*,*,2,6,4\")\n-   (set_attr \"cc\" \"set_zn,set_znv,set_znv,set_znv,none_0hit,none_0hit,set_znv\")])\n+   (set_attr \"length\" \"2,2,*,*,2,6,4\")])\n \n-(define_insn \"*movsf_h8sx\"\n+(define_insn_and_split \"*movsf_h8sx\"\n   [(set (match_operand:SF 0 \"general_operand_dst\" \"=r,rQ\")\n \t(match_operand:SF 1 \"general_operand_src\" \"G,rQi\"))]\n   \"TARGET_H8300SX\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (match_dup 1))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*movsf_h8sx_clobber_flags\"\n+  [(set (match_operand:SF 0 \"general_operand_dst\" \"=r,rQ\")\n+\t(match_operand:SF 1 \"general_operand_src\" \"G,rQi\"))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_H8300SX\"\n   \"@\n     sub.l\t%S0,%S0\n     mov.l\t%S1,%S0\"\n   [(set_attr \"length\" \"2,*\")\n-   (set_attr \"length_table\" \"*,movl\")\n-   (set_attr \"cc\" \"set_zn,set_znv\")])\n+   (set_attr \"length_table\" \"*,movl\")])\n \n-(define_insn \"*movsf_h8300hs\"\n+(define_insn_and_split \"*movsf\"\n   [(set (match_operand:SF 0 \"general_operand_dst\" \"=r,r,r,m,<,r\")\n \t(match_operand:SF 1 \"general_operand_src\" \"G,r,im,r,r,>\"))]\n   \"!TARGET_H8300SX\n     && (register_operand (operands[0], SFmode)\n \t|| register_operand (operands[1], SFmode))\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (match_dup 1))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*movsf_clobber_flags\"\n+  [(set (match_operand:SF 0 \"general_operand_dst\" \"=r,r,r,m,<,r\")\n+\t(match_operand:SF 1 \"general_operand_src\" \"G,r,im,r,r,>\"))\n+   (clobber (reg:CC CC_REG))]\n+  \"!TARGET_H8300SX\n+    && (register_operand (operands[0], SFmode)\n+\t|| register_operand (operands[1], SFmode))\"\n   \"@\n    sub.l\t%S0,%S0\n    mov.l\t%S1,%S0\n    mov.l\t%S1,%S0\n    mov.l\t%S1,%S0\n    mov.l\t%S1,%S0\n    mov.l\t%S1,%S0\"\n-  [(set (attr \"length\")\n-\t(symbol_ref \"compute_mov_length (operands)\"))\n-   (set_attr \"cc\" \"set_zn,set_znv,set_znv,set_znv,set_znv,set_znv\")])\n+  [(set (attr \"length\") (symbol_ref \"compute_mov_length (operands)\"))])\n \f\n ;; ----------------------------------------------------------------------\n ;; PUSH INSTRUCTIONS\n ;; ----------------------------------------------------------------------\n \n-(define_insn \"*push1_h8300hs_<QHI:mode>\"\n+(define_insn_and_split \"*push1_<QHI:mode>\"\n   [(set (mem:QHI\n \t(pre_modify:P\n \t  (reg:P SP_REG)\n \t  (plus:P (reg:P SP_REG) (const_int -4))))\n \t(match_operand:QHI 0 \"register_no_sp_elim_operand\" \"r\"))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (mem:QHI\n+\t\t     (pre_modify:P (reg:P SP_REG)\n+\t\t\t\t   (plus:P (reg:P SP_REG) (const_int -4))))\n+\t\t   (match_dup 0))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*push1_<QHI:mode>_clobber_flags\"\n+  [(set (mem:QHI\n+\t(pre_modify:P\n+\t  (reg:P SP_REG)\n+\t  (plus:P (reg:P SP_REG) (const_int -4))))\n+\t(match_operand:QHI 0 \"register_no_sp_elim_operand\" \"r\"))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"mov.l\\\\t%S0,@-er7\"\n   [(set_attr \"length\" \"4\")])\n "}, {"sha": "56f2b6fb2145a9fe88aa3c3bb59eb388dd3be959", "filename": "gcc/config/h8300/multiply.md", "status": "modified", "additions": 99, "deletions": 32, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fmultiply.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fmultiply.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fmultiply.md?ref=f16897cb4b1468374d63b1a6b12d8b7be845874a", "patch": "@@ -15,23 +15,46 @@\n       operands[2] = gen_rtx_SIGN_EXTEND (HImode, operands[2]);\n   })\n \n-(define_insn \"*mulqihi3_const\"\n+(define_insn_and_split \"*mulqihi3_const\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(mult:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"%0\"))\n \t\t (match_operand:QI 2 \"nibble_operand\" \"IP4>X\")))]\n   \"TARGET_H8300SX\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (mult:HI (sign_extend:HI (match_dup 1)) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*mulqihi3_const_clobber_flags\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(mult:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"%0\"))\n+\t\t (match_operand:QI 2 \"nibble_operand\" \"IP4>X\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_H8300SX\"\n   \"mulxs.b\t%X2,%T0\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"cc\" \"set_zn\")])\n+  [(set_attr \"length\" \"4\")])\n \n-(define_insn \"*mulqihi3\"\n+(define_insn_and_split \"*mulqihi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(mult:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"%0\"))\n \t\t (sign_extend:HI (match_operand:QI 2 \"register_operand\" \"r\"))))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (mult:HI (sign_extend:HI (match_dup 1))\n+\t\t\t    (sign_extend:HI (match_dup 2))))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*mulqihi3_clobber_flags\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(mult:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"%0\"))\n+\t\t (sign_extend:HI (match_operand:QI 2 \"register_operand\" \"r\"))))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"mulxs.b\t%X2,%T0\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"cc\" \"set_zn\")])\n+  [(set_attr \"length\" \"4\")])\n \n (define_expand \"mulhisi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -44,23 +67,46 @@\n       operands[2] = gen_rtx_SIGN_EXTEND (SImode, operands[2]);\n   })\n \n-(define_insn \"*mulhisi3_const\"\n+(define_insn_and_split \"*mulhisi3_const\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(mult:SI (sign_extend:SI (match_operand:HI 1 \"register_operand\" \"%0\"))\n \t\t (match_operand:SI 2 \"nibble_operand\" \"IP4>X\")))]\n   \"TARGET_H8300SX\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (mult:SI (sign_extend:SI (match_dup 1)) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*mulhisi3_const_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(mult:SI (sign_extend:SI (match_operand:HI 1 \"register_operand\" \"%0\"))\n+\t\t (match_operand:SI 2 \"nibble_operand\" \"IP4>X\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_H8300SX\"\n   \"mulxs.w\t%T2,%S0\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"cc\" \"set_zn\")])\n+  [(set_attr \"length\" \"4\")])\n \n-(define_insn \"*mulhisi3\"\n+(define_insn_and_split \"*mulhisi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(mult:SI (sign_extend:SI (match_operand:HI 1 \"register_operand\" \"%0\"))\n \t\t (sign_extend:SI (match_operand:HI 2 \"register_operand\" \"r\"))))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (mult:SI (sign_extend:SI (match_dup 1))\n+\t\t\t    (sign_extend:SI (match_dup 2))))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*mulhisi3_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(mult:SI (sign_extend:SI (match_operand:HI 1 \"register_operand\" \"%0\"))\n+\t\t (sign_extend:SI (match_operand:HI 2 \"register_operand\" \"r\"))))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"mulxs.w\t%T2,%S0\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"cc\" \"set_zn\")])\n+  [(set_attr \"length\" \"4\")])\n \n (define_expand \"umulqihi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n@@ -79,17 +125,15 @@\n \t\t (match_operand:QI 2 \"nibble_operand\" \"IP4>X\")))]\n   \"TARGET_H8300SX\"\n   \"mulxu.b\t%X2,%T0\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"cc\" \"set_zn\")])\n+  [(set_attr \"length\" \"4\")])\n \n (define_insn \"*umulqihi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(mult:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"%0\"))\n \t\t (zero_extend:HI (match_operand:QI 2 \"register_operand\" \"r\"))))]\n   \"\"\n   \"mulxu.b\t%X2,%T0\"\n-  [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"none_0hit\")])\n+  [(set_attr \"length\" \"2\")])\n \n (define_expand \"umulhisi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -108,32 +152,40 @@\n \t\t (match_operand:SI 2 \"nibble_operand\" \"IP4>X\")))]\n   \"TARGET_H8300SX\"\n   \"mulxu.w\t%T2,%S0\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"cc\" \"set_zn\")])\n+  [(set_attr \"length\" \"4\")])\n \n (define_insn \"*umulhisi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(mult:SI (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"%0\"))\n \t\t (zero_extend:SI (match_operand:HI 2 \"register_operand\" \"r\"))))]\n   \"\"\n   \"mulxu.w\t%T2,%S0\"\n-  [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"none_0hit\")])\n+  [(set_attr \"length\" \"2\")])\n \n ;; We could have used mulu.[wl] here, but mulu.[lw] is only available\n ;; on a H8SX with a multiplier, whereas muls.w seems to be available\n ;; on all H8SX variants.\n \n-(define_insn \"mul<mode>3\"\n+(define_insn_and_split \"mul<mode>3\"\n   [(set (match_operand:HSI 0 \"register_operand\" \"=r\")\n         (mult:HSI (match_operand:HSI 1 \"register_operand\" \"%0\")\n \t\t  (match_operand:HSI 2 \"reg_or_nibble_operand\" \"r IP4>X\")))]\n   \"TARGET_H8300SX\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (mult:HSI (match_dup 1) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"mul<mode>3_clobber_flags\"\n+  [(set (match_operand:HSI 0 \"register_operand\" \"=r\")\n+        (mult:HSI (match_operand:HSI 1 \"register_operand\" \"%0\")\n+\t\t  (match_operand:HSI 2 \"reg_or_nibble_operand\" \"r IP4>X\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_H8300SX\"\n   { return <MODE>mode == HImode ? \"muls.w\\\\t%T2,%T0\" : \"muls.l\\\\t%S2,%S0\"; }\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"cc\" \"set_zn\")])\n+  [(set_attr \"length\" \"4\")])\n \n-(define_insn \"smulsi3_highpart\"\n+(define_insn_and_split \"smulsi3_highpart\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(truncate:SI\n \t (lshiftrt:DI\n@@ -142,9 +194,27 @@\n \t   (sign_extend:DI (match_operand:SI 2 \"reg_or_nibble_operand\" \"r IP4>X\")))\n \t  (const_int 32))))]\n   \"TARGET_H8300SXMUL\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (truncate:SI (lshiftrt:DI (mult:DI\n+\t\t\t\t\t       (sign_extend:DI (match_dup 1))\n+\t\t\t\t\t       (sign_extend:DI (match_dup 2)))\n+\t\t\t\t\t     (const_int 32))))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"smulsi3_highpart_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(truncate:SI\n+\t (lshiftrt:DI\n+\t  (mult:DI\n+\t   (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"%0\"))\n+\t   (sign_extend:DI (match_operand:SI 2 \"reg_or_nibble_operand\" \"r IP4>X\")))\n+\t  (const_int 32))))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_H8300SXMUL\"\n   \"muls/u.l\\\\t%S2,%S0\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"cc\" \"set_zn\")])\n+  [(set_attr \"length\" \"4\")])\n \n (define_insn \"umulsi3_highpart\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -156,8 +226,7 @@\n \t    (const_int 32))))]\n   \"TARGET_H8300SX\"\n   \"mulu/u.l\\\\t%S2,%S0\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"cc\" \"none_0hit\")])\n+  [(set_attr \"length\" \"4\")])\n \n ;; This is a \"bridge\" instruction.  Combine can't cram enough insns\n ;; together to crate a MAC instruction directly, but it can create\n@@ -176,8 +245,7 @@\n \t    (mem:HI (post_inc:SI (match_operand:SI 2 \"register_operand\" \"r\"))))))]\n   \"TARGET_MAC\"\n   \"clrmac\\;mac\t@%2+,@%1+\"\n-  [(set_attr \"length\" \"6\")\n-   (set_attr \"cc\" \"none_0hit\")])\n+  [(set_attr \"length\" \"6\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n@@ -189,6 +257,5 @@\n \t      (match_operand:SI 3 \"register_operand\" \"0\")))]\n   \"TARGET_MAC\"\n   \"mac\t@%2+,@%1+\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"cc\" \"none_0hit\")])\n+  [(set_attr \"length\" \"4\")])\n "}, {"sha": "572a29fb2d9d8ee29b0502db433d051e9de79ee7", "filename": "gcc/config/h8300/other.md", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fother.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fother.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fother.md?ref=f16897cb4b1468374d63b1a6b12d8b7be845874a", "patch": "@@ -2,16 +2,25 @@\n ;; ABSOLUTE VALUE INSTRUCTIONS\n ;; ----------------------------------------------------------------------\n \n-(define_insn \"abssf2\"\n+(define_insn_and_split \"abssf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=r\")\n \t(abs:SF (match_operand:SF 1 \"register_operand\" \"0\")))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (abs:SF (match_dup 1)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"abssf2_clobber_flags\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=r\")\n+\t(abs:SF (match_operand:SF 1 \"register_operand\" \"0\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n   \"and.w\\\\t#32767,%e0\"\n   [(set_attr \"length\" \"4\")])\n \n (define_insn \"nop\"\n   [(const_int 0)]\n   \"\"\n   \"nop\"\n-  [(set_attr \"cc\" \"none\")\n-   (set_attr \"length\" \"2\")])\n+  [(set_attr \"length\" \"2\")])"}, {"sha": "bd6901877ee2650234f7777a605923a51e56e8fb", "filename": "gcc/config/h8300/peepholes.md", "status": "modified", "additions": 0, "deletions": 104, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fpeepholes.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fpeepholes.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fpeepholes.md?ref=f16897cb4b1468374d63b1a6b12d8b7be845874a", "patch": "@@ -433,96 +433,6 @@\n \t\t   : gen_rtx_LT (VOIDmode, cc0_rtx, const0_rtx));\n   })\n \n-;; The next three peephole2's will try to transform\n-;;\n-;;   mov.b A,r0l    (or mov.l A,er0)\n-;;   and.l #CST,er0\n-;;\n-;; into\n-;;\n-;;   sub.l er0\n-;;   mov.b A,r0l\n-;;   and.b #CST,r0l (if CST is not 255)\n-\n-(define_peephole2\n-  [(set (match_operand:QI 0 \"register_operand\" \"\")\n-\t(match_operand:QI 1 \"general_operand\" \"\"))\n-   (set (match_operand:SI 2 \"register_operand\" \"\")\n-\t(and:SI (match_dup 2)\n-\t\t(const_int 255)))]\n-  \"!reg_overlap_mentioned_p (operands[2], operands[1])\n-   && REGNO (operands[0]) == REGNO (operands[2])\"\n-  [(set (match_dup 2)\n-\t(const_int 0))\n-   (set (strict_low_part (match_dup 0))\n-\t(match_dup 1))]\n-  \"\")\n-\n-(define_peephole2\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(match_operand:SI 1 \"nonimmediate_operand\" \"\"))\n-   (set (match_dup 0)\n-\t(and:SI (match_dup 0)\n-\t\t(const_int 255)))]\n-  \"!reg_overlap_mentioned_p (operands[0], operands[1])\n-   && !(GET_CODE (operands[1]) == MEM && !offsettable_memref_p (operands[1]))\n-   && !(GET_CODE (operands[1]) == MEM && MEM_VOLATILE_P (operands[1]))\"\n-  [(set (match_dup 0)\n-\t(const_int 0))\n-   (set (strict_low_part (match_dup 2))\n-\t(match_dup 3))]\n-  {\n-    operands[2] = gen_lowpart (QImode, operands[0]);\n-    operands[3] = gen_lowpart (QImode, operands[1]);\n-  })\n-\n-(define_peephole2\n-  [(set (match_operand 0 \"register_operand\" \"\")\n-\t(match_operand 1 \"nonimmediate_operand\" \"\"))\n-   (set (match_operand:SI 2 \"register_operand\" \"\")\n-\t(and:SI (match_dup 2)\n-\t\t(match_operand:SI 3 \"const_int_qi_operand\" \"\")))]\n-  \"(GET_MODE (operands[0]) == QImode\n-    || GET_MODE (operands[0]) == HImode\n-    || GET_MODE (operands[0]) == SImode)\n-   && GET_MODE (operands[0]) == GET_MODE (operands[1])\n-   && REGNO (operands[0]) == REGNO (operands[2])\n-   && !reg_overlap_mentioned_p (operands[2], operands[1])\n-   && !(GET_MODE (operands[1]) != QImode\n-\t&& GET_CODE (operands[1]) == MEM\n-\t&& !offsettable_memref_p (operands[1]))\n-   && !(GET_MODE (operands[1]) != QImode\n-\t&& GET_CODE (operands[1]) == MEM\n-\t&& MEM_VOLATILE_P (operands[1]))\"\n-  [(set (match_dup 2)\n-\t(const_int 0))\n-   (set (strict_low_part (match_dup 4))\n-\t(match_dup 5))\n-   (set (match_dup 2)\n-\t(and:SI (match_dup 2)\n-\t\t(match_dup 6)))]\n-  {\n-    operands[4] = gen_lowpart (QImode, operands[0]);\n-    operands[5] = gen_lowpart (QImode, operands[1]);\n-    operands[6] = GEN_INT (~0xff | INTVAL (operands[3]));\n-  })\n-\n-(define_peephole2\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(match_operand:SI 1 \"register_operand\" \"\"))\n-   (set (match_dup 0)\n-\t(and:SI (match_dup 0)\n-\t\t(const_int 65280)))]\n-  \"!reg_overlap_mentioned_p (operands[0], operands[1])\"\n-  [(set (match_dup 0)\n-\t(const_int 0))\n-   (set (zero_extract:SI (match_dup 0)\n-\t\t\t (const_int 8)\n-\t\t\t (const_int 8))\n-\t(lshiftrt:SI (match_dup 1)\n-\t\t     (const_int 8)))]\n-  \"\")\n-\n ;; If a load of mem:SI is followed by an AND that turns off the upper\n ;; half, then we can load mem:HI instead.\n \n@@ -546,20 +456,6 @@\n     operands[4] = gen_lowpart (HImode, operands[1]);\n   })\n \n-;; Convert a memory comparison to a move if there is a scratch register.\n-\n-(define_peephole2\n-  [(match_scratch:QHSI 1 \"r\")\n-   (set (cc0)\n-\t(compare (match_operand:QHSI 0 \"memory_operand\" \"\")\n-\t\t (const_int 0)))]\n-  \"\"\n-  [(set (match_dup 1)\n-\t(match_dup 0))\n-   (set (cc0) (compare (match_dup 1)\n-\t\t       (const_int 0)))]\n-  \"\")\n-\n ;; (compare (reg:HI) (const_int)) takes 4 bytes, so we try to achieve\n ;; the equivalent with shorter sequences.  Here is the summary.  Cases\n ;; are grouped for each define_peephole2."}, {"sha": "7c4e12ab374da6da21012ffe26494236f2f1d02a", "filename": "gcc/config/h8300/predicates.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fpredicates.md?ref=f16897cb4b1468374d63b1a6b12d8b7be845874a", "patch": "@@ -501,3 +501,12 @@\n (define_predicate \"pc_or_label_operand\"\n   (match_code \"pc,label_ref\"))\n \n+(define_predicate \"simple_memory_operand\"\n+  (match_code \"mem\")\n+{\n+  if (GET_MODE (op) == mode\n+      && (GET_CODE (XEXP (op, 0)) != PRE_DEC\n+\t  && GET_CODE (XEXP (op, 0)) != POST_INC))\n+    return 1;\n+  return 0;\n+})"}, {"sha": "44d596824966b01e3a5d79b7ff2dd2cc31044ab7", "filename": "gcc/config/h8300/proepi.md", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fproepi.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fproepi.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fproepi.md?ref=f16897cb4b1468374d63b1a6b12d8b7be845874a", "patch": "@@ -36,8 +36,7 @@\n \t\t\t\t   XVECLEN (operands[0], 0) - 2));\n   return \"ldm.l\\t@er7+,%S1-%S3\";\n }\n-  [(set_attr \"cc\" \"none\")\n-   (set_attr \"length\" \"4\")])\n+  [(set_attr \"length\" \"4\")])\n \n (define_insn \"stm_h8300sx\"\n   [(match_parallel           0 \"h8300_stm_parallel\"\n@@ -49,8 +48,7 @@\n \t\t\t\t  XVECLEN (operands[0], 0) - 2));\n   return \"stm.l\\t%S2-%S3,@-er7\";\n }\n-  [(set_attr \"cc\" \"none\")\n-   (set_attr \"length\" \"4\")])\n+  [(set_attr \"length\" \"4\")])\n \n (define_insn \"return_h8sx\"\n   [(match_parallel           0 \"h8300_return_parallel\"\n@@ -67,8 +65,7 @@\n   else\n     return \"rts/l\\t%S1-%S3\";\n }\n-  [(set_attr \"cc\" \"none\")\n-   (set_attr \"can_delay\" \"no\")\n+  [(set_attr \"can_delay\" \"no\")\n    (set_attr \"length\" \"2\")])\n \n (define_expand \"return\"\n@@ -86,8 +83,7 @@\n   else\n     return \"rts\";\n }\n-  [(set_attr \"cc\" \"none\")\n-   (set_attr \"can_delay\" \"no\")\n+  [(set_attr \"can_delay\" \"no\")\n    (set_attr \"length\" \"2\")])\n \n (define_expand \"prologue\""}, {"sha": "a05119f33ac2d9eeca1d788f2fc414f3c40f37fa", "filename": "gcc/config/h8300/save.md", "status": "added", "additions": 403, "deletions": 0, "changes": 403, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fsave.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fsave.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fsave.md?ref=f16897cb4b1468374d63b1a6b12d8b7be845874a", "patch": "@@ -0,0 +1,403 @@\n+;; ----------------------------------------------------------------------\n+;; MULTIPLY INSTRUCTIONS\n+;; ----------------------------------------------------------------------\n+\n+;; Note that the H8/300 can only handle umulqihi3.\n+\n+(define_expand \"mulqihi3\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"\")\n+\t(mult:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"\"))\n+\t\t ;; intentionally-mismatched modes\n+\t\t (match_operand:QI 2 \"reg_or_nibble_operand\" \"\")))]\n+  \"\"\n+  {\n+    if (GET_MODE (operands[2]) != VOIDmode)\n+      operands[2] = gen_rtx_SIGN_EXTEND (HImode, operands[2]);\n+  })\n+\n+(define_insn_and_split \"*mulqihi3_const\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(mult:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"%0\"))\n+\t\t (match_operand:QI 2 \"nibble_operand\" \"IP4>X\")))]\n+  \"TARGET_H8300SX\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (mult:HI (sign_extend:HI (match_dup 1)) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*mulqihi3_const_clobber_flags\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(mult:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"%0\"))\n+\t\t (match_operand:QI 2 \"nibble_operand\" \"IP4>X\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_H8300SX\"\n+  \"mulxs.b\t%X2,%T0\"\n+  [(set_attr \"length\" \"4\")])\n+\n+(define_insn \"*mulqihi3_const_set_flags\"\n+  [(set (reg:CCZN CC_REG)\n+\t(compare:CCZN\n+\t  (mult:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"%0\"))\n+\t\t   (match_operand:QI 2 \"nibble_operand\" \"IP4>X\"))\n+\t  (const_int 0)))\n+   (set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(mult:HI (sign_extend:HI (match_dup 1)) (match_dup 2)))]\n+  \"TARGET_H8300SX\"\n+  \"mulxs.b\t%X2,%T0\"\n+  [(set_attr \"length\" \"4\")])\n+\n+(define_insn_and_split \"*mulqihi3\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(mult:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"%0\"))\n+\t\t (sign_extend:HI (match_operand:QI 2 \"register_operand\" \"r\"))))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (mult:HI (sign_extend:HI (match_dup 1))\n+\t\t\t    (sign_extend:HI (match_dup 2))))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*mulqihi3_clobber_flags\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(mult:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"%0\"))\n+\t\t (sign_extend:HI (match_operand:QI 2 \"register_operand\" \"r\"))))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n+  \"mulxs.b\t%X2,%T0\"\n+  [(set_attr \"length\" \"4\")])\n+\n+(define_insn \"*mulqihi3_set_flags\"\n+  [(set (reg:CCZN CC_REG)\n+\t(compare:CCZN\n+\t  (mult:HI\n+\t    (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"%0\"))\n+\t    (sign_extend:HI (match_operand:QI 2 \"register_operand\" \"r\")))\n+\t  (const_int 0)))\n+   (set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(mult:HI (sign_extend:HI (match_dup 1)) (sign_extend (match_dup 2))))]\n+  \"\"\n+  \"mulxs.b\t%X2,%T0\"\n+  [(set_attr \"length\" \"4\")])\n+\n+(define_expand \"mulhisi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(mult:SI (sign_extend:SI (match_operand:HI 1 \"register_operand\" \"\"))\n+\t\t ;; intentionally-mismatched modes\n+\t\t (match_operand:HI 2 \"reg_or_nibble_operand\" \"\")))]\n+  \"\"\n+  {\n+    if (GET_MODE (operands[2]) != VOIDmode)\n+      operands[2] = gen_rtx_SIGN_EXTEND (SImode, operands[2]);\n+  })\n+\n+(define_insn_and_split \"*mulhisi3_const\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(mult:SI (sign_extend:SI (match_operand:HI 1 \"register_operand\" \"%0\"))\n+\t\t (match_operand:SI 2 \"nibble_operand\" \"IP4>X\")))]\n+  \"TARGET_H8300SX\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (mult:SI (sign_extend:SI (match_dup 1)) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*mulhisi3_const_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(mult:SI (sign_extend:SI (match_operand:HI 1 \"register_operand\" \"%0\"))\n+\t\t (match_operand:SI 2 \"nibble_operand\" \"IP4>X\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_H8300SX\"\n+  \"mulxs.w\t%T2,%S0\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"cc\" \"set_zn\")])\n+\n+(define_insn_and_split \"*mulhisi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(mult:SI (sign_extend:SI (match_operand:HI 1 \"register_operand\" \"%0\"))\n+\t\t (sign_extend:SI (match_operand:HI 2 \"register_operand\" \"r\"))))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (mult:SI (sign_extend:SI (match_dup 1))\n+\t\t\t    (sign_extend:SI (match_dup 2))))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*mulhisi3_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(mult:SI (sign_extend:SI (match_operand:HI 1 \"register_operand\" \"%0\"))\n+\t\t (sign_extend:SI (match_operand:HI 2 \"register_operand\" \"r\"))))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n+  \"mulxs.w\t%T2,%S0\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"cc\" \"set_zn\")])\n+\n+(define_expand \"umulqihi3\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"\")\n+\t(mult:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"\"))\n+\t\t ;; intentionally-mismatched modes\n+\t\t (match_operand:QI 2 \"reg_or_nibble_operand\" \"\")))]\n+  \"\"\n+  {\n+    if (GET_MODE (operands[2]) != VOIDmode)\n+      operands[2] = gen_rtx_ZERO_EXTEND (HImode, operands[2]);\n+  })\n+\n+(define_insn_and_split \"*umulqihi3_const\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(mult:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"%0\"))\n+\t\t (match_operand:QI 2 \"nibble_operand\" \"IP4>X\")))]\n+  \"TARGET_H8300SX\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (mult:HI (zero_extend:HI (match_dup 1)) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*umulqihi3_const_clobber_flags\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(mult:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"%0\"))\n+\t\t (match_operand:QI 2 \"nibble_operand\" \"IP4>X\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_H8300SX\"\n+  \"mulxu.b\t%X2,%T0\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"cc\" \"set_zn\")])\n+\n+(define_insn_and_split \"*umulqihi3\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(mult:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"%0\"))\n+\t\t (zero_extend:HI (match_operand:QI 2 \"register_operand\" \"r\"))))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (mult:HI (zero_extend:HI (match_dup 1))\n+\t\t\t    (zero_extend:HI (match_dup 2))))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*umulqihi3_clobber_flags\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(mult:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"%0\"))\n+\t\t (zero_extend:HI (match_operand:QI 2 \"register_operand\" \"r\"))))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n+  \"mulxu.b\t%X2,%T0\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"cc\" \"none_0hit\")])\n+\n+(define_expand \"umulhisi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(mult:SI (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"\"))\n+\t\t ;; intentionally-mismatched modes\n+\t\t (match_operand:HI 2 \"reg_or_nibble_operand\" \"\")))]\n+  \"\"\n+  {\n+    if (GET_MODE (operands[2]) != VOIDmode)\n+      operands[2] = gen_rtx_ZERO_EXTEND (SImode, operands[2]);\n+  })\n+\n+(define_insn_and_split \"*umulhisi3_const\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(mult:SI (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"%0\"))\n+\t\t (match_operand:SI 2 \"nibble_operand\" \"IP4>X\")))]\n+  \"TARGET_H8300SX\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (mult:SI (zero_extend:SI (match_dup 1)) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*umulhisi3_const_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(mult:SI (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"%0\"))\n+\t\t (match_operand:SI 2 \"nibble_operand\" \"IP4>X\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_H8300SX\"\n+  \"mulxu.w\t%T2,%S0\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"cc\" \"set_zn\")])\n+\n+(define_insn_and_split \"*umulhisi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(mult:SI (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"%0\"))\n+\t\t (zero_extend:SI (match_operand:HI 2 \"register_operand\" \"r\"))))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (mult:SI (zero_extend:SI (match_dup 1))\n+\t\t\t    (zero_extend:SI (match_dup 2))))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*umulhisi3_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(mult:SI (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"%0\"))\n+\t\t (zero_extend:SI (match_operand:HI 2 \"register_operand\" \"r\"))))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n+  \"mulxu.w\t%T2,%S0\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"cc\" \"none_0hit\")])\n+\n+;; We could have used mulu.[wl] here, but mulu.[lw] is only available\n+;; on a H8SX with a multiplier, whereas muls.w seems to be available\n+;; on all H8SX variants.\n+\n+(define_insn_and_split \"mul<mode>3\"\n+  [(set (match_operand:HSI 0 \"register_operand\" \"=r\")\n+        (mult:HSI (match_operand:HSI 1 \"register_operand\" \"%0\")\n+\t\t  (match_operand:HSI 2 \"reg_or_nibble_operand\" \"r IP4>X\")))]\n+  \"TARGET_H8300SX\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (mult:HSI (match_dup 1) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"mul<mode>3_clobber_flags\"\n+  [(set (match_operand:HSI 0 \"register_operand\" \"=r\")\n+        (mult:HSI (match_operand:HSI 1 \"register_operand\" \"%0\")\n+\t\t  (match_operand:HSI 2 \"reg_or_nibble_operand\" \"r IP4>X\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_H8300SX\"\n+  { return <MODE>mode == HImode ? \"muls.w\\\\t%T2,%T0\" : \"muls.l\\\\t%S2,%S0\"; }\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"cc\" \"set_zn\")])\n+\n+(define_insn_and_split \"smulsi3_highpart\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(truncate:SI\n+\t (lshiftrt:DI\n+\t  (mult:DI\n+\t   (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"%0\"))\n+\t   (sign_extend:DI (match_operand:SI 2 \"reg_or_nibble_operand\" \"r IP4>X\")))\n+\t  (const_int 32))))]\n+  \"TARGET_H8300SXMUL\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (truncate:SI (lshiftrt:DI (mult:DI\n+\t\t\t\t\t       (sign_extend:DI (match_dup 1))\n+\t\t\t\t\t       (sign_extend:DI (match_dup 2)))\n+\t\t\t\t\t     (const_int 32))))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"smulsi3_highpart_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(truncate:SI\n+\t (lshiftrt:DI\n+\t  (mult:DI\n+\t   (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"%0\"))\n+\t   (sign_extend:DI (match_operand:SI 2 \"reg_or_nibble_operand\" \"r IP4>X\")))\n+\t  (const_int 32))))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_H8300SXMUL\"\n+  \"muls/u.l\\\\t%S2,%S0\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"cc\" \"set_zn\")])\n+\n+(define_insn_and_split \"umulsi3_highpart\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(truncate:SI\n+\t  (ashiftrt:DI\n+\t    (mult:DI\n+\t      (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"%0\"))\n+\t      (zero_extend:DI (match_operand:SI 2 \"reg_or_nibble_operand\" \"r IP4>X\")))\n+\t    (const_int 32))))]\n+  \"TARGET_H8300SX\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (truncate:SI (ashiftrt:DI (mult:DI \n+\t\t\t\t\t       (zero_extend:DI (match_dup 1))\n+\t\t\t\t\t       (zero_extend:DI (match_dup 2)))\n+\t\t\t\t\t     (const_int 32))))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"umulsi3_highpart_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(truncate:SI\n+\t  (ashiftrt:DI\n+\t    (mult:DI\n+\t      (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"%0\"))\n+\t      (zero_extend:DI (match_operand:SI 2 \"reg_or_nibble_operand\" \"r IP4>X\")))\n+\t    (const_int 32))))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_H8300SX\"\n+  \"mulu/u.l\\\\t%S2,%S0\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"cc\" \"none_0hit\")])\n+\n+;; This is a \"bridge\" instruction.  Combine can't cram enough insns\n+;; together to crate a MAC instruction directly, but it can create\n+;; this instruction, which then allows combine to create the real\n+;; MAC insn.\n+;;\n+;; Unfortunately, if combine doesn't create a MAC instruction, this\n+;; insn must generate reasonably correct code.  Egad.\n+\n+(define_insn_and_split \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n+\t(mult:SI\n+\t  (sign_extend:SI\n+\t    (mem:HI (post_inc:SI (match_operand:SI 1 \"register_operand\" \"r\"))))\n+\t  (sign_extend:SI\n+\t    (mem:HI (post_inc:SI (match_operand:SI 2 \"register_operand\" \"r\"))))))]\n+  \"TARGET_MAC\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (mult:SI (sign_extend:SI\n+\t\t\t      (mem:HI (post_inc:SI (match_dup 1))))\n+\t\t\t    (sign_extend:SI\n+\t\t\t      (mem:HI (post_inc:SI (match_dup 2))))))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n+\t(mult:SI\n+\t  (sign_extend:SI\n+\t    (mem:HI (post_inc:SI (match_operand:SI 1 \"register_operand\" \"r\"))))\n+\t  (sign_extend:SI\n+\t    (mem:HI (post_inc:SI (match_operand:SI 2 \"register_operand\" \"r\"))))))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_MAC\"\n+  \"clrmac\\;mac\t@%2+,@%1+\"\n+  [(set_attr \"length\" \"6\")\n+   (set_attr \"cc\" \"none_0hit\")])\n+\n+(define_insn_and_split \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n+\t(plus:SI (mult:SI\n+\t  (sign_extend:SI (mem:HI\n+\t    (post_inc:SI (match_operand:SI 1 \"register_operand\" \"r\"))))\n+\t  (sign_extend:SI (mem:HI\n+\t    (post_inc:SI (match_operand:SI 2 \"register_operand\" \"r\")))))\n+\t      (match_operand:SI 3 \"register_operand\" \"0\")))]\n+  \"TARGET_MAC\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (plus:SI\n+\t\t     (mult:SI\n+\t\t\t(sign_extend:SI (mem:HI (post_inc:SI (match_dup 1))))\n+\t\t\t(sign_extend:SI (mem:HI (post_inc:SI (match_dup 2)))))))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n+\t(plus:SI (mult:SI\n+\t  (sign_extend:SI (mem:HI\n+\t    (post_inc:SI (match_operand:SI 1 \"register_operand\" \"r\"))))\n+\t  (sign_extend:SI (mem:HI\n+\t    (post_inc:SI (match_operand:SI 2 \"register_operand\" \"r\")))))\n+\t      (match_operand:SI 3 \"register_operand\" \"0\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"TARGET_MAC\"\n+  \"mac\t@%2+,@%1+\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"cc\" \"none_0hit\")])\n+"}, {"sha": "f1c86f7da1c489064d2f8bb5ffdc25c8674fb933", "filename": "gcc/config/h8300/shiftrotate.md", "status": "modified", "additions": 199, "deletions": 43, "changes": 242, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fshiftrotate.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Fshiftrotate.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fshiftrotate.md?ref=f16897cb4b1468374d63b1a6b12d8b7be845874a", "patch": "@@ -50,12 +50,24 @@\n \n ;; QI/HI/SI BIT SHIFTS\n \n-(define_insn \"\"\n+(define_insn_and_split \"\"\n   [(set (match_operand:QHSI 0 \"h8300_dst_operand\" \"=rQ\")\n \t(match_operator:QHSI 3 \"h8sx_unary_shift_operator\"\n \t [(match_operand:QHSI 1 \"h8300_dst_operand\" \"0\")\n \t  (match_operand:QI 2 \"const_int_operand\" \"\")]))]\n   \"h8300_operands_match_p (operands)\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (match_op_dup 3 [(match_dup 1) (match_dup 2)]))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"\"\n+  [(set (match_operand:QHSI 0 \"h8300_dst_operand\" \"=rQ\")\n+\t(match_operator:QHSI 3 \"h8sx_unary_shift_operator\"\n+\t [(match_operand:QHSI 1 \"h8300_dst_operand\" \"0\")\n+\t  (match_operand:QI 2 \"const_int_operand\" \"\")]))\n+   (clobber (reg:CC CC_REG))]\n+  \"h8300_operands_match_p (operands)\"\n {\n   if (<MODE>mode == E_QImode)\n     return output_h8sx_shift (operands, 'b', 'X');\n@@ -65,15 +77,47 @@\n     return output_h8sx_shift (operands, 'l', 'S');\n   gcc_unreachable ();\n }\n-  [(set_attr \"length_table\" \"unary\")\n-   (set_attr \"cc\" \"set_znv\")])\n+  [(set_attr \"length_table\" \"unary\")])\n \n (define_insn \"\"\n+  [(set (reg:CCZN CC_REG)\n+\t(compare:CCZN\n+\t  (match_operator:QHSI 3 \"h8sx_unary_shift_operator\"\n+\t    [(match_operand:QHSI 1 \"h8300_dst_operand\" \"0\")\n+\t     (match_operand:QI 2 \"const_int_operand\" \"\")])\n+\t  (const_int 0)))\n+   (set (match_operand:QHSI 0 \"h8300_dst_operand\" \"=rQ\")\n+\t(match_op_dup 3 [(match_dup 1) (match_dup 2)]))]\n+  \"h8300_operands_match_p (operands)\"\n+{\n+  if (<MODE>mode == E_QImode)\n+    return output_h8sx_shift (operands, 'b', 'X');\n+  if (<MODE>mode == E_HImode)\n+    return output_h8sx_shift (operands, 'w', 'T');\n+  if (<MODE>mode == E_SImode)\n+    return output_h8sx_shift (operands, 'l', 'S');\n+  gcc_unreachable ();\n+}\n+  [(set_attr \"length_table\" \"unary\")])\n+\n+(define_insn_and_split \"\"\n   [(set (match_operand:QHSI 0 \"register_operand\" \"=r\")\n \t(match_operator:QHSI 3 \"h8sx_binary_shift_operator\"\n \t [(match_operand:QHSI 1 \"register_operand\" \"0\")\n \t  (match_operand:QI 2 \"nonmemory_operand\" \"r P5>X\")]))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (match_op_dup 3 [(match_dup 1) (match_dup 2)]))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"\"\n+  [(set (match_operand:QHSI 0 \"register_operand\" \"=r\")\n+\t(match_operator:QHSI 3 \"h8sx_binary_shift_operator\"\n+\t [(match_operand:QHSI 1 \"register_operand\" \"0\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\" \"r P5>X\")]))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n {\n   if (<MODE>mode == QImode)\n     return output_h8sx_shift (operands, 'b', 'X');\n@@ -83,102 +127,193 @@\n     return output_h8sx_shift (operands, 'l', 'S');\n   gcc_unreachable ();\n }\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"cc\" \"set_znv\")])\n+  [(set_attr \"length\" \"4\")])\n \n-(define_insn \"*shiftqi\"\n+(define_insn \"\"\n+  [(set (reg:CCZN CC_REG)\n+\t(compare:CCZN\n+\t  (match_operator:QHSI 3 \"h8sx_binary_shift_operator\"\n+\t   [(match_operand:QHSI 1 \"register_operand\" \"0\")\n+\t    (match_operand:QI 2 \"nonmemory_operand\" \"r P5>X\")])\n+\t  (const_int 0)))\n+   (set (match_operand:QHSI 0 \"register_operand\" \"=r\")\n+\t(match_op_dup 3 [(match_dup 1) (match_dup 2)]))]\n+  \"\"\n+{\n+  if (<MODE>mode == QImode)\n+    return output_h8sx_shift (operands, 'b', 'X');\n+  if (<MODE>mode == HImode)\n+    return output_h8sx_shift (operands, 'w', 'T');\n+  if (<MODE>mode == SImode)\n+    return output_h8sx_shift (operands, 'l', 'S');\n+  gcc_unreachable ();\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+(define_insn_and_split \"*shiftqi\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n \t(match_operator:QI 3 \"nshift_operator\"\n \t [(match_operand:QI 1 \"register_operand\" \"0,0\")\n \t  (match_operand:QI 2 \"nonmemory_operand\" \"R,rn\")]))\n    (clobber (match_scratch:QI 4 \"=X,&r\"))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (match_op_dup 3 [(match_dup 1) (match_dup 2)]))\n+\t      (clobber (match_dup 4))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*shiftqi_clobber_flags\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n+\t(match_operator:QI 3 \"nshift_operator\"\n+\t [(match_operand:QI 1 \"register_operand\" \"0,0\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\" \"R,rn\")]))\n+   (clobber (match_scratch:QI 4 \"=X,&r\"))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n {\n   return output_a_shift (operands);\n }\n   [(set (attr \"length\")\n-\t(symbol_ref \"compute_a_shift_length (insn, operands)\"))\n-   (set (attr \"cc\")\n-\t(symbol_ref \"compute_a_shift_cc (insn, operands)\"))])\n+\t(symbol_ref \"compute_a_shift_length (insn, operands)\"))])\n \n-(define_insn \"*shiftqi_noscratch\"\n+(define_insn_and_split \"*shiftqi_noscratch\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n \t(match_operator:QI 3 \"nshift_operator\"\n \t [(match_operand:QI 1 \"register_operand\" \"0,0\")\n \t  (match_operand:QI 2 \"nonmemory_operand\" \"R,rn\")]))]\n   \"(GET_CODE (operands[2]) == CONST_INT\n     && !h8300_shift_needs_scratch_p (INTVAL (operands[2]), QImode,\n \t\t\t\t     GET_CODE (operands[3])))\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (match_op_dup 3 [(match_dup 1) (match_dup 2)]))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*shiftqi_noscratch_clobber_flags\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n+\t(match_operator:QI 3 \"nshift_operator\"\n+\t [(match_operand:QI 1 \"register_operand\" \"0,0\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\" \"R,rn\")]))\n+   (clobber (reg:CC CC_REG))]\n+  \"(GET_CODE (operands[2]) == CONST_INT\n+    && !h8300_shift_needs_scratch_p (INTVAL (operands[2]), QImode,\n+\t\t\t\t     GET_CODE (operands[3])))\"\n {\n   return output_a_shift (operands);\n }\n   [(set (attr \"length\")\n-\t(symbol_ref \"compute_a_shift_length (insn, operands)\"))\n-   (set (attr \"cc\")\n-\t(symbol_ref \"compute_a_shift_cc (insn, operands)\"))])\n+\t(symbol_ref \"compute_a_shift_length (insn, operands)\"))])\n \n-(define_insn \"*shifthi\"\n+(define_insn_and_split \"*shifthi\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n \t(match_operator:HI 3 \"nshift_operator\"\n \t [(match_operand:HI 1 \"register_operand\" \"0,0\")\n \t  (match_operand:QI 2 \"nonmemory_operand\" \"S,rn\")]))\n    (clobber (match_scratch:QI 4 \"=X,&r\"))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (match_op_dup 3 [(match_dup 1) (match_dup 2)]))\n+\t      (clobber (match_dup 4))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*shifthi_clobber_flags\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n+\t(match_operator:HI 3 \"nshift_operator\"\n+\t [(match_operand:HI 1 \"register_operand\" \"0,0\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\" \"S,rn\")]))\n+   (clobber (match_scratch:QI 4 \"=X,&r\"))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n {\n   return output_a_shift (operands);\n }\n   [(set (attr \"length\")\n-\t(symbol_ref \"compute_a_shift_length (insn, operands)\"))\n-   (set (attr \"cc\")\n-\t(symbol_ref \"compute_a_shift_cc (insn, operands)\"))])\n+\t(symbol_ref \"compute_a_shift_length (insn, operands)\"))])\n \n-(define_insn \"*shifthi_noscratch\"\n+(define_insn_and_split \"*shifthi_noscratch\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n \t(match_operator:HI 3 \"nshift_operator\"\n \t [(match_operand:HI 1 \"register_operand\" \"0,0\")\n-\t  (match_operand:QI 2 \"nonmemory_operand\" \"S,rn\")]))]\n+\t  (match_operand:HI 2 \"nonmemory_operand\" \"S,rn\")]))]\n+  \"(GET_CODE (operands[2]) == CONST_INT\n+    && !h8300_shift_needs_scratch_p (INTVAL (operands[2]), HImode,\n+\t\t\t\t     GET_CODE (operands[3])))\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (match_op_dup 3 [(match_dup 1) (match_dup 2)]))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*shifthi_noscratch_clobber_flags\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n+\t(match_operator:HI 3 \"nshift_operator\"\n+\t [(match_operand:HI 1 \"register_operand\" \"0,0\")\n+\t  (match_operand:HI 2 \"nonmemory_operand\" \"S,rn\")]))\n+   (clobber (reg:CC CC_REG))]\n   \"(GET_CODE (operands[2]) == CONST_INT\n     && !h8300_shift_needs_scratch_p (INTVAL (operands[2]), HImode,\n \t\t\t\t     GET_CODE (operands[3])))\"\n {\n   return output_a_shift (operands);\n }\n   [(set (attr \"length\")\n-\t(symbol_ref \"compute_a_shift_length (insn, operands)\"))\n-   (set (attr \"cc\")\n-\t(symbol_ref \"compute_a_shift_cc (insn, operands)\"))])\n+\t(symbol_ref \"compute_a_shift_length (insn, operands)\"))])\n \n-(define_insn \"*shiftsi\"\n+(define_insn_and_split \"*shiftsi\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(match_operator:SI 3 \"nshift_operator\"\n \t [(match_operand:SI 1 \"register_operand\" \"0,0\")\n \t  (match_operand:QI 2 \"nonmemory_operand\" \"T,rn\")]))\n    (clobber (match_scratch:QI 4 \"=X,&r\"))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (match_op_dup 3 [(match_dup 1) (match_dup 2)]))\n+\t      (clobber (match_dup 4))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*shiftsi_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(match_operator:SI 3 \"nshift_operator\"\n+\t [(match_operand:SI 1 \"register_operand\" \"0,0\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\" \"T,rn\")]))\n+   (clobber (match_scratch:QI 4 \"=X,&r\"))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n {\n   return output_a_shift (operands);\n }\n   [(set (attr \"length\")\n-\t(symbol_ref \"compute_a_shift_length (insn, operands)\"))\n-   (set (attr \"cc\")\n-\t(symbol_ref \"compute_a_shift_cc (insn, operands)\"))])\n+\t(symbol_ref \"compute_a_shift_length (insn, operands)\"))])\n \n-(define_insn \"*shiftsi_noscratch\"\n+(define_insn_and_split \"*shiftsi_noscratch\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(match_operator:SI 3 \"nshift_operator\"\n \t [(match_operand:SI 1 \"register_operand\" \"0,0\")\n \t  (match_operand:QI 2 \"nonmemory_operand\" \"T,rn\")]))]\n   \"(GET_CODE (operands[2]) == CONST_INT\n     && !h8300_shift_needs_scratch_p (INTVAL (operands[2]), SImode,\n \t\t\t\t     GET_CODE (operands[3])))\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (match_op_dup 3 [(match_dup 1) (match_dup 2)]))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*shiftsi_noscratch_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(match_operator:SI 3 \"nshift_operator\"\n+\t [(match_operand:SI 1 \"register_operand\" \"0,0\")\n+\t  (match_operand:SI 2 \"nonmemory_operand\" \"T,rn\")]))\n+   (clobber (reg:CC CC_REG))]\n+  \"(GET_CODE (operands[2]) == CONST_INT\n+    && !h8300_shift_needs_scratch_p (INTVAL (operands[2]), SImode,\n+\t\t\t\t     GET_CODE (operands[3])))\"\n {\n   return output_a_shift (operands);\n }\n   [(set (attr \"length\")\n-\t(symbol_ref \"compute_a_shift_length (insn, operands)\"))\n-   (set (attr \"cc\")\n-\t(symbol_ref \"compute_a_shift_cc (insn, operands)\"))])\n-\n+\t(symbol_ref \"compute_a_shift_length (insn, operands)\"))])\n \n ;; Split a variable shift into a loop.  If the register containing\n ;; the shift count dies, then we just use that register.\n@@ -188,12 +323,12 @@\n \t(match_operator 2 \"nshift_operator\"\n \t [(match_dup 0)\n \t  (match_operand:QI 1 \"register_operand\" \"\")]))\n-   (clobber (match_operand:QI 3 \"register_operand\" \"\"))]\n+   (clobber (match_operand:QI 3 \"register_operand\" \"\"))\n+   (clobber (reg:CC CC_REG))]\n   \"epilogue_completed\n    && find_regno_note (insn, REG_DEAD, REGNO (operands[1]))\"\n-  [(set (cc0) (compare (match_dup 1) (const_int 0)))\n-   (set (pc)\n-        (if_then_else (le (cc0) (const_int 0))\n+  [(set (pc)\n+        (if_then_else (le (match_dup 1) (const_int 0))\n \t\t      (label_ref (match_dup 5))\n \t\t      (pc)))\n    (match_dup 4)\n@@ -202,9 +337,8 @@\n \t   (match_op_dup 2 [(match_dup 0) (const_int 1)]))\n       (clobber (scratch:QI))])\n    (set (match_dup 1) (plus:QI (match_dup 1) (const_int -1)))\n-   (set (cc0) (compare (match_dup 1) (const_int 0)))\n    (set (pc)\n-        (if_then_else (ne (cc0) (const_int 0))\n+        (if_then_else (ne (match_dup 1) (const_int 0))\n \t\t      (label_ref (match_dup 4))\n \t\t      (pc)))\n    (match_dup 5)]\n@@ -218,14 +352,14 @@\n \t(match_operator 2 \"nshift_operator\"\n \t [(match_dup 0)\n \t  (match_operand:QI 1 \"register_operand\" \"\")]))\n-   (clobber (match_operand:QI 3 \"register_operand\" \"\"))]\n+   (clobber (match_operand:QI 3 \"register_operand\" \"\"))\n+   (clobber (reg:CC CC_REG))]\n   \"epilogue_completed\n    && !find_regno_note (insn, REG_DEAD, REGNO (operands[1]))\"\n   [(set (match_dup 3)\n \t(match_dup 1))\n-   (set (cc0) (compare (match_dup 3) (const_int 0)))\n    (set (pc)\n-        (if_then_else (le (cc0) (const_int 0))\n+        (if_then_else (le (match_dup 3) (const_int 0))\n \t\t      (label_ref (match_dup 5))\n \t\t      (pc)))\n    (match_dup 4)\n@@ -234,16 +368,27 @@\n \t   (match_op_dup 2 [(match_dup 0) (const_int 1)]))\n       (clobber (scratch:QI))])\n    (set (match_dup 3) (plus:QI (match_dup 3) (const_int -1)))\n-   (set (cc0) (compare (match_dup 3) (const_int 0)))\n    (set (pc)\n-        (if_then_else (ne (cc0) (const_int 0))\n+        (if_then_else (ne (match_dup 3) (const_int 0))\n \t\t      (label_ref (match_dup 4))\n \t\t      (pc)))\n    (match_dup 5)]\n   {\n     operands[4] = gen_label_rtx ();\n     operands[5] = gen_label_rtx ();\n   })\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(match_operator:SI 3 \"nshift_operator\"\n+\t [(match_operand:SI 1 \"register_operand\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\")]))\n+   (clobber (match_scratch:QI 4))]\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (match_op_dup 3 [(match_dup 1) (match_dup 2)]))\n+\t      (clobber (match_dup 4))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n \f\n ;; ----------------------------------------------------------------------\n ;; ROTATIONS\n@@ -259,11 +404,22 @@\n     DONE;\n   })\n \n-(define_insn \"rotl<mode>3_1\"\n+(define_insn_and_split \"rotl<mode>3_1\"\n   [(set (match_operand:QHSI 0 \"register_operand\" \"=r\")\n \t(rotate:QHSI (match_operand:QHSI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"immediate_operand\" \"\")))]\n   \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0) (rotate:QHSI (match_dup 1) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"rotl<mode>3_1_clobber_flags\"\n+  [(set (match_operand:QHSI 0 \"register_operand\" \"=r\")\n+\t(rotate:QHSI (match_operand:QHSI 1 \"register_operand\" \"0\")\n+\t\t     (match_operand:QI 2 \"immediate_operand\" \"\")))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n {\n   return output_a_rotate (ROTATE, operands);\n }"}, {"sha": "3ec961dd717f7b5cc1b82cfa8306bcb1fef4f9e0", "filename": "gcc/config/h8300/testcompare.md", "status": "modified", "additions": 143, "deletions": 130, "changes": 273, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Ftestcompare.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16897cb4b1468374d63b1a6b12d8b7be845874a/gcc%2Fconfig%2Fh8300%2Ftestcompare.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Ftestcompare.md?ref=f16897cb4b1468374d63b1a6b12d8b7be845874a", "patch": "@@ -2,164 +2,155 @@\n ;; TEST INSTRUCTIONS\n ;; ----------------------------------------------------------------------\n \n-(define_insn_and_split \"*tst_extzv_1_n\"\n-  [(set (cc0)\n-\t(compare (zero_extract:SI (match_operand:QI 0 \"general_operand_src\" \"r,U,mn>\")\n-\t\t\t\t  (const_int 1)\n-\t\t\t\t  (match_operand 1 \"const_int_operand\" \"n,n,n\"))\n-\t\t (const_int 0)))\n-   (clobber (match_scratch:QI 2 \"=X,X,&r\"))]\n-  \"!CONSTANT_P (operands[0])\"\n-  \"@\n-   btst\\\\t%Z1,%Y0\n-   btst\\\\t%Z1,%Y0\n-   #\"\n-  \"&& reload_completed\n-   && !satisfies_constraint_U (operands[0])\"\n-  [(set (match_dup 2)\n-\t(match_dup 0))\n-   (parallel [(set (cc0) (compare (zero_extract:SI (match_dup 2)\n-\t\t\t\t\t\t   (const_int 1)\n-\t\t\t\t\t\t   (match_dup 1))\n-\t\t\t\t  (const_int 0)))\n-\t      (clobber (scratch:QI))])]\n-  \"\"\n-  [(set_attr \"length\" \"2,8,10\")\n-   (set_attr \"cc\" \"set_zn,set_zn,set_zn\")])\n-\n-(define_insn \"\"\n-  [(set (cc0)\n-\t(compare (zero_extract:HSI (match_operand:HSI 0 \"register_operand\" \"r\")\n-\t\t\t\t   (const_int 1)\n-\t\t\t\t   (match_operand 1 \"const_int_operand\" \"n\"))\n-\t\t (const_int 0)))]\n-  \"INTVAL (operands[1]) <= 15\"\n-  \"btst\t%Z1,%Y0\"\n-  [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_zn\")])\n-\n-(define_insn_and_split \"*tstsi_upper_bit\"\n-  [(set (cc0)\n-\t(compare (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"r\")\n-\t\t\t\t  (const_int 1)\n-\t\t\t\t  (match_operand 1 \"const_int_operand\" \"n\"))\n-\t\t (const_int 0)))\n-   (clobber (match_scratch:SI 2 \"=&r\"))]\n-  \"INTVAL (operands[1]) >= 16\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 2)\n-\t(ior:SI (and:SI (match_dup 2)\n-\t\t\t(const_int -65536))\n-\t\t(lshiftrt:SI (match_dup 0)\n-\t\t\t     (const_int 16))))\n-   (set (cc0)\n-\t(compare (zero_extract:SI (match_dup 2)\n-\t\t\t\t  (const_int 1)\n-\t\t\t\t  (match_dup 3))\n-\t\t (const_int 0)))]\n-  {\n-    operands[3] = GEN_INT (INTVAL (operands[1]) - 16);\n-  })\n-\n-(define_insn \"*tstsi_variable_bit\"\n-  [(set (cc0)\n-\t(compare (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"r\")\n-\t\t\t\t  (const_int 1)\n-\t\t\t\t  (and:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t\t\t  (const_int 7)))\n-\t\t (const_int 0)))]\n-  \"\"\n-  \"btst\t%w1,%w0\"\n-  [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_zn\")])\n-\n-(define_insn_and_split \"*tstsi_variable_bit_qi\"\n-  [(set (cc0)\n-\t(compare (zero_extract:SI (zero_extend:SI (match_operand:QI 0 \"general_operand_src\" \"r,U,mn>\"))\n-\t\t\t\t  (const_int 1)\n-\t\t\t\t  (and:SI (match_operand:SI 1 \"register_operand\" \"r,r,r\")\n-\t\t\t\t\t  (const_int 7)))\n-\t\t (const_int 0)))\n-   (clobber (match_scratch:QI 2 \"=X,X,&r\"))]\n-  \"!CONSTANT_P (operands[0])\"\n-  \"@\n-   btst\\\\t%w1,%X0\n-   btst\\\\t%w1,%X0\n-   #\"\n-  \"&& reload_completed\n-   && !satisfies_constraint_U (operands[0])\"\n-  [(set (match_dup 2)\n-\t(match_dup 0))\n-   (parallel [(set (cc0)\n-\t\t   (compare (zero_extract:SI (zero_extend:SI (match_dup 2))\n-\t\t\t\t\t     (const_int 1)\n-\t\t\t\t\t     (and:SI (match_dup 1)\n-\t\t\t\t\t\t     (const_int 7)))\n-\t\t\t    (const_int 0)))\n-\t      (clobber (scratch:QI))])]\n-  \"\"\n-  [(set_attr \"length\" \"2,8,10\")\n-   (set_attr \"cc\" \"set_zn,set_zn,set_zn\")])\n+;; (define_insn_and_split \"*tst_extzv_1_n\"\n+;;   [(set (cc0)\n+;; \t(compare (zero_extract:SI (match_operand:QI 0 \"general_operand_src\" \"r,U,mn>\")\n+;; \t\t\t\t  (const_int 1)\n+;; \t\t\t\t  (match_operand 1 \"const_int_operand\" \"n,n,n\"))\n+;; \t\t (const_int 0)))\n+;;   (clobber (match_scratch:QI 2 \"=X,X,&r\"))]\n+;;  \"!CONSTANT_P (operands[0])\"\n+;;  \"@\n+;;   btst\\\\t%Z1,%Y0\n+;;   btst\\\\t%Z1,%Y0\n+;;   #\"\n+;;  \"&& reload_completed\n+;;   && !satisfies_constraint_U (operands[0])\"\n+;;  [(set (match_dup 2)\n+;;\t(match_dup 0))\n+;;   (parallel [(set (cc0) (compare (zero_extract:SI (match_dup 2)\n+;;\t\t\t\t\t\t   (const_int 1)\n+;;\t\t\t\t\t\t   (match_dup 1))\n+;;\t\t\t\t  (const_int 0)))\n+;;\t      (clobber (scratch:QI))])]\n+;;  \"\"\n+;;  [(set_attr \"length\" \"2,8,10\")\n+;;   (set_attr \"cc\" \"set_zn,set_zn,set_zn\")])\n+;;\n+;;(define_insn \"\"\n+;;  [(set (cc0)\n+;;\t(compare (zero_extract:HSI (match_operand:HSI 0 \"register_operand\" \"r\")\n+;;\t\t\t\t   (const_int 1)\n+;;\t\t\t\t   (match_operand 1 \"const_int_operand\" \"n\"))\n+;;\t\t (const_int 0)))]\n+;;  \"INTVAL (operands[1]) <= 15\"\n+;;  \"btst\t%Z1,%Y0\"\n+;;  [(set_attr \"length\" \"2\")\n+;;   (set_attr \"cc\" \"set_zn\")])\n+;;\n+;;(define_insn_and_split \"*tstsi_upper_bit\"\n+;;  [(set (cc0)\n+;;\t(compare (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"r\")\n+;;\t\t\t\t  (const_int 1)\n+;;\t\t\t\t  (match_operand 1 \"const_int_operand\" \"n\"))\n+;;\t\t (const_int 0)))\n+;;   (clobber (match_scratch:SI 2 \"=&r\"))]\n+;;  \"INTVAL (operands[1]) >= 16\"\n+;;  \"#\"\n+;;  \"&& reload_completed\"\n+;;  [(set (match_dup 2)\n+;;\t(ior:SI (and:SI (match_dup 2)\n+;;\t\t\t(const_int -65536))\n+;;\t\t(lshiftrt:SI (match_dup 0)\n+;;\t\t\t     (const_int 16))))\n+;;   (set (cc0)\n+;;\t(compare (zero_extract:SI (match_dup 2)\n+;;\t\t\t\t  (const_int 1)\n+;;\t\t\t\t  (match_dup 3))\n+;;\t\t (const_int 0)))]\n+;;  {\n+;;    operands[3] = GEN_INT (INTVAL (operands[1]) - 16);\n+;;  })\n+;;\n+;;(define_insn \"*tstsi_variable_bit\"\n+;;  [(set (cc0)\n+;;\t(compare (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"r\")\n+;;\t\t\t\t  (const_int 1)\n+;;\t\t\t\t  (and:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+;;\t\t\t\t\t  (const_int 7)))\n+;;\t\t (const_int 0)))]\n+;;  \"\"\n+;;  \"btst\t%w1,%w0\"\n+;;  [(set_attr \"length\" \"2\")\n+;;   (set_attr \"cc\" \"set_zn\")])\n+;;\n+;;(define_insn_and_split \"*tstsi_variable_bit_qi\"\n+;;  [(set (cc0)\n+;;\t(compare (zero_extract:SI (zero_extend:SI (match_operand:QI 0 \"general_operand_src\" \"r,U,mn>\"))\n+;;\t\t\t\t  (const_int 1)\n+;;\t\t\t\t  (and:SI (match_operand:SI 1 \"register_operand\" \"r,r,r\")\n+;;\t\t\t\t\t  (const_int 7)))\n+;;\t\t (const_int 0)))\n+;;   (clobber (match_scratch:QI 2 \"=X,X,&r\"))]\n+;;  \"!CONSTANT_P (operands[0])\"\n+;;  \"@\n+;;   btst\\\\t%w1,%X0\n+;;   btst\\\\t%w1,%X0\n+;;   #\"\n+;;  \"&& reload_completed\n+;;   && !satisfies_constraint_U (operands[0])\"\n+;;  [(set (match_dup 2)\n+;;\t(match_dup 0))\n+;;   (parallel [(set (cc0)\n+;;\t\t   (compare (zero_extract:SI (zero_extend:SI (match_dup 2))\n+;;\t\t\t\t\t     (const_int 1)\n+;;\t\t\t\t\t     (and:SI (match_dup 1)\n+;;\t\t\t\t\t\t     (const_int 7)))\n+;;\t\t\t    (const_int 0)))\n+;;\t      (clobber (scratch:QI))])]\n+;;  \"\"\n+;;  [(set_attr \"length\" \"2,8,10\")\n+;;   (set_attr \"cc\" \"set_zn,set_zn,set_zn\")])\n \n (define_insn \"*tst<mode>\"\n-  [(set (cc0)\n-\t(compare (match_operand:QHI 0 \"register_operand\" \"r\")\n-\t\t (const_int 0)))]\n+  [(set (reg:CCZN CC_REG)\n+\t(compare:CCZN (match_operand:QHSI 0 \"register_operand\" \"r\")\n+\t\t      (const_int 0)))]\n   \"\"\n   {\n     if (<MODE>mode == QImode)\n       return \"mov.b\t%X0,%X0\";\n     else if (<MODE>mode == HImode)\n       return \"mov.w\t%T0,%T0\";\n+    else if (<MODE>mode == SImode)\n+      return \"mov.l\t%S0,%S0\";\n     gcc_unreachable ();\n   }\n   [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"set_znv\")])\n \n (define_insn \"*tsthi_upper\"\n-  [(set (cc0)\n+  [(set (reg:CCZN CC_REG)\n \t(compare (and:HI (match_operand:HI 0 \"register_operand\" \"r\")\n \t\t\t (const_int -256))\n \t\t (const_int 0)))]\n-  \"\"\n+  \"reload_completed\"\n   \"mov.b\t%t0,%t0\"\n-  [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_znv\")])\n-\n-(define_insn \"*tstsi\"\n-  [(set (cc0)\n-\t(compare (match_operand:SI 0 \"register_operand\" \"r\")\n-\t\t (const_int 0)))]\n-  \"\"\n-  \"mov.l\t%S0,%S0\"\n-  [(set_attr \"length\" \"2\")\n-   (set_attr \"cc\" \"set_znv\")])\n+  [(set_attr \"length\" \"2\")])\n \n (define_insn \"*tstsi_upper\"\n-  [(set (cc0)\n+  [(set (reg:CCZN CC_REG)\n \t(compare (and:SI (match_operand:SI 0 \"register_operand\" \"r\")\n \t\t\t (const_int -65536))\n \t\t (const_int 0)))]\n-  \"\"\n+  \"reload_completed\"\n   \"mov.w\t%e0,%e0\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"set_znv\")])\n \n (define_insn \"*cmpqi\"\n-  [(set (cc0)\n+  [(set (reg:CC CC_REG)\n \t(compare (match_operand:QI 0 \"h8300_dst_operand\" \"rQ\")\n \t\t (match_operand:QI 1 \"h8300_src_operand\" \"rQi\")))]\n-  \"\"\n+  \"reload_completed\"\n   \"cmp.b\t%X1,%X0\"\n-  [(set_attr \"length_table\" \"add\")\n-   (set_attr \"cc\" \"compare\")])\n+  [(set_attr \"length_table\" \"add\")])\n \n-(define_insn \"*cmphi_h8300hs_znvc\"\n-  [(set (cc0)\n+(define_insn \"*cmphi\"\n+  [(set (reg:CC CC_REG)\n \t(compare (match_operand:HI 0 \"h8300_dst_operand\" \"rU,rQ\")\n \t\t (match_operand:HI 1 \"h8300_src_operand\" \"P3>X,rQi\")))]\n-  \"\"\n+  \"reload_completed\"\n {\n   switch (which_alternative)\n     {\n@@ -174,14 +165,13 @@\n       gcc_unreachable ();\n       }\n }\n-  [(set_attr \"length_table\" \"short_immediate,add\")\n-   (set_attr \"cc\" \"compare,compare\")])\n+  [(set_attr \"length_table\" \"short_immediate,add\")])\n \n (define_insn \"cmpsi\"\n-  [(set (cc0)\n+  [(set (reg:CC CC_REG)\n \t(compare (match_operand:SI 0 \"h8300_dst_operand\" \"r,rQ\")\n \t\t (match_operand:SI 1 \"h8300_src_operand\" \"P3>X,rQi\")))]\n-  \"\"\n+  \"reload_completed\"\n {\n   switch (which_alternative)\n     {\n@@ -197,5 +187,28 @@\n     }\n }\n   [(set_attr \"length\" \"2,*\")\n-   (set_attr \"length_table\" \"*,add\")\n-   (set_attr \"cc\" \"compare,compare\")])\n+   (set_attr \"length_table\" \"*,add\")])\n+\n+;; Convert a memory comparison to a move if there is a scratch register.\n+\n+(define_peephole2\n+  [(match_scratch:QHSI 1 \"r\")\n+   (set (reg:CC CC_REG)\n+\t(compare (match_operand:QHSI 0 \"memory_operand\" \"\")\n+\t\t (const_int 0)))]\n+  \"\"\n+  [(parallel [(set (match_dup 1) (match_dup 0)) (clobber (reg:CC CC_REG))])\n+   (set (reg:CC CC_REG) (compare:CC (match_dup 1) (const_int 0)))])\n+\n+;; The compare-elimination pass does not handle memory reference.  So this\n+;; little peephole helps fill the gap and avoid code quality regressions.\n+(define_peephole2\n+  [(parallel [(set (match_operand:QHSI 0 \"register_operand\" \"\")\n+\t\t   (match_operand:QHSI 1 \"simple_memory_operand\" \"\"))\n+\t      (clobber (reg:CC CC_REG))])\n+   (set (reg:CCZN CC_REG)\n+\t(compare:CCZN (match_dup 0) (const_int 0)))]\n+  \"\"\n+  [(parallel [(set (reg:CCZN CC_REG) (compare:CCZN (match_dup 1) (const_int 0)))\n+\t      (set (match_dup 0) (match_dup 1))])])\n+"}]}