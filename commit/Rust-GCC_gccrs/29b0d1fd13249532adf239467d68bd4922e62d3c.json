{"sha": "29b0d1fd13249532adf239467d68bd4922e62d3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjliMGQxZmQxMzI0OTUzMmFkZjIzOTQ2N2Q2OGJkNDkyMmU2MmQzYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2008-01-22T14:48:05Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2008-01-22T14:48:05Z"}, "message": "re PR c++/33959 (ICE in instantiate_class_template, at cp/pt.c:6649)\n\n        PR c++/33959\n        * pt.c (tsubst_aggr_type): Make sure our context is complete.\n\n        PR c++/34573\n        * pt.c (retrieve_local_specialization): Robustify.\n        (tsubst_pack_expansion, tsubst_decl): Remove redundant checks.\n\n        PR c++/34846\n        * pt.c (tsubst): Only call retrieve_local_specialization if the\n        original typedef was in a function template.\n\nFrom-SVN: r131724", "tree": {"sha": "17210cab7406b8b6b166eb18908a4cb69994b1fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17210cab7406b8b6b166eb18908a4cb69994b1fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29b0d1fd13249532adf239467d68bd4922e62d3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29b0d1fd13249532adf239467d68bd4922e62d3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29b0d1fd13249532adf239467d68bd4922e62d3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29b0d1fd13249532adf239467d68bd4922e62d3c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "573fe0a122594bf28337f9d2d99c8005f1113940", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/573fe0a122594bf28337f9d2d99c8005f1113940", "html_url": "https://github.com/Rust-GCC/gccrs/commit/573fe0a122594bf28337f9d2d99c8005f1113940"}], "stats": {"total": 105, "additions": 91, "deletions": 14}, "files": [{"sha": "807f1b5be45f0d6ef767f07cb24d7325c0365dbe", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29b0d1fd13249532adf239467d68bd4922e62d3c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29b0d1fd13249532adf239467d68bd4922e62d3c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=29b0d1fd13249532adf239467d68bd4922e62d3c", "patch": "@@ -1,5 +1,16 @@\n 2008-01-21  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/33959\n+\t* pt.c (tsubst_aggr_type): Make sure our context is complete.\n+\n+\tPR c++/34573\n+\t* pt.c (retrieve_local_specialization): Robustify.\n+\t(tsubst_pack_expansion, tsubst_decl): Remove redundant checks.\n+\n+\tPR c++/34846\n+\t* pt.c (tsubst): Only call retrieve_local_specialization if the\n+\toriginal typedef was in a function template.\n+\n \tPR c++/34196\n \t* decl.c (wrap_cleanups_r): Set TRY_CATCH_IS_CLEANUP.\n "}, {"sha": "e61915da272e1e983fb000b3b82dd3460da64469", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29b0d1fd13249532adf239467d68bd4922e62d3c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29b0d1fd13249532adf239467d68bd4922e62d3c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=29b0d1fd13249532adf239467d68bd4922e62d3c", "patch": "@@ -976,8 +976,13 @@ retrieve_specialization (tree tmpl, tree args,\n static tree\n retrieve_local_specialization (tree tmpl)\n {\n-  tree spec = (tree) htab_find_with_hash (local_specializations, tmpl,\n-\t\t\t\t\t  htab_hash_pointer (tmpl));\n+  tree spec;\n+\n+  if (local_specializations == NULL)\n+    return NULL_TREE;\n+\n+  spec = (tree) htab_find_with_hash (local_specializations, tmpl,\n+\t\t\t\t     htab_hash_pointer (tmpl));\n   return spec ? TREE_PURPOSE (spec) : NULL_TREE;\n }\n \n@@ -7305,10 +7310,7 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n       tree orig_arg = NULL_TREE;\n \n       if (TREE_CODE (parm_pack) == PARM_DECL)\n-        {\n-          if (local_specializations)\n-            arg_pack = retrieve_local_specialization (parm_pack);\n-        }\n+\targ_pack = retrieve_local_specialization (parm_pack);\n       else\n         {\n           int level, idx, levels;\n@@ -7688,8 +7690,14 @@ tsubst_aggr_type (tree t,\n \t     up.  */\n \t  context = TYPE_CONTEXT (t);\n \t  if (context)\n-\t    context = tsubst_aggr_type (context, args, complain,\n-\t\t\t\t\tin_decl, /*entering_scope=*/1);\n+\t    {\n+\t      context = tsubst_aggr_type (context, args, complain,\n+\t\t\t\t\t  in_decl, /*entering_scope=*/1);\n+\t      /* If context is a nested class inside a class template,\n+\t         it may still need to be instantiated (c++/33959).  */\n+\t      if (TYPE_P (context))\n+\t\tcontext = complete_type (context);\n+\t    }\n \n \t  /* Then, figure out what arguments are appropriate for the\n \t     type we are trying to find.  For example, given:\n@@ -8201,9 +8209,7 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n                substitution from inside tsubst_pack_expansion. Just\n                return the local specialization (which will be a single\n                parm).  */\n-            tree spec = NULL_TREE;\n-            if (local_specializations)\n-              spec = retrieve_local_specialization (t);\n+            tree spec = retrieve_local_specialization (t);\n             if (spec \n                 && TREE_CODE (spec) == PARM_DECL\n                 && TREE_CODE (TREE_TYPE (spec)) != TYPE_PACK_EXPANSION)\n@@ -8855,11 +8861,13 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t  tree gen_args = tsubst (DECL_TI_ARGS (decl), args, complain, in_decl);\n \t  r = retrieve_specialization (tmpl, gen_args, false);\n \t}\n-      else if (DECL_FUNCTION_SCOPE_P (decl))\n+      else if (DECL_FUNCTION_SCOPE_P (decl)\n+\t       && DECL_TEMPLATE_INFO (DECL_CONTEXT (decl)))\n \tr = retrieve_local_specialization (decl);\n       else\n-\tr = NULL_TREE;\n-\t\n+\t/* The typedef is from a non-template context.  */\n+\treturn t;\n+\n       if (r)\n \t{\n \t  r = TREE_TYPE (r);"}, {"sha": "3850fdace3a5f537e5e830d4cceb91a23c89a82d", "filename": "gcc/testsuite/g++.dg/template/nested5.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29b0d1fd13249532adf239467d68bd4922e62d3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnested5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29b0d1fd13249532adf239467d68bd4922e62d3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnested5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnested5.C?ref=29b0d1fd13249532adf239467d68bd4922e62d3c", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/33959\n+\n+template <typename T> struct A\n+{\n+  struct C\n+  {\n+    template <typename U> struct D {};\n+  };\n+  template <typename S> static C::D<S> bar (S const &);\n+};\n+\n+struct E {};\n+\n+int\n+main ()\n+{\n+  E e;\n+  A<E>::bar (e);\n+}"}, {"sha": "c2a2108f04adf90b438c0cc875482633a6adab2e", "filename": "gcc/testsuite/g++.dg/template/typedef10.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29b0d1fd13249532adf239467d68bd4922e62d3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29b0d1fd13249532adf239467d68bd4922e62d3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef10.C?ref=29b0d1fd13249532adf239467d68bd4922e62d3c", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/34573\n+\n+template < class Gtr_>\n+void compute_gr()\n+{\n+  typedef int Less_chain;\n+  struct utils {\n+    utils(const Less_chain& lc)  {};\n+  };\n+  utils U(1);\n+}\n+int main(void){\n+  compute_gr<int>();\n+}"}, {"sha": "8d2ed36757c8a825dc7cda9f0eaaa10c86ccb647", "filename": "gcc/testsuite/g++.dg/template/typedef9.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29b0d1fd13249532adf239467d68bd4922e62d3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29b0d1fd13249532adf239467d68bd4922e62d3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef9.C?ref=29b0d1fd13249532adf239467d68bd4922e62d3c", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/34846\n+\n+template<typename, typename> struct __are_same { enum { __value = 0 }; };\n+template<typename _Tp> struct __are_same<_Tp, _Tp> { enum { __value = 1 }; };\n+template<typename, bool> struct __enable_if { };\n+template<typename _Tp> struct __enable_if<_Tp, true> { typedef _Tp __type; };\n+template<typename _Iterator, typename _Container> class __normal_iterator {\n+public:\n+  __normal_iterator();\n+  template<typename _Iter>\n+  __normal_iterator(\n+    const __normal_iterator<_Iter, typename __enable_if<_Container,\n+(__are_same<_Iter, typename _Container::pointer>::__value) >::__type>& __i)\n+  { }\n+};\n+template<typename _Tp> class vector {\n+public:\n+  typedef _Tp* pointer;\n+  typedef __normal_iterator<int, vector<_Tp> > iterator;\n+};\n+void test() {\n+  typedef int t;\n+  vector<t*>::iterator x;\n+  vector<t*>::iterator y = x;\n+}"}]}