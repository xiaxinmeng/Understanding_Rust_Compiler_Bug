{"sha": "1bbffb87a9ecc3e27a4074145e55e3315df57b7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJiZmZiODdhOWVjYzNlMjdhNDA3NDE0NWU1NWUzMzE1ZGY1N2I3ZA==", "commit": {"author": {"name": "Dennis Zhang", "email": "dennis.zhang@arm.com", "date": "2019-07-03T19:52:04Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-07-03T19:52:04Z"}, "message": "[AArch64] Remove constraint strings from define_expand constructs\n\nA number of AArch64 define_expand patterns have specified constraints\nfor their operands. But the constraint strings are ignored at expand\ntime and are therefore redundant/useless. We now avoid specifying\nconstraints in new define_expands, but we should clean up the existing\ndefine_expand definitions.\n\nFor example, the constraint \"=w\" is removed in the following case:\n(define_expand \"sqrt<mode>2\"\n    [(set (match_operand:GPF_F16 0 \"register_operand\" \"=w\")\nThe \"\" marks with an empty constraint in define_expand are removed as well.\n\n2019-07-03  Dennis Zhang  <dennis.zhang@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.md: Remove redundant constraints from\n\tdefine_expand but keep some patterns untouched if they are\n\tspecially selected by TARGET_SECONDARY_RELOAD hook.\n\t* config/aarch64/aarch64-sve.md: Likewise.\n\t* config/aarch64/atomics.md: Remove redundant constraints from\n\tdefine_expand.\n\t* config/aarch64/aarch64-simd.md: Likewise.\n\nFrom-SVN: r273021", "tree": {"sha": "2e3992be667b85cec674ef4bcb9bc7e31f32034e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e3992be667b85cec674ef4bcb9bc7e31f32034e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bbffb87a9ecc3e27a4074145e55e3315df57b7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bbffb87a9ecc3e27a4074145e55e3315df57b7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bbffb87a9ecc3e27a4074145e55e3315df57b7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bbffb87a9ecc3e27a4074145e55e3315df57b7d/comments", "author": null, "committer": null, "parents": [{"sha": "03eddfb3b57152121154cf64fcd5c145000ee7f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03eddfb3b57152121154cf64fcd5c145000ee7f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03eddfb3b57152121154cf64fcd5c145000ee7f3"}], "stats": {"total": 752, "additions": 382, "deletions": 370}, "files": [{"sha": "2d6758d454c4c922d697a6c821920437428d6122", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bbffb87a9ecc3e27a4074145e55e3315df57b7d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bbffb87a9ecc3e27a4074145e55e3315df57b7d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1bbffb87a9ecc3e27a4074145e55e3315df57b7d", "patch": "@@ -1,3 +1,13 @@\n+2019-07-03  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* config/aarch64/aarch64.md: Remove redundant constraints from\n+\tdefine_expand but keep some patterns untouched if they are\n+\tspecially selected by TARGET_SECONDARY_RELOAD hook.\n+\t* config/aarch64/aarch64-sve.md: Likewise.\n+\t* config/aarch64/atomics.md: Remove redundant constraints from\n+\tdefine_expand.\n+\t* config/aarch64/aarch64-simd.md: Likewise.\n+\n 2019-07-03  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config/darwin.h (DRIVER_SELF_SPECS): Remove the linker cases."}, {"sha": "837242c7e56921fa8bd4efa89fcc2afbb91c1864", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 253, "deletions": 253, "changes": 506, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bbffb87a9ecc3e27a4074145e55e3315df57b7d/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bbffb87a9ecc3e27a4074145e55e3315df57b7d/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=1bbffb87a9ecc3e27a4074145e55e3315df57b7d", "patch": "@@ -19,8 +19,8 @@\n ;; <http://www.gnu.org/licenses/>.\n \n (define_expand \"mov<mode>\"\n-  [(set (match_operand:VALL_F16 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:VALL_F16 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:VALL_F16 0 \"nonimmediate_operand\")\n+\t(match_operand:VALL_F16 1 \"general_operand\"))]\n   \"TARGET_SIMD\"\n   \"\n   /* Force the operand into a register if it is not an\n@@ -39,8 +39,8 @@\n )\n \n (define_expand \"movmisalign<mode>\"\n-  [(set (match_operand:VALL 0 \"nonimmediate_operand\" \"\")\n-        (match_operand:VALL 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:VALL 0 \"nonimmediate_operand\")\n+        (match_operand:VALL 1 \"general_operand\"))]\n   \"TARGET_SIMD\"\n {\n   /* This pattern is not permitted to fail during expansion: if both arguments\n@@ -652,8 +652,8 @@\n   [(set_attr \"type\" \"neon_fp_rsqrts_<stype><q>\")])\n \n (define_expand \"rsqrt<mode>2\"\n-  [(set (match_operand:VALLF 0 \"register_operand\" \"=w\")\n-\t(unspec:VALLF [(match_operand:VALLF 1 \"register_operand\" \"w\")]\n+  [(set (match_operand:VALLF 0 \"register_operand\")\n+\t(unspec:VALLF [(match_operand:VALLF 1 \"register_operand\")]\n \t\t     UNSPEC_RSQRT))]\n   \"TARGET_SIMD\"\n {\n@@ -1025,9 +1025,9 @@\n )\n \n (define_expand \"ashl<mode>3\"\n-  [(match_operand:VDQ_I 0 \"register_operand\" \"\")\n-   (match_operand:VDQ_I 1 \"register_operand\" \"\")\n-   (match_operand:SI  2 \"general_operand\" \"\")]\n+  [(match_operand:VDQ_I 0 \"register_operand\")\n+   (match_operand:VDQ_I 1 \"register_operand\")\n+   (match_operand:SI  2 \"general_operand\")]\n  \"TARGET_SIMD\"\n {\n   int bit_width = GET_MODE_UNIT_SIZE (<MODE>mode) * BITS_PER_UNIT;\n@@ -1072,9 +1072,9 @@\n )\n \n (define_expand \"lshr<mode>3\"\n-  [(match_operand:VDQ_I 0 \"register_operand\" \"\")\n-   (match_operand:VDQ_I 1 \"register_operand\" \"\")\n-   (match_operand:SI  2 \"general_operand\" \"\")]\n+  [(match_operand:VDQ_I 0 \"register_operand\")\n+   (match_operand:VDQ_I 1 \"register_operand\")\n+   (match_operand:SI  2 \"general_operand\")]\n  \"TARGET_SIMD\"\n {\n   int bit_width = GET_MODE_UNIT_SIZE (<MODE>mode) * BITS_PER_UNIT;\n@@ -1119,9 +1119,9 @@\n )\n \n (define_expand \"ashr<mode>3\"\n-  [(match_operand:VDQ_I 0 \"register_operand\" \"\")\n-   (match_operand:VDQ_I 1 \"register_operand\" \"\")\n-   (match_operand:SI  2 \"general_operand\" \"\")]\n+  [(match_operand:VDQ_I 0 \"register_operand\")\n+   (match_operand:VDQ_I 1 \"register_operand\")\n+   (match_operand:SI  2 \"general_operand\")]\n  \"TARGET_SIMD\"\n {\n   int bit_width = GET_MODE_UNIT_SIZE (<MODE>mode) * BITS_PER_UNIT;\n@@ -1166,9 +1166,9 @@\n )\n \n (define_expand \"vashl<mode>3\"\n- [(match_operand:VDQ_I 0 \"register_operand\" \"\")\n-  (match_operand:VDQ_I 1 \"register_operand\" \"\")\n-  (match_operand:VDQ_I 2 \"register_operand\" \"\")]\n+ [(match_operand:VDQ_I 0 \"register_operand\")\n+  (match_operand:VDQ_I 1 \"register_operand\")\n+  (match_operand:VDQ_I 2 \"register_operand\")]\n  \"TARGET_SIMD\"\n {\n   emit_insn (gen_aarch64_simd_reg_sshl<mode> (operands[0], operands[1],\n@@ -1180,9 +1180,9 @@\n ;; Negating individual lanes most certainly offsets the\n ;; gain from vectorization.\n (define_expand \"vashr<mode>3\"\n- [(match_operand:VDQ_BHSI 0 \"register_operand\" \"\")\n-  (match_operand:VDQ_BHSI 1 \"register_operand\" \"\")\n-  (match_operand:VDQ_BHSI 2 \"register_operand\" \"\")]\n+ [(match_operand:VDQ_BHSI 0 \"register_operand\")\n+  (match_operand:VDQ_BHSI 1 \"register_operand\")\n+  (match_operand:VDQ_BHSI 2 \"register_operand\")]\n  \"TARGET_SIMD\"\n {\n   rtx neg = gen_reg_rtx (<MODE>mode);\n@@ -1194,9 +1194,9 @@\n \n ;; DI vector shift\n (define_expand \"aarch64_ashr_simddi\"\n-  [(match_operand:DI 0 \"register_operand\" \"=w\")\n-   (match_operand:DI 1 \"register_operand\" \"w\")\n-   (match_operand:SI 2 \"aarch64_shift_imm64_di\" \"\")]\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"register_operand\")\n+   (match_operand:SI 2 \"aarch64_shift_imm64_di\")]\n   \"TARGET_SIMD\"\n   {\n     /* An arithmetic shift right by 64 fills the result with copies of the sign\n@@ -1210,9 +1210,9 @@\n )\n \n (define_expand \"vlshr<mode>3\"\n- [(match_operand:VDQ_BHSI 0 \"register_operand\" \"\")\n-  (match_operand:VDQ_BHSI 1 \"register_operand\" \"\")\n-  (match_operand:VDQ_BHSI 2 \"register_operand\" \"\")]\n+ [(match_operand:VDQ_BHSI 0 \"register_operand\")\n+  (match_operand:VDQ_BHSI 1 \"register_operand\")\n+  (match_operand:VDQ_BHSI 2 \"register_operand\")]\n  \"TARGET_SIMD\"\n {\n   rtx neg = gen_reg_rtx (<MODE>mode);\n@@ -1223,9 +1223,9 @@\n })\n \n (define_expand \"aarch64_lshr_simddi\"\n-  [(match_operand:DI 0 \"register_operand\" \"=w\")\n-   (match_operand:DI 1 \"register_operand\" \"w\")\n-   (match_operand:SI 2 \"aarch64_shift_imm64_di\" \"\")]\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"register_operand\")\n+   (match_operand:SI 2 \"aarch64_shift_imm64_di\")]\n   \"TARGET_SIMD\"\n   {\n     if (INTVAL (operands[2]) == 64)\n@@ -1253,9 +1253,9 @@\n )\n \n (define_expand \"vec_set<mode>\"\n-  [(match_operand:VALL_F16 0 \"register_operand\" \"+w\")\n-   (match_operand:<VEL> 1 \"register_operand\" \"w\")\n-   (match_operand:SI 2 \"immediate_operand\" \"\")]\n+  [(match_operand:VALL_F16 0 \"register_operand\")\n+   (match_operand:<VEL> 1 \"register_operand\")\n+   (match_operand:SI 2 \"immediate_operand\")]\n   \"TARGET_SIMD\"\n   {\n     HOST_WIDE_INT elem = (HOST_WIDE_INT) 1 << INTVAL (operands[2]);\n@@ -1394,9 +1394,9 @@\n )\n \n (define_expand \"<su><maxmin>v2di3\"\n- [(set (match_operand:V2DI 0 \"register_operand\" \"\")\n-       (MAXMIN:V2DI (match_operand:V2DI 1 \"register_operand\" \"\")\n-                    (match_operand:V2DI 2 \"register_operand\" \"\")))]\n+ [(set (match_operand:V2DI 0 \"register_operand\")\n+       (MAXMIN:V2DI (match_operand:V2DI 1 \"register_operand\")\n+                    (match_operand:V2DI 2 \"register_operand\")))]\n  \"TARGET_SIMD\"\n {\n   enum rtx_code cmp_operator;\n@@ -1565,8 +1565,8 @@\n )\n \n (define_expand \"move_hi_quad_<mode>\"\n- [(match_operand:VQ 0 \"register_operand\" \"\")\n-  (match_operand:<VHALF> 1 \"register_operand\" \"\")]\n+ [(match_operand:VQ 0 \"register_operand\")\n+  (match_operand:<VHALF> 1 \"register_operand\")]\n  \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, false);\n@@ -1591,9 +1591,9 @@\n )\n \n (define_expand \"vec_pack_trunc_<mode>\"\n- [(match_operand:<VNARROWD> 0 \"register_operand\" \"\")\n-  (match_operand:VDN 1 \"register_operand\" \"\")\n-  (match_operand:VDN 2 \"register_operand\" \"\")]\n+ [(match_operand:<VNARROWD> 0 \"register_operand\")\n+  (match_operand:VDN 1 \"register_operand\")\n+  (match_operand:VDN 2 \"register_operand\")]\n  \"TARGET_SIMD\"\n {\n   rtx tempreg = gen_reg_rtx (<VDBL>mode);\n@@ -1649,7 +1649,7 @@\n )\n \n (define_expand \"vec_unpack<su>_hi_<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"\")\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n    (ANY_EXTEND:<VWIDE> (match_operand:VQW 1 \"register_operand\"))]\n   \"TARGET_SIMD\"\n   {\n@@ -1661,8 +1661,8 @@\n )\n \n (define_expand \"vec_unpack<su>_lo_<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"\")\n-   (ANY_EXTEND:<VWIDE> (match_operand:VQW 1 \"register_operand\" \"\"))]\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (ANY_EXTEND:<VWIDE> (match_operand:VQW 1 \"register_operand\"))]\n   \"TARGET_SIMD\"\n   {\n     rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, false);\n@@ -1780,9 +1780,9 @@\n )\n \n (define_expand \"vec_widen_<su>mult_lo_<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"\")\n-   (ANY_EXTEND:<VWIDE> (match_operand:VQW 1 \"register_operand\" \"\"))\n-   (ANY_EXTEND:<VWIDE> (match_operand:VQW 2 \"register_operand\" \"\"))]\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (ANY_EXTEND:<VWIDE> (match_operand:VQW 1 \"register_operand\"))\n+   (ANY_EXTEND:<VWIDE> (match_operand:VQW 2 \"register_operand\"))]\n  \"TARGET_SIMD\"\n  {\n    rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, false);\n@@ -1807,9 +1807,9 @@\n )\n \n (define_expand \"vec_widen_<su>mult_hi_<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"\")\n-   (ANY_EXTEND:<VWIDE> (match_operand:VQW 1 \"register_operand\" \"\"))\n-   (ANY_EXTEND:<VWIDE> (match_operand:VQW 2 \"register_operand\" \"\"))]\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (ANY_EXTEND:<VWIDE> (match_operand:VQW 1 \"register_operand\"))\n+   (ANY_EXTEND:<VWIDE> (match_operand:VQW 2 \"register_operand\"))]\n  \"TARGET_SIMD\"\n  {\n    rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n@@ -1874,9 +1874,9 @@\n )\n \n (define_expand \"div<mode>3\"\n- [(set (match_operand:VHSDF 0 \"register_operand\" \"=w\")\n-       (div:VHSDF (match_operand:VHSDF 1 \"register_operand\" \"w\")\n-\t\t  (match_operand:VHSDF 2 \"register_operand\" \"w\")))]\n+ [(set (match_operand:VHSDF 0 \"register_operand\")\n+       (div:VHSDF (match_operand:VHSDF 1 \"register_operand\")\n+\t\t  (match_operand:VHSDF 2 \"register_operand\")))]\n  \"TARGET_SIMD\"\n {\n   if (aarch64_emit_approx_div (operands[0], operands[1], operands[2]))\n@@ -2211,8 +2211,8 @@\n ;; other big-endian patterns their behavior is as required.\n \n (define_expand \"vec_unpacks_lo_<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"\")\n-   (match_operand:VQ_HSF 1 \"register_operand\" \"\")]\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (match_operand:VQ_HSF 1 \"register_operand\")]\n   \"TARGET_SIMD\"\n   {\n     rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, false);\n@@ -2234,8 +2234,8 @@\n )\n \n (define_expand \"vec_unpacks_hi_<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"\")\n-   (match_operand:VQ_HSF 1 \"register_operand\" \"\")]\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (match_operand:VQ_HSF 1 \"register_operand\")]\n   \"TARGET_SIMD\"\n   {\n     rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n@@ -2287,9 +2287,9 @@\n )\n \n (define_expand \"aarch64_float_truncate_hi_<Vdbl>\"\n-  [(match_operand:<VDBL> 0 \"register_operand\" \"=w\")\n-   (match_operand:VDF 1 \"register_operand\" \"0\")\n-   (match_operand:<VWIDE> 2 \"register_operand\" \"w\")]\n+  [(match_operand:<VDBL> 0 \"register_operand\")\n+   (match_operand:VDF 1 \"register_operand\")\n+   (match_operand:<VWIDE> 2 \"register_operand\")]\n   \"TARGET_SIMD\"\n {\n   rtx (*gen) (rtx, rtx, rtx) = BYTES_BIG_ENDIAN\n@@ -2382,8 +2382,8 @@\n ;; 'across lanes' add.\n \n (define_expand \"reduc_plus_scal_<mode>\"\n-  [(match_operand:<VEL> 0 \"register_operand\" \"=w\")\n-   (unspec:VDQ_I [(match_operand:VDQ_I 1 \"register_operand\" \"w\")]\n+  [(match_operand:<VEL> 0 \"register_operand\")\n+   (unspec:VDQ_I [(match_operand:VDQ_I 1 \"register_operand\")]\n \t       UNSPEC_ADDV)]\n   \"TARGET_SIMD\"\n   {\n@@ -3299,9 +3299,9 @@\n \n \n (define_expand \"aarch64_saddl2<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-   (match_operand:VQW 1 \"register_operand\" \"w\")\n-   (match_operand:VQW 2 \"register_operand\" \"w\")]\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (match_operand:VQW 1 \"register_operand\")\n+   (match_operand:VQW 2 \"register_operand\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n@@ -3311,9 +3311,9 @@\n })\n \n (define_expand \"aarch64_uaddl2<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-   (match_operand:VQW 1 \"register_operand\" \"w\")\n-   (match_operand:VQW 2 \"register_operand\" \"w\")]\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (match_operand:VQW 1 \"register_operand\")\n+   (match_operand:VQW 2 \"register_operand\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n@@ -3323,9 +3323,9 @@\n })\n \n (define_expand \"aarch64_ssubl2<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-   (match_operand:VQW 1 \"register_operand\" \"w\")\n-   (match_operand:VQW 2 \"register_operand\" \"w\")]\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (match_operand:VQW 1 \"register_operand\")\n+   (match_operand:VQW 2 \"register_operand\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n@@ -3335,9 +3335,9 @@\n })\n \n (define_expand \"aarch64_usubl2<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-   (match_operand:VQW 1 \"register_operand\" \"w\")\n-   (match_operand:VQW 2 \"register_operand\" \"w\")]\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (match_operand:VQW 1 \"register_operand\")\n+   (match_operand:VQW 2 \"register_operand\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n@@ -3360,10 +3360,10 @@\n ;; <su><addsub>w<q>.\n \n (define_expand \"widen_ssum<mode>3\"\n-  [(set (match_operand:<VDBLW> 0 \"register_operand\" \"\")\n+  [(set (match_operand:<VDBLW> 0 \"register_operand\")\n \t(plus:<VDBLW> (sign_extend:<VDBLW> \n-\t\t        (match_operand:VQW 1 \"register_operand\" \"\"))\n-\t\t      (match_operand:<VDBLW> 2 \"register_operand\" \"\")))]\n+\t\t        (match_operand:VQW 1 \"register_operand\"))\n+\t\t      (match_operand:<VDBLW> 2 \"register_operand\")))]\n   \"TARGET_SIMD\"\n   {\n     rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, false);\n@@ -3377,21 +3377,21 @@\n )\n \n (define_expand \"widen_ssum<mode>3\"\n-  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"\")\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\")\n \t(plus:<VWIDE> (sign_extend:<VWIDE>\n-\t\t        (match_operand:VD_BHSI 1 \"register_operand\" \"\"))\n-\t\t      (match_operand:<VWIDE> 2 \"register_operand\" \"\")))]\n+\t\t        (match_operand:VD_BHSI 1 \"register_operand\"))\n+\t\t      (match_operand:<VWIDE> 2 \"register_operand\")))]\n   \"TARGET_SIMD\"\n {\n   emit_insn (gen_aarch64_saddw<mode> (operands[0], operands[2], operands[1]));\n   DONE;\n })\n \n (define_expand \"widen_usum<mode>3\"\n-  [(set (match_operand:<VDBLW> 0 \"register_operand\" \"\")\n+  [(set (match_operand:<VDBLW> 0 \"register_operand\")\n \t(plus:<VDBLW> (zero_extend:<VDBLW> \n-\t\t        (match_operand:VQW 1 \"register_operand\" \"\"))\n-\t\t      (match_operand:<VDBLW> 2 \"register_operand\" \"\")))]\n+\t\t        (match_operand:VQW 1 \"register_operand\"))\n+\t\t      (match_operand:<VDBLW> 2 \"register_operand\")))]\n   \"TARGET_SIMD\"\n   {\n     rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, false);\n@@ -3405,10 +3405,10 @@\n )\n \n (define_expand \"widen_usum<mode>3\"\n-  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"\")\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\")\n \t(plus:<VWIDE> (zero_extend:<VWIDE>\n-\t\t        (match_operand:VD_BHSI 1 \"register_operand\" \"\"))\n-\t\t      (match_operand:<VWIDE> 2 \"register_operand\" \"\")))]\n+\t\t        (match_operand:VD_BHSI 1 \"register_operand\"))\n+\t\t      (match_operand:<VWIDE> 2 \"register_operand\")))]\n   \"TARGET_SIMD\"\n {\n   emit_insn (gen_aarch64_uaddw<mode> (operands[0], operands[2], operands[1]));\n@@ -3486,9 +3486,9 @@\n )\n \n (define_expand \"aarch64_saddw2<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-   (match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n-   (match_operand:VQW 2 \"register_operand\" \"w\")]\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (match_operand:<VWIDE> 1 \"register_operand\")\n+   (match_operand:VQW 2 \"register_operand\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n@@ -3498,9 +3498,9 @@\n })\n \n (define_expand \"aarch64_uaddw2<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-   (match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n-   (match_operand:VQW 2 \"register_operand\" \"w\")]\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (match_operand:<VWIDE> 1 \"register_operand\")\n+   (match_operand:VQW 2 \"register_operand\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n@@ -3511,9 +3511,9 @@\n \n \n (define_expand \"aarch64_ssubw2<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-   (match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n-   (match_operand:VQW 2 \"register_operand\" \"w\")]\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (match_operand:<VWIDE> 1 \"register_operand\")\n+   (match_operand:VQW 2 \"register_operand\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n@@ -3523,9 +3523,9 @@\n })\n \n (define_expand \"aarch64_usubw2<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-   (match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n-   (match_operand:VQW 2 \"register_operand\" \"w\")]\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (match_operand:<VWIDE> 1 \"register_operand\")\n+   (match_operand:VQW 2 \"register_operand\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n@@ -4058,10 +4058,10 @@\n )\n \n (define_expand \"aarch64_sqdmlal2<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-   (match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n-   (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n-   (match_operand:VQ_HSI 3 \"register_operand\" \"w\")]\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (match_operand:<VWIDE> 1 \"register_operand\")\n+   (match_operand:VQ_HSI 2 \"register_operand\")\n+   (match_operand:VQ_HSI 3 \"register_operand\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n@@ -4071,10 +4071,10 @@\n })\n \n (define_expand \"aarch64_sqdmlsl2<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-   (match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n-   (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n-   (match_operand:VQ_HSI 3 \"register_operand\" \"w\")]\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (match_operand:<VWIDE> 1 \"register_operand\")\n+   (match_operand:VQ_HSI 2 \"register_operand\")\n+   (match_operand:VQ_HSI 3 \"register_operand\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n@@ -4138,11 +4138,11 @@\n )\n \n (define_expand \"aarch64_sqdmlal2_lane<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-   (match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n-   (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n-   (match_operand:<VCOND> 3 \"register_operand\" \"<vwx>\")\n-   (match_operand:SI 4 \"immediate_operand\" \"i\")]\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (match_operand:<VWIDE> 1 \"register_operand\")\n+   (match_operand:VQ_HSI 2 \"register_operand\")\n+   (match_operand:<VCOND> 3 \"register_operand\")\n+   (match_operand:SI 4 \"immediate_operand\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n@@ -4153,11 +4153,11 @@\n })\n \n (define_expand \"aarch64_sqdmlal2_laneq<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-   (match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n-   (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n-   (match_operand:<VCONQ> 3 \"register_operand\" \"<vwx>\")\n-   (match_operand:SI 4 \"immediate_operand\" \"i\")]\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (match_operand:<VWIDE> 1 \"register_operand\")\n+   (match_operand:VQ_HSI 2 \"register_operand\")\n+   (match_operand:<VCONQ> 3 \"register_operand\")\n+   (match_operand:SI 4 \"immediate_operand\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n@@ -4168,11 +4168,11 @@\n })\n \n (define_expand \"aarch64_sqdmlsl2_lane<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-   (match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n-   (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n-   (match_operand:<VCOND> 3 \"register_operand\" \"<vwx>\")\n-   (match_operand:SI 4 \"immediate_operand\" \"i\")]\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (match_operand:<VWIDE> 1 \"register_operand\")\n+   (match_operand:VQ_HSI 2 \"register_operand\")\n+   (match_operand:<VCOND> 3 \"register_operand\")\n+   (match_operand:SI 4 \"immediate_operand\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n@@ -4183,11 +4183,11 @@\n })\n \n (define_expand \"aarch64_sqdmlsl2_laneq<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-   (match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n-   (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n-   (match_operand:<VCONQ> 3 \"register_operand\" \"<vwx>\")\n-   (match_operand:SI 4 \"immediate_operand\" \"i\")]\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (match_operand:<VWIDE> 1 \"register_operand\")\n+   (match_operand:VQ_HSI 2 \"register_operand\")\n+   (match_operand:<VCONQ> 3 \"register_operand\")\n+   (match_operand:SI 4 \"immediate_operand\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n@@ -4217,10 +4217,10 @@\n )\n \n (define_expand \"aarch64_sqdmlal2_n<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-   (match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n-   (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n-   (match_operand:<VEL> 3 \"register_operand\" \"w\")]\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (match_operand:<VWIDE> 1 \"register_operand\")\n+   (match_operand:VQ_HSI 2 \"register_operand\")\n+   (match_operand:<VEL> 3 \"register_operand\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n@@ -4231,10 +4231,10 @@\n })\n \n (define_expand \"aarch64_sqdmlsl2_n<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-   (match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n-   (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n-   (match_operand:<VEL> 3 \"register_operand\" \"w\")]\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (match_operand:<VWIDE> 1 \"register_operand\")\n+   (match_operand:VQ_HSI 2 \"register_operand\")\n+   (match_operand:<VEL> 3 \"register_operand\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n@@ -4386,9 +4386,9 @@\n )\n \n (define_expand \"aarch64_sqdmull2<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-   (match_operand:VQ_HSI 1 \"register_operand\" \"w\")\n-   (match_operand:VQ_HSI 2 \"register_operand\" \"w\")]\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (match_operand:VQ_HSI 1 \"register_operand\")\n+   (match_operand:VQ_HSI 2 \"register_operand\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n@@ -4446,10 +4446,10 @@\n )\n \n (define_expand \"aarch64_sqdmull2_lane<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-   (match_operand:VQ_HSI 1 \"register_operand\" \"w\")\n-   (match_operand:<VCOND> 2 \"register_operand\" \"<vwx>\")\n-   (match_operand:SI 3 \"immediate_operand\" \"i\")]\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (match_operand:VQ_HSI 1 \"register_operand\")\n+   (match_operand:<VCOND> 2 \"register_operand\")\n+   (match_operand:SI 3 \"immediate_operand\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n@@ -4460,10 +4460,10 @@\n })\n \n (define_expand \"aarch64_sqdmull2_laneq<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-   (match_operand:VQ_HSI 1 \"register_operand\" \"w\")\n-   (match_operand:<VCONQ> 2 \"register_operand\" \"<vwx>\")\n-   (match_operand:SI 3 \"immediate_operand\" \"i\")]\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (match_operand:VQ_HSI 1 \"register_operand\")\n+   (match_operand:<VCONQ> 2 \"register_operand\")\n+   (match_operand:SI 3 \"immediate_operand\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n@@ -4494,9 +4494,9 @@\n )\n \n (define_expand \"aarch64_sqdmull2_n<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-   (match_operand:VQ_HSI 1 \"register_operand\" \"w\")\n-   (match_operand:<VEL> 2 \"register_operand\" \"w\")]\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (match_operand:VQ_HSI 1 \"register_operand\")\n+   (match_operand:<VEL> 2 \"register_operand\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n@@ -4898,8 +4898,8 @@\n ;; sqrt\n \n (define_expand \"sqrt<mode>2\"\n-  [(set (match_operand:VHSDF 0 \"register_operand\" \"=w\")\n-\t(sqrt:VHSDF (match_operand:VHSDF 1 \"register_operand\" \"w\")))]\n+  [(set (match_operand:VHSDF 0 \"register_operand\")\n+\t(sqrt:VHSDF (match_operand:VHSDF 1 \"register_operand\")))]\n   \"TARGET_SIMD\"\n {\n   if (aarch64_emit_approx_sqrt (operands[0], operands[1], false))\n@@ -4952,8 +4952,8 @@\n )\n \n (define_expand \"vec_load_lanesoi<mode>\"\n-  [(set (match_operand:OI 0 \"register_operand\" \"=w\")\n-\t(unspec:OI [(match_operand:OI 1 \"aarch64_simd_struct_operand\" \"Utv\")\n+  [(set (match_operand:OI 0 \"register_operand\")\n+\t(unspec:OI [(match_operand:OI 1 \"aarch64_simd_struct_operand\")\n \t\t    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n \t\t   UNSPEC_LD2))]\n   \"TARGET_SIMD\"\n@@ -4996,8 +4996,8 @@\n )\n \n (define_expand \"vec_store_lanesoi<mode>\"\n-  [(set (match_operand:OI 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n-\t(unspec:OI [(match_operand:OI 1 \"register_operand\" \"w\")\n+  [(set (match_operand:OI 0 \"aarch64_simd_struct_operand\")\n+\t(unspec:OI [(match_operand:OI 1 \"register_operand\")\n                     (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_ST2))]\n   \"TARGET_SIMD\"\n@@ -5050,8 +5050,8 @@\n )\n \n (define_expand \"vec_load_lanesci<mode>\"\n-  [(set (match_operand:CI 0 \"register_operand\" \"=w\")\n-\t(unspec:CI [(match_operand:CI 1 \"aarch64_simd_struct_operand\" \"Utv\")\n+  [(set (match_operand:CI 0 \"register_operand\")\n+\t(unspec:CI [(match_operand:CI 1 \"aarch64_simd_struct_operand\")\n \t\t    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n \t\t   UNSPEC_LD3))]\n   \"TARGET_SIMD\"\n@@ -5094,8 +5094,8 @@\n )\n \n (define_expand \"vec_store_lanesci<mode>\"\n-  [(set (match_operand:CI 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n-\t(unspec:CI [(match_operand:CI 1 \"register_operand\" \"w\")\n+  [(set (match_operand:CI 0 \"aarch64_simd_struct_operand\")\n+\t(unspec:CI [(match_operand:CI 1 \"register_operand\")\n                     (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_ST3))]\n   \"TARGET_SIMD\"\n@@ -5148,8 +5148,8 @@\n )\n \n (define_expand \"vec_load_lanesxi<mode>\"\n-  [(set (match_operand:XI 0 \"register_operand\" \"=w\")\n-\t(unspec:XI [(match_operand:XI 1 \"aarch64_simd_struct_operand\" \"Utv\")\n+  [(set (match_operand:XI 0 \"register_operand\")\n+\t(unspec:XI [(match_operand:XI 1 \"aarch64_simd_struct_operand\")\n \t\t    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n \t\t   UNSPEC_LD4))]\n   \"TARGET_SIMD\"\n@@ -5192,8 +5192,8 @@\n )\n \n (define_expand \"vec_store_lanesxi<mode>\"\n-  [(set (match_operand:XI 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n-\t(unspec:XI [(match_operand:XI 1 \"register_operand\" \"w\")\n+  [(set (match_operand:XI 0 \"aarch64_simd_struct_operand\")\n+\t(unspec:XI [(match_operand:XI 1 \"register_operand\")\n                     (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_ST4))]\n   \"TARGET_SIMD\"\n@@ -5238,8 +5238,8 @@\n ;; Reload patterns for AdvSIMD register list operands.\n \n (define_expand \"mov<mode>\"\n-  [(set (match_operand:VSTRUCT 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:VSTRUCT 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:VSTRUCT 0 \"nonimmediate_operand\")\n+\t(match_operand:VSTRUCT 1 \"general_operand\"))]\n   \"TARGET_SIMD\"\n {\n   if (can_create_pseudo_p ())\n@@ -5251,8 +5251,8 @@\n \n \n (define_expand \"aarch64_ld1x3<VALLDIF:mode>\"\n-  [(match_operand:CI 0 \"register_operand\" \"=w\")\n-   (match_operand:DI 1 \"register_operand\" \"r\")\n+  [(match_operand:CI 0 \"register_operand\")\n+   (match_operand:DI 1 \"register_operand\")\n    (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_SIMD\"\n {\n@@ -5272,8 +5272,8 @@\n )\n \n (define_expand \"aarch64_st1x2<VALLDIF:mode>\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:OI 1 \"register_operand\" \"\")\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:OI 1 \"register_operand\")\n    (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_SIMD\"\n {\n@@ -5293,8 +5293,8 @@\n )\n \n (define_expand \"aarch64_st1x3<VALLDIF:mode>\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:CI 1 \"register_operand\" \"\")\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:CI 1 \"register_operand\")\n    (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_SIMD\"\n {\n@@ -5446,8 +5446,8 @@\n })\n \n (define_expand \"aarch64_ld<VSTRUCT:nregs>r<VALLDIF:mode>\"\n-  [(match_operand:VSTRUCT 0 \"register_operand\" \"=w\")\n-   (match_operand:DI 1 \"register_operand\" \"w\")\n+  [(match_operand:VSTRUCT 0 \"register_operand\")\n+   (match_operand:DI 1 \"register_operand\")\n    (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_SIMD\"\n {\n@@ -5521,8 +5521,8 @@\n )\n \n (define_expand \"aarch64_ld<VSTRUCT:nregs><VDC:mode>\"\n- [(match_operand:VSTRUCT 0 \"register_operand\" \"=w\")\n-  (match_operand:DI 1 \"register_operand\" \"r\")\n+ [(match_operand:VSTRUCT 0 \"register_operand\")\n+  (match_operand:DI 1 \"register_operand\")\n   (unspec:VDC [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_SIMD\"\n {\n@@ -5549,8 +5549,8 @@\n })\n \n (define_expand \"aarch64_ld<VSTRUCT:nregs><VQ:mode>\"\n- [(match_operand:VSTRUCT 0 \"register_operand\" \"=w\")\n-  (match_operand:DI 1 \"register_operand\" \"r\")\n+ [(match_operand:VSTRUCT 0 \"register_operand\")\n+  (match_operand:DI 1 \"register_operand\")\n   (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_SIMD\"\n {\n@@ -5562,8 +5562,8 @@\n })\n \n (define_expand \"aarch64_ld1x2<VQ:mode>\"\n- [(match_operand:OI 0 \"register_operand\" \"=w\")\n-  (match_operand:DI 1 \"register_operand\" \"r\")\n+ [(match_operand:OI 0 \"register_operand\")\n+  (match_operand:DI 1 \"register_operand\")\n   (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_SIMD\"\n {\n@@ -5575,8 +5575,8 @@\n })\n \n (define_expand \"aarch64_ld1x2<VDC:mode>\"\n- [(match_operand:OI 0 \"register_operand\" \"=w\")\n-  (match_operand:DI 1 \"register_operand\" \"r\")\n+ [(match_operand:OI 0 \"register_operand\")\n+  (match_operand:DI 1 \"register_operand\")\n   (unspec:VDC [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_SIMD\"\n {\n@@ -5589,10 +5589,10 @@\n \n \n (define_expand \"aarch64_ld<VSTRUCT:nregs>_lane<VALLDIF:mode>\"\n-  [(match_operand:VSTRUCT 0 \"register_operand\" \"=w\")\n-\t(match_operand:DI 1 \"register_operand\" \"w\")\n-\t(match_operand:VSTRUCT 2 \"register_operand\" \"0\")\n-\t(match_operand:SI 3 \"immediate_operand\" \"i\")\n+  [(match_operand:VSTRUCT 0 \"register_operand\")\n+\t(match_operand:DI 1 \"register_operand\")\n+\t(match_operand:VSTRUCT 2 \"register_operand\")\n+\t(match_operand:SI 3 \"immediate_operand\")\n \t(unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_SIMD\"\n {\n@@ -5612,9 +5612,9 @@\n ;; D-register list.\n \n (define_expand \"aarch64_get_dreg<VSTRUCT:mode><VDC:mode>\"\n- [(match_operand:VDC 0 \"register_operand\" \"=w\")\n-  (match_operand:VSTRUCT 1 \"register_operand\" \"w\")\n-  (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+ [(match_operand:VDC 0 \"register_operand\")\n+  (match_operand:VSTRUCT 1 \"register_operand\")\n+  (match_operand:SI 2 \"immediate_operand\")]\n   \"TARGET_SIMD\"\n {\n   int part = INTVAL (operands[2]);\n@@ -5629,9 +5629,9 @@\n ;; Q-register list.\n \n (define_expand \"aarch64_get_qreg<VSTRUCT:mode><VQ:mode>\"\n- [(match_operand:VQ 0 \"register_operand\" \"=w\")\n-  (match_operand:VSTRUCT 1 \"register_operand\" \"w\")\n-  (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+ [(match_operand:VQ 0 \"register_operand\")\n+  (match_operand:VSTRUCT 1 \"register_operand\")\n+  (match_operand:SI 2 \"immediate_operand\")]\n   \"TARGET_SIMD\"\n {\n   int part = INTVAL (operands[2]);\n@@ -5870,8 +5870,8 @@\n )\n \n (define_expand \"aarch64_st<VSTRUCT:nregs><VDC:mode>\"\n- [(match_operand:DI 0 \"register_operand\" \"r\")\n-  (match_operand:VSTRUCT 1 \"register_operand\" \"w\")\n+ [(match_operand:DI 0 \"register_operand\")\n+  (match_operand:VSTRUCT 1 \"register_operand\")\n   (unspec:VDC [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_SIMD\"\n {\n@@ -5883,8 +5883,8 @@\n })\n \n (define_expand \"aarch64_st<VSTRUCT:nregs><VQ:mode>\"\n- [(match_operand:DI 0 \"register_operand\" \"r\")\n-  (match_operand:VSTRUCT 1 \"register_operand\" \"w\")\n+ [(match_operand:DI 0 \"register_operand\")\n+  (match_operand:VSTRUCT 1 \"register_operand\")\n   (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_SIMD\"\n {\n@@ -5896,8 +5896,8 @@\n })\n \n (define_expand \"aarch64_st<VSTRUCT:nregs>_lane<VALLDIF:mode>\"\n- [(match_operand:DI 0 \"register_operand\" \"r\")\n-  (match_operand:VSTRUCT 1 \"register_operand\" \"w\")\n+ [(match_operand:DI 0 \"register_operand\")\n+  (match_operand:VSTRUCT 1 \"register_operand\")\n   (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n   (match_operand:SI 2 \"immediate_operand\")]\n   \"TARGET_SIMD\"\n@@ -5933,10 +5933,10 @@\n ;; extend them in arm_neon.h and insert the resulting Q-regs.\n \n (define_expand \"aarch64_set_qreg<VSTRUCT:mode><VQ:mode>\"\n- [(match_operand:VSTRUCT 0 \"register_operand\" \"+w\")\n-  (match_operand:VSTRUCT 1 \"register_operand\" \"0\")\n-  (match_operand:VQ 2 \"register_operand\" \"w\")\n-  (match_operand:SI 3 \"immediate_operand\" \"i\")]\n+ [(match_operand:VSTRUCT 0 \"register_operand\")\n+  (match_operand:VSTRUCT 1 \"register_operand\")\n+  (match_operand:VQ 2 \"register_operand\")\n+  (match_operand:SI 3 \"immediate_operand\")]\n   \"TARGET_SIMD\"\n {\n   int part = INTVAL (operands[3]);\n@@ -5951,7 +5951,7 @@\n ;; Standard pattern name vec_init<mode><Vel>.\n \n (define_expand \"vec_init<mode><Vel>\"\n-  [(match_operand:VALL_F16 0 \"register_operand\" \"\")\n+  [(match_operand:VALL_F16 0 \"register_operand\")\n    (match_operand 1 \"\" \"\")]\n   \"TARGET_SIMD\"\n {\n@@ -5960,7 +5960,7 @@\n })\n \n (define_expand \"vec_init<mode><Vhalf>\"\n-  [(match_operand:VQ_NO2E 0 \"register_operand\" \"\")\n+  [(match_operand:VQ_NO2E 0 \"register_operand\")\n    (match_operand 1 \"\" \"\")]\n   \"TARGET_SIMD\"\n {\n@@ -6039,9 +6039,9 @@\n ;; Standard pattern name vec_extract<mode><Vel>.\n \n (define_expand \"vec_extract<mode><Vel>\"\n-  [(match_operand:<VEL> 0 \"aarch64_simd_nonimmediate_operand\" \"\")\n-   (match_operand:VALL_F16 1 \"register_operand\" \"\")\n-   (match_operand:SI 2 \"immediate_operand\" \"\")]\n+  [(match_operand:<VEL> 0 \"aarch64_simd_nonimmediate_operand\")\n+   (match_operand:VALL_F16 1 \"register_operand\")\n+   (match_operand:SI 2 \"immediate_operand\")]\n   \"TARGET_SIMD\"\n {\n     emit_insn\n@@ -6387,11 +6387,11 @@\n ;; fp16fml\n \n (define_expand \"aarch64_fml<f16mac1>l<f16quad>_low<mode>\"\n-  [(set (match_operand:VDQSF 0 \"register_operand\" \"=w\")\n+  [(set (match_operand:VDQSF 0 \"register_operand\")\n \t(unspec:VDQSF\n-\t [(match_operand:VDQSF 1 \"register_operand\" \"0\")\n-\t  (match_operand:<VFMLA_W> 2 \"register_operand\" \"w\")\n-\t  (match_operand:<VFMLA_W> 3 \"register_operand\" \"w\")]\n+\t [(match_operand:VDQSF 1 \"register_operand\")\n+\t  (match_operand:<VFMLA_W> 2 \"register_operand\")\n+\t  (match_operand:<VFMLA_W> 3 \"register_operand\")]\n \t VFMLA16_LOW))]\n   \"TARGET_F16FML\"\n {\n@@ -6410,11 +6410,11 @@\n })\n \n (define_expand \"aarch64_fml<f16mac1>l<f16quad>_high<mode>\"\n-  [(set (match_operand:VDQSF 0 \"register_operand\" \"=w\")\n+  [(set (match_operand:VDQSF 0 \"register_operand\")\n \t(unspec:VDQSF\n-\t [(match_operand:VDQSF 1 \"register_operand\" \"0\")\n-\t  (match_operand:<VFMLA_W> 2 \"register_operand\" \"w\")\n-\t  (match_operand:<VFMLA_W> 3 \"register_operand\" \"w\")]\n+\t [(match_operand:VDQSF 1 \"register_operand\")\n+\t  (match_operand:<VFMLA_W> 2 \"register_operand\")\n+\t  (match_operand:<VFMLA_W> 3 \"register_operand\")]\n \t VFMLA16_HIGH))]\n   \"TARGET_F16FML\"\n {\n@@ -6500,11 +6500,11 @@\n )\n \n (define_expand \"aarch64_fml<f16mac1>l_lane_lowv2sf\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"\")\n-\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\" \"\")\n-\t\t\t   (match_operand:V4HF 2 \"register_operand\" \"\")\n-\t\t\t   (match_operand:V4HF 3 \"register_operand\" \"\")\n-\t\t\t   (match_operand:SI 4 \"aarch64_imm2\" \"\")]\n+  [(set (match_operand:V2SF 0 \"register_operand\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\")\n+\t\t\t   (match_operand:V4HF 2 \"register_operand\")\n+\t\t\t   (match_operand:V4HF 3 \"register_operand\")\n+\t\t\t   (match_operand:SI 4 \"aarch64_imm2\")]\n \t VFMLA16_LOW))]\n   \"TARGET_F16FML\"\n {\n@@ -6521,11 +6521,11 @@\n )\n \n (define_expand \"aarch64_fml<f16mac1>l_lane_highv2sf\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"\")\n-\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\" \"\")\n-\t\t\t   (match_operand:V4HF 2 \"register_operand\" \"\")\n-\t\t\t   (match_operand:V4HF 3 \"register_operand\" \"\")\n-\t\t\t   (match_operand:SI 4 \"aarch64_imm2\" \"\")]\n+  [(set (match_operand:V2SF 0 \"register_operand\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\")\n+\t\t\t   (match_operand:V4HF 2 \"register_operand\")\n+\t\t\t   (match_operand:V4HF 3 \"register_operand\")\n+\t\t\t   (match_operand:SI 4 \"aarch64_imm2\")]\n \t VFMLA16_HIGH))]\n   \"TARGET_F16FML\"\n {\n@@ -6615,11 +6615,11 @@\n )\n \n (define_expand \"aarch64_fml<f16mac1>lq_laneq_lowv4sf\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"\")\n-\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"\")\n-\t\t\t   (match_operand:V8HF 2 \"register_operand\" \"\")\n-\t\t\t   (match_operand:V8HF 3 \"register_operand\" \"\")\n-\t\t\t   (match_operand:SI 4 \"aarch64_lane_imm3\" \"\")]\n+  [(set (match_operand:V4SF 0 \"register_operand\")\n+\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\")\n+\t\t\t   (match_operand:V8HF 2 \"register_operand\")\n+\t\t\t   (match_operand:V8HF 3 \"register_operand\")\n+\t\t\t   (match_operand:SI 4 \"aarch64_lane_imm3\")]\n \t VFMLA16_LOW))]\n   \"TARGET_F16FML\"\n {\n@@ -6635,11 +6635,11 @@\n })\n \n (define_expand \"aarch64_fml<f16mac1>lq_laneq_highv4sf\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"\")\n-\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"\")\n-\t\t\t   (match_operand:V8HF 2 \"register_operand\" \"\")\n-\t\t\t   (match_operand:V8HF 3 \"register_operand\" \"\")\n-\t\t\t   (match_operand:SI 4 \"aarch64_lane_imm3\" \"\")]\n+  [(set (match_operand:V4SF 0 \"register_operand\")\n+\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\")\n+\t\t\t   (match_operand:V8HF 2 \"register_operand\")\n+\t\t\t   (match_operand:V8HF 3 \"register_operand\")\n+\t\t\t   (match_operand:SI 4 \"aarch64_lane_imm3\")]\n \t VFMLA16_HIGH))]\n   \"TARGET_F16FML\"\n {\n@@ -6729,11 +6729,11 @@\n )\n \n (define_expand \"aarch64_fml<f16mac1>l_laneq_lowv2sf\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"\")\n-\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\" \"\")\n-\t\t      (match_operand:V4HF 2 \"register_operand\" \"\")\n-\t\t      (match_operand:V8HF 3 \"register_operand\" \"\")\n-\t\t      (match_operand:SI 4 \"aarch64_lane_imm3\" \"\")]\n+  [(set (match_operand:V2SF 0 \"register_operand\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\")\n+\t\t      (match_operand:V4HF 2 \"register_operand\")\n+\t\t      (match_operand:V8HF 3 \"register_operand\")\n+\t\t      (match_operand:SI 4 \"aarch64_lane_imm3\")]\n \t VFMLA16_LOW))]\n   \"TARGET_F16FML\"\n {\n@@ -6750,11 +6750,11 @@\n })\n \n (define_expand \"aarch64_fml<f16mac1>l_laneq_highv2sf\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"\")\n-\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\" \"\")\n-\t\t      (match_operand:V4HF 2 \"register_operand\" \"\")\n-\t\t      (match_operand:V8HF 3 \"register_operand\" \"\")\n-\t\t      (match_operand:SI 4 \"aarch64_lane_imm3\" \"\")]\n+  [(set (match_operand:V2SF 0 \"register_operand\")\n+\t(unspec:V2SF [(match_operand:V2SF 1 \"register_operand\")\n+\t\t      (match_operand:V4HF 2 \"register_operand\")\n+\t\t      (match_operand:V8HF 3 \"register_operand\")\n+\t\t      (match_operand:SI 4 \"aarch64_lane_imm3\")]\n \t VFMLA16_HIGH))]\n   \"TARGET_F16FML\"\n {\n@@ -6845,11 +6845,11 @@\n )\n \n (define_expand \"aarch64_fml<f16mac1>lq_lane_lowv4sf\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"\")\n-\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"\")\n-\t\t      (match_operand:V8HF 2 \"register_operand\" \"\")\n-\t\t      (match_operand:V4HF 3 \"register_operand\" \"\")\n-\t\t      (match_operand:SI 4 \"aarch64_imm2\" \"\")]\n+  [(set (match_operand:V4SF 0 \"register_operand\")\n+\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\")\n+\t\t      (match_operand:V8HF 2 \"register_operand\")\n+\t\t      (match_operand:V4HF 3 \"register_operand\")\n+\t\t      (match_operand:SI 4 \"aarch64_imm2\")]\n \t VFMLA16_LOW))]\n   \"TARGET_F16FML\"\n {\n@@ -6865,11 +6865,11 @@\n })\n \n (define_expand \"aarch64_fml<f16mac1>lq_lane_highv4sf\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"\")\n-\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"\")\n-\t\t      (match_operand:V8HF 2 \"register_operand\" \"\")\n-\t\t      (match_operand:V4HF 3 \"register_operand\" \"\")\n-\t\t      (match_operand:SI 4 \"aarch64_imm2\" \"\")]\n+  [(set (match_operand:V4SF 0 \"register_operand\")\n+\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\")\n+\t\t      (match_operand:V8HF 2 \"register_operand\")\n+\t\t      (match_operand:V4HF 3 \"register_operand\")\n+\t\t      (match_operand:SI 4 \"aarch64_imm2\")]\n \t VFMLA16_HIGH))]\n   \"TARGET_F16FML\"\n {"}, {"sha": "c4670b6080b6fb1946e5a331303a6c32ad05bcd8", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bbffb87a9ecc3e27a4074145e55e3315df57b7d/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bbffb87a9ecc3e27a4074145e55e3315df57b7d/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=1bbffb87a9ecc3e27a4074145e55e3315df57b7d", "patch": "@@ -144,6 +144,7 @@\n \n ;; Handle big-endian memory reloads.  We use byte PTRUE for all modes\n ;; to try to encourage reuse.\n+;; This pattern needs constraints due to TARGET_SECONDARY_RELOAD hook.\n (define_expand \"aarch64_sve_reload_be\"\n   [(parallel\n      [(set (match_operand 0)\n@@ -3120,7 +3121,7 @@\n \n ;; Standard pattern name vec_init<mode><Vel>.\n (define_expand \"vec_init<mode><Vel>\"\n-  [(match_operand:SVE_ALL 0 \"register_operand\" \"\")\n+  [(match_operand:SVE_ALL 0 \"register_operand\")\n     (match_operand 1 \"\" \"\")]\n   \"TARGET_SVE\"\n   {"}, {"sha": "4d559c4c928e5949d0494bf384a9ea044cf6fc7c", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 99, "deletions": 98, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bbffb87a9ecc3e27a4074145e55e3315df57b7d/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bbffb87a9ecc3e27a4074145e55e3315df57b7d/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=1bbffb87a9ecc3e27a4074145e55e3315df57b7d", "patch": "@@ -388,8 +388,8 @@\n \n (define_expand \"cbranch<mode>4\"\n   [(set (pc) (if_then_else (match_operator 0 \"aarch64_comparison_operator\"\n-\t\t\t    [(match_operand:GPI 1 \"register_operand\" \"\")\n-\t\t\t     (match_operand:GPI 2 \"aarch64_plus_operand\" \"\")])\n+\t\t\t    [(match_operand:GPI 1 \"register_operand\")\n+\t\t\t     (match_operand:GPI 2 \"aarch64_plus_operand\")])\n \t\t\t   (label_ref (match_operand 3 \"\" \"\"))\n \t\t\t   (pc)))]\n   \"\"\n@@ -402,8 +402,8 @@\n \n (define_expand \"cbranch<mode>4\"\n   [(set (pc) (if_then_else (match_operator 0 \"aarch64_comparison_operator\"\n-\t\t\t    [(match_operand:GPF 1 \"register_operand\" \"\")\n-\t\t\t     (match_operand:GPF 2 \"aarch64_fp_compare_operand\" \"\")])\n+\t\t\t    [(match_operand:GPF 1 \"register_operand\")\n+\t\t\t     (match_operand:GPF 2 \"aarch64_fp_compare_operand\")])\n \t\t\t   (label_ref (match_operand 3 \"\" \"\"))\n \t\t\t   (pc)))]\n   \"\"\n@@ -417,7 +417,7 @@\n (define_expand \"cbranchcc4\"\n   [(set (pc) (if_then_else\n \t      (match_operator 0 \"aarch64_comparison_operator\"\n-\t       [(match_operand 1 \"cc_register\" \"\")\n+\t       [(match_operand 1 \"cc_register\")\n \t        (match_operand 2 \"const0_operand\")])\n \t      (label_ref (match_operand 3 \"\" \"\"))\n \t      (pc)))]\n@@ -480,9 +480,9 @@\n ;; csneg  x0, x0, x1, mi\n \n (define_expand \"mod<mode>3\"\n-  [(match_operand:GPI 0 \"register_operand\" \"\")\n-   (match_operand:GPI 1 \"register_operand\" \"\")\n-   (match_operand:GPI 2 \"const_int_operand\" \"\")]\n+  [(match_operand:GPI 0 \"register_operand\")\n+   (match_operand:GPI 1 \"register_operand\")\n+   (match_operand:GPI 2 \"const_int_operand\")]\n   \"\"\n   {\n     HOST_WIDE_INT val = INTVAL (operands[2]);\n@@ -593,9 +593,9 @@\n )\n \n (define_expand \"casesi\"\n-  [(match_operand:SI 0 \"register_operand\" \"\")\t; Index\n-   (match_operand:SI 1 \"const_int_operand\" \"\")\t; Lower bound\n-   (match_operand:SI 2 \"const_int_operand\" \"\")\t; Total range\n+  [(match_operand:SI 0 \"register_operand\")\t; Index\n+   (match_operand:SI 1 \"const_int_operand\")\t; Lower bound\n+   (match_operand:SI 2 \"const_int_operand\")\t; Total range\n    (match_operand:DI 3 \"\" \"\")\t\t\t; Table label\n    (match_operand:DI 4 \"\" \"\")]\t\t\t; Out of range label\n   \"\"\n@@ -881,8 +881,8 @@\n ;; -------------------------------------------------------------------\n \n (define_expand \"call\"\n-  [(parallel [(call (match_operand 0 \"memory_operand\" \"\")\n-\t\t    (match_operand 1 \"general_operand\" \"\"))\n+  [(parallel [(call (match_operand 0 \"memory_operand\")\n+\t\t    (match_operand 1 \"general_operand\"))\n \t      (use (match_operand 2 \"\" \"\"))\n \t      (clobber (reg:DI LR_REGNUM))])]\n   \"\"\n@@ -906,8 +906,8 @@\n \n (define_expand \"call_value\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n-\t\t   (call (match_operand 1 \"memory_operand\" \"\")\n-\t\t\t (match_operand 2 \"general_operand\" \"\")))\n+\t\t   (call (match_operand 1 \"memory_operand\")\n+\t\t\t (match_operand 2 \"general_operand\")))\n \t      (use (match_operand 3 \"\" \"\"))\n \t      (clobber (reg:DI LR_REGNUM))])]\n   \"\"\n@@ -931,8 +931,8 @@\n )\n \n (define_expand \"sibcall\"\n-  [(parallel [(call (match_operand 0 \"memory_operand\" \"\")\n-\t\t    (match_operand 1 \"general_operand\" \"\"))\n+  [(parallel [(call (match_operand 0 \"memory_operand\")\n+\t\t    (match_operand 1 \"general_operand\"))\n \t      (return)\n \t      (use (match_operand 2 \"\" \"\"))])]\n   \"\"\n@@ -944,8 +944,8 @@\n \n (define_expand \"sibcall_value\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n-\t\t   (call (match_operand 1 \"memory_operand\" \"\")\n-\t\t\t (match_operand 2 \"general_operand\" \"\")))\n+\t\t   (call (match_operand 1 \"memory_operand\")\n+\t\t\t (match_operand 2 \"general_operand\")))\n \t      (return)\n \t      (use (match_operand 3 \"\" \"\"))])]\n   \"\"\n@@ -1011,8 +1011,8 @@\n ;; -------------------------------------------------------------------\n \n (define_expand \"mov<mode>\"\n-  [(set (match_operand:SHORT 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:SHORT 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:SHORT 0 \"nonimmediate_operand\")\n+\t(match_operand:SHORT 1 \"general_operand\"))]\n   \"\"\n   \"\n     if (GET_CODE (operands[0]) == MEM && operands[1] != const0_rtx)\n@@ -1068,8 +1068,8 @@\n )\n \n (define_expand \"mov<mode>\"\n-  [(set (match_operand:GPI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:GPI 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:GPI 0 \"nonimmediate_operand\")\n+\t(match_operand:GPI 1 \"general_operand\"))]\n   \"\"\n   \"\n     if (MEM_P (operands[0]) && CONST_INT_P (operands[1])\n@@ -1175,8 +1175,8 @@\n )\n \n (define_expand \"movti\"\n-  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:TI 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:TI 0 \"nonimmediate_operand\")\n+\t(match_operand:TI 1 \"general_operand\"))]\n   \"\"\n   \"\n     if (GET_CODE (operands[0]) == MEM && operands[1] != const0_rtx)\n@@ -1230,8 +1230,8 @@\n })\n \n (define_expand \"mov<mode>\"\n-  [(set (match_operand:GPF_TF_F16 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:GPF_TF_F16 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:GPF_TF_F16 0 \"nonimmediate_operand\")\n+\t(match_operand:GPF_TF_F16 1 \"general_operand\"))]\n   \"\"\n   {\n     if (!TARGET_FLOAT)\n@@ -1715,9 +1715,9 @@\n \n (define_expand \"add<mode>3\"\n   [(set\n-    (match_operand:GPI 0 \"register_operand\" \"\")\n-    (plus:GPI (match_operand:GPI 1 \"register_operand\" \"\")\n-\t      (match_operand:GPI 2 \"aarch64_pluslong_or_poly_operand\" \"\")))]\n+    (match_operand:GPI 0 \"register_operand\")\n+    (plus:GPI (match_operand:GPI 1 \"register_operand\")\n+\t      (match_operand:GPI 2 \"aarch64_pluslong_or_poly_operand\")))]\n   \"\"\n {\n   /* If operands[1] is a subreg extract the inner RTX.  */\n@@ -1910,9 +1910,9 @@\n })\n \n (define_expand \"addti3\"\n-  [(set (match_operand:TI 0 \"register_operand\" \"\")\n-\t(plus:TI (match_operand:TI 1 \"register_operand\" \"\")\n-\t\t (match_operand:TI 2 \"aarch64_reg_or_imm\" \"\")))]\n+  [(set (match_operand:TI 0 \"register_operand\")\n+\t(plus:TI (match_operand:TI 1 \"register_operand\")\n+\t\t (match_operand:TI 2 \"aarch64_reg_or_imm\")))]\n   \"\"\n {\n   rtx low_dest, op1_low, op2_low, high_dest, op1_high, op2_high;\n@@ -1943,9 +1943,9 @@\n })\n \n (define_expand \"addvti4\"\n-  [(match_operand:TI 0 \"register_operand\" \"\")\n-   (match_operand:TI 1 \"register_operand\" \"\")\n-   (match_operand:TI 2 \"aarch64_reg_or_imm\" \"\")\n+  [(match_operand:TI 0 \"register_operand\")\n+   (match_operand:TI 1 \"register_operand\")\n+   (match_operand:TI 2 \"aarch64_reg_or_imm\")\n    (label_ref (match_operand 3 \"\" \"\"))]\n   \"\"\n {\n@@ -1977,9 +1977,9 @@\n })\n \n (define_expand \"uaddvti4\"\n-  [(match_operand:TI 0 \"register_operand\" \"\")\n-   (match_operand:TI 1 \"register_operand\" \"\")\n-   (match_operand:TI 2 \"aarch64_reg_or_imm\" \"\")\n+  [(match_operand:TI 0 \"register_operand\")\n+   (match_operand:TI 1 \"register_operand\")\n+   (match_operand:TI 2 \"aarch64_reg_or_imm\")\n    (label_ref (match_operand 3 \"\" \"\"))]\n   \"\"\n {\n@@ -2514,9 +2514,9 @@\n \t       (plus:<DWI>\n \t\t (match_dup 4)\n \t\t (zero_extend:<DWI>\n-\t\t   (match_operand:GPI 1 \"register_operand\" \"\")))\n+\t\t   (match_operand:GPI 1 \"register_operand\")))\n \t       (zero_extend:<DWI>\n-\t\t (match_operand:GPI 2 \"register_operand\" \"\")))\n+\t\t (match_operand:GPI 2 \"register_operand\")))\n \t     (match_dup 6)))\n       (set (match_operand:GPI 0 \"register_operand\")\n \t   (plus:GPI\n@@ -2577,9 +2577,9 @@\n \t       (plus:<DWI>\n \t\t (match_dup 3)\n \t\t (sign_extend:<DWI>\n-\t\t   (match_operand:GPI 1 \"register_operand\" \"\")))\n+\t\t   (match_operand:GPI 1 \"register_operand\")))\n \t       (sign_extend:<DWI>\n-\t\t (match_operand:GPI 2 \"register_operand\" \"\")))\n+\t\t (match_operand:GPI 2 \"register_operand\")))\n \t   (sign_extend:<DWI>\n \t     (plus:GPI\n \t       (plus:GPI (match_dup 4) (match_dup 1))\n@@ -2848,9 +2848,9 @@\n })\n \n (define_expand \"subti3\"\n-  [(set (match_operand:TI 0 \"register_operand\" \"\")\n-\t(minus:TI (match_operand:TI 1 \"aarch64_reg_or_zero\" \"\")\n-\t\t  (match_operand:TI 2 \"register_operand\" \"\")))]\n+  [(set (match_operand:TI 0 \"register_operand\")\n+\t(minus:TI (match_operand:TI 1 \"aarch64_reg_or_zero\")\n+\t\t  (match_operand:TI 2 \"register_operand\")))]\n   \"\"\n {\n   rtx low_dest, op1_low, op2_low, high_dest, op1_high, op2_high;\n@@ -3298,12 +3298,12 @@\n      [(set (reg:CC CC_REGNUM)\n \t   (compare:CC\n \t     (zero_extend:<DWI>\n-\t       (match_operand:GPI 1 \"aarch64_reg_or_zero\" \"\"))\n+\t       (match_operand:GPI 1 \"aarch64_reg_or_zero\"))\n \t     (plus:<DWI>\n \t       (zero_extend:<DWI>\n-\t\t (match_operand:GPI 2 \"register_operand\" \"\"))\n+\t\t (match_operand:GPI 2 \"register_operand\"))\n \t       (ltu:<DWI> (reg:CC CC_REGNUM) (const_int 0)))))\n-      (set (match_operand:GPI 0 \"register_operand\" \"\")\n+      (set (match_operand:GPI 0 \"register_operand\")\n \t   (minus:GPI\n \t     (minus:GPI (match_dup 1) (match_dup 2))\n \t     (ltu:GPI (reg:CC CC_REGNUM) (const_int 0))))])]\n@@ -3366,16 +3366,16 @@\n \t   (compare:CC_V\n \t    (minus:<DWI>\n \t     (sign_extend:<DWI>\n-\t       (match_operand:GPI 1 \"aarch64_reg_or_zero\" \"\"))\n+\t       (match_operand:GPI 1 \"aarch64_reg_or_zero\"))\n \t     (plus:<DWI>\n \t       (sign_extend:<DWI>\n-\t\t (match_operand:GPI 2 \"register_operand\" \"\"))\n+\t\t (match_operand:GPI 2 \"register_operand\"))\n \t       (ltu:<DWI> (reg:CC CC_REGNUM) (const_int 0))))\n \t    (sign_extend:<DWI>\n \t     (minus:GPI (match_dup 1)\n \t\t\t(plus:GPI (ltu:GPI (reg:CC CC_REGNUM) (const_int 0))\n \t\t\t\t  (match_dup 2))))))\n-      (set (match_operand:GPI 0 \"register_operand\" \"\")\n+      (set (match_operand:GPI 0 \"register_operand\")\n \t   (minus:GPI\n \t     (minus:GPI (match_dup 1) (match_dup 2))\n \t     (ltu:GPI (reg:CC CC_REGNUM) (const_int 0))))])]\n@@ -3488,8 +3488,8 @@\n )\n \n (define_expand \"abs<mode>2\"\n-  [(match_operand:GPI 0 \"register_operand\" \"\")\n-   (match_operand:GPI 1 \"register_operand\" \"\")]\n+  [(match_operand:GPI 0 \"register_operand\")\n+   (match_operand:GPI 1 \"register_operand\")]\n   \"\"\n   {\n     rtx ccreg = aarch64_gen_compare_reg (LT, operands[1], const0_rtx);\n@@ -3902,10 +3902,10 @@\n ;; -------------------------------------------------------------------\n \n (define_expand \"cstore<mode>4\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+  [(set (match_operand:SI 0 \"register_operand\")\n \t(match_operator:SI 1 \"aarch64_comparison_operator\"\n-\t [(match_operand:GPI 2 \"register_operand\" \"\")\n-\t  (match_operand:GPI 3 \"aarch64_plus_operand\" \"\")]))]\n+\t [(match_operand:GPI 2 \"register_operand\")\n+\t  (match_operand:GPI 3 \"aarch64_plus_operand\")]))]\n   \"\"\n   \"\n   operands[2] = aarch64_gen_compare_reg (GET_CODE (operands[1]), operands[2],\n@@ -3927,10 +3927,10 @@\n \n \n (define_expand \"cstore<mode>4\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+  [(set (match_operand:SI 0 \"register_operand\")\n \t(match_operator:SI 1 \"aarch64_comparison_operator_mode\"\n-\t [(match_operand:GPF 2 \"register_operand\" \"\")\n-\t  (match_operand:GPF 3 \"aarch64_fp_compare_operand\" \"\")]))]\n+\t [(match_operand:GPF 2 \"register_operand\")\n+\t  (match_operand:GPF 3 \"aarch64_fp_compare_operand\")]))]\n   \"\"\n   \"\n   operands[2] = aarch64_gen_compare_reg (GET_CODE (operands[1]), operands[2],\n@@ -4015,13 +4015,13 @@\n )\n \n (define_expand \"cmov<mode>6\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"\")\n+  [(set (match_operand:GPI 0 \"register_operand\")\n \t(if_then_else:GPI\n \t (match_operator 1 \"aarch64_comparison_operator\"\n-\t  [(match_operand:GPI 2 \"register_operand\" \"\")\n-\t   (match_operand:GPI 3 \"aarch64_plus_operand\" \"\")])\n-\t (match_operand:GPI 4 \"register_operand\" \"\")\n-\t (match_operand:GPI 5 \"register_operand\" \"\")))]\n+\t  [(match_operand:GPI 2 \"register_operand\")\n+\t   (match_operand:GPI 3 \"aarch64_plus_operand\")])\n+\t (match_operand:GPI 4 \"register_operand\")\n+\t (match_operand:GPI 5 \"register_operand\")))]\n   \"\"\n   \"\n   operands[2] = aarch64_gen_compare_reg (GET_CODE (operands[1]), operands[2],\n@@ -4031,13 +4031,13 @@\n )\n \n (define_expand \"cmov<mode>6\"\n-  [(set (match_operand:GPF 0 \"register_operand\" \"\")\n+  [(set (match_operand:GPF 0 \"register_operand\")\n \t(if_then_else:GPF\n \t (match_operator 1 \"aarch64_comparison_operator\"\n-\t  [(match_operand:GPF 2 \"register_operand\" \"\")\n-\t   (match_operand:GPF 3 \"aarch64_fp_compare_operand\" \"\")])\n-\t (match_operand:GPF 4 \"register_operand\" \"\")\n-\t (match_operand:GPF 5 \"register_operand\" \"\")))]\n+\t  [(match_operand:GPF 2 \"register_operand\")\n+\t   (match_operand:GPF 3 \"aarch64_fp_compare_operand\")])\n+\t (match_operand:GPF 4 \"register_operand\")\n+\t (match_operand:GPF 5 \"register_operand\")))]\n   \"\"\n   \"\n   operands[2] = aarch64_gen_compare_reg (GET_CODE (operands[1]), operands[2],\n@@ -4115,10 +4115,10 @@\n )\n \n (define_expand \"mov<mode>cc\"\n-  [(set (match_operand:ALLI 0 \"register_operand\" \"\")\n-\t(if_then_else:ALLI (match_operand 1 \"aarch64_comparison_operator\" \"\")\n-\t\t\t   (match_operand:ALLI 2 \"register_operand\" \"\")\n-\t\t\t   (match_operand:ALLI 3 \"register_operand\" \"\")))]\n+  [(set (match_operand:ALLI 0 \"register_operand\")\n+\t(if_then_else:ALLI (match_operand 1 \"aarch64_comparison_operator\")\n+\t\t\t   (match_operand:ALLI 2 \"register_operand\")\n+\t\t\t   (match_operand:ALLI 3 \"register_operand\")))]\n   \"\"\n   {\n     rtx ccreg;\n@@ -4134,10 +4134,10 @@\n )\n \n (define_expand \"mov<GPF:mode><GPI:mode>cc\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"\")\n-\t(if_then_else:GPI (match_operand 1 \"aarch64_comparison_operator\" \"\")\n-\t\t\t  (match_operand:GPF 2 \"register_operand\" \"\")\n-\t\t\t  (match_operand:GPF 3 \"register_operand\" \"\")))]\n+  [(set (match_operand:GPI 0 \"register_operand\")\n+\t(if_then_else:GPI (match_operand 1 \"aarch64_comparison_operator\")\n+\t\t\t  (match_operand:GPF 2 \"register_operand\")\n+\t\t\t  (match_operand:GPF 3 \"register_operand\")))]\n   \"\"\n   {\n     rtx ccreg;\n@@ -4153,10 +4153,10 @@\n )\n \n (define_expand \"mov<mode>cc\"\n-  [(set (match_operand:GPF 0 \"register_operand\" \"\")\n-\t(if_then_else:GPF (match_operand 1 \"aarch64_comparison_operator\" \"\")\n-\t\t\t  (match_operand:GPF 2 \"register_operand\" \"\")\n-\t\t\t  (match_operand:GPF 3 \"register_operand\" \"\")))]\n+  [(set (match_operand:GPF 0 \"register_operand\")\n+\t(if_then_else:GPF (match_operand 1 \"aarch64_comparison_operator\")\n+\t\t\t  (match_operand:GPF 2 \"register_operand\")\n+\t\t\t  (match_operand:GPF 3 \"register_operand\")))]\n   \"\"\n   {\n     rtx ccreg;\n@@ -4172,10 +4172,10 @@\n )\n \n (define_expand \"<neg_not_op><mode>cc\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"\")\n-\t(if_then_else:GPI (match_operand 1 \"aarch64_comparison_operator\" \"\")\n-\t\t\t  (NEG_NOT:GPI (match_operand:GPI 2 \"register_operand\" \"\"))\n-\t\t\t  (match_operand:GPI 3 \"register_operand\" \"\")))]\n+  [(set (match_operand:GPI 0 \"register_operand\")\n+\t(if_then_else:GPI (match_operand 1 \"aarch64_comparison_operator\")\n+\t\t\t  (NEG_NOT:GPI (match_operand:GPI 2 \"register_operand\"))\n+\t\t\t  (match_operand:GPI 3 \"register_operand\")))]\n   \"\"\n   {\n     rtx ccreg;\n@@ -5404,7 +5404,7 @@\n ;; -------------------------------------------------------------------\n \n (define_expand \"<optab>\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:DI 0 \"register_operand\")\n \t(ANY_EXTRACT:DI (match_operand:DI 1 \"register_operand\")\n \t\t\t(match_operand 2\n \t\t\t  \"aarch64_simd_shift_imm_offset_di\")\n@@ -6254,8 +6254,8 @@\n )\n \n (define_expand \"sqrt<mode>2\"\n-  [(set (match_operand:GPF_F16 0 \"register_operand\" \"=w\")\n-\t(sqrt:GPF_F16 (match_operand:GPF_F16 1 \"register_operand\" \"w\")))]\n+  [(set (match_operand:GPF_F16 0 \"register_operand\")\n+\t(sqrt:GPF_F16 (match_operand:GPF_F16 1 \"register_operand\")))]\n   \"TARGET_FLOAT\"\n {\n   if (aarch64_emit_approx_sqrt (operands[0], operands[1], false))\n@@ -6414,6 +6414,7 @@\n ;; -------------------------------------------------------------------\n ;; Reload Scalar Floating point modes from constant pool.\n ;; The AArch64 port doesn't have __int128 constant move support.\n+;; The patterns need constraints due to TARGET_SECONDARY_RELOAD hook.\n (define_expand \"@aarch64_reload_movcp<GPF_TF:mode><P:mode>\"\n  [(set (match_operand:GPF_TF 0 \"register_operand\" \"=w\")\n        (mem:GPF_TF (match_operand 1 \"aarch64_constant_pool_symref\" \"S\")))\n@@ -6514,9 +6515,9 @@\n ;; rodata section.\n \n (define_expand \"add_losym\"\n-  [(set (match_operand 0 \"register_operand\" \"=r\")\n-\t(lo_sum (match_operand 1 \"register_operand\" \"r\")\n-\t\t(match_operand 2 \"aarch64_valid_symref\" \"S\")))]\n+  [(set (match_operand 0 \"register_operand\")\n+\t(lo_sum (match_operand 1 \"register_operand\")\n+\t\t(match_operand 2 \"aarch64_valid_symref\")))]\n   \"\"\n {\n   machine_mode mode = GET_MODE (operands[0]);\n@@ -6605,9 +6606,9 @@\n ;; instructions in the TLS stubs, in order to enable linker relaxation.\n ;; Therefore we treat the stubs as an atomic sequence.\n (define_expand \"tlsgd_small_<mode>\"\n- [(parallel [(set (match_operand 0 \"register_operand\" \"\")\n+ [(parallel [(set (match_operand 0 \"register_operand\")\n                   (call (mem:DI (match_dup 2)) (const_int 1)))\n-\t     (unspec:DI [(match_operand:PTR 1 \"aarch64_valid_symref\" \"\")] UNSPEC_GOTSMALLTLS)\n+\t     (unspec:DI [(match_operand:PTR 1 \"aarch64_valid_symref\")] UNSPEC_GOTSMALLTLS)\n \t     (clobber (reg:DI LR_REGNUM))])]\n  \"\"\n {\n@@ -6890,7 +6891,7 @@\n \n ;; Named pattern for expanding thread pointer reference.\n (define_expand \"get_thread_pointerdi\"\n-  [(match_operand:DI 0 \"register_operand\" \"=r\")]\n+  [(match_operand:DI 0 \"register_operand\")]\n   \"\"\n {\n   rtx tmp = aarch64_load_tp (operands[0]);\n@@ -7147,10 +7148,10 @@\n ;; tracking enabled.  Use the speculation tracker to decide whether to\n ;; copy operand 1 to the target, or to copy the fail value (operand 2).\n (define_expand \"@despeculate_copy<ALLI_TI:mode>\"\n-  [(set (match_operand:ALLI_TI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:ALLI_TI 0 \"register_operand\")\n \t(unspec_volatile:ALLI_TI\n-\t [(match_operand:ALLI_TI 1 \"register_operand\" \"r\")\n-\t  (match_operand:ALLI_TI 2 \"aarch64_reg_or_zero\" \"rZ\")\n+\t [(match_operand:ALLI_TI 1 \"register_operand\")\n+\t  (match_operand:ALLI_TI 2 \"aarch64_reg_or_zero\")\n \t  (use (reg:DI SPECULATION_TRACKER_REGNUM))\n \t  (clobber (reg:CC CC_REGNUM))] UNSPECV_SPECULATION_BARRIER))]\n   \"\""}, {"sha": "a679270cd386b6efed9d2d64faf0278ed5fb0a55", "filename": "gcc/config/aarch64/atomics.md", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bbffb87a9ecc3e27a4074145e55e3315df57b7d/gcc%2Fconfig%2Faarch64%2Fatomics.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bbffb87a9ecc3e27a4074145e55e3315df57b7d/gcc%2Fconfig%2Faarch64%2Fatomics.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fatomics.md?ref=1bbffb87a9ecc3e27a4074145e55e3315df57b7d", "patch": "@@ -21,11 +21,11 @@\n ;; Instruction patterns.\n \n (define_expand \"@atomic_compare_and_swap<mode>\"\n-  [(match_operand:SI 0 \"register_operand\" \"\")\t\t\t;; bool out\n-   (match_operand:ALLI 1 \"register_operand\" \"\")\t\t\t;; val out\n-   (match_operand:ALLI 2 \"aarch64_sync_memory_operand\" \"\")\t;; memory\n-   (match_operand:ALLI 3 \"nonmemory_operand\" \"\")\t\t;; expected\n-   (match_operand:ALLI 4 \"aarch64_reg_or_zero\" \"\")\t\t;; desired\n+  [(match_operand:SI 0 \"register_operand\")\t\t\t;; bool out\n+   (match_operand:ALLI 1 \"register_operand\")\t\t\t;; val out\n+   (match_operand:ALLI 2 \"aarch64_sync_memory_operand\")\t\t;; memory\n+   (match_operand:ALLI 3 \"nonmemory_operand\")\t\t\t;; expected\n+   (match_operand:ALLI 4 \"aarch64_reg_or_zero\")\t\t\t;; desired\n    (match_operand:SI 5 \"const_int_operand\")\t\t\t;; is_weak\n    (match_operand:SI 6 \"const_int_operand\")\t\t\t;; mod_s\n    (match_operand:SI 7 \"const_int_operand\")]\t\t\t;; mod_f\n@@ -134,10 +134,10 @@\n })\n \n (define_expand \"atomic_exchange<mode>\"\n- [(match_operand:ALLI 0 \"register_operand\" \"\")\n-  (match_operand:ALLI 1 \"aarch64_sync_memory_operand\" \"\")\n-  (match_operand:ALLI 2 \"aarch64_reg_or_zero\" \"\")\n-  (match_operand:SI 3 \"const_int_operand\" \"\")]\n+ [(match_operand:ALLI 0 \"register_operand\")\n+  (match_operand:ALLI 1 \"aarch64_sync_memory_operand\")\n+  (match_operand:ALLI 2 \"aarch64_reg_or_zero\")\n+  (match_operand:SI 3 \"const_int_operand\")]\n   \"\"\n   {\n     rtx (*gen) (rtx, rtx, rtx, rtx);\n@@ -198,9 +198,9 @@\n )\n \n (define_expand \"atomic_<atomic_optab><mode>\"\n- [(match_operand:ALLI 0 \"aarch64_sync_memory_operand\" \"\")\n+ [(match_operand:ALLI 0 \"aarch64_sync_memory_operand\")\n   (atomic_op:ALLI\n-   (match_operand:ALLI 1 \"<atomic_op_operand>\" \"\")\n+   (match_operand:ALLI 1 \"<atomic_op_operand>\")\n    (match_operand:SI 2 \"const_int_operand\"))]\n   \"\"\n   {\n@@ -322,10 +322,10 @@\n ;; Load-operate-store, returning the original memory data.\n \n (define_expand \"atomic_fetch_<atomic_optab><mode>\"\n- [(match_operand:ALLI 0 \"register_operand\" \"\")\n-  (match_operand:ALLI 1 \"aarch64_sync_memory_operand\" \"\")\n+ [(match_operand:ALLI 0 \"register_operand\")\n+  (match_operand:ALLI 1 \"aarch64_sync_memory_operand\")\n   (atomic_op:ALLI\n-   (match_operand:ALLI 2 \"<atomic_op_operand>\" \"\")\n+   (match_operand:ALLI 2 \"<atomic_op_operand>\")\n    (match_operand:SI 3 \"const_int_operand\"))]\n  \"\"\n {\n@@ -439,10 +439,10 @@\n ;; Load-operate-store, returning the updated memory data.\n \n (define_expand \"atomic_<atomic_optab>_fetch<mode>\"\n- [(match_operand:ALLI 0 \"register_operand\" \"\")\n+ [(match_operand:ALLI 0 \"register_operand\")\n   (atomic_op:ALLI\n-   (match_operand:ALLI 1 \"aarch64_sync_memory_operand\" \"\")\n-   (match_operand:ALLI 2 \"<atomic_op_operand>\" \"\"))\n+   (match_operand:ALLI 1 \"aarch64_sync_memory_operand\")\n+   (match_operand:ALLI 2 \"<atomic_op_operand>\"))\n   (match_operand:SI 3 \"const_int_operand\")]\n  \"\"\n {\n@@ -600,7 +600,7 @@\n )\n \n (define_expand \"mem_thread_fence\"\n-  [(match_operand:SI 0 \"const_int_operand\" \"\")]\n+  [(match_operand:SI 0 \"const_int_operand\")]\n   \"\"\n   {\n     enum memmodel model = memmodel_from_int (INTVAL (operands[0]));"}]}