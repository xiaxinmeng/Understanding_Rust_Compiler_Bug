{"sha": "c4c064e7718490470b924c93b5082ba89b9af31c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRjMDY0ZTc3MTg0OTA0NzBiOTI0YzkzYjUwODJiYTg5YjlhZjMxYw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-06-17T05:46:01Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-06-17T05:46:01Z"}, "message": "03-06-16  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* Makefile.am (check-abi): Move...\n\t(new-abi-baseline): Move...\n\t* testsuite/Makefile.am: ...here.\n\t(new-abi-baseline): Conditionalize.\n\t(check-abi): Conditionalize.\n\t(check-abi-verbose): New.\n\t* Makefile.in: Regenerate.\n\t* testsuite/Makefile.in: Regenerate.\n\t* configure.in: Consolidate testsuite configure bits.\n\t* acinclude.m4 (GLIBCPP_CONFIGURE_TESTSUITE): Same.\n\t* configure: Regenerate.\n\t* aclocal.m4: Regenerate.\n\t* testsuite/abi_check.cc: Add --check-verbose.\n\tOnly output detailed information if --check-verbose.\n\nFrom-SVN: r68067", "tree": {"sha": "723f37102561df2c4d59fe789bc783d9853c641c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/723f37102561df2c4d59fe789bc783d9853c641c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4c064e7718490470b924c93b5082ba89b9af31c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4c064e7718490470b924c93b5082ba89b9af31c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4c064e7718490470b924c93b5082ba89b9af31c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4c064e7718490470b924c93b5082ba89b9af31c/comments", "author": null, "committer": null, "parents": [{"sha": "5b0e2409f70da6532af18625a8b5afc17b31bf63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b0e2409f70da6532af18625a8b5afc17b31bf63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b0e2409f70da6532af18625a8b5afc17b31bf63"}], "stats": {"total": 660, "additions": 381, "deletions": 279}, "files": [{"sha": "0b6a12a9ca5ede833b32647d3d6a3e54e1b7ffcb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c064e7718490470b924c93b5082ba89b9af31c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c064e7718490470b924c93b5082ba89b9af31c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c4c064e7718490470b924c93b5082ba89b9af31c", "patch": "@@ -1,3 +1,20 @@\n+2003-06-16  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* Makefile.am (check-abi): Move...\n+\t(new-abi-baseline): Move...\n+\t* testsuite/Makefile.am: ...here.\n+\t(new-abi-baseline): Conditionalize.\n+\t(check-abi): Conditionalize.\n+\t(check-abi-verbose): New.\n+\t* Makefile.in: Regenerate.\n+\t* testsuite/Makefile.in: Regenerate.\t\n+\t* configure.in: Consolidate testsuite configure bits.\n+\t* acinclude.m4 (GLIBCPP_CONFIGURE_TESTSUITE): Same.\n+\t* configure: Regenerate.\n+\t* aclocal.m4: Regenerate.\t\n+\t* testsuite/abi_check.cc: Add --check-verbose.\n+\tOnly output detailed information if --check-verbose.\n+\n 2003-06-16  Andreas Jaeger  <aj@suse.de>\n         \n         * testsuite/abi_check.cc: Create summary report."}, {"sha": "58edd36937ae9e5dbc36df017276cd9c9467d20f", "filename": "libstdc++-v3/Makefile.am", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c064e7718490470b924c93b5082ba89b9af31c/libstdc%2B%2B-v3%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c064e7718490470b924c93b5082ba89b9af31c/libstdc%2B%2B-v3%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.am?ref=c4c064e7718490470b924c93b5082ba89b9af31c", "patch": "@@ -46,26 +46,6 @@ check-script-install: $(top_builddir)/mkcheck\n \t  cd testsuite; \\\n \t  @glibcpp_builddir@/mkcheck 1)\n \n-# Use 'new-abi-baseline' to create an initial symbol file.  Then run\n-# 'check-abi' to test for changes against that file.\n-baseline_file = @baseline_file@\n-check-abi: $(top_builddir)/testsuite/abi_check\n-\t-@(cd testsuite; \\\n-\t  @glibcpp_srcdir@/config/abi/extract_symvers \\\n-\t     ../src/.libs/libstdc++.so \\\n-\t     ./current_symbols.txt && \\\n-\t  ./abi_check --check ./current_symbols.txt ${baseline_file})\n-\n-new-abi-baseline:\n-\t-@(output=${baseline_file}; \\\n-\t  if test -f $${output}; then \\\n-\t    output=$${output}.new; \\\n-\t    t=`echo $${output} | sed 's=.*config/abi/=='`; \\\n-\t    echo \"Baseline file already exists, writing to $${t} instead.\"; \\\n-\t  fi; \\\n-\t  @glibcpp_srcdir@/config/abi/extract_symvers \\\n-\t     src/.libs/libstdc++.so $${output})\n-\n # These rules are messy, but are hella worth it.\n doxygen:\n \t-(srcdir=`cd ${top_srcdir}; ${PWD}`; \\"}, {"sha": "cdd497cac6ddb18345634e680a349729cb7b4289", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c064e7718490470b924c93b5082ba89b9af31c/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c064e7718490470b924c93b5082ba89b9af31c/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=c4c064e7718490470b924c93b5082ba89b9af31c", "patch": "@@ -121,6 +121,7 @@ USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n+baseline_file = @baseline_file@\n check_msgfmt = @check_msgfmt@\n enable_shared = @enable_shared@\n enable_static = @enable_static@\n@@ -150,10 +151,6 @@ mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n PWD = $${PWDCMD-pwd}\n \n-# Use 'new-abi-baseline' to create an initial symbol file.  Then run\n-# 'check-abi' to test for changes against that file.\n-baseline_file = @baseline_file@\n-\n # Multilib support.\n MAKEOVERRIDES = \n \n@@ -496,22 +493,6 @@ check-script-install: $(top_builddir)/mkcheck\n \t-(chmod + $(top_builddir)/mkcheck; \\\n \t  cd testsuite; \\\n \t  @glibcpp_builddir@/mkcheck 1)\n-check-abi: $(top_builddir)/testsuite/abi_check\n-\t-@(cd testsuite; \\\n-\t  @glibcpp_srcdir@/config/abi/extract_symvers \\\n-\t     ../src/.libs/libstdc++.so \\\n-\t     ./current_symbols.txt && \\\n-\t  ./abi_check --check ./current_symbols.txt ${baseline_file})\n-\n-new-abi-baseline:\n-\t-@(output=${baseline_file}; \\\n-\t  if test -f $${output}; then \\\n-\t    output=$${output}.new; \\\n-\t    t=`echo $${output} | sed 's=.*config/abi/=='`; \\\n-\t    echo \"Baseline file already exists, writing to $${t} instead.\"; \\\n-\t  fi; \\\n-\t  @glibcpp_srcdir@/config/abi/extract_symvers \\\n-\t     src/.libs/libstdc++.so $${output})\n \n # These rules are messy, but are hella worth it.\n doxygen:"}, {"sha": "7fef68416c68bc3852d4a91d15a8baee0114d17d", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c064e7718490470b924c93b5082ba89b9af31c/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c064e7718490470b924c93b5082ba89b9af31c/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=c4c064e7718490470b924c93b5082ba89b9af31c", "patch": "@@ -209,7 +209,7 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n   #glibcpp_pch_comp=no\n   #enable_cheaders=c\n   #c_compatibility=no\n-  enable_abi_check=no\n+  #enable_abi_check=no\n   #enable_symvers=no\n \n   # Find platform-specific directories containing configuration info.  In\n@@ -2049,20 +2049,33 @@ dnl the testsuite_hooks.h header.\n dnl\n dnl GLIBCPP_CONFIGURE_TESTSUITE  [no args]\n AC_DEFUN(GLIBCPP_CONFIGURE_TESTSUITE, [\n-  GLIBCPP_CHECK_SETRLIMIT\n \n-  # Look for setenv, so that extended locale tests can be performed.\n-  GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_3(setenv)\n+  if test  x\"$GLIBCPP_IS_CROSS_COMPILING\" = xfalse; then\n+    # Do checks for memory limit functions.\n+    GLIBCPP_CHECK_SETRLIMIT\n+\n+    # Look for setenv, so that extended locale tests can be performed.\n+    GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_3(setenv)\n+  fi\n \n   # Export file names for ABI checking.\n   baseline_file=\"${glibcpp_srcdir}/config/abi/${abi_baseline_pair}\\$(MULTISUBDIR)/baseline_symbols.txt\"\n   AC_SUBST(baseline_file)\n \n-  dnl XXX move to configure.host?\n-  case \"$target\" in\n-    *-*-cygwin* ) enable_abi_check=no ;;\n-    * ) enable_abi_check=yes ;;\n-  esac\n+  # Determine if checking the ABI is desirable.\n+  if test x$enable_symvers = xno; then\n+    enable_abi_check=no\n+  else\n+    case \"$host\" in\n+      *-*-cygwin*) \n+\tenable_abi_check=no ;;\n+      *) \n+        enable_abi_check=yes ;;\n+    esac\n+  fi\n+\n+  AM_CONDITIONAL(GLIBCPP_TEST_WCHAR_T, test \"$enable_wchar_t\" = yes)\t\n+  AM_CONDITIONAL(GLIBCPP_TEST_ABI, test \"$enable_abi_check\" = yes)\n ])\n \n "}, {"sha": "34d40f102b6059b7a10625ab3ac1b02ed9634113", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c064e7718490470b924c93b5082ba89b9af31c/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c064e7718490470b924c93b5082ba89b9af31c/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=c4c064e7718490470b924c93b5082ba89b9af31c", "patch": "@@ -221,7 +221,7 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n   #glibcpp_pch_comp=no\n   #enable_cheaders=c\n   #c_compatibility=no\n-  enable_abi_check=no\n+  #enable_abi_check=no\n   #enable_symvers=no\n \n   # Find platform-specific directories containing configuration info.  In\n@@ -2061,20 +2061,33 @@ dnl the testsuite_hooks.h header.\n dnl\n dnl GLIBCPP_CONFIGURE_TESTSUITE  [no args]\n AC_DEFUN(GLIBCPP_CONFIGURE_TESTSUITE, [\n-  GLIBCPP_CHECK_SETRLIMIT\n \n-  # Look for setenv, so that extended locale tests can be performed.\n-  GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_3(setenv)\n+  if test  x\"$GLIBCPP_IS_CROSS_COMPILING\" = xfalse; then\n+    # Do checks for memory limit functions.\n+    GLIBCPP_CHECK_SETRLIMIT\n+\n+    # Look for setenv, so that extended locale tests can be performed.\n+    GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_3(setenv)\n+  fi\n \n   # Export file names for ABI checking.\n   baseline_file=\"${glibcpp_srcdir}/config/abi/${abi_baseline_pair}\\$(MULTISUBDIR)/baseline_symbols.txt\"\n   AC_SUBST(baseline_file)\n \n-  dnl XXX move to configure.host?\n-  case \"$target\" in\n-    *-*-cygwin* ) enable_abi_check=no ;;\n-    * ) enable_abi_check=yes ;;\n-  esac\n+  # Determine if checking the ABI is desirable.\n+  if test x$enable_symvers = xno; then\n+    enable_abi_check=no\n+  else\n+    case \"$host\" in\n+      *-*-cygwin*) \n+\tenable_abi_check=no ;;\n+      *) \n+        enable_abi_check=yes ;;\n+    esac\n+  fi\n+\n+  AM_CONDITIONAL(GLIBCPP_TEST_WCHAR_T, test \"$enable_wchar_t\" = yes)\t\n+  AM_CONDITIONAL(GLIBCPP_TEST_ABI, test \"$enable_abi_check\" = yes)\n ])\n \n "}, {"sha": "a6b7b9102645139230a7132954a94c5f33021040", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 193, "deletions": 181, "changes": 374, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c064e7718490470b924c93b5082ba89b9af31c/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c064e7718490470b924c93b5082ba89b9af31c/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=c4c064e7718490470b924c93b5082ba89b9af31c", "patch": "@@ -1504,7 +1504,7 @@ ac_exeext=$EXEEXT\n   #glibcpp_pch_comp=no\n   #enable_cheaders=c\n   #c_compatibility=no\n-  enable_abi_check=no\n+  #enable_abi_check=no\n   #enable_symvers=no\n \n   # Find platform-specific directories containing configuration info.  In\n@@ -23161,26 +23161,160 @@ EOF\n \n fi\n \n+fi\n \n-  # Establish limits on memory usage during 'make check'\n-  \n-  \n+# This depends on GLIBCPP_CHECK_LINKER_FEATURES, but without it assumes no.\n+# Check whether --enable-symvers or --disable-symvers was given.\n+if test \"${enable_symvers+set}\" = set; then\n+  enableval=\"$enable_symvers\"\n+  case \"$enableval\" in\n+ yes) enable_symvers=yes ;;\n+ no)  enable_symvers=no ;;\n+ # other names here, just as sanity checks\n+ #gnu|sun|etcetera) enable_symvers=$enableval ;;\n+ gnu) enable_symvers=$enableval ;;\n+ *)   { echo \"configure: error: Unknown argument to enable/disable symvers\" 1>&2; exit 1; } ;;\n+ esac\n+else\n+  enable_symvers=yes\n+fi\n+\n+# If we never went through the GLIBCPP_CHECK_LINKER_FEATURES macro, then we\n+# don't know enough about $LD to do tricks...\n+if test x$enable_shared = xno ||\n+\ttest \"x$LD\" = x ||\n+\ttest x$glibcpp_gnu_ld_version = x; then\n+  enable_symvers=no\n+fi\n+\n+# Check to see if libgcc_s exists, indicating that shared libgcc is possible.\n+if test $enable_symvers != no; then\n+  echo $ac_n \"checking for shared libgcc\"\"... $ac_c\" 1>&6\n+echo \"configure:23194: checking for shared libgcc\" >&5\n+  ac_save_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=' -lgcc_s'\n+  cat > conftest.$ac_ext <<EOF\n+#line 23198 \"configure\"\n+#include \"confdefs.h\"\n+\n+int main() {\n+return 0\n+; return 0; }\n+EOF\n+if { (eval echo configure:23205: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+  rm -rf conftest*\n+  glibcpp_shared_libgcc=yes\n+else\n+  echo \"configure: failed program was:\" >&5\n+  cat conftest.$ac_ext >&5\n+  rm -rf conftest*\n+  glibcpp_shared_libgcc=no\n+fi\n+rm -f conftest*\n+  CFLAGS=\"$ac_save_CFLAGS\"\n+  echo \"$ac_t\"\"$glibcpp_shared_libgcc\" 1>&6\n+fi\n+\n+# For GNU ld, we need at least this version.  It's 2.12 in the same format\n+# as the tested-for version.  See GLIBCPP_CHECK_LINKER_FEATURES for more.\n+glibcpp_min_gnu_ld_version=21200\n+\n+# Check to see if unspecified \"yes\" value can win, given results\n+# above.\n+if test $enable_symvers = yes ; then\n+  if test $with_gnu_ld = yes &&\n+    test $glibcpp_shared_libgcc = yes ;\n+  then\n+    if test $glibcpp_gnu_ld_version -ge $glibcpp_min_gnu_ld_version ; then\n+        enable_symvers=gnu\n+    else\n+      ac_test_CFLAGS=\"${CFLAGS+set}\"\n+      ac_save_CFLAGS=\"$CFLAGS\"\n+      CFLAGS='-shared -Wl,--version-script,conftest.map'\n+      enable_symvers=no\n+      \n+      echo 'FOO { global: f[a-z]o; local: *; };' > conftest.map\n+      \n+      cat > conftest.$ac_ext <<EOF\n+#line 23240 \"configure\"\n+#include \"confdefs.h\"\n+int foo;\n+int main() {\n+\n+; return 0; }\n+EOF\n+if { (eval echo configure:23247: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+  rm -rf conftest*\n+  enable_symvers=gnu\n+else\n+  echo \"configure: failed program was:\" >&5\n+  cat conftest.$ac_ext >&5\n+fi\n+rm -f conftest*\n+      if test \"$ac_test_CFLAGS\" = set; then\n+\tCFLAGS=\"$ac_save_CFLAGS\"\n+      else\n+\t# this is the suspicious part\n+\tCFLAGS=''\n+      fi\n+      rm -f conftest.map\n+    fi\n+  else\n+    # just fail for now\n+    enable_symvers=no\n+  fi\n+fi\n+\n+case $enable_symvers in\n+  no)\n+      SYMVER_MAP=config/linker-map.dummy\n+      ;;\n+  gnu)\n+      SYMVER_MAP=config/linker-map.gnu\n+      cat >> confdefs.h <<\\EOF\n+#define _GLIBCPP_SYMVER 1\n+EOF\n+\n+      ;;\n+esac\n+\n+\n+\n+\n+if test $enable_symvers != no; then\n+  GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE=\n+  GLIBCPP_BUILD_VERSIONED_SHLIB_FALSE='#'\n+else\n+  GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE='#'\n+  GLIBCPP_BUILD_VERSIONED_SHLIB_FALSE=\n+fi\n+echo $ac_n \"checking versioning on shared library symbols\"\"... $ac_c\" 1>&6\n+echo \"configure:23293: checking versioning on shared library symbols\" >&5\n+echo \"$ac_t\"\"$enable_symvers\" 1>&6\n+\n+\n+# This depends on GLIBCPP_ENABLE_SYMVERS and GLIBCPP_IS_CROSS_COMPILING.\n+\n+\n+  if test  x\"$GLIBCPP_IS_CROSS_COMPILING\" = xfalse; then\n+    # Do checks for memory limit functions.\n+    \n   setrlimit_have_headers=yes\n   for ac_hdr in unistd.h sys/time.h sys/resource.h\n do\n ac_safe=`echo \"$ac_hdr\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for $ac_hdr\"\"... $ac_c\" 1>&6\n-echo \"configure:23174: checking for $ac_hdr\" >&5\n+echo \"configure:23308: checking for $ac_hdr\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 23179 \"configure\"\n+#line 23313 \"configure\"\n #include \"confdefs.h\"\n #include <$ac_hdr>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:23184: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:23318: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -23213,7 +23347,7 @@ done\n     # Can't do these in a loop, else the resulting syntax is wrong.\n     \n   cat > conftest.$ac_ext <<EOF\n-#line 23217 \"configure\"\n+#line 23351 \"configure\"\n #include \"confdefs.h\"\n #include <unistd.h>\n                   #include <sys/time.h>\n@@ -23223,7 +23357,7 @@ int main() {\n  int f = RLIMIT_DATA ; \n ; return 0; }\n EOF\n-if { (eval echo configure:23227: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:23361: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   glibcpp_mresult=1\n else\n@@ -23240,7 +23374,7 @@ EOF\n \n     \n   cat > conftest.$ac_ext <<EOF\n-#line 23244 \"configure\"\n+#line 23378 \"configure\"\n #include \"confdefs.h\"\n #include <unistd.h>\n                   #include <sys/time.h>\n@@ -23250,7 +23384,7 @@ int main() {\n  int f = RLIMIT_RSS ; \n ; return 0; }\n EOF\n-if { (eval echo configure:23254: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:23388: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   glibcpp_mresult=1\n else\n@@ -23267,7 +23401,7 @@ EOF\n \n     \n   cat > conftest.$ac_ext <<EOF\n-#line 23271 \"configure\"\n+#line 23405 \"configure\"\n #include \"confdefs.h\"\n #include <unistd.h>\n                   #include <sys/time.h>\n@@ -23277,7 +23411,7 @@ int main() {\n  int f = RLIMIT_VMEM ; \n ; return 0; }\n EOF\n-if { (eval echo configure:23281: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:23415: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   glibcpp_mresult=1\n else\n@@ -23294,7 +23428,7 @@ EOF\n \n     \n   cat > conftest.$ac_ext <<EOF\n-#line 23298 \"configure\"\n+#line 23432 \"configure\"\n #include \"confdefs.h\"\n #include <unistd.h>\n                   #include <sys/time.h>\n@@ -23304,7 +23438,7 @@ int main() {\n  int f = RLIMIT_AS ; \n ; return 0; }\n EOF\n-if { (eval echo configure:23308: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:23442: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   glibcpp_mresult=1\n else\n@@ -23326,7 +23460,7 @@ EOF\n else\n   \n       cat > conftest.$ac_ext <<EOF\n-#line 23330 \"configure\"\n+#line 23464 \"configure\"\n #include \"confdefs.h\"\n #include <unistd.h>\n                   #include <sys/time.h>\n@@ -23336,7 +23470,7 @@ int main() {\n  struct rlimit r; setrlimit(0, &r);\n ; return 0; }\n EOF\n-if { (eval echo configure:23340: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:23474: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   ac_setrlimit=yes\n else\n@@ -23352,7 +23486,7 @@ fi\n   fi\n \n   echo $ac_n \"checking for testsuite memory limit support\"\"... $ac_c\" 1>&6\n-echo \"configure:23356: checking for testsuite memory limit support\" >&5\n+echo \"configure:23490: checking for testsuite memory limit support\" >&5\n   if test $setrlimit_have_headers = yes && test $ac_setrlimit = yes; then\n     ac_mem_limits=yes\n     cat >> confdefs.h <<\\EOF\n@@ -23365,10 +23499,10 @@ EOF\n   echo \"$ac_t\"\"$ac_mem_limits\" 1>&6\n \n \n-  # Look for setenv, so that extended locale tests can be performed.\n-  \n+    # Look for setenv, so that extended locale tests can be performed.\n+    \n   echo $ac_n \"checking for setenv declaration\"\"... $ac_c\" 1>&6\n-echo \"configure:23372: checking for setenv declaration\" >&5\n+echo \"configure:23506: checking for setenv declaration\" >&5\n   if test x${glibcpp_cv_func_setenv_use+set} != xset; then\n     if eval \"test \\\"`echo '$''{'glibcpp_cv_func_setenv_use'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n@@ -23383,14 +23517,14 @@ ac_link='${CXX-g++} -o conftest${ac_exeext} $CXXFLAGS $CPPFLAGS $LDFLAGS conftes\n cross_compiling=$ac_cv_prog_cxx_cross\n \n       cat > conftest.$ac_ext <<EOF\n-#line 23387 \"configure\"\n+#line 23521 \"configure\"\n #include \"confdefs.h\"\n #include <stdlib.h>\n int main() {\n  setenv(0, 0, 0);\n ; return 0; }\n EOF\n-if { (eval echo configure:23394: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:23528: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   glibcpp_cv_func_setenv_use=yes\n else\n@@ -23416,12 +23550,12 @@ fi\n     for ac_func in setenv\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:23420: checking for $ac_func\" >&5\n+echo \"configure:23554: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 23425 \"configure\"\n+#line 23559 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -23444,7 +23578,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:23448: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:23582: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -23470,146 +23604,42 @@ done\n \n   fi\n \n+  fi\n \n   # Export file names for ABI checking.\n   baseline_file=\"${glibcpp_srcdir}/config/abi/${abi_baseline_pair}\\$(MULTISUBDIR)/baseline_symbols.txt\"\n   \n \n-    case \"$target\" in\n-    *-*-cygwin* ) enable_abi_check=no ;;\n-    * ) enable_abi_check=yes ;;\n-  esac\n-\n-fi\n-\n-# This depends on the possibly-skipped linker test above.\n-# Check whether --enable-symvers or --disable-symvers was given.\n-if test \"${enable_symvers+set}\" = set; then\n-  enableval=\"$enable_symvers\"\n-  case \"$enableval\" in\n- yes) enable_symvers=yes ;;\n- no)  enable_symvers=no ;;\n- # other names here, just as sanity checks\n- #gnu|sun|etcetera) enable_symvers=$enableval ;;\n- gnu) enable_symvers=$enableval ;;\n- *)   { echo \"configure: error: Unknown argument to enable/disable symvers\" 1>&2; exit 1; } ;;\n- esac\n-else\n-  enable_symvers=yes\n-fi\n-\n-# If we never went through the GLIBCPP_CHECK_LINKER_FEATURES macro, then we\n-# don't know enough about $LD to do tricks...\n-if test x$enable_shared = xno ||\n-\ttest \"x$LD\" = x ||\n-\ttest x$glibcpp_gnu_ld_version = x; then\n-  enable_symvers=no\n-fi\n-\n-# Check to see if libgcc_s exists, indicating that shared libgcc is possible.\n-if test $enable_symvers != no; then\n-  echo $ac_n \"checking for shared libgcc\"\"... $ac_c\" 1>&6\n-echo \"configure:23513: checking for shared libgcc\" >&5\n-  ac_save_CFLAGS=\"$CFLAGS\"\n-  CFLAGS=' -lgcc_s'\n-  cat > conftest.$ac_ext <<EOF\n-#line 23517 \"configure\"\n-#include \"confdefs.h\"\n-\n-int main() {\n-return 0\n-; return 0; }\n-EOF\n-if { (eval echo configure:23524: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n-  rm -rf conftest*\n-  glibcpp_shared_libgcc=yes\n-else\n-  echo \"configure: failed program was:\" >&5\n-  cat conftest.$ac_ext >&5\n-  rm -rf conftest*\n-  glibcpp_shared_libgcc=no\n-fi\n-rm -f conftest*\n-  CFLAGS=\"$ac_save_CFLAGS\"\n-  echo \"$ac_t\"\"$glibcpp_shared_libgcc\" 1>&6\n-fi\n-\n-# For GNU ld, we need at least this version.  It's 2.12 in the same format\n-# as the tested-for version.  See GLIBCPP_CHECK_LINKER_FEATURES for more.\n-glibcpp_min_gnu_ld_version=21200\n-\n-# Check to see if unspecified \"yes\" value can win, given results\n-# above.\n-if test $enable_symvers = yes ; then\n-  if test $with_gnu_ld = yes &&\n-    test $glibcpp_shared_libgcc = yes ;\n-  then\n-    if test $glibcpp_gnu_ld_version -ge $glibcpp_min_gnu_ld_version ; then\n-        enable_symvers=gnu\n-    else\n-      ac_test_CFLAGS=\"${CFLAGS+set}\"\n-      ac_save_CFLAGS=\"$CFLAGS\"\n-      CFLAGS='-shared -Wl,--version-script,conftest.map'\n-      enable_symvers=no\n-      \n-      echo 'FOO { global: f[a-z]o; local: *; };' > conftest.map\n-      \n-      cat > conftest.$ac_ext <<EOF\n-#line 23559 \"configure\"\n-#include \"confdefs.h\"\n-int foo;\n-int main() {\n-\n-; return 0; }\n-EOF\n-if { (eval echo configure:23566: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n-  rm -rf conftest*\n-  enable_symvers=gnu\n-else\n-  echo \"configure: failed program was:\" >&5\n-  cat conftest.$ac_ext >&5\n-fi\n-rm -f conftest*\n-      if test \"$ac_test_CFLAGS\" = set; then\n-\tCFLAGS=\"$ac_save_CFLAGS\"\n-      else\n-\t# this is the suspicious part\n-\tCFLAGS=''\n-      fi\n-      rm -f conftest.map\n-    fi\n+  # Determine if checking the ABI is desirable.\n+  if test x$enable_symvers = xno; then\n+    enable_abi_check=no\n   else\n-    # just fail for now\n-    enable_symvers=no\n+    case \"$host\" in\n+      *-*-cygwin*) \n+\tenable_abi_check=no ;;\n+      *) \n+        enable_abi_check=yes ;;\n+    esac\n   fi\n-fi\n-\n-case $enable_symvers in\n-  no)\n-      SYMVER_MAP=config/linker-map.dummy\n-      ;;\n-  gnu)\n-      SYMVER_MAP=config/linker-map.gnu\n-      cat >> confdefs.h <<\\EOF\n-#define _GLIBCPP_SYMVER 1\n-EOF\n-\n-      ;;\n-esac\n-\n \n+  \n \n+if test \"$enable_wchar_t\" = yes; then\n+  GLIBCPP_TEST_WCHAR_T_TRUE=\n+  GLIBCPP_TEST_WCHAR_T_FALSE='#'\n+else\n+  GLIBCPP_TEST_WCHAR_T_TRUE='#'\n+  GLIBCPP_TEST_WCHAR_T_FALSE=\n+fi\t\n+  \n \n-if test $enable_symvers != no; then\n-  GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE=\n-  GLIBCPP_BUILD_VERSIONED_SHLIB_FALSE='#'\n+if test \"$enable_abi_check\" = yes; then\n+  GLIBCPP_TEST_ABI_TRUE=\n+  GLIBCPP_TEST_ABI_FALSE='#'\n else\n-  GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE='#'\n-  GLIBCPP_BUILD_VERSIONED_SHLIB_FALSE=\n+  GLIBCPP_TEST_ABI_TRUE='#'\n+  GLIBCPP_TEST_ABI_FALSE=\n fi\n-echo $ac_n \"checking versioning on shared library symbols\"\"... $ac_c\" 1>&6\n-echo \"configure:23612: checking versioning on shared library symbols\" >&5\n-echo \"$ac_t\"\"$enable_symvers\" 1>&6\n \n \n # Propagate the target-specific source directories through the build chain.\n@@ -23620,7 +23650,7 @@ ATOMICITY_INC_SRCDIR=config/${ATOMICITYH}\n \n \n \n-# Set up cross-compile flags and all AM_CONDITIONALs.\n+# Determine cross-compile flags and all AM_CONDITIONALs.\n \n \n \n@@ -23640,24 +23670,6 @@ else\n   GLIBCPP_BUILD_LIBMATH_TRUE='#'\n   GLIBCPP_BUILD_LIBMATH_FALSE=\n fi\n-\n-\n-if test \"$enable_wchar_t\" = yes; then\n-  GLIBCPP_TEST_WCHAR_T_TRUE=\n-  GLIBCPP_TEST_WCHAR_T_FALSE='#'\n-else\n-  GLIBCPP_TEST_WCHAR_T_TRUE='#'\n-  GLIBCPP_TEST_WCHAR_T_FALSE=\n-fi\t\n-\n-\n-if test \"$enable_abi_check\" = yes; then\n-  GLIBCPP_BUILD_ABI_CHECK_TRUE=\n-  GLIBCPP_BUILD_ABI_CHECK_FALSE='#'\n-else\n-  GLIBCPP_BUILD_ABI_CHECK_TRUE='#'\n-  GLIBCPP_BUILD_ABI_CHECK_FALSE=\n-fi\n  \n cat > confcache <<\\EOF\n # This file is a shell script that caches the results of configure\n@@ -23723,7 +23735,7 @@ glibcpp_prefixdir=${prefix}\n \n # Process the option --with-gxx-include-dir=<path to include-files directory>\n echo $ac_n \"checking for --with-gxx-include-dir\"\"... $ac_c\" 1>&6\n-echo \"configure:23727: checking for --with-gxx-include-dir\" >&5\n+echo \"configure:23739: checking for --with-gxx-include-dir\" >&5\n # Check whether --with-gxx-include-dir or --without-gxx-include-dir was given.\n if test \"${with_gxx_include_dir+set}\" = set; then\n   withval=\"$with_gxx_include_dir\"\n@@ -23747,7 +23759,7 @@ echo \"$ac_t\"\"$gxx_include_dir\" 1>&6\n \n # Process the option \"--enable-version-specific-runtime-libs\"\n echo $ac_n \"checking for --enable-version-specific-runtime-libs\"\"... $ac_c\" 1>&6\n-echo \"configure:23751: checking for --enable-version-specific-runtime-libs\" >&5\n+echo \"configure:23763: checking for --enable-version-specific-runtime-libs\" >&5\n # Check whether --enable-version-specific-runtime-libs or --disable-version-specific-runtime-libs was given.\n if test \"${enable_version_specific_runtime_libs+set}\" = set; then\n   enableval=\"$enable_version_specific_runtime_libs\"\n@@ -23798,7 +23810,7 @@ if test x\"$glibcpp_toolexecdir\" = x\"no\"; then\n fi\n \n echo $ac_n \"checking for install location\"\"... $ac_c\" 1>&6\n-echo \"configure:23802: checking for install location\" >&5\n+echo \"configure:23814: checking for install location\" >&5\n echo \"$ac_t\"\"$gxx_include_dir\" 1>&6\n \n \n@@ -24080,21 +24092,21 @@ s%@SECTION_LDFLAGS@%$SECTION_LDFLAGS%g\n s%@OPT_LDFLAGS@%$OPT_LDFLAGS%g\n s%@LIBMATHOBJS@%$LIBMATHOBJS%g\n s%@WERROR@%$WERROR%g\n-s%@baseline_file@%$baseline_file%g\n s%@SYMVER_MAP@%$SYMVER_MAP%g\n s%@GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE@%$GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE%g\n s%@GLIBCPP_BUILD_VERSIONED_SHLIB_FALSE@%$GLIBCPP_BUILD_VERSIONED_SHLIB_FALSE%g\n+s%@baseline_file@%$baseline_file%g\n+s%@GLIBCPP_TEST_WCHAR_T_TRUE@%$GLIBCPP_TEST_WCHAR_T_TRUE%g\n+s%@GLIBCPP_TEST_WCHAR_T_FALSE@%$GLIBCPP_TEST_WCHAR_T_FALSE%g\n+s%@GLIBCPP_TEST_ABI_TRUE@%$GLIBCPP_TEST_ABI_TRUE%g\n+s%@GLIBCPP_TEST_ABI_FALSE@%$GLIBCPP_TEST_ABI_FALSE%g\n s%@OS_INC_SRCDIR@%$OS_INC_SRCDIR%g\n s%@ATOMICITY_INC_SRCDIR@%$ATOMICITY_INC_SRCDIR%g\n s%@GLIBCPP_IS_CROSS_COMPILING@%$GLIBCPP_IS_CROSS_COMPILING%g\n s%@CANADIAN_TRUE@%$CANADIAN_TRUE%g\n s%@CANADIAN_FALSE@%$CANADIAN_FALSE%g\n s%@GLIBCPP_BUILD_LIBMATH_TRUE@%$GLIBCPP_BUILD_LIBMATH_TRUE%g\n s%@GLIBCPP_BUILD_LIBMATH_FALSE@%$GLIBCPP_BUILD_LIBMATH_FALSE%g\n-s%@GLIBCPP_TEST_WCHAR_T_TRUE@%$GLIBCPP_TEST_WCHAR_T_TRUE%g\n-s%@GLIBCPP_TEST_WCHAR_T_FALSE@%$GLIBCPP_TEST_WCHAR_T_FALSE%g\n-s%@GLIBCPP_BUILD_ABI_CHECK_TRUE@%$GLIBCPP_BUILD_ABI_CHECK_TRUE%g\n-s%@GLIBCPP_BUILD_ABI_CHECK_FALSE@%$GLIBCPP_BUILD_ABI_CHECK_FALSE%g\n s%@glibcpp_prefixdir@%$glibcpp_prefixdir%g\n s%@gxx_include_dir@%$gxx_include_dir%g\n s%@glibcpp_toolexecdir@%$glibcpp_toolexecdir%g"}, {"sha": "f7ff247602b828b8b3e3ea2545556917f1afe702", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c064e7718490470b924c93b5082ba89b9af31c/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c064e7718490470b924c93b5082ba89b9af31c/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=c4c064e7718490470b924c93b5082ba89b9af31c", "patch": "@@ -431,14 +431,14 @@ else\n   ])\n \n   AC_FUNC_MMAP\n-\n-  # Establish limits on memory usage during 'make check'\n-  GLIBCPP_CONFIGURE_TESTSUITE\n fi\n \n-# This depends on the possibly-skipped linker test above.\n+# This depends on GLIBCPP_CHECK_LINKER_FEATURES, but without it assumes no.\n GLIBCPP_ENABLE_SYMVERS([yes])\n \n+# This depends on GLIBCPP_ENABLE_SYMVERS and GLIBCPP_IS_CROSS_COMPILING.\n+GLIBCPP_CONFIGURE_TESTSUITE\n+\n # Propagate the target-specific source directories through the build chain.\n # (Nothing currently uses cpu_include_dir directly; only ATOMICITYH \n # uses it, and it only gets used in this file.)\n@@ -447,15 +447,11 @@ ATOMICITY_INC_SRCDIR=config/${ATOMICITYH}\n AC_SUBST(OS_INC_SRCDIR)\n AC_SUBST(ATOMICITY_INC_SRCDIR)\n \n-# Set up cross-compile flags and all AM_CONDITIONALs.\n+# Determine cross-compile flags and all AM_CONDITIONALs.\n AC_SUBST(GLIBCPP_IS_CROSS_COMPILING)\n AM_CONDITIONAL(CANADIAN, test \"$CANADIAN\" = yes)\n dnl from GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT:\n AM_CONDITIONAL(GLIBCPP_BUILD_LIBMATH,  test \"$need_libmath\" = yes)\n-dnl from GLIBCPP_CHECK_WCHAR_T_SUPPORT:\n-AM_CONDITIONAL(GLIBCPP_TEST_WCHAR_T, test \"$enable_wchar_t\" = yes)\t\n-dnl from GLIBCPP_CONFIGURE_TESTSUITE:\n-AM_CONDITIONAL(GLIBCPP_BUILD_ABI_CHECK, test \"$enable_abi_check\" = yes)\n  \n AC_CACHE_SAVE\n "}, {"sha": "7e5af5e37c9fbc535cb578c1fd7a9f62228978db", "filename": "libstdc++-v3/testsuite/Makefile.am", "status": "modified", "additions": 50, "deletions": 6, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c064e7718490470b924c93b5082ba89b9af31c/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c064e7718490470b924c93b5082ba89b9af31c/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am?ref=c4c064e7718490470b924c93b5082ba89b9af31c", "patch": "@@ -54,23 +54,67 @@ noinst_LIBRARIES = libv3test.a\n libv3test_a_SOURCES = testsuite_hooks.cc testsuite_allocator.cc\n \n ## Build support utilities.\n-## Only build this as native, as need to find startup files and libc to link.\n-if GLIBCPP_BUILD_ABI_CHECK\n+if GLIBCPP_TEST_ABI\n noinst_PROGRAMS = abi_check\n else\n noinst_PROGRAMS = \n endif\n abi_check_SOURCES = abi_check.cc\n \n+all-local: stamp_wchar\n+\n # Enable wchar_t tests if capable.\n if GLIBCPP_TEST_WCHAR_T\n-all-local: stamp_wchar\n+stamp_wchar:\n+\ttouch testsuite_wchar_t\n else\n-all-local:\n+stamp_wchar:\n+endif\n+\n+# Override this so local rules are possible.\n+check-am: \n+\t$(MAKE) $(AM_MAKEFLAGS) check-DEJAGNU; \\\n+\t$(MAKE) $(AM_MAKEFLAGS) check-local \n+\n+check-local: check-abi\n+\n+baseline_file = @baseline_file@\n+extract_symvers = @glibcpp_srcdir@/config/abi/extract_symvers\n+\n+current_symbols.txt: ${extract_symvers} ../src/.libs/libstdc++.so\n+\t  -@(${extract_symvers} ../src/.libs/libstdc++.so current_symbols.txt)\n+\n+baseline_symbols:\n+\t-@(output=${baseline_file}; \\\n+\t  if test ! -f $${output}; then \\\n+\t    echo \"Baseline file doesn't exist.\"; \\\n+\t    echo \"Try 'make new-abi-baseline' to create it.\"; \\\n+\t    exit 1; \\\n+\t  fi; \\\n+\ttouch baseline_symbols)\n+\n+new-abi-baseline: \n+\t-@(output=${baseline_file}; \\\n+\t  if test -f $${output}; then \\\n+\t    output=$${output}.new; \\\n+\t    t=`echo $${output} | sed 's=.*config/abi/=='`; \\\n+\t    echo \"Baseline file already exists, writing to $${t} instead.\"; \\\n+\t  fi; \\\n+\t  ${extract_symvers} ../src/.libs/libstdc++.so $${output})\n+\n+if GLIBCPP_TEST_ABI\n+# Use 'new-abi-baseline' to create an initial symbol file.  Then run\n+# 'check-abi' to test for changes against that file.\n+check-abi: abi_check baseline_symbols current_symbols.txt\n+\t-@(./abi_check --check ./current_symbols.txt ${baseline_file})\n+\n+check-abi-verbose: abi_check baseline_symbols current_symbols.txt \n+\t-@(./abi_check --check-verbose ./current_symbols.txt ${baseline_file})\n+else\n+check-abi:\n+check-abi-verbose:\n endif\n \n-stamp_wchar:\n-\ttouch testsuite_wchar_t\n \n # By adding these files here, automake will remove them for 'make clean'\n CLEANFILES = *.txt *.tst *.exe core* filebuf_* tmp* ostream_* *.log *.sum \\"}, {"sha": "bd1e20b541cf6c78588e3f88caee701ec17f57af", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 55, "deletions": 14, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c064e7718490470b924c93b5082ba89b9af31c/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c064e7718490470b924c93b5082ba89b9af31c/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=c4c064e7718490470b924c93b5082ba89b9af31c", "patch": "@@ -120,7 +120,6 @@ USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n-baseline_file = @baseline_file@\n check_msgfmt = @check_msgfmt@\n enable_shared = @enable_shared@\n enable_static = @enable_static@\n@@ -173,10 +172,13 @@ INCLUDES = \\\n \n noinst_LIBRARIES = libv3test.a\n libv3test_a_SOURCES = testsuite_hooks.cc testsuite_allocator.cc\n-@GLIBCPP_BUILD_ABI_CHECK_TRUE@noinst_PROGRAMS = @GLIBCPP_BUILD_ABI_CHECK_TRUE@abi_check\n-@GLIBCPP_BUILD_ABI_CHECK_FALSE@noinst_PROGRAMS = \n+@GLIBCPP_TEST_ABI_TRUE@noinst_PROGRAMS = @GLIBCPP_TEST_ABI_TRUE@abi_check\n+@GLIBCPP_TEST_ABI_FALSE@noinst_PROGRAMS = \n abi_check_SOURCES = abi_check.cc\n \n+baseline_file = @baseline_file@\n+extract_symvers = @glibcpp_srcdir@/config/abi/extract_symvers\n+\n # By adding these files here, automake will remove them for 'make clean'\n CLEANFILES = *.txt *.tst *.exe core* filebuf_* tmp* ostream_* *.log *.sum \\\n \t     testsuite_* site.exp abi_check \n@@ -194,7 +196,7 @@ LIBS = @LIBS@\n libv3test_a_LIBADD = \n libv3test_a_OBJECTS =  testsuite_hooks.$(OBJEXT) \\\n testsuite_allocator.$(OBJEXT)\n-@GLIBCPP_BUILD_ABI_CHECK_FALSE@noinst_PROGRAMS = \n+@GLIBCPP_TEST_ABI_FALSE@noinst_PROGRAMS = \n PROGRAMS =  $(noinst_PROGRAMS)\n \n abi_check_OBJECTS =  abi_check.$(OBJEXT)\n@@ -386,7 +388,7 @@ info: info-am\n dvi-am:\n dvi: dvi-am\n check-am:\n-\t$(MAKE) $(AM_MAKEFLAGS) check-DEJAGNU\n+\t$(MAKE) $(AM_MAKEFLAGS) check-DEJAGNU check-local\n check: check-am\n installcheck-am:\n installcheck: installcheck-am\n@@ -456,19 +458,58 @@ clean-libtool maintainer-clean-libtool mostlyclean-noinstPROGRAMS \\\n distclean-noinstPROGRAMS clean-noinstPROGRAMS \\\n maintainer-clean-noinstPROGRAMS tags mostlyclean-tags distclean-tags \\\n clean-tags maintainer-clean-tags distdir check-DEJAGNU info-am info \\\n-dvi-am dvi check check-am installcheck-am installcheck install-info-am \\\n-install-info install-exec-am install-exec install-data-am install-data \\\n-install-am install uninstall-am uninstall all-local all-redirect all-am \\\n-all installdirs mostlyclean-generic distclean-generic clean-generic \\\n-maintainer-clean-generic clean mostlyclean distclean maintainer-clean\n+dvi-am dvi check-local check check-am installcheck-am installcheck \\\n+install-info-am install-info install-exec-am install-exec \\\n+install-data-am install-data install-am install uninstall-am uninstall \\\n+all-local all-redirect all-am all installdirs mostlyclean-generic \\\n+distclean-generic clean-generic maintainer-clean-generic clean \\\n+mostlyclean distclean maintainer-clean\n+\n \n+all-local: stamp_wchar\n \n # Enable wchar_t tests if capable.\n-@GLIBCPP_TEST_WCHAR_T_TRUE@all-local: stamp_wchar\n-@GLIBCPP_TEST_WCHAR_T_FALSE@all-local:\n+@GLIBCPP_TEST_WCHAR_T_TRUE@stamp_wchar:\n+@GLIBCPP_TEST_WCHAR_T_TRUE@\ttouch testsuite_wchar_t\n+@GLIBCPP_TEST_WCHAR_T_FALSE@stamp_wchar:\n+\n+# Override this so local rules are possible.\n+check-am: \n+\t$(MAKE) $(AM_MAKEFLAGS) check-DEJAGNU; \\\n+\t$(MAKE) $(AM_MAKEFLAGS) check-local \n+\n+check-local: check-abi\n+\n+current_symbols.txt: ${extract_symvers} ../src/.libs/libstdc++.so\n+\t  -@(${extract_symvers} ../src/.libs/libstdc++.so current_symbols.txt)\n+\n+baseline_symbols:\n+\t-@(output=${baseline_file}; \\\n+\t  if test ! -f $${output}; then \\\n+\t    echo \"Baseline file doesn't exist.\"; \\\n+\t    echo \"Try 'make new-abi-baseline' to create it.\"; \\\n+\t    exit 1; \\\n+\t  fi; \\\n+\ttouch baseline_symbols)\n+\n+new-abi-baseline: \n+\t-@(output=${baseline_file}; \\\n+\t  if test -f $${output}; then \\\n+\t    output=$${output}.new; \\\n+\t    t=`echo $${output} | sed 's=.*config/abi/=='`; \\\n+\t    echo \"Baseline file already exists, writing to $${t} instead.\"; \\\n+\t  fi; \\\n+\t  ${extract_symvers} ../src/.libs/libstdc++.so $${output})\n+\n+# Use 'new-abi-baseline' to create an initial symbol file.  Then run\n+# 'check-abi' to test for changes against that file.\n+@GLIBCPP_TEST_ABI_TRUE@check-abi: abi_check baseline_symbols current_symbols.txt\n+@GLIBCPP_TEST_ABI_TRUE@\t-@(./abi_check --check ./current_symbols.txt ${baseline_file})\n \n-stamp_wchar:\n-\ttouch testsuite_wchar_t\n+@GLIBCPP_TEST_ABI_TRUE@check-abi-verbose: abi_check baseline_symbols current_symbols.txt \n+@GLIBCPP_TEST_ABI_TRUE@\t-@(./abi_check --check-verbose ./current_symbols.txt ${baseline_file})\n+@GLIBCPP_TEST_ABI_FALSE@check-abi:\n+@GLIBCPP_TEST_ABI_FALSE@check-abi-verbose:\n \n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded."}, {"sha": "c4d7805e08628f599556cc4f079bf4cabb528798", "filename": "libstdc++-v3/testsuite/abi_check.cc", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c064e7718490470b924c93b5082ba89b9af31c/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c064e7718490470b924c93b5082ba89b9af31c/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc?ref=c4c064e7718490470b924c93b5082ba89b9af31c", "patch": "@@ -313,17 +313,20 @@ main(int argc, char** argv)\n   using namespace std;\n \n   // Get arguments.  (Heading towards getopt_long, I can feel it.)\n-  string argv1;\n-  if (argc < 4 || (string(\"--help\") == (argv1 = argv[1])))\n+  bool verbose = false;\n+  string argv1 = argc > 1 ? argv[1] : \"\";\n+  if (argv1 == \"--help\" || argc < 4)\n     {\n-      cerr << \"Usage:  abi_check --check    cur baseline\\n\"\n-              \"                  --help\\n\\n\"\n-              \"Where CUR is a file containing the current results from\\n\"\n+      cerr << \"usage: abi_check --check current baseline\\n\"\n+              \"                 --check-verbose current baseline\\n\"\n+              \"                 --help\\n\\n\"\n+              \"Where CURRENT is a file containing the current results from\\n\"\n               \"extract_symvers, and BASELINE is one from config/abi.\\n\"\n \t   << endl;\n       exit(1);\n     }\n-\n+  else if (argv1 == \"--check-verbose\")\n+    verbose = true;\n \n   // Quick sanity/setup check for arguments.\n   const char* test_file = argv[2];\n@@ -412,21 +415,21 @@ main(int argc, char** argv)\n     }\n \n   // Report results.\n-  if (added_names.size())\n+  if (verbose && added_names.size())\n     {\n       cout << added_names.size() << \" added symbols \" << endl;\n       for (size_t j = 0; j < added_names.size() ; ++j)\n \treport_symbol_info(test_symbols[added_names[j]], j + 1);\n     }\n   \n-  if (missing_names.size())\n+  if (verbose && missing_names.size())\n     {\n       cout << missing_names.size() << \" missing symbols \" << endl;\n       for (size_t j = 0; j < missing_names.size() ; ++j)\n \treport_symbol_info(baseline_symbols[missing_names[j]], j + 1);\n     }\n   \n-  if (incompatible.size ())\n+  if (verbose && incompatible.size())\n     {\n       cout << incompatible.size() << \" incompatible symbols \" << endl;\n       for (size_t j = 0; j < incompatible.size() ; ++j)\n@@ -441,11 +444,13 @@ main(int argc, char** argv)\n \t}\n     }\n   \n-  cout << \"\\n\\t\\t=== libstdc++-v3 check-abi Summary for \" << baseline_file \n-       << \" ===\" << endl << endl;\n+  cout << \"\\n\\t\\t=== libstdc++-v3 check-abi Summary ===\" << endl;\n+  cout << endl;\n   cout << \"# of added symbols:\\t\\t \" << added_names.size() << endl;\n   cout << \"# of missing symbols:\\t\\t \" << missing_names.size() << endl;\n   cout << \"# of incompatible symbols:\\t \" << incompatible.size() << endl;\n+  cout << endl;\n+  cout << \"using: \" << baseline_file << endl;\n \n   return 0;\n }"}]}