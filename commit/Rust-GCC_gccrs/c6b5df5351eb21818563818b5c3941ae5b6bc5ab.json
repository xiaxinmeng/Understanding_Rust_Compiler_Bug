{"sha": "c6b5df5351eb21818563818b5c3941ae5b6bc5ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZiNWRmNTM1MWViMjE4MTg1NjM4MThiNWMzOTQxYWU1YjZiYzVhYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2002-09-10T19:35:04Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2002-09-10T19:35:04Z"}, "message": "codecvt.h (class __codecvt_abstract_base): Add __c_locale type _M_c_locale_codecvt member.\n\n2002-09-10  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/codecvt.h (class __codecvt_abstract_base):\n\tAdd __c_locale type _M_c_locale_codecvt member.\n\t(class codecvt<char, char, mbstate_t>,\n\tclass codecvt<wchar_t, char, mbstate_t>): Add new\n\tcodecvt(__c_locale, size_t) constructor.\n\t(codecvt_byname::codecvt_byname): Update.\n\t* src/codecvt.cc (class codecvt<char, char, mbstate_t>,\n\tclass codecvt<wchar_t, char, mbstate_t>): Update codecvt(size_t)\n\tconstructor and ~codecvt() destructor; define\n\tcodecvt(__c_locale, size_t) constructor.\n\t(codecvt::do_out): Switch to _M_c_locale_codecvt around wcsrtombs call.\n\t(codecvt::do_in): Ditto for mbsrtowcs call.\n\t* src/localename.cc (locale::_Impl::_Impl(const char*, size_t)):\n\tTweak construction of codecvt facets.\n\nFrom-SVN: r57011", "tree": {"sha": "0ac78e1529f2e352158b6477d3d7a1b652a84244", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ac78e1529f2e352158b6477d3d7a1b652a84244"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6b5df5351eb21818563818b5c3941ae5b6bc5ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6b5df5351eb21818563818b5c3941ae5b6bc5ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6b5df5351eb21818563818b5c3941ae5b6bc5ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6b5df5351eb21818563818b5c3941ae5b6bc5ab/comments", "author": null, "committer": null, "parents": [{"sha": "33b679d10a7186845cba6c783c85a7fb841aeac9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33b679d10a7186845cba6c783c85a7fb841aeac9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33b679d10a7186845cba6c783c85a7fb841aeac9"}], "stats": {"total": 84, "additions": 75, "deletions": 9}, "files": [{"sha": "ef14d43bab0f463acda9122707251eafb1505bdb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b5df5351eb21818563818b5c3941ae5b6bc5ab/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b5df5351eb21818563818b5c3941ae5b6bc5ab/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c6b5df5351eb21818563818b5c3941ae5b6bc5ab", "patch": "@@ -1,3 +1,20 @@\n+2002-09-10  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/codecvt.h (class __codecvt_abstract_base):\n+\tAdd __c_locale type _M_c_locale_codecvt member.\n+\t(class codecvt<char, char, mbstate_t>,\n+\tclass codecvt<wchar_t, char, mbstate_t>): Add new\n+\tcodecvt(__c_locale, size_t) constructor.\n+\t(codecvt_byname::codecvt_byname): Update.\n+\t* src/codecvt.cc (class codecvt<char, char, mbstate_t>,\n+\tclass codecvt<wchar_t, char, mbstate_t>): Update codecvt(size_t)\n+\tconstructor and ~codecvt() destructor; define\n+\tcodecvt(__c_locale, size_t) constructor.\n+\t(codecvt::do_out): Switch to _M_c_locale_codecvt around wcsrtombs call.\n+\t(codecvt::do_in): Ditto for mbsrtowcs call.\n+\t* src/localename.cc (locale::_Impl::_Impl(const char*, size_t)):\n+\tTweak construction of codecvt facets.\n+\n 2002-09-10  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \t* include/bits/locale_facets.tcc (__convert_from_v):"}, {"sha": "3a3f6044e5ff692f619650954afbee768fbc4bdb", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b5df5351eb21818563818b5c3941ae5b6bc5ab/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b5df5351eb21818563818b5c3941ae5b6bc5ab/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=c6b5df5351eb21818563818b5c3941ae5b6bc5ab", "patch": "@@ -70,7 +70,11 @@\n       typedef _InternT \t\t\t\t\tintern_type;\n       typedef _ExternT \t\t\t\t\textern_type;\n       typedef _StateT  \t\t\t\t\tstate_type;\n-      \n+ \n+    protected:\n+      __c_locale\t\t_M_c_locale_codecvt;\n+\n+    public:\n       // 22.2.1.5.1 codecvt members\n       result\n       out(state_type& __state, const intern_type* __from, \n@@ -225,6 +229,10 @@\n       explicit \n       codecvt(size_t __refs = 0);\n \n+      // Non-standard.\n+      explicit \n+      codecvt(__c_locale __cloc, size_t __refs = 0); \n+\n     protected:\n       virtual \n       ~codecvt();\n@@ -277,6 +285,10 @@\n       explicit \n       codecvt(size_t __refs = 0);\n \n+      // Non-standard.\n+      explicit \n+      codecvt(__c_locale __cloc, size_t __refs = 0);\n+\n     protected:\n       virtual \n       ~codecvt();\n@@ -320,8 +332,14 @@\n     {\n     public:\n       explicit \n-      codecvt_byname(const char*, size_t __refs = 0) \n-      : codecvt<_InternT, _ExternT, _StateT>(__refs) { }\n+      codecvt_byname(const char* __s, size_t __refs = 0) \n+      : codecvt<_InternT, _ExternT, _StateT>(__refs)\n+      { \n+\tif (_M_c_locale_codecvt != _S_c_locale)\n+\t  _S_destroy_c_locale(_M_c_locale_codecvt);\n+\t_S_create_c_locale(_M_c_locale_codecvt, __s); \n+      }\n+\n     protected:\n       virtual \n       ~codecvt_byname() { }"}, {"sha": "dcce705d22770e18996254143c346334781a5bca", "filename": "libstdc++-v3/src/codecvt.cc", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b5df5351eb21818563818b5c3941ae5b6bc5ab/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b5df5351eb21818563818b5c3941ae5b6bc5ab/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc?ref=c6b5df5351eb21818563818b5c3941ae5b6bc5ab", "patch": "@@ -39,10 +39,19 @@ namespace std\n   codecvt<char, char, mbstate_t>::\n   codecvt(size_t __refs)\n   : __codecvt_abstract_base<char, char, mbstate_t>(__refs)\n-  { }\n+  { _M_c_locale_codecvt = _S_c_locale; }\n \n   codecvt<char, char, mbstate_t>::\n-  ~codecvt() { }\n+  codecvt(__c_locale __cloc, size_t __refs)\n+  : __codecvt_abstract_base<char, char, mbstate_t>(__refs)\n+  { _M_c_locale_codecvt = _S_clone_c_locale(__cloc); }\n+\n+  codecvt<char, char, mbstate_t>::\n+  ~codecvt()\n+   {\n+     if (_M_c_locale_codecvt != _S_c_locale)\n+       _S_destroy_c_locale(_M_c_locale_codecvt);\n+   }\n   \n   codecvt_base::result\n   codecvt<char, char, mbstate_t>::\n@@ -106,10 +115,20 @@ namespace std\n   // codecvt<wchar_t, char, mbstate_t> required specialization\n   codecvt<wchar_t, char, mbstate_t>::\n   codecvt(size_t __refs)\n-  : __codecvt_abstract_base<wchar_t, char, mbstate_t>(__refs) { }\n+  : __codecvt_abstract_base<wchar_t, char, mbstate_t>(__refs)\n+  { _M_c_locale_codecvt = _S_c_locale; }  \n \n   codecvt<wchar_t, char, mbstate_t>::\n-  ~codecvt() { }\n+  codecvt(__c_locale __cloc, size_t __refs)\n+  : __codecvt_abstract_base<wchar_t, char, mbstate_t>(__refs)\n+  { _M_c_locale_codecvt = _S_clone_c_locale(__cloc); }\n+\n+  codecvt<wchar_t, char, mbstate_t>::\n+  ~codecvt()\n+  {\n+    if (_M_c_locale_codecvt != _S_c_locale)\n+      _S_destroy_c_locale(_M_c_locale_codecvt); \n+  }\n   \n   codecvt_base::result\n   codecvt<wchar_t, char, mbstate_t>::\n@@ -120,7 +139,13 @@ namespace std\n   {\n     result __ret = error;\n     size_t __len = min(__from_end - __from, __to_end - __to);\n+#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n+    __c_locale __old = __uselocale(_M_c_locale_codecvt);\n+#endif\n     size_t __conv = wcsrtombs(__to, &__from, __len, &__state);\n+#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n+    __uselocale(__old);\n+#endif\n \n     if (__conv == __len)\n       {\n@@ -158,7 +183,13 @@ namespace std\n   {\n     result __ret = error;\n     size_t __len = min(__from_end - __from, __to_end - __to);\n+#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n+    __c_locale __old = __uselocale(_M_c_locale_codecvt);\n+#endif\n     size_t __conv = mbsrtowcs(__to, &__from, __len, &__state);\n+#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n+    __uselocale(__old);\n+#endif\n \n     if (__conv == __len)\n       {"}, {"sha": "a0c9e75ee8009370dc01334061cd0a0076d7b030", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b5df5351eb21818563818b5c3941ae5b6bc5ab/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b5df5351eb21818563818b5c3941ae5b6bc5ab/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=c6b5df5351eb21818563818b5c3941ae5b6bc5ab", "patch": "@@ -127,7 +127,7 @@ namespace std\n \n     // Construct all standard facets and add them to _M_facets.\n     _M_init_facet(new std::ctype<char>(__cloc));\n-    _M_init_facet(new codecvt<char, char, mbstate_t>);\n+    _M_init_facet(new codecvt<char, char, mbstate_t>(__cloc));\n     _M_init_facet(new numpunct<char>(__cloc));\n     _M_init_facet(new num_get<char>);\n     _M_init_facet(new num_put<char>);\n@@ -143,7 +143,7 @@ namespace std\n \t\n #ifdef  _GLIBCPP_USE_WCHAR_T\n     _M_init_facet(new std::ctype<wchar_t>(__cloc));\n-    _M_init_facet(new codecvt<wchar_t, char, mbstate_t>);\n+    _M_init_facet(new codecvt<wchar_t, char, mbstate_t>(__cloc));\n     _M_init_facet(new numpunct<wchar_t>(__cloc));\n     _M_init_facet(new num_get<wchar_t>);\n     _M_init_facet(new num_put<wchar_t>);"}]}