{"sha": "47519a5687d48af4b932d54b0525fafcdc0e48d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc1MTlhNTY4N2Q0OGFmNGI5MzJkNTRiMDUyNWZhZmNkYzBlNDhkNg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-10-17T14:21:27Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-10-17T14:21:27Z"}, "message": "PR libstdc++/92124 fix incorrect container move assignment\n\nThe container requirements say that for move assignment \"All existing\nelements of [the target] are either move assigned or destroyed\". Some of\nour containers currently use __make_move_if_noexcept which makes the\nmove depend on whether the element type is nothrow move constructible.\nThis is incorrect, because the standard says we must move assign, not\nmove or copy depending on the move constructor.\n\nUse make_move_iterator instead so that we move unconditionally. This\nensures existing elements won't be copy assigned.\n\n\tPR libstdc++/92124\n\t* include/bits/forward_list.h\n\t(_M_move_assign(forward_list&&, false_type)): Do not use\n\t__make_move_if_noexcept, instead move unconditionally.\n\t* include/bits/stl_deque.h (_M_move_assign2(deque&&, false_type)):\n\tLikewise.\n\t* include/bits/stl_list.h (_M_move_assign(list&&, false_type)):\n\tLikewise.\n\t* include/bits/stl_vector.h (_M_move_assign(vector&&, false_type)):\n\tLikewise.\n\t* testsuite/23_containers/vector/92124.cc: New test.\n\nFrom-SVN: r277113", "tree": {"sha": "3613ae6f84da1b3ebd3fbbf1e137b4286ffb4dc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3613ae6f84da1b3ebd3fbbf1e137b4286ffb4dc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47519a5687d48af4b932d54b0525fafcdc0e48d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47519a5687d48af4b932d54b0525fafcdc0e48d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47519a5687d48af4b932d54b0525fafcdc0e48d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47519a5687d48af4b932d54b0525fafcdc0e48d6/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58baf7ab85cbb1068a651c96f7d56e2902ead6cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58baf7ab85cbb1068a651c96f7d56e2902ead6cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58baf7ab85cbb1068a651c96f7d56e2902ead6cc"}], "stats": {"total": 227, "additions": 219, "deletions": 8}, "files": [{"sha": "4c268795fdd1464e2900bce5094f02e74b256c9d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47519a5687d48af4b932d54b0525fafcdc0e48d6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47519a5687d48af4b932d54b0525fafcdc0e48d6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=47519a5687d48af4b932d54b0525fafcdc0e48d6", "patch": "@@ -1,3 +1,17 @@\n+2019-10-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/92124\n+\t* include/bits/forward_list.h\n+\t(_M_move_assign(forward_list&&, false_type)): Do not use\n+\t__make_move_if_noexcept, instead move unconditionally.\n+\t* include/bits/stl_deque.h (_M_move_assign2(deque&&, false_type)):\n+\tLikewise.\n+\t* include/bits/stl_list.h (_M_move_assign(list&&, false_type)):\n+\tLikewise.\n+\t* include/bits/stl_vector.h (_M_move_assign(vector&&, false_type)):\n+\tLikewise.\n+\t* testsuite/23_containers/vector/92124.cc: New test.\n+\n 2019-10-16  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/c++config (_GLIBCXX_BUILTIN_IS_SAME_AS): Define to"}, {"sha": "cab2ae788a75c68c0e33690621554f8a6f102f36", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47519a5687d48af4b932d54b0525fafcdc0e48d6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47519a5687d48af4b932d54b0525fafcdc0e48d6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=47519a5687d48af4b932d54b0525fafcdc0e48d6", "patch": "@@ -1336,8 +1336,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \telse\n \t  // The rvalue's allocator cannot be moved, or is not equal,\n \t  // so we need to individually move each element.\n-\t  this->assign(std::__make_move_if_noexcept_iterator(__list.begin()),\n-\t\t       std::__make_move_if_noexcept_iterator(__list.end()));\n+\t  this->assign(std::make_move_iterator(__list.begin()),\n+\t\t       std::make_move_iterator(__list.end()));\n       }\n \n       // Called by assign(_InputIterator, _InputIterator) if _Tp is"}, {"sha": "50491e76ff5e7ce8fdf749db309eef91d05c2fce", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47519a5687d48af4b932d54b0525fafcdc0e48d6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47519a5687d48af4b932d54b0525fafcdc0e48d6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=47519a5687d48af4b932d54b0525fafcdc0e48d6", "patch": "@@ -2256,8 +2256,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  {\n \t    // The rvalue's allocator cannot be moved and is not equal,\n \t    // so we need to individually move each element.\n-\t    _M_assign_aux(std::__make_move_if_noexcept_iterator(__x.begin()),\n-\t\t\t  std::__make_move_if_noexcept_iterator(__x.end()),\n+\t    _M_assign_aux(std::make_move_iterator(__x.begin()),\n+\t\t\t  std::make_move_iterator(__x.end()),\n \t\t\t  std::random_access_iterator_tag());\n \t    __x.clear();\n \t  }"}, {"sha": "328a79851a812dd0175a990a3ecd108b50765b7c", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47519a5687d48af4b932d54b0525fafcdc0e48d6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47519a5687d48af4b932d54b0525fafcdc0e48d6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=47519a5687d48af4b932d54b0525fafcdc0e48d6", "patch": "@@ -1957,8 +1957,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \telse\n \t  // The rvalue's allocator cannot be moved, or is not equal,\n \t  // so we need to individually move each element.\n-\t  _M_assign_dispatch(std::__make_move_if_noexcept_iterator(__x.begin()),\n-\t\t\t     std::__make_move_if_noexcept_iterator(__x.end()),\n+\t  _M_assign_dispatch(std::make_move_iterator(__x.begin()),\n+\t\t\t     std::make_move_iterator(__x.end()),\n \t\t\t     __false_type{});\n       }\n #endif"}, {"sha": "ff08b26669220017c1ce3366c60d97485f028e27", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47519a5687d48af4b932d54b0525fafcdc0e48d6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47519a5687d48af4b932d54b0525fafcdc0e48d6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=47519a5687d48af4b932d54b0525fafcdc0e48d6", "patch": "@@ -1828,8 +1828,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  {\n \t    // The rvalue's allocator cannot be moved and is not equal,\n \t    // so we need to individually move each element.\n-\t    this->assign(std::__make_move_if_noexcept_iterator(__x.begin()),\n-\t\t\t std::__make_move_if_noexcept_iterator(__x.end()));\n+\t    this->_M_assign_aux(std::make_move_iterator(__x.begin()),\n+\t\t\t        std::make_move_iterator(__x.end()),\n+\t\t\t\tstd::random_access_iterator_tag());\n \t    __x.clear();\n \t  }\n       }"}, {"sha": "6f8cf5560c160baced3e03d286c1e2091902c787", "filename": "libstdc++-v3/testsuite/23_containers/deque/92124.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47519a5687d48af4b932d54b0525fafcdc0e48d6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2F92124.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47519a5687d48af4b932d54b0525fafcdc0e48d6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2F92124.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2F92124.cc?ref=47519a5687d48af4b932d54b0525fafcdc0e48d6", "patch": "@@ -0,0 +1,49 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <deque>\n+#include <testsuite_allocator.h>\n+\n+struct X {\n+    X() = default;\n+    X(const X&) = default;\n+\n+    // Move constructor might throw\n+    X(X&&) noexcept(false) {}\n+\n+    // Tracking calls to assignment functions\n+    X& operator=(const X&) { throw 1; }\n+\n+    X& operator=(X&&) noexcept(true) { return *this; }\n+};\n+\n+void\n+test01()\n+{\n+  using A = __gnu_test::propagating_allocator<X, false>;\n+  A a1(1), a2(2);\n+  std::deque<X, A> v1(1, a1), v2(1, a2);\n+  v1 = std::move(v2);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "52a28073daf2057553f26e2de14b9819dbe32214", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/92124.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47519a5687d48af4b932d54b0525fafcdc0e48d6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2F92124.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47519a5687d48af4b932d54b0525fafcdc0e48d6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2F92124.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2F92124.cc?ref=47519a5687d48af4b932d54b0525fafcdc0e48d6", "patch": "@@ -0,0 +1,49 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <forward_list>\n+#include <testsuite_allocator.h>\n+\n+struct X {\n+    X() = default;\n+    X(const X&) = default;\n+\n+    // Move constructor might throw\n+    X(X&&) noexcept(false) {}\n+\n+    // Tracking calls to assignment functions\n+    X& operator=(const X&) { throw 1; }\n+\n+    X& operator=(X&&) noexcept(true) { return *this; }\n+};\n+\n+void\n+test01()\n+{\n+  using A = __gnu_test::propagating_allocator<X, false>;\n+  A a1(1), a2(2);\n+  std::forward_list<X, A> v1(1, a1), v2(1, a2);\n+  v1 = std::move(v2);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "117cb71201bb91515873639872c302214fbdafad", "filename": "libstdc++-v3/testsuite/23_containers/list/92124.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47519a5687d48af4b932d54b0525fafcdc0e48d6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F92124.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47519a5687d48af4b932d54b0525fafcdc0e48d6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F92124.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2F92124.cc?ref=47519a5687d48af4b932d54b0525fafcdc0e48d6", "patch": "@@ -0,0 +1,49 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <list>\n+#include <testsuite_allocator.h>\n+\n+struct X {\n+    X() = default;\n+    X(const X&) = default;\n+\n+    // Move constructor might throw\n+    X(X&&) noexcept(false) {}\n+\n+    // Tracking calls to assignment functions\n+    X& operator=(const X&) { throw 1; }\n+\n+    X& operator=(X&&) noexcept(true) { return *this; }\n+};\n+\n+void\n+test01()\n+{\n+  using A = __gnu_test::propagating_allocator<X, false>;\n+  A a1(1), a2(2);\n+  std::list<X, A> v1(1, a1), v2(1, a2);\n+  v1 = std::move(v2);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "3cb487d39f466754ae804061f12d8efb6f26699e", "filename": "libstdc++-v3/testsuite/23_containers/vector/92124.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47519a5687d48af4b932d54b0525fafcdc0e48d6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F92124.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47519a5687d48af4b932d54b0525fafcdc0e48d6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F92124.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F92124.cc?ref=47519a5687d48af4b932d54b0525fafcdc0e48d6", "patch": "@@ -0,0 +1,49 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <vector>\n+#include <testsuite_allocator.h>\n+\n+struct X {\n+    X() = default;\n+    X(const X&) = default;\n+\n+    // Move constructor might throw\n+    X(X&&) noexcept(false) {}\n+\n+    // Tracking calls to assignment functions\n+    X& operator=(const X&) { throw 1; }\n+\n+    X& operator=(X&&) noexcept(true) { return *this; }\n+};\n+\n+void\n+test01()\n+{\n+  using A = __gnu_test::propagating_allocator<X, false>;\n+  A a1(1), a2(2);\n+  std::vector<X, A> v1(1, a1), v2(1, a2);\n+  v1 = std::move(v2);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}