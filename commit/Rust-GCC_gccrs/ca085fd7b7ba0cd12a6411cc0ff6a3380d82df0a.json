{"sha": "ca085fd7b7ba0cd12a6411cc0ff6a3380d82df0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EwODVmZDdiN2JhMGNkMTJhNjQxMWNjMGZmNmEzMzgwZDgyZGYwYQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-09T12:37:32Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-09T12:37:32Z"}, "message": "re PR c++/17880 (-Wsequence-point doesn't warn inside if, while, do conditions, for beg/cond/end expressions etc.)\n\n2008-08-09  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR c/17880\n\t* c-typeck.c (digest_init): Call verify_sequence_points from here.\n\t(c_finish_return): Likewise.\n\t(c_start_case): Likewise.\n\t* c-common.c (warn_for_collisions_1): Use explicit location in\n\twarning.\n\t* c-parser.c (c_parser_condition): New. Call\n\tverify_sequence_points.\n\t(c_parser_paren_condition): Call c_parser_condition.\n\t(c_parser_for_statement): Call c_parser_condition.\ntestsuite/\n\t* gcc.dg/sequence-pt-pr17880.c: New.\n\nFrom-SVN: r138904", "tree": {"sha": "c4488aadaa6e95ea5ce61510a777e178059a7519", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4488aadaa6e95ea5ce61510a777e178059a7519"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca085fd7b7ba0cd12a6411cc0ff6a3380d82df0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca085fd7b7ba0cd12a6411cc0ff6a3380d82df0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca085fd7b7ba0cd12a6411cc0ff6a3380d82df0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca085fd7b7ba0cd12a6411cc0ff6a3380d82df0a/comments", "author": null, "committer": null, "parents": [{"sha": "98e48a7f11b14985b94ed8b86af0f97af1e7bda7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98e48a7f11b14985b94ed8b86af0f97af1e7bda7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98e48a7f11b14985b94ed8b86af0f97af1e7bda7"}], "stats": {"total": 117, "additions": 104, "deletions": 13}, "files": [{"sha": "12b9e4fafb9dd9cbe1eb19b7d9f4d5989f5ed7fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca085fd7b7ba0cd12a6411cc0ff6a3380d82df0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca085fd7b7ba0cd12a6411cc0ff6a3380d82df0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca085fd7b7ba0cd12a6411cc0ff6a3380d82df0a", "patch": "@@ -1,3 +1,16 @@\n+2008-08-09  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c/17880\n+\t* c-typeck.c (digest_init): Call verify_sequence_points from here.\n+\t(c_finish_return): Likewise.\n+\t(c_start_case): Likewise.\n+\t* c-common.c (warn_for_collisions_1): Use explicit location in\n+\twarning.\n+\t* c-parser.c (c_parser_condition): New. Call\n+\tverify_sequence_points.\n+\t(c_parser_paren_condition): Call c_parser_condition.\n+\t(c_parser_for_statement): Call c_parser_condition.\n+\n 2008-08-09  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 36901"}, {"sha": "bf75fe78e7bd47fd370188d12b0b16d9734d209e", "filename": "gcc/c-common.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca085fd7b7ba0cd12a6411cc0ff6a3380d82df0a/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca085fd7b7ba0cd12a6411cc0ff6a3380d82df0a/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=ca085fd7b7ba0cd12a6411cc0ff6a3380d82df0a", "patch": "@@ -1902,8 +1902,10 @@ warn_for_collisions_1 (tree written, tree writer, struct tlist *list,\n \t  && DECL_NAME (list->expr))\n \t{\n \t  warned_ids = new_tlist (warned_ids, written, NULL_TREE);\n-\t  warning (OPT_Wsequence_point, \"operation on %qE may be undefined\",\n-\t\t   list->expr);\n+\t  warning_at (EXPR_HAS_LOCATION (writer)\n+\t\t      ? EXPR_LOCATION (writer) : input_location,\n+\t\t      OPT_Wsequence_point, \"operation on %qE may be undefined\",\n+\t\t      list->expr);\n \t}\n       list = list->next;\n     }"}, {"sha": "02fc7853fce0becdcb842af667619b35af46bc64", "filename": "gcc/c-parser.c", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca085fd7b7ba0cd12a6411cc0ff6a3380d82df0a/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca085fd7b7ba0cd12a6411cc0ff6a3380d82df0a/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=ca085fd7b7ba0cd12a6411cc0ff6a3380d82df0a", "patch": "@@ -3791,6 +3791,23 @@ c_parser_statement_after_labels (c_parser *parser)\n   parser->in_if_block = in_if_block;\n }\n \n+/* Parse the condition from an if, do, while or for statements.  */\n+\n+static tree\n+c_parser_condition (c_parser *parser)\n+{\n+  location_t loc;\n+  tree cond;\n+  loc = c_parser_peek_token (parser)->location;\n+  cond = c_objc_common_truthvalue_conversion \n+    (c_parser_expression_conv (parser).value);\n+  if (CAN_HAVE_LOCATION_P (cond))\n+    SET_EXPR_LOCATION (cond, loc);\n+  if (warn_sequence_point)\n+    verify_sequence_points (cond);\n+  return cond;\n+}\n+\n /* Parse a parenthesized condition from an if, do or while statement.\n \n    condition:\n@@ -3799,15 +3816,10 @@ c_parser_statement_after_labels (c_parser *parser)\n static tree\n c_parser_paren_condition (c_parser *parser)\n {\n-  location_t loc;\n   tree cond;\n   if (!c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n     return error_mark_node;\n-  loc = c_parser_peek_token (parser)->location;\n-  cond = c_objc_common_truthvalue_conversion\n-    (c_parser_expression_conv (parser).value);\n-  if (CAN_HAVE_LOCATION_P (cond))\n-    SET_EXPR_LOCATION (cond, loc);\n+  cond = c_parser_condition (parser);\n   c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, \"expected %<)%>\");\n   return cond;\n }\n@@ -4073,18 +4085,14 @@ c_parser_for_statement (c_parser *parser)\n \t  c_parser_skip_until_found (parser, CPP_SEMICOLON, \"expected %<;%>\");\n \t}\n       /* Parse the loop condition.  */\n-      loc = c_parser_peek_token (parser)->location;\n       if (c_parser_next_token_is (parser, CPP_SEMICOLON))\n \t{\n \t  c_parser_consume_token (parser);\n \t  cond = NULL_TREE;\n \t}\n       else\n \t{\n-\t  tree ocond = c_parser_expression_conv (parser).value;\n-\t  cond = c_objc_common_truthvalue_conversion (ocond);\n-\t  if (CAN_HAVE_LOCATION_P (cond))\n-\t    SET_EXPR_LOCATION (cond, loc);\n+\t  cond = c_parser_condition (parser);\n \t  c_parser_skip_until_found (parser, CPP_SEMICOLON, \"expected %<;%>\");\n \t}\n       /* Parse the increment expression.  */"}, {"sha": "7646272dbd17a355ae3411bbeaead48a210a6a17", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca085fd7b7ba0cd12a6411cc0ff6a3380d82df0a/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca085fd7b7ba0cd12a6411cc0ff6a3380d82df0a/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=ca085fd7b7ba0cd12a6411cc0ff6a3380d82df0a", "patch": "@@ -4801,6 +4801,9 @@ digest_init (tree type, tree init, bool strict_string, int require_constant)\n \t}\n     }\n \n+  if (warn_sequence_point)\n+    verify_sequence_points (inside_init);\n+\n   /* Any type can be initialized\n      from an expression of the same type, optionally with braces.  */\n \n@@ -7166,6 +7169,9 @@ c_finish_return (tree retval)\n \t}\n \n       retval = build2 (MODIFY_EXPR, TREE_TYPE (res), res, t);\n+\n+      if (warn_sequence_point)\n+\tverify_sequence_points (retval);\n     }\n \n   ret_stmt = build_stmt (RETURN_EXPR, retval);\n@@ -7243,6 +7249,9 @@ c_start_case (tree exp)\n \t\t     \"converted to %<int%> in ISO C\");\n \n \t  exp = default_conversion (exp);\n+\n+\t  if (warn_sequence_point)\n+\t    verify_sequence_points (exp);\n \t}\n     }\n "}, {"sha": "4e3cf60c62b0df45b0c9d7b10013aab44a147681", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca085fd7b7ba0cd12a6411cc0ff6a3380d82df0a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca085fd7b7ba0cd12a6411cc0ff6a3380d82df0a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca085fd7b7ba0cd12a6411cc0ff6a3380d82df0a", "patch": "@@ -1,3 +1,8 @@\n+2008-08-09  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c/17880\n+\t* gcc.dg/sequence-pt-pr17880.c: New.\n+\n 2008-08-09  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c++/12242"}, {"sha": "df706e577fb5ad50691e3327aa0a743d370b3d07", "filename": "gcc/testsuite/gcc.dg/sequence-pt-pr17880.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca085fd7b7ba0cd12a6411cc0ff6a3380d82df0a/gcc%2Ftestsuite%2Fgcc.dg%2Fsequence-pt-pr17880.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca085fd7b7ba0cd12a6411cc0ff6a3380d82df0a/gcc%2Ftestsuite%2Fgcc.dg%2Fsequence-pt-pr17880.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsequence-pt-pr17880.c?ref=ca085fd7b7ba0cd12a6411cc0ff6a3380d82df0a", "patch": "@@ -0,0 +1,54 @@\n+/* PR 17880 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wsequence-point\" } */\n+\n+int\n+foo (int x)\n+{\n+  unsigned int a;\n+  int b;\n+\n+  b = (a += 5) > a;  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  b = (a += 5) + a == 10;  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  b = (a -= 5) > a;  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  b = (a -= 5) + a == 10;  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  b = a-- > a;  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  b = a-- + a == 10;  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  b = ++a > a;  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  b = ++a + a == 10;  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+\n+  if ((a += 5) > a) return -1;  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  if ((a += 5) + a == 10) return -1;  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  if ((a -= 5) > a) return -1;  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  if ((a -= 5) + a == 10) return -1;  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  if (a-- > a) return -1;  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  if (a-- + a == 10) return -1;  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  if (++a > a) return -1;  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  if (++a + a == 10) return -1;  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  do {} while ((a += 5) > a);  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  while ((a += 5) > a);  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  for ((a += 5) > a;;);  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  for (b = (a += 5) > a;;);  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  for (; (a += 5) > a;);  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  for (;; b = (a += 5) > a);  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  for (;; a++ + a++);  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  if (a) a++ - a--;    /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  ((a +=5) > a) ? a : b; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  return (a++ - a--); /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+}\n+\n+void bar (int i)\n+{\n+  int a = i++ - i++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+} \n+\n+void baz (int i)\n+{\n+  switch (i++ + i++)  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+    {\n+    case 1:\n+      i++ - i++;  /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+    case 2:\n+      break;\n+    }\n+}"}]}