{"sha": "ea2722934fc8238e4a9eb41586ca106448faa940", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEyNzIyOTM0ZmM4MjM4ZTRhOWViNDE1ODZjYTEwNjQ0OGZhYTk0MA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-08-18T21:48:58Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-08-18T21:52:22Z"}, "message": "c++: alias template template_info setting\n\nDuring the construction of alias templates we can alter its\ntemplate_info.  This is really weird, because that's morally immutable\ndata.  In this case it's ok, but let's not create a duplicate\ntemplate_info, and add asserts to make sure it is changing in exactly\nthe way we expect.\n\n\tgcc/cp/\n\t* cp-tree.h (SET_TYPE_TEMPLTE_INFO): Do not deal with ALIAS templates.\n\t* pt.c (lookup_template_class_1): Special-case alias template\n\ttemplate_info setting.", "tree": {"sha": "ce2fde11745762f99642d927dde02cf4bb91e4cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce2fde11745762f99642d927dde02cf4bb91e4cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea2722934fc8238e4a9eb41586ca106448faa940", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea2722934fc8238e4a9eb41586ca106448faa940", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea2722934fc8238e4a9eb41586ca106448faa940", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea2722934fc8238e4a9eb41586ca106448faa940/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94bedeaf694c728607a718d599edb4d74a2813c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94bedeaf694c728607a718d599edb4d74a2813c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94bedeaf694c728607a718d599edb4d74a2813c0"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "44531cd86dc74179232747062700cec86bc71816", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2722934fc8238e4a9eb41586ca106448faa940/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2722934fc8238e4a9eb41586ca106448faa940/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ea2722934fc8238e4a9eb41586ca106448faa940", "patch": "@@ -3485,13 +3485,12 @@ struct GTY(()) lang_decl {\n    ? TYPE_ALIAS_TEMPLATE_INFO (NODE)\t\t\t\t\t\\\n    : TYPE_TEMPLATE_INFO (NODE))\n \n-/* Set the template information for an ENUMERAL_, RECORD_, or\n-   UNION_TYPE to VAL.  */\n+/* Set the template information for a non-alias n ENUMERAL_, RECORD_,\n+   or UNION_TYPE to VAL.  ALIAS's are dealt with separately.  */\n #define SET_TYPE_TEMPLATE_INFO(NODE, VAL)\t\t\t\t\\\n-  (TREE_CODE (NODE) == ENUMERAL_TYPE\t\t\t\t\t\\\n-   || (CLASS_TYPE_P (NODE) && !TYPE_ALIAS_P (NODE))\t\t\t\\\n-   ? (TYPE_LANG_SLOT_1 (NODE) = (VAL))\t\t\t\t\\\n-   : (DECL_TEMPLATE_INFO (TYPE_NAME (NODE)) = (VAL)))\n+  (gcc_checking_assert (TREE_CODE (NODE) == ENUMERAL_TYPE\t\t\\\n+\t\t\t|| (CLASS_TYPE_P (NODE) && !TYPE_ALIAS_P (NODE))), \\\n+   (TYPE_LANG_SLOT_1 (NODE) = (VAL)))\t\t\t\t\t\\\n \n #define TI_TEMPLATE(NODE) \\\n   ((struct tree_template_info*)TEMPLATE_INFO_CHECK (NODE))->tmpl"}, {"sha": "edaefcf505f12c9cfcc7684b625207de84c6fc64", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2722934fc8238e4a9eb41586ca106448faa940/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2722934fc8238e4a9eb41586ca106448faa940/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ea2722934fc8238e4a9eb41586ca106448faa940", "patch": "@@ -10088,8 +10088,26 @@ lookup_template_class_1 (tree d1, tree arglist, tree in_decl, tree context,\n \t    }\n \t}\n \n-      // Build template info for the new specialization.\n-      SET_TYPE_TEMPLATE_INFO (t, build_template_info (found, arglist));\n+      /* Build template info for the new specialization.  */\n+      if (TYPE_ALIAS_P (t))\n+\t{\n+\t  /* This is constructed during instantiation of the alias\n+\t     decl.  But for member templates of template classes, that\n+\t     is not correct as we need to refer to the partially\n+\t     instantiated template, not the most general template.\n+\t     The incorrect knowledge will not have escaped this\n+\t     instantiation process, so we're good just updating the\n+\t     template_info we made then.  */\n+\t  tree ti = DECL_TEMPLATE_INFO (TYPE_NAME (t));\n+\t  gcc_checking_assert (template_args_equal (TI_ARGS (ti), arglist));\n+\t  if (TI_TEMPLATE (ti) != found)\n+\t    {\n+\t      gcc_checking_assert (DECL_TI_TEMPLATE (found) == TI_TEMPLATE (ti));\n+\t      TI_TEMPLATE (ti) = found;\n+\t    }\n+\t}\n+      else\n+\tSET_TYPE_TEMPLATE_INFO (t, build_template_info (found, arglist));\n \n       elt.spec = t;\n       slot = type_specializations->find_slot_with_hash (&elt, hash, INSERT);"}]}