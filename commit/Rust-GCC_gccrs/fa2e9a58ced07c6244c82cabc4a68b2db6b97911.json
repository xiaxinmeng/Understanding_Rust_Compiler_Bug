{"sha": "fa2e9a58ced07c6244c82cabc4a68b2db6b97911", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEyZTlhNThjZWQwN2M2MjQ0YzgyY2FiYzRhNjhiMmRiNmI5NzkxMQ==", "commit": {"author": {"name": "Naveen H.S", "email": "Naveen.Hurugalawadi@caviumnetworks.com", "date": "2013-03-21T07:47:12Z"}, "committer": {"name": "Naveen H.S", "email": "naveenh@gcc.gnu.org", "date": "2013-03-21T07:47:12Z"}, "message": "aarch64-simd.md (simd_fabd): New Attribute.\n\n2013-03-21   Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n\n\t* config/aarch64/aarch64-simd.md (simd_fabd): New Attribute.\n\t(abd<mode>_3): New pattern.\n\t(aba<mode>_3): New pattern.\n\t(fabd<mode>_3): New pattern.\n\n2013-03-21   Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n\n\t* gcc.target/aarch64/vect.c: Test and result vector added\n\tfor sabd and saba instructions.\n\t* gcc.target/aarch64/vect-compile.c: Check for sabd and saba\n\tinstructions in assembly.\n\t* gcc.target/aarch64/vect.x: Add sabd and saba test functions.\n\t* gcc.target/aarch64/vect-fp.c: Test and result vector added\n\tfor fabd instruction.\n\t* gcc.target/aarch64/vect-fp-compile.c: Check for fabd \n\tinstruction in assembly.\n\t* gcc.target/aarch64/vect-fp.x: Add fabd test function.\n\nFrom-SVN: r196858", "tree": {"sha": "c62d793f4265fa90a60662316a61639198ea22ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c62d793f4265fa90a60662316a61639198ea22ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa2e9a58ced07c6244c82cabc4a68b2db6b97911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa2e9a58ced07c6244c82cabc4a68b2db6b97911", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa2e9a58ced07c6244c82cabc4a68b2db6b97911", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa2e9a58ced07c6244c82cabc4a68b2db6b97911/comments", "author": null, "committer": null, "parents": [{"sha": "50ce6f88fd0db1a949f2e963f9898b323daf72e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50ce6f88fd0db1a949f2e963f9898b323daf72e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50ce6f88fd0db1a949f2e963f9898b323daf72e9"}], "stats": {"total": 108, "additions": 106, "deletions": 2}, "files": [{"sha": "0c7ce7a5abfd023a2324950c10ebaf791325635b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa2e9a58ced07c6244c82cabc4a68b2db6b97911/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa2e9a58ced07c6244c82cabc4a68b2db6b97911/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa2e9a58ced07c6244c82cabc4a68b2db6b97911", "patch": "@@ -1,3 +1,10 @@\n+2013-03-21   Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n+\n+\t* config/aarch64/aarch64-simd.md (simd_fabd): New Attribute.\n+\t(abd<mode>_3): New pattern.\n+\t(aba<mode>_3): New pattern.\n+\t(fabd<mode>_3): New pattern.\n+\n 2013-03-21   Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n \n \t* config/aarch64/aarch64-elf.h (REGISTER_PREFIX): Remove."}, {"sha": "92dcfc0c57b8e2ef4874f72581e8e8452dcd6e5e", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa2e9a58ced07c6244c82cabc4a68b2db6b97911/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa2e9a58ced07c6244c82cabc4a68b2db6b97911/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=fa2e9a58ced07c6244c82cabc4a68b2db6b97911", "patch": "@@ -44,6 +44,7 @@\n ; simd_dup              duplicate element.\n ; simd_dupgp            duplicate general purpose register.\n ; simd_ext              bitwise extract from pair.\n+; simd_fabd             floating absolute difference and accumulate.\n ; simd_fadd             floating point add/sub.\n ; simd_fcmp             floating point compare.\n ; simd_fcvti            floating point convert to integer.\n@@ -147,6 +148,7 @@\n    simd_dup,\\\n    simd_dupgp,\\\n    simd_ext,\\\n+   simd_fabd,\\\n    simd_fadd,\\\n    simd_fcmp,\\\n    simd_fcvti,\\\n@@ -520,6 +522,40 @@\n    (set_attr \"simd_mode\" \"<MODE>\")]\n )\n \n+(define_insn \"abd<mode>_3\"\n+  [(set (match_operand:VDQ_BHSI 0 \"register_operand\" \"=w\")\n+\t(abs:VDQ_BHSI (minus:VDQ_BHSI\n+\t\t       (match_operand:VDQ_BHSI 1 \"register_operand\" \"w\")\n+\t\t       (match_operand:VDQ_BHSI 2 \"register_operand\" \"w\"))))]\n+  \"TARGET_SIMD\"\n+  \"sabd\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n+  [(set_attr \"simd_type\" \"simd_abd\")\n+   (set_attr \"simd_mode\" \"<MODE>\")]\n+)\n+\n+(define_insn \"aba<mode>_3\"\n+  [(set (match_operand:VDQ_BHSI 0 \"register_operand\" \"=w\")\n+\t(plus:VDQ_BHSI (abs:VDQ_BHSI (minus:VDQ_BHSI\n+\t\t\t (match_operand:VDQ_BHSI 1 \"register_operand\" \"w\")\n+\t\t\t (match_operand:VDQ_BHSI 2 \"register_operand\" \"w\")))\n+\t\t       (match_operand:VDQ_BHSI 3 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD\"\n+  \"saba\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n+  [(set_attr \"simd_type\" \"simd_abd\")\n+   (set_attr \"simd_mode\" \"<MODE>\")]\n+)\n+\n+(define_insn \"fabd<mode>_3\"\n+  [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n+\t(abs:VDQF (minus:VDQF\n+\t\t   (match_operand:VDQF 1 \"register_operand\" \"w\")\n+\t\t   (match_operand:VDQF 2 \"register_operand\" \"w\"))))]\n+  \"TARGET_SIMD\"\n+  \"fabd\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n+  [(set_attr \"simd_type\" \"simd_fabd\")\n+   (set_attr \"simd_mode\" \"<MODE>\")]\n+)\n+\n (define_insn \"and<mode>3\"\n   [(set (match_operand:VDQ 0 \"register_operand\" \"=w\")\n         (and:VDQ (match_operand:VDQ 1 \"register_operand\" \"w\")"}, {"sha": "9ca281b6fe1a1dc2f3c5509e16b4803c19424093", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa2e9a58ced07c6244c82cabc4a68b2db6b97911/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa2e9a58ced07c6244c82cabc4a68b2db6b97911/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fa2e9a58ced07c6244c82cabc4a68b2db6b97911", "patch": "@@ -1,3 +1,16 @@\n+2013-03-21   Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n+\n+\t* gcc.target/aarch64/vect.c: Test and result vector added\n+\tfor sabd and saba instructions.\n+\t* gcc.target/aarch64/vect-compile.c: Check for sabd and saba\n+\tinstructions in assembly.\n+\t* gcc.target/aarch64/vect.x: Add sabd and saba test functions.\n+\t* gcc.target/aarch64/vect-fp.c: Test and result vector added\n+\tfor fabd instruction.\n+\t* gcc.target/aarch64/vect-fp-compile.c: Check for fabd\n+\tinstruction in assembly.\n+\t* gcc.target/aarch64/vect-fp.x: Add fabd test function.\n+\n 2013-03-20  Jeff Law  <law@redhat.com>\n \n \t* g++.dg/tree-ssa/ssa-dom.C: New test."}, {"sha": "33130aab55d6ae14423291173e68d80ee49fd331", "filename": "gcc/testsuite/gcc.target/aarch64/vect-compile.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa2e9a58ced07c6244c82cabc4a68b2db6b97911/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-compile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa2e9a58ced07c6244c82cabc4a68b2db6b97911/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-compile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-compile.c?ref=fa2e9a58ced07c6244c82cabc4a68b2db6b97911", "patch": "@@ -16,5 +16,7 @@\n /* { dg-final { scan-assembler \"uminv\" } } */\n /* { dg-final { scan-assembler \"smaxv\" } } */\n /* { dg-final { scan-assembler \"sminv\" } } */\n+/* { dg-final { scan-assembler \"sabd\" } } */\n+/* { dg-final { scan-assembler \"saba\" } } */\n /* { dg-final { scan-assembler-times \"addv\" 2} } */\n /* { dg-final { scan-assembler-times \"addp\" 2} } */"}, {"sha": "47ef100e87bda15a2eb0ebf60c7cbd6d64836657", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fp-compile.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa2e9a58ced07c6244c82cabc4a68b2db6b97911/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fp-compile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa2e9a58ced07c6244c82cabc4a68b2db6b97911/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fp-compile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fp-compile.c?ref=fa2e9a58ced07c6244c82cabc4a68b2db6b97911", "patch": "@@ -11,3 +11,4 @@\n /* { dg-final { scan-assembler \"fdiv\\\\tv\" } } */\n /* { dg-final { scan-assembler \"fneg\\\\tv\" } } */\n /* { dg-final { scan-assembler \"fabs\\\\tv\" } } */\n+/* { dg-final { scan-assembler \"fabd\\\\tv\" } } */"}, {"sha": "bcf9d9d7530492b59e4b65b19aafd386c327cdd8", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fp.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa2e9a58ced07c6244c82cabc4a68b2db6b97911/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa2e9a58ced07c6244c82cabc4a68b2db6b97911/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fp.c?ref=fa2e9a58ced07c6244c82cabc4a68b2db6b97911", "patch": "@@ -117,6 +117,16 @@ int main (void)\n \t\t\t    9.0, 10.0, 11.0, 12.0,\n \t\t\t    13.0, 14.0, 15.0, 16.0 };\n \n+  F32  fabd_F32_vector[] = { 1.0f, 1.0f, 1.0f, 1.0f,\n+\t\t\t     1.0f, 1.0f, 1.0f, 1.0f,\n+\t\t\t     1.0f, 1.0f, 1.0f, 1.0f,\n+\t\t\t     1.0f, 1.0f, 1.0f, 1.0f };\n+\n+  F64  fabd_F64_vector[] = { 1.0, 1.0, 1.0, 1.0,\n+\t\t\t     1.0, 1.0, 1.0, 1.0,\n+\t\t\t     1.0, 1.0, 1.0, 1.0,\n+\t\t\t     1.0, 1.0, 1.0, 1.0 };\n+\n   /* Setup input vectors.  */\n   for (i=1; i<=16; i++)\n     {\n@@ -132,6 +142,7 @@ int main (void)\n   TEST (div, 3);\n   TEST (neg, 2);\n   TEST (abs, 2);\n+  TEST (fabd, 3);\n \n   return 0;\n }"}, {"sha": "82d1b1c50ee68eb2439c30ab008c06313f1b8535", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fp.x", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa2e9a58ced07c6244c82cabc4a68b2db6b97911/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fp.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa2e9a58ced07c6244c82cabc4a68b2db6b97911/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fp.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fp.x?ref=fa2e9a58ced07c6244c82cabc4a68b2db6b97911", "patch": "@@ -7,13 +7,23 @@ typedef double *__restrict__ pRF64;\n extern float fabsf (float);\n extern double fabs (double);\n \n+#define DEF3a(fname, type, op) \\\n+\t\t\t void  fname##_##type (pR##type a,   \\\n+\t\t\t\t\t       pR##type b,   \\\n+\t\t\t\t\t       pR##type c)   \\\n+\t\t\t {\t\t\t\t     \\\n+\t\t\t   int i;\t\t\t     \\\n+\t\t\t   for (i = 0; i < 16; i++)\t     \\\n+\t\t\t     a[i] = op (b[i] - c[i]);\t     \\\n+\t\t\t }\n+\n #define DEF3(fname, type, op) \\\n \t\t\tvoid  fname##_##type (pR##type a,   \\\n \t\t\t\t\t      pR##type b,   \\\n \t\t\t\t\t      pR##type c)   \\\n \t\t\t{\t\t\t\t    \\\n \t\t\t  int i; \t\t\t    \\\n-\t\t\t  for (i=0; i<16; i++)\t\t    \\\n+\t\t\t  for (i = 0; i < 16; i++)\t    \\\n \t\t\t    a[i] = b[i] op c[i];\t    \\\n \t\t\t}\n \n@@ -22,11 +32,15 @@ extern double fabs (double);\n \t\t\t\t\t     pR##type b) \\\n \t\t\t{\t\t\t\t  \\\n \t\t\t  int i; \t\t\t  \\\n-\t\t\t  for (i=0; i<16; i++)\t\t  \\\n+\t\t\t  for (i = 0; i < 16; i++)\t  \\\n \t\t\t    a[i] = op(b[i]);\t\t  \\\n \t\t\t}\n \n \n+#define DEFN3a(fname, op) \\\n+\t\t DEF3a (fname, F32, op) \\\n+\t\t DEF3a (fname, F64, op)\n+\n #define DEFN3(fname, op) \\\n \t\tDEF3 (fname, F32, op) \\\n \t\tDEF3 (fname, F64, op)\n@@ -42,3 +56,5 @@ DEFN3 (div, /)\n DEFN2 (neg, -)\n DEF2 (abs, F32, fabsf)\n DEF2 (abs, F64, fabs)\n+DEF3a (fabd, F32, fabsf)\n+DEF3a (fabd, F64, fabs)"}, {"sha": "ff70cae43b4c483442686f6e824c723b3ce3bc01", "filename": "gcc/testsuite/gcc.target/aarch64/vect.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa2e9a58ced07c6244c82cabc4a68b2db6b97911/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa2e9a58ced07c6244c82cabc4a68b2db6b97911/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect.c?ref=fa2e9a58ced07c6244c82cabc4a68b2db6b97911", "patch": "@@ -55,6 +55,8 @@ int main (void)\n   int smin_vector[] = {0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15};\n   unsigned int umax_vector[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n   unsigned int umin_vector[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n+  int sabd_vector[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n+  int saba_vector[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n   int reduce_smax_value = 0;\n   int reduce_smin_value = -15;\n   unsigned int reduce_umax_value = 15;\n@@ -81,6 +83,8 @@ int main (void)\n   TEST (smin, s);\n   TEST (umax, u);\n   TEST (umin, u);\n+  TEST (sabd, s);\n+  TEST (saba, s);\n   TESTV (reduce_smax, s);\n   TESTV (reduce_smin, s);\n   TESTV (reduce_umax, u);"}, {"sha": "c0f79b50b80e8f983bf62c42cb7ced810303f997", "filename": "gcc/testsuite/gcc.target/aarch64/vect.x", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa2e9a58ced07c6244c82cabc4a68b2db6b97911/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa2e9a58ced07c6244c82cabc4a68b2db6b97911/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect.x?ref=fa2e9a58ced07c6244c82cabc4a68b2db6b97911", "patch": "@@ -138,3 +138,17 @@ long long reduce_add_s64 (pRINT64 a)\n \n   return s;\n }\n+\n+void sabd (pRINT a, pRINT b, pRINT c)\n+{\n+  int i;\n+  for (i = 0; i < 16; i++)\n+    c[i] = abs (a[i] - b[i]);\n+}\n+\n+void saba (pRINT a, pRINT b, pRINT c)\n+{\n+  int i;\n+  for (i = 0; i < 16; i++)\n+    c[i] += abs (a[i] - b[i]);\n+}"}]}