{"sha": "1df5fce42a295ae8cb34c6a4aae30814679b0b59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRmNWZjZTQyYTI5NWFlOGNiMzRjNmE0YWFlMzA4MTQ2NzliMGI1OQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-06-13T20:32:10Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-06-13T20:32:10Z"}, "message": "compiler: avoid introducing redundant write barriers\n    \n    The traversal used by the write barrier insertion phase can sometimes\n    wind up visiting new statements inserted during the traversal, which\n    then results in duplicate / redundant write barrier guards. Example\n    program to reproduce:\n    \n      package small\n      type S struct {\n            N *S\n            K int\n      }\n      var G *S = &S{N: nil, K: 101}\n    \n    This patch changes the traversal code to keep track of statements\n    already added and avoid processing them again later in the traversal.\n    \n    Fixes golang/go#25867\n    \n    Reviewed-on: https://go-review.googlesource.com/118637\n\nFrom-SVN: r261568", "tree": {"sha": "0dd19ecdee4854a48eb38384caaf3269c7fc8e20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dd19ecdee4854a48eb38384caaf3269c7fc8e20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1df5fce42a295ae8cb34c6a4aae30814679b0b59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1df5fce42a295ae8cb34c6a4aae30814679b0b59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1df5fce42a295ae8cb34c6a4aae30814679b0b59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1df5fce42a295ae8cb34c6a4aae30814679b0b59/comments", "author": null, "committer": null, "parents": [{"sha": "a7bf6c088934ef39a937069fca7408c7f540c551", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7bf6c088934ef39a937069fca7408c7f540c551", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7bf6c088934ef39a937069fca7408c7f540c551"}], "stats": {"total": 39, "additions": 29, "deletions": 10}, "files": [{"sha": "6013430593c91ab84d21e49d31db899d407345b6", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df5fce42a295ae8cb34c6a4aae30814679b0b59/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df5fce42a295ae8cb34c6a4aae30814679b0b59/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=1df5fce42a295ae8cb34c6a4aae30814679b0b59", "patch": "@@ -1,4 +1,4 @@\n-1f07926263b6d14edb6abd6a00e6385190d30d0e\n+c3ef5bbf4e4271216b6f22621269d458599e8087\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "eb31aa20f51a25211cdfe5eddc40c7d34a848cba", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df5fce42a295ae8cb34c6a4aae30814679b0b59/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df5fce42a295ae8cb34c6a4aae30814679b0b59/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=1df5fce42a295ae8cb34c6a4aae30814679b0b59", "patch": "@@ -8444,6 +8444,9 @@ Traverse::function_declaration(Named_object*)\n void\n Statement_inserter::insert(Statement* s)\n {\n+  if (this->statements_added_ != NULL)\n+    this->statements_added_->insert(s);\n+\n   if (this->block_ != NULL)\n     {\n       go_assert(this->pindex_ != NULL);"}, {"sha": "6511599f95aa9ba24a6a1a39f5831db16a9d69af", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df5fce42a295ae8cb34c6a4aae30814679b0b59/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df5fce42a295ae8cb34c6a4aae30814679b0b59/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=1df5fce42a295ae8cb34c6a4aae30814679b0b59", "patch": "@@ -3419,19 +3419,24 @@ class Traverse\n class Statement_inserter\n {\n  public:\n+  typedef Unordered_set(Statement*) Statements;\n+\n   // Empty constructor.\n   Statement_inserter()\n-    : block_(NULL), pindex_(NULL), gogo_(NULL), var_(NULL)\n+      : block_(NULL), pindex_(NULL), gogo_(NULL), var_(NULL),\n+        statements_added_(NULL)\n   { }\n \n   // Constructor for a statement in a block.\n-  Statement_inserter(Block* block, size_t *pindex)\n-    : block_(block), pindex_(pindex), gogo_(NULL), var_(NULL)\n+  Statement_inserter(Block* block, size_t *pindex, Statements *added = NULL)\n+      : block_(block), pindex_(pindex), gogo_(NULL), var_(NULL),\n+        statements_added_(added)\n   { }\n \n   // Constructor for a global variable.\n-  Statement_inserter(Gogo* gogo, Variable* var)\n-    : block_(NULL), pindex_(NULL), gogo_(gogo), var_(var)\n+  Statement_inserter(Gogo* gogo, Variable* var, Statements *added = NULL)\n+      : block_(NULL), pindex_(NULL), gogo_(gogo), var_(var),\n+        statements_added_(added)\n   { go_assert(var->is_global()); }\n \n   // We use the default copy constructor and assignment operator.\n@@ -3451,6 +3456,8 @@ class Statement_inserter\n   Gogo* gogo_;\n   // The global variable, when looking at an initializer expression.\n   Variable* var_;\n+  // If non-null, a set to record new statements inserted (non-owned).\n+  Statements* statements_added_;\n };\n \n // When translating the gogo IR into the backend data structure, this"}, {"sha": "99f467ef90d7a30d573ada789c836e3b3bb1853f", "filename": "gcc/go/gofrontend/wb.cc", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df5fce42a295ae8cb34c6a4aae30814679b0b59/gcc%2Fgo%2Fgofrontend%2Fwb.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df5fce42a295ae8cb34c6a4aae30814679b0b59/gcc%2Fgo%2Fgofrontend%2Fwb.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fwb.cc?ref=1df5fce42a295ae8cb34c6a4aae30814679b0b59", "patch": "@@ -213,7 +213,7 @@ class Write_barriers : public Traverse\n  public:\n   Write_barriers(Gogo* gogo)\n     : Traverse(traverse_functions | traverse_variables | traverse_statements),\n-      gogo_(gogo), function_(NULL)\n+      gogo_(gogo), function_(NULL), statements_added_()\n   { }\n \n   int\n@@ -230,6 +230,8 @@ class Write_barriers : public Traverse\n   Gogo* gogo_;\n   // Current function.\n   Function* function_;\n+  // Statements introduced.\n+  Statement_inserter::Statements statements_added_;\n };\n \n // Traverse a function.  Just record it for later.\n@@ -298,9 +300,10 @@ Write_barriers::variable(Named_object* no)\n   Location loc = init->location();\n   Expression* ref = Expression::make_var_reference(no, loc);\n \n-  Statement_inserter inserter(this->gogo_, var);\n+  Statement_inserter inserter(this->gogo_, var, &this->statements_added_);\n   Statement* s = this->gogo_->assign_with_write_barrier(NULL, NULL, &inserter,\n \t\t\t\t\t\t\tref, init, loc);\n+  this->statements_added_.insert(s);\n \n   var->add_preinit_statement(this->gogo_, s);\n   var->clear_init();\n@@ -313,6 +316,9 @@ Write_barriers::variable(Named_object* no)\n int\n Write_barriers::statement(Block* block, size_t* pindex, Statement* s)\n {\n+  if (this->statements_added_.find(s) != this->statements_added_.end())\n+    return TRAVERSE_SKIP_COMPONENTS;\n+\n   switch (s->classification())\n     {\n     default:\n@@ -355,7 +361,7 @@ Write_barriers::statement(Block* block, size_t* pindex, Statement* s)\n \n \tFunction* function = this->function_;\n \tLocation loc = init->location();\n-\tStatement_inserter inserter(block, pindex);\n+\tStatement_inserter inserter(block, pindex, &this->statements_added_);\n \n \t// Insert the variable declaration statement with no\n \t// initializer, so that the variable exists.\n@@ -370,6 +376,7 @@ Write_barriers::statement(Block* block, size_t* pindex, Statement* s)\n \t\t\t\t\t\t\t\t   &inserter,\n \t\t\t\t\t\t\t\t   ref, init,\n \t\t\t\t\t\t\t\t   loc);\n+        this->statements_added_.insert(assign);\n \n \t// Replace the old variable declaration statement with the new\n \t// initialization.\n@@ -391,12 +398,14 @@ Write_barriers::statement(Block* block, size_t* pindex, Statement* s)\n \t// Change the assignment to use a write barrier.\n \tFunction* function = this->function_;\n \tLocation loc = as->location();\n-\tStatement_inserter inserter = Statement_inserter(block, pindex);\n+\tStatement_inserter inserter =\n+            Statement_inserter(block, pindex, &this->statements_added_);\n \tStatement* assign = this->gogo_->assign_with_write_barrier(function,\n \t\t\t\t\t\t\t\t   block,\n \t\t\t\t\t\t\t\t   &inserter,\n \t\t\t\t\t\t\t\t   lhs, rhs,\n \t\t\t\t\t\t\t\t   loc);\n+        this->statements_added_.insert(assign);\n \tblock->replace_statement(*pindex, assign);\n       }\n       break;"}]}