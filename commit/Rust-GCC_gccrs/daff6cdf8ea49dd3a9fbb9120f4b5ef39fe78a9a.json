{"sha": "daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFmZjZjZGY4ZWE0OWRkM2E5ZmJiOTEyMGY0YjVlZjM5ZmU3OGE5YQ==", "commit": {"author": {"name": "Steven Munroe", "email": "munroesj@gcc.gnu.org", "date": "2017-10-30T18:32:07Z"}, "committer": {"name": "Steven Munroe", "email": "munroesj@gcc.gnu.org", "date": "2017-10-30T18:32:07Z"}, "message": "Part 2/2 for contributing PPC64LE support for X86 SSE2 instrisics. \nThis patch includes testsuite/gcc.target tests for the intrinsics\nin emmintrin.h.  For these tests I added -Wno-psabi to dg-options\nto suppress warnings associated with the vector ABI change in GCC5.\n\nFrom-SVN: r254235", "tree": {"sha": "aca3b516d9fd02459e7945a715fee4d1d5e8f127", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aca3b516d9fd02459e7945a715fee4d1d5e8f127"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/comments", "author": null, "committer": null, "parents": [{"sha": "09359ea364bf042d6508b6098166bdaf9c61e254", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09359ea364bf042d6508b6098166bdaf9c61e254", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09359ea364bf042d6508b6098166bdaf9c61e254"}], "stats": {"total": 6537, "additions": 6537, "deletions": 0}, "files": [{"sha": "93d2655cbcff702dd9ace5ce87547b0d9f6cef5c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -1,3 +1,111 @@\n+2017-10-30  Steven Munroe  <munroesj@gcc.gnu.org>\n+\n+\t* sse2-check.h: New file.\n+\t* sse2-addpd-1.c: New file.\n+\t* sse2-addsd-1.c: New file.\n+\t* sse2-andnpd-1.c: New file.\n+\t* sse2-andpd-1.c: New file.\n+\t* sse2-cmppd-1.c: New file.\n+\t* sse2-cmpsd-1.c: New file.\n+\t* sse2-comisd-1.c: New file.\n+\t* sse2-comisd-2.c: New file.\n+\t* sse2-comisd-3.c: New file.\n+\t* sse2-comisd-4.c: New file.\n+\t* sse2-comisd-5.c: New file.\n+\t* sse2-comisd-6.c: New file.\n+\t* sse2-cvtdq2pd-1.c: New file.\n+\t* sse2-cvtdq2ps-1.c: New file.\n+\t* sse2-cvtpd2dq-1.c: New file.\n+\t* sse2-cvtpd2ps-1.c: New file.\n+\t* sse2-cvtps2dq-1.c: New file.\n+\t* sse2-cvtps2pd-1.c: New file.\n+\t* sse2-cvtsd2si-1.c: New file.\n+\t* sse2-cvtsd2si-2.c: New file.\n+\t* sse2-cvtsd2ss-1.c: New file.\n+\t* sse2-cvtsi2sd-1.c: New file.\n+\t* sse2-cvtsi2sd-2.c: New file.\n+\t* sse2-cvtss2sd-1.c: New file.\n+\t* sse2-cvttpd2dq-1.c: New file.\n+\t* sse2-cvttps2dq-1.c: New file.\n+\t* sse2-cvttsd2si-1.c: New file.\n+\t* sse2-cvttsd2si-2.c: New file.\n+\t* sse2-divpd-1.c: New file.\n+\t* sse2-divsd-1.c: New file.\n+\t* sse2-maxpd-1.c: New file.\n+\t* sse2-maxsd-1.c: New file.\n+\t* sse2-minpd-1.c: New file.\n+\t* sse2-minsd-1.c: New file.\n+\t* sse2-mmx.c: New file.\n+\t* sse2-movhpd-1.c: New file.\n+\t* sse2-movhpd-2.c: New file.\n+\t* sse2-movlpd-1.c: New file.\n+\t* sse2-movlpd-2.c: New file.\n+\t* sse2-movmskpd-1.c: New file.\n+\t* sse2-movq-1.c: New file.\n+\t* sse2-movq-2.c: New file.\n+\t* sse2-movq-3.c: New file.\n+\t* sse2-movsd-1.c: New file.\n+\t* sse2-movsd-2.c: New file.\n+\t* sse2-movsd-3.c: New file.\n+\t* sse2-mulpd-1.c: New file.\n+\t* sse2-mulsd-1.c: New file.\n+\t* sse2-orpd-1.c: New file.\n+\t* sse2-packssdw-1.c: New file.\n+\t* sse2-packsswb-1.c: New file.\n+\t* sse2-packuswb-1.c: New file.\n+\t* sse2-paddb-1.c: New file.\n+\t* sse2-paddd-1.c: New file.\n+\t* sse2-paddq-1.c: New file.\n+\t* sse2-paddsb-1.c: New file.\n+\t* sse2-paddsw-1.c: New file.\n+\t* sse2-paddusb-1.c: New file.\n+\t* sse2-paddusw-1.c: New file.\n+\t* sse2-paddw-1.c: New file.\n+\t* sse2-pavgb-1.c: New file.\n+\t* sse2-pavgw-1.c: New file.\n+\t* sse2-pcmpeqb-1.c: New file.\n+\t* sse2-pcmpeqd-1.c: New file.\n+\t* sse2-pcmpeqw-1.c: New file.\n+\t* sse2-pcmpgtb-1.c: New file.\n+\t* sse2-pcmpgtd-1.c: New file.\n+\t* sse2-pcmpgtw-1.c: New file.\n+\t* sse2-pextrw.c: New file.\n+\t* sse2-pinsrw.c: New file.\n+\t* sse2-pmaddwd-1.c: New file.\n+\t* sse2-pmaxsw-1.c: New file.\n+\t* sse2-pmaxub-1.c: New file.\n+\t* sse2-pminsw-1.c: New file.\n+\t* sse2-pminub-1.c: New file.\n+\t* sse2-pmovmskb-1.c: New file.\n+\t* sse2-pmulhuw-1.c: New file.\n+\t* sse2-pmulhw-1.c: New file.\n+\t* sse2-pmullw-1.c: New file.\n+\t* sse2-pmuludq-1.c: New file.\n+\t* sse2-psadbw-1.c: New file.\n+\t* sse2-pshufd-1.c: New file.\n+\t* sse2-pshufhw-1.c: New file.\n+\t* sse2-pshuflw-1.c: New file.\n+\t* sse2-pslld-1.c: New file.\n+\t* sse2-pslld-2.c: New file.\n+\t* sse2-pslldq-1.c: New file.\n+\t* sse2-psllq-1.c: New file.\n+\t* sse2-psllq-2.c: New file.\n+\t* sse2-psllw-1.c: New file.\n+\t* sse2-psllw-2.c: New file.\n+\t* sse2-psrad-1.c: New file.\n+\t* sse2-psrad-2.c: New file.\n+\t* sse2-psraw-1.c: New file.\n+\t* sse2-psraw-2.c: New file.\n+\t* sse2-psrld-1.c: New file.\n+\t* sse2-psrld-2.c: New file.\n+\t* sse2-psrldq-1.c: New file.\n+\t* sse2-psrlq-1.c: New file.\n+\t* sse2-psrlq-2.c: New file.\n+\t* sse2-psrlw-1.c: New file.\n+\t* sse2-psrlw-2.c: New file.\n+\t* sse2-psubb-1.c: New file.\n+\t* sse2-psubd-1.c: New file.\n+\n 2017-10-30  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* gcc.target/powerpc/fold-vec-perm-longlong.c: Update to use long long"}, {"sha": "1dffbbe3ce7973015170940c1bf35ca0f90d75cc", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-addpd-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-addpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-addpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-addpd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_addpd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128d\n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_add_pd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u, s1, s2;\n+  double e[2];\n+   \n+  s1.x = _mm_set_pd (2134.3343,1234.635654);\n+  s2.x = _mm_set_pd (41124.234,2344.2354);\n+  u.x = test (s1.x, s2.x); \n+   \n+  e[0] = s1.a[0] + s2.a[0];\n+  e[1] = s1.a[1] + s2.a[1];\n+\n+  if (check_union128d (u, e))\n+    abort ();\n+}"}, {"sha": "12c414d2d93825a2632191aca7ba203de4dffb0f", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-addsd-1.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-addsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-addsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-addsd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+\n+#include <stdint.h>\n+#include <stdio.h>\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_addsd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128d\n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_add_sd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u, s1, s2;\n+  double e[2];\n+   \n+  s1.x = _mm_set_pd (2134.3343,1234.635654);\n+  s2.x = _mm_set_pd (41124.234,2344.2354);\n+  u.x = test (s1.x, s2.x); \n+\n+  e[0] = s1.a[0] + s2.a[0];\n+  e[1] = s1.a[1];\n+\n+  if (check_union128d (u, e))\n+#if DEBUG\n+  {\n+      printf (\"sse2_test_addsd_1; check_union128d failed\\n\");\n+      printf (\"\\t [%f,%f] + [%f,%f] -> [%f,%f]\\n\", s1.a[0], s1.a[1], s2.a[0],\n+\t      s2.a[1], u.a[0], u.a[1]);\n+      printf (\"\\t expect [%f,%f]\\n\", e[0], e[1]);\n+  }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "89e52aa1265c68268f50fa826d4401696ef9c3ff", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-andnpd-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-andnpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-andnpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-andnpd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_andnpd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128d\n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  return _mm_andnot_pd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u, s1, s2;\n+  long long source1[2]={34545, 95567};\n+  long long source2[2]={674, 57897};\n+  long long e[2];\n+   \n+  s1.x = _mm_loadu_pd ((double *)source1);\n+  s2.x = _mm_loadu_pd ((double *)source2);\n+  u.x = test (s1.x, s2.x); \n+   \n+  e[0] = (~source1[0]) & source2[0];\n+  e[1] = (~source1[1]) & source2[1];\n+\n+  if (check_union128d (u, (double *)e))\n+    abort ();\n+}"}, {"sha": "d23099b0e9ec2a2cae71189cda60bfd91c312992", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-andpd-1.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-andpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-andpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-andpd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_andpd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128d\n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  return _mm_and_pd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u, s1, s2;\n+  \n+  union\n+  {\n+    double d[2];\n+    long long ll[2];\n+  }source1, source2, e;\n+   \n+  s1.x = _mm_set_pd (34545, 95567);\n+  s2.x = _mm_set_pd (674, 57897);\n+\n+  _mm_storeu_pd (source1.d, s1.x);\n+  _mm_storeu_pd (source2.d, s2.x);\n+\n+  u.x = test (s1.x, s2.x); \n+   \n+  e.ll[0] = source1.ll[0] & source2.ll[0];\n+  e.ll[1] = source1.ll[1] & source2.ll[1];\n+\n+  if (check_union128d (u, e.d))\n+    abort ();\n+}"}, {"sha": "beb1b7d24f4cbb6ce07bee56d010c470b4501566", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-check.h", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-check.h?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,52 @@\n+#include <stdlib.h>\n+\n+/* Define this to enable the combination of VSX vector double and\n+   SSE2 data types.  */\n+#define __VSX_SSE2__ 1\n+\n+#include \"m128-check.h\"\n+\n+/* define DEBUG replace abort with printf on error.  */\n+//#define DEBUG 1\n+\n+#if 1\n+\n+#define TEST sse2_test\n+\n+static void sse2_test (void);\n+\n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  sse2_test ();\n+}\n+\n+int\n+main ()\n+  {\n+#ifdef __BUILTIN_CPU_SUPPORTS__\n+    /* Most SSE2 (vector double) intrinsic operations require VSX\n+       instructions, but some operations may need only VMX\n+       instructions.  This also true for SSE2 scalar doubles as they\n+       imply that \"other half\" of the vector remains unchanged or set\n+       to zeros.  The VSX scalar operations leave ther \"other half\"\n+       undefined, and require additional merge operations.\n+       Some conversions (to/from integer) need the  direct register\n+       transfer instructions from POWER8 for best performance.\n+       So we test for arch_2_07.  */\n+    if ( __builtin_cpu_supports (\"arch_2_07\") )\n+      {\n+\tdo_test ();\n+#ifdef DEBUG\n+\tprintf (\"PASSED\\n\");\n+#endif\n+      }\n+#ifdef DEBUG\n+    else\n+    printf (\"SKIPPED\\n\");\n+#endif\n+#endif /* __BUILTIN_CPU_SUPPORTS__ */\n+    return 0;\n+  }\n+#endif"}, {"sha": "af9df4d320937e2ed4eb1dc6327c842ef6da14f4", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-cmppd-1.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cmppd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cmppd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cmppd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,76 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_cmp_pd_1\n+#endif\n+\n+#include <emmintrin.h>\n+#include <math.h>\n+\n+double ps1[] = {2134.3343, 6678.346};\n+double ps2[] = {41124.234, 6678.346};\n+long long pdd[] =  {1, 2}, pd[2];\n+union{long long l[2]; double d[2];} pe;\n+\n+void pd_check(char *id, __m128d dst)\n+{\n+    __v2di dest = (__v2di)dst;\n+\n+    if(checkVl(pd, pe.l, 2))\n+    {\n+        printf(\"mm_cmp%s_pd FAILED\\n\", id);\n+\tprintf(\"dst [%lld, %lld], e.l[%lld, %lld]\\n\", \n+\t\tdest[0], dest[1], pe.l[0], pe.l[1]);\n+    }\n+}\n+\n+#define CMP(cmp, rel0, rel1)\t\t\t\t\t\\\n+    pe.l[0] = rel0 ? -1 : 0;\t                        \\\n+    pe.l[1] = rel1 ? -1 : 0;\t                        \\\n+    dest = _mm_loadu_pd((double*)pdd);\t      \t\t\\\n+    source1 = _mm_loadu_pd(ps1);\t\t\t\t\\\n+    source2 = _mm_loadu_pd(ps2);\t\t\t\t\\\n+    dest = _mm_cmp##cmp##_pd(source1, source2);\t\t\\\n+    _mm_storeu_pd((double*) pd, dest);\t\t\t\\\n+    pd_check(\"\" #cmp \"\", dest);\n+\n+static void\n+TEST ()\n+{\n+    __m128d source1, source2, dest;\n+\n+    CMP(eq, !isunordered(ps1[0], ps2[0]) && ps1[0] == ps2[0],\n+    \t\t!isunordered(ps1[1], ps2[1]) && ps1[1] == ps2[1]);\n+    CMP(lt, !isunordered(ps1[0], ps2[0]) && ps1[0] < ps2[0],\n+    \t\t!isunordered(ps1[1], ps2[1]) && ps1[1] < ps2[1]);\n+    CMP(le, !isunordered(ps1[0], ps2[0]) && ps1[0] <= ps2[0],\n+    \t\t!isunordered(ps1[1], ps2[1]) && ps1[1] <= ps2[1]);\n+    CMP(unord, isunordered(ps1[0], ps2[0]),\n+    \t\tisunordered(ps1[1], ps2[1]));\n+    CMP(neq, isunordered(ps1[0], ps2[0]) || ps1[0] != ps2[0],\n+    \t\tisunordered(ps1[1], ps2[1]) || ps1[1] != ps2[01]);\n+    CMP(nlt, isunordered(ps1[0], ps2[0]) || ps1[0] >= ps2[0],\n+    \t\tisunordered(ps1[1], ps2[1]) || ps1[1] >= ps2[1]);\n+    CMP(nle, isunordered(ps1[0], ps2[0]) || ps1[0] > ps2[0],\n+    \t\tisunordered(ps1[1], ps2[1]) || ps1[1] > ps2[1]);\n+    CMP(ord, !isunordered(ps1[0], ps2[0]),\n+    \t\t!isunordered(ps1[1], ps2[1]));\n+\n+    CMP(ge, isunordered(ps1[0], ps2[0]) || ps1[0] >= ps2[0],\n+    \t\tisunordered(ps1[1], ps2[1]) || ps1[1] >= ps2[1]);\n+    CMP(gt, isunordered(ps1[0], ps2[0]) || ps1[0] > ps2[0],\n+    \t\tisunordered(ps1[1], ps2[1]) || ps1[1] > ps2[1]);\n+    CMP(nge, !isunordered(ps1[0], ps2[0]) && ps1[0] < ps2[0],\n+    \t\t!isunordered(ps1[1], ps2[1]) && ps1[1] < ps2[1]);\n+    CMP(ngt, !isunordered(ps1[0], ps2[0]) && ps1[0] <= ps2[0],\n+    \t\t!isunordered(ps1[1], ps2[1]) && ps1[1] <= ps2[1]);\n+}"}, {"sha": "331923c53d335c430acd8aa17d68d53d2f250b68", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-cmpsd-1.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cmpsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cmpsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cmpsd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_cmp_sd_1\n+#endif\n+\n+#include <emmintrin.h>\n+#include <math.h>\n+\n+double s1[] = {2134.3343, 6678.346};\n+double s2[] = {41124.234, 6678.346};\n+long long dd[] =  {1, 2}, d[2];\n+union{long long l[2]; double d[2];} e;\n+\n+void check(char *id, __m128d dst)\n+{\n+   __v2di dest = (__v2di)dst;\n+\n+   if(checkVl(d, e.l, 2))\n+    {\n+      printf(\"mm_cmp%s_sd FAILED\\n\", id);\n+      printf(\"dst [%lld, %lld], e.l[%lld]\\n\",\n+             dest[0], dest[1], e.l[0]);\n+    }\n+}\n+\n+#define CMP(cmp, rel)\t\t\t\t\t\\\n+    e.l[0] = rel ? -1 : 0;\t                        \\\n+    dest = _mm_loadu_pd((double*)dd);\t      \t\t\\\n+    source1 = _mm_loadu_pd(s1);\t\t\t\t\\\n+    source2 = _mm_loadu_pd(s2);\t\t\t\t\\\n+    dest = _mm_cmp##cmp##_sd(source1, source2);\t\\\n+    _mm_storeu_pd((double*) d, dest);\t\t\t\\\n+    check(\"\" #cmp \"\", dest);\n+\n+static void\n+TEST ()\n+{\n+    __m128d source1, source2, dest;\n+\n+    e.d[1] = s1[1];\n+\n+    CMP(eq, !isunordered(s1[0], s2[0]) && s1[0] == s2[0]);\n+    CMP(lt, !isunordered(s1[0], s2[0]) && s1[0] < s2[0]);\n+    CMP(le, !isunordered(s1[0], s2[0]) && s1[0] <= s2[0]);\n+    CMP(unord, isunordered(s1[0], s2[0]));\n+    CMP(neq, isunordered(s1[0], s2[0]) || s1[0] != s2[0]);\n+    CMP(nlt, isunordered(s1[0], s2[0]) || s1[0] >= s2[0]);\n+    CMP(nle, isunordered(s1[0], s2[0]) || s1[0] > s2[0]);\n+    CMP(ord, !isunordered(s1[0], s2[0]));\n+\n+    CMP(ge, isunordered(s1[0], s2[0]) || s1[0] >= s2[0]);\n+    CMP(gt, isunordered(s1[0], s2[0]) || s1[0] > s2[0]);\n+    CMP(nge, !isunordered(s1[0], s2[0]) && s1[0] < s2[0]);\n+    CMP(ngt, !isunordered(s1[0], s2[0]) && s1[0] <= s2[0]);\n+}"}, {"sha": "7bed4b41f5b20716fe158e1fe4680cbe95b5e190", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-comisd-1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-comisd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-comisd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-comisd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_comi_sd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static int \n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_comieq_sd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d s1, s2;\n+  int d[1];\n+  int e[1];\n+ \n+  s1.x = _mm_set_pd (2134.3343,2344.2354);\n+  s2.x = _mm_set_pd (41124.234,2344.2354);\n+  d[0] = test (s1.x, s2.x); \n+  e[0] = s1.a[0] == s2.a[0];\n+\n+  if (checkVi (d, e, 1))\n+    abort ();\n+}"}, {"sha": "6a8b45d3102d3b3e477a1ef206a71fe40f43d9ac", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-comisd-2.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-comisd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-comisd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-comisd-2.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_comi_sd_2\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static int \n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_comilt_sd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d s1, s2;\n+  int d[1];\n+  int e[1];\n+ \n+  s1.x = _mm_set_pd (2134.3343,2344.2354);\n+  s2.x = _mm_set_pd (41124.234,2344.2354);\n+  d[0] = test (s1.x, s2.x); \n+  e[0] = s1.a[0] < s2.a[0];\n+\n+  if (checkVi (d, e, 1))\n+    abort ();\n+}"}, {"sha": "2ed5e4ee06fe3ce4b6e3c513a108cc3fabbb2a19", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-comisd-3.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-comisd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-comisd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-comisd-3.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_comi_sd_3\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static int \n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_comile_sd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d s1, s2;\n+  int d[1];\n+  int e[1];\n+ \n+  s1.x = _mm_set_pd (2134.3343,2344.2354);\n+  s2.x = _mm_set_pd (41124.234,2344.2354);\n+  d[0] = test (s1.x, s2.x); \n+  e[0] = s1.a[0] <= s2.a[0];\n+\n+  if (checkVi (d, e, 1))\n+    abort ();\n+}"}, {"sha": "2a3b5b8465f71b7ba3d2998afbcbb9800305e8ec", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-comisd-4.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-comisd-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-comisd-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-comisd-4.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_comi_sd_4\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static int \n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_comigt_sd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d s1, s2;\n+  int d[1];\n+  int e[1];\n+ \n+  s1.x = _mm_set_pd (2134.3343,12344.2354);\n+  s2.x = _mm_set_pd (41124.234,2344.2354);\n+  d[0] = test (s1.x, s2.x); \n+  e[0] = s1.a[0] > s2.a[0];\n+\n+  if (checkVi (d, e, 1))\n+    abort ();\n+}"}, {"sha": "59139cb0a9b177eb8098d8dcd8d42876421c871e", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-comisd-5.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-comisd-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-comisd-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-comisd-5.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_comi_sd_5\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static int \n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_comige_sd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d s1, s2;\n+  int d[1];\n+  int e[1];\n+ \n+  s1.x = _mm_set_pd (2134.3343,2344.2354);\n+  s2.x = _mm_set_pd (41124.234,2344.2354);\n+  d[0] = test (s1.x, s2.x); \n+  e[0] = s1.a[0] >= s2.a[0];\n+\n+  if (checkVi (d, e, 1))\n+    abort ();\n+}"}, {"sha": "e904e2bc7fa4388547b44341ca89f7bb6d1fc5fa", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-comisd-6.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-comisd-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-comisd-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-comisd-6.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_comi_sd_6\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static int \n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_comineq_sd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d s1, s2;\n+  int d[1];\n+  int e[1];\n+ \n+  s1.x = _mm_set_pd (2134.3343,2344.2354);\n+  s2.x = _mm_set_pd (41124.234,2344.2354);\n+  d[0] = test (s1.x, s2.x); \n+  e[0] = s1.a[0] != s2.a[0];\n+\n+  if (checkVi (d, e, 1))\n+    abort ();\n+}"}, {"sha": "0c9ee3a351d57ff305a823fe30d96a29bff39f4d", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-cvtdq2pd-1.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtdq2pd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtdq2pd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtdq2pd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_cvtepi32_pd\n+#endif\n+\n+#include <emmintrin.h>\n+#ifdef _ARCH_PWR8\n+static __m128d\n+__attribute__((noinline, unused))\n+test (__m128i p)\n+{\n+  return _mm_cvtepi32_pd (p); \n+}\n+#endif\n+\n+static void\n+TEST (void)\n+{\n+#ifdef _ARCH_PWR8\n+  union128d u;\n+  union128i_d s;\n+  double e[2];\n+\n+  s.x = _mm_set_epi32 (123, 321, 456, 987);\n+\n+  u.x = test (s.x);\n+\n+  e[0] = (double)s.a[0]; \n+  e[1] = (double)s.a[1]; \n+\n+  if (check_union128d (u, e))\n+#if DEBUG\n+  {\n+      printf (\"sse2_test_cvtepi32_pd; check_union128d failed\\n\");\n+      printf (\"\\t [%d,%d, %d, %d] -> [%f,%f]\\n\",\n+    \t\t  s.a[0], s.a[1], s.a[2], s.a[3],\n+\t\t\t  u.a[0], u.a[1]);\n+      printf (\"\\t expect [%f,%f]\\n\",\n+\t\t\t  e[0], e[1]);\n+  }\n+#else\n+    abort ();\n+#endif\n+#endif\n+}"}, {"sha": "50dec1bf5a96a157fd1ac2ede6aa53414471ee7e", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-cvtdq2ps-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtdq2ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtdq2ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtdq2ps-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_cvtepi32_ps\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128i p)\n+{\n+  return _mm_cvtepi32_ps (p); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u;\n+  union128i_d s;\n+  float e[4];\n+\n+  s.x = _mm_set_epi32 (123, 321, 456, 987);\n+\n+  u.x = test (s.x);\n+\n+  e[0] = (float)s.a[0]; \n+  e[1] = (float)s.a[1]; \n+  e[2] = (float)s.a[2]; \n+  e[3] = (float)s.a[3]; \n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "ecbcbe99b535dc72525c78114df29add30749df5", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-cvtpd2dq-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtpd2dq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtpd2dq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtpd2dq-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_cvtpd_epi32\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128d p)\n+{\n+  return _mm_cvtpd_epi32 (p); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_d u;\n+  union128d s;\n+  int e[4] = {0};\n+\n+  s.x = _mm_set_pd (2.78, 7777768.82);\n+\n+  u.x = test (s.x);\n+\n+  e[0] = (int)(s.a[0] + 0.5); \n+  e[1] = (int)(s.a[1] + 0.5); \n+\n+  if (check_union128i_d (u, e))\n+#if DEBUG\n+  {\n+      printf (\"sse2_test_cvtpd_epi32; check_union128i_d failed\\n\");\n+      printf (\"\\t [%f,%f] -> [%d,%d,%d,%d]\\n\", s.a[0], s.a[1], u.a[0], u.a[1],\n+\t      u.a[2], u.a[3]);\n+      printf (\"\\t expect [%d,%d,%d,%d]\\n\", e[0], e[1], e[2], e[3]);\n+  }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "7c9c01dc33a896b6e83b372e4621a138313a382a", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-cvtpd2ps-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtpd2ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtpd2ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtpd2ps-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_cvtpd_ps\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128d p)\n+{\n+  return _mm_cvtpd_ps (p); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u;\n+  union128d s;\n+  float e[4] = { 0.0 };\n+\n+  s.x = _mm_set_pd (123.321, 456.987);\n+\n+  u.x = test (s.x);\n+\n+  e[0] = (float)s.a[0]; \n+  e[1] = (float)s.a[1]; \n+\n+  if (check_union128 (u, e))\n+#if DEBUG\n+  {\n+    printf (\"sse2_test_cvtpd_ps; check_union128 failed\\n\");\n+      printf (\"\\t [%f,%f] -> [%f,%f,%f,%f]\\n\", s.a[0], s.a[1], u.a[0], u.a[1],\n+\t      u.a[2], u.a[3]);\n+      printf (\"\\t expect [%f,%f,%f,%f]\\n\", e[0], e[1], e[2], e[3]);\n+  }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "36a94ff88f980bf1f996017a37d6ddf13b837241", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-cvtps2dq-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtps2dq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtps2dq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtps2dq-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_cvtps2dq_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128 p)\n+{\n+  return _mm_cvtps_epi32 (p); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_d u;\n+  union128 s;\n+  int e[4] = {0};\n+\n+  s.x = _mm_set_ps (2.78, 7777768.82, 2.331, 3.456);\n+\n+  u.x = test (s.x);\n+\n+  e[0] = (int)(s.a[0] + 0.5); \n+  e[1] = (int)(s.a[1] + 0.5); \n+  e[2] = (int)(s.a[2] + 0.5); \n+  e[3] = (int)(s.a[3] + 0.5); \n+\n+  if (check_union128i_d (u, e))\n+#if DEBUG\n+  {\n+      printf (\"sse2_test_cvtps2dq_1; check_union128i_d failed\\n\");\n+      printf (\"\\t [%f,%f,%f,%f] -> [%d,%d,%d,%d]\\n\", s.a[0], s.a[1], s.a[2],\n+\t      s.a[3], u.a[0], u.a[1], u.a[2], u.a[3]);\n+      printf (\"\\t expect [%d,%d,%d,%d]\\n\", e[0], e[1], e[2], e[3]);\n+  }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "de85ac407dce7d02a44103c57d471647d9f5ea2a", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-cvtps2pd-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtps2pd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtps2pd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtps2pd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_cvtps2pd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128d\n+__attribute__((noinline, unused))\n+test (__m128 p)\n+{\n+  return _mm_cvtps_pd (p); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u;\n+  union128 s;\n+  double e[2];\n+\n+  s.x = _mm_set_ps (2.78, 7777768.82, 2.331, 3.456);\n+\n+  u.x = test (s.x);\n+\n+  e[0] = (double)s.a[0]; \n+  e[1] = (double)s.a[1]; \n+\n+  if (check_union128d (u, e))\n+#if DEBUG\n+  {\n+      printf (\"sse2_test_cvtps2pd_1; check_union128d failed\\n\");\n+      printf (\"\\t cvt\\t [%f,%f,%f,%f] -> [%f,%f]\\n\", s.a[0], s.a[1], s.a[2],\n+\t      s.a[3], u.a[0], u.a[1]);\n+      printf (\"\\t expect\\t [%f,%f]\\n\", e[0], e[1]);\n+  }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "77a1ad5af4cfebf09363b582ca98108c74f16ae5", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-cvtsd2si-1.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtsd2si-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtsd2si-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtsd2si-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_cvtsd2si_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+\n+static int \n+__attribute__((noinline, unused))\n+test (__m128d p)\n+{\n+  return _mm_cvtsd_si32 (p); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d s;\n+  int e;\n+  int d;\n+\n+  s.x = _mm_set_pd (123.321, 456.987);\n+\n+  d = test (s.x);\n+\n+  e = (int)(s.a[0] + 0.5);\n+\n+  if (d != e)\n+#if DEBUG\n+  {\n+      printf (\"sse2_test_cvtsd2si_1; failed\\n\");\n+      printf (\"\\t [%f,%f] -> [%d]\\n\", s.a[0], s.a[1], d);\n+      printf (\"\\t expect [%d]\\n\", e);\n+  }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "a36e0e90fb6b98f652aca495f56f16da97e6417e", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-cvtsd2si-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtsd2si-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtsd2si-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtsd2si-2.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_cvtsd2si_2\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static long long\n+__attribute__((noinline, unused))\n+test (__m128d p)\n+{\n+  return _mm_cvtsd_si64 (p); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d s;\n+  long long e;\n+  long long d;\n+\n+  s.x = _mm_set_pd (829496729501.4, 429496729501.4);\n+\n+  d = test (s.x);\n+\n+  e = (long long)(s.a[0] + 0.5);\n+\n+  if (d != e)\n+#if DEBUG\n+  {\n+      printf (\"sse2_test_cvtsd2si_2; failed\\n\");\n+      printf (\"\\t [%f,%f] -> [%ld]\\n\", s.a[0], s.a[1], d);\n+      printf (\"\\t expect [%ld]\\n\", e);\n+  }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "33274cfa73dfa65c75d3e63cb42f66e2ea084872", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-cvtsd2ss-1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtsd2ss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtsd2ss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtsd2ss-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_cvtsd2ss_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128 \n+__attribute__((noinline, unused))\n+test (__m128 p1, __m128d p2)\n+{\n+  return _mm_cvtsd_ss (p1, p2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d s1;\n+  union128 u, s2;\n+  double source1[2] = {123.345, 67.3321};\n+  float  e[4] = {5633.098, 93.21, 3.34, 4555.2};\n+\n+  s1.x = _mm_loadu_pd (source1);\n+  s2.x = _mm_loadu_ps (e);\n+\n+  __asm(\"\" : \"+v\"(s1.x), \"+v\"(s2.x));\n+  u.x = test(s2.x, s1.x);\n+\n+  e[0] = (float)source1[0];\n+\n+  if (check_union128(u, e))\n+#if DEBUG\n+  {\n+      printf (\"sse2_test_cvtsd2ss_1; check_union128 failed\\n\");\n+      printf (\"\\t [%f,%f,%f,%f],[%f,%f]\\n\", s2.a[0], s2.a[1], s2.a[2], s2.a[3],\n+    \t\t  s1.a[0], s1.a[1]);\n+      printf (\"\\t -> \\t[%f,%f,%f,%f]\\n\", u.a[0], u.a[1], u.a[2], u.a[3]);\n+      printf (\"\\texpect\\t[%f,%f,%f,%f]\\n\", e[0], e[1], e[2], e[3]);\n+  }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "5465945e8b52a194cc565959e36ed0ccb110e791", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-cvtsi2sd-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtsi2sd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtsi2sd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtsi2sd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_cvtsi2sd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128d \n+__attribute__((noinline, unused))\n+test (__m128d p, int b)\n+{\n+  __asm(\"\" : \"+v\"(p), \"+r\"(b));\n+  return _mm_cvtsi32_sd (p, b); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u, s;\n+  int b = 128;\n+  double e[2];\n+\n+  s.x = _mm_set_pd (123.321, 456.987);\n+\n+  u.x = test (s.x, b);\n+  e[0] = (double)b;\n+  e[1] = s.a[1];\n+\n+  if (check_union128d (u, e))\n+    abort ();\n+}"}, {"sha": "cd8f0840702e22e06c0355c79f91e365a90bf890", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-cvtsi2sd-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtsi2sd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtsi2sd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtsi2sd-2.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_cvtsi2sd_2\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128d \n+__attribute__((noinline, unused))\n+test (__m128d p, long long b)\n+{\n+  __asm(\"\" : \"+v\"(p), \"+r\"(b));\n+  return _mm_cvtsi64_sd (p, b); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u, s;\n+  long long b = 42949672951333LL;\n+  double e[2];\n+\n+  s.x = _mm_set_pd (123.321, 456.987);\n+\n+  u.x = test (s.x, b);\n+  e[0] = (double)b;\n+  e[1] = s.a[1];\n+\n+  if (check_union128d (u, e))\n+    abort ();\n+}"}, {"sha": "d93bae68d8b615956a5080b1d6830c0f78dbf8e0", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-cvtss2sd-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtss2sd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtss2sd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvtss2sd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_cvtss2sd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128d \n+__attribute__((noinline, unused))\n+test (__m128d a, __m128 b)\n+{\n+  return _mm_cvtss_sd (a, b); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u, s1;\n+  union128 s2;\n+  double e[2];\n+\n+  s1.x = _mm_set_pd (123.321, 456.987);\n+  s2.x = _mm_set_ps (123.321, 456.987, 666.45, 231.987);\n+\n+  u.x = test (s1.x, s2.x);\n+\n+  e[0] = (double)s2.a[0];\n+  e[1] = s1.a[1];\n+\n+  if (check_union128d (u, e))\n+#if DEBUG\n+  {\n+      printf (\"sse2_test_cvtss2sd_1; check_union128d failed\\n\");\n+      printf (\"\\t [%f,%f], [%f,%f,%f,%f]\\n\", s1.a[0], s1.a[1], s2.a[0], s2.a[1],\n+\t      s2.a[2], s2.a[3]);\n+      printf (\"\\t -> \\t[%f,%f]\\n\", u.a[0], u.a[1]);\n+      printf (\"\\texpect\\t[%f,%f]\\n\", e[0], e[1]);\n+  }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "baa7d3baa753debc5f853436053255def3d62807", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-cvttpd2dq-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvttpd2dq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvttpd2dq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvttpd2dq-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_cvttpd_epi32\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128d p)\n+{\n+  return _mm_cvttpd_epi32 (p); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d s;\n+  union128i_d u;\n+  int e[4] = {0};\n+\n+  s.x = _mm_set_pd (123.321, 456.987);\n+\n+  u.x = test (s.x);\n+\n+  e[0] = (int)s.a[0]; \n+  e[1] = (int)s.a[1]; \n+\n+  if (check_union128i_d (u, e))\n+#if DEBUG\n+  {\n+\t  printf (\"sse2_test_cvttpd_epi32; check_union128i_d failed\\n\");\n+      printf (\"\\t [%f,%f] -> [%d,%d,%d,%d]\\n\", s.a[0], s.a[1], u.a[0], u.a[1],\n+\t      u.a[2], u.a[3]);\n+      printf (\"\\t expect [%d,%d,%d,%d]\\n\", e[0], e[1], e[2], e[3]);\n+  }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "88427d8c6f229615377eed9d73ff9c5a714c96c6", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-cvttps2dq-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvttps2dq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvttps2dq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvttps2dq-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_cvttps2dq_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128 p)\n+{\n+  return _mm_cvttps_epi32 (p); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 s;\n+  union128i_d u;\n+  int e[4] = {0};\n+\n+  s.x = _mm_set_ps (123.321, 456.987, 33.56, 7765.321);\n+\n+  u.x = test (s.x);\n+\n+  e[0] = (int)s.a[0]; \n+  e[1] = (int)s.a[1]; \n+  e[2] = (int)s.a[2]; \n+  e[3] = (int)s.a[3]; \n+\n+  if (check_union128i_d (u, e))\n+    abort ();\n+}"}, {"sha": "2dc96d1eaca9ac9b8d34a6a1e6a7758dbe4b1717", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-cvttsd2si-1.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvttsd2si-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvttsd2si-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvttsd2si-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_cvttsd2si_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static int \n+__attribute__((noinline, unused))\n+test (__m128d p)\n+{\n+  __asm(\"\" : \"+v\"(p));\n+  return _mm_cvttsd_si32 (p); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d s;\n+  int e;\n+  int d;\n+\n+  s.x = _mm_set_pd (123.321, 456.987);\n+\n+  d = test (s.x);\n+  e = (int)(s.a[0]);\n+\n+  if (d != e)\n+#if DEBUG\n+  {\n+      printf (\"sse2_test_cvttsd2si_1; failed\\n\");\n+      printf (\"\\t [%f,%f] -> [%d]\\n\", s.a[0], s.a[1], d);\n+      printf (\"\\t expect [%d]\\n\", e);\n+  }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "cd6fa926b4a15763266ecde7898d00d88940aff9", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-cvttsd2si-2.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvttsd2si-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvttsd2si-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-cvttsd2si-2.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_cvttsd2si_2\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static long long\n+__attribute__((noinline, unused))\n+test (__m128d p)\n+{\n+  __asm(\"\" : \"+v\"(p));\n+  return _mm_cvttsd_si64 (p); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d s;\n+  long long e;\n+  long long d;\n+\n+  s.x = _mm_set_pd (123.321, 42949672339501.4);\n+\n+  d = test (s.x);\n+  e = (long long)(s.a[0]);\n+\n+  if (d != e)\n+    abort ();\n+}"}, {"sha": "e4a3bdaa54f37913cd8cb0f1ebb83c7d60750361", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-divpd-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-divpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-divpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-divpd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_divpd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128d\n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_div_pd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u, s1, s2;\n+  double e[2];\n+   \n+  s1.x = _mm_set_pd (2134.3343,1234.635654);\n+  s2.x = _mm_set_pd (41124.234,2344.2354);\n+  u.x = test (s1.x, s2.x); \n+   \n+  e[0] = s1.a[0] / s2.a[0];\n+  e[1] = s1.a[1] / s2.a[1];\n+\n+  if (check_union128d (u, e))\n+#if DEBUG\n+  {\n+    printf (\"sse2_test_divpd_1; check_union128d failed\\n\");\n+    printf (\"\\t [%f,%f] * [%f,%f] -> [%f,%f]\\n\", s1.a[0], s1.a[1], s2.a[0],\n+\t      s2.a[1], u.a[0], u.a[1]);\n+    printf (\"\\t expect [%f,%f]\\n\", e[0], e[1]);\n+  }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "197151e9a18bff0bbcd66c39e5dc57e8f2f63e23", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-divsd-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-divsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-divsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-divsd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_divsd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128d\n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_div_sd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u, s1, s2;\n+  double e[2];\n+   \n+  s1.x = _mm_set_pd (2134.3343,1234.635654);\n+  s2.x = _mm_set_pd (41124.234,2344.2354);\n+  u.x = test (s1.x, s2.x);\n+   \n+  e[0] = s1.a[0] / s2.a[0];\n+  e[1] = s1.a[1];\n+\n+  if (check_union128d (u, e))\n+#if DEBUG\n+  {\n+    printf (\"sse2_test_divsd_1; check_union128d failed\\n\");\n+    printf (\"\\t [%f,%f] / [%f,%f] -> [%f,%f]\\n\", s1.a[0], s1.a[1], s2.a[0],\n+\t      s2.a[1], u.a[0], u.a[1]);\n+    printf (\"\\t expect [%f,%f]\\n\", e[0], e[1]);\n+  }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "4462a2ee01153a8ffaa9745f2388d6f1208a94af", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-maxpd-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-maxpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-maxpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-maxpd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_maxpd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128d\n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_max_pd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u, s1, s2;\n+  double e[2];\n+   \n+  s1.x = _mm_set_pd (2134.3343,1234.635654);\n+  s2.x = _mm_set_pd (41124.234,2344.2354);\n+  u.x = test (s1.x, s2.x); \n+   \n+  e[0] = s1.a[0] > s2.a[0] ? s1.a[0]:s2.a[0];\n+  e[1] = s1.a[1] > s2.a[1] ? s1.a[1]:s2.a[1];\n+\n+  if (check_union128d (u, e))\n+    abort ();\n+}"}, {"sha": "e17628950fc6eb32d42135eeceb3bb3a8a94dde4", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-maxsd-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-maxsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-maxsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-maxsd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_maxsd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128d\n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_max_sd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u, s1, s2;\n+  double e[2];\n+   \n+  s1.x = _mm_set_pd (2134.3343,1234.635654);\n+  s2.x = _mm_set_pd (41124.234,2344.2354);\n+  u.x = test (s1.x, s2.x); \n+   \n+  e[0] = s1.a[0] > s2.a[0] ? s1.a[0]:s2.a[0];\n+  e[1] = s1.a[1];\n+\n+  if (check_union128d (u, e))\n+#if DEBUG\n+  {\n+      printf (\"sse2_test_maxsd_3; check_union128d failed\\n\");\n+      printf (\"\\t [%f,%f] + [%f,%f] -> [%f,%f]\\n\", s1.a[0], s1.a[1], s2.a[0],\n+\t      s2.a[1], u.a[0], u.a[1]);\n+      printf (\"\\t expect [%f,%f]\\n\", e[0], e[1]);\n+  }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "f4d1960bf7898f268b77176611b7705c24e15811", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-minpd-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-minpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-minpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-minpd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_minpd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128d\n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_min_pd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u, s1, s2;\n+  double e[2];\n+   \n+  s1.x = _mm_set_pd (2134.3343,1234.635654);\n+  s2.x = _mm_set_pd (41124.234,2344.2354);\n+  u.x = test (s1.x, s2.x); \n+   \n+  e[0] = s1.a[0] < s2.a[0] ? s1.a[0]:s2.a[0];\n+  e[1] = s1.a[1] < s2.a[1] ? s1.a[1]:s2.a[1];\n+\n+  if (check_union128d (u, e))\n+    abort ();\n+}"}, {"sha": "4b3087bc403cf9120b389934ac91dafa64890522", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-minsd-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-minsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-minsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-minsd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_minsd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128d\n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_min_sd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u, s1, s2;\n+  double e[2];\n+   \n+  s1.x = _mm_set_pd (2134.3343,1234.635654);\n+  s2.x = _mm_set_pd (41124.234,2344.2354);\n+  u.x = test (s1.x, s2.x); \n+   \n+  e[0] = s1.a[0] < s2.a[0] ? s1.a[0]:s2.a[0];\n+  e[1] = s1.a[1];\n+\n+  if (check_union128d (u, e))\n+#if DEBUG\n+  {\n+      printf (\"sse2_test_minsd_3; check_union128d failed\\n\");\n+      printf (\"\\t [%f,%f] + [%f,%f] -> [%f,%f]\\n\", s1.a[0], s1.a[1], s2.a[0],\n+\t      s2.a[1], u.a[0], u.a[1]);\n+      printf (\"\\t expect [%f,%f]\\n\", e[0], e[1]);\n+  }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "115d83a4283405f40f1f5f4461ba596086a3a17e", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-mmx.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-mmx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-mmx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-mmx.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,82 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#include \"sse2-check.h\"\n+\n+#ifndef TEST\n+#define TEST sse2_test_mmx_1\n+#endif\n+\n+#include <mmintrin.h>\n+\n+#define N 4\n+\n+unsigned long long a[N], b[N], result[N];\n+\n+unsigned long long check_data[N] =\n+  { 0x101010101010100full,\n+    0x1010101010101010ull,\n+    0x1010101010101010ull,\n+    0x1010101010101010ull };\n+\n+__m64\n+unsigned_add3 (const __m64 * a, const __m64 * b,\n+\t       __m64 * result, unsigned int count)\n+{\n+  __m64 _a, _b, one, sum, carry, onesCarry;\n+\n+  unsigned int i;\n+\n+  carry = _mm_setzero_si64 ();\n+\n+  one = _mm_cmpeq_pi8 (carry, carry);\n+  one = _mm_sub_si64 (carry, one);\n+\n+  for (i = 0; i < count; i++)\n+    {\n+      _a = a[i];\n+      _b = b[i];\n+\n+      sum = _mm_add_si64 (_a, _b);\n+      sum = _mm_add_si64 (sum, carry);\n+\n+      result[i] = sum;\n+\n+      onesCarry = _mm_and_si64 (_mm_xor_si64 (_a, _b), carry);\n+      onesCarry = _mm_or_si64 (_mm_and_si64 (_a, _b), onesCarry);\n+      onesCarry = _mm_and_si64 (onesCarry, one);\n+\n+      _a = _mm_srli_si64 (_a, 1);\n+      _b = _mm_srli_si64 (_b, 1);\n+\n+      carry = _mm_add_si64 (_mm_add_si64 (_a, _b), onesCarry);\n+      carry = _mm_srli_si64 (carry, 63);\n+    }\n+\n+  return carry;\n+}\n+\n+void __attribute__((noinline))\n+TEST (void)\n+{\n+  unsigned long long carry;\n+  int i;\n+\n+  /* Really long numbers.  */\n+  a[3] = a[2] = a[1] = a[0] = 0xd3d3d3d3d3d3d3d3ull;\n+  b[3] = b[2] = b[1] = b[0] = 0x3c3c3c3c3c3c3c3cull;\n+\n+  carry = (unsigned long long) unsigned_add3\n+    ((__m64 *)a, (__m64 *)b, (__m64 *)result, N);\n+\n+  _mm_empty ();\n+\n+  if (carry != 1)\n+    abort ();\n+\n+  for (i = 0; i < N; i++)\n+    if (result [i] != check_data[i])\n+      abort ();\n+}"}, {"sha": "9b7c2ec3a9291d38a855034fafe248e6b2aafb5f", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-movhpd-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movhpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movhpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movhpd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_movhpd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128d\n+__attribute__((noinline, unused))\n+test (__m128d s1, double *p)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+b\"(p));\n+  return _mm_loadh_pd (s1, p); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u, s1;\n+  double s2[2] = {41124.234,2344.2354};\n+  double e[2];\n+   \n+  s1.x = _mm_set_pd (2134.3343,1234.635654);\n+  u.x = test (s1.x, s2); \n+\n+  e[0] = s1.a[0];\n+  e[1] = s2[0];\n+\n+  if (check_union128d (u, e))\n+    abort ();\n+}"}, {"sha": "b5eb08657cd8e61673819d7939868c3c4d16a7ab", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-movhpd-2.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movhpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movhpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movhpd-2.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_movhpd_2\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static void\n+__attribute__((noinline, unused))\n+test (double *p, __m128d a)\n+{\n+  __asm(\"\" : \"+v\"(a), \"+b\"(p));\n+  return _mm_storeh_pd (p, a); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d s;\n+  double d[1];\n+  double e[1];\n+   \n+  s.x = _mm_set_pd (2134.3343,1234.635654);\n+  test (d, s.x);\n+\n+  e[0] = s.a[1];\n+\n+  if (e[0] != d[0])\n+    abort ();\n+}"}, {"sha": "fec05bca99a08fde15ca0d120a7508d5d0798a17", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-movlpd-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movlpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movlpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movlpd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_movlpd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128d\n+__attribute__((noinline, unused))\n+test (__m128d a, double *e)\n+{\n+  __asm(\"\" : \"+v\"(a), \"+b\"(e));\n+  return _mm_loadl_pd (a, e); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u, s1;\n+  double d[2] = {2134.3343,1234.635654};\n+  double e[2];\n+\n+  s1.x = _mm_set_pd (41124.234,2344.2354);\n+  u.x = _mm_loadu_pd (d);\n+\n+  u.x = test (s1.x, d);  \n+\n+  e[0] = d[0];\n+  e[1] = s1.a[1];\n+\n+  if (check_union128d (u, e))\n+    abort ();\n+}"}, {"sha": "6974d3be6464721feb60826d75fef0b7a2bfec83", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-movlpd-2.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movlpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movlpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movlpd-2.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_movlpd_2\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static void\n+__attribute__((noinline, unused))\n+test (double *e, __m128d a)\n+{\n+  __asm(\"\" : \"+v\"(a), \"+b\"(e));\n+  return _mm_storel_pd (e, a); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u;\n+  double e[2];\n+\n+  u.x = _mm_set_pd (41124.234,2344.2354);\n+\n+  test (e, u.x);  \n+\n+  e[1] = u.a[1];\n+  \n+  if (check_union128d (u, e))\n+    abort ();\n+}"}, {"sha": "dda519dc7625d340c9e75bc80fd2bb600db182ab", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-movmskpd-1.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movmskpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movmskpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movmskpd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_movmskpd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+#ifdef _ARCH_PWR8\n+static int\n+__attribute__((noinline, unused))\n+test (__m128d p)\n+{\n+  __asm(\"\" : \"+v\"(p));\n+  return _mm_movemask_pd (p); \n+}\n+#endif\n+\n+static void\n+TEST (void)\n+{\n+#ifdef _ARCH_PWR8\n+  double source[2] = {1.234, -2234.23};\n+  union128d s1;\n+  int d;\n+  int e;\n+\n+  s1.x = _mm_loadu_pd (source);\n+\n+  d = test (s1.x);\n+\n+  e = 0;\n+  if (source[0] < 0)\n+    e |= 1;\n+  \n+  if (source[1] < 0)\n+    e |= 1 << 1;\n+\n+  if (checkVi (&d, &e, 1))\n+#if DEBUG\n+  {\n+    printf (\"sse2_test_movmskpd_1; check_union128d failed\\n\");\n+    printf (\"\\t [%f,%f] -> [%d]\\n\",\n+    \t\t  s1.a[0], s1.a[1], d);\n+    printf (\"\\t expect [%d]\\n\",\n+\t\t\t  e);\n+  }\n+#else\n+    abort ();\n+#endif\n+#endif\n+}"}, {"sha": "6b65e15b09cbf4a62d4379a0f531e82d63f4b2ff", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-movq-1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movq-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_movq_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i b)\n+{\n+  __asm(\"\" : \"+v\"(b));\n+  return _mm_move_epi64 (b); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_q u, s1;\n+  long long e[2] = { 0 };\n+\n+  s1.x = _mm_set_epi64x(12876, 3376590);\n+  u.x = test (s1.x);\n+  e[0] = s1.a[0];\n+\n+  if (check_union128i_q (u, e))\n+#if DEBUG\n+  {\n+      printf (\"sse2_test_movq_1; check_union128i_q failed\\n\");\n+      printf (\"\\t move_epi64 ([%llx, %llx]) -> [%llx, %llx]\\n\", s1.a[0],\n+\t      s1.a[1], u.a[0], u.a[1]);\n+      printf (\"\\t expect [%llx, %llx]\\n\", e[0], e[1]);\n+  }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "e742157e9aefa1fbb4de4d699c7b5bc448d72b73", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-movq-2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movq-2.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_movq_2\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (long long b)\n+{\n+  __asm(\"\" : \"+r\" (b));\n+  return _mm_cvtsi64_si128 (b); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_q u;\n+  long long b = 4294967295133LL;\n+  long long e[2] = {0};\n+\n+  u.x = test (b);\n+\n+  e[0] = b;\n+\n+  if (check_union128i_q (u, e))\n+    abort ();\n+}"}, {"sha": "ea80e2375d89fc0a6da6d5e518e4760ea9f479a3", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-movq-3.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movq-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movq-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movq-3.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_movq_3\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static long long\n+__attribute__((noinline, unused))\n+test (__m128i b)\n+{\n+  __asm(\"\" : \"+v\"(b));\n+  return _mm_cvtsi128_si64 (b); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_q u;\n+  long long e;\n+\n+  u.x = _mm_set_epi64x (4294967295133LL, 3844294967295133LL);\n+  e = test (u.x);\n+  if (e != u.a[0])\n+    abort ();\n+}"}, {"sha": "fe471ed1aa27e2309864f48c6b721ca51986d258", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-movsd-1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movsd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_movsd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128d\n+__attribute__((noinline, unused))\n+test (double *p)\n+{\n+  return _mm_load_sd (p); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u;\n+  double d[2] = {128.023, 3345.1234};\n+  double e[2];\n+\n+  u.x = _mm_loadu_pd (e);\n+  u.x = test (d);\n+\n+  e[0] = d[0];\n+  e[1] = 0.0;\n+\n+  if (check_union128d (u, e))\n+    abort ();\n+}"}, {"sha": "2c1e35538f00c023dbf65268617d43b416fecec7", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-movsd-2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movsd-2.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_movsd_2\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static void \n+__attribute__((noinline, unused))\n+test (double *p, __m128d a)\n+{\n+  _mm_store_sd (p, a); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u;\n+  double d[1];\n+  double e[1];\n+\n+  u.x = _mm_set_pd (128.023, 3345.1234);\n+  test (d, u.x);\n+\n+  e[0] = u.a[0];\n+\n+  if (checkVd (d, e, 1))\n+    abort ();\n+}"}, {"sha": "57a5c23ae1c15cf752b2586e6e394db6a6279cf8", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-movsd-3.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movsd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movsd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-movsd-3.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_movsd_3\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128d\n+__attribute__((noinline, unused))\n+test (__m128d a, __m128d b)\n+{\n+  __asm(\"\" : \"+v\"(a), \"+v\"(b));\n+  return _mm_move_sd (a, b);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u, s1, s2;\n+  double e[2] = { 256.046, 3345.1234 };\n+\n+  s1.x = _mm_setr_pd (128.023, 3345.1234);\n+  s2.x = _mm_setr_pd (256.046, 4533.1234);\n+  __asm(\"\" : \"+v\"(s1.x), \"+v\"(s2.x));\n+  u.x = test (s1.x, s2.x);\n+\n+  if (check_union128d (u, e))\n+#if DEBUG\n+  {\n+      printf (\"sse2_test_movsd_3; check_union128d failed\\n\");\n+      printf (\"\\t [%f,%f], [%f,%f] -> [%f,%f]\\n\", s1.a[0], s1.a[1], s2.a[0],\n+\t      s2.a[1], u.a[0], u.a[1]);\n+      printf (\"\\t expect [%f,%f]\\n\", e[0], e[1]);\n+  }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "b19f3b86123cbe819ccd4c6ccc4b44977d231ab7", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-mulpd-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-mulpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-mulpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-mulpd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_mulpd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128d\n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_mul_pd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u, s1, s2;\n+  double e[2];\n+   \n+  s1.x = _mm_set_pd (2134.3343,1234.635654);\n+  s2.x = _mm_set_pd (41124.234,2344.2354);\n+  u.x = test (s1.x, s2.x);\n+   \n+  e[0] = s1.a[0] * s2.a[0];\n+  e[1] = s1.a[1] * s2.a[1];\n+\n+  if (check_union128d (u, e))\n+#if DEBUG\n+  {\n+      printf (\"sse2_test_mul_pd_1; check_union128d failed\\n\");\n+      printf (\"\\t [%f,%f] * [%f,%f] -> [%f,%f]\\n\", s1.a[0], s1.a[1], s2.a[0],\n+\t      s2.a[1], u.a[0], u.a[1]);\n+      printf (\"\\t expect [%f,%f]\\n\", e[0], e[1]);\n+  }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "8206d2634593203b2d03c68b1d034096fd06cb57", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-mulsd-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-mulsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-mulsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-mulsd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_mulsd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128d\n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_mul_sd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u, s1, s2;\n+  double e[2];\n+   \n+  s1.x = _mm_set_pd (2134.3343,1234.635654);\n+  s2.x = _mm_set_pd (41124.234,2344.2354);\n+  u.x = test (s1.x, s2.x); \n+   \n+  e[0] = s1.a[0] * s2.a[0];\n+  e[1] = s1.a[1];\n+\n+  if (check_union128d (u, e))\n+#if DEBUG\n+  {\n+      printf (\"sse2_test_mul_sd_1; check_union128d failed\\n\");\n+      printf (\"\\t [%f,%f] * [%f,%f] -> [%f,%f]\\n\", s1.a[0], s1.a[1], s2.a[0],\n+\t      s2.a[1], u.a[0], u.a[1]);\n+      printf (\"\\t expect [%f,%f]\\n\", e[0], e[1]);\n+  }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "f3d9ab8f458123d4d47d16ad41bda44fe9117e79", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-orpd-1.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-orpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-orpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-orpd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_orpd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128d\n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  return _mm_or_pd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u, s1, s2;\n+\n+  union\n+  {\n+     double d[2];\n+     long long ll[2];\n+  }d1, d2, e;\n+\n+  s1.x = _mm_set_pd (1234, 44386);\n+  s2.x = _mm_set_pd (5198, 23098);\n+\n+  _mm_storeu_pd (d1.d, s1.x);\n+  _mm_storeu_pd (d2.d, s2.x);\n+\n+  u.x = test (s1.x, s2.x);\n+  \n+  e.ll[0] = d1.ll[0] | d2.ll[0];\n+  e.ll[1] = d1.ll[1] | d2.ll[1];\n+\n+  if (check_union128d (u, e.d))\n+    abort ();\n+}"}, {"sha": "d67d47c4360637d86035fa30aa77ff8be64df5a2", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-packssdw-1.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-packssdw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-packssdw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-packssdw-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,73 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_packssdw_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_packs_epi32 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_d s1, s2;\n+  union128i_w u;\n+  short e[8];\n+  int i;\n+   \n+  s1.x = _mm_set_epi32 (2134, -128, 655366, 9999);\n+  s2.x = _mm_set_epi32 (41124, 234, 2, -800900);\n+  u.x = test (s1.x, s2.x); \n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      if (s1.a[i] > 32767)\n+        e[i] = 32767;\n+      else if (s1.a[i] < -32768)\n+        e[i] = -32768;\n+      else\n+        e[i] = s1.a[i];\n+    }\n+  \n+  for (i = 0; i < 4; i++)\n+   {\n+      if (s2.a[i] > 32767)\n+        e[i+4] = 32767;\n+      else if (s2.a[i] < -32768)\n+        e[i+4] = -32768;\n+      else\n+        e[i+4] = s2.a[i];\n+    }\n+\n+  if (check_union128i_w (u, e))\n+#if DEBUG\n+  {\n+      printf (\"sse2_test_packssdw_1; check_union128i_w failed\\n\");\n+      printf (\n+\t  \"\\t ([%x,%x,%x,%x], [%x,%x,%x,%x]) -> [%x,%x,%x,%x, %x,%x,%x,%x]\\n\",\n+\t  s1.a[0], s1.a[1], s1.a[2], s1.a[3], s2.a[0], s2.a[1], s2.a[2],\n+\t  s2.a[3], u.a[0], u.a[1], u.a[2], u.a[3], u.a[4], u.a[5], u.a[6],\n+\t  u.a[7]);\n+      printf (\"\\t expect [%x,%x,%x,%x, %x,%x,%x,%x]\\n\", e[0], e[1], e[2], e[3],\n+\t\t\t  e[4], e[5], e[6], e[7]);\n+  }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "3043688bfd43da859581478c643d0b36f99a84ce", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-packsswb-1.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-packsswb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-packsswb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-packsswb-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_packsswb_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_packs_epi16 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_w s1, s2;\n+  union128i_b u;\n+  char e[16];\n+  int i;\n+   \n+  s1.x = _mm_set_epi16 (2134, -128, 1234, 6354, 1002, 3004, 4050, 9999);\n+  s2.x = _mm_set_epi16 (41124, 234, 2344, 2354, 607, 1, 2, -8009);\n+  u.x = test (s1.x, s2.x); \n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      if (s1.a[i] > 127)\n+        e[i] = 127;\n+      else if (s1.a[i] < -128)\n+        e[i] = -128;\n+      else\n+        e[i] = s1.a[i];\n+    }\n+  \n+  for (i = 0; i < 8; i++)\n+   {\n+      if (s2.a[i] > 127)\n+        e[i+8] = 127;\n+      else if (s2.a[i] < -128)\n+        e[i+8] = -128;\n+      else\n+        e[i+8] = s2.a[i];\n+    }\n+\n+  if (check_union128i_b (u, e))\n+#if DEBUG\n+    {\n+      printf (\"sse2_test_packsswb_1; check_union128i_w failed\\n\");\n+      printf (\"\\t ([%x,%x,%x,%x, %x,%x,%x,%x], [%x,%x,%x,%x, %x,%x,%x,%x])\\n\",\n+\t      s1.a[0], s1.a[1], s1.a[2], s1.a[3], s1.a[4], s1.a[5], s1.a[6],\n+\t      s1.a[7], s2.a[0], s2.a[1], s2.a[2], s2.a[3], s2.a[4], s2.a[5],\n+\t      s2.a[6], s2.a[7]);\n+      printf (\"\\t\\t -> [%x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x]\\n\",\n+\t      u.a[0], u.a[1], u.a[2], u.a[3], u.a[4], u.a[5], u.a[6], u.a[7],\n+\t      u.a[8], u.a[9], u.a[10], u.a[11], u.a[12], u.a[13], u.a[14],\n+\t      u.a[15]);\n+      printf (\n+\t  \"\\t expect [%x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x]\\n\",\n+\t  e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8], e[9], e[10],\n+\t  e[11], e[12], e[13], e[14], e[15]);\n+    }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "825003d61032d9fc09d4ea58f7ddb931591c4dd5", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-packuswb-1.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-packuswb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-packuswb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-packuswb-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_packuswb_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_packus_epi16 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_w s1, s2;\n+  union128i_ub u;\n+  unsigned char e[16];\n+  int i, tmp;\n+   \n+  s1.x = _mm_set_epi16 (1, 2, 3, 4, -5, -6, -7, -8);\n+  s2.x = _mm_set_epi16 (-9, -10, -11, -12, 13, 14, 15, 16);\n+  u.x = test (s1.x, s2.x); \n+\n+  for (i=0; i<8; i++)\n+    {\n+      tmp = s1.a[i]<0 ? 0 : s1.a[i];\n+      tmp = tmp>255 ? 255 : tmp;\n+      e[i] = tmp;\n+\n+      tmp = s2.a[i]<0 ? 0 : s2.a[i];\n+      tmp = tmp>255 ? 255 : tmp;\n+      e[i+8] = tmp;\n+    }\n+\n+  if (check_union128i_ub (u, e))\n+#if DEBUG\n+    {\n+      printf (\"sse2_test_packuswb_1; check_union128i_w failed\\n\");\n+      printf (\"\\t ([%x,%x,%x,%x, %x,%x,%x,%x], [%x,%x,%x,%x, %x,%x,%x,%x])\\n\",\n+\t      s1.a[0], s1.a[1], s1.a[2], s1.a[3], s1.a[4], s1.a[5], s1.a[6],\n+\t      s1.a[7], s2.a[0], s2.a[1], s2.a[2], s2.a[3], s2.a[4], s2.a[5],\n+\t      s2.a[6], s2.a[7]);\n+      printf (\"\\t\\t -> [%x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x]\\n\",\n+\t      u.a[0], u.a[1], u.a[2], u.a[3], u.a[4], u.a[5], u.a[6], u.a[7],\n+\t      u.a[8], u.a[9], u.a[10], u.a[11], u.a[12], u.a[13], u.a[14],\n+\t      u.a[15]);\n+      printf (\n+\t  \"\\t expect [%x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x]\\n\",\n+\t  e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8], e[9], e[10],\n+\t  e[11], e[12], e[13], e[14], e[15]);\n+    }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "766e2ecfde79130b952e808457906094403eb413", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-paddb-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-paddb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-paddb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-paddb-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_paddb_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_add_epi8 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_b u, s1, s2;\n+  char e[16];\n+  int i;\n+   \n+  s1.x = _mm_set_epi8 (1,2,3,4,10,20,30,90,-80,-40,-100,-15,98, 25, 98,7);\n+  s2.x = _mm_set_epi8 (88, 44, 33, 22, 11, 98, 76, -100, -34, -78, -39, 6, 3, 4, 5, 119);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 16; i++)\n+     e[i] = s1.a[i] + s2.a[i];\n+\n+  if (check_union128i_b (u, e))\n+    abort ();\n+}"}, {"sha": "8c5796b282f35efaeae2eb9f459a28049e645e26", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-paddd-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-paddd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-paddd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-paddd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_paddd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_add_epi32 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_d u, s1, s2;\n+  int e[4];\n+  int i;\n+   \n+  s1.x = _mm_set_epi32 (30,90,-80,-40);\n+  s2.x = _mm_set_epi32 (76, -100, -34, -78);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 4; i++)\n+     e[i] = s1.a[i] + s2.a[i];\n+\n+  if (check_union128i_d (u, e))\n+    abort ();\n+}"}, {"sha": "67a85a089d382924efd38807ac937ef66ea7bcf0", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-paddq-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-paddq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-paddq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-paddq-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_paddq_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_add_epi64 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_q u, s1, s2;\n+  long long e[2];\n+  int i;\n+   \n+  s1.x = _mm_set_epi64x (90,-80);\n+  s2.x = _mm_set_epi64x (76, -100);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 2; i++)\n+     e[i] = s1.a[i] + s2.a[i];\n+\n+  if (check_union128i_q (u, e))\n+    abort ();\n+}"}, {"sha": "cb6f37ad229315488f0dedacbc906c937641675f", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-paddsb-1.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-paddsb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-paddsb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-paddsb-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_paddsb_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_adds_epi8 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_b u, s1, s2;\n+  char e[16];\n+  int i, tmp;\n+   \n+  s1.x = _mm_set_epi8 (1,2,3,4,10,20,30,90,-80,-40,-100,-15,98, 25, 98,7);\n+  s2.x = _mm_set_epi8 (88, 44, 33, 22, 11, 98, 76, -100, -34, -78, -39, 6, 3, 4, 5, 119);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 16; i++)\n+    {\n+      tmp = (signed char)s1.a[i] + (signed char)s2.a[i];\n+\n+      if (tmp > 127)\n+        tmp = 127;\n+      if (tmp < -128)\n+        tmp = -128;\n+\n+      e[i] = tmp;\n+    }\n+\n+  if (check_union128i_b (u, e))\n+#if DEBUG\n+    {\n+      printf (\"sse2_test_paddsb_1; check_union128i_b failed\\n\");\n+      printf (\n+\t  \"\\tadds\\t([%x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x],\\n\",\n+\t      s1.a[0], s1.a[1], s1.a[2], s1.a[3], s1.a[4], s1.a[5], s1.a[6],\n+\t      s1.a[7], s1.a[8], s1.a[9], s1.a[10], s1.a[11], s1.a[12], s1.a[13],\n+\t      s1.a[14], s1.a[15]);\n+      printf (\"\\t\\t [%x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x])\\n\",\n+\t      s2.a[0], s2.a[1], s2.a[2], s2.a[3], s2.a[4], s2.a[5], s2.a[6],\n+\t      s2.a[7], s2.a[8], s2.a[9], s2.a[10], s2.a[11], s2.a[12], s2.a[13],\n+\t      s2.a[14], s2.a[15]);\n+      printf (\"\\t ->\\t [%x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x]\\n\",\n+\t      u.a[0], u.a[1], u.a[2], u.a[3], u.a[4], u.a[5], u.a[6], u.a[7],\n+\t      u.a[8], u.a[9], u.a[10], u.a[11], u.a[12], u.a[13], u.a[14],\n+\t      u.a[15]);\n+      printf (\n+\t  \"\\texpect\\t [%x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x]\\n\",\n+\t  e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8], e[9], e[10],\n+\t  e[11], e[12], e[13], e[14], e[15]);\n+    }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "82ce0a4b62a28e915e76b5d9eacb4f74990a63b6", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-paddsw-1.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-paddsw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-paddsw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-paddsw-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_paddsw_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_adds_epi16 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_w u, s1, s2;\n+  short e[8];\n+  int i, tmp;\n+   \n+  s1.x = _mm_set_epi16 (10,20,30,90,-80,-40,-100,-15);\n+  s2.x = _mm_set_epi16 (11, 98, 76, -100, -34, -78, -39, 14);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 8; i++)\n+    {\n+      tmp = s1.a[i] + s2.a[i];\n+      \n+      if (tmp > 32767)\n+        tmp = 32767;\n+      if (tmp < -32768)\n+        tmp = -32768;\n+      \n+      e[i] = tmp;\n+    }\n+\n+  if (check_union128i_w (u, e))\n+#if DEBUG\n+    {\n+      printf (\"sse2_test_paddsw_1; check_union128i_w failed\\n\");\n+      printf (\"\\tadds\\t([%x,%x,%x,%x, %x,%x,%x,%x],\\n\", s1.a[0], s1.a[1],\n+\t      s1.a[2], s1.a[3], s1.a[4], s1.a[5], s1.a[6], s1.a[7]);\n+      printf (\"\\t\\t [%x,%x,%x,%x, %x,%x,%x,%x])\\n\", s2.a[0], s2.a[1], s2.a[2],\n+\t      s2.a[3], s2.a[4], s2.a[5], s2.a[6], s2.a[7]);\n+      printf (\"\\t ->\\t [%x,%x,%x,%x, %x,%x,%x,%x]\\n\", u.a[0], u.a[1], u.a[2],\n+\t      u.a[3], u.a[4], u.a[5], u.a[6], u.a[7]);\n+      printf (\"\\texpect\\t [%x,%x,%x,%x, %x,%x,%x,%x]\\n\", e[0], e[1], e[2], e[3],\n+\t      e[4], e[5], e[6], e[7]);\n+    }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "df3d8b230eef2c9f014178be3189267646f179e0", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-paddusb-1.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-paddusb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-paddusb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-paddusb-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_paddusb_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_adds_epu8 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_b u, s1, s2;\n+  char e[16] = {0};\n+  int i, tmp;\n+   \n+  s1.x = _mm_set_epi8 (30, 2, 3, 4, 10, 20, 30, 90, 80, 40, 100, 15, 98, 25, 98, 7);\n+  s2.x = _mm_set_epi8 (88, 44, 33, 22, 11, 98, 76, 100, 34, 78, 39, 6,  3,  4, 5, 119);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 16; i++)\n+    {\n+      tmp = (unsigned char)s1.a[i] + (unsigned char)s2.a[i];\n+\n+      if (tmp > 255)\n+        tmp = -1;\n+      if (tmp < 0)\n+        tmp = 0; \n+\n+      e[i] = tmp; \n+    }\n+\n+  if (check_union128i_b (u, e))\n+#if DEBUG\n+    {\n+      printf (\"sse2_test_paddusb_1; check_union128i_b failed\\n\");\n+      printf (\n+\t  \"\\tadds\\t([%x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x],\\n\",\n+\t      s1.a[0], s1.a[1], s1.a[2], s1.a[3], s1.a[4], s1.a[5], s1.a[6],\n+\t      s1.a[7], s1.a[8], s1.a[9], s1.a[10], s1.a[11], s1.a[12], s1.a[13],\n+\t      s1.a[14], s1.a[15]);\n+      printf (\"\\t\\t [%x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x])\\n\",\n+\t      s2.a[0], s2.a[1], s2.a[2], s2.a[3], s2.a[4], s2.a[5], s2.a[6],\n+\t      s2.a[7], s2.a[8], s2.a[9], s2.a[10], s2.a[11], s2.a[12], s2.a[13],\n+\t      s2.a[14], s2.a[15]);\n+      printf (\"\\t ->\\t [%x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x]\\n\",\n+\t      u.a[0], u.a[1], u.a[2], u.a[3], u.a[4], u.a[5], u.a[6], u.a[7],\n+\t      u.a[8], u.a[9], u.a[10], u.a[11], u.a[12], u.a[13], u.a[14],\n+\t      u.a[15]);\n+      printf (\n+\t  \"\\texpect\\t [%x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x]\\n\",\n+\t  e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8], e[9], e[10],\n+\t  e[11], e[12], e[13], e[14], e[15]);\n+    }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "0bc707446b5f5cd67a0109931653c09f1b0f3906", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-paddusw-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-paddusw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-paddusw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-paddusw-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_paddusw_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_adds_epu16 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_w u, s1, s2;\n+  short e[8];\n+  int i, tmp;\n+   \n+  s1.x = _mm_set_epi16 (10,20,30,90,80,40,100,15);\n+  s2.x = _mm_set_epi16 (11, 98, 76, 100, 34, 78, 39, 14);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 8; i++)\n+    {\n+      tmp = s1.a[i] + s2.a[i];\n+      \n+      if (tmp > 65535)\n+        tmp = -1;\n+\n+      if (tmp < 0)\n+        tmp = 0;\n+      \n+      e[i] = tmp;\n+    }\n+\n+  if (check_union128i_w (u, e))\n+    abort ();\n+}"}, {"sha": "d91351efa92c6868ea95d010213ba6f1064a0ba2", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-paddw-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-paddw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-paddw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-paddw-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_paddw_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_add_epi16 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_w u, s1, s2;\n+  short e[8];\n+  int i;\n+   \n+  s1.x = _mm_set_epi16 (10,20,30,90,-80,-40,-100,-15);\n+  s2.x = _mm_set_epi16 (11, 98, 76, -100, -34, -78, -39, 14);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 8; i++)\n+     e[i] = s1.a[i] + s2.a[i];\n+\n+  if (check_union128i_w (u, e))\n+    abort ();\n+}"}, {"sha": "5d489a3ce087f05fa94cd0d95625493ffc6091e2", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pavgb-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pavgb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pavgb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pavgb-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pavgb_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  return _mm_avg_epu8 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_ub u, s1, s2;\n+  unsigned char e[16];\n+  int i;\n+   \n+  s1.x = _mm_set_epi8 (1,2,3,4,10,20,30,90,80,40,100,15,98, 25, 98,7);\n+  s2.x = _mm_set_epi8 (88, 44, 33, 22, 11, 98, 76, 100, 34, 78, 39, 6, 3, 4, 5, 119);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 16; i++)\n+     e[i] = (s1.a[i] + s2.a[i]+1)>>1;\n+\n+  if (check_union128i_ub (u, e))\n+    abort ();\n+}"}, {"sha": "995cb8fa488bba5d51bd8543a4a36fbbd92b38b9", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pavgw-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pavgw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pavgw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pavgw-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pavgw_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  return _mm_avg_epu16 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_uw u, s1, s2;\n+  unsigned short e[8];\n+  int i;\n+   \n+  s1.x = _mm_set_epi16 (10,20,30,90,80,40,100,15);\n+  s2.x = _mm_set_epi16 (11, 98, 76, 100, 34, 78, 39, 14);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 8; i++)\n+     e[i] = (s1.a[i] + s2.a[i]+1)>>1;\n+\n+  if (check_union128i_uw (u, e))\n+    abort ();\n+}"}, {"sha": "3d0e4c60e33ea55c982cf623e46fda8b70fa204b", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pcmpeqb-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pcmpeqb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pcmpeqb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pcmpeqb-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pcmpeqb_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  return _mm_cmpeq_epi8 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_b u, s1, s2;\n+  char e[16];\n+  int i;\n+   \n+  s1.x = _mm_set_epi8 (1,2,3,4,10,20,30,90,80,40,100,15,98, 25, 98,7);\n+  s2.x = _mm_set_epi8 (88, 44, 33, 22, 11, 98, 76, 100, 34, 78, 39, 6, 3, 4, 5, 119);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 16; i++)\n+     e[i] = (s1.a[i] == s2.a[i]) ? -1:0;\n+\n+  if (check_union128i_b (u, e))\n+    abort ();\n+}"}, {"sha": "4af7deccae88a42f5aca65a11128ac69ff91012b", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pcmpeqd-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pcmpeqd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pcmpeqd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pcmpeqd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pcmpeqd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  return _mm_cmpeq_epi32 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_d u, s1, s2;\n+  int e[4];\n+  int i;\n+   \n+  s1.x = _mm_set_epi32 (98, 25, 98,7);\n+  s2.x = _mm_set_epi32 (88, 44, 33, 229);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 4; i++)\n+     e[i] = (s1.a[i] == s2.a[i]) ? -1:0;\n+\n+  if (check_union128i_d (u, e))\n+    abort ();\n+}"}, {"sha": "fca6b099e963c881bbe3f3d9206d741cb123b050", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pcmpeqw-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pcmpeqw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pcmpeqw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pcmpeqw-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pcmpeqw_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  return _mm_cmpeq_epi16 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_w u, s1, s2;\n+  short e[8];\n+  int i;\n+   \n+  s1.x = _mm_set_epi16 (20,30,90,80,40,100,15,98);\n+  s2.x = _mm_set_epi16 (34, 78, 39, 6, 3, 4, 5, 119);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 8; i++)\n+     e[i] = (s1.a[i] == s2.a[i]) ? -1:0;\n+\n+  if (check_union128i_w (u, e))\n+    abort ();\n+}"}, {"sha": "10fbc5cd912dfb1a6bac518839dd643b49a1da1a", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pcmpgtb-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pcmpgtb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pcmpgtb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pcmpgtb-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pcmpgtb_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  return _mm_cmpgt_epi8 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_b u, s1, s2;\n+  char e[16];\n+  int i;\n+   \n+  s1.x = _mm_set_epi8 (1,2,3,4,10,20,30,90,80,40,100,15,98, 25, 98,7);\n+  s2.x = _mm_set_epi8 (88, 44, 33, 22, 11, 98, 76, 100, 34, 78, 39, 6, 3, 4, 5, 119);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 16; i++)\n+     e[i] = (s1.a[i] > s2.a[i]) ? -1:0;\n+\n+  if (check_union128i_b (u, e))\n+    abort ();\n+}"}, {"sha": "bc046d6944bfde8e1847a584c876cabf148e49d6", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pcmpgtd-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pcmpgtd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pcmpgtd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pcmpgtd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pcmpgtd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  return _mm_cmpgt_epi32 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_d u, s1, s2;\n+  int e[4];\n+  int i;\n+   \n+  s1.x = _mm_set_epi32 (98, 25, 98,7);\n+  s2.x = _mm_set_epi32 (88, 44, 33, 229);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 4; i++)\n+     e[i] = (s1.a[i] > s2.a[i]) ? -1:0;\n+\n+  if (check_union128i_d (u, e))\n+    abort ();\n+}"}, {"sha": "19b82cbd7d454e357ebf494ac6e80d8bd7808918", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pcmpgtw-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pcmpgtw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pcmpgtw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pcmpgtw-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pcmpgtw_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  return _mm_cmpgt_epi16 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_w u, s1, s2;\n+  short e[8];\n+  int i;\n+   \n+  s1.x = _mm_set_epi16 (20,30,90,80,40,100,15,98);\n+  s2.x = _mm_set_epi16 (34, 78, 39, 6, 3, 4, 5, 119);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 8; i++)\n+     e[i] = (s1.a[i] > s2.a[i]) ? -1:0;\n+\n+  if (check_union128i_w (u, e))\n+    abort ();\n+}"}, {"sha": "2bb812e411fa82962b8acde66d9eabefe671757c", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pextrw.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pextrw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pextrw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pextrw.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pextrw_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+#define msk0   0\n+#define msk1   1\n+#define msk2   2\n+#define msk3   3\n+#define msk4   4\n+#define msk5   5\n+#define msk6   6\n+#define msk7   7\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      int i[4];\n+      short s[8];\n+    } val1;\n+  int res[8], masks[8];\n+  int i;\n+\n+  val1.i[0] = 0x04030201;\n+  val1.i[1] = 0x08070605;\n+  val1.i[2] = 0x0C0B0A09;\n+  val1.i[3] = 0x100F0E0D;\n+\n+  res[0] = _mm_extract_epi16 (val1.x, msk0);\n+  res[1] = _mm_extract_epi16 (val1.x, msk1);\n+  res[2] = _mm_extract_epi16 (val1.x, msk2);\n+  res[3] = _mm_extract_epi16 (val1.x, msk3);\n+  res[4] = _mm_extract_epi16 (val1.x, msk4);\n+  res[5] = _mm_extract_epi16 (val1.x, msk5);\n+  res[6] = _mm_extract_epi16 (val1.x, msk6);\n+  res[7] = _mm_extract_epi16 (val1.x, msk7);\n+\n+  masks[0] = msk0;\n+  masks[1] = msk1;\n+  masks[2] = msk2;\n+  masks[3] = msk3;\n+  masks[4] = msk4;\n+  masks[5] = msk5;\n+  masks[6] = msk6;\n+  masks[7] = msk7;\n+\n+  for (i = 0; i < 8; i++)\n+    if (res[i] != val1.s [masks[i]])\n+      abort ();\n+}"}, {"sha": "2fd5b0bd6252b1517b26956c87c829fc32f0c923", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pinsrw.c", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pinsrw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pinsrw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pinsrw.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,87 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pinsrw_1\n+#endif\n+\n+#include <emmintrin.h>\n+#include <string.h>\n+\n+#define msk0 0x00\n+#define msk1 0x01\n+#define msk2 0x02\n+#define msk3 0x03\n+#define msk4 0x04\n+#define msk5 0x05\n+#define msk6 0x06\n+#define msk7 0x07\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned int i[4];\n+      unsigned short s[8];\n+    } res [8], val, tmp;\n+  int masks[8];\n+  unsigned short ins[4] = { 3, 4, 5, 6 };\n+  int i;\n+\n+  val.i[0] = 0x35251505;\n+  val.i[1] = 0x75655545;\n+  val.i[2] = 0xB5A59585;\n+  val.i[3] = 0xF5E5D5C5;\n+\n+  /* Check pinsrw imm8, r32, xmm.  */\n+  res[0].x = _mm_insert_epi16 (val.x, ins[0], msk0);\n+  res[1].x = _mm_insert_epi16 (val.x, ins[0], msk1);\n+  res[2].x = _mm_insert_epi16 (val.x, ins[0], msk2);\n+  res[3].x = _mm_insert_epi16 (val.x, ins[0], msk3);\n+  res[4].x = _mm_insert_epi16 (val.x, ins[0], msk4);\n+  res[5].x = _mm_insert_epi16 (val.x, ins[0], msk5);\n+  res[6].x = _mm_insert_epi16 (val.x, ins[0], msk6);\n+  res[7].x = _mm_insert_epi16 (val.x, ins[0], msk7);\n+\n+  masks[0] = msk0;\n+  masks[1] = msk1;\n+  masks[2] = msk2;\n+  masks[3] = msk3;\n+  masks[4] = msk4;\n+  masks[5] = msk5;\n+  masks[6] = msk6;\n+  masks[7] = msk7;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      tmp.x = val.x;\n+      tmp.s[masks[i]] = ins[0];\n+      if (memcmp (&tmp, &res[i], sizeof (tmp)))\n+\tabort ();\n+    }\n+    \n+  /* Check pinsrw imm8, m16, xmm.  */\n+  for (i = 0; i < 8; i++)\n+    {\n+      res[i].x = _mm_insert_epi16 (val.x, ins[i % 2], msk0);\n+      masks[i] = msk0;\n+    }\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      tmp.x = val.x;\n+      tmp.s[masks[i]] = ins[i % 2];\n+      if (memcmp (&tmp, &res[i], sizeof (tmp)))\n+\tabort ();\n+    }\n+}"}, {"sha": "9595598ac637a6064f69d494a134071269777f5a", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pmaddwd-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pmaddwd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pmaddwd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pmaddwd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pmaddwd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_madd_epi16 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_w  s1, s2;\n+  union128i_d u;\n+  int e[4]; \n+  int i; \n+ \n+  s1.x = _mm_set_epi16 (2134,3343,1234,6354, 1, 3, 4, 5);\n+  s2.x = _mm_set_epi16 (41124,234,2344,2354,9, -1, -8, -10);\n+  u.x = test (s1.x, s2.x); \n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = (s1.a[i*2] * s2.a[i*2])+(s1.a[(i*2) + 1] * s2.a[(i*2) + 1]);   \n+\n+  if (check_union128i_d (u, e))\n+    abort ();\n+}"}, {"sha": "c1765aeecc68f578385dd9b256c26b1073d614ee", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pmaxsw-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pmaxsw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pmaxsw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pmaxsw-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pmaxsw_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  return _mm_max_epi16 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_w u, s1, s2;\n+  short e[8];\n+  int i;\n+   \n+  s1.x = _mm_set_epi16 (1,2,3,4,5,6,7,8);\n+  s2.x = _mm_set_epi16 (8,7,6,5,4,3,2,1);\n+  u.x = test (s1.x, s2.x);\n+\n+  for (i=0; i<8; i++)\n+    e[i] = s1.a[i]>s2.a[i]?s1.a[i]:s2.a[i]; \n+\n+  if (check_union128i_w (u, e))\n+    abort ();\n+}"}, {"sha": "500d02e2e33efd81710681543fff2c3cb2e7134e", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pmaxub-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pmaxub-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pmaxub-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pmaxub-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pmaxub_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  return _mm_max_epu8 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_ub u, s1, s2;\n+  unsigned char e[16];\n+  int i;\n+   \n+  s1.x = _mm_set_epi8 (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16);\n+  s2.x = _mm_set_epi8 (16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1);\n+  u.x = test (s1.x, s2.x);\n+\n+  for (i=0; i<16; i++)\n+    e[i] = s1.a[i]>s2.a[i]?s1.a[i]:s2.a[i]; \n+\n+  if (check_union128i_ub (u, e))\n+    abort ();\n+}"}, {"sha": "5af2280a72266f41bf8dda40984e5aa723cfbc10", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pminsw-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pminsw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pminsw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pminsw-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pminsw_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  return _mm_min_epi16 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_w u, s1, s2;\n+  short e[8];\n+  int i;\n+   \n+  s1.x = _mm_set_epi16 (1,2,3,4,5,6,7,8);\n+  s2.x = _mm_set_epi16 (8,7,6,5,4,3,2,1);\n+  u.x = test (s1.x, s2.x);\n+\n+  for (i=0; i<8; i++)\n+    e[i] = s1.a[i]<s2.a[i]?s1.a[i]:s2.a[i]; \n+\n+  if (check_union128i_w (u, e))\n+    abort ();\n+}"}, {"sha": "1eeca208d946bce4b897e338b47e04fa2437070c", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pminub-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pminub-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pminub-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pminub-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pminub_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  return _mm_min_epu8 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_ub u, s1, s2;\n+  unsigned char e[16];\n+  int i;\n+   \n+  s1.x = _mm_set_epi8 (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16);\n+  s2.x = _mm_set_epi8 (16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1);\n+  u.x = test (s1.x, s2.x);\n+\n+  for (i=0; i<16; i++)\n+    e[i] = s1.a[i]<s2.a[i]?s1.a[i]:s2.a[i]; \n+\n+  if (check_union128i_ub (u, e))\n+    abort ();\n+}"}, {"sha": "37d72c231ea337a162bb385c5320ad75903549f0", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pmovmskb-1.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pmovmskb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pmovmskb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pmovmskb-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pmovmskb_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+#ifdef _ARCH_PWR8\n+static int\n+__attribute__((noinline, unused))\n+test (__m128i s1)\n+{\n+  return _mm_movemask_epi8 (s1); \n+}\n+#endif\n+\n+static void\n+TEST (void)\n+{\n+#ifdef _ARCH_PWR8\n+  union128i_b s1;\n+  int i, u, e=0;\n+   \n+  s1.x = _mm_set_epi8 (1,2,3,4,10,20,30,90,-80,-40,-100,-15,98, 25, 98,7);\n+\n+  __asm(\"\" : \"+v\"(s1.x));\n+  u = test (s1.x); \n+  \n+  for (i = 0; i < 16; i++)\n+    if (s1.a[i] & (1<<7))\n+      e = e | (1<<i);\n+\n+  if (checkVi (&u, &e, 1))\n+#if DEBUG\n+    {\n+      printf (\"sse2_test_pmovmskb_1; checkVi failed\\n\");\n+      printf (\"\\t ([%x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x], -> %x)\\n\",\n+\t      s1.a[0], s1.a[1], s1.a[2], s1.a[3], s1.a[4], s1.a[5], s1.a[6],\n+\t      s1.a[7], s1.a[8], s1.a[9], s1.a[10], s1.a[11], s1.a[12], s1.a[13],\n+\t      s1.a[14], s1.a[15], u);\n+      printf (\"\\t expect %x\\n\", e);\n+    }\n+#else\n+    abort ();\n+#endif\n+#endif\n+}"}, {"sha": "3635a867dbcf24d717c0620f6b2c66bf3946ff22", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pmulhuw-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pmulhuw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pmulhuw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pmulhuw-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pmulhuw_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  return _mm_mulhi_epu16 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_uw u, s1, s2;\n+  unsigned short e[8];\n+  int i, tmp;\n+   \n+  s1.x = _mm_set_epi16 (10,2067,3033,90,80,40,1000,15);\n+  s2.x = _mm_set_epi16 (11, 9834, 7444, 10222, 34, 7833, 39, 14);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 8; i++)\n+    {\n+      tmp = s1.a[i] * s2.a[i];\n+    \n+      e[i] = (tmp & 0xffff0000)>>16;\n+    }\n+\n+  if (check_union128i_uw (u, e))\n+    abort ();\n+}"}, {"sha": "1255c03b0514a03882cb22794897e597aa0046c2", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pmulhw-1.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pmulhw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pmulhw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pmulhw-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pmulhw_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_mulhi_epi16 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_w u, s1, s2;\n+  short e[8];\n+  int i, tmp;\n+   \n+  s1.x = _mm_set_epi16 (10,2067,-3033,90,80,40,-1000,15);\n+  s2.x = _mm_set_epi16 (11, 9834, 7444, -10222, 34, -7833, 39, 14);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 8; i++)\n+    {\n+      tmp = s1.a[i] * s2.a[i];\n+    \n+      e[i] = (tmp & 0xffff0000)>>16;\n+    }\n+\n+  if (check_union128i_w (u, e))\n+#if DEBUG\n+    {\n+      printf (\"sse2_test_pmulhw_1; check_union128i_w failed\\n\");\n+      printf (\"\\tmulhi\\t([%x,%x,%x,%x, %x,%x,%x,%x],\\n\", s1.a[0], s1.a[1],\n+\t      s1.a[2], s1.a[3], s1.a[4], s1.a[5], s1.a[6], s1.a[7]);\n+      printf (\"\\t\\t [%x,%x,%x,%x, %x,%x,%x,%x])\\n\", s2.a[0], s2.a[1], s2.a[2],\n+\t      s2.a[3], s2.a[4], s2.a[5], s2.a[6], s2.a[7]);\n+      printf (\"\\t ->\\t [%x,%x,%x,%x, %x,%x,%x,%x]\\n\", u.a[0], u.a[1], u.a[2],\n+\t      u.a[3], u.a[4], u.a[5], u.a[6], u.a[7]);\n+      printf (\"\\texpect\\t [%x,%x,%x,%x, %x,%x,%x,%x]\\n\", e[0], e[1], e[2], e[3],\n+\t      e[4], e[5], e[6], e[7]);\n+    }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "3dca01ab3a8d3c296f1cb3674a060ccf6b68b79a", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pmullw-1.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pmullw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pmullw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pmullw-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pmullw_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_mullo_epi16 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_w u, s1, s2;\n+  short e[8];\n+  int i, tmp;\n+   \n+  s1.x = _mm_set_epi16 (10,2067,-3033,90,80,40,-1000,15);\n+  s2.x = _mm_set_epi16 (11, 9834, 7444, -10222, 34, -7833, 39, 14);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 8; i++)\n+    {\n+      tmp = s1.a[i] * s2.a[i];\n+    \n+      e[i] = tmp;\n+    }\n+\n+  if (check_union128i_w (u, e))\n+    abort ();\n+}"}, {"sha": "54fb06fc9fd31d24ae05fe03d4a6deec82e47303", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pmuludq-1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pmuludq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pmuludq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pmuludq-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pmuludq_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_mul_epu32 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_d s1, s2;\n+  union128i_q u;\n+  long long e[2];\n+   \n+  s1.x = _mm_set_epi32 (10,2067,3033,905);\n+  s2.x = _mm_set_epi32 (11, 9834, 7444, 10222);\n+  __asm(\"\" : \"+v\"(s1.x), \"+v\"(s2.x));\n+  u.x = test (s1.x, s2.x); \n+   \n+  e[0] = s1.a[0] * s2.a[0];\n+  e[1] = s1.a[2] * s2.a[2];\n+\n+  if (check_union128i_q (u, e))\n+#if DEBUG\n+    {\n+      printf (\"sse2_test_pmuludq_1; check_union128i_q failed\\n\");\n+      printf (\"\\t ([%x,%x,%x,%x], [%x,%x,%x,%x], -> [%llx, %llx])\\n\", s1.a[0],\n+\t      s1.a[1], s1.a[2], s1.a[3], s2.a[0], s2.a[1], s2.a[2], s2.a[3],\n+\t      u.a[0], u.a[1]);\n+      printf (\"\\t expect [%llx, %llx]\\n\", e[0], e[1]);\n+    }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "0d6d6a340b818d700715c5a9b51ddaa8b0a9a008", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-psadbw-1.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psadbw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psadbw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psadbw-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_psadbw_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  return _mm_sad_epu8 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_ub s1, s2;\n+  union128i_w u;\n+  short e[8] = { 0 };\n+  unsigned char tmp[16];\n+  int i;\n+   \n+  s1.x = _mm_set_epi8 (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16);\n+  s2.x = _mm_set_epi8 (16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1);\n+  u.x = test (s1.x, s2.x);\n+\n+  for (i = 0; i < 16; i++)\n+    tmp [i] = __builtin_abs (s1.a[i] - s2.a[i]);\n+\n+  for (i = 0; i < 8; i++)\n+    e[0] += tmp[i];\n+\n+  for (i = 8; i < 16; i++)\n+    e[4] += tmp[i]; \n+\n+\n+  if (check_union128i_w (u, e))\n+#if DEBUG\n+    {\n+      printf (\"sse2_test_psadbw_1; check_union128i_w failed\\n\");\n+      printf (\n+\t  \"\\tadds\\t([%x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x],\\n\",\n+\t      s1.a[0], s1.a[1], s1.a[2], s1.a[3], s1.a[4], s1.a[5], s1.a[6],\n+\t      s1.a[7], s1.a[8], s1.a[9], s1.a[10], s1.a[11], s1.a[12], s1.a[13],\n+\t      s1.a[14], s1.a[15]);\n+      printf (\"\\t\\t [%x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x])\\n\",\n+\t      s2.a[0], s2.a[1], s2.a[2], s2.a[3], s2.a[4], s2.a[5], s2.a[6],\n+\t      s2.a[7], s2.a[8], s2.a[9], s2.a[10], s2.a[11], s2.a[12], s2.a[13],\n+\t      s2.a[14], s2.a[15]);\n+      printf (\"\\t ->\\t [%x,%x,%x,%x, %x,%x,%x,%x]\\n\", u.a[0], u.a[1], u.a[2],\n+\t      u.a[3], u.a[4], u.a[5], u.a[6], u.a[7]);\n+      printf (\"\\texpect\\t [%x,%x,%x,%x, %x,%x,%x,%x]\\n\", e[0], e[1], e[2], e[3],\n+\t      e[4], e[5], e[6], e[7]);\n+    }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "6c195fb4557c2b02a5a3560dd0b10dc154c936f7", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pshufd-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pshufd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pshufd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pshufd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pshufd_1\n+#endif\n+\n+#define N 0xec\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1)\n+{\n+  return _mm_shuffle_epi32 (s1, N); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_d u, s1;\n+  int e[4] = { 0 };\n+  int i;\n+   \n+  s1.x = _mm_set_epi32 (16,15,14,13);\n+  u.x = test (s1.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = s1.a[((N & (0x3<<(2*i)))>>(2*i))];\n+\n+  if (check_union128i_d(u, e))\n+#if DEBUG\n+  {\n+      printf (\"sse2_test_pshufd_1; check_union128i_d failed\\n\");\n+      printf (\"\\t ([%x,%x,%x,%x]) -> [%x,%x,%x,%x]\\n\", s1.a[0], s1.a[1],\n+\t      s1.a[2], s1.a[3], u.a[0], u.a[1], u.a[2], u.a[3]);\n+      printf (\"\\t expect [%x,%x,%x,%x]\\n\", e[0], e[1], e[2], e[3]);\n+  }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "a92302178307d33f4e910472c3aa046b6a9b403a", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pshufhw-1.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pshufhw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pshufhw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pshufhw-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pshufhw_1\n+#endif\n+\n+#define N 0xec\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1)\n+{\n+  return _mm_shufflehi_epi16 (s1, N); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_q s1;\n+  union128i_w u;\n+  short  e[8] = { 0 };\n+  int i;\n+  int m1[4] = { 0x3, 0x3<<2, 0x3<<4, 0x3<<6 };\n+  int m2[4];\n+  \n+  s1.x = _mm_set_epi64x (0xabcde,0xef58a234);\n+  u.x = test (s1.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = (s1.a[0]>>(16 * i)) & 0xffff;\n+\n+  for (i = 0; i < 4; i++)\n+    m2[i] = (N & m1[i])>>(2*i);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i+4] = (s1.a[1] >> (16 * m2[i])) & 0xffff;\n+\n+  if (check_union128i_w(u, e))\n+#if DEBUG\n+  {\n+    union128i_w s;\n+    s.x = s1.x;\n+    printf (\"sse2_test_pshufhw_1; check_union128i_w failed\\n\");\n+    printf (\"\\t ([%hx,%hx,%hx,%hx, %hx,%hx,%hx,%hx])\\n\", s.a[0], s.a[1],\n+\t      s.a[2], s.a[3], s.a[4], s.a[5], s.a[6], s.a[7]);\n+    printf (\"\\t\\t -> [%hx,%hx,%hx,%hx, %hx,%hx,%hx,%hx]\\n\", u.a[0], u.a[1],\n+\t      u.a[2], u.a[3], u.a[4], u.a[5], u.a[6], u.a[7]);\n+    printf (\"\\t expect [%hx,%hx,%hx,%hx, %hx,%hx,%hx,%hx]\\n\", e[0], e[1],\n+\t      e[2], e[3], e[4], e[5], e[6], e[7]);\n+  }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "e662cec6e197f222c781a9cd87a2d7e8d3e62acd", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pshuflw-1.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pshuflw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pshuflw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pshuflw-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pshuflw_1\n+#endif\n+\n+#define N 0xec\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1)\n+{\n+  return _mm_shufflelo_epi16 (s1, N); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_q s1;\n+  union128i_w u;\n+  short  e[8] = { 0 };\n+  int i;\n+  int m1[4] = { 0x3, 0x3<<2, 0x3<<4, 0x3<<6 };\n+  int m2[4];\n+  \n+  s1.x = _mm_set_epi64x (0xabcde,0xef58a234);\n+  u.x = test (s1.x);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i+4] = (s1.a[1]>>(16 * i)) & 0xffff;\n+\n+  for (i = 0; i < 4; i++)\n+    m2[i] = (N & m1[i])>>(2*i);\n+\n+  for (i = 0; i < 4; i++)\n+    e[i] = (s1.a[0] >> (16 * m2[i])) & 0xffff;\n+\n+  if (check_union128i_w(u, e))\n+#if DEBUG\n+  {\n+    union128i_w s;\n+    s.x = s1.x;\n+    printf (\"sse2_test_pshuflw_1; check_union128i_w failed\\n\");\n+    printf (\"\\t ([%hx,%hx,%hx,%hx, %hx,%hx,%hx,%hx])\\n\", s.a[0], s.a[1],\n+\t      s.a[2], s.a[3], s.a[4], s.a[5], s.a[6], s.a[7]);\n+    printf (\"\\t\\t -> [%hx,%hx,%hx,%hx, %hx,%hx,%hx,%hx]\\n\", u.a[0], u.a[1],\n+\t      u.a[2], u.a[3], u.a[4], u.a[5], u.a[6], u.a[7]);\n+    printf (\"\\t expect [%hx,%hx,%hx,%hx, %hx,%hx,%hx,%hx]\\n\", e[0], e[1],\n+\t      e[2], e[3], e[4], e[5], e[6], e[7]);\n+  }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "90aac103fc28b5fd2caf13de18dcd4a436d4bb61", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pslld-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pslld-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pslld-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pslld-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pslld_1\n+#endif\n+\n+#define N 0xf\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1)\n+{\n+  return _mm_slli_epi32 (s1, N); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_d u, s;\n+  int e[4] = {0};\n+  int i;\n+ \n+  s.x = _mm_set_epi32 (1, -2, 3, 4);\n+\n+  u.x = test (s.x);\n+\n+  if (N < 32)\n+    for (i = 0; i < 4; i++)\n+      e[i] = s.a[i] << N; \n+\n+  if (check_union128i_d (u, e))\n+    abort (); \n+}"}, {"sha": "2b4c5e797fff1533b78fc151c2d23fb0a3f4fa77", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pslld-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pslld-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pslld-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pslld-2.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pslld_2\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i c)\n+{\n+  return _mm_sll_epi32 (s1, c); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_d u, s;\n+  union128i_q c;\n+  int e[4] = { 0 };\n+  int i;\n+ \n+  s.x = _mm_set_epi32 (2, -3, 0x7000, 0x9000);\n+  c.x = _mm_set_epi64x (12, 23);\n+\n+  __asm(\"\" : \"+v\"(s.x), \"+v\"(c.x));\n+  u.x = test (s.x, c.x);\n+\n+  if (c.a[0] < 32)\n+    for (i = 0; i < 4; i++)\n+      e[i] = s.a[i] << c.a[0]; \n+\n+  if (check_union128i_d (u, e))\n+#if DEBUG\n+    {\n+      printf (\"sse2_test_pslld_2; check_union128i_d failed\\n\");\n+      printf (\"\\tsll\\t([%x,%x,%x,%x], [%llx,%llx]\\n\", s.a[0], s.a[1], s.a[2],\n+\t      s.a[3], c.a[0], c.a[1]);\n+      printf (\"\\t ->\\t [%x,%x,%x,%x]\\n\", u.a[0], u.a[1], u.a[2], u.a[3]);\n+      printf (\"\\texpect\\t [%x,%x,%x,%x]\\n\", e[0], e[1], e[2], e[3]);\n+    }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "f4bd6002fe5394f19506aa38570f8accd8f68321", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pslldq-1.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pslldq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pslldq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pslldq-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pslldq_1\n+#endif\n+\n+#define N 0x5\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1)\n+{\n+  return _mm_slli_si128 (s1, N); \n+}\n+\n+static void \n+TEST (void)\n+{\n+  union128i_b u, s;\n+  char src[16] =\n+    { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };\n+  char e[16] =\n+    { 0 };\n+  int i;\n+\n+  s.x = _mm_loadu_si128 ((__m128i *) src);\n+\n+  u.x = test (s.x);\n+\n+  for (i = 0; i < 16 - N; i++)\n+    e[i + N] = src[i];\n+\n+  if (check_union128i_b (u, e))\n+#if DEBUG\n+    {\n+      printf (\"sse2_test_pslldq_1; check_union128i_b failed\\n\");\n+\n+      printf (\"\\t s ([%x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x])\\n\",\n+\t      s.a[0], s.a[1], s.a[2], s.a[3], s.a[4], s.a[5], s.a[6], s.a[7],\n+\t      s.a[8], s.a[9], s.a[10], s.a[11], s.a[12], s.a[13], s.a[14],\n+\t      s.a[15]);\n+      printf (\n+\t  \"\\t u ->\\t [%x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x]\\n\",\n+\t  u.a[0], u.a[1], u.a[2], u.a[3], u.a[4], u.a[5], u.a[6], u.a[7],\n+\t  u.a[8], u.a[9], u.a[10], u.a[11], u.a[12], u.a[13], u.a[14], u.a[15]);\n+      printf (\n+\t  \"\\t expect\\t [%x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x]\\n\",\n+\t  e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8], e[9], e[10],\n+\t  e[11], e[12], e[13], e[14], e[15]);\n+    }\n+#else\n+  abort ();\n+#endif\n+}"}, {"sha": "06904c50217bdd07d4c72f2cc83dfb7cdcb67221", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-psllq-1.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psllq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psllq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psllq-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_psllq_1\n+#endif\n+\n+#define N 60\n+\n+#include <emmintrin.h>\n+\n+#ifdef _ARCH_PWR8\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1)\n+{\n+  return _mm_slli_epi64 (s1, N); \n+}\n+#endif\n+\n+static void\n+TEST (void)\n+{\n+#ifdef _ARCH_PWR8\n+  union128i_q u, s;\n+  long long e[2] = {0};\n+  int i;\n+ \n+  s.x = _mm_set_epi64x (-1, 0xf);\n+\n+  u.x = test (s.x);\n+\n+  if (N < 64)\n+    for (i = 0; i < 2; i++)\n+      e[i] = s.a[i] << N; \n+\n+  if (check_union128i_q (u, e))\n+    abort (); \n+#endif\n+}"}, {"sha": "5eb7bc39a6046a771698b992f213979a8ca3a682", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-psllq-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psllq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psllq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psllq-2.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_psllq_2\n+#endif\n+\n+#include <emmintrin.h>\n+\n+#ifdef _ARCH_PWR8\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i c)\n+{\n+  return _mm_sll_epi64 (s1, c); \n+}\n+#endif\n+\n+static void\n+TEST (void)\n+{\n+#ifdef _ARCH_PWR8\n+  union128i_q u, s, c;\n+  long long e[2] = {0};\n+  int i;\n+ \n+  s.x = _mm_set_epi64x (-1, 0xf);\n+  c.x = _mm_set_epi64x (60,50);\n+\n+  __asm(\"\" : \"+v\"(s.x), \"+v\"(c.x));\n+  u.x = test (s.x, c.x);\n+\n+  if (c.a[0] < 64)\n+    for (i = 0; i < 2; i++)\n+      e[i] = s.a[i] << c.a[0]; \n+\n+  if (check_union128i_q (u, e))\n+    abort (); \n+#endif\n+}"}, {"sha": "f744bb244cb777d25ef1b355a72d1b3e4c1df03b", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-psllw-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psllw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psllw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psllw-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_psllw_1\n+#endif\n+\n+#define N 0xb\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1)\n+{\n+  return _mm_slli_epi16 (s1, N); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_w u, s;\n+  short e[8] = {0};\n+  int i;\n+ \n+  s.x = _mm_set_epi16 (1, 2, 3, 4, 5, 6, 0x7000, 0x9000);\n+\n+  u.x = test (s.x);\n+\n+  if (N < 16)\n+    for (i = 0; i < 8; i++)\n+      e[i] = s.a[i] << N; \n+\n+  if (check_union128i_w (u, e))\n+    abort (); \n+}"}, {"sha": "1335e2bb2494bbb9982b13d2a3cbab10a2aadc3f", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-psllw-2.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psllw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psllw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psllw-2.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_psllw_2\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i c)\n+{\n+  return _mm_sll_epi16 (s1, c); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_w u, s;\n+  union128i_q c;\n+  short e[8] = {0};\n+  int i;\n+ \n+  s.x = _mm_set_epi16 (1, 2, 3, 4, 5, 6, 0x7000, 0x9000);\n+  c.x = _mm_set_epi64x (12, 13);\n+\n+  __asm(\"\" : \"+v\"(s.x), \"+v\"(c.x));\n+  u.x = test (s.x, c.x);\n+\n+  if (c.a[0] < 16)\n+    for (i = 0; i < 8; i++)\n+      e[i] = s.a[i] << c.a[0]; \n+\n+  if (check_union128i_w (u, e))\n+    abort (); \n+}"}, {"sha": "03c40a11d07c8028dccf096124f44e891b5c6308", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-psrad-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psrad-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psrad-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psrad-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_psrad_1\n+#endif\n+\n+#define N 0xf\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1)\n+{\n+  return _mm_srai_epi32 (s1, N); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_d u, s;\n+  int e[4] = {0};\n+  int i;\n+ \n+  s.x = _mm_set_epi32 (1, -2, 3, 4);\n+\n+  u.x = test (s.x);\n+\n+  if (N < 32)\n+    for (i = 0; i < 4; i++)\n+      e[i] = s.a[i] >> N; \n+\n+  if (check_union128i_d (u, e))\n+    abort (); \n+}"}, {"sha": "387f383f3dbd9c68c8ad6498b2d31b65e1705cbb", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-psrad-2.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psrad-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psrad-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psrad-2.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_psrad_2\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i count)\n+{\n+  return _mm_sra_epi32 (s1, count); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_d u, s;\n+  union128i_q c;\n+  int e[4] = {0};\n+  int i;\n+ \n+  s.x = _mm_set_epi32 (1, -2, 3, 4);\n+  c.x = _mm_set_epi64x (16, 29);\n+\n+  __asm(\"\" : \"+v\"(s.x), \"+v\"(c.x));\n+  u.x = test (s.x, c.x);\n+\n+  if (c.a[0] < 32)\n+    for (i = 0; i < 4; i++)\n+      e[i] = s.a[i] >> c.a[0]; \n+\n+  if (check_union128i_d (u, e))\n+    abort (); \n+}"}, {"sha": "23a423a4762e7d8ac4c5ad8d58d9786b5ced4365", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-psraw-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psraw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psraw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psraw-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_psraw_1\n+#endif\n+\n+#define N 0xb\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1)\n+{\n+  return _mm_srai_epi16 (s1, N); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_w u, s;\n+  short e[8] = {0};\n+  int i;\n+ \n+  s.x = _mm_set_epi16 (1, -2, 3, 4, -5, 6, 0x7000, 0x9000);\n+\n+  u.x = test (s.x);\n+\n+  if (N < 16)\n+    for (i = 0; i < 8; i++)\n+      e[i] = s.a[i] >> N; \n+\n+  if (check_union128i_w (u, e))\n+    abort (); \n+}"}, {"sha": "b41a6d3157a7b35f5984b82ef7369821a58cdd66", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-psraw-2.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psraw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psraw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psraw-2.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_psraw_2\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i c)\n+{\n+  return _mm_sra_epi16 (s1, c); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_w u, s;\n+  union128i_q c;\n+  short e[8] = {0};\n+  int i;\n+ \n+  s.x = _mm_set_epi16 (1, -2, 3, 4, 5, 6, -0x7000, 0x9000);\n+  c.x = _mm_set_epi64x (12, 13);\n+\n+  __asm(\"\" : \"+v\"(s.x), \"+v\"(c.x));\n+  u.x = test (s.x, c.x);\n+\n+  if (c.a[0] < 16)\n+    for (i = 0; i < 8; i++)\n+      e[i] = s.a[i] >> c.a[0]; \n+\n+  if (check_union128i_w (u, e))\n+    abort (); \n+}"}, {"sha": "e96cf0a3ca8322adbea81103221ebf1a0383a289", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-psrld-1.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psrld-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psrld-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psrld-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_psrld_1\n+#endif\n+\n+#define N 0xf\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1)\n+{\n+  return _mm_srli_epi32 (s1, N); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_d u, s;\n+  int e[4] = { 0 };\n+  unsigned int tmp;\n+  int i;\n+ \n+  s.x = _mm_set_epi32 (1, -2, 3, 4);\n+\n+  u.x = test (s.x);\n+\n+  if (N < 32)\n+    for (i = 0; i < 4; i++)\n+      {\n+        tmp  = s.a[i];\n+        e[i] = tmp >> N; \n+      }\n+\n+  if (check_union128i_d (u, e))\n+#if DEBUG\n+    {\n+      printf (\"sse2_test_psrld_1; check_union128i_d failed\\n\");\n+      printf (\"\\tsrl\\t([%x,%x,%x,%x],%d\\n\", s.a[0], s.a[1], s.a[2], s.a[3], N);\n+      printf (\"\\t ->\\t [%x,%x,%x,%x]\\n\", u.a[0], u.a[1], u.a[2], u.a[3]);\n+      printf (\"\\texpect\\t [%x,%x,%x,%x]\\n\", e[0], e[1], e[2], e[3]);\n+    }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "6192e2a2d59586c1d72ff9abe6ce0308bce67148", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-psrld-2.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psrld-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psrld-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psrld-2.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_psrld_2\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i c)\n+{\n+  return _mm_srl_epi32 (s1, c); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_d u, s;\n+  union128i_q c;\n+  int e[4] = { 0 };\n+  unsigned int tmp;\n+  int i;\n+ \n+  s.x = _mm_set_epi32 (2, -3, 0x7000, 0x9000);\n+  c.x = _mm_set_epi64x (12, 23);\n+\n+  __asm(\"\" : \"+v\"(s.x), \"+v\"(c.x));\n+  u.x = test (s.x, c.x);\n+\n+  if (c.a[0] < 32)\n+    for (i = 0; i < 4; i++)\n+      {\n+        tmp = s.a[i];\n+        e[i] = tmp >> c.a[0];\n+      } \n+\n+  if (check_union128i_d (u, e))\n+#if DEBUG\n+    {\n+      printf (\"sse2_test_psrld_2; check_union128i_d failed\\n\");\n+      printf (\"\\tsrld\\t([%x,%x,%x,%x], [%llx,%llx]\\n\", s.a[0], s.a[1], s.a[2],\n+\t      s.a[3], c.a[0], c.a[1]);\n+      printf (\"\\t ->\\t [%x,%x,%x,%x]\\n\", u.a[0], u.a[1], u.a[2], u.a[3]);\n+      printf (\"\\texpect\\t [%x,%x,%x,%x]\\n\", e[0], e[1], e[2], e[3]);\n+    }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "5b74cae7f90be3e1baffb40c52e0e5f881be0209", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-psrldq-1.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psrldq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psrldq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psrldq-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_psrldq_1\n+#endif\n+\n+#define N 0x5\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1)\n+{\n+  return _mm_srli_si128 (s1, N); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_b u, s;\n+  char src[16] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 };\n+  char e[16] = { 0 };\n+  int i;\n+   \n+  s.x = _mm_loadu_si128 ((__m128i *)src);\n+\n+  u.x = test (s.x);\n+\n+  for (i = 0; i < 16-N; i++)\n+    e[i] = src[i+N];\n+\n+  if (check_union128i_b (u, e))\n+#if DEBUG\n+    {\n+      printf (\"sse2_test_psrldq_1; check_union128i_b failed\\n\");\n+      printf (\"\\tsrl\\t([%x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x],\\n\",\n+\t      s.a[0], s.a[1], s.a[2], s.a[3], s.a[4], s.a[5], s.a[6], s.a[7],\n+\t      s.a[8], s.a[9], s.a[10], s.a[11], s.a[12], s.a[13], s.a[14],\n+\t      s.a[15]);\n+      printf (\"\\t ->\\t [%x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x]\\n\",\n+\t      u.a[0], u.a[1], u.a[2], u.a[3], u.a[4], u.a[5], u.a[6], u.a[7],\n+\t      u.a[8], u.a[9], u.a[10], u.a[11], u.a[12], u.a[13], u.a[14],\n+\t      u.a[15]);\n+      printf (\n+\t  \"\\texpect\\t [%x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x]\\n\",\n+\t  e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8], e[9], e[10],\n+\t  e[11], e[12], e[13], e[14], e[15]);\n+    }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "9b13f0be7fe607f67841e06cd234e8079eef8913", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-psrlq-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psrlq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psrlq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psrlq-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_psrlq_1\n+#endif\n+\n+#define N 60\n+\n+#include <emmintrin.h>\n+\n+#ifdef _ARCH_PWR8\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1)\n+{\n+  return _mm_srli_epi64 (s1, N); \n+}\n+#endif\n+\n+static void\n+TEST (void)\n+{\n+#ifdef _ARCH_PWR8\n+  union128i_q u, s;\n+  long long e[2] = {0};\n+  unsigned long long tmp;\n+  int i;\n+ \n+  s.x = _mm_set_epi64x (-1, 0xf);\n+\n+  u.x = test (s.x);\n+\n+  if (N < 64)\n+    for (i = 0; i < 2; i++) {\n+      tmp = s.a[i]; \n+      e[i] = tmp >> N;\n+    }\n+\n+  if (check_union128i_q (u, e))\n+    abort (); \n+#endif\n+}"}, {"sha": "168c77f99ecdeb03ff7c26aa995decd7a381e5c2", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-psrlq-2.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psrlq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psrlq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psrlq-2.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_psrlq_2\n+#endif\n+\n+#include <emmintrin.h>\n+\n+#ifdef _ARCH_PWR8\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i c)\n+{\n+  return _mm_srl_epi64 (s1, c); \n+}\n+#endif\n+\n+static void\n+TEST (void)\n+{\n+#ifdef _ARCH_PWR8\n+  union128i_q u, s, c;\n+  long long e[2] = {0};\n+  unsigned long long tmp;\n+  int i;\n+ \n+  s.x = _mm_set_epi64x (-1, 0xf);\n+  c.x = _mm_set_epi64x (60,50);\n+\n+  __asm(\"\" : \"+v\"(s.x), \"+v\"(c.x));\n+  u.x = test (s.x, c.x);\n+\n+  if (c.a[0] < 64)\n+    for (i = 0; i < 2; i++){\n+      tmp = s.a[i];\n+      e[i] =tmp >> c.a[0];\n+    } \n+\n+  if (check_union128i_q (u, e))\n+    abort (); \n+#endif\n+}"}, {"sha": "6f0a856fc7a5088b0b499812d6661281a7cba3e8", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-psrlw-1.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psrlw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psrlw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psrlw-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_psrlw_1\n+#endif\n+\n+#define N 0xb\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1)\n+{\n+  return _mm_srli_epi16 (s1, N); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_w u, s;\n+  short e[8] = {0};\n+  unsigned short tmp;\n+  int i;\n+ \n+  s.x = _mm_set_epi16 (1, -2, 3, -4, 5, 6, 0x7000, 0x9000);\n+\n+  u.x = test (s.x);\n+\n+  if (N < 16)\n+    for (i = 0; i < 8; i++)\n+      {\n+        tmp = s.a[i];\n+        e[i] = tmp >> N;\n+      }\n+\n+  if (check_union128i_w (u, e))\n+    abort (); \n+}"}, {"sha": "9457b49a8cb3e4a47165db94d03599115bd2a316", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-psrlw-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psrlw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psrlw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psrlw-2.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_psrlw_2\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i c)\n+{\n+  return _mm_srl_epi16 (s1, c); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_w u, s;\n+  union128i_q c;\n+  short e[8] = {0};\n+  unsigned short tmp;\n+  int i;\n+ \n+  s.x = _mm_set_epi16 (1, -2, 3, 4, 5, 6, -0x7000, 0x9000);\n+  c.x = _mm_set_epi64x (12, 13);\n+\n+  __asm(\"\" : \"+v\"(s.x), \"+v\"(c.x));\n+  u.x = test (s.x, c.x);\n+\n+  if (c.a[0] < 16)\n+    for (i = 0; i < 8; i++)\n+      {\n+        tmp = s.a[i];\n+        e[i] = tmp >> c.a[0];\n+      }\n+\n+  if (check_union128i_w (u, e))\n+    abort (); \n+}"}, {"sha": "a0d99ddada1335141f3c56f00b339382b3581b49", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-psubb-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psubb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psubb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psubb-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_psubb_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_sub_epi8 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_b u, s1, s2;\n+  char e[16];\n+  int i;\n+   \n+  s1.x = _mm_set_epi8 (1,2,3,4,10,20,30,90,-80,-40,-100,-15,98, 25, 98,7);\n+  s2.x = _mm_set_epi8 (88, 44, 33, 22, 11, 98, 76, -100, -34, -78, -39, 6, 3, 4, 5, 119);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 16; i++)\n+     e[i] = s1.a[i] - s2.a[i];\n+\n+  if (check_union128i_b (u, e))\n+    abort ();\n+}"}, {"sha": "624ae2de5be872d179c08b1c6c5e5eedebdf0783", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-psubd-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psubd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psubd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psubd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_psubd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_sub_epi32 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_d u, s1, s2;\n+  int e[4];\n+  int i;\n+   \n+  s1.x = _mm_set_epi32 (30,90,-80,-40);\n+  s2.x = _mm_set_epi32 (76, -100, -34, -78);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 4; i++)\n+     e[i] = s1.a[i] - s2.a[i];\n+\n+  if (check_union128i_d (u, e))\n+    abort ();\n+}"}, {"sha": "426ccb7dcd39a39db605032c29a3547b9039ac40", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-psubq-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psubq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psubq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psubq-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_psubq_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_sub_epi64 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_q u, s1, s2;\n+  long long e[2];\n+  int i;\n+   \n+  s1.x = _mm_set_epi64x (90,-80);\n+  s2.x = _mm_set_epi64x (76, -100);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 2; i++)\n+     e[i] = s1.a[i] - s2.a[i];\n+\n+  if (check_union128i_q (u, e))\n+    abort ();\n+}"}, {"sha": "be02da5a34b043d566a9b52c9afc4cb7d23259ff", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-psubsb-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psubsb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psubsb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psubsb-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_psubsb_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_subs_epi8 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_b u, s1, s2;\n+  char e[16];\n+  int i, tmp;\n+   \n+  s1.x = _mm_set_epi8 (1,2,3,4,10,20,30,90,-80,-40,-100,-15,98, 25, 98,7);\n+  s2.x = _mm_set_epi8 (88, 44, 33, 22, 11, 98, 76, -100, -34, -78, -39, 6, 3, 4, 5, 119);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 16; i++)\n+    {\n+      tmp = (signed char)s1.a[i] - (signed char)s2.a[i];\n+\n+      if (tmp > 127)\n+        tmp = 127;\n+      if (tmp < -128)\n+        tmp = -128;\n+\n+      e[i] = tmp;\n+    }\n+\n+  if (check_union128i_b (u, e))\n+    abort ();\n+}"}, {"sha": "afed3c869142ceccf079625a165db380efc26a0b", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-psubsw-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psubsw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psubsw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psubsw-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_psubsw_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_subs_epi16 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_w u, s1, s2;\n+  short e[8];\n+  int i, tmp;\n+   \n+  s1.x = _mm_set_epi16 (10,20,30,90,-80,-40,-100,-15);\n+  s2.x = _mm_set_epi16 (11, 98, 76, -100, -34, -78, -39, 14);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 8; i++)\n+    {\n+      tmp = s1.a[i] - s2.a[i];\n+      \n+      if (tmp > 32767)\n+        tmp = 32767;\n+      if (tmp < -32768)\n+        tmp = -32768;\n+      \n+      e[i] = tmp;\n+    }\n+\n+  if (check_union128i_w (u, e))\n+    abort ();\n+}"}, {"sha": "e5f128b6c388f402d76a1bc26839ad2f339a61fe", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-psubusb-1.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psubusb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psubusb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psubusb-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_psubusb_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_subs_epu8 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_b u, s1, s2;\n+  char e[16] = { 0 };\n+  int i, tmp;\n+   \n+  s1.x = _mm_set_epi8 (30, 2, 3, 4, 10, 20, 30, 90, 80, 40, 100, 15, 98, 25, 98, 7);\n+  s2.x = _mm_set_epi8 (88, 44, 33, 22, 11, 98, 76, 100, 34, 78, 39, 6, 3, 4, 5, 119);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 16; i++)\n+    {\n+      tmp = (unsigned char)s1.a[i] - (unsigned char)s2.a[i];\n+\n+      if (tmp > 255)\n+        tmp = -1;\n+      if (tmp < 0)\n+        tmp = 0; \n+\n+      e[i] = tmp; \n+    }\n+\n+  if (check_union128i_b (u, e))\n+#if DEBUG\n+    {\n+      printf (\"sse2_test_psubusb_1; check_union128i_b failed\\n\");\n+      printf (\n+\t  \"\\tadds\\t([%x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x],\\n\",\n+\t      s1.a[0], s1.a[1], s1.a[2], s1.a[3], s1.a[4], s1.a[5], s1.a[6],\n+\t      s1.a[7], s1.a[8], s1.a[9], s1.a[10], s1.a[11], s1.a[12], s1.a[13],\n+\t      s1.a[14], s1.a[15]);\n+      printf (\"\\t\\t [%x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x])\\n\",\n+\t      s2.a[0], s2.a[1], s2.a[2], s2.a[3], s2.a[4], s2.a[5], s2.a[6],\n+\t      s2.a[7], s2.a[8], s2.a[9], s2.a[10], s2.a[11], s2.a[12], s2.a[13],\n+\t      s2.a[14], s2.a[15]);\n+      printf (\"\\t ->\\t [%x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x]\\n\",\n+\t      u.a[0], u.a[1], u.a[2], u.a[3], u.a[4], u.a[5], u.a[6], u.a[7],\n+\t      u.a[8], u.a[9], u.a[10], u.a[11], u.a[12], u.a[13], u.a[14],\n+\t      u.a[15]);\n+      printf (\n+\t  \"\\texpect\\t [%x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x, %x,%x,%x,%x]\\n\",\n+\t  e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8], e[9], e[10],\n+\t  e[11], e[12], e[13], e[14], e[15]);\n+    }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "11ddca627e7aca9a6b42e9e4c801bd43a4df341c", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-psubusw-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psubusw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psubusw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psubusw-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_psubusw_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_subs_epu16 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_w u, s1, s2;\n+  short e[8];\n+  int i, tmp;\n+   \n+  s1.x = _mm_set_epi16 (10,20,30,90,80,40,100,15);\n+  s2.x = _mm_set_epi16 (11, 98, 76, 100, 34, 78, 39, 14);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 8; i++)\n+    {\n+      tmp = (unsigned short)s1.a[i] - (unsigned short)s2.a[i];\n+      \n+      if (tmp > 65535)\n+        tmp = -1;\n+\n+      if (tmp < 0)\n+        tmp = 0;\n+      \n+      e[i] = tmp;\n+    }\n+\n+  if (check_union128i_w (u, e))\n+    abort ();\n+}"}, {"sha": "04570a2bc2a827e181876009a30342a812929b41", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-psubw-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psubw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psubw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psubw-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_psubw_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_sub_epi16 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_w u, s1, s2;\n+  short e[8];\n+  int i;\n+   \n+  s1.x = _mm_set_epi16 (10,20,30,90,-80,-40,-100,-15);\n+  s2.x = _mm_set_epi16 (11, 98, 76, -100, -34, -78, -39, 14);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 8; i++)\n+     e[i] = s1.a[i] - s2.a[i];\n+\n+  if (check_union128i_w (u, e))\n+    abort ();\n+}"}, {"sha": "b666c58e2762e57357fb47d825ef105ffe56d76e", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-punpckhbw-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-punpckhbw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-punpckhbw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-punpckhbw-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_punpckhbw_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_unpackhi_epi8 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_b u, s1, s2;\n+  char e[16];\n+  int i;\n+   \n+  s1.x = _mm_set_epi8 (1,2,3,4,10,20,30,90,-80,-40,-100,-15,98, 25, 98,7);\n+  s2.x = _mm_set_epi8 (88, 44, 33, 22, 11, 98, 76, -100, -34, -78, -39, 6, 3, 4, 5, 119);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 8; i++)\n+    {\n+      e[2*i] = s1.a[8+i];\n+      e[2*i + 1] = s2.a[8+i];\n+    }\n+\n+  if (check_union128i_b (u, e))\n+    abort ();\n+}"}, {"sha": "c4866198110ac97dbdcca3386cbbd1e59c0af445", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-punpckhdq-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-punpckhdq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-punpckhdq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-punpckhdq-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_punpckhdq_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_unpackhi_epi32 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_d u, s1, s2;\n+  int e[4];\n+  int i;\n+   \n+  s1.x = _mm_set_epi32 (10,20,-80,-40);\n+  s2.x = _mm_set_epi32 (11, -34, -78, -39);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 2; i++)\n+    {\n+      e[2*i] = s1.a[2+i];\n+      e[2*i+1] = s2.a[2+i];\n+    }\n+\n+  if (check_union128i_d (u, e))\n+    abort ();\n+}"}, {"sha": "849f23f5433998b5faee04355253e55ecbacd1f9", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-punpckhqdq-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-punpckhqdq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-punpckhqdq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-punpckhqdq-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_punpckhqdq_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_unpackhi_epi64 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_q u, s1, s2;\n+  long long  e[2];\n+   \n+  s1.x = _mm_set_epi64x (10,-40);\n+  s2.x = _mm_set_epi64x (1134, -7839);\n+  u.x = test (s1.x, s2.x); \n+  \n+  e[0] = s1.a[1];\n+  e[1] = s2.a[1];\n+\n+  if (check_union128i_q (u, e))\n+    abort ();\n+}"}, {"sha": "7077ecc5a2f3ba128b93d5297f1ce6146324f30b", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-punpckhwd-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-punpckhwd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-punpckhwd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-punpckhwd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_punpckhwd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_unpackhi_epi16 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_w u, s1, s2;\n+  short e[8];\n+  int i;\n+   \n+  s1.x = _mm_set_epi16 (10,20,30,90,-80,-40,-100,-15);\n+  s2.x = _mm_set_epi16 (11, 98, 76, -100, -34, -78, -39, 14);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 4; i++)\n+    {\n+      e[2*i] = s1.a[4+i];\n+      e[2*i+1] = s2.a[4+i];\n+    }\n+\n+  if (check_union128i_w (u, e))\n+    abort ();\n+}"}, {"sha": "e1ee1aee35d8097cc65d963c0dd84322dd91fef2", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-punpcklbw-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-punpcklbw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-punpcklbw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-punpcklbw-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_punpcklbw_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_unpacklo_epi8 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_b u, s1, s2;\n+  char e[16];\n+  int i;\n+   \n+  s1.x = _mm_set_epi8 (1,2,3,4,10,20,30,90,-80,-40,-100,-15,98, 25, 98,7);\n+  s2.x = _mm_set_epi8 (88, 44, 33, 22, 11, 98, 76, -100, -34, -78, -39, 6, 3, 4, 5, 119);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 8; i++)\n+    {\n+      e[2*i] = s1.a[i];\n+      e[2*i + 1] = s2.a[i];\n+    }\n+\n+  if (check_union128i_b (u, e))\n+    abort ();\n+}"}, {"sha": "a47f72dda80a46495a15f49b547f161819428659", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-punpckldq-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-punpckldq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-punpckldq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-punpckldq-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_punpckldq_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_unpacklo_epi32 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_d u, s1, s2;\n+  int e[4];\n+  int i;\n+   \n+  s1.x = _mm_set_epi32 (10,20,-80,-40);\n+  s2.x = _mm_set_epi32 (11, -34, -78, -39);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 2; i++)\n+    {\n+      e[2*i] = s1.a[i];\n+      e[2*i+1] = s2.a[i];\n+    }\n+\n+  if (check_union128i_d (u, e))\n+    abort ();\n+}"}, {"sha": "a45f636bdf54d70c955c5846963d492b2dd3eee7", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-punpcklqdq-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-punpcklqdq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-punpcklqdq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-punpcklqdq-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_punpcklqdq_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_unpacklo_epi64 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_q u, s1, s2;\n+  long long  e[2];\n+   \n+  s1.x = _mm_set_epi64x (10,-40);\n+  s2.x = _mm_set_epi64x (1134, -7839);\n+  u.x = test (s1.x, s2.x); \n+  \n+  e[0] = s1.a[0];\n+  e[1] = s2.a[0];\n+\n+  if (check_union128i_q (u, e))\n+    abort ();\n+}"}, {"sha": "5afd9799df70835abc0404f3a04be28d58985151", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-punpcklwd-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-punpcklwd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-punpcklwd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-punpcklwd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_punpcklwd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_unpacklo_epi16 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_w u, s1, s2;\n+  short e[8];\n+  int i;\n+   \n+  s1.x = _mm_set_epi16 (10,20,30,90,-80,-40,-100,-15);\n+  s2.x = _mm_set_epi16 (11, 98, 76, -100, -34, -78, -39, 14);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 4; i++)\n+    {\n+      e[2*i] = s1.a[i];\n+      e[2*i+1] = s2.a[i];\n+    }\n+\n+  if (check_union128i_w (u, e))\n+    abort ();\n+}"}, {"sha": "e81c818fa2d3660e4b0a850730d6051e9ec3b510", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-shufpd-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-shufpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-shufpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-shufpd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_shufpd_1\n+#endif\n+\n+#define N 0xab\n+\n+#include <emmintrin.h>\n+\n+static __m128d\n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  return _mm_shuffle_pd (s1, s2, N); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u, s1, s2;\n+  double e[2] = {0.0};\n+   \n+  s1.x = _mm_set_pd (2134.3343,1234.635654);\n+  s2.x = _mm_set_pd (453.345635,54646.464356);\n+  u.x = test (s1.x, s2.x);\n+\n+  e[0] = (N & (1 << 0)) ? s1.a[1] : s1.a[0];\n+  e[1] = (N & (1 << 1)) ? s2.a[1] : s2.a[0];\n+\n+  if (check_union128d(u, e))\n+    abort ();\n+}"}, {"sha": "fa0b1fee8be7a91bff8373bfb940365b7aca097d", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-sqrtpd-1.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-sqrtpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-sqrtpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-sqrtpd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_sqrt_pd_1\n+#endif\n+\n+#include <emmintrin.h>\n+#include <math.h>\n+\n+static __m128d\n+__attribute__((noinline, unused))\n+test (__m128d s1)\n+{\n+  return _mm_sqrt_pd (s1); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u, s1;\n+  __m128d bogus = { 123.0, 456.0 };\n+  double e[2];\n+  int i;\n+   \n+  s1.x = _mm_set_pd (2134.3343,1234.635654);\n+  u.x = test (s1.x); \n+\n+  for (i = 0; i < 2; i++)\n+    {\n+      __m128d tmp = _mm_load_sd (&s1.a[i]);\n+      tmp = _mm_sqrt_sd (bogus, tmp);\n+      _mm_store_sd (&e[i], tmp);\n+    }\n+\n+  if (check_union128d (u, e))\n+#if DEBUG\n+  {\n+      printf (\"sse2_test_sqrt_pd_1; check_union128d failed\\n\");\n+      printf (\"\\t [%f,%f] -> [%f,%f]\\n\", s1.a[0], s1.a[1], u.a[0], u.a[1]);\n+      printf (\"\\t expect [%f,%f]\\n\", e[0], e[1]);\n+  }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "6428dc92e310ab8b87143ad5c54b3a75a5217055", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-subpd-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-subpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-subpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-subpd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_subpd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128d\n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_sub_pd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u, s1, s2;\n+  double e[2];\n+   \n+  s1.x = _mm_set_pd (2134.3343,1234.635654);\n+  s2.x = _mm_set_pd (41124.234,2344.2354);\n+  u.x = test (s1.x, s2.x); \n+   \n+  e[0] = s1.a[0] - s2.a[0];\n+  e[1] = s1.a[1] - s2.a[1];\n+\n+  if (check_union128d (u, e))\n+    abort ();\n+}"}, {"sha": "c5afa3ab02c59cf6f17be343f37ac98a3ccba530", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-subsd-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-subsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-subsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-subsd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_subsd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128d\n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_sub_sd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u, s1, s2;\n+  double e[2];\n+   \n+  s1.x = _mm_set_pd (2134.3343,1234.635654);\n+  s2.x = _mm_set_pd (41124.234,2344.2354);\n+  u.x = test (s1.x, s2.x); \n+   \n+  e[0] = s1.a[0] - s2.a[0];\n+  e[1] = s1.a[1];\n+\n+  if (check_union128d (u, e))\n+#if DEBUG\n+  {\n+      printf (\"sse2_test_subsd_1; check_union128d failed\\n\");\n+      printf (\"\\t [%f,%f] - [%f,%f] -> [%f,%f]\\n\", s1.a[0], s1.a[1], s2.a[0],\n+\t      s2.a[1], u.a[0], u.a[1]);\n+      printf (\"\\t expect [%f,%f]\\n\", e[0], e[1]);\n+  }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "a68ed519ca86a62515141bdba7f2d764d2f32070", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-ucomisd-1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-ucomisd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-ucomisd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-ucomisd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_ucomisd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static int \n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  return _mm_ucomieq_sd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d s1, s2;\n+  int d[1];\n+  int e[1];\n+ \n+  s1.x = _mm_set_pd (2134.3343,2344.2354);\n+  s2.x = _mm_set_pd (41124.234,2344.2354);\n+  d[0] = test (s1.x, s2.x); \n+  e[0] = s1.a[0] == s2.a[0];\n+\n+  if (checkVi (d, e, 1))\n+    abort ();\n+}"}, {"sha": "b3f00c826322a1f9db98f5369078a173f452e2a8", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-ucomisd-2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-ucomisd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-ucomisd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-ucomisd-2.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_ucomisd_2\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static int \n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  return _mm_ucomilt_sd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d s1, s2;\n+  int d[1];\n+  int e[1];\n+ \n+  s1.x = _mm_set_pd (2134.3343,12344.2354);\n+  s2.x = _mm_set_pd (41124.234,2344.2354);\n+  d[0] = test (s1.x, s2.x); \n+  e[0] = s1.a[0] < s2.a[0];\n+\n+  if (checkVi (d, e, 1))\n+    abort ();\n+}"}, {"sha": "2bfcf84357dcb0fdbeb2a85f87f7f0669d99c4f0", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-ucomisd-3.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-ucomisd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-ucomisd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-ucomisd-3.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_ucomisd_3\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static int \n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  return _mm_ucomile_sd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d s1, s2;\n+  int d[1] = {0};\n+  int e[1] = {0};\n+ \n+  s1.x = _mm_set_pd (2134.3343,12344.2354);\n+  s2.x = _mm_set_pd (41124.234,2344.2354);\n+  d[0] = test (s1.x, s2.x); \n+  e[0] = s1.a[0] <= s2.a[0];\n+\n+  if (checkVi (d, e, 1))\n+    abort ();\n+}"}, {"sha": "42243b29c5f524ae133b247389b79ce9350e74cb", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-ucomisd-4.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-ucomisd-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-ucomisd-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-ucomisd-4.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_ucomisd_4\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static int \n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  return _mm_ucomigt_sd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d s1, s2;\n+  int d[1];\n+  int e[1];\n+ \n+  s1.x = _mm_set_pd (2134.3343,12344.2354);\n+  s2.x = _mm_set_pd (41124.234,2344.2354);\n+  d[0] = test (s1.x, s2.x); \n+  e[0] = s1.a[0] > s2.a[0];\n+\n+  if (checkVi (d, e, 1))\n+    abort ();\n+}"}, {"sha": "1fc2a2b3c085b06b73c18c4a63d10d311a434a5a", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-ucomisd-5.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-ucomisd-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-ucomisd-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-ucomisd-5.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_ucomisd_5\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static int \n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  return _mm_ucomige_sd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d s1, s2;\n+  int d[1];\n+  int e[1];\n+ \n+  s1.x = _mm_set_pd (2134.3343,12344.2354);\n+  s2.x = _mm_set_pd (41124.234,2344.2354);\n+  d[0] = test (s1.x, s2.x); \n+  e[0] = s1.a[0] >= s2.a[0];\n+\n+  if (checkVi (d, e, 1))\n+    abort ();\n+}"}, {"sha": "5ce8d453527d46b35e4727afbcc7025aaca79f4d", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-ucomisd-6.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-ucomisd-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-ucomisd-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-ucomisd-6.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_ucomisd_6\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static int \n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  return _mm_ucomineq_sd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d s1, s2;\n+  int d[1];\n+  int e[1];\n+ \n+  s1.x = _mm_set_pd (2134.3343,12344.2354);\n+  s2.x = _mm_set_pd (41124.234,2344.2354);\n+  d[0] = test (s1.x, s2.x); \n+  e[0] = s1.a[0] != s2.a[0];\n+\n+  if (checkVi (d, e, 1))\n+    abort ();\n+}"}, {"sha": "f1547861c21a06fa0c191928aba7f785645a3dcd", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-unpckhpd-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-unpckhpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-unpckhpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-unpckhpd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_unpckhpd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128d\n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_unpackhi_pd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u, s1, s2;\n+  double e[2];\n+   \n+  s1.x = _mm_set_pd (2134.3343,1234.635654);\n+  s2.x = _mm_set_pd (41124.234,2344.2354);\n+  u.x = test (s1.x, s2.x); \n+   \n+  e[0] = s1.a[1];\n+  e[1] = s2.a[1];\n+\n+  if (check_union128d (u, e))\n+    abort ();\n+}"}, {"sha": "5c1ad1e18ae2dd3cb9ff1f2bc8f041f16c5eb89d", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-unpcklpd-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-unpcklpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-unpcklpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-unpcklpd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_unpcklpd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128d\n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_unpacklo_pd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128d u, s1, s2;\n+  double e[2];\n+   \n+  s1.x = _mm_set_pd (2134.3343,1234.635654);\n+  s2.x = _mm_set_pd (41124.234,2344.2354);\n+  u.x = test (s1.x, s2.x); \n+   \n+  e[0] = s1.a[0];\n+  e[1] = s2.a[0];\n+\n+  if (check_union128d (u, e))\n+    abort ();\n+}"}, {"sha": "d1c04bfc8f8325bec00278d249c87eecd0b378bf", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-xorpd-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-xorpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-xorpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-xorpd-1.c?ref=daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_xorpd_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128d\n+__attribute__((noinline, unused))\n+test (__m128d s1, __m128d s2)\n+{\n+  return _mm_xor_pd (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      double d[2];\n+      long long l[2];\n+    }source1, source2, e;\n+\n+  union128d u, s1, s2;\n+  int i; \n+   \n+  s1.x = _mm_set_pd (11.1321456, 2.287332);\n+  s2.x = _mm_set_pd (3.37768, 4.43222234);\n+\n+  _mm_storeu_pd (source1.d, s1.x);\n+  _mm_storeu_pd (source2.d, s2.x);\n+\n+  u.x = test (s1.x, s2.x); \n+ \n+  for (i = 0; i < 2; i++)\n+    e.l[i] = source1.l[i] ^ source2.l[i];\n+\n+  if (check_union128d (u, e.d))\n+    abort ();\n+}"}]}