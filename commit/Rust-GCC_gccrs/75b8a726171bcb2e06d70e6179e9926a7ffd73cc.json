{"sha": "75b8a726171bcb2e06d70e6179e9926a7ffd73cc", "node_id": "C_kwDOANBUbNoAKDc1YjhhNzI2MTcxYmNiMmUwNmQ3MGU2MTc5ZTk5MjZhN2ZmZDczY2M", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2021-12-16T13:50:25Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2022-01-06T12:04:13Z"}, "message": "Add VxWworks fixincludes hack, don't expect yvals.h from gcc\n\nyvals.h on VxWorks expects the toolchain to provide its own\nversion of the header, which we don't do. Arrange to fallback\non the common system definitions instead.\n\n2021-12-16  Olivier Hainque  <hainque@adacore.com>\n\nfixincludes/\n\t* inclhack.def (vxworks_next_yvals): New hack.\n\t* tests/base/yvals.h: New expected test result.\n\t* fixincl.x: Regenerate.", "tree": {"sha": "6f8b787fb36d2736c271aa26729c5f23392af798", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f8b787fb36d2736c271aa26729c5f23392af798"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75b8a726171bcb2e06d70e6179e9926a7ffd73cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75b8a726171bcb2e06d70e6179e9926a7ffd73cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75b8a726171bcb2e06d70e6179e9926a7ffd73cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75b8a726171bcb2e06d70e6179e9926a7ffd73cc/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80ad67e2af0620d58d57d0406dc22693cf5b8ca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ad67e2af0620d58d57d0406dc22693cf5b8ca9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80ad67e2af0620d58d57d0406dc22693cf5b8ca9"}], "stats": {"total": 97, "additions": 92, "deletions": 5}, "files": [{"sha": "87175fe0205be250821ebd4c02d44804f8b89669", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 53, "deletions": 5, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75b8a726171bcb2e06d70e6179e9926a7ffd73cc/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75b8a726171bcb2e06d70e6179e9926a7ffd73cc/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=75b8a726171bcb2e06d70e6179e9926a7ffd73cc", "patch": "@@ -2,11 +2,11 @@\n  *\n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  *\n- * It has been AutoGen-ed  January  4, 2022 at 10:24:34 AM by AutoGen 5.18.16\n+ * It has been AutoGen-ed  January  6, 2022 at 11:59:22 AM by AutoGen 5.18.16\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Tue Jan  4 10:24:34 UTC 2022\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Thu Jan  6 11:59:22 UTC 2022\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 262 fixup descriptions.\n+ * This file contains 263 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -10325,6 +10325,48 @@ static const char* apzVxworks_Needs_VxworksPatch[] = { sed_cmd_z,\n #include <types/vxTypesOld.h>\\n\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Vxworks_Next_Yvals fix\n+ */\n+tSCC zVxworks_Next_YvalsName[] =\n+     \"vxworks_next_yvals\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zVxworks_Next_YvalsList[] =\n+  \"yvals.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzVxworks_Next_YvalsMachs[] = {\n+        \"*-*-vxworks*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zVxworks_Next_YvalsSelect0[] =\n+       \"#include_next <yvals.h>\";\n+\n+#define    VXWORKS_NEXT_YVALS_TEST_CT  1\n+static tTestDesc aVxworks_Next_YvalsTests[] = {\n+  { TT_EGREP,    zVxworks_Next_YvalsSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Vxworks_Next_Yvals\n+ */\n+static const char* apzVxworks_Next_YvalsPatch[] = {\n+    \"format\",\n+    \"#if 0 /* GCC does not provide yvals.h.  */\\n\\\n+%1\",\n+    \"#if .*\\n\\\n+/\\\\* .*\\n\\\n+(#include_next <yvals.h>\\n\\\n+)\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Vxworks_Regs fix\n@@ -10648,9 +10690,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          300\n+#define REGEX_COUNT          301\n #define MACH_LIST_SIZE_LIMIT 187\n-#define FIX_COUNT            262\n+#define FIX_COUNT            263\n \n /*\n  *  Enumerate the fixes\n@@ -10910,6 +10952,7 @@ typedef enum {\n     VXWORKS_POSIX_MKDIR_FIXIDX,\n     VXWORKS_NEEDS_VXTYPES_FIXIDX,\n     VXWORKS_NEEDS_VXWORKS_FIXIDX,\n+    VXWORKS_NEXT_YVALS_FIXIDX,\n     VXWORKS_REGS_FIXIDX,\n     VXWORKS_TIME_FIXIDX,\n     VXWORKS_WRITE_CONST_FIXIDX,\n@@ -12191,6 +12234,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      VXWORKS_NEEDS_VXWORKS_TEST_CT, FD_MACH_ONLY,\n      aVxworks_Needs_VxworksTests,   apzVxworks_Needs_VxworksPatch, 0 },\n \n+  {  zVxworks_Next_YvalsName,    zVxworks_Next_YvalsList,\n+     apzVxworks_Next_YvalsMachs,\n+     VXWORKS_NEXT_YVALS_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aVxworks_Next_YvalsTests,   apzVxworks_Next_YvalsPatch, 0 },\n+\n   {  zVxworks_RegsName,    zVxworks_RegsList,\n      apzVxworks_RegsMachs,\n      VXWORKS_REGS_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "4643678026dfaf0394aaeca19dc32d36813dc6cb", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75b8a726171bcb2e06d70e6179e9926a7ffd73cc/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75b8a726171bcb2e06d70e6179e9926a7ffd73cc/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=75b8a726171bcb2e06d70e6179e9926a7ffd73cc", "patch": "@@ -5210,6 +5210,28 @@ fix = {\n     \"# define\\t__INCstath <sys/stat.h>\";\n };\n \n+/*\n+ * yvals.h on VxWorks-6 expects the toolchain to provide its own\n+ * version of the header, which we don't do.  Arrange to fallback\n+ * on the system definition.\n+ */\n+fix = {\n+    hackname  = vxworks_next_yvals;\n+    mach      = \"*-*-vxworks*\";\n+    files     = yvals.h;\n+    select    = \"#include_next <yvals.h>\";\n+    c_fix     = format;\n+    c_fix_arg = \"#if 0 /* GCC does not provide yvals.h.  */\\n%1\";\n+    c_fix_arg = \"#if .*\\n\"\n+                \"/\\\\* .*\\n\"\n+                \"(#include_next <yvals.h>\\n)\";\n+\n+    test_text = \"#if (defined(__cplusplus) && defined(__GNUC__))\\n\"\n+                \"/* GCC C++ has it's own yvals.h */\\n\"\n+                \"#include_next <yvals.h>\\n\"\n+                \"#else\\n\";\n+};\n+\n /*\n  *  Make it so VxWorks does not include gcc/regs.h accidentally\n  */"}, {"sha": "ea384d9cf9e351856885b2ad97ca8a8b9c7229b1", "filename": "fixincludes/tests/base/yvals.h", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75b8a726171bcb2e06d70e6179e9926a7ffd73cc/fixincludes%2Ftests%2Fbase%2Fyvals.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75b8a726171bcb2e06d70e6179e9926a7ffd73cc/fixincludes%2Ftests%2Fbase%2Fyvals.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fyvals.h?ref=75b8a726171bcb2e06d70e6179e9926a7ffd73cc", "patch": "@@ -0,0 +1,17 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/yvals.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( VXWORKS_NEXT_YVALS_CHECK )\n+#if 0 /* GCC does not provide yvals.h.  */\n+#include_next <yvals.h>\n+#else\n+\n+#endif  /* VXWORKS_NEXT_YVALS_CHECK */"}]}