{"sha": "6c0449a57a9f88654b0b17b59f4a4aa1c6b339f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMwNDQ5YTU3YTlmODg2NTRiMGIxN2I1OWY0YTRhYTFjNmIzMzlmNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-02-10T14:38:30Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-02-10T14:38:30Z"}, "message": "(movstrqi): Corrected.\n\n(zero_extendqihi2): Taken out, let GCC synthesize.\n(movhi-1): Added insn to move HImode small constant to memory.\n(movhf-1): Added insn to move HFmode zero to memory.\n(movtqf-1): Added insn to move TQFmode zero to memory.\n(numerous insns): Taken out B (Base Reg with Index) mode.\n\nFrom-SVN: r11199", "tree": {"sha": "717d75448bff5cc3fd9f43e3e9d2ecadab7cad34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/717d75448bff5cc3fd9f43e3e9d2ecadab7cad34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c0449a57a9f88654b0b17b59f4a4aa1c6b339f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c0449a57a9f88654b0b17b59f4a4aa1c6b339f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c0449a57a9f88654b0b17b59f4a4aa1c6b339f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c0449a57a9f88654b0b17b59f4a4aa1c6b339f5/comments", "author": null, "committer": null, "parents": [{"sha": "ac1cd684c6e25516118e7f24d8236df4ec5a820d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac1cd684c6e25516118e7f24d8236df4ec5a820d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac1cd684c6e25516118e7f24d8236df4ec5a820d"}], "stats": {"total": 236, "additions": 115, "deletions": 121}, "files": [{"sha": "6cb9b8d82ccb5eaf21dee55eee04259a899a3ccb", "filename": "gcc/config/1750a/1750a.md", "status": "modified", "additions": 115, "deletions": 121, "changes": 236, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c0449a57a9f88654b0b17b59f4a4aa1c6b339f5/gcc%2Fconfig%2F1750a%2F1750a.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c0449a57a9f88654b0b17b59f4a4aa1c6b339f5/gcc%2Fconfig%2F1750a%2F1750a.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.md?ref=6c0449a57a9f88654b0b17b59f4a4aa1c6b339f5", "patch": "@@ -1,7 +1,7 @@\n ;;- Machine description for GNU compiler\n ;;- MIL-STD-1750A version.\n-;; Copyright (C) 1994, 1995 Free Software Foundation, Inc.\n-;; Contributed by O.M.Kellogg, DASA (kellogg@space.otn.dasa.de).\n+;; Copyright (C) 1994, 1995, 1996 Free Software Foundation, Inc.\n+;; Contributed by O.M.Kellogg, DASA (oliver.kellogg@space.otn.dasa.de).\n \n ;; This file is part of GNU CC.\n \n@@ -176,19 +176,23 @@\n \n ;; block move.\n \n-; there is a problem with this insn in gcc-2.2.3\n-; (clobber (match_dup 2)) does not prevent use of this operand later\n-;\n (define_insn \"movstrqi\"\n-  [(set (mem:BLK (match_operand:QI 0 \"register_operand\" \"r\"))\n-\t(mem:BLK (match_operand:QI 1 \"register_operand\" \"r\")))\n-   (use (match_operand:QI 2 \"register_operand\" \"r\"))\n-   (use (match_operand:QI 3 \"immediate_operand\" \"\"))\n+  [(set (match_operand:BLK 0 \"mov_memory_operand\" \"m\")\n+\t(match_operand:BLK 1 \"mov_memory_operand\" \"m\"))\n+   (use (match_operand:QI 2 \"general_operand\" \"r\"))\n+   (match_operand 3 \"\" \"\")\n    (clobber (match_dup 0))\n    (clobber (match_dup 1))\n    (clobber (match_dup 2))]\n   \"\"\n-  \"* return (char *)movcnt_regno_adjust(operands); \")\n+  \"*\n+   {\n+     rtx regops[3];\n+     regops[0] = XEXP(operands[0],0);\n+     regops[1] = XEXP(operands[1],0);\n+     regops[2] = operands[2];\n+     return (char *)movcnt_regno_adjust(regops);\n+   } \")\n \n \n ;; compare instructions.\n@@ -239,12 +243,11 @@\n \n (define_insn \"cmphf\"\n  [(set (cc0)\n-       (compare (match_operand:HF 0 \"general_operand\" \"r,z,r\")\n-                (match_operand:HF 1 \"general_operand\" \"r,Q,m\")))]\n+       (compare (match_operand:HF 0 \"general_operand\" \"r,r\")\n+                (match_operand:HF 1 \"general_operand\" \"r,m\")))]\n  \"\"\n  \"@\n    fcr r%0,r%1\n-   fcb %Q1\n    fc  r%0,%1 \")\n \n (define_insn \"cmptqf\"\n@@ -269,37 +272,12 @@\n      {\n \trtx new_operands[2];\n \tnew_operands[0] = operands[0];\n-\tnew_operands[1] = gen_rtx (REG, HImode, REGNO(operands[1]) + 1);\n+\tnew_operands[1] = gen_rtx (REG, QImode, REGNO(operands[1]) + 1);\n         output_asm_insn(\\\"lr r%0,r%1  ;trunchiqi2\\\",new_operands);\n         return \\\";\\\";\n      } \")\n \n-;; zero extension instructions\n-\n-(define_insn \"zero_extendqihi2\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r\")\n-        (zero_extend:HI (match_operand:QI 1 \"general_operand\" \"r,m,i\")))]\n-  \"\"\n-  \"*\n-      {\n-\trtx new_opnds[2];\n-        output_asm_insn(\\\"xorr r%0,r%0   ;zero_extendqihi2\\\",operands);\n-\tnew_opnds[0] = gen_rtx (REG, HImode, REGNO(operands[0]) + 1);\n-\tnew_opnds[1] = operands[1];\n-        switch (which_alternative)\n-          {\n-            case 0:\n-              output_asm_insn(\\\"lr  r%0,r%1\\\",new_opnds);\n-              break;\n-            case 1:\n-              output_asm_insn(\\\"l   r%0,%1\\\",new_opnds);\n-              break;\n-            case 2:\n-              output_asm_insn(\\\"lim r%0,%1\\\",new_opnds);\n-              break;\n-          }\n-        return \\\";\\\";\n-      } \")\n+;; zero extension instructions: not defined, GCC can synthesize\n \n ;; sign extension instructions\n \n@@ -327,9 +305,9 @@\n \tnew_opnds[1] = operands[1];\n         output_asm_insn(\\\"xorr r%0,r%0   ;extendhftqf2\\\",new_opnds);\n         if (which_alternative == 0)\n-          return \\\"dlr r%0,r%1   ; put condition codes back on track\\\";\n+          return \\\"dlr r%0,r%1\\\";\n         else\n-          return \\\"dl  r%0,%1    ; put condition codes back on track\\\";\n+          return \\\"dl  r%0,%1\\\";\n       } \")\n \n ; 1750 TQF-to-HF truncate is a no-op: just leave away the least signif. 16 bits\n@@ -382,8 +360,8 @@\n ;; 16-bit moves\n \n (define_insn \"movqi\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=r,r,r,r,r,r,t,r,Q,m,m\")\n-        (match_operand:QI 1 \"general_operand\"  \"O,I,J,M,i,r,Q,m,t,r,K\"))]\n+  [(set (match_operand:QI 0 \"general_operand\" \"=r,r,r,r,r,r,r,m,m\")\n+        (match_operand:QI 1 \"general_operand\"  \"O,I,J,M,i,r,m,r,K\"))]\n   \"\"\n   \"@\n      xorr r%0,r%0\n@@ -392,9 +370,7 @@\n      lim  r%0,%1  ; 'M' constraint\n      lim  r%0,%1  ; 'i' constraint\n      lr   r%0,r%1\n-     lb   %Q1\n      l    r%0,%1\n-     stb  %Q0\n      st   r%1,%0\n      stc  %1,%0   \")\n \n@@ -438,53 +414,82 @@\n       }\n   \")\n \n+; Move small constant to memory, HImode\n+(define_insn \"\"\n+  [(set (match_operand:HI 0 \"memory_operand\" \"=m\")\n+        (match_operand:HI 1 \"small_nonneg_const\" \"K\"))]\n+  \"\"\n+  \"*\n+      {\n+\trtx new_opnds[2];\n+\tnew_opnds[0] = operands[0];\n+\tnew_opnds[1] = operands[1];\n+\toutput_asm_insn (\\\"stc 0,%0 ;movhi cst->mem\\\", new_opnds);\n+\tadd_1_to_mem (new_opnds[0]);\n+\toutput_asm_insn (\\\"stc %1,%0\\\", new_opnds);\n+\treturn \\\";\\\";\n+      }\n+  \")\n+\n (define_insn \"movhi\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=r,z,r,Q,m\")\n-        (match_operand:HI 1 \"general_operand\"  \"r,Q,m,z,r\"))]\n+  [(set (match_operand:HI 0 \"general_operand\" \"=r,r,m\")\n+        (match_operand:HI 1 \"general_operand\"  \"r,m,r\"))]\n   \"\"\n   \"@\n     dlr  r%0,r%1\n-    dlb  %Q1\n     dl   r%0,%1\n-    dstb %Q0\n     dst  r%1,%0 \")\n \n \n-;; Single-Float moves are *same* as HImode moves:\n+;; Single-Float moves are similar to HImode moves\n \n-;(define_insn \"movhf\"\n-;  [(set (match_operand:HF 0 \"general_operand\" \"=r,r,r,m\")\n-;        (match_operand:HF 1 \"general_operand\"  \"F,r,m,r\"))]\n-;  \"\"\n-;  \"@\n-;    %D1\\;dl r%0,%F1\n-;    dlr r%0,r%1\n-;    dl  r%0,%1\n-;    dst r%1,%0 \")\n+; Move HFmode zero to memory\n+(define_insn \"\"\n+  [(set (match_operand:HF 0 \"memory_operand\" \"=m\")\n+        (match_operand:HF 1 \"zero_operand\" \"G\"))]\n+  \"\"\n+  \"*\n+      {\n+\trtx new_opnds[2];\n+\tnew_opnds[0] = operands[0];\n+\tnew_opnds[1] = operands[1];\n+\toutput_asm_insn (\\\"stc 0,%0 ;movhf 0.0->mem\\\", new_opnds);\n+\tadd_1_to_mem (new_opnds[0]);\n+\toutput_asm_insn (\\\"stc 0,%0\\\", new_opnds);\n+\treturn \\\";\\\";\n+      }\n+  \")\n \n (define_insn \"movhf\"\n-  [(set (match_operand:HF 0 \"general_operand\" \"=r,z,r,Q,m\")\n-        (match_operand:HF 1 \"general_operand\"  \"r,Q,m,z,r\"))]\n+  [(set (match_operand:HF 0 \"general_operand\" \"=r,r,m\")\n+        (match_operand:HF 1 \"general_operand\"  \"r,m,r\"))]\n   \"\"\n   \"@\n     dlr  r%0,r%1\n-    dlb  %Q1\n     dl   r%0,%1\n-    dstb %Q0\n     dst  r%1,%0 \")\n \n \n ;; Longfloat moves\n \n-;(define_insn \"movtqf\"\n-;  [(set (match_operand:TQF 0 \"general_operand\" \"=r,r,r,m\")\n-;        (match_operand:TQF 1 \"general_operand\"  \"F,r,m,r\"))]\n-;  \"\"\n-;  \"@\n-;    %E1\\;efl r%0,%G1\n-;    eflr.m %0,%1\n-;    efl  r%0,%1\n-;    efst r%1,%0 \")\n+; Move TQFmode zero to memory\n+(define_insn \"\"\n+  [(set (match_operand:TQF 0 \"memory_operand\" \"=m\")\n+        (match_operand:TQF 1 \"zero_operand\" \"G\"))]\n+  \"\"\n+  \"*\n+      {\n+\trtx new_opnds[2];\n+\tnew_opnds[0] = operands[0];\n+\tnew_opnds[1] = operands[1];\n+\toutput_asm_insn (\\\"stc 0,%0 ;movtqf 0.0->mem\\\", new_opnds);\n+\tadd_1_to_mem (new_opnds[0]);\n+\toutput_asm_insn (\\\"stc 0,%0\\\", new_opnds);\n+\tadd_1_to_mem (new_opnds[0]);\n+\toutput_asm_insn (\\\"stc 0,%0\\\", new_opnds);\n+\treturn \\\";\\\";\n+      }\n+  \")\n \n (define_insn \"movtqf\"\n   [(set (match_operand:TQF 0 \"general_operand\" \"=r,r,m\")\n@@ -501,9 +506,9 @@\n ;; single integer\n \n (define_insn \"addqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=r,r,r,r,t,r,m,m\")\n-        (plus:QI (match_operand:QI 1 \"general_operand\" \"%0,0,0,0,0,0,0,0\")\n-                 (match_operand:QI 2 \"general_operand\"  \"I,J,i,r,Q,m,I,J\")))]\n+  [(set (match_operand:QI 0 \"general_operand\" \"=r,r,r,r,r,m,m\")\n+        (plus:QI (match_operand:QI 1 \"general_operand\" \"%0,0,0,0,0,0,0\")\n+                 (match_operand:QI 2 \"general_operand\"  \"I,J,i,r,m,I,J\")))]\n   \"\"\n   \"*\n     switch (which_alternative)\n@@ -520,12 +525,10 @@\n         case 3:\n           return \\\"ar r%0,r%2\\\";\n         case 4:\n-          return \\\"ab %Q2\\\";\n-        case 5:\n           return \\\"a r%0,%2\\\";\n-        case 6:\n+        case 5:\n           return \\\"incm %2,%0\\\";\n-        case 7:\n+        case 6:\n           return \\\"decm %J2,%0\\\";\n       } \")\n \n@@ -540,13 +543,12 @@\n     da  r%0,%2 \")\n \n (define_insn \"addhf3\"\n-  [(set (match_operand:HF 0 \"register_operand\" \"=r,z,r\")\n-        (plus:HF (match_operand:HF 1 \"register_operand\" \"%0,0,0\")\n-                 (match_operand:HF 2 \"general_operand\" \"r,Q,m\")))]\n+  [(set (match_operand:HF 0 \"register_operand\" \"=r,r\")\n+        (plus:HF (match_operand:HF 1 \"register_operand\" \"%0,0\")\n+                 (match_operand:HF 2 \"general_operand\" \"r,m\")))]\n   \"\"\n   \"@\n     far r%0,r%2\n-    fab %Q2\n     fa  r%0,%2 \")\n \n (define_insn \"addtqf3\"\n@@ -563,15 +565,14 @@\n \n ;; single integer\n (define_insn \"subqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=r,r,r,t,r,m\")\n-        (minus:QI (match_operand:QI 1 \"general_operand\" \"0,0,0,0,0,0\")\n-                  (match_operand:QI 2 \"general_operand\"  \"I,i,r,Q,m,I\")))]\n+  [(set (match_operand:QI 0 \"general_operand\" \"=r,r,r,r,m\")\n+        (minus:QI (match_operand:QI 1 \"general_operand\" \"0,0,0,0,0\")\n+                  (match_operand:QI 2 \"general_operand\"  \"I,i,r,m,I\")))]\n   \"\"\n   \"@\n     sisp r%0,%2\n     sim  r%0,%2\n     sr   r%0,r%2\n-    sbb  %Q2\n     s    r%0,%2\n     decm %2,%0 \")\n \n@@ -586,13 +587,12 @@\n     ds  r%0,%2 \")\n \n (define_insn \"subhf3\"\n-  [(set (match_operand:HF 0 \"register_operand\" \"=r,z,r\")\n-        (minus:HF (match_operand:HF 1 \"register_operand\" \"0,0,0\")\n-                  (match_operand:HF 2 \"general_operand\" \"r,Q,m\")))]\n+  [(set (match_operand:HF 0 \"register_operand\" \"=r,r\")\n+        (minus:HF (match_operand:HF 1 \"register_operand\" \"0,0\")\n+                  (match_operand:HF 2 \"general_operand\" \"r,m\")))]\n   \"\"\n   \"@\n     fsr r%0,r%2\n-    fsb %Q2\n     fs  r%0,%2 \")\n \n (define_insn \"subtqf3\"\n@@ -622,14 +622,13 @@\n \n ; 32-bit product\n (define_insn \"mulqihi3\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r,t,r\")\n-        (mult:HI (match_operand:QI 1 \"register_operand\" \"%0,0,0,0\")\n-                 (match_operand:QI 2 \"general_operand\" \"M,r,Q,m\")))]\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r\")\n+        (mult:HI (match_operand:QI 1 \"register_operand\" \"%0,0,0\")\n+                 (match_operand:QI 2 \"general_operand\" \"M,r,m\")))]\n   \"\"\n   \"@\n     mim r%0,%1\n     mr  r%0,r%2\n-    mb  %Q2\n     m   r%0,%2 \")\n \n (define_insn \"mulhi3\"\n@@ -644,13 +643,12 @@\n ; not available on 1750: \"umulhi3\",\"umulhisi3\",\"umulsi3\" (unsigned multiply's)\n \n (define_insn \"mulhf3\"\n-  [(set (match_operand:HF 0 \"register_operand\" \"=r,z,r\")\n-        (mult:HF (match_operand:HF 1 \"register_operand\" \"%0,0,0\")\n-                 (match_operand:HF 2 \"general_operand\" \"r,Q,m\")))]\n+  [(set (match_operand:HF 0 \"register_operand\" \"=r,r\")\n+        (mult:HF (match_operand:HF 1 \"register_operand\" \"%0,0\")\n+                 (match_operand:HF 2 \"general_operand\" \"r,m\")))]\n   \"\"\n   \"@\n     fmr r%0,r%2\n-    fmb %Q2\n     fm  r%0,%2 \")\n \n (define_insn \"multqf3\"\n@@ -724,13 +722,12 @@\n     dd  r%0,%2 \")\n \n (define_insn \"divhf3\"\n-  [(set (match_operand:HF 0 \"register_operand\" \"=r,z,r\")\n-        (div:HF (match_operand:HF 1 \"register_operand\" \"0,0,0\")\n-                (match_operand:HF 2 \"general_operand\" \"r,Q,m\")))]\n+  [(set (match_operand:HF 0 \"register_operand\" \"=r,r\")\n+        (div:HF (match_operand:HF 1 \"register_operand\" \"0,0\")\n+                (match_operand:HF 2 \"general_operand\" \"r,m\")))]\n   \"\"\n   \"@\n     fdr r%0,r%2\n-    fdb %Q2\n     fd  r%0,%2 \")\n \n (define_insn \"divtqf3\"\n@@ -804,14 +801,13 @@\n ;; AND\n \n (define_insn \"andqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=r,r,t,r\")\n-        (and:QI (match_operand:QI 1 \"general_operand\" \"%0,0,0,0\")\n-                (match_operand:QI 2 \"general_operand\" \"M,r,Q,m\")))]\n+  [(set (match_operand:QI 0 \"general_operand\" \"=r,r,r\")\n+        (and:QI (match_operand:QI 1 \"general_operand\" \"%0,0,0\")\n+                (match_operand:QI 2 \"general_operand\" \"M,r,m\")))]\n   \"\"\n   \"@\n     andm r%0,%2\n     andr r%0,r%2\n-    andb %Q2\n     and  r%0,%2 \")\n \n ; This sets incorrect condition codes. See notice_update_cc()\n@@ -825,14 +821,13 @@\n ;; OR\n \n (define_insn \"iorqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=r,r,t,r\")\n-        (ior:QI  (match_operand:QI 1 \"general_operand\" \"%0,0,0,0\")\n-                 (match_operand:QI 2 \"general_operand\" \"M,r,Q,m\")))]\n+  [(set (match_operand:QI 0 \"general_operand\" \"=r,r,r\")\n+        (ior:QI  (match_operand:QI 1 \"general_operand\" \"%0,0,0\")\n+                 (match_operand:QI 2 \"general_operand\" \"M,r,m\")))]\n   \"\"\n   \"@\n     orim r%0,%2\n     orr  r%0,r%2\n-    orb  %Q2\n     or   r%0,%2 \")\n \n ; This sets incorrect condition codes. See notice_update_cc()\n@@ -924,9 +919,8 @@\n   else\n   {\n     rtx new_opnds[2];\n-    new_opnds[0] = gen_rtx (REG, QImode, REGNO(operands[0]));\n-    new_opnds[1] = gen_rtx (REG, QImode, REGNO(operands[0]) + 1);\n-    output_asm_insn(\\\"lr r%0,r%1  ; ashlhi3 shiftcount > 16\\\",new_opnds);\n+    output_asm_insn(\\\"dsll r%0,16  ; ashlhi3 shiftcount > 16\\\",operands);\n+    new_opnds[0] = operands[0];\n     new_opnds[1] = gen_rtx (CONST_INT, VOIDmode, INTVAL(operands[2]) - 16);\n     output_asm_insn(\\\"sll r%0,%1\\\",new_opnds);\n     return \\\";\\\";\n@@ -939,8 +933,8 @@\n ;; prevents converting shifts to ZERO_EXTRACTs with negative positions,\n ;; which isn't valid.\n (define_expand \"lshrqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=r\")\n-\t(lshiftrt:QI (match_operand:QI 1 \"general_operand\" \"0\")\n+  [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n+\t(lshiftrt:QI (match_operand:QI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"g\")))]\n   \"\"\n   \"\n@@ -1003,8 +997,8 @@\n \n ;; Same applies for arithmetic shift right.\n (define_expand \"ashrqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=r\")\n-\t(ashiftrt:QI (match_operand:QI 1 \"general_operand\" \"0\")\n+  [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n+\t(ashiftrt:QI (match_operand:QI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"g\")))]\n   \"\"\n   \"\n@@ -1029,8 +1023,8 @@\n \n ;; HImode arithmetic shift right.\n (define_expand \"ashrhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=r\")\n-\t(ashiftrt:HI (match_operand:HI 1 \"general_operand\" \"0\")\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(ashiftrt:HI (match_operand:HI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"g\")))]\n   \"\"\n   \""}]}