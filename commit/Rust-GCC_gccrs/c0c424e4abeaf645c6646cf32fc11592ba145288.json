{"sha": "c0c424e4abeaf645c6646cf32fc11592ba145288", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBjNDI0ZTRhYmVhZjY0NWM2NjQ2Y2YzMmZjMTE1OTJiYTE0NTI4OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-02-23T23:34:18Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-02-23T23:34:18Z"}, "message": "re PR libstdc++/25896 ([DR 526] hash_map::erase, unordered_map::erase fail if key is inside the table)\n\n2007-02-23  Paolo Carlini  <pcarlini@suse.de>\n\t\n\tPR libstdc++/25896\n\t* include/tr1/hashtable (_Hashtable<>::erase(const key_type&)):\n\tTake care of &_M_extract((*__slot)->_M_v) == &__k.\n\n\t* testsuite/tr1/6_containers/unordered_map/erase/1.cc: New.\n\t* testsuite/tr1/6_containers/unordered_multimap/erase/1.cc: Likewise.\n\t* testsuite/tr1/6_containers/unordered_multiset/erase/1.cc: Likewise.\n\t* testsuite/tr1/6_containers/unordered_set/erase/1.cc: Likewise.\n\nFrom-SVN: r122276", "tree": {"sha": "01022d84fee172d97e5682b8ff5cea978589bc6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01022d84fee172d97e5682b8ff5cea978589bc6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0c424e4abeaf645c6646cf32fc11592ba145288", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0c424e4abeaf645c6646cf32fc11592ba145288", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0c424e4abeaf645c6646cf32fc11592ba145288", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0c424e4abeaf645c6646cf32fc11592ba145288/comments", "author": null, "committer": null, "parents": [{"sha": "bf69f9d2238dbbfafed72c52e24ddbe4d73a5b20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf69f9d2238dbbfafed72c52e24ddbe4d73a5b20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf69f9d2238dbbfafed72c52e24ddbe4d73a5b20"}], "stats": {"total": 558, "additions": 556, "deletions": 2}, "files": [{"sha": "4a039e33713870a747745b3999b62bf68a66d6bb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c424e4abeaf645c6646cf32fc11592ba145288/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c424e4abeaf645c6646cf32fc11592ba145288/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c0c424e4abeaf645c6646cf32fc11592ba145288", "patch": "@@ -1,3 +1,14 @@\n+2007-02-23  Paolo Carlini  <pcarlini@suse.de>\n+\t\n+\tPR libstdc++/25896\n+\t* include/tr1/hashtable (_Hashtable<>::erase(const key_type&)):\n+\tTake care of &_M_extract((*__slot)->_M_v) == &__k.\n+\n+\t* testsuite/tr1/6_containers/unordered_map/erase/1.cc: New.\n+\t* testsuite/tr1/6_containers/unordered_multimap/erase/1.cc: Likewise.\n+\t* testsuite/tr1/6_containers/unordered_multiset/erase/1.cc: Likewise.\n+\t* testsuite/tr1/6_containers/unordered_set/erase/1.cc: Likewise.\n+\n 2007-02-23  Mark Mitchell  <mark@codesourcery.com>\n \n \t* testsuite/27_io/ios_base/sync_with_stdio/1.cc: XFAIL for wrapped"}, {"sha": "14742ab8592bb57edd4a81d55b540dc53e09a325", "filename": "libstdc++-v3/include/tr1/hashtable", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c424e4abeaf645c6646cf32fc11592ba145288/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c424e4abeaf645c6646cf32fc11592ba145288/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable?ref=c0c424e4abeaf645c6646cf32fc11592ba145288", "patch": "@@ -1063,10 +1063,31 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       while (*__slot && !this->_M_compare(__k, __code, *__slot))\n \t__slot = &((*__slot)->_M_next);\n \n+      _Node** __saved_slot = 0;\n       while (*__slot && this->_M_compare(__k, __code, *__slot))\n \t{\n-\t  _Node* __p = *__slot;\n-\t  *__slot = __p->_M_next;\n+\t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t  // 526. Is it undefined if a function in the standard changes\n+\t  // in parameters?\n+\t  if (&this->_M_extract((*__slot)->_M_v) != &__k)\n+\t    {\n+              _Node* __p = *__slot;\n+              *__slot = __p->_M_next;\n+\t      _M_deallocate_node(__p);\n+\t      --_M_element_count;\n+\t      ++__result;\n+\t    }\n+\t  else\n+\t    {\n+\t      __saved_slot = __slot;\n+\t      __slot = &((*__slot)->_M_next);\n+\t    }\n+\t}\n+\n+      if (__saved_slot)\n+\t{\n+\t  _Node* __p = *__saved_slot;\n+\t  *__saved_slot = __p->_M_next;\n \t  _M_deallocate_node(__p);\n \t  --_M_element_count;\n \t  ++__result;"}, {"sha": "139c906884dd626bc5216c17cc43dc8e7e0e63b1", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered_map/erase/1.cc", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c424e4abeaf645c6646cf32fc11592ba145288/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_map%2Ferase%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c424e4abeaf645c6646cf32fc11592ba145288/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_map%2Ferase%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_map%2Ferase%2F1.cc?ref=c0c424e4abeaf645c6646cf32fc11592ba145288", "patch": "@@ -0,0 +1,131 @@\n+// 2007-02-22  Paolo Carlini  <pcarlini@suse.de> \n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 6.3.4.4  Class template unordered_map\n+\n+#include <tr1/unordered_map>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// In the occasion of libstdc++/25896\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  typedef std::tr1::unordered_map<std::string, int> Map;\n+  typedef Map::iterator       iterator;\n+  typedef Map::const_iterator const_iterator;\n+  typedef Map::value_type     value_type;\n+\n+  Map m1;\n+\n+  m1.insert(value_type(\"because to why\", 1));\n+  m1.insert(value_type(\"the stockholm syndrome\", 2));\n+  m1.insert(value_type(\"a cereous night\", 3));\n+  m1.insert(value_type(\"eeilo\", 4));\n+  m1.insert(value_type(\"protean\", 5));\n+  m1.insert(value_type(\"the way you are when\", 6));\n+  m1.insert(value_type(\"tillsammans\", 7));\n+  m1.insert(value_type(\"umbra/penumbra\", 8));\n+  m1.insert(value_type(\"belonging (no longer mix)\", 9));\n+  m1.insert(value_type(\"one line behind\", 10));\n+  VERIFY( m1.size() == 10 );\n+\n+  VERIFY( m1.erase(\"eeilo\") == 1 );\n+  VERIFY( m1.size() == 9 );\n+  iterator it1 = m1.find(\"eeilo\");\n+  VERIFY( it1 == m1.end() );\n+\n+  VERIFY( m1.erase(\"tillsammans\") == 1 );\n+  VERIFY( m1.size() == 8 );\n+  iterator it2 = m1.find(\"tillsammans\");\n+  VERIFY( it2 == m1.end() );\n+\n+  // Must work (see DR 526)\n+  iterator it3 = m1.find(\"belonging (no longer mix)\");\n+  VERIFY( it3 != m1.end() );\n+  VERIFY( m1.erase(it3->first) == 1 );\n+  VERIFY( m1.size() == 7 );\n+  it3 = m1.find(\"belonging (no longer mix)\");\n+  VERIFY( it3 == m1.end() );\n+\n+  VERIFY( !m1.erase(\"abra\") );\n+  VERIFY( m1.size() == 7 );\n+\n+  VERIFY( !m1.erase(\"eeilo\") );\n+  VERIFY( m1.size() == 7 );\n+\n+  VERIFY( m1.erase(\"because to why\") == 1 );\n+  VERIFY( m1.size() == 6 );\n+  iterator it4 = m1.find(\"because to why\");\n+  VERIFY( it4 == m1.end() );\n+\n+  iterator it5 = m1.find(\"umbra/penumbra\");\n+  iterator it6 = m1.find(\"one line behind\");\n+  VERIFY( it5 != m1.end() );\n+  VERIFY( it6 != m1.end() );\n+\n+  VERIFY( m1.find(\"the stockholm syndrome\") != m1.end() );\n+  VERIFY( m1.find(\"a cereous night\") != m1.end() );\n+  VERIFY( m1.find(\"the way you are when\") != m1.end() );\n+  VERIFY( m1.find(\"a cereous night\") != m1.end() );\n+\n+  VERIFY( m1.erase(it5->first) == 1 );\n+  VERIFY( m1.size() == 5 );\n+  it5 = m1.find(\"umbra/penumbra\");\n+  VERIFY( it5 == m1.end() );\n+\n+  VERIFY( m1.erase(it6->first) == 1 );\n+  VERIFY( m1.size() == 4 );\n+  it6 = m1.find(\"one line behind\");\n+  VERIFY( it6 == m1.end() );\n+\n+  iterator it7 = m1.begin();\n+  iterator it8 = it7;\n+  ++it8;\n+  iterator it9 = it8;\n+  ++it9;\n+\n+  VERIFY( m1.erase(it8->first) == 1 );\n+  VERIFY( m1.size() == 3 );\n+  VERIFY( ++it7 == it9 );\n+\n+  iterator it10 = it9;\n+  ++it10;\n+  iterator it11 = it10;\n+\n+  VERIFY( m1.erase(it9->first) == 1 );\n+  VERIFY( m1.size() == 2 );\n+  VERIFY( ++it10 == m1.end() );\n+\n+  VERIFY( m1.erase(m1.begin()) != m1.end() );  \n+  VERIFY( m1.size() == 1 );\n+  VERIFY( m1.begin() == it11 );\n+\n+  VERIFY( m1.erase(m1.begin()->first) == 1 );  \n+  VERIFY( m1.size() == 0 );\n+  VERIFY( m1.begin() == m1.end() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f060f4be57553c40c7f075dee5fa0406f35434cd", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered_multimap/erase/1.cc", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c424e4abeaf645c6646cf32fc11592ba145288/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multimap%2Ferase%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c424e4abeaf645c6646cf32fc11592ba145288/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multimap%2Ferase%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multimap%2Ferase%2F1.cc?ref=c0c424e4abeaf645c6646cf32fc11592ba145288", "patch": "@@ -0,0 +1,131 @@\n+// 2007-02-22  Paolo Carlini  <pcarlini@suse.de> \n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 6.3.4.6  Class template unordered_multimap\n+\n+#include <tr1/unordered_map>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// In the occasion of libstdc++/25896\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  typedef std::tr1::unordered_multimap<std::string, int> Mmap;\n+  typedef Mmap::iterator       iterator;\n+  typedef Mmap::const_iterator const_iterator;\n+  typedef Mmap::value_type     value_type;\n+\n+  Mmap mm1;\n+\n+  mm1.insert(value_type(\"because to why\", 1));\n+  mm1.insert(value_type(\"the stockholm syndrome\", 2));\n+  mm1.insert(value_type(\"a cereous night\", 3));\n+  mm1.insert(value_type(\"eeilo\", 4));\n+  mm1.insert(value_type(\"protean\", 5));\n+  mm1.insert(value_type(\"the way you are when\", 6));\n+  mm1.insert(value_type(\"tillsammans\", 7));\n+  mm1.insert(value_type(\"umbra/penumbra\", 8));\n+  mm1.insert(value_type(\"belonging (no longer mix)\", 9));\n+  mm1.insert(value_type(\"one line behind\", 10));\n+  VERIFY( mm1.size() == 10 );\n+\n+  VERIFY( mm1.erase(\"eeilo\") == 1 );\n+  VERIFY( mm1.size() == 9 );\n+  iterator it1 = mm1.find(\"eeilo\");\n+  VERIFY( it1 == mm1.end() );\n+\n+  VERIFY( mm1.erase(\"tillsammans\") == 1 );\n+  VERIFY( mm1.size() == 8 );\n+  iterator it2 = mm1.find(\"tillsammans\");\n+  VERIFY( it2 == mm1.end() );\n+\n+  // Must work (see DR 526)\n+  iterator it3 = mm1.find(\"belonging (no longer mix)\");\n+  VERIFY( it3 != mm1.end() );\n+  VERIFY( mm1.erase(it3->first) == 1 );\n+  VERIFY( mm1.size() == 7 );\n+  it3 = mm1.find(\"belonging (no longer mix)\");\n+  VERIFY( it3 == mm1.end() );\n+\n+  VERIFY( !mm1.erase(\"abra\") );\n+  VERIFY( mm1.size() == 7 );\n+\n+  VERIFY( !mm1.erase(\"eeilo\") );\n+  VERIFY( mm1.size() == 7 );\n+\n+  VERIFY( mm1.erase(\"because to why\") == 1 );\n+  VERIFY( mm1.size() == 6 );\n+  iterator it4 = mm1.find(\"because to why\");\n+  VERIFY( it4 == mm1.end() );\n+\n+  iterator it5 = mm1.find(\"umbra/penumbra\");\n+  iterator it6 = mm1.find(\"one line behind\");\n+  VERIFY( it5 != mm1.end() );\n+  VERIFY( it6 != mm1.end() );\n+\n+  VERIFY( mm1.find(\"the stockholm syndrome\") != mm1.end() );\n+  VERIFY( mm1.find(\"a cereous night\") != mm1.end() );\n+  VERIFY( mm1.find(\"the way you are when\") != mm1.end() );\n+  VERIFY( mm1.find(\"a cereous night\") != mm1.end() );\n+\n+  VERIFY( mm1.erase(it5->first) == 1 );\n+  VERIFY( mm1.size() == 5 );\n+  it5 = mm1.find(\"umbra/penumbra\");\n+  VERIFY( it5 == mm1.end() );\n+\n+  VERIFY( mm1.erase(it6->first) == 1 );\n+  VERIFY( mm1.size() == 4 );\n+  it6 = mm1.find(\"one line behind\");\n+  VERIFY( it6 == mm1.end() );\n+\n+  iterator it7 = mm1.begin();\n+  iterator it8 = it7;\n+  ++it8;\n+  iterator it9 = it8;\n+  ++it9;\n+\n+  VERIFY( mm1.erase(it8->first) == 1 );\n+  VERIFY( mm1.size() == 3 );\n+  VERIFY( ++it7 == it9 );\n+\n+  iterator it10 = it9;\n+  ++it10;\n+  iterator it11 = it10;\n+\n+  VERIFY( mm1.erase(it9->first) == 1 );\n+  VERIFY( mm1.size() == 2 );\n+  VERIFY( ++it10 == mm1.end() );\n+\n+  VERIFY( mm1.erase(mm1.begin()) != mm1.end() );  \n+  VERIFY( mm1.size() == 1 );\n+  VERIFY( mm1.begin() == it11 );\n+\n+  VERIFY( mm1.erase(mm1.begin()->first) == 1 );  \n+  VERIFY( mm1.size() == 0 );\n+  VERIFY( mm1.begin() == mm1.end() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f98e5c2dabb19b62de0d1c26f689cca78c11a3ff", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered_multiset/erase/1.cc", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c424e4abeaf645c6646cf32fc11592ba145288/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multiset%2Ferase%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c424e4abeaf645c6646cf32fc11592ba145288/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multiset%2Ferase%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_multiset%2Ferase%2F1.cc?ref=c0c424e4abeaf645c6646cf32fc11592ba145288", "patch": "@@ -0,0 +1,130 @@\n+// 2007-02-22  Paolo Carlini  <pcarlini@suse.de> \n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 6.3.4.5  Class template unordered_multiset\n+\n+#include <tr1/unordered_set>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// In the occasion of libstdc++/25896\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  typedef std::tr1::unordered_multiset<std::string> Mset;\n+  typedef Mset::iterator       iterator;\n+  typedef Mset::const_iterator const_iterator;\n+\n+  Mset ms1;\n+  \n+  ms1.insert(\"because to why\");\n+  ms1.insert(\"the stockholm syndrome\");\n+  ms1.insert(\"a cereous night\");\n+  ms1.insert(\"eeilo\");\n+  ms1.insert(\"protean\");\n+  ms1.insert(\"the way you are when\");\n+  ms1.insert(\"tillsammans\");\n+  ms1.insert(\"umbra/penumbra\");\n+  ms1.insert(\"belonging (no longer mix)\");\n+  ms1.insert(\"one line behind\");\n+  VERIFY( ms1.size() == 10 );\n+\n+  VERIFY( ms1.erase(\"eeilo\") == 1 );\n+  VERIFY( ms1.size() == 9 );\n+  iterator it1 = ms1.find(\"eeilo\");\n+  VERIFY( it1 == ms1.end() );\n+\n+  VERIFY( ms1.erase(\"tillsammans\") == 1 );\n+  VERIFY( ms1.size() == 8 );\n+  iterator it2 = ms1.find(\"tillsammans\");\n+  VERIFY( it2 == ms1.end() );\n+\n+  // Must work (see DR 526)\n+  iterator it3 = ms1.find(\"belonging (no longer mix)\");\n+  VERIFY( it3 != ms1.end() );\n+  VERIFY( ms1.erase(*it3) == 1 );\n+  VERIFY( ms1.size() == 7 );\n+  it3 = ms1.find(\"belonging (no longer mix)\");\n+  VERIFY( it3 == ms1.end() );\n+\n+  VERIFY( !ms1.erase(\"abra\") );\n+  VERIFY( ms1.size() == 7 );\n+\n+  VERIFY( !ms1.erase(\"eeilo\") );\n+  VERIFY( ms1.size() == 7 );\n+\n+  VERIFY( ms1.erase(\"because to why\") == 1 );\n+  VERIFY( ms1.size() == 6 );\n+  iterator it4 = ms1.find(\"because to why\");\n+  VERIFY( it4 == ms1.end() );\n+\n+  iterator it5 = ms1.find(\"umbra/penumbra\");\n+  iterator it6 = ms1.find(\"one line behind\");\n+  VERIFY( it5 != ms1.end() );\n+  VERIFY( it6 != ms1.end() );\n+\n+  VERIFY( ms1.find(\"the stockholm syndrome\") != ms1.end() );\n+  VERIFY( ms1.find(\"a cereous night\") != ms1.end() );\n+  VERIFY( ms1.find(\"the way you are when\") != ms1.end() );\n+  VERIFY( ms1.find(\"a cereous night\") != ms1.end() );\n+\n+  VERIFY( ms1.erase(*it5) == 1 );\n+  VERIFY( ms1.size() == 5 );\n+  it5 = ms1.find(\"umbra/penumbra\");\n+  VERIFY( it5 == ms1.end() );\n+\n+  VERIFY( ms1.erase(*it6) == 1 );\n+  VERIFY( ms1.size() == 4 );\n+  it6 = ms1.find(\"one line behind\");\n+  VERIFY( it6 == ms1.end() );\n+\n+  iterator it7 = ms1.begin();\n+  iterator it8 = it7;\n+  ++it8;\n+  iterator it9 = it8;\n+  ++it9;\n+\n+  VERIFY( ms1.erase(*it8) == 1 );\n+  VERIFY( ms1.size() == 3 );\n+  VERIFY( ++it7 == it9 );\n+\n+  iterator it10 = it9;\n+  ++it10;\n+  iterator it11 = it10;\n+\n+  VERIFY( ms1.erase(*it9) == 1 );\n+  VERIFY( ms1.size() == 2 );\n+  VERIFY( ++it10 == ms1.end() );\n+\n+  VERIFY( ms1.erase(ms1.begin()) != ms1.end() );  \n+  VERIFY( ms1.size() == 1 );\n+  VERIFY( ms1.begin() == it11 );\n+\n+  VERIFY( ms1.erase(*ms1.begin()) == 1 );  \n+  VERIFY( ms1.size() == 0 );\n+  VERIFY( ms1.begin() == ms1.end() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "823a9b8a1da8c1e3204b02110195442abb7b4ab9", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered_set/erase/1.cc", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c424e4abeaf645c6646cf32fc11592ba145288/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_set%2Ferase%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c424e4abeaf645c6646cf32fc11592ba145288/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_set%2Ferase%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered_set%2Ferase%2F1.cc?ref=c0c424e4abeaf645c6646cf32fc11592ba145288", "patch": "@@ -0,0 +1,130 @@\n+// 2007-02-22  Paolo Carlini  <pcarlini@suse.de> \n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 6.3.4.3  Class template unordered_set\n+\n+#include <tr1/unordered_set>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// In the occasion of libstdc++/25896\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  typedef std::tr1::unordered_set<std::string> Set;\n+  typedef Set::iterator       iterator;\n+  typedef Set::const_iterator const_iterator;\n+\n+  Set s1;\n+  \n+  s1.insert(\"because to why\");\n+  s1.insert(\"the stockholm syndrome\");\n+  s1.insert(\"a cereous night\");\n+  s1.insert(\"eeilo\");\n+  s1.insert(\"protean\");\n+  s1.insert(\"the way you are when\");\n+  s1.insert(\"tillsammans\");\n+  s1.insert(\"umbra/penumbra\");\n+  s1.insert(\"belonging (no longer mix)\");\n+  s1.insert(\"one line behind\");\n+  VERIFY( s1.size() == 10 );\n+\n+  VERIFY( s1.erase(\"eeilo\") == 1 );\n+  VERIFY( s1.size() == 9 );\n+  iterator it1 = s1.find(\"eeilo\");\n+  VERIFY( it1 == s1.end() );\n+\n+  VERIFY( s1.erase(\"tillsammans\") == 1 );\n+  VERIFY( s1.size() == 8 );\n+  iterator it2 = s1.find(\"tillsammans\");\n+  VERIFY( it2 == s1.end() );\n+\n+  // Must work (see DR 526)\n+  iterator it3 = s1.find(\"belonging (no longer mix)\");\n+  VERIFY( it3 != s1.end() );\n+  VERIFY( s1.erase(*it3) == 1 );\n+  VERIFY( s1.size() == 7 );\n+  it3 = s1.find(\"belonging (no longer mix)\");\n+  VERIFY( it3 == s1.end() );\n+\n+  VERIFY( !s1.erase(\"abra\") );\n+  VERIFY( s1.size() == 7 );\n+\n+  VERIFY( !s1.erase(\"eeilo\") );\n+  VERIFY( s1.size() == 7 );\n+\n+  VERIFY( s1.erase(\"because to why\") == 1 );\n+  VERIFY( s1.size() == 6 );\n+  iterator it4 = s1.find(\"because to why\");\n+  VERIFY( it4 == s1.end() );\n+\n+  iterator it5 = s1.find(\"umbra/penumbra\");\n+  iterator it6 = s1.find(\"one line behind\");\n+  VERIFY( it5 != s1.end() );\n+  VERIFY( it6 != s1.end() );\n+\n+  VERIFY( s1.find(\"the stockholm syndrome\") != s1.end() );\n+  VERIFY( s1.find(\"a cereous night\") != s1.end() );\n+  VERIFY( s1.find(\"the way you are when\") != s1.end() );\n+  VERIFY( s1.find(\"a cereous night\") != s1.end() );\n+\n+  VERIFY( s1.erase(*it5) == 1 );\n+  VERIFY( s1.size() == 5 );\n+  it5 = s1.find(\"umbra/penumbra\");\n+  VERIFY( it5 == s1.end() );\n+\n+  VERIFY( s1.erase(*it6) == 1 );\n+  VERIFY( s1.size() == 4 );\n+  it6 = s1.find(\"one line behind\");\n+  VERIFY( it6 == s1.end() );\n+\n+  iterator it7 = s1.begin();\n+  iterator it8 = it7;\n+  ++it8;\n+  iterator it9 = it8;\n+  ++it9;\n+\n+  VERIFY( s1.erase(*it8) == 1 );\n+  VERIFY( s1.size() == 3 );\n+  VERIFY( ++it7 == it9 );\n+\n+  iterator it10 = it9;\n+  ++it10;\n+  iterator it11 = it10;\n+\n+  VERIFY( s1.erase(*it9) == 1 );\n+  VERIFY( s1.size() == 2 );\n+  VERIFY( ++it10 == s1.end() );\n+\n+  VERIFY( s1.erase(s1.begin()) != s1.end() );  \n+  VERIFY( s1.size() == 1 );\n+  VERIFY( s1.begin() == it11 );\n+\n+  VERIFY( s1.erase(*s1.begin()) == 1 );  \n+  VERIFY( s1.size() == 0 );\n+  VERIFY( s1.begin() == s1.end() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}