{"sha": "4bdd090f8e0becf7191967e920aa1c9f9b796d1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJkZDA5MGY4ZTBiZWNmNzE5MTk2N2U5MjBhYTFjOWY5Yjc5NmQxYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-11-09T18:09:53Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-11-09T18:09:53Z"}, "message": "libitm: Configure for gas cfi pseudo ops.\n\n\t* asmcfi.m4: New file.\n\n\t* configure.ac (GCC_AS_CFI_PSEUDO_OP): Test it.\n\t* configure, aclocal.m4, config.h.in: Rebuild.\n\t* config/generic/asmcfi.h: New file.\n\t* config/x86/sjlj.S: Use it.\n\nFrom-SVN: r181224", "tree": {"sha": "2be51ac0c0d2ab8042b16a9225e4d4826aac0051", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2be51ac0c0d2ab8042b16a9225e4d4826aac0051"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bdd090f8e0becf7191967e920aa1c9f9b796d1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bdd090f8e0becf7191967e920aa1c9f9b796d1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bdd090f8e0becf7191967e920aa1c9f9b796d1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bdd090f8e0becf7191967e920aa1c9f9b796d1b/comments", "author": null, "committer": null, "parents": [{"sha": "29d281ca3a5cd40890ed826c6c6b8efe65ca266d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29d281ca3a5cd40890ed826c6c6b8efe65ca266d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29d281ca3a5cd40890ed826c6c6b8efe65ca266d"}], "stats": {"total": 140, "additions": 128, "deletions": 12}, "files": [{"sha": "4f202ffbc9affd6208136b20e1d35d699f352e87", "filename": "config/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bdd090f8e0becf7191967e920aa1c9f9b796d1b/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bdd090f8e0becf7191967e920aa1c9f9b796d1b/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=4bdd090f8e0becf7191967e920aa1c9f9b796d1b", "patch": "@@ -1,3 +1,7 @@\n+2011-11-09  Richard Henderson  <rth@redhat.com>\n+\n+\t* asmcfi.m4: New file.\n+\n 2011-11-02  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* mh-interix (LIBGCC2_DEBUG_CFLAGS): Remove."}, {"sha": "a725aa11de46010bc2f8faaae7c343946ae7c75b", "filename": "config/asmcfi.m4", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bdd090f8e0becf7191967e920aa1c9f9b796d1b/config%2Fasmcfi.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bdd090f8e0becf7191967e920aa1c9f9b796d1b/config%2Fasmcfi.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fasmcfi.m4?ref=4bdd090f8e0becf7191967e920aa1c9f9b796d1b", "patch": "@@ -0,0 +1,15 @@\n+;; Cribbed from libffi\n+\n+AC_DEFUN([GCC_AS_CFI_PSEUDO_OP],\n+[AC_CACHE_CHECK([assembler .cfi pseudo-op support],\n+    gcc_cv_as_cfi_pseudo_op, [\n+    gcc_cv_as_cfi_pseudo_op=unknown\n+    AC_TRY_COMPILE([asm (\".cfi_startproc\\n\\t.cfi_endproc\");],,\n+\t\t   [gcc_cv_as_cfi_pseudo_op=yes],\n+\t\t   [gcc_cv_as_cfi_pseudo_op=no])\n+ ])\n+ if test \"x$gcc_cv_as_cfi_pseudo_op\" = xyes; then\n+    AC_DEFINE(HAVE_AS_CFI_PSEUDO_OP, 1,\n+\t      [Define if your assembler supports .cfi_* directives.])\n+ fi\n+])"}, {"sha": "e91f91e5497f9b5a2b4a49332b40d1d81a8c0128", "filename": "libitm/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bdd090f8e0becf7191967e920aa1c9f9b796d1b/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bdd090f8e0becf7191967e920aa1c9f9b796d1b/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=4bdd090f8e0becf7191967e920aa1c9f9b796d1b", "patch": "@@ -1,3 +1,10 @@\n+2011-11-09  Richard Henderson  <rth@redhat.com>\n+\n+\t* configure.ac (GCC_AS_CFI_PSEUDO_OP): Test it.\n+\t* configure, aclocal.m4, config.h.in: Rebuild.\n+\t* config/generic/asmcfi.h: New file.\n+\t* config/x86/sjlj.S: Use it.\n+\n 2011-11-08  Richard Henderson  <rth@redhat.com>\n \n \t* local.cc (_ITM_LB): Use a normal call, not a function alias."}, {"sha": "96617e6e4db9a0085ca18258627259ed8a493095", "filename": "libitm/aclocal.m4", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bdd090f8e0becf7191967e920aa1c9f9b796d1b/libitm%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bdd090f8e0becf7191967e920aa1c9f9b796d1b/libitm%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Faclocal.m4?ref=4bdd090f8e0becf7191967e920aa1c9f9b796d1b", "patch": "@@ -991,6 +991,7 @@ AC_SUBST([am__untar])\n ]) # _AM_PROG_TAR\n \n m4_include([../config/acx.m4])\n+m4_include([../config/asmcfi.m4])\n m4_include([../config/depstand.m4])\n m4_include([../config/enable.m4])\n m4_include([../config/futex.m4])"}, {"sha": "369f6c66caf5fbdb7e27a9d993522705267e5822", "filename": "libitm/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bdd090f8e0becf7191967e920aa1c9f9b796d1b/libitm%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bdd090f8e0becf7191967e920aa1c9f9b796d1b/libitm%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig.h.in?ref=4bdd090f8e0becf7191967e920aa1c9f9b796d1b", "patch": "@@ -6,6 +6,9 @@\n /* Define to 1 if the target supports 64-bit __sync_*_compare_and_swap */\n #undef HAVE_64BIT_SYNC_BUILTINS\n \n+/* Define if your assembler supports .cfi_* directives. */\n+#undef HAVE_AS_CFI_PSEUDO_OP\n+\n /* Define to 1 if the target supports __attribute__((alias(...))). */\n #undef HAVE_ATTRIBUTE_ALIAS\n "}, {"sha": "fcb45c58739807eed819ac6ed51e92351b484ab0", "filename": "libitm/config/generic/asmcfi.h", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bdd090f8e0becf7191967e920aa1c9f9b796d1b/libitm%2Fconfig%2Fgeneric%2Fasmcfi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bdd090f8e0becf7191967e920aa1c9f9b796d1b/libitm%2Fconfig%2Fgeneric%2Fasmcfi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig%2Fgeneric%2Fasmcfi.h?ref=4bdd090f8e0becf7191967e920aa1c9f9b796d1b", "patch": "@@ -0,0 +1,44 @@\n+\n+/* Copyright (C) 2011 Free Software Foundation, Inc.\n+   Contributed by Richard Henderson <rth@redhat.com>.\n+\n+   This file is part of the GNU Transactional Memory Library (libitm).\n+\n+   Libitm is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   Libitm is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n+   more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+\n+#ifdef HAVE_AS_CFI_PSEUDO_OP\n+\n+#define cfi_startproc\t\t.cfi_startproc\n+#define cfi_endproc\t\t.cfi_endproc\n+#define cfi_def_cfa_offset(n)\t.cfi_def_cfa_offset n\n+#define cfi_def_cfa(r,n)\t.cfi_def_cfa r, n\n+#define cfi_register(o,n)\t.cfi_register o, n\n+\n+#else\n+\n+#define cfi_startproc\n+#define cfi_endproc\n+#define cfi_def_cfa_offset(n)\n+#define cfi_def_cfa(r,n)\n+#define cfi_register(o,n)\n+\n+#endif /* HAVE_ASM_CFI */"}, {"sha": "616949904b05503b5d62f092074123ac0bf5192c", "filename": "libitm/config/x86/sjlj.S", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bdd090f8e0becf7191967e920aa1c9f9b796d1b/libitm%2Fconfig%2Fx86%2Fsjlj.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bdd090f8e0becf7191967e920aa1c9f9b796d1b/libitm%2Fconfig%2Fx86%2Fsjlj.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig%2Fx86%2Fsjlj.S?ref=4bdd090f8e0becf7191967e920aa1c9f9b796d1b", "patch": "@@ -22,18 +22,21 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n+\n+#include \"asmcfi.h\"\n+\n \t.text\n \t.p2align 4\n \t.globl\t_ITM_beginTransaction\n \t.type\t_ITM_beginTransaction, @function\n \n _ITM_beginTransaction:\n-\t.cfi_startproc\n+\tcfi_startproc\n #ifdef __x86_64__\n \tleaq\t8(%rsp), %rax\n \tmovq\t(%rsp), %r8\n \tsubq\t$72, %rsp\n-\t.cfi_def_cfa_offset 80\n+\tcfi_def_cfa_offset(80)\n \tmovq\t%rax, (%rsp)\n \tmovq\t%r8, 8(%rsp)\n \tmovq\t%rbx, 16(%rsp)\n@@ -45,12 +48,12 @@ _ITM_beginTransaction:\n \tmovq\t%rsp, %rsi\n \tcall\tGTM_begin_transaction\n \taddq\t$72, %rsp\n-\t.cfi_def_cfa_offset 8\n+\tcfi_def_cfa_offset(8)\n \tret\n #else\n \tleal\t4(%esp), %ecx\n \tsubl\t$28, %esp\n-\t.cfi_def_cfa_offset 32\n+\tcfi_def_cfa_offset(32)\n \tmovl\t%ecx, 8(%esp)\n \tmovl\t%ebx, 12(%esp)\n \tmovl\t%esi, 16(%esp)\n@@ -59,10 +62,10 @@ _ITM_beginTransaction:\n \tleal\t8(%esp), %edx\n \tcall\tGTM_begin_transaction\n \taddl\t$28, %esp\n-\t.cfi_def_cfa_offset 4\n+\tcfi_def_cfa_offset(4)\n \tret\n #endif\n-\t.cfi_endproc\n+\tcfi_endproc\n \t.size\t_ITM_beginTransaction, .-_ITM_beginTransaction\n \n \t.p2align 4\n@@ -71,7 +74,7 @@ _ITM_beginTransaction:\n \t.hidden\tGTM_longjmp\n \n GTM_longjmp:\n-\t.cfi_startproc\n+\tcfi_startproc\n #ifdef __x86_64__\n \tmovq\t(%rdi), %rcx\n \tmovq\t8(%rdi), %rdx\n@@ -82,8 +85,8 @@ GTM_longjmp:\n \tmovq\t48(%rdi), %r14\n \tmovq\t56(%rdi), %r15\n \tmovl\t%esi, %eax\n-\t.cfi_def_cfa %rcx, 0\n-\t.cfi_register %rip, %rdx\n+\tcfi_def_cfa(%rcx, 0)\n+\tcfi_register(%rip, %rdx)\n \tmovq\t%rcx, %rsp\n \tjmp\t*%rdx\n #else\n@@ -94,12 +97,12 @@ GTM_longjmp:\n \tmovl\t12(%edx), %edi\n \tmovl\t16(%edx), %ebp\n \tmovl\t20(%edx), %edx\n-\t.cfi_def_cfa %ecx, 0\n-\t.cfi_register %eip, %edx\n+\tcfi_def_cfa(%ecx, 0)\n+\tcfi_register(%eip, %edx)\n \tmovl\t%ecx, %esp\n \tjmp\t*%edx\n #endif\n-\t.cfi_endproc\n+\tcfi_endproc\n \t.size\tGTM_longjmp, .-GTM_longjmp\n \n .section .note.GNU-stack, \"\", @progbits"}, {"sha": "0f0ec1fc77a0cd4e60d1a557f9c4a2ff5a17fe82", "filename": "libitm/configure", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bdd090f8e0becf7191967e920aa1c9f9b796d1b/libitm%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bdd090f8e0becf7191967e920aa1c9f9b796d1b/libitm%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfigure?ref=4bdd090f8e0becf7191967e920aa1c9f9b796d1b", "patch": "@@ -16908,6 +16908,42 @@ $as_echo \"#define LIBITM_GNU_SYMBOL_VERSIONING 1\" >>confdefs.h\n \n fi\n \n+# See if we can emit unwind info in the sjlj stub.\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler .cfi pseudo-op support\" >&5\n+$as_echo_n \"checking assembler .cfi pseudo-op support... \" >&6; }\n+if test \"${gcc_cv_as_cfi_pseudo_op+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+    gcc_cv_as_cfi_pseudo_op=unknown\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+asm (\".cfi_startproc\\n\\t.cfi_endproc\");\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  gcc_cv_as_cfi_pseudo_op=yes\n+else\n+  gcc_cv_as_cfi_pseudo_op=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_cfi_pseudo_op\" >&5\n+$as_echo \"$gcc_cv_as_cfi_pseudo_op\" >&6; }\n+ if test \"x$gcc_cv_as_cfi_pseudo_op\" = xyes; then\n+\n+$as_echo \"#define HAVE_AS_CFI_PSEUDO_OP 1\" >>confdefs.h\n+\n+ fi\n+\n+\n # Determine the proper ABI type for size_t.\n \n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking how size_t is mangled\" >&5"}, {"sha": "c40ecb5bf3cab25ece27a024b32afd1dc8f16273", "filename": "libitm/configure.ac", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bdd090f8e0becf7191967e920aa1c9f9b796d1b/libitm%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bdd090f8e0becf7191967e920aa1c9f9b796d1b/libitm%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfigure.ac?ref=4bdd090f8e0becf7191967e920aa1c9f9b796d1b", "patch": "@@ -219,6 +219,9 @@ if test $enable_symvers = gnu; then\n \t    [Define to 1 if GNU symbol versioning is used for libitm.])\n fi\n \n+# See if we can emit unwind info in the sjlj stub.\n+GCC_AS_CFI_PSEUDO_OP\n+\n # Determine the proper ABI type for size_t.\n LIBITM_CHECK_SIZE_T_MANGLING\n "}]}