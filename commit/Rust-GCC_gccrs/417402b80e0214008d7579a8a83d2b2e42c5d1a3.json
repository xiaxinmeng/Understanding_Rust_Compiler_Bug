{"sha": "417402b80e0214008d7579a8a83d2b2e42c5d1a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE3NDAyYjgwZTAyMTQwMDhkNzU3OWE4YTgzZDJiMmU0MmM1ZDFhMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-05-05T01:42:07Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-05-05T01:42:07Z"}, "message": "tree.c (verify_type): Check various uses of TYPE_MAXVAL...\n\n\t* tree.c (verify_type): Check various uses of TYPE_MAXVAL;\n\tfix overactive TYPE_MIN_VALUE check and add FIXME for type\n\tcompatibility problems.\n\nFrom-SVN: r222792", "tree": {"sha": "ea268b30eb02f1f8ae41e1669b6b5f2030d33320", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea268b30eb02f1f8ae41e1669b6b5f2030d33320"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/417402b80e0214008d7579a8a83d2b2e42c5d1a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/417402b80e0214008d7579a8a83d2b2e42c5d1a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/417402b80e0214008d7579a8a83d2b2e42c5d1a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/417402b80e0214008d7579a8a83d2b2e42c5d1a3/comments", "author": null, "committer": null, "parents": [{"sha": "2bdf1dd58b6a19f34898e324c587c6ad3f291da1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bdf1dd58b6a19f34898e324c587c6ad3f291da1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bdf1dd58b6a19f34898e324c587c6ad3f291da1"}], "stats": {"total": 73, "additions": 65, "deletions": 8}, "files": [{"sha": "2ee441424f377fff814aa64405f3ea435e349097", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417402b80e0214008d7579a8a83d2b2e42c5d1a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417402b80e0214008d7579a8a83d2b2e42c5d1a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=417402b80e0214008d7579a8a83d2b2e42c5d1a3", "patch": "@@ -1,3 +1,9 @@\n+2015-05-02  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree.c (verify_type): Check various uses of TYPE_MAXVAL;\n+\tfix overactive TYPE_MIN_VALUE check and add FIXME for type\n+\tcompatibility problems.\n+\n 2015-05-04  Ajit Agarwal  <ajitkum@xilinx.com>\n \n \t* config/microblaze/microblaze.md (cbranchsi4): Added immediate"}, {"sha": "c9e78ddc23028f5fd6adaab3d5d6e28f9f87c299", "filename": "gcc/tree.c", "status": "modified", "additions": 59, "deletions": 8, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417402b80e0214008d7579a8a83d2b2e42c5d1a3/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417402b80e0214008d7579a8a83d2b2e42c5d1a3/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=417402b80e0214008d7579a8a83d2b2e42c5d1a3", "patch": "@@ -12621,14 +12621,9 @@ verify_type (const_tree t)\n     }\n   else if (INTEGRAL_TYPE_P (t) || TREE_CODE (t) == REAL_TYPE || TREE_CODE (t) == FIXED_POINT_TYPE)\n     {\n-      if (!TYPE_MIN_VALUE (t))\n-\t;\n-      else if (!TREE_CONSTANT (TYPE_MIN_VALUE (t)))\n-        {\n-\t  error (\"TYPE_MIN_VALUE is not constant\");\n-\t  debug_tree (TYPE_MIN_VALUE (t));\n-\t  error_found = true;\n-        }\n+      /* FIXME: The following check should pass:\n+\t  useless_type_conversion_p (const_cast <tree> (t), TREE_TYPE (TYPE_MIN_VALUE (t))\n+\t bud does not for C sizetypes in LTO.  */\n     }\n   else if (TYPE_MINVAL (t))\n     {\n@@ -12637,6 +12632,62 @@ verify_type (const_tree t)\n       error_found = true;\n     }\n \n+  /* Check various uses of TYPE_MAXVAL.  */\n+  if (RECORD_OR_UNION_TYPE_P (t))\n+    {\n+      if (TYPE_METHODS (t) && TREE_CODE (TYPE_METHODS (t)) != FUNCTION_DECL\n+\t  && TREE_CODE (TYPE_METHODS (t)) != TEMPLATE_DECL)\n+\t{\n+\t  error (\"TYPE_METHODS is not FUNCTION_DECL nor TEMPLATE_DECL\");\n+\t  debug_tree (TYPE_METHODS (t));\n+\t  error_found = true;\n+\t}\n+    }\n+  else if (TREE_CODE (t) == FUNCTION_TYPE || TREE_CODE (t) == METHOD_TYPE)\n+    {\n+      if (TYPE_METHOD_BASETYPE (t)\n+\t  && TREE_CODE (TYPE_METHOD_BASETYPE (t)) != RECORD_TYPE\n+\t  && TREE_CODE (TYPE_METHOD_BASETYPE (t)) != UNION_TYPE)\n+\t{\n+\t  error (\"TYPE_METHOD_BASETYPE is not record nor union\");\n+\t  debug_tree (TYPE_METHOD_BASETYPE (t));\n+\t  error_found = true;\n+\t}\n+    }\n+  else if (TREE_CODE (t) == OFFSET_TYPE)\n+    {\n+      if (TYPE_OFFSET_BASETYPE (t)\n+\t  && TREE_CODE (TYPE_OFFSET_BASETYPE (t)) != RECORD_TYPE\n+\t  && TREE_CODE (TYPE_OFFSET_BASETYPE (t)) != UNION_TYPE)\n+\t{\n+\t  error (\"TYPE_OFFSET_BASETYPE is not record nor union\");\n+\t  debug_tree (TYPE_OFFSET_BASETYPE (t));\n+\t  error_found = true;\n+\t}\n+    }\n+  else if (INTEGRAL_TYPE_P (t) || TREE_CODE (t) == REAL_TYPE || TREE_CODE (t) == FIXED_POINT_TYPE)\n+    {\n+      /* FIXME: The following check should pass:\n+\t  useless_type_conversion_p (const_cast <tree> (t), TREE_TYPE (TYPE_MAX_VALUE (t))\n+\t bud does not for C sizetypes in LTO.  */\n+    }\n+  else if (TREE_CODE (t) == ARRAY_TYPE)\n+    {\n+      if (TYPE_ARRAY_MAX_SIZE (t)\n+\t  && TREE_CODE (TYPE_ARRAY_MAX_SIZE (t)) != INTEGER_CST)\n+        {\n+\t  error (\"TYPE_ARRAY_MAX_SIZE not INTEGER_CST\");\n+\t  debug_tree (TYPE_ARRAY_MAX_SIZE (t));\n+\t  error_found = true;\n+        } \n+    }\n+  else if (TYPE_MAXVAL (t))\n+    {\n+      error (\"TYPE_MAXVAL non-NULL\");\n+      debug_tree (TYPE_MAXVAL (t));\n+      error_found = true;\n+    }\n+\n \n   if (error_found)\n     {"}]}