{"sha": "0e45ec206c6aa3715fa55a9ee8986670eff38b14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU0NWVjMjA2YzZhYTM3MTVmYTU1YTllZTg5ODY2NzBlZmYzOGIxNA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2012-10-29T19:27:31Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2012-10-29T19:27:31Z"}, "message": "re PR debug/54551 (DF resets some DEBUG_INSNs unnecessarily)\n\nPR debug/54551\nPR debug/54693\n* valtrack.c (dead_debug_global_find): Accept NULL dtemp.\n(dead_debug_global_insert): Return new entry.\n(dead_debug_global_replace_temp): Return early if REG is no\nlonger in place, or if dtemp was already substituted.\n(dead_debug_promote_uses): Insert for all defs and replace all\ndebug uses at once.\n(dead_debug_local_finish): Release used after promotion.\n(dead_debug_insert_temp): Stop if dtemp is NULL.\n\nFrom-SVN: r192959", "tree": {"sha": "fc4dbac1aeedff33373bc39d63f6ab98048b4828", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc4dbac1aeedff33373bc39d63f6ab98048b4828"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e45ec206c6aa3715fa55a9ee8986670eff38b14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e45ec206c6aa3715fa55a9ee8986670eff38b14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e45ec206c6aa3715fa55a9ee8986670eff38b14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e45ec206c6aa3715fa55a9ee8986670eff38b14/comments", "author": null, "committer": null, "parents": [{"sha": "8efb4b35f3dbd086544c67b2835e579e3926a516", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8efb4b35f3dbd086544c67b2835e579e3926a516", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8efb4b35f3dbd086544c67b2835e579e3926a516"}], "stats": {"total": 81, "additions": 65, "deletions": 16}, "files": [{"sha": "8422ca06275a6eb0a0d8d946363062daba5c369c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e45ec206c6aa3715fa55a9ee8986670eff38b14/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e45ec206c6aa3715fa55a9ee8986670eff38b14/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e45ec206c6aa3715fa55a9ee8986670eff38b14", "patch": "@@ -1,3 +1,16 @@\n+2012-10-29  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR debug/54551\n+\tPR debug/54693\n+\t* valtrack.c (dead_debug_global_find): Accept NULL dtemp.\n+\t(dead_debug_global_insert): Return new entry.\n+\t(dead_debug_global_replace_temp): Return early if REG is no\n+\tlonger in place, or if dtemp was already substituted.\n+\t(dead_debug_promote_uses): Insert for all defs and replace all\n+\tdebug uses at once.\n+\t(dead_debug_local_finish): Release used after promotion.\n+\t(dead_debug_insert_temp): Stop if dtemp is NULL.\n+\n 2012-10-29  Alexandre Oliva <aoliva@redhat.com>\n \n \tPR debug/54693"}, {"sha": "f6c0db473bbe90eb077110e64145a44f16b15a17", "filename": "gcc/valtrack.c", "status": "modified", "additions": 52, "deletions": 16, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e45ec206c6aa3715fa55a9ee8986670eff38b14/gcc%2Fvaltrack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e45ec206c6aa3715fa55a9ee8986670eff38b14/gcc%2Fvaltrack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvaltrack.c?ref=0e45ec206c6aa3715fa55a9ee8986670eff38b14", "patch": "@@ -225,14 +225,13 @@ dead_debug_global_find (struct dead_debug_global *global, rtx reg)\n \n   dead_debug_global_entry *entry = global->htab.find (&temp_entry);\n   gcc_checking_assert (entry && entry->reg == temp_entry.reg);\n-  gcc_checking_assert (entry->dtemp);\n \n   return entry;\n }\n \n /* Insert an entry mapping REG to DTEMP in GLOBAL->htab.  */\n \n-static void\n+static dead_debug_global_entry *\n dead_debug_global_insert (struct dead_debug_global *global, rtx reg, rtx dtemp)\n {\n   dead_debug_global_entry temp_entry;\n@@ -246,6 +245,7 @@ dead_debug_global_insert (struct dead_debug_global *global, rtx reg, rtx dtemp)\n   gcc_checking_assert (!*slot);\n   *slot = XNEW (dead_debug_global_entry);\n   **slot = temp_entry;\n+  return *slot;\n }\n \n /* If UREGNO, referenced by USE, is a pseudo marked as used in GLOBAL,\n@@ -263,16 +263,19 @@ dead_debug_global_replace_temp (struct dead_debug_global *global,\n {\n   if (!global || uregno < FIRST_PSEUDO_REGISTER\n       || !global->used\n+      || !REG_P (*DF_REF_REAL_LOC (use))\n+      || REGNO (*DF_REF_REAL_LOC (use)) != uregno\n       || !bitmap_bit_p (global->used, uregno))\n     return false;\n \n-  gcc_checking_assert (REGNO (*DF_REF_REAL_LOC (use)) == uregno);\n-\n   dead_debug_global_entry *entry\n     = dead_debug_global_find (global, *DF_REF_REAL_LOC (use));\n   gcc_checking_assert (GET_CODE (entry->reg) == REG\n \t\t       && REGNO (entry->reg) == uregno);\n \n+  if (!entry->dtemp)\n+    return true;\n+\n   *DF_REF_REAL_LOC (use) = entry->dtemp;\n   if (!pto_rescan)\n     df_insn_rescan (DF_REF_INSN (use));\n@@ -364,6 +367,8 @@ dead_debug_promote_uses (struct dead_debug_local *debug)\n        head; head = *headp)\n     {\n       rtx reg = *DF_REF_REAL_LOC (head->use);\n+      df_ref ref;\n+      dead_debug_global_entry *entry;\n \n       if (GET_CODE (reg) != REG\n \t  || REGNO (reg) < FIRST_PSEUDO_REGISTER)\n@@ -376,17 +381,46 @@ dead_debug_promote_uses (struct dead_debug_local *debug)\n \tdebug->global->used = BITMAP_ALLOC (NULL);\n \n       if (bitmap_set_bit (debug->global->used, REGNO (reg)))\n-\tdead_debug_global_insert (debug->global, reg,\n-\t\t\t\t  make_debug_expr_from_rtl (reg));\n+\tentry = dead_debug_global_insert (debug->global, reg,\n+\t\t\t\t\t  make_debug_expr_from_rtl (reg));\n \n-      if (!dead_debug_global_replace_temp (debug->global, head->use,\n-\t\t\t\t\t   REGNO (reg), &debug->to_rescan))\n-\t{\n-\t  headp = &head->next;\n-\t  continue;\n-\t}\n-      \n+      gcc_checking_assert (entry->dtemp);\n+\n+      /* Tentatively remove the USE from the list.  */\n       *headp = head->next;\n+\n+      if (!debug->to_rescan)\n+\tdebug->to_rescan = BITMAP_ALLOC (NULL);\n+\n+      for (ref = DF_REG_USE_CHAIN (REGNO (reg)); ref;\n+\t   ref = DF_REF_NEXT_REG (ref))\n+\tif (DEBUG_INSN_P (DF_REF_INSN (ref)))\n+\t  {\n+\t    if (!dead_debug_global_replace_temp (debug->global, ref,\n+\t\t\t\t\t\t REGNO (reg),\n+\t\t\t\t\t\t &debug->to_rescan))\n+\t      {\n+\t\trtx insn = DF_REF_INSN (ref);\n+\t\tINSN_VAR_LOCATION_LOC (insn) = gen_rtx_UNKNOWN_VAR_LOC ();\n+\t\tbitmap_set_bit (debug->to_rescan, INSN_UID (insn));\n+\t      }\n+\t  }\n+\n+      for (ref = DF_REG_DEF_CHAIN (REGNO (reg)); ref;\n+\t   ref = DF_REF_NEXT_REG (ref))\n+\tif (!dead_debug_insert_temp (debug, REGNO (reg), DF_REF_INSN (ref),\n+\t\t\t\t     DEBUG_TEMP_BEFORE_WITH_VALUE))\n+\t  {\n+\t    rtx bind;\n+\t    bind = gen_rtx_VAR_LOCATION (GET_MODE (reg),\n+\t\t\t\t\t DEBUG_EXPR_TREE_DECL (entry->dtemp),\n+\t\t\t\t\t gen_rtx_UNKNOWN_VAR_LOC (),\n+\t\t\t\t\t VAR_INIT_STATUS_INITIALIZED);\n+\t    rtx insn = emit_debug_insn_before (bind, DF_REF_INSN (ref));\n+\t    bitmap_set_bit (debug->to_rescan, INSN_UID (insn));\n+\t  }\n+\n+      entry->dtemp = NULL;\n       XDELETE (head);\n     }\n }\n@@ -398,12 +432,12 @@ dead_debug_promote_uses (struct dead_debug_local *debug)\n void\n dead_debug_local_finish (struct dead_debug_local *debug, bitmap used)\n {\n-  if (debug->used != used)\n-    BITMAP_FREE (debug->used);\n-\n   if (debug->global)\n     dead_debug_promote_uses (debug);\n \n+  if (debug->used != used)\n+    BITMAP_FREE (debug->used);\n+\n   dead_debug_reset_uses (debug, debug->head);\n \n   if (debug->to_rescan)\n@@ -535,6 +569,8 @@ dead_debug_insert_temp (struct dead_debug_local *debug, unsigned int uregno,\n \t= dead_debug_global_find (debug->global, reg);\n       gcc_checking_assert (entry->reg == reg);\n       dval = entry->dtemp;\n+      if (!dval)\n+\treturn 0;\n     }\n \n   gcc_checking_assert (uses || global);"}]}