{"sha": "aa81b142afd82cef291a1940b2dbca80807af59a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE4MWIxNDJhZmQ4MmNlZjI5MWExOTQwYjJkYmNhODA4MDdhZjU5YQ==", "commit": {"author": {"name": "Andrew Jenner", "email": "andrew@codesourcery.com", "date": "2018-02-02T17:31:20Z"}, "committer": {"name": "Andrew Jenner", "email": "andrewjenner@gcc.gnu.org", "date": "2018-02-02T17:31:20Z"}, "message": "powerpcspe.opt: Add Undocumented to irrelevant options.\n\n       * config/powerpcspe/powerpcspe.opt: Add Undocumented to irrelevant\n       options.\n       * config/powerpcspe/powerpcspe-tables.opt (rs6000_cpu_opt_value):\n       Remove all values except native, 8540 and 8548.\n\nFrom-SVN: r257342", "tree": {"sha": "70e699333cbcd9179cf21d18ee21f320f1036b4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70e699333cbcd9179cf21d18ee21f320f1036b4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa81b142afd82cef291a1940b2dbca80807af59a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa81b142afd82cef291a1940b2dbca80807af59a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa81b142afd82cef291a1940b2dbca80807af59a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa81b142afd82cef291a1940b2dbca80807af59a/comments", "author": {"login": "andrewjenner", "id": 35463391, "node_id": "MDQ6VXNlcjM1NDYzMzkx", "avatar_url": "https://avatars.githubusercontent.com/u/35463391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewjenner", "html_url": "https://github.com/andrewjenner", "followers_url": "https://api.github.com/users/andrewjenner/followers", "following_url": "https://api.github.com/users/andrewjenner/following{/other_user}", "gists_url": "https://api.github.com/users/andrewjenner/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewjenner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewjenner/subscriptions", "organizations_url": "https://api.github.com/users/andrewjenner/orgs", "repos_url": "https://api.github.com/users/andrewjenner/repos", "events_url": "https://api.github.com/users/andrewjenner/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewjenner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "881574614d7db23be0fd91fc0fb1e024a1fa7e36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/881574614d7db23be0fd91fc0fb1e024a1fa7e36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/881574614d7db23be0fd91fc0fb1e024a1fa7e36"}], "stats": {"total": 251, "additions": 47, "deletions": 204}, "files": [{"sha": "ae226a5d7592637a1c350b6a93e121030b95c5b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa81b142afd82cef291a1940b2dbca80807af59a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa81b142afd82cef291a1940b2dbca80807af59a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa81b142afd82cef291a1940b2dbca80807af59a", "patch": "@@ -1,3 +1,10 @@\n+2018-02-02  Andrew Jenner  <andrew@codesourcery.com>\n+\n+\t* config/powerpcspe/powerpcspe.opt: Add Undocumented to irrelevant\n+\toptions.\n+\t* config/powerpcspe/powerpcspe-tables.opt (rs6000_cpu_opt_value):\n+\tRemove all values except native, 8540 and 8548.\n+\n 2018-02-02  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (ix86_output_function_return): Pass"}, {"sha": "0ba239c7033e0b6161b7c52b732e1851b8b1463f", "filename": "gcc/config/powerpcspe/powerpcspe-tables.opt", "status": "modified", "additions": 0, "deletions": 164, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa81b142afd82cef291a1940b2dbca80807af59a/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa81b142afd82cef291a1940b2dbca80807af59a/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe-tables.opt?ref=aa81b142afd82cef291a1940b2dbca80807af59a", "patch": "@@ -1,4 +1,3 @@\n-; -*- buffer-read-only: t -*-\n ; Generated automatically by genopt.sh from powerpcspe-cpus.def.\n \n ; Copyright (C) 2011-2018 Free Software Foundation, Inc.\n@@ -26,171 +25,8 @@ Known CPUs (for use with the -mcpu= and -mtune= options):\n EnumValue\n Enum(rs6000_cpu_opt_value) String(native) Value(RS6000_CPU_OPTION_NATIVE) DriverOnly\n \n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(401) Value(0)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(403) Value(1)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(405) Value(2)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(405fp) Value(3)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(440) Value(4)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(440fp) Value(5)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(464) Value(6)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(464fp) Value(7)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(476) Value(8)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(476fp) Value(9)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(505) Value(10)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(601) Value(11)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(602) Value(12)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(603) Value(13)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(603e) Value(14)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(604) Value(15)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(604e) Value(16)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(620) Value(17)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(630) Value(18)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(740) Value(19)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(7400) Value(20)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(7450) Value(21)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(750) Value(22)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(801) Value(23)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(821) Value(24)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(823) Value(25)\n-\n EnumValue\n Enum(rs6000_cpu_opt_value) String(8540) Value(26)\n \n EnumValue\n Enum(rs6000_cpu_opt_value) String(8548) Value(27)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(a2) Value(28)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(e300c2) Value(29)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(e300c3) Value(30)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(e500mc) Value(31)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(e500mc64) Value(32)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(e5500) Value(33)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(e6500) Value(34)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(860) Value(35)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(970) Value(36)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(cell) Value(37)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(ec603e) Value(38)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(G3) Value(39)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(G4) Value(40)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(G5) Value(41)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(titan) Value(42)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(power3) Value(43)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(power4) Value(44)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(power5) Value(45)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(power5+) Value(46)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(power6) Value(47)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(power6x) Value(48)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(power7) Value(49)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(power8) Value(50)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(power9) Value(51)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(powerpc) Value(52)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(powerpc64) Value(53)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(powerpc64le) Value(54)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(rs64) Value(55)\n-"}, {"sha": "5a1632e90188bcc56763f3277cadde586a416ca5", "filename": "gcc/config/powerpcspe/powerpcspe.opt", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa81b142afd82cef291a1940b2dbca80807af59a/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa81b142afd82cef291a1940b2dbca80807af59a/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.opt?ref=aa81b142afd82cef291a1940b2dbca80807af59a", "patch": "@@ -38,7 +38,7 @@ HOST_WIDE_INT x_rs6000_isa_flags_explicit\n \n ;; Current processor\n TargetVariable\n-enum processor_type rs6000_cpu = PROCESSOR_PPC603\n+enum processor_type rs6000_cpu = PROCESSOR_PPC8540\n \n ;; Always emit branch hint bits.\n TargetVariable\n@@ -105,15 +105,15 @@ mpowerpc\n Target RejectNegative Undocumented Ignore\n \n mpowerpc64\n-Target Report Mask(POWERPC64) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(POWERPC64) Var(rs6000_isa_flags)\n Use PowerPC-64 instruction set.\n \n mpowerpc-gpopt\n-Target Report Mask(PPC_GPOPT) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(PPC_GPOPT) Var(rs6000_isa_flags)\n Use PowerPC General Purpose group optional instructions.\n \n mpowerpc-gfxopt\n-Target Report Mask(PPC_GFXOPT) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(PPC_GFXOPT) Var(rs6000_isa_flags)\n Use PowerPC Graphics group optional instructions.\n \n mmfcrf\n@@ -125,47 +125,47 @@ Target Report Mask(POPCNTB) Var(rs6000_isa_flags)\n Use PowerPC V2.02 popcntb instruction.\n \n mfprnd\n-Target Report Mask(FPRND) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(FPRND) Var(rs6000_isa_flags)\n Use PowerPC V2.02 floating point rounding instructions.\n \n mcmpb\n-Target Report Mask(CMPB) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(CMPB) Var(rs6000_isa_flags)\n Use PowerPC V2.05 compare bytes instruction.\n \n mmfpgpr\n-Target Report Mask(MFPGPR) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(MFPGPR) Var(rs6000_isa_flags)\n Use extended PowerPC V2.05 move floating point to/from GPR instructions.\n \n maltivec\n-Target Report Mask(ALTIVEC) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(ALTIVEC) Var(rs6000_isa_flags)\n Use AltiVec instructions.\n \n maltivec=le\n-Target Report RejectNegative Var(rs6000_altivec_element_order, 1) Save\n+Target Undocumented Report RejectNegative Var(rs6000_altivec_element_order, 1) Save\n Generate AltiVec instructions using little-endian element order.\n \n maltivec=be\n-Target Report RejectNegative Var(rs6000_altivec_element_order, 2)\n+Target Undocumented Report RejectNegative Var(rs6000_altivec_element_order, 2)\n Generate AltiVec instructions using big-endian element order.\n \n mhard-dfp\n-Target Report Mask(DFP) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(DFP) Var(rs6000_isa_flags)\n Use decimal floating point instructions.\n \n mmulhw\n-Target Report Mask(MULHW) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(MULHW) Var(rs6000_isa_flags)\n Use 4xx half-word multiply instructions.\n \n mdlmzb\n-Target Report Mask(DLMZB) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(DLMZB) Var(rs6000_isa_flags)\n Use 4xx string-search dlmzb instruction.\n \n mmultiple\n Target Report Mask(MULTIPLE) Var(rs6000_isa_flags)\n Generate load/store multiple instructions.\n \n mstring\n-Target Report Mask(STRING) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(STRING) Var(rs6000_isa_flags)\n Generate string instructions for block moves.\n \n msoft-float\n@@ -177,19 +177,19 @@ Target Report RejectNegative InverseMask(SOFT_FLOAT, HARD_FLOAT) Var(rs6000_isa_\n Use hardware floating point.\n \n mpopcntd\n-Target Report Mask(POPCNTD) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(POPCNTD) Var(rs6000_isa_flags)\n Use PowerPC V2.06 popcntd instruction.\n \n mfriz\n-Target Report Var(TARGET_FRIZ) Init(-1) Save\n+Target Undocumented Report Var(TARGET_FRIZ) Init(-1) Save\n Under -ffast-math, generate a FRIZ instruction for (double)(long long) conversions.\n \n mveclibabi=\n Target RejectNegative Joined Var(rs6000_veclibabi_name)\n Vector library ABI to use.\n \n mvsx\n-Target Report Mask(VSX) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(VSX) Var(rs6000_isa_flags)\n Use vector/scalar (VSX) instructions.\n \n mvsx-scalar-float\n@@ -318,15 +318,15 @@ Target Report\n Put everything in the regular TOC.\n \n mvrsave\n-Target Report Var(TARGET_ALTIVEC_VRSAVE) Save\n+Target Undocumented Report Var(TARGET_ALTIVEC_VRSAVE) Save\n Generate VRSAVE instructions when generating AltiVec code.\n \n mvrsave=no\n-Target RejectNegative Alias(mvrsave) NegativeAlias\n+Target Undocumented RejectNegative Alias(mvrsave) NegativeAlias\n Deprecated option.  Use -mno-vrsave instead.\n \n mvrsave=yes\n-Target RejectNegative Alias(mvrsave)\n+Target Undocumented RejectNegative Alias(mvrsave)\n Deprecated option.  Use -mvrsave instead.\n \n mblock-move-inline-limit=\n@@ -358,7 +358,7 @@ Target Var(rs6000_spe) Save\n Generate SPE SIMD instructions on E500.\n \n mpaired\n-Target Var(rs6000_paired_float) Save\n+Target Undocumented Var(rs6000_paired_float) Save\n Generate PPC750CL paired-single instructions.\n \n mspe=no\n@@ -374,11 +374,11 @@ Target RejectNegative Joined\n -mdebug=\tEnable debug output.\n \n mabi=altivec\n-Target RejectNegative Var(rs6000_altivec_abi) Save\n+Target Undocumented RejectNegative Var(rs6000_altivec_abi) Save\n Use the AltiVec ABI extensions.\n \n mabi=no-altivec\n-Target RejectNegative Var(rs6000_altivec_abi, 0)\n+Target Undocumented RejectNegative Var(rs6000_altivec_abi, 0)\n Do not use the AltiVec ABI extensions.\n \n mabi=spe\n@@ -442,15 +442,15 @@ Target Report Var(rs6000_default_long_calls) Save\n Avoid all range limits on call instructions.\n \n mgen-cell-microcode\n-Target Report Var(rs6000_gen_cell_microcode) Init(-1) Save\n+Target Undocumented Report Var(rs6000_gen_cell_microcode) Init(-1) Save\n Generate Cell microcode.\n \n mwarn-cell-microcode\n-Target Var(rs6000_warn_cell_microcode) Init(0) Warning Save\n+Target Undocumented Var(rs6000_warn_cell_microcode) Init(0) Warning Save\n Warn when a Cell microcoded instruction is emitted.\n \n mwarn-altivec-long\n-Target Var(rs6000_warn_altivec_long) Init(1) Save\n+Target Undocumented Var(rs6000_warn_altivec_long) Init(1) Save\n Warn about deprecated 'vector long ...' AltiVec type usage.\n \n mfloat-gprs=\n@@ -542,7 +542,7 @@ EnumValue\n Enum(fpu_type_t) String(dp_full) Value(FPU_DF_FULL)\n \n mxilinx-fpu\n-Target Var(rs6000_xilinx_fpu) Save\n+Target Undocumented Var(rs6000_xilinx_fpu) Save\n Specify Xilinx FPU.\n \n mpointers-to-nested-functions\n@@ -558,55 +558,55 @@ Target Undocumented Mask(VSX_TIMODE) Var(rs6000_isa_flags)\n Allow 128-bit integers in VSX registers.\n \n mpower8-fusion\n-Target Report Mask(P8_FUSION) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(P8_FUSION) Var(rs6000_isa_flags)\n Fuse certain integer operations together for better performance on power8.\n \n mpower8-fusion-sign\n Target Undocumented Mask(P8_FUSION_SIGN) Var(rs6000_isa_flags)\n Allow sign extension in fusion operations.\n \n mpower8-vector\n-Target Report Mask(P8_VECTOR) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(P8_VECTOR) Var(rs6000_isa_flags)\n Use vector and scalar instructions added in ISA 2.07.\n \n mcrypto\n-Target Report Mask(CRYPTO) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(CRYPTO) Var(rs6000_isa_flags)\n Use ISA 2.07 Category:Vector.AES and Category:Vector.SHA2 instructions.\n \n mdirect-move\n-Target Report Mask(DIRECT_MOVE) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(DIRECT_MOVE) Var(rs6000_isa_flags)\n Use ISA 2.07 direct move between GPR & VSX register instructions.\n \n mhtm\n-Target Report Mask(HTM) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(HTM) Var(rs6000_isa_flags)\n Use ISA 2.07 transactional memory (HTM) instructions.\n \n mquad-memory\n-Target Report Mask(QUAD_MEMORY) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(QUAD_MEMORY) Var(rs6000_isa_flags)\n Generate the quad word memory instructions (lq/stq).\n \n mquad-memory-atomic\n-Target Report Mask(QUAD_MEMORY_ATOMIC) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(QUAD_MEMORY_ATOMIC) Var(rs6000_isa_flags)\n Generate the quad word memory atomic instructions (lqarx/stqcx).\n \n mcompat-align-parm\n Target Report Var(rs6000_compat_align_parm) Init(0) Save\n Generate aggregate parameter passing code with at most 64-bit alignment.\n \n mupper-regs-df\n-Target Report Mask(UPPER_REGS_DF) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(UPPER_REGS_DF) Var(rs6000_isa_flags)\n Allow double variables in upper registers with -mcpu=power7 or -mvsx.\n \n mupper-regs-sf\n-Target Report Mask(UPPER_REGS_SF) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(UPPER_REGS_SF) Var(rs6000_isa_flags)\n Allow float variables in upper registers with -mcpu=power8 or -mpower8-vector.\n \n mupper-regs\n-Target Report Var(TARGET_UPPER_REGS) Init(-1) Save\n+Target Undocumented Report Var(TARGET_UPPER_REGS) Init(-1) Save\n Allow float/double variables in upper registers if cpu allows it.\n \n mupper-regs-di\n-Target Report Mask(UPPER_REGS_DI) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(UPPER_REGS_DI) Var(rs6000_isa_flags)\n Allow 64-bit integer variables in upper registers with -mcpu=power7 or -mvsx.\n \n moptimize-swaps\n@@ -662,15 +662,15 @@ Target Report Mask(FLOAT128_KEYWORD) Var(rs6000_isa_flags)\n Enable IEEE 128-bit floating point via the __float128 keyword.\n \n mfloat128-hardware\n-Target Report Mask(FLOAT128_HW) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(FLOAT128_HW) Var(rs6000_isa_flags)\n Enable using IEEE 128-bit floating point instructions.\n \n mfloat128-convert\n Target Undocumented Mask(FLOAT128_CVT) Var(rs6000_isa_flags)\n Enable default conversions between __float128 & long double.\n \n mvsx-small-integer\n-Target Report Mask(VSX_SMALL_INTEGER) Var(rs6000_isa_flags)\n+Target Undocumented Report Mask(VSX_SMALL_INTEGER) Var(rs6000_isa_flags)\n Enable small integers to be in VSX registers.\n \n mstack-protector-guard="}]}