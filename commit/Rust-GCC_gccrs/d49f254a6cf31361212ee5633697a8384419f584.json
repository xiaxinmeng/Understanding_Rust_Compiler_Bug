{"sha": "d49f254a6cf31361212ee5633697a8384419f584", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ5ZjI1NGE2Y2YzMTM2MTIxMmVlNTYzMzY5N2E4Mzg0NDE5ZjU4NA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-10-27T12:39:01Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-10-27T12:39:01Z"}, "message": "Provide filesystem::path overloads for file streams (LWG 2676, partial)\n\n\t* include/std/fstream (basic_filebuf::_If_path): New SFINAE helper.\n\t(basic_filebuf::open<Path>(const Path&, const ios_base::openmode&))\n\t(basic_ifstream<Path>(const Path&, const ios_base::openmode&))\n\t(basic_ifstream::open<Path>(const Path&, const ios_base::openmode&))\n\t(basic_ofstream<Path>(const Path&, const ios_base::openmode&))\n\t(basic_ofstream::open<Path>(const Path&, const ios_base::openmode&))\n\t(basic_fstream<Path>(const Path&, const ios_base::openmode&))\n\t(basic_fstream::open<Path>(const Path&, const ios_base::openmode&)):\n\tNew constructors and member functions.\n\t* testsuite/27_io/basic_filebuf/open/char/path.cc: New test.\n\t* testsuite/27_io/basic_fstream/cons/char/path.cc: New test.\n\t* testsuite/27_io/basic_fstream/open/char/path.cc: New test.\n\t* testsuite/27_io/basic_ifstream/cons/char/path.cc: New test.\n\t* testsuite/27_io/basic_ifstream/open/char/path.cc: New test.\n\t* testsuite/27_io/basic_ofstream/cons/char/path.cc: New test.\n\t* testsuite/27_io/basic_ofstream/open/char/path.cc: New test.\n\nFrom-SVN: r254148", "tree": {"sha": "b59abf7a4cc6ac4a45212d684a59e41792a015c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b59abf7a4cc6ac4a45212d684a59e41792a015c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d49f254a6cf31361212ee5633697a8384419f584", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d49f254a6cf31361212ee5633697a8384419f584", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d49f254a6cf31361212ee5633697a8384419f584", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d49f254a6cf31361212ee5633697a8384419f584/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9333319b5221fb476826ba96906eed382de9937e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9333319b5221fb476826ba96906eed382de9937e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9333319b5221fb476826ba96906eed382de9937e"}], "stats": {"total": 477, "additions": 472, "deletions": 5}, "files": [{"sha": "1821d784a3077462355e84efa0d4cef93f146a30", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49f254a6cf31361212ee5633697a8384419f584/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49f254a6cf31361212ee5633697a8384419f584/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d49f254a6cf31361212ee5633697a8384419f584", "patch": "@@ -1,5 +1,22 @@\n 2017-10-27  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/fstream (basic_filebuf::_If_path): New SFINAE helper.\n+\t(basic_filebuf::open<Path>(const Path&, const ios_base::openmode&))\n+\t(basic_ifstream<Path>(const Path&, const ios_base::openmode&))\n+\t(basic_ifstream::open<Path>(const Path&, const ios_base::openmode&))\n+\t(basic_ofstream<Path>(const Path&, const ios_base::openmode&))\n+\t(basic_ofstream::open<Path>(const Path&, const ios_base::openmode&))\n+\t(basic_fstream<Path>(const Path&, const ios_base::openmode&))\n+\t(basic_fstream::open<Path>(const Path&, const ios_base::openmode&)):\n+\tNew constructors and member functions.\n+\t* testsuite/27_io/basic_filebuf/open/char/path.cc: New test.\n+\t* testsuite/27_io/basic_fstream/cons/char/path.cc: New test.\n+\t* testsuite/27_io/basic_fstream/open/char/path.cc: New test.\n+\t* testsuite/27_io/basic_ifstream/cons/char/path.cc: New test.\n+\t* testsuite/27_io/basic_ifstream/open/char/path.cc: New test.\n+\t* testsuite/27_io/basic_ofstream/cons/char/path.cc: New test.\n+\t* testsuite/27_io/basic_ofstream/open/char/path.cc: New test.\n+\n \t* include/bits/fs_path.h (path::format): Define new enumeration type.\n \t(path(string_type&&), path<Source>(const Source&))\n \t(path<InputIterator>(InputIterator, InputIterator))"}, {"sha": "3205f81fb4763a74ee6eedc67c15f9b6e108aa5a", "filename": "libstdc++-v3/include/std/fstream", "status": "modified", "additions": 120, "deletions": 5, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49f254a6cf31361212ee5633697a8384419f584/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49f254a6cf31361212ee5633697a8384419f584/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream?ref=d49f254a6cf31361212ee5633697a8384419f584", "patch": "@@ -216,6 +216,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n       }\n \n+#if __cplusplus >= 201703L\n+      template<typename _Path, typename _Result = _Path, typename _Path2\n+\t       = decltype(std::declval<_Path&>().make_preferred().native())>\n+\tusing _If_path = enable_if_t<is_same_v<_Path, _Path2>, _Result>;\n+#endif // C++17\n+\n     public:\n       // Constructors/destructor:\n       /**\n@@ -306,7 +312,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __filebuf_type*\n       open(const std::string& __s, ios_base::openmode __mode)\n       { return open(__s.c_str(), __mode); }\n-#endif\n+\n+#if __cplusplus >= 201703L\n+      /**\n+       *  @brief  Opens an external file.\n+       *  @param  __s  The name of the file, as a filesystem::path.\n+       *  @param  __mode  The open mode flags.\n+       *  @return  @c this on success, NULL on failure\n+       */\n+      template<typename _Path>\n+\t_If_path<_Path, __filebuf_type*>\n+\topen(const _Path& __s, ios_base::openmode __mode)\n+\t{ return open(__s.c_str(), __mode); }\n+#endif // C++17\n+#endif // C++11\n \n       /**\n        *  @brief  Closes the currently associated file.\n@@ -516,13 +535,29 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tthis->open(__s, __mode);\n       }\n \n+#if __cplusplus >= 201703L\n+      /**\n+       *  @param  Create an input file stream.\n+       *  @param  __s  filesystem::path specifying the filename.\n+       *  @param  __mode  Open file in specified mode (see std::ios_base).\n+       *\n+       *  @c ios_base::in is automatically included in @a __mode.\n+       */\n+      template<typename _Path, typename = _Require<\n+\t  is_constructible<__filebuf_type, const _Path&, ios_base::openmode>>>\n+\tbasic_ifstream(const _Path& __s,\n+\t\t       ios_base::openmode __mode = ios_base::in)\n+\t: basic_ifstream(__s.c_str(), __mode)\n+\t{ }\n+#endif // C++17\n+\n       basic_ifstream(const basic_ifstream&) = delete;\n \n       basic_ifstream(basic_ifstream&& __rhs)\n       : __istream_type(std::move(__rhs)),\n       _M_filebuf(std::move(__rhs._M_filebuf))\n       { __istream_type::set_rdbuf(&_M_filebuf); }\n-#endif\n+#endif // C++11\n \n       /**\n        *  @brief  The destructor does nothing.\n@@ -621,7 +656,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  // 409. Closing an fstream should clear error state\n \t  this->clear();\n       }\n-#endif\n+\n+#if __cplusplus >= 201703L\n+      /**\n+       *  @brief  Opens an external file.\n+       *  @param  __s  The name of the file, as a filesystem::path.\n+       *  @param  __mode  The open mode flags.\n+       *\n+       *  Calls @c std::basic_filebuf::open(__s,__mode|in).  If that function\n+       *  fails, @c failbit is set in the stream's error state.\n+       */\n+      template<typename _Path>\n+\tauto\n+\topen(const _Path& __s, ios_base::openmode __mode = ios_base::in)\n+\t-> decltype(_M_filebuf.open(__s, __mode))\n+\t{ open(__s.c_str(), __mode); }\n+#endif // C++17\n+#endif // C++11\n \n       /**\n        *  @brief  Close the file.\n@@ -720,6 +771,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tthis->open(__s, __mode);\n       }\n \n+#if __cplusplus >= 201703L\n+      /**\n+       *  @param  Create an output file stream.\n+       *  @param  __s  filesystem::path specifying the filename.\n+       *  @param  __mode  Open file in specified mode (see std::ios_base).\n+       *\n+       *  @c ios_base::out | @c ios_base::trunc is automatically included in\n+       *  @a __mode.\n+       */\n+      template<typename _Path, typename = _Require<\n+\t  is_constructible<__filebuf_type, const _Path&, ios_base::openmode>>>\n+\tbasic_ofstream(const _Path& __s, ios_base::openmode __mode\n+\t\t       = ios_base::out|ios_base::trunc)\n+\t: basic_ofstream(__s.c_str(), __mode)\n+\t{ }\n+#endif // C++17\n+\n       basic_ofstream(const basic_ofstream&) = delete;\n \n       basic_ofstream(basic_ofstream&& __rhs)\n@@ -827,7 +895,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  // 409. Closing an fstream should clear error state\n \t  this->clear();\n       }\n-#endif\n+\n+#if __cplusplus >= 201703L\n+      /**\n+       *  @brief  Opens an external file.\n+       *  @param  __s  The name of the file, as a filesystem::path.\n+       *  @param  __mode  The open mode flags.\n+       *\n+       *  Calls @c std::basic_filebuf::open(__s,__mode|out).  If that\n+       *  function fails, @c failbit is set in the stream's error state.\n+       */\n+      template<typename _Path>\n+\tauto\n+\topen(const _Path& __s, ios_base::openmode __mode = ios_base::out)\n+\t-> decltype(_M_filebuf.open(__s, __mode))\n+\t{ open(__s.c_str(), __mode); }\n+#endif // C++17\n+#endif // C++11\n \n       /**\n        *  @brief  Close the file.\n@@ -922,6 +1006,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tthis->open(__s, __mode);\n       }\n \n+#if __cplusplus >= 201703L\n+      /**\n+       *  @param  Create an input/output file stream.\n+       *  @param  __s  filesystem::path specifying the filename.\n+       *  @param  __mode  Open file in specified mode (see std::ios_base).\n+       */\n+      template<typename _Path, typename = _Require<\n+\t  is_constructible<__filebuf_type, const _Path&, ios_base::openmode>>>\n+\tbasic_fstream(const _Path& __s,\n+\t\t      ios_base::openmode __mode = ios_base::in | ios_base::out)\n+\t: basic_fstream(__s.c_str(), __mode)\n+\t{ }\n+#endif // C++17\n+\n       basic_fstream(const basic_fstream&) = delete;\n \n       basic_fstream(basic_fstream&& __rhs)\n@@ -1029,7 +1127,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  // 409. Closing an fstream should clear error state\n \t  this->clear();\n       }\n-#endif\n+\n+#if __cplusplus >= 201703L\n+      /**\n+       *  @brief  Opens an external file.\n+       *  @param  __s  The name of the file, as a filesystem::path.\n+       *  @param  __mode  The open mode flags.\n+       *\n+       *  Calls @c std::basic_filebuf::open(__s,__mode).  If that\n+       *  function fails, @c failbit is set in the stream's error state.\n+       */\n+      template<typename _Path>\n+\tauto\n+\topen(const _Path& __s,\n+\t     ios_base::openmode __mode = ios_base::in | ios_base::out)\n+\t-> decltype(_M_filebuf.open(__s, __mode))\n+\t{ open(__s.c_str(), __mode); }\n+#endif // C++17\n+#endif // C++11\n \n       /**\n        *  @brief  Close the file."}, {"sha": "56fffde5f9ba6b2314200cbc81c3c5260a18590e", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/open/char/path.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49f254a6cf31361212ee5633697a8384419f584/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2Fpath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49f254a6cf31361212ee5633697a8384419f584/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2Fpath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2Fpath.cc?ref=d49f254a6cf31361212ee5633697a8384419f584", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-do run { target c++17 } }\n+// { dg-require-fileio \"\" }\n+// { dg-require-filesystem-ts \"\" }\n+\n+#include <fstream>\n+#include <filesystem>\n+#include <testsuite_hooks.h>\n+\n+const std::filesystem::path filename = \"filebuf_members-1.tst\";\n+\n+void\n+test01()\n+{\n+  std::filebuf fb;\n+  fb.open(filename, std::ios::in);\n+  VERIFY( fb.is_open() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "4442c28c56b3b6e3c08c45d584a4403127d47208", "filename": "libstdc++-v3/testsuite/27_io/basic_fstream/cons/char/path.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49f254a6cf31361212ee5633697a8384419f584/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fcons%2Fchar%2Fpath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49f254a6cf31361212ee5633697a8384419f584/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fcons%2Fchar%2Fpath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fcons%2Fchar%2Fpath.cc?ref=d49f254a6cf31361212ee5633697a8384419f584", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-do run { target c++17 } }\n+// { dg-require-fileio \"\" }\n+// { dg-require-filesystem-ts \"\" }\n+\n+#include <fstream>\n+#include <filesystem>\n+#include <testsuite_hooks.h>\n+\n+const std::filesystem::path filename = \"ofstream_members-1.tst\";\n+\n+void\n+test01()\n+{\n+  std::fstream f(filename);\n+  VERIFY( f.is_open() );\n+}\n+\n+void\n+test02()\n+{\n+  std::fstream f(filename, std::ios::out);\n+  VERIFY( f.is_open() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "8d0127be2b8ec580b1487969a15838cc1c1e9abf", "filename": "libstdc++-v3/testsuite/27_io/basic_fstream/open/char/path.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49f254a6cf31361212ee5633697a8384419f584/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fopen%2Fchar%2Fpath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49f254a6cf31361212ee5633697a8384419f584/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fopen%2Fchar%2Fpath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fopen%2Fchar%2Fpath.cc?ref=d49f254a6cf31361212ee5633697a8384419f584", "patch": "@@ -0,0 +1,50 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-do run { target c++17 } }\n+// { dg-require-fileio \"\" }\n+// { dg-require-filesystem-ts \"\" }\n+\n+#include <fstream>\n+#include <filesystem>\n+#include <testsuite_hooks.h>\n+\n+const std::filesystem::path filename = \"ofstream_members-1.tst\";\n+\n+void\n+test01()\n+{\n+  std::fstream f;\n+  f.open(filename);\n+  VERIFY( f.is_open() );\n+}\n+\n+void\n+test02()\n+{\n+  std::fstream f;\n+  f.open(filename, std::ios::in|std::ios::out);\n+  VERIFY( f.is_open() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "24286f5eeaf9ab31590e9d015c433f1dda87af38", "filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/cons/char/path.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49f254a6cf31361212ee5633697a8384419f584/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fcons%2Fchar%2Fpath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49f254a6cf31361212ee5633697a8384419f584/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fcons%2Fchar%2Fpath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fcons%2Fchar%2Fpath.cc?ref=d49f254a6cf31361212ee5633697a8384419f584", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-do run { target c++17 } }\n+// { dg-require-fileio \"\" }\n+// { dg-require-filesystem-ts \"\" }\n+\n+#include <fstream>\n+#include <filesystem>\n+#include <testsuite_hooks.h>\n+\n+const std::filesystem::path filename = \"ifstream_members-1.tst\";\n+\n+void\n+test01()\n+{\n+  std::ifstream f(filename);\n+  VERIFY( f.is_open() );\n+}\n+\n+void\n+test02()\n+{\n+  std::ifstream f(filename, std::ios::in);\n+  VERIFY( f.is_open() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "192e0fe9e851f34a721c6ef69bcbb4f923e82b0e", "filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/open/char/path.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49f254a6cf31361212ee5633697a8384419f584/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fopen%2Fchar%2Fpath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49f254a6cf31361212ee5633697a8384419f584/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fopen%2Fchar%2Fpath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fopen%2Fchar%2Fpath.cc?ref=d49f254a6cf31361212ee5633697a8384419f584", "patch": "@@ -0,0 +1,50 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-do run { target c++17 } }\n+// { dg-require-fileio \"\" }\n+// { dg-require-filesystem-ts \"\" }\n+\n+#include <fstream>\n+#include <filesystem>\n+#include <testsuite_hooks.h>\n+\n+const std::filesystem::path filename = \"ifstream_members-1.tst\";\n+\n+void\n+test01()\n+{\n+  std::ifstream f;\n+  f.open(filename);\n+  VERIFY( f.is_open() );\n+}\n+\n+void\n+test02()\n+{\n+  std::ifstream f;\n+  f.open(filename, std::ios::in);\n+  VERIFY( f.is_open() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "c6b6b237dfd2e34ce14b6e3e7950c09d345a9f30", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/cons/char/path.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49f254a6cf31361212ee5633697a8384419f584/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fcons%2Fchar%2Fpath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49f254a6cf31361212ee5633697a8384419f584/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fcons%2Fchar%2Fpath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fcons%2Fchar%2Fpath.cc?ref=d49f254a6cf31361212ee5633697a8384419f584", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-do run { target c++17 } }\n+// { dg-require-fileio \"\" }\n+// { dg-require-filesystem-ts \"\" }\n+\n+#include <fstream>\n+#include <filesystem>\n+#include <testsuite_hooks.h>\n+\n+const std::filesystem::path filename = \"ofstream_members-1.tst\";\n+\n+void\n+test01()\n+{\n+  std::ofstream f(filename);\n+  VERIFY( f.is_open() );\n+}\n+\n+void\n+test02()\n+{\n+  std::ofstream f(filename, std::ios::out);\n+  VERIFY( f.is_open() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "a3fc0c7ff68e1315bd2b9cc498c6e78aa85a83af", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/open/char/path.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49f254a6cf31361212ee5633697a8384419f584/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fopen%2Fchar%2Fpath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49f254a6cf31361212ee5633697a8384419f584/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fopen%2Fchar%2Fpath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fopen%2Fchar%2Fpath.cc?ref=d49f254a6cf31361212ee5633697a8384419f584", "patch": "@@ -0,0 +1,50 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-do run { target c++17 } }\n+// { dg-require-fileio \"\" }\n+// { dg-require-filesystem-ts \"\" }\n+\n+#include <fstream>\n+#include <filesystem>\n+#include <testsuite_hooks.h>\n+\n+const std::filesystem::path filename = \"ofstream_members-1.tst\";\n+\n+void\n+test01()\n+{\n+  std::ofstream f;\n+  f.open(filename);\n+  VERIFY( f.is_open() );\n+}\n+\n+void\n+test02()\n+{\n+  std::ofstream f;\n+  f.open(filename, std::ios::out);\n+  VERIFY( f.is_open() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}]}