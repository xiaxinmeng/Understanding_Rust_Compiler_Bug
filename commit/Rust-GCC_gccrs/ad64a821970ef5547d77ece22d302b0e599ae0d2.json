{"sha": "ad64a821970ef5547d77ece22d302b0e599ae0d2", "node_id": "C_kwDOANBUbNoAKGFkNjRhODIxOTcwZWY1NTQ3ZDc3ZWNlMjJkMzAyYjBlNTk5YWUwZDI", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-01-04T19:39:52Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-01-07T00:22:47Z"}, "message": "c++: don't preevaluate new-initializer\n\nThe preevaluation code was causing trouble with my fix for PR94041, and now\nI see that it's actually wrong since P0145 was adopted for C++17, mandating\norder of evaluation for many expressions that were previously unspecified.\nI don't see a need to preserve the preevaluation code for older standard\nmodes.\n\ngcc/cp/ChangeLog:\n\n\t* init.c (build_new_1): Remove preevaluation code.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.old-deja/g++.martin/new1.C: Don't expect preeval.\n\t* g++.dg/tree-ssa/stabilize1.C: Removed.", "tree": {"sha": "63583a9e484c17f68f91715ea8f318a956cf1e3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63583a9e484c17f68f91715ea8f318a956cf1e3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad64a821970ef5547d77ece22d302b0e599ae0d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad64a821970ef5547d77ece22d302b0e599ae0d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad64a821970ef5547d77ece22d302b0e599ae0d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad64a821970ef5547d77ece22d302b0e599ae0d2/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d"}], "stats": {"total": 69, "additions": 17, "deletions": 52}, "files": [{"sha": "2cab4b4cdcef72e4e20b9fb7df8b059cc7ffa99c", "filename": "gcc/cp/init.c", "status": "modified", "additions": 8, "deletions": 30, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad64a821970ef5547d77ece22d302b0e599ae0d2/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad64a821970ef5547d77ece22d302b0e599ae0d2/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=ad64a821970ef5547d77ece22d302b0e599ae0d2", "patch": "@@ -3047,7 +3047,6 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n      address of the first array element.  This node is a VAR_DECL, and\n      is therefore reusable.  */\n   tree data_addr;\n-  tree init_preeval_expr = NULL_TREE;\n   tree orig_type = type;\n \n   if (nelts)\n@@ -3561,7 +3560,6 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n      placement delete.  */\n   if (is_initialized)\n     {\n-      bool stable;\n       bool explicit_value_init_p = false;\n \n       if (*init != NULL && (*init)->is_empty ())\n@@ -3587,7 +3585,6 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t\t\t\t\t\t   init, elt_type,\n \t\t\t\t\t\t   LOOKUP_NORMAL,\n \t\t\t\t\t\t   complain);\n-\t  stable = stabilize_init (init_expr, &init_preeval_expr);\n \t}\n       else if (array_p)\n \t{\n@@ -3633,11 +3630,6 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t\t\t      explicit_value_init_p,\n \t\t\t      /*from_array=*/0,\n                               complain);\n-\n-\t  /* An array initialization is stable because the initialization\n-\t     of each element is a full-expression, so the temporaries don't\n-\t     leak out.  */\n-\t  stable = true;\n \t}\n       else\n \t{\n@@ -3694,8 +3686,6 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t      = replace_placeholders (TREE_OPERAND (init_expr, 1),\n \t\t\t\t      TREE_OPERAND (init_expr, 0),\n \t\t\t\t      &had_placeholder);\n-\t  stable = (!had_placeholder\n-\t\t    && stabilize_init (init_expr, &init_preeval_expr));\n \t}\n \n       if (init_expr == error_mark_node)\n@@ -3726,30 +3716,21 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t\t      alloc_fn,\n \t\t      complain));\n \n-\t  if (!cleanup)\n-\t    /* We're done.  */;\n-\t  else if (stable)\n-\t    /* This is much simpler if we were able to preevaluate all of\n-\t       the arguments to the constructor call.  */\n-\t    {\n-\t      /* CLEANUP is compiler-generated, so no diagnostics.  */\n-\t      suppress_warning (cleanup);\n-\t      init_expr = build2 (TRY_CATCH_EXPR, void_type_node,\n-\t\t\t\t  init_expr, cleanup);\n-\t      /* Likewise, this try-catch is compiler-generated.  */\n-\t      suppress_warning (init_expr);\n-\t    }\n-\t  else\n+\t  if (cleanup && !processing_template_decl)\n \t    /* Ack!  First we allocate the memory.  Then we set our sentry\n \t       variable to true, and expand a cleanup that deletes the\n \t       memory if sentry is true.  Then we run the constructor, and\n \t       finally clear the sentry.\n \n \t       We need to do this because we allocate the space first, so\n \t       if there are any temporaries with cleanups in the\n-\t       constructor args and we weren't able to preevaluate them, we\n-\t       need this EH region to extend until end of full-expression\n-\t       to preserve nesting.  */\n+\t       constructor args, we need this EH region to extend until\n+\t       end of full-expression to preserve nesting.\n+\n+\t       We used to try to evaluate the args first to avoid this, but\n+\t       since C++17 [expr.new] says that \"The invocation of the\n+\t       allocation function is sequenced before the evaluations of\n+\t       expressions in the new-initializer.\"  */\n \t    {\n \t      tree end, sentry, begin;\n \n@@ -3810,9 +3791,6 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n       rval = build2 (COMPOUND_EXPR, TREE_TYPE (rval), alloc_expr, rval);\n     }\n \n-  if (init_preeval_expr)\n-    rval = build2 (COMPOUND_EXPR, TREE_TYPE (rval), init_preeval_expr, rval);\n-\n   /* A new-expression is never an lvalue.  */\n   gcc_assert (!obvalue_p (rval));\n "}, {"sha": "5eb0bf8d52544e01b1d7ba7a9b64cc603bfb064a", "filename": "gcc/testsuite/g++.dg/tree-ssa/stabilize1.C", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fstabilize1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fstabilize1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fstabilize1.C?ref=11ce8d04f29417f2541d9b9bbfb54b3b26d7a90d", "patch": "@@ -1,13 +0,0 @@\n-// PR c++/53356\n-// { dg-options \"-fdump-tree-gimple\" }\n-// { dg-final { scan-tree-dump-not \"= 0\" \"gimple\" } }\n-\n-class A {};\n-\n-struct B {\n-    operator const A &() const;\n-};\n-\n-A* cause_ICE() {\n-    return new A(B());\n-}"}, {"sha": "18eb88d7c79e87a3b3c71991e93e2efba9165197", "filename": "gcc/testsuite/g++.old-deja/g++.martin/new1.C", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad64a821970ef5547d77ece22d302b0e599ae0d2/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.martin%2Fnew1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad64a821970ef5547d77ece22d302b0e599ae0d2/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.martin%2Fnew1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.martin%2Fnew1.C?ref=ad64a821970ef5547d77ece22d302b0e599ae0d2", "patch": "@@ -1,5 +1,5 @@\n // { dg-do run  }\n-//Lifetime of temporaries: \n+//Lifetime of temporaries:\n //egcs 2.92 performs cleanup for temporaries inside new expressions\n //after the new is complete, not at the end of the full expression.\n \n@@ -71,8 +71,8 @@ void test1()\n     func(new B(A(10).addr()));\n   }catch(int){\n   }\n-  CHECK(ctor_done==1);\n-  CHECK(new_done==2);\n+  CHECK(new_done==1);\n+  CHECK(ctor_done==2);\n   CHECK(func_done==3);\n   CHECK(dtor_done==4);\n   CHECK(delete_done==0);\n@@ -86,10 +86,10 @@ void test2()\n     func(new B(A(10).addr()));\n   }catch(int){\n   }\n-  CHECK(ctor_done==1);\n-  CHECK(new_done==2);\n+  CHECK(new_done==1);\n+  CHECK(ctor_done==0);\n   CHECK(func_done==0);\n-  CHECK(dtor_done==3);\n+  CHECK(dtor_done==0);\n   CHECK(delete_done==0);\n }\n \n@@ -101,11 +101,11 @@ void test3()\n     func(new B(A(10).addr()));\n   }catch(int){\n   }\n-  CHECK(new_done==0);\n-  CHECK(ctor_done==1);\n+  CHECK(new_done==1);\n+  CHECK(ctor_done==2);\n   CHECK(func_done==0);\n   CHECK(dtor_done==0);\n-  CHECK(delete_done==0);\n+  CHECK(delete_done==3);\n }\n \n int main()"}]}