{"sha": "a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMxODE3OWU0ZWUzYmE3Yzg1ZmE5ZDlhN2UyOWM0NGRlODZmYThhZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-09-07T07:37:38Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-09-07T07:37:38Z"}, "message": "mt-sde (CFLAGS_FOR_TARGET): Add -mno-gpopt.\n\nconfig/\n\t* mt-sde (CFLAGS_FOR_TARGET): Add -mno-gpopt.\n\t(CXXFLAGS_FOR_TARGET): Likewise.\n\ngcc/\n\t* doc/invoke.texi: Document the MIPS -mlocal-sdata, -mextern-sdata\n\tand -mgpopt options.  Adjust the -G documentation to match.\n\t* config/mips/mips.opt (mextern-data, mgpopt, mlocal-data): New.\n\t* config/mips/mips.c (mips_rtx_constant_in_small_data_p): New\n\tfunction, split out from mips_classify_symbol.  Return false for\n\t!TARGET_LOCAL_SDATA.\n\t(mips_classify_symbol): Call mips_rtx_constant_in_small_data_p.\n\tOnly use GP-relative accesses for non-pool symbols if TARGET_GPOPT.\n\t(override_options): Check whether the -mgpopt setting is consistent\n\twith the other flags.\n\t(symbolic_expression_p): Delete.\n\t(mips_select_rtx_section): Use mips_rtx_constant_in_small_data_p\n\tand default_elf_select_rtx_section.\n\t(mips_in_small_data_p): Honor section attributes for MIPS16 too.\n\tReturn false for local data unless TARGET_LOCAL_SDATA.  Likewise\n\texternal data and TARGET_EXTERN_SDATA.\n\ngcc/testsuite/\n\t* gcc.dg/attr-alias-3.c: Use real asm for MIPS.\n\t* gcc.target/mips/mips.exp (setup_mips_tests): Set mips_forced_gp\n\tand mips_forced_no_er.\n\t(dg-mips-options): Add -mno-abicalls when a small-data option is\n\tspecified.  Skip tests with small-data options if mips_forced_gp.\n\tSkip tests with -mexplicit-relocs if mips_forced_no_er.\n\t* gcc.target/mips/sdata-1.c: New test.\n\t* gcc.target/mips/sdata-2.c: Likewise.\n\t* gcc.target/mips/sdata-3.c: Likewise.\n\t* gcc.target/mips/sdata-4.c: Likewise.\n\nFrom-SVN: r128230", "tree": {"sha": "78825ebde82f0901c736de2aa59b465e6c062d60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78825ebde82f0901c736de2aa59b465e6c062d60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae/comments", "author": null, "committer": null, "parents": [{"sha": "f7de3bd3fa17db45c94a8ac57631c0ad3d673ced", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7de3bd3fa17db45c94a8ac57631c0ad3d673ced", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7de3bd3fa17db45c94a8ac57631c0ad3d673ced"}], "stats": {"total": 524, "additions": 448, "deletions": 76}, "files": [{"sha": "cb0b61a9ad085ea38691076eded200924188213b", "filename": "config/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae", "patch": "@@ -1,3 +1,8 @@\n+2007-09-07  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* mt-sde (CFLAGS_FOR_TARGET): Add -mno-gpopt.\n+\t(CXXFLAGS_FOR_TARGET): Likewise.\n+\n 2007-08-18  Paul Brook  <paul@codesourcery.com>\n             Joseph Myers  <joseph@codesourcery.com>\n "}, {"sha": "fbdc081fe33fd2b8455b4540c443b36ad651c9c4", "filename": "config/mt-sde", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae/config%2Fmt-sde", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae/config%2Fmt-sde", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmt-sde?ref=a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae", "patch": "@@ -1,8 +1,10 @@\n # We default to building libraries optimised for size.  We switch off\n # sibling-call optimization to permit interlinking of MIPS16 and\n-# non-MIPS16 functions. The -mcode-xonly option allows MIPS16\n-# libraries to run on Harvard-style split I/D memories, so long as\n-# they have the D-to-I redirect for pc-relative loads.\n-\n-CFLAGS_FOR_TARGET = -Os -fno-optimize-sibling-calls -mcode-xonly\n-CXXFLAGS_FOR_TARGET = -Os -fno-optimize-sibling-calls -mcode-xonly\n+# non-MIPS16 functions.  The -mcode-xonly option allows MIPS16 libraries\n+# to run on Harvard-style split I/D memories, so long as they have the\n+# D-to-I redirect for PC-relative loads.  -mno-gpopt has two purposes:\n+# it allows libraries to be used in situations where $gp != our _gp,\n+# and it allows them to be built with -G8 while retaining link compability\n+# with -G0 and -G4.\n+CFLAGS_FOR_TARGET = -Os -fno-optimize-sibling-calls -mcode-xonly -mno-gpopt\n+CXXFLAGS_FOR_TARGET = -Os -fno-optimize-sibling-calls -mcode-xonly -mno-gpopt"}, {"sha": "78b0a9a4e6bbd36129d510db6afd890cb3618b42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae", "patch": "@@ -1,3 +1,22 @@\n+2007-09-07  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* doc/invoke.texi: Document the MIPS -mlocal-sdata, -mextern-sdata\n+\tand -mgpopt options.  Adjust the -G documentation to match.\n+\t* config/mips/mips.opt (mextern-data, mgpopt, mlocal-data): New.\n+\t* config/mips/mips.c (mips_rtx_constant_in_small_data_p): New\n+\tfunction, split out from mips_classify_symbol.  Return false for\n+\t!TARGET_LOCAL_SDATA.\n+\t(mips_classify_symbol): Call mips_rtx_constant_in_small_data_p.\n+\tOnly use GP-relative accesses for non-pool symbols if TARGET_GPOPT.\n+\t(override_options): Check whether the -mgpopt setting is consistent\n+\twith the other flags.\n+\t(symbolic_expression_p): Delete.\n+\t(mips_select_rtx_section): Use mips_rtx_constant_in_small_data_p\n+\tand default_elf_select_rtx_section.\n+\t(mips_in_small_data_p): Honor section attributes for MIPS16 too.\n+\tReturn false for local data unless TARGET_LOCAL_SDATA.  Likewise\n+\texternal data and TARGET_EXTERN_SDATA.\n+\n 2007-09-07  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/33303"}, {"sha": "365561829e3771cbb8a12fe0e745169afdfe12f8", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 63, "deletions": 61, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae", "patch": "@@ -341,7 +341,6 @@ static void mips_output_function_epilogue (FILE *, HOST_WIDE_INT);\n static void mips_restore_reg (rtx, rtx);\n static void mips_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t  HOST_WIDE_INT, tree);\n-static int symbolic_expression_p (rtx);\n static section *mips_select_rtx_section (enum machine_mode, rtx,\n \t\t\t\t\t unsigned HOST_WIDE_INT);\n static section *mips_function_rodata_section (tree);\n@@ -1474,6 +1473,17 @@ mips_symbol_binds_local_p (const_rtx x)\n \t  : SYMBOL_REF_LOCAL_P (x));\n }\n \n+/* Return true if rtx constants of mode MODE should be put into a small\n+   data section.  */\n+\n+static bool\n+mips_rtx_constant_in_small_data_p (enum machine_mode mode)\n+{\n+  return (!TARGET_EMBEDDED_DATA\n+\t  && TARGET_LOCAL_SDATA\n+\t  && GET_MODE_SIZE (mode) <= mips_section_threshold);\n+}\n+\n /* Return the method that should be used to access SYMBOL_REF or\n    LABEL_REF X in context CONTEXT.  */\n \n@@ -1508,14 +1518,14 @@ mips_classify_symbol (const_rtx x, enum mips_symbol_context context)\n       if (TARGET_MIPS16_PCREL_LOADS && context == SYMBOL_CONTEXT_MEM)\n \treturn SYMBOL_PC_RELATIVE;\n \n-      if (!TARGET_EMBEDDED_DATA\n-\t  && GET_MODE_SIZE (get_pool_mode (x)) <= mips_section_threshold)\n+      if (mips_rtx_constant_in_small_data_p (get_pool_mode (x)))\n \treturn SYMBOL_GP_RELATIVE;\n     }\n \n   /* Do not use small-data accesses for weak symbols; they may end up\n      being zero.  */\n-  if (SYMBOL_REF_SMALL_P (x)\n+  if (TARGET_GPOPT\n+      && SYMBOL_REF_SMALL_P (x)\n       && !SYMBOL_REF_WEAK (x))\n     return SYMBOL_GP_RELATIVE;\n \n@@ -5576,21 +5586,14 @@ override_options (void)\n     }\n \n   if (TARGET_ABICALLS)\n-    {\n-      /* We need to set flag_pic for executables as well as DSOs\n-\t because we may reference symbols that are not defined in\n-\t the final executable.  (MIPS does not use things like\n-\t copy relocs, for example.)\n+    /* We need to set flag_pic for executables as well as DSOs\n+       because we may reference symbols that are not defined in\n+       the final executable.  (MIPS does not use things like\n+       copy relocs, for example.)\n \n-\t Also, there is a body of code that uses __PIC__ to distinguish\n-\t between -mabicalls and -mno-abicalls code.  */\n-      flag_pic = 1;\n-      if (mips_section_threshold > 0)\n-\twarning (0, \"%<-G%> is incompatible with %<-mabicalls%>\");\n-    }\n-\n-  if (TARGET_VXWORKS_RTP && mips_section_threshold > 0)\n-    warning (0, \"-G and -mrtp are incompatible\");\n+       Also, there is a body of code that uses __PIC__ to distinguish\n+       between -mabicalls and -mno-abicalls code.  */\n+    flag_pic = 1;\n \n   /* -mvr4130-align is a \"speed over size\" optimization: it usually produces\n      faster code, but at the expense of more nops.  Enable it at -O3 and\n@@ -5603,6 +5606,29 @@ override_options (void)\n   if (optimize_size && (target_flags_explicit & MASK_MEMCPY) == 0)\n     target_flags |= MASK_MEMCPY;\n \n+  /* If we have a nonzero small-data limit, check that the -mgpopt\n+     setting is consistent with the other target flags.  */\n+  if (mips_section_threshold > 0)\n+    {\n+      if (!TARGET_GPOPT)\n+\t{\n+\t  if (!TARGET_MIPS16 && !TARGET_EXPLICIT_RELOCS)\n+\t    error (\"%<-mno-gpopt%> needs %<-mexplicit-relocs%>\");\n+\n+\t  TARGET_LOCAL_SDATA = false;\n+\t  TARGET_EXTERN_SDATA = false;\n+\t}\n+      else\n+\t{\n+\t  if (TARGET_VXWORKS_RTP)\n+\t    warning (0, \"cannot use small-data accesses for %qs\", \"-mrtp\");\n+\n+\t  if (TARGET_ABICALLS)\n+\t    warning (0, \"cannot use small-data accesses for %qs\",\n+\t\t     \"-mabicalls\");\n+\t}\n+    }\n+\n #ifdef MIPS_TFMODE_FORMAT\n   REAL_MODE_FORMAT (TFmode) = &MIPS_TFMODE_FORMAT;\n #endif\n@@ -8453,54 +8479,17 @@ mips_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n   reload_completed = 0;\n }\n \f\n-/* Returns nonzero if X contains a SYMBOL_REF.  */\n-\n-static int\n-symbolic_expression_p (rtx x)\n-{\n-  if (GET_CODE (x) == SYMBOL_REF)\n-    return 1;\n-\n-  if (GET_CODE (x) == CONST)\n-    return symbolic_expression_p (XEXP (x, 0));\n-\n-  if (UNARY_P (x))\n-    return symbolic_expression_p (XEXP (x, 0));\n-\n-  if (ARITHMETIC_P (x))\n-    return (symbolic_expression_p (XEXP (x, 0))\n-\t    || symbolic_expression_p (XEXP (x, 1)));\n-\n-  return 0;\n-}\n-\n-/* Choose the section to use for the constant rtx expression X that has\n-   mode MODE.  */\n+/* Implement TARGET_SELECT_RTX_SECTION.  */\n \n static section *\n mips_select_rtx_section (enum machine_mode mode, rtx x,\n \t\t\t unsigned HOST_WIDE_INT align)\n {\n-  if (TARGET_EMBEDDED_DATA)\n-    {\n-      /* For embedded applications, always put constants in read-only data,\n-\t in order to reduce RAM usage.  */\n-      return mergeable_constant_section (mode, align, 0);\n-    }\n-  else\n-    {\n-      /* For hosted applications, always put constants in small data if\n-\t possible, as this gives the best performance.  */\n-      /* ??? Consider using mergeable small data sections.  */\n+  /* ??? Consider using mergeable small data sections.  */\n+  if (mips_rtx_constant_in_small_data_p (mode))\n+    return get_named_section (NULL, \".sdata\", 0);\n \n-      if (GET_MODE_SIZE (mode) <= (unsigned) mips_section_threshold\n-\t  && mips_section_threshold > 0)\n-\treturn get_named_section (NULL, \".sdata\", 0);\n-      else if (flag_pic && symbolic_expression_p (x))\n-\treturn get_named_section (NULL, \".data.rel.ro\", 3);\n-      else\n-\treturn mergeable_constant_section (mode, align, 0);\n-    }\n+  return default_elf_select_rtx_section (mode, x, align);\n }\n \n /* Implement TARGET_ASM_FUNCTION_RODATA_SECTION.\n@@ -8566,7 +8555,7 @@ mips_in_small_data_p (const_tree decl)\n \n       /* If a symbol is defined externally, the assembler will use the\n \t usual -G rules when deciding how to implement macros.  */\n-      if (TARGET_EXPLICIT_RELOCS || !DECL_EXTERNAL (decl))\n+      if (mips_lo_relocs[SYMBOL_GP_RELATIVE] || !DECL_EXTERNAL (decl))\n \treturn true;\n     }\n   else if (TARGET_EMBEDDED_DATA)\n@@ -8582,6 +8571,19 @@ mips_in_small_data_p (const_tree decl)\n \treturn false;\n     }\n \n+  /* Enforce -mlocal-sdata.  */\n+  if (!TARGET_LOCAL_SDATA && !TREE_PUBLIC (decl))\n+    return false;\n+\n+  /* Enforce -mextern-sdata.  */\n+  if (!TARGET_EXTERN_SDATA && DECL_P (decl))\n+    {\n+      if (DECL_EXTERNAL (decl))\n+\treturn false;\n+      if (DECL_COMMON (decl) && DECL_INITIAL (decl) == NULL)\n+\treturn false;\n+    }\n+\n   size = int_size_in_bytes (TREE_TYPE (decl));\n   return (size > 0 && size <= mips_section_threshold);\n }"}, {"sha": "80fd108204fb07008429714906c88a79c56927e0", "filename": "gcc/config/mips/mips.opt", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae/gcc%2Fconfig%2Fmips%2Fmips.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae/gcc%2Fconfig%2Fmips%2Fmips.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.opt?ref=a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae", "patch": "@@ -96,6 +96,10 @@ mexplicit-relocs\n Target Report Mask(EXPLICIT_RELOCS)\n Use NewABI-style %reloc() assembly operators\n \n+mextern-sdata\n+Target Report Var(TARGET_EXTERN_SDATA) Init(1)\n+Use -G for data that is not defined by the current object\n+\n mfix-r4000\n Target Report Mask(FIX_R4000)\n Work around certain R4000 errata\n@@ -148,6 +152,10 @@ mgp64\n Target Report RejectNegative Mask(64BIT)\n Use 64-bit general registers\n \n+mgpopt\n+Target Report Var(TARGET_GPOPT) Init(1)\n+Use GP-relative addressing to access small data\n+\n mhard-float\n Target Report RejectNegative InverseMask(SOFT_FLOAT_ABI, HARD_FLOAT_ABI)\n Allow the use of hardware floating-point ABI and instructions\n@@ -164,6 +172,10 @@ mips3d\n Target Report RejectNegative Mask(MIPS3D)\n Use MIPS-3D instructions\n \n+mlocal-sdata\n+Target Report Var(TARGET_LOCAL_SDATA) Init(1)\n+Use -G for object-local data\n+\n mlong-calls\n Target Report Var(TARGET_LONG_CALLS)\n Use indirect calls"}, {"sha": "aafc74c6be2204188c8299268bd09e7b7b3b9536", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 66, "deletions": 9, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae", "patch": "@@ -629,7 +629,9 @@ Objective-C and Objective-C++ Dialects}.\n -mpaired-single  -mno-paired-single  -mdmx  -mno-mdmx @gol\n -mips3d  -mno-mips3d  -mmt  -mno-mt @gol\n -mlong64  -mlong32  -msym32  -mno-sym32 @gol\n--G@var{num}  -membedded-data  -mno-embedded-data @gol\n+-G@var{num}  -mlocal-sdata  -mno-local-sdata @gol\n+-mextern-sdata  -mno-extern-sdata  -mgpopt  -mno-gopt @gol\n+-membedded-data  -mno-embedded-data @gol\n -muninit-const-in-rodata  -mno-uninit-const-in-rodata @gol\n -mcode-readable=@var{setting} @gol\n -msplit-addresses  -mno-split-addresses @gol\n@@ -11850,14 +11852,69 @@ to generate shorter and faster references to symbolic addresses.\n \n @item -G @var{num}\n @opindex G\n-@cindex smaller data references (MIPS)\n-@cindex gp-relative references (MIPS)\n-Put global and static items less than or equal to @var{num} bytes into\n-the small data or bss section instead of the normal data or bss section.\n-This allows the data to be accessed using a single instruction.\n-\n-All modules should be compiled with the same @option{-G @var{num}}\n-value.\n+Put definitions of externally-visible data in a small data section\n+if that data is no bigger than @var{num} bytes.  GCC can then access\n+the data more efficiently; see @option{-mgpopt} for details.\n+\n+The default @option{-G} option depends on the configuration.\n+\n+@item -mlocal-sdata\n+@itemx -mno-local-sdata\n+@opindex mlocal-sdata\n+@opindex mno-local-sdata\n+Extend (do not extend) the @option{-G} behavior to local data too,\n+such as to static variables in C.  @option{-mlocal-sdata} is the\n+default for all configurations.\n+\n+If the linker complains that an application is using too much small data,\n+you might want to try rebuilding the less performance-critical parts with\n+@option{-mno-local-sdata}.  You might also want to build large\n+libraries with @option{-mno-local-sdata}, so that the libraries leave\n+more room for the main program.\n+\n+@item -mextern-sdata\n+@itemx -mno-extern-sdata\n+@opindex mextern-sdata\n+@opindex mno-extern-sdata\n+Assume (do not assume) that externally-defined data will be in\n+a small data section if that data is within the @option{-G} limit.\n+@option{-mextern-sdata} is the default for all configurations.\n+\n+If you compile a module @var{Mod} with @option{-mextern-sdata} @option{-G\n+@var{num}} @option{-mgpopt}, and @var{Mod} references a variable @var{Var}\n+that is no bigger than @var{num} bytes, you must make sure that @var{Var}\n+is placed in a small data section.  If @var{Var} is defined by another\n+module, you must either compile that module with a high-enough\n+@option{-G} setting or attach a @code{section} attribute to @var{Var}'s\n+definition.  If @var{Var} is common, you must link the application\n+with a high-enough @option{-G} setting.\n+\n+The easiest way of satisfying these restrictions is to compile\n+and link every module with the same @option{-G} option.  However,\n+you may wish to build a library that supports several different\n+small data limits.  You can do this by compiling the library with\n+the highest supported @option{-G} setting and additionally using\n+@option{-mno-extern-sdata} to stop the library from making assumptions\n+about externally-defined data.\n+\n+@item -mgpopt\n+@itemx -mno-gpopt\n+@opindex mgpopt\n+@opindex mno-gpopt\n+Use (do not use) GP-relative accesses for symbols that are known to be\n+in a small data section; see @option{-G}, @option{-mlocal-sdata} and\n+@option{-mextern-sdata}.  @option{-mgpopt} is the default for all\n+configurations.\n+\n+@option{-mno-gpopt} is useful for cases where the @code{$gp} register\n+might not hold the value of @code{_gp}.  For example, if the code is\n+part of a library that might be used in a boot monitor, programs that\n+call boot monitor routines will pass an unknown value in @code{$gp}.\n+(In such situations, the boot monitor itself would usually be compiled\n+with @option{-G0}.)\n+\n+@option{-mno-gpopt} implies @option{-mno-local-sdata} and\n+@option{-mno-extern-sdata}.\n \n @item -membedded-data\n @itemx -mno-embedded-data"}, {"sha": "0781fb11700d32f4f080cfca9c66651c4b4ae7b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae", "patch": "@@ -1,3 +1,16 @@\n+2007-09-07  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* gcc.dg/attr-alias-3.c: Use real asm for MIPS.\n+\t* gcc.target/mips/mips.exp (setup_mips_tests): Set mips_forced_gp\n+\tand mips_forced_no_er.\n+\t(dg-mips-options): Add -mno-abicalls when a small-data option is\n+\tspecified.  Skip tests with small-data options if mips_forced_gp.\n+\tSkip tests with -mexplicit-relocs if mips_forced_no_er.\n+\t* gcc.target/mips/sdata-1.c: New test.\n+\t* gcc.target/mips/sdata-2.c: Likewise.\n+\t* gcc.target/mips/sdata-3.c: Likewise.\n+\t* gcc.target/mips/sdata-4.c: Likewise.\n+\n 2007-09-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/33298"}, {"sha": "02637b2313e6a7c951da153f7e17d28f6ae23d53", "filename": "gcc/testsuite/gcc.dg/attr-alias-3.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alias-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alias-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alias-3.c?ref=a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae", "patch": "@@ -52,5 +52,11 @@ extern ftype Af4a __attribute__((alias (\"lf4\")));\n static ftype *pf4a = &Af4a;\n \n main() {\n+#ifdef __mips\n+  /* Use real asm for MIPS, to stop the assembler warning about\n+     orphaned high-part relocations.  */\n+  asm volatile (\"lw $2,%0\\n\\tlw $2,%1\" : : \"m\" (pv4a), \"m\" (pf4a) : \"$2\");\n+#else\n   asm volatile (\"\" : : \"m\" (pv4a), \"m\" (pf4a));\n+#endif\n }"}, {"sha": "fef509749034b36c034298f7c56212ea278ea9ee", "filename": "gcc/testsuite/gcc.target/mips/mips.exp", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp?ref=a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae", "patch": "@@ -38,6 +38,8 @@ load_lib gcc-dg.exp\n #    $mips_forced_abi:\t true if the command line uses -mabi=* or -mgp*\n #    $mips_forced_float: true if the command line uses -mhard/soft-float\n #    $mips_forced_le\t true if the command line uses -EL or -mel\n+#    $mips_forced_gp\t true if the command line forces a particular GP mode\n+#    $mips_forced_no_er  true if the command line contains -mno-explicit-relocs\n proc setup_mips_tests {} {\n     global mips_isa\n     global mips_arch\n@@ -49,6 +51,8 @@ proc setup_mips_tests {} {\n     global mips_forced_abi\n     global mips_forced_float\n     global mips_forced_le\n+    global mips_forced_gp\n+    global mips_forced_no_er\n \n     global compiler_flags\n     global tool\n@@ -84,6 +88,8 @@ proc setup_mips_tests {} {\n     set mips_forced_abi [regexp -- {(-mgp|-mfp|-mabi)} $compiler_flags]\n     set mips_forced_float [regexp -- {-m(hard|soft)-float} $compiler_flags]\n     set mips_forced_le [regexp -- {-(EL|mel)[[:>:]]} $compiler_flags]\n+    set mips_forced_gp [regexp -- {-(G|m(|no-)((extern|local)-sdata|gpopt)|mabicalls|mrtp)} $compiler_flags]\n+    set mips_forced_no_er [regexp -- {-mno-explicit-relocs} $compiler_flags]\n }\n \n # Return true if command-line option FLAG forces 32-bit code.\n@@ -124,6 +130,18 @@ proc is_gp32_flag {flag} {\n #    -EB\n #\tSelect big-endian code.  Skip the test if the multilib flags\n #\tforce a little-endian target.\n+#\n+#    -G*\n+#    -m(no-)extern-sdata\n+#    -m(no-)local-sdata\n+#    -m(no-)gpopt\n+#\tSelect the small-data mode, and -mno-abcialls.  Skip the test if\n+#\tthe multilib flags already contain such an option, or specify\n+#\tsomething that might be incompatible with them.\n+#\n+#    -mexplicit-relocs\n+#\tSelect explicit relocations.  Skip the test if the multilib flags\n+#\tforce -mno-explicit-relocs.\n proc dg-mips-options {args} {\n     upvar dg-extra-tool-flags extra_tool_flags\n     upvar dg-do-what do_what\n@@ -138,6 +156,8 @@ proc dg-mips-options {args} {\n     global mips_forced_abi\n     global mips_forced_float\n     global mips_forced_le\n+    global mips_forced_gp\n+    global mips_forced_no_er\n \n     set flags [lindex $args 1]\n     set matches 1\n@@ -187,6 +207,15 @@ proc dg-mips-options {args} {\n \t    if {$mips_forced_le} {\n \t\tset matches 0\n \t    }\n+\t} elseif {[regexp -- {^-(G|m(|no-)((extern|local)-sdata|gpopt))} $flag]} {\n+\t    append flags \" -mno-abicalls\"\n+\t    if {$mips_forced_gp} {\n+\t\tset matches 0\n+\t    }\n+\t} elseif {[regexp -- {^-mexplicit-relocs$} $flag]} {\n+\t    if {$mips_forced_no_er} {\n+\t\tset matches 0\n+\t    }\n \t}\n     }\n     if {$matches} {"}, {"sha": "2acfdef384d71149b728f8174d72121556006223", "filename": "gcc/testsuite/gcc.target/mips/sdata-1.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsdata-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsdata-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsdata-1.c?ref=a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-mips-options \"-G4 -mexplicit-relocs\" } */\n+\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(l4a\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(l4b\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(l4c\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(e4a\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(e4b\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(c4\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(g4a\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(g4b\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(g4c\\\\)\" } } */\n+\n+/* { dg-final { scan-assembler-not \"%gp_?rel\\\\(l8a\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gp_?rel\\\\(l8b\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(l8c\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gp_?rel\\\\(e8a\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(e8b\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gp_?rel\\\\(c8\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gp_?rel\\\\(g8a\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gp_?rel\\\\(g8b\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(g8c\\\\)\" } } */\n+\n+static int l4a;\n+static int l4b = 1;\n+static int __attribute__((section(\".sdata\"))) l4c;\n+extern int e4a;\n+extern int __attribute__((section(\".sdata\"))) e4b;\n+int __attribute__((common)) c4;\n+int __attribute__((nocommon)) g4a;\n+int g4b = 1;\n+int __attribute__((section(\".sdata\"))) g4c = 2;\n+\n+static int l8a[2];\n+static int l8b[2] = { 1, 2 };\n+static int __attribute__((section(\".sdata\"))) l8c[2];\n+extern int e8a[2];\n+extern int __attribute__((section(\".sdata\"))) e8b[2];\n+int __attribute__((common)) c8[2];\n+int __attribute__((nocommon)) g8a[2];\n+int g8b[2] = { 1, 2 };\n+int __attribute__((section(\".sdata\"))) g8c[2] = { 1, 2 };\n+\n+int f32a (void) { return l4a; }\n+int f32b (void) { return l4b; }\n+int f32c (void) { return l4c; }\n+int f32d (void) { return e4a; }\n+int f32e (void) { return e4b; }\n+int f32f (void) { return c4; }\n+int f32g (void) { return g4a; }\n+int f32h (void) { return g4b; }\n+int f32i (void) { return g4c; }\n+\n+int f64a (void) { return l8a[0]; }\n+int f64b (void) { return l8b[0]; }\n+int f64c (void) { return l8c[0]; }\n+int f64d (void) { return e8a[0]; }\n+int f64e (void) { return e8b[0]; }\n+int f64f (void) { return c8[0]; }\n+int f64g (void) { return g8a[0]; }\n+int f64h (void) { return g8b[0]; }\n+int f64i (void) { return g8c[0]; }"}, {"sha": "5479c81337513a7a6a8d43b939b1d367c0965766", "filename": "gcc/testsuite/gcc.target/mips/sdata-2.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsdata-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsdata-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsdata-2.c?ref=a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-mips-options \"-G4 -mexplicit-relocs -mno-local-sdata\" } */\n+\n+/* { dg-final { scan-assembler-not \"%gp_?rel\\\\(l4a\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gp_?rel\\\\(l4b\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(l4c\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(e4a\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(e4b\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(c4\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(g4a\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(g4b\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(g4c\\\\)\" } } */\n+\n+/* { dg-final { scan-assembler-not \"%gp_?rel\\\\(l8a\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gp_?rel\\\\(l8b\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(l8c\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gp_?rel\\\\(e8a\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(e8b\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gp_?rel\\\\(c8\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gp_?rel\\\\(g8a\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gp_?rel\\\\(g8b\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(g8c\\\\)\" } } */\n+\n+static int l4a;\n+static int l4b = 1;\n+static int __attribute__((section(\".sdata\"))) l4c;\n+extern int e4a;\n+extern int __attribute__((section(\".sdata\"))) e4b;\n+int __attribute__((common)) c4;\n+int __attribute__((nocommon)) g4a;\n+int g4b = 1;\n+int __attribute__((section(\".sdata\"))) g4c = 2;\n+\n+static int l8a[2];\n+static int l8b[2] = { 1, 2 };\n+static int __attribute__((section(\".sdata\"))) l8c[2];\n+extern int e8a[2];\n+extern int __attribute__((section(\".sdata\"))) e8b[2];\n+int __attribute__((common)) c8[2];\n+int __attribute__((nocommon)) g8a[2];\n+int g8b[2] = { 1, 2 };\n+int __attribute__((section(\".sdata\"))) g8c[2] = { 1, 2 };\n+\n+int f32a (void) { return l4a; }\n+int f32b (void) { return l4b; }\n+int f32c (void) { return l4c; }\n+int f32d (void) { return e4a; }\n+int f32e (void) { return e4b; }\n+int f32f (void) { return c4; }\n+int f32g (void) { return g4a; }\n+int f32h (void) { return g4b; }\n+int f32i (void) { return g4c; }\n+\n+int f64a (void) { return l8a[0]; }\n+int f64b (void) { return l8b[0]; }\n+int f64c (void) { return l8c[0]; }\n+int f64d (void) { return e8a[0]; }\n+int f64e (void) { return e8b[0]; }\n+int f64f (void) { return c8[0]; }\n+int f64g (void) { return g8a[0]; }\n+int f64h (void) { return g8b[0]; }\n+int f64i (void) { return g8c[0]; }"}, {"sha": "3cea3d3e70cd6a5067c53e26eaa8e2ae9f874445", "filename": "gcc/testsuite/gcc.target/mips/sdata-3.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsdata-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsdata-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsdata-3.c?ref=a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-mips-options \"-G4 -mexplicit-relocs -mno-extern-sdata\" } */\n+\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(l4a\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(l4b\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(l4c\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gp_?rel\\\\(e4a\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(e4b\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gp_?rel\\\\(c4\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(g4a\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(g4b\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(g4c\\\\)\" } } */\n+\n+/* { dg-final { scan-assembler-not \"%gp_?rel\\\\(l8a\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gp_?rel\\\\(l8b\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(l8c\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gp_?rel\\\\(e8a\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(e8b\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gp_?rel\\\\(c8\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gp_?rel\\\\(g8a\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gp_?rel\\\\(g8b\\\\)\" } } */\n+/* { dg-final { scan-assembler     \"%gp_?rel\\\\(g8c\\\\)\" } } */\n+\n+static int l4a;\n+static int l4b = 1;\n+static int __attribute__((section(\".sdata\"))) l4c;\n+extern int e4a;\n+extern int __attribute__((section(\".sdata\"))) e4b;\n+int __attribute__((common)) c4;\n+int __attribute__((nocommon)) g4a;\n+int g4b = 1;\n+int __attribute__((section(\".sdata\"))) g4c = 2;\n+\n+static int l8a[2];\n+static int l8b[2] = { 1, 2 };\n+static int __attribute__((section(\".sdata\"))) l8c[2];\n+extern int e8a[2];\n+extern int __attribute__((section(\".sdata\"))) e8b[2];\n+int __attribute__((common)) c8[2];\n+int __attribute__((nocommon)) g8a[2];\n+int g8b[2] = { 1, 2 };\n+int __attribute__((section(\".sdata\"))) g8c[2] = { 1, 2 };\n+\n+int f32a (void) { return l4a; }\n+int f32b (void) { return l4b; }\n+int f32c (void) { return l4c; }\n+int f32d (void) { return e4a; }\n+int f32e (void) { return e4b; }\n+int f32f (void) { return c4; }\n+int f32g (void) { return g4a; }\n+int f32h (void) { return g4b; }\n+int f32i (void) { return g4c; }\n+\n+int f64a (void) { return l8a[0]; }\n+int f64b (void) { return l8b[0]; }\n+int f64c (void) { return l8c[0]; }\n+int f64d (void) { return e8a[0]; }\n+int f64e (void) { return e8b[0]; }\n+int f64f (void) { return c8[0]; }\n+int f64g (void) { return g8a[0]; }\n+int f64h (void) { return g8b[0]; }\n+int f64i (void) { return g8c[0]; }"}, {"sha": "f88348dcadbb9087052192cb7c01e684b3f040cc", "filename": "gcc/testsuite/gcc.target/mips/sdata-4.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsdata-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsdata-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsdata-4.c?ref=a318179e4ee3ba7c85fa9d9a7e29c44de86fa8ae", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-mips-options \"-G4 -mexplicit-relocs -mno-gpopt\" } */\n+\n+/* { dg-final { scan-assembler-not \"%gp_?rel\" } } */\n+/* { dg-final { scan-assembler-not \"\\\\\\$gp\" } } */\n+\n+static int l4a;\n+static int l4b = 1;\n+static int __attribute__((section(\".sdata\"))) l4c;\n+extern int e4a;\n+extern int __attribute__((section(\".sdata\"))) e4b;\n+int __attribute__((common)) c4;\n+int __attribute__((nocommon)) g4a;\n+int g4b = 1;\n+int __attribute__((section(\".sdata\"))) g4c = 2;\n+\n+static int l8a[2];\n+static int l8b[2] = { 1, 2 };\n+static int __attribute__((section(\".sdata\"))) l8c[2];\n+extern int e8a[2];\n+extern int __attribute__((section(\".sdata\"))) e8b[2];\n+int __attribute__((common)) c8[2];\n+int __attribute__((nocommon)) g8a[2];\n+int g8b[2] = { 1, 2 };\n+int __attribute__((section(\".sdata\"))) g8c[2] = { 1, 2 };\n+\n+int f32a (void) { return l4a; }\n+int f32b (void) { return l4b; }\n+int f32c (void) { return l4c; }\n+int f32d (void) { return e4a; }\n+int f32e (void) { return e4b; }\n+int f32f (void) { return c4; }\n+int f32g (void) { return g4a; }\n+int f32h (void) { return g4b; }\n+int f32i (void) { return g4c; }\n+\n+int f64a (void) { return l8a[0]; }\n+int f64b (void) { return l8b[0]; }\n+int f64c (void) { return l8c[0]; }\n+int f64d (void) { return e8a[0]; }\n+int f64e (void) { return e8b[0]; }\n+int f64f (void) { return c8[0]; }\n+int f64g (void) { return g8a[0]; }\n+int f64h (void) { return g8b[0]; }\n+int f64i (void) { return g8c[0]; }"}]}