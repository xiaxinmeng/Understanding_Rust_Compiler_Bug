{"sha": "21e2bc9fb49e30221cd0252966d5092070e1e0c5", "node_id": "C_kwDOANBUbNoAKDIxZTJiYzlmYjQ5ZTMwMjIxY2QwMjUyOTY2ZDUwOTIwNzBlMWUwYzU", "commit": {"author": {"name": "Frederik Harwath", "email": "frederik@codesourcery.com", "date": "2022-05-18T05:59:42Z"}, "committer": {"name": "Frederik Harwath", "email": "frederik@codesourcery.com", "date": "2022-05-18T12:51:46Z"}, "message": "graphite: Extend SCoP detection dump output\n\nExtend dump output to make understanding why Graphite rejects to\ninclude a loop in a SCoP easier (for GCC developers).\n\ngcc/ChangeLog:\n\n\t* graphite-scop-detection.cc (scop_detection::can_represent_loop):\n\tOutput reason for failure to dump file.\n\t(scop_detection::harmful_loop_in_region): Likewise.\n\t(scop_detection::graphite_can_represent_expr): Likewise.\n\t(scop_detection::stmt_has_simple_data_refs_p): Likewise.\n\t(scop_detection::stmt_simple_for_scop_p): Likewise.\n\t(print_sese_loop_numbers): New function.\n\t(scop_detection::add_scop): Use from here.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/graphite/scop-22a.c: New test.", "tree": {"sha": "b743ac1fbe67c17ed681a8fd5e0c3a177623965a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b743ac1fbe67c17ed681a8fd5e0c3a177623965a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21e2bc9fb49e30221cd0252966d5092070e1e0c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21e2bc9fb49e30221cd0252966d5092070e1e0c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21e2bc9fb49e30221cd0252966d5092070e1e0c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21e2bc9fb49e30221cd0252966d5092070e1e0c5/comments", "author": {"login": "frederik-h", "id": 22046314, "node_id": "MDQ6VXNlcjIyMDQ2MzE0", "avatar_url": "https://avatars.githubusercontent.com/u/22046314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frederik-h", "html_url": "https://github.com/frederik-h", "followers_url": "https://api.github.com/users/frederik-h/followers", "following_url": "https://api.github.com/users/frederik-h/following{/other_user}", "gists_url": "https://api.github.com/users/frederik-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/frederik-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frederik-h/subscriptions", "organizations_url": "https://api.github.com/users/frederik-h/orgs", "repos_url": "https://api.github.com/users/frederik-h/repos", "events_url": "https://api.github.com/users/frederik-h/events{/privacy}", "received_events_url": "https://api.github.com/users/frederik-h/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frederik-h", "id": 22046314, "node_id": "MDQ6VXNlcjIyMDQ2MzE0", "avatar_url": "https://avatars.githubusercontent.com/u/22046314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frederik-h", "html_url": "https://github.com/frederik-h", "followers_url": "https://api.github.com/users/frederik-h/followers", "following_url": "https://api.github.com/users/frederik-h/following{/other_user}", "gists_url": "https://api.github.com/users/frederik-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/frederik-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frederik-h/subscriptions", "organizations_url": "https://api.github.com/users/frederik-h/orgs", "repos_url": "https://api.github.com/users/frederik-h/repos", "events_url": "https://api.github.com/users/frederik-h/events{/privacy}", "received_events_url": "https://api.github.com/users/frederik-h/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65851d65fb36e847a9b8ef3b0519f06d29865a14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65851d65fb36e847a9b8ef3b0519f06d29865a14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65851d65fb36e847a9b8ef3b0519f06d29865a14"}], "stats": {"total": 240, "additions": 219, "deletions": 21}, "files": [{"sha": "9792d87ee0ae2d750b8e16fac4b07ace0b29ad8a", "filename": "gcc/graphite-scop-detection.cc", "status": "modified", "additions": 163, "deletions": 21, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e2bc9fb49e30221cd0252966d5092070e1e0c5/gcc%2Fgraphite-scop-detection.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e2bc9fb49e30221cd0252966d5092070e1e0c5/gcc%2Fgraphite-scop-detection.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.cc?ref=21e2bc9fb49e30221cd0252966d5092070e1e0c5", "patch": "@@ -69,12 +69,27 @@ class debug_printer\n     fprintf (output.dump_file, \"%d\", i);\n     return output;\n   }\n+\n   friend debug_printer &\n   operator<< (debug_printer &output, const char *s)\n   {\n     fprintf (output.dump_file, \"%s\", s);\n     return output;\n   }\n+\n+  friend debug_printer &\n+  operator<< (debug_printer &output, gimple* stmt)\n+  {\n+    print_gimple_stmt (output.dump_file, stmt, 0, TDF_VOPS | TDF_MEMSYMS);\n+    return output;\n+  }\n+\n+  friend debug_printer &\n+  operator<< (debug_printer &output, tree t)\n+  {\n+    print_generic_expr (output.dump_file, t, TDF_SLIM);\n+    return output;\n+  }\n } dp;\n \n #define DEBUG_PRINT(args) do \\\n@@ -506,6 +521,27 @@ scop_detection::merge_sese (sese_l first, sese_l second) const\n   return combined;\n }\n \n+/* Print the loop numbers of the loops contained in SESE to FILE. */\n+\n+static void\n+print_sese_loop_numbers (FILE *file, sese_l sese)\n+{\n+  bool first_loop = true;\n+  for (loop_p nest = sese.entry->dest->loop_father; nest; nest = nest->next)\n+    {\n+      if (!loop_in_sese_p (nest, sese))\n+        break;\n+\n+      for (auto loop : loops_list (cfun, LI_INCLUDE_ROOT, nest))\n+        {\n+          gcc_assert (loop_in_sese_p (loop, sese));\n+\n+          fprintf (file, \"%s%d\", first_loop ? \"\" : \", \", loop->num);\n+          first_loop = false;\n+        }\n+    }\n+}\n+\n /* Build scop outer->inner if possible.  */\n \n void\n@@ -519,6 +555,10 @@ scop_detection::build_scop_depth (loop_p loop)\n       if (! next\n \t  || harmful_loop_in_region (next))\n \t{\n+\t  if (next)\n+\t    DEBUG_PRINT (dp << \"[scop-detection] Discarding SCoP on loops \";\n+\t\t\t print_sese_loop_numbers (dump_file, next);\n+\t\t\t dp << \" because of harmful loops\\n\");\n \t  if (s)\n \t    add_scop (s);\n \t  build_scop_depth (loop);\n@@ -560,14 +600,63 @@ scop_detection::can_represent_loop (loop_p loop, sese_l scop)\n       || !single_pred_p (loop->latch)\n       || exit->src != single_pred (loop->latch)\n       || !empty_block_p (loop->latch))\n-    return false;\n+    {\n+      DEBUG_PRINT (dp << \"[can_represent_loop-fail] Loop shape unsupported.\\n\");\n+      return false;\n+    }\n+\n+  bool edge_irreducible = (loop_preheader_edge (loop)->flags\n+\t\t\t   & EDGE_IRREDUCIBLE_LOOP);\n+  if (edge_irreducible)\n+    {\n+      DEBUG_PRINT (dp << \"[can_represent_loop-fail] \"\n+\t\t\t \"Loop is not a natural loop.\\n\");\n+      return false;\n+    }\n+\n+  bool niter_is_unconditional = number_of_iterations_exit (loop,\n+\t\t\t\t\t\t\t   single_exit (loop),\n+\t\t\t\t\t\t\t   &niter_desc, false);\n+\n+  if (!niter_is_unconditional)\n+    {\n+      DEBUG_PRINT (dp << \"[can_represent_loop-fail] \"\n+\t\t\t \"Loop niter not unconditional.\\n\"\n+\t\t\t \"Condition: \" << niter_desc.assumptions << \"\\n\");\n+      return false;\n+    }\n+\n+  niter = number_of_latch_executions (loop);\n+  if (!niter)\n+    {\n+      DEBUG_PRINT (dp << \"[can_represent_loop-fail] Loop niter unknown.\\n\");\n+      return false;\n+    }\n+  if (!niter_desc.control.no_overflow)\n+    {\n+      DEBUG_PRINT (dp << \"[can_represent_loop-fail] Loop niter can overflow.\\n\");\n+      return false;\n+    }\n \n-  return !(loop_preheader_edge (loop)->flags & EDGE_IRREDUCIBLE_LOOP)\n-    && number_of_iterations_exit (loop, single_exit (loop), &niter_desc, false)\n-    && niter_desc.control.no_overflow\n-    && (niter = number_of_latch_executions (loop))\n-    && !chrec_contains_undetermined (niter)\n-    && graphite_can_represent_expr (scop, loop, niter);\n+  bool undetermined_coefficients = chrec_contains_undetermined (niter);\n+  if (undetermined_coefficients)\n+    {\n+      DEBUG_PRINT (dp << \"[can_represent_loop-fail] \"\n+\t\t\t \"Loop niter chrec contains undetermined \"\n+\t\t\t \"coefficients.\\n\");\n+      return false;\n+    }\n+\n+  bool can_represent_expr = graphite_can_represent_expr (scop, loop, niter);\n+  if (!can_represent_expr)\n+    {\n+      DEBUG_PRINT (dp << \"[can_represent_loop-fail] \"\n+\t\t      << \"Loop niter expression cannot be represented: \"\n+\t\t      << niter << \"\\n\");\n+      return false;\n+    }\n+\n+  return true;\n }\n \n /* Return true when BEGIN is the preheader edge of a loop with a single exit\n@@ -640,6 +729,13 @@ scop_detection::add_scop (sese_l s)\n \n   scops.safe_push (s);\n   DEBUG_PRINT (dp << \"[scop-detection] Adding SCoP: \"; print_sese (dump_file, s));\n+\n+  if (dump_file && dump_flags & TDF_DETAILS)\n+    {\n+      fprintf (dump_file, \"Loops in SCoP: \");\n+      print_sese_loop_numbers (dump_file, s);\n+      fprintf (dump_file, \"\\n\");\n+    }\n }\n \n /* Return true when a statement in SCOP cannot be represented by Graphite.  */\n@@ -665,7 +761,12 @@ scop_detection::harmful_loop_in_region (sese_l scop) const\n \n       /* The basic block should not be part of an irreducible loop.  */\n       if (bb->flags & BB_IRREDUCIBLE_LOOP)\n-\treturn true;\n+\t{\n+\t  DEBUG_PRINT (dp << \"[scop-detection-fail] Found bb in irreducible \"\n+\t\t\t     \"loop.\\n\");\n+\n+\t  return true;\n+\t}\n \n       /* Check for unstructured control flow: CFG not generated by structured\n \t if-then-else.  */\n@@ -676,7 +777,11 @@ scop_detection::harmful_loop_in_region (sese_l scop) const\n \t  FOR_EACH_EDGE (e, ei, bb->succs)\n \t    if (!dominated_by_p (CDI_POST_DOMINATORS, bb, e->dest)\n \t\t&& !dominated_by_p (CDI_DOMINATORS, e->dest, bb))\n-\t      return true;\n+\t      {\n+\t\tDEBUG_PRINT (dp << \"[scop-detection-fail] Found unstructured \"\n+\t\t\t\t   \"control flow.\\n\");\n+\t\treturn true;\n+\t      }\n \t}\n \n       /* Collect all loops in the current region.  */\n@@ -688,7 +793,11 @@ scop_detection::harmful_loop_in_region (sese_l scop) const\n       for (gimple_stmt_iterator gsi = gsi_start_bb (bb);\n \t   !gsi_end_p (gsi); gsi_next (&gsi))\n \tif (!stmt_simple_for_scop_p (scop, gsi_stmt (gsi), bb))\n-\t  return true;\n+\t  {\n+\t    DEBUG_PRINT (dp << \"[scop-detection-fail] \"\n+\t\t\t       \"Found harmful statement.\\n\");\n+\t    return true;\n+\t  }\n \n       for (basic_block dom = first_dom_son (CDI_DOMINATORS, bb);\n \t   dom;\n@@ -731,9 +840,10 @@ scop_detection::harmful_loop_in_region (sese_l scop) const\n \t  && ! loop_nest_has_data_refs (loop))\n \t{\n \t  DEBUG_PRINT (dp << \"[scop-detection-fail] loop_\" << loop->num\n-\t\t       << \"does not have any data reference.\\n\");\n+\t\t       << \" does not have any data reference.\\n\");\n \t  return true;\n \t}\n+      DEBUG_PRINT (dp << \"[scop-detection] loop_\" << loop->num << \" is harmless.\\n\");\n     }\n \n   return false;\n@@ -922,7 +1032,21 @@ scop_detection::graphite_can_represent_expr (sese_l scop, loop_p loop,\n \t\t\t\t\t     tree expr)\n {\n   tree scev = cached_scalar_evolution_in_region (scop, loop, expr);\n-  return graphite_can_represent_scev (scop, scev);\n+  bool can_represent = graphite_can_represent_scev (scop, scev);\n+\n+  if (!can_represent)\n+    {\n+      if (dump_file)\n+\t{\n+\t  fprintf (dump_file,\n+\t\t   \"[graphite_can_represent_expr] Cannot represent scev \\\"\");\n+\t  print_generic_expr (dump_file, scev, TDF_SLIM);\n+\t  fprintf (dump_file, \"\\\" of expression \");\n+\t  print_generic_expr (dump_file, expr, TDF_SLIM);\n+\t  fprintf (dump_file, \" in loop %d\\n\", loop->num);\n+\t}\n+    }\n+  return can_represent;\n }\n \n /* Return true if the data references of STMT can be represented by Graphite.\n@@ -938,15 +1062,24 @@ scop_detection::stmt_has_simple_data_refs_p (sese_l scop, gimple *stmt)\n \n   auto_vec<data_reference_p> drs;\n   if (! graphite_find_data_references_in_stmt (nest, loop, stmt, &drs))\n-    return false;\n+    {\n+      DEBUG_PRINT (dp << \"[stmt_has_simple_data_refs_p] \"\n+\t\t\t \"Unanalyzable statement.\\n\");\n+      return false;\n+    }\n \n   int j;\n   data_reference_p dr;\n   FOR_EACH_VEC_ELT (drs, j, dr)\n     {\n       for (unsigned i = 0; i < DR_NUM_DIMENSIONS (dr); ++i)\n \tif (! graphite_can_represent_scev (scop, DR_ACCESS_FN (dr, i)))\n-\t  return false;\n+\t  {\n+\t    DEBUG_PRINT (dp << \"[stmt_has_simple_data_refs_p] \"\n+\t\t\t       \"Cannot represent access function SCEV: \"\n+\t\t\t    << DR_ACCESS_FN (dr, i) << \"\\n\");\n+\t    return false;\n+\t  }\n     }\n \n   return true;\n@@ -1027,14 +1160,23 @@ scop_detection::stmt_simple_for_scop_p (sese_l scop, gimple *stmt,\n \tfor (unsigned i = 0; i < 2; ++i)\n \t  {\n \t    tree op = gimple_op (stmt, i);\n-\t    if (!graphite_can_represent_expr (scop, loop, op)\n-\t\t/* We can only constrain on integer type.  */\n-\t\t|| ! INTEGRAL_TYPE_P (TREE_TYPE (op)))\n+\t    if (!graphite_can_represent_expr (scop, loop, op))\n+\t      {\n+\t\tDEBUG_PRINT (dump_printf_loc (MSG_MISSED_OPTIMIZATION, stmt,\n+\t\t\t\t\t      \"[scop-detection-fail] \"\n+\t\t\t\t\t      \"Graphite cannot represent cond \"\n+\t\t\t\t\t      \"stmt operator expression.\\n\"));\n+\t\tDEBUG_PRINT (dp << op << \"\\n\");\n+\t\treturn false;\n+\t      }\n+\n+\t    if (! INTEGRAL_TYPE_P (TREE_TYPE (op)))\n \t      {\n-\t\tDEBUG_PRINT (dp << \"[scop-detection-fail] \"\n-\t\t\t\t<< \"Graphite cannot represent stmt:\\n\";\n-\t\t\t     print_gimple_stmt (dump_file, stmt, 0,\n-\t\t\t\t\t\tTDF_VOPS | TDF_MEMSYMS));\n+\t\tDEBUG_PRINT (dump_printf_loc (MSG_MISSED_OPTIMIZATION, stmt,\n+\t\t\t\t\t      \"[scop-detection-fail] \"\n+\t\t\t\t\t      \"Graphite cannot represent cond \"\n+\t\t\t\t\t      \"statement operator. \"\n+\t\t\t\t\t      \"Type must be integral.\\n\"));\n \t\treturn false;\n \t      }\n \t  }"}, {"sha": "00d4b5315aeb8bb8ecb618f311766bef1a85becf", "filename": "gcc/testsuite/gcc.dg/graphite/scop-22a.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e2bc9fb49e30221cd0252966d5092070e1e0c5/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-22a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e2bc9fb49e30221cd0252966d5092070e1e0c5/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-22a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-22a.c?ref=21e2bc9fb49e30221cd0252966d5092070e1e0c5", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-require-effective-target size32plus } */\n+double u[1782225];\n+\n+void foo(int N, int *res)\n+{\n+  int i, j;\n+  double a, b;\n+  double sum = 0.0;\n+\n+  for (j = 3; j < N; j = j * j)\n+    {\n+      sum += a + b;\n+    }\n+\n+  /* Next two loops form first SCoP */\n+  for (i = 0; i < N; i++)\n+    sum += u[i];\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      a = u[i];\n+      u[i] = i * i;\n+      b = u[i];\n+      sum += a + b;\n+    }\n+\n+  for (j = 3; j < N; j = j * j)\n+    {\n+      sum += a + b;\n+    }\n+\n+  for (j = 3; j < N; j = j * j)\n+    {\n+      sum += a + b;\n+    }\n+\n+  /* Next two loop-nests form second SCoP */\n+  for (i = 0; i < N; i++)\n+    sum += u[i];\n+\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      {\n+\ta = u[i];\n+\tu[i] = i * i;\n+\tb = u[j];\n+\tsum += a + b;\n+      }\n+\n+  *res = sum + N;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"number of SCoPs: 2\" 1 \"graphite\"} } */\n+/* { dg-final { scan-tree-dump-times \"Loops in SCoP\" 2 \"graphite\"} } */\n+/* { dg-final { scan-tree-dump \"Loops in SCoP: 2, 3\" \"graphite\"} } */\n+/* { dg-final { scan-tree-dump \"Loops in SCoP: 6, 7, 8\" \"graphite\"} } */"}]}