{"sha": "e7cc090e91b39ff34d75222a21a72d52f2ed6700", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdjYzA5MGU5MWIzOWZmMzRkNzUyMjJhMjFhNzJkNTJmMmVkNjcwMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2003-02-04T17:42:19Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2003-02-04T17:42:19Z"}, "message": "howto.html: New section on stdio_filebuf.\n\n2002-02-04  Jonathan Wakely  <redi@gcc.gnu.org>\n\n\t* docs/html/27_io/howto.html: New section on stdio_filebuf.\n\t* docs/html/ext/howto.html: Move stdio_filebuf notes to 27_io.\n\t* docs/html/documentation.html: Regenerate.\n\nFrom-SVN: r62383", "tree": {"sha": "4eebbff39e2426892a2ccf9e86b8d9b60c777ec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4eebbff39e2426892a2ccf9e86b8d9b60c777ec5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7cc090e91b39ff34d75222a21a72d52f2ed6700", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7cc090e91b39ff34d75222a21a72d52f2ed6700", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7cc090e91b39ff34d75222a21a72d52f2ed6700", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7cc090e91b39ff34d75222a21a72d52f2ed6700/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e80ada7a7b0f64f8340b64cd709d359d6bf383a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e80ada7a7b0f64f8340b64cd709d359d6bf383a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e80ada7a7b0f64f8340b64cd709d359d6bf383a"}], "stats": {"total": 99, "additions": 65, "deletions": 34}, "files": [{"sha": "d9c4f4ce7f154ab5ea0fba253918e3ac6044ae71", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7cc090e91b39ff34d75222a21a72d52f2ed6700/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7cc090e91b39ff34d75222a21a72d52f2ed6700/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e7cc090e91b39ff34d75222a21a72d52f2ed6700", "patch": "@@ -1,3 +1,9 @@\n+2002-02-04  Jonathan Wakely  <redi@gcc.gnu.org>\n+\n+\t* docs/html/27_io/howto.html: New section on stdio_filebuf.\n+\t* docs/html/ext/howto.html: Move stdio_filebuf notes to 27_io.\n+\t* docs/html/documentation.html: Regenerate.\n+\n 2003-02-04  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* docs/html/17_intro/porting.texi: Update to GFDL 1.2."}, {"sha": "54c47549fecd2278a7d711bd6092fbc8ee46f452", "filename": "libstdc++-v3/docs/html/27_io/howto.html", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7cc090e91b39ff34d75222a21a72d52f2ed6700/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7cc090e91b39ff34d75222a21a72d52f2ed6700/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html?ref=e7cc090e91b39ff34d75222a21a72d52f2ed6700", "patch": "@@ -35,6 +35,7 @@ <h1>Contents</h1>\n    <li><a href=\"#8\">Pathetic performance?  Ditch C.</a></li>\n    <li><a href=\"#9\">Threads and I/O</a></li>\n    <li><a href=\"#10\">Which header?</a></li>\n+   <li><a href=\"#11\">Using FILE*s and file descriptors with IOStreams</a></li>\n </ul>\n \n <hr />\n@@ -692,6 +693,60 @@ <h2><a name=\"10\">Which header?</a></h2>\n    </p>\n \n \n+<hr />\n+<h2><a name=\"11\">Using FILE*s and file descriptors with IOStreams</a></h2>\n+   <p>The v2 library included non-standard extensions to construct\n+      <code>std::filebuf</code>s from C stdio types such as\n+      <code>FILE*</code>s and POSIX file descriptors.\n+      Today the recommended way to use stdio types with libstdc++-v3\n+      IOStreams is via the <code>stdio_filebuf</code> class (see below),\n+      but earlier releases provided slightly different mechanisms.\n+   </p>\n+   <ul>\n+     <li>3.0.x <code>filebuf</code>s have another ctor with this signature:\n+         <br />\n+        <code>basic_filebuf(__c_file_type*, ios_base::openmode, int_type);</code>\n+         <br />This comes in very handy in a number of places, such as\n+         attaching Unix sockets, pipes, and anything else which uses file\n+         descriptors, into the IOStream buffering classes.  The three\n+         arguments are as follows:\n+         <ul>\n+          <li><code>__c_file_type*      F   </code>\n+              // the __c_file_type typedef usually boils down to stdio's FILE\n+          </li>\n+          <li><code>ios_base::openmode  M   </code>\n+              // same as all the other uses of openmode\n+          </li>\n+          <li><code>int_type            B   </code>\n+              // buffer size, defaults to BUFSIZ if not specified\n+          </li>\n+         </ul>\n+         For those wanting to use file descriptors instead of FILE*'s, I\n+         invite you to contemplate the mysteries of C's <code>fdopen()</code>.\n+     </li>\n+     <li>In library snapshot 3.0.95 and later, <code>filebuf</code>s bring\n+         back an old extension:  the <code>fd()</code> member function.  The\n+         integer returned from this function can be used for whatever file\n+         descriptors can be used for on your platform.  Naturally, the\n+         library cannot track what you do on your own with a file descriptor,\n+         so if you perform any I/O directly, don't expect the library to be\n+         aware of it.\n+     </li>\n+     <li>Beginning with 3.1, the extra <code>filebuf</code> constructor and\n+         the <code>fd()</code> function were removed from the standard\n+         filebuf.  Instead, <code>&lt;ext/stdio_filebuf.h&gt;</code> contains\n+         a derived class called <code>__gnu_cxx::stdio_filebuf</code>. This\n+         class can be constructed from a C <code>FILE*</code> or a file\n+         descriptor, and provides the <code>fd()</code> function.\n+     </li>\n+   </ul>\n+   <p>If you want to access a <code>filebuf</code>s file descriptor to\n+      implement file locking (e.g. using the <code>fcntl()</code> system\n+      call) then you might be interested in Henry Suter's\n+      <a href=\"http://suter.home.cern.ch/suter/RWLock.html\">RWLock</a>\n+      class.\n+   </p>\n+\n <!-- ####################################################### -->\n \n <hr />"}, {"sha": "b3f0fc0d97a7d4620ba161f773ec0c683fe97e25", "filename": "libstdc++-v3/docs/html/documentation.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7cc090e91b39ff34d75222a21a72d52f2ed6700/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7cc090e91b39ff34d75222a21a72d52f2ed6700/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html?ref=e7cc090e91b39ff34d75222a21a72d52f2ed6700", "patch": "@@ -212,6 +212,7 @@ <h2><a name=\"3\">Chapter-Specific Documentation</a></h2>\n      <li><a href=\"27_io/howto.html#8\">Pathetic performance?  Ditch C.</a></li>\n      <li><a href=\"27_io/howto.html#9\">Threads and I/O</a></li>\n      <li><a href=\"27_io/howto.html#10\">Which header?</a></li>\n+     <li><a href=\"27_io/howto.html#11\">Using FILE*s and file descriptors with IOStreams</a></li>\n    </ul>\n    </li>\n "}, {"sha": "07e5c2776a2baa12a3c264dd7f51bfb1fdfb2f3b", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 3, "deletions": 34, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7cc090e91b39ff34d75222a21a72d52f2ed6700/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7cc090e91b39ff34d75222a21a72d52f2ed6700/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=e7cc090e91b39ff34d75222a21a72d52f2ed6700", "patch": "@@ -124,40 +124,9 @@ <h2><a name=\"2\">Added members and types</a></h2>\n          <a href=\"sgiexts.html\">their own page</a>.  Since the SGI STL is no\n          longer actively maintained, we will try and keep this code working\n          ourselves.</li>\n-     <li>3.0.x <code>filebuf</code>s have another ctor with this signature:\n-         <br />\n-        <code>basic_filebuf(__c_file_type*, ios_base::openmode, int_type);</code>\n-         <br />This comes in very handy in a number of places, such as\n-         attaching Unix sockets, pipes, and anything else which uses file\n-         descriptors, into the IOStream buffering classes.  The three\n-         arguments are as follows:\n-         <ul>\n-          <li><code>__c_file_type*      F   </code>\n-              // the __c_file_type typedef usually boils down to stdio's FILE\n-          </li>\n-          <li><code>ios_base::openmode  M   </code>\n-              // same as all the other uses of openmode\n-          </li>\n-          <li><code>int_type            B   </code>\n-              // buffer size, defaults to BUFSIZ if not specified\n-          </li>\n-         </ul>\n-         For those wanting to use file descriptors instead of FILE*'s, I\n-         invite you to contemplate the mysteries of C's <code>fdopen()</code>.\n-     </li>\n-     <li>In library snapshot 3.0.95 and later, <code>filebuf</code>s bring\n-         back an old extension:  the <code>fd()</code> member function.  The\n-         integer returned from this function can be used for whatever file\n-         descriptors can be used for on your platform.  Naturally, the\n-         library cannot track what you do on your own with a file descriptor,\n-         so if you perform any I/O directly, don't expect the library to be\n-         aware of it.\n-     </li>\n-     <li>Beginning with 3.1, the extra <code>filebuf</code> constructor and\n-         the <code>fd()</code> function were removed from the standard\n-         filebuf.  Instead, <code>&lt;ext/stdio_filebuf.h&gt;</code> contains\n-         a derived class called <code>__gnu_cxx::stdio_filebuf</code>.\n-     </li>\n+     <li>Extensions allowing <code>filebuf</code>s to be constructed from\n+         stdio types are described in the\n+         <a href=\"../27_io/howto.html#11\">chapter 27 notes</a>.</li>\n    </ul>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>."}]}