{"sha": "dced339c8a6fa30f90181da525fb0da4801bdf39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNlZDMzOWM4YTZmYTMwZjkwMTgxZGE1MjVmYjBkYTQ4MDFiZGYzOQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2017-01-31T14:32:58Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2017-01-31T14:32:58Z"}, "message": "libgomp: Provide prototypes for functions implemented by libgomp plugins\n\n\tlibgomp/\n\t* libgomp-plugin.h: #include <stdbool.h>.\n\t(GOMP_OFFLOAD_get_name, GOMP_OFFLOAD_get_caps)\n\t(GOMP_OFFLOAD_get_type, GOMP_OFFLOAD_get_num_devices)\n\t(GOMP_OFFLOAD_init_device, GOMP_OFFLOAD_fini_device)\n\t(GOMP_OFFLOAD_version, GOMP_OFFLOAD_load_image)\n\t(GOMP_OFFLOAD_unload_image, GOMP_OFFLOAD_alloc, GOMP_OFFLOAD_free)\n\t(GOMP_OFFLOAD_dev2host, GOMP_OFFLOAD_host2dev)\n\t(GOMP_OFFLOAD_dev2dev, GOMP_OFFLOAD_can_run, GOMP_OFFLOAD_run)\n\t(GOMP_OFFLOAD_async_run, GOMP_OFFLOAD_openacc_parallel)\n\t(GOMP_OFFLOAD_openacc_register_async_cleanup)\n\t(GOMP_OFFLOAD_openacc_async_test)\n\t(GOMP_OFFLOAD_openacc_async_test_all)\n\t(GOMP_OFFLOAD_openacc_async_wait)\n\t(GOMP_OFFLOAD_openacc_async_wait_async)\n\t(GOMP_OFFLOAD_openacc_async_wait_all)\n\t(GOMP_OFFLOAD_openacc_async_wait_all_async)\n\t(GOMP_OFFLOAD_openacc_async_set_async)\n\t(GOMP_OFFLOAD_openacc_create_thread_data)\n\t(GOMP_OFFLOAD_openacc_destroy_thread_data)\n\t(GOMP_OFFLOAD_openacc_get_current_cuda_device)\n\t(GOMP_OFFLOAD_openacc_get_current_cuda_context)\n\t(GOMP_OFFLOAD_openacc_get_cuda_stream)\n\t(GOMP_OFFLOAD_openacc_set_cuda_stream): New prototypes.\n\t* libgomp.h (struct acc_dispatch_t, struct gomp_device_descr): Use\n\tthese.\n\t* plugin/plugin-hsa.c (GOMP_OFFLOAD_load_image)\n\t(GOMP_OFFLOAD_unload_image): Fix argument types.\n\tliboffloadmic/\n\t* plugin/libgomp-plugin-intelmic.cpp (GOMP_OFFLOAD_get_type): Fix\n\treturn type.\n\t(GOMP_OFFLOAD_load_image): Fix argument types.\n\nFrom-SVN: r245062", "tree": {"sha": "f36f8b40db8041e76435b0fdb135725c95644f02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f36f8b40db8041e76435b0fdb135725c95644f02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dced339c8a6fa30f90181da525fb0da4801bdf39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dced339c8a6fa30f90181da525fb0da4801bdf39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dced339c8a6fa30f90181da525fb0da4801bdf39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dced339c8a6fa30f90181da525fb0da4801bdf39/comments", "author": null, "committer": null, "parents": [{"sha": "5b11971a564ab8a207e0fa416eb9e0424514529e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b11971a564ab8a207e0fa416eb9e0424514529e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b11971a564ab8a207e0fa416eb9e0424514529e"}], "stats": {"total": 163, "additions": 123, "deletions": 40}, "files": [{"sha": "829a30f672ef2bc816673372a695bea8e9095bb1", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dced339c8a6fa30f90181da525fb0da4801bdf39/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dced339c8a6fa30f90181da525fb0da4801bdf39/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=dced339c8a6fa30f90181da525fb0da4801bdf39", "patch": "@@ -1,3 +1,33 @@\n+2017-01-31  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* libgomp-plugin.h: #include <stdbool.h>.\n+\t(GOMP_OFFLOAD_get_name, GOMP_OFFLOAD_get_caps)\n+\t(GOMP_OFFLOAD_get_type, GOMP_OFFLOAD_get_num_devices)\n+\t(GOMP_OFFLOAD_init_device, GOMP_OFFLOAD_fini_device)\n+\t(GOMP_OFFLOAD_version, GOMP_OFFLOAD_load_image)\n+\t(GOMP_OFFLOAD_unload_image, GOMP_OFFLOAD_alloc, GOMP_OFFLOAD_free)\n+\t(GOMP_OFFLOAD_dev2host, GOMP_OFFLOAD_host2dev)\n+\t(GOMP_OFFLOAD_dev2dev, GOMP_OFFLOAD_can_run, GOMP_OFFLOAD_run)\n+\t(GOMP_OFFLOAD_async_run, GOMP_OFFLOAD_openacc_parallel)\n+\t(GOMP_OFFLOAD_openacc_register_async_cleanup)\n+\t(GOMP_OFFLOAD_openacc_async_test)\n+\t(GOMP_OFFLOAD_openacc_async_test_all)\n+\t(GOMP_OFFLOAD_openacc_async_wait)\n+\t(GOMP_OFFLOAD_openacc_async_wait_async)\n+\t(GOMP_OFFLOAD_openacc_async_wait_all)\n+\t(GOMP_OFFLOAD_openacc_async_wait_all_async)\n+\t(GOMP_OFFLOAD_openacc_async_set_async)\n+\t(GOMP_OFFLOAD_openacc_create_thread_data)\n+\t(GOMP_OFFLOAD_openacc_destroy_thread_data)\n+\t(GOMP_OFFLOAD_openacc_get_current_cuda_device)\n+\t(GOMP_OFFLOAD_openacc_get_current_cuda_context)\n+\t(GOMP_OFFLOAD_openacc_get_cuda_stream)\n+\t(GOMP_OFFLOAD_openacc_set_cuda_stream): New prototypes.\n+\t* libgomp.h (struct acc_dispatch_t, struct gomp_device_descr): Use\n+\tthese.\n+\t* plugin/plugin-hsa.c (GOMP_OFFLOAD_load_image)\n+\t(GOMP_OFFLOAD_unload_image): Fix argument types.\n+\n 2017-01-26  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/lib/libgomp.exp"}, {"sha": "fba45ee175453364eec4c86ee4c533c5df2c1edf", "filename": "libgomp/libgomp-plugin.h", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dced339c8a6fa30f90181da525fb0da4801bdf39/libgomp%2Flibgomp-plugin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dced339c8a6fa30f90181da525fb0da4801bdf39/libgomp%2Flibgomp-plugin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp-plugin.h?ref=dced339c8a6fa30f90181da525fb0da4801bdf39", "patch": "@@ -1,4 +1,6 @@\n-/* Copyright (C) 2014-2017 Free Software Foundation, Inc.\n+/* The libgomp plugin API.\n+\n+   Copyright (C) 2014-2017 Free Software Foundation, Inc.\n \n    Contributed by Mentor Embedded.\n \n@@ -24,11 +26,10 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-/* An interface to various libgomp-internal functions for use by plugins.  */\n-\n #ifndef LIBGOMP_PLUGIN_H\n #define LIBGOMP_PLUGIN_H 1\n \n+#include <stdbool.h>\n #include <stddef.h>\n #include <stdint.h>\n \n@@ -73,6 +74,42 @@ extern void GOMP_PLUGIN_error (const char *, ...)\n extern void GOMP_PLUGIN_fatal (const char *, ...)\n \t__attribute__ ((noreturn, format (printf, 1, 2)));\n \n+/* Prototypes for functions implemented by libgomp plugins.  */\n+extern const char *GOMP_OFFLOAD_get_name (void);\n+extern unsigned int GOMP_OFFLOAD_get_caps (void);\n+extern int GOMP_OFFLOAD_get_type (void);\n+extern int GOMP_OFFLOAD_get_num_devices (void);\n+extern bool GOMP_OFFLOAD_init_device (int);\n+extern bool GOMP_OFFLOAD_fini_device (int);\n+extern unsigned GOMP_OFFLOAD_version (void);\n+extern int GOMP_OFFLOAD_load_image (int, unsigned, const void *,\n+\t\t\t\t    struct addr_pair **);\n+extern bool GOMP_OFFLOAD_unload_image (int, unsigned, const void *);\n+extern void *GOMP_OFFLOAD_alloc (int, size_t);\n+extern bool GOMP_OFFLOAD_free (int, void *);\n+extern bool GOMP_OFFLOAD_dev2host (int, void *, const void *, size_t);\n+extern bool GOMP_OFFLOAD_host2dev (int, void *, const void *, size_t);\n+extern bool GOMP_OFFLOAD_dev2dev (int, void *, const void *, size_t);\n+extern bool GOMP_OFFLOAD_can_run (void *);\n+extern void GOMP_OFFLOAD_run (int, void *, void *, void **);\n+extern void GOMP_OFFLOAD_async_run (int, void *, void *, void **, void *);\n+extern void GOMP_OFFLOAD_openacc_parallel (void (*) (void *), size_t, void **,\n+\t\t\t\t\t   void **, int, unsigned *, void *);\n+extern void GOMP_OFFLOAD_openacc_register_async_cleanup (void *, int);\n+extern int GOMP_OFFLOAD_openacc_async_test (int);\n+extern int GOMP_OFFLOAD_openacc_async_test_all (void);\n+extern void GOMP_OFFLOAD_openacc_async_wait (int);\n+extern void GOMP_OFFLOAD_openacc_async_wait_async (int, int);\n+extern void GOMP_OFFLOAD_openacc_async_wait_all (void);\n+extern void GOMP_OFFLOAD_openacc_async_wait_all_async (int);\n+extern void GOMP_OFFLOAD_openacc_async_set_async (int);\n+extern void *GOMP_OFFLOAD_openacc_create_thread_data (int);\n+extern void GOMP_OFFLOAD_openacc_destroy_thread_data (void *);\n+extern void *GOMP_OFFLOAD_openacc_get_current_cuda_device (void);\n+extern void *GOMP_OFFLOAD_openacc_get_current_cuda_context (void);\n+extern void *GOMP_OFFLOAD_openacc_get_cuda_stream (int);\n+extern int GOMP_OFFLOAD_openacc_set_cuda_stream (int, void *);\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "6dfe9aadb0dd35f5188bd0854a0a495e1f4e9588", "filename": "libgomp/libgomp.h", "status": "modified", "additions": 37, "deletions": 33, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dced339c8a6fa30f90181da525fb0da4801bdf39/libgomp%2Flibgomp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dced339c8a6fa30f90181da525fb0da4801bdf39/libgomp%2Flibgomp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.h?ref=dced339c8a6fa30f90181da525fb0da4801bdf39", "patch": "@@ -882,31 +882,35 @@ typedef struct acc_dispatch_t\n   struct target_mem_desc *data_environ;\n \n   /* Execute.  */\n-  void (*exec_func) (void (*) (void *), size_t, void **, void **, int,\n-\t\t     unsigned *, void *);\n+  __typeof (GOMP_OFFLOAD_openacc_parallel) *exec_func;\n \n   /* Async cleanup callback registration.  */\n-  void (*register_async_cleanup_func) (void *, int);\n+  __typeof (GOMP_OFFLOAD_openacc_register_async_cleanup)\n+    *register_async_cleanup_func;\n \n   /* Asynchronous routines.  */\n-  int (*async_test_func) (int);\n-  int (*async_test_all_func) (void);\n-  void (*async_wait_func) (int);\n-  void (*async_wait_async_func) (int, int);\n-  void (*async_wait_all_func) (void);\n-  void (*async_wait_all_async_func) (int);\n-  void (*async_set_async_func) (int);\n+  __typeof (GOMP_OFFLOAD_openacc_async_test) *async_test_func;\n+  __typeof (GOMP_OFFLOAD_openacc_async_test_all) *async_test_all_func;\n+  __typeof (GOMP_OFFLOAD_openacc_async_wait) *async_wait_func;\n+  __typeof (GOMP_OFFLOAD_openacc_async_wait_async) *async_wait_async_func;\n+  __typeof (GOMP_OFFLOAD_openacc_async_wait_all) *async_wait_all_func;\n+  __typeof (GOMP_OFFLOAD_openacc_async_wait_all_async)\n+    *async_wait_all_async_func;\n+  __typeof (GOMP_OFFLOAD_openacc_async_set_async) *async_set_async_func;\n \n   /* Create/destroy TLS data.  */\n-  void *(*create_thread_data_func) (int);\n-  void (*destroy_thread_data_func) (void *);\n+  __typeof (GOMP_OFFLOAD_openacc_create_thread_data) *create_thread_data_func;\n+  __typeof (GOMP_OFFLOAD_openacc_destroy_thread_data)\n+    *destroy_thread_data_func;\n \n   /* NVIDIA target specific routines.  */\n   struct {\n-    void *(*get_current_device_func) (void);\n-    void *(*get_current_context_func) (void);\n-    void *(*get_stream_func) (int);\n-    int (*set_stream_func) (int, void *);\n+    __typeof (GOMP_OFFLOAD_openacc_get_current_cuda_device)\n+      *get_current_device_func;\n+    __typeof (GOMP_OFFLOAD_openacc_get_current_cuda_context)\n+      *get_current_context_func;\n+    __typeof (GOMP_OFFLOAD_openacc_get_cuda_stream) *get_stream_func;\n+    __typeof (GOMP_OFFLOAD_openacc_set_cuda_stream) *set_stream_func;\n   } cuda;\n } acc_dispatch_t;\n \n@@ -940,23 +944,23 @@ struct gomp_device_descr\n   enum offload_target_type type;\n \n   /* Function handlers.  */\n-  const char *(*get_name_func) (void);\n-  unsigned int (*get_caps_func) (void);\n-  int (*get_type_func) (void);\n-  int (*get_num_devices_func) (void);\n-  bool (*init_device_func) (int);\n-  bool (*fini_device_func) (int);\n-  unsigned (*version_func) (void);\n-  int (*load_image_func) (int, unsigned, const void *, struct addr_pair **);\n-  bool (*unload_image_func) (int, unsigned, const void *);\n-  void *(*alloc_func) (int, size_t);\n-  bool (*free_func) (int, void *);\n-  bool (*dev2host_func) (int, void *, const void *, size_t);\n-  bool (*host2dev_func) (int, void *, const void *, size_t);\n-  bool (*dev2dev_func) (int, void *, const void *, size_t);\n-  bool (*can_run_func) (void *);\n-  void (*run_func) (int, void *, void *, void **);\n-  void (*async_run_func) (int, void *, void *, void **, void *);\n+  __typeof (GOMP_OFFLOAD_get_name) *get_name_func;\n+  __typeof (GOMP_OFFLOAD_get_caps) *get_caps_func;\n+  __typeof (GOMP_OFFLOAD_get_type) *get_type_func;\n+  __typeof (GOMP_OFFLOAD_get_num_devices) *get_num_devices_func;\n+  __typeof (GOMP_OFFLOAD_init_device) *init_device_func;\n+  __typeof (GOMP_OFFLOAD_fini_device) *fini_device_func;\n+  __typeof (GOMP_OFFLOAD_version) *version_func;\n+  __typeof (GOMP_OFFLOAD_load_image) *load_image_func;\n+  __typeof (GOMP_OFFLOAD_unload_image) *unload_image_func;\n+  __typeof (GOMP_OFFLOAD_alloc) *alloc_func;\n+  __typeof (GOMP_OFFLOAD_free) *free_func;\n+  __typeof (GOMP_OFFLOAD_dev2host) *dev2host_func;\n+  __typeof (GOMP_OFFLOAD_host2dev) *host2dev_func;\n+  __typeof (GOMP_OFFLOAD_dev2dev) *dev2dev_func;\n+  __typeof (GOMP_OFFLOAD_can_run) *can_run_func;\n+  __typeof (GOMP_OFFLOAD_run) *run_func;\n+  __typeof (GOMP_OFFLOAD_async_run) *async_run_func;\n \n   /* Splay tree containing information about mapped memory regions.  */\n   struct splay_tree_s mem_map;"}, {"sha": "9cc243d66bf940c3f66368528e5b8d51bdb0612c", "filename": "libgomp/plugin/plugin-hsa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dced339c8a6fa30f90181da525fb0da4801bdf39/libgomp%2Fplugin%2Fplugin-hsa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dced339c8a6fa30f90181da525fb0da4801bdf39/libgomp%2Fplugin%2Fplugin-hsa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-hsa.c?ref=dced339c8a6fa30f90181da525fb0da4801bdf39", "patch": "@@ -891,7 +891,7 @@ init_basic_kernel_info (struct kernel_info *kernel,\n    in TARGET_TABLE.  */\n \n int\n-GOMP_OFFLOAD_load_image (int ord, unsigned version, void *target_data,\n+GOMP_OFFLOAD_load_image (int ord, unsigned version, const void *target_data,\n \t\t\t struct addr_pair **target_table)\n {\n   if (GOMP_VERSION_DEV (version) > GOMP_VERSION_HSA)\n@@ -1726,7 +1726,7 @@ destroy_module (struct module_info *module)\n    TRUE on success.  */\n \n bool\n-GOMP_OFFLOAD_unload_image (int n, unsigned version, void *target_data)\n+GOMP_OFFLOAD_unload_image (int n, unsigned version, const void *target_data)\n {\n   if (GOMP_VERSION_DEV (version) > GOMP_VERSION_HSA)\n     {"}, {"sha": "c9aa32c59a2e0b07721bbc844b9d5ec644b0c0d3", "filename": "liboffloadmic/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dced339c8a6fa30f90181da525fb0da4801bdf39/liboffloadmic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dced339c8a6fa30f90181da525fb0da4801bdf39/liboffloadmic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/liboffloadmic%2FChangeLog?ref=dced339c8a6fa30f90181da525fb0da4801bdf39", "patch": "@@ -1,3 +1,9 @@\n+2017-01-31  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* plugin/libgomp-plugin-intelmic.cpp (GOMP_OFFLOAD_get_type): Fix\n+\treturn type.\n+\t(GOMP_OFFLOAD_load_image): Fix argument types.\n+\n 2017-01-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR other/79046\n@@ -630,3 +636,9 @@\n \t* runtime/orsl-lite/lib/orsl-lite.c: Ditto.\n \t* runtime/orsl-lite/version.txt: Ditto.\n \t* runtime/use_mpss2.txt: Ditto.\n+\f\n+Copyright (C) 2014-2017 Free Software Foundation, Inc.\n+\n+Copying and distribution of this file, with or without modification,\n+are permitted in any medium without royalty provided the copyright\n+notice and this notice are preserved."}, {"sha": "d1678d0514e91e775fff7fe361b861f706b53782", "filename": "liboffloadmic/plugin/libgomp-plugin-intelmic.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dced339c8a6fa30f90181da525fb0da4801bdf39/liboffloadmic%2Fplugin%2Flibgomp-plugin-intelmic.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dced339c8a6fa30f90181da525fb0da4801bdf39/liboffloadmic%2Fplugin%2Flibgomp-plugin-intelmic.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/liboffloadmic%2Fplugin%2Flibgomp-plugin-intelmic.cpp?ref=dced339c8a6fa30f90181da525fb0da4801bdf39", "patch": "@@ -159,7 +159,7 @@ GOMP_OFFLOAD_get_caps (void)\n   return res;\n }\n \n-extern \"C\" enum offload_target_type\n+extern \"C\" int\n GOMP_OFFLOAD_get_type (void)\n {\n   enum offload_target_type res = OFFLOAD_TARGET_TYPE_INTEL_MIC;\n@@ -345,7 +345,7 @@ GOMP_OFFLOAD_version (void)\n \n extern \"C\" int\n GOMP_OFFLOAD_load_image (int device, const unsigned version,\n-\t\t\t void *target_image, addr_pair **result)\n+\t\t\t const void *target_image, addr_pair **result)\n {\n   TRACE (\"(device = %d, target_image = %p)\", device, target_image);\n "}]}