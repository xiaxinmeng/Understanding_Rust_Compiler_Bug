{"sha": "e55c5e24b97ad8ddc44588da18e894c139e02c0a", "node_id": "C_kwDOANBUbNoAKGU1NWM1ZTI0Yjk3YWQ4ZGRjNDQ1ODhkYTE4ZTg5NGMxMzllMDJjMGE", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-03-16T12:25:54Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-03-16T12:25:54Z"}, "message": "c++: fold calls to std::move/forward [PR96780]\n\nA well-formed call to std::move/forward is equivalent to a cast, but the\nformer being a function call means the compiler generates debug info,\nwhich persists even after the call gets inlined, for an operation that's\nnever interesting to debug.\n\nThis patch addresses this problem by folding calls to std::move/forward\nand other cast-like functions into simple casts as part of the frontend's\ngeneral expression folding routine.  This behavior is controlled by a\nnew flag -ffold-simple-inlines, and otherwise by -fno-inline, so that\nusers can enable this folding with -O0 (which implies -fno-inline).\n\nAfter this patch with -O2 and a non-checking compiler, debug info size\nfor some testcases from range-v3 and cmcstl2 decreases by as much as ~10%\nand overall compile time and memory usage decreases by ~2%.\n\n\tPR c++/96780\n\ngcc/ChangeLog:\n\n\t* doc/invoke.texi (C++ Dialect Options): Document\n\t-ffold-simple-inlines.\n\ngcc/c-family/ChangeLog:\n\n\t* c.opt: Add -ffold-simple-inlines.\n\ngcc/cp/ChangeLog:\n\n\t* cp-gimplify.cc (cp_fold) <case CALL_EXPR>: Fold calls to\n\tstd::move/forward and other cast-like functions into simple\n\tcasts.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/opt/pr96780.C: New test.", "tree": {"sha": "f8de275239ad1c36cf6018e6b2fe264f0cdb3044", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8de275239ad1c36cf6018e6b2fe264f0cdb3044"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e55c5e24b97ad8ddc44588da18e894c139e02c0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e55c5e24b97ad8ddc44588da18e894c139e02c0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e55c5e24b97ad8ddc44588da18e894c139e02c0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e55c5e24b97ad8ddc44588da18e894c139e02c0a/comments", "author": null, "committer": null, "parents": [{"sha": "818e305ea692ebc6578fb40881887d45382f876b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/818e305ea692ebc6578fb40881887d45382f876b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/818e305ea692ebc6578fb40881887d45382f876b"}], "stats": {"total": 90, "additions": 89, "deletions": 1}, "files": [{"sha": "9a4828ebe372a88507d3f326b76ac98f023ac988", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e55c5e24b97ad8ddc44588da18e894c139e02c0a/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e55c5e24b97ad8ddc44588da18e894c139e02c0a/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=e55c5e24b97ad8ddc44588da18e894c139e02c0a", "patch": "@@ -1731,6 +1731,10 @@ Support dynamic initialization of thread-local variables in a different translat\n fexternal-templates\n C++ ObjC++ WarnRemoved\n \n+ffold-simple-inlines\n+C++ ObjC++ Optimization Var(flag_fold_simple_inlines)\n+Fold calls to simple inline functions.\n+\n ffor-scope\n C++ ObjC++ WarnRemoved\n "}, {"sha": "e4c2644af15b67ae69f3863bc70b346650c2f2cd", "filename": "gcc/cp/cp-gimplify.cc", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e55c5e24b97ad8ddc44588da18e894c139e02c0a/gcc%2Fcp%2Fcp-gimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e55c5e24b97ad8ddc44588da18e894c139e02c0a/gcc%2Fcp%2Fcp-gimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.cc?ref=e55c5e24b97ad8ddc44588da18e894c139e02c0a", "patch": "@@ -41,6 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"file-prefix-map.h\"\n #include \"cgraph.h\"\n #include \"omp-general.h\"\n+#include \"opts.h\"\n \n /* Forward declarations.  */\n \n@@ -2756,9 +2757,44 @@ cp_fold (tree x)\n \n     case CALL_EXPR:\n       {\n-\tint sv = optimize, nw = sv;\n \ttree callee = get_callee_fndecl (x);\n \n+\t/* \"Inline\" calls to std::move/forward and other cast-like functions\n+\t   by simply folding them into a corresponding cast to their return\n+\t   type.  This is cheaper than relying on the middle end to do so, and\n+\t   also means we avoid generating useless debug info for them at all.\n+\n+\t   At this point the argument has already been converted into a\n+\t   reference, so it suffices to use a NOP_EXPR to express the\n+\t   cast.  */\n+\tif ((OPTION_SET_P (flag_fold_simple_inlines)\n+\t     ? flag_fold_simple_inlines\n+\t     : !flag_no_inline)\n+\t    && call_expr_nargs (x) == 1\n+\t    && decl_in_std_namespace_p (callee)\n+\t    && DECL_NAME (callee) != NULL_TREE\n+\t    && (id_equal (DECL_NAME (callee), \"move\")\n+\t\t|| id_equal (DECL_NAME (callee), \"forward\")\n+\t\t|| id_equal (DECL_NAME (callee), \"addressof\")\n+\t\t/* This addressof equivalent is used heavily in libstdc++.  */\n+\t\t|| id_equal (DECL_NAME (callee), \"__addressof\")\n+\t\t|| id_equal (DECL_NAME (callee), \"as_const\")))\n+\t  {\n+\t    r = CALL_EXPR_ARG (x, 0);\n+\t    /* Check that the return and argument types are sane before\n+\t       folding.  */\n+\t    if (INDIRECT_TYPE_P (TREE_TYPE (x))\n+\t\t&& INDIRECT_TYPE_P (TREE_TYPE (r)))\n+\t      {\n+\t\tif (!same_type_p (TREE_TYPE (x), TREE_TYPE (r)))\n+\t\t  r = build_nop (TREE_TYPE (x), r);\n+\t\tx = cp_fold (r);\n+\t\tbreak;\n+\t      }\n+\t  }\n+\n+\tint sv = optimize, nw = sv;\n+\n \t/* Some built-in function calls will be evaluated at compile-time in\n \t   fold ().  Set optimize to 1 when folding __builtin_constant_p inside\n \t   a constexpr function so that fold_builtin_1 doesn't fold it to 0.  */"}, {"sha": "d65979bba3fb517725cf08582706c0239f6e78af", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e55c5e24b97ad8ddc44588da18e894c139e02c0a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e55c5e24b97ad8ddc44588da18e894c139e02c0a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e55c5e24b97ad8ddc44588da18e894c139e02c0a", "patch": "@@ -3124,6 +3124,16 @@ On targets that support symbol aliases, the default is\n @option{-fextern-tls-init}.  On targets that do not support symbol\n aliases, the default is @option{-fno-extern-tls-init}.\n \n+@item -ffold-simple-inlines\n+@itemx -fno-fold-simple-inlines\n+@opindex ffold-simple-inlines\n+@opindex fno-fold-simple-inlines\n+Permit the C++ frontend to fold calls to @code{std::move}, @code{std::forward},\n+@code{std::addressof} and @code{std::as_const}.  In contrast to inlining, this\n+means no debug information will be generated for such calls.  Since these\n+functions are rarely interesting to debug, this flag is enabled by default\n+unless @option{-fno-inline} is active.\n+\n @item -fno-gnu-keywords\n @opindex fno-gnu-keywords\n @opindex fgnu-keywords"}, {"sha": "61e11855eeb3a809392e55e1403870d787e80bf7", "filename": "gcc/testsuite/g++.dg/opt/pr96780.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e55c5e24b97ad8ddc44588da18e894c139e02c0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr96780.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e55c5e24b97ad8ddc44588da18e894c139e02c0a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr96780.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr96780.C?ref=e55c5e24b97ad8ddc44588da18e894c139e02c0a", "patch": "@@ -0,0 +1,38 @@\n+// PR c++/96780\n+// Verify calls to std::move/forward are folded away by the frontend.\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-ffold-simple-inlines -fdump-tree-gimple\" }\n+\n+#include <utility>\n+\n+struct A;\n+\n+extern A& a;\n+extern const A& ca;\n+\n+void f() {\n+  auto&& x1 = std::move(a);\n+  auto&& x2 = std::forward<A>(a);\n+  auto&& x3 = std::forward<A&>(a);\n+\n+  auto&& x4 = std::move(ca);\n+  auto&& x5 = std::forward<const A>(ca);\n+  auto&& x6 = std::forward<const A&>(ca);\n+\n+  auto x7 = std::addressof(a);\n+  auto x8 = std::addressof(ca);\n+#if __GLIBCXX__\n+  auto x9 = std::__addressof(a);\n+  auto x10 = std::__addressof(ca);\n+#endif\n+#if __cpp_lib_as_const\n+  auto&& x11 = std::as_const(a);\n+  auto&& x12 = std::as_const(ca);\n+#endif\n+}\n+\n+// { dg-final { scan-tree-dump-not \"= std::move\" \"gimple\" } }\n+// { dg-final { scan-tree-dump-not \"= std::forward\" \"gimple\" } }\n+// { dg-final { scan-tree-dump-not \"= std::addressof\" \"gimple\" } }\n+// { dg-final { scan-tree-dump-not \"= std::__addressof\" \"gimple\" } }\n+// { dg-final { scan-tree-dump-not \"= std::as_const\" \"gimple\" } }"}]}