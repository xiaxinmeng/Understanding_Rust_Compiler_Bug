{"sha": "6015a67d39faf6fe3e0d35629f9ac9e02d4f54e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAxNWE2N2QzOWZhZjZmZTNlMGQzNTYyOWY5YWM5ZTAyZDRmNTRlNQ==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2012-05-14T20:19:30Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2012-05-14T20:19:30Z"}, "message": "re PR target/52607 (v4df __builtin_shuffle with {0,2,1,3} or {1,3,0,2})\n\n2012-05-14  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR target/52607\n\t* config/i386/i386.c (ix86_expand_vec_perm_const): Move code to ...\n\t(canonicalize_perm): ... new function.\n\t(expand_vec_perm_2vperm2f128_vshuf): New function.\n\t(ix86_expand_vec_perm_const_1): Call it.\n\nFrom-SVN: r187479", "tree": {"sha": "08232444cf180fcf4bb31c04ffb7ce0a55bc482f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08232444cf180fcf4bb31c04ffb7ce0a55bc482f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6015a67d39faf6fe3e0d35629f9ac9e02d4f54e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6015a67d39faf6fe3e0d35629f9ac9e02d4f54e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6015a67d39faf6fe3e0d35629f9ac9e02d4f54e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6015a67d39faf6fe3e0d35629f9ac9e02d4f54e5/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33"}], "stats": {"total": 144, "additions": 111, "deletions": 33}, "files": [{"sha": "dc9b9a1617be64f505eb8ac7796749e973d5e4aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6015a67d39faf6fe3e0d35629f9ac9e02d4f54e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6015a67d39faf6fe3e0d35629f9ac9e02d4f54e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6015a67d39faf6fe3e0d35629f9ac9e02d4f54e5", "patch": "@@ -1,3 +1,11 @@\n+2012-05-14  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR target/52607\n+\t* config/i386/i386.c (ix86_expand_vec_perm_const): Move code to ...\n+\t(canonicalize_perm): ... new function.\n+\t(expand_vec_perm_2vperm2f128_vshuf): New function.\n+\t(ix86_expand_vec_perm_const_1): Call it.\n+\n 2012-05-14  Andrew Pinski  <apinski@cavium.com>\n \t    H.J. Lu  <hongjiu.lu@intel.com>\n \t    Jakub Jelinek  <jakub@redhat.com>"}, {"sha": "6cc64fb03388d41eee16e539c34f2739a4847d53", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 103, "deletions": 33, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6015a67d39faf6fe3e0d35629f9ac9e02d4f54e5/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6015a67d39faf6fe3e0d35629f9ac9e02d4f54e5/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6015a67d39faf6fe3e0d35629f9ac9e02d4f54e5", "patch": "@@ -33343,6 +33343,7 @@ struct expand_vec_perm_d\n   bool testing_p;\n };\n \n+static bool canonicalize_perm (struct expand_vec_perm_d *d);\n static bool expand_vec_perm_1 (struct expand_vec_perm_d *d);\n static bool expand_vec_perm_broadcast_1 (struct expand_vec_perm_d *d);\n \n@@ -37400,6 +37401,57 @@ expand_vec_perm_vperm2f128_vblend (struct expand_vec_perm_d *d)\n   return true;\n }\n \n+/* A subroutine of ix86_expand_vec_perm_builtin_1.  Implement a V4DF\n+   permutation using two vperm2f128, followed by a vshufpd insn blending\n+   the two vectors together.  */\n+\n+static bool\n+expand_vec_perm_2vperm2f128_vshuf (struct expand_vec_perm_d *d)\n+{\n+  struct expand_vec_perm_d dfirst, dsecond, dthird;\n+  bool ok;\n+\n+  if (!TARGET_AVX || (d->vmode != V4DFmode))\n+    return false;\n+\n+  if (d->testing_p)\n+    return true;\n+\n+  dfirst = *d;\n+  dsecond = *d;\n+  dthird = *d;\n+\n+  dfirst.perm[0] = (d->perm[0] & ~1);\n+  dfirst.perm[1] = (d->perm[0] & ~1) + 1;\n+  dfirst.perm[2] = (d->perm[2] & ~1);\n+  dfirst.perm[3] = (d->perm[2] & ~1) + 1;\n+  dsecond.perm[0] = (d->perm[1] & ~1);\n+  dsecond.perm[1] = (d->perm[1] & ~1) + 1;\n+  dsecond.perm[2] = (d->perm[3] & ~1);\n+  dsecond.perm[3] = (d->perm[3] & ~1) + 1;\n+  dthird.perm[0] = (d->perm[0] % 2);\n+  dthird.perm[1] = (d->perm[1] % 2) + 4;\n+  dthird.perm[2] = (d->perm[2] % 2) + 2;\n+  dthird.perm[3] = (d->perm[3] % 2) + 6;\n+\n+  dfirst.target = gen_reg_rtx (dfirst.vmode);\n+  dsecond.target = gen_reg_rtx (dsecond.vmode);\n+  dthird.op0 = dfirst.target;\n+  dthird.op1 = dsecond.target;\n+  dthird.one_operand_p = false;\n+\n+  canonicalize_perm (&dfirst);\n+  canonicalize_perm (&dsecond);\n+\n+  ok = expand_vec_perm_1 (&dfirst)\n+       && expand_vec_perm_1 (&dsecond)\n+       && expand_vec_perm_1 (&dthird);\n+\n+  gcc_assert (ok);\n+\n+  return true;\n+}\n+\n /* A subroutine of expand_vec_perm_even_odd_1.  Implement the double-word\n    permutation with two pshufb insns and an ior.  We should have already\n    failed all two instruction sequences.  */\n@@ -38049,6 +38101,9 @@ ix86_expand_vec_perm_const_1 (struct expand_vec_perm_d *d)\n \n   /* Try sequences of three instructions.  */\n \n+  if (expand_vec_perm_2vperm2f128_vshuf (d))\n+    return true;\n+\n   if (expand_vec_perm_pshufb2 (d))\n     return true;\n \n@@ -38086,12 +38141,56 @@ ix86_expand_vec_perm_const_1 (struct expand_vec_perm_d *d)\n   return false;\n }\n \n+/* If a permutation only uses one operand, make it clear. Returns true\n+   if the permutation references both operands.  */\n+\n+static bool\n+canonicalize_perm (struct expand_vec_perm_d *d)\n+{\n+  int i, which, nelt = d->nelt;\n+\n+  for (i = which = 0; i < nelt; ++i)\n+      which |= (d->perm[i] < nelt ? 1 : 2);\n+\n+  d->one_operand_p = true;\n+  switch (which)\n+    {\n+    default:\n+      gcc_unreachable();\n+\n+    case 3:\n+      if (!rtx_equal_p (d->op0, d->op1))\n+        {\n+\t  d->one_operand_p = false;\n+\t  break;\n+        }\n+      /* The elements of PERM do not suggest that only the first operand\n+\t is used, but both operands are identical.  Allow easier matching\n+\t of the permutation by folding the permutation into the single\n+\t input vector.  */\n+      /* FALLTHRU */\n+\n+    case 2:\n+      for (i = 0; i < nelt; ++i)\n+        d->perm[i] &= nelt - 1;\n+      d->op0 = d->op1;\n+      break;\n+\n+    case 1:\n+      d->op1 = d->op0;\n+      break;\n+    }\n+\n+  return (which == 3);\n+}\n+\n bool\n ix86_expand_vec_perm_const (rtx operands[4])\n {\n   struct expand_vec_perm_d d;\n   unsigned char perm[MAX_VECT_LEN];\n-  int i, nelt, which;\n+  int i, nelt;\n+  bool two_args;\n   rtx sel;\n \n   d.target = operands[0];\n@@ -38108,44 +38207,15 @@ ix86_expand_vec_perm_const (rtx operands[4])\n   gcc_assert (XVECLEN (sel, 0) == nelt);\n   gcc_checking_assert (sizeof (d.perm) == sizeof (perm));\n \n-  for (i = which = 0; i < nelt; ++i)\n+  for (i = 0; i < nelt; ++i)\n     {\n       rtx e = XVECEXP (sel, 0, i);\n       int ei = INTVAL (e) & (2 * nelt - 1);\n-\n-      which |= (ei < nelt ? 1 : 2);\n       d.perm[i] = ei;\n       perm[i] = ei;\n     }\n \n-  d.one_operand_p = true;\n-  switch (which)\n-    {\n-    default:\n-      gcc_unreachable();\n-\n-    case 3:\n-      if (!rtx_equal_p (d.op0, d.op1))\n-        {\n-\t  d.one_operand_p = false;\n-\t  break;\n-        }\n-      /* The elements of PERM do not suggest that only the first operand\n-\t is used, but both operands are identical.  Allow easier matching\n-\t of the permutation by folding the permutation into the single\n-\t input vector.  */\n-      /* FALLTHRU */\n-\n-    case 2:\n-      for (i = 0; i < nelt; ++i)\n-        d.perm[i] &= nelt - 1;\n-      d.op0 = d.op1;\n-      break;\n-\n-    case 1:\n-      d.op1 = d.op0;\n-      break;\n-    }\n+  two_args = canonicalize_perm (&d);\n \n   if (ix86_expand_vec_perm_const_1 (&d))\n     return true;\n@@ -38154,7 +38224,7 @@ ix86_expand_vec_perm_const (rtx operands[4])\n      same, the above tried to expand with one_operand_p and flattened selector.\n      If that didn't work, retry without one_operand_p; we succeeded with that\n      during testing.  */\n-  if (which == 3 && d.one_operand_p)\n+  if (two_args && d.one_operand_p)\n     {\n       d.one_operand_p = false;\n       memcpy (d.perm, perm, sizeof (perm));"}]}