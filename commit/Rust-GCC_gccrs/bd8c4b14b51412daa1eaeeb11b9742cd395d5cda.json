{"sha": "bd8c4b14b51412daa1eaeeb11b9742cd395d5cda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ4YzRiMTRiNTE0MTJkYWExZWFlZWIxMWI5NzQyY2QzOTVkNWNkYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1996-12-10T20:56:07Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1996-12-10T20:56:07Z"}, "message": "Treat ZERO_EXTEND like SIGN_EXTEND in emit_unop_insn\n\nFrom-SVN: r13262", "tree": {"sha": "18e90f8bfaed097c883104a8f4e1ad3678875f10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18e90f8bfaed097c883104a8f4e1ad3678875f10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd8c4b14b51412daa1eaeeb11b9742cd395d5cda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd8c4b14b51412daa1eaeeb11b9742cd395d5cda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd8c4b14b51412daa1eaeeb11b9742cd395d5cda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd8c4b14b51412daa1eaeeb11b9742cd395d5cda/comments", "author": null, "committer": null, "parents": [{"sha": "8e90e2734ed1211709aa2aaf828b7bad1a91eaaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e90e2734ed1211709aa2aaf828b7bad1a91eaaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e90e2734ed1211709aa2aaf828b7bad1a91eaaf"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "22a9d2a720fc4464bf76168f4d52dcce31f7b804", "filename": "gcc/optabs.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd8c4b14b51412daa1eaeeb11b9742cd395d5cda/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd8c4b14b51412daa1eaeeb11b9742cd395d5cda/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=bd8c4b14b51412daa1eaeeb11b9742cd395d5cda", "patch": "@@ -2388,9 +2388,10 @@ emit_unop_insn (icode, target, op0, code)\n \n   op0 = protect_from_queue (op0, 0);\n \n-  /* Sign extension from memory is often done specially on RISC\n-     machines, so forcing into a register here can pessimize code.  */\n-  if (flag_force_mem && code != SIGN_EXTEND)\n+  /* Sign and zero extension from memory is often done specially on\n+     RISC machines, so forcing into a register here can pessimize\n+     code.  */\n+  if (flag_force_mem && code != SIGN_EXTEND && code != ZERO_EXTEND)\n     op0 = force_not_mem (op0);\n \n   /* Now, if insn does not accept our operands, put them into pseudos.  */"}]}