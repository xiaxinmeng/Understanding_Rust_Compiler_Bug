{"sha": "b56e978833b09ba47ebc4ebdace007164b493266", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU2ZTk3ODgzM2IwOWJhNDdlYmM0ZWJkYWNlMDA3MTY0YjQ5MzI2Ng==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2013-09-25T08:58:57Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2013-09-25T08:58:57Z"}, "message": "re PR sanitizer/58413 (ubsan constant folding)\n\n\tPR sanitizer/58413\nc-family/\n\t* c-ubsan.c (ubsan_instrument_shift): Don't instrument\n\tan expression if we can prove it is correct.\n\t(ubsan_instrument_division): Likewise.  Remove unnecessary\n\tcheck.\ntestsuite/\n\t* c-c++-common/ubsan/shift-5.c: New test.\n\t* c-c++-common/ubsan/shift-6.c: New test.\n\t* c-c++-common/ubsan/div-by-zero-5.c: New test.\n\t* gcc.dg/ubsan/c-shift-1.c: New test.\n\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r202886", "tree": {"sha": "083cf293ac56951841b59e2db56b5176d154c73a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/083cf293ac56951841b59e2db56b5176d154c73a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b56e978833b09ba47ebc4ebdace007164b493266", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b56e978833b09ba47ebc4ebdace007164b493266", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b56e978833b09ba47ebc4ebdace007164b493266", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b56e978833b09ba47ebc4ebdace007164b493266/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "550dfe7f28a031f5ffe59c423c7790d219414ff6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/550dfe7f28a031f5ffe59c423c7790d219414ff6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/550dfe7f28a031f5ffe59c423c7790d219414ff6"}], "stats": {"total": 124, "additions": 116, "deletions": 8}, "files": [{"sha": "c7a8c7872cc5e5870b9fd6e2e8f653e0e2fd6528", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56e978833b09ba47ebc4ebdace007164b493266/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56e978833b09ba47ebc4ebdace007164b493266/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b56e978833b09ba47ebc4ebdace007164b493266", "patch": "@@ -1,3 +1,12 @@\n+2013-09-25  Marek Polacek  <polacek@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/58413\n+\t* c-ubsan.c (ubsan_instrument_shift): Don't instrument\n+\tan expression if we can prove it is correct.\n+\t(ubsan_instrument_division): Likewise.  Remove unnecessary\n+\tcheck.\n+\n 2013-09-18  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/58411"}, {"sha": "0bfc660cdd5b7de72cfe0f4965efd41487ab0b2b", "filename": "gcc/c-family/c-ubsan.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56e978833b09ba47ebc4ebdace007164b493266/gcc%2Fc-family%2Fc-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56e978833b09ba47ebc4ebdace007164b493266/gcc%2Fc-family%2Fc-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ubsan.c?ref=b56e978833b09ba47ebc4ebdace007164b493266", "patch": "@@ -51,14 +51,6 @@ ubsan_instrument_division (location_t loc, tree op0, tree op1)\n   if (TREE_CODE (type) != INTEGER_TYPE)\n     return NULL_TREE;\n \n-  /* If we *know* that the divisor is not -1 or 0, we don't have to\n-     instrument this expression.\n-     ??? We could use decl_constant_value to cover up more cases.  */\n-  if (TREE_CODE (op1) == INTEGER_CST\n-      && integer_nonzerop (op1)\n-      && !integer_minus_onep (op1))\n-    return NULL_TREE;\n-\n   t = fold_build2 (EQ_EXPR, boolean_type_node,\n \t\t    op1, build_int_cst (type, 0));\n \n@@ -74,6 +66,11 @@ ubsan_instrument_division (location_t loc, tree op0, tree op1)\n       t = fold_build2 (TRUTH_OR_EXPR, boolean_type_node, t, x);\n     }\n \n+  /* If the condition was folded to 0, no need to instrument\n+     this expression.  */\n+  if (integer_zerop (t))\n+    return NULL_TREE;\n+\n   /* In case we have a SAVE_EXPR in a conditional context, we need to\n      make sure it gets evaluated before the condition.  */\n   t = fold_build2 (COMPOUND_EXPR, TREE_TYPE (t), op0, t);\n@@ -138,6 +135,11 @@ ubsan_instrument_shift (location_t loc, enum tree_code code,\n       tt = fold_build2 (TRUTH_OR_EXPR, boolean_type_node, x, tt);\n     }\n \n+  /* If the condition was folded to 0, no need to instrument\n+     this expression.  */\n+  if (integer_zerop (t) && (tt == NULL_TREE || integer_zerop (tt)))\n+    return NULL_TREE;\n+\n   /* In case we have a SAVE_EXPR in a conditional context, we need to\n      make sure it gets evaluated before the condition.  */\n   t = fold_build2 (COMPOUND_EXPR, TREE_TYPE (t), op0, t);"}, {"sha": "09644d2103746d1c61fbf562c3ca7305e116d363", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56e978833b09ba47ebc4ebdace007164b493266/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56e978833b09ba47ebc4ebdace007164b493266/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b56e978833b09ba47ebc4ebdace007164b493266", "patch": "@@ -1,3 +1,11 @@\n+2013-09-25  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR sanitizer/58413\n+\t* c-c++-common/ubsan/shift-5.c: New test.\n+\t* c-c++-common/ubsan/shift-6.c: New test.\n+\t* c-c++-common/ubsan/div-by-zero-5.c: New test.\n+\t* gcc.dg/ubsan/c-shift-1.c: New test.\n+\n 2013-09-25  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/58516"}, {"sha": "7a28bacd14ba743cf070fa1c8e7f3f1f73bad753", "filename": "gcc/testsuite/c-c++-common/ubsan/div-by-zero-5.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56e978833b09ba47ebc4ebdace007164b493266/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56e978833b09ba47ebc4ebdace007164b493266/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-5.c?ref=b56e978833b09ba47ebc4ebdace007164b493266", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile} */\n+/* { dg-options \"-fsanitize=integer-divide-by-zero\" } */\n+\n+void\n+foo (void)\n+{\n+  int A[-2 / -1] = {};\n+}"}, {"sha": "6f9c52a72881c3aff270377037102c5b13029a84", "filename": "gcc/testsuite/c-c++-common/ubsan/shift-5.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56e978833b09ba47ebc4ebdace007164b493266/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fshift-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56e978833b09ba47ebc4ebdace007164b493266/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fshift-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fshift-5.c?ref=b56e978833b09ba47ebc4ebdace007164b493266", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize=shift -w\" } */\n+/* { dg-shouldfail \"ubsan\" } */\n+\n+int x;\n+int\n+foo (void)\n+{\n+  /* None of the following should pass.  */\n+  switch (x)\n+    {\n+    case 1 >> -1:\n+/* { dg-error \"case label does not reduce to an integer constant\" \"\" {target c } 12 } */\n+/* { dg-error \"is not a constant expression\" \"\" { target c++ } 12 } */\n+    case -1 >> -1:\n+/* { dg-error \"case label does not reduce to an integer constant\" \"\" {target c } 15 } */\n+/* { dg-error \"is not a constant expression\" \"\" { target c++ } 15 } */\n+    case 1 << -1:\n+/* { dg-error \"case label does not reduce to an integer constant\" \"\" {target c } 18 } */\n+/* { dg-error \"is not a constant expression\" \"\" { target c++ } 18 } */\n+    case -1 << -1:\n+/* { dg-error \"case label does not reduce to an integer constant\" \"\" {target c } 21 } */\n+/* { dg-error \"is not a constant expression\" \"\" { target c++ } 21 } */\n+    case -1 >> 200:\n+/* { dg-error \"case label does not reduce to an integer constant\" \"\" {target c } 24 } */\n+/* { dg-error \"is not a constant expression\" \"\" { target c++ } 24 } */\n+    case 1 << 200:\n+/* { dg-error \"case label does not reduce to an integer constant\" \"\" {target c } 27 } */\n+/* { dg-error \"is not a constant expression\" \"\" { target c++ } 27 } */\n+      return 1;\n+    }\n+  return 0;\n+}"}, {"sha": "a0e2e20acc1bde49cd26cbde38174424ec2598a4", "filename": "gcc/testsuite/c-c++-common/ubsan/shift-6.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56e978833b09ba47ebc4ebdace007164b493266/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fshift-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56e978833b09ba47ebc4ebdace007164b493266/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fshift-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fshift-6.c?ref=b56e978833b09ba47ebc4ebdace007164b493266", "patch": "@@ -0,0 +1,30 @@\n+/* PR sanitizer/58413 */\n+/* { dg-do run { target int32plus } } */\n+/* { dg-options \"-fsanitize=shift -w\" } */\n+\n+int x = 7;\n+int\n+main (void)\n+{\n+  /* All of the following should pass.  */\n+  int A[128 >> 5] = {};\n+  int B[128 << 5] = {};\n+\n+  static int e =\n+    ((int)\n+     (0x00000000 | ((31 & ((1 << (4)) - 1)) << (((15) + 6) + 4)) |\n+      ((0) << ((15) + 6)) | ((0) << (15))));\n+\n+  if (e != 503316480)\n+    __builtin_abort ();\n+\n+  switch (x)\n+    {\n+    case 1 >> 4:\n+    case 1 << 4:\n+    case 128 << (4 + 1):\n+    case 128 >> (4 + 1):\n+      return 1;\n+    }\n+  return 0;\n+}"}, {"sha": "61b901053644fa60cc6fca0135aeb3a1cd68d5f5", "filename": "gcc/testsuite/gcc.dg/ubsan/c-shift-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56e978833b09ba47ebc4ebdace007164b493266/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fc-shift-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56e978833b09ba47ebc4ebdace007164b493266/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fc-shift-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fc-shift-1.c?ref=b56e978833b09ba47ebc4ebdace007164b493266", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile} */\n+/* { dg-options \"-fsanitize=shift -w\" } */\n+/* { dg-shouldfail \"ubsan\" } */\n+\n+int x;\n+int\n+main (void)\n+{\n+  /* None of the following should pass.  */\n+  int A[1 >> -1] = {};    /* { dg-error \"variable-sized object may not be initialized\" } */\n+  int B[-1 >> -1] = {};   /* { dg-error \"variable-sized object may not be initialized\" } */\n+  int D[1 << -1] = {};    /* { dg-error \"variable-sized object may not be initialized\" } */\n+  int E[-1 << -1] = {};   /* { dg-error \"variable-sized object may not be initialized\" } */\n+  int F[-1 >> 200] = {};  /* { dg-error \"variable-sized object may not be initialized\" } */\n+  int G[1 << 200] = {};   /* { dg-error \"variable-sized object may not be initialized\" } */\n+\n+  return 0;\n+}"}]}