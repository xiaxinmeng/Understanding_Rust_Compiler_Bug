{"sha": "c587c0a9c8cbe80a64461fe9cab0a23d3ff35211", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU4N2MwYTljOGNiZTgwYTY0NDYxZmU5Y2FiMGEyM2QzZmYzNTIxMQ==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2017-12-21T16:32:25Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2017-12-21T16:32:25Z"}, "message": "[Patch combine] Don't create ZERO_EXTEND from subregs unless we have a scalar int mode\n\ngcc/\n\n\t* combine.c (simplify_set): Do not transform subregs to zero_extends\n\tif the destination is not a scalar int mode.\n\nFrom-SVN: r255945", "tree": {"sha": "2d4372af559ea44da1d6393984a83606e1b2bf64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d4372af559ea44da1d6393984a83606e1b2bf64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c587c0a9c8cbe80a64461fe9cab0a23d3ff35211", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c587c0a9c8cbe80a64461fe9cab0a23d3ff35211", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c587c0a9c8cbe80a64461fe9cab0a23d3ff35211", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c587c0a9c8cbe80a64461fe9cab0a23d3ff35211/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6ffc0c0cf5ada5d74da5c0b68fade4b5ec0e944a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ffc0c0cf5ada5d74da5c0b68fade4b5ec0e944a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ffc0c0cf5ada5d74da5c0b68fade4b5ec0e944a"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "c6dc455f319b7b2e39e9d244c3ec2c0699b6aebb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c587c0a9c8cbe80a64461fe9cab0a23d3ff35211/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c587c0a9c8cbe80a64461fe9cab0a23d3ff35211/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c587c0a9c8cbe80a64461fe9cab0a23d3ff35211", "patch": "@@ -1,3 +1,8 @@\n+2017-12-21  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* combine.c (simplify_set): Do not transform subregs to zero_extends\n+\tif the destination is not a scalar int mode.\n+\n 2017-12-21  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR c++/82872"}, {"sha": "31e6a4f68254fab551300252688a52d8c3dcaaa4", "filename": "gcc/combine.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c587c0a9c8cbe80a64461fe9cab0a23d3ff35211/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c587c0a9c8cbe80a64461fe9cab0a23d3ff35211/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=c587c0a9c8cbe80a64461fe9cab0a23d3ff35211", "patch": "@@ -6967,12 +6967,13 @@ simplify_set (rtx x)\n   /* If we have (set FOO (subreg:M (mem:N BAR) 0)) with M wider than N, this\n      would require a paradoxical subreg.  Replace the subreg with a\n      zero_extend to avoid the reload that would otherwise be required.\n-     Don't do this for vector modes, as the transformation is incorrect.  */\n+     Don't do this unless we have a scalar integer mode, otherwise the\n+     transformation is incorrect.  */\n \n   enum rtx_code extend_op;\n   if (paradoxical_subreg_p (src)\n       && MEM_P (SUBREG_REG (src))\n-      && !VECTOR_MODE_P (GET_MODE (src))\n+      && SCALAR_INT_MODE_P (GET_MODE (src))\n       && (extend_op = load_extend_op (GET_MODE (SUBREG_REG (src)))) != UNKNOWN)\n     {\n       SUBST (SET_SRC (x),"}]}