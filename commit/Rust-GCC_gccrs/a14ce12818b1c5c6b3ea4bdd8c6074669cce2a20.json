{"sha": "a14ce12818b1c5c6b3ea4bdd8c6074669cce2a20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE0Y2UxMjgxOGIxYzVjNmIzZWE0YmRkOGM2MDc0NjY5Y2NlMmEyMA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-10-11T12:20:09Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-10-11T12:20:09Z"}, "message": "re PR fortran/40440 (Automatic deallocation component of DT function return value)\n\n2009-10-11  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/40440\n\t* decl.c (hash_value): New function.\n\t(gfc_match_derived_decl): Call it.\n\n2009-10-11  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/40440\n\t* gfortran.dg/class_4a.f03: New test with class_4b,c and d.f03.\n\t* gfortran.dg/class_4b.f03: As above.\n\t* gfortran.dg/class_4c.f03: As above.\n\t* gfortran.dg/class_4d.f03: As above.\n\nFrom-SVN: r152640", "tree": {"sha": "ab7a8a6b559e298513ca0e5ebda70f6f969e436d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab7a8a6b559e298513ca0e5ebda70f6f969e436d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a14ce12818b1c5c6b3ea4bdd8c6074669cce2a20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a14ce12818b1c5c6b3ea4bdd8c6074669cce2a20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a14ce12818b1c5c6b3ea4bdd8c6074669cce2a20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a14ce12818b1c5c6b3ea4bdd8c6074669cce2a20/comments", "author": null, "committer": null, "parents": [{"sha": "b89127e20fe4a0e0c2ab526db0301337d4303cd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b89127e20fe4a0e0c2ab526db0301337d4303cd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b89127e20fe4a0e0c2ab526db0301337d4303cd2"}], "stats": {"total": 130, "additions": 126, "deletions": 4}, "files": [{"sha": "9058926d96dd23f2e596eb3217bdbcbe250989c2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14ce12818b1c5c6b3ea4bdd8c6074669cce2a20/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14ce12818b1c5c6b3ea4bdd8c6074669cce2a20/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a14ce12818b1c5c6b3ea4bdd8c6074669cce2a20", "patch": "@@ -1,3 +1,9 @@\n+2009-10-11  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/40440\n+\t* decl.c (hash_value): New function.\n+\t(gfc_match_derived_decl): Call it.\n+\n 2009-10-09  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/41585"}, {"sha": "69449a32ce989ee6b87800c92f434ee13adbaa01", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14ce12818b1c5c6b3ea4bdd8c6074669cce2a20/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14ce12818b1c5c6b3ea4bdd8c6074669cce2a20/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=a14ce12818b1c5c6b3ea4bdd8c6074669cce2a20", "patch": "@@ -6747,8 +6747,44 @@ gfc_get_type_attr_spec (symbol_attribute *attr, char *name)\n }\n \n \n-/* Counter for assigning a unique vindex number to each derived type.  */\n-static int vindex_counter = 0;\n+/* Assign a hash value for a derived type. The algorithm is that of\n+   SDBM. The hashed string is '[module_name #] derived_name'.  */\n+static unsigned int\n+hash_value (gfc_symbol *sym)\n+{\n+  unsigned int hash = 0;\n+  const char *c;\n+  int i, len;\n+\n+  /* Hash of the module or procedure name.  */\n+  if (sym->module != NULL)\n+    c = sym->module;\n+  else if (sym->ns && sym->ns->proc_name\n+\t     && sym->ns->proc_name->attr.flavor == FL_MODULE)\n+    c = sym->ns->proc_name->name;\n+  else\n+    c = NULL;\n+\n+  if (c)\n+    { \n+      len = strlen (c);\n+      for (i = 0; i < len; i++, c++)\n+\thash =  (hash << 6) + (hash << 16) - hash + (*c);\n+\n+      /* Disambiguate between 'a' in 'aa' and 'aa' in 'a'.  */ \n+      hash =  (hash << 6) + (hash << 16) - hash + '#';\n+    }\n+\n+  /* Hash of the derived type name.  */\n+  len = strlen (sym->name);\n+  c = sym->name;\n+  for (i = 0; i < len; i++, c++)\n+    hash = (hash << 6) + (hash << 16) - hash + (*c);\n+\n+  /* Return the hash but take the modulus for the sake of module read,\n+     even though this slightly increases the chance of collision.  */\n+  return (hash % 100000000);\n+}\n \n \n /* Match the beginning of a derived type declaration.  If a type name\n@@ -6872,8 +6908,8 @@ gfc_match_derived_decl (void)\n     }\n \n   if (!sym->vindex)\n-    /* Set the vindex for this type and increment the counter.  */\n-    sym->vindex = ++vindex_counter;\n+    /* Set the vindex for this type.  */\n+    sym->vindex = hash_value (sym);\n \n   /* Take over the ABSTRACT attribute.  */\n   sym->attr.abstract = attr.abstract;"}, {"sha": "ce4b8e6ea6d91934da0cfdb327772fb9f069382d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14ce12818b1c5c6b3ea4bdd8c6074669cce2a20/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14ce12818b1c5c6b3ea4bdd8c6074669cce2a20/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a14ce12818b1c5c6b3ea4bdd8c6074669cce2a20", "patch": "@@ -1,3 +1,11 @@\n+2009-10-11  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/40440\n+\t* gfortran.dg/class_4a.f03: New test with class_4b,c and d.f03.\n+\t* gfortran.dg/class_4b.f03: As above.\n+\t* gfortran.dg/class_4c.f03: As above.\n+\t* gfortran.dg/class_4d.f03: As above.\n+\n 2009-10-11  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/41555"}, {"sha": "3cf0b7abf519d308f555d7f6b45a656283c18461", "filename": "gcc/testsuite/gfortran.dg/class_4a.f03", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14ce12818b1c5c6b3ea4bdd8c6074669cce2a20/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_4a.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14ce12818b1c5c6b3ea4bdd8c6074669cce2a20/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_4a.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_4a.f03?ref=a14ce12818b1c5c6b3ea4bdd8c6074669cce2a20", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do compile }\n+!\n+! Test the fix for PR41583, in which the different source files\n+! would generate the same 'vindex' for different class declared\n+! types.\n+!\n+! The test comprises class_4a, class_4b class_4c and class_4d.f03\n+\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n+!\n+module m\n+  type t\n+  end type t\n+end module m"}, {"sha": "4658b8cf3f5e12f1ebcc5e20891e7681e14b2b52", "filename": "gcc/testsuite/gfortran.dg/class_4b.f03", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14ce12818b1c5c6b3ea4bdd8c6074669cce2a20/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_4b.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14ce12818b1c5c6b3ea4bdd8c6074669cce2a20/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_4b.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_4b.f03?ref=a14ce12818b1c5c6b3ea4bdd8c6074669cce2a20", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+!\n+! Test the fix for PR41583, in which the different source files\n+! would generate the same 'vindex' for different class declared\n+! types.\n+!\n+! The test comprises class_4a, class_4b class_4c and class_4d.f03\n+!\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n+!\n+module m2\n+  use m\n+  type, extends(t) :: t2\n+  end type t2\n+end module m2"}, {"sha": "7909c0eeda0b3058636ca99f523b747af64cb26a", "filename": "gcc/testsuite/gfortran.dg/class_4c.f03", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14ce12818b1c5c6b3ea4bdd8c6074669cce2a20/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_4c.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14ce12818b1c5c6b3ea4bdd8c6074669cce2a20/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_4c.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_4c.f03?ref=a14ce12818b1c5c6b3ea4bdd8c6074669cce2a20", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR41583, in which the different source files\n+! would generate the same 'vindex' for different class declared\n+! types.\n+!\n+! The test comprises class_4a, class_4b class_4c and class_4d.f03\n+!\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n+!\n+  use m\n+  use m2\n+  type,extends(t) :: t3\n+  end type t3\n+\n+  integer :: i\n+  class(t), allocatable :: a\n+  allocate(t3 :: a)\n+  select type(a)\n+    type is(t)\n+      i = 1\n+    type is(t2)\n+      i = 2\n+    type is(t3)\n+      i = 3\n+  end select\n+  print *, i\n+end"}, {"sha": "7a962aa01b939b59cc08f02c97cad78f76b064df", "filename": "gcc/testsuite/gfortran.dg/class_4d.f03", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14ce12818b1c5c6b3ea4bdd8c6074669cce2a20/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_4d.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14ce12818b1c5c6b3ea4bdd8c6074669cce2a20/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_4d.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_4d.f03?ref=a14ce12818b1c5c6b3ea4bdd8c6074669cce2a20", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+!\n+! Test the fix for PR41583, in which the different source files\n+! would generate the same 'vindex' for different class declared\n+! types.\n+!\n+! This file does nothing other than clean up the modules.\n+!\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n+!\n+module m\n+  type t\n+  end type t\n+end module m\n+! { dg-final { cleanup-modules \"m m2\" } }"}]}