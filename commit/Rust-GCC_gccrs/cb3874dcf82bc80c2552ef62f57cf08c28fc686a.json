{"sha": "cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IzODc0ZGNmODJiYzgwYzI1NTJlZjYyZjU3Y2YwOGMyOGZjNjg2YQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-08-10T09:11:05Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-08-27T11:29:43Z"}, "message": "vec: add exact argument for various grow functions.\n\ngcc/ada/ChangeLog:\n\n\t* gcc-interface/trans.c (gigi): Set exact argument of a vector\n\tgrowth function to true.\n\t(Attribute_to_gnu): Likewise.\n\ngcc/ChangeLog:\n\n\t* alias.c (init_alias_analysis): Set exact argument of a vector\n\tgrowth function to true.\n\t* calls.c (internal_arg_pointer_based_exp_scan): Likewise.\n\t* cfgbuild.c (find_many_sub_basic_blocks): Likewise.\n\t* cfgexpand.c (expand_asm_stmt): Likewise.\n\t* cfgrtl.c (rtl_create_basic_block): Likewise.\n\t* combine.c (combine_split_insns): Likewise.\n\t(combine_instructions): Likewise.\n\t* config/aarch64/aarch64-sve-builtins.cc (function_expander::add_output_operand): Likewise.\n\t(function_expander::add_input_operand): Likewise.\n\t(function_expander::add_integer_operand): Likewise.\n\t(function_expander::add_address_operand): Likewise.\n\t(function_expander::add_fixed_operand): Likewise.\n\t* df-core.c (df_worklist_dataflow_doublequeue): Likewise.\n\t* dwarf2cfi.c (update_row_reg_save): Likewise.\n\t* early-remat.c (early_remat::init_block_info): Likewise.\n\t(early_remat::finalize_candidate_indices): Likewise.\n\t* except.c (sjlj_build_landing_pads): Likewise.\n\t* final.c (compute_alignments): Likewise.\n\t(grow_label_align): Likewise.\n\t* function.c (temp_slots_at_level): Likewise.\n\t* fwprop.c (build_single_def_use_links): Likewise.\n\t(update_uses): Likewise.\n\t* gcc.c (insert_wrapper): Likewise.\n\t* genautomata.c (create_state_ainsn_table): Likewise.\n\t(add_vect): Likewise.\n\t(output_dead_lock_vect): Likewise.\n\t* genmatch.c (capture_info::capture_info): Likewise.\n\t(parser::finish_match_operand): Likewise.\n\t* genrecog.c (optimize_subroutine_group): Likewise.\n\t(merge_pattern_info::merge_pattern_info): Likewise.\n\t(merge_into_decision): Likewise.\n\t(print_subroutine_start): Likewise.\n\t(main): Likewise.\n\t* gimple-loop-versioning.cc (loop_versioning::loop_versioning): Likewise.\n\t* gimple.c (gimple_set_bb): Likewise.\n\t* graphite-isl-ast-to-gimple.c (translate_isl_ast_node_user): Likewise.\n\t* haifa-sched.c (sched_extend_luids): Likewise.\n\t(extend_h_i_d): Likewise.\n\t* insn-addr.h (insn_addresses_new): Likewise.\n\t* ipa-cp.c (gather_context_independent_values): Likewise.\n\t(find_more_contexts_for_caller_subset): Likewise.\n\t* ipa-devirt.c (final_warning_record::grow_type_warnings): Likewise.\n\t(ipa_odr_read_section): Likewise.\n\t* ipa-fnsummary.c (evaluate_properties_for_edge): Likewise.\n\t(ipa_fn_summary_t::duplicate): Likewise.\n\t(analyze_function_body): Likewise.\n\t(ipa_merge_fn_summary_after_inlining): Likewise.\n\t(read_ipa_call_summary): Likewise.\n\t* ipa-icf.c (sem_function::bb_dict_test): Likewise.\n\t* ipa-prop.c (ipa_alloc_node_params): Likewise.\n\t(parm_bb_aa_status_for_bb): Likewise.\n\t(ipa_compute_jump_functions_for_edge): Likewise.\n\t(ipa_analyze_node): Likewise.\n\t(update_jump_functions_after_inlining): Likewise.\n\t(ipa_read_edge_info): Likewise.\n\t(read_ipcp_transformation_info): Likewise.\n\t(ipcp_transform_function): Likewise.\n\t* ipa-reference.c (ipa_reference_write_optimization_summary): Likewise.\n\t* ipa-split.c (execute_split_functions): Likewise.\n\t* ira.c (find_moveable_pseudos): Likewise.\n\t* lower-subreg.c (decompose_multiword_subregs): Likewise.\n\t* lto-streamer-in.c (input_eh_regions): Likewise.\n\t(input_cfg): Likewise.\n\t(input_struct_function_base): Likewise.\n\t(input_function): Likewise.\n\t* modulo-sched.c (set_node_sched_params): Likewise.\n\t(extend_node_sched_params): Likewise.\n\t(schedule_reg_moves): Likewise.\n\t* omp-general.c (omp_construct_simd_compare): Likewise.\n\t* passes.c (pass_manager::create_pass_tab): Likewise.\n\t(enable_disable_pass): Likewise.\n\t* predict.c (determine_unlikely_bbs): Likewise.\n\t* profile.c (compute_branch_probabilities): Likewise.\n\t* read-rtl-function.c (function_reader::parse_block): Likewise.\n\t* read-rtl.c (rtx_reader::read_rtx_code): Likewise.\n\t* reg-stack.c (stack_regs_mentioned): Likewise.\n\t* regrename.c (regrename_init): Likewise.\n\t* rtlanal.c (T>::add_single_to_queue): Likewise.\n\t* sched-deps.c (init_deps_data_vector): Likewise.\n\t* sel-sched-ir.c (sel_extend_global_bb_info): Likewise.\n\t(extend_region_bb_info): Likewise.\n\t(extend_insn_data): Likewise.\n\t* symtab.c (symtab_node::create_reference): Likewise.\n\t* tracer.c (tail_duplicate): Likewise.\n\t* trans-mem.c (tm_region_init): Likewise.\n\t(get_bb_regions_instrumented): Likewise.\n\t* tree-cfg.c (init_empty_tree_cfg_for_function): Likewise.\n\t(build_gimple_cfg): Likewise.\n\t(create_bb): Likewise.\n\t(move_block_to_fn): Likewise.\n\t* tree-complex.c (tree_lower_complex): Likewise.\n\t* tree-if-conv.c (predicate_rhs_code): Likewise.\n\t* tree-inline.c (copy_bb): Likewise.\n\t* tree-into-ssa.c (get_ssa_name_ann): Likewise.\n\t(mark_phi_for_rewrite): Likewise.\n\t* tree-object-size.c (compute_builtin_object_size): Likewise.\n\t(init_object_sizes): Likewise.\n\t* tree-predcom.c (initialize_root_vars_store_elim_1): Likewise.\n\t(initialize_root_vars_store_elim_2): Likewise.\n\t(prepare_initializers_chain_store_elim): Likewise.\n\t* tree-ssa-address.c (addr_for_mem_ref): Likewise.\n\t(multiplier_allowed_in_address_p): Likewise.\n\t* tree-ssa-coalesce.c (ssa_conflicts_new): Likewise.\n\t* tree-ssa-forwprop.c (simplify_vector_constructor): Likewise.\n\t* tree-ssa-loop-ivopts.c (addr_offset_valid_p): Likewise.\n\t(get_address_cost_ainc): Likewise.\n\t* tree-ssa-loop-niter.c (discover_iteration_bound_by_body_walk): Likewise.\n\t* tree-ssa-pre.c (add_to_value): Likewise.\n\t(phi_translate_1): Likewise.\n\t(do_pre_regular_insertion): Likewise.\n\t(do_pre_partial_partial_insertion): Likewise.\n\t(init_pre): Likewise.\n\t* tree-ssa-propagate.c (ssa_prop_init): Likewise.\n\t(update_call_from_tree): Likewise.\n\t* tree-ssa-reassoc.c (optimize_range_tests_cmp_bitwise): Likewise.\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Likewise.\n\t(vn_reference_lookup_pieces): Likewise.\n\t(eliminate_dom_walker::eliminate_push_avail): Likewise.\n\t* tree-ssa-strlen.c (set_strinfo): Likewise.\n\t(get_stridx_plus_constant): Likewise.\n\t(zero_length_string): Likewise.\n\t(find_equal_ptrs): Likewise.\n\t(printf_strlen_execute): Likewise.\n\t* tree-ssa-threadedge.c (set_ssa_name_value): Likewise.\n\t* tree-ssanames.c (make_ssa_name_fn): Likewise.\n\t* tree-streamer-in.c (streamer_read_tree_bitfields): Likewise.\n\t* tree-vect-loop.c (vect_record_loop_mask): Likewise.\n\t(vect_get_loop_mask): Likewise.\n\t(vect_record_loop_len): Likewise.\n\t(vect_get_loop_len): Likewise.\n\t* tree-vect-patterns.c (vect_recog_mask_conversion_pattern): Likewise.\n\t* tree-vect-slp.c (vect_slp_convert_to_external): Likewise.\n\t(vect_bb_slp_scalar_cost): Likewise.\n\t(vect_bb_vectorization_profitable_p): Likewise.\n\t(vectorizable_slp_permutation): Likewise.\n\t* tree-vect-stmts.c (vectorizable_call): Likewise.\n\t(vectorizable_simd_clone_call): Likewise.\n\t(scan_store_can_perm_p): Likewise.\n\t(vectorizable_store): Likewise.\n\t* expr.c: Likewise.\n\t* vec.c (test_safe_grow_cleared): Likewise.\n\t* vec.h (vec_safe_grow): Likewise.\n\t(vec_safe_grow_cleared): Likewise.\n\t(vl_ptr>::safe_grow): Likewise.\n\t(vl_ptr>::safe_grow_cleared): Likewise.\n\t* config/c6x/c6x.c (insn_set_clock): Likewise.\n\ngcc/c/ChangeLog:\n\n\t* gimple-parser.c (c_parser_gimple_compound_statement): Set exact argument of a vector\n\tgrowth function to true.\n\ngcc/cp/ChangeLog:\n\n\t* class.c (build_vtbl_initializer): Set exact argument of a vector\n\tgrowth function to true.\n\t* constraint.cc (get_mapped_args): Likewise.\n\t* decl.c (cp_maybe_mangle_decomp): Likewise.\n\t(cp_finish_decomp): Likewise.\n\t* parser.c (cp_parser_omp_for_loop): Likewise.\n\t* pt.c (canonical_type_parameter): Likewise.\n\t* rtti.c (get_pseudo_ti_init): Likewise.\n\ngcc/fortran/ChangeLog:\n\n\t* trans-openmp.c (gfc_trans_omp_do): Set exact argument of a vector\n\tgrowth function to true.\n\ngcc/lto/ChangeLog:\n\n\t* lto-common.c (lto_file_finalize): Set exact argument of a vector\n\tgrowth function to true.", "tree": {"sha": "22e4e546c3556fd9bb827afecb13afbf51ecb519", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22e4e546c3556fd9bb827afecb13afbf51ecb519"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ceb3b8d8f6dd088f3efd590aae9e54a265e5b07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ceb3b8d8f6dd088f3efd590aae9e54a265e5b07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ceb3b8d8f6dd088f3efd590aae9e54a265e5b07"}], "stats": {"total": 434, "additions": 222, "deletions": 212}, "files": [{"sha": "e3d71bca40f0b97a4fe486cbaf0508d6b2ae9e7a", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -624,7 +624,7 @@ gigi (Node_Id gnat_root,\n       constructor_elt *elt;\n \n       fdesc_type_node = make_node (RECORD_TYPE);\n-      vec_safe_grow (null_vec, TARGET_VTABLE_USES_DESCRIPTORS);\n+      vec_safe_grow (null_vec, TARGET_VTABLE_USES_DESCRIPTORS, true);\n       elt = (null_vec->address () + TARGET_VTABLE_USES_DESCRIPTORS - 1);\n \n       for (j = 0; j < TARGET_VTABLE_USES_DESCRIPTORS; j++)\n@@ -1747,7 +1747,7 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \t      gnu_result = build1 (INDIRECT_REF, gnu_result_type, gnu_result);\n \t    }\n \n-\t  vec_safe_grow (gnu_vec, TARGET_VTABLE_USES_DESCRIPTORS);\n+\t  vec_safe_grow (gnu_vec, TARGET_VTABLE_USES_DESCRIPTORS, true);\n \t  elt = (gnu_vec->address () + TARGET_VTABLE_USES_DESCRIPTORS - 1);\n \t  for (gnu_field = TYPE_FIELDS (gnu_result_type), i = 0;\n \t       i < TARGET_VTABLE_USES_DESCRIPTORS;"}, {"sha": "df85f07ee9acfd8fdfb3a65229afc4bc1bde38b0", "filename": "gcc/alias.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -3349,7 +3349,8 @@ init_alias_analysis (void)\n \n   timevar_push (TV_ALIAS_ANALYSIS);\n \n-  vec_safe_grow_cleared (reg_known_value, maxreg - FIRST_PSEUDO_REGISTER);\n+  vec_safe_grow_cleared (reg_known_value, maxreg - FIRST_PSEUDO_REGISTER,\n+\t\t\t true);\n   reg_known_equiv_p = sbitmap_alloc (maxreg - FIRST_PSEUDO_REGISTER);\n   bitmap_clear (reg_known_equiv_p);\n \n@@ -3360,7 +3361,7 @@ init_alias_analysis (void)\n   if (reg_base_value)\n     reg_base_value->truncate (0);\n \n-  vec_safe_grow_cleared (reg_base_value, maxreg);\n+  vec_safe_grow_cleared (reg_base_value, maxreg, true);\n \n   new_reg_base_value = XNEWVEC (rtx, maxreg);\n   reg_seen = sbitmap_alloc (maxreg);"}, {"sha": "5c0ed826119795ae0a59d9c8e0b467428a930257", "filename": "gcc/c/gimple-parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fc%2Fgimple-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fc%2Fgimple-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -590,7 +590,7 @@ c_parser_gimple_compound_statement (gimple_parser &parser, gimple_seq *seq)\n \t\t\t       : ENTRY_BLOCK_PTR_FOR_FN (cfun)));\n \t      if (basic_block_info_for_fn (cfun)->length () <= (size_t)index)\n \t\tvec_safe_grow_cleared (basic_block_info_for_fn (cfun),\n-\t\t\t\t       index + 1);\n+\t\t\t\t       index + 1, true);\n \t      SET_BASIC_BLOCK_FOR_FN (cfun, index, bb);\n \t      if (last_basic_block_for_fn (cfun) <= index)\n \t\tlast_basic_block_for_fn (cfun) = index + 1;\n@@ -617,7 +617,7 @@ c_parser_gimple_compound_statement (gimple_parser &parser, gimple_seq *seq)\n \t\t      loop->num = is_loop_header_of;\n \t\t      loop->header = bb;\n \t\t      vec_safe_grow_cleared (loops_for_fn (cfun)->larray,\n-\t\t\t\t\t     is_loop_header_of + 1);\n+\t\t\t\t\t     is_loop_header_of + 1, true);\n \t\t      (*loops_for_fn (cfun)->larray)[is_loop_header_of] = loop;\n \t\t      flow_loop_tree_node_add (loops_for_fn (cfun)->tree_root,\n \t\t\t\t\t       loop);"}, {"sha": "a11da66492d001cd0bd56f07a11e35c2bcf6e754", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -2881,7 +2881,7 @@ internal_arg_pointer_based_exp_scan (void)\n \t    {\n \t      if (idx >= internal_arg_pointer_exp_state.cache.length ())\n \t\tinternal_arg_pointer_exp_state.cache\n-\t\t  .safe_grow_cleared (idx + 1);\n+\t\t  .safe_grow_cleared (idx + 1, true);\n \t      internal_arg_pointer_exp_state.cache[idx] = val;\n \t    }\n \t}"}, {"sha": "5c3772cd40af1d13323d2e068850da9d98d38d37", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -657,7 +657,7 @@ find_many_sub_basic_blocks (sbitmap blocks)\n   basic_block bb, min, max;\n   bool found = false;\n   auto_vec<unsigned int> n_succs;\n-  n_succs.safe_grow_cleared (last_basic_block_for_fn (cfun));\n+  n_succs.safe_grow_cleared (last_basic_block_for_fn (cfun), true);\n \n   FOR_EACH_BB_FN (bb, cfun)\n     SET_STATE (bb,"}, {"sha": "b334ea03c2568a79e778c41c68a7c71327ad46f8", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -2949,9 +2949,9 @@ expand_asm_stmt (gasm *stmt)\n \n   /* Copy the gimple vectors into new vectors that we can manipulate.  */\n \n-  output_tvec.safe_grow (noutputs);\n-  input_tvec.safe_grow (ninputs);\n-  constraints.safe_grow (noutputs + ninputs);\n+  output_tvec.safe_grow (noutputs, true);\n+  input_tvec.safe_grow (ninputs, true);\n+  constraints.safe_grow (noutputs + ninputs, true);\n \n   for (i = 0; i < noutputs; ++i)\n     {\n@@ -3124,7 +3124,7 @@ expand_asm_stmt (gasm *stmt)\n   auto_vec<int, MAX_RECOG_OPERANDS> inout_opnum;\n   rtx_insn *after_rtl_seq = NULL, *after_rtl_end = NULL;\n \n-  output_rvec.safe_grow (noutputs);\n+  output_rvec.safe_grow (noutputs, true);\n \n   for (i = 0; i < noutputs; ++i)\n     {\n@@ -3203,8 +3203,8 @@ expand_asm_stmt (gasm *stmt)\n   auto_vec<rtx, MAX_RECOG_OPERANDS> input_rvec;\n   auto_vec<machine_mode, MAX_RECOG_OPERANDS> input_mode;\n \n-  input_rvec.safe_grow (ninputs);\n-  input_mode.safe_grow (ninputs);\n+  input_rvec.safe_grow (ninputs, true);\n+  input_mode.safe_grow (ninputs, true);\n \n   generating_concat_p = 0;\n "}, {"sha": "03fa688fed681dec2f25d72e721189834350a839", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -378,7 +378,7 @@ rtl_create_basic_block (void *headp, void *endp, basic_block after)\n       size_t new_size =\n \t(last_basic_block_for_fn (cfun)\n \t + (last_basic_block_for_fn (cfun) + 3) / 4);\n-      vec_safe_grow_cleared (basic_block_info_for_fn (cfun), new_size);\n+      vec_safe_grow_cleared (basic_block_info_for_fn (cfun), new_size, true);\n     }\n \n   n_basic_blocks_for_fn (cfun)++;"}, {"sha": "c88382efbd3bdf1a1801f1837f244451922879ef", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -544,7 +544,7 @@ combine_split_insns (rtx pattern, rtx_insn *insn)\n   ret = split_insns (pattern, insn);\n   nregs = max_reg_num ();\n   if (nregs > reg_stat.length ())\n-    reg_stat.safe_grow_cleared (nregs);\n+    reg_stat.safe_grow_cleared (nregs, true);\n   return ret;\n }\n \n@@ -1172,7 +1172,7 @@ combine_instructions (rtx_insn *f, unsigned int nregs)\n \n   rtl_hooks = combine_rtl_hooks;\n \n-  reg_stat.safe_grow_cleared (nregs);\n+  reg_stat.safe_grow_cleared (nregs, true);\n \n   init_recog_no_volatile ();\n "}, {"sha": "e73aa9ad8a988734ec91ac5afbee04962f80b84d", "filename": "gcc/config/aarch64/aarch64-sve-builtins.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -2793,7 +2793,7 @@ function_expander::add_output_operand (insn_code icode)\n {\n   unsigned int opno = m_ops.length ();\n   machine_mode mode = insn_data[icode].operand[opno].mode;\n-  m_ops.safe_grow (opno + 1);\n+  m_ops.safe_grow (opno + 1, true);\n   create_output_operand (&m_ops.last (), possible_target, mode);\n }\n \n@@ -2830,15 +2830,15 @@ function_expander::add_input_operand (insn_code icode, rtx x)\n       gcc_assert (GET_MODE (x) == VNx16BImode);\n       x = gen_lowpart (mode, x);\n     }\n-  m_ops.safe_grow (m_ops.length () + 1);\n+  m_ops.safe_grow (m_ops.length () + 1, true);\n   create_input_operand (&m_ops.last (), x, mode);\n }\n \n /* Add an integer operand with value X to the instruction.  */\n void\n function_expander::add_integer_operand (HOST_WIDE_INT x)\n {\n-  m_ops.safe_grow (m_ops.length () + 1);\n+  m_ops.safe_grow (m_ops.length () + 1, true);\n   create_integer_operand (&m_ops.last (), x);\n }\n \n@@ -2862,7 +2862,7 @@ function_expander::add_mem_operand (machine_mode mode, rtx addr)\n void\n function_expander::add_address_operand (rtx x)\n {\n-  m_ops.safe_grow (m_ops.length () + 1);\n+  m_ops.safe_grow (m_ops.length () + 1, true);\n   create_address_operand (&m_ops.last (), x);\n }\n \n@@ -2871,7 +2871,7 @@ function_expander::add_address_operand (rtx x)\n void\n function_expander::add_fixed_operand (rtx x)\n {\n-  m_ops.safe_grow (m_ops.length () + 1);\n+  m_ops.safe_grow (m_ops.length () + 1, true);\n   create_fixed_operand (&m_ops.last (), x);\n }\n "}, {"sha": "6bd793bdd21bc324935907a8cb0c101aa620cbb8", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -3698,7 +3698,7 @@ insn_set_clock (rtx insn, int cycle)\n   unsigned uid = INSN_UID (insn);\n \n   if (uid >= INSN_INFO_LENGTH)\n-    insn_info.safe_grow (uid * 5 / 4 + 10);\n+    insn_info.safe_grow (uid * 5 / 4 + 10, true);\n \n   INSN_INFO_ENTRY (uid).clock = cycle;\n   INSN_INFO_ENTRY (uid).new_cond = NULL;"}, {"sha": "3479b8207d2d1a8a5e696229c74fbc1efc61343a", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -9742,7 +9742,8 @@ build_vtbl_initializer (tree binfo,\n     {\n       int n_entries = vec_safe_length (vid.inits);\n \n-      vec_safe_grow (vid.inits, TARGET_VTABLE_DATA_ENTRY_DISTANCE * n_entries);\n+      vec_safe_grow (vid.inits, TARGET_VTABLE_DATA_ENTRY_DISTANCE * n_entries,\n+\t\t     true);\n \n       /* Move data entries into their new positions and add padding\n \t after the new positions.  Iterate backwards so we don't\n@@ -9774,7 +9775,7 @@ build_vtbl_initializer (tree binfo,\n      order.  Straighten them out and add them to the running list in one\n      step.  */\n   jx = vec_safe_length (*inits);\n-  vec_safe_grow (*inits, jx + vid.inits->length ());\n+  vec_safe_grow (*inits, jx + vid.inits->length (), true);\n \n   for (ix = vid.inits->length () - 1;\n        vid.inits->iterate (ix, &e);"}, {"sha": "ad9d47070e3890e3a411f1807ccd88bc3288e0fb", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -2552,7 +2552,7 @@ get_mapped_args (tree map)\n       /* Insert the argument into its corresponding position.  */\n       vec<tree> &list = lists[level - 1];\n       if (index >= (int)list.length ())\n-\tlist.safe_grow_cleared (index + 1);\n+\tlist.safe_grow_cleared (index + 1, true);\n       list[index] = TREE_PURPOSE (p);\n     }\n "}, {"sha": "4c84f2d0a9bebb2d1b457cc1db010f8a89f2e1ba", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -8214,7 +8214,7 @@ cp_maybe_mangle_decomp (tree decl, tree first, unsigned int count)\n       && TREE_STATIC (decl))\n     {\n       auto_vec<tree, 16> v;\n-      v.safe_grow (count);\n+      v.safe_grow (count, true);\n       tree d = first;\n       for (unsigned int i = 0; i < count; i++, d = DECL_CHAIN (d))\n \tv[count - i - 1] = d;\n@@ -8274,7 +8274,7 @@ cp_finish_decomp (tree decl, tree first, unsigned int count)\n     }\n \n   auto_vec<tree, 16> v;\n-  v.safe_grow (count);\n+  v.safe_grow (count, true);\n   tree d = first;\n   for (unsigned int i = 0; i < count; i++, d = DECL_CHAIN (d))\n     {"}, {"sha": "147d5374907959aeb99611e67051239cbb222f1d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -39302,7 +39302,7 @@ cp_parser_omp_for_loop (cp_parser *parser, enum tree_code code, tree clauses,\n       TREE_VEC_ELT (incrv, i) = incr;\n       if (orig_init)\n \t{\n-\t  orig_inits.safe_grow_cleared (i + 1);\n+\t  orig_inits.safe_grow_cleared (i + 1, true);\n \t  orig_inits[i] = orig_init;\n \t}\n       if (orig_decl)"}, {"sha": "ad8c988d41e26653e6109d6282af11ad5ed6227f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -4431,7 +4431,7 @@ canonical_type_parameter (tree type)\n   gcc_assert (TREE_CODE (type) != TEMPLATE_TEMPLATE_PARM);\n \n   if (vec_safe_length (canonical_template_parms) <= (unsigned) idx)\n-    vec_safe_grow_cleared (canonical_template_parms, idx + 1);\n+    vec_safe_grow_cleared (canonical_template_parms, idx + 1, true);\n \n   for (tree list = (*canonical_template_parms)[idx];\n        list; list = TREE_CHAIN (list))"}, {"sha": "0ab3c425c7338c71d5aba594ebab3cbb34ac8d14", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -1177,7 +1177,7 @@ get_pseudo_ti_init (tree type, unsigned tk_index)\n \n \tgcc_assert (tk_index - TK_VMI_CLASS_TYPES + 1 == nbases);\n \n-\tvec_safe_grow (init_vec, nbases);\n+\tvec_safe_grow (init_vec, nbases, true);\n \t/* Generate the base information initializer.  */\n \tfor (unsigned ix = nbases; ix--;)\n \t  {"}, {"sha": "e0490893703bbb02af8aa708eaad98dc8122ce20", "filename": "gcc/df-core.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fdf-core.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fdf-core.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-core.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -1014,8 +1014,8 @@ df_worklist_dataflow_doublequeue (struct dataflow *dataflow,\n   vec<int> last_change_age = vNULL;\n   int prev_age;\n \n-  last_visit_age.safe_grow_cleared (n_blocks);\n-  last_change_age.safe_grow_cleared (n_blocks);\n+  last_visit_age.safe_grow_cleared (n_blocks, true);\n+  last_change_age.safe_grow_cleared (n_blocks, true);\n \n   /* Double-queueing. Worklist is for the current iteration,\n      and pending is for the next. */"}, {"sha": "ccfc2bd0ea90065c87a4473cef0e1b1da488bc54", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -524,7 +524,7 @@ static void\n update_row_reg_save (dw_cfi_row *row, unsigned column, dw_cfi_ref cfi)\n {\n   if (vec_safe_length (row->reg_save) <= column)\n-    vec_safe_grow_cleared (row->reg_save, column + 1);\n+    vec_safe_grow_cleared (row->reg_save, column + 1, true);\n   (*row->reg_save)[column] = cfi;\n }\n "}, {"sha": "5e415f77d5d35f830af2ad29f2229c527ce160cd", "filename": "gcc/early-remat.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fearly-remat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fearly-remat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fearly-remat.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -1007,7 +1007,7 @@ void\n early_remat::init_block_info (void)\n {\n   unsigned int n_blocks = last_basic_block_for_fn (m_fn);\n-  m_block_info.safe_grow_cleared (n_blocks);\n+  m_block_info.safe_grow_cleared (n_blocks, true);\n }\n \n /* Maps basic block indices to their position in the post order.  */\n@@ -1068,7 +1068,7 @@ void\n early_remat::finalize_candidate_indices (void)\n {\n   /* Create a bitmap for each candidate register.  */\n-  m_regno_to_candidates.safe_grow (max_reg_num ());\n+  m_regno_to_candidates.safe_grow (max_reg_num (), true);\n   unsigned int regno;\n   bitmap_iterator bi;\n   EXECUTE_IF_SET_IN_BITMAP (&m_candidate_regnos, 0, regno, bi)"}, {"sha": "3152ee120a8400c0d7630fa96c7cb636b3c10542", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -1454,7 +1454,7 @@ sjlj_build_landing_pads (void)\n   num_dispatch = vec_safe_length (cfun->eh->lp_array);\n   if (num_dispatch == 0)\n     return;\n-  sjlj_lp_call_site_index.safe_grow_cleared (num_dispatch);\n+  sjlj_lp_call_site_index.safe_grow_cleared (num_dispatch, true);\n \n   num_dispatch = sjlj_assign_call_site_values ();\n   if (num_dispatch > 0)"}, {"sha": "1a15f24b3979abae628c0fd9857f62d70c149d33", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -11639,7 +11639,7 @@ convert_to_bytes (tree type, tree expr, vec<unsigned char> *bytes)\n \t      if (unsigned HOST_WIDE_INT size = cur_idx - (last_idx + 1))\n \t\t{\n \t\t  size = size * elsize + bytes->length ();\n-\t\t  bytes->safe_grow_cleared (size);\n+\t\t  bytes->safe_grow_cleared (size, true);\n \t\t}\n \n \t      if (!convert_to_bytes (eltype, val, bytes))\n@@ -11658,7 +11658,7 @@ convert_to_bytes (tree type, tree expr, vec<unsigned char> *bytes)\n \t\t any padding.  */\n \t      unsigned HOST_WIDE_INT cur_off = int_byte_position (fld);\n \t      if (bytes->length () < cur_off)\n-\t\tbytes->safe_grow_cleared (cur_off);\n+\t\tbytes->safe_grow_cleared (cur_off, true);\n \n \t      if (!convert_to_bytes (TREE_TYPE (val), val, bytes))\n \t\treturn false;\n@@ -11678,7 +11678,7 @@ convert_to_bytes (tree type, tree expr, vec<unsigned char> *bytes)\n       unsigned HOST_WIDE_INT type_size = tree_to_uhwi (size);\n       if (ctor_size < type_size)\n \tif (unsigned HOST_WIDE_INT size_grow = type_size - ctor_size)\n-\t  bytes->safe_grow_cleared (bytes->length () + size_grow);\n+\t  bytes->safe_grow_cleared (bytes->length () + size_grow, true);\n \n       return true;\n     }\n@@ -11699,7 +11699,7 @@ convert_to_bytes (tree type, tree expr, vec<unsigned char> *bytes)\n \n   /* Unlike for RECORD_TYPE, there is no need to clear the memory since\n      it's completely overwritten by native_encode_expr.  */\n-  bytes->safe_grow (bytes_sofar + expr_bytes);\n+  bytes->safe_grow (bytes_sofar + expr_bytes, true);\n   unsigned char *pnext = bytes->begin () + bytes_sofar;\n   int nbytes = native_encode_expr (expr, pnext, expr_bytes, 0);\n   /* NBYTES is zero on failure.  Otherwise it should equal EXPR_BYTES.  */"}, {"sha": "80423d117d9c11b612de67b68ee06826010bed8b", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -642,7 +642,7 @@ compute_alignments (void)\n \n   max_labelno = max_label_num ();\n   min_labelno = get_first_label_num ();\n-  label_align.safe_grow_cleared (max_labelno - min_labelno + 1);\n+  label_align.safe_grow_cleared (max_labelno - min_labelno + 1, true);\n \n   /* If not optimizing or optimizing for size, don't assign any alignments.  */\n   if (! optimize || optimize_function_for_size_p (cfun))\n@@ -771,7 +771,7 @@ grow_label_align (void)\n   n_labels = max_labelno - min_labelno + 1;\n   n_old_labels = old - min_labelno + 1;\n \n-  label_align.safe_grow_cleared (n_labels);\n+  label_align.safe_grow_cleared (n_labels, true);\n \n   /* Range of labels grows monotonically in the function.  Failing here\n      means that the initialization of array got lost.  */"}, {"sha": "7d3365fe7e0045aa1ce68d66a002f34b848e7758", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -4480,7 +4480,7 @@ gfc_trans_omp_do (gfc_code *code, gfc_exec_op op, stmtblock_t *pblock,\n \t  if (clauses->orderedc)\n \t    {\n \t      if (doacross_steps == NULL)\n-\t\tvec_safe_grow_cleared (doacross_steps, clauses->orderedc);\n+\t\tvec_safe_grow_cleared (doacross_steps, clauses->orderedc, true);\n \t      (*doacross_steps)[i] = step;\n \t    }\n \t}"}, {"sha": "2c8fa217f1ff8266d62928814f3f3b1cdd6e24eb", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -637,7 +637,7 @@ static class temp_slot **\n temp_slots_at_level (int level)\n {\n   if (level >= (int) vec_safe_length (used_temp_slots))\n-    vec_safe_grow_cleared (used_temp_slots, level + 1);\n+    vec_safe_grow_cleared (used_temp_slots, level + 1, true);\n \n   return &(*used_temp_slots)[level];\n }"}, {"sha": "756c1d6b4055aa97028aec9efa9d14a96ee81fa3", "filename": "gcc/fwprop.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ffwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ffwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffwprop.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -292,10 +292,10 @@ build_single_def_use_links (void)\n   df_maybe_reorganize_use_refs (DF_REF_ORDER_BY_INSN_WITH_NOTES);\n \n   use_def_ref.create (DF_USES_TABLE_SIZE ());\n-  use_def_ref.safe_grow_cleared (DF_USES_TABLE_SIZE ());\n+  use_def_ref.safe_grow_cleared (DF_USES_TABLE_SIZE (), true);\n \n   reg_defs.create (max_reg_num ());\n-  reg_defs.safe_grow_cleared (max_reg_num ());\n+  reg_defs.safe_grow_cleared (max_reg_num (), true);\n \n   reg_defs_stack.create (n_basic_blocks_for_fn (cfun) * 10);\n   local_md = BITMAP_ALLOC (NULL);\n@@ -975,7 +975,7 @@ update_uses (df_ref use)\n \n       /* Set up the use-def chain.  */\n       if (DF_REF_ID (use) >= (int) use_def_ref.length ())\n-        use_def_ref.safe_grow_cleared (DF_REF_ID (use) + 1);\n+\tuse_def_ref.safe_grow_cleared (DF_REF_ID (use) + 1, true);\n \n       if (flag_checking)\n \tgcc_assert (sparseset_bit_p (active_defs_check, regno));"}, {"sha": "531f4e02dbdbdd8d5b1884ce9afdf37dda973fb1", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -5482,7 +5482,7 @@ insert_wrapper (const char *wrapper)\n     }\n   while ((p = strchr (p, ',')) != NULL);\n \n-  argbuf.safe_grow (old_length + n);\n+  argbuf.safe_grow (old_length + n, true);\n   memmove (argbuf.address () + n,\n \t   argbuf.address (),\n \t   old_length * sizeof (const_char_p));"}, {"sha": "849a16162e537ee31a4a49b47ba873e79a9c2942", "filename": "gcc/genautomata.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -7247,7 +7247,7 @@ create_state_ainsn_table (automaton_t automaton)\n   tab->check_vect.create (10000);\n \n   tab->base_vect.create (0);\n-  tab->base_vect.safe_grow (automaton->achieved_states_num);\n+  tab->base_vect.safe_grow (automaton->achieved_states_num, true);\n \n   full_vect_length = (automaton->insn_equiv_classes_num\n                       * automaton->achieved_states_num);\n@@ -7339,7 +7339,7 @@ add_vect (state_ainsn_table_t tab, int vect_num, vla_hwint_t vect)\n   {\n     size_t full_base = tab->automaton->insn_equiv_classes_num * vect_num;\n     if (tab->full_vect.length () < full_base + vect_length)\n-      tab->full_vect.safe_grow (full_base + vect_length);\n+      tab->full_vect.safe_grow (full_base + vect_length, true);\n     for (i = 0; i < vect_length; i++)\n       tab->full_vect[full_base + i] = vect[i];\n   }\n@@ -7743,7 +7743,7 @@ output_dead_lock_vect (automaton_t automaton)\n   output_states_vect.create (0);\n   pass_states (automaton, add_states_vect_el);\n \n-  dead_lock_vect.safe_grow (output_states_vect.length ());\n+  dead_lock_vect.safe_grow (output_states_vect.length (), true);\n   for (i = 0; i < output_states_vect.length (); i++)\n     {\n       state_t s = output_states_vect[i];"}, {"sha": "906d842c4d831d2609410aee8b7215fb042dcd86", "filename": "gcc/genmatch.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -2122,7 +2122,7 @@ capture_info::capture_info (simplify *s, operand *result, bool gimple_)\n     }\n \n   force_no_side_effects = 0;\n-  info.safe_grow_cleared (s->capture_max + 1);\n+  info.safe_grow_cleared (s->capture_max + 1, true);\n   for (int i = 0; i <= s->capture_max; ++i)\n     info[i].same_as = i;\n \n@@ -5050,7 +5050,7 @@ parser::finish_match_operand (operand *op)\n   /* Look for matching captures, diagnose mis-uses of @@ and apply\n      early lowering and distribution of value_match.  */\n   auto_vec<vec<capture *> > cpts;\n-  cpts.safe_grow_cleared (capture_ids->elements ());\n+  cpts.safe_grow_cleared (capture_ids->elements (), true);\n   walk_captures (op, cpts);\n   for (unsigned i = 0; i < cpts.length (); ++i)\n     {"}, {"sha": "5b5b72fd6ca76584fec903454e0d9abbdf0a6495", "filename": "gcc/genrecog.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -2214,8 +2214,8 @@ optimize_subroutine_group (const char *type, state *root)\n   if (cse_tests_p)\n     {\n       known_conditions kc;\n-      kc.position_tests.safe_grow_cleared (num_positions);\n-      kc.set_operands.safe_grow_cleared (num_operands);\n+      kc.position_tests.safe_grow_cleared (num_positions, true);\n+      kc.set_operands.safe_grow_cleared (num_operands, true);\n       kc.peep2_count = 1;\n       cse_tests (&root_pos, root, &kc);\n     }\n@@ -2337,7 +2337,7 @@ merge_pattern_info::merge_pattern_info (unsigned int num_transitions)\n     num_results (0),\n     routine (0)\n {\n-  transitions.safe_grow_cleared (num_transitions);\n+  transitions.safe_grow_cleared (num_transitions, true);\n }\n \n /* Describes one way of matching a particular state to a particular\n@@ -3667,7 +3667,7 @@ merge_into_decision (decision *d1, state *s2, const int_set *exclude,\n     {\n       transition *trans1 = intersecting[i];\n       next->truncate (0);\n-      next->safe_grow (trans1->labels.length () + combined->length ());\n+      next->safe_grow (trans1->labels.length () + combined->length (), true);\n       int_set::iterator end\n \t= std::set_union (trans1->labels.begin (), trans1->labels.end (),\n \t\t\t  combined->begin (), combined->end (),\n@@ -5148,7 +5148,7 @@ print_subroutine_start (output_state *os, state *s, position *root)\n \t}\n \n       /* Say that x1 is valid and the rest aren't.  */\n-      os->seen_vars.safe_grow_cleared (num_vars);\n+      os->seen_vars.safe_grow_cleared (num_vars, true);\n       os->seen_vars[1] = true;\n     }\n   if (os->type == SUBPATTERN || os->type == RECOG)\n@@ -5421,7 +5421,7 @@ main (int argc, const char **argv)\n   optimize_subroutine_group (\"peephole2_insns\", &peephole2_root);\n \n   output_state os;\n-  os.id_to_var.safe_grow_cleared (num_positions);\n+  os.id_to_var.safe_grow_cleared (num_positions, true);\n \n   if (use_pattern_routines_p)\n     {"}, {"sha": "2687088a9084aae66d098ea064d3886d61b6c22c", "filename": "gcc/gimple-loop-versioning.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fgimple-loop-versioning.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fgimple-loop-versioning.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-loop-versioning.cc?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -555,7 +555,7 @@ loop_versioning::loop_versioning (function *fn)\n   gcc_obstack_init (&m_obstack);\n \n   /* Initialize the loop information.  */\n-  m_loops.safe_grow_cleared (m_nloops);\n+  m_loops.safe_grow_cleared (m_nloops, true);\n   for (unsigned int i = 0; i < m_nloops; ++i)\n     {\n       m_loops[i].outermost = get_loop (m_fn, 0);\n@@ -564,7 +564,7 @@ loop_versioning::loop_versioning (function *fn)\n \n   /* Initialize the list of blocks that belong to each loop.  */\n   unsigned int nbbs = last_basic_block_for_fn (fn);\n-  m_next_block_in_loop.safe_grow (nbbs);\n+  m_next_block_in_loop.safe_grow (nbbs, true);\n   basic_block bb;\n   FOR_EACH_BB_FN (bb, fn)\n     {"}, {"sha": "70aa3bc4233afaef2132467cfd003ab4ae2c267e", "filename": "gcc/gimple.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -1693,7 +1693,7 @@ gimple_set_bb (gimple *stmt, basic_block bb)\n \t      unsigned new_len = 3 * uid / 2 + 1;\n \n \t      vec_safe_grow_cleared (label_to_block_map_for_fn (cfun),\n-\t\t\t\t     new_len);\n+\t\t\t\t     new_len, true);\n \t    }\n \t}\n "}, {"sha": "9f39df67b88ec99c824cf72731231de75dd87134", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -808,7 +808,7 @@ translate_isl_ast_node_user (__isl_keep isl_ast_node *node,\n   const int nb_loops = number_of_loops (cfun);\n   vec<tree> iv_map;\n   iv_map.create (nb_loops);\n-  iv_map.safe_grow_cleared (nb_loops);\n+  iv_map.safe_grow_cleared (nb_loops, true);\n \n   build_iv_mapping (iv_map, gbb, user_expr, ip, pbb->scop->scop_info->region);\n   isl_ast_expr_free (user_expr);"}, {"sha": "350178c82b8143987d9e28ecd6a83436ff974247", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -8967,7 +8967,7 @@ sched_extend_luids (void)\n {\n   int new_luids_max_uid = get_max_uid () + 1;\n \n-  sched_luids.safe_grow_cleared (new_luids_max_uid);\n+  sched_luids.safe_grow_cleared (new_luids_max_uid, true);\n }\n \n /* Initialize LUID for INSN.  */\n@@ -9039,7 +9039,7 @@ extend_h_i_d (void)\n   if (reserve > 0\n       && ! h_i_d.space (reserve))\n     {\n-      h_i_d.safe_grow_cleared (3 * get_max_uid () / 2);\n+      h_i_d.safe_grow_cleared (3 * get_max_uid () / 2, true);\n       sched_extend_target ();\n     }\n }"}, {"sha": "b897c65235c7cd66962abbc5d8e6d53c1fd93144", "filename": "gcc/insn-addr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Finsn-addr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Finsn-addr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finsn-addr.h?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -28,7 +28,7 @@ extern int insn_current_address;\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n       insn_addresses_.create (size);\t\t\t\\\n-      insn_addresses_.safe_grow_cleared (size);\t\t\\\n+      insn_addresses_.safe_grow_cleared (size, true);\t\\\n       memset (insn_addresses_.address (),\t\t\\\n \t      0, sizeof (int) * size);\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n@@ -48,7 +48,7 @@ insn_addresses_new (rtx_insn *insn, int insn_addr)\n       if (size <= insn_uid)\n \t{\n \t  int *p;\n-\t  insn_addresses_.safe_grow (insn_uid + 1);\n+\t  insn_addresses_.safe_grow (insn_uid + 1, true);\n \t  p = insn_addresses_.address ();\n \t  memset (&p[size],\n \t\t  0, sizeof (int) * (insn_uid + 1 - size));"}, {"sha": "7ae6c883a1d0d2af998b336305616aef5f6fcf7f", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -3325,12 +3325,12 @@ gather_context_independent_values (class ipa_node_params *info,\n \n   known_csts->create (0);\n   known_contexts->create (0);\n-  known_csts->safe_grow_cleared (count);\n-  known_contexts->safe_grow_cleared (count);\n+  known_csts->safe_grow_cleared (count, true);\n+  known_contexts->safe_grow_cleared (count, true);\n   if (known_aggs)\n     {\n       known_aggs->create (0);\n-      known_aggs->safe_grow_cleared (count);\n+      known_aggs->safe_grow_cleared (count, true);\n     }\n \n   if (removable_params_cost)\n@@ -4823,7 +4823,8 @@ find_more_contexts_for_caller_subset (cgraph_node *node,\n \t    }\n \n \t  if (!known_contexts->exists ())\n-\t    known_contexts->safe_grow_cleared (ipa_get_param_count (info));\n+\t    known_contexts->safe_grow_cleared (ipa_get_param_count (info),\n+\t\t\t\t\t       true);\n \t  (*known_contexts)[i] = newval;\n \t}\n "}, {"sha": "067ed5ba0731fc525dc21e4d90e2a656de7021a2", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -2987,7 +2987,7 @@ final_warning_record::grow_type_warnings (unsigned newlen)\n   unsigned len = type_warnings.length ();\n   if (newlen > len)\n     {\n-      type_warnings.safe_grow_cleared (newlen);\n+      type_warnings.safe_grow_cleared (newlen, true);\n       for (unsigned i = len; i < newlen; i++)\n \ttype_warnings[i].dyn_count = profile_count::zero ();\n     }\n@@ -4146,7 +4146,7 @@ ipa_odr_read_section (struct lto_file_decl_data *file_data, const char *data,\n       /* If this is first time we see the enum, remember its definition.  */\n       if (!existed_p)\n \t{\n-\t  this_enum.vals.safe_grow_cleared (nvals);\n+\t  this_enum.vals.safe_grow_cleared (nvals, true);\n \t  this_enum.warned = false;\n \t  if (dump_file)\n \t    fprintf (dump_file, \"enum %s\\n{\\n\", name);"}, {"sha": "86d01addb4498d31dc217c971fe28f8e363f7805", "filename": "gcc/ipa-fnsummary.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fipa-fnsummary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fipa-fnsummary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -609,13 +609,13 @@ evaluate_properties_for_edge (struct cgraph_edge *e, bool inline_p,\n \t\t  {\n \t\t    gcc_checking_assert (TREE_CODE (cst) != TREE_BINFO);\n \t\t    if (!known_vals_ptr->length ())\n-\t\t      vec_safe_grow_cleared (known_vals_ptr, count);\n+\t\t      vec_safe_grow_cleared (known_vals_ptr, count, true);\n \t\t    (*known_vals_ptr)[i] = cst;\n \t\t  }\n \t\telse if (inline_p && !es->param[i].change_prob)\n \t\t  {\n \t\t    if (!known_vals_ptr->length ())\n-\t\t      vec_safe_grow_cleared (known_vals_ptr, count);\n+\t\t      vec_safe_grow_cleared (known_vals_ptr, count, true);\n \t\t    (*known_vals_ptr)[i] = error_mark_node;\n \t\t  }\n \n@@ -632,7 +632,7 @@ evaluate_properties_for_edge (struct cgraph_edge *e, bool inline_p,\n \t\t      {\n \t\t\tif (!known_value_ranges.length ())\n \t\t\t  {\n-\t\t\t    known_value_ranges.safe_grow (count);\n+\t\t\t    known_value_ranges.safe_grow (count, true);\n \t\t\t    for (int i = 0; i < count; ++i)\n \t\t\t      new (&known_value_ranges[i]) value_range ();\n \t\t\t  }\n@@ -649,7 +649,7 @@ evaluate_properties_for_edge (struct cgraph_edge *e, bool inline_p,\n \t\t    if (agg.items.length ())\n \t\t      {\n \t\t\tif (!known_aggs_ptr->length ())\n-\t\t\t  vec_safe_grow_cleared (known_aggs_ptr, count);\n+\t\t\t  vec_safe_grow_cleared (known_aggs_ptr, count, true);\n \t\t\t(*known_aggs_ptr)[i] = agg;\n \t\t      }\n \t\t  }\n@@ -665,7 +665,7 @@ evaluate_properties_for_edge (struct cgraph_edge *e, bool inline_p,\n \t\tif (!ctx.useless_p ())\n \t\t  {\n \t\t    if (!known_contexts_ptr->length ())\n-\t\t      known_contexts_ptr->safe_grow_cleared (count);\n+\t\t      known_contexts_ptr->safe_grow_cleared (count, true);\n \t\t    (*known_contexts_ptr)[i]\n \t\t      = ipa_context_from_jfunc (caller_parms_info, e, i, jf);\n \t\t  }\n@@ -686,7 +686,7 @@ evaluate_properties_for_edge (struct cgraph_edge *e, bool inline_p,\n \t  if (cst)\n \t    {\n \t      if (!known_vals_ptr->length ())\n-\t        vec_safe_grow_cleared (known_vals_ptr, count);\n+\t\tvec_safe_grow_cleared (known_vals_ptr, count, true);\n \t      (*known_vals_ptr)[i] = cst;\n \t    }\n \t}\n@@ -792,7 +792,7 @@ ipa_fn_summary_t::duplicate (cgraph_node *src,\n       struct cgraph_edge *edge, *next;\n \n       info->size_time_table = 0;\n-      known_vals.safe_grow_cleared (count);\n+      known_vals.safe_grow_cleared (count, true);\n       for (i = 0; i < count; i++)\n \t{\n \t  struct ipa_replace_map *r;\n@@ -2485,12 +2485,12 @@ analyze_function_body (struct cgraph_node *node, bool early)\n \t  fbi.node = node;\n \t  fbi.info = IPA_NODE_REF (node);\n \t  fbi.bb_infos = vNULL;\n-\t  fbi.bb_infos.safe_grow_cleared (last_basic_block_for_fn (cfun));\n+\t  fbi.bb_infos.safe_grow_cleared (last_basic_block_for_fn (cfun), true);\n \t  fbi.param_count = count_formal_params (node->decl);\n \t  fbi.aa_walk_budget = opt_for_fn (node->decl, param_ipa_max_aa_steps);\n \n \t  nonconstant_names.safe_grow_cleared\n-\t    (SSANAMES (my_function)->length ());\n+\t    (SSANAMES (my_function)->length (), true);\n \t}\n     }\n \n@@ -2624,7 +2624,7 @@ analyze_function_body (struct cgraph_node *node, bool early)\n \t\t  int i;\n \n \t\t  if (count)\n-\t\t    es->param.safe_grow_cleared (count);\n+\t\t    es->param.safe_grow_cleared (count, true);\n \t\t  for (i = 0; i < count; i++)\n \t\t    {\n \t\t      int prob = param_change_prob (&fbi, stmt, i);\n@@ -3927,8 +3927,8 @@ ipa_merge_fn_summary_after_inlining (struct cgraph_edge *edge)\n \n       if (count)\n \t{\n-\t  operand_map.safe_grow_cleared (count);\n-\t  offset_map.safe_grow_cleared (count);\n+\t  operand_map.safe_grow_cleared (count, true);\n+\t  offset_map.safe_grow_cleared (count, true);\n \t}\n       for (i = 0; i < count; i++)\n \t{\n@@ -4167,7 +4167,7 @@ read_ipa_call_summary (class lto_input_block *ib, struct cgraph_edge *e,\n   length = streamer_read_uhwi (ib);\n   if (length && es && e->possibly_call_in_translation_unit_p ())\n     {\n-      es->param.safe_grow_cleared (length);\n+      es->param.safe_grow_cleared (length, true);\n       for (i = 0; i < length; i++)\n \tes->param[i].change_prob = streamer_read_uhwi (ib);\n     }"}, {"sha": "d2b4e78138926804e24b5e5ef0b59eefd56938c4", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -1586,7 +1586,7 @@ sem_function::bb_dict_test (vec<int> *bb_dict, int source, int target)\n   target++;\n \n   if (bb_dict->length () <= (unsigned)source)\n-    bb_dict->safe_grow_cleared (source + 1);\n+    bb_dict->safe_grow_cleared (source + 1, true);\n \n   if ((*bb_dict)[source] == 0)\n     {"}, {"sha": "b28c78eeab422764903e7bb685b5840760afce16", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -276,7 +276,7 @@ ipa_alloc_node_params (struct cgraph_node *node, int param_count)\n \n   if (!info->descriptors && param_count)\n     {\n-      vec_safe_grow_cleared (info->descriptors, param_count);\n+      vec_safe_grow_cleared (info->descriptors, param_count, true);\n       return true;\n     }\n   else\n@@ -906,7 +906,7 @@ parm_bb_aa_status_for_bb (struct ipa_func_body_info *fbi, basic_block bb,\n   gcc_checking_assert (fbi);\n   struct ipa_bb_info *bi = ipa_get_bb_info (fbi, bb);\n   if (bi->param_aa_statuses.is_empty ())\n-    bi->param_aa_statuses.safe_grow_cleared (fbi->param_count);\n+    bi->param_aa_statuses.safe_grow_cleared (fbi->param_count, true);\n   struct ipa_param_aa_status *paa = &bi->param_aa_statuses[index];\n   if (!paa->valid)\n     {\n@@ -2113,9 +2113,9 @@ ipa_compute_jump_functions_for_edge (struct ipa_func_body_info *fbi,\n \n   if (arg_num == 0 || args->jump_functions)\n     return;\n-  vec_safe_grow_cleared (args->jump_functions, arg_num);\n+  vec_safe_grow_cleared (args->jump_functions, arg_num, true);\n   if (flag_devirtualize)\n-    vec_safe_grow_cleared (args->polymorphic_call_contexts, arg_num);\n+    vec_safe_grow_cleared (args->polymorphic_call_contexts, arg_num, true);\n \n   if (gimple_call_internal_p (call))\n     return;\n@@ -2877,7 +2877,7 @@ ipa_analyze_node (struct cgraph_node *node)\n   fbi.node = node;\n   fbi.info = IPA_NODE_REF (node);\n   fbi.bb_infos = vNULL;\n-  fbi.bb_infos.safe_grow_cleared (last_basic_block_for_fn (cfun));\n+  fbi.bb_infos.safe_grow_cleared (last_basic_block_for_fn (cfun), true);\n   fbi.param_count = ipa_get_param_count (info);\n   fbi.aa_walk_budget = opt_for_fn (node->decl, param_ipa_max_aa_steps);\n \n@@ -3024,7 +3024,7 @@ update_jump_functions_after_inlining (struct cgraph_edge *cs,\n \t\t  if (!dst_ctx)\n \t\t    {\n \t\t      vec_safe_grow_cleared (args->polymorphic_call_contexts,\n-\t\t\t\t\t     count);\n+\t\t\t\t\t     count, true);\n \t\t      dst_ctx = ipa_get_ith_polymorhic_call_context (args, i);\n \t\t    }\n \n@@ -3095,7 +3095,7 @@ update_jump_functions_after_inlining (struct cgraph_edge *cs,\n \t\t      if (!dst_ctx)\n \t\t\t{\n \t\t\t  vec_safe_grow_cleared (args->polymorphic_call_contexts,\n-\t\t\t\t\t         count);\n+\t\t\t\t\t\t count, true);\n \t\t\t  dst_ctx = ipa_get_ith_polymorhic_call_context (args, i);\n \t\t\t}\n \t\t      dst_ctx->combine_with (ctx);\n@@ -4900,9 +4900,9 @@ ipa_read_edge_info (class lto_input_block *ib,\n   if (prevails && e->possibly_call_in_translation_unit_p ())\n     {\n       class ipa_edge_args *args = IPA_EDGE_REF_GET_CREATE (e);\n-      vec_safe_grow_cleared (args->jump_functions, count);\n+      vec_safe_grow_cleared (args->jump_functions, count, true);\n       if (contexts_computed)\n-\tvec_safe_grow_cleared (args->polymorphic_call_contexts, count);\n+\tvec_safe_grow_cleared (args->polymorphic_call_contexts, count, true);\n       for (int k = 0; k < count; k++)\n \t{\n \t  ipa_read_jump_function (ib, ipa_get_ith_jump_func (args, k), e,\n@@ -5197,7 +5197,7 @@ read_ipcp_transformation_info (lto_input_block *ib, cgraph_node *node,\n     {\n       ipcp_transformation_initialize ();\n       ipcp_transformation *ts = ipcp_transformation_sum->get_create (node);\n-      vec_safe_grow_cleared (ts->m_vr, count);\n+      vec_safe_grow_cleared (ts->m_vr, count, true);\n       for (i = 0; i < count; i++)\n \t{\n \t  ipa_vr *parm_vr;\n@@ -5219,7 +5219,7 @@ read_ipcp_transformation_info (lto_input_block *ib, cgraph_node *node,\n     {\n       ipcp_transformation_initialize ();\n       ipcp_transformation *ts = ipcp_transformation_sum->get_create (node);\n-      vec_safe_grow_cleared (ts->bits, count);\n+      vec_safe_grow_cleared (ts->bits, count, true);\n \n       for (i = 0; i < count; i++)\n \t{\n@@ -5754,11 +5754,11 @@ ipcp_transform_function (struct cgraph_node *node)\n   fbi.node = node;\n   fbi.info = NULL;\n   fbi.bb_infos = vNULL;\n-  fbi.bb_infos.safe_grow_cleared (last_basic_block_for_fn (cfun));\n+  fbi.bb_infos.safe_grow_cleared (last_basic_block_for_fn (cfun), true);\n   fbi.param_count = param_count;\n   fbi.aa_walk_budget = opt_for_fn (node->decl, param_ipa_max_aa_steps);\n \n-  vec_safe_grow_cleared (descriptors, param_count);\n+  vec_safe_grow_cleared (descriptors, param_count, true);\n   ipa_populate_param_decls (node, *descriptors);\n   calculate_dominance_info (CDI_DOMINATORS);\n   ipcp_modif_dom_walker (&fbi, descriptors, aggval, &something_changed,"}, {"sha": "4a6c011c525eceb1e096618ff169a1b8ed95467d", "filename": "gcc/ipa-reference.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fipa-reference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fipa-reference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -1057,7 +1057,7 @@ ipa_reference_write_optimization_summary (void)\n   int i;\n \n   vec_alloc (reference_vars_to_consider, ipa_reference_vars_uids);\n-  reference_vars_to_consider->safe_grow (ipa_reference_vars_uids);\n+  reference_vars_to_consider->safe_grow (ipa_reference_vars_uids, true);\n \n   /* See what variables we are interested in.  */\n   for (i = 0; i < lto_symtab_encoder_size (encoder); i++)"}, {"sha": "0a620247738a6334272521aff59cf6d8b8b2c11d", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -1802,7 +1802,7 @@ execute_split_functions (void)\n   calculate_dominance_info (CDI_DOMINATORS);\n \n   /* Compute local info about basic blocks and determine function size/time.  */\n-  bb_info_vec.safe_grow_cleared (last_basic_block_for_fn (cfun) + 1);\n+  bb_info_vec.safe_grow_cleared (last_basic_block_for_fn (cfun) + 1, true);\n   best_split_point.split_bbs = NULL;\n   basic_block return_bb = find_return_bb ();\n   int tsan_exit_found = -1;"}, {"sha": "a759f3c2aa875e0fa9316028fe67467fc7e380e3", "filename": "gcc/ira.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -4564,7 +4564,7 @@ find_moveable_pseudos (void)\n \n   first_moveable_pseudo = max_regs;\n   pseudo_replaced_reg.release ();\n-  pseudo_replaced_reg.safe_grow_cleared (max_regs);\n+  pseudo_replaced_reg.safe_grow_cleared (max_regs, true);\n \n   df_analyze ();\n   calculate_dominance_info (CDI_DOMINATORS);"}, {"sha": "82bb90ae3917d0f0919ece0ad03721f507c14447", "filename": "gcc/lower-subreg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Flower-subreg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Flower-subreg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -1526,7 +1526,7 @@ decompose_multiword_subregs (bool decompose_copies)\n   subreg_context = BITMAP_ALLOC (NULL);\n \n   reg_copy_graph.create (max);\n-  reg_copy_graph.safe_grow_cleared (max);\n+  reg_copy_graph.safe_grow_cleared (max, true);\n   memset (reg_copy_graph.address (), 0, sizeof (bitmap) * max);\n \n   speed_p = optimize_function_for_speed_p (cfun);"}, {"sha": "e02d69cc196f809f67d16ede42dc3058a933d9b3", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -610,7 +610,7 @@ input_eh_regions (class lto_input_block *ib, class data_in *data_in,\n   gcc_assert (len == (int) len);\n   if (len > 0)\n     {\n-      vec_safe_grow_cleared (fn->eh->region_array, len);\n+      vec_safe_grow_cleared (fn->eh->region_array, len, true);\n       for (i = 0; i < len; i++)\n \t{\n \t  eh_region r = input_eh_region (ib, data_in, i);\n@@ -623,7 +623,7 @@ input_eh_regions (class lto_input_block *ib, class data_in *data_in,\n   gcc_assert (len == (int) len);\n   if (len > 0)\n     {\n-      vec_safe_grow_cleared (fn->eh->lp_array, len);\n+      vec_safe_grow_cleared (fn->eh->lp_array, len, true);\n       for (i = 0; i < len; i++)\n \t{\n \t  eh_landing_pad lp = input_eh_lp (ib, data_in, i);\n@@ -636,7 +636,7 @@ input_eh_regions (class lto_input_block *ib, class data_in *data_in,\n   gcc_assert (len == (int) len);\n   if (len > 0)\n     {\n-      vec_safe_grow_cleared (fn->eh->ttype_data, len);\n+      vec_safe_grow_cleared (fn->eh->ttype_data, len, true);\n       for (i = 0; i < len; i++)\n \t{\n \t  tree ttype = stream_read_tree (ib, data_in);\n@@ -651,7 +651,7 @@ input_eh_regions (class lto_input_block *ib, class data_in *data_in,\n     {\n       if (targetm.arm_eabi_unwinder)\n \t{\n-\t  vec_safe_grow_cleared (fn->eh->ehspec_data.arm_eabi, len);\n+\t  vec_safe_grow_cleared (fn->eh->ehspec_data.arm_eabi, len, true);\n \t  for (i = 0; i < len; i++)\n \t    {\n \t      tree t = stream_read_tree (ib, data_in);\n@@ -660,7 +660,7 @@ input_eh_regions (class lto_input_block *ib, class data_in *data_in,\n \t}\n       else\n \t{\n-\t  vec_safe_grow_cleared (fn->eh->ehspec_data.other, len);\n+\t  vec_safe_grow_cleared (fn->eh->ehspec_data.other, len, true);\n \t  for (i = 0; i < len; i++)\n \t    {\n \t      uchar c = streamer_read_uchar (ib);\n@@ -712,10 +712,10 @@ input_cfg (class lto_input_block *ib, class data_in *data_in,\n \n   last_basic_block_for_fn (fn) = bb_count;\n   if (bb_count > basic_block_info_for_fn (fn)->length ())\n-    vec_safe_grow_cleared (basic_block_info_for_fn (fn), bb_count);\n+    vec_safe_grow_cleared (basic_block_info_for_fn (fn), bb_count, true);\n \n   if (bb_count > label_to_block_map_for_fn (fn)->length ())\n-    vec_safe_grow_cleared (label_to_block_map_for_fn (fn), bb_count);\n+    vec_safe_grow_cleared (label_to_block_map_for_fn (fn), bb_count, true);\n \n   index = streamer_read_hwi (ib);\n   while (index != -1)\n@@ -963,7 +963,7 @@ input_struct_function_base (struct function *fn, class data_in *data_in,\n   if (len > 0)\n     {\n       int i;\n-      vec_safe_grow_cleared (fn->local_decls, len);\n+      vec_safe_grow_cleared (fn->local_decls, len, true);\n       for (i = 0; i < len; i++)\n \t{\n \t  tree t = stream_read_tree (ib, data_in);\n@@ -1058,7 +1058,7 @@ input_function (tree fn_decl, class data_in *data_in,\n   if (n_debugargs)\n     {\n       vec<tree, va_gc> **debugargs = decl_debug_args_insert (fn_decl);\n-      vec_safe_grow (*debugargs, n_debugargs);\n+      vec_safe_grow (*debugargs, n_debugargs, true);\n       for (unsigned i = 0; i < n_debugargs; ++i)\n \t(**debugargs)[i] = stream_read_tree (ib, data_in);\n     }"}, {"sha": "3ca0fd83a41d2ae55adc5108d648b72d1e948c45", "filename": "gcc/lto/lto-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Flto%2Flto-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Flto%2Flto-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-common.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -2227,7 +2227,7 @@ lto_file_finalize (struct lto_file_decl_data *file_data, lto_file *file,\n \n   /* Create vector for fast access of resolution.  We do this lazily\n      to save memory.  */\n-  resolutions.safe_grow_cleared (file_data->max_index + 1);\n+  resolutions.safe_grow_cleared (file_data->max_index + 1, true);\n   for (i = 0; file_data->respairs.iterate (i, &rp); i++)\n     resolutions[rp->index] = rp->res;\n   file_data->respairs.release ();"}, {"sha": "86701e0555048ae016af89f5a0294edd9de4bed6", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -440,15 +440,15 @@ static void\n set_node_sched_params (ddg_ptr g)\n {\n   node_sched_param_vec.truncate (0);\n-  node_sched_param_vec.safe_grow_cleared (g->num_nodes);\n+  node_sched_param_vec.safe_grow_cleared (g->num_nodes, true);\n }\n \n /* Make sure that node_sched_param_vec has an entry for every move in PS.  */\n static void\n extend_node_sched_params (partial_schedule_ptr ps)\n {\n   node_sched_param_vec.safe_grow_cleared (ps->g->num_nodes\n-\t\t\t\t\t  + ps->reg_moves.length ());\n+\t\t\t\t\t  + ps->reg_moves.length (), true);\n }\n \n /* Update the sched_params (time, row and stage) for node U using the II,\n@@ -735,7 +735,7 @@ schedule_reg_moves (partial_schedule_ptr ps)\n \n       /* Create NREG_MOVES register moves.  */\n       first_move = ps->reg_moves.length ();\n-      ps->reg_moves.safe_grow_cleared (first_move + nreg_moves);\n+      ps->reg_moves.safe_grow_cleared (first_move + nreg_moves, true);\n       extend_node_sched_params (ps);\n \n       /* Record the moves associated with this node.  */"}, {"sha": "b70e3e31352c06b8a9fa5690c7132ea2e7cc21c9", "filename": "gcc/omp-general.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fomp-general.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fomp-general.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -1491,7 +1491,7 @@ omp_construct_simd_compare (tree clauses1, tree clauses2)\n \t  }\n \tunsigned HOST_WIDE_INT argno = tree_to_uhwi (OMP_CLAUSE_DECL (c));\n \tif (argno >= v->length ())\n-\t  v->safe_grow_cleared (argno + 1);\n+\t  v->safe_grow_cleared (argno + 1, true);\n \t(*v)[argno] = c;\n       }\n   /* Here, r is used as a bitmask, 2 is set if CLAUSES1 has something"}, {"sha": "6ff31ec37d7fd9f21bfa49a3102c112cebd0cbe0", "filename": "gcc/passes.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -892,7 +892,7 @@ pass_manager::create_pass_tab (void) const\n   if (!flag_dump_passes)\n     return;\n \n-  pass_tab.safe_grow_cleared (passes_by_id_size + 1);\n+  pass_tab.safe_grow_cleared (passes_by_id_size + 1, true);\n   m_name_to_pass_map->traverse <void *, passes_pass_traverse> (NULL);\n }\n \n@@ -1046,7 +1046,7 @@ enable_disable_pass (const char *arg, bool is_enable)\n     tab = &disabled_pass_uid_range_tab;\n \n   if ((unsigned) pass->static_pass_number >= tab->length ())\n-    tab->safe_grow_cleared (pass->static_pass_number + 1);\n+    tab->safe_grow_cleared (pass->static_pass_number + 1, true);\n \n   if (!range_str)\n     {"}, {"sha": "3c7b46f4c747deb5b2a2eddae062a8f331fb8edf", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -3764,7 +3764,7 @@ determine_unlikely_bbs ()\n   propagate_unlikely_bbs_forward ();\n \n   auto_vec<int, 64> nsuccs;\n-  nsuccs.safe_grow_cleared (last_basic_block_for_fn (cfun));\n+  nsuccs.safe_grow_cleared (last_basic_block_for_fn (cfun), true);\n   FOR_ALL_BB_FN (bb, cfun)\n     if (!(bb->count == profile_count::zero ())\n \t&& bb != EXIT_BLOCK_PTR_FOR_FN (cfun))"}, {"sha": "f5c206813c7edf74984fd09f2edc3f43859164b3", "filename": "gcc/profile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -412,7 +412,7 @@ compute_branch_probabilities (unsigned cfg_checksum, unsigned lineno_checksum)\n       return;\n     }\n \n-  bb_gcov_counts.safe_grow_cleared (last_basic_block_for_fn (cfun));\n+  bb_gcov_counts.safe_grow_cleared (last_basic_block_for_fn (cfun), true);\n   edge_gcov_counts = new hash_map<edge,gcov_type>;\n \n   /* Attach extra info block to each bb.  */"}, {"sha": "5ff51571f1544b350dbe225b94c89c292f72d2cf", "filename": "gcc/read-rtl-function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fread-rtl-function.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fread-rtl-function.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl-function.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -632,7 +632,7 @@ function_reader::parse_block ()\n \n   size_t new_size = m_highest_bb_idx + 1;\n   if (basic_block_info_for_fn (cfun)->length () < new_size)\n-    vec_safe_grow_cleared (basic_block_info_for_fn (cfun), new_size);\n+    vec_safe_grow_cleared (basic_block_info_for_fn (cfun), new_size, true);\n \n   last_basic_block_for_fn (cfun) = new_size;\n "}, {"sha": "3ec83a60baf4f61c5e9f149f368c0228b7aeaeb9", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -1627,7 +1627,7 @@ rtx_reader::read_rtx_code (const char *code_name)\n   if (reuse_id != -1)\n     {\n       /* Store away for later reuse.  */\n-      m_reuse_rtx_by_id.safe_grow_cleared (reuse_id + 1);\n+      m_reuse_rtx_by_id.safe_grow_cleared (reuse_id + 1, true);\n       m_reuse_rtx_by_id[reuse_id] = return_rtx;\n     }\n "}, {"sha": "8f98bd857501143160380a2e615d0f965a5ef0b3", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -318,7 +318,7 @@ stack_regs_mentioned (const_rtx insn)\n       /* Allocate some extra size to avoid too many reallocs, but\n \t do not grow too quickly.  */\n       max = uid + uid / 20 + 1;\n-      stack_regs_mentioned_data.safe_grow_cleared (max);\n+      stack_regs_mentioned_data.safe_grow_cleared (max, true);\n     }\n \n   test = stack_regs_mentioned_data[uid];"}, {"sha": "2a0e892e5fdae7cfb90384f6e6d272148d583dbe", "filename": "gcc/regrename.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -1948,7 +1948,7 @@ regrename_init (bool insn_info)\n   gcc_obstack_init (&rename_obstack);\n   insn_rr.create (0);\n   if (insn_info)\n-    insn_rr.safe_grow_cleared (get_max_uid ());\n+    insn_rr.safe_grow_cleared (get_max_uid (), true);\n }\n \n /* Free all global data used by the register renamer.  */"}, {"sha": "5ae38b7966d9ed47f0e6bfb41853ebf81453b0de", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -97,7 +97,7 @@ generic_subrtx_iterator <T>::add_single_to_queue (array_type &array,\n       /* A previous iteration might also have moved from the stack to the\n \t heap, in which case the heap array will already be big enough.  */\n       if (vec_safe_length (array.heap) <= i)\n-\tvec_safe_grow (array.heap, i + 1);\n+\tvec_safe_grow (array.heap, i + 1, true);\n       base = array.heap->address ();\n       memcpy (base, array.stack, sizeof (array.stack));\n       base[LOCAL_ELEMS] = x;"}, {"sha": "d8b5c53c6a40e5ec495f847b3cdadd79b216b8f0", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -4072,7 +4072,7 @@ init_deps_data_vector (void)\n {\n   int reserve = (sched_max_luid + 1 - h_d_i_d.length ());\n   if (reserve > 0 && ! h_d_i_d.space (reserve))\n-    h_d_i_d.safe_grow_cleared (3 * sched_max_luid / 2);\n+    h_d_i_d.safe_grow_cleared (3 * sched_max_luid / 2, true);\n }\n \n /* If it is profitable to use them, initialize or extend (depending on"}, {"sha": "f58628ae92d90a0206a15795ad801c0acb4e94e6", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -4152,14 +4152,14 @@ get_seqno_by_preds (rtx_insn *insn)\n void\n sel_extend_global_bb_info (void)\n {\n-  sel_global_bb_info.safe_grow_cleared (last_basic_block_for_fn (cfun));\n+  sel_global_bb_info.safe_grow_cleared (last_basic_block_for_fn (cfun), true);\n }\n \n /* Extend region-scope data structures for basic blocks.  */\n static void\n extend_region_bb_info (void)\n {\n-  sel_region_bb_info.safe_grow_cleared (last_basic_block_for_fn (cfun));\n+  sel_region_bb_info.safe_grow_cleared (last_basic_block_for_fn (cfun), true);\n }\n \n /* Extend all data structures to fit for all basic blocks.  */\n@@ -4209,7 +4209,7 @@ extend_insn_data (void)\n         size = 3 * sched_max_luid / 2;\n \n \n-      s_i_d.safe_grow_cleared (size);\n+      s_i_d.safe_grow_cleared (size, true);\n     }\n }\n "}, {"sha": "207c9e75890c0e39df94aedb4de26eba0803bfae", "filename": "gcc/symtab.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -592,7 +592,8 @@ symtab_node::create_reference (symtab_node *referred_node,\n \n   list = &ref_list;\n   old_references = vec_safe_address (list->references);\n-  vec_safe_grow (list->references, vec_safe_length (list->references) + 1);\n+  vec_safe_grow (list->references, vec_safe_length (list->references) + 1,\n+\t\t true);\n   ref = &list->references->last ();\n \n   list2 = &referred_node->ref_list;"}, {"sha": "82ede7225343e4de2e87dc1f0b42600214108ef6", "filename": "gcc/tracer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftracer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftracer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftracer.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -257,7 +257,7 @@ static bool\n tail_duplicate (void)\n {\n   auto_vec<fibonacci_node<long, basic_block_def>*> blocks;\n-  blocks.safe_grow_cleared (last_basic_block_for_fn (cfun));\n+  blocks.safe_grow_cleared (last_basic_block_for_fn (cfun), true);\n \n   basic_block *trace = XNEWVEC (basic_block, n_basic_blocks_for_fn (cfun));\n   int *counts = XNEWVEC (int, last_basic_block_for_fn (cfun));"}, {"sha": "e466b24400d090786488df1c734c95ae666d3830", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -2030,7 +2030,7 @@ tm_region_init (struct tm_region *region)\n   /* We could store this information in bb->aux, but we may get called\n      through get_all_tm_blocks() from another pass that may be already\n      using bb->aux.  */\n-  bb_regions.safe_grow_cleared (last_basic_block_for_fn (cfun));\n+  bb_regions.safe_grow_cleared (last_basic_block_for_fn (cfun), true);\n \n   all_tm_regions = region;\n   bb = single_succ (ENTRY_BLOCK_PTR_FOR_FN (cfun));\n@@ -2774,7 +2774,7 @@ get_bb_regions_instrumented (bool traverse_clones,\n   vec<tm_region *> ret;\n \n   ret.create (n);\n-  ret.safe_grow_cleared (n);\n+  ret.safe_grow_cleared (n, true);\n   stuff.bb2reg = &ret;\n   stuff.include_uninstrumented_p = include_uninstrumented_p;\n   expand_regions (all_tm_regions, collect_bb2reg, &stuff, traverse_clones);"}, {"sha": "2bae2eeddba34a8447bff299584f36f97898424b", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -183,12 +183,12 @@ init_empty_tree_cfg_for_function (struct function *fn)\n   last_basic_block_for_fn (fn) = NUM_FIXED_BLOCKS;\n   vec_alloc (basic_block_info_for_fn (fn), initial_cfg_capacity);\n   vec_safe_grow_cleared (basic_block_info_for_fn (fn),\n-\t\t\t initial_cfg_capacity);\n+\t\t\t initial_cfg_capacity, true);\n \n   /* Build a mapping of labels to their associated blocks.  */\n   vec_alloc (label_to_block_map_for_fn (fn), initial_cfg_capacity);\n   vec_safe_grow_cleared (label_to_block_map_for_fn (fn),\n-\t\t\t initial_cfg_capacity);\n+\t\t\t initial_cfg_capacity, true);\n \n   SET_BASIC_BLOCK_FOR_FN (fn, ENTRY_BLOCK, ENTRY_BLOCK_PTR_FOR_FN (fn));\n   SET_BASIC_BLOCK_FOR_FN (fn, EXIT_BLOCK, EXIT_BLOCK_PTR_FOR_FN (fn));\n@@ -232,7 +232,7 @@ build_gimple_cfg (gimple_seq seq)\n   if (basic_block_info_for_fn (cfun)->length ()\n       < (size_t) n_basic_blocks_for_fn (cfun))\n     vec_safe_grow_cleared (basic_block_info_for_fn (cfun),\n-\t\t\t   n_basic_blocks_for_fn (cfun));\n+\t\t\t   n_basic_blocks_for_fn (cfun), true);\n \n   /* To speed up statement iterator walks, we first purge dead labels.  */\n   cleanup_dead_labels ();\n@@ -685,7 +685,7 @@ create_bb (void *h, void *e, basic_block after)\n       size_t new_size =\n \t(last_basic_block_for_fn (cfun)\n \t + (last_basic_block_for_fn (cfun) + 3) / 4);\n-      vec_safe_grow_cleared (basic_block_info_for_fn (cfun), new_size);\n+      vec_safe_grow_cleared (basic_block_info_for_fn (cfun), new_size, true);\n     }\n \n   /* Add the newly created block to the array.  */\n@@ -7135,7 +7135,7 @@ move_block_to_fn (struct function *dest_cfun, basic_block bb,\n   if ((unsigned) cfg->x_last_basic_block >= old_len)\n     {\n       new_len = cfg->x_last_basic_block + (cfg->x_last_basic_block + 3) / 4;\n-      vec_safe_grow_cleared (cfg->x_basic_block_info, new_len);\n+      vec_safe_grow_cleared (cfg->x_basic_block_info, new_len, true);\n     }\n \n   (*cfg->x_basic_block_info)[bb->index] = bb;\n@@ -7211,7 +7211,7 @@ move_block_to_fn (struct function *dest_cfun, basic_block bb,\n \t  if (old_len <= (unsigned) uid)\n \t    {\n \t      new_len = 3 * uid / 2 + 1;\n-\t      vec_safe_grow_cleared (cfg->x_label_to_block_map, new_len);\n+\t      vec_safe_grow_cleared (cfg->x_label_to_block_map, new_len, true);\n \t    }\n \n \t  (*cfg->x_label_to_block_map)[uid] = bb;"}, {"sha": "2e54bbb917c643b9d8ffda9fea0d8b9723fbd801", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -1776,7 +1776,7 @@ tree_lower_complex (void)\n     return 0;\n \n   complex_lattice_values.create (num_ssa_names);\n-  complex_lattice_values.safe_grow_cleared (num_ssa_names);\n+  complex_lattice_values.safe_grow_cleared (num_ssa_names, true);\n \n   init_parameter_lattice_values ();\n   class complex_propagate complex_propagate;\n@@ -1787,7 +1787,7 @@ tree_lower_complex (void)\n   complex_variable_components = new int_tree_htab_type (10);\n \n   complex_ssa_name_components.create (2 * num_ssa_names);\n-  complex_ssa_name_components.safe_grow_cleared (2 * num_ssa_names);\n+  complex_ssa_name_components.safe_grow_cleared (2 * num_ssa_names, true);\n \n   update_parameter_components ();\n "}, {"sha": "4b8d457867edb53ebed7646842748ec59645caee", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -2222,7 +2222,7 @@ predicate_rhs_code (gassign *stmt, tree mask, tree cond,\n \n   /* Construct the arguments to the conditional internal function.   */\n   auto_vec<tree, 8> args;\n-  args.safe_grow (nops + 1);\n+  args.safe_grow (nops + 1, true);\n   args[0] = mask;\n   for (unsigned int i = 1; i < nops; ++i)\n     args[i] = gimple_op (stmt, i);"}, {"sha": "0d33ee72c0f3e4d3825d19af0dfcdc081dc64851", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -2099,7 +2099,7 @@ copy_bb (copy_body_data *id, basic_block bb,\n \t      /* Create the new array of arguments.  */\n \t      n = nargs + gimple_call_num_args (call_stmt);\n \t      argarray.create (n);\n-\t      argarray.safe_grow_cleared (n);\n+\t      argarray.safe_grow_cleared (n, true);\n \n \t      /* Copy all the arguments before '...'  */\n \t      memcpy (argarray.address (),"}, {"sha": "0d01613477404ca8ee644be239da92f0fee4aa3d", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -323,7 +323,7 @@ get_ssa_name_ann (tree name)\n \n   /* Re-allocate the vector at most once per update/into-SSA.  */\n   if (ver >= len)\n-    info_for_ssa_name.safe_grow_cleared (num_ssa_names);\n+    info_for_ssa_name.safe_grow_cleared (num_ssa_names, true);\n \n   /* But allocate infos lazily.  */\n   info = info_for_ssa_name[ver];\n@@ -944,7 +944,7 @@ mark_phi_for_rewrite (basic_block bb, gphi *phi)\n     {\n       n = (unsigned) last_basic_block_for_fn (cfun) + 1;\n       if (phis_to_rewrite.length () < n)\n-\tphis_to_rewrite.safe_grow_cleared (n);\n+\tphis_to_rewrite.safe_grow_cleared (n, true);\n \n       phis = phis_to_rewrite[idx];\n       gcc_assert (!phis.exists ());"}, {"sha": "c107cb4a86619e3f9cf9eac5e9182e4d244b2b02", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -612,7 +612,7 @@ compute_builtin_object_size (tree ptr, int object_size_type,\n       unsigned int i;\n \n       if (num_ssa_names > object_sizes[object_size_type].length ())\n-\tobject_sizes[object_size_type].safe_grow (num_ssa_names);\n+\tobject_sizes[object_size_type].safe_grow (num_ssa_names, true);\n       if (dump_file)\n \t{\n \t  fprintf (dump_file, \"Computing %s %sobject size for \",\n@@ -1282,7 +1282,7 @@ init_object_sizes (void)\n \n   for (object_size_type = 0; object_size_type <= 3; object_size_type++)\n     {\n-      object_sizes[object_size_type].safe_grow (num_ssa_names);\n+      object_sizes[object_size_type].safe_grow (num_ssa_names, true);\n       computed[object_size_type] = BITMAP_ALLOC (NULL);\n     }\n "}, {"sha": "b1d6e63559c732d2f518ff6ef008cf3ebb11c1b2", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -1783,7 +1783,7 @@ initialize_root_vars_store_elim_1 (chain_p chain)\n   unsigned i, n = chain->length;\n \n   chain->vars.create (n);\n-  chain->vars.safe_grow_cleared (n);\n+  chain->vars.safe_grow_cleared (n, true);\n \n   /* Initialize root value for eliminated stores at each distance.  */\n   for (i = 0; i < n; i++)\n@@ -1843,7 +1843,7 @@ initialize_root_vars_store_elim_2 (class loop *loop,\n   /* Root values are either rhs operand of stores to be eliminated, or\n      loaded from memory before loop.  */\n   auto_vec<tree> vtemps;\n-  vtemps.safe_grow_cleared (n);\n+  vtemps.safe_grow_cleared (n, true);\n   for (i = 0; i < n; i++)\n     {\n       init = get_init_expr (chain, i);\n@@ -2953,7 +2953,7 @@ prepare_initializers_chain_store_elim (class loop *loop, chain_p chain)\n     }\n \n   chain->inits.create (n);\n-  chain->inits.safe_grow_cleared (n);\n+  chain->inits.safe_grow_cleared (n, true);\n \n   /* For store eliminatin chain like below:\n \n@@ -2971,7 +2971,7 @@ prepare_initializers_chain_store_elim (class loop *loop, chain_p chain)\n      elements because loop body is guaranteed to be executed at least once\n      after loop's preheader edge.  */\n   auto_vec<bool> bubbles;\n-  bubbles.safe_grow_cleared (n + 1);\n+  bubbles.safe_grow_cleared (n + 1, true);\n   for (i = 0; i < chain->refs.length (); i++)\n     bubbles[chain->refs[i]->distance] = true;\n "}, {"sha": "ec3741d759824679f40d7ca0be92b39e784d4764", "filename": "gcc/tree-ssa-address.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-ssa-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-ssa-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-address.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -216,7 +216,7 @@ addr_for_mem_ref (struct mem_address *addr, addr_space_t as,\n \t= TEMPL_IDX (as, addr->symbol, addr->base, addr->index, st, off);\n \n       if (templ_index >= vec_safe_length (mem_addr_template_list))\n-\tvec_safe_grow_cleared (mem_addr_template_list, templ_index + 1);\n+\tvec_safe_grow_cleared (mem_addr_template_list, templ_index + 1, true);\n \n       /* Reuse the templates for addresses, so that we do not waste memory.  */\n       templ = &(*mem_addr_template_list)[templ_index];\n@@ -570,7 +570,7 @@ multiplier_allowed_in_address_p (HOST_WIDE_INT ratio, machine_mode mode,\n   sbitmap valid_mult;\n \n   if (data_index >= valid_mult_list.length ())\n-    valid_mult_list.safe_grow_cleared (data_index + 1);\n+    valid_mult_list.safe_grow_cleared (data_index + 1, true);\n \n   valid_mult = valid_mult_list[data_index];\n   if (!valid_mult)"}, {"sha": "a0537fb3d359ef79d3124928cd8eb0941a024c2f", "filename": "gcc/tree-ssa-coalesce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-ssa-coalesce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-ssa-coalesce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-coalesce.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -541,7 +541,7 @@ ssa_conflicts_new (unsigned size)\n   ptr = XNEW (ssa_conflicts);\n   bitmap_obstack_initialize (&ptr->obstack);\n   ptr->conflicts.create (size);\n-  ptr->conflicts.safe_grow_cleared (size);\n+  ptr->conflicts.safe_grow_cleared (size, true);\n   return ptr;\n }\n "}, {"sha": "e2d008dfb92a8781ef0a9b4633981ef025587799", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -2290,7 +2290,7 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n   tree one_constant = NULL_TREE;\n   tree one_nonconstant = NULL_TREE;\n   auto_vec<tree> constants;\n-  constants.safe_grow_cleared (nelts);\n+  constants.safe_grow_cleared (nelts, true);\n   auto_vec<std::pair<unsigned, unsigned>, 64> elts;\n   FOR_EACH_VEC_SAFE_ELT (CONSTRUCTOR_ELTS (op), i, elt)\n     {"}, {"sha": "5acf044161c07b9b799a2a650f14dc5ddd55264c", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -2601,7 +2601,7 @@ addr_offset_valid_p (struct iv_use *use, poly_int64 offset)\n \n   list_index = (unsigned) as * MAX_MACHINE_MODE + (unsigned) mem_mode;\n   if (list_index >= vec_safe_length (addr_list))\n-    vec_safe_grow_cleared (addr_list, list_index + MAX_MACHINE_MODE);\n+    vec_safe_grow_cleared (addr_list, list_index + MAX_MACHINE_MODE, true);\n \n   addr = (*addr_list)[list_index];\n   if (!addr)\n@@ -4569,7 +4569,7 @@ get_address_cost_ainc (poly_int64 ainc_step, poly_int64 ainc_offset,\n       unsigned nsize = ((unsigned) as + 1) *MAX_MACHINE_MODE;\n \n       gcc_assert (nsize > idx);\n-      ainc_cost_data_list.safe_grow_cleared (nsize);\n+      ainc_cost_data_list.safe_grow_cleared (nsize, true);\n     }\n \n   ainc_cost_data *data = ainc_cost_data_list[idx];"}, {"sha": "b3647d9efcac0b30a5d5b424fdc93095c27f73a9", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -4002,7 +4002,7 @@ discover_iteration_bound_by_body_walk (class loop *loop)\n \n   /* Start walk in loop header with index set to infinite bound.  */\n   queue_index = bounds.length ();\n-  queues.safe_grow_cleared (queue_index + 1);\n+  queues.safe_grow_cleared (queue_index + 1, true);\n   queue.safe_push (loop->header);\n   queues[queue_index] = queue;\n   block_priority.put (loop->header, queue_index);"}, {"sha": "63f3a81e94c2056f8a548e580e8f99c5bb12511b", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -626,7 +626,7 @@ add_to_value (unsigned int v, pre_expr e)\n \n   if (v >= value_expressions.length ())\n     {\n-      value_expressions.safe_grow_cleared (v + 1);\n+      value_expressions.safe_grow_cleared (v + 1, true);\n     }\n \n   set = value_expressions[v];\n@@ -1451,7 +1451,8 @@ phi_translate_1 (bitmap_set_t dest,\n \t    else\n \t      {\n \t\tnew_val_id = get_next_value_id ();\n-\t\tvalue_expressions.safe_grow_cleared (get_max_value_id () + 1);\n+\t\tvalue_expressions.safe_grow_cleared (get_max_value_id () + 1,\n+\t\t\t\t\t\t     true);\n \t\tnary = vn_nary_op_insert_pieces (newnary->length,\n \t\t\t\t\t\t newnary->opcode,\n \t\t\t\t\t\t newnary->type,\n@@ -1605,7 +1606,7 @@ phi_translate_1 (bitmap_set_t dest,\n \t\t  {\n \t\t    new_val_id = get_next_value_id ();\n \t\t    value_expressions.safe_grow_cleared\n-\t\t      (get_max_value_id () + 1);\n+\t\t      (get_max_value_id () + 1, true);\n \t\t  }\n \t\telse\n \t\t  new_val_id = ref->value_id;\n@@ -3193,7 +3194,7 @@ do_pre_regular_insertion (basic_block block, basic_block dom)\n   int i;\n \n   exprs = sorted_array_from_bitmap_set (ANTIC_IN (block));\n-  avail.safe_grow (EDGE_COUNT (block->preds));\n+  avail.safe_grow (EDGE_COUNT (block->preds), true);\n \n   FOR_EACH_VEC_ELT (exprs, i, expr)\n     {\n@@ -3360,7 +3361,7 @@ do_pre_partial_partial_insertion (basic_block block, basic_block dom)\n   int i;\n \n   exprs = sorted_array_from_bitmap_set (PA_IN (block));\n-  avail.safe_grow (EDGE_COUNT (block->preds));\n+  avail.safe_grow (EDGE_COUNT (block->preds), true);\n \n   FOR_EACH_VEC_ELT (exprs, i, expr)\n     {\n@@ -4099,7 +4100,7 @@ init_pre (void)\n   expressions.create (0);\n   expressions.safe_push (NULL);\n   value_expressions.create (get_max_value_id () + 1);\n-  value_expressions.safe_grow_cleared (get_max_value_id () + 1);\n+  value_expressions.safe_grow_cleared (get_max_value_id () + 1, true);\n   name_to_id.create (0);\n \n   inserted_exprs = BITMAP_ALLOC (NULL);"}, {"sha": "5a30176d3b451b208242c5c3642c1bc53814f050", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -420,7 +420,7 @@ ssa_prop_init (void)\n       FOR_EACH_EDGE (e, ei, bb->succs)\n \te->flags &= ~EDGE_EXECUTABLE;\n     }\n-  uid_to_stmt.safe_grow (gimple_stmt_max_uid (cfun));\n+  uid_to_stmt.safe_grow (gimple_stmt_max_uid (cfun), true);\n }\n \n \n@@ -671,7 +671,7 @@ update_call_from_tree (gimple_stmt_iterator *si_p, tree expr)\n       if (nargs > 0)\n         {\n           args.create (nargs);\n-          args.safe_grow_cleared (nargs);\n+\t  args.safe_grow_cleared (nargs, true);\n \n           for (i = 0; i < nargs; i++)\n             args[i] = CALL_EXPR_ARG (expr, i);"}, {"sha": "facc794cdcc0861213bf92d8223f16e9734eee3e", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -3365,9 +3365,9 @@ optimize_range_tests_cmp_bitwise (enum tree_code opcode, int first, int length,\n \n       b = TYPE_PRECISION (TREE_TYPE (ranges[i].exp)) * 2 + !zero_p;\n       if (buckets.length () <= b)\n-\tbuckets.safe_grow_cleared (b + 1);\n+\tbuckets.safe_grow_cleared (b + 1, true);\n       if (chains.length () <= (unsigned) i)\n-\tchains.safe_grow (i + 1);\n+\tchains.safe_grow (i + 1, true);\n       chains[i] = buckets[b];\n       buckets[b] = i + 1;\n     }"}, {"sha": "c5f4a1e53a9a7e045e57a8f0911179899ec1e4e8", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -3157,7 +3157,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n       /* We need to pre-pend vr->operands[0..i] to rhs.  */\n       vec<vn_reference_op_s> old = vr->operands;\n       if (i + 1 + rhs.length () > vr->operands.length ())\n-\tvr->operands.safe_grow (i + 1 + rhs.length ());\n+\tvr->operands.safe_grow (i + 1 + rhs.length (), true);\n       else\n \tvr->operands.truncate (i + 1 + rhs.length ());\n       FOR_EACH_VEC_ELT (rhs, j, vro)\n@@ -3362,7 +3362,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n       if (vr->operands.length () < 2)\n \t{\n \t  vec<vn_reference_op_s> old = vr->operands;\n-\t  vr->operands.safe_grow_cleared (2);\n+\t  vr->operands.safe_grow_cleared (2, true);\n \t  if (old == shared_lookup_references)\n \t    shared_lookup_references = vr->operands;\n \t}\n@@ -3448,7 +3448,7 @@ vn_reference_lookup_pieces (tree vuse, alias_set_type set,\n \n   vr1.vuse = vuse_ssa_val (vuse);\n   shared_lookup_references.truncate (0);\n-  shared_lookup_references.safe_grow (operands.length ());\n+  shared_lookup_references.safe_grow (operands.length (), true);\n   memcpy (shared_lookup_references.address (),\n \t  operands.address (),\n \t  sizeof (vn_reference_op_s)\n@@ -5715,7 +5715,7 @@ eliminate_dom_walker::eliminate_push_avail (basic_block, tree op)\n   if (TREE_CODE (valnum) == SSA_NAME)\n     {\n       if (avail.length () <= SSA_NAME_VERSION (valnum))\n-\tavail.safe_grow_cleared (SSA_NAME_VERSION (valnum) + 1);\n+\tavail.safe_grow_cleared (SSA_NAME_VERSION (valnum) + 1, true);\n       tree pushop = op;\n       if (avail[SSA_NAME_VERSION (valnum)])\n \tpushop = avail[SSA_NAME_VERSION (valnum)];"}, {"sha": "47f537ab210e7aed85df114941fc262c5c382712", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -712,7 +712,7 @@ set_strinfo (int idx, strinfo *si)\n   if (vec_safe_length (stridx_to_strinfo) && (*stridx_to_strinfo)[0])\n     unshare_strinfo_vec ();\n   if (vec_safe_length (stridx_to_strinfo) <= (unsigned int) idx)\n-    vec_safe_grow_cleared (stridx_to_strinfo, idx + 1);\n+    vec_safe_grow_cleared (stridx_to_strinfo, idx + 1, true);\n   (*stridx_to_strinfo)[idx] = si;\n }\n \n@@ -1365,7 +1365,7 @@ get_stridx_plus_constant (strinfo *basesi, unsigned HOST_WIDE_INT off,\n \n   if (TREE_CODE (ptr) == SSA_NAME\n       && ssa_ver_to_stridx.length () <= SSA_NAME_VERSION (ptr))\n-    ssa_ver_to_stridx.safe_grow_cleared (num_ssa_names);\n+    ssa_ver_to_stridx.safe_grow_cleared (num_ssa_names, true);\n \n   gcc_checking_assert (compare_tree_int (si->nonzero_chars, off) != -1);\n   for (chainsi = si; chainsi->next; chainsi = si)\n@@ -1429,7 +1429,7 @@ zero_length_string (tree ptr, strinfo *chainsi)\n   strinfo *si;\n   int idx;\n   if (ssa_ver_to_stridx.length () <= SSA_NAME_VERSION (ptr))\n-    ssa_ver_to_stridx.safe_grow_cleared (num_ssa_names);\n+    ssa_ver_to_stridx.safe_grow_cleared (num_ssa_names, true);\n   gcc_checking_assert (TREE_CODE (ptr) == SSA_NAME\n \t\t       && ssa_ver_to_stridx[SSA_NAME_VERSION (ptr)] == 0);\n \n@@ -1582,7 +1582,7 @@ find_equal_ptrs (tree ptr, int idx)\n       /* We might find an endptr created in this pass.  Grow the\n \t vector in that case.  */\n       if (ssa_ver_to_stridx.length () <= SSA_NAME_VERSION (ptr))\n-\tssa_ver_to_stridx.safe_grow_cleared (num_ssa_names);\n+\tssa_ver_to_stridx.safe_grow_cleared (num_ssa_names, true);\n \n       if (ssa_ver_to_stridx[SSA_NAME_VERSION (ptr)] != 0)\n \treturn;\n@@ -5920,7 +5920,7 @@ printf_strlen_execute (function *fun, bool warn_only)\n \n   /* This has to happen after initializing the loop optimizer\n      and initializing SCEV as they create new SSA_NAMEs.  */\n-  ssa_ver_to_stridx.safe_grow_cleared (num_ssa_names);\n+  ssa_ver_to_stridx.safe_grow_cleared (num_ssa_names, true);\n   max_stridx = 1;\n \n   /* String length optimization is implemented as a walk of the dominator"}, {"sha": "03a210846cbe1fbd9f79e58f8faec8bf5b1de338", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -59,7 +59,7 @@ void\n set_ssa_name_value (tree name, tree value)\n {\n   if (SSA_NAME_VERSION (name) >= ssa_name_values.length ())\n-    ssa_name_values.safe_grow_cleared (SSA_NAME_VERSION (name) + 1);\n+    ssa_name_values.safe_grow_cleared (SSA_NAME_VERSION (name) + 1, true);\n   if (value && TREE_OVERFLOW_P (value))\n     value = drop_tree_overflow (value);\n   ssa_name_values[SSA_NAME_VERSION (name)] = value;"}, {"sha": "6ac97fe39c49daa81a0b8dd2a54182235c51d8d4", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -287,7 +287,7 @@ make_ssa_name_fn (struct function *fn, tree var, gimple *stmt,\n       t = make_node (SSA_NAME);\n       SSA_NAME_VERSION (t) = version;\n       if (version >= SSANAMES (fn)->length ())\n-\tvec_safe_grow_cleared (SSANAMES (fn), version + 1);\n+\tvec_safe_grow_cleared (SSANAMES (fn), version + 1, true);\n       gcc_assert ((*SSANAMES (fn))[version] == NULL);\n       (*SSANAMES (fn))[version] = t;\n       ssa_name_nodes_created++;"}, {"sha": "a456709ffd84194cd1f71a9adcaac0a2918611c3", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -555,7 +555,7 @@ streamer_read_tree_bitfields (class lto_input_block *ib,\n     {\n       unsigned HOST_WIDE_INT length = bp_unpack_var_len_unsigned (&bp);\n       if (length > 0)\n-\tvec_safe_grow (CONSTRUCTOR_ELTS (expr), length);\n+\tvec_safe_grow (CONSTRUCTOR_ELTS (expr), length, true);\n     }\n \n #ifndef ACCEL_COMPILER"}, {"sha": "362cdc4f1cbd9bbb3ad6bc067debb4ba036059ad", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -8394,7 +8394,7 @@ vect_record_loop_mask (loop_vec_info loop_vinfo, vec_loop_masks *masks,\n {\n   gcc_assert (nvectors != 0);\n   if (masks->length () < nvectors)\n-    masks->safe_grow_cleared (nvectors);\n+    masks->safe_grow_cleared (nvectors, true);\n   rgroup_controls *rgm = &(*masks)[nvectors - 1];\n   /* The number of scalars per iteration and the number of vectors are\n      both compile-time constants.  */\n@@ -8434,7 +8434,7 @@ vect_get_loop_mask (gimple_stmt_iterator *gsi, vec_loop_masks *masks,\n      used it.  */\n   if (rgm->controls.is_empty ())\n     {\n-      rgm->controls.safe_grow_cleared (nvectors);\n+      rgm->controls.safe_grow_cleared (nvectors, true);\n       for (unsigned int i = 0; i < nvectors; ++i)\n \t{\n \t  tree mask = make_temp_ssa_name (mask_type, NULL, \"loop_mask\");\n@@ -8476,7 +8476,7 @@ vect_record_loop_len (loop_vec_info loop_vinfo, vec_loop_lens *lens,\n {\n   gcc_assert (nvectors != 0);\n   if (lens->length () < nvectors)\n-    lens->safe_grow_cleared (nvectors);\n+    lens->safe_grow_cleared (nvectors, true);\n   rgroup_controls *rgl = &(*lens)[nvectors - 1];\n \n   /* The number of scalars per iteration, scalar occupied bytes and\n@@ -8512,7 +8512,7 @@ vect_get_loop_len (loop_vec_info loop_vinfo, vec_loop_lens *lens,\n      used it.  */\n   if (rgl->controls.is_empty ())\n     {\n-      rgl->controls.safe_grow_cleared (nvectors);\n+      rgl->controls.safe_grow_cleared (nvectors, true);\n       for (unsigned int i = 0; i < nvectors; ++i)\n \t{\n \t  tree len_type = LOOP_VINFO_RGROUP_COMPARE_TYPE (loop_vinfo);"}, {"sha": "478a45a228171077434c89ade5cf0ba15d62672c", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -4282,7 +4282,7 @@ vect_recog_mask_conversion_pattern (vec_info *vinfo,\n \n       auto_vec<tree, 8> args;\n       unsigned int nargs = gimple_call_num_args (last_stmt);\n-      args.safe_grow (nargs);\n+      args.safe_grow (nargs, true);\n       for (unsigned int i = 0; i < nargs; ++i)\n \targs[i] = ((int) i == mask_argno\n \t\t   ? tmp"}, {"sha": "15e5f277eaccf892539c31f72aebea08ad02e8a2", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -2804,7 +2804,7 @@ vect_slp_convert_to_external (vec_info *vinfo, slp_tree node,\n      (need to) ignore child nodes of anything that isn't vect_internal_def.  */\n   unsigned int group_size = SLP_TREE_LANES (node);\n   SLP_TREE_DEF_TYPE (node) = vect_external_def;\n-  SLP_TREE_SCALAR_OPS (node).safe_grow (group_size);\n+  SLP_TREE_SCALAR_OPS (node).safe_grow (group_size, true);\n   FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (node), i, stmt_info)\n     {\n       tree lhs = gimple_get_lhs (vect_orig_stmt (stmt_info)->stmt);\n@@ -3102,7 +3102,7 @@ vect_bb_slp_scalar_cost (vec_info *vinfo,\n \t     confine changes in the callee to the current child/subtree.  */\n \t  if (SLP_TREE_CODE (node) == VEC_PERM_EXPR)\n \t    {\n-\t      subtree_life.safe_grow_cleared (SLP_TREE_LANES (child));\n+\t      subtree_life.safe_grow_cleared (SLP_TREE_LANES (child), true);\n \t      for (unsigned j = 0;\n \t\t   j < SLP_TREE_LANE_PERMUTATION (node).length (); ++j)\n \t\t{\n@@ -3141,7 +3141,8 @@ vect_bb_vectorization_profitable_p (bb_vec_info bb_vinfo)\n   FOR_EACH_VEC_ELT (slp_instances, i, instance)\n     {\n       auto_vec<bool, 20> life;\n-      life.safe_grow_cleared (SLP_TREE_LANES (SLP_INSTANCE_TREE (instance)));\n+      life.safe_grow_cleared (SLP_TREE_LANES (SLP_INSTANCE_TREE (instance)),\n+\t\t\t      true);\n       vect_bb_slp_scalar_cost (bb_vinfo,\n \t\t\t       SLP_INSTANCE_TREE (instance),\n \t\t\t       &life, &scalar_costs, visited);\n@@ -4127,7 +4128,7 @@ vectorizable_slp_permutation (vec_info *vinfo, gimple_stmt_iterator *gsi,\n   auto_vec<std::pair<std::pair<unsigned, unsigned>, unsigned> > vperm;\n   auto_vec<unsigned> active_lane;\n   vperm.create (olanes);\n-  active_lane.safe_grow_cleared (SLP_TREE_CHILDREN (node).length ());\n+  active_lane.safe_grow_cleared (SLP_TREE_CHILDREN (node).length (), true);\n   for (unsigned i = 0; i < vf; ++i)\n     {\n       for (unsigned pi = 0; pi < perm.length (); ++pi)"}, {"sha": "7e072a2e636ad539901719fd65ab518694fc3722", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -3372,8 +3372,8 @@ vectorizable_call (vec_info *vinfo,\n   if (modifier == NONE || ifn != IFN_LAST)\n     {\n       tree prev_res = NULL_TREE;\n-      vargs.safe_grow (nargs);\n-      orig_vargs.safe_grow (nargs);\n+      vargs.safe_grow (nargs, true);\n+      orig_vargs.safe_grow (nargs, true);\n       auto_vec<vec<tree> > vec_defs (nargs);\n       for (j = 0; j < ncopies; ++j)\n \t{\n@@ -4020,7 +4020,8 @@ vectorizable_simd_clone_call (vec_info *vinfo, stmt_vec_info stmt_info,\n \t\t== SIMD_CLONE_ARG_TYPE_LINEAR_REF_CONSTANT_STEP))\n \t  {\n \t    STMT_VINFO_SIMD_CLONE_INFO (stmt_info).safe_grow_cleared (i * 3\n-\t\t\t\t\t\t\t\t\t+ 1);\n+\t\t\t\t\t\t\t\t\t+ 1,\n+\t\t\t\t\t\t\t\t      true);\n \t    STMT_VINFO_SIMD_CLONE_INFO (stmt_info).safe_push (arginfo[i].op);\n \t    tree lst = POINTER_TYPE_P (TREE_TYPE (arginfo[i].op))\n \t\t       ? size_type_node : TREE_TYPE (arginfo[i].op);\n@@ -4060,8 +4061,8 @@ vectorizable_simd_clone_call (vec_info *vinfo, stmt_vec_info stmt_info,\n \n   auto_vec<vec<tree> > vec_oprnds;\n   auto_vec<unsigned> vec_oprnds_i;\n-  vec_oprnds.safe_grow_cleared (nargs);\n-  vec_oprnds_i.safe_grow_cleared (nargs);\n+  vec_oprnds.safe_grow_cleared (nargs, true);\n+  vec_oprnds_i.safe_grow_cleared (nargs, true);\n   for (j = 0; j < ncopies; ++j)\n     {\n       /* Build argument list for the vectorized call.  */\n@@ -6356,7 +6357,7 @@ scan_store_can_perm_p (tree vectype, tree init,\n       if (use_whole_vector)\n \t{\n \t  if (kind != scan_store_kind_perm && use_whole_vector->is_empty ())\n-\t    use_whole_vector->safe_grow_cleared (i);\n+\t    use_whole_vector->safe_grow_cleared (i, true);\n \t  if (kind != scan_store_kind_perm || !use_whole_vector->is_empty ())\n \t    use_whole_vector->safe_push (kind);\n \t}\n@@ -7839,7 +7840,7 @@ vectorizable_store (vec_info *vinfo,\n   tree vec_mask = NULL;\n   auto_vec<tree> vec_offsets;\n   auto_vec<vec<tree> > gvec_oprnds;\n-  gvec_oprnds.safe_grow_cleared (group_size);\n+  gvec_oprnds.safe_grow_cleared (group_size, true);\n   for (j = 0; j < ncopies; j++)\n     {\n       gimple *new_stmt;"}, {"sha": "a28899170ed65622ffcf755c6ffecb289dc4c12e", "filename": "gcc/vec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fvec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fvec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.c?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -338,7 +338,7 @@ test_safe_grow_cleared ()\n {\n   auto_vec <int> v;\n   ASSERT_EQ (0, v.length ());\n-  v.safe_grow_cleared (50);\n+  v.safe_grow_cleared (50, true);\n   ASSERT_EQ (50, v.length ());\n   ASSERT_EQ (0, v[0]);\n   ASSERT_EQ (0, v[49]);"}, {"sha": "b0d2e3164e4f496b085c45def01af177ae6ba4d0", "filename": "gcc/vec.h", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3874dcf82bc80c2552ef62f57cf08c28fc686a/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=cb3874dcf82bc80c2552ef62f57cf08c28fc686a", "patch": "@@ -723,22 +723,24 @@ vec_free (vec<T, A, vl_embed> *&v)\n /* Grow V to length LEN.  Allocate it, if necessary.  */\n template<typename T, typename A>\n inline void\n-vec_safe_grow (vec<T, A, vl_embed> *&v, unsigned len CXX_MEM_STAT_INFO)\n+vec_safe_grow (vec<T, A, vl_embed> *&v, unsigned len,\n+\t       bool exact CXX_MEM_STAT_INFO)\n {\n   unsigned oldlen = vec_safe_length (v);\n   gcc_checking_assert (len >= oldlen);\n-  vec_safe_reserve_exact (v, len - oldlen PASS_MEM_STAT);\n+  vec_safe_reserve (v, len - oldlen, exact PASS_MEM_STAT);\n   v->quick_grow (len);\n }\n \n \n /* If V is NULL, allocate it.  Call V->safe_grow_cleared(LEN).  */\n template<typename T, typename A>\n inline void\n-vec_safe_grow_cleared (vec<T, A, vl_embed> *&v, unsigned len CXX_MEM_STAT_INFO)\n+vec_safe_grow_cleared (vec<T, A, vl_embed> *&v, unsigned len,\n+\t\t       bool exact CXX_MEM_STAT_INFO)\n {\n   unsigned oldlen = vec_safe_length (v);\n-  vec_safe_grow (v, len PASS_MEM_STAT);\n+  vec_safe_grow (v, len, exact PASS_MEM_STAT);\n   vec_default_construct (v->address () + oldlen, len - oldlen);\n }\n \n@@ -748,9 +750,9 @@ vec_safe_grow_cleared (vec<T, A, vl_embed> *&v, unsigned len CXX_MEM_STAT_INFO)\n template<typename T>\n inline void\n vec_safe_grow_cleared (vec<T, va_heap, vl_ptr> *&v,\n-\t\t       unsigned len CXX_MEM_STAT_INFO)\n+\t\t       unsigned len, bool exact CXX_MEM_STAT_INFO)\n {\n-  v->safe_grow_cleared (len PASS_MEM_STAT);\n+  v->safe_grow_cleared (len, exact PASS_MEM_STAT);\n }\n \n /* If V does not have space for NELEMS elements, call\n@@ -1465,8 +1467,8 @@ struct vec<T, va_heap, vl_ptr>\n   T *safe_push (const T &CXX_MEM_STAT_INFO);\n   T &pop (void);\n   void truncate (unsigned);\n-  void safe_grow (unsigned CXX_MEM_STAT_INFO);\n-  void safe_grow_cleared (unsigned CXX_MEM_STAT_INFO);\n+  void safe_grow (unsigned, bool CXX_MEM_STAT_INFO);\n+  void safe_grow_cleared (unsigned, bool CXX_MEM_STAT_INFO);\n   void quick_grow (unsigned);\n   void quick_grow_cleared (unsigned);\n   void quick_insert (unsigned, const T &);\n@@ -1892,11 +1894,11 @@ vec<T, va_heap, vl_ptr>::truncate (unsigned size)\n \n template<typename T>\n inline void\n-vec<T, va_heap, vl_ptr>::safe_grow (unsigned len MEM_STAT_DECL)\n+vec<T, va_heap, vl_ptr>::safe_grow (unsigned len, bool exact MEM_STAT_DECL)\n {\n   unsigned oldlen = length ();\n   gcc_checking_assert (oldlen <= len);\n-  reserve_exact (len - oldlen PASS_MEM_STAT);\n+  reserve (len - oldlen, exact PASS_MEM_STAT);\n   if (m_vec)\n     m_vec->quick_grow (len);\n   else\n@@ -1910,11 +1912,12 @@ vec<T, va_heap, vl_ptr>::safe_grow (unsigned len MEM_STAT_DECL)\n \n template<typename T>\n inline void\n-vec<T, va_heap, vl_ptr>::safe_grow_cleared (unsigned len MEM_STAT_DECL)\n+vec<T, va_heap, vl_ptr>::safe_grow_cleared (unsigned len, bool exact\n+\t\t\t\t\t    MEM_STAT_DECL)\n {\n   unsigned oldlen = length ();\n   size_t growby = len - oldlen;\n-  safe_grow (len PASS_MEM_STAT);\n+  safe_grow (len, exact PASS_MEM_STAT);\n   if (growby != 0)\n     vec_default_construct (address () + oldlen, growby);\n }"}]}