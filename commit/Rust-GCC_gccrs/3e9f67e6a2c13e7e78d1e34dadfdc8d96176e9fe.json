{"sha": "3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U5ZjY3ZTZhMmMxM2U3ZTc4ZDFlMzRkYWRmZGM4ZDk2MTc2ZTlmZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-08-06T00:06:02Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-08-06T00:06:02Z"}, "message": "Add std::apply for C++17\n\n\t* doc/xml/manual/status_cxx2017.xml: Add missing LFTSv2 features.\n\t* doc/html/manual/status.html: Regenerate.\n\t* include/Makefile.am: Add new header.\n\t* include/Makefile.in: Regenerate.\n\t* include/bits/invoke.h: New header.\n\t(__invoke): Make constexpr. Add && to types in exception specification.\n\t* include/experimental/tuple (apply, __apply_impl): Fix non-reserved\n\tnames. Include <bits/invoke.h> and use std::__invoke.\n\t* include/std/functional (__invfwd, __invoke_impl, __invoke): Move to\n\tnew header.\n\t(invoke): Add && to types in exception specification.\n\t* include/std/tuple (apply, __apply_impl): Define for C++17.\n\t* testsuite/20_util/tuple/apply/1.cc: New test.\n\t* testsuite/20_util/tuple/element_access/get_neg.cc: Adjust dg-error\n\tlineno.\n\nFrom-SVN: r239183", "tree": {"sha": "ec1835184e11bd10b0b33581f3a665315a208454", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec1835184e11bd10b0b33581f3a665315a208454"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c3e5002db1096170c8dd33413842e91bfcb61d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c3e5002db1096170c8dd33413842e91bfcb61d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c3e5002db1096170c8dd33413842e91bfcb61d8"}], "stats": {"total": 331, "additions": 271, "deletions": 60}, "files": [{"sha": "81fb9e38ba74dd322943a748e7b7157a588ea1cd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe", "patch": "@@ -1,3 +1,21 @@\n+2016-08-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/status_cxx2017.xml: Add missing LFTSv2 features.\n+\t* doc/html/manual/status.html: Regenerate.\n+\t* include/Makefile.am: Add new header.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/bits/invoke.h: New header.\n+\t(__invoke): Make constexpr. Add && to types in exception specification.\n+\t* include/experimental/tuple (apply, __apply_impl): Fix non-reserved\n+\tnames. Include <bits/invoke.h> and use std::__invoke.\n+\t* include/std/functional (__invfwd, __invoke_impl, __invoke): Move to\n+\tnew header.\n+\t(invoke): Add && to types in exception specification.\n+\t* include/std/tuple (apply, __apply_impl): Define for C++17.\n+\t* testsuite/20_util/tuple/apply/1.cc: New test.\n+\t* testsuite/20_util/tuple/element_access/get_neg.cc: Adjust dg-error\n+\tlineno.\n+\n 2016-08-05  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/status_cxx2017.xml: Correct shared_from_this status."}, {"sha": "35b31c1720db97276e7529117b8c454dffe5f047", "filename": "libstdc++-v3/doc/html/manual/status.html", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html?ref=3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe", "patch": "@@ -515,7 +515,19 @@\n \t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0220r1.html\" target=\"_top\">\n \tP0220R1\n \t</a>\n-      </td><td align=\"center\"> No </td><td align=\"left\"> <code class=\"code\">__has_include(&lt;memory_resource&gt;)</code> </td></tr><tr><td align=\"left\"> Constant View: A proposal for a <code class=\"code\">std::as_const</code> helper function template\t</td><td align=\"left\">\n+      </td><td align=\"center\"> No </td><td align=\"left\"> <code class=\"code\">__has_include(&lt;memory_resource&gt;)</code> </td></tr><tr><td align=\"left\"> Library Fundamentals V1 TS Components: <code class=\"code\">apply</code> </td><td align=\"left\">\n+\t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0220r1.html\" target=\"_top\">\n+\tP0220R1\n+\t</a>\n+      </td><td align=\"center\"> 7 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_apply &gt;= 201603</code> </td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\"> Library Fundamentals V1 TS Components: <code class=\"code\">shared_ptr&lt;T[]&gt;</code> </td><td align=\"left\">\n+\t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0220r1.html\" target=\"_top\">\n+\tP0220R1\n+\t</a>\n+      </td><td align=\"center\"> No </td><td align=\"left\"> <code class=\"code\">__cpp_lib_shared_ptr_arrays &gt;= 201603</code> </td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\"> Library Fundamentals V1 TS Components: Searchers </td><td align=\"left\">\n+\t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0220r1.html\" target=\"_top\">\n+\tP0220R1\n+\t</a>\n+      </td><td align=\"center\"> No </td><td align=\"left\"> <code class=\"code\">__cpp_lib_boyer_moore_searcher &gt;= 201603</code> </td></tr><tr><td align=\"left\"> Constant View: A proposal for a <code class=\"code\">std::as_const</code> helper function template\t</td><td align=\"left\">\n \t<a class=\"link\" href=\"\" target=\"_top\">\n \tP0007R1\n \t</a>"}, {"sha": "55e3ff59d97233450a4c9b48bd53ccbbc9204d61", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2017.xml", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml?ref=3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe", "patch": "@@ -148,6 +148,41 @@ Feature-testing recommendations for C++</link>.\n       <entry> <code>__has_include(&lt;memory_resource&gt;)</code> </entry>\n     </row>\n \n+    <row>\n+      <entry> Library Fundamentals V1 TS Components: <code>apply</code> </entry>\n+      <entry>\n+\t<link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0220r1.html\">\n+\tP0220R1\n+\t</link>\n+      </entry>\n+      <entry align=\"center\"> 7 </entry>\n+      <entry> <code>__cpp_lib_apply >= 201603</code> </entry>\n+    </row>\n+\n+    <row>\n+      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n+      <entry> Library Fundamentals V1 TS Components: <code>shared_ptr&lt;T[]&gt;</code> </entry>\n+      <entry>\n+\t<link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0220r1.html\">\n+\tP0220R1\n+\t</link>\n+      </entry>\n+      <entry align=\"center\"> No </entry>\n+      <entry> <code>__cpp_lib_shared_ptr_arrays >= 201603</code> </entry>\n+    </row>\n+\n+    <row>\n+      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n+      <entry> Library Fundamentals V1 TS Components: Searchers </entry>\n+      <entry>\n+\t<link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0220r1.html\">\n+\tP0220R1\n+\t</link>\n+      </entry>\n+      <entry align=\"center\"> No </entry>\n+      <entry> <code>__cpp_lib_boyer_moore_searcher >= 201603</code> </entry>\n+    </row>\n+\n     <row>\n       <entry> Constant View: A proposal for a <code>std::as_const</code> helper function template\t</entry>\n       <entry>"}, {"sha": "ea992f05319a486e35b889d2cd7e4a39ec97929b", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe", "patch": "@@ -112,6 +112,7 @@ bits_headers = \\\n \t${bits_srcdir}/hashtable.h \\\n \t${bits_srcdir}/hashtable_policy.h \\\n \t${bits_srcdir}/indirect_array.h \\\n+\t${bits_srcdir}/invoke.h \\\n \t${bits_srcdir}/ios_base.h \\\n \t${bits_srcdir}/istream.tcc \\\n \t${bits_srcdir}/list.tcc \\"}, {"sha": "b30eeae5f49ae4fefb2a6caa4bf95dce61c95caf", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe", "patch": "@@ -402,6 +402,7 @@ bits_headers = \\\n \t${bits_srcdir}/hashtable.h \\\n \t${bits_srcdir}/hashtable_policy.h \\\n \t${bits_srcdir}/indirect_array.h \\\n+\t${bits_srcdir}/invoke.h \\\n \t${bits_srcdir}/ios_base.h \\\n \t${bits_srcdir}/istream.tcc \\\n \t${bits_srcdir}/list.tcc \\"}, {"sha": "60405b5cc87b60e82e194ce4c8102426e475d7c8", "filename": "libstdc++-v3/include/bits/invoke.h", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe/libstdc%2B%2B-v3%2Finclude%2Fbits%2Finvoke.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe/libstdc%2B%2B-v3%2Finclude%2Fbits%2Finvoke.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Finvoke.h?ref=3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe", "patch": "@@ -0,0 +1,104 @@\n+// Implementation of INVOKE -*- C++ -*-\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file include/bits/invoke.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{functional}\n+ */\n+\n+#ifndef _GLIBCXX_INVOKE_H\n+#define _GLIBCXX_INVOKE_H 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus < 201103L\n+# include <bits/c++0x_warning.h>\n+#else\n+\n+#include <type_traits>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  /**\n+   *  @addtogroup utilities\n+   *  @{\n+   */\n+\n+  // Used by __invoke_impl instead of std::forward<_Tp> so that a\n+  // reference_wrapper is converted to an lvalue-reference.\n+  template<typename _Tp, typename _Up = typename __inv_unwrap<_Tp>::type>\n+    constexpr _Up&&\n+    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept\n+    { return static_cast<_Up&&>(__t); }\n+\n+  template<typename _Res, typename _Fn, typename... _Args>\n+    constexpr _Res\n+    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)\n+    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }\n+\n+  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>\n+    constexpr _Res\n+    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,\n+\t\t  _Args&&... __args)\n+    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }\n+\n+  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>\n+    constexpr _Res\n+    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,\n+\t\t  _Args&&... __args)\n+    {\n+      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);\n+    }\n+\n+  template<typename _Res, typename _MemPtr, typename _Tp>\n+    constexpr _Res\n+    __invoke_impl(__invoke_memobj_ref, _MemPtr&& __f, _Tp&& __t)\n+    { return __invfwd<_Tp>(__t).*__f; }\n+\n+  template<typename _Res, typename _MemPtr, typename _Tp>\n+    constexpr _Res\n+    __invoke_impl(__invoke_memobj_deref, _MemPtr&& __f, _Tp&& __t)\n+    { return (*std::forward<_Tp>(__t)).*__f; }\n+\n+  /// Invoke a callable object.\n+  template<typename _Callable, typename... _Args>\n+    constexpr typename result_of<_Callable&&(_Args&&...)>::type\n+    __invoke(_Callable&& __fn, _Args&&... __args)\n+    noexcept(__is_nothrow_callable<_Callable(_Args&&...)>::value)\n+    {\n+      using __result_of = result_of<_Callable&&(_Args&&...)>;\n+      using __type = typename __result_of::type;\n+      using __tag = typename __result_of::__invoke_type;\n+      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),\n+\t\t\t\t\tstd::forward<_Args>(__args)...);\n+    }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+\n+#endif // C++11\n+\n+#endif // _GLIBCXX_INVOKE_H"}, {"sha": "bfa1ed18f9e1581e0c58c7c78209882883969531", "filename": "libstdc++-v3/include/experimental/tuple", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftuple?ref=3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe", "patch": "@@ -36,7 +36,7 @@\n #else\n \n #include <tuple>\n-#include <functional>\n+#include <bits/invoke.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -54,20 +54,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template <typename _Fn, typename _Tuple, std::size_t... _Idx>\n     constexpr decltype(auto)\n-    __apply_impl(_Fn&& f, _Tuple&& t, std::index_sequence<_Idx...>)\n+    __apply_impl(_Fn&& __f, _Tuple&& __t, std::index_sequence<_Idx...>)\n     {\n-      using _Wrap = _Maybe_wrap_member_pointer<decay_t<_Fn>>;\n-      return _Wrap::__do_wrap(std::forward<_Fn>(f))(\n-\t  std::get<_Idx>(std::forward<_Tuple>(t))...);\n+      return std::__invoke(std::forward<_Fn>(__f),\n+\t\t\t   std::get<_Idx>(std::forward<_Tuple>(__t))...);\n     }\n \n   template <typename _Fn, typename _Tuple>\n     constexpr decltype(auto)\n-    apply(_Fn&& f, _Tuple&& t)\n+    apply(_Fn&& __f, _Tuple&& __t)\n     {\n       using _Indices =\n-\tstd::make_index_sequence<std::tuple_size<std::decay_t<_Tuple>>::value>;\n-      return __apply_impl(std::forward<_Fn>(f), std::forward<_Tuple>(t),\n+\tstd::make_index_sequence<tuple_size_v<std::decay_t<_Tuple>>>;\n+      return __apply_impl(std::forward<_Fn>(__f), std::forward<_Tuple>(__t),\n \t\t\t  _Indices{});\n     }\n "}, {"sha": "1de914e4a2efcae209fbb7f8ca369ab521a7fbf1", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 2, "deletions": 50, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe", "patch": "@@ -56,6 +56,7 @@\n #include <type_traits>\n #include <bits/functexcept.h>\n #include <bits/functional_hash.h>\n+#include <bits/invoke.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -184,63 +185,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : _Weak_result_type_impl<typename remove_cv<_Functor>::type>\n     { };\n \n-  // Used by __invoke_impl instead of std::forward<_Tp> so that a\n-  // reference_wrapper is converted to an lvalue-reference.\n-  template<typename _Tp, typename _Up = typename __inv_unwrap<_Tp>::type>\n-    inline _Up&&\n-    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept\n-    { return static_cast<_Up&&>(__t); }\n-\n-  template<typename _Res, typename _Fn, typename... _Args>\n-    inline _Res\n-    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)\n-    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }\n-\n-  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>\n-    inline _Res\n-    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,\n-\t\t  _Args&&... __args)\n-    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }\n-\n-  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>\n-    inline _Res\n-    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,\n-\t\t  _Args&&... __args)\n-    {\n-      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);\n-    }\n-\n-  template<typename _Res, typename _MemPtr, typename _Tp>\n-    inline _Res\n-    __invoke_impl(__invoke_memobj_ref, _MemPtr&& __f, _Tp&& __t)\n-    { return __invfwd<_Tp>(__t).*__f; }\n-\n-  template<typename _Res, typename _MemPtr, typename _Tp>\n-    inline _Res\n-    __invoke_impl(__invoke_memobj_deref, _MemPtr&& __f, _Tp&& __t)\n-    { return (*std::forward<_Tp>(__t)).*__f; }\n-\n-  /// Invoke a callable object.\n-  template<typename _Callable, typename... _Args>\n-    inline typename result_of<_Callable&&(_Args&&...)>::type\n-    __invoke(_Callable&& __fn, _Args&&... __args)\n-    noexcept(__is_nothrow_callable<_Callable(_Args...)>::value)\n-    {\n-      using __result_of = result_of<_Callable&&(_Args&&...)>;\n-      using __type = typename __result_of::type;\n-      using __tag = typename __result_of::__invoke_type;\n-      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),\n-\t\t\t\t\tstd::forward<_Args>(__args)...);\n-    }\n-\n #if __cplusplus > 201402L\n # define __cpp_lib_invoke 201411\n \n   /// Invoke a callable object.\n   template<typename _Callable, typename... _Args>\n     inline result_of_t<_Callable&&(_Args&&...)>\n     invoke(_Callable&& __fn, _Args&&... __args)\n-    noexcept(is_nothrow_callable_v<_Callable(_Args...)>)\n+    noexcept(is_nothrow_callable_v<_Callable(_Args&&...)>)\n     {\n       return std::__invoke(std::forward<_Callable>(__fn),\n \t\t\t   std::forward<_Args>(__args)...);"}, {"sha": "b9074cb1bd90b645994581d86b7188f9f376ea61", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe", "patch": "@@ -38,6 +38,7 @@\n #include <utility>\n #include <array>\n #include <bits/uses_allocator.h>\n+#include <bits/invoke.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -1635,6 +1636,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)\n       { }\n \n+#if __cplusplus > 201402L\n+# define __cpp_lib_apply 201603\n+\n+  template <typename _Fn, typename _Tuple, size_t... _Idx>\n+    constexpr decltype(auto)\n+    __apply_impl(_Fn&& __f, _Tuple&& __t, index_sequence<_Idx...>)\n+    {\n+      return std::__invoke(std::forward<_Fn>(__f),\n+\t\t\t   std::get<_Idx>(std::forward<_Tuple>(__t))...);\n+    }\n+\n+  template <typename _Fn, typename _Tuple>\n+    constexpr decltype(auto)\n+    apply(_Fn&& __f, _Tuple&& __t)\n+    {\n+      using _Indices = make_index_sequence<tuple_size_v<decay_t<_Tuple>>>;\n+      return __apply_impl(std::forward<_Fn>(__f), std::forward<_Tuple>(__t),\n+\t\t\t  _Indices{});\n+    }\n+#endif // C++17\n+\n   /// @}\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "c12309cd253dc6d40fd065ae8f83b33b83a2dd56", "filename": "libstdc++-v3/testsuite/20_util/tuple/apply/1.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fapply%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fapply%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fapply%2F1.cc?ref=3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe", "patch": "@@ -0,0 +1,67 @@\n+// Copyright (C) 2014-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+\n+#include <tuple>\n+#include <testsuite_hooks.h>\n+\n+#if  __cpp_lib_apply < 201603\n+#  error \"__cpp_lib_apply < 201603\"\n+#endif\n+\n+void\n+test01()\n+{\n+  auto t = std::make_tuple(1, '2', 3.0);\n+  std::apply( [&](int& i, char& c, double& d) {\n+      VERIFY(&i == &std::get<int>(t));\n+      VERIFY(&c == &std::get<char>(t));\n+      VERIFY(&d == &std::get<double>(t));\n+    }, t);\n+}\n+\n+constexpr int func(int i, int j) { return i + j; }\n+\n+void\n+test02()\n+{\n+  constexpr auto t = std::make_tuple(1, 2);\n+  constexpr int i = std::apply(func, t);\n+  VERIFY( i == 3 );\n+}\n+\n+struct F\n+{\n+  int f(int i, int j) const { return i + j; }\n+};\n+\n+void\n+test03()\n+{\n+  auto t = std::make_tuple(F{}, 1, 2);\n+  int r = std::apply(&F::f, t);\n+  VERIFY( r == 3 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}, {"sha": "5bcf5761c360ed01bdfa4f2ae68f02178142cc4b", "filename": "libstdc++-v3/testsuite/20_util/tuple/element_access/get_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget_neg.cc?ref=3e9f67e6a2c13e7e78d1e34dadfdc8d96176e9fe", "patch": "@@ -17,7 +17,7 @@\n \n // { dg-options \"-fno-show-column\" }\n // { dg-do compile { target c++14 } }\n-// { dg-error \"in range\" \"\" { target *-*-* } 1279 }\n+// { dg-error \"in range\" \"\" { target *-*-* } 1280 }\n \n #include <tuple>\n "}]}