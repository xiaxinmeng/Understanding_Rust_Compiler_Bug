{"sha": "6f2f831199b6c3562f6c8338ef2e3e2ce1d56521", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYyZjgzMTE5OWI2YzM1NjJmNmM4MzM4ZWYyZTNlMmNlMWQ1NjUyMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-10T12:40:23Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-10T12:40:23Z"}, "message": "(easy_fp_constant): Use input_operand to see if each word can be\nloaded in one insn.\n\nFrom-SVN: r6200", "tree": {"sha": "715db0cce24a9324ca5c63740a994819e7f40eed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/715db0cce24a9324ca5c63740a994819e7f40eed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f2f831199b6c3562f6c8338ef2e3e2ce1d56521", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f2f831199b6c3562f6c8338ef2e3e2ce1d56521", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f2f831199b6c3562f6c8338ef2e3e2ce1d56521", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f2f831199b6c3562f6c8338ef2e3e2ce1d56521/comments", "author": null, "committer": null, "parents": [{"sha": "25c341fa216dca726db5420520af9b8a2508d94f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25c341fa216dca726db5420520af9b8a2508d94f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25c341fa216dca726db5420520af9b8a2508d94f"}], "stats": {"total": 15, "additions": 5, "deletions": 10}, "files": [{"sha": "0477d4ac53db65a1c0a50b83042ad02f0b2996c8", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f2f831199b6c3562f6c8338ef2e3e2ce1d56521/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f2f831199b6c3562f6c8338ef2e3e2ce1d56521/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6f2f831199b6c3562f6c8338ef2e3e2ce1d56521", "patch": "@@ -287,13 +287,9 @@ reg_or_cint_operand (op, mode)\n      return GET_CODE (op) == CONST_INT || gpc_reg_operand (op, mode);\n }\n \n-/* Return 1 if the operand is a CONST_DOUBLE and it can be put into a\n-   register with one instruction per word.  For SFmode, this means  that\n-   the low 16-bits are zero.  For DFmode, it means the low 16-bits of\n-   the first word are zero and the high 16 bits of the second word\n-   are zero (usually all bits in the low-order word will be zero).\n-\n-   We only do this if we can safely read CONST_DOUBLE_{LOW,HIGH}.  */\n+/* Return 1 if the operand is a CONST_DOUBLE and it can be put into a register\n+   with one instruction per word.  We only do this if we can safely read\n+   CONST_DOUBLE_{LOW,HIGH}.  */\n \n int\n easy_fp_constant (op, mode)\n@@ -310,12 +306,11 @@ easy_fp_constant (op, mode)\n   high = operand_subword (op, 0, 0, mode);\n   low = operand_subword (op, 1, 0, mode);\n \n-  if (high == 0 || GET_CODE (high) != CONST_INT || (INTVAL (high) & 0xffff))\n+  if (high == 0 || ! input_operand (high, word_mode))\n     return 0;\n \n   return (mode == SFmode\n-\t  || (low != 0 && GET_CODE (low) == CONST_INT\n-\t      && (INTVAL (low) & 0xffff0000) == 0));\n+\t  || (low != 0 && input_operand (low, word_mode)));\n }\n       \n /* Return 1 if the operand is either a floating-point register, a pseudo"}]}