{"sha": "36100e0e952b92a6cd819620fcef851f0069ac8f", "node_id": "C_kwDOANBUbNoAKDM2MTAwZTBlOTUyYjkyYTZjZDgxOTYyMGZjZWY4NTFmMDA2OWFjOGY", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-02-17T17:23:36Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-02-17T22:22:14Z"}, "message": "libstdc++: Make std::error_code printer more robust\n\nThis attempts to implement a partial workaround for the GDB bug\nhttps://sourceware.org/bugzilla/show_bug.cgi?id=28856 which causes GDB\nto crash when printing a frame with a std::error_code argument.\n\nBy recognising the known error categories defined in the library and\nhardcoding their names we do not need to call cat->name() on the\ncategory.  This has the additional benefit of also working when\ndebugging a core file rather than a running process. For those known\ncategories we can also cast the int value to the corresponding error\ncode enum (e.g. future_errc) so that we show an enumerator instead of\njust an integer.\n\nFor program-defined categories we just use the name of the dynamic type\nto identify the category, and print the value as an integer. Once the\nGDB bug is fixed and the virtual name() function can be called safely,\nthat would be preferable. For now it's better to have an imperfect\nprinter that doesn't crash GDB.\n\nThis rewritten StdErrorCodePrinter needs gdb.Value.dynamic_type, so is\nonly registered if that is supported, which means GDB 7.7 and later.\n\nlibstdc++-v3/ChangeLog:\n\n\t* python/libstdcxx/v6/printers.py (StdErrorCodePrinter): Replace\n\tcode that call cat->name() on std::error_category objects.\n\tIdentify known categories by symbol name and use a hardcoded\n\tname. Print error code values as enumerators where appopriate.\n\t* testsuite/libstdc++-prettyprinters/cxx11.cc: Adjust expected\n\tname of custom category. Check io_errc and future_errc errors.", "tree": {"sha": "267c3b8f63da661fc3b8accc505cbd5b85cc612c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/267c3b8f63da661fc3b8accc505cbd5b85cc612c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36100e0e952b92a6cd819620fcef851f0069ac8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36100e0e952b92a6cd819620fcef851f0069ac8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36100e0e952b92a6cd819620fcef851f0069ac8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36100e0e952b92a6cd819620fcef851f0069ac8f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c352ef0ed90cfc07d494dfec111121bc683e337b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c352ef0ed90cfc07d494dfec111121bc683e337b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c352ef0ed90cfc07d494dfec111121bc683e337b"}], "stats": {"total": 120, "additions": 101, "deletions": 19}, "files": [{"sha": "f7a7f9961a7e772549ccae17c3687f5689d888e6", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 93, "deletions": 17, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36100e0e952b92a6cd819620fcef851f0069ac8f/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36100e0e952b92a6cd819620fcef851f0069ac8f/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=36100e0e952b92a6cd819620fcef851f0069ac8f", "patch": "@@ -1518,41 +1518,113 @@ def to_string (self):\n class StdErrorCodePrinter:\n     \"Print a std::error_code or std::error_condition\"\n \n-    _errno_categories = None # List of categories that use errno values\n+    _system_is_posix = None  # Whether std::system_category() use errno values.\n \n     def __init__ (self, typename, val):\n         self.val = val\n         self.typename = strip_versioned_namespace(typename)\n         # Do this only once ...\n-        if StdErrorCodePrinter._errno_categories is None:\n-            StdErrorCodePrinter._errno_categories = ['generic']\n+        if StdErrorCodePrinter._system_is_posix is None:\n             try:\n                 import posix\n-                StdErrorCodePrinter._errno_categories.append('system')\n+                StdErrorCodePrinter._system_is_posix = True\n             except ImportError:\n+                StdErrorCodePrinter._system_is_posix = False\n+\n+    @staticmethod\n+    def _find_errc_enum(name):\n+        typ = gdb.lookup_type(name)\n+        if typ is not None and typ.code == gdb.TYPE_CODE_ENUM:\n+            return typ\n+        return None\n+\n+    @classmethod\n+    def _match_net_ts_category(cls, cat):\n+        net_cats = ['stream', 'socket', 'ip::resolver']\n+        for c in net_cats:\n+            func = c + '_category()'\n+            for ns in ['', _versioned_namespace]:\n+                ns = 'std::{}experimental::net::v1'.format(ns)\n+                sym = gdb.lookup_symbol('{}::{}::__c'.format(ns, func))[0]\n+                if sym is not None:\n+                    if cat == sym.value().address:\n+                        name = 'net::' + func\n+                        enum = cls._find_errc_enum('{}::{}_errc'.format(ns, c))\n+                        return (name, enum)\n+        return (None, None)\n+\n+    @classmethod\n+    def _category_info(cls, cat):\n+        \"Return details of a std::error_category\"\n+\n+        name = None\n+        enum = None\n+        is_errno = False\n+\n+        # Try these first, or we get \"warning: RTTI symbol not found\" when\n+        # using cat.dynamic_type on the local class types for Net TS categories.\n+        func, enum = cls._match_net_ts_category(cat)\n+        if func is not None:\n+            return (None, func, enum, is_errno)\n+\n+        # This might give a warning for a program-defined category defined as\n+        # a local class, but there doesn't seem to be any way to avoid that.\n+        typ = cat.dynamic_type.target()\n+        # Shortcuts for the known categories defined by libstdc++.\n+        if typ.tag.endswith('::generic_error_category'):\n+            name = 'generic'\n+            is_errno = True\n+        if typ.tag.endswith('::system_error_category'):\n+            name = 'system'\n+            is_errno = cls._system_is_posix\n+        if typ.tag.endswith('::future_error_category'):\n+            name = 'future'\n+            enum = cls._find_errc_enum('std::future_errc')\n+        if typ.tag.endswith('::io_error_category'):\n+            name = 'io'\n+            enum = cls._find_errc_enum('std::io_errc')\n+\n+        if name is None:\n+            try:\n+                # Want to call std::error_category::name() override, but it's\n+                # unsafe: https://sourceware.org/bugzilla/show_bug.cgi?id=28856\n+                # gdb.set_convenience_variable('__cat', cat)\n+                # return '\"%s\"' % gdb.parse_and_eval('$__cat->name()').string()\n+                pass\n+            except:\n                 pass\n+        return (name, typ.tag, enum, is_errno)\n \n     @staticmethod\n-    def _category_name(cat):\n-        \"Call the virtual function that overrides std::error_category::name()\"\n-        gdb.set_convenience_variable('__cat', cat)\n-        return gdb.parse_and_eval('$__cat->name()').string()\n+    def _unqualified_name(name):\n+        \"Strip any nested-name-specifier from NAME to give an unqualified name\"\n+        return name.split('::')[-1]\n \n     def to_string (self):\n         value = self.val['_M_value']\n-        category = self._category_name(self.val['_M_cat'])\n-        strval = str(value)\n+        cat = self.val['_M_cat']\n+        name, alt_name, enum, is_errno = self._category_info(cat)\n         if value == 0:\n-            default_cats = {'error_code':'system', 'error_condition':'generic'}\n-            unqualified = self.typename.split('::')[-1]\n-            if category == default_cats[unqualified]:\n+            default_cats = { 'error_code' : 'system',\n+                             'error_condition' : 'generic' }\n+            if name == default_cats[self._unqualified_name(self.typename)]:\n                 return self.typename + ' = { }' # default-constructed value\n-        if value > 0 and category in StdErrorCodePrinter._errno_categories:\n+\n+        strval = str(value)\n+        if is_errno and value != 0:\n             try:\n                 strval = errno.errorcode[int(value)]\n             except:\n                 pass\n-        return '%s = {\"%s\": %s}' % (self.typename, category, strval)\n+        elif enum is not None:\n+            strval = self._unqualified_name(str(value.cast(enum)))\n+\n+        if name is not None:\n+            name = '\"%s\"' % name\n+        else:\n+            name = alt_name\n+        return '%s = {%s: %s}' % (self.typename, name, strval)\n+\n \n class StdRegexStatePrinter:\n     \"Print a state node in the NFA for a std::regex\"\n@@ -1984,8 +2056,6 @@ def build_libstdcxx_dictionary ():\n     libstdcxx_printer.add_version('std::__cxx11::', 'basic_string', StdStringPrinter)\n     libstdcxx_printer.add_container('std::', 'bitset', StdBitsetPrinter)\n     libstdcxx_printer.add_container('std::', 'deque', StdDequePrinter)\n-    libstdcxx_printer.add_version('std::', 'error_code', StdErrorCodePrinter)\n-    libstdcxx_printer.add_version('std::', 'error_condition', StdErrorCodePrinter)\n     libstdcxx_printer.add_container('std::', 'list', StdListPrinter)\n     libstdcxx_printer.add_container('std::__cxx11::', 'list', StdListPrinter)\n     libstdcxx_printer.add_container('std::', 'map', StdMapPrinter)\n@@ -2002,6 +2072,12 @@ def build_libstdcxx_dictionary ():\n     libstdcxx_printer.add_container('std::', 'vector', StdVectorPrinter)\n     # vector<bool>\n \n+    if hasattr(gdb.Value, 'dynamic_type'):\n+        libstdcxx_printer.add_version('std::', 'error_code',\n+                                      StdErrorCodePrinter)\n+        libstdcxx_printer.add_version('std::', 'error_condition',\n+                                      StdErrorCodePrinter)\n+\n     # Printer registrations for classes compiled with -D_GLIBCXX_DEBUG.\n     libstdcxx_printer.add('std::__debug::bitset', StdBitsetPrinter)\n     libstdcxx_printer.add('std::__debug::deque', StdDequePrinter)"}, {"sha": "4262ca88bc323054dda6c6be0b591cf69526ea5d", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/cxx11.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36100e0e952b92a6cd819620fcef851f0069ac8f/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36100e0e952b92a6cd819620fcef851f0069ac8f/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx11.cc?ref=36100e0e952b92a6cd819620fcef851f0069ac8f", "patch": "@@ -24,6 +24,7 @@\n #include <string>\n #include <memory>\n #include <iostream>\n+#include <future>\n #include \"../util/testsuite_allocator.h\" // NullablePointer\n \n typedef std::tuple<int, int> ExTuple;\n@@ -181,9 +182,14 @@ main()\n     std::string message(int) const { return \"\"; }\n   } cat;\n   std::error_code emiaow(42, cat);\n-  // { dg-final { note-test emiaow {std::error_code = {\"miaow\": 42}} } }\n+  // { dg-final { note-test emiaow {std::error_code = {custom_cat: 42}} } }\n   std::error_condition ecmiaow(42, cat);\n-  // { dg-final { note-test ecmiaow {std::error_condition = {\"miaow\": 42}} } }\n+  // { dg-final { note-test ecmiaow {std::error_condition = {custom_cat: 42}} } }\n+\n+  std::error_code ecio = std::make_error_code(std::io_errc::stream);\n+  // { dg-final { note-test ecio {std::error_code = {\"io\": stream}} } }\n+  std::error_code ecfut0 = std::make_error_code(std::future_errc{});\n+  // { dg-final { note-test ecfut0 {std::error_code = {\"future\": 0}} } }\n \n   placeholder(\"\"); // Mark SPOT\n   use(efl);"}]}