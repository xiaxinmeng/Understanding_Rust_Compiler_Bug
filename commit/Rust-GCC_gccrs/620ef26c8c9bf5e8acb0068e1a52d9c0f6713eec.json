{"sha": "620ef26c8c9bf5e8acb0068e1a52d9c0f6713eec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIwZWYyNmM4YzliZjVlOGFjYjAwNjhlMWE1MmQ5YzBmNjcxM2VlYw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-01-13T14:24:34Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-01-13T14:24:34Z"}, "message": "cppmain.c (struct printer): Remove no_line_dirs.\n\n        * cppmain.c (struct printer): Remove no_line_dirs.\n        (options, cb): New.\n        (main, setup_callbacks, scan_buffer, printer_init, cb_define)\n        : Use options rather than CPP_OPTION.\n        (setup_callbacks): Use cb rather than pfile->cb.\n        (main): No need to check for a buffer.  Use cpp_errors.\n        (printer_init): Don't set no_line_dirs.\n        (maybe_print_line): Use options not no_line_dirs.\n        (cb_file_change): Don't call print_line if -P.\n\nFrom-SVN: r38983", "tree": {"sha": "85c5b636aa5ba71f896d480d2d0a4b9ca8404557", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85c5b636aa5ba71f896d480d2d0a4b9ca8404557"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/620ef26c8c9bf5e8acb0068e1a52d9c0f6713eec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/620ef26c8c9bf5e8acb0068e1a52d9c0f6713eec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/620ef26c8c9bf5e8acb0068e1a52d9c0f6713eec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/620ef26c8c9bf5e8acb0068e1a52d9c0f6713eec/comments", "author": null, "committer": null, "parents": [{"sha": "b61c5ed0058862f8ddd6ac88b7fcc5f6625ab06f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b61c5ed0058862f8ddd6ac88b7fcc5f6625ab06f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b61c5ed0058862f8ddd6ac88b7fcc5f6625ab06f"}], "stats": {"total": 97, "additions": 56, "deletions": 41}, "files": [{"sha": "14584b201415be7604828b1189abce1f44f4b8db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/620ef26c8c9bf5e8acb0068e1a52d9c0f6713eec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/620ef26c8c9bf5e8acb0068e1a52d9c0f6713eec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=620ef26c8c9bf5e8acb0068e1a52d9c0f6713eec", "patch": "@@ -1,3 +1,15 @@\n+2001-01-13  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+        * cppmain.c (struct printer): Remove no_line_dirs.\n+        (options, cb): New.\n+        (main, setup_callbacks, scan_buffer, printer_init, cb_define)\n+        : Use options rather than CPP_OPTION.\n+        (setup_callbacks): Use cb rather than pfile->cb.\n+        (main): No need to check for a buffer.  Use cpp_errors.\n+        (printer_init): Don't set no_line_dirs.\n+        (maybe_print_line): Use options not no_line_dirs.\n+        (cb_file_change): Don't call print_line if -P.\n+\n 2001-01-13  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n         * c-lex.c (init_c_lex): Use cpp_get_callbacks to set"}, {"sha": "a7e7ea2c42e2af6699578429e339136551181228", "filename": "gcc/cppmain.c", "status": "modified", "additions": 44, "deletions": 41, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/620ef26c8c9bf5e8acb0068e1a52d9c0f6713eec/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/620ef26c8c9bf5e8acb0068e1a52d9c0f6713eec/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=620ef26c8c9bf5e8acb0068e1a52d9c0f6713eec", "patch": "@@ -34,7 +34,6 @@ struct printer\n   const char *syshdr_flags;\t/* system header flags, if any.  */\n   unsigned int lineno;\t\t/* line currently being written.  */\n   unsigned char printed;\t/* nonzero if something output at lineno.  */\n-  unsigned char no_line_dirs;\t/* nonzero to output no line directives.  */\n };\n \n int main\t\tPARAMS ((int, char **));\n@@ -62,7 +61,9 @@ static void cb_def_pragma PARAMS ((cpp_reader *));\n static void do_pragma_implementation PARAMS ((cpp_reader *));\n \n const char *progname;\t\t/* Needs to be global.  */\n-static cpp_reader *pfile;\n+static cpp_reader *pfile;\t/* An opaque handle.  */\n+static cpp_options *options;\t/* Options of pfile.  */\n+static cpp_callbacks *cb;\t/* Callbacks of pfile.  */\n static struct printer print;\n \n int\n@@ -75,6 +76,8 @@ main (argc, argv)\n   general_init (argv[0]);\n   /* Default language is GNU C89.  */\n   pfile = cpp_create_reader (CLK_GNUC89);\n+  options = cpp_get_options (pfile);\n+  cb = cpp_get_callbacks (pfile);\n   \n   argi += cpp_handle_options (pfile, argc - argi , argv + argi);\n   if (argi < argc && ! CPP_FATAL_ERRORS (pfile))\n@@ -87,7 +90,7 @@ main (argc, argv)\n      line, it will have set pfile->help_only to indicate this.  Exit\n      successfully.  [The library does not exit itself, because\n      e.g. cc1 needs to print its own --help message at this point.]  */\n-  if (CPP_OPTION (pfile, help_only))\n+  if (options->help_only)\n     return (SUCCESS_EXIT_CODE);\n \n   /* Open the output now.  We must do so even if no_output is on,\n@@ -98,19 +101,18 @@ main (argc, argv)\n \n   setup_callbacks ();\n \n-  if (! cpp_start_read (pfile, CPP_OPTION (pfile, in_fname)))\n+  if (! cpp_start_read (pfile, options->in_fname))\n     return (FATAL_EXIT_CODE);\n \n-  if (CPP_BUFFER (pfile))\n-    {\n-      if (CPP_OPTION (pfile, no_output))\n-\tcpp_scan_buffer_nooutput (pfile, 1);\n-      else\n-\tscan_buffer (pfile);\n-    }\n+  /* A successful cpp_start_read guarantees that we can call\n+     cpp_scan_buffer_nooutput or cpp_get_token next.  */\n+  if (options->no_output)\n+    cpp_scan_buffer_nooutput (pfile, 1);\n+  else\n+    scan_buffer (pfile);\n \n   /* -dM command line option.  */\n-  if (CPP_OPTION (pfile, dump_macros) == dump_only)\n+  if (options->dump_macros == dump_only)\n     cpp_forall_identifiers (pfile, dump_macro, NULL);\n \n   cpp_finish (pfile);\n@@ -120,11 +122,12 @@ main (argc, argv)\n   if (print.printed)\n     putc ('\\n', print.outf);\n   if (ferror (print.outf) || fclose (print.outf))\n-    cpp_notice_from_errno (pfile, CPP_OPTION (pfile, out_fname));\n+    cpp_notice_from_errno (pfile, options->out_fname);\n \n-  if (pfile->errors)\n-    return (FATAL_EXIT_CODE);\n-  return (SUCCESS_EXIT_CODE);\n+  if (cpp_errors (pfile))\n+    return FATAL_EXIT_CODE;\n+\n+  return SUCCESS_EXIT_CODE;\n }\n \n /* Store the program name, and set the locale.  */\n@@ -152,28 +155,27 @@ general_init (const char *argv0)\n   (void) textdomain (PACKAGE);\n }\n \n-/* Set up the callbacks and register the pragmas we handle.  */\n+/* Set up the callbacks as appropriate.  */\n static void\n setup_callbacks ()\n {\n-  /* Set callbacks.  */\n-  if (! CPP_OPTION (pfile, no_output))\n+  if (! options->no_output)\n     {\n-      pfile->cb.ident      = cb_ident;\n-      pfile->cb.def_pragma = cb_def_pragma;\n-      if (! CPP_OPTION (pfile, no_line_commands))\n-\tpfile->cb.file_change = cb_file_change;\n+      cb->ident      = cb_ident;\n+      cb->def_pragma = cb_def_pragma;\n+      if (! options->no_line_commands)\n+\tcb->file_change = cb_file_change;\n     }\n \n-  if (CPP_OPTION (pfile, dump_includes))\n-    pfile->cb.include  = cb_include;\n+  if (options->dump_includes)\n+    cb->include  = cb_include;\n \n-  if (CPP_OPTION (pfile, dump_macros) == dump_names\n-      || CPP_OPTION (pfile, dump_macros) == dump_definitions)\n+  if (options->dump_macros == dump_names\n+      || options->dump_macros == dump_definitions)\n     {\n-      pfile->cb.define = cb_define;\n-      pfile->cb.undef  = cb_undef;\n-      pfile->cb.poison = cb_def_pragma;\n+      cb->define = cb_define;\n+      cb->undef  = cb_undef;\n+      cb->poison = cb_def_pragma;\n     }\n \n   /* Register one #pragma which needs special handling.  */\n@@ -220,7 +222,7 @@ scan_buffer (pfile)\n \t    }\n \t  else if (print.printed\n \t\t   && ! (token->flags & PREV_WHITE)\n-\t\t   && CPP_OPTION (pfile, lang) != CLK_ASM\n+\t\t   && options->lang != CLK_ASM\n \t\t   && cpp_avoid_paste (pfile, &tokens[1 - index], token))\n \t    token->flags |= PREV_WHITE;\n \n@@ -255,19 +257,18 @@ printer_init (pfile)\n   print.last_fname = 0;\n   print.lineno = 0;\n   print.printed = 0;\n-  print.no_line_dirs = CPP_OPTION (pfile, no_line_commands);\n \n-  if (CPP_OPTION (pfile, out_fname) == NULL)\n-    CPP_OPTION (pfile, out_fname) = \"\";\n+  if (options->out_fname == NULL)\n+    options->out_fname = \"\";\n   \n-  if (CPP_OPTION (pfile, out_fname)[0] == '\\0')\n+  if (options->out_fname[0] == '\\0')\n     print.outf = stdout;\n   else\n     {\n-      print.outf = fopen (CPP_OPTION (pfile, out_fname), \"w\");\n+      print.outf = fopen (options->out_fname, \"w\");\n       if (! print.outf)\n \t{\n-\t  cpp_notice_from_errno (pfile, CPP_OPTION (pfile, out_fname));\n+\t  cpp_notice_from_errno (pfile, options-> out_fname);\n \t  return 1;\n \t}\n     }\n@@ -290,7 +291,7 @@ maybe_print_line (line)\n       print.printed = 0;\n     }\n \n-  if (print.no_line_dirs)\n+  if (options->no_line_commands)\n     {\n       print.lineno = line;\n       return;\n@@ -348,7 +349,7 @@ cb_define (pfile, node)\n   fprintf (print.outf, \"#define %s\", node->name);\n \n   /* -dD command line option.  */\n-  if (CPP_OPTION (pfile, dump_macros) == dump_definitions)\n+  if (options->dump_macros == dump_definitions)\n     fputs ((const char *) cpp_macro_definition (pfile, node), print.outf);\n \n   putc ('\\n', print.outf);\n@@ -402,7 +403,9 @@ cb_file_change (pfile, fc)\n \tflags = \" 1\";\n       else if (fc->reason == FC_LEAVE)\n \tflags = \" 2\";\n-      print_line (flags);\n+\n+      if (! options->no_line_commands)\n+\tprint_line (flags);\n     }\n }\n \n@@ -448,7 +451,7 @@ do_pragma_implementation (pfile)\n \n   /* Output?  This is nasty, but we don't have [GCC] implementation in\n      the buffer.  */\n-  if (pfile->cb.def_pragma)\n+  if (cb->def_pragma)\n     {\n       maybe_print_line (cpp_get_line (pfile)->output_line);\n       fputs (\"#pragma GCC implementation \", print.outf);"}]}