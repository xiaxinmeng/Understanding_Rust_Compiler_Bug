{"sha": "b50e164942ea0cfc7abdd785a6f6449d4d0d8066", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUwZTE2NDk0MmVhMGNmYzdhYmRkNzg1YTZmNjQ0OWQ0ZDBkODA2Ng==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2018-01-16T16:49:39Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2018-01-16T16:49:39Z"}, "message": "rs6000.c (rs6000_opt_vars): Add entry for -mspeculate-indirect-jumps.\n\n[gcc]\n\n2018-01-16  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (rs6000_opt_vars): Add entry for\n\t-mspeculate-indirect-jumps.\n\t* config/rs6000/rs6000.md (*call_indirect_elfv2<mode>): Disable\n\tfor -mno-speculate-indirect-jumps.\n\t(*call_indirect_elfv2<mode>_nospec): New define_insn.\n\t(*call_value_indirect_elfv2<mode>): Disable for\n\t-mno-speculate-indirect-jumps.\n\t(*call_value_indirect_elfv2<mode>_nospec): New define_insn.\n\t(indirect_jump): Emit different RTL for\n\t-mno-speculate-indirect-jumps.\n\t(*indirect_jump<mode>): Disable for\n\t-mno-speculate-indirect-jumps.\n\t(*indirect_jump<mode>_nospec): New define_insn.\n\t(tablejump): Emit different RTL for\n\t-mno-speculate-indirect-jumps.\n\t(tablejumpsi): Disable for -mno-speculate-indirect-jumps.\n\t(tablejumpsi_nospec): New define_expand.\n\t(tablejumpdi): Disable for -mno-speculate-indirect-jumps.\n\t(tablejumpdi_nospec): New define_expand.\n\t(*tablejump<mode>_internal1): Disable for\n\t-mno-speculate-indirect-jumps.\n\t(*tablejump<mode>_internal1_nospec): New define_insn.\n\t* config/rs6000/rs6000.opt (mspeculate-indirect-jumps): New\n\toption.\n\n[gcc/testsuite]\n\n2018-01-16  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/safe-indirect-jump-1.c: New file.\n\t* gcc.target/powerpc/safe-indirect-jump-2.c: New file.\n\t* gcc.target/powerpc/safe-indirect-jump-3.c: New file.\n\t* gcc.target/powerpc/safe-indirect-jump-4.c: New file.\n\t* gcc.target/powerpc/safe-indirect-jump-5.c: New file.\n\t* gcc.target/powerpc/safe-indirect-jump-6.c: New file.\n\nFrom-SVN: r256753", "tree": {"sha": "28ab18627227e62c04b553f18231238115ca574a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28ab18627227e62c04b553f18231238115ca574a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b50e164942ea0cfc7abdd785a6f6449d4d0d8066", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b50e164942ea0cfc7abdd785a6f6449d4d0d8066", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b50e164942ea0cfc7abdd785a6f6449d4d0d8066", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b50e164942ea0cfc7abdd785a6f6449d4d0d8066/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8fc0c8fae09c0a88f12ea1c2efa857ef8d7a88fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc0c8fae09c0a88f12ea1c2efa857ef8d7a88fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fc0c8fae09c0a88f12ea1c2efa857ef8d7a88fe"}], "stats": {"total": 419, "additions": 409, "deletions": 10}, "files": [{"sha": "65135664b8b98ac73162fd66368c48061bf66900", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50e164942ea0cfc7abdd785a6f6449d4d0d8066/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50e164942ea0cfc7abdd785a6f6449d4d0d8066/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b50e164942ea0cfc7abdd785a6f6449d4d0d8066", "patch": "@@ -1,3 +1,30 @@\n+2018-01-16  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_opt_vars): Add entry for\n+\t-mspeculate-indirect-jumps.\n+\t* config/rs6000/rs6000.md (*call_indirect_elfv2<mode>): Disable\n+\tfor -mno-speculate-indirect-jumps.\n+\t(*call_indirect_elfv2<mode>_nospec): New define_insn.\n+\t(*call_value_indirect_elfv2<mode>): Disable for\n+\t-mno-speculate-indirect-jumps.\n+\t(*call_value_indirect_elfv2<mode>_nospec): New define_insn.\n+\t(indirect_jump): Emit different RTL for\n+\t-mno-speculate-indirect-jumps.\n+\t(*indirect_jump<mode>): Disable for\n+\t-mno-speculate-indirect-jumps.\n+\t(*indirect_jump<mode>_nospec): New define_insn.\n+\t(tablejump): Emit different RTL for\n+\t-mno-speculate-indirect-jumps.\n+\t(tablejumpsi): Disable for -mno-speculate-indirect-jumps.\n+\t(tablejumpsi_nospec): New define_expand.\n+\t(tablejumpdi): Disable for -mno-speculate-indirect-jumps.\n+\t(tablejumpdi_nospec): New define_expand.\n+\t(*tablejump<mode>_internal1): Disable for\n+\t-mno-speculate-indirect-jumps.\n+\t(*tablejump<mode>_internal1_nospec): New define_insn.\n+\t* config/rs6000/rs6000.opt (mspeculate-indirect-jumps): New\n+\toption.\n+\n 2018-01-16  Artyom Skrobov tyomitch@gmail.com\n \n         * caller-save.c (insert_save): Drop unnecessary parameter.  All"}, {"sha": "2c22c63d74cd6260b603a3d7d051c5e3fcb1c389", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50e164942ea0cfc7abdd785a6f6449d4d0d8066/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50e164942ea0cfc7abdd785a6f6449d4d0d8066/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b50e164942ea0cfc7abdd785a6f6449d4d0d8066", "patch": "@@ -36716,6 +36716,9 @@ static struct rs6000_opt_var const rs6000_opt_vars[] =\n   { \"sched-epilog\",\n     offsetof (struct gcc_options, x_TARGET_SCHED_PROLOG),\n     offsetof (struct cl_target_option, x_TARGET_SCHED_PROLOG), },\n+  { \"speculate-indirect-jumps\",\n+    offsetof (struct gcc_options, x_rs6000_speculate_indirect_jumps),\n+    offsetof (struct cl_target_option, x_rs6000_speculate_indirect_jumps), },\n };\n \n /* Inner function to handle attribute((target(\"...\"))) and #pragma GCC target"}, {"sha": "fe027343fd28848a890c921443c2aef5f5745095", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 106, "deletions": 10, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50e164942ea0cfc7abdd785a6f6449d4d0d8066/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50e164942ea0cfc7abdd785a6f6449d4d0d8066/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=b50e164942ea0cfc7abdd785a6f6449d4d0d8066", "patch": "@@ -10695,22 +10695,44 @@\n \t (match_operand 1 \"\" \"g,g\"))\n    (set (reg:P TOC_REGNUM) (unspec:P [(match_operand:P 2 \"const_int_operand\" \"n,n\")] UNSPEC_TOCSLOT))\n    (clobber (reg:P LR_REGNO))]\n-  \"DEFAULT_ABI == ABI_ELFv2\"\n+  \"DEFAULT_ABI == ABI_ELFv2 && rs6000_speculate_indirect_jumps\"\n   \"b%T0l\\;<ptrload> 2,%2(1)\"\n   [(set_attr \"type\" \"jmpreg\")\n    (set_attr \"length\" \"8\")])\n \n+;; Variant with deliberate misprediction.\n+(define_insn \"*call_indirect_elfv2<mode>_nospec\"\n+  [(call (mem:SI (match_operand:P 0 \"register_operand\" \"c,*l\"))\n+\t (match_operand 1 \"\" \"g,g\"))\n+   (set (reg:P TOC_REGNUM) (unspec:P [(match_operand:P 2 \"const_int_operand\" \"n,n\")] UNSPEC_TOCSLOT))\n+   (clobber (reg:P LR_REGNO))]\n+  \"DEFAULT_ABI == ABI_ELFv2 && !rs6000_speculate_indirect_jumps\"\n+  \"crset eq\\;beq%T0l-\\;<ptrload> 2,%2(1)\"\n+  [(set_attr \"type\" \"jmpreg\")\n+   (set_attr \"length\" \"12\")])\n+\n (define_insn \"*call_value_indirect_elfv2<mode>\"\n   [(set (match_operand 0 \"\" \"\")\n \t(call (mem:SI (match_operand:P 1 \"register_operand\" \"c,*l\"))\n \t      (match_operand 2 \"\" \"g,g\")))\n    (set (reg:P TOC_REGNUM) (unspec:P [(match_operand:P 3 \"const_int_operand\" \"n,n\")] UNSPEC_TOCSLOT))\n    (clobber (reg:P LR_REGNO))]\n-  \"DEFAULT_ABI == ABI_ELFv2\"\n+  \"DEFAULT_ABI == ABI_ELFv2 && rs6000_speculate_indirect_jumps\"\n   \"b%T1l\\;<ptrload> 2,%3(1)\"\n   [(set_attr \"type\" \"jmpreg\")\n    (set_attr \"length\" \"8\")])\n \n+; Variant with deliberate misprediction.\n+(define_insn \"*call_value_indirect_elfv2<mode>_nospec\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:SI (match_operand:P 1 \"register_operand\" \"c,*l\"))\n+\t      (match_operand 2 \"\" \"g,g\")))\n+   (set (reg:P TOC_REGNUM) (unspec:P [(match_operand:P 3 \"const_int_operand\" \"n,n\")] UNSPEC_TOCSLOT))\n+   (clobber (reg:P LR_REGNO))]\n+  \"DEFAULT_ABI == ABI_ELFv2 && !rs6000_speculate_indirect_jumps\"\n+  \"crset eq\\;beq%T1l-\\;<ptrload> 2,%3(1)\"\n+  [(set_attr \"type\" \"jmpreg\")\n+   (set_attr \"length\" \"12\")])\n \n ;; Call subroutine returning any type.\n (define_expand \"untyped_call\"\n@@ -12393,25 +12415,57 @@\n   [(set_attr \"type\" \"jmpreg\")])\n \n (define_expand \"indirect_jump\"\n-  [(set (pc) (match_operand 0 \"register_operand\"))])\n+  [(set (pc) (match_operand 0 \"register_operand\"))]\n+ \"\"\n+{\n+  if (!rs6000_speculate_indirect_jumps) {\n+    rtx ccreg = gen_reg_rtx (CCmode);\n+    if (Pmode == DImode)\n+      emit_jump_insn (gen_indirect_jumpdi_nospec (operands[0], ccreg));\n+    else\n+      emit_jump_insn (gen_indirect_jumpsi_nospec (operands[0], ccreg));\n+    DONE;\n+  }\n+})\n \n (define_insn \"*indirect_jump<mode>\"\n   [(set (pc)\n \t(match_operand:P 0 \"register_operand\" \"c,*l\"))]\n-  \"\"\n+  \"rs6000_speculate_indirect_jumps\"\n   \"b%T0\"\n   [(set_attr \"type\" \"jmpreg\")])\n \n+(define_insn \"indirect_jump<mode>_nospec\"\n+  [(set (pc) (match_operand:P 0 \"register_operand\" \"c,*l\"))\n+   (clobber (match_operand:CC 1 \"cc_reg_operand\" \"=y,y\"))]\n+  \"!rs6000_speculate_indirect_jumps\"\n+  \"crset %E1\\;beq%T0- %1\\;b .\"\n+  [(set_attr \"type\" \"jmpreg\")\n+   (set_attr \"length\" \"12\")])\n+\n ;; Table jump for switch statements:\n (define_expand \"tablejump\"\n   [(use (match_operand 0))\n    (use (label_ref (match_operand 1)))]\n   \"\"\n {\n-  if (TARGET_32BIT)\n-    emit_jump_insn (gen_tablejumpsi (operands[0], operands[1]));\n+  if (rs6000_speculate_indirect_jumps)\n+    {\n+      if (TARGET_32BIT)\n+      \temit_jump_insn (gen_tablejumpsi (operands[0], operands[1]));\n+      else\n+\temit_jump_insn (gen_tablejumpdi (operands[0], operands[1]));\n+    }\n   else\n-    emit_jump_insn (gen_tablejumpdi (operands[0], operands[1]));\n+    {\n+      rtx ccreg = gen_reg_rtx (CCmode);\n+      rtx jump;\n+      if (TARGET_32BIT)\n+\tjump = gen_tablejumpsi_nospec (operands[0], operands[1], ccreg);\n+      else\n+\tjump = gen_tablejumpdi_nospec (operands[0], operands[1], ccreg);\n+      emit_jump_insn (jump);\n+    }\n   DONE;\n })\n \n@@ -12422,13 +12476,28 @@\n    (parallel [(set (pc)\n \t\t   (match_dup 3))\n \t      (use (label_ref (match_operand 1)))])]\n-  \"TARGET_32BIT\"\n+  \"TARGET_32BIT && rs6000_speculate_indirect_jumps\"\n {\n   operands[0] = force_reg (SImode, operands[0]);\n   operands[2] = force_reg (SImode, gen_rtx_LABEL_REF (SImode, operands[1]));\n   operands[3] = gen_reg_rtx (SImode);\n })\n \n+(define_expand \"tablejumpsi_nospec\"\n+  [(set (match_dup 4)\n+\t(plus:SI (match_operand:SI 0)\n+\t\t (match_dup 3)))\n+   (parallel [(set (pc)\n+\t\t   (match_dup 4))\n+\t      (use (label_ref (match_operand 1)))\n+\t      (clobber (match_operand 2))])]\n+  \"TARGET_32BIT && !rs6000_speculate_indirect_jumps\"\n+{\n+  operands[0] = force_reg (SImode, operands[0]);\n+  operands[3] = force_reg (SImode, gen_rtx_LABEL_REF (SImode, operands[1]));\n+  operands[4] = gen_reg_rtx (SImode);\n+})\n+\n (define_expand \"tablejumpdi\"\n   [(set (match_dup 4)\n         (sign_extend:DI (match_operand:SI 0 \"lwa_operand\")))\n@@ -12438,21 +12507,48 @@\n    (parallel [(set (pc)\n \t\t   (match_dup 3))\n \t      (use (label_ref (match_operand 1)))])]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT && rs6000_speculate_indirect_jumps\"\n {\n   operands[2] = force_reg (DImode, gen_rtx_LABEL_REF (DImode, operands[1]));\n   operands[3] = gen_reg_rtx (DImode);\n   operands[4] = gen_reg_rtx (DImode);\n })\n \n+(define_expand \"tablejumpdi_nospec\"\n+  [(set (match_dup 5)\n+        (sign_extend:DI (match_operand:SI 0 \"lwa_operand\")))\n+   (set (match_dup 4)\n+\t(plus:DI (match_dup 5)\n+\t\t (match_dup 3)))\n+   (parallel [(set (pc)\n+\t\t   (match_dup 4))\n+\t      (use (label_ref (match_operand 1)))\n+\t      (clobber (match_operand 2))])]\n+  \"TARGET_64BIT && !rs6000_speculate_indirect_jumps\"\n+{\n+  operands[3] = force_reg (DImode, gen_rtx_LABEL_REF (DImode, operands[1]));\n+  operands[4] = gen_reg_rtx (DImode);\n+  operands[5] = gen_reg_rtx (DImode);\n+})\n+\n (define_insn \"*tablejump<mode>_internal1\"\n   [(set (pc)\n \t(match_operand:P 0 \"register_operand\" \"c,*l\"))\n    (use (label_ref (match_operand 1)))]\n-  \"\"\n+  \"rs6000_speculate_indirect_jumps\"\n   \"b%T0\"\n   [(set_attr \"type\" \"jmpreg\")])\n \n+(define_insn \"*tablejump<mode>_internal1_nospec\"\n+  [(set (pc)\n+\t(match_operand:P 0 \"register_operand\" \"c,*l\"))\n+   (use (label_ref (match_operand 1)))\n+   (clobber (match_operand:CC 2 \"cc_reg_operand\" \"=y,y\"))]\n+  \"!rs6000_speculate_indirect_jumps\"\n+  \"crset %E2\\;beq%T0- %2\\;b .\"\n+  [(set_attr \"type\" \"jmpreg\")\n+   (set_attr \"length\" \"12\")])\n+\n (define_insn \"nop\"\n   [(unspec [(const_int 0)] UNSPEC_NOP)]\n   \"\""}, {"sha": "20162121a46383157739304eec1ddfe782cff3da", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50e164942ea0cfc7abdd785a6f6449d4d0d8066/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50e164942ea0cfc7abdd785a6f6449d4d0d8066/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=b50e164942ea0cfc7abdd785a6f6449d4d0d8066", "patch": "@@ -620,3 +620,8 @@ Use the given offset for addressing the stack-protector guard.\n \n TargetVariable\n long rs6000_stack_protector_guard_offset = 0\n+\n+;; -mno-speculate-indirect-jumps adds deliberate misprediction to indirect\n+;; branches via the CTR.\n+mspeculate-indirect-jumps\n+Target Undocumented Var(rs6000_speculate_indirect_jumps) Init(1) Save"}, {"sha": "8dfea56bcae4e68a22c128352cd3783ea30bd395", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50e164942ea0cfc7abdd785a6f6449d4d0d8066/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50e164942ea0cfc7abdd785a6f6449d4d0d8066/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b50e164942ea0cfc7abdd785a6f6449d4d0d8066", "patch": "@@ -1,3 +1,12 @@\n+2018-01-16  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/safe-indirect-jump-1.c: New file.\n+\t* gcc.target/powerpc/safe-indirect-jump-2.c: New file.\n+\t* gcc.target/powerpc/safe-indirect-jump-3.c: New file.\n+\t* gcc.target/powerpc/safe-indirect-jump-4.c: New file.\n+\t* gcc.target/powerpc/safe-indirect-jump-5.c: New file.\n+\t* gcc.target/powerpc/safe-indirect-jump-6.c: New file.\n+\n 2018-01-16  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR tree-optimization/83857"}, {"sha": "1a0cc88f414054e13d28b6dcd915fe8b0e4a2189", "filename": "gcc/testsuite/gcc.target/powerpc/safe-indirect-jump-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50e164942ea0cfc7abdd785a6f6449d4d0d8066/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50e164942ea0cfc7abdd785a6f6449d4d0d8066/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-1.c?ref=b50e164942ea0cfc7abdd785a6f6449d4d0d8066", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { powerpc64le-*-* } } } */\n+/* { dg-additional-options \"-mno-speculate-indirect-jumps\" } */\n+\n+/* Test for deliberate misprediction of indirect calls for ELFv2.  */\n+\n+extern int (*f)();\n+\n+int bar ()\n+{\n+  return (*f) ();\n+}\n+\n+/* { dg-final { scan-assembler \"crset eq\" } } */\n+/* { dg-final { scan-assembler \"beqctrl-\" } } */"}, {"sha": "b51034fa1b0c259bd705a2658828074dea7f38f4", "filename": "gcc/testsuite/gcc.target/powerpc/safe-indirect-jump-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50e164942ea0cfc7abdd785a6f6449d4d0d8066/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50e164942ea0cfc7abdd785a6f6449d4d0d8066/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-2.c?ref=b50e164942ea0cfc7abdd785a6f6449d4d0d8066", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mno-speculate-indirect-jumps\" } */\n+\n+/* Test for deliberate misprediction of computed goto.  */\n+\n+int bar (int);\n+int baz (int);\n+int spaz (int);\n+\n+int foo (int x)\n+{\n+  static void *labptr[] = { &&lab0, &&lab1, &&lab2 };\n+\n+  if (x < 0 || x > 2)\n+    return -1;\n+\n+  goto *labptr[x];\n+\n+ lab0:\n+  return bar (x);\n+\n+ lab1:\n+  return baz (x) + 1;\n+\n+ lab2:\n+  return spaz (x) / 2;\n+}\n+\n+/* The following assumes CR7 as the first chosen volatile.  */\n+\n+/* { dg-final { scan-assembler \"crset 30\" } } */\n+/* { dg-final { scan-assembler \"beqctr- 7\" } } */\n+/* { dg-final { scan-assembler \"b .\" } } */"}, {"sha": "81da127cc17bfa43f5ec70326f262d0dabefeb66", "filename": "gcc/testsuite/gcc.target/powerpc/safe-indirect-jump-3.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50e164942ea0cfc7abdd785a6f6449d4d0d8066/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50e164942ea0cfc7abdd785a6f6449d4d0d8066/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-3.c?ref=b50e164942ea0cfc7abdd785a6f6449d4d0d8066", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mno-speculate-indirect-jumps\" } */\n+\n+/* Test for deliberate misprediction of jump tables.  */\n+\n+void bar (void);\n+\n+int foo (int x)\n+{\n+  int a;\n+  \n+  switch (x)\n+    {\n+    default:\n+      a = -1;\n+      break;\n+    case 0:\n+      a = x * x;\n+      break;\n+    case 1:\n+      a = x + 1;\n+      break;\n+    case 2:\n+      a = x + x;\n+      break;\n+    case 3:\n+      a = x << 3;\n+      break;\n+    case 4:\n+      a = x >> 1;\n+      break;\n+    case 5:\n+      a = x;\n+      break;\n+    case 6:\n+      a = 0;\n+      break;\n+    case 7:\n+      a = x * x + x;\n+      break;\n+    }\n+\n+  bar();\n+\n+  return a;\n+}\n+\n+/* The following assumes CR7 as the first chosen volatile.  */\n+\n+/* { dg-final { scan-assembler \"crset 30\" } } */\n+/* { dg-final { scan-assembler \"beqctr- 7\" } } */\n+/* { dg-final { scan-assembler \"b .\" } } */"}, {"sha": "ed0000797c93a76582b92b95c82c4a748dfca59a", "filename": "gcc/testsuite/gcc.target/powerpc/safe-indirect-jump-4.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50e164942ea0cfc7abdd785a6f6449d4d0d8066/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50e164942ea0cfc7abdd785a6f6449d4d0d8066/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-4.c?ref=b50e164942ea0cfc7abdd785a6f6449d4d0d8066", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-mno-speculate-indirect-jumps\" } */\n+\n+/* Test for deliberate misprediction of indirect calls for ELFv2.  */\n+\n+int (*f)();\n+\n+int __attribute__((noinline)) bar ()\n+{\n+  return (*f) ();\n+}\n+\n+int g ()\n+{\n+  return 26;\n+}\n+\n+int main ()\n+{\n+  f = &g;\n+  if (bar () != 26)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "5a4cd9a838e6c13aefcd72271ef3ee89e3e9a3f2", "filename": "gcc/testsuite/gcc.target/powerpc/safe-indirect-jump-5.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50e164942ea0cfc7abdd785a6f6449d4d0d8066/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50e164942ea0cfc7abdd785a6f6449d4d0d8066/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-5.c?ref=b50e164942ea0cfc7abdd785a6f6449d4d0d8066", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-mno-speculate-indirect-jumps -Wno-pedantic\" } */\n+\n+/* Test for deliberate misprediction of computed goto.  */\n+\n+int __attribute__((noinline)) bar (int i)\n+{\n+  return 1960 + i;\n+}\n+\n+int __attribute__((noinline)) baz (int i)\n+{\n+  return i * i;\n+}\n+\n+int __attribute__((noinline)) spaz (int i)\n+{\n+  return i + 1;\n+}\n+\n+int foo (int x)\n+{\n+  static void *labptr[] = { &&lab0, &&lab1, &&lab2 };\n+\n+  if (x < 0 || x > 2)\n+    return -1;\n+\n+  goto *labptr[x];\n+\n+ lab0:\n+  return bar (x);\n+\n+ lab1:\n+  return baz (x) + 1;\n+\n+ lab2:\n+  return spaz (x) / 2;\n+}\n+\n+int main ()\n+{\n+  if (foo (0) != 1960)\n+    __builtin_abort ();\n+\n+  if (foo (1) != 2)\n+    __builtin_abort ();\n+\n+  if (foo (2) != 1)\n+    __builtin_abort ();\n+\n+  if (foo (3) != -1)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "a78e468fc707d773b7ed493140a0e3f5a7c0c8af", "filename": "gcc/testsuite/gcc.target/powerpc/safe-indirect-jump-6.c", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50e164942ea0cfc7abdd785a6f6449d4d0d8066/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50e164942ea0cfc7abdd785a6f6449d4d0d8066/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-6.c?ref=b50e164942ea0cfc7abdd785a6f6449d4d0d8066", "patch": "@@ -0,0 +1,80 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-mno-speculate-indirect-jumps\" } */\n+\n+/* Test for deliberate misprediction of jump tables.  */\n+\n+void __attribute__((noinline)) bar ()\n+{\n+}\n+\n+int foo (int x)\n+{\n+  int a;\n+  \n+  switch (x)\n+    {\n+    default:\n+      a = -1;\n+      break;\n+    case 0:\n+      a = x * x + 3;\n+      break;\n+    case 1:\n+      a = x + 1;\n+      break;\n+    case 2:\n+      a = x + x;\n+      break;\n+    case 3:\n+      a = x << 3;\n+      break;\n+    case 4:\n+      a = x >> 1;\n+      break;\n+    case 5:\n+      a = x;\n+      break;\n+    case 6:\n+      a = 0;\n+      break;\n+    case 7:\n+      a = x * x + x;\n+      break;\n+    }\n+\n+  bar();\n+\n+  return a;\n+}\n+\n+int main ()\n+{\n+  if (foo (0) != 3)\n+    __builtin_abort ();\n+  \n+  if (foo (1) != 2)\n+    __builtin_abort ();\n+  \n+  if (foo (2) != 4)\n+    __builtin_abort ();\n+  \n+  if (foo (3) != 24)\n+    __builtin_abort ();\n+  \n+  if (foo (4) != 2)\n+    __builtin_abort ();\n+  \n+  if (foo (5) != 5)\n+    __builtin_abort ();\n+  \n+  if (foo (6) != 0)\n+    __builtin_abort ();\n+  \n+  if (foo (7) != 56)\n+    __builtin_abort ();\n+  \n+  if (foo (8) != -1)\n+    __builtin_abort ();\n+  \n+  return 0;\n+}"}]}