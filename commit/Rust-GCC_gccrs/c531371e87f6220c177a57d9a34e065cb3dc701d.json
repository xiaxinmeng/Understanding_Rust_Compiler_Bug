{"sha": "c531371e87f6220c177a57d9a34e065cb3dc701d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUzMTM3MWU4N2Y2MjIwYzE3N2E1N2Q5YTM0ZTA2NWNiM2RjNzAxZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-05-04T15:06:46Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-05-04T15:06:46Z"}, "message": "stl_construct.h (_Destroy(_ForwardIterator, _ForwardIterator __last, _Allocator)): Change the last parameter to _Allocator&.\n\n2007-05-04  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_construct.h (_Destroy(_ForwardIterator,\n\t_ForwardIterator __last, _Allocator)): Change the last parameter\n\tto _Allocator&.\n\t* include/bits/stl_uninitialized.h (__uninitialized_copy_a,\n\t__uninitialized_fill_a, __uninitialized_fill_n_a,\n\t__uninitialized_fill_copy, __uninitialized_copy_fill,\n\t__uninitialized_copy_copy): Likewise.\n\t* include/ext/rope: Adjust everywhere.\n\t* include/ext/ropeimpl.h: Likewise.\n\nFrom-SVN: r124427", "tree": {"sha": "0bfec2c4e8bba0b835ab6cc889d3d7f3119af919", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bfec2c4e8bba0b835ab6cc889d3d7f3119af919"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c531371e87f6220c177a57d9a34e065cb3dc701d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c531371e87f6220c177a57d9a34e065cb3dc701d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c531371e87f6220c177a57d9a34e065cb3dc701d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c531371e87f6220c177a57d9a34e065cb3dc701d/comments", "author": null, "committer": null, "parents": [{"sha": "b2890f04bdb5f579c901c49aa7f544601806061f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2890f04bdb5f579c901c49aa7f544601806061f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2890f04bdb5f579c901c49aa7f544601806061f"}], "stats": {"total": 171, "additions": 106, "deletions": 65}, "files": [{"sha": "0f5b58b2afbcb52c425f46b874be7be8cd878042", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c531371e87f6220c177a57d9a34e065cb3dc701d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c531371e87f6220c177a57d9a34e065cb3dc701d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c531371e87f6220c177a57d9a34e065cb3dc701d", "patch": "@@ -1,3 +1,15 @@\n+2007-05-04  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_construct.h (_Destroy(_ForwardIterator,\n+\t_ForwardIterator __last, _Allocator)): Change the last parameter\n+\tto _Allocator&.\n+\t* include/bits/stl_uninitialized.h (__uninitialized_copy_a,\n+\t__uninitialized_fill_a, __uninitialized_fill_n_a,\n+\t__uninitialized_fill_copy, __uninitialized_copy_fill,\n+\t__uninitialized_copy_copy): Likewise.\n+\t* include/ext/rope: Adjust everywhere.\n+\t* include/ext/ropeimpl.h: Likewise.\n+\n 2007-05-03  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/std/type_traits (enable_if): New."}, {"sha": "188efa927816995bba8ef87e8c7089431349e2a8", "filename": "libstdc++-v3/include/bits/stl_construct.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c531371e87f6220c177a57d9a34e065cb3dc701d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c531371e87f6220c177a57d9a34e065cb3dc701d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h?ref=c531371e87f6220c177a57d9a34e065cb3dc701d", "patch": "@@ -137,7 +137,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _ForwardIterator, typename _Allocator>\n     void\n     _Destroy(_ForwardIterator __first, _ForwardIterator __last,\n-\t     _Allocator __alloc)\n+\t     _Allocator& __alloc)\n     {\n       for (; __first != __last; ++__first)\n \t__alloc.destroy(&*__first);\n@@ -146,7 +146,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _ForwardIterator, typename _Tp>\n     inline void\n     _Destroy(_ForwardIterator __first, _ForwardIterator __last,\n-\t     allocator<_Tp>)\n+\t     allocator<_Tp>&)\n     {\n       _Destroy(__first, __last);\n     }"}, {"sha": "8b5548e213f32c7d8bae60660b6d99c53791cffe", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c531371e87f6220c177a57d9a34e065cb3dc701d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c531371e87f6220c177a57d9a34e065cb3dc701d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=c531371e87f6220c177a57d9a34e065cb3dc701d", "patch": "@@ -198,8 +198,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t   typename _Allocator>\n     _ForwardIterator\n     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,\n-\t\t\t   _ForwardIterator __result,\n-\t\t\t   _Allocator __alloc)\n+\t\t\t   _ForwardIterator __result, _Allocator& __alloc)\n     {\n       _ForwardIterator __cur = __result;\n       try\n@@ -218,14 +217,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _InputIterator, typename _ForwardIterator, typename _Tp>\n     inline _ForwardIterator\n     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,\n-\t\t\t   _ForwardIterator __result,\n-\t\t\t   allocator<_Tp>)\n+\t\t\t   _ForwardIterator __result, allocator<_Tp>&)\n     { return std::uninitialized_copy(__first, __last, __result); }\n \n   template<typename _ForwardIterator, typename _Tp, typename _Allocator>\n     void\n     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,\n-\t\t\t   const _Tp& __x, _Allocator __alloc)\n+\t\t\t   const _Tp& __x, _Allocator& __alloc)\n     {\n       _ForwardIterator __cur = __first;\n       try\n@@ -243,15 +241,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _ForwardIterator, typename _Tp, typename _Tp2>\n     inline void\n     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,\n-\t\t\t   const _Tp& __x, allocator<_Tp2>)\n+\t\t\t   const _Tp& __x, allocator<_Tp2>&)\n     { std::uninitialized_fill(__first, __last, __x); }\n \n   template<typename _ForwardIterator, typename _Size, typename _Tp,\n \t   typename _Allocator>\n     void\n     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, \n-\t\t\t     const _Tp& __x,\n-\t\t\t     _Allocator __alloc)\n+\t\t\t     const _Tp& __x, _Allocator& __alloc)\n     {\n       _ForwardIterator __cur = __first;\n       try\n@@ -270,8 +267,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t   typename _Tp2>\n     inline void\n     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, \n-\t\t\t     const _Tp& __x,\n-\t\t\t     allocator<_Tp2>)\n+\t\t\t     const _Tp& __x, allocator<_Tp2>&)\n     { std::uninitialized_fill_n(__first, __n, __x); }\n \n \n@@ -292,7 +288,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t      _InputIterator2 __first2,\n \t\t\t      _InputIterator2 __last2,\n \t\t\t      _ForwardIterator __result,\n-\t\t\t      _Allocator __alloc)\n+\t\t\t      _Allocator& __alloc)\n     {\n       _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,\n \t\t\t\t\t\t\t   __result,\n@@ -316,8 +312,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     inline _ForwardIterator\n     __uninitialized_fill_copy(_ForwardIterator __result, _ForwardIterator __mid,\n \t\t\t      const _Tp& __x, _InputIterator __first,\n-\t\t\t      _InputIterator __last,\n-\t\t\t      _Allocator __alloc)\n+\t\t\t      _InputIterator __last, _Allocator& __alloc)\n     {\n       std::__uninitialized_fill_a(__result, __mid, __x, __alloc);\n       try\n@@ -340,7 +335,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     __uninitialized_copy_fill(_InputIterator __first1, _InputIterator __last1,\n \t\t\t      _ForwardIterator __first2,\n \t\t\t      _ForwardIterator __last2, const _Tp& __x,\n-\t\t\t      _Allocator __alloc)\n+\t\t\t      _Allocator& __alloc)\n     {\n       _ForwardIterator __mid2 = std::__uninitialized_copy_a(__first1, __last1,\n \t\t\t\t\t\t\t    __first2,"}, {"sha": "e0f0aa390363840d47097ba4981a64edf25f66cd", "filename": "libstdc++-v3/include/ext/rope", "status": "modified", "additions": 56, "deletions": 26, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c531371e87f6220c177a57d9a34e065cb3dc701d/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c531371e87f6220c177a57d9a34e065cb3dc701d/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope?ref=c531371e87f6220c177a57d9a34e065cb3dc701d", "patch": "@@ -533,6 +533,14 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       get_allocator() const\n       { return *static_cast<const _Alloc*>(this); }\n \n+      allocator_type&\n+      _M_get_allocator()\n+      { return *static_cast<_Alloc*>(this); }\n+\n+      const allocator_type&\n+      _M_get_allocator() const\n+      { return *static_cast<const _Alloc*>(this); }\n+\n       _Rope_rep_base(size_t __size, const allocator_type&)\n       : _M_size(__size) { }\n \n@@ -572,9 +580,10 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n         allocator_type;\n \n       using _Rope_rep_base<_CharT, _Alloc>::get_allocator;\n+      using _Rope_rep_base<_CharT, _Alloc>::_M_get_allocator;\n \n       _Rope_RopeRep(__detail::_Tag __t, int __d, bool __b, size_t __size,\n-\t\t    allocator_type __a)\n+\t\t    const allocator_type& __a)\n       : _Rope_rep_base<_CharT, _Alloc>(__size, __a),\n #ifndef __GC\n \t_Refcount_Base(1),\n@@ -595,7 +604,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n #endif\n       static void\n       _S_free_string(__GC_CONST _CharT*, size_t __len,\n-\t\t     allocator_type __a);\n+\t\t     allocator_type& __a);\n #define __STL_FREE_STRING(__s, __l, __a) _S_free_string(__s, __l, __a);\n                         // Deallocate data section of a leaf.\n                         // This shouldn't be a member function.\n@@ -689,7 +698,7 @@ protected:\n         allocator_type;\n \n       _Rope_RopeLeaf(__GC_CONST _CharT* __d, size_t __size,\n-\t\t     allocator_type __a)\n+\t\t     const allocator_type& __a)\n       : _Rope_RopeRep<_CharT, _Alloc>(__detail::_S_leaf, 0, true,\n \t\t\t\t      __size, __a), _M_data(__d)\n       {\n@@ -708,7 +717,7 @@ protected:\n         if (_M_data != this->_M_c_string)\n \t  this->_M_free_c_string();\n \t\n-        __STL_FREE_STRING(_M_data, this->_M_size, this->get_allocator());\n+        __STL_FREE_STRING(_M_data, this->_M_size, this->_M_get_allocator());\n       }\n #endif\n protected:\n@@ -731,7 +740,7 @@ protected:\n \n       _Rope_RopeConcatenation(_Rope_RopeRep<_CharT, _Alloc>* __l,\n \t\t\t      _Rope_RopeRep<_CharT, _Alloc>* __r,\n-\t\t\t      allocator_type __a)\n+\t\t\t      const allocator_type& __a)\n \t: _Rope_RopeRep<_CharT, _Alloc>(__detail::_S_concat,\n \t\t\t\t      std::max(__l->_M_depth,\n \t\t\t\t\t       __r->_M_depth) + 1,\n@@ -779,7 +788,7 @@ protected:\n       allocator_type;\n \n       _Rope_RopeFunction(char_producer<_CharT>* __f, size_t __size,\n-                        bool __d, allocator_type __a)\n+                        bool __d, const allocator_type& __a)\n       : _Rope_RopeRep<_CharT, _Alloc>(__detail::_S_function, 0, true, __size, __a)\n \t, _M_fn(__f)\n #ifndef __GC\n@@ -856,7 +865,7 @@ protected:\n         allocator_type;\n \n       _Rope_RopeSubstring(_Rope_RopeRep<_CharT, _Alloc>* __b, size_t __s,\n-                          size_t __l, allocator_type __a)\n+                          size_t __l, const allocator_type& __a)\n       : _Rope_RopeFunction<_CharT, _Alloc>(this, __l, false, __a),\n         char_producer<_CharT>(), _M_base(__b), _M_start(__s)\n       {\n@@ -1444,6 +1453,14 @@ protected:\n       get_allocator() const\n       { return *static_cast<const _Alloc*>(this); }\n \n+      allocator_type&\n+      _M_get_allocator()\n+      { return *static_cast<_Alloc*>(this); }\n+\n+      const allocator_type&\n+      _M_get_allocator() const\n+      { return *static_cast<const _Alloc*>(this); }\n+\n       typedef _Rope_RopeRep<_CharT, _Alloc> _RopeRep;\n       // The one in _Base may not be visible due to template rules.\n \n@@ -1504,6 +1521,7 @@ protected:\n       typedef typename _Base::allocator_type allocator_type;\n       using _Base::_M_tree_ptr;\n       using _Base::get_allocator;\n+      using _Base::_M_get_allocator;      \n       typedef __GC_CONST _CharT* _Cstrptr;\n       \n       static _CharT _S_empty_c_str[1];\n@@ -1614,39 +1632,39 @@ protected:\n       // Takes ownership of s instead of copying.\n       static _RopeLeaf*\n       _S_new_RopeLeaf(__GC_CONST _CharT *__s,\n-\t\t      size_t __size, allocator_type __a)\n+\t\t      size_t __size, allocator_type& __a)\n       {\n \t_RopeLeaf* __space = typename _Base::_LAlloc(__a).allocate(1);\n \treturn new(__space) _RopeLeaf(__s, __size, __a);\n       }\n \n       static _RopeConcatenation*\n       _S_new_RopeConcatenation(_RopeRep* __left, _RopeRep* __right,\n-\t\t\t       allocator_type __a)\n+\t\t\t       allocator_type& __a)\n       {\n \t_RopeConcatenation* __space = typename _Base::_CAlloc(__a).allocate(1);\n \treturn new(__space) _RopeConcatenation(__left, __right, __a);\n       }\n \n       static _RopeFunction*\n       _S_new_RopeFunction(char_producer<_CharT>* __f,\n-\t\t\t  size_t __size, bool __d, allocator_type __a)\n+\t\t\t  size_t __size, bool __d, allocator_type& __a)\n       {\n \t_RopeFunction* __space = typename _Base::_FAlloc(__a).allocate(1);\n \treturn new(__space) _RopeFunction(__f, __size, __d, __a);\n       }\n \n       static _RopeSubstring*\n       _S_new_RopeSubstring(_Rope_RopeRep<_CharT,_Alloc>* __b, size_t __s,\n-\t\t\t   size_t __l, allocator_type __a)\n+\t\t\t   size_t __l, allocator_type& __a)\n       {\n \t_RopeSubstring* __space = typename _Base::_SAlloc(__a).allocate(1);\n \treturn new(__space) _RopeSubstring(__b, __s, __l, __a);\n       }\n       \n       static _RopeLeaf*\n       _S_RopeLeaf_from_unowned_char_ptr(const _CharT *__s,\n-\t\t\t\t\tsize_t __size, allocator_type __a)\n+\t\t\t\t\tsize_t __size, allocator_type& __a)\n #define __STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, __size, __a) \\\n                 _S_RopeLeaf_from_unowned_char_ptr(__s, __size, __a)\n       {\n@@ -1768,22 +1786,31 @@ protected:\n       { return _S_compare(this->_M_tree_ptr, __y._M_tree_ptr); }\n \n       rope(const _CharT* __s, const allocator_type& __a = allocator_type())\n-      : _Base(__STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, _S_char_ptr_len(__s),\n-\t\t\t\t\t       __a), __a)\n-      { }\n+      : _Base(__a)\n+      {\n+\tthis->_M_tree_ptr =\n+\t  __STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, _S_char_ptr_len(__s),\n+\t\t\t\t\t   _M_get_allocator());\n+      }\n \n       rope(const _CharT* __s, size_t __len,\n \t   const allocator_type& __a = allocator_type())\n-      : _Base(__STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, __len, __a), __a)\n-      { }\n+      : _Base(__a)\n+      {\n+\tthis->_M_tree_ptr =\n+\t  __STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, __len, _M_get_allocator());\n+      }\n \n       // Should perhaps be templatized with respect to the iterator type\n       // and use Sequence_buffer.  (It should perhaps use sequence_buffer\n       // even now.)\n-      rope(const _CharT *__s, const _CharT *__e,\n+      rope(const _CharT* __s, const _CharT* __e,\n \t   const allocator_type& __a = allocator_type())\n-      : _Base(__STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, __e - __s, __a), __a)\n-      { }\n+      : _Base(__a)\n+      {\n+\tthis->_M_tree_ptr =\n+\t  __STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, __e - __s, _M_get_allocator());\n+      }\n \n       rope(const const_iterator& __s, const const_iterator& __e,\n \t   const allocator_type& __a = allocator_type())\n@@ -1802,12 +1829,15 @@ protected:\n       {\n \t_CharT* __buf = this->_Data_allocate(_S_rounded_up_size(1));\n \t\n-\tget_allocator().construct(__buf, __c);\n+\t_M_get_allocator().construct(__buf, __c);\n \ttry\n-\t  { this->_M_tree_ptr = _S_new_RopeLeaf(__buf, 1, __a); }\n+\t  {\n+\t    this->_M_tree_ptr = _S_new_RopeLeaf(__buf, 1,\n+\t\t\t\t\t\t_M_get_allocator());\n+\t  }\n \tcatch(...)\n \t  {\n-\t    _RopeRep::__STL_FREE_STRING(__buf, 1, __a);\n+\t    _RopeRep::__STL_FREE_STRING(__buf, 1, _M_get_allocator());\n \t    __throw_exception_again;\n \t  }\n       }\n@@ -1878,7 +1908,7 @@ protected:\n       {\n \t_RopeRep* __old = this->_M_tree_ptr;\n \t_RopeRep* __left =\n-\t  __STL_ROPE_FROM_UNOWNED_CHAR_PTR(&__x, 1, this->get_allocator());\n+\t  __STL_ROPE_FROM_UNOWNED_CHAR_PTR(&__x, 1, _M_get_allocator());\n \ttry\n \t  {\n \t    this->_M_tree_ptr = _S_concat(__left, this->_M_tree_ptr);\n@@ -1916,7 +1946,7 @@ protected:\n       void\n       copy(_CharT* __buffer) const\n       {\n-\t_Destroy(__buffer, __buffer + size(), get_allocator());\n+\t_Destroy(__buffer, __buffer + size(), _M_get_allocator());\n \t_S_flatten(this->_M_tree_ptr, __buffer);\n       }\n \n@@ -1931,7 +1961,7 @@ protected:\n \tsize_t __size = size();\n \tsize_t __len = (__pos + __n > __size? __size - __pos : __n);\n \t\n-\t_Destroy(__buffer, __buffer + __len, get_allocator());\n+\t_Destroy(__buffer, __buffer + __len, _M_get_allocator());\n \t_S_flatten(this->_M_tree_ptr, __pos, __len, __buffer);\n \treturn __len;\n       }"}, {"sha": "95dd8c2f722a6a3928dff76a7a3ddbaa53cc4e53", "filename": "libstdc++-v3/include/ext/ropeimpl.h", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c531371e87f6220c177a57d9a34e065cb3dc701d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c531371e87f6220c177a57d9a34e065cb3dc701d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h?ref=c531371e87f6220c177a57d9a34e065cb3dc701d", "patch": "@@ -1,6 +1,6 @@\n // SGI's rope class implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -347,15 +347,15 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       if (0 != __cstr)\n \t{\n \t  size_t __size = this->_M_size + 1;\n-\t  _Destroy(__cstr, __cstr + __size, get_allocator());\n+\t  _Destroy(__cstr, __cstr + __size, _M_get_allocator());\n \t  this->_Data_deallocate(__cstr, __size);\n \t}\n     }\n \n   template <class _CharT, class _Alloc>\n     inline void\n     _Rope_RopeRep<_CharT, _Alloc>::\n-    _S_free_string(_CharT* __s, size_t __n, allocator_type __a)\n+    _S_free_string(_CharT* __s, size_t __n, allocator_type& __a)\n     {\n       if (!_S_is_basic_char_type((_CharT*)0))\n \t_Destroy(__s, __s + __n, __a);\n@@ -442,12 +442,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       try\n \t{\n \t  __result = _S_new_RopeLeaf(__new_data, __old_len + __len,\n-\t\t\t\t     __r->get_allocator());\n+\t\t\t\t     __r->_M_get_allocator());\n \t}\n       catch(...)\n \t{\n \t  _RopeRep::__STL_FREE_STRING(__new_data, __old_len + __len,\n-\t\t\t\t      __r->get_allocator());\n+\t\t\t\t      __r->_M_get_allocator());\n \t  __throw_exception_again;\n \t}\n       return __result;\n@@ -498,7 +498,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     {\n       _RopeConcatenation* __result = _S_new_RopeConcatenation(__left, __right,\n \t\t\t\t\t\t\t      __left->\n-\t\t\t\t\t\t\t      get_allocator());\n+\t\t\t\t\t\t\t      _M_get_allocator());\n       size_t __depth = __result->_M_depth;\n       \n       if (__depth > 20\n@@ -540,7 +540,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t}\n       if (0 == __r)\n \treturn __STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, __slen,\n-\t\t\t\t\t\t__r->get_allocator());\n+\t\t\t\t\t\t__r->_M_get_allocator());\n       if (__r->_M_tag == __detail::_S_leaf\n \t  && __r->_M_size + __slen <= size_t(_S_copy_max))\n \t{\n@@ -570,7 +570,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t    }\n \t}\n       _RopeRep* __nright =\n-\t__STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, __slen, __r->get_allocator());\n+\t__STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, __slen, __r->_M_get_allocator());\n       try\n \t{\n \t  __r->_M_ref_nonnil();\n@@ -594,7 +594,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       _RopeRep* __result;\n       if (0 == __r)\n \treturn __STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, __slen,\n-\t\t\t\t\t\t__r->get_allocator());\n+\t\t\t\t\t\t__r->_M_get_allocator());\n       size_t __count = __r->_M_ref_count;\n       size_t __orig_size = __r->_M_size;\n       if (__count > 1)\n@@ -636,7 +636,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t    }\n \t}\n       _RopeRep* __right =\n-\t__STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, __slen, __r->get_allocator());\n+\t__STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, __slen, __r->_M_get_allocator());\n       __r->_M_ref_nonnil();\n       try\n \t{ __result = _S_tree_concat(__r, __right); }\n@@ -775,14 +775,14 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n #ifdef __GC\n \t    const _CharT* __section = __l->_M_data + __start;\n \t    __result = _S_new_RopeLeaf(__section, __result_len,\n-\t\t\t\t       __base->get_allocator());\n+\t\t\t\t       __base->_M_get_allocator());\n \t    __result->_M_c_string = 0;  // Not eos terminated.\n #else\n \t    // We should sometimes create substring node instead.\n \t    __result = __STL_ROPE_FROM_UNOWNED_CHAR_PTR(__l->_M_data + __start,\n \t\t\t\t\t\t\t__result_len,\n \t\t\t\t\t\t\t__base->\n-\t\t\t\t\t\t\tget_allocator());\n+\t\t\t\t\t\t\t_M_get_allocator());\n #endif\n \t    return __result;\n \t  }\n@@ -800,7 +800,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t  _S_new_RopeSubstring(__old->_M_base,\n \t\t\t\t       __start + __old->_M_start,\n \t\t\t\t       __adj_endp1 - __start,\n-\t\t\t\t       __base->get_allocator());\n+\t\t\t\t       __base->_M_get_allocator());\n \t\treturn __result;\n \t\t\n \t      } // *** else fall through: ***\n@@ -823,19 +823,19 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t    catch(...)\n \t      {\n \t\t_RopeRep::__STL_FREE_STRING(__section, __result_len,\n-\t\t\t\t\t    __base->get_allocator());\n+\t\t\t\t\t    __base->_M_get_allocator());\n \t\t__throw_exception_again;\n \t      }\n \t    _S_cond_store_eos(__section[__result_len]);\n \t    return _S_new_RopeLeaf(__section, __result_len,\n-\t\t\t\t   __base->get_allocator());\n+\t\t\t\t   __base->_M_get_allocator());\n \t  }\n \t}\n     lazy:\n       {\n \t// Create substring node.\n \treturn _S_new_RopeSubstring(__base, __start, __adj_endp1 - __start,\n-\t\t\t\t    __base->get_allocator());\n+\t\t\t\t    __base->_M_get_allocator());\n       }\n     }\n \n@@ -1550,13 +1550,15 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t{\n \t  __rest_buffer = this->_Data_allocate(_S_rounded_up_size(__rest));\n \t  __uninitialized_fill_n_a(__rest_buffer, __rest, __c,\n-\t\t\t\t   get_allocator());\n+\t\t\t\t   _M_get_allocator());\n \t  _S_cond_store_eos(__rest_buffer[__rest]);\n \t  try\n-\t    { __remainder = _S_new_RopeLeaf(__rest_buffer, __rest, __a); }\n+\t    { __remainder = _S_new_RopeLeaf(__rest_buffer, __rest,\n+\t\t\t\t\t    _M_get_allocator()); }\n \t  catch(...)\n \t    {\n-\t      _RopeRep::__STL_FREE_STRING(__rest_buffer, __rest, __a);\n+\t      _RopeRep::__STL_FREE_STRING(__rest_buffer, __rest,\n+\t\t\t\t\t  _M_get_allocator());\n \t      __throw_exception_again;\n \t    }\n \t}\n@@ -1568,17 +1570,19 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  _RopeLeaf* __base_leaf;\n \t  rope __base_rope;\n \t  __uninitialized_fill_n_a(__base_buffer, __exponentiate_threshold, __c,\n-\t\t\t\t   get_allocator());\n+\t\t\t\t   _M_get_allocator());\n \t  _S_cond_store_eos(__base_buffer[__exponentiate_threshold]);\n \t  try\n \t    {\n \t      __base_leaf = _S_new_RopeLeaf(__base_buffer,\n-\t\t\t\t\t    __exponentiate_threshold, __a);\n+\t\t\t\t\t    __exponentiate_threshold,\n+\t\t\t\t\t    _M_get_allocator());\n \t    }\n \t  catch(...)\n \t    {\n \t      _RopeRep::__STL_FREE_STRING(__base_buffer,\n-\t\t\t\t\t  __exponentiate_threshold, __a);\n+\t\t\t\t\t  __exponentiate_threshold,\n+\t\t\t\t\t  _M_get_allocator());\n \t      __throw_exception_again;\n \t    }\n \t  __base_rope._M_tree_ptr = __base_leaf;\n@@ -1646,7 +1650,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       __result[__s] = _S_eos((_CharT*)0);\n       this->_M_tree_ptr->_M_unref_nonnil();\n       this->_M_tree_ptr = _S_new_RopeLeaf(__result, __s,\n-\t\t\t\t\t  this->get_allocator());\n+\t\t\t\t\t  this->_M_get_allocator());\n       return(__result);\n     }\n "}]}