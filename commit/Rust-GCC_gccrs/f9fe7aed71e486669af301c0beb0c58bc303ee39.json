{"sha": "f9fe7aed71e486669af301c0beb0c58bc303ee39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjlmZTdhZWQ3MWU0ODY2NjlhZjMwMWMwYmViMGM1OGJjMzAzZWUzOQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2006-01-18T19:47:16Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2006-01-18T19:47:16Z"}, "message": "tree-vrp.c (test_for_singularity): Correct test for new min limit.\n\n\n\t* tree-vrp.c (test_for_singularity): Correct test for new\n\tmin limit.  Use operand_equal_p rather than pointer equality\n\tfor testing if new min/max values are equal.\n\n\t* tree-ssa-propagate.c (substitute_and_fold): Delay simplifications\n\tusing range information until after propagation and folding.\n\n\t* gcc.c-torture/execute/930529-1.x: Use -fwrapv as test depends\n\ton wrapping on overflow semantics.\n\n\t* gcc.dg/tree-ssa/pr23109.c: Remove the .lim file too.\n\n\t* gcc.gc/tree-ssa/vrp23.c: New test.\n\t* gcc.gc/tree-ssa/vrp24.c: New test.\n\nFrom-SVN: r109904", "tree": {"sha": "d39d6d56ed7796b26c42b4c0d68518a4491b59a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d39d6d56ed7796b26c42b4c0d68518a4491b59a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9fe7aed71e486669af301c0beb0c58bc303ee39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9fe7aed71e486669af301c0beb0c58bc303ee39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9fe7aed71e486669af301c0beb0c58bc303ee39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9fe7aed71e486669af301c0beb0c58bc303ee39/comments", "author": null, "committer": null, "parents": [{"sha": "953ff28998b59b0912be907d74f7afa5a8ed1e9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/953ff28998b59b0912be907d74f7afa5a8ed1e9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/953ff28998b59b0912be907d74f7afa5a8ed1e9c"}], "stats": {"total": 188, "additions": 173, "deletions": 15}, "files": [{"sha": "d6c62f61536968d7d49d03b716234b25c4eb5f36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9fe7aed71e486669af301c0beb0c58bc303ee39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9fe7aed71e486669af301c0beb0c58bc303ee39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9fe7aed71e486669af301c0beb0c58bc303ee39", "patch": "@@ -1,3 +1,12 @@\n+2006-01-18  Jeff Law  <law@redhat.com>\n+\n+\t* tree-vrp.c (test_for_singularity): Correct test for new\n+\tmin limit.  Use operand_equal_p rather than pointer equality\n+\tfor testing if new min/max values are equal.\n+\n+\t* tree-ssa-propagate.c (substitute_and_fold): Delay simplifications\n+\tusing range information until after propagation and folding.\n+\n 2006-01-18  Richard Henderson  <rth@redhat.com>\n \t    Aldy Hernandez  <aldyh@redhat.com>\n \t    Jakub Jelinek  <jakub@redhat.com>"}, {"sha": "f7973945267d7a7086c76ff25a10c76b0d4b7ad9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9fe7aed71e486669af301c0beb0c58bc303ee39/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9fe7aed71e486669af301c0beb0c58bc303ee39/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f9fe7aed71e486669af301c0beb0c58bc303ee39", "patch": "@@ -1,3 +1,13 @@\n+2006-01-18  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.c-torture/execute/930529-1.x: Use -fwrapv as test depends\n+\ton wrapping on overflow semantics.\n+\n+\t* gcc.dg/tree-ssa/pr23109.c: Remove the .lim file too.\n+\n+\t* gcc.gc/tree-ssa/vrp23.c: New test.\n+\t* gcc.gc/tree-ssa/vrp24.c: New test.\n+\n 2006-01-18  Richard Henderson  <rth@redhat.com>\n \t    Aldy Hernandez  <aldyh@redhat.com>\n \t    Jakub Jelinek  <jakub@redhat.com>"}, {"sha": "25225f4f4d691bc7f69019a8692aac0fde4a37f8", "filename": "gcc/testsuite/gcc.c-torture/execute/930529-1.x", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9fe7aed71e486669af301c0beb0c58bc303ee39/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F930529-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9fe7aed71e486669af301c0beb0c58bc303ee39/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F930529-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F930529-1.x?ref=f9fe7aed71e486669af301c0beb0c58bc303ee39", "patch": "@@ -20,4 +20,5 @@\n #     }\n # }\n \n+set additional_flags \"-fwrapv\"\n return 0"}, {"sha": "b620fa4b824703c641a699ad7ae0af1783004b72", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr23109.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9fe7aed71e486669af301c0beb0c58bc303ee39/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23109.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9fe7aed71e486669af301c0beb0c58bc303ee39/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23109.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23109.c?ref=f9fe7aed71e486669af301c0beb0c58bc303ee39", "patch": "@@ -31,4 +31,5 @@ int main()\n /* { dg-final { scan-tree-dump-not \"reciptmp\" \"lim\" } } */\n /* { dg-final { scan-tree-dump-not \"reciptmp\" \"recip\" } } */\n /* { dg-final { cleanup-tree-dump \"recip\" } } */\n+/* { dg-final { cleanup-tree-dump \"lim\" } } */\n "}, {"sha": "c394d4aa084f589da24bcce45895a78906344825", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp23.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9fe7aed71e486669af301c0beb0c58bc303ee39/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9fe7aed71e486669af301c0beb0c58bc303ee39/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp23.c?ref=f9fe7aed71e486669af301c0beb0c58bc303ee39", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp-details\" } */\n+\n+blah (int code1, int code2)\n+{\n+  int i;\n+  int n_sets;\n+\n+  n_sets = (int) (code1 == 32);\n+  if (code2 == 64) goto L2; else goto L3;\n+\n+L2:\n+  aa ();\n+\n+L3:\n+  if (n_sets > 1) goto L4; else goto L10;\n+\n+L4:\n+  aos ();\n+  i = 0;\n+  goto L24;\n+\n+L10:\n+  if (n_sets > 0) goto L25; else goto L8;\n+\n+L25:\n+  i = 0;\n+\n+L24:\n+  aob ();\n+  i = i + 1;\n+  if (i < n_sets) goto L24; else goto L8;\n+\n+L8:\n+  return;\n+}\n+\n+\n+\n+/* The n_sets > 0 test can be simplified into n_sets == 1 since the\n+   only way to reach the test is when n_sets <= 1, and the only value\n+   which satisfies both conditions is n_sets == 1.  */\n+/* { dg-final { scan-tree-dump-times \"Simplified relational\" 1 \"vrp\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp\" } } */\n+"}, {"sha": "3be7efa47071a36e089da8f38363b05db1fd28ee", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp24.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9fe7aed71e486669af301c0beb0c58bc303ee39/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9fe7aed71e486669af301c0beb0c58bc303ee39/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp24.c?ref=f9fe7aed71e486669af301c0beb0c58bc303ee39", "patch": "@@ -0,0 +1,89 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp-details\" } */\n+\n+\n+struct rtx_def;\n+typedef struct rtx_def *rtx;\n+union rtunion_def\n+{\n+  rtx rt_rtx;\n+};\n+typedef union rtunion_def rtunion;\n+struct rtx_def\n+{\n+  int code;\n+  union u\n+  {\n+    rtunion fld[1];\n+  } u;\n+};\n+\n+sss (rtx insn, int code1, int code2, int code3)\n+{\n+  _Bool D1562;\n+  struct rtx_def * body;\n+  int i;\n+  int n_sets;\n+  int D1544;\n+\n+  body = insn->u.fld[5].rt_rtx;\n+  D1544 = body->code;\n+  n_sets = 1;\n+  if (D1544 == 55) goto L7; else goto L1;\n+\n+L1:\n+  n_sets = 0;\n+  if (code3 == 99) goto L2; else goto L11;\n+\n+L2:\n+  D1562 = code1 == 10;\n+  n_sets = (int) D1562;\n+  if (n_sets > 0) goto L7; else goto L11;\n+\n+L37:\n+  if (code2 == 42) goto L8; else goto L9;\n+\n+L8:\n+  arf ();\n+\n+L9:\n+  i = i + 1;\n+  if (i < n_sets) goto L37; else goto L32;\n+\n+L32:\n+\n+L11:\n+  if (n_sets > 1) goto L12; else goto L15;\n+\n+L12:\n+  nit ();\n+\n+L14:\n+  i = 0;\n+  goto L38;\n+\n+L15:\n+  if (n_sets > 0) goto L14; else goto L16;\n+\n+L38:\n+  frob ();\n+  i = i + 1;\n+  if (n_sets > i) goto L38; else goto L16;\n+\n+L16:\n+  return;\n+\n+L7:\n+  i = 0;\n+  goto L37;\n+\n+}\n+\n+\n+\n+/* The n_sets > 0 test can be simplified into n_sets == 1 since the\n+   only way to reach the test is when n_sets <= 1, and the only value\n+   which satisfies both conditions is n_sets == 1.  */\n+/* { dg-final { scan-tree-dump-times \"Simplified relational\" 1 \"vrp\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp\" } } */\n+"}, {"sha": "dcdc6add4dd2b07925ed531b373df8f6c203e4e6", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9fe7aed71e486669af301c0beb0c58bc303ee39/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9fe7aed71e486669af301c0beb0c58bc303ee39/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=f9fe7aed71e486669af301c0beb0c58bc303ee39", "patch": "@@ -1,5 +1,5 @@\n /* Generic SSA value propagation engine.\n-   Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Diego Novillo <dnovillo@redhat.com>\n \n    This file is part of GCC.\n@@ -1124,14 +1124,7 @@ substitute_and_fold (prop_value_t *prop_value, bool use_ranges_p)\n \t  /* If we have range information, see if we can fold\n \t     predicate expressions.  */\n \t  if (use_ranges_p)\n-\t    {\n-\t      did_replace = fold_predicate_in (stmt);\n-\n-\t      /* Some statements may be simplified using ranges.  For\n-\t\t example, division may be replaced by shifts, modulo\n-\t\t replaced with bitwise and, etc.  */\n-\t      simplify_stmt_using_ranges (stmt);\n-\t    }\n+\t    did_replace = fold_predicate_in (stmt);\n \n \t  if (prop_value)\n \t    {\n@@ -1178,6 +1171,16 @@ substitute_and_fold (prop_value_t *prop_value, bool use_ranges_p)\n \t\t  fprintf (dump_file, \"\\n\");\n \t\t}\n \t    }\n+\n+\t  /* Some statements may be simplified using ranges.  For\n+\t     example, division may be replaced by shifts, modulo\n+\t     replaced with bitwise and, etc.   Do this after \n+\t     substituting constants, folding, etc so that we're\n+\t     presented with a fully propagated, canonicalized\n+\t     statement.  */\n+\t  if (use_ranges_p)\n+\t    simplify_stmt_using_ranges (stmt);\n+\n \t}\n     }\n "}, {"sha": "a5028b4d8f59862284c4bdaf568ee9d5c4cfceab", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9fe7aed71e486669af301c0beb0c58bc303ee39/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9fe7aed71e486669af301c0beb0c58bc303ee39/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=f9fe7aed71e486669af301c0beb0c58bc303ee39", "patch": "@@ -1,5 +1,5 @@\n /* Support routines for Value Range Propagation (VRP).\n-   Copyright (C) 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Diego Novillo <dnovillo@redhat.com>.\n \n This file is part of GCC.\n@@ -3970,7 +3970,7 @@ test_for_singularity (enum tree_code cond_code, tree op0,\n       if (cond_code == GT_EXPR)\n \t{\n \t  tree one = build_int_cst (TREE_TYPE (op0), 1);\n-\t  max = fold_build2 (PLUS_EXPR, TREE_TYPE (op0), max, one);\n+\t  min = fold_build2 (PLUS_EXPR, TREE_TYPE (op0), min, one);\n \t}\n     }\n \n@@ -3987,10 +3987,10 @@ test_for_singularity (enum tree_code cond_code, tree op0,\n       else\n \tmax = vr->max;\n \n-      /* If the new min/max values have converged to a\n-\t single value, then there is only one value which\n-\t can satisfy the condition, return that value.  */\n-      if (min == max && is_gimple_min_invariant (min))\n+      /* If the new min/max values have converged to a single value,\n+\t then there is only one value which can satisfy the condition,\n+\t return that value.  */\n+      if (operand_equal_p (min, max, 0) && is_gimple_min_invariant (min))\n \treturn min;\n     }\n   return NULL;"}]}