{"sha": "fe6fb0d1590237c67b75342dc41b7ffdbdcccf25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU2ZmIwZDE1OTAyMzdjNjdiNzUzNDJkYzQxYjdmZmRiZGNjY2YyNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-04T14:35:25Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-04T14:35:25Z"}, "message": "Fix std::hash<std::error_condition>\n\nThe hash value should be based on the identity (i.e. address) of the\nerror_category member, not its object representation (i.e. underlying\nbytes).\n\n\t* include/std/system_error (error_code): Remove friend declaration\n\tfor hash<error_code>.\n\t(hash<error_code>::operator()): Use public member functions to access\n\tvalue and category.\n\t(hash<error_condition>::operator()): Use address of category, not\n\tits object representation.\n\t* src/c++11/compatibility-c++0x.cc (hash<error_code>::operator()):\n\tUse public member functions to access value and category.\n\t* testsuite/19_diagnostics/error_condition/hash.cc: New test.\n\nFrom-SVN: r270872", "tree": {"sha": "dbd474a3076c23ef0d047655b62b3ff91992dbd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbd474a3076c23ef0d047655b62b3ff91992dbd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe6fb0d1590237c67b75342dc41b7ffdbdcccf25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe6fb0d1590237c67b75342dc41b7ffdbdcccf25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe6fb0d1590237c67b75342dc41b7ffdbdcccf25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe6fb0d1590237c67b75342dc41b7ffdbdcccf25/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34d9c2c269c553a1f15813f6d7624e8aca87adef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34d9c2c269c553a1f15813f6d7624e8aca87adef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34d9c2c269c553a1f15813f6d7624e8aca87adef"}], "stats": {"total": 77, "additions": 69, "deletions": 8}, "files": [{"sha": "9965009eb3e6ddfca3520881955f5b07d8dc2839", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe6fb0d1590237c67b75342dc41b7ffdbdcccf25/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe6fb0d1590237c67b75342dc41b7ffdbdcccf25/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fe6fb0d1590237c67b75342dc41b7ffdbdcccf25", "patch": "@@ -1,3 +1,15 @@\n+2019-05-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/system_error (error_code): Remove friend declaration\n+\tfor hash<error_code>.\n+\t(hash<error_code>::operator()): Use public member functions to access\n+\tvalue and category.\n+\t(hash<error_condition>::operator()): Use address of category, not\n+\tits object representation.\n+\t* src/c++11/compatibility-c++0x.cc (hash<error_code>::operator()):\n+\tUse public member functions to access value and category.\n+\t* testsuite/19_diagnostics/error_condition/hash.cc: New test.\n+\n 2019-05-04  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \tPR libstdc++/90277"}, {"sha": "a60c96accb2171982068056e79d147d328d2ad13", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe6fb0d1590237c67b75342dc41b7ffdbdcccf25/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe6fb0d1590237c67b75342dc41b7ffdbdcccf25/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=fe6fb0d1590237c67b75342dc41b7ffdbdcccf25", "patch": "@@ -193,8 +193,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     // DR 804.\n   private:\n-    friend class hash<error_code>;\n-\n     int            \t\t_M_value;\n     const error_category* \t_M_cat;\n   };\n@@ -394,13 +392,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       size_t\n       operator()(const error_code& __e) const noexcept\n       {\n-\tconst size_t __tmp = std::_Hash_impl::hash(__e._M_value);\n-\treturn std::_Hash_impl::__hash_combine(__e._M_cat, __tmp);\n+\tconst size_t __tmp = std::_Hash_impl::hash(__e.value());\n+\treturn std::_Hash_impl::__hash_combine(&__e.category(), __tmp);\n       }\n     };\n #endif // _GLIBCXX_COMPATIBILITY_CXX0X\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n   // DR 2686.\n   /// std::hash specialization for error_condition.\n   template<>\n@@ -411,7 +409,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator()(const error_condition& __e) const noexcept\n       {\n \tconst size_t __tmp = std::_Hash_impl::hash(__e.value());\n-\treturn std::_Hash_impl::__hash_combine(__e.category(), __tmp);\n+\treturn std::_Hash_impl::__hash_combine(&__e.category(), __tmp);\n       }\n     };\n #endif"}, {"sha": "25ebe43e093e299254c4994f2d0fe248cba59f9d", "filename": "libstdc++-v3/src/c++11/compatibility-c++0x.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe6fb0d1590237c67b75342dc41b7ffdbdcccf25/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe6fb0d1590237c67b75342dc41b7ffdbdcccf25/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-c%2B%2B0x.cc?ref=fe6fb0d1590237c67b75342dc41b7ffdbdcccf25", "patch": "@@ -117,8 +117,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   size_t\n   hash<error_code>::operator()(error_code __e) const\n   {\n-    const size_t __tmp = std::_Hash_impl::hash(__e._M_value);\n-    return std::_Hash_impl::__hash_combine(__e._M_cat, __tmp);\n+    const size_t __tmp = std::_Hash_impl::hash(__e.value());\n+    return std::_Hash_impl::__hash_combine(&__e.category(), __tmp);\n   }\n \n   // gcc-4.7.0"}, {"sha": "3bc056114181a7228631d9884c348da05f6b7742", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_condition/hash.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe6fb0d1590237c67b75342dc41b7ffdbdcccf25/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fhash.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe6fb0d1590237c67b75342dc41b7ffdbdcccf25/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fhash.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fhash.cc?ref=fe6fb0d1590237c67b75342dc41b7ffdbdcccf25", "patch": "@@ -0,0 +1,51 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target c++17 } }\n+\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+struct error_cat : std::error_category\n+{\n+  error_cat(std::string s) : _name(s) { }\n+  std::string _name;\n+  const char* name() const noexcept override { return _name.c_str(); }\n+  std::string message(int) const override { return \"error\"; }\n+};\n+\n+void\n+test01()\n+{\n+  std::hash<std::error_condition> h;\n+  error_cat kitty(\"kitty\"), moggy(\"moggy\");\n+  std::error_condition cond1(99, kitty);\n+  VERIFY( h(cond1) == h(cond1) );\n+  std::error_condition cond2(99, kitty);\n+  VERIFY( h(cond1) == h(cond2) );\n+  std::error_condition cond3(88, kitty);\n+  VERIFY( h(cond1) != h(cond3) );\n+  std::error_condition cond4(99, moggy);\n+  VERIFY( h(cond1) != h(cond4) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}