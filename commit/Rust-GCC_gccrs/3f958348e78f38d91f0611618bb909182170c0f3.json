{"sha": "3f958348e78f38d91f0611618bb909182170c0f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y5NTgzNDhlNzhmMzhkOTFmMDYxMTYxOGJiOTA5MTgyMTcwYzBmMw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-03-11T22:43:39Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-03-11T22:43:39Z"}, "message": "analyzer: gracefully handle impossible paths in shortest-paths.h\n\nThis bulletproofs the shortest_paths code against unreachable nodes,\ngracefully handling them, rather than failing an assertion.\n\nI've marked this as \"analyzer\" as this is the only code using\nshortest-paths.h.\n\nThis patch is required by followup work to fix PR analyzer/96374.\n\ngcc/ChangeLog:\n\t* digraph.cc (selftest::test_shortest_paths): Add test coverage\n\tfor paths from B and C.\n\t* shortest-paths.h (shortest_paths::shortest_paths): Handle\n\tunreachable nodes, rather than asserting.", "tree": {"sha": "4825f1b0a8f3500fb176782a3474c3bf563bb310", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4825f1b0a8f3500fb176782a3474c3bf563bb310"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f958348e78f38d91f0611618bb909182170c0f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f958348e78f38d91f0611618bb909182170c0f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f958348e78f38d91f0611618bb909182170c0f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f958348e78f38d91f0611618bb909182170c0f3/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4f8e568aa66a8461ee39d5f85c2e2d41a833b7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4f8e568aa66a8461ee39d5f85c2e2d41a833b7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4f8e568aa66a8461ee39d5f85c2e2d41a833b7f"}], "stats": {"total": 107, "additions": 83, "deletions": 24}, "files": [{"sha": "3441a8586cb47476c819c639eff91dc5a3102910", "filename": "gcc/digraph.cc", "status": "modified", "additions": 79, "deletions": 22, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f958348e78f38d91f0611618bb909182170c0f3/gcc%2Fdigraph.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f958348e78f38d91f0611618bb909182170c0f3/gcc%2Fdigraph.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdigraph.cc?ref=3f958348e78f38d91f0611618bb909182170c0f3", "patch": "@@ -142,36 +142,93 @@ test_shortest_paths ()\n   test_edge *ac = g.add_test_edge (a, c);\n   test_edge *cd = g.add_test_edge (c, d);\n   test_edge *be = g.add_test_edge (b, e);\n-  g.add_test_edge (e, f);\n+  test_edge *ef = g.add_test_edge (e, f);\n   test_edge *cf = g.add_test_edge (c, f);\n \n-  shortest_paths<test_graph_traits, test_path> sp (g, a);\n+  /* Use \"A\" as the origin; all nodes should be reachable.  */\n+  {\n+    shortest_paths<test_graph_traits, test_path> sp (g, a);\n+\n+    test_path path_to_a = sp.get_shortest_path (a);\n+    ASSERT_EQ (path_to_a.m_edges.length (), 0); /* Trivial path.  */\n+\n+    test_path path_to_b = sp.get_shortest_path (b);\n+    ASSERT_EQ (path_to_b.m_edges.length (), 1);\n+    ASSERT_EQ (path_to_b.m_edges[0], ab);\n+\n+    test_path path_to_c = sp.get_shortest_path (c);\n+    ASSERT_EQ (path_to_c.m_edges.length (), 1);\n+    ASSERT_EQ (path_to_c.m_edges[0], ac);\n+\n+    test_path path_to_d = sp.get_shortest_path (d);\n+    ASSERT_EQ (path_to_d.m_edges.length (), 2);\n+    ASSERT_EQ (path_to_d.m_edges[0], ac);\n+    ASSERT_EQ (path_to_d.m_edges[1], cd);\n+\n+    test_path path_to_e = sp.get_shortest_path (e);\n+    ASSERT_EQ (path_to_e.m_edges.length (), 2);\n+    ASSERT_EQ (path_to_e.m_edges[0], ab);\n+    ASSERT_EQ (path_to_e.m_edges[1], be);\n+\n+    test_path path_to_f = sp.get_shortest_path (f);\n+    ASSERT_EQ (path_to_f.m_edges.length (), 2);\n+    ASSERT_EQ (path_to_f.m_edges[0], ac);\n+    ASSERT_EQ (path_to_f.m_edges[1], cf);\n+  }\n+\n+  /* Verify that we gracefully handle an origin from which some nodes\n+     aren't reachable.  */\n+\n+  /* Use \"B\" as the origin, so only E and F are reachable.  */\n+  {\n+    shortest_paths<test_graph_traits, test_path> sp (g, b);\n \n-  test_path path_to_a = sp.get_shortest_path (a);\n-  ASSERT_EQ (path_to_a.m_edges.length (), 0);\n+    test_path path_to_a = sp.get_shortest_path (a);\n+    ASSERT_EQ (path_to_a.m_edges.length (), 0); /* No path.  */\n \n-  test_path path_to_b = sp.get_shortest_path (b);\n-  ASSERT_EQ (path_to_b.m_edges.length (), 1);\n-  ASSERT_EQ (path_to_b.m_edges[0], ab);\n+    test_path path_to_b = sp.get_shortest_path (b);\n+    ASSERT_EQ (path_to_b.m_edges.length (), 0); /* Trivial path.  */\n \n-  test_path path_to_c = sp.get_shortest_path (c);\n-  ASSERT_EQ (path_to_c.m_edges.length (), 1);\n-  ASSERT_EQ (path_to_c.m_edges[0], ac);\n+    test_path path_to_c = sp.get_shortest_path (c);\n+    ASSERT_EQ (path_to_c.m_edges.length (), 0); /* No path.  */\n \n-  test_path path_to_d = sp.get_shortest_path (d);\n-  ASSERT_EQ (path_to_d.m_edges.length (), 2);\n-  ASSERT_EQ (path_to_d.m_edges[0], ac);\n-  ASSERT_EQ (path_to_d.m_edges[1], cd);\n+    test_path path_to_d = sp.get_shortest_path (d);\n+    ASSERT_EQ (path_to_d.m_edges.length (), 0); /* No path.  */\n \n-  test_path path_to_e = sp.get_shortest_path (e);\n-  ASSERT_EQ (path_to_e.m_edges.length (), 2);\n-  ASSERT_EQ (path_to_e.m_edges[0], ab);\n-  ASSERT_EQ (path_to_e.m_edges[1], be);\n+    test_path path_to_e = sp.get_shortest_path (e);\n+    ASSERT_EQ (path_to_e.m_edges.length (), 1);\n+    ASSERT_EQ (path_to_e.m_edges[0], be);\n \n-  test_path path_to_f = sp.get_shortest_path (f);\n-  ASSERT_EQ (path_to_f.m_edges.length (), 2);\n-  ASSERT_EQ (path_to_f.m_edges[0], ac);\n-  ASSERT_EQ (path_to_f.m_edges[1], cf);\n+    test_path path_to_f = sp.get_shortest_path (f);\n+    ASSERT_EQ (path_to_f.m_edges.length (), 2);\n+    ASSERT_EQ (path_to_f.m_edges[0], be);\n+    ASSERT_EQ (path_to_f.m_edges[1], ef);\n+  }\n+\n+  /* Use \"C\" as the origin, so only D and F are reachable.  */\n+  {\n+    shortest_paths<test_graph_traits, test_path> sp (g, c);\n+\n+    test_path path_to_a = sp.get_shortest_path (a);\n+    ASSERT_EQ (path_to_a.m_edges.length (), 0); /* No path.  */\n+\n+    test_path path_to_b = sp.get_shortest_path (b);\n+    ASSERT_EQ (path_to_b.m_edges.length (), 0); /* No path.  */\n+\n+    test_path path_to_c = sp.get_shortest_path (c);\n+    ASSERT_EQ (path_to_c.m_edges.length (), 0); /* Trivial path.  */\n+\n+    test_path path_to_d = sp.get_shortest_path (d);\n+    ASSERT_EQ (path_to_d.m_edges.length (), 1);\n+    ASSERT_EQ (path_to_d.m_edges[0], cd);\n+\n+    test_path path_to_e = sp.get_shortest_path (e);\n+    ASSERT_EQ (path_to_e.m_edges.length (), 0); /* No path.  */\n+\n+    test_path path_to_f = sp.get_shortest_path (f);\n+    ASSERT_EQ (path_to_f.m_edges.length (), 1);\n+    ASSERT_EQ (path_to_f.m_edges[0], cf);\n+  }\n }\n \n /* Run all of the selftests within this file.  */"}, {"sha": "5648a95989505ec92861cd422c2e4c804394fe07", "filename": "gcc/shortest-paths.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f958348e78f38d91f0611618bb909182170c0f3/gcc%2Fshortest-paths.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f958348e78f38d91f0611618bb909182170c0f3/gcc%2Fshortest-paths.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fshortest-paths.h?ref=3f958348e78f38d91f0611618bb909182170c0f3", "patch": "@@ -96,7 +96,8 @@ shortest_paths<GraphTraits, Path_t>::shortest_paths (const graph_t &graph,\n \t      idx_in_queue_with_min_dist = i;\n \t    }\n \t}\n-      gcc_assert (idx_with_min_dist != -1);\n+      if (idx_with_min_dist == -1)\n+\tbreak;\n       gcc_assert (idx_in_queue_with_min_dist != -1);\n \n       // FIXME: this is confusing: there are two indices here\n@@ -123,7 +124,8 @@ shortest_paths<GraphTraits, Path_t>::shortest_paths (const graph_t &graph,\n }\n \n /* Generate an Path_t instance giving the shortest path to the node\n-   TO from the origin node.  */\n+   TO from the origin node.\n+   If no such path exists, return an empty path.  */\n \n template <typename GraphTraits, typename Path_t>\n inline Path_t"}]}