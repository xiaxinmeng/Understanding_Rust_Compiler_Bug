{"sha": "e8206491f015e63752c9db55d1b887a69d45b6af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgyMDY0OTFmMDE1ZTYzNzUyYzlkYjU1ZDFiODg3YTY5ZDQ1YjZhZg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-03-28T17:06:19Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-03-28T17:06:19Z"}, "message": "fold-const.c (fold_unary): Fold (T1)(~(T2)X) as ~(T1)X...\n\n\n\t* fold-const.c (fold_unary) <NOP_EXPR>: Fold (T1)(~(T2)X) as\n\t~(T1)X, when T1 and T2 are integer types of the same precision\n\tand (T2)X isn't an extension.\n\n\t* gcc.dg/fold-convnotconv-1.c: New test case.\n\nFrom-SVN: r112455", "tree": {"sha": "da262e848274dd56c1a6e2548ba2152e0008a4b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da262e848274dd56c1a6e2548ba2152e0008a4b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8206491f015e63752c9db55d1b887a69d45b6af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8206491f015e63752c9db55d1b887a69d45b6af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8206491f015e63752c9db55d1b887a69d45b6af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8206491f015e63752c9db55d1b887a69d45b6af/comments", "author": null, "committer": null, "parents": [{"sha": "792617a52abfb67c52c6bec3a431fdc193773786", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/792617a52abfb67c52c6bec3a431fdc193773786", "html_url": "https://github.com/Rust-GCC/gccrs/commit/792617a52abfb67c52c6bec3a431fdc193773786"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "64bbd152acf160e85ecfab1dbc6c4313631a9a23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8206491f015e63752c9db55d1b887a69d45b6af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8206491f015e63752c9db55d1b887a69d45b6af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e8206491f015e63752c9db55d1b887a69d45b6af", "patch": "@@ -1,3 +1,9 @@\n+2006-03-28  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (fold_unary) <NOP_EXPR>: Fold (T1)(~(T2)X) as\n+\t~(T1)X, when T1 and T2 are integer types of the same precision\n+\tand (T2)X isn't an extension.\n+\n 2006-03-28  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/26796"}, {"sha": "695dc5d35122ca504e07c62d9f3e4bc4d0235f51", "filename": "gcc/fold-const.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8206491f015e63752c9db55d1b887a69d45b6af/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8206491f015e63752c9db55d1b887a69d45b6af/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e8206491f015e63752c9db55d1b887a69d45b6af", "patch": "@@ -7074,6 +7074,22 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \t\t\t   TREE_OPERAND (arg0, 1));\n \t}\n \n+      /* Convert (T1)(~(T2)X) into ~(T1)X if T1 and T2 are integral types\n+\t of the same precision, and X is a integer type not narrower than\n+\t types T1 or T2, i.e. the cast (T2)X isn't an extension.  */\n+      if (INTEGRAL_TYPE_P (type)\n+\t  && TREE_CODE (op0) == BIT_NOT_EXPR\n+\t  && INTEGRAL_TYPE_P (TREE_TYPE (op0))\n+\t  && (TREE_CODE (TREE_OPERAND (op0, 0)) == NOP_EXPR\n+\t      || TREE_CODE (TREE_OPERAND (op0, 0)) == CONVERT_EXPR)\n+\t  && TYPE_PRECISION (type) == TYPE_PRECISION (TREE_TYPE (op0)))\n+\t{\n+\t  tem = TREE_OPERAND (TREE_OPERAND (op0, 0), 0);\n+\t  if (INTEGRAL_TYPE_P (TREE_TYPE (tem))\n+\t      && TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (tem)))\n+\t    return fold_build1 (BIT_NOT_EXPR, type, fold_convert (type, tem));\n+\t}\n+\n       tem = fold_convert_const (code, type, arg0);\n       return tem ? tem : NULL_TREE;\n "}, {"sha": "8443fdaded5c95555276e271be1dcfae19bee9b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8206491f015e63752c9db55d1b887a69d45b6af/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8206491f015e63752c9db55d1b887a69d45b6af/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e8206491f015e63752c9db55d1b887a69d45b6af", "patch": "@@ -1,3 +1,7 @@\n+2006-03-28  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/fold-convnotconv-1.c: New test case.\n+\n 2006-03-28 Paul Thomas <pault@gcc.gnu.org>\n \n \tPR fortran/26779"}, {"sha": "fc07903c5159aa638d621b0e69bd680bd76f0c40", "filename": "gcc/testsuite/gcc.dg/fold-convnotconv-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8206491f015e63752c9db55d1b887a69d45b6af/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-convnotconv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8206491f015e63752c9db55d1b887a69d45b6af/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-convnotconv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-convnotconv-1.c?ref=e8206491f015e63752c9db55d1b887a69d45b6af", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-original\" } */\n+\n+int test1(int a)\n+{\n+  return ~(unsigned int)a;\n+}\n+\n+unsigned int test2(unsigned int b)\n+{\n+  return ~(int)b;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"~a\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"~b\" 1 \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */\n+"}]}