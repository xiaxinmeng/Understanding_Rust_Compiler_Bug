{"sha": "02a1994cbad7e89f535ee982c80def2bd6e7d9bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJhMTk5NGNiYWQ3ZTg5ZjUzNWVlOTgyYzgwZGVmMmJkNmU3ZDliZg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-08-04T23:46:34Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-08-04T23:46:34Z"}, "message": "re PR middle-end/11771 (Segfault with simple double arithmetics)\n\n\n\tPR middle-end/11771\n\t* fold-const.c (negate_expr_p <MINUS_EXPR>): Change to match the\n\tlogic in negate_expr, i.e. we don't invert (A-B) for floating\n\tpoint types unless flag_unsafe_math_optimizations.\n\n\t* gcc.c-torture/compile/20030804-1.c: New test case.\n\nFrom-SVN: r70159", "tree": {"sha": "9c669844e1a60281f0d3d519b7d1aa95ce112ec3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c669844e1a60281f0d3d519b7d1aa95ce112ec3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02a1994cbad7e89f535ee982c80def2bd6e7d9bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a1994cbad7e89f535ee982c80def2bd6e7d9bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02a1994cbad7e89f535ee982c80def2bd6e7d9bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a1994cbad7e89f535ee982c80def2bd6e7d9bf/comments", "author": null, "committer": null, "parents": [{"sha": "f2593a6649384b002184762c58b083eb5f8e939f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2593a6649384b002184762c58b083eb5f8e939f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2593a6649384b002184762c58b083eb5f8e939f"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "60bfb0289e4329cd878af7485cb6d12b540d4c13", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a1994cbad7e89f535ee982c80def2bd6e7d9bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a1994cbad7e89f535ee982c80def2bd6e7d9bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02a1994cbad7e89f535ee982c80def2bd6e7d9bf", "patch": "@@ -1,3 +1,10 @@\n+2003-08-04  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/11771\n+\t* fold-const.c (negate_expr_p <MINUS_EXPR>): Change to match the\n+\tlogic in negate_expr, i.e. we don't invert (A-B) for floating\n+\tpoint types unless flag_unsafe_math_optimizations.\n+\n 2003-08-04  Roger Sayle  <roger@eyesopen.com>\n \n \t* fold-const.c (fold <PLUS_EXPR>): Transform x+x into x*2.0."}, {"sha": "9333c5907477766856e1b33eaafd600e3734c25c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a1994cbad7e89f535ee982c80def2bd6e7d9bf/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a1994cbad7e89f535ee982c80def2bd6e7d9bf/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=02a1994cbad7e89f535ee982c80def2bd6e7d9bf", "patch": "@@ -841,9 +841,12 @@ negate_expr_p (tree t)\n \n     case REAL_CST:\n     case NEGATE_EXPR:\n-    case MINUS_EXPR:\n       return true;\n \n+    case MINUS_EXPR:\n+      /* We can't turn -(A-B) into B-A when we honor signed zeros.  */\n+      return ! FLOAT_TYPE_P (type) || flag_unsafe_math_optimizations;\n+\n     default:\n       break;\n     }"}, {"sha": "86e12c522c411899a2593a0846c72a1a21d872c8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a1994cbad7e89f535ee982c80def2bd6e7d9bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a1994cbad7e89f535ee982c80def2bd6e7d9bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=02a1994cbad7e89f535ee982c80def2bd6e7d9bf", "patch": "@@ -1,3 +1,8 @@\n+2003-08-04  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/11771\n+\t* gcc.c-torture/compile/20030804-1.c: New test case.\n+\n 2003-08-04  Roger Sayle  <roger@eyesopen.com>\n \n \t* gcc.dg/20030804-1.c: New test case."}, {"sha": "189fde3cee5fd2825adfb13323cc2046096602d9", "filename": "gcc/testsuite/gcc.c-torture/compile/20030804-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a1994cbad7e89f535ee982c80def2bd6e7d9bf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20030804-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a1994cbad7e89f535ee982c80def2bd6e7d9bf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20030804-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20030804-1.c?ref=02a1994cbad7e89f535ee982c80def2bd6e7d9bf", "patch": "@@ -0,0 +1,9 @@\n+/* Extracted from PR middle-end/11771.  */\n+/* The following testcase used to ICE without -ffast-math from unbounded\n+   recursion in fold.  This was due to the logic in negate_expr_p not\n+   matching that in negate_expr.  */\n+\n+double f(double x) {\n+    return -(1 - x) + (x ? -(1 - x) : 0);\n+}\n+"}]}