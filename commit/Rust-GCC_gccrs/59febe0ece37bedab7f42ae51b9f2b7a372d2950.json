{"sha": "59febe0ece37bedab7f42ae51b9f2b7a372d2950", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlmZWJlMGVjZTM3YmVkYWI3ZjQyYWU1MWI5ZjJiN2EzNzJkMjk1MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-07-19T06:52:47Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-07-19T06:52:47Z"}, "message": "PR c++/90098 - partial specialization and class non-type parms.\n\nA non-type template parameter of class type used in an expression has\nconst-qualified type; the pt.c hunks deal with this difference from the\nunqualified type of the parameter declaration.  WAhen we use such a\nparameter as an argument to another template, we don't want to confuse\nthings by copying it, we should pass it straight through.  And we might as\nwell skip copying other classes in constant evaluation context in a\ntemplate, too; we'll get the copy semantics at instantiation time.\n\n\tPR c++/90099\n\tPR c++/90101\n\t* call.c (build_converted_constant_expr_internal): Don't copy.\n\t* pt.c (process_partial_specialization): Allow VIEW_CONVERT_EXPR\n\taround class non-type parameter.\n\t(unify) [TEMPLATE_PARM_INDEX]: Ignore cv-quals.\n\nFrom-SVN: r273591", "tree": {"sha": "450126733d15b4766d37285fd778df24af4ec88b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/450126733d15b4766d37285fd778df24af4ec88b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59febe0ece37bedab7f42ae51b9f2b7a372d2950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59febe0ece37bedab7f42ae51b9f2b7a372d2950", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59febe0ece37bedab7f42ae51b9f2b7a372d2950", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59febe0ece37bedab7f42ae51b9f2b7a372d2950/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a349418ef5247fdc0063d0daee96f6e8b5fb4a28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a349418ef5247fdc0063d0daee96f6e8b5fb4a28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a349418ef5247fdc0063d0daee96f6e8b5fb4a28"}], "stats": {"total": 69, "additions": 65, "deletions": 4}, "files": [{"sha": "cef36b2d1b2ffe7bebb10aa5e5dcf73874675171", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59febe0ece37bedab7f42ae51b9f2b7a372d2950/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59febe0ece37bedab7f42ae51b9f2b7a372d2950/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=59febe0ece37bedab7f42ae51b9f2b7a372d2950", "patch": "@@ -1,3 +1,13 @@\n+2019-07-18  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/90098 - partial specialization and class non-type parms.\n+\tPR c++/90099\n+\tPR c++/90101\n+\t* call.c (build_converted_constant_expr_internal): Don't copy.\n+\t* pt.c (process_partial_specialization): Allow VIEW_CONVERT_EXPR\n+\taround class non-type parameter.\n+\t(unify) [TEMPLATE_PARM_INDEX]: Ignore cv-quals.\n+\n 2019-07-16  Jason Merrill  <jason@redhat.com>\n \n \t* parser.c (make_location): Add overload taking cp_lexer* as last"}, {"sha": "38d229b1f3333eb7f442dfc9e18c9edf8dc29c46", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59febe0ece37bedab7f42ae51b9f2b7a372d2950/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59febe0ece37bedab7f42ae51b9f2b7a372d2950/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=59febe0ece37bedab7f42ae51b9f2b7a372d2950", "patch": "@@ -4278,6 +4278,11 @@ build_converted_constant_expr_internal (tree type, tree expr,\n \n   if (conv)\n     {\n+      /* Don't copy a class in a template.  */\n+      if (CLASS_TYPE_P (type) && conv->kind == ck_rvalue\n+\t  && processing_template_decl)\n+\tconv = next_conversion (conv);\n+\n       conv->check_narrowing = true;\n       conv->check_narrowing_const_only = true;\n       expr = convert_like (conv, expr, complain);"}, {"sha": "53aaad1800a6b8b3545cfc8a99fabfecfe8dcb16", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59febe0ece37bedab7f42ae51b9f2b7a372d2950/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59febe0ece37bedab7f42ae51b9f2b7a372d2950/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=59febe0ece37bedab7f42ae51b9f2b7a372d2950", "patch": "@@ -4954,7 +4954,8 @@ process_partial_specialization (tree decl)\n                  simple identifier' condition and also the `specialized\n                  non-type argument' bit.  */\n               && TREE_CODE (arg) != TEMPLATE_PARM_INDEX\n-\t      && !(REFERENCE_REF_P (arg)\n+\t      && !((REFERENCE_REF_P (arg)\n+\t\t    || TREE_CODE (arg) == VIEW_CONVERT_EXPR)\n \t\t   && TREE_CODE (TREE_OPERAND (arg, 0)) == TEMPLATE_PARM_INDEX))\n             {\n               if ((!packed_args && tpd.arg_uses_template_parms[i])\n@@ -22371,9 +22372,11 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n \t/* Template-parameter dependent expression.  Just accept it for now.\n \t   It will later be processed in convert_template_argument.  */\n \t;\n-      else if (same_type_p (non_reference (TREE_TYPE (arg)),\n-\t\t\t    non_reference (tparm)))\n-\t/* OK */;\n+      else if (same_type_ignoring_top_level_qualifiers_p\n+\t       (non_reference (TREE_TYPE (arg)),\n+\t\tnon_reference (tparm)))\n+\t/* OK.  Ignore top-level quals here because a class-type template\n+\t   parameter object is const.  */;\n       else if ((strict & UNIFY_ALLOW_INTEGER)\n \t       && CP_INTEGRAL_TYPE_P (tparm))\n \t/* Convert the ARG to the type of PARM; the deduced non-type"}, {"sha": "22f47884d08ec6a7c275a9882a88457c8c0dcf66", "filename": "gcc/testsuite/g++.dg/cpp2a/nontype-class18.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59febe0ece37bedab7f42ae51b9f2b7a372d2950/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59febe0ece37bedab7f42ae51b9f2b7a372d2950/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class18.C?ref=59febe0ece37bedab7f42ae51b9f2b7a372d2950", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/90101\n+// { dg-do compile { target c++2a } }\n+\n+template<typename List>\n+struct A;\n+\n+template<template<auto...> typename List>\n+struct A<List<>> {};\n+\n+template<template<auto...> typename List, auto V>\n+struct A<List<V>> {};\n+\n+template<auto>\n+struct B {};\n+\n+struct X { int value; };\n+A<B<X{1}>> a2;"}, {"sha": "91267aca3839bf4c0b27929c87562d893f0e292f", "filename": "gcc/testsuite/g++.dg/cpp2a/nontype-class19.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59febe0ece37bedab7f42ae51b9f2b7a372d2950/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59febe0ece37bedab7f42ae51b9f2b7a372d2950/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class19.C?ref=59febe0ece37bedab7f42ae51b9f2b7a372d2950", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/90099\n+// { dg-do compile { target c++2a } }\n+\n+struct Unit {\n+  int value;\n+  // auto operator<=>(const Unit&) = default;\n+};\n+\n+template<Unit U, typename... Ts>\n+struct X {};\n+\n+template<Unit U, typename T, typename... Rest>\n+struct X<U, T, Rest...> {};"}, {"sha": "5d3479c345e9b8e44791ab28835d1011438cc848", "filename": "gcc/testsuite/g++.dg/cpp2a/nontype-class20.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59febe0ece37bedab7f42ae51b9f2b7a372d2950/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59febe0ece37bedab7f42ae51b9f2b7a372d2950/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class20.C?ref=59febe0ece37bedab7f42ae51b9f2b7a372d2950", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/90098\n+// { dg-do compile { target c++2a } }\n+\n+struct A {\n+  int value;\n+  // auto operator<=>(const A&) = default;\n+};\n+\n+template<A... Us>\n+struct Z {};\n+\n+template<A V, A... Rest>\n+struct Z<V, Rest...> {};"}]}