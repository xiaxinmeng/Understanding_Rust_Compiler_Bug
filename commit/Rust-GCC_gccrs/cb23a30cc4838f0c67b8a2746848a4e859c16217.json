{"sha": "cb23a30cc4838f0c67b8a2746848a4e859c16217", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IyM2EzMGNjNDgzOGYwYzY3YjhhMjc0Njg0OGE0ZTg1OWMxNjIxNw==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2014-09-25T16:54:38Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2014-09-25T16:54:38Z"}, "message": "[AArch64] Tighten predicates on SIMD shift intrinsics\n\ngcc/\n\n\t* config/aarch64/aarch64-protos.h (aarch64_simd_const_bounds): Delete.\n\t* config/aarch64/aarch64-simd.md (aarch64_<sur>q<r>shl<mode>): Use\n\tnew predicates.\n\t(aarch64_<sur>shll2_n<mode>): Likewise.\n\t(aarch64_<sur>shr_n<mode>): Likewise.\n\t(aarch64_<sur>sra_n<mode>: Likewise.\n\t(aarch64_<sur>s<lr>i_n<mode>): Likewise.\n\t(aarch64_<sur>qshl<u>_n<mode>): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_simd_const_bounds): Delete.\n\t* config/aarch64/iterators.md (ve_mode): New.\n\t(offsetlr): Remap to infix text for use in new predicates.\n\t* config/aarch64/predicates.md (aarch64_simd_shift_imm_qi): New.\n\t(aarch64_simd_shift_imm_hi): Likewise.\n\t(aarch64_simd_shift_imm_si): Likewise.\n\t(aarch64_simd_shift_imm_di): Likewise.\n\t(aarch64_simd_shift_imm_offset_qi): Likewise.\n\t(aarch64_simd_shift_imm_offset_hi): Likewise.\n\t(aarch64_simd_shift_imm_offset_si): Likewise.\n\t(aarch64_simd_shift_imm_offset_di): Likewise.\n\t(aarch64_simd_shift_imm_bitsize_qi): Likewise.\n\t(aarch64_simd_shift_imm_bitsize_hi): Likewise.\n\t(aarch64_simd_shift_imm_bitsize_si): Likewise.\n\t(aarch64_simd_shift_imm_bitsize_di): Likewise.\n\ngcc/testsuite/\n\n\t* gcc.target/aarch64/simd/vqshlb_1.c: New.\n\nFrom-SVN: r215612", "tree": {"sha": "37bfd04f94281a7dcd6232bc6a5f6c9442a6381a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37bfd04f94281a7dcd6232bc6a5f6c9442a6381a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb23a30cc4838f0c67b8a2746848a4e859c16217", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb23a30cc4838f0c67b8a2746848a4e859c16217", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb23a30cc4838f0c67b8a2746848a4e859c16217", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb23a30cc4838f0c67b8a2746848a4e859c16217/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d0d9aad78a3d64f1b0c5c7b7abcea05bc6bc82fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0d9aad78a3d64f1b0c5c7b7abcea05bc6bc82fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0d9aad78a3d64f1b0c5c7b7abcea05bc6bc82fd"}], "stats": {"total": 174, "additions": 132, "deletions": 42}, "files": [{"sha": "8d2c5dd1210dc127b19548c2c2e6ec822a9a9bc5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb23a30cc4838f0c67b8a2746848a4e859c16217/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb23a30cc4838f0c67b8a2746848a4e859c16217/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb23a30cc4838f0c67b8a2746848a4e859c16217", "patch": "@@ -1,3 +1,29 @@\n+2014-09-25  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_simd_const_bounds): Delete.\n+\t* config/aarch64/aarch64-simd.md (aarch64_<sur>q<r>shl<mode>): Use\n+\tnew predicates.\n+\t(aarch64_<sur>shll2_n<mode>): Likewise.\n+\t(aarch64_<sur>shr_n<mode>): Likewise.\n+\t(aarch64_<sur>sra_n<mode>: Likewise.\n+\t(aarch64_<sur>s<lr>i_n<mode>): Likewise.\n+\t(aarch64_<sur>qshl<u>_n<mode>): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_simd_const_bounds): Delete.\n+\t* config/aarch64/iterators.md (ve_mode): New.\n+\t(offsetlr): Remap to infix text for use in new predicates.\n+\t* config/aarch64/predicates.md (aarch64_simd_shift_imm_qi): New.\n+\t(aarch64_simd_shift_imm_hi): Likewise.\n+\t(aarch64_simd_shift_imm_si): Likewise.\n+\t(aarch64_simd_shift_imm_di): Likewise.\n+\t(aarch64_simd_shift_imm_offset_qi): Likewise.\n+\t(aarch64_simd_shift_imm_offset_hi): Likewise.\n+\t(aarch64_simd_shift_imm_offset_si): Likewise.\n+\t(aarch64_simd_shift_imm_offset_di): Likewise.\n+\t(aarch64_simd_shift_imm_bitsize_qi): Likewise.\n+\t(aarch64_simd_shift_imm_bitsize_hi): Likewise.\n+\t(aarch64_simd_shift_imm_bitsize_si): Likewise.\n+\t(aarch64_simd_shift_imm_bitsize_di): Likewise.\n+\n 2014-09-25  Jiong Wang  <jiong.wang@arm.com>\n \n \t* shrink-wrap.c (move_insn_for_shrink_wrap): Initialize the live-in of"}, {"sha": "b5f53d21cdf3bc7672338b9e27dbe56242369a24", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb23a30cc4838f0c67b8a2746848a4e859c16217/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb23a30cc4838f0c67b8a2746848a4e859c16217/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=cb23a30cc4838f0c67b8a2746848a4e859c16217", "patch": "@@ -256,7 +256,6 @@ void aarch64_emit_call_insn (rtx);\n /* Initialize builtins for SIMD intrinsics.  */\n void init_aarch64_simd_builtins (void);\n \n-void aarch64_simd_const_bounds (rtx, HOST_WIDE_INT, HOST_WIDE_INT);\n void aarch64_simd_disambiguate_copy (rtx *, rtx *, rtx *, unsigned int);\n \n /* Emit code to place a AdvSIMD pair result in memory locations (with equal"}, {"sha": "8b7923e4f39210ce19e4a54e936922a3c579bd44", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 17, "deletions": 29, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb23a30cc4838f0c67b8a2746848a4e859c16217/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb23a30cc4838f0c67b8a2746848a4e859c16217/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=cb23a30cc4838f0c67b8a2746848a4e859c16217", "patch": "@@ -3607,12 +3607,12 @@\n (define_insn \"aarch64_<sur>shll_n<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n \t(unspec:<VWIDE> [(match_operand:VDW 1 \"register_operand\" \"w\")\n-\t\t\t (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+\t\t\t (match_operand:SI 2\n+\t\t\t   \"aarch64_simd_shift_imm_bitsize_<ve_mode>\" \"i\")]\n                          VSHLL))]\n   \"TARGET_SIMD\"\n   \"*\n   int bit_width = GET_MODE_UNIT_SIZE (<MODE>mode) * BITS_PER_UNIT;\n-  aarch64_simd_const_bounds (operands[2], 0, bit_width + 1);\n   if (INTVAL (operands[2]) == bit_width)\n   {\n     return \\\"shll\\\\t%0.<Vwtype>, %1.<Vtype>, %2\\\";\n@@ -3633,7 +3633,6 @@\n   \"TARGET_SIMD\"\n   \"*\n   int bit_width = GET_MODE_UNIT_SIZE (<MODE>mode) * BITS_PER_UNIT;\n-  aarch64_simd_const_bounds (operands[2], 0, bit_width + 1);\n   if (INTVAL (operands[2]) == bit_width)\n   {\n     return \\\"shll2\\\\t%0.<Vwtype>, %1.<Vtype>, %2\\\";\n@@ -3649,13 +3648,11 @@\n (define_insn \"aarch64_<sur>shr_n<mode>\"\n   [(set (match_operand:VSDQ_I_DI 0 \"register_operand\" \"=w\")\n         (unspec:VSDQ_I_DI [(match_operand:VSDQ_I_DI 1 \"register_operand\" \"w\")\n-\t\t\t   (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+\t\t\t   (match_operand:SI 2\n+\t\t\t     \"aarch64_simd_shift_imm_offset_<ve_mode>\" \"i\")]\n \t\t\t  VRSHR_N))]\n   \"TARGET_SIMD\"\n-  \"*\n-  int bit_width = GET_MODE_UNIT_SIZE (<MODE>mode) * BITS_PER_UNIT;\n-  aarch64_simd_const_bounds (operands[2], 1, bit_width + 1);\n-  return \\\"<sur>shr\\\\t%<v>0<Vmtype>, %<v>1<Vmtype>, %2\\\";\"\n+  \"<sur>shr\\\\t%<v>0<Vmtype>, %<v>1<Vmtype>, %2\"\n   [(set_attr \"type\" \"neon_sat_shift_imm<q>\")]\n )\n \n@@ -3665,13 +3662,11 @@\n   [(set (match_operand:VSDQ_I_DI 0 \"register_operand\" \"=w\")\n \t(unspec:VSDQ_I_DI [(match_operand:VSDQ_I_DI 1 \"register_operand\" \"0\")\n \t\t       (match_operand:VSDQ_I_DI 2 \"register_operand\" \"w\")\n-                       (match_operand:SI 3 \"immediate_operand\" \"i\")]\n+                       (match_operand:SI 3\n+\t\t\t \"aarch64_simd_shift_imm_offset_<ve_mode>\" \"i\")]\n                       VSRA))]\n   \"TARGET_SIMD\"\n-  \"*\n-  int bit_width = GET_MODE_UNIT_SIZE (<MODE>mode) * BITS_PER_UNIT;\n-  aarch64_simd_const_bounds (operands[3], 1, bit_width + 1);\n-  return \\\"<sur>sra\\\\t%<v>0<Vmtype>, %<v>2<Vmtype>, %3\\\";\"\n+  \"<sur>sra\\\\t%<v>0<Vmtype>, %<v>2<Vmtype>, %3\"\n   [(set_attr \"type\" \"neon_shift_acc<q>\")]\n )\n \n@@ -3681,14 +3676,11 @@\n   [(set (match_operand:VSDQ_I_DI 0 \"register_operand\" \"=w\")\n \t(unspec:VSDQ_I_DI [(match_operand:VSDQ_I_DI 1 \"register_operand\" \"0\")\n \t\t       (match_operand:VSDQ_I_DI 2 \"register_operand\" \"w\")\n-                       (match_operand:SI 3 \"immediate_operand\" \"i\")]\n+                       (match_operand:SI 3\n+\t\t\t \"aarch64_simd_shift_imm_<offsetlr><ve_mode>\" \"i\")]\n                       VSLRI))]\n   \"TARGET_SIMD\"\n-  \"*\n-  int bit_width = GET_MODE_UNIT_SIZE (<MODE>mode) * BITS_PER_UNIT;\n-  aarch64_simd_const_bounds (operands[3], 1 - <VSLRI:offsetlr>,\n-                             bit_width - <VSLRI:offsetlr> + 1);\n-  return \\\"s<lr>i\\\\t%<v>0<Vmtype>, %<v>2<Vmtype>, %3\\\";\"\n+  \"s<lr>i\\\\t%<v>0<Vmtype>, %<v>2<Vmtype>, %3\"\n   [(set_attr \"type\" \"neon_shift_imm<q>\")]\n )\n \n@@ -3697,13 +3689,11 @@\n (define_insn \"aarch64_<sur>qshl<u>_n<mode>\"\n   [(set (match_operand:VSDQ_I 0 \"register_operand\" \"=w\")\n \t(unspec:VSDQ_I [(match_operand:VSDQ_I 1 \"register_operand\" \"w\")\n-\t\t       (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+\t\t       (match_operand:SI 2\n+\t\t\t \"aarch64_simd_shift_imm_<ve_mode>\" \"i\")]\n                       VQSHL_N))]\n   \"TARGET_SIMD\"\n-  \"*\n-  int bit_width = GET_MODE_UNIT_SIZE (<MODE>mode) * BITS_PER_UNIT;\n-  aarch64_simd_const_bounds (operands[2], 0, bit_width);\n-  return \\\"<sur>qshl<u>\\\\t%<v>0<Vmtype>, %<v>1<Vmtype>, %2\\\";\"\n+  \"<sur>qshl<u>\\\\t%<v>0<Vmtype>, %<v>1<Vmtype>, %2\"\n   [(set_attr \"type\" \"neon_sat_shift_imm<q>\")]\n )\n \n@@ -3713,13 +3703,11 @@\n (define_insn \"aarch64_<sur>q<r>shr<u>n_n<mode>\"\n   [(set (match_operand:<VNARROWQ> 0 \"register_operand\" \"=w\")\n         (unspec:<VNARROWQ> [(match_operand:VSQN_HSDI 1 \"register_operand\" \"w\")\n-\t\t\t    (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+\t\t\t    (match_operand:SI 2\n+\t\t\t      \"aarch64_simd_shift_imm_offset_<ve_mode>\" \"i\")]\n \t\t\t   VQSHRN_N))]\n   \"TARGET_SIMD\"\n-  \"*\n-  int bit_width = GET_MODE_UNIT_SIZE (<MODE>mode) * BITS_PER_UNIT;\n-  aarch64_simd_const_bounds (operands[2], 1, bit_width + 1);\n-  return \\\"<sur>q<r>shr<u>n\\\\t%<vn2>0<Vmntype>, %<v>1<Vmtype>, %2\\\";\"\n+  \"<sur>q<r>shr<u>n\\\\t%<vn2>0<Vmntype>, %<v>1<Vmtype>, %2\"\n   [(set_attr \"type\" \"neon_sat_shift_imm_narrow_q\")]\n )\n "}, {"sha": "68c78f6430600f1c11c9a3ad88552f297bd0d17b", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb23a30cc4838f0c67b8a2746848a4e859c16217/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb23a30cc4838f0c67b8a2746848a4e859c16217/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=cb23a30cc4838f0c67b8a2746848a4e859c16217", "patch": "@@ -7988,16 +7988,6 @@ aarch64_simd_lane_bounds (rtx operand, HOST_WIDE_INT low, HOST_WIDE_INT high)\n     error (\"lane out of range\");\n }\n \n-void\n-aarch64_simd_const_bounds (rtx operand, HOST_WIDE_INT low, HOST_WIDE_INT high)\n-{\n-  gcc_assert (CONST_INT_P (operand));\n-  HOST_WIDE_INT lane = INTVAL (operand);\n-\n-  if (lane < low || lane >= high)\n-    error (\"constant out of range\");\n-}\n-\n /* Emit code to place a AdvSIMD pair result in memory locations (with equal\n    registers).  */\n void"}, {"sha": "efd006f83619405190400ddd0c89834208e15480", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb23a30cc4838f0c67b8a2746848a4e859c16217/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb23a30cc4838f0c67b8a2746848a4e859c16217/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=cb23a30cc4838f0c67b8a2746848a4e859c16217", "patch": "@@ -538,6 +538,14 @@\n \t\t\t\t(V2DF \"v2di\") (DF    \"di\")\n \t\t\t\t(SF   \"si\")])\n \n+;; Lower case element modes (as used in shift immediate patterns).\n+(define_mode_attr ve_mode [(V8QI \"qi\") (V16QI \"qi\")\n+\t\t\t   (V4HI \"hi\") (V8HI  \"hi\")\n+\t\t\t   (V2SI \"si\") (V4SI  \"si\")\n+\t\t\t   (DI   \"di\") (V2DI  \"di\")\n+\t\t\t   (QI   \"qi\") (HI    \"hi\")\n+\t\t\t   (SI   \"si\")])\n+\n ;; Vm for lane instructions is restricted to FP_LO_REGS.\n (define_mode_attr vwx [(V4HI \"x\") (V8HI \"x\") (HI \"x\")\n \t\t       (V2SI \"w\") (V4SI \"w\") (SI \"w\")])\n@@ -1007,8 +1015,9 @@\n \t\t\t (UNSPEC_RADDHN2 \"add\")\n \t\t\t (UNSPEC_RSUBHN2 \"sub\")])\n \n-(define_int_attr offsetlr [(UNSPEC_SSLI\t\"1\") (UNSPEC_USLI \"1\")\n-\t\t\t   (UNSPEC_SSRI\t\"0\") (UNSPEC_USRI \"0\")])\n+(define_int_attr offsetlr [(UNSPEC_SSLI \"\") (UNSPEC_USLI \"\")\n+\t\t\t   (UNSPEC_SSRI \"offset_\")\n+\t\t\t   (UNSPEC_USRI \"offset_\")])\n \n ;; Standard pattern names for floating-point rounding instructions.\n (define_int_attr frint_pattern [(UNSPEC_FRINTZ \"btrunc\")"}, {"sha": "d5b0b2a9d8dd8215a193e7fd8f4addb319f2f2a6", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb23a30cc4838f0c67b8a2746848a4e859c16217/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb23a30cc4838f0c67b8a2746848a4e859c16217/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=cb23a30cc4838f0c67b8a2746848a4e859c16217", "patch": "@@ -279,3 +279,56 @@\n {\n   return aarch64_const_vec_all_same_int_p (op, -1);\n })\n+\n+;; Predicates used by the various SIMD shift operations.  These\n+;; fall in to 3 categories.\n+;;   Shifts with a range 0-(bit_size - 1) (aarch64_simd_shift_imm)\n+;;   Shifts with a range 1-bit_size (aarch64_simd_shift_imm_offset)\n+;;   Shifts with a range 0-bit_size (aarch64_simd_shift_imm_bitsize)\n+(define_predicate \"aarch64_simd_shift_imm_qi\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 0, 7)\")))\n+\n+(define_predicate \"aarch64_simd_shift_imm_hi\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 0, 15)\")))\n+\n+(define_predicate \"aarch64_simd_shift_imm_si\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 0, 31)\")))\n+\n+(define_predicate \"aarch64_simd_shift_imm_di\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 0, 63)\")))\n+\n+(define_predicate \"aarch64_simd_shift_imm_offset_qi\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 1, 8)\")))\n+\n+(define_predicate \"aarch64_simd_shift_imm_offset_hi\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 1, 16)\")))\n+\n+(define_predicate \"aarch64_simd_shift_imm_offset_si\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 1, 32)\")))\n+\n+(define_predicate \"aarch64_simd_shift_imm_offset_di\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 1, 64)\")))\n+\n+(define_predicate \"aarch64_simd_shift_imm_bitsize_qi\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 0, 8)\")))\n+\n+(define_predicate \"aarch64_simd_shift_imm_bitsize_hi\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 0, 16)\")))\n+\n+(define_predicate \"aarch64_simd_shift_imm_bitsize_si\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 0, 32)\")))\n+\n+(define_predicate \"aarch64_simd_shift_imm_bitsize_di\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 0, 64)\")))"}, {"sha": "1ac6f0e03b1bb4f916f2ea0603315433cba54120", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb23a30cc4838f0c67b8a2746848a4e859c16217/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb23a30cc4838f0c67b8a2746848a4e859c16217/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb23a30cc4838f0c67b8a2746848a4e859c16217", "patch": "@@ -1,3 +1,7 @@\n+2014-09-25  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* gcc.target/aarch64/simd/vqshlb_1.c: New.\n+\n 2014-09-25  Jiong Wang  <jiong.wang@arm.com>\n \n \t* gcc.target/i386/shrink_wrap_1.c: New test."}, {"sha": "ae741de128dec3e3349f24da39214a8c36649b69", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqshlb_1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb23a30cc4838f0c67b8a2746848a4e859c16217/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqshlb_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb23a30cc4838f0c67b8a2746848a4e859c16217/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqshlb_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqshlb_1.c?ref=cb23a30cc4838f0c67b8a2746848a4e859c16217", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort ();\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int8_t arg1 = -1;\n+  int8_t arg2 = 127;\n+  int8_t exp = -128;\n+  int8_t got = vqshlb_s8 (arg1, arg2);\n+\n+  if (exp != got)\n+    abort ();\n+\n+  return 0;\n+}\n+"}]}