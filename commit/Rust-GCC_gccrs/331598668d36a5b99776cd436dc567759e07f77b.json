{"sha": "331598668d36a5b99776cd436dc567759e07f77b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMxNTk4NjY4ZDM2YTViOTk3NzZjZDQzNmRjNTY3NzU5ZTA3Zjc3Yg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-04-12T18:23:27Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-04-12T18:23:27Z"}, "message": "i386.c (ix86_hard_regno_mode_ok): Use ANY_QI_REGNO_P in QImode checks.\n\n\t* config/i386/i386.c (ix86_hard_regno_mode_ok): Use ANY_QI_REGNO_P in\n\tQImode checks.\n\nFrom-SVN: r197933", "tree": {"sha": "aeaace8da23b20b3e31386e2eaacab15c47c274f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aeaace8da23b20b3e31386e2eaacab15c47c274f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/331598668d36a5b99776cd436dc567759e07f77b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/331598668d36a5b99776cd436dc567759e07f77b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/331598668d36a5b99776cd436dc567759e07f77b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/331598668d36a5b99776cd436dc567759e07f77b/comments", "author": null, "committer": null, "parents": [{"sha": "14c96bcafde23000b572ce0f46f0157901128c07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14c96bcafde23000b572ce0f46f0157901128c07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14c96bcafde23000b572ce0f46f0157901128c07"}], "stats": {"total": 99, "additions": 48, "deletions": 51}, "files": [{"sha": "b82c40afee490b6670b0f93b7725f53110fb6677", "filename": "gcc/ChangeLog", "status": "modified", "additions": 45, "deletions": 48, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331598668d36a5b99776cd436dc567759e07f77b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331598668d36a5b99776cd436dc567759e07f77b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=331598668d36a5b99776cd436dc567759e07f77b", "patch": "@@ -1,3 +1,8 @@\n+2013-04-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_hard_regno_mode_ok): Use ANY_QI_REGNO_P in\n+\tQImode checks.\n+\n 2013-04-12  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* df-core.c (df_find_def): Compare register numbers.\n@@ -89,10 +94,9 @@\n \n 2013-04-12  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n-\t* ifcvt.c (end_ifcvt_sequence): Mark a and b for unsharing as\n-\twell.\n+\t* ifcvt.c (end_ifcvt_sequence): Mark a and b for unsharing as well.\n \n-2013-04-11   Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n+2013-04-11  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n \n \t* config/aarch64/aarch64.c (aarch64_select_cc_mode): Allow NEG\n \tcode in CC_NZ mode.\n@@ -102,8 +106,7 @@\n 2013-04-11  Marek Polacek  <polacek@redhat.com>\n \n \tPR tree-optimization/48184\n-\t* params.def (PARAM_ALIGN_THRESHOLD): Increase the minimum\n-\tvalue to 1.\n+\t* params.def (PARAM_ALIGN_THRESHOLD): Increase the minimum value to 1.\n \n 2013-04-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n@@ -112,7 +115,7 @@\n \t(skip_simple_arithmetic): Tidy up.\n \t* tree.h (skip_simple_constant_arithmetic): Declare.\n \n-2013-04-11   Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n+2013-04-11  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n \n \t* config/aarch64/aarch64.h (REVERSIBLE_CC_MODE): Define.\n \n@@ -216,7 +219,7 @@\n \t(aarch64_start_file): Use the new function.\n \n 2013-04-10  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n-            Jason Merrill  <jason@redhat.com>\n+\t    Jason Merrill  <jason@redhat.com>\n \n \t* common.opt: Add -gdwarf.\n \t* opts.c (common_handle_option): Handle it.\n@@ -303,8 +306,7 @@\n 2013-04-09  Marek Polacek  <polacek@redhat.com>\n \n \tPR tree-optimization/48762\n-\t* params.def (PARAM_MAX_CSE_INSNS): Increase the minimum\n-\tvalue to 1.\n+\t* params.def (PARAM_MAX_CSE_INSNS): Increase the minimum value to 1.\n \n 2013-04-09  Richard Biener  <rguenther@suse.de>\n \n@@ -389,7 +391,7 @@\n \n \t* basic-block.h (GCOV_COMPUTE_SCALE): Define.\n \t* ipa-inline-analysis.c (param_change_prob): Use helper rounding divide\n-        methods.\n+\tmethods.\n \t(estimate_edge_size_and_time): Add comment to suggest using rounding\n \tmethods.\n \t(estimate_node_size_and_time): Ditto.\n@@ -417,7 +419,7 @@\n \t(update_specialized_profile): Ditto.\n \t* tree-vect-loop-manip.c (slpeel_tree_peel_loop_to_edge): Ditto.\n \t* cfg.c (update_bb_profile_for_threading): Add comment to suggest using\n-        rounding methods.\n+\trounding methods.\n \t* sched-rgn.c (compute_dom_prob_ps): Ditto.\n \t(compute_trg_info): Ditto.\n \t* cfgrtl.c (force_nonfallthru_and_redirect): Ditto.\n@@ -451,8 +453,7 @@\n \n \t* config/epiphany/epiphany.c (epiphany_select_cc_mode):\n \tDon't use CC_FPmode for ORDERED / UNORDERED.\n-\t* config/epiphany/epiphany.md (cmpsf_ord): Make pattern\n-\tunconditional.\n+\t* config/epiphany/epiphany.md (cmpsf_ord): Make pattern unconditional.\n \n \t* config/epiphany/constraints.md (CnL): New constraint.\n \t* config/epiphany/epiphany.md (addsi3_i): Add r/r/CnL alternative.\n@@ -517,8 +518,8 @@\n \n 2013-04-08  Xinyu Qi  <xyqi@marvell.com>\n \n- \tPR target/54338\n- \t* config/arm/arm.h (REG_CLASS_CONTENTS): Include IWMMXT_GR_REGS\n+\tPR target/54338\n+\t* config/arm/arm.h (REG_CLASS_CONTENTS): Include IWMMXT_GR_REGS\n \tin ALL_REGS.\n \n 2013-04-08  Richard Biener  <rguenther@suse.de>\n@@ -586,7 +587,7 @@\n \t(movdf_soft_insn): Likewise.\n \t* config/arm/vfp.md (movdi_vfp): Likewise.\n \t* config/arm/t-arm (MD_INCLUDES): Add ldrdstrd.md.\n-        * config/arm/arm-protos.h (gen_operands_ldrd_strd): New declaration.\n+\t* config/arm/arm-protos.h (gen_operands_ldrd_strd): New declaration.\n \t* config/arm/arm.c (gen_operands_ldrd_strd): New function.\n \t(mem_ok_for_ldrd_strd): Likewise.\n \t(output_move_double): Update assertion.\n@@ -605,7 +606,7 @@\n \n \t* config/arm/arm.md (arm_ashldi3_1bit): Convert define_insn into\n \tdefine_insn_and_split.\n-        (arm_ashrdi3_1bit,arm_lshrdi3_1bit): Likewise.\n+\t(arm_ashrdi3_1bit,arm_lshrdi3_1bit): Likewise.\n \t(shiftsi3_compare): New pattern.\n \t(rrx): New pattern.\n \t* config/arm/unspecs.md (UNSPEC_RRX): New.\n@@ -656,8 +657,8 @@\n \n 2013-04-04  Ian Lance Taylor  <iant@google.com>\n \n-\t* doc/standards.texi (Standards): The Go frontend supports the Go\n-\t1 language standard.\n+\t* doc/standards.texi (Standards): The Go frontend supports the Go 1\n+\tlanguage standard.\n \n 2013-04-04  Steven Bosscher  <steven@gcc.gnu.org>\n \n@@ -679,8 +680,7 @@\n \tarm_neon_builtins.def.\n \t(enum arm_builtins): Include neon builtin definitions.\n \t(ARM_BUILTIN_NEON_BASE): Move from enum to macro.\n-\t* config/arm/t-arm (arm.o): Add dependency on\n-\tarm_neon_builtins.def.\n+\t* config/arm/t-arm (arm.o): Add dependency on arm_neon_builtins.def.\n \n 2013-04-04  Marek Polacek  <polacek@redhat.com>\n \n@@ -699,8 +699,7 @@\n \n \tPR tree-optimization/56213\n \t* tree-vect-data-refs.c (vect_check_strided_load): Remove.\n-\t(vect_analyze_data_refs): Allow all non-nested loads as\n-\tstrided loads.\n+\t(vect_analyze_data_refs): Allow all non-nested loads as strided loads.\n \n 2013-04-04  Richard Biener  <rguenther@suse.de>\n \n@@ -711,8 +710,7 @@\n \n 2013-04-03  Nick Clifton  <nickc@redhat.com>\n \n-\t* config/v850/v850e3v5.md (fmasf4): Use fmaf.s on E3V5\n-\tarchitectures.\n+\t* config/v850/v850e3v5.md (fmasf4): Use fmaf.s on E3V5 architectures.\n \t(fmssf4): Use fmsf.s on E3V5 architectures.\n \t(fnmasf4): Use fnmaf.s on E3V5 architectures.\n \t(fnmssf4): Use fnmsf.s on E3V5 architectures.\n@@ -725,19 +723,18 @@\n 2013-04-03  Teresa Johnson  <tejohnson@google.com>\n \n \t* gcov-io.c (compute_working_sets): Moved most of body of old\n-        compute_working_sets here from profile.c.\n+\tcompute_working_sets here from profile.c.\n \t* gcov-io.h (NUM_GCOV_WORKING_SETS): Moved here from profile.c.\n-        (gcov_working_set_t): Moved typedef here from basic-block.h\n-        (compute_working_set): Declare.\n+\t(gcov_working_set_t): Moved typedef here from basic-block.h\n+\t(compute_working_set): Declare.\n \t* profile.c (NUM_GCOV_WORKING_SETS): Moved to gcov-io.h.\n \t(get_working_sets): Renamed from compute_working_set,\n-        replace most of body with call to new compute_working_sets.\n+\treplace most of body with call to new compute_working_sets.\n \t(get_exec_counts): Replace call to compute_working_sets\n-        to get_working_sets.\n-\t* profile.h (get_working_sets): Renamed from\n-        compute_working_set.\n+\tto get_working_sets.\n+\t* profile.h (get_working_sets): Renamed from compute_working_set.\n \t* lto-cgraph.c (input_symtab): Replace call to compute_working_sets\n-        to get_working_sets.\n+\tto get_working_sets.\n \t* basic-block.h (gcov_working_set_t): Moved to gcov-io.h.\n \t* gcov-dump.c (dump_working_sets): New function.\n \n@@ -754,9 +751,8 @@\n 2013-04-03  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/56799\n-        * tree-ssa-dom.c (record_equivalences_from_incoming_edge): Bring\n-\tback test for widening conversion erroneously dropped in prior\n-\tchange.\n+\t* tree-ssa-dom.c (record_equivalences_from_incoming_edge): Bring\n+\tback test for widening conversion erroneously dropped in prior change.\n \n 2013-04-03  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n@@ -767,8 +763,7 @@\n 2013-04-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/55702\n-\t* tsan.c (instrument_func_exit): Allow BUILT_IN_RETURN\n-\tfunctions.\n+\t* tsan.c (instrument_func_exit): Allow BUILT_IN_RETURN functions.\n \n 2013-04-03  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n@@ -810,7 +805,8 @@\n 2013-04-03  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR tree-optimization/56790\n-\t* fold-const.c (fold_ternary_loc) <VEC_COND_EXPR>: Add constant folding.\n+\t* fold-const.c (fold_ternary_loc) <VEC_COND_EXPR>: Add constant\n+\tfolding.\n \n 2013-04-03  Marc Glisse  <marc.glisse@inria.fr>\n \n@@ -854,7 +850,8 @@\n \tPR target/52790\n \t* config/i386/cygming.h (SUB_TARGET_RECORD_STUB): New sub-target macro.\n \t* config/i386/i386-protos.h (i386_pe_record_stub): Add new prototype.\n-\t* config/i386/i386.c (legitimize_pe_coff_extern_decl): New static function.\n+\t* config/i386/i386.c (legitimize_pe_coff_extern_decl): New static\n+\tfunction.\n \t(legitimize_pe_coff_symbol): Likewise.\n \t(is_imported_p): New helper-function.\n \t(ix86_option_override_internal): Make MEDIUM_PIC the default code-model\n@@ -1382,7 +1379,7 @@\n \t* config/i386/i386.md (*vec_extract2vdi_1): Merge with\n \t*vec_extractv2di_1_rex64.  Use x64 isa attribute.\n \n-2013-03-28   Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n+2013-03-28  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n \n \t* config/aarch64/aarch64.md (*and<mode>3_compare0): New pattern.\n \t(*andsi3_compare0_uxtw): New pattern.\n@@ -1416,7 +1413,7 @@\n \n 2013-03-28  Kenneth Zadeck  <zadeck@naturalbridge.com>\n \n-   \t* genmodes.c (emit_max_int): New function.\n+\t* genmodes.c (emit_max_int): New function.\n \t(emit_insn_modes_h): Added call to emit_max_function.\n \t* doc/rtl.texi (MAX_BITSIZE_MODE_ANY_INT, MAX_BITSIZE_MODE_ANY_MODE):\n \tAdded doc.\n@@ -1635,8 +1632,8 @@\n 2013-03-26  Xinyu Qi  <xyqi@marvell.com>\n \n \t* config/arm/arm.h (FIRST_IWMMXT_GR_REGNUM): Add comment.\n-        * config/arm/iwmmxt.md (WCGR0): Update.\n-        (WCGR1, WCGR2, WCGR3): Likewise.\n+\t* config/arm/iwmmxt.md (WCGR0): Update.\n+\t(WCGR1, WCGR2, WCGR3): Likewise.\n \n 2013-03-26  Uros Bizjak  <ubizjak@gmail.com>\n \n@@ -1657,8 +1654,8 @@\n \n 2013-03-25  Jeff Law  <law@redhat.com>\n \n-        * tree-ssa-dom.c (record_equivalences_from_incoming_edge): Add missing\n-        check for INTEGRAL_TYPE_P that was missing due to checking in\n+\t* tree-ssa-dom.c (record_equivalences_from_incoming_edge): Add missing\n+\tcheck for INTEGRAL_TYPE_P that was missing due to checking in\n \twrong version of prior patch.\n \n 2013-03-25  Walter Lee  <walt@tilera.com>\n@@ -2600,7 +2597,7 @@\n \t* config/mips/mips.md (multimem): New type.\n \t(length): Differentiate between 17-bit and 18-bit branch offsets.\n \t(MOVEP1, MOVEP2): New mode iterator.\n- \t(mov_<load>l): Use ZC constraint.\n+\t(mov_<load>l): Use ZC constraint.\n \t(mov_<load>r): Likewise.\n \t(mov_<store>l): Likewise.\n \t(mov_<store>r): Likewise.\n@@ -2654,7 +2651,7 @@\n \t(mips_attribute_table): Add micromips, nomicromips and nocompression.\n \t(mips_mips16_decl_p): Delete.\n \t(mips_nomips16_decl_p): Delete.\n- \t(mips_get_compress_on_flags): New function.\n+\t(mips_get_compress_on_flags): New function.\n \t(mips_get_compress_off_flags): New function.\n \t(mips_get_compress_mode): New function.\n \t(mips_get_compress_on_name): New function."}, {"sha": "4d4c61876a10531f42242169a55904b16e7e578b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/331598668d36a5b99776cd436dc567759e07f77b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/331598668d36a5b99776cd436dc567759e07f77b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=331598668d36a5b99776cd436dc567759e07f77b", "patch": "@@ -33972,13 +33972,13 @@ ix86_hard_regno_mode_ok (int regno, enum machine_mode mode)\n     {\n       /* Take care for QImode values - they can be in non-QI regs,\n \t but then they do cause partial register stalls.  */\n-      if (TARGET_64BIT || QI_REGNO_P (regno))\n+      if (ANY_QI_REGNO_P (regno))\n \treturn true;\n       if (!TARGET_PARTIAL_REG_STALL)\n \treturn true;\n       /* LRA checks if the hard register is OK for the given mode.\n-        QImode values can live in non-QI regs, so we allow all\n-        registers here.  */\n+\t QImode values can live in non-QI regs, so we allow all\n+\t registers here.  */\n       if (lra_in_progress)\n        return true;\n       return !can_create_pseudo_p ();"}]}