{"sha": "0d04fe49239d91787850036599164788f1c87785", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQwNGZlNDkyMzlkOTE3ODc4NTAwMzY1OTkxNjQ3ODhmMWM4Nzc4NQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-03T19:50:52Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-04T11:54:29Z"}, "message": "libstdc++: Add [[nodiscard]] to sequence containers\n\n... and container adaptors.\n\nThis adds the [[nodiscard]] attribute to functions with no side-effects\nfor the sequence containers and their iterators, and the debug versions\nof those containers, and the container adaptors,\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/forward_list.h: Add [[nodiscard]] to functions\n\twith no side-effects.\n\t* include/bits/stl_bvector.h: Likewise.\n\t* include/bits/stl_deque.h: Likewise.\n\t* include/bits/stl_list.h: Likewise.\n\t* include/bits/stl_queue.h: Likewise.\n\t* include/bits/stl_stack.h: Likewise.\n\t* include/bits/stl_vector.h: Likewise.\n\t* include/debug/deque: Likewise.\n\t* include/debug/forward_list: Likewise.\n\t* include/debug/list: Likewise.\n\t* include/debug/safe_iterator.h: Likewise.\n\t* include/debug/vector: Likewise.\n\t* include/std/array: Likewise.\n\t* testsuite/23_containers/array/creation/3_neg.cc: Use\n\t-Wno-unused-result.\n\t* testsuite/23_containers/array/debug/back1_neg.cc: Cast result\n\tto void.\n\t* testsuite/23_containers/array/debug/back2_neg.cc: Likewise.\n\t* testsuite/23_containers/array/debug/front1_neg.cc: Likewise.\n\t* testsuite/23_containers/array/debug/front2_neg.cc: Likewise.\n\t* testsuite/23_containers/array/debug/square_brackets_operator1_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/array/debug/square_brackets_operator2_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/array/tuple_interface/get_neg.cc:\n\tAdjust dg-error line numbers.\n\t* testsuite/23_containers/deque/cons/clear_allocator.cc: Cast\n\tresult to void.\n\t* testsuite/23_containers/deque/debug/invalidation/4.cc:\n\tLikewise.\n\t* testsuite/23_containers/deque/types/1.cc: Use\n\t-Wno-unused-result.\n\t* testsuite/23_containers/list/types/1.cc: Cast result to void.\n\t* testsuite/23_containers/priority_queue/members/7161.cc:\n\tLikewise.\n\t* testsuite/23_containers/queue/members/7157.cc: Likewise.\n\t* testsuite/23_containers/vector/59829.cc: Likewise.\n\t* testsuite/23_containers/vector/ext_pointer/types/1.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/ext_pointer/types/2.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/types/1.cc: Use\n\t-Wno-unused-result.", "tree": {"sha": "fc8e84c4b7ae94e3206bb65579fd6ef45ff9d8a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc8e84c4b7ae94e3206bb65579fd6ef45ff9d8a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d04fe49239d91787850036599164788f1c87785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d04fe49239d91787850036599164788f1c87785", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d04fe49239d91787850036599164788f1c87785", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d04fe49239d91787850036599164788f1c87785/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/240b01b0215f9e46ecf04267c8a3faeb19d4fe3c"}], "stats": {"total": 399, "additions": 362, "deletions": 37}, "files": [{"sha": "ab6d9389194975446e2971bf97229a471b3f8950", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -150,10 +150,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _Fwd_list_iterator(_Fwd_list_node_base* __n) noexcept\n       : _M_node(__n) { }\n \n+      [[__nodiscard__]]\n       reference\n       operator*() const noexcept\n       { return *static_cast<_Node*>(this->_M_node)->_M_valptr(); }\n \n+      [[__nodiscard__]]\n       pointer\n       operator->() const noexcept\n       { return static_cast<_Node*>(this->_M_node)->_M_valptr(); }\n@@ -176,6 +178,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /**\n        *  @brief  Forward list iterator equality comparison.\n        */\n+      [[__nodiscard__]]\n       friend bool\n       operator==(const _Self& __x, const _Self& __y) noexcept\n       { return __x._M_node == __y._M_node; }\n@@ -184,6 +187,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /**\n        *  @brief  Forward list iterator inequality comparison.\n        */\n+      [[__nodiscard__]]\n       friend bool\n       operator!=(const _Self& __x, const _Self& __y) noexcept\n       { return __x._M_node != __y._M_node; }\n@@ -229,10 +233,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _Fwd_list_const_iterator(const iterator& __iter) noexcept\n       : _M_node(__iter._M_node) { }\n \n+      [[__nodiscard__]]\n       reference\n       operator*() const noexcept\n       { return *static_cast<_Node*>(this->_M_node)->_M_valptr(); }\n \n+      [[__nodiscard__]]\n       pointer\n       operator->() const noexcept\n       { return static_cast<_Node*>(this->_M_node)->_M_valptr(); }\n@@ -255,6 +261,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /**\n        *  @brief  Forward list const_iterator equality comparison.\n        */\n+      [[__nodiscard__]]\n       friend bool\n       operator==(const _Self& __x, const _Self& __y) noexcept\n       { return __x._M_node == __y._M_node; }\n@@ -263,6 +270,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /**\n        *  @brief  Forward list const_iterator inequality comparison.\n        */\n+      [[__nodiscard__]]\n       friend bool\n       operator!=(const _Self& __x, const _Self& __y) noexcept\n       { return __x._M_node != __y._M_node; }\n@@ -698,6 +706,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Returns a read/write iterator that points before the first element\n        *  in the %forward_list.  Iteration is done in ordinary element order.\n        */\n+      [[__nodiscard__]]\n       iterator\n       before_begin() noexcept\n       { return iterator(&this->_M_impl._M_head); }\n@@ -707,6 +716,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  first element in the %forward_list.  Iteration is done in ordinary\n        *  element order.\n        */\n+      [[__nodiscard__]]\n       const_iterator\n       before_begin() const noexcept\n       { return const_iterator(&this->_M_impl._M_head); }\n@@ -715,6 +725,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Returns a read/write iterator that points to the first element\n        *  in the %forward_list.  Iteration is done in ordinary element order.\n        */\n+      [[__nodiscard__]]\n       iterator\n       begin() noexcept\n       { return iterator(this->_M_impl._M_head._M_next); }\n@@ -724,6 +735,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element in the %forward_list.  Iteration is done in ordinary\n        *  element order.\n        */\n+      [[__nodiscard__]]\n       const_iterator\n       begin() const noexcept\n       { return const_iterator(this->_M_impl._M_head._M_next); }\n@@ -733,6 +745,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element in the %forward_list.  Iteration is done in ordinary\n        *  element order.\n        */\n+      [[__nodiscard__]]\n       iterator\n       end() noexcept\n       { return iterator(nullptr); }\n@@ -742,6 +755,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element in the %forward_list.  Iteration is done in ordinary\n        *  element order.\n        */\n+      [[__nodiscard__]]\n       const_iterator\n       end() const noexcept\n       { return const_iterator(nullptr); }\n@@ -751,6 +765,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  first element in the %forward_list.  Iteration is done in ordinary\n        *  element order.\n        */\n+      [[__nodiscard__]]\n       const_iterator\n       cbegin() const noexcept\n       { return const_iterator(this->_M_impl._M_head._M_next); }\n@@ -760,6 +775,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  first element in the %forward_list.  Iteration is done in ordinary\n        *  element order.\n        */\n+      [[__nodiscard__]]\n       const_iterator\n       cbefore_begin() const noexcept\n       { return const_iterator(&this->_M_impl._M_head); }\n@@ -769,6 +785,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  the last element in the %forward_list.  Iteration is done in\n        *  ordinary element order.\n        */\n+      [[__nodiscard__]]\n       const_iterator\n       cend() const noexcept\n       { return const_iterator(nullptr); }\n@@ -777,13 +794,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Returns true if the %forward_list is empty.  (Thus begin() would\n        *  equal end().)\n        */\n-      _GLIBCXX_NODISCARD bool\n+      [[__nodiscard__]]\n+      bool\n       empty() const noexcept\n       { return this->_M_impl._M_head._M_next == nullptr; }\n \n       /**\n        *  Returns the largest possible number of elements of %forward_list.\n        */\n+      [[__nodiscard__]]\n       size_type\n       max_size() const noexcept\n       { return _Node_alloc_traits::max_size(this->_M_get_Node_allocator()); }\n@@ -794,6 +813,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Returns a read/write reference to the data at the first\n        *  element of the %forward_list.\n        */\n+      [[__nodiscard__]]\n       reference\n       front()\n       {\n@@ -805,6 +825,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Returns a read-only (constant) reference to the data at the first\n        *  element of the %forward_list.\n        */\n+      [[__nodiscard__]]\n       const_reference\n       front() const\n       {\n@@ -1425,6 +1446,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *  if corresponding elements compare equal.\n    */\n   template<typename _Tp, typename _Alloc>\n+    [[__nodiscard__]]\n     bool\n     operator==(const forward_list<_Tp, _Alloc>& __lx,\n \t       const forward_list<_Tp, _Alloc>& __ly);\n@@ -1442,6 +1464,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *  `<` and `>=` etc.\n   */\n   template<typename _Tp, typename _Alloc>\n+    [[nodiscard]]\n     inline __detail::__synth3way_t<_Tp>\n     operator<=>(const forward_list<_Tp, _Alloc>& __x,\n \t\tconst forward_list<_Tp, _Alloc>& __y)\n@@ -1464,6 +1487,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *  See std::lexicographical_compare() for how the determination is made.\n    */\n   template<typename _Tp, typename _Alloc>\n+    [[__nodiscard__]]\n     inline bool\n     operator<(const forward_list<_Tp, _Alloc>& __lx,\n \t      const forward_list<_Tp, _Alloc>& __ly)\n@@ -1472,27 +1496,31 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   /// Based on operator==\n   template<typename _Tp, typename _Alloc>\n+    [[__nodiscard__]]\n     inline bool\n     operator!=(const forward_list<_Tp, _Alloc>& __lx,\n \t       const forward_list<_Tp, _Alloc>& __ly)\n     { return !(__lx == __ly); }\n \n   /// Based on operator<\n   template<typename _Tp, typename _Alloc>\n+    [[__nodiscard__]]\n     inline bool\n     operator>(const forward_list<_Tp, _Alloc>& __lx,\n \t      const forward_list<_Tp, _Alloc>& __ly)\n     { return (__ly < __lx); }\n \n   /// Based on operator<\n   template<typename _Tp, typename _Alloc>\n+    [[__nodiscard__]]\n     inline bool\n     operator>=(const forward_list<_Tp, _Alloc>& __lx,\n \t       const forward_list<_Tp, _Alloc>& __ly)\n     { return !(__lx < __ly); }\n \n   /// Based on operator<\n   template<typename _Tp, typename _Alloc>\n+    [[__nodiscard__]]\n     inline bool\n     operator<=(const forward_list<_Tp, _Alloc>& __lx,\n \t       const forward_list<_Tp, _Alloc>& __ly)"}, {"sha": "a954890ff20279b513f25584118ad942a033914d", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -83,6 +83,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     _Bit_reference(const _Bit_reference&) = default;\n #endif\n \n+    _GLIBCXX_NODISCARD\n     operator bool() const _GLIBCXX_NOEXCEPT\n     { return !!(*_M_p & _M_mask); }\n \n@@ -100,10 +101,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     operator=(const _Bit_reference& __x) _GLIBCXX_NOEXCEPT\n     { return *this = bool(__x); }\n \n+    _GLIBCXX_NODISCARD\n     bool\n     operator==(const _Bit_reference& __x) const\n     { return bool(*this) == bool(__x); }\n \n+    _GLIBCXX_NODISCARD\n     bool\n     operator<(const _Bit_reference& __x) const\n     { return !bool(*this) && bool(__x); }\n@@ -182,11 +185,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _M_offset = static_cast<unsigned int>(__n);\n     }\n \n+    _GLIBCXX_NODISCARD\n     friend _GLIBCXX20_CONSTEXPR bool\n     operator==(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)\n     { return __x._M_p == __y._M_p && __x._M_offset == __y._M_offset; }\n \n #if __cpp_lib_three_way_comparison\n+    [[nodiscard]]\n     friend constexpr strong_ordering\n     operator<=>(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)\n     noexcept\n@@ -196,25 +201,30 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       return __x._M_offset <=> __y._M_offset;\n     }\n #else\n+    _GLIBCXX_NODISCARD\n     friend bool\n     operator<(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)\n     {\n       return __x._M_p < __y._M_p\n \t    || (__x._M_p == __y._M_p && __x._M_offset < __y._M_offset);\n     }\n \n+    _GLIBCXX_NODISCARD\n     friend bool\n     operator!=(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)\n     { return !(__x == __y); }\n \n+    _GLIBCXX_NODISCARD\n     friend bool\n     operator>(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)\n     { return __y < __x; }\n \n+    _GLIBCXX_NODISCARD\n     friend bool\n     operator<=(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)\n     { return !(__y < __x); }\n \n+    _GLIBCXX_NODISCARD\n     friend bool\n     operator>=(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)\n     { return !(__x < __y); }\n@@ -247,6 +257,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     _M_const_cast() const\n     { return *this; }\n \n+    _GLIBCXX_NODISCARD\n     reference\n     operator*() const\n     { return reference(_M_p, 1UL << _M_offset); }\n@@ -295,10 +306,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       return *this;\n     }\n \n+    _GLIBCXX_NODISCARD\n     reference\n     operator[](difference_type __i) const\n     { return *(*this + __i); }\n \n+    _GLIBCXX_NODISCARD\n     friend iterator\n     operator+(const iterator& __x, difference_type __n)\n     {\n@@ -307,10 +320,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       return __tmp;\n     }\n \n+    _GLIBCXX_NODISCARD\n     friend iterator\n     operator+(difference_type __n, const iterator& __x)\n     { return __x + __n; }\n \n+    _GLIBCXX_NODISCARD\n     friend iterator\n     operator-(const iterator& __x, difference_type __n)\n     {\n@@ -343,6 +358,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     _M_const_cast() const\n     { return _Bit_iterator(_M_p, _M_offset); }\n \n+    _GLIBCXX_NODISCARD\n     const_reference\n     operator*() const\n     { return _Bit_reference(_M_p, 1UL << _M_offset); }\n@@ -391,10 +407,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       return *this;\n     }\n \n+    _GLIBCXX_NODISCARD\n     const_reference\n     operator[](difference_type __i) const\n     { return *(*this + __i); }\n \n+    _GLIBCXX_NODISCARD\n     friend const_iterator\n     operator+(const const_iterator& __x, difference_type __n)\n     {\n@@ -403,6 +421,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       return __tmp;\n     }\n \n+    _GLIBCXX_NODISCARD\n     friend const_iterator\n     operator-(const const_iterator& __x, difference_type __n)\n     {\n@@ -411,6 +430,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       return __tmp;\n     }\n \n+    _GLIBCXX_NODISCARD\n     friend const_iterator\n     operator+(difference_type __n, const const_iterator& __x)\n     { return __x + __n; }\n@@ -827,60 +847,74 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { _M_assign_aux(__l.begin(), __l.end(), random_access_iterator_tag()); }\n #endif\n \n+      _GLIBCXX_NODISCARD\n       iterator\n       begin() _GLIBCXX_NOEXCEPT\n       { return iterator(this->_M_impl._M_start._M_p, 0); }\n \n+      _GLIBCXX_NODISCARD\n       const_iterator\n       begin() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(this->_M_impl._M_start._M_p, 0); }\n \n+      _GLIBCXX_NODISCARD\n       iterator\n       end() _GLIBCXX_NOEXCEPT\n       { return this->_M_impl._M_finish; }\n \n+      _GLIBCXX_NODISCARD\n       const_iterator\n       end() const _GLIBCXX_NOEXCEPT\n       { return this->_M_impl._M_finish; }\n \n+      _GLIBCXX_NODISCARD\n       reverse_iterator\n       rbegin() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(end()); }\n \n+      _GLIBCXX_NODISCARD\n       const_reverse_iterator\n       rbegin() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(end()); }\n \n+      _GLIBCXX_NODISCARD\n       reverse_iterator\n       rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(begin()); }\n \n+      _GLIBCXX_NODISCARD\n       const_reverse_iterator\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n #if __cplusplus >= 201103L\n+      [[__nodiscard__]]\n       const_iterator\n       cbegin() const noexcept\n       { return const_iterator(this->_M_impl._M_start._M_p, 0); }\n \n+      [[__nodiscard__]]\n       const_iterator\n       cend() const noexcept\n       { return this->_M_impl._M_finish; }\n \n+      [[__nodiscard__]]\n       const_reverse_iterator\n       crbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n+      [[__nodiscard__]]\n       const_reverse_iterator\n       crend() const noexcept\n       { return const_reverse_iterator(begin()); }\n #endif\n \n+      _GLIBCXX_NODISCARD\n       size_type\n       size() const _GLIBCXX_NOEXCEPT\n       { return size_type(end() - begin()); }\n \n+      _GLIBCXX_NODISCARD\n       size_type\n       max_size() const _GLIBCXX_NOEXCEPT\n       {\n@@ -893,6 +927,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t? __asize * int(_S_word_bit) : __isize);\n       }\n \n+      _GLIBCXX_NODISCARD\n       size_type\n       capacity() const _GLIBCXX_NOEXCEPT\n       { return size_type(const_iterator(this->_M_impl._M_end_addr(), 0)\n@@ -902,10 +937,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       empty() const _GLIBCXX_NOEXCEPT\n       { return begin() == end(); }\n \n+      _GLIBCXX_NODISCARD\n       reference\n       operator[](size_type __n)\n       { return begin()[__n]; }\n \n+      _GLIBCXX_NODISCARD\n       const_reference\n       operator[](size_type __n) const\n       { return begin()[__n]; }\n@@ -939,18 +976,22 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  _M_reallocate(__n);\n       }\n \n+      _GLIBCXX_NODISCARD\n       reference\n       front()\n       { return *begin(); }\n \n+      _GLIBCXX_NODISCARD\n       const_reference\n       front() const\n       { return *begin(); }\n \n+      _GLIBCXX_NODISCARD\n       reference\n       back()\n       { return *(end() - 1); }\n \n+      _GLIBCXX_NODISCARD\n       const_reference\n       back() const\n       { return *(end() - 1); }"}, {"sha": "6095498d440f5a9ef7653be4d6aeaad7ca163382", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -176,10 +176,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _M_const_cast() const _GLIBCXX_NOEXCEPT\n       { return iterator(_M_cur, _M_node); }\n \n+      _GLIBCXX_NODISCARD\n       reference\n       operator*() const _GLIBCXX_NOEXCEPT\n       { return *_M_cur; }\n \n+      _GLIBCXX_NODISCARD\n       pointer\n       operator->() const _GLIBCXX_NOEXCEPT\n       { return _M_cur; }\n@@ -247,6 +249,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       operator-=(difference_type __n) _GLIBCXX_NOEXCEPT\n       { return *this += -__n; }\n \n+      _GLIBCXX_NODISCARD\n       reference\n       operator[](difference_type __n) const _GLIBCXX_NOEXCEPT\n       { return *(*this + __n); }\n@@ -264,6 +267,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t_M_last = _M_first + difference_type(_S_buffer_size());\n       }\n \n+      _GLIBCXX_NODISCARD\n       friend bool\n       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT\n       { return __x._M_cur == __y._M_cur; }\n@@ -272,13 +276,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       // order to avoid ambiguous overload resolution when std::rel_ops\n       // operators are in scope (for additional details, see libstdc++/3628)\n       template<typename _RefR, typename _PtrR>\n+\t_GLIBCXX_NODISCARD\n \tfriend bool\n \toperator==(const _Self& __x,\n \t\t   const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)\n \t_GLIBCXX_NOEXCEPT\n \t{ return __x._M_cur == __y._M_cur; }\n \n #if __cpp_lib_three_way_comparison\n+      [[nodiscard]]\n       friend strong_ordering\n       operator<=>(const _Self& __x, const _Self& __y) noexcept\n       {\n@@ -287,17 +293,20 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn __x._M_cur <=> __y._M_cur;\n       }\n #else\n+      _GLIBCXX_NODISCARD\n       friend bool\n       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT\n       { return !(__x == __y); }\n \n       template<typename _RefR, typename _PtrR>\n+\t_GLIBCXX_NODISCARD\n \tfriend bool\n \toperator!=(const _Self& __x,\n \t\t   const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)\n \t_GLIBCXX_NOEXCEPT\n \t{ return !(__x == __y); }\n \n+      _GLIBCXX_NODISCARD\n       friend bool\n       operator<(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT\n       {\n@@ -306,6 +315,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n \n       template<typename _RefR, typename _PtrR>\n+\t_GLIBCXX_NODISCARD\n \tfriend bool\n \toperator<(const _Self& __x,\n \t\t  const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)\n@@ -315,40 +325,47 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    ? (__x._M_cur < __y._M_cur) : (__x._M_node < __y._M_node);\n \t}\n \n+      _GLIBCXX_NODISCARD\n       friend bool\n       operator>(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT\n       { return __y < __x; }\n \n       template<typename _RefR, typename _PtrR>\n+\t_GLIBCXX_NODISCARD\n \tfriend bool\n \toperator>(const _Self& __x,\n \t\t  const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)\n \t_GLIBCXX_NOEXCEPT\n \t{ return __y < __x; }\n \n+      _GLIBCXX_NODISCARD\n       friend bool\n       operator<=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT\n       { return !(__y < __x); }\n \n       template<typename _RefR, typename _PtrR>\n+\t_GLIBCXX_NODISCARD\n \tfriend bool\n \toperator<=(const _Self& __x,\n \t\t   const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)\n \t_GLIBCXX_NOEXCEPT\n \t{ return !(__y < __x); }\n \n+      _GLIBCXX_NODISCARD\n       friend bool\n       operator>=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT\n       { return !(__x < __y); }\n \n       template<typename _RefR, typename _PtrR>\n+\t_GLIBCXX_NODISCARD\n \tfriend bool\n \toperator>=(const _Self& __x,\n \t\t   const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)\n \t_GLIBCXX_NOEXCEPT\n \t{ return !(__x < __y); }\n #endif // three-way comparison\n \n+      _GLIBCXX_NODISCARD\n       friend difference_type\n       operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT\n       {\n@@ -363,6 +380,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       // operators but also operator- must accept mixed iterator/const_iterator\n       // parameters.\n       template<typename _RefR, typename _PtrR>\n+\t_GLIBCXX_NODISCARD\n \tfriend difference_type\n \toperator-(const _Self& __x,\n \t\t  const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT\n@@ -373,6 +391,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    + (__y._M_last - __y._M_cur);\n \t}\n \n+      _GLIBCXX_NODISCARD\n       friend _Self\n       operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT\n       {\n@@ -381,6 +400,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn __tmp;\n       }\n \n+      _GLIBCXX_NODISCARD\n       friend _Self\n       operator-(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT\n       {\n@@ -389,6 +409,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn __tmp;\n       }\n \n+      _GLIBCXX_NODISCARD\n       friend _Self\n       operator+(difference_type __n, const _Self& __x) _GLIBCXX_NOEXCEPT\n       { return __x + __n; }\n@@ -1114,6 +1135,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #endif\n \n       /// Get a copy of the memory allocation object.\n+      _GLIBCXX_NODISCARD\n       allocator_type\n       get_allocator() const _GLIBCXX_NOEXCEPT\n       { return _Base::get_allocator(); }\n@@ -1123,6 +1145,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Returns a read/write iterator that points to the first element in the\n        *  %deque.  Iteration is done in ordinary element order.\n        */\n+      _GLIBCXX_NODISCARD\n       iterator\n       begin() _GLIBCXX_NOEXCEPT\n       { return this->_M_impl._M_start; }\n@@ -1131,6 +1154,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Returns a read-only (constant) iterator that points to the first\n        *  element in the %deque.  Iteration is done in ordinary element order.\n        */\n+      _GLIBCXX_NODISCARD\n       const_iterator\n       begin() const _GLIBCXX_NOEXCEPT\n       { return this->_M_impl._M_start; }\n@@ -1140,6 +1164,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element in the %deque.  Iteration is done in ordinary\n        *  element order.\n        */\n+      _GLIBCXX_NODISCARD\n       iterator\n       end() _GLIBCXX_NOEXCEPT\n       { return this->_M_impl._M_finish; }\n@@ -1149,6 +1174,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  the last element in the %deque.  Iteration is done in\n        *  ordinary element order.\n        */\n+      _GLIBCXX_NODISCARD\n       const_iterator\n       end() const _GLIBCXX_NOEXCEPT\n       { return this->_M_impl._M_finish; }\n@@ -1158,6 +1184,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  last element in the %deque.  Iteration is done in reverse\n        *  element order.\n        */\n+      _GLIBCXX_NODISCARD\n       reverse_iterator\n       rbegin() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(this->_M_impl._M_finish); }\n@@ -1167,6 +1194,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  to the last element in the %deque.  Iteration is done in\n        *  reverse element order.\n        */\n+      _GLIBCXX_NODISCARD\n       const_reverse_iterator\n       rbegin() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(this->_M_impl._M_finish); }\n@@ -1176,6 +1204,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  before the first element in the %deque.  Iteration is done\n        *  in reverse element order.\n        */\n+      _GLIBCXX_NODISCARD\n       reverse_iterator\n       rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(this->_M_impl._M_start); }\n@@ -1185,6 +1214,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  to one before the first element in the %deque.  Iteration is\n        *  done in reverse element order.\n        */\n+      _GLIBCXX_NODISCARD\n       const_reverse_iterator\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(this->_M_impl._M_start); }\n@@ -1194,6 +1224,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Returns a read-only (constant) iterator that points to the first\n        *  element in the %deque.  Iteration is done in ordinary element order.\n        */\n+      [[__nodiscard__]]\n       const_iterator\n       cbegin() const noexcept\n       { return this->_M_impl._M_start; }\n@@ -1203,6 +1234,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  the last element in the %deque.  Iteration is done in\n        *  ordinary element order.\n        */\n+      [[__nodiscard__]]\n       const_iterator\n       cend() const noexcept\n       { return this->_M_impl._M_finish; }\n@@ -1212,6 +1244,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  to the last element in the %deque.  Iteration is done in\n        *  reverse element order.\n        */\n+      [[__nodiscard__]]\n       const_reverse_iterator\n       crbegin() const noexcept\n       { return const_reverse_iterator(this->_M_impl._M_finish); }\n@@ -1221,18 +1254,21 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  to one before the first element in the %deque.  Iteration is\n        *  done in reverse element order.\n        */\n+      [[__nodiscard__]]\n       const_reverse_iterator\n       crend() const noexcept\n       { return const_reverse_iterator(this->_M_impl._M_start); }\n #endif\n \n       // [23.2.1.2] capacity\n       /**  Returns the number of elements in the %deque.  */\n+      _GLIBCXX_NODISCARD\n       size_type\n       size() const _GLIBCXX_NOEXCEPT\n       { return this->_M_impl._M_finish - this->_M_impl._M_start; }\n \n       /**  Returns the size() of the largest possible %deque.  */\n+      _GLIBCXX_NODISCARD\n       size_type\n       max_size() const _GLIBCXX_NOEXCEPT\n       { return _S_max_size(_M_get_Tp_allocator()); }\n@@ -1322,6 +1358,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  out_of_range lookups are not defined. (For checked lookups\n        *  see at().)\n        */\n+      _GLIBCXX_NODISCARD\n       reference\n       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n       {\n@@ -1340,6 +1377,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  out_of_range lookups are not defined. (For checked lookups\n        *  see at().)\n        */\n+      _GLIBCXX_NODISCARD\n       const_reference\n       operator[](size_type __n) const _GLIBCXX_NOEXCEPT\n       {\n@@ -1400,6 +1438,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Returns a read/write reference to the data at the first\n        *  element of the %deque.\n        */\n+      _GLIBCXX_NODISCARD\n       reference\n       front() _GLIBCXX_NOEXCEPT\n       {\n@@ -1411,6 +1450,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Returns a read-only (constant) reference to the data at the first\n        *  element of the %deque.\n        */\n+      _GLIBCXX_NODISCARD\n       const_reference\n       front() const _GLIBCXX_NOEXCEPT\n       {\n@@ -1422,6 +1462,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Returns a read/write reference to the data at the last element of the\n        *  %deque.\n        */\n+      _GLIBCXX_NODISCARD\n       reference\n       back() _GLIBCXX_NOEXCEPT\n       {\n@@ -1435,6 +1476,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Returns a read-only (constant) reference to the data at the last\n        *  element of the %deque.\n        */\n+      _GLIBCXX_NODISCARD\n       const_reference\n       back() const _GLIBCXX_NOEXCEPT\n       {\n@@ -2242,6 +2284,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *  and if corresponding elements compare equal.\n   */\n   template<typename _Tp, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator==(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)\n     { return __x.size() == __y.size()\n@@ -2260,6 +2303,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *  `<` and `>=` etc.\n   */\n   template<typename _Tp, typename _Alloc>\n+    [[nodiscard]]\n     inline __detail::__synth3way_t<_Tp>\n     operator<=>(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)\n     {\n@@ -2280,31 +2324,36 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *  See std::lexicographical_compare() for how the determination is made.\n   */\n   template<typename _Tp, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator<(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)\n     { return std::lexicographical_compare(__x.begin(), __x.end(),\n \t\t\t\t\t  __y.begin(), __y.end()); }\n \n   /// Based on operator==\n   template<typename _Tp, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator!=(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)\n     { return !(__x == __y); }\n \n   /// Based on operator<\n   template<typename _Tp, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator>(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)\n     { return __y < __x; }\n \n   /// Based on operator<\n   template<typename _Tp, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator<=(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)\n     { return !(__y < __x); }\n \n   /// Based on operator<\n   template<typename _Tp, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator>=(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)\n     { return !(__x < __y); }"}, {"sha": "9ae640ee692fef993d38a78a9ce08d74cd29c871", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -205,10 +205,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { return *this; }\n \n       // Must downcast from _List_node_base to _List_node to get to value.\n+      _GLIBCXX_NODISCARD\n       reference\n       operator*() const _GLIBCXX_NOEXCEPT\n       { return *static_cast<_Node*>(_M_node)->_M_valptr(); }\n \n+      _GLIBCXX_NODISCARD\n       pointer\n       operator->() const _GLIBCXX_NOEXCEPT\n       { return static_cast<_Node*>(_M_node)->_M_valptr(); }\n@@ -243,11 +245,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn __tmp;\n       }\n \n+      _GLIBCXX_NODISCARD\n       friend bool\n       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT\n       { return __x._M_node == __y._M_node; }\n \n #if __cpp_impl_three_way_comparison < 201907L\n+      _GLIBCXX_NODISCARD\n       friend bool\n       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT\n       { return __x._M_node != __y._M_node; }\n@@ -291,10 +295,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { return iterator(const_cast<__detail::_List_node_base*>(_M_node)); }\n \n       // Must downcast from List_node_base to _List_node to get to value.\n+      _GLIBCXX_NODISCARD\n       reference\n       operator*() const _GLIBCXX_NOEXCEPT\n       { return *static_cast<_Node*>(_M_node)->_M_valptr(); }\n \n+      _GLIBCXX_NODISCARD\n       pointer\n       operator->() const _GLIBCXX_NOEXCEPT\n       { return static_cast<_Node*>(_M_node)->_M_valptr(); }\n@@ -329,11 +335,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn __tmp;\n       }\n \n+      _GLIBCXX_NODISCARD\n       friend bool\n       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT\n       { return __x._M_node == __y._M_node; }\n \n #if __cpp_impl_three_way_comparison < 201907L\n+      _GLIBCXX_NODISCARD\n       friend bool\n       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT\n       { return __x._M_node != __y._M_node; }\n@@ -941,6 +949,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns a read/write iterator that points to the first element in the\n        *  %list.  Iteration is done in ordinary element order.\n        */\n+      _GLIBCXX_NODISCARD\n       iterator\n       begin() _GLIBCXX_NOEXCEPT\n       { return iterator(this->_M_impl._M_node._M_next); }\n@@ -950,6 +959,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  first element in the %list.  Iteration is done in ordinary\n        *  element order.\n        */\n+      _GLIBCXX_NODISCARD\n       const_iterator\n       begin() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(this->_M_impl._M_node._M_next); }\n@@ -959,6 +969,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  element in the %list.  Iteration is done in ordinary element\n        *  order.\n        */\n+      _GLIBCXX_NODISCARD\n       iterator\n       end() _GLIBCXX_NOEXCEPT\n       { return iterator(&this->_M_impl._M_node); }\n@@ -968,6 +979,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  the last element in the %list.  Iteration is done in ordinary\n        *  element order.\n        */\n+      _GLIBCXX_NODISCARD\n       const_iterator\n       end() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(&this->_M_impl._M_node); }\n@@ -977,6 +989,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  element in the %list.  Iteration is done in reverse element\n        *  order.\n        */\n+      _GLIBCXX_NODISCARD\n       reverse_iterator\n       rbegin() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(end()); }\n@@ -986,6 +999,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  the last element in the %list.  Iteration is done in reverse\n        *  element order.\n        */\n+      _GLIBCXX_NODISCARD\n       const_reverse_iterator\n       rbegin() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(end()); }\n@@ -995,6 +1009,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  before the first element in the %list.  Iteration is done in\n        *  reverse element order.\n        */\n+      _GLIBCXX_NODISCARD\n       reverse_iterator\n       rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(begin()); }\n@@ -1004,6 +1019,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  before the first element in the %list.  Iteration is done in reverse\n        *  element order.\n        */\n+      _GLIBCXX_NODISCARD\n       const_reverse_iterator\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n@@ -1014,6 +1030,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  first element in the %list.  Iteration is done in ordinary\n        *  element order.\n        */\n+      [[__nodiscard__]]\n       const_iterator\n       cbegin() const noexcept\n       { return const_iterator(this->_M_impl._M_node._M_next); }\n@@ -1023,6 +1040,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  the last element in the %list.  Iteration is done in ordinary\n        *  element order.\n        */\n+      [[__nodiscard__]]\n       const_iterator\n       cend() const noexcept\n       { return const_iterator(&this->_M_impl._M_node); }\n@@ -1032,6 +1050,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  the last element in the %list.  Iteration is done in reverse\n        *  element order.\n        */\n+      [[__nodiscard__]]\n       const_reverse_iterator\n       crbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n@@ -1041,6 +1060,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  before the first element in the %list.  Iteration is done in reverse\n        *  element order.\n        */\n+      [[__nodiscard__]]\n       const_reverse_iterator\n       crend() const noexcept\n       { return const_reverse_iterator(begin()); }\n@@ -1056,11 +1076,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }\n \n       /**  Returns the number of elements in the %list.  */\n+      _GLIBCXX_NODISCARD\n       size_type\n       size() const _GLIBCXX_NOEXCEPT\n       { return _M_node_count(); }\n \n       /**  Returns the size() of the largest possible %list.  */\n+      _GLIBCXX_NODISCARD\n       size_type\n       max_size() const _GLIBCXX_NOEXCEPT\n       { return _Node_alloc_traits::max_size(_M_get_Node_allocator()); }\n@@ -1110,6 +1132,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns a read/write reference to the data at the first\n        *  element of the %list.\n        */\n+      _GLIBCXX_NODISCARD\n       reference\n       front() _GLIBCXX_NOEXCEPT\n       { return *begin(); }\n@@ -1118,6 +1141,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns a read-only (constant) reference to the data at the first\n        *  element of the %list.\n        */\n+      _GLIBCXX_NODISCARD\n       const_reference\n       front() const _GLIBCXX_NOEXCEPT\n       { return *begin(); }\n@@ -1126,6 +1150,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns a read/write reference to the data at the last element\n        *  of the %list.\n        */\n+      _GLIBCXX_NODISCARD\n       reference\n       back() _GLIBCXX_NOEXCEPT\n       {\n@@ -1138,6 +1163,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns a read-only (constant) reference to the data at the last\n        *  element of the %list.\n        */\n+      _GLIBCXX_NODISCARD\n       const_reference\n       back() const _GLIBCXX_NOEXCEPT\n       {\n@@ -1991,6 +2017,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  equal, and if corresponding elements compare equal.\n   */\n   template<typename _Tp, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator==(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)\n     {\n@@ -2026,6 +2053,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  `<` and `>=` etc.\n   */\n   template<typename _Tp, typename _Alloc>\n+    [[nodiscard]]\n     inline __detail::__synth3way_t<_Tp>\n     operator<=>(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)\n     {\n@@ -2046,31 +2074,36 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  See std::lexicographical_compare() for how the determination is made.\n   */\n   template<typename _Tp, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator<(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)\n     { return std::lexicographical_compare(__x.begin(), __x.end(),\n \t\t\t\t\t  __y.begin(), __y.end()); }\n \n   /// Based on operator==\n   template<typename _Tp, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator!=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)\n     { return !(__x == __y); }\n \n   /// Based on operator<\n   template<typename _Tp, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator>(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)\n     { return __y < __x; }\n \n   /// Based on operator<\n   template<typename _Tp, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator<=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)\n     { return !(__y < __x); }\n \n   /// Based on operator<\n   template<typename _Tp, typename _Alloc>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator>=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)\n     { return !(__x < __y); }"}, {"sha": "363868fe0a61d839a209290c18507617a11cfb74", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -107,15 +107,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n       template<typename _Tp1, typename _Seq1>\n+\t_GLIBCXX_NODISCARD\n \tfriend bool\n \toperator==(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&);\n \n       template<typename _Tp1, typename _Seq1>\n+\t_GLIBCXX_NODISCARD\n \tfriend bool\n \toperator<(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&);\n \n #if __cpp_lib_three_way_comparison\n       template<typename _Tp1, three_way_comparable _Seq1>\n+\t[[nodiscard]]\n \tfriend compare_three_way_result_t<_Seq1>\n \toperator<=>(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&);\n #endif\n@@ -204,6 +207,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return c.empty(); }\n \n       /**  Returns the number of elements in the %queue.  */\n+      _GLIBCXX_NODISCARD\n       size_type\n       size() const\n       { return c.size(); }\n@@ -212,6 +216,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Returns a read/write reference to the data at the first\n        *  element of the %queue.\n        */\n+      _GLIBCXX_NODISCARD\n       reference\n       front()\n       {\n@@ -223,6 +228,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Returns a read-only (constant) reference to the data at the first\n        *  element of the %queue.\n        */\n+      _GLIBCXX_NODISCARD\n       const_reference\n       front() const\n       {\n@@ -234,6 +240,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Returns a read/write reference to the data at the last\n        *  element of the %queue.\n        */\n+      _GLIBCXX_NODISCARD\n       reference\n       back()\n       {\n@@ -245,6 +252,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Returns a read-only (constant) reference to the data at the last\n        *  element of the %queue.\n        */\n+      _GLIBCXX_NODISCARD\n       const_reference\n       back() const\n       {\n@@ -340,6 +348,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  if their sequences compare equal.\n   */\n   template<typename _Tp, typename _Seq>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator==(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n     { return __x.c == __y.c; }\n@@ -358,36 +367,42 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  determination.\n   */\n   template<typename _Tp, typename _Seq>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator<(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n     { return __x.c < __y.c; }\n \n   /// Based on operator==\n   template<typename _Tp, typename _Seq>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator!=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n     { return !(__x == __y); }\n \n   /// Based on operator<\n   template<typename _Tp, typename _Seq>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator>(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n     { return __y < __x; }\n \n   /// Based on operator<\n   template<typename _Tp, typename _Seq>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator<=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n     { return !(__y < __x); }\n \n   /// Based on operator<\n   template<typename _Tp, typename _Seq>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator>=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n     { return !(__x < __y); }\n \n #if __cpp_lib_three_way_comparison\n   template<typename _Tp, three_way_comparable _Seq>\n+    [[nodiscard]]\n     inline compare_three_way_result_t<_Seq>\n     operator<=>(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n     { return __x.c <=> __y.c; }\n@@ -613,6 +628,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return c.empty(); }\n \n       /**  Returns the number of elements in the %queue.  */\n+      _GLIBCXX_NODISCARD\n       size_type\n       size() const\n       { return c.size(); }\n@@ -621,6 +637,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Returns a read-only (constant) reference to the data at the first\n        *  element of the %queue.\n        */\n+      _GLIBCXX_NODISCARD\n       const_reference\n       top() const\n       {"}, {"sha": "85137b9d4282b14544c747085f5d35a94987513f", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -200,6 +200,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return c.empty(); }\n \n       /**  Returns the number of elements in the %stack.  */\n+      _GLIBCXX_NODISCARD\n       size_type\n       size() const\n       { return c.size(); }\n@@ -208,6 +209,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Returns a read/write reference to the data at the first\n        *  element of the %stack.\n        */\n+      _GLIBCXX_NODISCARD\n       reference\n       top()\n       {\n@@ -219,6 +221,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Returns a read-only (constant) reference to the data at the first\n        *  element of the %stack.\n        */\n+      _GLIBCXX_NODISCARD\n       const_reference\n       top() const\n       {\n@@ -315,6 +318,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  equal.\n   */\n   template<typename _Tp, typename _Seq>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator==(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)\n     { return __x.c == __y.c; }\n@@ -333,36 +337,42 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  determination.\n   */\n   template<typename _Tp, typename _Seq>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator<(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)\n     { return __x.c < __y.c; }\n \n   /// Based on operator==\n   template<typename _Tp, typename _Seq>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator!=(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)\n     { return !(__x == __y); }\n \n   /// Based on operator<\n   template<typename _Tp, typename _Seq>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator>(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)\n     { return __y < __x; }\n \n   /// Based on operator<\n   template<typename _Tp, typename _Seq>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator<=(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)\n     { return !(__y < __x); }\n \n   /// Based on operator<\n   template<typename _Tp, typename _Seq>\n+    _GLIBCXX_NODISCARD\n     inline bool\n     operator>=(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)\n     { return !(__x < __y); }\n \n #if __cpp_lib_three_way_comparison\n   template<typename _Tp, three_way_comparable _Seq>\n+    [[nodiscard]]\n     inline compare_three_way_result_t<_Seq>\n     operator<=>(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)\n     { return __x.c <=> __y.c; }"}, {"sha": "296da43822a559dd356273abd46390debaa56a8a", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -807,6 +807,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element in the %vector.  Iteration is done in ordinary\n        *  element order.\n        */\n+      _GLIBCXX_NODISCARD\n       iterator\n       begin() _GLIBCXX_NOEXCEPT\n       { return iterator(this->_M_impl._M_start); }\n@@ -816,6 +817,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  first element in the %vector.  Iteration is done in ordinary\n        *  element order.\n        */\n+      _GLIBCXX_NODISCARD\n       const_iterator\n       begin() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(this->_M_impl._M_start); }\n@@ -825,6 +827,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element in the %vector.  Iteration is done in ordinary\n        *  element order.\n        */\n+      _GLIBCXX_NODISCARD\n       iterator\n       end() _GLIBCXX_NOEXCEPT\n       { return iterator(this->_M_impl._M_finish); }\n@@ -834,6 +837,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  the last element in the %vector.  Iteration is done in\n        *  ordinary element order.\n        */\n+      _GLIBCXX_NODISCARD\n       const_iterator\n       end() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(this->_M_impl._M_finish); }\n@@ -843,6 +847,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  last element in the %vector.  Iteration is done in reverse\n        *  element order.\n        */\n+      _GLIBCXX_NODISCARD\n       reverse_iterator\n       rbegin() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(end()); }\n@@ -852,6 +857,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  to the last element in the %vector.  Iteration is done in\n        *  reverse element order.\n        */\n+      _GLIBCXX_NODISCARD\n       const_reverse_iterator\n       rbegin() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(end()); }\n@@ -861,6 +867,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  before the first element in the %vector.  Iteration is done\n        *  in reverse element order.\n        */\n+      _GLIBCXX_NODISCARD\n       reverse_iterator\n       rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(begin()); }\n@@ -870,6 +877,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  to one before the first element in the %vector.  Iteration\n        *  is done in reverse element order.\n        */\n+      _GLIBCXX_NODISCARD\n       const_reverse_iterator\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n@@ -880,6 +888,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  first element in the %vector.  Iteration is done in ordinary\n        *  element order.\n        */\n+      [[__nodiscard__]]\n       const_iterator\n       cbegin() const noexcept\n       { return const_iterator(this->_M_impl._M_start); }\n@@ -889,6 +898,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  the last element in the %vector.  Iteration is done in\n        *  ordinary element order.\n        */\n+      [[__nodiscard__]]\n       const_iterator\n       cend() const noexcept\n       { return const_iterator(this->_M_impl._M_finish); }\n@@ -898,6 +908,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  to the last element in the %vector.  Iteration is done in\n        *  reverse element order.\n        */\n+      [[__nodiscard__]]\n       const_reverse_iterator\n       crbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n@@ -907,18 +918,21 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  to one before the first element in the %vector.  Iteration\n        *  is done in reverse element order.\n        */\n+      [[__nodiscard__]]\n       const_reverse_iterator\n       crend() const noexcept\n       { return const_reverse_iterator(begin()); }\n #endif\n \n       // [23.2.4.2] capacity\n       /**  Returns the number of elements in the %vector.  */\n+      _GLIBCXX_NODISCARD\n       size_type\n       size() const _GLIBCXX_NOEXCEPT\n       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }\n \n       /**  Returns the size() of the largest possible %vector.  */\n+      _GLIBCXX_NODISCARD\n       size_type\n       max_size() const _GLIBCXX_NOEXCEPT\n       { return _S_max_size(_M_get_Tp_allocator()); }\n@@ -994,6 +1008,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Returns the total number of elements that the %vector can\n        *  hold before needing to allocate more memory.\n        */\n+      _GLIBCXX_NODISCARD\n       size_type\n       capacity() const _GLIBCXX_NOEXCEPT\n       { return size_type(this->_M_impl._M_end_of_storage\n@@ -1039,6 +1054,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  out_of_range lookups are not defined. (For checked lookups\n        *  see at().)\n        */\n+      _GLIBCXX_NODISCARD\n       reference\n       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n       {\n@@ -1057,6 +1073,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  out_of_range lookups are not defined. (For checked lookups\n        *  see at().)\n        */\n+      _GLIBCXX_NODISCARD\n       const_reference\n       operator[](size_type __n) const _GLIBCXX_NOEXCEPT\n       {\n@@ -1117,6 +1134,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Returns a read/write reference to the data at the first\n        *  element of the %vector.\n        */\n+      _GLIBCXX_NODISCARD\n       reference\n       front() _GLIBCXX_NOEXCEPT\n       {\n@@ -1128,6 +1146,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Returns a read-only (constant) reference to the data at the first\n        *  element of the %vector.\n        */\n+      _GLIBCXX_NODISCARD\n       const_reference\n       front() const _GLIBCXX_NOEXCEPT\n       {\n@@ -1139,6 +1158,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Returns a read/write reference to the data at the last\n        *  element of the %vector.\n        */\n+      _GLIBCXX_NODISCARD\n       reference\n       back() _GLIBCXX_NOEXCEPT\n       {\n@@ -1150,6 +1170,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Returns a read-only (constant) reference to the data at the\n        *  last element of the %vector.\n        */\n+      _GLIBCXX_NODISCARD\n       const_reference\n       back() const _GLIBCXX_NOEXCEPT\n       {\n@@ -1164,10 +1185,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *   Returns a pointer such that [data(), data() + size()) is a valid\n        *   range.  For a non-empty %vector, data() == &front().\n        */\n+      _GLIBCXX_NODISCARD\n       _Tp*\n       data() _GLIBCXX_NOEXCEPT\n       { return _M_data_ptr(this->_M_impl._M_start); }\n \n+      _GLIBCXX_NODISCARD\n       const _Tp*\n       data() const _GLIBCXX_NOEXCEPT\n       { return _M_data_ptr(this->_M_impl._M_start); }"}, {"sha": "4257a1651bd04441745df0779844fb58debec861", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -219,51 +219,63 @@ namespace __debug\n       using _Base::get_allocator;\n \n       // iterators:\n+      _GLIBCXX_NODISCARD\n       iterator\n       begin() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::begin(), this); }\n \n+      _GLIBCXX_NODISCARD\n       const_iterator\n       begin() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::begin(), this); }\n \n+      _GLIBCXX_NODISCARD\n       iterator\n       end() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::end(), this); }\n \n+      _GLIBCXX_NODISCARD\n       const_iterator\n       end() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::end(), this); }\n \n+      _GLIBCXX_NODISCARD\n       reverse_iterator\n       rbegin() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(end()); }\n \n+      _GLIBCXX_NODISCARD\n       const_reverse_iterator\n       rbegin() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(end()); }\n \n+      _GLIBCXX_NODISCARD\n       reverse_iterator\n       rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(begin()); }\n \n+      _GLIBCXX_NODISCARD\n       const_reverse_iterator\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n #if __cplusplus >= 201103L\n+      [[__nodiscard__]]\n       const_iterator\n       cbegin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n \n+      [[__nodiscard__]]\n       const_iterator\n       cend() const noexcept\n       { return const_iterator(_Base::end(), this); }\n \n+      [[__nodiscard__]]\n       const_reverse_iterator\n       crbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n+      [[__nodiscard__]]\n       const_reverse_iterator\n       crend() const noexcept\n       { return const_reverse_iterator(begin()); }\n@@ -335,13 +347,15 @@ namespace __debug\n       using _Base::empty;\n \n       // element access:\n+      _GLIBCXX_NODISCARD\n       reference\n       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_subscript(__n);\n \treturn _M_base()[__n];\n       }\n \n+      _GLIBCXX_NODISCARD\n       const_reference\n       operator[](size_type __n) const _GLIBCXX_NOEXCEPT\n       {\n@@ -351,27 +365,31 @@ namespace __debug\n \n       using _Base::at;\n \n+      _GLIBCXX_NODISCARD\n       reference\n       front() _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::front();\n       }\n \n+      _GLIBCXX_NODISCARD\n       const_reference\n       front() const _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::front();\n       }\n \n+      _GLIBCXX_NODISCARD\n       reference\n       back() _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::back();\n       }\n \n+      _GLIBCXX_NODISCARD\n       const_reference\n       back() const _GLIBCXX_NOEXCEPT\n       {"}, {"sha": "9cc05e8129cb8e9b6d700c0beee963c6a5f1f760", "filename": "libstdc++-v3/include/debug/forward_list", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -327,38 +327,47 @@ namespace __debug\n \n       // iterators:\n \n+      [[__nodiscard__]]\n       iterator\n       before_begin() noexcept\n       { return { _Base::before_begin(), this }; }\n \n+      [[__nodiscard__]]\n       const_iterator\n       before_begin() const noexcept\n       { return { _Base::before_begin(), this }; }\n \n+      [[__nodiscard__]]\n       iterator\n       begin() noexcept\n       { return { _Base::begin(), this }; }\n \n+      [[__nodiscard__]]\n       const_iterator\n       begin() const noexcept\n       { return { _Base::begin(), this }; }\n \n+      [[__nodiscard__]]\n       iterator\n       end() noexcept\n       { return { _Base::end(), this }; }\n \n+      [[__nodiscard__]]\n       const_iterator\n       end() const noexcept\n       { return { _Base::end(), this }; }\n \n+      [[__nodiscard__]]\n       const_iterator\n       cbegin() const noexcept\n       { return { _Base::cbegin(), this }; }\n \n+      [[__nodiscard__]]\n       const_iterator\n       cbefore_begin() const noexcept\n       { return { _Base::cbefore_begin(), this }; }\n \n+      [[__nodiscard__]]\n       const_iterator\n       cend() const noexcept\n       { return { _Base::cend(), this }; }\n@@ -368,13 +377,15 @@ namespace __debug\n \n       // element access:\n \n+      [[__nodiscard__]]\n       reference\n       front()\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::front();\n       }\n \n+      [[__nodiscard__]]\n       const_reference\n       front() const\n       {"}, {"sha": "83122f8248dd72cba39ef0f8d989441cf8d3e805", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -223,51 +223,63 @@ namespace __debug\n       using _Base::get_allocator;\n \n       // iterators:\n+      _GLIBCXX_NODISCARD\n       iterator\n       begin() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::begin(), this); }\n \n+      _GLIBCXX_NODISCARD\n       const_iterator\n       begin() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::begin(), this); }\n \n+      _GLIBCXX_NODISCARD\n       iterator\n       end() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::end(), this); }\n \n+      _GLIBCXX_NODISCARD\n       const_iterator\n       end() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::end(), this); }\n \n+      _GLIBCXX_NODISCARD\n       reverse_iterator\n       rbegin() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(end()); }\n \n+      _GLIBCXX_NODISCARD\n       const_reverse_iterator\n       rbegin() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(end()); }\n \n+      _GLIBCXX_NODISCARD\n       reverse_iterator\n       rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(begin()); }\n \n+      _GLIBCXX_NODISCARD\n       const_reverse_iterator\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n #if __cplusplus >= 201103L\n+      [[__nodiscard__]]\n       const_iterator\n       cbegin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n \n+      [[__nodiscard__]]\n       const_iterator\n       cend() const noexcept\n       { return const_iterator(_Base::end(), this); }\n \n+      [[__nodiscard__]]\n       const_reverse_iterator\n       crbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n+      [[__nodiscard__]]\n       const_reverse_iterator\n       crend() const noexcept\n       { return const_reverse_iterator(begin()); }\n@@ -356,27 +368,31 @@ namespace __debug\n #endif\n \n       // element access:\n+      _GLIBCXX_NODISCARD\n       reference\n       front() _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::front();\n       }\n \n+      _GLIBCXX_NODISCARD\n       const_reference\n       front() const _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::front();\n       }\n \n+      _GLIBCXX_NODISCARD\n       reference\n       back() _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::back();\n       }\n \n+      _GLIBCXX_NODISCARD\n       const_reference\n       back() const _GLIBCXX_NOEXCEPT\n       {"}, {"sha": "5584d06de5a650943a975f3c1b9be5e11512e057", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -297,6 +297,7 @@ namespace __gnu_debug\n        *  @brief Iterator dereference.\n        *  @pre iterator is dereferenceable\n        */\n+      _GLIBCXX_NODISCARD\n       reference\n       operator*() const _GLIBCXX_NOEXCEPT\n       {\n@@ -310,6 +311,7 @@ namespace __gnu_debug\n        *  @brief Iterator dereference.\n        *  @pre iterator is dereferenceable\n        */\n+      _GLIBCXX_NODISCARD\n       pointer\n       operator->() const _GLIBCXX_NOEXCEPT\n       {\n@@ -463,6 +465,7 @@ namespace __gnu_debug\n \n       typedef _Safe_iterator<_Iterator, _Sequence, iterator_category> _Self;\n \n+      _GLIBCXX_NODISCARD\n       friend bool\n       operator==(const _Self& __lhs, const _Self& __rhs) _GLIBCXX_NOEXCEPT\n       {\n@@ -471,6 +474,7 @@ namespace __gnu_debug\n       }\n \n       template<typename _IteR>\n+\t_GLIBCXX_NODISCARD\n \tfriend bool\n \toperator==(const _Self& __lhs,\n \t  const _Safe_iterator<_IteR, _Sequence, iterator_category>& __rhs)\n@@ -481,6 +485,7 @@ namespace __gnu_debug\n \t}\n \n #if ! __cpp_lib_three_way_comparison\n+      _GLIBCXX_NODISCARD\n       friend bool\n       operator!=(const _Self& __lhs, const _Self& __rhs) _GLIBCXX_NOEXCEPT\n       {\n@@ -489,6 +494,7 @@ namespace __gnu_debug\n       }\n \n       template<typename _IteR>\n+\t_GLIBCXX_NODISCARD\n \tfriend bool\n \toperator!=(const _Self& __lhs,\n \t  const _Safe_iterator<_IteR, _Sequence, iterator_category>& __rhs)\n@@ -786,6 +792,7 @@ namespace __gnu_debug\n       }\n \n       // ------ Random access iterator requirements ------\n+      _GLIBCXX_NODISCARD\n       reference\n       operator[](difference_type __n) const _GLIBCXX_NOEXCEPT\n       {\n@@ -819,69 +826,79 @@ namespace __gnu_debug\n       }\n \n #if __cpp_lib_three_way_comparison\n+      [[nodiscard]]\n       friend auto\n       operator<=>(const _Self& __lhs, const _Self& __rhs) noexcept\n       {\n \t_GLIBCXX_DEBUG_VERIFY_REL_OPERANDS(__lhs, __rhs);\n \treturn __lhs.base() <=> __rhs.base();\n       }\n \n+      [[nodiscard]]\n       friend auto\n       operator<=>(const _Self& __lhs, const _OtherSelf& __rhs) noexcept\n       {\n \t_GLIBCXX_DEBUG_VERIFY_REL_OPERANDS(__lhs, __rhs);\n \treturn __lhs.base() <=> __rhs.base();\n       }\n #else\n+      _GLIBCXX_NODISCARD\n       friend bool\n       operator<(const _Self& __lhs, const _Self& __rhs) _GLIBCXX_NOEXCEPT\n       {\n \t_GLIBCXX_DEBUG_VERIFY_REL_OPERANDS(__lhs, __rhs);\n \treturn __lhs.base() < __rhs.base();\n       }\n \n+      _GLIBCXX_NODISCARD\n       friend bool\n       operator<(const _Self& __lhs, const _OtherSelf& __rhs) _GLIBCXX_NOEXCEPT\n       {\n \t_GLIBCXX_DEBUG_VERIFY_REL_OPERANDS(__lhs, __rhs);\n \treturn __lhs.base() < __rhs.base();\n       }\n \n+      _GLIBCXX_NODISCARD\n       friend bool\n       operator<=(const _Self& __lhs, const _Self& __rhs) _GLIBCXX_NOEXCEPT\n       {\n \t_GLIBCXX_DEBUG_VERIFY_REL_OPERANDS(__lhs, __rhs);\n \treturn __lhs.base() <= __rhs.base();\n       }\n \n+      _GLIBCXX_NODISCARD\n       friend bool\n       operator<=(const _Self& __lhs, const _OtherSelf& __rhs) _GLIBCXX_NOEXCEPT\n       {\n \t_GLIBCXX_DEBUG_VERIFY_REL_OPERANDS(__lhs, __rhs);\n \treturn __lhs.base() <= __rhs.base();\n       }\n \n+      _GLIBCXX_NODISCARD\n       friend bool\n       operator>(const _Self& __lhs, const _Self& __rhs) _GLIBCXX_NOEXCEPT\n       {\n \t_GLIBCXX_DEBUG_VERIFY_REL_OPERANDS(__lhs, __rhs);\n \treturn __lhs.base() > __rhs.base();\n       }\n \n+      _GLIBCXX_NODISCARD\n       friend bool\n       operator>(const _Self& __lhs, const _OtherSelf& __rhs) _GLIBCXX_NOEXCEPT\n       {\n \t_GLIBCXX_DEBUG_VERIFY_REL_OPERANDS(__lhs, __rhs);\n \treturn __lhs.base() > __rhs.base();\n       }\n \n+      _GLIBCXX_NODISCARD\n       friend bool\n       operator>=(const _Self& __lhs, const _Self& __rhs) _GLIBCXX_NOEXCEPT\n       {\n \t_GLIBCXX_DEBUG_VERIFY_REL_OPERANDS(__lhs, __rhs);\n \treturn __lhs.base() >= __rhs.base();\n       }\n \n+      _GLIBCXX_NODISCARD\n       friend bool\n       operator>=(const _Self& __lhs, const _OtherSelf& __rhs) _GLIBCXX_NOEXCEPT\n       {\n@@ -894,20 +911,23 @@ namespace __gnu_debug\n       // According to the resolution of DR179 not only the various comparison\n       // operators but also operator- must accept mixed iterator/const_iterator\n       // parameters.\n+      _GLIBCXX_NODISCARD\n       friend difference_type\n       operator-(const _Self& __lhs, const _OtherSelf& __rhs) _GLIBCXX_NOEXCEPT\n       {\n \t_GLIBCXX_DEBUG_VERIFY_DIST_OPERANDS(__lhs, __rhs);\n \treturn __lhs.base() - __rhs.base();\n       }\n \n+      _GLIBCXX_NODISCARD\n       friend difference_type\n       operator-(const _Self& __lhs, const _Self& __rhs) _GLIBCXX_NOEXCEPT\n       {\n \t_GLIBCXX_DEBUG_VERIFY_DIST_OPERANDS(__lhs, __rhs);\n \treturn __lhs.base() - __rhs.base();\n       }\n \n+      _GLIBCXX_NODISCARD\n       friend _Self\n       operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT\n       {\n@@ -917,6 +937,7 @@ namespace __gnu_debug\n \treturn _Safe_iterator(__x.base() + __n, __x._M_sequence);\n       }\n \n+      _GLIBCXX_NODISCARD\n       friend _Self\n       operator+(difference_type __n, const _Self& __x) _GLIBCXX_NOEXCEPT\n       {\n@@ -926,6 +947,7 @@ namespace __gnu_debug\n \treturn _Safe_iterator(__n + __x.base(), __x._M_sequence);\n       }\n \n+      _GLIBCXX_NODISCARD\n       friend _Self\n       operator-(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT\n       {"}, {"sha": "552713849229e7d7c250a5029b60437ecdf1a4a5", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -303,51 +303,63 @@ namespace __debug\n       using _Base::get_allocator;\n \n       // iterators:\n+      _GLIBCXX_NODISCARD\n       iterator\n       begin() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::begin(), this); }\n \n+      _GLIBCXX_NODISCARD\n       const_iterator\n       begin() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::begin(), this); }\n \n+      _GLIBCXX_NODISCARD\n       iterator\n       end() _GLIBCXX_NOEXCEPT\n       { return iterator(_Base::end(), this); }\n \n+      _GLIBCXX_NODISCARD\n       const_iterator\n       end() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_Base::end(), this); }\n \n+      _GLIBCXX_NODISCARD\n       reverse_iterator\n       rbegin() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(end()); }\n \n+      _GLIBCXX_NODISCARD\n       const_reverse_iterator\n       rbegin() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(end()); }\n \n+      _GLIBCXX_NODISCARD\n       reverse_iterator\n       rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(begin()); }\n \n+      _GLIBCXX_NODISCARD\n       const_reverse_iterator\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(begin()); }\n \n #if __cplusplus >= 201103L\n+      [[__nodiscard__]]\n       const_iterator\n       cbegin() const noexcept\n       { return const_iterator(_Base::begin(), this); }\n \n+      [[__nodiscard__]]\n       const_iterator\n       cend() const noexcept\n       { return const_iterator(_Base::end(), this); }\n \n+      [[__nodiscard__]]\n       const_reverse_iterator\n       crbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n+      [[__nodiscard__]]\n       const_reverse_iterator\n       crend() const noexcept\n       { return const_reverse_iterator(begin()); }\n@@ -407,6 +419,7 @@ namespace __debug\n       }\n #endif\n \n+      _GLIBCXX_NODISCARD\n       size_type\n       capacity() const _GLIBCXX_NOEXCEPT\n       {\n@@ -431,13 +444,15 @@ namespace __debug\n       }\n \n       // element access:\n+      _GLIBCXX_NODISCARD\n       reference\n       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_subscript(__n);\n \treturn _M_base()[__n];\n       }\n \n+      _GLIBCXX_NODISCARD\n       const_reference\n       operator[](size_type __n) const _GLIBCXX_NOEXCEPT\n       {\n@@ -447,27 +462,31 @@ namespace __debug\n \n       using _Base::at;\n \n+      _GLIBCXX_NODISCARD\n       reference\n       front() _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::front();\n       }\n \n+      _GLIBCXX_NODISCARD\n       const_reference\n       front() const _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::front();\n       }\n \n+      _GLIBCXX_NODISCARD\n       reference\n       back() _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::back();\n       }\n \n+      _GLIBCXX_NODISCARD\n       const_reference\n       back() const _GLIBCXX_NOEXCEPT\n       {"}, {"sha": "3e12d35157c9fb00701784ef2d32a729f80a7805", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -127,72 +127,89 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { std::swap_ranges(begin(), end(), __other.begin()); }\n \n       // Iterators.\n+      [[__nodiscard__]]\n       _GLIBCXX17_CONSTEXPR iterator\n       begin() noexcept\n       { return iterator(data()); }\n \n+      [[__nodiscard__]]\n       _GLIBCXX17_CONSTEXPR const_iterator\n       begin() const noexcept\n       { return const_iterator(data()); }\n \n+      [[__nodiscard__]]\n       _GLIBCXX17_CONSTEXPR iterator\n       end() noexcept\n       { return iterator(data() + _Nm); }\n \n+      [[__nodiscard__]]\n       _GLIBCXX17_CONSTEXPR const_iterator\n       end() const noexcept\n       { return const_iterator(data() + _Nm); }\n \n+      [[__nodiscard__]]\n       _GLIBCXX17_CONSTEXPR reverse_iterator\n       rbegin() noexcept\n       { return reverse_iterator(end()); }\n \n+      [[__nodiscard__]]\n       _GLIBCXX17_CONSTEXPR const_reverse_iterator\n       rbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n+      [[__nodiscard__]]\n       _GLIBCXX17_CONSTEXPR reverse_iterator\n       rend() noexcept\n       { return reverse_iterator(begin()); }\n \n+      [[__nodiscard__]]\n       _GLIBCXX17_CONSTEXPR const_reverse_iterator\n       rend() const noexcept\n       { return const_reverse_iterator(begin()); }\n \n+      [[__nodiscard__]]\n       _GLIBCXX17_CONSTEXPR const_iterator\n       cbegin() const noexcept\n       { return const_iterator(data()); }\n \n+      [[__nodiscard__]]\n       _GLIBCXX17_CONSTEXPR const_iterator\n       cend() const noexcept\n       { return const_iterator(data() + _Nm); }\n \n+      [[__nodiscard__]]\n       _GLIBCXX17_CONSTEXPR const_reverse_iterator\n       crbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n+      [[__nodiscard__]]\n       _GLIBCXX17_CONSTEXPR const_reverse_iterator\n       crend() const noexcept\n       { return const_reverse_iterator(begin()); }\n \n       // Capacity.\n+      [[__nodiscard__]]\n       constexpr size_type\n       size() const noexcept { return _Nm; }\n \n+      [[__nodiscard__]]\n       constexpr size_type\n       max_size() const noexcept { return _Nm; }\n \n-      _GLIBCXX_NODISCARD constexpr bool\n+      [[__nodiscard__]]\n+      constexpr bool\n       empty() const noexcept { return size() == 0; }\n \n       // Element access.\n+      [[__nodiscard__]]\n       _GLIBCXX17_CONSTEXPR reference\n       operator[](size_type __n) noexcept\n       {\n \t__glibcxx_requires_subscript(__n);\n \treturn _AT_Type::_S_ref(_M_elems, __n);\n       }\n \n+      [[__nodiscard__]]\n       constexpr const_reference\n       operator[](size_type __n) const noexcept\n       {\n@@ -224,13 +241,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t     _AT_Type::_S_ref(_M_elems, 0));\n       }\n \n+      [[__nodiscard__]]\n       _GLIBCXX17_CONSTEXPR reference\n       front() noexcept\n       {\n \t__glibcxx_requires_nonempty();\n \treturn *begin();\n       }\n \n+      [[__nodiscard__]]\n       constexpr const_reference\n       front() const noexcept\n       {\n@@ -240,13 +259,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn _AT_Type::_S_ref(_M_elems, 0);\n       }\n \n+      [[__nodiscard__]]\n       _GLIBCXX17_CONSTEXPR reference\n       back() noexcept\n       {\n \t__glibcxx_requires_nonempty();\n \treturn _Nm ? *(end() - 1) : *end();\n       }\n \n+      [[__nodiscard__]]\n       constexpr const_reference\n       back() const noexcept\n       {\n@@ -257,10 +278,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n  \t           : _AT_Type::_S_ref(_M_elems, 0);\n       }\n \n+      [[__nodiscard__]]\n       _GLIBCXX17_CONSTEXPR pointer\n       data() noexcept\n       { return _AT_Type::_S_ptr(_M_elems); }\n \n+      [[__nodiscard__]]\n       _GLIBCXX17_CONSTEXPR const_pointer\n       data() const noexcept\n       { return _AT_Type::_S_ptr(_M_elems); }\n@@ -275,13 +298,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Array comparisons.\n   template<typename _Tp, std::size_t _Nm>\n+    [[__nodiscard__]]\n     _GLIBCXX20_CONSTEXPR\n     inline bool\n     operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n     { return std::equal(__one.begin(), __one.end(), __two.begin()); }\n \n #if __cpp_lib_three_way_comparison && __cpp_lib_concepts\n   template<typename _Tp, size_t _Nm>\n+    [[nodiscard]]\n     constexpr __detail::__synth3way_t<_Tp>\n     operator<=>(const array<_Tp, _Nm>& __a, const array<_Tp, _Nm>& __b)\n     {\n@@ -304,12 +329,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n #else\n   template<typename _Tp, std::size_t _Nm>\n+    [[__nodiscard__]]\n     _GLIBCXX20_CONSTEXPR\n     inline bool\n     operator!=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n     { return !(__one == __two); }\n \n   template<typename _Tp, std::size_t _Nm>\n+    [[__nodiscard__]]\n     _GLIBCXX20_CONSTEXPR\n     inline bool\n     operator<(const array<_Tp, _Nm>& __a, const array<_Tp, _Nm>& __b)\n@@ -319,18 +346,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Tp, std::size_t _Nm>\n+    [[__nodiscard__]]\n     _GLIBCXX20_CONSTEXPR\n     inline bool\n     operator>(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n     { return __two < __one; }\n \n   template<typename _Tp, std::size_t _Nm>\n+    [[__nodiscard__]]\n     _GLIBCXX20_CONSTEXPR\n     inline bool\n     operator<=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n     { return !(__one > __two); }\n \n   template<typename _Tp, std::size_t _Nm>\n+    [[__nodiscard__]]\n     _GLIBCXX20_CONSTEXPR\n     inline bool\n     operator>=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n@@ -361,6 +391,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n+    [[__nodiscard__]]\n     constexpr _Tp&\n     get(array<_Tp, _Nm>& __arr) noexcept\n     {\n@@ -369,6 +400,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n+    [[__nodiscard__]]\n     constexpr _Tp&&\n     get(array<_Tp, _Nm>&& __arr) noexcept\n     {\n@@ -377,6 +409,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n+    [[__nodiscard__]]\n     constexpr const _Tp&\n     get(const array<_Tp, _Nm>& __arr) noexcept\n     {\n@@ -385,6 +418,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n+    [[__nodiscard__]]\n     constexpr const _Tp&&\n     get(const array<_Tp, _Nm>&& __arr) noexcept\n     {\n@@ -406,6 +440,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Tp, size_t _Nm>\n+    [[nodiscard]]\n     constexpr array<remove_cv_t<_Tp>, _Nm>\n     to_array(_Tp (&__a)[_Nm])\n     noexcept(is_nothrow_constructible_v<_Tp, _Tp&>)\n@@ -418,6 +453,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Tp, size_t _Nm>\n+    [[nodiscard]]\n     constexpr array<remove_cv_t<_Tp>, _Nm>\n     to_array(_Tp (&&__a)[_Nm])\n     noexcept(is_nothrow_move_constructible_v<_Tp>)"}, {"sha": "e3cb6990f59a0e3786715130ee58c2d041943dd0", "filename": "libstdc++-v3/testsuite/23_containers/array/creation/3_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcreation%2F3_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcreation%2F3_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcreation%2F3_neg.cc?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=gnu++2a\" }\n+// { dg-options \"-std=gnu++2a -Wno-unused-result\" }\n // { dg-do compile { target c++2a } }\n \n // Copyright (C) 2019-2021 Free Software Foundation, Inc."}, {"sha": "01c7c45784e55c884822e4152cad493237c22468", "filename": "libstdc++-v3/testsuite/23_containers/array/debug/back1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fback1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fback1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fback1_neg.cc?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -23,7 +23,7 @@\n void test01()\n {\n   std::array<int, 0> a;\n-  a.back();\n+  (void) a.back();\n }\n \n int main()"}, {"sha": "db195e864118361869bd4f640c6d564bd39f4cba", "filename": "libstdc++-v3/testsuite/23_containers/array/debug/back2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fback2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fback2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fback2_neg.cc?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -23,7 +23,7 @@\n void test01()\n {\n   constexpr std::array<int, 0> a;\n-  a.back();\n+  (void) a.back();\n }\n \n int main()"}, {"sha": "700f8524950ba26487f6cd247f8e1107f86d4e4d", "filename": "libstdc++-v3/testsuite/23_containers/array/debug/front1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Ffront1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Ffront1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Ffront1_neg.cc?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -23,7 +23,7 @@\n void test01()\n {\n   std::array<int, 0> a;\n-  a.front();\n+  (void) a.front();\n }\n \n int main()"}, {"sha": "d84b301fbf827657d8e52e025115c7e2c1035235", "filename": "libstdc++-v3/testsuite/23_containers/array/debug/front2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Ffront2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Ffront2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Ffront2_neg.cc?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -23,7 +23,7 @@\n void test01()\n {\n   constexpr std::array<int, 0> a;\n-  a.front();\n+  (void) a.front();\n }\n \n int main()"}, {"sha": "bc5db43e1236858a09a70cbce782bdacc2b56456", "filename": "libstdc++-v3/testsuite/23_containers/array/debug/square_brackets_operator1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fsquare_brackets_operator1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fsquare_brackets_operator1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fsquare_brackets_operator1_neg.cc?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -23,7 +23,7 @@\n void test01()\n {\n   std::array<int, 0> a;\n-  a[0];\n+  (void) a[0];\n }\n \n int main()"}, {"sha": "105952f36d9303fc443c282f46e42f8e7463f065", "filename": "libstdc++-v3/testsuite/23_containers/array/debug/square_brackets_operator2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fsquare_brackets_operator2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fsquare_brackets_operator2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fsquare_brackets_operator2_neg.cc?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -23,7 +23,7 @@\n void test01()\n {\n   constexpr std::array<int, 0> a;\n-  a[0];\n+  (void) a[0];\n }\n \n int main()"}, {"sha": "70742c14a7d73f79092af3a52a7efa18f69d7fff", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/get_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -26,6 +26,6 @@ int n1 = std::get<1>(a);\n int n2 = std::get<1>(std::move(a));\n int n3 = std::get<1>(ca);\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 367 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 375 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 383 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 398 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 407 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 416 }"}, {"sha": "12063f53bb9babb3ab0ac0019890e644f9457db6", "filename": "libstdc++-v3/testsuite/23_containers/deque/cons/clear_allocator.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2Fclear_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2Fclear_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2Fclear_allocator.cc?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -5,12 +5,12 @@\n // terms of the GNU General Public License as published by the\n // Free Software Foundation; either version 3, or (at your option)\n // any later version.\n- \n+\n // This library is distributed in the hope that it will be useful,\n // but WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n- \n+\n // You should have received a copy of the GNU General Public License along\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n@@ -22,23 +22,23 @@ using namespace std;\n using __gnu_cxx::new_allocator;\n \n template<typename T>\n-  class clear_alloc : public new_allocator<T> \n+  class clear_alloc : public new_allocator<T>\n   {\n   public:\n \n     template <typename T1>\n-      struct rebind \n+      struct rebind\n       { typedef clear_alloc<T1> other; };\n \n     virtual void clear() throw()\n     { }\n \n     clear_alloc() throw()\n     { }\n-    \n-    clear_alloc(clear_alloc const&) throw() : new_allocator<T>() \n+\n+    clear_alloc(clear_alloc const&) throw() : new_allocator<T>()\n     { }\n-    \n+\n     template<typename T1>\n     clear_alloc(clear_alloc<T1> const&) throw()\n       { }\n@@ -51,7 +51,7 @@ template<typename T>\n       this->clear();\n       return new_allocator<T>::allocate(n, hint);\n     }\n-    \n+\n     void deallocate(T *ptr, typename new_allocator<T>::size_type n)\n     {\n       this->clear();\n@@ -64,14 +64,14 @@ template<typename Container>\n   {\n     Container* pic = new Container;\n     int x = 230;\n-    \n+\n     while (x--)\n       {\n \tpic->push_back(x);\n       }\n-    \n-    pic->get_allocator();\n-    \n+\n+    (void) pic->get_allocator();\n+\n     // The following has led to infinite recursions or cores.\n     pic->clear();\n "}, {"sha": "aa98b7f6608db5d4faf9b047f67e8a524ba97633", "filename": "libstdc++-v3/testsuite/23_containers/deque/debug/invalidation/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fdebug%2Finvalidation%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fdebug%2Finvalidation%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fdebug%2Finvalidation%2F4.cc?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -58,7 +58,7 @@ void test04()\n   before = v.begin();\n   at = before + 3;\n   v.erase(at, v.end());\n-  *before;\n+  (void) *before;\n \n   // clear()\n   before = v.begin();"}, {"sha": "144eb57e13a06b0e0c347ebc9b623fb3f5204628", "filename": "libstdc++-v3/testsuite/23_containers/deque/types/1.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Ftypes%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Ftypes%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Ftypes%2F1.cc?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -18,6 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n+// { dg-options \"-Wno-unused-result\" }\n \n #include <deque>\n #include <testsuite_greedy_ops.h>"}, {"sha": "45222b93bcea539ed590666661c00013a6337c38", "filename": "libstdc++-v3/testsuite/23_containers/list/types/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Ftypes%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Ftypes%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Ftypes%2F1.cc?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -25,7 +25,7 @@ int main()\n   std::list<greedy_ops::X> l;\n   const std::list<greedy_ops::X> cl;\n \n-  l.size();\n+  (void) l.size();\n   l.insert(l.begin(), greedy_ops::X());\n   l.insert(l.begin(), 1, greedy_ops::X());\n   l.insert(l.begin(), cl.begin(), cl.end());"}, {"sha": "3ab3d337f46711f263a95e35c852fa49c4e71e8e", "filename": "libstdc++-v3/testsuite/23_containers/priority_queue/members/7161.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Fmembers%2F7161.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Fmembers%2F7161.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Fmembers%2F7161.cc?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -32,7 +32,7 @@ test03()\n   for (int i = 0; i < 3; ++i)\n     pq.push(data[i]);\n \n-  pq.top();\n+  (void) pq.top();\n   for (int i = 0; i < 2; ++i)\n     pq.pop();\n "}, {"sha": "e3e5dda2ef048172be53d479776e300205baa4fd", "filename": "libstdc++-v3/testsuite/23_containers/queue/members/7157.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Fmembers%2F7157.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Fmembers%2F7157.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Fmembers%2F7157.cc?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -29,7 +29,7 @@ test01()\n   std::queue<int> q;\n \n   q.push(1);\n-  q.front();\n+  (void) q.front();\n   q.pop();\n }\n "}, {"sha": "7a7f577a6436a9e02f1d228b332b4cd31b826826", "filename": "libstdc++-v3/testsuite/23_containers/vector/59829.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F59829.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F59829.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F59829.cc?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -63,5 +63,5 @@ bool operator!=(Alloc<T> l, Alloc<T> r) { return false; }\n int main()\n {\n   std::vector<int, Alloc<int>> a;\n-  a.data();\n+  (void) a.data();\n }"}, {"sha": "7656f840448ffc3957c5fe1192e792534be638cc", "filename": "libstdc++-v3/testsuite/23_containers/vector/ext_pointer/types/1.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Ftypes%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Ftypes%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Ftypes%2F1.cc?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -46,10 +46,10 @@ int main()\n   std::vector<N::X, __gnu_cxx::_ExtPtr_allocator<N::X> > v(5);\n   const std::vector<N::X, __gnu_cxx::_ExtPtr_allocator<N::X> > w(1);\n \n-  v[0];\n-  w[0];\n-  v.size();\n-  v.capacity();\n+  (void) v[0];\n+  (void) w[0];\n+  (void) v.size();\n+  (void) v.capacity();\n   v.resize(1);\n   v.insert(v.begin(), N::X());\n   v.insert(v.begin(), 1, N::X());"}, {"sha": "7329712a2a11aab205460c69b9301cdeeca375d8", "filename": "libstdc++-v3/testsuite/23_containers/vector/ext_pointer/types/2.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Ftypes%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Ftypes%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Ftypes%2F2.cc?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -48,10 +48,10 @@ int main()\n   std::vector<N::X, __gnu_cxx::_ExtPtr_allocator<N::X> > v(5);\n   const std::vector<N::X, __gnu_cxx::_ExtPtr_allocator<N::X> > w(1);\n \n-  v[0];\n-  w[0];\n-  v.size();\n-  v.capacity();\n+  (void) v[0];\n+  (void) w[0];\n+  (void) v.size();\n+  (void) v.capacity();\n   v.resize(1);\n   v.insert(v.begin(), N::X());\n   v.insert(v.begin(), 1, N::X());"}, {"sha": "7295a64a008043bc7b2326b4f9f0c69f0ba4634e", "filename": "libstdc++-v3/testsuite/23_containers/vector/types/1.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Ftypes%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d04fe49239d91787850036599164788f1c87785/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Ftypes%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Ftypes%2F1.cc?ref=0d04fe49239d91787850036599164788f1c87785", "patch": "@@ -18,6 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n+// { dg-options \"-Wno-unused-result\" }\n \n #include <vector>\n #include <testsuite_greedy_ops.h>"}]}