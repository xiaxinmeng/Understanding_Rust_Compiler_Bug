{"sha": "6e09093f1f759a78387d214b6d0fe8ba17b752b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUwOTA5M2YxZjc1OWE3ODM4N2QyMTRiNmQwZmU4YmExN2I3NTJiNg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-01-19T17:29:10Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-01-20T10:02:41Z"}, "message": "Enforce the rules for arithmetic operations\n\nThis adds test cases and enforces the type rules for ArithmeticOrLogical\nOperators.", "tree": {"sha": "816f115416b052e671e77b8367d49e0ec767d9e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/816f115416b052e671e77b8367d49e0ec767d9e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e09093f1f759a78387d214b6d0fe8ba17b752b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e09093f1f759a78387d214b6d0fe8ba17b752b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e09093f1f759a78387d214b6d0fe8ba17b752b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e09093f1f759a78387d214b6d0fe8ba17b752b6/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76b308af7e69f5b50fee96ba4b3584935e621259", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76b308af7e69f5b50fee96ba4b3584935e621259", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76b308af7e69f5b50fee96ba4b3584935e621259"}], "stats": {"total": 83, "additions": 82, "deletions": 1}, "files": [{"sha": "419b9110fdb183eba637af396b45499876ac1959", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e09093f1f759a78387d214b6d0fe8ba17b752b6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e09093f1f759a78387d214b6d0fe8ba17b752b6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=6e09093f1f759a78387d214b6d0fe8ba17b752b6", "patch": "@@ -367,8 +367,61 @@ class TypeCheckExpr : public TypeCheckBase\n   {\n     auto lhs = TypeCheckExpr::Resolve (expr.get_lhs ());\n     auto rhs = TypeCheckExpr::Resolve (expr.get_rhs ());\n+    auto combined = lhs->combine (rhs);\n \n-    infered = lhs->combine (rhs);\n+    // https://doc.rust-lang.org/reference/expressions/operator-expr.html#arithmetic-and-logical-binary-operators\n+    switch (expr.get_expr_type ())\n+      {\n+\t// integers or floats\n+      case HIR::ArithmeticOrLogicalExpr::ADD:\n+      case HIR::ArithmeticOrLogicalExpr::SUBTRACT:\n+      case HIR::ArithmeticOrLogicalExpr::MULTIPLY:\n+      case HIR::ArithmeticOrLogicalExpr::DIVIDE:\n+\tcase HIR::ArithmeticOrLogicalExpr::MODULUS: {\n+\t  bool valid = (combined->get_kind () == TyTy::TypeKind::INT)\n+\t\t       || (combined->get_kind () == TyTy::TypeKind::UINT)\n+\t\t       || (combined->get_kind () == TyTy::TypeKind::FLOAT);\n+\t  if (!valid)\n+\t    {\n+\t      rust_error_at (expr.get_locus (), \"cannot apply operator to %s\",\n+\t\t\t     combined->as_string ().c_str ());\n+\t      return;\n+\t    }\n+\t}\n+\tbreak;\n+\n+\t// integers or bools\n+      case HIR::ArithmeticOrLogicalExpr::BITWISE_AND:\n+      case HIR::ArithmeticOrLogicalExpr::BITWISE_OR:\n+\tcase HIR::ArithmeticOrLogicalExpr::BITWISE_XOR: {\n+\t  bool valid = (combined->get_kind () == TyTy::TypeKind::INT)\n+\t\t       || (combined->get_kind () == TyTy::TypeKind::UINT)\n+\t\t       || (combined->get_kind () == TyTy::TypeKind::BOOL);\n+\t  if (!valid)\n+\t    {\n+\t      rust_error_at (expr.get_locus (), \"cannot apply operator to %s\",\n+\t\t\t     combined->as_string ().c_str ());\n+\t      return;\n+\t    }\n+\t}\n+\tbreak;\n+\n+\t// integers only\n+      case HIR::ArithmeticOrLogicalExpr::LEFT_SHIFT:\n+\tcase HIR::ArithmeticOrLogicalExpr::RIGHT_SHIFT: {\n+\t  bool valid = (combined->get_kind () == TyTy::TypeKind::INT)\n+\t\t       || (combined->get_kind () == TyTy::TypeKind::UINT);\n+\t  if (!valid)\n+\t    {\n+\t      rust_error_at (expr.get_locus (), \"cannot apply operator to %s\",\n+\t\t\t     combined->as_string ().c_str ());\n+\t      return;\n+\t    }\n+\t}\n+\tbreak;\n+      }\n+\n+    infered = combined;\n   }\n \n   void visit (HIR::ComparisonExpr &expr)"}, {"sha": "efc63f5641af4a8ad0b5673a03f5d89773be8274", "filename": "gcc/testsuite/rust.test/compilable/arithmetic_expressions1.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e09093f1f759a78387d214b6d0fe8ba17b752b6/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Farithmetic_expressions1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e09093f1f759a78387d214b6d0fe8ba17b752b6/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Farithmetic_expressions1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Farithmetic_expressions1.rs?ref=6e09093f1f759a78387d214b6d0fe8ba17b752b6", "patch": "@@ -0,0 +1,28 @@\n+fn main() {\n+    let a: i32 = 1;\n+    let b: f32 = 5f32;\n+    let c: bool = true;\n+\n+    let a1: i32 = a + 1;\n+    let a2: i32 = a - 2;\n+    let a3: i32 = a * 3;\n+    let a4: i32 = a / 4;\n+    let a5: i32 = a % 5;\n+\n+    let b1: f32 = b + 1f32;\n+    let b2: f32 = b - 2f32;\n+    let b3: f32 = b * 3f32;\n+    let b4: f32 = b / 4f32;\n+    // let b5: f32 = b % 5f32;\n+\n+    let aa1: i32 = a & 1;\n+    let aa2: i32 = a | 2;\n+    let aa2: i32 = a ^ 3;\n+\n+    let c1: bool = c & true;\n+    let c2: bool = c | false;\n+    let c3: bool = c ^ true;\n+\n+    let aaa1: i32 = a << 1;\n+    let aaa2: i32 = a >> 2;\n+}"}]}