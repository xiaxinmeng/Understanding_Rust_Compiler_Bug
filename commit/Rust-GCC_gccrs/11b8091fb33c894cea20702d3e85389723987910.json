{"sha": "11b8091fb33c894cea20702d3e85389723987910", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFiODA5MWZiMzNjODk0Y2VhMjA3MDJkM2U4NTM4OTcyMzk4NzkxMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-12-18T23:03:23Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-12-18T23:03:23Z"}, "message": "* ira.c (ira): Use simple LRA algorithm when not optimizing.\n\nFrom-SVN: r279550", "tree": {"sha": "427f71a6fe22d2d9f56e91ff3b27115b1a3c4fb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/427f71a6fe22d2d9f56e91ff3b27115b1a3c4fb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11b8091fb33c894cea20702d3e85389723987910", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11b8091fb33c894cea20702d3e85389723987910", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11b8091fb33c894cea20702d3e85389723987910", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11b8091fb33c894cea20702d3e85389723987910/comments", "author": null, "committer": null, "parents": [{"sha": "d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3769410c65a7d3f2d58402c3ecf5c253e340c2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3769410c65a7d3f2d58402c3ecf5c253e340c2e"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "0f1a0b6a2ea4acec50e874b7b723c026e0b8f8b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8091fb33c894cea20702d3e85389723987910/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8091fb33c894cea20702d3e85389723987910/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11b8091fb33c894cea20702d3e85389723987910", "patch": "@@ -1,3 +1,7 @@\n+2019-12-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* ira.c (ira): Use simple LRA algorithm when not optimizing.\n+\n 2019-12-18  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* gimplify.c (gimplify_omp_target_update): Elaborate 'exit data'"}, {"sha": "1a9b390879d63c271c6e15aac821d140368d8d06", "filename": "gcc/ira.c", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b8091fb33c894cea20702d3e85389723987910/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b8091fb33c894cea20702d3e85389723987910/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=11b8091fb33c894cea20702d3e85389723987910", "patch": "@@ -5192,8 +5192,6 @@ ira (FILE *f)\n   int ira_max_point_before_emit;\n   bool saved_flag_caller_saves = flag_caller_saves;\n   enum ira_region saved_flag_ira_region = flag_ira_region;\n-  unsigned int i;\n-  int num_used_regs = 0;\n \n   clear_bb_flags ();\n \n@@ -5207,18 +5205,28 @@ ira (FILE *f)\n   /* Perform target specific PIC register initialization.  */\n   targetm.init_pic_reg ();\n \n-  ira_conflicts_p = optimize > 0;\n-\n-  /* Determine the number of pseudos actually requiring coloring.  */\n-  for (i = FIRST_PSEUDO_REGISTER; i < DF_REG_SIZE (df); i++)\n-    num_used_regs += !!(DF_REG_USE_COUNT (i) + DF_REG_DEF_COUNT (i));\n-\n-  /* If there are too many pseudos and/or basic blocks (e.g. 10K\n-     pseudos and 10K blocks or 100K pseudos and 1K blocks), we will\n-     use simplified and faster algorithms in LRA.  */\n-  lra_simple_p\n-    = (ira_use_lra_p\n-       && num_used_regs >= (1 << 26) / last_basic_block_for_fn (cfun));\n+  if (optimize)\n+    {\n+      ira_conflicts_p = true;\n+\n+      /* Determine the number of pseudos actually requiring coloring.  */\n+      unsigned int num_used_regs = 0;\n+      for (unsigned int i = FIRST_PSEUDO_REGISTER; i < DF_REG_SIZE (df); i++)\n+\tif (DF_REG_DEF_COUNT (i) || DF_REG_USE_COUNT (i))\n+\t  num_used_regs++;\n+\n+      /* If there are too many pseudos and/or basic blocks (e.g. 10K\n+\t pseudos and 10K blocks or 100K pseudos and 1K blocks), we will\n+\t use simplified and faster algorithms in LRA.  */\n+      lra_simple_p\n+\t= ira_use_lra_p\n+\t  && num_used_regs >= (1U << 26) / last_basic_block_for_fn (cfun);\n+    }\n+  else\n+    {\n+      ira_conflicts_p = false;\n+      lra_simple_p = ira_use_lra_p;\n+    }\n \n   if (lra_simple_p)\n     {"}]}