{"sha": "392fa55c799358e198ca85fbea548e60359133c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkyZmE1NWM3OTkzNThlMTk4Y2E4NWZiZWE1NDhlNjAzNTkxMzNjNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-09-26T08:31:37Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-09-26T08:31:37Z"}, "message": "dwarf2out.c (stripattributes): Remove unused function.\n\n2016-09-26  Richard Biener  <rguenther@suse.de>\n\n\t* dwarf2out.c (stripattributes): Remove unused function.\n\t(DEBUG_NORM_MACINFO_SECTION): Rename to DEBUG_MACINFO_SECTION.\n\tPush dwarf_split_debug_info handling into init_sections_and_labels.\n\t(DEBUG_NORM_MACRO_SECTION): Likewise to DEBUG_MACRO_SECTION.\n\t(DEBUG_MACRO_SECTION_FLAGS): Remove.\n\t(debug_macinfo_section_name): New global.\n\t(output_macinfo): Use debug_macinfo_section_name.\n\t(init_sections_and_labels): Split out section and label generation\n\tfrom dwarf2out_init.  Set debug_macinfo_section_name.\n\t(dwarf2out_init): Move text section label generation and emission\n\tto ...\n\t(dwarf2out_assembly_start): ... here.\n\t(dwarf2out_finish): Call init_sections_and_labels before DWARF\n\toutput starts.\n\nFrom-SVN: r240484", "tree": {"sha": "0011934a5af1720156f7dfe9eec2a5735540b3e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0011934a5af1720156f7dfe9eec2a5735540b3e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/392fa55c799358e198ca85fbea548e60359133c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/392fa55c799358e198ca85fbea548e60359133c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/392fa55c799358e198ca85fbea548e60359133c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/392fa55c799358e198ca85fbea548e60359133c5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e6358ebda41b1adabd1037824c03c334d6395ccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6358ebda41b1adabd1037824c03c334d6395ccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6358ebda41b1adabd1037824c03c334d6395ccf"}], "stats": {"total": 193, "additions": 97, "deletions": 96}, "files": [{"sha": "8481198269faf37641c93f6f5870abf96efb5c1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392fa55c799358e198ca85fbea548e60359133c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392fa55c799358e198ca85fbea548e60359133c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=392fa55c799358e198ca85fbea548e60359133c5", "patch": "@@ -1,3 +1,20 @@\n+2016-09-26  Richard Biener  <rguenther@suse.de>\n+\n+\t* dwarf2out.c (stripattributes): Remove unused function.\n+\t(DEBUG_NORM_MACINFO_SECTION): Rename to DEBUG_MACINFO_SECTION.\n+\tPush dwarf_split_debug_info handling into init_sections_and_labels.\n+\t(DEBUG_NORM_MACRO_SECTION): Likewise to DEBUG_MACRO_SECTION.\n+\t(DEBUG_MACRO_SECTION_FLAGS): Remove.\n+\t(debug_macinfo_section_name): New global.\n+\t(output_macinfo): Use debug_macinfo_section_name.\n+\t(init_sections_and_labels): Split out section and label generation\n+\tfrom dwarf2out_init.  Set debug_macinfo_section_name.\n+\t(dwarf2out_init): Move text section label generation and emission\n+\tto ...\n+\t(dwarf2out_assembly_start): ... here.\n+\t(dwarf2out_finish): Call init_sections_and_labels before DWARF\n+\toutput starts.\n+\n 2016-09-26  Richard Biener  <rguenther@suse.de>\n \n \tPR debug/77692"}, {"sha": "ed74190131b2bc77951778167b20161018230c0e", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 80, "deletions": 96, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392fa55c799358e198ca85fbea548e60359133c5/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392fa55c799358e198ca85fbea548e60359133c5/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=392fa55c799358e198ca85fbea548e60359133c5", "patch": "@@ -159,6 +159,7 @@ static GTY(()) section *debug_skeleton_abbrev_section;\n static GTY(()) section *debug_aranges_section;\n static GTY(()) section *debug_addr_section;\n static GTY(()) section *debug_macinfo_section;\n+static const char *debug_macinfo_section_name;\n static GTY(()) section *debug_line_section;\n static GTY(()) section *debug_skeleton_line_section;\n static GTY(()) section *debug_loc_section;\n@@ -265,7 +266,6 @@ static GTY(()) dw_die_ref decltype_auto_die;\n \n /* Forward declarations for functions defined in this file.  */\n \n-static char *stripattributes (const char *);\n static void output_call_frame_info (int);\n static void dwarf2out_note_section_used (void);\n \n@@ -410,24 +410,6 @@ should_emit_struct_debug (tree type, enum debug_info_usage usage)\n   return DUMP_GSTRUCT (type, usage, criterion, generic, false, false);\n }\n \f\n-/* Return a pointer to a copy of the section string name S with all\n-   attributes stripped off, and an asterisk prepended (for assemble_name).  */\n-\n-static inline char *\n-stripattributes (const char *s)\n-{\n-  char *stripped = XNEWVEC (char, strlen (s) + 2);\n-  char *p = stripped;\n-\n-  *p++ = '*';\n-\n-  while (*s && *s != ',')\n-    *p++ = *s++;\n-\n-  *p = '\\0';\n-  return stripped;\n-}\n-\n /* Switch [BACK] to eh_frame_section.  If we don't have an eh_frame_section,\n    switch to the data section instead, and write out a synthetic start label\n    for collect2 the first time around.  */\n@@ -3514,27 +3496,17 @@ new_addr_loc_descr (rtx addr, enum dtprel_bool dtprel)\n #ifndef DEBUG_ADDR_SECTION\n #define DEBUG_ADDR_SECTION     \".debug_addr\"\n #endif\n-#ifndef DEBUG_NORM_MACINFO_SECTION\n-#define DEBUG_NORM_MACINFO_SECTION     \".debug_macinfo\"\n+#ifndef DEBUG_MACINFO_SECTION\n+#define DEBUG_MACINFO_SECTION     \".debug_macinfo\"\n #endif\n #ifndef DEBUG_DWO_MACINFO_SECTION\n #define DEBUG_DWO_MACINFO_SECTION      \".debug_macinfo.dwo\"\n #endif\n-#ifndef DEBUG_MACINFO_SECTION\n-#define DEBUG_MACINFO_SECTION                                           \\\n-  (!dwarf_split_debug_info                                              \\\n-   ? (DEBUG_NORM_MACINFO_SECTION) : (DEBUG_DWO_MACINFO_SECTION))\n-#endif\n-#ifndef DEBUG_NORM_MACRO_SECTION\n-#define DEBUG_NORM_MACRO_SECTION \".debug_macro\"\n-#endif\n #ifndef DEBUG_DWO_MACRO_SECTION\n #define DEBUG_DWO_MACRO_SECTION        \".debug_macro.dwo\"\n #endif\n #ifndef DEBUG_MACRO_SECTION\n-#define DEBUG_MACRO_SECTION                                             \\\n-  (!dwarf_split_debug_info                                              \\\n-   ? (DEBUG_NORM_MACRO_SECTION) : (DEBUG_DWO_MACRO_SECTION))\n+#define DEBUG_MACRO_SECTION\t\".debug_macro\"\n #endif\n #ifndef DEBUG_LINE_SECTION\n #define DEBUG_LINE_SECTION\t\".debug_line\"\n@@ -3580,10 +3552,6 @@ new_addr_loc_descr (rtx addr, enum dtprel_bool dtprel)\n #define TEXT_SECTION_NAME\t\".text\"\n #endif\n \n-/* Section flags for .debug_macinfo/.debug_macro section.  */\n-#define DEBUG_MACRO_SECTION_FLAGS                                       \\\n-  (dwarf_split_debug_info ? SECTION_DEBUG | SECTION_EXCLUDE : SECTION_DEBUG)\n-\n /* Section flags for .debug_str section.  */\n #define DEBUG_STR_SECTION_FLAGS                                 \\\n   (HAVE_GAS_SHF_MERGE && flag_merge_debug_strings               \\\n@@ -25522,7 +25490,7 @@ output_macinfo (void)\n \t  tree comdat_key = get_identifier (ref->info);\n \t  /* Terminate the previous .debug_macinfo section.  */\n \t  dw2_asm_output_data (1, 0, \"End compilation unit\");\n-\t  targetm.asm_out.named_section (DEBUG_MACRO_SECTION,\n+\t  targetm.asm_out.named_section (debug_macinfo_section_name,\n \t\t\t\t\t SECTION_DEBUG\n \t\t\t\t\t | SECTION_LINKONCE,\n \t\t\t\t\t comdat_key);\n@@ -25550,53 +25518,11 @@ output_macinfo (void)\n       }\n }\n \n-/* Set up for Dwarf output at the start of compilation.  */\n+/* Initialize the various sections and labels for dwarf output.  */\n \n static void\n-dwarf2out_init (const char *filename ATTRIBUTE_UNUSED)\n+init_sections_and_labels (void)\n {\n-  /* This option is currently broken, see (PR53118 and PR46102).  */\n-  if (flag_eliminate_dwarf2_dups\n-      && strstr (lang_hooks.name, \"C++\"))\n-    {\n-      warning (0, \"-feliminate-dwarf2-dups is broken for C++, ignoring\");\n-      flag_eliminate_dwarf2_dups = 0;\n-    }\n-\n-  /* Allocate the file_table.  */\n-  file_table = hash_table<dwarf_file_hasher>::create_ggc (50);\n-\n-#ifndef DWARF2_LINENO_DEBUGGING_INFO\n-  /* Allocate the decl_die_table.  */\n-  decl_die_table = hash_table<decl_die_hasher>::create_ggc (10);\n-\n-  /* Allocate the decl_loc_table.  */\n-  decl_loc_table = hash_table<decl_loc_hasher>::create_ggc (10);\n-\n-  /* Allocate the cached_dw_loc_list_table.  */\n-  cached_dw_loc_list_table = hash_table<dw_loc_list_hasher>::create_ggc (10);\n-\n-  /* Allocate the initial hunk of the decl_scope_table.  */\n-  vec_alloc (decl_scope_table, 256);\n-\n-  /* Allocate the initial hunk of the abbrev_die_table.  */\n-  abbrev_die_table = ggc_cleared_vec_alloc<dw_die_ref>\n-    (ABBREV_DIE_TABLE_INCREMENT);\n-  abbrev_die_table_allocated = ABBREV_DIE_TABLE_INCREMENT;\n-  /* Zero-th entry is allocated, but unused.  */\n-  abbrev_die_table_in_use = 1;\n-\n-  /* Allocate the dwarf_proc_stack_usage_map.  */\n-  dwarf_proc_stack_usage_map = new hash_map<dw_die_ref, int>;\n-\n-  /* Allocate the pubtypes and pubnames vectors.  */\n-  vec_alloc (pubname_table, 32);\n-  vec_alloc (pubtype_table, 32);\n-\n-  vec_alloc (incomplete_types, 64);\n-\n-  vec_alloc (used_rtx_array, 32);\n-\n   if (!dwarf_split_debug_info)\n     {\n       debug_info_section = get_section (DEBUG_INFO_SECTION,\n@@ -25605,6 +25531,10 @@ dwarf2out_init (const char *filename ATTRIBUTE_UNUSED)\n                                           SECTION_DEBUG, NULL);\n       debug_loc_section = get_section (DEBUG_LOC_SECTION,\n                                        SECTION_DEBUG, NULL);\n+      debug_macinfo_section_name\n+\t= dwarf_strict ? DEBUG_MACINFO_SECTION : DEBUG_MACRO_SECTION;\n+      debug_macinfo_section = get_section (debug_macinfo_section_name,\n+\t\t\t\t\t   SECTION_DEBUG, NULL);\n     }\n   else\n     {\n@@ -25625,8 +25555,8 @@ dwarf2out_init (const char *filename ATTRIBUTE_UNUSED)\n       /* Somewhat confusing detail: The skeleton_[abbrev|info] sections stay in\n          the main .o, but the skeleton_line goes into the split off dwo.  */\n       debug_skeleton_line_section\n-          = get_section (DEBUG_DWO_LINE_SECTION,\n-                         SECTION_DEBUG | SECTION_EXCLUDE, NULL);\n+        = get_section (DEBUG_DWO_LINE_SECTION,\n+\t\t       SECTION_DEBUG | SECTION_EXCLUDE, NULL);\n       ASM_GENERATE_INTERNAL_LABEL (debug_skeleton_line_section_label,\n                                    DEBUG_SKELETON_LINE_SECTION_LABEL, 0);\n       debug_str_offsets_section = get_section (DEBUG_STR_OFFSETS_SECTION,\n@@ -25638,13 +25568,14 @@ dwarf2out_init (const char *filename ATTRIBUTE_UNUSED)\n                                        SECTION_DEBUG | SECTION_EXCLUDE, NULL);\n       debug_str_dwo_section = get_section (DEBUG_STR_DWO_SECTION,\n                                            DEBUG_STR_DWO_SECTION_FLAGS, NULL);\n+      debug_macinfo_section_name\n+\t= dwarf_strict ? DEBUG_DWO_MACINFO_SECTION : DEBUG_DWO_MACRO_SECTION;\n+      debug_macinfo_section = get_section (debug_macinfo_section_name,\n+\t\t\t\t\t   SECTION_DEBUG | SECTION_EXCLUDE,\n+\t\t\t\t\t   NULL);\n     }\n   debug_aranges_section = get_section (DEBUG_ARANGES_SECTION,\n \t\t\t\t       SECTION_DEBUG, NULL);\n-  debug_macinfo_section = get_section (dwarf_strict\n-\t\t\t\t       ? DEBUG_MACINFO_SECTION\n-\t\t\t\t       : DEBUG_MACRO_SECTION,\n-                                       DEBUG_MACRO_SECTION_FLAGS, NULL);\n   debug_line_section = get_section (DEBUG_LINE_SECTION,\n \t\t\t\t    SECTION_DEBUG, NULL);\n   debug_pubnames_section = get_section (DEBUG_PUBNAMES_SECTION,\n@@ -25658,14 +25589,8 @@ dwarf2out_init (const char *filename ATTRIBUTE_UNUSED)\n   debug_frame_section = get_section (DEBUG_FRAME_SECTION,\n \t\t\t\t     SECTION_DEBUG, NULL);\n \n-  ASM_GENERATE_INTERNAL_LABEL (text_end_label, TEXT_END_LABEL, 0);\n   ASM_GENERATE_INTERNAL_LABEL (abbrev_section_label,\n \t\t\t       DEBUG_ABBREV_SECTION_LABEL, 0);\n-  ASM_GENERATE_INTERNAL_LABEL (text_section_label, TEXT_SECTION_LABEL, 0);\n-  ASM_GENERATE_INTERNAL_LABEL (cold_text_section_label,\n-\t\t\t       COLD_TEXT_SECTION_LABEL, 0);\n-  ASM_GENERATE_INTERNAL_LABEL (cold_end_label, COLD_END_LABEL, 0);\n-\n   ASM_GENERATE_INTERNAL_LABEL (debug_info_section_label,\n \t\t\t       DEBUG_INFO_SECTION_LABEL, 0);\n   ASM_GENERATE_INTERNAL_LABEL (debug_line_section_label,\n@@ -25679,12 +25604,57 @@ dwarf2out_init (const char *filename ATTRIBUTE_UNUSED)\n \t\t\t       ? DEBUG_MACINFO_SECTION_LABEL\n \t\t\t       : DEBUG_MACRO_SECTION_LABEL, 0);\n   ASM_GENERATE_INTERNAL_LABEL (loc_section_label, DEBUG_LOC_SECTION_LABEL, 0);\n+}\n+\n+/* Set up for Dwarf output at the start of compilation.  */\n+\n+static void\n+dwarf2out_init (const char *filename ATTRIBUTE_UNUSED)\n+{\n+  /* This option is currently broken, see (PR53118 and PR46102).  */\n+  if (flag_eliminate_dwarf2_dups\n+      && strstr (lang_hooks.name, \"C++\"))\n+    {\n+      warning (0, \"-feliminate-dwarf2-dups is broken for C++, ignoring\");\n+      flag_eliminate_dwarf2_dups = 0;\n+    }\n+\n+  /* Allocate the file_table.  */\n+  file_table = hash_table<dwarf_file_hasher>::create_ggc (50);\n+\n+#ifndef DWARF2_LINENO_DEBUGGING_INFO\n+  /* Allocate the decl_die_table.  */\n+  decl_die_table = hash_table<decl_die_hasher>::create_ggc (10);\n+\n+  /* Allocate the decl_loc_table.  */\n+  decl_loc_table = hash_table<decl_loc_hasher>::create_ggc (10);\n+\n+  /* Allocate the cached_dw_loc_list_table.  */\n+  cached_dw_loc_list_table = hash_table<dw_loc_list_hasher>::create_ggc (10);\n+\n+  /* Allocate the initial hunk of the decl_scope_table.  */\n+  vec_alloc (decl_scope_table, 256);\n+\n+  /* Allocate the initial hunk of the abbrev_die_table.  */\n+  abbrev_die_table = ggc_cleared_vec_alloc<dw_die_ref>\n+    (ABBREV_DIE_TABLE_INCREMENT);\n+  abbrev_die_table_allocated = ABBREV_DIE_TABLE_INCREMENT;\n+  /* Zero-th entry is allocated, but unused.  */\n+  abbrev_die_table_in_use = 1;\n+\n+  /* Allocate the dwarf_proc_stack_usage_map.  */\n+  dwarf_proc_stack_usage_map = new hash_map<dw_die_ref, int>;\n+\n+  /* Allocate the pubtypes and pubnames vectors.  */\n+  vec_alloc (pubname_table, 32);\n+  vec_alloc (pubtype_table, 32);\n+\n+  vec_alloc (incomplete_types, 64);\n+\n+  vec_alloc (used_rtx_array, 32);\n \n   if (debug_info_level >= DINFO_LEVEL_VERBOSE)\n     vec_alloc (macinfo_table, 64);\n-\n-  switch_to_section (text_section);\n-  ASM_OUTPUT_LABEL (asm_out_file, text_section_label);\n #endif\n \n   /* Make sure the line number table for .text always exists.  */\n@@ -25707,6 +25677,17 @@ dwarf2out_init (const char *filename ATTRIBUTE_UNUSED)\n static void\n dwarf2out_assembly_start (void)\n {\n+#ifndef DWARF2_LINENO_DEBUGGING_INFO\n+  ASM_GENERATE_INTERNAL_LABEL (text_section_label, TEXT_SECTION_LABEL, 0);\n+  ASM_GENERATE_INTERNAL_LABEL (text_end_label, TEXT_END_LABEL, 0);\n+  ASM_GENERATE_INTERNAL_LABEL (cold_text_section_label,\n+\t\t\t       COLD_TEXT_SECTION_LABEL, 0);\n+  ASM_GENERATE_INTERNAL_LABEL (cold_end_label, COLD_END_LABEL, 0);\n+\n+  switch_to_section (text_section);\n+  ASM_OUTPUT_LABEL (asm_out_file, text_section_label);\n+#endif\n+\n   if (HAVE_GAS_CFI_SECTIONS_DIRECTIVE\n       && dwarf2out_do_cfi_asm ()\n       && (!(flag_unwind_tables || flag_exceptions)\n@@ -27866,6 +27847,9 @@ dwarf2out_finish (const char *)\n   if (flag_eliminate_dwarf2_dups)\n     break_out_includes (comp_unit_die ());\n \n+  /* Initialize sections and labels used for actual assembler output.  */\n+  init_sections_and_labels ();\n+\n   /* Traverse the DIE's and add sibling attributes to those DIE's that\n      have children.  */\n   add_sibling_attributes (comp_unit_die ());"}]}