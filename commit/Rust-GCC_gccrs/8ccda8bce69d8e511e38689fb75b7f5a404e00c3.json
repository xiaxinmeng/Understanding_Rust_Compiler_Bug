{"sha": "8ccda8bce69d8e511e38689fb75b7f5a404e00c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNjZGE4YmNlNjlkOGU1MTFlMzg2ODlmYjc1YjdmNWE0MDRlMDBjMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-10-07T09:18:37Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-10-07T09:18:37Z"}, "message": "cgraph.h (cgraph_node::get_fun): Declare.\n\n\t* cgraph.h (cgraph_node::get_fun): Declare.\n\t* cgraph.c (cgraph_node::get_fun): New method.\n\t* ipa-inline.c (can_inline_edge_p): Use it.\n\nFrom-SVN: r215968", "tree": {"sha": "72fe163acf91a73fc92b843156c63ac32b67292f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72fe163acf91a73fc92b843156c63ac32b67292f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ccda8bce69d8e511e38689fb75b7f5a404e00c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ccda8bce69d8e511e38689fb75b7f5a404e00c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ccda8bce69d8e511e38689fb75b7f5a404e00c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ccda8bce69d8e511e38689fb75b7f5a404e00c3/comments", "author": null, "committer": null, "parents": [{"sha": "2f77200b3f168ebf0b07acd63d68096d8840fc1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f77200b3f168ebf0b07acd63d68096d8840fc1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f77200b3f168ebf0b07acd63d68096d8840fc1d"}], "stats": {"total": 43, "additions": 31, "deletions": 12}, "files": [{"sha": "f1f16ee14a7178c4534a339ea8cda5195782ce5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ccda8bce69d8e511e38689fb75b7f5a404e00c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ccda8bce69d8e511e38689fb75b7f5a404e00c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ccda8bce69d8e511e38689fb75b7f5a404e00c3", "patch": "@@ -1,3 +1,9 @@\n+2014-10-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* cgraph.h (cgraph_node::get_fun): Declare.\n+\t* cgraph.c (cgraph_node::get_fun): New method.\n+\t* ipa-inline.c (can_inline_edge_p): Use it.\n+\n 2014-10-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* lto-opts.c (lto_write_options): Handle -fmath-errno, -fsigned-zeros"}, {"sha": "f842b1b6432d7e1dc122d31ac6b3a9cfd45c3f96", "filename": "gcc/cgraph.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ccda8bce69d8e511e38689fb75b7f5a404e00c3/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ccda8bce69d8e511e38689fb75b7f5a404e00c3/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=8ccda8bce69d8e511e38689fb75b7f5a404e00c3", "patch": "@@ -2992,6 +2992,23 @@ cgraph_node::get_body (void)\n   return true;\n }\n \n+/* Return the DECL_STRUCT_FUNCTION of the function.  */\n+\n+struct function *\n+cgraph_node::get_fun (void)\n+{\n+  cgraph_node *node = this;\n+  struct function *fun = DECL_STRUCT_FUNCTION (node->decl);\n+\n+  while (!fun && node->clone_of)\n+    {\n+      node = node->clone_of;\n+      fun = DECL_STRUCT_FUNCTION (node->decl);\n+    }\n+\n+  return fun;\n+}\n+\n /* Verify if the type of the argument matches that of the function\n    declaration.  If we cannot verify this or there is a mismatch,\n    return false.  */"}, {"sha": "1df7534cd71f039aa7741a8292100ba72ca0e60e", "filename": "gcc/cgraph.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ccda8bce69d8e511e38689fb75b7f5a404e00c3/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ccda8bce69d8e511e38689fb75b7f5a404e00c3/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=8ccda8bce69d8e511e38689fb75b7f5a404e00c3", "patch": "@@ -919,6 +919,9 @@ struct GTY((tag (\"SYMTAB_FUNCTION\"))) cgraph_node : public symtab_node {\n      are free'd in final.c via free_after_compilation().  */\n   void release_body (bool keep_arguments = false);\n \n+  /* Return the DECL_STRUCT_FUNCTION of the function.  */\n+  struct function *get_fun (void);\n+\n   /* cgraph_node is no longer nested function; update cgraph accordingly.  */\n   void unnest (void);\n "}, {"sha": "9ac19298c198a31206829db953f9baf29503a38d", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ccda8bce69d8e511e38689fb75b7f5a404e00c3/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ccda8bce69d8e511e38689fb75b7f5a404e00c3/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=8ccda8bce69d8e511e38689fb75b7f5a404e00c3", "patch": "@@ -273,15 +273,8 @@ can_inline_edge_p (struct cgraph_edge *e, bool report,\n   tree caller_tree = DECL_FUNCTION_SPECIFIC_OPTIMIZATION (e->caller->decl);\n   tree callee_tree\n     = callee ? DECL_FUNCTION_SPECIFIC_OPTIMIZATION (callee->decl) : NULL;\n-  struct function *caller_cfun = DECL_STRUCT_FUNCTION (e->caller->decl);\n-  struct function *callee_cfun\n-    = callee ? DECL_STRUCT_FUNCTION (callee->decl) : NULL;\n-\n-  if (!caller_cfun && e->caller->clone_of)\n-    caller_cfun = DECL_STRUCT_FUNCTION (e->caller->clone_of->decl);\n-\n-  if (!callee_cfun && callee && callee->clone_of)\n-    callee_cfun = DECL_STRUCT_FUNCTION (callee->clone_of->decl);\n+  struct function *caller_fun = e->caller->get_fun ();\n+  struct function *callee_fun = callee ? callee->get_fun () : NULL;\n \n   gcc_assert (e->inline_failed);\n \n@@ -296,7 +289,7 @@ can_inline_edge_p (struct cgraph_edge *e, bool report,\n       inlinable = false;\n     }\n   else if (!inline_summary (callee)->inlinable \n-\t   || (caller_cfun && fn_contains_cilk_spawn_p (caller_cfun)))\n+\t   || (caller_fun && fn_contains_cilk_spawn_p (caller_fun)))\n     {\n       e->inline_failed = CIF_FUNCTION_NOT_INLINABLE;\n       inlinable = false;\n@@ -333,8 +326,8 @@ can_inline_edge_p (struct cgraph_edge *e, bool report,\n      caller cannot.\n      FIXME: this is obviously wrong for LTO where STRUCT_FUNCTION is missing.\n      Move the flag into cgraph node or mirror it in the inline summary.  */\n-  else if (callee_cfun && callee_cfun->can_throw_non_call_exceptions\n-\t   && !(caller_cfun && caller_cfun->can_throw_non_call_exceptions))\n+  else if (callee_fun && callee_fun->can_throw_non_call_exceptions\n+\t   && !(caller_fun && caller_fun->can_throw_non_call_exceptions))\n     {\n       e->inline_failed = CIF_NON_CALL_EXCEPTIONS;\n       inlinable = false;"}]}