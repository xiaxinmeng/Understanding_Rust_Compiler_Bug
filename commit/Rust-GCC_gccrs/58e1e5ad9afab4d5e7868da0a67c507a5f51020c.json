{"sha": "58e1e5ad9afab4d5e7868da0a67c507a5f51020c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThlMWU1YWQ5YWZhYjRkNWU3ODY4ZGEwYTY3YzUwN2E1ZjUxMDIwYw==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "1999-06-30T01:36:45Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1999-06-30T01:36:45Z"}, "message": "Move proc gcc_target_object_format from ecos.exp to file-format.exp\n\nFrom-SVN: r27842", "tree": {"sha": "ab0975d9d6fa4e826951bdfceaaa079f66760a71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab0975d9d6fa4e826951bdfceaaa079f66760a71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58e1e5ad9afab4d5e7868da0a67c507a5f51020c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58e1e5ad9afab4d5e7868da0a67c507a5f51020c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58e1e5ad9afab4d5e7868da0a67c507a5f51020c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58e1e5ad9afab4d5e7868da0a67c507a5f51020c/comments", "author": null, "committer": null, "parents": [{"sha": "2e477ae806afb477651b890e1c563b17449c20e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e477ae806afb477651b890e1c563b17449c20e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e477ae806afb477651b890e1c563b17449c20e9"}], "stats": {"total": 147, "additions": 93, "deletions": 54}, "files": [{"sha": "169fc8e399ec4884da7777cf36c0f34872c864c3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e1e5ad9afab4d5e7868da0a67c507a5f51020c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e1e5ad9afab4d5e7868da0a67c507a5f51020c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=58e1e5ad9afab4d5e7868da0a67c507a5f51020c", "patch": "@@ -1,3 +1,15 @@\n+1999-06-29  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* lib/file-format.exp: New file: Move definition of proc \n+\tgcc_target_object_format to here from\n+\tgcc.dg/special/ecos.exp.\n+\n+\t* lib/c-torture.exp: Include lib file-format.exp.\n+\t* lib/gcc-dg.exp: Include lib file-format.exp.\n+\n+\t* gcc.dg/special/ecos.exp: Remove definition of proc\n+\tgcc_target_object_format.\n+\t\n Mon Jun 28 08:20:51 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* gcc.c-torture/execute/990628-1.c: New test."}, {"sha": "f1a5f79904d70a1537366323abf41515b158ee46", "filename": "gcc/testsuite/gcc.dg/special/ecos.exp", "status": "modified", "additions": 4, "deletions": 53, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e1e5ad9afab4d5e7868da0a67c507a5f51020c/gcc%2Ftestsuite%2Fgcc.dg%2Fspecial%2Fecos.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e1e5ad9afab4d5e7868da0a67c507a5f51020c/gcc%2Ftestsuite%2Fgcc.dg%2Fspecial%2Fecos.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspecial%2Fecos.exp?ref=58e1e5ad9afab4d5e7868da0a67c507a5f51020c", "patch": "@@ -24,59 +24,10 @@\n # Load support procs.\n load_lib gcc-dg.exp\n \n-###################################\n-# proc gcc_target_object_format { }\n-###################################\n-\n-proc gcc_target_object_format { } { \n-    global gcc_target_object_format_saved\n-\n-    if [info exists gcc_target_object_format_saved] {\n-        verbose \"gcc_target_object_format returning saved $gcc_target_object_format_saved\" 2\n-        return $gcc_target_object_format_saved\n-    } else {\n-\n-        set objdump_name [find_binutils_prog objdump]\n-        set open_file [open objfmtst.c w]\n-        puts $open_file \"void foo(void) { }\"\n-        close $open_file\n-        \n-        gcc_target_compile objfmtst.c objfmtst.o object \"\"\n-        \n-        set output [exec $objdump_name --file-headers objfmtst.o ]\n-        \n-        file delete objfmtst.o\n-        \n-        if ![ regexp \"file format (.*)arch\" $output dummy objformat ]  {\n-            verbose \"Could not parse objdump output\" 2\n-            set gcc_target_object_format_saved unknown\n-        } else {\n-            switch -regexp $objformat {\n-                elf          {\n-                    verbose \"gcc_target_object_format returning elf\" 2\n-                    set gcc_target_object_format_saved elf\n-                } \n-                ecoff        {\n-                    verbose \"gcc_target_object_format returning ecoff\" 2\n-                    set gcc_target_object_format_saved ecoff\n-                }\n-                coff         {\n-                    verbose \"gcc_target_object_format returning coff\" 2\n-                    set gcc_target_object_format_saved coff\n-                }\n-                a\\.out       {\n-                    verbose \"gcc_target_object_format returning a.out\" 2\n-                    set gcc_target_object_format_saved a.out\n-                }\n-                default      {\n-                    verbose \"gcc_target_object_format returning unknown\" 2\n-                    set gcc_target_object_format_saved unknown\n-                }\n-            }\n-        }\n-        return $gcc_target_object_format_saved\n-    }\n-}\n+###############################\n+# proc gcc_target_object_format {}\n+###############################\n+# has been moved to:  gcc/testsuite/lib/file-format.exp\n \n ###############################\n # proc check_weak_available { }"}, {"sha": "839c32caa80e25b77a7b053214b2c8e36f3f7cce", "filename": "gcc/testsuite/lib/c-torture.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e1e5ad9afab4d5e7868da0a67c507a5f51020c/gcc%2Ftestsuite%2Flib%2Fc-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e1e5ad9afab4d5e7868da0a67c507a5f51020c/gcc%2Ftestsuite%2Flib%2Fc-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fc-torture.exp?ref=58e1e5ad9afab4d5e7868da0a67c507a5f51020c", "patch": "@@ -19,6 +19,8 @@\n \n # This file was written by Rob Savoye. (rob@cygnus.com)\n \n+load_lib file-format.exp\n+\n # The default option list can be overridden by\n # TORTURE_OPTIONS=\"{ { list1 } ... { listN } }\"\n "}, {"sha": "2d53faf5d0db60ca0ced0e5efa64ed24c0323070", "filename": "gcc/testsuite/lib/file-format.exp", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e1e5ad9afab4d5e7868da0a67c507a5f51020c/gcc%2Ftestsuite%2Flib%2Ffile-format.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e1e5ad9afab4d5e7868da0a67c507a5f51020c/gcc%2Ftestsuite%2Flib%2Ffile-format.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ffile-format.exp?ref=58e1e5ad9afab4d5e7868da0a67c507a5f51020c", "patch": "@@ -0,0 +1,73 @@\n+#   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+# Please email any bugs, comments, and/or additions to this file to:\n+# egcs-bugs@egcs.cygnus.com\n+\n+# This file defines a proc for determining the file format in use by the\n+# target.  This is useful for tests that are only supported by certain file\n+# formats.  This procedure is defined in a seperate file so that it can be\n+# included by other expect library files.\n+\n+proc gcc_target_object_format { } { \n+    global gcc_target_object_format_saved\n+\n+    if [info exists gcc_target_object_format_saved] {\n+        verbose \"gcc_target_object_format returning saved $gcc_target_object_format_saved\" 2\n+    } else {\n+        set objdump_name [find_binutils_prog objdump]\n+        set open_file [open objfmtst.c w]\n+        puts $open_file \"void foo(void) { }\"\n+        close $open_file\n+        \n+        gcc_target_compile objfmtst.c objfmtst.o object \"\"\n+        \n+        set output [exec $objdump_name --file-headers objfmtst.o ]\n+        \n+        file delete objfmtst.o\n+        \n+        if ![ regexp \"file format (.*)arch\" $output dummy objformat ]  {\n+            verbose \"Could not parse objdump output\" 2\n+            set gcc_target_object_format_saved unknown\n+        } else {\n+            switch -regexp $objformat {\n+                elf          {\n+                    set gcc_target_object_format_saved elf\n+                } \n+                ecoff        {\n+                    set gcc_target_object_format_saved ecoff\n+                }\n+                coff         {\n+                    set gcc_target_object_format_saved coff\n+                }\n+                a\\.out       {\n+                    set gcc_target_object_format_saved a.out\n+                }\n+                pe       {\n+                    set gcc_target_object_format_saved pe\n+                }\n+                default      {\n+                    verbose \"Unknown file format: $objformat\" 3\n+                    set gcc_target_object_format_saved unknown\n+                }\n+            }\n+\t    \n+            verbose \"gcc_target_object_format returning $gcc_target_object_format_saved\" 2\n+        }\n+    }\n+\n+    return $gcc_target_object_format_saved\n+}"}, {"sha": "a5741100ed89131c1c2a95b8287d3d6998de3c7d", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e1e5ad9afab4d5e7868da0a67c507a5f51020c/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e1e5ad9afab4d5e7868da0a67c507a5f51020c/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=58e1e5ad9afab4d5e7868da0a67c507a5f51020c", "patch": "@@ -1,4 +1,4 @@\n-#   Copyright (C) 1997 Free Software Foundation, Inc.\n+#   Copyright (C) 1997, 1999 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -20,6 +20,7 @@\n # Define gcc callbacks for dg.exp.\n \n load_lib dg.exp\n+load_lib file-format.exp\n \n proc gcc-dg-test { prog do_what extra_tool_flags } {\n     # Set up the compiler flags, based on what we're going to do."}]}