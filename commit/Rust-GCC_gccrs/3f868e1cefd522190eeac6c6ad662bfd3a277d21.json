{"sha": "3f868e1cefd522190eeac6c6ad662bfd3a277d21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y4NjhlMWNlZmQ1MjIxOTBlZWFjNmM2YWQ2NjJiZmQzYTI3N2QyMQ==", "commit": {"author": {"name": "Chao-ying Fu", "email": "fu@mips.com", "date": "2007-03-09T19:23:22Z"}, "committer": {"name": "Chao-ying Fu", "email": "chaoyingfu@gcc.gnu.org", "date": "2007-03-09T19:23:22Z"}, "message": "mips32-dspr2-type.c: New test.\n\n* gcc.target/mips/mips32-dspr2-type.c: New test.\n* gcc.target/mips/mips32-dspr2.c: New test.\n* gcc.target/mips/dspr2-MULT.c: New test.\n* gcc.target/mips/dspr2-MULTU.c: New test.\n* gcc.target/mips/mips32-dsp-run.c: New test to check execution.\n* gcc.target/mips/mips32-dsp.c: Change v4i8 typedef to use signed char.\nAdjust some formats.\n\nFrom-SVN: r122757", "tree": {"sha": "9e3a31ad11214e5cb5ebaf5d0a7be83b5dc5a923", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e3a31ad11214e5cb5ebaf5d0a7be83b5dc5a923"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f868e1cefd522190eeac6c6ad662bfd3a277d21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f868e1cefd522190eeac6c6ad662bfd3a277d21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f868e1cefd522190eeac6c6ad662bfd3a277d21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f868e1cefd522190eeac6c6ad662bfd3a277d21/comments", "author": null, "committer": null, "parents": [{"sha": "3204138527f49b0f828ad77a339fc5cf3d834cdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3204138527f49b0f828ad77a339fc5cf3d834cdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3204138527f49b0f828ad77a339fc5cf3d834cdb"}], "stats": {"total": 1804, "additions": 1705, "deletions": 99}, "files": [{"sha": "d3b6b98fd58780061d40896e3fb8a49d3b5f89a1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f868e1cefd522190eeac6c6ad662bfd3a277d21/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f868e1cefd522190eeac6c6ad662bfd3a277d21/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3f868e1cefd522190eeac6c6ad662bfd3a277d21", "patch": "@@ -1,3 +1,13 @@\n+2007-03-09  Chao-ying Fu  <fu@mips.com>\n+\n+\t* gcc.target/mips/mips32-dspr2-type.c: New test.\n+\t* gcc.target/mips/mips32-dspr2.c: New test.\n+\t* gcc.target/mips/dspr2-MULT.c: New test.\n+\t* gcc.target/mips/dspr2-MULTU.c: New test.\n+\t* gcc.target/mips/mips32-dsp-run.c: New test to check execution.\n+\t* gcc.target/mips/mips32-dsp.c: Change v4i8 typedef to use signed char.\n+\tAdjust some formats.\n+\n 2007-03-09  Dirk Mueller  <dmueller@suse.de>\n \n \tPR c++/17946"}, {"sha": "546e349a0f2c9ca507b5a131531aa885d4466dab", "filename": "gcc/testsuite/gcc.target/mips/dspr2-MULT.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f868e1cefd522190eeac6c6ad662bfd3a277d21/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdspr2-MULT.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f868e1cefd522190eeac6c6ad662bfd3a277d21/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdspr2-MULT.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdspr2-MULT.c?ref=3f868e1cefd522190eeac6c6ad662bfd3a277d21", "patch": "@@ -0,0 +1,21 @@\n+/* Test MIPS32 DSP REV 2 MULT instruction */\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-march=mips32r2 -mdspr2 -O2 -ffixed-hi -ffixed-lo\" } */\n+\n+/* { dg-final { scan-assembler \"\\tmult\\t\" } } */\n+/* { dg-final { scan-assembler \"ac1\" } } */\n+/* { dg-final { scan-assembler \"ac2\" } } */\n+/* { dg-final { scan-assembler \"ac3\" } } */\n+\n+typedef long long a64;\n+a64 a[4];\n+int b[4], c[4];\n+\n+void test ()\n+{\n+  a[0] = (a64) b[0] * c[0];\n+  a[1] = (a64) b[1] * c[1];\n+  a[2] = (a64) b[2] * c[2];\n+  a[3] = (a64) b[3] * c[3];\n+}\n+"}, {"sha": "3226151c89d4ed42171db900ba93db146fc52228", "filename": "gcc/testsuite/gcc.target/mips/dspr2-MULTU.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f868e1cefd522190eeac6c6ad662bfd3a277d21/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdspr2-MULTU.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f868e1cefd522190eeac6c6ad662bfd3a277d21/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdspr2-MULTU.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdspr2-MULTU.c?ref=3f868e1cefd522190eeac6c6ad662bfd3a277d21", "patch": "@@ -0,0 +1,21 @@\n+/* Test MIPS32 DSP REV 2 MULTU instruction */\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-march=mips32r2 -mdspr2 -O2 -ffixed-hi -ffixed-lo\" } */\n+\n+/* { dg-final { scan-assembler \"\\tmultu\\t\" } } */\n+/* { dg-final { scan-assembler \"ac1\" } } */\n+/* { dg-final { scan-assembler \"ac2\" } } */\n+/* { dg-final { scan-assembler \"ac3\" } } */\n+\n+typedef long long a64;\n+a64 a[4];\n+unsigned int b[4], c[4];\n+\n+void test ()\n+{\n+  a[0] = (a64) b[0] * c[0];\n+  a[1] = (a64) b[1] * c[1];\n+  a[2] = (a64) b[2] * c[2];\n+  a[3] = (a64) b[3] * c[3];\n+}\n+"}, {"sha": "a29d756e7911dfaed4a94bdae1d2a42d31760b7e", "filename": "gcc/testsuite/gcc.target/mips/mips32-dsp-run.c", "status": "added", "additions": 1001, "deletions": 0, "changes": 1001, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f868e1cefd522190eeac6c6ad662bfd3a277d21/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips32-dsp-run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f868e1cefd522190eeac6c6ad662bfd3a277d21/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips32-dsp-run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips32-dsp-run.c?ref=3f868e1cefd522190eeac6c6ad662bfd3a277d21", "patch": "@@ -0,0 +1,1001 @@\n+/* Test MIPS32 DSP instructions */\n+/* { dg-do run { target mipsisa32r2*-*-* } } */\n+/* { dg-mips-options \"-march=mips32r2 -mdsp -O2\" } */\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+typedef signed char v4i8 __attribute__ ((vector_size(4)));\n+typedef short v2q15 __attribute__ ((vector_size(4)));\n+\n+typedef int q31;\n+typedef int i32;\n+typedef long long a64;\n+\n+void test_MIPS_DSP (void);\n+\n+char array[100];\n+int little_endian;\n+\n+int main ()\n+{\n+  int i;\n+\n+  union { long long ll; int i[2]; } endianness_test;\n+  endianness_test.ll = 1;\n+  little_endian = endianness_test.i[0];\n+\n+  for (i = 0; i < 100; i++)\n+    array[i] = i;\n+\n+  test_MIPS_DSP ();\n+\n+  exit (0);\n+}\n+\n+v2q15 add_v2q15 (v2q15 a, v2q15 b)\n+{\n+  return __builtin_mips_addq_ph (a, b);\n+}\n+\n+v4i8 add_v4i8 (v4i8 a, v4i8 b)\n+{\n+  return __builtin_mips_addu_qb (a, b);\n+}\n+\n+v2q15 sub_v2q15 (v2q15 a, v2q15 b)\n+{\n+  return __builtin_mips_subq_ph (a, b);\n+}\n+\n+v4i8 sub_v4i8 (v4i8 a, v4i8 b)\n+{\n+  return __builtin_mips_subu_qb (a, b);\n+}\n+\n+void test_MIPS_DSP ()\n+{\n+  v4i8 v4i8_a,v4i8_b,v4i8_c,v4i8_r,v4i8_s;\n+  v2q15 v2q15_a,v2q15_b,v2q15_c,v2q15_r,v2q15_s;\n+  q31 q31_a,q31_b,q31_c,q31_r,q31_s;\n+  i32 i32_a,i32_b,i32_c,i32_r,i32_s;\n+  a64 a64_a,a64_b,a64_c,a64_r,a64_s;\n+\n+  void *ptr_a;\n+  int r,s;\n+  long long lr,ls;\n+\n+  v2q15_a = (v2q15) {0x1234, 0x5678};\n+  v2q15_b = (v2q15) {0x6f89, 0x1111};\n+  v2q15_s = (v2q15) {0x81bd, 0x6789};\n+  v2q15_r = add_v2q15 (v2q15_a, v2q15_b);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  v2q15_a = (v2q15) {0x1234, 0x5678};\n+  v2q15_b = (v2q15) {0x6f89, 0x1111};\n+  v2q15_s = (v2q15) {0x7fff, 0x6789};\n+  v2q15_r = __builtin_mips_addq_s_ph (v2q15_a, v2q15_b);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  q31_a = 0x70000000;\n+  q31_b = 0x71234567;\n+  q31_s = 0x7fffffff;\n+  q31_r = __builtin_mips_addq_s_w (q31_a, q31_b);\n+  if (q31_r != q31_s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0xf2, 0x34, 0x56, 0x78};\n+  v4i8_b = (v4i8) {0xff, 0x89, 0x11, 0x11};\n+  v4i8_s = (v4i8) {0xf1, 0xbd, 0x67, 0x89};\n+  v4i8_r = add_v4i8 (v4i8_a, v4i8_b);\n+  r = (int) v4i8_r;\n+  s = (int) v4i8_s;\n+  if (r != s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0xf2, 0x34, 0x56, 0x78};\n+  v4i8_b = (v4i8) {0xff, 0x89, 0x11, 0x11};\n+  v4i8_s = (v4i8) {0xff, 0xbd, 0x67, 0x89};\n+  v4i8_r = __builtin_mips_addu_s_qb (v4i8_a, v4i8_b);\n+  r = (int) v4i8_r;\n+  s = (int) v4i8_s;\n+  if (r != s)\n+    abort ();\n+\n+  v2q15_a = (v2q15) {0x1234, 0x5678};\n+  v2q15_b = (v2q15) {0x6f89, 0x1111};\n+  v2q15_s = (v2q15) {0xa2ab, 0x4567};\n+  v2q15_r = sub_v2q15 (v2q15_a, v2q15_b);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  v2q15_a = (v2q15) {0x8000, 0x5678};\n+  v2q15_b = (v2q15) {0x6f89, 0x1111};\n+  v2q15_s = (v2q15) {0x8000, 0x4567};\n+  v2q15_r = __builtin_mips_subq_s_ph (v2q15_a, v2q15_b);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  q31_a = 0x70000000;\n+  q31_b = 0x71234567;\n+  q31_s = 0xfedcba99;\n+  q31_r = __builtin_mips_subq_s_w (q31_a, q31_b);\n+  if (q31_r != q31_s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0xf2, 0x34, 0x56, 0x78};\n+  v4i8_b = (v4i8) {0xff, 0x89, 0x11, 0x11};\n+  v4i8_s = (v4i8) {0xf3, 0xab, 0x45, 0x67};\n+  v4i8_r = sub_v4i8 (v4i8_a, v4i8_b);\n+  r = (int) v4i8_r;\n+  s = (int) v4i8_s;\n+  if (r != s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0xf2, 0x34, 0x56, 0x78};\n+  v4i8_b = (v4i8) {0xff, 0x89, 0x11, 0x11};\n+  v4i8_s = (v4i8) {0x0, 0x0, 0x45, 0x67};\n+  v4i8_r = __builtin_mips_subu_s_qb (v4i8_a, v4i8_b);\n+  r = (int) v4i8_r;\n+  s = (int) v4i8_s;\n+  if (r != s)\n+    abort ();\n+\n+  i32_a = 0xf5678900;\n+  i32_b = 0x7abcdef0;\n+  i32_s = 0x702467f0;\n+  i32_r = __builtin_mips_addsc (i32_a, i32_b);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  i32_a = 0x75678900;\n+  i32_b = 0x7abcdef0;\n+  i32_s = 0xf02467f1;\n+  i32_r = __builtin_mips_addwc (i32_a, i32_b);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  i32_a = 0;\n+  i32_b = 0x00000901;\n+  i32_s = 9;\n+  i32_r = __builtin_mips_modsub (i32_a, i32_b);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0xf2, 0x34, 0x56, 0x78};\n+  i32_s = 0x1f4;\n+  i32_r = __builtin_mips_raddu_w_qb (v4i8_a);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  v2q15_a = (v2q15) {0x8000, 0x8134};\n+  v2q15_s = (v2q15) {0x7fff, 0x7ecc};\n+  v2q15_r = __builtin_mips_absq_s_ph (v2q15_a);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  q31_a = (q31) 0x80000000;\n+  q31_s = (q31) 0x7fffffff;\n+  q31_r = __builtin_mips_absq_s_w (q31_a);\n+  if (q31_r != q31_s)\n+    abort ();\n+\n+  v2q15_a = (v2q15) {0x9999, 0x5612};\n+  v2q15_b = (v2q15) {0x5612, 0x3333};\n+  if (little_endian)\n+    v4i8_s = (v4i8) {0x56, 0x33, 0x99, 0x56};\n+  else\n+    v4i8_s = (v4i8) {0x99, 0x56, 0x56, 0x33};\n+  v4i8_r = __builtin_mips_precrq_qb_ph (v2q15_a, v2q15_b);\n+  r = (int) v4i8_r;\n+  s = (int) v4i8_s;\n+  if (r != s)\n+    abort ();\n+\n+  q31_a = 0x12348678;\n+  q31_b = 0x44445555;\n+  if (little_endian)\n+    v2q15_s = (v2q15) {0x4444, 0x1234};\n+  else\n+    v2q15_s = (v2q15) {0x1234, 0x4444};\n+  v2q15_r = __builtin_mips_precrq_ph_w (q31_a, q31_b);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  q31_a = 0x12348678;\n+  q31_b = 0x44445555;\n+  if (little_endian)\n+    v2q15_s = (v2q15) {0x4444, 0x1235};\n+  else\n+    v2q15_s = (v2q15) {0x1235, 0x4444};\n+  v2q15_r = __builtin_mips_precrq_rs_ph_w (q31_a, q31_b);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  v2q15_a = (v2q15) {0x9999, 0x5612};\n+  v2q15_b = (v2q15) {0x5612, 0x3333};\n+  if (little_endian)\n+    v4i8_s = (v4i8) {0xac, 0x66, 0x00, 0xac};\n+  else\n+    v4i8_s = (v4i8) {0x00, 0xac, 0xac, 0x66};\n+  v4i8_r = __builtin_mips_precrqu_s_qb_ph (v2q15_a, v2q15_b);\n+  r = (int) v4i8_r;\n+  s = (int) v4i8_s;\n+  if (r != s)\n+    abort ();\n+\n+  v2q15_a = (v2q15) {0x3589, 0x4444};\n+  if (little_endian)\n+    q31_s = 0x44440000;\n+  else\n+    q31_s = 0x35890000;\n+  q31_r = __builtin_mips_preceq_w_phl (v2q15_a);\n+  if (q31_r != q31_s)\n+    abort ();\n+\n+  v2q15_a = (v2q15) {0x3589, 0x4444};\n+  if (little_endian)\n+    q31_s = 0x35890000;\n+  else\n+    q31_s = 0x44440000;\n+  q31_r = __builtin_mips_preceq_w_phr (v2q15_a);\n+  if (q31_r != q31_s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0x12, 0x56, 0x56, 0x33};\n+  if (little_endian)\n+    v2q15_s = (v2q15) {0x2b00, 0x1980};\n+  else\n+    v2q15_s = (v2q15) {0x0900, 0x2b00};\n+  v2q15_r = __builtin_mips_precequ_ph_qbl (v4i8_a);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0x12, 0x56, 0x56, 0x33};\n+  if (little_endian)\n+    v2q15_s = (v2q15) {0x0900, 0x2b00};\n+  else\n+    v2q15_s = (v2q15) {0x2b00, 0x1980};\n+  v2q15_r = __builtin_mips_precequ_ph_qbr (v4i8_a);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0x12, 0x56, 0x56, 0x33};\n+  if (little_endian)\n+    v2q15_s = (v2q15) {0x2b00, 0x1980};\n+  else\n+    v2q15_s = (v2q15) {0x0900, 0x2b00};\n+  v2q15_r = __builtin_mips_precequ_ph_qbla (v4i8_a);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0x12, 0x56, 0x56, 0x33};\n+  if (little_endian)\n+    v2q15_s = (v2q15) {0x0900, 0x2b00};\n+  else\n+    v2q15_s = (v2q15) {0x2b00, 0x1980};\n+  v2q15_r = __builtin_mips_precequ_ph_qbra (v4i8_a);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0x12, 0x56, 0x56, 0x33};\n+  if (little_endian)\n+    v2q15_s = (v2q15) {0x56, 0x33};\n+  else\n+    v2q15_s = (v2q15) {0x12, 0x56};\n+  v2q15_r = __builtin_mips_preceu_ph_qbl (v4i8_a);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0x12, 0x56, 0x56, 0x33};\n+  if (little_endian)\n+    v2q15_s = (v2q15) {0x12, 0x56};\n+  else\n+    v2q15_s = (v2q15) {0x56, 0x33};\n+  v2q15_r = __builtin_mips_preceu_ph_qbr (v4i8_a);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0x12, 0x99, 0x56, 0x33};\n+  if (little_endian)\n+    v2q15_s = (v2q15) {0x99, 0x33};\n+  else\n+    v2q15_s = (v2q15) {0x12, 0x56};\n+  v2q15_r = __builtin_mips_preceu_ph_qbla (v4i8_a);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0x12, 0x99, 0x56, 0x33};\n+  if (little_endian)\n+    v2q15_s = (v2q15) {0x12, 0x56};\n+  else\n+    v2q15_s = (v2q15) {0x99, 0x33};\n+  v2q15_r = __builtin_mips_preceu_ph_qbra (v4i8_a);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0xf2, 0x34, 0x56, 0x78};\n+  v4i8_s = (v4i8) {0xc8, 0xd0, 0x58, 0xe0};\n+  v4i8_r = __builtin_mips_shll_qb (v4i8_a, 2);\n+  r = (int) v4i8_r;\n+  s = (int) v4i8_s;\n+  if (r != s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0xf2, 0x34, 0x56, 0x78};\n+  i32_b = 1;\n+  v4i8_s = (v4i8) {0xe4, 0x68, 0xac, 0xf0};\n+  v4i8_r = __builtin_mips_shll_qb (v4i8_a, i32_b);\n+  r = (int) v4i8_r;\n+  s = (int) v4i8_s;\n+  if (r != s)\n+    abort ();\n+\n+  v2q15_a = (v2q15) {0x1234, 0x5678};\n+  v2q15_s = (v2q15) {0x48d0, 0x59e0};\n+  v2q15_r = __builtin_mips_shll_ph (v2q15_a, 2);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  v2q15_a = (v2q15) {0x1234, 0x5678};\n+  i32_b = 1;\n+  v2q15_s = (v2q15) {0x2468, 0xacf0};\n+  v2q15_r = __builtin_mips_shll_ph (v2q15_a, i32_b);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  v2q15_a = (v2q15) {0x1234, 0x5678};\n+  v2q15_s = (v2q15) {0x48d0, 0x7fff};\n+  v2q15_r = __builtin_mips_shll_s_ph (v2q15_a, 2);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  v2q15_a = (v2q15) {0x1234, 0x5678};\n+  i32_b = 1;\n+  v2q15_s = (v2q15) {0x2468, 0x7fff};\n+  v2q15_r = __builtin_mips_shll_s_ph (v2q15_a, i32_b);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  q31_a = 0x70000000;\n+  q31_s = 0x7fffffff;\n+  q31_r = __builtin_mips_shll_s_w (q31_a, 2);\n+  if (q31_r != q31_s)\n+    abort ();\n+\n+  q31_a = 0x70000000;\n+  i32_b = 1;\n+  q31_s = 0x7fffffff;\n+  q31_r = __builtin_mips_shll_s_w (q31_a, i32_b);\n+  if (q31_r != q31_s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0xf2, 0x34, 0x56, 0x78};\n+  v4i8_s = (v4i8) {0x3c, 0xd, 0x15, 0x1e};\n+  v4i8_r = __builtin_mips_shrl_qb (v4i8_a, 2);\n+  r = (int) v4i8_r;\n+  s = (int) v4i8_s;\n+  if (r != s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0xf2, 0x34, 0x56, 0x78};\n+  i32_b = 1;\n+  v4i8_s = (v4i8) {0x79, 0x1a, 0x2b, 0x3c};\n+  v4i8_r = __builtin_mips_shrl_qb (v4i8_a, i32_b);\n+  r = (int) v4i8_r;\n+  s = (int) v4i8_s;\n+  if (r != s)\n+    abort ();\n+\n+  v2q15_a = (v2q15) {0x1234, 0x5678};\n+  v2q15_s = (v2q15) {0x48d, 0x159e};\n+  v2q15_r = __builtin_mips_shra_ph (v2q15_a, 2);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  v2q15_a = (v2q15) {0x1234, 0x5678};\n+  i32_b = 1;\n+  v2q15_s = (v2q15) {0x91a, 0x2b3c};\n+  v2q15_r = __builtin_mips_shra_ph (v2q15_a, i32_b);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  v2q15_a = (v2q15) {0x1234, 0x5678};\n+  v2q15_s = (v2q15) {0x48d, 0x159e};\n+  v2q15_r = __builtin_mips_shra_r_ph (v2q15_a, 2);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  v2q15_a = (v2q15) {0x1234, 0x5678};\n+  i32_b = 3;\n+  v2q15_s = (v2q15) {0x247, 0xacf};\n+  v2q15_r = __builtin_mips_shra_r_ph (v2q15_a, i32_b);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  q31_a = 0x70000000;\n+  q31_s = 0x1c000000;\n+  q31_r = __builtin_mips_shra_r_w (q31_a, 2);\n+  if (q31_r != q31_s)\n+    abort ();\n+\n+  q31_a = 0x70000004;\n+  i32_b = 3;\n+  q31_s = 0x0e000001;\n+  q31_r = __builtin_mips_shra_r_w (q31_a, i32_b);\n+  if (q31_r != q31_s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0x1, 0x2, 0x3, 0x4};\n+  v2q15_b = (v2q15) {0x6f89, 0x1111};\n+  if (little_endian)\n+    v2q15_s = (v2q15) {0xffff, 0x4444};\n+  else\n+    v2q15_s = (v2q15) {0x6f89, 0x2222};\n+  v2q15_r = __builtin_mips_muleu_s_ph_qbl (v4i8_a, v2q15_b);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0x1, 0x2, 0x3, 0x4};\n+  v2q15_b = (v2q15) {0x6f89, 0x1111};\n+  if (little_endian)\n+    v2q15_s = (v2q15) {0x6f89, 0x2222};\n+  else\n+    v2q15_s = (v2q15) {0xffff, 0x4444};\n+  v2q15_r = __builtin_mips_muleu_s_ph_qbr (v4i8_a, v2q15_b);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  v2q15_a = (v2q15) {0x1234, 0x5678};\n+  v2q15_b = (v2q15) {0x6f89, 0x1111};\n+  v2q15_s = (v2q15) {0x0fdd, 0x0b87};\n+  v2q15_r = __builtin_mips_mulq_rs_ph (v2q15_a, v2q15_b);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  v2q15_a = (v2q15) {0x8000, 0x8000};\n+  v2q15_b = (v2q15) {0x8000, 0x8000};\n+  q31_s = 0x7fffffff;\n+  q31_r = __builtin_mips_muleq_s_w_phl (v2q15_a, v2q15_b);\n+  if (q31_r != q31_s)\n+    abort ();\n+\n+  v2q15_a = (v2q15) {0x8000, 0x8000};\n+  v2q15_b = (v2q15) {0x8000, 0x8000};\n+  q31_s = 0x7fffffff;\n+  q31_r = __builtin_mips_muleq_s_w_phr (v2q15_a, v2q15_b);\n+  if (q31_r != q31_s)\n+    abort ();\n+\n+#ifndef __mips64\n+  a64_a = 0x22221111;\n+  v4i8_b = (v4i8) {0x12, 0x34, 0x56, 0x78};\n+  v4i8_c = (v4i8) {0xaa, 0x89, 0x11, 0x34};\n+  if (little_endian)\n+    a64_s = 0x22222f27;\n+  else\n+    a64_s = 0x222238d9;\n+  a64_r = __builtin_mips_dpau_h_qbl (a64_a, v4i8_b, v4i8_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+\n+  a64_a = 0x22221111;\n+  v4i8_b = (v4i8) {0x12, 0x34, 0x56, 0x78};\n+  v4i8_c = (v4i8) {0xaa, 0x89, 0x11, 0x34};\n+  if (little_endian)\n+    a64_s = 0x222238d9;\n+  else\n+    a64_s = 0x22222f27;\n+  a64_r = __builtin_mips_dpau_h_qbr (a64_a, v4i8_b, v4i8_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+\n+  a64_a = 0x22221111;\n+  v4i8_b = (v4i8) {0x12, 0x34, 0x56, 0x78};\n+  v4i8_c = (v4i8) {0xaa, 0x89, 0x11, 0x34};\n+  if (little_endian)\n+    a64_s = 0x2221f2fb;\n+  else\n+    a64_s = 0x2221e949;\n+  a64_r = __builtin_mips_dpsu_h_qbl (a64_a, v4i8_b, v4i8_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+\n+  a64_a = 0x22221111;\n+  v4i8_b = (v4i8) {0x12, 0x34, 0x56, 0x78};\n+  v4i8_c = (v4i8) {0xaa, 0x89, 0x11, 0x34};\n+  if (little_endian)\n+    a64_s = 0x2221e949;\n+  else\n+    a64_s = 0x2221f2fb;\n+  a64_r = __builtin_mips_dpsu_h_qbr (a64_a, v4i8_b, v4i8_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+\n+  a64_a = 0x00001111;\n+  v2q15_b = (v2q15) {0x8000, 0x5678};\n+  v2q15_c = (v2q15) {0x8000, 0x1111};\n+  a64_s = 0x8b877d00;\n+  a64_r = __builtin_mips_dpaq_s_w_ph (a64_a, v2q15_b, v2q15_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+\n+  a64_a = 0x00001111;\n+  v2q15_b = (v2q15) {0x8000, 0x5678};\n+  v2q15_c = (v2q15) {0x8000, 0x1111};\n+  a64_s = 0xffffffff7478a522LL;\n+  a64_r = __builtin_mips_dpsq_s_w_ph (a64_a, v2q15_b, v2q15_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+\n+  a64_a = 0x00001111;\n+  v2q15_b = (v2q15) {0x8000, 0x5678};\n+  v2q15_c = (v2q15) {0x8000, 0x1111};\n+  if (little_endian)\n+    a64_s = 0xffffffff8b877d02LL;\n+  else\n+    a64_s = 0x7478a520;\n+  a64_r = __builtin_mips_mulsaq_s_w_ph (a64_a, v2q15_b, v2q15_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+\n+  a64_a = 0x00001111;\n+  q31_b = 0x80000000;\n+  q31_c = 0x80000000;\n+  a64_s = 0x7fffffffffffffffLL;\n+  a64_r = __builtin_mips_dpaq_sa_l_w (a64_a, q31_b, q31_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+\n+  a64_a = 0x00001111;\n+  q31_b = 0x80000000;\n+  q31_c = 0x80000000;\n+  a64_s = 0x8000000000001112LL;\n+  a64_r = __builtin_mips_dpsq_sa_l_w (a64_a, q31_b, q31_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+\n+  a64_a = 0x00001111;\n+  v2q15_b = (v2q15) {0x8000, 0x1};\n+  v2q15_c = (v2q15) {0x8000, 0x2};\n+  if (little_endian)\n+    a64_s = 0x1115;\n+  else\n+    a64_s = 0x80001110;\n+  a64_r = __builtin_mips_maq_s_w_phl (a64_a, v2q15_b, v2q15_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+\n+  a64_a = 0x00001111;\n+  v2q15_b = (v2q15) {0x8000, 0x1};\n+  v2q15_c = (v2q15) {0x8000, 0x2};\n+  if (little_endian)\n+    a64_s = 0x80001110;\n+  else\n+    a64_s = 0x1115;\n+  a64_r = __builtin_mips_maq_s_w_phr (a64_a, v2q15_b, v2q15_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+\n+  a64_a = 0x00001111;\n+  v2q15_b = (v2q15) {0x8000, 0x1};\n+  v2q15_c = (v2q15) {0x8000, 0x2};\n+  if (little_endian)\n+    a64_s = 0x1115;\n+  else\n+    a64_s = 0x7fffffff;\n+  a64_r = __builtin_mips_maq_sa_w_phl (a64_a, v2q15_b, v2q15_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+\n+  a64_a = 0x00001111;\n+  v2q15_b = (v2q15) {0x8000, 0x1};\n+  v2q15_c = (v2q15) {0x8000, 0x2};\n+  if (little_endian)\n+    a64_s = 0x7fffffff;\n+  else\n+    a64_s = 0x1115;\n+  a64_r = __builtin_mips_maq_sa_w_phr (a64_a, v2q15_b, v2q15_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n+\n+  i32_a = 0x12345678;\n+  i32_s = 0x00001e6a;\n+  i32_r = __builtin_mips_bitrev (i32_a);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  i32_a = 0x00000208; // pos is 8, size is 4\n+  __builtin_mips_wrdsp (i32_a, 31);\n+  i32_a = 0x12345678;\n+  i32_b = 0x87654321;\n+  i32_s = 0x12345178;\n+  i32_r = __builtin_mips_insv (i32_a, i32_b);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  v4i8_s = (v4i8) {1, 1, 1, 1};\n+  v4i8_r = __builtin_mips_repl_qb (1);\n+  r = (int) v4i8_r;\n+  s = (int) v4i8_s;\n+  if (r != s)\n+    abort ();\n+\n+  i32_a = 99;\n+  v4i8_s = (v4i8) {99, 99, 99, 99};\n+  v4i8_r = __builtin_mips_repl_qb (i32_a);\n+  r = (int) v4i8_r;\n+  s = (int) v4i8_s;\n+  if (r != s)\n+    abort ();\n+\n+  v2q15_s = (v2q15) {30, 30};\n+  v2q15_r = __builtin_mips_repl_ph (30);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  i32_a = 0x5612;\n+  v2q15_s = (v2q15) {0x5612, 0x5612};\n+  v2q15_r = __builtin_mips_repl_ph (i32_a);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0x12, 0x34, 0x56, 0x78};\n+  v4i8_b = (v4i8) {0x12, 0x34, 0x78, 0x56};\n+  if (little_endian)\n+    i32_s = 0x03000000;\n+  else\n+    i32_s = 0x0c000000;\n+  __builtin_mips_cmpu_eq_qb (v4i8_a, v4i8_b);\n+  i32_r = __builtin_mips_rddsp (16);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0x12, 0x34, 0x56, 0x78};\n+  v4i8_b = (v4i8) {0x12, 0x34, 0x78, 0x56};\n+  if (little_endian)\n+    i32_s = 0x04000000;\n+  else\n+    i32_s = 0x02000000;\n+  __builtin_mips_cmpu_lt_qb (v4i8_a, v4i8_b);\n+  i32_r = __builtin_mips_rddsp (16);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0x12, 0x34, 0x56, 0x78};\n+  v4i8_b = (v4i8) {0x12, 0x34, 0x78, 0x56};\n+  if (little_endian)\n+    i32_s = 0x07000000;\n+  else\n+    i32_s = 0x0e000000;\n+  __builtin_mips_cmpu_le_qb (v4i8_a, v4i8_b);\n+  i32_r = __builtin_mips_rddsp (16);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0x12, 0x34, 0x56, 0x78};\n+  v4i8_b = (v4i8) {0x12, 0x34, 0x78, 0x56};\n+  if (little_endian)\n+    i32_s = 0x3;\n+  else\n+    i32_s = 0xc;\n+  i32_r=__builtin_mips_cmpgu_eq_qb (v4i8_a, v4i8_b);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0x12, 0x34, 0x56, 0x78};\n+  v4i8_b = (v4i8) {0x12, 0x34, 0x78, 0x56};\n+  if (little_endian)\n+    i32_s = 0x4;\n+  else\n+    i32_s = 0x2;\n+  i32_r = __builtin_mips_cmpgu_lt_qb (v4i8_a, v4i8_b);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0x12, 0x34, 0x56, 0x78};\n+  v4i8_b = (v4i8) {0x12, 0x34, 0x78, 0x56};\n+  if (little_endian)\n+    i32_s = 0x7;\n+  else\n+    i32_s = 0xe;\n+  i32_r = __builtin_mips_cmpgu_le_qb (v4i8_a, v4i8_b);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  __builtin_mips_wrdsp (0,31); // Clear all condition code bits.\n+  v2q15_a = (v2q15) {0x1234, 0x5678};\n+  v2q15_b = (v2q15) {0x1234, 0x7856};\n+  if (little_endian)\n+    i32_s = 0x01000000;\n+  else\n+    i32_s = 0x02000000;\n+  __builtin_mips_cmp_eq_ph (v2q15_a, v2q15_b);\n+  i32_r = __builtin_mips_rddsp (16);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  v2q15_a = (v2q15) {0x1234, 0x5678};\n+  v2q15_b = (v2q15) {0x1234, 0x7856};\n+  if (little_endian)\n+    i32_s = 0x02000000;\n+  else\n+    i32_s = 0x01000000;\n+  __builtin_mips_cmp_lt_ph (v2q15_a, v2q15_b);\n+  i32_r = __builtin_mips_rddsp (16);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  v2q15_a = (v2q15) {0x1234, 0x5678};\n+  v2q15_b = (v2q15) {0x1234, 0x7856};\n+  i32_s = 0x03000000;\n+  __builtin_mips_cmp_le_ph (v2q15_a, v2q15_b);\n+  i32_r = __builtin_mips_rddsp (16);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  i32_a = 0x0a000000; // cc: 0000 1010\n+  __builtin_mips_wrdsp (i32_a, 31);\n+  v4i8_a = (v4i8) {0x12, 0x34, 0x56, 0x78};\n+  v4i8_b = (v4i8) {0x21, 0x43, 0x65, 0x87};\n+  if (little_endian)\n+    v4i8_s = (v4i8) {0x21, 0x34, 0x65, 0x78};\n+  else\n+    v4i8_s = (v4i8) {0x12, 0x43, 0x56, 0x87};\n+  v4i8_r = __builtin_mips_pick_qb (v4i8_a, v4i8_b);\n+  r = (int) v4i8_r;\n+  s = (int) v4i8_s;\n+  if (r != s)\n+    abort ();\n+\n+  i32_a = 0x02000000; // cc: 0000 0010\n+  __builtin_mips_wrdsp (i32_a, 31);\n+  v2q15_a = (v2q15) {0x1234, 0x5678};\n+  v2q15_b = (v2q15) {0x2143, 0x6587};\n+  if (little_endian)\n+    v2q15_s = (v2q15) {0x2143, 0x5678};\n+  else\n+    v2q15_s = (v2q15) {0x1234, 0x6587};\n+  v2q15_r = __builtin_mips_pick_ph (v2q15_a, v2q15_b);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  v2q15_a = (v2q15) {0x1234, 0x5678};\n+  v2q15_b = (v2q15) {0x1234, 0x7856};\n+  if (little_endian)\n+    v2q15_s = (v2q15) {0x7856, 0x1234};\n+  else\n+    v2q15_s = (v2q15) {0x5678, 0x1234};\n+  v2q15_r = __builtin_mips_packrl_ph (v2q15_a, v2q15_b);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+#ifndef __mips64\n+  a64_a = 0x1234567887654321LL;\n+  i32_s = 0x88765432;\n+  i32_r = __builtin_mips_extr_w (a64_a, 4);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  a64_a = 0x1234567887658321LL;\n+  i32_s = 0x56788766;\n+  i32_r = __builtin_mips_extr_r_w (a64_a, 16);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  a64_a = 0x12345677fffffff8LL;\n+  i32_s = 0x7fffffff;\n+  i32_r = __builtin_mips_extr_rs_w (a64_a, 4);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  a64_a = 0x1234567887658321LL;\n+  i32_s = 0x7fff;\n+  i32_r = __builtin_mips_extr_s_h (a64_a, 16);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  a64_a = 0x0000007887658321LL;\n+  i32_b = 24;\n+  i32_s = 0x7887;\n+  i32_r = __builtin_mips_extr_s_h (a64_a, i32_b);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  a64_a = 0x1234567887654321LL;\n+  i32_b = 4;\n+  i32_s = 0x88765432;\n+  i32_r = __builtin_mips_extr_w (a64_a, i32_b);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  a64_a = 0x1234567887658321LL;\n+  i32_b = 16;\n+  i32_s = 0x56788766;\n+  i32_r = __builtin_mips_extr_r_w (a64_a, i32_b);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  a64_a = 0x12345677fffffff8LL;\n+  i32_b = 4;\n+  i32_s = 0x7fffffff;\n+  i32_r = __builtin_mips_extr_rs_w (a64_a, i32_b);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  i32_a = 0x0000021f; // pos is 31\n+  __builtin_mips_wrdsp (i32_a, 31);\n+  a64_a = 0x1234567887654321LL;\n+  i32_s = 8;\n+  i32_r = __builtin_mips_extp (a64_a, 3); // extract 4 bits\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  i32_a = 0x0000021f; // pos is 31\n+  __builtin_mips_wrdsp (i32_a, 31);\n+  a64_a = 0x1234567887654321LL;\n+  i32_b = 7; // size is 8. NOTE!! we should use 7\n+  i32_s = 0x87;\n+  i32_r = __builtin_mips_extp (a64_a, i32_b);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  i32_a = 0x0000021f; // pos is 31\n+  __builtin_mips_wrdsp (i32_a, 31);\n+  a64_a = 0x1234567887654321LL;\n+  i32_s = 8;\n+  i32_r = __builtin_mips_extpdp (a64_a, 3); // extract 4 bits\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  i32_s = 0x0000021b; // pos is 27\n+  i32_r = __builtin_mips_rddsp (31);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  i32_a = 0x0000021f; // pos is 31\n+  __builtin_mips_wrdsp (i32_a, 31);\n+  a64_a = 0x1234567887654321LL;\n+  i32_b = 11; // size is 12. NOTE!!! We should use 11\n+  i32_s = 0x876;\n+  i32_r = __builtin_mips_extpdp (a64_a, i32_b);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  i32_s = 0x00000213; // pos is 19\n+  i32_r = __builtin_mips_rddsp (31);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  a64_a = 0x1234567887654321LL;\n+  a64_s = 0x0012345678876543LL;\n+  a64_r = __builtin_mips_shilo (a64_a, 8);\n+  if (a64_r != a64_s)\n+    abort ();\n+\n+  a64_a = 0x1234567887654321LL;\n+  i32_b = -16;\n+  a64_s = 0x5678876543210000LL;\n+  a64_r = __builtin_mips_shilo (a64_a, i32_b);\n+  if (a64_r != a64_s)\n+    abort ();\n+\n+  i32_a = 0x0;\n+  __builtin_mips_wrdsp (i32_a, 31);\n+  a64_a = 0x1234567887654321LL;\n+  i32_b = 0x11112222;\n+  a64_s = 0x8765432111112222LL;\n+  a64_r = __builtin_mips_mthlip (a64_a, i32_b);\n+  if (a64_r != a64_s)\n+    abort ();\n+  i32_s = 32;\n+  i32_r = __builtin_mips_rddsp (31);\n+  if (i32_r != i32_s)\n+    abort ();\n+#endif\n+\n+  i32_a = 0x1357a468;\n+  __builtin_mips_wrdsp (i32_a, 63);\n+  i32_s = 0x03572428;\n+  i32_r = __builtin_mips_rddsp (63);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  ptr_a = &array;\n+  i32_b = 37;\n+  i32_s = 37;\n+  i32_r = __builtin_mips_lbux (ptr_a, i32_b);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  ptr_a = &array;\n+  i32_b = 38;\n+  if (little_endian)\n+    i32_s = 0x2726;\n+  else\n+    i32_s = 0x2627;\n+  i32_r = __builtin_mips_lhx (ptr_a, i32_b);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  ptr_a = &array;\n+  i32_b = 40;\n+  if (little_endian)\n+    i32_s = 0x2b2a2928;\n+  else\n+    i32_s = 0x28292a2b;\n+  i32_r = __builtin_mips_lwx (ptr_a, i32_b);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  i32_a = 0x00000220; // pos is 32, size is 4\n+  __builtin_mips_wrdsp (i32_a, 63);\n+  i32_s = 1;\n+  i32_r = __builtin_mips_bposge32 ();\n+  if (i32_r != i32_s)\n+    abort ();\n+}\n+"}, {"sha": "c65f7b92602e798e16f4c2ffaf2abb81f207d621", "filename": "gcc/testsuite/gcc.target/mips/mips32-dsp.c", "status": "modified", "additions": 99, "deletions": 99, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f868e1cefd522190eeac6c6ad662bfd3a277d21/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips32-dsp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f868e1cefd522190eeac6c6ad662bfd3a277d21/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips32-dsp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips32-dsp.c?ref=3f868e1cefd522190eeac6c6ad662bfd3a277d21", "patch": "@@ -96,19 +96,19 @@\n #include <stdlib.h>\n #include <stdio.h>\n \n-typedef char v4i8 __attribute__ ((vector_size(4)));\n+typedef signed char v4i8 __attribute__ ((vector_size(4)));\n typedef short v2q15 __attribute__ ((vector_size(4)));\n \n typedef int q31;\n typedef int i32;\n typedef long long a64;\n \n-void test_MIPS_DSP();\n+void test_MIPS_DSP (void);\n \n char array[100];\n int little_endian;\n \n-int main()\n+int main ()\n {\n   int i;\n \n@@ -119,7 +119,7 @@ int main()\n   for (i = 0; i < 100; i++)\n     array[i] = i;\n \n-  test_MIPS_DSP();\n+  test_MIPS_DSP ();\n \n   exit (0);\n }\n@@ -144,7 +144,7 @@ v4i8 sub_v4i8 (v4i8 a, v4i8 b)\n   return __builtin_mips_subu_qb (a, b);\n }\n \n-void test_MIPS_DSP()\n+void test_MIPS_DSP ()\n {\n   v4i8 v4i8_a,v4i8_b,v4i8_c,v4i8_r,v4i8_s;\n   v2q15 v2q15_a,v2q15_b,v2q15_c,v2q15_r,v2q15_s;\n@@ -162,7 +162,7 @@ void test_MIPS_DSP()\n   v2q15_r = add_v2q15 (v2q15_a, v2q15_b);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v2q15_a = (v2q15) {0x1234, 0x5678};\n@@ -171,14 +171,14 @@ void test_MIPS_DSP()\n   v2q15_r = __builtin_mips_addq_s_ph (v2q15_a, v2q15_b);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   q31_a = 0x70000000;\n   q31_b = 0x71234567;\n   q31_s = 0x7fffffff;\n   q31_r = __builtin_mips_addq_s_w (q31_a, q31_b);\n-  if(q31_r != q31_s)\n+  if (q31_r != q31_s)\n     abort ();\n \n   v4i8_a = (v4i8) {0xf2, 0x34, 0x56, 0x78};\n@@ -187,7 +187,7 @@ void test_MIPS_DSP()\n   v4i8_r = add_v4i8 (v4i8_a, v4i8_b);\n   r = (int) v4i8_r;\n   s = (int) v4i8_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v4i8_a = (v4i8) {0xf2, 0x34, 0x56, 0x78};\n@@ -196,7 +196,7 @@ void test_MIPS_DSP()\n   v4i8_r = __builtin_mips_addu_s_qb (v4i8_a, v4i8_b);\n   r = (int) v4i8_r;\n   s = (int) v4i8_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v2q15_a = (v2q15) {0x1234, 0x5678};\n@@ -205,7 +205,7 @@ void test_MIPS_DSP()\n   v2q15_r = sub_v2q15 (v2q15_a, v2q15_b);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v2q15_a = (v2q15) {0x8000, 0x5678};\n@@ -214,14 +214,14 @@ void test_MIPS_DSP()\n   v2q15_r = __builtin_mips_subq_s_ph (v2q15_a, v2q15_b);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   q31_a = 0x70000000;\n   q31_b = 0x71234567;\n   q31_s = 0xfedcba99;\n   q31_r = __builtin_mips_subq_s_w (q31_a, q31_b);\n-  if(q31_r != q31_s)\n+  if (q31_r != q31_s)\n     abort ();\n \n   v4i8_a = (v4i8) {0xf2, 0x34, 0x56, 0x78};\n@@ -230,7 +230,7 @@ void test_MIPS_DSP()\n   v4i8_r = sub_v4i8 (v4i8_a, v4i8_b);\n   r = (int) v4i8_r;\n   s = (int) v4i8_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v4i8_a = (v4i8) {0xf2, 0x34, 0x56, 0x78};\n@@ -239,48 +239,48 @@ void test_MIPS_DSP()\n   v4i8_r = __builtin_mips_subu_s_qb (v4i8_a, v4i8_b);\n   r = (int) v4i8_r;\n   s = (int) v4i8_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   i32_a = 0xf5678900;\n   i32_b = 0x7abcdef0;\n   i32_s = 0x702467f0;\n   i32_r = __builtin_mips_addsc (i32_a, i32_b);\n-  if(i32_r != i32_s)\n+  if (i32_r != i32_s)\n     abort ();\n \n   i32_a = 0x75678900;\n   i32_b = 0x7abcdef0;\n   i32_s = 0xf02467f1;\n   i32_r = __builtin_mips_addwc (i32_a, i32_b);\n-  if(i32_r != i32_s)\n+  if (i32_r != i32_s)\n     abort ();\n \n   i32_a = 0;\n   i32_b = 0x00000901;\n   i32_s = 9;\n   i32_r = __builtin_mips_modsub (i32_a, i32_b);\n-  if(i32_r != i32_s)\n+  if (i32_r != i32_s)\n     abort ();\n \n   v4i8_a = (v4i8) {0xf2, 0x34, 0x56, 0x78};\n   i32_s = 0x1f4;\n   i32_r = __builtin_mips_raddu_w_qb (v4i8_a);\n-  if(i32_r != i32_s)\n+  if (i32_r != i32_s)\n     abort ();\n \n   v2q15_a = (v2q15) {0x8000, 0x8134};\n   v2q15_s = (v2q15) {0x7fff, 0x7ecc};\n   v2q15_r = __builtin_mips_absq_s_ph (v2q15_a);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   q31_a = (q31) 0x80000000;\n   q31_s = (q31) 0x7fffffff;\n   q31_r = __builtin_mips_absq_s_w (q31_a);\n-  if(q31_r != q31_s)\n+  if (q31_r != q31_s)\n     abort ();\n \n   v2q15_a = (v2q15) {0x9999, 0x5612};\n@@ -292,7 +292,7 @@ void test_MIPS_DSP()\n   v4i8_r = __builtin_mips_precrq_qb_ph (v2q15_a, v2q15_b);\n   r = (int) v4i8_r;\n   s = (int) v4i8_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   q31_a = 0x12348678;\n@@ -304,7 +304,7 @@ void test_MIPS_DSP()\n   v2q15_r = __builtin_mips_precrq_ph_w (q31_a, q31_b);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   q31_a = 0x12348678;\n@@ -316,7 +316,7 @@ void test_MIPS_DSP()\n   v2q15_r = __builtin_mips_precrq_rs_ph_w (q31_a, q31_b);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v2q15_a = (v2q15) {0x9999, 0x5612};\n@@ -328,7 +328,7 @@ void test_MIPS_DSP()\n   v4i8_r = __builtin_mips_precrqu_s_qb_ph (v2q15_a, v2q15_b);\n   r = (int) v4i8_r;\n   s = (int) v4i8_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v2q15_a = (v2q15) {0x3589, 0x4444};\n@@ -337,7 +337,7 @@ void test_MIPS_DSP()\n   else\n     q31_s = 0x35890000;\n   q31_r = __builtin_mips_preceq_w_phl (v2q15_a);\n-  if(q31_r != q31_s)\n+  if (q31_r != q31_s)\n     abort ();\n \n   v2q15_a = (v2q15) {0x3589, 0x4444};\n@@ -346,7 +346,7 @@ void test_MIPS_DSP()\n   else\n     q31_s = 0x44440000;\n   q31_r = __builtin_mips_preceq_w_phr (v2q15_a);\n-  if(q31_r != q31_s)\n+  if (q31_r != q31_s)\n     abort ();\n \n   v4i8_a = (v4i8) {0x12, 0x56, 0x56, 0x33};\n@@ -357,7 +357,7 @@ void test_MIPS_DSP()\n   v2q15_r = __builtin_mips_precequ_ph_qbl (v4i8_a);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v4i8_a = (v4i8) {0x12, 0x56, 0x56, 0x33};\n@@ -368,7 +368,7 @@ void test_MIPS_DSP()\n   v2q15_r = __builtin_mips_precequ_ph_qbr (v4i8_a);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v4i8_a = (v4i8) {0x12, 0x56, 0x56, 0x33};\n@@ -379,7 +379,7 @@ void test_MIPS_DSP()\n   v2q15_r = __builtin_mips_precequ_ph_qbla (v4i8_a);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v4i8_a = (v4i8) {0x12, 0x56, 0x56, 0x33};\n@@ -390,7 +390,7 @@ void test_MIPS_DSP()\n   v2q15_r = __builtin_mips_precequ_ph_qbra (v4i8_a);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v4i8_a = (v4i8) {0x12, 0x56, 0x56, 0x33};\n@@ -401,7 +401,7 @@ void test_MIPS_DSP()\n   v2q15_r = __builtin_mips_preceu_ph_qbl (v4i8_a);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v4i8_a = (v4i8) {0x12, 0x56, 0x56, 0x33};\n@@ -412,7 +412,7 @@ void test_MIPS_DSP()\n   v2q15_r = __builtin_mips_preceu_ph_qbr (v4i8_a);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v4i8_a = (v4i8) {0x12, 0x99, 0x56, 0x33};\n@@ -423,7 +423,7 @@ void test_MIPS_DSP()\n   v2q15_r = __builtin_mips_preceu_ph_qbla (v4i8_a);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v4i8_a = (v4i8) {0x12, 0x99, 0x56, 0x33};\n@@ -434,15 +434,15 @@ void test_MIPS_DSP()\n   v2q15_r = __builtin_mips_preceu_ph_qbra (v4i8_a);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v4i8_a = (v4i8) {0xf2, 0x34, 0x56, 0x78};\n   v4i8_s = (v4i8) {0xc8, 0xd0, 0x58, 0xe0};\n   v4i8_r = __builtin_mips_shll_qb (v4i8_a, 2);\n   r = (int) v4i8_r;\n   s = (int) v4i8_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v4i8_a = (v4i8) {0xf2, 0x34, 0x56, 0x78};\n@@ -451,15 +451,15 @@ void test_MIPS_DSP()\n   v4i8_r = __builtin_mips_shll_qb (v4i8_a, i32_b);\n   r = (int) v4i8_r;\n   s = (int) v4i8_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v2q15_a = (v2q15) {0x1234, 0x5678};\n   v2q15_s = (v2q15) {0x48d0, 0x59e0};\n   v2q15_r = __builtin_mips_shll_ph (v2q15_a, 2);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v2q15_a = (v2q15) {0x1234, 0x5678};\n@@ -468,15 +468,15 @@ void test_MIPS_DSP()\n   v2q15_r = __builtin_mips_shll_ph (v2q15_a, i32_b);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v2q15_a = (v2q15) {0x1234, 0x5678};\n   v2q15_s = (v2q15) {0x48d0, 0x7fff};\n   v2q15_r = __builtin_mips_shll_s_ph (v2q15_a, 2);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v2q15_a = (v2q15) {0x1234, 0x5678};\n@@ -485,28 +485,28 @@ void test_MIPS_DSP()\n   v2q15_r = __builtin_mips_shll_s_ph (v2q15_a, i32_b);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   q31_a = 0x70000000;\n   q31_s = 0x7fffffff;\n   q31_r = __builtin_mips_shll_s_w (q31_a, 2);\n-  if(q31_r != q31_s)\n+  if (q31_r != q31_s)\n     abort ();\n \n   q31_a = 0x70000000;\n   i32_b = 1;\n   q31_s = 0x7fffffff;\n   q31_r = __builtin_mips_shll_s_w (q31_a, i32_b);\n-  if(q31_r != q31_s)\n+  if (q31_r != q31_s)\n     abort ();\n \n   v4i8_a = (v4i8) {0xf2, 0x34, 0x56, 0x78};\n   v4i8_s = (v4i8) {0x3c, 0xd, 0x15, 0x1e};\n   v4i8_r = __builtin_mips_shrl_qb (v4i8_a, 2);\n   r = (int) v4i8_r;\n   s = (int) v4i8_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v4i8_a = (v4i8) {0xf2, 0x34, 0x56, 0x78};\n@@ -515,15 +515,15 @@ void test_MIPS_DSP()\n   v4i8_r = __builtin_mips_shrl_qb (v4i8_a, i32_b);\n   r = (int) v4i8_r;\n   s = (int) v4i8_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v2q15_a = (v2q15) {0x1234, 0x5678};\n   v2q15_s = (v2q15) {0x48d, 0x159e};\n   v2q15_r = __builtin_mips_shra_ph (v2q15_a, 2);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v2q15_a = (v2q15) {0x1234, 0x5678};\n@@ -532,15 +532,15 @@ void test_MIPS_DSP()\n   v2q15_r = __builtin_mips_shra_ph (v2q15_a, i32_b);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v2q15_a = (v2q15) {0x1234, 0x5678};\n   v2q15_s = (v2q15) {0x48d, 0x159e};\n   v2q15_r = __builtin_mips_shra_r_ph (v2q15_a, 2);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v2q15_a = (v2q15) {0x1234, 0x5678};\n@@ -549,20 +549,20 @@ void test_MIPS_DSP()\n   v2q15_r = __builtin_mips_shra_r_ph (v2q15_a, i32_b);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   q31_a = 0x70000000;\n   q31_s = 0x1c000000;\n   q31_r = __builtin_mips_shra_r_w (q31_a, 2);\n-  if(q31_r != q31_s)\n+  if (q31_r != q31_s)\n     abort ();\n \n   q31_a = 0x70000004;\n   i32_b = 3;\n   q31_s = 0x0e000001;\n   q31_r = __builtin_mips_shra_r_w (q31_a, i32_b);\n-  if(q31_r != q31_s)\n+  if (q31_r != q31_s)\n     abort ();\n \n   v4i8_a = (v4i8) {0x1, 0x2, 0x3, 0x4};\n@@ -574,7 +574,7 @@ void test_MIPS_DSP()\n   v2q15_r = __builtin_mips_muleu_s_ph_qbl (v4i8_a, v2q15_b);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v4i8_a = (v4i8) {0x1, 0x2, 0x3, 0x4};\n@@ -586,7 +586,7 @@ void test_MIPS_DSP()\n   v2q15_r = __builtin_mips_muleu_s_ph_qbr (v4i8_a, v2q15_b);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v2q15_a = (v2q15) {0x1234, 0x5678};\n@@ -595,21 +595,21 @@ void test_MIPS_DSP()\n   v2q15_r = __builtin_mips_mulq_rs_ph (v2q15_a, v2q15_b);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v2q15_a = (v2q15) {0x8000, 0x8000};\n   v2q15_b = (v2q15) {0x8000, 0x8000};\n   q31_s = 0x7fffffff;\n   q31_r = __builtin_mips_muleq_s_w_phl (v2q15_a, v2q15_b);\n-  if(q31_r != q31_s)\n+  if (q31_r != q31_s)\n     abort ();\n \n   v2q15_a = (v2q15) {0x8000, 0x8000};\n   v2q15_b = (v2q15) {0x8000, 0x8000};\n   q31_s = 0x7fffffff;\n   q31_r = __builtin_mips_muleq_s_w_phr (v2q15_a, v2q15_b);\n-  if(q31_r != q31_s)\n+  if (q31_r != q31_s)\n     abort ();\n \n #ifndef __mips64\n@@ -621,7 +621,7 @@ void test_MIPS_DSP()\n   else\n     a64_s = 0x222238d9;\n   a64_r = __builtin_mips_dpau_h_qbl (a64_a, v4i8_b, v4i8_c);\n-  if(a64_r != a64_s)\n+  if (a64_r != a64_s)\n     abort ();\n \n   a64_a = 0x22221111;\n@@ -632,7 +632,7 @@ void test_MIPS_DSP()\n   else\n     a64_s = 0x22222f27;\n   a64_r = __builtin_mips_dpau_h_qbr (a64_a, v4i8_b, v4i8_c);\n-  if(a64_r != a64_s)\n+  if (a64_r != a64_s)\n     abort ();\n \n   a64_a = 0x22221111;\n@@ -643,7 +643,7 @@ void test_MIPS_DSP()\n   else\n     a64_s = 0x2221e949;\n   a64_r = __builtin_mips_dpsu_h_qbl (a64_a, v4i8_b, v4i8_c);\n-  if(a64_r != a64_s)\n+  if (a64_r != a64_s)\n     abort ();\n \n   a64_a = 0x22221111;\n@@ -654,23 +654,23 @@ void test_MIPS_DSP()\n   else\n     a64_s = 0x2221f2fb;\n   a64_r = __builtin_mips_dpsu_h_qbr (a64_a, v4i8_b, v4i8_c);\n-  if(a64_r != a64_s)\n+  if (a64_r != a64_s)\n     abort ();\n \n   a64_a = 0x00001111;\n   v2q15_b = (v2q15) {0x8000, 0x5678};\n   v2q15_c = (v2q15) {0x8000, 0x1111};\n   a64_s = 0x8b877d00;\n   a64_r = __builtin_mips_dpaq_s_w_ph (a64_a, v2q15_b, v2q15_c);\n-  if(a64_r != a64_s)\n+  if (a64_r != a64_s)\n     abort ();\n \n   a64_a = 0x00001111;\n   v2q15_b = (v2q15) {0x8000, 0x5678};\n   v2q15_c = (v2q15) {0x8000, 0x1111};\n   a64_s = 0xffffffff7478a522LL;\n   a64_r = __builtin_mips_dpsq_s_w_ph (a64_a, v2q15_b, v2q15_c);\n-  if(a64_r != a64_s)\n+  if (a64_r != a64_s)\n     abort ();\n \n   a64_a = 0x00001111;\n@@ -681,23 +681,23 @@ void test_MIPS_DSP()\n   else\n     a64_s = 0x7478a520;\n   a64_r = __builtin_mips_mulsaq_s_w_ph (a64_a, v2q15_b, v2q15_c);\n-  if(a64_r != a64_s)\n+  if (a64_r != a64_s)\n     abort ();\n \n   a64_a = 0x00001111;\n   q31_b = 0x80000000;\n   q31_c = 0x80000000;\n   a64_s = 0x7fffffffffffffffLL;\n   a64_r = __builtin_mips_dpaq_sa_l_w (a64_a, q31_b, q31_c);\n-  if(a64_r != a64_s)\n+  if (a64_r != a64_s)\n     abort ();\n \n   a64_a = 0x00001111;\n   q31_b = 0x80000000;\n   q31_c = 0x80000000;\n   a64_s = 0x8000000000001112LL;\n   a64_r = __builtin_mips_dpsq_sa_l_w (a64_a, q31_b, q31_c);\n-  if(a64_r != a64_s)\n+  if (a64_r != a64_s)\n     abort ();\n \n   a64_a = 0x00001111;\n@@ -708,7 +708,7 @@ void test_MIPS_DSP()\n   else\n     a64_s = 0x80001110;\n   a64_r = __builtin_mips_maq_s_w_phl (a64_a, v2q15_b, v2q15_c);\n-  if(a64_r != a64_s)\n+  if (a64_r != a64_s)\n     abort ();\n \n   a64_a = 0x00001111;\n@@ -719,7 +719,7 @@ void test_MIPS_DSP()\n   else\n     a64_s = 0x1115;\n   a64_r = __builtin_mips_maq_s_w_phr (a64_a, v2q15_b, v2q15_c);\n-  if(a64_r != a64_s)\n+  if (a64_r != a64_s)\n     abort ();\n \n   a64_a = 0x00001111;\n@@ -730,7 +730,7 @@ void test_MIPS_DSP()\n   else\n     a64_s = 0x7fffffff;\n   a64_r = __builtin_mips_maq_sa_w_phl (a64_a, v2q15_b, v2q15_c);\n-  if(a64_r != a64_s)\n+  if (a64_r != a64_s)\n     abort ();\n \n   a64_a = 0x00001111;\n@@ -741,14 +741,14 @@ void test_MIPS_DSP()\n   else\n     a64_s = 0x1115;\n   a64_r = __builtin_mips_maq_sa_w_phr (a64_a, v2q15_b, v2q15_c);\n-  if(a64_r != a64_s)\n+  if (a64_r != a64_s)\n     abort ();\n #endif\n \n   i32_a = 0x12345678;\n   i32_s = 0x00001e6a;\n   i32_r = __builtin_mips_bitrev (i32_a);\n-  if(i32_r != i32_s)\n+  if (i32_r != i32_s)\n     abort ();\n \n   i32_a = 0x00000208; // pos is 8, size is 4\n@@ -757,37 +757,37 @@ void test_MIPS_DSP()\n   i32_b = 0x87654321;\n   i32_s = 0x12345178;\n   i32_r = __builtin_mips_insv (i32_a, i32_b);\n-  if(i32_r != i32_s)\n+  if (i32_r != i32_s)\n     abort ();\n \n   v4i8_s = (v4i8) {1, 1, 1, 1};\n   v4i8_r = __builtin_mips_repl_qb (1);\n   r = (int) v4i8_r;\n   s = (int) v4i8_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   i32_a = 99;\n   v4i8_s = (v4i8) {99, 99, 99, 99};\n   v4i8_r = __builtin_mips_repl_qb (i32_a);\n   r = (int) v4i8_r;\n   s = (int) v4i8_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v2q15_s = (v2q15) {30, 30};\n   v2q15_r = __builtin_mips_repl_ph (30);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   i32_a = 0x5612;\n   v2q15_s = (v2q15) {0x5612, 0x5612};\n   v2q15_r = __builtin_mips_repl_ph (i32_a);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v4i8_a = (v4i8) {0x12, 0x34, 0x56, 0x78};\n@@ -895,7 +895,7 @@ void test_MIPS_DSP()\n   v4i8_r = __builtin_mips_pick_qb (v4i8_a, v4i8_b);\n   r = (int) v4i8_r;\n   s = (int) v4i8_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   i32_a = 0x02000000; // cc: 0000 0010\n@@ -909,7 +909,7 @@ void test_MIPS_DSP()\n   v2q15_r = __builtin_mips_pick_ph (v2q15_a, v2q15_b);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n   v2q15_a = (v2q15) {0x1234, 0x5678};\n@@ -921,68 +921,68 @@ void test_MIPS_DSP()\n   v2q15_r = __builtin_mips_packrl_ph (v2q15_a, v2q15_b);\n   r = (int) v2q15_r;\n   s = (int) v2q15_s;\n-  if(r != s)\n+  if (r != s)\n     abort ();\n \n #ifndef __mips64\n   a64_a = 0x1234567887654321LL;\n   i32_s = 0x88765432;\n   i32_r = __builtin_mips_extr_w (a64_a, 4);\n-  if(i32_r != i32_s)\n+  if (i32_r != i32_s)\n     abort ();\n \n   a64_a = 0x1234567887658321LL;\n   i32_s = 0x56788766;\n   i32_r = __builtin_mips_extr_r_w (a64_a, 16);\n-  if(i32_r != i32_s)\n+  if (i32_r != i32_s)\n     abort ();\n \n   a64_a = 0x12345677fffffff8LL;\n   i32_s = 0x7fffffff;\n   i32_r = __builtin_mips_extr_rs_w (a64_a, 4);\n-  if(i32_r != i32_s)\n+  if (i32_r != i32_s)\n     abort ();\n \n   a64_a = 0x1234567887658321LL;\n   i32_s = 0x7fff;\n   i32_r = __builtin_mips_extr_s_h (a64_a, 16);\n-  if(i32_r != i32_s)\n+  if (i32_r != i32_s)\n     abort ();\n \n   a64_a = 0x0000007887658321LL;\n   i32_b = 24;\n   i32_s = 0x7887;\n   i32_r = __builtin_mips_extr_s_h (a64_a, i32_b);\n-  if(i32_r != i32_s)\n+  if (i32_r != i32_s)\n     abort ();\n \n   a64_a = 0x1234567887654321LL;\n   i32_b = 4;\n   i32_s = 0x88765432;\n   i32_r = __builtin_mips_extr_w (a64_a, i32_b);\n-  if(i32_r != i32_s)\n+  if (i32_r != i32_s)\n     abort ();\n \n   a64_a = 0x1234567887658321LL;\n   i32_b = 16;\n   i32_s = 0x56788766;\n   i32_r = __builtin_mips_extr_r_w (a64_a, i32_b);\n-  if(i32_r != i32_s)\n+  if (i32_r != i32_s)\n     abort ();\n \n   a64_a = 0x12345677fffffff8LL;\n   i32_b = 4;\n   i32_s = 0x7fffffff;\n   i32_r = __builtin_mips_extr_rs_w (a64_a, i32_b);\n-  if(i32_r != i32_s)\n+  if (i32_r != i32_s)\n     abort ();\n \n   i32_a = 0x0000021f; // pos is 31\n   __builtin_mips_wrdsp (i32_a, 31);\n   a64_a = 0x1234567887654321LL;\n   i32_s = 8;\n   i32_r = __builtin_mips_extp (a64_a, 3); // extract 4 bits\n-  if(i32_r != i32_s)\n+  if (i32_r != i32_s)\n     abort ();\n \n   i32_a = 0x0000021f; // pos is 31\n@@ -991,15 +991,15 @@ void test_MIPS_DSP()\n   i32_b = 7; // size is 8. NOTE!! we should use 7\n   i32_s = 0x87;\n   i32_r = __builtin_mips_extp (a64_a, i32_b);\n-  if(i32_r != i32_s)\n+  if (i32_r != i32_s)\n     abort ();\n \n   i32_a = 0x0000021f; // pos is 31\n   __builtin_mips_wrdsp (i32_a, 31);\n   a64_a = 0x1234567887654321LL;\n   i32_s = 8;\n   i32_r = __builtin_mips_extpdp (a64_a, 3); // extract 4 bits\n-  if(i32_r != i32_s)\n+  if (i32_r != i32_s)\n     abort ();\n \n   i32_s = 0x0000021b; // pos is 27\n@@ -1013,7 +1013,7 @@ void test_MIPS_DSP()\n   i32_b = 11; // size is 12. NOTE!!! We should use 11\n   i32_s = 0x876;\n   i32_r = __builtin_mips_extpdp (a64_a, i32_b);\n-  if(i32_r != i32_s)\n+  if (i32_r != i32_s)\n     abort ();\n \n   i32_s = 0x00000213; // pos is 19\n@@ -1024,14 +1024,14 @@ void test_MIPS_DSP()\n   a64_a = 0x1234567887654321LL;\n   a64_s = 0x0012345678876543LL;\n   a64_r = __builtin_mips_shilo (a64_a, 8);\n-  if(a64_r != a64_s)\n+  if (a64_r != a64_s)\n     abort ();\n \n   a64_a = 0x1234567887654321LL;\n   i32_b = -16;\n   a64_s = 0x5678876543210000LL;\n   a64_r = __builtin_mips_shilo (a64_a, i32_b);\n-  if(a64_r != a64_s)\n+  if (a64_r != a64_s)\n     abort ();\n \n   i32_a = 0x0;\n@@ -1040,26 +1040,26 @@ void test_MIPS_DSP()\n   i32_b = 0x11112222;\n   a64_s = 0x8765432111112222LL;\n   a64_r = __builtin_mips_mthlip (a64_a, i32_b);\n-  if(a64_r != a64_s)\n+  if (a64_r != a64_s)\n     abort ();\n   i32_s = 32;\n   i32_r = __builtin_mips_rddsp (31);\n-  if(i32_r != i32_s)\n+  if (i32_r != i32_s)\n     abort ();\n #endif\n \n   i32_a = 0x1357a468;\n   __builtin_mips_wrdsp (i32_a, 63);\n   i32_s = 0x03572428;\n   i32_r = __builtin_mips_rddsp (63);\n-  if(i32_r != i32_s)\n+  if (i32_r != i32_s)\n     abort ();\n \n   ptr_a = &array;\n   i32_b = 37;\n   i32_s = 37;\n   i32_r = __builtin_mips_lbux (ptr_a, i32_b);\n-  if(i32_r != i32_s)\n+  if (i32_r != i32_s)\n     abort ();\n \n   ptr_a = &array;\n@@ -1069,7 +1069,7 @@ void test_MIPS_DSP()\n   else\n     i32_s = 0x2627;\n   i32_r = __builtin_mips_lhx (ptr_a, i32_b);\n-  if(i32_r != i32_s)\n+  if (i32_r != i32_s)\n     abort ();\n \n   ptr_a = &array;\n@@ -1079,14 +1079,14 @@ void test_MIPS_DSP()\n   else\n     i32_s = 0x28292a2b;\n   i32_r = __builtin_mips_lwx (ptr_a, i32_b);\n-  if(i32_r != i32_s)\n+  if (i32_r != i32_s)\n     abort ();\n \n   i32_a = 0x00000220; // pos is 32, size is 4\n   __builtin_mips_wrdsp (i32_a, 63);\n   i32_s = 1;\n   i32_r = __builtin_mips_bposge32 ();\n-  if(i32_r != i32_s)\n+  if (i32_r != i32_s)\n     abort ();\n }\n "}, {"sha": "5552e8b720545ca996fe070149f6471fd9d26806", "filename": "gcc/testsuite/gcc.target/mips/mips32-dspr2-type.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f868e1cefd522190eeac6c6ad662bfd3a277d21/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips32-dspr2-type.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f868e1cefd522190eeac6c6ad662bfd3a277d21/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips32-dspr2-type.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips32-dspr2-type.c?ref=3f868e1cefd522190eeac6c6ad662bfd3a277d21", "patch": "@@ -0,0 +1,12 @@\n+/* Test MIPS32 DSP REV 2 instructions */\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-march=mips32r2 -mdspr2\" } */\n+/* { dg-final { scan-assembler \"\\tmul.ph\\t\" } } */\n+\n+typedef short v2hi __attribute__ ((vector_size(4)));\n+\n+v2hi mul_v2hi (v2hi a, v2hi b)\n+{\n+  return a * b;\n+}\n+"}, {"sha": "31cf22cfcd42182ad304796188e5ca50df86f10c", "filename": "gcc/testsuite/gcc.target/mips/mips32-dspr2.c", "status": "added", "additions": 541, "deletions": 0, "changes": 541, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f868e1cefd522190eeac6c6ad662bfd3a277d21/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips32-dspr2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f868e1cefd522190eeac6c6ad662bfd3a277d21/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips32-dspr2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips32-dspr2.c?ref=3f868e1cefd522190eeac6c6ad662bfd3a277d21", "patch": "@@ -0,0 +1,541 @@\n+/* Test MIPS32 DSP REV 2 instructions */\n+/* { dg-do run { target mipsisa32r2*-*-* } } */\n+/* { dg-mips-options \"-march=mips32r2 -mdspr2 -O2\" } */\n+\n+typedef signed char v4q7 __attribute__ ((vector_size(4)));\n+typedef signed char v4i8 __attribute__ ((vector_size(4)));\n+typedef short v2q15 __attribute__ ((vector_size(4)));\n+typedef short v2i16 __attribute__ ((vector_size(4)));\n+typedef int q31;\n+typedef int i32;\n+typedef unsigned int ui32;\n+typedef long long a64;\n+\n+void abort (void);\n+\n+void test_MIPS_DSPR2 (void);\n+\n+int little_endian;\n+\n+int main ()\n+{\n+  union { long long ll; int i[2]; } endianness_test;\n+  endianness_test.ll = 1;\n+  little_endian = endianness_test.i[0];\n+\n+  test_MIPS_DSPR2 ();\n+\n+  return 0;\n+}\n+\n+void test_MIPS_DSPR2 ()\n+{\n+  v4q7 v4q7_a,v4q7_b,v4q7_c,v4q7_r,v4q7_s;\n+  v4i8 v4i8_a,v4i8_b,v4i8_c,v4i8_r,v4i8_s;\n+  v2q15 v2q15_a,v2q15_b,v2q15_c,v2q15_r,v2q15_s;\n+  v2i16 v2i16_a,v2i16_b,v2i16_c,v2i16_r,v2i16_s;\n+  q31 q31_a,q31_b,q31_c,q31_r,q31_s;\n+  i32 i32_a,i32_b,i32_c,i32_r,i32_s;\n+  ui32 ui32_a,ui32_b,ui32_c,ui32_r,ui32_s;\n+  a64 a64_a,a64_b,a64_c,a64_r,a64_s;\n+\n+  int r,s;\n+\n+  v4q7_a = (v4i8) {0x81, 0xff, 0x80, 0x23};\n+  v4q7_s = (v4i8) {0x7f, 0x01, 0x7f, 0x23};\n+  v4q7_r = __builtin_mips_absq_s_qb (v4q7_a);\n+  r = (int) v4q7_r;\n+  s = (int) v4q7_s;\n+  if (r != s)\n+    abort ();\n+\n+  v2i16_a = (v2i16) {0xffff, 0x2468};\n+  v2i16_b = (v2i16) {0x1234, 0x1111};\n+  v2i16_s = (v2i16) {0x1233, 0x3579};\n+  v2i16_r = __builtin_mips_addu_ph (v2i16_a, v2i16_b);\n+  r = (int) v2i16_r;\n+  s = (int) v2i16_s;\n+  if (r != s)\n+    abort ();\n+\n+  v2i16_a = (v2i16) {0xffff, 0x2468};\n+  v2i16_b = (v2i16) {0x1234, 0x1111};\n+  v2i16_s = (v2i16) {0xffff, 0x3579};\n+  v2i16_r = __builtin_mips_addu_s_ph (v2i16_a, v2i16_b);\n+  r = (int) v2i16_r;\n+  s = (int) v2i16_s;\n+  if (r != s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0x11, 0x22, 0x33, 0xff};\n+  v4i8_b = (v4i8) {0x11, 0x33, 0x99, 0xff};\n+  v4i8_s = (v4i8) {0x11, 0x2a, 0x66, 0xff};\n+  v4i8_r = __builtin_mips_adduh_qb (v4i8_a, v4i8_b);\n+  r = (int) v4i8_r;\n+  s = (int) v4i8_s;\n+  if (r != s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0x11, 0x22, 0x33, 0xff};\n+  v4i8_b = (v4i8) {0x11, 0x33, 0x99, 0xff};\n+  v4i8_s = (v4i8) {0x11, 0x2b, 0x66, 0xff};\n+  v4i8_r = __builtin_mips_adduh_r_qb (v4i8_a, v4i8_b);\n+  r = (int) v4i8_r;\n+  s = (int) v4i8_s;\n+  if (r != s)\n+    abort ();\n+\n+  i32_a = 0x12345678;\n+  i32_b = 0x87654321;\n+  i32_s = 0x56784321;\n+  i32_r = __builtin_mips_append (i32_a, i32_b, 16);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  i32_a = 0x12345678;\n+  i32_b = 0x87654321;\n+  i32_s = 0x78876543;\n+  i32_r = __builtin_mips_balign (i32_a, i32_b, 3);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  __builtin_mips_wrdsp (0, 63);\n+  v4i8_a = (v4i8) {0x11, 0x22, 0x33, 0x44};\n+  v4i8_b = (v4i8) {0x11, 0x33, 0x33, 0x44};\n+  if (little_endian)\n+    i32_s = 0xd;\n+  else\n+    i32_s = 0xb;\n+  i32_r = __builtin_mips_cmpgdu_eq_qb (v4i8_a, v4i8_b);\n+  if (i32_r != i32_s)\n+    abort ();\n+  i32_r = __builtin_mips_rddsp (16);\n+  if (little_endian)\n+    i32_s = 0x0d000000;\n+  else\n+    i32_s = 0x0b000000;\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  __builtin_mips_wrdsp (0, 63);\n+  v4i8_a = (v4i8) {0x11, 0x22, 0x33, 0x44};\n+  v4i8_b = (v4i8) {0x11, 0x33, 0x33, 0x44};\n+  if (little_endian)\n+    i32_s = 0x2;\n+  else\n+    i32_s = 0x4;\n+  i32_r = __builtin_mips_cmpgdu_lt_qb (v4i8_a, v4i8_b);\n+  if (i32_r != i32_s)\n+    abort ();\n+  i32_r = __builtin_mips_rddsp (16);\n+  if (little_endian)\n+    i32_s = 0x02000000;\n+  else\n+    i32_s = 0x04000000;\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  __builtin_mips_wrdsp (0, 63);\n+  v4i8_a = (v4i8) {0x11, 0x22, 0x33, 0x54};\n+  v4i8_b = (v4i8) {0x11, 0x33, 0x33, 0x44};\n+  if (little_endian)\n+    i32_s = 0x7;\n+  else\n+    i32_s = 0xe;\n+  i32_r = __builtin_mips_cmpgdu_le_qb (v4i8_a, v4i8_b);\n+  if (i32_r != i32_s)\n+    abort ();\n+  i32_r = __builtin_mips_rddsp (16);\n+  if (little_endian)\n+    i32_s = 0x07000000;\n+  else\n+    i32_s = 0x0e000000;\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+#ifndef __mips64\n+  a64_a = 0x12345678;\n+  v2i16_b = (v2i16) {0xffff, 0x1555};\n+  v2i16_c = (v2i16) {0x1234, 0x3322};\n+  a64_s = 0x1677088e;\n+  a64_r = __builtin_mips_dpa_w_ph (a64_a, v2i16_b, v2i16_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n+\n+#ifndef __mips64\n+  a64_a = 0x12345678;\n+  v2i16_b = (v2i16) {0xffff, 0x1555};\n+  v2i16_c = (v2i16) {0x1234, 0x3322};\n+  a64_s = 0x0df1a462;\n+  a64_r = __builtin_mips_dps_w_ph (a64_a, v2i16_b, v2i16_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n+\n+#ifndef __mips64\n+  a64_a = 0x12345678;\n+  i32_b = 0x80000000;\n+  i32_c = 0x11112222;\n+  a64_s = 0xF7776EEF12345678LL;\n+  a64_r = __builtin_mips_madd (a64_a, i32_b, i32_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n+\n+#ifndef __mips64\n+  a64_a = 0x12345678;\n+  ui32_b = 0x80000000;\n+  ui32_c = 0x11112222;\n+  a64_s = 0x0888911112345678LL;\n+  a64_r = __builtin_mips_maddu (a64_a, ui32_b, ui32_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n+\n+#ifndef __mips64\n+  a64_a = 0x12345678;\n+  i32_b = 0x80000000;\n+  i32_c = 0x11112222;\n+  a64_s = 0x0888911112345678LL;\n+  a64_r = __builtin_mips_msub (a64_a, i32_b, i32_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n+\n+#ifndef __mips64\n+  a64_a = 0x12345678;\n+  ui32_b = 0x80000000;\n+  ui32_c = 0x11112222;\n+  a64_s = 0xF7776EEF12345678LL;\n+  a64_r = __builtin_mips_msubu (a64_a, ui32_b, ui32_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n+\n+  v2i16_a = (v2i16) {0xffff, 0x2468};\n+  v2i16_b = (v2i16) {0x1234, 0x1111};\n+  v2i16_s = (v2i16) {0xedcc, 0x52e8};\n+  v2i16_r = __builtin_mips_mul_ph (v2i16_a, v2i16_b);\n+  r = (int) v2i16_r;\n+  s = (int) v2i16_s;\n+  if (r != s)\n+    abort ();\n+\n+  v2i16_a = (v2i16) {0x8000, 0x7fff};\n+  v2i16_b = (v2i16) {0x1234, 0x1111};\n+  v2i16_s = (v2i16) {0x8000, 0x7fff};\n+  v2i16_r = __builtin_mips_mul_s_ph (v2i16_a, v2i16_b);\n+  r = (int) v2i16_r;\n+  s = (int) v2i16_s;\n+  if (r != s)\n+    abort ();\n+\n+  q31_a = 0x80000000;\n+  q31_b = 0x80000000; \n+  q31_s = 0x7fffffff;\n+  q31_r = __builtin_mips_mulq_rs_w (q31_a, q31_b);\n+  if (q31_r != q31_s)\n+    abort ();\n+\n+  v2q15_a = (v2q15) {0xffff, 0x8000};\n+  v2q15_b = (v2q15) {0x1111, 0x8000};\n+  v2q15_s = (v2q15) {0xffff, 0x7fff};\n+  v2q15_r = __builtin_mips_mulq_s_ph (v2q15_a, v2q15_b);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  q31_a = 0x00000002;\n+  q31_b = 0x80000000; \n+  q31_s = 0xfffffffe;\n+  q31_r = __builtin_mips_mulq_s_w (q31_a, q31_b);\n+  if (q31_r != q31_s)\n+    abort ();\n+\n+#ifndef __mips64\n+  a64_a = 0x19848419;\n+  v2i16_b = (v2i16) {0xffff, 0x8000};\n+  v2i16_c = (v2i16) {0x1111, 0x8000};\n+  if (little_endian)\n+    a64_s = 0x5984952a;\n+  else\n+    a64_s = 0xffffffffd9847308LL;\n+  a64_r = __builtin_mips_mulsa_w_ph (a64_a, v2i16_b, v2i16_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n+\n+#ifndef __mips64\n+  i32_a = 0x80000000;\n+  i32_b = 0x11112222;\n+  a64_s = 0xF7776EEF00000000LL;\n+  a64_r = __builtin_mips_mult (i32_a, i32_b);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n+\n+#ifndef __mips64\n+  ui32_a = 0x80000000;\n+  ui32_b = 0x11112222;\n+  a64_s = 0x888911100000000LL;\n+  a64_r = __builtin_mips_multu (ui32_a, ui32_b);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n+\n+  v2i16_a = (v2i16) {0x1234, 0x5678};\n+  v2i16_b = (v2i16) {0x2233, 0x5566};\n+  if (little_endian)\n+    v4i8_s = (v4i8) {0x33, 0x66, 0x34, 0x78};\n+  else\n+    v4i8_s = (v4i8) {0x34, 0x78, 0x33, 0x66};\n+  v4i8_r = __builtin_mips_precr_qb_ph (v2i16_a, v2i16_b);\n+  r = (int) v4i8_r;\n+  s = (int) v4i8_s;\n+  if (r != s)\n+    abort ();\n+\n+  i32_a = 0x12345678;\n+  i32_b = 0x33334444;\n+  if (little_endian)\n+    v2i16_s = (v2i16) {0x3444, 0x4567};\n+  else\n+    v2i16_s = (v2i16) {0x4567, 0x3444};\n+  v2i16_r = __builtin_mips_precr_sra_ph_w (i32_a, i32_b, 4);\n+  r = (int) v2i16_r;\n+  s = (int) v2i16_s;\n+  if (r != s)\n+    abort ();\n+\n+  i32_a = 0x12345678;\n+  i32_b = 0x33334444;\n+  if (little_endian)\n+    v2i16_s = (v2i16) {0x3444, 0x4568};\n+  else\n+    v2i16_s = (v2i16) {0x4568, 0x3444};\n+  v2i16_r = __builtin_mips_precr_sra_r_ph_w (i32_a, i32_b, 4);\n+  r = (int) v2i16_r;\n+  s = (int) v2i16_s;\n+  if (r != s)\n+    abort ();\n+\n+  i32_a = 0x12345678;\n+  i32_b = 0x87654321;\n+  i32_s = 0x43211234;\n+  i32_r = __builtin_mips_prepend (i32_a, i32_b, 16);\n+  if (i32_r != i32_s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0x12, 0x45, 0x77, 0x99};\n+  v4i8_s = (v4i8) {0x9, 0x22, 0x3b, 0xcc};\n+  v4i8_r = __builtin_mips_shra_qb (v4i8_a, 1);\n+  r = (int) v4i8_r;\n+  s = (int) v4i8_s;\n+  if (r != s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0x12, 0x45, 0x77, 0x99};\n+  v4i8_s = (v4i8) {0x9, 0x23, 0x3c, 0xcd};\n+  v4i8_r = __builtin_mips_shra_r_qb (v4i8_a, 1);\n+  r = (int) v4i8_r;\n+  s = (int) v4i8_s;\n+  if (r != s)\n+    abort ();\n+\n+  i32_b = 1;  \n+  v4i8_a = (v4i8) {0x12, 0x45, 0x77, 0x99};\n+  v4i8_s = (v4i8) {0x9, 0x22, 0x3b, 0xcc};\n+  v4i8_r = __builtin_mips_shra_qb (v4i8_a, i32_b);\n+  r = (int) v4i8_r;\n+  s = (int) v4i8_s;\n+  if (r != s)\n+    abort ();\n+\n+  i32_b = 1;  \n+  v4i8_a = (v4i8) {0x12, 0x45, 0x77, 0x99};\n+  v4i8_s = (v4i8) {0x9, 0x23, 0x3c, 0xcd};\n+  v4i8_r = __builtin_mips_shra_r_qb (v4i8_a, i32_b);\n+  r = (int) v4i8_r;\n+  s = (int) v4i8_s;\n+  if (r != s)\n+    abort ();\n+\n+  v2i16_a = (v2i16) {0x1357, 0x2468};\n+  v2i16_s = (v2i16) {0x0135, 0x0246};\n+  v2i16_r = __builtin_mips_shrl_ph (v2i16_a, 4);\n+  r = (int) v2i16_r;\n+  s = (int) v2i16_s;\n+  if (r != s)\n+    abort ();\n+\n+  i32_b = 8;\n+  v2i16_a = (v2i16) {0x1357, 0x2468};\n+  v2i16_s = (v2i16) {0x0013, 0x0024};\n+  v2i16_r = __builtin_mips_shrl_ph (v2i16_a, i32_b);\n+  r = (int) v2i16_r;\n+  s = (int) v2i16_s;\n+  if (r != s)\n+    abort ();\n+\n+  v2i16_a = (v2i16) {0x1357, 0x4455};\n+  v2i16_b = (v2i16) {0x3333, 0x4444};\n+  v2i16_s = (v2i16) {0xe024, 0x0011};\n+  v2i16_r = __builtin_mips_subu_ph (v2i16_a, v2i16_b);\n+  r = (int) v2i16_r;\n+  s = (int) v2i16_s;\n+  if (r != s)\n+    abort ();\n+\n+  v2i16_a = (v2i16) {0x1357, 0x4455};\n+  v2i16_b = (v2i16) {0x3333, 0x4444};\n+  v2i16_s = (v2i16) {0x0000, 0x0011};\n+  v2i16_r = __builtin_mips_subu_s_ph (v2i16_a, v2i16_b);\n+  r = (int) v2i16_r;\n+  s = (int) v2i16_s;\n+  if (r != s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0x33 ,0x44, 0x55, 0x66};\n+  v4i8_b = (v4i8) {0x99 ,0x15, 0x85, 0xff};\n+  v4i8_s = (v4i8) {0xcd ,0x17, 0xe8, 0xb3};\n+  v4i8_r = __builtin_mips_subuh_qb (v4i8_a, v4i8_b);\n+  r = (int) v4i8_r;\n+  s = (int) v4i8_s;\n+  if (r != s)\n+    abort ();\n+\n+  v4i8_a = (v4i8) {0x33 ,0x44, 0x55, 0x66};\n+  v4i8_b = (v4i8) {0x99 ,0x15, 0x85, 0xff};\n+  v4i8_s = (v4i8) {0xcd ,0x18, 0xe8, 0xb4};\n+  v4i8_r = __builtin_mips_subuh_r_qb (v4i8_a, v4i8_b);\n+  r = (int) v4i8_r;\n+  s = (int) v4i8_s;\n+  if (r != s)\n+    abort ();\n+\n+  v2q15_a = (v2q15) {0x3334, 0x4444};\n+  v2q15_b = (v2q15) {0x1111, 0x2222};\n+  v2q15_s = (v2q15) {0x2222, 0x3333};\n+  v2q15_r = __builtin_mips_addqh_ph (v2q15_a, v2q15_b);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  v2q15_a = (v2q15) {0x3334, 0x4444};\n+  v2q15_b = (v2q15) {0x1111, 0x2222};\n+  v2q15_s = (v2q15) {0x2223, 0x3333};\n+  v2q15_r = __builtin_mips_addqh_r_ph (v2q15_a, v2q15_b);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  q31_a = 0x11111112;\n+  q31_b = 0x99999999;\n+  q31_s = 0xd5555555;\n+  q31_r = __builtin_mips_addqh_w (q31_a, q31_b);\n+  if (q31_r != q31_s)\n+    abort ();\n+\n+  q31_a = 0x11111112;\n+  q31_b = 0x99999999;\n+  q31_s = 0xd5555556;\n+  q31_r = __builtin_mips_addqh_r_w (q31_a, q31_b);\n+  if (q31_r != q31_s)\n+    abort ();\n+\n+  v2q15_a = (v2q15) {0x3334, 0x4444};\n+  v2q15_b = (v2q15) {0x1111, 0x2222};\n+  v2q15_s = (v2q15) {0x1111, 0x1111};\n+  v2q15_r = __builtin_mips_subqh_ph (v2q15_a, v2q15_b);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  v2q15_a = (v2q15) {0x3334, 0x4444};\n+  v2q15_b = (v2q15) {0x1111, 0x2222};\n+  v2q15_s = (v2q15) {0x1112, 0x1111};\n+  v2q15_r = __builtin_mips_subqh_r_ph (v2q15_a, v2q15_b);\n+  r = (int) v2q15_r;\n+  s = (int) v2q15_s;\n+  if (r != s)\n+    abort ();\n+\n+  q31_a = 0x11111112;\n+  q31_b = 0x99999999;\n+  q31_s = 0x3bbbbbbc;\n+  q31_r = __builtin_mips_subqh_w (q31_a, q31_b);\n+  if (q31_r != q31_s)\n+    abort ();\n+\n+  q31_a = 0x11111112;\n+  q31_b = 0x99999999;\n+  q31_s = 0x3bbbbbbd;\n+  q31_r = __builtin_mips_subqh_r_w (q31_a, q31_b);\n+  if (q31_r != q31_s)\n+    abort ();\n+\n+#ifndef __mips64\n+  a64_a = 0x1111222212345678LL;\n+  v2i16_b = (v2i16) {0x1, 0x2};\n+  v2i16_c = (v2i16) {0x3, 0x4};\n+  a64_s = 0x1111222212345682LL;\n+  a64_r = __builtin_mips_dpax_w_ph (a64_a, v2i16_b, v2i16_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n+\n+#ifndef __mips64\n+  a64_a = 0x9999111112345678LL;\n+  v2i16_b = (v2i16) {0x1, 0x2};\n+  v2i16_c = (v2i16) {0x3, 0x4};\n+  a64_s = 0x999911111234566eLL;\n+  a64_r = __builtin_mips_dpsx_w_ph (a64_a, v2i16_b, v2i16_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n+\n+#ifndef __mips64\n+  a64_a = 0x70000000;\n+  v2q15_b = (v2q15) {0x4000, 0x2000};\n+  v2q15_c = (v2q15) {0x2000, 0x4000};\n+  a64_s = 0x98000000;\n+  a64_r = __builtin_mips_dpaqx_s_w_ph (a64_a, v2q15_b, v2q15_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n+\n+#ifndef __mips64\n+  a64_a = 0x70000000;\n+  v2q15_b = (v2q15) {0x4000, 0x2000};\n+  v2q15_c = (v2q15) {0x2000, 0x4000};\n+  a64_s = 0x7fffffff;\n+  a64_r = __builtin_mips_dpaqx_sa_w_ph (a64_a, v2q15_b, v2q15_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n+\n+#ifndef __mips64\n+  a64_a = 0x70000000;\n+  v2q15_b = (v2q15) {0x4000, 0x2000};\n+  v2q15_c = (v2q15) {0x2000, 0x4000};\n+  a64_s = 0x48000000;\n+  a64_r = __builtin_mips_dpsqx_s_w_ph (a64_a, v2q15_b, v2q15_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n+\n+#ifndef __mips64\n+  a64_a = 0xFFFFFFFF80000000LL;\n+  v2q15_b = (v2q15) {0x4000, 0x2000};\n+  v2q15_c = (v2q15) {0x2000, 0x4000};\n+  a64_s = 0xFFFFFFFF80000000LL;\n+  a64_r = __builtin_mips_dpsqx_sa_w_ph (a64_a, v2q15_b, v2q15_c);\n+  if (a64_r != a64_s)\n+    abort ();\n+#endif\n+}"}]}