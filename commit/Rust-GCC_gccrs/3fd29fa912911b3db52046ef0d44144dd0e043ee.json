{"sha": "3fd29fa912911b3db52046ef0d44144dd0e043ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZkMjlmYTkxMjkxMWIzZGI1MjA0NmVmMGQ0NDE0NGRkMGUwNDNlZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-06-12T10:17:53Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-06-12T10:17:53Z"}, "message": "complex (pow(const complex<>&, int)): Do not define in C++0x mode, per DR 844.\n\n2008-06-12  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/complex (pow(const complex<>&, int)): Do not define in\n\tC++0x mode, per DR 844.\n\t* include/tr1/complex (pow(const complex<>&, int)): Remove.\n\t* doc/xml/manual/intro.xml: Add an entry for DR 844.\n\t* testsuite/26_numerics/complex/dr844.cc: New.\n\t* testsuite/tr1/8_c_compatibility/complex/overloads_int.cc: Adjust.\n\nFrom-SVN: r136694", "tree": {"sha": "5fa8457f26dacc4e85ba8442365ab437f33de9f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fa8457f26dacc4e85ba8442365ab437f33de9f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fd29fa912911b3db52046ef0d44144dd0e043ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd29fa912911b3db52046ef0d44144dd0e043ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fd29fa912911b3db52046ef0d44144dd0e043ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd29fa912911b3db52046ef0d44144dd0e043ee/comments", "author": null, "committer": null, "parents": [{"sha": "394a378ca94d23f47d17a863ee7a0627c48a3754", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/394a378ca94d23f47d17a863ee7a0627c48a3754", "html_url": "https://github.com/Rust-GCC/gccrs/commit/394a378ca94d23f47d17a863ee7a0627c48a3754"}], "stats": {"total": 94, "additions": 79, "deletions": 15}, "files": [{"sha": "933bff852f378bff7d4346561bd2fa583ee11352", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd29fa912911b3db52046ef0d44144dd0e043ee/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd29fa912911b3db52046ef0d44144dd0e043ee/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3fd29fa912911b3db52046ef0d44144dd0e043ee", "patch": "@@ -1,3 +1,12 @@\n+2008-06-12  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/complex (pow(const complex<>&, int)): Do not define in\n+\tC++0x mode, per DR 844.\n+\t* include/tr1/complex (pow(const complex<>&, int)): Remove.\n+\t* doc/xml/manual/intro.xml: Add an entry for DR 844.\n+\t* testsuite/26_numerics/complex/dr844.cc: New.\n+\t* testsuite/tr1/8_c_compatibility/complex/overloads_int.cc: Adjust.\n+\n 2008-06-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/tr1_impl/hashtable (_Hashtable<>::cbegin(size_type),"}, {"sha": "e30e81dcbfe13748fec25908473b9414211c7b50", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd29fa912911b3db52046ef0d44144dd0e043ee/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd29fa912911b3db52046ef0d44144dd0e043ee/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=3fd29fa912911b3db52046ef0d44144dd0e043ee", "patch": "@@ -677,6 +677,12 @@\n     </term>\n     <listitem><para>In C++0x mode, add std::proj.\n     </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"../ext/lwg-active.html#844\">844</ulink>:\n+        <emphasis>complex pow return type is ambiguous</emphasis>\n+    </term>\n+    <listitem><para>In C++0x mode, remove the pow(complex&lt;T&gt;, int) signature.\n+    </para></listitem></varlistentry>\n   </variablelist>\n \n  </sect2>"}, {"sha": "c8845f6728cc2b867aa9c5f1e805a44e28f6823a", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd29fa912911b3db52046ef0d44144dd0e043ee/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd29fa912911b3db52046ef0d44144dd0e043ee/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=3fd29fa912911b3db52046ef0d44144dd0e043ee", "patch": "@@ -82,8 +82,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _Tp> complex<_Tp> log(const complex<_Tp>&);\n   /// Return complex base 10 logarithm of @a z.\n   template<typename _Tp> complex<_Tp> log10(const complex<_Tp>&);\n-  /// Return complex cosine of @a z.\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+  // DR 844.\n+  /// Return @a x to the @a y'th power.\n   template<typename _Tp> complex<_Tp> pow(const complex<_Tp>&, int);\n+#endif\n   /// Return @a x to the @a y'th power.\n   template<typename _Tp> complex<_Tp> pow(const complex<_Tp>&, const _Tp&);\n   /// Return @a x to the @a y'th power.\n@@ -945,10 +948,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // 26.2.8/9  pow(__x, __y): Returns the complex power base of __x\n   //                          raised to the __y-th power.  The branch\n   //                          cut is on the negative axis.\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // DR 844. complex pow return type is ambiguous.\n   template<typename _Tp>\n     inline complex<_Tp>\n     pow(const complex<_Tp>& __z, int __n)\n     { return std::__pow_helper(__z, __n); }\n+#endif\n \n   template<typename _Tp>\n     complex<_Tp>"}, {"sha": "88c37de75d2848ba3b44a4536a3e419b9d6f1306", "filename": "libstdc++-v3/include/tr1/complex", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd29fa912911b3db52046ef0d44144dd0e043ee/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd29fa912911b3db52046ef0d44144dd0e043ee/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex?ref=3fd29fa912911b3db52046ef0d44144dd0e043ee", "patch": "@@ -76,11 +76,6 @@ namespace tr1\n \n   using std::real;\n \n-  template<typename _Tp>\n-    inline std::complex<_Tp>\n-    pow(const std::complex<_Tp>& __x, int __n)\n-    { return std::pow(__x, __n); }\n-\n   template<typename _Tp>\n     inline std::complex<_Tp>\n     pow(const std::complex<_Tp>& __x, const _Tp& __y)"}, {"sha": "e9bb192d6e92fbcdf5ec9aafc40a8ff8b033f22a", "filename": "libstdc++-v3/testsuite/26_numerics/complex/dr844.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd29fa912911b3db52046ef0d44144dd0e043ee/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fdr844.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd29fa912911b3db52046ef0d44144dd0e043ee/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fdr844.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fdr844.cc?ref=3fd29fa912911b3db52046ef0d44144dd0e043ee", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2008-06-12  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <complex>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+// DR 844. complex pow return type is ambiguous.\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using __gnu_test::check_ret_type;\n+\n+  typedef std::complex<float>       cmplx_f_type;\n+  typedef std::complex<double>      cmplx_d_type;\n+  typedef std::complex<long double> cmplx_ld_type;\n+\n+  const int          i1 = 1;\n+  const float        f1 = 1.0f;\n+  const double       d1 = 1.0;\n+  const long double ld1 = 1.0l;\n+\n+  check_ret_type<cmplx_d_type>(std::pow(cmplx_f_type(f1, f1), i1));\n+  VERIFY( std::pow(cmplx_f_type(f1, f1), i1)\n+\t  == std::pow(cmplx_d_type(f1, f1), double(i1)) );\n+  check_ret_type<cmplx_d_type>(std::pow(cmplx_d_type(d1, d1), i1));\n+  check_ret_type<cmplx_ld_type>(std::pow(cmplx_ld_type(ld1, ld1), i1));\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "231581f9d5c0f3c1a22541fc82a271a5d376cc2f", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/complex/overloads_int.cc", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd29fa912911b3db52046ef0d44144dd0e043ee/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcomplex%2Foverloads_int.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd29fa912911b3db52046ef0d44144dd0e043ee/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcomplex%2Foverloads_int.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcomplex%2Foverloads_int.cc?ref=3fd29fa912911b3db52046ef0d44144dd0e043ee", "patch": "@@ -1,6 +1,6 @@\n // 2006-01-12  Paolo Carlini  <pcarlini@suse.de>\n //\n-// Copyright (C) 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2006, 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -64,18 +64,13 @@ void test01()\n   typedef std::complex<int> cmplx_i_type;\n   check_ret_type<cmplx_i_type>(std::tr1::polar(i1, i1));\n \n-  // NB: According to the letter of 8.1.9/3 the return type should be a\n-  // cmplx_d_type, but the existing std::pow(const complex<>&, int) wins.\n-  // check_ret_type<cmplx_d_type>(std::tr1::pow(cmplx_f_type(f1, f1), i1));\n-  check_ret_type<cmplx_f_type>(std::tr1::pow(cmplx_f_type(f1, f1), i1));\n-\n+  check_ret_type<cmplx_d_type>(std::tr1::pow(cmplx_f_type(f1, f1), i1));\n   check_ret_type<cmplx_d_type>(std::tr1::pow(cmplx_f_type(f1, f1), u1));\n   check_ret_type<cmplx_d_type>(std::tr1::pow(cmplx_f_type(f1, f1), l1));\n   check_ret_type<cmplx_d_type>(std::tr1::pow(cmplx_d_type(d1, d1), i1));\n \n-  // See last comment.\n-  // VERIFY( std::tr1::pow(cmplx_d_type(d1, d1), i1)\n-  //         == std::tr1::pow(cmplx_d_type(d1, d1), double(i1)) );\n+  VERIFY( std::tr1::pow(cmplx_d_type(d1, d1), i1)\n+\t  == std::tr1::pow(cmplx_d_type(d1, d1), double(i1)) );\n   VERIFY( std::tr1::pow(cmplx_d_type(d1, d1), u1)\n \t  == std::tr1::pow(cmplx_d_type(d1, d1), double(u1)) );\n   VERIFY( std::tr1::pow(cmplx_d_type(d1, d1), l1)"}]}