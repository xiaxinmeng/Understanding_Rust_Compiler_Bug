{"sha": "f6b95f78f8048e2fe726b6caf91d606f36f4d8c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZiOTVmNzhmODA0OGUyZmU3MjZiNmNhZjkxZDYwNmYzNmY0ZDhjNA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2018-09-05T18:01:42Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-09-05T18:01:42Z"}, "message": "i386.md (truncdfsf2): Remove expander.\n\n\t* config/i386/i386.md (truncdfsf2): Remove expander.\n\t(truncdfsf2_with_temp): Ditto.\n\t(truncxf<mode>2): Ditto.\n\t(*truncdfsf_fast_mixed): Remove insn pattern.\n\t(*truncdfsf_fast_i387): Ditto.\n\t(*truncdfsf_mixed): Ditto.\n\t(*truncdfsf_i387): Ditto.\n\t(*truncdfsf2_i387_1): Ditto.\n\t(*truncxfsf2_mixed): Ditto.\n\t(*truncxfdf2_mixed): Ditto.\n\t(*truncxf<mode>2_i387_noop): Ditto. Update callers\n\tto call gen_truncxf<mode>2 instead.\n\t(*truncxf<mode>2_i387): Remove.\n\t(reg->reg splitters): Remove splitter pattern.\n\t(reg->mem splitters): Ditto.\n\n\t(truncdfsf2): New insn pattern.\n\t(truncxf<mode>2): Ditto.\n\nFrom-SVN: r264130", "tree": {"sha": "09532411ef08dc263ecc65cbf51a9a8851050dc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09532411ef08dc263ecc65cbf51a9a8851050dc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6b95f78f8048e2fe726b6caf91d606f36f4d8c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6b95f78f8048e2fe726b6caf91d606f36f4d8c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6b95f78f8048e2fe726b6caf91d606f36f4d8c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6b95f78f8048e2fe726b6caf91d606f36f4d8c4/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eb6ffc66825a8d36cf89881517624ff2df510aa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb6ffc66825a8d36cf89881517624ff2df510aa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb6ffc66825a8d36cf89881517624ff2df510aa9"}], "stats": {"total": 303, "additions": 84, "deletions": 219}, "files": [{"sha": "7b65c2fbe43fc2006fbb36ddf471823c4d5bfc2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b95f78f8048e2fe726b6caf91d606f36f4d8c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b95f78f8048e2fe726b6caf91d606f36f4d8c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6b95f78f8048e2fe726b6caf91d606f36f4d8c4", "patch": "@@ -1,3 +1,24 @@\n+2018-09-05  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (truncdfsf2): Remove expander.\n+\t(truncdfsf2_with_temp): Ditto.\n+\t(truncxf<mode>2): Ditto.\n+\t(*truncdfsf_fast_mixed): Remove insn pattern.\n+\t(*truncdfsf_fast_i387): Ditto.\n+\t(*truncdfsf_mixed): Ditto.\n+\t(*truncdfsf_i387): Ditto.\n+\t(*truncdfsf2_i387_1): Ditto.\n+\t(*truncxfsf2_mixed): Ditto.\n+\t(*truncxfdf2_mixed): Ditto.\n+\t(*truncxf<mode>2_i387_noop): Ditto. Update callers\n+\tto call gen_truncxf<mode>2 instead.\n+\t(*truncxf<mode>2_i387): Remove.\n+\t(reg->reg splitters): Remove splitter pattern.\n+\t(reg->mem splitters): Ditto.\n+\n+\t(truncdfsf2): New insn pattern.\n+\t(truncxf<mode>2): Ditto.\n+\n 2018-09-05  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* tree-ssa-math-opts.c (is_mult_by): New function."}, {"sha": "aa904c24cd407f10911ab696475bbf466e829e15", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 63, "deletions": 219, "changes": 282, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b95f78f8048e2fe726b6caf91d606f36f4d8c4/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b95f78f8048e2fe726b6caf91d606f36f4d8c4/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f6b95f78f8048e2fe726b6caf91d606f36f4d8c4", "patch": "@@ -4615,23 +4615,43 @@\n \n ;; Conversion from DFmode to SFmode.\n \n-(define_expand \"truncdfsf2\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\")\n+(define_insn \"truncdfsf2\"\n+  [(set (match_operand:SF 0 \"nonimm_ssenomem_operand\" \"=m,f,v\")\n \t(float_truncate:SF\n-\t  (match_operand:DF 1 \"nonimmediate_operand\")))]\n+\t  (match_operand:DF 1 \"register_ssemem_operand\" \"f,f,vm\")))]\n   \"TARGET_80387 || (TARGET_SSE2 && TARGET_SSE_MATH)\"\n {\n-  if (TARGET_SSE2 && TARGET_SSE_MATH && !TARGET_MIX_SSE_I387)\n-    ;\n-  else if (flag_unsafe_math_optimizations)\n-    ;\n-  else\n+  switch (which_alternative)\n     {\n-      rtx temp = assign_386_stack_local (SFmode, SLOT_TEMP);\n-      emit_insn (gen_truncdfsf2_with_temp (operands[0], operands[1], temp));\n-      DONE;\n+    case 0:\n+    case 1:\n+      return output_387_reg_move (insn, operands);\n+\n+    case 2:\n+      return \"%vcvtsd2ss\\t{%1, %d0|%d0, %1}\";\n+\n+    default:\n+      gcc_unreachable ();\n     }\n-})\n+}\n+  [(set_attr \"type\" \"fmov,fmov,ssecvt\")\n+   (set_attr \"mode\" \"SF\")\n+   (set (attr \"enabled\")\n+     (if_then_else\n+       (match_test (\"TARGET_SSE2 && TARGET_SSE_MATH\"))\n+       (cond [(eq_attr \"alternative\" \"0\")\n+\t\t(symbol_ref \"TARGET_MIX_SSE_I387\")\n+\t      (eq_attr \"alternative\" \"1\")\n+\t\t(symbol_ref \"TARGET_MIX_SSE_I387\n+\t\t\t     && flag_unsafe_math_optimizations\")\n+\t   ]\n+\t   (symbol_ref \"true\"))\n+       (cond [(eq_attr \"alternative\" \"0\")\n+\t\t(symbol_ref \"true\")\n+\t      (eq_attr \"alternative\" \"1\")\n+\t\t(symbol_ref \"flag_unsafe_math_optimizations\")\n+\t   ]\n+\t   (symbol_ref \"false\"))))])\n \n /* For converting DF(xmm2) to SF(xmm1), use the following code instead of\n    cvtsd2ss:\n@@ -4642,7 +4662,7 @@\n    anyway.  */\n (define_split\n   [(set (match_operand:SF 0 \"sse_reg_operand\")\n-        (float_truncate:SF\n+\t(float_truncate:SF\n \t  (match_operand:DF 1 \"nonimmediate_operand\")))]\n   \"TARGET_USE_VECTOR_FP_CONVERTS\n    && optimize_insn_for_speed_p ()\n@@ -4679,7 +4699,7 @@\n \t\t\t\t   CONST0_RTX (DFmode)));\n })\n \n-;; It's more profitable to split and then extend in the same register.\n+;; It's more profitable to split and then truncate in the same register.\n (define_peephole2\n   [(set (match_operand:SF 0 \"sse_reg_operand\")\n \t(float_truncate:SF\n@@ -4690,197 +4710,21 @@\n    (set (match_dup 0) (float_truncate:SF (match_dup 2)))]\n   \"operands[2] = lowpart_subreg (DFmode, operands[0], SFmode);\")\n \n-(define_expand \"truncdfsf2_with_temp\"\n-  [(parallel [(set (match_operand:SF 0)\n-\t\t   (float_truncate:SF (match_operand:DF 1)))\n-\t      (clobber (match_operand:SF 2))])])\n-\n-;; SSE alternative doesn't depend on flag_unsafe_math_optimizations,\n-;; because nothing we do there is unsafe.\n-(define_insn \"*truncdfsf_fast_mixed\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\"   \"=fm,v\")\n-        (float_truncate:SF\n-          (match_operand:DF 1 \"nonimmediate_operand\" \"f  ,vm\")))]\n-  \"TARGET_SSE2 && TARGET_SSE_MATH\"\n-{\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return output_387_reg_move (insn, operands);\n-    case 1:\n-      return \"%vcvtsd2ss\\t{%1, %d0|%d0, %1}\";\n-    default:\n-      gcc_unreachable ();\n-    }\n-}\n-  [(set_attr \"type\" \"fmov,ssecvt\")\n-   (set_attr \"prefix\" \"orig,maybe_vex\")\n-   (set_attr \"mode\" \"SF\")\n-   (set (attr \"enabled\")\n-     (cond [(eq_attr \"alternative\" \"0\")\n-              (symbol_ref \"TARGET_MIX_SSE_I387\n-\t\t\t   && flag_unsafe_math_optimizations\")\n-\t   ]\n-           (symbol_ref \"true\")))])\n-\n-(define_insn \"*truncdfsf_fast_i387\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\"   \"=fm\")\n-        (float_truncate:SF\n-          (match_operand:DF 1 \"nonimmediate_operand\" \"f\")))]\n-  \"TARGET_80387 && flag_unsafe_math_optimizations\"\n-  \"* return output_387_reg_move (insn, operands);\"\n-  [(set_attr \"type\" \"fmov\")\n-   (set_attr \"mode\" \"SF\")])\n-\n-(define_insn \"*truncdfsf_mixed\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\"   \"=m,v ,?f,?v,?*r\")\n-\t(float_truncate:SF\n-\t  (match_operand:DF 1 \"nonimmediate_operand\" \"f ,vm,f ,f ,f\")))\n-   (clobber (match_operand:SF 2 \"memory_operand\"     \"=X,X ,m ,m ,m\"))]\n-  \"TARGET_MIX_SSE_I387\"\n-{\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return output_387_reg_move (insn, operands);\n-    case 1:\n-      return \"%vcvtsd2ss\\t{%1, %d0|%d0, %1}\";\n-\n-    default:\n-      return \"#\";\n-    }\n-}\n-  [(set_attr \"isa\" \"*,sse2,*,*,*\")\n-   (set_attr \"type\" \"fmov,ssecvt,multi,multi,multi\")\n-   (set_attr \"unit\" \"*,*,i387,i387,i387\")\n-   (set_attr \"prefix\" \"orig,maybe_vex,orig,orig,orig\")\n-   (set_attr \"mode\" \"SF\")])\n-\n-(define_insn \"*truncdfsf_i387\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\"   \"=m,?f,?v,?*r\")\n-\t(float_truncate:SF\n-\t  (match_operand:DF 1 \"nonimmediate_operand\" \"f ,f ,f ,f\")))\n-   (clobber (match_operand:SF 2 \"memory_operand\"     \"=X,m ,m ,m\"))]\n-  \"TARGET_80387\"\n-{\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return output_387_reg_move (insn, operands);\n-\n-    default:\n-      return \"#\";\n-    }\n-}\n-  [(set_attr \"type\" \"fmov,multi,multi,multi\")\n-   (set_attr \"unit\" \"*,i387,i387,i387\")\n-   (set_attr \"mode\" \"SF\")])\n-\n-(define_insn \"*truncdfsf2_i387_1\"\n-  [(set (match_operand:SF 0 \"memory_operand\" \"=m\")\n-\t(float_truncate:SF\n-\t  (match_operand:DF 1 \"register_operand\" \"f\")))]\n-  \"TARGET_80387\n-   && !(TARGET_SSE2 && TARGET_SSE_MATH)\n-   && !TARGET_MIX_SSE_I387\"\n-  \"* return output_387_reg_move (insn, operands);\"\n-  [(set_attr \"type\" \"fmov\")\n-   (set_attr \"mode\" \"SF\")])\n-\n-(define_split\n-  [(set (match_operand:SF 0 \"register_operand\")\n-\t(float_truncate:SF\n-\t (match_operand:DF 1 \"fp_register_operand\")))\n-   (clobber (match_operand 2))]\n-  \"reload_completed\"\n-  [(set (match_dup 2) (match_dup 1))\n-   (set (match_dup 0) (match_dup 2))]\n-  \"operands[1] = gen_rtx_REG (SFmode, REGNO (operands[1]));\")\n-\n ;; Conversion from XFmode to {SF,DF}mode\n \n-(define_expand \"truncxf<mode>2\"\n-  [(parallel [(set (match_operand:MODEF 0 \"nonimmediate_operand\")\n-\t\t   (float_truncate:MODEF\n-\t\t     (match_operand:XF 1 \"register_operand\")))\n-\t      (clobber (match_dup 2))])]\n-  \"TARGET_80387\"\n-{\n-  if (flag_unsafe_math_optimizations)\n-    {\n-      rtx reg = REG_P (operands[0]) ? operands[0] : gen_reg_rtx (<MODE>mode);\n-      emit_insn (gen_truncxf<mode>2_i387_noop (reg, operands[1]));\n-      if (reg != operands[0])\n-\temit_move_insn (operands[0], reg);\n-      DONE;\n-    }\n-  else\n-    operands[2] = assign_386_stack_local (<MODE>mode, SLOT_TEMP);\n-})\n-\n-(define_insn \"*truncxfsf2_mixed\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=m,?f,?v,?*r\")\n-\t(float_truncate:SF\n-\t  (match_operand:XF 1 \"register_operand\"   \"f ,f ,f ,f\")))\n-   (clobber (match_operand:SF 2 \"memory_operand\"   \"=X,m ,m ,m\"))]\n-  \"TARGET_80387\"\n-{\n-  gcc_assert (!which_alternative);\n-  return output_387_reg_move (insn, operands);\n-}\n-  [(set_attr \"type\" \"fmov,multi,multi,multi\")\n-   (set_attr \"unit\" \"*,i387,i387,i387\")\n-   (set_attr \"mode\" \"SF\")])\n-\n-(define_insn \"*truncxfdf2_mixed\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=m,?f,?v,?*r\")\n-\t(float_truncate:DF\n-\t  (match_operand:XF 1 \"register_operand\"   \"f ,f ,f  ,f\")))\n-   (clobber (match_operand:DF 2 \"memory_operand\"   \"=X,m ,m  ,m\"))]\n-  \"TARGET_80387\"\n-{\n-  gcc_assert (!which_alternative);\n-  return output_387_reg_move (insn, operands);\n-}\n-  [(set_attr \"isa\" \"*,*,sse2,*\")\n-   (set_attr \"type\" \"fmov,multi,multi,multi\")\n-   (set_attr \"unit\" \"*,i387,i387,i387\")\n-   (set_attr \"mode\" \"DF\")])\n-\n-(define_insn \"truncxf<mode>2_i387_noop\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=f\")\n-\t(float_truncate:MODEF\n-\t  (match_operand:XF 1 \"register_operand\" \"f\")))]\n-  \"TARGET_80387 && flag_unsafe_math_optimizations\"\n-  \"* return output_387_reg_move (insn, operands);\"\n-  [(set_attr \"type\" \"fmov\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*truncxf<mode>2_i387\"\n-  [(set (match_operand:MODEF 0 \"memory_operand\" \"=m\")\n+(define_insn \"truncxf<mode>2\"\n+  [(set (match_operand:MODEF 0 \"nonimmediate_operand\" \"=m,f\")\n \t(float_truncate:MODEF\n-\t  (match_operand:XF 1 \"register_operand\" \"f\")))]\n+\t  (match_operand:XF 1 \"register_operand\" \"f,f\")))]\n   \"TARGET_80387\"\n   \"* return output_387_reg_move (insn, operands);\"\n   [(set_attr \"type\" \"fmov\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_split\n-  [(set (match_operand:MODEF 0 \"register_operand\")\n-\t(float_truncate:MODEF\n-\t  (match_operand:XF 1 \"register_operand\")))\n-   (clobber (match_operand:MODEF 2 \"memory_operand\"))]\n-  \"TARGET_80387 && reload_completed\"\n-  [(set (match_dup 2) (float_truncate:MODEF (match_dup 1)))\n-   (set (match_dup 0) (match_dup 2))])\n-\n-(define_split\n-  [(set (match_operand:MODEF 0 \"memory_operand\")\n-\t(float_truncate:MODEF\n-\t  (match_operand:XF 1 \"register_operand\")))\n-   (clobber (match_operand:MODEF 2 \"memory_operand\"))]\n-  \"TARGET_80387\"\n-  [(set (match_dup 0) (float_truncate:MODEF (match_dup 1)))])\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set (attr \"enabled\")\n+     (cond [(eq_attr \"alternative\" \"1\")\n+\t      (symbol_ref \"flag_unsafe_math_optimizations\")\n+\t   ]\n+\t   (symbol_ref \"true\")))])\n \f\n ;; Signed conversion to DImode.\n \n@@ -15810,8 +15654,8 @@\n   rtx op1 = gen_reg_rtx (XFmode);\n \n   emit_insn (gen_sincos_extend<mode>xf3_i387 (op0, op1, operands[2]));\n-  emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n-  emit_insn (gen_truncxf<mode>2_i387_noop (operands[1], op1));\n+  emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n+  emit_insn (gen_truncxf<mode>2 (operands[1], op1));\n   DONE;\n })\n \n@@ -15874,7 +15718,7 @@\n \n   emit_insn (gen_fptan_extend<mode>xf4_i387 (one, op0,\n \t\t\t\t\t     operands[1], op2));\n-  emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n+  emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n   DONE;\n })\n \n@@ -15929,7 +15773,7 @@\n   rtx op0 = gen_reg_rtx (XFmode);\n \n   emit_insn (gen_fpatan_extend<mode>xf3_i387 (op0, operands[2], operands[1]));\n-  emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n+  emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n   DONE;\n })\n \n@@ -15960,7 +15804,7 @@\n   emit_move_insn (op2, CONST1_RTX (<MODE>mode));  /* fld1 */\n \n   emit_insn (gen_fpatan_extend<mode>xf3_i387 (op0, op2, operands[1]));\n-  emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n+  emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n   DONE;\n })\n \n@@ -15998,7 +15842,7 @@\n \n   emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n   emit_insn (gen_asinxf2 (op0, op1));\n-  emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n+  emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n   DONE;\n })\n \n@@ -16036,7 +15880,7 @@\n \n   emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n   emit_insn (gen_acosxf2 (op0, op1));\n-  emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n+  emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n   DONE;\n })\n \n@@ -16095,7 +15939,7 @@\n   emit_move_insn (op2, standard_80387_constant_rtx (4)); /* fldln2 */\n \n   emit_insn (gen_fyl2x_extend<mode>xf3_i387 (op0, operands[1], op2));\n-  emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n+  emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n   DONE;\n })\n \n@@ -16125,7 +15969,7 @@\n   emit_move_insn (op2, standard_80387_constant_rtx (3)); /* fldlg2 */\n \n   emit_insn (gen_fyl2x_extend<mode>xf3_i387 (op0, operands[1], op2));\n-  emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n+  emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n   DONE;\n })\n \n@@ -16155,7 +15999,7 @@\n   emit_move_insn (op2, CONST1_RTX (XFmode)); /* fld1 */\n \n   emit_insn (gen_fyl2x_extend<mode>xf3_i387 (op0, operands[1], op2));\n-  emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n+  emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n   DONE;\n })\n \n@@ -16213,7 +16057,7 @@\n   operands[1] = gen_rtx_FLOAT_EXTEND (XFmode, operands[1]);\n \n   ix86_emit_i387_log1p (op0, operands[1]);\n-  emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n+  emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n   DONE;\n })\n \n@@ -16268,7 +16112,7 @@\n   rtx op1 = gen_reg_rtx (XFmode);\n \n   emit_insn (gen_fxtract_extend<mode>xf3_i387 (op0, op1, operands[1]));\n-  emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op1));\n+  emit_insn (gen_truncxf<mode>2 (operands[0], op1));\n   DONE;\n })\n \n@@ -16392,7 +16236,7 @@\n \n   emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n   emit_insn (gen_expxf2 (op0, op1));\n-  emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n+  emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n   DONE;\n })\n \n@@ -16426,7 +16270,7 @@\n \n   emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n   emit_insn (gen_exp10xf2 (op0, op1));\n-  emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n+  emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n   DONE;\n })\n \n@@ -16460,7 +16304,7 @@\n \n   emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n   emit_insn (gen_exp2xf2 (op0, op1));\n-  emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n+  emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n   DONE;\n })\n \n@@ -16516,7 +16360,7 @@\n \n   emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n   emit_insn (gen_expm1xf2 (op0, op1));\n-  emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n+  emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n   DONE;\n })\n \n@@ -16554,7 +16398,7 @@\n \n   emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n   emit_insn (gen_ldexpxf3 (op0, op1, operands[2]));\n-  emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n+  emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n   DONE;\n })\n \n@@ -16590,7 +16434,7 @@\n   emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n   emit_insn (gen_extend<mode>xf2 (op2, operands[2]));\n   emit_insn (gen_scalbxf3 (op0, op1, op2));\n-  emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n+  emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n   DONE;\n })\n \n@@ -16616,7 +16460,7 @@\n   rtx op1 = gen_reg_rtx (XFmode);\n \n   emit_insn (gen_fxtract_extend<mode>xf3_i387 (op0, op1, operands[1]));\n-  emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n+  emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n   DONE;\n })\n \f\n@@ -17053,7 +16897,7 @@\n   emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n   emit_insn (gen_frndintxf2_mask_pm (op0, op1));\n \n-  emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n+  emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n   DONE;\n })\n "}]}