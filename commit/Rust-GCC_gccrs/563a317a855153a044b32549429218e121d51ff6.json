{"sha": "563a317a855153a044b32549429218e121d51ff6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYzYTMxN2E4NTUxNTNhMDQ0YjMyNTQ5NDI5MjE4ZTEyMWQ1MWZmNg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-02-19T18:03:11Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-02-19T18:03:11Z"}, "message": "calls.c (expand_call): Update call of INIT_CUMULATIVE_ARGS\n\n\t* calls.c (expand_call): Update call of INIT_CUMULATIVE_ARGS\n\t* function.c (assign_params): Likewise.\n\t* arm-protos.h (arm_init_cumulative_args): Update prototype.\n\t* arm.c (arm_init_cumulative_args): Update function.\n\t* arm.h (INIT_CUMULATIVE_ARGS): Update.\n\t* avr-protos.h (init_cumulative_args): Update prototype.\n\t* avr.c (init_cumulative_args): Update function.\n\t* avr.h (INIT_CUMULATIVE_ARGS): Update.\n\t* d30v-protos.h (d30v_init_cumulative_args): Update prototype.\n\t* d30v.c (d30v_init_cumulative_args): Update function.\n\t* d30v.h (INIT_CUMULATIVE_ARGS): Update.\n\t* frv-protos.h (frv_init_cumulative_args): Update prototype.\n\t* frv.c (frv_init_cumulative_args): Update function.\n\t* frv.h (INIT_CUMULATIVE_ARGS): Update.\n\t* mips.c (mips_expand_prolgue): Update call of INIT_CUMULATIVE_ARGS.\n\t* pa.h (INIT_CUMULATIVE_ARGS): Update.\n\t* sparc-protos.h (init_cumulative_args): Update prototype.\n\t* sparc.c (init_cumulative_args): Update function.\n\t* sparc.h (INIT_CUMULATIVE_ARGS): Update.\n\t* tm.texi (INIT_CUMULATIVE_ARGS): Update documentation.\n\nFrom-SVN: r63126", "tree": {"sha": "d994276a004a7febbbe86a52d5f1a8529fea9fa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d994276a004a7febbbe86a52d5f1a8529fea9fa5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/563a317a855153a044b32549429218e121d51ff6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/563a317a855153a044b32549429218e121d51ff6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/563a317a855153a044b32549429218e121d51ff6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/563a317a855153a044b32549429218e121d51ff6/comments", "author": null, "committer": null, "parents": [{"sha": "be9d08c2efc6908e863d7c943e8807169a8367a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be9d08c2efc6908e863d7c943e8807169a8367a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be9d08c2efc6908e863d7c943e8807169a8367a0"}], "stats": {"total": 109, "additions": 65, "deletions": 44}, "files": [{"sha": "9585c69c2124e5a359dc68a5a6df3fdff3c31de3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563a317a855153a044b32549429218e121d51ff6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563a317a855153a044b32549429218e121d51ff6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=563a317a855153a044b32549429218e121d51ff6", "patch": "@@ -1,3 +1,26 @@\n+Wed Feb 19 19:00:24 CET 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* calls.c (expand_call): Update call of INIT_CUMULATIVE_ARGS\n+\t* function.c (assign_params): Likewise.\n+\t* arm-protos.h (arm_init_cumulative_args): Update prototype.\n+\t* arm.c (arm_init_cumulative_args): Update function.\n+\t* arm.h (INIT_CUMULATIVE_ARGS): Update.\n+\t* avr-protos.h (init_cumulative_args): Update prototype.\n+\t* avr.c (init_cumulative_args): Update function.\n+\t* avr.h (INIT_CUMULATIVE_ARGS): Update.\n+\t* d30v-protos.h (d30v_init_cumulative_args): Update prototype.\n+\t* d30v.c (d30v_init_cumulative_args): Update function.\n+\t* d30v.h (INIT_CUMULATIVE_ARGS): Update.\n+\t* frv-protos.h (frv_init_cumulative_args): Update prototype.\n+\t* frv.c (frv_init_cumulative_args): Update function.\n+\t* frv.h (INIT_CUMULATIVE_ARGS): Update.\n+\t* mips.c (mips_expand_prolgue): Update call of INIT_CUMULATIVE_ARGS.\n+\t* pa.h (INIT_CUMULATIVE_ARGS): Update.\n+\t* sparc-protos.h (init_cumulative_args): Update prototype.\n+\t* sparc.c (init_cumulative_args): Update function.\n+\t* sparc.h (INIT_CUMULATIVE_ARGS): Update.\n+\t* tm.texi (INIT_CUMULATIVE_ARGS): Update documentation.\n+\n 2003-02-19  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.md (*iorsi3_two_qi_sext): New."}, {"sha": "b0920e07e1aa2d14fc5fa15890a077cd6c4ecc5e", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563a317a855153a044b32549429218e121d51ff6/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563a317a855153a044b32549429218e121d51ff6/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=563a317a855153a044b32549429218e121d51ff6", "patch": "@@ -1674,7 +1674,7 @@ sched-rgn.o : sched-rgn.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h $(TM_P_H) $(TARGET_H)\n sched-ebb.o : sched-ebb.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    sched-int.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h flags.h insn-config.h function.h \\\n-   $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h $(TM_P_H)\n+   $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h $(TM_P_H) $(PARAMS_H) profile.h\n sched-vis.o : sched-vis.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    sched-int.h hard-reg-set.h $(BASIC_BLOCK_H) $(INSN_ATTR_H) $(REGS_H) $(TM_P_H) \\\n    $(TARGET_H) real.h"}, {"sha": "4102c01b87838421429c06596130eb4607bdf566", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563a317a855153a044b32549429218e121d51ff6/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563a317a855153a044b32549429218e121d51ff6/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=563a317a855153a044b32549429218e121d51ff6", "patch": "@@ -2418,7 +2418,7 @@ expand_call (exp, target, ignore)\n      calling convention than normal calls.  The last argument in\n      INIT_CUMULATIVE_ARGS tells the backend if this is an indirect call\n      or not.  */\n-  INIT_CUMULATIVE_ARGS (args_so_far, funtype, NULL_RTX, (fndecl == 0));\n+  INIT_CUMULATIVE_ARGS (args_so_far, funtype, NULL_RTX, fndecl);\n \n   /* Make a vector to hold all the information about each arg.  */\n   args = (struct arg_data *) alloca (num_actuals * sizeof (struct arg_data));"}, {"sha": "ad4ebffe3438d482cbb811b056bb01501422052e", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=563a317a855153a044b32549429218e121d51ff6", "patch": "@@ -149,7 +149,7 @@ extern int    arm_is_longcall_p \tPARAMS ((rtx, int, int));\n extern rtx    arm_function_arg\t\tPARAMS ((CUMULATIVE_ARGS *,\n \t\t\t\t\t\tenum machine_mode, tree, int));\n extern void   arm_init_cumulative_args\tPARAMS ((CUMULATIVE_ARGS *, tree, rtx,\n-\t\t\t\t\t\tint));\n+\t\t\t\t\t\ttree));\n extern rtx    arm_va_arg                PARAMS ((tree, tree));\n extern int    arm_function_arg_pass_by_reference PARAMS ((CUMULATIVE_ARGS *,\n \t\t\t\t\t\t\t enum machine_mode,"}, {"sha": "5650ffbd086a8e4fc1a8b389ed1a243f15164b3f", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=563a317a855153a044b32549429218e121d51ff6", "patch": "@@ -1957,11 +1957,11 @@ arm_float_words_big_endian ()\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is NULL.  */\n void\n-arm_init_cumulative_args (pcum, fntype, libname, indirect)\n+arm_init_cumulative_args (pcum, fntype, libname, fndecl)\n      CUMULATIVE_ARGS * pcum;\n      tree fntype;\n      rtx libname  ATTRIBUTE_UNUSED;\n-     int indirect ATTRIBUTE_UNUSED;\n+     tree fndecl ATTRIBUTE_UNUSED;\n {\n   /* On the ARM, the offset starts at 0.  */\n   pcum->nregs = ((fntype && aggregate_value_p (TREE_TYPE (fntype))) ? 1 : 0);"}, {"sha": "3856446bc56b4b515293a9b2f1753ab6307094b5", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=563a317a855153a044b32549429218e121d51ff6", "patch": "@@ -1572,8 +1572,8 @@ typedef struct\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.\n    On the ARM, the offset starts at 0.  */\n-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT) \\\n-  arm_init_cumulative_args (&(CUM), (FNTYPE), (LIBNAME), (INDIRECT))\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL) \\\n+  arm_init_cumulative_args (&(CUM), (FNTYPE), (LIBNAME), (FNDECL))\n \n /* Update the data in CUM to advance over an argument\n    of mode MODE and data type TYPE."}, {"sha": "e813c522378c0906147f516a0baa6e6c450adb51", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=563a317a855153a044b32549429218e121d51ff6", "patch": "@@ -52,7 +52,7 @@ extern int    avr_progmem_p                PARAMS ((tree decl));\n extern rtx    avr_function_value           PARAMS ((tree type, tree func));\n extern void   init_cumulative_args         PARAMS ((CUMULATIVE_ARGS *cum,\n \t\t\t\t\t\t   tree fntype, rtx libname,\n-\t\t\t\t\t\t   int indirect));\n+\t\t\t\t\t\t   tree fndecl));\n extern rtx    function_arg         PARAMS ((CUMULATIVE_ARGS *cum,\n \t\t\t\t\t   enum machine_mode mode,\n \t\t\t\t\t   tree type, int named));"}, {"sha": "238005959e9f45ef8f3129252e43f64372137fda", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=563a317a855153a044b32549429218e121d51ff6", "patch": "@@ -1488,11 +1488,11 @@ function_arg_regno_p(r)\n    of the argument list.  */\n \n void\n-init_cumulative_args (cum, fntype, libname, indirect)\n+init_cumulative_args (cum, fntype, libname, fndecl)\n      CUMULATIVE_ARGS *cum;\n      tree fntype;\n      rtx libname;\n-     int indirect ATTRIBUTE_UNUSED;\n+     tree fndecl;\n {\n   cum->nregs = 18;\n   cum->regno = FIRST_CUM_REG;"}, {"sha": "77bcd3807acece8e241560abf51673b6c54ae535", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=563a317a855153a044b32549429218e121d51ff6", "patch": "@@ -1136,7 +1136,7 @@ typedef struct avr_args {\n    store anything in `CUMULATIVE_ARGS'; however, the data structure\n    must exist and should not be empty, so use `int'.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT) init_cumulative_args (&(CUM), FNTYPE, LIBNAME, INDIRECT)\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL) init_cumulative_args (&(CUM), FNTYPE, LIBNAME, FNDECL)\n \n /* A C statement (sans semicolon) for initializing the variable CUM\n    for the state at the beginning of the argument list.  The variable"}, {"sha": "4089687a5ec9d6c7168b6b781b894d5330612169", "filename": "gcc/config/d30v/d30v-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Fd30v%2Fd30v-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Fd30v%2Fd30v-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v-protos.h?ref=563a317a855153a044b32549429218e121d51ff6", "patch": "@@ -75,7 +75,7 @@ extern int direct_return\t\tPARAMS ((void));\n #ifdef TREE_CODE\n #ifdef RTX_CODE\n extern void d30v_init_cumulative_args\tPARAMS ((CUMULATIVE_ARGS *, tree,\n-\t\t\t\t\t\t rtx, int, int));\n+\t\t\t\t\t\t rtx, tree, int));\n #endif\n extern int d30v_function_arg_boundary\tPARAMS ((enum machine_mode, tree));\n #ifdef RTX_CODE"}, {"sha": "17b506862a87151c2de1736e1447543ccca5a0a9", "filename": "gcc/config/d30v/d30v.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Fd30v%2Fd30v.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Fd30v%2Fd30v.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.c?ref=563a317a855153a044b32549429218e121d51ff6", "patch": "@@ -1922,15 +1922,15 @@ d30v_init_cumulative_args (cum, fntype, libname, indirect, incoming)\n      CUMULATIVE_ARGS *cum;\n      tree fntype;\n      rtx libname;\n-     int indirect;\n+     tree fndecl;\n      int incoming;\n {\n   *cum = GPR_ARG_FIRST;\n \n   if (TARGET_DEBUG_ARG)\n     {\n       fprintf (stderr, \"\\ninit_cumulative_args:\");\n-      if (indirect)\n+      if (!fndecl && fntype)\n \tfputs (\" indirect\", stderr);\n \n       if (incoming)"}, {"sha": "313842976434676cd064a26149ce45dbb7853040", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=563a317a855153a044b32549429218e121d51ff6", "patch": "@@ -1622,8 +1622,8 @@ typedef struct d30v_stack {\n    being processed.  Thus, each time this macro is called, either LIBNAME or\n    FNTYPE is nonzero, but never both of them at once.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT) \\\n-  d30v_init_cumulative_args (&CUM, FNTYPE, LIBNAME, INDIRECT, FALSE)\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL) \\\n+  d30v_init_cumulative_args (&CUM, FNTYPE, LIBNAME, FNDECL, FALSE)\n \n /* Like `INIT_CUMULATIVE_ARGS' but overrides it for the purposes of finding the\n    arguments for the function being compiled.  If this macro is undefined,\n@@ -1634,7 +1634,7 @@ typedef struct d30v_stack {\n    LIBNAME exists for symmetry with `INIT_CUMULATIVE_ARGS'.  */\n \n #define INIT_CUMULATIVE_INCOMING_ARGS(CUM, FNTYPE, LIBNAME) \\\n-  d30v_init_cumulative_args (&CUM, FNTYPE, LIBNAME, FALSE, TRUE)\n+  d30v_init_cumulative_args (&CUM, FNTYPE, LIBNAME, NULL, TRUE)\n \n /* A C statement (sans semicolon) to update the summarizer variable CUM to\n    advance past an argument in the argument list.  The values MODE, TYPE and"}, {"sha": "c291feabcb351fddfe2773fe58fcefe91701112f", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=563a317a855153a044b32549429218e121d51ff6", "patch": "@@ -70,7 +70,7 @@ extern rtx frv_legitimize_address\t\tPARAMS ((rtx, rtx,\n \n #ifdef TREE_CODE\n extern void frv_init_cumulative_args\t\tPARAMS ((CUMULATIVE_ARGS *, tree,\n-\t\t\t\t\t\t       rtx, int, int));\n+\t\t\t\t\t\t       rtx, tree, int));\n \n extern int frv_function_arg_boundary\t\tPARAMS ((enum machine_mode, tree));\n extern rtx frv_function_arg\t\t\tPARAMS ((CUMULATIVE_ARGS *,"}, {"sha": "430d9b2682ebc56a78f988087c53a9d33a58f3e9", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=563a317a855153a044b32549429218e121d51ff6", "patch": "@@ -3081,19 +3081,19 @@ frv_print_operand (file, x, code)\n    FNTYPE is nonzero, but never both of them at once.  */\n \n void\n-frv_init_cumulative_args (cum, fntype, libname, indirect, incoming)\n+frv_init_cumulative_args (cum, fntype, libname, fndecl, incoming)\n      CUMULATIVE_ARGS *cum;\n      tree fntype;\n      rtx libname;\n-     int indirect;\n+     tree fndecl;\n      int incoming;\n {\n   *cum = FIRST_ARG_REGNUM;\n \n   if (TARGET_DEBUG_ARG)\n     {\n       fprintf (stderr, \"\\ninit_cumulative_args:\");\n-      if (indirect)\n+      if (!fndecl && fntype)\n \tfputs (\" indirect\", stderr);\n \n       if (incoming)"}, {"sha": "b52a45472581facdc5b5b667e548d352e29d3158", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=563a317a855153a044b32549429218e121d51ff6", "patch": "@@ -1955,8 +1955,8 @@ struct machine_function GTY(())\n    being processed.  Thus, each time this macro is called, either LIBNAME or\n    FNTYPE is nonzero, but never both of them at once.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT) \\\n-  frv_init_cumulative_args (&CUM, FNTYPE, LIBNAME, INDIRECT, FALSE)\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL) \\\n+  frv_init_cumulative_args (&CUM, FNTYPE, LIBNAME, FNDECL, FALSE)\n \n /* Like `INIT_CUMULATIVE_ARGS' but overrides it for the purposes of finding the\n    arguments for the function being compiled.  If this macro is undefined,\n@@ -1967,7 +1967,7 @@ struct machine_function GTY(())\n    LIBNAME exists for symmetry with `INIT_CUMULATIVE_ARGS'.  */\n \n #define INIT_CUMULATIVE_INCOMING_ARGS(CUM, FNTYPE, LIBNAME) \\\n-  frv_init_cumulative_args (&CUM, FNTYPE, LIBNAME, FALSE, TRUE)\n+  frv_init_cumulative_args (&CUM, FNTYPE, LIBNAME, NULL, TRUE)\n \n /* A C statement (sans semicolon) to update the summarizer variable CUM to\n    advance past an argument in the argument list.  The values MODE, TYPE and"}, {"sha": "d31caebdf5e9516f5c495b4de5f0def93f63d19c", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=563a317a855153a044b32549429218e121d51ff6", "patch": "@@ -7748,7 +7748,7 @@ mips_expand_prologue ()\n \n      This is only needed if store_args_on_stack is true.  */\n \n-  INIT_CUMULATIVE_ARGS (args_so_far, fntype, NULL_RTX, 0);\n+  INIT_CUMULATIVE_ARGS (args_so_far, fntype, NULL_RTX, current_function_decl);\n   regno = GP_ARG_FIRST;\n \n   for (cur_arg = fnargs; cur_arg != 0; cur_arg = next_arg)"}, {"sha": "e03c1b80251a0a65433961c80473847bbceb074e", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=563a317a855153a044b32549429218e121d51ff6", "patch": "@@ -769,9 +769,9 @@ struct hppa_args {int words, nargs_prototype, indirect; };\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT) \\\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,FNDECL) \\\n   (CUM).words = 0, \t\t\t\t\t\t\t\\\n-  (CUM).indirect = INDIRECT,\t\t\t\t\t\t\\\n+  (CUM).indirect = (FNTYPE) && !(FNDECL),\t\t\t\t\\\n   (CUM).nargs_prototype = (FNTYPE && TYPE_ARG_TYPES (FNTYPE)\t\t\\\n \t\t\t   ? (list_length (TYPE_ARG_TYPES (FNTYPE)) - 1\t\\\n \t\t\t      + (TYPE_MODE (TREE_TYPE (FNTYPE)) == BLKmode \\"}, {"sha": "d12e9ef09ef84b5176abb283055540f7f6176bd2", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=563a317a855153a044b32549429218e121d51ff6", "patch": "@@ -41,7 +41,7 @@ extern int function_arg_pass_by_reference PARAMS ((const CUMULATIVE_ARGS *,\n \t\t\t\t\t\t   tree, int));\n extern struct rtx_def *sparc_builtin_saveregs PARAMS ((void));\n #ifdef RTX_CODE\n-extern void init_cumulative_args PARAMS ((CUMULATIVE_ARGS *, tree, rtx, int));\n+extern void init_cumulative_args PARAMS ((CUMULATIVE_ARGS *, tree, rtx, tree));\n extern void sparc_va_start PARAMS ((tree, rtx));\n #endif\n extern struct rtx_def *sparc_va_arg PARAMS ((tree, tree));"}, {"sha": "bb84f45cb092b430c70153d0c3a2bc7211566ee7", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=563a317a855153a044b32549429218e121d51ff6", "patch": "@@ -4367,11 +4367,11 @@ output_sibcall (insn, call_operand)\n    For a library call, FNTYPE is 0.  */\n \n void\n-init_cumulative_args (cum, fntype, libname, indirect)\n+init_cumulative_args (cum, fntype, libname, fndecl)\n      CUMULATIVE_ARGS *cum;\n      tree fntype;\n      rtx libname ATTRIBUTE_UNUSED;\n-     int indirect ATTRIBUTE_UNUSED;\n+     tree fndecl ATTRIBUTE_UNUSED;\n {\n   cum->words = 0;\n   cum->prototype_p = fntype && TYPE_ARG_TYPES (fntype);"}, {"sha": "a41f6b59428823f16f474d8e77863692ffb4b3ee", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563a317a855153a044b32549429218e121d51ff6/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=563a317a855153a044b32549429218e121d51ff6", "patch": "@@ -1734,8 +1734,8 @@ struct sparc_args {\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT) \\\n-init_cumulative_args (& (CUM), (FNTYPE), (LIBNAME), (INDIRECT));\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL) \\\n+init_cumulative_args (& (CUM), (FNTYPE), (LIBNAME), (FNDECL));\n \n /* Update the data in CUM to advance over an argument\n    of mode MODE and data type TYPE."}, {"sha": "ed00f0733ff791335799b6a9e05e5b0a70b81f37", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563a317a855153a044b32549429218e121d51ff6/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563a317a855153a044b32549429218e121d51ff6/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=563a317a855153a044b32549429218e121d51ff6", "patch": "@@ -3664,17 +3664,15 @@ arguments are passed on the stack, there is no need to store anything in\n should not be empty, so use @code{int}.\n \n @findex INIT_CUMULATIVE_ARGS\n-@item INIT_CUMULATIVE_ARGS (@var{cum}, @var{fntype}, @var{libname}, @var{indirect})\n-A C statement (sans semicolon) for initializing the variable @var{cum}\n-for the state at the beginning of the argument list.  The variable has\n-type @code{CUMULATIVE_ARGS}.  The value of @var{fntype} is the tree node\n-for the data type of the function which will receive the args, or 0\n-if the args are to a compiler support library function.  The value of\n-@var{indirect} is nonzero when processing an indirect call, for example\n-a call through a function pointer.  The value of @var{indirect} is zero\n-for a call to an explicitly named function, a library function call, or when\n-@code{INIT_CUMULATIVE_ARGS} is used to find arguments for the function\n-being compiled.\n+@item INIT_CUMULATIVE_ARGS (@var{cum}, @var{fntype}, @var{libname},\n+@var{fndecl}) A C statement (sans semicolon) for initializing the variable\n+@var{cum} for the state at the beginning of the argument list.  The variable\n+has type @code{CUMULATIVE_ARGS}.  The value of @var{fntype} is the tree node\n+for the data type of the function which will receive the args, or 0 if the args\n+are to a compiler support library function.  For direct calls that are not\n+libcalls, @var{fndecl} contain the declaration node of the function.\n+@var{fndecl} is also set when code{INIT_CUMULATIVE_ARGS} is used to find\n+arguments for the function being compiled.\n \n When processing a call to a compiler support library function,\n @var{libname} identifies which one.  It is a @code{symbol_ref} rtx which"}, {"sha": "e6df55d38293cb7383a26fcf48ce86edd3c9f457", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563a317a855153a044b32549429218e121d51ff6/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563a317a855153a044b32549429218e121d51ff6/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=563a317a855153a044b32549429218e121d51ff6", "patch": "@@ -4273,7 +4273,7 @@ assign_parms (fndecl)\n #ifdef INIT_CUMULATIVE_INCOMING_ARGS\n   INIT_CUMULATIVE_INCOMING_ARGS (args_so_far, fntype, NULL_RTX);\n #else\n-  INIT_CUMULATIVE_ARGS (args_so_far, fntype, NULL_RTX, 0);\n+  INIT_CUMULATIVE_ARGS (args_so_far, fntype, NULL_RTX, fndecl);\n #endif\n \n   /* We haven't yet found an argument that we must push and pretend the"}]}