{"sha": "739d15ab1771aff57c8601b4256a40de131cc975", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM5ZDE1YWIxNzcxYWZmNTdjODYwMWI0MjU2YTQwZGUxMzFjYzk3NQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-27T20:19:57Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-27T20:19:57Z"}, "message": "(finish_decl, finish_function): Issue warning for large objects, if\nrequested.\n\nFrom-SVN: r6653", "tree": {"sha": "5dbe15e64402a6a5fb6483c13c5b2289c33e9c7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dbe15e64402a6a5fb6483c13c5b2289c33e9c7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/739d15ab1771aff57c8601b4256a40de131cc975", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/739d15ab1771aff57c8601b4256a40de131cc975", "html_url": "https://github.com/Rust-GCC/gccrs/commit/739d15ab1771aff57c8601b4256a40de131cc975", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/739d15ab1771aff57c8601b4256a40de131cc975/comments", "author": null, "committer": null, "parents": [{"sha": "b51e9c62f99d0cbd87924771f08c3485a0f12300", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b51e9c62f99d0cbd87924771f08c3485a0f12300", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b51e9c62f99d0cbd87924771f08c3485a0f12300"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "76d890b8e0493ecc8a1c013ad3bf80f0599bd67d", "filename": "gcc/c-decl.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/739d15ab1771aff57c8601b4256a40de131cc975/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/739d15ab1771aff57c8601b4256a40de131cc975/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=739d15ab1771aff57c8601b4256a40de131cc975", "patch": "@@ -3589,6 +3589,23 @@ finish_decl (decl, init, asmspec_tree)\n \t}\n     }\n \n+  /* If requested, warn about definitions of large data objects.  */\n+\n+  if (warn_larger_than\n+      && (TREE_CODE (decl) == VAR_DECL || TREE_CODE (decl) == PARM_DECL)\n+      && !DECL_EXTERNAL (decl))\n+    {\n+      register tree decl_size = DECL_SIZE (decl);\n+\n+      if (decl_size && TREE_CODE (decl_size) == INTEGER_CST)\n+\t{\n+\t   unsigned units = TREE_INT_CST_LOW(decl_size) / BITS_PER_UNIT;\n+\n+\t  if (units > larger_than_size)\n+\t    warning_with_decl (decl, \"size of `%s' is %u bytes\", units);\n+\t}\n+    }\n+\n #if 0\n   /* Resume permanent allocation, if not within a function.  */\n   /* The corresponding push_obstacks_nochange is in start_decl,\n@@ -6499,6 +6516,31 @@ finish_function (nested)\n \t   && current_function_returns_value && current_function_returns_null)\n     warning (\"this function may return with or without a value\");\n \n+  /* If requested, warn about function definitions where the function will\n+     return a value (usually of some struct or union type) which itself will\n+     take up a lot of stack space.  */\n+\n+  if (warn_larger_than && !DECL_EXTERNAL (fndecl) && TREE_TYPE (fndecl))\n+    {\n+      register tree ret_type = TREE_TYPE (TREE_TYPE (fndecl));\n+\n+      if (ret_type)\n+\t{\n+\t  register tree ret_type_size = TYPE_SIZE (ret_type);\n+\n+\t  if (TREE_CODE (ret_type_size) == INTEGER_CST)\n+\t    {\n+\t      unsigned units\n+\t\t= TREE_INT_CST_LOW (ret_type_size) / BITS_PER_UNIT;\n+\n+\t      if (units > larger_than_size)\n+\t\twarning_with_decl (fndecl,\n+\t\t\t\t   \"size of return value of `%s' is %u bytes\",\n+\t\t\t\t   units);\n+\t    }\n+\t}\n+    }\n+\n   /* Free all the tree nodes making up this function.  */\n   /* Switch back to allocating nodes permanently\n      until we start another function.  */"}]}