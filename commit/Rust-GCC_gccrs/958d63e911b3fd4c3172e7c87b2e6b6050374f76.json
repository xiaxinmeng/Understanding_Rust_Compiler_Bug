{"sha": "958d63e911b3fd4c3172e7c87b2e6b6050374f76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU4ZDYzZTkxMWIzZmQ0YzMxNzJlN2M4N2IyZTZiNjA1MDM3NGY3Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-01-05T16:40:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-01-05T16:40:24Z"}, "message": "re PR target/83604 (ICE in copy_to_mode_reg, at explow.c:630)\n\n\tPR target/83604\n\t* config/i386/i386-builtin.def\n\t(__builtin_ia32_vgf2p8affineinvqb_v64qi,\n\t__builtin_ia32_vgf2p8affineqb_v64qi, __builtin_ia32_vgf2p8mulb_v64qi):\n\tRequire also OPTION_MASK_ISA_AVX512F in addition to\n\tOPTION_MASK_ISA_GFNI.\n\t(__builtin_ia32_vgf2p8affineinvqb_v16qi_mask,\n\t__builtin_ia32_vgf2p8affineqb_v16qi_mask): Require\n\tOPTION_MASK_ISA_AVX512VL instead of OPTION_MASK_ISA_SSE in addition\n\tto OPTION_MASK_ISA_GFNI.\n\t(__builtin_ia32_vgf2p8mulb_v32qi_mask): Require\n\tOPTION_MASK_ISA_AVX512VL in addition to OPTION_MASK_ISA_GFNI and\n\tOPTION_MASK_ISA_AVX512BW.\n\t(__builtin_ia32_vgf2p8mulb_v16qi_mask): Require\n\tOPTION_MASK_ISA_AVX512VL instead of OPTION_MASK_ISA_AVX512BW in\n\taddition to OPTION_MASK_ISA_GFNI.\n\t(__builtin_ia32_vgf2p8affineinvqb_v16qi,\n\t__builtin_ia32_vgf2p8affineqb_v16qi, __builtin_ia32_vgf2p8mulb_v16qi):\n\tRequire OPTION_MASK_ISA_SSE2 instead of OPTION_MASK_ISA_SSE in addition\n\tto OPTION_MASK_ISA_GFNI.\n\t* config/i386/i386.c (def_builtin): Change to builtin isa/isa2 being\n\ta requirement for all ISAs rather than any of them with a few\n\texceptions.\n\t(ix86_add_new_builtins): Clear OPTION_MASK_ISA_64BIT from isa before\n\tprocessing.\n\t(ix86_expand_builtin): Require all ISAs from builtin's isa and isa2\n\tbitmasks to be enabled with 3 exceptions, instead of requiring any\n\tenabled ISA with lots of exceptions.\n\t* config/i386/sse.md (vgf2p8affineinvqb_<mode><mask_name>,\n\tvgf2p8affineqb_<mode><mask_name>, vgf2p8mulb_<mode><mask_name>):\n\tChange avx512bw in isa attribute to avx512f.\n\t* config/i386/sgxintrin.h: Add license boilerplate.\n\t* config/i386/vaesintrin.h: Likewise.  Fix macro spelling __AVX512F\n\tto __AVX512F__ and __AVX512VL to __AVX512VL__.\n\t(_mm256_aesdec_epi128, _mm256_aesdeclast_epi128, _mm256_aesenc_epi128,\n\t_mm256_aesenclast_epi128): Enable temporarily avx if __AVX__ is not\n\tdefined.\n\t* config/i386/gfniintrin.h (_mm_gf2p8mul_epi8,\n\t_mm_gf2p8affineinv_epi64_epi8, _mm_gf2p8affine_epi64_epi8): Enable\n\ttemporarily sse2 rather than sse if not enabled already.\n\n\t* gcc.target/i386/sse-26.c: New test.\n\nFrom-SVN: r256281", "tree": {"sha": "f2d0de79cde49324d779cf862ca60dee36ec48ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2d0de79cde49324d779cf862ca60dee36ec48ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/958d63e911b3fd4c3172e7c87b2e6b6050374f76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/958d63e911b3fd4c3172e7c87b2e6b6050374f76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/958d63e911b3fd4c3172e7c87b2e6b6050374f76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/958d63e911b3fd4c3172e7c87b2e6b6050374f76/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d33e32a7236e05137aa5383a8585d26e482238ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d33e32a7236e05137aa5383a8585d26e482238ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d33e32a7236e05137aa5383a8585d26e482238ce"}], "stats": {"total": 216, "additions": 149, "deletions": 67}, "files": [{"sha": "a325a19a9933ce80df90f2938e14a4de501fb210", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/958d63e911b3fd4c3172e7c87b2e6b6050374f76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/958d63e911b3fd4c3172e7c87b2e6b6050374f76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=958d63e911b3fd4c3172e7c87b2e6b6050374f76", "patch": "@@ -1,5 +1,46 @@\n 2018-01-05  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/83604\n+\t* config/i386/i386-builtin.def\n+\t(__builtin_ia32_vgf2p8affineinvqb_v64qi,\n+\t__builtin_ia32_vgf2p8affineqb_v64qi, __builtin_ia32_vgf2p8mulb_v64qi):\n+\tRequire also OPTION_MASK_ISA_AVX512F in addition to\n+\tOPTION_MASK_ISA_GFNI.\n+\t(__builtin_ia32_vgf2p8affineinvqb_v16qi_mask,\n+\t__builtin_ia32_vgf2p8affineqb_v16qi_mask): Require\n+\tOPTION_MASK_ISA_AVX512VL instead of OPTION_MASK_ISA_SSE in addition\n+\tto OPTION_MASK_ISA_GFNI.\n+\t(__builtin_ia32_vgf2p8mulb_v32qi_mask): Require\n+\tOPTION_MASK_ISA_AVX512VL in addition to OPTION_MASK_ISA_GFNI and\n+\tOPTION_MASK_ISA_AVX512BW.\n+\t(__builtin_ia32_vgf2p8mulb_v16qi_mask): Require\n+\tOPTION_MASK_ISA_AVX512VL instead of OPTION_MASK_ISA_AVX512BW in\n+\taddition to OPTION_MASK_ISA_GFNI.\n+\t(__builtin_ia32_vgf2p8affineinvqb_v16qi,\n+\t__builtin_ia32_vgf2p8affineqb_v16qi, __builtin_ia32_vgf2p8mulb_v16qi):\n+\tRequire OPTION_MASK_ISA_SSE2 instead of OPTION_MASK_ISA_SSE in addition\n+\tto OPTION_MASK_ISA_GFNI.\n+\t* config/i386/i386.c (def_builtin): Change to builtin isa/isa2 being\n+\ta requirement for all ISAs rather than any of them with a few\n+\texceptions.\n+\t(ix86_add_new_builtins): Clear OPTION_MASK_ISA_64BIT from isa before\n+\tprocessing.\n+\t(ix86_expand_builtin): Require all ISAs from builtin's isa and isa2\n+\tbitmasks to be enabled with 3 exceptions, instead of requiring any\n+\tenabled ISA with lots of exceptions.\n+\t* config/i386/sse.md (vgf2p8affineinvqb_<mode><mask_name>,\n+\tvgf2p8affineqb_<mode><mask_name>, vgf2p8mulb_<mode><mask_name>):\n+\tChange avx512bw in isa attribute to avx512f.\n+\t* config/i386/sgxintrin.h: Add license boilerplate.\n+\t* config/i386/vaesintrin.h: Likewise.  Fix macro spelling __AVX512F\n+\tto __AVX512F__ and __AVX512VL to __AVX512VL__.\n+\t(_mm256_aesdec_epi128, _mm256_aesdeclast_epi128, _mm256_aesenc_epi128,\n+\t_mm256_aesenclast_epi128): Enable temporarily avx if __AVX__ is not\n+\tdefined.\n+\t* config/i386/gfniintrin.h (_mm_gf2p8mul_epi8,\n+\t_mm_gf2p8affineinv_epi64_epi8, _mm_gf2p8affine_epi64_epi8): Enable\n+\ttemporarily sse2 rather than sse if not enabled already.\n+\n \tPR target/83604\n \t* config/i386/sse.md (VI248_VLBW): Rename to ...\n \t(VI248_AVX512VL): ... this.  Don't guard V32HI with TARGET_AVX512BW."}, {"sha": "5bd040fc53d9ab21ca1f5237430cdfee8649ce09", "filename": "gcc/config/i386/gfniintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/958d63e911b3fd4c3172e7c87b2e6b6050374f76/gcc%2Fconfig%2Fi386%2Fgfniintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/958d63e911b3fd4c3172e7c87b2e6b6050374f76/gcc%2Fconfig%2Fi386%2Fgfniintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgfniintrin.h?ref=958d63e911b3fd4c3172e7c87b2e6b6050374f76", "patch": "@@ -28,9 +28,9 @@\n #ifndef _GFNIINTRIN_H_INCLUDED\n #define _GFNIINTRIN_H_INCLUDED\n \n-#if !defined(__GFNI__) || !defined(__SSE__)\n+#if !defined(__GFNI__) || !defined(__SSE2__)\n #pragma GCC push_options\n-#pragma GCC target(\"gfni,sse\")\n+#pragma GCC target(\"gfni,sse2\")\n #define __DISABLE_GFNI__\n #endif /* __GFNI__ */\n "}, {"sha": "ee21f3deca39f1b4c38f21de3e675c20dde9e2ee", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/958d63e911b3fd4c3172e7c87b2e6b6050374f76/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/958d63e911b3fd4c3172e7c87b2e6b6050374f76/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=958d63e911b3fd4c3172e7c87b2e6b6050374f76", "patch": "@@ -2530,24 +2530,24 @@ BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshldv_\n BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpshldv_v2di_maskz, \"__builtin_ia32_vpshldv_v2di_maskz\", IX86_BUILTIN_VPSHLDVV2DI_MASKZ, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI_INT)\n \n /* GFNI */\n-BDESC (OPTION_MASK_ISA_GFNI, CODE_FOR_vgf2p8affineinvqb_v64qi, \"__builtin_ia32_vgf2p8affineinvqb_v64qi\", IX86_BUILTIN_VGF2P8AFFINEINVQB512, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_INT)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512F, CODE_FOR_vgf2p8affineinvqb_v64qi, \"__builtin_ia32_vgf2p8affineinvqb_v64qi\", IX86_BUILTIN_VGF2P8AFFINEINVQB512, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_INT)\n BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vgf2p8affineinvqb_v64qi_mask, \"__builtin_ia32_vgf2p8affineinvqb_v64qi_mask\", IX86_BUILTIN_VGF2P8AFFINEINVQB512MASK, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_INT_V64QI_UDI)\n BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX, CODE_FOR_vgf2p8affineinvqb_v32qi, \"__builtin_ia32_vgf2p8affineinvqb_v32qi\", IX86_BUILTIN_VGF2P8AFFINEINVQB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_INT)\n-BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vgf2p8affineinvqb_v32qi_mask, \"__builtin_ia32_vgf2p8affineinvqb_v32qi_mask\", IX86_BUILTIN_VGF2P8AFFINEINVQB256MASK, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_INT_V32QI_USI)\n-BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_SSE, CODE_FOR_vgf2p8affineinvqb_v16qi, \"__builtin_ia32_vgf2p8affineinvqb_v16qi\", IX86_BUILTIN_VGF2P8AFFINEINVQB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_INT)\n-BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_SSE, CODE_FOR_vgf2p8affineinvqb_v16qi_mask, \"__builtin_ia32_vgf2p8affineinvqb_v16qi_mask\", IX86_BUILTIN_VGF2P8AFFINEINVQB128MASK, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_INT_V16QI_UHI)\n-BDESC (OPTION_MASK_ISA_GFNI, CODE_FOR_vgf2p8affineqb_v64qi, \"__builtin_ia32_vgf2p8affineqb_v64qi\", IX86_BUILTIN_VGF2P8AFFINEQB512, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_INT)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vgf2p8affineinvqb_v32qi_mask, \"__builtin_ia32_vgf2p8affineinvqb_v32qi_mask\", IX86_BUILTIN_VGF2P8AFFINEINVQB256MASK, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_INT_V32QI_USI)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_SSE2, CODE_FOR_vgf2p8affineinvqb_v16qi, \"__builtin_ia32_vgf2p8affineinvqb_v16qi\", IX86_BUILTIN_VGF2P8AFFINEINVQB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_INT)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vgf2p8affineinvqb_v16qi_mask, \"__builtin_ia32_vgf2p8affineinvqb_v16qi_mask\", IX86_BUILTIN_VGF2P8AFFINEINVQB128MASK, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_INT_V16QI_UHI)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512F, CODE_FOR_vgf2p8affineqb_v64qi, \"__builtin_ia32_vgf2p8affineqb_v64qi\", IX86_BUILTIN_VGF2P8AFFINEQB512, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_INT)\n BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vgf2p8affineqb_v64qi_mask, \"__builtin_ia32_vgf2p8affineqb_v64qi_mask\", IX86_BUILTIN_VGF2P8AFFINEQB512MASK, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_INT_V64QI_UDI)\n BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX, CODE_FOR_vgf2p8affineqb_v32qi, \"__builtin_ia32_vgf2p8affineqb_v32qi\", IX86_BUILTIN_VGF2P8AFFINEQB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_INT)\n-BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vgf2p8affineqb_v32qi_mask, \"__builtin_ia32_vgf2p8affineqb_v32qi_mask\", IX86_BUILTIN_VGF2P8AFFINEQB256MASK, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_INT_V32QI_USI)\n-BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_SSE, CODE_FOR_vgf2p8affineqb_v16qi, \"__builtin_ia32_vgf2p8affineqb_v16qi\", IX86_BUILTIN_VGF2P8AFFINEQB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_INT)\n-BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_SSE, CODE_FOR_vgf2p8affineqb_v16qi_mask, \"__builtin_ia32_vgf2p8affineqb_v16qi_mask\", IX86_BUILTIN_VGF2P8AFFINEQB128MASK, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_INT_V16QI_UHI)\n-BDESC (OPTION_MASK_ISA_GFNI, CODE_FOR_vgf2p8mulb_v64qi, \"__builtin_ia32_vgf2p8mulb_v64qi\", IX86_BUILTIN_VGF2P8MULB512, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vgf2p8affineqb_v32qi_mask, \"__builtin_ia32_vgf2p8affineqb_v32qi_mask\", IX86_BUILTIN_VGF2P8AFFINEQB256MASK, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_INT_V32QI_USI)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_SSE2, CODE_FOR_vgf2p8affineqb_v16qi, \"__builtin_ia32_vgf2p8affineqb_v16qi\", IX86_BUILTIN_VGF2P8AFFINEQB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_INT)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vgf2p8affineqb_v16qi_mask, \"__builtin_ia32_vgf2p8affineqb_v16qi_mask\", IX86_BUILTIN_VGF2P8AFFINEQB128MASK, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_INT_V16QI_UHI)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512F, CODE_FOR_vgf2p8mulb_v64qi, \"__builtin_ia32_vgf2p8mulb_v64qi\", IX86_BUILTIN_VGF2P8MULB512, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI)\n BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vgf2p8mulb_v64qi_mask, \"__builtin_ia32_vgf2p8mulb_v64qi_mask\", IX86_BUILTIN_VGF2P8MULB512MASK, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_V64QI_UDI)\n BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX, CODE_FOR_vgf2p8mulb_v32qi, \"__builtin_ia32_vgf2p8mulb_v32qi\", IX86_BUILTIN_VGF2P8MULB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI)\n-BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vgf2p8mulb_v32qi_mask, \"__builtin_ia32_vgf2p8mulb_v32qi_mask\", IX86_BUILTIN_VGF2P8MULB256MASK, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_V32QI_USI)\n-BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_SSE, CODE_FOR_vgf2p8mulb_v16qi, \"__builtin_ia32_vgf2p8mulb_v16qi\", IX86_BUILTIN_VGF2P8MULB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI)\n-BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vgf2p8mulb_v16qi_mask, \"__builtin_ia32_vgf2p8mulb_v16qi_mask\", IX86_BUILTIN_VGF2P8MULB128MASK, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_V16QI_UHI)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vgf2p8mulb_v32qi_mask, \"__builtin_ia32_vgf2p8mulb_v32qi_mask\", IX86_BUILTIN_VGF2P8MULB256MASK, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_V32QI_USI)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_SSE2, CODE_FOR_vgf2p8mulb_v16qi, \"__builtin_ia32_vgf2p8mulb_v16qi\", IX86_BUILTIN_VGF2P8MULB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI)\n+BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vgf2p8mulb_v16qi_mask, \"__builtin_ia32_vgf2p8mulb_v16qi_mask\", IX86_BUILTIN_VGF2P8MULB128MASK, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_V16QI_UHI)\n \n /* VNNI */\n "}, {"sha": "8696f931806fe8f1aa17aa526d3a15062b5dbe43", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 33, "deletions": 46, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/958d63e911b3fd4c3172e7c87b2e6b6050374f76/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/958d63e911b3fd4c3172e7c87b2e6b6050374f76/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=958d63e911b3fd4c3172e7c87b2e6b6050374f76", "patch": "@@ -29816,28 +29816,20 @@ def_builtin (HOST_WIDE_INT mask, const char *name,\n     {\n       ix86_builtins_isa[(int) code].isa = mask;\n \n-      /* OPTION_MASK_ISA_AVX512{F,VL,BW} have special meaning. Despite of\n-\t generic case, where any bit set means that built-in is enable, this\n-\t bit must be *and-ed* with another one. E.g.:\n-\t OPTION_MASK_ISA_AVX512DQ | OPTION_MASK_ISA_AVX512VL\n-\t means that *both* cpuid bits must be set for the built-in to\n-\t be available. Handle this here.  */\n+      mask &= ~OPTION_MASK_ISA_64BIT;\n+\n+      /* Filter out the masks most often ored together with others.  */\n       if ((mask & ix86_isa_flags & OPTION_MASK_ISA_AVX512VL)\n \t  && mask != OPTION_MASK_ISA_AVX512VL)\n \tmask &= ~OPTION_MASK_ISA_AVX512VL;\n       if ((mask & ix86_isa_flags & OPTION_MASK_ISA_AVX512BW)\n \t  && mask != OPTION_MASK_ISA_AVX512BW)\n \tmask &= ~OPTION_MASK_ISA_AVX512BW;\n-      if ((mask & ix86_isa_flags & OPTION_MASK_ISA_AVX512F)\n-\t  && mask != OPTION_MASK_ISA_AVX512F)\n-\tmask &= ~OPTION_MASK_ISA_AVX512F;\n \n-      mask &= ~OPTION_MASK_ISA_64BIT;\n       if (mask == 0\n \t  || (mask & ix86_isa_flags) != 0\n \t  || (lang_hooks.builtin_function\n \t      == lang_hooks.builtin_function_ext_scope))\n-\n \t{\n \t  tree type = ix86_get_builtin_func_type (tcode);\n \t  decl = add_builtin_function (name, type, code, BUILT_IN_MD,\n@@ -29972,6 +29964,8 @@ def_builtin_pure2 (HOST_WIDE_INT mask, const char *name,\n static void\n ix86_add_new_builtins (HOST_WIDE_INT isa, HOST_WIDE_INT isa2)\n {\n+  isa &= ~OPTION_MASK_ISA_64BIT;\n+\n   if ((isa & deferred_isa_values) == 0\n       && (isa2 & deferred_isa_values2) == 0)\n     return;\n@@ -35389,41 +35383,34 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       }\n     }\n \n-  /* Determine whether the builtin function is available under the current ISA.\n-     Originally the builtin was not created if it wasn't applicable to the\n-     current ISA based on the command line switches.  With function specific\n-     options, we need to check in the context of the function making the call\n-     whether it is supported.  Treat AVX512{VL,BW,F} and MMX specially.  For\n-     other flags, if isa includes more than one ISA bit, treat those are\n-     requiring any of them.  For AVX512VL, require both AVX512VL and the\n-     non-AVX512VL ISAs.  Likewise for MMX, require both MMX and the non-MMX\n-     ISAs.  Similarly for AVX512F and AVX512BW.\n-     Similarly for 64BIT, but we shouldn't be building such builtins\n-     at all, -m64 is a whole TU option.  */\n-  if (((ix86_builtins_isa[fcode].isa\n-\t& ~(OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_MMX\n-\t    | OPTION_MASK_ISA_64BIT | OPTION_MASK_ISA_AVX512BW\n-\t    | OPTION_MASK_ISA_AVX512F))\n-       && !(ix86_builtins_isa[fcode].isa\n-\t    & ~(OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_MMX\n-\t\t| OPTION_MASK_ISA_64BIT | OPTION_MASK_ISA_AVX512BW\n-\t\t| OPTION_MASK_ISA_AVX512F)\n-\t    & ix86_isa_flags))\n-      || ((ix86_builtins_isa[fcode].isa & OPTION_MASK_ISA_AVX512VL)\n-\t  && !(ix86_isa_flags & OPTION_MASK_ISA_AVX512VL))\n-      || ((ix86_builtins_isa[fcode].isa & OPTION_MASK_ISA_AVX512BW)\n-\t  && !(ix86_isa_flags & OPTION_MASK_ISA_AVX512BW))\n-      || ((ix86_builtins_isa[fcode].isa & OPTION_MASK_ISA_AVX512F)\n-\t  && !(ix86_isa_flags & OPTION_MASK_ISA_AVX512F))\n-      || ((ix86_builtins_isa[fcode].isa & OPTION_MASK_ISA_MMX)\n-\t  && !(ix86_isa_flags & OPTION_MASK_ISA_MMX))\n-      || (ix86_builtins_isa[fcode].isa2\n-\t  && !(ix86_builtins_isa[fcode].isa2 & ix86_isa_flags2)))\n-    {\n-      char *opts = ix86_target_string (ix86_builtins_isa[fcode].isa,\n-\t\t\t\t       ix86_builtins_isa[fcode].isa2, 0, 0,\n-\t\t\t\t       NULL, NULL, (enum fpmath_unit) 0,\n-\t\t\t\t       false);\n+  HOST_WIDE_INT isa = ix86_isa_flags;\n+  HOST_WIDE_INT isa2 = ix86_isa_flags2;\n+  HOST_WIDE_INT bisa = ix86_builtins_isa[fcode].isa;\n+  HOST_WIDE_INT bisa2 = ix86_builtins_isa[fcode].isa2;\n+  /* The general case is we require all the ISAs specified in bisa{,2}\n+     to be enabled.\n+     The exceptions are:\n+     OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A\n+     OPTION_MASK_ISA_SSE4_2 | OPTION_MASK_ISA_CRC32\n+     OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4\n+     where for each this pair it is sufficient if either of the ISAs is\n+     enabled, plus if it is ored with other options also those others.  */\n+  if (((bisa & (OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A))\n+       == (OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A))\n+      && (isa & (OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A)) != 0)\n+    isa |= (OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A);\n+  if (((bisa & (OPTION_MASK_ISA_SSE4_2 | OPTION_MASK_ISA_CRC32))\n+       == (OPTION_MASK_ISA_SSE4_2 | OPTION_MASK_ISA_CRC32))\n+      && (isa & (OPTION_MASK_ISA_SSE4_2 | OPTION_MASK_ISA_CRC32)) != 0)\n+    isa |= (OPTION_MASK_ISA_SSE4_2 | OPTION_MASK_ISA_CRC32);\n+  if (((bisa & (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4))\n+       == (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4))\n+      && (isa & (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4)) != 0)\n+    isa |= (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4);\n+  if ((bisa & isa) != bisa || (bisa2 & isa2) != bisa2)\n+    {\n+      char *opts = ix86_target_string (bisa, bisa2, 0, 0, NULL, NULL,\n+\t\t\t\t       (enum fpmath_unit) 0, false);\n       if (!opts)\n \terror (\"%qE needs unknown isa option\", fndecl);\n       else"}, {"sha": "dee9be81515ff43ec3c90129a6acdc31170e2fa0", "filename": "gcc/config/i386/sgxintrin.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/958d63e911b3fd4c3172e7c87b2e6b6050374f76/gcc%2Fconfig%2Fi386%2Fsgxintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/958d63e911b3fd4c3172e7c87b2e6b6050374f76/gcc%2Fconfig%2Fi386%2Fsgxintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsgxintrin.h?ref=958d63e911b3fd4c3172e7c87b2e6b6050374f76", "patch": "@@ -1,3 +1,26 @@\n+/* Copyright (C) 2017-2018 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n #ifndef _SGXINTRIN_H_INCLUDED\n #define _SGXINTRIN_H_INCLUDED\n "}, {"sha": "ffc4f2a60b0cb753768cfeafbcc96f41ae449f85", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/958d63e911b3fd4c3172e7c87b2e6b6050374f76/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/958d63e911b3fd4c3172e7c87b2e6b6050374f76/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=958d63e911b3fd4c3172e7c87b2e6b6050374f76", "patch": "@@ -20074,7 +20074,7 @@\n    gf2p8affineinvqb\\t{%3, %2, %0| %0, %2, %3}\n    vgf2p8affineinvqb\\t{%3, %2, %1, %0<mask_operand4>| %0<mask_operand4>, %1, %2, %3}\n    vgf2p8affineinvqb\\t{%3, %2, %1, %0<mask_operand4>| %0<mask_operand4>, %1, %2, %3}\"\n-  [(set_attr \"isa\" \"noavx,avx,avx512bw\")\n+  [(set_attr \"isa\" \"noavx,avx,avx512f\")\n    (set_attr \"prefix_data16\" \"1,*,*\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"orig,maybe_evex,evex\")\n@@ -20092,7 +20092,7 @@\n    gf2p8affineqb\\t{%3, %2, %0| %0, %2, %3}\n    vgf2p8affineqb\\t{%3, %2, %1, %0<mask_operand4>| %0<mask_operand4>, %1, %2, %3}\n    vgf2p8affineqb\\t{%3, %2, %1, %0<mask_operand4>| %0<mask_operand4>, %1, %2, %3}\"\n-  [(set_attr \"isa\" \"noavx,avx,avx512bw\")\n+  [(set_attr \"isa\" \"noavx,avx,avx512f\")\n    (set_attr \"prefix_data16\" \"1,*,*\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"orig,maybe_evex,evex\")\n@@ -20109,7 +20109,7 @@\n    gf2p8mulb\\t{%2, %0| %0, %2}\n    vgf2p8mulb\\t{%2, %1, %0<mask_operand3>| %0<mask_operand3>, %1, %2}\n    vgf2p8mulb\\t{%2, %1, %0<mask_operand3>| %0<mask_operand3>, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx,avx512bw\")\n+  [(set_attr \"isa\" \"noavx,avx,avx512f\")\n    (set_attr \"prefix_data16\" \"1,*,*\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"orig,maybe_evex,evex\")"}, {"sha": "cfca363235d20d1e7e223e6daeba2ade30ed996a", "filename": "gcc/config/i386/vaesintrin.h", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/958d63e911b3fd4c3172e7c87b2e6b6050374f76/gcc%2Fconfig%2Fi386%2Fvaesintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/958d63e911b3fd4c3172e7c87b2e6b6050374f76/gcc%2Fconfig%2Fi386%2Fvaesintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fvaesintrin.h?ref=958d63e911b3fd4c3172e7c87b2e6b6050374f76", "patch": "@@ -1,9 +1,32 @@\n+/* Copyright (C) 2017-2018 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n #ifndef __VAESINTRIN_H_INCLUDED\n #define __VAESINTRIN_H_INCLUDED\n \n-#ifndef __VAES__\n+#if !defined(__VAES__) || !defined(__AVX__)\n #pragma GCC push_options\n-#pragma GCC target(\"vaes\")\n+#pragma GCC target(\"vaes,avx\")\n #define __DISABLE_VAES__\n #endif /* __VAES__ */\n \n@@ -43,7 +66,7 @@ _mm256_aesenclast_epi128 (__m256i __A, __m256i __B)\n #endif /* __DISABLE_VAES__ */\n \n \n-#if !defined(__VAES__) || !defined(__AVX512F)\n+#if !defined(__VAES__) || !defined(__AVX512F__)\n #pragma GCC push_options\n #pragma GCC target(\"vaes,avx512f\")\n #define __DISABLE_VAESF__\n@@ -85,7 +108,7 @@ _mm512_aesenclast_epi128 (__m512i __A, __m512i __B)\n #pragma GCC pop_options\n #endif /* __DISABLE_VAES__ */\n \n-#if !defined(__VAES__) || !defined(__AVX512VL)\n+#if !defined(__VAES__) || !defined(__AVX512VL__)\n #pragma GCC push_options\n #pragma GCC target(\"vaes,avx512vl\")\n #define __DISABLE_VAESVL__"}, {"sha": "314cce716fe527552dc35d8697bbc72b556726a8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/958d63e911b3fd4c3172e7c87b2e6b6050374f76/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/958d63e911b3fd4c3172e7c87b2e6b6050374f76/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=958d63e911b3fd4c3172e7c87b2e6b6050374f76", "patch": "@@ -1,5 +1,8 @@\n 2018-01-05  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/83604\n+\t* gcc.target/i386/sse-26.c: New test.\n+\n \tPR target/83604\n \t* gcc.target/i386/pr83604.c: New test.\n "}, {"sha": "f2607e64b59fd0615eea0e23213e3ba9303d4913", "filename": "gcc/testsuite/gcc.target/i386/sse-26.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/958d63e911b3fd4c3172e7c87b2e6b6050374f76/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/958d63e911b3fd4c3172e7c87b2e6b6050374f76/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-26.c?ref=958d63e911b3fd4c3172e7c87b2e6b6050374f76", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse2 -mmmx -mno-sse3 -mno-3dnow -mno-fma -mno-fxsr -mno-xsave -mno-rtm -mno-prfchw -mno-rdseed -mno-adx -mno-prefetchwt1 -mno-clflushopt -mno-xsavec -mno-xsaves -mno-clwb -mno-mwaitx -mno-clzero -mno-pku -mno-rdpid -mno-gfni -mno-ibt -mno-shstk -mno-vaes -mno-vpclmulqdq\" } */\n+/* { dg-add-options bind_pic_locally } */\n+\n+#include \"sse-13.c\""}]}