{"sha": "64cc2ce9cb3af2c8213dcb31c354e5ecc0c35acf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRjYzJjZTljYjNhZjJjODIxM2RjYjMxYzM1NGU1ZWNjMGMzNWFjZg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-11-04T19:34:02Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-11-04T19:34:02Z"}, "message": "update Darwin ABI tests for m64\n\n\t* gcc.target/powerpc/ppc64-abi-1.c: Skip for Darwin.\n\n\tmerge from FSF 'apple/trunk' branch.\n\t* gcc.target/powerpc/darwin64-abi.c: New.\n\nFrom-SVN: r166326", "tree": {"sha": "c9b0e71e8928a6d26c9f39152fe360de4d855c5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9b0e71e8928a6d26c9f39152fe360de4d855c5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64cc2ce9cb3af2c8213dcb31c354e5ecc0c35acf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64cc2ce9cb3af2c8213dcb31c354e5ecc0c35acf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64cc2ce9cb3af2c8213dcb31c354e5ecc0c35acf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64cc2ce9cb3af2c8213dcb31c354e5ecc0c35acf/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce66b6f6cad2c071176d903486fdaea96796b31a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce66b6f6cad2c071176d903486fdaea96796b31a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce66b6f6cad2c071176d903486fdaea96796b31a"}], "stats": {"total": 642, "additions": 642, "deletions": 0}, "files": [{"sha": "7eabeb410b6148bd3b1f5c20333b6235d919cd1c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64cc2ce9cb3af2c8213dcb31c354e5ecc0c35acf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64cc2ce9cb3af2c8213dcb31c354e5ecc0c35acf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=64cc2ce9cb3af2c8213dcb31c354e5ecc0c35acf", "patch": "@@ -1,3 +1,10 @@\n+2010-11-04  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/ppc64-abi-1.c: Skip for Darwin.\n+\n+\tmerge from FSF 'apple/trunk' branch.\n+\t* gcc.target/powerpc/darwin64-abi.c: New.\n+\n 2010-11-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/46233"}, {"sha": "e185cdf0e24f60d032791eef5821a86d8c5a8a00", "filename": "gcc/testsuite/gcc.target/powerpc/darwin64-abi.c", "status": "added", "additions": 634, "deletions": 0, "changes": 634, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64cc2ce9cb3af2c8213dcb31c354e5ecc0c35acf/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdarwin64-abi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64cc2ce9cb3af2c8213dcb31c354e5ecc0c35acf/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdarwin64-abi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdarwin64-abi.c?ref=64cc2ce9cb3af2c8213dcb31c354e5ecc0c35acf", "patch": "@@ -0,0 +1,634 @@\n+/* Darwin 64-bit ABI testing */\n+/* { dg-do run { target { powerpc*-*-darwin* && lp64 } } } */\n+/* { dg-options \"-std=c99 -maltivec\" } */\n+\n+/* Set this if 8-byte structs are being passed as integers.  */\n+/* #define STRUCT8INT */\n+\n+#include <stdarg.h>\n+#include <stdio.h>\n+#include <complex.h>\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+struct s3c { char ch[3]; };\n+struct ssc { short sh; char ch; };\n+struct sif { int i; float f; };\n+struct sfi { float f; int i; };\n+struct sfii { float f; int i; int j; };\n+struct sfil { float f; int i; long l; };\n+struct sfif { float f; int i; float g; };\n+struct sfill { float f; int i; long l, m; };\n+struct sfl { float f; long l; };\n+struct sfldl { float f; long l1; double d; long l2; };\n+struct sfpp { float f; char *p1; char *p2; };\n+\n+\n+struct sff { float f1, f2; };\n+struct sfff { float f1, f2, f3; };\n+struct sffff { float f1, f2, f3, f4; };\n+\n+struct sfD { float f; long double D; };\n+\n+struct sidi { int i1; double d; int i2; };\n+\n+struct sdd { double d1, d2; };\n+struct sddd { double d1, d2, d3; };\n+struct sdddd { double d1, d2, d3, d4; };\n+struct s3d { double d[3]; };\n+\n+struct vr { union { int ielts[4]; float felts[4]; } elts; };\n+\n+typedef struct\n+{\n+  unsigned long gprs[32];\n+  double fprs[32];\n+  struct vr vrs[32];\n+  unsigned char stack[1000];\n+} reg_parms_t;\n+\n+reg_parms_t gparms;\n+\n+#define TESTFN(RET,NAME,PARAMS) \\\n+RET NAME PARAMS;  \\\n+RET dummy_ ## NAME PARAMS  \\\n+{  \\\n+  __asm__(\"b end_\" #NAME \"\\n_\" # NAME \":\\n\\t\" SAVE_STATE \"b _dummy_\" # NAME \"\\n\\tend_\" #NAME \":\\n\\n\" ); \\\n+}\n+\n+#define SAVE_STATE \\\n+SAVE_GPR(0)  \\\n+SAVE_GPR(1)  \\\n+SAVE_GPR(3)  \\\n+SAVE_GPR(4)  \\\n+SAVE_GPR(5)  \\\n+SAVE_GPR(6)  \\\n+SAVE_GPR(7)  \\\n+SAVE_GPR(8)  \\\n+SAVE_GPR(9)  \\\n+SAVE_GPR(10)  \\\n+SAVE_FPR(0)  \\\n+SAVE_FPR(1)  \\\n+SAVE_FPR(2)  \\\n+SAVE_FPR(3)  \\\n+SAVE_FPR(4)  \\\n+SAVE_FPR(5)  \\\n+SAVE_FPR(6)  \\\n+SAVE_FPR(7)  \\\n+SAVE_FPR(8)  \\\n+SAVE_FPR(9)  \\\n+SAVE_FPR(10)  \\\n+SAVE_FPR(12)  \\\n+SAVE_FPR(13)  \\\n+SAVE_VR(0)  \\\n+SAVE_VR(1)  \\\n+SAVE_VR(2)  \\\n+SAVE_VR(3)  \\\n+SAVE_VR(4)  \\\n+SAVE_STACK(112)  \\\n+SAVE_STACK(120)  \\\n+SAVE_STACK(128)  \\\n+SAVE_STACK(136)  \\\n+SAVE_STACK(144)  \\\n+\n+\n+#ifdef __LP64__\n+#define SAVE_GPR(N) \"std r\" #N \",\" #N \"*8(r25)\\n\\t\"\n+#define SAVE_FPR(N) \"stfd f\" #N \",\" #N \"*8+256(r25)\\n\\t\"\n+#define SAVE_VR(N) \"li r26,\" #N \"*16+512\\n\\tstvx v\" #N \",r25,r26\\n\\t\"\n+#define SAVE_STACK(N) \"ld r26,\" #N \"(r1)\\n\\tstd r26,\" #N \"+1024(r25)\\n\\t\"\n+#else\n+#define SAVE_GPR(N) \"stw r\" #N \",\" #N \"*4(r25)\\n\\t\"\n+#define SAVE_FPR(N) \"stfd f\" #N \",\" #N \"*8+128(r25)\\n\\t\"\n+#define SAVE_VR(N)\n+#define SAVE_STACK(N)\n+#endif\n+\n+TESTFN(void, fffi, (float x, float y, int z))\n+\n+#define clearall \\\n+__asm__ volatile ( \\\n+\"\\n\\t\" \\\n+\"li r3,0x333\\n\\t\" \\\n+\"li r4,0x444 \\n\\t\" \\\n+\"li r5,0x555\\n\\t\" \\\n+\"li r6,0x666\\n\\t\" \\\n+\"li r7,0x777\\n\\t\" \\\n+\"li r8,0x888\\n\\t\" \\\n+\"li r9,0x999\\n\\t\" \\\n+\"li r10,0xaaa\\n\\t\" \\\n+\"fsub f0,f0,f0\\n\\t\" \\\n+\"fsub f1,f1,f1\\n\\t\" \\\n+\"fsub f2,f2,f2\\n\\t\" \\\n+\"fsub f3,f3,f3\\n\\t\" \\\n+\"fsub f4,f4,f4\\n\\t\" \\\n+\"fsub f5,f5,f5\\n\\t\" \\\n+\"fsub f6,f6,f6\\n\\t\" \\\n+\"fsub f7,f7,f7\\n\\t\" \\\n+\"vsubuwm v0,v0,v0\\n\\t\" \\\n+\"vsubuwm v1,v1,v1\\n\\t\" \\\n+\"vsubuwm v2,v2,v2\\n\\t\" \\\n+\"vsubuwm v3,v3,v3\\n\\t\" \\\n+\"vsubuwm v4,v4,v4\\n\\t\" \\\n+: : : \"r3\", \"r4\", \"r5\", \"r6\", \"r7\", \"r8\", \"r9\", \"r10\", \\\n+      \"f0\", \"f1\", \"f2\", \"f3\", \"f4\", \"f5\", \"f6\", \"f7\", \\\n+      \"v0\", \"v1\", \"v2\", \"v3\", \"v4\" );\n+\n+TESTFN(void, fii, (int a, int b))\n+TESTFN(void, fid, (int i, double d))\n+TESTFN(void, fc, (complex float z))\n+TESTFN(void, fffff, (float f1, float f2, float f3, float f4))\n+TESTFN(void, fdddd, (double d1, double d2, double d3, double d4))\n+TESTFN(void, f_s3c_ssc, (struct s3c s1, struct ssc s2))\n+TESTFN(void, f_sff, (struct sff s))\n+TESTFN(void, f_sfff, (struct sfff s))\n+TESTFN(void, f_sffff, (struct sffff s))\n+TESTFN(void, f_sdd, (struct sdd s))\n+TESTFN(void, f_sddd, (struct sddd s))\n+TESTFN(void, f_sdddd, (struct sdddd s))\n+TESTFN(void, f_s3d, (struct s3d s))\n+TESTFN(void, f_sif, (int i, struct sif s))\n+TESTFN(void, fi_sif, (int i, struct sif s))\n+TESTFN(void, fi_sif_i, (int i, struct sif s, int j))\n+TESTFN(void, f_sfi, (int i, struct sfi s))\n+TESTFN(void, fi_sfi, (int i, struct sfi s))\n+TESTFN(void, fi_sfi_if, (int i, struct sfi s, int j, float f))\n+TESTFN(void, fi_sfill, (int i, struct sfill s))\n+TESTFN(void, fi_sfill_i, (int i, struct sfill s, int j))\n+TESTFN(void, f_sfl, (struct sfl s))\n+TESTFN(void, f_sfl_sfl_sfl_sfl_sfl, (struct sfl s1, struct sfl s2, struct sfl s3, struct sfl s4, struct sfl s5))\n+TESTFN(void, fi_sff, (int i, struct sff s))\n+TESTFN(void, f_sfpp_p, (struct sfpp s, char *p))\n+TESTFN(void, f_sfldl, (struct sfldl s))\n+TESTFN(void, fi_sff_i, (int i, struct sff s, int j))\n+TESTFN(void, f_sfD_sfD_sfD_sfD_sfD, (struct sfD s1, struct sfD s2, struct sfD s3, struct sfD s4, struct sfD s5))\n+TESTFN(void, fi_sidi, (int i, struct sidi s))\n+TESTFN(void, fifvf_sfi_dots, (int i, float f, vector float vf, struct sfi s, ...))\n+TESTFN(void, fifvf_sfii_dots, (int i, float f, vector float vf, struct sfii s, ...))\n+\n+int numerrs;\n+\n+#ifndef SKIP\n+static __attribute__ ((noinline)) void\n+check_gpr (int line, int reg, long expected)\n+{\n+  if (gparms.gprs[reg] != expected)\n+    {\n+      printf(\"%d: r%d is 0x%lx, expected 0x%lx\\n\",\n+\t     line, reg, gparms.gprs[reg], expected);\n+      ++numerrs;\n+    }\n+}\n+\n+static __attribute__ ((noinline)) void\n+check_gpr_double (int line, int reg, double expected)\n+{\n+  double tmp = *((double *) &(gparms.gprs[reg]));\n+  if (tmp != expected)\n+    {\n+      printf(\"%d: r%d is %f (0x%llx), expected %f (0x%llx)\\n\",\n+\t     line, reg,\n+\t     tmp, *((long long *) &tmp),\n+\t     expected, *((long long *) &expected));\n+      ++numerrs;\n+    }\n+}\n+\n+static __attribute__ ((noinline)) void\n+check_gpr_float_pair (int line, int reg, float exp1, float exp2)\n+{\n+  float tmp1 = *((float *) &(gparms.gprs[reg]));\n+  float tmp2 = *(((float *) &(gparms.gprs[reg])) + 1);\n+\n+  if (tmp1 != exp1 || tmp2 != exp2)\n+    {\n+      printf(\"%d: r%d is %f / %f (0x%llx), expected %f (0x%x) / %f (0x%x)\\n\",\n+\t     line, reg,\n+\t     tmp1, tmp2, *((long long *) &(gparms.gprs[reg])),\n+\t     exp1, *((int *) &exp1),\n+\t     exp2, *((int *) &exp2));\n+      ++numerrs;\n+    }\n+}\n+\n+static __attribute__ ((noinline)) void\n+check_fpr (int line, int reg, double expected)\n+{\n+  if (gparms.fprs[reg] != expected)\n+    {\n+      printf(\"%d: f%d is %f (0x%llx), expected %f (0x%llx)\\n\",\n+\t     line, reg,\n+\t     gparms.fprs[reg], *((long long *) &(gparms.fprs[reg])),\n+\t     expected, *((long long *) &expected));\n+      ++numerrs;\n+    }\n+}\n+\n+static __attribute__ ((noinline)) void\n+check_vr_int (int reg, int n1, int n2, int n3, int n4)\n+{\n+  if (gparms.vrs[reg].elts.ielts[0] != n1\n+      || gparms.vrs[reg].elts.ielts[1] != n2\n+      || gparms.vrs[reg].elts.ielts[2] != n3\n+      || gparms.vrs[reg].elts.ielts[3] != n4)\n+    {\n+      printf(\"v%d is   (%d,%d,%d,%d) (0x%x,0x%x,0x%x,0x%x),\\n\"\n+\t     \" expected (%d,%d,%d,%d) (0x%x,0x%x,0x%x,0x%x)\\n\",\n+\t     reg,\n+\t     gparms.vrs[reg].elts.ielts[0],\n+\t     gparms.vrs[reg].elts.ielts[1],\n+\t     gparms.vrs[reg].elts.ielts[2],\n+\t     gparms.vrs[reg].elts.ielts[3],\n+\t     gparms.vrs[reg].elts.ielts[0],\n+\t     gparms.vrs[reg].elts.ielts[1],\n+\t     gparms.vrs[reg].elts.ielts[2],\n+\t     gparms.vrs[reg].elts.ielts[3],\n+\t     n1, n2, n3, n4,\n+\t     n1, n2, n3, n4\n+\t     );\n+      ++numerrs;\n+    }\n+}\n+\n+static __attribute__ ((noinline)) void\n+check_vr_float (int reg, float f1, float f2, float f3, float f4)\n+{\n+  if (gparms.vrs[reg].elts.felts[0] != f1\n+      || gparms.vrs[reg].elts.felts[1] != f2\n+      || gparms.vrs[reg].elts.felts[2] != f3\n+      || gparms.vrs[reg].elts.felts[3] != f4)\n+    {\n+      printf(\"v%d is    (%f,%f,%f,%f) (0x%x,0x%x,0x%x,0x%x),\\n\"\n+\t     \" expected (%f,%f,%f,%f) (0x%x,0x%x,0x%x,0x%x)\\n\",\n+\t     reg,\n+\t     gparms.vrs[reg].elts.felts[0],\n+\t     gparms.vrs[reg].elts.felts[1],\n+\t     gparms.vrs[reg].elts.felts[2],\n+\t     gparms.vrs[reg].elts.felts[3],\n+\t     gparms.vrs[reg].elts.ielts[0],\n+\t     gparms.vrs[reg].elts.ielts[1],\n+\t     gparms.vrs[reg].elts.ielts[2],\n+\t     gparms.vrs[reg].elts.ielts[3],\n+\t     f1, f2, f3, f4,\n+\t     *((int *) &f1), *((int *) &f2), *((int *) &f3), *((int *) &f4)\n+\t     );\n+      ++numerrs;\n+    }\n+}\n+#endif\n+\n+int main (void)\n+{\n+  complex float cpx = 4.45f + I * 4.92f;\n+  struct s3c s3c_loc;\n+  struct ssc ssc_loc;\n+  struct sfi sfi_loc;\n+  struct sfi sfi_loc2 = { 6.3f, 0x1108 };\n+  struct sfii sfii_loc;\n+  struct sfii sfii_loc2 = { 6.9f, 0x1110, 0x6372 };\n+  vector float vf_loc = (vector float) { 7.1f, 7.2f, 7.3f, 7.4f };\n+  vector int vi_loc = (vector int) { 0xabc, 0xdef, 0xfed, 0xcba };\n+\n+  __asm__ (\"mr r25,%0\" : : \"b\" (&gparms) );\n+\n+  clearall;\n+  fii(1, 2);\n+  check_gpr (__LINE__, 3, 1);\n+  check_gpr (__LINE__, 4, 2);\n+\n+  clearall;\n+  fid(45, 4.5);\n+  check_gpr (__LINE__, 3, 45);\n+  check_fpr (__LINE__, 1, 4.5);\n+\n+  clearall;\n+  fffi(1.2f, 3.4f, 456);\n+  check_fpr(__LINE__, 1, 1.2f);\n+\n+  clearall;\n+  fc(cpx);\n+  /* Two floats are packed into r3 */\n+  check_gpr_float_pair (__LINE__, 3, 4.45f, 4.92f);\n+\n+  clearall;\n+  fffff (4.1f, 4.2f, 4.3f, 4.4f);\n+  check_fpr (__LINE__, 1, 4.1f);\n+  check_fpr (__LINE__, 4, 4.4f);\n+\n+  clearall;\n+  fdddd (4.1, 4.2, 4.3, 4.4);\n+  check_fpr (__LINE__, 1, 4.1);\n+  check_fpr (__LINE__, 4, 4.4);\n+\n+  {\n+    struct sff sff_loc = { 2.1f, 2.2f };\n+    clearall;\n+    f_sff(sff_loc);\n+#ifdef STRUCT8INT\n+    check_gpr_float_pair (__LINE__, 3, 2.1f, 2.2f);\n+#else\n+    check_fpr(__LINE__, 1, 2.1f);\n+    check_fpr(__LINE__, 2, 2.2f);\n+#endif\n+    clearall;\n+    fi_sff_i(65, sff_loc, 66);\n+    check_gpr(__LINE__, 3, 65);\n+#ifdef STRUCT8INT\n+    check_gpr_float_pair (__LINE__, 4, 2.1f, 2.2f);\n+#else\n+    check_fpr(__LINE__, 1, 2.1f);\n+    check_fpr(__LINE__, 2, 2.2f);\n+#endif\n+    check_gpr(__LINE__, 5, 66);\n+  }\n+\n+  {\n+    struct sfff sfff_loc = { 3.1f, 3.2f, 3.3f };\n+    clearall;\n+    f_sfff(sfff_loc);\n+    check_fpr(__LINE__, 1, 3.1f);\n+    check_fpr(__LINE__, 2, 3.2f);\n+    check_fpr(__LINE__, 3, 3.3f);\n+    clearall;\n+    f_sfff(sfff_loc);\n+    check_fpr(__LINE__, 1, 3.1f);\n+    check_fpr(__LINE__, 2, 3.2f);\n+    check_fpr(__LINE__, 3, 3.3f);\n+  }\n+\n+  {\n+    struct sffff sffff_loc = { 4.1f, 4.2f, 4.3f, 4.4f };\n+    clearall;\n+    f_sffff(sffff_loc);\n+    check_gpr_float_pair(__LINE__, 3, 4.1f, 4.2f);\n+    check_gpr_float_pair(__LINE__, 4, 4.3f, 4.4f);\n+  }\n+\n+  {\n+    struct sdd sdd_loc = { 2.1, 2.2 };\n+    clearall;\n+    f_sdd(sdd_loc);\n+    /* 16-byte struct is passed in two GPRs.  */\n+    check_gpr_double(__LINE__, 3, 2.1);\n+    check_gpr_double(__LINE__, 4, 2.2);\n+  }\n+\n+  {\n+    struct sddd sddd_loc = { 3.1, 3.2, 3.3 };\n+    clearall;\n+    f_sddd(sddd_loc);\n+    check_fpr(__LINE__, 1, 3.1);\n+    check_fpr(__LINE__, 2, 3.2);\n+    check_fpr(__LINE__, 3, 3.3);\n+  }\n+\n+  {\n+    struct sdddd sdddd_loc = { 4.1, 4.2, 4.3, 4.4 };\n+    clearall;\n+    f_sdddd(sdddd_loc);\n+    check_fpr(__LINE__, 1, 4.1);\n+    check_fpr(__LINE__, 2, 4.2);\n+    check_fpr(__LINE__, 3, 4.3);\n+    check_fpr(__LINE__, 4, 4.4);\n+  }\n+\n+  {\n+    struct s3d s3d_loc = { 89.92, 4.89, 90.9 };\n+    clearall;\n+    f_s3d(s3d_loc);\n+    check_gpr_double (__LINE__, 3, 89.92);\n+    check_gpr_double (__LINE__, 4, 4.89);\n+    check_gpr_double (__LINE__, 5, 90.9);\n+  }\n+\n+  {\n+    s3c_loc.ch[0] = 'A';\n+    s3c_loc.ch[1] = 'B';\n+    s3c_loc.ch[2] = 'C';\n+    ssc_loc.sh = 0x1234;\n+    ssc_loc.ch = 'D';\n+    clearall;\n+    f_s3c_ssc(s3c_loc, ssc_loc);\n+  }\n+\n+  {\n+    struct sif sif_loc_n = { 334, 4.3f };\n+    long floatcast;\n+    floatcast = *((int *) &(sif_loc_n.f));\n+    clearall;\n+    fi_sif(29, sif_loc_n);\n+    check_gpr (__LINE__, 3, 29);\n+    check_gpr (__LINE__, 4, 334LL << 32 | floatcast);\n+#ifdef STRUCT8INT\n+#else\n+    check_fpr (__LINE__, 1, 4.3f);\n+#endif\n+    clearall;\n+    fi_sif_i(31, sif_loc_n, 33);\n+    check_gpr (__LINE__, 3, 31);\n+    check_gpr (__LINE__, 4, 334LL << 32 | floatcast);\n+#ifdef STRUCT8INT\n+#else\n+    check_fpr (__LINE__, 1, 4.3f);\n+#endif\n+    check_gpr (__LINE__, 5, 33);\n+  }\n+\n+  {\n+    struct sfi sfi_loc_n = { 4.145f, 335 };\n+    clearall;\n+    fi_sfi(29, sfi_loc_n);\n+    check_gpr (__LINE__, 3, 29);\n+#ifdef STRUCT8INT\n+    check_gpr (__LINE__, 4, 0x4084a3d70000014fLL);\n+#else\n+    check_fpr (__LINE__, 1, 4.145f);\n+    check_gpr (__LINE__, 4, 335);\n+#endif\n+  }\n+\n+  {\n+    struct sfi sfi_loc_n = { 4.145f, 335 };\n+    clearall;\n+    fi_sfi_if (29, sfi_loc_n, 65, 9.8f);\n+    check_gpr (__LINE__, 3, 29);\n+#ifdef STRUCT8INT\n+    check_gpr (__LINE__, 4, 0x4084a3d70000014fLL);\n+#else\n+    check_fpr (__LINE__, 1, 4.145f);\n+    check_gpr (__LINE__, 4, 335);\n+#endif\n+    check_gpr (__LINE__, 5, 65);\n+    check_gpr (__LINE__, 6, 0x666);\n+#ifdef STRUCT8INT\n+    check_fpr (__LINE__, 1, 9.8f);\n+#else\n+    check_fpr (__LINE__, 2, 9.8f);\n+#endif\n+    check_gpr (__LINE__, 7, 0x777);\n+  }\n+\n+  {\n+    struct sfill sfill_loc_n = { 4.145f, 335, 10000000000LL, 20000000000LL };\n+    clearall;\n+    fi_sfill(29, sfill_loc_n);\n+    check_gpr (__LINE__, 3, 29);\n+    check_fpr (__LINE__, 1, 4.145f);\n+    check_gpr (__LINE__, 4, 335);\n+    check_gpr (__LINE__, 5, 10000000000LL);\n+    check_gpr (__LINE__, 6, 20000000000LL);\n+  }\n+\n+  {\n+    struct sfl sfl_loc_n = { 4.145f, 335 };\n+    clearall;\n+    f_sfl (sfl_loc_n);\n+    check_gpr_float_pair (__LINE__, 3, 4.145f, 0.0f);\n+    check_gpr (__LINE__, 4, 335);\n+    check_gpr (__LINE__, 5, 0x555);\n+    clearall;\n+    f_sfl_sfl_sfl_sfl_sfl (sfl_loc_n, sfl_loc_n, sfl_loc_n, sfl_loc_n, sfl_loc_n);\n+    check_gpr_float_pair (__LINE__, 3, 4.145f, 0.0f);\n+    check_gpr (__LINE__, 4, 335);\n+    check_gpr (__LINE__, 6, 335);\n+    check_gpr (__LINE__, 8, 335);\n+    check_gpr (__LINE__, 10, 335);\n+  }\n+\n+  {\n+    struct sfldl sfldl_loc_n = { 4.145f, 335, 3.3, 336 };\n+    clearall;\n+    f_sfldl (sfldl_loc_n);\n+    check_fpr (__LINE__, 1, 4.145f);\n+    check_gpr (__LINE__, 4, 335);\n+    check_fpr (__LINE__, 2, 3.3);\n+    check_gpr (__LINE__, 6, 336);\n+  }\n+\n+  {\n+    char *p1 = \"abc\";\n+    char *p2 = \"def\";\n+    char *p3 = \"ghi\";\n+    struct sfpp sfpp_loc_n = { 4.145f, p1, p2 };\n+    clearall;\n+    f_sfpp_p(sfpp_loc_n, p3);\n+    check_fpr (__LINE__, 1, 4.145f);\n+    check_gpr (__LINE__, 4, (long) p1);\n+    check_gpr (__LINE__, 5, (long) p2);\n+    check_gpr (__LINE__, 6, (long) p3);\n+  }\n+\n+  {\n+    struct sff sff_loc_n = { 4.145f, 335.3f };\n+    clearall;\n+    fi_sff(29, sff_loc_n);\n+    check_gpr (__LINE__, 3, 29);\n+#ifdef STRUCT8INT\n+    check_gpr_float_pair (__LINE__, 4, 4.145f, 335.3f);\n+#else\n+    check_fpr (__LINE__, 1, 4.145f);\n+    check_fpr (__LINE__, 2, 335.3f);\n+#endif\n+  }\n+\n+  {\n+    struct sfD sfD_loc_n = { 4.145f, 335.335 };\n+    clearall;\n+    f_sfD_sfD_sfD_sfD_sfD (sfD_loc_n, sfD_loc_n, sfD_loc_n, sfD_loc_n, sfD_loc_n);\n+    check_fpr (__LINE__, 1, 4.145f);\n+    check_fpr (__LINE__, 2, 335.335);\n+    check_fpr (__LINE__, 4, 4.145f);\n+    check_fpr (__LINE__, 5, 335.335);\n+    check_fpr (__LINE__, 7, 4.145f);\n+    check_fpr (__LINE__, 10, 4.145f);\n+    check_fpr (__LINE__, 13, 4.145f);\n+  }\n+\n+  {\n+    struct sidi sidi_loc_n = { 257, 4.14515, 258 };\n+    clearall;\n+    fi_sidi(16, sidi_loc_n);\n+    check_gpr (__LINE__, 3, 16);\n+    check_fpr (__LINE__, 1, 4.14515);\n+    check_gpr (__LINE__, 4, 257LL << 32);\n+    check_gpr (__LINE__, 5, 0x555);\n+    check_gpr (__LINE__, 6, 258LL << 32);\n+  }\n+\n+  sfi_loc.f = 5.2f;\n+  sfi_loc.i = 98;\n+  clearall;\n+  fifvf_sfi_dots(41, 4.3f, vf_loc, sfi_loc, 4.63f, vi_loc, sfi_loc2);\n+  __asm__ (\"\\n\");\n+  check_gpr (__LINE__, 3, 41);\n+  check_fpr (__LINE__, 1, 4.3f); /* float skips r4 */\n+  check_vr_float(2, 7.1f, 7.2f, 7.3f, 7.4f); /* vector skips r5/r6 */\n+#ifdef STRUCT8INT\n+  check_gpr (__LINE__, 7, 0x40a6666600000062);\n+#else\n+  check_fpr (__LINE__, 2, sfi_loc.f);\n+  check_gpr (__LINE__, 7, sfi_loc.i);\n+#endif\n+  /* start of varying parameters */\n+#ifdef STRUCT8INT\n+  check_fpr (__LINE__, 2, 4.63f);\n+#else\n+  check_fpr (__LINE__, 3, 4.63f);\n+#endif\n+  check_gpr_double (__LINE__, 8, 4.63f);\n+  /* vector takes up r9/r10 */\n+  /* sfi_loc2 on stack */\n+\n+  clearall;\n+  sfii_loc.f = 5.2f;\n+  sfii_loc.i = 98;\n+  sfii_loc.j = 777;\n+  clearall;\n+  fifvf_sfii_dots(41, 4.3f, vf_loc, sfii_loc, 4.63f, vi_loc, sfii_loc2);\n+  __asm__ (\"\\n\");\n+  check_gpr (__LINE__, 3, 41);\n+  check_fpr (__LINE__, 1, 4.3f); /* float skips r4 */\n+  check_vr_float(2, 7.1f, 7.2f, 7.3f, 7.4f); /* vector skips r5/r6 */\n+  check_fpr (__LINE__, 2, sfii_loc.f);\n+  check_gpr (__LINE__, 7, sfii_loc.i);\n+  check_gpr (__LINE__, 8, ((long)sfii_loc.j) << 32);\n+  /* start of varying parameters */\n+  check_fpr (__LINE__, 3, 4.63f);\n+  check_gpr_double (__LINE__, 9, 4.63f);\n+  /* vector takes up r10/stack (?) */\n+  /* sfii_loc2 on stack */\n+\n+  if (numerrs > 0)\n+    abort ();\n+  return 0;\n+}\n+\n+int dumpall()\n+{\n+  int i;\n+\n+  printf(\"\\n\");\n+  for (i = 3; i <= 10; ++i)\n+#ifdef __LP64__\n+    printf(\"r%d=0x%16.16lx \", i, gparms.gprs[i]);\n+#else\n+    printf(\"r%d=0x%8.8x \", i, gparms.gprs[i]);\n+#endif\n+  printf(\"\\n\");\n+  for (i = 1; i <= 13; ++i)\n+    printf(\"f%d=%8.8f \", i, gparms.fprs[i]);\n+  printf(\"\\n\");\n+  for (i = 0; i <= 4; ++i)\n+    printf(\"v%d=(%x,%x,%x,%x)  \", i,\n+\t   gparms.vrs[i].elts.ielts[0], gparms.vrs[i].elts.ielts[1],\n+\t   gparms.vrs[i].elts.ielts[2], gparms.vrs[i].elts.ielts[3]);\n+  printf(\"\\n\");\n+  for (i = 112; i < 152; ++i)\n+    {\n+      if (i > 112 && i % 8 == 0)\n+\tprintf(\" | \");\n+      printf(\"%02x\", gparms.stack[i]);\n+    }\n+  printf(\"\\n\");\n+}"}, {"sha": "8fcb7fd7fae3f10418bb3c85416e6b51edad71ba", "filename": "gcc/testsuite/gcc.target/powerpc/ppc64-abi-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64cc2ce9cb3af2c8213dcb31c354e5ecc0c35acf/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc64-abi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64cc2ce9cb3af2c8213dcb31c354e5ecc0c35acf/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc64-abi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc64-abi-1.c?ref=64cc2ce9cb3af2c8213dcb31c354e5ecc0c35acf", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do run { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-skip-if \"\" { *-*-darwin* } { \"*\" } { \"\" } } */\n /* { dg-options \"-O2\" } */\n #include <stdarg.h>\n #include <signal.h>"}]}