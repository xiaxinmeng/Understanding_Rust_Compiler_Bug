{"sha": "a56886e9df65ee26c605446e80470f2a6c2e2e82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU2ODg2ZTlkZjY1ZWUyNmM2MDU0NDZlODA0NzBmMmE2YzJlMmU4Mg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-05-02T10:36:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-05-02T10:36:45Z"}, "message": "[multiple changes]\n\n2016-05-02  Tristan Gingold  <gingold@adacore.com>\n\n\t* fname.adb (Is_Predefined_File_Name): Also consider non-krunched\n\ti-* names.\n\n2016-05-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.adb (Aggregate_Constraint_Checks): Separate\n\taccessibility checks and non-null checks for aggregate components,\n\tto prevent spurious accessibility errors.\n\n2016-05-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (OK_For_Limited_Init): A type conversion is not\n\talways legal in the in-place initialization of a limited entity\n\t(e.g. an allocator).\n\t* sem_res.adb (Resolve_Allocator): Improve error message with RM\n\treference  when allocator expression is illegal.\n\nFrom-SVN: r235746", "tree": {"sha": "24baf7669e3729f3368df77f0c1bae6e2be562ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24baf7669e3729f3368df77f0c1bae6e2be562ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a56886e9df65ee26c605446e80470f2a6c2e2e82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a56886e9df65ee26c605446e80470f2a6c2e2e82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a56886e9df65ee26c605446e80470f2a6c2e2e82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a56886e9df65ee26c605446e80470f2a6c2e2e82/comments", "author": null, "committer": null, "parents": [{"sha": "fc3819c9b4924ae0cc0e19826ba27afd4a46f169", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc3819c9b4924ae0cc0e19826ba27afd4a46f169", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc3819c9b4924ae0cc0e19826ba27afd4a46f169"}], "stats": {"total": 71, "additions": 53, "deletions": 18}, "files": [{"sha": "6f56c6078a31e1e906a92c9678127dd29e0945b7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56886e9df65ee26c605446e80470f2a6c2e2e82/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56886e9df65ee26c605446e80470f2a6c2e2e82/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a56886e9df65ee26c605446e80470f2a6c2e2e82", "patch": "@@ -1,3 +1,22 @@\n+2016-05-02  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* fname.adb (Is_Predefined_File_Name): Also consider non-krunched\n+\ti-* names.\n+\n+2016-05-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb (Aggregate_Constraint_Checks): Separate\n+\taccessibility checks and non-null checks for aggregate components,\n+\tto prevent spurious accessibility errors.\n+\n+2016-05-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (OK_For_Limited_Init): A type conversion is not\n+\talways legal in the in-place initialization of a limited entity\n+\t(e.g. an allocator).\n+\t* sem_res.adb (Resolve_Allocator): Improve error message with RM\n+\treference  when allocator expression is illegal.\n+\n 2016-05-02  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch6.adb (Expand_Call): When inlining a call to a function"}, {"sha": "e17aa346bd5b1e8feb8f5b56f46c44a520bd57c5", "filename": "gcc/ada/fname.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56886e9df65ee26c605446e80470f2a6c2e2e82/gcc%2Fada%2Ffname.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56886e9df65ee26c605446e80470f2a6c2e2e82/gcc%2Fada%2Ffname.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffname.adb?ref=a56886e9df65ee26c605446e80470f2a6c2e2e82", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -134,14 +134,9 @@ package body Fname is\n          Name_Len := Name_Len - 4;\n       end if;\n \n-      --  Definitely false if longer than 12 characters (8.3)\n-\n-      if Name_Len > 8 then\n-         return False;\n-\n       --  Definitely predefined if prefix is a- i- or s- followed by letter\n \n-      elsif Name_Len >=  3\n+      if Name_Len >=  3\n         and then Name_Buffer (2) = '-'\n         and then (Name_Buffer (1) = 'a'\n                     or else\n@@ -153,6 +148,11 @@ package body Fname is\n                   Name_Buffer (3) in 'A' .. 'Z')\n       then\n          return True;\n+\n+      --  Definitely false if longer than 12 characters (8.3)\n+\n+      elsif Name_Len > 8 then\n+         return False;\n       end if;\n \n       --  Otherwise check against special list, first padding to 8 characters"}, {"sha": "f3c8584e16071caedb494518c1b851828f72960f", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56886e9df65ee26c605446e80470f2a6c2e2e82/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56886e9df65ee26c605446e80470f2a6c2e2e82/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=a56886e9df65ee26c605446e80470f2a6c2e2e82", "patch": "@@ -18656,11 +18656,14 @@ package body Sem_Ch3 is\n    is\n    begin\n       --  An object of a limited interface type can be initialized with any\n-      --  expression of a nonlimited descendant type.\n+      --  expression of a nonlimited descendant type. However this does not\n+      --  apply if this is a view conversion of some other expression. This\n+      --  is checked below.\n \n       if Is_Class_Wide_Type (Typ)\n         and then Is_Limited_Interface (Typ)\n         and then not Is_Limited_Type (Etype (Exp))\n+        and then Nkind (Exp) /= N_Type_Conversion\n       then\n          return True;\n       end if;"}, {"sha": "e1b22d17b26135777ccf827815370f704ef90964", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56886e9df65ee26c605446e80470f2a6c2e2e82/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56886e9df65ee26c605446e80470f2a6c2e2e82/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=a56886e9df65ee26c605446e80470f2a6c2e2e82", "patch": "@@ -4767,13 +4767,21 @@ package body Sem_Res is\n            and then not In_Instance_Body\n          then\n             if not OK_For_Limited_Init (Etype (E), Expression (E)) then\n-               Error_Msg_N (\"initialization not allowed for limited types\", N);\n+               if Nkind (Parent (N)) = N_Assignment_Statement then\n+                  Error_Msg_N\n+                    (\"illegal expression for initialized allocator of a \"\n+                     & \"limited type (RM 7.5 (2.7/2))\", N);\n+               else\n+                  Error_Msg_N\n+                    (\"initialization not allowed for limited types\", N);\n+               end if;\n+\n                Explain_Limited_Type (Etype (E), N);\n             end if;\n          end if;\n \n-         --  A qualified expression requires an exact match of the type.\n-         --  Class-wide matching is not allowed.\n+         --  A qualified expression requires an exact match of the type. Class-\n+         --  wide matching is not allowed.\n \n          if (Is_Class_Wide_Type (Etype (Expression (E)))\n               or else Is_Class_Wide_Type (Etype (E)))"}, {"sha": "3b241bde58af3a3935e5a73b6481c214feb93b9e", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56886e9df65ee26c605446e80470f2a6c2e2e82/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56886e9df65ee26c605446e80470f2a6c2e2e82/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=a56886e9df65ee26c605446e80470f2a6c2e2e82", "patch": "@@ -326,21 +326,19 @@ package body Sem_Util is\n       --  Ada 2005 (AI-230): Generate a conversion to an anonymous access\n       --  component's type to force the appropriate accessibility checks.\n \n-      --  Ada 2005 (AI-231): Generate conversion to the null-excluding\n-      --  type to force the corresponding run-time check\n+      --  Ada 2005 (AI-231): Generate conversion to the null-excluding type to\n+      --  force the corresponding run-time check\n \n       if Is_Access_Type (Check_Typ)\n-        and then ((Is_Local_Anonymous_Access (Check_Typ))\n-                    or else (Can_Never_Be_Null (Check_Typ)\n-                              and then not Can_Never_Be_Null (Exp_Typ)))\n+        and then Is_Local_Anonymous_Access (Check_Typ)\n       then\n          Rewrite (Exp, Convert_To (Check_Typ, Relocate_Node (Exp)));\n          Analyze_And_Resolve (Exp, Check_Typ);\n          Check_Unset_Reference (Exp);\n       end if;\n \n-      --  This is really expansion activity, so make sure that expansion is\n-      --  on and is allowed. In GNATprove mode, we also want check flags to\n+      --  What follows is really expansion activity, so check that expansion\n+      --  is on and is allowed. In GNATprove mode, we also want check flags to\n       --  be added in the tree, so that the formal verification can rely on\n       --  those to be present. In GNATprove mode for formal verification, some\n       --  treatment typically only done during expansion needs to be performed\n@@ -353,6 +351,13 @@ package body Sem_Util is\n          return;\n       end if;\n \n+      if Is_Access_Type (Check_Typ)\n+        and then Can_Never_Be_Null (Check_Typ)\n+        and then not Can_Never_Be_Null (Exp_Typ)\n+      then\n+         Install_Null_Excluding_Check (Exp);\n+      end if;\n+\n       --  First check if we have to insert discriminant checks\n \n       if Has_Discriminants (Exp_Typ) then"}]}