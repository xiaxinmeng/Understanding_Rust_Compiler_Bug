{"sha": "67057c537b7f1f895ff87f8616e8a122f886f1bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcwNTdjNTM3YjdmMWY4OTVmZjg3Zjg2MTZlOGExMjJmODg2ZjFiZg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-06-07T20:50:14Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-06-07T20:50:14Z"}, "message": "real.c (real_copysign): New function to implement libm's copysign.\n\n\n\t* real.c (real_copysign): New function to implement libm's copysign.\n\t* real.h (real_copysign): Prototype here.\n\t* fold-const.c (tree_expr_nonnegative_p): The result of sqrt, sqrtf\n\tand sqrtl can be negative, as sqrt(-0.0) = -0.0.  Correct whitespace.\n\t* builtins.c (fold_builtin_isascii, fold_builtin_toascii,\n\tfold_builtin_isdigit): Add function prototypes.\n\t(fold_builtin_copysign): New function to fold copysign, copysignf\n\tand copysignl.  Optimize copysign(x,x) as x.  Evaluate copysign of\n\tconstant arguments at compile-time using real_copysign.  Fold\n\tcopysign(X,Y) as fabs(X) if Y is always non-negative.\n\t(fold_builtin_1): Correct minor whitespace/style issues.  Call\n\tfold_builtin_copysign for BUILT_IN_COPYSIGN{,F,L}.\n\n\t* gcc.dg/builtins-41.c: New test case.\n\t* gcc.dg/builtins-42.c: New test case.\n\nFrom-SVN: r82721", "tree": {"sha": "cf683ee1008a7ca53b18dd77effb242f594c9a57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf683ee1008a7ca53b18dd77effb242f594c9a57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67057c537b7f1f895ff87f8616e8a122f886f1bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67057c537b7f1f895ff87f8616e8a122f886f1bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67057c537b7f1f895ff87f8616e8a122f886f1bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67057c537b7f1f895ff87f8616e8a122f886f1bf/comments", "author": null, "committer": null, "parents": [{"sha": "f29b9db93eb2f3508d2376103af158675f1ee2b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f29b9db93eb2f3508d2376103af158675f1ee2b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f29b9db93eb2f3508d2376103af158675f1ee2b0"}], "stats": {"total": 218, "additions": 211, "deletions": 7}, "files": [{"sha": "a119116e04b41a859df8143154d90a62ae58bdf6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67057c537b7f1f895ff87f8616e8a122f886f1bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67057c537b7f1f895ff87f8616e8a122f886f1bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67057c537b7f1f895ff87f8616e8a122f886f1bf", "patch": "@@ -1,3 +1,18 @@\n+2004-06-07  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* real.c (real_copysign): New function to implement libm's copysign.\n+\t* real.h (real_copysign): Prototype here.\n+\t* fold-const.c (tree_expr_nonnegative_p): The result of sqrt, sqrtf\n+\tand sqrtl can be negative, as sqrt(-0.0) = -0.0.  Correct whitespace.\n+\t* builtins.c (fold_builtin_isascii, fold_builtin_toascii,\n+\tfold_builtin_isdigit): Add function prototypes.\n+\t(fold_builtin_copysign): New function to fold copysign, copysignf\n+\tand copysignl.  Optimize copysign(x,x) as x.  Evaluate copysign of\n+\tconstant arguments at compile-time using real_copysign.  Fold\n+\tcopysign(X,Y) as fabs(X) if Y is always non-negative.\n+\t(fold_builtin_1): Correct minor whitespace/style issues.  Call\n+\tfold_builtin_copysign for BUILT_IN_COPYSIGN{,F,L}.\n+\n 2004-06-07  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* tree.c (iterative_hash_expr): Use real_hash."}, {"sha": "d10924f7919ad086fbfa626b4673925f375d7b11", "filename": "gcc/builtins.c", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67057c537b7f1f895ff87f8616e8a122f886f1bf/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67057c537b7f1f895ff87f8616e8a122f886f1bf/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=67057c537b7f1f895ff87f8616e8a122f886f1bf", "patch": "@@ -162,6 +162,10 @@ static tree fold_builtin_memcmp (tree);\n static tree fold_builtin_strcmp (tree);\n static tree fold_builtin_strncmp (tree);\n static tree fold_builtin_signbit (tree);\n+static tree fold_builtin_copysign (tree, tree);\n+static tree fold_builtin_isascii (tree);\n+static tree fold_builtin_toascii (tree);\n+static tree fold_builtin_isdigit (tree);\n \n static tree simplify_builtin_memcmp (tree);\n static tree simplify_builtin_strcmp (tree);\n@@ -7298,6 +7302,49 @@ fold_builtin_signbit (tree exp)\n   return NULL_TREE;\n }\n \n+/* Fold function call to builtin copysign, copysignf or copysignl.\n+   Return NULL_TREE if no simplification can be made.  */\n+\n+static tree\n+fold_builtin_copysign (tree arglist, tree type)\n+{\n+  tree arg1, arg2;\n+\n+  if (!validate_arglist (arglist, REAL_TYPE, REAL_TYPE, VOID_TYPE))\n+    return NULL_TREE;\n+\n+  arg1 = TREE_VALUE (arglist);\n+  arg2 = TREE_VALUE (TREE_CHAIN (arglist));\n+\n+  /* copysign(X,X) is X.  */\n+  if (operand_equal_p (arg1, arg2, 0))\n+    return fold_convert (type, arg1);\n+\n+  /* If ARG1 and ARG2 are compile-time constants, determine the result.  */\n+  if (TREE_CODE (arg1) == REAL_CST\n+      && TREE_CODE (arg2) == REAL_CST\n+      && !TREE_CONSTANT_OVERFLOW (arg1)\n+      && !TREE_CONSTANT_OVERFLOW (arg2))\n+    {\n+      REAL_VALUE_TYPE c1, c2;\n+\n+      c1 = TREE_REAL_CST (arg1);\n+      c2 = TREE_REAL_CST (arg2);\n+      real_copysign (&c1, &c2);\n+      return build_real (type, c1);\n+      c1.sign = c2.sign;\n+    }\n+\n+  /* copysign(X, Y) is fabs(X) when Y is always non-negative.\n+     Remember to evaluate Y for side-effects.  */\n+  if (tree_expr_nonnegative_p (arg2))\n+    return omit_one_operand (type,\n+\t\t\t     fold (build1 (ABS_EXPR, type, arg1)),\n+\t\t\t     arg2);\n+\n+  return NULL_TREE;\n+}\n+\n /* Fold a call to builtin isascii.  */\n \n static tree\n@@ -7577,32 +7624,34 @@ fold_builtin_1 (tree exp)\n     case BUILT_IN_EXPF:\n     case BUILT_IN_EXPL:\n       return fold_builtin_exponent (exp, &dconste);\n+\n     case BUILT_IN_EXP2:\n     case BUILT_IN_EXP2F:\n     case BUILT_IN_EXP2L:\n       return fold_builtin_exponent (exp, &dconst2);\n+\n     case BUILT_IN_EXP10:\n     case BUILT_IN_EXP10F:\n     case BUILT_IN_EXP10L:\n     case BUILT_IN_POW10:\n     case BUILT_IN_POW10F:\n     case BUILT_IN_POW10L:\n       return fold_builtin_exponent (exp, &dconst10);\n+\n     case BUILT_IN_LOG:\n     case BUILT_IN_LOGF:\n     case BUILT_IN_LOGL:\n       return fold_builtin_logarithm (exp, &dconste);\n-      break;\n+\n     case BUILT_IN_LOG2:\n     case BUILT_IN_LOG2F:\n     case BUILT_IN_LOG2L:\n       return fold_builtin_logarithm (exp, &dconst2);\n-      break;\n+\n     case BUILT_IN_LOG10:\n     case BUILT_IN_LOG10F:\n     case BUILT_IN_LOG10L:\n       return fold_builtin_logarithm (exp, &dconst10);\n-      break;\n \n     case BUILT_IN_TAN:\n     case BUILT_IN_TANF:\n@@ -7884,6 +7933,11 @@ fold_builtin_1 (tree exp)\n     case BUILT_IN_ISDIGIT:\n       return fold_builtin_isdigit (arglist);\n \n+    case BUILT_IN_COPYSIGN:\n+    case BUILT_IN_COPYSIGNF:\n+    case BUILT_IN_COPYSIGNL:\n+      return fold_builtin_copysign (arglist, type);\n+\n     default:\n       break;\n     }"}, {"sha": "6eee71016585eb5c54d886e936e25945eb20024f", "filename": "gcc/fold-const.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67057c537b7f1f895ff87f8616e8a122f886f1bf/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67057c537b7f1f895ff87f8616e8a122f886f1bf/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=67057c537b7f1f895ff87f8616e8a122f886f1bf", "patch": "@@ -9024,13 +9024,18 @@ tree_expr_nonnegative_p (tree t)\n \t    CASE_BUILTIN_F (BUILT_IN_FREXP)\n \t    CASE_BUILTIN_F (BUILT_IN_HYPOT)\n \t    CASE_BUILTIN_F (BUILT_IN_POW10)\n-\t    CASE_BUILTIN_F (BUILT_IN_SQRT)\n \t    CASE_BUILTIN_I (BUILT_IN_FFS)\n \t    CASE_BUILTIN_I (BUILT_IN_PARITY)\n \t    CASE_BUILTIN_I (BUILT_IN_POPCOUNT)\n \t      /* Always true.  */\n \t      return 1;\n \n+\t    CASE_BUILTIN_F (BUILT_IN_SQRT)\n+\t      /* sqrt(-0.0) is -0.0.  */\n+\t      if (!HONOR_SIGNED_ZEROS (TYPE_MODE (TREE_TYPE (t))))\n+\t\treturn 1;\n+\t      return tree_expr_nonnegative_p (TREE_VALUE (arglist));\n+\n \t    CASE_BUILTIN_F (BUILT_IN_ASINH)\n \t    CASE_BUILTIN_F (BUILT_IN_ATAN)\n \t    CASE_BUILTIN_F (BUILT_IN_ATANH)\n@@ -9057,17 +9062,17 @@ tree_expr_nonnegative_p (tree t)\n \t      /* True if the 1st argument is nonnegative.  */\n \t      return tree_expr_nonnegative_p (TREE_VALUE (arglist));\n \n-\t    CASE_BUILTIN_F(BUILT_IN_FMAX)\n+\t    CASE_BUILTIN_F (BUILT_IN_FMAX)\n \t      /* True if the 1st OR 2nd arguments are nonnegative.  */\n \t      return tree_expr_nonnegative_p (TREE_VALUE (arglist))\n \t        || tree_expr_nonnegative_p (TREE_VALUE (TREE_CHAIN (arglist)));\n \n-\t    CASE_BUILTIN_F(BUILT_IN_FMIN)\n+\t    CASE_BUILTIN_F (BUILT_IN_FMIN)\n \t      /* True if the 1st AND 2nd arguments are nonnegative.  */\n \t      return tree_expr_nonnegative_p (TREE_VALUE (arglist))\n \t        && tree_expr_nonnegative_p (TREE_VALUE (TREE_CHAIN (arglist)));\n \n-\t    CASE_BUILTIN_F(BUILT_IN_COPYSIGN)\n+\t    CASE_BUILTIN_F (BUILT_IN_COPYSIGN)\n \t      /* True if the 2nd argument is nonnegative.  */\n \t      return tree_expr_nonnegative_p (TREE_VALUE (TREE_CHAIN (arglist)));\n "}, {"sha": "65d57c30a53d5bd7a5752279272c545aa51d89fb", "filename": "gcc/real.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67057c537b7f1f895ff87f8616e8a122f886f1bf/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67057c537b7f1f895ff87f8616e8a122f886f1bf/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=67057c537b7f1f895ff87f8616e8a122f886f1bf", "patch": "@@ -4587,3 +4587,11 @@ real_round (REAL_VALUE_TYPE *r, enum machine_mode mode,\n     real_convert (r, mode, r);\n }\n \n+/* Set the sign of R to the sign of X.  */\n+\n+void\n+real_copysign (REAL_VALUE_TYPE *r, const REAL_VALUE_TYPE *x)\n+{\n+  r->sign = x->sign;\n+}\n+"}, {"sha": "4200e5ef702a131d4084a60196068a79d2a06839", "filename": "gcc/real.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67057c537b7f1f895ff87f8616e8a122f886f1bf/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67057c537b7f1f895ff87f8616e8a122f886f1bf/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=67057c537b7f1f895ff87f8616e8a122f886f1bf", "patch": "@@ -384,4 +384,7 @@ extern void real_ceil (REAL_VALUE_TYPE *, enum machine_mode,\n extern void real_round (REAL_VALUE_TYPE *, enum machine_mode,\n \t\t\tconst REAL_VALUE_TYPE *);\n \n+/* Set the sign of R to the sign of X.  */\n+extern void real_copysign (REAL_VALUE_TYPE *, const REAL_VALUE_TYPE *);\n+\n #endif /* ! GCC_REAL_H */"}, {"sha": "35bf511e71de9ce222c9791469a6b49d0b6e3126", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67057c537b7f1f895ff87f8616e8a122f886f1bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67057c537b7f1f895ff87f8616e8a122f886f1bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=67057c537b7f1f895ff87f8616e8a122f886f1bf", "patch": "@@ -1,3 +1,8 @@\n+2004-06-07  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/builtins-41.c: New test case.\n+\t* gcc.dg/builtins-42.c: New test case.\n+\n 2004-06-07  David Edelsohn  <edelsohn@gnu.org>\n \n \t* g++.dg/ext/altivec-1.C: XFAIL powerpc-ibm-aix*."}, {"sha": "5b96551fb116a01d73cbb61b92d94f2d3c17a06e", "filename": "gcc/testsuite/gcc.dg/builtins-41.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67057c537b7f1f895ff87f8616e8a122f886f1bf/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-41.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67057c537b7f1f895ff87f8616e8a122f886f1bf/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-41.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-41.c?ref=67057c537b7f1f895ff87f8616e8a122f886f1bf", "patch": "@@ -0,0 +1,57 @@\n+/* Copyright (C) 2004 Free Software Foundation.\n+\n+   Check that constant folding of copysign, copysignf and copysignl math\n+   functions doesn't break anything and produces the expected results.\n+\n+   Written by Roger Sayle, 6th June 2004.  */\n+\n+/* { dg-do link } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void link_error(void);\n+\n+extern double copysign(double, double);\n+extern float copysignf(float, float);\n+extern long double copysignl(long double, long double);\n+\n+int main()\n+{\n+  if (copysign (2.0, 1.0) != 2.0)\n+    link_error ();\n+  if (copysign (2.0, -1.0) != -2.0)\n+    link_error ();\n+  if (copysign (-2.0, 1.0) != 2.0)\n+    link_error ();\n+  if (copysign (-2.0, -1.0) != -2.0)\n+    link_error ();\n+\n+  if (copysign (2.0, 1.0) != 2.0)\n+    link_error ();\n+  if (copysign (2.0, -1.0) != -2.0)\n+    link_error ();\n+  if (copysign (-2.0, 1.0) != 2.0)\n+    link_error ();\n+  if (copysign (-2.0, -1.0) != -2.0)\n+    link_error ();\n+\n+  if (copysignf (2.0f, 1.0f) != 2.0f)\n+    link_error ();\n+  if (copysignf (2.0f, -1.0f) != -2.0f)\n+    link_error ();\n+  if (copysignf (-2.0f, 1.0f) != 2.0f)\n+    link_error ();\n+  if (copysignf (-2.0f, -1.0f) != -2.0f)\n+    link_error ();\n+\n+  if (copysignl (2.0l, 1.0l) != 2.0l)\n+    link_error ();\n+  if (copysignl (2.0l, -1.0l) != -2.0l)\n+    link_error ();\n+  if (copysignl (-2.0l, 1.0l) != 2.0l)\n+    link_error ();\n+  if (copysignl (-2.0l, -1.0l) != -2.0l)\n+    link_error ();\n+\n+  return 0;\n+}\n+"}, {"sha": "5b96551fb116a01d73cbb61b92d94f2d3c17a06e", "filename": "gcc/testsuite/gcc.dg/builtins-42.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67057c537b7f1f895ff87f8616e8a122f886f1bf/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-42.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67057c537b7f1f895ff87f8616e8a122f886f1bf/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-42.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-42.c?ref=67057c537b7f1f895ff87f8616e8a122f886f1bf", "patch": "@@ -0,0 +1,57 @@\n+/* Copyright (C) 2004 Free Software Foundation.\n+\n+   Check that constant folding of copysign, copysignf and copysignl math\n+   functions doesn't break anything and produces the expected results.\n+\n+   Written by Roger Sayle, 6th June 2004.  */\n+\n+/* { dg-do link } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void link_error(void);\n+\n+extern double copysign(double, double);\n+extern float copysignf(float, float);\n+extern long double copysignl(long double, long double);\n+\n+int main()\n+{\n+  if (copysign (2.0, 1.0) != 2.0)\n+    link_error ();\n+  if (copysign (2.0, -1.0) != -2.0)\n+    link_error ();\n+  if (copysign (-2.0, 1.0) != 2.0)\n+    link_error ();\n+  if (copysign (-2.0, -1.0) != -2.0)\n+    link_error ();\n+\n+  if (copysign (2.0, 1.0) != 2.0)\n+    link_error ();\n+  if (copysign (2.0, -1.0) != -2.0)\n+    link_error ();\n+  if (copysign (-2.0, 1.0) != 2.0)\n+    link_error ();\n+  if (copysign (-2.0, -1.0) != -2.0)\n+    link_error ();\n+\n+  if (copysignf (2.0f, 1.0f) != 2.0f)\n+    link_error ();\n+  if (copysignf (2.0f, -1.0f) != -2.0f)\n+    link_error ();\n+  if (copysignf (-2.0f, 1.0f) != 2.0f)\n+    link_error ();\n+  if (copysignf (-2.0f, -1.0f) != -2.0f)\n+    link_error ();\n+\n+  if (copysignl (2.0l, 1.0l) != 2.0l)\n+    link_error ();\n+  if (copysignl (2.0l, -1.0l) != -2.0l)\n+    link_error ();\n+  if (copysignl (-2.0l, 1.0l) != 2.0l)\n+    link_error ();\n+  if (copysignl (-2.0l, -1.0l) != -2.0l)\n+    link_error ();\n+\n+  return 0;\n+}\n+"}]}