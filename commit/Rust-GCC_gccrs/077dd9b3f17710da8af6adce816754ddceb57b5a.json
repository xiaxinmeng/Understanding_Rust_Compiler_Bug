{"sha": "077dd9b3f17710da8af6adce816754ddceb57b5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc3ZGQ5YjNmMTc3MTBkYThhZjZhZGNlODE2NzU0ZGRjZWI1N2I1YQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-04-13T20:53:02Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-04-13T20:53:02Z"}, "message": "c++: More self-modifying constexpr init [PR94470]\n\nIn this PR we're incorrectly rejecting a self-modifying constexpr initializer as\na consequence of the fix for PR78572.\n\nIt looks like however that the fix for PR78572 is obsoleted by the fix for\nPR89336: the testcase from the former PR successfully compiles even with its fix\nreverted.\n\nBut then further testing showed that the analogous testcase of PR78572 where the\narray has an aggregate element type is still problematic (i.e. we ICE) even with\nthe fix for PR78572 applied.  The reason is that in cxx_eval_bare_aggregate we\nattach a constructor_elt of aggregate type always to the end of the new\nCONSTRUCTOR, but that's not necessarily correct if the CONSTRUCTOR is\nself-modifying.  We should instead be using get_or_insert_ctor_field to insert\nthe constructor_elt in the right place.\n\nSo this patch reverts the PR78572 fix and makes the appropriate changes to\ncxx_eval_bare_aggregate.  This fixes PR94470, and we now are also able to fully\nreduce the initializers of 'arr' and 'arr2' in the new test array57.C to\nconstant initializers.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/94470\n\t* constexpr.c (get_or_insert_ctor_field): Set default value of parameter\n\t'pos_hint' to -1.\n\t(cxx_eval_bare_aggregate): Use get_or_insert_ctor_field instead of\n\tassuming the the next index belongs at the end of the new CONSTRUCTOR.\n\t(cxx_eval_store_expression): Revert PR c++/78572 fix.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/94470\n\t* g++.dg/cpp1y/constexpr-nsdmi8.C: New test.\n\t* g++.dg/cpp1y/constexpr-nsdmi9.C: New test.\n\t* g++.dg/init/array57.C: New test.", "tree": {"sha": "b0d7554dab038a86c0cb058116998372543639da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0d7554dab038a86c0cb058116998372543639da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/077dd9b3f17710da8af6adce816754ddceb57b5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/077dd9b3f17710da8af6adce816754ddceb57b5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/077dd9b3f17710da8af6adce816754ddceb57b5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/077dd9b3f17710da8af6adce816754ddceb57b5a/comments", "author": null, "committer": null, "parents": [{"sha": "ee26baf4a8162a309fbcba591377b9e0c362630d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee26baf4a8162a309fbcba591377b9e0c362630d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee26baf4a8162a309fbcba591377b9e0c362630d"}], "stats": {"total": 78, "additions": 66, "deletions": 12}, "files": [{"sha": "3da61dbcfd96033f2623b2d26a0558d9bdc27c67", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/077dd9b3f17710da8af6adce816754ddceb57b5a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/077dd9b3f17710da8af6adce816754ddceb57b5a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=077dd9b3f17710da8af6adce816754ddceb57b5a", "patch": "@@ -1,3 +1,12 @@\n+2020-04-13  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/94470\n+\t* constexpr.c (get_or_insert_ctor_field): Set default value of parameter\n+\t'pos_hint' to -1.\n+\t(cxx_eval_bare_aggregate): Use get_or_insert_ctor_field instead of\n+\tassuming the the next index belongs at the end of the new CONSTRUCTOR.\n+\t(cxx_eval_store_expression): Revert PR c++/78572 fix.\n+\n 2020-04-13  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/94426  lambdas with internal linkage are different to no-linkage"}, {"sha": "d8636ddb92f24a8cbe4aeb07c46cd048deb9f873", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/077dd9b3f17710da8af6adce816754ddceb57b5a/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/077dd9b3f17710da8af6adce816754ddceb57b5a/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=077dd9b3f17710da8af6adce816754ddceb57b5a", "patch": "@@ -3161,7 +3161,7 @@ find_array_ctor_elt (tree ary, tree dindex, bool insert)\n    for the (integer) index of the matching constructor_elt within CTOR.  */\n \n static constructor_elt *\n-get_or_insert_ctor_field (tree ctor, tree index, int pos_hint)\n+get_or_insert_ctor_field (tree ctor, tree index, int pos_hint = -1)\n {\n   /* Check the hint first.  */\n   if (pos_hint >= 0 && (unsigned)pos_hint < CONSTRUCTOR_NELTS (ctor)\n@@ -3860,14 +3860,15 @@ cxx_eval_bare_aggregate (const constexpr_ctx *ctx, tree t,\n \t{\n \t  /* If we built a new CONSTRUCTOR, attach it now so that other\n \t     initializers can refer to it.  */\n-\t  CONSTRUCTOR_APPEND_ELT (*p, index, new_ctx.ctor);\n-\t  pos_hint = vec_safe_length (*p) - 1;\n+\t  constructor_elt *cep = get_or_insert_ctor_field (ctx->ctor, index);\n+\t  cep->value = new_ctx.ctor;\n+\t  pos_hint = cep - (*p)->begin();\n \t}\n       else if (TREE_CODE (type) == UNION_TYPE)\n \t/* Otherwise if we're constructing a non-aggregate union member, set\n \t   the active union member now so that we can later detect and diagnose\n \t   if its initializer attempts to activate another member.  */\n-\tCONSTRUCTOR_APPEND_ELT (*p, index, NULL_TREE);\n+\tget_or_insert_ctor_field (ctx->ctor, index);\n       tree elt = cxx_eval_constant_expression (&new_ctx, value,\n \t\t\t\t\t       lval,\n \t\t\t\t\t       non_constant_p, overflow_p);\n@@ -4667,13 +4668,7 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n   /* And then find/build up our initializer for the path to the subobject\n      we're initializing.  */\n   tree *valp;\n-  if (object == ctx->object && VAR_P (object)\n-      && DECL_NAME (object) && ctx->call == NULL)\n-    /* The variable we're building up an aggregate initializer for is outside\n-       the constant-expression, so don't evaluate the store.  We check\n-       DECL_NAME to handle TARGET_EXPR temporaries, which are fair game.  */\n-    valp = NULL;\n-  else if (DECL_P (object))\n+  if (DECL_P (object))\n     valp = ctx->global->values.get (object);\n   else\n     valp = NULL;\n@@ -4769,7 +4764,7 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n       vec_safe_push (indexes, index);\n \n       constructor_elt *cep\n-\t= get_or_insert_ctor_field (*valp, index, /*pos_hint=*/-1);\n+\t= get_or_insert_ctor_field (*valp, index);\n       index_pos_hints.safe_push (cep - CONSTRUCTOR_ELTS (*valp)->begin());\n \n       if (code == UNION_TYPE)"}, {"sha": "74a7fa1016376e092c85e9af56e48b3da9f85b19", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/077dd9b3f17710da8af6adce816754ddceb57b5a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/077dd9b3f17710da8af6adce816754ddceb57b5a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=077dd9b3f17710da8af6adce816754ddceb57b5a", "patch": "@@ -1,3 +1,10 @@\n+2020-04-13  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/94470\n+\t* g++.dg/cpp1y/constexpr-nsdmi8.C: New test.\n+\t* g++.dg/cpp1y/constexpr-nsdmi9.C: New test.\n+\t* g++.dg/init/array57.C: New test.\n+\n 2020-04-13  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* g++.dg/coroutines/coro-pre-proc.C: Update coroutines builtin"}, {"sha": "6b77432f61a5287c3ecc9533450a623fdb126e14", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-nsdmi8.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/077dd9b3f17710da8af6adce816754ddceb57b5a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-nsdmi8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/077dd9b3f17710da8af6adce816754ddceb57b5a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-nsdmi8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-nsdmi8.C?ref=077dd9b3f17710da8af6adce816754ddceb57b5a", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/94470\n+// { dg-do compile { target c++14 } }\n+\n+struct X\n+{\n+  int b = (c=5);\n+  int c = (b=1);\n+};\n+\n+constexpr X o = { };\n+static_assert(o.b == 1 && o.c == 1, \"\");"}, {"sha": "d51465d84391d8c9b0801f5e4b9cad838c7bf703", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-nsdmi9.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/077dd9b3f17710da8af6adce816754ddceb57b5a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-nsdmi9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/077dd9b3f17710da8af6adce816754ddceb57b5a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-nsdmi9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-nsdmi9.C?ref=077dd9b3f17710da8af6adce816754ddceb57b5a", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/94470\n+// { dg-do compile { target c++14 } }\n+\n+struct Y\n+{\n+  int a;\n+};\n+\n+struct X\n+{\n+  Y b = (c={5});\n+  Y c = (b={1});\n+};\n+\n+constexpr X o = { };\n+static_assert(o.b.a == 1 && o.c.a == 1, \"\");"}, {"sha": "2f012b7a23192ecb756cc3daa6a86aa8347a553d", "filename": "gcc/testsuite/g++.dg/init/array57.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/077dd9b3f17710da8af6adce816754ddceb57b5a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray57.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/077dd9b3f17710da8af6adce816754ddceb57b5a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray57.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray57.C?ref=077dd9b3f17710da8af6adce816754ddceb57b5a", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/78572\n+// { dg-do run { target c++11 } }\n+\n+static int arr[10] = { arr[3]=5, arr[7]=3, };\n+\n+struct X { int v; };\n+static X arr2[10] = { arr2[3]={5}, arr2[7]={3}, };\n+\n+int\n+main()\n+{\n+  const int expected[10] = {5,3,0,5,0,0,0,3,0,0};\n+  for (int i = 0; i < 10; i++)\n+    if (arr[i] != expected[i] || arr2[i].v != expected[i])\n+      __builtin_abort();\n+}"}]}