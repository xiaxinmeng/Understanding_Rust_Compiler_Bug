{"sha": "967ba98d99b8a3a51f9ba33771453a945ace3745", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY3YmE5OGQ5OWI4YTNhNTFmOWJhMzM3NzE0NTNhOTQ1YWNlMzc0NQ==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-02-26T22:25:48Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-02-26T22:25:48Z"}, "message": "sparc.md: Add sparclet scheduling parameters.\n\n\t* sparc/sparc.md: Add sparclet scheduling parameters.\n\t(compare define_insn's): Move close to compare define_expand's.\n\t(32 bit multiply patterns): Use for TARGET_SPARCLET.\n\t(smacsi,smacdi,umacdi): Multiply/accumulate patterns for the sparclet.\n\nFrom-SVN: r11349", "tree": {"sha": "823fe50f08f4a34093cf8d9ac32331915f61ec12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/823fe50f08f4a34093cf8d9ac32331915f61ec12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/967ba98d99b8a3a51f9ba33771453a945ace3745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/967ba98d99b8a3a51f9ba33771453a945ace3745", "html_url": "https://github.com/Rust-GCC/gccrs/commit/967ba98d99b8a3a51f9ba33771453a945ace3745", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/967ba98d99b8a3a51f9ba33771453a945ace3745/comments", "author": null, "committer": null, "parents": [{"sha": "f2be3a724bcba92f1ff03f89aabf89673f4079df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2be3a724bcba92f1ff03f89aabf89673f4079df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2be3a724bcba92f1ff03f89aabf89673f4079df"}], "stats": {"total": 312, "additions": 182, "deletions": 130}, "files": [{"sha": "95ee2b07e344f1d7436a187b52fd06aa951ac5e7", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 182, "deletions": 130, "changes": 312, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967ba98d99b8a3a51f9ba33771453a945ace3745/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967ba98d99b8a3a51f9ba33771453a945ace3745/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=967ba98d99b8a3a51f9ba33771453a945ace3745", "patch": "@@ -245,6 +245,23 @@\n   (and (eq_attr \"type\" \"fpsqrt\")   (eq_attr \"cpu\" \"supersparc\")) 36 30)\n (define_function_unit \"fp_mds\" 1 0\n   (and (eq_attr \"type\" \"imul\")     (eq_attr \"cpu\" \"supersparc\")) 12 12)\n+\n+;; ----- sparclet 90c701 scheduling\n+;; The 90c701 issues 1 insn per cycle.\n+;; Results may be written back out of order.\n+\n+;; Loads take 2 extra cycles to complete and 4 can be buffered at a time.\n+(define_function_unit \"s90c701_load\" 4 1\n+  (and (eq_attr \"type\" \"load\")          (eq_attr \"cpu\" \"90c701\")) 3 1)\n+;; Stores take 2(?) extra cycles to complete.\n+;; It is desirable to not have any memory operation in the following 2 cycles.\n+;; (??? or 2 memory ops in the case of std).\n+(define_function_unit \"s90c701_store\" 1 0\n+  (and (eq_attr \"type\" \"store\")\t\t(eq_attr \"cpu\" \"90c701\")) 3 3\n+  [(eq_attr \"type\" \"load,store\")])\n+;; The multiply unit has a latency of 5.\n+(define_function_unit \"s90c701_mul\" 1 0\n+  (and (eq_attr \"type\" \"imul\")\t\t(eq_attr \"cpu\" \"90c701\")) 5 5)\n \f\n ;; Compare instructions.\n ;; This controls RTL generation and register allocation.\n@@ -324,6 +341,120 @@\n   DONE;\n }\")\n \n+;; Now the compare DEFINE_INSNs.\n+\n+(define_insn \"*cmpsi_insn\"\n+  [(set (reg:CC 0)\n+\t(compare:CC (match_operand:SI 0 \"register_operand\" \"r\")\n+\t\t    (match_operand:SI 1 \"arith_operand\" \"rI\")))]\n+  \"\"\n+  \"cmp %r0,%1\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_insn \"*cmpsf_fpe_sp32\"\n+  [(set (reg:CCFPE 0)\n+\t(compare:CCFPE (match_operand:SF 0 \"register_operand\" \"f\")\n+\t\t       (match_operand:SF 1 \"register_operand\" \"f\")))]\n+  \"! TARGET_V9 && TARGET_FPU\"\n+  \"fcmpes %0,%1\"\n+  [(set_attr \"type\" \"fpcmp\")])\n+\n+(define_insn \"*cmpdf_fpe_sp32\"\n+  [(set (reg:CCFPE 0)\n+\t(compare:CCFPE (match_operand:DF 0 \"register_operand\" \"e\")\n+\t\t       (match_operand:DF 1 \"register_operand\" \"e\")))]\n+  \"! TARGET_V9 && TARGET_FPU\"\n+  \"fcmped %0,%1\"\n+  [(set_attr \"type\" \"fpcmp\")])\n+\n+(define_insn \"*cmptf_fpe_sp32\"\n+  [(set (reg:CCFPE 0)\n+\t(compare:CCFPE (match_operand:TF 0 \"register_operand\" \"e\")\n+\t\t       (match_operand:TF 1 \"register_operand\" \"e\")))]\n+  \"! TARGET_V9 && TARGET_FPU && TARGET_HARD_QUAD\"\n+  \"fcmpeq %0,%1\"\n+  [(set_attr \"type\" \"fpcmp\")])\n+\n+(define_insn \"*cmpsf_fp_sp32\"\n+  [(set (reg:CCFP 0)\n+\t(compare:CCFP (match_operand:SF 0 \"register_operand\" \"f\")\n+\t\t      (match_operand:SF 1 \"register_operand\" \"f\")))]\n+  \"! TARGET_V9 && TARGET_FPU\"\n+  \"fcmps %0,%1\"\n+  [(set_attr \"type\" \"fpcmp\")])\n+\n+(define_insn \"*cmpdf_fp_sp32\"\n+  [(set (reg:CCFP 0)\n+\t(compare:CCFP (match_operand:DF 0 \"register_operand\" \"e\")\n+\t\t      (match_operand:DF 1 \"register_operand\" \"e\")))]\n+  \"! TARGET_V9 && TARGET_FPU\"\n+  \"fcmpd %0,%1\"\n+  [(set_attr \"type\" \"fpcmp\")])\n+\n+(define_insn \"*cmptf_fp_sp32\"\n+  [(set (reg:CCFP 0)\n+\t(compare:CCFP (match_operand:TF 0 \"register_operand\" \"e\")\n+\t\t      (match_operand:TF 1 \"register_operand\" \"e\")))]\n+  \"! TARGET_V9 && TARGET_FPU && TARGET_HARD_QUAD\"\n+  \"fcmpq %0,%1\"\n+  [(set_attr \"type\" \"fpcmp\")])\n+\n+(define_insn \"*cmpdi_sp64\"\n+  [(set (reg:CCX 0)\n+\t(compare:CCX (match_operand:DI 0 \"register_operand\" \"r\")\n+\t\t     (match_operand:DI 1 \"arith_double_operand\" \"rHI\")))]\n+  \"TARGET_ARCH64\"\n+  \"cmp %r0,%1\"\n+  [(set_attr \"type\" \"compare\")])\n+\n+(define_insn \"*cmpsf_fpe_sp64\"\n+  [(set (match_operand:CCFPE 0 \"ccfp_reg_operand\" \"=c\")\n+\t(compare:CCFPE (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t       (match_operand:SF 2 \"register_operand\" \"f\")))]\n+  \"TARGET_V9 && TARGET_FPU\"\n+  \"fcmpes %0,%1,%2\"\n+  [(set_attr \"type\" \"fpcmp\")])\n+\n+(define_insn \"*cmpdf_fpe_sp64\"\n+  [(set (match_operand:CCFPE 0 \"ccfp_reg_operand\" \"=c\")\n+\t(compare:CCFPE (match_operand:DF 1 \"register_operand\" \"e\")\n+\t\t       (match_operand:DF 2 \"register_operand\" \"e\")))]\n+  \"TARGET_V9 && TARGET_FPU\"\n+  \"fcmped %0,%1,%2\"\n+  [(set_attr \"type\" \"fpcmp\")])\n+\n+(define_insn \"*cmptf_fpe_sp64\"\n+  [(set (match_operand:CCFPE 0 \"ccfp_reg_operand\" \"=c\")\n+\t(compare:CCFPE (match_operand:TF 1 \"register_operand\" \"e\")\n+\t\t       (match_operand:TF 2 \"register_operand\" \"e\")))]\n+  \"TARGET_V9 && TARGET_FPU && TARGET_HARD_QUAD\"\n+  \"fcmpeq %0,%1,%2\"\n+  [(set_attr \"type\" \"fpcmp\")])\n+\n+(define_insn \"*cmpsf_fp_sp64\"\n+  [(set (match_operand:CCFP 0 \"ccfp_reg_operand\" \"=c\")\n+\t(compare:CCFP (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t      (match_operand:SF 2 \"register_operand\" \"f\")))]\n+  \"TARGET_V9 && TARGET_FPU\"\n+  \"fcmps %0,%1,%2\"\n+  [(set_attr \"type\" \"fpcmp\")])\n+\n+(define_insn \"*cmpdf_fp_sp64\"\n+  [(set (match_operand:CCFP 0 \"ccfp_reg_operand\" \"=c\")\n+\t(compare:CCFP (match_operand:DF 1 \"register_operand\" \"e\")\n+\t\t      (match_operand:DF 2 \"register_operand\" \"e\")))]\n+  \"TARGET_V9 && TARGET_FPU\"\n+  \"fcmpd %0,%1,%2\"\n+  [(set_attr \"type\" \"fpcmp\")])\n+\n+(define_insn \"*cmptf_fp_sp64\"\n+  [(set (match_operand:CCFP 0 \"ccfp_reg_operand\" \"=c\")\n+\t(compare:CCFP (match_operand:TF 1 \"register_operand\" \"e\")\n+\t\t      (match_operand:TF 2 \"register_operand\" \"e\")))]\n+  \"TARGET_V9 && TARGET_FPU && TARGET_HARD_QUAD\"\n+  \"fcmpq %0,%1,%2\"\n+  [(set_attr \"type\" \"fpcmp\")])\n+\f\n ;; Next come the scc insns.  For seq, sne, sgeu, and sltu, we can do this\n ;; without jumps using the addx/subx instructions.  For seq/sne on v9 we use\n ;; the same code as v8 (the addx/subx method has more applications).  The\n@@ -696,119 +827,7 @@\n   operands[1] = gen_compare_reg (LEU, sparc_compare_op0, sparc_compare_op1);\n }\")\n \n-;; Now the DEFINE_INSNs for the compare and scc cases.  First the compares.\n-\n-(define_insn \"*cmpsi_insn\"\n-  [(set (reg:CC 0)\n-\t(compare:CC (match_operand:SI 0 \"register_operand\" \"r\")\n-\t\t    (match_operand:SI 1 \"arith_operand\" \"rI\")))]\n-  \"\"\n-  \"cmp %r0,%1\"\n-  [(set_attr \"type\" \"compare\")])\n-\n-(define_insn \"*cmpsf_fpe_sp32\"\n-  [(set (reg:CCFPE 0)\n-\t(compare:CCFPE (match_operand:SF 0 \"register_operand\" \"f\")\n-\t\t       (match_operand:SF 1 \"register_operand\" \"f\")))]\n-  \"! TARGET_V9 && TARGET_FPU\"\n-  \"fcmpes %0,%1\"\n-  [(set_attr \"type\" \"fpcmp\")])\n-\n-(define_insn \"*cmpdf_fpe_sp32\"\n-  [(set (reg:CCFPE 0)\n-\t(compare:CCFPE (match_operand:DF 0 \"register_operand\" \"e\")\n-\t\t       (match_operand:DF 1 \"register_operand\" \"e\")))]\n-  \"! TARGET_V9 && TARGET_FPU\"\n-  \"fcmped %0,%1\"\n-  [(set_attr \"type\" \"fpcmp\")])\n-\n-(define_insn \"*cmptf_fpe_sp32\"\n-  [(set (reg:CCFPE 0)\n-\t(compare:CCFPE (match_operand:TF 0 \"register_operand\" \"e\")\n-\t\t       (match_operand:TF 1 \"register_operand\" \"e\")))]\n-  \"! TARGET_V9 && TARGET_FPU && TARGET_HARD_QUAD\"\n-  \"fcmpeq %0,%1\"\n-  [(set_attr \"type\" \"fpcmp\")])\n-\n-(define_insn \"*cmpsf_fp_sp32\"\n-  [(set (reg:CCFP 0)\n-\t(compare:CCFP (match_operand:SF 0 \"register_operand\" \"f\")\n-\t\t      (match_operand:SF 1 \"register_operand\" \"f\")))]\n-  \"! TARGET_V9 && TARGET_FPU\"\n-  \"fcmps %0,%1\"\n-  [(set_attr \"type\" \"fpcmp\")])\n-\n-(define_insn \"*cmpdf_fp_sp32\"\n-  [(set (reg:CCFP 0)\n-\t(compare:CCFP (match_operand:DF 0 \"register_operand\" \"e\")\n-\t\t      (match_operand:DF 1 \"register_operand\" \"e\")))]\n-  \"! TARGET_V9 && TARGET_FPU\"\n-  \"fcmpd %0,%1\"\n-  [(set_attr \"type\" \"fpcmp\")])\n-\n-(define_insn \"*cmptf_fp_sp32\"\n-  [(set (reg:CCFP 0)\n-\t(compare:CCFP (match_operand:TF 0 \"register_operand\" \"e\")\n-\t\t      (match_operand:TF 1 \"register_operand\" \"e\")))]\n-  \"! TARGET_V9 && TARGET_FPU && TARGET_HARD_QUAD\"\n-  \"fcmpq %0,%1\"\n-  [(set_attr \"type\" \"fpcmp\")])\n-\n-(define_insn \"*cmpdi_sp64\"\n-  [(set (reg:CCX 0)\n-\t(compare:CCX (match_operand:DI 0 \"register_operand\" \"r\")\n-\t\t     (match_operand:DI 1 \"arith_double_operand\" \"rHI\")))]\n-  \"TARGET_ARCH64\"\n-  \"cmp %r0,%1\"\n-  [(set_attr \"type\" \"compare\")])\n-\n-(define_insn \"*cmpsf_fpe_sp64\"\n-  [(set (match_operand:CCFPE 0 \"ccfp_reg_operand\" \"=c\")\n-\t(compare:CCFPE (match_operand:SF 1 \"register_operand\" \"f\")\n-\t\t       (match_operand:SF 2 \"register_operand\" \"f\")))]\n-  \"TARGET_V9 && TARGET_FPU\"\n-  \"fcmpes %0,%1,%2\"\n-  [(set_attr \"type\" \"fpcmp\")])\n-\n-(define_insn \"*cmpdf_fpe_sp64\"\n-  [(set (match_operand:CCFPE 0 \"ccfp_reg_operand\" \"=c\")\n-\t(compare:CCFPE (match_operand:DF 1 \"register_operand\" \"e\")\n-\t\t       (match_operand:DF 2 \"register_operand\" \"e\")))]\n-  \"TARGET_V9 && TARGET_FPU\"\n-  \"fcmped %0,%1,%2\"\n-  [(set_attr \"type\" \"fpcmp\")])\n-\n-(define_insn \"*cmptf_fpe_sp64\"\n-  [(set (match_operand:CCFPE 0 \"ccfp_reg_operand\" \"=c\")\n-\t(compare:CCFPE (match_operand:TF 1 \"register_operand\" \"e\")\n-\t\t       (match_operand:TF 2 \"register_operand\" \"e\")))]\n-  \"TARGET_V9 && TARGET_FPU && TARGET_HARD_QUAD\"\n-  \"fcmpeq %0,%1,%2\"\n-  [(set_attr \"type\" \"fpcmp\")])\n-\n-(define_insn \"*cmpsf_fp_sp64\"\n-  [(set (match_operand:CCFP 0 \"ccfp_reg_operand\" \"=c\")\n-\t(compare:CCFP (match_operand:SF 1 \"register_operand\" \"f\")\n-\t\t      (match_operand:SF 2 \"register_operand\" \"f\")))]\n-  \"TARGET_V9 && TARGET_FPU\"\n-  \"fcmps %0,%1,%2\"\n-  [(set_attr \"type\" \"fpcmp\")])\n-\n-(define_insn \"*cmpdf_fp_sp64\"\n-  [(set (match_operand:CCFP 0 \"ccfp_reg_operand\" \"=c\")\n-\t(compare:CCFP (match_operand:DF 1 \"register_operand\" \"e\")\n-\t\t      (match_operand:DF 2 \"register_operand\" \"e\")))]\n-  \"TARGET_V9 && TARGET_FPU\"\n-  \"fcmpd %0,%1,%2\"\n-  [(set_attr \"type\" \"fpcmp\")])\n-\n-(define_insn \"*cmptf_fp_sp64\"\n-  [(set (match_operand:CCFP 0 \"ccfp_reg_operand\" \"=c\")\n-\t(compare:CCFP (match_operand:TF 1 \"register_operand\" \"e\")\n-\t\t      (match_operand:TF 2 \"register_operand\" \"e\")))]\n-  \"TARGET_V9 && TARGET_FPU && TARGET_HARD_QUAD\"\n-  \"fcmpq %0,%1,%2\"\n-  [(set_attr \"type\" \"fpcmp\")])\n+;; Now the DEFINE_INSNs for the scc cases.\n \n ;; The SEQ and SNE patterns are special because they can be done\n ;; without any branching and do not involve a COMPARE.\n@@ -3651,7 +3670,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(mult:SI (match_operand:SI 1 \"arith_operand\" \"%r\")\n \t\t (match_operand:SI 2 \"arith_operand\" \"rI\")))]\n-  \"TARGET_V8 || TARGET_SPARCLITE || TARGET_DEPRECATED_V8_INSNS\"\n+  \"TARGET_V8 || TARGET_SPARCLITE || TARGET_SPARCLET || TARGET_DEPRECATED_V8_INSNS\"\n   \"smul %1,%2,%0\"\n   [(set_attr \"type\" \"imul\")])\n \n@@ -3679,7 +3698,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"\"))\n \t\t (sign_extend:DI (match_operand:SI 2 \"arith_operand\" \"\"))))]\n-  \"TARGET_V8 || TARGET_SPARCLITE || TARGET_DEPRECATED_V8_INSNS\"\n+  \"TARGET_V8 || TARGET_SPARCLITE || TARGET_SPARCLET || TARGET_DEPRECATED_V8_INSNS\"\n   \"\n {\n   if (CONSTANT_P (operands[2]))\n@@ -3693,7 +3712,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n-  \"TARGET_V8 || TARGET_SPARCLITE || TARGET_DEPRECATED_V8_INSNS\"\n+  \"TARGET_V8 || TARGET_SPARCLITE || TARGET_SPARCLET || TARGET_DEPRECATED_V8_INSNS\"\n   \"smul %1,%2,%R0\\;rd %%y,%0\"\n   [(set_attr \"length\" \"2\")])\n \n@@ -3703,7 +3722,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t (match_operand:SI 2 \"small_int\" \"I\")))]\n-  \"TARGET_V8 || TARGET_SPARCLITE || TARGET_DEPRECATED_V8_INSNS\"\n+  \"TARGET_V8 || TARGET_SPARCLITE || TARGET_SPARCLET || TARGET_DEPRECATED_V8_INSNS\"\n   \"smul %1,%2,%R0\\;rd %%y,%0\"\n   [(set_attr \"length\" \"2\")])\n \n@@ -3713,7 +3732,7 @@\n \t (lshiftrt:DI (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"\"))\n \t\t\t       (sign_extend:DI (match_operand:SI 2 \"arith_operand\" \"\")))\n \t\t      (const_int 32))))]\n-  \"TARGET_V8 || TARGET_SPARCLITE || TARGET_DEPRECATED_V8_INSNS\"\n+  \"TARGET_V8 || TARGET_SPARCLITE || TARGET_SPARCLET || TARGET_DEPRECATED_V8_INSNS\"\n   \"\n {\n   if (CONSTANT_P (operands[2]))\n@@ -3729,7 +3748,7 @@\n \t (lshiftrt:DI (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t\t       (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"r\")))\n \t\t      (const_int 32))))]\n-  \"TARGET_V8 || TARGET_SPARCLITE || TARGET_DEPRECATED_V8_INSNS\"\n+  \"TARGET_V8 || TARGET_SPARCLITE || TARGET_SPARCLET || TARGET_DEPRECATED_V8_INSNS\"\n   \"smul %1,%2,%%g0\\;rd %%y,%0\"\n   [(set_attr \"length\" \"2\")])\n \n@@ -3739,15 +3758,15 @@\n \t (lshiftrt:DI (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t\t       (match_operand:SI 2 \"register_operand\" \"r\"))\n \t\t      (const_int 32))))]\n-  \"TARGET_V8 || TARGET_SPARCLITE || TARGET_DEPRECATED_V8_INSNS\"\n+  \"TARGET_V8 || TARGET_SPARCLITE || TARGET_SPARCLET || TARGET_DEPRECATED_V8_INSNS\"\n   \"smul %1,%2,%%g0\\;rd %%y,%0\"\n   [(set_attr \"length\" \"2\")])\n \n (define_expand \"umulsidi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"\"))\n \t\t (zero_extend:DI (match_operand:SI 2 \"uns_arith_operand\" \"\"))))]\n-  \"TARGET_V8 || TARGET_SPARCLITE || TARGET_DEPRECATED_V8_INSNS\"\n+  \"TARGET_V8 || TARGET_SPARCLITE || TARGET_SPARCLET || TARGET_DEPRECATED_V8_INSNS\"\n   \"\n {\n   if (CONSTANT_P (operands[2]))\n@@ -3761,7 +3780,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n-  \"TARGET_V8 || TARGET_SPARCLITE || TARGET_DEPRECATED_V8_INSNS\"\n+  \"TARGET_V8 || TARGET_SPARCLITE || TARGET_SPARCLET || TARGET_DEPRECATED_V8_INSNS\"\n   \"umul %1,%2,%R0\\;rd %%y,%0\"\n   [(set_attr \"length\" \"2\")])\n \n@@ -3771,7 +3790,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t (match_operand:SI 2 \"uns_small_int\" \"\")))]\n-  \"TARGET_V8 || TARGET_SPARCLITE || TARGET_DEPRECATED_V8_INSNS\"\n+  \"TARGET_V8 || TARGET_SPARCLITE || TARGET_SPARCLET || TARGET_DEPRECATED_V8_INSNS\"\n   \"umul %1,%2,%R0\\;rd %%y,%0\"\n   [(set_attr \"length\" \"2\")])\n \n@@ -3781,7 +3800,7 @@\n \t (lshiftrt:DI (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"\"))\n \t\t\t       (zero_extend:DI (match_operand:SI 2 \"uns_arith_operand\" \"\")))\n \t\t      (const_int 32))))]\n-  \"TARGET_V8 || TARGET_SPARCLITE || TARGET_DEPRECATED_V8_INSNS\"\n+  \"TARGET_V8 || TARGET_SPARCLITE || TARGET_SPARCLET || TARGET_DEPRECATED_V8_INSNS\"\n   \"\n {\n   if (CONSTANT_P (operands[2]))\n@@ -3797,7 +3816,7 @@\n \t (lshiftrt:DI (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t\t       (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r\")))\n \t\t      (const_int 32))))]\n-  \"TARGET_V8 || TARGET_SPARCLITE || TARGET_DEPRECATED_V8_INSNS\"\n+  \"TARGET_V8 || TARGET_SPARCLITE || TARGET_SPARCLET || TARGET_DEPRECATED_V8_INSNS\"\n   \"umul %1,%2,%%g0\\;rd %%y,%0\"\n   [(set_attr \"length\" \"2\")])\n \n@@ -3807,7 +3826,7 @@\n \t (lshiftrt:DI (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t\t       (match_operand:SI 2 \"uns_small_int\" \"\"))\n \t\t      (const_int 32))))]\n-  \"TARGET_V8 || TARGET_SPARCLITE || TARGET_DEPRECATED_V8_INSNS\"\n+  \"TARGET_V8 || TARGET_SPARCLITE || TARGET_SPARCLET || TARGET_DEPRECATED_V8_INSNS\"\n   \"umul %1,%2,%%g0\\;rd %%y,%0\"\n   [(set_attr \"length\" \"2\")])\n \n@@ -3903,10 +3922,43 @@\n   [(set (attr \"length\")\n \t(if_then_else (eq_attr \"isa\" \"v9\")\n \t\t      (const_int 2) (const_int 5)))])\n+\n+; sparclet multiply/accumulate insns\n+\n+(define_insn \"*smacsi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"+r\")\n+\t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n+\t\t\t  (match_operand:SI 2 \"arith_operand\" \"rI\"))\n+\t\t (match_dup 0)))]\n+  \"TARGET_SPARCLET\"\n+  \"smac %1,%2,%0\"\n+  [(set_attr \"type\" \"imul\")])\n+\n+(define_insn \"*smacdi\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"+r\")\n+\t(plus:DI (mult:DI (sign_extend:DI\n+\t\t\t   (match_operand:SI 1 \"register_operand\" \"%r\"))\n+\t\t\t  (sign_extend:DI\n+\t\t\t   (match_operand:SI 2 \"register_operand\" \"r\")))\n+\t\t (match_dup 0)))]\n+  \"TARGET_SPARCLET\"\n+  \"smacd %1,%2,%R0\"\n+  [(set_attr \"type\" \"imul\")])\n+\n+(define_insn \"*umacdi\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"+r\")\n+\t(plus:DI (mult:DI (zero_extend:DI\n+\t\t\t   (match_operand:SI 1 \"register_operand\" \"%r\"))\n+\t\t\t  (zero_extend:DI\n+\t\t\t   (match_operand:SI 2 \"register_operand\" \"r\")))\n+\t\t (match_dup 0)))]\n+  \"TARGET_SPARCLET\"\n+  \"umacd %1,%2,%R0\"\n+  [(set_attr \"type\" \"imul\")])\n \f\n ;;- Boolean instructions\n-;; We define DImode `and` so with DImode `not` we can get\n-;; DImode `andn`.  Other combinations are possible.\n+;; We define DImode `and' so with DImode `not' we can get\n+;; DImode `andn'.  Other combinations are possible.\n \n (define_expand \"anddi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -5324,7 +5376,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n \t(ffs:SI (match_operand:SI 1 \"register_operand\" \"r\")))\n    (clobber (match_scratch:SI 2 \"=&r\"))]\n-  \"TARGET_SPARCLITE\"\n+  \"TARGET_SPARCLITE || TARGET_SPARCLET\"\n   \"sub %%g0,%1,%0\\;and %0,%1,%0\\;scan %0,0,%0\\;mov 32,%2\\;sub %2,%0,%0\\;sra %0,31,%2\\;and %2,31,%2\\;add %2,%0,%0\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"8\")])\n@@ -5425,7 +5477,7 @@\n \t(lo_sum:SI (match_dup 0) (match_dup 1)))]\n   \"\")\n \n-;; LABEL_REFs are not modified by `legitimize_pic_address`\n+;; LABEL_REFs are not modified by `legitimize_pic_address'\n ;; so do not recurse infinitely in the PIC case.\n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"\")"}]}