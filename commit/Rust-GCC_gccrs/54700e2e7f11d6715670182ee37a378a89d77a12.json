{"sha": "54700e2e7f11d6715670182ee37a378a89d77a12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ3MDBlMmU3ZjExZDY3MTU2NzAxODJlZTM3YTM3OGE4OWQ3N2ExMg==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2016-09-12T21:30:33Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2016-09-12T21:30:33Z"}, "message": "Add tunning of ldpw for THunderX.\n\n\n2016-09-12  Andrew Pinski  <apinski@cavium.com>\n\n        * config/aarch64/aarch64-tuning-flags.def (SLOW_UNALIGNED_LDPW):\n        New tuning option.\n        * config/aarch64/aarch64.c (thunderx_tunings): Enable\n        AARCH64_EXTRA_TUNE_SLOW_UNALIGNED_LDPW.\n        (aarch64_operands_ok_for_ldpstp): Return false if\n        AARCH64_EXTRA_TUNE_SLOW_UNALIGNED_LDPW and the mode\n        was SImode and the alignment is less than 8 byte.\n        (aarch64_operands_adjust_ok_for_ldpstp): Likewise.\n2016-09-12  Andrew Pinski  <apinski@cavium.com>\n\n        * gcc.target/aarch64/thunderxloadpair.c: New testcase.\n        * gcc.target/aarch64/thunderxnoloadpair.c: New testcase.\n\nFrom-SVN: r240102", "tree": {"sha": "6e800cf87fc5a29de7310822ed32aaedcc3b58ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e800cf87fc5a29de7310822ed32aaedcc3b58ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54700e2e7f11d6715670182ee37a378a89d77a12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54700e2e7f11d6715670182ee37a378a89d77a12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54700e2e7f11d6715670182ee37a378a89d77a12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54700e2e7f11d6715670182ee37a378a89d77a12/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "47f138d178c2b89b0f9f964404bb15243cd72a28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47f138d178c2b89b0f9f964404bb15243cd72a28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47f138d178c2b89b0f9f964404bb15243cd72a28"}], "stats": {"total": 78, "additions": 77, "deletions": 1}, "files": [{"sha": "2440b8f72ac0fa4bd1e41628cfa235232444e0c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54700e2e7f11d6715670182ee37a378a89d77a12/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54700e2e7f11d6715670182ee37a378a89d77a12/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54700e2e7f11d6715670182ee37a378a89d77a12", "patch": "@@ -1,3 +1,14 @@\n+2016-09-12  Andrew Pinski  <apinski@cavium.com>\n+\n+\t* config/aarch64/aarch64-tuning-flags.def (SLOW_UNALIGNED_LDPW):\n+\tNew tuning option.\n+\t* config/aarch64/aarch64.c (thunderx_tunings): Enable\n+\tAARCH64_EXTRA_TUNE_SLOW_UNALIGNED_LDPW.\n+\t(aarch64_operands_ok_for_ldpstp): Return false if\n+\tAARCH64_EXTRA_TUNE_SLOW_UNALIGNED_LDPW and the mode\n+\twas SImode and the alignment is less than 8 byte.\n+\t(aarch64_operands_adjust_ok_for_ldpstp): Likewise.\n+\n 2016-09-12  Orlando Arias  <oarias@knights.ucf.edu>\n \n \tPR target/77570"}, {"sha": "68b5ba0ad0eaf9568015f1bbdbb5447e73902477", "filename": "gcc/config/aarch64/aarch64-tuning-flags.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54700e2e7f11d6715670182ee37a378a89d77a12/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54700e2e7f11d6715670182ee37a378a89d77a12/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def?ref=54700e2e7f11d6715670182ee37a378a89d77a12", "patch": "@@ -29,3 +29,8 @@\n      AARCH64_TUNE_ to give an enum name. */\n \n AARCH64_EXTRA_TUNING_OPTION (\"rename_fma_regs\", RENAME_FMA_REGS)\n+\n+/* Don't create non-8 byte aligned load/store pair.  That is if the\n+two load/stores are not at least 8 byte aligned don't create load/store\n+pairs.   */\n+AARCH64_EXTRA_TUNING_OPTION (\"slow_unaligned_ldpw\", SLOW_UNALIGNED_LDPW)"}, {"sha": "3fcfaa88290bfb515ed984a0521432b74fdd3b2c", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54700e2e7f11d6715670182ee37a378a89d77a12/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54700e2e7f11d6715670182ee37a378a89d77a12/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=54700e2e7f11d6715670182ee37a378a89d77a12", "patch": "@@ -712,7 +712,7 @@ static const struct tune_params thunderx_tunings =\n   0,\t/* max_case_values.  */\n   0,\t/* cache_line_size.  */\n   tune_params::AUTOPREFETCHER_OFF,\t/* autoprefetcher_model.  */\n-  (AARCH64_EXTRA_TUNE_NONE)\t/* tune_flags.  */\n+  (AARCH64_EXTRA_TUNE_SLOW_UNALIGNED_LDPW)\t/* tune_flags.  */\n };\n \n static const struct tune_params xgene1_tunings =\n@@ -13629,6 +13629,15 @@ aarch64_operands_ok_for_ldpstp (rtx *operands, bool load,\n   if (MEM_VOLATILE_P (mem_1) || MEM_VOLATILE_P (mem_2))\n     return false;\n \n+  /* If we have SImode and slow unaligned ldp,\n+     check the alignment to be at least 8 byte. */\n+  if (mode == SImode\n+      && (aarch64_tune_params.extra_tuning_flags\n+          & AARCH64_EXTRA_TUNE_SLOW_UNALIGNED_LDPW)\n+      && !optimize_size\n+      && MEM_ALIGN (mem_1) < 8 * BITS_PER_UNIT)\n+    return false;\n+\n   /* Check if the addresses are in the form of [base+offset].  */\n   extract_base_offset_in_addr (mem_1, &base_1, &offset_1);\n   if (base_1 == NULL_RTX || offset_1 == NULL_RTX)\n@@ -13788,6 +13797,15 @@ aarch64_operands_adjust_ok_for_ldpstp (rtx *operands, bool load,\n \treturn false;\n     }\n \n+  /* If we have SImode and slow unaligned ldp,\n+     check the alignment to be at least 8 byte. */\n+  if (mode == SImode\n+      && (aarch64_tune_params.extra_tuning_flags\n+          & AARCH64_EXTRA_TUNE_SLOW_UNALIGNED_LDPW)\n+      && !optimize_size\n+      && MEM_ALIGN (mem_1) < 8 * BITS_PER_UNIT)\n+    return false;\n+\n   if (REG_P (reg_1) && FP_REGNUM_P (REGNO (reg_1)))\n     rclass_1 = FP_REGS;\n   else"}, {"sha": "9e59b031c574c75a60382f98425d07f2edbd01dc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54700e2e7f11d6715670182ee37a378a89d77a12/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54700e2e7f11d6715670182ee37a378a89d77a12/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=54700e2e7f11d6715670182ee37a378a89d77a12", "patch": "@@ -1,3 +1,8 @@\n+2016-09-12  Andrew Pinski  <apinski@cavium.com>\n+\n+\t* gcc.target/aarch64/thunderxloadpair.c: New testcase.\n+\t* gcc.target/aarch64/thunderxnoloadpair.c: New testcase.\n+\n 2016-09-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/compat/scalar-by-value-4_x.c: Also test passing of"}, {"sha": "14b1f736093ef18256fe54a791ae361c81c9678f", "filename": "gcc/testsuite/gcc.target/aarch64/thunderxloadpair.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54700e2e7f11d6715670182ee37a378a89d77a12/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fthunderxloadpair.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54700e2e7f11d6715670182ee37a378a89d77a12/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fthunderxloadpair.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fthunderxloadpair.c?ref=54700e2e7f11d6715670182ee37a378a89d77a12", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcpu=thunderx\" } */\n+\n+struct ldp\n+{\n+  long long c;\n+  int a, b;\n+};\n+\n+\n+int f(struct ldp *a)\n+{\n+  return a->a + a->b;\n+}\n+\n+\n+/* We know the alignement of a->a to be 8 byte aligned so it is profitable\n+   to do ldp. */\n+/* { dg-final { scan-assembler-times \"ldp\\tw\\[0-9\\]+, w\\[0-9\\]\" 1 } } */\n+"}, {"sha": "3093ad0e1f242b0b81e7b39dab493ac6a9d37cf0", "filename": "gcc/testsuite/gcc.target/aarch64/thunderxnoloadpair.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54700e2e7f11d6715670182ee37a378a89d77a12/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fthunderxnoloadpair.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54700e2e7f11d6715670182ee37a378a89d77a12/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fthunderxnoloadpair.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fthunderxnoloadpair.c?ref=54700e2e7f11d6715670182ee37a378a89d77a12", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcpu=thunderx\" } */\n+\n+struct noldp\n+{\n+  int a, b;\n+};\n+\n+\n+int f(struct noldp *a)\n+{\n+  return a->a + a->b;\n+}\n+\n+/* We know the alignement of a->a to be 4 byte aligned so it is not profitable\n+   to do ldp. */\n+/* { dg-final { scan-assembler-not \"ldp\\tw\\[0-9\\]+, w\\[0-9\\]\" } } */"}]}