{"sha": "5e93f39f64234c07447aca0d466c8ae989306669", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU5M2YzOWY2NDIzNGMwNzQ0N2FjYTBkNDY2YzhhZTk4OTMwNjY2OQ==", "commit": {"author": {"name": "Petur Runolfsson", "email": "peturr02@ru.is", "date": "2003-11-04T05:27:41Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-11-04T05:27:41Z"}, "message": "re PR libstdc++/12790 (basic_filebuf doesn't handle stateful encodings)\n\n\n\n2003-11-03  Petur Runolfsson  <peturr02@ru.is>\n\n\tPR libstdc++/12790\n\t* include/bits/fstream.tcc: Delete _M_last_overflowed.\n\t(basic_filebuf::basic_filebuf): Initialize _M_state_last.\n\t(basic_filebuf::open, basic_filebuf::close): Assign\n\t_M_state_beg to _M_state_cur and _M_state_last.\n\t(basic_filebuf::close): Call _M_terminate_output to handle\n\tunshift and flushing.\n\t(basic_filebuf::underflow): Assign _M_state_last, throw\n\texception instead of calling abort when codecvt::max_length()\n\tis bad.\n\t(basic_filebuf::seekoff): Use _M_state_last when calling\n\tcodecvt::length(), pass correct state to _M_seek.\n\t(basic_filebuf::seekpos): Pass __pos.state() to _M_seek.\n\t(basic_filebuf::_M_seek): Add __state_type parameter,\n\tset _M_state_cur correctly, store the resulting state in\n\tthe return value and use _M_terminate_output to handle\n\tflushing and unshift.\n\t(basic_filebuf::_M_terminate_output): Flush contents of\n\toutput buffer, if any, then call codecvt::unshift as\n\tneeded and output the result.\n\t(basic_filebuf::sync): Move here, don't modify _M_writing\n\tor _M_reading.\n\n\t* include/std/std_fstream.h\n\t(basic_filebuf::_M_state_last): Declare it.\n\t(basic_filebuf::_M_last_overflowed): Delete.\n\t(basic_filebuf::_M_seek): Add __state_type parameter.\n\t(basic_filebuf::sync): Declare only.\n\t(basic_filebuf::_M_output_unshift): Delete.\n\t(basic_filebuf::_M_terminate_output): Declare it.\n\n\t* testsuite/testsuite_character.h:\n\tDefine character class and state class plus char_traits and\n\tcodecvt specializations for same for testing support for\n\tstateful encodings.\n\n\t* testsuite/27_io/basic_filebuf/close/12790-1.cc,\n\t* testsuite/27_io/basic_filebuf/close/char/12790-1.cc,\n\t* testsuite/27_io/basic_filebuf/close/char/12790-2.cc,\n\t* testsuite/27_io/basic_filebuf/close/char/12790-3.cc,\n\t* testsuite/27_io/basic_filebuf/close/char/12790-4.cc,\n\t* testsuite/27_io/basic_filebuf/close/wchar_t/12790-1.cc,\n\t* testsuite/27_io/basic_filebuf/close/wchar_t/12790-2.cc,\n\t* testsuite/27_io/basic_filebuf/close/wchar_t/12790-3.cc,\n\t* testsuite/27_io/basic_filebuf/close/wchar_t/12790-4.cc,\n\t* testsuite/27_io/basic_filebuf/open/12790-1.cc,\n\t* testsuite/27_io/basic_filebuf/seekoff/12790-1.cc,\n\t* testsuite/27_io/basic_filebuf/seekoff/12790-2.cc,\n\t* testsuite/27_io/basic_filebuf/seekoff/12790-3.cc,\n\t* testsuite/27_io/basic_filebuf/seekoff/12790-4.cc,\n\t* testsuite/27_io/basic_filebuf/seekoff/char/12790-1.cc,\n\t* testsuite/27_io/basic_filebuf/seekoff/char/12790-2.cc,\n\t* testsuite/27_io/basic_filebuf/seekoff/char/12790-3.cc,\n\t* testsuite/27_io/basic_filebuf/seekoff/char/12790-4.cc,\n\t* testsuite/27_io/basic_filebuf/seekoff/wchar_t/12790-1.cc,\n\t* testsuite/27_io/basic_filebuf/seekoff/wchar_t/12790-2.cc,\n\t* testsuite/27_io/basic_filebuf/seekoff/wchar_t/12790-3.cc,\n\t* testsuite/27_io/basic_filebuf/seekoff/wchar_t/12790-4.cc,\n\t* testsuite/27_io/basic_filebuf/seekoff/wchar_t/3.cc,\n\t* testsuite/27_io/basic_filebuf/seekpos/12790-1.cc,\n\t* testsuite/27_io/basic_filebuf/seekpos/12790-2.cc,\n\t* testsuite/27_io/basic_filebuf/seekpos/12790-3.cc,\n\t* testsuite/27_io/basic_filebuf/seekpos/char/12790-1.cc,\n\t* testsuite/27_io/basic_filebuf/seekpos/char/12790-2.cc,\n\t* testsuite/27_io/basic_filebuf/seekpos/char/12790-3.cc,\n\t* testsuite/27_io/basic_filebuf/seekpos/char/12790-4.cc,\n\t* testsuite/27_io/basic_filebuf/seekpos/wchar_t/1.cc,\n\t* testsuite/27_io/basic_filebuf/seekpos/wchar_t/12790-1.cc,\n\t* testsuite/27_io/basic_filebuf/seekpos/wchar_t/12790-2.cc,\n\t* testsuite/27_io/basic_filebuf/seekpos/wchar_t/12790-3.cc,\n\t* testsuite/27_io/basic_filebuf/seekpos/wchar_t/12790-4.cc,\n\t* testsuite/27_io/basic_filebuf/sync/char/1.cc,\n\t* testsuite/27_io/basic_filebuf/sync/wchar_t/1.cc:\n\tNew tests.\n\n\t* testsuite/27_io/basic_filebuf/3.cc,\n\t* testsuite/27_io/basic_filebuf/seekoff/10132-2.cc,\n\t* testsuite/27_io/basic_filebuf/seekpos/10132-3.cc,\n\t* testsuite/27_io/basic_fstream/3.cc,\n\t* testsuite/27_io/basic_ifstream/3.cc,\n\t* testsuite/27_io/basic_ofstream/3.cc:\n\tUse streamoff as off_type and fpos<state_type> as pos_type.\n\n\t* testsuite/27_io/basic_filebuf/seekpos/char/1-io.cc,\n\t* testsuite/27_io/basic_filebuf/seekpos/char/1-out.cc:\n\tCheck that sync does *not* set _M_writing to false.\n\nFrom-SVN: r73245", "tree": {"sha": "dbeb51f2111e74f88fe23facb07d9567776a19a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbeb51f2111e74f88fe23facb07d9567776a19a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e93f39f64234c07447aca0d466c8ae989306669", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e93f39f64234c07447aca0d466c8ae989306669", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e93f39f64234c07447aca0d466c8ae989306669", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e93f39f64234c07447aca0d466c8ae989306669/comments", "author": null, "committer": null, "parents": [{"sha": "99f8b2501d1ba3247656c37cd820222c366d6a31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f8b2501d1ba3247656c37cd820222c366d6a31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99f8b2501d1ba3247656c37cd820222c366d6a31"}], "stats": {"total": 3570, "additions": 3473, "deletions": 97}, "files": [{"sha": "9124c8d0ed32e2fac0ac0a8f6926297a4d0608fa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -1,3 +1,92 @@\n+2003-11-03  Petur Runolfsson  <peturr02@ru.is>\n+\n+\tPR libstdc++/12790\n+\t* include/bits/fstream.tcc: Delete _M_last_overflowed.\n+\t(basic_filebuf::basic_filebuf): Initialize _M_state_last.\n+\t(basic_filebuf::open, basic_filebuf::close): Assign\n+\t_M_state_beg to _M_state_cur and _M_state_last.\n+\t(basic_filebuf::close): Call _M_terminate_output to handle\n+\tunshift and flushing.\n+\t(basic_filebuf::underflow): Assign _M_state_last, throw\n+\texception instead of calling abort when codecvt::max_length()\n+\tis bad.\n+\t(basic_filebuf::seekoff): Use _M_state_last when calling\n+\tcodecvt::length(), pass correct state to _M_seek.\n+\t(basic_filebuf::seekpos): Pass __pos.state() to _M_seek.\n+\t(basic_filebuf::_M_seek): Add __state_type parameter,\n+\tset _M_state_cur correctly, store the resulting state in\n+\tthe return value and use _M_terminate_output to handle\n+\tflushing and unshift.\n+\t(basic_filebuf::_M_terminate_output): Flush contents of\n+\toutput buffer, if any, then call codecvt::unshift as\n+\tneeded and output the result.\n+\t(basic_filebuf::sync): Move here, don't modify _M_writing\n+\tor _M_reading.\n+\t\n+\t* include/std/std_fstream.h\n+\t(basic_filebuf::_M_state_last): Declare it.\n+\t(basic_filebuf::_M_last_overflowed): Delete.\n+\t(basic_filebuf::_M_seek): Add __state_type parameter.\n+\t(basic_filebuf::sync): Declare only.\n+\t(basic_filebuf::_M_output_unshift): Delete.\n+\t(basic_filebuf::_M_terminate_output): Declare it.\n+\t\n+\t* testsuite/testsuite_character.h:\n+\tDefine character class and state class plus char_traits and\n+\tcodecvt specializations for same for testing support for\n+\tstateful encodings.\n+\t\n+\t* testsuite/27_io/basic_filebuf/close/12790-1.cc,\n+\t* testsuite/27_io/basic_filebuf/close/char/12790-1.cc,\n+\t* testsuite/27_io/basic_filebuf/close/char/12790-2.cc,\n+\t* testsuite/27_io/basic_filebuf/close/char/12790-3.cc,\n+\t* testsuite/27_io/basic_filebuf/close/char/12790-4.cc,\n+\t* testsuite/27_io/basic_filebuf/close/wchar_t/12790-1.cc,\n+\t* testsuite/27_io/basic_filebuf/close/wchar_t/12790-2.cc,\n+\t* testsuite/27_io/basic_filebuf/close/wchar_t/12790-3.cc,\n+\t* testsuite/27_io/basic_filebuf/close/wchar_t/12790-4.cc,\n+\t* testsuite/27_io/basic_filebuf/open/12790-1.cc,\n+\t* testsuite/27_io/basic_filebuf/seekoff/12790-1.cc,\n+\t* testsuite/27_io/basic_filebuf/seekoff/12790-2.cc,\n+\t* testsuite/27_io/basic_filebuf/seekoff/12790-3.cc,\n+\t* testsuite/27_io/basic_filebuf/seekoff/12790-4.cc,\n+\t* testsuite/27_io/basic_filebuf/seekoff/char/12790-1.cc,\n+\t* testsuite/27_io/basic_filebuf/seekoff/char/12790-2.cc,\n+\t* testsuite/27_io/basic_filebuf/seekoff/char/12790-3.cc,\n+\t* testsuite/27_io/basic_filebuf/seekoff/char/12790-4.cc,\n+\t* testsuite/27_io/basic_filebuf/seekoff/wchar_t/12790-1.cc,\n+\t* testsuite/27_io/basic_filebuf/seekoff/wchar_t/12790-2.cc,\n+\t* testsuite/27_io/basic_filebuf/seekoff/wchar_t/12790-3.cc,\n+\t* testsuite/27_io/basic_filebuf/seekoff/wchar_t/12790-4.cc,\n+\t* testsuite/27_io/basic_filebuf/seekoff/wchar_t/3.cc,\n+\t* testsuite/27_io/basic_filebuf/seekpos/12790-1.cc,\n+\t* testsuite/27_io/basic_filebuf/seekpos/12790-2.cc,\n+\t* testsuite/27_io/basic_filebuf/seekpos/12790-3.cc,\n+\t* testsuite/27_io/basic_filebuf/seekpos/char/12790-1.cc,\n+\t* testsuite/27_io/basic_filebuf/seekpos/char/12790-2.cc,\n+\t* testsuite/27_io/basic_filebuf/seekpos/char/12790-3.cc,\n+\t* testsuite/27_io/basic_filebuf/seekpos/char/12790-4.cc,\n+\t* testsuite/27_io/basic_filebuf/seekpos/wchar_t/1.cc,\n+\t* testsuite/27_io/basic_filebuf/seekpos/wchar_t/12790-1.cc,\n+\t* testsuite/27_io/basic_filebuf/seekpos/wchar_t/12790-2.cc,\n+\t* testsuite/27_io/basic_filebuf/seekpos/wchar_t/12790-3.cc,\n+\t* testsuite/27_io/basic_filebuf/seekpos/wchar_t/12790-4.cc,\n+\t* testsuite/27_io/basic_filebuf/sync/char/1.cc,\n+\t* testsuite/27_io/basic_filebuf/sync/wchar_t/1.cc:\n+\tNew tests.\n+\n+\t* testsuite/27_io/basic_filebuf/3.cc,\n+\t* testsuite/27_io/basic_filebuf/seekoff/10132-2.cc,\n+\t* testsuite/27_io/basic_filebuf/seekpos/10132-3.cc,\n+\t* testsuite/27_io/basic_fstream/3.cc,\n+\t* testsuite/27_io/basic_ifstream/3.cc,\n+\t* testsuite/27_io/basic_ofstream/3.cc:\n+\tUse streamoff as off_type and fpos<state_type> as pos_type.\n+\n+\t* testsuite/27_io/basic_filebuf/seekpos/char/1-io.cc,\n+\t* testsuite/27_io/basic_filebuf/seekpos/char/1-out.cc:\n+\tCheck that sync does *not* set _M_writing to false.\n+\n 2003-11-03  Anthony Green  <green@redhat.com>\n \n \t* libmath/stubs.c (sqrtf, sqrtl): Reorder so they appear before"}, {"sha": "56497412fce56575d0da2ef172788b295397781d", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 127, "deletions": 52, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -74,12 +74,12 @@ namespace std\n   template<typename _CharT, typename _Traits>\n     basic_filebuf<_CharT, _Traits>::\n     basic_filebuf() : __streambuf_type(), _M_file(&_M_lock), \n-    _M_mode(ios_base::openmode(0)), _M_state_cur(__state_type()),\n-    _M_state_beg(__state_type()), _M_buf(NULL), _M_buf_size(BUFSIZ),\n+    _M_mode(ios_base::openmode(0)), _M_state_beg(), _M_state_cur(),\n+    _M_state_last(), _M_buf(NULL), _M_buf_size(BUFSIZ),\n     _M_buf_allocated(false), _M_reading(false), _M_writing(false),\n-    _M_last_overflowed(false), _M_pback_cur_save(0), _M_pback_end_save(0),\n-    _M_pback_init(false), _M_codecvt(0), _M_ext_buf(0), _M_ext_buf_size(0),\n-    _M_ext_next(0), _M_ext_end(0)\n+    _M_pback_cur_save(0), _M_pback_end_save(0), _M_pback_init(false),\n+    _M_codecvt(0), _M_ext_buf(0), _M_ext_buf_size(0), _M_ext_next(0),\n+    _M_ext_end(0)\n     { \n       if (has_facet<__codecvt_type>(this->_M_buf_locale))\n \t_M_codecvt = &use_facet<__codecvt_type>(this->_M_buf_locale);\n@@ -104,9 +104,12 @@ namespace std\n \t      _M_writing = false;\n \t      _M_set_buffer(-1);\n \n+\t      // Reset to initial state.\n+\t      _M_state_last = _M_state_cur = _M_state_beg;\n+\n \t      // 27.8.1.3,4\n \t      if ((__mode & ios_base::ate) \n-\t\t  && this->seekoff(0, ios_base::end, __mode)\n+\t\t  && this->seekoff(0, ios_base::end, __mode) \n \t\t  == pos_type(off_type(-1)))\n \t\tthis->close();\n \t      else\n@@ -127,18 +130,8 @@ namespace std\n \t  bool __testfail = false;\n \t  try\n \t    {\n-\t      if (this->pbase() < this->pptr()\n-\t\t  && traits_type::eq_int_type(this->overflow(),\n-\t\t\t\t\t      traits_type::eof()))\n+\t      if (!_M_terminate_output())\n \t\t__testfail = true;\n-#if 0\n-\t      // XXX not done\n-\t      if (_M_last_overflowed)\n-\t\t{\n-\t\t  _M_output_unshift();\n-\t\t  this->overflow();\n-\t\t}\n-#endif\n \t    }\n \t  catch(...)\n \t    {\n@@ -152,14 +145,14 @@ namespace std\n \t  _M_reading = false;\n \t  _M_writing = false;\n \t  _M_set_buffer(-1);\n+\t  _M_state_last = _M_state_cur = _M_state_beg;\n \t  \n \t  if (!_M_file.close())\n \t    __testfail = true;\n \n \t  if (!__testfail)\n \t    __ret = this;\n \t}\n-      _M_last_overflowed = false;\n       return __ret;\n     }\n \n@@ -180,7 +173,6 @@ namespace std\n \t    __ret += _M_file.showmanyc() / _M_codecvt->max_length();\n \t}\n \n-      _M_last_overflowed = false;\t\n       return __ret;\n     }\n   \n@@ -252,6 +244,7 @@ namespace std\n \n \t      _M_ext_next = _M_ext_buf;\n \t      _M_ext_end = _M_ext_buf + __remainder;\n+\t      _M_state_last = _M_state_cur;\n \n \t      do\n \t\t{\n@@ -261,7 +254,10 @@ namespace std\n \t\t      // This may fail if the return value of\n \t\t      // codecvt::max_length() is bogus.\n \t\t      if (_M_ext_end - _M_ext_buf + __rlen > _M_ext_buf_size)\n-\t\t\tstd::abort();\n+\t\t\t{\n+\t\t\t  __throw_ios_failure(\"codecvt::max_length() \"\n+\t\t\t\t\t      \"is not valid\");\n+\t\t\t}\n \t\t      streamsize __elen = _M_file.xsgetn(_M_ext_end, __rlen);\n \t\t      if (__elen == 0)\n \t\t\t__got_eof = true;\n@@ -280,8 +276,7 @@ namespace std\n \t\t      size_t __avail = _M_ext_end - _M_ext_buf;\n \t\t      __ilen = std::min(__avail, __buflen);\n \t\t      traits_type::copy(this->eback(),\n-\t\t\t\t\treinterpret_cast<char_type*>(_M_ext_buf), \n-\t\t\t\t\t__ilen);\n+\t\t\t\t\treinterpret_cast<char_type*>(_M_ext_buf), __ilen);\n \t\t      _M_ext_next = _M_ext_buf + __ilen;\n \t\t    }\n \t\t  else \n@@ -309,7 +304,6 @@ namespace std\n \t      _M_reading = false;\n \t    }\n \t}\n-      _M_last_overflowed = false;\t\n       return __ret;\n     }\n \n@@ -364,7 +358,6 @@ namespace std\n \t      __ret = __i;\n \t    }\n \t}\n-      _M_last_overflowed = false;\t\n       return __ret;\n     }\n \n@@ -423,7 +416,6 @@ namespace std\n \t\t}\n \t    }\n \t}\n-      _M_last_overflowed = true;\t\n       return __ret;\n     }\n   \n@@ -521,7 +513,8 @@ namespace std\n \t      const streamsize __buffill = this->pptr() - this->pbase();\n \t      const char* __buf = reinterpret_cast<const char*>(this->pbase());\n \t      __ret = _M_file.xsputn_2(__buf, __buffill,\n-\t\t\t\t       reinterpret_cast<const char*>(__s), __n);\n+\t\t\t\t       reinterpret_cast<const char*>(__s), \n+\t\t\t\t       __n);\n \t      if (__ret == __buffill + __n)\n \t\t{\n \t\t  _M_set_buffer(0);\n@@ -569,7 +562,6 @@ namespace std\n \t  _M_writing = false;\n \t  _M_set_buffer(-1);\n \t}\n-      _M_last_overflowed = false;\t\n       return this; \n     }\n   \n@@ -589,12 +581,18 @@ namespace std\n       if (__width < 0)\n \t__width = 0;\n \n-      const bool __testfail = __off != 0 && __width <= 0;      \n+      const bool __testfail = __off != 0 && __width <= 0;\n       if (this->is_open() && !__testfail) \n \t{\n \t  // Ditch any pback buffers to avoid confusion.\n \t  _M_destroy_pback();\n \n+\t  // Correct state at destination. Note that this is the correct\n+\t  // state for the current position during output, because\n+\t  // codecvt::unshift() returns the state to the initial state.\n+\t  // This is also the correct state at the end of the file because\n+\t  // an unshift sequence should have been written at the end.\n+\t  __state_type __state = _M_state_beg;\n \t  off_type __computed_off = __off * __width;\n \t  if (_M_reading && __way == ios_base::cur)\n \t    {\n@@ -603,16 +601,20 @@ namespace std\n \t      else\n \t\t{\n \t\t  // Calculate offset from _M_ext_buf that corresponds\n-\t\t  // to gptr().\n+\t\t  // to gptr(). Note: uses _M_state_last, which\n+\t\t  // corresponds to eback().\n \t\t  const int __gptr_off =\n-\t\t    _M_codecvt->length(_M_state_cur, _M_ext_buf, _M_ext_next,\n+\t\t    _M_codecvt->length(_M_state_last, _M_ext_buf, _M_ext_next,\n \t\t\t\t       this->gptr() - this->eback());\n \t\t  __computed_off += _M_ext_buf + __gptr_off - _M_ext_end;\n+ \t\t  \n+\t\t  // _M_state_last is modified by codecvt::length() so\n+ \t\t  // it now corresponds to gptr().\n+ \t\t  __state = _M_state_last;\n \t\t}\n \t    }\n-\t  __ret = _M_seek(__computed_off, __way);\n+\t  __ret = _M_seek(__computed_off, __way, __state);\n \t}\n-      _M_last_overflowed = false;\t\n       return __ret;\n     }\n \n@@ -632,41 +634,115 @@ namespace std\n \t  // Ditch any pback buffers to avoid confusion.\n \t  _M_destroy_pback();\n \n-\t  __ret = _M_seek(off_type(__pos), ios_base::beg);\n+\t  __ret = _M_seek(off_type(__pos), ios_base::beg, __pos.state());\n \t}\n-      _M_last_overflowed = false;\t\n       return __ret;\n     }\n \n   template<typename _CharT, typename _Traits>\n     typename basic_filebuf<_CharT, _Traits>::pos_type\n     basic_filebuf<_CharT, _Traits>::\n-    _M_seek(off_type __off, ios_base::seekdir __way)\n+    _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state)\n+    {\n+      pos_type __ret = pos_type(off_type(-1));\n+      if (_M_terminate_output())\n+\t{\t  \n+\t  // Returns pos_type(off_type(-1)) in case of failure.\n+\t  __ret = pos_type(_M_file.seekoff(__off, __way));\n+\t  \n+\t  _M_reading = false;\n+\t  _M_writing = false;\n+\t  _M_ext_next = _M_ext_end = _M_ext_buf;\n+\t  _M_set_buffer(-1);\n+\t  _M_state_cur = __state;\n+\t  __ret.state(_M_state_cur);\n+\t}\n+      return __ret;\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    bool\n+    basic_filebuf<_CharT, _Traits>::\n+    _M_terminate_output()\n     {\n+      bool __testvalid = true;\n+\n+      // Part one: update the output sequence.\n       if (this->pbase() < this->pptr())\n \t{\n-\t  // Part one: update the output sequence.\n-\t  this->sync();\n+\t  const int_type __tmp = this->overflow();\n+\t  if (traits_type::eq_int_type(__tmp, traits_type::eof()))\n+\t    __testvalid = false;\n+\t}\n \t      \n-\t  // Part two: output unshift sequence.\n-\t  _M_output_unshift();\n+      // Part two: output unshift sequence.\n+      if (_M_writing && !__check_facet(_M_codecvt).always_noconv() \n+\t  && __testvalid)\n+\t{\n+\t  // Note: this value is arbitrary, since there is no way to\n+\t  // get the length of the unshift sequence from codecvt,\n+\t  // without calling unshift.\n+\t  const size_t __blen = 128;\n+\n+\t  char __buf[__blen];\n+\t  codecvt_base::result __r;\n+\t  streamsize __ilen = 0;\n+\n+\t  do\n+\t    {\n+\t      char* __next;\n+\t      __r = _M_codecvt->unshift(_M_state_cur, __buf,\n+\t\t\t\t\t__buf + __blen, __next);\n+\t      if (__r == codecvt_base::error)\n+\t\t__testvalid = false;\n+\t      else if (__r == codecvt_base::ok ||\n+\t\t       __r == codecvt_base::partial)\n+\t\t{\n+\t\t  __ilen = __next - __buf;\n+\t\t  \n+\t\t  if (__ilen > 0)\n+\t\t    {\n+\t\t      const streamsize __elen = _M_file.xsputn(__buf, __ilen);\n+\t\t      if (__elen != __ilen)\n+\t\t\t__testvalid = false;\n+\t\t    }\n+\t\t}\n+\t    }\n+\t  while (__r == codecvt_base::partial && __ilen > 0 && __testvalid);\n+\n+\t  if (__testvalid)\n+\t    {\n+\t      // This second call to overflow() is required by the standard,\n+\t      // but it's not clear why it's needed, since the output buffer\n+\t      // should be empty by this point (it should have been emptied\n+\t      // in the first call to overflow()).\n+\t      const int_type __tmp = this->overflow();\n+\t      if (traits_type::eq_int_type(__tmp, traits_type::eof()))\n+\t\t__testvalid = false;\n+\t    }\n \t}\n-\t  \n-      // Returns pos_type(off_type(-1)) in case of failure.\n-      pos_type __ret (_M_file.seekoff(__off, __way));\n-\t  \n-      _M_reading = false;\n-      _M_writing = false;\n-      _M_ext_next = _M_ext_end = _M_ext_buf;\n-      _M_set_buffer(-1);\n-      return __ret;\n+      return __testvalid;\n     }\n \n   template<typename _CharT, typename _Traits>\n-    void \n+    int\n     basic_filebuf<_CharT, _Traits>::\n-    _M_output_unshift()\n-    { }\n+    sync()\n+    {\n+      int __ret = 0;\n+\n+      // Make sure that the internal buffer resyncs its idea of\n+      // the file position with the external file.\n+      // NB: _M_file.sync() will be called within.\n+      if (this->pbase() < this->pptr())\n+\t{\n+\t  const int_type __tmp = this->overflow();\n+\t  if (traits_type::eq_int_type(__tmp, traits_type::eof()))\n+\t    __ret = -1;\n+\t}\n+      \n+      return __ret;\n+    }\n \n   template<typename _CharT, typename _Traits>\n     void\n@@ -703,7 +779,6 @@ namespace std\n \t      // encoding, or that the filebuf be closed. Opinions may differ.\n \t    }\n \t}\n-      _M_last_overflowed = false;\t\n     }\n \n   // Inhibit implicit instantiations for required instantiations,"}, {"sha": "9bfa6774e239e23064df173feceb120b1ddc84fc", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 30, "deletions": 31, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -60,6 +60,11 @@ namespace std\n    *  sequences.  Many of its sematics are described in terms of similar\n    *  behavior in the Standard C Library's @c FILE streams.\n   */\n+  // Requirements on traits_type, specific to this class:\n+  // traits_type::pos_type must be fpos<traits_type::state_type>\n+  // traits_type::off_type must be streamoff\n+  // traits_type::state_type must be Assignable and DefaultConstructable,\n+  // and traits_type::state_type() must be the initial state for codecvt.\n   template<typename _CharT, typename _Traits>\n     class basic_filebuf : public basic_streambuf<_CharT, _Traits>\n     {\n@@ -111,15 +116,33 @@ namespace std\n       */\n       ios_base::openmode \t_M_mode;\n \n-      // Current and beginning state type for codecvt.\n+      // Beginning state type for codecvt.\n       /**\n        *  @if maint\n        *  @doctodo\n        *  @endif\n       */\n-      __state_type\t\t_M_state_cur;\n       __state_type \t\t_M_state_beg;\n \n+      // During output, the state that corresponds to pptr(),\n+      // during input, the state that corresponds to egptr() and\n+      // _M_ext_next.\n+      /**\n+       *  @if maint\n+       *  @doctodo\n+       *  @endif\n+      */\n+      __state_type\t\t_M_state_cur;\n+\n+      // Not used for output. During input, the state that corresponds\n+      // to eback() and _M_ext_buf.\n+      /**\n+       *  @if maint\n+       *  @doctodo\n+       *  @endif\n+      */\n+      __state_type\t\t_M_state_last;\n+\n       /**\n        *  @if maint\n        *  Pointer to the beginning of internally-allocated space.\n@@ -156,9 +179,6 @@ namespace std\n       bool                      _M_reading;\n       bool                      _M_writing;\n \n-      // XXX Needed?\n-      bool\t\t\t_M_last_overflowed;\n-\n       //@{\n       /**\n        *  @if maint\n@@ -386,33 +406,11 @@ namespace std\n        *  @endif\n       */\n       pos_type\n-      _M_seek(off_type __off, ios_base::seekdir __way);\n+      _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state);\n \n       // [documentation is inherited]\n       virtual int\n-      sync()\n-      {\n-\tint __ret = 0;\n-\n-\t// Make sure that the internal buffer resyncs its idea of\n-\t// the file position with the external file.\n-\t// NB: _M_file.sync() will be called within.\n-\tif (this->pbase() < this->pptr())\n-\t  {\n-\t    const int_type __tmp = this->overflow();\n-\t    if (traits_type::eq_int_type(__tmp, traits_type::eof()))\n-\t      __ret = -1;\n-\t    else\n-\t      {\n-\t\t_M_set_buffer(-1);\n-\t\t_M_reading = false;\n-\t\t_M_writing = false;\n-\t      }\n-\t  }\n-\n-\t_M_last_overflowed = false;\n-\treturn __ret;\n-      }\n+      sync();\n \n       // [documentation is inherited]\n       virtual void\n@@ -443,13 +441,14 @@ namespace std\n       virtual streamsize\n       xsputn(const char_type* __s, streamsize __n);\n \n+      // Flushes output buffer, then writes unshift sequence.\n       /**\n        *  @if maint\n        *  @doctodo\n        *  @endif\n       */\n-      void\n-      _M_output_unshift();\n+      bool\n+      _M_terminate_output();\n \n       /**\n        *  @if maint "}, {"sha": "6523af7bb10f87db43903ef9fc6bf62f7daa3747", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2F3.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -56,9 +56,9 @@ struct gnu_char_traits\n {\n   typedef gnu_char_type\tchar_type;\n   typedef long  \t\tint_type;\n-  typedef long \t\tpos_type;\n-  typedef unsigned long \toff_type;\n+  typedef std::streamoff \toff_type;\n   typedef long   \t\tstate_type;\n+  typedef std::fpos<state_type>\tpos_type;\n   \n   static void \n   assign(char_type& __c1, const char_type& __c2) { }"}, {"sha": "a6c27000833c3bff2a4a1a52631718619cab58af", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/close/12790-1.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2F12790-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2F12790-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2F12790-1.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,78 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.3 filebuf member functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n+\n+// libstdc++/12790\n+void test01()\n+{\n+  using namespace std;\n+  using __gnu_test::character;\n+  typedef basic_filebuf<character>::traits_type traits_type;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_close_12790\";\n+\n+  locale loc(locale::classic(),\n+\t     new codecvt<traits_type::char_type, char,\n+\t     traits_type::state_type>);\n+\n+  basic_filebuf<character> fb;\n+  fb.pubsetbuf(0, 0);\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out | ios_base::trunc);\n+  fb.sputc(character::from_char('b'));\n+  fb.sputc(character::from_char(0xff));\n+  fb.sputc(character::from_char(0));\n+\n+  // Check that close() writes unshift sequence\n+  fb.close();\n+\n+  fb.open(name, ios_base::in | ios_base::out | ios_base::ate);\n+\n+  fb.sputc(character::from_char('a'));\n+  fb.sputc(character::from_char(0xff));\n+  fb.sputc(character::from_char(0));\n+\n+  fb.close();\n+\n+  fb.open(name, ios_base::in);\n+\n+  fb.sbumpc();\n+  fb.sbumpc();\n+  fb.sbumpc();\n+\n+  traits_type::int_type c = fb.sbumpc();\n+  VERIFY( c != traits_type::eof() );\n+  VERIFY( traits_type::eq(traits_type::to_char_type(c),\n+\t\t\t  character::from_char('a')) );\n+\n+  fb.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "cc68efb6f3ca6de014149e7388d3ae8e06a72675", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/close/char/12790-1.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F12790-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F12790-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F12790-1.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,79 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.3 filebuf member functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class Cvt : public std::codecvt<char, char, std::mbstate_t>\n+{\n+public:\n+  mutable bool unshift_called;\n+\n+  Cvt()\n+  : unshift_called(false)\n+  { }\n+\n+protected:\n+  bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+\n+  int\n+  do_encoding() const throw()\n+  { return -1; }\n+\n+  std::codecvt_base::result\n+  do_unshift(std::mbstate_t&, char* to, char*, char*& to_next) const\n+  {\n+    unshift_called = true;\n+    to_next = to;\n+    return std::codecvt_base::ok;\n+  }\n+};\n+\n+// libstdc++/12790\n+// basic_filebuf::close() should call codecvt::unshift()\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_close_12790\";\n+\n+  Cvt* cvt = new Cvt;\n+  locale loc(locale::classic(), cvt);\n+\n+  filebuf fb;\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out);\n+  fb.sputc('a');\n+\n+  VERIFY( !cvt->unshift_called );\n+  fb.close();\n+  VERIFY( cvt->unshift_called );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2e166822483e3bf405f55cda088714098a468869", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/close/char/12790-2.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F12790-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F12790-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F12790-2.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,81 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.3 filebuf member functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class Cvt : public std::codecvt<char, char, std::mbstate_t>\n+{\n+public:\n+  mutable bool unshift_called;\n+\n+  Cvt()\n+  : unshift_called(false)\n+  { }\n+\n+protected:\n+  bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+\n+  int\n+  do_encoding() const throw()\n+  { return -1; }\n+\n+  std::codecvt_base::result\n+  do_unshift(std::mbstate_t&, char* to, char*, char*& to_next) const\n+  {\n+    unshift_called = true;\n+    to_next = to;\n+    return std::codecvt_base::ok;\n+  }\n+};\n+\n+// libstdc++/12790\n+// basic_filebuf::close() should call codecvt::unshift()\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_close_12790\";\n+\n+  Cvt* cvt = new Cvt;\n+  locale loc(locale::classic(), cvt);\n+\n+  filebuf fb;\n+  fb.pubsetbuf(0, 0);\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out);\n+  fb.sputc('a');\n+  fb.in_avail(); // showmanyc() should have no effect on close().\n+\n+  VERIFY( !cvt->unshift_called );\n+  fb.close();\n+  VERIFY( cvt->unshift_called );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0e3629a0be518ced97a6c714bbf7b4bd622c699e", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/close/char/12790-3.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F12790-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F12790-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F12790-3.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,80 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.3 filebuf member functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class Cvt : public std::codecvt<char, char, std::mbstate_t>\n+{\n+public:\n+  mutable bool unshift_called;\n+\n+  Cvt()\n+  : unshift_called(false)\n+  { }\n+\n+protected:\n+  bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+\n+  int\n+  do_encoding() const throw()\n+  { return -1; }\n+\n+  std::codecvt_base::result\n+  do_unshift(std::mbstate_t&, char* to, char*, char*& to_next) const\n+  {\n+    unshift_called = true;\n+    to_next = to;\n+    return codecvt_base::error;\n+  }\n+};\n+\n+// libstdc++/12790\n+// basic_filebuf::close() should fail if codecvt::unshift() fails\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_close_12790\";\n+\n+  Cvt* cvt = new Cvt;\n+  locale loc(locale::classic(), cvt);\n+\n+  filebuf fb;\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out);\n+  fb.sputc('a');\n+\n+  VERIFY( !cvt->unshift_called );\n+  filebuf* ret = fb.close();\n+  VERIFY( cvt->unshift_called );\n+  VERIFY( ret == NULL );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c0efd7f2743b156c5e3da54b77f4cb6730e1bf4f", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/close/char/12790-4.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F12790-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F12790-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F12790-4.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,80 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.3 filebuf member functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class Cvt : public std::codecvt<char, char, std::mbstate_t>\n+{\n+public:\n+  mutable bool unshift_called;\n+\n+  Cvt()\n+  : unshift_called(false)\n+  { }\n+\n+protected:\n+  bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+\n+  int\n+  do_encoding() const throw()\n+  { return -1; }\n+\n+  std::codecvt_base::result\n+  do_unshift(std::mbstate_t&, char* to, char*, char*& to_next) const\n+  {\n+    unshift_called = true;\n+    to_next = to;\n+    return std::codecvt_base::ok;\n+  }\n+};\n+\n+// libstdc++/12790\n+// basic_filebuf::close() should call codecvt::unshift()\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_close_12790\";\n+\n+  Cvt* cvt = new Cvt;\n+  locale loc(locale::classic(), cvt);\n+\n+  filebuf fb;\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out);\n+  fb.sputc('a');\n+  fb.pubsync(); // Does not call unshift()\n+\n+  VERIFY( !cvt->unshift_called );\n+  fb.close();\n+  VERIFY( cvt->unshift_called );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c0588a32fb53ed9b941a2ed98efe171a6b16161e", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/close/wchar_t/12790-1.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fwchar_t%2F12790-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fwchar_t%2F12790-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fwchar_t%2F12790-1.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,79 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.3 filebuf member functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class Cvt : public std::codecvt<wchar_t, char, std::mbstate_t>\n+{\n+public:\n+  mutable bool unshift_called;\n+\n+  Cvt()\n+  : unshift_called(false)\n+  { }\n+\n+protected:\n+  bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+\n+  int\n+  do_encoding() const throw()\n+  { return -1; }\n+\n+  std::codecvt_base::result\n+  do_unshift(std::mbstate_t&, char* to, char*, char*& to_next) const\n+  {\n+    unshift_called = true;\n+    to_next = to;\n+    return std::codecvt_base::ok;\n+  }\n+};\n+\n+// libstdc++/12790\n+// basic_filebuf::close() should call codecvt::unshift()\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_close_12790\";\n+\n+  Cvt* cvt = new Cvt;\n+  locale loc(locale::classic(), cvt);\n+\n+  wfilebuf fb;\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out);\n+  fb.sputc(L'a');\n+\n+  VERIFY( !cvt->unshift_called );\n+  fb.close();\n+  VERIFY( cvt->unshift_called );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "edabea9338ab20f0f59b4a205637029026c524a5", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/close/wchar_t/12790-2.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fwchar_t%2F12790-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fwchar_t%2F12790-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fwchar_t%2F12790-2.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,81 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.3 filebuf member functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class Cvt : public std::codecvt<wchar_t, char, std::mbstate_t>\n+{\n+public:\n+  mutable bool unshift_called;\n+\n+  Cvt()\n+  : unshift_called(false)\n+  { }\n+\n+protected:\n+  bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+\n+  int\n+  do_encoding() const throw()\n+  { return -1; }\n+\n+  std::codecvt_base::result\n+  do_unshift(std::mbstate_t&, char* to, char*, char*& to_next) const\n+  {\n+    unshift_called = true;\n+    to_next = to;\n+    return std::codecvt_base::ok;\n+  }\n+};\n+\n+// libstdc++/12790\n+// basic_filebuf::close() should call codecvt::unshift()\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_close_12790\";\n+\n+  Cvt* cvt = new Cvt;\n+  locale loc(locale::classic(), cvt);\n+\n+  wfilebuf fb;\n+  fb.pubsetbuf(0, 0);\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out);\n+  fb.sputc(L'a');\n+  fb.in_avail(); // showmanyc() should have no effect on close().\n+\n+  VERIFY( !cvt->unshift_called );\n+  fb.close();\n+  VERIFY( cvt->unshift_called );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8c7e2c2406ca161814d2bfa0e4617e40689b3a6a", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/close/wchar_t/12790-3.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fwchar_t%2F12790-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fwchar_t%2F12790-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fwchar_t%2F12790-3.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,80 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.3 filebuf member functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class Cvt : public std::codecvt<wchar_t, char, std::mbstate_t>\n+{\n+public:\n+  mutable bool unshift_called;\n+\n+  Cvt()\n+  : unshift_called(false)\n+  { }\n+\n+protected:\n+  bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+\n+  int\n+  do_encoding() const throw()\n+  { return -1; }\n+\n+  std::codecvt_base::result\n+  do_unshift(std::mbstate_t&, char* to, char*, char*& to_next) const\n+  {\n+    unshift_called = true;\n+    to_next = to;\n+    return codecvt_base::error;\n+  }\n+};\n+\n+// libstdc++/12790\n+// basic_filebuf::close() should fail if codecvt::unshift() fails\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_close_12790\";\n+\n+  Cvt* cvt = new Cvt;\n+  locale loc(locale::classic(), cvt);\n+\n+  wfilebuf fb;\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out);\n+  fb.sputc('a');\n+\n+  VERIFY( !cvt->unshift_called );\n+  wfilebuf* ret = fb.close();\n+  VERIFY( cvt->unshift_called );\n+  VERIFY( ret == NULL );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f6acb493b6df283f9862ff8d9c4592f1d1cff47d", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/close/wchar_t/12790-4.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fwchar_t%2F12790-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fwchar_t%2F12790-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fwchar_t%2F12790-4.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,80 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.3 filebuf member functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class Cvt : public std::codecvt<wchar_t, char, std::mbstate_t>\n+{\n+public:\n+  mutable bool unshift_called;\n+\n+  Cvt()\n+  : unshift_called(false)\n+  { }\n+\n+protected:\n+  bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+\n+  int\n+  do_encoding() const throw()\n+  { return -1; }\n+\n+  std::codecvt_base::result\n+  do_unshift(std::mbstate_t&, char* to, char*, char*& to_next) const\n+  {\n+    unshift_called = true;\n+    to_next = to;\n+    return std::codecvt_base::ok;\n+  }\n+};\n+\n+// libstdc++/12790\n+// basic_filebuf::close() should call codecvt::unshift()\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_close_12790\";\n+\n+  Cvt* cvt = new Cvt;\n+  locale loc(locale::classic(), cvt);\n+\n+  wfilebuf fb;\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out);\n+  fb.sputc(L'a');\n+  fb.pubsync(); // Does not call unshift()\n+\n+  VERIFY( !cvt->unshift_called );\n+  fb.close();\n+  VERIFY( cvt->unshift_called );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "d37972b6e3e7c0f11ba23b4df8f40ef49729f6ab", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/open/12790-1.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2F12790-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2F12790-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2F12790-1.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,60 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.3 filebuf member functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n+\n+// libstdc++/12790\n+void test01()\n+{\n+  using namespace std;\n+  using __gnu_test::character;\n+  typedef basic_filebuf<character>::traits_type traits_type;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_open_12790\";\n+\n+  locale loc(locale::classic(),\n+\t     new codecvt<traits_type::char_type, char,\n+\t     traits_type::state_type>);\n+\n+  basic_filebuf<character> fb;\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out);\n+  fb.sputc(character::from_char('b'));\n+  fb.close();\n+\n+  // Check that reopened basic_filebuf begins in the initial state.\n+  fb.open(name, ios_base::in);\n+  traits_type::int_type c = fb.sbumpc();\n+  VERIFY( c != traits_type::eof() );\n+  VERIFY( traits_type::eq(traits_type::to_char_type(c),\n+\t\t\t  character::from_char('b')) );\n+  fb.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "14f0870517f4228077883e8fa74206fa3c8e079f", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/10132-2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F10132-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F10132-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F10132-2.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -54,9 +54,9 @@ struct gnu_char_traits\n {\n   typedef gnu_char_type\tchar_type;\n   typedef long  \t\tint_type;\n-  typedef long \t\tpos_type;\n-  typedef unsigned long \toff_type;\n+  typedef std::streamoff \toff_type;\n   typedef long   \t\tstate_type;\n+  typedef std::fpos<state_type>\tpos_type;\n   \n   static void \n   assign(char_type& __c1, const char_type& __c2) { }"}, {"sha": "79a625169ebe8e2bfb224bd308bb2e0daa42dee3", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/12790-1.cc", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F12790-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F12790-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F12790-1.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,82 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n+\n+// libstdc++/12790\n+void test01()\n+{\n+  using namespace std;\n+  using __gnu_test::character;\n+  typedef basic_filebuf<character>::traits_type traits_type;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_seekoff_12790\";\n+\n+  locale loc(locale::classic(),\n+\t     new codecvt<traits_type::char_type, char,\n+\t     traits_type::state_type>);\n+\n+  basic_filebuf<character> fb;\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out);\n+  fb.sputc(character::from_char(0xff));\n+  fb.sputc(character::from_char(0));\n+  fb.sputc(character::from_char(0));\n+  fb.sputc(character::from_char('a'));\n+  fb.sputc(character::from_char('a'));\n+  fb.sputc(character::from_char('a'));\n+  fb.sputc(character::from_char('a'));\n+  fb.close();\n+\n+  fb.open(name, ios_base::in);\n+  fb.sbumpc();\n+  fb.sbumpc();\n+  fb.sbumpc();\n+\n+  // Check that seekoff calls codecvt::length with the correct state.\n+  traits_type::pos_type pos = fb.pubseekoff(0, ios_base::cur);\n+  VERIFY( pos != traits_type::pos_type(traits_type::off_type(-1)) );\n+\n+  traits_type::int_type c = fb.sbumpc();\n+  VERIFY( c != traits_type::eof() );\n+  VERIFY( traits_type::eq(traits_type::to_char_type(c),\n+\t\t\t  character::from_char('a')) );\n+  fb.sbumpc();\n+  fb.sbumpc();\n+  c = fb.sbumpc();\n+  VERIFY( c != traits_type::eof() );\n+  VERIFY( traits_type::eq(traits_type::to_char_type(c),\n+\t\t\t  character::from_char('a')) );\n+  c = fb.sbumpc();\n+  VERIFY( c == traits_type::eof() );\n+\n+  fb.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5966e1721b84d396f986ba9260476b9816125b50", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/12790-2.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F12790-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F12790-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F12790-2.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,85 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n+\n+// libstdc++/12790\n+void test01()\n+{\n+  using namespace std;\n+  using __gnu_test::character;\n+  typedef basic_filebuf<character>::traits_type traits_type;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_seekoff_12790\";\n+\n+  locale loc(locale::classic(),\n+\t     new codecvt<traits_type::char_type, char,\n+\t     traits_type::state_type>);\n+\n+  basic_filebuf<character> fb;\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out);\n+  fb.sputc(character::from_char(0xff));\n+  fb.sputc(character::from_char(0));\n+  fb.sputc(character::from_char(0));\n+  fb.sputc(character::from_char('a'));\n+  fb.sputc(character::from_char('a'));\n+  fb.sputc(character::from_char('a'));\n+  fb.sputc(character::from_char('a'));\n+  fb.close();\n+\n+  fb.open(name, ios_base::in);\n+  fb.sbumpc();\n+  fb.sbumpc();\n+  fb.sbumpc();\n+\n+  // Check that seekoff resets the state when seeking to beginning.\n+  traits_type::pos_type pos = fb.pubseekoff(0, ios_base::beg);\n+  VERIFY( pos != traits_type::pos_type(traits_type::off_type(-1)) );\n+\n+  traits_type::int_type c = fb.sbumpc();\n+  VERIFY( c != traits_type::eof() );\n+  VERIFY( traits_type::eq(traits_type::to_char_type(c),\n+\t\t\t  character::from_char(0xff)) );\n+  fb.sbumpc();\n+  fb.sbumpc();\n+  fb.sbumpc();\n+  fb.sbumpc();\n+  fb.sbumpc();\n+  c = fb.sbumpc();\n+  VERIFY( c != traits_type::eof() );\n+  VERIFY( traits_type::eq(traits_type::to_char_type(c),\n+\t\t\t  character::from_char('a')) );\n+  c = fb.sbumpc();\n+  VERIFY( c == traits_type::eof() );\n+\n+  fb.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "42a179555827fe3fcd727c2cb7a7aa76a01e9257", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/12790-3.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F12790-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F12790-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F12790-3.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,80 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n+\n+// libstdc++/12790\n+void test01()\n+{\n+  using namespace std;\n+  using __gnu_test::character;\n+  typedef basic_filebuf<character>::traits_type traits_type;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_seekoff_12790\";\n+\n+  locale loc(locale::classic(),\n+\t     new codecvt<traits_type::char_type, char,\n+\t     traits_type::state_type>);\n+\n+  basic_filebuf<character> fb;\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out | ios_base::trunc);\n+  fb.sputc(character::from_char('b'));\n+  fb.sputc(character::from_char(0xff));\n+  fb.sputc(character::from_char('a'));\n+  fb.sputc(character::from_char(0xfc));\n+  fb.sputc(character::from_char(0));\n+  fb.sputc(character::from_char(0));\n+\n+  fb.close();\n+  fb.open(name, ios_base::in);\n+\n+  fb.sbumpc();\n+  fb.sbumpc();\n+\n+  // Check that seekoff returns the correct state\n+  traits_type::pos_type pos = fb.pubseekoff(0, ios_base::cur);\n+\n+  traits_type::int_type c = fb.sbumpc();\n+  VERIFY( c != traits_type::eof() );\n+  VERIFY( traits_type::eq(traits_type::to_char_type(c),\n+\t\t\t  character::from_char('a')) );\n+  fb.sbumpc();\n+\n+  fb.pubseekpos(pos);\n+\n+  c = fb.sbumpc();\n+  VERIFY( c != traits_type::eof() );\n+  VERIFY( traits_type::eq(traits_type::to_char_type(c),\n+\t\t\t  character::from_char('a')) );\n+\n+  fb.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "d246657d1e75d2e913d42af613db798c6811451f", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/12790-4.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F12790-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F12790-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2F12790-4.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,71 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n+\n+// libstdc++/12790\n+void test01()\n+{\n+  using namespace std;\n+  using __gnu_test::character;\n+  typedef basic_filebuf<character>::traits_type traits_type;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_seekoff_12790\";\n+\n+  locale loc(locale::classic(),\n+\t     new codecvt<traits_type::char_type, char,\n+\t     traits_type::state_type>);\n+\n+  basic_filebuf<character> fb;\n+  fb.pubsetbuf(0, 0);\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::in | ios_base::out | ios_base::trunc);\n+  fb.sputc(character::from_char('b'));\n+  fb.sputc(character::from_char(0xff));\n+\n+  // Check that seekoff sets the current state during output\n+  traits_type::pos_type pos = fb.pubseekoff(0, ios_base::cur);\n+  fb.sputc(character::from_char('a'));\n+  fb.sputc(character::from_char(0xff));\n+  fb.sputc(character::from_char(0));\n+  fb.sputc(character::from_char(0));\n+\n+  fb.pubseekoff(0, ios_base::beg);\n+  fb.sbumpc();\n+  fb.sbumpc();\n+\n+  traits_type::int_type c = fb.sbumpc();\n+  VERIFY( c != traits_type::eof() );\n+  VERIFY( traits_type::eq(traits_type::to_char_type(c),\n+\t\t\t  character::from_char('a')) );\n+\n+  fb.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a63402332012f8d1184c27213210a67b11a4100c", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/12790-1.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F12790-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F12790-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F12790-1.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,79 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class Cvt : public std::codecvt<char, char, std::mbstate_t>\n+{\n+public:\n+  mutable bool unshift_called;\n+\n+  Cvt()\n+  : unshift_called(false)\n+  { }\n+\n+protected:\n+  bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+\n+  int\n+  do_encoding() const throw()\n+  { return -1; }\n+\n+  std::codecvt_base::result\n+  do_unshift(std::mbstate_t&, char* to, char*, char*& to_next) const\n+  {\n+    unshift_called = true;\n+    to_next = to;\n+    return std::codecvt_base::ok;\n+  }\n+};\n+\n+// libstdc++/12790\n+// basic_filebuf::seekoff() should call codecvt::unshift()\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_seekoff_12790\";\n+\n+  Cvt* cvt = new Cvt;\n+  locale loc(locale::classic(), cvt);\n+\n+  filebuf fb;\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out);\n+  fb.sputc('a');\n+\n+  VERIFY( !cvt->unshift_called );\n+  fb.pubseekoff(0, ios_base::cur);\n+  VERIFY( cvt->unshift_called );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "006078ad977c0b8bc1113baf6e2ce628ffd8d144", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/12790-2.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F12790-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F12790-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F12790-2.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,80 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class Cvt : public std::codecvt<char, char, std::mbstate_t>\n+{\n+public:\n+  mutable bool unshift_called;\n+\n+  Cvt()\n+  : unshift_called(false)\n+  { }\n+\n+protected:\n+  bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+\n+  int\n+  do_encoding() const throw()\n+  { return -1; }\n+\n+  std::codecvt_base::result\n+  do_unshift(std::mbstate_t&, char* to, char*, char*& to_next) const\n+  {\n+    unshift_called = true;\n+    to_next = to;\n+    return std::codecvt_base::ok;\n+  }\n+};\n+\n+// libstdc++/12790\n+// basic_filebuf::seekoff() should call codecvt::unshift()\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_seekoff_12790\";\n+\n+  Cvt* cvt = new Cvt;\n+  locale loc(locale::classic(), cvt);\n+\n+  filebuf fb;\n+  fb.pubsetbuf(0, 0);\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out);\n+  fb.sputc('a');\n+\n+  VERIFY( !cvt->unshift_called );\n+  fb.pubseekoff(0, ios_base::cur);\n+  VERIFY( cvt->unshift_called );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b56a5e9a9905e23dbb23f2199a5c2f3678057ae1", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/12790-3.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F12790-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F12790-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F12790-3.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,79 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class Cvt : public std::codecvt<char, char, std::mbstate_t>\n+{\n+public:\n+  mutable bool unshift_called;\n+\n+  Cvt()\n+  : unshift_called(false)\n+  { }\n+\n+protected:\n+  bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+\n+  int\n+  do_encoding() const throw()\n+  { return -1; }\n+\n+  std::codecvt_base::result\n+  do_unshift(std::mbstate_t&, char* to, char*, char*& to_next) const\n+  {\n+    unshift_called = true;\n+    to_next = to;\n+    return std::codecvt_base::ok;\n+  }\n+};\n+\n+// libstdc++/12790\n+// basic_filebuf::seekoff() should call codecvt::unshift(),\n+// but only if writing\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_seekoff_12790\";\n+\n+  Cvt* cvt = new Cvt;\n+  locale loc(locale::classic(), cvt);\n+\n+  filebuf fb;\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out);\n+\n+  VERIFY( !cvt->unshift_called );\n+  fb.pubseekoff(0, ios_base::cur);\n+  VERIFY( !cvt->unshift_called );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "69752b2cb46671d463b37fe66c0b31ce0a4b47dd", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/12790-4.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F12790-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F12790-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F12790-4.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,80 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class Cvt : public std::codecvt<char, char, std::mbstate_t>\n+{\n+public:\n+  mutable bool unshift_called;\n+\n+  Cvt()\n+  : unshift_called(false)\n+  { }\n+\n+protected:\n+  bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+\n+  int\n+  do_encoding() const throw()\n+  { return -1; }\n+\n+  std::codecvt_base::result\n+  do_unshift(std::mbstate_t&, char* to, char*, char*& to_next) const\n+  {\n+    unshift_called = true;\n+    to_next = to;\n+    return std::codecvt_base::ok;\n+  }\n+};\n+\n+// libstdc++/12790\n+// basic_filebuf::seekoff() should call codecvt::unshift()\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_seekoff_12790\";\n+\n+  Cvt* cvt = new Cvt;\n+  locale loc(locale::classic(), cvt);\n+\n+  filebuf fb;\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out);\n+  fb.sputc('a');\n+  fb.pubsync(); // Does not call unshift()\n+\n+  VERIFY( !cvt->unshift_called );\n+  fb.pubseekoff(0, ios_base::cur);\n+  VERIFY( cvt->unshift_called );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "bf70ecd5f3c50724dfdefcea25ebb7d35be0a865", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/wchar_t/12790-1.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F12790-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F12790-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F12790-1.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,79 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class Cvt : public std::codecvt<wchar_t, char, std::mbstate_t>\n+{\n+public:\n+  mutable bool unshift_called;\n+\n+  Cvt()\n+  : unshift_called(false)\n+  { }\n+\n+protected:\n+  bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+\n+  int\n+  do_encoding() const throw()\n+  { return -1; }\n+\n+  std::codecvt_base::result\n+  do_unshift(std::mbstate_t&, char* to, char*, char*& to_next) const\n+  {\n+    unshift_called = true;\n+    to_next = to;\n+    return std::codecvt_base::ok;\n+  }\n+};\n+\n+// libstdc++/12790\n+// basic_filebuf::seekoff() should call codecvt::unshift()\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_seekoff_12790\";\n+\n+  Cvt* cvt = new Cvt;\n+  locale loc(locale::classic(), cvt);\n+\n+  wfilebuf fb;\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out);\n+  fb.sputc(L'a');\n+\n+  VERIFY( !cvt->unshift_called );\n+  fb.pubseekoff(0, ios_base::cur);\n+  VERIFY( cvt->unshift_called );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "748ae3a086cc07399c28946e2fc1a43d42d4b477", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/wchar_t/12790-2.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F12790-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F12790-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F12790-2.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,80 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class Cvt : public std::codecvt<wchar_t, char, std::mbstate_t>\n+{\n+public:\n+  mutable bool unshift_called;\n+\n+  Cvt()\n+  : unshift_called(false)\n+  { }\n+\n+protected:\n+  bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+\n+  int\n+  do_encoding() const throw()\n+  { return -1; }\n+\n+  std::codecvt_base::result\n+  do_unshift(std::mbstate_t&, char* to, char*, char*& to_next) const\n+  {\n+    unshift_called = true;\n+    to_next = to;\n+    return std::codecvt_base::ok;\n+  }\n+};\n+\n+// libstdc++/12790\n+// basic_filebuf::seekoff() should call codecvt::unshift()\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_seekoff_12790\";\n+\n+  Cvt* cvt = new Cvt;\n+  locale loc(locale::classic(), cvt);\n+\n+  wfilebuf fb;\n+  fb.pubsetbuf(0, 0);\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out);\n+  fb.sputc(L'a');\n+\n+  VERIFY( !cvt->unshift_called );\n+  fb.pubseekoff(0, ios_base::cur);\n+  VERIFY( cvt->unshift_called );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6db1648cab80e9b61995586df6c492aa0fb5263b", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/wchar_t/12790-3.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F12790-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F12790-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F12790-3.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,79 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class Cvt : public std::codecvt<wchar_t, char, std::mbstate_t>\n+{\n+public:\n+  mutable bool unshift_called;\n+\n+  Cvt()\n+  : unshift_called(false)\n+  { }\n+\n+protected:\n+  bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+\n+  int\n+  do_encoding() const throw()\n+  { return -1; }\n+\n+  std::codecvt_base::result\n+  do_unshift(std::mbstate_t&, char* to, char*, char*& to_next) const\n+  {\n+    unshift_called = true;\n+    to_next = to;\n+    return std::codecvt_base::ok;\n+  }\n+};\n+\n+// libstdc++/12790\n+// basic_filebuf::seekoff() should call codecvt::unshift(),\n+// but only if writing\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_seekoff_12790\";\n+\n+  Cvt* cvt = new Cvt;\n+  locale loc(locale::classic(), cvt);\n+\n+  wfilebuf fb;\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out);\n+\n+  VERIFY( !cvt->unshift_called );\n+  fb.pubseekoff(0, ios_base::cur);\n+  VERIFY( !cvt->unshift_called );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b6af7fbe7ff0efa7afcf200580dbc68bb099aefe", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/wchar_t/12790-4.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F12790-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F12790-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F12790-4.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,80 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class Cvt : public std::codecvt<wchar_t, char, std::mbstate_t>\n+{\n+public:\n+  mutable bool unshift_called;\n+\n+  Cvt()\n+  : unshift_called(false)\n+  { }\n+\n+protected:\n+  bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+\n+  int\n+  do_encoding() const throw()\n+  { return -1; }\n+\n+  std::codecvt_base::result\n+  do_unshift(std::mbstate_t&, char* to, char*, char*& to_next) const\n+  {\n+    unshift_called = true;\n+    to_next = to;\n+    return std::codecvt_base::ok;\n+  }\n+};\n+\n+// libstdc++/12790\n+// basic_filebuf::seekoff() should call codecvt::unshift()\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_seekoff_12790\";\n+\n+  Cvt* cvt = new Cvt;\n+  locale loc(locale::classic(), cvt);\n+\n+  wfilebuf fb;\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out);\n+  fb.sputc(L'a');\n+  fb.pubsync(); // Does not call unshift()\n+\n+  VERIFY( !cvt->unshift_called );\n+  fb.pubseekoff(0, ios_base::cur);\n+  VERIFY( cvt->unshift_called );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3088e5ff944b3f552cd0726b37d82a08bd6d783f", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/wchar_t/3.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fwchar_t%2F3.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+void test03()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_seekoff_3\";\n+\n+  wfilebuf fb;\n+\n+  fb.open(name, ios_base::out);\n+  fb.sputc(0xf001);\n+\n+  // seekoff should flush the output sequence, which will fail\n+  // if the output buffer contains illegal characters.\n+  streampos ret = fb.pubseekoff(0, ios_base::cur);\n+  VERIFY( ret == streampos(streamoff(-1)) );\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "85b80a1329e87e8043cb10b22d67ea378cba79f1", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/10132-3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2F10132-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2F10132-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2F10132-3.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -54,9 +54,9 @@ struct gnu_char_traits\n {\n   typedef gnu_char_type\tchar_type;\n   typedef long  \t\tint_type;\n-  typedef long \t\tpos_type;\n-  typedef unsigned long \toff_type;\n+  typedef std::streamoff \toff_type;\n   typedef long   \t\tstate_type;\n+  typedef std::fpos<state_type>\tpos_type;\n   \n   static void \n   assign(char_type& __c1, const char_type& __c2) { }"}, {"sha": "3201da8478cf4064ca249f3fd2a8bba56b141ac9", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/12790-1.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2F12790-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2F12790-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2F12790-1.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,66 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n+\n+// libstdc++/12790\n+void test01()\n+{\n+  using namespace std;\n+  using __gnu_test::character;\n+  typedef basic_filebuf<character>::traits_type traits_type;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_seekpos_12790\";\n+\n+  locale loc(locale::classic(),\n+\t     new codecvt<traits_type::char_type, char,\n+\t     traits_type::state_type>);\n+\n+  basic_filebuf<character> fb;\n+  fb.pubsetbuf(0, 0);\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::in | ios_base::out | ios_base::trunc);\n+  traits_type::pos_type pos = fb.pubseekoff(0, ios_base::cur);\n+  fb.sputc(character::from_char('a'));\n+  fb.sputc(character::from_char(0xff));\n+  fb.sputc(character::from_char(0));\n+  fb.sputc(character::from_char(0));\n+\n+  // Check that seekpos restores the state correctly\n+  fb.pubseekpos(pos);\n+\n+  traits_type::int_type c = fb.sbumpc();\n+  VERIFY( c != traits_type::eof() );\n+  VERIFY( traits_type::eq(traits_type::to_char_type(c),\n+\t\t\t  character::from_char('a')) );\n+\n+  fb.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b5198e53b90a85a5b1cfe805f8dca2c7d9455576", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/12790-2.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2F12790-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2F12790-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2F12790-2.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,81 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n+\n+// libstdc++/12790\n+void test01()\n+{\n+  using namespace std;\n+  using __gnu_test::character;\n+  typedef basic_filebuf<character>::traits_type traits_type;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_seekpos_12790\";\n+\n+  locale loc(locale::classic(),\n+\t     new codecvt<traits_type::char_type, char,\n+\t     traits_type::state_type>);\n+\n+  basic_filebuf<character> fb;\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out | ios_base::trunc);\n+  fb.sputc(character::from_char('b'));\n+  fb.sputc(character::from_char(0xff));\n+  fb.sputc(character::from_char('a'));\n+  fb.sputc(character::from_char(0xfc));\n+  fb.sputc(character::from_char(0));\n+  fb.sputc(character::from_char(0));\n+\n+  fb.close();\n+  fb.open(name, ios_base::in);\n+\n+  fb.sbumpc();\n+  fb.sbumpc();\n+  traits_type::pos_type pos1 = fb.pubseekoff(0, ios_base::cur);\n+  fb.sbumpc();\n+  fb.sbumpc();\n+\n+  // Check that seekpos returns the correct state\n+  traits_type::pos_type pos2 = fb.pubseekpos(pos1);\n+  traits_type::int_type c = fb.sbumpc();\n+  VERIFY( c != traits_type::eof() );\n+  VERIFY( traits_type::eq(traits_type::to_char_type(c),\n+\t\t\t  character::from_char('a')) );\n+  fb.sbumpc();\n+\n+  fb.pubseekpos(pos2);\n+  c = fb.sbumpc();\n+  VERIFY( c != traits_type::eof() );\n+  VERIFY( traits_type::eq(traits_type::to_char_type(c),\n+\t\t\t  character::from_char('a')) );\n+\n+  fb.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "1d0535c72c501558cd70fcd2b947cfdac6c07362", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/12790-3.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2F12790-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2F12790-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2F12790-3.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,79 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n+\n+// libstdc++/12790\n+void test01()\n+{\n+  using namespace std;\n+  using __gnu_test::character;\n+  typedef basic_filebuf<character>::traits_type traits_type;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_seekpos_12790\";\n+\n+  locale loc(locale::classic(),\n+\t     new codecvt<traits_type::char_type, char,\n+\t     traits_type::state_type>);\n+\n+  basic_filebuf<character> fb;\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::in | ios_base::out | ios_base::trunc);\n+  fb.sputc(character::from_char('b'));\n+  fb.sputc(character::from_char(0xff));\n+  fb.sputc(character::from_char('c'));\n+  fb.sputc(character::from_char(0xff));\n+\n+  fb.pubseekoff(0, ios_base::beg);\n+  fb.sbumpc();\n+  fb.sbumpc();\n+  traits_type::pos_type pos = fb.pubseekoff(0, ios_base::cur);\n+  fb.sbumpc();\n+  fb.sbumpc();\n+\n+  // Check that seekoff sets the current state for output\n+  fb.pubseekpos(pos);\n+\n+  fb.sputc(character::from_char('a'));\n+  fb.sputc(character::from_char(0));\n+  fb.sputc(character::from_char(0));\n+  fb.sputc(character::from_char(0));\n+  fb.sputc(character::from_char(0));\n+  \n+  fb.pubseekpos(pos);\n+\n+  traits_type::int_type c = fb.sbumpc();\n+  VERIFY( c != traits_type::eof() );\n+  VERIFY( traits_type::eq(traits_type::to_char_type(c),\n+\t\t\t  character::from_char('a')) );\n+\n+  fb.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "588a1b27ccb7133e8e1fe827be8a712a5c408b99", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/1-io.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1-io.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -88,7 +88,7 @@ void test05()\n     VERIFY( off_1 > off_2 );\n     fb.sputn(\"\\nof the wonderful things he does!!\\nok\", 37);\n     fb.pubsync();\n-    VERIFY( !fb.write_position() );\n+    VERIFY( fb.write_position() );\n     VERIFY( !fb.read_position() );\n     fb.close();\n     VERIFY( !fb.is_open() );"}, {"sha": "c684786fe00f6ee29a625b3c230e61f86d518447", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/1-out.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1-out.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -90,7 +90,7 @@ void test05()\n     VERIFY( off_1 > off_2 );\n     fb.sputn(\"\\nof the wonderful things he does!!\\nok\", 37);\n     fb.pubsync();\n-    VERIFY( !fb.write_position() );\n+    VERIFY( fb.write_position() );\n     VERIFY( !fb.read_position() );\n     fb.close();\n     VERIFY( !fb.is_open() );"}, {"sha": "2c31c8a248a20189b9e37b46e360ad22674e6f2b", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/12790-1.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F12790-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F12790-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F12790-1.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,80 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class Cvt : public std::codecvt<char, char, std::mbstate_t>\n+{\n+public:\n+  mutable bool unshift_called;\n+\n+  Cvt()\n+  : unshift_called(false)\n+  { }\n+\n+protected:\n+  bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+\n+  int\n+  do_encoding() const throw()\n+  { return -1; }\n+\n+  std::codecvt_base::result\n+  do_unshift(std::mbstate_t&, char* to, char*, char*& to_next) const\n+  {\n+    unshift_called = true;\n+    to_next = to;\n+    return std::codecvt_base::ok;\n+  }\n+};\n+\n+// libstdc++/12790\n+// basic_filebuf::seekpos() should call codecvt::unshift()\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_seekpos_12790\";\n+\n+  Cvt* cvt = new Cvt;\n+  locale loc(locale::classic(), cvt);\n+\n+  filebuf fb;\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out);\n+  streampos pos = fb.pubseekoff(0, ios_base::beg);\n+  fb.sputc('a');\n+\n+  VERIFY( !cvt->unshift_called );\n+  fb.pubseekpos(pos);\n+  VERIFY( cvt->unshift_called );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "42b10230bf1e389e972fba2c5d85ae35d7a718a4", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/12790-2.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F12790-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F12790-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F12790-2.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,81 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class Cvt : public std::codecvt<char, char, std::mbstate_t>\n+{\n+public:\n+  mutable bool unshift_called;\n+\n+  Cvt()\n+  : unshift_called(false)\n+  { }\n+\n+protected:\n+  bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+\n+  int\n+  do_encoding() const throw()\n+  { return -1; }\n+\n+  std::codecvt_base::result\n+  do_unshift(std::mbstate_t&, char* to, char*, char*& to_next) const\n+  {\n+    unshift_called = true;\n+    to_next = to;\n+    return std::codecvt_base::ok;\n+  }\n+};\n+\n+// libstdc++/12790\n+// basic_filebuf::seekpos() should call codecvt::unshift()\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_seekpos_12790\";\n+\n+  Cvt* cvt = new Cvt;\n+  locale loc(locale::classic(), cvt);\n+\n+  filebuf fb;\n+  fb.pubsetbuf(0, 0);\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out);\n+  streampos pos = fb.pubseekoff(0, ios_base::beg);\n+  fb.sputc('a');\n+\n+  VERIFY( !cvt->unshift_called );\n+  fb.pubseekpos(pos);\n+  VERIFY( cvt->unshift_called );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e168c9459527c9556256637f6784b51dccba017c", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/12790-3.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F12790-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F12790-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F12790-3.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,80 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class Cvt : public std::codecvt<char, char, std::mbstate_t>\n+{\n+public:\n+  mutable bool unshift_called;\n+\n+  Cvt()\n+  : unshift_called(false)\n+  { }\n+\n+protected:\n+  bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+\n+  int\n+  do_encoding() const throw()\n+  { return -1; }\n+\n+  std::codecvt_base::result\n+  do_unshift(std::mbstate_t&, char* to, char*, char*& to_next) const\n+  {\n+    unshift_called = true;\n+    to_next = to;\n+    return std::codecvt_base::ok;\n+  }\n+};\n+\n+// libstdc++/12790\n+// basic_filebuf::seekpos() should call codecvt::unshift(),\n+// but only if writing\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_seekpos_12790\";\n+\n+  Cvt* cvt = new Cvt;\n+  locale loc(locale::classic(), cvt);\n+\n+  filebuf fb;\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out);\n+  streampos pos = fb.pubseekoff(0, ios_base::beg);\n+\n+  VERIFY( !cvt->unshift_called );\n+  fb.pubseekpos(pos);\n+  VERIFY( !cvt->unshift_called );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0bf84cbfdd5d79dc6d265bc87c72e95916ee38ff", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/12790-4.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F12790-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F12790-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F12790-4.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,81 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class Cvt : public std::codecvt<char, char, std::mbstate_t>\n+{\n+public:\n+  mutable bool unshift_called;\n+\n+  Cvt()\n+  : unshift_called(false)\n+  { }\n+\n+protected:\n+  bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+\n+  int\n+  do_encoding() const throw()\n+  { return -1; }\n+\n+  std::codecvt_base::result\n+  do_unshift(std::mbstate_t&, char* to, char*, char*& to_next) const\n+  {\n+    unshift_called = true;\n+    to_next = to;\n+    return std::codecvt_base::ok;\n+  }\n+};\n+\n+// libstdc++/12790\n+// basic_filebuf::seekpos() should call codecvt::unshift()\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_seekpos_12790\";\n+\n+  Cvt* cvt = new Cvt;\n+  locale loc(locale::classic(), cvt);\n+\n+  filebuf fb;\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out);\n+  streampos pos = fb.pubseekoff(0, ios_base::beg);\n+  fb.sputc('a');\n+  fb.pubsync(); // Does not call unshift()\n+\n+  VERIFY( !cvt->unshift_called );\n+  fb.pubseekpos(pos);\n+  VERIFY( cvt->unshift_called );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c543212b19e21ea33e594cdc77ea214bbfafecd1", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/wchar_t/1.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fwchar_t%2F1.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_seekpos_1\";\n+\n+  wfilebuf fb;\n+\n+  fb.open(name, ios_base::out);\n+  streampos pos = fb.pubseekoff(0, ios_base::beg);\n+  fb.sputc(0xf001);\n+\n+  streampos ret = fb.pubseekpos(pos);\n+  VERIFY( ret == streampos(streamoff(-1)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "718589e8cdf9ec80c7cf42e199e828c306e02bf3", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/wchar_t/12790-1.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fwchar_t%2F12790-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fwchar_t%2F12790-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fwchar_t%2F12790-1.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,80 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class Cvt : public std::codecvt<wchar_t, char, std::mbstate_t>\n+{\n+public:\n+  mutable bool unshift_called;\n+\n+  Cvt()\n+  : unshift_called(false)\n+  { }\n+\n+protected:\n+  bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+\n+  int\n+  do_encoding() const throw()\n+  { return -1; }\n+\n+  std::codecvt_base::result\n+  do_unshift(std::mbstate_t&, char* to, char*, char*& to_next) const\n+  {\n+    unshift_called = true;\n+    to_next = to;\n+    return std::codecvt_base::ok;\n+  }\n+};\n+\n+// libstdc++/12790\n+// basic_filebuf::seekpos() should call codecvt::unshift()\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_seekpos_12790\";\n+\n+  Cvt* cvt = new Cvt;\n+  locale loc(locale::classic(), cvt);\n+\n+  wfilebuf fb;\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out);\n+  streampos pos = fb.pubseekoff(0, ios_base::beg);\n+  fb.sputc(L'a');\n+\n+  VERIFY( !cvt->unshift_called );\n+  fb.pubseekpos(pos);\n+  VERIFY( cvt->unshift_called );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "220a48c79ea399d76bd7491716852c5debcebfb5", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/wchar_t/12790-2.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fwchar_t%2F12790-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fwchar_t%2F12790-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fwchar_t%2F12790-2.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,81 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class Cvt : public std::codecvt<wchar_t, char, std::mbstate_t>\n+{\n+public:\n+  mutable bool unshift_called;\n+\n+  Cvt()\n+  : unshift_called(false)\n+  { }\n+\n+protected:\n+  bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+\n+  int\n+  do_encoding() const throw()\n+  { return -1; }\n+\n+  std::codecvt_base::result\n+  do_unshift(std::mbstate_t&, char* to, char*, char*& to_next) const\n+  {\n+    unshift_called = true;\n+    to_next = to;\n+    return std::codecvt_base::ok;\n+  }\n+};\n+\n+// libstdc++/12790\n+// basic_filebuf::seekpos() should call codecvt::unshift()\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_seekpos_12790\";\n+\n+  Cvt* cvt = new Cvt;\n+  locale loc(locale::classic(), cvt);\n+\n+  wfilebuf fb;\n+  fb.pubsetbuf(0, 0);\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out);\n+  streampos pos = fb.pubseekoff(0, ios_base::beg);\n+  fb.sputc(L'a');\n+\n+  VERIFY( !cvt->unshift_called );\n+  fb.pubseekpos(pos);\n+  VERIFY( cvt->unshift_called );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "eaa3cb6976b6e211c875cd678e2d3c660a30faf3", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/wchar_t/12790-3.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fwchar_t%2F12790-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fwchar_t%2F12790-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fwchar_t%2F12790-3.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,80 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class Cvt : public std::codecvt<wchar_t, char, std::mbstate_t>\n+{\n+public:\n+  mutable bool unshift_called;\n+\n+  Cvt()\n+  : unshift_called(false)\n+  { }\n+\n+protected:\n+  bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+\n+  int\n+  do_encoding() const throw()\n+  { return -1; }\n+\n+  std::codecvt_base::result\n+  do_unshift(std::mbstate_t&, char* to, char*, char*& to_next) const\n+  {\n+    unshift_called = true;\n+    to_next = to;\n+    return std::codecvt_base::ok;\n+  }\n+};\n+\n+// libstdc++/12790\n+// basic_filebuf::seekpos() should call codecvt::unshift(),\n+// but only if writing\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_seekpos_12790\";\n+\n+  Cvt* cvt = new Cvt;\n+  locale loc(locale::classic(), cvt);\n+\n+  wfilebuf fb;\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out);\n+  streampos pos = fb.pubseekoff(0, ios_base::beg);\n+\n+  VERIFY( !cvt->unshift_called );\n+  fb.pubseekpos(pos);\n+  VERIFY( !cvt->unshift_called );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "70d36c8482b580be483994b363cabf2da973bc84", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/wchar_t/12790-4.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fwchar_t%2F12790-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fwchar_t%2F12790-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fwchar_t%2F12790-4.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,81 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <locale>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class Cvt : public std::codecvt<wchar_t, char, std::mbstate_t>\n+{\n+public:\n+  mutable bool unshift_called;\n+\n+  Cvt()\n+  : unshift_called(false)\n+  { }\n+\n+protected:\n+  bool\n+  do_always_noconv() const throw()\n+  { return false; }\n+\n+  int\n+  do_encoding() const throw()\n+  { return -1; }\n+\n+  std::codecvt_base::result\n+  do_unshift(std::mbstate_t&, char* to, char*, char*& to_next) const\n+  {\n+    unshift_called = true;\n+    to_next = to;\n+    return std::codecvt_base::ok;\n+  }\n+};\n+\n+// libstdc++/12790\n+// basic_filebuf::seekpos() should call codecvt::unshift()\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_seekpos_12790\";\n+\n+  Cvt* cvt = new Cvt;\n+  locale loc(locale::classic(), cvt);\n+\n+  wfilebuf fb;\n+  fb.pubimbue(loc);\n+\n+  fb.open(name, ios_base::out);\n+  streampos pos = fb.pubseekoff(0, ios_base::beg);\n+  fb.sputc(L'a');\n+  fb.pubsync(); // Does not call unshift()\n+\n+  VERIFY( !cvt->unshift_called );\n+  fb.pubseekpos(pos);\n+  VERIFY( cvt->unshift_called );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "202cc38d60a5e49bde6c0b67b9ff6925b659a937", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sync/char/1.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsync%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsync%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsync%2Fchar%2F1.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,52 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_sync_1\";\n+\n+  filebuf fb;\n+\n+  fb.open(name, ios_base::in | ios_base::out | ios_base::trunc);\n+  fb.sputn(\"abc\", 3);\n+\n+  fb.pubseekoff(0, ios_base::beg);\n+  fb.sputc('1');\n+\n+  // Sync can't be used to switch from write mode to read mode.\n+  fb.pubsync();\n+\n+  filebuf::int_type c = fb.sbumpc();\n+  VERIFY( c == filebuf::traits_type::eof() );\n+\n+  fb.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8ff00ce96342539ef15d3503e5839324c90a12f7", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sync/wchar_t/1.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsync%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsync%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsync%2Fwchar_t%2F1.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,52 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_sync_1\";\n+\n+  wfilebuf fb;\n+\n+  fb.open(name, ios_base::in | ios_base::out | ios_base::trunc);\n+  fb.sputn(L\"abc\", 3);\n+\n+  fb.pubseekoff(0, ios_base::beg);\n+  fb.sputc(L'1');\n+\n+  // Sync can't be used to switch from write mode to read mode.\n+  fb.pubsync();\n+\n+  wfilebuf::int_type c = fb.sbumpc();\n+  VERIFY( c == wfilebuf::traits_type::eof() );\n+\n+  fb.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "484c611cdda36a2beb750d6b80a3ef29fdb14156", "filename": "libstdc++-v3/testsuite/27_io/basic_fstream/3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2F3.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -58,9 +58,9 @@ struct gnu_char_traits\n {\n   typedef gnu_char_type\tchar_type;\n   typedef long  \t\tint_type;\n-  typedef long \t\tpos_type;\n-  typedef unsigned long \toff_type;\n+  typedef std::streamoff \toff_type;\n   typedef long   \t\tstate_type;\n+  typedef std::fpos<state_type>\tpos_type;\n   \n   static void \n   assign(char_type& __c1, const char_type& __c2) { }"}, {"sha": "6649be318ecfc016eea77b579140d2f3348326a8", "filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2F3.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -58,9 +58,9 @@ struct gnu_char_traits\n {\n   typedef gnu_char_type\tchar_type;\n   typedef long  \t\tint_type;\n-  typedef long \t\tpos_type;\n-  typedef unsigned long \toff_type;\n+  typedef std::streamoff \toff_type;\n   typedef long   \t\tstate_type;\n+  typedef std::fpos<state_type>\tpos_type;\n   \n   static void \n   assign(char_type& __c1, const char_type& __c2) { }"}, {"sha": "8f264d4a37a4b82a46381c494a550b81bcedacd0", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2F3.cc?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -58,9 +58,9 @@ struct gnu_char_traits\n {\n   typedef gnu_char_type\tchar_type;\n   typedef long  \t\tint_type;\n-  typedef long \t\tpos_type;\n-  typedef unsigned long \toff_type;\n+  typedef std::streamoff \toff_type;\n   typedef long   \t\tstate_type;\n+  typedef std::fpos<state_type>\tpos_type;\n   \n   static void \n   assign(char_type& __c1, const char_type& __c2) { }"}, {"sha": "67c35c25443637f75aef51277384a43e3bf985f7", "filename": "libstdc++-v3/testsuite/testsuite_character.h", "status": "added", "additions": 415, "deletions": 0, "changes": 415, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e93f39f64234c07447aca0d466c8ae989306669/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.h?ref=5e93f39f64234c07447aca0d466c8ae989306669", "patch": "@@ -0,0 +1,415 @@\n+// -*- C++ -*-\n+// Testing character type and state type with char_traits and codecvt\n+// specializations for the C++ library testsuite.\n+//\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _GLIBCXX_TESTSUITE_CHARACTER_H\n+#define _GLIBCXX_TESTSUITE_CHARACTER_H\n+\n+#include <string> // for char_traits\n+#include <locale> // for codecvt\n+#include <climits>\n+\n+namespace __gnu_test\n+{  \n+  // Character type\n+  struct character\n+  {\n+    unsigned char val;\n+\n+    static character from_char(char c)\n+    {\n+      character ret;\n+      ret.val = c;\n+      return ret;\n+    }\n+  };\n+\n+  // State type.\n+  struct conversion_state\n+  {\n+    unsigned int state;\n+  };\n+}; // namespace __gnu_test\n+\n+namespace std\n+{\n+  // char_traits specialization. Meets the additional requirements for\n+  // basic_filebuf.\n+  template<>\n+    struct char_traits<__gnu_test::character>\n+    {\n+      typedef __gnu_test::character char_type;\n+      typedef unsigned int int_type;\n+      typedef __gnu_test::conversion_state state_type;\n+      typedef streamoff off_type;\n+      typedef fpos<state_type> pos_type;\n+\n+      static void\n+      assign(char_type& c1, const char_type& c2)\n+      { c1 = c2; }\n+\n+      static bool\n+      eq(const char_type& c1, const char_type& c2)\n+      { return c1.val == c2.val; }\n+\n+      static bool\n+      lt(const char_type& c1, const char_type& c2)\n+      { return c1.val < c2.val; }\n+\n+      static int\n+      compare(const char_type* s1, const char_type* s2, size_t n)\n+      {\n+\tfor (size_t i = 0; i < n; ++i)\n+\t  {\n+\t    if (lt(s1[i], s2[i]))\n+\t      return -1;\n+\t    else if (lt(s2[i], s1[i]))\n+\t      return 1;\n+\t  }\n+\treturn 0;\n+      }\n+\n+      static size_t\n+      length(const char_type* s)\n+      {\n+\tsize_t n = 0;\n+\twhile (!eq(s[n], char_type()))\n+\t  ++n;\n+\treturn n;\n+      }\n+\n+      static const char_type*\n+      find(const char_type* s, size_t n, const char_type& a)\n+      {\n+\tfor (size_t i = 0; i < n; ++i)\n+\t  {\n+\t    if (eq(s[i], a))\n+\t      return s + i;\n+\t  }\n+\treturn NULL;\n+      }\n+\n+      static char_type*\n+      move(char_type* s1, const char_type* s2, size_t n)\n+      {\n+\tif (s1 > s2)\n+\t  {\n+\t    for (size_t i = 0; i < n; ++i)\n+\t      assign(s1[n - i - 1], s2[n - i - 1]);\n+\t  }\n+\telse\n+\t  {\n+\t    for (size_t i = 0; i < n; ++i)\n+\t      assign(s1[i], s2[i]);\n+\t  }\n+\treturn s1;\n+      }\n+\n+      static char_type*\n+      copy(char_type* s1, const char_type* s2, size_t n)\n+      {\n+\tfor (size_t i = 0; i < n; ++i)\n+\t  assign(s1[i], s2[i]);\n+\treturn s1;\n+      }\n+\n+      static char_type*\n+      assign(char_type* s, size_t n, char_type a)\n+      {\n+\tfor (size_t i = 0; i < n; ++i)\n+\t  assign(s[i], a);\n+\treturn s;\n+      }\n+\n+      static int_type\n+      not_eof(const int_type& c)\n+      {\n+\tif (eq_int_type(c, eof()))\n+\t  return 0;\n+\treturn c;\n+      }\n+\n+      // Note non-trivial conversion to maximize chance of catching bugs\n+      static char_type\n+      to_char_type(const int_type& c)\n+      {\n+\tchar_type ret;\n+\tret.val = (c >> 5);\n+\treturn ret;\n+      }\n+\n+      static int_type\n+      to_int_type(const char_type& c)\n+      {\n+\treturn c.val << 5;\n+      }\n+\n+      static bool\n+      eq_int_type(const int_type& c1, const int_type& c2)\n+      { return c1 == c2; }\n+\n+      static int_type eof()\n+      { return 0xf; }\n+    };\n+\n+  // codecvt specialization\n+  //\n+  // The conversion performed by the specialization is not supposed to\n+  // be useful, rather it has been designed to demonstrate the\n+  // essential features of stateful conversions:\n+  // * Number and value of bytes for each internal character depends on the\n+  //   state in addition to the character itself.\n+  // * Unshift produces an unshift sequence and resets the state. On input\n+  //   the unshift sequence causes the state to be reset.\n+  //\n+  // The conversion for output is as follows:\n+  // 1. Calculate the value tmp by xor-ing the state and the internal\n+  //    character\n+  // 2. Split tmp into either two or three bytes depending on the value of\n+  //    state. Output those bytes.\n+  // 3. tmp becomes the new value of state.\n+  template<>\n+    class codecvt<__gnu_test::character, char, __gnu_test::conversion_state>\n+      : public locale::facet, public codecvt_base\n+    {\n+    public:\n+      typedef __gnu_test::character intern_type;\n+      typedef char extern_type;\n+      typedef __gnu_test::conversion_state state_type;\n+\n+      explicit codecvt(size_t refs = 0)\n+      : locale::facet(refs)\n+      { }\n+\n+      result\n+      out(state_type& state, const intern_type* from,\n+\t  const intern_type* from_end, const intern_type*& from_next,\n+\t  extern_type* to, extern_type* to_limit, extern_type*& to_next) const\n+      {\n+\treturn do_out(state, from, from_end, from_next,\n+\t\t      to, to_limit, to_next);\n+      }\n+\n+      result\n+      unshift(state_type& state, extern_type* to, extern_type* to_limit,\n+\t      extern_type*& to_next) const\n+      { return do_unshift(state, to, to_limit, to_next); }\n+\n+      result\n+      in(state_type& state, const extern_type* from,\n+\t const extern_type* from_end, const extern_type*& from_next,\n+\t intern_type* to, intern_type* to_limit, intern_type*& to_next) const\n+      {\n+\treturn do_in(state, from, from_end, from_next,\n+\t\t     to, to_limit, to_next);\n+      }\n+\n+      int\n+      encoding() const throw()\n+      { return do_encoding(); }\n+\n+      bool\n+      always_noconv() const throw()\n+      { return do_always_noconv(); }\n+      \n+      int\n+      length(state_type& state, const extern_type* from,\n+\t     const extern_type* end, size_t max) const\n+      { return do_length(state, from, end, max); }\n+      \n+      int\n+      max_length() const throw()\n+      { return do_max_length(); }\n+\n+      static locale::id id;\n+\n+    protected:\n+      ~codecvt()\n+      { }\n+\n+      virtual result\n+      do_out(state_type& state, const intern_type* from,\n+\t     const intern_type* from_end, const intern_type*& from_next,\n+\t     extern_type* to, extern_type* to_limit,\n+\t     extern_type*& to_next) const\n+      {\n+\twhile (from < from_end && to < to_limit)\n+\t  {\n+\t    unsigned char tmp = (state.state ^ from->val);\n+\t    if (state.state & 0x8)\n+\t      {\n+\t\tif (to >= to_limit - 2)\n+\t\t  break;\n+\t\t*to++ = (tmp & 0x7);\n+\t\t*to++ = ((tmp >> 3) & 0x7);\n+\t\t*to++ = ((tmp >> 6) & 0x3);\n+\t      }\n+\t    else\n+\t      {\n+\t\tif (to >= to_limit - 1)\n+\t\t  break;\n+\t\t*to++ = (tmp & 0xf);\n+\t\t*to++ = ((tmp >> 4) & 0xf);\n+\t      }\n+\t    state.state = tmp;\n+\t    ++from;\n+\t  }\n+\n+\tfrom_next = from;\n+\tto_next = to;\n+\treturn (from < from_end) ? partial : ok;\n+      }\n+\n+      virtual result\n+      do_in(state_type& state, const extern_type* from,\n+\t    const extern_type* from_end, const extern_type*& from_next,\n+\t    intern_type* to, intern_type* to_limit,\n+\t    intern_type*& to_next) const\n+      {\n+\twhile (from < from_end && to < to_limit)\n+\t  {\n+\t    unsigned char c = *from;\n+\t    if (c & 0xc0)\n+\t      {\n+\t\t// Unshift sequence\n+\t\tstate.state &= c;\n+\t\t++from;\n+\t\tcontinue;\n+\t      }\n+\n+\t    unsigned char tmp;\n+\t    if (state.state & 0x8)\n+\t      {\n+\t\tif (from >= from_end - 2)\n+\t\t  break;\n+\t\ttmp = (*from++ & 0x7);\n+\t\ttmp |= ((*from++ << 3) & 0x38);\n+\t\ttmp |= ((*from++ << 6) & 0xc0);\n+\t      }\n+\t    else\n+\t      {\n+\t\tif (from >= from_end - 1)\n+\t\t  break;\n+\t\ttmp = (*from++ & 0xf);\n+\t\ttmp |= ((*from++ << 4) & 0xf0);\n+\t      }\n+\t    to->val = (tmp ^ state.state);\n+\t    state.state = tmp;\n+\t    ++to;\n+\t  }\n+\n+\tfrom_next = from;\n+\tto_next = to;\n+\treturn (from < from_end) ? partial : ok;\n+      }\n+\n+      virtual result\n+      do_unshift(state_type& state, extern_type* to, extern_type* to_limit,\n+\t\t extern_type*& to_next) const\n+      {\n+\tfor (unsigned int i = 0; i < CHAR_BIT; ++i)\n+\t  {\n+\t    unsigned int mask = (1 << i);\n+\t    if (state.state & mask)\n+\t      {\n+\t\tif (to == to_limit)\n+\t\t  {\n+\t\t    to_next = to;\n+\t\t    return partial;\n+\t\t  }\n+\n+\t\tstate.state &= ~mask;\n+\t\t*to++ = static_cast<unsigned char>(~mask);\n+\t      }\n+\t  }\n+\n+\tto_next = to;\n+\treturn state.state == 0 ? ok : error;\n+      }\n+\n+      virtual int\n+      do_encoding() const throw()\n+      { return -1; }\n+\n+      virtual bool\n+      do_always_noconv() const throw()\n+      { return false; }\n+\n+      virtual int\n+      do_length(state_type& state, const extern_type* from,\n+\t\tconst extern_type* end, size_t max) const\n+      {\n+\tconst extern_type* beg = from;\n+\twhile (from < end && max)\n+\t  {\n+\t    unsigned char c = *from;\n+\t    if (c & 0xc0)\n+\t      {\n+\t\t// Unshift sequence\n+\t\tstate.state &= c;\n+\t\t++from;\n+\t\tcontinue;\n+\t      }\n+\n+\t    unsigned char tmp;\n+\t    if (state.state & 0x8)\n+\t      {\n+\t\tif (from >= end - 2)\n+\t\t  break;\n+\t\ttmp = (*from++ & 0x7);\n+\t\ttmp |= ((*from++ << 3) & 0x38);\n+\t\ttmp |= ((*from++ << 6) & 0xc0);\n+\t      }\n+\t    else\n+\t      {\n+\t\tif (from >= end - 1)\n+\t\t  break;\n+\t\ttmp = (*from++ & 0xf);\n+\t\ttmp |= ((*from++ << 4) & 0xf0);\n+\t      }\n+\t    state.state = tmp;\n+\t    --max;\n+\t  }\n+\treturn from - beg;\n+      }\n+\n+      // Maximum 8 bytes unshift sequence followed by max 3 bytes for\n+      // one character.\n+      virtual int\n+      do_max_length() const throw()\n+      { return 11; }\n+    };\n+\n+  locale::id\n+  codecvt<__gnu_test::character, char, __gnu_test::conversion_state>::id;\n+} // namespace std\n+\n+#endif // _GLIBCXX_TESTSUITE_CHARACTER_H\n+"}]}