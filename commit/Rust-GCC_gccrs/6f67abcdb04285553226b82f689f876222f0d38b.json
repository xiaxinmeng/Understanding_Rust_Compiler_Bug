{"sha": "6f67abcdb04285553226b82f689f876222f0d38b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY2N2FiY2RiMDQyODU1NTMyMjZiODJmNjg5Zjg3NjIyMmYwZDM4Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-07-06T21:58:01Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-07-06T21:58:01Z"}, "message": "omp-low.c (lower_rec_input_clauses): For lastprivate clauses in ctx->for_simd_scan_phase simd copy the outer var to...\n\n\t* omp-low.c (lower_rec_input_clauses): For lastprivate clauses in\n\tctx->for_simd_scan_phase simd copy the outer var to the privatized\n\tvariable(s).  For conditional lastprivate look through outer\n\tGIMPLE_OMP_SCAN context.\n\t(lower_omp_1): For conditional lastprivate look through outer\n\tGIMPLE_OMP_SCAN context.\n\n\t* testsuite/libgomp.c/scan-19.c: New test.\n\t* testsuite/libgomp.c/scan-20.c: New test.\n\nFrom-SVN: r273169", "tree": {"sha": "f449bacab0614115cf88a2c0da01eea7ade1ee8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f449bacab0614115cf88a2c0da01eea7ade1ee8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f67abcdb04285553226b82f689f876222f0d38b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f67abcdb04285553226b82f689f876222f0d38b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f67abcdb04285553226b82f689f876222f0d38b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f67abcdb04285553226b82f689f876222f0d38b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "94e14f2e90e3c13894f3b1df39cd1f28f1081d3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94e14f2e90e3c13894f3b1df39cd1f28f1081d3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94e14f2e90e3c13894f3b1df39cd1f28f1081d3b"}], "stats": {"total": 286, "additions": 280, "deletions": 6}, "files": [{"sha": "edb8df5e15d20592c3e4f274910d92618f305df3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f67abcdb04285553226b82f689f876222f0d38b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f67abcdb04285553226b82f689f876222f0d38b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f67abcdb04285553226b82f689f876222f0d38b", "patch": "@@ -1,5 +1,12 @@\n 2019-07-06  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* omp-low.c (lower_rec_input_clauses): For lastprivate clauses in\n+\tctx->for_simd_scan_phase simd copy the outer var to the privatized\n+\tvariable(s).  For conditional lastprivate look through outer\n+\tGIMPLE_OMP_SCAN context.\n+\t(lower_omp_1): For conditional lastprivate look through outer\n+\tGIMPLE_OMP_SCAN context.\n+\n \t* omp-low.c (struct omp_context): Rename combined_into_simd_safelen0\n \tmember to combined_into_simd_safelen1.\n \t(lower_rec_input_clauses, lower_omp_1): Adjust uses."}, {"sha": "3fe466fae0367a4e1cba4e0957e4d5eb961fe73d", "filename": "gcc/omp-low.c", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f67abcdb04285553226b82f689f876222f0d38b/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f67abcdb04285553226b82f689f876222f0d38b/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=6f67abcdb04285553226b82f689f876222f0d38b", "patch": "@@ -5006,6 +5006,17 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t\t    lower_omp (&tseq, ctx->outer);\n \t\t\t  gimple_seq_add_seq (&llist[1], tseq);\n \t\t\t}\n+\t\t      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_LASTPRIVATE\n+\t\t\t  && ctx->for_simd_scan_phase)\n+\t\t\t{\n+\t\t\t  x = unshare_expr (ivar);\n+\t\t\t  tree orig_v\n+\t\t\t    = build_outer_var_ref (var, ctx,\n+\t\t\t\t\t\t   OMP_CLAUSE_LASTPRIVATE);\n+\t\t\t  x = lang_hooks.decls.omp_clause_assign_op (c, x,\n+\t\t\t\t\t\t\t\t     orig_v);\n+\t\t\t  gimplify_and_add (x, &llist[0]);\n+\t\t\t}\n \t\t      if (y)\n \t\t\t{\n \t\t\t  y = lang_hooks.decls.omp_clause_dtor (c, ivar);\n@@ -5035,6 +5046,16 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t}\n \t      if (nx)\n \t\tgimplify_and_add (nx, ilist);\n+\t      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_LASTPRIVATE\n+\t\t  && is_simd\n+\t\t  && ctx->for_simd_scan_phase)\n+\t\t{\n+\t\t  tree orig_v = build_outer_var_ref (var, ctx,\n+\t\t\t\t\t\t     OMP_CLAUSE_LASTPRIVATE);\n+\t\t  x = lang_hooks.decls.omp_clause_assign_op (c, new_var,\n+\t\t\t\t\t\t\t     orig_v);\n+\t\t  gimplify_and_add (x, ilist);\n+\t\t}\n \t      /* FALLTHRU */\n \n \t    do_dtor:\n@@ -5709,11 +5730,12 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t    && OMP_CLAUSE_LASTPRIVATE_CONDITIONAL (c))\n \t\t  {\n \t\t    tree o = lookup_decl (OMP_CLAUSE_DECL (c), ctx);\n-\t\t    tree *v\n-\t\t      = ctx->lastprivate_conditional_map->get (o);\n-\t\t    tree po = lookup_decl (OMP_CLAUSE_DECL (c), ctx->outer);\n-\t\t    tree *pv\n-\t\t      = ctx->outer->lastprivate_conditional_map->get (po);\n+\t\t    omp_context *outer = ctx->outer;\n+\t\t    if (gimple_code (outer->stmt) == GIMPLE_OMP_SCAN)\n+\t\t      outer = outer->outer;\n+\t\t    tree *v = ctx->lastprivate_conditional_map->get (o);\n+\t\t    tree po = lookup_decl (OMP_CLAUSE_DECL (c), outer);\n+\t\t    tree *pv = outer->lastprivate_conditional_map->get (po);\n \t\t    *v = *pv;\n \t\t  }\n \t    }\n@@ -12421,7 +12443,11 @@ lower_omp_1 (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t      {\n \t\ttree clauses;\n \t\tif (up->combined_into_simd_safelen1)\n-\t\t  up = up->outer;\n+\t\t  {\n+\t\t    up = up->outer;\n+\t\t    if (gimple_code (up->stmt) == GIMPLE_OMP_SCAN)\n+\t\t      up = up->outer;\n+\t\t  }\n \t\tif (gimple_code (up->stmt) == GIMPLE_OMP_FOR)\n \t\t  clauses = gimple_omp_for_clauses (up->stmt);\n \t\telse"}, {"sha": "107c5c9d06f95922249dd648bf47438fda8237e2", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f67abcdb04285553226b82f689f876222f0d38b/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f67abcdb04285553226b82f689f876222f0d38b/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=6f67abcdb04285553226b82f689f876222f0d38b", "patch": "@@ -1,5 +1,8 @@\n 2019-07-06  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* testsuite/libgomp.c/scan-19.c: New test.\n+\t* testsuite/libgomp.c/scan-20.c: New test.\n+\n \t* testsuite/libgomp.c/scan-11.c: New test.\n \t* testsuite/libgomp.c/scan-12.c: New test.\n \t* testsuite/libgomp.c/scan-13.c: New test."}, {"sha": "19d31d9709f731cb36dc07a1b96192ba5d720c63", "filename": "libgomp/testsuite/libgomp.c/scan-19.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f67abcdb04285553226b82f689f876222f0d38b/libgomp%2Ftestsuite%2Flibgomp.c%2Fscan-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f67abcdb04285553226b82f689f876222f0d38b/libgomp%2Ftestsuite%2Flibgomp.c%2Fscan-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fscan-19.c?ref=6f67abcdb04285553226b82f689f876222f0d38b", "patch": "@@ -0,0 +1,119 @@\n+/* { dg-require-effective-target size32plus } */\n+/* { dg-additional-options \"-O2 -fopenmp -fdump-tree-vect-details\" } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized \\[2-6] loops\" 2 \"vect\" { target sse2_runtime } } } */\n+\n+extern void abort (void);\n+int r, a[1024], b[1024], x, y, z;\n+\n+__attribute__((noipa)) void\n+foo (int *a, int *b)\n+{\n+  #pragma omp for simd reduction (inscan, +:r) lastprivate (conditional: z) firstprivate (x) private (y)\n+  for (int i = 0; i < 1024; i++)\n+    {\n+      { y = a[i]; r += y + x + 12; }\n+      #pragma omp scan inclusive(r)\n+      { b[i] = r; if ((i & 1) == 0 && i < 937) z = r; }\n+    }\n+}\n+\n+__attribute__((noipa)) int\n+bar (void)\n+{\n+  int s = 0;\n+  #pragma omp parallel\n+  #pragma omp for simd reduction (inscan, +:s) firstprivate (x) private (y) lastprivate (z)\n+  for (int i = 0; i < 1024; i++)\n+    {\n+      { y = 2 * a[i]; s += y; z = y; }\n+      #pragma omp scan inclusive(s)\n+      { y = s; b[i] = y + x + 12; }\n+    }\n+  return s;\n+}\n+\n+__attribute__((noipa)) void\n+baz (int *a, int *b)\n+{\n+  #pragma omp parallel for simd reduction (inscan, +:r) firstprivate (x) lastprivate (x) if (simd: 0)\n+  for (int i = 0; i < 1024; i++)\n+    {\n+      { r += a[i]; if (i == 1023) x = 29; }\n+      #pragma omp scan inclusive(r)\n+      b[i] = r;\n+    }\n+}\n+\n+__attribute__((noipa)) int\n+qux (void)\n+{\n+  int s = 0;\n+  #pragma omp parallel for simd simdlen (1) reduction (inscan, +:s) lastprivate (conditional: x, y)\n+  for (int i = 0; i < 1024; i++)\n+    {\n+      { s += 2 * a[i]; if ((a[i] & 1) == 1 && i < 825) x = a[i]; }\n+      #pragma omp scan inclusive(s)\n+      { b[i] = s; if ((a[i] & 1) == 0 && i < 829) y = a[i]; }\n+    }\n+  return s;\n+}\n+\n+int\n+main ()\n+{\n+  int s = 0;\n+  x = -12;\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      a[i] = i;\n+      b[i] = -1;\n+      asm (\"\" : \"+g\" (i));\n+    }\n+  #pragma omp parallel\n+  foo (a, b);\n+  if (r != 1024 * 1023 / 2 || x != -12 || z != b[936])\n+    abort ();\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      s += i;\n+      if (b[i] != s)\n+\tabort ();\n+      else\n+\tb[i] = 25;\n+    }\n+  if (bar () != 1024 * 1023 || x != -12 || z != 2 * 1023)\n+    abort ();\n+  s = 0;\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      s += 2 * i;\n+      if (b[i] != s)\n+\tabort ();\n+      else\n+\tb[i] = -1;\n+    }\n+  r = 0;\n+  baz (a, b);\n+  if (r != 1024 * 1023 / 2 || x != 29)\n+    abort ();\n+  s = 0;\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      s += i;\n+      if (b[i] != s)\n+\tabort ();\n+      else\n+\tb[i] = -25;\n+    }\n+  if (qux () != 1024 * 1023 || x != 823 || y != 828)\n+    abort ();\n+  s = 0;\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      s += 2 * i;\n+      if (b[i] != s)\n+\tabort ();\n+    }\n+  return 0;\n+}"}, {"sha": "18401644be8bd0706ffb39403dc3bdd1c9f3fb41", "filename": "libgomp/testsuite/libgomp.c/scan-20.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f67abcdb04285553226b82f689f876222f0d38b/libgomp%2Ftestsuite%2Flibgomp.c%2Fscan-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f67abcdb04285553226b82f689f876222f0d38b/libgomp%2Ftestsuite%2Flibgomp.c%2Fscan-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fscan-20.c?ref=6f67abcdb04285553226b82f689f876222f0d38b", "patch": "@@ -0,0 +1,119 @@\n+/* { dg-require-effective-target size32plus } */\n+/* { dg-additional-options \"-O2 -fopenmp -fdump-tree-vect-details\" } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized \\[2-6] loops\" 2 \"vect\" { target sse2_runtime } } } */\n+\n+extern void abort (void);\n+int r, a[1024], b[1024], x, y, z;\n+\n+__attribute__((noipa)) void\n+foo (int *a, int *b)\n+{\n+  #pragma omp for simd reduction (inscan, +:r) lastprivate (conditional: z) firstprivate (x) private (y) simdlen(1)\n+  for (int i = 0; i < 1024; i++)\n+    {\n+      { b[i] = r; if ((i & 1) == 0 && i < 937) z = r; }\n+      #pragma omp scan exclusive(r)\n+      { y = a[i]; r += y + x + 12; }\n+    }\n+}\n+\n+__attribute__((noipa)) int\n+bar (void)\n+{\n+  int s = 0;\n+  #pragma omp parallel\n+  #pragma omp for simd reduction (inscan, +:s) firstprivate (x) private (y) lastprivate (z) if (0)\n+  for (int i = 0; i < 1024; i++)\n+    {\n+      { y = s; b[i] = y + x + 12; }\n+      #pragma omp scan exclusive(s)\n+      { y = 2 * a[i]; s += y; z = y; }\n+    }\n+  return s;\n+}\n+\n+__attribute__((noipa)) void\n+baz (int *a, int *b)\n+{\n+  #pragma omp parallel for simd reduction (inscan, +:r) firstprivate (x) lastprivate (x)\n+  for (int i = 0; i < 1024; i++)\n+    {\n+      b[i] = r;\n+      #pragma omp scan exclusive(r)\n+      { r += a[i]; if (i == 1023) x = 29; }\n+    }\n+}\n+\n+__attribute__((noipa)) int\n+qux (void)\n+{\n+  int s = 0;\n+  #pragma omp parallel for simd reduction (inscan, +:s) lastprivate (conditional: x, y)\n+  for (int i = 0; i < 1024; i++)\n+    {\n+      { b[i] = s; if ((a[i] & 1) == 0 && i < 829) y = a[i]; }\n+      #pragma omp scan exclusive(s)\n+      { s += 2 * a[i]; if ((a[i] & 1) == 1 && i < 825) x = a[i]; }\n+    }\n+  return s;\n+}\n+\n+int\n+main ()\n+{\n+  int s = 0;\n+  x = -12;\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      a[i] = i;\n+      b[i] = -1;\n+      asm (\"\" : \"+g\" (i));\n+    }\n+  #pragma omp parallel\n+  foo (a, b);\n+  if (r != 1024 * 1023 / 2 || x != -12 || z != b[936])\n+    abort ();\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      if (b[i] != s)\n+\tabort ();\n+      else\n+\tb[i] = 25;\n+      s += i;\n+    }\n+  if (bar () != 1024 * 1023 || x != -12 || z != 2 * 1023)\n+    abort ();\n+  s = 0;\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      if (b[i] != s)\n+\tabort ();\n+      else\n+\tb[i] = -1;\n+      s += 2 * i;\n+    }\n+  r = 0;\n+  baz (a, b);\n+  if (r != 1024 * 1023 / 2 || x != 29)\n+    abort ();\n+  s = 0;\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      if (b[i] != s)\n+\tabort ();\n+      else\n+\tb[i] = -25;\n+      s += i;\n+    }\n+  if (qux () != 1024 * 1023 || x != 823 || y != 828)\n+    abort ();\n+  s = 0;\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      if (b[i] != s)\n+\tabort ();\n+      s += 2 * i;\n+    }\n+  return 0;\n+}"}]}