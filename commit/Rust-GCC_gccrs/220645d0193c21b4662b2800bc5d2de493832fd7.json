{"sha": "220645d0193c21b4662b2800bc5d2de493832fd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIwNjQ1ZDAxOTNjMjFiNDY2MmIyODAwYmM1ZDJkZTQ5MzgzMmZkNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-10-25T12:42:58Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-10-25T12:42:58Z"}, "message": "PR libstdc++/79283 fix filesystem::read_symlink for /proc\n\n\tPR libstdc++/79283\n\t* src/filesystem/ops.cc (read_symlink): Handle st_size being zero.\n\t* src/filesystem/std-ops.cc (read_symlink): Likewise.\n\t(do_copy_file) [!NEED_DO_COPY_FILE]: Avoid multiple definitions.\n\nFrom-SVN: r254076", "tree": {"sha": "36a7d1b6e5939bc418cc29922e074780828a39a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36a7d1b6e5939bc418cc29922e074780828a39a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/220645d0193c21b4662b2800bc5d2de493832fd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/220645d0193c21b4662b2800bc5d2de493832fd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/220645d0193c21b4662b2800bc5d2de493832fd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/220645d0193c21b4662b2800bc5d2de493832fd7/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeb517d3e7fd3717f4fa7cc8a1e6d4499013fee3"}], "stats": {"total": 82, "additions": 64, "deletions": 18}, "files": [{"sha": "afc4b7c0048d8197c5772d1e82b828fbf85bb2aa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/220645d0193c21b4662b2800bc5d2de493832fd7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/220645d0193c21b4662b2800bc5d2de493832fd7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=220645d0193c21b4662b2800bc5d2de493832fd7", "patch": "@@ -1,5 +1,10 @@\n 2017-10-25  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/79283\n+\t* src/filesystem/ops.cc (read_symlink): Handle st_size being zero.\n+\t* src/filesystem/std-ops.cc (read_symlink): Likewise.\n+\t(do_copy_file) [!NEED_DO_COPY_FILE]: Avoid multiple definitions.\n+\n \t* src/filesystem/std-path.cc (path::lexically_normal): Add missing\n \tstep to algorithm, for removing dot-dot elements after root-directory.\n \t* testsuite/27_io/filesystem/operations/canonical.cc: Use"}, {"sha": "1ec8883fde9c81d806587a8123e4ca26ff3fdc73", "filename": "libstdc++-v3/src/filesystem/ops.cc", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/220645d0193c21b4662b2800bc5d2de493832fd7/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/220645d0193c21b4662b2800bc5d2de493832fd7/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc?ref=220645d0193c21b4662b2800bc5d2de493832fd7", "patch": "@@ -962,26 +962,45 @@ fs::read_symlink(const path& p)\n \n fs::path fs::read_symlink(const path& p, error_code& ec)\n {\n+  path result;\n #ifdef _GLIBCXX_HAVE_SYS_STAT_H\n   stat_type st;\n   if (::lstat(p.c_str(), &st))\n     {\n       ec.assign(errno, std::generic_category());\n-      return {};\n+      return result;\n     }\n-  std::string buf(st.st_size, '\\0');\n-  ssize_t len = ::readlink(p.c_str(), &buf.front(), buf.size());\n-  if (len == -1)\n+  std::string buf(st.st_size ? st.st_size + 1 : 128, '\\0');\n+  do\n     {\n-      ec.assign(errno, std::generic_category());\n-      return {};\n+      ssize_t len = ::readlink(p.c_str(), buf.data(), buf.size());\n+      if (len == -1)\n+\t{\n+\t  ec.assign(errno, std::generic_category());\n+\t  return result;\n+\t}\n+      else if (len == (ssize_t)buf.size())\n+\t{\n+\t  if (buf.size() > 4096)\n+\t    {\n+\t      ec.assign(ENAMETOOLONG, std::generic_category());\n+\t      return result;\n+\t    }\n+\t  buf.resize(buf.size() * 2);\n+\t}\n+      else\n+\t{\n+\t  buf.resize(len);\n+\t  result.assign(buf);\n+\t  ec.clear();\n+\t  break;\n+\t}\n     }\n-  ec.clear();\n-  return path{buf.data(), buf.data()+len};\n+  while (true);\n #else\n   ec = std::make_error_code(std::errc::not_supported);\n-  return {};\n #endif\n+  return result;\n }\n \n "}, {"sha": "947be7ef4c568362095ab7e5ab7497a64d058da9", "filename": "libstdc++-v3/src/filesystem/std-ops.cc", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/220645d0193c21b4662b2800bc5d2de493832fd7/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/220645d0193c21b4662b2800bc5d2de493832fd7/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-ops.cc?ref=220645d0193c21b4662b2800bc5d2de493832fd7", "patch": "@@ -24,6 +24,7 @@\n \n #ifndef _GLIBCXX_USE_CXX11_ABI\n # define _GLIBCXX_USE_CXX11_ABI 1\n+# define NEED_DO_COPY_FILE\n #endif\n \n #include <filesystem>\n@@ -251,6 +252,7 @@ namespace std::filesystem\n }\n \n #ifdef _GLIBCXX_HAVE_SYS_STAT_H\n+#ifdef NEED_DO_COPY_FILE\n bool\n fs::do_copy_file(const char* from, const char* to,\n \t\t copy_options_existing_file options,\n@@ -423,6 +425,7 @@ fs::do_copy_file(const char* from, const char* to,\n   return true;\n #endif // _GLIBCXX_USE_SENDFILE\n }\n+#endif // NEED_DO_COPY_FILE\n #endif // _GLIBCXX_HAVE_SYS_STAT_H\n \n void\n@@ -1166,26 +1169,45 @@ fs::read_symlink(const path& p)\n \n fs::path fs::read_symlink(const path& p, error_code& ec)\n {\n+  path result;\n #ifdef _GLIBCXX_HAVE_SYS_STAT_H\n   stat_type st;\n   if (::lstat(p.c_str(), &st))\n     {\n       ec.assign(errno, std::generic_category());\n-      return {};\n+      return result;\n     }\n-  std::string buf(st.st_size, '\\0');\n-  ssize_t len = ::readlink(p.c_str(), &buf.front(), buf.size());\n-  if (len == -1)\n+  std::string buf(st.st_size ? st.st_size + 1 : 128, '\\0');\n+  do\n     {\n-      ec.assign(errno, std::generic_category());\n-      return {};\n+      ssize_t len = ::readlink(p.c_str(), buf.data(), buf.size());\n+      if (len == -1)\n+\t{\n+\t  ec.assign(errno, std::generic_category());\n+\t  return result;\n+\t}\n+      else if (len == (ssize_t)buf.size())\n+\t{\n+\t  if (buf.size() > 4096)\n+\t    {\n+\t      ec.assign(ENAMETOOLONG, std::generic_category());\n+\t      return result;\n+\t    }\n+\t  buf.resize(buf.size() * 2);\n+\t}\n+      else\n+\t{\n+\t  buf.resize(len);\n+\t  result.assign(buf);\n+\t  ec.clear();\n+\t  break;\n+\t}\n     }\n-  ec.clear();\n-  return path{buf.data(), buf.data()+len};\n+  while (true);\n #else\n   ec = std::make_error_code(std::errc::not_supported);\n-  return {};\n #endif\n+  return result;\n }\n \n fs::path"}]}