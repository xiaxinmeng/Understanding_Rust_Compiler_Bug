{"sha": "e2d457f192a36ad3968f077ce521523c8f716e96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJkNDU3ZjE5MmEzNmFkMzk2OGYwNzdjZTUyMTUyM2M4ZjcxNmU5Ng==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-01-11T18:19:22Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-01-11T18:19:22Z"}, "message": "i860-protos.h: New file.\n\n        * i860-protos.h: New file.\n\n        * i860.c: Include tm_p.h.  Add static prototypes.  Fix compile\n        time warnings.\n\n        * i860.h: Move prototypes to i860-protos.h.  Fix compile time warnings.\n\n        * i860.md: Likewise.\n\nFrom-SVN: r31330", "tree": {"sha": "392e8cd9f9f1b92d46621de48cb1f3becf35e49b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/392e8cd9f9f1b92d46621de48cb1f3becf35e49b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2d457f192a36ad3968f077ce521523c8f716e96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2d457f192a36ad3968f077ce521523c8f716e96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2d457f192a36ad3968f077ce521523c8f716e96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2d457f192a36ad3968f077ce521523c8f716e96/comments", "author": null, "committer": null, "parents": [{"sha": "f90800f836965874b1025412cd1690638edfce07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f90800f836965874b1025412cd1690638edfce07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f90800f836965874b1025412cd1690638edfce07"}], "stats": {"total": 171, "additions": 120, "deletions": 51}, "files": [{"sha": "7617e58ed4f1393d4aed8d0a4ac7461ddd2eed5e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2d457f192a36ad3968f077ce521523c8f716e96/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2d457f192a36ad3968f077ce521523c8f716e96/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2d457f192a36ad3968f077ce521523c8f716e96", "patch": "@@ -1,3 +1,14 @@\n+2000-01-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* i860-protos.h: New file.\n+\n+\t* i860.c: Include tm_p.h.  Add static prototypes.  Fix compile\n+\ttime warnings.\n+\t\n+\t* i860.h: Move prototypes to i860-protos.h.  Fix compile time warnings.\n+\t\n+\t* i860.md: Likewise.\n+\n Tue Jan 11 18:59:35 MET 2000  Jan Hubicka <jh@suse.cz>\n \n \t* i386.md (movstrsi expander): Rewrite."}, {"sha": "ac91f43c8c0ee5fd33645ed99abc0f62717791d6", "filename": "gcc/config/i860/i860-protos.h", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2d457f192a36ad3968f077ce521523c8f716e96/gcc%2Fconfig%2Fi860%2Fi860-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2d457f192a36ad3968f077ce521523c8f716e96/gcc%2Fconfig%2Fi860%2Fi860-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860-protos.h?ref=e2d457f192a36ad3968f077ce521523c8f716e96", "patch": "@@ -0,0 +1,64 @@\n+/* Definitions of target machine for GNU compiler, for Intel 860.\n+   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Hacked substantially by Ron Guilmette (rfg@monkeys.com) to cater to\n+   the whims of the System V Release 4 assembler.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Declare things which are defined in i860.c but called from\n+   insn-output.c.  */\n+\n+#ifdef RTX_CODE\n+extern unsigned long sfmode_constant_to_ulong PARAMS ((rtx));\n+extern const char *output_load PARAMS ((rtx *));\n+extern const char *output_store PARAMS ((rtx *));\n+extern const char *output_move_double PARAMS ((rtx *));\n+extern const char *output_fp_move_double PARAMS ((rtx *));\n+extern const char *output_block_move PARAMS ((rtx *));\n+extern const char *output_delay_insn PARAMS ((rtx));\n+#if 0\n+extern const char *output_delayed_branch PARAMS ((const char *, rtx *, rtx));\n+#endif\n+extern void output_load_address PARAMS ((rtx *));\n+extern int safe_insn_src_p PARAMS ((rtx, enum machine_mode));\n+extern int operand_clobbered_before_used_after PARAMS ((rtx, rtx));\n+extern int single_insn_src_p PARAMS ((rtx, enum machine_mode));\n+extern int reg_or_0_operand PARAMS ((rtx, enum machine_mode));\n+extern int arith_operand PARAMS ((rtx, enum machine_mode));\n+extern int logic_operand PARAMS ((rtx, enum machine_mode));\n+extern int shift_operand PARAMS ((rtx, enum machine_mode));\n+extern int compare_operand PARAMS ((rtx, enum machine_mode));\n+extern int bte_operand PARAMS ((rtx, enum machine_mode));\n+extern int indexed_operand PARAMS ((rtx, enum machine_mode));\n+extern int load_operand PARAMS ((rtx, enum machine_mode));\n+extern int small_int PARAMS ((rtx, enum machine_mode));\n+extern int logic_int PARAMS ((rtx, enum machine_mode));\n+extern int call_insn_operand PARAMS ((rtx, enum machine_mode));\n+extern rtx i860_saveregs PARAMS ((void));\n+#ifdef TREE_CODE\n+extern void i860_va_start PARAMS ((int, tree, rtx));\n+extern rtx i860_va_arg PARAMS ((tree, tree));\n+#endif /* TREE_CODE */\n+#endif /* RTX_CODE */\n+\n+#ifdef TREE_CODE\n+extern tree i860_build_va_list PARAMS ((void));\n+#endif /* TREE_CODE */\n+\n+extern void function_prologue PARAMS ((FILE *, unsigned));\n+extern void function_epilogue PARAMS ((FILE *, unsigned));"}, {"sha": "52570b13129ccc3424a64ced53a3bb51f6dd3382", "filename": "gcc/config/i860/i860.c", "status": "modified", "additions": 33, "deletions": 27, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2d457f192a36ad3968f077ce521523c8f716e96/gcc%2Fconfig%2Fi860%2Fi860.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2d457f192a36ad3968f077ce521523c8f716e96/gcc%2Fconfig%2Fi860%2Fi860.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.c?ref=e2d457f192a36ad3968f077ce521523c8f716e96", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for Intel 860\n-   Copyright (C) 1989, 91, 97, 98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 91, 97-99, 2000 Free Software Foundation, Inc.\n    Derived from sparc.c.\n \n    Written by Richard Stallman (rms@ai.mit.edu).\n@@ -41,14 +41,20 @@ Boston, MA 02111-1307, USA.  */\n #include \"insn-attr.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"tm_p.h\"\n \n-static rtx find_addr_reg ();\n+static rtx find_addr_reg PARAMS ((rtx));\n+static int reg_clobbered_p PARAMS ((rtx, rtx));\n+static const char *singlemove_string PARAMS ((rtx *));\n+static const char *load_opcode PARAMS ((enum machine_mode, const char *, rtx));\n+static const char *store_opcode PARAMS ((enum machine_mode, const char *, rtx));\n+static void output_size_for_block_move PARAMS ((rtx, rtx, rtx));\n \n #ifndef I860_REG_PREFIX\n #define I860_REG_PREFIX \"\"\n #endif\n \n-char *i860_reg_prefix = I860_REG_PREFIX;\n+const char *i860_reg_prefix = I860_REG_PREFIX;\n \n /* Save information from a \"cmpxx\" operation until the branch is emitted.  */\n \n@@ -454,7 +460,7 @@ load_operand (op, mode)\n int\n small_int (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT && SMALL_INT (op));\n }\n@@ -465,7 +471,7 @@ small_int (op, mode)\n int\n logic_int (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT && LOGIC_INT (op));\n }\n@@ -478,7 +484,7 @@ logic_int (op, mode)\n int\n call_insn_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) == MEM\n       && (CONSTANT_ADDRESS_P (XEXP (op, 0))\n@@ -493,7 +499,7 @@ call_insn_operand (op, mode)\n /* Return the best assembler insn template\n    for moving operands[1] into operands[0] as a fullword.  */\n \n-static char *\n+static const char *\n singlemove_string (operands)\n      rtx *operands;\n {\n@@ -566,7 +572,7 @@ singlemove_string (operands)\n /* Output assembler code to perform a doubleword move insn\n    with operands OPERANDS.  */\n \n-char *\n+const char *\n output_move_double (operands)\n      rtx *operands;\n {\n@@ -740,7 +746,7 @@ output_move_double (operands)\n   return \"\";\n }\n \f\n-char *\n+const char *\n output_fp_move_double (operands)\n      rtx *operands;\n {\n@@ -839,14 +845,14 @@ find_addr_reg (addr)\n \n    This string is in static storage.   */\n \n-static char *\n+static const char *\n load_opcode (mode, args, reg)\n      enum machine_mode mode;\n-     char *args;\n+     const char *args;\n      rtx reg;\n {\n   static char buf[30];\n-  char *opcode;\n+  const char *opcode;\n \n   switch (mode)\n     {\n@@ -886,14 +892,14 @@ load_opcode (mode, args, reg)\n \n    This string is in static storage.   */\n \n-static char *\n+static const char *\n store_opcode (mode, args, reg)\n      enum machine_mode mode;\n-     char *args;\n+     const char *args;\n      rtx reg;\n {\n   static char buf[30];\n-  char *opcode;\n+  const char *opcode;\n \n   switch (mode)\n     {\n@@ -937,13 +943,12 @@ store_opcode (mode, args, reg)\n    It may also output some insns directly.\n    It may alter the values of operands[0] and operands[1].  */\n \n-char *\n+const char *\n output_store (operands)\n      rtx *operands;\n {\n   enum machine_mode mode = GET_MODE (operands[0]);\n   rtx address = XEXP (operands[0], 0);\n-  char *string;\n \n   cc_status.flags |= CC_KNOW_HI_R31 | CC_HI_R31_ADJ;\n   cc_status.mdep = address;\n@@ -979,7 +984,7 @@ output_store (operands)\n    It may also output some insns directly.\n    It may alter the values of operands[0] and operands[1].  */\n \n-char *\n+const char *\n output_load (operands)\n      rtx *operands;\n {\n@@ -1131,16 +1136,18 @@ output_size_for_block_move (size, reg, align)\n    OPERANDS[3] is the known safe alignment.\n    OPERANDS[4..6] are pseudos we can safely clobber as temps.  */\n \n-char *\n+const char *\n output_block_move (operands)\n      rtx *operands;\n {\n   /* A vector for our computed operands.  Note that load_output_address\n      makes use of (and can clobber) up to the 8th element of this vector.  */\n   rtx xoperands[10];\n+#if 0\n   rtx zoperands[10];\n+#endif\n   static int movstrsi_label = 0;\n-  int i, j;\n+  int i;\n   rtx temp1 = operands[4];\n   rtx alignrtx = operands[3];\n   int align = INTVAL (alignrtx);\n@@ -1350,9 +1357,9 @@ output_block_move (operands)\n    constrain_operands to segfault.  Anyone who cares should fix up\n    the code to use the DBR pass.  */\n \n-char *\n+const char *\n output_delayed_branch (template, operands, insn)\n-     char *template;\n+     const char *template;\n      rtx *operands;\n      rtx insn;\n {\n@@ -1391,7 +1398,7 @@ output_delayed_branch (template, operands, insn)\n \t       && CONSTANT_ADDRESS_P (XEXP (dest, 0))))\n     {\n       rtx xoperands[2];\n-      char *split_template;\n+      const char *split_template;\n       xoperands[0] = dest;\n       xoperands[1] = src;\n \n@@ -1464,11 +1471,11 @@ output_delayed_branch (template, operands, insn)\n }\n \n /* Output a newly constructed insn DELAY_INSN.  */\n-char *\n+const char *\n output_delay_insn (delay_insn)\n      rtx delay_insn;\n {\n-  char *template;\n+  const char *template;\n   int insn_code_number;\n   int i;\n \n@@ -1642,7 +1649,6 @@ sfmode_constant_to_ulong (x)\n #endif\n \n extern char call_used_regs[];\n-extern int leaf_function_p ();\n \n char *current_function_original_name;\n \n@@ -2035,7 +2041,7 @@ function_epilogue (asm_file, local_bytes)\n       fprintf (asm_file, \"\\tfld.l %d(%sfp),%s%s\\n\",\n \tmust_preserve_bytes + (4 * restored_so_far++),\n \ti860_reg_prefix, i860_reg_prefix, reg_names[i]);\n-      if (i > 33 & i < 40)\n+      if (i > 33 && i < 40)\n \tflags->fregs |= mask;\n     }\n     if (i > 33 && i < 40)"}, {"sha": "b96defe024cac3d65b5ef0ce878fe49d44cde0ee", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2d457f192a36ad3968f077ce521523c8f716e96/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2d457f192a36ad3968f077ce521523c8f716e96/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=e2d457f192a36ad3968f077ce521523c8f716e96", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for Intel 860.\n-   Copyright (C) 1989, 91, 93, 95-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 91, 93, 95-99, 2000 Free Software Foundation, Inc.\n    Hacked substantially by Ron Guilmette (rfg@monkeys.com) to cater to\n    the whims of the System V Release 4 assembler.\n \n@@ -1274,8 +1274,7 @@ do { ASM_OUTPUT_ALIGN ((FILE), 2);\t\t\t\t\t\\\n \t\t\"%\" in i860.c.\n */\n \n-extern char *i860_reg_prefix;\n-extern unsigned long sfmode_constant_to_ulong ();\n+extern const char *i860_reg_prefix;\n \n #define PRINT_OPERAND_PUNCT_VALID_P(CODE) ((CODE) == '?')\n \n@@ -1332,24 +1331,22 @@ extern unsigned long sfmode_constant_to_ulong ();\n   else if ((CODE) == 'r' && (X) == CONST0_RTX (GET_MODE (X)))\t\t\\\n     fprintf (FILE, \"%sf0\", i860_reg_prefix);\t\t\t\t\\\n   else if (GET_CODE (X) == CONST_DOUBLE)\t\t\t\t\\\n-    fprintf (FILE, \"0x%x\", sfmode_constant_to_ulong (X));\t\t\\\n+    fprintf (FILE, \"0x%lx\", sfmode_constant_to_ulong (X));\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     output_addr_const (FILE, X); }\n \f\n /* Print a memory address as an operand to reference that memory location.  */\n \n #define PRINT_OPERAND_ADDRESS(FILE, ADDR)  \\\n-{ register rtx base, index = 0;\t\t\t\t\t\\\n-  int offset = 0;\t\t\t\t\t\t\\\n-  register rtx addr = ADDR;\t\t\t\t\t\\\n+{ register rtx addr = ADDR;\t\t\t\t\t\\\n   if (GET_CODE (addr) == REG)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       fprintf (FILE, \"0(%s%s)\",\t\t\t\t\t\\\n \ti860_reg_prefix, reg_names[REGNO (addr)]);\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   else if (GET_CODE (addr) == CONST_DOUBLE\t\t\t\\\n             && GET_MODE (addr) == SFmode)\t\t\t\\\n-    fprintf (FILE, \"0x%x\", sfmode_constant_to_ulong (addr));\t\\\n+    fprintf (FILE, \"0x%lx\", sfmode_constant_to_ulong (addr));\t\\\n   else if (GET_CODE (addr) == PLUS)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       if ((GET_CODE (XEXP (addr, 0)) == CONST_INT)\t\t\\\n@@ -1433,18 +1430,3 @@ extern unsigned long sfmode_constant_to_ulong ();\n    hasn't been defined!  */\n \n extern struct rtx_def *i860_compare_op0, *i860_compare_op1;\n-\n-/* Declare things which are defined in i860.c but called from\n-   insn-output.c.  */\n-\n-extern unsigned long sfmode_constant_to_ulong ();\n-extern char *output_load ();\n-extern char *output_store ();\n-extern char *output_move_double ();\n-extern char *output_fp_move_double ();\n-extern char *output_block_move ();\n-extern char *output_delay_insn ();\n-#if 0\n-extern char *output_delayed_branch ();\n-#endif\n-extern void output_load_address ();"}, {"sha": "3579c5c55f3adaf11f43efa3a7ac3673bb952aab", "filename": "gcc/config/i860/i860.md", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2d457f192a36ad3968f077ce521523c8f716e96/gcc%2Fconfig%2Fi860%2Fi860.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2d457f192a36ad3968f077ce521523c8f716e96/gcc%2Fconfig%2Fi860%2Fi860.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.md?ref=e2d457f192a36ad3968f077ce521523c8f716e96", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for Intel 860 chip for GNU C compiler\n-;;  Copyright (C) 1989, 1990, 1997, 1998, 1999 Free Software Foundation, Inc.\n+;;  Copyright (C) 1989, 1990, 97-99, 2000 Free Software Foundation, Inc.\n \n ;; This file is part of GNU CC.\n \n@@ -1247,6 +1247,7 @@\n   \"*\n {\n   if (GET_CODE (operands[0]) == MEM)\n+  {\n     if (CONSTANT_ADDRESS_P (XEXP (operands[0], 0)))\n       {\n \tif (! ((cc_prev_status.flags & CC_KNOW_HI_R31)\n@@ -1262,6 +1263,7 @@\n       }\n     else\n       return \\\"st.b %1,%0\\\";\n+  }\n   return \\\"shl %?r0,%1,%0\\\";\n }\")\n \n@@ -1273,6 +1275,7 @@\n   \"*\n {\n   if (GET_CODE (operands[0]) == MEM)\n+  {\n     if (CONSTANT_ADDRESS_P (XEXP (operands[0], 0)))\n       {\n \tif (! ((cc_prev_status.flags & CC_KNOW_HI_R31)\n@@ -1288,6 +1291,7 @@\n       }\n     else\n       return \\\"st.b %1,%0\\\";\n+  }\n   return \\\"shl %?r0,%1,%0\\\";\n }\")\n \n@@ -1299,6 +1303,7 @@\n   \"*\n {\n   if (GET_CODE (operands[0]) == MEM)\n+  {\n     if (CONSTANT_ADDRESS_P (XEXP (operands[0], 0)))\n       {\n \tif (! ((cc_prev_status.flags & CC_KNOW_HI_R31)\n@@ -1314,6 +1319,7 @@\n       }\n     else\n       return \\\"st.s %1,%0\\\";\n+  }\n   return \\\"shl %?r0,%1,%0\\\";\n }\")\n \f"}]}