{"sha": "c7c7dd3a1ded3f8bcdbfb352277246a521108710", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdjN2RkM2ExZGVkM2Y4YmNkYmZiMzUyMjc3MjQ2YTUyMTEwODcxMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-06-23T10:49:04Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-16T07:31:15Z"}, "message": "[Ada] Add Max_Integer_Size attribute and couple of helper functions\n\ngcc/ada/\n\n\t* doc/gnat_rm/implementation_defined_attributes.rst: Document the\n\tnew Max_Integer_Size attribute.\n\t* gnat_rm.texi: Regenerate.\n\t* exp_attr.adb (Get_Integer_Type): Call Small_Integer_Type_For.\n\t(Expand_N_Attribute_Reference) <Attribute_Pred>: Replace selection\n\tcode with call to Integer_Type_For.\n\t<Attribute_Succ>: Likewise.\n\t<Attribute_Val>: Likewise.\n\t<Attribute_Valid>: Likewise.\n\t<Attribute_Max_Integer_Size>: Raise Program_Error.\n\t* exp_ch3.adb (Expand_Freeze_Enumeration_Type): Replace selection\n\tcode with call to Integer_Type_For.\n\t(Simple_Init_Initialize_Scalars_Type): Use Long_Long_Unsigned and\n\tSystem_Max_Integer_Size to size the largest integer type.\n\t* exp_pakd.adb (Compute_Linear_Subscript): Minor tweak.\n\t(Create_Packed_Array_Impl_Type): Use Small_Integer_Type_For.\n\t* exp_util.ads (Integer_Type_For): New function.\n\t(Small_Integer_Type_For): Likewise.\n\t* exp_util.adb (Adjust_Condition): Use Integer_Type_For.\n\t(Component_May_Be_Bit_Aligned): Use System_Max_Integer_Size.\n\t(Integer_Type_For): New function.\n\t(Small_Integer_Type_For): Likewise.\n\t(Matching_Standard_Type): Use Small_Integer_Type_For.\n\t(Needs_Constant_Address): Replace 64 with System_Max_Integer_Size.\n\t* freeze.adb (Set_Small_Size): Likewise.\n\t(Size_Known): Likewise.\n\t(Check_Suspicious_Modulus): Likewise.\n\t(Check_Large_Modular_Array): Likewise.\n\t(Freeze_Entity): Likewise.\n\t* layout.adb (Layout_Type): Likewise.\n\t* sem_aggr.adb: Add with and use clauses for Ttypes.\n\t(Resolve_Aggregate): Replace 64 with System_Max_Integer_Size.\n\t* sem_attr.ads (Attribute_Impl_Def): Add Attribute_Max_Integer_Size.\n\t* sem_attr.adb (Analyze_Attribute) <Attribute_Max_Integer_Size>: New\n\t(Eval_Attribute): Likewise.\n\t* sem_ch13.adb (Adjust_Record_For_Reverse_Bit_Order): Change max\n\tscalar size to System_Max_Integer_Size.\n\t(Check_Array_Type): Replace 64 with System_Max_Integer_Size and\n\tremove superfluous test.\n\t(OK_Component): Likewise.\n\t* sem_ch5.adb: Add with and use clauses for Ttypes.\n\t(Analyze_Assignment): Replace 64 with System_Max_Integer_Size.\n\t* snames.ads-tmpl (Name_Max_Integer_Size): New attribute name.\n\t(Attribute_Id): Add Attribute_Max_Integer_Size.\n\t* ttypes.ads (System_Max_Integer_Size): New constant.", "tree": {"sha": "3cee854425c54f59389e7c436adcdaad865cfe96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cee854425c54f59389e7c436adcdaad865cfe96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7c7dd3a1ded3f8bcdbfb352277246a521108710", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7c7dd3a1ded3f8bcdbfb352277246a521108710", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7c7dd3a1ded3f8bcdbfb352277246a521108710", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7c7dd3a1ded3f8bcdbfb352277246a521108710/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "429ad0bb0d3dc77e44f95620341da4938d49168e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/429ad0bb0d3dc77e44f95620341da4938d49168e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/429ad0bb0d3dc77e44f95620341da4938d49168e"}], "stats": {"total": 1356, "additions": 682, "deletions": 674}, "files": [{"sha": "f98a4274b4b8eb9cb42b4de1faddce9ebf04fe9e", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_attributes.rst", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst?ref=c7c7dd3a1ded3f8bcdbfb352277246a521108710", "patch": "@@ -657,6 +657,14 @@ target.  This is a static value that can be used to specify the alignment\n for an object, guaranteeing that it is properly aligned in all\n cases.\n \n+Attribute Max_Integer_Size\n+==========================\n+.. index:: Max_Integer_Size\n+\n+``Standard'Max_Integer_Size`` (``Standard`` is the only permissible\n+prefix) provides the size of the largest supported integer type for\n+the target. The result is a static constant.\n+\n Attribute Mechanism_Code\n ========================\n .. index:: Return values, passing mechanism"}, {"sha": "75915a9d3a4143347a4b6c1b2288d77135eb9115", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 23, "deletions": 86, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=c7c7dd3a1ded3f8bcdbfb352277246a521108710", "patch": "@@ -1824,27 +1824,13 @@ package body Exp_Attr is\n \n       function Get_Integer_Type (Typ : Entity_Id) return Entity_Id is\n          Siz     : constant Uint := Esize (Base_Type (Typ));\n-         Int_Typ : Entity_Id;\n \n       begin\n          --  We need to accommodate invalid values of the base type since we\n          --  accept them for Enum_Rep and Pos, so we reason on the Esize. And\n          --  we use an unsigned type since the enumeration type is unsigned.\n \n-         if Siz <= Esize (Standard_Short_Short_Unsigned) then\n-            Int_Typ := Standard_Short_Short_Unsigned;\n-\n-         elsif Siz <= Esize (Standard_Short_Unsigned) then\n-            Int_Typ := Standard_Short_Unsigned;\n-\n-         elsif Siz <= Esize (Standard_Unsigned) then\n-            Int_Typ := Standard_Unsigned;\n-\n-         else\n-            Int_Typ := Standard_Long_Long_Unsigned;\n-         end if;\n-\n-         return Int_Typ;\n+         return Small_Integer_Type_For (Siz, Uns => True);\n       end Get_Integer_Type;\n \n       ---------------------------------\n@@ -5274,7 +5260,6 @@ package body Exp_Attr is\n \n       when Attribute_Pred => Pred : declare\n          Etyp : constant Entity_Id := Base_Type (Ptyp);\n-         Ityp : Entity_Id;\n \n       begin\n          --  For enumeration types with non-standard representations, we\n@@ -5294,26 +5279,14 @@ package body Exp_Attr is\n                   Expand_Pred_Succ_Attribute (N);\n                end if;\n \n-               if Is_Unsigned_Type (Etyp) then\n-                  if Esize (Typ) <= Standard_Integer_Size then\n-                     Ityp := RTE (RE_Unsigned);\n-                  else\n-                     Ityp := RTE (RE_Long_Long_Unsigned);\n-                  end if;\n-\n-               else\n-                  if Esize (Etyp) <= Standard_Integer_Size then\n-                     Ityp := Standard_Integer;\n-                  else\n-                     Ityp := Standard_Long_Long_Integer;\n-                  end if;\n-               end if;\n-\n                Rewrite (N,\n                  Unchecked_Convert_To (Etyp,\n                     Make_Op_Subtract (Loc,\n                        Left_Opnd  =>\n-                         Unchecked_Convert_To (Ityp, First (Exprs)),\n+                         Unchecked_Convert_To (\n+                           Integer_Type_For\n+                             (Esize (Etyp), Is_Unsigned_Type (Etyp)),\n+                           First (Exprs)),\n                        Right_Opnd =>\n                          Make_Integer_Literal (Loc, 1))));\n \n@@ -6352,7 +6325,6 @@ package body Exp_Attr is\n \n       when Attribute_Succ => Succ : declare\n          Etyp : constant Entity_Id := Base_Type (Ptyp);\n-         Ityp : Entity_Id;\n \n       begin\n          --  For enumeration types with non-standard representations, we\n@@ -6372,26 +6344,14 @@ package body Exp_Attr is\n                   Expand_Pred_Succ_Attribute (N);\n                end if;\n \n-               if Is_Unsigned_Type (Etyp) then\n-                  if Esize (Typ) <= Standard_Integer_Size then\n-                     Ityp := RTE (RE_Unsigned);\n-                  else\n-                     Ityp := RTE (RE_Long_Long_Unsigned);\n-                  end if;\n-\n-               else\n-                  if Esize (Etyp) <= Standard_Integer_Size then\n-                     Ityp := Standard_Integer;\n-                  else\n-                     Ityp := Standard_Long_Long_Integer;\n-                  end if;\n-               end if;\n-\n                Rewrite (N,\n                  Unchecked_Convert_To (Etyp,\n                     Make_Op_Add (Loc,\n                        Left_Opnd  =>\n-                         Unchecked_Convert_To (Ityp, First (Exprs)),\n+                         Unchecked_Convert_To (\n+                           Integer_Type_For\n+                             (Esize (Etyp), Is_Unsigned_Type (Etyp)),\n+                           First (Exprs)),\n                        Right_Opnd =>\n                          Make_Integer_Literal (Loc, 1))));\n \n@@ -6675,7 +6635,6 @@ package body Exp_Attr is\n       when Attribute_Val => Val : declare\n          Etyp : constant Entity_Id := Base_Type (Ptyp);\n          Expr : constant Node_Id := First (Exprs);\n-         Ityp : Entity_Id;\n          Rtyp : Entity_Id;\n \n       begin\n@@ -6727,29 +6686,17 @@ package body Exp_Attr is\n                --  Contiguous non-standard enumeration type\n \n                if Present (Enum_Pos_To_Rep (Etyp)) then\n-                  if Is_Unsigned_Type (Etyp) then\n-                     if Esize (Typ) <= Standard_Integer_Size then\n-                        Ityp := RTE (RE_Unsigned);\n-                     else\n-                        Ityp := RTE (RE_Long_Long_Unsigned);\n-                     end if;\n-\n-                  else\n-                     if Esize (Etyp) <= Standard_Integer_Size then\n-                        Ityp := Standard_Integer;\n-                     else\n-                        Ityp := Standard_Long_Long_Integer;\n-                     end if;\n-                  end if;\n-\n                   Rewrite (N,\n                     Unchecked_Convert_To (Etyp,\n                       Make_Op_Add (Loc,\n                         Left_Opnd =>\n                           Make_Integer_Literal (Loc,\n                             Enumeration_Rep (First_Literal (Etyp))),\n                         Right_Opnd =>\n-                          Convert_To (Ityp, Expr))));\n+                          Unchecked_Convert_To (\n+                            Integer_Type_For\n+                              (Esize (Etyp), Is_Unsigned_Type (Etyp)),\n+                            Expr))));\n \n                --  Standard enumeration type\n \n@@ -7129,27 +7076,16 @@ package body Exp_Attr is\n          --  correct, even though a value greater than 127 looks signed to a\n          --  signed comparison.\n \n-         elsif Is_Unsigned_Type (Ptyp)\n-           or else (Is_Private_Type (Ptyp) and then Is_Unsigned_Type (Btyp))\n-         then\n-            if Esize (Ptyp) <= 32 then\n-               PBtyp := RTE (RE_Unsigned_32);\n-            else\n-               PBtyp := RTE (RE_Unsigned_64);\n-            end if;\n-\n-            Rewrite (N, Make_Range_Test);\n-\n-         --  Signed types\n-\n          else\n-            if Esize (Ptyp) <= Esize (Standard_Integer) then\n-               PBtyp := Standard_Integer;\n-            else\n-               PBtyp := Standard_Long_Long_Integer;\n-            end if;\n-\n-            Rewrite (N, Make_Range_Test);\n+            declare\n+               Uns : constant Boolean\n+                       := Is_Unsigned_Type (Ptyp)\n+                            or else (Is_Private_Type (Ptyp)\n+                                      and then Is_Unsigned_Type (Btyp));\n+            begin\n+               PBtyp := Integer_Type_For (Esize (Ptyp), Uns);\n+               Rewrite (N, Make_Range_Test);\n+            end;\n          end if;\n \n          --  If a predicate is present, then we do the predicate test, even if\n@@ -7599,6 +7535,7 @@ package body Exp_Attr is\n          | Attribute_Machine_Radix\n          | Attribute_Machine_Rounds\n          | Attribute_Max_Alignment_For_Allocation\n+         | Attribute_Max_Integer_Size\n          | Attribute_Maximum_Alignment\n          | Attribute_Model_Emin\n          | Attribute_Model_Epsilon"}, {"sha": "b5b86d8803fb73af854bc74311eeee315609f6f6", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=c7c7dd3a1ded3f8bcdbfb352277246a521108710", "patch": "@@ -5095,32 +5095,15 @@ package body Exp_Ch3 is\n \n       --  Is this right??? What about No_Exception_Propagation???\n \n-      --  Representations are signed\n+      --  The underlying type is signed. Reset the Is_Unsigned_Type explicitly\n+      --  because it might have been inherited from the parent type.\n \n       if Enumeration_Rep (First_Literal (Typ)) < 0 then\n-\n-         --  The underlying type is signed. Reset the Is_Unsigned_Type\n-         --  explicitly, because it might have been inherited from\n-         --  parent type.\n-\n          Set_Is_Unsigned_Type (Typ, False);\n-\n-         if Esize (Typ) <= Standard_Integer_Size then\n-            Ityp := Standard_Integer;\n-         else\n-            Ityp := Standard_Long_Long_Integer;\n-         end if;\n-\n-      --  Representations are unsigned\n-\n-      else\n-         if Esize (Typ) <= Standard_Integer_Size then\n-            Ityp := RTE (RE_Unsigned);\n-         else\n-            Ityp := RTE (RE_Long_Long_Unsigned);\n-         end if;\n       end if;\n \n+      Ityp := Integer_Type_For (Esize (Typ), Is_Unsigned_Type (Typ));\n+\n       --  The body of the function is a case statement. First collect case\n       --  alternatives, or optimize the contiguous case.\n \n@@ -8647,10 +8630,10 @@ package body Exp_Ch3 is\n          then\n             Expr := Make_Integer_Literal (Loc, 2 ** Size_To_Use - 1);\n \n-            --  Resolve as Unsigned_64, because the largest number we can\n-            --  generate is out of range of universal integer.\n+            --  Resolve as Long_Long_Unsigned, because the largest number\n+            --  we can generate is out of range of universal integer.\n \n-            Analyze_And_Resolve (Expr, RTE (RE_Unsigned_64));\n+            Analyze_And_Resolve (Expr, Standard_Long_Long_Unsigned);\n \n          --  Case of signed types\n \n@@ -8737,11 +8720,14 @@ package body Exp_Ch3 is\n             Size_To_Use := Size;\n          end if;\n \n-         --  The maximum size to use is 64 bits. This will create values of\n-         --  type Unsigned_64 and the range must fit this type.\n+         --  The maximum size to use is System_Max_Integer_Size bits. This\n+         --  will create values of type Long_Long_Unsigned and the range\n+         --  must fit this type.\n \n-         if Size_To_Use /= No_Uint and then Size_To_Use > Uint_64 then\n-            Size_To_Use := Uint_64;\n+         if Size_To_Use /= No_Uint\n+           and then Size_To_Use > System_Max_Integer_Size\n+         then\n+            Size_To_Use := UI_From_Int (System_Max_Integer_Size);\n          end if;\n \n          if Normalize_Scalars and then not IV_Attribute then"}, {"sha": "c620caaca7ae5eef9ec10f805c846a043c96e45a", "filename": "gcc/ada/exp_pakd.adb", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fexp_pakd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fexp_pakd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.adb?ref=c7c7dd3a1ded3f8bcdbfb352277246a521108710", "patch": "@@ -316,7 +316,7 @@ package body Exp_Pakd is\n \n             --  Integer (subscript) - Integer (Styp'First)\n \n-            if Esize (Styp) < Esize (Standard_Integer) then\n+            if Esize (Styp) < Standard_Integer_Size then\n                Newsub :=\n                  Make_Op_Subtract (Loc,\n                    Left_Opnd => Convert_To (Standard_Integer, Newsub),\n@@ -917,22 +917,7 @@ package body Exp_Pakd is\n                --  The bounds are statically known, and btyp is one of the\n                --  unsigned types, depending on the length.\n \n-               if Len_Bits <= Standard_Short_Short_Integer_Size then\n-                  Btyp := RTE (RE_Short_Short_Unsigned);\n-\n-               elsif Len_Bits <= Standard_Short_Integer_Size then\n-                  Btyp := RTE (RE_Short_Unsigned);\n-\n-               elsif Len_Bits <= Standard_Integer_Size then\n-                  Btyp := RTE (RE_Unsigned);\n-\n-               elsif Len_Bits <= Standard_Long_Integer_Size then\n-                  Btyp := RTE (RE_Long_Unsigned);\n-\n-               else\n-                  Btyp := RTE (RE_Long_Long_Unsigned);\n-               end if;\n-\n+               Btyp := Small_Integer_Type_For (Len_Bits, Uns => True);\n                Lit := Make_Integer_Literal (Loc, 2 ** Len_Bits - 1);\n                Set_Print_In_Hex (Lit);\n "}, {"sha": "b5edb2d5a5550de4330f9797a1b52da14e9248eb", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 96, "deletions": 50, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=c7c7dd3a1ded3f8bcdbfb352277246a521108710", "patch": "@@ -325,7 +325,6 @@ package body Exp_Util is\n       declare\n          Loc : constant Source_Ptr := Sloc (N);\n          T   : constant Entity_Id  := Etype (N);\n-         Ti  : Entity_Id;\n \n       begin\n          --  Defend against a call where the argument has no type, or has a\n@@ -357,15 +356,11 @@ package body Exp_Util is\n          --  value of type T.\n \n          if Nonzero_Is_True (T) or else Has_Non_Standard_Rep (T) then\n-            if Esize (T) <= Esize (Standard_Integer) then\n-               Ti := Standard_Integer;\n-            else\n-               Ti := Standard_Long_Long_Integer;\n-            end if;\n-\n             Rewrite (N,\n               Make_Op_Ne (Loc,\n-                Left_Opnd  => Unchecked_Convert_To (Ti, N),\n+                Left_Opnd  =>\n+                  Unchecked_Convert_To\n+                    (Integer_Type_For (Esize (T), Uns => False), N),\n                 Right_Opnd =>\n                   Make_Attribute_Reference (Loc,\n                     Attribute_Name => Name_Enum_Rep,\n@@ -4574,11 +4569,11 @@ package body Exp_Util is\n       if not Is_Record_Type (UT) and then not Is_Array_Type (UT) then\n          return False;\n \n-      --  If we know that we have a small (64 bits or less) record or small\n-      --  bit-packed array, then everything is fine, since the back end can\n-      --  handle these cases correctly.\n+      --  If we know that we have a small (at most the maximum integer size)\n+      --  record or bit-packed array, then everything is fine, since the back\n+      --  end can handle these cases correctly.\n \n-      elsif Esize (Comp) <= 64\n+      elsif Esize (Comp) <= System_Max_Integer_Size\n         and then (Is_Record_Type (UT) or else Is_Bit_Packed_Array (UT))\n       then\n          return False;\n@@ -7727,6 +7722,37 @@ package body Exp_Util is\n       return Proc /= Empty;\n    end Inside_Init_Proc;\n \n+   ----------------------\n+   -- Integer_Type_For --\n+   ----------------------\n+\n+   function Integer_Type_For (S : Uint; Uns : Boolean) return Entity_Id is\n+   begin\n+      pragma Assert (S <= System_Max_Integer_Size);\n+\n+      --  This is the canonical 32-bit type\n+\n+      if S <= Standard_Integer_Size then\n+         if Uns then\n+            return Standard_Unsigned;\n+         else\n+            return Standard_Integer;\n+         end if;\n+\n+      --  This is the canonical 64-bit type\n+\n+      elsif S <= Standard_Long_Long_Integer_Size then\n+         if Uns then\n+            return Standard_Long_Long_Unsigned;\n+         else\n+            return Standard_Long_Long_Integer;\n+         end if;\n+\n+      else\n+         raise Program_Error;\n+      end if;\n+   end Integer_Type_For;\n+\n    ----------------------------\n    -- Is_All_Null_Statements --\n    ----------------------------\n@@ -10554,37 +10580,8 @@ package body Exp_Util is\n \n       --  Unsigned integer cases (includes normal enumeration types)\n \n-      elsif Is_Unsigned_Type (Typ) then\n-         if Siz <= Esize (Standard_Short_Short_Unsigned) then\n-            return Standard_Short_Short_Unsigned;\n-         elsif Siz <= Esize (Standard_Short_Unsigned) then\n-            return Standard_Short_Unsigned;\n-         elsif Siz <= Esize (Standard_Unsigned) then\n-            return Standard_Unsigned;\n-         elsif Siz <= Esize (Standard_Long_Unsigned) then\n-            return Standard_Long_Unsigned;\n-         elsif Siz <= Esize (Standard_Long_Long_Unsigned) then\n-            return Standard_Long_Long_Unsigned;\n-         else\n-            raise Program_Error;\n-         end if;\n-\n-      --  Signed integer cases\n-\n       else\n-         if Siz <= Esize (Standard_Short_Short_Integer) then\n-            return Standard_Short_Short_Integer;\n-         elsif Siz <= Esize (Standard_Short_Integer) then\n-            return Standard_Short_Integer;\n-         elsif Siz <= Esize (Standard_Integer) then\n-            return Standard_Integer;\n-         elsif Siz <= Esize (Standard_Long_Integer) then\n-            return Standard_Long_Integer;\n-         elsif Siz <= Esize (Standard_Long_Long_Integer) then\n-            return Standard_Long_Long_Integer;\n-         else\n-            raise Program_Error;\n-         end if;\n+         return Small_Integer_Type_For (Siz, Is_Unsigned_Type (Typ));\n       end if;\n    end Matching_Standard_Type;\n \n@@ -10645,9 +10642,9 @@ package body Exp_Util is\n       --  initialization, or the object is imported.\n \n       --  The same holds for all initialized scalar types and all access types.\n-      --  Packed bit arrays of size up to 64 are represented using a modular\n-      --  type with an initialization (to zero) and can be processed like other\n-      --  initialized scalar types.\n+      --  Packed bit array types of size up to the maximum integer size are\n+      --  represented using a modular type with an initialization (to zero) and\n+      --  can be processed like other initialized scalar types.\n \n       --  If the type is controlled, code to attach the object to a\n       --  finalization chain is generated at the point of declaration, and\n@@ -10841,12 +10838,12 @@ package body Exp_Util is\n                Ptyp : constant Entity_Id := Etype (P);\n \n             begin\n-               --  If we know the component size and it is not larger than 64,\n-               --  then we are definitely OK. The back end does the assignment\n-               --  of misaligned small objects correctly.\n+               --  If we know the component size and it is not larger than the\n+               --  maximum integer size, then we are OK. The back end does the\n+               --  assignment of small misaligned objects correctly.\n \n                if Known_Static_Component_Size (Ptyp)\n-                 and then Component_Size (Ptyp) <= 64\n+                 and then Component_Size (Ptyp) <= System_Max_Integer_Size\n                then\n                   return False;\n \n@@ -11369,7 +11366,7 @@ package body Exp_Util is\n       elsif (Is_Elementary_Type (Exp_Type)\n               or else (Is_Record_Type (Exp_Type)\n                         and then Known_Static_RM_Size (Exp_Type)\n-                        and then RM_Size (Exp_Type) <= 64\n+                        and then RM_Size (Exp_Type) <= System_Max_Integer_Size\n                         and then not Has_Discriminants (Exp_Type)\n                         and then not Is_By_Reference_Type (Exp_Type)))\n         and then (Variable_Ref\n@@ -13521,6 +13518,55 @@ package body Exp_Util is\n           Reason    => CE_Range_Check_Failed));\n    end Silly_Boolean_Array_Xor_Test;\n \n+   ----------------------------\n+   -- Small_Integer_Type_For --\n+   ----------------------------\n+\n+   function Small_Integer_Type_For (S : Uint; Uns : Boolean) return Entity_Id\n+   is\n+   begin\n+      pragma Assert (S <= System_Max_Integer_Size);\n+\n+      if S <= Standard_Short_Short_Integer_Size then\n+         if Uns then\n+            return Standard_Short_Short_Unsigned;\n+         else\n+            return Standard_Short_Short_Integer;\n+         end if;\n+\n+      elsif S <= Standard_Short_Integer_Size then\n+         if Uns then\n+            return Standard_Short_Unsigned;\n+         else\n+            return Standard_Short_Integer;\n+         end if;\n+\n+      elsif S <= Standard_Integer_Size then\n+         if Uns then\n+            return Standard_Unsigned;\n+         else\n+            return Standard_Integer;\n+         end if;\n+\n+      elsif S <= Standard_Long_Integer_Size then\n+         if Uns then\n+            return Standard_Long_Unsigned;\n+         else\n+            return Standard_Long_Integer;\n+         end if;\n+\n+      elsif S <= Standard_Long_Long_Integer_Size then\n+         if Uns then\n+            return Standard_Long_Long_Unsigned;\n+         else\n+            return Standard_Long_Long_Integer;\n+         end if;\n+\n+      else\n+         raise Program_Error;\n+      end if;\n+   end Small_Integer_Type_For;\n+\n    --------------------------\n    -- Target_Has_Fixed_Ops --\n    --------------------------"}, {"sha": "545e2dabf4e4a0e0b075e5e2a17f952b481ce705", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=c7c7dd3a1ded3f8bcdbfb352277246a521108710", "patch": "@@ -761,6 +761,10 @@ package Exp_Util is\n    --  unconditionally executed, i.e. it is not within a loop or a conditional\n    --  or a case statement etc.\n \n+   function Integer_Type_For (S : Uint; Uns : Boolean) return Entity_Id;\n+   --  Return a suitable standard integer type containing at least S bits and\n+   --  of the signedness given by Uns.\n+\n    function Is_All_Null_Statements (L : List_Id) return Boolean;\n    --  Return True if all the items of the list are N_Null_Statement nodes.\n    --  False otherwise. True for an empty list. It is an error to call this\n@@ -1165,6 +1169,10 @@ package Exp_Util is\n    --  True..True, where a raise of a Constraint_Error exception is required\n    --  (RM 4.5.6(6)) and ACATS-tested.\n \n+   function Small_Integer_Type_For (S : Uint; Uns : Boolean) return Entity_Id;\n+   --  Return the smallest standard integer type containing at least S bits and\n+   --  of the signedness given by Uns.\n+\n    function Target_Has_Fixed_Ops\n      (Left_Typ   : Entity_Id;\n       Right_Typ  : Entity_Id;"}, {"sha": "248009e87ed32629d87645b0659d1d3c021d17c7", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=c7c7dd3a1ded3f8bcdbfb352277246a521108710", "patch": "@@ -758,9 +758,8 @@ package body Freeze is\n    procedure Check_Compile_Time_Size (T : Entity_Id) is\n \n       procedure Set_Small_Size (T : Entity_Id; S : Uint);\n-      --  Sets the compile time known size (64 bits or less) in the RM_Size\n-      --  field of T, checking for a size clause that was given which attempts\n-      --  to give a smaller size.\n+      --  Sets the compile time known size in the RM_Size field of T, checking\n+      --  for a size clause that was given which attempts to give a small size.\n \n       function Size_Known (T : Entity_Id) return Boolean;\n       --  Recursive function that does all the work\n@@ -778,7 +777,7 @@ package body Freeze is\n \n       procedure Set_Small_Size (T : Entity_Id; S : Uint) is\n       begin\n-         if S > 64 then\n+         if S > System_Max_Integer_Size then\n             return;\n \n          --  Check for bad size clause given\n@@ -848,7 +847,8 @@ package body Freeze is\n             end if;\n \n             --  Check for all indexes static, and also compute possible size\n-            --  (in case it is not greater than 64 and may be packable).\n+            --  (in case it is not greater than System_Max_Integer_Size and\n+            --  thus may be packable).\n \n             declare\n                Size : Uint := Component_Size (T);\n@@ -1077,8 +1077,7 @@ package body Freeze is\n \n                      --  We can deal with elementary types, small packed arrays\n                      --  if the representation is a modular type and also small\n-                     --  record types (if the size is not greater than 64, but\n-                     --  the condition is checked by Set_Small_Size).\n+                     --  record types as checked by Set_Small_Size.\n \n                      if Is_Elementary_Type (Ctyp)\n                        or else (Is_Array_Type (Ctyp)\n@@ -2831,7 +2830,7 @@ package body Freeze is\n \n                --  Case of component size that may result in bit packing\n \n-               if 1 <= Csiz and then Csiz <= 64 then\n+               if 1 <= Csiz and then Csiz <= System_Max_Integer_Size then\n                   declare\n                      Ent         : constant Entity_Id :=\n                                      First_Subtype (Arr);\n@@ -3177,9 +3176,9 @@ package body Freeze is\n          procedure Check_Large_Modular_Array (Typ : Entity_Id);\n          --  Check that the size of array type Typ can be computed without\n          --  overflow, and generates a Storage_Error otherwise. This is only\n-         --  relevant for array types whose index is a (mod 2**64) type, where\n-         --  wrap-around arithmetic might yield a meaningless value for the\n-         --  length of the array, or its corresponding attribute.\n+         --  relevant for array types whose index has System_Max_Integer_Size\n+         --  bits, where wrap-around arithmetic might yield a meaningless value\n+         --  for the length of the array, or its corresponding attribute.\n \n          procedure Check_Pragma_Thread_Local_Storage (Var_Id : Entity_Id);\n          --  Ensure that the initialization state of variable Var_Id subject\n@@ -5810,7 +5809,7 @@ package body Freeze is\n                     and then not Has_Pragma_Pack (E)\n                     and then not Has_Component_Size_Clause (E)\n                     and then Known_Static_RM_Size (Ctyp)\n-                    and then Rsiz <= 64\n+                    and then Rsiz <= System_Max_Integer_Size\n                     and then not (Addressable (Rsiz)\n                                    and then Known_Static_Esize (Ctyp)\n                                    and then Esize (Ctyp) = Rsiz)"}, {"sha": "60a40f615831a45c127b4e7107859f91fa6e217c", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 476, "deletions": 463, "changes": 939, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=c7c7dd3a1ded3f8bcdbfb352277246a521108710"}, {"sha": "684fae67152b6b6ea977d3eb9c847ab4d68af34e", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=c7c7dd3a1ded3f8bcdbfb352277246a521108710", "patch": "@@ -378,12 +378,12 @@ package body Layout is\n                         Init_Esize (E, S);\n                         exit;\n \n-                     --  If the RM_Size is greater than 64 (happens only when\n-                     --  strange values are specified by the user, then Esize\n-                     --  is simply a copy of RM_Size, it will be further\n-                     --  refined later on)\n+                     --  If the RM_Size is greater than System_Max_Integer_Size\n+                     --  (happens only when strange values are specified by the\n+                     --  user), then Esize is simply a copy of RM_Size, it will\n+                     --  be further refined later on).\n \n-                     elsif S = 64 then\n+                     elsif S = System_Max_Integer_Size then\n                         Set_Esize (E, RM_Size (E));\n                         exit;\n "}, {"sha": "3ff5cea71665fdb957244455f850c2255181fbae", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=c7c7dd3a1ded3f8bcdbfb352277246a521108710", "patch": "@@ -63,6 +63,7 @@ with Stand;    use Stand;\n with Style;    use Style;\n with Targparm; use Targparm;\n with Tbuild;   use Tbuild;\n+with Ttypes;   use Ttypes;\n with Uintp;    use Uintp;\n \n package body Sem_Aggr is\n@@ -831,7 +832,8 @@ package body Sem_Aggr is\n \n       if not Support_Aggregates_On_Target\n         and then Comes_From_Source (N)\n-        and then (not Known_Static_Esize (Typ) or else Esize (Typ) > 64)\n+        and then (not Known_Static_Esize (Typ)\n+                   or else Esize (Typ) > System_Max_Integer_Size)\n       then\n          Error_Msg_CRT (\"aggregate\", N);\n       end if;"}, {"sha": "2890c0a424dddaac42888c76f5a92b806c599b66", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=c7c7dd3a1ded3f8bcdbfb352277246a521108710", "patch": "@@ -4755,6 +4755,13 @@ package body Sem_Attr is\n       when Attribute_Max_Size_In_Storage_Elements =>\n          Max_Alignment_For_Allocation_Max_Size_In_Storage_Elements;\n \n+      ----------------------\n+      -- Max_Integer_Size --\n+      ----------------------\n+\n+      when Attribute_Max_Integer_Size =>\n+         Standard_Attribute (System_Max_Integer_Size);\n+\n       ----------------------------------\n       -- Max_Size_In_Storage_Elements --\n       ----------------------------------\n@@ -10431,6 +10438,7 @@ package body Sem_Attr is\n          | Attribute_Initialized\n          | Attribute_Last_Bit\n          | Attribute_Library_Level\n+         | Attribute_Max_Integer_Size\n          | Attribute_Maximum_Alignment\n          | Attribute_Old\n          | Attribute_Output"}, {"sha": "5ccb1c1d15c7f159525e171964df64e8c038ea90", "filename": "gcc/ada/sem_attr.ads", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fsem_attr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fsem_attr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.ads?ref=c7c7dd3a1ded3f8bcdbfb352277246a521108710", "patch": "@@ -311,6 +311,16 @@ package Sem_Attr is\n       --  This attribute is identical to the Object_Size attribute. It is\n       --  provided for compatibility with the DEC attribute of this name.\n \n+      ----------------------\n+      -- Max_Integer_Size --\n+      ----------------------\n+\n+      Attribute_Max_Integer_Size => True,\n+      --  Standard'Max_Integer_Size (Standard is the only permissible prefix)\n+      --  provides values System.Min_Int and System.Max_Int, and is intended\n+      --  primarily for constructing these definitions in package System. This\n+      --  is a static attribute.\n+\n       -----------------------\n       -- Maximum_Alignment --\n       -----------------------"}, {"sha": "661dc5a9e62e01f8efe00a0c3edd56e2f5cbc81a", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=c7c7dd3a1ded3f8bcdbfb352277246a521108710", "patch": "@@ -390,8 +390,7 @@ package body Sem_Ch13 is\n \n    procedure Adjust_Record_For_Reverse_Bit_Order (R : Entity_Id) is\n       Max_Machine_Scalar_Size : constant Uint :=\n-                                  UI_From_Int\n-                                    (Standard_Long_Long_Integer_Size);\n+                                  UI_From_Int (System_Max_Integer_Size);\n       --  We use this as the maximum machine scalar size\n \n       SSU : constant Uint := UI_From_Int (System_Storage_Unit);\n@@ -15693,12 +15692,12 @@ package body Sem_Ch13 is\n             return;\n          end if;\n \n-         --  Case of component size is greater than or equal to 64 and the\n-         --  alignment of the array is at least as large as the alignment\n-         --  of the component. We are definitely OK in this situation.\n+         --  Case where component size is greater than or equal to the maximum\n+         --  integer size and the alignment of the array is at least as large\n+         --  as the alignment of the component. We are OK in this situation.\n \n          if Known_Component_Size (Atyp)\n-           and then Component_Size (Atyp) >= 64\n+           and then Component_Size (Atyp) >= System_Max_Integer_Size\n            and then Known_Alignment (Atyp)\n            and then Known_Alignment (Ctyp)\n            and then Alignment (Atyp) >= Alignment (Ctyp)\n@@ -15709,8 +15708,7 @@ package body Sem_Ch13 is\n          --  Check actual component size\n \n          if not Known_Component_Size (Atyp)\n-           or else not (Addressable (Component_Size (Atyp))\n-                         and then Component_Size (Atyp) < 64)\n+           or else not Addressable (Component_Size (Atyp))\n            or else Component_Size (Atyp) mod Esize (Ctyp) /= 0\n          then\n             No_Independence;\n@@ -15796,10 +15794,12 @@ package body Sem_Ch13 is\n             return False;\n          end if;\n \n-         --  Size of component must be addressable or greater than 64 bits\n-         --  and a multiple of bytes.\n+         --  Size of component must be addressable or greater than the maximum\n+         --  integer size and a multiple of bytes.\n \n-         if not Addressable (Esize (C)) and then Esize (C) < Uint_64 then\n+         if not Addressable (Esize (C))\n+           and then Esize (C) < System_Max_Integer_Size\n+         then\n             return False;\n          end if;\n "}, {"sha": "2afe18b122f1213b51964c4d33ebe5bf4c7861da", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=c7c7dd3a1ded3f8bcdbfb352277246a521108710", "patch": "@@ -59,6 +59,7 @@ with Stand;    use Stand;\n with Sinfo;    use Sinfo;\n with Targparm; use Targparm;\n with Tbuild;   use Tbuild;\n+with Ttypes;   use Ttypes;\n with Uintp;    use Uintp;\n \n package body Sem_Ch5 is\n@@ -1049,7 +1050,8 @@ package body Sem_Ch5 is\n \n       if not Support_Composite_Assign_On_Target\n         and then (Is_Array_Type (T1) or else Is_Record_Type (T1))\n-        and then (not Has_Size_Clause (T1) or else Esize (T1) > 64)\n+        and then (not Has_Size_Clause (T1)\n+                   or else Esize (T1) > Ttypes.System_Max_Integer_Size)\n       then\n          Error_Msg_CRT (\"composite assignment\", N);\n       end if;"}, {"sha": "b15d2208e6f4d148b76abfce7b49f3681e626cab", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=c7c7dd3a1ded3f8bcdbfb352277246a521108710", "patch": "@@ -983,6 +983,7 @@ package Snames is\n    Name_Machine_Size                   : constant Name_Id := N + $; -- GNAT\n    Name_Mantissa                       : constant Name_Id := N + $; -- Ada 83\n    Name_Max_Alignment_For_Allocation   : constant Name_Id := N + $; -- Ada 12\n+   Name_Max_Integer_Size               : constant Name_Id := N + $; -- GNAT\n    Name_Max_Size_In_Storage_Elements   : constant Name_Id := N + $;\n    Name_Maximum_Alignment              : constant Name_Id := N + $; -- GNAT\n    Name_Mechanism_Code                 : constant Name_Id := N + $; -- GNAT\n@@ -1676,6 +1677,7 @@ package Snames is\n       Attribute_Machine_Size,\n       Attribute_Mantissa,\n       Attribute_Max_Alignment_For_Allocation,\n+      Attribute_Max_Integer_Size,\n       Attribute_Max_Size_In_Storage_Elements,\n       Attribute_Maximum_Alignment,\n       Attribute_Mechanism_Code,"}, {"sha": "73c860ea83a059387813a78d13fd14502202295a", "filename": "gcc/ada/ttypes.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fttypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c7dd3a1ded3f8bcdbfb352277246a521108710/gcc%2Fada%2Fttypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fttypes.ads?ref=c7c7dd3a1ded3f8bcdbfb352277246a521108710", "patch": "@@ -176,6 +176,8 @@ package Ttypes is\n    System_Address_Size : constant Pos := Set_Targ.Pointer_Size;\n    --  System.Address'Size (also size of all thin pointers)\n \n+   System_Max_Integer_Size : constant Pos := Standard_Long_Long_Integer_Size;\n+\n    System_Max_Binary_Modulus_Power : constant Pos :=\n                                        Standard_Long_Long_Integer_Size;\n "}]}