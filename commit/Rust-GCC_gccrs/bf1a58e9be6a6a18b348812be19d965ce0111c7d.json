{"sha": "bf1a58e9be6a6a18b348812be19d965ce0111c7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYxYTU4ZTliZTZhNmExOGIzNDg4MTJiZTE5ZDk2NWNlMDExMWM3ZA==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2019-08-23T14:53:45Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2019-08-23T14:53:45Z"}, "message": "[ARM] Deprecate -mneon-for-64bits\n\nDeprecate -mneon-for-64bits since it no longer has any effect after\nthe DImode codegen improvements.\n\n    gcc/\n\t* gcc/doc/invoke.texi (mneon-for-64bits): Deprecate option.\n\t* gcc/config/arm/arm.opt (mneon-for-64bits): Deprecate option.\n\t* gcc/config/arm/arm.h (TARGET_PREFER_NEON_64BITS): Remove.\n\t(prefer_neon_for_64bits): Remove.\n\t* gcc/config/arm/arm.c (prefer_neon_for_64bits): Remove.\n\t(tune_params): Remove PREF_NEON_64_FALSE uses.\n\t(arm_option_override): Remove prefer_neon selection code.\n\t(arm_print_tune_info): Remove prefer_neon_for_64bits.\n\t* gcc/config/arm/arm-protos.h (tune_params): Remove\n\tprefer_neon_for_64bits.\n\t(prefer_neon_for_64bits): Remove.\n\nFrom-SVN: r274858", "tree": {"sha": "02ae070bb46c501c29ffce6287be1ebddffea1f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02ae070bb46c501c29ffce6287be1ebddffea1f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf1a58e9be6a6a18b348812be19d965ce0111c7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1a58e9be6a6a18b348812be19d965ce0111c7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf1a58e9be6a6a18b348812be19d965ce0111c7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1a58e9be6a6a18b348812be19d965ce0111c7d/comments", "author": null, "committer": null, "parents": [{"sha": "35a114dae14de7db983aba7e709dcad96405c14a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35a114dae14de7db983aba7e709dcad96405c14a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35a114dae14de7db983aba7e709dcad96405c14a"}], "stats": {"total": 71, "additions": 17, "deletions": 54}, "files": [{"sha": "3fbdb937f2197d533c75904c43526725471a799c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1a58e9be6a6a18b348812be19d965ce0111c7d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1a58e9be6a6a18b348812be19d965ce0111c7d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf1a58e9be6a6a18b348812be19d965ce0111c7d", "patch": "@@ -1,3 +1,17 @@\n+2019-08-23  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* gcc/doc/invoke.texi (mneon-for-64bits): Deprecate option.\n+\t* gcc/config/arm/arm.opt (mneon-for-64bits): Deprecate option.\n+\t* gcc/config/arm/arm.h (TARGET_PREFER_NEON_64BITS): Remove.\n+\t(prefer_neon_for_64bits): Remove.\n+\t* gcc/config/arm/arm.c (prefer_neon_for_64bits): Remove.\n+\t(tune_params): Remove PREF_NEON_64_FALSE uses.\n+\t(arm_option_override): Remove prefer_neon selection code.\n+\t(arm_print_tune_info): Remove prefer_neon_for_64bits.\n+\t* gcc/config/arm/arm-protos.h (tune_params): Remove\n+\tprefer_neon_for_64bits.\n+\t(prefer_neon_for_64bits): Remove.\n+\n 2019-08-23  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR pch/61250"}, {"sha": "8386d89fc0b955e85692f87fedd8710010ad2a35", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1a58e9be6a6a18b348812be19d965ce0111c7d/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1a58e9be6a6a18b348812be19d965ce0111c7d/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=bf1a58e9be6a6a18b348812be19d965ce0111c7d", "patch": "@@ -327,7 +327,6 @@ struct tune_params\n   /* Prefer 32-bit encoding instead of flag-setting 16-bit encoding.  */\n   enum {DISPARAGE_FLAGS_NEITHER, DISPARAGE_FLAGS_PARTIAL, DISPARAGE_FLAGS_ALL}\n     disparage_flag_setting_t16_encodings: 2;\n-  enum {PREF_NEON_64_FALSE, PREF_NEON_64_TRUE} prefer_neon_for_64bits: 1;\n   /* Prefer to inline string operations like memset by using Neon.  */\n   enum {PREF_NEON_STRINGOPS_FALSE, PREF_NEON_STRINGOPS_TRUE}\n     string_ops_prefer_neon: 1;\n@@ -472,10 +471,6 @@ extern int arm_arch_thumb_hwdiv;\n /* Nonzero if chip disallows volatile memory access in IT block.  */\n extern int arm_arch_no_volatile_ce;\n \n-/* Nonzero if we should use Neon to handle 64-bits operations rather\n-   than core registers.  */\n-extern int prefer_neon_for_64bits;\n-\n /* Structure defining the current overall architectural target and tuning.  */\n struct arm_build_target\n {"}, {"sha": "a34cb7495f0d7303ab121f7cf9e11c71d9378423", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1a58e9be6a6a18b348812be19d965ce0111c7d/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1a58e9be6a6a18b348812be19d965ce0111c7d/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=bf1a58e9be6a6a18b348812be19d965ce0111c7d", "patch": "@@ -949,10 +949,6 @@ int arm_arch_thumb_hwdiv;\n /* Nonzero if chip disallows volatile memory access in IT block.  */\n int arm_arch_no_volatile_ce;\n \n-/* Nonzero if we should use Neon to handle 64-bits operations rather\n-   than core registers.  */\n-int prefer_neon_for_64bits = 0;\n-\n /* Nonzero if we shouldn't use literal pools.  */\n bool arm_disable_literal_pool = false;\n \n@@ -1810,7 +1806,6 @@ const struct tune_params arm_slowmul_tune =\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* Thumb.  */\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* ARM.  */\n   tune_params::DISPARAGE_FLAGS_NEITHER,\n-  tune_params::PREF_NEON_64_FALSE,\n   tune_params::PREF_NEON_STRINGOPS_FALSE,\n   tune_params::FUSE_NOTHING,\n   tune_params::SCHED_AUTOPREF_OFF\n@@ -1833,7 +1828,6 @@ const struct tune_params arm_fastmul_tune =\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* Thumb.  */\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* ARM.  */\n   tune_params::DISPARAGE_FLAGS_NEITHER,\n-  tune_params::PREF_NEON_64_FALSE,\n   tune_params::PREF_NEON_STRINGOPS_FALSE,\n   tune_params::FUSE_NOTHING,\n   tune_params::SCHED_AUTOPREF_OFF\n@@ -1859,7 +1853,6 @@ const struct tune_params arm_strongarm_tune =\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* Thumb.  */\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* ARM.  */\n   tune_params::DISPARAGE_FLAGS_NEITHER,\n-  tune_params::PREF_NEON_64_FALSE,\n   tune_params::PREF_NEON_STRINGOPS_FALSE,\n   tune_params::FUSE_NOTHING,\n   tune_params::SCHED_AUTOPREF_OFF\n@@ -1882,7 +1875,6 @@ const struct tune_params arm_xscale_tune =\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* Thumb.  */\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* ARM.  */\n   tune_params::DISPARAGE_FLAGS_NEITHER,\n-  tune_params::PREF_NEON_64_FALSE,\n   tune_params::PREF_NEON_STRINGOPS_FALSE,\n   tune_params::FUSE_NOTHING,\n   tune_params::SCHED_AUTOPREF_OFF\n@@ -1905,7 +1897,6 @@ const struct tune_params arm_9e_tune =\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* Thumb.  */\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* ARM.  */\n   tune_params::DISPARAGE_FLAGS_NEITHER,\n-  tune_params::PREF_NEON_64_FALSE,\n   tune_params::PREF_NEON_STRINGOPS_FALSE,\n   tune_params::FUSE_NOTHING,\n   tune_params::SCHED_AUTOPREF_OFF\n@@ -1928,7 +1919,6 @@ const struct tune_params arm_marvell_pj4_tune =\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* Thumb.  */\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* ARM.  */\n   tune_params::DISPARAGE_FLAGS_NEITHER,\n-  tune_params::PREF_NEON_64_FALSE,\n   tune_params::PREF_NEON_STRINGOPS_FALSE,\n   tune_params::FUSE_NOTHING,\n   tune_params::SCHED_AUTOPREF_OFF\n@@ -1951,7 +1941,6 @@ const struct tune_params arm_v6t2_tune =\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* Thumb.  */\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* ARM.  */\n   tune_params::DISPARAGE_FLAGS_NEITHER,\n-  tune_params::PREF_NEON_64_FALSE,\n   tune_params::PREF_NEON_STRINGOPS_FALSE,\n   tune_params::FUSE_NOTHING,\n   tune_params::SCHED_AUTOPREF_OFF\n@@ -1976,7 +1965,6 @@ const struct tune_params arm_cortex_tune =\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* Thumb.  */\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* ARM.  */\n   tune_params::DISPARAGE_FLAGS_NEITHER,\n-  tune_params::PREF_NEON_64_FALSE,\n   tune_params::PREF_NEON_STRINGOPS_FALSE,\n   tune_params::FUSE_NOTHING,\n   tune_params::SCHED_AUTOPREF_OFF\n@@ -1999,7 +1987,6 @@ const struct tune_params arm_cortex_a8_tune =\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* Thumb.  */\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* ARM.  */\n   tune_params::DISPARAGE_FLAGS_NEITHER,\n-  tune_params::PREF_NEON_64_FALSE,\n   tune_params::PREF_NEON_STRINGOPS_TRUE,\n   tune_params::FUSE_NOTHING,\n   tune_params::SCHED_AUTOPREF_OFF\n@@ -2022,7 +2009,6 @@ const struct tune_params arm_cortex_a7_tune =\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* Thumb.  */\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* ARM.  */\n   tune_params::DISPARAGE_FLAGS_NEITHER,\n-  tune_params::PREF_NEON_64_FALSE,\n   tune_params::PREF_NEON_STRINGOPS_TRUE,\n   tune_params::FUSE_NOTHING,\n   tune_params::SCHED_AUTOPREF_OFF\n@@ -2045,7 +2031,6 @@ const struct tune_params arm_cortex_a15_tune =\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* Thumb.  */\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* ARM.  */\n   tune_params::DISPARAGE_FLAGS_ALL,\n-  tune_params::PREF_NEON_64_FALSE,\n   tune_params::PREF_NEON_STRINGOPS_TRUE,\n   tune_params::FUSE_NOTHING,\n   tune_params::SCHED_AUTOPREF_FULL\n@@ -2068,7 +2053,6 @@ const struct tune_params arm_cortex_a35_tune =\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* Thumb.  */\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* ARM.  */\n   tune_params::DISPARAGE_FLAGS_NEITHER,\n-  tune_params::PREF_NEON_64_FALSE,\n   tune_params::PREF_NEON_STRINGOPS_TRUE,\n   FUSE_OPS (tune_params::FUSE_MOVW_MOVT),\n   tune_params::SCHED_AUTOPREF_OFF\n@@ -2091,7 +2075,6 @@ const struct tune_params arm_cortex_a53_tune =\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* Thumb.  */\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* ARM.  */\n   tune_params::DISPARAGE_FLAGS_NEITHER,\n-  tune_params::PREF_NEON_64_FALSE,\n   tune_params::PREF_NEON_STRINGOPS_TRUE,\n   FUSE_OPS (tune_params::FUSE_MOVW_MOVT | tune_params::FUSE_AES_AESMC),\n   tune_params::SCHED_AUTOPREF_OFF\n@@ -2114,7 +2097,6 @@ const struct tune_params arm_cortex_a57_tune =\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* Thumb.  */\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* ARM.  */\n   tune_params::DISPARAGE_FLAGS_ALL,\n-  tune_params::PREF_NEON_64_FALSE,\n   tune_params::PREF_NEON_STRINGOPS_TRUE,\n   FUSE_OPS (tune_params::FUSE_MOVW_MOVT | tune_params::FUSE_AES_AESMC),\n   tune_params::SCHED_AUTOPREF_FULL\n@@ -2137,7 +2119,6 @@ const struct tune_params arm_exynosm1_tune =\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_FALSE,\t/* Thumb.  */\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_FALSE,\t/* ARM.  */\n   tune_params::DISPARAGE_FLAGS_ALL,\n-  tune_params::PREF_NEON_64_FALSE,\n   tune_params::PREF_NEON_STRINGOPS_TRUE,\n   tune_params::FUSE_NOTHING,\n   tune_params::SCHED_AUTOPREF_OFF\n@@ -2160,7 +2141,6 @@ const struct tune_params arm_xgene1_tune =\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* Thumb.  */\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* ARM.  */\n   tune_params::DISPARAGE_FLAGS_ALL,\n-  tune_params::PREF_NEON_64_FALSE,\n   tune_params::PREF_NEON_STRINGOPS_FALSE,\n   tune_params::FUSE_NOTHING,\n   tune_params::SCHED_AUTOPREF_OFF\n@@ -2186,7 +2166,6 @@ const struct tune_params arm_cortex_a5_tune =\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_FALSE,\t\t/* Thumb.  */\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_FALSE,\t\t/* ARM.  */\n   tune_params::DISPARAGE_FLAGS_NEITHER,\n-  tune_params::PREF_NEON_64_FALSE,\n   tune_params::PREF_NEON_STRINGOPS_TRUE,\n   tune_params::FUSE_NOTHING,\n   tune_params::SCHED_AUTOPREF_OFF\n@@ -2209,7 +2188,6 @@ const struct tune_params arm_cortex_a9_tune =\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* Thumb.  */\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* ARM.  */\n   tune_params::DISPARAGE_FLAGS_NEITHER,\n-  tune_params::PREF_NEON_64_FALSE,\n   tune_params::PREF_NEON_STRINGOPS_FALSE,\n   tune_params::FUSE_NOTHING,\n   tune_params::SCHED_AUTOPREF_OFF\n@@ -2232,7 +2210,6 @@ const struct tune_params arm_cortex_a12_tune =\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* Thumb.  */\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* ARM.  */\n   tune_params::DISPARAGE_FLAGS_ALL,\n-  tune_params::PREF_NEON_64_FALSE,\n   tune_params::PREF_NEON_STRINGOPS_TRUE,\n   FUSE_OPS (tune_params::FUSE_MOVW_MOVT),\n   tune_params::SCHED_AUTOPREF_OFF\n@@ -2255,7 +2232,6 @@ const struct tune_params arm_cortex_a73_tune =\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* Thumb.  */\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* ARM.  */\n   tune_params::DISPARAGE_FLAGS_ALL,\n-  tune_params::PREF_NEON_64_FALSE,\n   tune_params::PREF_NEON_STRINGOPS_TRUE,\n   FUSE_OPS (tune_params::FUSE_AES_AESMC | tune_params::FUSE_MOVW_MOVT),\n   tune_params::SCHED_AUTOPREF_FULL\n@@ -2285,7 +2261,6 @@ const struct tune_params arm_v7m_tune =\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_FALSE,\t\t/* Thumb.  */\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_FALSE,\t\t/* ARM.  */\n   tune_params::DISPARAGE_FLAGS_NEITHER,\n-  tune_params::PREF_NEON_64_FALSE,\n   tune_params::PREF_NEON_STRINGOPS_FALSE,\n   tune_params::FUSE_NOTHING,\n   tune_params::SCHED_AUTOPREF_OFF\n@@ -2310,7 +2285,6 @@ const struct tune_params arm_cortex_m7_tune =\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* Thumb.  */\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* ARM.  */\n   tune_params::DISPARAGE_FLAGS_NEITHER,\n-  tune_params::PREF_NEON_64_FALSE,\n   tune_params::PREF_NEON_STRINGOPS_FALSE,\n   tune_params::FUSE_NOTHING,\n   tune_params::SCHED_AUTOPREF_OFF\n@@ -2336,7 +2310,6 @@ const struct tune_params arm_v6m_tune =\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_FALSE,\t\t/* Thumb.  */\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_FALSE,\t\t/* ARM.  */\n   tune_params::DISPARAGE_FLAGS_NEITHER,\n-  tune_params::PREF_NEON_64_FALSE,\n   tune_params::PREF_NEON_STRINGOPS_FALSE,\n   tune_params::FUSE_NOTHING,\n   tune_params::SCHED_AUTOPREF_OFF\n@@ -2359,7 +2332,6 @@ const struct tune_params arm_fa726te_tune =\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* Thumb.  */\n   tune_params::LOG_OP_NON_SHORT_CIRCUIT_TRUE,\t\t/* ARM.  */\n   tune_params::DISPARAGE_FLAGS_NEITHER,\n-  tune_params::PREF_NEON_64_FALSE,\n   tune_params::PREF_NEON_STRINGOPS_FALSE,\n   tune_params::FUSE_NOTHING,\n   tune_params::SCHED_AUTOPREF_OFF\n@@ -3568,12 +3540,6 @@ arm_option_override (void)\n \t\t\t   global_options.x_param_values,\n \t\t\t   global_options_set.x_param_values);\n \n-  /* Use Neon to perform 64-bits operations rather than core\n-     registers.  */\n-  prefer_neon_for_64bits = current_tune->prefer_neon_for_64bits;\n-  if (use_neon_for_64bits == 1)\n-     prefer_neon_for_64bits = true;\n-\n   /* Use the alternative scheduling-pressure algorithm by default.  */\n   maybe_set_param_value (PARAM_SCHED_PRESSURE_ALGORITHM, SCHED_PRESSURE_MODEL,\n \t\t\t global_options.x_param_values,\n@@ -26520,9 +26486,6 @@ arm_print_tune_info (void)\n \t       \"logical_op_non_short_circuit:\\t[%d,%d]\\n\",\n \t       (int) current_tune->logical_op_non_short_circuit_thumb,\n \t       (int) current_tune->logical_op_non_short_circuit_arm);\n-  asm_fprintf (asm_out_file, \"\\t\\t\" ASM_COMMENT_START\n-\t       \"prefer_neon_for_64bits:\\t%d\\n\",\n-\t       (int) current_tune->prefer_neon_for_64bits);\n   asm_fprintf (asm_out_file, \"\\t\\t\" ASM_COMMENT_START\n \t       \"disparage_flag_setting_t16_encodings:\\t%d\\n\",\n \t       (int) current_tune->disparage_flag_setting_t16_encodings);"}, {"sha": "8b92c830de09a3ad49420fdfacde02d8efc2a89b", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1a58e9be6a6a18b348812be19d965ce0111c7d/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1a58e9be6a6a18b348812be19d965ce0111c7d/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=bf1a58e9be6a6a18b348812be19d965ce0111c7d", "patch": "@@ -313,9 +313,6 @@ emission of floating point pcs attributes.  */\n /* Nonzero if disallow volatile memory access in IT block.  */\n #define TARGET_NO_VOLATILE_CE\t\t(arm_arch_no_volatile_ce)\n \n-/* Should NEON be used for 64-bits bitops.  */\n-#define TARGET_PREFER_NEON_64BITS (prefer_neon_for_64bits)\n-\n /* Should constant I be slplit for OP.  */\n #define DONT_EARLY_SPLIT_CONSTANT(i, op) \\\n \t\t\t\t((optimize >= 2) \\\n@@ -509,10 +506,6 @@ extern int arm_arch_thumb_hwdiv;\n /* Nonzero if chip disallows volatile memory access in IT block.  */\n extern int arm_arch_no_volatile_ce;\n \n-/* Nonzero if we should use Neon to handle 64-bits operations rather\n-   than core registers.  */\n-extern int prefer_neon_for_64bits;\n-\n /* Nonzero if we shouldn't use literal pools.  */\n #ifndef USED_FOR_TARGET\n extern bool arm_disable_literal_pool;"}, {"sha": "5ecc5e5c91c521309925d4c14f04644e37f472e6", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1a58e9be6a6a18b348812be19d965ce0111c7d/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1a58e9be6a6a18b348812be19d965ce0111c7d/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=bf1a58e9be6a6a18b348812be19d965ce0111c7d", "patch": "@@ -276,8 +276,8 @@ Target Report Var(unaligned_access) Init(2) Save\n Enable unaligned word and halfword accesses to packed data.\n \n mneon-for-64bits\n-Target Report RejectNegative Var(use_neon_for_64bits) Init(0)\n-Use Neon to perform 64-bits operations rather than core registers.\n+Target Deprecated\n+This option is deprecated and has no effect.\n \n mslow-flash-data\n Target Report Var(target_slow_flash_data) Init(0)"}, {"sha": "549e043c67ca2067cbfc58055fe106e491425403", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1a58e9be6a6a18b348812be19d965ce0111c7d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1a58e9be6a6a18b348812be19d965ce0111c7d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=bf1a58e9be6a6a18b348812be19d965ce0111c7d", "patch": "@@ -18005,9 +18005,7 @@ defined.\n \n @item -mneon-for-64bits\n @opindex mneon-for-64bits\n-Enables using Neon to handle scalar 64-bits operations. This is\n-disabled by default since the cost of moving data from core registers\n-to Neon is high.\n+This option is deprecated and has no effect.\n \n @item -mslow-flash-data\n @opindex mslow-flash-data"}]}