{"sha": "cc79451b143419faf1d7c587d82aaa7627679bac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M3OTQ1MWIxNDM0MTlmYWYxZDdjNTg3ZDgyYWFhNzYyNzY3OWJhYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-12T12:58:51Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-12T12:58:51Z"}, "message": "(expand_call, store_one_arg): Properly push and pop temporary level\naround expression evaluations.\n\nFrom-SVN: r6221", "tree": {"sha": "81e98e38c3ca3371772df2f9d07cc08227843308", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81e98e38c3ca3371772df2f9d07cc08227843308"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc79451b143419faf1d7c587d82aaa7627679bac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc79451b143419faf1d7c587d82aaa7627679bac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc79451b143419faf1d7c587d82aaa7627679bac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc79451b143419faf1d7c587d82aaa7627679bac/comments", "author": null, "committer": null, "parents": [{"sha": "bf104286fd67d20cd433044b3ec0bdb50be63647", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf104286fd67d20cd433044b3ec0bdb50be63647", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf104286fd67d20cd433044b3ec0bdb50be63647"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "467f124f4ea78cf650945c4bb5c8834ef6826ced", "filename": "gcc/calls.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc79451b143419faf1d7c587d82aaa7627679bac/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc79451b143419faf1d7c587d82aaa7627679bac/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=cc79451b143419faf1d7c587d82aaa7627679bac", "patch": "@@ -848,8 +848,8 @@ expand_call (exp, target, ignore)\n     abort ();\n   funtype = TREE_TYPE (funtype);\n \n-  /* Push the temporary stack slot level so that we can free temporaries used\n-     by each of the arguments separately.  */\n+  /* Push the temporary stack slot level so that we can free any temporaries\n+     we make.  */\n   push_temp_slots ();\n \n   /* Start updating where the next arg would go.  */\n@@ -1266,6 +1266,8 @@ expand_call (exp, target, ignore)\n \t|| (must_preallocate && (args_size.var != 0 || args_size.constant != 0)\n \t    && calls_function (args[i].tree_value, 0)))\n       {\n+\tpush_temp_slots ();\n+\n \targs[i].initial_value = args[i].value\n \t  = expand_expr (args[i].tree_value, NULL_RTX, VOIDmode, 0);\n \n@@ -1274,8 +1276,7 @@ expand_call (exp, target, ignore)\n \t  args[i].value = convert_to_mode (args[i].mode, args[i].value,\n \t\t\t\t\t   args[i].unsignedp);\n \tpreserve_temp_slots (args[i].value);\n-\n-\tfree_temp_slots ();\n+\tpop_temp_slots ();\n \n \t/* ANSI doesn't require a sequence point here,\n \t   but PCC has one, so this will avoid some problems.  */\n@@ -1514,8 +1515,9 @@ expand_call (exp, target, ignore)\n   else\n     /* Generate an rtx (probably a pseudo-register) for the address.  */\n     {\n+      push_temp_slots ();\n       funexp = expand_expr (TREE_OPERAND (exp, 0), NULL_RTX, VOIDmode, 0);\n-      free_temp_slots ();\t/* FUNEXP can't be BLKmode */\n+      pop_temp_slots ();\t/* FUNEXP can't be BLKmode */\n       emit_queue ();\n     }\n \n@@ -1541,10 +1543,11 @@ expand_call (exp, target, ignore)\n \n \tif (args[i].value == 0)\n \t  {\n+\t    push_temp_slots ();\n \t    args[i].value = expand_expr (args[i].tree_value, NULL_RTX,\n \t\t\t\t\t VOIDmode, 0);\n \t    preserve_temp_slots (args[i].value);\n-\t    free_temp_slots ();\n+\t    pop_temp_slots ();\n \n \t    /* ANSI doesn't require a sequence point here,\n \t       but PCC has one, so this will avoid some problems.  */\n@@ -2776,6 +2779,10 @@ store_one_arg (arg, argblock, may_be_alloca, variable_size, fndecl,\n   if (TREE_CODE (pval) == ERROR_MARK)\n     return;\n \n+  /* Push a new temporary level for any temporaries we make for\n+     this argument.  */\n+  push_temp_slots ();\n+\n #ifdef ACCUMULATE_OUTGOING_ARGS\n   /* If this is being stored into a pre-allocated, fixed-size, stack area,\n      save any previous data at that location.  */\n@@ -2822,6 +2829,7 @@ store_one_arg (arg, argblock, may_be_alloca, variable_size, fndecl,\n \t    {\n \t      arg->save_area = assign_stack_temp (BLKmode,\n \t\t\t\t\t\t  arg->size.constant, 1);\n+\t      preserve_temp_slots (arg->save_area);\n \t      emit_block_move (validize_mem (arg->save_area), stack_area,\n \t\t\t       GEN_INT (arg->size.constant),\n \t\t\t       PARM_BOUNDARY / BITS_PER_UNIT);\n@@ -3000,6 +3008,7 @@ store_one_arg (arg, argblock, may_be_alloca, variable_size, fndecl,\n \n   /* Free any temporary slots made in processing this argument.  */\n   free_temp_slots ();\n+  pop_temp_slots ();\n \n #ifdef ACCUMULATE_OUTGOING_ARGS\n   /* Now mark the segment we just used.  */"}]}