{"sha": "61ead1351f094cfab41940ea093b88d1ec6dcde6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFlYWQxMzUxZjA5NGNmYWI0MTk0MGVhMDkzYjg4ZDFlYzZkY2RlNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-01-16T17:27:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-01-16T17:27:24Z"}, "message": "trans-stmt.c (gfc_trans_if_1): Use fold_buildN and build_int_cst.\n\n2006-01-16  Richard Guenther  <rguenther@suse.de>\n\n\t* trans-stmt.c (gfc_trans_if_1): Use fold_buildN and build_int_cst.\n\t(gfc_trans_arithmetic_if): Likewise.\n\t(gfc_trans_simple_do): Likewise.\n\t(gfc_trans_do): Likewise.\n\t(gfc_trans_do_while): Likewise.\n\t(gfc_trans_logical_select): Likewise.\n\t(gfc_trans_forall_loop): Likewise.\n\t(generate_loop_for_temp_to_lhs): Likewise.\n\t(generate_loop_for_rhs_to_temp): Likewise.\n\t(gfc_trans_allocate): Likewise.\n\t* trans.c (gfc_add_expr_to_block): Do not fold expr again.\n\nFrom-SVN: r109756", "tree": {"sha": "54da6ca1fe954004643fa7c168386b54825d19ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54da6ca1fe954004643fa7c168386b54825d19ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61ead1351f094cfab41940ea093b88d1ec6dcde6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61ead1351f094cfab41940ea093b88d1ec6dcde6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61ead1351f094cfab41940ea093b88d1ec6dcde6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61ead1351f094cfab41940ea093b88d1ec6dcde6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cd6e7e7d5945b71e7c803644a8b45e17cbff5a1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd6e7e7d5945b71e7c803644a8b45e17cbff5a1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd6e7e7d5945b71e7c803644a8b45e17cbff5a1e"}], "stats": {"total": 84, "additions": 52, "deletions": 32}, "files": [{"sha": "3bcbef224a43e10de676e673acd44300af40201c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ead1351f094cfab41940ea093b88d1ec6dcde6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ead1351f094cfab41940ea093b88d1ec6dcde6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=61ead1351f094cfab41940ea093b88d1ec6dcde6", "patch": "@@ -1,3 +1,17 @@\n+2006-01-16  Richard Guenther  <rguenther@suse.de>\n+\n+\t* trans-stmt.c (gfc_trans_if_1): Use fold_buildN and build_int_cst.\n+\t(gfc_trans_arithmetic_if): Likewise.\n+\t(gfc_trans_simple_do): Likewise.\n+\t(gfc_trans_do): Likewise.\n+\t(gfc_trans_do_while): Likewise.\n+\t(gfc_trans_logical_select): Likewise.\n+\t(gfc_trans_forall_loop): Likewise.\n+\t(generate_loop_for_temp_to_lhs): Likewise.\n+\t(generate_loop_for_rhs_to_temp): Likewise.\n+\t(gfc_trans_allocate): Likewise.\n+\t* trans.c (gfc_add_expr_to_block): Do not fold expr again.\n+\n 2006-01-16  Richard Guenther  <rguenther@suse.de>\n \n \t* trans-expr.c (gfc_conv_function_call): Use fold_build2."}, {"sha": "2abc5ea3a560507371879a129885a62663152e71", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 38, "deletions": 28, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ead1351f094cfab41940ea093b88d1ec6dcde6/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ead1351f094cfab41940ea093b88d1ec6dcde6/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=61ead1351f094cfab41940ea093b88d1ec6dcde6", "patch": "@@ -488,7 +488,7 @@ gfc_trans_if_1 (gfc_code * code)\n     elsestmt = build_empty_stmt ();\n \n   /* Build the condition expression and add it to the condition block.  */\n-  stmt = build3_v (COND_EXPR, if_se.expr, stmt, elsestmt);\n+  stmt = fold_build3 (COND_EXPR, void_type_node, if_se.expr, stmt, elsestmt);\n   \n   gfc_add_expr_to_block (&if_se.pre, stmt);\n \n@@ -556,11 +556,11 @@ gfc_trans_arithmetic_if (gfc_code * code)\n       branch2 = build1_v (GOTO_EXPR, gfc_get_label_decl (code->label2));\n \n       if (code->label->value != code->label3->value)\n-        tmp = build2 (LT_EXPR, boolean_type_node, se.expr, zero);\n+        tmp = fold_build2 (LT_EXPR, boolean_type_node, se.expr, zero);\n       else\n-        tmp = build2 (NE_EXPR, boolean_type_node, se.expr, zero);\n+        tmp = fold_build2 (NE_EXPR, boolean_type_node, se.expr, zero);\n \n-      branch1 = build3_v (COND_EXPR, tmp, branch1, branch2);\n+      branch1 = fold_build3 (COND_EXPR, void_type_node, tmp, branch1, branch2);\n     }\n   else\n     branch1 = build1_v (GOTO_EXPR, gfc_get_label_decl (code->label));\n@@ -570,8 +570,8 @@ gfc_trans_arithmetic_if (gfc_code * code)\n     {\n       /* if (cond <= 0) take branch1 else take branch2.  */\n       branch2 = build1_v (GOTO_EXPR, gfc_get_label_decl (code->label3));\n-      tmp = build2 (LE_EXPR, boolean_type_node, se.expr, zero);\n-      branch1 = build3_v (COND_EXPR, tmp, branch1, branch2);\n+      tmp = fold_build2 (LE_EXPR, boolean_type_node, se.expr, zero);\n+      branch1 = fold_build3 (COND_EXPR, void_type_node, tmp, branch1, branch2);\n     }\n \n   /* Append the COND_EXPR to the evaluation of COND, and return.  */\n@@ -648,17 +648,18 @@ gfc_trans_simple_do (gfc_code * code, stmtblock_t *pblock, tree dovar,\n     }\n \n   /* Evaluate the loop condition.  */\n-  cond = build2 (EQ_EXPR, boolean_type_node, dovar, to);\n+  cond = fold_build2 (EQ_EXPR, boolean_type_node, dovar, to);\n   cond = gfc_evaluate_now (cond, &body);\n \n   /* Increment the loop variable.  */\n-  tmp = build2 (PLUS_EXPR, type, dovar, step);\n+  tmp = fold_build2 (PLUS_EXPR, type, dovar, step);\n   gfc_add_modify_expr (&body, dovar, tmp);\n \n   /* The loop exit.  */\n   tmp = build1_v (GOTO_EXPR, exit_label);\n   TREE_USED (exit_label) = 1;\n-  tmp = build3_v (COND_EXPR, cond, tmp, build_empty_stmt ());\n+  tmp = fold_build3 (COND_EXPR, void_type_node,\n+\t\t     cond, tmp, build_empty_stmt ());\n   gfc_add_expr_to_block (&body, tmp);\n \n   /* Finish the loop body.  */\n@@ -670,7 +671,8 @@ gfc_trans_simple_do (gfc_code * code, stmtblock_t *pblock, tree dovar,\n     cond = fold_build2 (LE_EXPR, boolean_type_node, dovar, to);\n   else\n     cond = fold_build2 (GE_EXPR, boolean_type_node, dovar, to);\n-  tmp = build3_v (COND_EXPR, cond, tmp, build_empty_stmt ());\n+  tmp = fold_build3 (COND_EXPR, void_type_node,\n+\t\t     cond, tmp, build_empty_stmt ());\n   gfc_add_expr_to_block (pblock, tmp);\n \n   /* Add the exit label.  */\n@@ -796,11 +798,12 @@ gfc_trans_do (gfc_code * code)\n   exit_label = gfc_build_label_decl (NULL_TREE);\n \n   /* Start with the loop condition.  Loop until count <= 0.  */\n-  cond = build2 (LE_EXPR, boolean_type_node, count,\n-\t\tconvert (TREE_TYPE (count), integer_zero_node));\n+  cond = fold_build2 (LE_EXPR, boolean_type_node, count,\n+\t\t      build_int_cst (TREE_TYPE (count), 0));\n   tmp = build1_v (GOTO_EXPR, exit_label);\n   TREE_USED (exit_label) = 1;\n-  tmp = build3_v (COND_EXPR, cond, tmp, build_empty_stmt ());\n+  tmp = fold_build3 (COND_EXPR, void_type_node,\n+\t\t     cond, tmp, build_empty_stmt ());\n   gfc_add_expr_to_block (&body, tmp);\n \n   /* Put these labels where they can be found later. We put the\n@@ -895,7 +898,8 @@ gfc_trans_do_while (gfc_code * code)\n   /* Build \"IF (! cond) GOTO exit_label\".  */\n   tmp = build1_v (GOTO_EXPR, exit_label);\n   TREE_USED (exit_label) = 1;\n-  tmp = build3_v (COND_EXPR, cond.expr, tmp, build_empty_stmt ());\n+  tmp = fold_build3 (COND_EXPR, void_type_node,\n+\t\t     cond.expr, tmp, build_empty_stmt ());\n   gfc_add_expr_to_block (&block, tmp);\n \n   /* The main body of the loop.  */\n@@ -1135,7 +1139,7 @@ gfc_trans_logical_select (gfc_code * code)\n     }\n   else\n     {\n-      tree true_tree, false_tree;\n+      tree true_tree, false_tree, stmt;\n \n       true_tree = build_empty_stmt ();\n       false_tree = build_empty_stmt ();\n@@ -1161,8 +1165,9 @@ gfc_trans_logical_select (gfc_code * code)\n       if (f != NULL)\n \tfalse_tree = gfc_trans_code (f->next);\n \n-      gfc_add_expr_to_block (&block, build3_v (COND_EXPR, se.expr,\n-\t\t\t\t\t       true_tree, false_tree));\n+      stmt = fold_build3 (COND_EXPR, void_type_node, se.expr,\n+\t\t\t  true_tree, false_tree);\n+      gfc_add_expr_to_block (&block, stmt);\n     }\n \n   return gfc_finish_block (&block);\n@@ -1433,9 +1438,11 @@ gfc_trans_forall_loop (forall_info *forall_tmp, int nvar, tree body, int mask_fl\n       gfc_init_block (&block);\n \n       /* The exit condition.  */\n-      cond = build2 (LE_EXPR, boolean_type_node, count, integer_zero_node);\n+      cond = fold_build2 (LE_EXPR, boolean_type_node,\n+\t\t\t  count, build_int_cst (TREE_TYPE (count), 0));\n       tmp = build1_v (GOTO_EXPR, exit_label);\n-      tmp = build3_v (COND_EXPR, cond, tmp, build_empty_stmt ());\n+      tmp = fold_build3 (COND_EXPR, void_type_node,\n+\t\t\t cond, tmp, build_empty_stmt ());\n       gfc_add_expr_to_block (&block, tmp);\n \n       /* The main loop body.  */\n@@ -1679,11 +1686,12 @@ generate_loop_for_temp_to_lhs (gfc_expr *expr, tree tmp1, tree count3,\n \t while (tmp2)\n \t   {\n \t     tmp1 = gfc_build_array_ref (tmp2, count3);\n-\t     wheremaskexpr = build2 (TRUTH_AND_EXPR, TREE_TYPE (tmp1),\n-\t\t\t\t     wheremaskexpr, tmp1);\n+\t     wheremaskexpr = fold_build2 (TRUTH_AND_EXPR, TREE_TYPE (tmp1),\n+\t\t\t\t\t  wheremaskexpr, tmp1);\n \t     tmp2 = TREE_CHAIN (tmp2);\n \t   }\n-\t tmp = build3_v (COND_EXPR, wheremaskexpr, tmp, build_empty_stmt ());\n+\t tmp = fold_build3 (COND_EXPR, void_type_node,\n+\t\t\t    wheremaskexpr, tmp, build_empty_stmt ());\n        }\n \n       gfc_add_expr_to_block (&body, tmp);\n@@ -1776,11 +1784,12 @@ generate_loop_for_rhs_to_temp (gfc_expr *expr2, tree tmp1, tree count3,\n       while (tmp2)\n \t{\n \t  tmp1 = gfc_build_array_ref (tmp2, count3);\n-\t  wheremaskexpr = build2 (TRUTH_AND_EXPR, TREE_TYPE (tmp1),\n-\t\t\t\t  wheremaskexpr, tmp1);\n+\t  wheremaskexpr = fold_build2 (TRUTH_AND_EXPR, TREE_TYPE (tmp1),\n+\t\t\t\t       wheremaskexpr, tmp1);\n \t  tmp2 = TREE_CHAIN (tmp2);\n \t}\n-      tmp = build3_v (COND_EXPR, wheremaskexpr, tmp, build_empty_stmt ());\n+      tmp = fold_build3 (COND_EXPR, void_type_node,\n+\t\t\t wheremaskexpr, tmp, build_empty_stmt ());\n     }\n \n   gfc_add_expr_to_block (&body1, tmp);\n@@ -3255,9 +3264,10 @@ gfc_trans_allocate (gfc_code * code)\n \t  if (code->expr)\n \t    {\n \t      tmp = build1_v (GOTO_EXPR, error_label);\n-\t      parm =\n-\t\tbuild2 (NE_EXPR, boolean_type_node, stat, integer_zero_node);\n-\t      tmp = build3_v (COND_EXPR, parm, tmp, build_empty_stmt ());\n+\t      parm = fold_build2 (NE_EXPR, boolean_type_node,\n+\t\t\t\t  stat, build_int_cst (TREE_TYPE (stat), 0));\n+\t      tmp = fold_build3 (COND_EXPR, void_type_node,\n+\t\t\t\t parm, tmp, build_empty_stmt ());\n \t      gfc_add_expr_to_block (&se.pre, tmp);\n \t    }\n \t}"}, {"sha": "06fcddfac72599f9ef1c7c83c758b87ff8d8e89d", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ead1351f094cfab41940ea093b88d1ec6dcde6/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ead1351f094cfab41940ea093b88d1ec6dcde6/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=61ead1351f094cfab41940ea093b88d1ec6dcde6", "patch": "@@ -359,10 +359,6 @@ gfc_add_expr_to_block (stmtblock_t * block, tree expr)\n   if (expr == NULL_TREE || IS_EMPTY_STMT (expr))\n     return;\n \n-  if (TREE_CODE (expr) != STATEMENT_LIST\n-      && TREE_CODE_CLASS (TREE_CODE (expr)) != tcc_statement)\n-    expr = fold (expr);\n-\n   if (block->head)\n     {\n       if (TREE_CODE (block->head) != STATEMENT_LIST)"}]}