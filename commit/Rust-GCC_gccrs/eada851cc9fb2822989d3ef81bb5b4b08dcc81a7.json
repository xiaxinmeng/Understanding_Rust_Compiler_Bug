{"sha": "eada851cc9fb2822989d3ef81bb5b4b08dcc81a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFkYTg1MWNjOWZiMjgyMjk4OWQzZWY4MWJiNWI0YjA4ZGNjODFhNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-09-29T13:02:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-09-29T13:02:42Z"}, "message": "re PR tree-optimization/67741 (Invalid built-in usage should not cause segmentation fault in compiler)\n\n2015-09-29  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/67741\n\t* tree-ssa-math-opts.c (pass_cse_sincos::execute): Only recognize\n\tbuiltin calls with correct signature.\n\n\t* gcc.dg/torture/pr67741.c: New testcase.\n\nFrom-SVN: r228243", "tree": {"sha": "622acbfaa22ecaaa95a141f7bf10c0291f7cd7af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/622acbfaa22ecaaa95a141f7bf10c0291f7cd7af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eada851cc9fb2822989d3ef81bb5b4b08dcc81a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eada851cc9fb2822989d3ef81bb5b4b08dcc81a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eada851cc9fb2822989d3ef81bb5b4b08dcc81a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eada851cc9fb2822989d3ef81bb5b4b08dcc81a7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ce535a9685b11c846560cc0f9f4dded1ca558efc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce535a9685b11c846560cc0f9f4dded1ca558efc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce535a9685b11c846560cc0f9f4dded1ca558efc"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "8fc37ce595165fa8e2fc0d59fbf6a365a88ea836", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eada851cc9fb2822989d3ef81bb5b4b08dcc81a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eada851cc9fb2822989d3ef81bb5b4b08dcc81a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eada851cc9fb2822989d3ef81bb5b4b08dcc81a7", "patch": "@@ -1,3 +1,9 @@\n+2015-09-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/67741\n+\t* tree-ssa-math-opts.c (pass_cse_sincos::execute): Only recognize\n+\tbuiltin calls with correct signature.\n+\n 2015-09-29  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \tPR target/65105"}, {"sha": "6582172b5720bc02dfdf4bab86c8735657bd858c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eada851cc9fb2822989d3ef81bb5b4b08dcc81a7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eada851cc9fb2822989d3ef81bb5b4b08dcc81a7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eada851cc9fb2822989d3ef81bb5b4b08dcc81a7", "patch": "@@ -1,3 +1,8 @@\n+2015-09-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/67741\n+\t* gcc.dg/torture/pr67741.c: New testcase.\n+\n 2015-09-29  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/tg-tests.h (foo_1) [UNSAFE]: Also check if f and ld are"}, {"sha": "1ffc70784698d6f61052582ac1eac6095de4e2cb", "filename": "gcc/testsuite/gcc.dg/torture/pr67741.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eada851cc9fb2822989d3ef81bb5b4b08dcc81a7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67741.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eada851cc9fb2822989d3ef81bb5b4b08dcc81a7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67741.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67741.c?ref=eada851cc9fb2822989d3ef81bb5b4b08dcc81a7", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+struct singlecomplex { float real, imag ; } ;\n+struct doublecomplex { double real, imag ; } ;\n+struct extendedcomplex { long double real, imag ; } ;\n+extern double cabs();\n+float cabsf(fc)\n+     struct singlecomplex fc;  /* { dg-warning \"doesn't match\" } */\n+{\n+  struct doublecomplex dc ;\n+  dc.real=fc.real; dc.imag=fc.imag;\n+  return (float) cabs(dc);\n+}"}, {"sha": "97477391e0f47fc1f700bfc0eb10cc4c90cdd6af", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eada851cc9fb2822989d3ef81bb5b4b08dcc81a7/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eada851cc9fb2822989d3ef81bb5b4b08dcc81a7/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=eada851cc9fb2822989d3ef81bb5b4b08dcc81a7", "patch": "@@ -1738,15 +1738,14 @@ pass_cse_sincos::execute (function *fun)\n \t     of a basic block.  */\n \t  cleanup_eh = false;\n \n-\t  if (is_gimple_call (stmt)\n-\t      && gimple_call_lhs (stmt)\n-\t      && (fndecl = gimple_call_fndecl (stmt))\n-\t      && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n+\t  if (gimple_call_builtin_p (stmt, BUILT_IN_NORMAL)\n+\t      && gimple_call_lhs (stmt))\n \t    {\n \t      tree arg, arg0, arg1, result;\n \t      HOST_WIDE_INT n;\n \t      location_t loc;\n \n+\t      fndecl = gimple_call_fndecl (stmt);\n \t      switch (DECL_FUNCTION_CODE (fndecl))\n \t\t{\n \t\tCASE_FLT_FN (BUILT_IN_COS):"}]}