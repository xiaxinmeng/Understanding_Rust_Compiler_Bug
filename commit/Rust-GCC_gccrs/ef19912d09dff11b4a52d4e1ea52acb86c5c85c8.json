{"sha": "ef19912d09dff11b4a52d4e1ea52acb86c5c85c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYxOTkxMmQwOWRmZjExYjRhNTJkNGUxZWE1MmFjYjg2YzVjODVjOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-15T00:42:46Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-15T00:42:46Z"}, "message": "(store_field): If storing a record on big endian targets,\n\nset up so we store the high-order bits.\n(expand_expr, case COMPONENT_REF): Likewise for loads.\n\nFrom-SVN: r12714", "tree": {"sha": "e09a4acb9ea923e9122cff183c81d5f0dab3b1cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e09a4acb9ea923e9122cff183c81d5f0dab3b1cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef19912d09dff11b4a52d4e1ea52acb86c5c85c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef19912d09dff11b4a52d4e1ea52acb86c5c85c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef19912d09dff11b4a52d4e1ea52acb86c5c85c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef19912d09dff11b4a52d4e1ea52acb86c5c85c8/comments", "author": null, "committer": null, "parents": [{"sha": "853e0b2def844b36a64fd716540f2b19330f0c51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/853e0b2def844b36a64fd716540f2b19330f0c51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/853e0b2def844b36a64fd716540f2b19330f0c51"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "5713d6d2eac93b1af33f952bd1ce0237b4394b0f", "filename": "gcc/expr.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef19912d09dff11b4a52d4e1ea52acb86c5c85c8/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef19912d09dff11b4a52d4e1ea52acb86c5c85c8/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ef19912d09dff11b4a52d4e1ea52acb86c5c85c8", "patch": "@@ -4105,6 +4105,18 @@ store_field (target, bitsize, bitpos, mode, exp, value_mode,\n     {\n       rtx temp = expand_expr (exp, NULL_RTX, VOIDmode, 0);\n \n+      /* If BITSIZE is narrower than the size of the type of EXP\n+\t we will be narrowing TEMP.  Normally, what's wanted are the\n+\t low-order bits.  However, if EXP's type is a record and this is\n+\t big-endian machine, we want the upper BITSIZE bits.  */\n+      if (BYTES_BIG_ENDIAN && GET_MODE_CLASS (GET_MODE (temp)) == MODE_INT\n+\t  && bitsize < GET_MODE_BITSIZE (GET_MODE (temp))\n+\t  && TREE_CODE (TREE_TYPE (exp)) == RECORD_TYPE)\n+\ttemp = expand_shift (RSHIFT_EXPR, GET_MODE (temp), temp,\n+\t\t\t     size_int (GET_MODE_BITSIZE (GET_MODE (temp))\n+\t\t\t\t       - bitsize),\n+\t\t\t     temp, 1);\n+\n       /* Unless MODE is VOIDmode or BLKmode, convert TEMP to\n \t MODE.  */\n       if (mode != VOIDmode && mode != BLKmode\n@@ -5595,6 +5607,18 @@ expand_expr (exp, target, tmode, modifier)\n \t\t\t\t     unsignedp, target, ext_mode, ext_mode,\n \t\t\t\t     alignment,\n \t\t\t\t     int_size_in_bytes (TREE_TYPE (tem)));\n+\n+\t    /* If the result is a record type and BITSIZE is narrower than\n+\t       the mode of OP0, an integral mode, and this is a big endian\n+\t       machine, we must put the field into the high-order bits.  */\n+\t    if (TREE_CODE (type) == RECORD_TYPE && BYTES_BIG_ENDIAN\n+\t\t&& GET_MODE_CLASS (GET_MODE (op0)) == MODE_INT\n+\t\t&& bitsize < GET_MODE_BITSIZE (GET_MODE (op0)))\n+\t      op0 = expand_shift (LSHIFT_EXPR, GET_MODE (op0), op0,\n+\t\t\t\t  size_int (GET_MODE_BITSIZE (GET_MODE (op0))\n+\t\t\t\t\t    - bitsize),\n+\t\t\t\t  op0, 1);\n+\n \t    if (mode == BLKmode)\n \t      {\n \t\trtx new = assign_stack_temp (ext_mode,"}]}