{"sha": "a212e43fca22f730987ad4d15a0bd58efae9677e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIxMmU0M2ZjYTIyZjczMDk4N2FkNGQxNWEwYmQ1OGVmYWU5Njc3ZQ==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2012-10-09T06:18:29Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2012-10-09T06:18:29Z"}, "message": "re PR c++/54427 (Expose more vector extensions)\n\n2012-10-09  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR c++/54427\n\nc/\n\t* c-typeck.c: Include c-common.h.\n\t(enum stv_conv): Moved to c-common.h.\n\t(scalar_to_vector): Moved to c-common.c.\n\t(build_binary_op): Adapt to scalar_to_vector's new prototype.\n\t* Make-lang.in: c-typeck.c depends on c-common.h.\n\nc-family/\n\t* c-common.c (scalar_to_vector): Moved from c-typeck.c. Support\n\tmore operations. Make error messages optional.\n\t* c-common.h (enum stv_conv): Moved from c-typeck.c.\n\t(scalar_to_vector): Declare.\n\ncp/\n\t* typeck.c (cp_build_binary_op): Handle mixed scalar-vector\n\toperations.\n\t[LSHIFT_EXPR, RSHIFT_EXPR]: Likewise.\n\ngcc/\n\t* fold-const.c (fold_binary_loc): Use build_zero_cst instead of\n\tbuild_int_cst for a potential vector.\n\ntestsuite/\n\t* c-c++-common/vector-scalar.c: New testcase.\n\t* g++.dg/ext/vector18.C: New testcase.\n\t* g++.dg/ext/vector5.C: This is not an error anymore.\n\t* gcc.dg/init-vec-1.c: Move ...\n\t* c-c++-common/init-vec-1.c: ... here. Adapt error message.\n\t* gcc.c-torture/execute/vector-shift1.c: Move ...\n\t* c-c++-common/torture/vector-shift1.c: ... here.\n\t* gcc.dg/scal-to-vec1.c: Move ...\n\t* c-c++-common/scal-to-vec1.c: ... here. Avoid narrowing for\n\tC++11. Adapt error messages.\n\t* gcc.dg/convert-vec-1.c: Move ...\n\t* c-c++-common/convert-vec-1.c: ... here.\n\t* gcc.dg/scal-to-vec2.c: Move ...\n\t* c-c++-common/scal-to-vec2.c: ... here.\n\nFrom-SVN: r192238", "tree": {"sha": "41770fbb2dff0d56518b79bce3dd01c52d1b2759", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41770fbb2dff0d56518b79bce3dd01c52d1b2759"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a212e43fca22f730987ad4d15a0bd58efae9677e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a212e43fca22f730987ad4d15a0bd58efae9677e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a212e43fca22f730987ad4d15a0bd58efae9677e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a212e43fca22f730987ad4d15a0bd58efae9677e/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f5220359f4b2ee333e38994e3c275180ff09035f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5220359f4b2ee333e38994e3c275180ff09035f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5220359f4b2ee333e38994e3c275180ff09035f"}], "stats": {"total": 359, "additions": 252, "deletions": 107}, "files": [{"sha": "661af2a3a07f011884e063bb8d0682f9a69addb0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a212e43fca22f730987ad4d15a0bd58efae9677e", "patch": "@@ -1,3 +1,9 @@\n+2012-10-09  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/54427\n+\t* fold-const.c (fold_binary_loc): Use build_zero_cst instead of\n+\tbuild_int_cst for a potential vector.\n+\n 2012-10-08  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/atom.md (atom_sse_4): Merge atom_sse_attr attibutes."}, {"sha": "c86eb69a4038c8f9195c10f1c70bc7e449032d16", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a212e43fca22f730987ad4d15a0bd58efae9677e", "patch": "@@ -1,3 +1,11 @@\n+2012-10-09  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/54427\n+\t* c-common.c (scalar_to_vector): Moved from c-typeck.c. Support\n+\tmore operations. Make error messages optional.\n+\t* c-common.h (enum stv_conv): Moved from c-typeck.c.\n+\t(scalar_to_vector): Declare.\n+\n 2012-10-08  Jason Merrill  <jason@redhat.com>\n \n \t* c-common.c (c_common_reswords): Add thread_local."}, {"sha": "edd25aa606072652e3ca512f4482ee38c640b54c", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=a212e43fca22f730987ad4d15a0bd58efae9677e", "patch": "@@ -11253,6 +11253,109 @@ convert_vector_to_pointer_for_subscript (location_t loc,\n     }\n }\n \n+/* Determine which of the operands, if any, is a scalar that needs to be\n+   converted to a vector, for the range of operations.  */\n+enum stv_conv\n+scalar_to_vector (location_t loc, enum tree_code code, tree op0, tree op1,\n+\t\t  bool complain)\n+{\n+  tree type0 = TREE_TYPE (op0);\n+  tree type1 = TREE_TYPE (op1);\n+  bool integer_only_op = false;\n+  enum stv_conv ret = stv_firstarg;\n+\n+  gcc_assert (TREE_CODE (type0) == VECTOR_TYPE\n+\t      || TREE_CODE (type1) == VECTOR_TYPE);\n+  switch (code)\n+    {\n+      /* Most GENERIC binary expressions require homogeneous arguments.\n+\t LSHIFT_EXPR and RSHIFT_EXPR are exceptions and accept a first\n+\t argument that is a vector and a second one that is a scalar, so\n+\t we never return stv_secondarg for them.  */\n+      case RSHIFT_EXPR:\n+      case LSHIFT_EXPR:\n+\tif (TREE_CODE (type0) == INTEGER_TYPE\n+\t    && TREE_CODE (TREE_TYPE (type1)) == INTEGER_TYPE)\n+\t  {\n+\t    if (unsafe_conversion_p (TREE_TYPE (type1), op0, false))\n+\t      {\n+\t\tif (complain)\n+\t\t  error_at (loc, \"conversion of scalar %qT to vector %qT \"\n+\t\t\t    \"involves truncation\", type0, type1);\n+\t\treturn stv_error;\n+\t      }\n+\t    else\n+\t      return stv_firstarg;\n+\t  }\n+\tbreak;\n+\n+      case BIT_IOR_EXPR:\n+      case BIT_XOR_EXPR:\n+      case BIT_AND_EXPR:\n+\tinteger_only_op = true;\n+\t/* ... fall through ...  */\n+\n+      case PLUS_EXPR:\n+      case MINUS_EXPR:\n+      case MULT_EXPR:\n+      case TRUNC_DIV_EXPR:\n+      case CEIL_DIV_EXPR:\n+      case FLOOR_DIV_EXPR:\n+      case ROUND_DIV_EXPR:\n+      case EXACT_DIV_EXPR:\n+      case TRUNC_MOD_EXPR:\n+      case FLOOR_MOD_EXPR:\n+      case RDIV_EXPR:\n+      case EQ_EXPR:\n+      case NE_EXPR:\n+      case LE_EXPR:\n+      case GE_EXPR:\n+      case LT_EXPR:\n+      case GT_EXPR:\n+      /* What about UNLT_EXPR?  */\n+\tif (TREE_CODE (type0) == VECTOR_TYPE)\n+\t  {\n+\t    tree tmp;\n+\t    ret = stv_secondarg;\n+\t    /* Swap TYPE0 with TYPE1 and OP0 with OP1  */\n+\t    tmp = type0; type0 = type1; type1 = tmp;\n+\t    tmp = op0; op0 = op1; op1 = tmp;\n+\t  }\n+\n+\tif (TREE_CODE (type0) == INTEGER_TYPE\n+\t    && TREE_CODE (TREE_TYPE (type1)) == INTEGER_TYPE)\n+\t  {\n+\t    if (unsafe_conversion_p (TREE_TYPE (type1), op0, false))\n+\t      {\n+\t\tif (complain)\n+\t\t  error_at (loc, \"conversion of scalar %qT to vector %qT \"\n+\t\t\t    \"involves truncation\", type0, type1);\n+\t\treturn stv_error;\n+\t      }\n+\t    return ret;\n+\t  }\n+\telse if (!integer_only_op\n+\t\t    /* Allow integer --> real conversion if safe.  */\n+\t\t && (TREE_CODE (type0) == REAL_TYPE\n+\t\t     || TREE_CODE (type0) == INTEGER_TYPE)\n+\t\t && SCALAR_FLOAT_TYPE_P (TREE_TYPE (type1)))\n+\t  {\n+\t    if (unsafe_conversion_p (TREE_TYPE (type1), op0, false))\n+\t      {\n+\t\tif (complain)\n+\t\t  error_at (loc, \"conversion of scalar %qT to vector %qT \"\n+\t\t\t    \"involves truncation\", type0, type1);\n+\t\treturn stv_error;\n+\t      }\n+\t    return ret;\n+\t  }\n+      default:\n+\tbreak;\n+    }\n+\n+  return stv_nothing;\n+}\n+\n /* Return true iff ALIGN is an integral constant that is a fundamental\n    alignment, as defined by [basic.align] in the c++-11\n    specifications."}, {"sha": "481c3ed0617e605975928a6a21d0d506c8dceff4", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=a212e43fca22f730987ad4d15a0bd58efae9677e", "patch": "@@ -1123,4 +1123,15 @@ extern tree build_userdef_literal (tree suffix_id, tree value, tree num_string);\n \n extern void convert_vector_to_pointer_for_subscript (location_t, tree*, tree);\n \n+/* Possibe cases of scalar_to_vector conversion.  */\n+enum stv_conv {\n+  stv_error,        /* Error occured.  */\n+  stv_nothing,      /* Nothing happened.  */\n+  stv_firstarg,     /* First argument must be expanded.  */\n+  stv_secondarg     /* Second argument must be expanded.  */\n+};\n+\n+extern enum stv_conv scalar_to_vector (location_t loc, enum tree_code code,\n+\t\t\t\t       tree op0, tree op1, bool);\n+\n #endif /* ! GCC_C_COMMON_H */"}, {"sha": "93c72f0c69f3b7384b45e043cf92efd482e69198", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=a212e43fca22f730987ad4d15a0bd58efae9677e", "patch": "@@ -1,3 +1,12 @@\n+2012-10-09  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/54427\n+\t* c-typeck.c: Include c-common.h.\n+\t(enum stv_conv): Moved to c-common.h.\n+\t(scalar_to_vector): Moved to c-common.c.\n+\t(build_binary_op): Adapt to scalar_to_vector's new prototype.\n+\t* Make-lang.in: c-typeck.c depends on c-common.h.\n+\n 2012-10-04  Arnaud Charlet  <charlet@adacore.com>\n \n \t* c-decl.c (c_write_global_declarations): Fix handling of"}, {"sha": "93b8f64872d8e1f7cc1cd707a5e7f2f4804182c1", "filename": "gcc/c/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Fc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Fc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FMake-lang.in?ref=a212e43fca22f730987ad4d15a0bd58efae9677e", "patch": "@@ -192,5 +192,5 @@ c/c-parser.o : c/c-parser.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n c/c-typeck.o : c/c-typeck.c c/c-lang.h $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t$(TREE_H) $(C_TREE_H) $(TARGET_H) $(FLAGS_H) intl.h \\\n \tlanghooks.h tree-iterator.h $(BITMAP_H) $(GIMPLE_H) \\\n-\tc-family/c-objc.h\n+\tc-family/c-objc.h c-family/c-common.h\n "}, {"sha": "ae6b3484b95fabc22e2ef8c34fdb7c70113ddae5", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 3, "deletions": 91, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=a212e43fca22f730987ad4d15a0bd58efae9677e", "patch": "@@ -40,6 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"bitmap.h\"\n #include \"gimple.h\"\n #include \"c-family/c-objc.h\"\n+#include \"c-family/c-common.h\"\n \n /* Possible cases of implicit bad conversions.  Used to select\n    diagnostic messages in convert_for_assignment.  */\n@@ -50,14 +51,6 @@ enum impl_conv {\n   ic_return\n };\n \n-/* Possibe cases of scalar_to_vector conversion.  */\n-enum stv_conv {\n-  stv_error,        /* Error occured.  */\n-  stv_nothing,      /* Nothing happened.  */\n-  stv_firstarg,     /* First argument must be expanded.  */\n-  stv_secondarg     /* Second argument must be expanded.  */\n-};\n-\n /* The level of nesting inside \"__alignof__\".  */\n int in_alignof;\n \n@@ -9375,88 +9368,6 @@ push_cleanup (tree decl, tree cleanup, bool eh_only)\n   TREE_OPERAND (stmt, 0) = list;\n   STATEMENT_LIST_STMT_EXPR (list) = stmt_expr;\n }\n-\n-/* Convert scalar to vector for the range of operations.  */\n-static enum stv_conv\n-scalar_to_vector (location_t loc, enum tree_code code, tree op0, tree op1)\n-{\n-  tree type0 = TREE_TYPE (op0);\n-  tree type1 = TREE_TYPE (op1);\n-  bool integer_only_op = false;\n-  enum stv_conv ret = stv_firstarg;\n-\n-  gcc_assert (TREE_CODE (type0) == VECTOR_TYPE\n-\t      || TREE_CODE (type1) == VECTOR_TYPE);\n-  switch (code)\n-    {\n-      case RSHIFT_EXPR:\n-      case LSHIFT_EXPR:\n-\tif (TREE_CODE (type0) == INTEGER_TYPE\n-\t    && TREE_CODE (TREE_TYPE (type1)) == INTEGER_TYPE)\n-\t  {\n-\t    if (unsafe_conversion_p (TREE_TYPE (type1), op0, false))\n-\t      {\n-\t\terror_at (loc, \"conversion of scalar to vector \"\n-\t\t\t       \"involves truncation\");\n-\t\treturn stv_error;\n-\t      }\n-\t    else\n-\t      return stv_firstarg;\n-\t  }\n-\tbreak;\n-\n-      case BIT_IOR_EXPR:\n-      case BIT_XOR_EXPR:\n-      case BIT_AND_EXPR:\n-\tinteger_only_op = true;\n-\t/* ... fall through ...  */\n-\n-      case PLUS_EXPR:\n-      case MINUS_EXPR:\n-      case MULT_EXPR:\n-      case TRUNC_DIV_EXPR:\n-      case TRUNC_MOD_EXPR:\n-      case RDIV_EXPR:\n-\tif (TREE_CODE (type0) == VECTOR_TYPE)\n-\t  {\n-\t    tree tmp;\n-\t    ret = stv_secondarg;\n-\t    /* Swap TYPE0 with TYPE1 and OP0 with OP1  */\n-\t    tmp = type0; type0 = type1; type1 = tmp;\n-\t    tmp = op0; op0 = op1; op1 = tmp;\n-\t  }\n-\n-\tif (TREE_CODE (type0) == INTEGER_TYPE\n-\t    && TREE_CODE (TREE_TYPE (type1)) == INTEGER_TYPE)\n-\t  {\n-\t    if (unsafe_conversion_p (TREE_TYPE (type1), op0, false))\n-\t      {\n-\t\terror_at (loc, \"conversion of scalar to vector \"\n-\t\t\t       \"involves truncation\");\n-\t\treturn stv_error;\n-\t      }\n-\t    return ret;\n-\t  }\n-\telse if (!integer_only_op\n-\t\t    /* Allow integer --> real conversion if safe.  */\n-\t\t && (TREE_CODE (type0) == REAL_TYPE\n-\t\t     || TREE_CODE (type0) == INTEGER_TYPE)\n-\t\t && SCALAR_FLOAT_TYPE_P (TREE_TYPE (type1)))\n-\t  {\n-\t    if (unsafe_conversion_p (TREE_TYPE (type1), op0, false))\n-\t      {\n-\t\terror_at (loc, \"conversion of scalar to vector \"\n-\t\t\t       \"involves truncation\");\n-\t\treturn stv_error;\n-\t      }\n-\t    return ret;\n-\t  }\n-      default:\n-\tbreak;\n-    }\n-\n-  return stv_nothing;\n-}\n \f\n /* Build a binary-operation expression without default conversions.\n    CODE is the kind of expression to build.\n@@ -9647,7 +9558,8 @@ build_binary_op (location_t location, enum tree_code code,\n      a vector and another is a scalar -- convert scalar to vector.  */\n   if ((code0 == VECTOR_TYPE) != (code1 == VECTOR_TYPE))\n     {\n-      enum stv_conv convert_flag = scalar_to_vector (location, code, op0, op1);\n+      enum stv_conv convert_flag = scalar_to_vector (location, code, op0, op1,\n+\t\t\t\t\t\t     true);\n \n       switch (convert_flag)\n \t{"}, {"sha": "4c1d01abc8e76fe8f0812bd50934637ac0e09674", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a212e43fca22f730987ad4d15a0bd58efae9677e", "patch": "@@ -1,3 +1,10 @@\n+2012-10-09  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/54427\n+\t* typeck.c (cp_build_binary_op): Handle mixed scalar-vector\n+\toperations.\n+\t[LSHIFT_EXPR, RSHIFT_EXPR]: Likewise.\n+\n 2012-10-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/54858"}, {"sha": "94e17c5aa002fc2fad2a4005c1bdc4fd7deb5a80", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a212e43fca22f730987ad4d15a0bd58efae9677e", "patch": "@@ -3912,6 +3912,40 @@ cp_build_binary_op (location_t location,\n       warning_at (loc, OPT_Wpointer_arith, \"NULL used in arithmetic\");\n     }\n \n+  /* In case when one of the operands of the binary operation is\n+     a vector and another is a scalar -- convert scalar to vector.  */\n+  if ((code0 == VECTOR_TYPE) != (code1 == VECTOR_TYPE))\n+    {\n+      enum stv_conv convert_flag = scalar_to_vector (location, code, op0, op1,\n+\t\t\t\t\t\t     complain & tf_error);\n+\n+      switch (convert_flag)\n+        {\n+          case stv_error:\n+            return error_mark_node;\n+          case stv_firstarg:\n+            {\n+              op0 = convert (TREE_TYPE (type1), op0);\n+              op0 = build_vector_from_val (type1, op0);\n+              type0 = TREE_TYPE (op0);\n+              code0 = TREE_CODE (type0);\n+              converted = 1;\n+              break;\n+            }\n+          case stv_secondarg:\n+            {\n+              op1 = convert (TREE_TYPE (type0), op1);\n+              op1 = build_vector_from_val (type0, op1);\n+              type1 = TREE_TYPE (op1);\n+              code1 = TREE_CODE (type1);\n+              converted = 1;\n+              break;\n+            }\n+          default:\n+            break;\n+        }\n+    }\n+\n   switch (code)\n     {\n     case MINUS_EXPR:\n@@ -4035,7 +4069,13 @@ cp_build_binary_op (location_t location,\n \t Also set SHORT_SHIFT if shifting rightward.  */\n \n     case RSHIFT_EXPR:\n-      if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE\n+      if (code0 == VECTOR_TYPE && code1 == INTEGER_TYPE\n+          && TREE_CODE (TREE_TYPE (type0)) == INTEGER_TYPE)\n+        {\n+          result_type = type0;\n+          converted = 1;\n+        }\n+      else if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE\n \t  && TREE_CODE (TREE_TYPE (type0)) == INTEGER_TYPE\n \t  && TREE_CODE (TREE_TYPE (type1)) == INTEGER_TYPE\n \t  && TYPE_VECTOR_SUBPARTS (type0) == TYPE_VECTOR_SUBPARTS (type1))\n@@ -4072,7 +4112,13 @@ cp_build_binary_op (location_t location,\n       break;\n \n     case LSHIFT_EXPR:\n-      if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE\n+      if (code0 == VECTOR_TYPE && code1 == INTEGER_TYPE\n+          && TREE_CODE (TREE_TYPE (type0)) == INTEGER_TYPE)\n+        {\n+          result_type = type0;\n+          converted = 1;\n+        }\n+      else if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE\n \t  && TREE_CODE (TREE_TYPE (type0)) == INTEGER_TYPE\n \t  && TREE_CODE (TREE_TYPE (type1)) == INTEGER_TYPE\n \t  && TYPE_VECTOR_SUBPARTS (type0) == TYPE_VECTOR_SUBPARTS (type1))"}, {"sha": "9dabfabcec8d276cfd3e8f9d67ee239be1592bd4", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=a212e43fca22f730987ad4d15a0bd58efae9677e", "patch": "@@ -12857,7 +12857,7 @@ fold_binary_loc (location_t loc,\n \t\t  arg00 = fold_convert_loc (loc, itype, arg00);\n \t\t}\n \t      return fold_build2_loc (loc, code == EQ_EXPR ? GE_EXPR : LT_EXPR,\n-\t\t\t\t  type, arg00, build_int_cst (itype, 0));\n+\t\t\t\t  type, arg00, build_zero_cst (itype));\n \t    }\n \t}\n "}, {"sha": "dc996533ea21d7a070ef80e8d19566b5782ef523", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a212e43fca22f730987ad4d15a0bd58efae9677e", "patch": "@@ -1,3 +1,21 @@\n+2012-10-09  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/54427\n+\t* c-c++-common/vector-scalar.c: New testcase.\n+\t* g++.dg/ext/vector18.C: New testcase.\n+\t* g++.dg/ext/vector5.C: This is not an error anymore.\n+\t* gcc.dg/init-vec-1.c: Move ...\n+\t* c-c++-common/init-vec-1.c: ... here. Adapt error message.\n+\t* gcc.c-torture/execute/vector-shift1.c: Move ...\n+\t* c-c++-common/torture/vector-shift1.c: ... here.\n+\t* gcc.dg/scal-to-vec1.c: Move ...\n+\t* c-c++-common/scal-to-vec1.c: ... here. Avoid narrowing for\n+\tC++11. Adapt error messages.\n+\t* gcc.dg/convert-vec-1.c: Move ...\n+\t* c-c++-common/convert-vec-1.c: ... here.\n+\t* gcc.dg/scal-to-vec2.c: Move ...\n+\t* c-c++-common/scal-to-vec2.c: ... here.\n+\n 2012-10-08  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR target/54400"}, {"sha": "4987298407363ea7269dc178a5ec9f12bc887f48", "filename": "gcc/testsuite/c-c++-common/convert-vec-1.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconvert-vec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconvert-vec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconvert-vec-1.c?ref=a212e43fca22f730987ad4d15a0bd58efae9677e", "previous_filename": "gcc/testsuite/gcc.dg/convert-vec-1.c"}, {"sha": "68243cd302f812ebf8293957c1452ff1e945e4e0", "filename": "gcc/testsuite/c-c++-common/init-vec-1.c", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Finit-vec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Finit-vec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Finit-vec-1.c?ref=a212e43fca22f730987ad4d15a0bd58efae9677e", "patch": "@@ -1,4 +1,4 @@\n /* Don't ICE or emit spurious errors when init a vector with a scalar.  */\n /* { dg-do compile } */\n typedef float v2sf __attribute__ ((vector_size (8)));\n-v2sf a = 0.0;  /* { dg-error \"incompatible types\" } */\n+v2sf a = 0.0;  /* { dg-error \"incompatible types|cannot convert\" } */", "previous_filename": "gcc/testsuite/gcc.dg/init-vec-1.c"}, {"sha": "beb450db624fd816b31226b4d98c8326983558a0", "filename": "gcc/testsuite/c-c++-common/scal-to-vec1.c", "status": "renamed", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fscal-to-vec1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fscal-to-vec1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fscal-to-vec1.c?ref=a212e43fca22f730987ad4d15a0bd58efae9677e", "patch": "@@ -13,7 +13,7 @@ extern int   sint;\n extern long long sll;\n \n int main (int argc, char *argv[]) {\n-    vector(8, short) v0 = {argc, 1,2,3,4,5,6,7};\n+    vector(8, short) v0 = {(short)argc, 1,2,3,4,5,6,7};\n     vector(8, short) v1;\n \n     vector(4, float) f0 = {1., 2., 3., 4.};\n@@ -26,18 +26,18 @@ int main (int argc, char *argv[]) {\n     int     i = 12;\n     double  d = 3.;\n \n-    v1 = i + v0;        /* { dg-error \"conversion of scalar to vector\" } */\n-    v1 = 99999 + v0;    /* { dg-error \"conversion of scalar to vector\" } */\n+    v1 = i + v0;        /* { dg-error \"conversion of scalar \\[^\\\\n\\]* to vector\" } */\n+    v1 = 99999 + v0;    /* { dg-error \"conversion of scalar \\[^\\\\n\\]* to vector\" } */\n \n-    f1 = d + f0;        /* { dg-error \"conversion of scalar to vector\" } */\n-    f1 = 1.3 + f0;      /* { dg-error \"conversion of scalar to vector\" } */\n-    f1 = sll + f0;      /* { dg-error \"conversion of scalar to vector\" } */\n-    f1 = ((int)998769576) + f0; /* { dg-error \"conversion of scalar to vector\" } */\n+    f1 = d + f0;        /* { dg-error \"conversion of scalar \\[^\\\\n\\]* to vector\" } */\n+    f1 = 1.3 + f0;      /* { dg-error \"conversion of scalar \\[^\\\\n\\]* to vector\" } */\n+    f1 = sll + f0;      /* { dg-error \"conversion of scalar \\[^\\\\n\\]* to vector\" } */\n+    f1 = ((int)998769576) + f0; /* { dg-error \"conversion of scalar \\[^\\\\n\\]* to vector\" } */\n \n     /* convert.c should take care of this.  */\n-    i1 = sfl + i0;      /* { dg-error \"can't convert value to a vector\" } */\n-    i1 = 1.5 + i0;      /* { dg-error \"can't convert value to a vector\" } */\n-    v1 = d + v0;        /* { dg-error \"can't convert value to a vector\" } */\n+    i1 = sfl + i0;      /* { dg-error \"can't convert value to a vector|invalid operands\" } */\n+    i1 = 1.5 + i0;      /* { dg-error \"can't convert value to a vector|invalid operands\" } */\n+    v1 = d + v0;        /* { dg-error \"can't convert value to a vector|invalid operands\" } */\n \n     return 0;\n }", "previous_filename": "gcc/testsuite/gcc.dg/scal-to-vec1.c"}, {"sha": "1897b93e050d391efa3a6574204f78ad714ccad1", "filename": "gcc/testsuite/c-c++-common/scal-to-vec2.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fscal-to-vec2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fscal-to-vec2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fscal-to-vec2.c?ref=a212e43fca22f730987ad4d15a0bd58efae9677e", "previous_filename": "gcc/testsuite/gcc.dg/scal-to-vec2.c"}, {"sha": "e6e31daf57873e428f9828e19f3150561b357a17", "filename": "gcc/testsuite/c-c++-common/torture/vector-shift1.c", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvector-shift1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvector-shift1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fvector-shift1.c?ref=a212e43fca22f730987ad4d15a0bd58efae9677e", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-do run } */\n #define vector __attribute__((vector_size(8*sizeof(short))))\n \n int main (int argc, char *argv[]) {", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/vector-shift1.c"}, {"sha": "1b32cc67bddde5debfe0bda987fc10a303c2d14f", "filename": "gcc/testsuite/c-c++-common/vector-scalar.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-scalar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-scalar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-scalar.c?ref=a212e43fca22f730987ad4d15a0bd58efae9677e", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+\n+typedef float vecf __attribute__ ((vector_size (4 * sizeof (float))));\n+typedef short veci __attribute__ ((vector_size (8 * sizeof (short))));\n+\n+void f (vecf *d, veci *i)\n+{\n+  (void) ((*d *= 2) < 0);\n+  (void) ((((*i - 1) >> 2) != 0) | *i);\n+}"}, {"sha": "dfffad5af761f5b5c7e2511251887b6b9a789273", "filename": "gcc/testsuite/g++.dg/ext/vector18.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector18.C?ref=a212e43fca22f730987ad4d15a0bd58efae9677e", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c++11\" } */\n+\n+typedef signed char __attribute__((vector_size(128) )) vec;\n+\n+template <class A, class B>\n+auto f (A *a, B b) -> decltype (*a + b);\n+\n+void f (...) {}\n+\n+void g (vec *v, long long l)\n+{\n+  f (v, l);\n+}"}, {"sha": "68f711fe233ce600e2f5ebea9195acb701f19483", "filename": "gcc/testsuite/g++.dg/ext/vector5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a212e43fca22f730987ad4d15a0bd58efae9677e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector5.C?ref=a212e43fca22f730987ad4d15a0bd58efae9677e", "patch": "@@ -4,5 +4,5 @@\n void foo()\n {\n   int __attribute__((vector_size(8))) v;\n-  v = 1/v;  // { dg-error \"invalid operands of types\" }\n+  v = 1/v;\n }"}]}