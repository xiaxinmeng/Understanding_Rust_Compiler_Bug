{"sha": "3e4093b64f2e2623bba32e733e7e8f08efc700ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U0MDkzYjY0ZjJlMjYyM2JiYTMyZTczM2U3ZThmMDhlZmM3MDBhYw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-07-18T00:26:51Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-07-18T00:26:51Z"}, "message": "fold-const.c (const_binop): Avoid performing the FP operation at compile-time...\n\n\n\t* fold-const.c (const_binop): Avoid performing the FP operation at\n\tcompile-time, if either operand is NaN and we honor signaling NaNs,\n\tor if we're dividing by zero and either flag_trapping_math is set\n\tor the desired mode doesn't support infinities.\n\t(fold_initializer): New function to fold an expression ignoring any\n\tpotential run-time exceptions or traps.\n\t* tree.h (fold_initializer): Prototype here.\n\t* c-typeck.c (build_binary_op): Move to the end of the file so\n\tthat intializer_stack is in scope.  If constructing an initializer,\n\ti.e. when initializer_stack is not NULL, use fold_initializer to\n\tfold expressions.\n\t* simplify-rtx.c (simplify_binary_operation): Likewise, avoid\n\tperforming FP operations at compile-time, if they would raise an\n\texception at run-time.\n\nFrom-SVN: r69533", "tree": {"sha": "3875a0446ee77a593d30fb10e6a14b62fcc0f4ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3875a0446ee77a593d30fb10e6a14b62fcc0f4ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e4093b64f2e2623bba32e733e7e8f08efc700ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e4093b64f2e2623bba32e733e7e8f08efc700ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e4093b64f2e2623bba32e733e7e8f08efc700ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e4093b64f2e2623bba32e733e7e8f08efc700ac/comments", "author": null, "committer": null, "parents": [{"sha": "35c77862c921a82a9d2bc4175dc041bd1e99e2bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35c77862c921a82a9d2bc4175dc041bd1e99e2bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35c77862c921a82a9d2bc4175dc041bd1e99e2bd"}], "stats": {"total": 8775, "additions": 4420, "deletions": 4355}, "files": [{"sha": "dfff20cdaa4b81e535915b9b36417a068c15510c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4093b64f2e2623bba32e733e7e8f08efc700ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4093b64f2e2623bba32e733e7e8f08efc700ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e4093b64f2e2623bba32e733e7e8f08efc700ac", "patch": "@@ -1,3 +1,20 @@\n+2003-07-17  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (const_binop): Avoid performing the FP operation at\n+\tcompile-time, if either operand is NaN and we honor signaling NaNs,\n+\tor if we're dividing by zero and either flag_trapping_math is set\n+\tor the desired mode doesn't support infinities.\n+\t(fold_initializer): New function to fold an expression ignoring any\n+\tpotential run-time exceptions or traps.\n+\t* tree.h (fold_initializer): Prototype here.\n+\t* c-typeck.c (build_binary_op): Move to the end of the file so\n+\tthat intializer_stack is in scope.  If constructing an initializer,\n+\ti.e. when initializer_stack is not NULL, use fold_initializer to\n+\tfold expressions.\n+\t* simplify-rtx.c (simplify_binary_operation): Likewise, avoid\n+\tperforming FP operations at compile-time, if they would raise an\n+\texception at run-time.\n+\n 2003-07-17  Geoffrey Keating  <geoffk@apple.com>\n \n \tPR 11498"}, {"sha": "c4154deb833047243fda267e3e53201e506f717a", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 4352, "deletions": 4349, "changes": 8701, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4093b64f2e2623bba32e733e7e8f08efc700ac/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4093b64f2e2623bba32e733e7e8f08efc700ac/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=3e4093b64f2e2623bba32e733e7e8f08efc700ac"}, {"sha": "32c145effe135bc39033db19ab0824f6a0112ee0", "filename": "gcc/fold-const.c", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4093b64f2e2623bba32e733e7e8f08efc700ac/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4093b64f2e2623bba32e733e7e8f08efc700ac/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=3e4093b64f2e2623bba32e733e7e8f08efc700ac", "patch": "@@ -1228,14 +1228,31 @@ const_binop (enum tree_code code, tree arg1, tree arg2, int notrunc)\n \n   if (TREE_CODE (arg1) == REAL_CST)\n     {\n+      enum machine_mode mode;\n       REAL_VALUE_TYPE d1;\n       REAL_VALUE_TYPE d2;\n       REAL_VALUE_TYPE value;\n-      tree t;\n+      tree t, type;\n \n       d1 = TREE_REAL_CST (arg1);\n       d2 = TREE_REAL_CST (arg2);\n \n+      type = TREE_TYPE (arg1);\n+      mode = TYPE_MODE (type);\n+\n+      /* Don't perform operation if we honor signaling NaNs and\n+\t either operand is a NaN.  */\n+      if (HONOR_SNANS (mode)\n+\t  && (REAL_VALUE_ISNAN (d1) || REAL_VALUE_ISNAN (d2)))\n+\treturn NULL_TREE;\n+\n+      /* Don't perform operation if it would raise a division\n+\t by zero exception.  */\n+      if (code == RDIV_EXPR\n+\t  && REAL_VALUES_EQUAL (d2, dconst0)\n+\t  && (flag_trapping_math || ! MODE_HAS_INFINITIES (mode)))\n+\treturn NULL_TREE;\n+\n       /* If either operand is a NaN, just return it.  Otherwise, set up\n \t for floating-point trap; we return an overflow.  */\n       if (REAL_VALUE_ISNAN (d1))\n@@ -1245,9 +1262,7 @@ const_binop (enum tree_code code, tree arg1, tree arg2, int notrunc)\n \n       REAL_ARITHMETIC (value, code, d1, d2);\n \n-      t = build_real (TREE_TYPE (arg1),\n-\t\t      real_value_truncate (TYPE_MODE (TREE_TYPE (arg1)),\n-\t\t\t\t\t   value));\n+      t = build_real (type, real_value_truncate (mode, value));\n \n       TREE_OVERFLOW (t)\n \t= (force_fit_type (t, 0)\n@@ -7886,6 +7901,31 @@ fold (tree expr)\n     } /* switch (code) */\n }\n \n+/* Perform constant folding and related simplification of intializer\n+   expression EXPR.  This behaves identically to \"fold\" but ignores\n+   potential run-time traps and exceptions that fold must preserve.  */\n+\n+tree\n+fold_initializer (tree expr)\n+{\n+  int saved_signaling_nans = flag_signaling_nans;\n+  int saved_trapping_math = flag_trapping_math;\n+  int saved_trapv = flag_trapv;\n+  tree result;\n+\n+  flag_signaling_nans = 0;\n+  flag_trapping_math = 0;\n+  flag_trapv = 0;\n+\n+  result = fold (expr);\n+\n+  flag_signaling_nans = saved_signaling_nans;\n+  flag_trapping_math = saved_trapping_math;\n+  flag_trapv = saved_trapv;\n+\n+  return result;\n+}\n+\n /* Determine if first argument is a multiple of second argument.  Return 0 if\n    it is not, or we cannot easily determined it to be.\n "}, {"sha": "8568529ef87b2dad775a3c36576a00efb68d67dd", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4093b64f2e2623bba32e733e7e8f08efc700ac/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4093b64f2e2623bba32e733e7e8f08efc700ac/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=3e4093b64f2e2623bba32e733e7e8f08efc700ac", "patch": "@@ -929,9 +929,13 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n       f0 = real_value_truncate (mode, f0);\n       f1 = real_value_truncate (mode, f1);\n \n+      if (HONOR_SNANS (mode)\n+\t  && (REAL_VALUE_ISNAN (f0) || REAL_VALUE_ISNAN (f1)))\n+\treturn 0;\n+\n       if (code == DIV\n-\t  && !MODE_HAS_INFINITIES (mode)\n-\t  && REAL_VALUES_EQUAL (f1, dconst0))\n+\t  && REAL_VALUES_EQUAL (f1, dconst0)\n+\t  && (flag_trapping_math || ! MODE_HAS_INFINITIES (mode)))\n \treturn 0;\n \n       REAL_ARITHMETIC (value, rtx_to_tree_code (code), f0, f1);"}, {"sha": "b627a98c51cab7888299ebf24ec18fb94320d6a5", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4093b64f2e2623bba32e733e7e8f08efc700ac/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4093b64f2e2623bba32e733e7e8f08efc700ac/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=3e4093b64f2e2623bba32e733e7e8f08efc700ac", "patch": "@@ -2715,6 +2715,7 @@ extern void using_eh_for_cleanups (void);\n    subexpressions are not changed.  */\n \n extern tree fold (tree);\n+extern tree fold_initializer (tree);\n extern tree fold_single_bit_test (enum tree_code, tree, tree, tree);\n \n extern int force_fit_type (tree, int);"}]}