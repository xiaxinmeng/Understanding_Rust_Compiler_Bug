{"sha": "e2c314329351294b1b8c68e6c048bbb08f9707fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJjMzE0MzI5MzUxMjk0YjFiOGM2OGU2YzA0OGJiYjA4Zjk3MDdmYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-10-28T22:59:08Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-10-28T22:59:08Z"}, "message": "tree.c (append_random_chars): New fn.\n\n\t* tree.c (append_random_chars): New fn.\n\t(get_file_function_name_long): Use it.\n\nFrom-SVN: r23416", "tree": {"sha": "b82e69fbd26bbe49586696ca188d33e28b774f94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b82e69fbd26bbe49586696ca188d33e28b774f94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2c314329351294b1b8c68e6c048bbb08f9707fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2c314329351294b1b8c68e6c048bbb08f9707fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2c314329351294b1b8c68e6c048bbb08f9707fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2c314329351294b1b8c68e6c048bbb08f9707fa/comments", "author": null, "committer": null, "parents": [{"sha": "19283265adf53e051a1f372086526b87762bc246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19283265adf53e051a1f372086526b87762bc246", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19283265adf53e051a1f372086526b87762bc246"}], "stats": {"total": 79, "additions": 72, "deletions": 7}, "files": [{"sha": "4df732b068540c71cd589452910308715233be1f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c314329351294b1b8c68e6c048bbb08f9707fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c314329351294b1b8c68e6c048bbb08f9707fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2c314329351294b1b8c68e6c048bbb08f9707fa", "patch": "@@ -1,3 +1,8 @@\n+Wed Oct 28 22:58:35 1998  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* tree.c (append_random_chars): New fn.\n+\t(get_file_function_name_long): Use it.\n+\n Wed Oct 28 22:27:05 1998  Richard Henderson  <rth@cygnus.com>\n \n \t* Makefile.in (cc1): Put C_OBJS, and thence @extra_c_objs@ last."}, {"sha": "6eb138f168b304a63e8651fbdcb0594630d0ab9e", "filename": "gcc/tree.c", "status": "modified", "additions": 67, "deletions": 7, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2c314329351294b1b8c68e6c048bbb08f9707fa/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2c314329351294b1b8c68e6c048bbb08f9707fa/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=e2c314329351294b1b8c68e6c048bbb08f9707fa", "patch": "@@ -265,6 +265,7 @@ int (*lang_get_alias_set) PROTO((tree));\n #define TYPE_HASH(TYPE) ((unsigned long) (TYPE) & 0777777)\n \n static void set_type_quals PROTO((tree, int));\n+static void append_random_chars PROTO((char *));\n \n extern char *mode_name[];\n \n@@ -4820,8 +4821,55 @@ dump_tree_statistics ()\n extern char * first_global_object_name;\n extern char * weak_global_object_name;\n \n-/* TYPE is some string to identify this function to the linker or\n-   collect2.  */\n+/* Appends 6 random characters to TEMPLATE to (hopefully) avoid name\n+   clashes in cases where we can't reliably choose a unique name.\n+\n+   Derived from mkstemp.c in libiberty.  */\n+\n+static void\n+append_random_chars (template)\n+     char *template;\n+{\n+  static const char letters[]\n+    = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n+  static unsigned HOST_WIDE_INT value;\n+  unsigned HOST_WIDE_INT v;\n+\n+#ifdef HAVE_GETTIMEOFDAY\n+  struct timeval tv;\n+#endif\n+\n+  template += strlen (template);\n+\n+#ifdef HAVE_GETTIMEOFDAY\n+  /* Get some more or less random data.  */\n+  gettimeofday (&tv, NULL);\n+  value += ((unsigned HOST_WIDE_INT) tv.tv_usec << 16) ^ tv.tv_sec ^ getpid ();\n+#else\n+  value += getpid ();\n+#endif\n+\n+  v = value;\n+\n+  /* Fill in the random bits.  */\n+  template[0] = letters[v % 62];\n+  v /= 62;\n+  template[1] = letters[v % 62];\n+  v /= 62;\n+  template[2] = letters[v % 62];\n+  v /= 62;\n+  template[3] = letters[v % 62];\n+  v /= 62;\n+  template[4] = letters[v % 62];\n+  v /= 62;\n+  template[5] = letters[v % 62];\n+\n+  template[6] = '\\0';\n+}\n+\n+/* Generate a name for a function unique to this translation unit.\n+   TYPE is some string to identify the purpose of this function to the\n+   linker or collect2.  */\n \n tree\n get_file_function_name_long (type)\n@@ -4832,12 +4880,24 @@ get_file_function_name_long (type)\n \n   if (first_global_object_name)\n     p = first_global_object_name;\n-  else if (weak_global_object_name)\n-    p = weak_global_object_name;\n-  else if (main_input_filename)\n-    p = main_input_filename;\n   else\n-    p = input_filename;\n+    {\n+      /* We don't have anything that we know to be unique to this translation\n+\t unit, so use what we do have and throw in some randomness.  */\n+\n+      char *name = weak_global_object_name;\n+      char *file = main_input_filename;\n+\n+      if (! name)\n+\tname = \"\";\n+      if (! file)\n+\tfile = input_filename;\n+\n+      p = (char *) alloca (7 + strlen (name) + strlen (file));\n+\n+      sprintf (p, \"%s%s\", name, file);\n+      append_random_chars (p);\n+    }\n \n   buf = (char *) alloca (sizeof (FILE_FUNCTION_FORMAT) + strlen (p)\n \t\t\t + strlen (type));"}]}