{"sha": "32489ab56a9ec26aa2342c50bc6d40c95d353777", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI0ODlhYjU2YTllYzI2YWEyMzQyYzUwYmM2ZDQwYzk1ZDM1Mzc3Nw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-01-04T10:21:29Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-01-04T10:21:29Z"}, "message": "PR libstdc++/83607 specialize Boyer-Moore searchers for std::byte\n\n\tPR libstdc++/83607\n\t* include/std/functional (__is_byte_like): New trait.\n\t(__is_std_equal_to): Remove.\n\t(__boyer_moore_base_t): Use __is_byte_like instead of\n\t__is_std_equal_to.\n\t* include/experimental/functional (__is_std_equal_to): Remove.\n\t(__boyer_moore_base_t): Use __is_byte_like instead of\n\t__is_std_equal_to.\n\t* testsuite/20_util/function_objects/83607.cc: New test.\n\nFrom-SVN: r256231", "tree": {"sha": "659486118b0dff95e27cb72b4ba400ff6cba8120", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/659486118b0dff95e27cb72b4ba400ff6cba8120"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32489ab56a9ec26aa2342c50bc6d40c95d353777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32489ab56a9ec26aa2342c50bc6d40c95d353777", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32489ab56a9ec26aa2342c50bc6d40c95d353777", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32489ab56a9ec26aa2342c50bc6d40c95d353777/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb4a3d82a6a485b999a924283929acd643bdc228", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb4a3d82a6a485b999a924283929acd643bdc228", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb4a3d82a6a485b999a924283929acd643bdc228"}], "stats": {"total": 119, "additions": 100, "deletions": 19}, "files": [{"sha": "1fca54f212df7ea9daa2335dcd8bcc0a0653178c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32489ab56a9ec26aa2342c50bc6d40c95d353777/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32489ab56a9ec26aa2342c50bc6d40c95d353777/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=32489ab56a9ec26aa2342c50bc6d40c95d353777", "patch": "@@ -1,3 +1,15 @@\n+2018-01-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/83607\n+\t* include/std/functional (__is_byte_like): New trait.\n+\t(__is_std_equal_to): Remove.\n+\t(__boyer_moore_base_t): Use __is_byte_like instead of\n+\t__is_std_equal_to.\n+\t* include/experimental/functional (__is_std_equal_to): Remove.\n+\t(__boyer_moore_base_t): Use __is_byte_like instead of\n+\t__is_std_equal_to.\n+\t* testsuite/20_util/function_objects/83607.cc: New test.\n+\n 2018-01-03  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tProtect optional's deduction guide with the feature macro"}, {"sha": "de68c802661c1040cb87b7cf166159d53f5ffcf1", "filename": "libstdc++-v3/include/experimental/functional", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32489ab56a9ec26aa2342c50bc6d40c95d353777/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32489ab56a9ec26aa2342c50bc6d40c95d353777/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffunctional?ref=32489ab56a9ec26aa2342c50bc6d40c95d353777", "patch": "@@ -157,20 +157,13 @@ inline namespace fundamentals_v1\n       std::tuple<_GLIBCXX_STD_C::array<_Tp, _Len>, _Pred> _M_bad_char;\n     };\n \n-  template<typename _Pred>\n-    struct __is_std_equal_to : std::false_type { };\n-\n-  template<>\n-    struct __is_std_equal_to<std::equal_to<void>> : std::true_type { };\n-\n   // Use __boyer_moore_array_base when pattern consists of narrow characters\n-  // and uses std::equal_to as the predicate.\n+  // (or std::byte) and uses std::equal_to as the predicate.\n   template<typename _RAIter, typename _Hash, typename _Pred,\n            typename _Val = typename iterator_traits<_RAIter>::value_type,\n \t   typename _Diff = typename iterator_traits<_RAIter>::difference_type>\n     using __boyer_moore_base_t\n-      = std::conditional_t<sizeof(_Val) == 1 && is_integral<_Val>::value\n-\t\t\t   && __is_std_equal_to<_Pred>::value,\n+      = std::conditional_t<std::__is_byte_like<_Val, _Pred>::value,\n \t\t\t   __boyer_moore_array_base<_Diff, 256, _Pred>,\n \t\t\t   __boyer_moore_map_base<_Val, _Diff, _Hash, _Pred>>;\n "}, {"sha": "2b46ba899dd0d981893d212a6bb34a4d8569e0e4", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32489ab56a9ec26aa2342c50bc6d40c95d353777/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32489ab56a9ec26aa2342c50bc6d40c95d353777/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=32489ab56a9ec26aa2342c50bc6d40c95d353777", "patch": "@@ -879,7 +879,29 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Fn _M_fn;\n     };\n \n-#if __cplusplus > 201402L\n+  template<typename _Tp, typename _Pred>\n+    struct __is_byte_like : false_type { };\n+\n+  template<typename _Tp>\n+    struct __is_byte_like<_Tp, equal_to<_Tp>>\n+    : __bool_constant<sizeof(_Tp) == 1 && is_integral<_Tp>::value> { };\n+\n+  template<typename _Tp>\n+    struct __is_byte_like<_Tp, equal_to<void>>\n+    : __bool_constant<sizeof(_Tp) == 1 && is_integral<_Tp>::value> { };\n+\n+#if __cplusplus >= 201703L\n+  // Declare std::byte (full definition is in <cstddef>).\n+  enum class byte : unsigned char;\n+\n+  template<>\n+    struct __is_byte_like<byte, equal_to<byte>>\n+    : true_type { };\n+\n+  template<>\n+    struct __is_byte_like<byte, equal_to<void>>\n+    : true_type { };\n+\n #define __cpp_lib_not_fn 201603\n   /// [func.not_fn] Function template not_fn\n   template<typename _Fn>\n@@ -988,20 +1010,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       tuple<_GLIBCXX_STD_C::array<_Tp, _Len>, _Pred> _M_bad_char;\n     };\n \n-  template<typename _Pred>\n-    struct __is_std_equal_to : false_type { };\n-\n-  template<>\n-    struct __is_std_equal_to<equal_to<void>> : true_type { };\n-\n   // Use __boyer_moore_array_base when pattern consists of narrow characters\n-  // and uses std::equal_to as the predicate.\n+  // (or std::byte) and uses std::equal_to as the predicate.\n   template<typename _RAIter, typename _Hash, typename _Pred,\n            typename _Val = typename iterator_traits<_RAIter>::value_type,\n \t   typename _Diff = typename iterator_traits<_RAIter>::difference_type>\n     using __boyer_moore_base_t\n-      = conditional_t<sizeof(_Val) == 1 && is_integral<_Val>::value\n-\t\t      && __is_std_equal_to<_Pred>::value,\n+      = conditional_t<__is_byte_like<_Val, _Pred>::value,\n \t\t      __boyer_moore_array_base<_Diff, 256, _Pred>,\n \t\t      __boyer_moore_map_base<_Val, _Diff, _Hash, _Pred>>;\n "}, {"sha": "a752ca759a8bcef9478421d9c16cbbc5a0729c45", "filename": "libstdc++-v3/testsuite/20_util/function_objects/83607.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32489ab56a9ec26aa2342c50bc6d40c95d353777/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2F83607.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32489ab56a9ec26aa2342c50bc6d40c95d353777/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2F83607.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2F83607.cc?ref=32489ab56a9ec26aa2342c50bc6d40c95d353777", "patch": "@@ -0,0 +1,61 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <functional>\n+#include <cstddef>\n+\n+// PR libstdc++/83607\n+\n+using std::boyer_moore_searcher;\n+using std::boyer_moore_horspool_searcher;\n+using std::byte;\n+using std::hash;\n+using std::equal_to;\n+\n+void\n+test01()\n+{\n+  constexpr auto expected = sizeof(boyer_moore_searcher<const char*>);\n+  static_assert(sizeof(boyer_moore_searcher<const long*>) != expected);\n+  using T1 = boyer_moore_searcher<char*, hash<char>, equal_to<char>>;\n+  static_assert(sizeof(T1) == expected);\n+  using T2 = boyer_moore_searcher<byte*>;\n+  static_assert(sizeof(T2) == expected);\n+  using T3 = boyer_moore_searcher<const byte*>;\n+  static_assert(sizeof(T3) == expected);\n+  using T4 = boyer_moore_searcher<const byte*, hash<byte>, equal_to<byte>>;\n+  static_assert(sizeof(T4) == expected);\n+}\n+\n+void\n+test02()\n+{\n+  constexpr auto expected = sizeof(boyer_moore_horspool_searcher<const char*>);\n+  static_assert(sizeof(boyer_moore_horspool_searcher<const long*>) != expected);\n+  using T1 = boyer_moore_horspool_searcher<char*, hash<char>, equal_to<char>>;\n+  static_assert(sizeof(T1) == expected);\n+  using T2 = boyer_moore_horspool_searcher<byte*>;\n+  static_assert(sizeof(T2) == expected);\n+  using T3 = boyer_moore_horspool_searcher<const byte*>;\n+  static_assert(sizeof(T3) == expected);\n+  using T4\n+    = boyer_moore_horspool_searcher<const byte*, hash<byte>, equal_to<byte>>;\n+  static_assert(sizeof(T4) == expected);\n+}"}]}