{"sha": "2d2388f82f2e7f2fd1da063192ba98be45f099d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQyMzg4ZjgyZjJlN2YyZmQxZGEwNjMxOTJiYTk4YmU0NWYwOTlkMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-15T08:55:00Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-15T08:55:00Z"}, "message": "[AArch64] Tweak operand choice for SVE predicate AND\n\nSVE defines an assembly alias:\n\n   MOV pa.B, pb/Z, pc.B  ->  AND pa.B. pb/Z, pc.B, pc.B\n\nOur and<mode>3 pattern was instead using the functionally-equivalent:\n\n   AND pa.B. pb/Z, pb.B, pc.B\n                   ^^^^\nThis patch duplicates pc.B instead so that the alias can be seen\nin disassembly.\n\nI wondered about using the alias in the pattern instead, but using AND\nexplicitly seems to fit better with the pattern name and surrounding code.\n\n2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (and<PRED_ALL:mode>3): Make the\n\toperand order match the MOV /Z alias.\n\nFrom-SVN: r274521", "tree": {"sha": "588378ba2fecfeb6906604a46709aa9c4c2733e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/588378ba2fecfeb6906604a46709aa9c4c2733e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d2388f82f2e7f2fd1da063192ba98be45f099d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d2388f82f2e7f2fd1da063192ba98be45f099d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d2388f82f2e7f2fd1da063192ba98be45f099d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d2388f82f2e7f2fd1da063192ba98be45f099d2/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "139df05a29eb71075e42f502978dea4d00a99708", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/139df05a29eb71075e42f502978dea4d00a99708", "html_url": "https://github.com/Rust-GCC/gccrs/commit/139df05a29eb71075e42f502978dea4d00a99708"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "917278ee07ecb0ac6bd260b3f4b71cf81e75e30f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2388f82f2e7f2fd1da063192ba98be45f099d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2388f82f2e7f2fd1da063192ba98be45f099d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d2388f82f2e7f2fd1da063192ba98be45f099d2", "patch": "@@ -1,3 +1,8 @@\n+2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md (and<PRED_ALL:mode>3): Make the\n+\toperand order match the MOV /Z alias.\n+\n 2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_output_sve_cnt_immediate): Take"}, {"sha": "ac65e691d73b16d670c3576e1ad45402f96793dd", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2388f82f2e7f2fd1da063192ba98be45f099d2/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2388f82f2e7f2fd1da063192ba98be45f099d2/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=2d2388f82f2e7f2fd1da063192ba98be45f099d2", "patch": "@@ -3317,12 +3317,14 @@\n ;; -------------------------------------------------------------------------\n \n ;; Predicate AND.  We can reuse one of the inputs as the GP.\n+;; Doubling the second operand is the preferred implementation\n+;; of the MOV alias, so we use that instead of %1/z, %1, %2.\n (define_insn \"and<mode>3\"\n   [(set (match_operand:PRED_ALL 0 \"register_operand\" \"=Upa\")\n \t(and:PRED_ALL (match_operand:PRED_ALL 1 \"register_operand\" \"Upa\")\n \t\t      (match_operand:PRED_ALL 2 \"register_operand\" \"Upa\")))]\n   \"TARGET_SVE\"\n-  \"and\\t%0.b, %1/z, %1.b, %2.b\"\n+  \"and\\t%0.b, %1/z, %2.b, %2.b\"\n )\n \n ;; Unpredicated predicate EOR and ORR."}]}