{"sha": "c41d5a20d34d11109142140a7a1db23d67ddf839", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQxZDVhMjBkMzRkMTExMDkxNDIxNDBhN2ExZGIyM2Q2N2RkZjgzOQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-06-23T20:15:36Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-06-24T10:07:37Z"}, "message": "Handle empty/unit tuple enum variants in the parser.\n\nA tuple enum variant can be empty, in which case it is a unit enum variant.\nHandle this in Parser<ManagedTokenSource>::parse_enum_item by creating\na empty tuple_field vector instead of calling parse_tuple_fields.\n\nAdd a testcase to show empty tuple enum variant types are now accepted.\nBut note some part of the test is commented out because using the enum\ntype isn't actually possible right now.", "tree": {"sha": "de6518392abf835f285e7951c0656d7394333ba2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de6518392abf835f285e7951c0656d7394333ba2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c41d5a20d34d11109142140a7a1db23d67ddf839", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c41d5a20d34d11109142140a7a1db23d67ddf839", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c41d5a20d34d11109142140a7a1db23d67ddf839", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c41d5a20d34d11109142140a7a1db23d67ddf839/comments", "author": null, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "595ae7743c93bfda40a5914d15ae0db2e7e57301", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/595ae7743c93bfda40a5914d15ae0db2e7e57301", "html_url": "https://github.com/Rust-GCC/gccrs/commit/595ae7743c93bfda40a5914d15ae0db2e7e57301"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "9a28f6cdb668ecec6a1c11a6fea23a5409e65094", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41d5a20d34d11109142140a7a1db23d67ddf839/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41d5a20d34d11109142140a7a1db23d67ddf839/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=c41d5a20d34d11109142140a7a1db23d67ddf839", "patch": "@@ -4415,7 +4415,12 @@ Parser<ManagedTokenSource>::parse_enum_item ()\n \t// tuple enum item\n \tlexer.skip_token ();\n \n-\tstd::vector<AST::TupleField> tuple_fields = parse_tuple_fields ();\n+\tstd::vector<AST::TupleField> tuple_fields;\n+\t// Might be empty tuple for unit tuple enum variant.\n+\tif (lexer.peek_token ()->get_id () == RIGHT_PAREN)\n+\t  tuple_fields = std::vector<AST::TupleField> ();\n+\telse\n+\t  tuple_fields = parse_tuple_fields ();\n \n \tif (!skip_token (RIGHT_PAREN))\n \t  {"}, {"sha": "26e3e5d0a715f0ee230be27a600e994cb87d7eb1", "filename": "gcc/testsuite/rust/compile/torture/tuple_enum_variants.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41d5a20d34d11109142140a7a1db23d67ddf839/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftuple_enum_variants.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41d5a20d34d11109142140a7a1db23d67ddf839/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftuple_enum_variants.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftuple_enum_variants.rs?ref=c41d5a20d34d11109142140a7a1db23d67ddf839", "patch": "@@ -0,0 +1,19 @@\n+enum E { T0(), T1(i32), T2(i32,u32) }\n+\n+/* The following doesn't parse yet...\n+fn f(e0: E, e1: E, e2: E) -> (E,E,E,())\n+{\n+  let e = e0;\n+  let f = e1;\n+  let g = e2;\n+  (e,f,g,())\n+}\n+\n+fn main()\n+{\n+  let e0 = E::T0();\n+  let e1 = E::T1(0);\n+  let e2 = E::T2(0,1);\n+  f(e0, e1, e2).3\n+}\n+*/"}]}