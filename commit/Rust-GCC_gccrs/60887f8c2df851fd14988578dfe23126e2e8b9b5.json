{"sha": "60887f8c2df851fd14988578dfe23126e2e8b9b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA4ODdmOGMyZGY4NTFmZDE0OTg4NTc4ZGZlMjMxMjZlMmU4YjliNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-02-15T17:43:01Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-02-15T17:43:01Z"}, "message": "PR preprocessor/83063 - __VA_OPT__ and ##\n\n\tPR preprocessor/83708\n\t* macro.c (vaopt_state): Reorder m_last_was_paste before m_state.\n\t(vaopt_state::vaopt_state): Adjust.\n\t(vaopt_state::update_flags): Add BEGIN and END.\n\t(vaopt_state::update): Return them.\n\t(copy_paste_flag): Factor out of replace_args.\n\t(last_token_is): New.\n\t(replace_args): Handle BEGIN and END.  Avoid padding there.\n\t(tokens_buff_last_token_ptr): Return NULL if no tokens.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r257696", "tree": {"sha": "b86ae939216c83047771ceb8b0eb24c2ce550791", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b86ae939216c83047771ceb8b0eb24c2ce550791"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60887f8c2df851fd14988578dfe23126e2e8b9b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60887f8c2df851fd14988578dfe23126e2e8b9b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60887f8c2df851fd14988578dfe23126e2e8b9b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60887f8c2df851fd14988578dfe23126e2e8b9b5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5cedffbc3249a3f14ea57567a5f089d502cad8d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cedffbc3249a3f14ea57567a5f089d502cad8d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cedffbc3249a3f14ea57567a5f089d502cad8d3"}], "stats": {"total": 284, "additions": 261, "deletions": 23}, "files": [{"sha": "cff2d6cbe5dfa7201b601b8ef3c7f36c9a4f2378", "filename": "gcc/testsuite/c-c++-common/cpp/va-opt-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60887f8c2df851fd14988578dfe23126e2e8b9b5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60887f8c2df851fd14988578dfe23126e2e8b9b5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-2.c?ref=60887f8c2df851fd14988578dfe23126e2e8b9b5", "patch": "@@ -0,0 +1,41 @@\n+/* PR preprocessor/83063 */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" { target c } } */\n+/* { dg-options \"-std=c++2a\" { target c++ } } */\n+\n+#define f1(...) int b##__VA_OPT__(c)\n+#define f2(...) int __VA_OPT__(c)##d\n+#define f3(...) int e##__VA_OPT__()\n+#define f4(...) int __VA_OPT__()##f\n+#define f5(...) int g##__VA_OPT__(h)##i\n+#define f6(...) int j##__VA_OPT__()##k\n+#define f7(...) int l##__VA_OPT__()\n+#define f8(...) int __VA_OPT__()##m\n+#define f9(...) int n##__VA_OPT__()##o\n+#define f10(x, ...) int x##__VA_OPT__(x)\n+#define f11(x, ...) int __VA_OPT__(x)##x\n+#define f12(x, ...) int x##__VA_OPT__(x)##x\n+f1 (1, 2, 3);\n+f1 ();\n+f2 (1, 2);\n+f2 ();\n+f3 (1);\n+f4 (2);\n+f5 (6, 7);\n+f5 ();\n+f6 (8);\n+f7 ();\n+f8 ();\n+f9 ();\n+f10 (p, 5, 6);\n+f10 (p);\n+f11 (q, 7);\n+f11 (q);\n+f12 (r, 1, 2, 3, 4, 5);\n+f12 (r);\n+\n+int\n+main ()\n+{\n+  return bc + b + cd + d + e + f + ghi + gi + jk + l + m + no + pp + p + qq + q + rrr + rr;\n+}"}, {"sha": "1a5a7b2383ed421c87e95d06dcc9d1ced462af91", "filename": "gcc/testsuite/c-c++-common/cpp/va-opt-3.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60887f8c2df851fd14988578dfe23126e2e8b9b5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60887f8c2df851fd14988578dfe23126e2e8b9b5/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-3.c?ref=60887f8c2df851fd14988578dfe23126e2e8b9b5", "patch": "@@ -0,0 +1,94 @@\n+/* PR preprocessor/83063 */\n+/* PR preprocessor/83708 */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=gnu99\" { target c } } */\n+/* { dg-options \"-std=c++2a\" { target c++ } } */\n+\n+#define f1(...) b##__VA_OPT__(c)\n+#define f2(...) __VA_OPT__(c)##d\n+#define f3(...) e##__VA_OPT__()\n+#define f4(...) __VA_OPT__()##f\n+#define f5(...) g##__VA_OPT__(h)##i\n+#define f6(...) j##__VA_OPT__()##k\n+#define f7(...) l##__VA_OPT__()\n+#define f8(...) __VA_OPT__()##m\n+#define f9(...) n##__VA_OPT__()##o\n+#define f10(x, ...) x##__VA_OPT__(x)\n+#define f11(x, ...) __VA_OPT__(x)##x\n+#define f12(x, ...) x##__VA_OPT__(x)##x\n+#define f13(...) __VA_OPT__(a)__VA_OPT__(b)c\n+#define f14(a, b, c, ...) __VA_OPT__(a)__VA_OPT__(b)c\n+#define f15(a, b, c, ...) __VA_OPT__(a b)__VA_OPT__(b c)a/**/__VA_OPT__(c a)a\n+#define m1 (\n+#define f16() f17 m1 )\n+#define f17() f18 m1 )\n+#define f18() m2 m1 )\n+#define m3f17() g\n+#define f19(x, ...) m3 ## __VA_OPT__(x x f16() #x)\n+#define f20(x, ...) __VA_OPT__(x x)##m4()\n+#define f21() f17\n+#define f17m4() h\n+#define f22(x,...)  1 ## __VA_OPT__(x ## x 2) ## 3\n+#define f23(x,...)  1 ## __VA_OPT__(x 2) ## 3\n+#define f24(x,...)  1 ## __VA_OPT__(2 x) ## 3\n+#define f25(x,...)  1 ## __VA_OPT__(2 x ## x) ## 3\n+t1 f1 (1, 2, 3);\n+/* { dg-final { scan-file va-opt-3.i \"t1 bc;\" } } */\n+t2 f1 ();\n+/* { dg-final { scan-file va-opt-3.i \"t2 b;\" } } */\n+t3 f2 (1, 2);\n+/* { dg-final { scan-file va-opt-3.i \"t3 cd;\" } } */\n+t4 f2 ();\n+/* { dg-final { scan-file va-opt-3.i \"t4 d;\" } } */\n+t5 f3 (1);\n+/* { dg-final { scan-file va-opt-3.i \"t5 e;\" } } */\n+t6 f4 (2);\n+/* { dg-final { scan-file va-opt-3.i \"t6 f;\" } } */\n+t7 f5 (6, 7);\n+/* { dg-final { scan-file va-opt-3.i \"t7 ghi;\" } } */\n+t8 f5 ();\n+/* { dg-final { scan-file va-opt-3.i \"t8 gi;\" } } */\n+t9 f6 (8);\n+/* { dg-final { scan-file va-opt-3.i \"t9 jk;\" } } */\n+t10 f7 ();\n+/* { dg-final { scan-file va-opt-3.i \"t10 l;\" } } */\n+t11 f8 ();\n+/* { dg-final { scan-file va-opt-3.i \"t11 m;\" } } */\n+t12 f9 ();\n+/* { dg-final { scan-file va-opt-3.i \"t12 no;\" } } */\n+t13 f10 (p, 5, 6);\n+/* { dg-final { scan-file va-opt-3.i \"t13 pp;\" } } */\n+t14 f10 (p);\n+/* { dg-final { scan-file va-opt-3.i \"t14 p;\" } } */\n+t15 f11 (q, 7);\n+/* { dg-final { scan-file va-opt-3.i \"t15 qq;\" } } */\n+t16 f11 (q);\n+/* { dg-final { scan-file va-opt-3.i \"t16 q;\" } } */\n+t17 f12 (r, 1, 2, 3, 4, 5);\n+/* { dg-final { scan-file va-opt-3.i \"t17 rrr;\" } } */\n+t18 f12 (r);\n+/* { dg-final { scan-file va-opt-3.i \"t18 rr;\" } } */\n+t19 f13 (1, 2);\n+/* { dg-final { scan-file va-opt-3.i \"t19 a b c;\" } } */\n+t20 f13 ();\n+/* { dg-final { scan-file va-opt-3.i \"t20 c;\" } } */\n+t21 f14 (3, 4, 5, 2);\n+/* { dg-final { scan-file va-opt-3.i \"t21 3 4 5;\" } } */\n+t22 f14 (3, 4, 5);\n+/* { dg-final { scan-file va-opt-3.i \"t22 5;\" } } */\n+t23 f15 (6, 7, 8, 9);\n+/* { dg-final { scan-file va-opt-3.i \"t23 6 7 7 8 6 8 6 6;\" } } */\n+t24 f15 (6, 7, 8);\n+/* { dg-final { scan-file va-opt-3.i \"t24 6 6;\" } } */\n+t25 f19 (f16 (), 1);\n+/* { dg-final { scan-file va-opt-3.i {t25 g f18 \\( \\) f17 \\( \\) \"f16 \\(\\)\";} } } */\n+t26 f20 (f21 (), 2);\n+/* { dg-final { scan-file va-opt-3.i \"t26 f17 h;\" } } */\n+t27 f22 (, x);\n+/* { dg-final { scan-file va-opt-3.i \"t27 123;\" } } */\n+t28 f23 (, x);\n+/* { dg-final { scan-file va-opt-3.i \"t28 123;\" } } */\n+t29 f24 (, x);\n+/* { dg-final { scan-file va-opt-3.i \"t29 123;\" } } */\n+t30 f25 (, x);\n+/* { dg-final { scan-file va-opt-3.i \"t30 123;\" } } */"}, {"sha": "2f6e1f21a9205ba8de733046a05873b1da32bfdd", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60887f8c2df851fd14988578dfe23126e2e8b9b5/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60887f8c2df851fd14988578dfe23126e2e8b9b5/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=60887f8c2df851fd14988578dfe23126e2e8b9b5", "patch": "@@ -1,3 +1,17 @@\n+2018-02-15  Jason Merrill  <jason@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/83063 - __VA_OPT__ and ##\n+\tPR preprocessor/83708\n+\t* macro.c (vaopt_state): Reorder m_last_was_paste before m_state.\n+\t(vaopt_state::vaopt_state): Adjust.\n+\t(vaopt_state::update_flags): Add BEGIN and END.\n+\t(vaopt_state::update): Return them.\n+\t(copy_paste_flag): Factor out of replace_args.\n+\t(last_token_is): New.\n+\t(replace_args): Handle BEGIN and END.  Avoid padding there.\n+\t(tokens_buff_last_token_ptr): Return NULL if no tokens.\n+\n 2018-01-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/69869"}, {"sha": "776af7bd00eae4f0571f61c36ceaa1a276c256d3", "filename": "libcpp/macro.c", "status": "modified", "additions": 112, "deletions": 23, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60887f8c2df851fd14988578dfe23126e2e8b9b5/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60887f8c2df851fd14988578dfe23126e2e8b9b5/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=60887f8c2df851fd14988578dfe23126e2e8b9b5", "patch": "@@ -105,8 +105,8 @@ class vaopt_state {\n     : m_pfile (pfile),\n     m_allowed (any_args),\n     m_variadic (is_variadic),\n-    m_state (0),\n     m_last_was_paste (false),\n+    m_state (0),\n     m_paste_location (0),\n     m_location (0)\n   {\n@@ -116,7 +116,9 @@ class vaopt_state {\n   {\n     ERROR,\n     DROP,\n-    INCLUDE\n+    INCLUDE,\n+    BEGIN,\n+    END\n   };\n \n   /* Given a token, update the state of this tracker and return a\n@@ -139,7 +141,7 @@ class vaopt_state {\n \t  }\n \t++m_state;\n \tm_location = token->src_loc;\n-\treturn DROP;\n+\treturn BEGIN;\n       }\n     else if (m_state == 1)\n       {\n@@ -191,7 +193,7 @@ class vaopt_state {\n \t\t    return ERROR;\n \t\t  }\n \n-\t\treturn DROP;\n+\t\treturn END;\n \t      }\n \t  }\n \treturn m_allowed ? INCLUDE : DROP;\n@@ -220,6 +222,9 @@ class vaopt_state {\n   bool m_allowed;\n   /* True if the macro is variadic.  */\n   bool m_variadic;\n+  /* If true, the previous token was ##.  This is used to detect when\n+     a paste occurs at the end of the sequence.  */\n+  bool m_last_was_paste;\n \n   /* The state variable:\n      0 means not parsing\n@@ -228,9 +233,6 @@ class vaopt_state {\n      >= 3 means looking for \")\", the number encodes the paren depth.  */\n   int m_state;\n \n-  /* If true, the previous token was ##.  This is used to detect when\n-     a paste occurs at the end of the sequence.  */\n-  bool m_last_was_paste;\n   /* The location of the paste token.  */\n   source_location m_paste_location;\n \n@@ -1701,6 +1703,30 @@ expanded_token_index (cpp_reader *pfile, cpp_macro *macro,\n   return cur_replacement_token - macro->exp.tokens;\n }\n \n+/* Copy whether PASTE_LEFT is set from SRC to *PASTE_FLAG.  */\n+\n+static void\n+copy_paste_flag (cpp_reader *pfile, const cpp_token **paste_flag,\n+\t\t const cpp_token *src)\n+{\n+  cpp_token *token = _cpp_temp_token (pfile);\n+  token->type = (*paste_flag)->type;\n+  token->val = (*paste_flag)->val;\n+  if (src->flags & PASTE_LEFT)\n+    token->flags = (*paste_flag)->flags | PASTE_LEFT;\n+  else\n+    token->flags = (*paste_flag)->flags & ~PASTE_LEFT;\n+  *paste_flag = token;\n+}\n+\n+/* True IFF the last token emitted into BUFF (if any) is PTR.  */\n+\n+static bool\n+last_token_is (_cpp_buff *buff, const cpp_token **ptr)\n+{\n+  return (ptr && tokens_buff_last_token_ptr (buff) == ptr);\n+}\n+\n /* Replace the parameters in a function-like macro of NODE with the\n    actual ARGS, and place the result in a newly pushed token context.\n    Expand each argument before replacing, unless it is operated upon\n@@ -1833,6 +1859,7 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n   i = 0;\n   vaopt_state vaopt_tracker (pfile, macro->variadic,\n \t\t\t     args[macro->paramc - 1].count > 0);\n+  const cpp_token **vaopt_start = NULL;\n   for (src = macro->exp.tokens; src < limit; src++)\n     {\n       unsigned int arg_tokens_count;\n@@ -1841,8 +1868,58 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n       const cpp_token **tmp_token_ptr;\n \n       /* __VA_OPT__ handling.  */\n-      if (vaopt_tracker.update (src) != vaopt_state::INCLUDE)\n-\tcontinue;\n+      vaopt_state::update_type vostate = vaopt_tracker.update (src);\n+      if (vostate != vaopt_state::INCLUDE)\n+\t{\n+\t  if (vostate == vaopt_state::BEGIN)\n+\t    {\n+\t      /* Padding on the left of __VA_OPT__ (unless RHS of ##).  */\n+\t      if (src != macro->exp.tokens && !(src[-1].flags & PASTE_LEFT))\n+\t\t{\n+\t\t  const cpp_token *t = padding_token (pfile, src);\n+\t\t  unsigned index = expanded_token_index (pfile, macro, src, i);\n+\t\t  /* Allocate a virtual location for the padding token and\n+\t\t     append the token and its location to BUFF and\n+\t\t     VIRT_LOCS.   */\n+\t\t  tokens_buff_add_token (buff, virt_locs, t,\n+\t\t\t\t\t t->src_loc, t->src_loc,\n+\t\t\t\t\t map, index);\n+\t\t}\n+\t      vaopt_start = tokens_buff_last_token_ptr (buff);\n+\t    }\n+\t  else if (vostate == vaopt_state::END)\n+\t    {\n+\t      const cpp_token **start = vaopt_start;\n+\t      vaopt_start = NULL;\n+\n+\t      /* Remove any tail padding from inside the __VA_OPT__.  */\n+\t      paste_flag = tokens_buff_last_token_ptr (buff);\n+\t      while (paste_flag && paste_flag != start\n+\t\t     && (*paste_flag)->type == CPP_PADDING)\n+\t\t{\n+\t\t  tokens_buff_remove_last_token (buff);\n+\t\t  paste_flag = tokens_buff_last_token_ptr (buff);\n+\t\t}\n+\n+\t      if (src->flags & PASTE_LEFT)\n+\t\t{\n+\t\t  /* With a non-empty __VA_OPT__ on the LHS of ##, the last\n+\t\t     token should be flagged PASTE_LEFT.  */\n+\t\t  if (paste_flag && (*paste_flag)->type != CPP_PADDING)\n+\t\t    copy_paste_flag (pfile, paste_flag, src);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  /* Otherwise, avoid paste on RHS, __VA_OPT__(c)d or\n+\t\t     __VA_OPT__(c)__VA_OPT__(d).  */\n+\t\t  const cpp_token *t = &pfile->avoid_paste;\n+\t\t  tokens_buff_add_token (buff, virt_locs,\n+\t\t\t\t\t t, t->src_loc, t->src_loc,\n+\t\t\t\t\t NULL, 0);\n+\t\t}\n+\t    }\n+\t  continue;\n+\t}\n \n       if (src->type != CPP_MACRO_ARG)\n \t{\n@@ -1921,8 +1998,11 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \t\t  else\n \t\t    paste_flag = tmp_token_ptr;\n \t\t}\n-\t      /* Remove the paste flag if the RHS is a placemarker.  */\n-\t      else if (arg_tokens_count == 0)\n+\t      /* Remove the paste flag if the RHS is a placemarker, unless the\n+\t\t previous emitted token is at the beginning of __VA_OPT__;\n+\t\t placemarkers within __VA_OPT__ are ignored in that case.  */\n+\t      else if (arg_tokens_count == 0\n+\t\t       && tmp_token_ptr != vaopt_start)\n \t\tpaste_flag = tmp_token_ptr;\n \t    }\n \t}\n@@ -1934,11 +2014,26 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \t\t\t\t\t\t track_macro_expansion),\n \t\t\t\t     MACRO_ARG_TOKEN_EXPANDED,\n \t\t\t\t     arg, arg->expanded);\n+\n+\t  if (last_token_is (buff, vaopt_start))\n+\t    {\n+\t      /* We're expanding an arg at the beginning of __VA_OPT__.\n+\t\t Skip padding. */\n+\t      while (arg_tokens_count)\n+\t\t{\n+\t\t  const cpp_token *t = macro_arg_token_iter_get_token (&from);\n+\t\t  if (t->type != CPP_PADDING)\n+\t\t    break;\n+\t\t  macro_arg_token_iter_forward (&from);\n+\t\t  --arg_tokens_count;\n+\t\t}\n+\t    }\n \t}\n \n       /* Padding on the left of an argument (unless RHS of ##).  */\n       if ((!pfile->state.in_directive || pfile->state.directive_wants_padding)\n-\t  && src != macro->exp.tokens && !(src[-1].flags & PASTE_LEFT))\n+\t  && src != macro->exp.tokens && !(src[-1].flags & PASTE_LEFT)\n+\t  && !last_token_is (buff, vaopt_start))\n \t{\n \t  const cpp_token *t = padding_token (pfile, src);\n \t  unsigned index = expanded_token_index (pfile, macro, src, i);\n@@ -2023,7 +2118,8 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \t\t     NODE_NAME (node), src->val.macro_arg.arg_no);\n \n       /* Avoid paste on RHS (even case count == 0).  */\n-      if (!pfile->state.in_directive && !(src->flags & PASTE_LEFT))\n+      if (!pfile->state.in_directive && !(src->flags & PASTE_LEFT)\n+\t  && !last_token_is (buff, vaopt_start))\n \t{\n \t  const cpp_token *t = &pfile->avoid_paste;\n \t  tokens_buff_add_token (buff, virt_locs,\n@@ -2033,16 +2129,7 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \n       /* Add a new paste flag, or remove an unwanted one.  */\n       if (paste_flag)\n-\t{\n-\t  cpp_token *token = _cpp_temp_token (pfile);\n-\t  token->type = (*paste_flag)->type;\n-\t  token->val = (*paste_flag)->val;\n-\t  if (src->flags & PASTE_LEFT)\n-\t    token->flags = (*paste_flag)->flags | PASTE_LEFT;\n-\t  else\n-\t    token->flags = (*paste_flag)->flags & ~PASTE_LEFT;\n-\t  *paste_flag = token;\n-\t}\n+\tcopy_paste_flag (pfile, paste_flag, src);\n \n       i += arg_tokens_count;\n     }\n@@ -2213,6 +2300,8 @@ tokens_buff_count (_cpp_buff *buff)\n static const cpp_token **\n tokens_buff_last_token_ptr (_cpp_buff *buff)\n {\n+  if (BUFF_FRONT (buff) == buff->base)\n+    return NULL;\n   return &((const cpp_token **) BUFF_FRONT (buff))[-1];\n }\n "}]}