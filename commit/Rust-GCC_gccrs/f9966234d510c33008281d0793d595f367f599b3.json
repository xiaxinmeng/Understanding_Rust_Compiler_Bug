{"sha": "f9966234d510c33008281d0793d595f367f599b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk5NjYyMzRkNTEwYzMzMDA4MjgxZDA3OTNkNTk1ZjM2N2Y1OTliMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-25T14:55:43Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-25T14:55:43Z"}, "message": "[multiple changes]\n\n2014-02-25  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch3.adb, sem_ch5.adb, sem_ch9.adb, sem_prag.adb, sem_attr.adb,\n\tsem_ch6.adb: Remove useless references to SPARK RM in error messages.\n\n2014-02-25  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_res.adb (Appears_In_Check): New routine.\n\t(Resolve_Entity_Name): Remove local variables Prev and\n\tUsage_OK. Par is now a constant. Remove the parent chain traversal\n\tas the placement of a volatile object with enabled property\n\tAsync_Writers and/or Effective_Reads must appear immediately\n\twithin a legal construct.\n\n2014-02-25  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* checks.adb (Apply_Selected_Range_Checks):\n\tAlphabetize local constants and variables. Add comments.\n\tAlways insert a range check that requires runtime evaluation into\n\tthe tree.\n\nFrom-SVN: r208128", "tree": {"sha": "2abdbf5c5cdcda0ae03817cfa833ccdd8485cbb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2abdbf5c5cdcda0ae03817cfa833ccdd8485cbb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9966234d510c33008281d0793d595f367f599b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9966234d510c33008281d0793d595f367f599b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9966234d510c33008281d0793d595f367f599b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9966234d510c33008281d0793d595f367f599b3/comments", "author": null, "committer": null, "parents": [{"sha": "a6abfd78fe2571bb025268983633ac1978a1d3c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6abfd78fe2571bb025268983633ac1978a1d3c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6abfd78fe2571bb025268983633ac1978a1d3c3"}], "stats": {"total": 546, "additions": 274, "deletions": 272}, "files": [{"sha": "b7e4ae312c33f23b72a20ae748074b3c5ea34114", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9966234d510c33008281d0793d595f367f599b3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9966234d510c33008281d0793d595f367f599b3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f9966234d510c33008281d0793d595f367f599b3", "patch": "@@ -1,3 +1,24 @@\n+2014-02-25  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch3.adb, sem_ch5.adb, sem_ch9.adb, sem_prag.adb, sem_attr.adb,\n+\tsem_ch6.adb: Remove useless references to SPARK RM in error messages.\n+\n+2014-02-25  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_res.adb (Appears_In_Check): New routine.\n+\t(Resolve_Entity_Name): Remove local variables Prev and\n+\tUsage_OK. Par is now a constant. Remove the parent chain traversal\n+\tas the placement of a volatile object with enabled property\n+\tAsync_Writers and/or Effective_Reads must appear immediately\n+\twithin a legal construct.\n+\n+2014-02-25  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* checks.adb (Apply_Selected_Range_Checks):\n+\tAlphabetize local constants and variables. Add comments.\n+\tAlways insert a range check that requires runtime evaluation into\n+\tthe tree.\n+\n 2014-02-25  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_attr.adb, sem_ch6.adb, par-ch3.adb: Minor reformatting."}, {"sha": "8feebb95fb231d85472b28400c94d6456d61b2d7", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9966234d510c33008281d0793d595f367f599b3/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9966234d510c33008281d0793d595f367f599b3/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=f9966234d510c33008281d0793d595f367f599b3", "patch": "@@ -3061,14 +3061,14 @@ package body Checks is\n       Source_Typ : Entity_Id;\n       Do_Static  : Boolean)\n    is\n-      Cond     : Node_Id;\n-      R_Result : Check_Result;\n-      R_Cno    : Node_Id;\n-\n       Loc       : constant Source_Ptr := Sloc (Ck_Node);\n       Checks_On : constant Boolean :=\n-        (not Index_Checks_Suppressed (Target_Typ))\n-         or else (not Range_Checks_Suppressed (Target_Typ));\n+                    not Index_Checks_Suppressed (Target_Typ)\n+                      or else not Range_Checks_Suppressed (Target_Typ);\n+\n+      Cond     : Node_Id;\n+      R_Cno    : Node_Id;\n+      R_Result : Check_Result;\n \n    begin\n       if not Expander_Active or else not Checks_On then\n@@ -3079,27 +3079,33 @@ package body Checks is\n         Selected_Range_Checks (Ck_Node, Target_Typ, Source_Typ, Empty);\n \n       for J in 1 .. 2 loop\n-\n          R_Cno := R_Result (J);\n          exit when No (R_Cno);\n \n-         --  If the item is a conditional raise of constraint error, then have\n-         --  a look at what check is being performed and ???\n+         --  The range check requires runtime evaluation. Depending on what its\n+         --  triggering condition is, the check may be converted into a compile\n+         --  time constraint check.\n \n          if Nkind (R_Cno) = N_Raise_Constraint_Error\n            and then Present (Condition (R_Cno))\n          then\n             Cond := Condition (R_Cno);\n \n-            if not Has_Dynamic_Range_Check (Ck_Node) then\n-               Insert_Action (Ck_Node, R_Cno);\n+            --  Insert the range check before the related context. Note that\n+            --  this action analyses the triggering condition.\n \n-               if not Do_Static then\n-                  Set_Has_Dynamic_Range_Check (Ck_Node);\n-               end if;\n+            Insert_Action (Ck_Node, R_Cno);\n+\n+            --  This old code doesn't make sense, why is the context flagged as\n+            --  requiring dynamic range checks now in the middle of generating\n+            --  them ???\n+\n+            if not Do_Static then\n+               Set_Has_Dynamic_Range_Check (Ck_Node);\n             end if;\n \n-            --  Output a warning if the condition is known to be True\n+            --  The triggering condition evaluates to True, the range check\n+            --  can be converted into a compile time constraint check.\n \n             if Is_Entity_Name (Cond)\n               and then Entity (Cond) = Standard_True\n@@ -3130,11 +3136,15 @@ package body Checks is\n             --  on, then we want to delete the check, since it is not needed.\n             --  We do this by replacing the if statement by a null statement\n \n+            --  Why are we even generating checks if checks are turned off ???\n+\n             elsif Do_Static or else not Checks_On then\n                Remove_Warning_Messages (R_Cno);\n                Rewrite (R_Cno, Make_Null_Statement (Loc));\n             end if;\n \n+         --  The range check raises Constrant_Error explicitly\n+\n          else\n             Install_Static_Check (R_Cno, Loc);\n          end if;"}, {"sha": "a18a669f9d45be5f9ffd9a6adb0de8e2d3dcc8d1", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9966234d510c33008281d0793d595f367f599b3/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9966234d510c33008281d0793d595f367f599b3/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=f9966234d510c33008281d0793d595f367f599b3", "patch": "@@ -4480,11 +4480,12 @@ package body Sem_Attr is\n \n             --  Attribute 'Old appears in the condition of a contract case.\n             --  Emit an error since this is not a postcondition-like context.\n+            --  (SPARK RM 6.1.3(2))\n \n             else\n                Error_Attr\n-                 (\"attribute % cannot appear in the condition of a contract \"\n-                  & \"case (SPARK 'R'M 6.1.3(2))\", P);\n+                 (\"attribute % cannot appear in the condition \"\n+                  & \"of a contract case\", P);\n             end if;\n          end Check_Use_In_Contract_Cases;\n "}, {"sha": "358bc359a69a1f42916c8169796efa83f5455d8b", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9966234d510c33008281d0793d595f367f599b3/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9966234d510c33008281d0793d595f367f599b3/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=f9966234d510c33008281d0793d595f367f599b3", "patch": "@@ -2992,14 +2992,13 @@ package body Sem_Ch3 is\n          --  A constant cannot be volatile. This check is only relevant when\n          --  SPARK_Mode is on as it is not standard Ada legality rule. Do not\n          --  flag internally-generated constants that map generic formals to\n-         --  actuals in instantiations.\n+         --  actuals in instantiations (SPARK RM 7.1.3(6)).\n \n          if SPARK_Mode = On\n            and then Is_SPARK_Volatile_Object (Obj_Id)\n            and then No (Corresponding_Generic_Association (Parent (Obj_Id)))\n          then\n-            Error_Msg_N\n-              (\"constant cannot be volatile (SPARK 'R'M 7.1.3(6))\", Obj_Id);\n+            Error_Msg_N (\"constant cannot be volatile\", Obj_Id);\n          end if;\n \n       else pragma Assert (Ekind (Obj_Id) = E_Variable);\n@@ -3010,13 +3009,14 @@ package body Sem_Ch3 is\n          if SPARK_Mode = On then\n \n             --  A non-volatile object cannot have volatile components\n+            --  (SPARK RM 7.1.3(7)).\n \n             if not Is_SPARK_Volatile_Object (Obj_Id)\n               and then Has_Volatile_Component (Etype (Obj_Id))\n             then\n                Error_Msg_N\n-                 (\"non-volatile variable & cannot have volatile components \"\n-                  & \"(SPARK 'R'M 7.1.3(7))\", Obj_Id);\n+                 (\"non-volatile variable & cannot have volatile components\",\n+                  Obj_Id);\n \n             --  The declaration of a volatile object must appear at the library\n             --  level.\n@@ -18042,13 +18042,13 @@ package body Sem_Ch3 is\n          end if;\n \n          --  A discriminant cannot be volatile. This check is only relevant\n-         --  when SPARK_Mode is on as it is not standard Ada legality rule.\n+         --  when SPARK_Mode is on as it is not standard Ada legality rule\n+         --  (SPARK RM 7.1.3(6)).\n \n          if SPARK_Mode = On\n            and then Is_SPARK_Volatile_Object (Defining_Identifier (Discr))\n          then\n-            Error_Msg_N\n-              (\"discriminant cannot be volatile (SPARK 'R'M 7.1.3(6))\", Discr);\n+            Error_Msg_N (\"discriminant cannot be volatile\", Discr);\n          end if;\n \n          Next (Discr);"}, {"sha": "488ea7bcf3d3228dc739cd2b61ebde246974d9bd", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9966234d510c33008281d0793d595f367f599b3/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9966234d510c33008281d0793d595f367f599b3/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=f9966234d510c33008281d0793d595f367f599b3", "patch": "@@ -1961,8 +1961,9 @@ package body Sem_Ch5 is\n          end if;\n       end if;\n \n-      --  A loop parameter cannot be volatile. This check is peformed only when\n-      --  SPARK_Mode is on as it is not a standard Ada legality check.\n+      --  A loop parameter cannot be volatile. This check is peformed only\n+      --  when SPARK_Mode is on as it is not a standard Ada legality check\n+      --  (SPARK RM 7.1.3(6)).\n \n       --  Not clear whether this applies to element iterators, where the\n       --  cursor is not an explicit entity ???\n@@ -1971,8 +1972,7 @@ package body Sem_Ch5 is\n         and then not Of_Present (N)\n         and then Is_SPARK_Volatile_Object (Ent)\n       then\n-         Error_Msg_N\n-           (\"loop parameter cannot be volatile (SPARK 'R'M 7.1.3(6))\", Ent);\n+         Error_Msg_N (\"loop parameter cannot be volatile\", Ent);\n       end if;\n    end Analyze_Iterator_Specification;\n \n@@ -2613,12 +2613,12 @@ package body Sem_Ch5 is\n          end;\n       end if;\n \n-      --  A loop parameter cannot be volatile. This check is peformed only when\n-      --  SPARK_Mode is on as it is not a standard Ada legality check.\n+      --  A loop parameter cannot be volatile. This check is peformed only\n+      --  when SPARK_Mode is on as it is not a standard Ada legality check\n+      --  (SPARK RM 7.1.3(6)).\n \n       if SPARK_Mode = On and then Is_SPARK_Volatile_Object (Id) then\n-         Error_Msg_N\n-           (\"loop parameter cannot be volatile (SPARK 'R'M 7.1.3(6))\", Id);\n+         Error_Msg_N (\"loop parameter cannot be volatile\", Id);\n       end if;\n    end Analyze_Loop_Parameter_Specification;\n "}, {"sha": "ff3cbf25c2df840c94651864a74ee91ffbe43f7d", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9966234d510c33008281d0793d595f367f599b3/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9966234d510c33008281d0793d595f367f599b3/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=f9966234d510c33008281d0793d595f367f599b3", "patch": "@@ -11418,18 +11418,19 @@ package body Sem_Ch6 is\n            and then Ekind_In (Scope (Formal), E_Function, E_Generic_Function)\n          then\n             --  A function cannot have a parameter of mode IN OUT or OUT\n+            --  (SPARK RM 6.1).\n \n             if Ekind_In (Formal, E_In_Out_Parameter, E_Out_Parameter) then\n                Error_Msg_N\n-                 (\"function cannot have parameter of mode `OUT` or `IN OUT` \"\n-                  & \"(SPARK 'R'M 6.1)\", Formal);\n+                 (\"function cannot have parameter of mode `OUT` or `IN OUT`\",\n+                  Formal);\n \n             --  A function cannot have a volatile formal parameter\n+            --  (SPARK RM 7.1.3(10)).\n \n             elsif Is_SPARK_Volatile_Object (Formal) then\n                Error_Msg_N\n-                 (\"function cannot have a volatile formal parameter \"\n-                  & \"(SPARK 'R'M 7.1.3(10))\", Formal);\n+                 (\"function cannot have a volatile formal parameter\", Formal);\n             end if;\n          end if;\n "}, {"sha": "1e2e83255500360d3ff0ac8de47ea5bf2396331a", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9966234d510c33008281d0793d595f367f599b3/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9966234d510c33008281d0793d595f367f599b3/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=f9966234d510c33008281d0793d595f367f599b3", "patch": "@@ -3089,8 +3089,8 @@ package body Sem_Ch9 is\n                           (Entity (Name (Trigger)))\n          then\n             Error_Msg_N\n-              (\"triggering statement must be procedure_or_entry_call \" &\n-               \"('R'M 9.7.2) or delay statement\", Trigger);\n+              (\"triggering statement must be procedure or entry call \" &\n+               \"or delay statement\", Trigger);\n          end if;\n       end if;\n "}, {"sha": "016cbf1a0d98fdca11a0a9cfe8aaacf7cc85de3e", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 140, "deletions": 182, "changes": 322, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9966234d510c33008281d0793d595f367f599b3/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9966234d510c33008281d0793d595f367f599b3/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=f9966234d510c33008281d0793d595f367f599b3", "patch": "@@ -427,21 +427,20 @@ package body Sem_Prag is\n                   Extra_Guard);\n             end if;\n \n-            --  Check the placement of \"others\" (if available)\n+            --  Check placement of OTHERS if available (SPARK RM 6.1.3(1))\n \n             if Nkind (Case_Guard) = N_Others_Choice then\n                if Others_Seen then\n                   Error_Msg_N\n-                    (\"only one others choice allowed in contract cases \"\n-                     & \"(SPARK 'R'M 6.1.3(1))\", Case_Guard);\n+                    (\"only one others choice allowed in contract cases\",\n+                     Case_Guard);\n                else\n                   Others_Seen := True;\n                end if;\n \n             elsif Others_Seen then\n                Error_Msg_N\n-                 (\"others must be the last choice in contract cases \"\n-                  & \"(SPARK 'R'M 6.1.3(1))\", N);\n+                 (\"others must be the last choice in contract cases\", N);\n             end if;\n \n             --  Preanalyze the case guard and consequence\n@@ -578,6 +577,7 @@ package body Sem_Prag is\n \n       procedure Check_Function_Return;\n       --  Verify that Funtion'Result appears as one of the outputs\n+      --  (SPARK RM 6.1.5(10)).\n \n       procedure Check_Role\n         (Item     : Node_Id;\n@@ -780,7 +780,7 @@ package body Sem_Prag is\n                Analyze (Prefix (Item));\n \n                --  The prefix of 'Result must denote the function for which\n-               --  pragma Depends applies.\n+               --  pragma Depends applies (SPARK RM 6.1.5(11)).\n \n                if not Is_Entity_Name (Prefix (Item))\n                  or else Ekind (Spec_Id) /= E_Function\n@@ -789,15 +789,13 @@ package body Sem_Prag is\n                   Error_Msg_Name_1 := Name_Result;\n                   Error_Msg_N\n                     (\"prefix of attribute % must denote the enclosing \"\n-                     & \"function (SPARK 'R'M 6.1.5(11))\", Item);\n+                     & \"function\", Item);\n \n                --  Function'Result is allowed to appear on the output side of a\n-               --  dependency clause.\n+               --  dependency clause (SPARK RM 6.1.5(6)).\n \n                elsif Is_Input then\n-                  Error_Msg_N\n-                    (\"function result cannot act as input \"\n-                     & \"(SPARK 'R'M 6.1.5(6))\", Item);\n+                  Error_Msg_N (\"function result cannot act as input\", Item);\n \n                elsif Null_Seen then\n                   Error_Msg_N\n@@ -809,7 +807,7 @@ package body Sem_Prag is\n \n             --  Detect multiple uses of null in a single dependency list or\n             --  throughout the whole relation. Verify the placement of a null\n-            --  output list relative to the other clauses.\n+            --  output list relative to the other clauses (SPARK RM 6.1.5(12)).\n \n             elsif Nkind (Item) = N_Null then\n                if Null_Seen then\n@@ -827,8 +825,7 @@ package body Sem_Prag is\n                      if not Is_Last then\n                         Error_Msg_N\n                           (\"null output list must be the last clause in a \"\n-                           & \"dependency relation (SPARK 'R'M 6.1.5(12))\",\n-                           Item);\n+                           & \"dependency relation\", Item);\n \n                      --  Catch a useless dependence of the form:\n                      --    null =>+ ...\n@@ -884,16 +881,15 @@ package body Sem_Prag is\n \n                      --  Detect illegal use of an input related to a null\n                      --  output. Such input items cannot appear in other\n-                     --  input lists.\n+                     --  input lists (SPARK RM 6.1.5(13)).\n \n                      if Is_Input\n                        and then Null_Output_Seen\n                        and then Contains (All_Inputs_Seen, Item_Id)\n                      then\n                         Error_Msg_N\n                           (\"input of a null output list cannot appear in \"\n-                           & \"multiple input lists (SPARK 'R'M 6.1.5(13))\",\n-                           Item);\n+                           & \"multiple input lists\", Item);\n                      end if;\n \n                      --  Add an input or a self-referential output to the list\n@@ -903,16 +899,15 @@ package body Sem_Prag is\n                         Add_Item (Item_Id, All_Inputs_Seen);\n                      end if;\n \n-                     --  State related checks\n+                     --  State related checks (SPARK RM 6.1.5(3))\n \n                      if Ekind (Item_Id) = E_Abstract_State then\n                         if Has_Visible_Refinement (Item_Id) then\n                            Error_Msg_NE\n                              (\"cannot mention state & in global refinement\",\n                               Item, Item_Id);\n                            Error_Msg_N\n-                              (\"\\\\use its constituents instead \"\n-                               & \"(SPARK 'R'M 6.1.5(3))\", Item);\n+                             (\"\\\\use its constituents instead\", Item);\n                            return;\n \n                         --  If the reference to the abstract state appears in\n@@ -950,19 +945,21 @@ package body Sem_Prag is\n                      end if;\n \n                   --  All other input/output items are illegal\n+                  --  (SPARK RM 6.1.5(1)).\n \n                   else\n                      Error_Msg_N\n-                       (\"item must denote parameter, variable or state \"\n-                        & \"(SPARK 'R'M 6.1.5(1))\", Item);\n+                       (\"item must denote parameter, variable, or state\",\n+                        Item);\n                   end if;\n \n                --  All other input/output items are illegal\n+               --  (SPARK RM 6.1.5(1))\n \n                else\n                   Error_Msg_N\n-                    (\"item must denote parameter, variable or state \"\n-                     & \"(SPARK 'R'M 6.1.5(1))\", Item);\n+                    (\"item must denote parameter, variable or state\",\n+                     Item);\n                end if;\n             end if;\n          end Analyze_Input_Output;\n@@ -1019,8 +1016,8 @@ package body Sem_Prag is\n       begin\n          if Ekind (Spec_Id) = E_Function and then not Result_Seen then\n             Error_Msg_NE\n-              (\"result of & must appear in exactly one output list \"\n-               & \"(SPARK 'R'M 6.1.5(10))\", N, Spec_Id);\n+              (\"result of & must appear in exactly one output list\",\n+               N, Spec_Id);\n          end if;\n       end Check_Function_Return;\n \n@@ -1176,7 +1173,7 @@ package body Sem_Prag is\n \n             --  The mode of the item and its role in pragma [Refined_]Depends\n             --  are in conflict. Construct a detailed message explaining the\n-            --  illegality.\n+            --  illegality (SPARK RM 6.1.5(5-6)).\n \n             else\n                if Item_Is_Input then\n@@ -1195,18 +1192,7 @@ package body Sem_Prag is\n                   Add_Str_To_Name_Buffer (\"input\");\n                end if;\n \n-               Add_Str_To_Name_Buffer (\" in dependence relation \");\n-\n-               --  Even though the two SPARK references differ by one character\n-               --  they are fully written out to facilitate reference finding\n-               --  and updating.\n-\n-               if Item_Is_Input then\n-                  Add_Str_To_Name_Buffer (\"(SPARK 'R'M 6.1.5(5))\");\n-               else\n-                  Add_Str_To_Name_Buffer (\"(SPARK 'R'M 6.1.5(6))\");\n-               end if;\n-\n+               Add_Str_To_Name_Buffer (\" in dependence relation\");\n                Error_Msg := Name_Find;\n                Error_Msg_NE (Get_Name_String (Error_Msg), Item, Item_Id);\n             end if;\n@@ -1269,29 +1255,28 @@ package body Sem_Prag is\n \n                --  Unconstrained and tagged items are not part of the explicit\n                --  input set of the related subprogram, they do not have to be\n-               --  present in a dependence relation and should not be flagged.\n+               --  present in a dependence relation and should not be flagged\n+               --  (SPARK RM 6.1.5(8)).\n \n                if not Is_Unconstrained_Or_Tagged_Item (Item_Id) then\n                   Name_Len := 0;\n \n                   Add_Item_To_Name_Buffer (Item_Id);\n                   Add_Str_To_Name_Buffer\n-                    (\" & must appear in at least one input dependence list \"\n-                     & \"(SPARK 'R'M 6.1.5(8))\");\n+                    (\" & must appear in at least one input dependence list\");\n \n                   Error_Msg := Name_Find;\n                   Error_Msg_NE (Get_Name_String (Error_Msg), Item, Item_Id);\n                end if;\n \n-            --  Output case\n+            --  Output case (SPARK RM 6.1.5(10))\n \n             else\n                Name_Len := 0;\n \n                Add_Item_To_Name_Buffer (Item_Id);\n                Add_Str_To_Name_Buffer\n-                 (\" & must appear in exactly one output dependence list \"\n-                  & \"(SPARK 'R'M 6.1.5(10))\");\n+                 (\" & must appear in exactly one output dependence list\");\n \n                Error_Msg := Name_Find;\n                Error_Msg_NE (Get_Name_String (Error_Msg), Item, Item_Id);\n@@ -1498,12 +1483,10 @@ package body Sem_Prag is\n                return;\n \n             --  A function result cannot depend on itself because it cannot\n-            --  appear in the input list of a relation.\n+            --  appear in the input list of a relation (SPARK RM 6.1.5(10)).\n \n             elsif Is_Attribute_Result (Output) then\n-               Error_Msg_N\n-                 (\"function result cannot depend on itself \"\n-                  & \"(SPARK 'R'M 6.1.5(10))\", Output);\n+               Error_Msg_N (\"function result cannot depend on itself\", Output);\n                return;\n             end if;\n \n@@ -1860,25 +1843,22 @@ package body Sem_Prag is\n       Error_Msg_Name_1 := Pragma_Name (N);\n \n       --  The Async / Effective pragmas must apply to a volatile object other\n-      --  than a formal subprogram parameter.\n+      --  than a formal subprogram parameter (SPARK RM 7.1.3(2)).\n \n       if Is_SPARK_Volatile_Object (Obj) then\n          if Is_Entity_Name (Obj)\n            and then Present (Entity (Obj))\n            and then Is_Formal (Entity (Obj))\n          then\n-            Error_Msg_N\n-              (\"external property % cannot apply to parameter \"\n-               & \"(SPARK RM 7.1.3(2))\", N);\n+            Error_Msg_N (\"external property % cannot apply to parameter\", N);\n          end if;\n       else\n          Error_Msg_N\n-           (\"external property % must apply to a volatile object \"\n-            & \"(SPARK 'R'M 7.1.3(2))\", N);\n+           (\"external property % must apply to a volatile object\", N);\n       end if;\n \n       --  Ensure that the expression (if present) is static Boolean. A missing\n-      --  argument defaults the value to True.\n+      --  argument defaults the value to True (SPARK RM 7.1.2(5)).\n \n       Expr_Val := True;\n \n@@ -1889,8 +1869,7 @@ package body Sem_Prag is\n             Expr_Val := Is_True (Expr_Value (Expr));\n          else\n             Error_Msg_Name_1 := Pragma_Name (N);\n-            Error_Msg_N\n-              (\"expression of % must be static (SPARK 'R'M 7.1.2(5))\", Expr);\n+            Error_Msg_N (\"expression of % must be static\", Expr);\n          end if;\n       end if;\n    end Analyze_External_Property_In_Decl_Part;\n@@ -1952,7 +1931,7 @@ package body Sem_Prag is\n             Status : in out Boolean);\n          --  Flag Status denotes whether a particular mode has been seen while\n          --  processing a global list. This routine verifies that Mode is not a\n-         --  duplicate mode and sets the flag Status.\n+         --  duplicate mode and sets the flag Status (SPARK RM 6.1.4(9)).\n \n          procedure Check_Mode_Restriction_In_Enclosing_Context\n            (Item    : Node_Id;\n@@ -1965,7 +1944,7 @@ package body Sem_Prag is\n          procedure Check_Mode_Restriction_In_Function (Mode : Node_Id);\n          --  Mode denotes either In_Out or Output. Depending on the kind of the\n          --  related subprogram, emit an error if those two modes apply to a\n-         --  function.\n+         --  function (SPARK RM 6.1.4(10)).\n \n          -------------------------\n          -- Analyze_Global_Item --\n@@ -2001,32 +1980,29 @@ package body Sem_Prag is\n             if Present (Item_Id) then\n \n                --  A global item may denote a formal parameter of an enclosing\n-               --  subprogram. Do this check first to provide a better error\n-               --  diagnostic.\n+               --  subprogram (SPARK RM 6.1.4(6)). Do this check first to\n+               --  provide a better error diagnostic.\n \n                if Is_Formal (Item_Id) then\n                   if Scope (Item_Id) = Spec_Id then\n                      Error_Msg_NE\n-                       (\"global item cannot reference parameter of subprogram \"\n-                        & \"& (SPARK 'R'M 6.1.4(6))\", Item, Spec_Id);\n+                       (\"global item cannot reference parameter of subprogram\",\n+                        Item, Spec_Id);\n                      return;\n                   end if;\n \n-               --  A constant cannot act as a global item. Do this check first\n-               --  to provide a better error diagnostic.\n+               --  A constant cannot act as a global item (SPARK RM 6.1.4(7)).\n+               --  Do this check first to provide a better error diagnostic.\n \n                elsif Ekind (Item_Id) = E_Constant then\n-                  Error_Msg_N\n-                    (\"global item cannot denote a constant \"\n-                     & \"(SPARK 'R'M 6.1.4(7))\", Item);\n+                  Error_Msg_N (\"global item cannot denote a constant\", Item);\n \n                --  The only legal references are those to abstract states and\n-               --  variables.\n+               --  variables (SPARK RM 6.1.4(4)).\n \n                elsif not Ekind_In (Item_Id, E_Abstract_State, E_Variable) then\n                   Error_Msg_N\n-                    (\"global item must denote variable or state \"\n-                     & \"(SPARK 'R'M 6.1.4(4))\", Item);\n+                    (\"global item must denote variable or state\", Item);\n                   return;\n                end if;\n \n@@ -2036,15 +2012,13 @@ package body Sem_Prag is\n \n                   --  An abstract state with visible refinement cannot appear\n                   --  in pragma [Refined_]Global as its place must be taken by\n-                  --  some of its constituents.\n+                  --  some of its constituents (SPARK RM 6.1.4(8)).\n \n                   if Has_Visible_Refinement (Item_Id) then\n                      Error_Msg_NE\n                        (\"cannot mention state & in global refinement\",\n                         Item, Item_Id);\n-                     Error_Msg_N\n-                       (\"\\\\use its constituents instead (SPARK 'R'M 6.1.4(8))\",\n-                        Item);\n+                     Error_Msg_N (\"\\\\use its constituents instead\", Item);\n                      return;\n \n                   --  If the reference to the abstract state appears in an\n@@ -2065,12 +2039,12 @@ package body Sem_Prag is\n                  and then Is_SPARK_Volatile_Object (Item_Id)\n                then\n                   --  A volatile object cannot appear as a global item of a\n-                  --  function.\n+                  --  function (SPARK RM 7.1.3(9)).\n \n                   if Ekind_In (Spec_Id, E_Function, E_Generic_Function) then\n                      Error_Msg_NE\n                        (\"volatile object & cannot act as global item of a \"\n-                        & \"function (SPARK 'R'M 7.1.3(9))\", Item, Item_Id);\n+                        & \"function\", Item, Item_Id);\n                      return;\n \n                   --  A volatile object with property Effective_Reads set to\n@@ -2096,11 +2070,10 @@ package body Sem_Prag is\n                end if;\n \n             --  Some form of illegal construct masquerading as a name\n+            --  (SPARK RM 6.1.4(4)).\n \n             else\n-               Error_Msg_N\n-                 (\"global item must denote variable or state \"\n-                  & \"(SPARK 'R'M 6.1.4(4))\", Item);\n+               Error_Msg_N (\"global item must denote variable or state\", Item);\n                return;\n             end if;\n \n@@ -2111,12 +2084,12 @@ package body Sem_Prag is\n                Check_Mode_Restriction_In_Enclosing_Context (Item, Item_Id);\n             end if;\n \n-            --  The same entity might be referenced through various way. Check\n-            --  the entity of the item rather than the item itself.\n+            --  The same entity might be referenced through various way.\n+            --  Check the entity of the item rather than the item itself\n+            --  (SPARK RM 6.1.4(11)).\n \n             if Contains (Seen, Item_Id) then\n-               Error_Msg_N\n-                 (\"duplicate global item (SPARK 'R'M 6.1.4(11))\", Item);\n+               Error_Msg_N (\"duplicate global item\", Item);\n \n             --  Add the entity of the current item to the list of processed\n             --  items.\n@@ -2146,8 +2119,7 @@ package body Sem_Prag is\n          is\n          begin\n             if Status then\n-               Error_Msg_N\n-                 (\"duplicate global mode (SPARK 'R'M 6.1.4(9))\", Mode);\n+               Error_Msg_N (\"duplicate global mode\", Mode);\n             end if;\n \n             Status := True;\n@@ -2185,14 +2157,14 @@ package body Sem_Prag is\n                      Global_Seen  => Dummy);\n \n                   --  The item is classified as In_Out or Output but appears as\n-                  --  an Input in an enclosing subprogram.\n+                  --  an Input in an enclosing subprogram (SPARK RM 6.1.4(12)).\n \n                   if Appears_In (Inputs, Item_Id)\n                     and then not Appears_In (Outputs, Item_Id)\n                   then\n                      Error_Msg_NE\n-                       (\"global item & cannot have mode In_Out or Output \"\n-                        & \"(SPARK 'R'M 6.1.4(12))\", Item, Item_Id);\n+                       (\"global item & cannot have mode In_Out or Output\",\n+                        Item, Item_Id);\n                      Error_Msg_NE\n                        (\"\\\\item already appears as input of subprogram &\",\n                         Item, Context);\n@@ -2215,8 +2187,7 @@ package body Sem_Prag is\n          begin\n             if Ekind (Spec_Id) = E_Function then\n                Error_Msg_N\n-                 (\"global mode & is not applicable to functions \"\n-                  & \"(SPARK 'R'M 6.1.4(10))\", Mode);\n+                 (\"global mode & is not applicable to functions\", Mode);\n             end if;\n          end Check_Mode_Restriction_In_Function;\n \n@@ -2504,21 +2475,19 @@ package body Sem_Prag is\n                if Ekind_In (Item_Id, E_Abstract_State, E_Variable) then\n \n                   --  The state or variable must be declared in the visible\n-                  --  declarations of the package.\n+                  --  declarations of the package (SPARK RM 7.1.5(7)).\n \n                   if not Contains (States_And_Vars, Item_Id) then\n                      Error_Msg_Name_1 := Chars (Pack_Id);\n                      Error_Msg_NE\n                        (\"initialization item & must appear in the visible \"\n-                        & \"declarations of package % (SPARK 'R'M 7.1.5(7))\",\n-                        Item, Item_Id);\n+                        & \"declarations of package %\", Item, Item_Id);\n \n                   --  Detect a duplicate use of the same initialization item\n+                  --  (SPARK RM 7.1.5(5)).\n \n                   elsif Contains (Items_Seen, Item_Id) then\n-                     Error_Msg_N\n-                       (\"duplicate initialization item (SPARK 'R'M 7.1.5(5))\",\n-                        Item);\n+                     Error_Msg_N (\"duplicate initialization item\", Item);\n \n                   --  The item is legal, add it to the list of processed states\n                   --  and variables.\n@@ -2536,20 +2505,20 @@ package body Sem_Prag is\n                   end if;\n \n                --  The item references something that is not a state or a\n-               --  variable.\n+               --  variable (SPARK RM 7.1.5(3)).\n \n                else\n                   Error_Msg_N\n-                    (\"initialization item must denote variable or state \"\n-                     & \"(SPARK 'R'M 7.1.5(3))\", Item);\n+                    (\"initialization item must denote variable or state\",\n+                     Item);\n                end if;\n \n             --  Some form of illegal construct masquerading as a name\n+            --  (SPARK RM 7.1.5(3)).\n \n             else\n                Error_Msg_N\n-                 (\"initialization item must denote variable or state \"\n-                  & \"(SPARK 'R'M 7.1.5(3))\", Item);\n+                 (\"initialization item must denote variable or state\", Item);\n             end if;\n          end if;\n       end Analyze_Initialization_Item;\n@@ -2621,11 +2590,10 @@ package body Sem_Prag is\n                            Input, Input_Id);\n \n                      --  Detect a duplicate use of the same input item\n+                     --  (SPARK RM 7.1.5(5)).\n \n                      elsif Contains (Inputs_Seen, Input_Id) then\n-                        Error_Msg_N\n-                          (\"duplicate input item (SPARK 'R'M 7.1.5(5))\",\n-                           Input);\n+                        Error_Msg_N (\"duplicate input item\", Input);\n \n                      --  Input is legal, add it to the list of processed inputs\n \n@@ -10169,7 +10137,8 @@ package body Sem_Prag is\n                   Status : in out Boolean);\n                --  Flag Status denotes whether a particular option has been\n                --  seen while processing a state. This routine verifies that\n-               --  Opt is not a duplicate option and sets the flag Status.\n+               --  Opt is not a duplicate option and sets the flag Status\n+               --  (SPARK RM 7.1.4(1)).\n \n                procedure Check_Duplicate_Property\n                  (Prop   : Node_Id;\n@@ -10178,6 +10147,7 @@ package body Sem_Prag is\n                --  seen while processing option External. This routine verifies\n                --  that Prop is not a duplicate property and sets flag Status.\n                --  Opt is not a duplicate property and sets the flag Status.\n+               --  (SPARK RM 7.1.4(2))\n \n                procedure Create_Abstract_State\n                  (Nam     : Name_Id;\n@@ -10307,7 +10277,7 @@ package body Sem_Prag is\n                   end if;\n \n                   --  Ensure that the expression of the external state property\n-                  --  is static Boolean (if applicable).\n+                  --  is static Boolean (if applicable) (SPARK RM 7.1.2(5)).\n \n                   if Present (Expr) then\n                      Analyze_And_Resolve (Expr, Standard_Boolean);\n@@ -10317,7 +10287,7 @@ package body Sem_Prag is\n                      else\n                         Error_Msg_N\n                           (\"expression of external state property must be \"\n-                           & \"static (SPARK 'R'M 7.1.2(5))\", Expr);\n+                           & \"static\", Expr);\n                      end if;\n \n                   --  The lack of expression defaults the property to True\n@@ -10409,8 +10379,7 @@ package body Sem_Prag is\n                is\n                begin\n                   if Status then\n-                     Error_Msg_N\n-                       (\"duplicate state option (SPARK 'R'M 7.1.4(1))\", Opt);\n+                     Error_Msg_N (\"duplicate state option\", Opt);\n                   end if;\n \n                   Status := True;\n@@ -10426,9 +10395,7 @@ package body Sem_Prag is\n                is\n                begin\n                   if Status then\n-                     Error_Msg_N\n-                       (\"duplicate external property (SPARK 'R'M 7.1.4(2))\",\n-                        Prop);\n+                     Error_Msg_N (\"duplicate external property\", Prop);\n                   end if;\n \n                   Status := True;\n@@ -10554,12 +10521,13 @@ package body Sem_Prag is\n \n                      --  When an erroneous option Part_Of is without a parent\n                      --  state, it appears in the list of expression of the\n-                     --  aggregate rather than the component associations.\n+                     --  aggregate rather than the component associations\n+                     --  (SPARK RM 7.1.4(9)).\n \n                      elsif Chars (Opt) = Name_Part_Of then\n                         Error_Msg_N\n-                          (\"indicator Part_Of must denote an abstract state \"\n-                           & \"(SPARK 'R'M 7.1.4(9))\", Opt);\n+                          (\"indicator Part_Of must denote an abstract state\",\n+                           Opt);\n \n                      else\n                         Error_Msg_N\n@@ -11535,11 +11503,9 @@ package body Sem_Prag is\n             end if;\n \n             --  If we get here, then the pragma applies to a non-object\n-            --  construct, issue a generic error.\n+            --  construct, issue a generic error (SPARK RM 7.1.3(2)).\n \n-            Error_Pragma\n-               (\"pragma % must apply to a volatile object \"\n-                & \"(SPARK 'R'M 7.1.3(2))\");\n+            Error_Pragma (\"pragma % must apply to a volatile object\");\n          end Async_Effective;\n \n          ------------------\n@@ -18928,17 +18894,17 @@ package body Sem_Prag is\n             Spec_Id := Corresponding_Spec (Context);\n \n             --  State refinement is allowed only when the corresponding package\n-            --  declaration has a non-null pragma Abstract_State. Refinement is\n-            --  not enforced when SPARK checks are suppressed.\n+            --  declaration has non-null pragma Abstract_State. Refinement not\n+            --  enforced when SPARK checks are suppressed (SPARK RM 7.2.2(3)).\n \n             if SPARK_Mode /= Off\n               and then\n                 (No (Abstract_States (Spec_Id))\n-                   or else Has_Null_Abstract_State (Spec_Id))\n+                  or else Has_Null_Abstract_State (Spec_Id))\n             then\n                Error_Msg_NE\n                  (\"useless refinement, package & does not define abstract \"\n-                  & \"states (SPARK 'R'M 7.2.2(3))\", N, Spec_Id);\n+                  & \"states\", N, Spec_Id);\n                return;\n             end if;\n \n@@ -22353,26 +22319,27 @@ package body Sem_Prag is\n       Spec_Id := Corresponding_Spec (Body_Decl);\n       Depends := Get_Pragma (Spec_Id, Pragma_Depends);\n \n-      --  The subprogram declarations lacks pragma Depends. This renders\n-      --  Refined_Depends useless as there is nothing to refine.\n+      --  Subprogram declarations lacks pragma Depends. Refined_Depends is\n+      --  rendered useless as there is nothing to refine (SPARK RM 7.2.5(2)).\n \n       if No (Depends) then\n          Error_Msg_NE\n            (\"useless refinement, declaration of subprogram & lacks aspect or \"\n-            & \"pragma Depends (SPARK 'R'M 7.2.5(2))\", N, Spec_Id);\n+            & \"pragma Depends\", N, Spec_Id);\n          return;\n       end if;\n \n       Deps := Get_Pragma_Arg (First (Pragma_Argument_Associations (Depends)));\n \n       --  A null dependency relation renders the refinement useless because it\n       --  cannot possibly mention abstract states with visible refinement. Note\n-      --  that the inverse is not true as states may be refined to null.\n+      --  that the inverse is not true as states may be refined to null\n+      --  (SPARK RM 7.2.5(2)).\n \n       if Nkind (Deps) = N_Null then\n          Error_Msg_NE\n            (\"useless refinement, subprogram & does not depend on abstract \"\n-            & \"state with visible refinement (SPARK 'R'M 7.2.5(2))\",\n+            & \"state with visible refinement\",\n             N, Spec_Id);\n          return;\n       end if;\n@@ -22556,13 +22523,13 @@ package body Sem_Prag is\n                   Out_Seen := True;\n \n                --  A Proof_In constituent cannot participate in the completion\n-               --  of an Output state.\n+               --  of an Output state (SPARK RM 7.2.4(5)).\n \n                elsif Present_Then_Remove (Proof_In_Constits, Constit_Id) then\n                   Error_Msg_Name_1 := Chars (State_Id);\n                   Error_Msg_NE\n                     (\"constituent & of state % must have mode Input, In_Out \"\n-                     & \"or Output in global refinement (SPARK 'R'M 7.2.4(5))\",\n+                     & \"or Output in global refinement\",\n                      N, Constit_Id);\n \n                else\n@@ -22584,15 +22551,15 @@ package body Sem_Prag is\n                null;\n \n             --  A single Output constituent is a valid completion only when\n-            --  some of the other constituents are missing.\n+            --  some of the other constituents are missing (SPARK RM 7.2.4(5)).\n \n             elsif Has_Missing and then Out_Seen then\n                null;\n \n             else\n                Error_Msg_NE\n                  (\"global refinement of state & redefines the mode of its \"\n-                  & \"constituents (SPARK 'R'M 7.2.4(5))\", N, State_Id);\n+                  & \"constituents\", N, State_Id);\n             end if;\n          end Check_Constituent_Usage;\n \n@@ -22656,7 +22623,7 @@ package body Sem_Prag is\n                   In_Seen := True;\n \n                --  The constituent appears in the global refinement, but has\n-               --  mode In_Out, Output or Proof_In.\n+               --  mode In_Out, Output or Proof_In (SPARK RM 7.2.4(5)).\n \n                elsif Present_Then_Remove (In_Out_Constits, Constit_Id)\n                  or else Present_Then_Remove (Out_Constits, Constit_Id)\n@@ -22665,7 +22632,7 @@ package body Sem_Prag is\n                   Error_Msg_Name_1 := Chars (State_Id);\n                   Error_Msg_NE\n                     (\"constituent & of state % must have mode Input in global \"\n-                     & \"refinement (SPARK 'R'M 7.2.4(5))\", N, Constit_Id);\n+                     & \"refinement\", N, Constit_Id);\n                end if;\n \n                Next_Elmt (Constit_Elmt);\n@@ -22738,7 +22705,7 @@ package body Sem_Prag is\n                   null;\n \n                --  The constituent appears in the global refinement, but has\n-               --  mode Input, In_Out or Proof_In.\n+               --  mode Input, In_Out or Proof_In (SPARK RM 7.2.4(5)).\n \n                elsif Present_Then_Remove (In_Constits, Constit_Id)\n                  or else Present_Then_Remove (In_Out_Constits, Constit_Id)\n@@ -22747,18 +22714,16 @@ package body Sem_Prag is\n                   Error_Msg_Name_1 := Chars (State_Id);\n                   Error_Msg_NE\n                     (\"constituent & of state % must have mode Output in \"\n-                     & \"global refinement (SPARK 'R'M 7.2.4(5))\",\n-                     N, Constit_Id);\n+                     & \"global refinement\", N, Constit_Id);\n \n-               --  The constituent is altogether missing\n+               --  The constituent is altogether missing (SPARK RM 7.2.5(3))\n \n                else\n                   if not Posted then\n                      Posted := True;\n                      Error_Msg_NE\n                        (\"output state & must be replaced by all its \"\n-                        & \"constituents in global refinement \"\n-                        & \"(SPARK 'R'M 7.2.5(3))\", N, State_Id);\n+                        & \"constituents in global refinement\", N, State_Id);\n                   end if;\n \n                   Error_Msg_NE\n@@ -22830,7 +22795,7 @@ package body Sem_Prag is\n                   Proof_In_Seen := True;\n \n                --  The constituent appears in the global refinement, but has\n-               --  mode Input, In_Out or Output.\n+               --  mode Input, In_Out or Output (SPARK RM 7.2.4(5)).\n \n                elsif Present_Then_Remove (In_Constits, Constit_Id)\n                  or else Present_Then_Remove (In_Out_Constits, Constit_Id)\n@@ -22839,8 +22804,7 @@ package body Sem_Prag is\n                   Error_Msg_Name_1 := Chars (State_Id);\n                   Error_Msg_NE\n                     (\"constituent & of state % must have mode Proof_In in \"\n-                     & \"global refinement (SPARK 'R'M 7.2.4(5))\",\n-                     N, Constit_Id);\n+                     & \"global refinement\", N, Constit_Id);\n                end if;\n \n                Next_Elmt (Constit_Elmt);\n@@ -22971,12 +22935,11 @@ package body Sem_Prag is\n             elsif Contains (Proof_In_Items, Item_Id) then\n                null;\n \n-            --  The item does not appear in the corresponding Global pragma, it\n-            --  must be an extra.\n+            --  The item does not appear in the corresponding Global pragma,\n+            --  it must be an extra (SPARK RM 7.2.4(3)).\n \n             else\n-               Error_Msg_NE\n-                 (\"extra global item & (SPARK 'R'M 7.2.4(3))\", Item, Item_Id);\n+               Error_Msg_NE (\"extra global item &\", Item, Item_Id);\n             end if;\n          end Check_Refined_Global_Item;\n \n@@ -23145,9 +23108,9 @@ package body Sem_Prag is\n          Has_Proof_In_State => Has_Proof_In_State,\n          Has_Null_State     => Has_Null_State);\n \n-      --  The corresponding Global pragma must mention at least one state with\n-      --  a visible refinement at the point Refined_Global is processed. States\n-      --  with null refinements warrant a Refined_Global pragma.\n+      --  Corresponding Global pragma must mention at least one state witha\n+      --  visible refinement at the point Refined_Global is processed. States\n+      --  with null refinements need Refined_Global pragma (SPARK RM 7.2.4(2)).\n \n       if not Has_In_State\n         and then not Has_In_Out_State\n@@ -23157,8 +23120,7 @@ package body Sem_Prag is\n       then\n          Error_Msg_NE\n            (\"useless refinement, subprogram & does not depends on abstract \"\n-            & \"state with visible refinement (SPARK 'R'M 7.2.4(2))\",\n-            N, Spec_Id);\n+            & \"state with visible refinement\", N, Spec_Id);\n          return;\n       end if;\n \n@@ -23450,13 +23412,12 @@ package body Sem_Prag is\n \n                   --  If we get here, then the constituent is not a hidden\n                   --  state of the related package and may not be used in a\n-                  --  refinement.\n+                  --  refinement (SPARK RM 7.2.2(9)).\n \n                   Error_Msg_Name_1 := Chars (Spec_Id);\n                   Error_Msg_NE\n                     (\"cannot use & in refinement, constituent is not a hidden \"\n-                     & \"state of package % (SPARK 'R'M 7.2.2(9))\",\n-                     Constit, Constit_Id);\n+                     & \"state of package %\", Constit, Constit_Id);\n                end if;\n             end Check_Matching_Constituent;\n \n@@ -23542,23 +23503,24 @@ package body Sem_Prag is\n             Error_Msg_Name_1 := Prop_Nam;\n \n             --  The property is enabled in the related Abstract_State pragma\n-            --  that defines the state.\n+            --  that defines the state (SPARK RM 7.2.8(3)).\n \n             if Enabled then\n                if No (Constit) then\n                   Error_Msg_NE\n                     (\"external state & requires at least one constituent with \"\n-                     & \"property % (SPARK 'R'M 7.2.8(3))\", State, State_Id);\n+                     & \"property %\", State, State_Id);\n                end if;\n \n-            --  The property is missing in the declaration of the state, but a\n-            --  constituent is introducing it in the state refinement.\n+            --  The property is missing in the declaration of the state, but\n+            --  a constituent is introducing it in the state refinement\n+            --  (SPARK RM 7.2.8(3)).\n \n             elsif Present (Constit) then\n                Error_Msg_Name_2 := Chars (Constit);\n                Error_Msg_NE\n-                 (\"external state & lacks property % set by constituent % \"\n-                  & \"(SPARK 'R'M 7.2.8(3))\", State, State_Id);\n+                 (\"external state & lacks property % set by constituent %\",\n+                  State, State_Id);\n             end if;\n          end Check_External_Property;\n \n@@ -23570,12 +23532,11 @@ package body Sem_Prag is\n             State_Elmt : Elmt_Id;\n \n          begin\n-            --  Detect a duplicate refinement of a state\n+            --  Detect a duplicate refinement of a state (SPARK RM 7.2.2(8))\n \n             if Contains (Refined_States_Seen, State_Id) then\n                Error_Msg_NE\n-                 (\"duplicate refinement of state & (SPARK 'R'M 7.2.2(8))\",\n-                  State, State_Id);\n+                 (\"duplicate refinement of state &\", State, State_Id);\n                return;\n             end if;\n \n@@ -23694,21 +23655,19 @@ package body Sem_Prag is\n                return;\n             end if;\n \n-            --  References to a state with visible refinement are illegal. In\n-            --  the case where nested packages are involved, detecting such\n-            --  references is tricky because pragma Refined_State is analyzed\n-            --  later than the offending pragma Depends or Global. References\n-            --  that occur in such nested context are stored in a list. Emit\n-            --  errors for all references found in Body_References.\n+            --  References to a state with visible refinement are illegal.\n+            --  When nested packages are involved, detecting such references is\n+            --  tricky because pragma Refined_State is analyzed later than the\n+            --  offending pragma Depends or Global. References that occur in\n+            --  such nested context are stored in a list. Emit errors for all\n+            --  references found in Body_References (SPARK RM 6.1.4(8)).\n \n             if Present (Body_References (State_Id)) then\n                Body_Ref_Elmt := First_Elmt (Body_References (State_Id));\n                while Present (Body_Ref_Elmt) loop\n                   Body_Ref := Node (Body_Ref_Elmt);\n \n-                  Error_Msg_N\n-                    (\"reference to & not allowed (SPARK 'R'M 6.1.4(8))\",\n-                     Body_Ref);\n+                  Error_Msg_N (\"reference to & not allowed\", Body_Ref);\n                   Error_Msg_Sloc := Sloc (State);\n                   Error_Msg_N (\"\\\\refinement of & is visible#\", Body_Ref);\n \n@@ -23800,22 +23759,21 @@ package body Sem_Prag is\n                null;\n \n             --  The external state has constituents, but none of them are\n-            --  external.\n+            --  external (SPARK RM 7.2.8(2)).\n \n             else\n                Error_Msg_NE\n                  (\"external state & requires at least one external \"\n-                  & \"constituent or null refinement (SPARK 'R'M 7.2.8(2))\",\n-                  State, State_Id);\n+                  & \"constituent or null refinement\", State, State_Id);\n             end if;\n \n          --  When a refined state is not external, it should not have external\n-         --  constituents.\n+         --  constituents (SPARK RM 7.2.8(1)).\n \n          elsif External_Constit_Seen then\n             Error_Msg_NE\n               (\"non-external state & cannot contain external constituents in \"\n-               & \"refinement (SPARK 'R'M 7.2.8(1))\", State, State_Id);\n+               & \"refinement\", State, State_Id);\n          end if;\n \n          --  Ensure that all Part_Of candidate constituents have been mentioned\n@@ -24779,15 +24737,15 @@ package body Sem_Prag is\n \n          --  Determine whether the constituent is part of an encapsulating\n          --  state that appears in the same context and if this is the case,\n-         --  emit an error.\n+         --  emit an error (SPARK RM 7.2.6(7)).\n \n          State_Id := Find_Encapsulating_State (Constit_Id);\n \n          if Present (State_Id) then\n             Error_Msg_Name_1 := Chars (Constit_Id);\n             Error_Msg_NE\n               (\"cannot mention state & and its constituent % in the same \"\n-               & \"context (SPARK 'R'M 7.2.6(7))\", Context, State_Id);\n+               & \"context\", Context, State_Id);\n             exit;\n          end if;\n "}, {"sha": "96d22426124b21ff73d55dda915418a3af5b8031", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 62, "deletions": 51, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9966234d510c33008281d0793d595f367f599b3/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9966234d510c33008281d0793d595f367f599b3/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=f9966234d510c33008281d0793d595f367f599b3", "patch": "@@ -6434,12 +6434,42 @@ package body Sem_Res is\n    --  Used to resolve identifiers and expanded names\n \n    procedure Resolve_Entity_Name (N : Node_Id; Typ : Entity_Id) is\n-      E    : constant Entity_Id := Entity (N);\n-      Par  : Node_Id;\n-      Prev : Node_Id;\n+      function Appears_In_Check (Nod : Node_Id) return Boolean;\n+      --  Denote whether an arbitrary node Nod appears in a check node\n \n-      Usage_OK : Boolean := False;\n-      --  Flag set when the use of a volatile object agrees with its context\n+      ----------------------\n+      -- Appears_In_Check --\n+      ----------------------\n+\n+      function Appears_In_Check (Nod : Node_Id) return Boolean is\n+         Par : Node_Id;\n+\n+      begin\n+         --  Climb the parent chain looking for a check node\n+\n+         Par := Nod;\n+         while Present (Par) loop\n+            if Nkind (Par) in N_Raise_xxx_Error then\n+               return True;\n+\n+            --  Prevent the search from going too far\n+\n+            elsif Is_Body_Or_Package_Declaration (Par) then\n+               exit;\n+            end if;\n+\n+            Par := Parent (Par);\n+         end loop;\n+\n+         return False;\n+      end Appears_In_Check;\n+\n+      --  Local variables\n+\n+      E   : constant Entity_Id := Entity (N);\n+      Par : constant Node_Id   := Parent (N);\n+\n+   --  Start of processing for Resolve_Entity_Name\n \n    begin\n       --  If garbage from errors, set to Any_Type and return\n@@ -6555,62 +6585,43 @@ package body Sem_Res is\n           (Async_Writers_Enabled (E)\n              or else Effective_Reads_Enabled (E))\n       then\n-         Par  := Parent (N);\n-         Prev := N;\n-         while Present (Par) loop\n-\n-            --  The volatile object can appear on either side of an assignment\n+         --  The volatile object can appear on either side of an assignment\n \n-            if Nkind (Par) = N_Assignment_Statement then\n-               Usage_OK := True;\n-               exit;\n-\n-            --  The volatile object is part of the initialization expression of\n-            --  another object. Ensure that the climb of the parent chain came\n-            --  from the expression side and not from the name side.\n-\n-            elsif Nkind (Par) = N_Object_Declaration\n-              and then Present (Expression (Par))\n-              and then Prev = Expression (Par)\n-            then\n-               Usage_OK := True;\n-               exit;\n-\n-            --  The volatile object appears as an actual parameter in a call to\n-            --  an instance of Unchecked_Conversion whose result is renamed.\n+         if Nkind (Par) = N_Assignment_Statement then\n+            null;\n \n-            elsif Nkind (Par) = N_Function_Call\n-              and then Is_Unchecked_Conversion_Instance (Entity (Name (Par)))\n-              and then Nkind (Parent (Par)) = N_Object_Renaming_Declaration\n-            then\n-               Usage_OK := True;\n-               exit;\n+         --  The volatile object is part of the initialization expression of\n+         --  another object. Ensure that the climb of the parent chain came\n+         --  from the expression side and not from the name side.\n \n-            --  Assume that references to volatile objects that appear as\n-            --  actual parameters in a procedure call are always legal. The\n-            --  full legality check is done when the actuals are resolved.\n+         elsif Nkind (Par) = N_Object_Declaration\n+           and then Present (Expression (Par))\n+           and then N = Expression (Par)\n+         then\n+            null;\n \n-            elsif Nkind (Par) = N_Procedure_Call_Statement then\n-               Usage_OK := True;\n-               exit;\n+         --  The volatile object appears as an actual parameter in a call to an\n+         --  instance of Unchecked_Conversion whose result is renamed.\n \n-            --  Allow references to volatile objects in various checks\n+         elsif Nkind (Par) = N_Function_Call\n+           and then Is_Unchecked_Conversion_Instance (Entity (Name (Par)))\n+           and then Nkind (Parent (Par)) = N_Object_Renaming_Declaration\n+         then\n+            null;\n \n-            elsif Nkind (Par) in N_Raise_xxx_Error then\n-               Usage_OK := True;\n-               exit;\n+         --  Assume that references to volatile objects that appear as actual\n+         --  parameters in a procedure call are always legal. The full legality\n+         --  check is done when the actuals are resolved.\n \n-            --  Prevent the search from going too far\n+         elsif Nkind (Par) = N_Procedure_Call_Statement then\n+            null;\n \n-            elsif Is_Body_Or_Package_Declaration (Par) then\n-               exit;\n-            end if;\n+         --  Allow references to volatile objects in various checks\n \n-            Prev := Par;\n-            Par  := Parent (Par);\n-         end loop;\n+         elsif Appears_In_Check (Par) then\n+            null;\n \n-         if not Usage_OK then\n+         else\n             Error_Msg_N\n               (\"volatile object cannot appear in this context \"\n                & \"(SPARK RM 7.1.3(13))\", N);"}]}