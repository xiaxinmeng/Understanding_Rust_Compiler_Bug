{"sha": "c466b2cd136139e0e9fef6019fa6f136e23c7a4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ2NmIyY2QxMzYxMzllMGU5ZmVmNjAxOWZhNmYxMzZlMjNjN2E0Yw==", "commit": {"author": {"name": "Kris Van Hees", "email": "kvanhees@gcc.gnu.org", "date": "2008-07-18T20:23:42Z"}, "committer": {"name": "Kris Van Hees", "email": "kvanhees@gcc.gnu.org", "date": "2008-07-18T20:23:42Z"}, "message": "c-common.c (c_stddef_cpp_builtins): Define __CHAR16_TYPE__ and __CHAR32_TYPE__.\n\ngcc/ChangeLog:\n2008-07-16  Kris Van Hees <kris.van.hees@oracle.com>\n\n        * c-common.c (c_stddef_cpp_builtins): Define __CHAR16_TYPE__\n        and __CHAR32_TYPE__.\n        * c-typeck.c (digest_init): Support char16_t and char32_t.\n        (set_nonincremental_init_from_string): Idem.\n\ngcc/cp/ChangeLog:\n2008-07-16  Kris Van Hees <kris.van.hees@oracle.com>\n\n        * rtti.c (emit_support_tinfos): Add char16_type_node and\n        char32_type_node.\n        * typeck2.c (digest_init): Support char16_t and char32_t.\n\ngcc/testsuite/ChangeLog:\n2008-07-16  Kris Van Hees <kris.van.hees@oracle.com>\n\n        Tests for char16_t and char32_t support.\n        * g++.dg/ext/utf-array.C: New\n        * g++.dg/ext/utf-array-short-wchar.C: New\n        * g++.dg/ext/utf-rtti.C: New\n        * g++.dg/ext/utf-type.c: New\n        * gcc.dg/utf-array.c: New\n        * gcc.dg/utf-array-short-wchar.c: New\n        * gcc.dg/utf-inc-init.c: New\n        * gcc.dg/utf-type.c: New\n\nlibstdc++-v3/ChangeLog:\n2008-07-16  Kris Van Hees <kris.van.hees@oracle.com>\n            Holger Hopp <holger.hopp@sap.com>\n\n        * config/abi/pre/gnu.ver: Support char16_t and char32_t.\n        * testsuite/util/testsuite_abi.cc (check_version): Add\n        CXXABI_1.3.3 to known_versions.\n\nFrom-SVN: r137965", "tree": {"sha": "b27287a01b43f1b1f386e9e0c08cce428dc4e5ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b27287a01b43f1b1f386e9e0c08cce428dc4e5ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c466b2cd136139e0e9fef6019fa6f136e23c7a4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c466b2cd136139e0e9fef6019fa6f136e23c7a4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c466b2cd136139e0e9fef6019fa6f136e23c7a4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/comments", "author": null, "committer": null, "parents": [{"sha": "ab07512c507564f5386ed85b3b0cc47e56326e4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab07512c507564f5386ed85b3b0cc47e56326e4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab07512c507564f5386ed85b3b0cc47e56326e4a"}], "stats": {"total": 548, "additions": 502, "deletions": 46}, "files": [{"sha": "e074ef6c6cf17be91b8e67a07b91e99eb5e4d23e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c466b2cd136139e0e9fef6019fa6f136e23c7a4c", "patch": "@@ -1,3 +1,10 @@\n+2008-07-18  Kris Van Hees  <kris.van.hees@oracle.com>\n+\n+\t* c-common.c (c_stddef_cpp_builtins): Define __CHAR16_TYPE__\n+\tand __CHAR32_TYPE__.\n+\t* c-typeck.c (digest_init): Support char16_t and char32_t.\n+\t(set_nonincremental_init_from_string): Idem.\n+\n 2008-07-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR middle-end/36859"}, {"sha": "cc13e056fd5e9a548f7d4d7a1e60bd4e0eb1e05d", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c466b2cd136139e0e9fef6019fa6f136e23c7a4c", "patch": "@@ -4895,6 +4895,8 @@ c_stddef_cpp_builtins(void)\n   builtin_define_with_value (\"__WINT_TYPE__\", WINT_TYPE, 0);\n   builtin_define_with_value (\"__INTMAX_TYPE__\", INTMAX_TYPE, 0);\n   builtin_define_with_value (\"__UINTMAX_TYPE__\", UINTMAX_TYPE, 0);\n+  builtin_define_with_value (\"__CHAR16_TYPE__\", CHAR16_TYPE, 0);\n+  builtin_define_with_value (\"__CHAR32_TYPE__\", CHAR32_TYPE, 0);\n }\n \n static void"}, {"sha": "dafce2ac23c1d8573b922bf986040f524e2c8614", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 28, "deletions": 27, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=c466b2cd136139e0e9fef6019fa6f136e23c7a4c", "patch": "@@ -4704,47 +4704,56 @@ digest_init (tree type, tree init, bool strict_string, int require_constant)\n \t\t\t || typ1 == signed_char_type_node\n \t\t\t || typ1 == unsigned_char_type_node);\n       bool wchar_array = !!comptypes (typ1, wchar_type_node);\n-      if (char_array || wchar_array)\n+      bool char16_array = !!comptypes (typ1, char16_type_node);\n+      bool char32_array = !!comptypes (typ1, char32_type_node);\n+\n+      if (char_array || wchar_array || char16_array || char32_array)\n \t{\n \t  struct c_expr expr;\n-\t  bool char_string;\n+\t  tree typ2 = TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (inside_init)));\n \t  expr.value = inside_init;\n \t  expr.original_code = (strict_string ? STRING_CST : ERROR_MARK);\n \t  maybe_warn_string_init (type, expr);\n \n-\t  char_string\n-\t    = (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (inside_init)))\n-\t       == char_type_node);\n-\n \t  if (comptypes (TYPE_MAIN_VARIANT (TREE_TYPE (inside_init)),\n \t\t\t TYPE_MAIN_VARIANT (type)))\n \t    return inside_init;\n \n-\t  if (!wchar_array && !char_string)\n+\t  if (char_array)\n \t    {\n-\t      error_init (\"char-array initialized from wide string\");\n-\t      return error_mark_node;\n+\t      if (typ2 != char_type_node)\n+\t\t{\n+\t\t  error_init (\"char-array initialized from wide string\");\n+\t\t  return error_mark_node;\n+\t\t}\n \t    }\n-\t  if (char_string && !char_array)\n+\t  else\n \t    {\n-\t      error_init (\"wchar_t-array initialized from non-wide string\");\n-\t      return error_mark_node;\n+\t      if (typ2 == char_type_node)\n+\t\t{\n+\t\t  error_init (\"wide character array initialized from non-wide \"\n+\t\t\t      \"string\");\n+\t\t  return error_mark_node;\n+\t\t}\n+\t      else if (!comptypes(typ1, typ2))\n+\t\t{\n+\t\t  error_init (\"wide character array initialized from \"\n+\t\t\t      \"incompatible wide string\");\n+\t\t  return error_mark_node;\n+\t\t}\n \t    }\n \n \t  TREE_TYPE (inside_init) = type;\n \t  if (TYPE_DOMAIN (type) != 0\n \t      && TYPE_SIZE (type) != 0\n \t      && TREE_CODE (TYPE_SIZE (type)) == INTEGER_CST\n-\t      /* Subtract 1 (or sizeof (wchar_t))\n+\t      /* Subtract the size of a single (possibly wide) character\n \t\t because it's ok to ignore the terminating null char\n \t\t that is counted in the length of the constant.  */\n \t      && 0 > compare_tree_int (TYPE_SIZE_UNIT (type),\n \t\t\t\t       TREE_STRING_LENGTH (inside_init)\n-\t\t\t\t       - ((TYPE_PRECISION (typ1)\n-\t\t\t\t\t   != TYPE_PRECISION (char_type_node))\n-\t\t\t\t\t  ? (TYPE_PRECISION (wchar_type_node)\n-\t\t\t\t\t     / BITS_PER_UNIT)\n-\t\t\t\t\t  : 1)))\n+\t\t\t\t       - (TYPE_PRECISION (typ1)\n+\t\t\t\t\t  / BITS_PER_UNIT)))\n \t    pedwarn_init (\"initializer-string for array of chars is too long\");\n \n \t  return inside_init;\n@@ -6092,15 +6101,7 @@ set_nonincremental_init_from_string (tree str)\n \n   gcc_assert (TREE_CODE (constructor_type) == ARRAY_TYPE);\n \n-  if (TYPE_PRECISION (TREE_TYPE (TREE_TYPE (str)))\n-      == TYPE_PRECISION (char_type_node))\n-    wchar_bytes = 1;\n-  else\n-    {\n-      gcc_assert (TYPE_PRECISION (TREE_TYPE (TREE_TYPE (str)))\n-\t\t  == TYPE_PRECISION (wchar_type_node));\n-      wchar_bytes = TYPE_PRECISION (wchar_type_node) / BITS_PER_UNIT;\n-    }\n+  wchar_bytes = TYPE_PRECISION (TREE_TYPE (TREE_TYPE (str))) / BITS_PER_UNIT;\n   charwidth = TYPE_PRECISION (char_type_node);\n   type = TREE_TYPE (constructor_type);\n   p = TREE_STRING_POINTER (str);"}, {"sha": "6daff1e9df5b7a166602e94ef1f900c3579bacac", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c466b2cd136139e0e9fef6019fa6f136e23c7a4c", "patch": "@@ -1,4 +1,10 @@\n-2008-07-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+2008-07-18  Kris Van Hees  <kris.van.hees@oracle.com>\n+\n+\t* rtti.c (emit_support_tinfos): Add char16_type_node and\n+\tchar32_type_node.\n+\t* typeck2.c (digest_init): Support char16_t and char32_t.\n+\n+2008-07-18  Kavih R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* cvt.c (convert_to_void): Avoid C++ keywords.\n \t* decl.c (walk_namespaces_r, wrapup_globals_for_namespace):\n@@ -59,28 +65,28 @@\n 2008-07-11  Dodji Seketeli  <dseketel@redhat.com>\n \n \tPR c++/31754\n-\t* cp-tree.h (struct cp_decl_specifier_seq): add a location field. It\n+\t* cp-tree.h (struct cp_decl_specifier_seq): Add a location field. It\n \tcarries the location of the primary type.\n-\t* parser.c (cp_parser_check_type_definition): update documentation.\n+\t* parser.c (cp_parser_check_type_definition): Update documentation.\n \t(cp_parser_check_for_definition_in_return_type,\n \tcp_parser_check_for_invalid_template_id,\n \tcp_parser_set_decl_spec_type,\n \tcp_parser_check_for_definition_in_return_type,\n \tcp_parser_diagnose_invalid_type_name,\n \tcp_parser_new_expression, cp_parser_explicit_instantiation,\n \tcp_parser_type_specifier, cp_parser_simple_type_specifier,\n-\tcp_parser_omp_for_loop, cp_parser_pragma): use location in error messages.\n-\n+\tcp_parser_omp_for_loop, cp_parser_pragma): Use location in error\n+\tmessages.\n \n 2008-07-11 Dodji Seketeli <dseketel@redhat.com>\n \n \tPR c++/31754\n \t* pt.c, semantic.c:\n \t* semantic.c (qualified_name_lookup_error, finish_id_expression):\n-\tadd a location_t parameter so that\n+\tAdd a location_t parameter so that\n \terror message can have a more accurate location.\n-\t* cp-tree.h: updated prototype\n-\t* pt.c (tsubst_qualified_id): use location in error messages.\n+\t* cp-tree.h: Updated prototype\n+\t* pt.c (tsubst_qualified_id): Use location in error messages.\n \t* parser.c (cp_parser_postfix_expression,\n \tcp_parser_objc_statement, cp_parser_trait_expr,\n \tcp_parser_token_is_class_key,\n@@ -103,8 +109,8 @@\n \tcp_parser_function_specifier_opt, cp_parser_decltype,\n \tcp_parser_mem_initializer_list, cp_parser_mem_initializer,\n \tcp_parser_mem_initializer_id, cp_parser_template_parameter,\n-\tcp_parser_type_parameter, cp_parser_template_id, cp_parser_template_name,\n-\tcp_parser_template_argument): likewise.\n+\tcp_parser_type_parameter, cp_parser_template_id,\n+\tcp_parser_template_name, cp_parser_template_argument): Likewise.\n \n 2008-07-09  Paolo Carlini  <paolo.carlini@oracle.com>\n "}, {"sha": "d2e544b0f9e63dd21e7416bbffd51f699cf46656", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=c466b2cd136139e0e9fef6019fa6f136e23c7a4c", "patch": "@@ -1408,7 +1408,7 @@ emit_support_tinfos (void)\n   {\n     &void_type_node,\n     &boolean_type_node,\n-    &wchar_type_node,\n+    &wchar_type_node, &char16_type_node, &char32_type_node,\n     &char_type_node, &signed_char_type_node, &unsigned_char_type_node,\n     &short_integer_type_node, &short_unsigned_type_node,\n     &integer_type_node, &unsigned_type_node,"}, {"sha": "a30ff547f188dc6a65aa0019388ac2d5ca7e0404", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=c466b2cd136139e0e9fef6019fa6f136e23c7a4c", "patch": "@@ -727,17 +727,26 @@ digest_init_r (tree type, tree init, bool nested)\n \t{\n \t  tree char_type = TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (init)));\n \n-\t  if (char_type != char_type_node\n-\t      && TYPE_PRECISION (typ1) == BITS_PER_UNIT)\n+\t  if (TYPE_PRECISION (typ1) == BITS_PER_UNIT)\n \t    {\n-\t      error (\"char-array initialized from wide string\");\n-\t      return error_mark_node;\n+\t      if (char_type != char_type_node)\n+\t\t{\n+\t\t  error (\"char-array initialized from wide string\");\n+\t\t  return error_mark_node;\n+\t\t}\n \t    }\n-\t  if (char_type == char_type_node\n-\t      && TYPE_PRECISION (typ1) != BITS_PER_UNIT)\n+\t  else\n \t    {\n-\t      error (\"int-array initialized from non-wide string\");\n-\t      return error_mark_node;\n+\t      if (char_type == char_type_node)\n+\t\t{\n+\t\t  error (\"int-array initialized from non-wide string\");\n+\t\t  return error_mark_node;\n+\t\t}\n+\t      else if (char_type != typ1)\n+\t\t{\n+\t\t  error (\"int-array initialized from incompatible wide string\");\n+\t\t  return error_mark_node;\n+\t\t}\n \t    }\n \n \t  TREE_TYPE (init) = type;"}, {"sha": "79793fd3999a2ad832a480a218f41afb8a70bcfa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c466b2cd136139e0e9fef6019fa6f136e23c7a4c", "patch": "@@ -1,3 +1,15 @@\n+2008-07-18  Kris Van Hees  <kris.van.hees@oracle.com>\n+\n+\tTests for char16_t and char32_t support.\n+\t* g++.dg/ext/utf-array.C: New\n+\t* g++.dg/ext/utf-array-short-wchar.C: New\n+\t* g++.dg/ext/utf-rtti.C: New\n+\t* g++.dg/ext/utf-type.c: New\n+\t* gcc.dg/utf-array.c: New\n+\t* gcc.dg/utf-array-short-wchar.c: New\n+\t* gcc.dg/utf-inc-init.c: New\n+\t* gcc.dg/utf-type.c: New\n+\n 2008-07-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR middle-end/36859"}, {"sha": "7d768d307a6991d7dfea62982d43bfb09ff7119b", "filename": "gcc/testsuite/g++.dg/ext/utf-array-short-wchar.C", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-array-short-wchar.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-array-short-wchar.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-array-short-wchar.C?ref=c466b2cd136139e0e9fef6019fa6f136e23c7a4c", "patch": "@@ -0,0 +1,72 @@\n+/* Contributed by Kris Van Hees <kris.van.hees@oracle.com> */\n+/* Expected errors for char16_t/char32_t string literals. */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c++0x -fshort-wchar\" } */\n+\n+const char\ts_0[]\t= \"ab\";\n+const char\ts_1[]\t= u\"ab\";\t/* { dg-error \"from wide string\" } */\n+const char\ts_2[]\t= U\"ab\";\t/* { dg-error \"from wide string\" } */\n+const char\ts_3[]\t= L\"ab\";\t/* { dg-error \"from wide string\" } */\n+\n+const char16_t\ts16_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const char16_t\ts16_1[]\t= u\"ab\";\n+const char16_t\ts16_2[]\t= U\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const char16_t\ts16_3[]\t= L\"ab\";\t/* { dg-error \"from incompatible\" } */\n+\n+const char16_t\ts16_4[0] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_5[1] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_6[2] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_7[3] = u\"ab\";\n+const char16_t\ts16_8[4] = u\"ab\";\n+\n+const char32_t\ts32_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const char32_t\ts32_1[]\t= u\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const char32_t\ts32_2[]\t= U\"ab\";\n+const char32_t\ts32_3[]\t= L\"ab\";\t/* { dg-error \"from incompatible\" } */\n+\n+const char32_t\ts32_4[0] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char32_t\ts32_5[1] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char32_t\ts32_6[2] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char32_t\ts32_7[3] = U\"ab\";\n+const char32_t\ts32_8[4] = U\"ab\";\n+\n+const wchar_t\tsw_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const wchar_t\tsw_1[]\t= u\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const wchar_t\tsw_2[]\t= U\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const wchar_t\tsw_3[]\t= L\"ab\";\n+/* Contributed by Kris Van Hees <kris.van.hees@oracle.com> */\n+/* Expected errors for char16_t/char32_t string literals. */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c++0x -fshort-wchar\" } */\n+\n+const char\ts_0[]\t= \"ab\";\n+const char\ts_1[]\t= u\"ab\";\t/* { dg-error \"from wide string\" } */\n+const char\ts_2[]\t= U\"ab\";\t/* { dg-error \"from wide string\" } */\n+const char\ts_3[]\t= L\"ab\";\t/* { dg-error \"from wide string\" } */\n+\n+const char16_t\ts16_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const char16_t\ts16_1[]\t= u\"ab\";\n+const char16_t\ts16_2[]\t= U\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const char16_t\ts16_3[]\t= L\"ab\";\t/* { dg-error \"from incompatible\" } */\n+\n+const char16_t\ts16_4[0] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_5[1] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_6[2] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_7[3] = u\"ab\";\n+const char16_t\ts16_8[4] = u\"ab\";\n+\n+const char32_t\ts32_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const char32_t\ts32_1[]\t= u\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const char32_t\ts32_2[]\t= U\"ab\";\n+const char32_t\ts32_3[]\t= L\"ab\";\t/* { dg-error \"from incompatible\" } */\n+\n+const char16_t\ts32_4[0] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts32_5[1] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts32_6[2] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts32_7[3] = u\"ab\";\n+const char16_t\ts32_8[4] = u\"ab\";\n+\n+const wchar_t\tsw_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const wchar_t\tsw_1[]\t= u\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const wchar_t\tsw_2[]\t= U\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const wchar_t\tsw_3[]\t= L\"ab\";"}, {"sha": "ff6e12df46dc15cc90cc0123686146fd78316eda", "filename": "gcc/testsuite/g++.dg/ext/utf-array.C", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-array.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-array.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-array.C?ref=c466b2cd136139e0e9fef6019fa6f136e23c7a4c", "patch": "@@ -0,0 +1,72 @@\n+/* Contributed by Kris Van Hees <kris.van.hees@oracle.com> */\n+/* Expected errors for char16_t/char32_t string literals. */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c++0x\" } */\n+\n+const char\ts_0[]\t= \"ab\";\n+const char\ts_1[]\t= u\"ab\";\t/* { dg-error \"from wide string\" } */\n+const char\ts_2[]\t= U\"ab\";\t/* { dg-error \"from wide string\" } */\n+const char\ts_3[]\t= L\"ab\";\t/* { dg-error \"from wide string\" } */\n+\n+const char16_t\ts16_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const char16_t\ts16_1[]\t= u\"ab\";\n+const char16_t\ts16_2[]\t= U\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const char16_t\ts16_3[]\t= L\"ab\";\t/* { dg-error \"from incompatible\" } */\n+\n+const char16_t\ts16_4[0] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_5[1] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_6[2] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_7[3] = u\"ab\";\n+const char16_t\ts16_8[4] = u\"ab\";\n+\n+const char32_t\ts32_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const char32_t\ts32_1[]\t= u\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const char32_t\ts32_2[]\t= U\"ab\";\n+const char32_t\ts32_3[]\t= L\"ab\";\t/* { dg-error \"from incompatible\" } */\n+\n+const char32_t\ts32_4[0] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char32_t\ts32_5[1] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char32_t\ts32_6[2] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char32_t\ts32_7[3] = U\"ab\";\n+const char32_t\ts32_8[4] = U\"ab\";\n+\n+const wchar_t\tsw_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const wchar_t\tsw_1[]\t= u\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const wchar_t\tsw_2[]\t= U\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const wchar_t\tsw_3[]\t= L\"ab\";\n+/* Contributed by Kris Van Hees <kris.van.hees@oracle.com> */\n+/* Expected errors for char16_t/char32_t string literals. */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c++0x\" } */\n+\n+const char\ts_0[]\t= \"ab\";\n+const char\ts_1[]\t= u\"ab\";\t/* { dg-error \"from wide string\" } */\n+const char\ts_2[]\t= U\"ab\";\t/* { dg-error \"from wide string\" } */\n+const char\ts_3[]\t= L\"ab\";\t/* { dg-error \"from wide string\" } */\n+\n+const char16_t\ts16_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const char16_t\ts16_1[]\t= u\"ab\";\n+const char16_t\ts16_2[]\t= U\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const char16_t\ts16_3[]\t= L\"ab\";\t/* { dg-error \"from incompatible\" } */\n+\n+const char16_t\ts16_4[0] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_5[1] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_6[2] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_7[3] = u\"ab\";\n+const char16_t\ts16_8[4] = u\"ab\";\n+\n+const char32_t\ts32_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const char32_t\ts32_1[]\t= u\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const char32_t\ts32_2[]\t= U\"ab\";\n+const char32_t\ts32_3[]\t= L\"ab\";\t/* { dg-error \"from incompatible\" } */\n+\n+const char16_t\ts32_4[0] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts32_5[1] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts32_6[2] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts32_7[3] = u\"ab\";\n+const char16_t\ts32_8[4] = u\"ab\";\n+\n+const wchar_t\tsw_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const wchar_t\tsw_1[]\t= u\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const wchar_t\tsw_2[]\t= U\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const wchar_t\tsw_3[]\t= L\"ab\";"}, {"sha": "b5d201b4d7aa63a91d3def06e2b4cb115f3bc8a2", "filename": "gcc/testsuite/g++.dg/ext/utf-rtti.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-rtti.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-rtti.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-rtti.C?ref=c466b2cd136139e0e9fef6019fa6f136e23c7a4c", "patch": "@@ -0,0 +1,12 @@\n+/* Contributed by Kris Van Hees <kris.van.hees@oracle.com> */\n+/* Ensure that typeinfo data is generated for char16_t/char32_t. */\n+/* { dg-do link } */\n+/* { dg-options \"-std=c++0x\" } */\n+\n+#include <typeinfo>\n+\n+int main(void)\n+{\n+    typeid(char16_t).name();\n+    typeid(char32_t).name();\n+}"}, {"sha": "41a83ff2ef0ddc29517b880419ece19934eefe6b", "filename": "gcc/testsuite/g++.dg/ext/utf-type.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-type.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-type.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-type.C?ref=c466b2cd136139e0e9fef6019fa6f136e23c7a4c", "patch": "@@ -0,0 +1,15 @@\n+/* Contributed by Kris Van Hees <kris.van.hees@oracle.com> */\n+/* Ensure that __CHAR16_TYPE__ and __CHAR32_TYPE__ exist, match the types they\n+   are the underlying data type for. */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c++0x -Wall -Werror\" } */\n+\n+extern \"C\" void abort (void);\n+\n+int main ()\n+{\n+    if (sizeof (__CHAR16_TYPE__) != sizeof (char16_t))\n+\tabort();\n+    if (sizeof (__CHAR32_TYPE__) != sizeof (char32_t))\n+\tabort();\n+}"}, {"sha": "3f34caa19e6c7b415a8979f2c9a1b3952d0ef4b6", "filename": "gcc/testsuite/gcc.dg/utf-array-short-wchar.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Ftestsuite%2Fgcc.dg%2Futf-array-short-wchar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Ftestsuite%2Fgcc.dg%2Futf-array-short-wchar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Futf-array-short-wchar.c?ref=c466b2cd136139e0e9fef6019fa6f136e23c7a4c", "patch": "@@ -0,0 +1,82 @@\n+/* Contributed by Kris Van Hees <kris.van.hees@oracle.com> */\n+/* Expected errors for char16_t/char32_t string literals. */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -fshort-wchar\" } */\n+\n+#include <wchar.h>\n+\n+typedef short unsigned int\tchar16_t;\n+typedef unsigned int\t\tchar32_t;\n+\n+const char\ts_0[]\t= \"ab\";\n+const char\ts_1[]\t= u\"ab\";\t/* { dg-error \"from wide string\" } */\n+const char\ts_2[]\t= U\"ab\";\t/* { dg-error \"from wide string\" } */\n+const char\ts_3[]\t= L\"ab\";\t/* { dg-error \"from wide string\" } */\n+\n+const char16_t\ts16_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const char16_t\ts16_1[]\t= u\"ab\";\n+const char16_t\ts16_2[]\t= U\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const char16_t\ts16_3[]\t= L\"ab\";\n+\n+const char16_t\ts16_4[0] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_5[1] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_6[2] = u\"ab\";\n+const char16_t\ts16_7[3] = u\"ab\";\n+const char16_t\ts16_8[4] = u\"ab\";\n+\n+const char32_t\ts32_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const char32_t\ts32_1[]\t= u\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const char32_t\ts32_2[]\t= U\"ab\";\n+const char32_t\ts32_3[]\t= L\"ab\";\t/* { dg-error \"from incompatible\" } */\n+\n+const char32_t\ts32_4[0] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char32_t\ts32_5[1] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char32_t\ts32_6[2] = U\"ab\";\n+const char32_t\ts32_7[3] = U\"ab\";\n+const char32_t\ts32_8[4] = U\"ab\";\n+\n+const wchar_t\tsw_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const wchar_t\tsw_1[]\t= u\"ab\";\n+const wchar_t\tsw_2[]\t= U\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const wchar_t\tsw_3[]\t= L\"ab\";\n+/* Contributed by Kris Van Hees <kris.van.hees@oracle.com> */\n+/* Expected errors for char16_t/char32_t string literals. */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -fshort-wchar\" } */\n+\n+#include <wchar.h>\n+\n+typedef short unsigned int\tchar16_t;\n+typedef unsigned int\t\tchar32_t;\n+\n+const char\ts_0[]\t= \"ab\";\n+const char\ts_1[]\t= u\"ab\";\t/* { dg-error \"from wide string\" } */\n+const char\ts_2[]\t= U\"ab\";\t/* { dg-error \"from wide string\" } */\n+const char\ts_3[]\t= L\"ab\";\t/* { dg-error \"from wide string\" } */\n+\n+const char16_t\ts16_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const char16_t\ts16_1[]\t= u\"ab\";\n+const char16_t\ts16_2[]\t= U\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const char16_t\ts16_3[]\t= L\"ab\";\n+\n+const char16_t\ts16_4[0] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_5[1] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_6[2] = u\"ab\";\n+const char16_t\ts16_7[3] = u\"ab\";\n+const char16_t\ts16_8[4] = u\"ab\";\n+\n+const char32_t\ts32_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const char32_t\ts32_1[]\t= u\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const char32_t\ts32_2[]\t= U\"ab\";\n+const char32_t\ts32_3[]\t= L\"ab\";\t/* { dg-error \"from incompatible\" } */\n+\n+const char16_t\ts32_4[0] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts32_5[1] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts32_6[2] = u\"ab\";\n+const char16_t\ts32_7[3] = u\"ab\";\n+const char16_t\ts32_8[4] = u\"ab\";\n+\n+const wchar_t\tsw_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const wchar_t\tsw_1[]\t= u\"ab\";\n+const wchar_t\tsw_2[]\t= U\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const wchar_t\tsw_3[]\t= L\"ab\";"}, {"sha": "0e36e0db6079ecfc9d5570376b4208be892bd1f6", "filename": "gcc/testsuite/gcc.dg/utf-array.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Ftestsuite%2Fgcc.dg%2Futf-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Ftestsuite%2Fgcc.dg%2Futf-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Futf-array.c?ref=c466b2cd136139e0e9fef6019fa6f136e23c7a4c", "patch": "@@ -0,0 +1,82 @@\n+/* Contributed by Kris Van Hees <kris.van.hees@oracle.com> */\n+/* Expected errors for char16_t/char32_t string literals. */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+#include <wchar.h>\n+\n+typedef short unsigned int\tchar16_t;\n+typedef unsigned int\t\tchar32_t;\n+\n+const char\ts_0[]\t= \"ab\";\n+const char\ts_1[]\t= u\"ab\";\t/* { dg-error \"from wide string\" } */\n+const char\ts_2[]\t= U\"ab\";\t/* { dg-error \"from wide string\" } */\n+const char\ts_3[]\t= L\"ab\";\t/* { dg-error \"from wide string\" } */\n+\n+const char16_t\ts16_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const char16_t\ts16_1[]\t= u\"ab\";\n+const char16_t\ts16_2[]\t= U\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const char16_t\ts16_3[]\t= L\"ab\";\t/* { dg-error \"from incompatible\" } */\n+\n+const char16_t\ts16_4[0] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_5[1] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_6[2] = u\"ab\";\n+const char16_t\ts16_7[3] = u\"ab\";\n+const char16_t\ts16_8[4] = u\"ab\";\n+\n+const char32_t\ts32_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const char32_t\ts32_1[]\t= u\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const char32_t\ts32_2[]\t= U\"ab\";\n+const char32_t\ts32_3[]\t= L\"ab\";\t/* { dg-error \"from incompatible\" } */\n+\n+const char32_t\ts32_4[0] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char32_t\ts32_5[1] = U\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char32_t\ts32_6[2] = U\"ab\";\n+const char32_t\ts32_7[3] = U\"ab\";\n+const char32_t\ts32_8[4] = U\"ab\";\n+\n+const wchar_t\tsw_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const wchar_t\tsw_1[]\t= u\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const wchar_t\tsw_2[]\t= U\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const wchar_t\tsw_3[]\t= L\"ab\";\n+/* Contributed by Kris Van Hees <kris.van.hees@oracle.com> */\n+/* Expected errors for char16_t/char32_t string literals. */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+#include <wchar.h>\n+\n+typedef short unsigned int\tchar16_t;\n+typedef unsigned int\t\tchar32_t;\n+\n+const char\ts_0[]\t= \"ab\";\n+const char\ts_1[]\t= u\"ab\";\t/* { dg-error \"from wide string\" } */\n+const char\ts_2[]\t= U\"ab\";\t/* { dg-error \"from wide string\" } */\n+const char\ts_3[]\t= L\"ab\";\t/* { dg-error \"from wide string\" } */\n+\n+const char16_t\ts16_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const char16_t\ts16_1[]\t= u\"ab\";\n+const char16_t\ts16_2[]\t= U\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const char16_t\ts16_3[]\t= L\"ab\";\t/* { dg-error \"from incompatible\" } */\n+\n+const char16_t\ts16_4[0] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_5[1] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts16_6[2] = u\"ab\";\n+const char16_t\ts16_7[3] = u\"ab\";\n+const char16_t\ts16_8[4] = u\"ab\";\n+\n+const char32_t\ts32_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const char32_t\ts32_1[]\t= u\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const char32_t\ts32_2[]\t= U\"ab\";\n+const char32_t\ts32_3[]\t= L\"ab\";\t/* { dg-error \"from incompatible\" } */\n+\n+const char16_t\ts32_4[0] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts32_5[1] = u\"ab\";\t/* { dg-warning \"chars is too long\" } */\n+const char16_t\ts32_6[2] = u\"ab\";\n+const char16_t\ts32_7[3] = u\"ab\";\n+const char16_t\ts32_8[4] = u\"ab\";\n+\n+const wchar_t\tsw_0[]\t= \"ab\";\t\t/* { dg-error \"from non-wide\" } */\n+const wchar_t\tsw_1[]\t= u\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const wchar_t\tsw_2[]\t= U\"ab\";\t/* { dg-error \"from incompatible\" } */\n+const wchar_t\tsw_3[]\t= L\"ab\";"}, {"sha": "17d59f3782fde433d0ce71e239236488cb09890a", "filename": "gcc/testsuite/gcc.dg/utf-inc-init.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Ftestsuite%2Fgcc.dg%2Futf-inc-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Ftestsuite%2Fgcc.dg%2Futf-inc-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Futf-inc-init.c?ref=c466b2cd136139e0e9fef6019fa6f136e23c7a4c", "patch": "@@ -0,0 +1,45 @@\n+/* Contributed by Kris Van Hees <kris.van.hees@oracle.com> */\n+/* Test incremental initializers for char16_t/char32_t arrays. */\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+typedef short unsigned int char16_t;\n+typedef unsigned int char32_t;\n+\n+extern int memcmp (const void *, const void *, size_t);\n+extern void abort (void);\n+extern void exit (int);\n+\n+struct A {\n+  char16_t S[6];\n+  int M;\n+} a[] = { { { u\"foo\" }, 1 }, [0].S[2] = u'x', [0].S[4] = u'y' };\n+struct A b[] = { { { u\"foo\" }, 1 }, [0] = { .S[0] = u'b' } };\n+struct A c[] = { { { u\"foo\" }, 1 }, [0].S = { u\"a\" }, [0].M = 2 };\n+\n+struct B {\n+  char32_t S[6];\n+  int M;\n+} d[] = { { { U\"foo\" }, 1 }, [0].S[2] = U'x', [0].S[4] = U'y' };\n+struct B e[] = { { { U\"foo\" }, 1 }, [0] = { .S[0] = U'b' } };\n+struct B f[] = { { { U\"foo\" }, 1 }, [0].S = { U\"a\" }, [0].M = 2 };\n+\n+int main (void)\n+{\n+  if (memcmp (a[0].S, u\"fox\\0y\", 6 * sizeof(char16_t)) || a[0].M != 1)\n+    abort ();\n+  if (memcmp (b[0].S, u\"b\\0\\0\\0\\0\", 6) || b[0].M)\n+    abort ();\n+  if (memcmp (c[0].S, u\"a\\0\\0\\0\\0\", 6) || c[0].M != 2)\n+    abort ();\n+\n+  if (memcmp (d[0].S, U\"fox\\0y\", 6 * sizeof(char32_t)) || d[0].M != 1)\n+    abort ();\n+  if (memcmp (e[0].S, U\"b\\0\\0\\0\\0\", 6) || e[0].M)\n+    abort ();\n+  if (memcmp (f[0].S, U\"a\\0\\0\\0\\0\", 6) || f[0].M != 2)\n+    abort ();\n+\n+  exit(0);\n+}"}, {"sha": "1aa6020cbef254e4225f2ee797c81bc90dc4a695", "filename": "gcc/testsuite/gcc.dg/utf-type.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Ftestsuite%2Fgcc.dg%2Futf-type.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/gcc%2Ftestsuite%2Fgcc.dg%2Futf-type.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Futf-type.c?ref=c466b2cd136139e0e9fef6019fa6f136e23c7a4c", "patch": "@@ -0,0 +1,18 @@\n+/* Contributed by Kris Van Hees <kris.van.hees@oracle.com> */\n+/* Ensure that __CHAR16_TYPE__ and __CHAR32_TYPE__ exist, and are of the\n+   correct width. */\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -Wall -Werror\" } */\n+\n+typedef __CHAR16_TYPE__ char16_t;\n+typedef __CHAR32_TYPE__ char32_t;\n+\n+extern void abort (void);\n+\n+int main ()\n+{\n+    if (sizeof (char16_t) != sizeof (u'a'))\n+\tabort();\n+    if (sizeof (char32_t) != sizeof (U'a'))\n+\tabort();\n+}"}, {"sha": "4389f606c5c0133d52f3a2d7b3d7b3b60ae7ff5d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c466b2cd136139e0e9fef6019fa6f136e23c7a4c", "patch": "@@ -1,3 +1,11 @@\n+2008-07-18  Kris Van Hees  <kris.van.hees@oracle.com>\n+\t    Holger Hopp  <holger.hopp@sap.com>\n+\n+\t* config/abi/pre/gnu.ver: Support char16_t and char32_t.\n+\t* testsuite/util/testsuite_abi.cc (check_version): Add\n+\tCXXABI_1.3.3 to known_versions.\n+\n+\n 2008-07-16  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/debug/vector (insert(iterator, _Tp&&), push_back(_Tp&&)):"}, {"sha": "ced293a0dd1322f0557f4dc1128a419c4d315f26", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=c466b2cd136139e0e9fef6019fa6f136e23c7a4c", "patch": "@@ -1012,3 +1012,15 @@ CXXABI_1.3.2 {\n     _ZTIN10__cxxabiv119__foreign_exceptionE;\n \n } CXXABI_1.3.1;\n+\n+CXXABI_1.3.3 {\n+\n+    # typeinfo for char16_t and char32_t\n+    _ZTIu8char16_t;\n+    _ZTIPu8char16_t;\n+    _ZTIPKu8char16_t;\n+    _ZTIu8char32_t;\n+    _ZTIPu8char32_t;\n+    _ZTIPKu8char32_t;\n+\n+} CXXABI_1.3.2;"}, {"sha": "c15b8b24447932970743a24edca9176b303e382f", "filename": "libstdc++-v3/testsuite/util/testsuite_abi.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c466b2cd136139e0e9fef6019fa6f136e23c7a4c/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc?ref=c466b2cd136139e0e9fef6019fa6f136e23c7a4c", "patch": "@@ -199,6 +199,7 @@ check_version(symbol& test, bool added)\n       known_versions.push_back(\"CXXABI_1.3\");\n       known_versions.push_back(\"CXXABI_1.3.1\");\n       known_versions.push_back(\"CXXABI_1.3.2\");\n+      known_versions.push_back(\"CXXABI_1.3.3\");\n       known_versions.push_back(\"CXXABI_LDBL_1.3\");\n     }\n   compat_list::iterator begin = known_versions.begin();"}]}