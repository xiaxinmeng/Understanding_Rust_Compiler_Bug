{"sha": "9d70359897cb23eb4acfbb370635406e27450bad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ3MDM1OTg5N2NiMjNlYjRhY2ZiYjM3MDYzNTQwNmUyNzQ1MGJhZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-03-19T21:59:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-03-19T21:59:35Z"}, "message": "* decl.c (make_implicit_typename): Lose useless code.\n\nFrom-SVN: r18719", "tree": {"sha": "166b4f7aea03e2652cd59ebfdf59d12e86854bcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/166b4f7aea03e2652cd59ebfdf59d12e86854bcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d70359897cb23eb4acfbb370635406e27450bad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d70359897cb23eb4acfbb370635406e27450bad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d70359897cb23eb4acfbb370635406e27450bad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d70359897cb23eb4acfbb370635406e27450bad/comments", "author": null, "committer": null, "parents": [{"sha": "4d50dd69019ac346d21a4f4b4fd512df47651267", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d50dd69019ac346d21a4f4b4fd512df47651267", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d50dd69019ac346d21a4f4b4fd512df47651267"}], "stats": {"total": 29, "additions": 4, "deletions": 25}, "files": [{"sha": "2169907c98898110cb6db41e4d9747bba5e6ed59", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d70359897cb23eb4acfbb370635406e27450bad/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d70359897cb23eb4acfbb370635406e27450bad/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9d70359897cb23eb4acfbb370635406e27450bad", "patch": "@@ -1,5 +1,7 @@\n Thu Mar 19 11:51:58 1998  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* decl.c (make_implicit_typename): Lose useless code.\n+\n \t* call.c (standard_conversion): Handle A* -> const A* properly.\n \n \t* pt.c (get_bindings_real): Rename from get_bindings.  Add "}, {"sha": "98ffff9d70f7b491a1613a4a526e8ee2b4c1d351", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d70359897cb23eb4acfbb370635406e27450bad/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d70359897cb23eb4acfbb370635406e27450bad/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9d70359897cb23eb4acfbb370635406e27450bad", "patch": "@@ -4575,8 +4575,7 @@ make_typename_type (context, name)\n }\n \n /* Given a TYPE_DECL T looked up in CONTEXT, return a TYPENAME_TYPE\n-   where the scope is either CONTEXT or the first base of CONTEXT along the\n-   inheritance chain to T that depends on template parameters.\n+   where the scope is CONTEXT.  Also remember what type T refers to.\n \n    Called from lookup_name_real to implement the implicit typename\n    extension.  */\n@@ -4585,29 +4584,7 @@ static tree\n make_implicit_typename (context, t)\n      tree context, t;\n {\n-  tree retval;\n-\n-  if (TREE_CODE (context) != TYPENAME_TYPE \n-      && uses_template_parms (DECL_CONTEXT (t))\n-      && DECL_CONTEXT (t) != context)\n-    {\n-      tree binfo = get_binfo (DECL_CONTEXT (t), context, 0);\n-      while (binfo)\n-\t{\n-\t  tree next = BINFO_INHERITANCE_CHAIN (binfo);\n-\t  if (! uses_template_parms (BINFO_TYPE (next))\n-\t      || BINFO_TYPE (next) == context)\n-\t    break;\n-\t  binfo = next;\n-\t}\n-      if (binfo)\n-\tretval = make_typename_type (BINFO_TYPE (binfo), DECL_NAME (t));\n-      else\n-\t/* FIXME: find the enclosing class whose base t comes from.  */\n-\tretval = make_typename_type (DECL_CONTEXT (t), DECL_NAME (t));\n-    }\n-  else\n-    retval = make_typename_type (context, DECL_NAME (t));\n+  tree retval = make_typename_type (context, DECL_NAME (t));\n \n   if (TREE_CODE (retval) == TYPENAME_TYPE)\n     TREE_TYPE (retval) = TREE_TYPE (t);"}]}