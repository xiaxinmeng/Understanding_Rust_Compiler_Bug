{"sha": "461beb1055c836767e7ec420aba89eae7b363290", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYxYmViMTA1NWM4MzY3NjdlN2VjNDIwYWJhODllYWU3YjM2MzI5MA==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1993-03-18T20:27:21Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1993-03-18T20:27:21Z"}, "message": "* (assign_parms): Minor cleanup.\n\nFrom-SVN: r3776", "tree": {"sha": "6b81a6cf8dc95adfbd6c24f20c6067a9887e2c44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b81a6cf8dc95adfbd6c24f20c6067a9887e2c44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/461beb1055c836767e7ec420aba89eae7b363290", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/461beb1055c836767e7ec420aba89eae7b363290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/461beb1055c836767e7ec420aba89eae7b363290", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/461beb1055c836767e7ec420aba89eae7b363290/comments", "author": null, "committer": null, "parents": [{"sha": "fd328506ccd29e50144cda018c1cc96cbde22fc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd328506ccd29e50144cda018c1cc96cbde22fc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd328506ccd29e50144cda018c1cc96cbde22fc5"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "473fcf301713f71c53147b85b3c821502d8976c0", "filename": "gcc/function.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/461beb1055c836767e7ec420aba89eae7b363290/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/461beb1055c836767e7ec420aba89eae7b363290/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=461beb1055c836767e7ec420aba89eae7b363290", "patch": "@@ -2919,6 +2919,7 @@ assign_parms (fndecl, second_time)\n       if (MUST_PASS_IN_STACK (passed_mode, passed_type))\n \tentry_parm = 0;\n \n+#ifdef FUNCTION_ARG_PARTIAL_NREGS\n       /* If this parm was passed part in regs and part in memory,\n \t pretend it arrived entirely in memory\n \t by pushing the register-part onto the stack.\n@@ -2929,11 +2930,8 @@ assign_parms (fndecl, second_time)\n \n       if (entry_parm)\n \t{\n-\t  int nregs = 0;\n-#ifdef FUNCTION_ARG_PARTIAL_NREGS\n-\t  nregs = FUNCTION_ARG_PARTIAL_NREGS (args_so_far, passed_mode,\n-\t\t\t\t\t      passed_type, ! last_named);\n-#endif\n+\t  int nregs = FUNCTION_ARG_PARTIAL_NREGS (args_so_far, passed_mode,\n+\t\t\t\t\t\t  passed_type, ! last_named);\n \n \t  if (nregs > 0)\n \t    {\n@@ -2948,6 +2946,7 @@ assign_parms (fndecl, second_time)\n \t      entry_parm = stack_parm;\n \t    }\n \t}\n+#endif\n \n       /* If we didn't decide this parm came in a register,\n \t by default it came on the stack.  */"}]}