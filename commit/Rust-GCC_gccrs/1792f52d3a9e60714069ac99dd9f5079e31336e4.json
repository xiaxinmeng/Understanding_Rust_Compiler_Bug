{"sha": "1792f52d3a9e60714069ac99dd9f5079e31336e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc5MmY1MmQzYTllNjA3MTQwNjlhYzk5ZGQ5ZjUwNzllMzEzMzZlNA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-07-17T14:04:45Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-07-17T14:04:45Z"}, "message": "String.java: Fixed javadocs all over.\n\n2004-07-17  Michael Koch  <konqueror@gmx.de>\n\n\t* java/lang/String.java: Fixed javadocs all over.\n\nFrom-SVN: r84870", "tree": {"sha": "c3df76c09d4e9d69e062a7943dc43697019142d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3df76c09d4e9d69e062a7943dc43697019142d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1792f52d3a9e60714069ac99dd9f5079e31336e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1792f52d3a9e60714069ac99dd9f5079e31336e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1792f52d3a9e60714069ac99dd9f5079e31336e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1792f52d3a9e60714069ac99dd9f5079e31336e4/comments", "author": null, "committer": null, "parents": [{"sha": "5ad82972264c882a86969316817fe390ac45d376", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ad82972264c882a86969316817fe390ac45d376", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ad82972264c882a86969316817fe390ac45d376"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "b79e7dedf6cb5d0b5bf6a28287c4394d0f1f9917", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1792f52d3a9e60714069ac99dd9f5079e31336e4/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1792f52d3a9e60714069ac99dd9f5079e31336e4/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=1792f52d3a9e60714069ac99dd9f5079e31336e4", "patch": "@@ -1,3 +1,7 @@\n+2004-07-17  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/lang/String.java: Fixed javadocs all over.\n+\n 2004-07-17  Mark Wielaard  <mark@klomp.org>\n \n \t* gnu/java/nio/channels/FileChannelImpl.java (truncate): Only truncate"}, {"sha": "6c5f9490f7740a7a4317a547859cb572d3bdcc56", "filename": "libjava/java/lang/String.java", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1792f52d3a9e60714069ac99dd9f5079e31336e4/libjava%2Fjava%2Flang%2FString.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1792f52d3a9e60714069ac99dd9f5079e31336e4/libjava%2Fjava%2Flang%2FString.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FString.java?ref=1792f52d3a9e60714069ac99dd9f5079e31336e4", "patch": "@@ -39,8 +39,8 @@\n \n package java.lang;\n \n-import java.io.UnsupportedEncodingException;\n import java.io.Serializable;\n+import java.io.UnsupportedEncodingException;\n import java.lang.Comparable;\n import java.util.Comparator;\n import java.util.Locale;\n@@ -68,8 +68,8 @@\n  * literal in the object stream.\n  *\n  * @author Paul N. Fisher\n- * @author Eric Blake <ebb9@email.byu.edu>\n- * @author Per Bothner <bothner@cygnus.com>\n+ * @author Eric Blake (ebb9@email.byu.edu)\n+ * @author Per Bothner (bothner@cygnus.com)\n  * @since 1.0\n  * @status updated to 1.4\n  */\n@@ -207,7 +207,7 @@ public String(char[] data)\n    * @param count the number of characters from data to copy\n    * @throws NullPointerException if data is null\n    * @throws IndexOutOfBoundsException if (offset &lt; 0 || count &lt; 0\n-   *         || offset + count > data.length)\n+   *         || offset + count &gt; data.length)\n    *         (while unspecified, this is a StringIndexOutOfBoundsException)\n    */\n   public String(char[] data, int offset, int count)\n@@ -221,7 +221,7 @@ public String(char[] data, int offset, int count)\n    * corresponding byte b, is created in the new String as if by performing:\n    *\n    * <pre>\n-   * c = (char) (((hibyte & 0xff) << 8) | (b & 0xff))\n+   * c = (char) (((hibyte &amp; 0xff) &lt;&lt; 8) | (b &amp; 0xff))\n    * </pre>\n    *\n    * @param ascii array of integer values\n@@ -230,7 +230,7 @@ public String(char[] data, int offset, int count)\n    * @param count the number of characters from ascii to copy\n    * @throws NullPointerException if ascii is null\n    * @throws IndexOutOfBoundsException if (offset &lt; 0 || count &lt; 0\n-   *         || offset + count > ascii.length)\n+   *         || offset + count &gt; ascii.length)\n    *         (while unspecified, this is a StringIndexOutOfBoundsException)\n    * @see #String(byte[])\n    * @see #String(byte[], String)\n@@ -250,7 +250,7 @@ public String(byte[] ascii, int hibyte, int offset, int count)\n    * as if by performing:\n    *\n    * <pre>\n-   * c = (char) (((hibyte & 0xff) << 8) | (b & 0xff))\n+   * c = (char) (((hibyte &amp; 0xff) &lt;&lt; 8) | (b &amp; 0xff))\n    * </pre>\n    *\n    * @param ascii array of integer values\n@@ -613,7 +613,7 @@ public int compareTo(Object o)\n    * character of the string. This is unsatisfactory for locale-based\n    * comparison, in which case you should use {@link java.text.Collator}.\n    *\n-   * @param s the string to compare against\n+   * @param str the string to compare against\n    * @return the comparison\n    * @see Collator#compare(String, String)\n    * @since 1.2\n@@ -632,7 +632,7 @@ public int compareToIgnoreCase(String str)\n    *\n    * @param toffset index to start comparison at for this String\n    * @param other String to compare region to this String\n-   * @param oofset index to start comparison at for other\n+   * @param ooffset index to start comparison at for other\n    * @param len number of characters to compare\n    * @return true if regions match (case sensitive)\n    * @throws NullPointerException if other is null\n@@ -678,7 +678,7 @@ public native boolean regionMatches(boolean ignoreCase, int toffset,\n    * Predicate which determines if this String starts with a given prefix.\n    * If the prefix is an empty String, true is returned.\n    *\n-   * @param prefex String to compare\n+   * @param prefix String to compare\n    * @return true if this String starts with the prefix\n    * @throws NullPointerException if prefix is null\n    * @see #startsWith(String, int)\n@@ -840,26 +840,26 @@ public String substring(int begin)\n    * @param end index to end at (exclusive)\n    * @return new String which is a substring of this String\n    * @throws IndexOutOfBoundsException if begin &lt; 0 || end &gt; length()\n-   *         || begin > end (while unspecified, this is a\n+   *         || begin &gt; end (while unspecified, this is a\n    *         StringIndexOutOfBoundsException)\n    */\n-  public native String substring(int beginIndex, int endIndex);\n+  public native String substring(int begin, int end);\n \n   /**\n    * Creates a substring of this String, starting at a specified index\n    * and ending at one character before a specified index. This behaves like\n-   * <code>substring(beginIndex, endIndex)</code>.\n+   * <code>substring(begin, end)</code>.\n    *\n-   * @param beginIndex index to start substring (inclusive, base 0)\n-   * @param endIndex index to end at (exclusive)\n+   * @param begin index to start substring (inclusive, base 0)\n+   * @param end index to end at (exclusive)\n    * @return new String which is a substring of this String\n    * @throws IndexOutOfBoundsException if begin &lt; 0 || end &gt; length()\n-   *         || begin > end\n+   *         || begin &gt; end\n    * @since 1.4\n    */\n-  public CharSequence subSequence(int beginIndex, int endIndex)\n+  public CharSequence subSequence(int begin, int end)\n   {\n-    return substring(beginIndex, endIndex);\n+    return substring(begin, end);\n   }\n \n   /**\n@@ -1129,7 +1129,7 @@ public static String valueOf(char[] data)\n    * @return String containing the chars from data[offset..offset+count]\n    * @throws NullPointerException if data is null\n    * @throws IndexOutOfBoundsException if (offset &lt; 0 || count &lt; 0\n-   *         || offset + count > data.length)\n+   *         || offset + count &gt; data.length)\n    *         (while unspecified, this is a StringIndexOutOfBoundsException)\n    * @see #String(char[], int, int)\n    */\n@@ -1146,7 +1146,7 @@ public static String valueOf(char[] data)\n    * @return String containing the chars from data[offset..offset+count]\n    * @throws NullPointerException if data is null\n    * @throws IndexOutOfBoundsException if (offset &lt; 0 || count &lt; 0\n-   *         || offset + count > data.length)\n+   *         || offset + count &gt; data.length)\n    *         (while unspecified, this is a StringIndexOutOfBoundsException)\n    * @see #String(char[], int, int)\n    */"}]}