{"sha": "4b3aa535793363636b0d2819908710fae5025723", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGIzYWE1MzU3OTMzNjM2MzZiMGQyODE5OTA4NzEwZmFlNTAyNTcyMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-06-22T09:36:38Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-06-22T09:36:38Z"}, "message": "decl.c (grokdeclarator): Use id_loc...\n\n/cp\n2019-06-22  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (grokdeclarator): Use id_loc, typespec_loc, and\n\tlocations[ds_storage_class] in a few additional places.\n\n/testsuite\n2019-06-22  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/diagnostic/auto-storage-1.C: New.\n\t* g++.dg/diagnostic/no-type-1.C: Likewise.\n\t* g++.dg/diagnostic/no-type-2.C: Likewise.\n\t* g++.dg/diagnostic/top-level-auto-1.C: Likewise.\n\t* g++.dg/cpp0x/auto9.C: Test some locations too.\n\t* g++.dg/cpp1z/register1.C: Likewise.\n\t* g++.dg/cpp1z/register2.C: Likewise.\n\t* g++.dg/cpp1z/register3.C: Likewise.\n\t* g++.dg/other/error34.C: Likewise.\n\nFrom-SVN: r272584", "tree": {"sha": "fccf8d6326da30727cc7fd1d9292814bfe8eb635", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fccf8d6326da30727cc7fd1d9292814bfe8eb635"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b3aa535793363636b0d2819908710fae5025723", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b3aa535793363636b0d2819908710fae5025723", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b3aa535793363636b0d2819908710fae5025723", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b3aa535793363636b0d2819908710fae5025723/comments", "author": null, "committer": null, "parents": [{"sha": "bd5cb8ed428124c44de57dff674f6988dd8c3610", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd5cb8ed428124c44de57dff674f6988dd8c3610", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd5cb8ed428124c44de57dff674f6988dd8c3610"}], "stats": {"total": 72, "additions": 54, "deletions": 18}, "files": [{"sha": "93b4875de7a4dc397ad352773a86e195704c3b26", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3aa535793363636b0d2819908710fae5025723/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3aa535793363636b0d2819908710fae5025723/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4b3aa535793363636b0d2819908710fae5025723", "patch": "@@ -1,3 +1,8 @@\n+2019-06-22  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (grokdeclarator): Use id_loc, typespec_loc, and\n+\tlocations[ds_storage_class] in a few additional places.\n+\n 2019-06-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/90909"}, {"sha": "bcebdc9c0f525ffddfaa6f9655e13c8cca11f6d7", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3aa535793363636b0d2819908710fae5025723/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3aa535793363636b0d2819908710fae5025723/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4b3aa535793363636b0d2819908710fae5025723", "patch": "@@ -10816,13 +10816,14 @@ grokdeclarator (const cp_declarator *declarator,\n       else if (in_system_header_at (input_location) || flag_ms_extensions)\n \t/* Allow it, sigh.  */;\n       else if (! is_main)\n-\tpermerror (input_location, \"ISO C++ forbids declaration of %qs with no type\", name);\n+\tpermerror (id_loc, \"ISO C++ forbids declaration of %qs with no type\",\n+\t\t   name);\n       else if (pedantic)\n-\tpedwarn (input_location, OPT_Wpedantic,\n+\tpedwarn (id_loc, OPT_Wpedantic,\n \t\t \"ISO C++ forbids declaration of %qs with no type\", name);\n       else\n-\twarning (OPT_Wreturn_type,\n-\t\t \"ISO C++ forbids declaration of %qs with no type\", name);\n+\twarning_at (id_loc, OPT_Wreturn_type,\n+\t\t    \"ISO C++ forbids declaration of %qs with no type\", name);\n \n       if (type_was_error_mark_node && template_parm_flag)\n \t/* FIXME we should be able to propagate the error_mark_node as is\n@@ -11251,7 +11252,8 @@ grokdeclarator (const cp_declarator *declarator,\n   else if (toplevel_bindings_p ())\n     {\n       if (storage_class == sc_auto)\n-\terror (\"top-level declaration of %qs specifies %<auto%>\", name);\n+\terror_at (declspecs->locations[ds_storage_class],\n+\t\t  \"top-level declaration of %qs specifies %<auto%>\", name);\n     }\n   else if (thread_p\n \t   && storage_class != sc_extern\n@@ -12358,9 +12360,10 @@ grokdeclarator (const cp_declarator *declarator,\n \t  && !(cxx_dialect >= cxx17 && template_parm_flag))\n \t{\n \t  if (cxx_dialect >= cxx14)\n-\t    error (\"%<auto%> parameter not permitted in this context\");\n+\t    error_at (typespec_loc,\n+\t\t      \"%<auto%> parameter not permitted in this context\");\n \t  else\n-\t    error (\"parameter declared %<auto%>\");\n+\t    error_at (typespec_loc, \"parameter declared %<auto%>\");\n \t  type = error_mark_node;\n \t}\n \n@@ -12781,9 +12784,12 @@ grokdeclarator (const cp_declarator *declarator,\n \t// FIXME:gcc_assert (original_name == dname);\n \n \tif (storage_class == sc_auto)\n-\t  error (\"storage class %<auto%> invalid for function %qs\", name);\n+\t  error_at (declspecs->locations[ds_storage_class],\n+\t\t    \"storage class %<auto%> invalid for function %qs\", name);\n \telse if (storage_class == sc_register)\n-\t  error (\"storage class %<register%> invalid for function %qs\", name);\n+\t  error_at (declspecs->locations[ds_storage_class],\n+\t\t    \"storage class %<register%> invalid for function %qs\",\n+\t\t    name);\n \telse if (thread_p)\n \t  {\n \t    if (declspecs->gnu_thread_keyword_p)"}, {"sha": "80ea5916fcc77b754179731f6257cf5158ac7fc3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3aa535793363636b0d2819908710fae5025723/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3aa535793363636b0d2819908710fae5025723/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4b3aa535793363636b0d2819908710fae5025723", "patch": "@@ -1,3 +1,15 @@\n+2019-06-22  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/diagnostic/auto-storage-1.C: New.\n+\t* g++.dg/diagnostic/no-type-1.C: Likewise.\n+\t* g++.dg/diagnostic/no-type-2.C: Likewise.\n+\t* g++.dg/diagnostic/top-level-auto-1.C: Likewise.\n+\t* g++.dg/cpp0x/auto9.C: Test some locations too.\n+\t* g++.dg/cpp1z/register1.C: Likewise.\n+\t* g++.dg/cpp1z/register2.C: Likewise.\n+\t* g++.dg/cpp1z/register3.C: Likewise.\n+\t* g++.dg/other/error34.C: Likewise.\n+\n 2019-06-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/90909"}, {"sha": "8d77b0b36673a052afaaccb87d5a1093ca092161", "filename": "gcc/testsuite/g++.dg/cpp0x/auto9.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3aa535793363636b0d2819908710fae5025723/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3aa535793363636b0d2819908710fae5025723/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto9.C?ref=4b3aa535793363636b0d2819908710fae5025723", "patch": "@@ -78,10 +78,10 @@ enum struct D : auto * { FF = 0 };\t\t// { dg-error \"must be an integral type|decl\n void\n bar ()\n {\n-  try { } catch (auto i) { }\t\t\t// { dg-error \"parameter\" }\n-  try { } catch (auto) { }\t\t\t// { dg-error \"parameter\" }\n-  try { } catch (auto *i) { }\t\t\t// { dg-error \"parameter\" }\n-  try { } catch (auto *) { }\t\t\t// { dg-error \"parameter\" }\n+  try { } catch (auto i) { }\t\t\t// { dg-error \"18:parameter\" }\n+  try { } catch (auto) { }\t\t\t// { dg-error \"18:parameter\" }\n+  try { } catch (auto *i) { }\t\t\t// { dg-error \"18:parameter\" }\n+  try { } catch (auto *) { }\t\t\t// { dg-error \"18:parameter\" }\n }\n \n void\n@@ -111,7 +111,7 @@ badthrow2 () throw (auto &)\t\t\t// { dg-error \"invalid use of|expected\" }\n {\t\t\t\t\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++17 } .-1 }\n }\t\t\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++17 } } .-2 }\n \n-template <auto V = 4> struct G {};\t\t// { dg-error \"auto\" \"\" { target { ! c++17 } } }\n+template <auto V = 4> struct G {};\t\t// { dg-error \"11:parameter\" \"\" { target { ! c++17 } } }\n \n template <typename T> struct H { H (); ~H (); };\n H<auto> h;\t\t\t\t\t// { dg-error \"invalid|initializer\" }"}, {"sha": "fac3498bdf21dd48ca1ed39f01ac25c0f2e568b4", "filename": "gcc/testsuite/g++.dg/cpp1z/register1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3aa535793363636b0d2819908710fae5025723/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fregister1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3aa535793363636b0d2819908710fae5025723/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fregister1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fregister1.C?ref=4b3aa535793363636b0d2819908710fae5025723", "patch": "@@ -10,7 +10,7 @@\n register int a __asm (REG1);\t// { dg-bogus \"ISO C\\\\+\\\\+17 does not allow 'register' storage class specifier\" \"\" { target c++17 } }\n #endif\n register int b;\t\t\t// { dg-error \"ISO C\\\\+\\\\+17 does not allow 'register' storage class specifier\" \"\" { target c++17 } }\n-register int c ();\t\t// { dg-error \"storage class 'register' invalid for function\" }\n+register int c ();\t\t// { dg-error \"1:storage class 'register' invalid for function\" }\n int foo (register int d)\t// { dg-error \"ISO C\\\\+\\\\+17 does not allow 'register' storage class specifier\" \"\" { target c++17 } }\n {\n   return d;"}, {"sha": "3688f73f112e6be1d7085b7cb75156b7c16db31e", "filename": "gcc/testsuite/g++.dg/cpp1z/register2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3aa535793363636b0d2819908710fae5025723/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fregister2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3aa535793363636b0d2819908710fae5025723/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fregister2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fregister2.C?ref=4b3aa535793363636b0d2819908710fae5025723", "patch": "@@ -11,7 +11,7 @@\n register int a __asm (REG1);\t// { dg-bogus \"ISO C\\\\+\\\\+17 does not allow 'register' storage class specifier\" \"\" { target c++17 } }\n #endif\n register int b;\t\t\t// { dg-bogus \"ISO C\\\\+\\\\+17 does not allow 'register' storage class specifier\" \"\" { target c++17 } }\n-register int c ();\t\t// { dg-error \"storage class 'register' invalid for function\" }\n+register int c ();\t\t// { dg-error \"1:storage class 'register' invalid for function\" }\n int foo (register int d)\t// { dg-bogus \"ISO C\\\\+\\\\+17 does not allow 'register' storage class specifier\" \"\" { target c++17 } }\n {\n   return d;"}, {"sha": "2b321166dc79d4986ef2515ed1c20bbffba4168a", "filename": "gcc/testsuite/g++.dg/cpp1z/register3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3aa535793363636b0d2819908710fae5025723/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fregister3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3aa535793363636b0d2819908710fae5025723/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fregister3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fregister3.C?ref=4b3aa535793363636b0d2819908710fae5025723", "patch": "@@ -11,7 +11,7 @@\n register int a __asm (REG1);\t// { dg-bogus \"'register' storage class specifier used\" }\n #endif\n register int b;\t\t\t// { dg-warning \"'register' storage class specifier used\" }\n-register int c ();\t\t// { dg-error \"storage class 'register' invalid for function\" }\n+register int c ();\t\t// { dg-error \"1:storage class 'register' invalid for function\" }\n int foo (register int d)\t// { dg-warning \"'register' storage class specifier used\" }\n {\n   return d;"}, {"sha": "61378256bdcfaeedd4f3b0db721f68cdadd3a3b3", "filename": "gcc/testsuite/g++.dg/diagnostic/auto-storage-1.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3aa535793363636b0d2819908710fae5025723/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fauto-storage-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3aa535793363636b0d2819908710fae5025723/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fauto-storage-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fauto-storage-1.C?ref=4b3aa535793363636b0d2819908710fae5025723", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile { target c++98_only } }\n+\n+void foo()\n+{\n+  auto void bar();  // { dg-error \"3:storage class .auto. invalid for function\" }\n+}"}, {"sha": "8c892e5e350ac3a776d841f1bdb52c4c93c4ddc3", "filename": "gcc/testsuite/g++.dg/diagnostic/no-type-1.C", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3aa535793363636b0d2819908710fae5025723/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fno-type-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3aa535793363636b0d2819908710fae5025723/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fno-type-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fno-type-1.C?ref=4b3aa535793363636b0d2819908710fae5025723", "patch": "@@ -0,0 +1 @@\n+main() {}  // { dg-error \"1:ISO C\\\\+\\\\+ forbids declaration\" }"}, {"sha": "8a7c62793c24226edc817afcc23b60b4cefdfc0e", "filename": "gcc/testsuite/g++.dg/diagnostic/no-type-2.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3aa535793363636b0d2819908710fae5025723/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fno-type-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3aa535793363636b0d2819908710fae5025723/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fno-type-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fno-type-2.C?ref=4b3aa535793363636b0d2819908710fae5025723", "patch": "@@ -0,0 +1,3 @@\n+// { dg-options \"-w\" }\n+\n+foo() {}  // { dg-error \"1:ISO C\\\\+\\\\+ forbids declaration\" }"}, {"sha": "b9f74f7627863521cf68ce89979c0d6f0118699e", "filename": "gcc/testsuite/g++.dg/diagnostic/top-level-auto-1.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3aa535793363636b0d2819908710fae5025723/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Ftop-level-auto-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3aa535793363636b0d2819908710fae5025723/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Ftop-level-auto-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Ftop-level-auto-1.C?ref=4b3aa535793363636b0d2819908710fae5025723", "patch": "@@ -0,0 +1,3 @@\n+// { dg-do compile { target c++98_only } }\n+\n+auto int i;  // { dg-error \"1:top-level declaration of .i. specifies .auto.\" }"}, {"sha": "7bcea434322470ab79d465ca692fdb54b703d5b9", "filename": "gcc/testsuite/g++.dg/other/error34.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b3aa535793363636b0d2819908710fae5025723/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b3aa535793363636b0d2819908710fae5025723/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror34.C?ref=4b3aa535793363636b0d2819908710fae5025723", "patch": "@@ -2,5 +2,5 @@\n // { dg-do compile }\n // { dg-options \"\" }\n \n-S () : str(__PRETTY_FUNCTION__) { return S(); }\t// { dg-error \"forbids declaration\" \"decl\" }\n+S () : str(__PRETTY_FUNCTION__) { return S(); }\t// { dg-error \"1:ISO C\\\\+\\\\+ forbids declaration\" \"decl\" }\n // { dg-error \"only constructors\" \"constructor\" { target *-*-* } .-1 }"}]}