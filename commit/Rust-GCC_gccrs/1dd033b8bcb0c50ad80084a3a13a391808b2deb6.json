{"sha": "1dd033b8bcb0c50ad80084a3a13a391808b2deb6", "node_id": "C_kwDOANBUbNoAKDFkZDAzM2I4YmNiMGM1MGFkODAwODRhM2ExM2EzOTE4MDhiMmRlYjY", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-02-21T12:02:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-02-21T13:02:58Z"}, "message": "tree-optimization/108691 - remove trigger-happy assert\n\nThe following gets rid of the idea that we should prevent setjmp\nlike calls from popping up in uncontrolled way in the IL for now.\nThe solution is probably to handle it similar as noreturn has\nthe ctrl-altering flag on stmts, but use another flag, for example\nctrl-receiving which would also make sure the stmt is first.\n\n\tPR tree-optimization/108691\n\t* tree-ssa-dce.cc (eliminate_unnecessary_stmts): Remove\n\tassert about calls_setjmp not becoming true when it was false.\n\n\t* gcc.dg/pr108691.c: New testcase.", "tree": {"sha": "a7b090e8ed05b281bef3b5fb00ec434f2c689daa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7b090e8ed05b281bef3b5fb00ec434f2c689daa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dd033b8bcb0c50ad80084a3a13a391808b2deb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dd033b8bcb0c50ad80084a3a13a391808b2deb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dd033b8bcb0c50ad80084a3a13a391808b2deb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dd033b8bcb0c50ad80084a3a13a391808b2deb6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7e706df2280de4a42f68b6c44401e4348d3593c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7e706df2280de4a42f68b6c44401e4348d3593c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7e706df2280de4a42f68b6c44401e4348d3593c"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "e412df10f22c2c196aa65ed6d8ec199a18a9d645", "filename": "gcc/testsuite/gcc.dg/pr108691.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dd033b8bcb0c50ad80084a3a13a391808b2deb6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108691.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dd033b8bcb0c50ad80084a3a13a391808b2deb6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108691.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108691.c?ref=1dd033b8bcb0c50ad80084a3a13a391808b2deb6", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+extern int __attribute__((returns_twice)) setjmp(void*);\n+\n+void bbb(void) {\n+  int (*fnptr)(void*) = setjmp;\n+  fnptr(0);\n+}"}, {"sha": "0ae998f86f9839ba5a95c5fc1a22cd2f12b5cdad", "filename": "gcc/tree-ssa-dce.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dd033b8bcb0c50ad80084a3a13a391808b2deb6/gcc%2Ftree-ssa-dce.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dd033b8bcb0c50ad80084a3a13a391808b2deb6/gcc%2Ftree-ssa-dce.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.cc?ref=1dd033b8bcb0c50ad80084a3a13a391808b2deb6", "patch": "@@ -1512,10 +1512,12 @@ eliminate_unnecessary_stmts (bool aggressive)\n \tremove_edge (to_remove_edges[i]);\n       cfg_altered = true;\n     }\n-  /* When we cleared calls_setjmp we can purge all abnormal edges.  Do so.  */\n-  if (cfun->calls_setjmp != had_setjmp)\n+  /* When we cleared calls_setjmp we can purge all abnormal edges.  Do so.\n+     ???  We'd like to assert that setjmp calls do not pop out of nothing\n+     but we currently lack a per-stmt way of noting whether a call was\n+     recognized as returns-twice (or rather receives-control).  */\n+  if (!cfun->calls_setjmp && had_setjmp)\n     {\n-      gcc_assert (!cfun->calls_setjmp);\n       /* Make sure we only remove the edges, not dominated blocks.  Using\n \t gimple_purge_dead_abnormal_call_edges would do that and we\n \t cannot free dominators yet.  */"}]}