{"sha": "53fcdc7677776c3ccbe098ee4f8fe082cae5f28e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNmY2RjNzY3Nzc3NmMzY2NiZTA5OGVlNGY4ZmUwODJjYWU1ZjI4ZQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2001-10-30T12:14:28Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-10-30T12:14:28Z"}, "message": "Localization fixes.\n\n2001-10-30  Paolo Bonzini  <bonzini@gnu.org>\n\n\tLocalization fixes.\n\t* c-decl.c (parmlist_tags_warning, start_struct,\n\tcheck_for_loop_decls): Separate messages for struct, union and\n\tenum cases to allow for languages in which they have different\n\tgenders.\n\t* c-format.c (scanf_flag_specs): Separate short and long name of\n\tthe assignment suppression feature.\n\t(check_format_types): Localize \"pointer\" and \"different types\"\n\tstrings.\n\t* c-lex.c (lex_number): Localize \"an unsigned long int\" and\n\trelated strings.\n\t(lex_string) [MULTIBYTE_CHARS]: Use initial lowercase letter on\n\twarning message.\n\t* c-typeck.c (build_unary_up): Separate messages for increment and\n\tdecrement cases to allow for languages in which they use different\n\tarticles.  Localize the strings \"increment\" and \"decrement\" in one\n\tcase.\n\nFrom-SVN: r46635", "tree": {"sha": "2b186d54ffc78842ba447fb2fb99339ac3c52af3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b186d54ffc78842ba447fb2fb99339ac3c52af3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53fcdc7677776c3ccbe098ee4f8fe082cae5f28e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53fcdc7677776c3ccbe098ee4f8fe082cae5f28e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53fcdc7677776c3ccbe098ee4f8fe082cae5f28e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53fcdc7677776c3ccbe098ee4f8fe082cae5f28e/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73991d6ae74ffcb1fbd0dc4435c5aa7dc50947d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73991d6ae74ffcb1fbd0dc4435c5aa7dc50947d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73991d6ae74ffcb1fbd0dc4435c5aa7dc50947d7"}], "stats": {"total": 119, "additions": 84, "deletions": 35}, "files": [{"sha": "dabf4f7ecc48075c71acb9b97f4ae3ebbc5e8d7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53fcdc7677776c3ccbe098ee4f8fe082cae5f28e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53fcdc7677776c3ccbe098ee4f8fe082cae5f28e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53fcdc7677776c3ccbe098ee4f8fe082cae5f28e", "patch": "@@ -1,3 +1,23 @@\n+2001-10-30  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tLocalization fixes.\n+\t* c-decl.c (parmlist_tags_warning, start_struct,\n+\tcheck_for_loop_decls): Separate messages for struct, union and\n+\tenum cases to allow for languages in which they have different\n+\tgenders.\n+\t* c-format.c (scanf_flag_specs): Separate short and long name of\n+\tthe assignment suppression feature.\n+\t(check_format_types): Localize \"pointer\" and \"different types\"\n+\tstrings.\n+\t* c-lex.c (lex_number): Localize \"an unsigned long int\" and\n+\trelated strings.\n+\t(lex_string) [MULTIBYTE_CHARS]: Use initial lowercase letter on\n+\twarning message.\n+\t* c-typeck.c (build_unary_up): Separate messages for increment and\n+\tdecrement cases to allow for languages in which they use different\n+\tarticles.  Localize the strings \"increment\" and \"decrement\" in one\n+\tcase.\n+\n Tue Oct 30 11:08:11 CET 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* lcm.c (optimize_mode_switching):  Do not rebuild liveness information"}, {"sha": "c840057f346dc6ba3974f180b1d020d47685a452", "filename": "gcc/c-decl.c", "status": "modified", "additions": 33, "deletions": 13, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53fcdc7677776c3ccbe098ee4f8fe082cae5f28e/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53fcdc7677776c3ccbe098ee4f8fe082cae5f28e/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=53fcdc7677776c3ccbe098ee4f8fe082cae5f28e", "patch": "@@ -5317,11 +5317,17 @@ parmlist_tags_warning ()\n       if (code == UNION_TYPE && TREE_PURPOSE (elt) == 0 && !pedantic)\n \tcontinue;\n       if (TREE_PURPOSE (elt) != 0)\n-\twarning (\"`%s %s' declared inside parameter list\",\n-\t\t (code == RECORD_TYPE ? \"struct\"\n-\t\t  : code == UNION_TYPE ? \"union\"\n-\t\t  : \"enum\"),\n-\t\t IDENTIFIER_POINTER (TREE_PURPOSE (elt)));\n+        {\n+          if (code == RECORD_TYPE)\n+            warning (\"`struct %s' declared inside parameter list\",\n+                     IDENTIFIER_POINTER (TREE_PURPOSE (elt)));\n+          else if (code == UNION_TYPE)\n+            warning (\"`union %s' declared inside parameter list\",\n+                     IDENTIFIER_POINTER (TREE_PURPOSE (elt)));\n+          else\n+            warning (\"`enum %s' declared inside parameter list\",\n+                     IDENTIFIER_POINTER (TREE_PURPOSE (elt)));\n+        }\n       else\n \t{\n \t  /* For translation these need to be separate warnings */\n@@ -5411,9 +5417,14 @@ start_struct (code, name)\n       C_TYPE_BEING_DEFINED (ref) = 1;\n       TYPE_PACKED (ref) = flag_pack_struct;\n       if (TYPE_FIELDS (ref))\n-\terror (\"redefinition of `%s %s'\",\n-\t       code == UNION_TYPE ? \"union\" : \"struct\",\n-\t       IDENTIFIER_POINTER (name));\n+        {\n+\t  if (code == UNION_TYPE)\n+\t    error (\"redefinition of `union %s'\",\n+\t\t   IDENTIFIER_POINTER (name));\n+          else\n+\t    error (\"redefinition of `struct %s'\",\n+\t\t   IDENTIFIER_POINTER (name));\n+\t}  \n \n       return ref;\n     }\n@@ -6995,12 +7006,21 @@ check_for_loop_decls ()\n   for (t = gettags (); t; t = TREE_CHAIN (t))\n     {\n       if (TREE_PURPOSE (t) != 0)\n-\terror (\"`%s %s' declared in `for' loop initial declaration\",\n-\t       (TREE_CODE (TREE_VALUE (t)) == RECORD_TYPE ? \"struct\"\n-\t\t: TREE_CODE (TREE_VALUE (t)) == UNION_TYPE ? \"union\"\n-\t\t: \"enum\"),\n-\t       IDENTIFIER_POINTER (TREE_PURPOSE (t)));\n+        {\n+          enum tree_code code = TREE_CODE (TREE_VALUE (t));\n+\t  \n+          if (code == RECORD_TYPE)\n+            error (\"`struct %s' declared in `for' loop initial declaration\",\n+                   IDENTIFIER_POINTER (TREE_PURPOSE (t)));\n+          else if (code == UNION_TYPE)\n+            error (\"`union %s' declared in `for' loop initial declaration\",\n+                   IDENTIFIER_POINTER (TREE_PURPOSE (t)));\n+          else\n+            error (\"`enum %s' declared in `for' loop initial declaration\",\n+                   IDENTIFIER_POINTER (TREE_PURPOSE (t)));\n+        }\n     }\n+\n   for (t = getdecls (); t; t = TREE_CHAIN (t))\n     {\n       if (TREE_CODE (t) != VAR_DECL && DECL_NAME (t))"}, {"sha": "b224a8909bd24f566496dd2909550f8268f98285", "filename": "gcc/c-format.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53fcdc7677776c3ccbe098ee4f8fe082cae5f28e/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53fcdc7677776c3ccbe098ee4f8fe082cae5f28e/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=53fcdc7677776c3ccbe098ee4f8fe082cae5f28e", "patch": "@@ -639,12 +639,12 @@ static const format_flag_pair printf_flag_pairs[] =\n \n static const format_flag_spec scanf_flag_specs[] =\n {\n-  { '*',  0, 0, N_(\"assignment suppression\"), N_(\"assignment suppression\"),          STD_C89 },\n-  { 'a',  0, 0, N_(\"`a' flag\"),               N_(\"the `a' scanf flag\"),              STD_EXT },\n-  { 'w',  0, 0, N_(\"field width\"),            N_(\"field width in scanf format\"),     STD_C89 },\n-  { 'L',  0, 0, N_(\"length modifier\"),        N_(\"length modifier in scanf format\"), STD_C89 },\n-  { '\\'', 0, 0, N_(\"`'' flag\"),               N_(\"the `'' scanf flag\"),              STD_EXT },\n-  { 'I',  0, 0, N_(\"`I' flag\"),               N_(\"the `I' scanf flag\"),              STD_EXT },\n+  { '*',  0, 0, N_(\"assignment suppression\"), N_(\"the assignment suppression scanf feature\"), STD_C89 },\n+  { 'a',  0, 0, N_(\"`a' flag\"),               N_(\"the `a' scanf flag\"),                       STD_EXT },\n+  { 'w',  0, 0, N_(\"field width\"),            N_(\"field width in scanf format\"),              STD_C89 },\n+  { 'L',  0, 0, N_(\"length modifier\"),        N_(\"length modifier in scanf format\"),          STD_C89 },\n+  { '\\'', 0, 0, N_(\"`'' flag\"),               N_(\"the `'' scanf flag\"),                       STD_EXT },\n+  { 'I',  0, 0, N_(\"`I' flag\"),               N_(\"the `I' scanf flag\"),                       STD_EXT },\n   { 0, 0, 0, NULL, NULL, 0 }\n };\n \n@@ -2385,9 +2385,9 @@ check_format_types (status, types)\n \tif (that == 0)\n \t  {\n \t    if (TREE_CODE (orig_cur_type) == POINTER_TYPE)\n-\t      that = \"pointer\";\n+\t      that = _(\"pointer\");\n \t    else\n-\t      that = \"different type\";\n+\t      that = _(\"different type\");\n \t  }\n \n \t/* Make the warning better in case of mismatch of int vs long.  */"}, {"sha": "ca59266c2c86301ea8a192b14d912d2cc166deea", "filename": "gcc/c-lex.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53fcdc7677776c3ccbe098ee4f8fe082cae5f28e/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53fcdc7677776c3ccbe098ee4f8fe082cae5f28e/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=53fcdc7677776c3ccbe098ee4f8fe082cae5f28e", "patch": "@@ -1258,9 +1258,9 @@ lex_number (str, len)\n \t  pedwarn (\"integer constant larger than the maximum value of %s\",\n \t\t   (flag_isoc99\n \t\t    ? (TREE_UNSIGNED (type)\n-\t\t       ? \"an unsigned long long int\"\n-\t\t       : \"a long long int\")\n-\t\t    : \"an unsigned long int\"));\n+\t\t       ? _(\"an unsigned long long int\")\n+\t\t       : _(\"a long long int\"))\n+\t\t    : _(\"an unsigned long int\")));\n \t}\n \n       if (base == 10 && ! spec_unsigned && TREE_UNSIGNED (type))\n@@ -1333,7 +1333,7 @@ lex_string (str, len, wide)\n       char_len = local_mbtowc (&wc, p, limit - p);\n       if (char_len == -1)\n \t{\n-\t  warning (\"Ignoring invalid multibyte character\");\n+\t  warning (\"ignoring invalid multibyte character\");\n \t  char_len = 1;\n \t  c = *p++;\n \t}"}, {"sha": "48fd3b7b2098759a554d5771485a4751f48adf5c", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53fcdc7677776c3ccbe098ee4f8fe082cae5f28e/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53fcdc7677776c3ccbe098ee4f8fe082cae5f28e/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=53fcdc7677776c3ccbe098ee4f8fe082cae5f28e", "patch": "@@ -2925,9 +2925,11 @@ build_unary_op (code, xarg, noconvert)\n       if (typecode != POINTER_TYPE\n \t  && typecode != INTEGER_TYPE && typecode != REAL_TYPE)\n \t{\n-\t  error (\"wrong type argument to %s\",\n-\t\t code == PREINCREMENT_EXPR || code == POSTINCREMENT_EXPR\n-\t\t ? \"increment\" : \"decrement\");\n+\t  if (code == PREINCREMENT_EXPR || code == POSTINCREMENT_EXPR)\n+            error (\"wrong type argument to increment\");\n+          else\n+            error (\"wrong type argument to decrement\");\n+\n \t  return error_mark_node;\n \t}\n \n@@ -2945,15 +2947,22 @@ build_unary_op (code, xarg, noconvert)\n \t    /* If pointer target is an undefined struct,\n \t       we just cannot know how to do the arithmetic.  */\n \t    if (!COMPLETE_OR_VOID_TYPE_P (TREE_TYPE (result_type)))\n-\t      error (\"%s of pointer to unknown structure\",\n-\t\t     code == PREINCREMENT_EXPR || code == POSTINCREMENT_EXPR\n-\t\t     ? \"increment\" : \"decrement\");\n+\t      {\n+\t\tif (code == PREINCREMENT_EXPR || code == POSTINCREMENT_EXPR)\n+\t\t  error (\"increment of pointer to unknown structure\");\n+\t\telse\n+\t\t  error (\"decrement of pointer to unknown structure\");\n+\t      }\n \t    else if ((pedantic || warn_pointer_arith)\n \t\t     && (TREE_CODE (TREE_TYPE (result_type)) == FUNCTION_TYPE\n \t\t\t || TREE_CODE (TREE_TYPE (result_type)) == VOID_TYPE))\n-\t      pedwarn (\"wrong type argument to %s\",\n-\t\t       code == PREINCREMENT_EXPR || code == POSTINCREMENT_EXPR\n-\t\t       ? \"increment\" : \"decrement\");\n+              {\n+\t\tif (code == PREINCREMENT_EXPR || code == POSTINCREMENT_EXPR)\n+\t\t  pedwarn (\"wrong type argument to increment\");\n+\t\telse\n+\t\t  pedwarn (\"wrong type argument to decrement\");\n+\t      }\n+\n \t    inc = c_size_in_bytes (TREE_TYPE (result_type));\n \t  }\n \telse\n@@ -3024,7 +3033,7 @@ build_unary_op (code, xarg, noconvert)\n \t  readonly_warning (arg, \n \t\t\t    ((code == PREINCREMENT_EXPR\n \t\t\t      || code == POSTINCREMENT_EXPR)\n-\t\t\t     ? \"increment\" : \"decrement\"));\n+\t\t\t     ? _(\"increment\") : _(\"decrement\")));\n \n \tif (TREE_CODE (TREE_TYPE (arg)) == BOOLEAN_TYPE)\n \t  val = boolean_increment (code, arg);"}]}