{"sha": "8848828bec1487a10d8153a586e7ca3df1aac7ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg0ODgyOGJlYzE0ODdhMTBkODE1M2E1ODZlN2NhM2RmMWFhYzdhZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-04-29T08:25:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-04-29T08:25:11Z"}, "message": "c-common.h (omp_clause_mask): Unconditionally define as a class.\n\n\t* c-common.h (omp_clause_mask): Unconditionally define as a class.\n\tUse uint64_t instead of unsigned HOST_WIDE_INT and 64 instead of\n\tHOST_BITS_PER_WIDE_INT.\n\nFrom-SVN: r222561", "tree": {"sha": "c8db741d997dc16869f35159c87069cc85f932b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8db741d997dc16869f35159c87069cc85f932b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8848828bec1487a10d8153a586e7ca3df1aac7ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8848828bec1487a10d8153a586e7ca3df1aac7ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8848828bec1487a10d8153a586e7ca3df1aac7ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8848828bec1487a10d8153a586e7ca3df1aac7ad/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c80476994516f9df0063bd787a5cfc8aed686c3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c80476994516f9df0063bd787a5cfc8aed686c3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c80476994516f9df0063bd787a5cfc8aed686c3c"}], "stats": {"total": 39, "additions": 18, "deletions": 21}, "files": [{"sha": "8d10487d96c1ff5a3ce5dafb29762b7b3ee14d85", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8848828bec1487a10d8153a586e7ca3df1aac7ad/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8848828bec1487a10d8153a586e7ca3df1aac7ad/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8848828bec1487a10d8153a586e7ca3df1aac7ad", "patch": "@@ -1,3 +1,9 @@\n+2015-04-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-common.h (omp_clause_mask): Unconditionally define as a class.\n+\tUse uint64_t instead of unsigned HOST_WIDE_INT and 64 instead of\n+\tHOST_BITS_PER_WIDE_INT.\n+\n 2015-04-28  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/65887"}, {"sha": "603d3f0d0b6ca73e51ccc1b615fdbacaeefd04f5", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8848828bec1487a10d8153a586e7ca3df1aac7ad/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8848828bec1487a10d8153a586e7ca3df1aac7ad/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=8848828bec1487a10d8153a586e7ca3df1aac7ad", "patch": "@@ -1096,16 +1096,11 @@ extern void pp_dir_change (cpp_reader *, const char *);\n extern bool check_missing_format_attribute (tree, tree);\n \n /* In c-omp.c  */\n-#if HOST_BITS_PER_WIDE_INT >= 64\n-typedef unsigned HOST_WIDE_INT omp_clause_mask;\n-# define OMP_CLAUSE_MASK_1 ((omp_clause_mask) 1)\n-#else\n struct omp_clause_mask\n {\n   inline omp_clause_mask ();\n-  inline omp_clause_mask (unsigned HOST_WIDE_INT l);\n-  inline omp_clause_mask (unsigned HOST_WIDE_INT l,\n-\t\t\t  unsigned HOST_WIDE_INT h);\n+  inline omp_clause_mask (uint64_t l);\n+  inline omp_clause_mask (uint64_t l, uint64_t h);\n   inline omp_clause_mask &operator &= (omp_clause_mask);\n   inline omp_clause_mask &operator |= (omp_clause_mask);\n   inline omp_clause_mask operator ~ () const;\n@@ -1115,7 +1110,7 @@ struct omp_clause_mask\n   inline omp_clause_mask operator << (int);\n   inline bool operator == (omp_clause_mask) const;\n   inline bool operator != (omp_clause_mask) const;\n-  unsigned HOST_WIDE_INT low, high;\n+  uint64_t low, high;\n };\n \n inline\n@@ -1124,14 +1119,13 @@ omp_clause_mask::omp_clause_mask ()\n }\n \n inline\n-omp_clause_mask::omp_clause_mask (unsigned HOST_WIDE_INT l)\n+omp_clause_mask::omp_clause_mask (uint64_t l)\n : low (l), high (0)\n {\n }\n \n inline\n-omp_clause_mask::omp_clause_mask (unsigned HOST_WIDE_INT l,\n-\t\t\t\t  unsigned HOST_WIDE_INT h)\n+omp_clause_mask::omp_clause_mask (uint64_t l, uint64_t h)\n : low (l), high (h)\n {\n }\n@@ -1177,18 +1171,17 @@ inline omp_clause_mask\n omp_clause_mask::operator << (int amount)\n {\n   omp_clause_mask ret;\n-  if (amount >= HOST_BITS_PER_WIDE_INT)\n+  if (amount >= 64)\n     {\n       ret.low = 0;\n-      ret.high = low << (amount - HOST_BITS_PER_WIDE_INT);\n+      ret.high = low << (amount - 64);\n     }\n   else if (amount == 0)\n     ret = *this;\n   else\n     {\n       ret.low = low << amount;\n-      ret.high = (low >> (HOST_BITS_PER_WIDE_INT - amount))\n-\t\t | (high << amount);\n+      ret.high = (low >> (64 - amount)) | (high << amount);\n     }\n   return ret;\n }\n@@ -1197,17 +1190,16 @@ inline omp_clause_mask\n omp_clause_mask::operator >> (int amount)\n {\n   omp_clause_mask ret;\n-  if (amount >= HOST_BITS_PER_WIDE_INT)\n+  if (amount >= 64)\n     {\n-      ret.low = high >> (amount - HOST_BITS_PER_WIDE_INT);\n+      ret.low = high >> (amount - 64);\n       ret.high = 0;\n     }\n   else if (amount == 0)\n     ret = *this;\n   else\n     {\n-      ret.low = (high << (HOST_BITS_PER_WIDE_INT - amount))\n-\t\t | (low >> amount);\n+      ret.low = (high << (64 - amount)) | (low >> amount);\n       ret.high = high >> amount;\n     }\n   return ret;\n@@ -1225,8 +1217,7 @@ omp_clause_mask::operator != (omp_clause_mask b) const\n   return low != b.low || high != b.high;\n }\n \n-# define OMP_CLAUSE_MASK_1 omp_clause_mask (1)\n-#endif\n+#define OMP_CLAUSE_MASK_1 omp_clause_mask (1)\n \n enum c_omp_clause_split\n {"}]}