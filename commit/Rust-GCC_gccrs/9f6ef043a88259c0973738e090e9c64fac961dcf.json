{"sha": "9f6ef043a88259c0973738e090e9c64fac961dcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY2ZWYwNDNhODgyNTljMDk3MzczOGUwOTBlOWM2NGZhYzk2MWRjZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-09-22T15:12:56Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-09-22T15:12:56Z"}, "message": "h8300.c (h8300_trampoline_init): New.\n\n\t* config/h8300/h8300.c (h8300_trampoline_init): New.\n\t(TARGET_TRAMPOLINE_INIT): New.\n\t* config/h8300/h8300.h (INITIALIZE_TRAMPOLINE): Move code\n\tto h8300_trampoline_init and adjust for hook parameters.\n\nFrom-SVN: r151993", "tree": {"sha": "adc1533d600a58624cdb77c58683e09d4363d1f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adc1533d600a58624cdb77c58683e09d4363d1f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f6ef043a88259c0973738e090e9c64fac961dcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f6ef043a88259c0973738e090e9c64fac961dcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f6ef043a88259c0973738e090e9c64fac961dcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f6ef043a88259c0973738e090e9c64fac961dcf/comments", "author": null, "committer": null, "parents": [{"sha": "e9d5fdb247ff82213dc32745d68c52314881057f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9d5fdb247ff82213dc32745d68c52314881057f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9d5fdb247ff82213dc32745d68c52314881057f"}], "stats": {"total": 107, "additions": 58, "deletions": 49}, "files": [{"sha": "543f881c983643460cfd9e77ea5d31731aaaeb75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6ef043a88259c0973738e090e9c64fac961dcf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6ef043a88259c0973738e090e9c64fac961dcf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f6ef043a88259c0973738e090e9c64fac961dcf", "patch": "@@ -103,6 +103,11 @@\n \t* config/frv/frv.h (INITIALIZE_TRAMPOLINE): Remove.\n \t* config/frv/frv-protos.h (frv_initialize_trampoline): Remove.\n \n+\t* config/h8300/h8300.c (h8300_trampoline_init): New.\n+\t(TARGET_TRAMPOLINE_INIT): New.\n+\t* config/h8300/h8300.h (INITIALIZE_TRAMPOLINE): Move code\n+\tto h8300_trampoline_init and adjust for hook parameters.\n+\n 2009-09-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/rs6000/rs6000.c (bdesc_2arg): Fix CODE_FOR_vector_gt* codes"}, {"sha": "404595405f37889117ceac5cd06ca355e0b67c8b", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6ef043a88259c0973738e090e9c64fac961dcf/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6ef043a88259c0973738e090e9c64fac961dcf/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=9f6ef043a88259c0973738e090e9c64fac961dcf", "patch": "@@ -5773,6 +5773,56 @@ h8300_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n \t  || GET_MODE_SIZE (TYPE_MODE (type)) > (TARGET_H8300 ? 4 : 8));\n }\n \f\n+/* We emit the entire trampoline here.  Depending on the pointer size,\n+   we use a different trampoline.\n+\n+   Pmode == HImode\n+\t      vvvv context\n+   1 0000 7903xxxx\t\tmov.w\t#0x1234,r3\n+   2 0004 5A00xxxx\t\tjmp\t@0x1234\n+\t      ^^^^ function\n+\n+   Pmode == SImode\n+\t      vvvvvvvv context\n+   2 0000 7A03xxxxxxxx\t\tmov.l\t#0x12345678,er3\n+   3 0006 5Axxxxxx\t\tjmp\t@0x123456\n+\t    ^^^^^^ function\n+*/\n+\n+static void\n+h8300_trampoline_init (rtx m_tramp, tree fndecl, rtx cxt)\n+{\n+  rtx fnaddr = XEXP (DECL_RTL (fndecl), 0);\n+  rtx mem;\n+\n+  if (Pmode == HImode)\n+    {\n+      mem = adjust_address (m_tramp, HImode, 0);\n+      emit_move_insn (mem, GEN_INT (0x7903));\n+      mem = adjust_address (m_tramp, Pmode, 2);\n+      emit_move_insn (mem, cxt);\n+      mem = adjust_address (m_tramp, HImode, 4);\n+      emit_move_insn (mem, GEN_INT (0x5a00));\n+      mem = adjust_address (m_tramp, Pmode, 6);\n+      emit_move_insn (mem, fnaddr);\n+    }\n+  else\n+    {\n+      rtx tem;\n+\n+      mem = adjust_address (m_tramp, HImode, 0);\n+      emit_move_insn (mem, GEN_INT (0x7a03));\n+      mem = adjust_address (m_tramp, Pmode, 2);\n+      emit_move_insn (mem, cxt);\n+\n+      tem = copy_to_reg (fnaddr);\n+      emit_insn (gen_andsi3 (tem, tem, GEN_INT (0x00ffffff)));\n+      emit_insn (gen_iorsi3 (tem, tem, GEN_INT (0x5a000000)));\n+      mem = adjust_address (m_tramp, SImode, 6);\n+      emit_move_insn (mem, tem);\n+    }\n+}\n+\f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE h8300_attribute_table\n@@ -5818,4 +5868,7 @@ h8300_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE h8300_can_eliminate\n \n+#undef TARGET_TRAMPOLINE_INIT\n+#define TARGET_TRAMPOLINE_INIT h8300_trampoline_init\n+\n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "e0f0ea62f4e7a921ff7ecd9ce54e98e94bb3cd24", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6ef043a88259c0973738e090e9c64fac961dcf/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6ef043a88259c0973738e090e9c64fac961dcf/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=9f6ef043a88259c0973738e090e9c64fac961dcf", "patch": "@@ -672,58 +672,9 @@ struct cum_arg\n \n #define EXIT_IGNORE_STACK 0\n \n-/* We emit the entire trampoline with INITIALIZE_TRAMPOLINE.\n-   Depending on the pointer size, we use a different trampoline.\n-\n-   Pmode == HImode\n-\t      vvvv context\n-   1 0000 7903xxxx\t\tmov.w\t#0x1234,r3\n-   2 0004 5A00xxxx\t\tjmp\t@0x1234\n-\t      ^^^^ function\n-\n-   Pmode == SImode\n-\t      vvvvvvvv context\n-   2 0000 7A03xxxxxxxx\t\tmov.l\t#0x12345678,er3\n-   3 0006 5Axxxxxx\t\tjmp\t@0x123456\n-\t    ^^^^^^ function\n-*/\n-\n /* Length in units of the trampoline for entering a nested function.  */\n \n #define TRAMPOLINE_SIZE ((Pmode == HImode) ? 8 : 12)\n-\n-/* Emit RTL insns to build a trampoline.\n-   FNADDR is an RTX for the address of the function's pure code.\n-   CXT is an RTX for the static chain value for the function.  */\n-\n-#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t    \\\n-  do\t\t\t\t\t\t\t\t\t    \\\n-    {\t\t\t\t\t\t\t\t\t    \\\n-      if (Pmode == HImode)\t\t\t\t\t\t    \\\n-\t{\t\t\t\t\t\t\t\t    \\\n-\t  emit_move_insn (gen_rtx_MEM (HImode, (TRAMP)), GEN_INT (0x7903)); \\\n-\t  emit_move_insn (gen_rtx_MEM (Pmode, plus_constant ((TRAMP), 2)),  \\\n-\t\t\t  (CXT));\t\t\t\t\t    \\\n-\t  emit_move_insn (gen_rtx_MEM (Pmode, plus_constant ((TRAMP), 4)),  \\\n-\t\t\t  GEN_INT (0x5a00));\t\t\t\t    \\\n-\t  emit_move_insn (gen_rtx_MEM (Pmode, plus_constant ((TRAMP), 6)),  \\\n-\t\t\t  (FNADDR));\t\t\t\t\t    \\\n-\t}\t\t\t\t\t\t\t\t    \\\n-      else\t\t\t\t\t\t\t\t    \\\n-\t{\t\t\t\t\t\t\t\t    \\\n-\t  rtx tem = gen_reg_rtx (Pmode);\t\t\t\t    \\\n-\t\t\t\t\t\t\t\t\t    \\\n-\t  emit_move_insn (gen_rtx_MEM (HImode, (TRAMP)), GEN_INT (0x7a03)); \\\n-\t  emit_move_insn (gen_rtx_MEM (Pmode, plus_constant ((TRAMP), 2)),  \\\n-\t\t\t  (CXT));\t\t\t\t\t    \\\n-\t  emit_move_insn (tem, (FNADDR));\t\t\t\t    \\\n-\t  emit_insn (gen_andsi3 (tem, tem, GEN_INT (0x00ffffff)));\t    \\\n-\t  emit_insn (gen_iorsi3 (tem, tem, GEN_INT (0x5a000000)));\t    \\\n-\t  emit_move_insn (gen_rtx_MEM (Pmode, plus_constant ((TRAMP), 6)),  \\\n-\t\t\t  tem);\t\t\t\t\t\t    \\\n-\t}\t\t\t\t\t\t\t\t    \\\n-    }\t\t\t\t\t\t\t\t\t    \\\n-  while (0)\n \f\n /* Addressing modes, and classification of registers for them.  */\n "}]}