{"sha": "fb6b24c66ea5a2ccbf6fb9f299c20a69f962ac9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI2YjI0YzY2ZWE1YTJjY2JmNmZiOWYyOTljMjBhNjlmOTYyYWM5Yg==", "commit": {"author": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2021-04-23T21:45:10Z"}, "committer": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2021-04-24T15:57:05Z"}, "message": "testuite: fix libtdc++ libatomic flags\n\nSome ports require libatomic for atomic operations, at least for some\ndata types and widths.  The libstdc++ testsuite previously was updated\nto link against libatomic, but the search path was hard-coded to\nsomething that is not always correct, and the shared library search\npath was not set.\n\nThe search path was hard-coded to the expected location of the\nlibatomic build directory relative to the libstdc++ testsuite\ndirectory, but if one uses parallelism when invoking the libstdc++\ntestsuite, the tests are run in the \"normalXX\" sub-directories, for\nwhich the hard-coded search path is incorrect. The path also is\nincorrect for alternative multilib and tool options.\n\nThis patch adopts the logic from gcc/testsuite/lib/atomic-dg.exp to\nsearch for the library and adds the logic to the libstdc++ testsuite\nlibatomic seatch path code.  Previously the libstdc++ testsuite atomic\ntests failed depending on the build configuration and if a build of\nlibatomic was installed in the default search path.\n\nBootstrapped on powerpc-ibm-aix7.2.3.0.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/lib/dg-options.exp (atomic_link_flags): New.\n\t(add_options_for_libatomic): Use atomic_link_flags.", "tree": {"sha": "f1d92572fa31b5606ab780084946202a44d41e57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1d92572fa31b5606ab780084946202a44d41e57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb6b24c66ea5a2ccbf6fb9f299c20a69f962ac9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb6b24c66ea5a2ccbf6fb9f299c20a69f962ac9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb6b24c66ea5a2ccbf6fb9f299c20a69f962ac9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb6b24c66ea5a2ccbf6fb9f299c20a69f962ac9b/comments", "author": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6600392bf71c4a9785f8f49948b611425896830", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6600392bf71c4a9785f8f49948b611425896830", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6600392bf71c4a9785f8f49948b611425896830"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "872768f26201aed9f4df7857762263f35078b2d2", "filename": "libstdc++-v3/testsuite/lib/dg-options.exp", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb6b24c66ea5a2ccbf6fb9f299c20a69f962ac9b/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb6b24c66ea5a2ccbf6fb9f299c20a69f962ac9b/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp?ref=fb6b24c66ea5a2ccbf6fb9f299c20a69f962ac9b", "patch": "@@ -260,13 +260,58 @@ proc add_options_for_net_ts { flags } {\n # Add to FLAGS all the target-specific flags to link to libatomic,\n # if required for atomics on pointers and 64-bit types.\n \n+proc atomic_link_flags { paths } {\n+    global srcdir\n+    global ld_library_path\n+    global shlib_ext\n+\n+    set gccpath ${paths}\n+    set flags \"\"\n+\n+    set shlib_ext [get_shlib_extension]\n+\n+    if { $gccpath != \"\" } {\n+      if { [file exists \"${gccpath}/libatomic/.libs/libatomic.a\"]\n+           || [file exists \"${gccpath}/libatomic/.libs/libatomic.${shlib_ext}\"] } {\n+          append flags \" -B${gccpath}/libatomic/ \"\n+          append flags \" -L${gccpath}/libatomic/.libs\"\n+          append ld_library_path \":${gccpath}/libatomic/.libs\"\n+      }\n+    } else {\n+      global tool_root_dir\n+\n+      set libatomic [lookfor_file ${tool_root_dir} libatomic]\n+      if { $libatomic != \"\" } {\n+          append flags \"-L${libatomic} \"\n+          append ld_library_path \":${libatomic}\"\n+      }\n+    }\n+\n+    set_ld_library_path_env_vars\n+\n+    return \"$flags\"\n+}\n+\n proc add_options_for_libatomic { flags } {\n     if { [istarget hppa*-*-hpux*]\n \t || ([istarget powerpc*-*-*] && [check_effective_target_ilp32])\n \t || [istarget riscv*-*-*]\n \t || ([istarget sparc*-*-linux-gnu] && [check_effective_target_ilp32])\n        } {\n-\treturn \"$flags -L../../libatomic/.libs -latomic\"\n+\tglobal TOOL_OPTIONS\n+\n+\tset link_flags \"\"\n+\tif ![is_remote host] {\n+\t    if [info exists TOOL_OPTIONS] {\n+\t\tset link_flags \"[atomic_link_flags [get_multilibs ${TOOL_OPTIONS}]]\"\n+\t    } else {\n+\t\tset link_flags \"[atomic_link_flags [get_multilibs]]\"\n+\t    }\n+\t}\n+\n+\tappend link_flags \" -latomic \"\n+\n+\treturn \"$flags $link_flags\"\n     }\n     return $flags\n }"}]}