{"sha": "3b7f9f50beb36c3d01017173744dbd40f4ff1454", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I3ZjlmNTBiZWIzNmMzZDAxMDE3MTczNzQ0ZGJkNDBmNGZmMTQ1NA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2012-09-27T00:00:46Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2012-09-27T00:00:46Z"}, "message": "Correct truncation on last checkin.\n\nFrom-SVN: r191787", "tree": {"sha": "c4ed6f3a7be9a51c40415e01ef598faa154b5dd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4ed6f3a7be9a51c40415e01ef598faa154b5dd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b7f9f50beb36c3d01017173744dbd40f4ff1454", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b7f9f50beb36c3d01017173744dbd40f4ff1454", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b7f9f50beb36c3d01017173744dbd40f4ff1454", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b7f9f50beb36c3d01017173744dbd40f4ff1454/comments", "author": null, "committer": null, "parents": [{"sha": "95c01db1e909f7274b2479dd63b28516851bf7d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95c01db1e909f7274b2479dd63b28516851bf7d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95c01db1e909f7274b2479dd63b28516851bf7d0"}], "stats": {"total": 174, "additions": 171, "deletions": 3}, "files": [{"sha": "a7c354cbbc258ba8a23b0256f26f916c89977e35", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 171, "deletions": 3, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b7f9f50beb36c3d01017173744dbd40f4ff1454/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b7f9f50beb36c3d01017173744dbd40f4ff1454/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3b7f9f50beb36c3d01017173744dbd40f4ff1454", "patch": "@@ -31,6 +31,174 @@\n \n \t* config/cpu/generic/opt/ext/opt_random.h: Fix comment.\n \n+2012-09-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* doc/xml/manual/status_cxx2011.xml: Update vs PR 44436.\n+\n+2012-09-24  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\t* include/ext/random: Add __gnu_cxx::k_distribution<> class.\n+\t* include/ext/random.tcc: Add out-of-line functions for\n+\t__gnu_cxx::k_distribution<>.\n+\t* testsuite/ext/random/k_distribution/operators/equal.cc: New file.\n+\t* testsuite/ext/random/k_distribution/operators/serialize.cc: New file.\n+\t* testsuite/ext/random/k_distribution/operators/inequal.cc: New file.\n+\t* testsuite/ext/random/k_distribution/cons/parms.cc: New file.\n+\t* testsuite/ext/random/k_distribution/cons/default.cc: New file.\n+\t* testsuite/ext/random/k_distribution/requirements/typedefs.cc:\n+\tNew file.\n+\t* testsuite/ext/random/k_distribution/requirements/\n+\texplicit_instantiation/1.cc: New file.\n+\n+2012-09-24  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\tPR libstdc++/44436\n+\t* include/bits/stl_tree.h\n+\t(_Rb_tree<>::_M_insert_): Take _Base_ptr rather than\n+\t_Const_Base_ptr.\n+\t(_Rb_tree<>::_M_insert_node): New.\n+\t(_Rb_tree<>::_M_get_insert_unique_pos): New, search code of\n+\t_M_insert_unique method.\n+\t(_Rb_tree<>::_M_insert_unique): Use latter.\n+\t(_Rb_tree<>::_M_emplace_unique): New, likewise.\n+\t(_Rb_tree<>::_M_get_insert_equal_pos): New, search code of\n+\t_M_insert_equal method.\n+\t(_Rb_tree<>::_M_insert_equal): Use latter.\n+\t(_Rb_tree<>::_M_emplace_equal): New, likewise.\n+\t(_Rb_tree<>::_M_get_insert_hint_unique_pos): New, search code of\n+\t_M_insert_unique_ method.\n+\t(_Rb_tree<>::_M_insert_unique_): Use latter.\n+\t(_Rb_tree<>::_M_emplace_hint_unique): New, likewise.\n+\t(_Rb_tree<>::_M_get_insert_hint_equal_pos): New, search code of\n+\t_M_insert_equal_ method.\n+\t(_Rb_tree<>::_M_insert_equal_): Use latter.\n+\t(_Rb_tree<>::_M_emplace_hint_equal): New, likewise.\n+\t(_Rb_tree<>::_M_insert_lower): Remove first _Base_ptr parameter,\n+\tuseless as always null.\n+\t* include/bits/stl_map.h: Include <tuple> in C++11.\n+\t(map<>::operator[](const key_type&)): Use\n+\t_Rb_tree<>::_M_emplace_hint_unique in C++11.\n+\t(map<>::operator[](key_type&&)): Likewise.\n+\t(map<>::emplace): New.\n+\t(map<>::emplace_hint): New.\n+\t* include/bits/stl_multimap.h (multimap<>::emplace): New.\n+\t(multimap<>::emplace_hint): New.\n+\t* include/bits/stl_set.h (set<>::emplace): New.\n+\t(set<>::emplace_hint): New.\n+\t* include/bits/stl_multiset.h (multiset<>::emplace): New.\n+\t(multiset<>::emplace_hint): New.\n+\t* include/debug/map.h (std::__debug::map<>::emplace): New.\n+\t(std::__debug::map<>::emplace_hint): New.\n+\t* include/debug/multimap.h (std::__debug::multimap<>::emplace):\n+\tNew.\n+\t(std::__debug::multimap<>::emplace_hint): New.\n+\t* include/debug/set.h (std::__debug::set<>::emplace): New.\n+\t(std::__debug::set<>::emplace_hint): New.\n+\t* include/debug/multiset.h (std::__debug::multiset<>::emplace):\n+\tNew.\n+\t(std::__debug::multiset<>::emplace_hint): New.\n+\t* include/profile/map.h (std::__profile::map<>::emplace): New.\n+\t(std::__profile::map<>::emplace_hint): New.\n+\t* include/profile/multimap.h (std::__profile::multimap<>::emplace):\n+\tNew.\n+\t(std::__profile::multimap<>::emplace_hint): New.\n+\t* include/profile/set.h (std::__profile::set<>::emplace): New.\n+\t(std::__profile::set<>::emplace_hint): New.\n+\t* include/profile/multiset.h (std::__profile::multiset<>::emplace):\n+\tNew.\n+\t(std::__profile::multiset<>::emplace_hint): New.\n+\t* testsuite/util/testsuite_container_traits.h: Signal that emplace\n+\tand emplace_hint are available on std::map, std::multimap,\n+\tstd::set and std::multiset in C++11.\n+\t* testsuite/23_containers/map/operators/2.cc: New.\n+\t* testsuite/23_containers/map/modifiers/emplace/1.cc: New.\n+\t* testsuite/23_containers/multimap/modifiers/emplace/1.cc: New.\n+\t* testsuite/23_containers/set/modifiers/emplace/1.cc: New.\n+\t* testsuite/23_containers/multiset/modifiers/emplace/1.cc: New.\n+\n+2012-09-24  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* testsuite/performance/23_containers/insert_erase/41975.cc: Use\n+\t__uset_hashtable rather than removed __unordered_set.\n+\n+2012-09-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tRevert:\n+\t2012-09-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_algobase.h (max, min): Use conditional operator.\n+\n+2012-09-23  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR libstdc++/54675\n+\t* include/ext/random: Avoid the badname __alpha (and, for\n+\tconsistency, __mu, __nu, __sigma and __omega too).\n+\t* include/bits/random.tcc: Likewise.\n+\n+2012-09-21  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\t* include/ext/random: Add __gnu_cxx::pareto_distribution<> class.\n+\t* include/ext/random.tcc: Add out-of-line functions for\n+\t__gnu_cxx::pareto_distribution<>.\n+\t* testsuite/ext/random/pareto_distribution/operators/equal.cc: New file.\n+\t* testsuite/ext/random/pareto_distribution/operators/serialize.cc:\n+\tNew file.\n+\t* testsuite/ext/random/pareto_distribution/operators/inequal.cc:\n+\tNew file.\n+\t* testsuite/ext/random/pareto_distribution/cons/parms.cc: New file.\n+\t* testsuite/ext/random/pareto_distribution/cons/default.cc: New file.\n+\t* testsuite/ext/random/pareto_distribution/requirements/typedefs.cc:\n+\tNew file.\n+\t* testsuite/ext/random/pareto_distribution/requirements/\n+\texplicit_instantiation/1.cc: New file.\n+\n+2012-09-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_algobase.h (max, min): Use conditional operator.\n+\n+2012-09-18  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/28811\n+\tPR libstdc++/54482\n+\t* configure.ac (glibcxx_lt_pic_flag,\n+\tglibcxx_compiler_pic_flag,\n+\tglibcxx_compiler_shared_flag): New. Use them.\n+\t(lt_prog_compiler_pic_CXX): Set via glibcxx_*_flag(s) above.\n+\t(pic_mode): Set to default.\n+\t(PIC_CXXFLAGS): Remove.\n+\t* Makefile.am (PICFLAG, PICFLAG_FOR_TARGET): Remove. Comment.\n+\t* libsupc++/Makefile.am: Use glibcxx_ld_pic_flag and\n+\tglibcxx_compiler_shared_flag. Comment.\n+\t* src/c++11/Makefile.am: Same.\n+\t* src/c++98/Makefile.am: Same.\n+\t* src/Makefile.am: Use glibcxx_compiler_pic_flag.\n+\n+\t* Makefile.in: Regenerated.\n+\t* aclocal.m4: Same.\n+\t* configure: Same.\n+\t* doc/Makefile.in: Same.\n+\t* include/Makefile.in: Same.\n+\t* libsupc++/Makefile.in: Same.\n+\t* po/Makefile.in: Same.\n+\t* python/Makefile.in: Same.\n+\t* src/Makefile.in: Same.\n+\t* src/c++11/Makefile.in: Same.\n+\t* src/c++98/Makefile.in: Same.\n+\t* testsuite/Makefile.in: Same.\n+\n+\t* src/c++11/compatibility-atomic-c++0x.cc: Use\n+\t_GLIBCXX_SHARED instead of PIC to designate shared-only\n+\tcode blocks.\n+\t* src/c++11/compatibility-c++0x.cc: Same.\n+\t* src/c++11/compatibility-thread-c++0x.cc: Same.\n+\t* src/c++98/compatibility-list-2.cc: Same.\n+\t* src/c++98/compatibility.cc: : Same.\n+\n+\t* testsuite/17_intro/shared_with_static_deps.cc: New.\n+\n+\t* doc/xml/manual/build_hacking.xml: Separate configure from\n+\tmake/build issues, add build details.\n+\n 2012-09-18  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \t* include/ext/random: Add __gnu_cxx::nakagami_distribution<> class.\n@@ -212,9 +380,9 @@\n 2012-09-06  Thiago Macieira  <thiago.macieira@intel.com>\n \n \tPR libstdc++/54172\n-        * libsupc++/guard.cc (__cxa_guard_acquire): Exit the loop earlier if\n-        we detect that another thread has had success. Don't compare_exchange\n-        from a finished state back to a waiting state. Comment.\n+\t* libsupc++/guard.cc (__cxa_guard_acquire): Exit the loop earlier if\n+\twe detect that another thread has had success. Don't compare_exchange\n+\tfrom a finished state back to a waiting state. Comment.\n \n 2012-09-05  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n "}]}