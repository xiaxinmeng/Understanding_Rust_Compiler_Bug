{"sha": "162ed06fb32b64802db9909e27c447527dd759ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYyZWQwNmZiMzJiNjQ4MDJkYjk5MDllMjdjNDQ3NTI3ZGQ3NTllZQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-05-23T10:22:15Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-23T10:22:15Z"}, "message": "[Ada] Suppression of elaboration-related warnings\n\nThis patch changes the behavior of elaboration-related warnings as follows:\n\n   * If a scenario or a target has [elaboration] warnings suppressed, then\n     any further elaboration-related warnings along the paths rooted at the\n     scenario are also suppressed.\n\n   * Elaboration-related warnings related to task activation can now be\n     suppressed when either the task object, task type, or the activation\n     call have [elaboration] warnings suppressed.\n\n   * Elaboration-related warnings related to calls can now be suppressed when\n     either the target or the call have [elaboration] warnings suppressed.\n\n   * Elaboration-related warnings related to instantiations can now be\n     suppressed when the instantiation has [elaboration] warnings suppressed.\n\nThe patch also cleans up the way the state of the Processing phase is updated\nwith each new node along a path. It is now preferable to update the state in\nroutines\n\n   Process_Conditional_ABE_Activation_Impl\n   Process_Conditional_ABE_Call\n   Process_Conditional_ABE_Instantiation\n\nrather than within their language-specific versions.\n\n2018-05-23  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* einfo.adb: Flag304 is now Is_Elaboration_Warnings_OK_Id.\n\t(Is_Elaboration_Warnings_OK_Id): New routine.\n\t(Set_Is_Elaboration_Warnings_OK_Id): New routine.\n\t(Write_Entity_Flags): Output Flag304.\n\t* einfo.ads: Add new attribute Is_Elaboration_Warnings_OK_Id along with\n\toccurrences in entities.\n\t(Is_Elaboration_Warnings_OK_Id): New routine along with pragma Inline.\n\t(Set_Is_Elaboration_Warnings_OK_Id): New routine along with pragma\n\tInline.\n\t* sem_attr.adb (Analyze_Access_Attribute): Capture the state of\n\telaboration warnings.\n\t* sem_ch3.adb (Analyze_Object_Declaration): Capture the state of\n\telaboration warnings.\n\t* sem_ch6.adb (Analyze_Abstract_Subprogram_Declaration): Capture the\n\tstate of elaboration warnings.\n\t(Analyze_Subprogram_Body_Helper): Capture the state of elaboration\n\twarnings.\n\t(Analyze_Subprogram_Declaration): Capture the state of elaboration\n\twarnings.\n\t* sem_ch9.adb (Analyze_Entry_Declaration): Capture the state of\n\telaboration warnings.\n\t(Analyze_Single_Task_Declaration): Capture the state of elaboration\n\twarnings.\n\t(Analyze_Task_Type_Declaration): Capture the state of elaboration\n\twarnings.\n\t* sem_ch12.adb (Analyze_Generic_Package_Declaration): Capture the state\n\tof elaboration warnings.\n\t(Analyze_Generic_Subprogram_Declaration): Capture the state of\n\telaboration warnings.\n\t* sem_elab.adb: Add a section on suppressing elaboration warnings.\n\tType Processing_Attributes includes component Suppress_Warnings\n\tintended to suppress any elaboration warnings along a path in the\n\tgraph.  Update Initial_State to include a value for this component.\n\tTypes Target_Attributes and Task_Attriutes include component\n\tElab_Warnings_OK to indicate whether the target or task has elaboration\n\twarnings enabled.  component Elab_Warnings_OK.\n\t(Build_Access_Marker): Propagate attribute\n\tIs_Elaboration_Warnings_OK_Node from the attribute to the generated\n\tcall marker.\n\t(Extract_Instantiation_Attributes): Set the value for Elab_Warnings_OK.\n\t(Extract_Target_Attributes): Set the value for Elab_Warnings_OK.\n\t(Extract_Task_Attributes): Set the value for Elab_Warnings_OK.\n\t(Process_Conditional_ABE_Access): Suppress futher elaboration warnings\n\twhen already in this mode or when the attribute or target have warnings\n\tsuppressed.\n\t(Process_Conditional_ABE_Activation_Impl): Do not emit any diagnostics\n\tif warnings are suppressed.\n\t(Process_Conditional_ABE_Call): Suppress further elaboration warnings\n\twhen already in this mode, or the target or call have warnings\n\tsuppressed.\n\t(Process_Conditional_ABE_Call_Ada): Do not emit any diagnostics if\n\twarnings are suppressed.\n\t(Process_Conditional_ABE_Call_SPARK): Do not emit any diagnostics if\n\twarnings are suppressed.\n\t(Process_Conditional_ABE_Instantiation): Suppress further elaboration\n\twarnings when already in this mode or when the instantiation has\n\twarnings suppressed.\n\t(Process_Conditional_ABE_Instantiation_Ada): Do not emit any\n\tdiagnostics if warnings are suppressed.\n\t(Process_Conditional_ABE_Variable_Assignment_Ada): Use the more\n\tspecific Is_Elaboration_Warnings_OK_Id rather than Warnings_Off.\n\t(Process_Conditional_ABE_Variable_Assignment_SPARK): Use the more\n\tspecific Is_Elaboration_Warnings_OK_Id rather than Warnings_Off.\n\t(Process_Task_Object): Suppress further elaboration warnings when\n\talready in this mode, or when the object, activation call, or task type\n\thave warnings suppressed. Update the processing state to indicate that\n\tthe path goes through a task body.\n\t* sinfo.adb (Is_Elaboration_Warnings_OK_Node): Accept attribute\n\treferences.\n\t(Set_Is_Elaboration_Warnings_OK_Node): Accept attribute references.\n\t* sinfo.ads: Attribute Is_Elaboration_Warnings_OK_Node now applies to\n\tattribute references.\n\ngcc/testsuite/\n\n\t* gnat.dg/elab4.adb, gnat.dg/elab4_pkg.adb, gnat.dg/elab4_pkg.ads: New\n\ttestcase.\n\nFrom-SVN: r260578", "tree": {"sha": "eb5a862c578f7df8ff465ba87e1b3ff3034fa3ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb5a862c578f7df8ff465ba87e1b3ff3034fa3ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/162ed06fb32b64802db9909e27c447527dd759ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/162ed06fb32b64802db9909e27c447527dd759ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/162ed06fb32b64802db9909e27c447527dd759ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/162ed06fb32b64802db9909e27c447527dd759ee/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "53b30c73574ee0109f2408a4ef61d10a4e4669d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53b30c73574ee0109f2408a4ef61d10a4e4669d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53b30c73574ee0109f2408a4ef61d10a4e4669d6"}], "stats": {"total": 548, "additions": 490, "deletions": 58}, "files": [{"sha": "6f495c1c3b275694eb24552f3dde04495756136f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=162ed06fb32b64802db9909e27c447527dd759ee", "patch": "@@ -1,3 +1,78 @@\n+2018-05-23  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* einfo.adb: Flag304 is now Is_Elaboration_Warnings_OK_Id.\n+\t(Is_Elaboration_Warnings_OK_Id): New routine.\n+\t(Set_Is_Elaboration_Warnings_OK_Id): New routine.\n+\t(Write_Entity_Flags): Output Flag304.\n+\t* einfo.ads: Add new attribute Is_Elaboration_Warnings_OK_Id along with\n+\toccurrences in entities.\n+\t(Is_Elaboration_Warnings_OK_Id): New routine along with pragma Inline.\n+\t(Set_Is_Elaboration_Warnings_OK_Id): New routine along with pragma\n+\tInline.\n+\t* sem_attr.adb (Analyze_Access_Attribute): Capture the state of\n+\telaboration warnings.\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Capture the state of\n+\telaboration warnings.\n+\t* sem_ch6.adb (Analyze_Abstract_Subprogram_Declaration): Capture the\n+\tstate of elaboration warnings.\n+\t(Analyze_Subprogram_Body_Helper): Capture the state of elaboration\n+\twarnings.\n+\t(Analyze_Subprogram_Declaration): Capture the state of elaboration\n+\twarnings.\n+\t* sem_ch9.adb (Analyze_Entry_Declaration): Capture the state of\n+\telaboration warnings.\n+\t(Analyze_Single_Task_Declaration): Capture the state of elaboration\n+\twarnings.\n+\t(Analyze_Task_Type_Declaration): Capture the state of elaboration\n+\twarnings.\n+\t* sem_ch12.adb (Analyze_Generic_Package_Declaration): Capture the state\n+\tof elaboration warnings.\n+\t(Analyze_Generic_Subprogram_Declaration): Capture the state of\n+\telaboration warnings.\n+\t* sem_elab.adb: Add a section on suppressing elaboration warnings.\n+\tType Processing_Attributes includes component Suppress_Warnings\n+\tintended to suppress any elaboration warnings along a path in the\n+\tgraph.  Update Initial_State to include a value for this component.\n+\tTypes Target_Attributes and Task_Attriutes include component\n+\tElab_Warnings_OK to indicate whether the target or task has elaboration\n+\twarnings enabled.  component Elab_Warnings_OK.\n+\t(Build_Access_Marker): Propagate attribute\n+\tIs_Elaboration_Warnings_OK_Node from the attribute to the generated\n+\tcall marker.\n+\t(Extract_Instantiation_Attributes): Set the value for Elab_Warnings_OK.\n+\t(Extract_Target_Attributes): Set the value for Elab_Warnings_OK.\n+\t(Extract_Task_Attributes): Set the value for Elab_Warnings_OK.\n+\t(Process_Conditional_ABE_Access): Suppress futher elaboration warnings\n+\twhen already in this mode or when the attribute or target have warnings\n+\tsuppressed.\n+\t(Process_Conditional_ABE_Activation_Impl): Do not emit any diagnostics\n+\tif warnings are suppressed.\n+\t(Process_Conditional_ABE_Call): Suppress further elaboration warnings\n+\twhen already in this mode, or the target or call have warnings\n+\tsuppressed.\n+\t(Process_Conditional_ABE_Call_Ada): Do not emit any diagnostics if\n+\twarnings are suppressed.\n+\t(Process_Conditional_ABE_Call_SPARK): Do not emit any diagnostics if\n+\twarnings are suppressed.\n+\t(Process_Conditional_ABE_Instantiation): Suppress further elaboration\n+\twarnings when already in this mode or when the instantiation has\n+\twarnings suppressed.\n+\t(Process_Conditional_ABE_Instantiation_Ada): Do not emit any\n+\tdiagnostics if warnings are suppressed.\n+\t(Process_Conditional_ABE_Variable_Assignment_Ada): Use the more\n+\tspecific Is_Elaboration_Warnings_OK_Id rather than Warnings_Off.\n+\t(Process_Conditional_ABE_Variable_Assignment_SPARK): Use the more\n+\tspecific Is_Elaboration_Warnings_OK_Id rather than Warnings_Off.\n+\t(Process_Task_Object): Suppress further elaboration warnings when\n+\talready in this mode, or when the object, activation call, or task type\n+\thave warnings suppressed. Update the processing state to indicate that\n+\tthe path goes through a task body.\n+\t* sinfo.adb (Is_Elaboration_Warnings_OK_Node): Accept attribute\n+\treferences.\n+\t(Set_Is_Elaboration_Warnings_OK_Node): Accept attribute references.\n+\t* sinfo.ads: Attribute Is_Elaboration_Warnings_OK_Node now applies to\n+\tattribute references.\n+\n 2018-05-23  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* einfo.ads: Minor reformatting."}, {"sha": "47d4f25f6ffa0d2dd9895a40af66b0b5f0b7cb6f", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=162ed06fb32b64802db9909e27c447527dd759ee", "patch": "@@ -627,8 +627,8 @@ package body Einfo is\n    --    Ignore_SPARK_Mode_Pragmas       Flag301\n    --    Is_Initial_Condition_Procedure  Flag302\n    --    Suppress_Elaboration_Warnings   Flag303\n+   --    Is_Elaboration_Warnings_OK_Id   Flag304\n \n-   --    (unused)                        Flag304\n    --    (unused)                        Flag305\n    --    (unused)                        Flag306\n    --    (unused)                        Flag307\n@@ -2262,6 +2262,17 @@ package body Einfo is\n       return Flag148 (Id);\n    end Is_Elaboration_Checks_OK_Id;\n \n+   function Is_Elaboration_Warnings_OK_Id (Id : E) return B is\n+   begin\n+      pragma Assert\n+        (Ekind_In (Id, E_Constant, E_Variable, E_Void)\n+          or else Is_Entry (Id)\n+          or else Is_Generic_Unit (Id)\n+          or else Is_Subprogram (Id)\n+          or else Is_Task_Type (Id));\n+      return Flag304 (Id);\n+   end Is_Elaboration_Warnings_OK_Id;\n+\n    function Is_Eliminated (Id : E) return B is\n    begin\n       return Flag124 (Id);\n@@ -5476,6 +5487,17 @@ package body Einfo is\n       Set_Flag148 (Id, V);\n    end Set_Is_Elaboration_Checks_OK_Id;\n \n+   procedure Set_Is_Elaboration_Warnings_OK_Id (Id : E; V : B := True) is\n+   begin\n+      pragma Assert\n+        (Ekind_In (Id, E_Constant, E_Variable)\n+          or else Is_Entry (Id)\n+          or else Is_Generic_Unit (Id)\n+          or else Is_Subprogram (Id)\n+          or else Is_Task_Type (Id));\n+      Set_Flag304 (Id, V);\n+   end Set_Is_Elaboration_Warnings_OK_Id;\n+\n    procedure Set_Is_Eliminated (Id : E; V : B := True) is\n    begin\n       Set_Flag124 (Id, V);\n@@ -9685,6 +9707,7 @@ package body Einfo is\n       W (\"Is_Dispatch_Table_Entity\",        Flag234 (Id));\n       W (\"Is_Dispatching_Operation\",        Flag6   (Id));\n       W (\"Is_Elaboration_Checks_OK_Id\",     Flag148 (Id));\n+      W (\"Is_Elaboration_Warnings_OK_Id\",   Flag304 (Id));\n       W (\"Is_Eliminated\",                   Flag124 (Id));\n       W (\"Is_Entry_Formal\",                 Flag52  (Id));\n       W (\"Is_Exception_Handler\",            Flag286 (Id));"}, {"sha": "5fc30714f4d1d8c28cd694d4ef00e3436aca97bd", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=162ed06fb32b64802db9909e27c447527dd759ee", "patch": "@@ -2522,6 +2522,10 @@ package Einfo is\n --       checks. Such targets are allowed to generate run-time conditional ABE\n --       checks or guaranteed ABE failures.\n \n+--    Is_Elaboration_Warnings_OK_Id (Flag304)\n+--       Defined in elaboration targets (see terminology in Sem_Elab). Set when\n+--       the target appears in a region with elaboration warnings enabled.\n+\n --    Is_Elementary_Type (synthesized)\n --       Applies to all entities, true for all elementary types and subtypes.\n --       Either Is_Composite_Type or Is_Elementary_Type (but not both) is true\n@@ -5949,6 +5953,7 @@ package Einfo is\n    --    Has_Volatile_Components             (Flag87)\n    --    Is_Atomic                           (Flag85)\n    --    Is_Elaboration_Checks_OK_Id         (Flag148)  (constants only)\n+   --    Is_Elaboration_Warnings_OK_Id       (Flag304)  (constants only)\n    --    Is_Eliminated                       (Flag124)\n    --    Is_Finalized_Transient              (Flag252)\n    --    Is_Ignored_Transient                (Flag295)\n@@ -6026,6 +6031,7 @@ package Einfo is\n    --    Has_Expanded_Contract               (Flag240)\n    --    Ignore_SPARK_Mode_Pragmas           (Flag301)\n    --    Is_Elaboration_Checks_OK_Id         (Flag148)\n+   --    Is_Elaboration_Warnings_OK_Id       (Flag304)\n    --    Is_Entry_Wrapper                    (Flag297)\n    --    Needs_No_Actuals                    (Flag22)\n    --    Sec_Stack_Needed_For_Return         (Flag167)\n@@ -6166,6 +6172,7 @@ package Einfo is\n    --    Is_Discrim_SO_Function              (Flag176)\n    --    Is_Discriminant_Check_Function      (Flag264)\n    --    Is_Elaboration_Checks_OK_Id         (Flag148)\n+   --    Is_Elaboration_Warnings_OK_Id       (Flag304)\n    --    Is_Eliminated                       (Flag124)\n    --    Is_Generic_Actual_Subprogram        (Flag274)  (non-generic case only)\n    --    Is_Hidden_Non_Overridden_Subpgm     (Flag2)    (non-generic case only)\n@@ -6316,6 +6323,7 @@ package Einfo is\n    --    Has_Nested_Subprogram               (Flag282)\n    --    Ignore_SPARK_Mode_Pragmas           (Flag301)\n    --    Is_Elaboration_Checks_OK_Id         (Flag148)\n+   --    Is_Elaboration_Warnings_OK_Id       (Flag304)\n    --    Is_Intrinsic_Subprogram             (Flag64)\n    --    Is_Machine_Code_Subprogram          (Flag137)\n    --    Is_Primitive                        (Flag218)\n@@ -6383,6 +6391,7 @@ package Einfo is\n    --    In_Package_Body                     (Flag48)\n    --    In_Use                              (Flag8)\n    --    Is_Elaboration_Checks_OK_Id         (Flag148)\n+   --    Is_Elaboration_Warnings_OK_Id       (Flag304)\n    --    Is_Instantiated                     (Flag126)\n    --    Is_Private_Descendant               (Flag53)\n    --    Is_Visible_Lib_Unit                 (Flag116)\n@@ -6486,6 +6495,7 @@ package Einfo is\n    --    Is_Constructor                      (Flag76)\n    --    Is_DIC_Procedure                    (Flag132)  (non-generic case only)\n    --    Is_Elaboration_Checks_OK_Id         (Flag148)\n+   --    Is_Elaboration_Warnings_OK_Id       (Flag304)\n    --    Is_Eliminated                       (Flag124)\n    --    Is_Generic_Actual_Subprogram        (Flag274)  (non-generic case only)\n    --    Is_Hidden_Non_Overridden_Subpgm     (Flag2)    (non-generic case only)\n@@ -6697,6 +6707,7 @@ package Einfo is\n    --    Has_Storage_Size_Clause             (Flag23)   (base type only)\n    --    Ignore_SPARK_Mode_Pragmas           (Flag301)\n    --    Is_Elaboration_Checks_OK_Id         (Flag148)\n+   --    Is_Elaboration_Warnings_OK_Id       (Flag304)\n    --    SPARK_Aux_Pragma_Inherited          (Flag266)\n    --    First_Component                     (synth)\n    --    First_Component_Or_Discriminant     (synth)\n@@ -6745,6 +6756,7 @@ package Einfo is\n    --    Has_Volatile_Components             (Flag87)\n    --    Is_Atomic                           (Flag85)\n    --    Is_Elaboration_Checks_OK_Id         (Flag148)\n+   --    Is_Elaboration_Warnings_OK_Id       (Flag304)\n    --    Is_Eliminated                       (Flag124)\n    --    Is_Finalized_Transient              (Flag252)\n    --    Is_Ignored_Transient                (Flag295)\n@@ -7264,6 +7276,7 @@ package Einfo is\n    function Is_Dispatch_Table_Entity            (Id : E) return B;\n    function Is_Dispatching_Operation            (Id : E) return B;\n    function Is_Elaboration_Checks_OK_Id         (Id : E) return B;\n+   function Is_Elaboration_Warnings_OK_Id       (Id : E) return B;\n    function Is_Eliminated                       (Id : E) return B;\n    function Is_Entry_Formal                     (Id : E) return B;\n    function Is_Entry_Wrapper                    (Id : E) return B;\n@@ -7959,6 +7972,7 @@ package Einfo is\n    procedure Set_Is_Dispatch_Table_Entity        (Id : E; V : B := True);\n    procedure Set_Is_Dispatching_Operation        (Id : E; V : B := True);\n    procedure Set_Is_Elaboration_Checks_OK_Id     (Id : E; V : B := True);\n+   procedure Set_Is_Elaboration_Warnings_OK_Id   (Id : E; V : B := True);\n    procedure Set_Is_Eliminated                   (Id : E; V : B := True);\n    procedure Set_Is_Entry_Formal                 (Id : E; V : B := True);\n    procedure Set_Is_Entry_Wrapper                (Id : E; V : B := True);\n@@ -8787,6 +8801,7 @@ package Einfo is\n    pragma Inline (Is_Dispatch_Table_Entity);\n    pragma Inline (Is_Dispatching_Operation);\n    pragma Inline (Is_Elaboration_Checks_OK_Id);\n+   pragma Inline (Is_Elaboration_Warnings_OK_Id);\n    pragma Inline (Is_Elementary_Type);\n    pragma Inline (Is_Eliminated);\n    pragma Inline (Is_Entry);\n@@ -9303,6 +9318,7 @@ package Einfo is\n    pragma Inline (Set_Is_Dispatch_Table_Entity);\n    pragma Inline (Set_Is_Dispatching_Operation);\n    pragma Inline (Set_Is_Elaboration_Checks_OK_Id);\n+   pragma Inline (Set_Is_Elaboration_Warnings_OK_Id);\n    pragma Inline (Set_Is_Eliminated);\n    pragma Inline (Set_Is_Entry_Formal);\n    pragma Inline (Set_Is_Entry_Wrapper);"}, {"sha": "a7063d0e25bff6c0170801b0aa37a6f9c8e0ad13", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=162ed06fb32b64802db9909e27c447527dd759ee", "patch": "@@ -813,9 +813,10 @@ package body Sem_Attr is\n          --  analysis, resolution, and expansion are over.\n \n          Mark_Elaboration_Attributes\n-           (N_Id   => N,\n-            Checks => True,\n-            Modes  => True);\n+           (N_Id     => N,\n+            Checks   => True,\n+            Modes    => True,\n+            Warnings => True);\n \n          --  Save the scenario for later examination by the ABE Processing\n          --  phase."}, {"sha": "6bfe9899f94b811ea7ab2e628a0a516041d9d45a", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=162ed06fb32b64802db9909e27c447527dd759ee", "patch": "@@ -3564,8 +3564,9 @@ package body Sem_Ch12 is\n       --  resolution, and expansion are over.\n \n       Mark_Elaboration_Attributes\n-        (N_Id   => Id,\n-         Checks => True);\n+        (N_Id     => Id,\n+         Checks   => True,\n+         Warnings => True);\n \n       --  Analyze aspects now, so that generated pragmas appear in the\n       --  declarations before building and analyzing the generic copy.\n@@ -3738,8 +3739,9 @@ package body Sem_Ch12 is\n       --  resolution, and expansion are over.\n \n       Mark_Elaboration_Attributes\n-        (N_Id   => Id,\n-         Checks => True);\n+        (N_Id     => Id,\n+         Checks   => True,\n+         Warnings => True);\n \n       Formals := Parameter_Specifications (Spec);\n "}, {"sha": "3316ff7e32922d02698fa9790b82a7f814d37574", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=162ed06fb32b64802db9909e27c447527dd759ee", "patch": "@@ -4758,8 +4758,9 @@ package body Sem_Ch3 is\n       --  resolution, and expansion are over.\n \n       Mark_Elaboration_Attributes\n-        (N_Id   => Id,\n-         Checks => True);\n+        (N_Id     => Id,\n+         Checks   => True,\n+         Warnings => True);\n \n       --  Initialize alignment and size and capture alignment setting\n "}, {"sha": "997f4ed1c88f4c91b0236203eaa4b1e1039d8276", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=162ed06fb32b64802db9909e27c447527dd759ee", "patch": "@@ -236,8 +236,9 @@ package body Sem_Ch6 is\n       --  resolution, and expansion are over.\n \n       Mark_Elaboration_Attributes\n-        (N_Id   => Subp_Id,\n-         Checks => True);\n+        (N_Id     => Subp_Id,\n+         Checks   => True,\n+         Warnings => True);\n \n       Set_Is_Abstract_Subprogram (Subp_Id);\n       New_Overloaded_Entity (Subp_Id);\n@@ -4148,6 +4149,17 @@ package body Sem_Ch6 is\n          end if;\n       end if;\n \n+      --  Preserve relevant elaboration-related attributes of the context which\n+      --  are no longer available or very expensive to recompute once analysis,\n+      --  resolution, and expansion are over.\n+\n+      if No (Spec_Id) then\n+         Mark_Elaboration_Attributes\n+           (N_Id     => Body_Id,\n+            Checks   => True,\n+            Warnings => True);\n+      end if;\n+\n       --  If this is the proper body of a stub, we must verify that the stub\n       --  conforms to the body, and to the previous spec if one was present.\n       --  We know already that the body conforms to that spec. This test is\n@@ -4785,8 +4797,9 @@ package body Sem_Ch6 is\n       --  resolution, and expansion are over.\n \n       Mark_Elaboration_Attributes\n-        (N_Id   => Designator,\n-         Checks => True);\n+        (N_Id     => Designator,\n+         Checks   => True,\n+         Warnings => True);\n \n       if Debug_Flag_C then\n          Write_Str (\"==> subprogram spec \");"}, {"sha": "b049930a17602648ff87584a1f3a2470dd7a5603", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=162ed06fb32b64802db9909e27c447527dd759ee", "patch": "@@ -1662,8 +1662,9 @@ package body Sem_Ch9 is\n       --  resolution, and expansion are over.\n \n       Mark_Elaboration_Attributes\n-        (N_Id   => Def_Id,\n-         Checks => True);\n+        (N_Id     => Def_Id,\n+         Checks   => True,\n+         Warnings => True);\n \n       --  Process formals\n \n@@ -2866,8 +2867,9 @@ package body Sem_Ch9 is\n       --  resolution, and expansion are over.\n \n       Mark_Elaboration_Attributes\n-        (N_Id   => Obj_Id,\n-         Checks => True);\n+        (N_Id     => Obj_Id,\n+         Checks   => True,\n+         Warnings => True);\n \n       --  Instead of calling Analyze on the new node, call the proper analysis\n       --  procedure directly. Otherwise the node would be expanded twice, with\n@@ -3137,8 +3139,9 @@ package body Sem_Ch9 is\n       --  resolution, and expansion are over.\n \n       Mark_Elaboration_Attributes\n-        (N_Id   => T,\n-         Checks => True);\n+        (N_Id     => T,\n+         Checks   => True,\n+         Warnings => True);\n \n       Push_Scope (T);\n "}, {"sha": "0ec49c107966244807c310b4fe59f78e92cec008", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 177, "deletions": 34, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=162ed06fb32b64802db9909e27c447527dd759ee", "patch": "@@ -372,6 +372,56 @@ package body Sem_Elab is\n    --  The diagnostics of the ABE mechanism depend on accurate source locations\n    --  to determine the spacial relation of nodes.\n \n+   -----------------------------------------\n+   -- Suppression of elaboration warnings --\n+   -----------------------------------------\n+\n+   --  Elaboration warnings along multiple traversal paths rooted at a scenario\n+   --  are suppressed when the scenario has elaboration warnings suppressed.\n+   --\n+   --    Root scenario\n+   --    |\n+   --    +-- Child scenario 1\n+   --    |   |\n+   --    |   +-- Grandchild scenario 1\n+   --    |   |\n+   --    |   +-- Grandchild scenario N\n+   --    |\n+   --    +-- Child scenario N\n+   --\n+   --  If the root scenario has elaboration warnings suppressed, then all its\n+   --  child, grandchild, etc. scenarios will have their elaboration warnings\n+   --  suppressed.\n+   --\n+   --  In addition to switch -gnatwL, pragma Warnings may be used to suppress\n+   --  elaboration-related warnings by wrapping a construct in the following\n+   --  manner:\n+   --\n+   --    pragma Warnings (\"L\");\n+   --    <construct>\n+   --    pragma Warnings (\"l\");\n+   --\n+   --  * To suppress elaboration warnings for '[Unrestricted_]Access of\n+   --    entries, operators, and subprograms, either:\n+   --\n+   --      - Wrap the entry, operator, or subprogram, or\n+   --      - Wrap the attribute, or\n+   --      - Use switch -gnatw.f\n+   --\n+   --  * To suppress elaboration warnings for calls to entries, operators,\n+   --    and subprograms, either:\n+   --\n+   --      - Wrap the entry, operator, or subprogram, or\n+   --      - Wrap the call\n+   --\n+   --  * To suppress elaboration warnings for instantiations, wrap the\n+   --    instantiation.\n+   --\n+   --  * To suppress elaboration warnings for task activations, either:\n+   --\n+   --      - Wrap the task object, or\n+   --      - Wrap the task type\n+\n    --------------\n    -- Switches --\n    --------------\n@@ -718,6 +768,10 @@ package body Sem_Elab is\n       --  This flag is set when the Processing phase must not generate any\n       --  implicit Elaborate[_All] pragmas.\n \n+      Suppress_Warnings : Boolean;\n+      --  This flag is set when the Processing phase must not emit any warnings\n+      --  on elaboration problems.\n+\n       Within_Initial_Condition : Boolean;\n       --  This flag is set when the Processing phase is currently examining a\n       --  scenario which was reached from an initial condition procedure.\n@@ -737,6 +791,7 @@ package body Sem_Elab is\n \n    Initial_State : constant Processing_Attributes :=\n      (Suppress_Implicit_Pragmas   => False,\n+      Suppress_Warnings           => False,\n       Within_Initial_Condition    => False,\n       Within_Instance             => False,\n       Within_Partial_Finalization => False,\n@@ -749,6 +804,9 @@ package body Sem_Elab is\n       Elab_Checks_OK : Boolean;\n       --  This flag is set when the target has elaboration checks enabled\n \n+      Elab_Warnings_OK : Boolean;\n+      --  This flag is set when the target has elaboration warnings enabled\n+\n       From_Source : Boolean;\n       --  This flag is set when the target comes from source\n \n@@ -831,6 +889,9 @@ package body Sem_Elab is\n       Elab_Checks_OK : Boolean;\n       --  This flag is set when the task type has elaboration checks enabled\n \n+      Elab_Warnings_OK : Boolean;\n+      --  This flag is set when the task type has elaboration warnings enabled\n+\n       Ghost_Mode_Ignore : Boolean;\n       --  This flag is set when the task type appears in a region subject to\n       --  pragma Ghost with policy ignore, or starts one such region.\n@@ -4090,6 +4151,7 @@ package body Sem_Elab is\n       Attrs.Body_Barf         := Body_Barf;\n       Attrs.Body_Decl         := Body_Decl;\n       Attrs.Elab_Checks_OK    := Is_Elaboration_Checks_OK_Id (Target_Id);\n+      Attrs.Elab_Warnings_OK  := Is_Elaboration_Warnings_OK_Id (Target_Id);\n       Attrs.From_Source       := Comes_From_Source (Target_Id);\n       Attrs.Ghost_Mode_Ignore := Is_Ignored_Ghost_Entity (Target_Id);\n       Attrs.SPARK_Mode_On     :=\n@@ -4140,6 +4202,7 @@ package body Sem_Elab is\n \n       Attrs.Body_Decl         := Body_Decl;\n       Attrs.Elab_Checks_OK    := Is_Elaboration_Checks_OK_Id (Task_Typ);\n+      Attrs.Elab_Warnings_OK  := Is_Elaboration_Warnings_OK_Id (Task_Typ);\n       Attrs.Ghost_Mode_Ignore := Is_Ignored_Ghost_Entity (Task_Typ);\n       Attrs.SPARK_Mode_On     :=\n         Present (Prag) and then Get_SPARK_Mode_From_Annotation (Prag) = On;\n@@ -8392,8 +8455,8 @@ package body Sem_Elab is\n       --  component.\n \n       procedure Process_Task_Objects (List : List_Id);\n-      --  Perform ABE checks and diagnostics for all task objects found in\n-      --  the list List.\n+      --  Perform ABE checks and diagnostics for all task objects found in the\n+      --  list List.\n \n       -------------------------\n       -- Process_Task_Object --\n@@ -8405,30 +8468,54 @@ package body Sem_Elab is\n          Comp_Id    : Entity_Id;\n          Task_Attrs : Task_Attributes;\n \n+         New_State : Processing_Attributes := State;\n+         --  Each step of the Processing phase constitutes a new state\n+\n       begin\n          if Is_Task_Type (Typ) then\n             Extract_Task_Attributes\n               (Typ   => Base_Typ,\n                Attrs => Task_Attrs);\n \n+            --  Warnings are suppressed when a prior scenario is already in\n+            --  that mode, or when the object, activation call, or task type\n+            --  have warnings suppressed. Update the state of the Processing\n+            --  phase to reflect this.\n+\n+            New_State.Suppress_Warnings :=\n+              New_State.Suppress_Warnings\n+                or else not Is_Elaboration_Warnings_OK_Id (Obj_Id)\n+                or else not Call_Attrs.Elab_Warnings_OK\n+                or else not Task_Attrs.Elab_Warnings_OK;\n+\n+            --  Update the state of the Processing phase to indicate that any\n+            --  further traversal is now within a task body.\n+\n+            New_State.Within_Task_Body := True;\n+\n             Process_Single_Activation\n               (Call       => Call,\n                Call_Attrs => Call_Attrs,\n                Obj_Id     => Obj_Id,\n                Task_Attrs => Task_Attrs,\n-               State      => State);\n+               State      => New_State);\n \n          --  Examine the component type when the object is an array\n \n          elsif Is_Array_Type (Typ) and then Has_Task (Base_Typ) then\n-            Process_Task_Object (Obj_Id, Component_Type (Typ));\n+            Process_Task_Object\n+              (Obj_Id => Obj_Id,\n+               Typ    => Component_Type (Typ));\n \n          --  Examine individual component types when the object is a record\n \n          elsif Is_Record_Type (Typ) and then Has_Task (Base_Typ) then\n             Comp_Id := First_Component (Typ);\n             while Present (Comp_Id) loop\n-               Process_Task_Object (Obj_Id, Etype (Comp_Id));\n+               Process_Task_Object\n+                 (Obj_Id => Obj_Id,\n+                  Typ    => Etype (Comp_Id));\n+\n                Next_Component (Comp_Id);\n             end loop;\n          end if;\n@@ -8454,7 +8541,9 @@ package body Sem_Elab is\n                Item_Typ := Etype (Item_Id);\n \n                if Has_Task (Item_Typ) then\n-                  Process_Task_Object (Item_Id, Item_Typ);\n+                  Process_Task_Object\n+                    (Obj_Id => Item_Id,\n+                     Typ    => Item_Typ);\n                end if;\n             end if;\n \n@@ -8558,6 +8647,8 @@ package body Sem_Elab is\n                     (Marker, False);\n          Set_Is_Elaboration_Checks_OK_Node\n                     (Marker, Is_Elaboration_Checks_OK_Node (Attr));\n+         Set_Is_Elaboration_Warnings_OK_Node\n+                    (Marker, Is_Elaboration_Warnings_OK_Node (Attr));\n          Set_Is_Source_Call\n                     (Marker, Comes_From_Source (Attr));\n          Set_Is_SPARK_Mode_On_Node\n@@ -8578,6 +8669,9 @@ package body Sem_Elab is\n \n       Target_Attrs : Target_Attributes;\n \n+      New_State : Processing_Attributes := State;\n+      --  Each step of the Processing phase constitutes a new state\n+\n    --  Start of processing for Process_Conditional_ABE_Access\n \n    begin\n@@ -8593,14 +8687,29 @@ package body Sem_Elab is\n         (Target_Id => Target_Id,\n          Attrs     => Target_Attrs);\n \n+      --  Warnings are suppressed when a prior scenario is already in that\n+      --  mode, or when the attribute or the target have warnings suppressed.\n+      --  Update the state of the Processing phase to reflect this.\n+\n+      New_State.Suppress_Warnings :=\n+        New_State.Suppress_Warnings\n+          or else not Is_Elaboration_Warnings_OK_Node (Attr)\n+          or else not Target_Attrs.Elab_Warnings_OK;\n+\n+      --  Do not emit any ABE diagnostics when the current or previous scenario\n+      --  in this traversal has suppressed elaboration warnings.\n+\n+      if New_State.Suppress_Warnings then\n+         null;\n+\n       --  Both the attribute and the corresponding body are in the same unit.\n       --  The corresponding body must appear prior to the root scenario which\n       --  started the recursive search. If this is not the case, then there is\n       --  a potential ABE if the access value is used to call the subprogram.\n       --  Emit a warning only when switch -gnatw.f (warnings on suspucious\n       --  'Access) is in effect.\n \n-      if Warn_On_Elab_Access\n+      elsif Warn_On_Elab_Access\n         and then Present (Target_Attrs.Body_Decl)\n         and then In_Extended_Main_Code_Unit (Target_Attrs.Body_Decl)\n         and then Earlier_In_Extended_Unit (Root, Target_Attrs.Body_Decl)\n@@ -8620,7 +8729,7 @@ package body Sem_Elab is\n       if Debug_Flag_Dot_O then\n          Process_Conditional_ABE\n            (N     => Build_Access_Marker (Target_Id),\n-            State => State);\n+            State => New_State);\n \n       --  Otherwise ensure that the unit with the corresponding body is\n       --  elaborated prior to the main unit.\n@@ -8630,7 +8739,7 @@ package body Sem_Elab is\n            (N        => Attr,\n             Unit_Id  => Target_Attrs.Unit_Id,\n             Prag_Nam => Name_Elaborate_All,\n-            State    => State);\n+            State    => New_State);\n       end if;\n    end Process_Conditional_ABE_Access;\n \n@@ -8785,21 +8894,25 @@ package body Sem_Elab is\n \n          if Earlier_In_Extended_Unit (Root, Task_Attrs.Body_Decl) then\n \n+            --  Do not emit any ABE diagnostics when a previous scenario in\n+            --  this traversal has suppressed elaboration warnings.\n+\n+            if State.Suppress_Warnings then\n+               null;\n+\n             --  Do not emit any ABE diagnostics when the activation occurs in\n             --  a partial finalization context because this leads to confusing\n             --  noise.\n \n-            if State.Within_Partial_Finalization then\n+            elsif State.Within_Partial_Finalization then\n                null;\n \n             --  ABE diagnostics are emitted only in the static model because\n             --  there is a well-defined order to visiting scenarios. Without\n             --  this order diagnostics appear jumbled and result in unwanted\n             --  noise.\n \n-            elsif Static_Elaboration_Checks\n-              and then Call_Attrs.Elab_Warnings_OK\n-            then\n+            elsif Static_Elaboration_Checks then\n                Error_Msg_Sloc := Sloc (Call);\n                Error_Msg_N\n                  (\"??task & will be activated # before elaboration of its \"\n@@ -8869,11 +8982,6 @@ package body Sem_Elab is\n             Id      => Task_Attrs.Unit_Id);\n       end if;\n \n-      --  Update the state of the Processing phase to indicate that any further\n-      --  traversal is now within a task body.\n-\n-      New_State.Within_Task_Body := True;\n-\n       --  Both the activation call and task type are subject to SPARK_Mode\n       --  On, this triggers the SPARK rules for task activation. Compared to\n       --  calls and instantiations, task activation in SPARK does not require\n@@ -9085,6 +9193,15 @@ package body Sem_Elab is\n          return;\n       end if;\n \n+      --  Warnings are suppressed when a prior scenario is already in that\n+      --  mode, or the call or target have warnings suppressed. Update the\n+      --  state of the Processing phase to reflect this.\n+\n+      New_State.Suppress_Warnings :=\n+        New_State.Suppress_Warnings\n+          or else not Call_Attrs.Elab_Warnings_OK\n+          or else not Target_Attrs.Elab_Warnings_OK;\n+\n       --  The call occurs in an initial condition context when a prior scenario\n       --  is already in that mode, or when the target is an Initial_Condition\n       --  procedure. Update the state of the Processing phase to reflect this.\n@@ -9221,21 +9338,25 @@ package body Sem_Elab is\n \n          if Earlier_In_Extended_Unit (Root, Target_Attrs.Body_Decl) then\n \n+            --  Do not emit any ABE diagnostics when a previous scenario in\n+            --  this traversal has suppressed elaboration warnings.\n+\n+            if State.Suppress_Warnings then\n+               null;\n+\n             --  Do not emit any ABE diagnostics when the call occurs in a\n             --  partial finalization context because this leads to confusing\n             --  noise.\n \n-            if State.Within_Partial_Finalization then\n+            elsif State.Within_Partial_Finalization then\n                null;\n \n             --  ABE diagnostics are emitted only in the static model because\n             --  there is a well-defined order to visiting scenarios. Without\n             --  this order diagnostics appear jumbled and result in unwanted\n             --  noise.\n \n-            elsif Static_Elaboration_Checks\n-              and then Call_Attrs.Elab_Warnings_OK\n-            then\n+            elsif Static_Elaboration_Checks then\n                Error_Msg_NE\n                  (\"??cannot call & before body seen\", Call, Target_Id);\n                Error_Msg_N (\"\\Program_Error may be raised at run time\", Call);\n@@ -9408,11 +9529,17 @@ package body Sem_Elab is\n \n          if Earlier_In_Extended_Unit (Call, Target_Attrs.Body_Decl) then\n \n+            --  Do not emit any ABE diagnostics when a previous scenario in\n+            --  this traversal has suppressed elaboration warnings.\n+\n+            if State.Suppress_Warnings then\n+               null;\n+\n             --  Do not emit any ABE diagnostics when the call occurs in an\n             --  initial condition context because this leads to incorrect\n             --  diagnostics.\n \n-            if State.Within_Initial_Condition then\n+            elsif State.Within_Initial_Condition then\n                null;\n \n             --  Do not emit any ABE diagnostics when the call occurs in a\n@@ -9515,6 +9642,9 @@ package body Sem_Elab is\n       SPARK_Rules_On : Boolean;\n       --  This flag is set when the SPARK rules are in effect\n \n+      New_State : Processing_Attributes := State;\n+      --  Each step of the Processing phase constitutes a new state\n+\n    begin\n       Extract_Instantiation_Attributes\n         (Exp_Inst => Exp_Inst,\n@@ -9579,15 +9709,23 @@ package body Sem_Elab is\n \n       elsif Is_Up_Level_Target (Gen_Attrs.Spec_Decl) then\n          return;\n+      end if;\n+\n+      --  Warnings are suppressed when a prior scenario is already in that\n+      --  mode, or when the instantiation has warnings suppressed. Update\n+      --  the state of the processing phase to reflect this.\n+\n+      New_State.Suppress_Warnings :=\n+        New_State.Suppress_Warnings or else not Inst_Attrs.Elab_Warnings_OK;\n \n       --  The SPARK rules are in effect\n \n-      elsif SPARK_Rules_On then\n+      if SPARK_Rules_On then\n          Process_Conditional_ABE_Instantiation_SPARK\n            (Inst      => Inst,\n             Gen_Id    => Gen_Id,\n             Gen_Attrs => Gen_Attrs,\n-            State     => State);\n+            State     => New_State);\n \n       --  Otherwise the Ada rules are in effect, or SPARK code is allowed to\n       --  violate the SPARK rules.\n@@ -9599,7 +9737,7 @@ package body Sem_Elab is\n             Inst_Attrs => Inst_Attrs,\n             Gen_Id     => Gen_Id,\n             Gen_Attrs  => Gen_Attrs,\n-            State      => State);\n+            State      => New_State);\n       end if;\n    end Process_Conditional_ABE_Instantiation;\n \n@@ -9624,11 +9762,11 @@ package body Sem_Elab is\n       --  the generic have active elaboration checks and both are not ignored\n       --  Ghost constructs.\n \n+      Root : constant Node_Id := Root_Scenario;\n+\n       New_State : Processing_Attributes := State;\n       --  Each step of the Processing phase constitutes a new state\n \n-      Root : constant Node_Id := Root_Scenario;\n-\n    begin\n       --  Nothing to do when the instantiation is ABE-safe\n       --\n@@ -9685,21 +9823,25 @@ package body Sem_Elab is\n \n          if Earlier_In_Extended_Unit (Root, Gen_Attrs.Body_Decl) then\n \n+            --  Do not emit any ABE diagnostics when a previous scenario in\n+            --  this traversal has suppressed elaboration warnings.\n+\n+            if State.Suppress_Warnings then\n+               null;\n+\n             --  Do not emit any ABE diagnostics when the instantiation occurs\n             --  in partial finalization context because this leads to unwanted\n             --  noise.\n \n-            if State.Within_Partial_Finalization then\n+            elsif State.Within_Partial_Finalization then\n                null;\n \n             --  ABE diagnostics are emitted only in the static model because\n             --  there is a well-defined order to visiting scenarios. Without\n             --  this order diagnostics appear jumbled and result in unwanted\n             --  noise.\n \n-            elsif Static_Elaboration_Checks\n-              and then Inst_Attrs.Elab_Warnings_OK\n-            then\n+            elsif Static_Elaboration_Checks then\n                Error_Msg_NE\n                  (\"??cannot instantiate & before body seen\", Inst, Gen_Id);\n                Error_Msg_N (\"\\Program_Error may be raised at run time\", Inst);\n@@ -9899,7 +10041,7 @@ package body Sem_Elab is\n       --  spec without a pragma Elaborate_Body is initialized by elaboration\n       --  code within the corresponding body.\n \n-      if not Warnings_Off (Var_Id)\n+      if Is_Elaboration_Warnings_OK_Id (Var_Id)\n         and then not Is_Initialized (Var_Decl)\n         and then not Has_Pragma_Elaborate_Body (Spec_Id)\n       then\n@@ -9940,7 +10082,8 @@ package body Sem_Elab is\n       --  without pragma Elaborate_Body is further modified by elaboration code\n       --  within the corresponding body.\n \n-      if Is_Initialized (Var_Decl)\n+      if Is_Elaboration_Warnings_OK_Id (Var_Id)\n+        and then Is_Initialized (Var_Decl)\n         and then not Has_Pragma_Elaborate_Body (Spec_Id)\n       then\n          Error_Msg_NE"}, {"sha": "875b9eb645891f41170c9136635d5bd321a59cbd", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=162ed06fb32b64802db9909e27c447527dd759ee", "patch": "@@ -18399,12 +18399,13 @@ package body Sem_Util is\n               Elaboration_Checks_OK\n                 (Target_Id  => Id,\n                  Context_Id => Scope (Id)));\n+         end if;\n \n-         --  Entities do not need to capture their enclosing level. The Ghost\n-         --  and SPARK modes in effect are already marked during analysis.\n+         --  Mark the status of elaboration warnings in effect. Do not reset\n+         --  the status in case the entity is reanalyzed with warnings off.\n \n-         else\n-            null;\n+         if Warnings and then not Is_Elaboration_Warnings_OK_Id (Id) then\n+            Set_Is_Elaboration_Warnings_OK_Id (Id, Elab_Warnings);\n          end if;\n       end Mark_Elaboration_Attributes_Id;\n "}, {"sha": "acb32155f208fe4940a46b91ec71b261c20f085e", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=162ed06fb32b64802db9909e27c447527dd759ee", "patch": "@@ -1929,6 +1929,7 @@ package body Sinfo is\n       (N : Node_Id) return Boolean is\n    begin\n       pragma Assert (False\n+        or else NT (N).Nkind = N_Attribute_Reference\n         or else NT (N).Nkind = N_Call_Marker\n         or else NT (N).Nkind = N_Entry_Call_Statement\n         or else NT (N).Nkind = N_Function_Call\n@@ -5392,6 +5393,7 @@ package body Sinfo is\n       (N : Node_Id; Val : Boolean := True) is\n    begin\n       pragma Assert (False\n+        or else NT (N).Nkind = N_Attribute_Reference\n         or else NT (N).Nkind = N_Call_Marker\n         or else NT (N).Nkind = N_Entry_Call_Statement\n         or else NT (N).Nkind = N_Function_Call"}, {"sha": "f1a532da651ab22b27c5bcdf00927d8bdc695f58", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=162ed06fb32b64802db9909e27c447527dd759ee", "patch": "@@ -1758,6 +1758,7 @@ package Sinfo is\n    --  Is_Elaboration_Warnings_OK_Node (Flag3-Sem)\n    --    Present in the following nodes:\n    --\n+   --      attribute reference\n    --      call marker\n    --      entry call statement\n    --      function call\n@@ -4064,6 +4065,7 @@ package Sinfo is\n       --  Associated_Node (Node4-Sem)\n       --  Is_Elaboration_Checks_OK_Node (Flag1-Sem)\n       --  Is_SPARK_Mode_On_Node (Flag2-Sem)\n+      --  Is_Elaboration_Warnings_OK_Node (Flag3-Sem)\n       --  Header_Size_Added (Flag11-Sem)\n       --  Redundant_Use (Flag13-Sem)\n       --  Must_Be_Byte_Aligned (Flag14-Sem)"}, {"sha": "fc786e32c72e635e470135e45375f863d02100ea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=162ed06fb32b64802db9909e27c447527dd759ee", "patch": "@@ -1,3 +1,8 @@\n+2018-05-23  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* gnat.dg/elab4.adb, gnat.dg/elab4_pkg.adb, gnat.dg/elab4_pkg.ads: New\n+\ttestcase.\n+\n 2018-05-23  Bob Duff  <duff@adacore.com>\n \n \t* gnat.dg/addr10.adb: New testcase."}, {"sha": "dd841c10c4d03575f21bd7f79c528788daacc959", "filename": "gcc/testsuite/gnat.dg/elab4.adb", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Ftestsuite%2Fgnat.dg%2Felab4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Ftestsuite%2Fgnat.dg%2Felab4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Felab4.adb?ref=162ed06fb32b64802db9909e27c447527dd759ee", "patch": "@@ -0,0 +1,5 @@\n+--  { dg-do link }\n+\n+with Elab4_Pkg;\n+\n+procedure Elab4 is begin null; end Elab4;"}, {"sha": "db91dc712a8b13e5788d6e01a220a7dfb97cd1df", "filename": "gcc/testsuite/gnat.dg/elab4_pkg.adb", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Ftestsuite%2Fgnat.dg%2Felab4_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Ftestsuite%2Fgnat.dg%2Felab4_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Felab4_pkg.adb?ref=162ed06fb32b64802db9909e27c447527dd759ee", "patch": "@@ -0,0 +1,99 @@\n+with Ada.Text_IO; use Ada.Text_IO;\n+\n+package body Elab4_Pkg is\n+\n+   --------------------------------------------------\n+   -- Call to call, instantiation, task activation --\n+   --------------------------------------------------\n+\n+   procedure Suppressed_Call_1 is\n+      package Inst is new ABE_Gen;\n+      T : ABE_Task;\n+   begin\n+      ABE_Call;\n+   end Suppressed_Call_1;\n+\n+   function Elaborator_1 return Boolean is\n+   begin\n+      pragma Warnings (\"L\");\n+      Suppressed_Call_1;\n+      pragma Warnings (\"l\");\n+      return True;\n+   end Elaborator_1;\n+\n+   Elab_1 : constant Boolean := Elaborator_1;\n+\n+   procedure Suppressed_Call_2 is\n+      package Inst is new ABE_Gen;\n+      T : ABE_Task;\n+   begin\n+      ABE_Call;\n+   end Suppressed_Call_2;\n+\n+   function Elaborator_2 return Boolean is\n+   begin\n+      Suppressed_Call_2;\n+      return True;\n+   end Elaborator_2;\n+\n+   Elab_2 : constant Boolean := Elaborator_2;\n+\n+   -----------------------------------------------------------\n+   -- Instantiation to call, instantiation, task activation --\n+   -----------------------------------------------------------\n+\n+   package body Suppressed_Generic is\n+      procedure Force_Body is begin null; end Force_Body;\n+      package Inst is new ABE_Gen;\n+      T : ABE_Task;\n+   begin\n+      ABE_Call;\n+   end Suppressed_Generic;\n+\n+   function Elaborator_3 return Boolean is\n+      pragma Warnings (\"L\");\n+      package Inst is new Suppressed_Generic;\n+      pragma Warnings (\"l\");\n+   begin\n+      return True;\n+   end Elaborator_3;\n+\n+   Elab_3 : constant Boolean := Elaborator_3;\n+\n+   -------------------------------------------------------------\n+   -- Task activation to call, instantiation, task activation --\n+   -------------------------------------------------------------\n+\n+   task body Suppressed_Task is\n+      package Inst is new ABE_Gen;\n+      T : ABE_Task;\n+   begin\n+      ABE_Call;\n+   end Suppressed_Task;\n+\n+   function Elaborator_4 return Boolean is\n+      pragma Warnings (\"L\");\n+      T : Suppressed_Task;\n+      pragma Warnings (\"l\");\n+   begin\n+      return True;\n+   end Elaborator_4;\n+\n+   Elab_4 : constant Boolean := Elaborator_4;\n+\n+   procedure ABE_Call is\n+   begin\n+      Put_Line (\"ABE_Call\");\n+   end ABE_Call;\n+\n+   package body ABE_Gen is\n+      procedure Force_Body is begin null; end Force_Body;\n+   begin\n+      Put_Line (\"ABE_Gen\");\n+   end ABE_Gen;\n+\n+   task body ABE_Task is\n+   begin\n+      Put_Line (\"ABE_Task\");\n+   end ABE_Task;\n+end Elab4_Pkg;"}, {"sha": "e8e5bab6c9a1b0a72975a5d3800bb395924332fa", "filename": "gcc/testsuite/gnat.dg/elab4_pkg.ads", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Ftestsuite%2Fgnat.dg%2Felab4_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162ed06fb32b64802db9909e27c447527dd759ee/gcc%2Ftestsuite%2Fgnat.dg%2Felab4_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Felab4_pkg.ads?ref=162ed06fb32b64802db9909e27c447527dd759ee", "patch": "@@ -0,0 +1,41 @@\n+package Elab4_Pkg is\n+   procedure ABE_Call;\n+\n+   generic\n+   package ABE_Gen is\n+      procedure Force_Body;\n+   end ABE_Gen;\n+\n+   task type ABE_Task;\n+\n+   --------------------------------------------------\n+   -- Call to call, instantiation, task activation --\n+   --------------------------------------------------\n+\n+   function Elaborator_1 return Boolean;\n+   function Elaborator_2 return Boolean;\n+\n+   procedure Suppressed_Call_1;\n+\n+   pragma Warnings (\"L\");\n+   procedure Suppressed_Call_2;\n+   pragma Warnings (\"l\");\n+\n+   -----------------------------------------------------------\n+   -- Instantiation to call, instantiation, task activation --\n+   -----------------------------------------------------------\n+\n+   function Elaborator_3 return Boolean;\n+\n+   generic\n+   package Suppressed_Generic is\n+      procedure Force_Body;\n+   end Suppressed_Generic;\n+\n+   -------------------------------------------------------------\n+   -- Task activation to call, instantiation, task activation --\n+   -------------------------------------------------------------\n+\n+   function Elaborator_4 return Boolean;\n+   task type Suppressed_Task;\n+end Elab4_Pkg;"}]}