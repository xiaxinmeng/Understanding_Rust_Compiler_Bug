{"sha": "0aa487d53420557a37388ac275a5855fcc5ae089", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFhNDg3ZDUzNDIwNTU3YTM3Mzg4YWMyNzVhNTg1NWZjYzVhZTA4OQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1999-08-18T22:35:14Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1999-08-18T22:35:14Z"}, "message": "loop.c (recombine_givs): Set ix field after sorting.\n\n\t* loop.c (recombine_givs): Set ix field after sorting.\n\t(recombine_givs): Remove bogus index / giv lockstep looping.\n\nFrom-SVN: r28757", "tree": {"sha": "c58186eb0b8fbc1638b6f89ceaa588cc5d592d5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c58186eb0b8fbc1638b6f89ceaa588cc5d592d5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0aa487d53420557a37388ac275a5855fcc5ae089", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aa487d53420557a37388ac275a5855fcc5ae089", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aa487d53420557a37388ac275a5855fcc5ae089", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aa487d53420557a37388ac275a5855fcc5ae089/comments", "author": null, "committer": null, "parents": [{"sha": "dfe2b0b3b51f0596fe3bd27a3adc8bf432babacd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfe2b0b3b51f0596fe3bd27a3adc8bf432babacd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfe2b0b3b51f0596fe3bd27a3adc8bf432babacd"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "d1ec3f57aecb861eb38d36d3dd23efe7d633dd57", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aa487d53420557a37388ac275a5855fcc5ae089/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aa487d53420557a37388ac275a5855fcc5ae089/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0aa487d53420557a37388ac275a5855fcc5ae089", "patch": "@@ -1,3 +1,8 @@\n+Wed Aug 18 23:31:57 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* loop.c (recombine_givs): Set ix field after sorting.\n+\t(recombine_givs): Remove bogus index / giv lockstep looping.\n+\n Wed Aug 18 18:20:40 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n \t* expmed.c (emit_store_flag): If UNSIGNEDP, call unsigned_condition"}, {"sha": "9c2ed73d4dfa5d7df2114802f78373a7a2f2dbc1", "filename": "gcc/loop.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aa487d53420557a37388ac275a5855fcc5ae089/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aa487d53420557a37388ac275a5855fcc5ae089/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=0aa487d53420557a37388ac275a5855fcc5ae089", "patch": "@@ -7218,16 +7218,18 @@ recombine_givs (bl, loop_start, loop_end, unroll_p)\n       for (p = v->insn; INSN_UID (p) >= max_uid_for_loop; )\n \tp = PREV_INSN (p);\n       stats[i].start_luid = INSN_LUID (p);\n-      v->ix = i;\n       i++;\n     }\n \n   qsort (stats, giv_count, sizeof(*stats), cmp_recombine_givs_stats);\n \n-  /* Do the actual most-recently-used recombination.  */\n+  /* Set up the ix field for each giv in stats to name\n+     the corresponding index into stats, and\n+     do the actual most-recently-used recombination.  */\n   for (last_giv = 0, i = giv_count - 1; i >= 0; i--)\n     {\n       v = giv_array[stats[i].giv_number];\n+      v->ix = i;\n       if (v->same)\n \t{\n \t  struct induction *old_same = v->same;\n@@ -7273,8 +7275,9 @@ recombine_givs (bl, loop_start, loop_end, unroll_p)\n   ends_need_computing = 0;\n   /* For each DEST_REG giv, compute lifetime starts, and try to compute\n      lifetime ends from regscan info.  */\n-  for (i = 0, v = bl->giv; v; v = v->next_iv)\n+  for (i = giv_count - 1; i >= 0; i--)\n     {\n+      v = giv_array[stats[i].giv_number];\n       if (v->ignore)\n \tcontinue;\n       if (v->giv_type == DEST_ADDR)\n@@ -7343,7 +7346,6 @@ recombine_givs (bl, loop_start, loop_end, unroll_p)\n \t\t}\n \t    }\n \t}\n-      i++;\n     }\n \n   /* If the regscan information was unconclusive for one or more DEST_REG\n@@ -7367,21 +7369,22 @@ recombine_givs (bl, loop_start, loop_end, unroll_p)\n \n   /* Set start_luid back to the last insn that sets the giv.  This allows\n      more combinations.  */\n-  for (i = 0, v = bl->giv; v; v = v->next_iv)\n+  for (i = giv_count - 1; i >= 0; i--)\n     {\n+      v = giv_array[stats[i].giv_number];\n       if (v->ignore)\n \tcontinue;\n       if (INSN_UID (v->insn) < max_uid_for_loop)\n \tstats[i].start_luid = INSN_LUID (v->insn);\n-      i++;\n     }\n \n   /* Now adjust lifetime ends by taking combined givs into account.  */\n-  for (i = 0, v = bl->giv; v; v = v->next_iv)\n+  for (i = giv_count - 1; i >= 0; i--)\n     {\n       unsigned luid;\n       int j;\n \n+      v = giv_array[stats[i].giv_number];\n       if (v->ignore)\n \tcontinue;\n       if (v->same && ! v->same->ignore)\n@@ -7393,7 +7396,6 @@ recombine_givs (bl, loop_start, loop_end, unroll_p)\n \t      > (unsigned) stats[j].end_luid - stats[j].start_luid)\n \t    stats[j].end_luid = luid;\n \t}\n-      i++;\n     }\n \n   qsort (stats, giv_count, sizeof(*stats), cmp_recombine_givs_stats);"}]}