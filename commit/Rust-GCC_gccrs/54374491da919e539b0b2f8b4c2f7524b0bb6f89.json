{"sha": "54374491da919e539b0b2f8b4c2f7524b0bb6f89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQzNzQ0OTFkYTkxOWU1MzliMGIyZjhiNGMyZjc1MjRiMGJiNmY4OQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2002-05-29T22:51:37Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2002-05-29T22:51:37Z"}, "message": "pa.h (ASM_OUTPUT_MI_THUNK): Move implementation into pa.c.\n\n        * pa.h (ASM_OUTPUT_MI_THUNK): Move implementation into pa.c.\n        * pa.c (pa_asm_output_mi_thunk): New function.\n        * pa-protos.h (pa_asm_output_mi_thunk): Declare.\n\nFrom-SVN: r54026", "tree": {"sha": "4bfaf7623b79cd4ad27d52bd8d22f52c24c7ca2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bfaf7623b79cd4ad27d52bd8d22f52c24c7ca2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54374491da919e539b0b2f8b4c2f7524b0bb6f89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54374491da919e539b0b2f8b4c2f7524b0bb6f89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54374491da919e539b0b2f8b4c2f7524b0bb6f89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54374491da919e539b0b2f8b4c2f7524b0bb6f89/comments", "author": null, "committer": null, "parents": [{"sha": "92c392e657cf0238be5bcbd7e021a893ecafbc29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92c392e657cf0238be5bcbd7e021a893ecafbc29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92c392e657cf0238be5bcbd7e021a893ecafbc29"}], "stats": {"total": 167, "additions": 93, "deletions": 74}, "files": [{"sha": "519983798b122878bbe052591aaa24bd06e30a87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54374491da919e539b0b2f8b4c2f7524b0bb6f89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54374491da919e539b0b2f8b4c2f7524b0bb6f89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54374491da919e539b0b2f8b4c2f7524b0bb6f89", "patch": "@@ -1,3 +1,9 @@\n+2002-05-29  Jeff Law <law@redhat.com>\n+\n+\t* pa.h (ASM_OUTPUT_MI_THUNK): Move implementation into pa.c.\n+\t* pa.c (pa_asm_output_mi_thunk): New function.\n+\t* pa-protos.h (pa_asm_output_mi_thunk): Declare.\n+\n 2002-05-29  Neil Booth  <neil@daikokuya.demon.co.uk>\n \t    Marek Michalkiewicz  <marekm@amelek.gda.pl>\n "}, {"sha": "b26b7b8fa7adde2d7f5cab81d0246f7823d218dd", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54374491da919e539b0b2f8b4c2f7524b0bb6f89/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54374491da919e539b0b2f8b4c2f7524b0bb6f89/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=54374491da919e539b0b2f8b4c2f7524b0bb6f89", "patch": "@@ -162,4 +162,6 @@ extern rtx function_arg PARAMS ((CUMULATIVE_ARGS *, enum machine_mode,\n extern int function_arg_partial_nregs PARAMS ((CUMULATIVE_ARGS *,\n \t\t\t\t\t       enum machine_mode,\n \t\t\t\t\t       tree, int));\n+\n+extern void pa_asm_output_mi_thunk PARAMS ((FILE *, tree, int, tree));\n #endif /* TREE_CODE */"}, {"sha": "67496011d252dab43ebb11075103c617c8084cc2", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54374491da919e539b0b2f8b4c2f7524b0bb6f89/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54374491da919e539b0b2f8b4c2f7524b0bb6f89/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=54374491da919e539b0b2f8b4c2f7524b0bb6f89", "patch": "@@ -6496,6 +6496,89 @@ is_function_label_plus_const (op)\n \t  && GET_CODE (XEXP (op, 1)) == CONST_INT);\n }\n \n+/* Output assembly code for a thunk to FUNCTION.  */\n+\n+void\n+pa_asm_output_mi_thunk (file, thunk_fndecl, delta, function)\n+     FILE *file;\n+     tree thunk_fndecl;\n+     int delta;\n+     tree function;\n+{\n+  const char *target_name = XSTR (XEXP (DECL_RTL (function), 0), 0);\n+  static unsigned int current_thunk_number;\n+  char label[16];\n+  char *lab;\n+  ASM_GENERATE_INTERNAL_LABEL (label, \"LTHN\", current_thunk_number);\n+  lab = (*targetm.strip_name_encoding) (label);\n+  target_name = (*targetm.strip_name_encoding) (target_name);\n+  /* FIXME: total_code_bytes is not handled correctly in files with\n+     mi thunks.  */\n+  pa_output_function_prologue (file, 0);\n+  if (VAL_14_BITS_P (delta))\n+    {\n+      if (! TARGET_64BIT && ! TARGET_PORTABLE_RUNTIME && flag_pic)\n+\t{\n+\t  fprintf (file, \"\\taddil LT%%%s,%%r19\\n\", lab);\n+\t  fprintf (file, \"\\tldw RT%%%s(%%r1),%%r22\\n\", lab);\n+\t  fprintf (file, \"\\tldw 0(%%sr0,%%r22),%%r22\\n\");\n+\t  fprintf (file, \"\\tbb,>=,n %%r22,30,.+16\\n\");\n+\t  fprintf (file, \"\\tdepi 0,31,2,%%r22\\n\");\n+\t  fprintf (file, \"\\tldw 4(%%sr0,%%r22),%%r19\\n\");\n+\t  fprintf (file, \"\\tldw 0(%%sr0,%%r22),%%r22\\n\");\n+\t  fprintf (file, \"\\tldsid (%%sr0,%%r22),%%r1\\n\\tmtsp %%r1,%%sr0\\n\");\n+\t  fprintf (file, \"\\tbe 0(%%sr0,%%r22)\\n\\tldo \");\n+\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC, delta);\n+\t  fprintf (file, \"(%%r26),%%r26\\n\");\n+\t}\n+      else\n+\t{\n+\t  fprintf (file, \"\\tb %s\\n\\tldo \", target_name);\n+\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC, delta);\n+\t  fprintf (file, \"(%%r26),%%r26\\n\");\n+\t}\n+    }\n+  else\n+    {\n+      if (! TARGET_64BIT && ! TARGET_PORTABLE_RUNTIME && flag_pic)\n+\t{\n+\t  fprintf (file, \"\\taddil L%%\");\n+\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC, delta);\n+\t  fprintf (file, \",%%r26\\n\\tldo R%%\");\n+\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC, delta);\n+\t  fprintf (file, \"(%%r1),%%r26\\n\");\n+\t  fprintf (file, \"\\taddil LT%%%s,%%r19\\n\", lab);\n+\t  fprintf (file, \"\\tldw RT%%%s(%%r1),%%r22\\n\", lab);\n+\t  fprintf (file, \"\\tldw 0(%%sr0,%%r22),%%r22\\n\");\n+\t  fprintf (file, \"\\tbb,>=,n %%r22,30,.+16\\n\");\n+\t  fprintf (file, \"\\tdepi 0,31,2,%%r22\\n\");\n+\t  fprintf (file, \"\\tldw 4(%%sr0,%%r22),%%r19\\n\");\n+\t  fprintf (file, \"\\tldw 0(%%sr0,%%r22),%%r22\\n\");\n+\t  fprintf (file, \"\\tldsid (%%sr0,%%r22),%%r1\\n\\tmtsp %%r1,%%sr0\\n\");\n+\t  fprintf (file, \"\\tbe,n 0(%%sr0,%%r22)\\n\");\n+\t}\n+      else\n+\t{\n+\t  fprintf (file, \"\\taddil L%%\");\n+\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC, delta);\n+\t  fprintf (file, \",%%r26\\n\\tb %s\\n\\tldo R%%\", target_name);\n+\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC, delta);\n+\t  fprintf (file, \"(%%r1),%%r26\\n\");\n+\t}\n+    }\n+    \n+  fprintf (file, \"\\t.EXIT\\n\\t.PROCEND\\n\");\n+  if (! TARGET_64BIT && ! TARGET_PORTABLE_RUNTIME && flag_pic)\n+    {\n+      data_section ();\n+      fprintf (file, \"\\t.align 4\\n\");\n+      ASM_OUTPUT_INTERNAL_LABEL (file, \"LTHN\", current_thunk_number);\n+      fprintf (file, \"\\t.word P%%%s\\n\", target_name);\n+      function_section (thunk_fndecl);\n+    }\n+  current_thunk_number++;\n+}\n+\n /* Returns 1 if the 6 operands specified in OPERANDS are suitable for\n    use in fmpyadd instructions.  */\n int"}, {"sha": "accc4c1e2320775222d7924bd63aae0f70d550a8", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 2, "deletions": 74, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54374491da919e539b0b2f8b4c2f7524b0bb6f89/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54374491da919e539b0b2f8b4c2f7524b0bb6f89/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=54374491da919e539b0b2f8b4c2f7524b0bb6f89", "patch": "@@ -864,80 +864,8 @@ struct hppa_args {int words, nargs_prototype, indirect; };\n extern struct rtx_def *hppa_compare_op0, *hppa_compare_op1;\n extern enum cmp_type hppa_branch_type;\n \n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)\t     \\\n-do {\t\t\t\t\t\t\t\t\t     \\\n-  const char *target_name = XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0);\t     \\\n-  static unsigned int current_thunk_number;\t\t\t\t     \\\n-  char label[16];\t\t\t\t\t\t\t     \\\n-  char *lab;\t\t\t\t\t\t\t\t     \\\n-  ASM_GENERATE_INTERNAL_LABEL (label, \"LTHN\", current_thunk_number);\t     \\\n-  lab = (*targetm.strip_name_encoding) (label);\t\t\t\t     \\\n-  target_name = (*targetm.strip_name_encoding) (target_name);\t\t     \\\n-  /* FIXME: total_code_bytes is not handled correctly in files with\t     \\\n-     mi thunks.  */\t\t\t\t\t\t\t     \\\n-  pa_output_function_prologue (FILE, 0);\t\t\t\t     \\\n-  if (VAL_14_BITS_P (DELTA))\t\t\t\t\t\t     \\\n-    {\t\t\t\t\t\t\t\t\t     \\\n-      if (! TARGET_64BIT && ! TARGET_PORTABLE_RUNTIME && flag_pic)\t     \\\n-\t{\t\t\t\t\t\t\t\t     \\\n-\t  fprintf (FILE, \"\\taddil LT%%%s,%%r19\\n\", lab);\t\t     \\\n-\t  fprintf (FILE, \"\\tldw RT%%%s(%%r1),%%r22\\n\", lab);\t\t     \\\n-\t  fprintf (FILE, \"\\tldw 0(%%sr0,%%r22),%%r22\\n\");\t\t     \\\n-\t  fprintf (FILE, \"\\tbb,>=,n %%r22,30,.+16\\n\");\t\t\t     \\\n-\t  fprintf (FILE, \"\\tdepi 0,31,2,%%r22\\n\");\t\t\t     \\\n-\t  fprintf (FILE, \"\\tldw 4(%%sr0,%%r22),%%r19\\n\");\t\t     \\\n-\t  fprintf (FILE, \"\\tldw 0(%%sr0,%%r22),%%r22\\n\");\t\t     \\\n-\t  fprintf (FILE, \"\\tldsid (%%sr0,%%r22),%%r1\\n\\tmtsp %%r1,%%sr0\\n\"); \\\n-\t  fprintf (FILE, \"\\tbe 0(%%sr0,%%r22)\\n\\tldo \");\t\t     \\\n-\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, DELTA);\t\t     \\\n-\t  fprintf (FILE, \"(%%r26),%%r26\\n\");\t\t\t\t     \\\n-\t}\t\t\t\t\t\t\t\t     \\\n-      else\t\t\t\t\t\t\t\t     \\\n-\t{\t\t\t\t\t\t\t\t     \\\n-\t  fprintf (FILE, \"\\tb %s\\n\\tldo \", target_name);\t\t     \\\n-\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, DELTA);\t\t     \\\n-\t  fprintf (FILE, \"(%%r26),%%r26\\n\");\t\t\t\t     \\\n-\t}\t\t\t\t\t\t\t\t     \\\n-    }\t\t\t\t\t\t\t\t\t     \\\n-  else\t\t\t\t\t\t\t\t\t     \\\n-    {\t\t\t\t\t\t\t\t\t     \\\n-      if (! TARGET_64BIT && ! TARGET_PORTABLE_RUNTIME && flag_pic)\t     \\\n-\t{\t\t\t\t\t\t\t\t     \\\n-\t  fprintf (FILE, \"\\taddil L%%\");\t\t\t\t     \\\n-\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, DELTA);\t\t     \\\n-\t  fprintf (FILE, \",%%r26\\n\\tldo R%%\");\t\t\t\t     \\\n-\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, DELTA);\t\t     \\\n-\t  fprintf (FILE, \"(%%r1),%%r26\\n\");\t\t\t\t     \\\n-\t  fprintf (FILE, \"\\taddil LT%%%s,%%r19\\n\", lab);\t\t     \\\n-\t  fprintf (FILE, \"\\tldw RT%%%s(%%r1),%%r22\\n\", lab);\t\t     \\\n-\t  fprintf (FILE, \"\\tldw 0(%%sr0,%%r22),%%r22\\n\");\t\t     \\\n-\t  fprintf (FILE, \"\\tbb,>=,n %%r22,30,.+16\\n\");\t\t\t     \\\n-\t  fprintf (FILE, \"\\tdepi 0,31,2,%%r22\\n\");\t\t\t     \\\n-\t  fprintf (FILE, \"\\tldw 4(%%sr0,%%r22),%%r19\\n\");\t\t     \\\n-\t  fprintf (FILE, \"\\tldw 0(%%sr0,%%r22),%%r22\\n\");\t\t     \\\n-\t  fprintf (FILE, \"\\tldsid (%%sr0,%%r22),%%r1\\n\\tmtsp %%r1,%%sr0\\n\"); \\\n-\t  fprintf (FILE, \"\\tbe,n 0(%%sr0,%%r22)\\n\");\t\t\t     \\\n-\t}\t\t\t\t\t\t\t\t     \\\n-      else\t\t\t\t\t\t\t\t     \\\n-\t{\t\t\t\t\t\t\t\t     \\\n-\t  fprintf (FILE, \"\\taddil L%%\");\t\t\t\t     \\\n-\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, DELTA);\t\t     \\\n-\t  fprintf (FILE, \",%%r26\\n\\tb %s\\n\\tldo R%%\", target_name);\t     \\\n-\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, DELTA);\t\t     \\\n-\t  fprintf (FILE, \"(%%r1),%%r26\\n\");\t\t\t\t     \\\n-\t}\t\t\t\t\t\t\t\t     \\\n-    }\t\t\t\t\t\t\t\t\t     \\\n-  fprintf (FILE, \"\\t.EXIT\\n\\t.PROCEND\\n\");\t\t\t\t     \\\n-  if (! TARGET_64BIT && ! TARGET_PORTABLE_RUNTIME && flag_pic)\t\t     \\\n-    {\t\t\t\t\t\t\t\t\t     \\\n-      data_section ();\t\t\t\t\t\t\t     \\\n-      fprintf (FILE, \"\\t.align 4\\n\");\t\t\t\t\t     \\\n-      ASM_OUTPUT_INTERNAL_LABEL (FILE, \"LTHN\", current_thunk_number);\t     \\\n-      fprintf (FILE, \"\\t.word P%%%s\\n\", target_name);\t\t\t     \\\n-      function_section (THUNK_FNDECL);\t\t\t\t\t     \\\n-    }\t\t\t\t\t\t\t\t\t     \\\n-  current_thunk_number++;\t\t\t\t\t\t     \\\n-} while (0)\n+#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION) \\\n+  pa_asm_output_mi_thunk (FILE, THUNK_FNDECL, DELTA, FUNCTION);\n \n /* On HPPA, we emit profiling code as rtl via PROFILE_HOOK rather than\n    as assembly via FUNCTION_PROFILER.  Just output a local label."}]}