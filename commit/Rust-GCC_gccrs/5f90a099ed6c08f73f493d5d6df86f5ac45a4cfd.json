{"sha": "5f90a099ed6c08f73f493d5d6df86f5ac45a4cfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY5MGEwOTllZDZjMDhmNzNmNDkzZDVkNmRmODZmNWFjNDVhNGNmZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-05-18T22:26:33Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-05-18T22:26:33Z"}, "message": "i386.md (movsi/movdi): Fix template.\n\n\n\t* i386.md (movsi/movdi): Fix template.\n\t(sse2 patterns): Set attributes consistently.\n\n\t* i386.md (pushqi2, ashrqi_*): Fix constraint.\n\nFrom-SVN: r53598", "tree": {"sha": "07137bc6a8d3da74e9fe1de9d7d343fcc042e536", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07137bc6a8d3da74e9fe1de9d7d343fcc042e536"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f90a099ed6c08f73f493d5d6df86f5ac45a4cfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f90a099ed6c08f73f493d5d6df86f5ac45a4cfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f90a099ed6c08f73f493d5d6df86f5ac45a4cfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f90a099ed6c08f73f493d5d6df86f5ac45a4cfd/comments", "author": null, "committer": null, "parents": [{"sha": "6835a09cfcbfe46a57fa503ca07d5b9f43551a0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6835a09cfcbfe46a57fa503ca07d5b9f43551a0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6835a09cfcbfe46a57fa503ca07d5b9f43551a0e"}], "stats": {"total": 60, "additions": 40, "deletions": 20}, "files": [{"sha": "4e0c1efb748b5c4f31f8d4460fd5f539bbd4434d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f90a099ed6c08f73f493d5d6df86f5ac45a4cfd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f90a099ed6c08f73f493d5d6df86f5ac45a4cfd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f90a099ed6c08f73f493d5d6df86f5ac45a4cfd", "patch": "@@ -1,3 +1,10 @@\n+Sun May 19 00:24:23 CEST 2002  Jan HUbicka  <jh@suse.cz>\n+\n+\t* i386.md (movsi/movdi): Fix template.\n+\t(sse2 patterns): Set attributes consistently.\n+\n+\t* i386.md (pushqi2, ashrqi_*): Fix constraint.\n+\n 2002-05-18  Toon Moene  <toon@moene.indiv.nluug.nl>\n \n \t* optabs.c (complex_part_zero_p): New."}, {"sha": "9fdff5ccc32ea090dc0bd2b34a6d493067925d06", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 33, "deletions": 20, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f90a099ed6c08f73f493d5d6df86f5ac45a4cfd/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f90a099ed6c08f73f493d5d6df86f5ac45a4cfd/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=5f90a099ed6c08f73f493d5d6df86f5ac45a4cfd", "patch": "@@ -1092,12 +1092,12 @@\n {\n   switch (get_attr_type (insn))\n     {\n-    case TYPE_SSE:\n+    case TYPE_SSEMOV:\n       if (get_attr_mode (insn) == TImode)\n         return \"movdqa\\t{%1, %0|%0, %1}\";\n       return \"movd\\t{%1, %0|%0, %1}\";\n \n-    case TYPE_MMX:\n+    case TYPE_MMXMOV:\n       if (get_attr_mode (insn) == DImode)\n \treturn \"movq\\t{%1, %0|%0, %1}\";\n       return \"movd\\t{%1, %0|%0, %1}\";\n@@ -1361,7 +1361,7 @@\n ;; For 64BIT abi we always round up to 8 bytes.\n (define_insn \"*pushqi2_rex64\"\n   [(set (match_operand:QI 0 \"push_operand\" \"=X\")\n-\t(match_operand:QI 1 \"nonmemory_no_elim_operand\" \"ri\"))]\n+\t(match_operand:QI 1 \"nonmemory_no_elim_operand\" \"qi\"))]\n   \"TARGET_64BIT\"\n   \"push{q}\\t%q1\"\n   [(set_attr \"type\" \"push\")\n@@ -1860,12 +1860,12 @@\n {\n   switch (get_attr_type (insn))\n     {\n-    case TYPE_SSE:\n+    case TYPE_SSEMOV:\n       if (register_operand (operands[0], DImode)\n \t  && register_operand (operands[1], DImode))\n \t  return \"movdqa\\t{%1, %0|%0, %1}\";\n       /* FALLTHRU */\n-    case TYPE_MMX:\n+    case TYPE_MMXMOV:\n       return \"movq\\t{%1, %0|%0, %1}\";\n     case TYPE_MULTI:\n       return \"#\";\n@@ -11184,7 +11184,7 @@\n \t  (ashiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"const_int_1_operand\" \"I\"))\n \t  (const_int 0)))\n-   (set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n+   (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(ashiftrt:QI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n    && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\n@@ -11205,7 +11205,7 @@\n \t  (ashiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"immediate_operand\" \"I\"))\n \t  (const_int 0)))\n-   (set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n+   (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(ashiftrt:QI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n@@ -18026,7 +18026,8 @@\n   \"TARGET_SSE2\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"pand\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sse\")])\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*sse_nandti3_df\"\n   [(set (subreg:TI (match_operand:DF 0 \"register_operand\" \"=Y\") 0)\n@@ -18061,7 +18062,8 @@\n \t\t(match_operand:TI 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_SSE2\"\n   \"pandn\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sselog\")])\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse2_nandv2di3\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n@@ -18070,7 +18072,8 @@\n   \"TARGET_SSE2\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"pandn\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sse\")])\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*sse_iorti3_df_1\"\n   [(set (subreg:TI (match_operand:DF 0 \"register_operand\" \"=Y\") 0)\n@@ -18135,7 +18138,8 @@\n   \"TARGET_SSE2\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"por\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sse\")])\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*sse_xorti3_df_1\"\n   [(set (subreg:TI (match_operand:DF 0 \"register_operand\" \"=Y\") 0)\n@@ -18200,7 +18204,8 @@\n   \"TARGET_SSE2\n    && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"pxor\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sse\")])\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"mode\" \"TI\")])\n \n ;; Use xor, but don't show input operands so they aren't live before\n ;; this insn.\n@@ -20602,63 +20607,71 @@\n \t\t     (match_operand:SI 2 \"nonmemory_operand\" \"ri\")))]\n   \"TARGET_SSE2\"\n   \"pslld\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sse\")])\n+  [(set_attr \"type\" \"sseishft\")\n+   (set_attr \"mode\" \"TI\")])\n \n (define_insn \"ashlv2di3\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n         (ashift:V2DI (match_operand:V2DI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:SI 2 \"nonmemory_operand\" \"ri\")))]\n   \"TARGET_SSE2\"\n   \"psllq\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sse\")])\n+  [(set_attr \"type\" \"sseishft\")\n+   (set_attr \"mode\" \"TI\")])\n \n (define_insn \"ashrv8hi3_ti\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n         (ashiftrt:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n \t\t       (subreg:TI (match_operand:V2DI 2 \"nonmemory_operand\" \"xi\") 0)))]\n   \"TARGET_SSE2\"\n   \"psraw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sse\")])\n+  [(set_attr \"type\" \"sseishft\")\n+   (set_attr \"mode\" \"TI\")])\n \n (define_insn \"ashrv4si3_ti\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n         (ashiftrt:V4SI (match_operand:V4SI 1 \"register_operand\" \"0\")\n \t\t       (subreg:TI (match_operand:V2DI 2 \"nonmemory_operand\" \"xi\") 0)))]\n   \"TARGET_SSE2\"\n   \"psrad\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sse\")])\n+  [(set_attr \"type\" \"sseishft\")\n+   (set_attr \"mode\" \"TI\")])\n \n (define_insn \"lshrv8hi3_ti\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n         (lshiftrt:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n \t\t       (subreg:TI (match_operand:V2DI 2 \"nonmemory_operand\" \"xi\") 0)))]\n   \"TARGET_SSE2\"\n   \"psrlw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sse\")])\n+  [(set_attr \"type\" \"sseishft\")\n+   (set_attr \"mode\" \"TI\")])\n \n (define_insn \"lshrv4si3_ti\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n         (lshiftrt:V4SI (match_operand:V4SI 1 \"register_operand\" \"0\")\n \t\t       (subreg:TI (match_operand:V2DI 2 \"nonmemory_operand\" \"xi\") 0)))]\n   \"TARGET_SSE2\"\n   \"psrld\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sse\")])\n+  [(set_attr \"type\" \"sseishft\")\n+   (set_attr \"mode\" \"TI\")])\n \n (define_insn \"lshrv2di3_ti\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n         (lshiftrt:V2DI (match_operand:V2DI 1 \"register_operand\" \"0\")\n \t\t       (subreg:TI (match_operand:V2DI 2 \"nonmemory_operand\" \"xi\") 0)))]\n   \"TARGET_SSE2\"\n   \"psrlq\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sse\")])\n+  [(set_attr \"type\" \"sseishft\")\n+   (set_attr \"mode\" \"TI\")])\n \n (define_insn \"ashlv8hi3_ti\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n         (ashift:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n \t\t     (subreg:TI (match_operand:V2DI 2 \"nonmemory_operand\" \"xi\") 0)))]\n   \"TARGET_SSE2\"\n   \"psllw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sse\")])\n+  [(set_attr \"type\" \"sseishft\")\n+   (set_attr \"mode\" \"TI\")])\n \n (define_insn \"ashlv4si3_ti\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")"}]}