{"sha": "0cbd39801459319899e08e930f5257c2ced61ddb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNiZDM5ODAxNDU5MzE5ODk5ZTA4ZTkzMGY1MjU3YzJjZWQ2MWRkYg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2001-02-20T18:05:57Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-02-20T18:05:57Z"}, "message": "ThreadGroup.java (activeCount): Only include threads which are alive.\n\n\t* java/lang/ThreadGroup.java (activeCount): Only include threads\n\twhich are alive.\n\t(enumerate): Likewise.\n\nFrom-SVN: r39922", "tree": {"sha": "eba0bc024ffe0227ffefba9daef7d35c9c8f9ae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eba0bc024ffe0227ffefba9daef7d35c9c8f9ae0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cbd39801459319899e08e930f5257c2ced61ddb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cbd39801459319899e08e930f5257c2ced61ddb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cbd39801459319899e08e930f5257c2ced61ddb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cbd39801459319899e08e930f5257c2ced61ddb/comments", "author": null, "committer": null, "parents": [{"sha": "20636516030126a3cbaca6ecfeb16dfdc2743b01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20636516030126a3cbaca6ecfeb16dfdc2743b01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20636516030126a3cbaca6ecfeb16dfdc2743b01"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "f179ab0e81c4ee74d7c527d69eba53620eae994b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cbd39801459319899e08e930f5257c2ced61ddb/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cbd39801459319899e08e930f5257c2ced61ddb/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=0cbd39801459319899e08e930f5257c2ced61ddb", "patch": "@@ -1,3 +1,9 @@\n+2001-02-16  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* java/lang/ThreadGroup.java (activeCount): Only include threads\n+\twhich are alive.\n+\t(enumerate): Likewise.\n+\n 2001-02-19  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t* java/lang/Integer.java (getInteger): Return default argument if"}, {"sha": "e8b444682bb213aa09b7b04d7bbb1e11b14837b5", "filename": "libjava/java/lang/ThreadGroup.java", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cbd39801459319899e08e930f5257c2ced61ddb/libjava%2Fjava%2Flang%2FThreadGroup.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cbd39801459319899e08e930f5257c2ced61ddb/libjava%2Fjava%2Flang%2FThreadGroup.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThreadGroup.java?ref=0cbd39801459319899e08e930f5257c2ced61ddb", "patch": "@@ -1,5 +1,5 @@\n /* java.lang.ThreadGroup\n-   Copyright (C) 1998, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -204,16 +204,21 @@ public final boolean parentOf(ThreadGroup tg)\n     * @return the number of active threads in this ThreadGroup and\n     *\t      its descendants.\n     * @specnote it isn't clear what the definition of an \"Active\" thread is.\n-    *           Current JDKs regard all threads as active until they are \n-    *           finished, regardless of whether the thread has been started \n-    *           or not. We implement this behaviour.\n-    *           There is open JDC bug, <A HREF=\"http://developer.java.sun.com/developer/bugParade/bugs/4089701.html\">\n+    *           Current JDKs regard a thread as active if has been\n+    *           started and not finished.  We implement this behaviour.\n+    *           There is a JDC bug, <A HREF=\"http://developer.java.sun.com/developer/bugParade/bugs/4089701.html\">\n     *           4089701</A>, regarding this issue.\n     *           \n     */\n   public synchronized int activeCount()\n   {\n-    int total = threads.size();\n+    int total = 0;\n+    for (int i = 0; i < threads.size(); ++i)\n+      {\n+\tif (((Thread) threads.elementAt(i)).isAlive ())\n+\t  ++total;\n+      }\n+\n     for (int i=0; i < groups.size(); i++)\n       {\n         ThreadGroup g = (ThreadGroup) groups.elementAt(i);\n@@ -274,7 +279,11 @@ private synchronized int enumerate(Thread[] list, int next_index,\n   {\n     Enumeration e = threads.elements();\n     while (e.hasMoreElements() && next_index < list.length)\n-      list[next_index++] = (Thread) e.nextElement();\n+      {\n+\tThread t = (Thread) e.nextElement();\n+\tif (t.isAlive ())\n+\t  list[next_index++] = t;\n+      }\n     if (recurse && next_index != list.length)\n       {\n \te = groups.elements();"}]}