{"sha": "a24f7c1a34b87d209cd23821d93d9d295fac6546", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI0ZjdjMWEzNGI4N2QyMDljZDIzODIxZDkzZDlkMjk1ZmFjNjU0Ng==", "commit": {"author": {"name": "Jason Thorpe", "email": "thorpej@wasabisystems.com", "date": "2002-09-15T19:15:28Z"}, "committer": {"name": "Jason Thorpe", "email": "thorpej@gcc.gnu.org", "date": "2002-09-15T19:15:28Z"}, "message": "netbsd.h (TARGET_OS_CPP_BUILTINS): Add MIPS ABI CPP macros.\n\n* config/mips/netbsd.h (TARGET_OS_CPP_BUILTINS): Add\nMIPS ABI CPP macros.\n(TARGET_CPU_CPP_BUILTINS): Redefine.\n(SUBTARGET_EXTRA_SPECS): Remove subtarget_endian_default.\n(SUBTARGET_ENDIAN_DEFAULT_SPEC): Remove.\n\nFrom-SVN: r57171", "tree": {"sha": "08c7eefcb309144565289f49797438d2193545b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08c7eefcb309144565289f49797438d2193545b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a24f7c1a34b87d209cd23821d93d9d295fac6546", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a24f7c1a34b87d209cd23821d93d9d295fac6546", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a24f7c1a34b87d209cd23821d93d9d295fac6546", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a24f7c1a34b87d209cd23821d93d9d295fac6546/comments", "author": null, "committer": null, "parents": [{"sha": "bd25febf656966bde303c4b35e591c4b6ba73481", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd25febf656966bde303c4b35e591c4b6ba73481", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd25febf656966bde303c4b35e591c4b6ba73481"}], "stats": {"total": 87, "additions": 80, "deletions": 7}, "files": [{"sha": "a379167e47e8451c4be8779fe58628472753fa4b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a24f7c1a34b87d209cd23821d93d9d295fac6546/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a24f7c1a34b87d209cd23821d93d9d295fac6546/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a24f7c1a34b87d209cd23821d93d9d295fac6546", "patch": "@@ -1,3 +1,11 @@\n+2002-09-15  Jason Thorpe  <thorpej@wasabisystems.com>\n+\n+\t* config/mips/netbsd.h (TARGET_OS_CPP_BUILTINS): Add\n+\tMIPS ABI CPP macros.\n+\t(TARGET_CPU_CPP_BUILTINS): Redefine.\n+\t(SUBTARGET_EXTRA_SPECS): Remove subtarget_endian_default.\n+\t(SUBTARGET_ENDIAN_DEFAULT_SPEC): Remove.\n+\n 2002-09-15  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* ia64/aix.h (TARGET_OS_CPP_BUILTINS): Fix typo."}, {"sha": "fa6291dd9eca87e6f1d53c643e0b956b99bd5c12", "filename": "gcc/config/mips/netbsd.h", "status": "modified", "additions": 72, "deletions": 7, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a24f7c1a34b87d209cd23821d93d9d295fac6546/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a24f7c1a34b87d209cd23821d93d9d295fac6546/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fnetbsd.h?ref=a24f7c1a34b87d209cd23821d93d9d295fac6546", "patch": "@@ -38,9 +38,81 @@ Boston, MA 02111-1307, USA.  */\n       builtin_assert (\"machine=mips\");\t\t\t\\\n       if (TARGET_LONG64)\t\t\t\t\\\n \tbuiltin_define (\"__LONG64\");\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+      if (mips_abi == ABI_EABI)\t\t\t\t\\\n+\tbuiltin_define (\"__mips_eabi\");\t\t\t\\\n+      else if (mips_abi == ABI_N32)\t\t\t\\\n+\tbuiltin_define (\"__mips_n32\");\t\t\t\\\n+      else if (mips_abi == ABI_64)\t\t\t\\\n+\tbuiltin_define (\"__mips_n64\");\t\t\t\\\n+      else if (mips_abi == ABI_O64)\t\t\t\\\n+\tbuiltin_define (\"__mips_o64\");\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n+/* The generic MIPS TARGET_CPU_CPP_BUILTINS are incorrect for NetBSD.\n+   Specifically, they define too many namespace-invasive macros.  Override\n+   them here.  Note this is structured for easy comparison to the version\n+   in mips.h.\n+\n+   FIXME: This probably isn't the best solution.  But in the absense\n+   of something better, it will have to do, for now.  */\n+\n+#undef TARGET_CPU_CPP_BUILTINS\n+#define TARGET_CPU_CPP_BUILTINS()\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      builtin_assert (\"cpu=mips\");\t\t\t\t\\\n+      builtin_define (\"__mips__\");\t\t\t\t\\\n+      builtin_define (\"_mips\");\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      /* No _R3000 or _R4000.  */\t\t\t\t\\\n+      if (TARGET_64BIT)\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__mips64\");\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      if (TARGET_FLOAT64)\t\t\t\t\t\\\n+\tbuiltin_define (\"__mips_fpr=64\");\t\t\t\\\n+      else\t\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__mips_fpr=32\");\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      if (TARGET_MIPS16)\t\t\t\t\t\\\n+\tbuiltin_define (\"__mips16\");\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      MIPS_CPP_SET_PROCESSOR (\"_MIPS_ARCH\", mips_arch_info);\t\\\n+      MIPS_CPP_SET_PROCESSOR (\"_MIPS_TUNE\", mips_tune_info);\t\\\n+\t\t\t\t\t\t\t\t\\\n+      if (ISA_MIPS1)\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__mips=1\");\t\t\t\t\\\n+      else if (ISA_MIPS2)\t\t\t\t\t\\\n+\tbuiltin_define (\"__mips=2\");\t\t\t\t\\\n+      else if (ISA_MIPS3)\t\t\t\t\t\\\n+\tbuiltin_define (\"__mips=3\");\t\t\t\t\\\n+      else if (ISA_MIPS4)\t\t\t\t\t\\\n+\tbuiltin_define (\"__mips=4\");\t\t\t\t\\\n+      else if (ISA_MIPS32)\t\t\t\t\t\\\n+\tbuiltin_define (\"__mips=32\");\t\t\t\t\\\n+      else if (ISA_MIPS64)\t\t\t\t\t\\\n+\tbuiltin_define (\"__mips=64\");\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      if (TARGET_HARD_FLOAT)\t\t\t\t\t\\\n+\tbuiltin_define (\"__mips_hard_float\");\t\t\t\\\n+      else if (TARGET_SOFT_FLOAT)\t\t\t\t\\\n+\tbuiltin_define (\"__mips_soft_float\");\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      if (TARGET_SINGLE_FLOAT)\t\t\t\t\t\\\n+\tbuiltin_define (\"__mips_single_float\");\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      if (TARGET_BIG_ENDIAN)\t\t\t\t\t\\\n+\tbuiltin_define (\"__MIPSEB__\");\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__MIPSEL__\");\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      /* No language dialect defines.  */\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      /* ABIs handled in TARGET_OS_CPP_BUILTINS.  */\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n \n /* Include the generic MIPS ELF configuration.  */\n #include <mips/elf.h>\n@@ -60,17 +132,10 @@ Boston, MA 02111-1307, USA.  */\n /* Extra specs we need.  */\n #undef SUBTARGET_EXTRA_SPECS\n #define SUBTARGET_EXTRA_SPECS\t\t\t\t\t\t\\\n-  { \"subtarget_endian_default\",\tSUBTARGET_ENDIAN_DEFAULT_SPEC },\t\\\n   { \"netbsd_cpp_spec\",\t\tNETBSD_CPP_SPEC },\t\t\t\\\n   { \"netbsd_link_spec\",\t\tNETBSD_LINK_SPEC_ELF },\t\t\t\\\n   { \"netbsd_entry_point\",\tNETBSD_ENTRY_POINT },\n \n-#if TARGET_ENDIAN_DEFAULT != 0\n-#define SUBTARGET_ENDIAN_DEFAULT_SPEC \"-D__MIPSEB__\"\n-#else\n-#define SUBTARGET_ENDIAN_DEFAULT_SPEC \"-D__MIPSEL__\"\n-#endif\n-\n /* Provide a SUBTARGET_CPP_SPEC appropriate for NetBSD.  */\n \n #undef SUBTARGET_CPP_SPEC"}]}