{"sha": "2ef98fb9eb4a4174cabacdc4c578e040cd37b1a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVmOThmYjllYjRhNDE3NGNhYmFjZGM0YzU3OGUwNDBjZDM3YjFhOQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2015-10-06T13:42:33Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2015-10-06T13:42:33Z"}, "message": "rl78.c (rl78_rtx_costs): Improve cost estimates for multiplication.\n\n\t* config/rl78/rl78.c (rl78_rtx_costs): Improve cost estimates for\n\tmultiplication.\n\nFrom-SVN: r228521", "tree": {"sha": "128f99d16ab4010da69287a2724b25f2f03125c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/128f99d16ab4010da69287a2724b25f2f03125c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ef98fb9eb4a4174cabacdc4c578e040cd37b1a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ef98fb9eb4a4174cabacdc4c578e040cd37b1a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ef98fb9eb4a4174cabacdc4c578e040cd37b1a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ef98fb9eb4a4174cabacdc4c578e040cd37b1a9/comments", "author": null, "committer": null, "parents": [{"sha": "9ce29eb05de83246802a03873ae1a6aaeae8e598", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ce29eb05de83246802a03873ae1a6aaeae8e598", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ce29eb05de83246802a03873ae1a6aaeae8e598"}], "stats": {"total": 41, "additions": 35, "deletions": 6}, "files": [{"sha": "8ec89e37b013bf425ac1c934cf1bfcc020e23362", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef98fb9eb4a4174cabacdc4c578e040cd37b1a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef98fb9eb4a4174cabacdc4c578e040cd37b1a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ef98fb9eb4a4174cabacdc4c578e040cd37b1a9", "patch": "@@ -1,12 +1,17 @@\n+2015-10-06  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/rl78/rl78.c (rl78_rtx_costs): Improve cost estimates for\n+\tmultiplication.\n+\n 2015-10-06  Venkataramanan Kumar  <Venkataramanan.kumar@amd.com>\n \n \t* config.gcc (i[34567]86-*-linux* | ...): Add znver1.\n \t(case ${target}): Add znver1.\n \t* config/i386/cpuid.h(bit_CLZERO):  Define.\n \t* config/i386/driver-i386.c: (host_detect_local_cpu): Let\n-\t-march=native recognize znver1 processors. \n+\t-march=native recognize znver1 processors.\n \t* config/i386/i386-c.c (ix86_target_macros_internal): Add\n-\tznver1, clzero def_and_undef. \n+\tznver1, clzero def_and_undef.\n \t* config/i386/i386.c (struct processor_costs znver1_cost): New.\n \t(m_znver1): New definition.\n \t(m_AMD_MULTIPLE): Includes m_znver1.\n@@ -17,10 +22,10 @@\n \t(PTA_CLZERO) :  New definition.\n \t(ix86_option_override_internal): Handle new clzerooption.\n \t(ix86_issue_rate): Add znver1.\n-\t(ix86_adjust_cost): Add znver1.                \n+\t(ix86_adjust_cost): Add znver1.\n \t(ia32_multipass_dfa_lookahead): Add znver1.\n-\t(has_dispatch): Add znver1.       \n-\t* config/i386/i386.h (TARGET_znver1): New definition. \n+\t(has_dispatch): Add znver1.\n+\t* config/i386/i386.h (TARGET_znver1): New definition.\n \t(TARGET_CLZERO): Define.\n \t(TARGET_CLZERO_P): Define.\n \t(struct ix86_size_cost): Add TARGET_ZNVER1."}, {"sha": "436768295357661c1e4830198cb6c9db957e864e", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef98fb9eb4a4174cabacdc4c578e040cd37b1a9/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef98fb9eb4a4174cabacdc4c578e040cd37b1a9/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=2ef98fb9eb4a4174cabacdc4c578e040cd37b1a9", "patch": "@@ -4165,21 +4165,42 @@ rl78_rtx_costs (rtx          x,\n       return true;\n     }\n \n+  if (mode == HImode)\n+    {\n+      if (code == MULT && ! speed)\n+\t{\n+\t  * total = COSTS_N_INSNS (8);\n+\t  return true;\n+\t}\n+      return false;\n+    }\n+\n   if (mode == SImode)\n     {\n       switch (code)\n \t{\n \tcase MULT:\n-\t  if (RL78_MUL_G14)\n+\t  if (! speed)\n+\t    /* If we are compiling for space then we do not want to use the\n+\t       inline SImode multiplication patterns or shift sequences.\n+\t       The cost is not set to 1 or 5 however as we have to allow for\n+\t       the possibility that we might be converting a leaf function\n+\t       into a non-leaf function.  (There is no way to tell here).\n+\t       A value of 13 seems to be a reasonable compromise for the\n+\t       moment.  */\n+\t    * total = COSTS_N_INSNS (13);\n+\t  else if (RL78_MUL_G14)\n \t    *total = COSTS_N_INSNS (14);\n \t  else if (RL78_MUL_G13)\n \t    *total = COSTS_N_INSNS (29);\n \t  else\n \t    *total = COSTS_N_INSNS (500);\n \t  return true;\n+\n \tcase PLUS:\n \t  *total = COSTS_N_INSNS (8);\n \t  return true;\n+\n \tcase ASHIFT:\n \tcase ASHIFTRT:\n \tcase LSHIFTRT:\n@@ -4205,6 +4226,9 @@ rl78_rtx_costs (rtx          x,\n \t  else\n \t    *total = COSTS_N_INSNS (10+4*16);\n \t  return true;\n+\n+\tdefault:\n+\t  break;\n \t}\n     }\n   return false;"}]}