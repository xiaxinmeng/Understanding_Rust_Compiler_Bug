{"sha": "e2fe73f62b7239432b44fabe5f60a019e60c82c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJmZTczZjYyYjcyMzk0MzJiNDRmYWJlNWY2MGEwMTllNjBjODJjMw==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2005-07-21T19:36:50Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2005-07-21T19:36:50Z"}, "message": "re PR middle-end/21180 (checking on fold no longer happens in some cases)\n\n2005-07-21  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR middle-end/21180\n        * fold-const.c (fold_build1): Add checksum for the operands.\n        (fold_build2): Likewise.\n        (fold_build3): Likewise.\n\nFrom-SVN: r102244", "tree": {"sha": "aaac3967661a63ae734dd8ecde51a6df935f45d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aaac3967661a63ae734dd8ecde51a6df935f45d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2fe73f62b7239432b44fabe5f60a019e60c82c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2fe73f62b7239432b44fabe5f60a019e60c82c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2fe73f62b7239432b44fabe5f60a019e60c82c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2fe73f62b7239432b44fabe5f60a019e60c82c3/comments", "author": null, "committer": null, "parents": [{"sha": "9d24eb542cfde81c37ad94029f3d51375785b251", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d24eb542cfde81c37ad94029f3d51375785b251", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d24eb542cfde81c37ad94029f3d51375785b251"}], "stats": {"total": 145, "additions": 132, "deletions": 13}, "files": [{"sha": "8c5d76a02ffb04b5f84b6cf9de842841035cc60d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2fe73f62b7239432b44fabe5f60a019e60c82c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2fe73f62b7239432b44fabe5f60a019e60c82c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2fe73f62b7239432b44fabe5f60a019e60c82c3", "patch": "@@ -1,3 +1,10 @@\n+2005-07-21  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR middle-end/21180\n+\t* fold-const.c (fold_build1): Add checksum for the operands.\n+\t(fold_build2): Likewise.\t\n+\t(fold_build3): Likewise.\n+\n 2005-07-21  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR middle-end/19055"}, {"sha": "20c94efedefefc443bb4a8c3e753620b9d0430d9", "filename": "gcc/fold-const.c", "status": "modified", "additions": 125, "deletions": 13, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2fe73f62b7239432b44fabe5f60a019e60c82c3/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2fe73f62b7239432b44fabe5f60a019e60c82c3/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e2fe73f62b7239432b44fabe5f60a019e60c82c3", "patch": "@@ -10391,11 +10391,33 @@ fold_checksum_tree (tree expr, struct md5_ctx *ctx, htab_t ht)\n tree\n fold_build1 (enum tree_code code, tree type, tree op0)\n {\n-  tree tem = fold_unary (code, type, op0);\n-  if (tem)\n-    return tem;\n+  tree tem;\n+#ifdef ENABLE_FOLD_CHECKING\n+  unsigned char checksum_before[16], checksum_after[16];\n+  struct md5_ctx ctx;\n+  htab_t ht;\n+\n+  ht = htab_create (32, htab_hash_pointer, htab_eq_pointer, NULL);\n+  md5_init_ctx (&ctx);\n+  fold_checksum_tree (op0, &ctx, ht);\n+  md5_finish_ctx (&ctx, checksum_before);\n+  htab_empty (ht);\n+#endif\n+  \n+  tem = fold_unary (code, type, op0);\n+  if (!tem)\n+    tem = build1 (code, type, op0);\n+  \n+#ifdef ENABLE_FOLD_CHECKING\n+  md5_init_ctx (&ctx);\n+  fold_checksum_tree (op0, &ctx, ht);\n+  md5_finish_ctx (&ctx, checksum_after);\n+  htab_delete (ht);\n \n-  return build1 (code, type, op0);\n+  if (memcmp (checksum_before, checksum_after, 16))\n+    fold_check_failed (op0, tem);\n+#endif\n+  return tem;\n }\n \n /* Fold a binary tree expression with code CODE of type TYPE with\n@@ -10406,11 +10428,49 @@ fold_build1 (enum tree_code code, tree type, tree op0)\n tree\n fold_build2 (enum tree_code code, tree type, tree op0, tree op1)\n {\n-  tree tem = fold_binary (code, type, op0, op1);\n-  if (tem)\n-    return tem;\n+  tree tem;\n+#ifdef ENABLE_FOLD_CHECKING\n+  unsigned char checksum_before_op0[16],\n+                checksum_before_op1[16],\n+\t\tchecksum_after_op0[16],\n+\t\tchecksum_after_op1[16];\n+  struct md5_ctx ctx;\n+  htab_t ht;\n+\n+  ht = htab_create (32, htab_hash_pointer, htab_eq_pointer, NULL);\n+  md5_init_ctx (&ctx);\n+  fold_checksum_tree (op0, &ctx, ht);\n+  md5_finish_ctx (&ctx, checksum_before_op0);\n+  htab_empty (ht);\n+\n+  md5_init_ctx (&ctx);\n+  fold_checksum_tree (op1, &ctx, ht);\n+  md5_finish_ctx (&ctx, checksum_before_op1);\n+  htab_empty (ht);\n+#endif\n+\n+  tem = fold_binary (code, type, op0, op1);\n+  if (!tem)\n+    tem = build2 (code, type, op0, op1);\n+  \n+#ifdef ENABLE_FOLD_CHECKING\n+  md5_init_ctx (&ctx);\n+  fold_checksum_tree (op0, &ctx, ht);\n+  md5_finish_ctx (&ctx, checksum_after_op0);\n+  htab_empty (ht);\n \n-  return build2 (code, type, op0, op1);\n+  if (memcmp (checksum_before_op0, checksum_after_op0, 16))\n+    fold_check_failed (op0, tem);\n+  \n+  md5_init_ctx (&ctx);\n+  fold_checksum_tree (op1, &ctx, ht);\n+  md5_finish_ctx (&ctx, checksum_after_op1);\n+  htab_delete (ht);\n+\n+  if (memcmp (checksum_before_op1, checksum_after_op1, 16))\n+    fold_check_failed (op1, tem);\n+#endif\n+  return tem;\n }\n \n /* Fold a ternary tree expression with code CODE of type TYPE with\n@@ -10420,12 +10480,64 @@ fold_build2 (enum tree_code code, tree type, tree op0, tree op1)\n \n tree\n fold_build3 (enum tree_code code, tree type, tree op0, tree op1, tree op2)\n-{\n-  tree tem = fold_ternary (code, type, op0, op1, op2);\n-  if (tem)\n-    return tem;\n+{  tree tem;\n+#ifdef ENABLE_FOLD_CHECKING\n+  unsigned char checksum_before_op0[16],\n+                checksum_before_op1[16],\n+                checksum_before_op2[16],\n+\t\tchecksum_after_op0[16],\n+\t\tchecksum_after_op1[16],\n+\t\tchecksum_after_op2[16];\n+  struct md5_ctx ctx;\n+  htab_t ht;\n+\n+  ht = htab_create (32, htab_hash_pointer, htab_eq_pointer, NULL);\n+  md5_init_ctx (&ctx);\n+  fold_checksum_tree (op0, &ctx, ht);\n+  md5_finish_ctx (&ctx, checksum_before_op0);\n+  htab_empty (ht);\n+\n+  md5_init_ctx (&ctx);\n+  fold_checksum_tree (op1, &ctx, ht);\n+  md5_finish_ctx (&ctx, checksum_before_op1);\n+  htab_empty (ht);\n \n-  return build3 (code, type, op0, op1, op2);\n+  md5_init_ctx (&ctx);\n+  fold_checksum_tree (op2, &ctx, ht);\n+  md5_finish_ctx (&ctx, checksum_before_op2);\n+  htab_empty (ht);\n+#endif\n+  \n+  tem = fold_ternary (code, type, op0, op1, op2);\n+  if (!tem)\n+    tem =  build3 (code, type, op0, op1, op2);\n+      \n+#ifdef ENABLE_FOLD_CHECKING\n+  md5_init_ctx (&ctx);\n+  fold_checksum_tree (op0, &ctx, ht);\n+  md5_finish_ctx (&ctx, checksum_after_op0);\n+  htab_empty (ht);\n+\n+  if (memcmp (checksum_before_op0, checksum_after_op0, 16))\n+    fold_check_failed (op0, tem);\n+  \n+  md5_init_ctx (&ctx);\n+  fold_checksum_tree (op1, &ctx, ht);\n+  md5_finish_ctx (&ctx, checksum_after_op1);\n+  htab_empty (ht);\n+\n+  if (memcmp (checksum_before_op1, checksum_after_op1, 16))\n+    fold_check_failed (op1, tem);\n+  \n+  md5_init_ctx (&ctx);\n+  fold_checksum_tree (op2, &ctx, ht);\n+  md5_finish_ctx (&ctx, checksum_after_op2);\n+  htab_delete (ht);\n+\n+  if (memcmp (checksum_before_op2, checksum_after_op2, 16))\n+    fold_check_failed (op2, tem);\n+#endif\n+  return tem;\n }\n \n /* Perform constant folding and related simplification of initializer"}]}