{"sha": "beeac4c2716e5873648c67f71ba810cc02f7f8a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVlYWM0YzI3MTZlNTg3MzY0OGM2N2Y3MWJhODEwY2MwMmY3ZjhhOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-11-19T09:15:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-11-19T09:15:53Z"}, "message": "re PR middle-end/91450 (__builtin_mul_overflow(A,B,R) wrong code if product < 0, *R is unsigned, and !(A&B))\n\n\tPR middle-end/91450\n\t* internal-fn.c (expand_mul_overflow): For s1 * s2 -> ur, if one\n\toperand is negative and one non-negative, compare the non-negative\n\tone against 0 rather than comparing s1 & s2 against 0.  Otherwise,\n\tdon't compare (s1 & s2) == 0, but compare separately both s1 == 0\n\tand s2 == 0, unless one of them is known to be negative.  Remove\n\ttem2 variable, use tem where tem2 has been used before.\n\n\t* gcc.c-torture/execute/pr91450-1.c: New test.\n\t* gcc.c-torture/execute/pr91450-2.c: New test.\n\nFrom-SVN: r278437", "tree": {"sha": "4c2b11543f8cbac0211a4c2e2d84f10948ed68d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c2b11543f8cbac0211a4c2e2d84f10948ed68d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/beeac4c2716e5873648c67f71ba810cc02f7f8a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beeac4c2716e5873648c67f71ba810cc02f7f8a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beeac4c2716e5873648c67f71ba810cc02f7f8a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beeac4c2716e5873648c67f71ba810cc02f7f8a8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "655b60f966e83d82c8ae4c50648e1489cf0ce4d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/655b60f966e83d82c8ae4c50648e1489cf0ce4d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/655b60f966e83d82c8ae4c50648e1489cf0ce4d2"}], "stats": {"total": 205, "additions": 194, "deletions": 11}, "files": [{"sha": "6560a39c7055510c1bfd6f54908bd5b01a31b451", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beeac4c2716e5873648c67f71ba810cc02f7f8a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beeac4c2716e5873648c67f71ba810cc02f7f8a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=beeac4c2716e5873648c67f71ba810cc02f7f8a8", "patch": "@@ -1,3 +1,13 @@\n+2019-11-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/91450\n+\t* internal-fn.c (expand_mul_overflow): For s1 * s2 -> ur, if one\n+\toperand is negative and one non-negative, compare the non-negative\n+\tone against 0 rather than comparing s1 & s2 against 0.  Otherwise,\n+\tdon't compare (s1 & s2) == 0, but compare separately both s1 == 0\n+\tand s2 == 0, unless one of them is known to be negative.  Remove\n+\ttem2 variable, use tem where tem2 has been used before.\n+\n 2019-11-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* doc/invoke.texi (-gno-internal-reset-location-views): Fix typo."}, {"sha": "6bbbc9e946e72a83c6defa38750cbf2b4ff3d4ac", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beeac4c2716e5873648c67f71ba810cc02f7f8a8/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beeac4c2716e5873648c67f71ba810cc02f7f8a8/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=beeac4c2716e5873648c67f71ba810cc02f7f8a8", "patch": "@@ -1409,7 +1409,7 @@ expand_mul_overflow (location_t loc, tree lhs, tree arg0, tree arg1,\n   /* s1 * s2 -> ur  */\n   if (!uns0_p && !uns1_p && unsr_p)\n     {\n-      rtx tem, tem2;\n+      rtx tem;\n       switch (pos_neg0 | pos_neg1)\n \t{\n \tcase 1: /* Both operands known to be non-negative.  */\n@@ -1439,10 +1439,8 @@ expand_mul_overflow (location_t loc, tree lhs, tree arg0, tree arg1,\n \t      ops.op2 = NULL_TREE;\n \t      ops.location = loc;\n \t      res = expand_expr_real_2 (&ops, NULL_RTX, mode, EXPAND_NORMAL);\n-\t      tem = expand_binop (mode, and_optab, op0, op1, NULL_RTX, false,\n-\t\t\t\t  OPTAB_LIB_WIDEN);\n-\t      do_compare_rtx_and_jump (tem, const0_rtx, EQ, true, mode,\n-\t\t\t\t       NULL_RTX, NULL, done_label,\n+\t      do_compare_rtx_and_jump (pos_neg0 == 1 ? op0 : op1, const0_rtx, EQ,\n+\t\t\t\t       true, mode, NULL_RTX, NULL, done_label,\n \t\t\t\t       profile_probability::very_likely ());\n \t      goto do_error_label;\n \t    }\n@@ -1473,16 +1471,23 @@ expand_mul_overflow (location_t loc, tree lhs, tree arg0, tree arg1,\n \t  arg1 = error_mark_node;\n \t  emit_jump (do_main_label);\n \t  emit_label (after_negate_label);\n-\t  tem2 = expand_binop (mode, xor_optab, op0, op1, NULL_RTX, false,\n-\t\t\t       OPTAB_LIB_WIDEN);\n-\t  do_compare_rtx_and_jump (tem2, const0_rtx, GE, false, mode, NULL_RTX,\n-\t\t\t\t   NULL, do_main_label, profile_probability::very_likely ());\n+\t  tem = expand_binop (mode, xor_optab, op0, op1, NULL_RTX, false,\n+\t\t\t      OPTAB_LIB_WIDEN);\n+\t  do_compare_rtx_and_jump (tem, const0_rtx, GE, false, mode, NULL_RTX,\n+\t\t\t\t   NULL, do_main_label,\n+\t\t\t\t   profile_probability::very_likely ());\n \t  /* One argument is negative here, the other positive.  This\n \t     overflows always, unless one of the arguments is 0.  But\n \t     if e.g. s2 is 0, (U) s1 * 0 doesn't overflow, whatever s1\n \t     is, thus we can keep do_main code oring in overflow as is.  */\n-\t  do_compare_rtx_and_jump (tem, const0_rtx, EQ, true, mode, NULL_RTX,\n-\t\t\t\t   NULL, do_main_label, profile_probability::very_likely ());\n+\t  if (pos_neg0 != 2)\n+\t    do_compare_rtx_and_jump (op0, const0_rtx, EQ, true, mode, NULL_RTX,\n+\t\t\t\t     NULL, do_main_label,\n+\t\t\t\t     profile_probability::very_unlikely ());\n+\t  if (pos_neg1 != 2)\n+\t    do_compare_rtx_and_jump (op1, const0_rtx, EQ, true, mode, NULL_RTX,\n+\t\t\t\t     NULL, do_main_label,\n+\t\t\t\t     profile_probability::very_unlikely ());\n \t  expand_arith_set_overflow (lhs, target);\n \t  emit_label (do_main_label);\n \t  goto do_main;"}, {"sha": "16a410605eeec3162d745caaaa4414a25e50beab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beeac4c2716e5873648c67f71ba810cc02f7f8a8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beeac4c2716e5873648c67f71ba810cc02f7f8a8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=beeac4c2716e5873648c67f71ba810cc02f7f8a8", "patch": "@@ -1,5 +1,9 @@\n 2019-11-19  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/91450\n+\t* gcc.c-torture/execute/pr91450-1.c: New test.\n+\t* gcc.c-torture/execute/pr91450-2.c: New test.\n+\n \tPR c++/92504\n \t* g++.dg/gomp/pr92504.C: New test.\n "}, {"sha": "9aafc5f791a5d38ab60264f4631c8a492ecf5378", "filename": "gcc/testsuite/gcc.c-torture/execute/pr91450-1.c", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beeac4c2716e5873648c67f71ba810cc02f7f8a8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr91450-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beeac4c2716e5873648c67f71ba810cc02f7f8a8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr91450-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr91450-1.c?ref=beeac4c2716e5873648c67f71ba810cc02f7f8a8", "patch": "@@ -0,0 +1,88 @@\n+/* PR middle-end/91450 */\n+\n+__attribute__((noipa)) unsigned long long\n+foo (int a, int b)\n+{\n+  unsigned long long r;\n+  if (!__builtin_mul_overflow (a, b, &r))\n+    __builtin_abort ();\n+  return r;\n+}\n+\n+__attribute__((noipa)) unsigned long long\n+bar (int a, int b)\n+{\n+  unsigned long long r;\n+  if (a >= 0)\n+    return 0;\n+  if (!__builtin_mul_overflow (a, b, &r))\n+    __builtin_abort ();\n+  return r;\n+}\n+\n+__attribute__((noipa)) unsigned long long\n+baz (int a, int b)\n+{\n+  unsigned long long r;\n+  if (b >= 0)\n+    return 0;\n+  if (!__builtin_mul_overflow (a, b, &r))\n+    __builtin_abort ();\n+  return r;\n+}\n+\n+__attribute__((noipa)) unsigned long long\n+qux (int a, int b)\n+{\n+  unsigned long long r;\n+  if (a >= 0)\n+    return 0;\n+  if (b < 0)\n+    return 0;\n+  if (!__builtin_mul_overflow (a, b, &r))\n+    __builtin_abort ();\n+  return r;\n+}\n+\n+__attribute__((noipa)) unsigned long long\n+quux (int a, int b)\n+{\n+  unsigned long long r;\n+  if (a < 0)\n+    return 0;\n+  if (b >= 0)\n+    return 0;\n+  if (!__builtin_mul_overflow (a, b, &r))\n+    __builtin_abort ();\n+  return r;\n+}\n+\n+int\n+main ()\n+{\n+  if (foo (-4, 2) != -8ULL)\n+    __builtin_abort ();\n+  if (foo (2, -4) != -8ULL)\n+    __builtin_abort ();\n+  if (bar (-4, 2) != -8ULL)\n+    __builtin_abort ();\n+  if (baz (2, -4) != -8ULL)\n+    __builtin_abort ();\n+  if (qux (-4, 2) != -8ULL)\n+    __builtin_abort ();\n+  if (quux (2, -4) != -8ULL)\n+    __builtin_abort ();\n+  if (foo (-2, 1) != -2ULL)\n+    __builtin_abort ();\n+  if (foo (1, -2) != -2ULL)\n+    __builtin_abort ();\n+  if (bar (-2, 1) != -2ULL)\n+    __builtin_abort ();\n+  if (baz (1, -2) != -2ULL)\n+    __builtin_abort ();\n+  if (qux (-2, 1) != -2ULL)\n+    __builtin_abort ();\n+  if (quux (1, -2) != -2ULL)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "bfaabbb5ac65abdc49fbb47fa7412323d89f0134", "filename": "gcc/testsuite/gcc.c-torture/execute/pr91450-2.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beeac4c2716e5873648c67f71ba810cc02f7f8a8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr91450-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beeac4c2716e5873648c67f71ba810cc02f7f8a8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr91450-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr91450-2.c?ref=beeac4c2716e5873648c67f71ba810cc02f7f8a8", "patch": "@@ -0,0 +1,76 @@\n+/* PR middle-end/91450 */\n+\n+__attribute__((noipa)) void\n+foo (int a, int b)\n+{\n+  unsigned long long r;\n+  if (__builtin_mul_overflow (a, b, &r))\n+    __builtin_abort ();\n+  if (r != 0)\n+    __builtin_abort ();\n+}\n+\n+__attribute__((noipa)) void\n+bar (int a, int b)\n+{\n+  unsigned long long r;\n+  if (a >= 0)\n+    return;\n+  if (__builtin_mul_overflow (a, b, &r))\n+    __builtin_abort ();\n+  if (r != 0)\n+    __builtin_abort ();\n+}\n+\n+__attribute__((noipa)) void\n+baz (int a, int b)\n+{\n+  unsigned long long r;\n+  if (b >= 0)\n+    return;\n+  if (__builtin_mul_overflow (a, b, &r))\n+    __builtin_abort ();\n+  if (r != 0)\n+    __builtin_abort ();\n+}\n+\n+__attribute__((noipa)) void\n+qux (int a, int b)\n+{\n+  unsigned long long r;\n+  if (a >= 0)\n+    return;\n+  if (b < 0)\n+    return;\n+  if (__builtin_mul_overflow (a, b, &r))\n+    __builtin_abort ();\n+  if (r != 0)\n+    __builtin_abort ();\n+}\n+\n+__attribute__((noipa)) void\n+quux (int a, int b)\n+{\n+  unsigned long long r;\n+  if (a < 0)\n+    return;\n+  if (b >= 0)\n+    return;\n+  if (__builtin_mul_overflow (a, b, &r))\n+    __builtin_abort ();\n+  if (r != 0)\n+    __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  foo (-4, 0);\n+  foo (0, -4);\n+  foo (0, 0);\n+  bar (-4, 0);\n+  baz (0, -4);\n+  qux (-4, 0);\n+  quux (0, -4);\n+  return 0;\n+}"}]}