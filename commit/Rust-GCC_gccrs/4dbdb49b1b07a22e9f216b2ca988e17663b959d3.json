{"sha": "4dbdb49b1b07a22e9f216b2ca988e17663b959d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRiZGI0OWIxYjA3YTIyZTlmMjE2YjJjYTk4OGUxNzY2M2I5NTlkMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-06-06T15:14:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-06-06T15:14:12Z"}, "message": "PR c++/85710 - ICE with -Wmemset-elt-size.\n\nc-family/\n\t* c-warn.c (warn_for_memset): Don't crash on incomplete element type.\ncp/\n\t* semantics.c (finish_call_expr): Call warn_for_memset here.\n\t* parser.c (cp_parser_postfix_expression): Not here.\n\t(literal_integer_zerop): No longer static.\n\t* pt.c (build_non_dependent_expr): Don't wrap CONST_DECL.\n\nFrom-SVN: r261238", "tree": {"sha": "9abb6d6f729d70f2d77cf5f60ebf8cb05215a413", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9abb6d6f729d70f2d77cf5f60ebf8cb05215a413"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4dbdb49b1b07a22e9f216b2ca988e17663b959d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dbdb49b1b07a22e9f216b2ca988e17663b959d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dbdb49b1b07a22e9f216b2ca988e17663b959d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dbdb49b1b07a22e9f216b2ca988e17663b959d3/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1d6ccc5f2984952ee71b0bea511cffcd5a30725d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d6ccc5f2984952ee71b0bea511cffcd5a30725d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d6ccc5f2984952ee71b0bea511cffcd5a30725d"}], "stats": {"total": 89, "additions": 69, "deletions": 20}, "files": [{"sha": "f90adb75c4075d2b67dc0b7552bf17649edcefcc", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dbdb49b1b07a22e9f216b2ca988e17663b959d3/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dbdb49b1b07a22e9f216b2ca988e17663b959d3/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=4dbdb49b1b07a22e9f216b2ca988e17663b959d3", "patch": "@@ -1,3 +1,8 @@\n+2018-06-06  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/85710 - ICE with -Wmemset-elt-size.\n+\t* c-warn.c (warn_for_memset): Don't crash on incomplete element type.\n+\n 2018-06-01  Jason Merrill  <jason@redhat.com>\n \n \t* c-cppbuiltin.c (c_cpp_builtins): Bump __cpp_deduction_guides to"}, {"sha": "859d72b3f83fe8742874a0458368877a4d95a2af", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dbdb49b1b07a22e9f216b2ca988e17663b959d3/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dbdb49b1b07a22e9f216b2ca988e17663b959d3/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=4dbdb49b1b07a22e9f216b2ca988e17663b959d3", "patch": "@@ -1897,7 +1897,8 @@ warn_for_memset (location_t loc, tree arg0, tree arg2,\n \t{\n \t  tree elt_type = TREE_TYPE (type);\n \t  tree domain = TYPE_DOMAIN (type);\n-\t  if (!integer_onep (TYPE_SIZE_UNIT (elt_type))\n+\t  if (COMPLETE_TYPE_P (elt_type)\n+\t      && !integer_onep (TYPE_SIZE_UNIT (elt_type))\n \t      && domain != NULL_TREE\n \t      && TYPE_MAX_VALUE (domain)\n \t      && TYPE_MIN_VALUE (domain)"}, {"sha": "edfa797d20b6878e36565cd5023717046cae46e8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dbdb49b1b07a22e9f216b2ca988e17663b959d3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dbdb49b1b07a22e9f216b2ca988e17663b959d3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4dbdb49b1b07a22e9f216b2ca988e17663b959d3", "patch": "@@ -1,3 +1,11 @@\n+2018-06-06  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/85710 - ICE with -Wmemset-elt-size.\n+\t* semantics.c (finish_call_expr): Call warn_for_memset here.\n+\t* parser.c (cp_parser_postfix_expression): Not here.\n+\t(literal_integer_zerop): No longer static.\n+\t* pt.c (build_non_dependent_expr): Don't wrap CONST_DECL.\n+\n 2018-06-05  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/85976"}, {"sha": "a6d0b431a9dd192f3a24a597bd7f19e2c21fdee9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dbdb49b1b07a22e9f216b2ca988e17663b959d3/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dbdb49b1b07a22e9f216b2ca988e17663b959d3/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4dbdb49b1b07a22e9f216b2ca988e17663b959d3", "patch": "@@ -6548,6 +6548,7 @@ extern bool parsing_default_capturing_generic_lambda_in_template (void);\n extern void inject_this_parameter (tree, cp_cv_quals);\n extern location_t defarg_location (tree);\n extern void maybe_show_extern_c_location (void);\n+extern bool literal_integer_zerop (const_tree);\n \n /* in pt.c */\n extern bool check_template_shadow\t\t(tree);"}, {"sha": "03aea2f11507fb74254f79211c5168f1a0eb6d0c", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dbdb49b1b07a22e9f216b2ca988e17663b959d3/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dbdb49b1b07a22e9f216b2ca988e17663b959d3/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4dbdb49b1b07a22e9f216b2ca988e17663b959d3", "patch": "@@ -6614,11 +6614,11 @@ cp_parser_compound_literal_p (cp_parser *parser)\n /* Return true if EXPR is the integer constant zero or a complex constant\n    of zero, without any folding, but ignoring location wrappers.  */\n \n-static bool\n+bool\n literal_integer_zerop (const_tree expr)\n {\n-  STRIP_ANY_LOCATION_WRAPPER (expr);\n-  return integer_zerop (expr);\n+  return (location_wrapper_p (expr)\n+\t  && integer_zerop (TREE_OPERAND (expr, 0)));\n }\n \n /* Parse a postfix-expression.\n@@ -7159,19 +7159,6 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\t  }\n \t      }\n \n-\t    if (TREE_CODE (postfix_expression) == FUNCTION_DECL\n-\t\t&& DECL_BUILT_IN_CLASS (postfix_expression) == BUILT_IN_NORMAL\n-\t\t&& DECL_FUNCTION_CODE (postfix_expression) == BUILT_IN_MEMSET\n-\t\t&& vec_safe_length (args) == 3)\n-\t      {\n-\t\ttree arg0 = (*args)[0];\n-\t\ttree arg1 = (*args)[1];\n-\t\ttree arg2 = (*args)[2];\n-\t\tint literal_mask = ((literal_integer_zerop (arg1) << 1)\n-\t\t\t\t    | (literal_integer_zerop (arg2) << 2));\n-\t\twarn_for_memset (input_location, arg0, arg2, literal_mask);\n-\t      }\n-\n \t    if (TREE_CODE (postfix_expression) == COMPONENT_REF)\n \t      {\n \t\ttree instance = TREE_OPERAND (postfix_expression, 0);"}, {"sha": "448cd69b722b1ad23d298d52645bd3a2d2171a2f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dbdb49b1b07a22e9f216b2ca988e17663b959d3/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dbdb49b1b07a22e9f216b2ca988e17663b959d3/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4dbdb49b1b07a22e9f216b2ca988e17663b959d3", "patch": "@@ -25837,8 +25837,8 @@ build_non_dependent_expr (tree expr)\n   if (is_overloaded_fn (inner_expr)\n       || TREE_CODE (inner_expr) == OFFSET_REF)\n     return orig_expr;\n-  /* There is no need to return a proxy for a variable.  */\n-  if (VAR_P (expr))\n+  /* There is no need to return a proxy for a variable or enumerator.  */\n+  if (VAR_P (expr) || TREE_CODE (expr) == CONST_DECL)\n     return orig_expr;\n   /* Preserve string constants; conversions from string constants to\n      \"char *\" are allowed, even though normally a \"const char *\""}, {"sha": "55791894221beb7ec8eaf8f551ca7aa9e40ae5f3", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dbdb49b1b07a22e9f216b2ca988e17663b959d3/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dbdb49b1b07a22e9f216b2ca988e17663b959d3/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=4dbdb49b1b07a22e9f216b2ca988e17663b959d3", "patch": "@@ -2350,7 +2350,7 @@ finish_call_expr (tree fn, vec<tree, va_gc> **args, bool disallow_virtual,\n {\n   tree result;\n   tree orig_fn;\n-  vec<tree, va_gc> *orig_args = NULL;\n+  vec<tree, va_gc> *orig_args = *args;\n \n   if (fn == error_mark_node)\n     return error_mark_node;\n@@ -2524,6 +2524,22 @@ finish_call_expr (tree fn, vec<tree, va_gc> **args, bool disallow_virtual,\n \t\t sizeof_arg, same_type_ignoring_top_level_qualifiers_p);\n \t    }\n \n+\t  if ((complain & tf_warning)\n+\t      && TREE_CODE (fn) == FUNCTION_DECL\n+\t      && DECL_BUILT_IN_CLASS (fn) == BUILT_IN_NORMAL\n+\t      && DECL_FUNCTION_CODE (fn) == BUILT_IN_MEMSET\n+\t      && vec_safe_length (*args) == 3\n+\t      && !any_type_dependent_arguments_p (*args))\n+\t    {\n+\t      tree arg0 = (*orig_args)[0];\n+\t      tree arg1 = (*orig_args)[1];\n+\t      tree arg2 = (*orig_args)[2];\n+\t      int literal_mask = ((literal_integer_zerop (arg1) << 1)\n+\t\t\t\t  | (literal_integer_zerop (arg2) << 2));\n+\t      arg2 = instantiate_non_dependent_expr (arg2);\n+\t      warn_for_memset (input_location, arg0, arg2, literal_mask);\n+\t    }\n+\n \t  /* A call to a namespace-scope function.  */\n \t  result = build_new_function_call (fn, args, complain);\n \t}"}, {"sha": "e4d3232063d36e5d32ff86491f32c4b942dd366f", "filename": "gcc/testsuite/g++.dg/warn/Wmemset-elt-size1.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dbdb49b1b07a22e9f216b2ca988e17663b959d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWmemset-elt-size1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dbdb49b1b07a22e9f216b2ca988e17663b959d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWmemset-elt-size1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWmemset-elt-size1.C?ref=4dbdb49b1b07a22e9f216b2ca988e17663b959d3", "patch": "@@ -0,0 +1,31 @@\n+// PR c++/85710\n+// { dg-additional-options -Wmemset-elt-size }\n+\n+#include <cstring>\n+\n+template <typename T> struct A { int a; };\n+\n+void foo(A<int> (*ap)[2])\n+{\n+  std::memset (*ap, 0, 2);\t// no warning because A<int> is incomplete\n+}\n+\n+template <typename T>\n+class E\n+{\n+public:\n+  void Clear();\n+private:\n+  A<T> mA[2];\n+};\n+\n+template<typename T>\n+void E<T>::Clear()\n+{\n+  std::memset(mA, 0, 2);\t// { dg-warning -Wmemset-elt-size }\n+}\n+\n+int main()\n+{\n+  E<int>().Clear();\n+}"}]}