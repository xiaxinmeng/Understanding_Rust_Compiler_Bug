{"sha": "ea58eb88d9b440773e146bd6cb39abb9a9fb894f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE1OGViODhkOWI0NDA3NzNlMTQ2YmQ2Y2IzOWFiYjlhOWZiODk0Zg==", "commit": {"author": {"name": "Jackson Woodruff", "email": "jackson.woodruff@arm.com", "date": "2017-08-17T12:54:10Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2017-08-17T12:54:10Z"}, "message": "[AArch64] Improve SIMD store of zero.\n\nThis patch changes patterns in aarch64-simd.md to replace\n\n    movi    v0.4s, 0\n    str    q0, [x0, 16]\n\nWith:\n\n    stp xzr, xzr, [x0, 16]\n\nWhen we are storing zeros to vectors like this:\n\n    void f(uint32x4_t *p) {\n      uint32x4_t x = { 0, 0, 0, 0};\n      p[1] = x;\n    }\n\ngcc/\n2017-08-17  Jackson Woodruff  <jackson.woodruff@arm.com>\n\n\t* aarch64-simd.md (mov<mode>): No longer force zero immediate into\n\tregister.\n\t(*aarch64_simd_mov<mode>): Add new case for stp\tusing zero immediate.\n\ngcc/testsuite/\n2017-08-17  Jackson Woodruff  <jackson.woodruff@arm.com>\n\n\t* gcc.target/aarch64/simd/vect_str_zero.c: New testcase.\n\nFrom-SVN: r251149", "tree": {"sha": "8729a6dc4aabe8ec96b44681dc1cb6dc1f1ddbc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8729a6dc4aabe8ec96b44681dc1cb6dc1f1ddbc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea58eb88d9b440773e146bd6cb39abb9a9fb894f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea58eb88d9b440773e146bd6cb39abb9a9fb894f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea58eb88d9b440773e146bd6cb39abb9a9fb894f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea58eb88d9b440773e146bd6cb39abb9a9fb894f/comments", "author": null, "committer": null, "parents": [{"sha": "0fc81d78f9e97d0fb9b7a6c051189758b1d2ab01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fc81d78f9e97d0fb9b7a6c051189758b1d2ab01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fc81d78f9e97d0fb9b7a6c051189758b1d2ab01"}], "stats": {"total": 82, "additions": 60, "deletions": 22}, "files": [{"sha": "2df218b93dafb81c79f6f6b39e93bc15808e3807", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea58eb88d9b440773e146bd6cb39abb9a9fb894f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea58eb88d9b440773e146bd6cb39abb9a9fb894f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea58eb88d9b440773e146bd6cb39abb9a9fb894f", "patch": "@@ -1,3 +1,9 @@\n+2017-08-17  Jackson Woodruff  <jackson.woodruff@arm.com>\n+\n+\t* aarch64-simd.md (mov<mode>): No longer force zero immediate into\n+\tregister.\n+\t(*aarch64_simd_mov<mode>): Add new case for stp\tusing zero immediate.\n+\n 2017-08-17  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-structalias.c (solve_graph): When propagating"}, {"sha": "f3e084f8778d70c82823b92fa80ff96021ad26db", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea58eb88d9b440773e146bd6cb39abb9a9fb894f/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea58eb88d9b440773e146bd6cb39abb9a9fb894f/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=ea58eb88d9b440773e146bd6cb39abb9a9fb894f", "patch": "@@ -23,7 +23,10 @@\n \t(match_operand:VALL_F16 1 \"general_operand\" \"\"))]\n   \"TARGET_SIMD\"\n   \"\n-    if (GET_CODE (operands[0]) == MEM)\n+    if (GET_CODE (operands[0]) == MEM\n+\t&& !(aarch64_simd_imm_zero (operands[1], <MODE>mode)\n+\t     && aarch64_legitimate_address_p (<MODE>mode, operands[0],\n+\t\t\t\t\t      PARALLEL, 1)))\n       operands[1] = force_reg (<MODE>mode, operands[1]);\n   \"\n )\n@@ -94,63 +97,66 @@\n \n (define_insn \"*aarch64_simd_mov<mode>\"\n   [(set (match_operand:VD 0 \"nonimmediate_operand\"\n-\t\t\"=w, m,  w, ?r, ?w, ?r, w\")\n+\t\t\"=w, m,  m,  w, ?r, ?w, ?r, w\")\n \t(match_operand:VD 1 \"general_operand\"\n-\t\t\"m,  w,  w,  w,  r,  r, Dn\"))]\n+\t\t\"m,  Dz, w,  w,  w,  r,  r, Dn\"))]\n   \"TARGET_SIMD\n    && (register_operand (operands[0], <MODE>mode)\n-       || register_operand (operands[1], <MODE>mode))\"\n+       || aarch64_simd_reg_or_zero (operands[1], <MODE>mode))\"\n {\n    switch (which_alternative)\n      {\n-     case 0: return \"ldr\\\\t%d0, %1\";\n-     case 1: return \"str\\\\t%d1, %0\";\n-     case 2: return \"mov\\t%0.<Vbtype>, %1.<Vbtype>\";\n-     case 3: return \"umov\\t%0, %1.d[0]\";\n-     case 4: return \"fmov\\t%d0, %1\";\n-     case 5: return \"mov\\t%0, %1\";\n-     case 6:\n+     case 0: return \"ldr\\t%d0, %1\";\n+     case 1: return \"str\\txzr, %0\";\n+     case 2: return \"str\\t%d1, %0\";\n+     case 3: return \"mov\\t%0.<Vbtype>, %1.<Vbtype>\";\n+     case 4: return \"umov\\t%0, %1.d[0]\";\n+     case 5: return \"fmov\\t%d0, %1\";\n+     case 6: return \"mov\\t%0, %1\";\n+     case 7:\n \treturn aarch64_output_simd_mov_immediate (operands[1],\n \t\t\t\t\t\t  <MODE>mode, 64);\n      default: gcc_unreachable ();\n      }\n }\n-  [(set_attr \"type\" \"neon_load1_1reg<q>, neon_store1_1reg<q>,\\\n+  [(set_attr \"type\" \"neon_load1_1reg<q>, neon_stp, neon_store1_1reg<q>,\\\n \t\t     neon_logic<q>, neon_to_gp<q>, f_mcr,\\\n \t\t     mov_reg, neon_move<q>\")]\n )\n \n (define_insn \"*aarch64_simd_mov<mode>\"\n   [(set (match_operand:VQ 0 \"nonimmediate_operand\"\n-\t\t\"=w, m,  w, ?r, ?w, ?r, w\")\n+\t\t\"=w, Ump,  m,  w, ?r, ?w, ?r, w\")\n \t(match_operand:VQ 1 \"general_operand\"\n-\t\t\"m,  w,  w,  w,  r,  r, Dn\"))]\n+\t\t\"m,  Dz, w,  w,  w,  r,  r, Dn\"))]\n   \"TARGET_SIMD\n    && (register_operand (operands[0], <MODE>mode)\n-       || register_operand (operands[1], <MODE>mode))\"\n+       || aarch64_simd_reg_or_zero (operands[1], <MODE>mode))\"\n {\n   switch (which_alternative)\n     {\n     case 0:\n-\treturn \"ldr\\\\t%q0, %1\";\n+\treturn \"ldr\\t%q0, %1\";\n     case 1:\n-\treturn \"str\\\\t%q1, %0\";\n+\treturn \"stp\\txzr, xzr, %0\";\n     case 2:\n-\treturn \"mov\\t%0.<Vbtype>, %1.<Vbtype>\";\n+\treturn \"str\\t%q1, %0\";\n     case 3:\n+\treturn \"mov\\t%0.<Vbtype>, %1.<Vbtype>\";\n     case 4:\n     case 5:\n-\treturn \"#\";\n     case 6:\n+\treturn \"#\";\n+    case 7:\n \treturn aarch64_output_simd_mov_immediate (operands[1], <MODE>mode, 128);\n     default:\n \tgcc_unreachable ();\n     }\n }\n   [(set_attr \"type\" \"neon_load1_1reg<q>, neon_store1_1reg<q>,\\\n-                     neon_logic<q>, multiple, multiple, multiple,\\\n-                     neon_move<q>\")\n-   (set_attr \"length\" \"4,4,4,8,8,8,4\")]\n+\t\t     neon_stp, neon_logic<q>, multiple, multiple,\\\n+\t\t     multiple, neon_move<q>\")\n+   (set_attr \"length\" \"4,4,4,4,8,8,8,4\")]\n )\n \n ;; When storing lane zero we can use the normal STR and its more permissive"}, {"sha": "7c4270c9c98f22f735fdd1bf9f6c2407b44c95e5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea58eb88d9b440773e146bd6cb39abb9a9fb894f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea58eb88d9b440773e146bd6cb39abb9a9fb894f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea58eb88d9b440773e146bd6cb39abb9a9fb894f", "patch": "@@ -1,3 +1,7 @@\n+2017-08-17  Jackson Woodruff  <jackson.woodruff@arm.com>\n+\n+\t* gcc.target/aarch64/simd/vect_str_zero.c: New testcase.\n+\n 2017-08-17  Tom de Vries  <tom@codesourcery.com>\n \n \t* gcc.dg/ipa/pr81696.c: Require effective target nonlocal_goto."}, {"sha": "07198de109432b530745cc540790303ae0245efb", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vect_str_zero.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea58eb88d9b440773e146bd6cb39abb9a9fb894f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvect_str_zero.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea58eb88d9b440773e146bd6cb39abb9a9fb894f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvect_str_zero.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvect_str_zero.c?ref=ea58eb88d9b440773e146bd6cb39abb9a9fb894f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+#include <arm_neon.h>\n+\n+void\n+f (uint32x4_t *p)\n+{\n+  uint32x4_t x = { 0, 0, 0, 0};\n+  p[1] = x;\n+\n+  /* { dg-final { scan-assembler \"stp\\txzr, xzr,\" } } */\n+}\n+\n+void\n+g (float32x2_t *p)\n+{\n+  float32x2_t x = {0.0, 0.0};\n+  p[0] = x;\n+\n+  /* { dg-final { scan-assembler \"str\\txzr, \" } } */\n+}"}]}