{"sha": "e6eda746185997c7c42ee8691761cb7c3c7d0ce1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZlZGE3NDYxODU5OTdjN2M0MmVlODY5MTc2MWNiN2MzYzdkMGNlMQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-28T18:59:13Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-28T18:59:13Z"}, "message": "Make SET_NEXT_INSN/SET_PREV_INSN require an rtx_insn\n\ngcc/\n2014-08-28  David Malcolm  <dmalcolm@redhat.com>\n\n\t* rtl.h (SET_PREV_INSN): Strengthen param from rtx to rtx_insn *.\n\t(SET_NEXT_INSN): Likewise.\n\t(gen_rtvec_v): Add an overload for param types (int, rtx_insn **).\n\n\t* config/c6x/c6x.c (gen_one_bundle): Strengthen param \"slot\" from\n\trtx * to rtx_insn **.  Introduce a new local rtx \"seq\", using it\n\tto split out the SEQUENCE from local \"bundle\", strengthening the\n\tlatter from rtx to rtx_insn * to hold the insn holding the SEQUENCE.\n\tStrengthen locals \"t\" and \"insn\" from rtx to rtx_insn *.\n\t(c6x_gen_bundles): Strengthen locals \"insn\", \"next\", \"last_call\"\n\tand the type of the elements of the \"slot\" array from rtx to\n\trtx_insn *.\n\t(reorg_split_calls): Likewise for locals \"insn\" and \"next\", and\n\tthe type of the elements of the \"slot\" array.\n\n\t* config/frv/frv.c (frv_nops): Likewise for the elements of this\n\tarray.\n\t(frv_function_prologue): Likewise for locals \"insn\", \"next\",\n\t\"last_call\".\n\t(frv_register_nop): Introduce a local \"nop_insn\" to be the\n\trtx_insn * containing rtx \"nop\".\n\n\t* config/mep/mep.c (mep_make_bundle): Param \"core\" is sometimes\n\tused as an insn and sometimes as a pattern, so rename it to\n\t\"core_insn_or_pat\", and introduce local rtx_insn * \"core_insn\",\n\tusing it where dealing with the core insn.\n\n\t* config/picochip/picochip.c (reorder_var_tracking_notes):\n\tStrengthen locals \"insn\", \"next\", \"last_insn\", \"queue\",\n\t\"next_queue\", \"prev\" from rtx to rtx_insn *.\n\n\t* emit-rtl.c (gen_rtvec_v): Add overloaded implementation for when\n\tthe second param is an rtx_insn ** rather than an rtx **.\n\t(link_insn_into_chain): Strengthen locals \"seq\" and \"sequence\"\n\tfrom rtx to rtx_sequence *, and introduce local named \"sequence\",\n\tusing methods of rtx_sequence to clarify the code.\n\t(remove_insn): Introduce local rtx_sequence * named \"sequence\" and\n\tuse its methods.\n\t(emit_insn_after_1): Strengthen return type from rtx to rtx_insn *.\n\tRename param \"after\" to \"uncast_after\", reintroducing \"after\" as a\n\tlocal rtx_insn * with a checked cast.\n\t(emit_pattern_after_noloc): Rename param \"after\" to \"uncast_after\",\n\treintroducing \"after\" as a local rtx_insn * with a checked cast.\n\tStrengthen local \"last\" from rtx to rtx_insn * and remove the\n\tnow-redundant checked casts.\n\t(copy_delay_slot_insn): Strengthen return type and param from rtx\n\tto rtx_insn *.\n\n\t* haifa-sched.c (reemit_notes): Strengthen params \"insn\" and\n\t\"last\" from rtx to rtx_insn *.\n\nFrom-SVN: r214685", "tree": {"sha": "505bd8408677649e55caaf6edf746f1bd1cfe859", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/505bd8408677649e55caaf6edf746f1bd1cfe859"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6eda746185997c7c42ee8691761cb7c3c7d0ce1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6eda746185997c7c42ee8691761cb7c3c7d0ce1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6eda746185997c7c42ee8691761cb7c3c7d0ce1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6eda746185997c7c42ee8691761cb7c3c7d0ce1/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f8f0516ef64cf62bdbba30cee5055685c6f9b68a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8f0516ef64cf62bdbba30cee5055685c6f9b68a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8f0516ef64cf62bdbba30cee5055685c6f9b68a"}], "stats": {"total": 200, "additions": 143, "deletions": 57}, "files": [{"sha": "4db8b4f26ffa0b0d5fc7147f1bf67da081c2480e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6eda746185997c7c42ee8691761cb7c3c7d0ce1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6eda746185997c7c42ee8691761cb7c3c7d0ce1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6eda746185997c7c42ee8691761cb7c3c7d0ce1", "patch": "@@ -1,3 +1,56 @@\n+2014-08-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* rtl.h (SET_PREV_INSN): Strengthen param from rtx to rtx_insn *.\n+\t(SET_NEXT_INSN): Likewise.\n+\t(gen_rtvec_v): Add an overload for param types (int, rtx_insn **).\n+\n+\t* config/c6x/c6x.c (gen_one_bundle): Strengthen param \"slot\" from\n+\trtx * to rtx_insn **.  Introduce a new local rtx \"seq\", using it\n+\tto split out the SEQUENCE from local \"bundle\", strengthening the\n+\tlatter from rtx to rtx_insn * to hold the insn holding the SEQUENCE.\n+\tStrengthen locals \"t\" and \"insn\" from rtx to rtx_insn *.\n+\t(c6x_gen_bundles): Strengthen locals \"insn\", \"next\", \"last_call\"\n+\tand the type of the elements of the \"slot\" array from rtx to\n+\trtx_insn *.\n+\t(reorg_split_calls): Likewise for locals \"insn\" and \"next\", and\n+\tthe type of the elements of the \"slot\" array.\n+\n+\t* config/frv/frv.c (frv_nops): Likewise for the elements of this\n+\tarray.\n+\t(frv_function_prologue): Likewise for locals \"insn\", \"next\",\n+\t\"last_call\".\n+\t(frv_register_nop): Introduce a local \"nop_insn\" to be the\n+\trtx_insn * containing rtx \"nop\".\n+\n+\t* config/mep/mep.c (mep_make_bundle): Param \"core\" is sometimes\n+\tused as an insn and sometimes as a pattern, so rename it to\n+\t\"core_insn_or_pat\", and introduce local rtx_insn * \"core_insn\",\n+\tusing it where dealing with the core insn.\n+\n+\t* config/picochip/picochip.c (reorder_var_tracking_notes):\n+\tStrengthen locals \"insn\", \"next\", \"last_insn\", \"queue\",\n+\t\"next_queue\", \"prev\" from rtx to rtx_insn *.\n+\n+\t* emit-rtl.c (gen_rtvec_v): Add overloaded implementation for when\n+\tthe second param is an rtx_insn ** rather than an rtx **.\n+\t(link_insn_into_chain): Strengthen locals \"seq\" and \"sequence\"\n+\tfrom rtx to rtx_sequence *, and introduce local named \"sequence\",\n+\tusing methods of rtx_sequence to clarify the code.\n+\t(remove_insn): Introduce local rtx_sequence * named \"sequence\" and\n+\tuse its methods.\n+\t(emit_insn_after_1): Strengthen return type from rtx to rtx_insn *.\n+\tRename param \"after\" to \"uncast_after\", reintroducing \"after\" as a\n+\tlocal rtx_insn * with a checked cast.\n+\t(emit_pattern_after_noloc): Rename param \"after\" to \"uncast_after\",\n+\treintroducing \"after\" as a local rtx_insn * with a checked cast.\n+\tStrengthen local \"last\" from rtx to rtx_insn * and remove the\n+\tnow-redundant checked casts.\n+\t(copy_delay_slot_insn): Strengthen return type and param from rtx\n+\tto rtx_insn *.\n+\n+\t* haifa-sched.c (reemit_notes): Strengthen params \"insn\" and\n+\t\"last\" from rtx to rtx_insn *.\n+\n 2014-08-28  David Malcolm  <dmalcolm@redhat.com>\n \n \t* emit-rtl.h (copy_delay_slot_insn): Strengthen return type and"}, {"sha": "9ed41ef245dcb2be63c9d24d00003113db113068", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6eda746185997c7c42ee8691761cb7c3c7d0ce1/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6eda746185997c7c42ee8691761cb7c3c7d0ce1/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=e6eda746185997c7c42ee8691761cb7c3c7d0ce1", "patch": "@@ -4591,23 +4591,24 @@ c6x_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n    first in the original stream.  */\n \n static void\n-gen_one_bundle (rtx *slot, int n_filled, int real_first)\n+gen_one_bundle (rtx_insn **slot, int n_filled, int real_first)\n {\n-  rtx bundle;\n-  rtx t;\n+  rtx seq;\n+  rtx_insn *bundle;\n+  rtx_insn *t;\n   int i;\n \n-  bundle = gen_rtx_SEQUENCE (VOIDmode, gen_rtvec_v (n_filled, slot));\n-  bundle = make_insn_raw (bundle);\n+  seq = gen_rtx_SEQUENCE (VOIDmode, gen_rtvec_v (n_filled, slot));\n+  bundle = make_insn_raw (seq);\n   BLOCK_FOR_INSN (bundle) = BLOCK_FOR_INSN (slot[0]);\n   INSN_LOCATION (bundle) = INSN_LOCATION (slot[0]);\n   SET_PREV_INSN (bundle) = SET_PREV_INSN (slot[real_first]);\n \n-  t = NULL_RTX;\n+  t = NULL;\n \n   for (i = 0; i < n_filled; i++)\n     {\n-      rtx insn = slot[i];\n+      rtx_insn *insn = slot[i];\n       remove_insn (insn);\n       SET_PREV_INSN (insn) = t ? t : PREV_INSN (bundle);\n       if (t != NULL_RTX)\n@@ -4630,14 +4631,14 @@ static void\n c6x_gen_bundles (void)\n {\n   basic_block bb;\n-  rtx insn, next, last_call;\n+  rtx_insn *insn, *next, *last_call;\n \n   FOR_EACH_BB_FN (bb, cfun)\n     {\n-      rtx insn, next;\n+      rtx_insn *insn, *next;\n       /* The machine is eight insns wide.  We can have up to six shadow\n \t insns, plus an extra slot for merging the jump shadow.  */\n-      rtx slot[15];\n+      rtx_insn *slot[15];\n       int n_filled = 0;\n       int first_slot = 0;\n \n@@ -4700,7 +4701,7 @@ c6x_gen_bundles (void)\n   /* Bundling, and emitting nops, can separate\n      NOTE_INSN_CALL_ARG_LOCATION from the corresponding calls.  Fix\n      that up here.  */\n-  last_call = NULL_RTX;\n+  last_call = NULL;\n   for (insn = get_insns (); insn; insn = next)\n     {\n       next = NEXT_INSN (insn);\n@@ -4855,13 +4856,13 @@ static void\n reorg_split_calls (rtx *call_labels)\n {\n   unsigned int reservation_mask = 0;\n-  rtx insn = get_insns ();\n+  rtx_insn *insn = get_insns ();\n   gcc_assert (NOTE_P (insn));\n   insn = next_real_insn (insn);\n   while (insn)\n     {\n       int uid;\n-      rtx next = next_real_insn (insn);\n+      rtx_insn *next = next_real_insn (insn);\n \n       if (DEBUG_INSN_P (insn))\n \tgoto done;\n@@ -4886,7 +4887,7 @@ reorg_split_calls (rtx *call_labels)\n \t      else\n \t\t{\n \t\t  rtx t;\n-\t\t  rtx slot[4];\n+\t\t  rtx_insn *slot[4];\n \t\t  emit_label_after (label, insn);\n \n \t\t  /* Bundle the call and its delay slots into a single"}, {"sha": "ac3179455574baeffd25a77a987d430dd9bb68fc", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6eda746185997c7c42ee8691761cb7c3c7d0ce1/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6eda746185997c7c42ee8691761cb7c3c7d0ce1/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=e6eda746185997c7c42ee8691761cb7c3c7d0ce1", "patch": "@@ -105,7 +105,7 @@ static unsigned int frv_type_to_unit[TYPE_UNKNOWN + 1];\n \n /* An array of dummy nop INSNs, one for each type of nop that the\n    target supports.  */\n-static GTY(()) rtx frv_nops[NUM_NOP_PATTERNS];\n+static GTY(()) rtx_insn *frv_nops[NUM_NOP_PATTERNS];\n \n /* The number of nop instructions in frv_nops[].  */\n static unsigned int frv_num_nops;\n@@ -1405,7 +1405,7 @@ frv_function_contains_far_jump (void)\n static void\n frv_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n {\n-  rtx insn, next, last_call;\n+  rtx_insn *insn, *next, *last_call;\n \n   /* If no frame was created, check whether the function uses a call\n      instruction to implement a far jump.  If so, save the link in gr3 and\n@@ -1415,7 +1415,7 @@ frv_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n      a stack frame.  */\n   if (frv_stack_info ()->total_size == 0 && frv_function_contains_far_jump ())\n     {\n-      rtx insn;\n+      rtx_insn *insn;\n \n       /* Just to check that the above comment is true.  */\n       gcc_assert (!df_regs_ever_live_p (GPR_FIRST + 3));\n@@ -1450,7 +1450,7 @@ frv_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n \n   /* Locate CALL_ARG_LOCATION notes that have been misplaced\n      and move them back to where they should be located.  */\n-  last_call = NULL_RTX;\n+  last_call = NULL;\n   for (insn = get_insns (); insn; insn = next)\n     {\n       next = NEXT_INSN (insn);\n@@ -8161,10 +8161,10 @@ frv_reorg_packet (void)\n static void\n frv_register_nop (rtx nop)\n {\n-  nop = make_insn_raw (nop);\n-  SET_NEXT_INSN (nop) = 0;\n-  SET_PREV_INSN (nop) = 0;\n-  frv_nops[frv_num_nops++] = nop;\n+  rtx_insn *nop_insn = make_insn_raw (nop);\n+  SET_NEXT_INSN (nop_insn) = 0;\n+  SET_PREV_INSN (nop_insn) = 0;\n+  frv_nops[frv_num_nops++] = nop_insn;\n }\n \n /* Implement TARGET_MACHINE_DEPENDENT_REORG.  Divide the instructions"}, {"sha": "745fe1f1a7f7f9178ff5c5042f2758488ba7ee1a", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6eda746185997c7c42ee8691761cb7c3c7d0ce1/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6eda746185997c7c42ee8691761cb7c3c7d0ce1/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=e6eda746185997c7c42ee8691761cb7c3c7d0ce1", "patch": "@@ -6804,38 +6804,42 @@ mep_ipipe_ldc_p (rtx_insn *insn)\n    Emit the bundle in place of COP and return it.  */\n \n static rtx_insn *\n-mep_make_bundle (rtx core, rtx_insn *cop)\n+mep_make_bundle (rtx core_insn_or_pat, rtx_insn *cop)\n {\n   rtx seq;\n+  rtx_insn *core_insn;\n   rtx_insn *insn;\n \n   /* If CORE is an existing instruction, remove it, otherwise put\n      the new pattern in an INSN harness.  */\n-  if (INSN_P (core))\n-    remove_insn (core);\n+  if (INSN_P (core_insn_or_pat))\n+    {\n+      core_insn = as_a <rtx_insn *> (core_insn_or_pat);\n+      remove_insn (core_insn);\n+    }\n   else\n-    core = make_insn_raw (core);\n+    core_insn = make_insn_raw (core_insn_or_pat);\n \n   /* Generate the bundle sequence and replace COP with it.  */\n-  seq = gen_rtx_SEQUENCE (VOIDmode, gen_rtvec (2, core, cop));\n+  seq = gen_rtx_SEQUENCE (VOIDmode, gen_rtvec (2, core_insn, cop));\n   insn = emit_insn_after (seq, cop);\n   remove_insn (cop);\n \n   /* Set up the links of the insns inside the SEQUENCE.  */\n-  SET_PREV_INSN (core) = PREV_INSN (insn);\n-  SET_NEXT_INSN (core) = cop;\n-  SET_PREV_INSN (cop) = core;\n+  SET_PREV_INSN (core_insn) = PREV_INSN (insn);\n+  SET_NEXT_INSN (core_insn) = cop;\n+  SET_PREV_INSN (cop) = core_insn;\n   SET_NEXT_INSN (cop) = NEXT_INSN (insn);\n \n   /* Set the VLIW flag for the coprocessor instruction.  */\n-  PUT_MODE (core, VOIDmode);\n+  PUT_MODE (core_insn, VOIDmode);\n   PUT_MODE (cop, BImode);\n \n   /* Derive a location for the bundle.  Individual instructions cannot\n      have their own location because there can be no assembler labels\n-     between CORE and COP.  */\n-  INSN_LOCATION (insn) = INSN_LOCATION (INSN_LOCATION (core) ? core : cop);\n-  INSN_LOCATION (core) = 0;\n+     between CORE_INSN and COP.  */\n+  INSN_LOCATION (insn) = INSN_LOCATION (INSN_LOCATION (core_insn) ? core_insn : cop);\n+  INSN_LOCATION (core_insn) = 0;\n   INSN_LOCATION (cop) = 0;\n \n   return insn;"}, {"sha": "8adef350764d012ac67c3e40c8fcc8d7cbc4afe3", "filename": "gcc/config/picochip/picochip.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6eda746185997c7c42ee8691761cb7c3c7d0ce1/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6eda746185997c7c42ee8691761cb7c3c7d0ce1/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.c?ref=e6eda746185997c7c42ee8691761cb7c3c7d0ce1", "patch": "@@ -3177,8 +3177,8 @@ reorder_var_tracking_notes (void)\n \n   FOR_EACH_BB_FN (bb, cfun)\n     {\n-      rtx insn, next, last_insn = NULL_RTX;\n-      rtx queue = NULL_RTX;\n+      rtx_insn *insn, *next, *last_insn = NULL;\n+      rtx_insn *queue = NULL;\n \n       /* Iterate through the bb and find the last non-debug insn */\n       for (insn = BB_HEAD (bb); insn != NEXT_INSN(BB_END (bb)); insn = NEXT_INSN(insn))\n@@ -3198,7 +3198,7 @@ reorder_var_tracking_notes (void)\n             {\n               while (queue)\n                 {\n-                  rtx next_queue = PREV_INSN (queue);\n+                  rtx_insn *next_queue = PREV_INSN (queue);\n                   SET_PREV_INSN (NEXT_INSN(insn)) = queue;\n                   SET_NEXT_INSN(queue) = NEXT_INSN(insn);\n                   SET_PREV_INSN(queue) = insn;\n@@ -3215,7 +3215,7 @@ reorder_var_tracking_notes (void)\n                 {\n                   while (queue)\n                     {\n-                      rtx next_queue = PREV_INSN (queue);\n+                      rtx_insn *next_queue = PREV_INSN (queue);\n                       SET_NEXT_INSN (PREV_INSN(insn)) = queue;\n                       SET_PREV_INSN (queue) = PREV_INSN(insn);\n                       SET_PREV_INSN (insn) = queue;\n@@ -3226,7 +3226,7 @@ reorder_var_tracking_notes (void)\n             }\n           else if (NOTE_P (insn))\n             {\n-               rtx prev = PREV_INSN (insn);\n+               rtx_insn *prev = PREV_INSN (insn);\n                SET_PREV_INSN (next) = prev;\n                SET_NEXT_INSN (prev) = next;\n                /* Ignore call_arg notes. They are expected to be just after the"}, {"sha": "8ec78a9f3c89f56aa8f73e5dc44bf27f68ebb101", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 42, "deletions": 15, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6eda746185997c7c42ee8691761cb7c3c7d0ce1/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6eda746185997c7c42ee8691761cb7c3c7d0ce1/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=e6eda746185997c7c42ee8691761cb7c3c7d0ce1", "patch": "@@ -933,6 +933,25 @@ gen_rtvec_v (int n, rtx *argp)\n \n   return rt_val;\n }\n+\n+rtvec\n+gen_rtvec_v (int n, rtx_insn **argp)\n+{\n+  int i;\n+  rtvec rt_val;\n+\n+  /* Don't allocate an empty rtvec...  */\n+  if (n == 0)\n+    return NULL_RTVEC;\n+\n+  rt_val = rtvec_alloc (n);\n+\n+  for (i = 0; i < n; i++)\n+    rt_val->elem[i] = *argp++;\n+\n+  return rt_val;\n+}\n+\n \f\n /* Return the number of bytes between the start of an OUTER_MODE\n    in-memory value and the start of an INNER_MODE in-memory value,\n@@ -3885,22 +3904,25 @@ link_insn_into_chain (rtx_insn *insn, rtx_insn *prev, rtx_insn *next)\n       SET_NEXT_INSN (prev) = insn;\n       if (NONJUMP_INSN_P (prev) && GET_CODE (PATTERN (prev)) == SEQUENCE)\n \t{\n-\t  rtx sequence = PATTERN (prev);\n-\t  SET_NEXT_INSN (XVECEXP (sequence, 0, XVECLEN (sequence, 0) - 1)) = insn;\n+\t  rtx_sequence *sequence = as_a <rtx_sequence *> (PATTERN (prev));\n+\t  SET_NEXT_INSN (sequence->insn (sequence->len () - 1)) = insn;\n \t}\n     }\n   if (next != NULL)\n     {\n       SET_PREV_INSN (next) = insn;\n       if (NONJUMP_INSN_P (next) && GET_CODE (PATTERN (next)) == SEQUENCE)\n-\tSET_PREV_INSN (XVECEXP (PATTERN (next), 0, 0)) = insn;\n+\t{\n+\t  rtx_sequence *sequence = as_a <rtx_sequence *> (PATTERN (next));\n+\t  SET_PREV_INSN (sequence->insn (0)) = insn;\n+\t}\n     }\n \n   if (NONJUMP_INSN_P (insn) && GET_CODE (PATTERN (insn)) == SEQUENCE)\n     {\n-      rtx sequence = PATTERN (insn);\n-      SET_PREV_INSN (XVECEXP (sequence, 0, 0)) = prev;\n-      SET_NEXT_INSN (XVECEXP (sequence, 0, XVECLEN (sequence, 0) - 1)) = next;\n+      rtx_sequence *sequence = as_a <rtx_sequence *> (PATTERN (insn));\n+      SET_PREV_INSN (sequence->insn (0)) = prev;\n+      SET_NEXT_INSN (sequence->insn (sequence->len () - 1)) = next;\n     }\n }\n \n@@ -4079,8 +4101,8 @@ remove_insn (rtx insn)\n       SET_NEXT_INSN (prev) = next;\n       if (NONJUMP_INSN_P (prev) && GET_CODE (PATTERN (prev)) == SEQUENCE)\n \t{\n-\t  rtx sequence = PATTERN (prev);\n-\t  SET_NEXT_INSN (XVECEXP (sequence, 0, XVECLEN (sequence, 0) - 1)) = next;\n+\t  rtx_sequence *sequence = as_a <rtx_sequence *> (PATTERN (prev));\n+\t  SET_NEXT_INSN (sequence->insn (sequence->len () - 1)) = next;\n \t}\n     }\n   else if (get_insns () == insn)\n@@ -4107,7 +4129,10 @@ remove_insn (rtx insn)\n     {\n       SET_PREV_INSN (next) = prev;\n       if (NONJUMP_INSN_P (next) && GET_CODE (PATTERN (next)) == SEQUENCE)\n-\tSET_PREV_INSN (XVECEXP (PATTERN (next), 0, 0)) = prev;\n+\t{\n+\t  rtx_sequence *sequence = as_a <rtx_sequence *> (PATTERN (next));\n+\t  SET_PREV_INSN (sequence->insn (0)) = prev;\n+\t}\n     }\n   else if (get_last_insn () == insn)\n     set_last_insn (prev);\n@@ -4387,9 +4412,10 @@ emit_label_before (rtx label, rtx before)\n /* Helper for emit_insn_after, handles lists of instructions\n    efficiently.  */\n \n-static rtx\n-emit_insn_after_1 (rtx_insn *first, rtx after, basic_block bb)\n+static rtx_insn *\n+emit_insn_after_1 (rtx_insn *first, rtx uncast_after, basic_block bb)\n {\n+  rtx_insn *after = safe_as_a <rtx_insn *> (uncast_after);\n   rtx_insn *last;\n   rtx_insn *after_after;\n   if (!bb && !BARRIER_P (after))\n@@ -4431,15 +4457,16 @@ emit_insn_after_1 (rtx_insn *first, rtx after, basic_block bb)\n }\n \n static rtx_insn *\n-emit_pattern_after_noloc (rtx x, rtx after, basic_block bb,\n+emit_pattern_after_noloc (rtx x, rtx uncast_after, basic_block bb,\n \t\t\t  rtx_insn *(*make_raw)(rtx))\n {\n-  rtx last = after;\n+  rtx_insn *after = safe_as_a <rtx_insn *> (uncast_after);\n+  rtx_insn *last = after;\n \n   gcc_assert (after);\n \n   if (x == NULL_RTX)\n-    return safe_as_a <rtx_insn *> (last);\n+    return last;\n \n   switch (GET_CODE (x))\n     {\n@@ -4465,7 +4492,7 @@ emit_pattern_after_noloc (rtx x, rtx after, basic_block bb,\n       break;\n     }\n \n-  return safe_as_a <rtx_insn *> (last);\n+  return last;\n }\n \n /* Make X be output after the insn AFTER and set the BB of insn.  If"}, {"sha": "576ef564dba915ed6e554aceb2fa31ee03761bc9", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6eda746185997c7c42ee8691761cb7c3c7d0ce1/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6eda746185997c7c42ee8691761cb7c3c7d0ce1/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=e6eda746185997c7c42ee8691761cb7c3c7d0ce1", "patch": "@@ -5243,7 +5243,7 @@ reemit_notes (rtx_insn *insn)\n \n /* Move INSN.  Reemit notes if needed.  Update CFG, if needed.  */\n static void\n-move_insn (rtx_insn *insn, rtx last, rtx nt)\n+move_insn (rtx_insn *insn, rtx_insn *last, rtx nt)\n {\n   if (PREV_INSN (insn) != last)\n     {"}, {"sha": "3a02132838396e0991eada78c72f3fec801ff298", "filename": "gcc/rtl.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6eda746185997c7c42ee8691761cb7c3c7d0ce1/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6eda746185997c7c42ee8691761cb7c3c7d0ce1/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=e6eda746185997c7c42ee8691761cb7c3c7d0ce1", "patch": "@@ -1327,7 +1327,7 @@ inline rtx_insn *PREV_INSN (const_rtx insn)\n   return safe_as_a <rtx_insn *> (prev);\n }\n \n-inline rtx& SET_PREV_INSN (rtx insn)\n+inline rtx& SET_PREV_INSN (rtx_insn *insn)\n {\n   return XEXP (insn, 0);\n }\n@@ -1338,7 +1338,7 @@ inline rtx_insn *NEXT_INSN (const_rtx insn)\n   return safe_as_a <rtx_insn *> (next);\n }\n \n-inline rtx& SET_NEXT_INSN (rtx insn)\n+inline rtx& SET_NEXT_INSN (rtx_insn *insn)\n {\n   return XEXP (insn, 1);\n }\n@@ -2498,6 +2498,7 @@ extern int rtx_equal_p (const_rtx, const_rtx);\n \n /* In emit-rtl.c */\n extern rtvec gen_rtvec_v (int, rtx *);\n+extern rtvec gen_rtvec_v (int, rtx_insn **);\n extern rtx gen_reg_rtx (enum machine_mode);\n extern rtx gen_rtx_REG_offset (rtx, enum machine_mode, unsigned int, int);\n extern rtx gen_reg_rtx_offset (rtx, enum machine_mode, int);"}]}