{"sha": "91b0989ef6b76a65e56a59420aa9a85a5bfa5ba5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFiMDk4OWVmNmI3NmE2NWU1NmE1OTQyMGFhOWE4NWE1YmZhNWJhNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-12-28T12:21:45Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-12-28T12:21:45Z"}, "message": "(yylex): Improve error message for bogus numbers.\n\nConsolidate duplicated code.\n\nFrom-SVN: r10892", "tree": {"sha": "48640af19b4a94b0ad8caa83de0ab31c501db18a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48640af19b4a94b0ad8caa83de0ab31c501db18a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91b0989ef6b76a65e56a59420aa9a85a5bfa5ba5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91b0989ef6b76a65e56a59420aa9a85a5bfa5ba5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91b0989ef6b76a65e56a59420aa9a85a5bfa5ba5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91b0989ef6b76a65e56a59420aa9a85a5bfa5ba5/comments", "author": null, "committer": null, "parents": [{"sha": "70ce27baada6cf22edc3f1971b57d088e5824557", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70ce27baada6cf22edc3f1971b57d088e5824557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70ce27baada6cf22edc3f1971b57d088e5824557"}], "stats": {"total": 49, "additions": 10, "deletions": 39}, "files": [{"sha": "210c365dda89ac31622d731688af9cb827e2f89f", "filename": "gcc/c-lex.c", "status": "modified", "additions": 10, "deletions": 39, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91b0989ef6b76a65e56a59420aa9a85a5bfa5ba5/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91b0989ef6b76a65e56a59420aa9a85a5bfa5ba5/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=91b0989ef6b76a65e56a59420aa9a85a5bfa5ba5", "patch": "@@ -1282,7 +1282,7 @@ yylex ()\n \tif (floatflag != NOT_FLOAT)\n \t  {\n \t    tree type = double_type_node;\n-\t    int garbage_chars = 0, exceeds_double = 0;\n+\t    int exceeds_double = 0;\n \t    int imag = 0;\n \t    REAL_VALUE_TYPE value;\n \t    jmp_buf handler;\n@@ -1418,19 +1418,6 @@ yylex ()\n \t\t  }\n \t      }\n #endif\n-\t    garbage_chars = 0;\n-\t    while (isalnum (c) || c == '.' || c == '_'\n-\t\t   || (!flag_traditional && (c == '+' || c == '-')\n-\t\t       && (p[-1] == 'e' || p[-1] == 'E')))\n-\t      {\n-\t\tif (p >= token_buffer + maxtoken - 3)\n-\t\t  p = extend_token_buffer (p);\n-\t\t*p++ = c;\n-\t\tc = getc (finput);\n-\t\tgarbage_chars++;\n-\t      }\n-\t    if (garbage_chars > 0)\n-\t      error (\"garbage at end of number\");\n \n \t    /* If the result is not a number, assume it must have been\n \t       due to some error message above, so silently convert\n@@ -1444,9 +1431,6 @@ yylex ()\n \t\t\t\t\t    build_real (type, value));\n \t    else\n \t      yylval.ttype = build_real (type, value);\n-\n-\t    ungetc (c, finput);\n-\t    *p = 0;\n \t  }\n \telse\n \t  {\n@@ -1487,32 +1471,13 @@ yylex ()\n \t\t    spec_imag = 1;\n \t\t  }\n \t\telse\n-\t\t  {\n-\t\t    if (isalnum (c) || c == '.' || c == '_'\n-\t\t\t|| (!flag_traditional && (c == '+' || c == '-')\n-\t\t\t    && (p[-1] == 'e' || p[-1] == 'E')))\n-\t\t      {\n-\t\t\terror (\"garbage at end of number\");\n-\t\t\twhile (isalnum (c) || c == '.' || c == '_'\n-\t\t\t       || (!flag_traditional && (c == '+' || c == '-')\n-\t\t\t\t   && (p[-1] == 'e' || p[-1] == 'E')))\n-\t\t\t  {\n-\t\t\t    if (p >= token_buffer + maxtoken - 3)\n-\t\t\t      p = extend_token_buffer (p);\n-\t\t\t    *p++ = c;\n-\t\t\t    c = getc (finput);\n-\t\t\t  }\n-\t\t      }\n-\t\t    break;\n-\t\t  }\n+\t\t  break;\n \t\tif (p >= token_buffer + maxtoken - 3)\n \t\t  p = extend_token_buffer (p);\n \t\t*p++ = c;\n \t\tc = getc (finput);\n \t      }\n \n-\t    ungetc (c, finput);\n-\n \t    /* If the constant is not long long and it won't fit in an\n \t       unsigned long, or if the constant is long long and won't fit\n \t       in an unsigned long long, then warn that the constant is out\n@@ -1648,10 +1613,16 @@ yylex ()\n \t      }\n \t    else\n \t      TREE_TYPE (yylval.ttype) = type;\n-\n-\t    *p = 0;\n \t  }\n \n+\tungetc (c, finput);\n+\t*p = 0;\n+\n+\tif (isalnum (c) || c == '.' || c == '_'\n+\t    || (!flag_traditional && (c == '-' || c == '+')\n+\t\t&& (p[-1] == 'e' || p[-1] == 'E')))\n+\t  error (\"missing white space after number `%s'\", token_buffer);\n+\n \tvalue = CONSTANT; break;\n       }\n "}]}