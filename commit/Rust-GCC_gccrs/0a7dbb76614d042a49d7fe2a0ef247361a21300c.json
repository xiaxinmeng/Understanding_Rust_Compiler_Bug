{"sha": "0a7dbb76614d042a49d7fe2a0ef247361a21300c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE3ZGJiNzY2MTRkMDQyYTQ5ZDdmZTJhMGVmMjQ3MzYxYTIxMzAwYw==", "commit": {"author": {"name": "Greta Yorsh", "email": "greta.yorsh@arm.com", "date": "2013-05-01T10:25:28Z"}, "committer": {"name": "Greta Yorsh", "email": "gretay@gcc.gnu.org", "date": "2013-05-01T10:25:28Z"}, "message": "thumb2.md (thumb2_smaxsi3,thumb2_sminsi3): Convert define_insn to define_insn_and_split.\n\n2013-05-01  Greta Yorsh  <Greta.Yorsh@arm.com>\n\n\t* config/arm/thumb2.md (thumb2_smaxsi3,thumb2_sminsi3): Convert\n\tdefine_insn to define_insn_and_split.\n\t(thumb32_umaxsi3,thumb2_uminsi3): Likewise.\n\t(thumb2_negdi2,thumb2_abssi2,thumb2_neg_abssi2): Likewise.\n\t(thumb2_mov_scc,thumb2_mov_negscc,thumb2_mov_notscc): Likewise.\n\t(thumb2_movsicc_insn,thumb2_and_scc,thumb2_ior_scc): Likewise.\n\t(thumb2_negscc): Likewise.\n\nFrom-SVN: r198489", "tree": {"sha": "3241fdc11e0406a9a615d045dfced57bd0b3b22f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3241fdc11e0406a9a615d045dfced57bd0b3b22f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a7dbb76614d042a49d7fe2a0ef247361a21300c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a7dbb76614d042a49d7fe2a0ef247361a21300c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a7dbb76614d042a49d7fe2a0ef247361a21300c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a7dbb76614d042a49d7fe2a0ef247361a21300c/comments", "author": null, "committer": null, "parents": [{"sha": "57c16a5eb68d20cf87ee79558de7278f650a40b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57c16a5eb68d20cf87ee79558de7278f650a40b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57c16a5eb68d20cf87ee79558de7278f650a40b4"}], "stats": {"total": 402, "additions": 339, "deletions": 63}, "files": [{"sha": "aa78c3807779be18248a0496960cea030a1b003f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a7dbb76614d042a49d7fe2a0ef247361a21300c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a7dbb76614d042a49d7fe2a0ef247361a21300c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a7dbb76614d042a49d7fe2a0ef247361a21300c", "patch": "@@ -1,3 +1,13 @@\n+2013-05-01  Greta Yorsh  <Greta.Yorsh@arm.com>\n+\n+\t* config/arm/thumb2.md (thumb2_smaxsi3,thumb2_sminsi3): Convert\n+\tdefine_insn to define_insn_and_split.\n+\t(thumb32_umaxsi3,thumb2_uminsi3): Likewise.\n+\t(thumb2_negdi2,thumb2_abssi2,thumb2_neg_abssi2): Likewise.\n+\t(thumb2_mov_scc,thumb2_mov_negscc,thumb2_mov_notscc): Likewise.\n+\t(thumb2_movsicc_insn,thumb2_and_scc,thumb2_ior_scc): Likewise.\n+\t(thumb2_negscc): Likewise.\n+\n 2013-04-30  Greta Yorsh  <Greta.Yorsh@arm.com>\n \n \t* config/arm/thumb2.md (thumb2_incscc, thumb2_decscc): Delete."}, {"sha": "ca4eedb037bc99a5c39d07652f2faf7f06fbcde9", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 329, "deletions": 63, "changes": 392, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a7dbb76614d042a49d7fe2a0ef247361a21300c/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a7dbb76614d042a49d7fe2a0ef247361a21300c/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=0a7dbb76614d042a49d7fe2a0ef247361a21300c", "patch": "@@ -38,96 +38,222 @@\n    (set_attr \"type\" \"alu_shift\")]\n )\n \n-(define_insn \"*thumb2_smaxsi3\"\n+(define_insn_and_split \"*thumb2_smaxsi3\"\n   [(set (match_operand:SI          0 \"s_register_operand\" \"=r,r,r\")\n \t(smax:SI (match_operand:SI 1 \"s_register_operand\"  \"0,r,?r\")\n \t\t (match_operand:SI 2 \"arm_rhs_operand\"    \"rI,0,rI\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_THUMB2\"\n-  \"@\n-   cmp\\\\t%1, %2\\;it\\\\tlt\\;movlt\\\\t%0, %2\n-   cmp\\\\t%1, %2\\;it\\\\tge\\;movge\\\\t%0, %1\n-   cmp\\\\t%1, %2\\;ite\\\\tge\\;movge\\\\t%0, %1\\;movlt\\\\t%0, %2\"\n+  \"#\"\n+  ; cmp\\\\t%1, %2\\;it\\\\tlt\\;movlt\\\\t%0, %2\n+  ; cmp\\\\t%1, %2\\;it\\\\tge\\;movge\\\\t%0, %1\n+  ; cmp\\\\t%1, %2\\;ite\\\\tge\\;movge\\\\t%0, %1\\;movlt\\\\t%0, %2\n+  \"TARGET_THUMB2\"\n+  [(set (reg:CC CC_REGNUM)\n+        (compare:CC (match_dup 1) (match_dup 2)))\n+   (set (match_dup 0)\n+        (if_then_else:SI (ge:SI (reg:CC CC_REGNUM) (const_int 0))\n+                         (match_dup 1)\n+                         (match_dup 2)))]\n+  \"\"\n   [(set_attr \"conds\" \"clob\")\n    (set_attr \"length\" \"10,10,14\")]\n )\n \n-(define_insn \"*thumb2_sminsi3\"\n+(define_insn_and_split \"*thumb2_sminsi3\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n \t(smin:SI (match_operand:SI 1 \"s_register_operand\" \"0,r,?r\")\n \t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rI,0,rI\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_THUMB2\"\n-  \"@\n-   cmp\\\\t%1, %2\\;it\\\\tge\\;movge\\\\t%0, %2\n-   cmp\\\\t%1, %2\\;it\\\\tlt\\;movlt\\\\t%0, %1\n-   cmp\\\\t%1, %2\\;ite\\\\tlt\\;movlt\\\\t%0, %1\\;movge\\\\t%0, %2\"\n+  \"#\"\n+   ; cmp\\\\t%1, %2\\;it\\\\tge\\;movge\\\\t%0, %2\n+   ; cmp\\\\t%1, %2\\;it\\\\tlt\\;movlt\\\\t%0, %1\n+   ; cmp\\\\t%1, %2\\;ite\\\\tlt\\;movlt\\\\t%0, %1\\;movge\\\\t%0, %2\"\n+  \"TARGET_THUMB2\"\n+  [(set (reg:CC CC_REGNUM)\n+        (compare:CC (match_dup 1) (match_dup 2)))\n+   (set (match_dup 0)\n+        (if_then_else:SI (lt:SI (reg:CC CC_REGNUM) (const_int 0))\n+                         (match_dup 1)\n+                         (match_dup 2)))]\n+  \"\"\n   [(set_attr \"conds\" \"clob\")\n    (set_attr \"length\" \"10,10,14\")]\n )\n \n-(define_insn \"*thumb32_umaxsi3\"\n+(define_insn_and_split \"*thumb32_umaxsi3\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n \t(umax:SI (match_operand:SI 1 \"s_register_operand\" \"0,r,?r\")\n \t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rI,0,rI\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_THUMB2\"\n-  \"@\n-   cmp\\\\t%1, %2\\;it\\\\tcc\\;movcc\\\\t%0, %2\n-   cmp\\\\t%1, %2\\;it\\\\tcs\\;movcs\\\\t%0, %1\n-   cmp\\\\t%1, %2\\;ite\\\\tcs\\;movcs\\\\t%0, %1\\;movcc\\\\t%0, %2\"\n+  \"#\"\n+   ; cmp\\\\t%1, %2\\;it\\\\tcc\\;movcc\\\\t%0, %2\n+   ; cmp\\\\t%1, %2\\;it\\\\tcs\\;movcs\\\\t%0, %1\n+   ; cmp\\\\t%1, %2\\;ite\\\\tcs\\;movcs\\\\t%0, %1\\;movcc\\\\t%0, %2\"\n+  \"TARGET_THUMB2\"\n+  [(set (reg:CC CC_REGNUM)\n+        (compare:CC (match_dup 1) (match_dup 2)))\n+   (set (match_dup 0)\n+        (if_then_else:SI (geu:SI (reg:CC CC_REGNUM) (const_int 0))\n+                         (match_dup 1)\n+                         (match_dup 2)))]\n+  \"\"\n   [(set_attr \"conds\" \"clob\")\n    (set_attr \"length\" \"10,10,14\")]\n )\n \n-(define_insn \"*thumb2_uminsi3\"\n+(define_insn_and_split \"*thumb2_uminsi3\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n \t(umin:SI (match_operand:SI 1 \"s_register_operand\" \"0,r,?r\")\n \t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rI,0,rI\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_THUMB2\"\n-  \"@\n-   cmp\\\\t%1, %2\\;it\\\\tcs\\;movcs\\\\t%0, %2\n-   cmp\\\\t%1, %2\\;it\\\\tcc\\;movcc\\\\t%0, %1\n-   cmp\\\\t%1, %2\\;ite\\\\tcc\\;movcc\\\\t%0, %1\\;movcs\\\\t%0, %2\"\n+  \"#\"\n+   ; cmp\\\\t%1, %2\\;it\\\\tcs\\;movcs\\\\t%0, %2\n+   ; cmp\\\\t%1, %2\\;it\\\\tcc\\;movcc\\\\t%0, %1\n+   ; cmp\\\\t%1, %2\\;ite\\\\tcc\\;movcc\\\\t%0, %1\\;movcs\\\\t%0, %2\"\n+  \"TARGET_THUMB2\"\n+  [(set (reg:CC CC_REGNUM)\n+        (compare:CC (match_dup 1) (match_dup 2)))\n+   (set (match_dup 0)\n+        (if_then_else:SI (ltu:SI (reg:CC CC_REGNUM) (const_int 0))\n+                         (match_dup 1)\n+                         (match_dup 2)))]\n+  \"\"\n   [(set_attr \"conds\" \"clob\")\n    (set_attr \"length\" \"10,10,14\")]\n )\n \n ;; Thumb-2 does not have rsc, so use a clever trick with shifter operands.\n-(define_insn \"*thumb2_negdi2\"\n+(define_insn_and_split \"*thumb2_negdi2\"\n   [(set (match_operand:DI         0 \"s_register_operand\" \"=&r,r\")\n \t(neg:DI (match_operand:DI 1 \"s_register_operand\"  \"?r,0\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_THUMB2\"\n-  \"negs\\\\t%Q0, %Q1\\;sbc\\\\t%R0, %R1, %R1, lsl #1\"\n+  \"#\" ; negs\\\\t%Q0, %Q1\\;sbc\\\\t%R0, %R1, %R1, lsl #1\n+  \"&& reload_completed\"\n+  [(parallel [(set (reg:CC CC_REGNUM)\n+\t\t   (compare:CC (const_int 0) (match_dup 1)))\n+\t      (set (match_dup 0) (minus:SI (const_int 0) (match_dup 1)))])\n+   (set (match_dup 2) (minus:SI (minus:SI (match_dup 3)\n+                                          (ashift:SI (match_dup 3)\n+                                                     (const_int 1)))\n+                                (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))]\n+  {\n+    operands[2] = gen_highpart (SImode, operands[0]);\n+    operands[0] = gen_lowpart (SImode, operands[0]);\n+    operands[3] = gen_highpart (SImode, operands[1]);\n+    operands[1] = gen_lowpart (SImode, operands[1]);\n+  }\n   [(set_attr \"conds\" \"clob\")\n    (set_attr \"length\" \"8\")]\n )\n \n-(define_insn \"*thumb2_abssi2\"\n+(define_insn_and_split \"*thumb2_abssi2\"\n   [(set (match_operand:SI         0 \"s_register_operand\" \"=r,&r\")\n \t(abs:SI (match_operand:SI 1 \"s_register_operand\" \"0,r\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_THUMB2\"\n-  \"@\n-   cmp\\\\t%0, #0\\;it\\tlt\\;rsblt\\\\t%0, %0, #0\n-   eor%?\\\\t%0, %1, %1, asr #31\\;sub%?\\\\t%0, %0, %1, asr #31\"\n+  \"#\"\n+   ; cmp\\\\t%0, #0\\;it\\tlt\\;rsblt\\\\t%0, %0, #0\n+   ; eor%?\\\\t%0, %1, %1, asr #31\\;sub%?\\\\t%0, %0, %1, asr #31\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+  {\n+    /* if (which_alternative == 0) */\n+    if (REGNO(operands[0]) == REGNO(operands[1]))\n+      {\n+       rtx cc_reg = gen_rtx_REG (CCmode, CC_REGNUM);\n+\n+       emit_insn (gen_rtx_SET (VOIDmode,\n+                               cc_reg,\n+                               gen_rtx_COMPARE (CCmode, operands[0], const0_rtx)));\n+       emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n+                                    (gen_rtx_LT (SImode,\n+                                                 cc_reg,\n+                                                 const0_rtx)),\n+                                    (gen_rtx_SET (VOIDmode,\n+                                                  operands[0],\n+                                                  (gen_rtx_MINUS (SImode,\n+                                                                  const0_rtx,\n+                                                                  operands[1]))))));\n+      }\n+    else\n+      {\n+        emit_insn (gen_rtx_SET (VOIDmode,\n+                                operands[0],\n+                                gen_rtx_XOR (SImode,\n+                                             gen_rtx_ASHIFTRT (SImode,\n+                                                               operands[1],\n+                                                               GEN_INT (31)),\n+                                             operands[1])));\n+        emit_insn (gen_rtx_SET (VOIDmode,\n+                                operands[0],\n+                                gen_rtx_MINUS (SImode,\n+                                               operands[0],\n+                                               gen_rtx_ASHIFTRT (SImode,\n+                                                                 operands[1],\n+                                                                 GEN_INT (31)))));\n+      }\n+    DONE;\n+  }\n   [(set_attr \"conds\" \"clob,*\")\n    (set_attr \"shift\" \"1\")\n    (set_attr \"predicable\" \"no, yes\")\n    (set_attr \"ce_count\" \"2\")\n    (set_attr \"length\" \"10,8\")]\n )\n \n-(define_insn \"*thumb2_neg_abssi2\"\n+(define_insn_and_split \"*thumb2_neg_abssi2\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,&r\")\n \t(neg:SI (abs:SI (match_operand:SI 1 \"s_register_operand\" \"0,r\"))))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_THUMB2\"\n-  \"@\n-   cmp\\\\t%0, #0\\;it\\\\tgt\\;rsbgt\\\\t%0, %0, #0\n-   eor%?\\\\t%0, %1, %1, asr #31\\;rsb%?\\\\t%0, %0, %1, asr #31\"\n+  \"#\"\n+   ; cmp\\\\t%0, #0\\;it\\\\tgt\\;rsbgt\\\\t%0, %0, #0\n+   ; eor%?\\\\t%0, %1, %1, asr #31\\;rsb%?\\\\t%0, %0, %1, asr #31\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+  {\n+    /* if (which_alternative == 0) */\n+    if (REGNO(operands[0]) == REGNO(operands[1]))\n+      {\n+       rtx cc_reg = gen_rtx_REG (CCmode, CC_REGNUM);\n+\n+       emit_insn (gen_rtx_SET (VOIDmode,\n+                               cc_reg,\n+                               gen_rtx_COMPARE (CCmode, operands[0], const0_rtx)));\n+       emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n+                                    (gen_rtx_GT (SImode,\n+                                                 cc_reg,\n+                                                 const0_rtx)),\n+                                    (gen_rtx_SET (VOIDmode,\n+                                                  operands[0],\n+                                                  (gen_rtx_MINUS (SImode,\n+                                                                  const0_rtx,\n+                                                                  operands[1]))))));\n+      }\n+    else\n+      {\n+        emit_insn (gen_rtx_SET (VOIDmode,\n+                                operands[0],\n+                                gen_rtx_XOR (SImode,\n+                                             gen_rtx_ASHIFTRT (SImode,\n+                                                               operands[1],\n+                                                               GEN_INT (31)),\n+                                             operands[1])));\n+        emit_insn (gen_rtx_SET (VOIDmode,\n+                                operands[0],\n+                                gen_rtx_MINUS (SImode,\n+                                               gen_rtx_ASHIFTRT (SImode,\n+                                                                 operands[1],\n+                                                                 GEN_INT (31)),\n+                                               operands[0])));\n+      }\n+    DONE;\n+  }\n   [(set_attr \"conds\" \"clob,*\")\n    (set_attr \"shift\" \"1\")\n    (set_attr \"predicable\" \"no, yes\")\n@@ -210,37 +336,60 @@\n    (set_attr \"type\" \"alu_shift\")]\n )\n \n-(define_insn \"*thumb2_mov_scc\"\n+(define_insn_and_split \"*thumb2_mov_scc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(match_operator:SI 1 \"arm_comparison_operator\"\n \t [(match_operand 2 \"cc_register\" \"\") (const_int 0)]))]\n   \"TARGET_THUMB2\"\n-  \"ite\\\\t%D1\\;mov%D1\\\\t%0, #0\\;mov%d1\\\\t%0, #1\"\n+  \"#\"   ; \"ite\\\\t%D1\\;mov%D1\\\\t%0, #0\\;mov%d1\\\\t%0, #1\"\n+  \"TARGET_THUMB2\"\n+  [(set (match_dup 0)\n+        (if_then_else:SI (match_dup 1)\n+                         (const_int 1)\n+                         (const_int 0)))]\n+  \"\"\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"length\" \"10\")]\n )\n \n-(define_insn \"*thumb2_mov_negscc\"\n+(define_insn_and_split \"*thumb2_mov_negscc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(neg:SI (match_operator:SI 1 \"arm_comparison_operator\"\n \t\t [(match_operand 2 \"cc_register\" \"\") (const_int 0)])))]\n   \"TARGET_THUMB2\"\n-  \"ite\\\\t%D1\\;mov%D1\\\\t%0, #0\\;mvn%d1\\\\t%0, #0\"\n+  \"#\"   ; \"ite\\\\t%D1\\;mov%D1\\\\t%0, #0\\;mvn%d1\\\\t%0, #0\"\n+  \"TARGET_THUMB2\"\n+  [(set (match_dup 0)\n+        (if_then_else:SI (match_dup 1)\n+                         (match_dup 3)\n+                         (const_int 0)))]\n+  {\n+    operands[3] = GEN_INT (~0);\n+  }\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"length\" \"10\")]\n )\n \n-(define_insn \"*thumb2_mov_notscc\"\n+(define_insn_and_split \"*thumb2_mov_notscc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(not:SI (match_operator:SI 1 \"arm_comparison_operator\"\n \t\t [(match_operand 2 \"cc_register\" \"\") (const_int 0)])))]\n   \"TARGET_THUMB2\"\n-  \"ite\\\\t%D1\\;mvn%D1\\\\t%0, #0\\;mvn%d1\\\\t%0, #1\"\n+  \"#\"   ; \"ite\\\\t%D1\\;mvn%D1\\\\t%0, #0\\;mvn%d1\\\\t%0, #1\"\n+  \"TARGET_THUMB2\"\n+  [(set (match_dup 0)\n+        (if_then_else:SI (match_dup 1)\n+                         (match_dup 3)\n+                         (match_dup 4)))]\n+  {\n+    operands[3] = GEN_INT (~1);\n+    operands[4] = GEN_INT (~0);\n+  }\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"length\" \"10\")]\n )\n \n-(define_insn \"*thumb2_movsicc_insn\"\n+(define_insn_and_split \"*thumb2_movsicc_insn\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r,r,r,r,r,r\")\n \t(if_then_else:SI\n \t (match_operator 3 \"arm_comparison_operator\"\n@@ -253,10 +402,44 @@\n    it\\\\t%D3\\;mvn%D3\\\\t%0, #%B2\n    it\\\\t%d3\\;mov%d3\\\\t%0, %1\n    it\\\\t%d3\\;mvn%d3\\\\t%0, #%B1\n-   ite\\\\t%d3\\;mov%d3\\\\t%0, %1\\;mov%D3\\\\t%0, %2\n-   ite\\\\t%d3\\;mov%d3\\\\t%0, %1\\;mvn%D3\\\\t%0, #%B2\n-   ite\\\\t%d3\\;mvn%d3\\\\t%0, #%B1\\;mov%D3\\\\t%0, %2\n-   ite\\\\t%d3\\;mvn%d3\\\\t%0, #%B1\\;mvn%D3\\\\t%0, #%B2\"\n+   #\n+   #\n+   #\n+   #\"\n+   ; alt 4: ite\\\\t%d3\\;mov%d3\\\\t%0, %1\\;mov%D3\\\\t%0, %2\n+   ; alt 5: ite\\\\t%d3\\;mov%d3\\\\t%0, %1\\;mvn%D3\\\\t%0, #%B2\n+   ; alt 6: ite\\\\t%d3\\;mvn%d3\\\\t%0, #%B1\\;mov%D3\\\\t%0, %2\n+   ; alt 7: ite\\\\t%d3\\;mvn%d3\\\\t%0, #%B1\\;mvn%D3\\\\t%0, #%B2\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+  {\n+    enum rtx_code rev_code;\n+    enum machine_mode mode;\n+    rtx rev_cond;\n+\n+    emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n+                                  operands[3],\n+                                  gen_rtx_SET (VOIDmode,\n+                                               operands[0],\n+                                               operands[1])));\n+    rev_code = GET_CODE (operands[3]);\n+    mode = GET_MODE (operands[4]);\n+    if (mode == CCFPmode || mode == CCFPEmode)\n+      rev_code = reverse_condition_maybe_unordered (rev_code);\n+    else\n+      rev_code = reverse_condition (rev_code);\n+\n+    rev_cond = gen_rtx_fmt_ee (rev_code,\n+                               VOIDmode,\n+                               gen_rtx_REG (mode, CC_REGNUM),\n+                               const0_rtx);\n+    emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n+                                  rev_cond,\n+                                  gen_rtx_SET (VOIDmode,\n+                                               operands[0],\n+                                               operands[2])));\n+    DONE;\n+  }\n   [(set_attr \"length\" \"6,6,6,6,10,10,10,10\")\n    (set_attr \"conds\" \"use\")]\n )\n@@ -307,26 +490,58 @@\n ;; addresses will have the thumb bit set correctly.\n \n \n-(define_insn \"*thumb2_and_scc\"\n+(define_insn_and_split \"*thumb2_and_scc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(and:SI (match_operator:SI 1 \"arm_comparison_operator\"\n-\t\t [(match_operand 3 \"cc_register\" \"\") (const_int 0)])\n-\t\t(match_operand:SI 2 \"s_register_operand\" \"r\")))]\n+\t\t [(match_operand 2 \"cc_register\" \"\") (const_int 0)])\n+\t\t(match_operand:SI 3 \"s_register_operand\" \"r\")))]\n   \"TARGET_THUMB2\"\n-  \"ite\\\\t%D1\\;mov%D1\\\\t%0, #0\\;and%d1\\\\t%0, %2, #1\"\n+  \"#\"   ; \"ite\\\\t%D1\\;mov%D1\\\\t%0, #0\\;and%d1\\\\t%0, %3, #1\"\n+  \"&& reload_completed\"\n+  [(cond_exec (match_dup 5) (set (match_dup 0) (const_int 0)))\n+   (cond_exec (match_dup 4) (set (match_dup 0)\n+                                 (and:SI (match_dup 3) (const_int 1))))]\n+  {\n+    enum machine_mode mode = GET_MODE (operands[2]);\n+    enum rtx_code rc = GET_CODE (operands[1]);\n+\n+    operands[4] = gen_rtx_fmt_ee (rc, VOIDmode, operands[2], const0_rtx);\n+    if (mode == CCFPmode || mode == CCFPEmode)\n+      rc = reverse_condition_maybe_unordered (rc);\n+    else\n+      rc = reverse_condition (rc);\n+    operands[5] = gen_rtx_fmt_ee (rc, VOIDmode, operands[2], const0_rtx);\n+  }\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"length\" \"10\")]\n )\n \n-(define_insn \"*thumb2_ior_scc\"\n+(define_insn_and_split \"*thumb2_ior_scc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(ior:SI (match_operator:SI 2 \"arm_comparison_operator\"\n-\t\t [(match_operand 3 \"cc_register\" \"\") (const_int 0)])\n-\t\t(match_operand:SI 1 \"s_register_operand\" \"0,?r\")))]\n+\t(ior:SI (match_operator:SI 1 \"arm_comparison_operator\"\n+\t\t [(match_operand 2 \"cc_register\" \"\") (const_int 0)])\n+\t\t(match_operand:SI 3 \"s_register_operand\" \"0,?r\")))]\n   \"TARGET_THUMB2\"\n   \"@\n-   it\\\\t%d2\\;orr%d2\\\\t%0, %1, #1\n-   ite\\\\t%D2\\;mov%D2\\\\t%0, %1\\;orr%d2\\\\t%0, %1, #1\"\n+   it\\\\t%d1\\;orr%d1\\\\t%0, %3, #1\n+   #\"\n+   ; alt 1: ite\\\\t%D1\\;mov%D1\\\\t%0, %3\\;orr%d1\\\\t%0, %3, #1\n+   \"&& reload_completed\n+    && REGNO (operands [0]) != REGNO (operands[3])\"\n+   [(cond_exec (match_dup 5) (set (match_dup 0) (match_dup 3)))\n+    (cond_exec (match_dup 4) (set (match_dup 0)\n+                                  (ior:SI (match_dup 3) (const_int 1))))]\n+  {\n+    enum machine_mode mode = GET_MODE (operands[2]);\n+    enum rtx_code rc = GET_CODE (operands[1]);\n+\n+    operands[4] = gen_rtx_fmt_ee (rc, VOIDmode, operands[2], const0_rtx);\n+    if (mode == CCFPmode || mode == CCFPEmode)\n+      rc = reverse_condition_maybe_unordered (rc);\n+    else\n+      rc = reverse_condition (rc);\n+    operands[5] = gen_rtx_fmt_ee (rc, VOIDmode, operands[2], const0_rtx);\n+  }\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"length\" \"6,10\")]\n )\n@@ -433,25 +648,76 @@\n    (set_attr \"length\" \"10,14\")]\n )\n \n-(define_insn \"*thumb2_negscc\"\n+(define_insn_and_split \"*thumb2_negscc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(neg:SI (match_operator 3 \"arm_comparison_operator\"\n \t\t [(match_operand:SI 1 \"s_register_operand\" \"r\")\n \t\t  (match_operand:SI 2 \"arm_rhs_operand\" \"rI\")])))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_THUMB2\"\n-  \"*\n-  if (GET_CODE (operands[3]) == LT && operands[2] == const0_rtx)\n-    return \\\"asr\\\\t%0, %1, #31\\\";\n-\n-  if (GET_CODE (operands[3]) == NE)\n-    return \\\"subs\\\\t%0, %1, %2\\;it\\\\tne\\;mvnne\\\\t%0, #0\\\";\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+  {\n+    rtx cc_reg = gen_rtx_REG (CCmode, CC_REGNUM);\n \n-  output_asm_insn (\\\"cmp\\\\t%1, %2\\\", operands);\n-  output_asm_insn (\\\"ite\\\\t%D3\\\", operands);\n-  output_asm_insn (\\\"mov%D3\\\\t%0, #0\\\", operands);\n-  return \\\"mvn%d3\\\\t%0, #0\\\";\n-  \"\n+    if (GET_CODE (operands[3]) == LT && operands[2] == const0_rtx)\n+      {\n+        /* Emit asr\\\\t%0, %1, #31 */\n+        emit_insn (gen_rtx_SET (VOIDmode,\n+                                operands[0],\n+                                gen_rtx_ASHIFTRT (SImode,\n+                                                  operands[1],\n+                                                  GEN_INT (31))));\n+        DONE;\n+      }\n+    else if (GET_CODE (operands[3]) == NE)\n+      {\n+        /* Emit subs\\\\t%0, %1, %2\\;it\\\\tne\\;mvnne\\\\t%0, #0 */\n+        if (CONST_INT_P (operands[2]))\n+          emit_insn (gen_cmpsi2_addneg (operands[0], operands[1], operands[2],\n+                                        GEN_INT (- INTVAL (operands[2]))));\n+        else\n+          emit_insn (gen_subsi3_compare (operands[0], operands[1], operands[2]));\n+\n+        emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n+                                      gen_rtx_NE (SImode,\n+                                                  cc_reg,\n+                                                  const0_rtx),\n+                                      gen_rtx_SET (SImode,\n+                                                   operands[0],\n+                                                   GEN_INT (~0))));\n+        DONE;\n+      }\n+    else\n+      {\n+       /* Emit:  cmp\\\\t%1, %2\\;ite\\\\t%D3\\;mov%D3\\\\t%0, #0\\;mvn%d3\\\\t%0, #0 */\n+       enum rtx_code rc = reverse_condition (GET_CODE (operands[3]));\n+       enum machine_mode mode = SELECT_CC_MODE (rc, operands[1], operands[2]);\n+       rtx tmp1 = gen_rtx_REG (mode, CC_REGNUM);\n+\n+       emit_insn (gen_rtx_SET (VOIDmode,\n+                               cc_reg,\n+                               gen_rtx_COMPARE (CCmode, operands[1], operands[2])));\n+       emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n+                                     gen_rtx_fmt_ee (rc,\n+                                                     VOIDmode,\n+                                                     tmp1,\n+                                                     const0_rtx),\n+                                     gen_rtx_SET (VOIDmode, operands[0], const0_rtx)));\n+       rc = GET_CODE (operands[3]);\n+       emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n+                                     gen_rtx_fmt_ee (rc,\n+                                                     VOIDmode,\n+                                                     tmp1,\n+                                                     const0_rtx),\n+                                     gen_rtx_SET (VOIDmode,\n+                                                  operands[0],\n+                                                  GEN_INT (~0))));\n+       DONE;\n+      }\n+    FAIL;\n+  }\n   [(set_attr \"conds\" \"clob\")\n    (set_attr \"length\" \"14\")]\n )"}]}