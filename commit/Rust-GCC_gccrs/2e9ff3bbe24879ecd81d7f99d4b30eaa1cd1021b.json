{"sha": "2e9ff3bbe24879ecd81d7f99d4b30eaa1cd1021b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU5ZmYzYmJlMjQ4NzllY2Q4MWQ3Zjk5ZDRiMzBlYWExY2QxMDIxYg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-05-13T07:05:23Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-05-13T07:05:23Z"}, "message": "Do not follow zero edges in cycle detection (PR gcov-profile/90380).\n\n2019-05-13  Martin Liska  <mliska@suse.cz>\n\n\tPR gcov-profile/90380\n\t* gcov.c (handle_cycle): Do not support zero cycle count,\n\tit should not be possible.\n\t(path_contains_zero_cycle_arc): New function.\n\t(circuit): Ignore zero cycle arc counts.\n\nFrom-SVN: r271117", "tree": {"sha": "84b7c083e9b0a85acd962bff6b91da85fe752032", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84b7c083e9b0a85acd962bff6b91da85fe752032"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e9ff3bbe24879ecd81d7f99d4b30eaa1cd1021b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e9ff3bbe24879ecd81d7f99d4b30eaa1cd1021b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e9ff3bbe24879ecd81d7f99d4b30eaa1cd1021b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e9ff3bbe24879ecd81d7f99d4b30eaa1cd1021b/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4af3b0ea1bcc3096e21fc1687fa78a294b232454", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4af3b0ea1bcc3096e21fc1687fa78a294b232454", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4af3b0ea1bcc3096e21fc1687fa78a294b232454"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "8fe1a9eeaa785f8ca6372d36d25eb437f69298a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e9ff3bbe24879ecd81d7f99d4b30eaa1cd1021b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e9ff3bbe24879ecd81d7f99d4b30eaa1cd1021b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e9ff3bbe24879ecd81d7f99d4b30eaa1cd1021b", "patch": "@@ -1,3 +1,11 @@\n+2019-05-13  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/90380\n+\t* gcov.c (handle_cycle): Do not support zero cycle count,\n+\tit should not be possible.\n+\t(path_contains_zero_cycle_arc): New function.\n+\t(circuit): Ignore zero cycle arc counts.\n+\n 2019-05-13  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/90380"}, {"sha": "b06a6714c2e5b2af4d7d24d5fcf201898e4c7768", "filename": "gcc/gcov.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e9ff3bbe24879ecd81d7f99d4b30eaa1cd1021b/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e9ff3bbe24879ecd81d7f99d4b30eaa1cd1021b/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=2e9ff3bbe24879ecd81d7f99d4b30eaa1cd1021b", "patch": "@@ -696,7 +696,7 @@ handle_cycle (const arc_vector_t &edges, int64_t &count)\n   for (unsigned i = 0; i < edges.size (); i++)\n     edges[i]->cs_count -= cycle_count;\n \n-  gcc_assert (cycle_count >= 0);\n+  gcc_assert (cycle_count > 0);\n }\n \n /* Unblock a block U from BLOCKED.  Apart from that, iterate all blocks\n@@ -722,6 +722,17 @@ unblock (const block_info *u, block_vector_t &blocked,\n     unblock (*it, blocked, block_lists);\n }\n \n+/* Return true when PATH contains a zero cycle arc count.  */\n+\n+static bool\n+path_contains_zero_cycle_arc (arc_vector_t &path)\n+{\n+  for (unsigned i = 0; i < path.size (); i++)\n+    if (path[i]->cs_count == 0)\n+      return true;\n+  return false;\n+}\n+\n /* Find circuit going to block V, PATH is provisional seen cycle.\n    BLOCKED is vector of blocked vertices, BLOCK_LISTS contains vertices\n    blocked by a block.  COUNT is accumulated count of the current LINE.\n@@ -742,7 +753,9 @@ circuit (block_info *v, arc_vector_t &path, block_info *start,\n   for (arc_info *arc = v->succ; arc; arc = arc->succ_next)\n     {\n       block_info *w = arc->dst;\n-      if (w < start || !linfo.has_block (w))\n+      if (w < start\n+\t  || arc->cs_count == 0\n+\t  || !linfo.has_block (w))\n \tcontinue;\n \n       path.push_back (arc);\n@@ -752,7 +765,8 @@ circuit (block_info *v, arc_vector_t &path, block_info *start,\n \t  handle_cycle (path, count);\n \t  loop_found = true;\n \t}\n-      else if (find (blocked.begin (), blocked.end (), w) == blocked.end ())\n+      else if (!path_contains_zero_cycle_arc (path)\n+\t       &&  find (blocked.begin (), blocked.end (), w) == blocked.end ())\n \tloop_found |= circuit (w, path, start, blocked, block_lists, linfo,\n \t\t\t       count);\n \n@@ -765,7 +779,9 @@ circuit (block_info *v, arc_vector_t &path, block_info *start,\n     for (arc_info *arc = v->succ; arc; arc = arc->succ_next)\n       {\n \tblock_info *w = arc->dst;\n-\tif (w < start || !linfo.has_block (w))\n+\tif (w < start\n+\t    || arc->cs_count == 0\n+\t    || !linfo.has_block (w))\n \t  continue;\n \n \tsize_t index"}]}