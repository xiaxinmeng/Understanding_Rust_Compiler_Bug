{"sha": "3a0fbf7604ed10d688f7e5b2dc4045f37c36b80b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EwZmJmNzYwNGVkMTBkNjg4ZjdlNWIyZGM0MDQ1ZjM3YzM2YjgwYg==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-03-02T17:37:54Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-03-03T15:51:45Z"}, "message": "testsuite: aarch64: Add tests for v[q]mov[u]n_high intrinsics\n\nAdd tests for v[q]mov[u]n_high Neon intrinsics. Since these\nintrinsics are only supported for AArch64, these tests are restricted\nto only run on AArch64 targets.\n\ngcc/testsuite/ChangeLog:\n\n2021-03-02  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vmovn_high.c:\n\tNew test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqmovn_high.c:\n\tNew test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqmovun_high.c:\n\tNew test.", "tree": {"sha": "7809d23ab0c2b04dfbc571c69e6a46c625a1bb71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7809d23ab0c2b04dfbc571c69e6a46c625a1bb71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a0fbf7604ed10d688f7e5b2dc4045f37c36b80b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a0fbf7604ed10d688f7e5b2dc4045f37c36b80b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a0fbf7604ed10d688f7e5b2dc4045f37c36b80b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a0fbf7604ed10d688f7e5b2dc4045f37c36b80b/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd85814c4be9720a2bd28638c96f265a7645aadd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd85814c4be9720a2bd28638c96f265a7645aadd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd85814c4be9720a2bd28638c96f265a7645aadd"}], "stats": {"total": 285, "additions": 285, "deletions": 0}, "files": [{"sha": "e05a40f9619d9e817267d1611257820f62c0ffaa", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmovn_high.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0fbf7604ed10d688f7e5b2dc4045f37c36b80b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmovn_high.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0fbf7604ed10d688f7e5b2dc4045f37c36b80b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmovn_high.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmovn_high.c?ref=3a0fbf7604ed10d688f7e5b2dc4045f37c36b80b", "patch": "@@ -0,0 +1,73 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected, int, 8, 16) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t   0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t   0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t           0xf4, 0xf5, 0xf6, 0xf7 };\n+VECT_VAR_DECL(expected, int, 16, 8) [] = { 0x5, 0x5, 0x5, 0x5, \n+\t\t\t\t\t   0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected, int, 32, 4) [] = { 0x5, 0x5, 0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL(expected, uint, 8, 16) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t    0xf4, 0xf5, 0xf6, 0xf7 };\n+VECT_VAR_DECL(expected, uint, 16, 8) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected, uint, 32, 4) [] = { 0x5, 0x5, 0xfffffff0, 0xfffffff1 };\n+\n+#define TEST_MSG \"VMOVN_HIGH\"\n+void exec_vmovn_high (void)\n+{\n+  /* Basic test: vec128_r=vmovn_high(vec64_r, vec128_x), store the result.  */\n+#define TEST_VMOVN_HIGH(T1, T2, W1, W2, N1, N2)\t\t\t\t\t\\\n+  VECT_VAR(vec128_r, T1, W2, N2) =\t\t\t\t\t\t\\\n+    vmovn_high_##T2##W1(VECT_VAR(vec64_r, T1, W2, N1),\t\t\t\t\\\n+\t\t\tVECT_VAR(vec128_x, T1, W1, N1));\t\t\t\\\n+  vst1q_##T2##W2(VECT_VAR(result, T1, W2, N2), VECT_VAR(vec128_r, T1, W2, N2))\n+\n+  DECL_VARIABLE_128BITS_VARIANTS(vec128_r);\n+  DECL_VARIABLE_64BITS_VARIANTS(vec64_r);\n+  DECL_VARIABLE_128BITS_VARIANTS(vec128_x);\n+\n+  clean_results ();\n+\n+  /* Fill vec64_r with a value easy to recognise in the result vector. */\n+  VDUP(vec64_r, , int, s, 8, 8, 0x5);\n+  VDUP(vec64_r, , int, s, 16, 4, 0x5);\n+  VDUP(vec64_r, , int, s, 32, 2, 0x5);\n+  VDUP(vec64_r, , uint, u, 8, 8, 0x5);\n+  VDUP(vec64_r, , uint, u, 16, 4, 0x5);\n+  VDUP(vec64_r, , uint, u, 32, 2, 0x5);\n+\n+  VLOAD(vec128_x, buffer, q, int, s, 16, 8);\n+  VLOAD(vec128_x, buffer, q, int, s, 32, 4);\n+  VLOAD(vec128_x, buffer, q, int, s, 64, 2);\n+  VLOAD(vec128_x, buffer, q, uint, u, 16, 8);\n+  VLOAD(vec128_x, buffer, q, uint, u, 32, 4);\n+  VLOAD(vec128_x, buffer, q, uint, u, 64, 2);\n+\n+  TEST_VMOVN_HIGH(int, s, 16, 8, 8, 16);\n+  TEST_VMOVN_HIGH(int, s, 32, 16, 4, 8);\n+  TEST_VMOVN_HIGH(int, s, 64, 32, 2, 4);\n+  TEST_VMOVN_HIGH(uint, u, 16, 8, 8, 16);\n+  TEST_VMOVN_HIGH(uint, u, 32, 16, 4, 8);\n+  TEST_VMOVN_HIGH(uint, u, 64, 32, 2, 4);\n+\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n+}\n+\n+int main (void)\n+{\n+  exec_vmovn_high ();\n+  return 0;\n+}"}, {"sha": "cb4f5c83de889a420b1f4408d4f95575aa783ae5", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqmovn_high.c", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0fbf7604ed10d688f7e5b2dc4045f37c36b80b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqmovn_high.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0fbf7604ed10d688f7e5b2dc4045f37c36b80b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqmovn_high.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqmovn_high.c?ref=3a0fbf7604ed10d688f7e5b2dc4045f37c36b80b", "patch": "@@ -0,0 +1,121 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected, int, 8, 16) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t   0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t   0x12, 0x12, 0x12, 0x12,\n+\t\t\t\t\t   0x12, 0x12, 0x12, 0x12 };\n+VECT_VAR_DECL(expected, int, 16, 8) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t   0x1278, 0x1278, 0x1278, 0x1278 };\n+VECT_VAR_DECL(expected, int, 32, 4) [] = { 0x5, 0x5, 0x12345678, 0x12345678 };\n+VECT_VAR_DECL(expected, uint, 8, 16) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0x82, 0x82, 0x82, 0x82,\n+\t\t\t\t\t    0x82, 0x82, 0x82, 0x82 };\n+VECT_VAR_DECL(expected, uint, 16, 8) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0x8765, 0x8765, 0x8765, 0x8765 };\n+VECT_VAR_DECL(expected, uint, 32, 4) [] = { 0x5, 0x5, 0x87654321, 0x87654321 };\n+\n+/* Expected results when saturation occurs.  */\n+VECT_VAR_DECL(expected1, int, 8, 16) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t    0x7f, 0x7f, 0x7f, 0x7f };\n+VECT_VAR_DECL(expected1, int, 16, 8) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0x7fff, 0x7fff, 0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected1, int, 32, 4) [] = { 0x5, 0x5, 0x7fffffff, 0x7fffffff };\n+VECT_VAR_DECL(expected1, uint, 8, 16) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t     0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t     0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t     0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected1, uint, 16, 8) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t     0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected1, uint, 32, 4) [] = { 0x5, 0x5, \n+\t\t\t\t\t     0xffffffff, 0xffffffff };\n+\n+#define TEST_MSG \"VQMOVN_HIGH\"\n+void exec_vqmovn_high (void)\n+{\n+  /* Basic test: vec128_r=vqmovn_high(vec64_r,vec128_x), store the result.  */\n+#define TEST_VQMOVN_HIGH(T1, T2, W1, W2, N1, N2, CMT)\t\t\t\t\\\n+  Set_Neon_Cumulative_Sat(0, VECT_VAR(vec128_r, T1, W1, N2));\t\t\t\\\n+  VECT_VAR(vec128_r, T1, W1, N2) =\t\t\t\t\t\t\\\n+    vqmovn_high_##T2##W2(VECT_VAR(vec64_r, T1, W1, N1),\t\t\t\t\\\n+\t\t\t VECT_VAR(vec128_x, T1, W2, N1));\t\t\t\\\n+  vst1q##_##T2##W1(VECT_VAR(result, T1, W1, N2),\t\t\t\t\\\n+\t\t   VECT_VAR(vec128_r, T1, W1, N2))\n+\n+  DECL_VARIABLE_128BITS_VARIANTS(vec128_r);\n+  DECL_VARIABLE_64BITS_VARIANTS(vec64_r);\n+  DECL_VARIABLE_128BITS_VARIANTS(vec128_x);\n+\n+  clean_results ();\n+\n+  /* Fill vec64_r with a value easy to recognise in the result vector. */\n+  VDUP(vec64_r, , int, s, 8, 8, 0x5);\n+  VDUP(vec64_r, , int, s, 16, 4, 0x5);\n+  VDUP(vec64_r, , int, s, 32, 2, 0x5);\n+  VDUP(vec64_r, , uint, u, 8, 8, 0x5);\n+  VDUP(vec64_r, , uint, u, 16, 4, 0x5);\n+  VDUP(vec64_r, , uint, u, 32, 2, 0x5);\n+\n+  /* Fill input vector with arbitrary values.  */\n+  VDUP(vec128_x, q, int, s, 16, 8, 0x12);\n+  VDUP(vec128_x, q, int, s, 32, 4, 0x1278);\n+  VDUP(vec128_x, q, int, s, 64, 2, 0x12345678);\n+  VDUP(vec128_x, q, uint, u, 16, 8, 0x82);\n+  VDUP(vec128_x, q, uint, u, 32, 4, 0x8765);\n+  VDUP(vec128_x, q, uint, u, 64, 2, 0x87654321);\n+\n+\n+#define CMT \"\"\n+  TEST_VQMOVN_HIGH(int, s, 8, 16, 8, 16, CMT);\n+  TEST_VQMOVN_HIGH(int, s, 16, 32, 4, 8, CMT);\n+  TEST_VQMOVN_HIGH(int, s, 32, 64, 2, 4, CMT);\n+  TEST_VQMOVN_HIGH(uint, u, 8, 16, 8, 16, CMT);\n+  TEST_VQMOVN_HIGH(uint, u, 16, 32, 4, 8, CMT);\n+  TEST_VQMOVN_HIGH(uint, u, 32, 64, 2, 4, CMT);\n+\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, CMT);\n+\n+\n+  /* Fill input vector with arbitrary values which cause cumulative\n+     saturation.  */\n+  VDUP(vec128_x, q, int, s, 16, 8, 0x1234);\n+  VDUP(vec128_x, q, int, s, 32, 4, 0x12345678);\n+  VDUP(vec128_x, q, int, s, 64, 2, 0x1234567890ABLL);\n+  VDUP(vec128_x, q, uint, u, 16, 8, 0x8234);\n+  VDUP(vec128_x, q, uint, u, 32, 4, 0x87654321);\n+  VDUP(vec128_x, q, uint, u, 64, 2, 0x8765432187654321ULL);\n+\n+#undef CMT\n+#define CMT \" (with saturation)\"\n+  TEST_VQMOVN_HIGH(int, s, 8, 16, 8, 16, CMT);\n+  TEST_VQMOVN_HIGH(int, s, 16, 32, 4, 8, CMT);\n+  TEST_VQMOVN_HIGH(int, s, 32, 64, 2, 4, CMT);\n+  TEST_VQMOVN_HIGH(uint, u, 8, 16, 8, 16, CMT);\n+  TEST_VQMOVN_HIGH(uint, u, 16, 32, 4, 8, CMT);\n+  TEST_VQMOVN_HIGH(uint, u, 32, 64, 2, 4, CMT);\n+\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected1, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected1, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected1, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected1, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected1, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected1, CMT);\n+}\n+\n+int main (void)\n+{\n+  exec_vqmovn_high ();\n+  return 0;\n+}"}, {"sha": "7b2a0ea902ea2dbb2b98729d2834d7e80783df3f", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqmovun_high.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0fbf7604ed10d688f7e5b2dc4045f37c36b80b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqmovun_high.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0fbf7604ed10d688f7e5b2dc4045f37c36b80b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqmovun_high.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqmovun_high.c?ref=3a0fbf7604ed10d688f7e5b2dc4045f37c36b80b", "patch": "@@ -0,0 +1,91 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected, uint, 8, 16) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0x34, 0x34, 0x34, 0x34,\n+\t\t\t\t\t    0x34, 0x34, 0x34, 0x34 };\n+VECT_VAR_DECL(expected, uint, 16, 8) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t    0x5678, 0x5678, 0x5678, 0x5678 };\n+VECT_VAR_DECL(expected, uint, 32, 4) [] = { 0x5, 0x5, 0x12345678, 0x12345678 };\n+\n+/* Expected results with negative input.  */\n+VECT_VAR_DECL(expected_neg, uint, 8, 16) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t\t0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t\t0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_neg, uint, 16, 8) [] = { 0x5, 0x5, 0x5, 0x5,\n+\t\t\t\t\t\t0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_neg, uint, 32, 4) [] = { 0x5, 0x5, 0x0, 0x0 };\n+\n+#define TEST_MSG \"VQMOVUN_HIGH\"\n+void exec_vqmovun_high (void)\n+{\n+  /* Basic test: vec128_r=vqmovun_high(vec64)_r, vec128_x), store result.  */\n+#define TEST_VQMOVUN_HIGH(T1, T2, W1, W2, N1, N2, CMT)\t\t\t\t\\\n+  Set_Neon_Cumulative_Sat(0, VECT_VAR(vec128_r, T1, W1, N2));\t\t\t\\\n+  VECT_VAR(vec128_r, T1, W1, N2) =\t\t\t\t\t\t\\\n+    vqmovun_high_s##W2(VECT_VAR(vec64_r, uint, W1, N1),\t\t\t\t\\\n+\t\t       VECT_VAR(vec128_x, int, W2, N1));\t\t\t\\\n+  vst1q##_u##W1(VECT_VAR(result, T1, W1, N2), VECT_VAR(vec128_r, T1, W1, N2))\n+\n+  DECL_VARIABLE(vec64_r, uint, 8, 8);\n+  DECL_VARIABLE(vec64_r, uint, 16, 4);\n+  DECL_VARIABLE(vec64_r, uint, 32, 2);\n+\n+  DECL_VARIABLE(vec128_x, int, 16, 8);\n+  DECL_VARIABLE(vec128_x, int, 32, 4);\n+  DECL_VARIABLE(vec128_x, int, 64, 2);\n+\n+  DECL_VARIABLE(vec128_r, uint, 8, 16);\n+  DECL_VARIABLE(vec128_r, uint, 16, 8);\n+  DECL_VARIABLE(vec128_r, uint, 32, 4);\n+\n+  clean_results ();\n+\n+  /* Fill vec64_r with a value easy to recognise in the result vector. */\n+  VDUP(vec64_r, , uint, u, 8, 8, 0x5);\n+  VDUP(vec64_r, , uint, u, 16, 4, 0x5);\n+  VDUP(vec64_r, , uint, u, 32, 2, 0x5);\n+\n+  /* Fill input vector with arbitrary values.  */\n+  VDUP(vec128_x, q, int, s, 16, 8, 0x34);\n+  VDUP(vec128_x, q, int, s, 32, 4, 0x5678);\n+  VDUP(vec128_x, q, int, s, 64, 2, 0x12345678);\n+\n+\n+#define CMT \"\"\n+  TEST_VQMOVUN_HIGH(uint, u, 8, 16, 8, 16, CMT);\n+  TEST_VQMOVUN_HIGH(uint, u, 16, 32, 4, 8, CMT);\n+  TEST_VQMOVUN_HIGH(uint, u, 32, 64, 2, 4, CMT);\n+\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, CMT);\n+\n+  /* Fill input vector with negative values.  */\n+  VDUP(vec128_x, q, int, s, 16, 8, 0x8234);\n+  VDUP(vec128_x, q, int, s, 32, 4, 0x87654321);\n+  VDUP(vec128_x, q, int, s, 64, 2, 0x8765432187654321LL);\n+\n+\n+#undef CMT\n+#define CMT \" (negative input)\"\n+  TEST_VQMOVUN_HIGH(uint, u, 8, 16, 8, 16, CMT);\n+  TEST_VQMOVUN_HIGH(uint, u, 16, 32, 4, 8, CMT);\n+  TEST_VQMOVUN_HIGH(uint, u, 32, 64, 2, 4, CMT);\n+\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_neg, CMT);\n+}\n+\n+int main (void)\n+{\n+  exec_vqmovun_high ();\n+  return 0;\n+}"}]}