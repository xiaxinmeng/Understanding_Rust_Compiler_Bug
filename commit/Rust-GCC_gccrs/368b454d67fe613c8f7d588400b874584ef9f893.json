{"sha": "368b454d67fe613c8f7d588400b874584ef9f893", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY4YjQ1NGQ2N2ZlNjEzYzhmN2Q1ODg0MDBiODc0NTg0ZWY5Zjg5Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-03-26T09:17:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-03-26T09:17:10Z"}, "message": "tree-vrp.c (simplify_internal_call_using_ranges): If only one range is range_int_cst_p...\n\n\t* tree-vrp.c (simplify_internal_call_using_ranges): If only\n\tone range is range_int_cst_p, but not both, at least optimize\n\taddition/subtraction of 0 and multiplication by 0 or 1.\n\t* gimple-fold.c (gimple_fold_call): Fold\n\tIFN_UBSAN_CHECK_{ADD,SUB,MUL}.\n\t(gimple_fold_stmt_to_constant_1): If both op0 and op1 aren't\n\tINTEGER_CSTs, try to fold at least x * 0 and y - y.\n\nFrom-SVN: r208840", "tree": {"sha": "e5851048627095b50a086856c5651b462c6c116f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5851048627095b50a086856c5651b462c6c116f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/368b454d67fe613c8f7d588400b874584ef9f893", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/368b454d67fe613c8f7d588400b874584ef9f893", "html_url": "https://github.com/Rust-GCC/gccrs/commit/368b454d67fe613c8f7d588400b874584ef9f893", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/368b454d67fe613c8f7d588400b874584ef9f893/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee0cff60490d42c50e5db6a5cba41c70ac6c1433", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee0cff60490d42c50e5db6a5cba41c70ac6c1433", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee0cff60490d42c50e5db6a5cba41c70ac6c1433"}], "stats": {"total": 151, "additions": 124, "deletions": 27}, "files": [{"sha": "43c221429b015ef400b6e5ea516a8bfecbd31c45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/368b454d67fe613c8f7d588400b874584ef9f893/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/368b454d67fe613c8f7d588400b874584ef9f893/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=368b454d67fe613c8f7d588400b874584ef9f893", "patch": "@@ -1,3 +1,13 @@\n+2014-03-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-vrp.c (simplify_internal_call_using_ranges): If only\n+\tone range is range_int_cst_p, but not both, at least optimize\n+\taddition/subtraction of 0 and multiplication by 0 or 1.\n+\t* gimple-fold.c (gimple_fold_call): Fold\n+\tIFN_UBSAN_CHECK_{ADD,SUB,MUL}.\n+\t(gimple_fold_stmt_to_constant_1): If both op0 and op1 aren't\n+\tINTEGER_CSTs, try to fold at least x * 0 and y - y.\n+\n 2014-03-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR rtl-optimization/60452"}, {"sha": "6402cce2f3f7bed5d70090943f8743696e7f8a88", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 72, "deletions": 12, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/368b454d67fe613c8f7d588400b874584ef9f893/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/368b454d67fe613c8f7d588400b874584ef9f893/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=368b454d67fe613c8f7d588400b874584ef9f893", "patch": "@@ -1186,13 +1186,56 @@ gimple_fold_call (gimple_stmt_iterator *gsi, bool inplace)\n       else if (gimple_call_builtin_p (stmt, BUILT_IN_MD))\n \tchanged |= targetm.gimple_fold_builtin (gsi);\n     }\n-  else if (gimple_call_internal_p (stmt)\n-\t   && gimple_call_internal_fn (stmt) == IFN_BUILTIN_EXPECT)\n+  else if (gimple_call_internal_p (stmt))\n     {\n-      tree result = fold_builtin_expect (gimple_location (stmt),\n-\t\t\t\t\t gimple_call_arg (stmt, 0),\n-\t\t\t\t\t gimple_call_arg (stmt, 1),\n-\t\t\t\t\t gimple_call_arg (stmt, 2));\n+      enum tree_code subcode = ERROR_MARK;\n+      tree result = NULL_TREE;\n+      switch (gimple_call_internal_fn (stmt))\n+\t{\n+\tcase IFN_BUILTIN_EXPECT:\n+\t  result = fold_builtin_expect (gimple_location (stmt),\n+\t\t\t\t\tgimple_call_arg (stmt, 0),\n+\t\t\t\t\tgimple_call_arg (stmt, 1),\n+\t\t\t\t\tgimple_call_arg (stmt, 2));\n+\t  break;\n+\tcase IFN_UBSAN_CHECK_ADD:\n+\t  subcode = PLUS_EXPR;\n+\t  break;\n+\tcase IFN_UBSAN_CHECK_SUB:\n+\t  subcode = MINUS_EXPR;\n+\t  break;\n+\tcase IFN_UBSAN_CHECK_MUL:\n+\t  subcode = MULT_EXPR;\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+      if (subcode != ERROR_MARK)\n+\t{\n+\t  tree arg0 = gimple_call_arg (stmt, 0);\n+\t  tree arg1 = gimple_call_arg (stmt, 1);\n+\t  /* x = y + 0; x = y - 0; x = y * 0; */\n+\t  if (integer_zerop (arg1))\n+\t    result = subcode == MULT_EXPR\n+\t\t     ? build_zero_cst (TREE_TYPE (arg0))\n+\t\t     : arg0;\n+\t  /* x = 0 + y; x = 0 * y; */\n+\t  else if (subcode != MINUS_EXPR && integer_zerop (arg0))\n+\t    result = subcode == MULT_EXPR\n+\t\t     ? build_zero_cst (TREE_TYPE (arg0))\n+\t\t     : arg1;\n+\t  /* x = y - y; */\n+\t  else if (subcode == MINUS_EXPR && operand_equal_p (arg0, arg1, 0))\n+\t    result = build_zero_cst (TREE_TYPE (arg0));\n+\t  /* x = y * 1; x = 1 * y; */\n+\t  else if (subcode == MULT_EXPR)\n+\t    {\n+\t      if (integer_onep (arg1))\n+\t\tresult = arg0;\n+\t      else if (integer_onep (arg0))\n+\t\tresult = arg1;\n+\t    }\n+\t}\n       if (result)\n \t{\n \t  if (!update_call_from_tree (gsi, result))\n@@ -2688,15 +2731,32 @@ gimple_fold_stmt_to_constant_1 (gimple stmt, tree (*valueize) (tree))\n \t      default:\n \t\treturn NULL_TREE;\n \t      }\n-\t    tree op0 = (*valueize) (gimple_call_arg (stmt, 0));\n-\t    tree op1 = (*valueize) (gimple_call_arg (stmt, 1));\n+\t    tree arg0 = gimple_call_arg (stmt, 0);\n+\t    tree arg1 = gimple_call_arg (stmt, 1);\n+\t    tree op0 = (*valueize) (arg0);\n+\t    tree op1 = (*valueize) (arg1);\n \n \t    if (TREE_CODE (op0) != INTEGER_CST\n \t\t|| TREE_CODE (op1) != INTEGER_CST)\n-\t      return NULL_TREE;\n-\t    tree res = fold_binary_loc (loc, subcode,\n-\t\t\t\t\tTREE_TYPE (gimple_call_arg (stmt, 0)),\n-\t\t\t\t\top0, op1);\n+\t      {\n+\t\tswitch (subcode)\n+\t\t  {\n+\t\t  case MULT_EXPR:\n+\t\t    /* x * 0 = 0 * x = 0 without overflow.  */\n+\t\t    if (integer_zerop (op0) || integer_zerop (op1))\n+\t\t      return build_zero_cst (TREE_TYPE (arg0));\n+\t\t    break;\n+\t\t  case MINUS_EXPR:\n+\t\t    /* y - y = 0 without overflow.  */\n+\t\t    if (operand_equal_p (op0, op1, 0))\n+\t\t      return build_zero_cst (TREE_TYPE (arg0));\n+\t\t    break;\n+\t\t  default:\n+\t\t    break;\n+\t\t  }\n+\t      }\n+\t    tree res\n+\t      = fold_binary_loc (loc, subcode, TREE_TYPE (arg0), op0, op1);\n \t    if (res\n \t\t&& TREE_CODE (res) == INTEGER_CST\n \t\t&& !TREE_OVERFLOW (res))"}, {"sha": "14f1526fa985e5abb55a6a6ee8f2207d30c64bd0", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 42, "deletions": 15, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/368b454d67fe613c8f7d588400b874584ef9f893/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/368b454d67fe613c8f7d588400b874584ef9f893/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=368b454d67fe613c8f7d588400b874584ef9f893", "patch": "@@ -9336,31 +9336,58 @@ simplify_internal_call_using_ranges (gimple_stmt_iterator *gsi, gimple stmt)\n   else if (TREE_CODE (op0) == INTEGER_CST)\n     set_value_range_to_value (&vr0, op0, NULL);\n   else\n-    return false;\n+    set_value_range_to_varying (&vr0);\n \n   if (TREE_CODE (op1) == SSA_NAME)\n     vr1 = *get_value_range (op1);\n   else if (TREE_CODE (op1) == INTEGER_CST)\n     set_value_range_to_value (&vr1, op1, NULL);\n   else\n-    return false;\n-\n-  if (!range_int_cst_p (&vr0) || !range_int_cst_p (&vr1))\n-    return false;\n+    set_value_range_to_varying (&vr1);\n \n-  tree r1 = int_const_binop (subcode, vr0.min, vr1.min);\n-  tree r2 = int_const_binop (subcode, vr0.max, vr1.max);\n-  if (r1 == NULL_TREE || TREE_OVERFLOW (r1)\n-      || r2 == NULL_TREE || TREE_OVERFLOW (r2))\n-    return false;\n-  if (subcode == MULT_EXPR)\n+  if (!range_int_cst_p (&vr0))\n     {\n-      tree r3 = int_const_binop (subcode, vr0.min, vr1.max);\n-      tree r4 = int_const_binop (subcode, vr0.max, vr1.min);\n-      if (r3 == NULL_TREE || TREE_OVERFLOW (r3)\n-\t  || r4 == NULL_TREE || TREE_OVERFLOW (r4))\n+      /* If one range is VR_ANTI_RANGE, VR_VARYING etc.,\n+\t optimize at least x = y + 0; x = y - 0; x = y * 0;\n+\t and x = y * 1; which never overflow.  */\n+      if (!range_int_cst_p (&vr1))\n+\treturn false;\n+      if (tree_int_cst_sgn (vr1.min) == -1)\n+\treturn false;\n+      if (compare_tree_int (vr1.max, subcode == MULT_EXPR) == 1)\n \treturn false;\n     }\n+  else if (!range_int_cst_p (&vr1))\n+    {\n+      /* If one range is VR_ANTI_RANGE, VR_VARYING etc.,\n+\t optimize at least x = 0 + y; x = 0 * y; and x = 1 * y;\n+\t which never overflow.  */\n+      if (subcode == MINUS_EXPR)\n+\treturn false;\n+      if (!range_int_cst_p (&vr0))\n+\treturn false;\n+      if (tree_int_cst_sgn (vr0.min) == -1)\n+\treturn false;\n+      if (compare_tree_int (vr0.max, subcode == MULT_EXPR) == 1)\n+\treturn false;\n+    }\n+  else\n+    {\n+      tree r1 = int_const_binop (subcode, vr0.min, vr1.min);\n+      tree r2 = int_const_binop (subcode, vr0.max, vr1.max);\n+      if (r1 == NULL_TREE || TREE_OVERFLOW (r1)\n+\t  || r2 == NULL_TREE || TREE_OVERFLOW (r2))\n+\treturn false;\n+      if (subcode == MULT_EXPR)\n+\t{\n+\t  tree r3 = int_const_binop (subcode, vr0.min, vr1.max);\n+\t  tree r4 = int_const_binop (subcode, vr0.max, vr1.min);\n+\t  if (r3 == NULL_TREE || TREE_OVERFLOW (r3)\n+\t      || r4 == NULL_TREE || TREE_OVERFLOW (r4))\n+\t    return false;\n+\t}\n+    }\n+\n   gimple g = gimple_build_assign_with_ops (subcode, gimple_call_lhs (stmt),\n \t\t\t\t\t   op0, op1);\n   gsi_replace (gsi, g, false);"}]}