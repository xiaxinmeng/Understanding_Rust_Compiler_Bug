{"sha": "643ae816f17745a77b62188b6bf169211609a59b", "node_id": "C_kwDOANBUbNoAKDY0M2FlODE2ZjE3NzQ1YTc3YjYyMTg4YjZiZjE2OTIxMTYwOWE1OWI", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-09-01T14:21:07Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-09-12T08:16:53Z"}, "message": "[Ada] Fix immediate assertion failure with -gnatd.1\n\nThe switch enables the front-end unnesting pass.\n\ngcc/ada/\n\n\t* gcc-interface/decl.cc (gnat_to_gnu_entity): Relax assertion when\n\tfront-end unnesting is enabled.", "tree": {"sha": "75ee85898298d81a7bfba9192e7824511330b3d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75ee85898298d81a7bfba9192e7824511330b3d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/643ae816f17745a77b62188b6bf169211609a59b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/643ae816f17745a77b62188b6bf169211609a59b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/643ae816f17745a77b62188b6bf169211609a59b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/643ae816f17745a77b62188b6bf169211609a59b/comments", "author": null, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60bb81e0db60f1a0f6be8ece24a05052aba21b20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60bb81e0db60f1a0f6be8ece24a05052aba21b20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60bb81e0db60f1a0f6be8ece24a05052aba21b20"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "c5a93fb3acd5a5a6545980bcf6421ccccfffeb26", "filename": "gcc/ada/gcc-interface/decl.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643ae816f17745a77b62188b6bf169211609a59b/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643ae816f17745a77b62188b6bf169211609a59b/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.cc?ref=643ae816f17745a77b62188b6bf169211609a59b", "patch": "@@ -436,7 +436,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n   /* If this is a numeric or enumeral type, or an access type, a nonzero Esize\n      must be specified unless it was specified by the programmer.  Exceptions\n      are for access-to-protected-subprogram types and all access subtypes, as\n-     another GNAT type is used to lay out the GCC type for them.  */\n+     another GNAT type is used to lay out the GCC type for them, as well as\n+     access-to-subprogram types if front-end unnesting is enabled.  */\n   gcc_assert (!is_type\n \t      || Known_Esize (gnat_entity)\n \t      || Has_Size_Clause (gnat_entity)\n@@ -445,6 +446,9 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t\t  && (!IN (kind, Access_Kind)\n \t\t      || kind == E_Access_Protected_Subprogram_Type\n \t\t      || kind == E_Anonymous_Access_Protected_Subprogram_Type\n+\t\t      || ((kind == E_Access_Subprogram_Type\n+\t\t\t   || kind == E_Anonymous_Access_Subprogram_Type)\n+\t\t\t  && Unnest_Subprogram_Mode)\n \t\t      || kind == E_Access_Subtype\n \t\t      || type_annotate_only)));\n "}]}