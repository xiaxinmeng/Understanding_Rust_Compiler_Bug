{"sha": "a6f30e668a9d5284c0537aeba7d89190ddb9c3e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZmMzBlNjY4YTlkNTI4NGMwNTM3YWViYTdkODkxOTBkZGI5YzNlOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-04-29T15:06:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-04-29T15:06:18Z"}, "message": "re PR tree-optimization/57075 (verify_flow_info failed: control flow in the middle of basic block)\n\n2013-04-29  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/57075\n\t* tree-inline.c (copy_edges_for_bb): Still split the bbs,\n\teven if not adding abnormal edges for calls that can make\n\tabnormal gotos.\n\n\t* gcc.dg/torture/pr57075.c: New testcase.\n\nFrom-SVN: r198423", "tree": {"sha": "8fa64396d8612faca4a9ec12d61d19510a367efc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fa64396d8612faca4a9ec12d61d19510a367efc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6f30e668a9d5284c0537aeba7d89190ddb9c3e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6f30e668a9d5284c0537aeba7d89190ddb9c3e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6f30e668a9d5284c0537aeba7d89190ddb9c3e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6f30e668a9d5284c0537aeba7d89190ddb9c3e9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0c2b20400cbe35ee7ffd3688b921dfc92fe263ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c2b20400cbe35ee7ffd3688b921dfc92fe263ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c2b20400cbe35ee7ffd3688b921dfc92fe263ed"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "38074dab23fad34ab4d6b96a4b6d62539d1c4507", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f30e668a9d5284c0537aeba7d89190ddb9c3e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f30e668a9d5284c0537aeba7d89190ddb9c3e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6f30e668a9d5284c0537aeba7d89190ddb9c3e9", "patch": "@@ -1,3 +1,10 @@\n+2013-04-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/57075\n+\t* tree-inline.c (copy_edges_for_bb): Still split the bbs,\n+\teven if not adding abnormal edges for calls that can make\n+\tabnormal gotos.\n+\n 2013-04-29  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/57103"}, {"sha": "3364efcb30da4afda3c7c80bcccb3d50a4550c67", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f30e668a9d5284c0537aeba7d89190ddb9c3e9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f30e668a9d5284c0537aeba7d89190ddb9c3e9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a6f30e668a9d5284c0537aeba7d89190ddb9c3e9", "patch": "@@ -1,3 +1,8 @@\n+2013-04-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/57075\n+\t* gcc.dg/torture/pr57075.c: New testcase.\n+\n 2013-04-29  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/57103"}, {"sha": "dee74a844b11722f608b3b56af4beab958eccbd8", "filename": "gcc/testsuite/gcc.dg/torture/pr57075.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f30e668a9d5284c0537aeba7d89190ddb9c3e9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57075.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f30e668a9d5284c0537aeba7d89190ddb9c3e9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57075.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57075.c?ref=a6f30e668a9d5284c0537aeba7d89190ddb9c3e9", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+extern int baz (void) __attribute__ ((returns_twice));\n+int __attribute__ ((__leaf__))\n+foo (void)\n+{\n+  return __builtin_printf (\"$\");\n+}\n+\n+void\n+bar ()\n+{\n+  foo ();\n+  baz ();\n+}"}, {"sha": "35cdb787538c4af650b315a5e1c868d0b8d1ea9f", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f30e668a9d5284c0537aeba7d89190ddb9c3e9/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f30e668a9d5284c0537aeba7d89190ddb9c3e9/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=a6f30e668a9d5284c0537aeba7d89190ddb9c3e9", "patch": "@@ -1923,11 +1923,7 @@ copy_edges_for_bb (basic_block bb, gcov_type count_scale, basic_block ret_bb,\n          into a COMPONENT_REF which doesn't.  If the copy\n          can throw, the original could also throw.  */\n       can_throw = stmt_can_throw_internal (copy_stmt);\n-      /* If the call we inline cannot make abnormal goto do not add\n-         additional abnormal edges but only retain those already present\n-\t in the original function body.  */\n-      nonlocal_goto\n-\t= can_make_abnormal_goto && stmt_can_make_abnormal_goto (copy_stmt);\n+      nonlocal_goto = stmt_can_make_abnormal_goto (copy_stmt);\n \n       if (can_throw || nonlocal_goto)\n \t{\n@@ -1955,6 +1951,10 @@ copy_edges_for_bb (basic_block bb, gcov_type count_scale, basic_block ret_bb,\n       else if (can_throw)\n \tmake_eh_edges (copy_stmt);\n \n+      /* If the call we inline cannot make abnormal goto do not add\n+         additional abnormal edges but only retain those already present\n+\t in the original function body.  */\n+      nonlocal_goto &= can_make_abnormal_goto;\n       if (nonlocal_goto)\n \tmake_abnormal_goto_edges (gimple_bb (copy_stmt), true);\n "}]}