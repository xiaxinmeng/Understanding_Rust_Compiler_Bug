{"sha": "2f6ca9d31799133f80e446bd1faad5d9a67bac00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY2Y2E5ZDMxNzk5MTMzZjgwZTQ0NmJkMWZhYWQ1ZDlhNjdiYWMwMA==", "commit": {"author": {"name": "R\u00fcdiger Sonderfeld", "email": "ruediger@c-plusplus.de", "date": "2014-10-13T10:05:21Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-10-13T10:05:21Z"}, "message": "memory (align): Define.\n\n2014-10-13  R\u00fcdiger Sonderfeld  <ruediger@c-plusplus.de>\n\n\t* include/std/memory (align): Define.\n\t* testsuite/20_util/align/1.cc: New.\n\nFrom-SVN: r216143", "tree": {"sha": "21a4df0944b6d76df0f6ecb5665980ec2311a0e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21a4df0944b6d76df0f6ecb5665980ec2311a0e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f6ca9d31799133f80e446bd1faad5d9a67bac00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f6ca9d31799133f80e446bd1faad5d9a67bac00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f6ca9d31799133f80e446bd1faad5d9a67bac00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f6ca9d31799133f80e446bd1faad5d9a67bac00/comments", "author": {"login": "ruediger", "id": 1803, "node_id": "MDQ6VXNlcjE4MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1803?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruediger", "html_url": "https://github.com/ruediger", "followers_url": "https://api.github.com/users/ruediger/followers", "following_url": "https://api.github.com/users/ruediger/following{/other_user}", "gists_url": "https://api.github.com/users/ruediger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruediger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruediger/subscriptions", "organizations_url": "https://api.github.com/users/ruediger/orgs", "repos_url": "https://api.github.com/users/ruediger/repos", "events_url": "https://api.github.com/users/ruediger/events{/privacy}", "received_events_url": "https://api.github.com/users/ruediger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a5273835024d375fecd273fd066becab39d82af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a5273835024d375fecd273fd066becab39d82af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a5273835024d375fecd273fd066becab39d82af"}], "stats": {"total": 108, "additions": 108, "deletions": 0}, "files": [{"sha": "37f29f7cd0b59c181c45577f4e1c4e0abf05aea6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f6ca9d31799133f80e446bd1faad5d9a67bac00/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f6ca9d31799133f80e446bd1faad5d9a67bac00/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2f6ca9d31799133f80e446bd1faad5d9a67bac00", "patch": "@@ -1,3 +1,8 @@\n+2014-10-13  R\u00fcdiger Sonderfeld  <ruediger@c-plusplus.de>\n+\n+\t* include/std/memory (align): Define.\n+\t* testsuite/20_util/align/1.cc: New.\n+\n 2014-10-13  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR libstdc++/61347"}, {"sha": "affc8b176eb1d9197a5f914128d15204d759ef62", "filename": "libstdc++-v3/include/std/memory", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f6ca9d31799133f80e446bd1faad5d9a67bac00/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f6ca9d31799133f80e446bd1faad5d9a67bac00/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory?ref=2f6ca9d31799133f80e446bd1faad5d9a67bac00", "patch": "@@ -87,4 +87,46 @@\n #  include <backward/auto_ptr.h>\n #endif\n \n+#if __cplusplus >= 201103L\n+#  include <cstdint>\n+#  ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+/**\n+ *  @brief Fit aligned storage in buffer.\n+ *\n+ *  [ptr.align]\n+ *\n+ *  This function tries to fit @a __size bytes of storage with alignment\n+ *  @a __align into the buffer @a __ptr of size @a __space bytes.  If such\n+ *  a buffer fits then @a __ptr is changed to point to the first byte of the\n+ *  aligned storage and @a __space is reduced by the bytes used for alignment.\n+ *\n+ *  @param __align   A fundamental or extended alignment value.\n+ *  @param __size    Size of the aligned storage required.\n+ *  @param __ptr     Pointer to a buffer of @a __space bytes.\n+ *  @param __space   Size of the buffer pointed to by @a __ptr.\n+ *  @return the updated pointer if the aligned storage fits, otherwise nullptr.\n+ */\n+inline void*\n+align(size_t __align, size_t __size, void*& __ptr, size_t& __space) noexcept\n+{\n+  const size_t __diff = __align - reinterpret_cast<uintptr_t>(__ptr) % __align;\n+  if (__diff + __size >= __space)\n+    return nullptr;\n+  else\n+    {\n+      __space -= __diff;\n+      __ptr = static_cast<char*>(__ptr) + __diff;\n+      return __ptr;\n+    }\n+}\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n+#endif // _GLIBCXX_USE_C99_STDINT_TR1\n+#endif // C++11\n+\n #endif /* _GLIBCXX_MEMORY */"}, {"sha": "d1f94e9bb9e3160f93fcedc6a27f0cce8b933867", "filename": "libstdc++-v3/testsuite/20_util/align/1.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f6ca9d31799133f80e446bd1faad5d9a67bac00/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Falign%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f6ca9d31799133f80e446bd1faad5d9a67bac00/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Falign%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Falign%2F1.cc?ref=2f6ca9d31799133f80e446bd1faad5d9a67bac00", "patch": "@@ -0,0 +1,61 @@\n+// { dg-options \" -std=gnu++11 \" }\n+\n+// 2014-04-16 R\u00fcdiger Sonderfeld  <ruediger@c-plusplus.de>\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the terms\n+// of the GNU General Public License as published by the Free Software\n+// Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// This library is distributed in the hope that it will be useful, but\n+// WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// C++11 [ptr.align] (20.6.5): std::align\n+\n+#include <memory>\n+#include <cstdint>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  size_t space = 100;\n+  void* ptr = new char[space];\n+  char* const orig_ptr = static_cast<char*>(ptr);\n+  char* old_ptr = orig_ptr;\n+  const size_t orig_space = space;\n+  size_t old_space = space;\n+  const size_t alignment = 16;\n+  const size_t size = 10;\n+  while( void* const r = std::align(alignment, size, ptr, space) )\n+    {\n+      VERIFY( r == ptr );\n+      uintptr_t p = reinterpret_cast<uintptr_t>(ptr);\n+      VERIFY( p % alignment == 0 );\n+      char* const x = static_cast<char*>(ptr);\n+      VERIFY( x - old_ptr == old_space - space );\n+      VERIFY( (void*)x < (void*)(orig_ptr + orig_space) );\n+      VERIFY( (void*)(x + size) < (void*)(orig_ptr + orig_space) );\n+      ptr = x + size;\n+      old_ptr = x;\n+      old_space = space;\n+      space -= size;\n+    }\n+  delete [] orig_ptr;\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}]}