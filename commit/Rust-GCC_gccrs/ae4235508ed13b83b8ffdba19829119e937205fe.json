{"sha": "ae4235508ed13b83b8ffdba19829119e937205fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU0MjM1NTA4ZWQxM2I4M2I4ZmZkYmExOTgyOTExOWU5MzcyMDVmZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-08-30T15:59:45Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-08-30T15:59:45Z"}, "message": "trans.c (call_to_gnu): Also force the return slot opt for the call to a function whose return type was...\n\n\t* gcc-interface/trans.c (call_to_gnu): Also force the return slot opt\n\tfor the call to a function whose return type was unconstrained.\n\nFrom-SVN: r163648", "tree": {"sha": "79c5afbd64c3dc192e8f62d52cce15063a486f45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79c5afbd64c3dc192e8f62d52cce15063a486f45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae4235508ed13b83b8ffdba19829119e937205fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae4235508ed13b83b8ffdba19829119e937205fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae4235508ed13b83b8ffdba19829119e937205fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae4235508ed13b83b8ffdba19829119e937205fe/comments", "author": null, "committer": null, "parents": [{"sha": "2e481a2ff50e75ef3b8efb6644b41a260f813d3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e481a2ff50e75ef3b8efb6644b41a260f813d3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e481a2ff50e75ef3b8efb6644b41a260f813d3a"}], "stats": {"total": 74, "additions": 67, "deletions": 7}, "files": [{"sha": "076efea4c71079cca2189d9bc0e3fedefdf518a7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae4235508ed13b83b8ffdba19829119e937205fe/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae4235508ed13b83b8ffdba19829119e937205fe/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ae4235508ed13b83b8ffdba19829119e937205fe", "patch": "@@ -1,8 +1,13 @@\n+2010-08-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (call_to_gnu): Also force the return slot opt\n+\tfor the call to a function whose return type was unconstrained.\n+\n 2010-08-30  Olivier Hainque  <hainque@adacore.com>\n \n-        * gcc-interface/decl.c (FOREIGN_FORCE_REALIGN_STACK): New macro,\n-        replacement for FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN.\n-        (gnat_to_gnu_entity) <case ..., E_Procedure>: Use it.\n+\t* gcc-interface/decl.c (FOREIGN_FORCE_REALIGN_STACK): New macro,\n+\treplacement for FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN.\n+\t(gnat_to_gnu_entity) <case ..., E_Procedure>: Use it.\n \n 2010-08-21  Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "b4031896984dd1e9be4a2482b489b6721cd5c2e8", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae4235508ed13b83b8ffdba19829119e937205fe/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae4235508ed13b83b8ffdba19829119e937205fe/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=ae4235508ed13b83b8ffdba19829119e937205fe", "patch": "@@ -2992,6 +2992,7 @@ call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target)\n       if (gnu_target)\n \t{\n \t  Node_Id gnat_parent = Parent (gnat_node);\n+\t  tree gnu_result_type = TREE_TYPE (gnu_subprog_type);\n \t  enum tree_code op_code;\n \n \t  /* If range check is needed, emit code to generate it.  */\n@@ -3002,11 +3003,15 @@ call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target)\n \n \t  /* ??? If the return type has non-constant size, then force the\n \t     return slot optimization as we would not be able to generate\n-\t     a temporary.  That's what has been done historically.  */\n-\t  if (TREE_CONSTANT (TYPE_SIZE (TREE_TYPE (gnu_subprog_type))))\n-\t    op_code = MODIFY_EXPR;\n-\t  else\n+\t     a temporary.  Likewise if it was unconstrained as we would\n+\t     copy too much data.  That's what has been done historically.  */\n+\t  if (!TREE_CONSTANT (TYPE_SIZE (gnu_result_type))\n+\t      || (TYPE_IS_PADDING_P (gnu_result_type)\n+\t\t  && CONTAINS_PLACEHOLDER_P\n+\t\t     (TYPE_SIZE (TREE_TYPE (TYPE_FIELDS (gnu_result_type))))))\n \t    op_code = INIT_EXPR;\n+\t  else\n+\t    op_code = MODIFY_EXPR;\n \n \t  gnu_result\n \t    = build_binary_op (op_code, NULL_TREE, gnu_target, gnu_result);"}, {"sha": "55660ef6aa6b6577319296999b11b7778ab2facb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae4235508ed13b83b8ffdba19829119e937205fe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae4235508ed13b83b8ffdba19829119e937205fe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ae4235508ed13b83b8ffdba19829119e937205fe", "patch": "@@ -1,3 +1,7 @@\n+2010-08-30  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* gnat.dg/discr24.adb: New test.\n+\n 2010-08-30  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/45449"}, {"sha": "dcd67c4b24087fc3c567a549399b83a28a7a8084", "filename": "gcc/testsuite/gnat.dg/discr24.adb", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae4235508ed13b83b8ffdba19829119e937205fe/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr24.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae4235508ed13b83b8ffdba19829119e937205fe/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr24.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr24.adb?ref=ae4235508ed13b83b8ffdba19829119e937205fe", "patch": "@@ -0,0 +1,46 @@\n+-- { dg-do run }\n+-- { dg-options \"-gnatp\" }\n+\n+procedure Discr24 is\n+\n+   type Family_Type is (Family_Inet, Family_Inet6);\n+   type Port_Type is new Natural;\n+\n+   subtype Inet_Addr_Comp_Type is Natural range 0 .. 255;\n+\n+   type Inet_Addr_VN_Type is array (Natural range <>) of Inet_Addr_Comp_Type;\n+\n+   subtype Inet_Addr_V4_Type is Inet_Addr_VN_Type (1 ..  4);\n+   subtype Inet_Addr_V6_Type is Inet_Addr_VN_Type (1 .. 16);\n+\n+   type Inet_Addr_Type (Family : Family_Type := Family_Inet) is record\n+      case Family is\n+         when Family_Inet =>\n+            Sin_V4 : Inet_Addr_V4_Type := (others => 0);\n+\n+         when Family_Inet6 =>\n+            Sin_V6 : Inet_Addr_V6_Type := (others => 0);\n+      end case;\n+   end record;\n+\n+   type Sock_Addr_Type (Family : Family_Type := Family_Inet) is record\n+      Addr : Inet_Addr_Type (Family);\n+      Port : Port_Type;\n+   end record;\n+\n+   function F return Inet_Addr_Type is\n+   begin\n+      return Inet_Addr_Type'\n+        (Family => Family_Inet, Sin_V4 => (192, 168, 169, 170));\n+   end F;\n+\n+   SA : Sock_Addr_Type;\n+\n+begin\n+   SA.Addr.Sin_V4 := (172, 16, 17, 18);\n+   SA.Port := 1111;\n+   SA.Addr := F;\n+   if SA.Port /= 1111 then\n+     raise Program_Error;\n+   end if;\n+end;"}]}