{"sha": "1998db0fa1f78e373c88daea8bb339d32b41e6aa", "node_id": "C_kwDOANBUbNoAKDE5OThkYjBmYTFmNzhlMzczYzg4ZGFlYThiYjMzOWQzMmI0MWU2YWE", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-12-02T19:43:26Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-12-02T19:47:45Z"}, "message": "testsuite: Adjust dg-error for -fimplicit-constexpr\n\nSome of the new tests were failing with -fimplicit-constexpr.  This\npatch adjusts the expected diagnostic.  Tested with\n\nGXX_TESTSUITE_STDS=98,11,14,17,20,23 make check-c++ RUNTESTFLAGS=\"--target_board=unix\\{,-fimplicit-constexpr\\} dg.exp=spaceship-eq3.C\"\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/constexpr-ex1.C: Adjust dg-error.\n\t* g++.dg/cpp23/constexpr-nonlit10.C: Adjust dg-warning.\n\t* g++.dg/cpp23/constexpr-nonlit11.C: Likewise.\n\t* g++.dg/cpp2a/spaceship-eq3.C: Add dg-error.", "tree": {"sha": "1d71f2b4b5207c42ad0cc8b563f85ee0ff2e8f0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d71f2b4b5207c42ad0cc8b563f85ee0ff2e8f0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1998db0fa1f78e373c88daea8bb339d32b41e6aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1998db0fa1f78e373c88daea8bb339d32b41e6aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1998db0fa1f78e373c88daea8bb339d32b41e6aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1998db0fa1f78e373c88daea8bb339d32b41e6aa/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d19aa6af6634b1e97f38431ad091f3b3f12baf2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d19aa6af6634b1e97f38431ad091f3b3f12baf2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d19aa6af6634b1e97f38431ad091f3b3f12baf2f"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "383d38a42d452a19e088f5459a7f34b2cc1ea9bc", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ex1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1998db0fa1f78e373c88daea8bb339d32b41e6aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1998db0fa1f78e373c88daea8bb339d32b41e6aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex1.C?ref=1998db0fa1f78e373c88daea8bb339d32b41e6aa", "patch": "@@ -87,8 +87,8 @@ struct resource {\n   }\n };\n constexpr resource f(resource d)\n-{ return d; }                  // { dg-error \"non-.constexpr.\" \"\" { target { { ! implicit_constexpr } && c++20_down } } }\n-// { dg-error \"non-.constexpr.\" \"\" { target c++23 } .-2 }\n-constexpr resource d = f(9);   // { dg-message \".constexpr.\" \"\" { target { ! implicit_constexpr } } }\n+{ return d; }                  // { dg-error \"non-.constexpr.\" \"\" { target { { { ! implicit_constexpr } && c++20_down } || c++11_only } } }\n+// { dg-error \"non-.constexpr.\" \"\" { target { c++23 && { ! implicit_constexpr } } } .-2 }\n+constexpr resource d = f(9);   // { dg-message \".constexpr.\" \"\" { target { { ! implicit_constexpr } || c++11_only } } }\n \n // 4.4 floating-point constant expressions"}, {"sha": "31d4b873bbf8da94b5b5411bee0d1532cb93f2ed", "filename": "gcc/testsuite/g++.dg/cpp23/constexpr-nonlit10.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1998db0fa1f78e373c88daea8bb339d32b41e6aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1998db0fa1f78e373c88daea8bb339d32b41e6aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit10.C?ref=1998db0fa1f78e373c88daea8bb339d32b41e6aa", "patch": "@@ -11,13 +11,13 @@ struct NonLiteral {\n // C++23: It is possible to write a constexpr function for which no\n // invocation satisfies the requirements of a core constant expression.\n constexpr NonLiteral\n-fn0 (int) // { dg-warning \"invalid return type\" }\n+fn0 (int) // { dg-warning \"invalid return type\" \"\" { target { ! implicit_constexpr } } }\n {\n   return NonLiteral{};\n }\n \n constexpr int\n-fn1 (NonLiteral) // { dg-warning \"invalid type\" }\n+fn1 (NonLiteral) // { dg-warning \"invalid type\" \"\" { target { ! implicit_constexpr } } }\n {\n   return 42;\n }"}, {"sha": "e08809f873cfde101809b7873154ee08a9ee70d3", "filename": "gcc/testsuite/g++.dg/cpp23/constexpr-nonlit11.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1998db0fa1f78e373c88daea8bb339d32b41e6aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1998db0fa1f78e373c88daea8bb339d32b41e6aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit11.C?ref=1998db0fa1f78e373c88daea8bb339d32b41e6aa", "patch": "@@ -25,10 +25,10 @@ struct X {\n struct S {\n   X x;\n   // Calls a non-constexpr constructor X::X(int).\n-  constexpr S(int i) : x(i) { } // { dg-warning \"call to\" }\n+  constexpr S(int i) : x(i) { } // { dg-warning \"call to\" \"\" { target { ! implicit_constexpr } } }\n   S(int, int) { }\n   // Target constructor isn't constexpr.\n-  constexpr S() : S(42, 42) { } // { dg-warning \"call to\" }\n+  constexpr S() : S(42, 42) { } // { dg-warning \"call to\" \"\" { target { ! implicit_constexpr } } }\n };\n \n namespace N1 {"}, {"sha": "246839f1f955f473e6758cd6da3d2626a1ffaa94", "filename": "gcc/testsuite/g++.dg/cpp2a/spaceship-eq3.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1998db0fa1f78e373c88daea8bb339d32b41e6aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-eq3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1998db0fa1f78e373c88daea8bb339d32b41e6aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-eq3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-eq3.C?ref=1998db0fa1f78e373c88daea8bb339d32b41e6aa", "patch": "@@ -9,6 +9,7 @@ struct D\n   A i;\n   bool operator==(const D& x) const = default; // { dg-error \"A::operator==\" \"\" { target c++20_down } }\n   bool operator!=(const D& z) const = default; // { dg-error \"D::operator==\" \"\" { target c++20_down } }\n+// { dg-error \"called\" \"\" { target { c++23 && implicit_constexpr } } .-1 }\n };\n \n constexpr D d{A()};"}]}