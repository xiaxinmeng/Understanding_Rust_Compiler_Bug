{"sha": "dfd75bf7e9017e92b59be650fca97d2b4b331a82", "node_id": "C_kwDOANBUbNoAKGRmZDc1YmY3ZTkwMTdlOTJiNTliZTY1MGZjYTk3ZDJiNGIzMzFhODI", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-09-09T15:43:12Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-09-09T15:43:12Z"}, "message": "GCN: libgomp+mkoffload.cc: Prepare for reverse offload fn lookup\n\nAdd support to GCN for reverse lookup of function name to prepare for\n'omp target device(ancestor:1)'.\n\ngcc/ChangeLog:\n\n\t* config/gcn/mkoffload.cc (process_asm): Create .offload_func_table,\n\tsimilar to pre-existing .offload_var_table.\n\nlibgomp/ChangeLog:\n\n\t* plugin/plugin-gcn.c (GOMP_OFFLOAD_load_image): Read\n\t.offload_func_table to populate rev_fn_table when requested.", "tree": {"sha": "3a49bcda089c75c1ef6c5a2cdf1d49cd18b4ed0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a49bcda089c75c1ef6c5a2cdf1d49cd18b4ed0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfd75bf7e9017e92b59be650fca97d2b4b331a82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfd75bf7e9017e92b59be650fca97d2b4b331a82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfd75bf7e9017e92b59be650fca97d2b4b331a82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfd75bf7e9017e92b59be650fca97d2b4b331a82/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fcc0cf9dca9f11acbbc94c9437759bdfbd297f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fcc0cf9dca9f11acbbc94c9437759bdfbd297f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fcc0cf9dca9f11acbbc94c9437759bdfbd297f2"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "24d327355e3cb825eb1781d46d8410c35701c9de", "filename": "gcc/config/gcn/mkoffload.cc", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfd75bf7e9017e92b59be650fca97d2b4b331a82/gcc%2Fconfig%2Fgcn%2Fmkoffload.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfd75bf7e9017e92b59be650fca97d2b4b331a82/gcc%2Fconfig%2Fgcn%2Fmkoffload.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fmkoffload.cc?ref=dfd75bf7e9017e92b59be650fca97d2b4b331a82", "patch": "@@ -553,6 +553,7 @@ process_asm (FILE *in, FILE *out, FILE *cfile)\n \t    char *funcname;\n \t    if (sscanf (buf, \"\\t.8byte\\t%ms\\n\", &funcname))\n \t      {\n+\t\tfputs (buf, out);\n \t\tobstack_ptr_grow (&fns_os, funcname);\n \t\tfn_count++;\n \t\tcontinue;\n@@ -577,7 +578,15 @@ process_asm (FILE *in, FILE *out, FILE *cfile)\n \t\t out);\n \t}\n       else if (sscanf (buf, \" .section .gnu.offload_funcs%c\", &dummy) > 0)\n-\tstate = IN_FUNCS;\n+\t{\n+\t  state = IN_FUNCS;\n+\t  /* Likewise for .gnu.offload_vars; used for reverse offload. */\n+\t  fputs (buf, out);\n+\t  fputs (\"\\t.global .offload_func_table\\n\"\n+\t\t \"\\t.type .offload_func_table, @object\\n\"\n+\t\t \".offload_func_table:\\n\",\n+\t\t out);\n+\t}\n       else if (sscanf (buf, \" .amdgpu_metadata%c\", &dummy) > 0)\n \t{\n \t  state = IN_METADATA;"}, {"sha": "04b122f2a0913d4cf4eef86d0e49fb3e05749845", "filename": "libgomp/plugin/plugin-gcn.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfd75bf7e9017e92b59be650fca97d2b4b331a82/libgomp%2Fplugin%2Fplugin-gcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfd75bf7e9017e92b59be650fca97d2b4b331a82/libgomp%2Fplugin%2Fplugin-gcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-gcn.c?ref=dfd75bf7e9017e92b59be650fca97d2b4b331a82", "patch": "@@ -3353,7 +3353,7 @@ GOMP_OFFLOAD_init_device (int n)\n int\n GOMP_OFFLOAD_load_image (int ord, unsigned version, const void *target_data,\n \t\t\t struct addr_pair **target_table,\n-\t\t\t uint64_t **rev_fn_table __attribute__((unused)))\n+\t\t\t uint64_t **rev_fn_table)\n {\n   if (GOMP_VERSION_DEV (version) != GOMP_VERSION_GCN)\n     {\n@@ -3525,6 +3525,30 @@ GOMP_OFFLOAD_load_image (int ord, unsigned version, const void *target_data,\n   if (module->fini_array_func)\n     kernel_count--;\n \n+  if (rev_fn_table != NULL && kernel_count == 0)\n+    *rev_fn_table = NULL;\n+  else if (rev_fn_table != NULL)\n+    {\n+      hsa_status_t status;\n+      hsa_executable_symbol_t var_symbol;\n+      status = hsa_fns.hsa_executable_get_symbol_fn (agent->executable, NULL,\n+\t\t\t\t\t\t     \".offload_func_table\",\n+\t\t\t\t\t\t     agent->id, 0, &var_symbol);\n+      if (status != HSA_STATUS_SUCCESS)\n+\thsa_fatal (\"Could not find symbol for variable in the code object\",\n+\t\t   status);\n+      uint64_t fn_table_addr;\n+      status = hsa_fns.hsa_executable_symbol_get_info_fn\n+\t(var_symbol, HSA_EXECUTABLE_SYMBOL_INFO_VARIABLE_ADDRESS,\n+\t &fn_table_addr);\n+      if (status != HSA_STATUS_SUCCESS)\n+\thsa_fatal (\"Could not extract a variable from its symbol\", status);\n+      *rev_fn_table = GOMP_PLUGIN_malloc (kernel_count * sizeof (uint64_t));\n+      GOMP_OFFLOAD_dev2host (agent->device_id, *rev_fn_table,\n+\t\t\t     (void*) fn_table_addr,\n+\t\t\t     kernel_count * sizeof (uint64_t));\n+    }\n+\n   return kernel_count + var_count + other_count;\n }\n "}]}