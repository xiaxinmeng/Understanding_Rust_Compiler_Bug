{"sha": "8d189b3fd1bc58ffd0270a336212c960e1fb1e1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQxODliM2ZkMWJjNThmZmQwMjcwYTMzNjIxMmM5NjBlMWZiMWUxZQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2011-04-08T17:17:50Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2011-04-08T17:17:50Z"}, "message": "re PR libstdc++/4435 (Object file has undefined basic_string symbol as local.)\n\n2011-04-08  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR 4435\n\t* ira-color.c (setup_profitable_hard_regs): Add comments.\n\tDon't take prohibited hard regs into account.\n\t(setup_conflict_profitable_regs): Rename to\n\tget_conflict_profitable_regs.\n\t(check_hard_reg_p): Check prohibited hard regs.\n\nFrom-SVN: r172201", "tree": {"sha": "1b773edbae7218cbb066c19079e026433a641c0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b773edbae7218cbb066c19079e026433a641c0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d189b3fd1bc58ffd0270a336212c960e1fb1e1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d189b3fd1bc58ffd0270a336212c960e1fb1e1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d189b3fd1bc58ffd0270a336212c960e1fb1e1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d189b3fd1bc58ffd0270a336212c960e1fb1e1e/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dcf0c47e8ddf338b9d3f02f9bee3265c1b4138d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcf0c47e8ddf338b9d3f02f9bee3265c1b4138d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcf0c47e8ddf338b9d3f02f9bee3265c1b4138d1"}], "stats": {"total": 42, "additions": 30, "deletions": 12}, "files": [{"sha": "3e67ab8785bf67a647b8f83e423c03b2b6750e52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d189b3fd1bc58ffd0270a336212c960e1fb1e1e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d189b3fd1bc58ffd0270a336212c960e1fb1e1e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d189b3fd1bc58ffd0270a336212c960e1fb1e1e", "patch": "@@ -1,3 +1,12 @@\n+2011-04-08  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR 4435\n+\t* ira-color.c (setup_profitable_hard_regs): Add comments.\n+\tDon't take prohibited hard regs into account.\n+\t(setup_conflict_profitable_regs): Rename to\n+\tget_conflict_profitable_regs.\n+\t(check_hard_reg_p): Check prohibited hard regs.\n+\n 2011-04-08  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/alpha/alpha.c (alpha_emit_xfloating_libcall): Call use_reg."}, {"sha": "7a1073b0bf2afadd35be5745880db79b3b9c5064", "filename": "gcc/ira-color.c", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d189b3fd1bc58ffd0270a336212c960e1fb1e1e/gcc%2Fira-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d189b3fd1bc58ffd0270a336212c960e1fb1e1e/gcc%2Fira-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-color.c?ref=8d189b3fd1bc58ffd0270a336212c960e1fb1e1e", "patch": "@@ -1057,6 +1057,8 @@ setup_profitable_hard_regs (void)\n   enum reg_class aclass;\n   enum machine_mode mode;\n \n+  /* Initial set up from allocno classes and explicitly conflicting\n+     hard regs.  */\n   EXECUTE_IF_SET_IN_BITMAP (coloring_allocno_bitmap, 0, i, bi)\n     {\n       a = ira_allocnos[i];\n@@ -1076,16 +1078,14 @@ setup_profitable_hard_regs (void)\n \t    {\n \t      COPY_HARD_REG_SET (obj_data->profitable_hard_regs,\n \t\t\t\t reg_class_contents[aclass]);\n-\t      AND_COMPL_HARD_REG_SET\n-\t\t(obj_data->profitable_hard_regs,\n-\t\t ira_prohibited_class_mode_regs[aclass][mode]);\n \t      AND_COMPL_HARD_REG_SET (obj_data->profitable_hard_regs,\n \t\t\t\t      ira_no_alloc_regs);\n \t      AND_COMPL_HARD_REG_SET (obj_data->profitable_hard_regs,\n \t\t\t\t      OBJECT_TOTAL_CONFLICT_HARD_REGS (obj));\n \t    }\n \t}\n     }\n+  /* Exclude hard regs already assigned for conflicting objects.  */\n   EXECUTE_IF_SET_IN_BITMAP (consideration_allocno_bitmap, 0, i, bi)\n     {\n       a = ira_allocnos[i];\n@@ -1124,6 +1124,7 @@ setup_profitable_hard_regs (void)\n \t    }\n \t}\n     }\n+  /* Exclude too costly hard regs.  */\n   EXECUTE_IF_SET_IN_BITMAP (coloring_allocno_bitmap, 0, i, bi)\n     {\n       int min_cost = INT_MAX;\n@@ -1451,9 +1452,9 @@ update_conflict_hard_regno_costs (int *costs, enum reg_class aclass,\n    profitable regs exclude hard regs which can not hold value of mode\n    of allocno A.  */\n static inline void\n-setup_conflict_profitable_regs (ira_allocno_t a, bool retry_p,\n-\t\t\t\tHARD_REG_SET *conflict_regs,\n-\t\t\t\tHARD_REG_SET *profitable_regs)\n+get_conflict_profitable_regs (ira_allocno_t a, bool retry_p,\n+\t\t\t      HARD_REG_SET *conflict_regs,\n+\t\t\t      HARD_REG_SET *profitable_regs)\n {\n   int i, nwords;\n   ira_object_t obj;\n@@ -1485,8 +1486,15 @@ check_hard_reg_p (ira_allocno_t a, int hard_regno,\n \t\t  HARD_REG_SET *conflict_regs, HARD_REG_SET *profitable_regs)\n {\n   int j, nwords, nregs;\n+  enum reg_class aclass;\n+  enum machine_mode mode;\n \n-  nregs = hard_regno_nregs[hard_regno][ALLOCNO_MODE (a)];\n+  aclass = ALLOCNO_CLASS (a);\n+  mode = ALLOCNO_MODE (a);\n+  if (TEST_HARD_REG_BIT (ira_prohibited_class_mode_regs[aclass][mode],\n+\t\t\t hard_regno))\n+    return false;\n+  nregs = hard_regno_nregs[hard_regno][mode];\n   nwords = ALLOCNO_NUM_OBJECTS (a);\n   for (j = 0; j < nregs; j++)\n     {\n@@ -1554,8 +1562,8 @@ assign_hard_reg (ira_allocno_t a, bool retry_p)\n #endif\n \n   ira_assert (! ALLOCNO_ASSIGNED_P (a));\n-  setup_conflict_profitable_regs (a, retry_p,\n-\t\t\t\t  conflicting_regs, profitable_hard_regs);\n+  get_conflict_profitable_regs (a, retry_p,\n+\t\t\t\tconflicting_regs, profitable_hard_regs);\n   aclass = ALLOCNO_CLASS (a);\n   class_size = ira_class_hard_regs_num[aclass];\n   best_hard_regno = -1;\n@@ -2233,7 +2241,8 @@ setup_allocno_available_regs_num (ira_allocno_t a)\n \t      ira_object_t obj = ALLOCNO_OBJECT (a, k);\n \t      object_color_data_t obj_data = OBJECT_COLOR_DATA (obj);\n \n-\t      /* Checking only profitable hard regs.  */\n+\t      /* Checking only profitable hard regs which exclude\n+\t\t object's conflict hard regs.  */\n \t      if (TEST_HARD_REG_BIT (OBJECT_TOTAL_CONFLICT_HARD_REGS (obj),\n \t\t\t\t     hard_regno + j)\n \t\t  || ! TEST_HARD_REG_BIT (obj_data->profitable_hard_regs,\n@@ -2403,8 +2412,8 @@ improve_allocation (void)\n       else\n \tbase_cost = allocno_costs[ira_class_hard_reg_index[aclass][hregno]];\n       try_p = false;\n-      setup_conflict_profitable_regs (a, false,\n-\t\t\t\t      conflicting_regs, profitable_hard_regs);\n+      get_conflict_profitable_regs (a, false,\n+\t\t\t\t    conflicting_regs, profitable_hard_regs);\n       class_size = ira_class_hard_regs_num[aclass];\n       /* Set up cost improvement for usage of each profitable hard\n \t register for allocno A.  */"}]}