{"sha": "bc6ccd33161419ac05ed369d874a9d697805bcaa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM2Y2NkMzMxNjE0MTlhYzA1ZWQzNjlkODc0YTlkNjk3ODA1YmNhYQ==", "commit": {"author": {"name": "Warren Levy", "email": "warrenl@cygnus.com", "date": "2000-09-08T19:37:09Z"}, "committer": {"name": "Warren Levy", "email": "warrenl@gcc.gnu.org", "date": "2000-09-08T19:37:09Z"}, "message": "PropertyChangeEvent.java (serialVersionUID): Added.\n\n\t* java/beans/PropertyChangeEvent.java (serialVersionUID): Added.\n\t* java/beans/PropertyVetoException.java (serialVersionUID): Added.\n\t* java/io/File.java (writeObject): Added.\n\t(readObject): Added.\n\t(serialVersionUID): Added.\n\t* java/io/ObjectOutputStream.java (writeObject): Initialized\n\tfieldsAlreadyWritten before recursion rather than after.\n\t* java/io/ObjectStreamClass.java (serialVersionUID): Added.\n\t* java/io/OptionalDataException.java (serialVersionUID): Added.\n\t(OptionalDataException): Made package private.\n\t* java/io/SyncFailedException.java (SyncFailedException): Removed\n\tdefault constructor to match spec.\n\t* java/lang/Boolean.java (serialVersionUID): Added.\n\t* java/lang/Byte.java (serialVersionUID): Added.\n\t* java/lang/Character.java (serialVersionUID): Added.\n\t* java/lang/Double.java (serialVersionUID): Added.\n\t* java/lang/Float.java (serialVersionUID): Added.\n\t* java/lang/Integer.java (serialVersionUID): Added.\n\t* java/lang/Long.java (serialVersionUID): Added.\n\t* java/lang/Number.java (serialVersionUID): Added.\n\t* java/lang/Short.java (serialVersionUID): Added.\n\t* java/lang/String.java (serialVersionUID): Added.\n\t* java/lang/ThreadDeath.java (ThreadDeath): Removed constructor\n\tto match spec.\n\t* java/lang/reflect/InvocationTargetException.java\n\t(serialVersionUID): Added.\n\t* java/net/URL.java (handler): Made transient.\n\t(hashCode): Added field for serialization, per spec. and use\n\tcached value if available.\n\t(serialVersionUID): Added.\n\t(URL): Initialize hashCode.\n\t(set): Adjust hashCode.\n\t(readObject): New Method to initialize the protocol handler when\n\tdeserializing.\n\t(writeObject): New method.\n\t* java/text/BreakIterator.java: Removed 'implements Serializable'.\n\t* java/text/Collator.java: Removed 'implements Serializable'.\n\t* java/util/GregorianCalendar.java (serialVersionUID): Added.\n\t* java/util/Properties.java (serialVersionUID): Added.\n\t* java/util/Random.java (serialVersionUID): Added.\n\t(seed): Made private.\n\t(nextNextGaussian): Made private.\n\t(haveNextNextGaussian): Made private.\n\t* java/util/Stack.java (serialVersionUID): Added.\n\t* java/util/TimeZone.java (serialVersionUID): Added.\n\t* java/util/Vector.java (serialVersionUID): Added.\n\nSerialization mods.\n\nFrom-SVN: r36272", "tree": {"sha": "6594d4991a7a272f436dbb4de122be3871b19344", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6594d4991a7a272f436dbb4de122be3871b19344"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc6ccd33161419ac05ed369d874a9d697805bcaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc6ccd33161419ac05ed369d874a9d697805bcaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc6ccd33161419ac05ed369d874a9d697805bcaa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc6ccd33161419ac05ed369d874a9d697805bcaa/comments", "author": null, "committer": null, "parents": [{"sha": "759e81878c7e56c50b2565c5fb7ee03b443a9834", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/759e81878c7e56c50b2565c5fb7ee03b443a9834", "html_url": "https://github.com/Rust-GCC/gccrs/commit/759e81878c7e56c50b2565c5fb7ee03b443a9834"}], "stats": {"total": 196, "additions": 162, "deletions": 34}, "files": [{"sha": "3164f0cb7ff0a9930e8785124b16f8f39bb4690c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -1,3 +1,52 @@\n+2000-09-08  Warren Levy  <warrenl@cygnus.com>\n+\n+\t* java/beans/PropertyChangeEvent.java (serialVersionUID): Added.\n+\t* java/beans/PropertyVetoException.java (serialVersionUID): Added.\n+\t* java/io/File.java (writeObject): Added.\n+\t(readObject): Added.\n+\t(serialVersionUID): Added.\n+\t* java/io/ObjectOutputStream.java (writeObject): Initialized\n+\tfieldsAlreadyWritten before recursion rather than after.\n+\t* java/io/ObjectStreamClass.java (serialVersionUID): Added.\n+\t* java/io/OptionalDataException.java (serialVersionUID): Added.\n+\t(OptionalDataException): Made package private.\n+\t* java/io/SyncFailedException.java (SyncFailedException): Removed\n+\tdefault constructor to match spec.\n+\t* java/lang/Boolean.java (serialVersionUID): Added.\n+\t* java/lang/Byte.java (serialVersionUID): Added.\n+\t* java/lang/Character.java (serialVersionUID): Added.\n+\t* java/lang/Double.java (serialVersionUID): Added.\n+\t* java/lang/Float.java (serialVersionUID): Added.\n+\t* java/lang/Integer.java (serialVersionUID): Added.\n+\t* java/lang/Long.java (serialVersionUID): Added.\n+\t* java/lang/Number.java (serialVersionUID): Added.\n+\t* java/lang/Short.java (serialVersionUID): Added.\n+\t* java/lang/String.java (serialVersionUID): Added.\n+\t* java/lang/ThreadDeath.java (ThreadDeath): Removed constructor\n+\tto match spec.\n+\t* java/lang/reflect/InvocationTargetException.java\n+\t(serialVersionUID): Added.\n+\t* java/net/URL.java (handler): Made transient.\n+\t(hashCode): Added field for serialization, per spec. and use\n+\tcached value if available.\n+\t(serialVersionUID): Added.\n+\t(URL): Initialize hashCode.\n+\t(set): Adjust hashCode.\n+\t(readObject): New Method to initialize the protocol handler when\n+\tdeserializing.\n+\t(writeObject): New method.\n+\t* java/text/BreakIterator.java: Removed 'implements Serializable'.\n+\t* java/text/Collator.java: Removed 'implements Serializable'.\n+\t* java/util/GregorianCalendar.java (serialVersionUID): Added.\n+\t* java/util/Properties.java (serialVersionUID): Added.\n+\t* java/util/Random.java (serialVersionUID): Added.\n+\t(seed): Made private.\n+\t(nextNextGaussian): Made private.\n+\t(haveNextNextGaussian): Made private.\n+\t* java/util/Stack.java (serialVersionUID): Added.\n+\t* java/util/TimeZone.java (serialVersionUID): Added.\n+\t* java/util/Vector.java (serialVersionUID): Added.\n+\n 2000-09-07  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t* Makefile.am (Thread.h): Don't be friends with native threads "}, {"sha": "3dc347809a78c20a7ea48a676ed045237ca06a31", "filename": "libjava/java/beans/PropertyChangeEvent.java", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Fbeans%2FPropertyChangeEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Fbeans%2FPropertyChangeEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2FPropertyChangeEvent.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -54,6 +54,8 @@ public class PropertyChangeEvent extends java.util.EventObject {\n \tObject newValue;\n \tObject propagationId;\n \n+\tprivate static final long serialVersionUID = 7042693688939648123L;\n+\n \t/** Create a new PropertyChangeEvent.  Remember that if\n \t ** you received a PropertyChangeEvent and are sending\n \t ** a new one, you should also set the propagation ID"}, {"sha": "daad0105c79aaf3916886103400dbbc7deb77662", "filename": "libjava/java/beans/PropertyVetoException.java", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Fbeans%2FPropertyVetoException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Fbeans%2FPropertyVetoException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2FPropertyVetoException.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -39,6 +39,8 @@\n public class PropertyVetoException extends Exception {\n \tPropertyChangeEvent evt;\n \n+\tprivate static final long serialVersionUID = 129596057694162164L;\n+\n \t/** Instantiate this exception with the given message and property change.\n \t ** @param msg the reason for the veto.\n \t ** @param changeEvent the PropertyChangeEvent that was thrown."}, {"sha": "fc3477c040bc5380c5075a1f77a35170339f159f", "filename": "libjava/java/io/File.java", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Fio%2FFile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Fio%2FFile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFile.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -388,6 +388,24 @@ public void deleteOnExit ()\n     FileDeleter.add (this);\n   }\n \n+  private void writeObject (ObjectOutputStream oos) throws IOException\n+  {\n+    oos.defaultWriteObject ();\n+    oos.writeChar (separatorChar);\n+  }\n+\n+  private void readObject (ObjectInputStream ois)\n+    throws ClassNotFoundException, IOException\n+  {\n+    ois.defaultReadObject ();\n+\n+    // If the file was from an OS with a different dir separator,\n+    // fixup the path to use the separator on this OS.\n+    char oldSeparatorChar = ois.readChar ();\n+    if (oldSeparatorChar != separatorChar)\n+      path = path.replace (oldSeparatorChar, separatorChar);\n+  }\n+\n   // QUERY arguments to access function.\n   private final static int READ = 0;\n   private final static int WRITE = 1;\n@@ -404,4 +422,6 @@ public void deleteOnExit ()\n   private final native long attr (String p, int query);\n   private final native boolean access (String p, int query);\n   private final native boolean stat (String p, int query);\n+\n+  private static final long serialVersionUID = 301077366599181567L;\n }"}, {"sha": "664b882e2292b4d2a3d431e62807cf17d11ed0ee", "filename": "libjava/java/io/ObjectOutputStream.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Fio%2FObjectOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Fio%2FObjectOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectOutputStream.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -313,12 +313,12 @@ public final void writeObject (Object obj) throws IOException\n \t  {\n \t    currentObjectStreamClass = hierarchy[i];\n \n+\t    fieldsAlreadyWritten = false;\n \t    has_write = currentObjectStreamClass.hasWriteMethod ();\n+\n \t    writeFields (obj, currentObjectStreamClass.fields,\n \t\t\t has_write);\n \n-\t    fieldsAlreadyWritten = false;\n-\n \t    if (has_write)\n \t    {\n \t      drain ();"}, {"sha": "085c72b2da3ff77ecc3c2fbaa1c4b48cf0acdd3b", "filename": "libjava/java/io/ObjectStreamClass.java", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectStreamClass.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -635,6 +635,10 @@ private static boolean hasClassInitializer (Class clazz)\n   // these are accessed by ObjectIn/OutputStream\n   int primFieldSize = -1;  // -1 if not yet calculated\n   int objectFieldCount;\n+\n+  // This is probably not necessary because this class is special cased already\n+  // but it will avoid showing up as a discrepancy when comparing SUIDs.\n+  private static final long serialVersionUID = -6120832682080437368L;\n }\n \n "}, {"sha": "ed4624b257c1d482f948b6db8b3714e3b1fdfd36", "filename": "libjava/java/io/OptionalDataException.java", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Fio%2FOptionalDataException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Fio%2FOptionalDataException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FOptionalDataException.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -23,12 +23,16 @@ public class OptionalDataException extends ObjectStreamException\n   public boolean eof;\n   public int length;\n \n-  public OptionalDataException()\n+  // FIXME: This can probably go away once the right signatures of\n+  // these package private constructors is determined.\n+  private static final long serialVersionUID = -8011121865681257820L;\n+\n+  OptionalDataException()\n   {\n     super();\n   }\n \n-  public OptionalDataException(String msg)\n+  OptionalDataException(String msg)\n   {\n     super(msg);\n   }"}, {"sha": "964d24a220b7d4f57ab1ea6a6289739ef7e0b84d", "filename": "libjava/java/io/SyncFailedException.java", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Fio%2FSyncFailedException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Fio%2FSyncFailedException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FSyncFailedException.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -22,11 +22,6 @@\n \n public class SyncFailedException extends IOException\n {\n-  public SyncFailedException ()\n-  {\n-    super ();\n-  }\n-\n   public SyncFailedException (String s)\n   {\n     super (s);"}, {"sha": "027fd24da830760c186402b7d4025e9344a12664", "filename": "libjava/java/lang/Boolean.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Flang%2FBoolean.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Flang%2FBoolean.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FBoolean.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -32,6 +32,8 @@ public final class Boolean extends Object implements Serializable\n   /* The boolean value of the instance. */\n   private boolean value;\n \n+  private static final long serialVersionUID = -3665804199014368530L;\n+\n   public Boolean(boolean boolVal)\n   {\n     value = boolVal;"}, {"sha": "78f34aa64a3eb60e196107359f5f388d18bdfc27", "filename": "libjava/java/lang/Byte.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Flang%2FByte.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Flang%2FByte.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FByte.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -29,6 +29,8 @@ public final class Byte extends Number implements Comparable\n   // by javac, and is handled specially by gcc.\n   public static final Class TYPE = byte.class;\n \n+  private static final long serialVersionUID = -7183698231559129828L;\n+\n   public Byte(byte value)\n   {\n     this.value = value;"}, {"sha": "2695b0409c098df7e93c95ad9afd7d3bb5180524", "filename": "libjava/java/lang/Character.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Flang%2FCharacter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Flang%2FCharacter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FCharacter.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -1,6 +1,6 @@\n // Character.java - Character class.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -83,6 +83,7 @@ public final class Character implements Serializable, Comparable\n   public static final byte PRIVATE_USE = 18;\n   public static final byte SURROGATE   = 19;\n \n+  private static final long serialVersionUID = 3786198910865385080L;\n \n   public Character (char ch)\n   {"}, {"sha": "10e9093cde5daf2a6810e1ab27e74f662533fa53", "filename": "libjava/java/lang/Double.java", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Flang%2FDouble.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Flang%2FDouble.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FDouble.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -32,6 +32,8 @@ public final class Double extends Number\n \n   private double value;\n \n+  private static final long serialVersionUID = -9172774392245257468L;\n+\n   public native static double parseDouble (String s) \n     throws NumberFormatException;\n "}, {"sha": "b5939de4d0e81885ccf29b3f80010c6a820f71ba", "filename": "libjava/java/lang/Float.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Flang%2FFloat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Flang%2FFloat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FFloat.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -32,6 +32,8 @@ public final class Float extends Number\n \n   private float value;\n \n+  private static final long serialVersionUID = -2671257302660747028L;\n+\n   public Float (float value)\n   {\n     this.value = value;"}, {"sha": "163c85015156fbcd8007b620169272b4d88b70ed", "filename": "libjava/java/lang/Integer.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Flang%2FInteger.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Flang%2FInteger.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FInteger.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -30,6 +30,8 @@ public final class Integer extends Number implements Comparable\n   /* The int value of the instance. */\n   private int value;\n \n+  private static final long serialVersionUID = 1360826667806852920L;\n+\n   public Integer(int val)\n   {\n     value = val;"}, {"sha": "e6872dbc49f924f483f3603b1be2ce51af0f249f", "filename": "libjava/java/lang/Long.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Flang%2FLong.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Flang%2FLong.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FLong.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -30,6 +30,8 @@ public final class Long extends Number implements Comparable\n   /* The long value of the instance. */\n   private long value;\n \n+  private static final long serialVersionUID = 4290774380558885855L;\n+\n   public Long(long val)\n   {\n     value = val;"}, {"sha": "92d98afbfb67577c6584c1d38167be71dc21e432", "filename": "libjava/java/lang/Number.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Flang%2FNumber.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Flang%2FNumber.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FNumber.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -36,4 +36,6 @@ public short shortValue()\t// Became non-abstract in JDK 1.2\n   {\n     return (short) intValue();\n   }\n+\n+  private static final long serialVersionUID = -8742448824652078965L;\n }"}, {"sha": "6733607da14adcf1d9cf5bac3454bf707985afff", "filename": "libjava/java/lang/Short.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Flang%2FShort.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Flang%2FShort.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FShort.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -29,6 +29,8 @@ public final class Short extends Number implements Comparable\n   // by javac, and is handled specially by gcc.\n   public static final Class TYPE = short.class;\n \n+  private static final long serialVersionUID = 7515723908773894738L;\n+\n   public Short(short value)\n   {\n     this.value = value;"}, {"sha": "9937374f1bc9af48a709417dd129c0da8bba1770", "filename": "libjava/java/lang/String.java", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Flang%2FString.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Flang%2FString.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FString.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -26,6 +26,10 @@ public final class String implements Serializable, Comparable\n   private int boffset; // Note this is a byte offset - don't use in Java code!\n   private int count;\n \n+  // This is probably not necessary because this class is special cased already\n+  // but it will avoid showing up as a discrepancy when comparing SUIDs.\n+  private static final long serialVersionUID = -6849794470754667710L;\n+\n   public String ()\n   {\n     init();"}, {"sha": "ae0e3fb40f66460d506f84a56fea49cc33bec4ca", "filename": "libjava/java/lang/ThreadDeath.java", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Flang%2FThreadDeath.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Flang%2FThreadDeath.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThreadDeath.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -1,6 +1,6 @@\n // ThreadDeath.java - Special exception registering Thread death.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -27,9 +27,4 @@ public ThreadDeath ()\n   {\n     super ();\n   }\n-\n-  public ThreadDeath (String message)\n-  {\n-    super (message);\n-  }\n }"}, {"sha": "0152a7bf2f5e736844425083333dda30b772a7fa", "filename": "libjava/java/lang/reflect/InvocationTargetException.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Flang%2Freflect%2FInvocationTargetException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Flang%2Freflect%2FInvocationTargetException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FInvocationTargetException.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -1,6 +1,6 @@\n // InvocationTargetException.java - Wrapper exception for reflection.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -70,4 +70,6 @@ public void printStackTrace (PrintWriter wr)\n   // The wrapped exception.  The name is specified by the\n   // serialization spec.\n   private Throwable target;\n+\n+  private static final long serialVersionUID = 4085088731926701167L;\n }"}, {"sha": "25837325fc0dd9f322e6147d115a18c2b55e55d7", "filename": "libjava/java/net/URL.java", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Fnet%2FURL.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Fnet%2FURL.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURL.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -1,6 +1,6 @@\n // URL.java - A Uniform Resource Locator.\n \n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -32,10 +32,13 @@ public final class URL implements Serializable\n   private int port = -1;\t// Initialize for constructor using context.\n   private String file;\n   private String ref;\n-  private URLStreamHandler handler;\n+  private int hashCode = 0;\n+  transient private URLStreamHandler handler;\n   private static Hashtable handlers = new Hashtable();\n   private static URLStreamHandlerFactory factory;\n \n+  private static final long serialVersionUID = -7627629688361524110L;\n+\n   public URL(String protocol, String host, int port, String file)\n     throws MalformedURLException\n   {\n@@ -90,6 +93,7 @@ public URL(String protocol, String host, int port, String file,\n \tthis.file = file.substring(0, hashAt);\n \tthis.ref = file.substring(hashAt + 1);\n       }\n+    hashCode = hashCode();\t\t\t// Used for serialization.\n   }\n \n   public URL(String spec) throws MalformedURLException\n@@ -181,6 +185,8 @@ else if (context != null)\n \t\t\t  hashAt < 0 ? spec.length() : hashAt);\n     if (hashAt >= 0)\n       ref = spec.substring(hashAt + 1);\n+\n+    hashCode = hashCode();\t\t\t// Used for serialization.\n   }\n \n   public boolean equals(Object obj)\n@@ -249,7 +255,10 @@ public int hashCode()\n     // (which was reduced to \"\" with a hashcode of zero).  A \"\" host also\n     // causes the port number and the two hashcodes to be summed.\n \n-    return (protocol.hashCode() + ((host == null) ? 0 : host.hashCode()) +\n+    if (hashCode != 0)\n+      return hashCode;\t\t// Use cached value if available.\n+    else\n+      return (protocol.hashCode() + ((host == null) ? 0 : host.hashCode()) +\n \tport + file.hashCode());\n   }\n \n@@ -290,6 +299,7 @@ protected void set(String protocol, String host, int port, String file,\n     this.host = host;\n     this.file = file;\n     this.ref = ref;\n+    hashCode = hashCode();\t\t\t// Used for serialization.\n   }\n \n   public static synchronized void\n@@ -384,4 +394,18 @@ else if (protocol.equals (\"file\"))\n \n     return handler;\n   }\n+\n+  private void readObject(ObjectInputStream ois)\n+    throws IOException, ClassNotFoundException\n+  {\n+    ois.defaultReadObject();\n+    this.handler = setURLStreamHandler(protocol);\n+    if (this.handler == null)\n+      throw new IOException(\"Handler for protocol \" + protocol + \" not found\");\n+  }\n+\n+  private void writeObject(ObjectOutputStream oos) throws IOException\n+  {\n+    oos.defaultWriteObject();\n+  }\n }"}, {"sha": "ef971bf4f757a3c607d79a68978501754107d41c", "filename": "libjava/java/text/BreakIterator.java", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Ftext%2FBreakIterator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Ftext%2FBreakIterator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FBreakIterator.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -10,7 +10,6 @@\n \n package java.text;\n \n-import java.io.Serializable;\n import java.util.Locale;\n import java.util.MissingResourceException;\n import java.util.ResourceBundle;\n@@ -24,7 +23,7 @@\n  * Status:  Believed complete and correct to 1.1.\n  */\n \n-public abstract class BreakIterator implements Cloneable, Serializable\n+public abstract class BreakIterator implements Cloneable\n {\n   // The value was discovered by writing a test program.\n   public static final int DONE = -1;"}, {"sha": "4280ea235c3478308fa85e5f621da5a23fa4d545", "filename": "libjava/java/text/Collator.java", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Ftext%2FCollator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Ftext%2FCollator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FCollator.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -10,7 +10,6 @@\n \n package java.text;\n \n-import java.io.Serializable;\n import java.util.Locale;\n import java.util.MissingResourceException;\n import java.util.ResourceBundle;\n@@ -24,7 +23,7 @@\n  * Status: Mostly complete, but parts stubbed out.  Look for FIXME.\n  */\n \n-public abstract class Collator implements Cloneable, Serializable\n+public abstract class Collator implements Cloneable\n {\n   public static final int NO_DECOMPOSITION = 0;\n   public static final int CANONICAL_DECOMPOSITION = 1;"}, {"sha": "9e73131c76839cc0ec7c47c89dd233a7b0b62505", "filename": "libjava/java/util/GregorianCalendar.java", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Futil%2FGregorianCalendar.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Futil%2FGregorianCalendar.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FGregorianCalendar.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -89,6 +89,8 @@ public class GregorianCalendar extends Calendar {\n     3600000 /* DST_OFFSET */\n   };\n \n+  private static final long serialVersionUID = -8125100834729963327L;\n+\n   public GregorianCalendar ()\n   {\n     this(null, null);"}, {"sha": "6360b9932d9299fac2a06fdfbf7b1f6ba4711af1", "filename": "libjava/java/util/Properties.java", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Futil%2FProperties.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Futil%2FProperties.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FProperties.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -33,6 +33,8 @@ public class Properties extends Hashtable\n {\n   protected Properties defaults;\n \n+  private static final long serialVersionUID = 4112578634029874840L;\n+\n   public String getProperty (String propName)\n     {\n       return getProperty (propName, null);"}, {"sha": "5ed4532050a4c7d69030ec99d7f0a4be44bcc997", "filename": "libjava/java/util/Random.java", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Futil%2FRandom.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Futil%2FRandom.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FRandom.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -26,15 +26,17 @@\n public class Random implements Serializable\n {\n   /* Used by next() to hold the state of the pseudorandom number generator */\n-  protected long seed;\n+  private long seed;\n \n   /* Used by nextGaussian() to hold a precomputed value */\n   /* to be delivered by that method the next time it is called */\n-  protected double nextNextGaussian;\n+  private double nextNextGaussian;\n \n   /* Used by nextGaussian() to keep track of whether it is has precomputed */\n   /* and stashed away the next value to be delivered by that method */\n-  protected boolean haveNextNextGaussian = false;\n+  private boolean haveNextNextGaussian = false;\n+\n+  private static final long serialVersionUID = 3905348978240129619L;\n \n   public Random()\n   {"}, {"sha": "963513ea4e071721cc0a26e79a2d295357bfd624", "filename": "libjava/java/util/Stack.java", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Futil%2FStack.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Futil%2FStack.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FStack.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -71,4 +71,6 @@ public synchronized int search(Object obj)\n \n     return -1;\n   }\n+\n+  private static final long serialVersionUID = 1224463164541339165L;\n }"}, {"sha": "0145d72d11f44ba028310afc66f2f86a38455d84", "filename": "libjava/java/util/TimeZone.java", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Futil%2FTimeZone.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Futil%2FTimeZone.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FTimeZone.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -30,6 +30,8 @@ public abstract class TimeZone implements java.io.Serializable, Cloneable\n \n   private static TimeZone zoneDefault;\n \n+  private static final long serialVersionUID = 3581463369166924961L;\n+\n   public TimeZone ()\n   {\n   }"}, {"sha": "81178bf6255dee79fea34957d2b0b9421fd7a92c", "filename": "libjava/java/util/Vector.java", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Futil%2FVector.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6ccd33161419ac05ed369d874a9d697805bcaa/libjava%2Fjava%2Futil%2FVector.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FVector.java?ref=bc6ccd33161419ac05ed369d874a9d697805bcaa", "patch": "@@ -61,6 +61,8 @@ public class Vector implements Cloneable, Serializable\n   /* The buffer in which elements of this vector are stored */\n   protected Object[] elementData;\n \n+  private static final long serialVersionUID = -2767605614048989439L;\n+\n   public Vector()\n   {\n     this(10, 0);"}]}