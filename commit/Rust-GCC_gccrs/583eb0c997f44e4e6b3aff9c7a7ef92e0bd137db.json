{"sha": "583eb0c997f44e4e6b3aff9c7a7ef92e0bd137db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgzZWIwYzk5N2Y0NGU0ZTZiM2FmZjljN2E3ZWY5MmUwYmQxMzdkYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-04-02T08:50:32Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-04-02T08:50:32Z"}, "message": "decl.c (gnat_to_gnu_entity): Do not make fat pointer types artificial unconditionally.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Type>: Do not make\n\tfat pointer types artificial unconditionally.\n\t<E_Array_Subtype>: Attach the base array type as a parallel type if it\n\tisn't artificial.\n\nFrom-SVN: r171883", "tree": {"sha": "8230f6735128dfc17497f19db4955668566e72c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8230f6735128dfc17497f19db4955668566e72c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/583eb0c997f44e4e6b3aff9c7a7ef92e0bd137db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/583eb0c997f44e4e6b3aff9c7a7ef92e0bd137db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/583eb0c997f44e4e6b3aff9c7a7ef92e0bd137db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/583eb0c997f44e4e6b3aff9c7a7ef92e0bd137db/comments", "author": null, "committer": null, "parents": [{"sha": "e3edbd56bae7748e9aee236cae35836edb9e35e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3edbd56bae7748e9aee236cae35836edb9e35e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3edbd56bae7748e9aee236cae35836edb9e35e8"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "dd108225ccd30810bbb0132acc54e8a7d00d142e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/583eb0c997f44e4e6b3aff9c7a7ef92e0bd137db/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/583eb0c997f44e4e6b3aff9c7a7ef92e0bd137db/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=583eb0c997f44e4e6b3aff9c7a7ef92e0bd137db", "patch": "@@ -1,3 +1,10 @@\n+2011-04-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Type>: Do not make\n+\tfat pointer types artificial unconditionally.\n+\t<E_Array_Subtype>: Attach the base array type as a parallel type if it\n+\tisn't artificial.\n+\n 2011-04-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/gigi.h (get_dummy_type): Declare."}, {"sha": "7a18d32752ae71828a2356a71a144f3d23cacb16", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/583eb0c997f44e4e6b3aff9c7a7ef92e0bd137db/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/583eb0c997f44e4e6b3aff9c7a7ef92e0bd137db/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=583eb0c997f44e4e6b3aff9c7a7ef92e0bd137db", "patch": "@@ -2175,7 +2175,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \telse\n \t  gnat_name = gnat_entity;\n \tcreate_type_decl (create_concat_name (gnat_name, \"XUP\"),\n-\t\t\t  gnu_fat_type, NULL, true,\n+\t\t\t  gnu_fat_type, NULL, !Comes_From_Source (gnat_entity),\n \t\t\t  debug_info_p, gnat_entity);\n \n \t/* Create the type to be used as what a thin pointer designates:\n@@ -2537,14 +2537,25 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t      add_parallel_type (TYPE_STUB_DECL (gnu_type), gnu_bound_rec);\n \t    }\n \n-\t  /* Otherwise, for a packed array, make the original array type a\n-\t     parallel type.  */\n-\t  else if (debug_info_p\n-\t\t   && Is_Packed_Array_Type (gnat_entity)\n-\t\t   && present_gnu_tree (Original_Array_Type (gnat_entity)))\n-\t    add_parallel_type (TYPE_STUB_DECL (gnu_type),\n-\t\t\t       gnat_to_gnu_type\n-\t\t\t       (Original_Array_Type (gnat_entity)));\n+\t  /* If this is a packed array type, make the original array type a\n+\t     parallel type.  Otherwise, do it for the base array type if it\n+\t     isn't artificial to make sure it is kept in the debug info.  */\n+\t  if (debug_info_p)\n+\t    {\n+\t      if (Is_Packed_Array_Type (gnat_entity)\n+\t\t  && present_gnu_tree (Original_Array_Type (gnat_entity)))\n+\t\tadd_parallel_type (TYPE_STUB_DECL (gnu_type),\n+\t\t\t\t   gnat_to_gnu_type\n+\t\t\t\t   (Original_Array_Type (gnat_entity)));\n+\t      else\n+\t\t{\n+\t\t  tree gnu_base_decl\n+\t\t    = gnat_to_gnu_entity (Etype (gnat_entity), NULL_TREE, 0);\n+\t\t  if (!DECL_ARTIFICIAL (gnu_base_decl))\n+\t\t    add_parallel_type (TYPE_STUB_DECL (gnu_type),\n+\t\t\t\t       TREE_TYPE (TREE_TYPE (gnu_base_decl)));\n+\t\t}\n+\t    }\n \n \t  TYPE_CONVENTION_FORTRAN_P (gnu_type) = convention_fortran_p;\n \t  TYPE_PACKED_ARRAY_TYPE_P (gnu_type)"}]}