{"sha": "5a5474ba24dad14f32e2adfa5fe4d8431df77d4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE1NDc0YmEyNGRhZDE0ZjMyZTJhZGZhNWZlNGQ4NDMxZGY3N2Q0ZQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-01-08T14:45:28Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-01-08T14:45:28Z"}, "message": "Use proper type in linear transformation in tree-switch-conversion (PR tree-optimization/88753).\n\n2019-01-08  Martin Liska  <mliska@suse.cz>\n\n\tPR tree-optimization/88753\n\t* tree-switch-conversion.c (switch_conversion::build_one_array):\n\tCome up with local variable constructor.  Convert first to\n\ttype of constructor values.\n2019-01-08  Martin Liska  <mliska@suse.cz>\n\n\tPR tree-optimization/88753\n\t* gcc.dg/tree-ssa/pr88753.c: New test.\n\nFrom-SVN: r267728", "tree": {"sha": "b7808b55c647dd4727ac91fc6e9db04df57390e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7808b55c647dd4727ac91fc6e9db04df57390e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a5474ba24dad14f32e2adfa5fe4d8431df77d4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a5474ba24dad14f32e2adfa5fe4d8431df77d4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a5474ba24dad14f32e2adfa5fe4d8431df77d4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a5474ba24dad14f32e2adfa5fe4d8431df77d4e/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9f5391ee9521e90d0f3b545893d9d4b3d98839d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f5391ee9521e90d0f3b545893d9d4b3d98839d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f5391ee9521e90d0f3b545893d9d4b3d98839d1"}], "stats": {"total": 86, "additions": 79, "deletions": 7}, "files": [{"sha": "c512ff496a8dee06da4be92b88b49d3696b79ef1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5474ba24dad14f32e2adfa5fe4d8431df77d4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5474ba24dad14f32e2adfa5fe4d8431df77d4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a5474ba24dad14f32e2adfa5fe4d8431df77d4e", "patch": "@@ -1,3 +1,10 @@\n+2019-01-08  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/88753\n+\t* tree-switch-conversion.c (switch_conversion::build_one_array):\n+\tCome up with local variable constructor.  Convert first to\n+\ttype of constructor values.\n+\n 2019-01-08  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/86554"}, {"sha": "c53bf5a6ee77275fb0a858fdc9add61d3dd61127", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5474ba24dad14f32e2adfa5fe4d8431df77d4e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5474ba24dad14f32e2adfa5fe4d8431df77d4e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a5474ba24dad14f32e2adfa5fe4d8431df77d4e", "patch": "@@ -1,3 +1,8 @@\n+2019-01-08  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/88753\n+\t* gcc.dg/tree-ssa/pr88753.c: New test.\n+\n 2019-01-08  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/86554"}, {"sha": "eaefc38962ffd18fcdfcdc5048ca4e7bc4ce0a8b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr88753.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5474ba24dad14f32e2adfa5fe4d8431df77d4e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr88753.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5474ba24dad14f32e2adfa5fe4d8431df77d4e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr88753.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr88753.c?ref=5a5474ba24dad14f32e2adfa5fe4d8431df77d4e", "patch": "@@ -0,0 +1,57 @@\n+/* PR tree-optimization/88753 */\n+/* { dg-options \"-O2 -fdump-tree-switchconv\" } */\n+/* { dg-do run { target nonpic } } */\n+\n+typedef unsigned short int uint16_t;\n+typedef unsigned char uint8_t;\n+\n+uint16_t length;\n+uint16_t enc_method_global;\n+\n+uint8_t\n+__attribute__((noipa))\n+_zip_buffer_get_8(int buffer)\n+{\n+  return buffer;\n+}\n+\n+  int\n+  __attribute__((noipa))\n+foo(int v)\n+{\n+  uint16_t enc_method;\n+  switch (_zip_buffer_get_8(v)) {\n+    case 1:\n+      enc_method = 0x0101;\n+      break;\n+    case 2:\n+      enc_method = 0x0102;\n+      break;\n+    case 3:\n+      enc_method = 0x0103;\n+      break;\n+    default:\n+      __builtin_abort ();\n+  }\n+\n+  enc_method_global = enc_method;\n+}\n+\n+int main(int argc, char **argv)\n+{\n+  foo (1);\n+  if (enc_method_global != 0x0101)\n+    __builtin_abort ();\n+\n+  foo (2);\n+  if (enc_method_global != 0x0102)\n+    __builtin_abort ();\n+\n+  foo (3);\n+  if (enc_method_global != 0x0103)\n+    __builtin_abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Linear transformation with A = 1 and B = 256\" 1 \"switchconv\" } } */"}, {"sha": "c3f2baf39d70de39180311c7cc36dfe282b865eb", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a5474ba24dad14f32e2adfa5fe4d8431df77d4e/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a5474ba24dad14f32e2adfa5fe4d8431df77d4e/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=5a5474ba24dad14f32e2adfa5fe4d8431df77d4e", "patch": "@@ -473,8 +473,10 @@ switch_conversion::contains_linear_function_p (vec<constructor_elt, va_gc> *vec,\n   if (TREE_CODE (elt0) != INTEGER_CST || TREE_CODE (elt1) != INTEGER_CST)\n     return false;\n \n-  wide_int range_min = wi::to_wide (fold_convert (TREE_TYPE (elt0),\n-\t\t\t\t\t\t  m_range_min));\n+  wide_int range_min\n+    = wide_int::from (wi::to_wide (m_range_min),\n+\t\t      TYPE_PRECISION (TREE_TYPE (elt0)),\n+\t\t      TYPE_SIGN (TREE_TYPE (m_range_min)));\n   wide_int y1 = wi::to_wide (elt0);\n   wide_int y2 = wi::to_wide (elt1);\n   wide_int a = y2 - y1;\n@@ -600,17 +602,18 @@ switch_conversion::build_one_array (int num, tree arr_index_type,\n   name = copy_ssa_name (PHI_RESULT (phi));\n   m_target_inbound_names[num] = name;\n \n+  vec<constructor_elt, va_gc> *constructor = m_constructors[num];\n   wide_int coeff_a, coeff_b;\n-  bool linear_p = contains_linear_function_p (m_constructors[num], &coeff_a,\n-\t\t\t\t\t      &coeff_b);\n+  bool linear_p = contains_linear_function_p (constructor, &coeff_a, &coeff_b);\n   if (linear_p)\n     {\n       if (dump_file && coeff_a.to_uhwi () > 0)\n \tfprintf (dump_file, \"Linear transformation with A = %\" PRId64\n \t\t \" and B = %\" PRId64 \"\\n\", coeff_a.to_shwi (),\n \t\t coeff_b.to_shwi ());\n \n-      tree t = unsigned_type_for (TREE_TYPE (m_index_expr));\n+      /* We must use type of constructor values.  */\n+      tree t = unsigned_type_for (TREE_TYPE ((*constructor)[0].value));\n       gimple_seq seq = NULL;\n       tree tmp = gimple_convert (&seq, t, m_index_expr);\n       tree tmp2 = gimple_build (&seq, MULT_EXPR, t,\n@@ -633,10 +636,10 @@ switch_conversion::build_one_array (int num, tree arr_index_type,\n \t  unsigned int i;\n \t  constructor_elt *elt;\n \n-\t  FOR_EACH_VEC_SAFE_ELT (m_constructors[num], i, elt)\n+\t  FOR_EACH_VEC_SAFE_ELT (constructor, i, elt)\n \t    elt->value = fold_convert (value_type, elt->value);\n \t}\n-      ctor = build_constructor (array_type, m_constructors[num]);\n+      ctor = build_constructor (array_type, constructor);\n       TREE_CONSTANT (ctor) = true;\n       TREE_STATIC (ctor) = true;\n "}]}