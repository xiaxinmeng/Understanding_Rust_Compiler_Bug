{"sha": "884316ff5dd83bc8b9b38d276dcf62329ebe1681", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg0MzE2ZmY1ZGQ4M2JjOGI5YjM4ZDI3NmRjZjYyMzI5ZWJlMTY4MQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2008-06-04T12:17:50Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2008-06-04T12:17:50Z"}, "message": "m68k.opt (mxgot): New option.\n\n2008-06-04  Joseph Myers  <joseph@codesourcery.com>\n            Maxim Kuvyrkov  <maxim@codesourcery.com>\n\n\t* config/m68k/m68k.opt (mxgot): New option.\n\t* config/m68k/m68k.c (legitimize_pic_address): Handle -mxgot.\n\t(m68k_output_addr_const_extra): New.\n\t* config/m68k/m68k.h (OUTPUT_ADDR_CONST_EXTRA): New.\n\t* config/m68k/m68k-protos.h (m68k_output_addr_const_extra): Declare.\n\t* config/m68k/m68k.md (UNSPEC_GOTOFF): Define.\n\t* doc/invoke.texi (M680x0 Options): Document -mxgot.\n\ntestsuite:\n2008-06-04  Joseph Myers  <joseph@codesourcery.com>\n            Maxim Kuvyrkov  <maxim@codesourcery.com>\n\n\t* gcc.target/m68k/xgot-1.c: New test.\n\nCo-Authored-By: Maxim Kuvyrkov <maxim@codesourcery.com>\n\nFrom-SVN: r136355", "tree": {"sha": "34d800b5977091b32c2932a09d612fb5986fd13c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34d800b5977091b32c2932a09d612fb5986fd13c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/884316ff5dd83bc8b9b38d276dcf62329ebe1681", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/884316ff5dd83bc8b9b38d276dcf62329ebe1681", "html_url": "https://github.com/Rust-GCC/gccrs/commit/884316ff5dd83bc8b9b38d276dcf62329ebe1681", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/884316ff5dd83bc8b9b38d276dcf62329ebe1681/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e19bf429e8fdfe384b9dad2f3bbfd0c15524cda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e19bf429e8fdfe384b9dad2f3bbfd0c15524cda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e19bf429e8fdfe384b9dad2f3bbfd0c15524cda"}], "stats": {"total": 115, "additions": 111, "deletions": 4}, "files": [{"sha": "e7e91d7bb150535f6a46dc4a4d38c03b938544b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/884316ff5dd83bc8b9b38d276dcf62329ebe1681/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/884316ff5dd83bc8b9b38d276dcf62329ebe1681/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=884316ff5dd83bc8b9b38d276dcf62329ebe1681", "patch": "@@ -1,3 +1,14 @@\n+2008-06-04  Joseph Myers  <joseph@codesourcery.com>\n+            Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\t* config/m68k/m68k.opt (mxgot): New option.\n+\t* config/m68k/m68k.c (legitimize_pic_address): Handle -mxgot.\n+\t(m68k_output_addr_const_extra): New.\n+\t* config/m68k/m68k.h (OUTPUT_ADDR_CONST_EXTRA): New.\n+\t* config/m68k/m68k-protos.h (m68k_output_addr_const_extra): Declare.\n+\t* config/m68k/m68k.md (UNSPEC_GOTOFF): Define.\n+\t* doc/invoke.texi (M680x0 Options): Document -mxgot.\n+\n 2008-06-04  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-structalias.c (handle_ptr_arith): Correctly handle"}, {"sha": "596d4ec8e034119e5fcc00ee22092e6e49c544b4", "filename": "gcc/config/m68k/m68k-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/884316ff5dd83bc8b9b38d276dcf62329ebe1681/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/884316ff5dd83bc8b9b38d276dcf62329ebe1681/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h?ref=884316ff5dd83bc8b9b38d276dcf62329ebe1681", "patch": "@@ -50,6 +50,7 @@ extern bool strict_low_part_peephole_ok (enum machine_mode mode, rtx first_insn,\n extern int standard_68881_constant_p (rtx);\n extern void print_operand_address (FILE *, rtx);\n extern void print_operand (FILE *, rtx, int);\n+extern bool m68k_output_addr_const_extra (FILE *, rtx);\n extern void notice_update_cc (rtx, rtx);\n extern bool m68k_legitimate_base_reg_p (rtx, bool);\n extern bool m68k_legitimate_index_reg_p (rtx, bool);"}, {"sha": "a1437d29c366e6e61116c4cdbd5fb818e744cb40", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/884316ff5dd83bc8b9b38d276dcf62329ebe1681/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/884316ff5dd83bc8b9b38d276dcf62329ebe1681/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=884316ff5dd83bc8b9b38d276dcf62329ebe1681", "patch": "@@ -2059,9 +2059,30 @@ legitimize_pic_address (rtx orig, enum machine_mode mode ATTRIBUTE_UNUSED,\n     {\n       gcc_assert (reg);\n \n-      pic_ref = gen_rtx_MEM (Pmode,\n-\t\t\t     gen_rtx_PLUS (Pmode,\n-\t\t\t\t\t   pic_offset_table_rtx, orig));\n+      if (TARGET_COLDFIRE && TARGET_XGOT)\n+\t/* When compiling with -mxgot switch the code for the above\n+\t   example will look like this:\n+\n+\t   movel a5, a0\n+\t   addl _foo@GOT, a0\n+\t   movel a0@, a0\n+\t   movel #12345, a0@  */\n+\t{\n+\t  rtx pic_offset;\n+\n+\t  /* Wrap ORIG in UNSPEC_GOTOFF to tip m68k_output_addr_const_extra\n+\t     to put @GOT after reference.  */\n+\t  pic_offset = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, orig),\n+\t\t\t\t       UNSPEC_GOTOFF);\n+\t  pic_offset = gen_rtx_CONST (Pmode, pic_offset);\n+\t  emit_move_insn (reg, pic_offset);\n+\t  emit_insn (gen_addsi3 (reg, reg, pic_offset_table_rtx));\n+\t  pic_ref = gen_rtx_MEM (Pmode, reg);\n+\t}\n+      else\n+\tpic_ref = gen_rtx_MEM (Pmode,\n+\t\t\t       gen_rtx_PLUS (Pmode,\n+\t\t\t\t\t     pic_offset_table_rtx, orig));\n       crtl->uses_pic_offset_table = 1;\n       MEM_READONLY_P (pic_ref) = 1;\n       emit_move_insn (reg, pic_ref);\n@@ -3869,6 +3890,20 @@ print_operand (FILE *file, rtx op, int letter)\n     }\n }\n \n+/* m68k implementation of OUTPUT_ADDR_CONST_EXTRA.  */\n+\n+bool\n+m68k_output_addr_const_extra (FILE *file, rtx x)\n+{\n+  if (GET_CODE (x) != UNSPEC || XINT (x, 1) != UNSPEC_GOTOFF)\n+    return false;\n+\n+  output_addr_const (file, XVECEXP (x, 0, 0));\n+  /* ??? What is the non-MOTOROLA syntax?  */\n+  fputs (\"@GOT\", file);\n+  return true;\n+}\n+\n \f\n /* A C compound statement to output to stdio stream STREAM the\n    assembler syntax for an instruction operand that is a memory"}, {"sha": "7a68595a3345742555f46627c3ba1ebe061196f7", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/884316ff5dd83bc8b9b38d276dcf62329ebe1681/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/884316ff5dd83bc8b9b38d276dcf62329ebe1681/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=884316ff5dd83bc8b9b38d276dcf62329ebe1681", "patch": "@@ -1079,6 +1079,12 @@ do { if (cc_prev_status.flags & CC_IN_68881)\t\t\t\\\n \n #define PRINT_OPERAND_ADDRESS(FILE, ADDR) print_operand_address (FILE, ADDR)\n \n+#define OUTPUT_ADDR_CONST_EXTRA(FILE, X, FAIL)\t\t\\\n+do {\t\t\t\t\t\t\t\\\n+  if (! m68k_output_addr_const_extra (FILE, (X)))\t\\\n+    goto FAIL;\t\t\t\t\t\t\\\n+} while (0);\n+\n /* Values used in the MICROARCH argument to M68K_DEVICE.  */\n enum uarch_type\n {"}, {"sha": "9effb344ec5ea0f96cd153cc474b7bcd40b374c5", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/884316ff5dd83bc8b9b38d276dcf62329ebe1681/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/884316ff5dd83bc8b9b38d276dcf62329ebe1681/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=884316ff5dd83bc8b9b38d276dcf62329ebe1681", "patch": "@@ -116,6 +116,7 @@\n    (UNSPEC_GOT 3)\n    (UNSPEC_IB 4)\n    (UNSPEC_TIE 5)\n+   (UNSPEC_GOTOFF 6)\n   ])\n \n ;; UNSPEC_VOLATILE usage:"}, {"sha": "bc0fb2c9939bffab223a8999c30eda6ef21244d1", "filename": "gcc/config/m68k/m68k.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/884316ff5dd83bc8b9b38d276dcf62329ebe1681/gcc%2Fconfig%2Fm68k%2Fm68k.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/884316ff5dd83bc8b9b38d276dcf62329ebe1681/gcc%2Fconfig%2Fm68k%2Fm68k.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.opt?ref=884316ff5dd83bc8b9b38d276dcf62329ebe1681", "patch": "@@ -178,3 +178,7 @@ Do not use unaligned memory references\n mtune=\n Target RejectNegative Joined\n Tune for the specified target CPU or architecture\n+\n+mxgot\n+Target Report Mask(XGOT)\n+Support more than 8192 GOT entries on ColdFire"}, {"sha": "ece9d9d5fc0e65eae9817828d94544cd286ad0bc", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/884316ff5dd83bc8b9b38d276dcf62329ebe1681/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/884316ff5dd83bc8b9b38d276dcf62329ebe1681/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=884316ff5dd83bc8b9b38d276dcf62329ebe1681", "patch": "@@ -607,7 +607,8 @@ Objective-C and Objective-C++ Dialects}.\n -mnobitfield  -mrtd  -mno-rtd  -mdiv  -mno-div  -mshort @gol\n -mno-short  -mhard-float  -m68881  -msoft-float  -mpcrel @gol\n -malign-int  -mstrict-align  -msep-data  -mno-sep-data @gol\n--mshared-library-id=n  -mid-shared-library  -mno-id-shared-library}\n+-mshared-library-id=n  -mid-shared-library  -mno-id-shared-library @gol\n+-mxgot -mno-xgot}\n \n @emph{M68hc1x Options}\n @gccoptlist{-m6811  -m6812  -m68hc11  -m68hc12   -m68hcs12 @gol\n@@ -11776,6 +11777,38 @@ compiled.  Specifying a value of 0 will generate more compact code, specifying\n other values will force the allocation of that number to the current\n library but is no more space or time efficient than omitting this option.\n \n+@item -mxgot\n+@itemx -mno-xgot\n+@opindex mxgot\n+@opindex mno-xgot\n+When generating position-independent code for ColdFire, generate code\n+that works if the GOT has more than 8192 entries.  This code is\n+larger and slower than code generated without this option.  On M680x0\n+processors, this option is not needed; @option{-fPIC} suffices.\n+\n+GCC normally uses a single instruction to load values from the GOT@.\n+While this is relatively efficient, it only works if the GOT\n+is smaller than about 64k.  Anything larger causes the linker\n+to report an error such as:\n+\n+@cindex relocation truncated to fit (ColdFire)\n+@smallexample\n+relocation truncated to fit: R_68K_GOT16O foobar\n+@end smallexample\n+\n+If this happens, you should recompile your code with @option{-mxgot}.\n+It should then work with very large GOTs.  However, code generated with\n+@option{-mxgot} is less efficient, since it takes 4 instructions to fetch\n+the value of a global symbol.\n+\n+Note that some linkers, including newer versions of the GNU linker,\n+can create multiple GOTs and sort GOT entries.  If you have such a linker,\n+you should only need to use @option{-mxgot} when compiling a single\n+object file that accesses more than 8192 GOT entries.  Very few do.\n+\n+These options have no effect unless GCC is generating\n+position-independent code.\n+\n @end table\n \n @node M68hc1x Options"}, {"sha": "a2f746c8198ef5981f99ea7b3fc6a4174a6a8ee6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/884316ff5dd83bc8b9b38d276dcf62329ebe1681/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/884316ff5dd83bc8b9b38d276dcf62329ebe1681/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=884316ff5dd83bc8b9b38d276dcf62329ebe1681", "patch": "@@ -1,3 +1,8 @@\n+2008-06-04  Joseph Myers  <joseph@codesourcery.com>\n+            Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\t* gcc.target/m68k/xgot-1.c: New test.\n+\n 2008-06-04  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.c-torture/execute/20080604-1.c: New testcase."}, {"sha": "f7dd6c939acebb8c8d5761352b09064720352711", "filename": "gcc/testsuite/gcc.target/m68k/xgot-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/884316ff5dd83bc8b9b38d276dcf62329ebe1681/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fxgot-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/884316ff5dd83bc8b9b38d276dcf62329ebe1681/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fxgot-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fxgot-1.c?ref=884316ff5dd83bc8b9b38d276dcf62329ebe1681", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fpic -mxgot\" } */\n+/* { dg-final { scan-assembler \"foo@GOT,\\%\\[ad\\]\\[0-7\\]\" } } */\n+\n+extern int foo;\n+\n+int\n+bar (void)\n+{\n+  return foo;\n+}"}]}