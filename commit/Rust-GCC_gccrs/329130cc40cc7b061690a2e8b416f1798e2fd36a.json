{"sha": "329130cc40cc7b061690a2e8b416f1798e2fd36a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI5MTMwY2M0MGNjN2IwNjE2OTBhMmU4YjQxNmYxNzk4ZTJmZDM2YQ==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2018-10-01T13:09:29Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2018-10-01T13:09:29Z"}, "message": "Validate and set default parameters for stack-clash.\n\nThis patch defines the default parameters and validation for the aarch64\nstack clash probing interval and guard sizes.  It cleans up the previous\nimplementation and insures that at no point the invalidate arguments are\npresent in the pipeline for AArch64.  Currently they are only corrected once\ncc1 initalizes the back-end.\n\nThe default for AArch64 is 64 KB for both of these and we only support 4 KB and 64 KB\nprobes.  We also enforce that any value you set here for the parameters must be\nin sync.\n\nIf an invalid value is specified an error will be generated and compilation aborted.\n\ngcc/\n\n\t* common/config/aarch64/aarch64-common.c (TARGET_OPTION_DEFAULT_PARAM,\n\taarch64_option_default_param):\tNew.\n\t(params.h): Include.\n\t(TARGET_OPTION_VALIDATE_PARAM, aarch64_option_validate_param): New.\n\t* config/aarch64/aarch64.c (aarch64_override_options_internal): Simplify\n\tstack-clash protection validation code.\n\nFrom-SVN: r264757", "tree": {"sha": "d7e35df912e55508ca456977cde1cc98f3b73d18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7e35df912e55508ca456977cde1cc98f3b73d18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/329130cc40cc7b061690a2e8b416f1798e2fd36a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329130cc40cc7b061690a2e8b416f1798e2fd36a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/329130cc40cc7b061690a2e8b416f1798e2fd36a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329130cc40cc7b061690a2e8b416f1798e2fd36a/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f622a56bcb4049083fcbb63bb27eca9230c89456", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f622a56bcb4049083fcbb63bb27eca9230c89456", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f622a56bcb4049083fcbb63bb27eca9230c89456"}], "stats": {"total": 61, "additions": 57, "deletions": 4}, "files": [{"sha": "b4bc50829151414b936630773dc89fcf866a9087", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329130cc40cc7b061690a2e8b416f1798e2fd36a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329130cc40cc7b061690a2e8b416f1798e2fd36a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=329130cc40cc7b061690a2e8b416f1798e2fd36a", "patch": "@@ -1,3 +1,12 @@\n+2018-10-01  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* common/config/aarch64/aarch64-common.c (TARGET_OPTION_DEFAULT_PARAM,\n+\taarch64_option_default_param):\tNew.\n+\t(params.h): Include.\n+\t(TARGET_OPTION_VALIDATE_PARAM, aarch64_option_validate_param): New.\n+\t* config/aarch64/aarch64.c (aarch64_override_options_internal): Simplify\n+\tstack-clash protection validation code.\n+\n 2018-10-01  Tamar Christina  <tamar.christina@arm.com>\n \n \t* params.c (validate_param): New."}, {"sha": "ffddc4d16d8fb43b3db9797d5e3d0c6836b6646a", "filename": "gcc/common/config/aarch64/aarch64-common.c", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329130cc40cc7b061690a2e8b416f1798e2fd36a/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329130cc40cc7b061690a2e8b416f1798e2fd36a/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c?ref=329130cc40cc7b061690a2e8b416f1798e2fd36a", "patch": "@@ -30,6 +30,7 @@\n #include \"opts.h\"\n #include \"flags.h\"\n #include \"diagnostic.h\"\n+#include \"params.h\"\n \n #ifdef  TARGET_BIG_ENDIAN_DEFAULT\n #undef  TARGET_DEFAULT_TARGET_FLAGS\n@@ -41,6 +42,10 @@\n \n #undef\tTARGET_OPTION_OPTIMIZATION_TABLE\n #define TARGET_OPTION_OPTIMIZATION_TABLE aarch_option_optimization_table\n+#undef TARGET_OPTION_DEFAULT_PARAMS\n+#define TARGET_OPTION_DEFAULT_PARAMS aarch64_option_default_params\n+#undef TARGET_OPTION_VALIDATE_PARAM\n+#define TARGET_OPTION_VALIDATE_PARAM aarch64_option_validate_param\n \n /* Set default optimization options.  */\n static const struct default_options aarch_option_optimization_table[] =\n@@ -60,6 +65,49 @@ static const struct default_options aarch_option_optimization_table[] =\n     { OPT_LEVELS_NONE, 0, NULL, 0 }\n   };\n \n+/* Implement target validation TARGET_OPTION_DEFAULT_PARAM.  */\n+\n+static bool\n+aarch64_option_validate_param (const int value, const int param)\n+{\n+  /* Check that both parameters are the same.  */\n+  if (param == (int) PARAM_STACK_CLASH_PROTECTION_GUARD_SIZE)\n+    {\n+      if (value != 12 && value != 16)\n+\t{\n+\t  error (\"only values 12 (4 KB) and 16 (64 KB) are supported for guard \"\n+\t\t \"size.  Given value %d (%llu KB) is out of range\",\n+\t\t value, (1ULL << value) / 1024ULL);\n+\t  return false;\n+\t}\n+    }\n+\n+  return true;\n+}\n+\n+/* Implement TARGET_OPTION_DEFAULT_PARAMS.  */\n+\n+static void\n+aarch64_option_default_params (void)\n+{\n+  /* We assume the guard page is 64k.  */\n+  int index = (int) PARAM_STACK_CLASH_PROTECTION_GUARD_SIZE;\n+  set_default_param_value (PARAM_STACK_CLASH_PROTECTION_GUARD_SIZE,\n+\t\t\t   DEFAULT_STK_CLASH_GUARD_SIZE == 0\n+\t\t\t     ? 16 : DEFAULT_STK_CLASH_GUARD_SIZE);\n+\n+  int guard_size\n+    = default_param_value (PARAM_STACK_CLASH_PROTECTION_GUARD_SIZE);\n+\n+  /* Set the interval parameter to be the same as the guard size.  This way the\n+     mid-end code does the right thing for us.  */\n+  set_default_param_value (PARAM_STACK_CLASH_PROTECTION_PROBE_INTERVAL,\n+\t\t\t   guard_size);\n+\n+  /* Validate the options.  */\n+  aarch64_option_validate_param (guard_size, index);\n+}\n+\n /* Implement TARGET_HANDLE_OPTION.\n    This function handles the target specific options for CPU/target selection.\n "}, {"sha": "d385b246a74517f09446600a3bf48c52ef2de5f1", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329130cc40cc7b061690a2e8b416f1798e2fd36a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329130cc40cc7b061690a2e8b416f1798e2fd36a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=329130cc40cc7b061690a2e8b416f1798e2fd36a", "patch": "@@ -11002,10 +11002,6 @@ aarch64_override_options_internal (struct gcc_options *opts)\n \n   /* Validate the guard size.  */\n   int guard_size = PARAM_VALUE (PARAM_STACK_CLASH_PROTECTION_GUARD_SIZE);\n-  if (guard_size != 12 && guard_size != 16)\n-    error (\"only values 12 (4 KB) and 16 (64 KB) are supported for guard \"\n-\t   \"size.  Given value %d (%llu KB) is out of range.\",\n-\t   guard_size, (1ULL << guard_size) / 1024ULL);\n \n   /* Enforce that interval is the same size as size so the mid-end does the\n      right thing.  */"}]}