{"sha": "dfa08768aa9e461d52b3c5f5e6840f2699be21ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZhMDg3NjhhYTllNDYxZDUyYjNjNWY1ZTY4NDBmMjY5OWJlMjFhYg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "1999-02-25T10:57:17Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "1999-02-25T10:57:17Z"}, "message": "Delete target options -m2 -m3 & -m6.\n\nFix pic register initialization.\nUpdate zero-extraction patterns.\n\nFrom-SVN: r25435", "tree": {"sha": "b76b435b4d17d8b0db8876c53f6af144e1abcb01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b76b435b4d17d8b0db8876c53f6af144e1abcb01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfa08768aa9e461d52b3c5f5e6840f2699be21ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfa08768aa9e461d52b3c5f5e6840f2699be21ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfa08768aa9e461d52b3c5f5e6840f2699be21ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfa08768aa9e461d52b3c5f5e6840f2699be21ab/comments", "author": null, "committer": null, "parents": [{"sha": "bd50553864cf9c3175760a96aff009b78133bceb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd50553864cf9c3175760a96aff009b78133bceb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd50553864cf9c3175760a96aff009b78133bceb"}], "stats": {"total": 120, "additions": 52, "deletions": 68}, "files": [{"sha": "931b283146657ae97bdd86d7fb8aaf99d4d3c8e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfa08768aa9e461d52b3c5f5e6840f2699be21ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfa08768aa9e461d52b3c5f5e6840f2699be21ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfa08768aa9e461d52b3c5f5e6840f2699be21ab", "patch": "@@ -1,3 +1,22 @@\n+Thu Feb 25 10:44:35 1999  Richard Earnshaw (rearnsha@arm.com)\n+\n+\t* arm.h (TARGET_SWITCHES): Delete deprecated switches -m[236].\n+\t(TARGET_3, TARGET_6): Delete.\n+\t(ARM_FLAG_ARM[36]): Delete.\n+\t(CPP_CPU_ARCH_SPEC): No need to handle -m[236] any more.\n+\t(CC1_SPEC): Don't expand -m[236] into new equivalents.\n+\t(CPP_APCS_PC_SPEC): No need to handle -m[236] any more.\n+\t* arm.c (arm_override_options): Delete warnings about deprecated\n+\toptions -m[236].\n+\n+\t* arm.c (arm_finalize_pic): Build the label into the special pic\n+\tadjustment insn instead of issuing it separately.\n+\t* arm.md (pic_add_dot_plus_eight): Rework to contain the label\n+\tthat is needed.\n+\n+\t* arm.md (*zeroextractqi_compare0_scratch): Delete.\n+\t(*ne_zeroextractsi): New pattern.\n+\n Thu Feb 25 18:40:06 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* stmt.c (expand_end_loop): Grok code emitted by"}, {"sha": "08ff6412725d6331c6900c8beca19815a1bbe683", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfa08768aa9e461d52b3c5f5e6840f2699be21ab/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfa08768aa9e461d52b3c5f5e6840f2699be21ab/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=dfa08768aa9e461d52b3c5f5e6840f2699be21ab", "patch": "@@ -356,19 +356,6 @@ arm_override_options ()\n \t}\n     }\n \n-  /* Cope with some redundant flags.  */\n-  if (TARGET_6)\n-    {\n-      warning (\"Option '-m6' deprecated.  Use: '-mapcs-32' or -mcpu=<proc>\");\n-      target_flags |= ARM_FLAG_APCS_32;\n-    }\n-  \n-  if (TARGET_3)\n-    {\n-      warning (\"Option '-m3' deprecated.  Use: '-mapcs-26' or -mcpu=<proc>\");\n-      target_flags &= ~ARM_FLAG_APCS_32;\n-    }\n-\n   /* Make sure that the processor choice does not conflict with any of the\n      other command line choices.  */\n   if (TARGET_APCS_32 && !(flags & FL_MODE32))\n@@ -1490,18 +1477,16 @@ arm_finalize_pic ()\n   l1 = gen_label_rtx ();\n \n   global_offset_table = gen_rtx_SYMBOL_REF (Pmode, \"_GLOBAL_OFFSET_TABLE_\");\n-  /* The PC contains 'dot'+8, but the label L1 is on the next\n-     instruction, so the offset is only 'dot'+4.  */\n-  pic_tmp = plus_constant (gen_rtx_LABEL_REF (Pmode, l1),\n-\t\t\t   GEN_INT (4));\n+  /* On the ARM the PC register contains 'dot + 8' at the time of the\n+     addition.  */\n+  pic_tmp = plus_constant (gen_rtx_LABEL_REF (Pmode, l1), 8);\n   pic_tmp2 = gen_rtx_CONST (VOIDmode,\n \t\t\t    gen_rtx_PLUS (Pmode, global_offset_table, pc_rtx));\n \n   pic_rtx = gen_rtx_CONST (Pmode, gen_rtx_MINUS (Pmode, pic_tmp2, pic_tmp));\n   \n   emit_insn (gen_pic_load_addr (pic_offset_table_rtx, pic_rtx));\n-  emit_jump_insn (gen_pic_add_dot_plus_eight(l1, pic_offset_table_rtx));\n-  emit_label (l1);\n+  emit_insn (gen_pic_add_dot_plus_eight (pic_offset_table_rtx, l1));\n \n   seq = gen_sequence ();\n   end_sequence ();"}, {"sha": "f8800bc65382bea9becc260a626d031e261e9c54", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 5, "deletions": 29, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfa08768aa9e461d52b3c5f5e6840f2699be21ab/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfa08768aa9e461d52b3c5f5e6840f2699be21ab/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=dfa08768aa9e461d52b3c5f5e6840f2699be21ab", "patch": "@@ -122,9 +122,6 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n /* Set the architecture define -- if -march= is set, then it overrides\n    the -mcpu= setting.  */\n #define CPP_CPU_ARCH_SPEC \"\\\n-%{m2:-D__arm2__ -D__ARM_ARCH_2__} \\\n-%{m3:-D__arm2__ -D__ARM_ARCH_2__} \\\n-%{m6:-D__arm6__ -D__ARM_ARCH_3__} \\\n %{march=arm2:-D__ARM_ARCH_2__} \\\n %{march=arm250:-D__ARM_ARCH_2__} \\\n %{march=arm3:-D__ARM_ARCH_2__} \\\n@@ -178,18 +175,15 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n  %{mcpu=strongarm:-D__ARM_ARCH_4__} \\\n  %{mcpu=strongarm110:-D__ARM_ARCH_4__} \\\n  %{mcpu=strongarm1100:-D__ARM_ARCH_4__} \\\n- %{!mcpu*:%{!m6:%{!m2:%{!m3:%(cpp_cpu_arch_default)}}}}} \\\n+ %{!mcpu*:%(cpp_cpu_arch_default)}} \\\n \"\n \n /* Define __APCS_26__ if the PC also contains the PSR */\n-/* This also examines deprecated -m[236] if neither of -mapcs-{26,32} is set,\n-   ??? Delete this for 2.9.  */\n #define CPP_APCS_PC_SPEC \"\\\n %{mapcs-32:%{mapcs-26:%e-mapcs-26 and -mapcs-32 may not be used together} \\\n  -D__APCS_32__} \\\n %{mapcs-26:-D__APCS_26__} \\\n-%{!mapcs-32: %{!mapcs-26:%{m6:-D__APCS_32__} %{m2:-D__APCS_26__} \\\n- %{m3:-D__APCS_26__} %{!m6:%{!m3:%{!m2:%(cpp_apcs_pc_default)}}}}} \\\n+%{!mapcs-32: %{!mapcs-26:%(cpp_apcs_pc_default)}} \\\n \"\n \n #ifndef CPP_APCS_PC_DEFAULT_SPEC\n@@ -217,14 +211,7 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n /* Default is little endian, which doesn't define anything. */\n #define CPP_ENDIAN_DEFAULT_SPEC \"\"\n \n-/* Translate (for now) the old -m[236] option into the appropriate -mcpu=...\n-   and -mapcs-xx equivalents. \n-   ??? Remove support for this style in 2.9.*/\n-#define CC1_SPEC \"\\\n-%{m2:-mcpu=arm2 -mapcs-26} \\\n-%{m3:-mcpu=arm3 -mapcs-26} \\\n-%{m6:-mcpu=arm6 -mapcs-32} \\\n-\"\n+#define CC1_SPEC \"\"\n \n /* This macro defines names of additional specifications to put in the specs\n    that can be used in various specifications like CC1_SPEC.  Its definition\n@@ -278,19 +265,13 @@ extern char * target_fp_name;\n    case instruction scheduling becomes very uninteresting.  */\n #define ARM_FLAG_FPE          (0x0004)\n \n-/* Nonzero if destined for an ARM6xx.  Takes out bits that assume restoration\n-   of condition flags when returning from a branch & link (ie. a function) */\n-/* ********* DEPRECATED ******** */\n-#define ARM_FLAG_ARM6         (0x0008)\n-\n-/* ********* DEPRECATED ******** */\n-#define ARM_FLAG_ARM3         (0x0010)\n-\n /* Nonzero if destined for a processor in 32-bit program mode.  Takes out bit\n    that assume restoration of the condition flags when returning from a\n    branch and link (ie a function).  */\n #define ARM_FLAG_APCS_32      (0x0020)\n \n+/* FLAGS 0x0008 and 0x0010 are now spare (used to be arm3/6 selection).  */\n+\n /* Nonzero if stack checking should be performed on entry to each function\n    which allocates temporary variables on the stack.  */\n #define ARM_FLAG_APCS_STACK   (0x0040)\n@@ -331,8 +312,6 @@ function tries to return. */\n #define TARGET_APCS\t\t\t(target_flags & ARM_FLAG_APCS_FRAME)\n #define TARGET_POKE_FUNCTION_NAME\t(target_flags & ARM_FLAG_POKE)\n #define TARGET_FPE\t\t\t(target_flags & ARM_FLAG_FPE)\n-#define TARGET_6\t\t\t(target_flags & ARM_FLAG_ARM6)\n-#define TARGET_3\t\t\t(target_flags & ARM_FLAG_ARM3)\n #define TARGET_APCS_32\t\t\t(target_flags & ARM_FLAG_APCS_32)\n #define TARGET_APCS_STACK\t\t(target_flags & ARM_FLAG_APCS_STACK)\n #define TARGET_APCS_FLOAT\t\t(target_flags & ARM_FLAG_APCS_FLOAT)\n@@ -368,9 +347,6 @@ function tries to return. */\n   {\"poke-function-name\",\tARM_FLAG_POKE, \t\t\\\n      \"Store function names in object code\" },\t\t\\\n   {\"fpe\",\t\t\tARM_FLAG_FPE,  \"\" },\t\\\n-  {\"6\",\t\t\t\tARM_FLAG_ARM6, \"\" },\t\\\n-  {\"2\",\t\t\t\tARM_FLAG_ARM3, \"\" },\t\\\n-  {\"3\",\t\t\t\tARM_FLAG_ARM3, \"\" },\t\\\n   {\"apcs-32\",\t\t\tARM_FLAG_APCS_32, \t\\\n      \"Use the 32bit version of the APCS\" },\t\t\\\n   {\"apcs-26\",\t\t       -ARM_FLAG_APCS_32, \t\\"}, {"sha": "41b612407d0d680ba27484c57413a9414c068fc8", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfa08768aa9e461d52b3c5f5e6840f2699be21ab/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfa08768aa9e461d52b3c5f5e6840f2699be21ab/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=dfa08768aa9e461d52b3c5f5e6840f2699be21ab", "patch": "@@ -1194,24 +1194,24 @@\n \"\n [(set_attr \"conds\" \"set\")])\n \n-(define_insn \"*zeroextractqi_compare0_scratch\"\n-  [(set (reg:CC_NOOV 24)\n-\t(compare:CC_NOOV (zero_extract:SI\n-\t\t\t  (match_operand:QI 0 \"memory_operand\" \"m\")\n-\t\t\t  (match_operand 1 \"const_int_operand\" \"n\")\n-\t\t\t  (match_operand 2 \"const_int_operand\" \"n\"))\n-\t\t\t (const_int 0)))\n-   (clobber (match_scratch:QI 3 \"=r\"))]\n-  \"INTVAL (operands[2]) >= 0 && INTVAL (operands[1]) > 0\n-   && ((INTVAL (operands[2]) + INTVAL (operands[1])) <= 8)\"\n+(define_insn \"*ne_zeroextractsi\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(ne:SI (zero_extract:SI\n+\t\t(match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t\t(match_operand:SI 2 \"const_int_operand\" \"n\")\n+\t\t(match_operand:SI 3 \"const_int_operand\" \"n\"))\n+\t       (const_int 0)))]\n+  \"INTVAL (operands[3]) >= 0 && INTVAL (operands[3]) < 32\n+   && INTVAL (operands[2]) > 0 \n+   && INTVAL (operands[2]) + (INTVAL (operands[3]) & 1) <= 8\n+   && INTVAL (operands[2]) + INTVAL (operands[3]) <= 32\"\n   \"*\n-  operands[1] = GEN_INT (((1 << INTVAL (operands[1])) - 1)\n-\t\t\t << INTVAL (operands[2]));\n-  output_asm_insn (\\\"ldr%?b\\\\t%3, %0\\\", operands);\n-  output_asm_insn (\\\"tst%?\\\\t%3, %1\\\", operands);\n-  return \\\"\\\";\n+  operands[2] = GEN_INT (((1 << INTVAL (operands[2])) - 1)\n+\t\t\t << INTVAL (operands[3]));\n+  output_asm_insn (\\\"ands\\\\t%0, %1, %2\\\", operands);\n+  return \\\"movne\\\\t%0, #1\\\";\n \"\n-[(set_attr \"conds\" \"set\")\n+[(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8\")])\n \n ;;; ??? This pattern is bogus.  If operand3 has bits outside the range\n@@ -2711,11 +2711,15 @@\n \" [(set_attr \"type\" \"load\")])\n \n (define_insn \"pic_add_dot_plus_eight\"\n-  [(set (pc) (label_ref (match_operand 0 \"\" \"\")))\n-   (set (match_operand 1 \"register_operand\" \"+r\")\n-\t(plus:SI (match_dup 1) (const (plus:SI (pc) (const_int 8)))))]\n+  [(set (match_operand 0 \"register_operand\" \"+r\")\n+\t(plus:SI (match_dup 0) (const (plus:SI (pc) (const_int 8)))))\n+   (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"flag_pic\"\n-  \"add%?\\\\t%1, %|pc, %1\")\n+  \"*\n+  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\",\n+\t\t\t     CODE_LABEL_NUMBER (operands[1]));\n+  return \\\"add%?\\\\t%0, %|pc, %0\\\";\n+\")\n \n ;; If copying one reg to another we can set the condition codes according to\n ;; its value.  Such a move is common after a return from subroutine and the"}]}