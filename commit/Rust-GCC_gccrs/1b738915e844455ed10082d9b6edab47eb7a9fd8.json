{"sha": "1b738915e844455ed10082d9b6edab47eb7a9fd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI3Mzg5MTVlODQ0NDU1ZWQxMDA4MmQ5YjZlZGFiNDdlYjdhOWZkOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-03-22T19:50:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-03-22T19:50:48Z"}, "message": "tree-cfg.c (verify_expr): Recurse again for invariant addresses.\n\n2008-03-22  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-cfg.c (verify_expr): Recurse again for invariant addresses.\n\tFor PHI nodes verify the address is invariant.\n\t* tree-ssa-ccp.c (ccp_decl_initial_min_invariant): Remove.\n\t(get_symbol_constant_value): Use is_gimple_min_invariant.\n\t(maybe_fold_stmt_indirect): Likewise.\n\nFrom-SVN: r133453", "tree": {"sha": "c9b8763f12945bb2583d2c8852e671a6703b967f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9b8763f12945bb2583d2c8852e671a6703b967f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b738915e844455ed10082d9b6edab47eb7a9fd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b738915e844455ed10082d9b6edab47eb7a9fd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b738915e844455ed10082d9b6edab47eb7a9fd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b738915e844455ed10082d9b6edab47eb7a9fd8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "18b526e806ab64557cd575ff407fcb1da16ee8fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18b526e806ab64557cd575ff407fcb1da16ee8fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18b526e806ab64557cd575ff407fcb1da16ee8fd"}], "stats": {"total": 50, "additions": 18, "deletions": 32}, "files": [{"sha": "e098eb2671c438762c8cb9d310f35abfb58597db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b738915e844455ed10082d9b6edab47eb7a9fd8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b738915e844455ed10082d9b6edab47eb7a9fd8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b738915e844455ed10082d9b6edab47eb7a9fd8", "patch": "@@ -1,3 +1,11 @@\n+2008-03-22  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-cfg.c (verify_expr): Recurse again for invariant addresses.\n+\tFor PHI nodes verify the address is invariant.\n+\t* tree-ssa-ccp.c (ccp_decl_initial_min_invariant): Remove.\n+\t(get_symbol_constant_value): Use is_gimple_min_invariant.\n+\t(maybe_fold_stmt_indirect): Likewise.\n+\n 2008-03-22  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \tPR rtl-optimization/33927"}, {"sha": "6c4b3115b04b2da4be50ef4388bea334ca339dda", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b738915e844455ed10082d9b6edab47eb7a9fd8/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b738915e844455ed10082d9b6edab47eb7a9fd8/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=1b738915e844455ed10082d9b6edab47eb7a9fd8", "patch": "@@ -3172,7 +3172,14 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n \t   we may be missing \"valid\" checks, but what can you do?\n \t   This was PR19217.  */\n         if (in_phi)\n-\t  break;\n+\t  {\n+\t    if (!is_gimple_min_invariant (t))\n+\t      {\n+\t\terror (\"non-invariant address expression in PHI argument\");\n+\t\treturn t;\n+\t      }\n+\t    break;\n+\t  }\n \n \told_invariant = TREE_INVARIANT (t);\n \told_constant = TREE_CONSTANT (t);\n@@ -3216,10 +3223,6 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n \t    return x;\n \t  }\n \n-\t/* Stop recursing and verifying invariant ADDR_EXPRs, they tend\n-\t   to become arbitrary complicated.  */\n-\tif (is_gimple_min_invariant (t))\n-\t  *walk_subtrees = 0;\n \tbreak;\n       }\n "}, {"sha": "805776ac25c05ac8414aac42b54c3a833f59aabe", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b738915e844455ed10082d9b6edab47eb7a9fd8/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b738915e844455ed10082d9b6edab47eb7a9fd8/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=1b738915e844455ed10082d9b6edab47eb7a9fd8", "patch": "@@ -267,31 +267,6 @@ debug_lattice_value (prop_value_t val)\n }\n \n \n-/* The regular is_gimple_min_invariant does a shallow test of the object.\n-   It assumes that full gimplification has happened, or will happen on the\n-   object.  For a value coming from DECL_INITIAL, this is not true, so we\n-   have to be more strict ourselves.  */\n-\n-static bool\n-ccp_decl_initial_min_invariant (tree t)\n-{\n-  if (!is_gimple_min_invariant (t))\n-    return false;\n-  if (TREE_CODE (t) == ADDR_EXPR)\n-    {\n-      /* Inline and unroll is_gimple_addressable.  */\n-      while (1)\n-\t{\n-\t  t = TREE_OPERAND (t, 0);\n-\t  if (is_gimple_id (t))\n-\t    return true;\n-\t  if (!handled_component_p (t))\n-\t    return false;\n-\t}\n-    }\n-  return true;\n-}\n-\n /* If SYM is a constant variable with known value, return the value.\n    NULL_TREE is returned otherwise.  */\n \n@@ -304,7 +279,7 @@ get_symbol_constant_value (tree sym)\n     {\n       tree val = DECL_INITIAL (sym);\n       if (val\n-\t  && ccp_decl_initial_min_invariant (val))\n+\t  && is_gimple_min_invariant (val))\n \treturn val;\n       /* Variables declared 'const' without an initializer\n \t have zero as the intializer if they may not be\n@@ -1990,7 +1965,7 @@ maybe_fold_stmt_indirect (tree expr, tree base, tree offset)\n \n       /* Fold away CONST_DECL to its value, if the type is scalar.  */\n       if (TREE_CODE (base) == CONST_DECL\n-\t  && ccp_decl_initial_min_invariant (DECL_INITIAL (base)))\n+\t  && is_gimple_min_invariant (DECL_INITIAL (base)))\n \treturn DECL_INITIAL (base);\n \n       /* Try folding *(&B+O) to B.X.  */"}]}