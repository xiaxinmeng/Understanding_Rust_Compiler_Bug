{"sha": "41c6dd595684f26e8825091af850af66f6291c10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFjNmRkNTk1Njg0ZjI2ZTg4MjUwOTFhZjg1MGFmNjZmNjI5MWMxMA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-05-22T06:55:24Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-05-22T06:55:24Z"}, "message": "rtl.texi: Fix a typo.\n\n\t* doc/rtl.texi: Fix a typo.\n\t* see.c: Fix comment typos.\n\nFrom-SVN: r113969", "tree": {"sha": "1c38846d231ce7ec88273e22e3c38222a32503ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c38846d231ce7ec88273e22e3c38222a32503ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41c6dd595684f26e8825091af850af66f6291c10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41c6dd595684f26e8825091af850af66f6291c10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41c6dd595684f26e8825091af850af66f6291c10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41c6dd595684f26e8825091af850af66f6291c10/comments", "author": null, "committer": null, "parents": [{"sha": "aea8e03506a5782d5c16c793a6d3b2b39d44e01c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aea8e03506a5782d5c16c793a6d3b2b39d44e01c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aea8e03506a5782d5c16c793a6d3b2b39d44e01c"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "ae20bbe00733c139c6b6c93edc363de9fb277320", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c6dd595684f26e8825091af850af66f6291c10/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c6dd595684f26e8825091af850af66f6291c10/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41c6dd595684f26e8825091af850af66f6291c10", "patch": "@@ -1,3 +1,8 @@\n+2006-05-22  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* doc/rtl.texi: Fix a typo.\n+\t* see.c: Fix comment typos.\n+\n 2006-05-21  Mike Stump  <mrs@apple.com>\n \n \t* config/darwin-c.c (BAD): Conditionalize on OPT_Wpragmas."}, {"sha": "20be3819de8a7f55eef4abf4dfd44e74e9f3635b", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c6dd595684f26e8825091af850af66f6291c10/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c6dd595684f26e8825091af850af66f6291c10/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=41c6dd595684f26e8825091af850af66f6291c10", "patch": "@@ -2014,7 +2014,7 @@ fixed-point mode.\n @cindex arithmetic shift with signed saturation\n @item (ashift:@var{m} @var{x} @var{c})\n @itemx (ss_ashift:@var{m} @var{x} @var{c})\n-These two expressions epresent the result of arithmetically shifting @var{x}\n+These two expressions represent the result of arithmetically shifting @var{x}\n left by @var{c} places.  They differ in their behavior on overflow of integer\n modes.  An @code{ashift} operation is a plain shift with no special behaviour\n in case of a change in the sign bit; @code{ss_ashift} saturates to the minimum"}, {"sha": "12c71d390c4ccb678d6217d8b9ced6fd7e216338", "filename": "gcc/see.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41c6dd595684f26e8825091af850af66f6291c10/gcc%2Fsee.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41c6dd595684f26e8825091af850af66f6291c10/gcc%2Fsee.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsee.c?ref=41c6dd595684f26e8825091af850af66f6291c10", "patch": "@@ -533,7 +533,7 @@ struct see_ref_s\n   /* The insn of the ref.  */\n   rtx insn;\n   /* The merged insn that was formed from the reference's insn and extensions.\n-     If all merges faile it remains NULL.  */\n+     If all merges failed, it remains NULL.  */\n   rtx merged_insn;\n   /* The def extensions of the reference that were not merged with\n      it.  */\n@@ -751,7 +751,7 @@ see_get_extension_data (rtx extension, enum machine_mode *source_mode)\n    (the register r on both sides of the set is the same register).\n    And recognize it.\n    If the recognition failed, this is very bad, return NULL (This will abort\n-   the entier optimization).\n+   the entire optimization).\n    Otherwise, return the generated instruction.  */\n \n static rtx\n@@ -2134,7 +2134,7 @@ see_execute_LCM (void)\n /* In this function we set the register properties for the register that is\n    defined and extended in the reference.\n    The properties are defined in see_register_properties structure which is\n-   allocated per basic bloack and per register.\n+   allocated per basic block and per register.\n    Later the extension is inserted into the see_pre_extension_hash for the next\n    phase of the optimization.\n \n@@ -2205,7 +2205,7 @@ see_set_prop_merged_def (void **slot, void *b)\n /* In this function we set the register properties for the register that is\n    defined but not extended in the reference.\n    The properties are defined in see_register_properties structure which is\n-   allocated per basic bloack and per register.\n+   allocated per basic block and per register.\n    Later the extension is inserted into the see_pre_extension_hash for the next\n    phase of the optimization.\n \n@@ -2276,7 +2276,7 @@ see_set_prop_unmerged_def (void **slot, void *b)\n /* In this function we set the register properties for the register that is used\n    in the reference.\n    The properties are defined in see_register_properties structure which is\n-   allocated per basic bloack and per register.\n+   allocated per basic block and per register.\n    When a redundant use extension is found it is removed from the hash of the\n    reference.\n    If the extension is non redundant it is inserted into the\n@@ -2331,7 +2331,7 @@ see_set_prop_unmerged_use (void **slot, void *b)\n       else if (curr_prop->last_def < 0\n \t       && curr_prop->first_se_before_any_def >= 0)\n \t{\n-\t  /* In this case the extension is localy redundant.  */\n+\t  /* In this case the extension is locally redundant.  */\n \t  htab_clear_slot (curr_ref_s->use_se_hash, (PTR *)slot);\n \t  locally_redundant = true;\n \t}\n@@ -2341,7 +2341,7 @@ see_set_prop_unmerged_use (void **slot, void *b)\n       else if (curr_prop->last_def >= 0\n \t       && curr_prop->first_se_after_last_def >= 0)\n \t{\n-\t  /* In this case the extension is localy redundant.  */\n+\t  /* In this case the extension is locally redundant.  */\n \t  htab_clear_slot (curr_ref_s->use_se_hash, (PTR *)slot);\n \t  locally_redundant = true;\n \t}\n@@ -2694,7 +2694,7 @@ see_merge_one_use_extension (void **slot, void *b)\n    ref:\t   set (dest_reg) (rhs)\n    def_se: set (dest_extension_reg) (sign/zero_extend (source_extension_reg))\n \n-   where dest_reg and source_extension_reg can both be subregs (togather)\n+   where dest_reg and source_extension_reg can both be subregs (together)\n    and (REGNO (dest_reg) == REGNO (source_extension_reg))\n \n    The merge is done by generating, simplifying and recognizing the pattern:"}]}