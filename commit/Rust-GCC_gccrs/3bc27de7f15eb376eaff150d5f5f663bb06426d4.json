{"sha": "3bc27de7f15eb376eaff150d5f5f663bb06426d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JjMjdkZTdmMTVlYjM3NmVhZmYxNTBkNWY1ZjY2M2JiMDY0MjZkNA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-01-21T14:02:41Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-01-21T14:02:41Z"}, "message": "re PR tree-optimization/47365 (wrong code with -O -ftree-pre)\n\n2011-01-21  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/47365\n\t* tree-ssa-sccvn.h (vn_lookup_kind): Declare.\n\t(vn_reference_lookup_pieces): Adjust.\n\t(vn_reference_lookup): Likewise.\n\t* tree-ssa-sccvn.c (vn_walk_kind): New static global.\n\t(vn_reference_lookup_3): Only look through kills if in\n\tVN_WALKREWRITE mode.\n\t(vn_reference_lookup_pieces): Adjust.\n\t(vn_reference_lookup): Likewise.\n\t(visit_reference_op_load): Likewise.\n\t(visit_reference_op_store): Likewise.\n\t* tree-ssa-pre.c (phi_translate_1): Use VN_WALK mode.\n\t(compute_avail): Likewise.\n\t(eliminate): Likewise.\n\n\t* gcc.dg/torture/pr47365.c: New testcase.\n\t* gcc.dg/tree-ssa/pr47392.c: Likewise.\n\nFrom-SVN: r169089", "tree": {"sha": "bb89c6b2d21b401a229d25af78bc12f6947a86fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb89c6b2d21b401a229d25af78bc12f6947a86fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bc27de7f15eb376eaff150d5f5f663bb06426d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bc27de7f15eb376eaff150d5f5f663bb06426d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bc27de7f15eb376eaff150d5f5f663bb06426d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bc27de7f15eb376eaff150d5f5f663bb06426d4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "33e39b66855b799d048a88a6a7eaef6d2225c21f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33e39b66855b799d048a88a6a7eaef6d2225c21f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33e39b66855b799d048a88a6a7eaef6d2225c21f"}], "stats": {"total": 161, "additions": 143, "deletions": 18}, "files": [{"sha": "50be1fa267a3ba28c6414d06f94e334a9f72afa6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc27de7f15eb376eaff150d5f5f663bb06426d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc27de7f15eb376eaff150d5f5f663bb06426d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3bc27de7f15eb376eaff150d5f5f663bb06426d4", "patch": "@@ -1,3 +1,20 @@\n+2011-01-21  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/47365\n+\t* tree-ssa-sccvn.h (vn_lookup_kind): Declare.\n+\t(vn_reference_lookup_pieces): Adjust.\n+\t(vn_reference_lookup): Likewise.\n+\t* tree-ssa-sccvn.c (vn_walk_kind): New static global.\n+\t(vn_reference_lookup_3): Only look through kills if in\n+\tVN_WALKREWRITE mode.\n+\t(vn_reference_lookup_pieces): Adjust.\n+\t(vn_reference_lookup): Likewise.\n+\t(visit_reference_op_load): Likewise.\n+\t(visit_reference_op_store): Likewise.\n+\t* tree-ssa-pre.c (phi_translate_1): Use VN_WALK mode.\n+\t(compute_avail): Likewise.\n+\t(eliminate): Likewise.\n+\n 2011-01-21  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree-ssa-live.c (remove_unused_scope_block_p): Don't remove"}, {"sha": "80969743729701f29ba9ef4d89b5323924479799", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc27de7f15eb376eaff150d5f5f663bb06426d4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc27de7f15eb376eaff150d5f5f663bb06426d4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3bc27de7f15eb376eaff150d5f5f663bb06426d4", "patch": "@@ -1,3 +1,9 @@\n+2011-01-21  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/47365\n+\t* gcc.dg/torture/pr47365.c: New testcase.\n+\t* gcc.dg/tree-ssa/pr47392.c: Likewise.\n+\n 2011-01-21  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* g++.dg/other/anon5.C: Skip on mips-sgi-irix*."}, {"sha": "e3bc55011a5ba2b7de23bf92b882beb61628d100", "filename": "gcc/testsuite/gcc.dg/torture/pr47365.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc27de7f15eb376eaff150d5f5f663bb06426d4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47365.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc27de7f15eb376eaff150d5f5f663bb06426d4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47365.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47365.c?ref=3bc27de7f15eb376eaff150d5f5f663bb06426d4", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+\n+struct A\n+{\n+  int i;\n+};\n+\n+struct B\n+{\n+  struct A a[2];\n+};\n+\n+int i = 1;\n+struct B b = { 0, 3 };\n+\n+static void\n+test ()\n+{\n+  if (b.a[0].i != i)\n+    {\n+      int t = b.a[0].i;\n+      b.a[0] = b.a[1];\n+      b.a[1].i = t;\n+    }\n+\n+  if (b.a[1].i == i)\n+    __builtin_abort ();\n+\n+  if (b.a[0].i == 0)\n+    __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  test ();\n+  return 0;\n+}\n+"}, {"sha": "0dcabed13a88907baf8e74ea90b0ee60e5098996", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr47392.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc27de7f15eb376eaff150d5f5f663bb06426d4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr47392.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc27de7f15eb376eaff150d5f5f663bb06426d4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr47392.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr47392.c?ref=3bc27de7f15eb376eaff150d5f5f663bb06426d4", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fdump-tree-pre-stats\" } */\n+\n+struct A\n+{\n+  int i;\n+};\n+\n+struct B\n+{\n+  struct A a[2];\n+};\n+\n+int i = 1;\n+struct B b = { 0, 3 };\n+\n+static void\n+test ()\n+{\n+  if (b.a[0].i != i)\n+    {\n+      int t = b.a[0].i;\n+      b.a[0] = b.a[1];\n+      b.a[1].i = t;\n+    }\n+\n+  if (b.a[1].i == i)\n+    __builtin_abort ();\n+\n+  if (b.a[0].i == 0)\n+    __builtin_abort ();\n+}\n+\n+int __attribute__((hot))\n+main ()\n+{\n+  test ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Eliminated: 1\" \"pre\" } } */\n+/* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "e179c4f587b52b45d63541872811ec6c02110a35", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc27de7f15eb376eaff150d5f5f663bb06426d4/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc27de7f15eb376eaff150d5f5f663bb06426d4/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=3bc27de7f15eb376eaff150d5f5f663bb06426d4", "patch": "@@ -1681,7 +1681,7 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t    tree result = vn_reference_lookup_pieces (newvuse, ref->set,\n \t\t\t\t\t\t      ref->type,\n \t\t\t\t\t\t      newoperands,\n-\t\t\t\t\t\t      &newref, true);\n+\t\t\t\t\t\t      &newref, VN_WALK);\n \t    if (result)\n \t      VEC_free (vn_reference_op_s, heap, newoperands);\n \n@@ -2594,6 +2594,10 @@ compute_antic (void)\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file, \"Starting iteration %d\\n\", num_iterations);\n+      /* ???  We need to clear our PHI translation cache here as the\n+         ANTIC sets shrink and we restrict valid translations to\n+\t those having operands with leaders in ANTIC.  Same below\n+\t for PA ANTIC computation.  */\n       num_iterations++;\n       changed = false;\n       for (i = n_basic_blocks - NUM_FIXED_BLOCKS - 1; i >= 0; i--)\n@@ -3607,11 +3611,23 @@ do_regular_insertion (basic_block block, basic_block dom)\n \t     already existing along every predecessor, and\n \t     it's defined by some predecessor, it is\n \t     partially redundant.  */\n-\t  if (!cant_insert && !all_same && by_some && do_insertion\n-\t      && dbg_cnt (treepre_insert))\n+\t  if (!cant_insert && !all_same && by_some)\n \t    {\n-\t      if (insert_into_preds_of_block (block, get_expression_id (expr),\n-\t\t\t\t\t      avail))\n+\t      if (!do_insertion)\n+\t\t{\n+\t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t    {\n+\t\t      fprintf (dump_file, \"Skipping partial redundancy for \"\n+\t\t\t       \"expression \");\n+\t\t      print_pre_expr (dump_file, expr);\n+\t\t      fprintf (dump_file, \" (%04d), no redundancy on to be \"\n+\t\t\t       \"optimized for speed edge\\n\", val);\n+\t\t    }\n+\t\t}\n+\t      else if (dbg_cnt (treepre_insert)\n+\t\t       && insert_into_preds_of_block (block,\n+\t\t\t\t\t\t      get_expression_id (expr),\n+\t\t\t\t\t\t      avail))\n \t\tnew_stuff = true;\n \t    }\n \t  /* If all edges produce the same value and that value is\n@@ -3999,7 +4015,7 @@ compute_avail (void)\n \t\tcopy_reference_ops_from_call (stmt, &ops);\n \t\tvn_reference_lookup_pieces (gimple_vuse (stmt), 0,\n \t\t\t\t\t    gimple_expr_type (stmt),\n-\t\t\t\t\t    ops, &ref, false);\n+\t\t\t\t\t    ops, &ref, VN_NOWALK);\n \t\tVEC_free (vn_reference_op_s, heap, ops);\n \t\tif (!ref)\n \t\t  continue;\n@@ -4069,7 +4085,7 @@ compute_avail (void)\n \n \t\t      vn_reference_lookup (gimple_assign_rhs1 (stmt),\n \t\t\t\t\t   gimple_vuse (stmt),\n-\t\t\t\t\t   true, &ref);\n+\t\t\t\t\t   VN_WALK, &ref);\n \t\t      if (!ref)\n \t\t\tcontinue;\n \n@@ -4313,7 +4329,7 @@ eliminate (void)\n \t      tree rhs = gimple_assign_rhs1 (stmt);\n \t      tree val;\n \t      val = vn_reference_lookup (gimple_assign_lhs (stmt),\n-\t\t\t\t\t gimple_vuse (stmt), true, NULL);\n+\t\t\t\t\t gimple_vuse (stmt), VN_WALK, NULL);\n \t      if (TREE_CODE (rhs) == SSA_NAME)\n \t\trhs = VN_INFO (rhs)->valnum;\n \t      if (val"}, {"sha": "e37668e8abb36b4b3df36b68f178fe31afe9ef5c", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc27de7f15eb376eaff150d5f5f663bb06426d4/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc27de7f15eb376eaff150d5f5f663bb06426d4/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=3bc27de7f15eb376eaff150d5f5f663bb06426d4", "patch": "@@ -1243,6 +1243,7 @@ vn_reference_lookup_1 (vn_reference_t vr, vn_reference_t *vnresult)\n }\n \n static tree *last_vuse_ptr;\n+static vn_lookup_kind vn_walk_kind;\n \n /* Callback for walk_non_aliased_vuses.  Adjusts the vn_reference_t VR_\n    with the current VUSE and performs the expression lookup.  */\n@@ -1379,7 +1380,8 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n \n   /* For aggregate copies translate the reference through them if\n      the copy kills ref.  */\n-  else if (gimple_assign_single_p (def_stmt)\n+  else if (vn_walk_kind == VN_WALKREWRITE\n+\t   && gimple_assign_single_p (def_stmt)\n \t   && (DECL_P (gimple_assign_rhs1 (def_stmt))\n \t       || TREE_CODE (gimple_assign_rhs1 (def_stmt)) == MEM_REF\n \t       || handled_component_p (gimple_assign_rhs1 (def_stmt))))\n@@ -1473,7 +1475,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n tree\n vn_reference_lookup_pieces (tree vuse, alias_set_type set, tree type,\n \t\t\t    VEC (vn_reference_op_s, heap) *operands,\n-\t\t\t    vn_reference_t *vnresult, bool maywalk)\n+\t\t\t    vn_reference_t *vnresult, vn_lookup_kind kind)\n {\n   struct vn_reference_s vr1;\n   vn_reference_t tmp;\n@@ -1501,10 +1503,11 @@ vn_reference_lookup_pieces (tree vuse, alias_set_type set, tree type,\n \n   vn_reference_lookup_1 (&vr1, vnresult);\n   if (!*vnresult\n-      && maywalk\n+      && kind != VN_NOWALK\n       && vr1.vuse)\n     {\n       ao_ref r;\n+      vn_walk_kind = kind;\n       if (ao_ref_init_from_vn_reference (&r, set, type, vr1.operands))\n \t*vnresult =\n \t  (vn_reference_t)walk_non_aliased_vuses (&r, vr1.vuse,\n@@ -1527,7 +1530,7 @@ vn_reference_lookup_pieces (tree vuse, alias_set_type set, tree type,\n    stored in the hashtable if one exists.  */\n \n tree\n-vn_reference_lookup (tree op, tree vuse, bool maywalk,\n+vn_reference_lookup (tree op, tree vuse, vn_lookup_kind kind,\n \t\t     vn_reference_t *vnresult)\n {\n   VEC (vn_reference_op_s, heap) *operands;\n@@ -1545,12 +1548,13 @@ vn_reference_lookup (tree op, tree vuse, bool maywalk,\n   if ((cst = fully_constant_vn_reference_p (&vr1)))\n     return cst;\n \n-  if (maywalk\n+  if (kind != VN_NOWALK\n       && vr1.vuse)\n     {\n       vn_reference_t wvnresult;\n       ao_ref r;\n       ao_ref_init (&r, op);\n+      vn_walk_kind = kind;\n       wvnresult =\n \t(vn_reference_t)walk_non_aliased_vuses (&r, vr1.vuse,\n \t\t\t\t\t\tvn_reference_lookup_2,\n@@ -2257,14 +2261,14 @@ visit_reference_op_load (tree lhs, tree op, gimple stmt)\n \n   last_vuse = gimple_vuse (stmt);\n   last_vuse_ptr = &last_vuse;\n-  result = vn_reference_lookup (op, gimple_vuse (stmt), true, NULL);\n+  result = vn_reference_lookup (op, gimple_vuse (stmt), VN_WALKREWRITE, NULL);\n   last_vuse_ptr = NULL;\n \n   /* If we have a VCE, try looking up its operand as it might be stored in\n      a different type.  */\n   if (!result && TREE_CODE (op) == VIEW_CONVERT_EXPR)\n     result = vn_reference_lookup (TREE_OPERAND (op, 0), gimple_vuse (stmt),\n-    \t\t\t\t  true, NULL);\n+    \t\t\t\t  VN_WALKREWRITE, NULL);\n \n   /* We handle type-punning through unions by value-numbering based\n      on offset and size of the access.  Be prepared to handle a\n@@ -2375,7 +2379,7 @@ visit_reference_op_store (tree lhs, tree op, gimple stmt)\n      Otherwise, the vdefs for the store are used when inserting into\n      the table, since the store generates a new memory state.  */\n \n-  result = vn_reference_lookup (lhs, gimple_vuse (stmt), false, NULL);\n+  result = vn_reference_lookup (lhs, gimple_vuse (stmt), VN_NOWALK, NULL);\n \n   if (result)\n     {"}, {"sha": "3d9ee5f7a42cb03df668d19387f0a237ff527a4a", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc27de7f15eb376eaff150d5f5f663bb06426d4/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc27de7f15eb376eaff150d5f5f663bb06426d4/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=3bc27de7f15eb376eaff150d5f5f663bb06426d4", "patch": "@@ -187,10 +187,11 @@ void copy_reference_ops_from_ref (tree, VEC(vn_reference_op_s, heap) **);\n void copy_reference_ops_from_call (gimple, VEC(vn_reference_op_s, heap) **);\n bool ao_ref_init_from_vn_reference (ao_ref *, alias_set_type, tree,\n \t\t\t\t    VEC (vn_reference_op_s, heap) *);\n+typedef enum { VN_NOWALK, VN_WALK, VN_WALKREWRITE } vn_lookup_kind;\n tree vn_reference_lookup_pieces (tree, alias_set_type, tree,\n \t\t\t\t VEC (vn_reference_op_s, heap) *,\n-\t\t\t\t vn_reference_t *, bool);\n-tree vn_reference_lookup (tree, tree, bool, vn_reference_t *);\n+\t\t\t\t vn_reference_t *, vn_lookup_kind);\n+tree vn_reference_lookup (tree, tree, vn_lookup_kind, vn_reference_t *);\n vn_reference_t vn_reference_insert (tree, tree, tree);\n vn_reference_t vn_reference_insert_pieces (tree, alias_set_type, tree,\n \t\t\t\t\t   VEC (vn_reference_op_s, heap) *,"}]}