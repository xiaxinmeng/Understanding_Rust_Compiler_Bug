{"sha": "7310a2da1cb6abdaf82617b973855fa6131ae9dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMxMGEyZGExY2I2YWJkYWY4MjYxN2I5NzM4NTVmYTYxMzFhZTlkZA==", "commit": {"author": {"name": "Stefan Schulze Frielinghaus", "email": "xxschulz@de.ibm.com", "date": "2008-10-29T19:33:45Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2008-10-29T19:33:45Z"}, "message": "configure.ac [spu-*-*]: Do not set skipdirs.\n\nChangeLog:\n\n2008-10-29  Stefan Schulze Frielinghaus  <xxschulz@de.ibm.com>\n\n\t* configure.ac [spu-*-*]: Do not set skipdirs.\n\t* configure: Re-generate.\n\ngcc/ChangeLog:\n\n2008-10-29  Stefan Schulze Frielinghaus  <xxschulz@de.ibm.com>\n\n\t* config/spu/spu.h (FRAME_GROWS_DOWNWARD): Define.\n\t(INITIAL_FRAME_POINTER_OFFSET): Remove.\n\t* config/spu/spu.c (spu_initial_elimination_offset): Calculate new\n\toffset if eliminating soft frame pointer.\n\t* config/spu/spu.md (stack_protect_set, stack_protect_test)\n\t(stack_protect_test_si): Add initial machine description\n\tfor Stack Smashing Protector\n\nFrom-SVN: r141437", "tree": {"sha": "2c34acbf862418e277444a8ede49f1eee657fa78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c34acbf862418e277444a8ede49f1eee657fa78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7310a2da1cb6abdaf82617b973855fa6131ae9dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7310a2da1cb6abdaf82617b973855fa6131ae9dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7310a2da1cb6abdaf82617b973855fa6131ae9dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7310a2da1cb6abdaf82617b973855fa6131ae9dd/comments", "author": null, "committer": null, "parents": [{"sha": "cdd6a337c0e1c4a07a0a45686dcaa159e51f451c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdd6a337c0e1c4a07a0a45686dcaa159e51f451c"}], "stats": {"total": 91, "additions": 77, "deletions": 14}, "files": [{"sha": "87edb554f37ddae6f82034aab2b09b01c6f73d54", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7310a2da1cb6abdaf82617b973855fa6131ae9dd/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7310a2da1cb6abdaf82617b973855fa6131ae9dd/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=7310a2da1cb6abdaf82617b973855fa6131ae9dd", "patch": "@@ -1,3 +1,8 @@\n+2008-10-29  Stefan Schulze Frielinghaus  <xxschulz@de.ibm.com>\n+\n+\t* configure.ac [spu-*-*]: Do not set skipdirs.\n+\t* configure: Re-generate.\n+\n 2008-10-29  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* MAINTAINERS (Various Maintainers): Add myself to reload."}, {"sha": "591a6f3195d0484358cc2d04d62a9ca9151f21af", "filename": "configure", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7310a2da1cb6abdaf82617b973855fa6131ae9dd/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7310a2da1cb6abdaf82617b973855fa6131ae9dd/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=7310a2da1cb6abdaf82617b973855fa6131ae9dd", "patch": "@@ -2656,7 +2656,6 @@ case \"${target}\" in\n   sparc-*-solaris* | sparc64-*-solaris* | sparcv9-*-solaris*)\n     ;;\n   spu-*-*)\n-    skipdirs=\"target-libssp\"\n     ;;\n   v810-*-*)\n     noconfigdirs=\"$noconfigdirs bfd binutils gas gcc gdb ld target-libstdc++-v3 opcodes target-libgloss ${libgcj}\""}, {"sha": "77b32516f03bd39d9f274a4fa3a5f9236d43c75c", "filename": "configure.ac", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7310a2da1cb6abdaf82617b973855fa6131ae9dd/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7310a2da1cb6abdaf82617b973855fa6131ae9dd/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=7310a2da1cb6abdaf82617b973855fa6131ae9dd", "patch": "@@ -892,7 +892,6 @@ case \"${target}\" in\n   sparc-*-solaris* | sparc64-*-solaris* | sparcv9-*-solaris*)\n     ;;\n   spu-*-*)\n-    skipdirs=\"target-libssp\"\n     ;;\n   v810-*-*)\n     noconfigdirs=\"$noconfigdirs bfd binutils gas gcc gdb ld target-libstdc++-v3 opcodes target-libgloss ${libgcj}\""}, {"sha": "bf3467d032374b7fef06df72b0dd0161b08f58df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7310a2da1cb6abdaf82617b973855fa6131ae9dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7310a2da1cb6abdaf82617b973855fa6131ae9dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7310a2da1cb6abdaf82617b973855fa6131ae9dd", "patch": "@@ -1,3 +1,13 @@\n+2008-10-29  Stefan Schulze Frielinghaus  <xxschulz@de.ibm.com>\n+\n+\t* config/spu/spu.h (FRAME_GROWS_DOWNWARD): Define.\n+\t(INITIAL_FRAME_POINTER_OFFSET): Remove.\n+\t* config/spu/spu.c (spu_initial_elimination_offset): Calculate new\n+\toffset if eliminating soft frame pointer.\n+\t* config/spu/spu.md (stack_protect_set, stack_protect_test)\n+\t(stack_protect_test_si): Add initial machine description\n+\tfor Stack Smashing Protector\n+\n 2008-10-29  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 11492"}, {"sha": "cd7f6edacb20c499a03821eb44dbf438e479d1ee", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7310a2da1cb6abdaf82617b973855fa6131ae9dd/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7310a2da1cb6abdaf82617b973855fa6131ae9dd/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=7310a2da1cb6abdaf82617b973855fa6131ae9dd", "patch": "@@ -1759,8 +1759,8 @@ direct_return (void)\n    The stack frame looks like this:\n          +-------------+\n          |  incoming   | \n-      AP |    args     | \n-         +-------------+\n+         |    args     | \n+   AP -> +-------------+\n          | $lr save    |\n          +-------------+\n  prev SP | back chain  | \n@@ -1770,19 +1770,19 @@ direct_return (void)\n          +-------------+\n          |    ...      | \n          | saved regs  | spu_saved_regs_size() bytes\n-         +-------------+\n+   FP -> +-------------+\n          |    ...      | \n-      FP |   vars      | get_frame_size()  bytes\n-         +-------------+\n+         |   vars      | get_frame_size()  bytes\n+  HFP -> +-------------+\n          |    ...      | \n          |  outgoing   | \n          |    args     | crtl->outgoing_args_size bytes\n          +-------------+\n          | $lr of next |\n          |   frame     | \n          +-------------+\n-      SP | back chain  | \n-         +-------------+\n+         | back chain  | \n+   SP -> +-------------+\n \n */\n void\n@@ -3671,15 +3671,16 @@ spu_initial_elimination_offset (int from, int to)\n       || get_frame_size () || saved_regs_size)\n     sp_offset = STACK_POINTER_OFFSET;\n   if (from == FRAME_POINTER_REGNUM && to == STACK_POINTER_REGNUM)\n-    return (sp_offset + crtl->outgoing_args_size);\n+    return get_frame_size () + crtl->outgoing_args_size + sp_offset;\n   else if (from == FRAME_POINTER_REGNUM && to == HARD_FRAME_POINTER_REGNUM)\n-    return 0;\n+    return get_frame_size ();\n   else if (from == ARG_POINTER_REGNUM && to == STACK_POINTER_REGNUM)\n     return sp_offset + crtl->outgoing_args_size\n       + get_frame_size () + saved_regs_size + STACK_POINTER_OFFSET;\n   else if (from == ARG_POINTER_REGNUM && to == HARD_FRAME_POINTER_REGNUM)\n     return get_frame_size () + saved_regs_size + sp_offset;\n-  return 0;\n+  else\n+    gcc_unreachable ();\n }\n \n rtx"}, {"sha": "f93a0e6d645de57a69931c723c03cabad577abcd", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7310a2da1cb6abdaf82617b973855fa6131ae9dd/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7310a2da1cb6abdaf82617b973855fa6131ae9dd/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=7310a2da1cb6abdaf82617b973855fa6131ae9dd", "patch": "@@ -251,6 +251,8 @@ targetm.resolve_overloaded_builtin = spu_resolve_overloaded_builtin;\t\\\n \n #define STACK_GROWS_DOWNWARD\n \n+#define FRAME_GROWS_DOWNWARD 1\n+\n #define STARTING_FRAME_OFFSET (0)\n \n #define STACK_POINTER_OFFSET 32\n@@ -312,8 +314,6 @@ targetm.resolve_overloaded_builtin = spu_resolve_overloaded_builtin;\t\\\n \n #define FRAME_POINTER_REQUIRED 0\n \n-#define INITIAL_FRAME_POINTER_OFFSET(DEPTH) ((DEPTH) = 0)\n-\n #define ELIMINABLE_REGS  \\\n   {{ARG_POINTER_REGNUM,\t STACK_POINTER_REGNUM},\t\t\t\t\\\n   {ARG_POINTER_REGNUM,\t HARD_FRAME_POINTER_REGNUM},\t\t\t\\"}, {"sha": "e7b48f5694129561f2615381572fa152b1cae706", "filename": "gcc/config/spu/spu.md", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7310a2da1cb6abdaf82617b973855fa6131ae9dd/gcc%2Fconfig%2Fspu%2Fspu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7310a2da1cb6abdaf82617b973855fa6131ae9dd/gcc%2Fconfig%2Fspu%2Fspu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.md?ref=7310a2da1cb6abdaf82617b973855fa6131ae9dd", "patch": "@@ -155,6 +155,8 @@\n  (UNSPEC_DFTSV\t\t 51)\n  (UNSPEC_FLOAT_EXTEND\t 52)\n  (UNSPEC_FLOAT_TRUNCATE\t 53)\n+ (UNSPEC_SP_SET         54)\n+ (UNSPEC_SP_TEST        55) \n ])\n \n (include \"predicates.md\")\n@@ -5188,4 +5190,51 @@ DONE;\n   DONE;\n }\")\n \n+(define_insn \"stack_protect_set\"\n+  [(set (match_operand:SI 0 \"spu_mem_operand\" \"=m\")\n+        (unspec:SI [(match_operand:SI 1 \"spu_mem_operand\" \"m\")] UNSPEC_SP_SET))\n+   (set (match_scratch:SI 2 \"=&r\") (const_int 0))]\n+  \"\"\n+  \"lq%p1\\t%2,%1\\;stq%p0\\t%2,%0\\;xor\\t%2,%2,%2\"\n+  [(set_attr \"length\" \"12\")\n+   (set_attr \"type\" \"multi1\")]\n+)\n+\n+(define_expand \"stack_protect_test\"\n+  [(match_operand 0 \"spu_mem_operand\" \"\")\n+   (match_operand 1 \"spu_mem_operand\" \"\")\n+   (match_operand 2 \"\" \"\")]\n+  \"\"\n+{\n+  rtx compare_result;\n+  rtx bcomp, loc_ref;\n+\n+  compare_result = gen_reg_rtx (SImode);\n+\n+  emit_insn (gen_stack_protect_test_si (compare_result,\n+                                        operands[0],\n+                                        operands[1]));\n+\n+  bcomp = gen_rtx_NE (SImode, compare_result, const0_rtx);\n+\n+  loc_ref = gen_rtx_LABEL_REF (VOIDmode, operands[2]);\n+\n+  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx,\n+                                   gen_rtx_IF_THEN_ELSE (VOIDmode, bcomp,\n+                                                         loc_ref, pc_rtx)));\n+\n+  DONE;\n+})\n+\n+(define_insn \"stack_protect_test_si\"\n+  [(set (match_operand:SI 0 \"spu_reg_operand\" \"=&r\")\n+        (unspec:SI [(match_operand:SI 1 \"spu_mem_operand\" \"m\")\n+                    (match_operand:SI 2 \"spu_mem_operand\" \"m\")]\n+                   UNSPEC_SP_TEST))\n+   (set (match_scratch:SI 3 \"=&r\") (const_int 0))]\n+  \"\"\n+  \"lq%p1\\t%0,%1\\;lq%p2\\t%3,%2\\;ceq\\t%0,%0,%3\\;xor\\t%3,%3,%3\"\n+  [(set_attr \"length\" \"16\")\n+   (set_attr \"type\" \"multi1\")]\n+)\n "}]}