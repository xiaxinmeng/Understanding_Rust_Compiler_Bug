{"sha": "a91d1af0879ed504c2ebdc72e9a2ea3bd16537bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkxZDFhZjA4NzllZDUwNGMyZWJkYzcyZTlhMmVhM2JkMTY1MzdiYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@wasabisystems.com", "date": "2003-12-19T21:14:35Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2003-12-19T21:14:35Z"}, "message": "re PR c++/13447 (Another demangler problem with method cv-qualifiers)\n\n\tFix for PR c++/13447:\n\t* cp-demangle.c (enum d_comp_type): Add D_COMP_LOCAL_NAME.\n\t(d_dump, d_make_comp): Handle D_COMP_LOCAL_NAME.\n\t(is_ctor_dtor_or_conversion): Handle D_COMP_LOCAL_NAME like\n\tD_COMP_QUAL_NAME.\n\t(is_ctor_or_dtor): Likewise.\n\t(d_local_name): Use D_COMP_LOCAL_NAME rather than\n\tD_COMP_QUAL_NAME.\n\t(d_print_comp) [D_COMP_LOCAL_NAME]: New.\n\t(d_prinT_comp) [D_COMP_TYPED_NAME]: If the left tree is\n\tD_COMP_LOCAL_NAME, pull any qualifiers off its right subtree.\n\t(d_print_mod_list): Handle D_COMP_LOCAL_NAME.\n\t* testsuite/demangle-expected: Add two test cases.\n\n\t* cp-demangle.c (d_print_function_type): Clear the global modifier\n\tlist when printing the modifiers, not just when printing the\n\tfunction parameters.\n\t* testsuite/demangle-expected: Add two test cases.\n\nFrom-SVN: r74850", "tree": {"sha": "2898ae6a39aee060a86e93479b4188a9f81276ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2898ae6a39aee060a86e93479b4188a9f81276ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a91d1af0879ed504c2ebdc72e9a2ea3bd16537bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a91d1af0879ed504c2ebdc72e9a2ea3bd16537bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a91d1af0879ed504c2ebdc72e9a2ea3bd16537bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a91d1af0879ed504c2ebdc72e9a2ea3bd16537bb/comments", "author": null, "committer": null, "parents": [{"sha": "4656bc859d498ca67194d3bbc449ff916cf67f15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4656bc859d498ca67194d3bbc449ff916cf67f15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4656bc859d498ca67194d3bbc449ff916cf67f15"}], "stats": {"total": 130, "additions": 120, "deletions": 10}, "files": [{"sha": "695c45059dc1090ce68980cc830b527f3002c803", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a91d1af0879ed504c2ebdc72e9a2ea3bd16537bb/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a91d1af0879ed504c2ebdc72e9a2ea3bd16537bb/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=a91d1af0879ed504c2ebdc72e9a2ea3bd16537bb", "patch": "@@ -1,3 +1,24 @@\n+2003-12-19  Ian Lance Taylor  <ian@wasabisystems.com>\n+\n+\tFix for PR c++/13447:\n+\t* cp-demangle.c (enum d_comp_type): Add D_COMP_LOCAL_NAME.\n+\t(d_dump, d_make_comp): Handle D_COMP_LOCAL_NAME.\n+\t(is_ctor_dtor_or_conversion): Handle D_COMP_LOCAL_NAME like\n+\tD_COMP_QUAL_NAME.\n+\t(is_ctor_or_dtor): Likewise.\n+\t(d_local_name): Use D_COMP_LOCAL_NAME rather than\n+\tD_COMP_QUAL_NAME.\n+\t(d_print_comp) [D_COMP_LOCAL_NAME]: New.\n+\t(d_prinT_comp) [D_COMP_TYPED_NAME]: If the left tree is\n+\tD_COMP_LOCAL_NAME, pull any qualifiers off its right subtree.\n+\t(d_print_mod_list): Handle D_COMP_LOCAL_NAME.\n+\t* testsuite/demangle-expected: Add two test cases.\n+\n+\t* cp-demangle.c (d_print_function_type): Clear the global modifier\n+\tlist when printing the modifiers, not just when printing the\n+\tfunction parameters.\n+\t* testsuite/demangle-expected: Add two test cases.\n+\n 2003-12-15  Ian Lance Taylor  <ian@wasabisystems.com>\n \n \t* cp-demangle.c (d_print_function_type): Print the function"}, {"sha": "27e09df7288131b311c2c285d0e82951195d6f3b", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 78, "deletions": 10, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a91d1af0879ed504c2ebdc72e9a2ea3bd16537bb/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a91d1af0879ed504c2ebdc72e9a2ea3bd16537bb/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=a91d1af0879ed504c2ebdc72e9a2ea3bd16537bb", "patch": "@@ -166,6 +166,8 @@ enum d_comp_type\n   D_COMP_NAME,\n   /* A qualified name.  */\n   D_COMP_QUAL_NAME,\n+  /* A local name.  */\n+  D_COMP_LOCAL_NAME,\n   /* A typed name.  */\n   D_COMP_TYPED_NAME,\n   /* A template.  */\n@@ -585,6 +587,9 @@ d_dump (dc, indent)\n     case D_COMP_QUAL_NAME:\n       printf (\"qualified name\\n\");\n       break;\n+    case D_COMP_LOCAL_NAME:\n+      printf (\"local name\\n\");\n+      break;\n     case D_COMP_TYPED_NAME:\n       printf (\"typed name\\n\");\n       break;\n@@ -748,6 +753,7 @@ d_make_comp (di, type, left, right)\n     {\n       /* These types require two parameters.  */\n     case D_COMP_QUAL_NAME:\n+    case D_COMP_LOCAL_NAME:\n     case D_COMP_TYPED_NAME:\n     case D_COMP_TEMPLATE:\n     case D_COMP_VENDOR_TYPE_QUAL:\n@@ -1025,6 +1031,7 @@ is_ctor_dtor_or_conversion (dc)\n     default:\n       return 0;\n     case D_COMP_QUAL_NAME:\n+    case D_COMP_LOCAL_NAME:\n       return is_ctor_dtor_or_conversion (d_right (dc));\n     case D_COMP_CTOR:\n     case D_COMP_DTOR:\n@@ -2332,7 +2339,7 @@ d_local_name (di)\n       d_advance (di, 1);\n       if (! d_discriminator (di))\n \treturn NULL;\n-      return d_make_comp (di, D_COMP_QUAL_NAME, function,\n+      return d_make_comp (di, D_COMP_LOCAL_NAME, function,\n \t\t\t  d_make_name (di, \"string literal\",\n \t\t\t\t       sizeof \"string literal\" - 1));\n     }\n@@ -2343,7 +2350,7 @@ d_local_name (di)\n       name = d_name (di);\n       if (! d_discriminator (di))\n \treturn NULL;\n-      return d_make_comp (di, D_COMP_QUAL_NAME, function, name);\n+      return d_make_comp (di, D_COMP_LOCAL_NAME, function, name);\n     }\n }\n \n@@ -2641,6 +2648,7 @@ d_print_comp (dpi, dc)\n       return;\n \n     case D_COMP_QUAL_NAME:\n+    case D_COMP_LOCAL_NAME:\n       d_print_comp (dpi, d_left (dc));\n       d_append_string (dpi, (dpi->options & DMGL_JAVA) == 0 ? \"::\" : \".\");\n       d_print_comp (dpi, d_right (dc));\n@@ -2692,6 +2700,38 @@ d_print_comp (dpi, dc)\n \t    dpt.template = typed_name;\n \t  }\n \n+\t/* If typed_name is a D_COMP_LOCAL_NAME, then there may be\n+\t   CV-qualifiers on its right argument which really apply\n+\t   here; this happens when parsing a class which is local to a\n+\t   function.  */\n+\tif (typed_name->type == D_COMP_LOCAL_NAME)\n+\t  {\n+\t    struct d_comp *local_name;\n+\n+\t    local_name = d_right (typed_name);\n+\t    while (local_name->type == D_COMP_RESTRICT_THIS\n+\t\t   || local_name->type == D_COMP_VOLATILE_THIS\n+\t\t   || local_name->type == D_COMP_CONST_THIS)\n+\t      {\n+\t\tif (i >= sizeof adpm / sizeof adpm[0])\n+\t\t  {\n+\t\t    d_print_error (dpi);\n+\t\t    return;\n+\t\t  }\n+\n+\t\tadpm[i] = adpm[i - 1];\n+\t\tadpm[i].next = &adpm[i - 1];\n+\t\tdpi->modifiers = &adpm[i];\n+\n+\t\tadpm[i - 1].mod = local_name;\n+\t\tadpm[i - 1].printed = 0;\n+\t\tadpm[i - 1].templates = dpi->templates;\n+\t\t++i;\n+\n+\t\tlocal_name = d_left (local_name);\n+\t      }\n+\t  }\n+\n \td_print_comp (dpi, d_right (dc));\n \n \tif (typed_name->type == D_COMP_TEMPLATE)\n@@ -3260,6 +3300,34 @@ d_print_mod_list (dpi, mods, suffix)\n       dpi->templates = hold_dpt;\n       return;\n     }\n+  else if (mods->mod->type == D_COMP_LOCAL_NAME)\n+    {\n+      struct d_print_mod *hold_modifiers;\n+      struct d_comp *dc;\n+\n+      /* When this is on the modifier stack, we have pulled any\n+\t qualifiers off the right argument already.  Otherwise, we\n+\t print it as usual, but don't let the left argument see any\n+\t modifiers.  */\n+\n+      hold_modifiers = dpi->modifiers;\n+      dpi->modifiers = NULL;\n+      d_print_comp (dpi, d_left (mods->mod));\n+      dpi->modifiers = hold_modifiers;\n+\n+      d_append_string (dpi, (dpi->options & DMGL_JAVA) == 0 ? \"::\" : \".\");\n+\n+      dc = d_right (mods->mod);\n+      while (dc->type == D_COMP_RESTRICT_THIS\n+\t     || dc->type == D_COMP_VOLATILE_THIS\n+\t     || dc->type == D_COMP_CONST_THIS)\n+\tdc = d_left (dc);\n+\n+      d_print_comp (dpi, dc);\n+\n+      dpi->templates = hold_dpt;\n+      return;\n+    }\n \n   d_print_mod (dpi, mods->mod);\n \n@@ -3335,6 +3403,7 @@ d_print_function_type (dpi, dc, mods)\n   int need_paren;\n   int saw_mod;\n   struct d_print_mod *p;\n+  struct d_print_mod *hold_modifiers;\n \n   need_paren = 0;\n   saw_mod = 0;\n@@ -3388,6 +3457,9 @@ d_print_function_type (dpi, dc, mods)\n       d_append_char (dpi, '(');\n     }\n \n+  hold_modifiers = dpi->modifiers;\n+  dpi->modifiers = NULL;\n+\n   d_print_mod_list (dpi, mods, 0);\n \n   if (need_paren)\n@@ -3396,18 +3468,13 @@ d_print_function_type (dpi, dc, mods)\n   d_append_char (dpi, '(');\n \n   if (d_right (dc) != NULL)\n-    {\n-      struct d_print_mod *hold_modifiers;\n-\n-      hold_modifiers = dpi->modifiers;\n-      dpi->modifiers = NULL;\n-      d_print_comp (dpi, d_right (dc));\n-      dpi->modifiers = hold_modifiers;\n-    }\n+    d_print_comp (dpi, d_right (dc));\n \n   d_append_char (dpi, ')');\n \n   d_print_mod_list (dpi, mods, 1);\n+\n+  dpi->modifiers = hold_modifiers;\n }\n \n /* Print an array type, except for the element type.  */\n@@ -3857,6 +3924,7 @@ is_ctor_or_dtor (mangled, ctor_kind, dtor_kind)\n \t  dc = d_left (dc);\n \t  break;\n \tcase D_COMP_QUAL_NAME:\n+\tcase D_COMP_LOCAL_NAME:\n \t  dc = d_right (dc);\n \t  break;\n \tcase D_COMP_CTOR:"}, {"sha": "8bae90eb0a557b0ab3c7502a452f4ba558bfc395", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a91d1af0879ed504c2ebdc72e9a2ea3bd16537bb/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a91d1af0879ed504c2ebdc72e9a2ea3bd16537bb/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=a91d1af0879ed504c2ebdc72e9a2ea3bd16537bb", "patch": "@@ -2921,6 +2921,27 @@ std::basic_iostream<char, std::char_traits<char> >::~basic_iostream()\n _ZNK15nsBaseHashtableI15nsUint32HashKey8nsCOMPtrI4IFooEPS2_E13EnumerateReadEPF15PLDHashOperatorRKjS4_PvES9_\n nsBaseHashtable<nsUint32HashKey, nsCOMPtr<IFoo>, IFoo*>::EnumerateRead(PLDHashOperator (*)(unsigned int const&, IFoo*, void*), void*) const\n #\n+# Another member function qualifier test case, when the member function\n+# returns a pointer to function.\n+--format=gnu-v3\n+_ZNK1C1fIiEEPFivEv\n+int (*C::f<int>() const)()\n+#\n+# Another case where we got member function qualifiers wrong.\n+--format=gnu-v3\n+_ZZ3BBdI3FooEvvENK3Fob3FabEv\n+void BBd<Foo>()::Fob::Fab() const\n+#\n+# The same idea one level deeper.\n+--format=gnu-v3\n+_ZZZ3BBdI3FooEvvENK3Fob3FabEvENK3Gob3GabEv\n+void BBd<Foo>()::Fob::Fab() const::Gob::Gab() const\n+#\n+# Yet another member function qualifier problem.\n+--format=gnu-v3\n+_ZNK5boost6spirit5matchI13rcs_deltatextEcvMNS0_4impl5dummyEFvvEEv\n+boost::spirit::match<rcs_deltatext>::operator void (boost::spirit::impl::dummy::*)()() const\n+#\n # This caused an infinite loop.\n #\n # This is generated by an EDG compiler (kcc 4.0).  To demangle it"}]}