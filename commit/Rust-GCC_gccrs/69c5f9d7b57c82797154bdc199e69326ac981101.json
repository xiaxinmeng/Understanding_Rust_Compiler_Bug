{"sha": "69c5f9d7b57c82797154bdc199e69326ac981101", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjljNWY5ZDdiNTdjODI3OTcxNTRiZGMxOTllNjkzMjZhYzk4MTEwMQ==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2015-12-17T14:10:24Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2015-12-17T14:10:24Z"}, "message": "DWARF: add a language hook for scalar biased types\n\nFront-ends like GNAT for Ada sometimes use biased encodings for integral\ntypes.  This change creates a new language hook so that the bias\ninformation can make it into the debugging information back-end and\nintroduces an experimental DWARF attribute to hold it.\n\ngcc/ada/ChangeLog:\n\n\t* gcc-interface/misc.c (gnat_get_type_bias): New.\n\t(LANG_HOOKS_GET_TYPE_BIAS): Redefine macro to implement the\n\tget_type_bias language hook.\n\ngcc/ChangeLog:\n\n\t* langhooks.h (struct lang_hooks_for_types): New get_bias_field.\n\t* langhooks-def.h (LANG_HOOKS_GET_TYPE_BIAS): New.\n\t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Initialize the\n\tget_bias_field.\n\t* dwarf2out.c\n\t(base_type_die): In non-strict DWARF mode, invoke the\n\tget_type_bias language hook for INTEGER_TYPE nodes.  If it\n\treturns a bias, emit an attribute for it.\n\t(subrange_type_die): Change signature to handle bias.  If\n\tnon-strict DWARF mode, emit an attribute for it, if one passed.\n\t(modified_type_die): For subrange types, invoke the\n\tget_type_bias langage hook and pass the bias to\n\tsubrange_type_die.\n\nFrom-SVN: r231767", "tree": {"sha": "4b1283cf84906d22bbc457ae4eb42f1b824396c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b1283cf84906d22bbc457ae4eb42f1b824396c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69c5f9d7b57c82797154bdc199e69326ac981101", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69c5f9d7b57c82797154bdc199e69326ac981101", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69c5f9d7b57c82797154bdc199e69326ac981101", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69c5f9d7b57c82797154bdc199e69326ac981101/comments", "author": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "98088266e55b9c34ff9b0852fa9a7c559594cdcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98088266e55b9c34ff9b0852fa9a7c559594cdcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98088266e55b9c34ff9b0852fa9a7c559594cdcd"}], "stats": {"total": 68, "additions": 65, "deletions": 3}, "files": [{"sha": "405d8b0e5a2917302555e2340a1f14d21731d6e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69c5f9d7b57c82797154bdc199e69326ac981101/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69c5f9d7b57c82797154bdc199e69326ac981101/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69c5f9d7b57c82797154bdc199e69326ac981101", "patch": "@@ -1,3 +1,19 @@\n+2015-12-17  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* langhooks.h (struct lang_hooks_for_types): New get_bias_field.\n+\t* langhooks-def.h (LANG_HOOKS_GET_TYPE_BIAS): New.\n+\t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Initialize the\n+\tget_bias_field.\n+\t* dwarf2out.c\n+\t(base_type_die): In non-strict DWARF mode, invoke the\n+\tget_type_bias language hook for INTEGER_TYPE nodes.  If it\n+\treturns a bias, emit an attribute for it.\n+\t(subrange_type_die): Change signature to handle bias.  If\n+\tnon-strict DWARF mode, emit an attribute for it, if one passed.\n+\t(modified_type_die): For subrange types, invoke the\n+\tget_type_bias langage hook and pass the bias to\n+\tsubrange_type_die.\n+\n 2015-12-17  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* dwarf2out.h (DWARF2OUT_ARRAY_DESCR_INFO_MAX_DIMEN): New macro."}, {"sha": "80c5a39d80360103459d3d4075e60ca3e20579af", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69c5f9d7b57c82797154bdc199e69326ac981101/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69c5f9d7b57c82797154bdc199e69326ac981101/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=69c5f9d7b57c82797154bdc199e69326ac981101", "patch": "@@ -1,3 +1,9 @@\n+2015-12-17  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* gcc-interface/misc.c (gnat_get_type_bias): New.\n+\t(LANG_HOOKS_GET_TYPE_BIAS): Redefine macro to implement the\n+\tget_type_bias language hook.\n+\n 2015-12-17  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* gcc-interface/misc.c (gnat_get_array_descr_info): When the"}, {"sha": "269960f917d1341167c84b70959727431b591417", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69c5f9d7b57c82797154bdc199e69326ac981101/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69c5f9d7b57c82797154bdc199e69326ac981101/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=69c5f9d7b57c82797154bdc199e69326ac981101", "patch": "@@ -977,6 +977,16 @@ gnat_get_subrange_bounds (const_tree gnu_type, tree *lowval, tree *highval)\n   *highval = TYPE_MAX_VALUE (gnu_type);\n }\n \n+static tree\n+gnat_get_type_bias (const_tree gnu_type)\n+{\n+  if (TREE_CODE (gnu_type) == INTEGER_TYPE\n+      && TYPE_BIASED_REPRESENTATION_P (gnu_type)\n+      && gnat_encodings == DWARF_GNAT_ENCODINGS_MINIMAL)\n+    return TYPE_RM_MIN_VALUE(gnu_type);\n+  return NULL_TREE;\n+}\n+\n /* GNU_TYPE is the type of a subprogram parameter.  Determine if it should be\n    passed by reference by default.  */\n \n@@ -1276,6 +1286,8 @@ get_lang_specific (tree node)\n #define LANG_HOOKS_GET_ARRAY_DESCR_INFO\tgnat_get_array_descr_info\n #undef  LANG_HOOKS_GET_SUBRANGE_BOUNDS\n #define LANG_HOOKS_GET_SUBRANGE_BOUNDS  gnat_get_subrange_bounds\n+#undef  LANG_HOOKS_GET_TYPE_BIAS\n+#define LANG_HOOKS_GET_TYPE_BIAS\tgnat_get_type_bias\n #undef  LANG_HOOKS_DESCRIPTIVE_TYPE\n #define LANG_HOOKS_DESCRIPTIVE_TYPE\tgnat_descriptive_type\n #undef  LANG_HOOKS_GET_DEBUG_TYPE"}, {"sha": "067c4f23892d4a18a58593e1e09925ee71c0cda8", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69c5f9d7b57c82797154bdc199e69326ac981101/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69c5f9d7b57c82797154bdc199e69326ac981101/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=69c5f9d7b57c82797154bdc199e69326ac981101", "patch": "@@ -3288,7 +3288,7 @@ static void output_line_info (bool);\n static void output_file_names (void);\n static dw_die_ref base_type_die (tree);\n static int is_base_type (tree);\n-static dw_die_ref subrange_type_die (tree, tree, tree, dw_die_ref);\n+static dw_die_ref subrange_type_die (tree, tree, tree, tree, dw_die_ref);\n static int decl_quals (const_tree);\n static dw_die_ref modified_type_die (tree, int, dw_die_ref);\n static dw_die_ref generic_parameter_die (tree, tree, bool, dw_die_ref);\n@@ -10809,6 +10809,7 @@ base_type_die (tree type)\n   enum dwarf_type encoding;\n   bool fpt_used = false;\n   struct fixed_point_type_info fpt_info;\n+  tree type_bias = NULL_TREE;\n \n   if (TREE_CODE (type) == ERROR_MARK || TREE_CODE (type) == VOID_TYPE)\n     return 0;\n@@ -10859,6 +10860,10 @@ base_type_die (tree type)\n \tencoding = DW_ATE_unsigned;\n       else\n \tencoding = DW_ATE_signed;\n+\n+      if (!dwarf_strict\n+\t  && lang_hooks.types.get_type_bias)\n+\ttype_bias = lang_hooks.types.get_type_bias (type);\n       break;\n \n     case REAL_TYPE:\n@@ -10943,6 +10948,12 @@ base_type_die (tree type)\n \t  gcc_unreachable ();\n \t}\n     }\n+  if (type_bias != NULL)\n+    add_scalar_info (base_type_result, DW_AT_GNU_bias, type_bias,\n+\t\t     dw_scalar_form_constant\n+\t\t     | dw_scalar_form_exprloc\n+\t\t     | dw_scalar_form_reference,\n+\t\t     NULL);\n   add_pubtype (type, base_type_result);\n \n   return base_type_result;\n@@ -11044,7 +11055,8 @@ offset_int_type_size_in_bits (const_tree type)\n     to a DIE that describes the given type.  */\n \n static dw_die_ref\n-subrange_type_die (tree type, tree low, tree high, dw_die_ref context_die)\n+subrange_type_die (tree type, tree low, tree high, tree bias,\n+\t\t   dw_die_ref context_die)\n {\n   dw_die_ref subrange_die;\n   const HOST_WIDE_INT size_in_bytes = int_size_in_bytes (type);\n@@ -11065,6 +11077,12 @@ subrange_type_die (tree type, tree low, tree high, dw_die_ref context_die)\n     add_bound_info (subrange_die, DW_AT_lower_bound, low, NULL);\n   if (high)\n     add_bound_info (subrange_die, DW_AT_upper_bound, high, NULL);\n+  if (bias && !dwarf_strict)\n+    add_scalar_info (subrange_die, DW_AT_GNU_bias, bias,\n+\t\t     dw_scalar_form_constant\n+\t\t     | dw_scalar_form_exprloc\n+\t\t     | dw_scalar_form_reference,\n+\t\t     NULL);\n \n   return subrange_die;\n }\n@@ -11279,7 +11297,10 @@ modified_type_die (tree type, int cv_quals, dw_die_ref context_die)\n \t   && TREE_TYPE (type) != NULL_TREE\n \t   && subrange_type_for_debug_p (type, &low, &high))\n     {\n-      mod_type_die = subrange_type_die (type, low, high, context_die);\n+      tree bias = NULL_TREE;\n+      if (lang_hooks.types.get_type_bias)\n+\tbias = lang_hooks.types.get_type_bias (type);\n+      mod_type_die = subrange_type_die (type, low, high, bias, context_die);\n       item_type = TREE_TYPE (type);\n     }\n   else if (is_base_type (type))"}, {"sha": "db96e916bc4cacdb676677ea3ea51613b8a0a5fc", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69c5f9d7b57c82797154bdc199e69326ac981101/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69c5f9d7b57c82797154bdc199e69326ac981101/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=69c5f9d7b57c82797154bdc199e69326ac981101", "patch": "@@ -173,6 +173,7 @@ extern tree lhd_make_node (enum tree_code);\n #define LANG_HOOKS_TYPE_HASH_EQ\t\tNULL\n #define LANG_HOOKS_GET_ARRAY_DESCR_INFO\tNULL\n #define LANG_HOOKS_GET_SUBRANGE_BOUNDS\tNULL\n+#define LANG_HOOKS_GET_TYPE_BIAS\tNULL\n #define LANG_HOOKS_DESCRIPTIVE_TYPE\tNULL\n #define LANG_HOOKS_RECONSTRUCT_COMPLEX_TYPE reconstruct_complex_type\n #define LANG_HOOKS_ENUM_UNDERLYING_BASE_TYPE lhd_enum_underlying_base_type\n@@ -195,6 +196,7 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_TYPE_HASH_EQ, \\\n   LANG_HOOKS_GET_ARRAY_DESCR_INFO, \\\n   LANG_HOOKS_GET_SUBRANGE_BOUNDS, \\\n+  LANG_HOOKS_GET_TYPE_BIAS, \\\n   LANG_HOOKS_DESCRIPTIVE_TYPE, \\\n   LANG_HOOKS_RECONSTRUCT_COMPLEX_TYPE, \\\n   LANG_HOOKS_ENUM_UNDERLYING_BASE_TYPE, \\"}, {"sha": "95d5840d0a92bb9f4235a87c937b7585e163afdd", "filename": "gcc/langhooks.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69c5f9d7b57c82797154bdc199e69326ac981101/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69c5f9d7b57c82797154bdc199e69326ac981101/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=69c5f9d7b57c82797154bdc199e69326ac981101", "patch": "@@ -127,6 +127,11 @@ struct lang_hooks_for_types\n   /* Fill in information for the debugger about the bounds of TYPE.  */\n   void (*get_subrange_bounds) (const_tree, tree *, tree *);\n \n+  /* Called on INTEGER_TYPEs.  Return NULL_TREE for non-biased types.  For\n+     biased types, return as an INTEGER_CST node the value that is represented\n+     by a physical zero.  */\n+  tree (*get_type_bias) (const_tree);\n+\n   /* A type descriptive of TYPE's complex layout generated to help the\n      debugger to decode variable-length or self-referential constructs.\n      This is only used for the AT_GNAT_descriptive_type DWARF attribute.  */"}]}