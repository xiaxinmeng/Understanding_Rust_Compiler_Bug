{"sha": "081cebb27adaef4511307a2a6d4413fb65be48c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgxY2ViYjI3YWRhZWY0NTExMzA3YTJhNmQ0NDEzZmI2NWJlNDhjNw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2002-12-22T21:32:28Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2002-12-22T21:32:28Z"}, "message": "re PR c++/8572 (ICE with external definition of conversion operator to internal class within template class)\n\ncp:\n\tPR c++/8572\n\t* cp-tree.h (grokoptypename): Add SCOPE parameter.\n\t* decl2.c (grokoptypename): Add SCOPE parameter. tsubst the type\n\tif in a template scope.\n\t* parse.y (unoperator): Return the scope.\n\t(operator_name): Adjust grokoptypename call.\ntestsuite:\n\t* g++.dg/parse/conv_op1.C: New test.\n\nFrom-SVN: r60416", "tree": {"sha": "cf5e2f1f1a84eaecaddd24a649a00292285af255", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf5e2f1f1a84eaecaddd24a649a00292285af255"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/081cebb27adaef4511307a2a6d4413fb65be48c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/081cebb27adaef4511307a2a6d4413fb65be48c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/081cebb27adaef4511307a2a6d4413fb65be48c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/081cebb27adaef4511307a2a6d4413fb65be48c7/comments", "author": null, "committer": null, "parents": [{"sha": "96e13905ad6eb836fc85bc564f31ee8a055cd07e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e13905ad6eb836fc85bc564f31ee8a055cd07e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96e13905ad6eb836fc85bc564f31ee8a055cd07e"}], "stats": {"total": 70, "additions": 66, "deletions": 4}, "files": [{"sha": "c268c106b1c69636a858046e6e117680ade0d7fc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081cebb27adaef4511307a2a6d4413fb65be48c7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081cebb27adaef4511307a2a6d4413fb65be48c7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=081cebb27adaef4511307a2a6d4413fb65be48c7", "patch": "@@ -1,3 +1,12 @@\n+2002-12-22  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/8572\n+\t* cp-tree.h (grokoptypename): Add SCOPE parameter.\n+\t* decl2.c (grokoptypename): Add SCOPE parameter. tsubst the type\n+\tif in a template scope.\n+\t* parse.y (unoperator): Return the scope.\n+\t(operator_name): Adjust grokoptypename call.\n+\n 2002-12-22  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \t* cp-tree.h (make_unbound_class_template): Use tsubst_flags_t."}, {"sha": "65f9df00b61a93b09a1a4226abdf87dfa41fd893", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081cebb27adaef4511307a2a6d4413fb65be48c7/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081cebb27adaef4511307a2a6d4413fb65be48c7/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=081cebb27adaef4511307a2a6d4413fb65be48c7", "patch": "@@ -3806,7 +3806,7 @@ extern void check_member_template               PARAMS ((tree));\n extern tree grokfield\t\t\t\tPARAMS ((tree, tree, tree, tree, tree));\n extern tree grokbitfield\t\t\tPARAMS ((tree, tree, tree));\n extern tree groktypefield\t\t\tPARAMS ((tree, tree));\n-extern tree grokoptypename\t\t\tPARAMS ((tree, tree));\n+extern tree grokoptypename\t\t\tPARAMS ((tree, tree, tree));\n extern void cplus_decl_attributes\t\tPARAMS ((tree *, tree, int));\n extern tree constructor_name_full\t\tPARAMS ((tree));\n extern tree constructor_name\t\t\tPARAMS ((tree));"}, {"sha": "d305ee5813e52ab2c0cb267df238d1ff55ba3e16", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081cebb27adaef4511307a2a6d4413fb65be48c7/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081cebb27adaef4511307a2a6d4413fb65be48c7/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=081cebb27adaef4511307a2a6d4413fb65be48c7", "patch": "@@ -1120,11 +1120,29 @@ grokbitfield (declarator, declspecs, width)\n   return value;\n }\n \n+/* Convert a conversion operator name to an identifier. SCOPE is the\n+   scope of the conversion operator, if explicit.  */\n+\n tree\n-grokoptypename (declspecs, declarator)\n+grokoptypename (declspecs, declarator, scope)\n      tree declspecs, declarator;\n+     tree scope;\n {\n   tree t = grokdeclarator (declarator, declspecs, TYPENAME, 0, NULL);\n+\n+  /* Resolve any TYPENAME_TYPEs that refer to SCOPE, before mangling\n+     the name, so that we mangle the right thing.  */\n+  if (scope && current_template_parms\n+      && uses_template_parms (t)\n+      && uses_template_parms (scope))\n+    {\n+      tree args = current_template_args ();\n+      \n+      push_scope (scope);\n+      t = tsubst (t, args, tf_error | tf_warning, NULL_TREE);\n+      pop_scope (scope);\n+    }\n+  \n   return mangle_conv_op_name_for_type (t);\n }\n "}, {"sha": "bdbee018e5ab9672137abbb4820de259d0cf43c5", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081cebb27adaef4511307a2a6d4413fb65be48c7/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081cebb27adaef4511307a2a6d4413fb65be48c7/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=081cebb27adaef4511307a2a6d4413fb65be48c7", "patch": "@@ -388,7 +388,7 @@ check_class_key (key, aggr)\n %type <ttype> init initlist maybeasm maybe_init defarg defarg1\n %type <ttype> asm_operands nonnull_asm_operands asm_operand asm_clobbers\n %type <ttype> maybe_attribute attributes attribute attribute_list attrib\n-%type <ttype> any_word\n+%type <ttype> any_word unoperator\n \n %type <itype> save_lineno\n %type <ttype> simple_stmt simple_if\n@@ -3914,6 +3914,7 @@ unoperator:\n           got_object = TREE_VALUE (saved_scopes);\n \t  looking_for_typename = TREE_LANG_FLAG_0 (saved_scopes);\n           saved_scopes = TREE_CHAIN (saved_scopes);\n+\t  $$ = got_scope;\n \t}\n         ;\n \n@@ -3985,7 +3986,7 @@ operator_name:\n \t| operator DELETE '[' ']' unoperator\n \t\t{ $$ = frob_opname (ansi_opname (VEC_DELETE_EXPR)); }\n \t| operator type_specifier_seq conversion_declarator unoperator\n-\t\t{ $$ = frob_opname (grokoptypename ($2.t, $3)); }\n+\t\t{ $$ = frob_opname (grokoptypename ($2.t, $3, $4)); }\n \t| operator error unoperator\n \t\t{ $$ = frob_opname (ansi_opname (ERROR_MARK)); }\n \t;"}, {"sha": "db2e5f57900fbc6ed3ef30e7f3847a19d030a07a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081cebb27adaef4511307a2a6d4413fb65be48c7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081cebb27adaef4511307a2a6d4413fb65be48c7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=081cebb27adaef4511307a2a6d4413fb65be48c7", "patch": "@@ -1,3 +1,7 @@\n+2002-12-22  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.dg/parse/conv_op1.C: New test.\n+\n 2002-12-21  Josef Zlomek  <zlomekj@suse.cz>\n \n \t* gcc.c-torture/compile/20021220-1.c: Removed until bug fix is"}, {"sha": "e892f01aadd7a9e45dcdf6a8d689ebc5f6e3e3f1", "filename": "gcc/testsuite/g++.dg/parse/conv_op1.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081cebb27adaef4511307a2a6d4413fb65be48c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconv_op1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081cebb27adaef4511307a2a6d4413fb65be48c7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconv_op1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconv_op1.C?ref=081cebb27adaef4511307a2a6d4413fb65be48c7", "patch": "@@ -0,0 +1,30 @@\n+\n+// { dg-do compile }\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 21 Dec 2002 <nathan@codesourcery.com>\n+\n+// PR 8572. ICE with templated conversion operators.\n+\n+template <typename T> struct A\n+{\n+  struct B { };\n+  operator B* () const;\n+  B *Foo ();\n+};\n+\n+template <typename T> typename A<T>::B *A<T>::Foo ()\n+{\n+  return 0;\n+}\n+\n+template <typename T> A<T>::operator typename A<T>::B* () const\n+{\n+  return 0;\n+}\n+\n+void Foo (A<int> &p)\n+{\n+  p.Foo ();\n+  static_cast <A<int>::B *> (p);\n+}"}]}