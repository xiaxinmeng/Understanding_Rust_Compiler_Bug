{"sha": "0538d42cdd68f6b65d72ed7768f1d00ba44f8631", "node_id": "C_kwDOANBUbNoAKDA1MzhkNDJjZGQ2OGY2YjY1ZDcyZWQ3NzY4ZjFkMDBiYTQ0Zjg2MzE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-12T10:17:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-12T10:17:41Z"}, "message": "i386: Fix up cvtsd2ss splitter [PR104502]\n\nThe following testcase ICEs, because AVX512F is enabled, AVX512VL is not,\nand the cvtsd2ss insn has %xmm0-15 as output operand and %xmm16-31 as\ninput operand.  For output operand %xmm16+ the splitter just gives up\nin such case, but for such input it just emits vmovddup which requires\nAVX512VL if either operand is EXT_REX_SSE_REG_P (when it is 128-bit).\n\nThe following patch fixes it by treating that case like the pre-SSE3\noutput != input case - move the input to output and do everything on\nthe output reg which is known to be < %xmm16.\n\n2022-02-12  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/104502\n\t* config/i386/i386.md (cvtsd2ss splitter): If operands[1] is xmm16+\n\tand AVX512VL isn't available, move operands[1] to operands[0] first.\n\n\t* gcc.target/i386/pr104502.c: New test.", "tree": {"sha": "41b472d762e23f8e06d22612b0a49728fc293e7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41b472d762e23f8e06d22612b0a49728fc293e7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0538d42cdd68f6b65d72ed7768f1d00ba44f8631", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0538d42cdd68f6b65d72ed7768f1d00ba44f8631", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0538d42cdd68f6b65d72ed7768f1d00ba44f8631", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0538d42cdd68f6b65d72ed7768f1d00ba44f8631/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edadc7e0510b703d9727cf5ff68d55d84bb95def", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edadc7e0510b703d9727cf5ff68d55d84bb95def", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edadc7e0510b703d9727cf5ff68d55d84bb95def"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "8ffa641efef441205995d406b07354d230ef99a1", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0538d42cdd68f6b65d72ed7768f1d00ba44f8631/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0538d42cdd68f6b65d72ed7768f1d00ba44f8631/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=0538d42cdd68f6b65d72ed7768f1d00ba44f8631", "patch": "@@ -4838,8 +4838,8 @@\n      movddup is available.  */\n   if (REG_P (operands[1]))\n     {\n-      if (!TARGET_SSE3\n-\t  && REGNO (operands[0]) != REGNO (operands[1]))\n+      if ((!TARGET_SSE3 && REGNO (operands[0]) != REGNO (operands[1]))\n+\t  || (EXT_REX_SSE_REG_P (operands[1]) && !TARGET_AVX512VL))\n \t{\n \t  rtx tmp = lowpart_subreg (DFmode, operands[0], SFmode);\n \t  emit_move_insn (tmp, operands[1]);"}, {"sha": "7a6eb260e41d10a69fe8b805b7c13d8954414ba0", "filename": "gcc/testsuite/gcc.target/i386/pr104502.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0538d42cdd68f6b65d72ed7768f1d00ba44f8631/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104502.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0538d42cdd68f6b65d72ed7768f1d00ba44f8631/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104502.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104502.c?ref=0538d42cdd68f6b65d72ed7768f1d00ba44f8631", "patch": "@@ -0,0 +1,31 @@\n+/* PR target/104502 */\n+/* { dg-do compile { target fstack_protector } } */\n+/* { dg-options \"-O -flive-range-shrinkage -march=barcelona -fstack-protector-all -mavx512f\" } */\n+\n+typedef char __attribute__((__vector_size__ (8))) U;\n+typedef int __attribute__((__vector_size__ (8))) A;\n+typedef int __attribute__((__vector_size__ (16))) B;\n+typedef int __attribute__((__vector_size__ (32))) C;\n+typedef int __attribute__((__vector_size__ (64))) D;\n+typedef __float128 __attribute__((__vector_size__ (32))) F;\n+\n+char s;\n+U u;\n+A a;\n+int i;\n+C c;\n+double d;\n+\n+U\n+foo (U u0, A a0, B b0, B b1, C c0, C c1, C c2, C c3, A a1, A a2, F f0)\n+{\n+  C ca = c |= (short) (float) d;\n+  C cb = c0 + c1 + c2 + c3 + ca + (C) f0;\n+  U ua = s << (u & 4);\n+  B ba = ((union {C a; B b;}) cb).b + b0 + b1;\n+  U ub = ((union {B a; U b;}) ba).b +\n+    u0 + u + ua + (U) a + (U) a + (U) a0 + (U) a1 + (U) a2;\n+  long long u64_r = i + d;\n+  char u8_r = u64_r;\n+  return ub + u8_r;\n+}"}]}