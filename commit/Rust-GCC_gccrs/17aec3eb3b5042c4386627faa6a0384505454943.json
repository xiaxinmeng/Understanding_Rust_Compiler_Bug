{"sha": "17aec3eb3b5042c4386627faa6a0384505454943", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdhZWMzZWIzYjUwNDJjNDM4NjYyN2ZhYTZhMDM4NDUwNTQ1NDk0Mw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-03-27T01:26:18Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-03-27T01:26:18Z"}, "message": "c-convert.c (convert): Return if output or input type is ERROR_MARK.\n\n\t* c-convert.c (convert): Return if output or input type is ERROR_MARK.\n\t* c-decl.c (duplicate_decls): Only look at DECL_BUILT_IN_NONANSI\n\tand DECL_INLINE if FUNCTION_DECL.\n\t(pushdecl, redeclaration_error_message): Likewise, for DECL_INLINE.\n\t(store_parm_decls): Check for type of PARM_DECL being ERROR_MARK.\n\tUse DECL_WEAK, not DECL_RESULT, to flag for already seen.\n\t(combine_parm_decls): Likewise.\n\t* ggc-common.c (gcc_mark_tree_children, case 'd'): Use DECL_RESULT_FLD.\n\t* print-tree.c (print_node): Likewise.\n\tOnly test DECL_PACKED, DECL_INLINE, DECL_BIT_FIELD, and\n\tDECL_TRANSPARENT_UNION on proper decl types.\n\tProperly handly DECL_INCOMING_RTL and DECL_SAVED_INSNS.\n\t* stor-layout.c (layout_decl): Only check DECL_PACKED and\n\tDECL_BIT_FIELD of FIELD_DECL.\n\t* tree.h (DECL_RESULT_FLD): New macro.\n\t* cp/class.c (check_field_decl): Fix typo.\n\t(build_vtbl_or_vbase_field): Don't clear DECL_SAVED_INSNS.\n\t(check_methods): Likewise.\n\t(check_field_decls): Likewise.\n\tUse DECL_CONTEXT, not DECL_FIELD_CONTEXT.\n\t* cp-tree.h (DECL_SHADOWED_FOR_VAR, DECL_TEMPLATE_RESULT):\n\tUse DECL_RESULT_FLD, not DECL_RESULT.\n\t* cp/decl.c (xref_tag): Use DECL_TEMPLATE_RESULT.\n\t* cp/lex.c (identifier_type): Likewise.\n\t* cp/pt.c (determine_specialization, lookup_template_class): Likewise.\n\t(tsubst_friend_function, tsubst_decl, instantiate_template): Likewise.\n\t(resolve_overloaded_unification, more_specialized): Likewise.\n\t* cp/semantics.c (finish_member_declaration): Likewise.\n\t* cp/typeck.c (build_x_function_call): Likewise.\n\nFrom-SVN: r32759", "tree": {"sha": "c6019b3d538ef251492309184ce35cc036ed6ae6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6019b3d538ef251492309184ce35cc036ed6ae6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17aec3eb3b5042c4386627faa6a0384505454943", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17aec3eb3b5042c4386627faa6a0384505454943", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17aec3eb3b5042c4386627faa6a0384505454943", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17aec3eb3b5042c4386627faa6a0384505454943/comments", "author": null, "committer": null, "parents": [{"sha": "b06775f990ad9fdc378388df18bbebf7d03ef9e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b06775f990ad9fdc378388df18bbebf7d03ef9e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b06775f990ad9fdc378388df18bbebf7d03ef9e3"}], "stats": {"total": 240, "additions": 146, "deletions": 94}, "files": [{"sha": "21f3b19b1b18d5c240576840c12f21af17cc968d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17aec3eb3b5042c4386627faa6a0384505454943", "patch": "@@ -1,3 +1,21 @@\n+Sun Mar 26 20:15:26 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* c-convert.c (convert): Return if output or input type is ERROR_MARK.\n+\t* c-decl.c (duplicate_decls): Only look at DECL_BUILT_IN_NONANSI\n+\tand DECL_INLINE if FUNCTION_DECL.\n+\t(pushdecl, redeclaration_error_message): Likewise, for DECL_INLINE.\n+\t(store_parm_decls): Check for type of PARM_DECL being ERROR_MARK.\n+\tUse DECL_WEAK, not DECL_RESULT, to flag for already seen.\n+\t(combine_parm_decls): Likewise.\n+\t* ggc-common.c (gcc_mark_tree_children, case 'd'): Use DECL_RESULT_FLD.\n+\t* print-tree.c (print_node): Likewise.\n+\tOnly test DECL_PACKED, DECL_INLINE, DECL_BIT_FIELD, and\n+\tDECL_TRANSPARENT_UNION on proper decl types.\n+\tProperly handly DECL_INCOMING_RTL and DECL_SAVED_INSNS.\n+\t* stor-layout.c (layout_decl): Only check DECL_PACKED and\n+\tDECL_BIT_FIELD of FIELD_DECL.\n+\t* tree.h (DECL_RESULT_FLD): New macro.\n+\t\n 2000-03-26  Richard Henderson  <rth@cygnus.com>\n \n \t* calls.c (expand_call): Pass parms not original exp to"}, {"sha": "b3b144d6a8bc618bf85fd7f8371f090f4e58f80d", "filename": "gcc/c-convert.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Fc-convert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Fc-convert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-convert.c?ref=17aec3eb3b5042c4386627faa6a0384505454943", "patch": "@@ -65,8 +65,10 @@ convert (type, expr)\n   register enum tree_code code = TREE_CODE (type);\n \n   if (type == TREE_TYPE (expr)\n-      || TREE_CODE (expr) == ERROR_MARK)\n+      || TREE_CODE (expr) == ERROR_MARK\n+      || code == ERROR_MARK || TREE_CODE (TREE_TYPE (expr)) == ERROR_MARK)\n     return expr;\n+\n   if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (TREE_TYPE (expr)))\n     return fold (build1 (NOP_EXPR, type, expr));\n   if (TREE_CODE (TREE_TYPE (expr)) == ERROR_MARK)"}, {"sha": "df1d707fa6cfb3c1c73e7b0867fa293e2b7def5e", "filename": "gcc/c-decl.c", "status": "modified", "additions": 36, "deletions": 29, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=17aec3eb3b5042c4386627faa6a0384505454943", "patch": "@@ -1805,11 +1805,14 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n       DECL_RTL (newdecl) = DECL_RTL (olddecl);\n \n       /* Merge the type qualifiers.  */\n-      if (DECL_BUILT_IN_NONANSI (olddecl) && TREE_THIS_VOLATILE (olddecl)\n-\t  && !TREE_THIS_VOLATILE (newdecl))\n+      if (TREE_CODE (olddecl) == FUNCTION_DECL\n+\t  && DECL_BUILT_IN_NONANSI (olddecl) && TREE_THIS_VOLATILE (olddecl)\n+\t  && ! TREE_THIS_VOLATILE (newdecl))\n \tTREE_THIS_VOLATILE (write_olddecl) = 0;\n+\n       if (TREE_READONLY (newdecl))\n \tTREE_READONLY (write_olddecl) = 1;\n+\n       if (TREE_THIS_VOLATILE (newdecl))\n \t{\n \t  TREE_THIS_VOLATILE (write_olddecl) = 1;\n@@ -1904,14 +1907,15 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n       TREE_PUBLIC (olddecl) = TREE_PUBLIC (newdecl);\n     }\n \n-  /* If either decl says `inline', this fn is inline,\n-     unless its definition was passed already.  */\n-  if (DECL_INLINE (newdecl) && DECL_INITIAL (olddecl) == 0)\n-    DECL_INLINE (olddecl) = 1;\n-  DECL_INLINE (newdecl) = DECL_INLINE (olddecl);\n-\n   if (TREE_CODE (newdecl) == FUNCTION_DECL)\n     {\n+      /* If either decl says `inline', this fn is inline,\n+\t unless its definition was passed already.  */\n+      if (DECL_INLINE (newdecl) && DECL_INITIAL (olddecl) == 0)\n+\tDECL_INLINE (olddecl) = 1;\n+\n+      DECL_INLINE (newdecl) = DECL_INLINE (olddecl);\n+\n       if (DECL_BUILT_IN (olddecl))\n \t{\n \t  /* Get rid of any built-in function if new arg types don't match it\n@@ -2145,7 +2149,8 @@ pushdecl (x)\n \n \t We get warnings about inline functions where they are defined.\n \t Avoid duplicate warnings where they are used.  */\n-      if (TREE_PUBLIC (x) && ! DECL_INLINE (x))\n+      if (TREE_PUBLIC (x)\n+\t  && ! (TREE_CODE (x) == FUNCTION_DECL && DECL_INLINE (x)))\n \t{\n \t  tree decl;\n \n@@ -2282,15 +2287,16 @@ pushdecl (x)\n \t  /* Here to install a non-global value.  */\n \t  tree oldlocal = IDENTIFIER_LOCAL_VALUE (name);\n \t  tree oldglobal = IDENTIFIER_GLOBAL_VALUE (name);\n+\n \t  IDENTIFIER_LOCAL_VALUE (name) = x;\n \n \t  /* If this is an extern function declaration, see if we\n \t     have a global definition or declaration for the function.  */\n \t  if (oldlocal == 0\n-\t      && DECL_EXTERNAL (x) && !DECL_INLINE (x)\n \t      && oldglobal != 0\n \t      && TREE_CODE (x) == FUNCTION_DECL\n-\t      && TREE_CODE (oldglobal) == FUNCTION_DECL)\n+\t      && TREE_CODE (oldglobal) == FUNCTION_DECL\n+\t      && DECL_EXTERNAL (x) && ! DECL_INLINE (x))\n \t    {\n \t      /* We have one.  Their types must agree.  */\n \t      if (! comptypes (TREE_TYPE (x),\n@@ -2537,8 +2543,8 @@ redeclaration_error_message (newdecl, olddecl)\n       if (DECL_INITIAL (olddecl) != 0 && DECL_INITIAL (newdecl) != 0\n \t  /* However, defining once as extern inline and a second\n \t     time in another way is ok.  */\n-\t  && !(DECL_INLINE (olddecl) && DECL_EXTERNAL (olddecl)\n-\t       && !(DECL_INLINE (newdecl) && DECL_EXTERNAL (newdecl))))\n+\t  && ! (DECL_INLINE (olddecl) && DECL_EXTERNAL (olddecl)\n+\t       && ! (DECL_INLINE (newdecl) && DECL_EXTERNAL (newdecl))))\n \treturn 1;\n       return 0;\n     }\n@@ -5932,7 +5938,9 @@ store_parm_decls ()\n \t    {\n \t      if (DECL_NAME (parm) == 0)\n \t\terror_with_decl (parm, \"parameter name omitted\");\n-\t      else if (TYPE_MAIN_VARIANT (TREE_TYPE (parm)) == void_type_node)\n+\t      else if (TREE_CODE (TREE_TYPE (parm)) != ERROR_MARK\n+\t\t       && (TYPE_MAIN_VARIANT (TREE_TYPE (parm))\n+\t\t\t   == void_type_node))\n \t\t{\n \t\t  error_with_decl (parm, \"parameter `%s' declared void\");\n \t\t  /* Change the type to error_mark_node so this parameter\n@@ -5999,16 +6007,19 @@ store_parm_decls ()\n \t Associate decls with the names and store the decls\n \t into the TREE_PURPOSE slots.  */\n \n+      /* We use DECL_WEAK as a flag to show which parameters have been\n+\t seen already since it is not used on PARM_DECL or CONST_DECL.  */\n       for (parm = parmdecls; parm; parm = TREE_CHAIN (parm))\n-\tDECL_RESULT (parm) = 0;\n+\tDECL_WEAK (parm) = 0;\n \n       for (parm = specparms; parm; parm = TREE_CHAIN (parm))\n \t{\n \t  register tree tail, found = NULL;\n \n \t  if (TREE_VALUE (parm) == 0)\n \t    {\n-\t      error_with_decl (fndecl, \"parameter name missing from parameter list\");\n+\t      error_with_decl (fndecl,\n+\t\t\t       \"parameter name missing from parameter list\");\n \t      TREE_PURPOSE (parm) = 0;\n \t      continue;\n \t    }\n@@ -6025,7 +6036,7 @@ store_parm_decls ()\n \n \t  /* If declaration already marked, we have a duplicate name.\n \t     Complain, and don't use this decl twice.   */\n-\t  if (found && DECL_RESULT (found) != 0)\n+\t  if (found && DECL_WEAK (found))\n \t    {\n \t      error_with_decl (found, \"multiple parameters named `%s'\");\n \t      found = 0;\n@@ -6064,10 +6075,8 @@ store_parm_decls ()\n \n \t  TREE_PURPOSE (parm) = found;\n \n-\t  /* Mark this decl as \"already found\" -- see test, above.\n-\t     It is safe to use DECL_RESULT for this\n-\t     since it is not used in PARM_DECLs or CONST_DECLs.  */\n-\t  DECL_RESULT (found) = error_mark_node;\n+\t  /* Mark this decl as \"already found\" */\n+\t  DECL_WEAK (found) = 1;\n \t}\n \n       /* Put anything which is on the parmdecls chain and which is\n@@ -6093,7 +6102,7 @@ store_parm_decls ()\n \t          TREE_TYPE (parm) = error_mark_node;\n \t        }\n \n-\t      if (DECL_RESULT (parm) == 0)\n+\t      if (! DECL_WEAK (parm))\n \t        {\n \t          error_with_decl (parm,\n \t\t\t           \"declaration for parameter `%s' but no such parameter\");\n@@ -6309,7 +6318,7 @@ combine_parm_decls (specparms, parmlist, void_at_end)\n   tree types = 0;\n \n   for (parm = parmdecls; parm; parm = TREE_CHAIN (parm))\n-    DECL_RESULT (parm) = 0;\n+    DECL_WEAK (parm) = 0;\n \n   for (parm = specparms; parm; parm = TREE_CHAIN (parm))\n     {\n@@ -6325,7 +6334,7 @@ combine_parm_decls (specparms, parmlist, void_at_end)\n \n       /* If declaration already marked, we have a duplicate name.\n \t Complain, and don't use this decl twice.   */\n-      if (found && DECL_RESULT (found) != 0)\n+      if (found && DECL_WEAK (found))\n \t{\n \t  error_with_decl (found, \"multiple parameters named `%s'\");\n \t  found = 0;\n@@ -6363,10 +6372,8 @@ combine_parm_decls (specparms, parmlist, void_at_end)\n \n       TREE_PURPOSE (parm) = found;\n \n-      /* Mark this decl as \"already found\" -- see test, above.\n-\t It is safe to use DECL_RESULT for this\n-\t since it is not used in PARM_DECLs or CONST_DECLs.  */\n-      DECL_RESULT (found) = error_mark_node;\n+      /* Mark this decl as \"already found\".  */\n+      DECL_WEAK (found) = 1;\n     }\n \n   /* Complain about any actual PARM_DECLs not matched with any names.  */\n@@ -6383,7 +6390,7 @@ combine_parm_decls (specparms, parmlist, void_at_end)\n \t  TREE_TYPE (parm) = error_mark_node;\n \t}\n \n-      if (DECL_RESULT (parm) == 0)\n+      if (! DECL_WEAK (parm))\n \t{\n \t  error_with_decl (parm,\n \t\t\t   \"declaration for parameter `%s' but no such parameter\");"}, {"sha": "f53dd40f12e9aa5a43df900e32cace7d9daa8466", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=17aec3eb3b5042c4386627faa6a0384505454943", "patch": "@@ -1,3 +1,20 @@\n+Sun Mar 26 20:15:26 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* class.c (check_field_decl): Fix typo.\n+\t(build_vtbl_or_vbase_field): Don't clear DECL_SAVED_INSNS.\n+\t(check_methods): Likewise.\n+\t(check_field_decls): Likewise.\n+\tUse DECL_CONTEXT, not DECL_FIELD_CONTEXT.\n+\t* cp-tree.h (DECL_SHADOWED_FOR_VAR, DECL_TEMPLATE_RESULT):\n+\tUse DECL_RESULT_FLD, not DECL_RESULT.\n+\t* decl.c (xref_tag): Use DECL_TEMPLATE_RESULT.\n+\t* lex.c (identifier_type): Likewise.\n+\t* pt.c (determine_specialization, lookup_template_class): Likewise.\n+\t(tsubst_friend_function, tsubst_decl, instantiate_template): Likewise.\n+\t(resolve_overloaded_unification, more_specialized): Likewise.\n+\t* semantics.c (finish_member_declaration): Likewise.\n+\t* typeck.c (build_x_function_call): Likewise.\n+\t\n 2000-03-26  Mark Mitchell  <mark@codesourcery.com>\n \n \t* class.c (layout_empty_base): Handle empty bases with non-byte"}, {"sha": "1e48e89427e79f67b24c693fbacf712798b2f54c", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=17aec3eb3b5042c4386627faa6a0384505454943", "patch": "@@ -3758,7 +3758,7 @@ check_field_decl (field, t, cant_have_const_ctor,\n       tree fields;\n \n       for (fields = TYPE_FIELDS (type); fields; fields = TREE_CHAIN (fields))\n-\tif (TREE_CODE (field) == FIELD_DECL && !DECL_C_BIT_FIELD (field))\n+\tif (TREE_CODE (fields) == FIELD_DECL && !DECL_C_BIT_FIELD (field))\n \t  check_field_decl (fields, t, cant_have_const_ctor,\n \t\t\t    cant_have_default_ctor, no_const_asn_ref,\n \t\t\t    any_default_members);\n@@ -3922,7 +3922,7 @@ check_field_decls (t, access_decls, empty_p,\n       /* If we've gotten this far, it's a data member, possibly static,\n \t or an enumerator.  */\n \n-      DECL_FIELD_CONTEXT (x) = t;\n+      DECL_CONTEXT (x) = t;\n \n       /* ``A local class cannot have static data members.'' ARM 9.4 */\n       if (current_function_decl && TREE_STATIC (x))\n@@ -3953,8 +3953,6 @@ check_field_decls (t, access_decls, empty_p,\n       if (type == error_mark_node)\n \tcontinue;\n \t  \n-      DECL_SAVED_INSNS (x) = 0;\n-\n       /* When this goes into scope, it will be a non-local reference.  */\n       DECL_NONLOCAL (x) = 1;\n \n@@ -4110,7 +4108,6 @@ build_vtbl_or_vbase_field (name, assembler_name, type, class_type, fcontext,\n   DECL_ARTIFICIAL (field) = 1;\n   DECL_FIELD_CONTEXT (field) = class_type;\n   DECL_FCONTEXT (field) = fcontext;\n-  DECL_SAVED_INSNS (field) = 0;\n   DECL_ALIGN (field) = TYPE_ALIGN (type);\n \n   /* Return it.  */\n@@ -4447,7 +4444,6 @@ check_methods (t)\n       if (IDENTIFIER_ERROR_LOCUS (DECL_ASSEMBLER_NAME (x)))\n \tcontinue;\n \n-      DECL_SAVED_INSNS (x) = 0;\n       check_for_override (x, t);\n       if (DECL_PURE_VIRTUAL_P (x) && ! DECL_VINDEX (x))\n \tcp_error_at (\"initializer specified for non-virtual method `%D'\", x);"}, {"sha": "57c711fbe10b9dde1deb4e1b5c66b728cac5acf5", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=17aec3eb3b5042c4386627faa6a0384505454943", "patch": "@@ -2091,7 +2091,7 @@ struct lang_decl\n \n /* In a VAR_DECL for a variable declared in a for statement,\n    this is the shadowed (local) variable.  */\n-#define DECL_SHADOWED_FOR_VAR(NODE) DECL_RESULT(VAR_DECL_CHECK (NODE))\n+#define DECL_SHADOWED_FOR_VAR(NODE) DECL_RESULT_FLD(VAR_DECL_CHECK (NODE))\n \n /* Points back to the decl which caused this lang_decl to be allocated.  */\n #define DECL_MAIN_VARIANT(NODE) (DECL_LANG_SPECIFIC(NODE)->main_decl_variant)\n@@ -2709,7 +2709,7 @@ extern int flag_new_for_scope;\n #define DECL_NTPARMS(NODE) \\\n    TREE_VEC_LENGTH (DECL_INNERMOST_TEMPLATE_PARMS (NODE))\n /* For function, method, class-data templates.  */\n-#define DECL_TEMPLATE_RESULT(NODE)      DECL_RESULT(NODE)\n+#define DECL_TEMPLATE_RESULT(NODE)      DECL_RESULT_FLD(NODE)\n /* For a static member variable template, the\n    DECL_TEMPLATE_INSTANTIATIONS list contains the explicitly and\n    implicitly generated instantiations of the variable.  There are no"}, {"sha": "b779b7da08048a3b799de87d49d3d6f10b64d8b3", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=17aec3eb3b5042c4386627faa6a0384505454943", "patch": "@@ -4051,12 +4051,12 @@ pushdecl (x)\n \t  if (oldlocal)\n \t    {\n \t      tree d = oldlocal;\n+\n \t      while (oldlocal\n \t\t     && TREE_CODE (oldlocal) == VAR_DECL\n \t\t     && DECL_DEAD_FOR_LOCAL (oldlocal))\n-\t\t{\n-\t\t  oldlocal = DECL_SHADOWED_FOR_VAR (oldlocal);\n-\t\t}\n+\t\toldlocal = DECL_SHADOWED_FOR_VAR (oldlocal);\n+\n \t      if (oldlocal == NULL_TREE)\n \t\toldlocal = IDENTIFIER_NAMESPACE_VALUE (DECL_NAME (d));\n \t    }\n@@ -4452,8 +4452,8 @@ push_using_directive (used)\n    want to be referenced by that name.  It is then up to the users of\n    that name to decide what to do with that list.\n \n-   DECL may also be a TEMPLATE_DECL, with a FUNCTION_DECL in its DECL_RESULT\n-   slot.  It is dealt with the same way.\n+   DECL may also be a TEMPLATE_DECL, with a FUNCTION_DECL in its\n+   DECL_TEMPLATE_RESULT.  It is dealt with the same way.\n \n    FLAGS is a bitwise-or of the following values:\n      PUSH_LOCAL: Bind DECL in the current scope, rather than at\n@@ -12436,7 +12436,7 @@ xref_tag (code_type_node, name, globalize)\n \t      && template_class_depth (current_class_type) == 0)\n \t    /* Since GLOBALIZE is true, we're declaring a global\n \t       template, so we want this type.  */\n-\t    ref = DECL_RESULT (ref);\n+\t    ref = DECL_TEMPLATE_RESULT (ref);\n \n \t  if (ref && TREE_CODE (ref) == TYPE_DECL\n \t      && TREE_CODE (TREE_TYPE (ref)) == code)"}, {"sha": "bc329d8ed9c4b1b3f86ef2dd9fa4ddced297af70", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=17aec3eb3b5042c4386627faa6a0384505454943", "patch": "@@ -3344,9 +3344,10 @@ identifier_type (decl)\n      tree decl;\n {\n   tree t;\n+\n   if (TREE_CODE (decl) == TEMPLATE_DECL)\n     {\n-      if (TREE_CODE (DECL_RESULT (decl)) == TYPE_DECL)\n+      if (TREE_CODE (DECL_TEMPLATE_RESULT (decl)) == TYPE_DECL)\n \treturn PTYPENAME;\n       else if (looking_for_template) \n \treturn PFUNCNAME;"}, {"sha": "bd4ec4e005b04f6f861153602f5639a9c4505866", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=17aec3eb3b5042c4386627faa6a0384505454943", "patch": "@@ -1105,7 +1105,7 @@ determine_specialization (template_id, decl, targs_out,\n     }\n \n   /* It was a specialization of a template.  */\n-  targs = DECL_TI_ARGS (DECL_RESULT (TREE_VALUE (templates)));\n+  targs = DECL_TI_ARGS (DECL_TEMPLATE_RESULT (TREE_VALUE (templates)));\n   if (TMPL_ARGS_HAVE_MULTIPLE_LEVELS (targs))\n     {\n       *targs_out = copy_node (targs);\n@@ -3699,7 +3699,7 @@ lookup_template_class (d1, arglist, in_decl, context, entering_scope)\n       d1 = DECL_NAME (template);\n     }\n   else if (TREE_CODE (d1) == TEMPLATE_DECL\n-\t   && TREE_CODE (DECL_RESULT (d1)) == TYPE_DECL)\n+\t   && TREE_CODE (DECL_TEMPLATE_RESULT (d1)) == TYPE_DECL)\n     {\n       template = d1;\n       d1 = DECL_NAME (template);\n@@ -4460,9 +4460,9 @@ tsubst_friend_function (decl, args)\n \t  DECL_PRIMARY_TEMPLATE (new_friend) = new_friend;\n \t  \n \t  new_friend_is_defn \n-\t    = DECL_INITIAL (DECL_RESULT (new_friend)) != NULL_TREE;\n+\t    = DECL_INITIAL (DECL_TEMPLATE_RESULT (new_friend)) != NULL_TREE;\n \t  new_friend_result_template_info\n-\t    = DECL_TEMPLATE_INFO (DECL_RESULT (new_friend));\n+\t    = DECL_TEMPLATE_INFO (DECL_TEMPLATE_RESULT (new_friend));\n \t}\n       else\n \t{\n@@ -4535,7 +4535,7 @@ tsubst_friend_function (decl, args)\n \t\t  tree t;\n \t\t  tree new_friend_args;\n \n-\t\t  DECL_TEMPLATE_INFO (DECL_RESULT (old_decl)) \n+\t\t  DECL_TEMPLATE_INFO (DECL_TEMPLATE_RESULT (old_decl)) \n \t\t    = new_friend_result_template_info;\n \t\t    \n \t\t  new_friend_args = TI_ARGS (new_friend_template_info);\n@@ -5416,7 +5416,7 @@ tsubst_decl (t, args, type, in_decl)\n \t       plus the innermost args from the template decl.  */\n \t    tree tmpl_args = DECL_CLASS_TEMPLATE_P (t) \n \t      ? CLASSTYPE_TI_ARGS (TREE_TYPE (t))\n-\t      : DECL_TI_ARGS (DECL_RESULT (t));\n+\t      : DECL_TI_ARGS (DECL_TEMPLATE_RESULT (t));\n \t    tree full_args;\n \t    \n \t    full_args = tsubst_template_arg_vector (tmpl_args, args,\n@@ -5448,7 +5448,7 @@ tsubst_decl (t, args, type, in_decl)\n \tif (is_template_template_parm)\n \t  {\n \t    tree new_decl = tsubst (decl, args, /*complain=*/1, in_decl);\n-\t    DECL_RESULT (r) = new_decl;\n+\t    DECL_TEMPLATE_RESULT (r) = new_decl;\n \t    TREE_TYPE (r) = TREE_TYPE (new_decl);\n \t    break;\n \t  }\n@@ -5469,13 +5469,14 @@ tsubst_decl (t, args, type, in_decl)\n \t\t\t\t    /*complain=*/1, in_decl);\n \t    TREE_TYPE (r) = new_type;\n \t    CLASSTYPE_TI_TEMPLATE (new_type) = r;\n-\t    DECL_RESULT (r) = TYPE_MAIN_DECL (new_type);\n+\t    DECL_TEMPLATE_RESULT (r) = TYPE_MAIN_DECL (new_type);\n \t    DECL_TI_ARGS (r) = CLASSTYPE_TI_ARGS (new_type);\n \t  }\n \telse\n \t  {\n \t    tree new_decl = tsubst (decl, args, /*complain=*/1, in_decl);\n-\t    DECL_RESULT (r) = new_decl;\n+\n+\t    DECL_TEMPLATE_RESULT (r) = new_decl;\n \t    DECL_TI_TEMPLATE (new_decl) = r;\n \t    TREE_TYPE (r) = TREE_TYPE (new_decl);\n \t    DECL_TI_ARGS (r) = DECL_TI_ARGS (new_decl);\n@@ -5546,16 +5547,17 @@ tsubst_decl (t, args, type, in_decl)\n \n \t    spec_args = tsubst (DECL_TI_ARGS (fn), args,\n \t\t\t\t/*complain=*/1, in_decl); \n-\t    new_fn = tsubst (DECL_RESULT (most_general_template (fn)), \n-\t\t\t     spec_args, /*complain=*/1, in_decl); \n+\t    new_fn\n+\t      = tsubst (DECL_TEMPLATE_RESULT (most_general_template (fn)), \n+\t\t\tspec_args, /*complain=*/1, in_decl); \n \t    DECL_TI_TEMPLATE (new_fn) = fn;\n \t    register_specialization (new_fn, r, \n \t\t\t\t     innermost_args (spec_args));\n \t  }\n \n \t/* Record this partial instantiation.  */\n \tregister_specialization (r, t, \n-\t\t\t\t DECL_TI_ARGS (DECL_RESULT (r)));\n+\t\t\t\t DECL_TI_ARGS (DECL_TEMPLATE_RESULT (r)));\n \n       }\n       break;\n@@ -5699,7 +5701,7 @@ tsubst_decl (t, args, type, in_decl)\n \tDECL_ARGUMENTS (r) = tsubst (DECL_ARGUMENTS (t), args,\n \t\t\t\t     /*complain=*/1, t);\n \tDECL_MAIN_VARIANT (r) = r;\n-\tDECL_RESULT (r) = NULL_TREE;\n+\tDECL_TEMPLATE_RESULT (r) = NULL_TREE;\n \n \tTREE_STATIC (r) = 0;\n \tTREE_PUBLIC (r) = TREE_PUBLIC (t);\n@@ -7434,7 +7436,8 @@ instantiate_template (tmpl, targ_ptr)\n     }\n \n   /* substitute template parameters */\n-  fndecl = tsubst (DECL_RESULT (gen_tmpl), targ_ptr, /*complain=*/1, gen_tmpl);\n+  fndecl = tsubst (DECL_TEMPLATE_RESULT (gen_tmpl),\n+\t\t   targ_ptr, /*complain=*/1, gen_tmpl);\n   /* The DECL_TI_TEMPLATE should always be the immediate parent\n      template, not the most general template.  */\n   DECL_TI_TEMPLATE (fndecl) = tmpl;\n@@ -7860,7 +7863,8 @@ resolve_overloaded_unification (tparms, targs, parm, arg, strict,\n \t  if (TREE_CODE (fn) != TEMPLATE_DECL)\n \t    continue;\n \n-\t  subargs = get_bindings_overload (fn, DECL_RESULT (fn), expl_subargs);\n+\t  subargs = get_bindings_overload (fn, DECL_TEMPLATE_RESULT (fn),\n+\t\t\t\t\t   expl_subargs);\n \t  if (subargs)\n \t    {\n \t      elem = tsubst (TREE_TYPE (fn), subargs, /*complain=*/0,\n@@ -8701,11 +8705,13 @@ more_specialized (pat1, pat2, explicit_args)\n   tree targs;\n   int winner = 0;\n \n-  targs = get_bindings_overload (pat1, DECL_RESULT (pat2), explicit_args);\n+  targs\n+    = get_bindings_overload (pat1, DECL_TEMPLATE_RESULT (pat2), explicit_args);\n   if (targs)\n     --winner;\n \n-  targs = get_bindings_overload (pat2, DECL_RESULT (pat1), explicit_args);\n+  targs\n+    = get_bindings_overload (pat2, DECL_TEMPLATE_RESULT (pat1), explicit_args);\n   if (targs)\n     ++winner;\n "}, {"sha": "08d7774eb172ee1f106c78fff1f7f42a740e6877", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=17aec3eb3b5042c4386627faa6a0384505454943", "patch": "@@ -1990,8 +1990,8 @@ finish_member_declaration (decl)\n     = (current_access_specifier == access_protected_node);\n   if (TREE_CODE (decl) == TEMPLATE_DECL)\n     {\n-      TREE_PRIVATE (DECL_RESULT (decl)) = TREE_PRIVATE (decl);\n-      TREE_PROTECTED (DECL_RESULT (decl)) = TREE_PROTECTED (decl);\n+      TREE_PRIVATE (DECL_TEMPLATE_RESULT (decl)) = TREE_PRIVATE (decl);\n+      TREE_PROTECTED (DECL_TEMPLATE_RESULT (decl)) = TREE_PROTECTED (decl);\n     }\n \n   /* Mark the DECL as a member of the current class.  */"}, {"sha": "522bc5783984d613d28ebafe286acaddbb87d6bb", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=17aec3eb3b5042c4386627faa6a0384505454943", "patch": "@@ -2577,11 +2577,11 @@ build_x_function_call (function, params, decl)\n   if ((TREE_CODE (function) == FUNCTION_DECL\n        && DECL_STATIC_FUNCTION_P (function))\n       || (TREE_CODE (function) == TEMPLATE_DECL\n-\t  && DECL_STATIC_FUNCTION_P (DECL_RESULT (function))))\n-      return build_member_call(DECL_CONTEXT (function), \n-\t\t\t       template_id \n-\t\t\t       ? template_id : DECL_NAME (function), \n-\t\t\t       params);\n+\t  && DECL_STATIC_FUNCTION_P (DECL_TEMPLATE_RESULT (function))))\n+      return build_member_call (DECL_CONTEXT (function), \n+\t\t\t\ttemplate_id \n+\t\t\t\t? template_id : DECL_NAME (function), \n+\t\t\t\tparams);\n \n   is_method = ((TREE_CODE (function) == TREE_LIST\n \t\t&& current_class_type != NULL_TREE"}, {"sha": "b73a359c5673098fe02e82d765165dcb9cc9aa25", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=17aec3eb3b5042c4386627faa6a0384505454943", "patch": "@@ -386,7 +386,7 @@ ggc_mark_tree_children (t)\n       ggc_mark_tree (DECL_NAME (t));\n       ggc_mark_tree (DECL_CONTEXT (t));\n       ggc_mark_tree (DECL_ARGUMENTS (t));\n-      ggc_mark_tree (DECL_RESULT (t));\n+      ggc_mark_tree (DECL_RESULT_FLD (t));\n       ggc_mark_tree (DECL_INITIAL (t));\n       ggc_mark_tree (DECL_ABSTRACT_ORIGIN (t));\n       ggc_mark_tree (DECL_ASSEMBLER_NAME (t));"}, {"sha": "6439423c89cdca73cc5b138da10470aa6e753175", "filename": "gcc/print-tree.c", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=17aec3eb3b5042c4386627faa6a0384505454943", "patch": "@@ -347,34 +347,37 @@ print_node (file, prefix, node, indent)\n \tfputs (\" external\", file);\n       if (DECL_REGISTER (node))\n \tfputs (\" regdecl\", file);\n-      if (DECL_PACKED (node))\n-\tfputs (\" packed\", file);\n       if (DECL_NONLOCAL (node))\n \tfputs (\" nonlocal\", file);\n-      if (DECL_INLINE (node))\n-\tfputs (\" inline\", file);\n \n       if (TREE_CODE (node) == TYPE_DECL && TYPE_DECL_SUPPRESS_DEBUG (node))\n \tfputs (\" suppress-debug\", file);\n \n+      if (TREE_CODE (node) == FUNCTION_DECL && DECL_INLINE (node))\n+\tfputs (\" inline\", file);\n       if (TREE_CODE (node) == FUNCTION_DECL && DECL_BUILT_IN (node))\n \tfputs (\" built-in\", file);\n       if (TREE_CODE (node) == FUNCTION_DECL && DECL_BUILT_IN_NONANSI (node))\n \tfputs (\" built-in-nonansi\", file);\n \n+      if (TREE_CODE (node) == FIELD_DECL && DECL_PACKED (node))\n+\tfputs (\" packed\", file);\n       if (TREE_CODE (node) == FIELD_DECL && DECL_BIT_FIELD (node))\n \tfputs (\" bit-field\", file);\n+\n       if (TREE_CODE (node) == LABEL_DECL && DECL_TOO_LATE (node))\n \tfputs (\" too-late\", file);\n+\n       if (TREE_CODE (node) == VAR_DECL && DECL_IN_TEXT_SECTION (node))\n \tfputs (\" in-text-section\", file);\n \n+      if (TREE_CODE (node) == PARM_DECL && DECL_TRANSPARENT_UNION (node))\n+\tfputs (\" transparent-union\", file);\n+\n       if (DECL_VIRTUAL_P (node))\n \tfputs (\" virtual\", file);\n       if (DECL_DEFER_OUTPUT (node))\n \tfputs (\" defer-output\", file);\n-      if (DECL_TRANSPARENT_UNION (node))\n-\tfputs (\" transparent-union\", file);\n \n       if (DECL_LANG_FLAG_0 (node))\n \tfputs (\" decl_0\", file);\n@@ -434,7 +437,7 @@ print_node (file, prefix, node, indent)\n \t\t\tDECL_ABSTRACT_ORIGIN (node), indent + 4);\n \n       print_node (file, \"arguments\", DECL_ARGUMENTS (node), indent + 4);\n-      print_node (file, \"result\", DECL_RESULT (node), indent + 4);\n+      print_node (file, \"result\", DECL_RESULT_FLD (node), indent + 4);\n       print_node_brief (file, \"initial\", DECL_INITIAL (node), indent + 4);\n \n       print_lang_decl (file, node, indent);\n@@ -445,20 +448,18 @@ print_node (file, prefix, node, indent)\n \t  print_rtl (file, DECL_RTL (node));\n \t}\n \n-      if (DECL_SAVED_INSNS (node) != 0)\n+      if (TREE_CODE (node) == PARM_DECL && DECL_INCOMING_RTL (node) != 0)\n \t{\n \t  indent_to (file, indent + 4);\n-\t  if (TREE_CODE (node) == PARM_DECL)\n-\t    {\n-\t      fprintf (file, \"incoming-rtl \");\n-\t      print_rtl (file, DECL_INCOMING_RTL (node));\n-\t    }\n-\t  else if (TREE_CODE (node) == FUNCTION_DECL)\n-\t    {\n-\t      fprintf (file, \"saved-insns \");\n-\t      fprintf (file, HOST_PTR_PRINTF,\n- \t\t       (char *) DECL_SAVED_INSNS (node));\n-\t    }\n+\t  fprintf (file, \"incoming-rtl \");\n+\t  print_rtl (file, DECL_INCOMING_RTL (node));\n+\t}\n+      else if (TREE_CODE (node) == FUNCTION_DECL\n+\t       && DECL_SAVED_INSNS (node) != 0)\n+\t{\n+\t  indent_to (file, indent + 4);\n+\t  fprintf (file, \"saved-insns \");\n+\t  fprintf (file, HOST_PTR_PRINTF, (char *) DECL_SAVED_INSNS (node));\n \t}\n \n       /* Print the decl chain only if decl is at second level.  */"}, {"sha": "7621e61508e39817028fd1bdbe51a85dbd0dcd32", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=17aec3eb3b5042c4386627faa6a0384505454943", "patch": "@@ -324,9 +324,10 @@ layout_decl (decl, known_align)\n   /* Force alignment required for the data type.\n      But if the decl itself wants greater alignment, don't override that.\n      Likewise, if the decl is packed, don't override it.  */\n-  if (!(code == FIELD_DECL && DECL_BIT_FIELD (decl))\n+  if (! (code == FIELD_DECL && DECL_BIT_FIELD (decl))\n       && (DECL_ALIGN (decl) == 0\n-\t  || (! DECL_PACKED (decl) && TYPE_ALIGN (type) > DECL_ALIGN (decl))))\n+\t  || (! (code == FIELD_DECL && DECL_PACKED (decl))\n+\t      && TYPE_ALIGN (type) > DECL_ALIGN (decl))))\n     DECL_ALIGN (decl) = TYPE_ALIGN (type);\n \n   /* For fields, set the bit field type and update the alignment.  */\n@@ -342,7 +343,7 @@ layout_decl (decl, known_align)\n   /* See if we can use an ordinary integer mode for a bit-field. \n      Conditions are: a fixed size that is correct for another mode\n      and occupying a complete byte or bytes on proper boundary.  */\n-  if (DECL_BIT_FIELD (decl)\n+  if (code == FIELD_DECL && DECL_BIT_FIELD (decl)\n       && TYPE_SIZE (type) != 0\n       && TREE_CODE (TYPE_SIZE (type)) == INTEGER_CST\n       && GET_MODE_CLASS (TYPE_MODE (type)) == MODE_INT)\n@@ -360,7 +361,7 @@ layout_decl (decl, known_align)\n     }\n \n   /* Turn off DECL_BIT_FIELD if we won't need it set.  */\n-  if (DECL_BIT_FIELD (decl)\n+  if (code == FIELD_DECL && DECL_BIT_FIELD (decl)\n       && TYPE_MODE (type) == BLKmode && DECL_MODE (decl) == BLKmode\n       && known_align > TYPE_ALIGN (type)\n       && DECL_ALIGN (decl) >= TYPE_ALIGN (type)\n@@ -376,7 +377,7 @@ layout_decl (decl, known_align)\n \n   /* If requested, warn about definitions of large data objects.  */\n   if (warn_larger_than\n-      && (TREE_CODE (decl) == VAR_DECL || TREE_CODE (decl) == PARM_DECL)\n+      && (code == VAR_DECL || code == PARM_DECL)\n       && ! DECL_EXTERNAL (decl))\n     {\n       tree size = DECL_SIZE_UNIT (decl);"}, {"sha": "6f78cd6a12f3e6faed2136d1618e384e350c7301", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17aec3eb3b5042c4386627faa6a0384505454943/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=17aec3eb3b5042c4386627faa6a0384505454943", "patch": "@@ -1081,6 +1081,9 @@ struct tree_type\n /* VAR_DECL and PARM_DECL reserve the arguments slot\n    for language-specific uses.  */\n #define DECL_ARGUMENTS(NODE) (DECL_CHECK (NODE)->decl.arguments)\n+/* This field is used to reference anything in decl.result and is meant only\n+   for use by the garbage collector.  */\n+#define DECL_RESULT_FLD(NODE) (DECL_CHECK (NODE)->decl.result)\n /* In FUNCTION_DECL, holds the decl for the return value.  */\n #define DECL_RESULT(NODE) (FUNCTION_DECL_CHECK (NODE)->decl.result)\n /* For a TYPE_DECL, holds the \"original\" type.  (TREE_TYPE has the copy.) */"}]}