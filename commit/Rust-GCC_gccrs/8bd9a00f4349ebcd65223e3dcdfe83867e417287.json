{"sha": "8bd9a00f4349ebcd65223e3dcdfe83867e417287", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJkOWEwMGY0MzQ5ZWJjZDY1MjIzZTNkY2RmZTgzODY3ZTQxNzI4Nw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-03T17:06:09Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-03T18:07:20Z"}, "message": "cpplib:  EOF in pragmas\n\nThis patch moves the generation of PRAGMA_EOF earlier, to when we set\nneed_line, rather than when we try and get the next line.  It also\nprevents peeking past a PRAGMA token.\n\n\tlibcpp/\n\t* lex.c (cpp_peek_token): Do not peek past CPP_PRAGMA.\n\t(_cpp_lex_direct): Handle EOF in pragma when setting need_line,\n\tnot when needing a line.", "tree": {"sha": "b64ec01e9803b16f969882ef1fbdef42f5c6c06a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b64ec01e9803b16f969882ef1fbdef42f5c6c06a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bd9a00f4349ebcd65223e3dcdfe83867e417287", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bd9a00f4349ebcd65223e3dcdfe83867e417287", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bd9a00f4349ebcd65223e3dcdfe83867e417287", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bd9a00f4349ebcd65223e3dcdfe83867e417287/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ba95047e47d7c92b0e3d30364f5937d2c20e4d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ba95047e47d7c92b0e3d30364f5937d2c20e4d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ba95047e47d7c92b0e3d30364f5937d2c20e4d8"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "f58a88281245a8d79f59ae2048748869e95da16c", "filename": "libcpp/lex.c", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bd9a00f4349ebcd65223e3dcdfe83867e417287/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bd9a00f4349ebcd65223e3dcdfe83867e417287/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=8bd9a00f4349ebcd65223e3dcdfe83867e417287", "patch": "@@ -2554,6 +2554,15 @@ cpp_peek_token (cpp_reader *pfile, int index)\n \t  index--;\n \t  break;\n \t}\n+      else if (peektok->type == CPP_PRAGMA)\n+\t{\n+\t  /* Don't peek past a pragma.  */\n+\t  if (peektok == &pfile->directive_result)\n+\t    /* Save the pragma in the buffer.  */\n+\t    *pfile->cur_token++ = *peektok;\n+\t  index--;\n+\t  break;\n+\t}\n     }\n   while (index--);\n \n@@ -2757,14 +2766,7 @@ _cpp_lex_direct (cpp_reader *pfile)\n   buffer = pfile->buffer;\n   if (buffer->need_line)\n     {\n-      if (pfile->state.in_deferred_pragma)\n-\t{\n-\t  result->type = CPP_PRAGMA_EOL;\n-\t  pfile->state.in_deferred_pragma = false;\n-\t  if (!pfile->state.pragma_allow_expansion)\n-\t    pfile->state.prevent_expansion--;\n-\t  return result;\n-\t}\n+      gcc_assert (!pfile->state.in_deferred_pragma);\n       if (!_cpp_get_fresh_line (pfile))\n \t{\n \t  result->type = CPP_EOF;\n@@ -2829,6 +2831,19 @@ _cpp_lex_direct (cpp_reader *pfile)\n \t      && !CPP_OPTION (pfile, traditional)))\n \tCPP_INCREMENT_LINE (pfile, 0);\n       buffer->need_line = true;\n+      if (pfile->state.in_deferred_pragma)\n+\t{\n+\t  /* Produce the PRAGMA_EOL on this line.  File reading\n+\t     ensures there is always a \\n at end of the buffer, thus\n+\t     in a deferred pragma we always see CPP_PRAGMA_EOL before\n+\t     any CPP_EOF.  */\n+\t  result->type = CPP_PRAGMA_EOL;\n+\t  result->flags &= ~PREV_WHITE;\n+\t  pfile->state.in_deferred_pragma = false;\n+\t  if (!pfile->state.pragma_allow_expansion)\n+\t    pfile->state.prevent_expansion--;\n+\t  return result;\n+\t}\n       goto fresh_line;\n \n     case '0': case '1': case '2': case '3': case '4':"}]}