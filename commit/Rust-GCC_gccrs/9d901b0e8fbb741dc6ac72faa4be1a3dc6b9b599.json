{"sha": "9d901b0e8fbb741dc6ac72faa4be1a3dc6b9b599", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ5MDFiMGU4ZmJiNzQxZGM2YWM3MmZhYTRiZTFhM2RjNmI5YjU5OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-10-12T22:05:00Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-10-12T22:05:00Z"}, "message": "sse.md (avx2_gathersi<mode>, [...]): Add clobber of match_scratch...\n\n\t* config/i386/sse.md (avx2_gathersi<mode>,\n\tavx2_gatherdi<mode>, avx2_gatherdi<mode>256): Add clobber of\n\tmatch_scratch, change memory_operand to register_operand,\n\tadd (mem:BLK (scratch)) use.\n\t(*avx2_gathersi<mode>, *avx2_gatherdi<mode>,\n\t*avx2_gatherdi<mode>256): Add clobber of match_scratch,\n\tadd earlyclobber to the output operand and match_scratch,\n\tadd (mem:BLK (scratch)) use, change the other mem to match_operand.\n\tUse %p6 instead of %c6 in the pattern.\n\t* config/i386/i386.c (ix86_expand_builtin): Adjust for\n\toperand 2 being a Pmode register_operand instead of memory_operand.\n\nFrom-SVN: r179869", "tree": {"sha": "a9ca0821ee4c01bfd99477dc97af6ebf37f972f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9ca0821ee4c01bfd99477dc97af6ebf37f972f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d901b0e8fbb741dc6ac72faa4be1a3dc6b9b599", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d901b0e8fbb741dc6ac72faa4be1a3dc6b9b599", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d901b0e8fbb741dc6ac72faa4be1a3dc6b9b599", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d901b0e8fbb741dc6ac72faa4be1a3dc6b9b599/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "15bf7d19d4a0dc2eed0ae5dcac5cdb3a35ec7db8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15bf7d19d4a0dc2eed0ae5dcac5cdb3a35ec7db8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15bf7d19d4a0dc2eed0ae5dcac5cdb3a35ec7db8"}], "stats": {"total": 129, "additions": 75, "deletions": 54}, "files": [{"sha": "e9a8e0703391bec50ad2ada295a5274b1b411422", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d901b0e8fbb741dc6ac72faa4be1a3dc6b9b599/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d901b0e8fbb741dc6ac72faa4be1a3dc6b9b599/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d901b0e8fbb741dc6ac72faa4be1a3dc6b9b599", "patch": "@@ -1,3 +1,17 @@\n+2011-10-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/sse.md (avx2_gathersi<mode>,\n+\tavx2_gatherdi<mode>, avx2_gatherdi<mode>256): Add clobber of\n+\tmatch_scratch, change memory_operand to register_operand,\n+\tadd (mem:BLK (scratch)) use.\n+\t(*avx2_gathersi<mode>, *avx2_gatherdi<mode>,\n+\t*avx2_gatherdi<mode>256): Add clobber of match_scratch,\n+\tadd earlyclobber to the output operand and match_scratch,\n+\tadd (mem:BLK (scratch)) use, change the other mem to match_operand.\n+\tUse %p6 instead of %c6 in the pattern.\n+\t* config/i386/i386.c (ix86_expand_builtin): Adjust for\n+\toperand 2 being a Pmode register_operand instead of memory_operand.\n+\n 2011-10-12  Kai Tietz  <ktietz@redhat.com>\n \n \t* config/i386/i386.md (simple_return): Disable"}, {"sha": "f73a96912cc9396541d3c0eebd015f0d729041f7", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d901b0e8fbb741dc6ac72faa4be1a3dc6b9b599/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d901b0e8fbb741dc6ac72faa4be1a3dc6b9b599/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9d901b0e8fbb741dc6ac72faa4be1a3dc6b9b599", "patch": "@@ -28748,7 +28748,6 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       op4 = expand_normal (arg4);\n       /* Note the arg order is different from the operand order.  */\n       mode0 = insn_data[icode].operand[1].mode;\n-      mode1 = insn_data[icode].operand[2].mode;\n       mode2 = insn_data[icode].operand[3].mode;\n       mode3 = insn_data[icode].operand[4].mode;\n       mode4 = insn_data[icode].operand[5].mode;\n@@ -28762,12 +28761,11 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       if (GET_MODE (op1) != Pmode)\n \top1 = convert_to_mode (Pmode, op1, 1);\n       op1 = force_reg (Pmode, op1);\n-      op1 = gen_rtx_MEM (mode1, op1);\n \n       if (!insn_data[icode].operand[1].predicate (op0, mode0))\n \top0 = copy_to_mode_reg (mode0, op0);\n-      if (!insn_data[icode].operand[2].predicate (op1, mode1))\n-\top1 = copy_to_mode_reg (mode1, op1);\n+      if (!insn_data[icode].operand[2].predicate (op1, Pmode))\n+\top1 = copy_to_mode_reg (Pmode, op1);\n       if (!insn_data[icode].operand[3].predicate (op2, mode2))\n \top2 = copy_to_mode_reg (mode2, op2);\n       if (!insn_data[icode].operand[4].predicate (op3, mode3))"}, {"sha": "b916edabb0dfcc4a5f0f95735e2426d1c4b37be4", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 59, "deletions": 50, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d901b0e8fbb741dc6ac72faa4be1a3dc6b9b599/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d901b0e8fbb741dc6ac72faa4be1a3dc6b9b599/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=9d901b0e8fbb741dc6ac72faa4be1a3dc6b9b599", "patch": "@@ -12524,84 +12524,93 @@\n \t\t       (V8SI \"V8SI\") (V8SF \"V8SI\")])\n \n (define_expand \"avx2_gathersi<mode>\"\n-  [(set (match_operand:VEC_GATHER_MODE 0 \"register_operand\" \"\")\n-\t(unspec:VEC_GATHER_MODE\n-\t  [(match_operand:VEC_GATHER_MODE 1 \"register_operand\" \"\")\n-\t   (match_operand:<ssescalarmode> 2 \"memory_operand\" \"\")\n-\t   (match_operand:<VEC_GATHER_MODE> 3 \"register_operand\" \"\")\n-\t   (match_operand:VEC_GATHER_MODE 4 \"register_operand\" \"\")\n-\t   (match_operand:SI 5 \"const1248_operand \" \"\")]\n-\t  UNSPEC_GATHER))]\n+  [(parallel [(set (match_operand:VEC_GATHER_MODE 0 \"register_operand\" \"\")\n+\t\t   (unspec:VEC_GATHER_MODE\n+\t\t     [(match_operand:VEC_GATHER_MODE 1 \"register_operand\" \"\")\n+\t\t      (match_operand 2 \"register_operand\" \"\")\n+\t\t      (mem:BLK (scratch))\n+\t\t      (match_operand:<VEC_GATHER_MODE> 3 \"register_operand\" \"\")\n+\t\t      (match_operand:VEC_GATHER_MODE 4 \"register_operand\" \"\")\n+\t\t      (match_operand:SI 5 \"const1248_operand \" \"\")]\n+\t\t     UNSPEC_GATHER))\n+\t      (clobber (match_scratch:VEC_GATHER_MODE 6 \"\"))])]\n   \"TARGET_AVX2\")\n \n (define_insn \"*avx2_gathersi<mode>\"\n-  [(set (match_operand:VEC_GATHER_MODE 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:VEC_GATHER_MODE 0 \"register_operand\" \"=&x\")\n \t(unspec:VEC_GATHER_MODE\n-\t  [(match_operand:VEC_GATHER_MODE 1 \"register_operand\" \"0\")\n-\t   (mem:<ssescalarmode>\n-\t     (match_operand:P 2 \"register_operand\" \"r\"))\n-\t   (match_operand:<VEC_GATHER_MODE> 3 \"register_operand\" \"x\")\n-\t   (match_operand:VEC_GATHER_MODE 4 \"register_operand\" \"x\")\n-\t   (match_operand:SI 5 \"const1248_operand\" \"n\")]\n-\t  UNSPEC_GATHER))]\n+\t  [(match_operand:VEC_GATHER_MODE 2 \"register_operand\" \"0\")\n+\t   (match_operand:P 3 \"register_operand\" \"r\")\n+\t   (mem:BLK (scratch))\n+\t   (match_operand:<VEC_GATHER_MODE> 4 \"register_operand\" \"x\")\n+\t   (match_operand:VEC_GATHER_MODE 5 \"register_operand\" \"1\")\n+\t   (match_operand:SI 6 \"const1248_operand\" \"n\")]\n+\t  UNSPEC_GATHER))\n+   (clobber (match_scratch:VEC_GATHER_MODE 1 \"=&x\"))]\n   \"TARGET_AVX2\"\n-  \"v<gthrfirstp>gatherd<gthrlastp>\\t{%4, (%2, %3, %c5), %0|%0, (%2, %3, %c5), %4}\"\n+  \"v<gthrfirstp>gatherd<gthrlastp>\\t{%1, (%3, %4, %p6), %0|%0, (%3, %4, %p6), %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_expand \"avx2_gatherdi<mode>\"\n-  [(set (match_operand:VEC_GATHER_MODE 0 \"register_operand\" \"\")\n-\t(unspec:VEC_GATHER_MODE\n-\t  [(match_operand:VEC_GATHER_MODE 1 \"register_operand\" \"\")\n-\t   (match_operand:<ssescalarmode> 2 \"memory_operand\" \"\")\n-\t   (match_operand:<AVXMODE48P_DI> 3 \"register_operand\" \"\")\n-\t   (match_operand:VEC_GATHER_MODE 4 \"register_operand\" \"\")\n-\t   (match_operand:SI 5 \"const1248_operand \" \"\")]\n-\t  UNSPEC_GATHER))]\n+  [(parallel [(set (match_operand:VEC_GATHER_MODE 0 \"register_operand\" \"\")\n+\t\t   (unspec:VEC_GATHER_MODE\n+\t\t     [(match_operand:VEC_GATHER_MODE 1 \"register_operand\" \"\")\n+\t\t      (match_operand 2 \"register_operand\" \"\")\n+\t\t      (mem:BLK (scratch))\n+\t\t      (match_operand:<AVXMODE48P_DI> 3 \"register_operand\" \"\")\n+\t\t      (match_operand:VEC_GATHER_MODE 4 \"register_operand\" \"\")\n+\t\t      (match_operand:SI 5 \"const1248_operand \" \"\")]\n+\t\t     UNSPEC_GATHER))\n+\t      (clobber (match_scratch:VEC_GATHER_MODE 6 \"\"))])]\n   \"TARGET_AVX2\")\n \n (define_insn \"*avx2_gatherdi<mode>\"\n-  [(set (match_operand:AVXMODE48P_DI 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:AVXMODE48P_DI 0 \"register_operand\" \"=&x\")\n \t(unspec:AVXMODE48P_DI\n-\t  [(match_operand:AVXMODE48P_DI 1 \"register_operand\" \"0\")\n-\t   (mem:<ssescalarmode>\n-\t     (match_operand:P 2 \"register_operand\" \"r\"))\n-\t   (match_operand:<AVXMODE48P_DI> 3 \"register_operand\" \"x\")\n-\t   (match_operand:AVXMODE48P_DI 4 \"register_operand\" \"x\")\n-\t   (match_operand:SI 5 \"const1248_operand\" \"n\")]\n-\t  UNSPEC_GATHER))]\n+\t  [(match_operand:AVXMODE48P_DI 2 \"register_operand\" \"0\")\n+\t   (match_operand:P 3 \"register_operand\" \"r\")\n+\t   (mem:BLK (scratch))\n+\t   (match_operand:<AVXMODE48P_DI> 4 \"register_operand\" \"x\")\n+\t   (match_operand:AVXMODE48P_DI 5 \"register_operand\" \"1\")\n+\t   (match_operand:SI 6 \"const1248_operand\" \"n\")]\n+\t  UNSPEC_GATHER))\n+   (clobber (match_scratch:AVXMODE48P_DI 1 \"=&x\"))]\n   \"TARGET_AVX2\"\n-  \"v<gthrfirstp>gatherq<gthrlastp>\\t{%4, (%2, %3, %c5), %0|%0, (%2, %3, %c5), %4}\"\n+  \"v<gthrfirstp>gatherq<gthrlastp>\\t{%1, (%3, %4, %p6), %0|%0, (%3, %4, %p6), %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n ;; Special handling for VEX.256 with float arguments\n ;; since there're still xmms as operands\n (define_expand \"avx2_gatherdi<mode>256\"\n-  [(set (match_operand:VI4F_128 0 \"register_operand\" \"\")\n-\t(unspec:VI4F_128\n-\t  [(match_operand:VI4F_128 1 \"register_operand\" \"\")\n-\t   (match_operand:<ssescalarmode> 2 \"memory_operand\" \"\")\n-\t   (match_operand:V4DI 3 \"register_operand\" \"\")\n-\t   (match_operand:VI4F_128 4 \"register_operand\" \"\")\n-\t   (match_operand:SI 5 \"const1248_operand \" \"\")]\n-\t  UNSPEC_GATHER))]\n+  [(parallel [(set (match_operand:VI4F_128 0 \"register_operand\" \"\")\n+\t\t   (unspec:VI4F_128\n+\t\t     [(match_operand:VI4F_128 1 \"register_operand\" \"\")\n+\t\t      (match_operand 2 \"register_operand\" \"\")\n+\t\t      (mem:BLK (scratch))\n+\t\t      (match_operand:V4DI 3 \"register_operand\" \"\")\n+\t\t      (match_operand:VI4F_128 4 \"register_operand\" \"\")\n+\t\t      (match_operand:SI 5 \"const1248_operand \" \"\")]\n+\t\t     UNSPEC_GATHER))\n+\t      (clobber (match_scratch:VI4F_128 6 \"\"))])]\n   \"TARGET_AVX2\")\n \n (define_insn \"*avx2_gatherdi<mode>256\"\n   [(set (match_operand:VI4F_128 0 \"register_operand\" \"=x\")\n \t(unspec:VI4F_128\n-\t  [(match_operand:VI4F_128 1 \"register_operand\" \"0\")\n-\t   (mem:<ssescalarmode>\n-\t     (match_operand:P 2 \"register_operand\" \"r\"))\n-\t   (match_operand:V4DI 3 \"register_operand\" \"x\")\n-\t   (match_operand:VI4F_128 4 \"register_operand\" \"x\")\n-\t   (match_operand:SI 5 \"const1248_operand\" \"n\")]\n-\t  UNSPEC_GATHER))]\n+\t  [(match_operand:VI4F_128 2 \"register_operand\" \"0\")\n+\t   (match_operand:P 3 \"register_operand\" \"r\")\n+\t   (mem:BLK (scratch))\n+\t   (match_operand:V4DI 4 \"register_operand\" \"x\")\n+\t   (match_operand:VI4F_128 5 \"register_operand\" \"1\")\n+\t   (match_operand:SI 6 \"const1248_operand\" \"n\")]\n+\t  UNSPEC_GATHER)) \n+   (clobber (match_scratch:VI4F_128 1 \"=&x\"))]\n   \"TARGET_AVX2\"\n-  \"v<gthrfirstp>gatherq<gthrlastp>\\t{%4, (%2, %3, %c5), %0|%0, (%2, %3, %c5), %4}\"\n+  \"v<gthrfirstp>gatherq<gthrlastp>\\t{%1, (%3, %4, %p6), %0|%0, (%3, %4, %p6), %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])"}]}