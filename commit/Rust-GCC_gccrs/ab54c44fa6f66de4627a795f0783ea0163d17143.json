{"sha": "ab54c44fa6f66de4627a795f0783ea0163d17143", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI1NGM0NGZhNmY2NmRlNDYyN2E3OTVmMDc4M2VhMDE2M2QxNzE0Mw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-08-04T04:46:09Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-08-04T05:23:42Z"}, "message": "Adjust expr_not_equal_to to use irange API.\n\ngcc/ChangeLog:\n\n\t* fold-const.c (expr_not_equal_to): Adjust for irange API.", "tree": {"sha": "a511c53e44a270b458b0a0cb70da18e58f9ac5ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a511c53e44a270b458b0a0cb70da18e58f9ac5ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab54c44fa6f66de4627a795f0783ea0163d17143", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab54c44fa6f66de4627a795f0783ea0163d17143", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab54c44fa6f66de4627a795f0783ea0163d17143", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab54c44fa6f66de4627a795f0783ea0163d17143/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f21757eb8fa74ad8a6f64cd7f9137b07f4714e11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f21757eb8fa74ad8a6f64cd7f9137b07f4714e11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f21757eb8fa74ad8a6f64cd7f9137b07f4714e11"}], "stats": {"total": 17, "additions": 4, "deletions": 13}, "files": [{"sha": "5d27927f6bfd788011e3d0a872557e5be8f08521", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab54c44fa6f66de4627a795f0783ea0163d17143/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab54c44fa6f66de4627a795f0783ea0163d17143/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=ab54c44fa6f66de4627a795f0783ea0163d17143", "patch": "@@ -10194,8 +10194,7 @@ tree_expr_nonzero_p (tree t)\n bool\n expr_not_equal_to (tree t, const wide_int &w)\n {\n-  wide_int min, max, nz;\n-  value_range_kind rtype;\n+  value_range vr;\n   switch (TREE_CODE (t))\n     {\n     case INTEGER_CST:\n@@ -10204,17 +10203,9 @@ expr_not_equal_to (tree t, const wide_int &w)\n     case SSA_NAME:\n       if (!INTEGRAL_TYPE_P (TREE_TYPE (t)))\n \treturn false;\n-      rtype = get_range_info (t, &min, &max);\n-      if (rtype == VR_RANGE)\n-\t{\n-\t  if (wi::lt_p (max, w, TYPE_SIGN (TREE_TYPE (t))))\n-\t    return true;\n-\t  if (wi::lt_p (w, min, TYPE_SIGN (TREE_TYPE (t))))\n-\t    return true;\n-\t}\n-      else if (rtype == VR_ANTI_RANGE\n-\t       && wi::le_p (min, w, TYPE_SIGN (TREE_TYPE (t)))\n-\t       && wi::le_p (w, max, TYPE_SIGN (TREE_TYPE (t))))\n+      get_range_info (t, vr);\n+      if (!vr.undefined_p ()\n+\t  && !vr.contains_p (wide_int_to_tree (TREE_TYPE (t), w)))\n \treturn true;\n       /* If T has some known zero bits and W has any of those bits set,\n \t then T is known not to be equal to W.  */"}]}