{"sha": "c51f1e7427e6a5ae2a6d82b5a790df77a3adc99a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUxZjFlNzQyN2U2YTVhZTJhNmQ4MmI1YTc5MGRmNzdhM2FkYzk5YQ==", "commit": {"author": {"name": "Liu Hao", "email": "lh_mouse@126.com", "date": "2020-11-12T14:20:29Z"}, "committer": {"name": "Jonathan Yong", "email": "10walls@gmail.com", "date": "2020-11-17T10:34:05Z"}, "message": "gcc: Add `ll` and `L` length modifiers for `ms_printf`\n\nPrevious code abused `FMT_LEN_L` for the `I` modifier. As `L` is a\nvalid modifier for `f`, `e`, `g`, etc. and `I` has the same semantics\nas the C99 `z` modifier, `FMT_LEN_z` is now used instead.\n\nFirst, in the Microsoft ABI, type `long double` has the same layout as\ntype `double`, so `%Lg` behaves identically to `%g`. Users should pass\nin `double`s instead of `long double`s, as GCC uses the 10-byte format.\n\nSecond, with a CRT that is recent enough (MSVCRT since Vista, MSVCR80,\nUCRT, or mingw-w64 8.0), `printf`-family functions can handle the `ll`\nlength modifier correctly. This ability is assumed to be available\nuniversally. A lot of libraries (such as libgomp) that use the\n`format(printf, ...)` attribute used to suffer from warnings about\nunknown format specifiers.\n\nReference: https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2008/tcxf1dw6(v=vs.90)\nReference: https://docs.microsoft.com/en-us/cpp/porting/visual-cpp-what-s-new-2003-through-2015#new-crt-features\nSigned-off-by: Liu Hao <lh_mouse@126.com>\n\ngcc/ChangeLog:\n\t* config/i386/msformat-c.c: Add more length modifiers.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/format/ms_c99-printf-3.c: Update tests.", "tree": {"sha": "0865d2e375bc7c1f7e5bd81c3ac72734bf5639c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0865d2e375bc7c1f7e5bd81c3ac72734bf5639c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c51f1e7427e6a5ae2a6d82b5a790df77a3adc99a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c51f1e7427e6a5ae2a6d82b5a790df77a3adc99a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c51f1e7427e6a5ae2a6d82b5a790df77a3adc99a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c51f1e7427e6a5ae2a6d82b5a790df77a3adc99a/comments", "author": {"login": "lhmouse", "id": 5071344, "node_id": "MDQ6VXNlcjUwNzEzNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5071344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lhmouse", "html_url": "https://github.com/lhmouse", "followers_url": "https://api.github.com/users/lhmouse/followers", "following_url": "https://api.github.com/users/lhmouse/following{/other_user}", "gists_url": "https://api.github.com/users/lhmouse/gists{/gist_id}", "starred_url": "https://api.github.com/users/lhmouse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lhmouse/subscriptions", "organizations_url": "https://api.github.com/users/lhmouse/orgs", "repos_url": "https://api.github.com/users/lhmouse/repos", "events_url": "https://api.github.com/users/lhmouse/events{/privacy}", "received_events_url": "https://api.github.com/users/lhmouse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jon-y", "id": 4688224, "node_id": "MDQ6VXNlcjQ2ODgyMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4688224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jon-y", "html_url": "https://github.com/jon-y", "followers_url": "https://api.github.com/users/jon-y/followers", "following_url": "https://api.github.com/users/jon-y/following{/other_user}", "gists_url": "https://api.github.com/users/jon-y/gists{/gist_id}", "starred_url": "https://api.github.com/users/jon-y/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jon-y/subscriptions", "organizations_url": "https://api.github.com/users/jon-y/orgs", "repos_url": "https://api.github.com/users/jon-y/repos", "events_url": "https://api.github.com/users/jon-y/events{/privacy}", "received_events_url": "https://api.github.com/users/jon-y/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "200c9e865f49255ea32d4891b746d394d156a16f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/200c9e865f49255ea32d4891b746d394d156a16f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/200c9e865f49255ea32d4891b746d394d156a16f"}], "stats": {"total": 75, "additions": 49, "deletions": 26}, "files": [{"sha": "085ac88789a8286488950483ce43564d340abf26", "filename": "gcc/config/i386/msformat-c.c", "status": "modified", "additions": 28, "deletions": 25, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c51f1e7427e6a5ae2a6d82b5a790df77a3adc99a/gcc%2Fconfig%2Fi386%2Fmsformat-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c51f1e7427e6a5ae2a6d82b5a790df77a3adc99a/gcc%2Fconfig%2Fi386%2Fmsformat-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmsformat-c.c?ref=c51f1e7427e6a5ae2a6d82b5a790df77a3adc99a", "patch": "@@ -32,10 +32,11 @@ along with GCC; see the file COPYING3.  If not see\n static format_length_info ms_printf_length_specs[] =\n {\n   { \"h\", FMT_LEN_h, STD_C89, NULL, FMT_LEN_none, STD_C89, 0 },\n-  { \"l\", FMT_LEN_l, STD_C89, NULL, FMT_LEN_none, STD_C89, 0 },\n+  { \"l\", FMT_LEN_l, STD_C89, \"ll\", FMT_LEN_ll, STD_C89, 0 },\n+  { \"L\", FMT_LEN_L, STD_C89, NULL, FMT_LEN_none, STD_C89, 1 },\n   { \"I32\", FMT_LEN_l, STD_EXT, NULL, FMT_LEN_none, STD_C89, 1 },\n   { \"I64\", FMT_LEN_ll, STD_EXT, NULL, FMT_LEN_none, STD_C89, 1 },\n-  { \"I\", FMT_LEN_L, STD_EXT, NULL, FMT_LEN_none, STD_C89, 1 },\n+  { \"I\", FMT_LEN_z, STD_EXT, NULL, FMT_LEN_none, STD_C89, 1 },\n   { NULL, FMT_LEN_none, STD_C89, NULL, FMT_LEN_none, STD_C89, 0 }\n };\n \n@@ -90,33 +91,35 @@ static const format_flag_pair ms_strftime_flag_pairs[] =\n static const format_char_info ms_print_char_table[] =\n {\n   /* C89 conversion specifiers.  */\n-  { \"di\",  0, STD_C89, { T89_I,   BADLEN,  T89_S,   T89_L,   T9L_LL,  T99_SST,  BADLEN, BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +'\",  \"i\",  NULL },\n-  { \"oxX\", 0, STD_C89, { T89_UI,  BADLEN,  T89_US,  T89_UL,  T9L_ULL, T99_ST, BADLEN, BADLEN, BADLEN, BADLEN,  BADLEN,  BADLEN }, \"-wp0#\",     \"i\",  NULL },\n-  { \"u\",   0, STD_C89, { T89_UI,  BADLEN,  T89_US,  T89_UL,  T9L_ULL, T99_ST, BADLEN, BADLEN, BADLEN, BADLEN,  BADLEN,  BADLEN }, \"-wp0'\",    \"i\",  NULL },\n-  { \"fgG\", 0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN, BADLEN, BADLEN }, \"-wp0 +#'\", \"\",   NULL },\n-  { \"eE\",  0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN, BADLEN, BADLEN }, \"-wp0 +#\",  \"\",   NULL },\n-  { \"c\",   0, STD_C89, { T89_I,   BADLEN,  T89_S,  T94_WI,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-w\",        \"\",   NULL },\n-  { \"s\",   1, STD_C89, { T89_C,   BADLEN,  T89_S,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-wp\",       \"cR\", NULL },\n-  { \"p\",   1, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-w\",        \"c\",  NULL },\n-  { \"n\",   1, STD_C89, { T89_I,   BADLEN,  T89_S,   T89_L,   T9L_LL,  BADLEN,  BADLEN, BADLEN,  T99_IM,  BADLEN,  BADLEN,  BADLEN }, \"\",          \"W\",  NULL },\n+  { \"di\",  0, STD_C89, { T89_I,   BADLEN,  T89_S,   T89_L,   T9L_LL,  BADLEN, T99_SST, BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-wp0 +'\",  \"i\",  NULL },\n+  { \"oxX\", 0, STD_C89, { T89_UI,  BADLEN,  T89_US,  T89_UL,  T9L_ULL, BADLEN, T99_ST,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-wp0#\",    \"i\",  NULL },\n+  { \"u\",   0, STD_C89, { T89_UI,  BADLEN,  T89_US,  T89_UL,  T9L_ULL, BADLEN, T99_ST,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-wp0'\",    \"i\",  NULL },\n+  { \"fgG\", 0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T89_D,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-wp0 +#'\", \"\",   NULL },\n+  { \"eE\",  0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T89_D,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-wp0 +#\",  \"\",   NULL },\n+  { \"c\",   0, STD_C89, { T89_I,   BADLEN,  T89_S,   T94_WI,  BADLEN,  BADLEN, BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-w\",       \"\",   NULL },\n+  { \"s\",   1, STD_C89, { T89_C,   BADLEN,  T89_S,   T94_W,   BADLEN,  BADLEN, BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-wp\",      \"cR\", NULL },\n+  { \"p\",   1, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN, BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-w\",       \"c\",  NULL },\n+  { \"n\",   1, STD_C89, { T89_I,   BADLEN,  T89_S,   T89_L,   T9L_LL,  BADLEN, BADLEN,  BADLEN,  T99_IM,  BADLEN,  BADLEN,  BADLEN }, \"\",         \"W\",  NULL },\n+  /* C99 conversion specifiers.  */\n+  { \"aA\",  0, STD_C99, { T99_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_D,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-wp0 +#\",  \"\",   NULL },\n   /* X/Open conversion specifiers.  */\n-  { \"C\",   0, STD_EXT, { TEX_WI,  BADLEN,  T89_S,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-w\",        \"\",   NULL },\n-  { \"S\",   1, STD_EXT, { TEX_W,   BADLEN,  T89_S,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-wp\",       \"R\",  NULL },\n+  { \"C\",   0, STD_EXT, { TEX_WI,  BADLEN,  T89_S,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-w\",       \"\",   NULL },\n+  { \"S\",   1, STD_EXT, { TEX_W,   BADLEN,  T89_S,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-wp\",      \"R\",  NULL },\n   { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n \n static const format_char_info ms_scan_char_table[] =\n {\n   /* C89 conversion specifiers.  */\n-  { \"di\",    1, STD_C89, { T89_I,   BADLEN,  T89_S,   T89_L,   T9L_LL,  T99_SST,  BADLEN, BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*w'\", \"W\",   NULL },\n-  { \"u\",     1, STD_C89, { T89_UI,  BADLEN,  T89_US,  T89_UL,  T9L_ULL, T99_ST, BADLEN,  BADLEN, BADLEN, BADLEN,  BADLEN,  BADLEN }, \"*w'\", \"W\",   NULL },\n-  { \"oxX\",   1, STD_C89, { T89_UI,  BADLEN,  T89_US,  T89_UL,  T9L_ULL, T99_ST, BADLEN,  BADLEN, BADLEN, BADLEN,  BADLEN,  BADLEN }, \"*w\",   \"W\",   NULL },\n-  { \"efgEG\", 1, STD_C89, { T89_F,   BADLEN,  BADLEN,  T89_D,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN, BADLEN, BADLEN }, \"*w'\",  \"W\",   NULL },\n-  { \"c\",     1, STD_C89, { T89_C,   BADLEN,  T89_S,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*w\",   \"cW\",  NULL },\n-  { \"s\",     1, STD_C89, { T89_C,   BADLEN,  T89_S,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*aw\",  \"cW\",  NULL },\n-  { \"[\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*aw\",  \"cW[\", NULL },\n-  { \"p\",     2, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*w\",   \"W\",   NULL },\n-  { \"n\",     1, STD_C89, { T89_I,   BADLEN,  T89_S,   T89_L,   T9L_LL,  BADLEN,  BADLEN, BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"\",     \"W\",   NULL },\n+  { \"di\",    1, STD_C89, { T89_I,   BADLEN,  T89_S,   T89_L,   T9L_LL,  BADLEN,  T99_SST, BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*w'\", \"W\",   NULL },\n+  { \"u\",     1, STD_C89, { T89_UI,  BADLEN,  T89_US,  T89_UL,  T9L_ULL, BADLEN,  T99_ST,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*w'\", \"W\",   NULL },\n+  { \"oxX\",   1, STD_C89, { T89_UI,  BADLEN,  T89_US,  T89_UL,  T9L_ULL, BADLEN,  T99_ST,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*w\",  \"W\",   NULL },\n+  { \"efgEG\", 1, STD_C89, { T89_F,   BADLEN,  BADLEN,  T89_D,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*w'\", \"W\",   NULL },\n+  { \"c\",     1, STD_C89, { T89_C,   BADLEN,  T89_S,   T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*w\",  \"cW\",  NULL },\n+  { \"s\",     1, STD_C89, { T89_C,   BADLEN,  T89_S,   T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*aw\", \"cW\",  NULL },\n+  { \"[\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*aw\", \"cW[\", NULL },\n+  { \"p\",     2, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*w\",  \"W\",   NULL },\n+  { \"n\",     1, STD_C89, { T89_I,   BADLEN,  T89_S,   T89_L,   T9L_LL,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"\",    \"W\",   NULL },\n   /* X/Open conversion specifiers.  */\n   { \"C\",     1, STD_EXT, { TEX_W,   BADLEN,  T89_S,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*w\",   \"W\",   NULL },\n   { \"S\",     1, STD_EXT, { TEX_W,   BADLEN,  T89_S,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*aw\",  \"W\",   NULL },\n@@ -182,9 +185,9 @@ extern void TARGET_OVERRIDES_FORMAT_INIT (void);\n void\n TARGET_OVERRIDES_FORMAT_INIT (void)\n {\n-  ms_printf_length_specs[2].std = C89_OR_EXT; /* I32 */\n-  ms_printf_length_specs[3].std = C89_OR_EXT; /* I64 */\n-  ms_printf_length_specs[4].std = C89_OR_EXT; /* I */\n+  ms_printf_length_specs[3].std = C89_OR_EXT; /* I32 */\n+  ms_printf_length_specs[4].std = C89_OR_EXT; /* I64 */\n+  ms_printf_length_specs[5].std = C89_OR_EXT; /* I */\n }\n \n #undef C89_OR_EXT"}, {"sha": "f46f155a0b17e49535f7814def6e89435c7cc050", "filename": "gcc/testsuite/gcc.dg/format/ms_c99-printf-3.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c51f1e7427e6a5ae2a6d82b5a790df77a3adc99a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-printf-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c51f1e7427e6a5ae2a6d82b5a790df77a3adc99a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-printf-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c99-printf-3.c?ref=c51f1e7427e6a5ae2a6d82b5a790df77a3adc99a", "patch": "@@ -9,13 +9,33 @@\n #include \"format.h\"\n \n void\n-foo (int i, char *s, size_t n, va_list v0, va_list v1, va_list v2, va_list v3,\n+foo (int i, char *s, size_t n, long l, llong ll, double d,\n+     long double ld, va_list v0, va_list v1, va_list v2, va_list v3,\n      va_list v4, va_list v5, va_list v6, va_list v7)\n {\n   fprintf (stdout, \"%d\", i);\n   fprintf (stdout, \"%ld\", i); /* { dg-warning \"format\" \"fprintf\" } */\n   printf (\"%d\", i);\n   printf (\"%ld\", i); /* { dg-warning \"format\" \"printf\" } */\n+  /* These are accepted since MSVCR80, MSVCRT from Vista, UCRT,\n+   * and mingw-w64 8.0 with C99/C++11.  */\n+  printf (\"%lld\", i); /* { dg-warning \"format\" \"printf\" } */\n+  printf (\"%lld\", l); /* { dg-warning \"format\" \"printf\" } */\n+  printf (\"%lld\", ll);\n+  printf (\"%llu\", i); /* { dg-warning \"format\" \"printf\" } */\n+  printf (\"%llu\", l); /* { dg-warning \"format\" \"printf\" } */\n+  printf (\"%llu\", ll);\n+  printf (\"%llx\", i); /* { dg-warning \"format\" \"printf\" } */\n+  printf (\"%llx\", l); /* { dg-warning \"format\" \"printf\" } */\n+  printf (\"%llx\", ll);\n+  /* As MSABI uses an 8-byte `long double`, `%Lg` matches GCC's\n+   * `double` instead of `long double` which takes 10 bytes.  */\n+  printf (\"%Lg\", d);\n+  printf (\"%Lg\", ld); /* { dg-warning \"format\" \"printf\" } */\n+  printf (\"%Le\", d);\n+  printf (\"%Le\", ld); /* { dg-warning \"format\" \"printf\" } */\n+  printf (\"%Lf\", d);\n+  printf (\"%Lf\", ld); /* { dg-warning \"format\" \"printf\" } */\n   /* The \"unlocked\" functions shouldn't warn in c99 mode.  */\n   fprintf_unlocked (stdout, \"%ld\", i);\n   printf_unlocked (\"%ld\", i);"}]}