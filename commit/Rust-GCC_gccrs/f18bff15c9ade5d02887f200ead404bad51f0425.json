{"sha": "f18bff15c9ade5d02887f200ead404bad51f0425", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE4YmZmMTVjOWFkZTVkMDI4ODdmMjAwZWFkNDA0YmFkNTFmMDQyNQ==", "commit": {"author": {"name": "Roman Zippel", "email": "zippel@linux-m68k.org", "date": "2001-07-30T21:30:40Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-07-30T21:30:40Z"}, "message": "m68k.h (TARGET_SWITCHES/TARGET_OPTIONS): Add missing doc strings\n\n        * config/m68k/m68k.h (TARGET_SWITCHES/TARGET_OPTIONS):\n        Add missing doc strings\n        * config/m68k/linux-aout.h (SUBTARGET_SWITCHES): Likewise\n        * config/m68k/linux.h (SUBTARGET_SWITCHES): Likewise\n\nFrom-SVN: r44489", "tree": {"sha": "eaff805f926fc78066631ec562ac336ade86adb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eaff805f926fc78066631ec562ac336ade86adb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f18bff15c9ade5d02887f200ead404bad51f0425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18bff15c9ade5d02887f200ead404bad51f0425", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f18bff15c9ade5d02887f200ead404bad51f0425", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18bff15c9ade5d02887f200ead404bad51f0425/comments", "author": null, "committer": null, "parents": [{"sha": "0ecf09f9cc1ee9c4c2daa91d2f2a844013f81cdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ecf09f9cc1ee9c4c2daa91d2f2a844013f81cdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ecf09f9cc1ee9c4c2daa91d2f2a844013f81cdb"}], "stats": {"total": 149, "additions": 97, "deletions": 52}, "files": [{"sha": "d6776f294bfbd1c73ecf4a689a17425005f52ee6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18bff15c9ade5d02887f200ead404bad51f0425/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18bff15c9ade5d02887f200ead404bad51f0425/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f18bff15c9ade5d02887f200ead404bad51f0425", "patch": "@@ -1,3 +1,10 @@\n+2001-07-30  Roman Zippel  <zippel@linux-m68k.org>\n+\n+\t* config/m68k/m68k.h (TARGET_SWITCHES/TARGET_OPTIONS):\n+\tAdd missing doc strings\n+\t* config/m68k/linux-aout.h (SUBTARGET_SWITCHES): Likewise\n+\t* config/m68k/linux.h (SUBTARGET_SWITCHES): Likewise\n+\n Mon Jul 30 22:16:08 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.c (ix86_output_main_function_alignment_hack): New function."}, {"sha": "dd07a4e983ef25faf7319ae21f4c24a7a2369bf2", "filename": "gcc/config/m68k/linux-aout.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18bff15c9ade5d02887f200ead404bad51f0425/gcc%2Fconfig%2Fm68k%2Flinux-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18bff15c9ade5d02887f200ead404bad51f0425/gcc%2Fconfig%2Fm68k%2Flinux-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux-aout.h?ref=f18bff15c9ade5d02887f200ead404bad51f0425", "patch": "@@ -41,7 +41,8 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n #undef SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES\t{\"ieee-fp\", 0},\n+#define SUBTARGET_SWITCHES\t{\"ieee-fp\", 0, \\\n+  N_(\"Use IEEE math for fp comparisons\") },\n \n #undef ASM_SPEC\n #define ASM_SPEC \\"}, {"sha": "bf420917a1dcd265da310a2c2113ef1daf38c2aa", "filename": "gcc/config/m68k/linux.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18bff15c9ade5d02887f200ead404bad51f0425/gcc%2Fconfig%2Fm68k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18bff15c9ade5d02887f200ead404bad51f0425/gcc%2Fconfig%2Fm68k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux.h?ref=f18bff15c9ade5d02887f200ead404bad51f0425", "patch": "@@ -42,7 +42,8 @@ Boston, MA 02111-1307, USA.  */\n #define STRICT_ALIGNMENT 0\n \n #undef SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES\t{\"ieee-fp\", 0},\n+#define SUBTARGET_SWITCHES\t{\"ieee-fp\", 0, \\\n+  N_(\"Use IEEE math for fp comparisons\")},\n \n /* Here are four prefixes that are used by asm_fprintf to\n    facilitate customization for alternate assembler syntaxes."}, {"sha": "14bcaa25c147289bf3a20865b58b5202be6a3a1b", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 86, "deletions": 50, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18bff15c9ade5d02887f200ead404bad51f0425/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18bff15c9ade5d02887f200ead404bad51f0425/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=f18bff15c9ade5d02887f200ead404bad51f0425", "patch": "@@ -147,63 +147,96 @@ extern int target_flags;\n    where VALUE is the bits to set or minus the bits to clear.\n    An empty string NAME is used to identify the default VALUE.  */\n \n-#define TARGET_SWITCHES  \\\n-  { { \"68020\", - (MASK_5200|MASK_68060|MASK_68040|MASK_68040_ONLY)},\t\\\n-    { \"c68020\", - (MASK_5200|MASK_68060|MASK_68040|MASK_68040_ONLY)},\t\\\n-    { \"68020\", (MASK_68020|MASK_BITFIELD)},\t\t\t\t\\\n-    { \"c68020\", (MASK_68020|MASK_BITFIELD)},\t\t\t\t\\\n+#define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n+  { { \"68020\", - (MASK_5200|MASK_68060|MASK_68040|MASK_68040_ONLY),\t\\\n+      N_(\"Generate code for a 68020\") },\t\t\t\t\\\n+    { \"c68020\", - (MASK_5200|MASK_68060|MASK_68040|MASK_68040_ONLY),\t\\\n+      N_(\"Generate code for a 68020\") },\t\t\t\t\\\n+    { \"68020\", (MASK_68020|MASK_BITFIELD), \"\" },\t\t\t\\\n+    { \"c68020\", (MASK_68020|MASK_BITFIELD), \"\" },\t\t\t\\\n     { \"68000\", - (MASK_5200|MASK_68060|MASK_68040|MASK_68040_ONLY\t\\\n-\t\t|MASK_68020|MASK_BITFIELD|MASK_68881)},\t\t\t\\\n+\t\t|MASK_68020|MASK_BITFIELD|MASK_68881),\t\t\t\\\n+      N_(\"Generate code for a 68000\") },\t\t\t\t\\\n     { \"c68000\", - (MASK_5200|MASK_68060|MASK_68040|MASK_68040_ONLY\t\\\n-\t\t|MASK_68020|MASK_BITFIELD|MASK_68881)},\t\t\t\\\n-    { \"bitfield\", MASK_BITFIELD},\t\t\t\t\t\\\n-    { \"nobitfield\", - MASK_BITFIELD},\t\t\t\t\t\\\n-    { \"rtd\", MASK_RTD},\t\t\t\t\t\t\t\\\n-    { \"nortd\", - MASK_RTD},\t\t\t\t\t\t\\\n-    { \"short\", MASK_SHORT},\t\t\t\t\t\t\\\n-    { \"noshort\", - MASK_SHORT},\t\t\t\t\t\t\\\n-    { \"fpa\", -(MASK_SKY|MASK_68040_ONLY|MASK_68881)},\t\t\t\\\n-    { \"fpa\", MASK_FPA},\t\t\t\t\t\t\t\\\n-    { \"nofpa\", - MASK_FPA},\t\t\t\t\t\t\\\n-    { \"sky\", -(MASK_FPA|MASK_68040_ONLY|MASK_68881)},\t\t\t\\\n-    { \"sky\", MASK_SKY},\t\t\t\t\t\t\t\\\n-    { \"nosky\", - MASK_SKY},\t\t\t\t\t\t\\\n-    { \"68881\", - (MASK_FPA|MASK_SKY)},\t\t\t\t\t\\\n-    { \"68881\", MASK_68881},\t\t\t\t\t\t\\\n-    { \"soft-float\", - (MASK_FPA|MASK_SKY|MASK_68040_ONLY|MASK_68881)},\t\\\n-    { \"68020-40\", -(MASK_5200|MASK_68060|MASK_68040_ONLY)},\t\t\\\n-    { \"68020-40\", (MASK_BITFIELD|MASK_68881|MASK_68020|MASK_68040)},\t\\\n-    { \"68020-60\", -(MASK_5200|MASK_68040_ONLY)},\t\t\t\\\n+\t\t|MASK_68020|MASK_BITFIELD|MASK_68881),\t\t\t\\\n+      N_(\"Generate code for a 68000\") },\t\t\t\t\\\n+    { \"bitfield\", MASK_BITFIELD,\t\t\t\t\t\\\n+      N_(\"Use the bit-field instructions\") },\t\t\t\t\\\n+    { \"nobitfield\", - MASK_BITFIELD,\t\t\t\t\t\\\n+      N_(\"Do not use the bit-field instructions\") },\t\t\t\\\n+    { \"rtd\", MASK_RTD,\t\t\t\t\t\t\t\\\n+      N_(\"Use different calling convention using 'rtd'\") },\t\t\\\n+    { \"nortd\", - MASK_RTD,\t\t\t\t\t\t\\\n+      N_(\"Use normal calling convention\") },\t\t\t\t\\\n+    { \"short\", MASK_SHORT,\t\t\t\t\t\t\\\n+      N_(\"Consider type `int' to be 16 bits wide\") },\t\t\t\\\n+    { \"noshort\", - MASK_SHORT,\t\t\t\t\t\t\\\n+      N_(\"Consider type `int' to be 32 bits wide\") },\t\t\t\\\n+    { \"fpa\", -(MASK_SKY|MASK_68040_ONLY|MASK_68881),\t\t\t\\\n+      N_(\"Generate code for a Sun FPA\") },\t\t\t\t\\\n+    { \"fpa\", MASK_FPA, \"\" },\t\t\t\t\t\t\\\n+    { \"nofpa\", - MASK_FPA,\t\t\t\t\t\t\\\n+      N_(\"Do not generate code for a Sun FPA\") },\t\t\t\\\n+    { \"sky\", -(MASK_FPA|MASK_68040_ONLY|MASK_68881),\t\t\t\\\n+      N_(\"\") },\t\t\t\t\t\t\t\t\\\n+    { \"sky\", MASK_SKY,\t\t\t\t\t\t\t\\\n+      N_(\"\") },\t\t\t\t\t\t\t\t\\\n+    { \"nosky\", - MASK_SKY,\t\t\t\t\t\t\\\n+      N_(\"\") },\t\t\t\t\t\t\t\t\\\n+    { \"68881\", - (MASK_FPA|MASK_SKY),\t\t\t\t\t\\\n+      N_(\"Generate code for a 68881\") },\t\t\t\t\\\n+    { \"68881\", MASK_68881, \"\" },\t\t\t\t\t\\\n+    { \"soft-float\", - (MASK_FPA|MASK_SKY|MASK_68040_ONLY|MASK_68881),\t\\\n+      N_(\"Generate code with library calls for floating point\") },\t\\\n+    { \"68020-40\", -(MASK_5200|MASK_68060|MASK_68040_ONLY),\t\t\\\n+      N_(\"Generate code for a 68040, without any new instructions\") },\t\\\n+    { \"68020-40\", (MASK_BITFIELD|MASK_68881|MASK_68020|MASK_68040), \"\"},\\\n+    { \"68020-60\", -(MASK_5200|MASK_68040_ONLY),\t\t\t\t\\\n+      N_(\"Generate code for a 68060, without any new instructions\") },\t\\\n     { \"68020-60\", (MASK_BITFIELD|MASK_68881|MASK_68020|MASK_68040\t\\\n-\t\t   |MASK_68060)},\t\t\t\t\t\\\n-    { \"68030\", - (MASK_5200|MASK_68060|MASK_68040|MASK_68040_ONLY)},\t\\\n-    { \"68030\", (MASK_68020|MASK_BITFIELD)},\t\t\t\t\\\n-    { \"68040\", - (MASK_5200|MASK_68060)},\t\t\t\t\\\n+\t\t   |MASK_68060), \"\" },\t\t\t\t\t\\\n+    { \"68030\", - (MASK_5200|MASK_68060|MASK_68040|MASK_68040_ONLY),\t\\\n+      N_(\"Generate code for a 68030\") },\t\t\t\t\\\n+    { \"68030\", (MASK_68020|MASK_BITFIELD), \"\" },\t\t\t\\\n+    { \"68040\", - (MASK_5200|MASK_68060),\t\t\t\t\\\n+      N_(\"Generate code for a 68040\") },\t\t\t\t\\\n     { \"68040\", (MASK_68020|MASK_68881|MASK_BITFIELD\t\t\t\\\n-\t\t|MASK_68040_ONLY|MASK_68040)},\t\t\t\t\\\n-    { \"68060\", - (MASK_5200|MASK_68040)},\t\t\t\t\\\n+\t\t|MASK_68040_ONLY|MASK_68040), \"\" },\t\t\t\\\n+    { \"68060\", - (MASK_5200|MASK_68040),\t\t\t\t\\\n+      N_(\"Generate code for a 68060\") },\t\t\t\t\\\n     { \"68060\", (MASK_68020|MASK_68881|MASK_BITFIELD\t\t\t\\\n-\t\t|MASK_68040_ONLY|MASK_68060)},\t\t\t\t\\\n+\t\t|MASK_68040_ONLY|MASK_68060), \"\" },\t\t\t\\\n     { \"5200\", - (MASK_68060|MASK_68040|MASK_68040_ONLY|MASK_68020\t\\\n-\t\t|MASK_BITFIELD|MASK_68881)},\t\t\t\t\\\n-    { \"5200\", (MASK_5200)},\t\t\t\t\t\t\\\n-    { \"68851\", 0},\t\t\t\t\t\t\t\\\n-    { \"no-68851\", 0},\t\t\t\t\t\t\t\\\n+\t\t|MASK_BITFIELD|MASK_68881),\t\t\t\t\\\n+      N_(\"Generate code for a 520X\") },\t\t\t\t\t\\\n+    { \"5200\", (MASK_5200), \"\" },\t\t\t\t\t\\\n+    { \"68851\", 0,\t\t\t\t\t\t\t\\\n+      N_(\"Generate code for a 68851\") },\t\t\t\t\\\n+    { \"no-68851\", 0,\t\t\t\t\t\t\t\\\n+      N_(\"Do no generate code for a 68851\") },\t\t\t\t\\\n     { \"68302\", - (MASK_5200|MASK_68060|MASK_68040|MASK_68040_ONLY\t\\\n-\t\t  |MASK_68020|MASK_BITFIELD|MASK_68881)},\t\t\\\n+\t\t  |MASK_68020|MASK_BITFIELD|MASK_68881),\t\t\\\n+      N_(\"Generate code for a 68302\") },\t\t\t\t\\\n     { \"68332\", - (MASK_5200|MASK_68060|MASK_68040|MASK_68040_ONLY\t\\\n-\t\t  |MASK_BITFIELD|MASK_68881)},\t\t\t\t\\\n-    { \"68332\", MASK_68020},\t\t\t\t\t\t\\\n+\t\t  |MASK_BITFIELD|MASK_68881),\t\t\t\t\\\n+      N_(\"Generate code for a 68332\") },\t\t\t\t\\\n+    { \"68332\", MASK_68020, \"\" },\t\t\t\t\t\\\n     { \"cpu32\", - (MASK_5200|MASK_68060|MASK_68040|MASK_68040_ONLY\t\\\n-\t\t  |MASK_BITFIELD|MASK_68881)},\t\t\t\t\\\n-    { \"cpu32\", MASK_68020},\t\t\t\t\t\t\\\n-    { \"align-int\", MASK_ALIGN_INT },\t\t\t\t\t\\\n-    { \"no-align-int\", -MASK_ALIGN_INT },\t\t\t\t\\\n-    { \"pcrel\", MASK_PCREL},\t\t\t\t\t\t\\\n-    { \"strict-align\", -MASK_NO_STRICT_ALIGNMENT},\t\t\t\\\n-    { \"no-strict-align\", MASK_NO_STRICT_ALIGNMENT},\t\t\t\\\n+\t\t  |MASK_BITFIELD|MASK_68881),\t\t\t\t\\\n+      N_(\"Generate code for a cpu32\") },\t\t\t\t\\\n+    { \"cpu32\", MASK_68020, \"\" },\t\t\t\t\t\\\n+    { \"align-int\", MASK_ALIGN_INT, \t\t\t\t\t\\\n+      N_(\"Align variables on a 32-bit boundary\") },\t\t\t\\\n+    { \"no-align-int\", -MASK_ALIGN_INT, \t\t\t\t\t\\\n+      N_(\"Align variables on a 16-bit boundary\") },\t\t\t\\\n+    { \"pcrel\", MASK_PCREL,\t\t\t\t\t\t\\\n+      N_(\"Generate pc-relative code\") },\t\t\t\t\\\n+    { \"strict-align\", -MASK_NO_STRICT_ALIGNMENT,\t\t\t\\\n+      N_(\"Do not use unaligned memory references\") },\t\t\t\\\n+    { \"no-strict-align\", MASK_NO_STRICT_ALIGNMENT,\t\t\t\\\n+      N_(\"Use unaligned memory references\") },\t\t\t\t\\\n     SUBTARGET_SWITCHES\t\t\t\t\t\t\t\\\n-    { \"\", TARGET_DEFAULT}}\n+    { \"\", TARGET_DEFAULT, \"\" }}\n /* TARGET_DEFAULT is defined in sun*.h and isi.h, etc.  */\n \n /* This macro is similar to `TARGET_SWITCHES' but defines names of\n@@ -216,9 +249,12 @@ extern int target_flags;\n    option if the fixed part matches.  The actual option name is made\n    by appending `-m' to the specified name.  */\n #define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n-{ { \"align-loops=\",\t&m68k_align_loops_string },\t\t\t\\\n-  { \"align-jumps=\",\t&m68k_align_jumps_string },\t\t\t\\\n-  { \"align-functions=\",\t&m68k_align_funcs_string },\t\t\t\\\n+{ { \"align-loops=\",\t&m68k_align_loops_string,\t\t\t\\\n+    N_(\"Loop code aligned to this power of 2\") },\t\t\t\\\n+  { \"align-jumps=\",\t&m68k_align_jumps_string,\t\t\t\\\n+    N_(\"Jump targets are aligned to this power of 2\") },\t\t\\\n+  { \"align-functions=\",\t&m68k_align_funcs_string,\t\t\t\\\n+    N_(\"Function starts are aligned to this power of 2\") },\t\t\\\n   SUBTARGET_OPTIONS\t\t\t\t\t\t\t\\\n }\n "}]}