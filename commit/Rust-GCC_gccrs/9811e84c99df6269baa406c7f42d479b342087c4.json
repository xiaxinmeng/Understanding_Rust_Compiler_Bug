{"sha": "9811e84c99df6269baa406c7f42d479b342087c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgxMWU4NGM5OWRmNjI2OWJhYTQwNmM3ZjQyZDQ3OWIzNDIwODdjNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-07-27T12:01:21Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-07-27T12:01:21Z"}, "message": "re PR middle-end/81502 (In some cases the data is moved to memory unnecessarily [partial regression])\n\n2017-07-27  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/81502\n\t* tree-ssa.c (non_rewritable_lvalue_p): Handle BIT_INSERT_EXPR\n\twith incompatible but same sized type.\n\t(execute_update_addresses_taken): Likewise.\n\n\t* gcc.target/i386/vect-insert-1.c: New testcase.\n\nFrom-SVN: r250620", "tree": {"sha": "691fa8f60a804bf8766bcf2e2a48a5c15e76b058", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/691fa8f60a804bf8766bcf2e2a48a5c15e76b058"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9811e84c99df6269baa406c7f42d479b342087c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9811e84c99df6269baa406c7f42d479b342087c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9811e84c99df6269baa406c7f42d479b342087c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9811e84c99df6269baa406c7f42d479b342087c4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0919ce3efe2a0d6a20cb726feabe26dc3503db43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0919ce3efe2a0d6a20cb726feabe26dc3503db43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0919ce3efe2a0d6a20cb726feabe26dc3503db43"}], "stats": {"total": 70, "additions": 61, "deletions": 9}, "files": [{"sha": "5fcaae2eba61ae9fce9657db8d75a5a0bd7bcbd6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9811e84c99df6269baa406c7f42d479b342087c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9811e84c99df6269baa406c7f42d479b342087c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9811e84c99df6269baa406c7f42d479b342087c4", "patch": "@@ -1,3 +1,10 @@\n+2017-07-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81502\n+\t* tree-ssa.c (non_rewritable_lvalue_p): Handle BIT_INSERT_EXPR\n+\twith incompatible but same sized type.\n+\t(execute_update_addresses_taken): Likewise.\n+\n 2017-07-27  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* tree-ssa-loop-ch.c (pass_ch::process_loop_p): Guard on"}, {"sha": "292fa5b7885a677021cd544c4020804310e8f669", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9811e84c99df6269baa406c7f42d479b342087c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9811e84c99df6269baa406c7f42d479b342087c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9811e84c99df6269baa406c7f42d479b342087c4", "patch": "@@ -1,3 +1,8 @@\n+2017-07-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81502\n+\t* gcc.target/i386/vect-insert-1.c: New testcase.\n+\n 2017-07-27  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \tPR target/81534"}, {"sha": "55cc52334c2766f3f224055c37c06c1bdeb5a51d", "filename": "gcc/testsuite/gcc.target/i386/vect-insert-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9811e84c99df6269baa406c7f42d479b342087c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-insert-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9811e84c99df6269baa406c7f42d479b342087c4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-insert-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-insert-1.c?ref=9811e84c99df6269baa406c7f42d479b342087c4", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -msse2 -fdump-tree-ccp1\" } */\n+\n+typedef int v4si __attribute__((vector_size(16)));\n+\n+float f;\n+\n+v4si foo (v4si a)\n+{\n+  __builtin_memcpy ((char *)&a + 4, &f, 4);\n+  return a;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Now a gimple register: a\" \"ccp1\" } } */\n+/* { dg-final { scan-tree-dump \"BIT_INSERT_EXPR <a\" \"ccp1\" } } */"}, {"sha": "a67012c043faaac4a5967aa2ad3d143b0bece4d4", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9811e84c99df6269baa406c7f42d479b342087c4/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9811e84c99df6269baa406c7f42d479b342087c4/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=9811e84c99df6269baa406c7f42d479b342087c4", "patch": "@@ -1513,8 +1513,8 @@ non_rewritable_lvalue_p (tree lhs)\n       if (DECL_P (decl)\n \t  && VECTOR_TYPE_P (TREE_TYPE (decl))\n \t  && TYPE_MODE (TREE_TYPE (decl)) != BLKmode\n-\t  && types_compatible_p (TREE_TYPE (lhs),\n-\t\t\t\t TREE_TYPE (TREE_TYPE (decl)))\n+\t  && operand_equal_p (TYPE_SIZE_UNIT (TREE_TYPE (lhs)),\n+\t\t\t      TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (decl))), 0)\n \t  && tree_fits_uhwi_p (TREE_OPERAND (lhs, 1))\n \t  && tree_int_cst_lt (TREE_OPERAND (lhs, 1),\n \t\t\t      TYPE_SIZE_UNIT (TREE_TYPE (decl)))\n@@ -1529,8 +1529,9 @@ non_rewritable_lvalue_p (tree lhs)\n       && DECL_P (TREE_OPERAND (lhs, 0))\n       && VECTOR_TYPE_P (TREE_TYPE (TREE_OPERAND (lhs, 0)))\n       && TYPE_MODE (TREE_TYPE (TREE_OPERAND (lhs, 0))) != BLKmode\n-      && types_compatible_p (TREE_TYPE (lhs),\n-\t\t\t     TREE_TYPE (TREE_TYPE (TREE_OPERAND (lhs, 0))))\n+      && operand_equal_p (TYPE_SIZE_UNIT (TREE_TYPE (lhs)),\n+\t\t\t  TYPE_SIZE_UNIT\n+\t\t\t    (TREE_TYPE (TREE_TYPE (TREE_OPERAND (lhs, 0)))), 0)\n       && (tree_to_uhwi (TREE_OPERAND (lhs, 2))\n \t  % tree_to_uhwi (TYPE_SIZE (TREE_TYPE (lhs)))) == 0)\n     return false;\n@@ -1812,14 +1813,26 @@ execute_update_addresses_taken (void)\n \t\t\t\t     DECL_UID (TREE_OPERAND (lhs, 0)))\n \t\t    && VECTOR_TYPE_P (TREE_TYPE (TREE_OPERAND (lhs, 0)))\n \t\t    && TYPE_MODE (TREE_TYPE (TREE_OPERAND (lhs, 0))) != BLKmode\n-\t\t    && types_compatible_p (TREE_TYPE (lhs),\n-\t\t\t\t\t   TREE_TYPE (TREE_TYPE\n-\t\t\t\t\t\t       (TREE_OPERAND (lhs, 0))))\n+\t\t    && operand_equal_p (TYPE_SIZE_UNIT (TREE_TYPE (lhs)),\n+\t\t\t\t\tTYPE_SIZE_UNIT (TREE_TYPE\n+\t\t\t\t\t  (TREE_TYPE (TREE_OPERAND (lhs, 0)))),\n+\t\t\t\t\t0)\n \t\t    && (tree_to_uhwi (TREE_OPERAND (lhs, 2))\n \t\t\t% tree_to_uhwi (TYPE_SIZE (TREE_TYPE (lhs))) == 0))\n \t\t  {\n \t\t    tree var = TREE_OPERAND (lhs, 0);\n \t\t    tree val = gimple_assign_rhs1 (stmt);\n+\t\t    if (! types_compatible_p (TREE_TYPE (TREE_TYPE (var)),\n+\t\t\t\t\t      TREE_TYPE (val)))\n+\t\t      {\n+\t\t\ttree tem = make_ssa_name (TREE_TYPE (TREE_TYPE (var)));\n+\t\t\tgimple *pun\n+\t\t\t  = gimple_build_assign (tem,\n+\t\t\t\t\t\t build1 (VIEW_CONVERT_EXPR,\n+\t\t\t\t\t\t\t TREE_TYPE (tem), val));\n+\t\t\tgsi_insert_before (&gsi, pun, GSI_SAME_STMT);\n+\t\t\tval = tem;\n+\t\t      }\n \t\t    tree bitpos = TREE_OPERAND (lhs, 2);\n \t\t    gimple_assign_set_lhs (stmt, var);\n \t\t    gimple_assign_set_rhs_with_ops\n@@ -1839,15 +1852,27 @@ execute_update_addresses_taken (void)\n \t\t    && bitmap_bit_p (suitable_for_renaming, DECL_UID (sym))\n \t\t    && VECTOR_TYPE_P (TREE_TYPE (sym))\n \t\t    && TYPE_MODE (TREE_TYPE (sym)) != BLKmode\n-\t\t    && types_compatible_p (TREE_TYPE (lhs),\n-\t\t\t\t\t   TREE_TYPE (TREE_TYPE (sym)))\n+\t\t    && operand_equal_p (TYPE_SIZE_UNIT (TREE_TYPE (lhs)),\n+\t\t\t\t\tTYPE_SIZE_UNIT\n+\t\t\t\t\t  (TREE_TYPE (TREE_TYPE (sym))), 0)\n \t\t    && tree_fits_uhwi_p (TREE_OPERAND (lhs, 1))\n \t\t    && tree_int_cst_lt (TREE_OPERAND (lhs, 1),\n \t\t\t\t\tTYPE_SIZE_UNIT (TREE_TYPE (sym)))\n \t\t    && (tree_to_uhwi (TREE_OPERAND (lhs, 1))\n \t\t\t% tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (lhs)))) == 0)\n \t\t  {\n \t\t    tree val = gimple_assign_rhs1 (stmt);\n+\t\t    if (! types_compatible_p (TREE_TYPE (val),\n+\t\t\t\t\t      TREE_TYPE (TREE_TYPE (sym))))\n+\t\t      {\n+\t\t\ttree tem = make_ssa_name (TREE_TYPE (TREE_TYPE (sym)));\n+\t\t\tgimple *pun\n+\t\t\t  = gimple_build_assign (tem,\n+\t\t\t\t\t\t build1 (VIEW_CONVERT_EXPR,\n+\t\t\t\t\t\t\t TREE_TYPE (tem), val));\n+\t\t\tgsi_insert_before (&gsi, pun, GSI_SAME_STMT);\n+\t\t\tval = tem;\n+\t\t      }\n \t\t    tree bitpos\n \t\t      = wide_int_to_tree (bitsizetype,\n \t\t\t\t\t  mem_ref_offset (lhs) * BITS_PER_UNIT);"}]}