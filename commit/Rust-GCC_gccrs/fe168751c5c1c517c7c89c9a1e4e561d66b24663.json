{"sha": "fe168751c5c1c517c7c89c9a1e4e561d66b24663", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUxNjg3NTFjNWMxYzUxN2M3Yzg5YzlhMWU0ZTU2MWQ2NmIyNDY2Mw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-18T06:51:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-18T10:27:53Z"}, "message": "middle-end/95171 - inlining of trapping compare into non-call EH fn\n\nThis fixes always-inlining across -fnon-call-exception boundaries\nfor conditions which we do not allow to throw.\n\n2020-05-18  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/95171\n\t* tree-inline.c (remap_gimple_stmt): Split out trapping compares\n\twhen inlining into a non-call EH function.\n\n\t* gcc.dg/pr95171.c: New testcase.", "tree": {"sha": "14205bc73e57021f4079ec12868dd2362fa44e13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14205bc73e57021f4079ec12868dd2362fa44e13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe168751c5c1c517c7c89c9a1e4e561d66b24663", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe168751c5c1c517c7c89c9a1e4e561d66b24663", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe168751c5c1c517c7c89c9a1e4e561d66b24663", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe168751c5c1c517c7c89c9a1e4e561d66b24663/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52a0f83980082c9995f2d8ec9b88548520fb8a5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52a0f83980082c9995f2d8ec9b88548520fb8a5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52a0f83980082c9995f2d8ec9b88548520fb8a5f"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "98c035a5356970441cf9f58297eb3c2e0797089e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe168751c5c1c517c7c89c9a1e4e561d66b24663/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe168751c5c1c517c7c89c9a1e4e561d66b24663/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe168751c5c1c517c7c89c9a1e4e561d66b24663", "patch": "@@ -1,3 +1,9 @@\n+2020-05-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/95171\n+\t* tree-inline.c (remap_gimple_stmt): Split out trapping compares\n+\twhen inlining into a non-call EH function.\n+\n 2020-05-18  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/95172"}, {"sha": "33425f259b47ebf9262d5796b348906074412b0e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe168751c5c1c517c7c89c9a1e4e561d66b24663/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe168751c5c1c517c7c89c9a1e4e561d66b24663/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fe168751c5c1c517c7c89c9a1e4e561d66b24663", "patch": "@@ -1,3 +1,8 @@\n+2020-05-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/95171\n+\t* gcc.dg/pr95171.c: New testcase.\n+\n 2020-05-18  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/95172"}, {"sha": "af9bde7bc6a2d73ecc02cb58c619d4b909c52848", "filename": "gcc/testsuite/gcc.dg/pr95171.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe168751c5c1c517c7c89c9a1e4e561d66b24663/gcc%2Ftestsuite%2Fgcc.dg%2Fpr95171.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe168751c5c1c517c7c89c9a1e4e561d66b24663/gcc%2Ftestsuite%2Fgcc.dg%2Fpr95171.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr95171.c?ref=fe168751c5c1c517c7c89c9a1e4e561d66b24663", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fexceptions -ffinite-math-only -fnon-call-exceptions\" } */\n+\n+inline double __attribute__ ((always_inline))\n+w9 (int q2)\n+{\n+  return __builtin_fabs (__builtin_nan (\"\")) > 0.0 ? 1.0 : q2 / 1.0;\n+}\n+\n+double __attribute__ ((optimize (\"-fipa-cp\")))\n+o7 (int iz)\n+{\n+  int rj[1];\n+\n+  (void) rj;\n+\n+  return w9 (iz);\n+}"}, {"sha": "943f3f9407be2453b0752eba1abbd15350478e63", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe168751c5c1c517c7c89c9a1e4e561d66b24663/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe168751c5c1c517c7c89c9a1e4e561d66b24663/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=fe168751c5c1c517c7c89c9a1e4e561d66b24663", "patch": "@@ -1956,6 +1956,37 @@ remap_gimple_stmt (gimple *stmt, copy_body_data *id)\n       gimple_set_vuse (copy, NULL_TREE);\n     }\n \n+  if (cfun->can_throw_non_call_exceptions)\n+    {\n+      /* When inlining a function which does not have non-call exceptions\n+\t enabled into a function that has (which only happens with\n+\t always-inline) we have to fixup stmts that cannot throw.  */\n+      if (gcond *cond = dyn_cast <gcond *> (copy))\n+\tif (gimple_could_trap_p (cond))\n+\t  {\n+\t    gassign *cmp\n+\t      = gimple_build_assign (make_ssa_name (boolean_type_node),\n+\t\t\t\t     gimple_cond_code (cond),\n+\t\t\t\t     gimple_cond_lhs (cond),\n+\t\t\t\t     gimple_cond_rhs (cond));\n+\t    gimple_seq_add_stmt (&stmts, cmp);\n+\t    gimple_cond_set_code (cond, NE_EXPR);\n+\t    gimple_cond_set_lhs (cond, gimple_assign_lhs (cmp));\n+\t    gimple_cond_set_rhs (cond, boolean_false_node);\n+\t  }\n+      if (gassign *ass = dyn_cast <gassign *> (copy))\n+\tif ((gimple_assign_rhs_code (ass) == COND_EXPR\n+\t     || gimple_assign_rhs_code (ass) == VEC_COND_EXPR)\n+\t    && gimple_could_trap_p (ass))\n+\t  {\n+\t    gassign *cmp\n+\t      = gimple_build_assign (make_ssa_name (boolean_type_node),\n+\t\t\t\t     gimple_assign_rhs1 (ass));\n+\t    gimple_seq_add_stmt (&stmts, cmp);\n+\t    gimple_assign_set_rhs1 (ass, gimple_assign_lhs (cmp));\n+\t  }\n+    }\n+\n   gimple_seq_add_stmt (&stmts, copy);\n   return stmts;\n }"}]}