{"sha": "33551dfec5a986d6e042dc61c4517af4e75fd76e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM1NTFkZmVjNWE5ODZkNmUwNDJkYzYxYzQ1MTdhZjRlNzVmZDc2ZQ==", "commit": {"author": {"name": "Warren Levy", "email": "warrenl@cygnus.com", "date": "1999-07-20T20:30:42Z"}, "committer": {"name": "Warren Levy", "email": "warrenl@gcc.gnu.org", "date": "1999-07-20T20:30:42Z"}, "message": "DatagramSocket.java (DatagramSocket(int, InetAddress)): Default to using PlainDatagramSocketImpl.\n\n\t* java/net/DatagramSocket.java (DatagramSocket(int, InetAddress)):\n\tDefault to using PlainDatagramSocketImpl.\n\t* java/net/PlainDatagramSocketImpl.java (close): Catch IOException.\n\nFrom-SVN: r28195", "tree": {"sha": "f8547b25c863d8ad2e1ae11a1bcc4aca6c0a8b09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8547b25c863d8ad2e1ae11a1bcc4aca6c0a8b09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33551dfec5a986d6e042dc61c4517af4e75fd76e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33551dfec5a986d6e042dc61c4517af4e75fd76e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33551dfec5a986d6e042dc61c4517af4e75fd76e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33551dfec5a986d6e042dc61c4517af4e75fd76e/comments", "author": null, "committer": null, "parents": [{"sha": "ce96455a31028be30569ff9fb883356348cb3d57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce96455a31028be30569ff9fb883356348cb3d57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce96455a31028be30569ff9fb883356348cb3d57"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "9d4e8bcef3af99ef6181e86ec19a9f0a442a6f5c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33551dfec5a986d6e042dc61c4517af4e75fd76e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33551dfec5a986d6e042dc61c4517af4e75fd76e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=33551dfec5a986d6e042dc61c4517af4e75fd76e", "patch": "@@ -1,3 +1,9 @@\n+1999-07-20  Warren Levy  <warrenl@cygnus.com>\n+\n+\t* java/net/DatagramSocket.java (DatagramSocket(int, InetAddress)):\n+\tDefault to using PlainDatagramSocketImpl.\n+\t* java/net/PlainDatagramSocketImpl.java (close): Catch IOException.\n+\n 1999-07-19  Tom Tromey  <tromey@cygnus.com>\n \n \t* include/stamp-h.in: New file."}, {"sha": "3291efe024ad170123d5646fbb1cfa91c3330007", "filename": "libjava/java/net/DatagramSocket.java", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33551dfec5a986d6e042dc61c4517af4e75fd76e/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33551dfec5a986d6e042dc61c4517af4e75fd76e/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramSocket.java?ref=33551dfec5a986d6e042dc61c4517af4e75fd76e", "patch": "@@ -47,9 +47,19 @@ public DatagramSocket(int port, InetAddress laddr) throws SocketException\n \n     String propVal = System.getProperty(\"impl.prefix\");\n     if (propVal == null || propVal.equals(\"\"))\n-      propVal = \"Plain\";\n-    impl = (DatagramSocketImpl) Class.forName(\"java.net.\" + propVal +\n+      impl = new PlainDatagramSocketImpl();\n+    else\n+      try\n+\t{\n+\t  impl = (DatagramSocketImpl) Class.forName(\"java.net.\" + propVal +\n \t\t\t\t\t\"DatagramSocketImpl\").newInstance();\n+\t}\n+      catch (Exception e)\n+\t{\n+\t  System.err.println(\"Could not instantiate class: java.net.\" +\n+\t    propVal + \"DatagramSocketImpl\");\n+\t  impl = new PlainDatagramSocketImpl();\n+\t}\n     impl.create();\n \n     // For multicasting, set the socket to be reused (Stevens pp. 195-6)."}, {"sha": "a20be1cb74d3b3ca735ba8fceb6ac21486a84bc8", "filename": "libjava/java/net/PlainDatagramSocketImpl.java", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33551dfec5a986d6e042dc61c4517af4e75fd76e/libjava%2Fjava%2Fnet%2FPlainDatagramSocketImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33551dfec5a986d6e042dc61c4517af4e75fd76e/libjava%2Fjava%2Fnet%2FPlainDatagramSocketImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FPlainDatagramSocketImpl.java?ref=33551dfec5a986d6e042dc61c4517af4e75fd76e", "patch": "@@ -68,9 +68,24 @@ protected native void bind(int lport, InetAddress laddr)\n   private native void mcastGrp(InetAddress inetaddr, boolean join)\n \tthrows IOException;\n \n-  protected void close() throws IOException\n+  protected void close()\n   {\n-    fd.close();\n+    // FIXME: The close method in each of the DatagramSocket* classes does\n+    // not throw an IOException.  The issue is that FileDescriptor.close()\n+    // in natFileDescriptorPosix.cc can throw one, so we have to catch\n+    // it here.  It seems that FileDescriptor.close is properly throwing\n+    // the IOException on errors since many of the java.io classes depend\n+    // on that.  This probably requires a bit more research but for now,\n+    // we'll catch the IOException here.\n+    try\n+      {\n+        fd.close();\n+      }\n+    catch (IOException e)\n+      {\n+\tSystem.err.println(\"PlainDatagramSocketImpl.close: Error closing - \" +\n+\t  e.getMessage());\n+      }\n   }\n \n   // Deprecated in JDK 1.2."}]}