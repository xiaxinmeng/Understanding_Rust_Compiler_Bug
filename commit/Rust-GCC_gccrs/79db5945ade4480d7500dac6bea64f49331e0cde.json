{"sha": "79db5945ade4480d7500dac6bea64f49331e0cde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzlkYjU5NDVhZGU0NDgwZDc1MDBkYWM2YmVhNjRmNDkzMzFlMGNkZQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-07T15:09:43Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-08T10:29:25Z"}, "message": "aarch64: Reimplement vabd* intrinsics using builtins\n\nThis patch reimplements the vabd* intrinsics using RTL builtins.\nIt's fairly straightforward with new builtins + arm_neon.h changes.\n\ngcc/\n\t* config/aarch64/aarch64-simd.md (aarch64_<su>abd<mode>_3):\n\tRename to...\n\t(aarch64_<su>abd<mode>): ... This.\n\t(<sur>sadv16qi): Adjust callsite of the above.\n\t* config/aarch64/aarch64-simd-builtins.def (sabd, uabd): Define\n\tbuiltins.\n\t* config/aarch64/arm_neon.h (vabd_s8): Reimplement using\n\tbuiltin.\n\t(vabd_s16): Likewise.\n\t(vabd_s32): Likewise.\n\t(vabd_u8): Likewise.\n\t(vabd_u16): Likewise.\n\t(vabd_u32): Likewise.\n\t(vabdq_s8): Likewise.\n\t(vabdq_s16): Likewise.\n\t(vabdq_s32): Likewise.\n\t(vabdq_u8): Likewise.\n\t(vabdq_u16): Likewise.\n\t(vabdq_u32): Likewise.", "tree": {"sha": "f6b32cee19e9332b2a8e7bef46f3357fca41c57c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6b32cee19e9332b2a8e7bef46f3357fca41c57c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79db5945ade4480d7500dac6bea64f49331e0cde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79db5945ade4480d7500dac6bea64f49331e0cde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79db5945ade4480d7500dac6bea64f49331e0cde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79db5945ade4480d7500dac6bea64f49331e0cde/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cab822d4ea7694e7c77fd713ebcfde66ba6e2c25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cab822d4ea7694e7c77fd713ebcfde66ba6e2c25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cab822d4ea7694e7c77fd713ebcfde66ba6e2c25"}], "stats": {"total": 92, "additions": 18, "deletions": 74}, "files": [{"sha": "ca44b65f24b238504914e14db4d1f163143a0f19", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79db5945ade4480d7500dac6bea64f49331e0cde/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79db5945ade4480d7500dac6bea64f49331e0cde/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=79db5945ade4480d7500dac6bea64f49331e0cde", "patch": "@@ -149,6 +149,10 @@\n   BUILTIN_VDQ_BHSI (BINOP, srhadd, 0, NONE)\n   BUILTIN_VDQ_BHSI (BINOP, urhadd, 0, NONE)\n \n+  /* Implemented by aarch64_<su>abd<mode>.  */\n+  BUILTIN_VDQ_BHSI (BINOP, sabd, 0, NONE)\n+  BUILTIN_VDQ_BHSI (BINOPU, uabd, 0, NONE)\n+\n   /* Implemented by aarch64_<su>aba<mode>.  */\n   BUILTIN_VDQ_BHSI (TERNOP, saba, 0, NONE)\n   BUILTIN_VDQ_BHSI (TERNOPU, uaba, 0, NONE)"}, {"sha": "f52cd7c41a5da9615e355c3ce7d105b356231be0", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79db5945ade4480d7500dac6bea64f49331e0cde/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79db5945ade4480d7500dac6bea64f49331e0cde/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=79db5945ade4480d7500dac6bea64f49331e0cde", "patch": "@@ -766,7 +766,7 @@\n ;; So (ABS:QI (minus:QI 64 -128)) == (ABS:QI (192 or -64 signed)) == 64.\n ;; Whereas SABD would return 192 (-64 signed) on the above example.\n ;; Use MINUS ([us]max (op1, op2), [us]min (op1, op2)) instead.\n-(define_insn \"aarch64_<su>abd<mode>_3\"\n+(define_insn \"aarch64_<su>abd<mode>\"\n   [(set (match_operand:VDQ_BHSI 0 \"register_operand\" \"=w\")\n \t(minus:VDQ_BHSI\n \t  (USMAX:VDQ_BHSI\n@@ -842,7 +842,7 @@\n       {\n \trtx ones = force_reg (V16QImode, CONST1_RTX (V16QImode));\n \trtx abd = gen_reg_rtx (V16QImode);\n-\temit_insn (gen_aarch64_<sur>abdv16qi_3 (abd, operands[1], operands[2]));\n+\temit_insn (gen_aarch64_<sur>abdv16qi (abd, operands[1], operands[2]));\n \temit_insn (gen_aarch64_udotv16qi (operands[0], operands[3],\n \t\t\t\t\t  abd, ones));\n \tDONE;"}, {"sha": "77f917143e8db8f535aa190a3d9a97ee3fcd57ad", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 12, "deletions": 72, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79db5945ade4480d7500dac6bea64f49331e0cde/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79db5945ade4480d7500dac6bea64f49331e0cde/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=79db5945ade4480d7500dac6bea64f49331e0cde", "patch": "@@ -6849,72 +6849,42 @@ __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabd_s8 (int8x8_t __a, int8x8_t __b)\n {\n-  int8x8_t __result;\n-  __asm__ (\"sabd %0.8b, %1.8b, %2.8b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return  __builtin_aarch64_sabdv8qi (__a, __b);\n }\n \n __extension__ extern __inline int16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabd_s16 (int16x4_t __a, int16x4_t __b)\n {\n-  int16x4_t __result;\n-  __asm__ (\"sabd %0.4h, %1.4h, %2.4h\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return  __builtin_aarch64_sabdv4hi (__a, __b);\n }\n \n __extension__ extern __inline int32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabd_s32 (int32x2_t __a, int32x2_t __b)\n {\n-  int32x2_t __result;\n-  __asm__ (\"sabd %0.2s, %1.2s, %2.2s\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return  __builtin_aarch64_sabdv2si (__a, __b);\n }\n \n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabd_u8 (uint8x8_t __a, uint8x8_t __b)\n {\n-  uint8x8_t __result;\n-  __asm__ (\"uabd %0.8b, %1.8b, %2.8b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return  __builtin_aarch64_uabdv8qi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabd_u16 (uint16x4_t __a, uint16x4_t __b)\n {\n-  uint16x4_t __result;\n-  __asm__ (\"uabd %0.4h, %1.4h, %2.4h\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return  __builtin_aarch64_uabdv4hi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabd_u32 (uint32x2_t __a, uint32x2_t __b)\n {\n-  uint32x2_t __result;\n-  __asm__ (\"uabd %0.2s, %1.2s, %2.2s\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return  __builtin_aarch64_uabdv2si_uuu (__a, __b);\n }\n \n __extension__ extern __inline int16x8_t\n@@ -7065,72 +7035,42 @@ __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabdq_s8 (int8x16_t __a, int8x16_t __b)\n {\n-  int8x16_t __result;\n-  __asm__ (\"sabd %0.16b, %1.16b, %2.16b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return  __builtin_aarch64_sabdv16qi (__a, __b);\n }\n \n __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabdq_s16 (int16x8_t __a, int16x8_t __b)\n {\n-  int16x8_t __result;\n-  __asm__ (\"sabd %0.8h, %1.8h, %2.8h\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return  __builtin_aarch64_sabdv8hi (__a, __b);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabdq_s32 (int32x4_t __a, int32x4_t __b)\n {\n-  int32x4_t __result;\n-  __asm__ (\"sabd %0.4s, %1.4s, %2.4s\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return  __builtin_aarch64_sabdv4si (__a, __b);\n }\n \n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabdq_u8 (uint8x16_t __a, uint8x16_t __b)\n {\n-  uint8x16_t __result;\n-  __asm__ (\"uabd %0.16b, %1.16b, %2.16b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return  __builtin_aarch64_uabdv16qi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabdq_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n-  uint16x8_t __result;\n-  __asm__ (\"uabd %0.8h, %1.8h, %2.8h\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return  __builtin_aarch64_uabdv8hi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabdq_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n-  uint32x4_t __result;\n-  __asm__ (\"uabd %0.4s, %1.4s, %2.4s\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return  __builtin_aarch64_uabdv4si_uuu (__a, __b);\n }\n \n __extension__ extern __inline int16_t"}]}