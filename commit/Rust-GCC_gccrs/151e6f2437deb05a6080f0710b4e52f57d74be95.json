{"sha": "151e6f2437deb05a6080f0710b4e52f57d74be95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUxZTZmMjQzN2RlYjA1YTYwODBmMDcxMGI0ZTUyZjU3ZDc0YmU5NQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2007-01-08T11:18:40Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2007-01-08T11:18:40Z"}, "message": "cgraphunit.c (cgraph_process_new_functions): Reset reachable flag.\n\n\n\t* cgraphunit.c (cgraph_process_new_functions): Reset reachable flag.\n\t(cgraph_analyze_function): break out from ...\n\t(cgraph_finalize_compilation_unit): ... here.\n\t(cgraph_expand_function): Remove forgoten commented out line.\n\t(cgraph_optimize): Analyze functions.\n\nFrom-SVN: r120577", "tree": {"sha": "dd11cbed73b9d880d131ca6d1ee7b69822d454cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd11cbed73b9d880d131ca6d1ee7b69822d454cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/151e6f2437deb05a6080f0710b4e52f57d74be95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/151e6f2437deb05a6080f0710b4e52f57d74be95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/151e6f2437deb05a6080f0710b4e52f57d74be95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/151e6f2437deb05a6080f0710b4e52f57d74be95/comments", "author": null, "committer": null, "parents": [{"sha": "f4b3ca7277845d4444997924301da6225ce19001", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4b3ca7277845d4444997924301da6225ce19001", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4b3ca7277845d4444997924301da6225ce19001"}], "stats": {"total": 73, "additions": 47, "deletions": 26}, "files": [{"sha": "dae9b9c17c15d6af50ca1bfb51d020d9eb4b2394", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/151e6f2437deb05a6080f0710b4e52f57d74be95/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/151e6f2437deb05a6080f0710b4e52f57d74be95/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=151e6f2437deb05a6080f0710b4e52f57d74be95", "patch": "@@ -1,3 +1,11 @@\n+2007-01-08  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraphunit.c (cgraph_process_new_functions): Reset reachable flag.\n+\t(cgraph_analyze_function): break out from ...\n+\t(cgraph_finalize_compilation_unit): ... here.\n+\t(cgraph_expand_function): Remove forgoten commented out line.\n+\t(cgraph_optimize): Analyze functions.\n+\n 2007-01-08  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-pas.h (TODO_remove_function): New flag."}, {"sha": "f10ed254244cb0e165e1cbaf29544a6ad9277818", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 39, "deletions": 26, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/151e6f2437deb05a6080f0710b4e52f57d74be95/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/151e6f2437deb05a6080f0710b4e52f57d74be95/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=151e6f2437deb05a6080f0710b4e52f57d74be95", "patch": "@@ -279,6 +279,7 @@ cgraph_process_new_functions (void)\n \t     it into reachable functions list.  */\n \n \t  node->next_needed = NULL;\n+\t  node->needed = node->reachable = false;\n \t  cgraph_finalize_function (fndecl, false);\n \t  cgraph_mark_reachable_node (node);\n \t  output = true;\n@@ -780,38 +781,21 @@ process_function_and_variable_attributes (struct cgraph_node *first,\n     }\n }\n \n-/* Analyze the whole compilation unit once it is parsed completely.  */\n+/* Process CGRAPH_NODES_NEEDED queue, analyze each function (and transitively\n+   each reachable functions) and build cgraph.\n+   The function can be called multiple times after inserting new nodes\n+   into beggining of queue.  Just the new part of queue is re-scanned then.  */\n \n-void\n-cgraph_finalize_compilation_unit (void)\n+static void\n+cgraph_analyze_functions (void)\n {\n-  struct cgraph_node *node, *next;\n   /* Keep track of already processed nodes when called multiple times for\n      intermodule optimization.  */\n   static struct cgraph_node *first_analyzed;\n   struct cgraph_node *first_processed = first_analyzed;\n   static struct varpool_node *first_analyzed_var;\n+  struct cgraph_node *node, *next;\n \n-  if (errorcount || sorrycount)\n-    return;\n-\n-  finish_aliases_1 ();\n-\n-  if (!flag_unit_at_a_time)\n-    {\n-      cgraph_output_pending_asms ();\n-      cgraph_assemble_pending_functions ();\n-      varpool_output_debug_info ();\n-      return;\n-    }\n-\n-  if (!quiet_flag)\n-    {\n-      fprintf (stderr, \"\\nAnalyzing compilation unit\\n\");\n-      fflush (stderr);\n-    }\n-\n-  timevar_push (TV_CGRAPH);\n   process_function_and_variable_attributes (first_processed,\n \t\t\t\t\t    first_analyzed_var);\n   first_processed = cgraph_nodes;\n@@ -825,6 +809,7 @@ cgraph_finalize_compilation_unit (void)\n \t  fprintf (cgraph_dump_file, \" %s\", cgraph_node_name (node));\n       fprintf (cgraph_dump_file, \"\\n\");\n     }\n+  cgraph_process_new_functions ();\n \n   /* Propagate reachability flag and lower representation of all reachable\n      functions.  In the future, lowering will introduce new functions and\n@@ -864,6 +849,7 @@ cgraph_finalize_compilation_unit (void)\n       first_processed = cgraph_nodes;\n       first_analyzed_var = varpool_nodes;\n       varpool_analyze_pending_decls ();\n+      cgraph_process_new_functions ();\n     }\n \n   /* Collect entry points to the unit.  */\n@@ -907,6 +893,34 @@ cgraph_finalize_compilation_unit (void)\n     }\n   first_analyzed = cgraph_nodes;\n   ggc_collect ();\n+}\n+\n+/* Analyze the whole compilation unit once it is parsed completely.  */\n+\n+void\n+cgraph_finalize_compilation_unit (void)\n+{\n+  if (errorcount || sorrycount)\n+    return;\n+\n+  finish_aliases_1 ();\n+\n+  if (!flag_unit_at_a_time)\n+    {\n+      cgraph_output_pending_asms ();\n+      cgraph_assemble_pending_functions ();\n+      varpool_output_debug_info ();\n+      return;\n+    }\n+\n+  if (!quiet_flag)\n+    {\n+      fprintf (stderr, \"\\nAnalyzing compilation unit\\n\");\n+      fflush (stderr);\n+    }\n+\n+  timevar_push (TV_CGRAPH);\n+  cgraph_analyze_functions ();\n   timevar_pop (TV_CGRAPH);\n }\n /* Figure out what functions we want to assemble.  */\n@@ -970,7 +984,6 @@ cgraph_expand_function (struct cgraph_node *node)\n     announce_function (decl);\n \n   gcc_assert (node->lowered);\n-  /*cgraph_lower_function (node);*/\n \n   /* Generate RTL for the body of DECL.  */\n   lang_hooks.callgraph.expand_function (decl);\n@@ -1190,7 +1203,7 @@ cgraph_optimize (void)\n   /* Frontend may output common variables after the unit has been finalized.\n      It is safe to deal with them here as they are always zero initialized.  */\n   varpool_analyze_pending_decls ();\n-  cgraph_process_new_functions ();\n+  cgraph_analyze_functions ();\n \n   timevar_push (TV_CGRAPHOPT);\n   if (pre_ipa_mem_report)"}]}