{"sha": "72a08131a54c465340bcd7299e4607be98c9c922", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJhMDgxMzFhNTRjNDY1MzQwYmNkNzI5OWU0NjA3YmU5OGM5YzkyMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-10-09T15:42:44Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-10-09T15:42:44Z"}, "message": "call.c (standard_conversion): Add bad conversion between integers and pointers.\n\n        * call.c (standard_conversion): Add bad conversion between\n        integers and pointers.\n        (convert_like_real): Don't use convert_for_initialization for bad\n        conversions; complain here and use cp_convert.\n        (build_over_call): Don't handle bad conversions specially.\n        (perform_implicit_conversion): Allow bad conversions.\n        (can_convert_arg_bad): New fn.\n        * cp-tree.h: Declare it.\n        * typeck.c (convert_for_assignment): Use it.\n        (ptr_reasonably_similar): Any target type is similar to void.\n\nFrom-SVN: r46123", "tree": {"sha": "e49040b8bab3a4dbe67305f23cb5674aab23f0b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e49040b8bab3a4dbe67305f23cb5674aab23f0b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72a08131a54c465340bcd7299e4607be98c9c922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72a08131a54c465340bcd7299e4607be98c9c922", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72a08131a54c465340bcd7299e4607be98c9c922", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72a08131a54c465340bcd7299e4607be98c9c922/comments", "author": null, "committer": null, "parents": [{"sha": "2ba84f36eaafd1d53db407e775fff7a286efe004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ba84f36eaafd1d53db407e775fff7a286efe004", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ba84f36eaafd1d53db407e775fff7a286efe004"}], "stats": {"total": 112, "additions": 77, "deletions": 35}, "files": [{"sha": "4ab1f199637a79e7f0a2aa9b2bad0d7bb1969a7f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a08131a54c465340bcd7299e4607be98c9c922/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a08131a54c465340bcd7299e4607be98c9c922/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=72a08131a54c465340bcd7299e4607be98c9c922", "patch": "@@ -1,3 +1,20 @@\n+2001-10-04  Jason Merrill  <jason_merrill@redhat.com>\n+\n+\t* call.c (standard_conversion): Add bad conversion between\n+\tintegers and pointers.\n+\t(convert_like_real): Don't use convert_for_initialization for bad\n+\tconversions; complain here and use cp_convert.\n+\t(build_over_call): Don't handle bad conversions specially.\n+\t(perform_implicit_conversion): Allow bad conversions.\n+\t(can_convert_arg_bad): New fn.\n+\t* cp-tree.h: Declare it.\n+\t* typeck.c (convert_for_assignment): Use it.\n+\t(ptr_reasonably_similar): Any target type is similar to void.\n+\n+2001-10-02  Jason Merrill  <jason_merrill@redhat.com>\n+\n+\t* decl2.c (cxx_decode_option): Add 'else'.\n+\n 2001-10-08  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* Make-lang.in (CXX_OBJS): Added cp-lang.o.\n@@ -238,7 +255,7 @@ Fri Sep 21 08:16:19 2001  J\"orn Rennecke <amylaar@redhat.com>\n \tCLASSTYPE_PURE_VIRTUALS.\n \t(TYPE_RAISES_EXCEPTIONS): Map onto TYPE_BINFO.\n \t* class.c (duplicate_tag_error): Remove TYPE_NONCOPIED_PARTS.\n-\t(layout_class_type): Don't call fixup_inlin_methods here ...\n+\t(layout_class_type): Don't call fixup_inline_methods here ...\n \t(finish_struct_1): ... call it here.\n \n 2001-09-04  Mark Mitchell  <mark@codesourcery.com>"}, {"sha": "43d2baf1fb1dc0e6d427353d8e523f90db38264a", "filename": "gcc/cp/call.c", "status": "modified", "additions": 30, "deletions": 31, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a08131a54c465340bcd7299e4607be98c9c922/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a08131a54c465340bcd7299e4607be98c9c922/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=72a08131a54c465340bcd7299e4607be98c9c922", "patch": "@@ -745,6 +745,14 @@ standard_conversion (to, from, expr)\n     {\n       conv = build_conv (STD_CONV, to, conv);\n     }\n+  else if ((tcode == INTEGER_TYPE && fcode == POINTER_TYPE)\n+\t   || (tcode == POINTER_TYPE && fcode == INTEGER_TYPE))\n+    {\n+      /* For backwards brain damage compatibility, allow interconversion of\n+\t pointers and integers with a pedwarn.  */\n+      conv = build_conv (STD_CONV, to, conv);\n+      ICS_BAD_FLAG (conv) = 1;\n+    }\n   else if (tcode == POINTER_TYPE && fcode == POINTER_TYPE)\n     {\n       enum tree_code ufcode = TREE_CODE (TREE_TYPE (from));\n@@ -3750,9 +3758,10 @@ convert_like_real (convs, expr, fn, argnum, inner)\n \t  else if (TREE_CODE (t) == IDENTITY_CONV)\n \t    break;\n \t}\n-      return convert_for_initialization\n-\t(NULL_TREE, totype, expr, LOOKUP_NORMAL,\n-\t \"conversion\", fn, argnum);\n+      cp_pedwarn (\"invalid conversion from `%T' to `%T'\", TREE_TYPE (expr), totype);\n+      if (fn)\n+\tcp_pedwarn (\"  initializing argument %P of `%D'\", argnum, fn);\n+      return cp_convert (totype, expr);\n     }\n   \n   if (!inner)\n@@ -4152,32 +4161,8 @@ build_over_call (cand, args, flags)\n       tree type = TREE_VALUE (parm);\n \n       conv = TREE_VEC_ELT (convs, i);\n-      if (ICS_BAD_FLAG (conv))\n-\t{\n-\t  tree t = conv;\n-\t  val = TREE_VALUE (arg);\n-\n-\t  for (; t; t = TREE_OPERAND (t, 0))\n-\t    {\n-\t      if (TREE_CODE (t) == USER_CONV\n-\t\t  || TREE_CODE (t) == AMBIG_CONV)\n-\t\t{\n-\t\t  val = convert_like_with_context (t, val, fn, i - is_method);\n-\t\t  break;\n-\t\t}\n-\t      else if (TREE_CODE (t) == IDENTITY_CONV)\n-\t\tbreak;\n-\t    }\n-\t  val = convert_for_initialization\n-\t    (NULL_TREE, type, val, LOOKUP_NORMAL,\n-\t     \"argument\", fn, i - is_method);\n-\t}\n-      else\n-\t{\n-\t  val = TREE_VALUE (arg);\n-\t  val = convert_like_with_context\n-\t          (conv, TREE_VALUE (arg), fn, i - is_method);\n-\t}\n+      val = convert_like_with_context\n+\t(conv, TREE_VALUE (arg), fn, i - is_method);\n \n       if (PROMOTE_PROTOTYPES\n \t  && INTEGRAL_TYPE_P (type)\n@@ -5550,7 +5535,21 @@ can_convert_arg (to, from, arg)\n   return (t && ! ICS_BAD_FLAG (t));\n }\n \n-/* Convert EXPR to TYPE.  Return the converted expression.  */\n+/* Like can_convert_arg, but allows dubious conversions as well.  */\n+\n+int\n+can_convert_arg_bad (to, from, arg)\n+     tree to, from, arg;\n+{\n+  tree t = implicit_conversion (to, from, arg, LOOKUP_NORMAL);\n+  return !!t;\n+}\n+\n+/* Convert EXPR to TYPE.  Return the converted expression.\n+\n+   Note that we allow bad conversions here because by the time we get to\n+   this point we are committed to doing the conversion.  If we end up\n+   doing a bad conversion, convert_like will complain.  */\n \n tree\n perform_implicit_conversion (type, expr)\n@@ -5563,7 +5562,7 @@ perform_implicit_conversion (type, expr)\n     return error_mark_node;\n   conv = implicit_conversion (type, TREE_TYPE (expr), expr,\n \t\t\t      LOOKUP_NORMAL);\n-  if (!conv || ICS_BAD_FLAG (conv))\n+  if (!conv)\n     {\n       cp_error (\"could not convert `%E' to `%T'\", expr, type);\n       return error_mark_node;"}, {"sha": "4f6bcabd788f720c49cde799c26d52d9823ab7b9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a08131a54c465340bcd7299e4607be98c9c922/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a08131a54c465340bcd7299e4607be98c9c922/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=72a08131a54c465340bcd7299e4607be98c9c922", "patch": "@@ -3489,6 +3489,7 @@ extern tree build_new_op\t\t\tPARAMS ((enum tree_code, int, tree, tree, tree));\n extern tree build_op_delete_call\t\tPARAMS ((enum tree_code, tree, tree, int, tree));\n extern int can_convert\t\t\t\tPARAMS ((tree, tree));\n extern int can_convert_arg\t\t\tPARAMS ((tree, tree, tree));\n+extern int can_convert_arg_bad\t\t\tPARAMS ((tree, tree, tree));\n extern int enforce_access                       PARAMS ((tree, tree));\n extern tree convert_default_arg                 PARAMS ((tree, tree, tree, int));\n extern tree convert_arg_to_ellipsis             PARAMS ((tree));"}, {"sha": "850ce8be826c8a39a2ad8738ec2e7d8e6c8b57f8", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a08131a54c465340bcd7299e4607be98c9c922/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a08131a54c465340bcd7299e4607be98c9c922/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=72a08131a54c465340bcd7299e4607be98c9c922", "patch": "@@ -6295,8 +6295,12 @@ convert_for_assignment (type, rhs, errtype, fndecl, parmnum)\n   /* [expr.ass]\n \n      The expression is implicitly converted (clause _conv_) to the\n-     cv-unqualified type of the left operand.  */\n-  if (!can_convert_arg (type, rhstype, rhs))\n+     cv-unqualified type of the left operand.\n+\n+     We allow bad conversions here because by the time we get to this point\n+     we are committed to doing the conversion.  If we end up doing a bad\n+     conversion, convert_like will complain.  */\n+  if (!can_convert_arg_bad (type, rhstype, rhs))\n     {\n       /* When -Wno-pmf-conversions is use, we just silently allow\n \t conversions from pointers-to-members to plain pointers.  If\n@@ -6305,7 +6309,7 @@ convert_for_assignment (type, rhs, errtype, fndecl, parmnum)\n \t  && TYPE_PTR_P (type) \n \t  && TYPE_PTRMEMFUNC_P (rhstype))\n \trhs = cp_convert (strip_top_quals (type), rhs);\n-      else \n+      else\n \t{\n \t  /* If the right-hand side has unknown type, then it is an\n \t     overloaded function.  Call instantiate_type to get error\n@@ -6798,6 +6802,11 @@ ptr_reasonably_similar (to, from)\n {\n   for (; ; to = TREE_TYPE (to), from = TREE_TYPE (from))\n     {\n+      /* Any target type is similar enough to void.  */\n+      if (TREE_CODE (to) == VOID_TYPE\n+\t  || TREE_CODE (from) == VOID_TYPE)\n+\treturn 1;\n+\n       if (TREE_CODE (to) != TREE_CODE (from))\n \treturn 0;\n "}, {"sha": "4c0d848c8cc76248a8006d45c4e4d8ed03dc6c3e", "filename": "gcc/testsuite/g++.dg/ext/conv1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a08131a54c465340bcd7299e4607be98c9c922/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconv1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a08131a54c465340bcd7299e4607be98c9c922/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconv1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconv1.C?ref=72a08131a54c465340bcd7299e4607be98c9c922", "patch": "@@ -0,0 +1,16 @@\n+// Test for backwards brain-damage compatibility with -fpermissive.\n+// { dg-options \"-fpermissive -w\" }\n+\n+void f ();\n+void f (int *);\n+void g (int);\n+\n+int main ()\n+{\n+  void *v = 1234;\n+  void (*p)() = v;\n+  int i = v;\n+  f (i);\n+  f (v);\n+  g (v);\n+}"}]}