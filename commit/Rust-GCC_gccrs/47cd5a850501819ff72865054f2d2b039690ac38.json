{"sha": "47cd5a850501819ff72865054f2d2b039690ac38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdjZDVhODUwNTAxODE5ZmY3Mjg2NTA1NGYyZDJiMDM5NjkwYWMzOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2016-04-10T09:32:46Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2016-04-10T09:32:46Z"}, "message": "re PR c++/69066 (SFINAE compilation error on lambda with trailing return type)\n\n2016-04-10  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/69066\n\t* g++.dg/cpp1y/pr69066.C: New.\n\nFrom-SVN: r234869", "tree": {"sha": "3315362ca429e9e9f027bc9a504a024178b13317", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3315362ca429e9e9f027bc9a504a024178b13317"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47cd5a850501819ff72865054f2d2b039690ac38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47cd5a850501819ff72865054f2d2b039690ac38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47cd5a850501819ff72865054f2d2b039690ac38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47cd5a850501819ff72865054f2d2b039690ac38/comments", "author": null, "committer": null, "parents": [{"sha": "c27e432ed83ff35dd04e2951d5aae4a20b3428b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c27e432ed83ff35dd04e2951d5aae4a20b3428b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c27e432ed83ff35dd04e2951d5aae4a20b3428b7"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "77b614b2db7331c36341808b99abd699fdb579a2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47cd5a850501819ff72865054f2d2b039690ac38/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47cd5a850501819ff72865054f2d2b039690ac38/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=47cd5a850501819ff72865054f2d2b039690ac38", "patch": "@@ -1,3 +1,8 @@\n+2016-04-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/69066\n+\t* g++.dg/cpp1y/pr69066.C: New.\n+\n 2016-04-09  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/68566"}, {"sha": "263e1b61e9f9076027afa44b19c51030ba5627f1", "filename": "gcc/testsuite/g++.dg/cpp1y/pr69066.C", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47cd5a850501819ff72865054f2d2b039690ac38/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr69066.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47cd5a850501819ff72865054f2d2b039690ac38/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr69066.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr69066.C?ref=47cd5a850501819ff72865054f2d2b039690ac38", "patch": "@@ -0,0 +1,75 @@\n+// PR c++/69066\n+// { dg-do compile { target c++14 } }\n+\n+template <typename T> T&& declval();\n+\n+template<typename T, T v>\n+struct integral_constant\n+{\n+  static constexpr T                value = v;\n+  typedef T                         value_type;\n+  typedef integral_constant<T, v>   type;\n+  constexpr operator value_type() const { return value; }\n+};\n+\n+typedef integral_constant<bool, true>     true_type;\n+typedef integral_constant<bool, false>    false_type;\n+\n+template <typename...>\n+using void_t = void;\n+\n+template <typename, typename = void>\n+class is_zero_callable : public false_type\n+{\n+};\n+\n+template <typename T>\n+class is_zero_callable<T, void_t<decltype(declval<T>()())>>\n+    : public true_type\n+{\n+};\n+\n+template <typename TF, bool TLastStep>\n+struct curry_impl\n+{\n+    static auto exec(TF f)\n+    {\n+        // Bind `x` to subsequent calls.\n+        return [=](auto x)\n+        {\n+            auto bound_f = [=](auto... xs) -> decltype(f(x, xs...))\n+            {\n+                return f(x, xs...);\n+            };\n+\n+            // Recursive step.\n+            return curry_impl<decltype(bound_f),\n+                is_zero_callable<decltype(bound_f)>{}>::exec(bound_f);\n+        };\n+    }\n+};\n+\n+template <typename TF>\n+struct curry_impl<TF, true>\n+{\n+    static auto exec(TF f)\n+    {\n+        return f();\n+    }\n+};\n+\n+template <typename TF>\n+auto curry(TF f)\n+{\n+    return curry_impl<TF, is_zero_callable<decltype(f)>{}>::exec(f);\n+}\n+\n+int main()\n+{\n+    auto sum = [](int x, int y)\n+    {\n+        return x + y;\n+    };\n+\n+    (void)curry(sum)(1)(1);\n+}"}]}