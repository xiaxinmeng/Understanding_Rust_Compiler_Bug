{"sha": "47d524a636a00be5a7a2c65b1c7dc5beaa9bc1e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdkNTI0YTYzNmEwMGJlNWE3YTJjNjViMWM3ZGM1YmVhYTliYzFlNw==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:25Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:25Z"}, "message": "VAX: Use a mode iterator to produce individual interlocked branches\n\nRegardless of the machine mode all the interlocked branches of the same\nkind, one of the two provided by the ISA, use the same RTL patterns and\nmachine instructions, except for the memory operand's constraint.\n\nRemove code duplication then and make use of a mode iterator combined\nwith an attribute to expand the same insn patterns with the constraint\nsuitably substituted from a single template.  No functional change.\n\n\tgcc/\n\t* config/vax/builtins.md (bb_mem): New mode attribute.\n\t(jbbssiqi, jbbssihi, jbbssisi): Fold insns into...\n\t(jbbssi<mode>): ... this.\n\t(jbbcciqi, jbbccihi, jbbccisi): Likewise...\n\t(jbbcci<mode>): ... this.", "tree": {"sha": "4d9112d91ce2d620784ae818dc6e8774014a92be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d9112d91ce2d620784ae818dc6e8774014a92be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47d524a636a00be5a7a2c65b1c7dc5beaa9bc1e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47d524a636a00be5a7a2c65b1c7dc5beaa9bc1e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47d524a636a00be5a7a2c65b1c7dc5beaa9bc1e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47d524a636a00be5a7a2c65b1c7dc5beaa9bc1e7/comments", "author": null, "committer": null, "parents": [{"sha": "630c9a4d54de7c084e146afe82c6e89a9f2cf3d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630c9a4d54de7c084e146afe82c6e89a9f2cf3d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/630c9a4d54de7c084e146afe82c6e89a9f2cf3d7"}], "stats": {"total": 96, "additions": 15, "deletions": 81}, "files": [{"sha": "473b44f489f3da3eb6d6c472bd083f9798410d55", "filename": "gcc/config/vax/builtins.md", "status": "modified", "additions": 15, "deletions": 81, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d524a636a00be5a7a2c65b1c7dc5beaa9bc1e7/gcc%2Fconfig%2Fvax%2Fbuiltins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d524a636a00be5a7a2c65b1c7dc5beaa9bc1e7/gcc%2Fconfig%2Fvax%2Fbuiltins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fbuiltins.md?ref=47d524a636a00be5a7a2c65b1c7dc5beaa9bc1e7", "patch": "@@ -24,6 +24,8 @@\n   ]\n )\n \n+(define_mode_attr bb_mem [(QI \"m\") (HI \"Q\") (SI \"Q\")])\n+\n (define_expand \"ffssi2\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t(ffs:SI (match_operand:SI 1 \"general_operand\" \"\")))]\n@@ -73,58 +75,24 @@\n   DONE;\n }\")\n \n-(define_insn \"jbbssiqi\"\n-  [(parallel\n-    [(set (pc)\n-\t  (if_then_else\n-\t    (ne (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"g\")\n-\t\t\t\t (const_int 1)\n-\t\t\t\t (match_operand:SI 1 \"general_operand\" \"nrm\"))\n-\t\t(const_int 0))\n-\t    (label_ref (match_operand 2 \"\" \"\"))\n-\t    (pc)))\n-     (set (zero_extract:SI (match_operand:QI 3 \"memory_operand\" \"+0\")\n-\t\t\t   (const_int 1)\n-\t\t\t   (match_dup 1))\n-\t  (const_int 1))])]\n-  \"\"\n-  \"jbssi %1,%0,%l2\")\n-\n-(define_insn \"jbbssihi\"\n+(define_insn \"jbbssi<mode>\"\n   [(parallel\n     [(set (pc)\n \t  (if_then_else\n-\t    (ne (zero_extract:SI (match_operand:HI 0 \"memory_operand\" \"Q\")\n-\t\t\t\t (const_int 1)\n-\t\t\t\t (match_operand:SI 1 \"general_operand\" \"nrm\"))\n-\t\t(const_int 0))\n-\t    (label_ref (match_operand 2 \"\" \"\"))\n-\t    (pc)))\n-     (set (zero_extract:SI (match_operand:HI 3 \"memory_operand\" \"+0\")\n-\t\t\t   (const_int 1)\n-\t\t\t   (match_dup 1))\n-\t  (const_int 1))])]\n-  \"\"\n-  \"jbssi %1,%0,%l2\")\n-\n-(define_insn \"jbbssisi\"\n-  [(parallel\n-    [(set (pc)\n-\t  (if_then_else\n-\t    (ne (zero_extract:SI (match_operand:SI 0 \"memory_operand\" \"Q\")\n-\t\t\t\t (const_int 1)\n-\t\t\t\t (match_operand:SI 1 \"general_operand\" \"nrm\"))\n-\t\t(const_int 0))\n+\t    (eq (zero_extract:SI\n+\t\t  (match_operand:VAXint 0 \"memory_operand\" \"<bb_mem>\")\n+\t\t  (const_int 1)\n+\t\t  (match_operand:SI 1 \"general_operand\" \"nrmT\"))\n+\t\t(const_int 1))\n \t    (label_ref (match_operand 2 \"\" \"\"))\n \t    (pc)))\n-     (set (zero_extract:SI (match_operand:SI 3 \"memory_operand\" \"+0\")\n+     (set (zero_extract:SI (match_operand:VAXint 3 \"memory_operand\" \"+0\")\n \t\t\t   (const_int 1)\n \t\t\t   (match_dup 1))\n \t  (const_int 1))])]\n   \"\"\n   \"jbssi %1,%0,%l2\")\n \n-\n (define_expand \"sync_lock_release<mode>\"\n   [(set (match_operand:VAXint 0 \"memory_operand\" \"+m\")\n \t(unspec:VAXint [(match_operand:VAXint 1 \"const_int_operand\" \"n\")\n@@ -145,54 +113,20 @@\n   DONE;\n }\")\n \n-(define_insn \"jbbcciqi\"\n-  [(parallel\n-    [(set (pc)\n-\t  (if_then_else\n-\t    (eq (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"g\")\n-\t\t\t\t (const_int 1)\n-\t\t\t\t (match_operand:SI 1 \"general_operand\" \"nrm\"))\n-\t\t(const_int 0))\n-\t    (label_ref (match_operand 2 \"\" \"\"))\n-\t    (pc)))\n-     (set (zero_extract:SI (match_operand:QI 3 \"memory_operand\" \"+0\")\n-\t\t\t   (const_int 1)\n-\t\t\t   (match_dup 1))\n-\t  (const_int 0))])]\n-  \"\"\n-  \"jbcci %1,%0,%l2\")\n-\n-(define_insn \"jbbccihi\"\n+(define_insn \"jbbcci<mode>\"\n   [(parallel\n     [(set (pc)\n \t  (if_then_else\n-\t    (eq (zero_extract:SI (match_operand:HI 0 \"memory_operand\" \"Q\")\n-\t\t\t\t (const_int 1)\n-\t\t\t\t (match_operand:SI 1 \"general_operand\" \"nrm\"))\n+\t    (eq (zero_extract:SI\n+\t\t  (match_operand:VAXint 0 \"memory_operand\" \"<bb_mem>\")\n+\t\t  (const_int 1)\n+\t\t  (match_operand:SI 1 \"general_operand\" \"nrmT\"))\n \t\t(const_int 0))\n \t    (label_ref (match_operand 2 \"\" \"\"))\n \t    (pc)))\n-     (set (zero_extract:SI (match_operand:HI 3 \"memory_operand\" \"+0\")\n+     (set (zero_extract:SI (match_operand:VAXint 3 \"memory_operand\" \"+0\")\n \t\t\t   (const_int 1)\n \t\t\t   (match_dup 1))\n \t  (const_int 0))])]\n   \"\"\n   \"jbcci %1,%0,%l2\")\n-\n-(define_insn \"jbbccisi\"\n-  [(parallel\n-    [(set (pc)\n-\t  (if_then_else\n-\t    (eq (zero_extract:SI (match_operand:SI 0 \"memory_operand\" \"Q\")\n-\t\t\t\t (const_int 1)\n-\t\t\t\t (match_operand:SI 1 \"general_operand\" \"nrm\"))\n-\t\t(const_int 0))\n-\t    (label_ref (match_operand 2 \"\" \"\"))\n-\t    (pc)))\n-     (set (zero_extract:SI (match_operand:SI 3 \"memory_operand\" \"+0\")\n-\t\t\t   (const_int 1)\n-\t\t\t   (match_dup 1))\n-\t  (const_int 0))])]\n-  \"\"\n-  \"jbcci %1,%0,%l2\")\n-"}]}