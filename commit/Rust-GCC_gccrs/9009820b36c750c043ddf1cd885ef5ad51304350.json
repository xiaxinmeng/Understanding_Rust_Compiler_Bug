{"sha": "9009820b36c750c043ddf1cd885ef5ad51304350", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAwOTgyMGIzNmM3NTBjMDQzZGRmMWNkODg1ZWY1YWQ1MTMwNDM1MA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-06-28T07:33:11Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-06-28T07:33:11Z"}, "message": "tree-vect-transform.c (get_initial_def_for_reduction): Use correct type for DEF and INIT_VAL.\n\n        * tree-vect-transform.c (get_initial_def_for_reduction): Use correct\n        type for DEF and INIT_VAL.  Pretend MIN/MAX need epilogue adjustment.\n\n        * gcc.dg/vect/vect-reduc-1.c: Adjust test to properly validate MIN.\n        * gcc.dg/vect/vect-reduc-1char.c: Likewise.\n        * gcc.dg/vect/vect-reduc-1short.c: Likewise.\n        * gcc.dg/vect/vect-reduc-2.c: Likewise.\n        * gcc.dg/vect/vect-reduc-2char.c: Likewise.\n        * gcc.dg/vect/vect-reduc-2short.c: Likewise.\n\nFrom-SVN: r101374", "tree": {"sha": "a76aa441f59535fd8bdbfeb92703378a73e5d240", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a76aa441f59535fd8bdbfeb92703378a73e5d240"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9009820b36c750c043ddf1cd885ef5ad51304350", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9009820b36c750c043ddf1cd885ef5ad51304350", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9009820b36c750c043ddf1cd885ef5ad51304350", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9009820b36c750c043ddf1cd885ef5ad51304350/comments", "author": null, "committer": null, "parents": [{"sha": "69a2964c42159ac49c3ce1b372082a50798064bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69a2964c42159ac49c3ce1b372082a50798064bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69a2964c42159ac49c3ce1b372082a50798064bb"}], "stats": {"total": 149, "additions": 79, "deletions": 70}, "files": [{"sha": "4a537759a9b86582eb0069a6bfbb5a139a99b761", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9009820b36c750c043ddf1cd885ef5ad51304350/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9009820b36c750c043ddf1cd885ef5ad51304350/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9009820b36c750c043ddf1cd885ef5ad51304350", "patch": "@@ -1,3 +1,8 @@\n+2005-06-27  Richard Henderson  <rth@redhat.com>\n+\n+\t* tree-vect-transform.c (get_initial_def_for_reduction): Use correct\n+\ttype for DEF and INIT_VAL.  Pretend MIN/MAX need epilogue adjustment.\n+\n 2005-06-27  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/sse.md (vec_shl_<SSEMODEI>, vec_shr_<SSEMODEI>): New."}, {"sha": "4110b33e9ea000a4134198c7596bc948f85e8426", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9009820b36c750c043ddf1cd885ef5ad51304350/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9009820b36c750c043ddf1cd885ef5ad51304350/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9009820b36c750c043ddf1cd885ef5ad51304350", "patch": "@@ -1,3 +1,12 @@\n+2005-06-27  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.dg/vect/vect-reduc-1.c: Adjust test to properly validate MIN.\n+\t* gcc.dg/vect/vect-reduc-1char.c: Likewise.\n+\t* gcc.dg/vect/vect-reduc-1short.c: Likewise.\n+\t* gcc.dg/vect/vect-reduc-2.c: Likewise.\n+\t* gcc.dg/vect/vect-reduc-2char.c: Likewise.\n+\t* gcc.dg/vect/vect-reduc-2short.c: Likewise.\n+\n 2005-06-27  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.dg/vect/vect-reduc-1short.c: Remove XFAIL."}, {"sha": "a58257993809724749e0999e593285a07f237414", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-1.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9009820b36c750c043ddf1cd885ef5ad51304350/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9009820b36c750c043ddf1cd885ef5ad51304350/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-1.c?ref=9009820b36c750c043ddf1cd885ef5ad51304350", "patch": "@@ -8,14 +8,14 @@\n \n /* Test vectorization of reduction of unsigned-int.  */\n \n-int main1 (unsigned int x, unsigned int max_result)\n+void main1 (unsigned int x, unsigned int max_result, unsigned int min_result)\n {\n   int i;\n-  unsigned int ub[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n-  unsigned int uc[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  unsigned int ub[N] = {1,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  unsigned int uc[N] = {1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n   unsigned int udiff = 2;\n   unsigned int umax = x;\n-  unsigned int umin = 10;\n+  unsigned int umin = x;\n \n   /* Summation.  */\n   for (i = 0; i < N; i++) {\n@@ -37,18 +37,17 @@ int main1 (unsigned int x, unsigned int max_result)\n     abort ();\n   if (umax != max_result)\n     abort ();\n-  if (umin != 0)\n+  if (umin != min_result)\n     abort ();\n-\n-  return 0;\n }\n \n int main (void)\n { \n   check_vect ();\n   \n-  main1 (100, 100);\n-  main1 (0, 15);\n+  main1 (100, 100, 1);\n+  main1 (0, 15, 0);\n+  return 0;\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { xfail i?86-*-* x86_64-*-* } } } */"}, {"sha": "418687dd23bfaec0ddb77b8a8e2969ad1ee9522a", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-1char.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9009820b36c750c043ddf1cd885ef5ad51304350/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-1char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9009820b36c750c043ddf1cd885ef5ad51304350/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-1char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-1char.c?ref=9009820b36c750c043ddf1cd885ef5ad51304350", "patch": "@@ -6,14 +6,15 @@\n #define N 16\n #define DIFF 242\n \n-int main1 (unsigned char x, unsigned char max_result)\n+void\n+main1 (unsigned char x, unsigned char max_result, unsigned char min_result)\n {\n   int i;\n-  unsigned char ub[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n-  unsigned char uc[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  unsigned char ub[N] = {1,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  unsigned char uc[N] = {1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n   unsigned char udiff = 2;\n   unsigned char umax = x;\n-  unsigned char umin = 10;\n+  unsigned char umin = x;\n \n   for (i = 0; i < N; i++) {\n     udiff += (unsigned char)(ub[i] - uc[i]);\n@@ -32,18 +33,16 @@ int main1 (unsigned char x, unsigned char max_result)\n     abort ();\n   if (umax != max_result)\n     abort ();\n-  if (umin != 0)\n+  if (umin != min_result)\n     abort ();\n-\n-  return 0;\n }\n \n int main (void)\n { \n   check_vect ();\n   \n-  main1 (100, 100);\n-  main1 (0, 15);\n+  main1 (100, 100, 1);\n+  main1 (0, 15, 0);\n   return 0;\n }\n "}, {"sha": "91d7abd12759839437b1922cd859e4b02d501862", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-1short.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9009820b36c750c043ddf1cd885ef5ad51304350/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-1short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9009820b36c750c043ddf1cd885ef5ad51304350/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-1short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-1short.c?ref=9009820b36c750c043ddf1cd885ef5ad51304350", "patch": "@@ -6,14 +6,15 @@\n #define N 16\n #define DIFF 242\n \n-int main1 (unsigned short x, unsigned short max_result)\n+void\n+main1 (unsigned short x, unsigned short max_result, unsigned short min_result)\n {\n   int i;\n-  unsigned short ub[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n-  unsigned short uc[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  unsigned short ub[N] = {1,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  unsigned short uc[N] = {1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n   unsigned short  udiff = 2;\n   unsigned short umax = x;\n-  unsigned short umin = 10;\n+  unsigned short umin = x;\n \n   for (i = 0; i < N; i++) {\n     udiff += (unsigned short)(ub[i] - uc[i]);\n@@ -32,18 +33,16 @@ int main1 (unsigned short x, unsigned short max_result)\n     abort ();\n   if (umax != max_result)\n     abort ();\n-  if (umin != 0)\n+  if (umin != min_result)\n     abort ();\n-\n-  return 0;\n }\n \n int main (void)\n { \n   check_vect ();\n   \n-  main1 (100, 100);\n-  main1 (0, 15);\n+  main1 (100, 100, 1);\n+  main1 (0, 15, 0);\n   return 0;\n }\n "}, {"sha": "ef4499f761d1d54caaa9598d7f2750d592c971e6", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-2.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9009820b36c750c043ddf1cd885ef5ad51304350/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9009820b36c750c043ddf1cd885ef5ad51304350/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2.c?ref=9009820b36c750c043ddf1cd885ef5ad51304350", "patch": "@@ -8,14 +8,14 @@\n \n /* Test vectorization of reduction of signed-int.  */\n \n-int main1 (int x, int max_result)\n+void main1 (int x, int max_result, int min_result)\n {\n   int i;\n-  int b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n-  int c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  int b[N] = {1,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  int c[N] = {1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n   int diff = 0;\n   int max = x;\n-  int min = 10;\n+  int min = x;\n \n   for (i = 0; i < N; i++) {\n     diff += (b[i] - c[i]);\n@@ -34,18 +34,16 @@ int main1 (int x, int max_result)\n     abort ();\n   if (max != max_result)\n     abort ();\n-  if (min != 0)\n+  if (min != min_result)\n     abort ();\n-\n-  return 0;\n }\n \n int main (void)\n { \n   check_vect ();\n   \n-  main1 (100, 100);\n-  main1 (0, 15);\n+  main1 (100, 100, 1);\n+  main1 (0, 15, 0);\n   return 0;\n }\n "}, {"sha": "f8a7b96fbc93be3b3562a58e68d507789e9035ae", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-2char.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9009820b36c750c043ddf1cd885ef5ad51304350/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9009820b36c750c043ddf1cd885ef5ad51304350/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2char.c?ref=9009820b36c750c043ddf1cd885ef5ad51304350", "patch": "@@ -6,17 +6,17 @@\n #define N 16\n #define DIFF 121\n \n-int main1 (char x, char max_result)\n+void main1 (signed char x, signed char max_result, signed char min_result)\n {\n   int i;\n-  char b[N] = {0,2,3,6,8,10,12,14,16,18,20,22,24,26,28,30};\n-  char c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  signed char b[N] = {1,2,3,6,8,10,12,14,16,18,20,22,24,26,28,30};\n+  signed char c[N] = {1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n   signed char diff = 2;\n-  char max = x;\n-  char min = 10;\n+  signed char max = x;\n+  signed char min = x;\n \n   for (i = 0; i < N; i++) {\n-    diff += (b[i] - c[i]);\n+    diff += (signed char)(b[i] - c[i]);\n   }\n \n   for (i = 0; i < N; i++) {\n@@ -32,19 +32,17 @@ int main1 (char x, char max_result)\n     abort ();\n   if (max != max_result)\n     abort ();\n-  if (min != 0)\n+  if (min != min_result)\n     abort ();\n-\n-  return 0;\n }\n \n int main (void)\n { \n   check_vect ();\n   \n-  main1 (100, 100);\n-  main1 (0, 15);\n-  return 0 ;\n+  main1 (100, 100, 1);\n+  main1 (0, 15, 0);\n+  return 0;\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" } } */"}, {"sha": "d4ac128563c18691a26eca92e1001a3828b0ff42", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-2short.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9009820b36c750c043ddf1cd885ef5ad51304350/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9009820b36c750c043ddf1cd885ef5ad51304350/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2short.c?ref=9009820b36c750c043ddf1cd885ef5ad51304350", "patch": "@@ -1,23 +1,22 @@\n /* { dg-require-effective-target vect_int } */\n \n #include <stdarg.h>\n-#include <stdio.h>\n #include \"tree-vect.h\"\n \n #define N 16\n #define DIFF 242\n \n-int main1 (short x, short max_result)\n+void main1 (short x, short max_result, short min_result)\n {\n   int i;\n-  short b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n-  short c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  short b[N] = {1,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  short c[N] = {1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n   short diff = 2;\n   short max = x;\n-  short min = 10;\n+  short min = x;\n \n   for (i = 0; i < N; i++) {\n-    diff += (b[i] - c[i]);\n+    diff += (short)(b[i] - c[i]);\n   }\n   for (i = 0; i < N; i++) {\n     max = max < c[i] ? c[i] : max;\n@@ -32,18 +31,16 @@ int main1 (short x, short max_result)\n     abort ();\n   if (max != max_result)\n     abort ();\n-  if (min != 0)\n+  if (min != min_result)\n     abort ();\n-\n-  return 0;\n }\n \n int main (void)\n { \n   check_vect ();\n   \n-  main1 (100, 100);\n-  main1 (0, 15);\n+  main1 (100, 100, 1);\n+  main1 (0, 15, 0);\n   return 0;\n }\n "}, {"sha": "852ff19033c6f545090d6398a46248c594b67ea9", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9009820b36c750c043ddf1cd885ef5ad51304350/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9009820b36c750c043ddf1cd885ef5ad51304350/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=9009820b36c750c043ddf1cd885ef5ad51304350", "patch": "@@ -727,8 +727,11 @@ get_initial_def_for_reduction (tree stmt, tree init_val, tree *scalar_def)\n   switch (code)\n   {\n   case PLUS_EXPR:\n-    def = INTEGRAL_TYPE_P (type) ? integer_zero_node :\n-                                   build_real (type, dconst0);\n+    if (INTEGRAL_TYPE_P (type))\n+      def = build_int_cst (type, 0);\n+    else\n+      def = build_real (type, dconst0);\n+\n #ifdef ADJUST_IN_EPILOG\n     /* All the 'nunits' elements are set to 0. The final result will be\n        adjusted by 'init_val' at the loop epilog.  */\n@@ -746,17 +749,15 @@ get_initial_def_for_reduction (tree stmt, tree init_val, tree *scalar_def)\n   case MAX_EXPR:\n     def = init_val;\n     nelements = nunits;\n-    need_epilog_adjust = false;\n+    need_epilog_adjust = true;\n     break;\n \n   default:\n     gcc_unreachable ();\n   }\n \n   for (i = nelements - 1; i >= 0; --i)\n-    {\n-      t = tree_cons (NULL_TREE, def, t);\n-    }\n+    t = tree_cons (NULL_TREE, def, t);\n \n   if (nelements == nunits - 1)\n     {\n@@ -771,11 +772,15 @@ get_initial_def_for_reduction (tree stmt, tree init_val, tree *scalar_def)\n   else\n     vec = build_constructor (vectype, t);\n     \n-  if (need_epilog_adjust)\n-    *scalar_def = init_val;\n-  else\n-    *scalar_def = INTEGRAL_TYPE_P (type) ? integer_zero_node\n-                                           : build_real (type, dconst0);\n+  if (!need_epilog_adjust)\n+    {\n+      if (INTEGRAL_TYPE_P (type))\n+\tinit_val = build_int_cst (type, 0);\n+      else\n+\tinit_val = build_real (type, dconst0);\n+    }\n+  *scalar_def = init_val;\n+\n   return vect_init_vector (stmt, vec);\n }\n "}]}