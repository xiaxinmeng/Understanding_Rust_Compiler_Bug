{"sha": "e10ca9544632dbff4759b4b92886cd96d0b9bdfe", "node_id": "C_kwDOANBUbNoAKGUxMGNhOTU0NDYzMmRiZmY0NzU5YjRiOTI4ODZjZDk2ZDBiOWJkZmU", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2022-10-20T14:54:39Z"}, "committer": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2022-10-20T14:54:39Z"}, "message": "vect: Fix vectype when widening container type in bitfield pattern [PR107326]\n\nThe 'vect_recog_bitfield_ref_pattern' was not correctly adapting the vectype\nwhen widening the container.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/107326\n\t* tree-vect-patterns.cc (vect_recog_bitfield_ref_pattern): Change\n\tvectype when widening container.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/vect/pr107326.c: New test.\n\t* gcc.dg/vect/vect-bitfield-read-7.c: New test.", "tree": {"sha": "829f428e858d0fa82e66f4213c08ec2c7125c4d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/829f428e858d0fa82e66f4213c08ec2c7125c4d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e10ca9544632dbff4759b4b92886cd96d0b9bdfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e10ca9544632dbff4759b4b92886cd96d0b9bdfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e10ca9544632dbff4759b4b92886cd96d0b9bdfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e10ca9544632dbff4759b4b92886cd96d0b9bdfe/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bf3a4d36a8e59297ea65dd479ffe696f0974303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bf3a4d36a8e59297ea65dd479ffe696f0974303", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bf3a4d36a8e59297ea65dd479ffe696f0974303"}], "stats": {"total": 76, "additions": 72, "deletions": 4}, "files": [{"sha": "333a515e7410a5b257a9f225b56b14b619af3118", "filename": "gcc/testsuite/gcc.dg/vect/pr107326.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e10ca9544632dbff4759b4b92886cd96d0b9bdfe/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr107326.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e10ca9544632dbff4759b4b92886cd96d0b9bdfe/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr107326.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr107326.c?ref=e10ca9544632dbff4759b4b92886cd96d0b9bdfe", "patch": "@@ -0,0 +1,24 @@\n+/* PR107326 */\n+/* { dg-do compile } */\n+struct Gsymtab {\n+  unsigned int : 8;\n+  unsigned int visited_somewhere : 1;\n+};\n+\n+extern struct Gsymtab glob_symtab[];\n+\n+int\n+visit_children (int i)\n+{\n+  int numvisited = 0;\n+\n+  while (i < 1)\n+    {\n+      if (glob_symtab[i].visited_somewhere)\n+        ++numvisited;\n+\n+      ++i;\n+    }\n+\n+  return numvisited;\n+}"}, {"sha": "3b505db2bd3eb6938d2f3b6f7426765333c271a4", "filename": "gcc/testsuite/gcc.dg/vect/vect-bitfield-read-7.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e10ca9544632dbff4759b4b92886cd96d0b9bdfe/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bitfield-read-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e10ca9544632dbff4759b4b92886cd96d0b9bdfe/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bitfield-read-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bitfield-read-7.c?ref=e10ca9544632dbff4759b4b92886cd96d0b9bdfe", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+extern void abort(void);\n+\n+struct s {\n+    unsigned i : 8;\n+    char a : 4;\n+};\n+\n+#define N 32\n+#define ELT0 {0xFUL, 0}\n+#define ELT1 {0xFUL, 1}\n+#define ELT2 {0xFUL, 2}\n+#define ELT3 {0xFUL, 3}\n+#define RES 48\n+struct s A[N]\n+  = { ELT0, ELT1, ELT2, ELT3, ELT0, ELT1, ELT2, ELT3,\n+      ELT0, ELT1, ELT2, ELT3, ELT0, ELT1, ELT2, ELT3,\n+      ELT0, ELT1, ELT2, ELT3, ELT0, ELT1, ELT2, ELT3,\n+      ELT0, ELT1, ELT2, ELT3, ELT0, ELT1, ELT2, ELT3};\n+\n+int __attribute__ ((noipa))\n+f(struct s *ptr, unsigned n) {\n+    int res = 0;\n+    for (int i = 0; i < n; ++i)\n+      res += ptr[i].a;\n+    return res;\n+}\n+\n+int main (void)\n+{\n+  check_vect ();\n+\n+  if (f(&A[0], N) != RES)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */"}, {"sha": "777ba2f59039a3e983c75c87bb253f86b27c9aa8", "filename": "gcc/tree-vect-patterns.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e10ca9544632dbff4759b4b92886cd96d0b9bdfe/gcc%2Ftree-vect-patterns.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e10ca9544632dbff4759b4b92886cd96d0b9bdfe/gcc%2Ftree-vect-patterns.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.cc?ref=e10ca9544632dbff4759b4b92886cd96d0b9bdfe", "patch": "@@ -1922,7 +1922,8 @@ vect_recog_bitfield_ref_pattern (vec_info *vinfo, stmt_vec_info stmt_info,\n   tree ret = gimple_assign_lhs (first_stmt);\n   tree ret_type = TREE_TYPE (ret);\n   bool shift_first = true;\n-  tree vectype = get_vectype_for_scalar_type (vinfo, TREE_TYPE (container));\n+  tree container_type = TREE_TYPE (container);\n+  tree vectype = get_vectype_for_scalar_type (vinfo, container_type);\n \n   /* We move the conversion earlier if the loaded type is smaller than the\n      return type to enable the use of widening loads.  */\n@@ -1933,15 +1934,15 @@ vect_recog_bitfield_ref_pattern (vec_info *vinfo, stmt_vec_info stmt_info,\n \t= gimple_build_assign (vect_recog_temp_ssa_var (ret_type),\n \t\t\t       NOP_EXPR, container);\n       container = gimple_get_lhs (pattern_stmt);\n-      append_pattern_def_seq (vinfo, stmt_info, pattern_stmt);\n+      container_type = TREE_TYPE (container);\n+      vectype = get_vectype_for_scalar_type (vinfo, container_type);\n+      append_pattern_def_seq (vinfo, stmt_info, pattern_stmt, vectype);\n     }\n   else if (!useless_type_conversion_p (TREE_TYPE (container), ret_type))\n     /* If we are doing the conversion last then also delay the shift as we may\n        be able to combine the shift and conversion in certain cases.  */\n     shift_first = false;\n \n-  tree container_type = TREE_TYPE (container);\n-\n   /* If the only use of the result of this BIT_FIELD_REF + CONVERT is a\n      PLUS_EXPR then do the shift last as some targets can combine the shift and\n      add into a single instruction.  */"}]}