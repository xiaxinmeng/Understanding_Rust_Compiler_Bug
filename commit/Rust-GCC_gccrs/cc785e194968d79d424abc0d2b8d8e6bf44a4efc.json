{"sha": "cc785e194968d79d424abc0d2b8d8e6bf44a4efc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M3ODVlMTk0OTY4ZDc5ZDQyNGFiYzBkMmI4ZDhlNmJmNDRhNGVmYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-03-17T05:30:55Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-03-17T05:30:55Z"}, "message": "Fix stuff accidentally committed in previous patch\n\nFrom-SVN: r79574", "tree": {"sha": "11089221bb3a5d63e8d8cd17b2167d496ae6f03f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11089221bb3a5d63e8d8cd17b2167d496ae6f03f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc785e194968d79d424abc0d2b8d8e6bf44a4efc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc785e194968d79d424abc0d2b8d8e6bf44a4efc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc785e194968d79d424abc0d2b8d8e6bf44a4efc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc785e194968d79d424abc0d2b8d8e6bf44a4efc/comments", "author": null, "committer": null, "parents": [{"sha": "7ae4afcbfaf35fedc06ce1d4619307ff2fb71c72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ae4afcbfaf35fedc06ce1d4619307ff2fb71c72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ae4afcbfaf35fedc06ce1d4619307ff2fb71c72"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "6c3c9785986824a92dd34bf23b57447cbe0d3f84", "filename": "gcc/fold-const.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc785e194968d79d424abc0d2b8d8e6bf44a4efc/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc785e194968d79d424abc0d2b8d8e6bf44a4efc/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=cc785e194968d79d424abc0d2b8d8e6bf44a4efc", "patch": "@@ -1392,7 +1392,7 @@ int_const_binop (enum tree_code code, tree arg1, tree arg2, int notrunc)\n       && ((hi == 0 && (HOST_WIDE_INT) low >= 0)\n \t  || (hi == -1 && (HOST_WIDE_INT) low < 0))\n       && overflow == 0 && ! TREE_OVERFLOW (arg1) && ! TREE_OVERFLOW (arg2))\n-    return size_int_type (low, type);\n+    return size_int_type_wide (low, type);\n   else\n     {\n       t = build_int_2 (low, hi);\n@@ -1598,7 +1598,7 @@ size_htab_eq (const void *x, const void *y)\n tree\n size_int_wide (HOST_WIDE_INT number, enum size_type_kind kind)\n {\n-  return size_int_type (number, sizetype_tab[(int) kind]);\n+  return size_int_type_wide (number, sizetype_tab[(int) kind]);\n }\n \n /* Likewise, but the desired type is specified explicitly.  */\n@@ -1608,7 +1608,7 @@ static GTY ((if_marked (\"ggc_marked_p\"), param_is (union tree_node)))\n      htab_t size_htab;\n \n tree\n-size_int_type_wide (HOST_WIDE_INT high, HOST_WIDE_INT low, tree type)\n+size_int_type_wide (HOST_WIDE_INT number, tree type)\n {\n   void **slot;\n \n@@ -1621,8 +1621,8 @@ size_int_type_wide (HOST_WIDE_INT high, HOST_WIDE_INT low, tree type)\n   /* Adjust NEW_CONST to be the constant we want.  If it's already in the\n      hash table, we return the value from the hash table.  Otherwise, we\n      place that in the hash table and make a new node for the next time.  */\n-  TREE_INT_CST_LOW (new_const) = low;\n-  TREE_INT_CST_HIGH (new_const) = high;\n+  TREE_INT_CST_LOW (new_const) = number;\n+  TREE_INT_CST_HIGH (new_const) = number < 0 ? -1 : 0;\n   TREE_TYPE (new_const) = type;\n   TREE_OVERFLOW (new_const) = TREE_CONSTANT_OVERFLOW (new_const)\n     = force_fit_type (new_const, 0);\n@@ -1745,7 +1745,7 @@ fold_convert_const (enum tree_code code, tree type, tree arg1)\n \t  if (TREE_CODE (type) == INTEGER_TYPE && TYPE_IS_SIZETYPE (type)\n \t      && !TREE_CONSTANT_OVERFLOW (arg1)\n \t      && compare_tree_int (arg1, 10000) < 0)\n-\t    return size_int_type (TREE_INT_CST_LOW (arg1), type);\n+\t    return size_int_type_wide (TREE_INT_CST_LOW (arg1), type);\n \n \t  /* Given an integer constant, make new constant with new type,\n \t     appropriately sign-extended or truncated.  */"}]}