{"sha": "c67dd256897a902e8b2fbddb04aba837e8131721", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY3ZGQyNTY4OTdhOTAyZThiMmZiZGRiMDRhYmE4MzdlODEzMTcyMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-11-21T02:04:54Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-11-21T02:04:54Z"}, "message": "re PR c++/48322 ([C++0x] Plural variadic parameter packs are not expanded well)\n\n\tPR c++/48322\ngcc/cp/\n\t* cp-tree.h (PACK_EXPANSION_EXTRA_ARGS): New.\n\t* cp-tree.def (EXPR_PACK_EXPANSION): Add an operand for it.\n\t* pt.c (tsubst_pack_expansion): Set and use it.\n\t(iterative_hash_template_arg): Hash it.\n\t(template_args_equal): Compare it.\n\t(comp_template_args_with_info): Handle nulls.\n\t* tree.c (cp_walk_subtrees): Walk it.\n\t* typeck.c (structural_comptypes): Compare it.\n\t* ptree.c (cxx_print_type): Print it.\nlibstdc++-v3/\n\t* include/std/tuple (tuple(_UElements&&...)): Fix SFINAE.\n\nFrom-SVN: r181547", "tree": {"sha": "cf2fb512923a06d1bef12f85419ce6c26fb8f50e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf2fb512923a06d1bef12f85419ce6c26fb8f50e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c67dd256897a902e8b2fbddb04aba837e8131721", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c67dd256897a902e8b2fbddb04aba837e8131721", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c67dd256897a902e8b2fbddb04aba837e8131721", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c67dd256897a902e8b2fbddb04aba837e8131721/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "80ca43a3140e5389e0b07621f9e30704f8371d20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ca43a3140e5389e0b07621f9e30704f8371d20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80ca43a3140e5389e0b07621f9e30704f8371d20"}], "stats": {"total": 172, "additions": 143, "deletions": 29}, "files": [{"sha": "93cd960a61139535f0cbc6fc1978056c289eec6a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67dd256897a902e8b2fbddb04aba837e8131721/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67dd256897a902e8b2fbddb04aba837e8131721/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c67dd256897a902e8b2fbddb04aba837e8131721", "patch": "@@ -1,5 +1,16 @@\n 2011-11-20  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/48322\n+\t* cp-tree.h (PACK_EXPANSION_EXTRA_ARGS): New.\n+\t* cp-tree.def (EXPR_PACK_EXPANSION): Add an operand for it.\n+\t* pt.c (tsubst_pack_expansion): Set and use it.\n+\t(iterative_hash_template_arg): Hash it.\n+\t(template_args_equal): Compare it.\n+\t(comp_template_args_with_info): Handle nulls.\n+\t* tree.c (cp_walk_subtrees): Walk it.\n+\t* typeck.c (structural_comptypes): Compare it.\n+\t* ptree.c (cxx_print_type): Print it.\n+\n \t* pt.c (type_unification_real): Set input_location\n \tduring default arg instantiation.\n "}, {"sha": "5fc5496ef9e2fd0d12ebd758b1e4a87329d852f4", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67dd256897a902e8b2fbddb04aba837e8131721/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67dd256897a902e8b2fbddb04aba837e8131721/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=c67dd256897a902e8b2fbddb04aba837e8131721", "patch": "@@ -419,7 +419,7 @@ DEFTREECODE (TYPE_PACK_EXPANSION, \"type_pack_expansion\", tcc_type, 0)\n \n    EXPR_PACK_EXPANSION plays precisely the same role as TYPE_PACK_EXPANSION,\n    but will be used for expressions.  */\n-DEFTREECODE (EXPR_PACK_EXPANSION, \"expr_pack_expansion\", tcc_expression, 2)\n+DEFTREECODE (EXPR_PACK_EXPANSION, \"expr_pack_expansion\", tcc_expression, 3)\n \n /* Selects the Ith parameter out of an argument pack. This node will\n    be used when instantiating pack expansions; see"}, {"sha": "3f4f4081f38e5a8652b962498aa304d119a19467", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67dd256897a902e8b2fbddb04aba837e8131721/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67dd256897a902e8b2fbddb04aba837e8131721/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c67dd256897a902e8b2fbddb04aba837e8131721", "patch": "@@ -2813,7 +2813,14 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n #define PACK_EXPANSION_PARAMETER_PACKS(NODE)\t\t\\\n   *(TREE_CODE (NODE) == EXPR_PACK_EXPANSION\t\t\\\n     ? &TREE_OPERAND (NODE, 1)\t\t\t\t\\\n-    : &TREE_CHAIN (TYPE_PACK_EXPANSION_CHECK (NODE)))\n+    : &TYPE_MINVAL (TYPE_PACK_EXPANSION_CHECK (NODE)))\n+\n+/* Any additional template args to be applied when substituting into\n+   the pattern, set by tsubst_pack_expansion for partial instantiations.  */\n+#define PACK_EXPANSION_EXTRA_ARGS(NODE)\t\t\\\n+  *(TREE_CODE (NODE) == TYPE_PACK_EXPANSION\t\\\n+    ? &TYPE_MAXVAL (NODE)\t\t\t\\\n+    : &TREE_OPERAND ((NODE), 2))\n \n /* Determine if this is an argument pack.  */\n #define ARGUMENT_PACK_P(NODE)                          \\"}, {"sha": "f0ee0c5f17e5da7bfedacbcfc17fda180e554b92", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 73, "deletions": 17, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67dd256897a902e8b2fbddb04aba837e8131721/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67dd256897a902e8b2fbddb04aba837e8131721/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c67dd256897a902e8b2fbddb04aba837e8131721", "patch": "@@ -1534,7 +1534,8 @@ iterative_hash_template_arg (tree arg, hashval_t val)\n \n     case TYPE_PACK_EXPANSION:\n     case EXPR_PACK_EXPANSION:\n-      return iterative_hash_template_arg (PACK_EXPANSION_PATTERN (arg), val);\n+      val = iterative_hash_template_arg (PACK_EXPANSION_PATTERN (arg), val);\n+      return iterative_hash_template_arg (PACK_EXPANSION_EXTRA_ARGS (arg), val);\n \n     case TYPE_ARGUMENT_PACK:\n     case NONTYPE_ARGUMENT_PACK:\n@@ -6902,9 +6903,11 @@ template_args_equal (tree ot, tree nt)\n     /* For member templates */\n     return TREE_CODE (ot) == TREE_VEC && comp_template_args (ot, nt);\n   else if (PACK_EXPANSION_P (ot))\n-    return PACK_EXPANSION_P (nt) \n-      && template_args_equal (PACK_EXPANSION_PATTERN (ot),\n-                              PACK_EXPANSION_PATTERN (nt));\n+    return (PACK_EXPANSION_P (nt)\n+\t    && template_args_equal (PACK_EXPANSION_PATTERN (ot),\n+\t\t\t\t    PACK_EXPANSION_PATTERN (nt))\n+\t    && template_args_equal (PACK_EXPANSION_EXTRA_ARGS (ot),\n+\t\t\t\t    PACK_EXPANSION_EXTRA_ARGS (nt)));\n   else if (ARGUMENT_PACK_P (ot))\n     {\n       int i, len;\n@@ -6954,6 +6957,12 @@ comp_template_args_with_info (tree oldargs, tree newargs,\n {\n   int i;\n \n+  if (oldargs == newargs)\n+    return 1;\n+\n+  if (!oldargs || !newargs)\n+    return 0;\n+\n   if (TREE_VEC_LENGTH (oldargs) != TREE_VEC_LENGTH (newargs))\n     return 0;\n \n@@ -9241,13 +9250,21 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n   tree pattern;\n   tree pack, packs = NULL_TREE;\n   bool unsubstituted_packs = false;\n+  bool real_packs = false;\n+  int missing_level = 0;\n   int i, len = -1;\n   tree result;\n   htab_t saved_local_specializations = NULL;\n+  int levels;\n \n   gcc_assert (PACK_EXPANSION_P (t));\n   pattern = PACK_EXPANSION_PATTERN (t);\n \n+  /* Add in any args remembered from an earlier partial instantiation.  */\n+  args = add_to_template_args (PACK_EXPANSION_EXTRA_ARGS (t), args);\n+\n+  levels = TMPL_ARGS_DEPTH (args);\n+\n   /* Determine the argument packs that will instantiate the parameter\n      packs used in the expansion expression. While we're at it,\n      compute the number of arguments to be expanded and make sure it\n@@ -9258,6 +9275,7 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n       tree parm_pack = TREE_VALUE (pack);\n       tree arg_pack = NULL_TREE;\n       tree orig_arg = NULL_TREE;\n+      int level = 0;\n \n       if (TREE_CODE (parm_pack) == BASES)\n        {\n@@ -9290,10 +9308,9 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n \t}\n       else\n         {\n-          int level, idx, levels;\n+\t  int idx;\n           template_parm_level_and_index (parm_pack, &level, &idx);\n \n-          levels = TMPL_ARGS_DEPTH (args);\n           if (level <= levels)\n             arg_pack = TMPL_ARG (args, level, idx);\n         }\n@@ -9344,32 +9361,71 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n               return error_mark_node;\n             }\n \n+\t  if (TREE_VEC_LENGTH (ARGUMENT_PACK_ARGS (arg_pack)) == 1\n+\t      && PACK_EXPANSION_P (TREE_VEC_ELT (ARGUMENT_PACK_ARGS (arg_pack),\n+\t\t\t\t\t\t 0)))\n+\t    /* This isn't a real argument pack yet.  */;\n+\t  else\n+\t    real_packs = true;\n+\n           /* Keep track of the parameter packs and their corresponding\n              argument packs.  */\n           packs = tree_cons (parm_pack, arg_pack, packs);\n           TREE_TYPE (packs) = orig_arg;\n         }\n       else\n \t{\n-\t  /* We can't substitute for this parameter pack.  */\n+\t  /* We can't substitute for this parameter pack.  We use a flag as\n+\t     well as the missing_level counter because function parameter\n+\t     packs don't have a level.  */\n \t  unsubstituted_packs = true;\n-\t  break;\n+\t  if (!missing_level || missing_level > level)\n+\t    missing_level = level;\n \t}\n     }\n \n   /* We cannot expand this expansion expression, because we don't have\n-     all of the argument packs we need. Substitute into the pattern\n-     and return a PACK_EXPANSION_*. The caller will need to deal with\n-     that.  */\n+     all of the argument packs we need.  */\n   if (unsubstituted_packs)\n     {\n-      tree new_pat;\n-      if (TREE_CODE (t) == EXPR_PACK_EXPANSION)\n-\tnew_pat = tsubst_expr (pattern, args, complain, in_decl,\n-\t\t\t       /*integral_constant_expression_p=*/false);\n+      if (real_packs)\n+\t{\n+\t  /* We got some full packs, but we can't substitute them in until we\n+\t     have values for all the packs.  So remember these until then.  */\n+\t  tree save_args;\n+\n+\t  t = make_pack_expansion (pattern);\n+\n+\t  /* The call to add_to_template_args above assumes no overlap\n+\t     between saved args and new args, so prune away any fake\n+\t     args, i.e. those that satisfied arg_from_parm_pack_p above.  */\n+\t  if (missing_level && levels >= missing_level)\n+\t    {\n+\t      gcc_assert (TMPL_ARGS_HAVE_MULTIPLE_LEVELS (args)\n+\t\t\t  && missing_level > 1);\n+\t      TREE_VEC_LENGTH (args) = missing_level - 1;\n+\t      save_args = copy_node (args);\n+\t      TREE_VEC_LENGTH (args) = levels;\n+\t    }\n+\t  else\n+\t    save_args = args;\n+\n+\t  PACK_EXPANSION_EXTRA_ARGS (t) = save_args;\n+\t}\n       else\n-\tnew_pat = tsubst (pattern, args, complain, in_decl);\n-      return make_pack_expansion (new_pat);\n+\t{\n+\t  /* There were no real arguments, we're just replacing a parameter\n+\t     pack with another version of itself. Substitute into the\n+\t     pattern and return a PACK_EXPANSION_*. The caller will need to\n+\t     deal with that.  */\n+\t  if (TREE_CODE (t) == EXPR_PACK_EXPANSION)\n+\t    t = tsubst_expr (pattern, args, complain, in_decl,\n+\t\t\t     /*integral_constant_expression_p=*/false);\n+\t  else\n+\t    t = tsubst (pattern, args, complain, in_decl);\n+\t  t = make_pack_expansion (t);\n+\t}\n+      return t;\n     }\n \n   /* We could not find any argument packs that work.  */"}, {"sha": "a66e695c1f746505a578eef27983a4834fe36945", "filename": "gcc/cp/ptree.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67dd256897a902e8b2fbddb04aba837e8131721/gcc%2Fcp%2Fptree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67dd256897a902e8b2fbddb04aba837e8131721/gcc%2Fcp%2Fptree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fptree.c?ref=c67dd256897a902e8b2fbddb04aba837e8131721", "patch": "@@ -104,6 +104,10 @@ cxx_print_type (FILE *file, tree node, int indent)\n \t\t  indent + 4);\n       return;\n \n+    case TYPE_PACK_EXPANSION:\n+      print_node (file, \"args\", PACK_EXPANSION_EXTRA_ARGS (node), indent + 4);\n+      return;\n+\n     default:\n       return;\n     }"}, {"sha": "d206fd2ec2480cf40c6bc9392a707222e1ad5835", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67dd256897a902e8b2fbddb04aba837e8131721/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67dd256897a902e8b2fbddb04aba837e8131721/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=c67dd256897a902e8b2fbddb04aba837e8131721", "patch": "@@ -2993,11 +2993,13 @@ cp_walk_subtrees (tree *tp, int *walk_subtrees_p, walk_tree_fn func,\n \n     case TYPE_PACK_EXPANSION:\n       WALK_SUBTREE (TREE_TYPE (*tp));\n+      WALK_SUBTREE (PACK_EXPANSION_EXTRA_ARGS (*tp));\n       *walk_subtrees_p = 0;\n       break;\n       \n     case EXPR_PACK_EXPANSION:\n       WALK_SUBTREE (TREE_OPERAND (*tp, 0));\n+      WALK_SUBTREE (PACK_EXPANSION_EXTRA_ARGS (*tp));\n       *walk_subtrees_p = 0;\n       break;\n "}, {"sha": "a23e27491d8c8056290d6504bf3b78d605b51ce9", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67dd256897a902e8b2fbddb04aba837e8131721/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67dd256897a902e8b2fbddb04aba837e8131721/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=c67dd256897a902e8b2fbddb04aba837e8131721", "patch": "@@ -1329,8 +1329,10 @@ structural_comptypes (tree t1, tree t2, int strict)\n       break;\n \n     case TYPE_PACK_EXPANSION:\n-      return same_type_p (PACK_EXPANSION_PATTERN (t1), \n-                          PACK_EXPANSION_PATTERN (t2));\n+      return (same_type_p (PACK_EXPANSION_PATTERN (t1),\n+\t\t\t   PACK_EXPANSION_PATTERN (t2))\n+\t      && comp_template_args (PACK_EXPANSION_EXTRA_ARGS (t1),\n+\t\t\t\t     PACK_EXPANSION_EXTRA_ARGS (t2)));\n \n     case DECLTYPE_TYPE:\n       if (DECLTYPE_TYPE_ID_EXPR_OR_MEMBER_ACCESS_P (t1)"}, {"sha": "58a3ff0aaf680e1b7e73afa2e7f589581889eb48", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67dd256897a902e8b2fbddb04aba837e8131721/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67dd256897a902e8b2fbddb04aba837e8131721/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c67dd256897a902e8b2fbddb04aba837e8131721", "patch": "@@ -1,5 +1,9 @@\n 2011-11-20  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/48322\n+\t* g++.dg/cpp0x/variadic120.C: New.\n+\t* g++.dg/cpp0x/sfinae26.C: Adjust.\n+\n \t* g++.dg/cpp0x/sfinae11.C: Adjust.\n \t* g++.dg/cpp0x/sfinae26.C: Adjust.\n \t* g++.dg/template/unify11.C: Adjust."}, {"sha": "374f9976b2c95f84c90a5d7b6e40ecc7772783f9", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae26.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67dd256897a902e8b2fbddb04aba837e8131721/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67dd256897a902e8b2fbddb04aba837e8131721/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae26.C?ref=c67dd256897a902e8b2fbddb04aba837e8131721", "patch": "@@ -30,9 +30,9 @@ struct is_same<T, T> {\n template<class... T>\n struct S {\n   template<class... U,\n-    typename enable_if<and_<is_same<T, U>...>::value>::type*& = enabler\n+    typename enable_if<and_<is_same<T, U>...>::value>::type*& = enabler // { dg-error \"no type\" }\n   >\n-  S(U...){}\t\t\t// { dg-error \"no type named 'type'\" }\n+  S(U...){}\n };\n \n S<bool> s(0);\t\t\t// { dg-error \"no match\" }"}, {"sha": "e26ee4e9abe3349f5eb00aaee3e91885f4da90e7", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic120.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67dd256897a902e8b2fbddb04aba837e8131721/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic120.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67dd256897a902e8b2fbddb04aba837e8131721/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic120.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic120.C?ref=c67dd256897a902e8b2fbddb04aba837e8131721", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/48322\n+// { dg-do compile { target c++11 } }\n+\n+template <class... T> struct tuple;\n+template <class T> struct tuple<T> { T t; };\n+\n+template <class T, class U> struct pair;\n+template<> struct pair<int,double> { };\n+\n+template <class... Ts>\n+struct A\n+{\n+  template <class... Us,\n+            class V = tuple<pair<Ts,Us>...> >\n+  static void f()\n+  {\n+    V v;\n+  }\n+};\n+\n+int main()\n+{\n+  A<int>::f<double>();\n+}"}, {"sha": "336e77f8c0afb9ad180374b11c72558450cde9a8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67dd256897a902e8b2fbddb04aba837e8131721/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67dd256897a902e8b2fbddb04aba837e8131721/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c67dd256897a902e8b2fbddb04aba837e8131721", "patch": "@@ -1,5 +1,8 @@\n 2011-11-20  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/48322\n+\t* include/std/tuple (tuple(_UElements&&...)): Fix SFINAE.\n+\n \t* testsuite/20_util/bind/ref_neg.cc: Adjust error markings.\n \n 2011-11-20  Jonathan Wakely  <jwakely.gcc@gmail.com>"}, {"sha": "474634fc24e8b6b33ae650a85f1950d148b21ac4", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67dd256897a902e8b2fbddb04aba837e8131721/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67dd256897a902e8b2fbddb04aba837e8131721/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=c67dd256897a902e8b2fbddb04aba837e8131721", "patch": "@@ -407,12 +407,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr tuple(const _Elements&... __elements)\n       : _Inherited(__elements...) { }\n \n-      template<typename... _UElements, typename = typename\n-\tenable_if<__and_<integral_constant<bool, sizeof...(_UElements)\n-\t\t\t\t\t   == sizeof...(_Elements)>,\n-\t\t\t __all_convertible<__conv_types<_UElements...>,\n-\t\t\t\t\t   __conv_types<_Elements...>>\n-\t\t\t >::value>::type>\n+      template<typename... _UElements,\n+\t       typename = typename enable_if<sizeof...(_UElements)\n+\t\t\t\t\t     == sizeof...(_Elements)>::type,\n+\t       typename = typename\n+\t         enable_if<__all_convertible<__conv_types<_UElements...>,\n+\t\t\t\t\t     __conv_types<_Elements...> >::value\n+\t\t\t   >::type>\n \texplicit\n         constexpr tuple(_UElements&&... __elements)\n \t: _Inherited(std::forward<_UElements>(__elements)...) {\t}"}]}