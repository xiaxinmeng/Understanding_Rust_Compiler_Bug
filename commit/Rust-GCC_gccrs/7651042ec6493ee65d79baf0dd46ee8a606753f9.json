{"sha": "7651042ec6493ee65d79baf0dd46ee8a606753f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY1MTA0MmVjNjQ5M2VlNjVkNzliYWYwZGQ0NmVlOGE2MDY3NTNmOQ==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2015-03-21T18:40:55Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2015-03-21T18:40:55Z"}, "message": "invoke.texi (-fcheck-pointer-bounds): Copy-edit, add additional index entries and cross-references.\n\n2015-03-21  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/invoke.texi (-fcheck-pointer-bounds): Copy-edit, add\n\tadditional index entries and cross-references.\n\t(-fchkp-check-incomplete-type): Likewise.\n\t(-fchkp-first-field-has-own-bounds): Likewise.\n\t(-fchkp-narrow-to-innermost-array): Likewise.\n\t(-fchkp-use-fast-string-functions): Likewise.\n\t(-fchkp-use-nochk-string-functions): Likewise.\n\t(-fchkp-use-static-const-bounds): Likewise.\n\t(-fchkp-treat-zero-dynamic-size-as-infinite): Likewise.\n\t(-fchkp-instrument-marked-only): Likewise.\n\t(-fchkp-use-wrappers): Likewise.\n\t(-static-libmpx): Likewise.\n\t(-static-libmpxwrappers): Likewise.\n\t* doc/extend.texi (bnd_legacy): Likewise.\n\t(bnd_instrument): Likewise.\n\t(bnd_variable_size): Likewise.\n\t(Pointer Bounds Checker builtins): Likewise.\n\nFrom-SVN: r221558", "tree": {"sha": "855f3e6bacacdc17c4642efcd4a0ac1afd94e305", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/855f3e6bacacdc17c4642efcd4a0ac1afd94e305"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7651042ec6493ee65d79baf0dd46ee8a606753f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7651042ec6493ee65d79baf0dd46ee8a606753f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7651042ec6493ee65d79baf0dd46ee8a606753f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7651042ec6493ee65d79baf0dd46ee8a606753f9/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "844d9a76bce2899d0b662cd04d015532889f3ca8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/844d9a76bce2899d0b662cd04d015532889f3ca8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/844d9a76bce2899d0b662cd04d015532889f3ca8"}], "stats": {"total": 201, "additions": 122, "deletions": 79}, "files": [{"sha": "a7ceffe9ada39dc318a5f2c25a493180acb468c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7651042ec6493ee65d79baf0dd46ee8a606753f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7651042ec6493ee65d79baf0dd46ee8a606753f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7651042ec6493ee65d79baf0dd46ee8a606753f9", "patch": "@@ -1,3 +1,23 @@\n+2015-03-21  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/invoke.texi (-fcheck-pointer-bounds): Copy-edit, add\n+\tadditional index entries and cross-references.\n+\t(-fchkp-check-incomplete-type): Likewise.\n+\t(-fchkp-first-field-has-own-bounds): Likewise.\n+\t(-fchkp-narrow-to-innermost-array): Likewise.\n+\t(-fchkp-use-fast-string-functions): Likewise.\n+\t(-fchkp-use-nochk-string-functions): Likewise.\n+\t(-fchkp-use-static-const-bounds): Likewise.\n+\t(-fchkp-treat-zero-dynamic-size-as-infinite): Likewise.\n+\t(-fchkp-instrument-marked-only): Likewise.\n+\t(-fchkp-use-wrappers): Likewise.\n+\t(-static-libmpx): Likewise.\n+\t(-static-libmpxwrappers): Likewise.\n+\t* doc/extend.texi (bnd_legacy): Likewise.\n+\t(bnd_instrument): Likewise.\n+\t(bnd_variable_size): Likewise.\n+\t(Pointer Bounds Checker builtins): Likewise.\n+\n 2015-03-21  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/65458"}, {"sha": "4d79506a2e6ee44f7f2409eec993b6c2ca90d0f1", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 57, "deletions": 47, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7651042ec6493ee65d79baf0dd46ee8a606753f9/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7651042ec6493ee65d79baf0dd46ee8a606753f9/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=7651042ec6493ee65d79baf0dd46ee8a606753f9", "patch": "@@ -3688,15 +3688,16 @@ in the function when compiling with the @option{-fsanitize=undefined} option.\n \n @item bnd_legacy\n @cindex @code{bnd_legacy} function attribute\n-The @code{bnd_legacy} attribute on functions is used to inform\n-compiler that function should not be instrumented when compiled\n-with @option{-fcheck-pointer-bounds} option.\n+@cindex Pointer Bounds Checker attributes\n+The @code{bnd_legacy} attribute on functions is used to inform the\n+compiler that the function should not be instrumented when compiled\n+with the @option{-fcheck-pointer-bounds} option.\n \n @item bnd_instrument\n @cindex @code{bnd_instrument} function attribute\n-The @code{bnd_instrument} attribute on functions is used to inform\n-compiler that function should be instrumented when compiled\n-with @option{-fchkp-instrument-marked-only} option.\n+The @code{bnd_instrument} attribute on functions is used to inform the\n+compiler that the function should be instrumented when compiled\n+with the @option{-fchkp-instrument-marked-only} option.\n \n @item regparm (@var{number})\n @cindex @code{regparm} attribute\n@@ -5943,10 +5944,12 @@ GCC emits warnings based on this attribute by default; use\n @option{-Wno-designated-init} to suppress them.\n \n @item bnd_variable_size\n+@cindex @code{bnd_variable_size} attribute\n+@cindex Pointer Bounds Checker attributes\n When applied to a structure field, this attribute tells Pointer\n Bounds Checker that the size of this field should not be computed\n-using static type information.  It may be used to mark variable\n-sized static array fields placed at the end of a structure.\n+using static type information.  It may be used to mark variably-sized\n+static array fields placed at the end of a structure.\n \n @smallexample\n struct S\n@@ -5958,8 +5961,9 @@ S *p = (S *)malloc (sizeof(S) + 100);\n p->data[10] = 0; //Bounds violation\n @end smallexample\n \n-By using an attribute for a field we may avoid bound violation\n-we most probably do not want to see:\n+@noindent\n+By using an attribute for the field we may avoid unwanted bound\n+violation checks:\n \n @smallexample\n struct S\n@@ -8731,6 +8735,7 @@ is called and the @var{flag} argument passed to it.\n \n @node Pointer Bounds Checker builtins\n @section Pointer Bounds Checker Built-in Functions\n+@cindex Pointer Bounds Checker builtins\n @findex __builtin___bnd_set_ptr_bounds\n @findex __builtin___bnd_narrow_ptr_bounds\n @findex __builtin___bnd_copy_ptr_bounds\n@@ -8744,15 +8749,16 @@ is called and the @var{flag} argument passed to it.\n @findex __builtin___bnd_get_ptr_ubound\n \n GCC provides a set of built-in functions to control Pointer Bounds Checker\n-instrumentation.  Note that all Pointer Bounds Checker builtins are allowed\n-to use even if you compile with Pointer Bounds Checker off.  The builtins\n-behavior may differ in such case as documented below.\n+instrumentation.  Note that all Pointer Bounds Checker builtins can be used\n+even if you compile with Pointer Bounds Checker off\n+(@option{-fno-check-pointer-bounds}).\n+The behavior may differ in such case as documented below.\n \n-@deftypefn {Built-in Function} void * __builtin___bnd_set_ptr_bounds (const void * @var{q}, size_t @var{size})\n+@deftypefn {Built-in Function} {void *} __builtin___bnd_set_ptr_bounds (const void *@var{q}, size_t @var{size})\n \n This built-in function returns a new pointer with the value of @var{q}, and\n associate it with the bounds [@var{q}, @var{q}+@var{size}-1].  With Pointer\n-Bounds Checker off built-in function just returns the first argument.\n+Bounds Checker off, the built-in function just returns the first argument.\n \n @smallexample\n extern void *__wrap_malloc (size_t n)\n@@ -8765,72 +8771,75 @@ extern void *__wrap_malloc (size_t n)\n \n @end deftypefn\n \n-@deftypefn {Built-in Function} void * __builtin___bnd_narrow_ptr_bounds (const void * @var{p}, const void * @var{q}, size_t  @var{size})\n+@deftypefn {Built-in Function} {void *} __builtin___bnd_narrow_ptr_bounds (const void *@var{p}, const void *@var{q}, size_t  @var{size})\n \n This built-in function returns a new pointer with the value of @var{p}\n-and associate it with the narrowed bounds formed by the intersection\n-of bounds associated with @var{q} and the [@var{p}, @var{p} + @var{size} - 1].\n-With Pointer Bounds Checker off built-in function just returns the first\n+and associates it with the narrowed bounds formed by the intersection\n+of bounds associated with @var{q} and the bounds\n+[@var{p}, @var{p} + @var{size} - 1].\n+With Pointer Bounds Checker off, the built-in function just returns the first\n argument.\n \n @smallexample\n void init_objects (object *objs, size_t size)\n @{\n   size_t i;\n-  /* Initialize objects one-by-one passing pointers with bounds of an object,\n-     not the full array of objects.  */\n+  /* Initialize objects one-by-one passing pointers with bounds of \n+     an object, not the full array of objects.  */\n   for (i = 0; i < size; i++)\n-    init_object (__builtin___bnd_narrow_ptr_bounds (objs + i, objs, sizeof(object)));\n+    init_object (__builtin___bnd_narrow_ptr_bounds (objs + i, objs,\n+                                                    sizeof(object)));\n @}\n @end smallexample\n \n @end deftypefn\n \n-@deftypefn {Built-in Function} void * __builtin___bnd_copy_ptr_bounds (const void * @var{q}, const void * @var{r})\n+@deftypefn {Built-in Function} {void *} __builtin___bnd_copy_ptr_bounds (const void *@var{q}, const void *@var{r})\n \n This built-in function returns a new pointer with the value of @var{q},\n-and associate it with the bounds already associated with pointer @var{r}.\n-With Pointer Bounds Checker off built-in function just returns the first\n+and associates it with the bounds already associated with pointer @var{r}.\n+With Pointer Bounds Checker off, the built-in function just returns the first\n argument.\n \n @smallexample\n /* Here is a way to get pointer to object's field but\n    still with the full object's bounds.  */\n-int *field_ptr = __builtin___bnd_copy_ptr_bounds (&objptr->int_filed, objptr);\n+int *field_ptr = __builtin___bnd_copy_ptr_bounds (&objptr->int_field, \n+                                                  objptr);\n @end smallexample\n \n @end deftypefn\n \n-@deftypefn {Built-in Function} void * __builtin___bnd_init_ptr_bounds (const void * @var{q})\n+@deftypefn {Built-in Function} {void *} __builtin___bnd_init_ptr_bounds (const void *@var{q})\n \n This built-in function returns a new pointer with the value of @var{q}, and\n-associate it with INIT (allowing full memory access) bounds. With Pointer\n-Bounds Checker off built-in function just returns the first argument.\n+associates it with INIT (allowing full memory access) bounds. With Pointer\n+Bounds Checker off, the built-in function just returns the first argument.\n \n @end deftypefn\n \n-@deftypefn {Built-in Function} void * __builtin___bnd_null_ptr_bounds (const void * @var{q})\n+@deftypefn {Built-in Function} {void *} __builtin___bnd_null_ptr_bounds (const void *@var{q})\n \n This built-in function returns a new pointer with the value of @var{q}, and\n-associate it with NULL (allowing no memory access) bounds. With Pointer\n-Bounds Checker off built-in function just returns the first argument.\n+associates it with NULL (allowing no memory access) bounds. With Pointer\n+Bounds Checker off, the built-in function just returns the first argument.\n \n @end deftypefn\n \n-@deftypefn {Built-in Function} void __builtin___bnd_store_ptr_bounds (const void ** @var{ptr_addr}, const void * @var{ptr_val})\n+@deftypefn {Built-in Function} void __builtin___bnd_store_ptr_bounds (const void **@var{ptr_addr}, const void *@var{ptr_val})\n \n This built-in function stores the bounds associated with pointer @var{ptr_val}\n and location @var{ptr_addr} into Bounds Table.  This can be useful to propagate\n bounds from legacy code without touching the associated pointer's memory when\n-pointers were copied as integers.  With Pointer Bounds Checker off built-in\n+pointers are copied as integers.  With Pointer Bounds Checker off, the built-in\n function call is ignored.\n \n @end deftypefn\n \n-@deftypefn {Built-in Function} void __builtin___bnd_chk_ptr_lbounds (const void * @var{q})\n+@deftypefn {Built-in Function} void __builtin___bnd_chk_ptr_lbounds (const void *@var{q})\n \n This built-in function checks if the pointer @var{q} is within the lower\n-bound of its associated bounds.  With Pointer Bounds Checker off built-in\n+bound of its associated bounds.  With Pointer Bounds Checker off, the built-in\n function call is ignored.\n \n @smallexample\n@@ -8848,19 +8857,19 @@ extern void *__wrap_memset (void *dst, int c, size_t len)\n \n @end deftypefn\n \n-@deftypefn {Built-in Function} void __builtin___bnd_chk_ptr_ubounds (const void * @var{q})\n+@deftypefn {Built-in Function} void __builtin___bnd_chk_ptr_ubounds (const void *@var{q})\n \n This built-in function checks if the pointer @var{q} is within the upper\n-bound of its associated bounds.  With Pointer Bounds Checker off built-in\n+bound of its associated bounds.  With Pointer Bounds Checker off, the built-in\n function call is ignored.\n \n @end deftypefn\n \n-@deftypefn {Built-in Function} void __builtin___bnd_chk_ptr_bounds (const void * @var{q}, size_t @var{size})\n+@deftypefn {Built-in Function} void __builtin___bnd_chk_ptr_bounds (const void *@var{q}, size_t @var{size})\n \n This built-in function checks if [@var{q}, @var{q} + @var{size} - 1] is within\n the lower and upper bounds associated with @var{q}.  With Pointer Bounds Checker\n-off built-in function call is ignored.\n+off, the built-in function call is ignored.\n \n @smallexample\n extern void *__wrap_memcpy (void *dst, const void *src, size_t n)\n@@ -8877,11 +8886,12 @@ extern void *__wrap_memcpy (void *dst, const void *src, size_t n)\n \n @end deftypefn\n \n-@deftypefn {Built-in Function} const void * __builtin___bnd_get_ptr_lbound (const void * @var{q})\n+@deftypefn {Built-in Function} {const void *} __builtin___bnd_get_ptr_lbound (const void *@var{q})\n \n-This built-in function returns the lower bound (which is a pointer) associated\n-with the pointer @var{q}.  This is at least useful for debugging using printf.\n-With Pointer Bounds Checker off built-in function returns 0.\n+This built-in function returns the lower bound associated\n+with the pointer @var{q}, as a pointer value.  \n+This is useful for debugging using @code{printf}.\n+With Pointer Bounds Checker off, the built-in function returns 0.\n \n @smallexample\n void *lb = __builtin___bnd_get_ptr_lbound (q);\n@@ -8891,11 +8901,11 @@ printf (\"q = %p  lb(q) = %p  ub(q) = %p\", q, lb, ub);\n \n @end deftypefn\n \n-@deftypefn {Built-in Function} const void * __builtin___bnd_get_ptr_ubound (const void * @var{q})\n+@deftypefn {Built-in Function} {const void *} __builtin___bnd_get_ptr_ubound (const void *@var{q})\n \n This built-in function returns the upper bound (which is a pointer) associated\n-with the pointer @var{q}.  With Pointer Bounds Checker off built-in function\n-returns -1.\n+with the pointer @var{q}.  With Pointer Bounds Checker off,\n+the built-in function returns -1.\n \n @end deftypefn\n "}, {"sha": "59e833a043b4addfc59052ca466ef79fe80a6713", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 45, "deletions": 32, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7651042ec6493ee65d79baf0dd46ee8a606753f9/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7651042ec6493ee65d79baf0dd46ee8a606753f9/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7651042ec6493ee65d79baf0dd46ee8a606753f9", "patch": "@@ -5843,31 +5843,42 @@ is usable even in freestanding environments.\n @item -fcheck-pointer-bounds\n @opindex fcheck-pointer-bounds\n @opindex fno-check-pointer-bounds\n+@cindex Pointer Bounds Checker options\n Enable Pointer Bounds Checker instrumentation.  Each memory reference\n-is instrumented with checks of pointer used for memory access against\n-bounds associated with that pointer.  Generated instrumentation may\n-be controlled by various @option{-fchkp-*} options.  Currently there\n-is only Intel MPX based implementation available, thus i386 target\n-and @option{-mmpx} are required.  MPX based instrumentation requires\n-a runtime library to enable MPX in a hardware and handle bounds\n+is instrumented with checks of the pointer used for memory access against\n+bounds associated with that pointer.  \n+\n+Currently there\n+is only an implementation for Intel MPX available, thus x86 target\n+and @option{-mmpx} are required to enable this feature.  \n+MPX-based instrumentation requires\n+a runtime library to enable MPX in hardware and handle bounds\n violation signals.  By default when @option{-fcheck-pointer-bounds}\n and @option{-mmpx} options are used to link a program, the GCC driver\n-links against @option{libmpx} runtime library.  MPX based instrumentation\n-may be used for a debugging and also it may be included into a release\n-version to increase program security.  Depending on usage you may\n-put different requirements to runtime library.  Current version\n- of MPX runtime library is more oriented to be used as a debugging\n+links against the @file{libmpx} runtime library.  MPX-based instrumentation\n+may be used for debugging and also may be included in production code\n+to increase program security.  Depending on usage, you may\n+have different requirements for the runtime library.  The current version\n+of the MPX runtime library is more oriented for use as a debugging\n tool.  MPX runtime library usage implies @option{-lpthread}.  See\n also @option{-static-libmpx}.  The runtime library  behavior can be\n influenced using various @env{CHKP_RT_*} environment variables.  See\n @uref{https://gcc.gnu.org/wiki/Intel%20MPX%20support%20in%20the%20GCC%20compiler}\n for more details.\n \n+Generated instrumentation may be controlled by various\n+@option{-fchkp-*} options and by the @code{bnd_variable_size}\n+structure field attribute (@pxref{Type Attributes}) and\n+@code{bnd_legacy}, and @code{bnd_instrument} function attributes\n+(@pxref{Function Attributes}).  GCC also provides a number of built-in\n+functions for controlling the Pointer Bounds Checker.  @xref{Pointer\n+Bounds Checker builtins}, for more information.\n+\n @item -fchkp-check-incomplete-type\n @opindex fchkp-check-incomplete-type\n @opindex fno-chkp-check-incomplete-type\n Generate pointer bounds checks for variables with incomplete type.\n-Enabled by default\n+Enabled by default.  \n \n @item -fchkp-narrow-bounds\n @opindex fchkp-narrow-bounds\n@@ -5880,15 +5891,15 @@ and @option{-fchkp-first-field-has-own-bounds}.  Enabled by default.\n @item -fchkp-first-field-has-own-bounds\n @opindex fchkp-first-field-has-own-bounds\n @opindex fno-chkp-first-field-has-own-bounds\n-Forces Pointer Bounds Checker to use narrowed bounds for address of the\n-first field in the structure.  By default pointer to the first field has\n-the same bounds as pointer to the whole structure.\n+Forces Pointer Bounds Checker to use narrowed bounds for the address of the\n+first field in the structure.  By default a pointer to the first field has\n+the same bounds as a pointer to the whole structure.\n \n @item -fchkp-narrow-to-innermost-array\n @opindex fchkp-narrow-to-innermost-array\n @opindex fno-chkp-narrow-to-innermost-array\n Forces Pointer Bounds Checker to use bounds of the innermost arrays in\n-case of nested static arryas access.  By default it is disabled and\n+case of nested static array access.  By default this option is disabled and\n bounds of the outermost array are used.\n \n @item -fchkp-optimize\n@@ -5900,13 +5911,13 @@ optimization levels @option{-O}, @option{-O2}, @option{-O3}.\n @item -fchkp-use-fast-string-functions\n @opindex fchkp-use-fast-string-functions\n @opindex fno-chkp-use-fast-string-functions\n-Allow to use @code{*_nobnd} versions of string functions (not copying bounds)\n+Enables use of @code{*_nobnd} versions of string functions (not copying bounds)\n by Pointer Bounds Checker.  Disabled by default.\n \n @item -fchkp-use-nochk-string-functions\n @opindex fchkp-use-nochk-string-functions\n @opindex fno-chkp-use-nochk-string-functions\n-Allow to use @code{*_nochk} versions of string functions (not checking bounds)\n+Enables use of @code{*_nochk} versions of string functions (not checking bounds)\n by Pointer Bounds Checker.  Disabled by default.\n \n @item -fchkp-use-static-bounds\n@@ -5918,16 +5929,17 @@ bounds of static variables.  Enabled by default.\n @item -fchkp-use-static-const-bounds\n @opindex fchkp-use-static-const-bounds\n @opindex fno-chkp-use-static-const-bounds\n-Use statically initialized bounds for constant bounds instead of\n-generating them each time it is required.  By default enabled when\n+Use statically-initialized bounds for constant bounds instead of\n+generating them each time they are required.  By default enabled when\n @option{-fchkp-use-static-bounds} is enabled.\n \n @item -fchkp-treat-zero-dynamic-size-as-infinite\n @opindex fchkp-treat-zero-dynamic-size-as-infinite\n @opindex fno-chkp-treat-zero-dynamic-size-as-infinite\n-With this option zero size obtained dynamically for objects with\n-incomplete type will be treated as infinite by Pointer Bounds\n-Checker.  It may be helpful if program is linked with a library\n+With this option, objects with incomplete type whose\n+dynamically-obtained size is zero are treated as having infinite size\n+instead by Pointer Bounds\n+Checker.  This option may be helpful if a program is linked with a library\n missing size information for some symbols.  Disabled by default.\n \n @item -fchkp-check-read\n@@ -5958,15 +5970,16 @@ Enabled by default.\n @opindex fchkp-instrument-marked-only\n @opindex fno-chkp-instrument-marked-only\n Instructs Pointer Bounds Checker to instrument only functions\n-marked with @code{bnd_instrument} attribute.  Disabled by default.\n+marked with the @code{bnd_instrument} attribute\n+(@pxref{Function Attributes}).  Disabled by default.\n \n @item -fchkp-use-wrappers\n @opindex fchkp-use-wrappers\n @opindex fno-chkp-use-wrappers\n-Allows Pointer Bounds Checker to replace calls to built-in function\n-with calls to wrapper functions.  When the @option{-fchkp-use-wrappers}\n+Allows Pointer Bounds Checker to replace calls to built-in functions\n+with calls to wrapper functions.  When @option{-fchkp-use-wrappers}\n is used to link a program, the GCC driver automatically links\n-agains @option{libmpxwrappers}.  See also @option{-static-libmpxwrappers}.\n+against @file{libmpxwrappers}.  See also @option{-static-libmpxwrappers}.\n Enabled by default.\n \n @item -fdump-final-insns@r{[}=@var{file}@r{]}\n@@ -11278,19 +11291,19 @@ other libraries statically.\n \n @item -static-libmpx\n @opindex static-libmpx\n-When @option{-fcheck-pointer bounds} and @option{-mmpx} options are\n+When the @option{-fcheck-pointer bounds} and @option{-mmpx} options are\n used to link a program, the GCC driver automatically links against\n-@option{libmpx}.  If @file{libmpx} is available as a shared library,\n+@file{libmpx}.  If @file{libmpx} is available as a shared library,\n and the @option{-static} option is not used, then this links against\n the shared version of @file{libmpx}.  The @option{-static-libmpx}\n option directs the GCC driver to link @file{libmpx} statically,\n without necessarily linking other libraries statically.\n \n @item -static-libmpxwrappers\n @opindex static-libmpxwrappers\n-When @option{-fcheck-pointer bounds}, @option{-mmpx} options are used and\n-@option{-fno-chkp-use-wrappers} option is not used to link a program, the\n-GCC driver automatically links against @option{libmpxwrappers}.  If\n+When the @option{-fcheck-pointer bounds} and @option{-mmpx} options are used\n+to link a program without also using @option{-fno-chkp-use-wrappers}, the\n+GCC driver automatically links against @file{libmpxwrappers}.  If\n @file{libmpxwrappers} is available as a shared library, and the\n @option{-static} option is not used, then this links against the shared\n version of @file{libmpxwrappers}.  The @option{-static-libmpxwrappers}"}]}