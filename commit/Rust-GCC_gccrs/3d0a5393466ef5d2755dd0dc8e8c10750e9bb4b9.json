{"sha": "3d0a5393466ef5d2755dd0dc8e8c10750e9bb4b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QwYTUzOTM0NjZlZjVkMjc1NWRkMGRjOGU4YzEwNzUwZTliYjRiOQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-10-29T23:58:34Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-10-29T23:58:34Z"}, "message": "Fix ICE in get_substring_ranges_for_loc on __FILE__ (PR c++/87721)\n\nPR c++/87721 reports a crash in get_substring_ranges_for_loc introduced\nby r265271, my fix for PR 87562.\n\nThe new issue occurs when attempting to get a location with a string\nliteral inside a macro in which the first token is __FILE__ (formed via\nconcatenation).  Attempting to get the spelling location of __FILE__\nfails, leading to NULL for start_ord_map and final_ord_map, and thus\na NULL pointer dereference.\n\nGiven that our \"on-demand\" substring locations approach reparses the\nstring literals, there isn't a good way to access the locations inside\nsuch string literals: attempting to reparse __FILE__ fails with a\n\"missing open quote\".\n\nThis patch applies the easy fix by gracefully rejecting the case where\nthe spelling locations for the start or finish give us NULL maps.\n\ngcc/ChangeLog:\n\tPR c++/87721\n\t* input.c (get_substring_ranges_for_loc): Detect if\n\tlinemap_resolve_location gives us a NULL map, and reject\n\tthis case.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/87721\n\t* c-c++-common/substring-location-PR-87721.c: New test.\n\t* gcc.dg/plugin/diagnostic-test-string-literals-1.c: Add test for\n\tPR 87721.\n\t* gcc.dg/plugin/diagnostic_plugin_test_string_literals.c\n\t(test_string_literals): Fold the index arguments before checking\n\tfor INTEGER_CST.\n\nFrom-SVN: r265611", "tree": {"sha": "fe13868d9238eb20dea3293cffca6f47e0d55a92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe13868d9238eb20dea3293cffca6f47e0d55a92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d0a5393466ef5d2755dd0dc8e8c10750e9bb4b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d0a5393466ef5d2755dd0dc8e8c10750e9bb4b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d0a5393466ef5d2755dd0dc8e8c10750e9bb4b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d0a5393466ef5d2755dd0dc8e8c10750e9bb4b9/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7e2de6df10b532be4e66025e318f68a0ebf2c408", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e2de6df10b532be4e66025e318f68a0ebf2c408", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e2de6df10b532be4e66025e318f68a0ebf2c408"}], "stats": {"total": 66, "additions": 63, "deletions": 3}, "files": [{"sha": "1ebf3dbe91cad8bc43ec246e1f7538c351a10959", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d0a5393466ef5d2755dd0dc8e8c10750e9bb4b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d0a5393466ef5d2755dd0dc8e8c10750e9bb4b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d0a5393466ef5d2755dd0dc8e8c10750e9bb4b9", "patch": "@@ -1,3 +1,10 @@\n+2018-10-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/87721\n+\t* input.c (get_substring_ranges_for_loc): Detect if\n+\tlinemap_resolve_location gives us a NULL map, and reject\n+\tthis case.\n+\n 2018-10-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* config.gcc (xstormy16-*-elf): Set tm_d_file."}, {"sha": "a94a010f35371778d2f1e487ea33964399e57284", "filename": "gcc/input.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d0a5393466ef5d2755dd0dc8e8c10750e9bb4b9/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d0a5393466ef5d2755dd0dc8e8c10750e9bb4b9/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=3d0a5393466ef5d2755dd0dc8e8c10750e9bb4b9", "patch": "@@ -1463,6 +1463,8 @@ get_substring_ranges_for_loc (cpp_reader *pfile,\n       const line_map_ordinary *final_ord_map;\n       linemap_resolve_location (line_table, src_range.m_finish,\n \t\t\t\tLRK_SPELLING_LOCATION, &final_ord_map);\n+      if (start_ord_map == NULL || final_ord_map == NULL)\n+\treturn \"failed to get ordinary maps\";\n       /* Bulletproofing.  We ought to only have different ordinary maps\n \t for start vs finish due to line-length jumps.  */\n       if (start_ord_map != final_ord_map"}, {"sha": "4fe555cd624fc7af1bd8357b20050a2ac860db04", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d0a5393466ef5d2755dd0dc8e8c10750e9bb4b9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d0a5393466ef5d2755dd0dc8e8c10750e9bb4b9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3d0a5393466ef5d2755dd0dc8e8c10750e9bb4b9", "patch": "@@ -1,3 +1,13 @@\n+2018-10-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/87721\n+\t* c-c++-common/substring-location-PR-87721.c: New test.\n+\t* gcc.dg/plugin/diagnostic-test-string-literals-1.c: Add test for\n+\tPR 87721.\n+\t* gcc.dg/plugin/diagnostic_plugin_test_string_literals.c\n+\t(test_string_literals): Fold the index arguments before checking\n+\tfor INTEGER_CST.\n+\n 2018-10-29  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-c++-common/spellcheck-reserved.c: Update expected output for"}, {"sha": "ba99f1baaa5b5ae465fdf53b74b80b8f64a9aca7", "filename": "gcc/testsuite/c-c++-common/substring-location-PR-87721.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d0a5393466ef5d2755dd0dc8e8c10750e9bb4b9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fsubstring-location-PR-87721.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d0a5393466ef5d2755dd0dc8e8c10750e9bb4b9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fsubstring-location-PR-87721.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fsubstring-location-PR-87721.c?ref=3d0a5393466ef5d2755dd0dc8e8c10750e9bb4b9", "patch": "@@ -0,0 +1,11 @@\n+# define DBG_ERROR(dbg_logger, format, args...) if (1){\\\n+  char dbg_buffer[256]; \\\n+  __builtin_snprintf(dbg_buffer, sizeof(dbg_buffer)-1,\\\n+  __FILE__\":%5d: \" format  , __LINE__ , ## args); \\\n+};\n+\n+void testPasswordStore1(int argc, char **argv) {\n+  const char *pw1=\"Secret1\";\n+  char pw[256];\n+  DBG_ERROR(0, \"Bad password, expected [%s], got [%s].\", pw1, pw);\n+}"}, {"sha": "36324fda43c10fbce303655d8f7cf08b142e6d38", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-string-literals-1.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d0a5393466ef5d2755dd0dc8e8c10750e9bb4b9/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d0a5393466ef5d2755dd0dc8e8c10750e9bb4b9/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-1.c?ref=3d0a5393466ef5d2755dd0dc8e8c10750e9bb4b9", "patch": "@@ -319,3 +319,33 @@ pr87652 (const char *stem, int counter)\n                                        ^~\n      { dg-end-multiline-output \"\" } */\n }\n+\n+/* Reproducer for PR 87721.  */\n+\n+# define OFFSET __builtin_strlen (__FILE__) + __builtin_strlen(\":%5d: \")\n+\n+# define DBG_ERROR(format, caret_idx, start_idx, end_idx)\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    __emit_string_literal_range(__FILE__\":%5d: \" format,\t\\\n+\t\t\t\tOFFSET + caret_idx,\t\t\\\n+\t\t\t\tOFFSET + start_idx,\t\t\\\n+\t\t\t\tOFFSET + end_idx);\t\t\\\n+  } while (0)\n+\n+/* { dg-error \"unable to read substring location: failed to get ordinary maps\" \"\" { target *-*-* } 329 } */\n+/* { dg-begin-multiline-output \"\" }\n+     __emit_string_literal_range(__FILE__\":%5d: \" format, \\\n+                                 ^~~~~~~~\n+     { dg-end-multiline-output \"\" { target c } } */\n+/* { dg-begin-multiline-output \"\" }\n+     __emit_string_literal_range(__FILE__\":%5d: \" format, \\\n+                                 ^\n+     { dg-end-multiline-output \"\" { target c++ } } */\n+\n+void pr87721 (void) {\n+  DBG_ERROR(\"Bad password, expected [%s], got [%s].\", 24, 24, 25); /* { dg-message \"in expansion of macro 'DBG_ERROR'\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   DBG_ERROR(\"Bad password, expected [%s], got [%s].\", 24, 24, 25);\n+   ^~~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}"}, {"sha": "cf99697a4170ac40c3cf2517b808c11aeaa4eb6c", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic_plugin_test_string_literals.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d0a5393466ef5d2755dd0dc8e8c10750e9bb4b9/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_string_literals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d0a5393466ef5d2755dd0dc8e8c10750e9bb4b9/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_string_literals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_string_literals.c?ref=3d0a5393466ef5d2755dd0dc8e8c10750e9bb4b9", "patch": "@@ -140,23 +140,23 @@ test_string_literals (gimple *stmt)\n       return;\n     }\n \n-  tree t_caret_idx = gimple_call_arg (call, 1);\n+  tree t_caret_idx = fold (gimple_call_arg (call, 1));\n   if (TREE_CODE (t_caret_idx) != INTEGER_CST)\n     {\n       error_at (call->location, \"integer constant required for arg 2\");\n       return;\n     }\n   int caret_idx = TREE_INT_CST_LOW (t_caret_idx);\n \n-  tree t_start_idx = gimple_call_arg (call, 2);\n+  tree t_start_idx = fold (gimple_call_arg (call, 2));\n   if (TREE_CODE (t_start_idx) != INTEGER_CST)\n     {\n       error_at (call->location, \"integer constant required for arg 3\");\n       return;\n     }\n   int start_idx = TREE_INT_CST_LOW (t_start_idx);\n \n-  tree t_end_idx = gimple_call_arg (call, 3);\n+  tree t_end_idx = fold (gimple_call_arg (call, 3));\n   if (TREE_CODE (t_end_idx) != INTEGER_CST)\n     {\n       error_at (call->location, \"integer constant required for arg 4\");"}]}