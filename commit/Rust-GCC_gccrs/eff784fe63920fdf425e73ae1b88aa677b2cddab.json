{"sha": "eff784fe63920fdf425e73ae1b88aa677b2cddab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZmNzg0ZmU2MzkyMGZkZjQyNWU3M2FlMWI4OGFhNjc3YjJjZGRhYg==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "2000-02-11T04:55:07Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2000-02-11T04:55:07Z"}, "message": "c4x.h (ASM_GLOBALIZE_LABEL): Use c4x_global_label.\n\n\t* config/c4x/c4x.h (ASM_GLOBALIZE_LABEL): Use c4x_global_label.\n\t(ASM_OUTPUT_EXTERNAL): Use c4x_external_ref.\n\t(ASM_OUTPUT_EXTERNAL_LIBCALL): Likewise.\n\t(ASM_FILE_END): Use c4x_file_end.\n\t* config/c4x/c4x.c (c4x_global_label): New function.\n \t(c4x_external_ref, c4x_file_end): Likewise.\n\t* config/c4x/c4x-protos.h (c4x_global_label): Add prototype.\n \t(c4x_external_ref, c4x_end_file): Likewise.\n\nFrom-SVN: r31909", "tree": {"sha": "377f3f8aab615f92687ebb1a416424330dc5a7bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/377f3f8aab615f92687ebb1a416424330dc5a7bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eff784fe63920fdf425e73ae1b88aa677b2cddab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eff784fe63920fdf425e73ae1b88aa677b2cddab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eff784fe63920fdf425e73ae1b88aa677b2cddab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eff784fe63920fdf425e73ae1b88aa677b2cddab/comments", "author": null, "committer": null, "parents": [{"sha": "cf4ed945eab57de7fe5b2f736cc773659a966a0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf4ed945eab57de7fe5b2f736cc773659a966a0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf4ed945eab57de7fe5b2f736cc773659a966a0c"}], "stats": {"total": 149, "additions": 132, "deletions": 17}, "files": [{"sha": "cfbed1d5c2b4c8032ba6e26d2464707a37a81c39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff784fe63920fdf425e73ae1b88aa677b2cddab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff784fe63920fdf425e73ae1b88aa677b2cddab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eff784fe63920fdf425e73ae1b88aa677b2cddab", "patch": "@@ -1,3 +1,15 @@\n+2000-02-11  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* config/c4x/c4x.h (ASM_GLOBALIZE_LABEL): Use c4x_global_label.\n+\t(ASM_OUTPUT_EXTERNAL): Use c4x_external_ref.\n+\t(ASM_OUTPUT_EXTERNAL_LIBCALL): Likewise.\n+\t(ASM_FILE_END): Use c4x_file_end.\n+\t* config/c4x/c4x.c (c4x_global_label): New function.\n+ \t(c4x_external_ref, c4x_file_end): Likewise.\n+\t* config/c4x/c4x-protos.h (c4x_global_label): Add prototype.\n+ \t(c4x_external_ref, c4x_end_file): Likewise.\n+\t\n+\n 2000-02-10  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cppexp.c: Don't include cpphash.h."}, {"sha": "8c5806b06658dfe38f8de53748daa60203fe4e17", "filename": "gcc/config/c4x/c4x-protos.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff784fe63920fdf425e73ae1b88aa677b2cddab/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff784fe63920fdf425e73ae1b88aa677b2cddab/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h?ref=eff784fe63920fdf425e73ae1b88aa677b2cddab", "patch": "@@ -37,6 +37,12 @@ extern int c4x_handle_pragma PARAMS ((int (* p_getc) (void),\n \t\t\t\t      void (* p_ungetc) (int),\n \t\t\t\t      char *));\n \n+extern void c4x_global_label (char *);\n+\n+extern void c4x_external_ref (char *);\n+\n+extern void c4x_file_end (FILE *);\n+\n #ifdef TREE_CODE\n extern void c4x_set_default_attributes PARAMS ((tree, tree *));\n "}, {"sha": "07b8b51b45f64816231c0894f69b07d285a958a8", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 106, "deletions": 3, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff784fe63920fdf425e73ae1b88aa677b2cddab/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff784fe63920fdf425e73ae1b88aa677b2cddab/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=eff784fe63920fdf425e73ae1b88aa677b2cddab", "patch": "@@ -4396,19 +4396,122 @@ c4x_handle_pragma (p_getc, p_ungetc, pname)\n }\n \n \n+struct name_list\n+{\n+  struct name_list *next;\n+  char *name;\n+};\n+\n+static struct name_list *global_head;\n+static struct name_list *extern_head;\n+\n+\n+/* Add NAME to list of global symbols and remove from external list if\n+   present on external list.  */\n+\n+void\n+c4x_global_label (name)\n+     char *name;\n+{\n+  struct name_list *p, *last;\n+\n+  /* Do not insert duplicate names, so linearly search through list of\n+     existing names.  */\n+  p = global_head;\n+  while (p)\n+    {\n+      if (strcmp (p->name, name) == 0)\n+\treturn;\n+      p = p->next;\n+    }\n+  p = (struct name_list *) permalloc (sizeof *p);\n+  p->next = global_head;\n+  p->name = name;\n+  global_head = p;\n+\n+  /* Remove this name from ref list if present.  */\n+  last = NULL;\n+  p = extern_head;\n+  while (p)\n+    {\n+      if (strcmp (p->name, name) == 0)\n+\t{\n+\t  if (last)\n+\t    last->next = p->next;\n+\t  else\n+\t    extern_head = p->next;\n+\t  break;\n+\t}\n+      last = p;\n+      p = p->next;\n+    }\n+}\n+\n+\n+/* Add NAME to list of external symbols.  */\n+\n+void\n+c4x_external_ref (name)\n+     char *name;\n+{\n+  struct name_list *p;\n+\n+  /* Do not insert duplicate names.  */\n+  p = extern_head;\n+  while (p)\n+    {\n+      if (strcmp (p->name, name) == 0)\n+\treturn;\n+      p = p->next;\n+    }\n+  \n+  /* Do not insert ref if global found.  */\n+  p = global_head;\n+  while (p)\n+    {\n+      if (strcmp (p->name, name) == 0)\n+\treturn;\n+      p = p->next;\n+    }\n+  p = (struct name_list *) permalloc (sizeof *p);\n+  p->next = extern_head;\n+  p->name = name;\n+  extern_head = p;\n+}\n+\n+\n+void\n+c4x_file_end (fp)\n+     FILE *fp;\n+{\n+  struct name_list *p;\n+  \n+  /* Output all external names that are not global.  */\n+  p = extern_head;\n+  while (p)\n+    {\n+      fprintf (fp, \"\\t.ref\\t\");\n+      assemble_name (fp, p->name);\n+      fprintf (fp, \"\\n\");\n+      p = p->next;\n+    }\n+  fprintf (fp, \"\\t.end\\n\");\n+}\n+\n+\n static void\n-c4x_check_attribute(attrib, list, decl, attributes)\n+c4x_check_attribute (attrib, list, decl, attributes)\n      char *attrib;\n      tree list, decl, *attributes;\n {\n   while (list != NULL_TREE\n          && IDENTIFIER_POINTER (TREE_PURPOSE (list))\n \t != IDENTIFIER_POINTER (DECL_NAME (decl)))\n-    list = TREE_CHAIN(list);\n+    list = TREE_CHAIN (list);\n   if (list)\n     *attributes = chainon (*attributes,\n \t\t\t   build_tree_list (get_identifier (attrib),\n-\t\t\t\t\t    TREE_VALUE(list)));\n+\t\t\t\t\t    TREE_VALUE (list)));\n }\n \n "}, {"sha": "27abc4be45c6c5938282bde2b2cb85161c6e7f16", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff784fe63920fdf425e73ae1b88aa677b2cddab/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff784fe63920fdf425e73ae1b88aa677b2cddab/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=eff784fe63920fdf425e73ae1b88aa677b2cddab", "patch": "@@ -2127,8 +2127,6 @@ dtors_section ()\t\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\t\t\\\n }\n \n-#define ASM_FILE_END(FILE) fprintf (FILE, \"\\t.end\\n\")\n-\n /* We need to have a data section we can identify so that we can set\n    the DP register back to a data pointer in the small memory model.\n    This is only required for ISRs if we are paranoid that someone\n@@ -2211,25 +2209,21 @@ do { assemble_name (FILE, NAME); fputs (\":\\n\", FILE); } while (0);\n     fprintf (FILE, \"\\t.global\\t\");\t\\\n     assemble_name (FILE, NAME);\t\t\\\n     fputs (\"\\n\", FILE); \t        \\\n+    c4x_global_label (NAME);\t\t\\\n   } while (0);\n \n-#define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME)\t\\\n-  do {                                         \t\\\n-    fprintf (FILE, \"\\t.ref\\t\");\t\t\t\\\n-    assemble_name (FILE, NAME);\t             \t\\\n-    fputc ('\\n', FILE);  \t               \t\\\n-  } while (0);\n+#define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME) \\\n+c4x_external_ref (NAME)\n \n /* A C statement to output on FILE an assembler pseudo-op to\n    declare a library function named external.\n    (Only needed to keep asm30 happy for ___divqf3 etc.)  */\n \n-#define ASM_OUTPUT_EXTERNAL_LIBCALL(FILE, FUN)  \\\n-  do {\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t.ref\\t\");\t\t\t\\\n-    assemble_name (FILE, XSTR (FUN, 0));\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\\\n-  } while (0);\n+#define ASM_OUTPUT_EXTERNAL_LIBCALL(FILE, FUN) \\\n+c4x_external_ref (XSTR (FUN, 0))\n+\n+#define\tASM_FILE_END(FILE) \\\n+c4x_file_end (FILE)\n \n /* The prefix to add to user-visible assembler symbols.  */\n "}]}