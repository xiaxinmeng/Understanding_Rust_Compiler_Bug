{"sha": "1eadb567eff34df82355c8b5d56e32b76282bad2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVhZGI1NjdlZmYzNGRmODIzNTVjOGI1ZDU2ZTMyYjc2MjgyYmFkMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-11-18T15:25:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-11-18T15:25:05Z"}, "message": "re PR middle-end/59125 (gcc triggers wrong strncpy_chk)\n\n2013-11-18  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/59125\n\tPR tree-optimization/54570\n\t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): When inlining\n\tis not complete do not treat component-references with offset zero\n\tbut different fields as equal.\n\t* tree-object-size.c: Include tree-phinodes.h and ssa-iterators.h.\n\t(compute_object_sizes): Apply TLC.  Propagate the constant\n\tresults into all uses and fold their stmts.\n\t* passes.def (pass_all_optimizations): Move pass_object_sizes\n\tafter the first pass_forwprop and before pass_fre.\n\n\t* gcc.dg/builtin-object-size-8.c: Un-xfail.\n\t* gcc.dg/builtin-object-size-14.c: New testcase.\n\t* gcc.dg/strlenopt-14gf.c: Adjust.\n\t* gcc.dg/strlenopt-1f.c: Likewise.\n\t* gcc.dg/strlenopt-4gf.c: Likewise.\n\nFrom-SVN: r204966", "tree": {"sha": "4fdadcce61fa5e47e03e25659386ced8080d70b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fdadcce61fa5e47e03e25659386ced8080d70b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1eadb567eff34df82355c8b5d56e32b76282bad2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eadb567eff34df82355c8b5d56e32b76282bad2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eadb567eff34df82355c8b5d56e32b76282bad2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eadb567eff34df82355c8b5d56e32b76282bad2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d362f6c2b99e2b0cedf44e52194c578bdf00053", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d362f6c2b99e2b0cedf44e52194c578bdf00053", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d362f6c2b99e2b0cedf44e52194c578bdf00053"}], "stats": {"total": 130, "additions": 98, "deletions": 32}, "files": [{"sha": "f10564b90422d79c53ed2d0bfbbb2526339ffcce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eadb567eff34df82355c8b5d56e32b76282bad2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eadb567eff34df82355c8b5d56e32b76282bad2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1eadb567eff34df82355c8b5d56e32b76282bad2", "patch": "@@ -1,3 +1,16 @@\n+2013-11-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/59125\n+\tPR tree-optimization/54570\n+\t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): When inlining\n+\tis not complete do not treat component-references with offset zero\n+\tbut different fields as equal.\n+\t* tree-object-size.c: Include tree-phinodes.h and ssa-iterators.h.\n+\t(compute_object_sizes): Apply TLC.  Propagate the constant\n+\tresults into all uses and fold their stmts.\n+\t* passes.def (pass_all_optimizations): Move pass_object_sizes\n+\tafter the first pass_forwprop and before pass_fre.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* tree.h (tree_to_uhwi): Return an unsigned HOST_WIDE_INT."}, {"sha": "49faf257b5103793bd3ca9c7f9951b057b6b38e3", "filename": "gcc/passes.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eadb567eff34df82355c8b5d56e32b76282bad2/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eadb567eff34df82355c8b5d56e32b76282bad2/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=1eadb567eff34df82355c8b5d56e32b76282bad2", "patch": "@@ -142,6 +142,7 @@ along with GCC; see the file COPYING3.  If not see\n \t form if possible.  */\n       NEXT_PASS (pass_phiprop);\n       NEXT_PASS (pass_forwprop);\n+      NEXT_PASS (pass_object_sizes);\n       /* pass_build_alias is a dummy pass that ensures that we\n \t execute TODO_rebuild_alias at this point.  */\n       NEXT_PASS (pass_build_alias);\n@@ -185,7 +186,6 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_dce);\n       NEXT_PASS (pass_forwprop);\n       NEXT_PASS (pass_phiopt);\n-      NEXT_PASS (pass_object_sizes);\n       NEXT_PASS (pass_strlen);\n       NEXT_PASS (pass_ccp);\n       /* After CCP we rewrite no longer addressed locals into SSA"}, {"sha": "909942b39a56589a7753aaa5f31e601f3eaaa6d3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eadb567eff34df82355c8b5d56e32b76282bad2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eadb567eff34df82355c8b5d56e32b76282bad2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1eadb567eff34df82355c8b5d56e32b76282bad2", "patch": "@@ -1,3 +1,13 @@\n+2013-11-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/59125\n+\tPR tree-optimization/54570\n+\t* gcc.dg/builtin-object-size-8.c: Un-xfail.\n+\t* gcc.dg/builtin-object-size-14.c: New testcase.\n+\t* gcc.dg/strlenopt-14gf.c: Adjust.\n+\t* gcc.dg/strlenopt-1f.c: Likewise.\n+\t* gcc.dg/strlenopt-4gf.c: Likewise.\n+\n 2013-11-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/volatile11.adb: New test."}, {"sha": "085011eda52af69883a95057b21558f1d0990185", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-14.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eadb567eff34df82355c8b5d56e32b76282bad2/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eadb567eff34df82355c8b5d56e32b76282bad2/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-14.c?ref=1eadb567eff34df82355c8b5d56e32b76282bad2", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort (void);\n+extern char *strncpy(char *, const char *, __SIZE_TYPE__);\n+\n+union u {\n+    struct {\n+\tchar vi[8];\n+\tchar pi[16];\n+    };\n+    char all[8+16+4];\n+};\n+\n+void __attribute__((noinline,noclone))\n+f(union u *u)\n+{\n+  char vi[8+1];\n+  __builtin_strncpy(vi, u->vi, sizeof(u->vi));\n+  if (__builtin_object_size (u->all, 1) != -1)\n+    abort ();\n+}\n+int main()\n+{\n+  union u u;\n+  f (&u);\n+  return 0;\n+}"}, {"sha": "f2d88f9d591eb08991687ebf2b5935f0643472c7", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eadb567eff34df82355c8b5d56e32b76282bad2/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eadb567eff34df82355c8b5d56e32b76282bad2/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-8.c?ref=1eadb567eff34df82355c8b5d56e32b76282bad2", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do run { xfail *-*-* } } */\n+/* { dg-do run } */\n /* { dg-options \"-O2\" } */\n \n typedef __SIZE_TYPE__ size_t;"}, {"sha": "8b78538d41df55bcf3d89fbc9f6cbf8b0befa8e1", "filename": "gcc/testsuite/gcc.dg/strlenopt-14gf.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eadb567eff34df82355c8b5d56e32b76282bad2/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-14gf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eadb567eff34df82355c8b5d56e32b76282bad2/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-14gf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-14gf.c?ref=1eadb567eff34df82355c8b5d56e32b76282bad2", "patch": "@@ -11,14 +11,14 @@\n    memcpy.  */\n /* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 4 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"__memcpy_chk \\\\(\" 0 \"strlen\" } } */\n-/* { dg-final { scan-tree-dump-times \"__mempcpy_chk \\\\(\" 2 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"__mempcpy_chk \\\\(\" 0 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"__strcpy_chk \\\\(\" 0 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"__strcat_chk \\\\(\" 0 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"strchr \\\\(\" 0 \"strlen\" } } */\n-/* { dg-final { scan-tree-dump-times \"__stpcpy_chk \\\\(\" 3 \"strlen\" } } */\n-/* { dg-final { scan-tree-dump-times \"memcpy \\\\(\" 0 \"strlen\" } } */\n-/* { dg-final { scan-tree-dump-times \"mempcpy \\\\(\" 0 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"__stpcpy_chk \\\\(\" 0 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"memcpy \\\\(\" 1 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"mempcpy \\\\(\" 2 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"strcpy \\\\(\" 0 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"strcat \\\\(\" 0 \"strlen\" } } */\n-/* { dg-final { scan-tree-dump-times \"stpcpy \\\\(\" 0 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"stpcpy \\\\(\" 2 \"strlen\" } } */\n /* { dg-final { cleanup-tree-dump \"strlen\" } } */"}, {"sha": "50c5f91306a7409be3753ec1451625cd77b2a96d", "filename": "gcc/testsuite/gcc.dg/strlenopt-1f.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eadb567eff34df82355c8b5d56e32b76282bad2/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-1f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eadb567eff34df82355c8b5d56e32b76282bad2/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-1f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-1f.c?ref=1eadb567eff34df82355c8b5d56e32b76282bad2", "patch": "@@ -6,12 +6,12 @@\n #include \"strlenopt-1.c\"\n \n /* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 2 \"strlen\" } } */\n-/* { dg-final { scan-tree-dump-times \"__memcpy_chk \\\\(\" 4 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"__memcpy_chk \\\\(\" 0 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"__strcpy_chk \\\\(\" 0 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"__strcat_chk \\\\(\" 0 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"strchr \\\\(\" 0 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"__stpcpy_chk \\\\(\" 0 \"strlen\" } } */\n-/* { dg-final { scan-tree-dump-times \"memcpy \\\\(\" 0 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"memcpy \\\\(\" 4 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"strcpy \\\\(\" 0 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"strcat \\\\(\" 0 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"stpcpy \\\\(\" 0 \"strlen\" } } */"}, {"sha": "e1762366e4548a93a8afa688c31c867ee8a9f795", "filename": "gcc/testsuite/gcc.dg/strlenopt-4gf.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eadb567eff34df82355c8b5d56e32b76282bad2/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-4gf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eadb567eff34df82355c8b5d56e32b76282bad2/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-4gf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-4gf.c?ref=1eadb567eff34df82355c8b5d56e32b76282bad2", "patch": "@@ -7,13 +7,13 @@\n #include \"strlenopt-4.c\"\n \n /* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 1 \"strlen\" } } */\n-/* { dg-final { scan-tree-dump-times \"__memcpy_chk \\\\(\" 4 \"strlen\" } } */\n-/* { dg-final { scan-tree-dump-times \"__strcpy_chk \\\\(\" 1 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"__memcpy_chk \\\\(\" 0 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"__strcpy_chk \\\\(\" 0 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"__strcat_chk \\\\(\" 0 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"strchr \\\\(\" 0 \"strlen\" } } */\n-/* { dg-final { scan-tree-dump-times \"__stpcpy_chk \\\\(\" 5 \"strlen\" } } */\n-/* { dg-final { scan-tree-dump-times \"memcpy \\\\(\" 0 \"strlen\" } } */\n-/* { dg-final { scan-tree-dump-times \"strcpy \\\\(\" 0 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"__stpcpy_chk \\\\(\" 0 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"memcpy \\\\(\" 4 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"strcpy \\\\(\" 1 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"strcat \\\\(\" 0 \"strlen\" } } */\n-/* { dg-final { scan-tree-dump-times \"stpcpy \\\\(\" 0 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"stpcpy \\\\(\" 5 \"strlen\" } } */\n /* { dg-final { cleanup-tree-dump \"strlen\" } } */"}, {"sha": "8dcd2aa5d9f4851eb2cd697718259dd56e4b3ee6", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eadb567eff34df82355c8b5d56e32b76282bad2/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eadb567eff34df82355c8b5d56e32b76282bad2/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=1eadb567eff34df82355c8b5d56e32b76282bad2", "patch": "@@ -32,6 +32,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssanames.h\"\n #include \"tree-pass.h\"\n #include \"tree-ssa-propagate.h\"\n+#include \"tree-phinodes.h\"\n+#include \"ssa-iterators.h\"\n \n struct object_size_info\n {\n@@ -1205,16 +1207,9 @@ compute_object_sizes (void)\n       gimple_stmt_iterator i;\n       for (i = gsi_start_bb (bb); !gsi_end_p (i); gsi_next (&i))\n \t{\n-\t  tree callee, result;\n+\t  tree result;\n \t  gimple call = gsi_stmt (i);\n-\n-          if (gimple_code (call) != GIMPLE_CALL)\n-\t    continue;\n-\n-\t  callee = gimple_call_fndecl (call);\n-\t  if (!callee\n-\t      || DECL_BUILT_IN_CLASS (callee) != BUILT_IN_NORMAL\n-\t      || DECL_FUNCTION_CODE (callee) != BUILT_IN_OBJECT_SIZE)\n+\t  if (!gimple_call_builtin_p (call, BUILT_IN_OBJECT_SIZE))\n \t    continue;\n \n \t  init_object_sizes ();\n@@ -1243,20 +1238,32 @@ compute_object_sizes (void)\n \t\tcontinue;\n \t    }\n \n+\t  gcc_assert (TREE_CODE (result) == INTEGER_CST);\n+\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Simplified\\n  \");\n \t      print_gimple_stmt (dump_file, call, 0, dump_flags);\n+\t      fprintf (dump_file, \" to \");\n+\t      print_generic_expr (dump_file, result, 0);\n+\t      fprintf (dump_file, \"\\n\");\n \t    }\n \n-\t  if (!update_call_from_tree (&i, result))\n-\t    gcc_unreachable ();\n+\t  tree lhs = gimple_call_lhs (call);\n+\t  if (!lhs)\n+\t    continue;\n \n-\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t  /* Propagate into all uses and fold those stmts.  */\n+\t  gimple use_stmt;\n+\t  imm_use_iterator iter;\n+\t  FOR_EACH_IMM_USE_STMT (use_stmt, iter, lhs)\n \t    {\n-\t      fprintf (dump_file, \"to\\n  \");\n-\t      print_gimple_stmt (dump_file, gsi_stmt (i), 0, dump_flags);\n-\t      fprintf (dump_file, \"\\n\");\n+\t      use_operand_p use_p;\n+\t      FOR_EACH_IMM_USE_ON_STMT (use_p, iter)\n+\t\tSET_USE (use_p, result);\n+\t      gimple_stmt_iterator gsi = gsi_for_stmt (use_stmt);\n+\t      fold_stmt (&gsi);\n+\t      update_stmt (gsi_stmt (gsi));\n \t    }\n \t}\n     }"}, {"sha": "26bb190503debd390595ec4f9236d9395ab39984", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eadb567eff34df82355c8b5d56e32b76282bad2/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eadb567eff34df82355c8b5d56e32b76282bad2/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=1eadb567eff34df82355c8b5d56e32b76282bad2", "patch": "@@ -760,7 +760,7 @@ copy_reference_ops_from_ref (tree ref, vec<vn_reference_op_s> *result)\n     }\n \n   /* For non-calls, store the information that makes up the address.  */\n-\n+  tree orig = ref;\n   while (ref)\n     {\n       vn_reference_op_s temp;\n@@ -810,7 +810,15 @@ copy_reference_ops_from_ref (tree ref, vec<vn_reference_op_s> *result)\n \t\t\t+ tree_to_double_int (bit_offset)\n \t\t\t.rshift (BITS_PER_UNIT == 8\n \t\t\t\t   ? 3 : exact_log2 (BITS_PER_UNIT));\n-\t\t    if (off.fits_shwi ())\n+\t\t    if (off.fits_shwi ()\n+\t\t\t/* Probibit value-numbering zero offset components\n+\t\t\t   of addresses the same before the pass folding\n+\t\t\t   __builtin_object_size had a chance to run\n+\t\t\t   (checking cfun->after_inlining does the\n+\t\t\t   trick here).  */\n+\t\t\t&& (TREE_CODE (orig) != ADDR_EXPR\n+\t\t\t    || !off.is_zero ()\n+\t\t\t    || cfun->after_inlining))\n \t\t      temp.off = off.low;\n \t\t  }\n \t      }"}]}