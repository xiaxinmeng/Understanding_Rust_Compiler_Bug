{"sha": "6a513e2a1b446a2aa7accec36ac055935e9d6491", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE1MTNlMmExYjQ0NmEyYWE3YWNjZWMzNmFjMDU1OTM1ZTlkNjQ5MQ==", "commit": {"author": {"name": "Tony Reix", "email": "tony.reix@atos.com", "date": "2018-06-19T19:17:46Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2018-06-19T19:17:46Z"}, "message": "collect2.c (static_obj): New variable.\n\n2018-06-19  Tony Reix  <tony.reix@atos.com>\n            Damien Bergamini  <damien.bergamini@atos.com>\n            David Edelsohn  <dje.gcc@gmail.com>\n\n        * collect2.c (static_obj): New variable.\n        (static_libs): New variable.\n        (is_in_list): Uncomment declaration.\n        (main): Track AIX libraries linked statically.\n        (is_in_list): Uncomment definition.\n        (scan_prog_file): Don't add AIX shared libraries initializer\n        to constructor list if linking statically.\n\nCo-Authored-By: Damien Bergamini <damien.bergamini@atos.com>\nCo-Authored-By: David Edelsohn <dje.gcc@gmail.com>\n\nFrom-SVN: r261759", "tree": {"sha": "f6bc3a864ce42a09da3c879ff54da190e22eafe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6bc3a864ce42a09da3c879ff54da190e22eafe4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a513e2a1b446a2aa7accec36ac055935e9d6491", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a513e2a1b446a2aa7accec36ac055935e9d6491", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a513e2a1b446a2aa7accec36ac055935e9d6491", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a513e2a1b446a2aa7accec36ac055935e9d6491/comments", "author": null, "committer": null, "parents": [{"sha": "e8c487163ac2988dc7d90774e068d9c043193a3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8c487163ac2988dc7d90774e068d9c043193a3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8c487163ac2988dc7d90774e068d9c043193a3d"}], "stats": {"total": 49, "additions": 44, "deletions": 5}, "files": [{"sha": "bf2a82339d94857d3b2791e84f6d8e2b89e0f6dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a513e2a1b446a2aa7accec36ac055935e9d6491/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a513e2a1b446a2aa7accec36ac055935e9d6491/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a513e2a1b446a2aa7accec36ac055935e9d6491", "patch": "@@ -1,3 +1,15 @@\n+2018-06-19  Tony Reix  <tony.reix@atos.com>\n+\t    Damien Bergamini  <damien.bergamini@atos.com>\n+\t    David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* collect2.c (static_obj): New variable.\n+\t(static_libs): New variable.\n+\t(is_in_list): Uncomment declaration.\n+\t(main): Track AIX libraries linked statically.\n+\t(is_in_list): Uncomment definition.\n+\t(scan_prog_file): Don't add AIX shared libraries initializer\n+\tto constructor list if linking statically.\n+\n 2018-06-19  Max Filippov  <jcmvbkbc@gmail.com>\n \n \t* config/xtensa/xtensa.md (UNSPEC_FRAME_BLOCKAGE): New unspec"}, {"sha": "783dce8fac5124728a23af0b49e4aaa704ce32fd", "filename": "gcc/collect2.c", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a513e2a1b446a2aa7accec36ac055935e9d6491/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a513e2a1b446a2aa7accec36ac055935e9d6491/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=6a513e2a1b446a2aa7accec36ac055935e9d6491", "patch": "@@ -201,6 +201,7 @@ static enum lto_mode_d lto_mode = LTO_MODE_NONE;\n bool helpflag;\t\t\t/* true if --help */\n \n static int shared_obj;\t\t\t/* true if -shared */\n+static int static_obj;\t\t\t/* true if -static */\n \n static const char *c_file;\t\t/* <xxx>.c for constructor/destructor list.  */\n static const char *o_file;\t\t/* <xxx>.o for constructor/destructor list.  */\n@@ -255,6 +256,7 @@ bool may_unlink_output_file = false;\n #ifdef COLLECT_EXPORT_LIST\n /* Lists to keep libraries to be scanned for global constructors/destructors.  */\n static struct head libs;                    /* list of libraries */\n+static struct head static_libs;             /* list of statically linked libraries */\n static struct path_prefix cmdline_lib_dirs; /* directories specified with -L */\n static struct path_prefix libpath_lib_dirs; /* directories in LIBPATH */\n static struct path_prefix *libpaths[3] = {&cmdline_lib_dirs,\n@@ -320,9 +322,7 @@ static void write_c_file_glob (FILE *, const char *);\n static void scan_libraries (const char *);\n #endif\n #ifdef COLLECT_EXPORT_LIST\n-#if 0\n static int is_in_list (const char *, struct id *);\n-#endif\n static void write_aix_file (FILE *, struct id *);\n static char *resolve_lib_name (const char *);\n #endif\n@@ -911,6 +911,7 @@ main (int argc, char **argv)\n   int first_file;\n   int num_c_args;\n   char **old_argv;\n+  bool is_static = false;\n   int i;\n \n   for (i = 0; i < USE_LD_MAX; i++)\n@@ -1241,6 +1242,8 @@ main (int argc, char **argv)\n \t*c_ptr++ = xstrdup (q);\n       if (strcmp (q, \"-shared\") == 0)\n \tshared_obj = 1;\n+      if (strcmp (q, \"-static\") == 0)\n+\tstatic_obj = 1;\n       if (*q == '-' && q[1] == 'B')\n \t{\n \t  *c_ptr++ = xstrdup (q);\n@@ -1269,6 +1272,7 @@ main (int argc, char **argv)\n   /* Parse arguments.  Remember output file spec, pass the rest to ld.  */\n   /* After the first file, put in the c++ rt0.  */\n \n+  is_static = static_obj;\n   first_file = 1;\n   while ((arg = *++argv) != (char *) 0)\n     {\n@@ -1374,6 +1378,18 @@ main (int argc, char **argv)\n #endif\n               break;\n \n+#ifdef COLLECT_EXPORT_LIST\n+\t    case 'b':\n+\t      if (!strcmp (arg, \"-bstatic\"))\n+\t\t{\n+\t\t  is_static = true;\n+\t\t}\n+\t      else if (!strcmp (arg, \"-bdynamic\") || !strcmp (arg, \"-bshared\"))\n+\t\t{\n+\t\t  is_static = false;\n+\t\t}\n+\t      break;\n+#endif\n \t    case 'l':\n \t      if (first_file)\n \t\t{\n@@ -1390,6 +1406,8 @@ main (int argc, char **argv)\n \n \t\t/* Saving a full library name.  */\n \t\tadd_to_list (&libs, s);\n+\t\tif (is_static)\n+\t\t    add_to_list (&static_libs, s);\n \t      }\n #endif\n \t      break;\n@@ -1490,6 +1508,8 @@ main (int argc, char **argv)\n \t    {\n \t      /* Saving a full library name.  */\n \t      add_to_list (&libs, arg);\n+\t      if (is_static)\n+\t\tadd_to_list (&static_libs, arg);\n \t    }\n #endif\n \t}\n@@ -1501,6 +1521,8 @@ main (int argc, char **argv)\n     {\n       fprintf (stderr, \"List of libraries:\\n\");\n       dump_list (stderr, \"\\t\", libs.first);\n+      fprintf (stderr, \"List of statically linked libraries:\\n\");\n+      dump_list (stderr, \"\\t\", static_libs.first);\n     }\n \n   /* The AIX linker will discard static constructors in object files if\n@@ -1525,9 +1547,11 @@ main (int argc, char **argv)\n       this_filter &= ~SCAN_DWEH;\n #endif\n \n+    /* Scan object files.  */\n     while (export_object_lst < object)\n       scan_prog_file (*export_object_lst++, PASS_OBJ, this_filter);\n \n+    /* Scan libraries.  */\n     for (; list; list = list->next)\n       scan_prog_file (list->name, PASS_FIRST, this_filter);\n \n@@ -1975,7 +1999,6 @@ write_list (FILE *stream, const char *prefix, struct id *list)\n \n #ifdef COLLECT_EXPORT_LIST\n /* This function is really used only on AIX, but may be useful.  */\n-#if 0\n static int\n is_in_list (const char *prefix, struct id *list)\n {\n@@ -1986,7 +2009,6 @@ is_in_list (const char *prefix, struct id *list)\n     }\n     return 0;\n }\n-#endif\n #endif /* COLLECT_EXPORT_LIST */\n \n /* Added for debugging purpose.  */\n@@ -2818,7 +2840,12 @@ scan_prog_file (const char *prog_name, scanpass which_pass,\n \t\t\tcase SYM_AIXI:\n \t\t\t  if (! (filter & SCAN_CTOR))\n \t\t\t    break;\n-\t\t\t  if (is_shared && !aixlazy_flag)\n+\t\t\t  if (is_shared && !aixlazy_flag\n+#ifdef COLLECT_EXPORT_LIST\n+\t\t\t      && ! static_obj\n+\t\t\t      && ! is_in_list (prog_name, static_libs.first)\n+#endif\n+\t\t\t      )\n \t\t\t    add_to_list (&constructors, name);\n \t\t\t  break;\n "}]}