{"sha": "21d11f4f30bb73b56d608398f670e251f9d0eae4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFkMTFmNGYzMGJiNzNiNTZkNjA4Mzk4ZjY3MGUyNTFmOWQwZWFlNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-01-27T12:06:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-01-27T12:06:07Z"}, "message": "[multiple changes]\n\n2010-01-27  Tristan Gingold  <gingold@adacore.com>\n\n\t* seh_init.c: Use __ImageBase instead of _ImageBase.\n\n2010-01-27  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_disp.ads, exp_disp.adb (Expand_Interface_Thunk): Modify the\n\tprofile of interface thunks. The type of the controlling formal is now\n\tthe covered interface type (instead of the target tagged type).\n\nFrom-SVN: r156280", "tree": {"sha": "fcf18c87170e90c3956fea51ba71005b902825c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcf18c87170e90c3956fea51ba71005b902825c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21d11f4f30bb73b56d608398f670e251f9d0eae4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21d11f4f30bb73b56d608398f670e251f9d0eae4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21d11f4f30bb73b56d608398f670e251f9d0eae4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21d11f4f30bb73b56d608398f670e251f9d0eae4/comments", "author": null, "committer": null, "parents": [{"sha": "ee13bdc7cb8b37372563c0c0ad9482c1249a6f26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee13bdc7cb8b37372563c0c0ad9482c1249a6f26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee13bdc7cb8b37372563c0c0ad9482c1249a6f26"}], "stats": {"total": 98, "additions": 73, "deletions": 25}, "files": [{"sha": "1d3d0aaa649c888f5a9fc491b6bb95db1fb8562f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d11f4f30bb73b56d608398f670e251f9d0eae4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d11f4f30bb73b56d608398f670e251f9d0eae4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=21d11f4f30bb73b56d608398f670e251f9d0eae4", "patch": "@@ -1,3 +1,13 @@\n+2010-01-27  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* seh_init.c: Use __ImageBase instead of _ImageBase.\n+\n+2010-01-27  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.ads, exp_disp.adb (Expand_Interface_Thunk): Modify the\n+\tprofile of interface thunks. The type of the controlling formal is now\n+\tthe covered interface type (instead of the target tagged type).\n+\n 2010-01-27  Sergey Rybin  <rybin@adacore.com>\n \n \t* gnat_rm.texi, gnat_ugn.texi: Update gnatcheck doc."}, {"sha": "2d4a634f83d0d5b6f7eaa101c91bce6a9dc8e469", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 58, "deletions": 20, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d11f4f30bb73b56d608398f670e251f9d0eae4/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d11f4f30bb73b56d608398f670e251f9d0eae4/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=21d11f4f30bb73b56d608398f670e251f9d0eae4", "patch": "@@ -1447,27 +1447,23 @@ package body Exp_Disp is\n       Actuals         : constant List_Id    := New_List;\n       Decl            : constant List_Id    := New_List;\n       Formals         : constant List_Id    := New_List;\n+      Target          : constant Entity_Id  := Ultimate_Alias (Prim);\n \n       Controlling_Typ : Entity_Id;\n       Decl_1          : Node_Id;\n       Decl_2          : Node_Id;\n+      Expr            : Node_Id;\n       Formal          : Node_Id;\n+      Ftyp            : Entity_Id;\n+      Iface_Formal    : Node_Id;\n       New_Arg         : Node_Id;\n       Offset_To_Top   : Node_Id;\n-      Target          : Entity_Id;\n       Target_Formal   : Entity_Id;\n \n    begin\n       Thunk_Id   := Empty;\n       Thunk_Code := Empty;\n \n-      --  Traverse the list of alias to find the final target\n-\n-      Target := Prim;\n-      while Present (Alias (Target)) loop\n-         Target := Alias (Target);\n-      end loop;\n-\n       --  In case of primitives that are functions without formals and\n       --  a controlling result there is no need to build the thunk.\n \n@@ -1477,20 +1473,51 @@ package body Exp_Disp is\n          return;\n       end if;\n \n-      --  Duplicate the formals\n+      --  Duplicate the formals of the Target primitive. In the thunk, the type\n+      --  of the controlling formal is the covered interface type (instead of\n+      --  the target tagged type). Done to avoid problems with discriminated\n+      --  tagged types because, if the controlling type has discriminants with\n+      --  default values, then the type conversions done inside the body of the\n+      --  thunk (after the displacement of the pointer to the base of the\n+      --  actual object) generate code that modify its contents.\n+\n+      --  Note: This special management is not done for predefined primitives\n+      --  because???\n+\n+      if not Is_Predefined_Dispatching_Operation (Prim) then\n+         Iface_Formal := First_Formal (Interface_Alias (Prim));\n+      end if;\n \n       Formal := First_Formal (Target);\n       while Present (Formal) loop\n+         Ftyp := Etype (Formal);\n+\n+         --  Use the interface type as the type of the controlling formal (see\n+         --  comment above)\n+\n+         if not Is_Controlling_Formal (Formal)\n+           or else Is_Predefined_Dispatching_Operation (Prim)\n+         then\n+            Ftyp := Etype (Formal);\n+            Expr := New_Copy_Tree (Expression (Parent (Formal)));\n+         else\n+            Ftyp := Etype (Iface_Formal);\n+            Expr := Empty;\n+         end if;\n+\n          Append_To (Formals,\n            Make_Parameter_Specification (Loc,\n              Defining_Identifier =>\n                Make_Defining_Identifier (Sloc (Formal),\n                  Chars => Chars (Formal)),\n              In_Present => In_Present (Parent (Formal)),\n              Out_Present => Out_Present (Parent (Formal)),\n-             Parameter_Type =>\n-               New_Reference_To (Etype (Formal), Loc),\n-             Expression => New_Copy_Tree (Expression (Parent (Formal)))));\n+             Parameter_Type => New_Reference_To (Ftyp, Loc),\n+             Expression => Expr));\n+\n+         if not Is_Predefined_Dispatching_Operation (Prim) then\n+            Next_Formal (Iface_Formal);\n+         end if;\n \n          Next_Formal (Formal);\n       end loop;\n@@ -1500,10 +1527,24 @@ package body Exp_Disp is\n       Target_Formal := First_Formal (Target);\n       Formal        := First (Formals);\n       while Present (Formal) loop\n+\n+         --  Handle concurrent types\n+\n+         if Ekind (Target_Formal) = E_In_Parameter\n+           and then Ekind (Etype (Target_Formal)) = E_Anonymous_Access_Type\n+         then\n+            Ftyp := Directly_Designated_Type (Etype (Target_Formal));\n+         else\n+            Ftyp := Etype (Target_Formal);\n+         end if;\n+\n+         if Is_Concurrent_Type (Ftyp) then\n+            Ftyp := Corresponding_Record_Type (Ftyp);\n+         end if;\n+\n          if Ekind (Target_Formal) = E_In_Parameter\n            and then Ekind (Etype (Target_Formal)) = E_Anonymous_Access_Type\n-           and then Directly_Designated_Type (Etype (Target_Formal))\n-                     = Controlling_Typ\n+           and then Ftyp = Controlling_Typ\n          then\n             --  Generate:\n \n@@ -1522,9 +1563,7 @@ package body Exp_Disp is\n                     Null_Exclusion_Present => False,\n                     Constant_Present       => False,\n                     Subtype_Indication     =>\n-                      New_Reference_To\n-                        (Directly_Designated_Type\n-                          (Etype (Target_Formal)), Loc)));\n+                      New_Reference_To (Ftyp, Loc)));\n \n             New_Arg :=\n               Unchecked_Convert_To (RTE (RE_Address),\n@@ -1568,7 +1607,7 @@ package body Exp_Disp is\n                 (Defining_Identifier (Decl_2),\n                  New_Reference_To (Defining_Identifier (Decl_1), Loc)));\n \n-         elsif Etype (Target_Formal) = Controlling_Typ then\n+         elsif Ftyp = Controlling_Typ then\n             --  Generate:\n \n             --     S1 : Storage_Offset := Storage_Offset!(Formal'Address)\n@@ -1630,8 +1669,7 @@ package body Exp_Disp is\n             --    Target_Formal (S2.all)\n \n             Append_To (Actuals,\n-              Unchecked_Convert_To\n-                (Etype (Target_Formal),\n+              Unchecked_Convert_To (Ftyp,\n                  Make_Explicit_Dereference (Loc,\n                    New_Reference_To (Defining_Identifier (Decl_2), Loc))));\n "}, {"sha": "012692a7ae5dea31582935f075cde0366a24cd2f", "filename": "gcc/ada/seh_init.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d11f4f30bb73b56d608398f670e251f9d0eae4/gcc%2Fada%2Fseh_init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d11f4f30bb73b56d608398f670e251f9d0eae4/gcc%2Fada%2Fseh_init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fseh_init.c?ref=21d11f4f30bb73b56d608398f670e251f9d0eae4", "patch": "@@ -248,7 +248,7 @@ void __gnat_install_SEH_handler (void *eh ATTRIBUTE_UNUSED)\n   /* Get the end of the text section.  */\n   extern char etext[] asm(\"etext\");\n   /* Get the base of the module.  */\n-  extern char _ImageBase[];\n+  extern char __ImageBase[];\n \n   /* Current version is always 1 and we are registering an\n      exception handler.  */\n@@ -261,15 +261,15 @@ void __gnat_install_SEH_handler (void *eh ATTRIBUTE_UNUSED)\n \n   /* Add the exception handler.  */\n   unwind_info[0].AddressOfExceptionHandler =\n-    (DWORD)((char *)__gnat_SEH_error_handler - _ImageBase);\n+    (DWORD)((char *)__gnat_SEH_error_handler - __ImageBase);\n \n   /* Set its scope to the entire program.  */\n   Table[0].BeginAddress = 0;\n-  Table[0].EndAddress = (DWORD)(etext - _ImageBase);\n-  Table[0].UnwindData = (DWORD)((char *)unwind_info - _ImageBase);\n+  Table[0].EndAddress = (DWORD)(etext - __ImageBase);\n+  Table[0].UnwindData = (DWORD)((char *)unwind_info - __ImageBase);\n \n   /* Register the unwind information.  */\n-  RtlAddFunctionTable (Table, 1, (DWORD64)_ImageBase);\n+  RtlAddFunctionTable (Table, 1, (DWORD64)__ImageBase);\n }\n \n #else /* defined (_WIN64) */"}]}