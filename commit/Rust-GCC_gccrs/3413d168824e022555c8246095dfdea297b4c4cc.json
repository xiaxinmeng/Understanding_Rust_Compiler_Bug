{"sha": "3413d168824e022555c8246095dfdea297b4c4cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQxM2QxNjg4MjRlMDIyNTU1YzgyNDYwOTVkZmRlYTI5N2I0YzRjYw==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2018-08-24T17:26:57Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2018-08-24T17:26:57Z"}, "message": "re PR fortran/86837 (Optimization breaks an unformatted read with implicit loop)\n\n2018-08-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/86837\n\t* frontend-passes.c (var_in_expr_callback): New function.\n\t(var_in_expr): New function.\n\t(traverse_io_block): Use var_in_expr instead of\n\tgfc_check_dependency for checking if the variable depends on the\n\tprevious interators.\n\n2018-08-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/86837\n\t* gfortran.dg/implied_do_io_6.f90: New test.\n\nFrom-SVN: r263838", "tree": {"sha": "88e470a177f6b9dbc6b486d379ed245e99400a85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88e470a177f6b9dbc6b486d379ed245e99400a85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3413d168824e022555c8246095dfdea297b4c4cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3413d168824e022555c8246095dfdea297b4c4cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3413d168824e022555c8246095dfdea297b4c4cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3413d168824e022555c8246095dfdea297b4c4cc/comments", "author": null, "committer": null, "parents": [{"sha": "01aa3748261d9fa531b87f0c5701f5b7eb03a475", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01aa3748261d9fa531b87f0c5701f5b7eb03a475", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01aa3748261d9fa531b87f0c5701f5b7eb03a475"}], "stats": {"total": 84, "additions": 81, "deletions": 3}, "files": [{"sha": "0d81a496017833bc7cfb2124f0c32753a5a5e7c5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3413d168824e022555c8246095dfdea297b4c4cc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3413d168824e022555c8246095dfdea297b4c4cc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3413d168824e022555c8246095dfdea297b4c4cc", "patch": "@@ -1,3 +1,12 @@\n+2018-08-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/86837\n+\t* frontend-passes.c (var_in_expr_callback): New function.\n+\t(var_in_expr): New function.\n+\t(traverse_io_block): Use var_in_expr instead of\n+\tgfc_check_dependency for checking if the variable depends on the\n+\tprevious interators.\n+\n 2018-08-23  Janne Blomqvist  <blomqvist.janne@gmail.com>\n \n \t* trans-intrinsic.c (gfc_conv_intrinsic_minmaxval): Delete"}, {"sha": "0a5e8937015e87eac93ba0a4c945d676734747cd", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3413d168824e022555c8246095dfdea297b4c4cc/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3413d168824e022555c8246095dfdea297b4c4cc/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=3413d168824e022555c8246095dfdea297b4c4cc", "patch": "@@ -1104,6 +1104,31 @@ convert_elseif (gfc_code **c, int *walk_subtrees ATTRIBUTE_UNUSED,\n   return 0;\n }\n \n+/* Callback function to var_in_expr - return true if expr1 and\n+   expr2 are identical variables. */\n+static int\n+var_in_expr_callback (gfc_expr **e, int *walk_subtrees ATTRIBUTE_UNUSED,\n+\t\t      void *data)\n+{\n+  gfc_expr *expr1 = (gfc_expr *) data;\n+  gfc_expr *expr2 = *e;\n+\n+  if (expr2->expr_type != EXPR_VARIABLE)\n+    return 0;\n+\n+  return expr1->symtree->n.sym == expr2->symtree->n.sym;\n+}\n+\n+/* Return true if expr1 is found in expr2. */\n+\n+static bool\n+var_in_expr (gfc_expr *expr1, gfc_expr *expr2)\n+{\n+  gcc_assert (expr1->expr_type == EXPR_VARIABLE);\n+\n+  return gfc_expr_walker (&expr2, var_in_expr_callback, (void *) expr1);\n+}\n+\n struct do_stack\n {\n   struct do_stack *prev;\n@@ -1256,9 +1281,9 @@ traverse_io_block (gfc_code *code, bool *has_reached, gfc_code *prev)\n \t  for (int j = i - 1; j < i; j++)\n \t    {\n \t      if (iters[j]\n-\t\t  && (gfc_check_dependency (var, iters[j]->start, true)\n-\t\t      || gfc_check_dependency (var, iters[j]->end, true)\n-\t\t      || gfc_check_dependency (var, iters[j]->step, true)))\n+\t\t  && (var_in_expr (var, iters[j]->start)\n+\t\t      || var_in_expr (var, iters[j]->end)\n+\t\t      || var_in_expr (var, iters[j]->step)))\n \t\t  return false;\n \t    }\t\t  \n \t}"}, {"sha": "064d8ec75e825b0fb40c5372a0763602a6c16f8e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3413d168824e022555c8246095dfdea297b4c4cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3413d168824e022555c8246095dfdea297b4c4cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3413d168824e022555c8246095dfdea297b4c4cc", "patch": "@@ -1,3 +1,8 @@\n+2018-08-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/86837\n+\t* gfortran.dg/implied_do_io_6.f90: New test.\n+\n 2018-08-24  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR middle-end/87092"}, {"sha": "ebc99b234d157630bdd4c0e2fa13f8572826371e", "filename": "gcc/testsuite/gfortran.dg/implied_do_io_6.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3413d168824e022555c8246095dfdea297b4c4cc/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplied_do_io_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3413d168824e022555c8246095dfdea297b4c4cc/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplied_do_io_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplied_do_io_6.f90?ref=3413d168824e022555c8246095dfdea297b4c4cc", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do  run }\n+! { dg-options \"-ffrontend-optimize\" }\n+! PR 86837 - this was mis-optimized by trying to turn this into an\n+! array I/O statement.\n+! Original test case by \"Pascal\".\n+\n+Program read_loop\n+\n+  implicit none\n+\n+  integer :: i, j\n+\n+  ! number of values per column\n+  integer, dimension(3) :: nvalues\n+  data nvalues / 1, 2, 4 /\n+\n+  ! values in a 1D array\n+  real, dimension(7) :: one_d\n+  data one_d / 1,   11, 12,   21, 22, 23, 24 /\n+\n+  ! where to store the data back\n+  real, dimension(4, 3) :: two_d\n+\n+  ! 1 - write our 7 values in one block\n+  open(unit=10, file=\"loop.dta\", form=\"unformatted\")\n+  write(10) one_d\n+  close(unit=10)\n+\n+  ! 2 - read them back in chosen cells of a 2D array\n+  two_d = -9\n+  open(unit=10, file=\"loop.dta\", form=\"unformatted\", status='old')\n+  read(10) ((two_d(i,j), i=1,nvalues(j)), j=1,3)\n+  close(unit=10, status='delete')\n+\n+  ! 4 - print the whole array, just in case\n+\n+  if (any(reshape(two_d,[12]) /= [1.,-9.,-9.,-9.,11.,12.,-9.,-9.,21.,22.,23.,24.])) call abort\n+\n+end Program read_loop"}]}