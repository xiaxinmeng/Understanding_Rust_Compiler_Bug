{"sha": "b82c2e6fce74a6283fb3efd195d62aa6a88ef561", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgyYzJlNmZjZTc0YTYyODNmYjNlZmQxOTVkNjJhYTZhODhlZjU2MQ==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2019-09-02T14:26:26Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2019-09-02T14:26:26Z"}, "message": "re PR middle-end/91605 (ICE in ix86_avx256_split_vector_move_misalign, at config/i386/i386-expand.c:489 since r274986)\n\n2019-09-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR middle-end/91605\n        * expr.c (addr_expr_of_non_mem_decl_p_1): Refactor into...\n        (non_mem_decl_p): ...this.\n        (mem_ref_refers_to_non_mem_p): Handle DECL_P as well ase MEM_REF.\n        (expand_assignment): Call mem_ref_referes_to_non_mem_p\n        unconditionally as before.\n\ntestsuite:\n2019-09-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR middle-end/91605\n        * g++.target/i386/pr91605.C: New test.\n\nFrom-SVN: r275320", "tree": {"sha": "157afd06706fd7ef200f5ca7a90bb55cb2d5e641", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/157afd06706fd7ef200f5ca7a90bb55cb2d5e641"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b82c2e6fce74a6283fb3efd195d62aa6a88ef561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b82c2e6fce74a6283fb3efd195d62aa6a88ef561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b82c2e6fce74a6283fb3efd195d62aa6a88ef561", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b82c2e6fce74a6283fb3efd195d62aa6a88ef561/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1525fa83cc704ba18738eb2eab76a7f4d6bfde6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1525fa83cc704ba18738eb2eab76a7f4d6bfde6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1525fa83cc704ba18738eb2eab76a7f4d6bfde6b"}], "stats": {"total": 64, "additions": 50, "deletions": 14}, "files": [{"sha": "3a0f9178c8b84fce26514af452151868823dd4f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b82c2e6fce74a6283fb3efd195d62aa6a88ef561/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b82c2e6fce74a6283fb3efd195d62aa6a88ef561/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b82c2e6fce74a6283fb3efd195d62aa6a88ef561", "patch": "@@ -1,3 +1,12 @@\n+2019-09-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR middle-end/91605\n+\t* expr.c (addr_expr_of_non_mem_decl_p_1): Refactor into...\n+\t(non_mem_decl_p): ...this.\n+\t(mem_ref_refers_to_non_mem_p): Handle DECL_P as well ase MEM_REF.\n+\t(expand_assignment): Call mem_ref_referes_to_non_mem_p\n+\tunconditionally as before.\n+\n 2019-09-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR target/91323"}, {"sha": "3c3f15a0f776cb996b3e53ba2ccb5c426d15dcf6", "filename": "gcc/expr.c", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b82c2e6fce74a6283fb3efd195d62aa6a88ef561/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b82c2e6fce74a6283fb3efd195d62aa6a88ef561/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=b82c2e6fce74a6283fb3efd195d62aa6a88ef561", "patch": "@@ -4942,37 +4942,46 @@ get_bit_range (poly_uint64_pod *bitstart, poly_uint64_pod *bitend, tree exp,\n   *bitend = *bitstart + tree_to_poly_uint64 (DECL_SIZE (repr)) - 1;\n }\n \n-/* Returns true if ADDR is an ADDR_EXPR of a DECL that does not reside\n-   in memory and has non-BLKmode.  DECL_RTL must not be a MEM; if\n-   DECL_RTL was not set yet, return NORTL.  */\n+/* Returns true if BASE is a DECL that does not reside in memory and\n+   has non-BLKmode.  DECL_RTL must not be a MEM; if\n+   DECL_RTL was not set yet, return false.  */\n \n static inline bool\n-addr_expr_of_non_mem_decl_p_1 (tree addr, bool nortl)\n+non_mem_decl_p (tree base)\n {\n-  if (TREE_CODE (addr) != ADDR_EXPR)\n-    return false;\n-\n-  tree base = TREE_OPERAND (addr, 0);\n-\n   if (!DECL_P (base)\n       || TREE_ADDRESSABLE (base)\n       || DECL_MODE (base) == BLKmode)\n     return false;\n \n   if (!DECL_RTL_SET_P (base))\n-    return nortl;\n+    return false;\n \n   return (!MEM_P (DECL_RTL (base)));\n }\n \n-/* Returns true if the MEM_REF REF refers to an object that does not\n+/* Returns true if REF refers to an object that does not\n    reside in memory and has non-BLKmode.  */\n \n static inline bool\n mem_ref_refers_to_non_mem_p (tree ref)\n {\n-  tree base = TREE_OPERAND (ref, 0);\n-  return addr_expr_of_non_mem_decl_p_1 (base, false);\n+  tree base;\n+\n+  if (TREE_CODE (ref) == MEM_REF\n+      || TREE_CODE (ref) == TARGET_MEM_REF)\n+    {\n+      tree addr = TREE_OPERAND (ref, 0);\n+\n+      if (TREE_CODE (addr) != ADDR_EXPR)\n+\treturn false;\n+\n+      base = TREE_OPERAND (addr, 0);\n+    }\n+  else\n+    base = ref;\n+\n+  return non_mem_decl_p (base);\n }\n \n /* Expand an assignment that stores the value of FROM into TO.  If NONTEMPORAL\n@@ -5004,7 +5013,7 @@ expand_assignment (tree to, tree from, bool nontemporal)\n        || TREE_CODE (to) == TARGET_MEM_REF\n        || DECL_P (to))\n       && mode != BLKmode\n-      && (DECL_P (to) || !mem_ref_refers_to_non_mem_p (to))\n+      && !mem_ref_refers_to_non_mem_p (to)\n       && ((align = get_object_alignment (to))\n \t  < GET_MODE_ALIGNMENT (mode))\n       && (((icode = optab_handler (movmisalign_optab, mode))"}, {"sha": "a7c473efc4058d2b6271c732cd21d90323673a97", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b82c2e6fce74a6283fb3efd195d62aa6a88ef561/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b82c2e6fce74a6283fb3efd195d62aa6a88ef561/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b82c2e6fce74a6283fb3efd195d62aa6a88ef561", "patch": "@@ -1,3 +1,8 @@\n+2019-09-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR middle-end/91605\n+\t* g++.target/i386/pr91605.C: New test.\n+\n 2019-09-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/91632"}, {"sha": "8bceedb1ce6141b23820a753b83d1107f2f6e535", "filename": "gcc/testsuite/g++.target/i386/pr91605.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b82c2e6fce74a6283fb3efd195d62aa6a88ef561/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr91605.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b82c2e6fce74a6283fb3efd195d62aa6a88ef561/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr91605.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr91605.C?ref=b82c2e6fce74a6283fb3efd195d62aa6a88ef561", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fpack-struct -mavx\" } */\n+\n+struct A {\n+  __attribute__((__vector_size__(4 * sizeof(double)))) double data;\n+};\n+struct B {\n+  A operator*(B);\n+};\n+void fn1() {\n+  B x, y;\n+  x *y;\n+}"}]}