{"sha": "e91c9fe5008f21f582142bfa8d50481f5991829e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkxYzlmZTUwMDhmMjFmNTgyMTQyYmZhOGQ1MDQ4MWY1OTkxODI5ZQ==", "commit": {"author": {"name": "Borislav Petkov", "email": "bp@suse.de", "date": "2018-05-30T22:49:25Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-05-30T22:49:25Z"}, "message": "extend.texi: Document some architecture specific constraints and sort entries.\n\n\t* doc/extend.texi: Document some architecture specific\n\tconstraints and sort entries.\n\nFrom-SVN: r260977", "tree": {"sha": "6125a7528be6b5c0dfd59b1869e539fa6c778ece", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6125a7528be6b5c0dfd59b1869e539fa6c778ece"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e91c9fe5008f21f582142bfa8d50481f5991829e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e91c9fe5008f21f582142bfa8d50481f5991829e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e91c9fe5008f21f582142bfa8d50481f5991829e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e91c9fe5008f21f582142bfa8d50481f5991829e/comments", "author": null, "committer": null, "parents": [{"sha": "3ce4cdb2f7ea5dfe464e2d5ddfe6b29c7411b104", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ce4cdb2f7ea5dfe464e2d5ddfe6b29c7411b104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ce4cdb2f7ea5dfe464e2d5ddfe6b29c7411b104"}], "stats": {"total": 84, "additions": 58, "deletions": 26}, "files": [{"sha": "fe9c1d8adf11bf5be7a1374ac55cc9e11611989a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e91c9fe5008f21f582142bfa8d50481f5991829e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e91c9fe5008f21f582142bfa8d50481f5991829e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e91c9fe5008f21f582142bfa8d50481f5991829e", "patch": "@@ -1,3 +1,8 @@\n+2018-05-30  Borislav Petkov  <bp@suse.de>\n+\n+\t* doc/extend.texi: Document some architecture specific\n+\tconstraints and sort entries.\n+\n 2018-05-30  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/85369"}, {"sha": "cb65760155c9b8dc26a2e8c71993f68401762236", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 53, "deletions": 26, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e91c9fe5008f21f582142bfa8d50481f5991829e/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e91c9fe5008f21f582142bfa8d50481f5991829e/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=e91c9fe5008f21f582142bfa8d50481f5991829e", "patch": "@@ -9285,14 +9285,14 @@ top:\n \n    asm volatile goto (\"some assembler instructions here\"\n    : /* No outputs. */\n-   : \"q\" (iInt), \"X\" (sizeof(unsigned char) + 1)\n+   : \"q\" (iInt), \"X\" (sizeof(unsigned char) + 1), \"i\" (42)\n    : /* No clobbers. */\n    : top);\n @}\n @end example\n \n-With no modifiers, this is what the output from the operands would be for the \n-@samp{att} and @samp{intel} dialects of assembler:\n+With no modifiers, this is what the output from the operands would be\n+for the @samp{att} and @samp{intel} dialects of assembler:\n \n @multitable {Operand} {$.L2} {OFFSET FLAT:.L2}\n @headitem Operand @tab @samp{att} @tab @samp{intel}\n@@ -9302,55 +9302,82 @@ With no modifiers, this is what the output from the operands would be for the\n @item @code{%1}\n @tab @code{$2}\n @tab @code{2}\n-@item @code{%2}\n-@tab @code{$.L2}\n-@tab @code{OFFSET FLAT:.L2}\n+@item @code{%3}\n+@tab @code{$.L3}\n+@tab @code{OFFSET FLAT:.L3}\n @end multitable\n \n The table below shows the list of supported modifiers and their effects.\n \n @multitable {Modifier} {Print the opcode suffix for the size of th} {Operand} {@samp{att}} {@samp{intel}}\n @headitem Modifier @tab Description @tab Operand @tab @samp{att} @tab @samp{intel}\n-@item @code{z}\n-@tab Print the opcode suffix for the size of the current integer operand (one of @code{b}/@code{w}/@code{l}/@code{q}).\n-@tab @code{%z0}\n-@tab @code{l}\n-@tab \n+@item @code{a}\n+@tab Print an absolute memory reference.\n+@tab @code{%A0}\n+@tab @code{*%rax}\n+@tab @code{rax}\n @item @code{b}\n @tab Print the QImode name of the register.\n @tab @code{%b0}\n @tab @code{%al}\n @tab @code{al}\n+@item @code{c}\n+@tab Require a constant operand and print the constant expression with no punctuation.\n+@tab @code{%c1}\n+@tab @code{2}\n+@tab @code{2}\n+@item @code{E}\n+@tab Print the address in Double Integer (DImode) mode (8 bytes) when the target is 64-bit.\n+Otherwise mode is unspecified (VOIDmode).\n+@tab @code{%E1}\n+@tab @code{%(rax)}\n+@tab @code{[rax]}\n @item @code{h}\n @tab Print the QImode name for a ``high'' register.\n @tab @code{%h0}\n @tab @code{%ah}\n @tab @code{ah}\n-@item @code{w}\n-@tab Print the HImode name of the register.\n-@tab @code{%w0}\n-@tab @code{%ax}\n-@tab @code{ax}\n+@item @code{H}\n+@tab Add 8 bytes to an offsettable memory reference. Useful when accessing the\n+high 8 bytes of SSE values. For a memref in (%rax), it generates\n+@tab @code{%H0}\n+@tab @code{8(%rax)}\n+@tab @code{8[rax]}\n @item @code{k}\n @tab Print the SImode name of the register.\n @tab @code{%k0}\n @tab @code{%eax}\n @tab @code{eax}\n+@item @code{l}\n+@tab Print the label name with no punctuation.\n+@tab @code{%l3}\n+@tab @code{.L3}\n+@tab @code{.L3}\n+@item @code{p}\n+@tab Print raw symbol name (without syntax-specific prefixes).\n+@tab @code{%p2}\n+@tab @code{42}\n+@tab @code{42}\n+@item @code{P}\n+@tab If used for a function, print the PLT suffix and generate PIC code.\n+For example, emit @code{foo@@PLT} instead of 'foo' for the function\n+foo(). If used for a constant, drop all syntax-specific prefixes and\n+issue the bare constant. See @code{p} above.\n @item @code{q}\n @tab Print the DImode name of the register.\n @tab @code{%q0}\n @tab @code{%rax}\n @tab @code{rax}\n-@item @code{l}\n-@tab Print the label name with no punctuation.\n-@tab @code{%l2}\n-@tab @code{.L2}\n-@tab @code{.L2}\n-@item @code{c}\n-@tab Require a constant operand and print the constant expression with no punctuation.\n-@tab @code{%c1}\n-@tab @code{2}\n-@tab @code{2}\n+@item @code{w}\n+@tab Print the HImode name of the register.\n+@tab @code{%w0}\n+@tab @code{%ax}\n+@tab @code{ax}\n+@item @code{z}\n+@tab Print the opcode suffix for the size of the current integer operand (one of @code{b}/@code{w}/@code{l}/@code{q}).\n+@tab @code{%z0}\n+@tab @code{l}\n+@tab \n @end multitable\n \n @code{V} is a special modifier which prints the name of the full integer"}]}