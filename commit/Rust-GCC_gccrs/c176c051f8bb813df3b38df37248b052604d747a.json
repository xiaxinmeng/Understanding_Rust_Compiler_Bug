{"sha": "c176c051f8bb813df3b38df37248b052604d747a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE3NmMwNTFmOGJiODEzZGYzYjM4ZGYzNzI0OGIwNTI2MDRkNzQ3YQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-06-10T23:15:03Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-06-10T23:15:03Z"}, "message": "alpha.c (override_options): Set align_loops, align_jumps, and align_functions.\n\n        * config/alpha/alpha.c (override_options): Set align_loops,\n        align_jumps, and align_functions.\n        * config/alpha/alpha.h (FUNCTION_BOUNDARY): Set to 32 bits.\n        (LOOP_ALIGN, LABEL_ALIGN_AFTER_BARRIER): Remove.\n\nFrom-SVN: r43160", "tree": {"sha": "cc9059065f46d9a289d4eb880aed73e29402805d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc9059065f46d9a289d4eb880aed73e29402805d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c176c051f8bb813df3b38df37248b052604d747a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c176c051f8bb813df3b38df37248b052604d747a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c176c051f8bb813df3b38df37248b052604d747a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c176c051f8bb813df3b38df37248b052604d747a/comments", "author": null, "committer": null, "parents": [{"sha": "76321db654bc556e27dc6d2fe6c989adf520be83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76321db654bc556e27dc6d2fe6c989adf520be83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76321db654bc556e27dc6d2fe6c989adf520be83"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "92a8915da2e07ba7d56e5d34ffe9f5fd96119b76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c176c051f8bb813df3b38df37248b052604d747a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c176c051f8bb813df3b38df37248b052604d747a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c176c051f8bb813df3b38df37248b052604d747a", "patch": "@@ -1,3 +1,10 @@\n+2001-06-10  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (override_options): Set align_loops,\n+\talign_jumps, and align_functions.\n+\t* config/alpha/alpha.h (FUNCTION_BOUNDARY): Set to 32 bits.\n+\t(LOOP_ALIGN, LABEL_ALIGN_AFTER_BARRIER): Remove.  \n+\n 2001-06-11  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* emit-rtl.c (gen_lowpart_common): Do not assume that SFmode and DFmode"}, {"sha": "f9dc0463f3599b4b4892bcd6db6b9fe8b8abcd78", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c176c051f8bb813df3b38df37248b052604d747a/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c176c051f8bb813df3b38df37248b052604d747a/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=c176c051f8bb813df3b38df37248b052604d747a", "patch": "@@ -342,6 +342,19 @@ override_options ()\n   if (!g_switch_set)\n     g_switch_value = 8;\n \n+  /* Align labels and loops for optimal branching.  */\n+  /* ??? Kludge these by not doing anything if we don't optimize and also if\n+     we are writing ECOFF symbols to work around a bug in DEC's assembler. */\n+  if (optimize > 0 && write_symbols != SDB_DEBUG)\n+    {\n+      if (align_loops <= 0)\n+\talign_loops = 16;\n+      if (align_jumps <= 0)\n+\talign_jumps = 16;\n+    }\n+  if (align_functions <= 0)\n+    align_functions = 16;\n+\n   /* Acquire a unique set number for our register saves and restores.  */\n   alpha_sr_alias_set = new_alias_set ();\n "}, {"sha": "badeaffc3266c0c77944495b8ecbc4c753ccf6f4", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c176c051f8bb813df3b38df37248b052604d747a/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c176c051f8bb813df3b38df37248b052604d747a/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=c176c051f8bb813df3b38df37248b052604d747a", "patch": "@@ -477,7 +477,7 @@ extern const char *alpha_mlat_string;\t/* For -mmemory-latency= */\n #define STACK_BOUNDARY 64\n \n /* Allocation boundary (in *bits*) for the code of a function.  */\n-#define FUNCTION_BOUNDARY 128\n+#define FUNCTION_BOUNDARY 32\n \n /* Alignment of field after `int : 0' in a structure.  */\n #define EMPTY_FIELD_BOUNDARY 64\n@@ -488,22 +488,6 @@ extern const char *alpha_mlat_string;\t/* For -mmemory-latency= */\n /* A bitfield declared as `int' forces `int' alignment for the struct.  */\n #define PCC_BITFIELD_TYPE_MATTERS 1\n \n-/* Align loop starts for optimal branching.  \n-\n-   ??? Kludge this and the next macro for the moment by not doing anything if\n-   we don't optimize and also if we are writing ECOFF symbols to work around\n-   a bug in DEC's assembler. */\n-\n-#define LOOP_ALIGN(LABEL) \\\n-  (optimize > 0 && write_symbols != SDB_DEBUG ? 4 : 0)\n-\n-/* This is how to align an instruction for optimal branching.  On\n-   Alpha we'll get better performance by aligning on an octaword\n-   boundary.  */\n-\n-#define LABEL_ALIGN_AFTER_BARRIER(FILE)\t\\\n-  (optimize > 0 && write_symbols != SDB_DEBUG ? 4 : 0)\n-\n /* No data type wants to be aligned rounder than this.  */\n #define BIGGEST_ALIGNMENT 128\n "}]}