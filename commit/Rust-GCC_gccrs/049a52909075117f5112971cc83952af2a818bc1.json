{"sha": "049a52909075117f5112971cc83952af2a818bc1", "node_id": "C_kwDOANBUbNoAKDA0OWE1MjkwOTA3NTExN2Y1MTEyOTcxY2M4Mzk1MmFmMmE4MThiYzE", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-01-23T21:25:07Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-01-24T03:26:24Z"}, "message": "c++: TARGET_EXPR collapsing [PR107303]\n\nIn r13-2978 I tried to eliminate TARGET_EXPR around TARGET_EXPR by\ndiscarding the outer one, but as in this testcase that breaks if the\nTARGET_EXPR_SLOT of the outer one is used elsewhere.  But it should always\nbe safe to strip the inner one; if its slot were reused, there would be a\nCOMPOUND_EXPR around the TARGET_EXPR.\n\nFor 107329, if we're setting *walk_subtrees, we also need to fold\nTARGET_EXPR_CLEANUP.\n\n\tPR c++/107303\n\tPR c++/107329\n\ngcc/cp/ChangeLog:\n\n\t* cp-gimplify.cc (cp_fold_r) [TARGET_EXPR]: In case of double\n\tTARGET_EXPR, keep the outer one instead of the inner one.\n\t(maybe_replace_decl): New.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/ext/builtin-shufflevector-5.C: New test.\n\t* g++.dg/init/new51.C: New test.", "tree": {"sha": "bc657540f19ed98d8f7fe778deebdb78f4b6f20d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc657540f19ed98d8f7fe778deebdb78f4b6f20d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/049a52909075117f5112971cc83952af2a818bc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/049a52909075117f5112971cc83952af2a818bc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/049a52909075117f5112971cc83952af2a818bc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/049a52909075117f5112971cc83952af2a818bc1/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "607f278a3546fe6b91a881318db85d7a0dfdacd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/607f278a3546fe6b91a881318db85d7a0dfdacd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/607f278a3546fe6b91a881318db85d7a0dfdacd9"}], "stats": {"total": 55, "additions": 52, "deletions": 3}, "files": [{"sha": "92cd309e670d6b39e121e31c407ff579e9ab5abb", "filename": "gcc/cp/cp-gimplify.cc", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049a52909075117f5112971cc83952af2a818bc1/gcc%2Fcp%2Fcp-gimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049a52909075117f5112971cc83952af2a818bc1/gcc%2Fcp%2Fcp-gimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.cc?ref=049a52909075117f5112971cc83952af2a818bc1", "patch": "@@ -952,6 +952,28 @@ cp_genericize_target_expr (tree *stmt_p)\n   gcc_assert (!DECL_INITIAL (slot));\n }\n \n+/* Similar to if (target_expr_needs_replace) replace_decl, but TP is the\n+   TARGET_EXPR_INITIAL, and this also updates *_SLOT.  We need this extra\n+   replacement when cp_folding TARGET_EXPR to preserve the invariant that\n+   AGGR_INIT_EXPR_SLOT agrees with the enclosing TARGET_EXPR_SLOT.  */\n+\n+bool\n+maybe_replace_decl (tree *tp, tree decl, tree replacement)\n+{\n+  if (!*tp || !VOID_TYPE_P (TREE_TYPE (*tp)))\n+    return false;\n+  tree t = *tp;\n+  while (TREE_CODE (t) == COMPOUND_EXPR)\n+    t = TREE_OPERAND (t, 1);\n+  if (TREE_CODE (t) == AGGR_INIT_EXPR)\n+    replace_decl (&AGGR_INIT_EXPR_SLOT (t), decl, replacement);\n+  else if (TREE_CODE (t) == VEC_INIT_EXPR)\n+    replace_decl (&VEC_INIT_EXPR_SLOT (t), decl, replacement);\n+  else\n+    replace_decl (tp, decl, replacement);\n+  return true;\n+}\n+\n /* Genericization context.  */\n \n struct cp_genericize_data\n@@ -1116,15 +1138,18 @@ cp_fold_r (tree *stmt_p, int *walk_subtrees, void *data_)\n \tcp_genericize_target_expr (stmt_p);\n \n       /* Folding might replace e.g. a COND_EXPR with a TARGET_EXPR; in\n-\t that case, use it in place of this one.  */\n+\t that case, strip it in favor of this one.  */\n       if (tree &init = TARGET_EXPR_INITIAL (stmt))\n \t{\n \t  cp_walk_tree (&init, cp_fold_r, data, NULL);\n+\t  cp_walk_tree (&TARGET_EXPR_CLEANUP (stmt), cp_fold_r, data, NULL);\n \t  *walk_subtrees = 0;\n \t  if (TREE_CODE (init) == TARGET_EXPR)\n \t    {\n-\t      TARGET_EXPR_ELIDING_P (init) = TARGET_EXPR_ELIDING_P (stmt);\n-\t      *stmt_p = init;\n+\t      tree sub = TARGET_EXPR_INITIAL (init);\n+\t      maybe_replace_decl (&sub, TARGET_EXPR_SLOT (init),\n+\t\t\t\t  TARGET_EXPR_SLOT (stmt));\n+\t      init = sub;\n \t    }\n \t}\n       break;"}, {"sha": "06472b8d86b25458ac63a99da74a8d9baff7866d", "filename": "gcc/testsuite/g++.dg/ext/builtin-shufflevector-5.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049a52909075117f5112971cc83952af2a818bc1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-shufflevector-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049a52909075117f5112971cc83952af2a818bc1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-shufflevector-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-shufflevector-5.C?ref=049a52909075117f5112971cc83952af2a818bc1", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/107303\n+// { dg-options \"-Wno-psabi\" }\n+\n+typedef __attribute__((__vector_size__ (2))) unsigned short U;\n+typedef __attribute__((__vector_size__ (8))) unsigned short V;\n+\n+U u0, u1, u2;\n+V v;\n+\n+void\n+foo (void)\n+{\n+  u0 *= +__builtin_shufflevector (__builtin_shufflevector (u1, v, 3, 1), u2, 0);\n+}"}, {"sha": "d8b336476d9354bde0dfed75ac4bcd02b218c1ec", "filename": "gcc/testsuite/g++.dg/init/new51.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049a52909075117f5112971cc83952af2a818bc1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew51.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049a52909075117f5112971cc83952af2a818bc1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew51.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew51.C?ref=049a52909075117f5112971cc83952af2a818bc1", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/107329\n+\n+struct RexxClass {\n+  void *operator new(unsigned long, unsigned long, const char *, RexxClass *,\n+                     RexxClass *);\n+  void operator delete(void *, unsigned long, const char *, RexxClass *,\n+                       RexxClass *);\n+  RexxClass();\n+};\n+void createInstance() { new (sizeof(RexxClass), \"\", 0, 0) RexxClass; }"}]}