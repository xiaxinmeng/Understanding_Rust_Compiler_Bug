{"sha": "9d908b7fc475b351622fa5630d4874068c789d70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ5MDhiN2ZjNDc1YjM1MTYyMmZhNTYzMGQ0ODc0MDY4Yzc4OWQ3MA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-25T17:18:44Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-25T17:22:47Z"}, "message": "libstdc++: Fix missing subsumption in std::iterator_traits [PR 97935]\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/97935\n\t* include/bits/iterator_concepts.h (__detail::__iter_without_category):\n\tNew helper concept.\n\t(__iterator_traits::__cat): Use __detail::__iter_without_category.\n\t* testsuite/24_iterators/associated_types/iterator.traits.cc: New test.", "tree": {"sha": "7c29046c94902dfca5068270f8b5b4aad49bbbc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c29046c94902dfca5068270f8b5b4aad49bbbc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d908b7fc475b351622fa5630d4874068c789d70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d908b7fc475b351622fa5630d4874068c789d70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d908b7fc475b351622fa5630d4874068c789d70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d908b7fc475b351622fa5630d4874068c789d70/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a8d1f54de371de88b2604d8c0e4e01306be8870", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a8d1f54de371de88b2604d8c0e4e01306be8870", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a8d1f54de371de88b2604d8c0e4e01306be8870"}], "stats": {"total": 73, "additions": 67, "deletions": 6}, "files": [{"sha": "6668caa8185c7c3922b89a0ed70f84428440b8c0", "filename": "libstdc++-v3/include/bits/iterator_concepts.h", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d908b7fc475b351622fa5630d4874068c789d70/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d908b7fc475b351622fa5630d4874068c789d70/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h?ref=9d908b7fc475b351622fa5630d4874068c789d70", "patch": "@@ -357,6 +357,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     template<typename _Iter>\n       concept __iter_without_nested_types = !__iter_with_nested_types<_Iter>;\n+\n+    template<typename _Iter>\n+      concept __iter_without_category\n+\t= !requires { typename _Iter::iterator_category; };\n+\n   } // namespace __detail\n \n   template<typename _Iterator>\n@@ -396,20 +401,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ using type = typename _Iter::iterator_category; };\n \n       template<typename _Iter>\n-\trequires (!requires { typename _Iter::iterator_category; }\n-\t\t  && __detail::__cpp17_randacc_iterator<_Iter>)\n+\trequires __detail::__iter_without_category<_Iter>\n+\t\t  && __detail::__cpp17_randacc_iterator<_Iter>\n \tstruct __cat<_Iter>\n \t{ using type = random_access_iterator_tag; };\n \n       template<typename _Iter>\n-\trequires (!requires { typename _Iter::iterator_category; }\n-\t\t  && __detail::__cpp17_bidi_iterator<_Iter>)\n+\trequires __detail::__iter_without_category<_Iter>\n+\t\t  && __detail::__cpp17_bidi_iterator<_Iter>\n \tstruct __cat<_Iter>\n \t{ using type = bidirectional_iterator_tag; };\n \n       template<typename _Iter>\n-\trequires (!requires { typename _Iter::iterator_category; }\n-\t\t  && __detail::__cpp17_fwd_iterator<_Iter>)\n+\trequires __detail::__iter_without_category<_Iter>\n+\t\t  && __detail::__cpp17_fwd_iterator<_Iter>\n \tstruct __cat<_Iter>\n \t{ using type = forward_iterator_tag; };\n "}, {"sha": "c3549fefaf6042e1e0b70289337858ce5a359454", "filename": "libstdc++-v3/testsuite/24_iterators/associated_types/iterator.traits.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d908b7fc475b351622fa5630d4874068c789d70/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fassociated_types%2Fiterator.traits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d908b7fc475b351622fa5630d4874068c789d70/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fassociated_types%2Fiterator.traits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fassociated_types%2Fiterator.traits.cc?ref=9d908b7fc475b351622fa5630d4874068c789d70", "patch": "@@ -0,0 +1,56 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <iterator>\n+\n+struct bidi_iterator\n+{\n+  // No nested reference and pointer types.\n+  // No iterator_category.\n+\n+  // cpp17-iterator requirements:\n+  int&           operator*() const;\n+  bidi_iterator& operator++();\n+  bidi_iterator  operator++(int);\n+\n+  // cpp17-input-iterator requirements:\n+  friend bool operator==(const bidi_iterator&, const bidi_iterator&);\n+  using difference_type = long long;\n+  using value_type = int;\n+\n+  // cpp17-forward-iterator requirements:\n+  bidi_iterator();\n+\n+  // cpp17-bidirectional-iterator requirements:\n+  bidi_iterator& operator--();\n+  bidi_iterator operator--(int);\n+};\n+\n+void\n+test01()\n+{\n+  // PR libstdc++/97935\n+  // Missing subsumption in iterator category detection\n+  using namespace std;\n+  static_assert(__detail::__cpp17_bidi_iterator<bidi_iterator>);\n+  static_assert(same_as<iterator_traits<bidi_iterator>::iterator_category,\n+\t\t\tbidirectional_iterator_tag>,\n+\t\t\"PR libstdc++/97935\");\n+}"}]}