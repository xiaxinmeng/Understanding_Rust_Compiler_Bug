{"sha": "8838605016a588a58a3e17e79194a88ac686dde4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgzODYwNTAxNmE1ODhhNThhM2UxN2U3OTE5NGE4OGFjNjg2ZGRlNA==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2004-04-09T12:24:52Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2004-04-09T12:24:52Z"}, "message": "configure.in: Replace old AC_PROG_CC hack with new one.\n\n\t* configure.in: Replace old AC_PROG_CC hack with new one.\n\tDefine toplevel_srcdir in terms of srcdir, not top_srcdir (there\n\tare no subdirectory output files, so this is fine).  Change prereq\n\tto autoconf 2.59.\n\t* aclocal.m4: Include ../config/no-executables.m4.\n\t* configure: Regenerate with autoconf 2.59.\n\nFrom-SVN: r80549", "tree": {"sha": "cbf2decb66d792c18ebd79a4005c1d885b4aeaa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbf2decb66d792c18ebd79a4005c1d885b4aeaa5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8838605016a588a58a3e17e79194a88ac686dde4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8838605016a588a58a3e17e79194a88ac686dde4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8838605016a588a58a3e17e79194a88ac686dde4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8838605016a588a58a3e17e79194a88ac686dde4/comments", "author": null, "committer": null, "parents": [{"sha": "b43e7294ab697f3e0d198855b016792ee742ad27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b43e7294ab697f3e0d198855b016792ee742ad27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b43e7294ab697f3e0d198855b016792ee742ad27"}], "stats": {"total": 6550, "additions": 4739, "deletions": 1811}, "files": [{"sha": "7180413df869caeaa99a325d561b06de16ca3cc5", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8838605016a588a58a3e17e79194a88ac686dde4/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8838605016a588a58a3e17e79194a88ac686dde4/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=8838605016a588a58a3e17e79194a88ac686dde4", "patch": "@@ -1,5 +1,12 @@\n 2004-04-09  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n+\t* configure.in: Replace old AC_PROG_CC hack with new one.\n+\tDefine toplevel_srcdir in terms of srcdir, not top_srcdir (there\n+\tare no subdirectory output files, so this is fine).  Change prereq\n+\tto autoconf 2.59.\n+\t* aclocal.m4: Include ../config/no-executables.m4.\n+\t* configure: Regenerate with autoconf 2.59.\n+\n \t* configure.in: Improve comments on gthread_cflags.  Improve m4\n \tquotation, and replace 'if test' with 'case', for --enable-objc-gc.\n \t* configure: Regenerate."}, {"sha": "3a6788b09d77b7a28eb32376321540dd6f14ea88", "filename": "libobjc/aclocal.m4", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8838605016a588a58a3e17e79194a88ac686dde4/libobjc%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8838605016a588a58a3e17e79194a88ac686dde4/libobjc%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Faclocal.m4?ref=8838605016a588a58a3e17e79194a88ac686dde4", "patch": "@@ -10,6 +10,7 @@ dnl even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n dnl PARTICULAR PURPOSE.\n \n sinclude(../config/acx.m4)\n+sinclude(../config/no-executables.m4)\n \n sinclude(../libtool.m4)\n dnl The lines below arrange for aclocal not to bring an installed"}, {"sha": "39d14f050ca7d2693c3b299e87a9364d5ef979c1", "filename": "libobjc/configure", "status": "modified", "additions": 4727, "deletions": 1758, "changes": 6485, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8838605016a588a58a3e17e79194a88ac686dde4/libobjc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8838605016a588a58a3e17e79194a88ac686dde4/libobjc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fconfigure?ref=8838605016a588a58a3e17e79194a88ac686dde4"}, {"sha": "beb02293d9c419e7289e2651a5555e5fa0632910", "filename": "libobjc/configure.in", "status": "modified", "additions": 4, "deletions": 53, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8838605016a588a58a3e17e79194a88ac686dde4/libobjc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8838605016a588a58a3e17e79194a88ac686dde4/libobjc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fconfigure.in?ref=8838605016a588a58a3e17e79194a88ac686dde4", "patch": "@@ -20,7 +20,7 @@\n #the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #02111-1307, USA.\n \n-AC_PREREQ(2.13)\n+AC_PREREQ(2.59)\n AC_INIT(objc/objc.h)\n AC_CONFIG_HEADER(config.h)\n \n@@ -64,7 +64,7 @@ else\n   toprel=\"..\"\n fi\n AC_CONFIG_AUX_DIR(${srcdir}/$toprel)\n-toplevel_srcdir=\\${top_srcdir}/$toprel\n+toplevel_srcdir=\\${srcdir}/$toprel\n AC_SUBST(toplevel_srcdir)\n \n AC_CANONICAL_SYSTEM\n@@ -90,63 +90,14 @@ AC_ARG_WITH(target-subdir,\n AC_ARG_WITH(cross-host,\n [  --with-cross-host=HOST  configuring with a cross compiler])\n \n-  # Never versions of autoconf add an underscore to these functions.\n-  # Prevent future problems ...\n-  ifdef([AC_PROG_CC_G],[],[define([AC_PROG_CC_G],defn([_AC_PROG_CC_G]))])\n-  ifdef([AC_PROG_CC_GNU],[],[define([AC_PROG_CC_GNU],defn([_AC_PROG_CC_GNU]))])\n-  ifdef([AC_PROG_CXX_G],[],[define([AC_PROG_CXX_G],defn([_AC_PROG_CXX_G]))])\n-  ifdef([AC_PROG_CXX_GNU],[],[define([AC_PROG_CXX_GNU],defn([_AC_PROG_CXX_GNU]))])\n-\n-#  AC_PROG_CC\n-\n-# FIXME: We temporarily define our own version of AC_PROG_CC.  This is\n-# copied from autoconf 2.12, but does not call AC_PROG_CC_WORKS.  We\n-# are probably using a cross compiler, which will not be able to fully\n-# link an executable.  This should really be fixed in autoconf\n-# itself.\n-\n-AC_DEFUN(LIB_AC_PROG_CC,\n-[AC_BEFORE([$0], [AC_PROG_CPP])dnl\n-dnl Fool anybody using AC_PROG_CC.\n-AC_PROVIDE([AC_PROG_CC])\n-AC_CHECK_PROG(CC, gcc, gcc)\n-if test -z \"$CC\"; then\n-  AC_CHECK_PROG(CC, cc, cc, , , /usr/ucb/cc)\n-  test -z \"$CC\" && AC_MSG_ERROR([no acceptable cc found in \\$PATH])\n-fi\n-\n-AC_PROG_CC_GNU\n-\n-if test $ac_cv_prog_gcc = yes; then\n-  GCC=yes\n-dnl Check whether -g works, even if CFLAGS is set, in case the package\n-dnl plays around with CFLAGS (such as to build both debugging and\n-dnl normal versions of a library), tasteless as that idea is.\n-  ac_test_CFLAGS=\"${CFLAGS+set}\"\n-  ac_save_CFLAGS=\"$CFLAGS\"\n-  CFLAGS=\n-  AC_PROG_CC_G\n-  if test \"$ac_test_CFLAGS\" = set; then\n-    CFLAGS=\"$ac_save_CFLAGS\"\n-  elif test $ac_cv_prog_cc_g = yes; then\n-    CFLAGS=\"-g -O2\"\n-  else\n-    CFLAGS=\"-O2\"\n-  fi\n-else\n-  GCC=\n-  test \"${CFLAGS+set}\" = set || CFLAGS=\"-g\"\n-fi\n-])\n-\n-LIB_AC_PROG_CC\n+GCC_NO_EXECUTABLES\n+AC_PROG_CC\n \n AC_CHECK_TOOL(AS, as)\n AC_CHECK_TOOL(AR, ar)\n AC_CHECK_TOOL(RANLIB, ranlib, :)\n AC_PROG_INSTALL\n \n-\n # Process the option \"--enable-version-specific-runtime-libs\"\n AC_MSG_CHECKING([for --enable-version-specific-runtime-libs])\n AC_ARG_ENABLE(version-specific-runtime-libs,"}]}