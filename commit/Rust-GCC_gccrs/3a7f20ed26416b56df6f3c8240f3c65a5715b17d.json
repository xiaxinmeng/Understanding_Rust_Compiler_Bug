{"sha": "3a7f20ed26416b56df6f3c8240f3c65a5715b17d", "node_id": "C_kwDOANBUbNoAKDNhN2YyMGVkMjY0MTZiNTZkZjZmM2M4MjQwZjNjNjVhNTcxNWIxN2Q", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-09-30T13:05:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-01T06:26:26Z"}, "message": "middle-end/102518 - avoid invalid GIMPLE during inlining\n\nWhen inlining we have to avoid mapping a non-lvalue parameter\nvalue into a context that prevents the parameter to be a register.\nFormerly the register were TREE_ADDRESSABLE but now it can be\njust DECL_NOT_GIMPLE_REG_P.\n\n2021-09-30  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/102518\n\t* tree-inline.c (setup_one_parameter): Avoid substituting\n\tan invariant into contexts where a GIMPLE register is not valid.\n\n\t* gcc.dg/torture/pr102518.c: New testcase.", "tree": {"sha": "c714dba36ab60fe15d7b6c4dc04fd9df7bb2cfe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c714dba36ab60fe15d7b6c4dc04fd9df7bb2cfe3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a7f20ed26416b56df6f3c8240f3c65a5715b17d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a7f20ed26416b56df6f3c8240f3c65a5715b17d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a7f20ed26416b56df6f3c8240f3c65a5715b17d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a7f20ed26416b56df6f3c8240f3c65a5715b17d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea0b5b656a0e90bc9bb3ab0920796b24a9387d76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea0b5b656a0e90bc9bb3ab0920796b24a9387d76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea0b5b656a0e90bc9bb3ab0920796b24a9387d76"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "bd181ec9d99eaa2252109b5b407c6ce15309a651", "filename": "gcc/testsuite/gcc.dg/torture/pr102518.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a7f20ed26416b56df6f3c8240f3c65a5715b17d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr102518.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a7f20ed26416b56df6f3c8240f3c65a5715b17d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr102518.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr102518.c?ref=3a7f20ed26416b56df6f3c8240f3c65a5715b17d", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+\n+struct A {\n+  int *x;\n+};\n+int i;\n+int f(int *const c) {\n+  struct A * b = (struct A *)(&c);\n+  return b->x != 0;\n+}\n+void g() { f(&i); }\n+"}, {"sha": "e292a144967c0f74768a5716c509defceb8d5fd5", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a7f20ed26416b56df6f3c8240f3c65a5715b17d/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a7f20ed26416b56df6f3c8240f3c65a5715b17d/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=3a7f20ed26416b56df6f3c8240f3c65a5715b17d", "patch": "@@ -3490,7 +3490,11 @@ setup_one_parameter (copy_body_data *id, tree p, tree value, tree fn,\n       /* We may produce non-gimple trees by adding NOPs or introduce invalid\n \t sharing when the value is not constant or DECL.  And we need to make\n \t sure that it cannot be modified from another path in the callee.  */\n-      if ((is_gimple_min_invariant (value)\n+      if (((is_gimple_min_invariant (value)\n+\t    /* When the parameter is used in a context that forces it to\n+\t       not be a GIMPLE register avoid substituting something that\n+\t       is not a decl there.  */\n+\t    && ! DECL_NOT_GIMPLE_REG_P (p))\n \t   || (DECL_P (value) && TREE_READONLY (value))\n \t   || (auto_var_in_fn_p (value, id->dst_fn)\n \t       && !TREE_ADDRESSABLE (value)))"}]}