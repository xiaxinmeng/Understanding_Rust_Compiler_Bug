{"sha": "cc46ae8e686c69739474e868114ea5d5337a2271", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M0NmFlOGU2ODZjNjk3Mzk0NzRlODY4MTE0ZWE1ZDUzMzdhMjI3MQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-04-07T20:51:37Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-04-07T20:51:37Z"}, "message": "* pa.h (LEGITIMIZE_RELOAD_ADDRESS): Define.\n\nFrom-SVN: r19036", "tree": {"sha": "44df79c066e38be4ef97e5c2de952e4d1469a5d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44df79c066e38be4ef97e5c2de952e4d1469a5d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc46ae8e686c69739474e868114ea5d5337a2271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc46ae8e686c69739474e868114ea5d5337a2271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc46ae8e686c69739474e868114ea5d5337a2271", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc46ae8e686c69739474e868114ea5d5337a2271/comments", "author": null, "committer": null, "parents": [{"sha": "0b3d64d2d1d8f16c16f2ace025d12fa15e0ecdf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b3d64d2d1d8f16c16f2ace025d12fa15e0ecdf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b3d64d2d1d8f16c16f2ace025d12fa15e0ecdf1"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "f2d6bf8e6853ff830c73b8577b7308989866167b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc46ae8e686c69739474e868114ea5d5337a2271/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc46ae8e686c69739474e868114ea5d5337a2271/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc46ae8e686c69739474e868114ea5d5337a2271", "patch": "@@ -1,3 +1,7 @@\n+Tue Apr  7 21:48:52 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* pa.h (LEGITIMIZE_RELOAD_ADDRESS): Define.\n+\n 1998-04-07  Ken Raeburn  <raeburn@cygnus.com>\n \n \t* config/mips/mips.c (siginfo): Deleted."}, {"sha": "b944388d93a80cda4a690567befeb521d314b704", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc46ae8e686c69739474e868114ea5d5337a2271/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc46ae8e686c69739474e868114ea5d5337a2271/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=cc46ae8e686c69739474e868114ea5d5337a2271", "patch": "@@ -1615,6 +1615,64 @@ extern struct rtx_def *hppa_builtin_saveregs ();\n \t   && GET_CODE (XEXP (X, 1)) == UNSPEC)\t\t\\\n     goto ADDR;\t\t\t\t\t\t\\\n }\n+\n+/* Look for machine dependent ways to make the invalid address AD a\n+   valid address.\n+\n+   For the PA, transform:\n+\n+        memory(X + <large int>)\n+\n+   into:\n+\n+        if (<large int> & mask) >= 16\n+          Y = (<large int> & ~mask) + mask + 1  Round up.\n+        else\n+          Y = (<large int> & ~mask)             Round down.\n+        Z = X + Y\n+        memory (Z + (<large int> - Y));\n+\n+   This makes reload inheritance and reload_cse work better since Z\n+   can be reused.\n+\n+   There may be more opportunities to improve code with this hook.  */\n+#define LEGITIMIZE_RELOAD_ADDRESS(AD, MODE, OPNUM, TYPE, IND, WIN) \t\\\n+do { \t\t\t\t\t\t\t\t\t\\\n+  int offset, newoffset, mask;\t\t\t\t\t\t\\\n+  mask = GET_MODE_CLASS (MODE) == MODE_FLOAT ? 0x1f : 0x3fff;\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  if (GET_CODE (AD) == PLUS\t\t\t\t\t\t\\\n+      && GET_CODE (XEXP (AD, 0)) == REG\t\t\t\t\t\\\n+      && GET_CODE (XEXP (AD, 1)) == CONST_INT)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      offset = INTVAL (XEXP ((AD), 1));\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      /* Choose rounding direction.  Round up if we are >= halfway.  */\t\\\n+      if ((offset & mask) >= ((mask + 1) / 2))\t\t\t\t\\\n+\tnewoffset = (offset & ~mask) + mask + 1;\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\tnewoffset = offset & ~mask;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      if (newoffset != 0\t\t\t\t\t\t\\\n+\t  && VAL_14_BITS_P (newoffset))\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  rtx temp;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\t  /* Unshare the sum as well.  */\t\t\t\t\\\n+\t  AD = copy_rtx (AD);\t\t\t\t\t\t\\\n+\t  temp = gen_rtx_PLUS (Pmode, XEXP (AD, 0),\t\t\t\\\n+\t\t\t       GEN_INT (newoffset));\t\t\t\\\n+\t  AD = gen_rtx_PLUS (Pmode, temp, GEN_INT (offset - newoffset));\\\n+\t  push_reload (XEXP (AD, 0), 0, &XEXP (AD, 0), 0,\t\t\\\n+\t\t\t     BASE_REG_CLASS, Pmode, VOIDmode, 0, 0,\t\\\n+\t\t\t     (OPNUM), (TYPE));\t\t\t\t\\\n+\t  goto WIN;\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+} while (0)\n+\n+\n+\n \f\n /* Try machine-dependent ways of modifying an illegitimate address\n    to be legitimate.  If we find one, return the new, valid address."}]}