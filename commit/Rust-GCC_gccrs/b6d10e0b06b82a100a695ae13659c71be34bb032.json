{"sha": "b6d10e0b06b82a100a695ae13659c71be34bb032", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZkMTBlMGIwNmI4MmExMDBhNjk1YWUxMzY1OWM3MWJlMzRiYjAzMg==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2015-06-24T22:11:04Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2015-06-24T22:11:04Z"}, "message": "re PR target/66563 (ICE (segmentation fault) on sh4-linux-gnu)\n\nPR target/66563\n* [SH] Add a new operand to GOTaddr2picreg so to avoid CSE.  Modify caller\n  of gen_GOTaddr2picreg.\n\nFrom-SVN: r224925", "tree": {"sha": "8ad72ccdfce7af2a713a09e61a1c3d671ca63525", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ad72ccdfce7af2a713a09e61a1c3d671ca63525"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6d10e0b06b82a100a695ae13659c71be34bb032", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6d10e0b06b82a100a695ae13659c71be34bb032", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6d10e0b06b82a100a695ae13659c71be34bb032", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6d10e0b06b82a100a695ae13659c71be34bb032/comments", "author": null, "committer": null, "parents": [{"sha": "efa165cd8902733f96ed6816a48f8f6bced5ea7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efa165cd8902733f96ed6816a48f8f6bced5ea7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efa165cd8902733f96ed6816a48f8f6bced5ea7b"}], "stats": {"total": 48, "additions": 33, "deletions": 15}, "files": [{"sha": "550f7888b2ae0e66d3cf96be22370c14768b5b45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d10e0b06b82a100a695ae13659c71be34bb032/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d10e0b06b82a100a695ae13659c71be34bb032/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6d10e0b06b82a100a695ae13659c71be34bb032", "patch": "@@ -1,3 +1,14 @@\n+2015-06-24  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\tPR target/66563\n+\t* config/sh/sh.md (GOTaddr2picreg): Add a new operand for\n+\tan additional element of the unspec vector.  Modify indices\n+\tof operands.\n+\t(builtin_setjmp_receiver): Pass const0_rtx to gen_GOTaddr2picreg.\n+\t* config/sh/sh.c (prepare_move_operands): Pass incremented\n+\tconst_int to gen_GOTaddr2picreg.\n+\t(sh_expand_prologue): Pass const0_rtx to gen_GOTaddr2picreg.\n+\n 2015-06-24  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/aarch64/aarch64.md (<optab><fcvt_target><GPF:mode>2):"}, {"sha": "2c247b1af140429119bebce443ba29287a9c2a76", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d10e0b06b82a100a695ae13659c71be34bb032/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d10e0b06b82a100a695ae13659c71be34bb032/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=b6d10e0b06b82a100a695ae13659c71be34bb032", "patch": "@@ -1845,12 +1845,13 @@ prepare_move_operands (rtx operands[], machine_mode mode)\n \t\t  || tls_kind == TLS_MODEL_LOCAL_DYNAMIC\n \t\t  || tls_kind == TLS_MODEL_INITIAL_EXEC))\n \t    {\n+\t      static int got_labelno;\n \t      /* Don't schedule insns for getting GOT address when\n \t\t the first scheduling is enabled, to avoid spill\n \t\t failures for R0.  */\n \t      if (flag_schedule_insns)\n \t\temit_insn (gen_blockage ());\n-\t      emit_insn (gen_GOTaddr2picreg ());\n+\t      emit_insn (gen_GOTaddr2picreg (GEN_INT (++got_labelno)));\n \t      emit_use (gen_rtx_REG (SImode, PIC_REG));\n \t      if (flag_schedule_insns)\n \t\temit_insn (gen_blockage ());\n@@ -7958,7 +7959,7 @@ sh_expand_prologue (void)\n     }\n \n   if (flag_pic && df_regs_ever_live_p (PIC_OFFSET_TABLE_REGNUM))\n-    emit_insn (gen_GOTaddr2picreg ());\n+    emit_insn (gen_GOTaddr2picreg (const0_rtx));\n \n   if (SHMEDIA_REGS_STACK_ADJUST ())\n     {"}, {"sha": "43cd949d2d099c83057e76e6c23225c97aaab742", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d10e0b06b82a100a695ae13659c71be34bb032/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d10e0b06b82a100a695ae13659c71be34bb032/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=b6d10e0b06b82a100a695ae13659c71be34bb032", "patch": "@@ -10592,12 +10592,18 @@ label:\n   [(set_attr \"in_delay_slot\" \"no\")\n    (set_attr \"type\" \"arith\")])\n \n+;; Loads of the GOTPC relocation values must not be optimized away\n+;; by e.g. any kind of CSE and must stay as they are.  Although there\n+;; are other various ways to ensure this, we use an artificial counter\n+;; operand to generate unique symbols.\n (define_expand \"GOTaddr2picreg\"\n   [(set (reg:SI R0_REG)\n-\t(unspec:SI [(const:SI (unspec:SI [(match_dup 1)] UNSPEC_PIC))]\n-\t\t   UNSPEC_MOVA))\n-   (set (match_dup 0) (const:SI (unspec:SI [(match_dup 1)] UNSPEC_PIC)))\n-   (set (match_dup 0) (plus:SI (match_dup 0) (reg:SI R0_REG)))]\n+\t(unspec:SI [(const:SI (unspec:SI [(match_dup 2)\n+\t\t\t\t\t  (match_operand:SI 0 \"\" \"\")]\n+\t\t\t\t\t UNSPEC_PIC))] UNSPEC_MOVA))\n+   (set (match_dup 1)\n+\t(const:SI (unspec:SI [(match_dup 2) (match_dup 0)] UNSPEC_PIC)))\n+   (set (match_dup 1) (plus:SI (match_dup 1) (reg:SI R0_REG)))]\n   \"\"\n {\n   if (TARGET_VXWORKS_RTP)\n@@ -10608,8 +10614,8 @@ label:\n       DONE;\n     }\n \n-  operands[0] = gen_rtx_REG (Pmode, PIC_REG);\n-  operands[1] = gen_rtx_SYMBOL_REF (VOIDmode, GOT_SYMBOL_NAME);\n+  operands[1] = gen_rtx_REG (Pmode, PIC_REG);\n+  operands[2] = gen_rtx_SYMBOL_REF (VOIDmode, GOT_SYMBOL_NAME);\n \n   if (TARGET_SHMEDIA)\n     {\n@@ -10618,23 +10624,23 @@ label:\n       rtx lab = PATTERN (gen_call_site ());\n       rtx insn, equiv;\n \n-      equiv = operands[1];\n-      operands[1] = gen_rtx_UNSPEC (Pmode, gen_rtvec (2, operands[1], lab),\n+      equiv = operands[2];\n+      operands[2] = gen_rtx_UNSPEC (Pmode, gen_rtvec (2, operands[2], lab),\n \t\t\t\t    UNSPEC_PCREL_SYMOFF);\n-      operands[1] = gen_rtx_CONST (Pmode, operands[1]);\n+      operands[2] = gen_rtx_CONST (Pmode, operands[2]);\n \n       if (Pmode == SImode)\n \t{\n-\t  emit_insn (gen_movsi_const (pic, operands[1]));\n+\t  emit_insn (gen_movsi_const (pic, operands[2]));\n \t  emit_insn (gen_ptrel_si (tr, pic, copy_rtx (lab)));\n \t}\n       else\n \t{\n-\t  emit_insn (gen_movdi_const (pic, operands[1]));\n+\t  emit_insn (gen_movdi_const (pic, operands[2]));\n \t  emit_insn (gen_ptrel_di (tr, pic, copy_rtx (lab)));\n \t}\n \n-      insn = emit_move_insn (operands[0], tr);\n+      insn = emit_move_insn (operands[1], tr);\n \n       set_unique_reg_note (insn, REG_EQUAL, equiv);\n \n@@ -10688,7 +10694,7 @@ label:\n   [(match_operand 0 \"\" \"\")]\n   \"flag_pic\"\n {\n-  emit_insn (gen_GOTaddr2picreg ());\n+  emit_insn (gen_GOTaddr2picreg (const0_rtx));\n   DONE;\n })\n "}]}