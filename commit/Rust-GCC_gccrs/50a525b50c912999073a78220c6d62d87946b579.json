{"sha": "50a525b50c912999073a78220c6d62d87946b579", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBhNTI1YjUwYzkxMjk5OTA3M2E3ODIyMGM2ZDYyZDg3OTQ2YjU3OQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-03-26T16:08:34Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-03-26T16:08:34Z"}, "message": "aarch64: Use an aarch64-specific structure for vector costing\n\nThis patch makes the AArch64 vector code use its own vector\ncosts structure, rather than just using the default unsigned[3].\n\nUnfortunately, it's not easy to make this change specific to\nuse_new_vector_costs, so this part is one that affects all CPUs.\nThe change is relatively mechanical though.\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_vector_costs): New structure.\n\t(aarch64_init_cost): New function.\n\t(aarch64_add_stmt_cost): Use aarch64_vector_costs instead of\n\tthe default unsigned[3].\n\t(aarch64_finish_cost, aarch64_destroy_cost_data): New functions.\n\t(TARGET_VECTORIZE_INIT_COST): Override.\n\t(TARGET_VECTORIZE_FINISH_COST): Likewise.\n\t(TARGET_VECTORIZE_DESTROY_COST_DATA): Likewise.", "tree": {"sha": "da70151cbc3ee60d3f03784bdd16eace20626a9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da70151cbc3ee60d3f03784bdd16eace20626a9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50a525b50c912999073a78220c6d62d87946b579", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50a525b50c912999073a78220c6d62d87946b579", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50a525b50c912999073a78220c6d62d87946b579", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50a525b50c912999073a78220c6d62d87946b579/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14bd21c2c576d6f4b9bd403f543502cff40f54fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14bd21c2c576d6f4b9bd403f543502cff40f54fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14bd21c2c576d6f4b9bd403f543502cff40f54fc"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "81683b7faa7dd5e9bae53cabc17103baab0693ef", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a525b50c912999073a78220c6d62d87946b579/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a525b50c912999073a78220c6d62d87946b579/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=50a525b50c912999073a78220c6d62d87946b579", "patch": "@@ -14111,6 +14111,21 @@ aarch64_first_cycle_multipass_dfa_lookahead_guard (rtx_insn *insn,\n \n /* Vectorizer cost model target hooks.  */\n \n+/* Information about vector code that we're in the process of costing.  */\n+struct aarch64_vector_costs\n+{\n+  /* The normal latency-based costs for each region (prologue, body and\n+     epilogue), indexed by vect_cost_model_location.  */\n+  unsigned int region[3] = {};\n+};\n+\n+/* Implement TARGET_VECTORIZE_INIT_COST.  */\n+void *\n+aarch64_init_cost (class loop *)\n+{\n+  return new aarch64_vector_costs;\n+}\n+\n /* Return true if the current CPU should use the new costs defined\n    in GCC 11.  This should be removed for GCC 12 and above, with the\n    costs applying to all CPUs instead.  */\n@@ -14535,7 +14550,7 @@ aarch64_add_stmt_cost (class vec_info *vinfo, void *data, int count,\n \t\t       struct _stmt_vec_info *stmt_info, tree vectype,\n \t\t       int misalign, enum vect_cost_model_location where)\n {\n-  unsigned *cost = (unsigned *) data;\n+  auto *costs = static_cast<aarch64_vector_costs *> (data);\n   unsigned retval = 0;\n \n   if (flag_vect_cost_model)\n@@ -14569,12 +14584,30 @@ aarch64_add_stmt_cost (class vec_info *vinfo, void *data, int count,\n \tcount *= 50; /*  FIXME  */\n \n       retval = (unsigned) (count * stmt_cost);\n-      cost[where] += retval;\n+      costs->region[where] += retval;\n     }\n \n   return retval;\n }\n \n+/* Implement TARGET_VECTORIZE_FINISH_COST.  */\n+static void\n+aarch64_finish_cost (void *data, unsigned *prologue_cost,\n+\t\t     unsigned *body_cost, unsigned *epilogue_cost)\n+{\n+  auto *costs = static_cast<aarch64_vector_costs *> (data);\n+  *prologue_cost = costs->region[vect_prologue];\n+  *body_cost     = costs->region[vect_body];\n+  *epilogue_cost = costs->region[vect_epilogue];\n+}\n+\n+/* Implement TARGET_VECTORIZE_DESTROY_COST_DATA.  */\n+static void\n+aarch64_destroy_cost_data (void *data)\n+{\n+  delete static_cast<aarch64_vector_costs *> (data);\n+}\n+\n static void initialize_aarch64_code_model (struct gcc_options *);\n \n /* Parse the TO_PARSE string and put the architecture struct that it\n@@ -24713,9 +24746,18 @@ aarch64_libgcc_floating_mode_supported_p\n #undef TARGET_ARRAY_MODE_SUPPORTED_P\n #define TARGET_ARRAY_MODE_SUPPORTED_P aarch64_array_mode_supported_p\n \n+#undef TARGET_VECTORIZE_INIT_COST\n+#define TARGET_VECTORIZE_INIT_COST aarch64_init_cost\n+\n #undef TARGET_VECTORIZE_ADD_STMT_COST\n #define TARGET_VECTORIZE_ADD_STMT_COST aarch64_add_stmt_cost\n \n+#undef TARGET_VECTORIZE_FINISH_COST\n+#define TARGET_VECTORIZE_FINISH_COST aarch64_finish_cost\n+\n+#undef TARGET_VECTORIZE_DESTROY_COST_DATA\n+#define TARGET_VECTORIZE_DESTROY_COST_DATA aarch64_destroy_cost_data\n+\n #undef TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST\n #define TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST \\\n   aarch64_builtin_vectorization_cost"}]}