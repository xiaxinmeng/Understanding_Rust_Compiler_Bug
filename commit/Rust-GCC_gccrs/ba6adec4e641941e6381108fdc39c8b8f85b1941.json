{"sha": "ba6adec4e641941e6381108fdc39c8b8f85b1941", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE2YWRlYzRlNjQxOTQxZTYzODExMDhmZGMzOWM4YjhmODViMTk0MQ==", "commit": {"author": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2009-04-30T22:42:58Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2009-04-30T22:42:58Z"}, "message": "mips.h (FRAME_GROWS_DOWNWARD, [...]): Define new macros.\n\n\t* config/mips/mips.h (FRAME_GROWS_DOWNWARD,\n\tMIPS_GP_SAVE_AREA_SIZE): Define new macros.\n\t(STARTING_FRAME_OFFSET): Return 0 if FRAME_GROWS_DOWNWARD.  Use\n\tMIPS_GP_SAVE_AREA_SIZE.\n\t* config/mips/mips.c (struct mips_frame_info): Update comment\n\tbefore arg_pointer_offset and hard_frame_pointer_offset.\n\t(mips_compute_frame_info): Update diagram before function: to\n\tcorrectly use stack_pointer_rtx for fp_sp_offset and gp_sp_offset, to\n\tindicate the position of frame_pointer_rtx with -fstack-protector and\n\tto show args_size.  Don't allocate cprestore area for leaf functions\n\tif FRAME_GROWS_DOWNWARD.  Use MIPS_GP_SAVE_AREA_SIZE to set\n\tcprestore_size.\n\t(mips_initial_elimination_offset): Update for FRAME_GROWS_DOWNWARD.\n\nFrom-SVN: r147024", "tree": {"sha": "a2fbab0c0d8cccb4ef750f9172ebccc21227f0f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2fbab0c0d8cccb4ef750f9172ebccc21227f0f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba6adec4e641941e6381108fdc39c8b8f85b1941", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba6adec4e641941e6381108fdc39c8b8f85b1941", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba6adec4e641941e6381108fdc39c8b8f85b1941", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba6adec4e641941e6381108fdc39c8b8f85b1941/comments", "author": null, "committer": null, "parents": [{"sha": "794f21f97ed798b58ba05b19d37f4520080c2203", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/794f21f97ed798b58ba05b19d37f4520080c2203", "html_url": "https://github.com/Rust-GCC/gccrs/commit/794f21f97ed798b58ba05b19d37f4520080c2203"}], "stats": {"total": 91, "additions": 60, "deletions": 31}, "files": [{"sha": "cff75d260b5177a750fdb948975697c3a1ddb8b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6adec4e641941e6381108fdc39c8b8f85b1941/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6adec4e641941e6381108fdc39c8b8f85b1941/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba6adec4e641941e6381108fdc39c8b8f85b1941", "patch": "@@ -1,7 +1,23 @@\n+2009-04-30  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* config/mips/mips.h (FRAME_GROWS_DOWNWARD,\n+\tMIPS_GP_SAVE_AREA_SIZE): Define new macros.\n+\t(STARTING_FRAME_OFFSET): Return 0 if FRAME_GROWS_DOWNWARD.  Use\n+\tMIPS_GP_SAVE_AREA_SIZE.\n+\t* config/mips/mips.c (struct mips_frame_info): Update comment\n+\tbefore arg_pointer_offset and hard_frame_pointer_offset.\n+\t(mips_compute_frame_info): Update diagram before function: to\n+\tcorrectly use stack_pointer_rtx for fp_sp_offset and gp_sp_offset, to\n+\tindicate the position of frame_pointer_rtx with -fstack-protector and\n+\tto show args_size.  Don't allocate cprestore area for leaf functions\n+\tif FRAME_GROWS_DOWNWARD.  Use MIPS_GP_SAVE_AREA_SIZE to set\n+\tcprestore_size.\n+\t(mips_initial_elimination_offset): Update for FRAME_GROWS_DOWNWARD.\n+\n 2009-04-30  Michael Matz  <matz@suse.de>\n \n-        PR tree-optimization/39955\n-        * config/rs6000/rs6000.c (rs6000_check_sdmode): Also check SSA_NAMEs.\n+\tPR tree-optimization/39955\n+\t* config/rs6000/rs6000.c (rs6000_check_sdmode): Also check SSA_NAMEs.\n \n 2009-04-30  Dave Korn  <dave.korn.cygwin@gmail.com>\n "}, {"sha": "e03e6adb3042ff8eca9794128bee0560a3994443", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6adec4e641941e6381108fdc39c8b8f85b1941/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6adec4e641941e6381108fdc39c8b8f85b1941/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=ba6adec4e641941e6381108fdc39c8b8f85b1941", "patch": "@@ -285,10 +285,10 @@ struct GTY(())  mips_frame_info {\n   HOST_WIDE_INT acc_sp_offset;\n   HOST_WIDE_INT cop0_sp_offset;\n \n-  /* The offset of arg_pointer_rtx from frame_pointer_rtx.  */\n+  /* The offset of arg_pointer_rtx from the bottom of the frame.  */\n   HOST_WIDE_INT arg_pointer_offset;\n \n-  /* The offset of hard_frame_pointer_rtx from frame_pointer_rtx.  */\n+  /* The offset of hard_frame_pointer_rtx from the bottom of the frame.  */\n   HOST_WIDE_INT hard_frame_pointer_offset;\n };\n \n@@ -8673,33 +8673,34 @@ mips_save_reg_p (unsigned int regno)\n \t|                               |       + UNITS_PER_WORD\n \t|  accumulator save area        |\n \t|                               |\n-\t+-------------------------------+ <-- frame_pointer_rtx + fp_sp_offset\n+\t+-------------------------------+ <-- stack_pointer_rtx + fp_sp_offset\n \t|                               |       + UNITS_PER_HWFPVALUE\n \t|  FPR save area                |\n \t|                               |\n-\t+-------------------------------+ <-- frame_pointer_rtx + gp_sp_offset\n+\t+-------------------------------+ <-- stack_pointer_rtx + gp_sp_offset\n \t|                               |       + UNITS_PER_WORD\n \t|  GPR save area                |\n \t|                               |\n-\t+-------------------------------+\n-\t|                               | \\\n+\t+-------------------------------+ <-- frame_pointer_rtx with\n+\t|                               | \\     -fstack-protector\n \t|  local variables              |  | var_size\n \t|                               | /\n \t+-------------------------------+\n \t|                               | \\\n \t|  $gp save area                |  | cprestore_size\n \t|                               | /\n       P +-------------------------------+ <-- hard_frame_pointer_rtx for\n-\t|                               |       MIPS16 code\n-\t|  outgoing stack arguments     |\n-\t|                               |\n-\t+-------------------------------+\n-\t|                               |\n-\t|  caller-allocated save area   |\n-\t|  for register arguments       |\n-\t|                               |\n+\t|                               | \\     MIPS16 code\n+\t|  outgoing stack arguments     |  |\n+\t|                               |  |\n+\t+-------------------------------+  | args_size\n+\t|                               |  |\n+\t|  caller-allocated save area   |  |\n+\t|  for register arguments       |  |\n+\t|                               | /\n \t+-------------------------------+ <-- stack_pointer_rtx\n-\t\t\t\t\t      frame_pointer_rtx\n+\t\t\t\t\t      frame_pointer_rtx without\n+\t\t\t\t\t        -fstack-protector\n \t\t\t\t\t      hard_frame_pointer_rtx for\n \t\t\t\t\t\tnon-MIPS16 code.\n \n@@ -8744,11 +8745,11 @@ mips_compute_frame_info (void)\n \n   cfun->machine->global_pointer = mips_global_pointer ();\n \n-  /* The first STARTING_FRAME_OFFSET bytes contain the outgoing argument\n-     area and the $gp save slot.  This area isn't needed in leaf functions,\n-     but if the target-independent frame size is nonzero, we're committed\n-     to allocating it anyway.  */\n-  if (size == 0 && current_function_is_leaf)\n+  /* The first two blocks contain the outgoing argument area and the $gp save\n+     slot.  This area isn't needed in leaf functions, but if the\n+     target-independent frame size is nonzero, we have already committed to\n+     allocating these in STARTING_FRAME_OFFSET for !FRAME_GROWS_DOWNWARD.  */\n+  if ((size == 0 || FRAME_GROWS_DOWNWARD) && current_function_is_leaf)\n     {\n       /* The MIPS 3.0 linker does not like functions that dynamically\n \t allocate the stack and have 0 for STACK_DYNAMIC_OFFSET, since it\n@@ -8763,7 +8764,7 @@ mips_compute_frame_info (void)\n   else\n     {\n       frame->args_size = crtl->outgoing_args_size;\n-      frame->cprestore_size = STARTING_FRAME_OFFSET - frame->args_size;\n+      frame->cprestore_size = MIPS_GP_SAVE_AREA_SIZE;\n     }\n   offset = frame->args_size + frame->cprestore_size;\n \n@@ -8942,12 +8943,16 @@ mips_initial_elimination_offset (int from, int to)\n \n   mips_compute_frame_info ();\n \n-  /* Set OFFSET to the offset from the soft frame pointer, which is also\n-     the offset from the end-of-prologue stack pointer.  */\n+  /* Set OFFSET to the offset from the end-of-prologue stack pointer.  */\n   switch (from)\n     {\n     case FRAME_POINTER_REGNUM:\n-      offset = 0;\n+      if (FRAME_GROWS_DOWNWARD)\n+\toffset = (cfun->machine->frame.args_size\n+\t\t  + cfun->machine->frame.cprestore_size\n+\t\t  + cfun->machine->frame.var_size);\n+      else\n+\toffset = 0;\n       break;\n \n     case ARG_POINTER_REGNUM:"}, {"sha": "e14073ab2be78df03adaf3f388fa07a2f273445a", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6adec4e641941e6381108fdc39c8b8f85b1941/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6adec4e641941e6381108fdc39c8b8f85b1941/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=ba6adec4e641941e6381108fdc39c8b8f85b1941", "patch": "@@ -2081,12 +2081,20 @@ enum reg_class\n \n #define STACK_GROWS_DOWNWARD\n \n-/* The offset of the first local variable from the beginning of the frame.\n-   See mips_compute_frame_info for details about the frame layout.  */\n+#define FRAME_GROWS_DOWNWARD flag_stack_protect\n \n-#define STARTING_FRAME_OFFSET\t\t\t\t\t\t\\\n-  (crtl->outgoing_args_size\t\t\t\t\t\\\n-   + (TARGET_CALL_CLOBBERED_GP ? MIPS_STACK_ALIGN (UNITS_PER_WORD) : 0))\n+/* Size of the area allocated in the frame to save the GP.  */\n+\n+#define MIPS_GP_SAVE_AREA_SIZE \\\n+  (TARGET_CALL_CLOBBERED_GP ? MIPS_STACK_ALIGN (UNITS_PER_WORD) : 0)\n+\n+/* The offset of the first local variable from the frame pointer.  See\n+   mips_compute_frame_info for details about the frame layout.  */\n+\n+#define STARTING_FRAME_OFFSET\t\t\t\t\\\n+  (FRAME_GROWS_DOWNWARD\t\t\t\t\t\\\n+   ? 0\t\t\t\t\t\t\t\\\n+   : crtl->outgoing_args_size + MIPS_GP_SAVE_AREA_SIZE)\n \n #define RETURN_ADDR_RTX mips_return_addr\n "}]}