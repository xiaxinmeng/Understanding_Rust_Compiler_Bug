{"sha": "ae9bd4817709200fb28acc6812def80de28f5a2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU5YmQ0ODE3NzA5MjAwZmIyOGFjYzY4MTJkZWY4MGRlMjhmNWEyYQ==", "commit": {"author": {"name": "Stephane Carrez", "email": "stcarrez@nerim.fr", "date": "2002-06-28T21:16:58Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2002-06-28T21:16:58Z"}, "message": "m68hc11.md (\"*addsi3\"): Use 'o' constraint to avoid the auto increment addressing modes.\n\n\t* config/m68hc11/m68hc11.md (\"*addsi3\"): Use 'o' constraint to\n\tavoid the auto increment addressing modes.\n\t(\"*subsi3\"): Likewise.\n\t(split for add/sub on address): For 68HC12 push the value on\n\tthe stack and do the operation with a pop.\n\nFrom-SVN: r55083", "tree": {"sha": "0e12e414ea04f37ee073eb449142ab8e89e77c4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e12e414ea04f37ee073eb449142ab8e89e77c4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae9bd4817709200fb28acc6812def80de28f5a2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae9bd4817709200fb28acc6812def80de28f5a2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae9bd4817709200fb28acc6812def80de28f5a2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae9bd4817709200fb28acc6812def80de28f5a2a/comments", "author": null, "committer": null, "parents": [{"sha": "2fe938856a5d2213f00b1458899ac75f1b3f737f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe938856a5d2213f00b1458899ac75f1b3f737f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fe938856a5d2213f00b1458899ac75f1b3f737f"}], "stats": {"total": 63, "additions": 54, "deletions": 9}, "files": [{"sha": "033fc4baea3ebe6b557532b3562836eb2af8ef08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae9bd4817709200fb28acc6812def80de28f5a2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae9bd4817709200fb28acc6812def80de28f5a2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae9bd4817709200fb28acc6812def80de28f5a2a", "patch": "@@ -1,3 +1,11 @@\n+2002-06-28  Stephane Carrez  <stcarrez@nerim.fr>\n+\n+\t* config/m68hc11/m68hc11.md (\"*addsi3\"): Use 'o' constraint to\n+\tavoid the auto increment addressing modes.\n+\t(\"*subsi3\"): Likewise.\n+\t(split for add/sub on address): For 68HC12 push the value on \n+\tthe stack and do the operation with a pop.\n+\n 2002-06-28  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* cpplib.c (_cpp_handle_directive): Move #define-specific"}, {"sha": "ce32b53a50a6f76aaec0a98446205677d0003a04", "filename": "gcc/config/m68hc11/m68hc11.md", "status": "modified", "additions": 46, "deletions": 9, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae9bd4817709200fb28acc6812def80de28f5a2a/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae9bd4817709200fb28acc6812def80de28f5a2a/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md?ref=ae9bd4817709200fb28acc6812def80de28f5a2a", "patch": "@@ -1,6 +1,6 @@\n ;;- Machine description file for Motorola 68HC11 and 68HC12.\n ;;- Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n-;;- Contributed by Stephane Carrez (stcarrez@worldnet.fr)\n+;;- Contributed by Stephane Carrez (stcarrez@nerim.fr)\n \n ;; This file is part of GNU CC.\n \n@@ -1900,9 +1900,9 @@\n }\")\n \n (define_insn \"*addsi3\"\n-  [(set (match_operand:SI 0 \"non_push_operand\" \"=m,D,!u,?D,D\")\n+  [(set (match_operand:SI 0 \"non_push_operand\" \"=o,D,!u,?D,D\")\n \t(plus:SI (match_operand:SI 1 \"non_push_operand\" \"%0,0,0,0,0\")\n-\t\t (match_operand:SI 2 \"general_operand\" \"ML,i,ML,?D,?miu\")))\n+\t\t (match_operand:SI 2 \"general_operand\" \"ML,i,ML,?D,?oiu\")))\n    (clobber (match_scratch:HI 3 \"=d,X,d,X,X\"))]\n   \"\"\n   \"*\n@@ -2500,8 +2500,8 @@\n \n (define_insn \"*subsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=D,D,D,D,!u\")\n-\t(minus:SI (match_operand:SI 1 \"general_operand\" \"0,mi,0,!u,0\")\n-\t\t  (match_operand:SI 2 \"general_operand\" \"mi,D,!u,D,!mui\")))\n+\t(minus:SI (match_operand:SI 1 \"general_operand\" \"0,oi,0,!u,0\")\n+\t\t  (match_operand:SI 2 \"general_operand\" \"oi,D,!u,D,!oui\")))\n    (clobber (match_scratch:HI 3 \"=X,X,X,X,d\"))]\n   \"\"\n   \"#\")\n@@ -3932,19 +3932,55 @@\n             || (GET_CODE (operands[2]) == CONST_INT\n \t        && INTVAL (operands[2]) >= -4\n \t        && INTVAL (operands[2]) <= 4)))\"\n-  [(set (match_dup 4) (match_dup 5))\n+  [(set (match_dup 9) (match_dup 0))\n+   (set (match_dup 4) (match_dup 5))\n    (set (match_dup 8) (match_dup 7))\n+   (set (match_dup 0) (match_dup 1))\n    (parallel [(set (reg:HI D_REGNUM) (match_dup 0))\n               (set (match_dup 0) (reg:HI D_REGNUM))])\n    (set (reg:HI D_REGNUM) (match_op_dup 3 [(reg:HI D_REGNUM) (match_dup 6)]))\n    (parallel [(set (reg:HI D_REGNUM) (match_dup 0))\n               (set (match_dup 0) (reg:HI D_REGNUM))])]\n   \"\n+   operands[9] = operands[0];\n+   /* For 68HC12, push the value on the stack and do the operation\n+      with a pop.  */\n+   if (TARGET_M6812\n+       && m68hc11_non_shift_operator (operands[3], HImode)\n+       && (H_REG_P (operands[2])\n+\t   || (m68hc11_small_indexed_indirect_p (operands[2], HImode)\n+\t       && reg_mentioned_p (operands[0], operands[2]))))\n+     {\n+       operands[4] = gen_rtx (MEM, HImode,\n+\t\t\t      gen_rtx (PRE_DEC, HImode,\n+\t\t\t\t       gen_rtx (REG, HImode, HARD_SP_REGNUM)));\n+       operands[6] = gen_rtx (MEM, HImode,\n+\t\t\t      gen_rtx (POST_INC, HImode,\n+\t\t\t\t       gen_rtx (REG, HImode, HARD_SP_REGNUM)));\n+       operands[5] = operands[2];\n+       operands[8] = operands[7] = operands[0];\n+     }\n    /* Save the operand2 in a temporary location and use it.  */\n-   if ((H_REG_P (operands[2])\n-        || reg_mentioned_p  (operands[0], operands[2]))\n-       && !(SP_REG_P (operands[2]) && GET_CODE (operands[3]) == PLUS))\n+   else if ((H_REG_P (operands[2])\n+             || reg_mentioned_p  (operands[0], operands[2]))\n+            && !(SP_REG_P (operands[2]) && GET_CODE (operands[3]) == PLUS))\n      {\n+       if (GET_CODE (operands[3]) == MINUS\n+\t   && reg_mentioned_p (operands[0], operands[2]))\n+\t {\n+\t   operands[9] = gen_rtx (MEM, HImode,\n+\t\t\t      gen_rtx (PRE_DEC, HImode,\n+\t\t\t\t       gen_rtx (REG, HImode, HARD_SP_REGNUM)));\n+\t   operands[1] = gen_rtx (MEM, HImode,\n+\t\t\t      gen_rtx (POST_INC, HImode,\n+\t\t\t\t       gen_rtx (REG, HImode, HARD_SP_REGNUM)));\n+\t   operands[8] = gen_rtx (REG, HImode, SOFT_TMP_REGNUM);\n+\t   operands[4] = operands[7] = operands[0];\n+\t   operands[6] = operands[8];\n+\t   operands[5] = operands[2];\n+\t }\n+       else \n+\t {\n        operands[4] = gen_rtx (REG, HImode, SOFT_TMP_REGNUM);\n        operands[6] = operands[4];\n        if (!H_REG_P (operands[2]))\n@@ -3958,6 +3994,7 @@\n            operands[5] = operands[2];\n \t   operands[8] = operands[7] = operands[0];\n \t }\n+\t }\n      }\n    else\n      {"}]}