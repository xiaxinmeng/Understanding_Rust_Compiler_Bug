{"sha": "429baef53a9d160e88ce202a09c8d735524893b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI5YmFlZjUzYTlkMTYwZTg4Y2UyMDJhMDljOGQ3MzU1MjQ4OTNiNA==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1997-07-28T17:42:09Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1997-07-28T17:42:09Z"}, "message": "x\n\nFrom-SVN: r14542", "tree": {"sha": "4ad98076fbd37dc982a542309fc2b8a53b0240ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ad98076fbd37dc982a542309fc2b8a53b0240ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/429baef53a9d160e88ce202a09c8d735524893b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/429baef53a9d160e88ce202a09c8d735524893b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/429baef53a9d160e88ce202a09c8d735524893b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/429baef53a9d160e88ce202a09c8d735524893b4/comments", "author": null, "committer": null, "parents": [{"sha": "f0eebf28c40eb05fade71ddf798b25ef8754099a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0eebf28c40eb05fade71ddf798b25ef8754099a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0eebf28c40eb05fade71ddf798b25ef8754099a"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "7c4b4f69c7ce93cbd57f474248e54db67c014442", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/429baef53a9d160e88ce202a09c8d735524893b4/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/429baef53a9d160e88ce202a09c8d735524893b4/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=429baef53a9d160e88ce202a09c8d735524893b4", "patch": "@@ -835,6 +835,8 @@ layout_type (type)\n       if (TREE_CODE (TYPE_SIZE (type)) == INTEGER_CST)\n \t{\n \t  tree field;\n+\t  enum machine_mode mode = VOIDmode;\n+\n \t  /* A record which has any BLKmode members must itself be BLKmode;\n \t     it can't go in a register.\n \t     Unless the member is BLKmode only because it isn't aligned.  */\n@@ -860,13 +862,23 @@ layout_type (type)\n \t\t  != ((TREE_INT_CST_LOW (DECL_SIZE (field)) + bitpos - 1)\n \t\t      / BITS_PER_WORD)\n \t\t  /* But there is no problem if the field is entire words.  */\n-\t\t  && TREE_INT_CST_LOW (DECL_SIZE (field)) % BITS_PER_WORD == 0)\n+\t\t  && TREE_INT_CST_LOW (DECL_SIZE (field)) % BITS_PER_WORD != 0)\n \t\tgoto record_lose;\n+\n+\t      /* If this field is the whole struct, remember its mode so\n+\t\t that, say, we can put a double in a class into a DF\n+\t\t register instead of forcing it to live in the stack.  */\n+\t      if (simple_cst_equal (TYPE_SIZE (type), DECL_SIZE (field)))\n+\t\tmode = DECL_MODE (field);\n \t    }\n \n-\t  TYPE_MODE (type)\n-\t    = mode_for_size (TREE_INT_CST_LOW (TYPE_SIZE (type)),\n-\t\t\t     MODE_INT, 1);\n+\t  if (mode != VOIDmode)\n+\t    /* We only have one real field; use its mode.  */\n+\t    TYPE_MODE (type) = mode;\n+\t  else\n+\t    TYPE_MODE (type)\n+\t      = mode_for_size (TREE_INT_CST_LOW (TYPE_SIZE (type)),\n+\t\t\t       MODE_INT, 1);\n \n \t  /* If structure's known alignment is less than\n \t     what the scalar mode would need, and it matters,"}]}