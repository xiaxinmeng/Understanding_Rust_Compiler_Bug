{"sha": "27e58a706fa38f55d87610ed6424523c0ea50bd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdlNThhNzA2ZmEzOGY1NWQ4NzYxMGVkNjQyNDUyM2MwZWE1MGJkNA==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2002-11-20T21:52:59Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2002-11-20T21:52:59Z"}, "message": "emit-rtl.c (gen_reg_rtx): Simplify mapping of Complex type to component type using GET_MODE_INNER.\n\n\t* emit-rtl.c (gen_reg_rtx): Simplify mapping of Complex type\n\tto component type using GET_MODE_INNER.\n\t* expr.c (emit_move_insn_1): Ditto.\n\t* optabs.c (expand_binop): Ditto.\n\t(expand_unop): Ditto.\n\t(expand_complex_abs): Ditto.\n\nFrom-SVN: r59317", "tree": {"sha": "8b9fd59b5bdc34852b403b5487274127ef1bd390", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b9fd59b5bdc34852b403b5487274127ef1bd390"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27e58a706fa38f55d87610ed6424523c0ea50bd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27e58a706fa38f55d87610ed6424523c0ea50bd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27e58a706fa38f55d87610ed6424523c0ea50bd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27e58a706fa38f55d87610ed6424523c0ea50bd4/comments", "author": null, "committer": null, "parents": [{"sha": "964b104aba78fdc347d4b9550707653076820b62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/964b104aba78fdc347d4b9550707653076820b62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/964b104aba78fdc347d4b9550707653076820b62"}], "stats": {"total": 37, "additions": 14, "deletions": 23}, "files": [{"sha": "9dad96190236cc6f32c85391a436dc572843cf0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27e58a706fa38f55d87610ed6424523c0ea50bd4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27e58a706fa38f55d87610ed6424523c0ea50bd4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27e58a706fa38f55d87610ed6424523c0ea50bd4", "patch": "@@ -1,3 +1,12 @@\n+2002-11-20  Steve Ellcey  <sje@cup.hp.com>\n+\n+\t* emit-rtl.c (gen_reg_rtx): Simplify mapping of Complex type\n+\tto component type using GET_MODE_INNER.\n+\t* expr.c (emit_move_insn_1): Ditto.\n+\t* optabs.c (expand_binop): Ditto.\n+\t(expand_unop): Ditto.\n+\t(expand_complex_abs): Ditto.\n+\n 2002-11-20  Douglas B Rupp  <rupp@gnat.com>\n \n \t* hwint.h (HAVE___INT64): Fix typo (was HAVE__INT64)."}, {"sha": "0d9be17fe94f6ff5f8cbaf96c70b2c5ca0f8b839", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27e58a706fa38f55d87610ed6424523c0ea50bd4/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27e58a706fa38f55d87610ed6424523c0ea50bd4/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=27e58a706fa38f55d87610ed6424523c0ea50bd4", "patch": "@@ -802,12 +802,7 @@ gen_reg_rtx (mode)\n \t which makes much better code.  Besides, allocating DCmode\n \t pseudos overstrains reload on some machines like the 386.  */\n       rtx realpart, imagpart;\n-      int size = GET_MODE_UNIT_SIZE (mode);\n-      enum machine_mode partmode\n-\t= mode_for_size (size * BITS_PER_UNIT,\n-\t\t\t (GET_MODE_CLASS (mode) == MODE_COMPLEX_FLOAT\n-\t\t\t  ? MODE_FLOAT : MODE_INT),\n-\t\t\t 0);\n+      enum machine_mode partmode = GET_MODE_INNER (mode);\n \n       realpart = gen_reg_rtx (partmode);\n       imagpart = gen_reg_rtx (partmode);"}, {"sha": "8dd9a8678b5b39e018b044f8eba75a3a2a0b9d42", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27e58a706fa38f55d87610ed6424523c0ea50bd4/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27e58a706fa38f55d87610ed6424523c0ea50bd4/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=27e58a706fa38f55d87610ed6424523c0ea50bd4", "patch": "@@ -3152,11 +3152,7 @@ emit_move_insn_1 (x, y)\n \n   /* Expand complex moves by moving real part and imag part, if possible.  */\n   else if ((class == MODE_COMPLEX_FLOAT || class == MODE_COMPLEX_INT)\n-\t   && BLKmode != (submode = mode_for_size ((GET_MODE_UNIT_SIZE (mode)\n-\t\t\t\t\t\t    * BITS_PER_UNIT),\n-\t\t\t\t\t\t   (class == MODE_COMPLEX_INT\n-\t\t\t\t\t\t    ? MODE_INT : MODE_FLOAT),\n-\t\t\t\t\t\t   0))\n+\t   && BLKmode != (submode = GET_MODE_INNER (mode))\n \t   && (mov_optab->handlers[(int) submode].insn_code\n \t       != CODE_FOR_nothing))\n     {"}, {"sha": "9da95e1de72116343c1a5be33a9bcf6740039726", "filename": "gcc/optabs.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27e58a706fa38f55d87610ed6424523c0ea50bd4/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27e58a706fa38f55d87610ed6424523c0ea50bd4/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=27e58a706fa38f55d87610ed6424523c0ea50bd4", "patch": "@@ -1531,10 +1531,7 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n       int ok = 0;\n \n       /* Find the correct mode for the real and imaginary parts */\n-      enum machine_mode submode\n-\t= mode_for_size (GET_MODE_UNIT_SIZE (mode) * BITS_PER_UNIT,\n-\t\t\t class == MODE_COMPLEX_INT ? MODE_INT : MODE_FLOAT,\n-\t\t\t 0);\n+      enum machine_mode submode = GET_MODE_INNER(mode);\n \n       if (submode == BLKmode)\n \tabort ();\n@@ -2484,10 +2481,7 @@ expand_unop (mode, unoptab, op0, target, unsignedp)\n       rtx seq;\n \n       /* Find the correct mode for the real and imaginary parts */\n-      enum machine_mode submode\n-\t= mode_for_size (GET_MODE_UNIT_SIZE (mode) * BITS_PER_UNIT,\n-\t\t\t class == MODE_COMPLEX_INT ? MODE_INT : MODE_FLOAT,\n-\t\t\t 0);\n+      enum machine_mode submode = GET_MODE_INNER (mode);\n \n       if (submode == BLKmode)\n \tabort ();\n@@ -2731,10 +2725,7 @@ expand_complex_abs (mode, op0, target, unsignedp)\n   optab this_abs_optab;\n \n   /* Find the correct mode for the real and imaginary parts.  */\n-  enum machine_mode submode\n-    = mode_for_size (GET_MODE_UNIT_SIZE (mode) * BITS_PER_UNIT,\n-\t\t     class == MODE_COMPLEX_INT ? MODE_INT : MODE_FLOAT,\n-\t\t     0);\n+  enum machine_mode submode = GET_MODE_INNER (mode);\n \n   if (submode == BLKmode)\n     abort ();"}]}