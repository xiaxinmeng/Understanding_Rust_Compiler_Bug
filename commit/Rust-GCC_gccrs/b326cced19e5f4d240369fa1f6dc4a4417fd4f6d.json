{"sha": "b326cced19e5f4d240369fa1f6dc4a4417fd4f6d", "node_id": "C_kwDOANBUbNoAKGIzMjZjY2VkMTllNWY0ZDI0MDM2OWZhMWY2ZGM0YTQ0MTdmZDRmNmQ", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-10-19T12:53:43Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-02-21T11:36:37Z"}, "message": "gccrs: ast: Improve Fragment API\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast-fragment.cc (Fragment::Fragment): Add better APIs.\n\t(Fragment::complete): New function.\n\t(Fragment::unexpanded): New function.\n\t* ast/rust-ast-fragment.h: Declare new APIs and add documentation.\n\t* expand/rust-attribute-visitor.h: Use new Fragment API.\n\t* expand/rust-macro-builtins.cc (MacroBuiltin::file): Likewise.\n\t(MacroBuiltin::column): Likewise.\n\t(MacroBuiltin::include_bytes): Likewise.\n\t(MacroBuiltin::include_str): Likewise.\n\t(MacroBuiltin::concat): Likewise.\n\t(MacroBuiltin::env): Likewise.\n\t(MacroBuiltin::cfg): Likewise.\n\t(MacroBuiltin::include): Likewise.\n\t(MacroBuiltin::line): Likewise.\n\t* expand/rust-macro-expand.cc (parse_many): Likewise.\n\t(transcribe_expression): Likewise.\n\t(transcribe_type): Likewise.\n\t* expand/rust-macro-expand.h (struct MacroExpander): Likewise.", "tree": {"sha": "42ce041702158c062150bb7cac671b5efb1daa17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42ce041702158c062150bb7cac671b5efb1daa17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b326cced19e5f4d240369fa1f6dc4a4417fd4f6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b326cced19e5f4d240369fa1f6dc4a4417fd4f6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b326cced19e5f4d240369fa1f6dc4a4417fd4f6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b326cced19e5f4d240369fa1f6dc4a4417fd4f6d/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68e743090df65d936305620bacfa1e766011d027", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e743090df65d936305620bacfa1e766011d027", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68e743090df65d936305620bacfa1e766011d027"}], "stats": {"total": 77, "additions": 47, "deletions": 30}, "files": [{"sha": "c4916093fc6a7dfc4f1475750a9567e339548f90", "filename": "gcc/rust/ast/rust-ast-fragment.cc", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b326cced19e5f4d240369fa1f6dc4a4417fd4f6d/gcc%2Frust%2Fast%2Frust-ast-fragment.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b326cced19e5f4d240369fa1f6dc4a4417fd4f6d/gcc%2Frust%2Fast%2Frust-ast-fragment.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-fragment.cc?ref=b326cced19e5f4d240369fa1f6dc4a4417fd4f6d", "patch": "@@ -21,22 +21,13 @@\n namespace Rust {\n namespace AST {\n \n-Fragment::Fragment (std::vector<SingleASTNode> nodes, bool fragment_is_error)\n-  : kind (fragment_is_error ? FragmentKind::Error : FragmentKind::Complete),\n-    nodes (std::move (nodes))\n-{\n-  if (fragment_is_error)\n-    rust_assert (nodes.empty ());\n-}\n+Fragment::Fragment (FragmentKind kind, std::vector<SingleASTNode> nodes)\n+  : kind (kind), nodes (std::move (nodes))\n+{}\n \n Fragment::Fragment (Fragment const &other) : kind (other.get_kind ())\n {\n-  nodes.clear ();\n-  nodes.reserve (other.nodes.size ());\n-  for (auto &n : other.nodes)\n-    {\n-      nodes.push_back (n);\n-    }\n+  *this = other;\n }\n \n Fragment &\n@@ -56,7 +47,19 @@ Fragment::operator= (Fragment const &other)\n Fragment\n Fragment::create_error ()\n {\n-  return Fragment ({}, true);\n+  return Fragment (FragmentKind::Error, {});\n+}\n+\n+Fragment\n+Fragment::complete (std::vector<AST::SingleASTNode> nodes)\n+{\n+  return Fragment (FragmentKind::Complete, std::move (nodes));\n+}\n+\n+Fragment\n+Fragment::unexpanded ()\n+{\n+  return Fragment (FragmentKind::Unexpanded, {});\n }\n \n std::vector<SingleASTNode> &"}, {"sha": "3ef4ba16dce67aff3e549eb769078d3cdfd5db33", "filename": "gcc/rust/ast/rust-ast-fragment.h", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b326cced19e5f4d240369fa1f6dc4a4417fd4f6d/gcc%2Frust%2Fast%2Frust-ast-fragment.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b326cced19e5f4d240369fa1f6dc4a4417fd4f6d/gcc%2Frust%2Fast%2Frust-ast-fragment.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-fragment.h?ref=b326cced19e5f4d240369fa1f6dc4a4417fd4f6d", "patch": "@@ -57,11 +57,23 @@ enum class FragmentKind\n class Fragment\n {\n public:\n-  Fragment (std::vector<SingleASTNode> nodes, bool fragment_is_error = false);\n   Fragment (Fragment const &other);\n+  Fragment &operator= (Fragment const &other);\n+\n+  /**\n+   * Create an error fragment\n+   */\n   static Fragment create_error ();\n \n-  Fragment &operator= (Fragment const &other);\n+  /**\n+   * Create a complete AST fragment\n+   */\n+  static Fragment complete (std::vector<AST::SingleASTNode> nodes);\n+\n+  /**\n+   * Create a fragment which contains unexpanded nodes\n+   */\n+  static Fragment unexpanded ();\n \n   FragmentKind get_kind () const;\n   std::vector<SingleASTNode> &get_nodes ();\n@@ -78,6 +90,8 @@ class Fragment\n   void accept_vis (ASTVisitor &vis);\n \n private:\n+  Fragment (FragmentKind kind, std::vector<SingleASTNode> nodes);\n+\n   FragmentKind kind;\n \n   /**"}, {"sha": "cbddc163da7bf909df9f6bcce3add65bde8ebc73", "filename": "gcc/rust/expand/rust-attribute-visitor.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b326cced19e5f4d240369fa1f6dc4a4417fd4f6d/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b326cced19e5f4d240369fa1f6dc4a4417fd4f6d/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.h?ref=b326cced19e5f4d240369fa1f6dc4a4417fd4f6d", "patch": "@@ -60,7 +60,7 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     auto fragment = expander.take_expanded_fragment (*this);\n     unsigned int original_depth = expander.expansion_depth;\n-    auto final_fragment = AST::Fragment ({}, true);\n+    auto final_fragment = AST::Fragment::create_error ();\n \n     while (fragment.should_expand ())\n       {"}, {"sha": "a2129e84a46133954330af5955407f4cb88523b5", "filename": "gcc/rust/expand/rust-macro-builtins.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b326cced19e5f4d240369fa1f6dc4a4417fd4f6d/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b326cced19e5f4d240369fa1f6dc4a4417fd4f6d/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc?ref=b326cced19e5f4d240369fa1f6dc4a4417fd4f6d", "patch": "@@ -279,7 +279,7 @@ MacroBuiltin::file (Location invoc_locus, AST::MacroInvocData &invoc)\n     = Session::get_instance ().linemap->location_file (invoc_locus);\n   auto file_str = AST::SingleASTNode (make_string (invoc_locus, current_file));\n \n-  return AST::Fragment ({file_str});\n+  return AST::Fragment::complete ({file_str});\n }\n \n AST::Fragment\n@@ -292,7 +292,7 @@ MacroBuiltin::column (Location invoc_locus, AST::MacroInvocData &invoc)\n     new AST::LiteralExpr (std::to_string (current_column), AST::Literal::INT,\n \t\t\t  PrimitiveCoreType::CORETYPE_U32, {}, invoc_locus)));\n \n-  return AST::Fragment ({column_no});\n+  return AST::Fragment::complete ({column_no});\n }\n \n /* Expand builtin macro include_bytes!(\"filename\"), which includes the contents\n@@ -335,7 +335,7 @@ MacroBuiltin::include_bytes (Location invoc_locus, AST::MacroInvocData &invoc)\n     new AST::BorrowExpr (std::move (array), false, false, {}, invoc_locus));\n \n   auto node = AST::SingleASTNode (std::move (borrow));\n-  return AST::Fragment ({node});\n+  return AST::Fragment::complete ({node});\n }\n \n /* Expand builtin macro include_str!(\"filename\"), which includes the contents\n@@ -362,7 +362,7 @@ MacroBuiltin::include_str (Location invoc_locus, AST::MacroInvocData &invoc)\n   std::string str ((const char *) &bytes[0], bytes.size ());\n \n   auto node = AST::SingleASTNode (make_string (invoc_locus, str));\n-  return AST::Fragment ({node});\n+  return AST::Fragment::complete ({node});\n }\n \n /* Expand builtin macro compile_error!(\"error\"), which forces a compile error\n@@ -430,7 +430,7 @@ MacroBuiltin::concat (Location invoc_locus, AST::MacroInvocData &invoc)\n     return AST::Fragment::create_error ();\n \n   auto node = AST::SingleASTNode (make_string (invoc_locus, str));\n-  return AST::Fragment ({node});\n+  return AST::Fragment::complete ({node});\n }\n \n /* Expand builtin macro env!(), which inspects an environment variable at\n@@ -491,7 +491,7 @@ MacroBuiltin::env (Location invoc_locus, AST::MacroInvocData &invoc)\n     }\n \n   auto node = AST::SingleASTNode (make_string (invoc_locus, env_value));\n-  return AST::Fragment ({node});\n+  return AST::Fragment::complete ({node});\n }\n \n AST::Fragment\n@@ -527,7 +527,7 @@ MacroBuiltin::cfg (Location invoc_locus, AST::MacroInvocData &invoc)\n     new AST::LiteralExpr (result ? \"true\" : \"false\", AST::Literal::BOOL,\n \t\t\t  PrimitiveCoreType::CORETYPE_BOOL, {}, invoc_locus)));\n \n-  return AST::Fragment ({literal_exp});\n+  return AST::Fragment::complete ({literal_exp});\n }\n \n /* Expand builtin macro include!(), which includes a source file at the current\n@@ -584,7 +584,7 @@ MacroBuiltin::include (Location invoc_locus, AST::MacroInvocData &invoc)\n       nodes.push_back (node);\n     }\n \n-  return AST::Fragment (nodes);\n+  return AST::Fragment::complete (nodes);\n }\n \n AST::Fragment\n@@ -597,7 +597,7 @@ MacroBuiltin::line (Location invoc_locus, AST::MacroInvocData &invoc)\n     new AST::LiteralExpr (std::to_string (current_line), AST::Literal::INT,\n \t\t\t  PrimitiveCoreType::CORETYPE_U32, {}, invoc_locus)));\n \n-  return AST::Fragment ({line_no});\n+  return AST::Fragment::complete ({line_no});\n }\n \n } // namespace Rust"}, {"sha": "9c3523e05151d4ccb0da24755d4ac17a2cae15dc", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b326cced19e5f4d240369fa1f6dc4a4417fd4f6d/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b326cced19e5f4d240369fa1f6dc4a4417fd4f6d/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=b326cced19e5f4d240369fa1f6dc4a4417fd4f6d", "patch": "@@ -729,7 +729,7 @@ parse_many (Parser<MacroInvocLexer> &parser, TokenId &delimiter,\n       nodes.emplace_back (std::move (node));\n     }\n \n-  return AST::Fragment (std::move (nodes));\n+  return AST::Fragment::complete (std::move (nodes));\n }\n \n /**\n@@ -840,7 +840,7 @@ transcribe_expression (Parser<MacroInvocLexer> &parser)\n {\n   auto expr = parser.parse_expr ();\n \n-  return AST::Fragment ({std::move (expr)});\n+  return AST::Fragment::complete ({std::move (expr)});\n }\n \n /**\n@@ -855,7 +855,7 @@ transcribe_type (Parser<MacroInvocLexer> &parser)\n   for (auto err : parser.get_errors ())\n     err.emit_error ();\n \n-  return AST::Fragment ({std::move (type)});\n+  return AST::Fragment::complete ({std::move (type)});\n }\n \n static AST::Fragment"}, {"sha": "bf761c1b199395ee16be3e239089a9cda62d4a1a", "filename": "gcc/rust/expand/rust-macro-expand.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b326cced19e5f4d240369fa1f6dc4a4417fd4f6d/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b326cced19e5f4d240369fa1f6dc4a4417fd4f6d/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.h?ref=b326cced19e5f4d240369fa1f6dc4a4417fd4f6d", "patch": "@@ -344,7 +344,7 @@ struct MacroExpander\n \t    auto new_nodes = expanded_fragment.get_nodes ();\n \t    std::move (new_nodes.begin (), new_nodes.end (),\n \t\t       std::back_inserter (accumulator));\n-\t    expanded_fragment = AST::Fragment (accumulator);\n+\t    expanded_fragment = AST::Fragment::complete (accumulator);\n \t  }\n \texpansion_depth--;\n       }"}]}