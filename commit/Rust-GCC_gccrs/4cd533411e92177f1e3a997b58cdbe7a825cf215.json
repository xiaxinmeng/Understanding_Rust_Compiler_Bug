{"sha": "4cd533411e92177f1e3a997b58cdbe7a825cf215", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNkNTMzNDExZTkyMTc3ZjFlM2E5OTdiNThjZGJlN2E4MjVjZjIxNQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-01-16T23:56:25Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-01-16T23:56:25Z"}, "message": "Canvas.java (serialVersionUID): New constant.\n\n\t* java/awt/Canvas.java (serialVersionUID): New constant.\n\tUpdated copyright.  Added javadoc from Classpath.\n\t* java/awt/ItemSelectable.java: Replaced with Classpath version.\n\nFrom-SVN: r48934", "tree": {"sha": "183b85ad3107c952d05608a1bb7e5494350c836a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/183b85ad3107c952d05608a1bb7e5494350c836a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cd533411e92177f1e3a997b58cdbe7a825cf215", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cd533411e92177f1e3a997b58cdbe7a825cf215", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cd533411e92177f1e3a997b58cdbe7a825cf215", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cd533411e92177f1e3a997b58cdbe7a825cf215/comments", "author": null, "committer": null, "parents": [{"sha": "d8d27d73b0c7057dc4b97bbbaa59dc411a7e2dfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d27d73b0c7057dc4b97bbbaa59dc411a7e2dfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8d27d73b0c7057dc4b97bbbaa59dc411a7e2dfc"}], "stats": {"total": 155, "additions": 112, "deletions": 43}, "files": [{"sha": "4379a610a43e903c4cff30786395b4e4c335f39d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd533411e92177f1e3a997b58cdbe7a825cf215/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd533411e92177f1e3a997b58cdbe7a825cf215/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=4cd533411e92177f1e3a997b58cdbe7a825cf215", "patch": "@@ -1,5 +1,9 @@\n 2002-01-16  Tom Tromey  <tromey@redhat.com>\n \n+\t* java/awt/Canvas.java (serialVersionUID): New constant.\n+\tUpdated copyright.  Added javadoc from Classpath.\n+\t* java/awt/ItemSelectable.java: Replaced with Classpath version.\n+\n \t* java/awt/CheckboxGroup.java: Merged with Classpath.\n \t* java/awt/Checkbox.java: Merged with Classpath.\n "}, {"sha": "5022f3dfe67edaa17a2a313a19c0b3ba5466f763", "filename": "libjava/java/awt/Canvas.java", "status": "modified", "additions": 41, "deletions": 13, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd533411e92177f1e3a997b58cdbe7a825cf215/libjava%2Fjava%2Fawt%2FCanvas.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd533411e92177f1e3a997b58cdbe7a825cf215/libjava%2Fjava%2Fawt%2FCanvas.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FCanvas.java?ref=4cd533411e92177f1e3a997b58cdbe7a825cf215", "patch": "@@ -1,21 +1,42 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Copyright (C) 1999, 2000, 2002  Free Software Foundation\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt;\n \n import java.awt.peer.ComponentPeer;\n \n-public class Canvas extends Component\n+public class Canvas extends Component implements java.io.Serializable\n {\n   transient GraphicsConfiguration graphicsConfiguration;\n-  \n+\n+  /**\n+   * Initializes a new instance of <code>Canvas</code>.\n+   */\n   public Canvas() { }\n-  \n+\n   public Canvas(GraphicsConfiguration graphicsConfiguration)\n   {\n     this.graphicsConfiguration = graphicsConfiguration;\n@@ -28,17 +49,21 @@ GraphicsConfiguration getGraphicsConfigurationImpl()\n     return super.getGraphicsConfigurationImpl();\n   }\n \n+  /**\n+   * Creates the native peer for this object.\n+   */\n   public void addNotify()\n   {\n     if (peer == null)\n-      {\n-\tpeer = (ComponentPeer) getToolkit().createCanvas(this);\n-      }\n+      peer = (ComponentPeer) getToolkit().createCanvas(this);\n     super.addNotify();\n   }\n \n-  /** Override this to create components with custom painting.\n-      Defaults to filling the component with the background color. */\n+  /**\n+   * Repaints the canvas window.  This method should be overriden by \n+   * a subclass to do something useful, as this method simply paints\n+   * the window with the background color.\n+   */\n   public void paint(Graphics gfx)\n   {\n     /* This implementation doesn't make much sense since the filling\n@@ -49,4 +74,7 @@ public void paint(Graphics gfx)\n     Dimension size = getSize();\n     gfx.fillRect(0, 0, size.width, size.height);\n   }\n+\n+  // Serialization constant\n+  private static final long serialVersionUID = -2284879212465893870L;\n }"}, {"sha": "0002a7ff41773e80f4a20cd8470fe0466bf0f5ea", "filename": "libjava/java/awt/ItemSelectable.java", "status": "modified", "additions": 67, "deletions": 30, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd533411e92177f1e3a997b58cdbe7a825cf215/libjava%2Fjava%2Fawt%2FItemSelectable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd533411e92177f1e3a997b58cdbe7a825cf215/libjava%2Fjava%2Fawt%2FItemSelectable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FItemSelectable.java?ref=4cd533411e92177f1e3a997b58cdbe7a825cf215", "patch": "@@ -1,36 +1,73 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* ItemSelectable.java -- Items that can be selected\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libjava.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n-details.  */\n \n package java.awt;\n-import java.awt.event.*;\n-\n-/** This interface is implemented by components that support the\n- * select of items.  For instance, Checkbox implements this\n- * interface.\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date April 8, 2000\n- */\n+\n+import java.awt.event.ItemListener;\n+\n+/**\n+  * This interface is for objects that can have one or more items\n+  * selected.  For example, radio buttons.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n public interface ItemSelectable\n {\n-  /** This method adds a listener to receive item events fired by the\n-   * component.\n-   * @param l The item listener to add.\n-   */\n-  public void addItemListener (ItemListener l);\n-\n-  /** This method returns the items in this component which are\n-   * currently selected.\n-   * @returns A non-null array containing the items.\n-   */\n-  public Object[] getSelectedObjects ();\n-\n-  /** This method removes an item listener.\n-   * @param l The item listener to remove.\n-   */\n-  public void removeItemListener (ItemListener l);\n-}\n+\n+/**\n+  * Returns the list of objects that are selected in this component.\n+  *\n+  * @return The list of objects that are selected, or <code>null</code> if\n+  * no objects are selected.\n+  */\n+public abstract Object[]\n+getSelectedObjects();\n+\n+/*************************************************************************/\n+\n+/**\n+  * Adds an item listener to this object.  It will receive\n+  * selection events for this object.\n+  *\n+  * @param listener The item listener to add.\n+  */\n+public abstract void\n+addItemListener(ItemListener listener);\n+\n+/*************************************************************************/\n+\n+/**\n+  * Removes an item listener from this object.  It will no longer receive\n+  * selection change events.\n+  *\n+  * @param listener The item listener to remove.\n+  */\n+public abstract void\n+removeItemListener(ItemListener listener);\n+\n+} // interface ItemSelectable\n+"}]}