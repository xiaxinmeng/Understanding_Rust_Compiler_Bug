{"sha": "4e5362a2a3fe1a3635040a8b18665819d8af6bc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU1MzYyYTJhM2ZlMWEzNjM1MDQwYThiMTg2NjU4MTlkOGFmNmJjMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-04-27T15:08:57Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-04-27T15:08:57Z"}, "message": "type_traits (has_trivial_copy, [...]): Adjust according to the resolution of TR1 issue 3.21.\n\n2005-04-27  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/type_traits (has_trivial_copy, has_trivial_assign,\n\thas_nothrow_copy, has_nothrow_assign): Adjust according to the\n\tresolution of TR1 issue 3.21.\n\t* testsuite/testsuite_tr1.h (test_copy_property,\n\ttest_assign_property): Remove.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\thas_nothrow_assign/has_nothrow_assign.cc: Adjust.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\thas_nothrow_copy/has_nothrow_copy.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\thas_trivial_assign/has_trivial_assign.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\thas_trivial_copy/has_trivial_copy.cc: Likewise.\n\nFrom-SVN: r98829", "tree": {"sha": "e05f651080e22f39174810d14934dbd191cbc47e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e05f651080e22f39174810d14934dbd191cbc47e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e5362a2a3fe1a3635040a8b18665819d8af6bc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e5362a2a3fe1a3635040a8b18665819d8af6bc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e5362a2a3fe1a3635040a8b18665819d8af6bc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e5362a2a3fe1a3635040a8b18665819d8af6bc3/comments", "author": null, "committer": null, "parents": [{"sha": "e3cc72542ba605f704f9590ef6d5b91bd9b66233", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3cc72542ba605f704f9590ef6d5b91bd9b66233", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3cc72542ba605f704f9590ef6d5b91bd9b66233"}], "stats": {"total": 200, "additions": 84, "deletions": 116}, "files": [{"sha": "ccb473e462cdb69b4e4a10696949aebbb21d4a68", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e5362a2a3fe1a3635040a8b18665819d8af6bc3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e5362a2a3fe1a3635040a8b18665819d8af6bc3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4e5362a2a3fe1a3635040a8b18665819d8af6bc3", "patch": "@@ -1,3 +1,19 @@\n+2005-04-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/type_traits (has_trivial_copy, has_trivial_assign,\n+\thas_nothrow_copy, has_nothrow_assign): Adjust according to the\n+\tresolution of TR1 issue 3.21.\n+\t* testsuite/testsuite_tr1.h (test_copy_property,\n+\ttest_assign_property): Remove.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\thas_nothrow_assign/has_nothrow_assign.cc: Adjust.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\thas_nothrow_copy/has_nothrow_copy.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\thas_trivial_assign/has_trivial_assign.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\thas_trivial_copy/has_trivial_copy.cc: Likewise.\n+\n 2005-04-26  Jones Desougi  <jones@ingate.com>\n \n \tPR libstdc++/21131"}, {"sha": "0bd05bb1198a7067144fffa2efda4c22f22f4749", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e5362a2a3fe1a3635040a8b18665819d8af6bc3/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e5362a2a3fe1a3635040a8b18665819d8af6bc3/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=4e5362a2a3fe1a3635040a8b18665819d8af6bc3", "patch": "@@ -366,14 +366,11 @@ namespace tr1\n \n   template<typename _Tp>\n     struct has_trivial_copy\n-    : public integral_constant<bool, (is_pod<_Tp>::value \n-\t\t\t\t      && !is_volatile<_Tp>::value)> { };\n+    : public integral_constant<bool, is_pod<_Tp>::value> { };\n \n   template<typename _Tp>\n     struct has_trivial_assign\n-    : public integral_constant<bool, (is_pod<_Tp>::value\n-\t\t\t\t      && !is_const<_Tp>::value\n-\t\t\t\t      && !is_volatile<_Tp>::value)> { };\n+    : public integral_constant<bool, is_pod<_Tp>::value> { };\n \n   template<typename _Tp>\n     struct has_trivial_destructor\n@@ -385,14 +382,11 @@ namespace tr1\n \n   template<typename _Tp>\n     struct has_nothrow_copy\n-    : public integral_constant<bool, (is_pod<_Tp>::value \n-\t\t\t\t      && !is_volatile<_Tp>::value)> { };\n+    : public integral_constant<bool, is_pod<_Tp>::value> { };\n \n   template<typename _Tp>\n     struct has_nothrow_assign\n-    : public integral_constant<bool, (is_pod<_Tp>::value\n-\t\t\t\t      && !is_const<_Tp>::value\n-\t\t\t\t      && !is_volatile<_Tp>::value)> { };\n+    : public integral_constant<bool, is_pod<_Tp>::value> { };\n \n   template<typename>\n     struct has_virtual_destructor"}, {"sha": "ff0a3cefce324f838d60867a05d957fe60346ba9", "filename": "libstdc++-v3/testsuite/testsuite_tr1.h", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e5362a2a3fe1a3635040a8b18665819d8af6bc3/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e5362a2a3fe1a3635040a8b18665819d8af6bc3/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h?ref=4e5362a2a3fe1a3635040a8b18665819d8af6bc3", "patch": "@@ -62,40 +62,6 @@ namespace __gnu_test\n       return ret;\n     }\n \n-  template<template<typename> class Property,\n-           typename Type>\n-    bool\n-    test_copy_property(bool value)\n-    {\n-      bool ret = true;\n-      ret &= Property<Type>::value == value;\n-      ret &= Property<const Type>::value == value;\n-      ret &= Property<volatile Type>::value == !value;\n-      ret &= Property<const volatile Type>::value == !value;\n-      ret &= Property<Type>::type::value == value;\n-      ret &= Property<const Type>::type::value == value;\n-      ret &= Property<volatile Type>::type::value == !value;\n-      ret &= Property<const volatile Type>::type::value == !value;\n-      return ret;\n-    }\n-\n-  template<template<typename> class Property,\n-           typename Type>\n-    bool\n-    test_assign_property(bool value)\n-    {\n-      bool ret = true;\n-      ret &= Property<Type>::value == value;\n-      ret &= Property<const Type>::value == !value;\n-      ret &= Property<volatile Type>::value == !value;\n-      ret &= Property<const volatile Type>::value == !value;\n-      ret &= Property<Type>::type::value == value;\n-      ret &= Property<const Type>::type::value == !value;\n-      ret &= Property<volatile Type>::type::value == !value;\n-      ret &= Property<const volatile Type>::type::value == !value;\n-      return ret;\n-    }\n-\n   template<template<typename, typename> class Relationship,\n            typename Type1, typename Type2>\n     bool"}, {"sha": "f8f25e8c84e33a09eff9e719c02063e26ba4316e", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/has_nothrow_assign/has_nothrow_assign.cc", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e5362a2a3fe1a3635040a8b18665819d8af6bc3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_nothrow_assign%2Fhas_nothrow_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e5362a2a3fe1a3635040a8b18665819d8af6bc3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_nothrow_assign%2Fhas_nothrow_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_nothrow_assign%2Fhas_nothrow_assign.cc?ref=4e5362a2a3fe1a3635040a8b18665819d8af6bc3", "patch": "@@ -1,6 +1,6 @@\n // 2004-12-30  Paolo Carlini  <pcarlini@suse.de>\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,23 +30,21 @@ void test01()\n   using std::tr1::has_nothrow_assign;\n   using namespace __gnu_test;\n \n-  VERIFY( (test_assign_property<has_nothrow_assign, void>(true)) );\n-  VERIFY( (test_assign_property<has_nothrow_assign, int>(true)) );\n-  VERIFY( (test_assign_property<has_nothrow_assign, float>(true)) );\n-  VERIFY( (test_assign_property<has_nothrow_assign, EnumType>(true)) );\n-  VERIFY( (test_assign_property<has_nothrow_assign, int*>(true)) );\n-  VERIFY( (test_assign_property<has_nothrow_assign, int(*)(int)>(true)) );\n-  VERIFY( (test_assign_property<has_nothrow_assign, int (ClassType::*)>(true)) );\n-  VERIFY( (test_assign_property<has_nothrow_assign,\n-\t   int (ClassType::*) (int)>(true)) );\n-  VERIFY( (test_assign_property<has_nothrow_assign, int[2]>(true)) );\n-  VERIFY( (test_assign_property<has_nothrow_assign, float[][3]>(true)) );\n-  VERIFY( (test_assign_property<has_nothrow_assign, EnumType[2][3][4]>(true)) );\n-  VERIFY( (test_assign_property<has_nothrow_assign, int*[3]>(true)) );\n-  VERIFY( (test_assign_property<has_nothrow_assign, int(*[][2])(int)>(true)) );\n-  VERIFY( (test_assign_property<has_nothrow_assign,\n-\t   int (ClassType::*[2][3])>(true)) );\n-  VERIFY( (test_assign_property<has_nothrow_assign,\n+  VERIFY( (test_category<has_nothrow_assign, void>(true)) );\n+  VERIFY( (test_category<has_nothrow_assign, int>(true)) );\n+  VERIFY( (test_category<has_nothrow_assign, float>(true)) );\n+  VERIFY( (test_category<has_nothrow_assign, EnumType>(true)) );\n+  VERIFY( (test_category<has_nothrow_assign, int*>(true)) );\n+  VERIFY( (test_category<has_nothrow_assign, int(*)(int)>(true)) );\n+  VERIFY( (test_category<has_nothrow_assign, int (ClassType::*)>(true)) );\n+  VERIFY( (test_category<has_nothrow_assign, int (ClassType::*) (int)>(true)) );\n+  VERIFY( (test_category<has_nothrow_assign, int[2]>(true)) );\n+  VERIFY( (test_category<has_nothrow_assign, float[][3]>(true)) );\n+  VERIFY( (test_category<has_nothrow_assign, EnumType[2][3][4]>(true)) );\n+  VERIFY( (test_category<has_nothrow_assign, int*[3]>(true)) );\n+  VERIFY( (test_category<has_nothrow_assign, int(*[][2])(int)>(true)) );\n+  VERIFY( (test_category<has_nothrow_assign, int (ClassType::*[2][3])>(true)) );\n+  VERIFY( (test_category<has_nothrow_assign, \n \t   int (ClassType::*[][2][3]) (int)>(true)) );\n }\n "}, {"sha": "7d59d5aafff88c72afbce1c3e651af4e00c414ec", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/has_nothrow_copy/has_nothrow_copy.cc", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e5362a2a3fe1a3635040a8b18665819d8af6bc3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_nothrow_copy%2Fhas_nothrow_copy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e5362a2a3fe1a3635040a8b18665819d8af6bc3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_nothrow_copy%2Fhas_nothrow_copy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_nothrow_copy%2Fhas_nothrow_copy.cc?ref=4e5362a2a3fe1a3635040a8b18665819d8af6bc3", "patch": "@@ -1,6 +1,6 @@\n // 2004-12-30  Paolo Carlini  <pcarlini@suse.de>\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,23 +30,21 @@ void test01()\n   using std::tr1::has_nothrow_copy;\n   using namespace __gnu_test;\n \n-  VERIFY( (test_copy_property<has_nothrow_copy, void>(true)) );\n-  VERIFY( (test_copy_property<has_nothrow_copy, int>(true)) );\n-  VERIFY( (test_copy_property<has_nothrow_copy, float>(true)) );\n-  VERIFY( (test_copy_property<has_nothrow_copy, EnumType>(true)) );\n-  VERIFY( (test_copy_property<has_nothrow_copy, int*>(true)) );\n-  VERIFY( (test_copy_property<has_nothrow_copy, int(*)(int)>(true)) );\n-  VERIFY( (test_copy_property<has_nothrow_copy, int (ClassType::*)>(true)) );\n-  VERIFY( (test_copy_property<has_nothrow_copy,\n-\t   int (ClassType::*) (int)>(true)) );\n-  VERIFY( (test_copy_property<has_nothrow_copy, int[2]>(true)) );\n-  VERIFY( (test_copy_property<has_nothrow_copy, float[][3]>(true)) );\n-  VERIFY( (test_copy_property<has_nothrow_copy, EnumType[2][3][4]>(true)) );\n-  VERIFY( (test_copy_property<has_nothrow_copy, int*[3]>(true)) );\n-  VERIFY( (test_copy_property<has_nothrow_copy, int(*[][2])(int)>(true)) );\n-  VERIFY( (test_copy_property<has_nothrow_copy,\n-\t   int (ClassType::*[2][3])>(true)) );\n-  VERIFY( (test_copy_property<has_nothrow_copy,\n+  VERIFY( (test_category<has_nothrow_copy, void>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy, int>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy, float>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy, EnumType>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy, int*>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy, int(*)(int)>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy, int (ClassType::*)>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy, int (ClassType::*) (int)>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy, int[2]>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy, float[][3]>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy, EnumType[2][3][4]>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy, int*[3]>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy, int(*[][2])(int)>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy, int (ClassType::*[2][3])>(true)) );\n+  VERIFY( (test_category<has_nothrow_copy,\n \t   int (ClassType::*[][2][3]) (int)>(true)) );\n }\n "}, {"sha": "466697429a7b66c132d39ad43a898075cd9fe6b1", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/has_trivial_assign/has_trivial_assign.cc", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e5362a2a3fe1a3635040a8b18665819d8af6bc3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_assign%2Fhas_trivial_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e5362a2a3fe1a3635040a8b18665819d8af6bc3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_assign%2Fhas_trivial_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_assign%2Fhas_trivial_assign.cc?ref=4e5362a2a3fe1a3635040a8b18665819d8af6bc3", "patch": "@@ -1,6 +1,6 @@\n // 2004-12-30  Paolo Carlini  <pcarlini@suse.de>\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,23 +30,21 @@ void test01()\n   using std::tr1::has_trivial_assign;\n   using namespace __gnu_test;\n \n-  VERIFY( (test_assign_property<has_trivial_assign, void>(true)) );\n-  VERIFY( (test_assign_property<has_trivial_assign, int>(true)) );\n-  VERIFY( (test_assign_property<has_trivial_assign, float>(true)) );\n-  VERIFY( (test_assign_property<has_trivial_assign, EnumType>(true)) );\n-  VERIFY( (test_assign_property<has_trivial_assign, int*>(true)) );\n-  VERIFY( (test_assign_property<has_trivial_assign, int(*)(int)>(true)) );\n-  VERIFY( (test_assign_property<has_trivial_assign, int (ClassType::*)>(true)) );\n-  VERIFY( (test_assign_property<has_trivial_assign,\n-\t   int (ClassType::*) (int)>(true)) );\n-  VERIFY( (test_assign_property<has_trivial_assign, int[2]>(true)) );\n-  VERIFY( (test_assign_property<has_trivial_assign, float[][3]>(true)) );\n-  VERIFY( (test_assign_property<has_trivial_assign, EnumType[2][3][4]>(true)) );\n-  VERIFY( (test_assign_property<has_trivial_assign, int*[3]>(true)) );\n-  VERIFY( (test_assign_property<has_trivial_assign, int(*[][2])(int)>(true)) );\n-  VERIFY( (test_assign_property<has_trivial_assign,\n-\t   int (ClassType::*[2][3])>(true)) );\n-  VERIFY( (test_assign_property<has_trivial_assign,\n+  VERIFY( (test_category<has_trivial_assign, void>(true)) );\n+  VERIFY( (test_category<has_trivial_assign, int>(true)) );\n+  VERIFY( (test_category<has_trivial_assign, float>(true)) );\n+  VERIFY( (test_category<has_trivial_assign, EnumType>(true)) );\n+  VERIFY( (test_category<has_trivial_assign, int*>(true)) );\n+  VERIFY( (test_category<has_trivial_assign, int(*)(int)>(true)) );\n+  VERIFY( (test_category<has_trivial_assign, int (ClassType::*)>(true)) );\n+  VERIFY( (test_category<has_trivial_assign, int (ClassType::*) (int)>(true)) );\n+  VERIFY( (test_category<has_trivial_assign, int[2]>(true)) );\n+  VERIFY( (test_category<has_trivial_assign, float[][3]>(true)) );\n+  VERIFY( (test_category<has_trivial_assign, EnumType[2][3][4]>(true)) );\n+  VERIFY( (test_category<has_trivial_assign, int*[3]>(true)) );\n+  VERIFY( (test_category<has_trivial_assign, int(*[][2])(int)>(true)) );\n+  VERIFY( (test_category<has_trivial_assign, int (ClassType::*[2][3])>(true)) );\n+  VERIFY( (test_category<has_trivial_assign,\n \t   int (ClassType::*[][2][3]) (int)>(true)) );\n }\n "}, {"sha": "fabe255bbf86d29f4d667df576a1dbd34bc3ee00", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/has_trivial_copy/has_trivial_copy.cc", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e5362a2a3fe1a3635040a8b18665819d8af6bc3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_copy%2Fhas_trivial_copy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e5362a2a3fe1a3635040a8b18665819d8af6bc3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_copy%2Fhas_trivial_copy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fhas_trivial_copy%2Fhas_trivial_copy.cc?ref=4e5362a2a3fe1a3635040a8b18665819d8af6bc3", "patch": "@@ -1,6 +1,6 @@\n // 2004-12-30  Paolo Carlini  <pcarlini@suse.de>\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,23 +30,21 @@ void test01()\n   using std::tr1::has_trivial_copy;\n   using namespace __gnu_test;\n \n-  VERIFY( (test_copy_property<has_trivial_copy, void>(true)) );\n-  VERIFY( (test_copy_property<has_trivial_copy, int>(true)) );\n-  VERIFY( (test_copy_property<has_trivial_copy, float>(true)) );\n-  VERIFY( (test_copy_property<has_trivial_copy, EnumType>(true)) );\n-  VERIFY( (test_copy_property<has_trivial_copy, int*>(true)) );\n-  VERIFY( (test_copy_property<has_trivial_copy, int(*)(int)>(true)) );\n-  VERIFY( (test_copy_property<has_trivial_copy, int (ClassType::*)>(true)) );\n-  VERIFY( (test_copy_property<has_trivial_copy,\n-\t   int (ClassType::*) (int)>(true)) );\n-  VERIFY( (test_copy_property<has_trivial_copy, int[2]>(true)) );\n-  VERIFY( (test_copy_property<has_trivial_copy, float[][3]>(true)) );\n-  VERIFY( (test_copy_property<has_trivial_copy, EnumType[2][3][4]>(true)) );\n-  VERIFY( (test_copy_property<has_trivial_copy, int*[3]>(true)) );\n-  VERIFY( (test_copy_property<has_trivial_copy, int(*[][2])(int)>(true)) );\n-  VERIFY( (test_copy_property<has_trivial_copy,\n-\t   int (ClassType::*[2][3])>(true)) );\n-  VERIFY( (test_copy_property<has_trivial_copy,\n+  VERIFY( (test_category<has_trivial_copy, void>(true)) );\n+  VERIFY( (test_category<has_trivial_copy, int>(true)) );\n+  VERIFY( (test_category<has_trivial_copy, float>(true)) );\n+  VERIFY( (test_category<has_trivial_copy, EnumType>(true)) );\n+  VERIFY( (test_category<has_trivial_copy, int*>(true)) );\n+  VERIFY( (test_category<has_trivial_copy, int(*)(int)>(true)) );\n+  VERIFY( (test_category<has_trivial_copy, int (ClassType::*)>(true)) );\n+  VERIFY( (test_category<has_trivial_copy, int (ClassType::*) (int)>(true)) );\n+  VERIFY( (test_category<has_trivial_copy, int[2]>(true)) );\n+  VERIFY( (test_category<has_trivial_copy, float[][3]>(true)) );\n+  VERIFY( (test_category<has_trivial_copy, EnumType[2][3][4]>(true)) );\n+  VERIFY( (test_category<has_trivial_copy, int*[3]>(true)) );\n+  VERIFY( (test_category<has_trivial_copy, int(*[][2])(int)>(true)) );\n+  VERIFY( (test_category<has_trivial_copy, int (ClassType::*[2][3])>(true)) );\n+  VERIFY( (test_category<has_trivial_copy,\n \t   int (ClassType::*[][2][3]) (int)>(true)) );\n }\n "}]}