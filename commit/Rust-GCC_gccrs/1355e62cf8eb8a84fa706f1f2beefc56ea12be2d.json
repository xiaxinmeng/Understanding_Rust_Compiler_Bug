{"sha": "1355e62cf8eb8a84fa706f1f2beefc56ea12be2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM1NWU2MmNmOGViOGE4NGZhNzA2ZjFmMmJlZWZjNTZlYTEyYmUyZA==", "commit": {"author": {"name": "Kirill Yukhin", "email": "kirill.yukhin@intel.com", "date": "2016-04-15T08:25:49Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2016-04-15T08:25:49Z"}, "message": "AVX-512. Fix mem operand modifier for Intel syntax.\n\nPR target/70662\ngcc/\n\t* config/i386/sse.md: Use proper memory operand\n\tmodifiers.\ntestsuite/gcc/\n\t* gcc.target/i386/pr70662.c: New test.\n\nFrom-SVN: r235008", "tree": {"sha": "8bd08fbdcbcd7a2c21693a2dde67b15f6bf3cd2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bd08fbdcbcd7a2c21693a2dde67b15f6bf3cd2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1355e62cf8eb8a84fa706f1f2beefc56ea12be2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1355e62cf8eb8a84fa706f1f2beefc56ea12be2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1355e62cf8eb8a84fa706f1f2beefc56ea12be2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1355e62cf8eb8a84fa706f1f2beefc56ea12be2d/comments", "author": null, "committer": null, "parents": [{"sha": "0ab34b9e5a7dd2c56733c316859cb528ba3cfb84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ab34b9e5a7dd2c56733c316859cb528ba3cfb84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ab34b9e5a7dd2c56733c316859cb528ba3cfb84"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "8349e35d4108afece06df27e6e3f64cc3b8dc58a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1355e62cf8eb8a84fa706f1f2beefc56ea12be2d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1355e62cf8eb8a84fa706f1f2beefc56ea12be2d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1355e62cf8eb8a84fa706f1f2beefc56ea12be2d", "patch": "@@ -1,3 +1,10 @@\n+2016-04-15  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\tPR target/70662\n+\t* config/i386/sse.md: Use proper memory operand\n+\tmodifiers.\n+\n+\n 2016-04-15  Richard Biener  <rguenther@suse.de>\n \tAlan Modra  <amodra@gmail.com>\n "}, {"sha": "4d2927e5c292bd3920e6a10e98ac46aa541c30ce", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1355e62cf8eb8a84fa706f1f2beefc56ea12be2d/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1355e62cf8eb8a84fa706f1f2beefc56ea12be2d/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=1355e62cf8eb8a84fa706f1f2beefc56ea12be2d", "patch": "@@ -17262,9 +17262,12 @@\n   /*  There is no DF broadcast (in AVX-512*) to 128b register.\n       Mimic it with integer variant.  */\n   if (<MODE>mode == V2DFmode)\n-    return \"vpbroadcastq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\";\n+    return \"vpbroadcastq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %q1}\";\n+\n+  if (GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) == 32)\n+    return \"v<sseintprefix>broadcast<bcstscalarsuff>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %k1}\";\n   else\n-    return \"v<sseintprefix>broadcast<bcstscalarsuff>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\";\n+    return \"v<sseintprefix>broadcast<bcstscalarsuff>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %q1}\";\n }\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"evex\")"}, {"sha": "a62f7ec01839c71db26b37b2c2fe08c71062bd8e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1355e62cf8eb8a84fa706f1f2beefc56ea12be2d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1355e62cf8eb8a84fa706f1f2beefc56ea12be2d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1355e62cf8eb8a84fa706f1f2beefc56ea12be2d", "patch": "@@ -1,3 +1,8 @@\n+2016-04-15  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\tPR target/70662\n+\t* gcc.target/i386/pr70662.c: New test.\n+\n 2016-04-15  Richard Biener  <rguenther@suse.de>\n \tAlan Modra  <amodra@gmail.com>\n "}, {"sha": "109e224d7b40b2b0a835f7ccb06feac061ca748a", "filename": "gcc/testsuite/gcc.target/i386/pr70662.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1355e62cf8eb8a84fa706f1f2beefc56ea12be2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70662.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1355e62cf8eb8a84fa706f1f2beefc56ea12be2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70662.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70662.c?ref=1355e62cf8eb8a84fa706f1f2beefc56ea12be2d", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do assemble { target { ! ia32 } } } */\n+/* { dg-require-effective-target avx512vbmi } */\n+/* { dg-require-effective-target masm_intel } */\n+/* { dg-options \"-Og -fschedule-insns -fno-tree-fre -mavx512vbmi --param=max-sched-ready-insns=1 -masm=intel\" } */\n+\n+typedef char v64u8 __attribute__((vector_size(64)));\n+typedef int v64u32 __attribute__((vector_size(64)));\n+typedef long v64u64 __attribute__((vector_size(64)));\n+typedef __int128 v64u128 __attribute__((vector_size(64)));\n+\n+v64u128\n+foo(int u8_0, unsigned u128_0, v64u32 v64u32_1, v64u32 v64u32_0, v64u64 v64u64_0, v64u128 v64u128_0)\n+{\n+  v64u8 v64u8_0 = v64u8_0;\n+  v64u32_0 = v64u32_0 >> (v64u32){0, 0, 0, 1, 0, ((v64u64)v64u64_0)[u8_0], ((v64u32)v64u128_0)[15], 0, 0, 0, 0, 4, ((v64u64)v64u64_0)[v64u32_0[0]] - 1};\n+  v64u8_0 = v64u8_0 << ((v64u8)v64u32_1 & 1);\n+  v64u64_0[0] >>= 0;\n+  return u128_0 + (v64u128)v64u8_0 + (v64u128)v64u32_0 + (v64u128)v64u64_0;\n+}"}]}