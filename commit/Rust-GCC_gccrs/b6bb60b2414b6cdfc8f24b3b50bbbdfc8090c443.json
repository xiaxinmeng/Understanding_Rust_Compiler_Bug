{"sha": "b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443", "node_id": "C_kwDOANBUbNoAKGI2YmI2MGIyNDE0YjZjZGZjOGYyNGIzYjUwYmJiZGZjODA5MGM0NDM", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2021-07-06T21:12:32Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-09-21T15:25:00Z"}, "message": "[Ada] Add assertions to Uintp (UI_Is_In_Int_Range)\n\ngcc/ada/\n\n\t* uintp.ads, uintp.adb (UI_Is_In_Int_Range): Change the type of\n\tthe formal parameter to Valid_Uint. Remove code that preserved\n\tthe previous behavior, and replace it with an assertion. The\n\tprevious behavior is no longer needed given the recent change to\n\tgigi.\n\t(No, Present): Add comment.", "tree": {"sha": "8fb803e1f020fde2c2c02105ab9e14a6741c44e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fb803e1f020fde2c2c02105ab9e14a6741c44e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "911b00fba9a092448035c0951d5b229819124d20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/911b00fba9a092448035c0951d5b229819124d20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/911b00fba9a092448035c0951d5b229819124d20"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "29d409b49e1139e24dc21f56c9497d3b0ab64e1e", "filename": "gcc/ada/uintp.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443/gcc%2Fada%2Fuintp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443/gcc%2Fada%2Fuintp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.adb?ref=b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443", "patch": "@@ -1693,16 +1693,15 @@ package body Uintp is\n    -- UI_Is_In_Int_Range --\n    -------------------------\n \n-   function UI_Is_In_Int_Range (Input : Uint) return Boolean is\n+   function UI_Is_In_Int_Range (Input : Valid_Uint) return Boolean is\n+      pragma Assert (Present (Input));\n+      --  Assertion is here in case we're called from C++ code, which does\n+      --  not check the predicates.\n    begin\n       --  Make sure we don't get called before Initialize\n \n       pragma Assert (Uint_Int_First /= Uint_0);\n \n-      if No (Input) then -- Preserve old behavior\n-         return True;\n-      end if;\n-\n       if Direct (Input) then\n          return True;\n       else"}, {"sha": "d9f1f8f70fbb81893f1e1413199e6eb459dbbe31", "filename": "gcc/ada/uintp.ads", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443/gcc%2Fada%2Fuintp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443/gcc%2Fada%2Fuintp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.ads?ref=b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443", "patch": "@@ -90,6 +90,10 @@ package Uintp is\n    Uint_Minus_127 : constant Uint;\n    Uint_Minus_128 : constant Uint;\n \n+   --  Functions for detecting No_Uint. Note that clients of this package\n+   --  cannot use \"=\" and \"/=\" to compare with No_Uint; they must use No\n+   --  and Present instead.\n+\n    function No (X : Uint) return Boolean is (X = No_Uint);\n    --  Note that this is using the predefined \"=\", not the \"=\" declared below,\n    --  which would blow up on No_Uint.\n@@ -169,10 +173,9 @@ package Uintp is\n    pragma Inline (UI_Gt);\n    --  Compares integer values for greater than\n \n-   function UI_Is_In_Int_Range (Input : Uint) return Boolean;\n+   function UI_Is_In_Int_Range (Input : Valid_Uint) return Boolean;\n    pragma Inline (UI_Is_In_Int_Range);\n    --  Determines if universal integer is in Int range.\n-   --  Input should probably be of type Valid_Uint.\n \n    function UI_Le (Left : Valid_Uint; Right : Valid_Uint) return Boolean;\n    function UI_Le (Left : Int;  Right : Valid_Uint) return Boolean;"}]}