{"sha": "b3e884c3e9d02b182469abff0fa7531ec8325a5e", "node_id": "C_kwDOANBUbNoAKGIzZTg4NGMzZTlkMDJiMTgyNDY5YWJmZjBmYTc1MzFlYzgzMjVhNWU", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-04T12:12:15Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-04T12:12:15Z"}, "message": "Add ImplItemTypes enum to switch between HIR::ImplItem types", "tree": {"sha": "f9d4d61cf3e70a34509f2235cea085709d81d3cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9d4d61cf3e70a34509f2235cea085709d81d3cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3e884c3e9d02b182469abff0fa7531ec8325a5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3e884c3e9d02b182469abff0fa7531ec8325a5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3e884c3e9d02b182469abff0fa7531ec8325a5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3e884c3e9d02b182469abff0fa7531ec8325a5e/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "0dd7ac80b658c2564db0b420b30ef642969e5382", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3e884c3e9d02b182469abff0fa7531ec8325a5e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3e884c3e9d02b182469abff0fa7531ec8325a5e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=b3e884c3e9d02b182469abff0fa7531ec8325a5e", "patch": "@@ -1122,6 +1122,11 @@ class Function : public VisItem, public ImplItem\n   // Returns whether function has a where clause.\n   bool has_where_clause () const { return !where_clause.is_empty (); }\n \n+  ImplItemType get_impl_item_type () const override final\n+  {\n+    return ImplItem::ImplItemType::FUNCTION;\n+  }\n+\n   // Mega-constructor with all possible fields\n   Function (Analysis::NodeMapping mappings, Identifier function_name,\n \t    FunctionQualifiers qualifiers,\n@@ -1273,6 +1278,11 @@ class TypeAlias : public VisItem, public ImplItem\n   // Returns whether type alias has a where clause.\n   bool has_where_clause () const { return !where_clause.is_empty (); }\n \n+  ImplItemType get_impl_item_type () const override final\n+  {\n+    return ImplItem::ImplItemType::TYPE_ALIAS;\n+  }\n+\n   // Mega-constructor with all possible fields\n   TypeAlias (Analysis::NodeMapping mappings, Identifier new_type_name,\n \t     std::vector<std::unique_ptr<GenericParam>> generic_params,\n@@ -2075,6 +2085,11 @@ class ConstantItem : public VisItem, public ImplItem\n     return get_mappings ();\n   };\n \n+  ImplItemType get_impl_item_type () const override final\n+  {\n+    return ImplItem::ImplItemType::CONSTANT;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */"}, {"sha": "af18d804f42c40a093d9cec4af9f674aa6a10df6", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3e884c3e9d02b182469abff0fa7531ec8325a5e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3e884c3e9d02b182469abff0fa7531ec8325a5e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=b3e884c3e9d02b182469abff0fa7531ec8325a5e", "patch": "@@ -642,11 +642,14 @@ class TraitItem\n \n class ImplItem\n {\n-protected:\n-  // Clone function implementation as pure virtual method\n-  virtual ImplItem *clone_inherent_impl_item_impl () const = 0;\n-\n public:\n+  enum ImplItemType\n+  {\n+    FUNCTION,\n+    TYPE_ALIAS,\n+    CONSTANT\n+  };\n+\n   virtual ~ImplItem () {}\n \n   // Unique pointer custom clone function\n@@ -662,6 +665,12 @@ class ImplItem\n   virtual Analysis::NodeMapping get_impl_mappings () const = 0;\n \n   virtual Location get_locus () const = 0;\n+\n+  virtual ImplItemType get_impl_item_type () const = 0;\n+\n+protected:\n+  // Clone function implementation as pure virtual method\n+  virtual ImplItem *clone_inherent_impl_item_impl () const = 0;\n };\n \n // A crate HIR object - holds all the data for a single compilation unit"}]}