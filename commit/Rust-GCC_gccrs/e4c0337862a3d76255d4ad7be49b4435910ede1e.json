{"sha": "e4c0337862a3d76255d4ad7be49b4435910ede1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRjMDMzNzg2MmEzZDc2MjU1ZDRhZDdiZTQ5YjQ0MzU5MTBlZGUxZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-05-09T18:36:31Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-05-09T18:36:31Z"}, "message": "fold-const.c (fold_range_test): Pass LOC to build_range_check.\n\n\t* fold-const.c (fold_range_test): Pass LOC to build_range_check.\n\t(fold_ternary_loc): Use expr_location_or.\n\nFrom-SVN: r173588", "tree": {"sha": "f657c3abe40e08379f4708214ebd384c11b6fe20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f657c3abe40e08379f4708214ebd384c11b6fe20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4c0337862a3d76255d4ad7be49b4435910ede1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4c0337862a3d76255d4ad7be49b4435910ede1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4c0337862a3d76255d4ad7be49b4435910ede1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4c0337862a3d76255d4ad7be49b4435910ede1e/comments", "author": null, "committer": null, "parents": [{"sha": "805d6a7592f18617e4dda5f839dfd02618aaf779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/805d6a7592f18617e4dda5f839dfd02618aaf779", "html_url": "https://github.com/Rust-GCC/gccrs/commit/805d6a7592f18617e4dda5f839dfd02618aaf779"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "3a94b94328fe3014c38217f68fbc55684dccb736", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c0337862a3d76255d4ad7be49b4435910ede1e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c0337862a3d76255d4ad7be49b4435910ede1e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4c0337862a3d76255d4ad7be49b4435910ede1e", "patch": "@@ -1,14 +1,19 @@\n+2011-05-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* fold-const.c (fold_range_test): Pass LOC to build_range_check.\n+\t(fold_ternary_loc): Use expr_location_or.\n+\n 2011-05-09  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR debug/48853\n \t* dwarf2out.c (mem_loc_descriptor) <case SUBREG>: If\n \tPOINTERS_EXTEND_UNSIGNED is defined, don't give up if mode is\n \tPmode and mem_mode is not VOIDmode.\n \n-2011-05-08  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+2011-05-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n-\t* tree.h (TYPE_UNQUALIFIED, TYPE_QUAL_CONST): Convert to enum.\n-\t(TYPE_QUAL_VOLATILE, TYPE_QUAL_RESTRICT): Likewise.\n+\t* tree.h (TYPE_UNQUALIFIED, TYPE_QUAL_CONST, TYPE_QUAL_VOLATILE,\n+\tTYPE_QUAL_RESTRICT): Convert to enum.\n \n 2011-05-09  Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "ab68eab990cc0bd692d45246c798c53d4e87d565", "filename": "gcc/fold-const.c", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c0337862a3d76255d4ad7be49b4435910ede1e/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c0337862a3d76255d4ad7be49b4435910ede1e/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e4c0337862a3d76255d4ad7be49b4435910ede1e", "patch": "@@ -4822,7 +4822,7 @@ fold_range_test (location_t loc, enum tree_code code, tree type,\n   if ((lhs == 0 || rhs == 0 || operand_equal_p (lhs, rhs, 0))\n       && merge_ranges (&in_p, &low, &high, in0_p, low0, high0,\n \t\t       in1_p, low1, high1)\n-      && 0 != (tem = (build_range_check (UNKNOWN_LOCATION, type,\n+      && 0 != (tem = (build_range_check (loc, type,\n \t\t\t\t\t lhs != 0 ? lhs\n \t\t\t\t\t : rhs != 0 ? rhs : integer_zero_node,\n \t\t\t\t\t in_p, low, high))))\n@@ -13332,9 +13332,7 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \t\t\t\t\t     TREE_OPERAND (arg0, 1))\n \t  && !HONOR_SIGNED_ZEROS (TYPE_MODE (TREE_TYPE (op2))))\n \t{\n-\t  location_t loc0 = EXPR_LOCATION (arg0);\n-\t  if (loc0 == UNKNOWN_LOCATION)\n-\t    loc0 = loc;\n+\t  location_t loc0 = expr_location_or (arg0, loc);\n \t  tem = fold_truth_not_expr (loc0, arg0);\n \t  if (tem && COMPARISON_CLASS_P (tem))\n \t    {\n@@ -13349,9 +13347,7 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n       if (truth_value_p (TREE_CODE (arg0))\n \t  && tree_swap_operands_p (op1, op2, false))\n \t{\n-\t  location_t loc0 = EXPR_LOCATION (arg0);\n-\t  if (loc0 == UNKNOWN_LOCATION)\n-\t    loc0 = loc;\n+\t  location_t loc0 = expr_location_or (arg0, loc);\n \t  /* See if this can be inverted.  If it can't, possibly because\n \t     it was a floating-point inequality comparison, don't do\n \t     anything.  */\n@@ -13500,9 +13496,7 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \t  && truth_value_p (TREE_CODE (arg0))\n \t  && truth_value_p (TREE_CODE (arg1)))\n \t{\n-\t  location_t loc0 = EXPR_LOCATION (arg0);\n-\t  if (loc0 == UNKNOWN_LOCATION)\n-\t    loc0 = loc;\n+\t  location_t loc0 = expr_location_or (arg0, loc);\n \t  /* Only perform transformation if ARG0 is easily inverted.  */\n \t  tem = fold_truth_not_expr (loc0, arg0);\n \t  if (tem)\n@@ -13516,9 +13510,7 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \t  && truth_value_p (TREE_CODE (arg0))\n \t  && truth_value_p (TREE_CODE (op2)))\n \t{\n-\t  location_t loc0 = EXPR_LOCATION (arg0);\n-\t  if (loc0 == UNKNOWN_LOCATION)\n-\t    loc0 = loc;\n+\t  location_t loc0 = expr_location_or (arg0, loc);\n \t  /* Only perform transformation if ARG0 is easily inverted.  */\n \t  tem = fold_truth_not_expr (loc0, arg0);\n \t  if (tem)"}]}