{"sha": "60a8fb5ea9912d3e4efa5cf8393cc23b81034f76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBhOGZiNWVhOTkxMmQzZTRlZmE1Y2Y4MzkzY2MyM2I4MTAzNGY3Ng==", "commit": {"author": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-02-13T06:21:35Z"}, "committer": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-02-13T06:21:35Z"}, "message": "re PR tree-optimization/14303 ([tree-ssa] gcc.c-torture/execute/20020720-1.c is not fully folded)\n\n2005-02-13  James A. Morrison  <phython@gcc.gnu.org>\n\n       PR tree-optimization/14303\n       PR tree-optimization/15784\n       * fold-const.c (fold): Fold ABS_EXPR<x> >= 0 to true, when possible.\n       Fold ABS_EXPR<x> < 0 to false.  Fold ABS_EXPR<x> == 0 to x == 0 and\n       ABS_EXPR<x> != 0 to x != 0.\n\nFrom-SVN: r94977", "tree": {"sha": "2622ef70f3a694db5d17729fe9d5cd5337959e9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2622ef70f3a694db5d17729fe9d5cd5337959e9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60a8fb5ea9912d3e4efa5cf8393cc23b81034f76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60a8fb5ea9912d3e4efa5cf8393cc23b81034f76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60a8fb5ea9912d3e4efa5cf8393cc23b81034f76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60a8fb5ea9912d3e4efa5cf8393cc23b81034f76/comments", "author": null, "committer": null, "parents": [{"sha": "ea24f64b78f5f045cb08101978688c5c59d71621", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea24f64b78f5f045cb08101978688c5c59d71621", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea24f64b78f5f045cb08101978688c5c59d71621"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "35f46de3d7cd9fc3094db26382f98e7614852fc9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60a8fb5ea9912d3e4efa5cf8393cc23b81034f76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60a8fb5ea9912d3e4efa5cf8393cc23b81034f76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60a8fb5ea9912d3e4efa5cf8393cc23b81034f76", "patch": "@@ -1,3 +1,11 @@\n+2005-02-13  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\tPR tree-optimization/14303\n+\tPR tree-optimization/15784\n+\t* fold-const.c (fold): Fold ABS_EXPR<x> >= 0 to true, when possible.\n+\tFold ABS_EXPR<x> < 0 to false.  Fold ABS_EXPR<x> == 0 to x == 0 and\n+\tABS_EXPR<x> != 0 to x != 0.\n+\n 2005-02-12  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* c-tree.h, combine.c, expmed.c, flow.c, libgcc2.c,"}, {"sha": "601f023ce9ad301ebf7be08b581ba907bc6cc64e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60a8fb5ea9912d3e4efa5cf8393cc23b81034f76/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60a8fb5ea9912d3e4efa5cf8393cc23b81034f76/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=60a8fb5ea9912d3e4efa5cf8393cc23b81034f76", "patch": "@@ -8973,6 +8973,29 @@ fold (tree expr)\n \t\t\t     build2 (LE_EXPR, type,\n \t\t\t\t     TREE_OPERAND (arg0, 0), arg1)));\n \n+      /* Convert ABS_EXPR<x> >= 0 to true.  */\n+      else if (code == GE_EXPR\n+\t       && tree_expr_nonnegative_p (arg0)\n+\t       && ! TREE_SIDE_EFFECTS (arg0)\n+\t       && (integer_zerop (arg1)\n+\t\t   || (! HONOR_NANS (TYPE_MODE (TREE_TYPE (arg0)))\n+                       && real_zerop (arg1))))\n+\treturn constant_boolean_node (true, type);\n+\n+      /* Convert ABS_EXPR<x> < 0 to false.  */\n+      else if (code == LT_EXPR\n+\t       && tree_expr_nonnegative_p (arg0)\n+\t       && ! TREE_SIDE_EFFECTS (arg0)\n+\t       && (integer_zerop (arg1) || real_zerop (arg1)))\n+\treturn constant_boolean_node (false, type);\n+\n+      /* Convert ABS_EXPR<x> == 0 or ABS_EXPR<x> != 0 to x == 0 or x != 0.  */\n+      else if ((code == EQ_EXPR || code == NE_EXPR)\n+\t       && TREE_CODE (arg0) == ABS_EXPR\n+\t       && ! TREE_SIDE_EFFECTS (arg0)\n+\t       && (integer_zerop (arg1) || real_zerop (arg1)))\n+\treturn fold (build2 (code, type, TREE_OPERAND (arg0, 0), arg1));\n+\n       /* If this is an EQ or NE comparison with zero and ARG0 is\n \t (1 << foo) & bar, convert it to (bar >> foo) & 1.  Both require\n \t two operations, but the latter can be done in one less insn"}]}