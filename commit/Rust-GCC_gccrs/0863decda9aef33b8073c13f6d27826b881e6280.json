{"sha": "0863decda9aef33b8073c13f6d27826b881e6280", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg2M2RlY2RhOWFlZjMzYjgwNzNjMTNmNmQyNzgyNmI4ODFlNjI4MA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-10-04T02:55:10Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-10-04T02:55:10Z"}, "message": "gimple-ssa-sprintf.c (format_string): Do not hardcode size of target's wchar_t.\n\n        * gimple-ssa-sprintf.c (format_string): Do not hardcode size of\n        target's wchar_t.\n        * tree.c (get_typenode_from_name): Moved from fortran/trans-types.c.\n        * tree.h (get_typenode_from_name): Prototype.\n\n        * trans-types.c (get_typenode_from_name): Moved into gcc/tree.c.\n\nFrom-SVN: r264833", "tree": {"sha": "56b96595c17f69c273072996d93b7f56cdf8b0e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56b96595c17f69c273072996d93b7f56cdf8b0e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0863decda9aef33b8073c13f6d27826b881e6280", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0863decda9aef33b8073c13f6d27826b881e6280", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0863decda9aef33b8073c13f6d27826b881e6280", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0863decda9aef33b8073c13f6d27826b881e6280/comments", "author": null, "committer": null, "parents": [{"sha": "74ac60743f6cb84921477c6526b53fc9250ec4c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74ac60743f6cb84921477c6526b53fc9250ec4c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74ac60743f6cb84921477c6526b53fc9250ec4c1"}], "stats": {"total": 102, "additions": 64, "deletions": 38}, "files": [{"sha": "03bc5727c23decaa4b96d144820912bc3b026941", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0863decda9aef33b8073c13f6d27826b881e6280/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0863decda9aef33b8073c13f6d27826b881e6280/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0863decda9aef33b8073c13f6d27826b881e6280", "patch": "@@ -1,3 +1,10 @@\n+2018-10-03  Jeff Law  <law@redhat.com>\n+\n+        * gimple-ssa-sprintf.c (format_string): Do not hardcode size of\n+        target's wchar_t.\n+        * tree.c (get_typenode_from_name): Moved from fortran/trans-types.c.\n+        * tree.h (get_typenode_from_name): Prototype.\n+\n 2018-10-03  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*cmp<X87MODEF:mode>_<SWI24:mode>_i387):"}, {"sha": "521247c2dcc78a13a899dbbe08ffb249c7f25408", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0863decda9aef33b8073c13f6d27826b881e6280/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0863decda9aef33b8073c13f6d27826b881e6280/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0863decda9aef33b8073c13f6d27826b881e6280", "patch": "@@ -1,3 +1,7 @@\n+2018-10-03  Jeff Law  <law@redhat.comg>\n+\n+        * trans-types.c (get_typenode_from_name): Moved into gcc/tree.c.\n+\n 2018-10-01  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/65677"}, {"sha": "1a813eaf4d4f2edd3f14aa857556b8f4947c7832", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0863decda9aef33b8073c13f6d27826b881e6280/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0863decda9aef33b8073c13f6d27826b881e6280/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=0863decda9aef33b8073c13f6d27826b881e6280", "patch": "@@ -218,43 +218,6 @@ get_int_kind_from_node (tree type)\n   return -1;\n }\n \n-/* Return a typenode for the \"standard\" C type with a given name.  */\n-static tree\n-get_typenode_from_name (const char *name)\n-{\n-  if (name == NULL || *name == '\\0')\n-    return NULL_TREE;\n-\n-  if (strcmp (name, \"char\") == 0)\n-    return char_type_node;\n-  if (strcmp (name, \"unsigned char\") == 0)\n-    return unsigned_char_type_node;\n-  if (strcmp (name, \"signed char\") == 0)\n-    return signed_char_type_node;\n-\n-  if (strcmp (name, \"short int\") == 0)\n-    return short_integer_type_node;\n-  if (strcmp (name, \"short unsigned int\") == 0)\n-    return short_unsigned_type_node;\n-\n-  if (strcmp (name, \"int\") == 0)\n-    return integer_type_node;\n-  if (strcmp (name, \"unsigned int\") == 0)\n-    return unsigned_type_node;\n-\n-  if (strcmp (name, \"long int\") == 0)\n-    return long_integer_type_node;\n-  if (strcmp (name, \"long unsigned int\") == 0)\n-    return long_unsigned_type_node;\n-\n-  if (strcmp (name, \"long long int\") == 0)\n-    return long_long_integer_type_node;\n-  if (strcmp (name, \"long long unsigned int\") == 0)\n-    return long_long_unsigned_type_node;\n-\n-  gcc_unreachable ();\n-}\n-\n static int\n get_int_kind_from_name (const char *name)\n {"}, {"sha": "471bfc45eb87514824299ff975d2d464f80e60c4", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0863decda9aef33b8073c13f6d27826b881e6280/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0863decda9aef33b8073c13f6d27826b881e6280/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=0863decda9aef33b8073c13f6d27826b881e6280", "patch": "@@ -2179,7 +2179,19 @@ format_string (const directive &dir, tree arg, vr_values *)\n   fmtresult res;\n \n   /* Compute the range the argument's length can be in.  */\n-  int count_by = dir.specifier == 'S' || dir.modifier == FMT_LEN_l ? 4 : 1;\n+  int count_by = 1;\n+  if (dir.specifier == 'S' || dir.modifier == FMT_LEN_l)\n+    {\n+      /* Get a node for a C type that will be the same size\n+\t as a wchar_t on the target.  */\n+      tree node = get_typenode_from_name (MODIFIED_WCHAR_TYPE);\n+\n+      /* Now that we have a suitable node, get the number of\n+\t bytes it occupies.  */\n+      count_by = int_size_in_bytes (node); \n+      gcc_checking_assert (count_by == 2 || count_by == 4);\n+    }\n+\n   fmtresult slen = get_string_length (arg, count_by);\n   if (slen.range.min == slen.range.max\n       && slen.range.min < HOST_WIDE_INT_MAX)"}, {"sha": "d7dca77d2b2af30aed91ef4c0c8b32b4eb772825", "filename": "gcc/tree.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0863decda9aef33b8073c13f6d27826b881e6280/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0863decda9aef33b8073c13f6d27826b881e6280/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=0863decda9aef33b8073c13f6d27826b881e6280", "patch": "@@ -14408,6 +14408,43 @@ expr_type_first_operand_type_p (tree_code code)\n     }\n }\n \n+/* Return a typenode for the \"standard\" C type with a given name.  */\n+tree\n+get_typenode_from_name (const char *name)\n+{\n+  if (name == NULL || *name == '\\0')\n+    return NULL_TREE;\n+\n+  if (strcmp (name, \"char\") == 0)\n+    return char_type_node;\n+  if (strcmp (name, \"unsigned char\") == 0)\n+    return unsigned_char_type_node;\n+  if (strcmp (name, \"signed char\") == 0)\n+    return signed_char_type_node;\n+\n+  if (strcmp (name, \"short int\") == 0)\n+    return short_integer_type_node;\n+  if (strcmp (name, \"short unsigned int\") == 0)\n+    return short_unsigned_type_node;\n+\n+  if (strcmp (name, \"int\") == 0)\n+    return integer_type_node;\n+  if (strcmp (name, \"unsigned int\") == 0)\n+    return unsigned_type_node;\n+\n+  if (strcmp (name, \"long int\") == 0)\n+    return long_integer_type_node;\n+  if (strcmp (name, \"long unsigned int\") == 0)\n+    return long_unsigned_type_node;\n+\n+  if (strcmp (name, \"long long int\") == 0)\n+    return long_long_integer_type_node;\n+  if (strcmp (name, \"long long unsigned int\") == 0)\n+    return long_long_unsigned_type_node;\n+\n+  gcc_unreachable ();\n+}\n+\n /* List of pointer types used to declare builtins before we have seen their\n    real declaration.\n "}, {"sha": "1e59dd59cf39ea8d487be66c88d4288611ceee63", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0863decda9aef33b8073c13f6d27826b881e6280/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0863decda9aef33b8073c13f6d27826b881e6280/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=0863decda9aef33b8073c13f6d27826b881e6280", "patch": "@@ -4987,6 +4987,9 @@ extern tree get_base_address (tree t);\n    of EXP, an ARRAY_REF or an ARRAY_RANGE_REF.  */\n extern tree array_ref_element_size (tree);\n \n+/* Return a typenode for the \"standard\" C type with a given name.  */\n+extern tree get_typenode_from_name (const char *);\n+\n /* Return a tree representing the upper bound of the array mentioned in\n    EXP, an ARRAY_REF or an ARRAY_RANGE_REF.  */\n extern tree array_ref_up_bound (tree);"}]}