{"sha": "af995bf0190c406341949d0e6a24636ac906b1b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY5OTViZjAxOTBjNDA2MzQxOTQ5ZDBlNmEyNDYzNmFjOTA2YjFiMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2017-01-16T23:18:30Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-01-16T23:18:30Z"}, "message": "i386.h (LIMIT_RELOAD_CLASS): Remove.\n\n\t* config/i386/i386.h (LIMIT_RELOAD_CLASS): Remove.\n\nFrom-SVN: r244508", "tree": {"sha": "cf861e85d6074edfbff9f1c1cf59682282e566a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf861e85d6074edfbff9f1c1cf59682282e566a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af995bf0190c406341949d0e6a24636ac906b1b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af995bf0190c406341949d0e6a24636ac906b1b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af995bf0190c406341949d0e6a24636ac906b1b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af995bf0190c406341949d0e6a24636ac906b1b1/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "98e92fb2104bcee038c0de4a116424b093001ae6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98e92fb2104bcee038c0de4a116424b093001ae6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98e92fb2104bcee038c0de4a116424b093001ae6"}], "stats": {"total": 28, "additions": 4, "deletions": 24}, "files": [{"sha": "265e3a55a8a40f6b29551ce9dd7ea73fb393b5bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af995bf0190c406341949d0e6a24636ac906b1b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af995bf0190c406341949d0e6a24636ac906b1b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af995bf0190c406341949d0e6a24636ac906b1b1", "patch": "@@ -1,3 +1,7 @@\n+2017-01-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.h (LIMIT_RELOAD_CLASS): Remove.\n+\n 2017-01-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/79089"}, {"sha": "df3a134fdebc0b97184bbe14878884c59e815380", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af995bf0190c406341949d0e6a24636ac906b1b1/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af995bf0190c406341949d0e6a24636ac906b1b1/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=af995bf0190c406341949d0e6a24636ac906b1b1", "patch": "@@ -1559,30 +1559,6 @@ enum reg_class\n #define INDEX_REG_CLASS INDEX_REGS\n #define BASE_REG_CLASS GENERAL_REGS\n \n-/* Place additional restrictions on the register class to use when it\n-   is necessary to be able to hold a value of mode MODE in a reload\n-   register for which class CLASS would ordinarily be used.\n-\n-   We avoid classes containing registers from multiple units due to\n-   the limitation in ix86_secondary_memory_needed.  We limit these\n-   classes to their \"natural mode\" single unit register class, depending\n-   on the unit availability.\n-\n-   Please note that reg_class_subset_p is not commutative, so these\n-   conditions mean \"... if (CLASS) includes ALL registers from the\n-   register set.\"  */\n-\n-#define LIMIT_RELOAD_CLASS(MODE, CLASS)\t\t\t\t\t\\\n-  (((MODE) == QImode && !TARGET_64BIT\t\t\t\t\t\\\n-    && reg_class_subset_p (Q_REGS, (CLASS))) ? Q_REGS\t\t\t\\\n-   : (((MODE) == SImode || (MODE) == DImode)\t\t\t\t\\\n-      && reg_class_subset_p (GENERAL_REGS, (CLASS))) ? GENERAL_REGS\t\\\n-   : (SSE_FLOAT_MODE_P (MODE) && TARGET_SSE_MATH\t\t\t\\\n-      && reg_class_subset_p (SSE_REGS, (CLASS))) ? SSE_REGS\t\t\\\n-   : (X87_FLOAT_MODE_P (MODE)\t\t\t\t\t\t\\\n-      && reg_class_subset_p (FLOAT_REGS, (CLASS))) ? FLOAT_REGS\t\t\\\n-   : (CLASS))\n-\n /* If we are copying between general and FP registers, we need a memory\n    location. The same is true for SSE and MMX registers.  */\n #define SECONDARY_MEMORY_NEEDED(CLASS1, CLASS2, MODE) \\"}]}