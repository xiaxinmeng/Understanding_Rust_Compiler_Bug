{"sha": "7d988344f74681b0fa97ada77e8390c8e4d69147", "node_id": "C_kwDOANBUbNoAKDdkOTg4MzQ0Zjc0NjgxYjBmYTk3YWRhNzdlODM5MGM4ZTRkNjkxNDc", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-20T16:19:32Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-22T09:49:29Z"}, "message": "Cleanup interfaces for associated impl mappings\n\nThis changes the lookups to return boolean if they are found rather than\ndefault UNKNOWN_HIRID which is more ambigious.", "tree": {"sha": "afbe7c8869e6f5bf98dcaf2d6e1cdcc883025ec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afbe7c8869e6f5bf98dcaf2d6e1cdcc883025ec5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d988344f74681b0fa97ada77e8390c8e4d69147", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d988344f74681b0fa97ada77e8390c8e4d69147", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d988344f74681b0fa97ada77e8390c8e4d69147", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d988344f74681b0fa97ada77e8390c8e4d69147/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9b10b3d2992eeb360527c103f1bf9a455f2a593", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9b10b3d2992eeb360527c103f1bf9a455f2a593", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9b10b3d2992eeb360527c103f1bf9a455f2a593"}], "stats": {"total": 51, "additions": 30, "deletions": 21}, "files": [{"sha": "9e8236c3893103d140a4de8a1d62ced8a2477ddc", "filename": "gcc/rust/backend/rust-compile-resolve-path.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d988344f74681b0fa97ada77e8390c8e4d69147/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d988344f74681b0fa97ada77e8390c8e4d69147/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc?ref=7d988344f74681b0fa97ada77e8390c8e4d69147", "patch": "@@ -197,11 +197,11 @@ ResolvePathRef::query_compile (HirId ref, TyTy::BaseType *lookup,\n \n \t      Analysis::NodeMapping trait_mappings\n \t\t= trait_item_ref->get_parent_trait_mappings ();\n-\t      auto associated_impl_id\n-\t\t= ctx->get_tyctx ()->lookup_associated_impl_mapping_for_self (\n-\t\t  trait_mappings.get_hirid (), receiver);\n \n-\t      rust_assert (associated_impl_id != UNKNOWN_HIRID);\n+\t      HirId associated_impl_id;\n+\t      ok = ctx->get_tyctx ()->lookup_associated_impl_mapping_for_self (\n+\t\ttrait_mappings.get_hirid (), receiver, &associated_impl_id);\n+\t      rust_assert (ok);\n \n \t      Resolver::AssociatedImplTrait *associated = nullptr;\n \t      bool found_associated_trait_impl"}, {"sha": "d3dc4c997c08ad4d59bef8ea9c5290eb0e9e5d49", "filename": "gcc/rust/typecheck/rust-hir-type-check.h", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d988344f74681b0fa97ada77e8390c8e4d69147/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d988344f74681b0fa97ada77e8390c8e4d69147/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h?ref=7d988344f74681b0fa97ada77e8390c8e4d69147", "patch": "@@ -144,16 +144,24 @@ class TypeCheckContext\n \n   void clear_associated_type_mapping (HirId id)\n   {\n-    associated_type_mappings[id] = UNKNOWN_HIRID;\n+    auto it = associated_type_mappings.find (id);\n+    rust_assert (it != associated_type_mappings.end ());\n+    associated_type_mappings.erase (it);\n   }\n \n-  HirId lookup_associated_type_mapping (HirId id, HirId default_value)\n+  // lookup any associated type mappings, the out parameter of mapping is\n+  // allowed to be nullptr which allows this interface to do a simple does exist\n+  // check\n+  bool lookup_associated_type_mapping (HirId id, HirId *mapping)\n   {\n     auto it = associated_type_mappings.find (id);\n     if (it == associated_type_mappings.end ())\n-      return default_value;\n+      return false;\n+\n+    if (mapping != nullptr)\n+      *mapping = it->second;\n \n-    return it->second;\n+    return true;\n   }\n \n   void insert_associated_impl_mapping (HirId trait_id,\n@@ -169,19 +177,23 @@ class TypeCheckContext\n     associated_traits_to_impls[trait_id].push_back ({impl_type, impl_id});\n   }\n \n-  HirId lookup_associated_impl_mapping_for_self (HirId trait_id,\n-\t\t\t\t\t\t const TyTy::BaseType *self)\n+  bool lookup_associated_impl_mapping_for_self (HirId trait_id,\n+\t\t\t\t\t\tconst TyTy::BaseType *self,\n+\t\t\t\t\t\tHirId *mapping)\n   {\n     auto it = associated_traits_to_impls.find (trait_id);\n     if (it == associated_traits_to_impls.end ())\n-      return UNKNOWN_HIRID;\n+      return false;\n \n     for (auto &item : it->second)\n       {\n \tif (item.first->can_eq (self, false))\n-\t  return item.second;\n+\t  {\n+\t    *mapping = item.second;\n+\t    return true;\n+\t  }\n       }\n-    return UNKNOWN_HIRID;\n+    return false;\n   }\n \n   void insert_autoderef_mappings (HirId id,"}, {"sha": "232799b6a081fc27d50cb04f9a9bbd5c591b3ca3", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d988344f74681b0fa97ada77e8390c8e4d69147/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d988344f74681b0fa97ada77e8390c8e4d69147/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=7d988344f74681b0fa97ada77e8390c8e4d69147", "patch": "@@ -2198,22 +2198,19 @@ bool\n PlaceholderType::can_resolve () const\n {\n   auto context = Resolver::TypeCheckContext::get ();\n-  HirId val\n-    = context->lookup_associated_type_mapping (get_ty_ref (), UNKNOWN_HIRID);\n-  return val != UNKNOWN_HIRID;\n+  return context->lookup_associated_type_mapping (get_ty_ref (), nullptr);\n }\n \n BaseType *\n PlaceholderType::resolve () const\n {\n   auto context = Resolver::TypeCheckContext::get ();\n \n-  rust_assert (can_resolve ());\n-  HirId val\n-    = context->lookup_associated_type_mapping (get_ty_ref (), UNKNOWN_HIRID);\n-  rust_assert (val != UNKNOWN_HIRID);\n+  HirId mapping;\n+  bool ok = context->lookup_associated_type_mapping (get_ty_ref (), &mapping);\n+  rust_assert (ok);\n \n-  return TyVar (val).get_tyty ();\n+  return TyVar (mapping).get_tyty ();\n }\n \n bool"}]}