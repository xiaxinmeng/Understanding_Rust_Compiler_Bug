{"sha": "30da09694b77a86b0790f9480cf934120c5258d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBkYTA5Njk0Yjc3YTg2YjA3OTBmOTQ4MGNmOTM0MTIwYzUyNThkMw==", "commit": {"author": {"name": "Aaron M. Renn", "email": "arenn@urbanophile.com", "date": "2003-04-07T12:25:08Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-04-07T12:25:08Z"}, "message": "2003-04-07  Aaron M. Renn (arenn@urbanophile.com)\n\n\t* java/io/ObjectStreamException\n\t* java/io/FileFilter\n\t* java/io/FilenameFilter\n\t* java/io/ObjectInput\n\t* java/io/ObjectOutput\n\t* java/io/ObjectStreamConstants\n\tMinor doc fixes, format fixes, spelling corrections, etc.\n\t* java/io/DataInput\n\tCorrected code samples in Javadocs to match reality\n\t* java/io/DataOutput\n\t* java/io/ObjectInputValidation\n\tMajor documentation fixes - all Javadocs re-written or updated\n\nFrom-SVN: r65329", "tree": {"sha": "ec6278305260bb163e480ed061dd389a1ff6db28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec6278305260bb163e480ed061dd389a1ff6db28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30da09694b77a86b0790f9480cf934120c5258d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30da09694b77a86b0790f9480cf934120c5258d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30da09694b77a86b0790f9480cf934120c5258d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30da09694b77a86b0790f9480cf934120c5258d3/comments", "author": {"login": "arenn", "id": 382572, "node_id": "MDQ6VXNlcjM4MjU3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/382572?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arenn", "html_url": "https://github.com/arenn", "followers_url": "https://api.github.com/users/arenn/followers", "following_url": "https://api.github.com/users/arenn/following{/other_user}", "gists_url": "https://api.github.com/users/arenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/arenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arenn/subscriptions", "organizations_url": "https://api.github.com/users/arenn/orgs", "repos_url": "https://api.github.com/users/arenn/repos", "events_url": "https://api.github.com/users/arenn/events{/privacy}", "received_events_url": "https://api.github.com/users/arenn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d5019ba399334c5064315c9d25d1e4e7bed83b77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5019ba399334c5064315c9d25d1e4e7bed83b77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5019ba399334c5064315c9d25d1e4e7bed83b77"}], "stats": {"total": 329, "additions": 256, "deletions": 73}, "files": [{"sha": "7ae2dd78245a0a832dad9c132ddb0b6882bd0bdd", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30da09694b77a86b0790f9480cf934120c5258d3/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30da09694b77a86b0790f9480cf934120c5258d3/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=30da09694b77a86b0790f9480cf934120c5258d3", "patch": "@@ -1,3 +1,18 @@\n+2003-04-07  Aaron M. Renn (arenn@urbanophile.com)\n+\n+\t* java/io/ObjectStreamException\n+\t* java/io/FileFilter\n+\t* java/io/FilenameFilter\n+\t* java/io/ObjectInput\n+\t* java/io/ObjectOutput\n+\t* java/io/ObjectStreamConstants\n+\tMinor doc fixes, format fixes, spelling corrections, etc.\n+\t* java/io/DataInput\n+\tCorrected code samples in Javadocs to match reality\n+\t* java/io/DataOutput\n+\t* java/io/ObjectInputValidation\n+\tMajor documentation fixes - all Javadocs re-written or updated\n+\n 2003-04-06  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/URLConnection.java:"}, {"sha": "95f5a3ca352a91c5f61aaf18c8d5dff8aa94143a", "filename": "libjava/java/io/DataInput.java", "status": "modified", "additions": 37, "deletions": 26, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30da09694b77a86b0790f9480cf934120c5258d3/libjava%2Fjava%2Fio%2FDataInput.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30da09694b77a86b0790f9480cf934120c5258d3/libjava%2Fjava%2Fio%2FDataInput.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FDataInput.java?ref=30da09694b77a86b0790f9480cf934120c5258d3", "patch": "@@ -84,7 +84,7 @@\n    * @exception EOFException If end of file is reached before reading the byte\n    * @exception IOException If any other error occurs\n    *\n-   * @see DataOutput\n+   * @see DataOutput#writeBoolean\n    */\n   byte readByte() throws EOFException, IOException;\n \n@@ -94,15 +94,15 @@\n    * <p>\n    * This method can read an unsigned byte written by an object \n    * implementing the\n-   * <code>writeUnsignedByte()</code> method in the <code>DataOutput</code>\n+   * <code>writeByte()</code> method in the <code>DataOutput</code>\n    * interface.\n    *\n    * @return The unsigned bytes value read as a Java <code>int</code>.\n    *\n    * @exception EOFException If end of file is reached before reading the value\n    * @exception IOException If any other error occurs\n    *\n-   * @see DataOutput\n+   * @see DataOutput#writeByte\n    */\n   int readUnsignedByte() throws EOFException, IOException;\n \n@@ -128,7 +128,7 @@\n    * @exception EOFException If end of file is reached before reading the char\n    * @exception IOException If any other error occurs\n    *\n-   * @see DataOutput\n+   * @see DataOutput#writeChar\n    */\n   char readChar() throws EOFException, IOException;\n \n@@ -143,7 +143,7 @@\n    * first and second byte read from the stream respectively, they will be\n    * transformed to a <code>short</code> in the following manner:\n    * <p>\n-   * <code>(short)((byte1 << 8) + byte2)</code>\n+   * <code>(short)((byte1 << 8) + (byte2 & 0xFF))</code>\n    * <p>\n    * The value returned is in the range of -32768 to 32767.\n    * <p>\n@@ -157,7 +157,7 @@\n    * @exception EOFException If end of file is reached before reading the value\n    * @exception IOException If any other error occurs\n    *\n-   * @see DataOutput\n+   * @see DataOutput#writeShort\n    */\n   short readShort() throws EOFException, IOException;\n \n@@ -172,12 +172,12 @@\n    * first and second byte read from the stream respectively, they will be\n    * transformed to an <code>int</code> in the following manner:\n    * <p>\n-   * <code>(int)((byte1 << 8) + byte2)</code>\n+   * <code>(int)(((byte1 0xFF) << 8) + (byte2 & 0xFF))</code>\n    * <p>\n    * The value returned is in the range of 0 to 65535.\n    * <p>\n    * This method can read an unsigned short written by an object implementing\n-   * the <code>writeUnsignedShort()</code> method in the \n+   * the <code>writeShort()</code> method in the \n    * <code>DataOutput</code>\n    * interface.\n    *\n@@ -186,6 +186,8 @@\n    * @exception EOFException If end of file is reached before reading \n    * the value\n    * @exception IOException If any other error occurs\n+   *\n+   * @see DataOutput#writeShort\n    */\n   int readUnsignedShort() throws EOFException, IOException;\n \n@@ -200,7 +202,8 @@\n    * the first four bytes read from the stream, they will be\n    * transformed to an <code>int</code> in the following manner:\n    * <p>\n-   * <code>(int)((byte1 << 24) + (byte2 << 16) + (byte3 << 8) + byte4))</code>\n+   * <code>(int)(((byte1 & 0xFF) << 24) + ((byte2 & 0xFF) << 16) + \n+   * ((byte3 & 0xFF)<< 8) + (byte4 & 0xFF)))</code>\n    * <p>\n    * The value returned is in the range of -2147483648 to 2147483647.\n    * <p>\n@@ -213,7 +216,7 @@\n    * @exception EOFException If end of file is reached before reading the int\n    * @exception IOException If any other error occurs\n    *\n-   * @see DataOutput\n+   * @see DataOutput#writeInt\n    */\n   int readInt() throws EOFException, IOException;\n \n@@ -228,8 +231,10 @@\n    * the first eight bytes read from the stream, they will be\n    * transformed to an <code>long</code> in the following manner:\n    * <p>\n-   * <code>(long)((byte1 << 56) + (byte2 << 48) + (byte3 << 40) + \n-   * (byte4 << 32) + (byte5 << 24) + (byte6 << 16) + (byte7 << 8) + byte9))\n+   * <code>(long)(((byte1 & 0xFF) << 56) + ((byte2 & 0xFF) << 48) + \n+   * ((byte3 & 0xFF) << 40) + ((byte4 & 0xFF) << 32) + \n+   * ((byte5 & 0xFF) << 24) + ((byte6 & 0xFF) << 16) + \n+   * ((byte7 & 0xFF) << 8) + (byte9 & 0xFF)))\n    * </code>\n    * <p>\n    * The value returned is in the range of -9223372036854775808 to\n@@ -244,7 +249,7 @@\n    * @exception EOFException If end of file is reached before reading the long\n    * @exception IOException If any other error occurs\n    *\n-   * @see DataOutput\n+   * @see DataOutput#writeLong\n    */\n   long readLong() throws EOFException, IOException;\n \n@@ -267,8 +272,8 @@\n    * float\n    * @exception IOException If any other error occurs\n    *\n-   * @see java.lang.Float\n-   * @see DataOutput\n+   * @see DataOutput#writeFloat\n+   * @see java.lang.Float#intBitsToFloat\n    */\n   float readFloat() throws EOFException, IOException;\n \n@@ -290,8 +295,8 @@\n    * double\n    * @exception IOException If any other error occurs\n    *\n-   * @see java.lang.Double\n-   * @see DataOutput\n+   * @see DataOutput#writeDouble\n+   * @see java.lang.Double#longBitsToDouble\n    */\n   double readDouble() throws EOFException, IOException;\n \n@@ -309,6 +314,7 @@\n    * A line terminator is a byte sequence consisting of either \n    * <code>\\r</code>, <code>\\n</code> or <code>\\r\\n</code>.  These termination\n    * charaters are discarded and are not returned as part of the string.\n+   * A line is also terminated by an end of file condition.\n    * <p>\n    * This method can read data that was written by an object implementing the\n    * <code>writeLine()</code> method in <code>DataOutput</code>.\n@@ -317,7 +323,7 @@\n    *\n    * @exception IOException If an error occurs\n    *\n-   * @see DataOutput\n+   * @see DataOutput#writeLine\n    */\n   String readLine() throws IOException;\n \n@@ -390,15 +396,17 @@\n    * @exception UTFDataFormatException If the data is not in UTF-8 format\n    * @exception IOException If any other error occurs\n    *\n-   * @see DataOutput\n+   * @see DataOutput#writeUTF\n    */\n   String readUTF() throws EOFException, UTFDataFormatException, IOException;\n \n   /**\n    * This method reads raw bytes into the passed array until the array is\n    * full.  Note that this method blocks until the data is available and\n    * throws an exception if there is not enough data left in the stream to\n-   * fill the buffer\n+   * fill the buffer.  Note also that zero length buffers are permitted.\n+   * In this case, the method will return immediately without reading any\n+   * bytes from the stream.\n    *\n    * @param buf The buffer into which to read the data\n    *\n@@ -414,8 +422,10 @@\n    * <code>offset</code> bytes into the buffer.  The number of bytes read \n    * will be\n    * exactly <code>len</code>.  Note that this method blocks until the data is \n-   * available and * throws an exception if there is not enough data left in \n-   * the stream to read <code>len</code> bytes.\n+   * available and throws an exception if there is not enough data left in \n+   * the stream to read <code>len</code> bytes.  Note also that zero length\n+   * buffers are permitted.  In this case, the method will return immediately\n+   * without reading any bytes from the stream.\n    *\n    * @param buf The buffer into which to read the data\n    * @param offset The offset into the buffer to start storing data\n@@ -430,17 +440,18 @@ void readFully(byte[] buf, int offset, int len)\n \n   /**\n    * This method skips and discards the specified number of bytes in an\n-   * input stream\n+   * input stream.  Note that this method may skip less than the requested\n+   * number of bytes.  The actual number of bytes skipped is returned.\n    *\n-   * @param num_bytes The number of bytes to skip\n+   * @param numBytes The number of bytes to skip\n    *\n    * @return The number of bytes actually skipped, which will always be\n-   *         <code>num_bytes</code>\n+   *         <code>numBytes</code>\n    *\n    * @exception EOFException If end of file is reached before all bytes can be\n    *                         skipped\n    * @exception IOException If any other error occurs\n    */\n-  int skipBytes(int n) throws EOFException, IOException;\n+  int skipBytes(int numBytes) throws EOFException, IOException;\n \n } // interface DataInput"}, {"sha": "462889d646d8280c6c05a298433f3690f0f74615", "filename": "libjava/java/io/DataOutput.java", "status": "modified", "additions": 155, "deletions": 20, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30da09694b77a86b0790f9480cf934120c5258d3/libjava%2Fjava%2Fio%2FDataOutput.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30da09694b77a86b0790f9480cf934120c5258d3/libjava%2Fjava%2Fio%2FDataOutput.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FDataOutput.java?ref=30da09694b77a86b0790f9480cf934120c5258d3", "patch": "@@ -1,5 +1,5 @@\n /* DataOutput.java -- Interface for writing data from a stream\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2001, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -45,119 +45,254 @@\n \n /**\n  * This interface is implemented by classes that can wrte data to streams \n- * from Java primitive types.\n+ * from Java primitive types.  This data can subsequently be read back\n+ * by classes implementing the <code>DataInput</code> interface. \n  *\n  * @author Aaron M. Renn (arenn@urbanophile.com)\n  * @author Tom Tromey <tromey@cygnus.com>\n+ *\n+ * @see DataInput\n  */\n public interface DataOutput\n {\n-\n   /**\n-   * This method writes a Java boolean value to an output stream\n+   * This method writes a Java boolean value to an output stream.  If\n+   * <code>value</code> is <code>true</code>, a byte with the value of\n+   * 1 will be written, otherwise a byte with the value of 0 will be \n+   * written.\n+   *\n+   * The value written can be read using the <code>readBoolean</code>\n+   * method in <code>DataInput</code>.\n    *\n    * @param value The boolean value to write\n    *\n    * @exception IOException If an error occurs\n+   *\n+   * @see DataInput#readBoolean\n    */\n   void writeBoolean(boolean value) throws IOException;\n \n   /**\n-   * This method writes a Java byte value to an output stream\n+   * This method writes a Java byte value to an output stream.  The\n+   * byte to be written will be in the lowest 8 bits of the \n+   * <code>int</code> value passed.\n+   *\n+   * The value written can be read using the <code>readByte</code> or\n+   * <code>readUnsignedByte</code> methods in <code>DataInput</code>.\n    *\n    * @param value The int value to write\n    *\n    * @exception IOException If an error occurs\n+   *\n+   * @see DataInput#readByte\n+   * @see DataInput#readUnsignedByte\n    */\n   void writeByte(int value) throws IOException;\n \n   /**\n-   * This method writes a Java char value to an output stream\n+   * This method writes a Java char value to an output stream.  The\n+   * char to be written will be in the lowest 16 bits of the <code>int</code>\n+   * value passed.  These bytes will be written \"big endian\".  That is,\n+   * with the high byte written first in the following manner:\n+   * <p>\n+   * <code>byte0 = (byte)((value & 0xFF00) >> 8);<br>\n+   * byte1 = (byte)(value & 0x00FF);</code>\n+   * <p>\n+   *\n+   * The value written can be read using the <code>readChar</code>\n+   * method in <code>DataInput</code>.\n    *\n    * @param value The char value to write\n    *\n    * @exception IOException If an error occurs\n+   *\n+   * @see DataInput#readChar\n    */\n   void writeChar(int value) throws IOException;\n \n   /**\n-   * This method writes a Java int value to an output stream as a 16 bit value\n+   * This method writes a Java char value to an output stream.  The\n+   * char to be written will be in the lowest 16 bits of the <code>int</code>\n+   * value passed.  These bytes will be written \"big endian\".  That is,\n+   * with the high byte written first in the following manner:\n+   * <p>\n+   * <code>byte0 = (byte)((value & 0xFF00) >> 8);<br>\n+   * byte1 = (byte)(value & 0x00FF);</code>\n+   * <p>\n+   *\n+   * The value written can be read using the <code>readShort</code> and\n+   * <code>readUnsignedShort</code> methods in <code>DataInput</code>.\n    *\n    * @param value The int value to write as a 16-bit value\n    *\n    * @exception IOException If an error occurs\n+   *\n+   * @see DataInput#readShort\n+   * @see DataInput#readUnsignedShort\n    */\n   void writeShort(int value) throws IOException;\n \n   /**\n-   * This method writes a Java int value to an output stream\n+   * This method writes a Java int value to an output stream.  The 4 bytes\n+   * of the passed value will be written \"big endian\".  That is, with\n+   * the high byte written first in the following manner:\n+   * <p>\n+   * <code>byte0 = (byte)((value & 0xFF000000) >> 24);<br>\n+   * byte1 = (byte)((value & 0x00FF0000) >> 16);<br>\n+   * byte2 = (byte)((value & 0x0000FF00) >> 8);<br>\n+   * byte3 = (byte)(value & 0x000000FF);</code>\n+   * <p>\n+   *\n+   * The value written can be read using the <code>readInt</code>\n+   * method in <code>DataInput</code>.\n    *\n    * @param value The int value to write\n    *\n    * @exception IOException If an error occurs\n+   *\n+   * @see DataInput#readInt\n    */\n   void writeInt(int value) throws IOException;\n \n   /**\n-   * This method writes a Java long value to an output stream\n+   * This method writes a Java long value to an output stream.  The 8 bytes\n+   * of the passed value will be written \"big endian\".  That is, with\n+   * the high byte written first in the following manner:\n+   * <p>\n+   * <code>byte0 = (byte)((value & 0xFF00000000000000L) >> 56);<br>\n+   * byte1 = (byte)((value & 0x00FF000000000000L) >> 48);<br>\n+   * byte2 = (byte)((value & 0x0000FF0000000000L) >> 40);<br>\n+   * byte3 = (byte)((value & 0x000000FF00000000L) >> 32);<br>\n+   * byte4 = (byte)((value & 0x00000000FF000000L) >> 24);<br>\n+   * byte5 = (byte)((value & 0x0000000000FF0000L) >> 16);<br>\n+   * byte6 = (byte)((value & 0x000000000000FF00L) >> 8);<br>\n+   * byte7 = (byte)(value & 0x00000000000000FFL);</code>\n+   * <p>\n+   *\n+   * The value written can be read using the <code>readLong</code>\n+   * method in <code>DataInput</code>.\n    *\n    * @param value The long value to write\n    *\n    * @exception IOException If an error occurs\n+   *\n+   * @see DataInput#readLong\n    */\n   void writeLong(long value) throws IOException;\n \n   /**\n-   * This method writes a Java float value to an output stream\n+   * This method writes a Java <code>float</code> value to the stream.  This\n+   * value is written by first calling the method\n+   * <code>Float.floatToIntBits</code>\n+   * to retrieve an <code>int</code> representing the floating point number,\n+   * then writing this <code>int</code> value to the stream exactly the same\n+   * as the <code>writeInt()</code> method does.\n+   *\n+   * The value written can be read using the <code>readFloat</code>\n+   * method in <code>DataInput</code>.\n    *\n    * @param value The float value to write\n    *\n    * @exception IOException If an error occurs\n+   *\n+   * @see writeInt\n+   * @see DataInput#readFloat\n+   * @see Float#floatToIntBits\n    */\n   void writeFloat(float value) throws IOException;\n \n   /**\n-   * This method writes a Java double value to an output stream\n+   * This method writes a Java <code>double</code> value to the stream.  This\n+   * value is written by first calling the method\n+   * <code>Double.doubleToLongBits</code>\n+   * to retrieve an <code>long</code> representing the floating point number,\n+   * then writing this <code>long</code> value to the stream exactly the same\n+   * as the <code>writeLong()</code> method does.\n+   *\n+   * The value written can be read using the <code>readDouble</code>\n+   * method in <code>DataInput</code>.\n    *\n    * @param value The double value to write\n    *\n    * @exception IOException If any other error occurs\n+   *\n+   * @see writeLong\n+   * @see DataInput#readDouble\n+   * @see Double#doubleToLongBits\n    */\n   void writeDouble(double value) throws IOException;\n \n   /**\n-   * This method writes a String to an output stream as an array of bytes\n+   * This method writes all the bytes in a <code>String</code> out to the\n+   * stream.  One byte is written for each character in the\n+   * <code>String</code>.\n+   * The high eight bits of each character are discarded, thus this\n+   * method is inappropriate for completely representing Unicode characters.\n    *\n-   * @param value The String to write\n+   * @param value The <code>String</code> to write\n    *\n    * @exception IOException If an error occurs\n    */\n   void writeBytes(String value) throws IOException;\n \n   /**\n-   * This method writes a String to an output stream as an array of char's\n+   * This method writes all the bytes of a <code>String</code> to an \n+   * output stream as an array of <code>char</code>'s. Each character\n+   * is written using the method specified in the <code>writeChar</code>\n+   * method. \n    *\n    * @param value The String to write\n    *\n    * @exception IOException If an error occurs\n+   *\n+   * @see writeChar\n    */\n   void writeChars(String value) throws IOException;\n \n   /**\n-   * This method writes a String to an output stream encoded in\n-   * UTF-8 format.\n+  * This method writes a Java <code>String</code> to the stream in a modified\n+   * UTF-8 format.  First, two bytes are written to the stream indicating the\n+   * number of bytes to follow.  This is written in the form of a Java\n+   * <code>short</code> value in the same manner used by the \n+   * <code>writeShort</code> method.  Note that this is the number of \n+   * bytes in the\n+   * encoded <code>String</code> not the <code>String</code> length.  Next\n+   * come the encoded characters.  Each character in the <code>String</code>\n+   * is encoded as either one, two or three bytes.  For characters in the\n+   * range of <code>\\u0001</code> to <code>\\u007F</code>, one byte is used.  \n+   * The character\n+   * value goes into bits 0-7 and bit eight is 0.  For characters in the range\n+   * of <code>\\u0080</code> to <code>\\u007FF</code>, two bytes are used.  Bits\n+   * 6-10 of the character value are encoded bits 0-4 of the first byte, with\n+   * the high bytes having a value of \"110\".  Bits 0-5 of the character value\n+   * are stored in bits 0-5 of the second byte, with the high bits set to\n+   * \"10\".  This type of encoding is also done for the null character\n+   * <code>\\u0000</code>.  This eliminates any C style NUL character values\n+   * in the output.  All remaining characters are stored as three bytes.\n+   * Bits 12-15 of the character value are stored in bits 0-3 of the first\n+   * byte.  The high bits of the first bytes are set to \"1110\".  Bits 6-11\n+   * of the character value are stored in bits 0-5 of the second byte.  The\n+   * high bits of the second byte are set to \"10\".  And bits 0-5 of the\n+   * character value are stored in bits 0-5 of byte three, with the high bits\n+   * of that byte set to \"10\".\n    *\n-   * @param value The String to write\n+   * The value written can be read using the <code>readUTF</code>\n+   * method in <code>DataInput</code>.\n+   *\n+   * @param value The <code>String</code> to write\n    *\n    * @exception IOException If an error occurs\n+   *\n+   * @see DataInput#readUTF\n    */\n   void writeUTF(String value) throws IOException;\n \n   /**\n    * This method writes an 8-bit value (passed into the method as a Java\n-   * int) to an output stream.\n+   * <code>int</code>) to an output stream.  The low 8 bits of the\n+   * passed value are written.\n    *\n-   * @param value The byte to write to the output stream\n+   * @param value The <code>byte</code> to write to the output stream\n    *\n    * @exception IOException If an error occurs\n    */\n@@ -176,7 +311,7 @@\n    * This method writes raw bytes from the passed array <code>buf</code> \n    * starting\n    * <code>offset</code> bytes into the buffer.  The number of bytes \n-   * written will be * exactly <code>len</code>. \n+   * written will be exactly <code>len</code>. \n    *\n    * @param buf The buffer from which to write the data\n    * @param offset The offset into the buffer to start writing data from"}, {"sha": "de6feb1aea8ef1e9785ac03716c18c6542380bd7", "filename": "libjava/java/io/FileFilter.java", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30da09694b77a86b0790f9480cf934120c5258d3/libjava%2Fjava%2Fio%2FFileFilter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30da09694b77a86b0790f9480cf934120c5258d3/libjava%2Fjava%2Fio%2FFileFilter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileFilter.java?ref=30da09694b77a86b0790f9480cf934120c5258d3", "patch": "@@ -1,5 +1,5 @@\n /* FileFilter.java -- Filter a list of pathnames\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998,2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -41,12 +41,14 @@\n /**\n  * This interface has one method which is used for filtering pathnames\n  * returned in a pathname listing.  It is currently used by the \n- * <code>File.listFiles()</code> method.\n+ * <code>File.listFiles(FileFilter)</code> method.\n  * <p>\n  * The method in this interface determines if a particular pathname should\n  * or should not be included in the pathname listing.\n  *\n  * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * \n+ * @see File#listFiles(java.io.FileFilter)\n  */\n public interface FileFilter\n {"}, {"sha": "e3b004d549924f4fa7c346c1c97830384947be9a", "filename": "libjava/java/io/FilenameFilter.java", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30da09694b77a86b0790f9480cf934120c5258d3/libjava%2Fjava%2Fio%2FFilenameFilter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30da09694b77a86b0790f9480cf934120c5258d3/libjava%2Fjava%2Fio%2FFilenameFilter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFilenameFilter.java?ref=30da09694b77a86b0790f9480cf934120c5258d3", "patch": "@@ -1,5 +1,5 @@\n /* FilenameFilter.java -- Filter a list of filenames\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2001, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -46,17 +46,20 @@\n /**\n  * This interface has one method which is used for filtering filenames\n  * returned in a directory listing.  It is currently used by the \n- * <code>File.list()</code> method and by the filename dialog in AWT.\n+ * <code>File.list(FilenameFilter)</code> method and by the filename \n+ * dialog in AWT.\n  * <p>\n  * The method in this interface determines if a particular file should\n  * or should not be included in the file listing.\n  *\n  * @author Aaron M. Renn (arenn@urbanophile.com)\n  * @author Tom Tromey <tromey@cygnus.com>\n+ *\n+ * @see File#listFiles(java.io.FilenameFilter)\n+ * @see java.awt.FileDialog#setFilenameFilter(java.io.FilenameFilter)\n  */\n public interface FilenameFilter\n {\n-\n   /**\n    * This method determines whether or not a given file should be included\n    * in a directory listing."}, {"sha": "44cfb935852583ad1687bf1c4decda28ee9b85a6", "filename": "libjava/java/io/ObjectInput.java", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30da09694b77a86b0790f9480cf934120c5258d3/libjava%2Fjava%2Fio%2FObjectInput.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30da09694b77a86b0790f9480cf934120c5258d3/libjava%2Fjava%2Fio%2FObjectInput.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectInput.java?ref=30da09694b77a86b0790f9480cf934120c5258d3", "patch": "@@ -45,6 +45,8 @@\n   * <code>InputStream</code>\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n+  *\n+  * @see DataInput\n   */\n public interface ObjectInput extends DataInput\n {\n@@ -60,7 +62,8 @@ public interface ObjectInput extends DataInput\n \n   /**\n     * This method reading a byte of data from a stream.  It returns that byte\n-    * as an int.  This method blocks if no data is available to be read.\n+    * as an <code>int</code>.  This method blocks if no data is available \n+    * to be read.\n     * \n     * @return The byte of data read\n     *\n@@ -76,7 +79,7 @@ public interface ObjectInput extends DataInput\n     *\n     * @param buf The byte array to receive the data read\n     *\n-    * @return The actual number fo bytes read or -1 if end of stream\n+    * @return The actual number of bytes read or -1 if end of stream\n     *\n     * @exception IOException If an error occurs\n     */\n@@ -92,25 +95,25 @@ public interface ObjectInput extends DataInput\n     * possible.\n     *\n     * @param buf The byte array to receive the data read\n-    * @param offset The offset into @code{buf} to start storing data\n+    * @param offset The offset into <code>buf</code> to start storing data\n     * @param len The maximum number of bytes to read\n     *\n-    * @return The actual number fo bytes read or -1 if end of stream\n+    * @return The actual number of bytes read or -1 if end of stream\n     *\n     * @exception IOException If an error occurs\n     */\n   public abstract int read(byte[] buf, int offset, int len) throws IOException;\n \n   /**\n     * Reads an object instance and returns it.  If the class for the object\n-    * being read cannot be found, then a ClassNotFoundException will\n-    * be thrown.\n+    * being read cannot be found, then a <code>ClassNotFoundException</code>\n+    * will be thrown.\n     *\n     * @return The object instance that was read\n     *\n     * @exception ClassNotFoundException If a class for the object cannot be \n     * found\n-    * @exception IOException If an error occurs\n+    * @exception IOException If any other error occurs\n     */\n   public abstract Object readObject() \n     throws ClassNotFoundException, IOException;\n@@ -126,7 +129,7 @@ public abstract Object readObject()\n     *\n     * @exception IOException If an error occurs\n     */\n-  public abstract long skip(long num_bytes) throws IOException;\n+  public abstract long skip(long numBytes) throws IOException;\n \n   /**\n     * This method closes the input source"}, {"sha": "af9da5fa32ed129c043ab5ae9ad5bc8052277711", "filename": "libjava/java/io/ObjectInputValidation.java", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30da09694b77a86b0790f9480cf934120c5258d3/libjava%2Fjava%2Fio%2FObjectInputValidation.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30da09694b77a86b0790f9480cf934120c5258d3/libjava%2Fjava%2Fio%2FObjectInputValidation.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectInputValidation.java?ref=30da09694b77a86b0790f9480cf934120c5258d3", "patch": "@@ -39,16 +39,27 @@\n package java.io; \n \n /**\n-  * What does this interface really do?\n+  * This class allows an object to validate that it is valid after\n+  * deserialization has run completely for it and all dependent objects.\n+  * This allows an object to determine if it is invalid even if all\n+  * state data was correctly deserialized from the stream.  It can also\n+  * be used to perform re-initialization type activities on an object\n+  * after it has been completely deserialized.\n+  *\n+  * Since this method functions as a type of callback, it must be \n+  * registered through <code>ObjectInputStream.registerValidation</code>\n+  * in order to be invoked.  This is typically done in the\n+  * <code>readObject</code> method.\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n+  *\n+  * @see ObjectInputStream#registerValidation\n   */\n public interface ObjectInputValidation\n {\n-\n   /**\n-    * This method is called to validate an object.  If the object is invalid\n-    * an exception is thrown.\n+    * This method is called to validate an object after serialization\n+    * is complete.  If the object is invalid an exception is thrown.\n     *\n     * @exception InvalidObjectException If the object is invalid\n     */"}, {"sha": "5a02add275a81adc767e8f1897e44f3b6a6cc166", "filename": "libjava/java/io/ObjectOutput.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30da09694b77a86b0790f9480cf934120c5258d3/libjava%2Fjava%2Fio%2FObjectOutput.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30da09694b77a86b0790f9480cf934120c5258d3/libjava%2Fjava%2Fio%2FObjectOutput.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectOutput.java?ref=30da09694b77a86b0790f9480cf934120c5258d3", "patch": "@@ -45,10 +45,11 @@\n   * <code>OutputStream</code> like.\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n+  *\n+  * @see DataOutput\n   */\n public interface ObjectOutput extends DataOutput\n {\n-\n   /**\n     * This method writes the specified byte to the output stream.\n     *"}, {"sha": "1cddd2e7e9ac8e608b066eba2d8089b8be2161d7", "filename": "libjava/java/io/ObjectStreamConstants.java", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30da09694b77a86b0790f9480cf934120c5258d3/libjava%2Fjava%2Fio%2FObjectStreamConstants.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30da09694b77a86b0790f9480cf934120c5258d3/libjava%2Fjava%2Fio%2FObjectStreamConstants.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectStreamConstants.java?ref=30da09694b77a86b0790f9480cf934120c5258d3", "patch": "@@ -1,6 +1,6 @@\n /* ObjectStreamConstants.java -- Interface containing constant values\n    used in reading and writing serialized objects\n-   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -40,14 +40,15 @@\n package java.io;\n \n /**\n-   This interface contains constants that are used in object\n-   serialization.  This interface is used by ObjectOutputStream,\n-   ObjectInputStream, ObjectStreamClass, and possibly other classes.\n-   The values for these constants are specified in Javasoft's \"Object\n-   Serialization Specification\" TODO: add reference\n-*/\n+ * This interface contains constants that are used in object\n+ * serialization.  This interface is used by <code>ObjectOutputStream</code>,\n+ * <code>ObjectInputStream</code>, and <code>ObjectStreamClass</code>.\n+ * The values for these constants are specified by the Java library\n+ * specification.\n+ */\n public interface ObjectStreamConstants\n {\n+  // FIXME: Javadoc comment these values.\n   public final static int PROTOCOL_VERSION_1 = 1;\n   public final static int PROTOCOL_VERSION_2 = 2;\n \n@@ -85,3 +86,4 @@\n   final static SerializablePermission SUBCLASS_IMPLEMENTATION_PERMISSION\n     = new SerializablePermission(\"enableSubclassImplementation\");\n }\n+"}, {"sha": "da1ca46e6624316577142d7b0d21f0b84cff5d15", "filename": "libjava/java/io/ObjectStreamException.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30da09694b77a86b0790f9480cf934120c5258d3/libjava%2Fjava%2Fio%2FObjectStreamException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30da09694b77a86b0790f9480cf934120c5258d3/libjava%2Fjava%2Fio%2FObjectStreamException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectStreamException.java?ref=30da09694b77a86b0790f9480cf934120c5258d3", "patch": "@@ -1,5 +1,5 @@\n /* ObjectStreamException.java -- Superclass of all serialization exceptions\n-   Copyright (C) 1998, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -40,7 +40,7 @@\n \n /**\n  * This exception is thrown when a problem occurs during serialization.\n- * There are more specific subclasses than give more fine grained\n+ * There are more specific subclasses that give more fine grained\n  * indications of the precise failure.\n  *\n  * @author Aaron M. Renn (arenn@urbanophile.com)"}]}