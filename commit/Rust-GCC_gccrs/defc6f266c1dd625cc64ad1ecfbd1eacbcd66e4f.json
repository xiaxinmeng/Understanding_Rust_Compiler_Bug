{"sha": "defc6f266c1dd625cc64ad1ecfbd1eacbcd66e4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVmYzZmMjY2YzFkZDYyNWNjNjRhZDFlY2ZiZDFlYWNiY2Q2NmU0Zg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-09-18T09:43:29Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-18T09:43:29Z"}, "message": "Handle variable-length vectors in compute_record_mode\n\nThis patch makes compute_record_mode handle SVE vectors in the\nsame way as it would handle fixed-length vectors.  There should\nbe no change in behaviour for other targets.\n\nThis is needed for the SVE equivalent of arm_neon.h types like\nint8x8x2_t (i.e. a pair of int8x8_ts).\n\n2019-09-18  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* stor-layout.c (compute_record_mode): Operate on poly_uint64\n\tsizes instead of uhwi sizes.\n\nFrom-SVN: r275869", "tree": {"sha": "2028d6fd91fae2de03ce620c828cb09fcc7a354c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2028d6fd91fae2de03ce620c828cb09fcc7a354c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/defc6f266c1dd625cc64ad1ecfbd1eacbcd66e4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/defc6f266c1dd625cc64ad1ecfbd1eacbcd66e4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/defc6f266c1dd625cc64ad1ecfbd1eacbcd66e4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/defc6f266c1dd625cc64ad1ecfbd1eacbcd66e4f/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ef20d2215067b1bfa8b3f9549ca0baed636a94a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef20d2215067b1bfa8b3f9549ca0baed636a94a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef20d2215067b1bfa8b3f9549ca0baed636a94a0"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "3afdb09f0726bbc03d403a5bcfa93b984f0caac8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/defc6f266c1dd625cc64ad1ecfbd1eacbcd66e4f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/defc6f266c1dd625cc64ad1ecfbd1eacbcd66e4f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=defc6f266c1dd625cc64ad1ecfbd1eacbcd66e4f", "patch": "@@ -1,3 +1,8 @@\n+2019-09-18  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* stor-layout.c (compute_record_mode): Operate on poly_uint64\n+\tsizes instead of uhwi sizes.\n+\n 2019-09-18  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* dwarf2out.c (loc_list_from_tree_1): Handle POLY_INT_CST."}, {"sha": "9aada97b03813003d9667291be088776a19ee2d8", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/defc6f266c1dd625cc64ad1ecfbd1eacbcd66e4f/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/defc6f266c1dd625cc64ad1ecfbd1eacbcd66e4f/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=defc6f266c1dd625cc64ad1ecfbd1eacbcd66e4f", "patch": "@@ -1811,7 +1811,8 @@ compute_record_mode (tree type)\n      line.  */\n   SET_TYPE_MODE (type, BLKmode);\n \n-  if (! tree_fits_uhwi_p (TYPE_SIZE (type)))\n+  poly_uint64 type_size;\n+  if (!poly_int_tree_p (TYPE_SIZE (type), &type_size))\n     return;\n \n   /* A record which has any BLKmode members must itself be\n@@ -1822,20 +1823,21 @@ compute_record_mode (tree type)\n       if (TREE_CODE (field) != FIELD_DECL)\n \tcontinue;\n \n+      poly_uint64 field_size;\n       if (TREE_CODE (TREE_TYPE (field)) == ERROR_MARK\n \t  || (TYPE_MODE (TREE_TYPE (field)) == BLKmode\n \t      && ! TYPE_NO_FORCE_BLK (TREE_TYPE (field))\n \t      && !(TYPE_SIZE (TREE_TYPE (field)) != 0\n \t\t   && integer_zerop (TYPE_SIZE (TREE_TYPE (field)))))\n-\t  || ! tree_fits_uhwi_p (bit_position (field))\n+\t  || !tree_fits_poly_uint64_p (bit_position (field))\n \t  || DECL_SIZE (field) == 0\n-\t  || ! tree_fits_uhwi_p (DECL_SIZE (field)))\n+\t  || !poly_int_tree_p (DECL_SIZE (field), &field_size))\n \treturn;\n \n       /* If this field is the whole struct, remember its mode so\n \t that, say, we can put a double in a class into a DF\n \t register instead of forcing it to live in the stack.  */\n-      if (simple_cst_equal (TYPE_SIZE (type), DECL_SIZE (field))\n+      if (known_eq (field_size, type_size)\n \t  /* Partial int types (e.g. __int20) may have TYPE_SIZE equal to\n \t     wider types (e.g. int32), despite precision being less.  Ensure\n \t     that the TYPE_MODE of the struct does not get set to the partial\n@@ -1855,7 +1857,6 @@ compute_record_mode (tree type)\n      For UNION_TYPE, if the widest field is MODE_INT then use that mode.\n      If the widest field is MODE_PARTIAL_INT, and the union will be passed\n      by reference, then use that mode.  */\n-  poly_uint64 type_size;\n   if ((TREE_CODE (type) == RECORD_TYPE\n        || (TREE_CODE (type) == UNION_TYPE\n \t   && (GET_MODE_CLASS (mode) == MODE_INT\n@@ -1864,7 +1865,6 @@ compute_record_mode (tree type)\n \t\t       (pack_cumulative_args (0),\n \t\t\tfunction_arg_info (type, mode, /*named=*/false)))))))\n       && mode != VOIDmode\n-      && poly_int_tree_p (TYPE_SIZE (type), &type_size)\n       && known_eq (GET_MODE_BITSIZE (mode), type_size))\n     ;\n   else"}]}