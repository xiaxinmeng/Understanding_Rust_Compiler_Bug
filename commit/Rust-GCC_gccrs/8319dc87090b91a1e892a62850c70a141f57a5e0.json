{"sha": "8319dc87090b91a1e892a62850c70a141f57a5e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMxOWRjODcwOTBiOTFhMWU4OTJhNjI4NTBjNzBhMTQxZjU3YTVlMA==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2004-06-30T04:52:11Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2004-06-30T04:52:11Z"}, "message": "jni.cc (_Jv_JNI_NewGlobalRef, [...]): Remove needless parenthesis...\n\n\n\t* jni.cc (_Jv_JNI_NewGlobalRef, JNICALL _Jv_JNI_DeleteGlobalRef,\n\tetc etc):  Remove needless parenthesis, which causes __stdcall__\n\tattribute on MinGW to get ignored.\n\nFrom-SVN: r83892", "tree": {"sha": "e07e5433a98b9f944117100829912f4a787123ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e07e5433a98b9f944117100829912f4a787123ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8319dc87090b91a1e892a62850c70a141f57a5e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8319dc87090b91a1e892a62850c70a141f57a5e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8319dc87090b91a1e892a62850c70a141f57a5e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8319dc87090b91a1e892a62850c70a141f57a5e0/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4877790048c2783291bd85f43866b4ddc6d64af7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4877790048c2783291bd85f43866b4ddc6d64af7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4877790048c2783291bd85f43866b4ddc6d64af7"}], "stats": {"total": 378, "additions": 192, "deletions": 186}, "files": [{"sha": "6f7489a792247d3be42fbcedbcde5ddb3c02ec30", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8319dc87090b91a1e892a62850c70a141f57a5e0/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8319dc87090b91a1e892a62850c70a141f57a5e0/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=8319dc87090b91a1e892a62850c70a141f57a5e0", "patch": "@@ -1,3 +1,9 @@\n+2004-06-29  Per Bothner  <per@bothner.com>\n+\n+\t* jni.cc (_Jv_JNI_NewGlobalRef, JNICALL _Jv_JNI_DeleteGlobalRef,\n+\tetc etc):  Remove needless parenthesis, which causes __stdcall__\n+\tattribute on MinGW to get ignored.\n+\n 2004-06-29  Bryce McKinlay  <mckinlay@redhat.com>\n \n \t* testsuite/libjava.compile/PR16249.java: New test case. PR gcc/16249."}, {"sha": "ec2709f0f2bdc9ce96f7b7deaebc759ef1a110f2", "filename": "libjava/jni.cc", "status": "modified", "additions": 186, "deletions": 186, "changes": 372, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8319dc87090b91a1e892a62850c70a141f57a5e0/libjava%2Fjni.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8319dc87090b91a1e892a62850c70a141f57a5e0/libjava%2Fjni.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni.cc?ref=8319dc87090b91a1e892a62850c70a141f57a5e0", "patch": "@@ -222,25 +222,25 @@ unwrap (T *obj)\n \n \f\n \n-static jobject\n-(JNICALL _Jv_JNI_NewGlobalRef) (JNIEnv *, jobject obj)\n+static jobject JNICALL\n+_Jv_JNI_NewGlobalRef (JNIEnv *, jobject obj)\n {\n   // This seems weird but I think it is correct.\n   obj = unwrap (obj);\n   mark_for_gc (obj, global_ref_table);\n   return obj;\n }\n \n-static void\n-(JNICALL _Jv_JNI_DeleteGlobalRef) (JNIEnv *, jobject obj)\n+static void JNICALL\n+_Jv_JNI_DeleteGlobalRef (JNIEnv *, jobject obj)\n {\n   // This seems weird but I think it is correct.\n   obj = unwrap (obj);\n   unmark_for_gc (obj, global_ref_table);\n }\n \n-static void\n-(JNICALL _Jv_JNI_DeleteLocalRef) (JNIEnv *env, jobject obj)\n+static void JNICALL\n+_Jv_JNI_DeleteLocalRef (JNIEnv *env, jobject obj)\n {\n   _Jv_JNI_LocalFrame *frame;\n \n@@ -266,8 +266,8 @@ static void\n   JvAssert (0);\n }\n \n-static jint\n-(JNICALL _Jv_JNI_EnsureLocalCapacity) (JNIEnv *env, jint size)\n+static jint JNICALL\n+_Jv_JNI_EnsureLocalCapacity (JNIEnv *env, jint size)\n {\n   // It is easier to just always allocate a new frame of the requested\n   // size.  This isn't the most efficient thing, but for now we don't\n@@ -294,8 +294,8 @@ static jint\n   return 0;\n }\n \n-static jint\n-(JNICALL _Jv_JNI_PushLocalFrame) (JNIEnv *env, jint size)\n+static jint JNICALL\n+_Jv_JNI_PushLocalFrame (JNIEnv *env, jint size)\n {\n   jint r = _Jv_JNI_EnsureLocalCapacity (env, size);\n   if (r < 0)\n@@ -307,8 +307,8 @@ static jint\n   return 0;\n }\n \n-static jobject\n-(JNICALL _Jv_JNI_NewLocalRef) (JNIEnv *env, jobject obj)\n+static jobject JNICALL\n+_Jv_JNI_NewLocalRef (JNIEnv *env, jobject obj)\n {\n   // This seems weird but I think it is correct.\n   obj = unwrap (obj);\n@@ -348,8 +348,8 @@ static jobject\n   return obj;\n }\n \n-static jobject\n-(JNICALL _Jv_JNI_PopLocalFrame) (JNIEnv *env, jobject result, int stop)\n+static jobject JNICALL\n+_Jv_JNI_PopLocalFrame (JNIEnv *env, jobject result, int stop)\n {\n   _Jv_JNI_LocalFrame *rf = env->locals;\n \n@@ -383,8 +383,8 @@ static jobject\n   return result == NULL ? NULL : _Jv_JNI_NewLocalRef (env, result);\n }\n \n-static jobject\n-(JNICALL _Jv_JNI_PopLocalFrame) (JNIEnv *env, jobject result)\n+static jobject JNICALL\n+_Jv_JNI_PopLocalFrame (JNIEnv *env, jobject result)\n {\n   return _Jv_JNI_PopLocalFrame (env, result, MARK_USER);\n }\n@@ -455,14 +455,14 @@ wrap_value (JNIEnv *env, T *value)\n \n \f\n \n-static jint\n-(JNICALL _Jv_JNI_GetVersion) (JNIEnv *)\n+static jint JNICALL\n+_Jv_JNI_GetVersion (JNIEnv *)\n {\n   return JNI_VERSION_1_4;\n }\n \n-static jclass\n-(JNICALL _Jv_JNI_DefineClass) (JNIEnv *env, const char *name, jobject loader,\n+static jclass JNICALL\n+_Jv_JNI_DefineClass (JNIEnv *env, const char *name, jobject loader,\n \t\t               const jbyte *buf, jsize bufLen)\n {\n   try\n@@ -488,8 +488,8 @@ static jclass\n     }\n }\n \n-static jclass\n-(JNICALL _Jv_JNI_FindClass) (JNIEnv *env, const char *name)\n+static jclass JNICALL\n+_Jv_JNI_FindClass (JNIEnv *env, const char *name)\n {\n   // FIXME: assume that NAME isn't too long.\n   int len = strlen (name);\n@@ -524,20 +524,20 @@ static jclass\n   return (jclass) wrap_value (env, r);\n }\n \n-static jclass\n-(JNICALL _Jv_JNI_GetSuperclass) (JNIEnv *env, jclass clazz)\n+static jclass JNICALL\n+_Jv_JNI_GetSuperclass (JNIEnv *env, jclass clazz)\n {\n   return (jclass) wrap_value (env, unwrap (clazz)->getSuperclass ());\n }\n \n-static jboolean\n-(JNICALL _Jv_JNI_IsAssignableFrom) (JNIEnv *, jclass clazz1, jclass clazz2)\n+static jboolean JNICALL\n+_Jv_JNI_IsAssignableFrom (JNIEnv *, jclass clazz1, jclass clazz2)\n {\n   return unwrap (clazz1)->isAssignableFrom (unwrap (clazz2));\n }\n \n-static jint\n-(JNICALL _Jv_JNI_Throw) (JNIEnv *env, jthrowable obj)\n+static jint JNICALL\n+_Jv_JNI_Throw (JNIEnv *env, jthrowable obj)\n {\n   // We check in case the user did some funky cast.\n   obj = unwrap (obj);\n@@ -546,8 +546,8 @@ static jint\n   return 0;\n }\n \n-static jint\n-(JNICALL _Jv_JNI_ThrowNew) (JNIEnv *env, jclass clazz, const char *message)\n+static jint JNICALL\n+_Jv_JNI_ThrowNew (JNIEnv *env, jclass clazz, const char *message)\n {\n   using namespace java::lang::reflect;\n \n@@ -583,47 +583,47 @@ static jint\n   return r;\n }\n \n-static jthrowable\n-(JNICALL _Jv_JNI_ExceptionOccurred) (JNIEnv *env)\n+static jthrowable JNICALL\n+_Jv_JNI_ExceptionOccurred (JNIEnv *env)\n {\n   return (jthrowable) wrap_value (env, env->ex);\n }\n \n-static void\n-(JNICALL _Jv_JNI_ExceptionDescribe) (JNIEnv *env)\n+static void JNICALL\n+_Jv_JNI_ExceptionDescribe (JNIEnv *env)\n {\n   if (env->ex != NULL)\n     env->ex->printStackTrace();\n }\n \n-static void\n-(JNICALL _Jv_JNI_ExceptionClear) (JNIEnv *env)\n+static void JNICALL\n+_Jv_JNI_ExceptionClear (JNIEnv *env)\n {\n   env->ex = NULL;\n }\n \n-static jboolean\n-(JNICALL _Jv_JNI_ExceptionCheck) (JNIEnv *env)\n+static jboolean JNICALL\n+_Jv_JNI_ExceptionCheck (JNIEnv *env)\n {\n   return env->ex != NULL;\n }\n \n-static void\n-(JNICALL _Jv_JNI_FatalError) (JNIEnv *, const char *message)\n+static void JNICALL\n+_Jv_JNI_FatalError (JNIEnv *, const char *message)\n {\n   JvFail (message);\n }\n \n \f\n \n-static jboolean\n-(JNICALL _Jv_JNI_IsSameObject) (JNIEnv *, jobject obj1, jobject obj2)\n+static jboolean JNICALL\n+_Jv_JNI_IsSameObject (JNIEnv *, jobject obj1, jobject obj2)\n {\n   return unwrap (obj1) == unwrap (obj2);\n }\n \n-static jobject\n-(JNICALL _Jv_JNI_AllocObject) (JNIEnv *env, jclass clazz)\n+static jobject JNICALL\n+_Jv_JNI_AllocObject (JNIEnv *env, jclass clazz)\n {\n   jobject obj = NULL;\n   using namespace java::lang::reflect;\n@@ -645,16 +645,16 @@ static jobject\n   return wrap_value (env, obj);\n }\n \n-static jclass\n-(JNICALL _Jv_JNI_GetObjectClass) (JNIEnv *env, jobject obj)\n+static jclass JNICALL\n+_Jv_JNI_GetObjectClass (JNIEnv *env, jobject obj)\n {\n   obj = unwrap (obj);\n   JvAssert (obj);\n   return (jclass) wrap_value (env, obj->getClass());\n }\n \n-static jboolean\n-(JNICALL _Jv_JNI_IsInstanceOf) (JNIEnv *, jobject obj, jclass clazz)\n+static jboolean JNICALL\n+_Jv_JNI_IsInstanceOf (JNIEnv *, jobject obj, jclass clazz)\n {\n   return unwrap (clazz)->isInstance(unwrap (obj));\n }\n@@ -666,8 +666,8 @@ static jboolean\n //\n \n template<jboolean is_static>\n-static jmethodID\n-(JNICALL _Jv_JNI_GetAnyMethodID) (JNIEnv *env, jclass clazz,\n+static jmethodID JNICALL\n+_Jv_JNI_GetAnyMethodID (JNIEnv *env, jclass clazz,\n \t\t\t          const char *name, const char *sig)\n {\n   try\n@@ -765,8 +765,8 @@ array_from_valist (jvalue *values, JArray<jclass> *arg_types, va_list vargs)\n // This can call any sort of method: virtual, \"nonvirtual\", static, or\n // constructor.\n template<typename T, invocation_type style>\n-static T\n-(JNICALL _Jv_JNI_CallAnyMethodV) (JNIEnv *env, jobject obj, jclass klass,\n+static T JNICALL\n+_Jv_JNI_CallAnyMethodV (JNIEnv *env, jobject obj, jclass klass,\n \t\t\t          jmethodID id, va_list vargs)\n {\n   obj = unwrap (obj);\n@@ -807,8 +807,8 @@ static T\n }\n \n template<typename T, invocation_type style>\n-static T\n-(JNICALL _Jv_JNI_CallAnyMethod) (JNIEnv *env, jobject obj, jclass klass,\n+static T JNICALL\n+_Jv_JNI_CallAnyMethod (JNIEnv *env, jobject obj, jclass klass,\n \t\t                 jmethodID method, ...)\n {\n   va_list args;\n@@ -822,8 +822,8 @@ static T\n }\n \n template<typename T, invocation_type style>\n-static T\n-(JNICALL _Jv_JNI_CallAnyMethodA) (JNIEnv *env, jobject obj, jclass klass,\n+static T JNICALL\n+_Jv_JNI_CallAnyMethodA (JNIEnv *env, jobject obj, jclass klass,\n \t\t\t          jmethodID id, jvalue *args)\n {\n   obj = unwrap (obj);\n@@ -871,8 +871,8 @@ static T\n }\n \n template<invocation_type style>\n-static void\n-(JNICALL _Jv_JNI_CallAnyVoidMethodV) (JNIEnv *env, jobject obj, jclass klass,\n+static void JNICALL\n+_Jv_JNI_CallAnyVoidMethodV (JNIEnv *env, jobject obj, jclass klass,\n \t\t\t              jmethodID id, va_list vargs)\n {\n   obj = unwrap (obj);\n@@ -907,8 +907,8 @@ static void\n }\n \n template<invocation_type style>\n-static void\n-(JNICALL _Jv_JNI_CallAnyVoidMethod) (JNIEnv *env, jobject obj, jclass klass,\n+static void JNICALL\n+_Jv_JNI_CallAnyVoidMethod (JNIEnv *env, jobject obj, jclass klass,\n \t\t\t             jmethodID method, ...)\n {\n   va_list args;\n@@ -919,8 +919,8 @@ static void\n }\n \n template<invocation_type style>\n-static void\n-(JNICALL _Jv_JNI_CallAnyVoidMethodA) (JNIEnv *env, jobject obj, jclass klass,\n+static void JNICALL\n+_Jv_JNI_CallAnyVoidMethodA (JNIEnv *env, jobject obj, jclass klass,\n \t\t\t              jmethodID id, jvalue *args)\n {\n   jclass decl_class = klass ? klass : obj->getClass ();\n@@ -958,8 +958,8 @@ static void\n // Functions with this signature are used to implement functions in\n // the CallMethod family.\n template<typename T>\n-static T\n-(JNICALL _Jv_JNI_CallMethodV) (JNIEnv *env, jobject obj, \n+static T JNICALL\n+_Jv_JNI_CallMethodV (JNIEnv *env, jobject obj, \n                                jmethodID id, va_list args)\n {\n   return _Jv_JNI_CallAnyMethodV<T, normal> (env, obj, NULL, id, args);\n@@ -968,8 +968,8 @@ static T\n // Functions with this signature are used to implement functions in\n // the CallMethod family.\n template<typename T>\n-static T\n-(JNICALL _Jv_JNI_CallMethod) (JNIEnv *env, jobject obj, jmethodID id, ...)\n+static T JNICALL\n+_Jv_JNI_CallMethod (JNIEnv *env, jobject obj, jmethodID id, ...)\n {\n   va_list args;\n   T result;\n@@ -984,22 +984,22 @@ static T\n // Functions with this signature are used to implement functions in\n // the CallMethod family.\n template<typename T>\n-static T\n-(JNICALL _Jv_JNI_CallMethodA) (JNIEnv *env, jobject obj, \n+static T JNICALL\n+_Jv_JNI_CallMethodA (JNIEnv *env, jobject obj, \n                                jmethodID id, jvalue *args)\n {\n   return _Jv_JNI_CallAnyMethodA<T, normal> (env, obj, NULL, id, args);\n }\n \n-static void\n-(JNICALL _Jv_JNI_CallVoidMethodV) (JNIEnv *env, jobject obj, \n+static void JNICALL\n+_Jv_JNI_CallVoidMethodV (JNIEnv *env, jobject obj, \n                                    jmethodID id, va_list args)\n {\n   _Jv_JNI_CallAnyVoidMethodV<normal> (env, obj, NULL, id, args);\n }\n \n-static void\n-(JNICALL _Jv_JNI_CallVoidMethod) (JNIEnv *env, jobject obj, jmethodID id, ...)\n+static void JNICALL\n+_Jv_JNI_CallVoidMethod (JNIEnv *env, jobject obj, jmethodID id, ...)\n {\n   va_list args;\n \n@@ -1008,8 +1008,8 @@ static void\n   va_end (args);\n }\n \n-static void\n-(JNICALL _Jv_JNI_CallVoidMethodA) (JNIEnv *env, jobject obj, \n+static void JNICALL\n+_Jv_JNI_CallVoidMethodA (JNIEnv *env, jobject obj, \n                                    jmethodID id, jvalue *args)\n {\n   _Jv_JNI_CallAnyVoidMethodA<normal> (env, obj, NULL, id, args);\n@@ -1018,8 +1018,8 @@ static void\n // Functions with this signature are used to implement functions in\n // the CallStaticMethod family.\n template<typename T>\n-static T\n-(JNICALL _Jv_JNI_CallStaticMethodV) (JNIEnv *env, jclass klass,\n+static T JNICALL\n+_Jv_JNI_CallStaticMethodV (JNIEnv *env, jclass klass,\n \t\t\t             jmethodID id, va_list args)\n {\n   JvAssert (((id->accflags) & java::lang::reflect::Modifier::STATIC));\n@@ -1031,8 +1031,8 @@ static T\n // Functions with this signature are used to implement functions in\n // the CallStaticMethod family.\n template<typename T>\n-static T\n-(JNICALL _Jv_JNI_CallStaticMethod) (JNIEnv *env, jclass klass, \n+static T JNICALL\n+_Jv_JNI_CallStaticMethod (JNIEnv *env, jclass klass, \n                                     jmethodID id, ...)\n {\n   va_list args;\n@@ -1052,8 +1052,8 @@ static T\n // Functions with this signature are used to implement functions in\n // the CallStaticMethod family.\n template<typename T>\n-static T\n-(JNICALL _Jv_JNI_CallStaticMethodA) (JNIEnv *env, jclass klass, jmethodID id,\n+static T JNICALL\n+_Jv_JNI_CallStaticMethodA (JNIEnv *env, jclass klass, jmethodID id,\n \t\t\t             jvalue *args)\n {\n   JvAssert (((id->accflags) & java::lang::reflect::Modifier::STATIC));\n@@ -1062,15 +1062,15 @@ static T\n   return _Jv_JNI_CallAnyMethodA<T, static_type> (env, NULL, klass, id, args);\n }\n \n-static void\n-(JNICALL _Jv_JNI_CallStaticVoidMethodV) (JNIEnv *env, jclass klass, \n+static void JNICALL\n+_Jv_JNI_CallStaticVoidMethodV (JNIEnv *env, jclass klass, \n                                          jmethodID id, va_list args)\n {\n   _Jv_JNI_CallAnyVoidMethodV<static_type> (env, NULL, klass, id, args);\n }\n \n-static void\n-(JNICALL _Jv_JNI_CallStaticVoidMethod) (JNIEnv *env, jclass klass, \n+static void JNICALL\n+_Jv_JNI_CallStaticVoidMethod (JNIEnv *env, jclass klass, \n                                         jmethodID id, ...)\n {\n   va_list args;\n@@ -1080,15 +1080,15 @@ static void\n   va_end (args);\n }\n \n-static void\n-(JNICALL _Jv_JNI_CallStaticVoidMethodA) (JNIEnv *env, jclass klass, \n+static void JNICALL\n+_Jv_JNI_CallStaticVoidMethodA (JNIEnv *env, jclass klass, \n                                          jmethodID id, jvalue *args)\n {\n   _Jv_JNI_CallAnyVoidMethodA<static_type> (env, NULL, klass, id, args);\n }\n \n-static jobject\n-(JNICALL _Jv_JNI_NewObjectV) (JNIEnv *env, jclass klass,\n+static jobject JNICALL\n+_Jv_JNI_NewObjectV (JNIEnv *env, jclass klass,\n \t\t              jmethodID id, va_list args)\n {\n   JvAssert (klass && ! klass->isArray ());\n@@ -1102,8 +1102,8 @@ static jobject\n \t\t\t\t\t\t       id, args);\n }\n \n-static jobject\n-(JNICALL _Jv_JNI_NewObject) (JNIEnv *env, jclass klass, jmethodID id, ...)\n+static jobject JNICALL\n+_Jv_JNI_NewObject (JNIEnv *env, jclass klass, jmethodID id, ...)\n {\n   JvAssert (klass && ! klass->isArray ());\n   JvAssert (! strcmp (id->name->data, \"<init>\")\n@@ -1123,8 +1123,8 @@ static jobject\n   return result;\n }\n \n-static jobject\n-(JNICALL _Jv_JNI_NewObjectA) (JNIEnv *env, jclass klass, jmethodID id,\n+static jobject JNICALL\n+_Jv_JNI_NewObjectA (JNIEnv *env, jclass klass, jmethodID id,\n \t\t              jvalue *args)\n {\n   JvAssert (klass && ! klass->isArray ());\n@@ -1141,8 +1141,8 @@ static jobject\n \f\n \n template<typename T>\n-static T\n-(JNICALL _Jv_JNI_GetField) (JNIEnv *env, jobject obj, jfieldID field)\n+static T JNICALL\n+_Jv_JNI_GetField (JNIEnv *env, jobject obj, jfieldID field)\n {\n   obj = unwrap (obj);\n   JvAssert (obj);\n@@ -1151,8 +1151,8 @@ static T\n }\n \n template<typename T>\n-static void\n-(JNICALL _Jv_JNI_SetField) (JNIEnv *, jobject obj, jfieldID field, T value)\n+static void JNICALL\n+_Jv_JNI_SetField (JNIEnv *, jobject obj, jfieldID field, T value)\n {\n   obj = unwrap (obj);\n   value = unwrap (value);\n@@ -1163,8 +1163,8 @@ static void\n }\n \n template<jboolean is_static>\n-static jfieldID\n-(JNICALL _Jv_JNI_GetAnyFieldID) (JNIEnv *env, jclass clazz,\n+static jfieldID JNICALL\n+_Jv_JNI_GetAnyFieldID (JNIEnv *env, jclass clazz,\n \t\t                 const char *name, const char *sig)\n {\n   try\n@@ -1224,24 +1224,24 @@ static jfieldID\n }\n \n template<typename T>\n-static T\n-(JNICALL _Jv_JNI_GetStaticField) (JNIEnv *env, jclass, jfieldID field)\n+static T JNICALL\n+_Jv_JNI_GetStaticField (JNIEnv *env, jclass, jfieldID field)\n {\n   T *ptr = (T *) field->u.addr;\n   return wrap_value (env, *ptr);\n }\n \n template<typename T>\n-static void\n-(JNICALL _Jv_JNI_SetStaticField) (JNIEnv *, jclass, jfieldID field, T value)\n+static void JNICALL\n+_Jv_JNI_SetStaticField (JNIEnv *, jclass, jfieldID field, T value)\n {\n   value = unwrap (value);\n   T *ptr = (T *) field->u.addr;\n   *ptr = value;\n }\n \n-static jstring\n-(JNICALL _Jv_JNI_NewString) (JNIEnv *env, const jchar *unichars, jsize len)\n+static jstring JNICALL\n+_Jv_JNI_NewString (JNIEnv *env, const jchar *unichars, jsize len)\n {\n   try\n     {\n@@ -1255,14 +1255,14 @@ static jstring\n     }\n }\n \n-static jsize\n-(JNICALL _Jv_JNI_GetStringLength) (JNIEnv *, jstring string)\n+static jsize JNICALL\n+_Jv_JNI_GetStringLength (JNIEnv *, jstring string)\n {\n   return unwrap (string)->length();\n }\n \n-static const jchar *\n-(JNICALL _Jv_JNI_GetStringChars) (JNIEnv *, jstring string, jboolean *isCopy)\n+static const jchar * JNICALL\n+_Jv_JNI_GetStringChars (JNIEnv *, jstring string, jboolean *isCopy)\n {\n   string = unwrap (string);\n   jchar *result = _Jv_GetStringChars (string);\n@@ -1272,14 +1272,14 @@ static const jchar *\n   return (const jchar *) result;\n }\n \n-static void\n-(JNICALL _Jv_JNI_ReleaseStringChars) (JNIEnv *, jstring string, const jchar *)\n+static void JNICALL\n+_Jv_JNI_ReleaseStringChars (JNIEnv *, jstring string, const jchar *)\n {\n   unmark_for_gc (unwrap (string), global_ref_table);\n }\n \n-static jstring\n-(JNICALL _Jv_JNI_NewStringUTF) (JNIEnv *env, const char *bytes)\n+static jstring JNICALL\n+_Jv_JNI_NewStringUTF (JNIEnv *env, const char *bytes)\n {\n   try\n     {\n@@ -1293,14 +1293,14 @@ static jstring\n     }\n }\n \n-static jsize\n-(JNICALL _Jv_JNI_GetStringUTFLength) (JNIEnv *, jstring string)\n+static jsize JNICALL\n+_Jv_JNI_GetStringUTFLength (JNIEnv *, jstring string)\n {\n   return JvGetStringUTFLength (unwrap (string));\n }\n \n-static const char *\n-(JNICALL _Jv_JNI_GetStringUTFChars) (JNIEnv *env, jstring string, \n+static const char * JNICALL\n+_Jv_JNI_GetStringUTFChars (JNIEnv *env, jstring string, \n                                      jboolean *isCopy)\n {\n   try\n@@ -1325,14 +1325,14 @@ static const char *\n     }\n }\n \n-static void\n-(JNICALL _Jv_JNI_ReleaseStringUTFChars) (JNIEnv *, jstring, const char *utf)\n+static void JNICALL\n+_Jv_JNI_ReleaseStringUTFChars (JNIEnv *, jstring, const char *utf)\n {\n   _Jv_Free ((void *) utf);\n }\n \n-static void\n-(JNICALL _Jv_JNI_GetStringRegion) (JNIEnv *env, jstring string, jsize start, \n+static void JNICALL\n+_Jv_JNI_GetStringRegion (JNIEnv *env, jstring string, jsize start, \n                                    jsize len, jchar *buf)\n {\n   string = unwrap (string);\n@@ -1353,8 +1353,8 @@ static void\n     memcpy (buf, &result[start], len * sizeof (jchar));\n }\n \n-static void\n-(JNICALL _Jv_JNI_GetStringUTFRegion) (JNIEnv *env, jstring str, jsize start,\n+static void JNICALL\n+_Jv_JNI_GetStringUTFRegion (JNIEnv *env, jstring str, jsize start,\n \t\t\t              jsize len, char *buf)\n {\n   str = unwrap (str);\n@@ -1375,29 +1375,29 @@ static void\n     _Jv_GetStringUTFRegion (str, start, len, buf);\n }\n \n-static const jchar *\n-(JNICALL _Jv_JNI_GetStringCritical) (JNIEnv *, jstring str, jboolean *isCopy)\n+static const jchar * JNICALL\n+_Jv_JNI_GetStringCritical (JNIEnv *, jstring str, jboolean *isCopy)\n {\n   jchar *result = _Jv_GetStringChars (unwrap (str));\n   if (isCopy)\n     *isCopy = false;\n   return result;\n }\n \n-static void\n-(JNICALL _Jv_JNI_ReleaseStringCritical) (JNIEnv *, jstring, const jchar *)\n+static void JNICALL\n+_Jv_JNI_ReleaseStringCritical (JNIEnv *, jstring, const jchar *)\n {\n   // Nothing.\n }\n \n-static jsize\n-(JNICALL _Jv_JNI_GetArrayLength) (JNIEnv *, jarray array)\n+static jsize JNICALL\n+_Jv_JNI_GetArrayLength (JNIEnv *, jarray array)\n {\n   return unwrap (array)->length;\n }\n \n-static jarray\n-(JNICALL _Jv_JNI_NewObjectArray) (JNIEnv *env, jsize length, \n+static jarray JNICALL\n+_Jv_JNI_NewObjectArray (JNIEnv *env, jsize length, \n                                   jclass elementClass, jobject init)\n {\n   try\n@@ -1416,8 +1416,8 @@ static jarray\n     }\n }\n \n-static jobject\n-(JNICALL _Jv_JNI_GetObjectArrayElement) (JNIEnv *env, jobjectArray array, \n+static jobject JNICALL\n+_Jv_JNI_GetObjectArrayElement (JNIEnv *env, jobjectArray array, \n                                          jsize index)\n {\n   if ((unsigned) index >= (unsigned) array->length)\n@@ -1426,8 +1426,8 @@ static jobject\n   return wrap_value (env, elts[index]);\n }\n \n-static void\n-(JNICALL _Jv_JNI_SetObjectArrayElement) (JNIEnv *env, jobjectArray array, \n+static void JNICALL\n+_Jv_JNI_SetObjectArrayElement (JNIEnv *env, jobjectArray array, \n                                          jsize index, jobject value)\n {\n   try\n@@ -1448,8 +1448,8 @@ static void\n }\n \n template<typename T, jclass K>\n-static JArray<T> *\n-(JNICALL _Jv_JNI_NewPrimitiveArray) (JNIEnv *env, jsize length)\n+static JArray<T> * JNICALL\n+_Jv_JNI_NewPrimitiveArray (JNIEnv *env, jsize length)\n {\n   try\n     {\n@@ -1463,8 +1463,8 @@ static JArray<T> *\n }\n \n template<typename T, jclass K>\n-static T *\n-(JNICALL _Jv_JNI_GetPrimitiveArrayElements) (JNIEnv *env, JArray<T> *array,\n+static T * JNICALL\n+_Jv_JNI_GetPrimitiveArrayElements (JNIEnv *env, JArray<T> *array,\n \t\t\t\t             jboolean *isCopy)\n {\n   array = unwrap (array);\n@@ -1481,8 +1481,8 @@ static T *\n }\n \n template<typename T, jclass K>\n-static void\n-(JNICALL _Jv_JNI_ReleasePrimitiveArrayElements) (JNIEnv *env, JArray<T> *array,\n+static void JNICALL\n+_Jv_JNI_ReleasePrimitiveArrayElements (JNIEnv *env, JArray<T> *array,\n \t\t\t\t                 T *, jint /* mode */)\n {\n   array = unwrap (array);\n@@ -1494,8 +1494,8 @@ static void\n }\n \n template<typename T, jclass K>\n-static void\n-(JNICALL _Jv_JNI_GetPrimitiveArrayRegion) (JNIEnv *env, JArray<T> *array,\n+static void JNICALL\n+_Jv_JNI_GetPrimitiveArrayRegion (JNIEnv *env, JArray<T> *array,\n \t\t\t\t           jsize start, jsize len,\n \t\t\t\t T *buf)\n {\n@@ -1526,8 +1526,8 @@ static void\n }\n \n template<typename T, jclass K>\n-static void\n-(JNICALL _Jv_JNI_SetPrimitiveArrayRegion) (JNIEnv *env, JArray<T> *array,\n+static void JNICALL\n+_Jv_JNI_SetPrimitiveArrayRegion (JNIEnv *env, JArray<T> *array,\n \t\t\t\t           jsize start, jsize len, T *buf)\n {\n   array = unwrap (array);\n@@ -1555,8 +1555,8 @@ static void\n     }\n }\n \n-static void *\n-(JNICALL _Jv_JNI_GetPrimitiveArrayCritical) (JNIEnv *, jarray array,\n+static void * JNICALL\n+_Jv_JNI_GetPrimitiveArrayCritical (JNIEnv *, jarray array,\n \t\t\t\t             jboolean *isCopy)\n {\n   array = unwrap (array);\n@@ -1569,14 +1569,14 @@ static void *\n   return r;\n }\n \n-static void\n-(JNICALL _Jv_JNI_ReleasePrimitiveArrayCritical) (JNIEnv *, jarray, void *, jint)\n+static void JNICALL\n+_Jv_JNI_ReleasePrimitiveArrayCritical (JNIEnv *, jarray, void *, jint)\n {\n   // Nothing.\n }\n \n-static jint\n-(JNICALL _Jv_JNI_MonitorEnter) (JNIEnv *env, jobject obj)\n+static jint JNICALL\n+_Jv_JNI_MonitorEnter (JNIEnv *env, jobject obj)\n {\n   try\n     {\n@@ -1590,8 +1590,8 @@ static jint\n   return JNI_ERR;\n }\n \n-static jint\n-(JNICALL _Jv_JNI_MonitorExit) (JNIEnv *env, jobject obj)\n+static jint JNICALL\n+_Jv_JNI_MonitorExit (JNIEnv *env, jobject obj)\n {\n   try\n     {\n@@ -1606,8 +1606,8 @@ static jint\n }\n \n // JDK 1.2\n-jobject\n-(JNICALL _Jv_JNI_ToReflectedField) (JNIEnv *env, jclass cls, jfieldID fieldID,\n+jobject JNICALL\n+_Jv_JNI_ToReflectedField (JNIEnv *env, jclass cls, jfieldID fieldID,\n \t\t\t            jboolean)\n {\n   try\n@@ -1627,8 +1627,8 @@ jobject\n }\n \n // JDK 1.2\n-static jfieldID\n-(JNICALL _Jv_JNI_FromReflectedField) (JNIEnv *, jobject f)\n+static jfieldID JNICALL\n+_Jv_JNI_FromReflectedField (JNIEnv *, jobject f)\n {\n   using namespace java::lang::reflect;\n \n@@ -1637,8 +1637,8 @@ static jfieldID\n   return _Jv_FromReflectedField (field);\n }\n \n-jobject\n-(JNICALL _Jv_JNI_ToReflectedMethod) (JNIEnv *env, jclass klass, jmethodID id,\n+jobject JNICALL\n+_Jv_JNI_ToReflectedMethod (JNIEnv *env, jclass klass, jmethodID id,\n         \t\t             jboolean)\n {\n   using namespace java::lang::reflect;\n@@ -1672,8 +1672,8 @@ jobject\n   return wrap_value (env, result);\n }\n \n-static jmethodID\n-(JNICALL _Jv_JNI_FromReflectedMethod) (JNIEnv *, jobject method)\n+static jmethodID JNICALL\n+_Jv_JNI_FromReflectedMethod (JNIEnv *, jobject method)\n {\n   using namespace java::lang::reflect;\n   method = unwrap (method);\n@@ -1684,8 +1684,8 @@ static jmethodID\n }\n \n // JDK 1.2.\n-jweak\n-(JNICALL _Jv_JNI_NewWeakGlobalRef) (JNIEnv *env, jobject obj)\n+jweak JNICALL\n+_Jv_JNI_NewWeakGlobalRef (JNIEnv *env, jobject obj)\n {\n   using namespace gnu::gcj::runtime;\n   JNIWeakRef *ref = NULL;\n@@ -1705,8 +1705,8 @@ jweak\n   return reinterpret_cast<jweak> (ref);\n }\n \n-void\n-(JNICALL _Jv_JNI_DeleteWeakGlobalRef) (JNIEnv *, jweak obj)\n+void JNICALL\n+_Jv_JNI_DeleteWeakGlobalRef (JNIEnv *, jweak obj)\n {\n   using namespace gnu::gcj::runtime;\n   JNIWeakRef *ref = reinterpret_cast<JNIWeakRef *> (obj);\n@@ -1718,25 +1718,25 @@ void\n \n // Direct byte buffers.\n \n-static jobject\n-(JNICALL _Jv_JNI_NewDirectByteBuffer) (JNIEnv *, void *address, jlong length)\n+static jobject JNICALL\n+_Jv_JNI_NewDirectByteBuffer (JNIEnv *, void *address, jlong length)\n {\n   using namespace gnu::gcj;\n   using namespace java::nio;\n   return new DirectByteBufferImpl (reinterpret_cast<RawData *> (address),\n \t\t\t\t   length);\n }\n \n-static void *\n-(JNICALL _Jv_JNI_GetDirectBufferAddress) (JNIEnv *, jobject buffer)\n+static void * JNICALL\n+_Jv_JNI_GetDirectBufferAddress (JNIEnv *, jobject buffer)\n {\n   using namespace java::nio;\n   DirectByteBufferImpl* bb = static_cast<DirectByteBufferImpl *> (buffer);\n   return reinterpret_cast<void *> (bb->address);\n }\n \n-static jlong\n-(JNICALL _Jv_JNI_GetDirectBufferCapacity) (JNIEnv *, jobject buffer)\n+static jlong JNICALL\n+_Jv_JNI_GetDirectBufferCapacity (JNIEnv *, jobject buffer)\n {\n   using namespace java::nio;\n   DirectByteBufferImpl* bb = static_cast<DirectByteBufferImpl *> (buffer);\n@@ -1859,8 +1859,8 @@ nathash_add (const JNINativeMethod *method)\n   slot->fnPtr = method->fnPtr;\n }\n \n-static jint\n-(JNICALL _Jv_JNI_RegisterNatives) (JNIEnv *env, jclass klass,\n+static jint JNICALL\n+_Jv_JNI_RegisterNatives (JNIEnv *env, jclass klass,\n \t\t\t           const JNINativeMethod *methods,\n \t\t\t           jint nMethods)\n {\n@@ -1913,8 +1913,8 @@ static jint\n   return JNI_OK;\n }\n \n-static jint\n-(JNICALL _Jv_JNI_UnregisterNatives) (JNIEnv *, jclass)\n+static jint JNICALL\n+_Jv_JNI_UnregisterNatives (JNIEnv *, jclass)\n {\n   // FIXME -- we could implement this.\n   return JNI_ERR;\n@@ -2300,21 +2300,21 @@ _Jv_JNI_AttachCurrentThread (JavaVM *, jstring name, void **penv,\n }\n \n // This is the one actually used by JNI.\n-static jint\n-(JNICALL _Jv_JNI_AttachCurrentThread) (JavaVM *vm, void **penv, void *args)\n+static jint JNICALL\n+_Jv_JNI_AttachCurrentThread (JavaVM *vm, void **penv, void *args)\n {\n   return _Jv_JNI_AttachCurrentThread (vm, NULL, penv, args, false);\n }\n \n-static jint\n-(JNICALL _Jv_JNI_AttachCurrentThreadAsDaemon) (JavaVM *vm, void **penv, \n+static jint JNICALL\n+_Jv_JNI_AttachCurrentThreadAsDaemon (JavaVM *vm, void **penv, \n                                                void *args)\n {\n   return _Jv_JNI_AttachCurrentThread (vm, NULL, penv, args, true);\n }\n \n-static jint\n-(JNICALL _Jv_JNI_DestroyJavaVM) (JavaVM *vm)\n+static jint JNICALL\n+_Jv_JNI_DestroyJavaVM (JavaVM *vm)\n {\n   JvAssert (the_vm && vm == the_vm);\n \n@@ -2347,15 +2347,15 @@ static jint\n   return JNI_ERR;\n }\n \n-jint\n-(JNICALL _Jv_JNI_DetachCurrentThread) (JavaVM *)\n+jint JNICALL\n+_Jv_JNI_DetachCurrentThread (JavaVM *)\n {\n   jint code = _Jv_DetachCurrentThread ();\n   return code  ? JNI_EDETACHED : 0;\n }\n \n-static jint\n-(JNICALL _Jv_JNI_GetEnv) (JavaVM *, void **penv, jint version)\n+static jint JNICALL\n+_Jv_JNI_GetEnv (JavaVM *, void **penv, jint version)\n {\n   if (_Jv_ThreadCurrent () == NULL)\n     {\n@@ -2506,8 +2506,8 @@ _Jv_GetJavaVM ()\n   return the_vm;\n }\n \n-static jint\n-(JNICALL _Jv_JNI_GetJavaVM) (JNIEnv *, JavaVM **vm)\n+static jint JNICALL\n+_Jv_JNI_GetJavaVM (JNIEnv *, JavaVM **vm)\n {\n   *vm = _Jv_GetJavaVM ();\n   return *vm == NULL ? JNI_ERR : JNI_OK;"}]}