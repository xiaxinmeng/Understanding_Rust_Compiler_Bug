{"sha": "cbd03aee24f57b42a82a119e4182b442ef3b8db3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JkMDNhZWUyNGY1N2I0MmE4MmExMTllNDE4MmI0NDJlZjNiOGRiMw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-11-23T21:00:13Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-11-23T21:00:13Z"}, "message": "Fix PR objc/68438 (uninitialized source ranges)\n\ngcc/c/ChangeLog:\n\tPR objc/68438\n\t* c-parser.c (c_parser_postfix_expression): Set up source ranges\n\tfor various Objective-C constructs: Class.name syntax,\n\t@selector(), @protocol(), @encode(), and [] message syntax.\n\ngcc/testsuite/ChangeLog:\n\tPR objc/68438\n\t* objc.dg/plugin: New subdirectory.\n\t* objc.dg/plugin/diagnostic-test-expressions-1.m: New test file.\n\t* objc.dg/plugin/plugin.exp: New file, based on\n\tgcc.dg/plugin/plugin.exp.\n\nFrom-SVN: r230775", "tree": {"sha": "058f5735877ed92a7541da52bb3cfb4c72b3c5a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/058f5735877ed92a7541da52bb3cfb4c72b3c5a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbd03aee24f57b42a82a119e4182b442ef3b8db3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbd03aee24f57b42a82a119e4182b442ef3b8db3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbd03aee24f57b42a82a119e4182b442ef3b8db3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbd03aee24f57b42a82a119e4182b442ef3b8db3/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cd9ec14217a566fa0ae12ccf34534cbb7680f5ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd9ec14217a566fa0ae12ccf34534cbb7680f5ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd9ec14217a566fa0ae12ccf34534cbb7680f5ab"}], "stats": {"total": 216, "additions": 213, "deletions": 3}, "files": [{"sha": "1e9314d197082d4bbedb8ab24847e62944c3fcb2", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbd03aee24f57b42a82a119e4182b442ef3b8db3/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbd03aee24f57b42a82a119e4182b442ef3b8db3/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=cbd03aee24f57b42a82a119e4182b442ef3b8db3", "patch": "@@ -1,3 +1,10 @@\n+2015-11-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR objc/68438\n+\t* c-parser.c (c_parser_postfix_expression): Set up source ranges\n+\tfor various Objective-C constructs: Class.name syntax,\n+\t@selector(), @protocol(), @encode(), and [] message syntax.\n+\n 2015-11-20  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR 62314"}, {"sha": "18e995740c3c50067dcde94433c49c11d3d0ca96", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbd03aee24f57b42a82a119e4182b442ef3b8db3/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbd03aee24f57b42a82a119e4182b442ef3b8db3/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=cbd03aee24f57b42a82a119e4182b442ef3b8db3", "patch": "@@ -7338,10 +7338,13 @@ c_parser_postfix_expression (c_parser *parser)\n \t\texpr.value = error_mark_node;\n \t\tbreak;\n \t      }\n-\t    component = c_parser_peek_token (parser)->value;\n+\t    c_token *component_tok = c_parser_peek_token (parser);\n+\t    component = component_tok->value;\n+\t    location_t end_loc = component_tok->get_finish ();\n \t    c_parser_consume_token (parser);\n \t    expr.value = objc_build_class_component_ref (class_name, \n \t\t\t\t\t\t\t component);\n+\t    set_c_expr_source_range (&expr, loc, end_loc);\n \t    break;\n \t  }\n \tdefault:\n@@ -7816,9 +7819,11 @@ c_parser_postfix_expression (c_parser *parser)\n \t    }\n \t  {\n \t    tree sel = c_parser_objc_selector_arg (parser);\n+\t    location_t close_loc = c_parser_peek_token (parser)->location;\n \t    c_parser_skip_until_found (parser, CPP_CLOSE_PAREN,\n \t\t\t\t       \"expected %<)%>\");\n \t    expr.value = objc_build_selector_expr (loc, sel);\n+\t    set_c_expr_source_range (&expr, loc, close_loc);\n \t  }\n \t  break;\n \tcase RID_AT_PROTOCOL:\n@@ -7839,9 +7844,11 @@ c_parser_postfix_expression (c_parser *parser)\n \t  {\n \t    tree id = c_parser_peek_token (parser)->value;\n \t    c_parser_consume_token (parser);\n+\t    location_t close_loc = c_parser_peek_token (parser)->location;\n \t    c_parser_skip_until_found (parser, CPP_CLOSE_PAREN,\n \t\t\t\t       \"expected %<)%>\");\n \t    expr.value = objc_build_protocol_expr (id);\n+\t    set_c_expr_source_range (&expr, loc, close_loc);\n \t  }\n \t  break;\n \tcase RID_AT_ENCODE:\n@@ -7860,11 +7867,13 @@ c_parser_postfix_expression (c_parser *parser)\n \t      c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, NULL);\n \t      break;\n \t    }\n-\t  c_parser_skip_until_found (parser, CPP_CLOSE_PAREN,\n-\t\t\t\t     \"expected %<)%>\");\n \t  {\n+\t    location_t close_loc = c_parser_peek_token (parser)->location;\n+\t    c_parser_skip_until_found (parser, CPP_CLOSE_PAREN,\n+\t\t\t\t     \"expected %<)%>\");\n \t    tree type = groktypename (t1, NULL, NULL);\n \t    expr.value = objc_build_encode_expr (type);\n+\t    set_c_expr_source_range (&expr, loc, close_loc);\n \t  }\n \t  break;\n \tcase RID_GENERIC:\n@@ -7907,9 +7916,11 @@ c_parser_postfix_expression (c_parser *parser)\n \t  c_parser_consume_token (parser);\n \t  receiver = c_parser_objc_receiver (parser);\n \t  args = c_parser_objc_message_args (parser);\n+\t  location_t close_loc = c_parser_peek_token (parser)->location;\n \t  c_parser_skip_until_found (parser, CPP_CLOSE_SQUARE,\n \t\t\t\t     \"expected %<]%>\");\n \t  expr.value = objc_build_message_expr (receiver, args);\n+\t  set_c_expr_source_range (&expr, loc, close_loc);\n \t  break;\n \t}\n       /* Else fall through to report error.  */"}, {"sha": "61b3e757a8047192e36c2e196814248ba607be0f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbd03aee24f57b42a82a119e4182b442ef3b8db3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbd03aee24f57b42a82a119e4182b442ef3b8db3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cbd03aee24f57b42a82a119e4182b442ef3b8db3", "patch": "@@ -1,3 +1,11 @@\n+2015-11-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR objc/68438\n+\t* objc.dg/plugin: New subdirectory.\n+\t* objc.dg/plugin/diagnostic-test-expressions-1.m: New test file.\n+\t* objc.dg/plugin/plugin.exp: New file, based on\n+\tgcc.dg/plugin/plugin.exp.\n+\n 2015-11-23  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n "}, {"sha": "ed7aca39a283c5d2a450c2959f3dafe7aecfdd9b", "filename": "gcc/testsuite/objc.dg/plugin/diagnostic-test-expressions-1.m", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbd03aee24f57b42a82a119e4182b442ef3b8db3/gcc%2Ftestsuite%2Fobjc.dg%2Fplugin%2Fdiagnostic-test-expressions-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbd03aee24f57b42a82a119e4182b442ef3b8db3/gcc%2Ftestsuite%2Fobjc.dg%2Fplugin%2Fdiagnostic-test-expressions-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fplugin%2Fdiagnostic-test-expressions-1.m?ref=cbd03aee24f57b42a82a119e4182b442ef3b8db3", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdiagnostics-show-caret\" } */\n+\n+/* This file is similar to diagnostic-test-expressions-1.c\n+   (see the notes in that file); this file adds test\n+   coverage for various Objective C constructs. */\n+\n+extern void __emit_expression_range (int dummy, ...);\n+\n+@protocol prot\n+@end\n+\n+@interface tests <prot>\n+- (int) func0;\n+- (int) func1:(int)i;\n++ (int) func2;\n+- (void) test_sending_messages;\n++ (void) test_class_dot_name;\n+- (void) test_at_selector;\n+- (void) test_at_protocol;\n+- (void) test_at_encode:(int)i;\n+@end\n+\n+@implementation tests\n+- (int) func0\n+{\n+  return 42;\n+}\n+- (int) func1:(int)i\n+{\n+  return i * i;\n+}\n++ (int) func2\n+{\n+  return 0;\n+}\n+- (void) test_sending_messages\n+{\n+  __emit_expression_range ( 0, [self func0] ); /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range ( 0, [self func0] );\n+                                ~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+  __emit_expression_range ( 0, [self func1:5] ); /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range ( 0, [self func1:5] );\n+                                ~~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+}\n++ (void) test_class_dot_name\n+{\n+  __emit_expression_range ( 0, tests.func2 ); /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range ( 0, tests.func2 );\n+                                ~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+}\n+- (void) test_at_selector\n+{\n+  __emit_expression_range ( 0, @selector(func0) ); /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range ( 0, @selector(func0) );\n+                                ^~~~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+}\n+- (void) test_at_protocol\n+{\n+  __emit_expression_range ( 0, @protocol(prot) ); /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range ( 0, @protocol(prot) );\n+                                ~~~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+}\n+- (void) test_at_encode:(int)i\n+{\n+  /* @encode() generates a STRING_CST which doesn't retain a location\n+     after parsing, so we need to access it via compound expressions\n+     that can't be folded away.  */\n+\n+  /* Verify start.  */\n+  __emit_expression_range ( 0, @encode(int) + i ); /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range ( 0, @encode(int) + i );\n+                                ~~~~~~~~~~~~~^~~\n+   { dg-end-multiline-output \"\" } */\n+\n+  /* Verify finish.  */\n+  __emit_expression_range ( 0, i + @encode(int) ); /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range ( 0, i + @encode(int) );\n+                                ~~^~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+}\n+@end"}, {"sha": "f98dff54eadb0776abbd96708ac5ba648459a19b", "filename": "gcc/testsuite/objc.dg/plugin/plugin.exp", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbd03aee24f57b42a82a119e4182b442ef3b8db3/gcc%2Ftestsuite%2Fobjc.dg%2Fplugin%2Fplugin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbd03aee24f57b42a82a119e4182b442ef3b8db3/gcc%2Ftestsuite%2Fobjc.dg%2Fplugin%2Fplugin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fplugin%2Fplugin.exp?ref=cbd03aee24f57b42a82a119e4182b442ef3b8db3", "patch": "@@ -0,0 +1,90 @@\n+#   Copyright (C) 2009-2015 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Test the functionality of the GCC plugin support\n+\n+load_lib target-supports.exp\n+load_lib objc-dg.exp\n+\n+global TESTING_IN_BUILD_TREE\n+global ENABLE_PLUGIN\n+\n+# The plugin testcases currently only work when the build tree is available.\n+# Also check whether the host supports plugins.\n+if { ![info exists TESTING_IN_BUILD_TREE] || ![info exists ENABLE_PLUGIN] } {\n+    return\n+}\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# The procedures in plugin-support.exp need these parameters.\n+set default_flags $DEFAULT_CFLAGS\n+\n+if $tracelevel then {\n+    strace $tracelevel\n+}\n+\n+# Load support procs.\n+load_lib plugin-support.exp\n+\n+# These tests don't run runtest_file_p consistently if it\n+# doesn't return the same values, so disable parallelization\n+# of this *.exp file.  The first parallel runtest to reach\n+# this will run all the tests serially.\n+if ![gcc_parallel_test_run_p plugin] {\n+    return\n+}\n+gcc_parallel_test_enable 0\n+\n+# Specify the plugin source file and the associated test files in a list.\n+# plugin_test_list={ {plugin1 test1 test2 ...} {plugin2 test1 ...} ... }\n+set plugin_test_list [list \\\n+    { ../../gcc.dg/plugin/diagnostic_plugin_test_tree_expression_range.c \\\n+\t  diagnostic-test-expressions-1.m } \\\n+]\n+\n+foreach plugin_test $plugin_test_list {\n+    # Replace each source file with its full-path name\n+    for {set i 0} {$i < [llength $plugin_test]} {incr i} {\n+\tset basename [lindex $plugin_test $i]\n+\tset plugin_test [lreplace $plugin_test $i $i $srcdir/$subdir/$basename]\n+    }\n+    set plugin_src [lindex $plugin_test 0]\n+    # If we're only testing specific files and this isn't one of them, skip it.\n+    if ![runtest_file_p $runtests $plugin_src] then {\n+        continue\n+    }\n+    set plugin_input_tests [lreplace $plugin_test 0 0]\n+    plugin-test-execute $plugin_src $plugin_input_tests\n+}\n+\n+# run the plugindir tests\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/plugindir*.m]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish\n+\n+gcc_parallel_test_enable 1"}]}