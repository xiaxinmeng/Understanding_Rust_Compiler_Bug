{"sha": "6f6961cf116360adc27324d52d6e6a8ccf7c96c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY2OTYxY2YxMTYzNjBhZGMyNzMyNGQ1MmQ2ZTZhOGNjZjdjOTZjMg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-02-19T04:25:43Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-02-19T04:25:43Z"}, "message": "Remove old mechanism for passing varargs argument to varargs function.\n\nFrom-SVN: r170304", "tree": {"sha": "3685101b3bb85792d6a04aca3f98df3c2d15ebcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3685101b3bb85792d6a04aca3f98df3c2d15ebcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f6961cf116360adc27324d52d6e6a8ccf7c96c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f6961cf116360adc27324d52d6e6a8ccf7c96c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f6961cf116360adc27324d52d6e6a8ccf7c96c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f6961cf116360adc27324d52d6e6a8ccf7c96c2/comments", "author": null, "committer": null, "parents": [{"sha": "4a28fe2a2bda68125fbdaa605311e9f50ee661bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a28fe2a2bda68125fbdaa605311e9f50ee661bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a28fe2a2bda68125fbdaa605311e9f50ee661bc"}], "stats": {"total": 124, "additions": 29, "deletions": 95}, "files": [{"sha": "ebe4f282f8f1e8ecb0823dc6fb178a423e1728b6", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f6961cf116360adc27324d52d6e6a8ccf7c96c2/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f6961cf116360adc27324d52d6e6a8ccf7c96c2/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=6f6961cf116360adc27324d52d6e6a8ccf7c96c2", "patch": "@@ -8306,11 +8306,6 @@ Call_expression::lower_varargs(Gogo* gogo, Named_object* function,\n \t  this->report_error(_(\"too many arguments\"));\n \t  return this;\n \t}\n-      else if (pa + 1 == old_args->end()\n-\t       && this->is_compatible_varargs_argument(function, *pa,\n-\t\t\t\t\t\t       varargs_type,\n-\t\t\t\t\t\t       &issued_error))\n-\tnew_args->push_back(*pa);\n       else\n \t{\n \t  Type* element_type = varargs_type->array_type()->element_type();\n@@ -8348,84 +8343,6 @@ Call_expression::lower_varargs(Gogo* gogo, Named_object* function,\n   return ret;\n }\n \n-// Return true if ARG is a varargs argment which should be passed to\n-// the varargs parameter of type PARAM_TYPE without wrapping.  ARG\n-// will be the last argument passed in the call, and PARAM_TYPE will\n-// be the type of the last parameter of the varargs function being\n-// called.\n-\n-bool\n-Call_expression::is_compatible_varargs_argument(Named_object* function,\n-\t\t\t\t\t\tExpression* arg,\n-\t\t\t\t\t\tType* param_type,\n-\t\t\t\t\t\tbool* issued_error)\n-{\n-  *issued_error = false;\n-\n-  Type* var_type = NULL;\n-\n-  // The simple case is passing the varargs parameter of the caller.\n-  Var_expression* ve = arg->var_expression();\n-  if (ve != NULL && ve->named_object()->is_variable())\n-    {\n-      Variable* var = ve->named_object()->var_value();\n-      if (var->is_varargs_parameter())\n-\tvar_type = var->type();\n-    }\n-\n-  // The complex case is passing the varargs parameter of some\n-  // enclosing function.  This will look like passing down *c.f where\n-  // c is the closure variable and f is a field in the closure.\n-  if (function != NULL\n-      && function->func_value()->needs_closure()\n-      && arg->classification() == EXPRESSION_UNARY)\n-    {\n-      Unary_expression* ue = static_cast<Unary_expression*>(arg);\n-      if (ue->op() == OPERATOR_MULT)\n-\t{\n-\t  Field_reference_expression* fre =\n-\t    ue->operand()->deref()->field_reference_expression();\n-\t  if (fre != NULL)\n-\t    {\n-\t      Var_expression* ve = fre->expr()->deref()->var_expression();\n-\t      if (ve != NULL)\n-\t\t{\n-\t\t  Named_object* no = ve->named_object();\n-\t\t  Function* f = function->func_value();\n-\t\t  if (no == f->closure_var())\n-\t\t    {\n-\t\t      // At this point we know that this indeed a\n-\t\t      // reference to some enclosing variable.  Now we\n-\t\t      // need to figure out whether that variable is a\n-\t\t      // varargs parameter.\n-\t\t      Named_object* enclosing =\n-\t\t\tf->enclosing_var(fre->field_index());\n-\t\t      Variable* var = enclosing->var_value();\n-\t\t      if (var->is_varargs_parameter())\n-\t\t\tvar_type = var->type();\n-\t\t    }\n-\t\t}\n-\t    }\n-\t}\n-    }\n-\n-  if (var_type == NULL)\n-    return false;\n-\n-  // We only match if the parameter is the same, with an identical\n-  // type.\n-  Array_type* var_at = var_type->array_type();\n-  gcc_assert(var_at != NULL);\n-  Array_type* param_at = param_type->array_type();\n-  if (param_at != NULL\n-      && Type::are_identical(var_at->element_type(),\n-\t\t\t     param_at->element_type(), true, NULL))\n-    return true;\n-  error_at(arg->location(), \"... mismatch: passing ...T as ...\");\n-  *issued_error = true;\n-  return false;\n-}\n-\n // Get the function type.  Returns NULL if we don't know the type.  If\n // this returns NULL, and if_ERROR is true, issues an error.\n "}, {"sha": "c050a4a9c0c15b7f69f46e5e2b75f49202f6c9b5", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f6961cf116360adc27324d52d6e6a8ccf7c96c2/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f6961cf116360adc27324d52d6e6a8ccf7c96c2/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=6f6961cf116360adc27324d52d6e6a8ccf7c96c2", "patch": "@@ -1264,9 +1264,6 @@ class Call_expression : public Expression\n \t\tsize_t param_count);\n \n  private:\n-  bool\n-  is_compatible_varargs_argument(Named_object*, Expression*, Type*, bool*);\n-\n   bool\n   check_argument_type(int, const Type*, const Type*, source_location, bool);\n "}, {"sha": "b95d6e883f9786446480339be4df0119922ccdd2", "filename": "gcc/testsuite/go.test/test/ddd.go", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f6961cf116360adc27324d52d6e6a8ccf7c96c2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fddd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f6961cf116360adc27324d52d6e6a8ccf7c96c2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fddd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fddd.go?ref=6f6961cf116360adc27324d52d6e6a8ccf7c96c2", "patch": "@@ -14,13 +14,13 @@ func sum(args ...int) int {\n \treturn s\n }\n \n-func sumC(args ...int) int { return func() int { return sum(args) }() }\n+func sumC(args ...int) int { return func() int { return sum(args...) }() }\n \n-var sumD = func(args ...int) int { return sum(args) }\n+var sumD = func(args ...int) int { return sum(args...) }\n \n-var sumE = func() func(...int) int { return func(args ...int) int { return sum(args) } }()\n+var sumE = func() func(...int) int { return func(args ...int) int { return sum(args...) } }()\n \n-var sumF = func(args ...int) func() int { return func() int { return sum(args) } }\n+var sumF = func(args ...int) func() int { return func() int { return sum(args...) } }\n \n func sumA(args []int) int {\n \ts := 0\n@@ -30,10 +30,14 @@ func sumA(args []int) int {\n \treturn s\n }\n \n-func sum2(args ...int) int { return 2 * sum(args) }\n+func sumB(args []int) int { return sum(args...) }\n+\n+func sum2(args ...int) int { return 2 * sum(args...) }\n \n func sum3(args ...int) int { return 3 * sumA(args) }\n \n+func sum4(args ...int) int { return 4 * sumB(args) }\n+\n func intersum(args ...interface{}) int {\n \ts := 0\n \tfor _, v := range args {\n@@ -46,9 +50,9 @@ type T []T\n \n func ln(args ...T) int { return len(args) }\n \n-func ln2(args ...T) int { return 2 * ln(args) }\n+func ln2(args ...T) int { return 2 * ln(args...) }\n \n-func (*T) Sum(args ...int) int { return sum(args) }\n+func (*T) Sum(args ...int) int { return sum(args...) }\n \n type U struct {\n \t*T\n@@ -119,6 +123,22 @@ func main() {\n \t\tprintln(\"sum 9\", x)\n \t\tpanic(\"fail\")\n \t}\n+\tif x := sum4(1, 2, 3); x != 4*6 {\n+\t\tprintln(\"sum 6\", x)\n+\t\tpanic(\"fail\")\n+\t}\n+\tif x := sum4(); x != 4*0 {\n+\t\tprintln(\"sum 0\", x)\n+\t\tpanic(\"fail\")\n+\t}\n+\tif x := sum4(10); x != 4*10 {\n+\t\tprintln(\"sum 10\", x)\n+\t\tpanic(\"fail\")\n+\t}\n+\tif x := sum4(1, 8); x != 4*9 {\n+\t\tprintln(\"sum 9\", x)\n+\t\tpanic(\"fail\")\n+\t}\n \tif x := intersum(1, 2, 3); x != 6 {\n \t\tprintln(\"intersum 6\", x)\n \t\tpanic(\"fail\")"}, {"sha": "6df94241a0c8e4eba434a39d4512df1c4675d9db", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug252.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f6961cf116360adc27324d52d6e6a8ccf7c96c2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug252.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f6961cf116360adc27324d52d6e6a8ccf7c96c2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug252.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug252.go?ref=6f6961cf116360adc27324d52d6e6a8ccf7c96c2", "patch": "@@ -7,9 +7,9 @@\n package main\n \n func f(args ...int) {\n-\tg(args)\t// ERROR \"[.][.][.] mismatch\"\n+\tg(args)\n }\n \n func g(args ...interface{}) {\n-\tf(args)\t// ERROR \"[.][.][.] mismatch\"\n+\tf(args)\t// ERROR \"[.][.][.]|incompatible\"\n }"}]}