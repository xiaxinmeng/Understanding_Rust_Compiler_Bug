{"sha": "b3754f1becf5cc8c20df587db515505247a6516e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM3NTRmMWJlY2Y1Y2M4YzIwZGY1ODdkYjUxNTUwNTI0N2E2NTE2ZQ==", "commit": {"author": {"name": "Chris Fairles", "email": "chris.fairles@gmail.com", "date": "2008-06-26T11:36:02Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-06-26T11:36:02Z"}, "message": "pointer_array.cc: New.\n\n2008-06-26  Chris Fairles  <chris.fairles@gmail.com>\n\n        * testsuite/20_util/unique_ptr/cons/pointer_array.cc: New.\n        * testsuite/20_util/unique_ptr/cons/pointer.cc: Likewise.\n        * testsuite/20_util/unique_ptr/cons/pointer_array_convertible.cc:\n        Likewise.\n        * testsuite/20_util/unique_ptr/assign/move_array.cc: Likewise.\n        * testsuite/20_util/unique_ptr/assign/move.cc: Likewise.\n        * testsuite/20_util/unique_ptr/specialized_algorithms/\n        comparisons_array.cc: Likewise.\n        * testsuite/20_util/unique_ptr/specialized_algorithms/comparisons.cc:\n        Likewise\n        * testsuite/20_util/unique_ptr/specialized_algorithms/swap.cc:\n        Likewise.\n\nFrom-SVN: r137147", "tree": {"sha": "bef0603e65b5cbf225ec9c37f5e8aa7510dfa585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bef0603e65b5cbf225ec9c37f5e8aa7510dfa585"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3754f1becf5cc8c20df587db515505247a6516e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3754f1becf5cc8c20df587db515505247a6516e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3754f1becf5cc8c20df587db515505247a6516e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3754f1becf5cc8c20df587db515505247a6516e/comments", "author": {"login": "chrisfearless", "id": 812000, "node_id": "MDQ6VXNlcjgxMjAwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/812000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisfearless", "html_url": "https://github.com/chrisfearless", "followers_url": "https://api.github.com/users/chrisfearless/followers", "following_url": "https://api.github.com/users/chrisfearless/following{/other_user}", "gists_url": "https://api.github.com/users/chrisfearless/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisfearless/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisfearless/subscriptions", "organizations_url": "https://api.github.com/users/chrisfearless/orgs", "repos_url": "https://api.github.com/users/chrisfearless/repos", "events_url": "https://api.github.com/users/chrisfearless/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisfearless/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2dcc0099c86b043b27d14d173d7b0f5db04620e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dcc0099c86b043b27d14d173d7b0f5db04620e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dcc0099c86b043b27d14d173d7b0f5db04620e7"}], "stats": {"total": 546, "additions": 546, "deletions": 0}, "files": [{"sha": "777170dbc72410c3f2d12272e2a45d2589916204", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3754f1becf5cc8c20df587db515505247a6516e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3754f1becf5cc8c20df587db515505247a6516e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b3754f1becf5cc8c20df587db515505247a6516e", "patch": "@@ -1,3 +1,18 @@\n+2008-06-26  Chris Fairles  <chris.fairles@gmail.com>\n+\n+        * testsuite/20_util/unique_ptr/cons/pointer_array.cc: New.\n+        * testsuite/20_util/unique_ptr/cons/pointer.cc: Likewise.\n+        * testsuite/20_util/unique_ptr/cons/pointer_array_convertible.cc:\n+        Likewise.\n+        * testsuite/20_util/unique_ptr/assign/move_array.cc: Likewise.\n+        * testsuite/20_util/unique_ptr/assign/move.cc: Likewise.\n+        * testsuite/20_util/unique_ptr/specialized_algorithms/\n+        comparisons_array.cc: Likewise.\n+        * testsuite/20_util/unique_ptr/specialized_algorithms/comparisons.cc:\n+        Likewise\n+        * testsuite/20_util/unique_ptr/specialized_algorithms/swap.cc:\n+        Likewise.\n+\n 2008-06-26  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/parallel/base.h (plus, multiplies): Use __typeof__,"}, {"sha": "59f2ccc8323cdf790ae7e42f109b52d7fe7c5800", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/assign/move.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3754f1becf5cc8c20df587db515505247a6516e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fmove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3754f1becf5cc8c20df587db515505247a6516e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fmove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fmove.cc?ref=b3754f1becf5cc8c20df587db515505247a6516e", "patch": "@@ -0,0 +1,53 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 20.6.11 Template class unique_ptr [unique.ptr]\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct B { virtual ~B() {} };\n+struct D : public B {};\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  D *d = new D;\n+  std::unique_ptr<D> p1(d);\n+  std::unique_ptr<D> p2(new D);\n+  p2 = std::move(p1);\n+\n+  VERIFY( p1.get() == 0 );\n+  VERIFY( p2.get() == d );\n+\n+  std::unique_ptr<B> p3(new B);\n+  p3 = std::move(p2);\n+\n+  VERIFY( p2.get() == 0 );\n+  VERIFY( p3.get() == d );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "354024837add1d7feb22a77f25cba902a9245949", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/assign/move_array.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3754f1becf5cc8c20df587db515505247a6516e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fmove_array.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3754f1becf5cc8c20df587db515505247a6516e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fmove_array.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fmove_array.cc?ref=b3754f1becf5cc8c20df587db515505247a6516e", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 20.6.11 Template class unique_ptr [unique.ptr]\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct B { virtual ~B() {} };\n+struct D : public B {};\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  D *d = new D[3];\n+  std::unique_ptr<D[]> p1(d);\n+  std::unique_ptr<D[]> p2;\n+  p2 = std::move(p1);\n+    \n+  VERIFY( p1.get() == 0 );\n+  VERIFY( p2.get() == d );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "19e498bf7773af41d6565f601df66d8e0a8f2f4d", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/cons/pointer.cc", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3754f1becf5cc8c20df587db515505247a6516e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fpointer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3754f1becf5cc8c20df587db515505247a6516e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fpointer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fpointer.cc?ref=b3754f1becf5cc8c20df587db515505247a6516e", "patch": "@@ -0,0 +1,118 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 20.6.11 Template class unique_ptr [unique.ptr]\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct A\n+{\n+  A() { ++ctor_count; }\n+  virtual ~A() { ++dtor_count; }\n+  static long ctor_count;\n+  static long dtor_count;\n+};\n+long A::ctor_count = 0;\n+long A::dtor_count = 0;\n+\n+struct B : A\n+{\n+  B() { ++ctor_count; }\n+  virtual ~B() { ++dtor_count; }\n+  static long ctor_count;\n+  static long dtor_count;\n+};\n+long B::ctor_count = 0;\n+long B::dtor_count = 0;\n+\n+\n+struct reset_count_struct\n+{\n+  ~reset_count_struct()\n+  {\n+    A::ctor_count = 0;\n+    A::dtor_count = 0;\n+    B::ctor_count = 0;\n+    B::dtor_count = 0;\n+  }\n+};\n+\n+// 20.6.11.2.1 unique_ptr constructors [unique.ptr.single.ctor]\n+\n+// Construction from pointer\n+void\n+test01()\n+{\n+  reset_count_struct __attribute__((unused)) reset;\n+  bool test __attribute__((unused)) = true;\n+\n+  std::unique_ptr<A> A_default;\n+  VERIFY( A_default.get() == 0 );\n+  VERIFY( A::ctor_count == 0 );\n+  VERIFY( A::dtor_count == 0 );\n+  VERIFY( B::ctor_count == 0 );\n+  VERIFY( B::dtor_count == 0 );\n+\n+  std::unique_ptr<A> A_from_A(new A);\n+  VERIFY( A_from_A.get() != 0 );\n+  VERIFY( A::ctor_count == 1 );\n+  VERIFY( A::dtor_count == 0 );\n+  VERIFY( B::ctor_count == 0 );\n+  VERIFY( B::dtor_count == 0 );\n+\n+  std::unique_ptr<A> A_from_B(new B);\n+  VERIFY( A_from_B.get() != 0 );\n+  VERIFY( A::ctor_count == 2 );\n+  VERIFY( A::dtor_count == 0 );\n+  VERIFY( B::ctor_count == 1 );\n+  VERIFY( B::dtor_count == 0 );\n+}\n+\n+void\n+test02()\n+{\n+  reset_count_struct __attribute__((unused)) reset;\n+  bool test __attribute__((unused)) = true;\n+\n+  A * const A_default = 0;\n+  std::unique_ptr<A> p1(A_default);\n+  VERIFY( p1.get() == 0 );\n+  VERIFY( A::ctor_count == 0 );\n+  VERIFY( A::dtor_count == 0 );\n+  VERIFY( B::ctor_count == 0 );\n+  VERIFY( B::dtor_count == 0 );\n+\n+  A * const A_from_A = new A;\n+  std::unique_ptr<A> p2(A_from_A);\n+  VERIFY( p2.get() == A_from_A );\n+  VERIFY( A::ctor_count == 1 );\n+  VERIFY( A::dtor_count == 0 );\n+  VERIFY( B::ctor_count == 0 );\n+  VERIFY( B::dtor_count == 0 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "bd12cc6ffe80c6fa8dc3199cf14a3aea53fec79f", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/cons/pointer_array.cc", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3754f1becf5cc8c20df587db515505247a6516e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fpointer_array.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3754f1becf5cc8c20df587db515505247a6516e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fpointer_array.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fpointer_array.cc?ref=b3754f1becf5cc8c20df587db515505247a6516e", "patch": "@@ -0,0 +1,86 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct A\n+{\n+  A() { ++ctor_count; }\n+  virtual ~A() { ++dtor_count; }\n+  static long ctor_count;\n+  static long dtor_count;\n+};\n+long A::ctor_count = 0;\n+long A::dtor_count = 0;\n+\n+struct B : A\n+{\n+  B() { ++ctor_count; }\n+  virtual ~B() { ++dtor_count; }\n+  static long ctor_count;\n+  static long dtor_count;\n+};\n+long B::ctor_count = 0;\n+long B::dtor_count = 0;\n+\n+\n+struct reset_count_struct\n+{\n+  ~reset_count_struct()\n+  {\n+    A::ctor_count = 0;\n+    A::dtor_count = 0;\n+    B::ctor_count = 0;\n+    B::dtor_count = 0;\n+  }\n+};\n+\n+\n+// 20.4.5.1 unique_ptr constructors [unique.ptr.cons]\n+\n+// Construction from pointer\n+void\n+test01()\n+{\n+  reset_count_struct __attribute__((unused)) reset;\n+  bool test __attribute__((unused)) = true;\n+\n+  std::unique_ptr<A[]> A_default;\n+  VERIFY( A_default.get() == 0 );\n+  VERIFY( A::ctor_count == 0 );\n+  VERIFY( A::dtor_count == 0 );\n+  VERIFY( B::ctor_count == 0 );\n+  VERIFY( B::dtor_count == 0 );\n+\n+  std::unique_ptr<A[]> A_from_A(new A[3]);\n+  VERIFY( A_from_A.get() != 0 );\n+  VERIFY( A::ctor_count == 3 );\n+  VERIFY( A::dtor_count == 0 );\n+  VERIFY( B::ctor_count == 0 );\n+  VERIFY( B::dtor_count == 0 );\n+}\n+\n+int \n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0906b09507ac47365bc880cba72458b5e9622a55", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/cons/pointer_array_convertible.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3754f1becf5cc8c20df587db515505247a6516e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fpointer_array_convertible.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3754f1becf5cc8c20df587db515505247a6516e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fpointer_array_convertible.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fpointer_array_convertible.cc?ref=b3754f1becf5cc8c20df587db515505247a6516e", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <memory>\n+\n+struct A\n+{\n+};\n+\n+struct B : A\n+{\n+  virtual ~B() { }\n+};\n+\n+// 20.4.5.1 unique_ptr constructors [unique.ptr.cons]\n+\n+// Construction from pointer of derived type\n+void\n+test01()\n+{\n+  std::unique_ptr<B[]> B_from_A(new A[3]); //{ dg-error \"invalid conversion from\" }\n+}\n+//{ dg-excess-errors \"initialization\" }"}, {"sha": "51aef4c19a0fee4eb408badc860e41ce88b3d14c", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/specialized_algorithms/comparisons.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3754f1becf5cc8c20df587db515505247a6516e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fspecialized_algorithms%2Fcomparisons.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3754f1becf5cc8c20df587db515505247a6516e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fspecialized_algorithms%2Fcomparisons.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fspecialized_algorithms%2Fcomparisons.cc?ref=b3754f1becf5cc8c20df587db515505247a6516e", "patch": "@@ -0,0 +1,69 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 20.6.11 Template class unique_ptr [unique.ptr]\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct A\n+{\n+  virtual ~A() { }\n+};\n+\n+struct B : A\n+{\n+};\n+\n+// 20.6.11.5 unqiue_ptr specialized algorithms [unique.ptr.special]\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::unique_ptr<A> p1;\n+  std::unique_ptr<A> p2;\n+\n+  VERIFY( p1 == p2 );\n+  VERIFY( !(p1 != p2) );\n+  VERIFY( !(p1 < p2) && !(p1 > p2) );\n+}\n+\n+void\n+test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  std::unique_ptr<A> p1;\n+  std::unique_ptr<A> p2(new A);\n+\n+  VERIFY( p1 != p2 );\n+  VERIFY( !(p1 == p2) );\n+  VERIFY( (p1 < p2) || (p1 > p2) );\n+  VERIFY( ((p1 <= p2) && (p1 != p2)) || ((p1 >= p2) && (p1 != p2)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "89e50242740b8cfad06181ed3d3dbf4b837f8827", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/specialized_algorithms/comparisons_array.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3754f1becf5cc8c20df587db515505247a6516e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fspecialized_algorithms%2Fcomparisons_array.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3754f1becf5cc8c20df587db515505247a6516e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fspecialized_algorithms%2Fcomparisons_array.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fspecialized_algorithms%2Fcomparisons_array.cc?ref=b3754f1becf5cc8c20df587db515505247a6516e", "patch": "@@ -0,0 +1,69 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 20.6.11 Template class unique_ptr [unique.ptr]\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct A\n+{\n+  virtual ~A() { }\n+};\n+\n+struct B : A\n+{\n+};\n+\n+// 20.6.11.5 unqiue_ptr specialized algorithms [unique.ptr.special]\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::unique_ptr<A[]> p1;\n+  std::unique_ptr<A[]> p2;\n+\n+  VERIFY( p1 == p2 );\n+  VERIFY( !(p1 != p2) );\n+  VERIFY( !(p1 < p2) && !(p1 > p2) );\n+}\n+\n+void\n+test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  std::unique_ptr<A[]> p1;\n+  std::unique_ptr<A[]> p2(new A[3]);\n+\n+  VERIFY( p1 != p2 );\n+  VERIFY( !(p1 == p2) );\n+  VERIFY( (p1 < p2) || (p1 > p2) );\n+  VERIFY( ((p1 <= p2) && (p1 != p2)) || ((p1 >= p2) && (p1 != p2)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "1bd864464fb36f2d8d81387b09b46aa0a2f25345", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/specialized_algorithms/swap.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3754f1becf5cc8c20df587db515505247a6516e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fspecialized_algorithms%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3754f1becf5cc8c20df587db515505247a6516e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fspecialized_algorithms%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fspecialized_algorithms%2Fswap.cc?ref=b3754f1becf5cc8c20df587db515505247a6516e", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct A {};\n+\n+//20.6.11.5 unique_ptr specialized algorithms [unique.ptr.special]\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+ \n+  std::unique_ptr<A> p1;\n+  std::unique_ptr<A> p2(new A);\n+  std::unique_ptr<A> p3;\n+  \n+  std::swap(p3, p2);\n+\n+  VERIFY( p1 != p3 );\n+  VERIFY( p2 != p3 );\n+  VERIFY( p1 == p2 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}