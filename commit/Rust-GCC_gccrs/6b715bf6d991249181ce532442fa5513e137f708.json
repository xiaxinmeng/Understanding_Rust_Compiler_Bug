{"sha": "6b715bf6d991249181ce532442fa5513e137f708", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI3MTViZjZkOTkxMjQ5MTgxY2U1MzI0NDJmYTU1MTNlMTM3ZjcwOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2016-05-04T16:36:51Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2016-05-04T16:36:51Z"}, "message": "cgraph.c (cgraph_node::call_for_symbol_thunks_and_aliases): Check availability on NODE, too.\n\n\n\t* cgraph.c (cgraph_node::call_for_symbol_thunks_and_aliases):\n\tCheck availability on NODE, too.\n\t* cgraph.h (symtab_node::call_for_symbol_and_aliases): Likewise.\n\t(cgraph_node::call_for_symbol_and_aliases): Likewise.\n\t(varpool_node::call_for_symbol_and_aliase): Likewise.\n\t* ipa-pure-const.c (add_new_function): Analyze all bodies.\n\t(propagate_pure_const): Propagate across interposable functions, too.\n\t(skip_function_for_local_pure_const): Do not skip interposable bodies\n\twith aliases.\n\t(pass_local_pure_const::execute): Update.\n\n\t* gcc.dg/ipa/pure-const-3.c: New testcase.\n\nFrom-SVN: r235887", "tree": {"sha": "9eaf587465ab186e64c5890827bfe771bf2b2f5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9eaf587465ab186e64c5890827bfe771bf2b2f5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b715bf6d991249181ce532442fa5513e137f708", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b715bf6d991249181ce532442fa5513e137f708", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b715bf6d991249181ce532442fa5513e137f708", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b715bf6d991249181ce532442fa5513e137f708/comments", "author": null, "committer": null, "parents": [{"sha": "deef71132774618d06d571e935d10753f92d8ad9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deef71132774618d06d571e935d10753f92d8ad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deef71132774618d06d571e935d10753f92d8ad9"}], "stats": {"total": 187, "additions": 123, "deletions": 64}, "files": [{"sha": "d3d54ec82a538e24678e9ba355a2e455352b551c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b715bf6d991249181ce532442fa5513e137f708/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b715bf6d991249181ce532442fa5513e137f708/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b715bf6d991249181ce532442fa5513e137f708", "patch": "@@ -1,3 +1,16 @@\n+2016-05-04  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* cgraph.c (cgraph_node::call_for_symbol_thunks_and_aliases):\n+\tCheck availability on NODE, too.\n+\t* cgraph.h (symtab_node::call_for_symbol_and_aliases): Likewise.\n+\t(cgraph_node::call_for_symbol_and_aliases): Likewise.\n+\t(varpool_node::call_for_symbol_and_aliase): Likewise.\n+\t* ipa-pure-const.c (add_new_function): Analyze all bodies.\n+\t(propagate_pure_const): Propagate across interposable functions, too.\n+\t(skip_function_for_local_pure_const): Do not skip interposable bodies\n+\twith aliases.\n+\t(pass_local_pure_const::execute): Update.\n+\n 2016-05-04  Marek Polacek  <polacek@redhat.com>\n \n \t* doc/invoke.texi: Document -Wdangling-else."}, {"sha": "0c6ff93d6253928d2e5bec4d632ea27cd9e6c441", "filename": "gcc/cgraph.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b715bf6d991249181ce532442fa5513e137f708/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b715bf6d991249181ce532442fa5513e137f708/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=6b715bf6d991249181ce532442fa5513e137f708", "patch": "@@ -2289,7 +2289,7 @@ cgraph_node::can_be_local_p (void)\n }\n \n /* Call callback on cgraph_node, thunks and aliases associated to cgraph_node.\n-   When INCLUDE_OVERWRITABLE is false, overwritable aliases and thunks are\n+   When INCLUDE_OVERWRITABLE is false, overwritable symbols are\n    skipped.  When EXCLUDE_VIRTUAL_THUNKS is true, virtual thunks are\n    skipped.  */\n bool\n@@ -2301,9 +2301,14 @@ cgraph_node::call_for_symbol_thunks_and_aliases (bool (*callback)\n {\n   cgraph_edge *e;\n   ipa_ref *ref;\n+  enum availability avail = AVAIL_AVAILABLE;\n \n-  if (callback (this, data))\n-    return true;\n+  if (include_overwritable\n+      || (avail = get_availability ()) > AVAIL_INTERPOSABLE)\n+    {\n+      if (callback (this, data))\n+        return true;\n+    }\n   FOR_EACH_ALIAS (this, ref)\n     {\n       cgraph_node *alias = dyn_cast <cgraph_node *> (ref->referring);\n@@ -2314,7 +2319,7 @@ cgraph_node::call_for_symbol_thunks_and_aliases (bool (*callback)\n \t\t\t\t\t\t     exclude_virtual_thunks))\n \t  return true;\n     }\n-  if (get_availability () <= AVAIL_INTERPOSABLE)\n+  if (avail <= AVAIL_INTERPOSABLE)\n     return false;\n   for (e = callers; e; e = e->next_caller)\n     if (e->caller->thunk.thunk_p"}, {"sha": "d714ad75189f8daf5ee845b3e9510ebfcea64466", "filename": "gcc/cgraph.h", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b715bf6d991249181ce532442fa5513e137f708/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b715bf6d991249181ce532442fa5513e137f708/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=6b715bf6d991249181ce532442fa5513e137f708", "patch": "@@ -3096,24 +3096,27 @@ symtab_node::get_availability (symtab_node *ref)\n }\n \n /* Call calback on symtab node and aliases associated to this node.\n-   When INCLUDE_OVERWRITABLE is false, overwritable aliases and thunks are\n-   skipped. */\n+   When INCLUDE_OVERWRITABLE is false, overwritable symbols are skipped. */\n \n inline bool\n symtab_node::call_for_symbol_and_aliases (bool (*callback) (symtab_node *,\n \t\t\t\t\t\t\t    void *),\n \t\t\t\t\t  void *data,\n \t\t\t\t\t  bool include_overwritable)\n {\n-  if (callback (this, data))\n-    return true;\n+  if (include_overwritable\n+      || get_availability () > AVAIL_INTERPOSABLE)\n+    {\n+      if (callback (this, data))\n+        return true;\n+    }\n   if (has_aliases_p ())\n     return call_for_symbol_and_aliases_1 (callback, data, include_overwritable);\n   return false;\n }\n \n /* Call callback on function and aliases associated to the function.\n-   When INCLUDE_OVERWRITABLE is false, overwritable aliases and thunks are\n+   When INCLUDE_OVERWRITABLE is false, overwritable symbols are\n    skipped.  */\n \n inline bool\n@@ -3122,15 +3125,19 @@ cgraph_node::call_for_symbol_and_aliases (bool (*callback) (cgraph_node *,\n \t\t\t\t\t  void *data,\n \t\t\t\t\t  bool include_overwritable)\n {\n-  if (callback (this, data))\n-    return true;\n+  if (include_overwritable\n+      || get_availability () > AVAIL_INTERPOSABLE)\n+    {\n+      if (callback (this, data))\n+        return true;\n+    }\n   if (has_aliases_p ())\n     return call_for_symbol_and_aliases_1 (callback, data, include_overwritable);\n   return false;\n }\n \n /* Call calback on varpool symbol and aliases associated to varpool symbol.\n-   When INCLUDE_OVERWRITABLE is false, overwritable aliases and thunks are\n+   When INCLUDE_OVERWRITABLE is false, overwritable symbols are\n    skipped. */\n \n inline bool\n@@ -3139,8 +3146,12 @@ varpool_node::call_for_symbol_and_aliases (bool (*callback) (varpool_node *,\n \t\t\t\t\t   void *data,\n \t\t\t\t\t   bool include_overwritable)\n {\n-  if (callback (this, data))\n-    return true;\n+  if (include_overwritable\n+      || get_availability () > AVAIL_INTERPOSABLE)\n+    {\n+      if (callback (this, data))\n+        return true;\n+    }\n   if (has_aliases_p ())\n     return call_for_symbol_and_aliases_1 (callback, data, include_overwritable);\n   return false;"}, {"sha": "ba76275a696792ecd89b0346fe66755a2c455cc1", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 52, "deletions": 50, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b715bf6d991249181ce532442fa5513e137f708/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b715bf6d991249181ce532442fa5513e137f708/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=6b715bf6d991249181ce532442fa5513e137f708", "patch": "@@ -927,8 +927,6 @@ analyze_function (struct cgraph_node *fn, bool ipa)\n static void\n add_new_function (struct cgraph_node *node, void *data ATTRIBUTE_UNUSED)\n {\n- if (node->get_availability () < AVAIL_INTERPOSABLE)\n-   return;\n   /* There are some shared nodes, in particular the initializers on\n      static declarations.  We do not need to scan them more than once\n      since all we would be interested in are the addressof\n@@ -1222,6 +1220,7 @@ propagate_pure_const (void)\n   int i;\n   struct ipa_dfs_info * w_info;\n   bool remove_p = false;\n+  bool has_cdtor;\n \n   order_pos = ipa_reduced_postorder (order, true, false,\n \t\t\t\t     ignore_edge_for_pure_const);\n@@ -1274,26 +1273,6 @@ propagate_pure_const (void)\n \t  if (pure_const_state == IPA_NEITHER)\n \t    break;\n \n-\t  /* For interposable nodes we can not assume anything.\n-\t     FIXME: It should be safe to remove this conditional and allow\n-\t     interposable functions with non-interposable aliases next\n-\t     stage 1.  */\n-\t  if (w->get_availability () == AVAIL_INTERPOSABLE)\n-\t    {\n-\t      worse_state (&pure_const_state, &looping,\n-\t\t\t   w_l->state_previously_known,\n-\t\t\t   w_l->looping_previously_known,\n-\t\t\t   NULL, NULL);\n-\t      if (dump_file && (dump_flags & TDF_DETAILS))\n-\t\t{\n-\t\t  fprintf (dump_file,\n-\t\t\t   \"    Interposable. state %s looping %i\\n\",\n-\t\t\t   pure_const_names[w_l->state_previously_known],\n-\t\t\t   w_l->looping_previously_known);\n-\t\t}\n-\t      break;\n-\t    }\n-\n \t  count++;\n \n \t  /* We consider recursive cycles as possibly infinite.\n@@ -1506,9 +1485,22 @@ propagate_pure_const (void)\n \t\t\t       this_looping ? \"looping \" : \"\",\n \t\t\t       w->name ());\n \t\t  }\n-\t\tremove_p |= w->call_for_symbol_and_aliases (cdtor_p,\n-\t\t\t\t\t\t\t    NULL, true);\n-\t\tw->set_const_flag (true, this_looping);\n+\t\t/* Turning constructor or destructor to non-looping const/pure\n+\t\t   enables us to possibly remove the function completely.  */\n+\t\tif (this_looping)\n+\t\t  has_cdtor = false;\n+\t\telse\n+\t\t  has_cdtor = w->call_for_symbol_and_aliases (cdtor_p,\n+\t\t\t\t\t\t\t      NULL, true);\n+\t\tif (w->set_const_flag (true, this_looping))\n+\t\t  {\n+\t\t    if (dump_file)\n+\t\t      fprintf (dump_file,\n+\t\t\t       \"Declaration updated to be %sconst: %s\\n\",\n+\t\t\t       this_looping ? \"looping \" : \"\",\n+\t\t\t       w->name ());\n+\t\t    remove_p |= has_cdtor;\n+\t\t  }\n \t\tbreak;\n \n \t      case IPA_PURE:\n@@ -1520,9 +1512,20 @@ propagate_pure_const (void)\n \t\t\t       this_looping ? \"looping \" : \"\",\n \t\t\t       w->name ());\n \t\t  }\n-\t\tremove_p |= w->call_for_symbol_and_aliases (cdtor_p,\n-\t\t\t\t\t\t\t    NULL, true);\n-\t\tw->set_pure_flag (true, this_looping);\n+\t\tif (this_looping)\n+\t\t  has_cdtor = false;\n+\t\telse\n+\t\t  has_cdtor = w->call_for_symbol_and_aliases (cdtor_p,\n+\t\t\t\t\t\t\t      NULL, true);\n+\t\tif (w->set_pure_flag (true, this_looping))\n+\t\t  {\n+\t\t    if (dump_file)\n+\t\t      fprintf (dump_file,\n+\t\t\t       \"Declaration updated to be %spure: %s\\n\",\n+\t\t\t       this_looping ? \"looping \" : \"\",\n+\t\t\t       w->name ());\n+\t\t    remove_p |= has_cdtor;\n+\t\t  }\n \t\tbreak;\n \n \t      default:\n@@ -1723,11 +1726,14 @@ skip_function_for_local_pure_const (struct cgraph_node *node)\n         fprintf (dump_file, \"Function called in recursive cycle; ignoring\\n\");\n       return true;\n     }\n-  if (node->get_availability () <= AVAIL_INTERPOSABLE)\n+  /* Save some work and do not analyze functions which are interposable and\n+     do not have any non-interposable aliases.  */\n+  if (node->get_availability () <= AVAIL_INTERPOSABLE\n+      && !node->has_aliases_p ())\n     {\n       if (dump_file)\n         fprintf (dump_file,\n-\t\t \"Function is not available or interposable; not analyzing.\\n\");\n+\t\t \"Function is interposable; not analyzing.\\n\");\n       return true;\n     }\n   return false;\n@@ -1806,11 +1812,6 @@ pass_local_pure_const::execute (function *fun)\n       if (!TREE_READONLY (current_function_decl))\n \t{\n \t  warn_function_const (current_function_decl, !l->looping);\n-\t  if (!skip)\n-\t    {\n-\t      node->set_const_flag (true, l->looping);\n-\t      changed = true;\n-\t    }\n \t  if (dump_file)\n \t    fprintf (dump_file, \"Function found to be %sconst: %s\\n\",\n \t\t     l->looping ? \"looping \" : \"\",\n@@ -1819,25 +1820,23 @@ pass_local_pure_const::execute (function *fun)\n       else if (DECL_LOOPING_CONST_OR_PURE_P (current_function_decl)\n \t       && !l->looping)\n \t{\n-\t  if (!skip)\n-\t    {\n-\t      node->set_const_flag (true, false);\n-\t      changed = true;\n-\t    }\n \t  if (dump_file)\n \t    fprintf (dump_file, \"Function found to be non-looping: %s\\n\",\n \t\t     current_function_name ());\n \t}\n+      if (!skip && node->set_const_flag (true, l->looping))\n+\t{\n+\t  if (dump_file)\n+\t    fprintf (dump_file, \"Declaration updated to be %sconst: %s\\n\",\n+\t\t     l->looping ? \"looping \" : \"\",\n+\t\t     current_function_name ());\n+\t  changed = true;\n+\t}\n       break;\n \n     case IPA_PURE:\n       if (!DECL_PURE_P (current_function_decl))\n \t{\n-\t  if (!skip)\n-\t    {\n-\t      node->set_pure_flag (true, l->looping);\n-\t      changed = true;\n-\t    }\n \t  warn_function_pure (current_function_decl, !l->looping);\n \t  if (dump_file)\n \t    fprintf (dump_file, \"Function found to be %spure: %s\\n\",\n@@ -1847,15 +1846,18 @@ pass_local_pure_const::execute (function *fun)\n       else if (DECL_LOOPING_CONST_OR_PURE_P (current_function_decl)\n \t       && !l->looping)\n \t{\n-\t  if (!skip)\n-\t    {\n-\t      node->set_pure_flag (true, false);\n-\t      changed = true;\n-\t    }\n \t  if (dump_file)\n \t    fprintf (dump_file, \"Function found to be non-looping: %s\\n\",\n \t\t     current_function_name ());\n \t}\n+      if (!skip && node->set_pure_flag (true, l->looping))\n+\t{\n+\t  if (dump_file)\n+\t    fprintf (dump_file, \"Declaration updated to be %spure: %s\\n\",\n+\t\t     l->looping ? \"looping \" : \"\",\n+\t\t     current_function_name ());\n+\t  changed = true;\n+\t}\n       break;\n \n     default:"}, {"sha": "5fe37cc248035f5e40ddc0957bfe1a4d74491621", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b715bf6d991249181ce532442fa5513e137f708/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b715bf6d991249181ce532442fa5513e137f708/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b715bf6d991249181ce532442fa5513e137f708", "patch": "@@ -1,3 +1,7 @@\n+2016-05-04  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/ipa/pure-const-3.c: New testcase.\n+\n 2016-05-04  Marek Polacek  <polacek@redhat.com>\n \n \t* c-c++-common/Wdangling-else-1.c: New test."}, {"sha": "036b82860dd2899d6ab3efd86339dda8ba576dfa", "filename": "gcc/testsuite/gcc.dg/ipa/pure-const-3.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b715bf6d991249181ce532442fa5513e137f708/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpure-const-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b715bf6d991249181ce532442fa5513e137f708/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpure-const-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpure-const-3.c?ref=6b715bf6d991249181ce532442fa5513e137f708", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-require-alias \"\" }  */\n+/* { dg-options \"-O2 -fdump-tree-local-pure-const1\" } */\n+\n+__attribute__ ((weak))\n+__attribute__ ((noinline))\n+int a(int v)\n+{\n+  return v;\n+}\n+__attribute__ ((noinline))\n+static int b(int v) __attribute__ ((alias(\"a\")));\n+int\n+main()\n+{\n+  int c = a(1)==a(1);\n+  int d = b(1)==b(1);\n+  if (__builtin_constant_p (c))\n+    __builtin_abort ();\n+  if (!__builtin_constant_p (d))\n+    __builtin_abort ();\n+  return 0;\n+}\n+/* { dg-final { scan-ipa-dump \"found to be const\" \"pure-const\"} } */"}]}