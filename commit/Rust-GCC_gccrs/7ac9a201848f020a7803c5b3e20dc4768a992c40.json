{"sha": "7ac9a201848f020a7803c5b3e20dc4768a992c40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FjOWEyMDE4NDhmMDIwYTc4MDNjNWIzZTIwZGM0NzY4YTk5MmM0MA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2019-06-11T12:48:26Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2019-06-11T12:48:26Z"}, "message": "fold_real_zero_addition_p for vectors\n\n2019-06-11  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR tree-optimization/62041\n\t* fold-const.c (fold_real_zero_addition_p): Handle vectors.\n\nFrom-SVN: r272151", "tree": {"sha": "27d7bb195ce6f6a3b993797ddb942ffb1d895886", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27d7bb195ce6f6a3b993797ddb942ffb1d895886"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ac9a201848f020a7803c5b3e20dc4768a992c40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ac9a201848f020a7803c5b3e20dc4768a992c40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ac9a201848f020a7803c5b3e20dc4768a992c40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ac9a201848f020a7803c5b3e20dc4768a992c40/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "92812757648109dc6cd35a52374ab3f6e9f44f78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92812757648109dc6cd35a52374ab3f6e9f44f78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92812757648109dc6cd35a52374ab3f6e9f44f78"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "211a55db079d35fbd6e8aef3a2cb22a3822891e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac9a201848f020a7803c5b3e20dc4768a992c40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac9a201848f020a7803c5b3e20dc4768a992c40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ac9a201848f020a7803c5b3e20dc4768a992c40", "patch": "@@ -1,3 +1,8 @@\n+2019-06-11  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR tree-optimization/62041\n+\t* fold-const.c (fold_real_zero_addition_p): Handle vectors.\n+\n 2019-06-11  Jason Merrill  <jason@redhat.com>\n \n \t* gdbhooks.py (TreePrinter.to_string): Recognize ggc_free'd memory."}, {"sha": "0ca472d422fd3f9b778c3cace51135eae74fb2fc", "filename": "gcc/fold-const.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac9a201848f020a7803c5b3e20dc4768a992c40/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac9a201848f020a7803c5b3e20dc4768a992c40/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=7ac9a201848f020a7803c5b3e20dc4768a992c40", "patch": "@@ -6722,15 +6722,21 @@ fold_real_zero_addition_p (const_tree type, const_tree addend, int negate)\n     return false;\n \n   /* Don't allow the fold with -fsignaling-nans.  */\n-  if (HONOR_SNANS (element_mode (type)))\n+  if (HONOR_SNANS (type))\n     return false;\n \n   /* Allow the fold if zeros aren't signed, or their sign isn't important.  */\n-  if (!HONOR_SIGNED_ZEROS (element_mode (type)))\n+  if (!HONOR_SIGNED_ZEROS (type))\n     return true;\n \n+  /* There is no case that is safe for all rounding modes.  */\n+  if (HONOR_SIGN_DEPENDENT_ROUNDING (type))\n+    return false;\n+\n   /* In a vector or complex, we would need to check the sign of all zeros.  */\n-  if (TREE_CODE (addend) != REAL_CST)\n+  if (TREE_CODE (addend) == VECTOR_CST)\n+    addend = uniform_vector_p (addend);\n+  if (!addend || TREE_CODE (addend) != REAL_CST)\n     return false;\n \n   /* Treat x + -0 as x - 0 and x - -0 as x + 0.  */\n@@ -6739,9 +6745,8 @@ fold_real_zero_addition_p (const_tree type, const_tree addend, int negate)\n \n   /* The mode has signed zeros, and we have to honor their sign.\n      In this situation, there is only one case we can return true for.\n-     X - 0 is the same as X unless rounding towards -infinity is\n-     supported.  */\n-  return negate && !HONOR_SIGN_DEPENDENT_ROUNDING (element_mode (type));\n+     X - 0 is the same as X with default rounding.  */\n+  return negate;\n }\n \n /* Subroutine of match.pd that optimizes comparisons of a division by"}]}