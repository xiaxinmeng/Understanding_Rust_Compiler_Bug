{"sha": "8b033a8a927afab88532af22bdb7cd87d57e1f6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIwMzNhOGE5MjdhZmFiODg1MzJhZjIyYmRiN2NkODdkNTdlMWY2ZA==", "commit": {"author": {"name": "Sofiane Naci", "email": "sofiane.naci@arm.com", "date": "2013-06-12T15:34:06Z"}, "committer": {"name": "Sofiane Naci", "email": "sofiane@gcc.gnu.org", "date": "2013-06-12T15:34:06Z"}, "message": "aarch64-simd.md (aarch64_combine<mode>): convert to split.\n\n\t* config/aarch64/aarch64-simd.md (aarch64_combine<mode>): convert to split.\n\t(aarch64_simd_combine<mode>): New instruction expansion.\n\t* config/aarch64/aarch64-protos.h (aarch64_split_simd_combine): New\n\tfunction prototype.\n\t* config/aarch64/aarch64.c (aarch64_split_combine): New function.\n\t* config/aarch64/iterators.md (Vdbl): Add entry for DF.\n\nFrom-SVN: r200020", "tree": {"sha": "8c37cad439e7ee4184c59064c22dc3e25a06f0a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c37cad439e7ee4184c59064c22dc3e25a06f0a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b033a8a927afab88532af22bdb7cd87d57e1f6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b033a8a927afab88532af22bdb7cd87d57e1f6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b033a8a927afab88532af22bdb7cd87d57e1f6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b033a8a927afab88532af22bdb7cd87d57e1f6d/comments", "author": null, "committer": null, "parents": [{"sha": "21786a7f42d49d8a1b18bb97171ea031704f0cbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21786a7f42d49d8a1b18bb97171ea031704f0cbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21786a7f42d49d8a1b18bb97171ea031704f0cbd"}], "stats": {"total": 81, "additions": 75, "deletions": 6}, "files": [{"sha": "0b154319344d7bcc6c753f16f1bfc5422f800d1a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b033a8a927afab88532af22bdb7cd87d57e1f6d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b033a8a927afab88532af22bdb7cd87d57e1f6d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b033a8a927afab88532af22bdb7cd87d57e1f6d", "patch": "@@ -1,3 +1,12 @@\n+2013-06-12  Sofiane Naci  <sofiane.naci@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_combine<mode>): convert to split.\n+\t(aarch64_simd_combine<mode>): New instruction expansion.\n+\t* config/aarch64/aarch64-protos.h (aarch64_split_simd_combine): New\n+\tfunction prototype.\n+\t* config/aarch64/aarch64.c (aarch64_split_combine): New function.\n+\t* config/aarch64/iterators.md (Vdbl): Add entry for DF.\n+\n 2013-06-12  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c (verify_edge_corresponds_to_fndecl): Be lax about"}, {"sha": "12f3c3a6fe657bf40803943da10d836040f09c12", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b033a8a927afab88532af22bdb7cd87d57e1f6d/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b033a8a927afab88532af22bdb7cd87d57e1f6d/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=8b033a8a927afab88532af22bdb7cd87d57e1f6d", "patch": "@@ -226,6 +226,8 @@ void aarch64_split_128bit_move (rtx, rtx);\n \n bool aarch64_split_128bit_move_p (rtx, rtx);\n \n+void aarch64_split_simd_combine (rtx, rtx, rtx);\n+\n void aarch64_split_simd_move (rtx, rtx);\n \n /* Check for a legitimate floating point constant for FMOV.  */"}, {"sha": "8e3f5c2f77c247962a54c54e38dbf7baf3347dae", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b033a8a927afab88532af22bdb7cd87d57e1f6d/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b033a8a927afab88532af22bdb7cd87d57e1f6d/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=8b033a8a927afab88532af22bdb7cd87d57e1f6d", "patch": "@@ -2218,15 +2218,29 @@\n    (set_attr \"simd_mode\" \"<MODE>\")]\n )\n \n-(define_insn \"aarch64_combine<mode>\"\n+(define_insn_and_split \"aarch64_combine<mode>\"\n   [(set (match_operand:<VDBL> 0 \"register_operand\" \"=&w\")\n         (vec_concat:<VDBL> (match_operand:VDC 1 \"register_operand\" \"w\")\n \t\t\t   (match_operand:VDC 2 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD\"\n-  \"mov\\\\t%0.d[0], %1.d[0]\\;ins\\\\t%0.d[1], %2.d[0]\"\n-  [(set_attr \"simd_type\" \"simd_ins\")\n-   (set_attr \"simd_mode\" \"<MODE>\")]\n-)\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  aarch64_split_simd_combine (operands[0], operands[1], operands[2]);\n+  DONE;\n+})\n+\n+(define_expand \"aarch64_simd_combine<mode>\"\n+  [(set (match_operand:<VDBL> 0 \"register_operand\" \"=&w\")\n+        (vec_concat:<VDBL> (match_operand:VDC 1 \"register_operand\" \"w\")\n+  (match_operand:VDC 2 \"register_operand\" \"w\")))]\n+  \"TARGET_SIMD\"\n+  {\n+    emit_insn (gen_move_lo_quad_<Vdbl> (operands[0], operands[1]));\n+    emit_insn (gen_move_hi_quad_<Vdbl> (operands[0], operands[2]));\n+    DONE;\n+  })\n \n ;; <su><addsub>l<q>.\n "}, {"sha": "527b00dbcaac1c6280685e0e467f32c1ac1692bf", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b033a8a927afab88532af22bdb7cd87d57e1f6d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b033a8a927afab88532af22bdb7cd87d57e1f6d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=8b033a8a927afab88532af22bdb7cd87d57e1f6d", "patch": "@@ -700,6 +700,49 @@ aarch64_split_128bit_move_p (rtx dst, rtx src)\n \t  || ! (FP_REGNUM_P (REGNO (dst)) && FP_REGNUM_P (REGNO (src))));\n }\n \n+/* Split a complex SIMD combine.  */\n+\n+void\n+aarch64_split_simd_combine (rtx dst, rtx src1, rtx src2)\n+{\n+  enum machine_mode src_mode = GET_MODE (src1);\n+  enum machine_mode dst_mode = GET_MODE (dst);\n+\n+  gcc_assert (VECTOR_MODE_P (dst_mode));\n+\n+  if (REG_P (dst) && REG_P (src1) && REG_P (src2))\n+    {\n+      rtx (*gen) (rtx, rtx, rtx);\n+\n+      switch (src_mode)\n+\t{\n+\tcase V8QImode:\n+\t  gen = gen_aarch64_simd_combinev8qi;\n+\t  break;\n+\tcase V4HImode:\n+\t  gen = gen_aarch64_simd_combinev4hi;\n+\t  break;\n+\tcase V2SImode:\n+\t  gen = gen_aarch64_simd_combinev2si;\n+\t  break;\n+\tcase V2SFmode:\n+\t  gen = gen_aarch64_simd_combinev2sf;\n+\t  break;\n+\tcase DImode:\n+\t  gen = gen_aarch64_simd_combinedi;\n+\t  break;\n+\tcase DFmode:\n+\t  gen = gen_aarch64_simd_combinedf;\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+\n+      emit_insn (gen (dst, src1, src2));\n+      return;\n+    }\n+}\n+\n /* Split a complex SIMD move.  */\n \n void"}, {"sha": "8e40c5de5d4ed121f0be57ad5a589df0a1561ce2", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b033a8a927afab88532af22bdb7cd87d57e1f6d/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b033a8a927afab88532af22bdb7cd87d57e1f6d/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=8b033a8a927afab88532af22bdb7cd87d57e1f6d", "patch": "@@ -385,7 +385,8 @@\n ;; Double modes of vector modes (lower case).\n (define_mode_attr Vdbl [(V8QI \"v16qi\") (V4HI \"v8hi\")\n \t\t\t(V2SI \"v4si\")  (V2SF \"v4sf\")\n-\t\t\t(SI   \"v2si\")  (DI   \"v2di\")])\n+\t\t\t(SI   \"v2si\")  (DI   \"v2di\")\n+\t\t\t(DF   \"v2df\")])\n \n ;; Narrowed modes for VDN.\n (define_mode_attr VNARROWD [(V4HI \"V8QI\") (V2SI \"V4HI\")"}]}