{"sha": "8b281334a0bf4bce28d0f877cf0bbddd41ac25ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIyODEzMzRhMGJmNGJjZTI4ZDBmODc3Y2YwYmJkZGQ0MWFjMjVlYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-11-26T23:57:37Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-11-26T23:57:37Z"}, "message": "m68k-linux: Implement atomic operations via syscall.\n\nlibgcc/\n\t* config/m68k/linux.h (TARGET_INIT_LIBFUNCS): New.\n\t* config/m68k/m68k.c (m68k_init_sync_libfuncs): New.\ngcc/\n\t* config/m68k/linux-atomic.c: New file.\n\t* config/m68k/t-linux: New file.\n\t* config.host (m68k-uclinux, m68k-linux): Use it.\n\nFrom-SVN: r181746", "tree": {"sha": "26e156459542ab0e539b5dea2c200d63a1abfeff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26e156459542ab0e539b5dea2c200d63a1abfeff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b281334a0bf4bce28d0f877cf0bbddd41ac25ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b281334a0bf4bce28d0f877cf0bbddd41ac25ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b281334a0bf4bce28d0f877cf0bbddd41ac25ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b281334a0bf4bce28d0f877cf0bbddd41ac25ea/comments", "author": null, "committer": null, "parents": [{"sha": "84ec53b6ac3b2f94a3d5fa9ecbd0cb3f66fd9d69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84ec53b6ac3b2f94a3d5fa9ecbd0cb3f66fd9d69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84ec53b6ac3b2f94a3d5fa9ecbd0cb3f66fd9d69"}], "stats": {"total": 241, "additions": 238, "deletions": 3}, "files": [{"sha": "0411978ebafc67945f04c1a9063631012a05b8dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b281334a0bf4bce28d0f877cf0bbddd41ac25ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b281334a0bf4bce28d0f877cf0bbddd41ac25ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b281334a0bf4bce28d0f877cf0bbddd41ac25ea", "patch": "@@ -1,3 +1,8 @@\n+2011-11-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/m68k/linux.h (TARGET_INIT_LIBFUNCS): New.\n+\t* config/m68k/m68k.c (m68k_init_sync_libfuncs): New.\n+\n 2011-11-26  Nathan Sidwell  <nathan@acm.org>\n \n \tPR gcov-profile/51297"}, {"sha": "325faf73a75e16da18c18df0b937cbdcaeedb2bc", "filename": "gcc/config/m68k/linux.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b281334a0bf4bce28d0f877cf0bbddd41ac25ea/gcc%2Fconfig%2Fm68k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b281334a0bf4bce28d0f877cf0bbddd41ac25ea/gcc%2Fconfig%2Fm68k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux.h?ref=8b281334a0bf4bce28d0f877cf0bbddd41ac25ea", "patch": "@@ -235,3 +235,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #undef  WCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE BITS_PER_WORD\n+\n+/* Install the __sync libcalls.  */\n+#undef TARGET_INIT_LIBFUNCS\n+#define TARGET_INIT_LIBFUNCS  m68k_init_sync_libfuncs"}, {"sha": "61267a8049755f8426a831df2afc61779db3bd68", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b281334a0bf4bce28d0f877cf0bbddd41ac25ea/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b281334a0bf4bce28d0f877cf0bbddd41ac25ea/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=8b281334a0bf4bce28d0f877cf0bbddd41ac25ea", "patch": "@@ -47,6 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"insn-codes.h\"\n #include \"ggc.h\"\n #include \"opts.h\"\n+#include \"optabs.h\"\n \n enum reg_class regno_reg_class[] =\n {\n@@ -164,6 +165,7 @@ static rtx m68k_function_arg (cumulative_args_t, enum machine_mode,\n \t\t\t      const_tree, bool);\n static bool m68k_cannot_force_const_mem (enum machine_mode mode, rtx x);\n static bool m68k_output_addr_const_extra (FILE *, rtx);\n+static void m68k_init_sync_libfuncs (void) ATTRIBUTE_UNUSED;\n \f\n /* Initialize the GCC target structure.  */\n \n@@ -6524,4 +6526,10 @@ m68k_conditional_register_usage (void)\n     fixed_regs[PIC_REG] = call_used_regs[PIC_REG] = 1;\n }\n \n+static void\n+m68k_init_sync_libfuncs (void)\n+{\n+  init_sync_libfuncs (UNITS_PER_WORD);\n+}\n+\n #include \"gt-m68k.h\""}, {"sha": "3245438dc1db50cfadcade8d419da9ceeed8b288", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b281334a0bf4bce28d0f877cf0bbddd41ac25ea/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b281334a0bf4bce28d0f877cf0bbddd41ac25ea/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=8b281334a0bf4bce28d0f877cf0bbddd41ac25ea", "patch": "@@ -1,3 +1,9 @@\n+2011-11-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/m68k/linux-atomic.c: New file.\n+\t* config/m68k/t-linux: New file.\n+\t* config.host (m68k-uclinux, m68k-linux): Use it.\n+\n 2011-11-26  Richard Henderson  <rth@redhat.com>\n \n \t* crtstuff.c (__TMC_LIST__): Mark used not unused."}, {"sha": "bcab56070e3a022750cb41266b90a10a5bd073a5", "filename": "libgcc/config.host", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b281334a0bf4bce28d0f877cf0bbddd41ac25ea/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b281334a0bf4bce28d0f877cf0bbddd41ac25ea/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=8b281334a0bf4bce28d0f877cf0bbddd41ac25ea", "patch": "@@ -701,14 +701,14 @@ m68k*-*-netbsdelf*)\n \t;;\n m68k*-*-openbsd*)\n \t;;\n-m68k-*-uclinux*)\t\t# Motorola m68k/ColdFire running uClinux with uClibc\n-\ttmake_file=\"$tmake_file m68k/t-floatlib\"\n+m68k-*-uclinux*)\t# Motorola m68k/ColdFire running uClinux with uClibc\n+\ttmake_file=\"$tmake_file m68k/t-floatlib m68k/t-linux\"\n \tmd_unwind_header=m68k/linux-unwind.h\n \t;;\n m68k-*-linux*)\t\t\t# Motorola m68k's running GNU/Linux\n \t\t\t\t# with ELF format using glibc 2\n \t\t\t\t# aka the GNU/Linux C library 6.\n-\ttmake_file=\"$tmake_file m68k/t-floatlib\"\n+\ttmake_file=\"$tmake_file m68k/t-floatlib m68k/t-linux\"\n \t# If not configured with --enable-sjlj-exceptions, bump the\n \t# libgcc version number.\n \tif test x$enable_sjlj_exceptions != xyes; then"}, {"sha": "6e81d6b5d5e91ddb98d6eec660c786f40038c331", "filename": "libgcc/config/m68k/linux-atomic.c", "status": "added", "additions": 211, "deletions": 0, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b281334a0bf4bce28d0f877cf0bbddd41ac25ea/libgcc%2Fconfig%2Fm68k%2Flinux-atomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b281334a0bf4bce28d0f877cf0bbddd41ac25ea/libgcc%2Fconfig%2Fm68k%2Flinux-atomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fm68k%2Flinux-atomic.c?ref=8b281334a0bf4bce28d0f877cf0bbddd41ac25ea", "patch": "@@ -0,0 +1,211 @@\n+/* Linux-specific atomic operations for m68k Linux.\n+   Copyright (C) 2011 Free Software Foundation, Inc.\n+   Based on code contributed by CodeSourcery for ARM EABI Linux.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Coldfire dropped the CAS instruction from the base M68K ISA.\n+\n+   GCC automatically issues a asm memory barrier when it encounters\n+   a __sync_synchronize builtin.  Thus, we do not need to define this\n+   builtin.\n+\n+   We implement byte, short and int versions of each atomic operation\n+   using the kernel helper defined below.  There is no support for\n+   64-bit operations yet.  */\n+\n+#include <asm/unistd.h>\n+#include <stdbool.h>\n+\n+#ifndef __NR_atomic_cmpxchg_32\n+#define __NR_atomic_cmpxchg_32  335\n+#endif\n+\n+/* Kernel helper for compare-and-exchange a 32-bit value.  */\n+static inline unsigned\n+__kernel_cmpxchg (unsigned *mem, unsigned oldval, unsigned newval)\n+{\n+  register unsigned *a0 asm(\"a0\") = mem;\n+  register unsigned d2 asm(\"d2\") = oldval;\n+  register unsigned d1 asm(\"d1\") = newval;\n+  register unsigned d0 asm(\"d0\") = __NR_atomic_cmpxchg_32;\n+\n+  asm volatile (\"trap #0\"\n+\t\t: \"=r\"(d0), \"=r\"(d1), \"=r\"(a0)\n+\t\t: \"r\"(d0), \"r\"(d1), \"r\"(d2), \"r\"(a0)\n+\t\t: \"memory\", \"a1\");\n+\n+  return d0;\n+}\n+\n+#define HIDDEN __attribute__ ((visibility (\"hidden\")))\n+\n+/* Big endian masks  */\n+#define INVERT_MASK_1 24\n+#define INVERT_MASK_2 16\n+\n+#define MASK_1 0xffu\n+#define MASK_2 0xffffu\n+\n+#define NAME_oldval(OP, WIDTH) __sync_fetch_and_##OP##_##WIDTH\n+#define NAME_newval(OP, WIDTH) __sync_##OP##_and_fetch_##WIDTH\n+\n+#define WORD_SYNC_OP(OP, PFX_OP, INF_OP, RETURN)\t\t\t\\\n+  unsigned HIDDEN\t\t\t\t\t\t\t\\\n+  NAME##_##RETURN (OP, 4) (unsigned *ptr, unsigned val)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    unsigned oldval, newval, cmpval = *ptr;\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\t\\\n+      oldval = cmpval;\t\t\t\t\t\t\t\\\n+      newval = PFX_OP (oldval INF_OP val);\t\t\t\t\\\n+      cmpval = __kernel_cmpxchg (ptr, oldval, newval);\t\t\t\\\n+    } while (__builtin_expect (oldval != cmpval, 0));\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    return RETURN;\t\t\t\t\t\t\t\\\n+  }\n+\n+#define SUBWORD_SYNC_OP(OP, PFX_OP, INF_OP, TYPE, WIDTH, RETURN)\t\\\n+  TYPE HIDDEN\t\t\t\t\t\t\t\t\\\n+  NAME##_##RETURN (OP, WIDTH) (TYPE *ptr, TYPE sval)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    unsigned *wordptr = (unsigned *) ((unsigned long) ptr & ~3);\t\\\n+    unsigned int mask, shift, oldval, newval, cmpval, wval;\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    shift = (((unsigned long) ptr & 3) << 3) ^ INVERT_MASK_##WIDTH;\t\\\n+    mask = MASK_##WIDTH << shift;\t\t\t\t\t\\\n+    wval = (sval & MASK_##WIDTH) << shift;\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    cmpval = *wordptr;\t\t\t\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\t\\\n+      oldval = cmpval;\t\t\t\t\t\t\t\\\n+      newval = PFX_OP (oldval INF_OP wval);\t\t\t\t\\\n+      newval = (newval & mask) | (oldval & ~mask);\t\t\t\\\n+      cmpval = __kernel_cmpxchg (wordptr, oldval, newval);\t\t\\\n+    } while (__builtin_expect (oldval != cmpval, 0));\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    return (RETURN >> shift) & MASK_##WIDTH;\t\t\t\t\\\n+  }\n+\n+WORD_SYNC_OP (add,   , +, oldval)\n+WORD_SYNC_OP (sub,   , -, oldval)\n+WORD_SYNC_OP (or,    , |, oldval)\n+WORD_SYNC_OP (and,   , &, oldval)\n+WORD_SYNC_OP (xor,   , ^, oldval)\n+WORD_SYNC_OP (nand, ~, &, oldval)\n+\n+SUBWORD_SYNC_OP (add,   , +, unsigned short, 2, oldval)\n+SUBWORD_SYNC_OP (sub,   , -, unsigned short, 2, oldval)\n+SUBWORD_SYNC_OP (or,    , |, unsigned short, 2, oldval)\n+SUBWORD_SYNC_OP (and,   , &, unsigned short, 2, oldval)\n+SUBWORD_SYNC_OP (xor,   , ^, unsigned short, 2, oldval)\n+SUBWORD_SYNC_OP (nand, ~, &, unsigned short, 2, oldval)\n+\n+SUBWORD_SYNC_OP (add,   , +, unsigned char, 1, oldval)\n+SUBWORD_SYNC_OP (sub,   , -, unsigned char, 1, oldval)\n+SUBWORD_SYNC_OP (or,    , |, unsigned char, 1, oldval)\n+SUBWORD_SYNC_OP (and,   , &, unsigned char, 1, oldval)\n+SUBWORD_SYNC_OP (xor,   , ^, unsigned char, 1, oldval)\n+SUBWORD_SYNC_OP (nand, ~, &, unsigned char, 1, oldval)\n+\n+WORD_SYNC_OP (add,   , +, newval)\n+WORD_SYNC_OP (sub,   , -, newval)\n+WORD_SYNC_OP (or,    , |, newval)\n+WORD_SYNC_OP (and,   , &, newval)\n+WORD_SYNC_OP (xor,   , ^, newval)\n+WORD_SYNC_OP (nand, ~, &, newval)\n+\n+SUBWORD_SYNC_OP (add,   , +, unsigned short, 2, newval)\n+SUBWORD_SYNC_OP (sub,   , -, unsigned short, 2, newval)\n+SUBWORD_SYNC_OP (or,    , |, unsigned short, 2, newval)\n+SUBWORD_SYNC_OP (and,   , &, unsigned short, 2, newval)\n+SUBWORD_SYNC_OP (xor,   , ^, unsigned short, 2, newval)\n+SUBWORD_SYNC_OP (nand, ~, &, unsigned short, 2, newval)\n+\n+SUBWORD_SYNC_OP (add,   , +, unsigned char, 1, newval)\n+SUBWORD_SYNC_OP (sub,   , -, unsigned char, 1, newval)\n+SUBWORD_SYNC_OP (or,    , |, unsigned char, 1, newval)\n+SUBWORD_SYNC_OP (and,   , &, unsigned char, 1, newval)\n+SUBWORD_SYNC_OP (xor,   , ^, unsigned char, 1, newval)\n+SUBWORD_SYNC_OP (nand, ~, &, unsigned char, 1, newval)\n+\n+unsigned HIDDEN\n+__sync_val_compare_and_swap_4 (unsigned *ptr, unsigned oldval, unsigned newval)\n+{\n+  return __kernel_cmpxchg (ptr, oldval, newval);\n+}\n+\n+bool HIDDEN\n+__sync_bool_compare_and_swap_4 (unsigned *ptr, unsigned oldval,\n+\t\t\t\tunsigned newval)\n+{\n+  return __kernel_cmpxchg (ptr, oldval, newval) == oldval;\n+}\n+\n+#define SUBWORD_VAL_CAS(TYPE, WIDTH)\t\t\t\t\t\\\n+  TYPE HIDDEN\t\t\t\t\t\t\t\t\\\n+  __sync_val_compare_and_swap_##WIDTH (TYPE *ptr, TYPE soldval,\t\t\\\n+\t\t\t\t       TYPE snewval)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    unsigned *wordptr = (unsigned *)((unsigned long) ptr & ~3);\t\t\\\n+    unsigned int mask, shift, woldval, wnewval;\t\t\t\t\\\n+    unsigned oldval, newval, cmpval;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    shift = (((unsigned long) ptr & 3) << 3) ^ INVERT_MASK_##WIDTH;\t\\\n+    mask = MASK_##WIDTH << shift;\t\t\t\t\t\\\n+    woldval = (soldval & MASK_##WIDTH) << shift;\t\t\t\\\n+    wnewval = (snewval & MASK_##WIDTH) << shift;\t\t\t\\\n+    cmpval = *wordptr;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\t\\\n+      oldval = cmpval;\t\t\t\t\t\t\t\\\n+      if ((oldval & mask) != woldval)\t\t\t\t\t\\\n+\tbreak;\t\t\t\t\t\t\t\t\\\n+      newval = (oldval & ~mask) | wnewval;\t\t\t\t\\\n+      cmpval = __kernel_cmpxchg (wordptr, oldval, newval);\t\t\\\n+    } while (__builtin_expect (oldval != cmpval, 0));\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    return (oldval >> shift) & MASK_##WIDTH;\t\t\t\t\\\n+  }\n+\n+SUBWORD_VAL_CAS (unsigned short, 2)\n+SUBWORD_VAL_CAS (unsigned char,  1)\n+\n+#define SUBWORD_BOOL_CAS(TYPE, WIDTH)\t\t\t\t\t\\\n+  bool HIDDEN\t\t\t\t\t\t\t\t\\\n+  __sync_bool_compare_and_swap_##WIDTH (TYPE *ptr, TYPE oldval,\t\t\\\n+\t\t\t\t\tTYPE newval)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return (__sync_val_compare_and_swap_##WIDTH (ptr, oldval, newval)\t\\\n+\t    == oldval);\t\t\t\t\t\t\t\\\n+  }\n+\n+SUBWORD_BOOL_CAS (unsigned short, 2)\n+SUBWORD_BOOL_CAS (unsigned char,  1)\n+\n+#undef NAME_oldval\n+#define NAME_oldval(OP, WIDTH) __sync_lock_##OP##_##WIDTH\n+#define COMMA ,\n+\n+WORD_SYNC_OP (test_and_set, , COMMA, oldval)\n+SUBWORD_SYNC_OP (test_and_set, , COMMA, unsigned short, 1, oldval)\n+SUBWORD_SYNC_OP (test_and_set, , COMMA, unsigned short, 2, oldval)"}, {"sha": "06f0fe09f256be0a78cbf6cb3ce057078644b0d8", "filename": "libgcc/config/m68k/t-linux", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b281334a0bf4bce28d0f877cf0bbddd41ac25ea/libgcc%2Fconfig%2Fm68k%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b281334a0bf4bce28d0f877cf0bbddd41ac25ea/libgcc%2Fconfig%2Fm68k%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fm68k%2Ft-linux?ref=8b281334a0bf4bce28d0f877cf0bbddd41ac25ea", "patch": "@@ -0,0 +1 @@\n+LIB2ADD_ST = $(srcdir)/config/m68k/linux-atomic.c"}]}