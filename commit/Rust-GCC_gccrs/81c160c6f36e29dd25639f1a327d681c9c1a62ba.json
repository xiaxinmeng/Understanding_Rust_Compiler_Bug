{"sha": "81c160c6f36e29dd25639f1a327d681c9c1a62ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFjMTYwYzZmMzZlMjlkZDI1NjM5ZjFhMzI3ZDY4MWM5YzFhNjJiYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-04-18T19:00:00Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-04-18T19:00:00Z"}, "message": "re PR c++/70690 (r235002 miscompiles tcmalloc)\n\n\tPR c++/70690\n\n\tPR c++/70528\n\t* class.c (type_maybe_constexpr_default_constructor): New.\n\t(type_has_constexpr_default_constructor): Revert.\n\nFrom-SVN: r235165", "tree": {"sha": "ae3fdce5b3a8ed5e61bc148a774ac48a1ccf8949", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae3fdce5b3a8ed5e61bc148a774ac48a1ccf8949"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81c160c6f36e29dd25639f1a327d681c9c1a62ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81c160c6f36e29dd25639f1a327d681c9c1a62ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81c160c6f36e29dd25639f1a327d681c9c1a62ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81c160c6f36e29dd25639f1a327d681c9c1a62ba/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "827f44ebeb6eaefcbafd88e02eba9065756ba3db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/827f44ebeb6eaefcbafd88e02eba9065756ba3db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/827f44ebeb6eaefcbafd88e02eba9065756ba3db"}], "stats": {"total": 63, "additions": 57, "deletions": 6}, "files": [{"sha": "104da7b58d2fda22f9d84ece4cd5fa6da3eab5ea", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81c160c6f36e29dd25639f1a327d681c9c1a62ba/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81c160c6f36e29dd25639f1a327d681c9c1a62ba/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=81c160c6f36e29dd25639f1a327d681c9c1a62ba", "patch": "@@ -1,3 +1,10 @@\n+2016-04-18  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/70690\n+\tPR c++/70528\n+\t* class.c (type_maybe_constexpr_default_constructor): New.\n+\t(type_has_constexpr_default_constructor): Revert.\n+\n 2016-04-16  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR target/1078"}, {"sha": "2c5ce7384dac3ce14a64dc07753c10348a8441fe", "filename": "gcc/cp/class.c", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81c160c6f36e29dd25639f1a327d681c9c1a62ba/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81c160c6f36e29dd25639f1a327d681c9c1a62ba/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=81c160c6f36e29dd25639f1a327d681c9c1a62ba", "patch": "@@ -214,6 +214,7 @@ static bool base_derived_from (tree, tree);\n static int empty_base_at_nonzero_offset_p (tree, tree, splay_tree);\n static tree end_of_base (tree);\n static tree get_vcall_index (tree, tree);\n+static bool type_maybe_constexpr_default_constructor (tree);\n \n /* Variables shared between class.c and call.c.  */\n \n@@ -3346,7 +3347,11 @@ add_implicitly_declared_members (tree t, tree* access_decls,\n       CLASSTYPE_LAZY_DEFAULT_CTOR (t) = 1;\n       if (cxx_dialect >= cxx11)\n \tTYPE_HAS_CONSTEXPR_CTOR (t)\n-\t  = type_has_constexpr_default_constructor (t);\n+\t  /* Don't force the declaration to get a hard answer; if the\n+\t     definition would have made the class non-literal, it will still be\n+\t     non-literal because of the base or member in question, and that\n+\t     gives a better diagnostic.  */\n+\t  = type_maybe_constexpr_default_constructor (t);\n     }\n \n   /* [class.ctor]\n@@ -5348,16 +5353,28 @@ type_has_constexpr_default_constructor (tree t)\n     {\n       if (!TYPE_HAS_COMPLEX_DFLT (t))\n \treturn trivial_default_constructor_is_constexpr (t);\n-      /* Assume it's constexpr to avoid unnecessary instantiation; if the\n-\t definition would have made the class non-literal, it will still be\n-\t non-literal because of the base or member in question, and that\n-\t gives a better diagnostic.  */\n-      return true;\n+      /* Non-trivial, we need to check subobject constructors.  */\n+      lazily_declare_fn (sfk_constructor, t);\n     }\n   fns = locate_ctor (t);\n   return (fns && DECL_DECLARED_CONSTEXPR_P (fns));\n }\n \n+/* Returns true iff class T has a constexpr default constructor or has an\n+   implicitly declared default constructor that we can't tell if it's constexpr\n+   without forcing a lazy declaration (which might cause undesired\n+   instantiations).  */\n+\n+bool\n+type_maybe_constexpr_default_constructor (tree t)\n+{\n+  if (CLASS_TYPE_P (t) && CLASSTYPE_LAZY_DEFAULT_CTOR (t)\n+      && TYPE_HAS_COMPLEX_DFLT (t))\n+    /* Assume it's constexpr.  */\n+    return true;\n+  return type_has_constexpr_default_constructor (t);\n+}\n+\n /* Returns true iff class TYPE has a virtual destructor.  */\n \n bool"}, {"sha": "e8ee18116a81d2549048a6c676436f0ca89757db", "filename": "gcc/testsuite/g++.dg/init/array41.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81c160c6f36e29dd25639f1a327d681c9c1a62ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray41.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81c160c6f36e29dd25639f1a327d681c9c1a62ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray41.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray41.C?ref=81c160c6f36e29dd25639f1a327d681c9c1a62ba", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/70690\n+// { dg-do run }\n+\n+struct A {\n+  A() {}\n+};\n+\n+struct APadded : public A {\n+  char pad[63];\n+};\n+\n+int f();\n+int i = f();\n+APadded cache[50];\n+APadded *p = cache;\n+\n+int f()\n+{\n+  cache[0].pad[0] = 42;\n+  return 1;\n+}\n+\n+int main()\n+{\n+  if (cache[0].pad[0] != 42)\n+    __builtin_abort();\n+}"}]}