{"sha": "812f205146d174f71073ac23f51d362c1bc11575", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEyZjIwNTE0NmQxNzRmNzEwNzNhYzIzZjUxZDM2MmMxYmMxMTU3NQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1998-03-26T10:44:22Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1998-03-26T10:44:22Z"}, "message": "regclass.c (record_reg_classes): '?' increases cost by two.\n\n\t* regclass.c (record_reg_classes): '?' increases cost by two.\n\t* reload.c (find_reloads): Double previous costs.  Output\n\treloads cost one unit extra.\n\t* reload1.c (eliminate_regs): Delete LOAD_EXTENDED_OP code that\n\tboiled down to && ! 0.\n\t* reload.c (find_equiv_reg): Also consider a goal offset from the\n\tframe pointer to be constant.\n\nFrom-SVN: r18842", "tree": {"sha": "b18dac3add5f9a70edef18d3f253fca7a887d445", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b18dac3add5f9a70edef18d3f253fca7a887d445"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/812f205146d174f71073ac23f51d362c1bc11575", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/812f205146d174f71073ac23f51d362c1bc11575", "html_url": "https://github.com/Rust-GCC/gccrs/commit/812f205146d174f71073ac23f51d362c1bc11575", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/812f205146d174f71073ac23f51d362c1bc11575/comments", "author": null, "committer": null, "parents": [{"sha": "49bf0d6f8011a1a6c7fddfba237dcf42855fa1a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49bf0d6f8011a1a6c7fddfba237dcf42855fa1a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49bf0d6f8011a1a6c7fddfba237dcf42855fa1a4"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "7ed217f3180503f1a1d239218eb4a78f089a1ddb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812f205146d174f71073ac23f51d362c1bc11575/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812f205146d174f71073ac23f51d362c1bc11575/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=812f205146d174f71073ac23f51d362c1bc11575", "patch": "@@ -1,3 +1,16 @@\n+Thu Mar 26 18:34:13 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* regclass.c (record_reg_classes): '?' increases cost by two.\n+\n+\t* reload.c (find_reloads): Double previous costs.  Output\n+\treloads cost one unit extra.\n+\n+\t* reload1.c (eliminate_regs): Delete LOAD_EXTENDED_OP code that\n+\tboiled down to && ! 0.\n+\n+\t* reload.c (find_equiv_reg): Also consider a goal offset from the\n+\tframe pointer to be constant.\n+\n Thu Mar 26 17:34:46 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* sh.h (OPTIMIZATION_OPTIONS): Define."}, {"sha": "396222b7192c38e1fa3502812cccc0f499d9d10a", "filename": "gcc/regclass.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812f205146d174f71073ac23f51d362c1bc11575/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812f205146d174f71073ac23f51d362c1bc11575/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=812f205146d174f71073ac23f51d362c1bc11575", "patch": "@@ -1189,8 +1189,10 @@ record_reg_classes (n_alts, n_ops, ops, modes, constraints, insn)\n \t\tp++;\n \t\tbreak;\n \n+\t      case '?':\n+\t\talt_cost += 2;\n \t      case '%':\n-\t      case '?':  case '!':  case '#':\n+\t      case '!':  case '#':\n \t      case '&':\n \t      case '0':  case '1':  case '2':  case '3':  case '4':\n \t      case 'p':"}, {"sha": "e89c2515d9e352b9bcd7b2af55a95212dbcec921", "filename": "gcc/reload.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812f205146d174f71073ac23f51d362c1bc11575/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812f205146d174f71073ac23f51d362c1bc11575/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=812f205146d174f71073ac23f51d362c1bc11575", "patch": "@@ -2670,7 +2670,7 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n      or got the wrong kind of hard reg.  For this, we must consider\n      all the operands together against the register constraints.  */\n \n-  best = MAX_RECOG_OPERANDS + 300;\n+  best = MAX_RECOG_OPERANDS * 2 + 600;\n \n   swapped = 0;\n   goal_alternative_swapped = 0;\n@@ -2836,11 +2836,11 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \t\tbreak;\n \n \t      case '?':\n-\t\treject += 3;\n+\t\treject += 6;\n \t\tbreak;\n \n \t      case '!':\n-\t\treject = 300;\n+\t\treject = 600;\n \t\tbreak;\n \n \t      case '#':\n@@ -3227,6 +3227,11 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \t\t     && REGNO (operand) >= FIRST_PSEUDO_REGISTER)\n \t\t  && GET_CODE (operand) != SCRATCH\n \t\t  && ! (const_to_mem && constmemok))\n+\t\treject += 2;\n+\n+\t      /* Input reloads can be inherited more often than output\n+\t\t reloads can be removed, so penalize output reloads.  */\n+\t      if (operand_type[i] != RELOAD_FOR_INPUT)\n \t\treject++;\n \t    }\n \n@@ -3267,7 +3272,7 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \t\t\t\t\t  this_alternative[i]))\n \t\t    this_alternative[i] = (int) preferred_class[i];\n \t\t  else\n-\t\t    reject += (1 + pref_or_nothing[i]);\n+\t\t    reject += (2 + 2 * pref_or_nothing[i]);\n \t\t}\n \t    }\n \t}\n@@ -3374,9 +3379,9 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \n       /* REJECT, set by the ! and ? constraint characters and when a register\n \t would be reloaded into a non-preferred class, discourages the use of\n-\t this alternative for a reload goal.  REJECT is incremented by three\n-\t for each ? and one for each non-preferred class.  */\n-      losers = losers * 3 + reject;\n+\t this alternative for a reload goal.  REJECT is incremented by six\n+\t for each ? and two for each non-preferred class.  */\n+      losers = losers * 6 + reject;\n \n       /* If this alternative can be made to work by reloading,\n \t and it needs less reloading than the others checked so far,\n@@ -5705,6 +5710,10 @@ find_equiv_reg (goal, insn, class, other, reload_reg_p, goalreg, mode)\n \t   && XEXP (goal, 0) == stack_pointer_rtx\n \t   && CONSTANT_P (XEXP (goal, 1)))\n     goal_const = need_stable_sp = 1;\n+  else if (GET_CODE (goal) == PLUS\n+\t   && XEXP (goal, 0) == frame_pointer_rtx\n+\t   && CONSTANT_P (XEXP (goal, 1)))\n+    goal_const = 1;\n   else\n     return 0;\n "}, {"sha": "aeb2a628b39f89705f8e8e6b4e97693d4fdceab2", "filename": "gcc/reload1.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812f205146d174f71073ac23f51d362c1bc11575/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812f205146d174f71073ac23f51d362c1bc11575/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=812f205146d174f71073ac23f51d362c1bc11575", "patch": "@@ -3133,18 +3133,6 @@ eliminate_regs (x, mem_mode, insn)\n #endif\n \t\t   )\n \t\t  || (x_size == new_size))\n-#ifdef LOAD_EXTEND_OP\n-\t      /* On these machines we will be reloading what is\n-\t\t inside the SUBREG if it originally was a pseudo and\n-\t\t the inner and outer modes are both a word or\n-\t\t smaller.  So leave the SUBREG then.  */\n-\t      && ! (GET_CODE (SUBREG_REG (x)) == REG\n-\t\t    && x_size <= UNITS_PER_WORD\n-\t\t    && new_size <= UNITS_PER_WORD\n-\t\t    && x_size > new_size\n-\t\t    && INTEGRAL_MODE_P (GET_MODE (new))\n-\t\t    && LOAD_EXTEND_OP (GET_MODE (new)) != NIL)\n-#endif\n \t      )\n \t    {\n \t      int offset = SUBREG_WORD (x) * UNITS_PER_WORD;"}]}