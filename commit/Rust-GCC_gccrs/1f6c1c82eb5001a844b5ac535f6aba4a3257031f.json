{"sha": "1f6c1c82eb5001a844b5ac535f6aba4a3257031f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY2YzFjODJlYjUwMDFhODQ0YjVhYzUzNWY2YWJhNGEzMjU3MDMxZg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-13T18:30:39Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-23T20:08:43Z"}, "message": "c++: Avoid a suspicious -Wnoexcept warning [PR93805]\n\nIn this PR we're emitting -Wnoexcept warnings about potentially-throwing NSDMIs\nwhen computing the noexcept specification of a class's defaulted default\nconstructor.  Although these warnings are in some sense valid, this patch takes\nthe route of suppressing them, because:\n\n  1. the warning message is confusing in its current form;\n  2. warning for 'struct C { B b = B(); };' but not for 'struct C { B b; };'\n     is inconsistent; and\n  3. emitting a warning here arguably doesn't fall under the umbrella of\n     -Wnoexcept, whose documentation says it warns only when a\n     noexcept-expression evaluates to false, but there are no\n     noexcept-expressions here.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/93805\n\t* except.c (maybe_noexcept_warning): Add TODO comment.\n\t* method.c (walk_field_subobs): Pass tf_none to expr_noexcept_p.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/93805\n\t* g++.dg/warn/Wnoexcept2.C: New test.", "tree": {"sha": "da497ce06d4a5d8684da11fe5456b78a14e5f1a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da497ce06d4a5d8684da11fe5456b78a14e5f1a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f6c1c82eb5001a844b5ac535f6aba4a3257031f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f6c1c82eb5001a844b5ac535f6aba4a3257031f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f6c1c82eb5001a844b5ac535f6aba4a3257031f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f6c1c82eb5001a844b5ac535f6aba4a3257031f/comments", "author": null, "committer": null, "parents": [{"sha": "ca6c722561ce9b9dc7b59cfd9d29c9b466732721", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca6c722561ce9b9dc7b59cfd9d29c9b466732721", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca6c722561ce9b9dc7b59cfd9d29c9b466732721"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "59db03c0b070b34386471eea68d64d50445db507", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6c1c82eb5001a844b5ac535f6aba4a3257031f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6c1c82eb5001a844b5ac535f6aba4a3257031f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1f6c1c82eb5001a844b5ac535f6aba4a3257031f", "patch": "@@ -1,3 +1,9 @@\n+2020-03-23  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/93805\n+\t* except.c (maybe_noexcept_warning): Add TODO.\n+\t* method.c (walk_field_subobs): Pass tf_none to expr_noexcept_p.\n+\n 2020-03-23  nathans  <nathan@acm.org>\n \n \tPR c++/94044"}, {"sha": "7e93c51f9ea94203369be6df1bb55952e3d2fcfd", "filename": "gcc/cp/except.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6c1c82eb5001a844b5ac535f6aba4a3257031f/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6c1c82eb5001a844b5ac535f6aba4a3257031f/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=1f6c1c82eb5001a844b5ac535f6aba4a3257031f", "patch": "@@ -1160,7 +1160,10 @@ struct GTY(()) pending_noexcept {\n static GTY(()) vec<pending_noexcept, va_gc> *pending_noexcept_checks;\n \n /* FN is a FUNCTION_DECL that caused a noexcept-expr to be false.  Warn if\n-   it can't throw.  */\n+   it can't throw.\n+\n+   TODO: Consider extending -Wnoexcept to do something like walk_subtrees in the\n+   case of a defaulted function that obtained a noexcept(false) spec.  */\n \n static void\n maybe_noexcept_warning (tree fn)"}, {"sha": "41b9ff86bdd046e5bf7cb128eb61ec7f15a1820a", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6c1c82eb5001a844b5ac535f6aba4a3257031f/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6c1c82eb5001a844b5ac535f6aba4a3257031f/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=1f6c1c82eb5001a844b5ac535f6aba4a3257031f", "patch": "@@ -1988,7 +1988,7 @@ walk_field_subobs (tree fields, special_function_kind sfk, tree fnname,\n \t\t  if (nsdmi == error_mark_node)\n \t\t    *spec_p = error_mark_node;\n \t\t  else if (*spec_p != error_mark_node\n-\t\t\t   && !expr_noexcept_p (nsdmi, complain))\n+\t\t\t   && !expr_noexcept_p (nsdmi, tf_none))\n \t\t    *spec_p = noexcept_false_spec;\n \t\t}\n \t      /* Don't do the normal processing.  */"}, {"sha": "5f079f1fca9dda85a99b927000539736d1a8a1c5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6c1c82eb5001a844b5ac535f6aba4a3257031f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6c1c82eb5001a844b5ac535f6aba4a3257031f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1f6c1c82eb5001a844b5ac535f6aba4a3257031f", "patch": "@@ -1,3 +1,8 @@\n+2020-03-23  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/93805\n+\t* g++.dg/warn/Wnoexcept2.C: New test.\n+\n 2020-03-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/91993"}, {"sha": "60541be3575c56b1f586ef5e31e2045c2ecc756b", "filename": "gcc/testsuite/g++.dg/warn/Wnoexcept2.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6c1c82eb5001a844b5ac535f6aba4a3257031f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnoexcept2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6c1c82eb5001a844b5ac535f6aba4a3257031f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnoexcept2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnoexcept2.C?ref=1f6c1c82eb5001a844b5ac535f6aba4a3257031f", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/93805\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-Wnoexcept\" }\n+\n+struct B\n+{\n+  B() {}\n+};\n+\n+struct C\n+{\n+  B b = B();\n+};\n+\n+C c; // { dg-bogus \"noexcept-expression\" }"}]}