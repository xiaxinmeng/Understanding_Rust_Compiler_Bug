{"sha": "563ae04fec9600d282f6d88f6cb6da761a884e7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYzYWUwNGZlYzk2MDBkMjgyZjZkODhmNmNiNmRhNzYxYTg4NGU3ZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2004-04-07T03:33:36Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-04-07T03:33:36Z"}, "message": "Fixups for EDG front end.\n\n\n2004-04-06  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tFixups for EDG front end.\n\t* include/ext/rope: Instead of non-existent function\n\t_Data_allocate, use allocator's allocate. Use this.\n\t(namespace _Rope_constants): Move _S_max_rope_depth, and _Tag\n\tenumerations from _Rope_RopeRep here.\n\t* include/ext/ropeimpl.h: Same.\n\t* src/ext-inst.cc (_S_min_len): Fix up definition.\n\n\t* config/locale/gnu/ctype_members.cc: Qualify base class members\n\twith this.\n\t* config/locale/generic/ctype_members.cc: Same.\n\t* config/locale/gnu/messages_members.h: Same.\n\t* config/locale/generic/messages_members.h: Same.\n\t* src/ctype.cc: Same.\n\t* include/bits/codecvt.h: Same.\n\n\t* include/bits/boost_concept_check.h: Declare.\n\t(__error_type_must_be_an_unsigned_integer_type): Remove this.\n\t(__error_type_must_be_an_integer_type): Remove this.\n\t(__error_type_must_be_a_signed_integer_type): Remove this.\n\n\t* config/io/basic_file_stdio.cc (__basic_file::sys_open): Remove cast.\n\n\t* libsupc++/eh_alloc.cc (__cxa_free_exception): Add exception\n\tspecification to definition.\n\t(__cxa_allocate_exception): Same.\n\t* libsupc++/eh_catch.cc (__cxa_begin_catch): Same.\n\t* libsupc++/eh_globals.cc (__cxa_get_globals_fast): Same.\n\t(__cxa_get_globals): Same.\n\n\t* libsupc++/del_op.cc: Add comment about freestanding.\n\nFrom-SVN: r80475", "tree": {"sha": "ad02d4c4a12269ff2a6bf0e7f64ebfe31ed3d48b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad02d4c4a12269ff2a6bf0e7f64ebfe31ed3d48b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/563ae04fec9600d282f6d88f6cb6da761a884e7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/563ae04fec9600d282f6d88f6cb6da761a884e7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/563ae04fec9600d282f6d88f6cb6da761a884e7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/563ae04fec9600d282f6d88f6cb6da761a884e7d/comments", "author": null, "committer": null, "parents": [{"sha": "9104315af86a209017083fddd11e8a8da5a350ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9104315af86a209017083fddd11e8a8da5a350ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9104315af86a209017083fddd11e8a8da5a350ae"}], "stats": {"total": 257, "additions": 153, "deletions": 104}, "files": [{"sha": "c552dcb3f7c421b153c4f8381d77de85353de29b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=563ae04fec9600d282f6d88f6cb6da761a884e7d", "patch": "@@ -1,3 +1,37 @@\n+2004-04-06  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tFixups for EDG front end.\n+\t* include/ext/rope: Instead of non-existent function\n+\t_Data_allocate, use allocator's allocate. Use this.\n+\t(namespace _Rope_constants): Move _S_max_rope_depth, and _Tag\n+\tenumerations from _Rope_RopeRep here.\n+\t* include/ext/ropeimpl.h: Same.\n+\t* src/ext-inst.cc (_S_min_len): Fix up definition.\n+\t\n+\t* config/locale/gnu/ctype_members.cc: Qualify base class members\n+\twith this.\n+\t* config/locale/generic/ctype_members.cc: Same.\n+\t* config/locale/gnu/messages_members.h: Same.\n+\t* config/locale/generic/messages_members.h: Same.\n+\t* src/ctype.cc: Same.\n+\t* include/bits/codecvt.h: Same.\n+\t\n+\t* include/bits/boost_concept_check.h: Declare.\n+\t(__error_type_must_be_an_unsigned_integer_type): Remove this.\n+\t(__error_type_must_be_an_integer_type): Remove this.\n+\t(__error_type_must_be_a_signed_integer_type): Remove this.\t\n+\n+\t* config/io/basic_file_stdio.cc (__basic_file::sys_open): Remove cast.\n+\n+\t* libsupc++/eh_alloc.cc (__cxa_free_exception): Add exception\n+\tspecification to definition.\n+\t(__cxa_allocate_exception): Same.\n+\t* libsupc++/eh_catch.cc (__cxa_begin_catch): Same.\n+\t* libsupc++/eh_globals.cc (__cxa_get_globals_fast): Same.\n+\t(__cxa_get_globals): Same.\t\n+\t\n+\t* libsupc++/del_op.cc: Add comment about freestanding.\n+\n 2004-04-05  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/ext/mt_allocator.h (__mt_alloc<>::deallocate):"}, {"sha": "224a2f6bd6a3c739b9dd996ce1e64dba0d555d24", "filename": "libstdc++-v3/config/io/basic_file_stdio.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc?ref=563ae04fec9600d282f6d88f6cb6da761a884e7d", "patch": "@@ -202,12 +202,12 @@ namespace std\n   {\n     __basic_file* __ret = NULL;\n     const char* __c_mode = __gnu_internal::fopen_mode(__mode);\n-    if (__c_mode && !this->is_open() \n-\t&& (_M_cfile = fdopen(__fd, __c_mode)))\n+    if (__c_mode && !this->is_open() && (_M_cfile = fdopen(__fd, __c_mode)))\n       {\n+\tchar* __buf = NULL;\n \t_M_cfile_created = true;\n \tif (__fd == 0)\n-\t  setvbuf(_M_cfile, reinterpret_cast<char*>(NULL), _IONBF, 0);\n+\t  setvbuf(_M_cfile, __buf, _IONBF, 0);\n \t__ret = this;\n       }\n     return __ret;"}, {"sha": "af994cbf46a200408c42329ff1030915aeec9313", "filename": "libstdc++-v3/config/locale/generic/ctype_members.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc?ref=563ae04fec9600d282f6d88f6cb6da761a884e7d", "patch": "@@ -1,6 +1,6 @@\n // std::ctype implementation details, generic version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -45,8 +45,8 @@ namespace std\n     { \t\n       if (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n \t{\n-\t  _S_destroy_c_locale(_M_c_locale_ctype);\n-\t  _S_create_c_locale(_M_c_locale_ctype, __s); \n+\t  this->_S_destroy_c_locale(this->_M_c_locale_ctype);\n+\t  this->_S_create_c_locale(this->_M_c_locale_ctype, __s); \n \t}\n     }\n "}, {"sha": "4a2ff4aba1e3823f4beeea7f4615ef41c43c2461", "filename": "libstdc++-v3/config/locale/generic/messages_members.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.h?ref=563ae04fec9600d282f6d88f6cb6da761a884e7d", "patch": "@@ -1,6 +1,6 @@\n // std::messages implementation details, generic version -*- C++ -*-\n \n-// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -78,7 +78,7 @@\n      { \n \tif (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n \t  {\n-\t    _S_destroy_c_locale(this->_M_c_locale_messages);\n-\t    _S_create_c_locale(this->_M_c_locale_messages, __s); \n+\t    this->_S_destroy_c_locale(this->_M_c_locale_messages);\n+\t    this->_S_create_c_locale(this->_M_c_locale_messages, __s); \n \t  }\n      }"}, {"sha": "2b31d11c2b2264e3081bb4aa7dda93a742b7ef76", "filename": "libstdc++-v3/config/locale/gnu/ctype_members.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc?ref=563ae04fec9600d282f6d88f6cb6da761a884e7d", "patch": "@@ -1,6 +1,6 @@\n // std::ctype implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -46,11 +46,11 @@ namespace std\n     { \t\t\n       if (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n \t{\n-\t  _S_destroy_c_locale(_M_c_locale_ctype);\n-\t  _S_create_c_locale(_M_c_locale_ctype, __s); \n-\t  _M_toupper = _M_c_locale_ctype->__ctype_toupper;\n-\t  _M_tolower = _M_c_locale_ctype->__ctype_tolower;\n-\t  _M_table = _M_c_locale_ctype->__ctype_b;\n+\t  this->_S_destroy_c_locale(this->_M_c_locale_ctype);\n+\t  this->_S_create_c_locale(this->_M_c_locale_ctype, __s); \n+\t  this->_M_toupper = this->_M_c_locale_ctype->__ctype_toupper;\n+\t  this->_M_tolower = this->_M_c_locale_ctype->__ctype_tolower;\n+\t  this->_M_table = this->_M_c_locale_ctype->__ctype_b;\n \t}\n     }\n "}, {"sha": "c036a70a11321cc081c15823a2147a84c10523a7", "filename": "libstdc++-v3/config/locale/gnu/messages_members.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h?ref=563ae04fec9600d282f6d88f6cb6da761a884e7d", "patch": "@@ -1,6 +1,6 @@\n // std::messages implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -108,7 +108,7 @@\n #endif\n \tif (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n \t  {\n-\t    _S_destroy_c_locale(this->_M_c_locale_messages);\n-\t    _S_create_c_locale(this->_M_c_locale_messages, __s); \n+\t    this->_S_destroy_c_locale(this->_M_c_locale_messages);\n+\t    this->_S_create_c_locale(this->_M_c_locale_messages, __s); \n \t  }\n      }"}, {"sha": "aef83af947410466bb5615c67c3f91081aa20cf5", "filename": "libstdc++-v3/include/bits/boost_concept_check.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h?ref=563ae04fec9600d282f6d88f6cb6da761a884e7d", "patch": "@@ -36,6 +36,12 @@ inline void __function_requires()\n   void (_Concept::*__x)() _IsUnused = &_Concept::__constraints;\n }\n \n+// No definition: if this is referenced, there's a problem with\n+// the instantiating type not being one of the required integer types.\n+// Unfortunately, this results in a link-time error, not a compile-time error.\n+void __error_type_must_be_an_integer_type();\n+void __error_type_must_be_an_unsigned_integer_type();\n+void __error_type_must_be_a_signed_integer_type();\n \n // ??? Should the \"concept_checking*\" structs begin with more than _ ?\n #define _GLIBCXX_CLASS_REQUIRES(_type_var, _ns, _concept) \\\n@@ -88,7 +94,7 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n   template <class _Tp>\n   struct _IntegerConcept {\n     void __constraints() {\n-      this->__error_type_must_be_an_integer_type();\n+      __error_type_must_be_an_integer_type();\n     }\n   };\n   template <> struct _IntegerConcept<short> { void __constraints() {} };\n@@ -104,7 +110,7 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n   template <class _Tp>\n   struct _SignedIntegerConcept {\n     void __constraints() {\n-      this->__error_type_must_be_a_signed_integer_type();\n+      __error_type_must_be_a_signed_integer_type();\n     }\n   };\n   template <> struct _SignedIntegerConcept<short> { void __constraints() {} };\n@@ -115,7 +121,7 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n   template <class _Tp>\n   struct _UnsignedIntegerConcept {\n     void __constraints() {\n-      this->__error_type_must_be_an_unsigned_integer_type();\n+      __error_type_must_be_an_unsigned_integer_type();\n     }\n   };\n   template <> struct _UnsignedIntegerConcept<unsigned short>"}, {"sha": "d31ebf2d36214d52af531dbef01a472af1db4ded", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=563ae04fec9600d282f6d88f6cb6da761a884e7d", "patch": "@@ -459,8 +459,8 @@\n       {\n \tif (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n \t  {\n-\t    _S_destroy_c_locale(this->_M_c_locale_codecvt);\n-\t    _S_create_c_locale(this->_M_c_locale_codecvt, __s);\n+\t    this->_S_destroy_c_locale(this->_M_c_locale_codecvt);\n+\t    this->_S_create_c_locale(this->_M_c_locale_codecvt, __s);\n \t  }\n       }\n "}, {"sha": "22a1797abef8a22827605758f5cf5d9e2127682e", "filename": "libstdc++-v3/include/ext/rope", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope?ref=563ae04fec9600d282f6d88f6cb6da761a884e7d", "patch": "@@ -234,7 +234,7 @@ class _Rope_char_consumer {\n // First a lot of forward declarations.  The standard seems to require\n // much stricter \"declaration before use\" than many of the implementations\n // that preceded it.\n-template<class _CharT, class _Alloc=allocator<_CharT> > class rope;\n+template<class _CharT, class _Alloc = allocator<_CharT> > class rope;\n template<class _CharT, class _Alloc> struct _Rope_RopeConcatenation;\n template<class _CharT, class _Alloc> struct _Rope_RopeLeaf;\n template<class _CharT, class _Alloc> struct _Rope_RopeFunction;\n@@ -459,6 +459,11 @@ struct _Rope_rep_base\n # undef __ROPE_DEFINE_ALLOC\n };\n \n+namespace _Rope_constants\n+{\n+  enum { _S_max_rope_depth = 45 };\n+  enum _Tag {_S_leaf, _S_concat, _S_substringfn, _S_function};\n+}\n \n template<class _CharT, class _Alloc>\n struct _Rope_RopeRep : public _Rope_rep_base<_CharT,_Alloc>\n@@ -467,9 +472,7 @@ struct _Rope_RopeRep : public _Rope_rep_base<_CharT,_Alloc>\n # endif\n {\n     public:\n-    enum { _S_max_rope_depth = 45 };\n-    enum _Tag {_S_leaf, _S_concat, _S_substringfn, _S_function};\n-    _Tag _M_tag:8;\n+    _Rope_constants::_Tag _M_tag:8;\n     bool _M_is_balanced:8;\n     unsigned char _M_depth;\n     __GC_CONST _CharT* _M_c_string;\n@@ -483,7 +486,7 @@ struct _Rope_RopeRep : public _Rope_rep_base<_CharT,_Alloc>\n     typedef typename _Rope_rep_base<_CharT,_Alloc>::allocator_type\n                         allocator_type;\n     using _Rope_rep_base<_CharT,_Alloc>::get_allocator;\n-    _Rope_RopeRep(_Tag __t, int __d, bool __b, size_t __size,\n+    _Rope_RopeRep(_Rope_constants::_Tag __t, int __d, bool __b, size_t __size,\n                   allocator_type __a)\n         : _Rope_rep_base<_CharT,_Alloc>(__size, __a),\n #         ifndef __GC\n@@ -579,9 +582,7 @@ struct _Rope_RopeLeaf : public _Rope_RopeRep<_CharT,_Alloc> {\n     typedef typename _Rope_rep_base<_CharT,_Alloc>::allocator_type\n                         allocator_type;\n     _Rope_RopeLeaf(__GC_CONST _CharT* __d, size_t __size, allocator_type __a)\n-        : _Rope_RopeRep<_CharT,_Alloc>(_Rope_RopeRep<_CharT,_Alloc>::_S_leaf,\n-\t\t\t\t       0, true, __size, __a),\n-          _M_data(__d)\n+        : _Rope_RopeRep<_CharT,_Alloc>(_Rope_constants::_S_leaf, 0, true, __size, __a), _M_data(__d)\n         {\n         if (_S_is_basic_char_type((_CharT *)0)) {\n             // already eos terminated.\n@@ -612,7 +613,7 @@ struct _Rope_RopeConcatenation : public _Rope_RopeRep<_CharT,_Alloc> {\n                              _Rope_RopeRep<_CharT,_Alloc>* __r,\n                              allocator_type __a)\n \n-      : _Rope_RopeRep<_CharT,_Alloc>(_Rope_RopeRep<_CharT,_Alloc>::_S_concat,\n+      : _Rope_RopeRep<_CharT,_Alloc>(_Rope_constants::_S_concat,\n                                      std::max(__l->_M_depth, __r->_M_depth) + 1,\n                                      false,\n                                      __l->_M_size + __r->_M_size, __a),\n@@ -650,7 +651,7 @@ struct _Rope_RopeFunction : public _Rope_RopeRep<_CharT,_Alloc> {\n                                         allocator_type;\n     _Rope_RopeFunction(char_producer<_CharT>* __f, size_t __size,\n                         bool __d, allocator_type __a)\n-      : _Rope_RopeRep<_CharT,_Alloc>(_Rope_RopeRep<_CharT,_Alloc>::_S_function,\n+      : _Rope_RopeRep<_CharT,_Alloc>(_Rope_constants::_S_function,\n \t\t\t\t     0, true, __size, __a)\n       , _M_fn(__f)\n #       ifndef __GC\n@@ -690,15 +691,15 @@ struct _Rope_RopeSubstring : public _Rope_RopeFunction<_CharT,_Alloc>,\n     virtual void operator()(size_t __start_pos, size_t __req_len,\n                             _CharT* __buffer) {\n         switch(_M_base->_M_tag) {\n-            case _Rope_RopeFunction<_CharT,_Alloc>::_S_function:\n-            case _Rope_RopeFunction<_CharT,_Alloc>::_S_substringfn:\n+            case _Rope_constants::_S_function:\n+            case _Rope_constants::_S_substringfn:\n               {\n                 char_producer<_CharT>* __fn =\n                         ((_Rope_RopeFunction<_CharT,_Alloc>*)_M_base)->_M_fn;\n                 (*__fn)(__start_pos + _M_start, __req_len, __buffer);\n               }\n               break;\n-            case _Rope_RopeFunction<_CharT,_Alloc>::_S_leaf:\n+            case _Rope_constants::_S_leaf:\n               {\n                 __GC_CONST _CharT* __s =\n                         ((_Rope_RopeLeaf<_CharT,_Alloc>*)_M_base)->_M_data;\n@@ -722,7 +723,7 @@ struct _Rope_RopeSubstring : public _Rope_RopeFunction<_CharT,_Alloc>,\n #       ifndef __GC\n             _M_base->_M_ref_nonnil();\n #       endif\n-        this->_M_tag = _Rope_RopeFunction<_CharT,_Alloc>::_S_substringfn;\n+        this->_M_tag = _Rope_constants::_S_substringfn;\n     }\n     virtual ~_Rope_RopeSubstring()\n       {\n@@ -1426,7 +1427,7 @@ class rope : public _Rope_base<_CharT,_Alloc> {\n                                   _CharT* __buffer);\n \n         static const unsigned long\n-          _S_min_len[_RopeRep::_S_max_rope_depth + 1];\n+          _S_min_len[_Rope_constants::_S_max_rope_depth + 1];\n \n         static bool _S_is_balanced(_RopeRep* __r)\n                 { return (__r->_M_size >= _S_min_len[__r->_M_depth]); }\n@@ -1511,7 +1512,7 @@ class rope : public _Rope_base<_CharT,_Alloc> {\n         rope(_CharT __c, const allocator_type& __a = allocator_type())\n         : _Base(__a)\n         {\n-            _CharT* __buf = _Data_allocate(_S_rounded_up_size(1));\n+            _CharT* __buf = __a.allocate(_S_rounded_up_size(1));\n \n             std::_Construct(__buf, __c);\n             try {\n@@ -1664,7 +1665,7 @@ class rope : public _Rope_base<_CharT,_Alloc> {\n         // is safe for multiple threads.\n         void delete_c_str () {\n             if (0 == this->_M_tree_ptr) return;\n-            if (_RopeRep::_S_leaf == this->_M_tree_ptr->_M_tag &&\n+            if (_Rope_constants::_S_leaf == this->_M_tree_ptr->_M_tag &&\n                 ((_RopeLeaf*)this->_M_tree_ptr)->_M_data ==\n                       this->_M_tree_ptr->_M_c_string) {\n                 // Representation shared\n@@ -1711,7 +1712,7 @@ class rope : public _Rope_base<_CharT,_Alloc> {\n         }\n \n         size_type max_size() const {\n-            return _S_min_len[_RopeRep::_S_max_rope_depth-1] - 1;\n+            return _S_min_len[_Rope_constants::_S_max_rope_depth - 1] - 1;\n             //  Guarantees that the result can be sufficirntly\n             //  balanced.  Longer ropes will probably still work,\n             //  but it's harder to make guarantees."}, {"sha": "f6160e44cef5f4b0390eda9139ca3d1a236c199f", "filename": "libstdc++-v3/include/ext/ropeimpl.h", "status": "modified", "additions": 42, "deletions": 43, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h?ref=563ae04fec9600d282f6d88f6cb6da761a884e7d", "patch": "@@ -116,7 +116,7 @@ template <class _CharT, class _Alloc>\n void _Rope_iterator_base<_CharT,_Alloc>::_S_setcache\n (_Rope_iterator_base<_CharT,_Alloc>& __x)\n {\n-    const _RopeRep* __path[_RopeRep::_S_max_rope_depth+1];\n+    const _RopeRep* __path[_Rope_constants::_S_max_rope_depth + 1];\n     const _RopeRep* __curr_rope;\n     int __curr_depth = -1;  /* index into path    */\n     size_t __curr_start_pos = 0;\n@@ -351,15 +351,15 @@ template <class _CharT, class _Alloc>\n void _Rope_RopeRep<_CharT,_Alloc>::_M_free_tree()\n {\n     switch(_M_tag) {\n-\tcase _S_leaf:\n+\tcase _Rope_constants::_S_leaf:\n \t    {\n \t        _Rope_RopeLeaf<_CharT,_Alloc>* __l\n \t\t\t= (_Rope_RopeLeaf<_CharT,_Alloc>*)this;\n \t        __l->_Rope_RopeLeaf<_CharT,_Alloc>::~_Rope_RopeLeaf();\n \t        _L_deallocate(__l, 1);\n \t        break;\n \t    }\n-\tcase _S_concat:\n+\tcase _Rope_constants::_S_concat:\n \t    {\n \t        _Rope_RopeConcatenation<_CharT,_Alloc>* __c\n \t\t    = (_Rope_RopeConcatenation<_CharT,_Alloc>*)this;\n@@ -368,15 +368,15 @@ void _Rope_RopeRep<_CharT,_Alloc>::_M_free_tree()\n \t        _C_deallocate(__c, 1);\n \t        break;\n \t    }\n-\tcase _S_function:\n+\tcase _Rope_constants::_S_function:\n \t    {\n \t        _Rope_RopeFunction<_CharT,_Alloc>* __f\n \t\t    = (_Rope_RopeFunction<_CharT,_Alloc>*)this;\n \t        __f->_Rope_RopeFunction<_CharT,_Alloc>::~_Rope_RopeFunction();\n \t        _F_deallocate(__f, 1);\n \t        break;\n \t    }\n-\tcase _S_substringfn:\n+\tcase _Rope_constants::_S_substringfn:\n \t    {\n \t        _Rope_RopeSubstring<_CharT,_Alloc>* __ss =\n \t\t\t(_Rope_RopeSubstring<_CharT,_Alloc>*)this;\n@@ -406,7 +406,7 @@ rope<_CharT,_Alloc>::_S_leaf_concat_char_iter\n {\n     size_t __old_len = __r->_M_size;\n     _CharT* __new_data = (_CharT*)\n-\t_Data_allocate(_S_rounded_up_size(__old_len + __len));\n+\t__r->get_allocator().allocate(_S_rounded_up_size(__old_len + __len));\n     _RopeLeaf* __result;\n \n     uninitialized_copy_n(__r->_M_data, __old_len, __new_data);\n@@ -467,7 +467,7 @@ rope<_CharT,_Alloc>::_S_tree_concat (_RopeRep* __left, _RopeRep* __right)\n   size_t __depth = __result->_M_depth;\n \n   if (__depth > 20 && (__result->_M_size < 1000 ||\n-\t\t       __depth > _RopeRep::_S_max_rope_depth))\n+\t\t       __depth > _Rope_constants::_S_max_rope_depth))\n     {\n       _RopeRep* __balanced;\n \n@@ -504,13 +504,13 @@ rope<_CharT,_Alloc>::_RopeRep* rope<_CharT,_Alloc>::_S_concat_char_iter\n     if (0 == __r)\n       return __STL_ROPE_FROM_UNOWNED_CHAR_PTR(__s, __slen,\n \t\t\t\t\t      __r->get_allocator());\n-    if (_RopeRep::_S_leaf == __r->_M_tag &&\n+    if (_Rope_constants::_S_leaf == __r->_M_tag &&\n           __r->_M_size + __slen <= _S_copy_max) {\n \t__result = _S_leaf_concat_char_iter((_RopeLeaf*)__r, __s, __slen);\n \treturn __result;\n     }\n-    if (_RopeRep::_S_concat == __r->_M_tag\n-\t&& _RopeRep::_S_leaf == ((_RopeConcatenation*)__r)->_M_right->_M_tag) {\n+    if (_Rope_constants::_S_concat == __r->_M_tag\n+\t&& _Rope_constants::_S_leaf == ((_RopeConcatenation*)__r)->_M_right->_M_tag) {\n \t_RopeLeaf* __right =\n \t  (_RopeLeaf* )(((_RopeConcatenation* )__r)->_M_right);\n \tif (__right->_M_size + __slen <= _S_copy_max) {\n@@ -563,13 +563,13 @@ rope<_CharT,_Alloc>::_S_destr_concat_char_iter(\n \treturn __r;\n     }\n     if (__orig_size + __slen <= _S_copy_max &&\n-          _RopeRep::_S_leaf == __r->_M_tag) {\n+          _Rope_constants::_S_leaf == __r->_M_tag) {\n \t__result = _S_destr_leaf_concat_char_iter((_RopeLeaf*)__r, __s, __slen);\n \treturn __result;\n     }\n-    if (_RopeRep::_S_concat == __r->_M_tag) {\n+    if (_Rope_constants::_S_concat == __r->_M_tag) {\n \t_RopeLeaf* __right = (_RopeLeaf*)(((_RopeConcatenation*)__r)->_M_right);\n-\tif (_RopeRep::_S_leaf == __right->_M_tag\n+\tif (_Rope_constants::_S_leaf == __right->_M_tag\n \t    && __right->_M_size + __slen <= _S_copy_max) {\n \t  _RopeRep* __new_right =\n \t    _S_destr_leaf_concat_char_iter(__right, __s, __slen);\n@@ -615,15 +615,15 @@ rope<_CharT,_Alloc>::_S_concat(_RopeRep* __left, _RopeRep* __right)\n \t__left->_M_ref_nonnil();\n \treturn __left;\n     }\n-    if (_RopeRep::_S_leaf == __right->_M_tag) {\n-\tif (_RopeRep::_S_leaf == __left->_M_tag) {\n+    if (_Rope_constants::_S_leaf == __right->_M_tag) {\n+\tif (_Rope_constants::_S_leaf == __left->_M_tag) {\n \t  if (__right->_M_size + __left->_M_size <= _S_copy_max) {\n \t    return _S_leaf_concat_char_iter((_RopeLeaf*)__left,\n \t\t\t\t\t ((_RopeLeaf*)__right)->_M_data,\n \t\t\t\t\t __right->_M_size);\n \t  }\n-\t} else if (_RopeRep::_S_concat == __left->_M_tag\n-\t\t   && _RopeRep::_S_leaf ==\n+\t} else if (_Rope_constants::_S_concat == __left->_M_tag\n+\t\t   && _Rope_constants::_S_leaf ==\n \t\t      ((_RopeConcatenation*)__left)->_M_right->_M_tag) {\n \t  _RopeLeaf* __leftright =\n \t\t    (_RopeLeaf*)(((_RopeConcatenation*)__left)->_M_right);\n@@ -748,7 +748,7 @@ rope<_CharT,_Alloc>::_S_substring(_RopeRep* __base,\n \n \t\tif (__result_len > __lazy_threshold) goto lazy;\n \t\t__section = (_CharT*)\n-\t\t\t_Data_allocate(_S_rounded_up_size(__result_len));\n+       \t__base->get_allocator().allocate(_S_rounded_up_size(__result_len));\n \t\ttry {\n \t\t  (*(__f->_M_fn))(__start, __result_len, __section);\n                 }\n@@ -841,7 +841,7 @@ bool rope<_CharT, _Alloc>::_S_apply_to_pieces(\n {\n     if (0 == __r) return true;\n     switch(__r->_M_tag) {\n-\tcase _RopeRep::_S_concat:\n+\tcase _Rope_constants::_S_concat:\n \t    {\n \t\t_RopeConcatenation* __conc = (_RopeConcatenation*)__r;\n \t\t_RopeRep* __left =  __conc->_M_left;\n@@ -862,13 +862,13 @@ bool rope<_CharT, _Alloc>::_S_apply_to_pieces(\n \t\t}\n \t    }\n \t    return true;\n-\tcase _RopeRep::_S_leaf:\n+\tcase _Rope_constants::_S_leaf:\n \t    {\n \t\t_RopeLeaf* __l = (_RopeLeaf*)__r;\n \t\treturn __c(__l->_M_data + __begin, __end - __begin);\n \t    }\n-\tcase _RopeRep::_S_function:\n-\tcase _RopeRep::_S_substringfn:\n+\tcase _Rope_constants::_S_function:\n+\tcase _Rope_constants::_S_substringfn:\n \t    {\n \t\t_RopeFunction* __f = (_RopeFunction*)__r;\n \t\tsize_t __len = __end - __begin;\n@@ -973,21 +973,21 @@ rope<_CharT,_Alloc>::_S_flatten(_RopeRep* __r, _CharT* __buffer)\n {\n     if (0 == __r) return __buffer;\n     switch(__r->_M_tag) {\n-\tcase _RopeRep::_S_concat:\n+\tcase _Rope_constants::_S_concat:\n \t    {\n \t\t_RopeConcatenation* __c = (_RopeConcatenation*)__r;\n \t\t_RopeRep* __left = __c->_M_left;\n \t\t_RopeRep* __right = __c->_M_right;\n \t\t_CharT* __rest = _S_flatten(__left, __buffer);\n \t\treturn _S_flatten(__right, __rest);\n \t    }\n-\tcase _RopeRep::_S_leaf:\n+\tcase _Rope_constants::_S_leaf:\n \t    {\n \t\t_RopeLeaf* __l = (_RopeLeaf*)__r;\n \t\treturn copy_n(__l->_M_data, __l->_M_size, __buffer).second;\n \t    }\n-\tcase _RopeRep::_S_function:\n-\tcase _RopeRep::_S_substringfn:\n+\tcase _Rope_constants::_S_function:\n+\tcase _Rope_constants::_S_substringfn:\n \t    // We don't yet do anything with substring nodes.\n \t    // This needs to be fixed before ropefiles will work well.\n \t    {\n@@ -1068,8 +1068,7 @@ rope<_CharT,_Alloc>::_S_dump(_RopeRep* __r, int __indent)\n \n template <class _CharT, class _Alloc>\n const unsigned long\n-rope<_CharT,_Alloc>::_S_min_len[\n-  _Rope_RopeRep<_CharT,_Alloc>::_S_max_rope_depth + 1] = {\n+rope<_CharT,_Alloc>::_S_min_len[_Rope_constants::_S_max_rope_depth + 1] = {\n /* 0 */1, /* 1 */2, /* 2 */3, /* 3 */5, /* 4 */8, /* 5 */13, /* 6 */21,\n /* 7 */34, /* 8 */55, /* 9 */89, /* 10 */144, /* 11 */233, /* 12 */377,\n /* 13 */610, /* 14 */987, /* 15 */1597, /* 16 */2584, /* 17 */4181,\n@@ -1087,7 +1086,7 @@ template <class _CharT, class _Alloc>\n typename rope<_CharT,_Alloc>::_RopeRep*\n rope<_CharT,_Alloc>::_S_balance(_RopeRep* __r)\n {\n-    _RopeRep* __forest[_RopeRep::_S_max_rope_depth + 1];\n+    _RopeRep* __forest[_Rope_constants::_S_max_rope_depth + 1];\n     _RopeRep* __result = 0;\n     int __i;\n     // Invariant:\n@@ -1096,11 +1095,11 @@ rope<_CharT,_Alloc>::_S_balance(_RopeRep* __r)\n     // __forest[__i]._M_depth = __i\n     // References from forest are included in refcount.\n \n-    for (__i = 0; __i <= _RopeRep::_S_max_rope_depth; ++__i)\n+    for (__i = 0; __i <= _Rope_constants::_S_max_rope_depth; ++__i)\n       __forest[__i] = 0;\n     try {\n       _S_add_to_forest(__r, __forest);\n-      for (__i = 0; __i <= _RopeRep::_S_max_rope_depth; ++__i)\n+      for (__i = 0; __i <= _Rope_constants::_S_max_rope_depth; ++__i)\n         if (0 != __forest[__i]) {\n #\tifndef __GC\n \t  _Self_destruct_ptr __old(__result);\n@@ -1114,12 +1113,12 @@ rope<_CharT,_Alloc>::_S_balance(_RopeRep* __r)\n     }\n     catch(...)\n       {\n-\tfor(__i = 0; __i <= _RopeRep::_S_max_rope_depth; __i++)\n+\tfor(__i = 0; __i <= _Rope_constants::_S_max_rope_depth; __i++)\n \t  _S_unref(__forest[__i]);\n \t__throw_exception_again;\n       }\n \n-    if (__result->_M_depth > _RopeRep::_S_max_rope_depth)\n+    if (__result->_M_depth > _Rope_constants::_S_max_rope_depth)\n       __throw_length_error(__N(\"rope::_S_balance\"));\n     return(__result);\n }\n@@ -1179,7 +1178,7 @@ rope<_CharT,_Alloc>::_S_add_leaf_to_forest(_RopeRep* __r, _RopeRep** __forest)\n \t    __forest[__i]->_M_unref_nonnil();\n \t    __forest[__i] = 0;\n \t}\n-\tif (__i == _RopeRep::_S_max_rope_depth ||\n+\tif (__i == _Rope_constants::_S_max_rope_depth ||\n \t      __insertee->_M_size < _S_min_len[__i+1]) {\n \t    __forest[__i] = __insertee;\n \t    // refcount is OK since __insertee is now dead.\n@@ -1197,7 +1196,7 @@ rope<_CharT,_Alloc>::_S_fetch(_RopeRep* __r, size_type __i)\n     if (0 != __cstr) return __cstr[__i];\n     for(;;) {\n       switch(__r->_M_tag) {\n-\tcase _RopeRep::_S_concat:\n+\tcase _Rope_constants::_S_concat:\n \t    {\n \t\t_RopeConcatenation* __c = (_RopeConcatenation*)__r;\n \t\t_RopeRep* __left = __c->_M_left;\n@@ -1211,13 +1210,13 @@ rope<_CharT,_Alloc>::_S_fetch(_RopeRep* __r, size_type __i)\n \t\t}\n \t    }\n \t    break;\n-\tcase _RopeRep::_S_leaf:\n+\tcase _Rope_constants::_S_leaf:\n \t    {\n \t\t_RopeLeaf* __l = (_RopeLeaf*)__r;\n \t\treturn __l->_M_data[__i];\n \t    }\n-\tcase _RopeRep::_S_function:\n-\tcase _RopeRep::_S_substringfn:\n+\tcase _Rope_constants::_S_function:\n+\tcase _Rope_constants::_S_substringfn:\n \t    {\n \t\t_RopeFunction* __f = (_RopeFunction*)__r;\n \t\t_CharT __result;\n@@ -1236,7 +1235,7 @@ template <class _CharT, class _Alloc>\n _CharT*\n rope<_CharT,_Alloc>::_S_fetch_ptr(_RopeRep* __r, size_type __i)\n {\n-    _RopeRep* __clrstack[_RopeRep::_S_max_rope_depth];\n+    _RopeRep* __clrstack[_Rope_constants::_S_max_rope_depth];\n     size_t __csptr = 0;\n \n     for(;;) {\n@@ -1392,7 +1391,7 @@ rope<_CharT, _Alloc>::rope(size_t __n, _CharT __c,\n     if (0 == __rest) {\n \t__remainder = 0;\n     } else {\n-\t__rest_buffer = _Data_allocate(_S_rounded_up_size(__rest));\n+\t__rest_buffer = __a.allocate(_S_rounded_up_size(__rest));\n \tuninitialized_fill_n(__rest_buffer, __rest, __c);\n \t_S_cond_store_eos(__rest_buffer[__rest]);\n \ttry {\n@@ -1407,7 +1406,7 @@ rope<_CharT, _Alloc>::rope(size_t __n, _CharT __c,\n     __remainder_rope._M_tree_ptr = __remainder;\n     if (__exponent != 0) {\n \t_CharT* __base_buffer =\n-\t  _Data_allocate(_S_rounded_up_size(__exponentiate_threshold));\n+\t  __a.allocate(_S_rounded_up_size(__exponentiate_threshold));\n \t_RopeLeaf* __base_leaf;\n \trope __base_rope;\n \tuninitialized_fill_n(__base_buffer, __exponentiate_threshold, __c);\n@@ -1454,7 +1453,7 @@ const _CharT* rope<_CharT,_Alloc>::c_str() const {\n     if (0 == __result)\n       {\n \tsize_t __s = size();\n-\t__result = this->_Data_allocate(__s + 1);\n+\t__result = this->get_allocator().allocate(__s + 1);\n \t_S_flatten(this->_M_tree_ptr, __result);\n \t__result[__s] = _S_eos((_CharT*)0);\n \tthis->_M_tree_ptr->_M_c_string = __result;\n@@ -1475,7 +1474,7 @@ const _CharT* rope<_CharT,_Alloc>::replace_with_c_str() {\n \treturn(__old_c_string);\n     }\n     size_t __s = size();\n-    _CharT* __result = _Data_allocate(_S_rounded_up_size(__s));\n+    _CharT* __result = get_allocator().allocate(_S_rounded_up_size(__s));\n     _S_flatten(this->_M_tree_ptr, __result);\n     __result[__s] = _S_eos((_CharT*)0);\n     this->_M_tree_ptr->_M_unref_nonnil();"}, {"sha": "e1859d01467fc6ea83725164c37f87d42588547d", "filename": "libstdc++-v3/libsupc++/del_op.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_op.cc?ref=563ae04fec9600d282f6d88f6cb6da761a884e7d", "patch": "@@ -30,6 +30,7 @@\n \n #include \"new\"\n \n+// We can't rely on having stdlib.h if we're freestanding.\n extern \"C\" void free (void *);\n \n void"}, {"sha": "ab285fd6e977da6ae23d9d14838ef41a68d569b6", "filename": "libstdc++-v3/libsupc++/eh_alloc.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc?ref=563ae04fec9600d282f6d88f6cb6da761a884e7d", "patch": "@@ -1,5 +1,5 @@\n // -*- C++ -*- Allocate exception objects.\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2004 Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n //\n@@ -94,7 +94,7 @@ emergency_mutex_init ()\n \n \n extern \"C\" void *\n-__cxa_allocate_exception(std::size_t thrown_size)\n+__cxa_allocate_exception(std::size_t thrown_size) throw()\n {\n   void *ret;\n \n@@ -141,7 +141,7 @@ __cxa_allocate_exception(std::size_t thrown_size)\n \n \n extern \"C\" void\n-__cxa_free_exception(void *vptr)\n+__cxa_free_exception(void *vptr) throw()\n {\n   char *ptr = (char *) vptr;\n   if (ptr >= &emergency_buffer[0][0]"}, {"sha": "95c0e2588c909aac93edcb44a75075ac4b39a5a2", "filename": "libstdc++-v3/libsupc++/eh_aux_runtime.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_aux_runtime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_aux_runtime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_aux_runtime.cc?ref=563ae04fec9600d282f6d88f6cb6da761a884e7d", "patch": "@@ -34,7 +34,6 @@\n #include \"unwind-cxx.h\"\n #include \"exception_defines.h\"\n \n-\n extern \"C\" void\n __cxa_bad_cast ()\n {"}, {"sha": "0d2196d44908df3ac289a8aad059fe385414d9dd", "filename": "libstdc++-v3/libsupc++/eh_catch.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_catch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_catch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_catch.cc?ref=563ae04fec9600d282f6d88f6cb6da761a884e7d", "patch": "@@ -35,7 +35,7 @@ using namespace __cxxabiv1;\n \n \n extern \"C\" void *\n-__cxa_begin_catch (void *exc_obj_in)\n+__cxa_begin_catch (void *exc_obj_in) throw()\n {\n   _Unwind_Exception *exceptionObject\n     = reinterpret_cast <_Unwind_Exception *>(exc_obj_in);"}, {"sha": "42760229036bd841febf8c3a0bb792bba27d5a5a", "filename": "libstdc++-v3/libsupc++/eh_globals.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_globals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_globals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_globals.cc?ref=563ae04fec9600d282f6d88f6cb6da761a884e7d", "patch": "@@ -1,5 +1,5 @@\n // -*- C++ -*- Manage the thread-local exception globals.\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2004 Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n //\n@@ -69,7 +69,7 @@ get_globals_init_once ()\n #endif\n \n extern \"C\" __cxa_eh_globals *\n-__cxa_get_globals_fast ()\n+__cxa_get_globals_fast () throw()\n {\n #if __GTHREADS\n   if (use_thread_key)\n@@ -82,7 +82,7 @@ __cxa_get_globals_fast ()\n }\n \n extern \"C\" __cxa_eh_globals *\n-__cxa_get_globals ()\n+__cxa_get_globals () throw()\n {\n #if __GTHREADS\n   __cxa_eh_globals *g;"}, {"sha": "73d9f3f133f640d9f69c1128d9af2004c68ab78a", "filename": "libstdc++-v3/src/codecvt.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc?ref=563ae04fec9600d282f6d88f6cb6da761a884e7d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2000, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2002, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -85,8 +85,7 @@ namespace std\n   codecvt<char, char, mbstate_t>::\n   do_in(state_type&, const extern_type* __from, \n \tconst extern_type*, const extern_type*& __from_next,\n-\tintern_type* __to, intern_type*, \n-\tintern_type*& __to_next) const\n+\tintern_type* __to, intern_type*, intern_type*& __to_next) const\n   {\n     // _GLIBCXX_RESOLVE_LIB_DEFECTS\n     // According to the resolution of DR19, \"If returns noconv [...]\n@@ -110,7 +109,10 @@ namespace std\n   codecvt<char, char, mbstate_t>::\n   do_length (state_type&, const extern_type* __from,\n \t     const extern_type* __end, size_t __max) const\n-  { return std::min(__max, static_cast<size_t>(__end - __from)); }\n+  { \n+    size_t __d = static_cast<size_t>(__end - __from);\n+    return std::min(__max, __d); \n+  }\n   \n   int \n   codecvt<char, char, mbstate_t>::"}, {"sha": "b9a6447b26621322cf063440384a8275c01c8b18", "filename": "libstdc++-v3/src/ctype.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc?ref=563ae04fec9600d282f6d88f6cb6da761a884e7d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -108,9 +108,9 @@ namespace std\n     { \t\t\n       if (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n \t{\n-\t  _S_destroy_c_locale(_M_c_locale_ctype);\n-\t  _S_create_c_locale(_M_c_locale_ctype, __s);\n-\t  _M_initialize_ctype();\n+\t  this->_S_destroy_c_locale(this->_M_c_locale_ctype);\n+\t  this->_S_create_c_locale(this->_M_c_locale_ctype, __s);\n+\t  this->_M_initialize_ctype();\n \t}\n     }\n #endif"}, {"sha": "4be3fed619abddbeca2f8df84a400e823b1a2ea5", "filename": "libstdc++-v3/src/ext-inst.cc", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Fsrc%2Fext-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/563ae04fec9600d282f6d88f6cb6da761a884e7d/libstdc%2B%2B-v3%2Fsrc%2Fext-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fext-inst.cc?ref=563ae04fec9600d282f6d88f6cb6da761a884e7d", "patch": "@@ -1,6 +1,6 @@\n // Explicit instantiation file.\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,11 +34,18 @@\n #include <ext/rope>\n #include <ext/stdio_filebuf.h>\n \n+namespace __gnu_internal\n+{\n+  const int min_len = __gnu_cxx::_Rope_constants::_S_max_rope_depth + 1;\n+}\n+\n namespace __gnu_cxx\n {\n+  using namespace __gnu_internal;\n+\n   template\n     const unsigned long \n-    rope<char, std::allocator<char> >::_S_min_len;\n+    rope<char, std::allocator<char> >::_S_min_len[min_len];\n \n   template\n     char\n@@ -49,8 +56,8 @@ namespace __gnu_cxx\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   template\n-    const unsigned long\n-    rope<wchar_t, std::allocator<wchar_t> >::_S_min_len;\n+    const unsigned long \n+    rope<wchar_t, std::allocator<wchar_t> >::_S_min_len[min_len];\n \n   template\n     wchar_t"}]}