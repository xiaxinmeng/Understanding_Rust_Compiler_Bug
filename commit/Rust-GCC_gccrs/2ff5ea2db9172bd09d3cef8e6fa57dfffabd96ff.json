{"sha": "2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZmNWVhMmRiOTE3MmJkMDlkM2NlZjhlNmZhNTdkZmZmYWJkOTZmZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-04-12T18:37:42Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-04-12T18:37:42Z"}, "message": "re PR target/52932 (AVX2 intrinsic _mm256_permutevar8x32_ps has wrong parameter type)\n\n\tPR target/52932\n\t* config/i386/avx2intrin.h (_mm256_permutevar8x32_ps): Change second\n\targument type to __m256i.  Update call to __builtin_ia32_permvarsf256.\n\t* config/i386/sse.md (UNSPEC_VPERMVAR): New.\n\t(UNSPEC_VPERMSI, UNSPEC_VPERMSF): Remove.\n\t(avx2_permvarv8sf, avx2_permvarv8si): Switch operands 1 and 2.\n\t(avx2_permvar<mode>): Macroize insn from avx2_permvarv8sf and\n\tavx2_permvarv8si using VI4F_256 mode iterator.\n\t* config/i386/i386.c (bdesc_args) <__builtin_ia32_permvarsf256>:\n\tUpdate builtin type to V8SF_FTYPE_V8SF_V8SI.\n\t(ix86_expand_vec_perm): Update calls to gen_avx2_permvarv8si and\n\tgen_avx2_permvarv8sf.\n\t(expand_vec_perm_pshufb): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/52932\n\t* gcc.target/i386/avx2-vpermps-1.c (avx2_test): Use __m256i type for\n\tsecond function argument.\n\t* gcc.target/i386/avx2-vpermps-2.c (init_permps): Update declaration.\n\t(calc_permps): Update declaration.  Calculate result correctly.\n\t(avx2_test): Change src2 type to union256i_d.\n\t* gcc.target/i386/avx2-vpermd-2.c (calc_permd): Calculate result\n\tcorrectly.\n\nFrom-SVN: r186388", "tree": {"sha": "34aa5f05cd84d11ce0804a1ab11eb52429dedd93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34aa5f05cd84d11ce0804a1ab11eb52429dedd93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff/comments", "author": null, "committer": null, "parents": [{"sha": "c3f8384f9474f4f354226523e33a47bc6a1e6c57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3f8384f9474f4f354226523e33a47bc6a1e6c57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3f8384f9474f4f354226523e33a47bc6a1e6c57"}], "stats": {"total": 145, "additions": 77, "deletions": 68}, "files": [{"sha": "9f14683148987194b989979dfaeb038ad87e94b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff", "patch": "@@ -1,3 +1,19 @@\n+2012-04-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/52932\n+\t* config/i386/avx2intrin.h (_mm256_permutevar8x32_ps): Change second\n+\targument type to __m256i.  Update call to __builtin_ia32_permvarsf256.\n+\t* config/i386/sse.md (UNSPEC_VPERMVAR): New.\n+\t(UNSPEC_VPERMSI, UNSPEC_VPERMSF): Remove.\n+\t(avx2_permvarv8sf, avx2_permvarv8si): Switch operands 1 and 2.\n+\t(avx2_permvar<mode>): Macroize insn from avx2_permvarv8sf and\n+\tavx2_permvarv8si using VI4F_256 mode iterator.\n+\t* config/i386/i386.c (bdesc_args) <__builtin_ia32_permvarsf256>:\n+\tUpdate builtin type to V8SF_FTYPE_V8SF_V8SI.\n+\t(ix86_expand_vec_perm): Update calls to gen_avx2_permvarv8si and\n+\tgen_avx2_permvarv8sf.\n+\t(expand_vec_perm_pshufb): Ditto.\n+\n 2012-04-12  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/52775\n@@ -200,8 +216,7 @@\n 2012-04-11  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/52918\n-\t* except.c (sjlj_emit_dispatch_table): Properly update loop\n-\tstructure.\n+\t* except.c (sjlj_emit_dispatch_table): Properly update loop structure.\n \n 2012-04-11  Nick Clifton  <nickc@redhat.com>\n \n@@ -426,8 +441,7 @@\n \t* tree-pass.h (tree_lowering_passes): Remove.\n \t* tree-optimize.c (tree_lowering_passes): Remove.\n \t* cgraph.c (cgraph_add_new_function): Inline relevant parts\n-\tof tree_lowering_passes, avoid redundant call of early local\n-\tpasses.\n+\tof tree_lowering_passes, avoid redundant call of early local passes.\n \t* cgraphunit.c (cgraph_lower_function): Fold into ...\n \t(cgraph_analyze_function): ... its single caller.  Inline\n \trelevant parts of tree_lowering_passes.\n@@ -442,8 +456,8 @@\n \tPR lto/52722\n \tPR lto/51765\n \tPR lto/52634\n-\t* lto-cgraph.c (compute_ltrans_boundary): When alias is in the boundary,\n-\tadd its target too.\n+\t* lto-cgraph.c (compute_ltrans_boundary): When alias is in the\n+\tboundary, add its target too.\n \t* lto.c (add_references_to_partition): Add also aliased nodes.\n \t(add_cgraph_node_to_partition,\n \tadd_varpool_node_to_partition): Work on nodes, not functions/variables;\n@@ -564,8 +578,7 @@\n 2012-04-05  Teresa Johnson  <tejohnson@google.com>\n \t    H.J. Lu  <hongjiu.lu@intel.com>\n \n-\t* config/i386/i386.h (ix86_tune_indices): Add\n-\tX86_TUNE_LCP_STALL.\n+\t* config/i386/i386.h (ix86_tune_indices): Add X86_TUNE_LCP_STALL.\n \t* config/i386/i386.md (move immediate to memory peephole2):\n \tAdd cases for HImode move when LCP stall avoidance is needed.\n \t* config/i386/i386.c (initial_ix86_tune_features): Initialize\n@@ -642,17 +655,15 @@\n 2012-04-04  Mike Stump  <mikestump@comcast.net>\n \n \t* doc/rtl.texi (const_double): Document as sign-extending.\n-\t* expmed.c (expand_mult): Ensure we don't use shift\n-\tincorrectly.\n+\t* expmed.c (expand_mult): Ensure we don't use shift incorrectly.\n \t* emit-rtl.c (immed_double_int_const): Refine to state the\n \tvalue is signed.\n \t* simplify-rtx.c (mode_signbit_p): Add a fixme for wider than\n \tCONST_DOUBLE integers.\n \t(simplify_const_unary_operation, UNSIGNED_FLOAT): Ensure no\n \tnegative values are converted.  Fix conversions bigger than\n \tHOST_BITS_PER_WIDE_INT.\n-\t(simplify_binary_operation_1): Ensure we don't use shift\n-\tincorrectly.\n+\t(simplify_binary_operation_1): Ensure we don't use shift incorrectly.\n \t(simplify_immed_subreg): Sign-extend CONST_DOUBLEs.\n \t* explow.c (plus_constant_mode): Add.\n \t(plus_constant): Implement with plus_constant_mode.\n@@ -661,8 +672,7 @@\n 2012-04-04  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/52808\n-\t* tracer.c (tail_duplicate): Do not tail-duplicate loop header\n-\tblocks.\n+\t* tracer.c (tail_duplicate): Do not tail-duplicate loop header blocks.\n \t* Makefile.in (tracer.o): Depend on $(CFGLOOP_H).\n \n 2012-04-04  Tristan Gingold  <gingold@adacore.com>\n@@ -692,8 +702,8 @@\n \t* h8300/h8300.md: Generate 'rte' for monitor functions. Do not\n \tsave EXR on stack for monitor function in case of H8S target\n \twhen \"-mno-exr\" is passed.\n-\t* h8300/h8300-protos.h\n-\t(h8300_current_function_monitor_function_p): Add prototype.\n+\t* h8300/h8300-protos.h (h8300_current_function_monitor_function_p):\n+\tAdd prototype.\n \t* doc/invoke.texi: Document H8S options.\n \n 2012-04-03  Tristan Gingold  <gingold@adacore.com>"}, {"sha": "cebd9a2fced39d4564227779886d20fe91ac8b6b", "filename": "gcc/config/i386/avx2intrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff/gcc%2Fconfig%2Fi386%2Favx2intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff/gcc%2Fconfig%2Fi386%2Favx2intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx2intrin.h?ref=2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff", "patch": "@@ -1034,9 +1034,9 @@ _mm256_permute4x64_pd (__m256d __X, const int __M)\n \n extern __inline __m256\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_permutevar8x32_ps (__m256 __X, __m256 __Y)\n+_mm256_permutevar8x32_ps (__m256 __X, __m256i __Y)\n {\n-  return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X,(__v8sf)__Y);\n+  return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);\n }\n \n #ifdef __OPTIMIZE__"}, {"sha": "abe3f1b96ca237e210262144aa50e820d586d5d6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff", "patch": "@@ -19937,7 +19937,7 @@ ix86_expand_vec_perm (rtx operands[])\n \t  vt = force_reg (maskmode, vt);\n \t  mask = gen_lowpart (maskmode, mask);\n \t  if (maskmode == V8SImode)\n-\t    emit_insn (gen_avx2_permvarv8si (t1, vt, mask));\n+\t    emit_insn (gen_avx2_permvarv8si (t1, mask, vt));\n \t  else\n \t    emit_insn (gen_avx2_pshufbv32qi3 (t1, mask, vt));\n \n@@ -19971,27 +19971,27 @@ ix86_expand_vec_perm (rtx operands[])\n \t     the high bits of the shuffle elements.  No need for us to\n \t     perform an AND ourselves.  */\n \t  if (one_operand_shuffle)\n-\t    emit_insn (gen_avx2_permvarv8si (target, mask, op0));\n+\t    emit_insn (gen_avx2_permvarv8si (target, op0, mask));\n \t  else\n \t    {\n \t      t1 = gen_reg_rtx (V8SImode);\n \t      t2 = gen_reg_rtx (V8SImode);\n-\t      emit_insn (gen_avx2_permvarv8si (t1, mask, op0));\n-\t      emit_insn (gen_avx2_permvarv8si (t2, mask, op1));\n+\t      emit_insn (gen_avx2_permvarv8si (t1, op0, mask));\n+\t      emit_insn (gen_avx2_permvarv8si (t2, op0, mask));\n \t      goto merge_two;\n \t    }\n \t  return;\n \n \tcase V8SFmode:\n \t  mask = gen_lowpart (V8SFmode, mask);\n \t  if (one_operand_shuffle)\n-\t    emit_insn (gen_avx2_permvarv8sf (target, mask, op0));\n+\t    emit_insn (gen_avx2_permvarv8sf (target, op0, mask));\n \t  else\n \t    {\n \t      t1 = gen_reg_rtx (V8SFmode);\n \t      t2 = gen_reg_rtx (V8SFmode);\n-\t      emit_insn (gen_avx2_permvarv8sf (t1, mask, op0));\n-\t      emit_insn (gen_avx2_permvarv8sf (t2, mask, op1));\n+\t      emit_insn (gen_avx2_permvarv8sf (t1, op0, mask));\n+\t      emit_insn (gen_avx2_permvarv8sf (t2, op1, mask));\n \t      goto merge_two;\n \t    }\n \t  return;\n@@ -20004,7 +20004,7 @@ ix86_expand_vec_perm (rtx operands[])\n \t  t2 = gen_reg_rtx (V8SImode);\n \t  emit_insn (gen_avx_vec_concatv8si (t1, op0, op1));\n \t  emit_insn (gen_avx_vec_concatv8si (t2, mask, mask));\n-\t  emit_insn (gen_avx2_permvarv8si (t1, t2, t1));\n+\t  emit_insn (gen_avx2_permvarv8si (t1, t1, t2));\n \t  emit_insn (gen_avx_vextractf128v8si (target, t1, const0_rtx));\n \t  return;\n \n@@ -20014,7 +20014,7 @@ ix86_expand_vec_perm (rtx operands[])\n \t  mask = gen_lowpart (V4SFmode, mask);\n \t  emit_insn (gen_avx_vec_concatv8sf (t1, op0, op1));\n \t  emit_insn (gen_avx_vec_concatv8sf (t2, mask, mask));\n-\t  emit_insn (gen_avx2_permvarv8sf (t1, t2, t1));\n+\t  emit_insn (gen_avx2_permvarv8sf (t1, t1, t2));\n \t  emit_insn (gen_avx_vextractf128v8sf (target, t1, const0_rtx));\n \t  return;\n \n@@ -26948,8 +26948,8 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_pbroadcastv4si, \"__builtin_ia32_pbroadcastd128\", IX86_BUILTIN_PBROADCASTD128, UNKNOWN, (int) V4SI_FTYPE_V4SI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_pbroadcastv2di, \"__builtin_ia32_pbroadcastq128\", IX86_BUILTIN_PBROADCASTQ128, UNKNOWN, (int) V2DI_FTYPE_V2DI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_permvarv8si, \"__builtin_ia32_permvarsi256\", IX86_BUILTIN_VPERMVARSI256, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI },\n+  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_permvarv8sf, \"__builtin_ia32_permvarsf256\", IX86_BUILTIN_VPERMVARSF256, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_permv4df, \"__builtin_ia32_permdf256\", IX86_BUILTIN_VPERMDF256, UNKNOWN, (int) V4DF_FTYPE_V4DF_INT },\n-  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_permvarv8sf, \"__builtin_ia32_permvarsf256\", IX86_BUILTIN_VPERMVARSF256, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_permv4di, \"__builtin_ia32_permdi256\", IX86_BUILTIN_VPERMDI256, UNKNOWN, (int) V4DI_FTYPE_V4DI_INT },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_permv2ti, \"__builtin_ia32_permti256\", IX86_BUILTIN_VPERMTI256, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_INT },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_extracti128, \"__builtin_ia32_extract128i256\", IX86_BUILTIN_VEXTRACT128I256, UNKNOWN, (int) V2DI_FTYPE_V4DI_INT },\n@@ -36126,9 +36126,9 @@ expand_vec_perm_pshufb (struct expand_vec_perm_d *d)\n       else if (vmode == V32QImode)\n \temit_insn (gen_avx2_pshufbv32qi3 (target, op0, vperm));\n       else if (vmode == V8SFmode)\n-\temit_insn (gen_avx2_permvarv8sf (target, vperm, op0));\n+\temit_insn (gen_avx2_permvarv8sf (target, op0, vperm));\n       else\n-\temit_insn (gen_avx2_permvarv8si (target, vperm, op0));\n+\temit_insn (gen_avx2_permvarv8si (target, op0, vperm));\n     }\n   else\n     {"}, {"sha": "ffa0729d74105e24d5890766ba63c345c1006e87", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff", "patch": "@@ -79,8 +79,7 @@\n   UNSPEC_VCVTPS2PH\n \n   ;; For AVX2 support\n-  UNSPEC_VPERMSI\n-  UNSPEC_VPERMSF\n+  UNSPEC_VPERMVAR\n   UNSPEC_VPERMTI\n   UNSPEC_GATHER\n   UNSPEC_VSIBADDR\n@@ -11901,26 +11900,14 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"avx2_permvarv8si\"\n-  [(set (match_operand:V8SI 0 \"register_operand\" \"=x\")\n-\t(unspec:V8SI\n-\t  [(match_operand:V8SI 1 \"register_operand\" \"x\")\n-\t   (match_operand:V8SI 2 \"nonimmediate_operand\" \"xm\")]\n-\t  UNSPEC_VPERMSI))]\n-  \"TARGET_AVX2\"\n-  \"vpermd\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"OI\")])\n-\n-(define_insn \"avx2_permvarv8sf\"\n-  [(set (match_operand:V8SF 0 \"register_operand\" \"=x\")\n-\t(unspec:V8SF\n-\t  [(match_operand:V8SF 1 \"register_operand\" \"x\")\n-\t   (match_operand:V8SF 2 \"nonimmediate_operand\" \"xm\")]\n-\t  UNSPEC_VPERMSF))]\n+(define_insn \"avx2_permvar<mode>\"\n+  [(set (match_operand:VI4F_256 0 \"register_operand\" \"=x\")\n+\t(unspec:VI4F_256\n+\t  [(match_operand:VI4F_256 1 \"nonimmediate_operand\" \"xm\")\n+\t   (match_operand:V8SI 2 \"register_operand\" \"x\")]\n+\t  UNSPEC_VPERMVAR))]\n   \"TARGET_AVX2\"\n-  \"vpermps\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"vperm<ssemodesuffix>\\t{%1, %2, %0|%0, %2, %1}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"OI\")])"}, {"sha": "d3f14645f1aa9630ace65c5b0f9e775406a85090", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff", "patch": "@@ -1,3 +1,14 @@\n+2012-04-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/52932\n+\t* gcc.target/i386/avx2-vpermps-1.c (avx2_test): Use __m256i type for\n+\tsecond function argument.\n+\t* gcc.target/i386/avx2-vpermps-2.c (init_permps): Update declaration.\n+\t(calc_permps): Update declaration.  Calculate result correctly.\n+\t(avx2_test): Change src2 type to union256i_d.\n+\t* gcc.target/i386/avx2-vpermd-2.c (calc_permd): Calculate result\n+\tcorrectly.\n+\n 2012-04-12  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/52775\n@@ -212,7 +223,7 @@\n \n \tPR lto/52722\n \tPR lto/51765\n-\tPR lto/52634\t\n+\tPR lto/52634\n \t* gcc.dg/lto/pr52634_1.c: New testcase.\n \t* gcc.dg/lto/pr52634_0.c: New testcase.\n \n@@ -571,7 +582,7 @@\n \tint32plus.\n \t* gcc.dg/torture/pr48124-4.c: Ditto:\n \t* gcc.dg/torture/pr52530.c: Use long instead of int if int=16.\n-\t\n+\n 2012-03-20  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/52510\n@@ -666,11 +677,11 @@\n \n 2012-03-15  Janne Blomqvist  <jb@gcc.gnu.org>\n \n-        PR libfortran/52434\n-        PR libfortran/48878\n-        PR libfortran/38199\n-        * gfortran.dg/edit_real_1.f90: Don't assume roundTiesToAway.\n-        * gfortran.dg/round_1.f03: Likewise.\n+\tPR libfortran/52434\n+\tPR libfortran/48878\n+\tPR libfortran/38199\n+\t* gfortran.dg/edit_real_1.f90: Don't assume roundTiesToAway.\n+\t* gfortran.dg/round_1.f03: Likewise.\n \n 2012-03-15  Jakub Jelinek  <jakub@redhat.com>\n \t    Andrew Pinski  <apinski@cavium.com>\n@@ -1833,7 +1844,7 @@\n \n 2012-02-06  Andrey Belevantsev  <abel@ispras.ru>\n \n-\t* gcc.dg/pr48374.c: Actually add the test I forgot \n+\t* gcc.dg/pr48374.c: Actually add the test I forgot\n \tin the 2012-01-25 commit.\n \n 2012-02-05  Thomas K\u00f6nig  <tkoenig@gcc.gnu.org>"}, {"sha": "a663337e9a99028ce2a464b44d55541d2370a3fe", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpermd-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermd-2.c?ref=2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff", "patch": "@@ -29,8 +29,8 @@ calc_permd (int *src1, int *src2, int *dst)\n   memcpy (dst, src1, 32);\n   for (i = 0; i < 8; i++)\n     {\n-      temp = src1[i];\n-      dst[i] = src2[temp & 7];\n+      temp = src2[i];\n+      dst[i] = src1[temp & 7];\n     }\n }\n "}, {"sha": "bf436599d54cc5bebd56d9cd63254f8747f88b57", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpermps-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermps-1.c?ref=2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff", "patch": "@@ -5,9 +5,10 @@\n #include <immintrin.h>\n \n __m256 x;\n+__m256i y;\n \n void extern\n avx2_test (void)\n {\n-  x = _mm256_permutevar8x32_ps (x, x);\n+  x = _mm256_permutevar8x32_ps (x, y);\n }"}, {"sha": "4190189a89cd96db8dfedf43115c80d9d780e1d7", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpermps-2.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpermps-2.c?ref=2ff5ea2db9172bd09d3cef8e6fa57dfffabd96ff", "patch": "@@ -8,7 +8,7 @@\n #define NUM 10\n \n static void\n-init_permps (float *src1, float *src2, int seed)\n+init_permps (float *src1, int *src2, int seed)\n {\n   int i, sign = 1;\n \n@@ -21,24 +21,24 @@ init_permps (float *src1, float *src2, int seed)\n }\n \n static void\n-calc_permps (float *src1, float *src2, float *dst)\n+calc_permps (float *src1, int *src2, float *dst)\n {\n   int i;\n   unsigned temp;\n-  unsigned *idx = (int *) src1;\n \n   memcpy (dst, src1, 32);\n   for (i = 0; i < 8; i++)\n     {\n-      temp = idx[i];\n-      dst[i] = src2[temp & 7];\n+      temp = src2[i];\n+      dst[i] = src1[temp & 7];\n     }\n }\n \n static void\n avx2_test (void)\n {\n-  union256 src1, src2, dst;\n+  union256 src1, dst;\n+  union256i_d src2;\n   float dst_ref[8];\n   int i;\n "}]}