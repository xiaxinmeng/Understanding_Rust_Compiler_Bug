{"sha": "7dee3f36c6feef2bc456ac5f578412d14d205e43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RlZTNmMzZjNmZlZWYyYmM0NTZhYzVmNTc4NDEyZDE0ZDIwNWU0Mw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-05-13T10:00:46Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-05-13T10:00:46Z"}, "message": "Warning patches:\n\n        * Makefile.in (lex.o): Depend on output.h.\n        * call.c (add_function_candidate): Remove unused variable `cand'.\n        (add_conv_candidate): Likewise.\n        (build_builtin_candidate): Likewise.\n        * cp-tree.h: Add prototype for `types_overlap_p'.\n        * decl.c (signal_catch): Mark parameter `sig' with ATTRIBUTE_UNUSED.\n        * decl2.c (merge_functions): Remove unused variables `tmp' and\n        `tempn'.\n        * error.c (expr_as_string): Mark parameter `v' with ATTRIBUTE_UNUSED.\n        (code_as_string): Likewise.\n        (language_as_string): Likewise.\n        (parm_as_string): Likewise.\n        (op_as_string): Likewise.\n        (assop_as_string): Likewise.\n        (cv_as_string): Likewise.\n        * lex.c: Include output.h.\n        * pt.c (type_unification): Cast first argument of `bzero' to a char*.\n        * search.c (dfs_no_overlap_yet): Mark parameter `t' with\n        ATTRIBUTE_UNUSED.\n        * tinfo.cc (__class_type_info::dcast): Change the type of variable\n        `i' from int to size_t.\n        * typeck.c (language_lvalue_valid): Mark parameter `exp' with\n        ATTRIBUTE_UNUSED.\n\nFrom-SVN: r19707", "tree": {"sha": "80dff24a24d766b18e6efb5583cf5f1722233e98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80dff24a24d766b18e6efb5583cf5f1722233e98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dee3f36c6feef2bc456ac5f578412d14d205e43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dee3f36c6feef2bc456ac5f578412d14d205e43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dee3f36c6feef2bc456ac5f578412d14d205e43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dee3f36c6feef2bc456ac5f578412d14d205e43/comments", "author": null, "committer": null, "parents": [{"sha": "d668e863c9fc14810a6d6390c47a071adae38db1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d668e863c9fc14810a6d6390c47a071adae38db1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d668e863c9fc14810a6d6390c47a071adae38db1"}], "stats": {"total": 70, "additions": 53, "deletions": 17}, "files": [{"sha": "8cfb061f6645a9f5045cf3f76c6e645d0e591596", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dee3f36c6feef2bc456ac5f578412d14d205e43/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dee3f36c6feef2bc456ac5f578412d14d205e43/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7dee3f36c6feef2bc456ac5f578412d14d205e43", "patch": "@@ -1,3 +1,39 @@\n+Wed May 13 12:54:30 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (lex.o): Depend on output.h.\n+\t\n+\t* call.c (add_function_candidate): Remove unused variable `cand'.\n+\t(add_conv_candidate): Likewise.\n+\t(build_builtin_candidate): Likewise.\n+\t\n+\t* cp-tree.h: Add prototype for `types_overlap_p'.\n+\n+\t* decl.c (signal_catch): Mark parameter `sig' with ATTRIBUTE_UNUSED.\n+\n+\t* decl2.c (merge_functions): Remove unused variables `tmp' and\n+\t`tempn'.\n+\n+\t* error.c (expr_as_string): Mark parameter `v' with ATTRIBUTE_UNUSED.\n+\t(code_as_string): Likewise.\n+\t(language_as_string): Likewise.\n+\t(parm_as_string): Likewise.\n+\t(op_as_string): Likewise.\n+\t(assop_as_string): Likewise.\n+\t(cv_as_string): Likewise.\n+\n+\t* lex.c: Include output.h.\n+\n+\t* pt.c (type_unification): Cast first argument of `bzero' to a char*.\n+\n+\t* search.c (dfs_no_overlap_yet): Mark parameter `t' with\n+\tATTRIBUTE_UNUSED.\n+\n+\t* tinfo.cc (__class_type_info::dcast): Change the type of variable\n+\t`i' from int to size_t.\n+\n+\t* typeck.c (language_lvalue_valid): Mark parameter `exp' with\n+\tATTRIBUTE_UNUSED.\n+\n Tue May 12 21:37:49 1998  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* error.c (dump_simple_decl): Use DECL_CLASS_SCOPE_P and/or"}, {"sha": "869023d15d80a846bfc5bd94484c36ee94ac7baf", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dee3f36c6feef2bc456ac5f578412d14d205e43/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dee3f36c6feef2bc456ac5f578412d14d205e43/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=7dee3f36c6feef2bc456ac5f578412d14d205e43", "patch": "@@ -234,7 +234,8 @@ spew.o : spew.c $(CONFIG_H) $(CXX_TREE_H) \\\n   $(PARSE_H) $(srcdir)/../flags.h lex.h $(srcdir)/../system.h\n lex.o : lex.c $(CONFIG_H) $(CXX_TREE_H) \\\n   $(PARSE_H) input.c $(srcdir)/../flags.h hash.h lex.h \\\n-  $(srcdir)/../c-pragma.h $(srcdir)/../system.h $(srcdir)/../toplev.h\n+  $(srcdir)/../c-pragma.h $(srcdir)/../system.h $(srcdir)/../toplev.h \\\n+  $(srcdir)/../output.h\n decl.o : decl.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h \\\n   lex.h decl.h $(srcdir)/../stack.h $(srcdir)/../output.h  \\\n   $(srcdir)/../except.h $(srcdir)/../system.h $(srcdir)/../toplev.h"}, {"sha": "a5c16e9617ff9eebc578059db8421a76a6404c74", "filename": "gcc/cp/call.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dee3f36c6feef2bc456ac5f578412d14d205e43/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dee3f36c6feef2bc456ac5f578412d14d205e43/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=7dee3f36c6feef2bc456ac5f578412d14d205e43", "patch": "@@ -1095,7 +1095,6 @@ add_function_candidate (candidates, fn, arglist, flags)\n   tree parmnode = parmlist;\n   tree argnode = arglist;\n   int viable = 1;\n-  struct z_candidate *cand;\n \n   /* The `this' and `in_chrg' arguments to constructors are not considered\n      in overload resolution.  */\n@@ -1183,7 +1182,6 @@ add_conv_candidate (candidates, fn, obj, arglist)\n   tree parmnode = parmlist;\n   tree argnode = arglist;\n   int viable = 1;\n-  struct z_candidate *cand;\n   int flags = LOOKUP_NORMAL;\n \n   for (i = 0; i < len; ++i)\n@@ -1243,7 +1241,6 @@ build_builtin_candidate (candidates, fnname, type1, type2,\n {\n   tree t, convs;\n   int viable = 1, i;\n-  struct z_candidate *cand;\n   tree types[2];\n \n   types[0] = type1;"}, {"sha": "183578bcf69b8d33dc96ee99c5427dd64c510885", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dee3f36c6feef2bc456ac5f578412d14d205e43/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dee3f36c6feef2bc456ac5f578412d14d205e43/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7dee3f36c6feef2bc456ac5f578412d14d205e43", "patch": "@@ -2570,6 +2570,7 @@ extern tree build_dynamic_cast\t\t\tPROTO((tree, tree));\n extern void synthesize_tinfo_fn\t\t\tPROTO((tree));\n \n /* in search.c */\n+extern int types_overlap_p\t\t\tPROTO((tree, tree));\n extern void push_memoized_context\t\tPROTO((tree, int));\n extern void pop_memoized_context\t\tPROTO((int));\n extern tree get_vbase\t\t\t\tPROTO((tree, tree));"}, {"sha": "287c8ad430ccc543e1aacd570be22c688b05b976", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dee3f36c6feef2bc456ac5f578412d14d205e43/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dee3f36c6feef2bc456ac5f578412d14d205e43/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7dee3f36c6feef2bc456ac5f578412d14d205e43", "patch": "@@ -5002,7 +5002,7 @@ lookup_name_current_level (name)\n \n static void\n signal_catch (sig)\n-     int sig;\n+     int sig ATTRIBUTE_UNUSED;\n {\n   signal (SIGSEGV, SIG_DFL);\n #ifdef SIGIOT"}, {"sha": "200ace428312350449c50d00936ca5bfbd7c22d7", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dee3f36c6feef2bc456ac5f578412d14d205e43/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dee3f36c6feef2bc456ac5f578412d14d205e43/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=7dee3f36c6feef2bc456ac5f578412d14d205e43", "patch": "@@ -3743,7 +3743,6 @@ merge_functions (s1, s2)\n      tree s1;\n      tree s2;\n {\n-  tree tmp, tempn;\n   if (TREE_CODE (s2) == OVERLOAD)\n     while (s2)\n       {"}, {"sha": "9ec1f28f0e33b6f8d28f92b5420c48cb0b50b4f8", "filename": "gcc/cp/error.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dee3f36c6feef2bc456ac5f578412d14d205e43/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dee3f36c6feef2bc456ac5f578412d14d205e43/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=7dee3f36c6feef2bc456ac5f578412d14d205e43", "patch": "@@ -1706,7 +1706,7 @@ type_as_string (typ, v)\n char *\n expr_as_string (decl, v)\n      tree decl;\n-     int v;\n+     int v ATTRIBUTE_UNUSED;\n {\n   OB_INIT ();\n \n@@ -1804,15 +1804,15 @@ cp_line_of (t)\n char *\n code_as_string (c, v)\n      enum tree_code c;\n-     int v;\n+     int v ATTRIBUTE_UNUSED;\n {\n   return tree_code_name [c];\n }\n \n char *\n language_as_string (c, v)\n      enum languages c;\n-     int v;\n+     int v ATTRIBUTE_UNUSED;\n {\n   switch (c)\n     {\n@@ -1832,7 +1832,8 @@ language_as_string (c, v)\n \n char *\n parm_as_string (p, v)\n-     int p, v;\n+     int p;\n+     int v ATTRIBUTE_UNUSED;\n {\n   if (p < 0)\n     return \"`this'\";\n@@ -1844,7 +1845,7 @@ parm_as_string (p, v)\n char *\n op_as_string (p, v)\n      enum tree_code p;\n-     int v;\n+     int v ATTRIBUTE_UNUSED;\n {\n   static char buf[] = \"operator                \";\n \n@@ -1858,7 +1859,7 @@ op_as_string (p, v)\n char *\n assop_as_string (p, v)\n      enum tree_code p;\n-     int v;\n+     int v ATTRIBUTE_UNUSED;\n {\n   static char buf[] = \"operator                \";\n \n@@ -1897,7 +1898,7 @@ args_as_string (p, v)\n char *\n cv_as_string (p, v)\n      tree p;\n-     int v;\n+     int v ATTRIBUTE_UNUSED;\n {\n   OB_INIT ();\n "}, {"sha": "36a03683a5fe43f38edf2b9cb9b9306d236f37b3", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dee3f36c6feef2bc456ac5f578412d14d205e43/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dee3f36c6feef2bc456ac5f578412d14d205e43/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=7dee3f36c6feef2bc456ac5f578412d14d205e43", "patch": "@@ -37,6 +37,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"obstack.h\"\n #include \"c-pragma.h\"\n #include \"toplev.h\"\n+#include \"output.h\"\n \n /* MULTIBYTE_CHARS support only works for native compilers.\n    ??? Ideally what we want is to model widechar support after"}, {"sha": "e9938770d6eb1ff63e1f3b1bafcd019afcae9cce", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dee3f36c6feef2bc456ac5f578412d14d205e43/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dee3f36c6feef2bc456ac5f578412d14d205e43/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7dee3f36c6feef2bc456ac5f578412d14d205e43", "patch": "@@ -5684,7 +5684,7 @@ type_unification (tparms, targs, parms, args, targs_in,\n \treturn 1;\n \n       explicit_mask = alloca (sizeof (int) * TREE_VEC_LENGTH (targs));\n-      bzero (explicit_mask, sizeof(int) * TREE_VEC_LENGTH (targs));\n+      bzero ((char *) explicit_mask, sizeof(int) * TREE_VEC_LENGTH (targs));\n \n       for (i = 0; \n \t   i < TREE_VEC_LENGTH (arg_vec) "}, {"sha": "c4b1b6729d657ecc28c2c739c584d70c4bab40f7", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dee3f36c6feef2bc456ac5f578412d14d205e43/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dee3f36c6feef2bc456ac5f578412d14d205e43/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=7dee3f36c6feef2bc456ac5f578412d14d205e43", "patch": "@@ -3868,7 +3868,7 @@ dfs_check_overlap (empty_binfo)\n \n static int\n dfs_no_overlap_yet (t)\n-     tree t;\n+     tree t ATTRIBUTE_UNUSED;\n {\n   return found_overlap == 0;\n }"}, {"sha": "4b68fd1b3fb20e2a6b581ce60b6b4bf7a17bcac7", "filename": "gcc/cp/tinfo.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dee3f36c6feef2bc456ac5f578412d14d205e43/gcc%2Fcp%2Ftinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dee3f36c6feef2bc456ac5f578412d14d205e43/gcc%2Fcp%2Ftinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftinfo.cc?ref=7dee3f36c6feef2bc456ac5f578412d14d205e43", "patch": "@@ -77,7 +77,7 @@ dcast (const type_info& desired, int is_public, void *objptr,\n     return objptr;\n \n   void *match_found = 0;\n-  for (int i = 0; i < n_bases; i++)\n+  for (size_t i = 0; i < n_bases; i++)\n     {\n       if (is_public && base_list[i].access != PUBLIC)\n \tcontinue;"}, {"sha": "27a9c6e010d34975d4a21e99f4d10f79bd9934ed", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dee3f36c6feef2bc456ac5f578412d14d205e43/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dee3f36c6feef2bc456ac5f578412d14d205e43/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=7dee3f36c6feef2bc456ac5f578412d14d205e43", "patch": "@@ -6220,7 +6220,7 @@ build_x_modify_expr (lhs, modifycode, rhs)\n \n int\n language_lvalue_valid (exp)\n-     tree exp;\n+     tree exp ATTRIBUTE_UNUSED;\n {\n   return 1;\n }"}]}