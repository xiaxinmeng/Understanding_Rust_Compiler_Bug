{"sha": "58adb739eff82cda929295c909e70be78f81ffbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThhZGI3MzllZmY4MmNkYTkyOTI5NWM5MDllNzBiZTc4ZjgxZmZiZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-03-29T15:20:07Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-03-29T15:20:07Z"}, "message": "re PR tree-optimization/43560 (possible wrong code bug)\n\n2010-03-29  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/43560\n\t* tree-ssa-loop-im.c (ref_always_accessed_p): Add store_p\n\tparameter.\n\t(can_sm_ref_p): Treat stores to readonly locations as\n\ttrapping.\n\n\t* gcc.dg/torture/pr43560.c: New testcase.\n\nFrom-SVN: r157799", "tree": {"sha": "f88e6ff40be54449b7f60f480ca30300c46d4eb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f88e6ff40be54449b7f60f480ca30300c46d4eb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58adb739eff82cda929295c909e70be78f81ffbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58adb739eff82cda929295c909e70be78f81ffbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58adb739eff82cda929295c909e70be78f81ffbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58adb739eff82cda929295c909e70be78f81ffbe/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "521506258fa5b6b57a50b0570d8208894ed19f79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/521506258fa5b6b57a50b0570d8208894ed19f79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/521506258fa5b6b57a50b0570d8208894ed19f79"}], "stats": {"total": 86, "additions": 81, "deletions": 5}, "files": [{"sha": "73f102db9f7057873bd1073c6a2c3b8502103010", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58adb739eff82cda929295c909e70be78f81ffbe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58adb739eff82cda929295c909e70be78f81ffbe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58adb739eff82cda929295c909e70be78f81ffbe", "patch": "@@ -1,3 +1,11 @@\n+2010-03-29  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/43560\n+\t* tree-ssa-loop-im.c (ref_always_accessed_p): Add store_p\n+\tparameter.\n+\t(can_sm_ref_p): Treat stores to readonly locations as\n+\ttrapping.\n+\n 2010-03-29  Jie Zhang  <jie@codesourcery.com>\n \n \tPR 43564"}, {"sha": "5fe5fc94a76f057b8afafc16d6e75683cae15456", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58adb739eff82cda929295c909e70be78f81ffbe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58adb739eff82cda929295c909e70be78f81ffbe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=58adb739eff82cda929295c909e70be78f81ffbe", "patch": "@@ -1,3 +1,8 @@\n+2010-03-29  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/43560\n+\t* gcc.dg/torture/pr43560.c: New testcase.\n+\n 2010-03-29  Jason Merrill  <jason@redhat.com>\n \n \tN3077"}, {"sha": "44abb80b193bd2064d0184b3aa94cc2e00b017de", "filename": "gcc/testsuite/gcc.dg/torture/pr43560.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58adb739eff82cda929295c909e70be78f81ffbe/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr43560.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58adb739eff82cda929295c909e70be78f81ffbe/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr43560.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr43560.c?ref=58adb739eff82cda929295c909e70be78f81ffbe", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-require-weak \"\" } */\n+\n+int g_6[1][2] = {{1,1}};\n+int g_34 = 0;\n+int *const g_82 = &g_6[0][1];\n+int *g_85[2][1] __attribute__((weak));\n+\n+void __attribute__((noinline))\n+func_4 (int x)\n+{\n+  int i;\n+  for (i = 0; i <= x; i++) {\n+      if (g_6[0][1]) {\n+\t  *g_82 = 1;\n+      } else {\n+\t  int **l_109 = &g_85[1][0];\n+\t  if (&g_82 != l_109) {\n+\t  } else {\n+\t      *l_109 = &g_6[0][1];\n+\t  }\n+\t  *g_82 = 1;\n+      }\n+  }\n+}\n+\n+int main (void)\n+{\n+  g_85[0][0] = &g_34;\n+  g_85[1][0] = &g_34;\n+  func_4(1);\n+  return 0;\n+} \n+"}, {"sha": "825fb71760a09c10fefb36ed0b40f4549f8b34ab", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58adb739eff82cda929295c909e70be78f81ffbe/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58adb739eff82cda929295c909e70be78f81ffbe/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=58adb739eff82cda929295c909e70be78f81ffbe", "patch": "@@ -1900,23 +1900,45 @@ hoist_memory_references (struct loop *loop, bitmap mem_refs,\n     }\n }\n \n-/* Returns true if REF is always accessed in LOOP.  */\n+/* Returns true if REF is always accessed in LOOP.  If STORED_P is true\n+   make sure REF is always stored to in LOOP.  */\n \n static bool\n-ref_always_accessed_p (struct loop *loop, mem_ref_p ref)\n+ref_always_accessed_p (struct loop *loop, mem_ref_p ref, bool stored_p)\n {\n   VEC (mem_ref_loc_p, heap) *locs = NULL;\n   unsigned i;\n   mem_ref_loc_p loc;\n   bool ret = false;\n   struct loop *must_exec;\n+  tree base;\n+\n+  base = get_base_address (ref->mem);\n+  if (INDIRECT_REF_P (base))\n+    base = TREE_OPERAND (base, 0);\n \n   get_all_locs_in_loop (loop, ref, &locs);\n   for (i = 0; VEC_iterate (mem_ref_loc_p, locs, i, loc); i++)\n     {\n       if (!get_lim_data (loc->stmt))\n \tcontinue;\n \n+      /* If we require an always executed store make sure the statement\n+         stores to the reference.  */\n+      if (stored_p)\n+\t{\n+\t  tree lhs;\n+\t  if (!gimple_get_lhs (loc->stmt))\n+\t    continue;\n+\t  lhs = get_base_address (gimple_get_lhs (loc->stmt));\n+\t  if (!lhs)\n+\t    continue;\n+\t  if (INDIRECT_REF_P (lhs))\n+\t    lhs = TREE_OPERAND (lhs, 0);\n+\t  if (lhs != base)\n+\t    continue;\n+\t}\n+\n       must_exec = get_lim_data (loc->stmt)->always_executed_in;\n       if (!must_exec)\n \tcontinue;\n@@ -2054,6 +2076,8 @@ ref_indep_loop_p (struct loop *loop, mem_ref_p ref)\n static bool\n can_sm_ref_p (struct loop *loop, mem_ref_p ref)\n {\n+  tree base;\n+\n   /* Unless the reference is stored in the loop, there is nothing to do.  */\n   if (!bitmap_bit_p (ref->stored, loop->num))\n     return false;\n@@ -2064,9 +2088,14 @@ can_sm_ref_p (struct loop *loop, mem_ref_p ref)\n       || !for_each_index (&ref->mem, may_move_till, loop))\n     return false;\n \n-  /* If it can trap, it must be always executed in LOOP.  */\n-  if (tree_could_trap_p (ref->mem)\n-      && !ref_always_accessed_p (loop, ref))\n+  /* If it can trap, it must be always executed in LOOP.\n+     Readonly memory locations may trap when storing to them, but\n+     tree_could_trap_p is a predicate for rvalues, so check that\n+     explicitly.  */\n+  base = get_base_address (ref->mem);\n+  if ((tree_could_trap_p (ref->mem)\n+       || (DECL_P (base) && TREE_READONLY (base)))\n+      && !ref_always_accessed_p (loop, ref, true))\n     return false;\n \n   /* And it must be independent on all other memory references"}]}