{"sha": "2b572b3c213b51854f5344654f23e11eaa83563e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI1NzJiM2MyMTNiNTE4NTRmNTM0NDY1NGYyM2UxMWVhYTgzNTYzZQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2016-01-27T19:19:47Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2016-01-27T19:19:47Z"}, "message": "re PR tree-optimization/68398 (coremark regression due to r229685)\n\n\tPR tree-optimization/68398\n\t* params.def (PARAM_FSM_SCALE_PATH_STMTS): New parameter.\n\t(PARAM_FSM_SCALE_PATH_BLOCKS): Likewise.\n\t* tree-ssa-threadbackward.c (fsm_find_control_statement_thread_paths):\n\tOnly count PHIs in the last block in the path.  The others will\n\tconst/copy propagate away.  Add heuristic to allow more irreducible\n\tsubloops to be created when it is likely profitable to do so.\n\n\t* tree-ssa-threadbackward.c (fsm_find_control_statement_thread_paths):\n\tFix typo in comment.  Use gsi_after_labels and remove the GIMPLE_LABEL\n\tcheck from within the loop.  Use gsi_next_nondebug rather than gsi_next.\n\n\tPR tree-optimization/68398\n\t* gcc.dg/tree-ssa/pr66752-3.c: Update expected output.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-2c.c: Add extra statements on thread\n\tpath to avoid new heuristic allowing more irreducible regions\n\t* gcc.dg/tree-ssa/ssa-dom-thread-2d.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp46.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Update expected output.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-2g.c: New test.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-2h.c: Likewise.\n\nFrom-SVN: r232897", "tree": {"sha": "d12efa856784b2c9751e6eb3e813f70f08470400", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d12efa856784b2c9751e6eb3e813f70f08470400"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b572b3c213b51854f5344654f23e11eaa83563e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b572b3c213b51854f5344654f23e11eaa83563e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b572b3c213b51854f5344654f23e11eaa83563e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b572b3c213b51854f5344654f23e11eaa83563e/comments", "author": null, "committer": null, "parents": [{"sha": "fa74a4bca84aabe0a1500e4fe5359895c1f07e55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa74a4bca84aabe0a1500e4fe5359895c1f07e55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa74a4bca84aabe0a1500e4fe5359895c1f07e55"}], "stats": {"total": 173, "additions": 143, "deletions": 30}, "files": [{"sha": "76c7af2e6ef3ba6868462ba300746e5bd01e17e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b572b3c213b51854f5344654f23e11eaa83563e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b572b3c213b51854f5344654f23e11eaa83563e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b572b3c213b51854f5344654f23e11eaa83563e", "patch": "@@ -1,3 +1,18 @@\n+2016-01-27  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/68398\n+\tPR tree-optimization/69196\n+\t* params.def (PARAM_FSM_SCALE_PATH_STMTS): New parameter.\n+\t(PARAM_FSM_SCALE_PATH_BLOCKS): Likewise.\n+\t* tree-ssa-threadbackward.c (fsm_find_control_statement_thread_paths):\n+\tOnly count PHIs in the last block in the path.  The others will\n+\tconst/copy propagate away.  Add heuristic to allow more irreducible\n+\tsubloops to be created when it is likely profitable to do so.\n+\n+\t* tree-ssa-threadbackward.c (fsm_find_control_statement_thread_paths):\n+\tFix typo in comment.  Use gsi_after_labels and remove the GIMPLE_LABEL\n+\tcheck from within the loop.  Use gsi_next_nondebug rather than gsi_next.\n+\n 2016-01-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR lto/69254"}, {"sha": "0722ad7d9898c269265be79db05d1d18ec8835ec", "filename": "gcc/params.def", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b572b3c213b51854f5344654f23e11eaa83563e/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b572b3c213b51854f5344654f23e11eaa83563e/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=2b572b3c213b51854f5344654f23e11eaa83563e", "patch": "@@ -1145,6 +1145,16 @@ DEFPARAM (PARAM_CHKP_MAX_CTOR_SIZE,\n \t  \"constructor generated by Pointer Bounds Checker.\",\n \t  5000, 100, 0)\n \n+DEFPARAM (PARAM_FSM_SCALE_PATH_STMTS,\n+\t  \"fsm-scale-path-stmts\",\n+\t  \"Scale factor to apply to the number of statements in a threading path when comparing to the number of (scaled) blocks.\",\n+\t  2, 1, 10)\n+\n+DEFPARAM (PARAM_FSM_SCALE_PATH_BLOCKS,\n+\t  \"fsm-scale-path-blocks\",\n+\t  \"Scale factor to apply to the number of blocks in a threading path when comparing to the number of (scaled) statements.\",\n+\t  3, 1, 10)\n+\n DEFPARAM (PARAM_MAX_FSM_THREAD_PATH_INSNS,\n \t  \"max-fsm-thread-path-insns\",\n \t  \"Maximum number of instructions to copy when duplicating blocks on a finite state automaton jump thread path.\","}, {"sha": "22a124a1ab396e166ae9d7d9a4ab60c426969cd7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b572b3c213b51854f5344654f23e11eaa83563e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b572b3c213b51854f5344654f23e11eaa83563e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2b572b3c213b51854f5344654f23e11eaa83563e", "patch": "@@ -1,3 +1,16 @@\n+2016-01-25  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/68398\n+        PR tree-optimization/69196\n+\t* gcc.dg/tree-ssa/pr66752-3.c: Update expected output.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-2c.c: Add extra statements on thread\n+\tpath to avoid new heuristic allowing more irreducible regions\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-2d.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp46.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Update expected output.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-2g.c: New test.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-2h.c: Likewise.\n+\n 2016-01-27  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/68062"}, {"sha": "2949cbb5158d6a9e7367c20e854acfa03f91720f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr66752-3.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b572b3c213b51854f5344654f23e11eaa83563e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr66752-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b572b3c213b51854f5344654f23e11eaa83563e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr66752-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr66752-3.c?ref=2b572b3c213b51854f5344654f23e11eaa83563e", "patch": "@@ -32,10 +32,9 @@ foo (int N, int c, int b, int *a)\n    pt--;\n }\n \n-/* There are 3 FSM jump threading opportunities, one of which will\n-   get filtered.  */\n-/* { dg-final { scan-tree-dump-times \"Registering FSM\" 2 \"vrp1\"} } */\n-/* { dg-final { scan-tree-dump-times \"FSM would create irreducible loop\" 1 \"vrp1\"} } */\n+/* There are 3 FSM jump threading opportunities, all of which will be\n+   realized, which will eliminate testing of FLAG, completely.  */\n+/* { dg-final { scan-tree-dump-times \"Registering FSM\" 3 \"vrp1\"} } */\n \n /* There should be no assignments or references to FLAG.  */\n /* { dg-final { scan-tree-dump-not \"flag\" \"optimized\"} } */"}, {"sha": "f91467614c0794bfdf148bba7bf7265bbf5bd7ae", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-2c.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b572b3c213b51854f5344654f23e11eaa83563e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b572b3c213b51854f5344654f23e11eaa83563e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2c.c?ref=2b572b3c213b51854f5344654f23e11eaa83563e", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile } */ \n+/* { dg-do compile } */\n /* { dg-options \"-O2 -fdump-tree-vrp1-stats -fdump-tree-dom2-stats\" } */\n \n void foo();\n@@ -15,6 +15,9 @@ void dont_thread_1 (void)\n \n   do\n     {\n+      bla ();\n+      bla ();\n+      bla ();\n       if (first)\n \tfoo ();\n       else"}, {"sha": "a04aabf2215bea60bb4d3a4680ba481e3bd302ce", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-2d.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b572b3c213b51854f5344654f23e11eaa83563e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b572b3c213b51854f5344654f23e11eaa83563e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2d.c?ref=2b572b3c213b51854f5344654f23e11eaa83563e", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile } */ \n+/* { dg-do compile } */\n /* { dg-options \"-O2 -fdump-tree-vrp1-stats -fdump-tree-dom2-stats\" } */\n \n void foo();\n@@ -13,6 +13,9 @@ void dont_thread_2 (int first)\n \n   do\n     {\n+      bla ();\n+      bla ();\n+      bla ();\n       if (first)\n \tfoo ();\n       else"}, {"sha": "6d1ff5debd59f56e6b9e784c6720fa3638220fdb", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-2g.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b572b3c213b51854f5344654f23e11eaa83563e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2g.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b572b3c213b51854f5344654f23e11eaa83563e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2g.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2g.c?ref=2b572b3c213b51854f5344654f23e11eaa83563e", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1-stats -fdump-tree-dom2-stats\" } */\n+\n+void foo();\n+void bla();\n+void bar();\n+\n+void dont_thread_1 (void)\n+{\n+  int i = 0;\n+  int first = 1;\n+\n+  do\n+    {\n+      if (first)\n+\tfoo ();\n+      else\n+\tbar ();\n+\n+      first = 0;\n+      bla ();\n+    } while (i++ < 100);\n+}\n+\n+/* { dg-final { scan-tree-dump \"Jumps threaded: 2\" \"vrp1\"} } */\n+/* { dg-final { scan-tree-dump \"Jumps threaded: 1\" \"dom2\"} } */"}, {"sha": "61705e17ea83db3a5f839a0ec7bc2e65d1952f78", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-2h.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b572b3c213b51854f5344654f23e11eaa83563e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2h.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b572b3c213b51854f5344654f23e11eaa83563e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2h.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2h.c?ref=2b572b3c213b51854f5344654f23e11eaa83563e", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1-stats -fdump-tree-dom2-stats\" } */\n+\n+void foo();\n+void bla();\n+void bar();\n+\n+/* Avoid threading in the following case, to prevent creating subloops.  */\n+\n+void dont_thread_2 (int first)\n+{\n+  int i = 0;\n+\n+  do\n+    {\n+      if (first)\n+\tfoo ();\n+      else\n+\tbar ();\n+\n+      first = 0;\n+      bla ();\n+    } while (i++ < 100);\n+}\n+\n+/* Peeling off the first iteration would make threading through\n+   the loop latch safe, but we don't do that currently.  */\n+/* { dg-final { scan-tree-dump \"Jumps threaded: 1\" \"vrp1\"} } */\n+/* { dg-final { scan-tree-dump \"Jumps threaded: 1\" \"dom2\"} } */"}, {"sha": "a7a737be0ad38b821ee71d2c23f88dbea543f523", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-7.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b572b3c213b51854f5344654f23e11eaa83563e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b572b3c213b51854f5344654f23e11eaa83563e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c?ref=2b572b3c213b51854f5344654f23e11eaa83563e", "patch": "@@ -1,8 +1,9 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1-stats -fdump-tree-dom2-stats -fdump-tree-dom3-stats\" } */\n-/* { dg-final { scan-tree-dump \"Jumps threaded: 7\"  \"vrp1\" } } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1-stats -fdump-tree-dom2-stats -fdump-tree-dom3-stats -fdump-tree-vrp2-stats\" } */\n+/* { dg-final { scan-tree-dump \"Jumps threaded: 19\"  \"vrp1\" } } */\n /* { dg-final { scan-tree-dump \"Jumps threaded: 12\" \"dom2\" } } */\n-/* { dg-final { scan-tree-dump \"Jumps threaded: 3\"  \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-not \"Jumps threaded\"  \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-not \"Jumps threaded\"  \"vrp2\" } } */\n \n enum STATE {\n   S0=0,"}, {"sha": "8923eb404d3df06b0e1c00b0d4cb945ed8dd289e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp46.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b572b3c213b51854f5344654f23e11eaa83563e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp46.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b572b3c213b51854f5344654f23e11eaa83563e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp46.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp46.c?ref=2b572b3c213b51854f5344654f23e11eaa83563e", "patch": "@@ -12,6 +12,8 @@ func_18 ( int t )\n   for (0; 1; ++l_889)\n     {\n       int t1 = 0;\n+      func_98 (0);\n+      func_98 (0);\n       if (func_81 (1))\n \t{\n \t  int rhs = l_895;"}, {"sha": "735009cb702c1fe31ad18e94ceb671e6a48c7a39", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b572b3c213b51854f5344654f23e11eaa83563e/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b572b3c213b51854f5344654f23e11eaa83563e/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=2b572b3c213b51854f5344654f23e11eaa83563e", "patch": "@@ -266,7 +266,7 @@ fsm_find_control_statement_thread_paths (tree name,\n \t  basic_block bb = (*path)[j];\n \n \t  /* Remember, blocks in the path are stored in opposite order\n-\t     in the PATH array.  The last entry in the array reprensents\n+\t     in the PATH array.  The last entry in the array represents\n \t     the block with an outgoing edge that we will redirect to the\n \t     jump threading path.  Thus we don't care about that block's\n \t     loop father, nor how many statements are in that block because\n@@ -280,33 +280,19 @@ fsm_find_control_statement_thread_paths (tree name,\n \t\t  break;\n \t\t}\n \n-\t      for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+\t      for (gsi = gsi_after_labels (bb);\n+\t\t   !gsi_end_p (gsi);\n+\t\t   gsi_next_nondebug (&gsi))\n \t\t{\n \t\t  gimple *stmt = gsi_stmt (gsi);\n \t\t  /* Do not count empty statements and labels.  */\n \t\t  if (gimple_code (stmt) != GIMPLE_NOP\n-\t\t      && gimple_code (stmt) != GIMPLE_LABEL\n \t\t      && !(gimple_code (stmt) == GIMPLE_ASSIGN\n \t\t\t   && gimple_assign_rhs_code (stmt) == ASSERT_EXPR)\n \t\t      && !is_gimple_debug (stmt))\n \t\t    ++n_insns;\n \t\t}\n \n-\t      gphi_iterator gsip;\n-\t      for (gsip = gsi_start_phis (bb);\n-\t\t   !gsi_end_p (gsip);\n-\t\t   gsi_next (&gsip))\n-\t\t{\n-\t\t  gphi *phi = gsip.phi ();\n-\t\t  tree dst = gimple_phi_result (phi);\n-\n-\t\t  /* We consider any non-virtual PHI as a statement since it\n-\t\t     count result in a constant assignment or copy\n-\t\t     operation.  */\n-\t\t  if (!virtual_operand_p (dst))\n-\t\t    ++n_insns;\n-\t\t}\n-\n \t      /* We do not look at the block with the threaded branch\n \t\t in this loop.  So if any block with a last statement that\n \t\t is a GIMPLE_SWITCH or GIMPLE_GOTO is seen, then we have a\n@@ -360,6 +346,24 @@ fsm_find_control_statement_thread_paths (tree name,\n \t      == DOMST_NONDOMINATING))\n \tcreates_irreducible_loop = true;\n \n+      /* PHIs in the final target and only the final target will need\n+\t to be duplicated.  So only count those against the number\n+\t of statements.  */\n+      gphi_iterator gsip;\n+      for (gsip = gsi_start_phis (taken_edge->dest);\n+\t   !gsi_end_p (gsip);\n+\t   gsi_next (&gsip))\n+\t{\n+\t  gphi *phi = gsip.phi ();\n+\t  tree dst = gimple_phi_result (phi);\n+\n+\t  /* We consider any non-virtual PHI as a statement since it\n+\t     count result in a constant assignment or copy\n+\t     operation.  */\n+\t  if (!virtual_operand_p (dst))\n+\t    ++n_insns;\n+\t}\n+\n       if (path_crosses_loops)\n \t{\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -379,10 +383,18 @@ fsm_find_control_statement_thread_paths (tree name,\n \t  continue;\n \t}\n \n-      /* We avoid creating irreducible loops unless we thread through\n+      /* We avoid creating irreducible inner loops unless we thread through\n \t a multiway branch, in which case we have deemed it worth losing other\n-\t loop optimizations later.  */\n-      if (!threaded_multiway_branch && creates_irreducible_loop)\n+\t loop optimizations later.\n+\n+\t We also consider it worth creating an irreducible inner loop if\n+\t the number of copied statement is low relative to the length of\n+\t the path -- in that case there's little the traditional loop optimizer\n+\t would have done anyway, so an irreducible loop is not so bad.  */\n+      if (!threaded_multiway_branch && creates_irreducible_loop\n+\t  && (n_insns * PARAM_VALUE (PARAM_FSM_SCALE_PATH_STMTS)\n+\t      > path_length * PARAM_VALUE (PARAM_FSM_SCALE_PATH_BLOCKS)))\n+\n \t{\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    fprintf (dump_file,"}]}