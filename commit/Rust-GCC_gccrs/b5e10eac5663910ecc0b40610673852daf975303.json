{"sha": "b5e10eac5663910ecc0b40610673852daf975303", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVlMTBlYWM1NjYzOTEwZWNjMGI0MDYxMDY3Mzg1MmRhZjk3NTMwMw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2012-11-19T18:43:40Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2012-11-19T18:43:40Z"}, "message": "trans-mem (collect_bb2reg): Stop scanning at irrevocable\n\n\t* trans-mem (collect_bb2reg): Stop scanning at irrevocable\n\t* blocks.\n\t(get_bb_regions_instrumented): Add new traverse_clone argument and\n\tuse it.\n\t(expand_regions_1): Same.\n\t(expand_region): Same.\n\t(execute_tm_mark): Pass new argument to expand_regions.\n\t(expand_block_edges): Pass new argument to\n\tget_bb_regions_instrumented.\ntestsuite/\n\t* g++.dg/tm/pr51516.C: Adjust for uninstrumented code path.\n\t* gcc.dg/tm/clone-1.c: New test.\n\nFrom-SVN: r193633", "tree": {"sha": "aa1ba4fc759aa5ff20f4e98faa2eddae01784b4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa1ba4fc759aa5ff20f4e98faa2eddae01784b4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5e10eac5663910ecc0b40610673852daf975303", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5e10eac5663910ecc0b40610673852daf975303", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5e10eac5663910ecc0b40610673852daf975303", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5e10eac5663910ecc0b40610673852daf975303/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a59a2c21161f5a0f9dadf1dd2dc60377de75c21e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a59a2c21161f5a0f9dadf1dd2dc60377de75c21e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a59a2c21161f5a0f9dadf1dd2dc60377de75c21e"}], "stats": {"total": 69, "additions": 53, "deletions": 16}, "files": [{"sha": "815e954356735f15dac45b6aa8068af4b7f886e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e10eac5663910ecc0b40610673852daf975303/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e10eac5663910ecc0b40610673852daf975303/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5e10eac5663910ecc0b40610673852daf975303", "patch": "@@ -1,3 +1,14 @@\n+2012-11-19  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* trans-mem (collect_bb2reg): Stop scanning at irrevocable blocks.\n+\t(get_bb_regions_instrumented): Add new traverse_clone argument and\n+\tuse it.\n+\t(expand_regions_1): Same.\n+\t(expand_region): Same.\n+\t(execute_tm_mark): Pass new argument to expand_regions.\n+\t(expand_block_edges): Pass new argument to\n+\tget_bb_regions_instrumented.\n+\n 2012-11-19  Sofiane Naci  <sofiane.naci@arm.com>\n \n \t* config/aarch64/aarch64.c"}, {"sha": "f706c43ae6811ede808a57bdef418a7ba2b9364e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e10eac5663910ecc0b40610673852daf975303/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e10eac5663910ecc0b40610673852daf975303/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b5e10eac5663910ecc0b40610673852daf975303", "patch": "@@ -1,3 +1,8 @@\n+2012-11-19  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* g++.dg/tm/pr51516.C: Adjust for uninstrumented code path.\n+\t* gcc.dg/tm/clone-1.c: New test.\n+\n 2012-11-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/55368"}, {"sha": "4e9100651f76ea4b9987996aceeac79f271e3888", "filename": "gcc/testsuite/g++.dg/tm/pr51516.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e10eac5663910ecc0b40610673852daf975303/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fpr51516.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e10eac5663910ecc0b40610673852daf975303/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fpr51516.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fpr51516.C?ref=b5e10eac5663910ecc0b40610673852daf975303", "patch": "@@ -18,5 +18,4 @@ int main()\n }\n \n /* { dg-final { scan-assembler-not \"_ITM_getTMCloneOrIrrevocable\" } } */\n-/* { dg-final { scan-tree-dump-times \";; Function C::C\" 1 \"optimized\" } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "4050adddc5526f50d5c9c913c9090d760022c334", "filename": "gcc/testsuite/gcc.dg/tm/clone-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e10eac5663910ecc0b40610673852daf975303/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fclone-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e10eac5663910ecc0b40610673852daf975303/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fclone-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fclone-1.c?ref=b5e10eac5663910ecc0b40610673852daf975303", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fgnu-tm -fdump-tree-tmmark\" } */\n+\n+int foo;\n+\n+__attribute__((transaction_callable))\n+void cloneme()\n+{\n+  foo = 666;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"ITM_WU.*foo\" 1 \"tmmark\" } } */\n+/* { dg-final { cleanup-tree-dump \"tmmark\" } } */"}, {"sha": "15c02bdc48a394e046de8ac39ab0a4802a718c79", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e10eac5663910ecc0b40610673852daf975303/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e10eac5663910ecc0b40610673852daf975303/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=b5e10eac5663910ecc0b40610673852daf975303", "patch": "@@ -138,7 +138,7 @@\n \n static void *expand_regions (struct tm_region *,\n \t\t\t     void *(*callback)(struct tm_region *, void *),\n-\t\t\t     void *);\n+\t\t\t     void *, bool);\n \n \f\n /* Return the attributes we want to examine for X, or NULL if it's not\n@@ -2455,7 +2455,7 @@ collect_bb2reg (struct tm_region *region, void *data)\n \t\t\t\tregion->exit_blocks,\n \t\t\t\tregion->irr_blocks,\n \t\t\t\tNULL,\n-\t\t\t\t/*stop_at_irr_p=*/false);\n+\t\t\t\t/*stop_at_irr_p=*/true);\n \n   // We expect expand_region to perform a post-order traversal of the region\n   // tree.  Therefore the last region seen for any bb is the innermost.\n@@ -2489,14 +2489,14 @@ collect_bb2reg (struct tm_region *region, void *data)\n // only known instance of this block sharing.\n \n static vec<tm_region_p>\n-get_bb_regions_instrumented (void)\n+get_bb_regions_instrumented (bool traverse_clones)\n {\n   unsigned n = last_basic_block;\n   vec<tm_region_p> ret;\n \n   ret.create (n);\n   ret.safe_grow_cleared (n);\n-  expand_regions (all_tm_regions, collect_bb2reg, &ret);\n+  expand_regions (all_tm_regions, collect_bb2reg, &ret, traverse_clones);\n \n   return ret;\n }\n@@ -2824,11 +2824,13 @@ execute_tm_mark (void)\n {\n   pending_edge_inserts_p = false;\n \n-  expand_regions (all_tm_regions, generate_tm_state, NULL);\n+  expand_regions (all_tm_regions, generate_tm_state, NULL,\n+\t\t  /*traverse_clones=*/true);\n \n   tm_log_init ();\n \n-  vec<tm_region_p> bb_regions = get_bb_regions_instrumented ();\n+  vec<tm_region_p> bb_regions\n+    = get_bb_regions_instrumented (/*traverse_clones=*/true);\n   struct tm_region *r;\n   unsigned i;\n \n@@ -2842,7 +2844,8 @@ execute_tm_mark (void)\n   propagate_tm_flags_out (all_tm_regions);\n \n   // Expand GIMPLE_TRANSACTIONs into calls into the runtime.\n-  expand_regions (all_tm_regions, expand_transaction, NULL);\n+  expand_regions (all_tm_regions, expand_transaction, NULL,\n+\t\t  /*traverse_clones=*/false);\n \n   tm_log_emit ();\n   tm_log_delete ();\n@@ -2998,7 +3001,8 @@ expand_block_edges (struct tm_region *const region, basic_block bb)\n static unsigned int\n execute_tm_edges (void)\n {\n-  vec<tm_region_p> bb_regions = get_bb_regions_instrumented ();\n+  vec<tm_region_p> bb_regions\n+    = get_bb_regions_instrumented (/*traverse_clones=*/false);\n   struct tm_region *r;\n   unsigned i;\n \n@@ -3042,23 +3046,26 @@ struct gimple_opt_pass pass_tm_edges =\n /* Helper function for expand_regions.  Expand REGION and recurse to\n    the inner region.  Call CALLBACK on each region.  CALLBACK returns\n    NULL to continue the traversal, otherwise a non-null value which\n-   this function will return as well.  */\n+   this function will return as well.  TRAVERSE_CLONES is true if we\n+   should traverse transactional clones.  */\n \n static void *\n expand_regions_1 (struct tm_region *region,\n \t\t  void *(*callback)(struct tm_region *, void *),\n-\t\t  void *data)\n+\t\t  void *data,\n+\t\t  bool traverse_clones)\n {\n   void *retval = NULL;\n-  if (region->exit_blocks)\n+  if (region->exit_blocks\n+      || (traverse_clones && decl_is_tm_clone (current_function_decl)))\n     {\n       retval = callback (region, data);\n       if (retval)\n \treturn retval;\n     }\n   if (region->inner)\n     {\n-      retval = expand_regions (region->inner, callback, data);\n+      retval = expand_regions (region->inner, callback, data, traverse_clones);\n       if (retval)\n \treturn retval;\n     }\n@@ -3068,17 +3075,19 @@ expand_regions_1 (struct tm_region *region,\n /* Traverse the regions enclosed and including REGION.  Execute\n    CALLBACK for each region, passing DATA.  CALLBACK returns NULL to\n    continue the traversal, otherwise a non-null value which this\n-   function will return as well.  */\n+   function will return as well.  TRAVERSE_CLONES is true if we should\n+   traverse transactional clones.  */\n \n static void *\n expand_regions (struct tm_region *region,\n \t\tvoid *(*callback)(struct tm_region *, void *),\n-\t\tvoid *data)\n+\t\tvoid *data,\n+\t\tbool traverse_clones)\n {\n   void *retval = NULL;\n   while (region)\n     {\n-      retval = expand_regions_1 (region, callback, data);\n+      retval = expand_regions_1 (region, callback, data, traverse_clones);\n       if (retval)\n \treturn retval;\n       region = region->next;"}]}