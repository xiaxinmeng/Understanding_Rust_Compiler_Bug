{"sha": "a277ca89ac37a0da1f8e6a92fc3b591e2385dd77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI3N2NhODlhYzM3YTBkYTFmOGU2YTkyZmMzYjU5MWUyMzg1ZGQ3Nw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2018-11-13T13:01:36Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2018-11-13T13:01:36Z"}, "message": "[RS6000] Don't put large integer constants in TOC for -mcmodel=medium\n\nFor -mcmodel=medium we can use toc-relative addressing to access\nconstants placed in read-only data, which is better since they can be\nmerged when in .rodata.cst8.\n\n\t* config/rs6000/linux64.h (ASM_OUTPUT_SPECIAL_POOL_ENTRY_P): Exclude\n\tinteger constants when -mcmodel=medium.\n\nFrom-SVN: r266069", "tree": {"sha": "2a532104736c20106cbc302ff7b506dbedb654b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a532104736c20106cbc302ff7b506dbedb654b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a277ca89ac37a0da1f8e6a92fc3b591e2385dd77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a277ca89ac37a0da1f8e6a92fc3b591e2385dd77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a277ca89ac37a0da1f8e6a92fc3b591e2385dd77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a277ca89ac37a0da1f8e6a92fc3b591e2385dd77/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9de6af4572105dbe63074d09b8c322464daec2e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9de6af4572105dbe63074d09b8c322464daec2e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9de6af4572105dbe63074d09b8c322464daec2e7"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "369ef54fb0d74bff1ce41c7c23f7c719f6e65f39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277ca89ac37a0da1f8e6a92fc3b591e2385dd77/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277ca89ac37a0da1f8e6a92fc3b591e2385dd77/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a277ca89ac37a0da1f8e6a92fc3b591e2385dd77", "patch": "@@ -1,3 +1,8 @@\n+2018-11-13  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/linux64.h (ASM_OUTPUT_SPECIAL_POOL_ENTRY_P): Exclude\n+\tinteger constants when -mcmodel=medium.\n+\n 2018-11-13  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.h (FUNCTION_PROFILER): Redefine to empty."}, {"sha": "0d8e164a598a12cbf4202d3d0e90fec4ba46d6a8", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277ca89ac37a0da1f8e6a92fc3b591e2385dd77/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277ca89ac37a0da1f8e6a92fc3b591e2385dd77/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=a277ca89ac37a0da1f8e6a92fc3b591e2385dd77", "patch": "@@ -582,8 +582,10 @@ extern int dot_symbols;\n    we also do this for floating-point constants.  We actually can only\n    do this if the FP formats of the target and host machines are the\n    same, but we can't check that since not every file that uses\n-   the macros includes real.h.  We also do this when we can write the\n-   entry into the TOC and the entry is not larger than a TOC entry.  */\n+   the macros includes real.h.  We also do this when we can write an\n+   integer into the TOC and the entry is not larger than a TOC entry,\n+   but not for -mcmodel=medium where we'll use a toc-relative load for\n+   constants outside the TOC.  */\n \n #undef  ASM_OUTPUT_SPECIAL_POOL_ENTRY_P\n #define ASM_OUTPUT_SPECIAL_POOL_ENTRY_P(X, MODE)\t\t\t\\\n@@ -593,6 +595,7 @@ extern int dot_symbols;\n \t   && GET_CODE (XEXP (XEXP (X, 0), 0)) == SYMBOL_REF)\t\t\\\n        || GET_CODE (X) == LABEL_REF\t\t\t\t\t\\\n        || (GET_CODE (X) == CONST_INT \t\t\t\t\t\\\n+\t   && TARGET_CMODEL != CMODEL_MEDIUM\t\t\t\t\\\n \t   && GET_MODE_BITSIZE (MODE) <= GET_MODE_BITSIZE (Pmode))\t\\\n        || (GET_CODE (X) == CONST_DOUBLE\t\t\t\t\t\\\n \t   && ((TARGET_64BIT\t\t\t\t\t\t\\"}]}