{"sha": "34a594e85618002815e2faf3b515ba1d7446a55b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRhNTk0ZTg1NjE4MDAyODE1ZTJmYWYzYjUxNWJhMWQ3NDQ2YTU1Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-09-23T18:08:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-09-23T18:08:43Z"}, "message": "hooks.c (hook_bool_bool_false, [...]): For arguments with ATTRIBUTE_UNUSED...\n\n\t* hooks.c (hook_bool_bool_false, hook_bool_bool_gcc_optionsp_false,\n\thook_bool_mode_false, hook_bool_mode_true,\n\thook_bool_mode_const_rtx_false, hook_bool_mode_const_rtx_true,\n\thook_bool_mode_rtx_false, hook_bool_mode_rtx_true,\n\thook_bool_const_rtx_insn_const_rtx_insn_true,\n\thook_bool_mode_uhwi_false, hook_void_FILEptr_constcharptr,\n\thook_bool_FILEptr_rtx_false, hook_bool_gsiptr_false,\n\thook_bool_const_tree_hwi_hwi_const_tree_false,\n\thook_bool_const_tree_hwi_hwi_const_tree_true,\n\tdefault_can_output_mi_thunk_no_vcall, hook_int_uint_mode_1,\n\thook_int_const_tree_0, hook_int_const_tree_const_tree_1,\n\thook_int_rtx_0, hook_int_rtx_bool_0, hook_void_tree,\n\thook_void_constcharptr, hook_void_tree_treeptr, hook_void_int_int,\n\thook_bool_tree_false, hook_bool_const_tree_false, hook_bool_tree_true,\n\thook_bool_const_tree_true, hook_bool_tree_tree_false,\n\thook_bool_tree_tree_true, hook_bool_tree_bool_false,\n\thook_bool_rtx_insn_true, hook_bool_rtx_false,\n\thook_bool_uintp_uintp_false,\n\thook_bool_rtx_mode_int_int_intp_bool_false, hook_rtx_rtx_null,\n\thook_rtx_tree_int_null, hook_uint_mode_0,\n\thook_constcharptr_const_tree_null, hook_tree_tree_int_treep_bool_null,\n\thook_tree_tree_tree_null, hook_tree_tree_tree_tree_null,\n\thook_constcharptr_const_rtx_insn_null,\n\thook_constcharptr_const_tree_const_tree_null,\n\thook_constcharptr_int_const_tree_null,\n\thook_constcharptr_int_const_tree_const_tree_null,\n\thook_tree_const_tree_null, hook_bool_rtx_insn_int_false,\n\thook_void_rtx_insn_int, hook_void_gcc_optionsp): For arguments with\n\tATTRIBUTE_UNUSED, remove parameter name as well as ATTRIBUTE_UNUSED.\n\nFrom-SVN: r240452", "tree": {"sha": "687a8aa50bbc9631c0d8fed9078f094f2473d279", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/687a8aa50bbc9631c0d8fed9078f094f2473d279"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34a594e85618002815e2faf3b515ba1d7446a55b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a594e85618002815e2faf3b515ba1d7446a55b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34a594e85618002815e2faf3b515ba1d7446a55b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a594e85618002815e2faf3b515ba1d7446a55b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fdbda43d03daa9e91ce1f88540c163fee8c0eab4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdbda43d03daa9e91ce1f88540c163fee8c0eab4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdbda43d03daa9e91ce1f88540c163fee8c0eab4"}], "stats": {"total": 175, "additions": 87, "deletions": 88}, "files": [{"sha": "316bfaf621bedc57ea369837c850b866e9197b74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a594e85618002815e2faf3b515ba1d7446a55b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a594e85618002815e2faf3b515ba1d7446a55b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34a594e85618002815e2faf3b515ba1d7446a55b", "patch": "@@ -1,5 +1,35 @@\n 2016-09-23  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* hooks.c (hook_bool_bool_false, hook_bool_bool_gcc_optionsp_false,\n+\thook_bool_mode_false, hook_bool_mode_true,\n+\thook_bool_mode_const_rtx_false, hook_bool_mode_const_rtx_true,\n+\thook_bool_mode_rtx_false, hook_bool_mode_rtx_true,\n+\thook_bool_const_rtx_insn_const_rtx_insn_true,\n+\thook_bool_mode_uhwi_false, hook_void_FILEptr_constcharptr,\n+\thook_bool_FILEptr_rtx_false, hook_bool_gsiptr_false,\n+\thook_bool_const_tree_hwi_hwi_const_tree_false,\n+\thook_bool_const_tree_hwi_hwi_const_tree_true,\n+\tdefault_can_output_mi_thunk_no_vcall, hook_int_uint_mode_1,\n+\thook_int_const_tree_0, hook_int_const_tree_const_tree_1,\n+\thook_int_rtx_0, hook_int_rtx_bool_0, hook_void_tree,\n+\thook_void_constcharptr, hook_void_tree_treeptr, hook_void_int_int,\n+\thook_bool_tree_false, hook_bool_const_tree_false, hook_bool_tree_true,\n+\thook_bool_const_tree_true, hook_bool_tree_tree_false,\n+\thook_bool_tree_tree_true, hook_bool_tree_bool_false,\n+\thook_bool_rtx_insn_true, hook_bool_rtx_false,\n+\thook_bool_uintp_uintp_false,\n+\thook_bool_rtx_mode_int_int_intp_bool_false, hook_rtx_rtx_null,\n+\thook_rtx_tree_int_null, hook_uint_mode_0,\n+\thook_constcharptr_const_tree_null, hook_tree_tree_int_treep_bool_null,\n+\thook_tree_tree_tree_null, hook_tree_tree_tree_tree_null,\n+\thook_constcharptr_const_rtx_insn_null,\n+\thook_constcharptr_const_tree_const_tree_null,\n+\thook_constcharptr_int_const_tree_null,\n+\thook_constcharptr_int_const_tree_const_tree_null,\n+\thook_tree_const_tree_null, hook_bool_rtx_insn_int_false,\n+\thook_void_rtx_insn_int, hook_void_gcc_optionsp): For arguments with\n+\tATTRIBUTE_UNUSED, remove parameter name as well as ATTRIBUTE_UNUSED.\n+\n \t* vec.h (vNULL): Extend comment to say = vNULL initialization\n \tisn't needed for static vars.\n "}, {"sha": "917bb6eda6b7fdb6d1ea5ba62785d93f071629b9", "filename": "gcc/hooks.c", "status": "modified", "additions": 57, "deletions": 88, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a594e85618002815e2faf3b515ba1d7446a55b/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a594e85618002815e2faf3b515ba1d7446a55b/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=34a594e85618002815e2faf3b515ba1d7446a55b", "patch": "@@ -50,92 +50,85 @@ hook_bool_void_true (void)\n \n /* Generic hook that takes (bool) and returns false.  */\n bool\n-hook_bool_bool_false (bool a ATTRIBUTE_UNUSED)\n+hook_bool_bool_false (bool)\n {\n   return false;\n }\n \n /* Generic hook that takes (bool, struct gcc_options *) and returns false.  */\n bool\n-hook_bool_bool_gcc_optionsp_false (bool a ATTRIBUTE_UNUSED,\n-\t\t\t\t   struct gcc_options *opts ATTRIBUTE_UNUSED)\n+hook_bool_bool_gcc_optionsp_false (bool, struct gcc_options *)\n {\n   return false;\n }\n \n /* Generic hook that takes const int, const int) and returns true.  */\n-bool hook_bool_const_int_const_int_true (const int a ATTRIBUTE_UNUSED,\n-                                         const int b ATTRIBUTE_UNUSED)\n+bool hook_bool_const_int_const_int_true (const int, const int)\n {\n   return true;\n }\n \n /* Generic hook that takes (machine_mode) and returns false.  */\n bool\n-hook_bool_mode_false (machine_mode mode ATTRIBUTE_UNUSED)\n+hook_bool_mode_false (machine_mode)\n {\n   return false;\n }\n \n /* Generic hook that takes (machine_mode) and returns true.  */\n bool\n-hook_bool_mode_true (machine_mode mode ATTRIBUTE_UNUSED)\n+hook_bool_mode_true (machine_mode)\n {\n   return true;\n }\n \n /* Generic hook that takes (machine_mode, const_rtx) and returns false.  */\n bool\n-hook_bool_mode_const_rtx_false (machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\t\tconst_rtx value ATTRIBUTE_UNUSED)\n+hook_bool_mode_const_rtx_false (machine_mode, const_rtx)\n {\n   return false;\n }\n \n /* Generic hook that takes (machine_mode, const_rtx) and returns true.  */\n bool\n-hook_bool_mode_const_rtx_true (machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\t       const_rtx value ATTRIBUTE_UNUSED)\n+hook_bool_mode_const_rtx_true (machine_mode, const_rtx)\n {\n   return true;\n }\n \n /* Generic hook that takes (machine_mode, rtx) and returns false.  */\n bool\n-hook_bool_mode_rtx_false (machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\t  rtx value ATTRIBUTE_UNUSED)\n+hook_bool_mode_rtx_false (machine_mode, rtx)\n {\n   return false;\n }\n \n /* Generic hook that takes (machine_mode, rtx) and returns true.  */\n bool\n-hook_bool_mode_rtx_true (machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\t rtx value ATTRIBUTE_UNUSED)\n+hook_bool_mode_rtx_true (machine_mode, rtx)\n {\n   return true;\n }\n \n /* Generic hook that takes (const rtx_insn *, const rtx_insn *) and returns true.  */\n bool\n-hook_bool_const_rtx_insn_const_rtx_insn_true (const rtx_insn *follower ATTRIBUTE_UNUSED,\n-\t\t\t\t\t      const rtx_insn *followee ATTRIBUTE_UNUSED)\n+hook_bool_const_rtx_insn_const_rtx_insn_true (const rtx_insn *,\n+\t\t\t\t\t      const rtx_insn *)\n {\n   return true;\n }\n \n /* Generic hook that takes (machine_mode, unsigned HOST_WIDE_INT)\n    and returns false.  */\n bool\n-hook_bool_mode_uhwi_false (machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\t   unsigned HOST_WIDE_INT value ATTRIBUTE_UNUSED)\n+hook_bool_mode_uhwi_false (machine_mode, unsigned HOST_WIDE_INT)\n {\n   return false;\n }\n \n /* Generic hook that takes (FILE *, const char *) and does nothing.  */\n void\n-hook_void_FILEptr_constcharptr (FILE *a ATTRIBUTE_UNUSED, const char *b ATTRIBUTE_UNUSED)\n+hook_void_FILEptr_constcharptr (FILE *, const char *)\n {\n }\n \n@@ -148,70 +141,62 @@ hook_void_FILEptr_constcharptr_const_tree (FILE *, const char *, const_tree)\n \n /* Generic hook that takes (FILE *, rtx) and returns false.  */\n bool\n-hook_bool_FILEptr_rtx_false (FILE *a ATTRIBUTE_UNUSED,\n-\t\t\t     rtx b ATTRIBUTE_UNUSED)\n+hook_bool_FILEptr_rtx_false (FILE *, rtx)\n {\n   return false;\n }\n \n /* Generic hook that takes (gimple_stmt_iterator *) and returns\n    false.  */\n bool\n-hook_bool_gsiptr_false (gimple_stmt_iterator *a ATTRIBUTE_UNUSED)\n+hook_bool_gsiptr_false (gimple_stmt_iterator *)\n {\n   return false;\n }\n \n /* Used for the TARGET_ASM_CAN_OUTPUT_MI_THUNK hook.  */\n bool\n-hook_bool_const_tree_hwi_hwi_const_tree_false (const_tree a ATTRIBUTE_UNUSED,\n-\t\t\t\t\t       HOST_WIDE_INT b ATTRIBUTE_UNUSED,\n-\t\t\t\t\t       HOST_WIDE_INT c ATTRIBUTE_UNUSED,\n-\t\t\t\t\t       const_tree d ATTRIBUTE_UNUSED)\n+hook_bool_const_tree_hwi_hwi_const_tree_false (const_tree, HOST_WIDE_INT,\n+\t\t\t\t\t       HOST_WIDE_INT, const_tree)\n {\n   return false;\n }\n \n bool\n-hook_bool_const_tree_hwi_hwi_const_tree_true (const_tree a ATTRIBUTE_UNUSED,\n-\t\t\t\t\t      HOST_WIDE_INT b ATTRIBUTE_UNUSED,\n-\t\t\t\t\t      HOST_WIDE_INT c ATTRIBUTE_UNUSED,\n-\t\t\t\t\t      const_tree d ATTRIBUTE_UNUSED)\n+hook_bool_const_tree_hwi_hwi_const_tree_true (const_tree, HOST_WIDE_INT,\n+\t\t\t\t\t      HOST_WIDE_INT, const_tree)\n {\n   return true;\n }\n \n bool\n-default_can_output_mi_thunk_no_vcall (const_tree a ATTRIBUTE_UNUSED,\n-\t\t\t\t      HOST_WIDE_INT b ATTRIBUTE_UNUSED,\n-\t\t\t\t      HOST_WIDE_INT c,\n-\t\t\t\t      const_tree d ATTRIBUTE_UNUSED)\n+default_can_output_mi_thunk_no_vcall (const_tree, HOST_WIDE_INT,\n+\t\t\t\t      HOST_WIDE_INT c, const_tree)\n {\n   return c == 0;\n }\n \n int\n-hook_int_uint_mode_1 (unsigned int a ATTRIBUTE_UNUSED,\n-\t\t      machine_mode b ATTRIBUTE_UNUSED)\n+hook_int_uint_mode_1 (unsigned int, machine_mode)\n {\n   return 1;\n }\n \n int\n-hook_int_const_tree_0 (const_tree a ATTRIBUTE_UNUSED)\n+hook_int_const_tree_0 (const_tree)\n {\n   return 0;\n }\n \n /* ??? Used for comp_type_attributes, which ought to return bool.  */\n int\n-hook_int_const_tree_const_tree_1 (const_tree a ATTRIBUTE_UNUSED, const_tree b ATTRIBUTE_UNUSED)\n+hook_int_const_tree_const_tree_1 (const_tree, const_tree)\n {\n   return 1;\n }\n \n int\n-hook_int_rtx_0 (rtx a ATTRIBUTE_UNUSED)\n+hook_int_rtx_0 (rtx)\n {\n   return 0;\n }\n@@ -229,7 +214,7 @@ hook_int_rtx_insn_unreachable (rtx_insn *)\n }\n \n int\n-hook_int_rtx_bool_0 (rtx a ATTRIBUTE_UNUSED, bool b ATTRIBUTE_UNUSED)\n+hook_int_rtx_bool_0 (rtx, bool)\n {\n   return 0;\n }\n@@ -247,7 +232,7 @@ hook_uint_void_0 (void)\n }\n \n void\n-hook_void_tree (tree a ATTRIBUTE_UNUSED)\n+hook_void_tree (tree)\n {\n }\n \n@@ -257,88 +242,83 @@ hook_void_rtx_tree (rtx, tree)\n }\n \n void\n-hook_void_constcharptr (const char *a ATTRIBUTE_UNUSED)\n+hook_void_constcharptr (const char *)\n {\n }\n \n void\n-hook_void_tree_treeptr (tree a ATTRIBUTE_UNUSED, tree *b ATTRIBUTE_UNUSED)\n+hook_void_tree_treeptr (tree, tree *)\n {\n }\n \n void\n-hook_void_int_int (int a ATTRIBUTE_UNUSED, int b ATTRIBUTE_UNUSED)\n+hook_void_int_int (int, int)\n {\n }\n \n bool\n-hook_bool_tree_false (tree a ATTRIBUTE_UNUSED)\n+hook_bool_tree_false (tree)\n {\n   return false;\n }\n \n bool\n-hook_bool_const_tree_false (const_tree a ATTRIBUTE_UNUSED)\n+hook_bool_const_tree_false (const_tree)\n {\n   return false;\n }\n \n bool\n-hook_bool_tree_true (tree a ATTRIBUTE_UNUSED)\n+hook_bool_tree_true (tree)\n {\n   return true;\n }\n \n bool\n-hook_bool_const_tree_true (const_tree a ATTRIBUTE_UNUSED)\n+hook_bool_const_tree_true (const_tree)\n {\n   return true;\n }\n \n bool\n-hook_bool_tree_tree_false (tree a ATTRIBUTE_UNUSED, tree b ATTRIBUTE_UNUSED)\n+hook_bool_tree_tree_false (tree, tree)\n {\n   return false;\n }\n \n bool\n-hook_bool_tree_tree_true (tree a ATTRIBUTE_UNUSED, tree b ATTRIBUTE_UNUSED)\n+hook_bool_tree_tree_true (tree, tree)\n {\n   return true;\n }\n \n bool\n-hook_bool_tree_bool_false (tree a ATTRIBUTE_UNUSED, bool b ATTRIBUTE_UNUSED)\n+hook_bool_tree_bool_false (tree, bool)\n {\n   return false;\n }\n \n bool\n-hook_bool_rtx_insn_true (rtx_insn *insn ATTRIBUTE_UNUSED)\n+hook_bool_rtx_insn_true (rtx_insn *)\n {\n   return true;\n }\n \n bool\n-hook_bool_rtx_false (rtx a ATTRIBUTE_UNUSED)\n+hook_bool_rtx_false (rtx)\n {\n   return false;\n }\n \n bool\n-hook_bool_uintp_uintp_false (unsigned int *a ATTRIBUTE_UNUSED,\n-\t\t\t     unsigned int *b ATTRIBUTE_UNUSED)\n+hook_bool_uintp_uintp_false (unsigned int *, unsigned int *)\n {\n   return false;\n }\n \n bool\n-hook_bool_rtx_mode_int_int_intp_bool_false (rtx a ATTRIBUTE_UNUSED,\n-\t\t\t\t\t    machine_mode b ATTRIBUTE_UNUSED,\n-\t\t\t\t\t    int c ATTRIBUTE_UNUSED,\n-\t\t\t\t\t    int d ATTRIBUTE_UNUSED,\n-\t\t\t\t\t    int *e ATTRIBUTE_UNUSED,\n-\t\t\t\t\t    bool speed_p ATTRIBUTE_UNUSED)\n+hook_bool_rtx_mode_int_int_intp_bool_false (rtx, machine_mode, int, int,\n+\t\t\t\t\t    int *, bool)\n {\n   return false;\n }\n@@ -359,21 +339,21 @@ hook_rtx_rtx_identity (rtx x)\n \n /* Generic hook that takes an rtx and returns NULL_RTX.  */\n rtx\n-hook_rtx_rtx_null (rtx x ATTRIBUTE_UNUSED)\n+hook_rtx_rtx_null (rtx)\n {\n   return NULL;\n }\n \n /* Generic hook that takes a tree and an int and returns NULL_RTX.  */\n rtx\n-hook_rtx_tree_int_null (tree a ATTRIBUTE_UNUSED, int b ATTRIBUTE_UNUSED)\n+hook_rtx_tree_int_null (tree, int)\n {\n   return NULL;\n }\n \n /* Generic hook that takes a machine mode and returns an unsigned int 0.  */\n unsigned int\n-hook_uint_mode_0 (machine_mode m ATTRIBUTE_UNUSED)\n+hook_uint_mode_0 (machine_mode)\n {\n   return 0;\n }\n@@ -394,91 +374,80 @@ hook_charptr_void_null (void)\n \n /* Generic hook that takes a tree and returns a NULL string.  */\n const char *\n-hook_constcharptr_const_tree_null (const_tree t ATTRIBUTE_UNUSED)\n+hook_constcharptr_const_tree_null (const_tree)\n {\n   return NULL;\n }\n \n tree\n-hook_tree_tree_int_treep_bool_null (tree t0 ATTRIBUTE_UNUSED,\n-\t\t\t\t    int i ATTRIBUTE_UNUSED,\n-\t\t\t\t    tree *p ATTRIBUTE_UNUSED,\n-\t\t\t\t    bool ignore ATTRIBUTE_UNUSED)\n+hook_tree_tree_int_treep_bool_null (tree, int, tree *, bool)\n {\n   return NULL;\n }\n \n tree\n-hook_tree_tree_tree_null (tree t0 ATTRIBUTE_UNUSED, tree t1 ATTRIBUTE_UNUSED)\n+hook_tree_tree_tree_null (tree, tree)\n {\n   return NULL;\n }\n \n tree\n-hook_tree_tree_tree_tree_null (tree t0 ATTRIBUTE_UNUSED,\n-\t\t\t       tree t1 ATTRIBUTE_UNUSED,\n-\t\t\t       tree t2 ATTRIBUTE_UNUSED)\n+hook_tree_tree_tree_tree_null (tree, tree, tree)\n {\n   return NULL;\n }\n \n /* Generic hook that takes an rtx_insn *and returns a NULL string.  */\n const char *\n-hook_constcharptr_const_rtx_insn_null (const rtx_insn *insn ATTRIBUTE_UNUSED)\n+hook_constcharptr_const_rtx_insn_null (const rtx_insn *)\n {\n   return NULL;\n }\n \n const char *\n-hook_constcharptr_const_tree_const_tree_null (const_tree t0 ATTRIBUTE_UNUSED,\n-\t\t\t\t\t      const_tree t1 ATTRIBUTE_UNUSED)\n+hook_constcharptr_const_tree_const_tree_null (const_tree, const_tree)\n {\n   return NULL;\n }\n \n const char *\n-hook_constcharptr_int_const_tree_null (int i ATTRIBUTE_UNUSED,\n-\t\t\t\t       const_tree t0 ATTRIBUTE_UNUSED)\n+hook_constcharptr_int_const_tree_null (int, const_tree)\n {\n   return NULL;\n }\n \n const char *\n-hook_constcharptr_int_const_tree_const_tree_null (int i ATTRIBUTE_UNUSED,\n-\t\t\t\t\t\t  const_tree t0 ATTRIBUTE_UNUSED,\n-\t\t\t\t\t\t  const_tree t1 ATTRIBUTE_UNUSED)\n+hook_constcharptr_int_const_tree_const_tree_null (int, const_tree, const_tree)\n {\n   return NULL;\n }\n \n /* Generic hook that takes a const_tree and returns NULL_TREE.  */\n tree\n-hook_tree_const_tree_null (const_tree t ATTRIBUTE_UNUSED)\n+hook_tree_const_tree_null (const_tree)\n {\n   return NULL;\n }\n \n /* Generic hook that takes a rtx_insn * and an int and returns a bool.  */\n \n bool\n-hook_bool_rtx_insn_int_false (rtx_insn *insn ATTRIBUTE_UNUSED,\n-\t\t\t      int mode ATTRIBUTE_UNUSED)\n+hook_bool_rtx_insn_int_false (rtx_insn *, int)\n {\n   return false;\n }\n \n /* Generic hook that takes a rtx_insn * and an int and returns void.  */\n \n void\n-hook_void_rtx_insn_int (rtx_insn *insn ATTRIBUTE_UNUSED,\n-\t\t\tint mode ATTRIBUTE_UNUSED)\n+hook_void_rtx_insn_int (rtx_insn *, int)\n {\n }\n \n /* Generic hook that takes a struct gcc_options * and returns void.  */\n \n void\n-hook_void_gcc_optionsp (struct gcc_options *opts ATTRIBUTE_UNUSED)\n+hook_void_gcc_optionsp (struct gcc_options *)\n {\n }\n "}]}