{"sha": "77095a6ab13996a38b0a360d8ef9fc6cc6bc5234", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzcwOTVhNmFiMTM5OTZhMzhiMGEzNjBkOGVmOWZjNmNjNmJjNTIzNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-02-03T22:42:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-02-03T22:42:37Z"}, "message": "PR c++/78689 - ICE on constructor with label\n\ngcc/\n\t* tree-inline.c (copy_tree_body_r) [COND_EXPR]: Revert change to\n\tavoid copying non-taken branch.\ngcc/cp/\n\t* optimize.c (maybe_clone_body): Replace omitted parameters with\n\tnull lvalues.\n\t* class.c (build_clone): Fix logic for omitting inherited parms.\n\nFrom-SVN: r245172", "tree": {"sha": "3d5b23c76bf199ee7e8f14bc642997ba0d96ab88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d5b23c76bf199ee7e8f14bc642997ba0d96ab88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77095a6ab13996a38b0a360d8ef9fc6cc6bc5234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77095a6ab13996a38b0a360d8ef9fc6cc6bc5234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77095a6ab13996a38b0a360d8ef9fc6cc6bc5234", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77095a6ab13996a38b0a360d8ef9fc6cc6bc5234/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ac6dbb1a4042eaa719afbb9c7a02e4f409b8aa75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac6dbb1a4042eaa719afbb9c7a02e4f409b8aa75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac6dbb1a4042eaa719afbb9c7a02e4f409b8aa75"}], "stats": {"total": 79, "additions": 44, "deletions": 35}, "files": [{"sha": "044f720e9908ea89eaeb5caa2c9a7eab11da77a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77095a6ab13996a38b0a360d8ef9fc6cc6bc5234/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77095a6ab13996a38b0a360d8ef9fc6cc6bc5234/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77095a6ab13996a38b0a360d8ef9fc6cc6bc5234", "patch": "@@ -1,3 +1,9 @@\n+2017-02-03  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/78689\n+\t* tree-inline.c (copy_tree_body_r) [COND_EXPR]: Revert change to\n+\tavoid copying non-taken branch.\n+\n 2017-02-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/79340"}, {"sha": "d032028d17cd632df8688be64b2ac241a360ba8d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77095a6ab13996a38b0a360d8ef9fc6cc6bc5234/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77095a6ab13996a38b0a360d8ef9fc6cc6bc5234/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=77095a6ab13996a38b0a360d8ef9fc6cc6bc5234", "patch": "@@ -1,5 +1,10 @@\n 2017-02-03  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/78689 - ICE on constructor with label\n+\t* optimize.c (maybe_clone_body): Replace omitted parameters with\n+\tnull lvalues.\n+\t* class.c (build_clone): Fix logic for omitting inherited parms.\n+\n \tPR c++/12245 - excessive memory use\n \t* constexpr.c (maybe_constant_value): Fold maybe_constant_value_1\n \tback in.  Don't cache constants."}, {"sha": "7ec07c9c7532508dcada03cb44fc48c4ac2adf6a", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77095a6ab13996a38b0a360d8ef9fc6cc6bc5234/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77095a6ab13996a38b0a360d8ef9fc6cc6bc5234/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=77095a6ab13996a38b0a360d8ef9fc6cc6bc5234", "patch": "@@ -4818,7 +4818,7 @@ build_clone (tree fn, tree name)\n \n   /* A base constructor inheriting from a virtual base doesn't get the\n      arguments.  */\n-  if (ctor_omit_inherited_parms (fn))\n+  if (ctor_omit_inherited_parms (clone))\n     DECL_CHAIN (DECL_CHAIN (DECL_ARGUMENTS (clone))) = NULL_TREE;\n \n   for (parms = DECL_ARGUMENTS (clone); parms; parms = DECL_CHAIN (parms))"}, {"sha": "933612ced762acb4f0e78e34591923d3db8afe31", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77095a6ab13996a38b0a360d8ef9fc6cc6bc5234/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77095a6ab13996a38b0a360d8ef9fc6cc6bc5234/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=77095a6ab13996a38b0a360d8ef9fc6cc6bc5234", "patch": "@@ -621,9 +621,21 @@ maybe_clone_body (tree fn)\n                  function.  */\n               else\n                 {\n-                  decl_map->put (parm, clone_parm);\n+\t\t  tree replacement;\n \t\t  if (clone_parm)\n-\t\t    clone_parm = DECL_CHAIN (clone_parm);\n+\t\t    {\n+\t\t      replacement = clone_parm;\n+\t\t      clone_parm = DECL_CHAIN (clone_parm);\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      /* Inheriting ctors can omit parameters from the base\n+\t\t\t clone.  Replace them with null lvalues.  */\n+\t\t      tree reftype = build_reference_type (TREE_TYPE (parm));\n+\t\t      replacement = fold_convert (reftype, null_pointer_node);\n+\t\t      replacement = convert_from_reference (replacement);\n+\t\t    }\n+                  decl_map->put (parm, replacement);\n                 }\n             }\n "}, {"sha": "c0cf040048cccfafd5bc7b388cd2c670bec38fc5", "filename": "gcc/testsuite/g++.dg/cpp1z/inh-ctor23.C", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77095a6ab13996a38b0a360d8ef9fc6cc6bc5234/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finh-ctor23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77095a6ab13996a38b0a360d8ef9fc6cc6bc5234/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finh-ctor23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finh-ctor23.C?ref=77095a6ab13996a38b0a360d8ef9fc6cc6bc5234", "patch": "@@ -14,6 +14,9 @@ Z z(0); // OK: initialization of Y does not invoke default constructor of X\n // { dg-final { scan-assembler \"_ZN1YCI21WEi\" } }\n // { dg-final { scan-tree-dump \"Y::Y ._2, _3.;\" \"gimple\" } }\n \n+// And that we aren't expecting the int, either.\n+// { dg-final { scan-tree-dump-not \"Y::Y.int\\[^\\n\\]*int\" \"gimple\" } }\n+\n // And that we *are* passing the int along to V::V.\n // { dg-final { scan-assembler \"_ZN1VCI21WEi\" } }\n // { dg-final { scan-tree-dump \"V::V .this, _1.;\" \"gimple\" } }"}, {"sha": "7c1aab7255cbb4cc967285ffb36d60fc3279911e", "filename": "gcc/testsuite/g++.dg/init/ctor12.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77095a6ab13996a38b0a360d8ef9fc6cc6bc5234/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77095a6ab13996a38b0a360d8ef9fc6cc6bc5234/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor12.C?ref=77095a6ab13996a38b0a360d8ef9fc6cc6bc5234", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/78689 - ICE on constructor with label\n+\n+struct e {\n+  e() {\n+    goto aj;\n+    if (0)\n+    aj:;\n+  }\n+};\n+\n+void f()\n+{\n+  struct e x;\n+}"}, {"sha": "138b992552e793ac6d6cf279a4c8374b212aef57", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77095a6ab13996a38b0a360d8ef9fc6cc6bc5234/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77095a6ab13996a38b0a360d8ef9fc6cc6bc5234/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=77095a6ab13996a38b0a360d8ef9fc6cc6bc5234", "patch": "@@ -1045,7 +1045,6 @@ copy_tree_body_r (tree *tp, int *walk_subtrees, void *data)\n   copy_body_data *id = (copy_body_data *) data;\n   tree fn = id->src_fn;\n   tree new_block;\n-  bool copied = false;\n \n   /* Begin by recognizing trees that we'll completely rewrite for the\n      inlining context.  Our output for these trees is completely\n@@ -1242,40 +1241,10 @@ copy_tree_body_r (tree *tp, int *walk_subtrees, void *data)\n \t  *walk_subtrees = 0;\n \t  return NULL;\n \t}\n-      else if (TREE_CODE (*tp) == COND_EXPR)\n-\t{\n-\t  tree cond = TREE_OPERAND (*tp, 0);\n-\t  walk_tree (&cond, copy_tree_body_r, data, NULL);\n-\t  tree folded = fold (cond);\n-\t  if (TREE_CODE (folded) == INTEGER_CST)\n-\t    {\n-\t      /* Only copy the taken branch; for a C++ base constructor clone\n-\t\t inherited from a virtual base, copying the other branch leads\n-\t\t to references to parameters that were optimized away.  */\n-\t      tree branch = (integer_nonzerop (folded)\n-\t\t\t     ? TREE_OPERAND (*tp, 1)\n-\t\t\t     : TREE_OPERAND (*tp, 2));\n-\t      tree type = TREE_TYPE (*tp);\n-\t      if (VOID_TYPE_P (type)\n-\t\t  || type == TREE_TYPE (branch))\n-\t\t{\n-\t\t  *tp = branch;\n-\t\t  return copy_tree_body_r (tp, walk_subtrees, data);\n-\t\t}\n-\t    }\n-\t  /* Avoid copying the condition twice.  */\n-\t  copy_tree_r (tp, walk_subtrees, NULL);\n-\t  TREE_OPERAND (*tp, 0) = cond;\n-\t  walk_tree (&TREE_OPERAND (*tp, 1), copy_tree_body_r, data, NULL);\n-\t  walk_tree (&TREE_OPERAND (*tp, 2), copy_tree_body_r, data, NULL);\n-\t  *walk_subtrees = 0;\n-\t  copied = true;\n-\t}\n \n       /* Here is the \"usual case\".  Copy this tree node, and then\n \t tweak some special cases.  */\n-      if (!copied)\n-\tcopy_tree_r (tp, walk_subtrees, NULL);\n+      copy_tree_r (tp, walk_subtrees, NULL);\n \n       /* If EXPR has block defined, map it to newly constructed block.\n          When inlining we want EXPRs without block appear in the block"}]}