{"sha": "43198be7c4cf49f0ba7fcdbe3d5558b47f0ad0a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMxOThiZTdjNGNmNDlmMGJhN2ZjZGJlM2Q1NTU4YjQ3ZjBhZDBhMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-04-11T12:24:56Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-04-11T12:24:56Z"}, "message": "(preexpand_calls, case CALL_EXPR): Rework to properly avoid expanding\nfunctions returning variable size objects.\n\nFrom-SVN: r11698", "tree": {"sha": "5563c8a4eeba0341ecb85d0ffc2037f1664d4faf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5563c8a4eeba0341ecb85d0ffc2037f1664d4faf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43198be7c4cf49f0ba7fcdbe3d5558b47f0ad0a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43198be7c4cf49f0ba7fcdbe3d5558b47f0ad0a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43198be7c4cf49f0ba7fcdbe3d5558b47f0ad0a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43198be7c4cf49f0ba7fcdbe3d5558b47f0ad0a2/comments", "author": null, "committer": null, "parents": [{"sha": "d80db03db2a63a855abb27ae3f236e8d27c7c227", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d80db03db2a63a855abb27ae3f236e8d27c7c227", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d80db03db2a63a855abb27ae3f236e8d27c7c227"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "851c18eca04611a957c632a7bffef1c7a68cdea3", "filename": "gcc/expr.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43198be7c4cf49f0ba7fcdbe3d5558b47f0ad0a2/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43198be7c4cf49f0ba7fcdbe3d5558b47f0ad0a2/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=43198be7c4cf49f0ba7fcdbe3d5558b47f0ad0a2", "patch": "@@ -9422,16 +9422,17 @@ preexpand_calls (exp)\n     {\n     case CALL_EXPR:\n       /* Do nothing if already expanded.  */\n-      if (CALL_EXPR_RTL (exp) != 0)\n+      if (CALL_EXPR_RTL (exp) != 0\n+\t  /* Do nothing if the call returns a variable-sized object.  */\n+\t  || TREE_CODE (TYPE_SIZE (TREE_TYPE(exp))) != INTEGER_CST\n+\t  /* Do nothing to built-in functions.  */\n+\t  || (TREE_CODE (TREE_OPERAND (exp, 0)) == ADDR_EXPR\n+\t      && (TREE_CODE (TREE_OPERAND (TREE_OPERAND (exp, 0), 0))\n+\t\t  == FUNCTION_DECL)\n+\t      && DECL_BUILT_IN (TREE_OPERAND (TREE_OPERAND (exp, 0), 0))))\n \treturn;\n \n-      /* Do nothing to built-in functions.  */\n-      if (TREE_CODE (TREE_OPERAND (exp, 0)) != ADDR_EXPR\n-\t  || TREE_CODE (TREE_OPERAND (TREE_OPERAND (exp, 0), 0)) != FUNCTION_DECL\n-\t  || ! DECL_BUILT_IN (TREE_OPERAND (TREE_OPERAND (exp, 0), 0))\n-\t  /* Do nothing if the call returns a variable-sized object.  */\n-\t  || TREE_CODE (TYPE_SIZE (TREE_TYPE(exp))) != INTEGER_CST)\n-\tCALL_EXPR_RTL (exp) = expand_call (exp, NULL_RTX, 0);\n+      CALL_EXPR_RTL (exp) = expand_call (exp, NULL_RTX, 0);\n       return;\n \n     case COMPOUND_EXPR:"}]}