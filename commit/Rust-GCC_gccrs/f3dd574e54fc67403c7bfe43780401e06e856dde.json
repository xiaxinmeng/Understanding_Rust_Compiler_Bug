{"sha": "f3dd574e54fc67403c7bfe43780401e06e856dde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNkZDU3NGU1NGZjNjc0MDNjN2JmZTQzNzgwNDAxZTA2ZTg1NmRkZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-03-22T18:34:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-03-22T18:34:44Z"}, "message": "re PR sanitizer/80110 (error: statement marked for throw, but doesn\u2019t w/ -fsanitize=thread)\n\n\tPR sanitizer/80110\n\t* tsan.c: Include tree-eh.h.\n\t(instrument_builtin_call): Call maybe_clean_eh_stmt or\n\tmaybe_clean_or_replace_eh_stmt where needed.\n\t(instrument_memory_accesses): Add cfg_changed argument.\n\tCall gimple_purge_dead_eh_edges on each block and set *cfg_changed\n\tif it returned true.\n\t(tsan_pass): Adjust caller.  Return TODO_cleanup_cfg if cfg_changed.\n\n\t* g++.dg/tsan/pr80110.C: New test.\n\nFrom-SVN: r246399", "tree": {"sha": "904be942771e5ff0b78f41ad11034f3427573b07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/904be942771e5ff0b78f41ad11034f3427573b07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3dd574e54fc67403c7bfe43780401e06e856dde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3dd574e54fc67403c7bfe43780401e06e856dde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3dd574e54fc67403c7bfe43780401e06e856dde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3dd574e54fc67403c7bfe43780401e06e856dde/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c6dd4ee6b4a2716ae8c70644eb2987230ad729ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6dd4ee6b4a2716ae8c70644eb2987230ad729ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6dd4ee6b4a2716ae8c70644eb2987230ad729ac"}], "stats": {"total": 77, "additions": 60, "deletions": 17}, "files": [{"sha": "2721da3a36de82869c73bb5d29cf18ad6a013b3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3dd574e54fc67403c7bfe43780401e06e856dde/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3dd574e54fc67403c7bfe43780401e06e856dde/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3dd574e54fc67403c7bfe43780401e06e856dde", "patch": "@@ -1,5 +1,14 @@\n 2017-03-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR sanitizer/80110\n+\t* tsan.c: Include tree-eh.h.\n+\t(instrument_builtin_call): Call maybe_clean_eh_stmt or\n+\tmaybe_clean_or_replace_eh_stmt where needed.\n+\t(instrument_memory_accesses): Add cfg_changed argument.\n+\tCall gimple_purge_dead_eh_edges on each block and set *cfg_changed\n+\tif it returned true.\n+\t(tsan_pass): Adjust caller.  Return TODO_cleanup_cfg if cfg_changed.\n+\n \tPR rtl-optimization/63191\n \t* config/i386/i386.c (ix86_delegitimize_address): Turn into small\n \twrapper function, moved the whole old content into ..."}, {"sha": "d8b45dcacf667f692bf3fc65d4cebd0661df20d9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3dd574e54fc67403c7bfe43780401e06e856dde/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3dd574e54fc67403c7bfe43780401e06e856dde/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f3dd574e54fc67403c7bfe43780401e06e856dde", "patch": "@@ -1,3 +1,8 @@\n+2017-03-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/80110\n+\t* g++.dg/tsan/pr80110.C: New test.\n+\n 2017-03-22  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/80142"}, {"sha": "bee19e50d309d78b3648488646aa5a094351e733", "filename": "gcc/testsuite/g++.dg/tsan/pr80110.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3dd574e54fc67403c7bfe43780401e06e856dde/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Fpr80110.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3dd574e54fc67403c7bfe43780401e06e856dde/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Fpr80110.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Fpr80110.C?ref=f3dd574e54fc67403c7bfe43780401e06e856dde", "patch": "@@ -0,0 +1,16 @@\n+// PR sanitizer/80110\n+// { dg-do compile }\n+// { dg-options \"-fnon-call-exceptions -fsanitize=thread\" }\n+\n+struct A\n+{\n+  int b ();\n+  void c () { static int d = b (); }\n+};\n+\n+void\n+foo ()\n+{\n+  A e;\n+  e.c ();\n+}"}, {"sha": "dd8cd85647c9854b8a21a51b3faaafb60ebec595", "filename": "gcc/tsan.c", "status": "modified", "additions": 30, "deletions": 17, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3dd574e54fc67403c7bfe43780401e06e856dde/gcc%2Ftsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3dd574e54fc67403c7bfe43780401e06e856dde/gcc%2Ftsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsan.c?ref=f3dd574e54fc67403c7bfe43780401e06e856dde", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-iterator.h\"\n #include \"tree-ssa-propagate.h\"\n #include \"tree-ssa-loop-ivopts.h\"\n+#include \"tree-eh.h\"\n #include \"tsan.h\"\n #include \"asan.h\"\n #include \"builtins.h\"\n@@ -504,6 +505,7 @@ instrument_builtin_call (gimple_stmt_iterator *gsi)\n \t      return;\n \t    gimple_call_set_fndecl (stmt, decl);\n \t    update_stmt (stmt);\n+\t    maybe_clean_eh_stmt (stmt);\n \t    if (tsan_atomic_table[i].action == fetch_op)\n \t      {\n \t\targs[1] = gimple_call_arg (stmt, 1);\n@@ -524,6 +526,7 @@ instrument_builtin_call (gimple_stmt_iterator *gsi)\n \t\t\t\t       ? MEMMODEL_SEQ_CST\n \t\t\t\t       : MEMMODEL_ACQUIRE);\n \t    update_gimple_call (gsi, decl, num + 1, args[0], args[1], args[2]);\n+\t    maybe_clean_or_replace_eh_stmt (stmt, gsi_stmt (*gsi));\n \t    stmt = gsi_stmt (*gsi);\n \t    if (tsan_atomic_table[i].action == fetch_op_seq_cst)\n \t      {\n@@ -572,6 +575,7 @@ instrument_builtin_call (gimple_stmt_iterator *gsi)\n \t      return;\n \t    update_gimple_call (gsi, decl, 5, args[0], args[1], args[2],\n \t\t\t\targs[4], args[5]);\n+\t    maybe_clean_or_replace_eh_stmt (stmt, gsi_stmt (*gsi));\n \t    return;\n \t  case bool_cas:\n \t  case val_cas:\n@@ -599,6 +603,7 @@ instrument_builtin_call (gimple_stmt_iterator *gsi)\n \t\t\t\t\t       MEMMODEL_SEQ_CST),\n \t\t\t\tbuild_int_cst (NULL_TREE,\n \t\t\t\t\t       MEMMODEL_SEQ_CST));\n+\t    maybe_clean_or_replace_eh_stmt (stmt, gsi_stmt (*gsi));\n \t    if (tsan_atomic_table[i].action == val_cas && lhs)\n \t      {\n \t\ttree cond;\n@@ -623,6 +628,7 @@ instrument_builtin_call (gimple_stmt_iterator *gsi)\n \t\t\t\tbuild_int_cst (t, 0),\n \t\t\t\tbuild_int_cst (NULL_TREE,\n \t\t\t\t\t       MEMMODEL_RELEASE));\n+\t    maybe_clean_or_replace_eh_stmt (stmt, gsi_stmt (*gsi));\n \t    return;\n \t  case bool_clear:\n \t  case bool_test_and_set:\n@@ -651,11 +657,13 @@ instrument_builtin_call (gimple_stmt_iterator *gsi)\n \t      {\n \t\tupdate_gimple_call (gsi, decl, 3, gimple_call_arg (stmt, 0),\n \t\t\t\t    build_int_cst (t, 0), last_arg);\n+\t\tmaybe_clean_or_replace_eh_stmt (stmt, gsi_stmt (*gsi));\n \t\treturn;\n \t      }\n \t    t = build_int_cst (t, targetm.atomic_test_and_set_trueval);\n \t    update_gimple_call (gsi, decl, 3, gimple_call_arg (stmt, 0),\n \t\t\t\tt, last_arg);\n+\t    maybe_clean_or_replace_eh_stmt (stmt, gsi_stmt (*gsi));\n \t    stmt = gsi_stmt (*gsi);\n \t    lhs = gimple_call_lhs (stmt);\n \t    if (lhs == NULL_TREE)\n@@ -766,7 +774,7 @@ instrument_func_exit (void)\n    Return true if func entry/exit should be instrumented.  */\n \n static bool\n-instrument_memory_accesses (void)\n+instrument_memory_accesses (bool *cfg_changed)\n {\n   basic_block bb;\n   gimple_stmt_iterator gsi;\n@@ -775,20 +783,24 @@ instrument_memory_accesses (void)\n   auto_vec<gimple *> tsan_func_exits;\n \n   FOR_EACH_BB_FN (bb, cfun)\n-    for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n-      {\n-\tgimple *stmt = gsi_stmt (gsi);\n-\tif (gimple_call_internal_p (stmt, IFN_TSAN_FUNC_EXIT))\n-\t  {\n-\t    if (fentry_exit_instrument)\n-\t      replace_func_exit (stmt);\n-\t    else\n-\t      tsan_func_exits.safe_push (stmt);\n-\t    func_exit_seen = true;\n-\t  }\n-\telse\n-\t  fentry_exit_instrument |= instrument_gimple (&gsi);\n-      }\n+    {\n+      for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+\t{\n+\t  gimple *stmt = gsi_stmt (gsi);\n+\t  if (gimple_call_internal_p (stmt, IFN_TSAN_FUNC_EXIT))\n+\t    {\n+\t      if (fentry_exit_instrument)\n+\t\treplace_func_exit (stmt);\n+\t      else\n+\t\ttsan_func_exits.safe_push (stmt);\n+\t      func_exit_seen = true;\n+\t    }\n+\t  else\n+\t    fentry_exit_instrument |= instrument_gimple (&gsi);\n+\t}\n+      if (gimple_purge_dead_eh_edges (bb))\n+\t*cfg_changed = true;\n+    }\n   unsigned int i;\n   gimple *stmt;\n   FOR_EACH_VEC_ELT (tsan_func_exits, i, stmt)\n@@ -835,9 +847,10 @@ static unsigned\n tsan_pass (void)\n {\n   initialize_sanitizer_builtins ();\n-  if (instrument_memory_accesses ())\n+  bool cfg_changed = false;\n+  if (instrument_memory_accesses (&cfg_changed))\n     instrument_func_entry ();\n-  return 0;\n+  return cfg_changed ? TODO_cleanup_cfg : 0;\n }\n \n /* Inserts __tsan_init () into the list of CTORs.  */"}]}