{"sha": "c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdhYzlhMGM3ZTM5MTZmMTkyYWQ0MTIyN2UxNjIzOGZkMWZhMmZiZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2019-12-18T13:21:51Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-12-18T13:21:51Z"}, "message": "ipa-param-manipulation.h (get_original_index): Declare.\n\n\n\t* ipa-param-manipulation.h (get_original_index): Declare.\n\t* ipa-param-manipulation.c (ipa_param_adjustments::get_original_index):\n\tNew member function.\n\t* ipa-prop.c (ipcp_get_parm_bits): New function.\n\t* ipa-prop.h (ipcp_get_parm_bits): Declare.\n\t* tree-ssa-ccp.c: Include cgraph.h, alloc-pool.h, symbol-summary.h,\n\tipa-utils.h and ipa-prop.h\n\t(get_default_value): Use ipcp_get_parm_bits.\n\n\t* gcc.dg/ipa/ipa-bit-cp.c: New testcase.\n\t* gcc.dg/ipa/ipa-bit-cp-1.c: New testcase.\n\t* gcc.dg/ipa/ipa-bit-cp-2.c: New testcase.\n\nCo-Authored-By: Martin Jambor <mjambor@suse.cz>\n\nFrom-SVN: r279523", "tree": {"sha": "e68d5f0c5a6cebf9e7164a3aff5b36fbb475d67b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e68d5f0c5a6cebf9e7164a3aff5b36fbb475d67b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf/comments", "author": null, "committer": null, "parents": [{"sha": "1ad431f95c200fe4d1eccab9cd5487087adc2bd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad431f95c200fe4d1eccab9cd5487087adc2bd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ad431f95c200fe4d1eccab9cd5487087adc2bd8"}], "stats": {"total": 147, "additions": 145, "deletions": 2}, "files": [{"sha": "198aa78fd170c522ef707d2e7a77e621b0501f1a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf", "patch": "@@ -1,3 +1,15 @@\n+2019-12-17  Jan Hubicka  <hubicka@ucw.cz>\n+\t    Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-param-manipulation.h (get_original_index): Declare.\n+\t* ipa-param-manipulation.c (ipa_param_adjustments::get_original_index):\n+\tNew member function.\n+\t* ipa-prop.c (ipcp_get_parm_bits): New function.\n+\t* ipa-prop.h (ipcp_get_parm_bits): Declare.\n+\t* tree-ssa-ccp.c: Include cgraph.h, alloc-pool.h, symbol-summary.h,\n+\tipa-utils.h and ipa-prop.h\n+\t(get_default_value): Use ipcp_get_parm_bits.\n+\n 2019-12-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR lto/92972"}, {"sha": "b756b5d2281bc768dcdc606dd4dd9605cccde8e7", "filename": "gcc/ipa-param-manipulation.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf/gcc%2Fipa-param-manipulation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf/gcc%2Fipa-param-manipulation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-param-manipulation.c?ref=c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf", "patch": "@@ -324,6 +324,18 @@ ipa_param_adjustments::get_updated_indices (vec<int> *new_indices)\n     }\n }\n \n+/* Return the original index for the given new parameter index.  Return a\n+   negative number if not available.  */\n+\n+int\n+ipa_param_adjustments::get_original_index (int newidx)\n+{\n+  const ipa_adjusted_param *adj = &(*m_adj_params)[newidx];\n+  if (adj->op != IPA_PARAM_OP_COPY)\n+    return -1;\n+  return adj->base_index;\n+}\n+\n /* Return true if the first parameter (assuming there was one) survives the\n    transformation intact and remains the first one.  */\n "}, {"sha": "5d7278e0d1b745393d08316b97827964393a8ff5", "filename": "gcc/ipa-param-manipulation.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf/gcc%2Fipa-param-manipulation.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf/gcc%2Fipa-param-manipulation.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-param-manipulation.h?ref=c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf", "patch": "@@ -258,6 +258,9 @@ class GTY(()) ipa_param_adjustments\n   void get_surviving_params (vec<bool> *surviving_params);\n   /* Fill a vector with new indices of surviving original parameters.  */\n   void get_updated_indices (vec<int> *new_indices);\n+  /* Return the original index for the given new parameter index.  Return a\n+     negative number if not available.  */\n+  int get_original_index (int newidx);\n \n   void dump (FILE *f);\n   void debug ();"}, {"sha": "c9c6a827d0828b2b75390e80c64fc49e90e9a74f", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf", "patch": "@@ -5480,6 +5480,43 @@ ipcp_modif_dom_walker::before_dom_children (basic_block bb)\n   return NULL;\n }\n \n+/* Return true if we have recorded VALUE and MASK about PARM.\n+   Set VALUE and MASk accordingly.  */\n+\n+bool\n+ipcp_get_parm_bits (tree parm, tree *value, widest_int *mask)\n+{\n+  cgraph_node *cnode = cgraph_node::get (current_function_decl);\n+  ipcp_transformation *ts = ipcp_get_transformation_summary (cnode);\n+  if (!ts || vec_safe_length (ts->bits) == 0)\n+    return false;\n+\n+  int i = 0;\n+  for (tree p = DECL_ARGUMENTS (current_function_decl);\n+       p != parm; p = DECL_CHAIN (p))\n+    {\n+      i++;\n+      /* Ignore static chain.  */\n+      if (!p)\n+\treturn false;\n+    }\n+\n+  if (cnode->clone.param_adjustments)\n+    {\n+      i = cnode->clone.param_adjustments->get_original_index (i);\n+      if (i < 0)\n+\treturn false;\n+    }\n+\n+  vec<ipa_bits *, va_gc> &bits = *ts->bits;\n+  if (!bits[i])\n+    return false;\n+  *mask = bits[i]->mask;\n+  *value = wide_int_to_tree (TREE_TYPE (parm), bits[i]->value);\n+  return true;\n+}\n+\n+\n /* Update bits info of formal parameters as described in\n    ipcp_transformation.  */\n "}, {"sha": "4ce367a23ab06c1b30a97fd38ae543c62d0b5ab1", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf", "patch": "@@ -1041,6 +1041,7 @@ ipa_agg_value_set ipa_agg_value_set_from_jfunc (ipa_node_params *,\n void ipa_dump_param (FILE *, class ipa_node_params *info, int i);\n void ipa_release_body_info (struct ipa_func_body_info *);\n tree ipa_get_callee_param_type (struct cgraph_edge *e, int i);\n+bool ipcp_get_parm_bits (tree, tree *, widest_int *);\n \n /* From tree-sra.c:  */\n tree build_ref_for_offset (location_t, tree, poly_int64, bool, tree,"}, {"sha": "bcdfaa89c903f070c9fe14cabec073ee29870c8c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf", "patch": "@@ -1,3 +1,10 @@\n+2019-12-17  Jan Hubicka  <hubicka@ucw.cz>\n+\t    Martin Jambor  <mjambor@suse.cz>\n+\n+\t* gcc.dg/ipa/ipa-bit-cp.c: New testcase.\n+\t* gcc.dg/ipa/ipa-bit-cp-1.c: New testcase.\n+\t* gcc.dg/ipa/ipa-bit-cp-2.c: New testcase.\n+\n 2019-12-18  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* gcc.dg/vect/pr65947-8.c: Change pass conditions for amdgcn."}, {"sha": "2ec5fe54f55a07714880557d14ec0da9efb892cf", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-bit-cp-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-bit-cp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-bit-cp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-bit-cp-1.c?ref=c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -w -fipa-bit-cp\"  } */\n+static int\n+__attribute__ ((noinline))\n+test (int a)\n+{\n+   if (!(a&2))\n+     link_error ();\n+}\n+main()\n+{\n+  test (2);\n+  test (3);\n+  test (6);\n+  return 0;\n+}"}, {"sha": "42ce346948ca1f4b7964da60ccde736589cf5f6e", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-bit-cp-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-bit-cp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-bit-cp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-bit-cp-2.c?ref=c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -w -fipa-bit-cp\"  } */\n+static int\n+__attribute__ ((noinline))\n+test (int __attribute__((unused)) b, int a)\n+{\n+   if (!(a&2))\n+     link_error ();\n+}\n+\n+extern int __attribute__((const)) getint ();\n+\n+main()\n+{\n+  test (getint(), 2);\n+  test (getint(), 3);\n+  test (getint(), 6);\n+  return 0;\n+}"}, {"sha": "2ec5fe54f55a07714880557d14ec0da9efb892cf", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-bit-cp.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-bit-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-bit-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-bit-cp.c?ref=c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -w -fipa-bit-cp\"  } */\n+static int\n+__attribute__ ((noinline))\n+test (int a)\n+{\n+   if (!(a&2))\n+     link_error ();\n+}\n+main()\n+{\n+  test (2);\n+  test (3);\n+  test (6);\n+  return 0;\n+}"}, {"sha": "a77c03625ed80b341f4c9cebfb6c62142d98d537", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=c7ac9a0c7e3916f192ad41227e16238fd1fa2fbf", "patch": "@@ -146,6 +146,11 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stringpool.h\"\n #include \"attribs.h\"\n #include \"tree-vector-builder.h\"\n+#include \"cgraph.h\"\n+#include \"alloc-pool.h\"\n+#include \"symbol-summary.h\"\n+#include \"ipa-utils.h\"\n+#include \"ipa-prop.h\"\n \n /* Possible lattice values.  */\n typedef enum\n@@ -292,11 +297,26 @@ get_default_value (tree var)\n \t  if (flag_tree_bit_ccp)\n \t    {\n \t      wide_int nonzero_bits = get_nonzero_bits (var);\n-\t      if (nonzero_bits != -1)\n+\t      tree value;\n+\t      widest_int mask;\n+\n+\t      if (SSA_NAME_VAR (var)\n+\t\t  && TREE_CODE (SSA_NAME_VAR (var)) == PARM_DECL\n+\t\t  && ipcp_get_parm_bits (SSA_NAME_VAR (var), &value, &mask))\n+\t\t{\n+\t\t  val.lattice_val = CONSTANT;\n+\t\t  val.value = value;\n+\t\t  val.mask = mask;\n+\t\t  if (nonzero_bits != -1)\n+\t\t    val.mask &= extend_mask (nonzero_bits,\n+\t\t\t\t\t     TYPE_SIGN (TREE_TYPE (var)));\n+\t\t}\n+\t      else if (nonzero_bits != -1)\n \t\t{\n \t\t  val.lattice_val = CONSTANT;\n \t\t  val.value = build_zero_cst (TREE_TYPE (var));\n-\t\t  val.mask = extend_mask (nonzero_bits, TYPE_SIGN (TREE_TYPE (var)));\n+\t\t  val.mask = extend_mask (nonzero_bits,\n+\t\t\t\t\t  TYPE_SIGN (TREE_TYPE (var)));\n \t\t}\n \t    }\n \t}"}]}