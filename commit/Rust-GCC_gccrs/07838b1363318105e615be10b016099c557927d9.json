{"sha": "07838b1363318105e615be10b016099c557927d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc4MzhiMTM2MzMxODEwNWU2MTViZTEwYjAxNjA5OWM1NTc5MjdkOQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2013-08-03T18:57:25Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2013-08-03T18:57:25Z"}, "message": "pretty-print.h (pp_underscore): New.\n\n\t* pretty-print.h (pp_underscore): New.\n\t(pp_comma): Tidy.\n\t* gimple-pretty-print.c (dump_unary_rhs): Use specialized pretty\n\tprinter functions instead of pp_character.\n\t(dump_binary_rhs): Likewise.\n\t(dump_ternary_rhs): Likewise.\n\t(dump_gimple_call_args): Likewise.\n\t(pp_points_to_solution): Likewise.\n\t(dump_gimple_call): Likewise.\n\t(dump_gimple_switch): Likewise.\n\t(dump_gimple_cond): Likewise.\n\t(dump_gimple_bind): Likewise.\n\t(dump_gimple_try): Likewise.\n\t(dump_gimple_omp_for): Likewise.\n\t(dump_gimple_omp_continue): Likewise.\n\t(dump_gimple_omp_single): Likewise.\n\t(dump_gimple_omp_sections): Likewise.\n\t(dump_gimple_omp_block): Likewise.\n\t(dump_gimple_omp_critical): Likewise.\n\t(dump_gimple_transaction): Likewise.\n\t(dump_gimple_asm): Likewise.\n\t(dump_gimple_phi): Likewise.\n\t(dump_gimple_omp_parallel): Likewise.\n\t(dump_gimple_omp_task): Likewise.\n\t(dump_gimple_omp_atomic_load): Likewise.\n\t(dump_gimple_omp_atomic_store): Likewise.\n\t(dump_gimple_mem_ops): Likewise.\n\t(pp_gimple_stmt_1): Likewise.\n\t(pp_cfg_jump): Likewise.\n\t(dump_implicit_edges): Likewise.\n\t(gimple_dump_bb_for_graph): Likewise.\n\t* graph.c (draw_cfg_node): Likewise.\n\t* langhooks.c (lhd_print_error_function): Likewise.\n\t* sched-vis.c (print_exp): Likewise.\n\t(print_value): Likewise.\n\t(print_pattern): Likewise.\n\t(print_insn): Likewise.\n\t(rtl_dump_bb_for_graph): Likewise.\n\t* tree-pretty-print.c (dump_function_declaration): Likewise.\n\t(dump_array_domain): Likewise.\n\t(dump_omp_clause): Likewise.\n\t(dump_location): Likewise.\n\t(dump_generic_node): Likewise.\n\t(print_struct_decl): Likewise.\n\t* diagnostic.c (diagnostic_show_locus): Use pp_space.\n\nc-family/\n\t* c-ada-spec.c (print_ada_macros): Use specialized pretty printer\n\tfunctions instead of pp_character.\n\t(pp_ada_tree_identifier): Likewise.\n\t(dump_ada_double_name): Likewise.\n\t(dump_ada_function_declaration): Likewise.\n\t(dump_ada_array_domains): Likewise.\n\t(dump_template_types): Likewise.\n\t(dump_generic_ada_node): Likewise.\n\t(print_ada_declaration): Likewise.\n\t(print_ada_struct_decl): Likewise.\n\t* c-pretty-print.c (pp_c_integer_constant): Likewise.\n\ncp/\n\t* error.c (dump_aggr_type): Use specialized pretty printer\n\tfunctions instead of pp_character.\n\t(dump_type_prefix): Likewise.\n\t(dump_simple_decl): Likewise.\n\t(type_to_string): Likewise.\n\nFrom-SVN: r201467", "tree": {"sha": "9515de579e41318da043fe92577540e2a7444c11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9515de579e41318da043fe92577540e2a7444c11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07838b1363318105e615be10b016099c557927d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07838b1363318105e615be10b016099c557927d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07838b1363318105e615be10b016099c557927d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07838b1363318105e615be10b016099c557927d9/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bb0d2039bae9105b7afe749c923b2c60c579bbb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb0d2039bae9105b7afe749c923b2c60c579bbb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb0d2039bae9105b7afe749c923b2c60c579bbb9"}], "stats": {"total": 532, "additions": 301, "deletions": 231}, "files": [{"sha": "c1727829e3ee348316949d434d6380467d031884", "filename": "gcc/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07838b1363318105e615be10b016099c557927d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07838b1363318105e615be10b016099c557927d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07838b1363318105e615be10b016099c557927d9", "patch": "@@ -1,3 +1,51 @@\n+2013-08-03  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* pretty-print.h (pp_underscore): New.\n+\t(pp_comma): Tidy.\n+\t* gimple-pretty-print.c (dump_unary_rhs): Use specialized pretty\n+\tprinter functions instead of pp_character.\n+\t(dump_binary_rhs): Likewise.\n+\t(dump_ternary_rhs): Likewise.\n+\t(dump_gimple_call_args): Likewise.\n+\t(pp_points_to_solution): Likewise.\n+\t(dump_gimple_call): Likewise.\n+\t(dump_gimple_switch): Likewise.\n+\t(dump_gimple_cond): Likewise.\n+\t(dump_gimple_bind): Likewise.\n+\t(dump_gimple_try): Likewise.\n+\t(dump_gimple_omp_for): Likewise.\n+\t(dump_gimple_omp_continue): Likewise.\n+\t(dump_gimple_omp_single): Likewise.\n+\t(dump_gimple_omp_sections): Likewise.\n+\t(dump_gimple_omp_block): Likewise.\n+\t(dump_gimple_omp_critical): Likewise.\n+\t(dump_gimple_transaction): Likewise.\n+\t(dump_gimple_asm): Likewise.\n+\t(dump_gimple_phi): Likewise.\n+\t(dump_gimple_omp_parallel): Likewise.\n+\t(dump_gimple_omp_task): Likewise.\n+\t(dump_gimple_omp_atomic_load): Likewise.\n+\t(dump_gimple_omp_atomic_store): Likewise.\n+\t(dump_gimple_mem_ops): Likewise.\n+\t(pp_gimple_stmt_1): Likewise.\n+\t(pp_cfg_jump): Likewise.\n+\t(dump_implicit_edges): Likewise.\n+\t(gimple_dump_bb_for_graph): Likewise.\n+\t* graph.c (draw_cfg_node): Likewise.\n+\t* langhooks.c (lhd_print_error_function): Likewise.\n+\t* sched-vis.c (print_exp): Likewise.\n+\t(print_value): Likewise.\n+\t(print_pattern): Likewise.\n+\t(print_insn): Likewise.\n+\t(rtl_dump_bb_for_graph): Likewise.\n+\t* tree-pretty-print.c (dump_function_declaration): Likewise.\n+\t(dump_array_domain): Likewise.\n+\t(dump_omp_clause): Likewise.\n+\t(dump_location): Likewise.\n+\t(dump_generic_node): Likewise.\n+\t(print_struct_decl): Likewise.\n+\t* diagnostic.c (diagnostic_show_locus): Use pp_space.\n+\n 2013-08-03  Bill Schmidt  <wschmidt@vnet.linux.ibm.com>\n \n \t* gimple-ssa-strength-reduction.c (replace_mult_candidate): Update"}, {"sha": "d3b930611c4e88fc7732fbdaf4059f4a611d6ff6", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07838b1363318105e615be10b016099c557927d9/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07838b1363318105e615be10b016099c557927d9/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=07838b1363318105e615be10b016099c557927d9", "patch": "@@ -1,3 +1,17 @@\n+2013-08-03  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* c-ada-spec.c (print_ada_macros): Use specialized pretty printer\n+\tfunctions instead of pp_character.\n+\t(pp_ada_tree_identifier): Likewise.\n+\t(dump_ada_double_name): Likewise.\n+\t(dump_ada_function_declaration): Likewise.\n+\t(dump_ada_array_domains): Likewise.\n+\t(dump_template_types): Likewise.\n+\t(dump_generic_ada_node): Likewise.\n+\t(print_ada_declaration): Likewise.\n+\t(print_ada_struct_decl): Likewise.\n+\t* c-pretty-print.c (pp_c_integer_constant): Likewise.\n+\n 2013-07-23  Tom Tromey  <tromey@redhat.com>\n \n \t* c-common.h (enum rid) <RID_GENERIC>: New constant."}, {"sha": "1d0fcd2058f2c8ba38db4cb6761bab86ec475dbb", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07838b1363318105e615be10b016099c557927d9/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07838b1363318105e615be10b016099c557927d9/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=07838b1363318105e615be10b016099c557927d9", "patch": "@@ -418,7 +418,7 @@ print_ada_macros (pretty_printer *pp, cpp_hashnode **macros, int max_ada_macros)\n \n \t  pp_string (pp, \";  --  \");\n \t  pp_string (pp, sloc.file);\n-\t  pp_character (pp, ':');\n+\t  pp_colon (pp);\n \t  pp_scalar (pp, \"%d\", sloc.line);\n \t  pp_newline (pp);\n \t}\n@@ -1253,7 +1253,7 @@ pp_ada_tree_identifier (pretty_printer *buffer, tree node, tree type,\n \t\t\t{\n \t\t\t  append_withs (s1, limited_access);\n \t\t\t  pp_string (buffer, s1);\n-\t\t\t  pp_character (buffer, '.');\n+\t\t\t  pp_dot (buffer);\n \t\t\t}\n \t\t      free (s1);\n \t\t    }\n@@ -1375,7 +1375,7 @@ dump_ada_double_name (pretty_printer *buffer, tree t1, tree t2, const char *s)\n       pp_scalar (buffer, \"%d\", TYPE_UID (TREE_TYPE (t1)));\n     }\n \n-  pp_character (buffer, '_');\n+  pp_underscore (buffer);\n \n   if (DECL_NAME (t1))\n     pp_ada_tree_identifier (buffer, DECL_NAME (t2), t2, false);\n@@ -1489,7 +1489,7 @@ dump_ada_function_declaration (pretty_printer *buffer, tree func,\n   if (num_args > 0)\n     {\n       pp_space (buffer);\n-      pp_character (buffer, '(');\n+      pp_left_paren (buffer);\n     }\n \n   if (TREE_CODE (func) == FUNCTION_DECL)\n@@ -1550,7 +1550,7 @@ dump_ada_function_declaration (pretty_printer *buffer, tree func,\n \n       if (num < num_args)\n \t{\n-\t  pp_character (buffer, ';');\n+\t  pp_semicolon (buffer);\n \n \t  if (num_args > 2)\n \t    newline_and_indent (buffer, spc + INDENT_INCR);\n@@ -1566,7 +1566,7 @@ dump_ada_function_declaration (pretty_printer *buffer, tree func,\n     }\n \n   if (num_args > 0)\n-    pp_character (buffer, ')');\n+    pp_right_paren (buffer);\n   return num_args;\n }\n \n@@ -1577,7 +1577,7 @@ static void\n dump_ada_array_domains (pretty_printer *buffer, tree node, int spc)\n {\n   int first = 1;\n-  pp_character (buffer, '(');\n+  pp_left_paren (buffer);\n \n   for (; TREE_CODE (node) == ARRAY_TYPE; node = TREE_TYPE (node))\n     {\n@@ -1606,7 +1606,7 @@ dump_ada_array_domains (pretty_printer *buffer, tree node, int spc)\n       else\n \tpp_string (buffer, \"size_t\");\n     }\n-  pp_character (buffer, ')');\n+  pp_right_paren (buffer);\n }\n \n /* Dump in BUFFER file:line information related to NODE.  */\n@@ -1706,7 +1706,7 @@ dump_template_types (pretty_printer *buffer, tree types,\n   for (i = 0; i < len; i++)\n     {\n       tree elem = TREE_VEC_ELT (types, i);\n-      pp_character (buffer, '_');\n+      pp_underscore (buffer);\n       if (!dump_generic_ada_node (buffer, elem, 0, cpp_check, spc, false, true))\n \t{\n \t  pp_string (buffer, \"unknown\");\n@@ -2215,7 +2215,7 @@ dump_generic_ada_node (pretty_printer *buffer, tree node, tree type,\n \n \t  if (tree_int_cst_sgn (val) < 0)\n \t    {\n-\t      pp_character (buffer, '-');\n+\t      pp_minus (buffer);\n \t      high = ~high + !low;\n \t      low = -low;\n \t    }\n@@ -2986,7 +2986,7 @@ print_ada_declaration (pretty_printer *buffer, tree t, tree type,\n  \t  dump_generic_ada_node\n \t    (buffer, TYPE_NAME (TREE_TYPE (t)), type, cpp_check,\n \t     spc, false, true);\n-  \t  pp_character (buffer, ')');\n+  \t  pp_right_paren (buffer);\n \n \t  print_ada_methods (buffer, TREE_TYPE (t), cpp_check, spc);\n \t}\n@@ -3226,7 +3226,7 @@ print_ada_struct_decl (pretty_printer *buffer, tree node, tree type,\n   dump_generic_ada_node\n     (buffer, TREE_TYPE (type), type, cpp_check, spc, false, true);\n   package_prefix = true;\n-  pp_character (buffer, ')');\n+  pp_right_paren (buffer);\n \n   if (is_union)\n     {\n@@ -3236,7 +3236,7 @@ print_ada_struct_decl (pretty_printer *buffer, tree node, tree type,\n \n       dump_generic_ada_node\n \t(buffer, TREE_TYPE (type), type, cpp_check, spc, false, true);\n-      pp_character (buffer, ')');\n+      pp_right_paren (buffer);\n     }\n \n   if (bitfield_used)\n@@ -3246,7 +3246,7 @@ print_ada_struct_decl (pretty_printer *buffer, tree node, tree type,\n       pp_string (buffer, \"pragma Pack (\");\n       dump_generic_ada_node\n \t(buffer, TREE_TYPE (type), type, cpp_check, spc, false, true);\n-      pp_character (buffer, ')');\n+      pp_right_paren (buffer);\n       bitfield_used = false;\n     }\n "}, {"sha": "375f6dc907361936a526c3a7a1877d85af8c42c6", "filename": "gcc/c-family/c-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07838b1363318105e615be10b016099c557927d9/gcc%2Fc-family%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07838b1363318105e615be10b016099c557927d9/gcc%2Fc-family%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.c?ref=07838b1363318105e615be10b016099c557927d9", "patch": "@@ -920,7 +920,7 @@ pp_c_integer_constant (c_pretty_printer *pp, tree i)\n       HOST_WIDE_INT high = TREE_INT_CST_HIGH (i);\n       if (tree_int_cst_sgn (i) < 0)\n \t{\n-\t  pp_character (pp, '-');\n+\t  pp_minus (pp);\n \t  high = ~high + !low;\n \t  low = -low;\n \t}"}, {"sha": "74e5f837e52c420604311731de17f8f0fb4e2151", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07838b1363318105e615be10b016099c557927d9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07838b1363318105e615be10b016099c557927d9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=07838b1363318105e615be10b016099c557927d9", "patch": "@@ -1,3 +1,11 @@\n+2013-08-03  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* error.c (dump_aggr_type): Use specialized pretty printer\n+\tfunctions instead of pp_character.\n+\t(dump_type_prefix): Likewise.\n+\t(dump_simple_decl): Likewise.\n+\t(type_to_string): Likewise.\n+\n 2013-08-02  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* cp-tree.h (finish_stmt): Do not declare."}, {"sha": "a7fc9cc13f6815c6bafdf0ac86a449c3444c9e67", "filename": "gcc/cp/error.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07838b1363318105e615be10b016099c557927d9/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07838b1363318105e615be10b016099c557927d9/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=07838b1363318105e615be10b016099c557927d9", "patch": "@@ -663,7 +663,7 @@ dump_aggr_type (tree t, int flags)\n       if (lambda_function (t))\n \tdump_parameters (FUNCTION_FIRST_USER_PARMTYPE (lambda_function (t)),\n \t\t\t flags);\n-      pp_character(cxx_pp, '>');\n+      pp_greater (cxx_pp);\n     }\n   else\n     pp_cxx_tree_identifier (cxx_pp, name);\n@@ -710,13 +710,13 @@ dump_type_prefix (tree t, int flags)\n \t\t\t\t     TYPE_ATTRIBUTES (sub));\n \t  }\n \tif (TYPE_PTR_P (t))\n-\t  pp_character(cxx_pp, '*');\n+\t  pp_star (cxx_pp);\n \telse if (TREE_CODE (t) == REFERENCE_TYPE)\n \t{\n \t  if (TYPE_REF_IS_RVALUE (t))\n \t    pp_string (cxx_pp, \"&&\");\n \t  else\n-\t    pp_character (cxx_pp, '&');\n+\t    pp_ampersand (cxx_pp);\n \t}\n \tpp_base (cxx_pp)->padding = pp_before;\n \tpp_cxx_cv_qualifier_seq (cxx_pp, t);\n@@ -946,7 +946,7 @@ dump_simple_decl (tree t, tree type, int flags)\n     {\n       if (TREE_CODE (t) == FIELD_DECL && DECL_NORMAL_CAPTURE_P (t))\n \t{\n-\t  pp_character (cxx_pp, '<');\n+\t  pp_less (cxx_pp);\n \t  pp_string (cxx_pp, IDENTIFIER_POINTER (DECL_NAME (t)) + 2);\n \t  pp_string (cxx_pp, \" capture>\");\n \t}\n@@ -2870,7 +2870,7 @@ type_to_string (tree typ, int verbose)\n       /* And remember the start of the aka dump.  */\n       aka_start = obstack_object_size (ob);\n       dump_type (aka, flags);\n-      pp_character (cxx_pp, '}');\n+      pp_right_brace (cxx_pp);\n       p = (char*)obstack_base (ob);\n       /* If they are identical, cut off the aka with a NUL.  */\n       if (memcmp (p, p+aka_start, len) == 0)"}, {"sha": "3612ca09d7717f09e0d9af0ff006d7b7430fd9a7", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07838b1363318105e615be10b016099c557927d9/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07838b1363318105e615be10b016099c557927d9/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=07838b1363318105e615be10b016099c557927d9", "patch": "@@ -306,7 +306,7 @@ diagnostic_show_locus (diagnostic_context * context,\n   pp_newline (context->printer);\n   saved_prefix = pp_get_prefix (context->printer);\n   pp_set_prefix (context->printer, NULL);\n-  pp_character (context->printer, ' ');\n+  pp_space (context->printer);\n   while (max_width > 0 && *line != '\\0')\n     {\n       char c = *line == '\\t' ? ' ' : *line;"}, {"sha": "6f53932e18175bd0fb45455ba20c3fa65a87f164", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 75, "deletions": 75, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07838b1363318105e615be10b016099c557927d9/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07838b1363318105e615be10b016099c557927d9/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=07838b1363318105e615be10b016099c557927d9", "patch": "@@ -280,14 +280,14 @@ dump_unary_rhs (pretty_printer *buffer, gimple gs, int spc, int flags)\n     case FIX_TRUNC_EXPR:\n     case FLOAT_EXPR:\n     CASE_CONVERT:\n-      pp_character (buffer, '(');\n+      pp_left_paren (buffer);\n       dump_generic_node (buffer, TREE_TYPE (lhs), spc, flags, false);\n       pp_string (buffer, \") \");\n       if (op_prio (rhs) < op_code_prio (rhs_code))\n \t{\n-\t  pp_character (buffer, '(');\n+\t  pp_left_paren (buffer);\n \t  dump_generic_node (buffer, rhs, spc, flags, false);\n-\t  pp_character (buffer, ')');\n+\t  pp_right_paren (buffer);\n \t}\n       else\n \tdump_generic_node (buffer, rhs, spc, flags, false);\n@@ -302,7 +302,7 @@ dump_unary_rhs (pretty_printer *buffer, gimple gs, int spc, int flags)\n     case ABS_EXPR:\n       pp_string (buffer, \"ABS_EXPR <\");\n       dump_generic_node (buffer, rhs, spc, flags, false);\n-      pp_character (buffer, '>');\n+      pp_greater (buffer);\n       break;\n \n     default:\n@@ -317,23 +317,23 @@ dump_unary_rhs (pretty_printer *buffer, gimple gs, int spc, int flags)\n \t  break;\n \t}\n       else if (rhs_code == BIT_NOT_EXPR)\n-\tpp_character (buffer, '~');\n+\tpp_complement (buffer);\n       else if (rhs_code == TRUTH_NOT_EXPR)\n-\tpp_character (buffer, '!');\n+\tpp_exclamation (buffer);\n       else if (rhs_code == NEGATE_EXPR)\n-\tpp_character (buffer, '-');\n+\tpp_minus (buffer);\n       else\n \t{\n-\t  pp_character (buffer, '[');\n+\t  pp_left_bracket (buffer);\n \t  pp_string (buffer, tree_code_name [rhs_code]);\n \t  pp_string (buffer, \"] \");\n \t}\n \n       if (op_prio (rhs) < op_code_prio (rhs_code))\n \t{\n-\t  pp_character (buffer, '(');\n+\t  pp_left_paren (buffer);\n \t  dump_generic_node (buffer, rhs, spc, flags, false);\n-\t  pp_character (buffer, ')');\n+\t  pp_right_paren (buffer);\n \t}\n       else\n \tdump_generic_node (buffer, rhs, spc, flags, false);\n@@ -370,16 +370,16 @@ dump_binary_rhs (pretty_printer *buffer, gimple gs, int spc, int flags)\n       dump_generic_node (buffer, gimple_assign_rhs1 (gs), spc, flags, false);\n       pp_string (buffer, \", \");\n       dump_generic_node (buffer, gimple_assign_rhs2 (gs), spc, flags, false);\n-      pp_character (buffer, '>');\n+      pp_greater (buffer);\n       break;\n \n     default:\n       if (op_prio (gimple_assign_rhs1 (gs)) <= op_code_prio (code))\n \t{\n-\t  pp_character (buffer, '(');\n+\t  pp_left_paren (buffer);\n \t  dump_generic_node (buffer, gimple_assign_rhs1 (gs), spc, flags,\n \t\t\t     false);\n-\t  pp_character (buffer, ')');\n+\t  pp_right_paren (buffer);\n \t}\n       else\n \tdump_generic_node (buffer, gimple_assign_rhs1 (gs), spc, flags, false);\n@@ -388,10 +388,10 @@ dump_binary_rhs (pretty_printer *buffer, gimple gs, int spc, int flags)\n       pp_space (buffer);\n       if (op_prio (gimple_assign_rhs2 (gs)) <= op_code_prio (code))\n \t{\n-\t  pp_character (buffer, '(');\n+\t  pp_left_paren (buffer);\n \t  dump_generic_node (buffer, gimple_assign_rhs2 (gs), spc, flags,\n \t\t\t     false);\n-\t  pp_character (buffer, ')');\n+\t  pp_right_paren (buffer);\n \t}\n       else\n \tdump_generic_node (buffer, gimple_assign_rhs2 (gs), spc, flags, false);\n@@ -418,7 +418,7 @@ dump_ternary_rhs (pretty_printer *buffer, gimple gs, int spc, int flags)\n       dump_generic_node (buffer, gimple_assign_rhs2 (gs), spc, flags, false);\n       pp_string (buffer, \", \");\n       dump_generic_node (buffer, gimple_assign_rhs3 (gs), spc, flags, false);\n-      pp_character (buffer, '>');\n+      pp_greater (buffer);\n       break;\n \n     case FMA_EXPR:\n@@ -517,7 +517,7 @@ dump_gimple_assign (pretty_printer *buffer, gimple gs, int spc, int flags)\n \t{\n \t  dump_generic_node (buffer, gimple_assign_lhs (gs), spc, flags, false);\n \t  pp_space (buffer);\n-\t  pp_character (buffer, '=');\n+\t  pp_equal (buffer);\n \n \t  if (gimple_assign_nontemporal_move_p (gs))\n \t    pp_string (buffer, \"{nt}\");\n@@ -585,7 +585,7 @@ dump_gimple_call_args (pretty_printer *buffer, gimple gs, int flags)\n     {\n       if (gimple_call_num_args (gs) > 0)\n         {\n-          pp_character (buffer, ',');\n+          pp_comma (buffer);\n           pp_space (buffer);\n         }\n \n@@ -621,9 +621,9 @@ pp_points_to_solution (pretty_printer *buffer, struct pt_solution *pt)\n \t{\n \t  pp_string (buffer, \"D.\");\n \t  pp_decimal_int (buffer, i);\n-\t  pp_character (buffer, ' ');\n+\t  pp_space (buffer);\n \t}\n-      pp_character (buffer, '}');\n+      pp_right_brace (buffer);\n       if (pt->vars_contains_global)\n \tpp_string (buffer, \" (glob)\");\n     }\n@@ -669,7 +669,7 @@ dump_gimple_call (pretty_printer *buffer, gimple gs, int spc, int flags)\n           pp_string (buffer, \", \");\n           dump_gimple_call_args (buffer, gs, flags);\n         }\n-      pp_character (buffer, '>');\n+      pp_greater (buffer);\n     }\n   else\n     {\n@@ -689,7 +689,7 @@ dump_gimple_call (pretty_printer *buffer, gimple gs, int spc, int flags)\n \tprint_call_name (buffer, fn, flags);\n       pp_string (buffer, \" (\");\n       dump_gimple_call_args (buffer, gs, flags);\n-      pp_character (buffer, ')');\n+      pp_right_paren (buffer);\n       if (!(flags & TDF_RHS_ONLY))\n \tpp_semicolon (buffer);\n     }\n@@ -698,7 +698,7 @@ dump_gimple_call (pretty_printer *buffer, gimple gs, int spc, int flags)\n     {\n       pp_string (buffer, \" [static-chain: \");\n       dump_generic_node (buffer, gimple_call_chain (gs), spc, flags, false);\n-      pp_character (buffer, ']');\n+      pp_right_bracket (buffer);\n     }\n \n   if (gimple_call_return_slot_opt_p (gs))\n@@ -786,12 +786,12 @@ dump_gimple_switch (pretty_printer *buffer, gimple gs, int spc, int flags)\n       tree case_label = gimple_switch_label (gs, i);\n       gcc_checking_assert (case_label != NULL_TREE);\n       dump_generic_node (buffer, case_label, spc, flags, false);\n-      pp_character (buffer, ' ');\n+      pp_space (buffer);\n       dump_generic_node (buffer, CASE_LABEL (case_label), spc, flags, false);\n       if (i < gimple_switch_num_labels (gs) - 1)\n         pp_string (buffer, \", \");\n     }\n-  pp_character (buffer, '>');\n+  pp_greater (buffer);\n }\n \n \n@@ -817,7 +817,7 @@ dump_gimple_cond (pretty_printer *buffer, gimple gs, int spc, int flags)\n       dump_generic_node (buffer, gimple_cond_rhs (gs), spc, flags, false);\n       if (!(flags & TDF_RHS_ONLY))\n \t{\n-\t  pp_character (buffer, ')');\n+\t  pp_right_paren (buffer);\n \n \t  if (gimple_cond_true_label (gs))\n \t    {\n@@ -851,7 +851,7 @@ dump_gimple_label (pretty_printer *buffer, gimple gs, int spc, int flags)\n   else\n     {\n       dump_generic_node (buffer, label, spc, flags, false);\n-      pp_character (buffer, ':');\n+      pp_colon (buffer);\n     }\n   if (DECL_NONLOCAL (label))\n     pp_string (buffer, \" [non-local]\");\n@@ -884,7 +884,7 @@ dump_gimple_bind (pretty_printer *buffer, gimple gs, int spc, int flags)\n   if (flags & TDF_RAW)\n     dump_gimple_fmt (buffer, spc, flags, \"%G <\", gs);\n   else\n-    pp_character (buffer, '{');\n+    pp_left_brace (buffer);\n   if (!(flags & TDF_SLIM))\n     {\n       tree var;\n@@ -901,9 +901,9 @@ dump_gimple_bind (pretty_printer *buffer, gimple gs, int spc, int flags)\n   dump_gimple_seq (buffer, gimple_bind_body (gs), spc + 2, flags);\n   newline_and_indent (buffer, spc);\n   if (flags & TDF_RAW)\n-    pp_character (buffer, '>');\n+    pp_greater (buffer);\n   else\n-    pp_character (buffer, '}');\n+    pp_right_brace (buffer);\n }\n \n \n@@ -931,34 +931,34 @@ dump_gimple_try (pretty_printer *buffer, gimple gs, int spc, int flags)\n     {\n       pp_string (buffer, \"try\");\n       newline_and_indent (buffer, spc + 2);\n-      pp_character (buffer, '{');\n+      pp_left_brace (buffer);\n       pp_newline (buffer);\n \n       dump_gimple_seq (buffer, gimple_try_eval (gs), spc + 4, flags);\n       newline_and_indent (buffer, spc + 2);\n-      pp_character (buffer, '}');\n+      pp_right_brace (buffer);\n \n       if (gimple_try_kind (gs) == GIMPLE_TRY_CATCH)\n \t{\n \t  newline_and_indent (buffer, spc);\n \t  pp_string (buffer, \"catch\");\n \t  newline_and_indent (buffer, spc + 2);\n-\t  pp_character (buffer, '{');\n+\t  pp_left_brace (buffer);\n \t}\n       else if (gimple_try_kind (gs) == GIMPLE_TRY_FINALLY)\n \t{\n \t  newline_and_indent (buffer, spc);\n \t  pp_string (buffer, \"finally\");\n \t  newline_and_indent (buffer, spc + 2);\n-\t  pp_character (buffer, '{');\n+\t  pp_left_brace (buffer);\n \t}\n       else\n \tpp_string (buffer, \" <UNKNOWN GIMPLE_TRY> {\");\n \n       pp_newline (buffer);\n       dump_gimple_seq (buffer, gimple_try_cleanup (gs), spc + 4, flags);\n       newline_and_indent (buffer, spc + 2);\n-      pp_character (buffer, '}');\n+      pp_right_brace (buffer);\n     }\n }\n \n@@ -1139,10 +1139,10 @@ dump_gimple_omp_for (pretty_printer *buffer, gimple gs, int spc, int flags)\n \t  switch (gimple_omp_for_cond (gs, i))\n \t    {\n \t    case LT_EXPR:\n-\t      pp_character (buffer, '<');\n+\t      pp_less (buffer);\n \t      break;\n \t    case GT_EXPR:\n-\t      pp_character (buffer, '>');\n+\t      pp_greater (buffer);\n \t      break;\n \t    case LE_EXPR:\n \t      pp_string (buffer, \"<=\");\n@@ -1163,17 +1163,17 @@ dump_gimple_omp_for (pretty_printer *buffer, gimple gs, int spc, int flags)\n \t  pp_string (buffer, \" = \");\n \t  dump_generic_node (buffer, gimple_omp_for_incr (gs, i), spc,\n \t\t\t     flags, false);\n-\t  pp_character (buffer, ')');\n+\t  pp_right_paren (buffer);\n \t}\n \n       if (!gimple_seq_empty_p (gimple_omp_body (gs)))\n \t{\n \t  newline_and_indent (buffer, spc + 2);\n-\t  pp_character (buffer, '{');\n+\t  pp_left_brace (buffer);\n \t  pp_newline (buffer);\n \t  dump_gimple_seq (buffer, gimple_omp_body (gs), spc + 4, flags);\n \t  newline_and_indent (buffer, spc + 2);\n-\t  pp_character (buffer, '}');\n+\t  pp_right_brace (buffer);\n \t}\n     }\n }\n@@ -1194,11 +1194,11 @@ dump_gimple_omp_continue (pretty_printer *buffer, gimple gs, int spc, int flags)\n       pp_string (buffer, \"#pragma omp continue (\");\n       dump_generic_node (buffer, gimple_omp_continue_control_def (gs),\n \t  \t\t spc, flags, false);\n-      pp_character (buffer, ',');\n+      pp_comma (buffer);\n       pp_space (buffer);\n       dump_generic_node (buffer, gimple_omp_continue_control_use (gs),\n \t  \t\t spc, flags, false);\n-      pp_character (buffer, ')');\n+      pp_right_paren (buffer);\n     }\n }\n \n@@ -1221,11 +1221,11 @@ dump_gimple_omp_single (pretty_printer *buffer, gimple gs, int spc, int flags)\n       if (!gimple_seq_empty_p (gimple_omp_body (gs)))\n \t{\n \t  newline_and_indent (buffer, spc + 2);\n-\t  pp_character (buffer, '{');\n+\t  pp_left_brace (buffer);\n \t  pp_newline (buffer);\n \t  dump_gimple_seq (buffer, gimple_omp_body (gs), spc + 4, flags);\n \t  newline_and_indent (buffer, spc + 2);\n-\t  pp_character (buffer, '}');\n+\t  pp_right_brace (buffer);\n \t}\n     }\n }\n@@ -1251,17 +1251,17 @@ dump_gimple_omp_sections (pretty_printer *buffer, gimple gs, int spc,\n \t  pp_string (buffer, \" <\");\n \t  dump_generic_node (buffer, gimple_omp_sections_control (gs), spc,\n \t\t\t     flags, false);\n-\t  pp_character (buffer, '>');\n+\t  pp_greater (buffer);\n \t}\n       dump_omp_clauses (buffer, gimple_omp_sections_clauses (gs), spc, flags);\n       if (!gimple_seq_empty_p (gimple_omp_body (gs)))\n \t{\n \t  newline_and_indent (buffer, spc + 2);\n-\t  pp_character (buffer, '{');\n+\t  pp_left_brace (buffer);\n \t  pp_newline (buffer);\n \t  dump_gimple_seq (buffer, gimple_omp_body (gs), spc + 4, flags);\n \t  newline_and_indent (buffer, spc + 2);\n-\t  pp_character (buffer, '}');\n+\t  pp_right_brace (buffer);\n \t}\n     }\n }\n@@ -1294,11 +1294,11 @@ dump_gimple_omp_block (pretty_printer *buffer, gimple gs, int spc, int flags)\n       if (!gimple_seq_empty_p (gimple_omp_body (gs)))\n \t{\n \t  newline_and_indent (buffer, spc + 2);\n-\t  pp_character (buffer, '{');\n+\t  pp_left_brace (buffer);\n \t  pp_newline (buffer);\n \t  dump_gimple_seq (buffer, gimple_omp_body (gs), spc + 4, flags);\n \t  newline_and_indent (buffer, spc + 2);\n-\t  pp_character (buffer, '}');\n+\t  pp_right_brace (buffer);\n \t}\n     }\n }\n@@ -1320,16 +1320,16 @@ dump_gimple_omp_critical (pretty_printer *buffer, gimple gs, int spc,\n \t  pp_string (buffer, \" (\");\n \t  dump_generic_node (buffer, gimple_omp_critical_name (gs), spc,\n \t\t\t     flags, false);\n-\t  pp_character (buffer, ')');\n+\t  pp_right_paren (buffer);\n \t}\n       if (!gimple_seq_empty_p (gimple_omp_body (gs)))\n \t{\n \t  newline_and_indent (buffer, spc + 2);\n-\t  pp_character (buffer, '{');\n+\t  pp_left_brace (buffer);\n \t  pp_newline (buffer);\n \t  dump_gimple_seq (buffer, gimple_omp_body (gs), spc + 4, flags);\n \t  newline_and_indent (buffer, spc + 2);\n-\t  pp_character (buffer, '}');\n+\t  pp_right_brace (buffer);\n \t}\n     }\n }\n@@ -1427,12 +1427,12 @@ dump_gimple_transaction (pretty_printer *buffer, gimple gs, int spc, int flags)\n       if (!gimple_seq_empty_p (gimple_transaction_body (gs)))\n \t{\n \t  newline_and_indent (buffer, spc + 2);\n-\t  pp_character (buffer, '{');\n+\t  pp_left_brace (buffer);\n \t  pp_newline (buffer);\n \t  dump_gimple_seq (buffer, gimple_transaction_body (gs),\n \t\t\t   spc + 4, flags);\n \t  newline_and_indent (buffer, spc + 2);\n-\t  pp_character (buffer, '}');\n+\t  pp_right_brace (buffer);\n \t}\n     }\n }\n@@ -1508,7 +1508,7 @@ dump_gimple_asm (pretty_printer *buffer, gimple gs, int spc, int flags)\n \t}\n \n       newline_and_indent (buffer, spc);\n-      pp_character (buffer, '>');\n+      pp_greater (buffer);\n     }\n   else\n     {\n@@ -1634,7 +1634,7 @@ dump_gimple_phi (pretty_printer *buffer, gimple phi, int spc, int flags)\n \t  expanded_location xloc;\n \n \t  xloc = expand_location (gimple_phi_arg_location (phi, i));\n-\t  pp_character (buffer, '[');\n+\t  pp_left_bracket (buffer);\n \t  if (xloc.file)\n \t    {\n \t      pp_string (buffer, xloc.file);\n@@ -1647,13 +1647,13 @@ dump_gimple_phi (pretty_printer *buffer, gimple phi, int spc, int flags)\n \t}\n       dump_generic_node (buffer, gimple_phi_arg_def (phi, i), spc, flags,\n \t\t\t false);\n-      pp_character (buffer, '(');\n+      pp_left_paren (buffer);\n       pp_decimal_int (buffer, gimple_phi_arg_edge (phi, i)->src->index);\n-      pp_character (buffer, ')');\n+      pp_right_paren (buffer);\n       if (i < gimple_phi_num_args (phi) - 1)\n \tpp_string (buffer, \", \");\n     }\n-  pp_character (buffer, '>');\n+  pp_greater (buffer);\n }\n \n \n@@ -1696,11 +1696,11 @@ dump_gimple_omp_parallel (pretty_printer *buffer, gimple gs, int spc,\n       if (body && gimple_code (gimple_seq_first_stmt (body)) != GIMPLE_BIND)\n \t{\n \t  newline_and_indent (buffer, spc + 2);\n-\t  pp_character (buffer, '{');\n+\t  pp_left_brace (buffer);\n \t  pp_newline (buffer);\n \t  dump_gimple_seq (buffer, body, spc + 4, flags);\n \t  newline_and_indent (buffer, spc + 2);\n-\t  pp_character (buffer, '}');\n+\t  pp_right_brace (buffer);\n \t}\n       else if (body)\n \t{\n@@ -1753,11 +1753,11 @@ dump_gimple_omp_task (pretty_printer *buffer, gimple gs, int spc,\n       if (body && gimple_code (gimple_seq_first_stmt (body)) != GIMPLE_BIND)\n \t{\n \t  newline_and_indent (buffer, spc + 2);\n-\t  pp_character (buffer, '{');\n+\t  pp_left_brace (buffer);\n \t  pp_newline (buffer);\n \t  dump_gimple_seq (buffer, body, spc + 4, flags);\n \t  newline_and_indent (buffer, spc + 2);\n-\t  pp_character (buffer, '}');\n+\t  pp_right_brace (buffer);\n \t}\n       else if (body)\n \t{\n@@ -1791,9 +1791,9 @@ dump_gimple_omp_atomic_load (pretty_printer *buffer, gimple gs, int spc,\n       dump_generic_node (buffer, gimple_omp_atomic_load_lhs (gs),\n \t  \t\t spc, flags, false);\n       pp_space (buffer);\n-      pp_character (buffer, '=');\n+      pp_equal (buffer);\n       pp_space (buffer);\n-      pp_character (buffer, '*');\n+      pp_star (buffer);\n       dump_generic_node (buffer, gimple_omp_atomic_load_rhs (gs),\n \t  \t\t spc, flags, false);\n     }\n@@ -1817,10 +1817,10 @@ dump_gimple_omp_atomic_store (pretty_printer *buffer, gimple gs, int spc,\n       pp_string (buffer, \"#pragma omp atomic_store \");\n       if (gimple_omp_atomic_need_value_p (gs))\n \tpp_string (buffer, \"[needed] \");\n-      pp_character (buffer, '(');\n+      pp_left_paren (buffer);\n       dump_generic_node (buffer, gimple_omp_atomic_store_val (gs),\n \t  \t\t spc, flags, false);\n-      pp_character (buffer, ')');\n+      pp_right_paren (buffer);\n     }\n }\n \n@@ -1844,14 +1844,14 @@ dump_gimple_mem_ops (pretty_printer *buffer, gimple gs, int spc, int flags)\n       dump_generic_node (buffer, vdef, spc + 2, flags, false);\n       pp_string (buffer, \" = VDEF <\");\n       dump_generic_node (buffer, vuse, spc + 2, flags, false);\n-      pp_character (buffer, '>');\n+      pp_greater (buffer);\n       newline_and_indent (buffer, spc);\n     }\n   else if (vuse != NULL_TREE)\n     {\n       pp_string (buffer, \"# VUSE <\");\n       dump_generic_node (buffer, vuse, spc + 2, flags, false);\n-      pp_character (buffer, '>');\n+      pp_greater (buffer);\n       newline_and_indent (buffer, spc);\n     }\n }\n@@ -1874,7 +1874,7 @@ pp_gimple_stmt_1 (pretty_printer *buffer, gimple gs, int spc, int flags)\n   if ((flags & TDF_LINENO) && gimple_has_location (gs))\n     {\n       expanded_location xloc = expand_location (gimple_location (gs));\n-      pp_character (buffer, '[');\n+      pp_left_bracket (buffer);\n       if (xloc.file)\n \t{\n \t  pp_string (buffer, xloc.file);\n@@ -2155,12 +2155,12 @@ pp_cfg_jump (pretty_printer *buffer, basic_block bb)\n \n   pp_string (buffer, \"goto <bb \");\n   pp_decimal_int (buffer, bb->index);\n-  pp_character (buffer, '>');\n+  pp_greater (buffer);\n   if (stmt && gimple_code (stmt) == GIMPLE_LABEL)\n     {\n       pp_string (buffer, \" (\");\n       dump_generic_node (buffer, gimple_label_label (stmt), 0, 0, false);\n-      pp_character (buffer, ')');\n+      pp_right_paren (buffer);\n       pp_semicolon (buffer);\n     }\n   else\n@@ -2215,7 +2215,7 @@ dump_implicit_edges (pretty_printer *buffer, basic_block bb, int indent,\n \t{\n \t  expanded_location goto_xloc;\n \t  goto_xloc = expand_location (e->goto_locus);\n-\t  pp_character (buffer, '[');\n+\t  pp_left_bracket (buffer);\n \t  if (goto_xloc.file)\n \t    {\n \t      pp_string (buffer, goto_xloc.file);\n@@ -2304,7 +2304,7 @@ gimple_dump_bb_for_graph (pretty_printer *pp, basic_block bb)\n       if (!virtual_operand_p (gimple_phi_result (phi))\n \t  || (dump_flags & TDF_VOPS))\n \t{\n-\t  pp_character (pp, '|');\n+\t  pp_bar (pp);\n \t  pp_write_text_to_stream (pp);\n \t  pp_string (pp, \"# \");\n \t  pp_gimple_stmt_1 (pp, phi, 0, dump_flags);\n@@ -2316,7 +2316,7 @@ gimple_dump_bb_for_graph (pretty_printer *pp, basic_block bb)\n   for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n     {\n       gimple stmt = gsi_stmt (gsi);\n-      pp_character (pp, '|');\n+      pp_bar (pp);\n       pp_write_text_to_stream (pp);\n       pp_gimple_stmt_1 (pp, stmt, 0, dump_flags);\n       pp_newline (pp);"}, {"sha": "5cfc27e7922b4da20c0cb2fe6d2077eafc11c891", "filename": "gcc/graph.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07838b1363318105e615be10b016099c557927d9/gcc%2Fgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07838b1363318105e615be10b016099c557927d9/gcc%2Fgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraph.c?ref=07838b1363318105e615be10b016099c557927d9", "patch": "@@ -109,10 +109,10 @@ draw_cfg_node (pretty_printer *pp, int funcdef_no, basic_block bb)\n     pp_string (pp, \"EXIT\");\n   else\n     {\n-      pp_character (pp, '{');\n+      pp_left_brace (pp);\n       pp_write_text_to_stream (pp);\n       dump_bb_for_graph (pp, bb);\n-      pp_character (pp, '}');\n+      pp_right_brace (pp);\n     }\n \n   pp_string (pp, \"\\\"];\\n\\n\");"}, {"sha": "fbf545b466a313ea0c2079091635a96877c54fbf", "filename": "gcc/langhooks.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07838b1363318105e615be10b016099c557927d9/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07838b1363318105e615be10b016099c557927d9/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=07838b1363318105e615be10b016099c557927d9", "patch": "@@ -446,7 +446,7 @@ lhd_print_error_function (diagnostic_context *context, const char *file,\n \t      if (fndecl)\n \t\t{\n \t\t  expanded_location s = expand_location (*locus);\n-\t\t  pp_character (context->printer, ',');\n+\t\t  pp_comma (context->printer);\n \t\t  pp_newline (context->printer);\n \t\t  if (s.file != NULL)\n \t\t    {\n@@ -467,7 +467,7 @@ lhd_print_error_function (diagnostic_context *context, const char *file,\n \t\t\t       identifier_to_locale (lang_hooks.decl_printable_name (fndecl, 2)));\n \t\t}\n \t    }\n-\t  pp_character (context->printer, ':');\n+\t  pp_colon (context->printer);\n \t}\n \n       diagnostic_set_last_function (context, diagnostic);"}, {"sha": "f72c23598106f2462995b9620aafb8aaf4ae9062", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07838b1363318105e615be10b016099c557927d9/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07838b1363318105e615be10b016099c557927d9/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=07838b1363318105e615be10b016099c557927d9", "patch": "@@ -238,7 +238,7 @@ pp_base_get_prefix (const pretty_printer *pp) { return pp->prefix; }\n #define pp_left_brace(PP)       pp_character (PP, '{')\n #define pp_right_brace(PP)      pp_character (PP, '}')\n #define pp_semicolon(PP)        pp_character (PP, ';')\n-#define pp_comma(PP)            pp_string (PP, \", \")\n+#define pp_comma(PP)            pp_character (PP, ',')\n #define pp_dot(PP)              pp_character (PP, '.')\n #define pp_colon(PP)            pp_character (PP, ':')\n #define pp_colon_colon(PP)      pp_string (PP, \"::\")\n@@ -260,6 +260,7 @@ pp_base_get_prefix (const pretty_printer *pp) { return pp->prefix; }\n #define pp_quote(PP)            pp_character (PP, '\\'')\n #define pp_backquote(PP)        pp_character (PP, '`')\n #define pp_doublequote(PP)      pp_character (PP, '\"')\n+#define pp_underscore(PP)       pp_character (PP, '_')\n #define pp_newline_and_flush(PP)     \\\n   do {                               \\\n     pp_newline (PP);                 \\"}, {"sha": "d11a3858378bd550494e7c4ca9f0ea204c3bead6", "filename": "gcc/sched-vis.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07838b1363318105e615be10b016099c557927d9/gcc%2Fsched-vis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07838b1363318105e615be10b016099c557927d9/gcc%2Fsched-vis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-vis.c?ref=07838b1363318105e615be10b016099c557927d9", "patch": "@@ -347,11 +347,11 @@ print_exp (pretty_printer *pp, const_rtx x, int verbose)\n \tpp_string (pp, \"unspec\");\n \tif (GET_CODE (x) == UNSPEC_VOLATILE)\n \t  pp_string (pp, \"/v\");\n-\tpp_character (pp, '[');\n+\tpp_left_bracket (pp);\n \tfor (i = 0; i < XVECLEN (x, 0); i++)\n \t  {\n \t    if (i != 0)\n-\t      pp_character (pp, ',');\n+\t      pp_comma (pp);\n \t    print_pattern (pp, XVECEXP (x, 0, i), verbose);\n \t  }\n \tpp_string (pp, \"] \");\n@@ -393,7 +393,7 @@ print_exp (pretty_printer *pp, const_rtx x, int verbose)\n   if (fun)\n     {\n       pp_string (pp, fun);\n-      pp_character (pp, '(');\n+      pp_left_paren (pp);\n     }\n \n   for (i = 0; i < 4; i++)\n@@ -404,13 +404,13 @@ print_exp (pretty_printer *pp, const_rtx x, int verbose)\n       if (op[i])\n \t{\n \t  if (fun && i != 0)\n-\t    pp_character (pp, ',');\n+\t    pp_comma (pp);\n \t  print_value (pp, op[i], verbose);\n \t}\n     }\n \n   if (fun)\n-    pp_character (pp, ')');\n+    pp_right_paren (pp);\n }\t\t/* print_exp */\n \n /* Prints rtxes, I customarily classified as values.  They're constants,\n@@ -462,13 +462,13 @@ print_value (pretty_printer *pp, const_rtx x, int verbose)\n     case STRICT_LOW_PART:\n       pp_printf (pp, \"%s(\", GET_RTX_NAME (GET_CODE (x)));\n       print_value (pp, XEXP (x, 0), verbose);\n-      pp_character (pp, ')');\n+      pp_right_paren (pp);\n       break;\n     case REG:\n       if (REGNO (x) < FIRST_PSEUDO_REGISTER)\n \t{\n \t  if (ISDIGIT (reg_names[REGNO (x)][0]))\n-\t    pp_character (pp, '%');\n+\t    pp_modulo (pp);\n \t  pp_string (pp, reg_names[REGNO (x)]);\n \t}\n       else\n@@ -486,9 +486,9 @@ print_value (pretty_printer *pp, const_rtx x, int verbose)\n       pp_string (pp, GET_RTX_NAME (GET_CODE (x)));\n       break;\n     case MEM:\n-      pp_character (pp, '[');\n+      pp_left_bracket (pp);\n       print_value (pp, XEXP (x, 0), verbose);\n-      pp_character (pp, ']');\n+      pp_right_bracket (pp);\n       break;\n     case DEBUG_EXPR:\n       pp_printf (pp, \"D#%i\", DEBUG_TEMP_UID (DEBUG_EXPR_TREE_DECL (x)));\n@@ -514,7 +514,7 @@ print_pattern (pretty_printer *pp, const_rtx x, int verbose)\n     {\n     case SET:\n       print_value (pp, SET_DEST (x), verbose);\n-      pp_character (pp, '=');\n+      pp_equal (pp);\n       print_value (pp, SET_SRC (x), verbose);\n       break;\n     case RETURN:\n@@ -535,14 +535,14 @@ print_pattern (pretty_printer *pp, const_rtx x, int verbose)\n       print_value (pp, PAT_VAR_LOCATION_LOC (x), verbose);\n       break;\n     case COND_EXEC:\n-      pp_character (pp, '(');\n+      pp_left_paren (pp);\n       if (GET_CODE (COND_EXEC_TEST (x)) == NE\n \t  && XEXP (COND_EXEC_TEST (x), 1) == const0_rtx)\n \tprint_value (pp, XEXP (COND_EXEC_TEST (x), 0), verbose);\n       else if (GET_CODE (COND_EXEC_TEST (x)) == EQ\n \t       && XEXP (COND_EXEC_TEST (x), 1) == const0_rtx)\n \t{\n-\t  pp_character (pp, '!');\n+\t  pp_exclamation (pp);\n \t  print_value (pp, XEXP (COND_EXEC_TEST (x), 0), verbose);\n \t}\n       else\n@@ -554,13 +554,13 @@ print_pattern (pretty_printer *pp, const_rtx x, int verbose)\n       {\n \tint i;\n \n-\tpp_character (pp, '{');\n+\tpp_left_brace (pp);\n \tfor (i = 0; i < XVECLEN (x, 0); i++)\n \t  {\n \t    print_pattern (pp, XVECEXP (x, 0, i), verbose);\n-\t    pp_character (pp, ';');\n+\t    pp_semicolon (pp);\n \t  }\n-\tpp_character (pp, '}');\n+\tpp_right_brace (pp);\n       }\n       break;\n     case SEQUENCE:\n@@ -588,10 +588,10 @@ print_pattern (pretty_printer *pp, const_rtx x, int verbose)\n \t    for (int i = 0; i < XVECLEN (x, 0); i++)\n \t      {\n \t\tprint_pattern (pp, XVECEXP (x, 0, i), verbose);\n-\t\tpp_character (pp, ';');\n+\t\tpp_semicolon (pp);\n \t      }\n \t  }\n-\tpp_character (pp, '}');\n+\tpp_right_brace (pp);\n       }\n       break;\n     case ASM_INPUT:\n@@ -726,9 +726,9 @@ print_insn (pretty_printer *pp, const_rtx x, int verbose)\n \n \t  case NOTE_INSN_VAR_LOCATION:\n \t  case NOTE_INSN_CALL_ARG_LOCATION:\n-\t    pp_character (pp, '{');\n+\t    pp_left_brace (pp);\n \t    print_pattern (pp, NOTE_VAR_LOCATION (x), verbose);\n-\t    pp_character (pp, '}');\n+\t    pp_right_brace (pp);\n \t    break;\n \n \t  default:\n@@ -839,7 +839,7 @@ rtl_dump_bb_for_graph (pretty_printer *pp, basic_block bb)\n     {\n       if (! first)\n \t{\n-\t  pp_character (pp, '|');\n+\t  pp_bar (pp);\n \t  pp_write_text_to_stream (pp);\n \t}\n       first = false;"}, {"sha": "d31d97fd1646f8ddeb192e3007464bd1e4a1b0e6", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 109, "deletions": 110, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07838b1363318105e615be10b016099c557927d9/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07838b1363318105e615be10b016099c557927d9/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=07838b1363318105e615be10b016099c557927d9", "patch": "@@ -229,15 +229,15 @@ dump_function_declaration (pretty_printer *buffer, tree node,\n   tree arg;\n \n   pp_space (buffer);\n-  pp_character (buffer, '(');\n+  pp_left_paren (buffer);\n \n   /* Print the argument types.  */\n   arg = TYPE_ARG_TYPES (node);\n   while (arg && arg != void_list_node && arg != error_mark_node)\n     {\n       if (wrote_arg)\n \t{\n-\t  pp_character (buffer, ',');\n+\t  pp_comma (buffer);\n \t  pp_space (buffer);\n \t}\n       wrote_arg = true;\n@@ -253,15 +253,15 @@ dump_function_declaration (pretty_printer *buffer, tree node,\n     pp_string (buffer, \", ...\");\n   /* Avoid printing any arg for unprototyped functions.  */\n \n-  pp_character (buffer, ')');\n+  pp_right_paren (buffer);\n }\n \n /* Dump the domain associated with an array.  */\n \n static void\n dump_array_domain (pretty_printer *buffer, tree domain, int spc, int flags)\n {\n-  pp_character (buffer, '[');\n+  pp_left_bracket (buffer);\n   if (domain)\n     {\n       tree min = TYPE_MIN_VALUE (domain);\n@@ -275,14 +275,14 @@ dump_array_domain (pretty_printer *buffer, tree domain, int spc, int flags)\n \t{\n \t  if (min)\n \t    dump_generic_node (buffer, min, spc, flags, false);\n-\t  pp_character (buffer, ':');\n+\t  pp_colon (buffer);\n \t  if (max)\n \t    dump_generic_node (buffer, max, spc, flags, false);\n \t}\n     }\n   else\n     pp_string (buffer, \"<unknown>\");\n-  pp_character (buffer, ']');\n+  pp_right_bracket (buffer);\n }\n \n \n@@ -316,33 +316,33 @@ dump_omp_clause (pretty_printer *buffer, tree clause, int spc, int flags)\n       goto print_remap;\n   print_remap:\n       pp_string (buffer, name);\n-      pp_character (buffer, '(');\n+      pp_left_paren (buffer);\n       dump_generic_node (buffer, OMP_CLAUSE_DECL (clause),\n \t  spc, flags, false);\n-      pp_character (buffer, ')');\n+      pp_right_paren (buffer);\n       break;\n \n     case OMP_CLAUSE_REDUCTION:\n       pp_string (buffer, \"reduction(\");\n       pp_string (buffer, op_symbol_code (OMP_CLAUSE_REDUCTION_CODE (clause)));\n-      pp_character (buffer, ':');\n+      pp_colon (buffer);\n       dump_generic_node (buffer, OMP_CLAUSE_DECL (clause),\n \t  spc, flags, false);\n-      pp_character (buffer, ')');\n+      pp_right_paren (buffer);\n       break;\n \n     case OMP_CLAUSE_IF:\n       pp_string (buffer, \"if(\");\n       dump_generic_node (buffer, OMP_CLAUSE_IF_EXPR (clause),\n \t  spc, flags, false);\n-      pp_character (buffer, ')');\n+      pp_right_paren (buffer);\n       break;\n \n     case OMP_CLAUSE_NUM_THREADS:\n       pp_string (buffer, \"num_threads(\");\n       dump_generic_node (buffer, OMP_CLAUSE_NUM_THREADS_EXPR (clause),\n \t  spc, flags, false);\n-      pp_character (buffer, ')');\n+      pp_right_paren (buffer);\n       break;\n \n     case OMP_CLAUSE_NOWAIT:\n@@ -373,7 +373,7 @@ dump_omp_clause (pretty_printer *buffer, tree clause, int spc, int flags)\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n-      pp_character (buffer, ')');\n+      pp_right_paren (buffer);\n       break;\n \n     case OMP_CLAUSE_SCHEDULE:\n@@ -400,12 +400,12 @@ dump_omp_clause (pretty_printer *buffer, tree clause, int spc, int flags)\n \t}\n       if (OMP_CLAUSE_SCHEDULE_CHUNK_EXPR (clause))\n \t{\n-\t  pp_character (buffer, ',');\n+\t  pp_comma (buffer);\n \t  dump_generic_node (buffer,\n \t      OMP_CLAUSE_SCHEDULE_CHUNK_EXPR (clause),\n \t      spc, flags, false);\n \t}\n-      pp_character (buffer, ')');\n+      pp_right_paren (buffer);\n       break;\n \n     case OMP_CLAUSE_UNTIED:\n@@ -417,14 +417,14 @@ dump_omp_clause (pretty_printer *buffer, tree clause, int spc, int flags)\n       dump_generic_node (buffer,\n \t\t\t OMP_CLAUSE_COLLAPSE_EXPR (clause),\n \t\t\t spc, flags, false);\n-      pp_character (buffer, ')');\n+      pp_right_paren (buffer);\n       break;\n \n     case OMP_CLAUSE_FINAL:\n       pp_string (buffer, \"final(\");\n       dump_generic_node (buffer, OMP_CLAUSE_FINAL_EXPR (clause),\n \t  spc, flags, false);\n-      pp_character (buffer, ')');\n+      pp_right_paren (buffer);\n       break;\n \n     case OMP_CLAUSE_MERGEABLE:\n@@ -467,7 +467,7 @@ dump_location (pretty_printer *buffer, location_t loc)\n {\n   expanded_location xloc = expand_location (loc);\n \n-  pp_character (buffer, '[');\n+  pp_left_bracket (buffer);\n   if (xloc.file)\n     {\n       pp_string (buffer, xloc.file);\n@@ -638,7 +638,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t  node = TREE_CHAIN (node);\n \t  if (node && TREE_CODE (node) == TREE_LIST)\n \t    {\n-\t      pp_character (buffer, ',');\n+\t      pp_comma (buffer);\n \t      pp_space (buffer);\n \t    }\n \t}\n@@ -658,7 +658,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t      {\n \t\tdump_generic_node (buffer, TREE_VEC_ELT (node, i), spc, flags,\n \t\t\t\t   false);\n-\t\tpp_character (buffer, ',');\n+\t\tpp_comma (buffer);\n \t\tpp_space (buffer);\n \t      }\n \t    dump_generic_node (buffer, TREE_VEC_ELT (node, len - 1), spc,\n@@ -717,7 +717,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t    else if (TREE_CODE (node) == VECTOR_TYPE)\n \t      {\n \t\tpp_string (buffer, \"vector\");\n-\t\tpp_character (buffer, '(');\n+\t\tpp_left_paren (buffer);\n \t\tpp_wide_integer (buffer, TYPE_VECTOR_SUBPARTS (node));\n \t\tpp_string (buffer, \") \");\n \t\tdump_generic_node (buffer, TREE_TYPE (node), spc, flags, false);\n@@ -801,7 +801,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \n \t  dump_generic_node (buffer, TREE_TYPE (fnode), spc, flags, false);\n \t  pp_space (buffer);\n-\t  pp_character (buffer, '(');\n+\t  pp_left_paren (buffer);\n \t  pp_string (buffer, str);\n \t  if (TYPE_NAME (node) && DECL_NAME (TYPE_NAME (node)))\n \t    dump_decl_name (buffer, TYPE_NAME (node), flags);\n@@ -810,7 +810,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t  else\n \t    pp_printf (buffer, \"<T%x>\", TYPE_UID (node));\n \n-\t  pp_character (buffer, ')');\n+\t  pp_right_paren (buffer);\n \t  dump_function_declaration (buffer, fnode, spc, flags);\n \t}\n       else\n@@ -1045,7 +1045,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \n \t  if (tree_int_cst_sgn (val) < 0)\n \t    {\n-\t      pp_character (buffer, '-');\n+\t      pp_minus (buffer);\n \t      high = ~high + !low;\n \t      low = -low;\n \t    }\n@@ -1241,18 +1241,18 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t  str = \"->\";\n \t}\n       if (op_prio (op0) < op_prio (node))\n-\tpp_character (buffer, '(');\n+\tpp_left_paren (buffer);\n       dump_generic_node (buffer, op0, spc, flags, false);\n       if (op_prio (op0) < op_prio (node))\n-\tpp_character (buffer, ')');\n+\tpp_right_paren (buffer);\n       pp_string (buffer, str);\n       dump_generic_node (buffer, TREE_OPERAND (node, 1), spc, flags, false);\n       op0 = component_ref_field_offset (node);\n       if (op0 && TREE_CODE (op0) != INTEGER_CST)\n \t{\n \t  pp_string (buffer, \"{off: \");\n \t      dump_generic_node (buffer, op0, spc, flags, false);\n-\t      pp_character (buffer, '}');\n+\t      pp_right_brace (buffer);\n \t}\n       break;\n \n@@ -1270,15 +1270,15 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n     case ARRAY_RANGE_REF:\n       op0 = TREE_OPERAND (node, 0);\n       if (op_prio (op0) < op_prio (node))\n-\tpp_character (buffer, '(');\n+\tpp_left_paren (buffer);\n       dump_generic_node (buffer, op0, spc, flags, false);\n       if (op_prio (op0) < op_prio (node))\n-\tpp_character (buffer, ')');\n-      pp_character (buffer, '[');\n+\tpp_right_paren (buffer);\n+      pp_left_bracket (buffer);\n       dump_generic_node (buffer, TREE_OPERAND (node, 1), spc, flags, false);\n       if (TREE_CODE (node) == ARRAY_RANGE_REF)\n \tpp_string (buffer, \" ...\");\n-      pp_character (buffer, ']');\n+      pp_right_bracket (buffer);\n \n       op0 = array_ref_low_bound (node);\n       op1 = array_ref_element_size (node);\n@@ -1291,7 +1291,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t  dump_generic_node (buffer, op0, spc, flags, false);\n \t  pp_string (buffer, \" sz: \");\n \t  dump_generic_node (buffer, op1, spc, flags, false);\n-\t  pp_character (buffer, '}');\n+\t  pp_right_brace (buffer);\n \t}\n       break;\n \n@@ -1302,7 +1302,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \tbool is_struct_init = false;\n \tbool is_array_init = false;\n \tdouble_int curidx = double_int_zero;\n-\tpp_character (buffer, '{');\n+\tpp_left_brace (buffer);\n \tif (TREE_CLOBBER_P (node))\n \t  pp_string (buffer, \"CLOBBER\");\n \telse if (TREE_CODE (TREE_TYPE (node)) == RECORD_TYPE\n@@ -1324,15 +1324,15 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t      {\n \t\tif (is_struct_init)\n \t\t  {\n-\t\t    pp_character (buffer, '.');\n+\t\t    pp_dot (buffer);\n \t\t    dump_generic_node (buffer, field, spc, flags, false);\n-\t\t    pp_character (buffer, '=');\n+\t\t    pp_equal (buffer);\n \t\t  }\n \t\telse if (is_array_init\n \t\t\t && (TREE_CODE (field) != INTEGER_CST\n \t\t\t     || tree_to_double_int (field) != curidx))\n \t\t  {\n-\t\t    pp_character (buffer, '[');\n+\t\t    pp_left_bracket (buffer);\n \t\t    if (TREE_CODE (field) == RANGE_EXPR)\n \t\t      {\n \t\t\tdump_generic_node (buffer, TREE_OPERAND (field, 0), spc,\n@@ -1361,11 +1361,11 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t\tdump_generic_node (buffer, val, spc, flags, false);\n \t    if (ix != vec_safe_length (CONSTRUCTOR_ELTS (node)) - 1)\n \t      {\n-\t\tpp_character (buffer, ',');\n+\t\tpp_comma (buffer);\n \t\tpp_space (buffer);\n \t      }\n \t  }\n-\tpp_character (buffer, '}');\n+\tpp_right_brace (buffer);\n       }\n       break;\n \n@@ -1384,7 +1384,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t  newline_and_indent (buffer, spc);\n \telse\n \t  {\n-\t    pp_character (buffer, ',');\n+\t    pp_comma (buffer);\n \t    pp_space (buffer);\n \t  }\n \n@@ -1398,7 +1398,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t      newline_and_indent (buffer, spc);\n \t    else\n \t      {\n-\t        pp_character (buffer, ',');\n+\t        pp_comma (buffer);\n \t        pp_space (buffer);\n \t      }\n \t  }\n@@ -1434,7 +1434,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags,\n \t  \t\t false);\n       pp_space (buffer);\n-      pp_character (buffer, '=');\n+      pp_equal (buffer);\n       pp_space (buffer);\n       dump_generic_node (buffer, TREE_OPERAND (node, 1), spc, flags,\n \t  \t\t false);\n@@ -1443,10 +1443,10 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n     case TARGET_EXPR:\n       pp_string (buffer, \"TARGET_EXPR <\");\n       dump_generic_node (buffer, TARGET_EXPR_SLOT (node), spc, flags, false);\n-      pp_character (buffer, ',');\n+      pp_comma (buffer);\n       pp_space (buffer);\n       dump_generic_node (buffer, TARGET_EXPR_INITIAL (node), spc, flags, false);\n-      pp_character (buffer, '>');\n+      pp_greater (buffer);\n       break;\n \n     case DECL_EXPR:\n@@ -1459,7 +1459,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t{\n \t  pp_string (buffer, \"if (\");\n \t  dump_generic_node (buffer, COND_EXPR_COND (node), spc, flags, false);\n-\t  pp_character (buffer, ')');\n+\t  pp_right_paren (buffer);\n \t  /* The lowered cond_exprs should always be printed in full.  */\n \t  if (COND_EXPR_THEN (node)\n \t      && (IS_EMPTY_STMT (COND_EXPR_THEN (node))\n@@ -1484,12 +1484,12 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t      if (COND_EXPR_THEN (node))\n \t\t{\n \t\t  newline_and_indent (buffer, spc+2);\n-\t\t  pp_character (buffer, '{');\n+\t\t  pp_left_brace (buffer);\n \t\t  newline_and_indent (buffer, spc+4);\n \t\t  dump_generic_node (buffer, COND_EXPR_THEN (node), spc+4,\n \t\t\t\t     flags, true);\n \t\t  newline_and_indent (buffer, spc+2);\n-\t\t  pp_character (buffer, '}');\n+\t\t  pp_right_brace (buffer);\n \t\t}\n \n \t      /* Output COND_EXPR_ELSE.  */\n@@ -1499,12 +1499,12 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t\t  newline_and_indent (buffer, spc);\n \t\t  pp_string (buffer, \"else\");\n \t\t  newline_and_indent (buffer, spc+2);\n-\t\t  pp_character (buffer, '{');\n+\t\t  pp_left_brace (buffer);\n \t\t  newline_and_indent (buffer, spc+4);\n \t\t  dump_generic_node (buffer, COND_EXPR_ELSE (node), spc+4,\n \t\t\t             flags, true);\n \t\t  newline_and_indent (buffer, spc+2);\n-\t\t  pp_character (buffer, '}');\n+\t\t  pp_right_brace (buffer);\n \t\t}\n \t    }\n \t  is_expr = false;\n@@ -1513,18 +1513,18 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t{\n \t  dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n \t  pp_space (buffer);\n-\t  pp_character (buffer, '?');\n+\t  pp_question (buffer);\n \t  pp_space (buffer);\n \t  dump_generic_node (buffer, TREE_OPERAND (node, 1), spc, flags, false);\n \t  pp_space (buffer);\n-\t  pp_character (buffer, ':');\n+\t  pp_colon (buffer);\n \t  pp_space (buffer);\n \t  dump_generic_node (buffer, TREE_OPERAND (node, 2), spc, flags, false);\n \t}\n       break;\n \n     case BIND_EXPR:\n-      pp_character (buffer, '{');\n+      pp_left_brace (buffer);\n       if (!(flags & TDF_SLIM))\n \t{\n \t  if (BIND_EXPR_VARS (node))\n@@ -1541,7 +1541,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t  newline_and_indent (buffer, spc+2);\n \t  dump_generic_node (buffer, BIND_EXPR_BODY (node), spc+2, flags, true);\n \t  newline_and_indent (buffer, spc);\n-\t  pp_character (buffer, '}');\n+\t  pp_right_brace (buffer);\n \t}\n       is_expr = false;\n       break;\n@@ -1551,7 +1551,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \n       /* Print parameters.  */\n       pp_space (buffer);\n-      pp_character (buffer, '(');\n+      pp_left_paren (buffer);\n       {\n \ttree arg;\n \tcall_expr_arg_iterator iter;\n@@ -1560,7 +1560,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t    dump_generic_node (buffer, arg, spc, flags, false);\n \t    if (more_call_expr_args_p (&iter))\n \t      {\n-\t\tpp_character (buffer, ',');\n+\t\tpp_comma (buffer);\n \t\tpp_space (buffer);\n \t      }\n \t  }\n@@ -1569,19 +1569,19 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t{\n \t  if (call_expr_nargs (node) > 0)\n \t    {\n-\t      pp_character (buffer, ',');\n+\t      pp_comma (buffer);\n \t      pp_space (buffer);\n \t    }\n \t  pp_string (buffer, \"__builtin_va_arg_pack ()\");\n \t}\n-      pp_character (buffer, ')');\n+      pp_right_paren (buffer);\n \n       op1 = CALL_EXPR_STATIC_CHAIN (node);\n       if (op1)\n \t{\n \t  pp_string (buffer, \" [static-chain: \");\n \t  dump_generic_node (buffer, op1, spc, flags, false);\n-\t  pp_character (buffer, ']');\n+\t  pp_right_bracket (buffer);\n \t}\n \n       if (CALL_EXPR_RETURN_SLOT_OPT (node))\n@@ -1603,7 +1603,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n     case PLACEHOLDER_EXPR:\n       pp_string (buffer, \"<PLACEHOLDER_EXPR \");\n       dump_generic_node (buffer, TREE_TYPE (node), spc, flags, false);\n-      pp_character (buffer, '>');\n+      pp_greater (buffer);\n       break;\n \n       /* Binary arithmetic and logic expressions.  */\n@@ -1662,9 +1662,9 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t   keep semantics of the tree representation.  */\n \tif (op_prio (op0) <= op_prio (node))\n \t  {\n-\t    pp_character (buffer, '(');\n+\t    pp_left_paren (buffer);\n \t    dump_generic_node (buffer, op0, spc, flags, false);\n-\t    pp_character (buffer, ')');\n+\t    pp_right_paren (buffer);\n \t  }\n \telse\n \t  dump_generic_node (buffer, op0, spc, flags, false);\n@@ -1677,9 +1677,9 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t   keep semantics of the tree representation.  */\n \tif (op_prio (op1) <= op_prio (node))\n \t  {\n-\t    pp_character (buffer, '(');\n+\t    pp_left_paren (buffer);\n \t    dump_generic_node (buffer, op1, spc, flags, false);\n-\t    pp_character (buffer, ')');\n+\t    pp_right_paren (buffer);\n \t  }\n \telse\n \t  dump_generic_node (buffer, op1, spc, flags, false);\n@@ -1703,9 +1703,9 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \n       if (op_prio (TREE_OPERAND (node, 0)) < op_prio (node))\n \t{\n-\t  pp_character (buffer, '(');\n+\t  pp_left_paren (buffer);\n \t  dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n-\t  pp_character (buffer, ')');\n+\t  pp_right_paren (buffer);\n \t}\n       else\n \tdump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n@@ -1715,9 +1715,9 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n     case POSTINCREMENT_EXPR:\n       if (op_prio (TREE_OPERAND (node, 0)) < op_prio (node))\n \t{\n-\t  pp_character (buffer, '(');\n+\t  pp_left_paren (buffer);\n \t  dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n-\t  pp_character (buffer, ')');\n+\t  pp_right_paren (buffer);\n \t}\n       else\n \tdump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n@@ -1729,21 +1729,21 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n       pp_string (buffer, \", \");\n       dump_generic_node (buffer, TREE_OPERAND (node, 1), spc, flags, false);\n-      pp_character (buffer, '>');\n+      pp_greater (buffer);\n       break;\n \n     case MAX_EXPR:\n       pp_string (buffer, \"MAX_EXPR <\");\n       dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n       pp_string (buffer, \", \");\n       dump_generic_node (buffer, TREE_OPERAND (node, 1), spc, flags, false);\n-      pp_character (buffer, '>');\n+      pp_greater (buffer);\n       break;\n \n     case ABS_EXPR:\n       pp_string (buffer, \"ABS_EXPR <\");\n       dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n-      pp_character (buffer, '>');\n+      pp_greater (buffer);\n       break;\n \n     case RANGE_EXPR:\n@@ -1759,23 +1759,23 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       op0 = TREE_OPERAND (node, 0);\n       if (type != TREE_TYPE (op0))\n \t{\n-\t  pp_character (buffer, '(');\n+\t  pp_left_paren (buffer);\n \t  dump_generic_node (buffer, type, spc, flags, false);\n \t  pp_string (buffer, \") \");\n \t}\n       if (op_prio (op0) < op_prio (node))\n-\tpp_character (buffer, '(');\n+\tpp_left_paren (buffer);\n       dump_generic_node (buffer, op0, spc, flags, false);\n       if (op_prio (op0) < op_prio (node))\n-\tpp_character (buffer, ')');\n+\tpp_right_paren (buffer);\n       break;\n \n     case VIEW_CONVERT_EXPR:\n       pp_string (buffer, \"VIEW_CONVERT_EXPR<\");\n       dump_generic_node (buffer, TREE_TYPE (node), spc, flags, false);\n       pp_string (buffer, \">(\");\n       dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n-      pp_character (buffer, ')');\n+      pp_right_paren (buffer);\n       break;\n \n     case PAREN_EXPR:\n@@ -1787,13 +1787,13 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n     case NON_LVALUE_EXPR:\n       pp_string (buffer, \"NON_LVALUE_EXPR <\");\n       dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n-      pp_character (buffer, '>');\n+      pp_greater (buffer);\n       break;\n \n     case SAVE_EXPR:\n       pp_string (buffer, \"SAVE_EXPR <\");\n       dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n-      pp_character (buffer, '>');\n+      pp_greater (buffer);\n       break;\n \n     case COMPLEX_EXPR:\n@@ -1886,7 +1886,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t    break;\n \t}\n       dump_generic_node (buffer, op0, spc, flags, false);\n-      pp_character (buffer, ':');\n+      pp_colon (buffer);\n       if (DECL_NONLOCAL (op0))\n \tpp_string (buffer, \" [non-local]\");\n       break;\n@@ -1896,11 +1896,11 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       if (!(flags & TDF_SLIM))\n \t{\n \t  newline_and_indent (buffer, spc+2);\n-\t  pp_character (buffer, '{');\n+\t  pp_left_brace (buffer);\n \t  newline_and_indent (buffer, spc+4);\n \t  dump_generic_node (buffer, LOOP_EXPR_BODY (node), spc+4, flags, true);\n \t  newline_and_indent (buffer, spc+2);\n-\t  pp_character (buffer, '}');\n+\t  pp_right_brace (buffer);\n \t}\n       is_expr = false;\n       break;\n@@ -1938,11 +1938,11 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n     case SWITCH_EXPR:\n       pp_string (buffer, \"switch (\");\n       dump_generic_node (buffer, SWITCH_COND (node), spc, flags, false);\n-      pp_character (buffer, ')');\n+      pp_right_paren (buffer);\n       if (!(flags & TDF_SLIM))\n \t{\n \t  newline_and_indent (buffer, spc+2);\n-\t  pp_character (buffer, '{');\n+\t  pp_left_brace (buffer);\n \t  if (SWITCH_BODY (node))\n \t    {\n \t      newline_and_indent (buffer, spc+4);\n@@ -1970,7 +1970,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t\t}\n \t    }\n \t  newline_and_indent (buffer, spc+2);\n-\t  pp_character (buffer, '}');\n+\t  pp_right_brace (buffer);\n \t}\n       is_expr = false;\n       break;\n@@ -1995,15 +1995,15 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       pp_string (buffer, \"__asm__\");\n       if (ASM_VOLATILE_P (node))\n \tpp_string (buffer, \" __volatile__\");\n-      pp_character (buffer, '(');\n+      pp_left_paren (buffer);\n       dump_generic_node (buffer, ASM_STRING (node), spc, flags, false);\n-      pp_character (buffer, ':');\n+      pp_colon (buffer);\n       dump_generic_node (buffer, ASM_OUTPUTS (node), spc, flags, false);\n-      pp_character (buffer, ':');\n+      pp_colon (buffer);\n       dump_generic_node (buffer, ASM_INPUTS (node), spc, flags, false);\n       if (ASM_CLOBBERS (node))\n \t{\n-\t  pp_character (buffer, ':');\n+\t  pp_colon (buffer);\n \t  dump_generic_node (buffer, ASM_CLOBBERS (node), spc, flags, false);\n \t}\n       pp_string (buffer, \")\");\n@@ -2024,18 +2024,17 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t}\n       else\n \tpp_string (buffer, \"default\");\n-      pp_character (buffer, ':');\n+      pp_colon (buffer);\n       break;\n \n     case OBJ_TYPE_REF:\n       pp_string (buffer, \"OBJ_TYPE_REF(\");\n       dump_generic_node (buffer, OBJ_TYPE_REF_EXPR (node), spc, flags, false);\n-      pp_character (buffer, ';');\n+      pp_semicolon (buffer);\n       dump_generic_node (buffer, OBJ_TYPE_REF_OBJECT (node), spc, flags, false);\n-      pp_character (buffer, '-');\n-      pp_character (buffer, '>');\n+      pp_arrow (buffer);\n       dump_generic_node (buffer, OBJ_TYPE_REF_TOKEN (node), spc, flags, false);\n-      pp_character (buffer, ')');\n+      pp_right_paren (buffer);\n       break;\n \n     case SSA_NAME:\n@@ -2162,11 +2161,11 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       if (!(flags & TDF_SLIM) && OMP_BODY (node))\n \t{\n \t  newline_and_indent (buffer, spc + 2);\n-\t  pp_character (buffer, '{');\n+\t  pp_left_brace (buffer);\n \t  newline_and_indent (buffer, spc + 4);\n \t  dump_generic_node (buffer, OMP_BODY (node), spc + 4, flags, false);\n \t  newline_and_indent (buffer, spc + 2);\n-\t  pp_character (buffer, '}');\n+\t  pp_right_brace (buffer);\n \t}\n       is_expr = false;\n       break;\n@@ -2187,7 +2186,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t  if (OMP_FOR_PRE_BODY (node))\n \t    {\n \t      newline_and_indent (buffer, spc + 2);\n-\t      pp_character (buffer, '{');\n+\t      pp_left_brace (buffer);\n \t      spc += 4;\n \t      newline_and_indent (buffer, spc);\n \t      dump_generic_node (buffer, OMP_FOR_PRE_BODY (node),\n@@ -2212,19 +2211,19 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t  if (OMP_FOR_BODY (node))\n \t    {\n \t      newline_and_indent (buffer, spc + 2);\n-\t      pp_character (buffer, '{');\n+\t      pp_left_brace (buffer);\n \t      newline_and_indent (buffer, spc + 4);\n \t      dump_generic_node (buffer, OMP_FOR_BODY (node), spc + 4, flags,\n \t\t  false);\n \t      newline_and_indent (buffer, spc + 2);\n-\t      pp_character (buffer, '}');\n+\t      pp_right_brace (buffer);\n \t    }\n \t  spc -= 2 * TREE_VEC_LENGTH (OMP_FOR_INIT (node)) - 2;\n \t  if (OMP_FOR_PRE_BODY (node))\n \t    {\n \t      spc -= 4;\n \t      newline_and_indent (buffer, spc + 2);\n-\t      pp_character (buffer, '}');\n+\t      pp_right_brace (buffer);\n \t    }\n \t}\n       is_expr = false;\n@@ -2252,10 +2251,10 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       if (OMP_CRITICAL_NAME (node))\n \t{\n \t  pp_space (buffer);\n-\t  pp_character (buffer, '(');\n+\t  pp_left_paren (buffer);\n           dump_generic_node (buffer, OMP_CRITICAL_NAME (node), spc,\n \t\t\t     flags, false);\n-\t  pp_character (buffer, ')');\n+\t  pp_right_paren (buffer);\n \t}\n       goto dump_omp_body;\n \n@@ -2264,7 +2263,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       newline_and_indent (buffer, spc + 2);\n       dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n       pp_space (buffer);\n-      pp_character (buffer, '=');\n+      pp_equal (buffer);\n       pp_space (buffer);\n       dump_generic_node (buffer, TREE_OPERAND (node, 1), spc, flags, false);\n       break;\n@@ -2282,7 +2281,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       newline_and_indent (buffer, spc + 2);\n       dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n       pp_space (buffer);\n-      pp_character (buffer, '=');\n+      pp_equal (buffer);\n       pp_space (buffer);\n       dump_generic_node (buffer, TREE_OPERAND (node, 1), spc, flags, false);\n       break;\n@@ -2307,12 +2306,12 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       if (!(flags & TDF_SLIM) && TRANSACTION_EXPR_BODY (node))\n \t{\n \t  newline_and_indent (buffer, spc);\n-\t  pp_character (buffer, '{');\n+\t  pp_left_brace (buffer);\n \t  newline_and_indent (buffer, spc + 2);\n \t  dump_generic_node (buffer, TRANSACTION_EXPR_BODY (node),\n \t\t\t     spc + 2, flags, false);\n \t  newline_and_indent (buffer, spc);\n-\t  pp_character (buffer, '}');\n+\t  pp_right_brace (buffer);\n \t}\n       is_expr = false;\n       break;\n@@ -2341,7 +2340,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n     case VEC_WIDEN_MULT_ODD_EXPR:\n     case VEC_WIDEN_LSHIFT_HI_EXPR:\n     case VEC_WIDEN_LSHIFT_LO_EXPR:\n-      pp_character (buffer, ' ');\n+      pp_space (buffer);\n       for (str = tree_code_name [code]; *str; str++)\n \tpp_character (buffer, TOUPPER (*str));\n       pp_string (buffer, \" < \");\n@@ -2474,9 +2473,9 @@ print_declaration (pretty_printer *buffer, tree t, int spc, int flags)\n   if (TREE_CODE (t) == VAR_DECL && DECL_HARD_REGISTER (t))\n     {\n       pp_string (buffer, \" __asm__ \");\n-      pp_character (buffer, '(');\n+      pp_left_paren (buffer);\n       dump_generic_node (buffer, DECL_ASSEMBLER_NAME (t), spc, flags, false);\n-      pp_character (buffer, ')');\n+      pp_right_paren (buffer);\n     }\n \n   /* The initial value of a function serves to determine whether the function\n@@ -2488,7 +2487,7 @@ print_declaration (pretty_printer *buffer, tree t, int spc, int flags)\n       if (DECL_INITIAL (t))\n \t{\n \t  pp_space (buffer);\n-\t  pp_character (buffer, '=');\n+\t  pp_equal (buffer);\n \t  pp_space (buffer);\n \t  dump_generic_node (buffer, DECL_INITIAL (t), spc, flags, false);\n \t}\n@@ -2498,10 +2497,10 @@ print_declaration (pretty_printer *buffer, tree t, int spc, int flags)\n     {\n       pp_string (buffer, \" [value-expr: \");\n       dump_generic_node (buffer, DECL_VALUE_EXPR (t), spc, flags, false);\n-      pp_character (buffer, ']');\n+      pp_right_bracket (buffer);\n     }\n \n-  pp_character (buffer, ';');\n+  pp_semicolon (buffer);\n }\n \n \n@@ -2527,7 +2526,7 @@ print_struct_decl (pretty_printer *buffer, const_tree node, int spc, int flags)\n   /* Print the contents of the structure.  */\n   pp_newline (buffer);\n   INDENT (spc);\n-  pp_character (buffer, '{');\n+  pp_left_brace (buffer);\n   pp_newline (buffer);\n \n   /* Print the fields of the structure.  */\n@@ -2552,7 +2551,7 @@ print_struct_decl (pretty_printer *buffer, const_tree node, int spc, int flags)\n       }\n   }\n   INDENT (spc);\n-  pp_character (buffer, '}');\n+  pp_right_brace (buffer);\n }\n \n /* Return the priority of the operator CODE."}]}