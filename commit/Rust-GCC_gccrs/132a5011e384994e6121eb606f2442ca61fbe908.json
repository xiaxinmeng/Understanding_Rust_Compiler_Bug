{"sha": "132a5011e384994e6121eb606f2442ca61fbe908", "node_id": "C_kwDOANBUbNoAKDEzMmE1MDExZTM4NDk5NGU2MTIxZWI2MDZmMjQ0MmNhNjFmYmU5MDg", "commit": {"author": {"name": "Owen Avery", "email": "powerboat9.gamer@gmail.com", "date": "2023-03-16T03:05:07Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-04-12T13:17:19Z"}, "message": "Unify AST::IfExprConseqIf{,Let} into AST::IfExprConseqElse\n\nThis simplifies the AST's representation of if-statements\nto match the HIR.\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-expr.h\n\t(class IfExprConseqElse): Make else_block ExprWithBlock.\n\t(class IfExprConseqIf): Remove.\n\t(class IfExprConseqIfLet): Remove.\n\t* ast/rust-ast-full-decls.h\n\t(class IfExprConseqIf): Remove.\n\t(class IfExprConseqIfLet): Remove.\n\t* ast/rust-ast.cc\n\t(IfExprConseqElse::as_string): Adjust output.\n\t(IfExprConseqIf::as_string): Remove.\n\t(IfExprConseqIfLet::as_string): Remove.\n\t(IfExprConseqIf::accept_vis): Remove.\n\t(IfExprConseqIfLet::accept_vis): Remove.\n\t* ast/rust-ast-visitor.h\n\t(ASTVisitor::visit): Remove IfExprConseqIf{,Let} visitors.\n\t* ast/rust-ast-tokenstream.cc\n\t(TokenStream::visit): Likewise.\n\t* ast/rust-ast-tokenstream.h\n\t(TokenStream::visit): Likewise.\n\t* ast/rust-ast-dump.cc\n\t(Dump::visit): Likewise.\n\t* ast/rust-ast-dump.h\n\t(Dump::visit): Likewise.\n\t* checks/errors/rust-feature-gate.h\n\t(FeatureGate::visit): Likewise.\n\t* util/rust-attributes.cc\n\t(AttributeChecker::visit): Likewise.\n\t* util/rust-attributes.h\n\t(AttributeChecker::visit): Likewise.\n\t* resolve/rust-early-name-resolver.cc\n\t(EarlyNameResolver::visit): Likewise.\n\t* resolve/rust-early-name-resolver.h\n\t(EarlyNameResolver::visit): Likewise.\n\t* resolve/rust-ast-resolve-base.h\n\t(ResolverBase::visit): Likewise.\n\t* resolve/rust-ast-resolve-base.cc\n\t(ResolverBase::visit): Likewise.\n\t* resolve/rust-ast-resolve-expr.h\n\t(ResolveExpr::visit): Remove IfExprConseqIf visitor.\n\t* resolve/rust-ast-resolve-expr.cc\n\t(ResolveExpr::visit): Likewise.\n\t* expand/rust-cfg-strip.cc\n\t(CfgStrip::visit): Remove IfExprConseqIf{,Let} visitors.\n\t* expand/rust-cfg-strip.h\n\t(CfgStrip::visit): Likewise.\n\t* expand/rust-expand-visitor.cc\n\t(ExpandVisitor::visit): Likewise.\n\t* expand/rust-expand-visitor.h\n\t(ExpandVisitor::visit): Likewise.\n\t* hir/rust-ast-lower-base.cc\n\t(ASTLoweringBase::visit): Likewise.\n\t* hir/rust-ast-lower-base.h\n\t(ASTLoweringBase::visit): Likewise.\n\t* hir/rust-ast-lower-block.h\n\t(ASTLoweringIfBlock::visit): Remove IfExprConseqIf visitor.\n\t(ASTLoweringExprWithBlock::visit): Likewise.\n\t* hir/rust-ast-lower.cc\n\t(ASTLoweringIfBlock::visit):\n\tRemove IfExprConseqIf visitor, adjust IfExprConseqElse lowering.\n\t* hir/rust-ast-lower-expr.h\n\t(ASTLoweringExpr::visit): Remove IfExprConseqIf visitor.\n\t* hir/rust-ast-lower-expr.cc\n\t(ASTLoweringExpr::visit): Likewise.\n\t* parse/rust-parse-impl.h\n\t(Parser::parse_if_expr): Replace IfExprConseqIf{,Let} with IfExprConseqElse.\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>", "tree": {"sha": "fb9da31637abdbcf97037be6611abc206710a548", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb9da31637abdbcf97037be6611abc206710a548"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/132a5011e384994e6121eb606f2442ca61fbe908", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/132a5011e384994e6121eb606f2442ca61fbe908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/132a5011e384994e6121eb606f2442ca61fbe908", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/132a5011e384994e6121eb606f2442ca61fbe908/comments", "author": {"login": "powerboat9", "id": 7397652, "node_id": "MDQ6VXNlcjczOTc2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7397652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/powerboat9", "html_url": "https://github.com/powerboat9", "followers_url": "https://api.github.com/users/powerboat9/followers", "following_url": "https://api.github.com/users/powerboat9/following{/other_user}", "gists_url": "https://api.github.com/users/powerboat9/gists{/gist_id}", "starred_url": "https://api.github.com/users/powerboat9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/powerboat9/subscriptions", "organizations_url": "https://api.github.com/users/powerboat9/orgs", "repos_url": "https://api.github.com/users/powerboat9/repos", "events_url": "https://api.github.com/users/powerboat9/events{/privacy}", "received_events_url": "https://api.github.com/users/powerboat9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc5f674759ecea1531e857e35ebccc1d302be7d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc5f674759ecea1531e857e35ebccc1d302be7d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc5f674759ecea1531e857e35ebccc1d302be7d4"}], "stats": {"total": 425, "additions": 21, "deletions": 404}, "files": [{"sha": "4bc6b9d0fbe0f7017c8fa7922ebd9661d6c762a6", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -936,22 +936,6 @@ Dump::visit (IfExprConseqElse &expr)\n   visit (expr.get_else_block ());\n }\n \n-void\n-Dump::visit (IfExprConseqIf &expr)\n-{\n-  stream << \"if \";\n-  visit (expr.get_condition_expr ());\n-  stream << \" \";\n-  visit (expr.get_if_block ());\n-  stream << indentation << \"else \";\n-  // The \"if\" part of the \"else if\" is printed by the next visitor\n-  visit (expr.get_conseq_if_expr ());\n-}\n-\n-void\n-Dump::visit (IfExprConseqIfLet &)\n-{}\n-\n void\n Dump::visit (IfLetExpr &)\n {}"}, {"sha": "cfde57d0e2e84d95fa51a58c79cbca1713f1ccb3", "filename": "gcc/rust/ast/rust-ast-dump.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fast%2Frust-ast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fast%2Frust-ast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.h?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -184,8 +184,6 @@ class Dump : public ASTVisitor\n   void visit (ForLoopExpr &expr);\n   void visit (IfExpr &expr);\n   void visit (IfExprConseqElse &expr);\n-  void visit (IfExprConseqIf &expr);\n-  void visit (IfExprConseqIfLet &expr);\n   void visit (IfLetExpr &expr);\n   void visit (IfLetExprConseqElse &expr);\n   void visit (IfLetExprConseqIf &expr);"}, {"sha": "ebfb17b7f7adf6bceaa072d863cbe5f01cb1258d", "filename": "gcc/rust/ast/rust-ast-full-decls.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-decls.h?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -135,9 +135,7 @@ class WhileLetLoopExpr;\n class ForLoopExpr;\n class IfExpr;\n class IfExprConseqElse;\n-class IfExprConseqIf;\n class IfLetExpr;\n-class IfExprConseqIfLet;\n class IfLetExprConseqElse;\n class IfLetExprConseqIf;\n class IfLetExprConseqIfLet;"}, {"sha": "8c54141fd7892c725feea50dd53bb0d51c5eff18", "filename": "gcc/rust/ast/rust-ast-tokenstream.cc", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -1427,25 +1427,6 @@ TokenStream::visit (IfExprConseqElse &expr)\n   visit (expr.get_else_block ());\n }\n \n-void\n-TokenStream::visit (IfExprConseqIf &expr)\n-{\n-  visit (static_cast<IfExpr &> (expr));\n-  indentation ();\n-  tokens.push_back (Rust::Token::make (ELSE, expr.get_locus ()));\n-  // The \"if\" part of the \"else if\" is printed by the next visitor\n-  visit (expr.get_conseq_if_expr ());\n-}\n-\n-void\n-TokenStream::visit (IfExprConseqIfLet &expr)\n-{\n-  visit (static_cast<IfExpr &> (expr));\n-  indentation ();\n-  tokens.push_back (Rust::Token::make (ELSE, expr.get_locus ()));\n-  visit (expr.get_conseq_if_let_expr ());\n-}\n-\n void\n TokenStream::visit (IfLetExpr &expr)\n {"}, {"sha": "83fdece70528c5604c948e697a609be8a25a5b0d", "filename": "gcc/rust/ast/rust-ast-tokenstream.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fast%2Frust-ast-tokenstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fast%2Frust-ast-tokenstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-tokenstream.h?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -198,8 +198,6 @@ class TokenStream : public ASTVisitor\n   void visit (ForLoopExpr &expr);\n   void visit (IfExpr &expr);\n   void visit (IfExprConseqElse &expr);\n-  void visit (IfExprConseqIf &expr);\n-  void visit (IfExprConseqIfLet &expr);\n   void visit (IfLetExpr &expr);\n   void visit (IfLetExprConseqElse &expr);\n   void visit (IfLetExprConseqIf &expr);"}, {"sha": "4c8a7456f54d3c79fbd847616809e8a947c943e2", "filename": "gcc/rust/ast/rust-ast-visitor.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fast%2Frust-ast-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fast%2Frust-ast-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-visitor.h?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -115,8 +115,6 @@ class ASTVisitor\n   virtual void visit (ForLoopExpr &expr) = 0;\n   virtual void visit (IfExpr &expr) = 0;\n   virtual void visit (IfExprConseqElse &expr) = 0;\n-  virtual void visit (IfExprConseqIf &expr) = 0;\n-  virtual void visit (IfExprConseqIfLet &expr) = 0;\n   virtual void visit (IfLetExpr &expr) = 0;\n   virtual void visit (IfLetExprConseqElse &expr) = 0;\n   virtual void visit (IfLetExprConseqIf &expr) = 0;"}, {"sha": "5f9ca4850083ba81537590f551e2fa27a55f49b0", "filename": "gcc/rust/ast/rust-ast.cc", "status": "modified", "additions": 1, "deletions": 33, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fast%2Frust-ast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fast%2Frust-ast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.cc?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -1638,27 +1638,7 @@ IfExprConseqElse::as_string () const\n {\n   std::string str = IfExpr::as_string ();\n \n-  str += \"\\n Else block expr: \" + else_block->as_string ();\n-\n-  return str;\n-}\n-\n-std::string\n-IfExprConseqIf::as_string () const\n-{\n-  std::string str = IfExpr::as_string ();\n-\n-  str += \"\\n Else if expr: \\n  \" + conseq_if_expr->as_string ();\n-\n-  return str;\n-}\n-\n-std::string\n-IfExprConseqIfLet::as_string () const\n-{\n-  std::string str = IfExpr::as_string ();\n-\n-  str += \"\\n Else if let expr: \\n  \" + if_let_expr->as_string ();\n+  str += \"\\n Else expr: \" + else_block->as_string ();\n \n   return str;\n }\n@@ -4575,18 +4555,6 @@ IfExprConseqElse::accept_vis (ASTVisitor &vis)\n   vis.visit (*this);\n }\n \n-void\n-IfExprConseqIf::accept_vis (ASTVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-IfExprConseqIfLet::accept_vis (ASTVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n void\n IfLetExpr::accept_vis (ASTVisitor &vis)\n {"}, {"sha": "f91d9e9ceb2000859dfd364f340f8ae0523c5f6e", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 5, "deletions": 122, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -3753,14 +3753,14 @@ class IfExpr : public ExprWithBlock\n // If expression with an ending \"else\" expression AST node (trailing)\n class IfExprConseqElse : public IfExpr\n {\n-  std::unique_ptr<BlockExpr> else_block;\n+  std::unique_ptr<ExprWithBlock> else_block;\n \n public:\n   std::string as_string () const override;\n \n   IfExprConseqElse (std::unique_ptr<Expr> condition,\n \t\t    std::unique_ptr<BlockExpr> if_block,\n-\t\t    std::unique_ptr<BlockExpr> else_block,\n+\t\t    std::unique_ptr<ExprWithBlock> else_block,\n \t\t    std::vector<Attribute> outer_attrs, Location locus)\n     : IfExpr (std::move (condition), std::move (if_block),\n \t      std::move (outer_attrs), locus),\n@@ -3770,7 +3770,7 @@ class IfExprConseqElse : public IfExpr\n \n   // Copy constructor with clone\n   IfExprConseqElse (IfExprConseqElse const &other)\n-    : IfExpr (other), else_block (other.else_block->clone_block_expr ())\n+    : IfExpr (other), else_block (other.else_block->clone_expr_with_block ())\n   {}\n \n   // Overloaded assignment operator with cloning\n@@ -3779,7 +3779,7 @@ class IfExprConseqElse : public IfExpr\n     IfExpr::operator= (other);\n     // condition = other.condition->clone_expr();\n     // if_block = other.if_block->clone_block_expr();\n-    else_block = other.else_block->clone_block_expr ();\n+    else_block = other.else_block->clone_expr_with_block ();\n \n     return *this;\n   }\n@@ -3793,7 +3793,7 @@ class IfExprConseqElse : public IfExpr\n   void vis_else_block (ASTVisitor &vis) { else_block->accept_vis (vis); }\n \n   // TODO: is this better? Or is a \"vis_block\" better?\n-  std::unique_ptr<BlockExpr> &get_else_block ()\n+  std::unique_ptr<ExprWithBlock> &get_else_block ()\n   {\n     rust_assert (else_block != nullptr);\n     return else_block;\n@@ -3808,67 +3808,6 @@ class IfExprConseqElse : public IfExpr\n   }\n };\n \n-// If expression with an ending \"else if\" expression AST node\n-class IfExprConseqIf : public IfExpr\n-{\n-  std::unique_ptr<IfExpr> conseq_if_expr;\n-\n-public:\n-  std::string as_string () const override;\n-\n-  IfExprConseqIf (std::unique_ptr<Expr> condition,\n-\t\t  std::unique_ptr<BlockExpr> if_block,\n-\t\t  std::unique_ptr<IfExpr> conseq_if_expr,\n-\t\t  std::vector<Attribute> outer_attrs, Location locus)\n-    : IfExpr (std::move (condition), std::move (if_block),\n-\t      std::move (outer_attrs), locus),\n-      conseq_if_expr (std::move (conseq_if_expr))\n-  {}\n-  // outer attributes not allowed\n-\n-  // Copy constructor with clone\n-  IfExprConseqIf (IfExprConseqIf const &other)\n-    : IfExpr (other), conseq_if_expr (other.conseq_if_expr->clone_if_expr ())\n-  {}\n-\n-  // Overloaded assignment operator to use clone\n-  IfExprConseqIf &operator= (IfExprConseqIf const &other)\n-  {\n-    IfExpr::operator= (other);\n-    // condition = other.condition->clone_expr();\n-    // if_block = other.if_block->clone_block_expr();\n-    conseq_if_expr = other.conseq_if_expr->clone_if_expr ();\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  IfExprConseqIf (IfExprConseqIf &&other) = default;\n-  IfExprConseqIf &operator= (IfExprConseqIf &&other) = default;\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-  void vis_conseq_if_expr (ASTVisitor &vis)\n-  {\n-    conseq_if_expr->accept_vis (vis);\n-  }\n-\n-  // TODO: is this better? Or is a \"vis_block\" better?\n-  std::unique_ptr<IfExpr> &get_conseq_if_expr ()\n-  {\n-    rust_assert (conseq_if_expr != nullptr);\n-    return conseq_if_expr;\n-  }\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  IfExprConseqIf *clone_if_expr_impl () const override\n-  {\n-    return new IfExprConseqIf (*this);\n-  }\n-};\n-\n // Basic \"if let\" expression AST node with no else\n class IfLetExpr : public ExprWithBlock\n {\n@@ -4002,62 +3941,6 @@ class IfLetExpr : public ExprWithBlock\n   }\n };\n \n-// If expression with an ending \"else if let\" expression AST node\n-class IfExprConseqIfLet : public IfExpr\n-{\n-  std::unique_ptr<IfLetExpr> if_let_expr;\n-\n-public:\n-  std::string as_string () const override;\n-\n-  IfExprConseqIfLet (std::unique_ptr<Expr> condition,\n-\t\t     std::unique_ptr<BlockExpr> if_block,\n-\t\t     std::unique_ptr<IfLetExpr> conseq_if_let_expr,\n-\t\t     std::vector<Attribute> outer_attrs, Location locus)\n-    : IfExpr (std::move (condition), std::move (if_block),\n-\t      std::move (outer_attrs), locus),\n-      if_let_expr (std::move (conseq_if_let_expr))\n-  {}\n-  // outer attributes not allowed\n-\n-  // Copy constructor with clone\n-  IfExprConseqIfLet (IfExprConseqIfLet const &other)\n-    : IfExpr (other), if_let_expr (other.if_let_expr->clone_if_let_expr ())\n-  {}\n-\n-  // Overloaded assignment operator to use clone\n-  IfExprConseqIfLet &operator= (IfExprConseqIfLet const &other)\n-  {\n-    IfExpr::operator= (other);\n-    // condition = other.condition->clone_expr();\n-    // if_block = other.if_block->clone_block_expr();\n-    if_let_expr = other.if_let_expr->clone_if_let_expr ();\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  IfExprConseqIfLet (IfExprConseqIfLet &&other) = default;\n-  IfExprConseqIfLet &operator= (IfExprConseqIfLet &&other) = default;\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-  // TODO: is this better? Or is a \"vis_block\" better?\n-  std::unique_ptr<IfLetExpr> &get_conseq_if_let_expr ()\n-  {\n-    rust_assert (if_let_expr != nullptr);\n-    return if_let_expr;\n-  }\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  IfExprConseqIfLet *clone_if_expr_impl () const override\n-  {\n-    return new IfExprConseqIfLet (*this);\n-  }\n-};\n-\n /* AST node representing \"if let\" expression with an \"else\" expression at the\n  * end */\n class IfLetExprConseqElse : public IfLetExpr"}, {"sha": "5571df91b78a1965bc45879fd1867569c4e48ebb", "filename": "gcc/rust/checks/errors/rust-feature-gate.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.h?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -95,8 +95,6 @@ class FeatureGate : public AST::ASTVisitor\n   void visit (AST::ForLoopExpr &expr) override {}\n   void visit (AST::IfExpr &expr) override {}\n   void visit (AST::IfExprConseqElse &expr) override {}\n-  void visit (AST::IfExprConseqIf &expr) override {}\n-  void visit (AST::IfExprConseqIfLet &expr) override {}\n   void visit (AST::IfLetExpr &expr) override {}\n   void visit (AST::IfLetExprConseqElse &expr) override {}\n   void visit (AST::IfLetExprConseqIf &expr) override {}"}, {"sha": "9c6c249bb896b4cbd2d21d50db9fb2b88f5807a0", "filename": "gcc/rust/expand/rust-cfg-strip.cc", "status": "modified", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fexpand%2Frust-cfg-strip.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fexpand%2Frust-cfg-strip.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-cfg-strip.cc?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -1701,77 +1701,6 @@ CfgStrip::visit (AST::IfExprConseqElse &expr)\n \t\t   \"attributes not allowed\");\n }\n void\n-CfgStrip::visit (AST::IfExprConseqIf &expr)\n-{\n-  // initial strip test based on outer attrs\n-  expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n-    {\n-      expr.mark_for_strip ();\n-      return;\n-    }\n-\n-  // can't strip condition expr itself, but can strip sub-expressions\n-  auto &condition_expr = expr.get_condition_expr ();\n-  condition_expr->accept_vis (*this);\n-  if (condition_expr->is_marked_for_strip ())\n-    rust_error_at (condition_expr->get_locus (),\n-\t\t   \"cannot strip expression in this position - outer \"\n-\t\t   \"attributes not allowed\");\n-\n-  // can't strip if block itself, but can strip sub-expressions\n-  auto &if_block = expr.get_if_block ();\n-  if_block->accept_vis (*this);\n-  if (if_block->is_marked_for_strip ())\n-    rust_error_at (if_block->get_locus (),\n-\t\t   \"cannot strip block expression in this position - outer \"\n-\t\t   \"attributes not allowed\");\n-\n-  // can't strip if expr itself, but can strip sub-expressions\n-  auto &conseq_if_expr = expr.get_conseq_if_expr ();\n-  conseq_if_expr->accept_vis (*this);\n-  if (conseq_if_expr->is_marked_for_strip ())\n-    rust_error_at (conseq_if_expr->get_locus (),\n-\t\t   \"cannot strip consequent if expression in this \"\n-\t\t   \"position - outer attributes not allowed\");\n-}\n-void\n-CfgStrip::visit (AST::IfExprConseqIfLet &expr)\n-{\n-  // initial strip test based on outer attrs\n-  expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n-    {\n-      expr.mark_for_strip ();\n-      return;\n-    }\n-\n-  // can't strip condition expr itself, but can strip sub-expressions\n-  auto &condition_expr = expr.get_condition_expr ();\n-  condition_expr->accept_vis (*this);\n-  if (condition_expr->is_marked_for_strip ())\n-    rust_error_at (condition_expr->get_locus (),\n-\t\t   \"cannot strip expression in this position - outer \"\n-\t\t   \"attributes not allowed\");\n-\n-  // can't strip if block itself, but can strip sub-expressions\n-  auto &if_block = expr.get_if_block ();\n-  if_block->accept_vis (*this);\n-  if (if_block->is_marked_for_strip ())\n-    rust_error_at (if_block->get_locus (),\n-\t\t   \"cannot strip block expression in this position - outer \"\n-\t\t   \"attributes not allowed\");\n-\n-  // can't strip if let expr itself, but can strip sub-expressions\n-  auto &conseq_if_let_expr = expr.get_conseq_if_let_expr ();\n-  conseq_if_let_expr->accept_vis (*this);\n-  if (conseq_if_let_expr->is_marked_for_strip ())\n-    rust_error_at (conseq_if_let_expr->get_locus (),\n-\t\t   \"cannot strip consequent if let expression in this \"\n-\t\t   \"position - outer attributes not \"\n-\t\t   \"allowed\");\n-}\n-void\n CfgStrip::visit (AST::IfLetExpr &expr)\n {\n   // initial strip test based on outer attrs"}, {"sha": "ff71c6ef3a524bbd841f91f0f117fe075cd7d368", "filename": "gcc/rust/expand/rust-cfg-strip.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fexpand%2Frust-cfg-strip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fexpand%2Frust-cfg-strip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-cfg-strip.h?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -131,8 +131,6 @@ class CfgStrip : public AST::ASTVisitor\n   void visit (AST::ForLoopExpr &expr) override;\n   void visit (AST::IfExpr &expr) override;\n   void visit (AST::IfExprConseqElse &expr) override;\n-  void visit (AST::IfExprConseqIf &expr) override;\n-  void visit (AST::IfExprConseqIfLet &expr) override;\n   void visit (AST::IfLetExpr &expr) override;\n   void visit (AST::IfLetExprConseqElse &expr) override;\n   void visit (AST::IfLetExprConseqIf &expr) override;"}, {"sha": "04013da8fffceed700f6ae35d85e1db3ad99faff", "filename": "gcc/rust/expand/rust-expand-visitor.cc", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -681,24 +681,6 @@ ExpandVisitor::visit (AST::IfExprConseqElse &expr)\n   visit (expr.get_else_block ());\n }\n \n-void\n-ExpandVisitor::visit (AST::IfExprConseqIf &expr)\n-{\n-  maybe_expand_expr (expr.get_condition_expr ());\n-\n-  visit (expr.get_if_block ());\n-  visit (expr.get_conseq_if_expr ());\n-}\n-\n-void\n-ExpandVisitor::visit (AST::IfExprConseqIfLet &expr)\n-{\n-  maybe_expand_expr (expr.get_condition_expr ());\n-\n-  visit (expr.get_if_block ());\n-  visit (expr.get_conseq_if_let_expr ());\n-}\n-\n void\n ExpandVisitor::visit (AST::IfLetExpr &expr)\n {"}, {"sha": "67c9a5558b6e381df988c109cec433d2cf4b73d0", "filename": "gcc/rust/expand/rust-expand-visitor.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -216,8 +216,6 @@ class ExpandVisitor : public AST::ASTVisitor\n   void visit (AST::ForLoopExpr &expr) override;\n   void visit (AST::IfExpr &expr) override;\n   void visit (AST::IfExprConseqElse &expr) override;\n-  void visit (AST::IfExprConseqIf &expr) override;\n-  void visit (AST::IfExprConseqIfLet &expr) override;\n   void visit (AST::IfLetExpr &expr) override;\n   void visit (AST::IfLetExprConseqElse &expr) override;\n   void visit (AST::IfLetExprConseqIf &expr) override;"}, {"sha": "fe751ef2e2636b2c5c16666d0b31c218a1c1b5ae", "filename": "gcc/rust/hir/rust-ast-lower-base.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -230,12 +230,6 @@ void\n ASTLoweringBase::visit (AST::IfExprConseqElse &)\n {}\n void\n-ASTLoweringBase::visit (AST::IfExprConseqIf &)\n-{}\n-void\n-ASTLoweringBase::visit (AST::IfExprConseqIfLet &)\n-{}\n-void\n ASTLoweringBase::visit (AST::IfLetExpr &)\n {}\n void"}, {"sha": "cee2e7b89f8dd695dd1a826ea7bd340f9e550d5b", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -143,8 +143,6 @@ class ASTLoweringBase : public AST::ASTVisitor\n   virtual void visit (AST::ForLoopExpr &expr);\n   virtual void visit (AST::IfExpr &expr);\n   virtual void visit (AST::IfExprConseqElse &expr);\n-  virtual void visit (AST::IfExprConseqIf &expr);\n-  virtual void visit (AST::IfExprConseqIfLet &expr);\n   virtual void visit (AST::IfLetExpr &expr);\n   virtual void visit (AST::IfLetExprConseqElse &expr);\n   virtual void visit (AST::IfLetExprConseqIf &expr);"}, {"sha": "5ea68cc39f75732137e79b41e0f911d2ee9324d1", "filename": "gcc/rust/hir/rust-ast-lower-block.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -101,8 +101,6 @@ class ASTLoweringIfBlock : public ASTLoweringBase\n \n   void visit (AST::IfExprConseqElse &expr) override;\n \n-  void visit (AST::IfExprConseqIf &expr) override;\n-\n private:\n   ASTLoweringIfBlock ()\n     : ASTLoweringBase (), translated (nullptr), terminated (false)\n@@ -169,11 +167,6 @@ class ASTLoweringExprWithBlock : public ASTLoweringBase\n     translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n   }\n \n-  void visit (AST::IfExprConseqIf &expr) override\n-  {\n-    translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n-  }\n-\n   void visit (AST::IfLetExpr &expr) override\n   {\n     translated = ASTLoweringIfLetBlock::translate (&expr);"}, {"sha": "10d91612501c829040b3c7aef9290ef317acf13e", "filename": "gcc/rust/hir/rust-ast-lower-expr.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.cc?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -103,12 +103,6 @@ ASTLoweringExpr::visit (AST::IfExprConseqElse &expr)\n   translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n }\n \n-void\n-ASTLoweringExpr::visit (AST::IfExprConseqIf &expr)\n-{\n-  translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n-}\n-\n void\n ASTLoweringExpr::visit (AST::BlockExpr &expr)\n {"}, {"sha": "7c167f6585d4a1578546c0213931f12700171951", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -78,7 +78,6 @@ class ASTLoweringExpr : public ASTLoweringBase\n   void visit (AST::TupleExpr &expr) override;\n   void visit (AST::IfExpr &expr) override;\n   void visit (AST::IfExprConseqElse &expr) override;\n-  void visit (AST::IfExprConseqIf &expr) override;\n   void visit (AST::BlockExpr &expr) override;\n   void visit (AST::UnsafeBlockExpr &expr) override;\n   void visit (AST::PathInExpression &expr) override;"}, {"sha": "b999c10cc1bffb19906aa527af42d3116893d329", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 5, "deletions": 32, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -182,48 +182,21 @@ ASTLoweringIfBlock::visit (AST::IfExprConseqElse &expr)\n   HIR::BlockExpr *if_block\n     = ASTLoweringBlock::translate (expr.get_if_block ().get (),\n \t\t\t\t   &if_block_terminated);\n-  HIR::BlockExpr *else_block\n-    = ASTLoweringBlock::translate (expr.get_else_block ().get (),\n-\t\t\t\t   &else_block_termianted);\n+  HIR::ExprWithBlock *else_block\n+    = ASTLoweringExprWithBlock::translate (expr.get_else_block ().get (),\n+\t\t\t\t\t   &else_block_termianted);\n \n   terminated = if_block_terminated && else_block_termianted;\n \n-  auto crate_num = mappings->get_current_crate ();\n-  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t mappings->get_next_hir_id (crate_num),\n-\t\t\t\t UNKNOWN_LOCAL_DEFID);\n-\n-  translated\n-    = new HIR::IfExprConseqElse (mapping,\n-\t\t\t\t std::unique_ptr<HIR::Expr> (condition),\n-\t\t\t\t std::unique_ptr<HIR::BlockExpr> (if_block),\n-\t\t\t\t std::unique_ptr<HIR::BlockExpr> (else_block),\n-\t\t\t\t expr.get_locus ());\n-}\n-\n-void\n-ASTLoweringIfBlock::visit (AST::IfExprConseqIf &expr)\n-{\n-  HIR::Expr *condition\n-    = ASTLoweringExpr::translate (expr.get_condition_expr ().get ());\n-\n-  bool ignored_terminated = false;\n-  HIR::BlockExpr *block\n-    = ASTLoweringBlock::translate (expr.get_if_block ().get (),\n-\t\t\t\t   &ignored_terminated);\n-  HIR::IfExpr *conseq_if_expr\n-    = ASTLoweringIfBlock::translate (expr.get_conseq_if_expr ().get (),\n-\t\t\t\t     &ignored_terminated);\n-\n   auto crate_num = mappings->get_current_crate ();\n   Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n \t\t\t\t mappings->get_next_hir_id (crate_num),\n \t\t\t\t UNKNOWN_LOCAL_DEFID);\n \n   translated = new HIR::IfExprConseqElse (\n     mapping, std::unique_ptr<HIR::Expr> (condition),\n-    std::unique_ptr<HIR::BlockExpr> (block),\n-    std::unique_ptr<HIR::ExprWithBlock> (conseq_if_expr), expr.get_locus ());\n+    std::unique_ptr<HIR::BlockExpr> (if_block),\n+    std::unique_ptr<HIR::ExprWithBlock> (else_block), expr.get_locus ());\n }\n \n void"}, {"sha": "a7ed23e4c4b0713d319fc8e3dde3679f8d3fc5fb", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -8035,11 +8035,11 @@ Parser<ManagedTokenSource>::parse_if_expr (AST::AttrVec outer_attrs,\n \t\t    return nullptr;\n \t\t  }\n \n-\t\treturn std::unique_ptr<AST::IfExprConseqIfLet> (\n-\t\t  new AST::IfExprConseqIfLet (std::move (condition),\n-\t\t\t\t\t      std::move (if_body),\n-\t\t\t\t\t      std::move (if_let_expr),\n-\t\t\t\t\t      std::move (outer_attrs), locus));\n+\t\treturn std::unique_ptr<AST::IfExprConseqElse> (\n+\t\t  new AST::IfExprConseqElse (std::move (condition),\n+\t\t\t\t\t     std::move (if_body),\n+\t\t\t\t\t     std::move (if_let_expr),\n+\t\t\t\t\t     std::move (outer_attrs), locus));\n \t      }\n \t    else\n \t      {\n@@ -8056,11 +8056,11 @@ Parser<ManagedTokenSource>::parse_if_expr (AST::AttrVec outer_attrs,\n \t\t    return nullptr;\n \t\t  }\n \n-\t\treturn std::unique_ptr<AST::IfExprConseqIf> (\n-\t\t  new AST::IfExprConseqIf (std::move (condition),\n-\t\t\t\t\t   std::move (if_body),\n-\t\t\t\t\t   std::move (if_expr),\n-\t\t\t\t\t   std::move (outer_attrs), locus));\n+\t\treturn std::unique_ptr<AST::IfExprConseqElse> (\n+\t\t  new AST::IfExprConseqElse (std::move (condition),\n+\t\t\t\t\t     std::move (if_body),\n+\t\t\t\t\t     std::move (if_expr),\n+\t\t\t\t\t     std::move (outer_attrs), locus));\n \t      }\n \t  }\n \tdefault:"}, {"sha": "928e5caad6c810928f4ab59355f15f950bd6f1dc", "filename": "gcc/rust/resolve/rust-ast-resolve-base.cc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.cc?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -294,14 +294,6 @@ void\n ResolverBase::visit (AST::IfExprConseqElse &)\n {}\n \n-void\n-ResolverBase::visit (AST::IfExprConseqIf &)\n-{}\n-\n-void\n-ResolverBase::visit (AST::IfExprConseqIfLet &)\n-{}\n-\n void\n ResolverBase::visit (AST::IfLetExpr &)\n {}"}, {"sha": "54f423240d956ae195f32b381c577f59483db157", "filename": "gcc/rust/resolve/rust-ast-resolve-base.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -95,8 +95,6 @@ class ResolverBase : public AST::ASTVisitor\n   void visit (AST::ForLoopExpr &);\n   void visit (AST::IfExpr &);\n   void visit (AST::IfExprConseqElse &);\n-  void visit (AST::IfExprConseqIf &);\n-  void visit (AST::IfExprConseqIfLet &);\n   void visit (AST::IfLetExpr &);\n   void visit (AST::IfLetExprConseqElse &);\n   void visit (AST::IfLetExprConseqIf &);"}, {"sha": "ba9620cf039177af83c93a16ddbd1b8d293a715a", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.cc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -186,14 +186,6 @@ ResolveExpr::visit (AST::IfExprConseqElse &expr)\n   ResolveExpr::go (expr.get_else_block ().get (), prefix, canonical_prefix);\n }\n \n-void\n-ResolveExpr::visit (AST::IfExprConseqIf &expr)\n-{\n-  ResolveExpr::go (expr.get_condition_expr ().get (), prefix, canonical_prefix);\n-  ResolveExpr::go (expr.get_if_block ().get (), prefix, canonical_prefix);\n-  ResolveExpr::go (expr.get_conseq_if_expr ().get (), prefix, canonical_prefix);\n-}\n-\n void\n ResolveExpr::visit (AST::IfLetExpr &expr)\n {"}, {"sha": "5294b98fe40c99b5d209bcb2ea81ebd8eaeb9f62", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -50,7 +50,6 @@ class ResolveExpr : public ResolverBase\n   void visit (AST::TypeCastExpr &expr) override;\n   void visit (AST::IfExpr &expr) override;\n   void visit (AST::IfExprConseqElse &expr) override;\n-  void visit (AST::IfExprConseqIf &expr) override;\n   void visit (AST::IfLetExpr &expr) override;\n   void visit (AST::BlockExpr &expr) override;\n   void visit (AST::UnsafeBlockExpr &expr) override;"}, {"sha": "b1f10d8c0e7407fad3687385b73e7d15ee9c8293", "filename": "gcc/rust/resolve/rust-early-name-resolver.cc", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.cc?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -456,22 +456,6 @@ EarlyNameResolver::visit (AST::IfExprConseqElse &expr)\n   expr.get_else_block ()->accept_vis (*this);\n }\n \n-void\n-EarlyNameResolver::visit (AST::IfExprConseqIf &expr)\n-{\n-  expr.get_condition_expr ()->accept_vis (*this);\n-  expr.get_if_block ()->accept_vis (*this);\n-  expr.get_conseq_if_expr ()->accept_vis (*this);\n-}\n-\n-void\n-EarlyNameResolver::visit (AST::IfExprConseqIfLet &expr)\n-{\n-  expr.get_condition_expr ()->accept_vis (*this);\n-  expr.get_if_block ()->accept_vis (*this);\n-  expr.get_conseq_if_let_expr ()->accept_vis (*this);\n-}\n-\n void\n EarlyNameResolver::visit (AST::IfLetExpr &expr)\n {"}, {"sha": "7bedbaa647dcda92fcd1d7b7aa65c643912600cc", "filename": "gcc/rust/resolve/rust-early-name-resolver.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.h?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -177,8 +177,6 @@ class EarlyNameResolver : public AST::ASTVisitor\n   virtual void visit (AST::ForLoopExpr &expr);\n   virtual void visit (AST::IfExpr &expr);\n   virtual void visit (AST::IfExprConseqElse &expr);\n-  virtual void visit (AST::IfExprConseqIf &expr);\n-  virtual void visit (AST::IfExprConseqIfLet &expr);\n   virtual void visit (AST::IfLetExpr &expr);\n   virtual void visit (AST::IfLetExprConseqElse &expr);\n   virtual void visit (AST::IfLetExprConseqIf &expr);"}, {"sha": "2d99974c17f124259cbc21d38297f357fd8ea0bd", "filename": "gcc/rust/util/rust-attributes.cc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Futil%2Frust-attributes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Futil%2Frust-attributes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-attributes.cc?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -468,14 +468,6 @@ void\n AttributeChecker::visit (AST::IfExprConseqElse &)\n {}\n \n-void\n-AttributeChecker::visit (AST::IfExprConseqIf &)\n-{}\n-\n-void\n-AttributeChecker::visit (AST::IfExprConseqIfLet &)\n-{}\n-\n void\n AttributeChecker::visit (AST::IfLetExpr &)\n {}"}, {"sha": "8903c93923ef6c1115bfb8fa7d73b1fe61196b56", "filename": "gcc/rust/util/rust-attributes.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Futil%2Frust-attributes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132a5011e384994e6121eb606f2442ca61fbe908/gcc%2Frust%2Futil%2Frust-attributes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-attributes.h?ref=132a5011e384994e6121eb606f2442ca61fbe908", "patch": "@@ -160,8 +160,6 @@ class AttributeChecker : public AST::ASTVisitor\n   void visit (AST::ForLoopExpr &expr);\n   void visit (AST::IfExpr &expr);\n   void visit (AST::IfExprConseqElse &expr);\n-  void visit (AST::IfExprConseqIf &expr);\n-  void visit (AST::IfExprConseqIfLet &expr);\n   void visit (AST::IfLetExpr &expr);\n   void visit (AST::IfLetExprConseqElse &expr);\n   void visit (AST::IfLetExprConseqIf &expr);"}]}