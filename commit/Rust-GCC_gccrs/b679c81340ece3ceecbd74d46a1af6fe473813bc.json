{"sha": "b679c81340ece3ceecbd74d46a1af6fe473813bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY3OWM4MTM0MGVjZTNjZWVjYmQ3NGQ0NmExYWY2ZmU0NzM4MTNiYw==", "commit": {"author": {"name": "Torvald Riegel", "email": "triegel@redhat.com", "date": "2012-10-24T19:52:02Z"}, "committer": {"name": "Torvald Riegel", "email": "torvald@gcc.gnu.org", "date": "2012-10-24T19:52:02Z"}, "message": "Ask dispatch whether it requires serial mode.\n\n\t* retry.cc (gtm_thread::decide_begin_dispatch): Ask dispatch whether\n\tit requires serial mode instead of assuming that for certain\n\tdispatchs.\n\t* dispatch.h (abi_dispatch::requires_serial): New.\n\t(abi_dispatch::abi_dispatch): Adapt.\n\t* method-gl.cc (gl_wt_dispatch::gl_wt_dispatch): Adapt.\n\t* method-ml.cc (ml_wt_dispatch::ml_wt_dispatch): Same.\n\t* method-serial.cc (serialirr_dispatch::serialirr_dispatch,\n\tserial_dispatch::serial_dispatch,\n\tserialirr_onwrite_dispatch::serialirr_onwrite_dispatch): Same.\n\nFrom-SVN: r192777", "tree": {"sha": "eb6dab1987f0c9c1f49fce76ba1dd1d8267e3277", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb6dab1987f0c9c1f49fce76ba1dd1d8267e3277"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b679c81340ece3ceecbd74d46a1af6fe473813bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b679c81340ece3ceecbd74d46a1af6fe473813bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b679c81340ece3ceecbd74d46a1af6fe473813bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b679c81340ece3ceecbd74d46a1af6fe473813bc/comments", "author": {"login": "triegelrh", "id": 62400967, "node_id": "MDQ6VXNlcjYyNDAwOTY3", "avatar_url": "https://avatars.githubusercontent.com/u/62400967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/triegelrh", "html_url": "https://github.com/triegelrh", "followers_url": "https://api.github.com/users/triegelrh/followers", "following_url": "https://api.github.com/users/triegelrh/following{/other_user}", "gists_url": "https://api.github.com/users/triegelrh/gists{/gist_id}", "starred_url": "https://api.github.com/users/triegelrh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/triegelrh/subscriptions", "organizations_url": "https://api.github.com/users/triegelrh/orgs", "repos_url": "https://api.github.com/users/triegelrh/repos", "events_url": "https://api.github.com/users/triegelrh/events{/privacy}", "received_events_url": "https://api.github.com/users/triegelrh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1a6c552d12026ee85c819dfe6f2c83bc59aaa28f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a6c552d12026ee85c819dfe6f2c83bc59aaa28f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a6c552d12026ee85c819dfe6f2c83bc59aaa28f"}], "stats": {"total": 47, "additions": 33, "deletions": 14}, "files": [{"sha": "af74e974df11b214e8106e36cb47c541232dacfe", "filename": "libitm/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b679c81340ece3ceecbd74d46a1af6fe473813bc/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b679c81340ece3ceecbd74d46a1af6fe473813bc/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=b679c81340ece3ceecbd74d46a1af6fe473813bc", "patch": "@@ -1,3 +1,16 @@\n+2012-10-24  Torvald Riegel  <triegel@redhat.com>\n+\n+\t* retry.cc (gtm_thread::decide_begin_dispatch): Ask dispatch whether\n+\tit requires serial mode instead of assuming that for certain\n+\tdispatchs.\n+\t* dispatch.h (abi_dispatch::requires_serial): New.\n+\t(abi_dispatch::abi_dispatch): Adapt.\n+\t* method-gl.cc (gl_wt_dispatch::gl_wt_dispatch): Adapt.\n+\t* method-ml.cc (ml_wt_dispatch::ml_wt_dispatch): Same.\n+\t* method-serial.cc (serialirr_dispatch::serialirr_dispatch,\n+\tserial_dispatch::serial_dispatch,\n+\tserialirr_onwrite_dispatch::serialirr_onwrite_dispatch): Same.\n+\n 2012-10-02  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/x86/target.h (struct gtm_jmpbuf): Merge x86_64"}, {"sha": "200138bb4b897b62f4f2786e0f53b779f33c4a48", "filename": "libitm/dispatch.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b679c81340ece3ceecbd74d46a1af6fe473813bc/libitm%2Fdispatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b679c81340ece3ceecbd74d46a1af6fe473813bc/libitm%2Fdispatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fdispatch.h?ref=b679c81340ece3ceecbd74d46a1af6fe473813bc", "patch": "@@ -311,6 +311,9 @@ struct abi_dispatch\n   }\n   // Returns true iff this TM method supports closed nesting.\n   bool closed_nesting() const { return m_closed_nesting; }\n+  // Returns STATE_SERIAL or STATE_SERIAL | STATE_IRREVOCABLE iff the TM\n+  // method only works for serial-mode transactions.\n+  uint32_t requires_serial() const { return m_requires_serial; }\n   method_group* get_method_group() const { return m_method_group; }\n \n   static void *operator new(size_t s) { return xmalloc (s); }\n@@ -332,12 +335,14 @@ struct abi_dispatch\n   const bool m_write_through;\n   const bool m_can_run_uninstrumented_code;\n   const bool m_closed_nesting;\n+  const uint32_t m_requires_serial;\n   method_group* const m_method_group;\n   abi_dispatch(bool ro, bool wt, bool uninstrumented, bool closed_nesting,\n-      method_group* mg) :\n+      uint32_t requires_serial, method_group* mg) :\n     m_read_only(ro), m_write_through(wt),\n     m_can_run_uninstrumented_code(uninstrumented),\n-    m_closed_nesting(closed_nesting), m_method_group(mg)\n+    m_closed_nesting(closed_nesting), m_requires_serial(requires_serial),\n+    m_method_group(mg)\n   { }\n };\n "}, {"sha": "be8f36c011e2c90fc1ce47da5124006ac502b64a", "filename": "libitm/method-gl.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b679c81340ece3ceecbd74d46a1af6fe473813bc/libitm%2Fmethod-gl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b679c81340ece3ceecbd74d46a1af6fe473813bc/libitm%2Fmethod-gl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fmethod-gl.cc?ref=b679c81340ece3ceecbd74d46a1af6fe473813bc", "patch": "@@ -341,7 +341,7 @@ class gl_wt_dispatch : public abi_dispatch\n   CREATE_DISPATCH_METHODS(virtual, )\n   CREATE_DISPATCH_METHODS_MEM()\n \n-  gl_wt_dispatch() : abi_dispatch(false, true, false, false, &o_gl_mg)\n+  gl_wt_dispatch() : abi_dispatch(false, true, false, false, 0, &o_gl_mg)\n   { }\n };\n "}, {"sha": "80278f519aea0e7dc76ceaac7ed6255775d58255", "filename": "libitm/method-ml.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b679c81340ece3ceecbd74d46a1af6fe473813bc/libitm%2Fmethod-ml.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b679c81340ece3ceecbd74d46a1af6fe473813bc/libitm%2Fmethod-ml.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fmethod-ml.cc?ref=b679c81340ece3ceecbd74d46a1af6fe473813bc", "patch": "@@ -590,7 +590,7 @@ class ml_wt_dispatch : public abi_dispatch\n   CREATE_DISPATCH_METHODS(virtual, )\n   CREATE_DISPATCH_METHODS_MEM()\n \n-  ml_wt_dispatch() : abi_dispatch(false, true, false, false, &o_ml_mg)\n+  ml_wt_dispatch() : abi_dispatch(false, true, false, false, 0, &o_ml_mg)\n   { }\n };\n "}, {"sha": "09cfdd4a17520903f9562aec60336271a1fc5103", "filename": "libitm/method-serial.cc", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b679c81340ece3ceecbd74d46a1af6fe473813bc/libitm%2Fmethod-serial.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b679c81340ece3ceecbd74d46a1af6fe473813bc/libitm%2Fmethod-serial.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fmethod-serial.cc?ref=b679c81340ece3ceecbd74d46a1af6fe473813bc", "patch": "@@ -50,13 +50,15 @@ static serial_mg o_serial_mg;\n class serialirr_dispatch : public abi_dispatch\n {\n  public:\n-  serialirr_dispatch() : abi_dispatch(false, true, true, false, &o_serial_mg)\n+  serialirr_dispatch() : abi_dispatch(false, true, true, false,\n+      gtm_thread::STATE_SERIAL | gtm_thread::STATE_IRREVOCABLE, &o_serial_mg)\n   { }\n \n  protected:\n   serialirr_dispatch(bool ro, bool wt, bool uninstrumented,\n-      bool closed_nesting, method_group* mg) :\n-    abi_dispatch(ro, wt, uninstrumented, closed_nesting, mg) { }\n+      bool closed_nesting, uint32_t requires_serial, method_group* mg) :\n+    abi_dispatch(ro, wt, uninstrumented, closed_nesting, requires_serial, mg)\n+  { }\n \n   // Transactional loads and stores simply access memory directly.\n   // These methods are static to avoid indirect calls, and will be used by the\n@@ -151,7 +153,9 @@ class serial_dispatch : public abi_dispatch\n   CREATE_DISPATCH_METHODS(virtual, )\n   CREATE_DISPATCH_METHODS_MEM()\n \n-  serial_dispatch() : abi_dispatch(false, true, false, true, &o_serial_mg) { }\n+  serial_dispatch() : abi_dispatch(false, true, false, true,\n+      gtm_thread::STATE_SERIAL, &o_serial_mg)\n+  { }\n };\n \n \n@@ -162,7 +166,7 @@ class serialirr_onwrite_dispatch : public serialirr_dispatch\n {\n  public:\n   serialirr_onwrite_dispatch() :\n-    serialirr_dispatch(false, true, false, false, &o_serial_mg) { }\n+    serialirr_dispatch(false, true, false, false, 0, &o_serial_mg) { }\n \n  protected:\n   static void pre_write()"}, {"sha": "172419bb8032325980eed311e69338add4bd5fd8", "filename": "libitm/retry.cc", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b679c81340ece3ceecbd74d46a1af6fe473813bc/libitm%2Fretry.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b679c81340ece3ceecbd74d46a1af6fe473813bc/libitm%2Fretry.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fretry.cc?ref=b679c81340ece3ceecbd74d46a1af6fe473813bc", "patch": "@@ -173,7 +173,7 @@ GTM::gtm_thread::decide_begin_dispatch (uint32_t prop)\n \t  && dd->closed_nesting_alternative())\n \tdd = dd->closed_nesting_alternative();\n \n-      if (dd != dispatch_serial() && dd != dispatch_serialirr())\n+      if (!(dd->requires_serial() & STATE_SERIAL))\n \t{\n \t  // The current dispatch is supposedly a non-serial one.  Become an\n \t  // active transaction and verify this.  Relaxed memory order is fine\n@@ -193,10 +193,7 @@ GTM::gtm_thread::decide_begin_dispatch (uint32_t prop)\n \n   // We are some kind of serial transaction.\n   serial_lock.write_lock();\n-  if (dd == dispatch_serialirr())\n-    state = STATE_SERIAL | STATE_IRREVOCABLE;\n-  else\n-    state = STATE_SERIAL;\n+  state = dd->requires_serial();\n   return dd;\n }\n "}]}