{"sha": "1e18a243c26b73e0b22969891ec3584bd62e316c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUxOGEyNDNjMjZiNzNlMGIyMjk2OTg5MWVjMzU4NGJkNjJlMzE2Yw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-07-20T17:14:23Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-07-20T17:14:23Z"}, "message": "[multiple changes]\n\n2000-07-20  Zack Weinberg  <zack@wolery.cumb.org>\n\n\t* tradcpp.c (main): Don't munge -D options.\n\t(make_definition): Bring -D handling in line with cpplib.\n\t(do_define): Strip all leading whitespace from macro definitions.\n\n2000-07-20  David Billinghurst <David.Billinghurst@riotinto.com.au>\n\n\t* Makefile.in (tradcpp): Depend on intl.o and version.o.\n\nFrom-SVN: r35145", "tree": {"sha": "fa10ffb8fdef99014249c2280b3199b32872d31c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa10ffb8fdef99014249c2280b3199b32872d31c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e18a243c26b73e0b22969891ec3584bd62e316c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e18a243c26b73e0b22969891ec3584bd62e316c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e18a243c26b73e0b22969891ec3584bd62e316c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e18a243c26b73e0b22969891ec3584bd62e316c/comments", "author": null, "committer": null, "parents": [{"sha": "5685bed3834d26aaa121999d75c89645ed081ad6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5685bed3834d26aaa121999d75c89645ed081ad6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5685bed3834d26aaa121999d75c89645ed081ad6"}], "stats": {"total": 66, "additions": 19, "deletions": 47}, "files": [{"sha": "62f49cbcbdec0a5b15be42dcd912e8cf66663561", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e18a243c26b73e0b22969891ec3584bd62e316c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e18a243c26b73e0b22969891ec3584bd62e316c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=1e18a243c26b73e0b22969891ec3584bd62e316c", "patch": "@@ -1822,7 +1822,7 @@ mkdeps.o: mkdeps.c $(CONFIG_H) system.h mkdeps.h\n \n # The traditional mode preprocessor, a separate program for ease of\n # maintenance.  Some code is shared with the ISO-C cpp.\n-tradcpp$(exeext): tradcpp.o tradcif.o cppdefault.o $(LIBDEPS)\n+tradcpp$(exeext): tradcpp.o tradcif.o cppdefault.o version.o intl.o $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o tradcpp$(exeext) \\\n \ttradcpp.o tradcif.o cppdefault.o version.o intl.o $(LIBS)\n "}, {"sha": "1881d75b97fa5c84d672dd62cbe9e6fad29a6dbe", "filename": "gcc/tradcpp.c", "status": "modified", "additions": 18, "deletions": 46, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e18a243c26b73e0b22969891ec3584bd62e316c/gcc%2Ftradcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e18a243c26b73e0b22969891ec3584bd62e316c/gcc%2Ftradcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftradcpp.c?ref=1e18a243c26b73e0b22969891ec3584bd62e316c", "patch": "@@ -610,7 +610,7 @@ main (argc, argv)\n \n       case 'D':\n \t{\n-\t  char *p, *p1;\n+\t  char *p;\n \n \t  if (argv[i][2] != 0)\n \t    p = argv[i] + 2;\n@@ -619,8 +619,6 @@ main (argc, argv)\n \t  else\n \t    p = argv[++i];\n \n-\t  if ((p1 = (char *) strchr (p, '=')) != NULL)\n-\t    *p1 = ' ';\n \t  pend_defs[i] = p;\n \t}\n \tbreak;\n@@ -2543,8 +2541,8 @@ do_define (buf, limit, op, keyword)\n     }\n \n     ++bp;\t\t\t/* skip paren */\n-    /* Skip exactly one space or tab if any.  */\n-    if (bp < limit && (*bp == ' ' || *bp == '\\t')) ++bp;\n+    while (is_hor_space[*bp])\t/* and leading whitespace */\n+      ++bp;\n     /* now everything from bp before limit is the definition. */\n     defn = collect_expansion (bp, limit, argno, arg_ptrs);\n \n@@ -2566,9 +2564,9 @@ do_define (buf, limit, op, keyword)\n       defn->argnames[i] = 0;\n     }\n   } else {\n-    /* simple expansion or empty definition; gobble it */\n-    if (is_hor_space[*bp])\n-      ++bp;\t\t/* skip exactly one blank/tab char */\n+    /* simple expansion or empty definition; skip leading whitespace */\n+    while (is_hor_space[*bp])\n+      ++bp;\n     /* now everything from bp before limit is the definition. */\n     defn = collect_expansion (bp, limit, -1, 0);\n     defn->argnames = (U_CHAR *) \"\";\n@@ -4667,52 +4665,26 @@ make_definition (str)\n   FILE_BUF *ip;\n   struct directive *kt;\n   U_CHAR *buf, *p;\n-\n-  buf = str;\n-  p = str;\n-  while (is_idchar[*p]) p++;\n-  if (p == str) {\n-    error (\"malformed option `-D %s'\", str);\n-    return;\n-  }\n-  if (*p == 0) {\n-    buf = (U_CHAR *) alloca (p - buf + 4);\n-    strcpy ((char *)buf, (char *)str);\n-    strcat ((char *)buf, \" 1\");\n-  } else if (*p != ' ') {\n-    error (\"malformed option `-D %s'\", str);\n-    return;\n+  size_t len = strlen ((char *)str);\n+\n+  p = (U_CHAR *) strchr ((char *)str, '=');\n+  if (p == NULL) {\n+    /* Change -DFOO into #define FOO 1 */\n+    buf = (U_CHAR *) alloca (len + 3);\n+    memcpy (buf, str, len);\n+    memcpy (buf + len, \" 1\", 3);\n+    len += 2;\n   } else {\n-    U_CHAR *q;\n-    /* Copy the entire option so we can modify it.  */\n-    buf = (U_CHAR *) alloca (2 * strlen ((char *)str) + 1);\n-    strncpy ((char *)buf, (char *)str, p - str);\n-    /* Change the = to a space.  */\n+    buf = (U_CHAR *) alloca (len + 1);\n+    memcpy (buf, str, len + 1);\n     buf[p - str] = ' ';\n-    /* Scan for any backslash-newline and remove it.  */\n-    p++;\n-    q = &buf[p - str];\n-    while (*p) {\n-      if (*p == '\\\\' && p[1] == '\\n')\n-\tp += 2;\n-      /* Change newline chars into newline-markers.  */\n-      else if (*p == '\\n')\n-\t{\n-\t  *q++ = '\\n';\n-\t  *q++ = '\\n';\n-\t  p++;\n-\t}\n-      else\n-\t*q++ = *p++;\n-    }\n-    *q = 0;\n   }\n   \n   ip = &instack[++indepth];\n   ip->fname = \"*Initialization*\";\n \n   ip->buf = ip->bufp = buf;\n-  ip->length = strlen ((char *)buf);\n+  ip->length = len;\n   ip->lineno = 1;\n   ip->macro = 0;\n   ip->free_ptr = 0;"}]}