{"sha": "c50c91a9a33d9ade766a509c1fd3d6f9b66d19e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUwYzkxYTlhMzNkOWFkZTc2NmE1MDljMWZkM2Q2ZjliNjZkMTllNw==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-09-22T16:33:05Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-09-22T16:33:05Z"}, "message": "[Testsuite] Add tests of reductions using whole-vector-shifts (multiplication)\n\n\t* lib/target-supports.exp (check_effective_target_whole_vector_shift):\n\tNew.\n\n\t* gcc.dg/vect/vect-reduc-mul_1.c: New test.\n\t* gcc.dg/vect/vect-reduc-mul_2.c: New test.\n\nFrom-SVN: r215473", "tree": {"sha": "4ee5f2da68a407c3de45598cb5d56cc18c943536", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ee5f2da68a407c3de45598cb5d56cc18c943536"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c50c91a9a33d9ade766a509c1fd3d6f9b66d19e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c50c91a9a33d9ade766a509c1fd3d6f9b66d19e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c50c91a9a33d9ade766a509c1fd3d6f9b66d19e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c50c91a9a33d9ade766a509c1fd3d6f9b66d19e7/comments", "author": null, "committer": null, "parents": [{"sha": "aed67566921b2153c5af392ad095e04602aa036f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aed67566921b2153c5af392ad095e04602aa036f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aed67566921b2153c5af392ad095e04602aa036f"}], "stats": {"total": 92, "additions": 92, "deletions": 0}, "files": [{"sha": "92efa6efddd9db9ddb0f7bf72f82f882913d48a1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c50c91a9a33d9ade766a509c1fd3d6f9b66d19e7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c50c91a9a33d9ade766a509c1fd3d6f9b66d19e7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c50c91a9a33d9ade766a509c1fd3d6f9b66d19e7", "patch": "@@ -1,3 +1,11 @@\n+2014-09-22  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_whole_vector_shift):\n+\tNew.\n+\n+\t* gcc.dg/vect/vect-reduc-mul_1.c: New test.\n+\t* gcc.dg/vect/vect-reduc-mul_2.c: New test.\n+\n 2014-09-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/63328"}, {"sha": "44f026ff9b561bcf314224c44d51bdd19448851b", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-mul_1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c50c91a9a33d9ade766a509c1fd3d6f9b66d19e7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-mul_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c50c91a9a33d9ade766a509c1fd3d6f9b66d19e7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-mul_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-mul_1.c?ref=c50c91a9a33d9ade766a509c1fd3d6f9b66d19e7", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-require-effective-target vect_int_mult } */\n+/* { dg-require-effective-target whole_vector_shift } */\n+\n+/* Write a reduction loop to be reduced using vector shifts.  */\n+\n+extern void abort(void);\n+\n+unsigned char in[16];\n+\n+int\n+main (unsigned char argc, char **argv)\n+{\n+  unsigned char i = 0;\n+  unsigned char sum = 1;\n+\n+  for (i = 0; i < 16; i++)\n+    in[i] = i + i + 1;\n+\n+  /* Prevent constant propagation of the entire loop below.  */\n+  asm volatile (\"\" : : : \"memory\");\n+\n+  for (i = 0; i < 16; i++)\n+    sum *= in[i];\n+\n+  if (sum != 33)\n+    {\n+      __builtin_printf(\"Failed %d\\n\", sum);\n+      abort();\n+    }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Reduce using vector shifts\" \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "414fba7a5c96c4dd89030682492edb57ebba3b16", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-mul_2.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c50c91a9a33d9ade766a509c1fd3d6f9b66d19e7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-mul_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c50c91a9a33d9ade766a509c1fd3d6f9b66d19e7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-mul_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-mul_2.c?ref=c50c91a9a33d9ade766a509c1fd3d6f9b66d19e7", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target vect_int_mult } */\n+/* { dg-require-effective-target whole_vector_shift } */\n+\n+/* Write a reduction loop to be reduced using vector shifts and folded.  */\n+\n+extern void abort(void);\n+\n+int\n+main (unsigned char argc, char **argv)\n+{\n+  unsigned char in[16];\n+  unsigned char i = 0;\n+  unsigned char sum = 1;\n+\n+  for (i = 0; i < 16; i++)\n+    in[i] = i + i + 1;\n+\n+  for (i = 0; i < 16; i++)\n+    sum *= in[i];\n+\n+  if (sum != 33)\n+    {\n+      __builtin_printf(\"Failed %d\\n\", sum);\n+      abort();\n+    }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Reduce using vector shifts\" \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "a916ca503bbb77e5872272aaa7205a2a374067fb", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c50c91a9a33d9ade766a509c1fd3d6f9b66d19e7/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c50c91a9a33d9ade766a509c1fd3d6f9b66d19e7/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=c50c91a9a33d9ade766a509c1fd3d6f9b66d19e7", "patch": "@@ -3324,6 +3324,22 @@ proc check_effective_target_vect_shift { } {\n     return $et_vect_shift_saved\n }\n \n+proc check_effective_target_whole_vector_shift { } {\n+    if { [istarget x86_64-*-*]\n+\t || [istarget ia64-*-*]\n+\t || ([check_effective_target_arm32]\n+\t     && [check_effective_target_arm_little_endian])\n+\t || ([istarget mips*-*-*]\n+\t     && [check_effective_target_mips_loongson]) } {\n+\tset answer 1\n+    } else {\n+\tset answer 0\n+    }\n+\n+    verbose \"check_effective_target_vect_long: returning $answer\" 2\n+    return $answer\n+}\n+\n # Return 1 if the target supports vector bswap operations.\n \n proc check_effective_target_vect_bswap { } {"}]}