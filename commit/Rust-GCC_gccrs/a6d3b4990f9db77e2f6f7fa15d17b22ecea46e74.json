{"sha": "a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZkM2I0OTkwZjlkYjc3ZTJmNmY3ZmExNWQxN2IyMmVjZWE0NmU3NA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-01-28T11:40:18Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-05-07T09:29:14Z"}, "message": "[Ada] Fix type mismatch warnings during LTO bootstrap #3\n\ngcc/ada/\n\n\t* atree.h (Slots_Ptr): Change pointed-to type to any_slot.\n\t* fe.h (Get_RT_Exception_Name): Change type of parameter.\n\t* namet.ads (Name_Entry): Mark non-boolean components as aliased,\n\treorder the boolean components and add an explicit Spare component.\n\t* namet.adb (Name_Enter): Adjust aggregate accordingly.\n\t(Name_Find): Likewise.\n\t(Reinitialize): Likewise.\n\t* namet.h (struct Name_Entry): Adjust accordingly.\n\t(Names_Ptr): Use correct type.\n\t(Name_Chars_Ptr): Likewise.\n\t(Get_Name_String): Fix declaration and adjust to above changes.\n\t* types.ads (RT_Exception_Code): Add pragma Convention C.\n\t* types.h (Column_Number_Type): Fix original type.\n\t(slot): Rename union type to...\n\t(any_slot): ...this and adjust assertion accordingly.\n\t(RT_Exception_Code): New enumeration type.\n\t* uintp.ads (Uint_Entry): Mark components as aliased.\n\t* uintp.h (Uints_Ptr):  Use correct type.\n\t(Udigits_Ptr): Likewise.\n\t* gcc-interface/gigi.h (gigi): Adjust name and type of parameter.\n\t* gcc-interface/cuintp.c (UI_To_gnu): Adjust references to Uints_Ptr\n\tand Udigits_Ptr.\n\t* gcc-interface/trans.c (Slots_Ptr): Adjust pointed-to type.\n\t(gigi): Adjust type of parameter.\n\t(build_raise_check): Add cast in call to Get_RT_Exception_Name.", "tree": {"sha": "8568dee243a782cf09bb3a84035cbf06ca83b4e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8568dee243a782cf09bb3a84035cbf06ca83b4e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6de75d526bf5958fe9e66195dc0bf1c458e9b06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6de75d526bf5958fe9e66195dc0bf1c458e9b06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6de75d526bf5958fe9e66195dc0bf1c458e9b06"}], "stats": {"total": 365, "additions": 189, "deletions": 176}, "files": [{"sha": "fedb46534937bb65319a77b099a1a37fda20f0d8", "filename": "gcc/ada/atree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74/gcc%2Fada%2Fatree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74/gcc%2Fada%2Fatree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.h?ref=a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74", "patch": "@@ -70,7 +70,7 @@ extern Node_Id Current_Error_Node;\n    these even-lower-level getters.  */\n \n extern Field_Offset *Node_Offsets_Ptr;\n-extern slot *Slots_Ptr;\n+extern any_slot *Slots_Ptr;\n \n INLINE Union_Id Get_1_Bit_Field (Node_Id N, Field_Offset Offset);\n INLINE Union_Id Get_2_Bit_Field (Node_Id N, Field_Offset Offset);"}, {"sha": "ec2956b3ac5e0add976860bd0b52ea32fd1473bc", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74", "patch": "@@ -122,7 +122,7 @@ extern Uint Error_Msg_Uint_2;\n \n extern Entity_Id Get_Local_Raise_Call_Entity\t(void);\n extern Entity_Id Get_RT_Exception_Entity\t(int);\n-extern void Get_RT_Exception_Name\t\t(int);\n+extern void Get_RT_Exception_Name\t\t(enum RT_Exception_Code);\n extern void Warn_If_No_Local_Raise\t\t(int);\n \n /* exp_code:  */"}, {"sha": "6ac82d7f97bb48636b32a649e853c767c50be5e4", "filename": "gcc/ada/gcc-interface/cuintp.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74/gcc%2Fada%2Fgcc-interface%2Fcuintp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74/gcc%2Fada%2Fgcc-interface%2Fcuintp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fcuintp.c?ref=a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74", "patch": "@@ -49,8 +49,7 @@\n \n    For efficiency, this method is used only for integer values larger than the\n    constant Uint_Bias.  If a Uint is less than this constant, then it contains\n-   the integer value itself.  The origin of the Uints_Ptr table is adjusted so\n-   that a Uint value of Uint_Bias indexes the first element.\n+   the integer value itself.\n \n    First define a utility function that is build_int_cst for integral types and\n    does a conversion for floating-point types.  */\n@@ -85,9 +84,9 @@ UI_To_gnu (Uint Input, tree type)\n     gnu_ret = build_cst_from_int (comp_type, Input - Uint_Direct_Bias);\n   else\n     {\n-      Int Idx = Uints_Ptr[Input].Loc;\n-      Pos Length = Uints_Ptr[Input].Length;\n-      Int First = Udigits_Ptr[Idx];\n+      Int Idx = (*Uints_Ptr)[Input - Uint_Table_Start].Loc;\n+      Pos Length = (*Uints_Ptr)[Input - Uint_Table_Start].Length;\n+      Int First = (*Udigits_Ptr)[Idx];\n       tree gnu_base;\n \n       gcc_assert (Length > 0);\n@@ -109,14 +108,14 @@ UI_To_gnu (Uint Input, tree type)\n \t\t\t\t fold_build2 (MULT_EXPR, comp_type,\n \t\t\t\t\t      gnu_ret, gnu_base),\n \t\t\t\t build_cst_from_int (comp_type,\n-\t\t\t\t\t\t     Udigits_Ptr[Idx]));\n+\t\t\t\t\t\t     (*Udigits_Ptr)[Idx]));\n       else\n \tfor (Idx++, Length--; Length; Idx++, Length--)\n \t  gnu_ret = fold_build2 (PLUS_EXPR, comp_type,\n \t\t\t\t fold_build2 (MULT_EXPR, comp_type,\n \t\t\t\t\t      gnu_ret, gnu_base),\n \t\t\t\t build_cst_from_int (comp_type,\n-\t\t\t\t\t\t     Udigits_Ptr[Idx]));\n+\t\t\t\t\t\t     (*Udigits_Ptr)[Idx]));\n     }\n \n   gnu_ret = convert (type, gnu_ret);"}, {"sha": "807f50d1a9a39e9660c39e0987c61dc48deb2d53", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74", "patch": "@@ -235,7 +235,7 @@ extern void gigi (Node_Id gnat_root,\n \t          int max_gnat_node,\n \t\t  int number_name,\n \t\t  Field_Offset *node_offsets_ptr,\n-\t\t  slot *Slots,\n+\t\t  any_slot *slots_ptr,\n \t\t  Node_Id *next_node_ptr,\n \t\t  Node_Id *prev_node_ptr,\n \t\t  struct Elist_Header *elists_ptr,"}, {"sha": "2a85cdefc0a981863e34614ec5b8fd240c5848ca", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74", "patch": "@@ -76,7 +76,7 @@\n \n /* Pointers to front-end tables accessed through macros.  */\n Field_Offset *Node_Offsets_Ptr;\n-slot *Slots_Ptr;\n+any_slot *Slots_Ptr;\n Node_Id *Next_Node_Ptr;\n Node_Id *Prev_Node_Ptr;\n struct Elist_Header *Elists_Ptr;\n@@ -280,7 +280,7 @@ gigi (Node_Id gnat_root,\n       int max_gnat_node,\n       int number_name ATTRIBUTE_UNUSED,\n       Field_Offset *node_offsets_ptr,\n-      slot *slots_ptr,\n+      any_slot *slots_ptr,\n       Node_Id *next_node_ptr,\n       Node_Id *prev_node_ptr,\n       struct Elist_Header *elists_ptr,\n@@ -752,7 +752,7 @@ build_raise_check (int check, enum exception_info_kind kind)\n \n   strcpy (Name_Buffer, pfx);\n   Name_Len = sizeof (pfx) - 1;\n-  Get_RT_Exception_Name (check);\n+  Get_RT_Exception_Name ((enum RT_Exception_Code) check);\n \n   if (kind == exception_simple)\n     {"}, {"sha": "3a4755dab687d88cd8a4b53fa6865f0310f0d684", "filename": "gcc/ada/namet.adb", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74/gcc%2Fada%2Fnamet.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74/gcc%2Fada%2Fnamet.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.adb?ref=a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74", "patch": "@@ -1133,11 +1133,12 @@ package body Namet is\n           Name_Len              => Short (Buf.Length),\n           Byte_Info             => 0,\n           Int_Info              => 0,\n+          Hash_Link             => No_Name,\n+          Name_Has_No_Encodings => False,\n           Boolean1_Info         => False,\n           Boolean2_Info         => False,\n           Boolean3_Info         => False,\n-          Name_Has_No_Encodings => False,\n-          Hash_Link             => No_Name));\n+          Spare                 => False));\n \n       --  Set corresponding string entry in the Name_Chars table\n \n@@ -1239,12 +1240,13 @@ package body Namet is\n            ((Name_Chars_Index      => Name_Chars.Last,\n              Name_Len              => Short (Buf.Length),\n              Hash_Link             => No_Name,\n-             Name_Has_No_Encodings => False,\n              Int_Info              => 0,\n              Byte_Info             => 0,\n+             Name_Has_No_Encodings => False,\n              Boolean1_Info         => False,\n              Boolean2_Info         => False,\n-             Boolean3_Info         => False));\n+             Boolean3_Info         => False,\n+             Spare                 => False));\n \n          --  Set corresponding string entry in the Name_Chars table\n \n@@ -1324,11 +1326,12 @@ package body Namet is\n              Name_Len              => 1,\n              Byte_Info             => 0,\n              Int_Info              => 0,\n+             Hash_Link             => No_Name,\n+             Name_Has_No_Encodings => True,\n              Boolean1_Info         => False,\n              Boolean2_Info         => False,\n              Boolean3_Info         => False,\n-             Name_Has_No_Encodings => True,\n-             Hash_Link             => No_Name));\n+             Spare                 => False));\n \n          Name_Chars.Append (C);\n          Name_Chars.Append (ASCII.NUL);"}, {"sha": "e5d219f000f47d6159cd4c96e4a58979f510aa96", "filename": "gcc/ada/namet.ads", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74/gcc%2Fada%2Fnamet.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74/gcc%2Fada%2Fnamet.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.ads?ref=a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74", "patch": "@@ -570,33 +570,36 @@ private\n      Table_Name           => \"Name_Chars\");\n \n    type Name_Entry is record\n-      Name_Chars_Index : Int;\n+      Name_Chars_Index : aliased Int;\n       --  Starting location of characters in the Name_Chars table minus one\n       --  (i.e. pointer to character just before first character). The reason\n       --  for the bias of one is that indexes in Name_Buffer are one's origin,\n       --  so this avoids unnecessary adds and subtracts of 1.\n \n-      Name_Len : Short;\n+      Name_Len : aliased Short;\n       --  Length of this name in characters\n \n-      Byte_Info : Byte;\n+      Byte_Info : aliased Byte;\n       --  Byte value associated with this name\n \n-      Boolean1_Info : Boolean;\n-      Boolean2_Info : Boolean;\n-      Boolean3_Info : Boolean;\n-      --  Boolean values associated with the name\n-\n       Name_Has_No_Encodings : Boolean;\n       --  This flag is set True if the name entry is known not to contain any\n       --  special character encodings. This is used to speed up repeated calls\n       --  to Append_Decoded. A value of False means that it is not known\n       --  whether the name contains any such encodings.\n \n-      Hash_Link : Name_Id;\n+      Boolean1_Info : Boolean;\n+      Boolean2_Info : Boolean;\n+      Boolean3_Info : Boolean;\n+      --  Boolean values associated with the name\n+\n+      Spare : Boolean;\n+      --  Four remaining bits in the current byte\n+\n+      Hash_Link : aliased Name_Id;\n       --  Link to next entry in names table for same hash code\n \n-      Int_Info : Int;\n+      Int_Info : aliased Int;\n       --  Int Value associated with this name\n \n    end record;\n@@ -605,10 +608,11 @@ private\n       Name_Chars_Index      at  0 range 0 .. 31;\n       Name_Len              at  4 range 0 .. 15;\n       Byte_Info             at  6 range 0 .. 7;\n-      Boolean1_Info         at  7 range 0 .. 0;\n-      Boolean2_Info         at  7 range 1 .. 1;\n-      Boolean3_Info         at  7 range 2 .. 2;\n-      Name_Has_No_Encodings at  7 range 3 .. 7;\n+      Name_Has_No_Encodings at  7 range 0 .. 0;\n+      Boolean1_Info         at  7 range 1 .. 1;\n+      Boolean2_Info         at  7 range 2 .. 2;\n+      Boolean3_Info         at  7 range 3 .. 3;\n+      Spare                 at  7 range 4 .. 7;\n       Hash_Link             at  8 range 0 .. 31;\n       Int_Info              at 12 range 0 .. 31;\n    end record;"}, {"sha": "09fa264dbebbdea625265e641f865dd3f57f1c20", "filename": "gcc/ada/namet.h", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74/gcc%2Fada%2Fnamet.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74/gcc%2Fada%2Fnamet.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.h?ref=a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74", "patch": "@@ -32,26 +32,28 @@\n extern \"C\" {\n #endif\n \n-/* Structure defining a names table entry.  */\n-\n+/* Structure defining a name table entry.  */\n struct Name_Entry\n {\n-  Int Name_Chars_Index; /* Starting location of char in Name_Chars table. */\n-  Short Name_Len;         /* Length of this name in characters. */\n-  Byte Byte_Info;       /* Byte value associated with this name */\n-  Byte Spare;           /* Unused */\n-  Name_Id Hash_Link;    /* Link to next entry in names table for same hash\n-                           code. Not accessed by C routines.  */\n-  Int Int_Info;         /* Int value associated with this name */\n+  Int Name_Chars_Index;\n+  Short Name_Len;\n+  Byte Byte_Info;\n+  Byte Name_Has_No_Encodings : 1;\n+  Byte Boolean1_Info : 1;\n+  Byte Boolean2_Info : 1;\n+  Byte Boolean3_Info : 1;\n+  Byte Spare : 4;\n+  Name_Id Hash_Link;\n+  Int Int_Info;\n };\n \n-/* Pointer to names table vector. */\n+/* Pointer to the name table.  */\n #define Names_Ptr namet__name_entries__table\n-extern struct Name_Entry *Names_Ptr;\n+extern struct Name_Entry (*Names_Ptr)[];\n \n-/* Pointer to name characters table. */\n+/* Pointer to the name character table.  */\n #define Name_Chars_Ptr namet__name_chars__table\n-extern char *Name_Chars_Ptr;\n+extern char (*Name_Chars_Ptr)[];\n \n /* This is Hostparm.Max_Line_Length.  */\n #define Max_Line_Length (32767 - 1)\n@@ -75,12 +77,13 @@ extern struct Bounded_String Global_Name_Buffer;\n    strings we want are sitting in the name strings table in exactly the form\n    we need them (NUL terminated), we just point to the name directly. */\n \n-static char *Get_Name_String (Name_Id);\n+INLINE char *Get_Name_String (Name_Id);\n \n INLINE char *\n Get_Name_String (Name_Id Id)\n {\n-  return Name_Chars_Ptr + Names_Ptr[Id - First_Name_Id].Name_Chars_Index + 1;\n+  return\n+    &(*Name_Chars_Ptr)[(*Names_Ptr)[Id - First_Name_Id].Name_Chars_Index + 1];\n }\n \n #define Name_Equals namet__name_equals"}, {"sha": "bcf2f14c812961815c7b0496937f914f7202ae90", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74", "patch": "@@ -930,6 +930,7 @@ package Types is\n       SE_Object_Too_Large,               -- 35\n       PE_Stream_Operation_Not_Allowed,   -- 36\n       PE_Build_In_Place_Mismatch);       -- 37\n+   pragma Convention (C, RT_Exception_Code);\n \n    Last_Reason_Code : constant :=\n      RT_Exception_Code'Pos (RT_Exception_Code'Last);"}, {"sha": "917cd9c8df95aca26b55ef52a1f323fee7c28198", "filename": "gcc/ada/types.h", "status": "modified", "additions": 125, "deletions": 121, "changes": 246, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74/gcc%2Fada%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74/gcc%2Fada%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.h?ref=a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74", "patch": "@@ -122,7 +122,7 @@ typedef Char *Text_Buffer_Ptr;\n typedef Int Line_Number_Type;\n \n /* Column number type, used for storing all column numbers.  */\n-typedef Int Column_Number_Type;\n+typedef Short Column_Number_Type;\n \n /* Type used to store text of a source file.  */\n typedef Text_Buffer Source_Buffer;\n@@ -372,147 +372,151 @@ typedef char Float_Rep_Kind;\n \n typedef Nat Small_Paren_Count_Type;\n \n-/* Definitions of Reason codes for Raise_xxx_Error nodes */\n-#define CE_Access_Check_Failed              0\n-#define CE_Access_Parameter_Is_Null         1\n-#define CE_Discriminant_Check_Failed        2\n-#define CE_Divide_By_Zero                   3\n-#define CE_Explicit_Raise                   4\n-#define CE_Index_Check_Failed               5\n-#define CE_Invalid_Data                     6\n-#define CE_Length_Check_Failed              7\n-#define CE_Null_Exception_Id                8\n-#define CE_Null_Not_Allowed                 9\n-#define CE_Overflow_Check_Failed           10\n-#define CE_Partition_Check_Failed          11\n-#define CE_Range_Check_Failed              12\n-#define CE_Tag_Check_Failed                13\n-\n-#define PE_Access_Before_Elaboration       14\n-#define PE_Accessibility_Check_Failed      15\n-#define PE_Address_Of_Intrinsic            16\n-#define PE_Aliased_Parameters              17\n-#define PE_All_Guards_Closed               18\n-#define PE_Bad_Predicated_Generic_Type     19\n-#define PE_Build_In_Place_Mismatch         37\n-#define PE_Current_Task_In_Entry_Body      20\n-#define PE_Duplicated_Entry_Address        21\n-#define PE_Explicit_Raise                  22\n-#define PE_Finalize_Raised_Exception       23\n-#define PE_Implicit_Return                 24\n-#define PE_Misaligned_Address_Value        25\n-#define PE_Missing_Return                  26\n-#define PE_Non_Transportable_Actual        31\n-#define PE_Overlaid_Controlled_Object      27\n-#define PE_Potentially_Blocking_Operation  28\n-#define PE_Stream_Operation_Not_Allowed    36\n-#define PE_Stubbed_Subprogram_Called       29\n-#define PE_Unchecked_Union_Restriction     30\n-\n-#define SE_Empty_Storage_Pool              32\n-#define SE_Explicit_Raise                  33\n-#define SE_Infinite_Recursion              34\n-#define SE_Object_Too_Large                35\n-\n-#define LAST_REASON_CODE                   37\n-\n typedef Nat Field_Offset;\n \n typedef struct\n {\n-    unsigned f0 : 1;\n-    unsigned f1 : 1;\n-    unsigned f2 : 1;\n-    unsigned f3 : 1;\n-    unsigned f4 : 1;\n-    unsigned f5 : 1;\n-    unsigned f6 : 1;\n-    unsigned f7 : 1;\n-    unsigned f8 : 1;\n-    unsigned f9 : 1;\n-    unsigned f10 : 1;\n-    unsigned f11 : 1;\n-    unsigned f12 : 1;\n-    unsigned f13 : 1;\n-    unsigned f14 : 1;\n-    unsigned f15 : 1;\n-    unsigned f16 : 1;\n-    unsigned f17 : 1;\n-    unsigned f18 : 1;\n-    unsigned f19 : 1;\n-    unsigned f20 : 1;\n-    unsigned f21 : 1;\n-    unsigned f22 : 1;\n-    unsigned f23 : 1;\n-    unsigned f24 : 1;\n-    unsigned f25 : 1;\n-    unsigned f26 : 1;\n-    unsigned f27 : 1;\n-    unsigned f28 : 1;\n-    unsigned f29 : 1;\n-    unsigned f30 : 1;\n-    unsigned f31 : 1;\n+  unsigned f0 : 1;\n+  unsigned f1 : 1;\n+  unsigned f2 : 1;\n+  unsigned f3 : 1;\n+  unsigned f4 : 1;\n+  unsigned f5 : 1;\n+  unsigned f6 : 1;\n+  unsigned f7 : 1;\n+  unsigned f8 : 1;\n+  unsigned f9 : 1;\n+  unsigned f10 : 1;\n+  unsigned f11 : 1;\n+  unsigned f12 : 1;\n+  unsigned f13 : 1;\n+  unsigned f14 : 1;\n+  unsigned f15 : 1;\n+  unsigned f16 : 1;\n+  unsigned f17 : 1;\n+  unsigned f18 : 1;\n+  unsigned f19 : 1;\n+  unsigned f20 : 1;\n+  unsigned f21 : 1;\n+  unsigned f22 : 1;\n+  unsigned f23 : 1;\n+  unsigned f24 : 1;\n+  unsigned f25 : 1;\n+  unsigned f26 : 1;\n+  unsigned f27 : 1;\n+  unsigned f28 : 1;\n+  unsigned f29 : 1;\n+  unsigned f30 : 1;\n+  unsigned f31 : 1;\n } slot_1_bit;\n \n typedef struct\n {\n-    unsigned f0 : 2;\n-    unsigned f1 : 2;\n-    unsigned f2 : 2;\n-    unsigned f3 : 2;\n-    unsigned f4 : 2;\n-    unsigned f5 : 2;\n-    unsigned f6 : 2;\n-    unsigned f7 : 2;\n-    unsigned f8 : 2;\n-    unsigned f9 : 2;\n-    unsigned f10 : 2;\n-    unsigned f11 : 2;\n-    unsigned f12 : 2;\n-    unsigned f13 : 2;\n-    unsigned f14 : 2;\n-    unsigned f15 : 2;\n+  unsigned f0 : 2;\n+  unsigned f1 : 2;\n+  unsigned f2 : 2;\n+  unsigned f3 : 2;\n+  unsigned f4 : 2;\n+  unsigned f5 : 2;\n+  unsigned f6 : 2;\n+  unsigned f7 : 2;\n+  unsigned f8 : 2;\n+  unsigned f9 : 2;\n+  unsigned f10 : 2;\n+  unsigned f11 : 2;\n+  unsigned f12 : 2;\n+  unsigned f13 : 2;\n+  unsigned f14 : 2;\n+  unsigned f15 : 2;\n } slot_2_bit;\n \n typedef struct\n {\n-    unsigned f0 : 4;\n-    unsigned f1 : 4;\n-    unsigned f2 : 4;\n-    unsigned f3 : 4;\n-    unsigned f4 : 4;\n-    unsigned f5 : 4;\n-    unsigned f6 : 4;\n-    unsigned f7 : 4;\n+  unsigned f0 : 4;\n+  unsigned f1 : 4;\n+  unsigned f2 : 4;\n+  unsigned f3 : 4;\n+  unsigned f4 : 4;\n+  unsigned f5 : 4;\n+  unsigned f6 : 4;\n+  unsigned f7 : 4;\n } slot_4_bit;\n \n typedef struct\n {\n-    unsigned f0 : 8;\n-    unsigned f1 : 8;\n-    unsigned f2 : 8;\n-    unsigned f3 : 8;\n+  unsigned f0 : 8;\n+  unsigned f1 : 8;\n+  unsigned f2 : 8;\n+  unsigned f3 : 8;\n } slot_8_bit;\n \n typedef Union_Id slot_32_bit;\n \n typedef union\n {\n-    slot_1_bit slot_1;\n-    slot_2_bit slot_2;\n-    slot_4_bit slot_4;\n-    slot_8_bit slot_8;\n-    slot_32_bit slot_32;\n-} slot;\n-\n-// Slots are 32 bits (???for now, but we might want to make that 64).\n-// The first bootstrap stage uses -std=gnu++98, so we can't use\n-// static_assert in that case.\n+  slot_1_bit slot_1;\n+  slot_2_bit slot_2;\n+  slot_4_bit slot_4;\n+  slot_8_bit slot_8;\n+  slot_32_bit slot_32;\n+} any_slot;\n+\n+/* Slots are 32 bits (for now, but we might want to make that 64).\n+   The first bootstrap stage uses -std=gnu++98, so we cannot use\n+   static_assert in that case.  */\n #if __cplusplus >= 201402L\n-static_assert(sizeof(slot_1_bit) == 4);\n-static_assert(sizeof(slot_2_bit) == 4);\n-static_assert(sizeof(slot_4_bit) == 4);\n-static_assert(sizeof(slot_8_bit) == 4);\n-static_assert(sizeof(slot_32_bit) == 4);\n-static_assert(sizeof(slot) == 4);\n+static_assert (sizeof (slot_1_bit) == 4);\n+static_assert (sizeof (slot_2_bit) == 4);\n+static_assert (sizeof (slot_4_bit) == 4);\n+static_assert (sizeof (slot_8_bit) == 4);\n+static_assert (sizeof (slot_32_bit) == 4);\n+static_assert (sizeof (any_slot) == 4);\n #endif\n+\n+/* Definitions of Reason codes for Raise_xxx_Error nodes.  */\n+enum RT_Exception_Code\n+{\n+  CE_Access_Check_Failed            = 0,\n+  CE_Access_Parameter_Is_Null       = 1,\n+  CE_Discriminant_Check_Failed      = 2,\n+  CE_Divide_By_Zero                 = 3,\n+  CE_Explicit_Raise                 = 4,\n+  CE_Index_Check_Failed             = 5,\n+  CE_Invalid_Data                   = 6,\n+  CE_Length_Check_Failed            = 7,\n+  CE_Null_Exception_Id              = 8,\n+  CE_Null_Not_Allowed               = 9,\n+\n+  CE_Overflow_Check_Failed          = 10,\n+  CE_Partition_Check_Failed         = 11,\n+  CE_Range_Check_Failed             = 12,\n+  CE_Tag_Check_Failed               = 13,\n+  PE_Access_Before_Elaboratio       = 14,\n+  PE_Accessibility_Check_Failed     = 15,\n+  PE_Address_Of_Intrinsic           = 16,\n+  PE_Aliased_Parameters             = 17,\n+  PE_All_Guards_Closed              = 18,\n+  PE_Bad_Predicated_Generic_Type    = 19,\n+\n+  PE_Current_Task_In_Entry_Body     = 20,\n+  PE_Duplicated_Entry_Address       = 21,\n+  PE_Explicit_Raise                 = 22,\n+  PE_Finalize_Raised_Exception      = 23,\n+  PE_Implicit_Return                = 24,\n+  PE_Misaligned_Address_Value       = 25,\n+  PE_Missing_Return                 = 26,\n+  PE_Overlaid_Controlled_Object     = 27,\n+  PE_Potentially_Blocking_Operation = 28,\n+  PE_Stubbed_Subprogram_Called      = 29,\n+\n+  PE_Unchecked_Union_Restriction    = 30,\n+  PE_Non_Transportable_Actual       = 31,\n+  SE_Empty_Storage_Pool             = 32,\n+  SE_Explicit_Raise                 = 33,\n+  SE_Infinite_Recursion             = 34,\n+  SE_Object_Too_Large               = 35,\n+  PE_Stream_Operation_Not_Allowed   = 36,\n+  PE_Build_In_Place_Mismatch        = 37\n+};\n+\n+#define LAST_REASON_CODE 37"}, {"sha": "04657027fd9e8b00a671992f7130e7bde379fcb0", "filename": "gcc/ada/uintp.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74/gcc%2Fada%2Fuintp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74/gcc%2Fada%2Fuintp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.ads?ref=a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74", "patch": "@@ -531,10 +531,10 @@ private\n    --  used for converting from one to the other are defined.\n \n    type Uint_Entry is record\n-      Length : Pos;\n+      Length : aliased Pos;\n       --  Length of entry in Udigits table in digits (i.e. in words)\n \n-      Loc : Int;\n+      Loc : aliased Int;\n       --  Starting location in Udigits table of this Uint value\n    end record;\n "}, {"sha": "5ca156071078eed0fe724c45bf353dfc26ad5726", "filename": "gcc/ada/uintp.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74/gcc%2Fada%2Fuintp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74/gcc%2Fada%2Fuintp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.h?ref=a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74", "patch": "@@ -99,14 +99,13 @@ extern Boolean UI_Lt\t\t\t(Uint, Uint);\n \n    For efficiency, this method is used only for integer values larger than the\n    constant Uint_Bias.  If a Uint is less than this constant, then it contains\n-   the integer value itself.  The origin of the Uints_Ptr table is adjusted so\n-   that a Uint value of Uint_Bias indexes the first element.  */\n+   the integer value itself.  */\n \n-#define Uints_Ptr (uintp__uints__table - Uint_Table_Start)\n-extern struct Uint_Entry *uintp__uints__table;\n+#define Uints_Ptr uintp__uints__table\n+extern struct Uint_Entry (*Uints_Ptr)[];\n \n #define Udigits_Ptr uintp__udigits__table\n-extern int *uintp__udigits__table;\n+extern int (*Udigits_Ptr)[];\n \n #ifdef __cplusplus\n }"}]}