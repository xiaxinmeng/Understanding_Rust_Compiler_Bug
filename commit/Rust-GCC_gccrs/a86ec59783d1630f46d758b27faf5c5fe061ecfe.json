{"sha": "a86ec59783d1630f46d758b27faf5c5fe061ecfe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg2ZWM1OTc4M2QxNjMwZjQ2ZDc1OGIyN2ZhZjVjNWZlMDYxZWNmZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2012-07-17T12:28:31Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2012-07-17T12:28:31Z"}, "message": "Clean up supportable_widening_operation.\n\n\t* tree-vect-stmts.c (supportable_widening_operation): Remove decl\n\tparameters.\n\t(vectorizable_conversion): Update supportable_widening_operation call.\n\t* tree-vect-patterns.c (vect_recog_widen_mult_pattern): Likewise.\n\t(vect_recog_widen_shift_pattern): Likewise.\n\t* tree-vectorizer.h: Update decl.\n\nFrom-SVN: r189574", "tree": {"sha": "c97c8c49ab09a7c1e936f238b84d63d40212b0af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c97c8c49ab09a7c1e936f238b84d63d40212b0af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a86ec59783d1630f46d758b27faf5c5fe061ecfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a86ec59783d1630f46d758b27faf5c5fe061ecfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a86ec59783d1630f46d758b27faf5c5fe061ecfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a86ec59783d1630f46d758b27faf5c5fe061ecfe/comments", "author": null, "committer": null, "parents": [{"sha": "24cb156d237c740c4e68ac5399efda6bae00482b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24cb156d237c740c4e68ac5399efda6bae00482b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24cb156d237c740c4e68ac5399efda6bae00482b"}], "stats": {"total": 48, "additions": 23, "deletions": 25}, "files": [{"sha": "3744447a3407eff2fa357dd330ae9baaf68c59f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86ec59783d1630f46d758b27faf5c5fe061ecfe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86ec59783d1630f46d758b27faf5c5fe061ecfe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a86ec59783d1630f46d758b27faf5c5fe061ecfe", "patch": "@@ -1,3 +1,12 @@\n+2012-07-17  Richard Henderson  <rth@redhat.com>\n+\n+\t* tree-vect-stmts.c (supportable_widening_operation): Remove decl\n+\tparameters.\n+\t(vectorizable_conversion): Update supportable_widening_operation call.\n+\t* tree-vect-patterns.c (vect_recog_widen_mult_pattern): Likewise.\n+\t(vect_recog_widen_shift_pattern): Likewise.\n+\t* tree-vectorizer.h: Update decl.\n+\n 2012-07-17  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n \t    Ulrich Weigand  <ulrich.weigand@linaro.org>\n "}, {"sha": "595b9b6730d7db6414bee6e2c270e376e31aa607", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86ec59783d1630f46d758b27faf5c5fe061ecfe/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86ec59783d1630f46d758b27faf5c5fe061ecfe/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=a86ec59783d1630f46d758b27faf5c5fe061ecfe", "patch": "@@ -599,7 +599,6 @@ vect_recog_widen_mult_pattern (VEC (gimple, heap) **stmts,\n   tree type, half_type0, half_type1;\n   gimple pattern_stmt;\n   tree vectype, vectype_out = NULL_TREE;\n-  tree dummy;\n   tree var;\n   enum tree_code dummy_code;\n   int dummy_int;\n@@ -692,8 +691,8 @@ vect_recog_widen_mult_pattern (VEC (gimple, heap) **stmts,\n       || !vectype_out\n       || !supportable_widening_operation (WIDEN_MULT_EXPR, last_stmt,\n \t\t\t\t\t  vectype_out, vectype,\n-\t\t\t\t\t  &dummy, &dummy, &dummy_code,\n-\t\t\t\t\t  &dummy_code, &dummy_int, &dummy_vec))\n+\t\t\t\t\t  &dummy_code, &dummy_code,\n+\t\t\t\t\t  &dummy_int, &dummy_vec))\n     return NULL;\n \n   *type_in = vectype;\n@@ -1370,7 +1369,6 @@ vect_recog_widen_shift_pattern (VEC (gimple, heap) **stmts,\n   tree type, half_type0;\n   gimple pattern_stmt;\n   tree vectype, vectype_out = NULL_TREE;\n-  tree dummy;\n   tree var;\n   enum tree_code dummy_code;\n   int dummy_int;\n@@ -1441,9 +1439,8 @@ vect_recog_widen_shift_pattern (VEC (gimple, heap) **stmts,\n       || !vectype_out\n       || !supportable_widening_operation (WIDEN_LSHIFT_EXPR, last_stmt,\n \t\t\t\t\t  vectype_out, vectype,\n-\t\t\t\t\t  &dummy, &dummy, &dummy_code,\n-\t\t\t\t\t  &dummy_code, &dummy_int,\n-\t\t\t\t\t  &dummy_vec))\n+\t\t\t\t\t  &dummy_code, &dummy_code,\n+\t\t\t\t\t  &dummy_int, &dummy_vec))\n     return NULL;\n \n   *type_in = vectype;"}, {"sha": "358c2d522a5b0355fa4f6d8e9bbb04d00acf4fa5", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86ec59783d1630f46d758b27faf5c5fe061ecfe/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86ec59783d1630f46d758b27faf5c5fe061ecfe/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=a86ec59783d1630f46d758b27faf5c5fe061ecfe", "patch": "@@ -2410,8 +2410,8 @@ vectorizable_conversion (gimple stmt, gimple_stmt_iterator *gsi,\n \n     case WIDEN:\n       if (supportable_widening_operation (code, stmt, vectype_out, vectype_in,\n-\t\t\t\t\t  &decl1, &decl2, &code1, &code2,\n-\t\t\t\t\t  &multi_step_cvt, &interm_types))\n+\t\t\t\t\t  &code1, &code2, &multi_step_cvt,\n+\t\t\t\t\t  &interm_types))\n \t{\n \t  /* Binary widening operation can only be supported directly by the\n \t     architecture.  */\n@@ -2443,18 +2443,16 @@ vectorizable_conversion (gimple stmt, gimple_stmt_iterator *gsi,\n \t\tgoto unsupported;\n \t    }\n \t  else if (!supportable_widening_operation (code, stmt, vectype_out,\n-\t\t\t\t\t\t    cvt_type, &decl1, &decl2,\n-\t\t\t\t\t\t    &codecvt1, &codecvt2,\n-\t\t\t\t\t\t    &multi_step_cvt,\n+\t\t\t\t\t\t    cvt_type, &codecvt1,\n+\t\t\t\t\t\t    &codecvt2, &multi_step_cvt,\n \t\t\t\t\t\t    &interm_types))\n \t    continue;\n \t  else\n \t    gcc_assert (multi_step_cvt == 0);\n \n \t  if (supportable_widening_operation (NOP_EXPR, stmt, cvt_type,\n-\t\t\t\t\t      vectype_in, NULL, NULL, &code1,\n-\t\t\t\t\t      &code2, &multi_step_cvt,\n-\t\t\t\t\t      &interm_types))\n+\t\t\t\t\t      vectype_in, &code1, &code2,\n+\t\t\t\t\t      &multi_step_cvt, &interm_types))\n \t    break;\n \t}\n \n@@ -6262,9 +6260,6 @@ vect_is_simple_use_1 (tree operand, gimple stmt, loop_vec_info loop_vinfo,\n    Output:\n    - CODE1 and CODE2 are codes of vector operations to be used when\n    vectorizing the operation, if available.\n-   - DECL1 and DECL2 are decls of target builtin functions to be used\n-   when vectorizing the operation, if available.  In this case,\n-   CODE1 and CODE2 are CALL_EXPR.\n    - MULTI_STEP_CVT determines the number of required intermediate steps in\n    case of multi-step conversion (like char->short->int - in that case\n    MULTI_STEP_CVT will be 1).\n@@ -6274,8 +6269,6 @@ vect_is_simple_use_1 (tree operand, gimple stmt, loop_vec_info loop_vinfo,\n bool\n supportable_widening_operation (enum tree_code code, gimple stmt,\n \t\t\t\ttree vectype_out, tree vectype_in,\n-                                tree *decl1 ATTRIBUTE_UNUSED,\n-\t\t\t\ttree *decl2 ATTRIBUTE_UNUSED,\n                                 enum tree_code *code1, enum tree_code *code2,\n                                 int *multi_step_cvt,\n                                 VEC (tree, heap) **interm_types)\n@@ -6339,8 +6332,8 @@ supportable_widening_operation (enum tree_code code, gimple stmt,\n \t  && !nested_in_vect_loop_p (vect_loop, stmt)\n \t  && supportable_widening_operation (VEC_WIDEN_MULT_EVEN_EXPR,\n \t\t\t\t\t     stmt, vectype_out, vectype_in,\n-\t\t\t\t\t     NULL, NULL, code1, code2,\n-\t\t\t\t\t     multi_step_cvt, interm_types))\n+\t\t\t\t\t     code1, code2, multi_step_cvt,\n+\t\t\t\t\t     interm_types))\n \treturn true;\n       c1 = VEC_WIDEN_MULT_LO_EXPR;\n       c2 = VEC_WIDEN_MULT_HI_EXPR;"}, {"sha": "3d2310711ab40fa884fe2a8467504dcc93924654", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86ec59783d1630f46d758b27faf5c5fe061ecfe/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86ec59783d1630f46d758b27faf5c5fe061ecfe/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=a86ec59783d1630f46d758b27faf5c5fe061ecfe", "patch": "@@ -895,9 +895,8 @@ extern bool vect_is_simple_use_1 (tree, gimple, loop_vec_info,\n \t\t\t\t  bb_vec_info, gimple *,\n \t\t\t\t  tree *,  enum vect_def_type *, tree *);\n extern bool supportable_widening_operation (enum tree_code, gimple, tree, tree,\n-                                            tree *, tree *, enum tree_code *,\n-                                            enum tree_code *, int *,\n-                                            VEC (tree, heap) **);\n+                                            enum tree_code *, enum tree_code *,\n+\t\t\t\t\t    int *, VEC (tree, heap) **);\n extern bool supportable_narrowing_operation (enum tree_code, tree, tree,\n \t\t\t\t\t     enum tree_code *,\n \t\t\t\t\t     int *, VEC (tree, heap) **);"}]}