{"sha": "aa2f6edbf74131aff10dae81dab928b3ddbb307e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWEyZjZlZGJmNzQxMzFhZmYxMGRhZTgxZGFiOTI4YjNkZGJiMzA3ZQ==", "commit": {"author": {"name": "Christopher D. Rickett", "email": "crickett@lanl.gov", "date": "2007-08-22T21:28:08Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-08-22T21:28:08Z"}, "message": "re PR fortran/33020 (Bind(C): c_f_pointer: type/rank mismatch error with integer(8) SHAPE)\n\n2007-08-22  Christopher D. Rickett  <crickett@lanl.gov>\n\n\tPR fortran/33020\n\t* resolve.c (gfc_iso_c_sub_interface): Remove setting of type and\n\tkind for optional SHAPE parameter of C_F_POINTER.\n\n2007-08-22  Christopher D. Rickett  <crickett@lanl.gov>\n\n\tPR fortran/33020\n\t* gfortran.dg/c_f_pointer_shape_tests_2.f03: Update test to\n\tinclude multiple kinds for SHAPE parameter within a single\n\tnamespace.\n\t* gfortran.dg/c_f_pointer_shape_tests_2_driver.c: Ditto.\n\t* gfortran.dg/c_f_pointer_shape_tests_3.f03: New test case.\n\nFrom-SVN: r127719", "tree": {"sha": "a40c16b3d5f5ed186bfbe426cb793d8f1fe8d75a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a40c16b3d5f5ed186bfbe426cb793d8f1fe8d75a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa2f6edbf74131aff10dae81dab928b3ddbb307e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa2f6edbf74131aff10dae81dab928b3ddbb307e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa2f6edbf74131aff10dae81dab928b3ddbb307e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa2f6edbf74131aff10dae81dab928b3ddbb307e/comments", "author": null, "committer": null, "parents": [{"sha": "129d15a3e011dd6f48865673f70396a957c4deff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/129d15a3e011dd6f48865673f70396a957c4deff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/129d15a3e011dd6f48865673f70396a957c4deff"}], "stats": {"total": 79, "additions": 66, "deletions": 13}, "files": [{"sha": "ae7145de3f3201b9ae269e5522918df68ecf6ee3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2f6edbf74131aff10dae81dab928b3ddbb307e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2f6edbf74131aff10dae81dab928b3ddbb307e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=aa2f6edbf74131aff10dae81dab928b3ddbb307e", "patch": "@@ -1,3 +1,9 @@\n+2007-08-22  Christopher D. Rickett  <crickett@lanl.gov>\n+\n+\tPR fortran/33020\n+\t* resolve.c (gfc_iso_c_sub_interface): Remove setting of type and\n+\tkind for optional SHAPE parameter of C_F_POINTER.\n+\n 2007-08-22  Janus Weil  <jaydub66@gmail.com>\n \n \t* decl.c (match_attr_spec): Pass on errors from gfc_match_bind_c."}, {"sha": "fbb7a03566a83a4492817c5bd64f0177ca6b478f", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2f6edbf74131aff10dae81dab928b3ddbb307e/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2f6edbf74131aff10dae81dab928b3ddbb307e/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=aa2f6edbf74131aff10dae81dab928b3ddbb307e", "patch": "@@ -2351,11 +2351,6 @@ gfc_iso_c_sub_interface (gfc_code *c, gfc_symbol *sym)\n      formal args) before resolving.  */\n   gfc_procedure_use (sym, &c->ext.actual, &(c->loc));\n \n-  /* Give the optional SHAPE formal arg a type now that we've done our\n-     initial checking against the actual.  */\n-  if (sym->intmod_sym_id == ISOCBINDING_F_POINTER)\n-    sym->formal->next->next->sym->ts.type = BT_INTEGER;\n-\n   if ((sym->intmod_sym_id == ISOCBINDING_F_POINTER) ||\n       (sym->intmod_sym_id == ISOCBINDING_F_PROCPOINTER))\n     {\n@@ -2396,13 +2391,6 @@ gfc_iso_c_sub_interface (gfc_code *c, gfc_symbol *sym)\n \t  /* the 1 means to add the optional arg to formal list */\n \t  new_sym = get_iso_c_sym (sym, name, binding_label, 1);\n \t \n-\t  /* Set the kind for the SHAPE array to that of the actual\n-\t     (if given).  */\n-\t  if (c->ext.actual != NULL && c->ext.actual->next != NULL\n-\t      && c->ext.actual->next->expr->rank != 0)\n-\t    new_sym->formal->next->next->sym->ts.kind =\n-\t      c->ext.actual->next->next->expr->ts.kind;\n-\t \n \t  /* for error reporting, say it's declared where the original was */\n \t  new_sym->declared_at = sym->declared_at;\n \t}"}, {"sha": "7ee76957647eaf9ca40422855614d80e48bcd33d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2f6edbf74131aff10dae81dab928b3ddbb307e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2f6edbf74131aff10dae81dab928b3ddbb307e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aa2f6edbf74131aff10dae81dab928b3ddbb307e", "patch": "@@ -1,3 +1,12 @@\n+2007-08-22  Christopher D. Rickett  <crickett@lanl.gov>\n+\n+\tPR fortran/33020\n+\t* gfortran.dg/c_f_pointer_shape_tests_2.f03: Update test to\n+\tinclude multiple kinds for SHAPE parameter within a single\n+\tnamespace.\n+\t* gfortran.dg/c_f_pointer_shape_tests_2_driver.c: Ditto.\n+\t* gfortran.dg/c_f_pointer_shape_tests_3.f03: New test case. \n+\n 2007-08-22  Janus Weil  <jaydub66@gmail.com>\n \n \t* interface_abstract_1.f90: Extended test case."}, {"sha": "662908931b9926129ff8f744caaa76e5083b1970", "filename": "gcc/testsuite/gfortran.dg/c_f_pointer_shape_tests_2.f03", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2f6edbf74131aff10dae81dab928b3ddbb307e/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_shape_tests_2.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2f6edbf74131aff10dae81dab928b3ddbb307e/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_shape_tests_2.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_shape_tests_2.f03?ref=aa2f6edbf74131aff10dae81dab928b3ddbb307e", "patch": "@@ -86,6 +86,29 @@ subroutine test_short_1d(cPtr, num_elems) bind(c)\n        if(myArrayPtr(i) /= (i-1)) call abort ()\n     end do\n   end subroutine test_short_1d\n+\n+  subroutine test_mixed(cPtr, num_elems) bind(c)\n+    use, intrinsic :: iso_c_binding\n+    type(c_ptr), value :: cPtr\n+    integer(c_int), value :: num_elems\n+    integer, dimension(:), pointer :: myArrayPtr\n+    integer(c_int), dimension(1) :: shape1\n+    integer(c_long_long), dimension(1) :: shape2\n+    integer :: i\n+\n+    shape1(1) = num_elems\n+    call c_f_pointer(cPtr, myArrayPtr, shape1) \n+    do i = 1, num_elems\n+       if(myArrayPtr(i) /= (i-1)) call abort ()\n+    end do\n+\n+    nullify(myArrayPtr)\n+    shape2(1) = num_elems\n+    call c_f_pointer(cPtr, myArrayPtr, shape2) \n+    do i = 1, num_elems\n+       if(myArrayPtr(i) /= (i-1)) call abort ()\n+    end do\n+  end subroutine test_mixed\n end module c_f_pointer_shape_tests_2\n ! { dg-final { cleanup-modules \"c_f_pointer_shape_tests_2\" } } \n "}, {"sha": "1282beb12d7e7794eea476be5891784b7006af47", "filename": "gcc/testsuite/gfortran.dg/c_f_pointer_shape_tests_2_driver.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2f6edbf74131aff10dae81dab928b3ddbb307e/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_shape_tests_2_driver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2f6edbf74131aff10dae81dab928b3ddbb307e/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_shape_tests_2_driver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_shape_tests_2_driver.c?ref=aa2f6edbf74131aff10dae81dab928b3ddbb307e", "patch": "@@ -7,6 +7,7 @@ void test_long_long_2d(int *array, int num_rows, int num_cols);\n void test_long_1d(int *array, int num_elems);\n void test_int_1d(int *array, int num_elems);\n void test_short_1d(int *array, int num_elems);\n+void test_mixed(int *array, int num_elems);\n \n int main(int argc, char **argv)\n {\n@@ -36,6 +37,10 @@ int main(int argc, char **argv)\n \n   /* Test c_f_pointer where SHAPE is of type integer, kind=c_short.  */\n   test_short_1d(my_array, NUM_ELEMS);\n-  \n+\n+  /* Test c_f_pointer where SHAPE is of type integer, kind=c_int and\n+\t  kind=c_long_long.  */\n+  test_mixed(my_array, NUM_ELEMS);\n+\n   return 0;\n }"}, {"sha": "31fd938106417f29583704cba72fccaeac610988", "filename": "gcc/testsuite/gfortran.dg/c_f_pointer_shape_tests_3.f03", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2f6edbf74131aff10dae81dab928b3ddbb307e/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_shape_tests_3.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2f6edbf74131aff10dae81dab928b3ddbb307e/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_shape_tests_3.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_shape_tests_3.f03?ref=aa2f6edbf74131aff10dae81dab928b3ddbb307e", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do compile }\n+! Verify that the type and rank of the SHAPE argument are enforced.\n+module c_f_pointer_shape_tests_3\n+  use, intrinsic :: iso_c_binding\n+  \n+contains\n+  subroutine sub0(my_c_array) bind(c)\n+    type(c_ptr), value :: my_c_array\n+    integer(c_int), dimension(:), pointer :: my_array_ptr\n+    \n+    call c_f_pointer(my_c_array, my_array_ptr, (/ 10.0 /)) ! { dg-error \"must be a rank 1 INTEGER array\" }\n+  end subroutine sub0\n+\n+  subroutine sub1(my_c_array) bind(c)\n+    type(c_ptr), value :: my_c_array\n+    integer(c_int), dimension(:), pointer :: my_array_ptr\n+    integer(c_int), dimension(1,1) :: shape\n+\n+    shape(1,1) = 10\n+    call c_f_pointer(my_c_array, my_array_ptr, shape) ! { dg-error \"must be a rank 1 INTEGER array\" }\n+  end subroutine sub1\n+end module c_f_pointer_shape_tests_3"}]}