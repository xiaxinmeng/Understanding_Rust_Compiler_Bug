{"sha": "ba7e83f8dcae71029dfba361070319ab22e2e37a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE3ZTgzZjhkY2FlNzEwMjlkZmJhMzYxMDcwMzE5YWIyMmUyZTM3YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-05-07T10:30:13Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-05-07T10:30:13Z"}, "message": "re PR tree-optimization/57149 (wrong -Wmaybe-uninitialized warning with -Os)\n\n\tPR tree-optimization/57149\n\t* tree-ssa-uninit.c (uninit_undefined_value_p): New inline.\n\t(can_skip_redundant_opnd, compute_uninit_opnds_pos,\n\tcollect_phi_def_edges, execute_late_warn_uninitialized): Use\n\tuninit_undefined_value_p instead of ssa_undefined_value_p.\n\n\t* gcc.dg/pr57149.c: New test.\n\nFrom-SVN: r198671", "tree": {"sha": "b789b0d2ed02e9f931f1b8d03fbcad41dcafc667", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b789b0d2ed02e9f931f1b8d03fbcad41dcafc667"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba7e83f8dcae71029dfba361070319ab22e2e37a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba7e83f8dcae71029dfba361070319ab22e2e37a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba7e83f8dcae71029dfba361070319ab22e2e37a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba7e83f8dcae71029dfba361070319ab22e2e37a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "43303d6f8e85a9c271b1229471b2777a8c68bf16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43303d6f8e85a9c271b1229471b2777a8c68bf16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43303d6f8e85a9c271b1229471b2777a8c68bf16"}], "stats": {"total": 80, "additions": 76, "deletions": 4}, "files": [{"sha": "00a5502cbd2e8573c9659ee4a5fdd38ecfae19e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba7e83f8dcae71029dfba361070319ab22e2e37a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba7e83f8dcae71029dfba361070319ab22e2e37a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba7e83f8dcae71029dfba361070319ab22e2e37a", "patch": "@@ -1,5 +1,11 @@\n 2013-05-07  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/57149\n+\t* tree-ssa-uninit.c (uninit_undefined_value_p): New inline.\n+\t(can_skip_redundant_opnd, compute_uninit_opnds_pos,\n+\tcollect_phi_def_edges, execute_late_warn_uninitialized): Use\n+\tuninit_undefined_value_p instead of ssa_undefined_value_p.\n+\n \tPR debug/57184\n \t* expr.c (expand_expr_addr_expr_1): Handle COMPOUND_LITERAL_EXPR\n \tfor modifier == EXPAND_INITIALIZER."}, {"sha": "23e900ca13cc6dc898706f477bcbc192b08b936f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba7e83f8dcae71029dfba361070319ab22e2e37a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba7e83f8dcae71029dfba361070319ab22e2e37a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ba7e83f8dcae71029dfba361070319ab22e2e37a", "patch": "@@ -1,5 +1,8 @@\n 2013-05-07  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/57149\n+\t* gcc.dg/pr57149.c: New test.\n+\n \tPR debug/57184\n \t* gcc.dg/pr57184.c: New test.\n "}, {"sha": "ab4d5e40899b29f6f643a9894f96ae986481d1ad", "filename": "gcc/testsuite/gcc.dg/pr57149.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba7e83f8dcae71029dfba361070319ab22e2e37a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr57149.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba7e83f8dcae71029dfba361070319ab22e2e37a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr57149.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr57149.c?ref=ba7e83f8dcae71029dfba361070319ab22e2e37a", "patch": "@@ -0,0 +1,50 @@\n+/* PR tree-optimization/57149 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -Wuninitialized\" } */\n+\n+struct A { struct A *a, *b; };\n+struct D { struct A e; };\n+struct E { unsigned char f; struct { struct A e; } g; };\n+struct F { struct E i[32]; };\n+\n+extern int fn0 (void);\n+extern int fn1 (struct E *, struct D *);\n+\n+static inline __attribute__ ((always_inline)) int\n+fn2 (const struct A *x)\n+{\n+  return x->a == x;\n+}\n+\n+static int\n+fn3 (struct E *x)\n+{\n+  struct D *l, *m;\n+  int retval = retval;\n+  if (fn2 (&x->g.e))\n+    return 0;\n+  for (l = (struct D *) x->g.e.a, m = (struct D *) l->e.a;\n+       &l->e != &x->g.e;\n+       l = m, m = (struct D *) m->e.a)\n+    retval = fn1 (x, l);\n+  return retval;\n+}\n+\n+void\n+fn4 (struct F *x, unsigned k)\n+{\n+  unsigned i;\n+  for (i = 0; i < k; i++)\n+    {\n+      struct E *y = &x->i[i];\n+      int err = -22;\n+      err = fn3 (y);\n+      if (y->f == 0)\n+\t{\n+\t  if (err > 0)\n+\t    err = fn0 ();\n+\t  if (err < 0)\t/* { dg-bogus \"may be used uninitialized in this function\" } */\n+\t    fn0 ();\n+\t}\n+    }\n+}"}, {"sha": "aa01c51658f2c66183cddfef2139bf934e5c8589", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba7e83f8dcae71029dfba361070319ab22e2e37a/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba7e83f8dcae71029dfba361070319ab22e2e37a/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=ba7e83f8dcae71029dfba361070319ab22e2e37a", "patch": "@@ -101,6 +101,19 @@ ssa_undefined_value_p (tree t)\n               && pointer_set_contains (possibly_undefined_names, t)));\n }\n \n+/* Like ssa_undefined_value_p, but don't return true if TREE_NO_WARNING\n+   is set on SSA_NAME_VAR.  */\n+\n+static inline bool\n+uninit_undefined_value_p (tree t)\n+{\n+  if (!ssa_undefined_value_p (t))\n+    return false;\n+  if (SSA_NAME_VAR (t) && TREE_NO_WARNING (SSA_NAME_VAR (t)))\n+    return false;\n+  return true;\n+}\n+\n /* Checks if the operand OPND of PHI is defined by \n    another phi with one operand defined by this PHI, \n    but the rest operands are all defined. If yes, \n@@ -124,7 +137,7 @@ can_skip_redundant_opnd (tree opnd, gimple phi)\n       tree op = gimple_phi_arg_def (op_def, i);\n       if (TREE_CODE (op) != SSA_NAME)\n         continue;\n-      if (op != phi_def && ssa_undefined_value_p (op))\n+      if (op != phi_def && uninit_undefined_value_p (op))\n         return false;\n     }\n \n@@ -149,7 +162,7 @@ compute_uninit_opnds_pos (gimple phi)\n     {\n       tree op = gimple_phi_arg_def (phi, i);\n       if (TREE_CODE (op) == SSA_NAME\n-          && ssa_undefined_value_p (op)\n+          && uninit_undefined_value_p (op)\n           && !can_skip_redundant_opnd (op, phi))\n \t{\n \t  /* Ignore SSA_NAMEs on abnormal edges to setjmp\n@@ -518,7 +531,7 @@ collect_phi_def_edges (gimple phi, basic_block cd_root,\n                                  gimple_bb (def), cd_root))\n             collect_phi_def_edges (def, cd_root, edges,\n                                    visited_phis);\n-          else if (!ssa_undefined_value_p (opnd))\n+          else if (!uninit_undefined_value_p (opnd))\n             {\n               if (dump_file && (dump_flags & TDF_DETAILS))\n                 {\n@@ -2002,7 +2015,7 @@ execute_late_warn_uninitialized (void)\n           {\n             tree op = gimple_phi_arg_def (phi, i);\n             if (TREE_CODE (op) == SSA_NAME\n-                && ssa_undefined_value_p (op))\n+                && uninit_undefined_value_p (op))\n               {\n                 worklist.safe_push (phi);\n \t\tpointer_set_insert (added_to_worklist, phi);"}]}