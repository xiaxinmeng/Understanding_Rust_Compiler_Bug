{"sha": "54c7a7f3b07b2198ecd84cdab579ec41057389f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRjN2E3ZjNiMDdiMjE5OGVjZDg0Y2RhYjU3OWVjNDEwNTczODlmOQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2014-01-16T12:17:48Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2014-01-16T12:17:48Z"}, "message": "re PR middle-end/28865 (Structures with a flexible arrray member have wrong .size)\n\nPR middle-end/28865\n\n\t* varasm.c (output_constant): Return the number of bytes actually\n\temitted.\n\t(output_constructor_array_range): Update the field size with the\n\tnumber of bytes emitted by output_constant.\n\t(output_constructor_regular_field): Likewise.  Also do not\n \tcomplain if the total number of bytes emitted is now greater\n\tthan the expected fieldpos.\n\t* output.h (output_constant): Update prototype and descriptive\n\tcomment.\n\n\t* gcc.c-torture/compile/pr28865.c: New.\n\t* gcc.c-torture/execute/pr28865.c: New.\n\nFrom-SVN: r206661", "tree": {"sha": "f86b15eb863f6a929fad7d545aa4f7c28340eaa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f86b15eb863f6a929fad7d545aa4f7c28340eaa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54c7a7f3b07b2198ecd84cdab579ec41057389f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54c7a7f3b07b2198ecd84cdab579ec41057389f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54c7a7f3b07b2198ecd84cdab579ec41057389f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54c7a7f3b07b2198ecd84cdab579ec41057389f9/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5147d10aa4b2b608a02fb885a5510c983e148f06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5147d10aa4b2b608a02fb885a5510c983e148f06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5147d10aa4b2b608a02fb885a5510c983e148f06"}], "stats": {"total": 95, "additions": 77, "deletions": 18}, "files": [{"sha": "be73e9e1471d95b1c0b286062fa021965194b524", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c7a7f3b07b2198ecd84cdab579ec41057389f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c7a7f3b07b2198ecd84cdab579ec41057389f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54c7a7f3b07b2198ecd84cdab579ec41057389f9", "patch": "@@ -1,3 +1,16 @@\n+2014-01-16  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR middle-end/28865\n+\t* varasm.c (output_constant): Return the number of bytes actually\n+\temitted.\n+\t(output_constructor_array_range): Update the field size with the\n+\tnumber of bytes emitted by output_constant.\n+\t(output_constructor_regular_field): Likewise.  Also do not\n+\tcomplain if the total number of bytes emitted is now greater\n+\tthan the expected fieldpos.\n+\t* output.h (output_constant): Update prototype and descriptive\n+\tcomment.\n+\n 2014-01-16  Marek Polacek  <polacek@redhat.com>\n \n \tPR middle-end/59827"}, {"sha": "fead3d31494e411be88a93b43816c5c230fa3eb2", "filename": "gcc/output.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c7a7f3b07b2198ecd84cdab579ec41057389f9/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c7a7f3b07b2198ecd84cdab579ec41057389f9/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=54c7a7f3b07b2198ecd84cdab579ec41057389f9", "patch": "@@ -294,11 +294,13 @@ extern void output_quoted_string (FILE *, const char *);\n    This includes the pseudo-op such as \".int\" or \".byte\", and a newline.\n    Assumes output_addressed_constants has been done on EXP already.\n \n-   Generate exactly SIZE bytes of assembler data, padding at the end\n-   with zeros if necessary.  SIZE must always be specified.\n+   Generate at least SIZE bytes of assembler data, padding at the end\n+   with zeros if necessary.  SIZE must always be specified.  The returned\n+   value is the actual number of bytes of assembler data generated, which\n+   may be bigger than SIZE if the object contains a variable length field.\n \n    ALIGN is the alignment in bits that may be assumed for the data.  */\n-extern void output_constant (tree, unsigned HOST_WIDE_INT, unsigned int);\n+extern unsigned HOST_WIDE_INT output_constant (tree, unsigned HOST_WIDE_INT, unsigned int);\n \n /* When outputting delayed branch sequences, this rtx holds the\n    sequence being output.  It is null when no delayed branch"}, {"sha": "868593b1133997fc4630e0d1a9786825052ce137", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c7a7f3b07b2198ecd84cdab579ec41057389f9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c7a7f3b07b2198ecd84cdab579ec41057389f9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=54c7a7f3b07b2198ecd84cdab579ec41057389f9", "patch": "@@ -1,3 +1,9 @@\n+2014-01-16  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR middle-end/28865\n+\t* gcc.c-torture/compile/pr28865.c: New.\n+\t* gcc.c-torture/execute/pr28865.c: New.\n+\n 2014-01-16  Marek Polacek  <polacek@redhat.com>\n \n \tPR middle-end/59827"}, {"sha": "aa6ae078acaba257ac4e2644f480ec6496fff188", "filename": "gcc/testsuite/gcc.c-torture/compile/pr28865.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c7a7f3b07b2198ecd84cdab579ec41057389f9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr28865.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c7a7f3b07b2198ecd84cdab579ec41057389f9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr28865.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr28865.c?ref=54c7a7f3b07b2198ecd84cdab579ec41057389f9", "patch": "@@ -0,0 +1,16 @@\n+struct var_len\n+{\n+  int field1;\n+  const char field2[];\n+};\n+\n+/* Note - strictly speaking this array declaration is illegal\n+   since each element has a variable length.  GCC allows it\n+   (for the moment) because it is used in existing code, such\n+   as glibc.  */\n+static const struct var_len var_array[] = \n+{\n+  { 1, \"Long exposure noise reduction\" },\n+  { 2, \"Shutter/AE lock buttons\" },\n+  { 3, \"Mirror lockup\" }\n+};"}, {"sha": "627e6b86e1bb05bf7372579153c7969c12dd46b7", "filename": "gcc/testsuite/gcc.c-torture/execute/pr28865.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c7a7f3b07b2198ecd84cdab579ec41057389f9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr28865.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c7a7f3b07b2198ecd84cdab579ec41057389f9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr28865.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr28865.c?ref=54c7a7f3b07b2198ecd84cdab579ec41057389f9", "patch": "@@ -0,0 +1,21 @@\n+struct A { int a; char b[]; };\n+union B { struct A a; char b[sizeof (struct A) + 31]; };\n+union B b = { { 1, \"123456789012345678901234567890\" } };\n+union B c = { { 2, \"123456789012345678901234567890\" } };\n+\n+__attribute__((noinline, noclone)) void\n+foo (int *x[2])\n+{\n+  x[0] = &b.a.a;\n+  x[1] = &c.a.a;\n+}\n+\n+int\n+main ()\n+{\n+  int *x[2];\n+  foo (x);\n+  if (*x[0] != 1 || *x[1] != 2)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "6a41644045ef65ba703225674e2f1768c29d167c", "filename": "gcc/varasm.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c7a7f3b07b2198ecd84cdab579ec41057389f9/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c7a7f3b07b2198ecd84cdab579ec41057389f9/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=54c7a7f3b07b2198ecd84cdab579ec41057389f9", "patch": "@@ -4584,8 +4584,10 @@ static unsigned HOST_WIDE_INT\n    This includes the pseudo-op such as \".int\" or \".byte\", and a newline.\n    Assumes output_addressed_constants has been done on EXP already.\n \n-   Generate exactly SIZE bytes of assembler data, padding at the end\n-   with zeros if necessary.  SIZE must always be specified.\n+   Generate at least SIZE bytes of assembler data, padding at the end\n+   with zeros if necessary.  SIZE must always be specified.  The returned\n+   value is the actual number of bytes of assembler data generated, which\n+   may be bigger than SIZE if the object contains a variable length field.\n \n    SIZE is important for structure constructors,\n    since trailing members may have been omitted from the constructor.\n@@ -4600,14 +4602,14 @@ static unsigned HOST_WIDE_INT\n \n    ALIGN is the alignment of the data in bits.  */\n \n-void\n+unsigned HOST_WIDE_INT\n output_constant (tree exp, unsigned HOST_WIDE_INT size, unsigned int align)\n {\n   enum tree_code code;\n   unsigned HOST_WIDE_INT thissize;\n \n   if (size == 0 || flag_syntax_only)\n-    return;\n+    return size;\n \n   /* See if we're trying to initialize a pointer in a non-default mode\n      to the address of some declaration somewhere.  If the target says\n@@ -4672,7 +4674,7 @@ output_constant (tree exp, unsigned HOST_WIDE_INT size, unsigned int align)\n       && vec_safe_is_empty (CONSTRUCTOR_ELTS (exp)))\n     {\n       assemble_zeros (size);\n-      return;\n+      return size;\n     }\n \n   if (TREE_CODE (exp) == FDESC_EXPR)\n@@ -4684,7 +4686,7 @@ output_constant (tree exp, unsigned HOST_WIDE_INT size, unsigned int align)\n #else\n       gcc_unreachable ();\n #endif\n-      return;\n+      return size;\n     }\n \n   /* Now output the underlying data.  If we've handling the padding, return.\n@@ -4723,8 +4725,7 @@ output_constant (tree exp, unsigned HOST_WIDE_INT size, unsigned int align)\n       switch (TREE_CODE (exp))\n \t{\n \tcase CONSTRUCTOR:\n-\t  output_constructor (exp, size, align, NULL);\n-\t  return;\n+\t  return output_constructor (exp, size, align, NULL);\n \tcase STRING_CST:\n \t  thissize\n \t    = MIN ((unsigned HOST_WIDE_INT)TREE_STRING_LENGTH (exp), size);\n@@ -4752,18 +4753,19 @@ output_constant (tree exp, unsigned HOST_WIDE_INT size, unsigned int align)\n     case RECORD_TYPE:\n     case UNION_TYPE:\n       gcc_assert (TREE_CODE (exp) == CONSTRUCTOR);\n-      output_constructor (exp, size, align, NULL);\n-      return;\n+      return output_constructor (exp, size, align, NULL);\n \n     case ERROR_MARK:\n-      return;\n+      return 0;\n \n     default:\n       gcc_unreachable ();\n     }\n \n   if (size > thissize)\n     assemble_zeros (size - thissize);\n+\n+  return size;\n }\n \n \f\n@@ -4860,7 +4862,7 @@ output_constructor_array_range (oc_local_state *local)\n       if (local->val == NULL_TREE)\n \tassemble_zeros (fieldsize);\n       else\n-\toutput_constant (local->val, fieldsize, align2);\n+\tfieldsize = output_constant (local->val, fieldsize, align2);\n \n       /* Count its size.  */\n       local->total_bytes += fieldsize;\n@@ -4909,9 +4911,8 @@ output_constructor_regular_field (oc_local_state *local)\n      Note no alignment needed in an array, since that is guaranteed\n      if each element has the proper size.  */\n   if ((local->field != NULL_TREE || local->index != NULL_TREE)\n-      && fieldpos != local->total_bytes)\n+      && fieldpos > local->total_bytes)\n     {\n-      gcc_assert (fieldpos >= local->total_bytes);\n       assemble_zeros (fieldpos - local->total_bytes);\n       local->total_bytes = fieldpos;\n     }\n@@ -4948,7 +4949,7 @@ output_constructor_regular_field (oc_local_state *local)\n   if (local->val == NULL_TREE)\n     assemble_zeros (fieldsize);\n   else\n-    output_constant (local->val, fieldsize, align2);\n+    fieldsize = output_constant (local->val, fieldsize, align2);\n \n   /* Count its size.  */\n   local->total_bytes += fieldsize;"}]}