{"sha": "c9b17fa5b55e67e974fbd5a3a2dafca442c90b86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzliMTdmYTViNTVlNjdlOTc0ZmJkNWEzYTJkYWZjYTQ0MmM5MGI4Ng==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-08-28T06:37:12Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-08-28T06:37:12Z"}, "message": "AVX-512. Add byte/word plus/minus/avg.\n\ngcc/\n\t(define_mode_iterator VI12_AVX2): Add V64QI and V32HI modes.\n\t(define_expand \"<sse2_avx2>_<plusminus_insn><mode>3<mask_name>\"): Add\n\tmasking.\n\t(define_insn \"*<sse2_avx2>_<plusminus_insn><mode>3<mask_name>\"): Ditto.\n\t(define_expand \"<sse2_avx2>_uavg<mode>3<mask_name>\"): Ditto.\n\t(define_insn \"*<sse2_avx2>_uavg<mode>3<mask_name>\"): Ditto.\n\t(define_insn \"*mul<mode>3\"): Add EVEX version.\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r214672", "tree": {"sha": "90b1a9c862370570e1eb6b59c0c05600b0d729b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90b1a9c862370570e1eb6b59c0c05600b0d729b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9b17fa5b55e67e974fbd5a3a2dafca442c90b86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9b17fa5b55e67e974fbd5a3a2dafca442c90b86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9b17fa5b55e67e974fbd5a3a2dafca442c90b86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9b17fa5b55e67e974fbd5a3a2dafca442c90b86/comments", "author": null, "committer": null, "parents": [{"sha": "6edf4f24f34264cfa6c78bd5659b26bdcadafaf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6edf4f24f34264cfa6c78bd5659b26bdcadafaf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6edf4f24f34264cfa6c78bd5659b26bdcadafaf5"}], "stats": {"total": 70, "additions": 49, "deletions": 21}, "files": [{"sha": "10fa23bf498a8e88ed35af26cc98908d29915c97", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b17fa5b55e67e974fbd5a3a2dafca442c90b86/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b17fa5b55e67e974fbd5a3a2dafca442c90b86/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c9b17fa5b55e67e974fbd5a3a2dafca442c90b86", "patch": "@@ -1,3 +1,20 @@\n+2014-08-28  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t(define_mode_iterator VI12_AVX2): Add V64QI and V32HI modes.\n+\t(define_expand \"<sse2_avx2>_<plusminus_insn><mode>3<mask_name>\"): Add\n+\tmasking.\n+\t(define_insn \"*<sse2_avx2>_<plusminus_insn><mode>3<mask_name>\"): Ditto.\n+\t(define_expand \"<sse2_avx2>_uavg<mode>3<mask_name>\"): Ditto.\n+\t(define_insn \"*<sse2_avx2>_uavg<mode>3<mask_name>\"): Ditto.\n+\t(define_insn \"*mul<mode>3\"): Add EVEX version.\n+\n 2014-08-28  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "c602eebf2ff3ded25d9e1132ec448c9865097d57", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 32, "deletions": 21, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b17fa5b55e67e974fbd5a3a2dafca442c90b86/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b17fa5b55e67e974fbd5a3a2dafca442c90b86/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=c9b17fa5b55e67e974fbd5a3a2dafca442c90b86", "patch": "@@ -338,8 +338,8 @@\n   [(V2TI \"TARGET_AVX2\") TI])\n \n (define_mode_iterator VI12_AVX2\n-  [(V32QI \"TARGET_AVX2\") V16QI\n-   (V16HI \"TARGET_AVX2\") V8HI])\n+  [(V64QI \"TARGET_AVX512BW\") (V32QI \"TARGET_AVX2\") V16QI\n+   (V32HI \"TARGET_AVX512BW\") (V16HI \"TARGET_AVX2\") V8HI])\n \n (define_mode_iterator VI24_AVX2\n   [(V16HI \"TARGET_AVX2\") V8HI\n@@ -8109,27 +8109,28 @@\n    (set_attr \"prefix\" \"<mask_prefix3>\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_expand \"<sse2_avx2>_<plusminus_insn><mode>3\"\n+(define_expand \"<sse2_avx2>_<plusminus_insn><mode>3<mask_name>\"\n   [(set (match_operand:VI12_AVX2 0 \"register_operand\")\n \t(sat_plusminus:VI12_AVX2\n \t  (match_operand:VI12_AVX2 1 \"nonimmediate_operand\")\n \t  (match_operand:VI12_AVX2 2 \"nonimmediate_operand\")))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE2 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n-(define_insn \"*<sse2_avx2>_<plusminus_insn><mode>3\"\n+(define_insn \"*<sse2_avx2>_<plusminus_insn><mode>3<mask_name>\"\n   [(set (match_operand:VI12_AVX2 0 \"register_operand\" \"=x,v\")\n \t(sat_plusminus:VI12_AVX2\n \t  (match_operand:VI12_AVX2 1 \"nonimmediate_operand\" \"<comm>0,v\")\n \t  (match_operand:VI12_AVX2 2 \"nonimmediate_operand\" \"xm,vm\")))]\n-  \"TARGET_SSE2 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"TARGET_SSE2 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\n+   && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"@\n    p<plusminus_mnemonic><ssemodesuffix>\\t{%2, %0|%0, %2}\n-   vp<plusminus_mnemonic><ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+   vp<plusminus_mnemonic><ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseiadd\")\n    (set_attr \"prefix_data16\" \"1,*\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix\" \"orig,maybe_evex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_expand \"mul<mode>3\"\n@@ -8151,8 +8152,8 @@\n \n (define_insn \"*mul<mode>3\"\n   [(set (match_operand:VI2_AVX2 0 \"register_operand\" \"=x,x\")\n-\t(mult:VI2_AVX2 (match_operand:VI2_AVX2 1 \"nonimmediate_operand\" \"%0,x\")\n-\t\t       (match_operand:VI2_AVX2 2 \"nonimmediate_operand\" \"xm,xm\")))]\n+        (mult:VI2_AVX2 (match_operand:VI2_AVX2 1 \"nonimmediate_operand\" \"%0,v\")\n+                       (match_operand:VI2_AVX2 2 \"nonimmediate_operand\" \"xm,vm\")))]\n   \"TARGET_SSE2 && ix86_binary_operator_ok (MULT, <MODE>mode, operands)\"\n   \"@\n    pmullw\\t{%2, %0|%0, %2}\n@@ -11318,7 +11319,7 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n-(define_expand \"<sse2_avx2>_uavg<mode>3\"\n+(define_expand \"<sse2_avx2>_uavg<mode>3<mask_name>\"\n   [(set (match_operand:VI12_AVX2 0 \"register_operand\")\n \t(truncate:VI12_AVX2\n \t  (lshiftrt:<ssedoublemode>\n@@ -11328,34 +11329,44 @@\n \t\t  (match_operand:VI12_AVX2 1 \"nonimmediate_operand\"))\n \t\t(zero_extend:<ssedoublemode>\n \t\t  (match_operand:VI12_AVX2 2 \"nonimmediate_operand\")))\n-\t      (match_dup 3))\n+\t      (match_dup <mask_expand_op3>))\n \t    (const_int 1))))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE2 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n {\n+  rtx tmp;\n+  if (<mask_applied>)\n+    tmp = operands[3];\n   operands[3] = CONST1_RTX(<MODE>mode);\n   ix86_fixup_binary_operands_no_copy (PLUS, <MODE>mode, operands);\n+\n+  if (<mask_applied>)\n+    {\n+      operands[5] = operands[3];\n+      operands[3] = tmp;\n+    }\n })\n \n-(define_insn \"*<sse2_avx2>_uavg<mode>3\"\n-  [(set (match_operand:VI12_AVX2 0 \"register_operand\" \"=x,x\")\n+(define_insn \"*<sse2_avx2>_uavg<mode>3<mask_name>\"\n+  [(set (match_operand:VI12_AVX2 0 \"register_operand\" \"=x,v\")\n \t(truncate:VI12_AVX2\n \t  (lshiftrt:<ssedoublemode>\n \t    (plus:<ssedoublemode>\n \t      (plus:<ssedoublemode>\n \t\t(zero_extend:<ssedoublemode>\n-\t\t  (match_operand:VI12_AVX2 1 \"nonimmediate_operand\" \"%0,x\"))\n+\t\t  (match_operand:VI12_AVX2 1 \"nonimmediate_operand\" \"%0,v\"))\n \t\t(zero_extend:<ssedoublemode>\n-\t\t  (match_operand:VI12_AVX2 2 \"nonimmediate_operand\" \"xm,xm\")))\n-\t      (match_operand:VI12_AVX2 3 \"const1_operand\"))\n+\t\t  (match_operand:VI12_AVX2 2 \"nonimmediate_operand\" \"xm,vm\")))\n+\t      (match_operand:VI12_AVX2 <mask_expand_op3> \"const1_operand\"))\n \t    (const_int 1))))]\n-  \"TARGET_SSE2 && ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n+  \"TARGET_SSE2 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\n+   && ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n   \"@\n    pavg<ssemodesuffix>\\t{%2, %0|%0, %2}\n-   vpavg<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+   vpavg<ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseiadd\")\n    (set_attr \"prefix_data16\" \"1,*\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix\" \"orig,<mask_prefix>\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n ;; The correct representation for this is absolutely enormous, and"}]}