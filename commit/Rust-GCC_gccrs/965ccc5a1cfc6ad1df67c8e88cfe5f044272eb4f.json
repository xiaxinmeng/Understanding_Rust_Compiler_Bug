{"sha": "965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY1Y2NjNWExY2ZjNmFkMWRmNjdjOGU4OGNmZTVmMDQ0MjcyZWI0Zg==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2004-05-20T11:45:26Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2004-05-20T11:45:26Z"}, "message": "Makefile.in (GTFILES): Add $(srcdir)/reload.h.\n\n\t* Makefile.in (GTFILES): Add $(srcdir)/reload.h.\n\t* gengtype.c (open_base_files): Include reload.h in ifiles.\n\t* reload.h (reg_equiv_memory_loc_varray): Declare.\n\t* reload1.c (reg_equiv_memory_loc_varray): New variable.\n\t(init_reload): Initialize it.\n\t(reload): Instead of freeing reg_equiv_memory_loc, 'grow'\n\treg_equiv_memory_loc_varray to size 0.\n\t* ra.c (reg_alloc): Allocate reg_equiv_memory_loc by\n\tgrowing reg_equiv_memory_loc_varray to the desired size.\n\t* passes.c (rest_of_handle_old_regalloc): Likewise.\n\t* reload.c: Amend comment on calling init_reload.\n\nFrom-SVN: r82050", "tree": {"sha": "9c02ce26170091fbc2cb20b4806f8a3edce09bd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c02ce26170091fbc2cb20b4806f8a3edce09bd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f/comments", "author": null, "committer": null, "parents": [{"sha": "98d784a90b1eaf326983efce3465531ba3b79d00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98d784a90b1eaf326983efce3465531ba3b79d00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98d784a90b1eaf326983efce3465531ba3b79d00"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "24e1c24ba43142e1abd0f94c700b7ee4aba34e21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f", "patch": "@@ -1,3 +1,17 @@\n+2004-05-20  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* Makefile.in (GTFILES): Add $(srcdir)/reload.h.\n+\t* gengtype.c (open_base_files): Include reload.h in ifiles.\n+\t* reload.h (reg_equiv_memory_loc_varray): Declare.\n+\t* reload1.c (reg_equiv_memory_loc_varray): New variable.\n+\t(init_reload): Initialize it.\n+\t(reload): Instead of freeing reg_equiv_memory_loc, 'grow'\n+\treg_equiv_memory_loc_varray to size 0.\n+\t* ra.c (reg_alloc): Allocate reg_equiv_memory_loc by\n+\tgrowing reg_equiv_memory_loc_varray to the desired size.\n+\t* passes.c (rest_of_handle_old_regalloc): Likewise.\n+\t* reload.c: Amend comment on calling init_reload.\n+\n 2004-05-20  Nick Clifton  <nickc@redhat.com>\n \n \t* config/c4x/c4x.h (INITIALIZE_TRAMPOLINE): Replace 'tramp'"}, {"sha": "35f8bcbccb1b8104f3e02d4dd37495db12bf798f", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f", "patch": "@@ -2265,7 +2265,7 @@ GTFILES = $(srcdir)/input.h $(srcdir)/coretypes.h $(srcdir)/cpplib.h \\\n   $(srcdir)/optabs.h $(srcdir)/tree.h $(srcdir)/libfuncs.h $(srcdir)/hashtable.h \\\n   $(srcdir)/real.h $(srcdir)/varray.h $(srcdir)/insn-addr.h $(srcdir)/hwint.h \\\n   $(srcdir)/cselib.h $(srcdir)/basic-block.h  $(srcdir)/cgraph.h \\\n-  $(srcdir)/c-common.h $(srcdir)/c-tree.h \\\n+  $(srcdir)/c-common.h $(srcdir)/c-tree.h $(srcdir)/reload.h \\\n   $(srcdir)/alias.c $(srcdir)/bitmap.c $(srcdir)/cselib.c $(srcdir)/cgraph.c \\\n   $(srcdir)/dbxout.c $(srcdir)/dwarf2out.c $(srcdir)/dwarf2asm.c \\\n   $(srcdir)/dojump.c \\"}, {"sha": "95c88efd48bc0dd4dcb6b973ffcf4c490db6f874", "filename": "gcc/gengtype.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f", "patch": "@@ -1100,7 +1100,7 @@ open_base_files (void)\n       \"function.h\", \"insn-config.h\", \"expr.h\", \"hard-reg-set.h\",\n       \"basic-block.h\", \"cselib.h\", \"insn-addr.h\", \"optabs.h\",\n       \"libfuncs.h\", \"debug.h\", \"ggc.h\", \"cgraph.h\",\n-      \"tree-alias-type.h\", \"tree-flow.h\",\n+      \"tree-alias-type.h\", \"tree-flow.h\", \"reload.h\",\n       NULL\n     };\n     const char *const *ifp;"}, {"sha": "841e361149cd7de49cbe39b00450396236b7bf47", "filename": "gcc/passes.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f", "patch": "@@ -624,7 +624,8 @@ rest_of_handle_old_regalloc (tree decl, rtx insns)\n   allocate_reg_info (max_regno, FALSE, TRUE);\n \n   /* And the reg_equiv_memory_loc array.  */\n-  reg_equiv_memory_loc = xcalloc (max_regno, sizeof (rtx));\n+  VARRAY_GROW (reg_equiv_memory_loc_varray, max_regno);\n+  reg_equiv_memory_loc = &VARRAY_RTX (reg_equiv_memory_loc_varray, 0);\n \n   allocate_initial_values (reg_equiv_memory_loc);\n "}, {"sha": "acc1be57e335fab43d08c9545825d0599677a33a", "filename": "gcc/ra.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f/gcc%2Fra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f/gcc%2Fra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra.c?ref=965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f", "patch": "@@ -887,7 +887,8 @@ reg_alloc (void)\n \t\t\t \"after allocation/spilling, before reload\", NULL);\n \n   /* Allocate the reg_equiv_memory_loc array for reload.  */\n-  reg_equiv_memory_loc = xcalloc (max_regno, sizeof (rtx));\n+  VARRAY_GROW (reg_equiv_memory_loc_varray, max_regno);\n+  reg_equiv_memory_loc = &VARRAY_RTX (reg_equiv_memory_loc_varray, 0);\n   /* And possibly initialize it.  */\n   allocate_initial_values (reg_equiv_memory_loc);\n   /* And one last regclass pass just before reload.  */"}, {"sha": "dc5d9f70e5666ec19f301d2b9f3896a6bbe5dd26", "filename": "gcc/reload.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f", "patch": "@@ -27,6 +27,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    ought to be used instead.\n \n    Before processing the first insn of the function, call `init_reload'.\n+   init_reload actually has to be called earlier anyway.\n \n    To scan an insn, call `find_reloads'.  This does two things:\n    1. sets up tables describing which values must be reloaded"}, {"sha": "166d2ab0647724e59155ed2ea0c2ea0885d10bfc", "filename": "gcc/reload.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f/gcc%2Freload.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f/gcc%2Freload.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.h?ref=965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f", "patch": "@@ -164,6 +164,7 @@ extern struct reload rld[MAX_RELOADS];\n extern int n_reloads;\n #endif\n \n+extern GTY (()) struct varray_head_tag *reg_equiv_memory_loc_varray;\n extern rtx *reg_equiv_constant;\n extern rtx *reg_equiv_memory_loc;\n extern rtx *reg_equiv_address;"}, {"sha": "428228052dd45fe47a475ed84ae251b72c3b1165", "filename": "gcc/reload1.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=965ccc5a1cfc6ad1df67c8e88cfe5f044272eb4f", "patch": "@@ -102,6 +102,10 @@ rtx *reg_equiv_constant;\n    is transferred to either reg_equiv_address or reg_equiv_mem.  */\n rtx *reg_equiv_memory_loc;\n \n+/* We allocate reg_equiv_memory_loc inside a varray so that the garbage\n+   collector can keep track of what is inside.  */\n+varray_type reg_equiv_memory_loc_varray;\n+\n /* Element N is the address of stack slot to which pseudo reg N is equivalent.\n    This is used when the address is not valid as a memory address\n    (because its displacement is too big for the machine.)  */\n@@ -482,6 +486,7 @@ init_reload (void)\n \n   INIT_REG_SET (&spilled_pseudos);\n   INIT_REG_SET (&pseudos_counted);\n+  VARRAY_RTX_INIT (reg_equiv_memory_loc_varray, 0, \"reg_equiv_memory_loc\");\n }\n \n /* List of insn chains that are currently unused.  */\n@@ -1236,8 +1241,7 @@ reload (rtx first, int global)\n   if (reg_equiv_constant)\n     free (reg_equiv_constant);\n   reg_equiv_constant = 0;\n-  if (reg_equiv_memory_loc)\n-    free (reg_equiv_memory_loc);\n+  VARRAY_GROW (reg_equiv_memory_loc_varray, 0);\n   reg_equiv_memory_loc = 0;\n \n   if (offsets_known_at)"}]}