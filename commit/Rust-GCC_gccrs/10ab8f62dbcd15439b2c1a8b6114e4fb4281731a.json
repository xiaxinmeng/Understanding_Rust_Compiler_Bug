{"sha": "10ab8f62dbcd15439b2c1a8b6114e4fb4281731a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBhYjhmNjJkYmNkMTU0MzliMmMxYThiNjExNGU0ZmI0MjgxNzMxYQ==", "commit": {"author": {"name": "Fabien Ch\u00eane", "email": "fabien.chene@gmail.com", "date": "2010-04-30T04:23:00Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-04-30T04:23:00Z"}, "message": "re PR c++/43890 (invalid uninitialized reference in class)\n\n\tPR c++/43890\n\t* init.c (diagnose_uninitialized_cst_or_ref_member): check for\n\tuser-provided constructor while recursing.\n\nFrom-SVN: r158918", "tree": {"sha": "180e3f0b506253acf5bc6453cf31dc9fc944bbd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/180e3f0b506253acf5bc6453cf31dc9fc944bbd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10ab8f62dbcd15439b2c1a8b6114e4fb4281731a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10ab8f62dbcd15439b2c1a8b6114e4fb4281731a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10ab8f62dbcd15439b2c1a8b6114e4fb4281731a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10ab8f62dbcd15439b2c1a8b6114e4fb4281731a/comments", "author": null, "committer": null, "parents": [{"sha": "1b5e827bae54c7a7b6901e7dd3e5e6034959cd23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b5e827bae54c7a7b6901e7dd3e5e6034959cd23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b5e827bae54c7a7b6901e7dd3e5e6034959cd23"}], "stats": {"total": 72, "additions": 63, "deletions": 9}, "files": [{"sha": "58815e9b86ae3c73a2670c8609a21e4bf432b264", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10ab8f62dbcd15439b2c1a8b6114e4fb4281731a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10ab8f62dbcd15439b2c1a8b6114e4fb4281731a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=10ab8f62dbcd15439b2c1a8b6114e4fb4281731a", "patch": "@@ -1,3 +1,9 @@\n+2010-04-29  Fabien Ch\u00eane  <fabien.chene@gmail.com>\n+\n+\tPR c++/43890\n+\t* init.c (diagnose_uninitialized_cst_or_ref_member): check for\n+\tuser-provided constructor while recursing.\n+\n 2010-04-28  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c++/9335"}, {"sha": "70e3d387e9e30d4a841254cd6fe8c6ec654f3b64", "filename": "gcc/cp/init.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10ab8f62dbcd15439b2c1a8b6114e4fb4281731a/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10ab8f62dbcd15439b2c1a8b6114e4fb4281731a/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=10ab8f62dbcd15439b2c1a8b6114e4fb4281731a", "patch": "@@ -1779,6 +1779,9 @@ diagnose_uninitialized_cst_or_ref_member_1 (tree type, tree origin,\n {\n   tree field;\n \n+  if (type_has_user_provided_constructor (type))\n+    return;\n+\n   for (field = TYPE_FIELDS (type); field; field = TREE_CHAIN (field))\n     {\n       tree field_type;\n@@ -1791,8 +1794,8 @@ diagnose_uninitialized_cst_or_ref_member_1 (tree type, tree origin,\n       if (TREE_CODE (field_type) == REFERENCE_TYPE)\n \t{\n \t  if (using_new)\n-\t    error (\"uninitialized reference member in %q#T using %<new%>\",\n-\t\t   origin);\n+\t    error (\"uninitialized reference member in %q#T \"\n+\t\t   \"using %<new%> without new-initializer\", origin);\n \t  else\n \t    error (\"uninitialized reference member in %q#T\", origin);\n \t  inform (DECL_SOURCE_LOCATION (field),\n@@ -1802,8 +1805,8 @@ diagnose_uninitialized_cst_or_ref_member_1 (tree type, tree origin,\n       if (CP_TYPE_CONST_P (field_type))\n \t{\n \t  if (using_new)\n-\t    error (\"uninitialized const member in %q#T using %<new%>\",\n-\t\t   origin);\n+\t    error (\"uninitialized const member in %q#T \"\n+\t\t   \"using %<new%> without new-initializer\", origin);\n \t  else\n \t    error (\"uninitialized const member in %q#T\", origin);\n \t  inform (DECL_SOURCE_LOCATION (field),\n@@ -1908,13 +1911,13 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n \n   is_initialized = (TYPE_NEEDS_CONSTRUCTING (elt_type) || *init != NULL);\n \n-  if (*init == NULL && !type_has_user_provided_constructor (elt_type))\n+  if (*init == NULL)\n     {\n-      bool uninitialized_error = false;\n+      bool maybe_uninitialized_error = false;\n       /* A program that calls for default-initialization [...] of an\n \t entity of reference type is ill-formed. */\n       if (CLASSTYPE_REF_FIELDS_NEED_INIT (elt_type))\n-\tuninitialized_error = true;\n+\tmaybe_uninitialized_error = true;\n \n       /* A new-expression that creates an object of type T initializes\n \t that object as follows:\n@@ -1929,9 +1932,9 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n \t   const-qualified type, the program is ill-formed; */\n \n       if (CLASSTYPE_READONLY_FIELDS_NEED_INIT (elt_type))\n-\tuninitialized_error = true;\n+\tmaybe_uninitialized_error = true;\n \n-      if (uninitialized_error)\n+      if (maybe_uninitialized_error)\n \t{\n \t  if (complain & tf_error)\n \t    diagnose_uninitialized_cst_or_ref_member (elt_type,"}, {"sha": "9dfc098770fb1ddf89693a0560abf8acef229db5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10ab8f62dbcd15439b2c1a8b6114e4fb4281731a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10ab8f62dbcd15439b2c1a8b6114e4fb4281731a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=10ab8f62dbcd15439b2c1a8b6114e4fb4281731a", "patch": "@@ -1,3 +1,9 @@\n+2010-04-29  Fabien Ch\u00eane  <fabien.chene@gmail.com>\n+\n+\tPR c++/43890\n+\t* init.c (diagnose_uninitialized_cst_or_ref_member): check for\n+\tuser-provided constructor while recursing.\n+\n 2010-04-29  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/42274"}, {"sha": "1b2807d0d98127efcc497300f1e03a4ca33cc14d", "filename": "gcc/testsuite/g++.dg/init/pr43890.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10ab8f62dbcd15439b2c1a8b6114e4fb4281731a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr43890.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10ab8f62dbcd15439b2c1a8b6114e4fb4281731a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr43890.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr43890.C?ref=10ab8f62dbcd15439b2c1a8b6114e4fb4281731a", "patch": "@@ -0,0 +1,39 @@\n+// PR c++/43890\n+// { dg-do compile }\n+\n+class Outer\n+{\n+  public:\n+  Outer()\n+  : i(*this)\n+  {\n+  }\n+\n+  class Inner\n+  {\n+    public:\n+    Inner(Outer& o)\n+    : o(o)\n+    , i(0)\n+    {\n+    }\n+\n+    private:\n+    Outer& o;\n+    int const i;\n+  };\n+\n+  private:\n+  Inner i;\n+};\n+\n+class A {\n+  Outer o;\n+};\n+\n+int main()\n+{\n+  A *a = new A;\n+\n+  return 0;\n+}"}]}