{"sha": "6adbb51eaa85f5bfed1ee06327daca306d48986d", "node_id": "C_kwDOANBUbNoAKDZhZGJiNTFlYWE4NWY1YmZlZDFlZTA2MzI3ZGFjYTMwNmQ0ODk4NmQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-22T07:39:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-22T07:39:40Z"}, "message": "calls: Fix error recovery after sorry differently [PR104989]\n\nOn Mon, Feb 28, 2022 at 07:52:56AM -0000, Roger Sayle wrote:\n> This patch resolves PR c++/84964 which is an ICE in the middle-end after\n> emitting a \"sorry, unimplemented\" message, and is a regression from\n> earlier releases of GCC.  This issue is that after encountering a\n> function call requiring an unreasonable amount of stack space, the\n> code continues and falls foul of an assert checking that stack pointer\n> has been correctly updated.  The fix is to (locally) consider aborted\n> function calls as \"no return\", which skips this downstream sanity check.\n\nAs can be seen on PR104989, just setting ECF_NORETURN after sorry is quite\nrisky and leads to other ICEs.  The problem is that ECF_NORETURN calls\nbetter should be at the end of basic blocks that don't have any fallthru\nsuccessor edges, otherwise we can ICE later.\n\nThis patch instead sets sibcall_failure if in pass == 0 (sibcall_failure\nmeans that the tail call sequence is not useful/not desirable and throws\nit away) and otherwise sets a new bool variable that will let us pass\nthe assertion and also throws away the whole call sequence, I think that is\nbest for error recovery.\n\n2022-03-22  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR rtl-optimization/104989\n\t* calls.cc (expand_call): Don't set ECF_NORETURN in flags after\n\tsorry for passing too large argument, instead set sibcall_failure\n\tfor pass == 0, or a new normal_failure flag otherwise.  If\n\tnormal_failure is set, don't assert all stack has been deallocated\n\tat the end and throw away the whole insn sequence.\n\n\t* g++.dg/other/pr104989.C: New test.", "tree": {"sha": "5f42d2003f8bf77116b99993e27321345c95c02e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f42d2003f8bf77116b99993e27321345c95c02e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6adbb51eaa85f5bfed1ee06327daca306d48986d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6adbb51eaa85f5bfed1ee06327daca306d48986d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6adbb51eaa85f5bfed1ee06327daca306d48986d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6adbb51eaa85f5bfed1ee06327daca306d48986d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6bc4835659d24edc2bf5de13bfe8f59ae409ff3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6bc4835659d24edc2bf5de13bfe8f59ae409ff3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6bc4835659d24edc2bf5de13bfe8f59ae409ff3"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "e13469cfd43b5bdd4ca0d2b8458a9e4f996e36e9", "filename": "gcc/calls.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6adbb51eaa85f5bfed1ee06327daca306d48986d/gcc%2Fcalls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6adbb51eaa85f5bfed1ee06327daca306d48986d/gcc%2Fcalls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.cc?ref=6adbb51eaa85f5bfed1ee06327daca306d48986d", "patch": "@@ -3068,6 +3068,7 @@ expand_call (tree exp, rtx target, int ignore)\n   for (pass = try_tail_call ? 0 : 1; pass < 2; pass++)\n     {\n       int sibcall_failure = 0;\n+      bool normal_failure = false;\n       /* We want to emit any pending stack adjustments before the tail\n \t recursion \"call\".  That way we know any adjustment after the tail\n \t recursion call can be ignored if we indeed use the tail\n@@ -3448,7 +3449,10 @@ expand_call (tree exp, rtx target, int ignore)\n \t        {\n \t          sorry (\"passing too large argument on stack\");\n \t\t  /* Don't worry about stack clean-up.  */\n-\t\t  flags |= ECF_NORETURN;\n+\t\t  if (pass == 0)\n+\t\t    sibcall_failure = 1;\n+\t\t  else\n+\t\t    normal_failure = true;\n \t\t  continue;\n \t\t}\n \n@@ -3905,9 +3909,12 @@ expand_call (tree exp, rtx target, int ignore)\n \n \t  /* Verify that we've deallocated all the stack we used.  */\n \t  gcc_assert ((flags & ECF_NORETURN)\n+\t\t      || normal_failure\n \t\t      || known_eq (old_stack_allocated,\n \t\t\t\t   stack_pointer_delta\n \t\t\t\t   - pending_stack_adjust));\n+\t  if (normal_failure)\n+\t    normal_call_insns = NULL;\n \t}\n \n       /* If something prevents making this a sibling call,"}, {"sha": "8b1f79b5f9b6f345fed5cdb6b8d0e304551a8a5f", "filename": "gcc/testsuite/g++.dg/other/pr104989.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6adbb51eaa85f5bfed1ee06327daca306d48986d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr104989.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6adbb51eaa85f5bfed1ee06327daca306d48986d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr104989.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr104989.C?ref=6adbb51eaa85f5bfed1ee06327daca306d48986d", "patch": "@@ -0,0 +1,9 @@\n+// PR rtl-optimization/104989\n+// { dg-do compile }\n+// { dg-options \"-fnon-call-exceptions\" }\n+\n+struct a {\n+  short b : -1ULL;\n+};\n+void c(...) { c(a()); }\n+// { dg-excess-errors \"\" }"}]}