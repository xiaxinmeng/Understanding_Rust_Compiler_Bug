{"sha": "f7b8b261e78a327c70188a30778eb1268c91cdec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdiOGIyNjFlNzhhMzI3YzcwMTg4YTMwNzc4ZWIxMjY4YzkxY2RlYw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-26T18:31:36Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-26T18:31:36Z"}, "message": "Don't permit embedded field to be pointer to interface.\n\nFrom-SVN: r171558", "tree": {"sha": "9e1c9bd06f28c5c0449f56fbed961b272344de40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e1c9bd06f28c5c0449f56fbed961b272344de40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7b8b261e78a327c70188a30778eb1268c91cdec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7b8b261e78a327c70188a30778eb1268c91cdec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7b8b261e78a327c70188a30778eb1268c91cdec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7b8b261e78a327c70188a30778eb1268c91cdec/comments", "author": null, "committer": null, "parents": [{"sha": "84b4e061886a5d9b88d278275020d7fca0b8efcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84b4e061886a5d9b88d278275020d7fca0b8efcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84b4e061886a5d9b88d278275020d7fca0b8efcb"}], "stats": {"total": 36, "additions": 13, "deletions": 23}, "files": [{"sha": "f1a2ec7cb5537dd7f0af58eb8cb05f64424693a9", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7b8b261e78a327c70188a30778eb1268c91cdec/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7b8b261e78a327c70188a30778eb1268c91cdec/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=f7b8b261e78a327c70188a30778eb1268c91cdec", "patch": "@@ -10135,7 +10135,10 @@ Interface_field_reference_expression::do_check_types(Gogo*)\n \n   Interface_type* interface_type = type->interface_type();\n   if (interface_type == NULL)\n-    this->report_error(_(\"expected interface or pointer to interface\"));\n+    {\n+      if (!type->is_error_type())\n+\tthis->report_error(_(\"expected interface or pointer to interface\"));\n+    }\n   else\n     {\n       const Typed_identifier* method ="}, {"sha": "6ca22cb13b0f95224f0ed8e4612a008e565e97b0", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7b8b261e78a327c70188a30778eb1268c91cdec/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7b8b261e78a327c70188a30778eb1268c91cdec/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=f7b8b261e78a327c70188a30778eb1268c91cdec", "patch": "@@ -3464,6 +3464,14 @@ Struct_type::do_verify()\n \t      p->set_type(Type::make_error_type());\n \t      return false;\n \t    }\n+\t  if (t->points_to() != NULL\n+\t      && t->points_to()->interface_type() != NULL)\n+\t    {\n+\t      error_at(p->location(),\n+\t\t       \"embedded type may not be pointer to interface\");\n+\t      p->set_type(Type::make_error_type());\n+\t      return false;\n+\t    }\n \t}\n     }\n   return ret;"}, {"sha": "2fddee1905a06394dfa1be4a2c702649923fb907", "filename": "gcc/testsuite/go.test/test/interface/embed.go", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7b8b261e78a327c70188a30778eb1268c91cdec/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fembed.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7b8b261e78a327c70188a30778eb1268c91cdec/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fembed.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fembed.go?ref=f7b8b261e78a327c70188a30778eb1268c91cdec", "patch": "@@ -4,7 +4,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// Check methods derived from embedded interface and *interface values.\n+// Check methods derived from embedded interface values.\n \n package main\n \n@@ -19,18 +19,12 @@ func (t T) M() int64 { return int64(t) }\n var t = T(Value)\n var pt = &t\n var ti Inter = t\n-var pti = &ti\n \n type S struct { Inter }\n var s = S{ ti }\n var ps = &s\n \n-type SP struct { *Inter }\n-var sp = SP{ &ti }\n-var psp = &sp\n-\n var i Inter\n-var pi = &i\n \n var ok = true\n \n@@ -45,35 +39,20 @@ func main() {\n \tcheck(\"t.M()\", t.M())\n \tcheck(\"pt.M()\", pt.M())\n \tcheck(\"ti.M()\", ti.M())\n-\tcheck(\"pti.M()\", pti.M())\n \tcheck(\"s.M()\", s.M())\n \tcheck(\"ps.M()\", ps.M())\n-\tcheck(\"sp.M()\", sp.M())\n-\tcheck(\"psp.M()\", psp.M())\n \n \ti = t\n \tcheck(\"i = t; i.M()\", i.M())\n-\tcheck(\"i = t; pi.M()\", pi.M())\n \n \ti = pt\n \tcheck(\"i = pt; i.M()\", i.M())\n-\tcheck(\"i = pt; pi.M()\", pi.M())\n \n \ti = s\n \tcheck(\"i = s; i.M()\", i.M())\n-\tcheck(\"i = s; pi.M()\", pi.M())\n \n \ti = ps\n \tcheck(\"i = ps; i.M()\", i.M())\n-\tcheck(\"i = ps; pi.M()\", pi.M())\n-\n-\ti = sp\n-\tcheck(\"i = sp; i.M()\", i.M())\n-\tcheck(\"i = sp; pi.M()\", pi.M())\n-\n-\ti = psp\n-\tcheck(\"i = psp; i.M()\", i.M())\n-\tcheck(\"i = psp; pi.M()\", pi.M())\n \n \tif !ok {\n \t\tprintln(\"BUG: interface10\")"}]}