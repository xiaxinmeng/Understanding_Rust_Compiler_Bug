{"sha": "9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU5NmRkZDY3ZWY3MTA2Y2MwZDZlYWMwYmNmYThmZTI0YjczZjUwZA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2001-06-26T19:18:37Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2001-06-26T19:18:37Z"}, "message": "toplev.c (decode_f_option): Adjust setting.\n\n\t* toplev.c (decode_f_option): Adjust setting.\n\t(toplev_main): Call diagnostic_initialize.  Remove call to\n\treshape_diagnostic_buffer._\n\n\t* diagnostic.h (struct output_buffer): Add new field format_decoder.\n\t(diagnostic_format_decoder): New macro.\n\t(diagnostic_prefixing_rule): Likewise.\n\t(diagnostic_line_cutoff): Likewise.\n\t(set_message_prefixing_rule): Remove.\n\n\t* diagnostic.c (lang_printer): Remove.\n\t(diagnostic_message_length_per_line): Likewise.\n\t(current_prefixing_rule): Likewise.\n\t(initialize_diagnostics): Rename to...\n\t(diagnostic_initialize): ...this. Tweak.\n\t(default_initialize_buffer): Remove.\n\t(reshape_diagnostic_buffer): Likewise.\n\t(init_output_buffer): Adjust prefixing rule setting.\n\t(output_format): Use format_decoder from the output_buffer.\n\n\t* c-lang.c (c_init): Adjust tree formatter setting.\n\ncp/\n  \t* error.c (init_error): Adjust settings.\n\nFrom-SVN: r43588", "tree": {"sha": "ddbcd8386d8c592593807dad30877f6e735fbb0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddbcd8386d8c592593807dad30877f6e735fbb0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d/comments", "author": null, "committer": null, "parents": [{"sha": "5e3caf26130ce7ec7e34b28e4f412c6e7c313eae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e3caf26130ce7ec7e34b28e4f412c6e7c313eae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e3caf26130ce7ec7e34b28e4f412c6e7c313eae"}], "stats": {"total": 153, "additions": 71, "deletions": 82}, "files": [{"sha": "44d7294847de8b002c072052f0b189f617d59c86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d", "patch": "@@ -1,3 +1,27 @@\n+2001-06-26  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* toplev.c (decode_f_option): Adjust setting.\n+\t(toplev_main): Call diagnostic_initialize.  Remove call to\n+\treshape_diagnostic_buffer._\n+\n+\t* diagnostic.h (struct output_buffer): Add new field format_decoder.\n+\t(diagnostic_format_decoder): New macro.\n+\t(diagnostic_prefixing_rule): Likewise.\n+\t(diagnostic_line_cutoff): Likewise.\n+\t(set_message_prefixing_rule): Remove.\n+\n+\t* diagnostic.c (lang_printer): Remove.\n+\t(diagnostic_message_length_per_line): Likewise.\n+\t(current_prefixing_rule): Likewise.\n+\t(initialize_diagnostics): Rename to...\n+\t(diagnostic_initialize): ...this. Tweak.\n+\t(default_initialize_buffer): Remove.\n+\t(reshape_diagnostic_buffer): Likewise.\n+\t(init_output_buffer): Adjust prefixing rule setting.\n+\t(output_format): Use format_decoder from the output_buffer.\n+\n+\t* c-lang.c (c_init): Adjust tree formatter setting.\n+\n 2001-06-26  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* config/i386/sol2.h (CPP_SPEC): Pass -P for .S files."}, {"sha": "8942e859cdf199edfea2f10fe3de21cfa2fb5194", "filename": "gcc/c-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d", "patch": "@@ -88,7 +88,7 @@ c_init ()\n   mark_lang_status = &mark_c_function_context;\n   lang_expand_expr = &c_expand_expr;\n   lang_safe_from_p = &c_safe_from_p;\n-  lang_printer = &c_tree_printer;\n+  diagnostic_format_decoder (global_dc) = &c_tree_printer;\n   lang_expand_decl_stmt = &c_expand_decl_stmt;\n   lang_missing_noreturn_ok_p = &c_missing_noreturn_ok_p;\n "}, {"sha": "33688d4c80277e37cfa1ac28a42e78339a805fd4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d", "patch": "@@ -2,6 +2,10 @@\n \n \t* error.c (init_error): Adjust settings.\n \n+2001-06-26  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* error.c (init_error): Adjust settings.\n+\n 2001-06-19  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* except.c (initialize_handler_parm): Expect __cxa_begin_catch to"}, {"sha": "5a8522a9f52b303425d64723ae24e47b4b6a0ff9", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d", "patch": "@@ -194,7 +194,7 @@ init_error ()\n   print_error_function = lang_print_error_function;\n   diagnostic_starter (global_dc) = cp_diagnostic_starter;\n   diagnostic_finalizer (global_dc) = cp_diagnostic_finalizer;\n-  lang_printer = cp_tree_printer;\n+  diagnostic_format_decoder (global_dc) = cp_tree_printer;\n   \n   init_output_buffer (scratch_buffer, /* prefix */NULL, /* line-width */0);\n }"}, {"sha": "8cee04eb9550cd31234f17eeb903d16a1281d23c", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d", "patch": "@@ -269,10 +269,10 @@ cxx_init_options ()\n   flag_bounds_check = -1;\n   /* By default wrap lines at 80 characters.  Is getenv (\"COLUMNS\")\n      preferable?  */\n-  diagnostic_message_length_per_line = 80;\n+  diagnostic_line_cutoff (global_dc) = 80;\n   /* By default, emit location information once for every\n      diagnostic message.  */\n-  set_message_prefixing_rule (DIAGNOSTICS_SHOW_PREFIX_ONCE);\n+  diagnostic_prefixing_rule (global_dc) = DIAGNOSTICS_SHOW_PREFIX_ONCE;\n }\n \n static void"}, {"sha": "c3ab80c0f493f6bd2643de2a225613df645e7ebe", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 13, "deletions": 51, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d", "patch": "@@ -105,9 +105,6 @@ static void error_recursion PARAMS ((void)) ATTRIBUTE_NORETURN;\n extern int rtl_dump_and_exit;\n extern int warnings_are_errors;\n \n-/* Front-end specific tree formatter, if non-NULL.  */\n-printer_fn lang_printer = NULL;\n-\n /* A diagnostic_context surrogate for stderr.  */\n static diagnostic_context global_diagnostic_context;\n diagnostic_context *global_dc = &global_diagnostic_context;\n@@ -129,15 +126,6 @@ static int last_error_tick;\n void (*print_error_function) PARAMS ((const char *)) =\n   default_print_error_function;\n \n-/* Maximum characters per line in automatic line wrapping mode.\n-   Zero means don't wrap lines. */\n-\n-int diagnostic_message_length_per_line;\n-\n-/* Used to control every diagnostic message formatting.  Front-ends should\n-   call set_message_prefixing_rule to set up their policies.  */\n-static diagnostic_prefixing_rule_t current_prefixing_rule;\n-\n /* Prevent recursion into the error handler.  */\n static int diagnostic_lock;\n \n@@ -179,24 +167,20 @@ record_last_error_function ()\n /* Initialize the diagnostic message outputting machinery.  */\n \n void\n-initialize_diagnostics ()\n+diagnostic_initialize (context)\n+     diagnostic_context *context;\n {\n-  /* By default, we don't line-wrap messages.  */\n-  diagnostic_message_length_per_line = 0;\n-  set_message_prefixing_rule (DIAGNOSTICS_SHOW_PREFIX_ONCE);\n+  memset (context, 0, sizeof *context);\n+  obstack_init (&context->buffer.obstack);\n \n-  /* Proceed to actual initialization.  */\n-  default_initialize_buffer (diagnostic_buffer);\n+  /* By default, diagnostics are sent to stderr.  */\n+  output_buffer_attached_stream (&context->buffer) = stderr;\n \n-  diagnostic_starter (global_dc) = default_diagnostic_starter;\n-  diagnostic_finalizer (global_dc) = default_diagnostic_finalizer;\n-}\n+  /* By default, we emit prefixes once per message.  */\n+  diagnostic_prefixing_rule (context) = DIAGNOSTICS_SHOW_PREFIX_ONCE;\n \n-void\n-set_message_prefixing_rule (rule)\n-     diagnostic_prefixing_rule_t rule;\n-{\n-  current_prefixing_rule = rule;\n+  diagnostic_starter (context) = default_diagnostic_starter;\n+  diagnostic_finalizer (context) = default_diagnostic_finalizer;\n }\n \n /* Returns true if BUFFER is in line-wrappind mode.  */\n@@ -252,7 +236,7 @@ output_set_maximum_length (buffer, length)\n      output_buffer *buffer;\n      int length;\n {\n- ideal_line_wrap_cutoff (buffer) = length;\n+  ideal_line_wrap_cutoff (buffer) = length;\n   set_real_maximum_length (buffer);\n }\n \n@@ -330,34 +314,12 @@ init_output_buffer (buffer, prefix, maximum_length)\n   obstack_init (&buffer->obstack);\n   output_buffer_attached_stream (buffer) = stderr;\n   ideal_line_wrap_cutoff (buffer) = maximum_length;\n-  prefixing_policy (buffer) = current_prefixing_rule;\n+  prefixing_policy (buffer) = diagnostic_prefixing_rule (global_dc);\n   output_set_prefix (buffer, prefix);\n   output_text_length (buffer) = 0;\n   clear_diagnostic_info (buffer);  \n }\n \n-/* Initialize BUFFER with a NULL prefix and current diagnostic message\n-   length cutoff.  */\n-\n-void\n-default_initialize_buffer (buffer)\n-     output_buffer *buffer;\n-{\n-  init_output_buffer (buffer, NULL, diagnostic_message_length_per_line);\n-}\n-\n-/* Recompute diagnostic_buffer's attributes to reflect any change\n-   in diagnostic formatting global options.  */\n-\n-void\n-reshape_diagnostic_buffer ()\n-{\n-  ideal_line_wrap_cutoff (diagnostic_buffer) =\n-    diagnostic_message_length_per_line;\n-  prefixing_policy (diagnostic_buffer) = current_prefixing_rule;\n-  set_real_maximum_length (diagnostic_buffer);\n-}\n-\n /* Reinitialize BUFFER.  */\n \n void\n@@ -776,7 +738,7 @@ output_format (buffer)\n           break;\n \n         default:\n-          if (! lang_printer || !(*lang_printer) (buffer))\n+          if (!buffer->format_decoder || !(*buffer->format_decoder) (buffer))\n             {\n               /* Hmmm.  The front-end failed to install a format translator\n                  but called us with an unrecognized format.  Sorry.  */"}, {"sha": "72aa297f6d3e5c70fb75f84b476d00bbf889d77d", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d", "patch": "@@ -116,6 +116,18 @@ struct output_buffer\n   /* This must be large enough to hold any printed integer or\n      floating-point value.  */\n   char digit_buffer[128];\n+\n+/* If non-NULL, this function formats data in the BUFFER. When called,\n+   output_buffer_text_cursor (BUFFER) points to a format code.\n+   FORMAT_DECODER should call output_add_string (and related functions)\n+   to add data to the BUFFER.  FORMAT_DECODER can read arguments from\n+   output_buffer_format_args (BUFFER) using VA_ARG.  If the BUFFER needs\n+   additional characters from the format string, it should advance\n+   the output_buffer_text_cursor (BUFFER) as it goes.  When FORMAT_DECODER\n+   returns, output_buffer_text_cursor (BUFFER) should point to the last\n+   character processed.  */\n+\n+  printer_fn format_decoder;\n };\n \n #define output_buffer_state(BUFFER) (BUFFER)->state\n@@ -177,20 +189,12 @@ struct diagnostic_context\n #define diagnostic_starter(DC) (DC)->begin_diagnostic\n #define diagnostic_finalizer(DC) (DC)->end_diagnostic\n #define diagnostic_auxiliary_data(DC) (DC)->x_data\n+#define diagnostic_format_decoder(DC) (DC)->buffer.format_decoder\n+#define diagnostic_prefixing_rule(DC) (DC)->buffer.state.prefixing_rule\n \n-/* If non-NULL, this function formats data in the BUFFER. When called,\n-   output_buffer_text_cursor (BUFFER) points to a format code.  LANG_PRINTER\n-   should call output_add_string (and related functions) to add data to\n-   the BUFFER.  LANG_PRINTER can read arguments from\n-   output_buffer_format_args (BUFFER) using VA_ARG.  If the BUFFER needs\n-   additional characters from the format string, it should advance\n-   the output_buffer_text_cursor (BUFFER) as it goes.  When LANG_PRINTER\n-   returns, output_buffer_text_cursor (BUFFER) should point to the last\n-   character processed.  */\n-\n-extern printer_fn lang_printer;\n-\n-extern int diagnostic_message_length_per_line;\n+/* Maximum characters per line in automatic line wrapping mode.\n+   Zero means don't wrap lines. */\n+#define diagnostic_line_cutoff(DC) (DC)->buffer.state.ideal_maximum_length\n \n /* This output buffer is used by front-ends that directly output\n    diagnostic messages without going through `error', `warning',\n@@ -225,9 +229,7 @@ extern void set_internal_error_function\tPARAMS ((void (*)\n \t\t\t\t\t\t PARAMS ((const char *,\n \t\t\t\t\t\t\t  va_list *))));\n extern void report_diagnostic\t\tPARAMS ((diagnostic_context *));\n-extern void initialize_diagnostics\tPARAMS ((void));\n-extern void reshape_diagnostic_buffer\tPARAMS ((void));\n-extern void default_initialize_buffer\tPARAMS ((output_buffer *));\n+extern void diagnostic_initialize\tPARAMS ((diagnostic_context *));\n extern void init_output_buffer\t\tPARAMS ((output_buffer *,\n \t\t\t\t\t\t const char *, int));\n extern void flush_diagnostic_buffer\tPARAMS ((void));\n@@ -237,7 +239,7 @@ extern const char *output_last_position PARAMS ((const output_buffer *));\n extern void output_set_prefix\t\tPARAMS ((output_buffer *,\n \t\t\t\t\t\t const char *));\n extern void output_destroy_prefix\tPARAMS ((output_buffer *));\n-extern void output_set_maximum_length\tPARAMS ((output_buffer *, int));\n+extern void output_set_maximum_length   PARAMS ((output_buffer *, int));\n extern void output_emit_prefix\t\tPARAMS ((output_buffer *));\n extern void output_add_newline\t\tPARAMS ((output_buffer *));\n extern void output_add_space\t\tPARAMS ((output_buffer *));\n@@ -253,7 +255,6 @@ extern void output_clear_message_text\tPARAMS ((output_buffer *));\n extern void output_printf\t\tPARAMS ((output_buffer *, const char *,\n \t\t\t\t\t\t ...)) ATTRIBUTE_PRINTF_2;\n extern int output_is_line_wrapping\tPARAMS ((output_buffer *));\n-extern void set_message_prefixing_rule\tPARAMS ((diagnostic_prefixing_rule_t));\n extern void output_verbatim\t\tPARAMS ((output_buffer *, const char *,\n \t\t\t\t\t\t ...)) ATTRIBUTE_PRINTF_2;\n extern void verbatim\t\t\tPARAMS ((const char *, ...))"}, {"sha": "670cd9748ab55a0e9f8dd58ef9a6b352b14f6f29", "filename": "gcc/toplev.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=9596ddd67ef7106cc0d6eac0bcfa8fe24b73f50d", "patch": "@@ -4184,16 +4184,17 @@ decode_f_option (arg)\n     }\n   else if ((option_value\n             = skip_leading_substring (arg, \"message-length=\")))\n-    diagnostic_message_length_per_line =\n-      read_integral_parameter (option_value, arg - 2,\n-\t\t\t       diagnostic_message_length_per_line);\n+    output_set_maximum_length\n+      (&global_dc->buffer, read_integral_parameter\n+       (option_value, arg - 2, diagnostic_line_cutoff (global_dc)));\n   else if ((option_value\n \t    = skip_leading_substring (arg, \"diagnostics-show-location=\")))\n     {\n       if (!strcmp (option_value, \"once\"))\n-\tset_message_prefixing_rule (DIAGNOSTICS_SHOW_PREFIX_ONCE);\n+        diagnostic_prefixing_rule (global_dc) = DIAGNOSTICS_SHOW_PREFIX_ONCE;\n       else if (!strcmp (option_value, \"every-line\"))\n-\tset_message_prefixing_rule (DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE);\n+        diagnostic_prefixing_rule (global_dc)\n+          = DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE;\n       else\n \terror (\"Unrecognized option `%s'\", arg - 2);\n     }\n@@ -4705,7 +4706,7 @@ toplev_main (argc, argv)\n   ggc_add_tree_root (&current_function_func_begin_label, 1);\n \n   /* Initialize the diagnostics reporting machinery.  */\n-  initialize_diagnostics ();\n+  diagnostic_initialize (global_dc);\n \n   /* Register the language-independent parameters.  */\n   add_params (lang_independent_params, LAST_PARAM);\n@@ -4888,9 +4889,6 @@ toplev_main (argc, argv)\n   if (exit_after_options)\n     exit (0);\n \n-  /* Reflect any language-specific diagnostic option setting.  */\n-  reshape_diagnostic_buffer ();\n-\n   /* Checker uses the frame pointer.  */\n   if (flag_check_memory_usage)\n     flag_omit_frame_pointer = 0;"}]}