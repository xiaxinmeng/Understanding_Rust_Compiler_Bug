{"sha": "ef3ddd4fa3d29318b5e05886382375712b9c1411", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYzZGRkNGZhM2QyOTMxOGI1ZTA1ODg2MzgyMzc1NzEyYjljMTQxMQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2009-07-02T17:52:37Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2009-07-02T17:52:37Z"}, "message": "typeck.c (cp_build_binary_op): Move warnings about use of NULL in arithmetic earlier and allow comparisions of...\n\n2009-07-02  Mark Mitchell  <mark@codesourcery.com>\n\n\t* typeck.c (cp_build_binary_op): Move warnings about use of NULL\n\tin arithmetic earlier and allow comparisions of NULL with\n\tpointers-to-members.\n\n2009-07-02  Mark Mitchell  <mark@codesourcery.com>\n\n\t* g++.dg/warn/null4.C: Extend.\n\nFrom-SVN: r149190", "tree": {"sha": "fd9bab8aa6e746e12c41996a03231a4540cf1e4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd9bab8aa6e746e12c41996a03231a4540cf1e4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef3ddd4fa3d29318b5e05886382375712b9c1411", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef3ddd4fa3d29318b5e05886382375712b9c1411", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef3ddd4fa3d29318b5e05886382375712b9c1411", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef3ddd4fa3d29318b5e05886382375712b9c1411/comments", "author": null, "committer": null, "parents": [{"sha": "2b110bfcc074f222a49d875c5f0f5ea370294b9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b110bfcc074f222a49d875c5f0f5ea370294b9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b110bfcc074f222a49d875c5f0f5ea370294b9f"}], "stats": {"total": 75, "additions": 55, "deletions": 20}, "files": [{"sha": "17ac9199ae973248e5a10d1173d37c66e3330236", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef3ddd4fa3d29318b5e05886382375712b9c1411/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef3ddd4fa3d29318b5e05886382375712b9c1411/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ef3ddd4fa3d29318b5e05886382375712b9c1411", "patch": "@@ -1,3 +1,9 @@\n+2009-07-02  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* typeck.c (cp_build_binary_op): Move warnings about use of NULL\n+\tin arithmetic earlier and allow comparisions of NULL with\n+\tpointers-to-members.\n+\n 2009-07-02  Jason Merrill  <jason@redhat.com>\n \n \tUse hash tables for template specialization lookup."}, {"sha": "871c1d36319dbe684efc1c3ca07b8d827073984c", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef3ddd4fa3d29318b5e05886382375712b9c1411/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef3ddd4fa3d29318b5e05886382375712b9c1411/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=ef3ddd4fa3d29318b5e05886382375712b9c1411", "patch": "@@ -3419,7 +3419,6 @@ cp_build_binary_op (location_t location,\n \n   /* If an error was already reported for one of the arguments,\n      avoid reporting another error.  */\n-\n   if (code0 == ERROR_MARK || code1 == ERROR_MARK)\n     return error_mark_node;\n \n@@ -3430,6 +3429,25 @@ cp_build_binary_op (location_t location,\n       return error_mark_node;\n     }\n \n+  /* Issue warnings about peculiar, but valid, uses of NULL.  */\n+  if ((orig_op0 == null_node || orig_op1 == null_node)\n+      /* It's reasonable to use pointer values as operands of &&\n+\t and ||, so NULL is no exception.  */\n+      && code != TRUTH_ANDIF_EXPR && code != TRUTH_ORIF_EXPR \n+      && ( /* Both are NULL (or 0) and the operation was not a\n+\t      comparison or a pointer subtraction.  */\n+\t  (null_ptr_cst_p (orig_op0) && null_ptr_cst_p (orig_op1) \n+\t   && code != EQ_EXPR && code != NE_EXPR && code != MINUS_EXPR) \n+\t  /* Or if one of OP0 or OP1 is neither a pointer nor NULL.  */\n+\t  || (!null_ptr_cst_p (orig_op0)\n+\t      && !TYPE_PTR_P (type0) && !TYPE_PTR_TO_MEMBER_P (type0))\n+\t  || (!null_ptr_cst_p (orig_op1) \n+\t      && !TYPE_PTR_P (type1) && !TYPE_PTR_TO_MEMBER_P (type1)))\n+      && (complain & tf_warning))\n+    /* Some sort of arithmetic operation involving NULL was\n+       performed.  */\n+    warning (OPT_Wpointer_arith, \"NULL used in arithmetic\");\n+\n   switch (code)\n     {\n     case MINUS_EXPR:\n@@ -4031,25 +4049,6 @@ cp_build_binary_op (location_t location,\n \t}\n     }\n \n-  /* Issue warnings about peculiar, but valid, uses of NULL.  */\n-  if ((orig_op0 == null_node || orig_op1 == null_node)\n-      /* It's reasonable to use pointer values as operands of &&\n-\t and ||, so NULL is no exception.  */\n-      && code != TRUTH_ANDIF_EXPR && code != TRUTH_ORIF_EXPR \n-      && ( /* Both are NULL (or 0) and the operation was not a comparison.  */\n-\t  (null_ptr_cst_p (orig_op0) && null_ptr_cst_p (orig_op1) \n-\t   && code != EQ_EXPR && code != NE_EXPR) \n-\t  /* Or if one of OP0 or OP1 is neither a pointer nor NULL.  */\n-\t  || (!null_ptr_cst_p (orig_op0) && TREE_CODE (TREE_TYPE (op0)) != POINTER_TYPE)\n-\t  || (!null_ptr_cst_p (orig_op1) && TREE_CODE (TREE_TYPE (op1)) != POINTER_TYPE))\n-      && (complain & tf_warning))\n-    /* Some sort of arithmetic operation involving NULL was\n-       performed.  Note that pointer-difference and pointer-addition\n-       have already been handled above, and so we don't end up here in\n-       that case.  */\n-    warning (OPT_Wpointer_arith, \"NULL used in arithmetic\");\n-  \n-\n   /* If CONVERTED is zero, both args will be converted to type RESULT_TYPE.\n      Then the expression will be built.\n      It will be given type FINAL_TYPE if that is nonzero;"}, {"sha": "51536203bb5beca4811e51c1def076c810eefa81", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef3ddd4fa3d29318b5e05886382375712b9c1411/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef3ddd4fa3d29318b5e05886382375712b9c1411/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ef3ddd4fa3d29318b5e05886382375712b9c1411", "patch": "@@ -1,3 +1,7 @@\n+2009-07-02  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.dg/warn/null4.C: Extend.\n+\n 2009-07-02  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/template/spec8.C: Fix."}, {"sha": "6aa4a097fadefefda64d70f0fc0ed6d60d80891d", "filename": "gcc/testsuite/g++.dg/warn/null4.C", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef3ddd4fa3d29318b5e05886382375712b9c1411/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnull4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef3ddd4fa3d29318b5e05886382375712b9c1411/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnull4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnull4.C?ref=ef3ddd4fa3d29318b5e05886382375712b9c1411", "patch": "@@ -11,9 +11,22 @@ int foo (void)\n   if (NULL < NULL) return -1; // { dg-warning \"NULL used in arithmetic\" } \n   if (NULL >= 0) return -1;   // { dg-warning \"NULL used in arithmetic\" } \n   if (NULL <= 0) return -1;   // { dg-warning \"NULL used in arithmetic\" } \n+  // Adding to the NULL pointer, which has no specific type, should\n+  // result in a warning; the type of the resulting expression is\n+  // actually \"int\", not a pointer type.\n+  if (NULL + 1) return -1;    // { dg-warning \"NULL used in arithmetic\" }\n+  if (1 + NULL) return -1;    // { dg-warning \"NULL used in arithmetic\" }\n   return 0;\n }\n \n+int *ip;\n+\n+struct S {};\n+typedef int S::*SPD;\n+typedef void (S::*SPF)(void);\n+SPD spd;\n+SPF spf;\n+\n int bar (void) \n {\n   if (NULL) return -1;\n@@ -25,5 +38,18 @@ int bar (void)\n   if (NULL != NULL) return -1;\n   if (NULL == 0) return -1;\n   if (NULL != 0) return -1;\n+  // Subtraction of pointers is vaild, so using NULL is OK.\n+  if (ip - NULL) return -1;\n+  if (NULL - NULL) return -1;\n+  // Comparing NULL with a pointer-to-member is OK.\n+  if (NULL == spd) return -1;\n+  if (spd == NULL) return -1;\n+  if (NULL != spd) return -1;\n+  if (spd != NULL) return -1;\n+  if (NULL == spf) return -1;\n+  if (spf == NULL) return -1;\n+  if (NULL != spf) return -1;\n+  if (spf != NULL) return -1;\n+\n   return 0;\n }"}]}