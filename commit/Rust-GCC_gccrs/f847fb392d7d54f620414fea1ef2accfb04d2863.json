{"sha": "f847fb392d7d54f620414fea1ef2accfb04d2863", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg0N2ZiMzkyZDdkNTRmNjIwNDE0ZmVhMWVmMmFjY2ZiMDRkMjg2Mw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-02T01:59:40Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-02T01:59:40Z"}, "message": "Changed the format of various sections to conform with GNU standard.\n\nDeleted dependencies on some header files.\nReplaced the use of the functions from memory.h with funtions like bzero.\nChanged the include format.\n\nFrom-SVN: r2019", "tree": {"sha": "fab580870ee394e7e6f6a9cb4a26e7b34cce46f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fab580870ee394e7e6f6a9cb4a26e7b34cce46f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f847fb392d7d54f620414fea1ef2accfb04d2863", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f847fb392d7d54f620414fea1ef2accfb04d2863", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f847fb392d7d54f620414fea1ef2accfb04d2863", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f847fb392d7d54f620414fea1ef2accfb04d2863/comments", "author": null, "committer": null, "parents": [{"sha": "4fc473c177ed213d0610e2699f4cab0193b31ce5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fc473c177ed213d0610e2699f4cab0193b31ce5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fc473c177ed213d0610e2699f4cab0193b31ce5"}], "stats": {"total": 194, "additions": 82, "deletions": 112}, "files": [{"sha": "d70bc5edbd0574f6a233d3bcfa02c5783868da5a", "filename": "gcc/objc/hash.h", "status": "modified", "additions": 82, "deletions": 112, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f847fb392d7d54f620414fea1ef2accfb04d2863/gcc%2Fobjc%2Fhash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f847fb392d7d54f620414fea1ef2accfb04d2863/gcc%2Fobjc%2Fhash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fhash.h?ref=f847fb392d7d54f620414fea1ef2accfb04d2863", "patch": "@@ -1,5 +1,3 @@\n-/* -*-c-*- */\n-\n /* Copyright (C) 1989, 1992 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n@@ -25,10 +23,13 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    the executable file might be covered by the GNU General Public License.  */\n \n /* \n-  $Header: /usr/user/dennis_glatting/ObjC/c-runtime/dispatch/RCS/hash.h,v 0.10 1992/08/18 04:46:58 dglattin Exp $\n+  $Header: /home/fsf/rms/c-runtime/dispatch/RCS/hash.h,v 0.11 1992/08/31 21:15:02 dglattin Exp rms $\n   $Author: dglattin $\n-  $Date: 1992/08/18 04:46:58 $\n+  $Date: 1992/08/31 21:15:02 $\n   $Log: hash.h,v $\n+ * Revision 0.11  1992/08/31  21:15:02  dglattin\n+ * minor documentation changes.\n+ *\n  * Revision 0.10  1992/08/18  04:46:58  dglattin\n  * Saving a working version before release.\n  *\n@@ -50,7 +51,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n  * Revision 0.5  1991/11/23  22:19:21  dennisg\n  * converted some entries in the hash structure from ints to shorts.\n  * this was done to use a less expensive division instruction\n- * in the hashIndex () routine.\n+ * in the hashIndex  routine.\n  *\n  * Revision 0.4  1991/11/21  22:25:19  dennisg\n  * deleted hash mask information from hash struct.\n@@ -71,18 +72,10 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #ifndef _hash_INCLUDE_GNU\n #define _hash_INCLUDE_GNU\n \n-                                                /* If someone is using a c++\n-                                                  compiler then adjust the \n-                                                  types in the file back \n-                                                  to C. */\n-#ifdef __cplusplus\n-extern \"C\" {\n-#endif\n \n-#include        <assert.h>\n-#include  <sys/types.h>\n+#include \"assert.h\"\n+#include \"mutex.h\"\n \n-#include        <mutex.h>\n \n /*\n  * This data structure is used to hold items\n@@ -92,16 +85,16 @@ extern \"C\" {\n  * Items in the cache are really of type void*.\n  */\n typedef struct cache_node {\n-  struct cache_node*  nextNode;                   /* Pointer to next entry on\n-                                                    the list.  NULL indicates\n-                                                    end of list. */\n-  void*               theKey;                     /* Key used to locate the\n-                                                    value.  Used to locate\n-                                                    value when more than one\n-                                                    key computes the same hash\n-                                                    value. */\n-  void*               theValue;                   /* Value stored for the\n-                                                    key. */\n+  struct cache_node *nextNode;\t/* Pointer to next entry on\n+\t\t\t\t   the list.  NULL indicates\n+\t\t\t\t   end of list. */\n+  void *theKey;\t\t\t/* Key used to locate the\n+\t\t\t\t   value.  Used to locate\n+\t\t\t\t   value when more than one\n+\t\t\t\t   key computes the same hash\n+\t\t\t\t   value. */\n+  void *theValue;\t\t/* Value stored for the\n+\t\t\t\t   key. */\n } CacheNode, *CacheNode_t;\n \n \n@@ -112,9 +105,9 @@ typedef struct cache_node {\n  *\n  * Unfortunately there is a mutual data structure reference problem with this\n  * typedef.  Therefore, to remove compiler warnings the functions passed to\n- * hash_new() will have to be casted to this type. \n+ * hash_new will have to be casted to this type. \n  */\n-typedef u_int   (*HashFunc)(void*, void*);\n+typedef unsigned int   (*HashFunc)(void*, void*);\n \n /*\n  * This data type is the function that compares two hash keys and returns an\n@@ -137,88 +130,72 @@ typedef struct cache {\n    * Variables used to implement the\n    *  hash itself.\n    */\n-  CacheNode_t  (* theNodeTable)[];                /* Pointer to an array of\n-                                                    hash nodes. */\n+  CacheNode_t  (*theNodeTable)[]; /* Pointer to an array of\n+\t\t\t\t     hash nodes. */\n   /*\n    * Variables used to track the size of the hash\n    *  table so to determine when to resize it.\n    */\n-  u_int       sizeOfHash,                        /* Number of buckets \n-                                                    allocated for the hash\n-                                                    table  (number of array\n-                                                    entries allocated for\n-                                                    \"theNodeTable\").  Must be\n-                                                    a power of two. */\n-              entriesInHash,                      /* Current number of entries\n-                                                    in the hash table. */\n-              mask;                               /* Precomputed mask. */\n+  unsigned int sizeOfHash,\t/* Number of buckets \n+\t\t\t\t   allocated for the hash\n+\t\t\t\t   table  (number of array\n+\t\t\t\t   entries allocated for\n+\t\t\t\t   \"theNodeTable\").  Must be\n+\t\t\t\t   a power of two. */\n+  unsigned int entriesInHash,\t/* Current number of entries\n+\t\t\t\t   in the hash table. */\n+  unsigned int mask;\t\t/* Precomputed mask. */\n   /*\n    * Variables used to implement indexing\n    *  through the hash table.\n    */\n-  u_int       lastBucket;                         /* Tracks which entry in the\n-                                                    array where the last value\n-                                                    was returned. */\n-                                                  /* Function used to compute\n-\t\t\t\t\t\t     a hash code given a key. \n-\t\t\t\t\t\t     This function is \n-\t\t\t\t\t\t     specified when the hash \n-\t\t\t\t\t\t     table is created. */\n+  unsigned int lastBucket;\t/* Tracks which entry in the\n+\t\t\t\t   array where the last value\n+\t\t\t\t   was returned. */\n+  /* Function used to compute a hash code given a key. \n+     This function is specified when the hash table is created. */\n   HashFunc    hashFunc;\n-                                                  /* Function used to compare \n-\t\t\t\t\t\t     two hash keys to determine\n-\t\t\t\t\t\t     if they are equal. */\n+  /* Function used to compare two hash keys to determine\n+     if they are equal. */\n   CompareFunc compareFunc;\n } Cache, *Cache_t;\n \n \n-                                                /* Prototypes for hash\n-                                                  functions. */\n-                                                /* Allocate and initialize \n-                                                  a hash table. */ \n+/* Allocate and initialize a hash table. */ \n Cache_t \n-hash_new (u_int sizeOfHash, HashFunc aHashFunc, CompareFunc aCompareFunc);\n-                                                /* Deallocate all of the\n-                                                  hash nodes and the cache\n-                                                  itself. */\n+hash_new (unsigned int sizeOfHash,\n+\t  HashFunc aHashFunc, CompareFunc aCompareFunc);\n+                       \n+/* Deallocate all of the hash nodes and the cache itself. */\n void \n hash_delete (Cache_t theCache);\n-                                                /* Add the key/value pair\n-                                                  to the hash table.  If the\n-                                                  hash table reaches a \n-                                                  level of fullnes then\n-                                                  it will be resized. \n+\n+/* Add the key/value pair to the hash table.  If the\n+   hash table reaches a level of fullnes then it will be resized. \n                                                    \n-                                                  assert() if the key is \n-                                                  already in the hash. */\n+   assert if the key is already in the hash. */\n void \n-hash_add (Cache_t* theCache, void* aKey, void* aValue);\n-                                                /* Remove the key/value pair\n-                                                  from the hash table.  \n-                                                  assert() if the key isn't \n-                                                  in the table. */\n+hash_add (Cache_t *theCache, void *aKey, void *aValue);\n+     \n+/* Remove the key/value pair from the hash table.  \n+   assert if the key isn't in the table. */\n void \n-hash_remove (Cache_t theCache, void* aKey);\n-                                                /* Used to index through the\n-                                                  hash table.  Start with NULL\n-                                                  to get the first entry.\n+hash_remove (Cache_t theCache, void *aKey);\n+\n+/* Used to index through the hash table.  Start with NULL\n+   to get the first entry.\n                                                   \n-                                                  Successive calls pass the\n-                                                  value returned previously.\n-                                                  ** Don't modify the hash\n-                                                  during this operation *** \n+   Successive calls pass the value returned previously.\n+   ** Don't modify the hash during this operation *** \n                                                   \n-                                                  Cache nodes are returned\n-                                                  such that key or value can\n-                                                  ber extracted. */\n+   Cache nodes are returned such that key or value can\n+   be extracted. */\n CacheNode_t \n hash_next (Cache_t theCache, CacheNode_t aCacheNode);\n \n-                                               /* Used to return a value from \n-\t\t\t\t\t\t  a hash table using a given \n-\t\t\t\t\t\t  key.  */\n+/* Used to return a value from a hash table using a given key.  */\n void* \n-hash_value_for_key (Cache_t theCache, void* aKey);\n+hash_value_for_key (Cache_t theCache, void *aKey);\n \n \n /************************************************\n@@ -229,27 +206,26 @@ hash_value_for_key (Cache_t theCache, void* aKey);\n         \n ************************************************/\n \n-                                                /* Calculate a hash code by \n-\t\t\t\t\t\t   performing some \n-\t\t\t\t\t\t   manipulation of the key \n-\t\t\t\t\t\t   pointer. */\n-static inline u_int \n-intHash(Cache_t theCache, void* aKey) {\n+/* Calculate a hash code by performing some \n+   manipulation of the key pointer. */\n+static inline unsigned int \n+intHash(Cache_t theCache, void *aKey)\n+{\n \n \n-  assert(sizeof (u_int) == sizeof (aKey));\n+  assert(sizeof (unsigned int) == sizeof (aKey));\n \n-  return ((u_int)aKey >> (sizeof(void*) - 1)) & theCache->mask ;\n+  return ((unsigned int)aKey >> (sizeof(void*) - 1)) & theCache->mask ;\n }\n \n-                                                /* Calculate a hash code by \n-\t\t\t\t\t\t   iterating over a NULL \n-\t\t\t\t\t\t   terminate string. */\n-static inline u_int \n-strHash(Cache_t theCache, void* aKey) {\n \n-  u_int   ret = 0;\n-  u_int   ctr = 0;\n+/* Calculate a hash code by iterating over a NULL \n+   terminate string. */\n+static inline unsigned int \n+strHash(Cache_t theCache, void *aKey)\n+{\n+  unsigned int ret = 0;\n+  unsigned int ctr = 0;\n         \n         \n   while(*(char*)aKey) {\n@@ -263,24 +239,18 @@ strHash(Cache_t theCache, void* aKey) {\n \n /* Compare two integers. */\n static inline int \n-intCmp(void* k1, void* k2) {\n-\n-\n-        return !((int)k1 - (int)k2);\n+intCmp(void *k1, void *k2)\n+{\n+  return !((int)k1 - (int)k2);\n }\n \n \n /* Compare two strings. */\n static inline int \n-strCmp(void* k1, void* k2) {\n-\n-\n-  return !strcmp( k1, k2 );\n+strCmp(void *k1, void *k2)\n+{\n+  return !strcmp(k1, k2);\n }\n \n \n-#ifdef __cplusplus\n-}\n-#endif\n-\n-#endif\n+#endif /* _hash_INCLUDE_GNU */"}]}