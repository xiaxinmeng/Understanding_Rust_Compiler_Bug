{"sha": "b3fe46340aaf3611a87f190bd4ac52d3d80e219e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNmZTQ2MzQwYWFmMzYxMWE4N2YxOTBiZDRhYzUyZDNkODBlMjE5ZQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-07T04:31:48Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-07T04:31:48Z"}, "message": "Handle CCEVENmode as a new mode.\n\nHandle CCEVENmode as a new mode.  Logical operations\non CCmode registers now results in CCEVENmode.\nAdd patterns for jumps and ext's for CCEVENmode.\n(cmpsf, cmpdf): Use reg 65 and clobber reg 64.\n\nFrom-SVN: r6032", "tree": {"sha": "a46022467b37cd4c64f4223f005ef970ac868872", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a46022467b37cd4c64f4223f005ef970ac868872"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3fe46340aaf3611a87f190bd4ac52d3d80e219e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3fe46340aaf3611a87f190bd4ac52d3d80e219e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3fe46340aaf3611a87f190bd4ac52d3d80e219e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3fe46340aaf3611a87f190bd4ac52d3d80e219e/comments", "author": null, "committer": null, "parents": [{"sha": "347da86b2b92f18d72e144f279f1d296a7554b9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/347da86b2b92f18d72e144f279f1d296a7554b9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/347da86b2b92f18d72e144f279f1d296a7554b9b"}], "stats": {"total": 516, "additions": 443, "deletions": 73}, "files": [{"sha": "96ea3bcd3571249c702d19024a0acced24984a3b", "filename": "gcc/config/m88k/m88k.md", "status": "modified", "additions": 443, "deletions": 73, "changes": 516, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3fe46340aaf3611a87f190bd4ac52d3d80e219e/gcc%2Fconfig%2Fm88k%2Fm88k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3fe46340aaf3611a87f190bd4ac52d3d80e219e/gcc%2Fconfig%2Fm88k%2Fm88k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.md?ref=b3fe46340aaf3611a87f190bd4ac52d3d80e219e", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for the Motorola 88000 for GNU C compiler\n-;;  Copyright (C) 1988, 1989, 1990, 1991 Free Software Foundation, Inc.\n+;;  Copyright (C) 1988, 1989, 1990, 1991, 1993 Free Software Foundation, Inc.\n ;;  Contributed by Michael Tiemann (tiemann@mcc.com)\n ;;  Additional changes by Michael Meissner (meissner@osf.org)\n ;;  Version 2 port by Tom Wood (Tom_Wood@NeXT.com)\n@@ -397,6 +397,7 @@\n ;; We define all logical operations on CCmode values to preserve the pairwise\n ;; relationship of the compare bits.  This allows a future branch prediction\n ;; pass the degree of freedom needed to change and/bb0-le into or/bb1-gt.\n+;; THIS IS CURRENTLY FALSE! \n ;;\n ;; Opportunities arise when conditional expressions using && and || are made\n ;; unconditional.  When these are used to branch, the sequence is\n@@ -419,21 +420,21 @@\n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(ior:SI (neg:SI \n-\t\t (match_operator 1 \"relop\"\n-\t\t\t\t [(match_operand:CC 2 \"register_operand\" \"%r\")\n+\t\t (match_operator 1 \"even_relop\"\n+\t\t\t\t [(match_operand 2 \"partial_ccmode_register_operand\" \"%r\")\n \t\t\t\t  (const_int 0)]))\n \t\t(neg:SI\n \t\t (match_operator 3 \"relop\"\n-\t\t\t\t [(match_operand:CC 4 \"register_operand\" \"r\")\n+\t\t\t\t [(match_operand 4 \"partial_ccmode_register_operand\" \"r\")\n \t\t\t\t  (const_int 0)]))))\n    (clobber (match_operand:SI 5 \"register_operand\" \"=r\"))]\n   \"\"\n   [(set (match_dup 5)\n-\t(ior:CC (match_dup 4)\n+\t(ior:CCEVEN (match_dup 4)\n \t\t(match_dup 2)))\n    (set (match_dup 0)\n \t(neg:SI (match_op_dup 1 [(match_dup 5) (const_int 0)])))]\n-  \"operands[5] = gen_rtx (SUBREG, CCmode, operands[5], 0);\n+  \"operands[5] = gen_rtx(SUBREG, CCEVENmode, operands[5], 0);\n    if (GET_CODE (operands[1]) == GET_CODE (operands[3]))\n      ; /* The conditions match.  */\n    else if (GET_CODE (operands[1])\n@@ -456,43 +457,140 @@\n \n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(ior:SI (match_operator 1 \"relop\"\n-\t\t\t\t[(match_operand:CC 2 \"register_operand\" \"%r\")\n+\t(ior:SI (neg:SI \n+\t\t (match_operator 1 \"odd_relop\"\n+\t\t\t\t [(match_operand 2 \"partial_ccmode_register_operand\" \"%r\")\n+\t\t\t\t  (const_int 0)]))\n+\t\t(neg:SI\n+\t\t (match_operator 3 \"odd_relop\"\n+\t\t\t\t [(match_operand 4 \"partial_ccmode_register_operand\" \"r\")\n+\t\t\t\t  (const_int 0)]))))\n+   (clobber (match_operand:SI 5 \"register_operand\" \"=r\"))]\n+  \"\"\n+  [(set (match_dup 5)\n+\t(and:CCEVEN (match_dup 4)\n+\t\t(match_dup 2)))\n+   (set (match_dup 0)\n+\t(neg:SI (match_op_dup 1 [(match_dup 5) (const_int 0)])))]\n+  \"operands[5] = gen_rtx(SUBREG, CCEVENmode, operands[5], 0);\n+   if (GET_CODE (operands[1]) == GET_CODE (operands[3]))\n+     ; /* The conditions match.  */\n+   else\n+     {\n+       /* Make the condition pairs line up by rotating the compare word.  */\n+       int cv1 = condition_value (operands[1]);\n+       int cv2 = condition_value (operands[3]);\n+\n+       operands[4] = gen_rtx (ROTATE, CCmode, operands[4],\n+\t\t\t      gen_rtx (CONST_INT, VOIDmode,\n+\t\t\t\t       (cv2 - cv1) & 0x1f));\n+     }\")\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ior:SI (neg:SI \n+\t\t (match_operator 1 \"odd_relop\"\n+\t\t\t\t [(match_operand 2 \"partial_ccmode_register_operand\" \"%r\")\n+\t\t\t\t  (const_int 0)]))\n+\t\t(neg:SI\n+\t\t (match_operator 3 \"even_relop\"\n+\t\t\t\t [(match_operand 4 \"partial_ccmode_register_operand\" \"r\")\n+\t\t\t\t  (const_int 0)]))))\n+   (clobber (match_operand:SI 5 \"register_operand\" \"=r\"))]\n+  \"\"\n+  [(set (match_dup 5)\n+\t(ior:CCEVEN (not:CC (match_dup 2))\n+\t\t(match_dup 4)))\n+   (set (match_dup 0)\n+\t(neg:SI (match_op_dup 3 [(match_dup 5) (const_int 0)])))]\n+  \"operands[5] = gen_rtx(SUBREG, CCEVENmode, operands[5], 0);\n+  if (GET_CODE (operands[1])\n+\t    == reverse_condition (GET_CODE (operands[3])))\n+     ; \n+   else\n+     {\n+       /* Make the condition pairs line up by rotating the compare word.  */\n+       int cv1 = condition_value (operands[1]);\n+       int cv2 = condition_value (operands[3]);\n+\n+       operands[2] = gen_rtx (ROTATE, CCmode, operands[2],\n+\t\t\t      gen_rtx (CONST_INT, VOIDmode,\n+\t\t\t\t       ((cv1 & ~1) - (cv2 & ~1)) & 0x1f));\n+     }\")\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ior:SI (match_operator 1 \"even_relop\"\n+\t\t\t\t[(match_operand 2 \"partial_ccmode_register_operand\" \"%r\")\n \t\t\t\t (const_int 0)])\n \t\t(match_operator 3 \"relop\"\n-\t\t\t\t[(match_operand:CC 4 \"register_operand\" \"r\")\n+\t\t\t\t[(match_operand 4 \"partial_ccmode_register_operand\" \"r\")\n \t\t\t\t (const_int 0)])))\n    (clobber (match_operand:SI 5 \"register_operand\" \"=r\"))]\n   \"GET_CODE (operands[1]) == GET_CODE (operands[3])\n    || GET_CODE (operands[1]) == reverse_condition (GET_CODE (operands[3]))\"\n   [(set (match_dup 5)\n-\t(ior:CC (match_dup 4)\n+\t(ior:CCEVEN (match_dup 4)\n \t\t(match_dup 2)))\n    (set (match_dup 0)\n \t(match_op_dup 1 [(match_dup 5) (const_int 0)]))]\n-  \"operands[5] = gen_rtx (SUBREG, CCmode, operands[5], 0);\n+  \"operands[5] = gen_rtx(SUBREG, CCEVENmode, operands[5], 0);\n    /* Reverse the condition by  complimenting the compare word.  */\n    if (GET_CODE (operands[1]) != GET_CODE (operands[3]))\n       operands[4] = gen_rtx (NOT, CCmode, operands[4]);\")\n \n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ior:SI (match_operator 1 \"odd_relop\"\n+\t\t\t\t[(match_operand 2 \"partial_ccmode_register_operand\" \"%r\")\n+\t\t\t\t (const_int 0)])\n+\t\t(match_operator 3 \"odd_relop\"\n+\t\t\t\t[(match_operand 4 \"partial_ccmode_register_operand\" \"r\")\n+\t\t\t\t (const_int 0)])))\n+   (clobber (match_operand:SI 5 \"register_operand\" \"=r\"))]\n+  \"GET_CODE (operands[1]) == GET_CODE (operands[3])\"\n+  [(set (match_dup 5)\n+\t(and:CCEVEN (match_dup 4)\n+\t\t(match_dup 2)))\n+   (set (match_dup 0)\n+\t(match_op_dup 1 [(match_dup 5) (const_int 0)]))]\n+  \"operands[5] = gen_rtx(SUBREG, CCEVENmode, operands[5], 0);\")\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ior:SI (match_operator 1 \"odd_relop\"\n+\t\t\t\t[(match_operand 2 \"partial_ccmode_register_operand\" \"%r\")\n+\t\t\t\t (const_int 0)])\n+\t\t(match_operator 3 \"even_relop\"\n+\t\t\t\t[(match_operand 4 \"partial_ccmode_register_operand\" \"r\")\n+\t\t\t\t (const_int 0)])))\n+   (clobber (match_operand:SI 5 \"register_operand\" \"=r\"))]\n+  \"GET_CODE (operands[1]) == reverse_condition (GET_CODE (operands[3]))\"\n+  [(set (match_dup 5)\n+\t(ior:CCEVEN (not:CC (match_dup 4))\n+\t\t(match_dup 2)))\n+   (set (match_dup 0)\n+\t(match_op_dup 1 [(match_dup 5) (const_int 0)]))]\n+  \"operands[5] = gen_rtx(SUBREG, CCEVENmode, operands[5], 0);\")\n+\n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(and:SI (neg:SI \n-\t\t (match_operator 1 \"relop\"\n-\t\t\t\t [(match_operand:CC 2 \"register_operand\" \"%r\")\n+\t\t (match_operator 1 \"even_relop\"\n+\t\t\t\t [(match_operand 2 \"partial_ccmode_register_operand\" \"%r\")\n \t\t\t\t  (const_int 0)]))\n \t\t(neg:SI\n \t\t (match_operator 3 \"relop\"\n-\t\t\t\t [(match_operand:CC 4 \"register_operand\" \"r\")\n+\t\t\t\t [(match_operand 4 \"partial_ccmode_register_operand\" \"r\")\n \t\t\t\t  (const_int 0)]))))\n    (clobber (match_operand:SI 5 \"register_operand\" \"=r\"))]\n   \"\"\n   [(set (match_dup 5)\n-\t(and:CC (match_dup 4)\n+\t(and:CCEVEN (match_dup 4)\n \t\t(match_dup 2)))\n    (set (match_dup 0)\n \t(neg:SI (match_op_dup 1 [(match_dup 5) (const_int 0)])))]\n-  \"operands[5] = gen_rtx (SUBREG, CCmode, operands[5], 0);\n+  \"operands[5] = gen_rtx(SUBREG, CCEVENmode, operands[5], 0);\n    if (GET_CODE (operands[1]) == GET_CODE (operands[3]))\n      ; /* The conditions match.  */\n    else if (GET_CODE (operands[1])\n@@ -504,7 +602,6 @@\n        /* Make the condition pairs line up by rotating the compare word.  */\n        int cv1 = condition_value (operands[1]);\n        int cv2 = condition_value (operands[3]);\n-\n        operands[4] = gen_rtx (ROTATE, CCmode, operands[4],\n \t\t\t      gen_rtx (CONST_INT, VOIDmode,\n \t\t\t\t       ((cv2 & ~1) - (cv1 & ~1)) & 0x1f));\n@@ -515,53 +612,148 @@\n \n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(and:SI (match_operator 1 \"relop\"\n-\t\t\t\t[(match_operand:CC 2 \"register_operand\" \"%r\")\n+\t(and:SI (neg:SI \n+\t\t (match_operator 1 \"odd_relop\"\n+\t\t\t\t [(match_operand 2 \"partial_ccmode_register_operand\" \"%r\")\n+\t\t\t\t  (const_int 0)]))\n+\t\t(neg:SI\n+\t\t (match_operator 3 \"odd_relop\"\n+\t\t\t\t [(match_operand 4 \"partial_ccmode_register_operand\" \"r\")\n+\t\t\t\t  (const_int 0)]))))\n+   (clobber (match_operand:SI 5 \"register_operand\" \"=r\"))]\n+  \"\"\n+  [(set (match_dup 5)\n+\t(ior:CCEVEN (match_dup 4)\n+\t\t(match_dup 2)))\n+   (set (match_dup 0)\n+\t(neg:SI (match_op_dup 1 [(match_dup 5) (const_int 0)])))]\n+  \"operands[5] = gen_rtx(SUBREG, CCEVENmode, operands[5], 0);\n+   if (GET_CODE (operands[1]) == GET_CODE (operands[3]))\n+     ; /* The conditions match.  */\n+   else\n+     {\n+       /* Make the condition pairs line up by rotating the compare word.  */\n+       int cv1 = condition_value (operands[1]);\n+       int cv2 = condition_value (operands[3]);\n+       operands[4] = gen_rtx (ROTATE, CCmode, operands[4],\n+\t\t\t      gen_rtx (CONST_INT, VOIDmode,\n+\t\t\t\t       (cv2 - cv1) & 0x1f));\n+     }\")\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(and:SI (neg:SI \n+\t\t (match_operator 1 \"odd_relop\"\n+\t\t\t\t [(match_operand 2 \"partial_ccmode_register_operand\" \"%r\")\n+\t\t\t\t  (const_int 0)]))\n+\t\t(neg:SI\n+\t\t (match_operator 3 \"even_relop\"\n+\t\t\t\t [(match_operand 4 \"partial_ccmode_register_operand\" \"r\")\n+\t\t\t\t  (const_int 0)]))))\n+   (clobber (match_operand:SI 5 \"register_operand\" \"=r\"))]\n+  \"\"\n+  [(set (match_dup 5)\n+\t(and:CCEVEN (not:CC (match_dup 2))\n+\t\t(match_dup 4)))\n+   (set (match_dup 0)\n+\t(neg:SI (match_op_dup 3 [(match_dup 5) (const_int 0)])))]\n+  \"operands[5] = gen_rtx(SUBREG, CCEVENmode, operands[5], 0);\n+   if (GET_CODE (operands[1])\n+\t    == reverse_condition (GET_CODE (operands[3])))\n+\t;\n+   else\n+     {\n+       /* Make the condition pairs line up by rotating the compare word.  */\n+       int cv1 = condition_value (operands[1]);\n+       int cv2 = condition_value (operands[3]);\n+       operands[2] = gen_rtx (ROTATE, CCmode, operands[2],\n+\t\t\t      gen_rtx (CONST_INT, VOIDmode,\n+\t\t\t\t       ((cv1 & ~1) - (cv2 & ~1)) & 0x1f));\n+     }\")\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(and:SI (match_operator 1 \"even_relop\"\n+\t\t\t\t[(match_operand 2 \"partial_ccmode_register_operand\" \"%r\")\n \t\t\t\t (const_int 0)])\n \t\t(match_operator 3 \"relop\"\n-\t\t\t\t[(match_operand:CC 4 \"register_operand\" \"r\")\n+\t\t\t\t[(match_operand 4 \"partial_ccmode_register_operand\" \"r\")\n \t\t\t\t (const_int 0)])))\n    (clobber (match_operand:SI 5 \"register_operand\" \"=r\"))]\n   \"GET_CODE (operands[1]) == GET_CODE (operands[3])\n    || GET_CODE (operands[1]) == reverse_condition (GET_CODE (operands[3]))\"\n   [(set (match_dup 5)\n-\t(and:CC (match_dup 4)\n+\t(and:CCEVEN (match_dup 4)\n \t\t(match_dup 2)))\n    (set (match_dup 0)\n \t(match_op_dup 1 [(match_dup 5) (const_int 0)]))]\n-  \"operands[5] = gen_rtx (SUBREG, CCmode, operands[5], 0);\n+  \"operands[5] = gen_rtx(SUBREG, CCEVENmode, operands[5], 0);\n    /* Reverse the condition by  complimenting the compare word.  */\n    if (GET_CODE (operands[1]) != GET_CODE (operands[3]))\n       operands[4] = gen_rtx (NOT, CCmode, operands[4]);\")\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(and:SI (match_operator 1 \"odd_relop\"\n+\t\t\t\t[(match_operand 2 \"partial_ccmode_register_operand\" \"%r\")\n+\t\t\t\t (const_int 0)])\n+\t\t(match_operator 3 \"odd_relop\"\n+\t\t\t\t[(match_operand 4 \"partial_ccmode_register_operand\" \"r\")\n+\t\t\t\t (const_int 0)])))\n+   (clobber (match_operand:SI 5 \"register_operand\" \"=r\"))]\n+  \"GET_CODE (operands[1]) == GET_CODE (operands[3])\"\n+  [(set (match_dup 5)\n+\t(ior:CCEVEN (match_dup 4)\n+\t\t(match_dup 2)))\n+   (set (match_dup 0)\n+\t(match_op_dup 1 [(match_dup 5) (const_int 0)]))]\n+  \"operands[5] = gen_rtx(SUBREG, CCEVENmode, operands[5], 0);\")\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(and:SI (match_operator 1 \"odd_relop\"\n+\t\t\t\t[(match_operand 2 \"partial_ccmode_register_operand\" \"%r\")\n+\t\t\t\t (const_int 0)])\n+\t\t(match_operator 3 \"even_relop\"\n+\t\t\t\t[(match_operand 4 \"partial_ccmode_register_operand\" \"r\")\n+\t\t\t\t (const_int 0)])))\n+   (clobber (match_operand:SI 5 \"register_operand\" \"=r\"))]\n+  \"GET_CODE (operands[1]) == reverse_condition (GET_CODE (operands[3]))\"\n+  [(set (match_dup 5)\n+\t(and:CCEVEN (not:CC (match_dup 2))\n+\t\t(match_dup 4)))\n+   (set (match_dup 0)\n+\t(match_op_dup 3 [(match_dup 5) (const_int 0)]))]\n+  \"operands[5] = gen_rtx(SUBREG, CCEVENmode, operands[5], 0);\")\n+\n \f\n ;; Logical operations on compare words.\n \n (define_insn \"\"\n-  [(set (match_operand:CC 0 \"register_operand\" \"=r\")\n-\t(and:CC (not:CC (match_operand:CC 1 \"register_operand\" \"r\"))\n-\t\t(match_operand:CC 2 \"register_operand\" \"r\")))]\n+  [(set (match_operand:CCEVEN 0 \"register_operand\" \"=r\")\n+\t(and:CCEVEN (not:CC (match_operand 1 \"partial_ccmode_register_operand\" \"r\"))\n+\t\t(match_operand 2 \"partial_ccmode_register_operand\" \"r\")))]\n   \"\"\n   \"and.c %0,%2,%1\")\n \n-\n (define_insn \"\"\n-  [(set (match_operand:CC 0 \"register_operand\" \"=r\")\n-\t(and:CC (match_operand:CC 1 \"register_operand\" \"%r\")\n-\t\t(match_operand:CC 2 \"register_operand\" \"r\")))]\n+  [(set (match_operand:CCEVEN 0 \"register_operand\" \"=r\")\n+\t(and:CCEVEN (match_operand 1 \"partial_ccmode_register_operand\" \"%r\")\n+\t\t(match_operand 2 \"partial_ccmode_register_operand\" \"r\")))]\n   \"\"\n   \"and %0,%1,%2\")\n \n (define_insn \"\"\n-  [(set (match_operand:CC 0 \"register_operand\" \"=r\")\n-\t(ior:CC (not:CC (match_operand:CC 1 \"register_operand\" \"r\"))\n-\t\t(match_operand:CC 2 \"register_operand\" \"r\")))]\n+  [(set (match_operand:CCEVEN 0 \"register_operand\" \"=r\")\n+\t(ior:CCEVEN (not:CC (match_operand 1 \"partial_ccmode_register_operand\" \"r\"))\n+\t\t(match_operand 2 \"partial_ccmode_register_operand\" \"r\")))]\n   \"\"\n   \"or.c %0,%2,%1\")\n \n (define_insn \"\"\n-  [(set (match_operand:CC 0 \"register_operand\" \"=r\")\n-\t(ior:CC (match_operand:CC 1 \"register_operand\" \"%r\")\n-\t\t(match_operand:CC 2 \"register_operand\" \"r\")))]\n+  [(set (match_operand:CCEVEN 0 \"register_operand\" \"=r\")\n+\t(ior:CCEVEN (match_operand 1 \"partial_ccmode_register_operand\" \"%r\")\n+\t\t(match_operand 2 \"partial_ccmode_register_operand\" \"r\")))]\n   \"\"\n   \"or %0,%1,%2\")\n \n@@ -573,95 +765,104 @@\n   \"rot %0,%1,%2\"\n   [(set_attr \"type\" \"bit\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:CCEVEN 0 \"register_operand\" \"=r\")\n+\t(rotate:CC (match_operand 1 \"partial_ccmode_register_operand\" \"r\")\n+\t\t   (match_operand:CC 2 \"int5_operand\" \"\")))]\n+  \"\"\n+  \"rot %0,%1,%2\"\n+  [(set_attr \"type\" \"bit\")])\n+\n ;; rotate/and[.c] and rotate/ior[.c]\n \n (define_split\n-  [(set (match_operand:CC 0 \"register_operand\" \"=r\")\n-\t(ior:CC (rotate:CC (match_operand:CC 1 \"register_operand\" \"r\")\n+  [(set (match_operand:CCEVEN 0 \"register_operand\" \"=r\")\n+\t(ior:CCEVEN (rotate:CC (match_operand 1 \"partial_ccmode_register_operand\" \"r\")\n \t\t\t   (match_operand:CC 2 \"int5_operand\" \"\"))\n-\t\t(match_operand:CC 3 \"register_operand\" \"r\")))\n-   (clobber (match_operand:CC 4 \"register_operand\" \"=r\"))]\n+\t\t(match_operand 3 \"partial_ccmode_register_operand\" \"r\")))\n+   (clobber (match_operand:CCEVEN 4 \"register_operand\" \"=r\"))]\n   \"\"\n   [(set (match_dup 4)\n \t(rotate:CC (match_dup 1) (match_dup 2)))\n    (set (match_dup 0)\n-\t(ior:CC (match_dup 4) (match_dup 3)))]\n+\t(ior:CCEVEN (match_dup 4) (match_dup 3)))]\n   \"\")\n \n (define_insn \"\"\n-  [(set (match_operand:CC 0 \"register_operand\" \"=r\")\n-\t(ior:CC (rotate:CC (match_operand:CC 1 \"register_operand\" \"r\")\n+  [(set (match_operand:CCEVEN 0 \"register_operand\" \"=r\")\n+\t(ior:CC (rotate:CC (match_operand 1 \"partial_ccmode_register_operand\" \"r\")\n \t\t\t   (match_operand:CC 2 \"int5_operand\" \"\"))\n-\t\t(match_operand:CC 3 \"register_operand\" \"r\")))\n-   (clobber (match_scratch:CC 4 \"=r\"))]\n+\t\t(match_operand 3 \"partial_ccmode_register_operand\" \"r\")))\n+   (clobber (match_scratch:CCEVEN 4 \"=r\"))]\n   \"\"\n   \"#\")\n \n (define_split\n-  [(set (match_operand:CC 0 \"register_operand\" \"=r\")\n-\t(ior:CC (not:CC (rotate:CC (match_operand:CC 1 \"register_operand\" \"r\")\n+  [(set (match_operand:CCEVEN 0 \"register_operand\" \"=r\")\n+\t(ior:CCEVEN (not:CC (rotate:CC (match_operand 1 \"partial_ccmode_register_operand\" \"r\")\n \t\t\t\t   (match_operand:CC 2 \"int5_operand\" \"\")))\n-\t\t(match_operand:CC 3 \"register_operand\" \"r\")))\n-   (clobber (match_operand:CC 4 \"register_operand\" \"=r\"))]\n+\t\t(match_operand 3 \"partial_ccmode_register_operand\" \"r\")))\n+   (clobber (match_operand:CCEVEN 4 \"register_operand\" \"=r\"))]\n   \"\"\n   [(set (match_dup 4)\n \t(rotate:CC (match_dup 1) (match_dup 2)))\n    (set (match_dup 0)\n-\t(ior:CC (not:CC (match_dup 4)) (match_dup 3)))]\n+\t(ior:CCEVEN (not:CC (match_dup 4)) (match_dup 3)))]\n   \"\")\n \n (define_insn \"\"\n-  [(set (match_operand:CC 0 \"register_operand\" \"=r\")\n-\t(ior:CC (not:CC (rotate:CC (match_operand:CC 1 \"register_operand\" \"r\")\n+  [(set (match_operand:CCEVEN 0 \"register_operand\" \"=r\")\n+\t(ior:CCEVEN (not:CC (rotate:CC (match_operand 1 \"partial_ccmode_register_operand\" \"r\")\n \t\t\t\t   (match_operand:CC 2 \"int5_operand\" \"\")))\n-\t\t(match_operand:CC 3 \"register_operand\" \"r\")))\n-   (clobber (match_scratch:CC 4 \"=r\"))]\n+\t\t(match_operand 3 \"partial_ccmode_register_operand\" \"r\")))\n+   (clobber (match_scratch:CCEVEN 4 \"=r\"))]\n   \"\"\n   \"#\")\n \n (define_split\n-  [(set (match_operand:CC 0 \"register_operand\" \"=r\")\n-\t(and:CC (rotate:CC (match_operand:CC 1 \"register_operand\" \"r\")\n+  [(set (match_operand:CCEVEN 0 \"register_operand\" \"=r\")\n+\t(and:CCEVEN (rotate:CC (match_operand 1 \"partial_ccmode_register_operand\" \"r\")\n \t\t\t   (match_operand:CC 2 \"int5_operand\" \"\"))\n-\t\t(match_operand:CC 3 \"register_operand\" \"r\")))\n-   (clobber (match_operand:CC 4 \"register_operand\" \"=r\"))]\n+\t\t(match_operand 3 \"partial_ccmode_register_operand\" \"r\")))\n+   (clobber (match_operand:CCEVEN 4 \"register_operand\" \"=r\"))]\n   \"\"\n   [(set (match_dup 4)\n \t(rotate:CC (match_dup 1) (match_dup 2)))\n    (set (match_dup 0)\n-\t(and:CC (match_dup 4) (match_dup 3)))]\n+\t(and:CCEVEN (match_dup 4) (match_dup 3)))]\n   \"\")\n \n (define_insn \"\"\n-  [(set (match_operand:CC 0 \"register_operand\" \"=r\")\n-\t(and:CC (rotate:CC (match_operand:CC 1 \"register_operand\" \"r\")\n+  [(set (match_operand:CCEVEN 0 \"register_operand\" \"=r\")\n+\t(and:CCEVEN (rotate:CC (match_operand 1 \"partial_ccmode_register_operand\" \"r\")\n \t\t\t   (match_operand:CC 2 \"int5_operand\" \"\"))\n-\t\t(match_operand:CC 3 \"register_operand\" \"r\")))\n-   (clobber (match_scratch:CC 4 \"=r\"))]\n+\t\t(match_operand 3 \"partial_ccmode_register_operand\" \"r\")))\n+   (clobber (match_scratch:CCEVEN 4 \"=r\"))]\n   \"\"\n   \"#\")\n \n (define_split\n-  [(set (match_operand:CC 0 \"register_operand\" \"=r\")\n-\t(and:CC (not:CC (rotate:CC (match_operand:CC 1 \"register_operand\" \"r\")\n+  [(set (match_operand:CCEVEN 0 \"register_operand\" \"=r\")\n+\t(and:CCEVEN (not:CC (rotate:CC (match_operand 1 \"partial_ccmode_register_operand\" \"r\")\n \t\t\t\t   (match_operand:CC 2 \"int5_operand\" \"\")))\n-\t\t(match_operand:CC 3 \"register_operand\" \"r\")))\n-   (clobber (match_operand:CC 4 \"register_operand\" \"=r\"))]\n+\t\t(match_operand 3 \"partial_ccmode_register_operand\" \"r\")))\n+   (clobber (match_operand:CCEVEN 4 \"register_operand\" \"=r\"))]\n   \"\"\n   [(set (match_dup 4)\n \t(rotate:CC (match_dup 1) (match_dup 2)))\n    (set (match_dup 0)\n-\t(and:CC (not:CC (match_dup 4)) (match_dup 3)))]\n+\t(and:CCEVEN (not:CC (match_dup 4)) (match_dup 3)))]\n   \"\")\n \n (define_insn \"\"\n-  [(set (match_operand:CC 0 \"register_operand\" \"=r\")\n-\t(and:CC (not:CC (rotate:CC (match_operand:CC 1 \"register_operand\" \"r\")\n+  [(set (match_operand:CCEVEN 0 \"register_operand\" \"=r\")\n+\t(and:CCEVEN (not:CC (rotate:CC (match_operand 1 \"partial_ccmode_register_operand\" \"r\")\n \t\t\t\t   (match_operand:CC 2 \"int5_operand\" \"\")))\n-\t\t(match_operand:CC 3 \"register_operand\" \"r\")))\n-   (clobber (match_scratch:CC 4 \"=r\"))]\n+\t\t(match_operand 3 \"partial_ccmode_register_operand\" \"r\")))\n+   (clobber (match_scratch:CCEVEN 4 \"=r\"))]\n   \"\"\n   \"#\")\n+\n \f\n ;; Recognize bcnd instructions for integer values.  This is distinguished\n ;; from a conditional branch instruction (below) with SImode instead of\n@@ -1006,14 +1207,18 @@\n (define_expand \"cmpsf\"\n   [(set (match_dup 2)\n \t(compare:CC (match_operand:SF 0 \"register_operand\" \"\")\n-\t\t    (match_operand:SF 1 \"register_operand\" \"\")))]\n+\t\t    (match_operand:SF 1 \"register_operand\" \"\")))\n+  (use (reg:SI 65))\n+  (clobber (reg:SI 64))]\n   \"\"\n   \"operands[2] = m88k_compare_reg = gen_reg_rtx (CCmode);\")\n \n (define_expand \"cmpdf\"\n   [(set (match_dup 2)\n \t(compare:CC (match_operand:DF 0 \"general_operand\" \"\")\n-\t\t    (match_operand:DF 1 \"general_operand\" \"\")))]\n+\t\t    (match_operand:DF 1 \"general_operand\" \"\")))\n+  (use (reg:SI 65))\n+  (clobber (reg:SI 64))]\n   \"\"\n   \"\n {\n@@ -1177,6 +1382,44 @@\n   \"ext %0,%2,1<%C1>\"\n   [(set_attr \"type\" \"bit\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(match_operator:SI 1 \"even_relop\"\n+\t\t\t   [(match_operand:CCEVEN 2 \"register_operand\" \"r\")\n+\t\t\t    (const_int 0)]))]\n+  \"\"\n+  \"ext %0,%2,1<%C1>\"\n+  [(set_attr \"type\" \"bit\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(not:SI (match_operator:SI 1 \"odd_relop\"\n+\t\t\t   [(match_operand:CCEVEN 2 \"register_operand\" \"r\")\n+\t\t\t    (const_int 0)])))]\n+  \"\"\n+  \"ext %0,%2,1<%!%C1>\"\n+  [(set_attr \"type\" \"bit\")])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(match_operator:SI 1 \"odd_relop\"\n+\t\t\t   [(match_operand:CCEVEN 2 \"register_operand\" \"r\")\n+\t\t\t    (const_int 0)]))\n+   (clobber (match_operand:SI 3 \"register_operand\" \"=r\"))]\n+  \"\"\n+  [(set (match_dup 3) (not:SI (match_op_dup 1 [(match_dup 2) (const_int 0)])))\n+   (set (match_dup 0) (not:SI (match_dup 3)))]\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(match_operator:SI 1 \"odd_relop\"\n+\t\t\t   [(match_operand:CCEVEN 2 \"register_operand\" \"r\")\n+\t\t\t    (const_int 0)]))\n+   (clobber (match_scratch:SI 3 \"=r\"))]\n+  \"\"\n+  \"#\")\n+\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI\n@@ -1186,6 +1429,51 @@\n   \"\"\n   \"extu %0,%2,1<%C1>\"\n   [(set_attr \"type\" \"bit\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(neg:SI\n+\t (match_operator:SI 1 \"even_relop\"\n+\t\t\t    [(match_operand:CCEVEN 2 \"register_operand\" \"r\")\n+\t\t\t     (const_int 0)])))]\n+  \"\"\n+  \"extu %0,%2,1<%C1>\"\n+  [(set_attr \"type\" \"bit\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(neg:SI\n+\t (not:SI (match_operator:SI 1 \"odd_relop\"\n+\t\t\t    [(match_operand:CCEVEN 2 \"register_operand\" \"r\")\n+\t\t\t     (const_int 0)]))))]\n+  \"\"\n+  \"extu %0,%2,1<%!%C1>\"\n+  [(set_attr \"type\" \"bit\")])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(neg:SI (match_operator:SI 1 \"odd_relop\"\n+\t\t\t   [(match_operand:CCEVEN 2 \"register_operand\" \"r\")\n+\t\t\t    (const_int 0)])))\n+   (clobber (match_operand:SI 3 \"register_operand\" \"=r\"))]\n+  \"\"\n+  [(set (match_dup 3) (neg:SI (not:SI (match_op_dup 1 [(match_dup 2)\n+                                                       (const_int 0)]))))\n+   (set (match_dup 0) (xor:SI (match_dup 3) (const_int 1)))]\n+  \"\")\n+\n+(define_insn\n+ \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(neg:SI (match_operator:SI 1 \"odd_relop\"\n+\t\t\t   [(match_operand:CCEVEN 2 \"register_operand\" \"r\")\n+\t\t\t    (const_int 0)])))\n+   (clobber (match_scratch:SI 3 \"=r\"))]\n+  \"\"\n+  \"#\")\n+\n+\n+\n \f\n ;; Conditional branch insns.  The compare insns set a register\n ;; rather than cc0 and record that register for use here.  See above\n@@ -1360,8 +1648,38 @@\n }\"\n   [(set_attr \"type\" \"branch\")])\n \n+;;\n+;; Here branch prediction is sacrificed. To get it back, you need \n+;;  - CCODD (CC mode where the ODD bits are valid)\n+;;  - several define_split that can apply De Morgan's Law.\n+;;  - transformations between CCEVEN and CCODD modes. \n+;;  \n+\n+(define_insn \"\"\n+  [(set (pc) (if_then_else\n+\t      (match_operator 0 \"even_relop\"\n+\t\t\t      [(match_operand:CCEVEN 1 \"register_operand\" \"r\")\n+\t\t\t       (const_int 0)])\n+\t      (match_operand 2 \"pc_or_label_ref\" \"\")\n+\t      (match_operand 3 \"pc_or_label_ref\" \"\")))]\n+  \"\"\n+  \"bb%L2%. %C0,%1,%P2%P3\"\n+  [(set_attr \"type\" \"branch\")])\n+\n+(define_insn \"\"\n+  [(set (pc) (if_then_else\n+\t      (match_operator 0 \"odd_relop\"\n+\t\t\t      [(match_operand:CCEVEN 1 \"register_operand\" \"r\")\n+\t\t\t       (const_int 0)])\n+\t      (match_operand 2 \"pc_or_label_ref\" \"\")\n+\t      (match_operand 3 \"pc_or_label_ref\" \"\")))]\n+  \"\"\n+  \"bb%L3%. %!%C0,%1,%P2%P3\"\n+  [(set_attr \"type\" \"branch\")])\n+\n ;; Branch conditional on scc values.  These arise from manipulations on\n ;; compare words above.\n+;; Are these really used ? \n \n (define_insn \"\"\n   [(set (pc)\n@@ -1376,6 +1694,32 @@\n   \"bb%L2 %C0,%1,%P2%P3\"\n   [(set_attr \"type\" \"branch\")])\n \n+(define_insn \"\"\n+  [(set (pc)\n+\t(if_then_else\n+\t (ne (match_operator 0 \"even_relop\"\n+\t\t\t     [(match_operand:CCEVEN 1 \"register_operand\" \"r\")\n+\t\t\t      (const_int 0)])\n+\t     (const_int 0))\n+\t (match_operand 2 \"pc_or_label_ref\" \"\")\n+\t (match_operand 3 \"pc_or_label_ref\" \"\")))]\n+  \"\"\n+  \"bb%L2 %C0,%1,%P2%P3\"\n+  [(set_attr \"type\" \"branch\")])\n+\n+(define_insn \"\"\n+  [(set (pc)\n+\t(if_then_else\n+\t (ne (match_operator 0 \"odd_relop\"\n+\t\t\t     [(match_operand:CCEVEN 1 \"register_operand\" \"r\")\n+\t\t\t      (const_int 0)])\n+\t     (const_int 0))\n+\t (match_operand 2 \"pc_or_label_ref\" \"\")\n+\t (match_operand 3 \"pc_or_label_ref\" \"\")))]\n+  \"\"\n+  \"bb%L3 %!%C0,%1,%P2%P3\"\n+  [(set_attr \"type\" \"branch\")])\n+\n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else\n@@ -1388,6 +1732,32 @@\n   \"\"\n   \"bb%L3 %C0,%1,%P2%P3\"\n   [(set_attr \"type\" \"branch\")])\n+\n+(define_insn \"\"\n+  [(set (pc)\n+\t(if_then_else\n+\t (eq (match_operator 0 \"even_relop\"\n+\t\t\t     [(match_operand:CCEVEN 1 \"register_operand\" \"r\")\n+\t\t\t      (const_int 0)])\n+\t     (const_int 0))\n+\t (match_operand 2 \"pc_or_label_ref\" \"\")\n+\t (match_operand 3 \"pc_or_label_ref\" \"\")))]\n+  \"\"\n+  \"bb%L3 %C0,%1,%P2%P3\"\n+  [(set_attr \"type\" \"branch\")])\n+\n+(define_insn \"\"\n+  [(set (pc)\n+\t(if_then_else\n+\t (eq (match_operator 0 \"odd_relop\"\n+\t\t\t     [(match_operand:CCEVEN 1 \"register_operand\" \"r\")\n+\t\t\t      (const_int 0)])\n+\t     (const_int 0))\n+\t (match_operand 2 \"pc_or_label_ref\" \"\")\n+\t (match_operand 3 \"pc_or_label_ref\" \"\")))]\n+  \"\"\n+  \"bb%L2 %!%C0,%1,%P2%P3\"\n+  [(set_attr \"type\" \"branch\")])\n \f\n (define_insn \"locate1\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")"}]}