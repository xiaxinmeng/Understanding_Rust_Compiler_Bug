{"sha": "1f759dbdcddd5eae795da48f46edae274a431cbc", "node_id": "C_kwDOANBUbNoAKDFmNzU5ZGJkY2RkZDVlYWU3OTVkYTQ4ZjQ2ZWRhZTI3NGE0MzFjYmM", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-01-05T07:26:18Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-01-07T03:08:31Z"}, "message": "Optimize V16HF vector insert to element 0 for AVX2.\n\ngcc/ChangeLog:\n\n\tPR target/103753\n\t* config/i386/i386-expand.c (ix86_expand_vector_set): Not use\n\tgen_avx2_pblendph_1 when elt == 0.\n\t* config/i386/sse.md (avx2_pblendph): Rename to ..\n\t(avx2_pblend<ssemodesuffix>_1).. this, and extend to V16HI.\n\t(*avx2_pblendw): Rename to ..\n\t(*avx2_pblend<ssemodesuffix>): .. this, and extend to V16HF.\n\t(avx2_pblendw): Rename to ..\n\t(*avx2_pblend<ssemodesuffix>): .. this, and extend to V16HF.\n\t(blendsuf): Removed.\n\t(sse4_1_pblend<blendsuf>): Renamed to ..\n\t(sse4_1_pblend<ssemodesuffix>): .. this.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr103753.c: New test.", "tree": {"sha": "714a76bf6812ae3ec563cd9565194530f684de35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/714a76bf6812ae3ec563cd9565194530f684de35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f759dbdcddd5eae795da48f46edae274a431cbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f759dbdcddd5eae795da48f46edae274a431cbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f759dbdcddd5eae795da48f46edae274a431cbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f759dbdcddd5eae795da48f46edae274a431cbc/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55385f12f604fe242030f0a8fb057598c0f187a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55385f12f604fe242030f0a8fb057598c0f187a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55385f12f604fe242030f0a8fb057598c0f187a6"}], "stats": {"total": 70, "additions": 42, "deletions": 28}, "files": [{"sha": "0d4ae5a87f97be2852a70467ab9cfaae917a4d14", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f759dbdcddd5eae795da48f46edae274a431cbc/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f759dbdcddd5eae795da48f46edae274a431cbc/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=1f759dbdcddd5eae795da48f46edae274a431cbc", "patch": "@@ -16245,10 +16245,11 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n       goto half;\n \n     case E_V16HFmode:\n-      if (TARGET_AVX2)\n+      /* For ELT == 0, vec_setv8hf_0 can save 1 vpbroadcastw.  */\n+      if (TARGET_AVX2 && elt != 0)\n \t{\n \t  mmode = SImode;\n-\t  gen_blendm = gen_avx2_pblendph;\n+\t  gen_blendm = gen_avx2_pblendph_1;\n \t  blendm_const = true;\n \t  break;\n \t}"}, {"sha": "6c1e94f23d60a77159edaa3aa4f9bf45f86150a3", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 22, "deletions": 26, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f759dbdcddd5eae795da48f46edae274a431cbc/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f759dbdcddd5eae795da48f46edae274a431cbc/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=1f759dbdcddd5eae795da48f46edae274a431cbc", "patch": "@@ -21292,10 +21292,7 @@\n \t  (lt:VI1_AVX2 (match_dup 3) (match_dup 4))] UNSPEC_BLENDV))]\n   \"operands[3] = gen_lowpart (<MODE>mode, operands[3]);\")\n \n-(define_mode_attr blendsuf\n-  [(V8HI \"w\") (V8HF \"ph\")])\n-\n-(define_insn \"sse4_1_pblend<blendsuf>\"\n+(define_insn \"sse4_1_pblend<ssemodesuffix>\"\n   [(set (match_operand:V8_128 0 \"register_operand\" \"=Yr,*x,x\")\n \t(vec_merge:V8_128\n \t  (match_operand:V8_128 2 \"vector_operand\" \"YrBm,*xBm,xm\")\n@@ -21314,23 +21311,23 @@\n    (set_attr \"mode\" \"TI\")])\n \n ;; The builtin uses an 8-bit immediate.  Expand that.\n-(define_expand \"avx2_pblendw\"\n-  [(set (match_operand:V16HI 0 \"register_operand\")\n-\t(vec_merge:V16HI\n-\t  (match_operand:V16HI 2 \"nonimmediate_operand\")\n-\t  (match_operand:V16HI 1 \"register_operand\")\n+(define_expand \"avx2_pblend<ssemodesuffix>\"\n+  [(set (match_operand:V16_256 0 \"register_operand\")\n+\t(vec_merge:V16_256\n+\t  (match_operand:V16_256 2 \"nonimmediate_operand\")\n+\t  (match_operand:V16_256 1 \"register_operand\")\n \t  (match_operand:SI 3 \"const_0_to_255_operand\")))]\n   \"TARGET_AVX2\"\n {\n   HOST_WIDE_INT val = INTVAL (operands[3]) & 0xff;\n   operands[3] = GEN_INT (val << 8 | val);\n })\n \n-(define_expand \"avx2_pblendph\"\n-  [(set (match_operand:V16HF 0 \"register_operand\")\n-\t(vec_merge:V16HF\n-\t  (match_operand:V16HF 2 \"register_operand\")\n-\t  (match_operand:V16HF 1 \"register_operand\")\n+(define_expand \"avx2_pblend<ssemodesuffix>_1\"\n+  [(set (match_operand:V16_256 0 \"register_operand\")\n+\t(vec_merge:V16_256\n+\t  (match_operand:V16_256 2 \"register_operand\")\n+\t  (match_operand:V16_256 1 \"register_operand\")\n \t  (match_operand:SI 3 \"const_int_operand\")))]\n   \"TARGET_AVX2\n   && !((INTVAL (operands[3]) & 0xff) && (INTVAL (operands[3]) & 0xff00))\"\n@@ -21340,7 +21337,7 @@\n     emit_move_insn (operands[0], operands[1]);\n   else\n    {\n-     rtx tmp = gen_reg_rtx (V16HImode);\n+     rtx tmp = gen_reg_rtx (<MODE>mode);\n      rtx blendw_idx, blendd_idx;\n \n      if (mask & 0xff)\n@@ -21353,25 +21350,24 @@\n \t blendw_idx = GEN_INT (mask >> 8 & 0xff);\n \t blendd_idx = GEN_INT (240);\n        }\n-     operands[1] = lowpart_subreg (V16HImode, operands[1], V16HFmode);\n-     operands[2] = lowpart_subreg (V16HImode, operands[2], V16HFmode);\n-     emit_insn (gen_avx2_pblendw (tmp, operands[1], operands[2], blendw_idx));\n+     emit_insn (gen_avx2_pblend<ssemodesuffix> (tmp, operands[1],\n+\t\t\t\t\t\toperands[2], blendw_idx));\n \n-     operands[0] = lowpart_subreg (V8SImode, operands[0], V16HFmode);\n-     tmp = lowpart_subreg (V8SImode, tmp, V16HImode);\n-     operands[1] = lowpart_subreg (V8SImode, operands[1], V16HImode);\n+     operands[0] = lowpart_subreg (V8SImode, operands[0], <MODE>mode);\n+     tmp = lowpart_subreg (V8SImode, tmp, <MODE>mode);\n+     operands[1] = lowpart_subreg (V8SImode, operands[1], <MODE>mode);\n      emit_insn (gen_avx2_pblenddv8si (operands[0], operands[1],\n \t\t\t\t      tmp, blendd_idx));\n   }\n \n   DONE;\n })\n \n-(define_insn \"*avx2_pblendw\"\n-  [(set (match_operand:V16HI 0 \"register_operand\" \"=x\")\n-\t(vec_merge:V16HI\n-\t  (match_operand:V16HI 2 \"nonimmediate_operand\" \"xm\")\n-\t  (match_operand:V16HI 1 \"register_operand\" \"x\")\n+(define_insn \"*avx2_pblend<ssemodesuffix>\"\n+  [(set (match_operand:V16_256 0 \"register_operand\" \"=x\")\n+\t(vec_merge:V16_256\n+\t  (match_operand:V16_256 2 \"nonimmediate_operand\" \"xm\")\n+\t  (match_operand:V16_256 1 \"register_operand\" \"x\")\n \t  (match_operand:SI 3 \"avx2_pblendw_operand\" \"n\")))]\n   \"TARGET_AVX2\"\n {"}, {"sha": "4b2b3e46d8b51e669ede6580a5be31a11b202702", "filename": "gcc/testsuite/gcc.target/i386/pr103753.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f759dbdcddd5eae795da48f46edae274a431cbc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103753.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f759dbdcddd5eae795da48f46edae274a431cbc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103753.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103753.c?ref=1f759dbdcddd5eae795da48f46edae274a431cbc", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -mno-avx512f -O2\" } */\n+/* { dg-final { scan-assembler-not \"vpbroadcastw\" } } */\n+\n+typedef _Float16 __v16hf __attribute__ ((__vector_size__ (32)));\n+\n+__v16hf foo (_Float16 x)\n+{\n+  return (__v16hf) { x, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f };\n+}\n+\n+typedef short __v16hi __attribute__ ((__vector_size__ (32)));\n+\n+__v16hi bar (short x)\n+{\n+  return (__v16hi) { x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+}"}]}