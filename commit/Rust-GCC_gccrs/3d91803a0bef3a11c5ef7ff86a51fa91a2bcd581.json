{"sha": "3d91803a0bef3a11c5ef7ff86a51fa91a2bcd581", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q5MTgwM2EwYmVmM2ExMWM1ZWY3ZmY4NmE1MWZhOTFhMmJjZDU4MQ==", "commit": {"author": {"name": "Devang Patel", "email": "dpatel@apple.com", "date": "2005-08-19T17:54:16Z"}, "committer": {"name": "Devang Patel", "email": "dpatel@gcc.gnu.org", "date": "2005-08-19T17:54:16Z"}, "message": "re PR tree-optimization/23048 (ICE in get_loop_body with -O1 -ftree-vectorize on 4.1.x)\n\n       PR tree-optimization/23048\n       * tree-if-conv.c (if_convertible_bb_p): Supply basic_block as\n       third parameter. Check whether latch is dominated by exit\n       block or not.\n       (if_convertible_loop_p): Supply exit block itself to\n       if_convertible_bb_p.\n\n       * gcc.dg/tree-ssa/pr23048.c: New test.\n\nFrom-SVN: r103287", "tree": {"sha": "1016344868a3b33776af1c9c10fcdd485a44ec50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1016344868a3b33776af1c9c10fcdd485a44ec50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d91803a0bef3a11c5ef7ff86a51fa91a2bcd581", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d91803a0bef3a11c5ef7ff86a51fa91a2bcd581", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d91803a0bef3a11c5ef7ff86a51fa91a2bcd581", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d91803a0bef3a11c5ef7ff86a51fa91a2bcd581/comments", "author": null, "committer": null, "parents": [{"sha": "e55ef7f426bab0863601f5f0d3e7a98e87806c5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e55ef7f426bab0863601f5f0d3e7a98e87806c5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e55ef7f426bab0863601f5f0d3e7a98e87806c5d"}], "stats": {"total": 45, "additions": 39, "deletions": 6}, "files": [{"sha": "7631710d0c2f25157995b688e952579215f03f60", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d91803a0bef3a11c5ef7ff86a51fa91a2bcd581/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d91803a0bef3a11c5ef7ff86a51fa91a2bcd581/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d91803a0bef3a11c5ef7ff86a51fa91a2bcd581", "patch": "@@ -1,3 +1,12 @@\n+2005-08-19  Devang Patel  <dpatel@apple.com>\n+\n+\tPR tree-optimization/23048\n+\t* tree-if-conv.c (if_convertible_bb_p): Supply basic_block as\n+\tthird parameter. Check whether latch is dominated by exit\n+\tblock or not.\n+\t(if_convertible_loop_p): Supply exit block itself to\n+\tif_convertible_bb_p.\n+\t\n 2005-08-19  Richard Earnshaw  <richard.earnshaw@arm.com>\n \n \tPR target/23473"}, {"sha": "ffb5f0557673e5b575ffc94cd7205595512543ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d91803a0bef3a11c5ef7ff86a51fa91a2bcd581/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d91803a0bef3a11c5ef7ff86a51fa91a2bcd581/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3d91803a0bef3a11c5ef7ff86a51fa91a2bcd581", "patch": "@@ -1,3 +1,8 @@\n+2005-08-19  Devang Patel  <dpatel@apple.com>\n+\n+\tPR tree-optimization/23048\n+\t* gcc.dg/tree-ssa/pr23048.c: New test.\n+\t\n 2005-08-19  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR middle-end/20624"}, {"sha": "7dc67ea29c4012d86d1ea80f19d218a72e0f7c52", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr23048.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d91803a0bef3a11c5ef7ff86a51fa91a2bcd581/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23048.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d91803a0bef3a11c5ef7ff86a51fa91a2bcd581/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23048.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23048.c?ref=3d91803a0bef3a11c5ef7ff86a51fa91a2bcd581", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -ftree-vectorize\" } */\n+\n+void f(unsigned char *mem)\n+{\n+   int i;\n+\n+   for(i=0;i<4;i++) {\n+     while(mem[i]==0) ;\n+   }\n+}"}, {"sha": "303ae2b659d75b2345e6c762d901064bc8b94940", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d91803a0bef3a11c5ef7ff86a51fa91a2bcd581/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d91803a0bef3a11c5ef7ff86a51fa91a2bcd581/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=3d91803a0bef3a11c5ef7ff86a51fa91a2bcd581", "patch": "@@ -110,7 +110,7 @@ static void tree_if_convert_cond_expr (struct loop *, tree, tree,\n static bool if_convertible_phi_p (struct loop *, basic_block, tree);\n static bool if_convertible_modify_expr_p (struct loop *, basic_block, tree);\n static bool if_convertible_stmt_p (struct loop *, basic_block, tree);\n-static bool if_convertible_bb_p (struct loop *, basic_block, bool);\n+static bool if_convertible_bb_p (struct loop *, basic_block, basic_block);\n static bool if_convertible_loop_p (struct loop *, bool);\n static void add_to_predicate_list (basic_block, tree);\n static tree add_to_dst_predicate_list (struct loop * loop, basic_block, tree, tree,\n@@ -437,15 +437,15 @@ if_convertible_stmt_p (struct loop *loop, basic_block bb, tree stmt)\n    BB is inside loop LOOP.  */\n \n static bool\n-if_convertible_bb_p (struct loop *loop, basic_block bb, bool exit_bb_seen)\n+if_convertible_bb_p (struct loop *loop, basic_block bb, basic_block exit_bb)\n {\n   edge e;\n   edge_iterator ei;\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \"----------[%d]-------------\\n\", bb->index);\n \n-  if (exit_bb_seen)\n+  if (exit_bb)\n     {\n       if (bb != loop->latch)\n \t{\n@@ -459,6 +459,14 @@ if_convertible_bb_p (struct loop *loop, basic_block bb, bool exit_bb_seen)\n \t    fprintf (dump_file, \"non empty basic block after exit bb\\n\");\n \t  return false;\n \t}\n+      else if (bb == loop->latch \n+\t       && bb != exit_bb\n+\t       && !dominated_by_p (CDI_DOMINATORS, bb, exit_bb))\n+\t  {\n+\t    if (dump_file && (dump_flags & TDF_DETAILS))\n+\t      fprintf (dump_file, \"latch is not dominated by exit_block\\n\");\n+\t    return false;\n+\t  }\n     }\n \n   /* Be less adventurous and handle only normal edges.  */\n@@ -494,7 +502,7 @@ if_convertible_loop_p (struct loop *loop, bool for_vectorizer ATTRIBUTE_UNUSED)\n   unsigned int i;\n   edge e;\n   edge_iterator ei;\n-  bool exit_bb_seen = false;\n+  basic_block exit_bb = NULL;\n \n   /* Handle only inner most loop.  */\n   if (!loop || loop->inner)\n@@ -547,7 +555,7 @@ if_convertible_loop_p (struct loop *loop, bool for_vectorizer ATTRIBUTE_UNUSED)\n     {\n       bb = ifc_bbs[i];\n \n-      if (!if_convertible_bb_p (loop, bb, exit_bb_seen))\n+      if (!if_convertible_bb_p (loop, bb, exit_bb))\n \treturn false;\n \n       /* Check statements.  */\n@@ -562,7 +570,7 @@ if_convertible_loop_p (struct loop *loop, bool for_vectorizer ATTRIBUTE_UNUSED)\n \t  return false;\n \n       if (bb_with_exit_edge_p (loop, bb))\n-\texit_bb_seen = true;\n+\texit_bb = bb;\n     }\n \n   /* OK. Did not find any potential issues so go ahead in if-convert"}]}