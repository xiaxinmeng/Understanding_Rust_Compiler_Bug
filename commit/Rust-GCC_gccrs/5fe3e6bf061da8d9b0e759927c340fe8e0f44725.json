{"sha": "5fe3e6bf061da8d9b0e759927c340fe8e0f44725", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZlM2U2YmYwNjFkYThkOWIwZTc1OTkyN2MzNDBmZThlMGY0NDcyNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-08T10:49:38Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-08T10:49:38Z"}, "message": "aarch64: Support unpacked CNOT on SVE\n\nThis patch adds unpacked support for unconditional and\nconditional CNOT.  The type suffix has to be taken from\nthe element size rather than the container size.\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (*cnot<mode>): Extend from\n\tSVE_FULL_I to SVE_I.\n\t(*cond_cnot<mode>_2, *cond_cnot<mode>_any): Likewise.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/cnot_2.c: New test.\n\t* gcc.target/aarch64/sve/cond_cnot_4.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_cnot_4_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_cnot_5.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_cnot_5_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_cnot_6.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_cnot_6_run.c: Likewise.", "tree": {"sha": "a929a8f3f861e2abfb21b74093074ac73f6a7967", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a929a8f3f861e2abfb21b74093074ac73f6a7967"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fe3e6bf061da8d9b0e759927c340fe8e0f44725", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fe3e6bf061da8d9b0e759927c340fe8e0f44725", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fe3e6bf061da8d9b0e759927c340fe8e0f44725", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fe3e6bf061da8d9b0e759927c340fe8e0f44725/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3c5d1fa53ad85424ce05f19583223ad2f413cfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3c5d1fa53ad85424ce05f19583223ad2f413cfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3c5d1fa53ad85424ce05f19583223ad2f413cfa"}], "stats": {"total": 238, "additions": 220, "deletions": 18}, "files": [{"sha": "2f5a5e3c9148cd7480022f61a4110b6cbd788243", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fe3e6bf061da8d9b0e759927c340fe8e0f44725/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fe3e6bf061da8d9b0e759927c340fe8e0f44725/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=5fe3e6bf061da8d9b0e759927c340fe8e0f44725", "patch": "@@ -3227,16 +3227,16 @@\n )\n \n (define_insn \"*cnot<mode>\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n \t  [(unspec:<VPRED>\n \t     [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n \t      (match_operand:SI 5 \"aarch64_sve_ptrue_flag\")\n \t      (eq:<VPRED>\n-\t\t(match_operand:SVE_FULL_I 2 \"register_operand\" \"0, w\")\n-\t\t(match_operand:SVE_FULL_I 3 \"aarch64_simd_imm_zero\"))]\n+\t\t(match_operand:SVE_I 2 \"register_operand\" \"0, w\")\n+\t\t(match_operand:SVE_I 3 \"aarch64_simd_imm_zero\"))]\n \t     UNSPEC_PRED_Z)\n-\t   (match_operand:SVE_FULL_I 4 \"aarch64_simd_imm_one\")\n+\t   (match_operand:SVE_I 4 \"aarch64_simd_imm_one\")\n \t   (match_dup 3)]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\"\n@@ -3274,19 +3274,19 @@\n \n ;; Predicated logical inverse, merging with the first input.\n (define_insn_and_rewrite \"*cond_cnot<mode>_2\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n \t   ;; Logical inverse of operand 2 (as above).\n-\t   (unspec:SVE_FULL_I\n+\t   (unspec:SVE_I\n \t     [(unspec:<VPRED>\n \t\t[(match_operand 5)\n \t\t (const_int SVE_KNOWN_PTRUE)\n \t\t (eq:<VPRED>\n-\t\t   (match_operand:SVE_FULL_I 2 \"register_operand\" \"0, w\")\n-\t\t   (match_operand:SVE_FULL_I 3 \"aarch64_simd_imm_zero\"))]\n+\t\t   (match_operand:SVE_I 2 \"register_operand\" \"0, w\")\n+\t\t   (match_operand:SVE_I 3 \"aarch64_simd_imm_zero\"))]\n \t\tUNSPEC_PRED_Z)\n-\t      (match_operand:SVE_FULL_I 4 \"aarch64_simd_imm_one\")\n+\t      (match_operand:SVE_I 4 \"aarch64_simd_imm_one\")\n \t      (match_dup 3)]\n \t     UNSPEC_SEL)\n \t   (match_dup 2)]\n@@ -3310,22 +3310,22 @@\n ;; as earlyclobber helps to make the instruction more regular to the\n ;; register allocator.\n (define_insn_and_rewrite \"*cond_cnot<mode>_any\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=&w, ?&w, ?&w\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=&w, ?&w, ?&w\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n \t   ;; Logical inverse of operand 2 (as above).\n-\t   (unspec:SVE_FULL_I\n+\t   (unspec:SVE_I\n \t     [(unspec:<VPRED>\n \t\t[(match_operand 5)\n \t\t (const_int SVE_KNOWN_PTRUE)\n \t\t (eq:<VPRED>\n-\t\t   (match_operand:SVE_FULL_I 2 \"register_operand\" \"w, w, w\")\n-\t\t   (match_operand:SVE_FULL_I 3 \"aarch64_simd_imm_zero\"))]\n+\t\t   (match_operand:SVE_I 2 \"register_operand\" \"w, w, w\")\n+\t\t   (match_operand:SVE_I 3 \"aarch64_simd_imm_zero\"))]\n \t\tUNSPEC_PRED_Z)\n-\t      (match_operand:SVE_FULL_I 4 \"aarch64_simd_imm_one\")\n+\t      (match_operand:SVE_I 4 \"aarch64_simd_imm_one\")\n \t      (match_dup 3)]\n \t     UNSPEC_SEL)\n-\t   (match_operand:SVE_FULL_I 6 \"aarch64_simd_reg_or_zero\" \"0, Dz, w\")]\n+\t   (match_operand:SVE_I 6 \"aarch64_simd_reg_or_zero\" \"0, Dz, w\")]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE && !rtx_equal_p (operands[2], operands[6])\"\n   \"@"}, {"sha": "fe77823442465a2af57e6e3d38f4d0639a992714", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cnot_2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fe3e6bf061da8d9b0e759927c340fe8e0f44725/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcnot_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fe3e6bf061da8d9b0e759927c340fe8e0f44725/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcnot_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcnot_2.c?ref=5fe3e6bf061da8d9b0e759927c340fe8e0f44725", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE1, TYPE2, COUNT)\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##TYPE1##_##TYPE2##_##TYPE3 (TYPE2 *restrict r,\t\t\\\n+\t\t\t\t    TYPE1 *restrict pred,\t\\\n+\t\t\t\t    TYPE2 *restrict a)\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < COUNT; ++i)\t\t\t\t\\\n+      if (pred[i])\t\t\t\t\t\t\\\n+\tr[i] = !a[i];\t\t\t\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (int16_t, int8_t, 7) \\\n+  T (int32_t, int8_t, 3) \\\n+  T (int32_t, int16_t, 3) \\\n+  T (int64_t, int8_t, 5) \\\n+  T (int64_t, int16_t, 5) \\\n+  T (int64_t, int32_t, 5)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.b, p[0-7]/m,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */"}, {"sha": "729d3f4f2ac9f83f3b3254c88c0bcc6ab2287bee", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_cnot_4.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fe3e6bf061da8d9b0e759927c340fe8e0f44725/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fe3e6bf061da8d9b0e759927c340fe8e0f44725/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_4.c?ref=5fe3e6bf061da8d9b0e759927c340fe8e0f44725", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE1, TYPE2, COUNT)\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##TYPE1##_##TYPE2 (TYPE2 *__restrict r,\t\t\t\\\n+\t\t\t  TYPE2 *__restrict a,\t\t\t\\\n+\t\t\t  TYPE1 *__restrict pred)\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < COUNT; ++i)\t\t\t\t\\\n+      r[i] = pred[i] ? !a[i] : a[i];\t\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (int16_t, int8_t, 7) \\\n+  T (int32_t, int8_t, 3) \\\n+  T (int32_t, int16_t, 3) \\\n+  T (int64_t, int8_t, 5) \\\n+  T (int64_t, int16_t, 5) \\\n+  T (int64_t, int32_t, 5)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.b, p[0-7]/m,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "de9c0a502e914f0513461d9a83257d2ca35cd04a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_cnot_4_run.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fe3e6bf061da8d9b0e759927c340fe8e0f44725/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_4_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fe3e6bf061da8d9b0e759927c340fe8e0f44725/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_4_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_4_run.c?ref=5fe3e6bf061da8d9b0e759927c340fe8e0f44725", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_cnot_4.c\"\n+\n+#define TEST_LOOP(TYPE1, TYPE2, N)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE1 pred[N];\t\t\t\t\t\t\\\n+    TYPE2 r[N], a[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = i & 1 ? 0 : 3 * (i + 1);\t\t\t\t\\\n+\tpred[i] = (i % 3 < 2);\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE1##_##TYPE2 (r, a, pred);\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (TYPE2) (pred[i] ? !a[i] : a[i]))\t\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "7318e1085911d12bd089a0c8a905b2f1cdbff62e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_cnot_5.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fe3e6bf061da8d9b0e759927c340fe8e0f44725/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fe3e6bf061da8d9b0e759927c340fe8e0f44725/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_5.c?ref=5fe3e6bf061da8d9b0e759927c340fe8e0f44725", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE1, TYPE2, COUNT)\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##TYPE1##_##TYPE2 (TYPE2 *__restrict r,\t\t\t\\\n+\t\t\t  TYPE1 *__restrict a,\t\t\t\\\n+\t\t\t  TYPE2 *__restrict b)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < COUNT; ++i)\t\t\t\t\\\n+      r[i] = a[i] == 0 ? !b[i] : a[i];\t\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (int16_t, int8_t, 7) \\\n+  T (int32_t, int8_t, 3) \\\n+  T (int32_t, int16_t, 3) \\\n+  T (int64_t, int8_t, 5) \\\n+  T (int64_t, int16_t, 5) \\\n+  T (int64_t, int32_t, 5)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.b, p[0-7]/m,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "f8f277c32c251d2a29d21abefe2f4675bd9eb2c4", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_cnot_5_run.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fe3e6bf061da8d9b0e759927c340fe8e0f44725/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_5_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fe3e6bf061da8d9b0e759927c340fe8e0f44725/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_5_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_5_run.c?ref=5fe3e6bf061da8d9b0e759927c340fe8e0f44725", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_cnot_5.c\"\n+\n+#define TEST_LOOP(TYPE1, TYPE2, N)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE1 a[N];\t\t\t\t\t\t\t\\\n+    TYPE2 r[N], b[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = i % 3 < 2 ? 0 : i * 42;\t\t\t\t\\\n+\tb[i] = i & 1 ? 0 : 3 * (i + 1);\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE1##_##TYPE2 (r, a, b);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (TYPE2) (a[i] == 0 ? !b[i] : a[i]))\t\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "d44e357f44a21c3fd5030ac62fe8d12c2a348a6f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_cnot_6.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fe3e6bf061da8d9b0e759927c340fe8e0f44725/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fe3e6bf061da8d9b0e759927c340fe8e0f44725/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_6.c?ref=5fe3e6bf061da8d9b0e759927c340fe8e0f44725", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE1, TYPE2, COUNT)\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##TYPE1##_##TYPE2 (TYPE2 *__restrict r,\t\t\t\\\n+\t\t\t  TYPE1 *__restrict a,\t\t\t\\\n+\t\t\t  TYPE2 *__restrict b)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < COUNT; ++i)\t\t\t\t\\\n+      r[i] = a[i] == 0 ? !b[i] : 127;\t\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (int16_t, int8_t, 7) \\\n+  T (int32_t, int8_t, 3) \\\n+  T (int32_t, int16_t, 3) \\\n+  T (int64_t, int8_t, 5) \\\n+  T (int64_t, int16_t, 5) \\\n+  T (int64_t, int32_t, 5)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.b, p[0-7]/m,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^\\n]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "9e33616dc8f7b46535da978be41d70dee2f683a8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_cnot_6_run.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fe3e6bf061da8d9b0e759927c340fe8e0f44725/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_6_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fe3e6bf061da8d9b0e759927c340fe8e0f44725/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_6_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_6_run.c?ref=5fe3e6bf061da8d9b0e759927c340fe8e0f44725", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_cnot_6.c\"\n+\n+#define TEST_LOOP(TYPE1, TYPE2, N)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE1 a[N];\t\t\t\t\t\t\t\\\n+    TYPE2 r[N], b[N];\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = i % 3 < 2 ? 0 : i * 42;\t\t\t\t\\\n+\tb[i] = i & 1 ? 0 : 3 * (i + 1);\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE1##_##TYPE2 (r, a, b);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (TYPE2) (a[i] == 0 ? !b[i] : 127))\t\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}]}