{"sha": "cb712ad45a0ab19659e3b5b70a6a4dd8ab54af27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I3MTJhZDQ1YTBhYjE5NjU5ZTNiNWI3MGE2YTRkZDhhYjU0YWYyNw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-08T18:18:26Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-08T18:18:26Z"}, "message": "entered into RCS\n\nFrom-SVN: r1526", "tree": {"sha": "1565e7c792859d4cd2ef82ca3b364fc69628362d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1565e7c792859d4cd2ef82ca3b364fc69628362d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb712ad45a0ab19659e3b5b70a6a4dd8ab54af27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb712ad45a0ab19659e3b5b70a6a4dd8ab54af27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb712ad45a0ab19659e3b5b70a6a4dd8ab54af27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb712ad45a0ab19659e3b5b70a6a4dd8ab54af27/comments", "author": null, "committer": null, "parents": [{"sha": "b083f44d9431500b43e21c7d597905b4c10d0043", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b083f44d9431500b43e21c7d597905b4c10d0043", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b083f44d9431500b43e21c7d597905b4c10d0043"}], "stats": {"total": 85, "additions": 84, "deletions": 1}, "files": [{"sha": "03a03893395be50d531f057c3901db0a92e952db", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 84, "deletions": 1, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb712ad45a0ab19659e3b5b70a6a4dd8ab54af27/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb712ad45a0ab19659e3b5b70a6a4dd8ab54af27/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=cb712ad45a0ab19659e3b5b70a6a4dd8ab54af27", "patch": "@@ -977,9 +977,92 @@ dwarf_fund_type_name (ft)\n     case FT_real96:\t\treturn \"FT_real96\";\n     case FT_real128:\t\treturn \"FT_real128\";\n \n-    default:\t\t\treturn \"<unknown fundamental type>\";\n+    default:\t\t\treturn \"FT_<unknown>\";\n     }\n }\n+\n+/* Determine the \"ultimate origin\" of a decl.  The decl may be an\n+   inlined instance of an inlined instance of a decl which is local\n+   to an inline function, so we have to trace all of the way back\n+   through the origin chain to find out what sort of node actually\n+   served as the original seed for the given block.  */\n+\n+static tree\n+decl_ultimate_origin (decl)\n+     register tree decl;\n+{\n+  register tree immediate_origin = DECL_ABSTRACT_ORIGIN (decl);\n+\n+  if (immediate_origin == NULL)\n+    return NULL;\n+  else\n+    {\n+      register tree ret_val;\n+      register tree lookahead = immediate_origin;\n+\n+      do\n+\t{\n+\t  ret_val = lookahead;\n+\t  lookahead = DECL_ABSTRACT_ORIGIN (ret_val);\n+\t}\n+      while (lookahead != NULL && lookahead != ret_val);\n+      return ret_val;\n+    }\n+}\n+\n+static void\n+output_unsigned_leb128 (value)\n+     register unsigned long value;\n+{\n+  register unsigned long orig_value = value;\n+\n+  do\n+    {\n+      register unsigned byte = (value & 0x7f);\n+\n+      value >>= 7;\n+      if (value != 0)\t/* more bytes to follow */\n+\tbyte |= 0x80;\n+      fprintf (asm_out_file, \"\\t%s\\t0x%x\", ASM_BYTE_OP, (unsigned) byte);\n+      if (flag_verbose_asm && value == 0)\n+\tfprintf (asm_out_file, \"\\t%s ULEB128 number - value = %u\",\n+\t\t ASM_COMMENT_START, orig_value);\n+      fputc ('\\n', asm_out_file);\n+    }\n+  while (value != 0);\n+}\n+\n+static void\n+output_signed_leb128 (value)\n+     register long value;\n+{\n+  register long orig_value = value;\n+  register int negative = (value < 0);\n+  register int more;\n+\n+  do\n+    {\n+      register unsigned byte = (value & 0x7f);\n+\n+      value >>= 7;\n+      if (negative)\n+\tvalue |= 0xfe000000;  /* manually sign extend */\n+      if (((value == 0) && ((byte & 0x40) == 0))\n+          || ((value == -1) && ((byte & 0x40) == 1)))\n+\tmore = 0;\n+      else\n+\t{\n+\t  byte |= 0x80;\n+\t  more = 1;\n+\t}\n+      fprintf (asm_out_file, \"\\t%s\\t0x%x\", ASM_BYTE_OP, (unsigned) byte);\n+      if (flag_verbose_asm && more == 0)\n+\tfprintf (asm_out_file, \"\\t%s SLEB128 number - value = %d\",\n+\t\t ASM_COMMENT_START, orig_value);\n+      fputc ('\\n', asm_out_file);\n+    }\n+  while (more);\n+}\n \f\n /**************** utility functions for attribute functions ******************/\n "}]}