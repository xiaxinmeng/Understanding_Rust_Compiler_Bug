{"sha": "df81764ba1a276d9b48f408bd2dd1e71e09e7863", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY4MTc2NGJhMWEyNzZkOWI0OGY0MDhiZDJkZDFlNzFlMDllNzg2Mw==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2020-06-10T10:55:46Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2020-06-10T10:55:46Z"}, "message": "AArch64: Adjust costing of by element MUL to be the same as SAME3 MUL.\n\nThe cost model is currently treating multiplication by element as being more\nexpensive than 3 same multiplication.  This means that if the value is on the\nSIMD side we add an unneeded DUP.  If the value is on the genreg side we use the\nmore expensive DUP instead of fmov.\n\nThis patch corrects the costs such that the two multiplies are costed the same\nwhich allows us to generate\n\n        fmul    v3.4s, v3.4s, v0.s[0]\n\ninstead of\n\n        dup     v0.4s, v0.s[0]\n        fmul    v3.4s, v3.4s, v0.4s\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64.c (aarch64_rtx_mult_cost): Adjust costs for mul.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/asimd-mull-elem.c: New test.", "tree": {"sha": "de51bc17f2318c38720ba8ffcdfa54dce2692cbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de51bc17f2318c38720ba8ffcdfa54dce2692cbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df81764ba1a276d9b48f408bd2dd1e71e09e7863", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df81764ba1a276d9b48f408bd2dd1e71e09e7863", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df81764ba1a276d9b48f408bd2dd1e71e09e7863", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df81764ba1a276d9b48f408bd2dd1e71e09e7863/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b05d5563f4be13b4a0d0951375a82adf483973c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b05d5563f4be13b4a0d0951375a82adf483973c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b05d5563f4be13b4a0d0951375a82adf483973c0"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "f3551a73d87c4e686540f39224985592c3c66fd1", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df81764ba1a276d9b48f408bd2dd1e71e09e7863/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df81764ba1a276d9b48f408bd2dd1e71e09e7863/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=df81764ba1a276d9b48f408bd2dd1e71e09e7863", "patch": "@@ -11279,7 +11279,23 @@ aarch64_rtx_mult_cost (rtx x, enum rtx_code code, int outer, bool speed)\n   op1 = XEXP (x, 1);\n \n   if (VECTOR_MODE_P (mode))\n-    mode = GET_MODE_INNER (mode);\n+    {\n+      unsigned int vec_flags = aarch64_classify_vector_mode (mode);\n+      mode = GET_MODE_INNER (mode);\n+      if (vec_flags & VEC_ADVSIMD)\n+\t{\n+\t  /* The by-element versions of the instruction have the same costs as\n+\t     the normal 3-vector version.  So don't add the costs of the\n+\t     duplicate into the costs of the multiply.  We make an assumption\n+\t     that the input to the VEC_DUPLICATE is already on the FP & SIMD\n+\t     side.  This means costing of a MUL by element pre RA is a bit\n+\t     optimistic.  */\n+\t  if (GET_CODE (op0) == VEC_DUPLICATE)\n+\t    op0 = XEXP (op0, 0);\n+\t  else if (GET_CODE (op1) == VEC_DUPLICATE)\n+\t    op1 = XEXP (op1, 0);\n+\t}\n+    }\n \n   /* Integer multiply/fma.  */\n   if (GET_MODE_CLASS (mode) == MODE_INT)"}, {"sha": "513721cee0c8372781e6daf33bc06e256cab8cb8", "filename": "gcc/testsuite/gcc.target/aarch64/asimd-mull-elem.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df81764ba1a276d9b48f408bd2dd1e71e09e7863/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasimd-mull-elem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df81764ba1a276d9b48f408bd2dd1e71e09e7863/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasimd-mull-elem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasimd-mull-elem.c?ref=df81764ba1a276d9b48f408bd2dd1e71e09e7863", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target vect_float } */\n+/* { dg-options \"-Ofast\" } */\n+\n+#include <arm_neon.h>\n+\n+void s_mult_i (int32_t* restrict res, int32_t* restrict a, int32_t b)\n+{\n+    for (int x = 0; x < 16; x++)\n+      res[x] = a[x] * b;\n+}\n+\n+void s_mult_f (float32_t* restrict res, float32_t* restrict a, float32_t b)\n+{\n+    for (int x = 0; x < 16; x++)\n+      res[x] = a[x] * b;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\s+mul\\tv[0-9]+\\.4s, v[0-9]+\\.4s, v[0-9]+\\.s\\[0\\]} 4 } } */\n+/* { dg-final { scan-assembler-times {\\s+fmul\\tv[0-9]+\\.4s, v[0-9]+\\.4s, v[0-9]+\\.s\\[0\\]} 4 } } */"}]}