{"sha": "e072ae27e0898a7244b08d003a43b4cecf146df0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA3MmFlMjdlMDg5OGE3MjQ0YjA4ZDAwM2E0M2I0Y2VjZjE0NmRmMA==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2004-06-09T15:07:03Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-06-09T15:07:03Z"}, "message": "tree-complex.c (expand_complex_comparison): Use fold_convert instead of convert.\n\n2004-06-09  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        * tree-complex.c (expand_complex_comparison): Use fold_convert instead\n        of convert.\n        * tree-inline.c (setup_one_parameter): Likewise.\n        * tree-sra.c (csc_build_component_ref): Likewise.\n        * tree-ssa-ccp.c (ccp_fold): Likewise.\n        * tree-ssa-copy.c (cprop_operand): Likewise.\n        * tree-ssa-dom.c (simplify_rhs_and_lookup_avail_expr): Likewise.\n        * tree-tailcall.c (tree_optimize_tail_calls_1): Likewise.\n\nFrom-SVN: r82837", "tree": {"sha": "39bf59660f207147c6aa8a1497841a89c11c574a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39bf59660f207147c6aa8a1497841a89c11c574a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e072ae27e0898a7244b08d003a43b4cecf146df0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e072ae27e0898a7244b08d003a43b4cecf146df0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e072ae27e0898a7244b08d003a43b4cecf146df0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e072ae27e0898a7244b08d003a43b4cecf146df0/comments", "author": null, "committer": null, "parents": [{"sha": "655948a348f819803aeda65b0ae445ba86712a64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/655948a348f819803aeda65b0ae445ba86712a64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/655948a348f819803aeda65b0ae445ba86712a64"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "a19dcb2da21de2c77759550bd0262abe5eadf4a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e072ae27e0898a7244b08d003a43b4cecf146df0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e072ae27e0898a7244b08d003a43b4cecf146df0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e072ae27e0898a7244b08d003a43b4cecf146df0", "patch": "@@ -1,3 +1,14 @@\n+2004-06-09  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\t* tree-complex.c (expand_complex_comparison): Use fold_convert instead\n+\tof convert.\n+\t* tree-inline.c (setup_one_parameter): Likewise.\n+\t* tree-sra.c (csc_build_component_ref): Likewise.\n+\t* tree-ssa-ccp.c (ccp_fold): Likewise.\n+\t* tree-ssa-copy.c (cprop_operand): Likewise.\n+\t* tree-ssa-dom.c (simplify_rhs_and_lookup_avail_expr): Likewise.\n+\t* tree-tailcall.c (tree_optimize_tail_calls_1): Likewise.\n+\n 2004-06-09  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \tPR rtl-optimization/15521:"}, {"sha": "0e6dab7e471392e74d122e2a0990303458387eaf", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e072ae27e0898a7244b08d003a43b4cecf146df0/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e072ae27e0898a7244b08d003a43b4cecf146df0/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=e072ae27e0898a7244b08d003a43b4cecf146df0", "patch": "@@ -387,7 +387,7 @@ expand_complex_comparison (block_stmt_iterator *bsi, tree ar, tree ai,\n       /* FALLTHRU */\n     case MODIFY_EXPR:\n       type = TREE_TYPE (TREE_OPERAND (stmt, 1));\n-      TREE_OPERAND (stmt, 1) = convert (type, cc);\n+      TREE_OPERAND (stmt, 1) = fold_convert (type, cc);\n       break;\n     case COND_EXPR:\n       TREE_OPERAND (stmt, 0) = cc;"}, {"sha": "39dde67dea8adf51a9f7a4d3e708c18b6a21fff2", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e072ae27e0898a7244b08d003a43b4cecf146df0/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e072ae27e0898a7244b08d003a43b4cecf146df0/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=e072ae27e0898a7244b08d003a43b4cecf146df0", "patch": "@@ -779,7 +779,7 @@ setup_one_parameter (inline_data *id, tree p, tree value,\n      the argument to the proper type in case it was promoted.  */\n   if (value)\n     {\n-      tree rhs = convert (TREE_TYPE (var), value);\n+      tree rhs = fold_convert (TREE_TYPE (var), value);\n \n       if (rhs == error_mark_node)\n \treturn;"}, {"sha": "4f1bbcdd12eb2374079ec816e58a7882837bf762", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e072ae27e0898a7244b08d003a43b4cecf146df0/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e072ae27e0898a7244b08d003a43b4cecf146df0/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=e072ae27e0898a7244b08d003a43b4cecf146df0", "patch": "@@ -587,7 +587,7 @@ csc_build_component_ref (tree base, tree field)\n \t the entire structure should be zeroed.  */\n       if (CONSTRUCTOR_ELTS (base))\n \tabort ();\n-      return convert (TREE_TYPE (field), integer_zero_node);\n+      return fold_convert (TREE_TYPE (field), integer_zero_node);\n \n     default:\n       /* Avoid sharing BASE when building the different COMPONENT_REFs."}, {"sha": "ab7de37ab4c98ceb9faf0217e8ab24d5223c2867", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e072ae27e0898a7244b08d003a43b4cecf146df0/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e072ae27e0898a7244b08d003a43b4cecf146df0/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=e072ae27e0898a7244b08d003a43b4cecf146df0", "patch": "@@ -953,7 +953,7 @@ ccp_fold (tree stmt)\n   if (retval)\n     {\n       if (TREE_TYPE (retval) != TREE_TYPE (rhs))\n-\tretval = convert (TREE_TYPE (rhs), retval);\n+\tretval = fold_convert (TREE_TYPE (rhs), retval);\n \n       if (TREE_TYPE (retval) == TREE_TYPE (rhs))\n \treturn retval;"}, {"sha": "688116113b17ccd6aedf6f20e91be306d900ba8b", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e072ae27e0898a7244b08d003a43b4cecf146df0/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e072ae27e0898a7244b08d003a43b4cecf146df0/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=e072ae27e0898a7244b08d003a43b4cecf146df0", "patch": "@@ -180,7 +180,7 @@ cprop_operand (stmt_ann_t ann, tree *op_p, varray_type const_and_copies)\n      if (!lang_hooks.types_compatible_p (op_type, val_type)\n            && TREE_CODE (val) != SSA_NAME)\n \t{\n-\t  val = convert (TREE_TYPE (*op_p), val);\n+\t  val = fold_convert (TREE_TYPE (*op_p), val);\n \t  if (!is_gimple_min_invariant (val)\n \t      && TREE_CODE (val) != SSA_NAME)\n \t    return false;"}, {"sha": "5b31163106719a95ebd6a3d227fe9d451900dea3", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e072ae27e0898a7244b08d003a43b4cecf146df0/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e072ae27e0898a7244b08d003a43b4cecf146df0/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=e072ae27e0898a7244b08d003a43b4cecf146df0", "patch": "@@ -1875,7 +1875,7 @@ simplify_rhs_and_lookup_avail_expr (struct dom_walk_data *walk_data,\n \t      TREE_SET_CODE (TREE_OPERAND (dummy_cond, 0), LE_EXPR);\n \t      TREE_OPERAND (TREE_OPERAND (dummy_cond, 0), 0) = op;\n \t      TREE_OPERAND (TREE_OPERAND (dummy_cond, 0), 1)\n-\t\t= convert (type, integer_zero_node);\n+\t\t= fold_convert (type, integer_zero_node);\n \t    }\n \t  val = simplify_cond_and_lookup_avail_expr (dummy_cond,\n \t\t\t\t\t\t     &bd->avail_exprs,\n@@ -1886,7 +1886,7 @@ simplify_rhs_and_lookup_avail_expr (struct dom_walk_data *walk_data,\n \t      TREE_SET_CODE (TREE_OPERAND (dummy_cond, 0), GE_EXPR);\n \t      TREE_OPERAND (TREE_OPERAND (dummy_cond, 0), 0) = op;\n \t      TREE_OPERAND (TREE_OPERAND (dummy_cond, 0), 1)\n-\t\t= convert (type, integer_zero_node);\n+\t\t= fold_convert (type, integer_zero_node);\n \n \t      val = simplify_cond_and_lookup_avail_expr (dummy_cond,\n \t\t\t\t\t\t\t &bd->avail_exprs,"}, {"sha": "5027c2b6f414cbf655ee0e2e749e7d461a3afcf5", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e072ae27e0898a7244b08d003a43b4cecf146df0/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e072ae27e0898a7244b08d003a43b4cecf146df0/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=e072ae27e0898a7244b08d003a43b4cecf146df0", "patch": "@@ -844,7 +844,7 @@ tree_optimize_tail_calls_1 (bool opt_tailcalls)\n \t  add_referenced_tmp_var (tmp);\n \n \t  phi = create_phi_node (tmp, first);\n-\t  add_phi_arg (&phi, convert (ret_type, integer_zero_node),\n+\t  add_phi_arg (&phi, fold_convert (ret_type, integer_zero_node),\n \t\t       first->pred);\n \t  a_acc = PHI_RESULT (phi);\n \t}\n@@ -857,7 +857,7 @@ tree_optimize_tail_calls_1 (bool opt_tailcalls)\n \t  add_referenced_tmp_var (tmp);\n \n \t  phi = create_phi_node (tmp, first);\n-\t  add_phi_arg (&phi, convert (ret_type, integer_one_node),\n+\t  add_phi_arg (&phi, fold_convert (ret_type, integer_one_node),\n \t\t       first->pred);\n \t  m_acc = PHI_RESULT (phi);\n \t}"}]}