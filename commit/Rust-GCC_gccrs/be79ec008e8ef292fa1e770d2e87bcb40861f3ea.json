{"sha": "be79ec008e8ef292fa1e770d2e87bcb40861f3ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU3OWVjMDA4ZThlZjI5MmZhMWU3NzBkMmU4N2JjYjQwODYxZjNlYQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-04-29T05:42:36Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-04-29T05:42:36Z"}, "message": "libphobos: Backport minimal MinGW support patches.\n\nMerges upstream druntime 1ca80e4e, phobos b5e9661a0.\n\nReviewed-on: https://github.com/dlang/druntime/pull/2587\n\t     https://github.com/dlang/phobos/pull/6981\n\nFrom-SVN: r270638", "tree": {"sha": "211d8da0953b3d67538aa84ac395a1a2fc3b9786", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/211d8da0953b3d67538aa84ac395a1a2fc3b9786"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be79ec008e8ef292fa1e770d2e87bcb40861f3ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be79ec008e8ef292fa1e770d2e87bcb40861f3ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be79ec008e8ef292fa1e770d2e87bcb40861f3ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be79ec008e8ef292fa1e770d2e87bcb40861f3ea/comments", "author": null, "committer": null, "parents": [{"sha": "7d5010ee7af0d31dbb7c259ceae3d416e7fe38d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d5010ee7af0d31dbb7c259ceae3d416e7fe38d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d5010ee7af0d31dbb7c259ceae3d416e7fe38d0"}], "stats": {"total": 97, "additions": 53, "deletions": 44}, "files": [{"sha": "d947097ec65103a094bc985c7962da3c59f0c5da", "filename": "libphobos/libdruntime/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be79ec008e8ef292fa1e770d2e87bcb40861f3ea/libphobos%2Flibdruntime%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be79ec008e8ef292fa1e770d2e87bcb40861f3ea/libphobos%2Flibdruntime%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMERGE?ref=be79ec008e8ef292fa1e770d2e87bcb40861f3ea", "patch": "@@ -1,4 +1,4 @@\n-e03164b5259a9f116eb91dfa5a18c192fa72e575\n+1ca80e4e0cf460575752a0c157ca52c184f4b982\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/druntime repository."}, {"sha": "3cdfa6a4ac5ed534dd7f8aebe55d43ecedd834d4", "filename": "libphobos/libdruntime/core/stdc/stdio.d", "status": "modified", "additions": 19, "deletions": 29, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be79ec008e8ef292fa1e770d2e87bcb40861f3ea/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be79ec008e8ef292fa1e770d2e87bcb40861f3ea/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdio.d?ref=be79ec008e8ef292fa1e770d2e87bcb40861f3ea", "patch": "@@ -1291,35 +1291,7 @@ size_t fwrite(scope const void* ptr, size_t size, size_t nmemb, FILE* stream);\n     c_long ftell(FILE* stream);\n }\n \n-version (MinGW)\n-{\n-  // No unsafe pointer manipulation.\n-  extern (D) @trusted\n-  {\n-    ///\n-    void rewind()(FILE* stream)   { fseek(stream,0L,SEEK_SET); stream._flag = stream._flag & ~_IOERR; }\n-    ///\n-    pure void clearerr()(FILE* stream) { stream._flag = stream._flag & ~(_IOERR|_IOEOF); }\n-    ///\n-    pure int  feof()(FILE* stream)     { return stream._flag&_IOEOF; }\n-    ///\n-    pure int  ferror()(FILE* stream)   { return stream._flag&_IOERR; }\n-  }\n-  ///\n-    int   __mingw_snprintf(scope char* s, size_t n, scope const char* fmt, ...);\n-    ///\n-    alias __mingw_snprintf _snprintf;\n-    ///\n-    alias __mingw_snprintf snprintf;\n-\n-    ///\n-    int   __mingw_vsnprintf(scope char* s, size_t n, scope const char* format, va_list arg);\n-    ///\n-    alias __mingw_vsnprintf _vsnprintf;\n-    ///\n-    alias __mingw_vsnprintf vsnprintf;\n-}\n-else version (CRuntime_DigitalMars)\n+version (CRuntime_DigitalMars)\n {\n   // No unsafe pointer manipulation.\n   extern (D) @trusted\n@@ -1362,6 +1334,23 @@ else version (CRuntime_Microsoft)\n     pure int  fileno(FILE* stream);\n   }\n \n+  version (MinGW)\n+  {\n+    int   __mingw_snprintf(scope char* s, size_t n, scope const char* fmt, ...);\n+    ///\n+    alias __mingw_snprintf _snprintf;\n+    ///\n+    alias __mingw_snprintf snprintf;\n+\n+    ///\n+    int   __mingw_vsnprintf(scope char* s, size_t n, scope const char* format, va_list arg);\n+    ///\n+    alias __mingw_vsnprintf _vsnprintf;\n+    ///\n+    alias __mingw_vsnprintf vsnprintf;\n+  }\n+  else\n+  {\n     ///\n     int _snprintf(scope char* s, size_t n, scope const char* format, ...);\n     ///\n@@ -1371,6 +1360,7 @@ else version (CRuntime_Microsoft)\n     int _vsnprintf(scope char* s, size_t n, scope const char* format, va_list arg);\n     ///\n     int  vsnprintf(scope char* s, size_t n, scope const char* format, va_list arg);\n+  }\n \n     ///\n     int _fputc_nolock(int c, FILE *fp);"}, {"sha": "c3c4db37c42079471f5adac0279136109f223a42", "filename": "libphobos/libdruntime/core/sys/windows/dll.d", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be79ec008e8ef292fa1e770d2e87bcb40861f3ea/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdll.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be79ec008e8ef292fa1e770d2e87bcb40861f3ea/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdll.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdll.d?ref=be79ec008e8ef292fa1e770d2e87bcb40861f3ea", "patch": "@@ -328,7 +328,9 @@ public:\n  */\n bool dll_fixTLS( HINSTANCE hInstance, void* tlsstart, void* tlsend, void* tls_callbacks_a, int* tlsindex ) nothrow\n {\n-    version (Win64)\n+    version (GNU_EMUTLS)\n+        return true;\n+    else version (Win64)\n         return true;                // fixed\n     else version (Win32)\n     {"}, {"sha": "3e9802d7dc6ff7d6ba8ff4e3423a8e8277b7e42c", "filename": "libphobos/libdruntime/core/thread.d", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be79ec008e8ef292fa1e770d2e87bcb40861f3ea/libphobos%2Flibdruntime%2Fcore%2Fthread.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be79ec008e8ef292fa1e770d2e87bcb40861f3ea/libphobos%2Flibdruntime%2Fcore%2Fthread.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fthread.d?ref=be79ec008e8ef292fa1e770d2e87bcb40861f3ea", "patch": "@@ -49,9 +49,17 @@ version (Solaris)\n     import core.sys.solaris.sys.types;\n }\n \n-// this should be true for most architectures\n-version (GNU_StackGrowsDown)\n+version (GNU)\n+{\n+    import gcc.builtins;\n+    version (GNU_StackGrowsDown)\n+        version = StackGrowsDown;\n+}\n+else\n+{\n+    // this should be true for most architectures\n     version = StackGrowsDown;\n+}\n \n /**\n  * Returns the process ID of the calling process, which is guaranteed to be\n@@ -301,11 +309,6 @@ else version (Posix)\n             import core.sys.darwin.pthread : pthread_mach_thread_np;\n         }\n \n-        version (GNU)\n-        {\n-            import gcc.builtins;\n-        }\n-\n         //\n         // Entry point for POSIX threads\n         //"}, {"sha": "32635c460b36c10154f37020736d822070f238ee", "filename": "libphobos/libdruntime/rt/dmain2.d", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be79ec008e8ef292fa1e770d2e87bcb40861f3ea/libphobos%2Flibdruntime%2Frt%2Fdmain2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be79ec008e8ef292fa1e770d2e87bcb40861f3ea/libphobos%2Flibdruntime%2Frt%2Fdmain2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Frt%2Fdmain2.d?ref=be79ec008e8ef292fa1e770d2e87bcb40861f3ea", "patch": "@@ -340,7 +340,15 @@ extern (C) int _d_run_main(int argc, char **argv, MainFunc mainFunc)\n     version (CRuntime_Microsoft)\n     {\n         // enable full precision for reals\n-        version (Win64)\n+        version (GNU)\n+        {\n+            size_t fpu_cw;\n+            asm { \"fstcw %0\" : \"=m\" (fpu_cw); }\n+            fpu_cw |= 0b11_00_111111;  // 11: use 64 bit extended-precision\n+                                       // 111111: mask all FP exceptions\n+            asm { \"fldcw %0\" : \"=m\" (fpu_cw); }\n+        }\n+        else version (Win64)\n             asm\n             {\n                 push    RAX;"}, {"sha": "685b4e65d24c432502c7cc9645d5ce4e20996dfa", "filename": "libphobos/src/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be79ec008e8ef292fa1e770d2e87bcb40861f3ea/libphobos%2Fsrc%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be79ec008e8ef292fa1e770d2e87bcb40861f3ea/libphobos%2Fsrc%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2FMERGE?ref=be79ec008e8ef292fa1e770d2e87bcb40861f3ea", "patch": "@@ -1,4 +1,4 @@\n-b538f758a4d274b64751f80564b0207845cd018c\n+b5e9661a089b6514e01fa5195c0f2bc9cc06eddd\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/phobos repository."}, {"sha": "062b57035cab9f01541467f5a3f4bb1335d83de5", "filename": "libphobos/src/std/math.d", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be79ec008e8ef292fa1e770d2e87bcb40861f3ea/libphobos%2Fsrc%2Fstd%2Fmath.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be79ec008e8ef292fa1e770d2e87bcb40861f3ea/libphobos%2Fsrc%2Fstd%2Fmath.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fmath.d?ref=be79ec008e8ef292fa1e770d2e87bcb40861f3ea", "patch": "@@ -174,6 +174,12 @@ else version (D_InlineAsm_X86_64)\n     version = InlineAsm_X86_Any;\n }\n \n+version (CRuntime_Microsoft)\n+{\n+    version (InlineAsm_X86_Any)\n+        version = MSVC_InlineAsm;\n+}\n+\n version (X86_64) version = StaticallyHaveSSE;\n version (X86) version (OSX) version = StaticallyHaveSSE;\n \n@@ -3692,7 +3698,7 @@ real logb(real x) @trusted nothrow @nogc\n             ret                         ;\n         }\n     }\n-    else version (CRuntime_Microsoft)\n+    else version (MSVC_InlineAsm)\n     {\n         asm pure nothrow @nogc\n         {\n@@ -3979,7 +3985,7 @@ real ceil(real x) @trusted pure nothrow @nogc\n             ret                         ;\n         }\n     }\n-    else version (CRuntime_Microsoft)\n+    else version (MSVC_InlineAsm)\n     {\n         short cw;\n         asm pure nothrow @nogc\n@@ -4107,7 +4113,7 @@ real floor(real x) @trusted pure nothrow @nogc\n             ret                         ;\n         }\n     }\n-    else version (CRuntime_Microsoft)\n+    else version (MSVC_InlineAsm)\n     {\n         short cw;\n         asm pure nothrow @nogc\n@@ -4607,7 +4613,7 @@ real trunc(real x) @trusted nothrow @nogc\n             ret                         ;\n         }\n     }\n-    else version (CRuntime_Microsoft)\n+    else version (MSVC_InlineAsm)\n     {\n         short cw;\n         asm pure nothrow @nogc"}]}