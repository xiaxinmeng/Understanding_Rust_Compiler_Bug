{"sha": "6d331688fcb69e9aae84bb94cb7cc54641a90ab6", "node_id": "C_kwDOANBUbNoAKDZkMzMxNjg4ZmNiNjllOWFhZTg0YmI5NGNiN2NjNTQ2NDFhOTBhYjY", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-10T12:38:43Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-10T12:38:43Z"}, "message": "aarch64: Tweak FMAX/FMIN iterators\n\nThere was some duplication between the maxmin_uns (uns for unspec\nrather than unsigned) int attribute and the optab int attribute.\nThe difficulty for FMAXNM and FMINNM is that the instructions\nreally correspond to two things: the smax/smin optabs for floats\n(used only for fast-math-like flags) and the fmax/fmin optabs\n(used for built-in functions).  The optab attribute was\nconsistently for the former but maxmin_uns had a mixture of both.\n\nThis patch renames maxmin_uns to fmaxmin and only uses it\nfor the fmax and fmin optabs.  The reductions that previously\nused the maxmin_uns attribute now use the optab attribute instead.\n\nFMAX and FMIN are awkward in that they don't correspond to any\noptab.  It's nevertheless useful to define them alongside the\n\u201creal\u201d optabs.  Previously they were known as \u201csmax_nan\u201d and\n\u201csmin_nan\u201d, but the problem with those names it that smax and\nsmin are only used for floats if NaNs don't matter.  This patch\ntherefore uses fmax_nan and fmin_nan instead.\n\nThere is still some inconsistency, in that the optab attribute\nhandles UNSPEC_COND_FMAX but the fmaxmin attribute handles\nUNSPEC_FMAX.  This is because the SVE FP instructions, being\npredicated, have to use unspecs in cases where the Advanced\nSIMD ones could use rtl codes.\n\nAt least there are no duplicate entries though, so this seemed\nlike the best compromise for now.\n\ngcc/\n\t* config/aarch64/iterators.md (optab): Use fmax_nan instead of\n\tsmax_nan and fmin_nan instead of smin_nan.\n\t(maxmin_uns): Rename to...\n\t(fmaxmin): ...this and make the same changes.  Remove entries\n\tunrelated to fmax* and fmin*.\n\t* config/aarch64/aarch64.md (<maxmin_uns><mode>3): Rename to...\n\t(<fmaxmin><mode>3): ...this.\n\t* config/aarch64/aarch64-simd.md (aarch64_<maxmin_uns>p<mode>):\n\tRename to...\n\t(aarch64_<optab>p<mode>): ...this.\n\t(<maxmin_uns><mode>3): Rename to...\n\t(<fmaxmin><mode>3): ...this.\n\t(reduc_<maxmin_uns>_scal_<mode>): Rename to...\n\t(reduc_<optab>_scal_<mode>): ...this and update gen* call.\n\t(aarch64_reduc_<maxmin_uns>_internal<mode>): Rename to...\n\t(aarch64_reduc_<optab>_internal<mode>): ...this.\n\t(aarch64_reduc_<maxmin_uns>_internalv2si): Rename to...\n\t(aarch64_reduc_<optab>_internalv2si): ...this.\n\t* config/aarch64/aarch64-sve.md (<maxmin_uns><mode>3): Rename to...\n\t(<fmaxmin><mode>3): ...this.\n\t* config/aarch64/aarch64-simd-builtins.def (smax_nan, smin_nan)\n\tRename to...\n\t(fmax_nan, fmin_nan): ...this.\n\t* config/aarch64/arm_neon.h (vmax_f32, vmax_f64, vmaxq_f32, vmaxq_f64)\n\t(vmin_f32, vmin_f64, vminq_f32, vminq_f64, vmax_f16, vmaxq_f16)\n\t(vmin_f16, vminq_f16): Update accordingly.", "tree": {"sha": "1315025fd1850985e49e7e4295bba05d3ca16504", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1315025fd1850985e49e7e4295bba05d3ca16504"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d331688fcb69e9aae84bb94cb7cc54641a90ab6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d331688fcb69e9aae84bb94cb7cc54641a90ab6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d331688fcb69e9aae84bb94cb7cc54641a90ab6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d331688fcb69e9aae84bb94cb7cc54641a90ab6/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0612883d9dc6eebecdbe937893b86597acae237c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0612883d9dc6eebecdbe937893b86597acae237c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0612883d9dc6eebecdbe937893b86597acae237c"}], "stats": {"total": 90, "additions": 39, "deletions": 51}, "files": [{"sha": "9b0a6eceafefee2aa6e3965fa5c038c7fae7db57", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d331688fcb69e9aae84bb94cb7cc54641a90ab6/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d331688fcb69e9aae84bb94cb7cc54641a90ab6/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=6d331688fcb69e9aae84bb94cb7cc54641a90ab6", "patch": "@@ -502,21 +502,19 @@\n   BUILTIN_VHSDF (UNOP, reduc_smax_nan_scal_, 10, NONE)\n   BUILTIN_VHSDF (UNOP, reduc_smin_nan_scal_, 10, NONE)\n \n-  /* Implemented by <maxmin_uns><mode>3.\n-     smax variants map to fmaxnm,\n-     smax_nan variants map to fmax.  */\n+  /* Implemented by <optab><mode>3.  */\n   BUILTIN_VDQ_BHSI (BINOP, smax, 3, NONE)\n   BUILTIN_VDQ_BHSI (BINOP, smin, 3, NONE)\n   BUILTIN_VDQ_BHSI (BINOP, umax, 3, NONE)\n   BUILTIN_VDQ_BHSI (BINOP, umin, 3, NONE)\n-  BUILTIN_VHSDF_DF (BINOP, smax_nan, 3, NONE)\n-  BUILTIN_VHSDF_DF (BINOP, smin_nan, 3, NONE)\n \n-  /* Implemented by <maxmin_uns><mode>3.  */\n+  /* Implemented by <fmaxmin><mode>3.  */\n   BUILTIN_VHSDF_HSDF (BINOP, fmax, 3, FP)\n   BUILTIN_VHSDF_HSDF (BINOP, fmin, 3, FP)\n+  BUILTIN_VHSDF_DF (BINOP, fmax_nan, 3, FP)\n+  BUILTIN_VHSDF_DF (BINOP, fmin_nan, 3, FP)\n \n-  /* Implemented by aarch64_<maxmin_uns>p<mode>.  */\n+  /* Implemented by aarch64_<optab>p<mode>.  */\n   BUILTIN_VDQ_BHSI (BINOP, smaxp, 0, NONE)\n   BUILTIN_VDQ_BHSI (BINOP, sminp, 0, NONE)\n   BUILTIN_VDQ_BHSI (BINOP, umaxp, 0, NONE)"}, {"sha": "35d55a3e51e794733156b8938cccb6c5151e32f4", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d331688fcb69e9aae84bb94cb7cc54641a90ab6/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d331688fcb69e9aae84bb94cb7cc54641a90ab6/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=6d331688fcb69e9aae84bb94cb7cc54641a90ab6", "patch": "@@ -1553,7 +1553,7 @@\n })\n \n ;; Pairwise Integer Max/Min operations.\n-(define_insn \"aarch64_<maxmin_uns>p<mode>\"\n+(define_insn \"aarch64_<optab>p<mode>\"\n  [(set (match_operand:VDQ_BHSI 0 \"register_operand\" \"=w\")\n        (unspec:VDQ_BHSI [(match_operand:VDQ_BHSI 1 \"register_operand\" \"w\")\n \t\t\t (match_operand:VDQ_BHSI 2 \"register_operand\" \"w\")]\n@@ -1564,7 +1564,7 @@\n )\n \n ;; Pairwise FP Max/Min operations.\n-(define_insn \"aarch64_<maxmin_uns>p<mode>\"\n+(define_insn \"aarch64_<optab>p<mode>\"\n  [(set (match_operand:VHSDF 0 \"register_operand\" \"=w\")\n        (unspec:VHSDF [(match_operand:VHSDF 1 \"register_operand\" \"w\")\n \t\t      (match_operand:VHSDF 2 \"register_operand\" \"w\")]\n@@ -3488,7 +3488,7 @@\n ;; Vector forms for fmax, fmin, fmaxnm, fminnm.\n ;; fmaxnm and fminnm are used for the fmax<mode>3 standard pattern names,\n ;; which implement the IEEE fmax ()/fmin () functions.\n-(define_insn \"<maxmin_uns><mode>3\"\n+(define_insn \"<fmaxmin><mode>3\"\n   [(set (match_operand:VHSDF 0 \"register_operand\" \"=w\")\n        (unspec:VHSDF [(match_operand:VHSDF 1 \"register_operand\" \"w\")\n \t\t      (match_operand:VHSDF 2 \"register_operand\" \"w\")]\n@@ -3622,38 +3622,38 @@\n \n ;; Template for outputting a scalar, so we can create __builtins which can be\n ;; gimple_fold'd to the IFN_REDUC_(MAX|MIN) function.  (This is FP smax/smin).\n-(define_expand \"reduc_<maxmin_uns>_scal_<mode>\"\n+(define_expand \"reduc_<optab>_scal_<mode>\"\n   [(match_operand:<VEL> 0 \"register_operand\")\n    (unspec:VHSDF [(match_operand:VHSDF 1 \"register_operand\")]\n \t\t  FMAXMINV)]\n   \"TARGET_SIMD\"\n   {\n     rtx elt = aarch64_endian_lane_rtx (<MODE>mode, 0);\n     rtx scratch = gen_reg_rtx (<MODE>mode);\n-    emit_insn (gen_aarch64_reduc_<maxmin_uns>_internal<mode> (scratch,\n-\t\t\t\t\t\t\t      operands[1]));\n+    emit_insn (gen_aarch64_reduc_<optab>_internal<mode> (scratch,\n+\t\t\t\t\t\t\t operands[1]));\n     emit_insn (gen_aarch64_get_lane<mode> (operands[0], scratch, elt));\n     DONE;\n   }\n )\n \n ;; Likewise for integer cases, signed and unsigned.\n-(define_expand \"reduc_<maxmin_uns>_scal_<mode>\"\n+(define_expand \"reduc_<optab>_scal_<mode>\"\n   [(match_operand:<VEL> 0 \"register_operand\")\n    (unspec:VDQ_BHSI [(match_operand:VDQ_BHSI 1 \"register_operand\")]\n \t\t    MAXMINV)]\n   \"TARGET_SIMD\"\n   {\n     rtx elt = aarch64_endian_lane_rtx (<MODE>mode, 0);\n     rtx scratch = gen_reg_rtx (<MODE>mode);\n-    emit_insn (gen_aarch64_reduc_<maxmin_uns>_internal<mode> (scratch,\n-\t\t\t\t\t\t\t      operands[1]));\n+    emit_insn (gen_aarch64_reduc_<optab>_internal<mode> (scratch,\n+\t\t\t\t\t\t\t operands[1]));\n     emit_insn (gen_aarch64_get_lane<mode> (operands[0], scratch, elt));\n     DONE;\n   }\n )\n \n-(define_insn \"aarch64_reduc_<maxmin_uns>_internal<mode>\"\n+(define_insn \"aarch64_reduc_<optab>_internal<mode>\"\n  [(set (match_operand:VDQV_S 0 \"register_operand\" \"=w\")\n        (unspec:VDQV_S [(match_operand:VDQV_S 1 \"register_operand\" \"w\")]\n \t\t    MAXMINV))]\n@@ -3662,7 +3662,7 @@\n   [(set_attr \"type\" \"neon_reduc_minmax<q>\")]\n )\n \n-(define_insn \"aarch64_reduc_<maxmin_uns>_internalv2si\"\n+(define_insn \"aarch64_reduc_<optab>_internalv2si\"\n  [(set (match_operand:V2SI 0 \"register_operand\" \"=w\")\n        (unspec:V2SI [(match_operand:V2SI 1 \"register_operand\" \"w\")]\n \t\t    MAXMINV))]\n@@ -3671,7 +3671,7 @@\n   [(set_attr \"type\" \"neon_reduc_minmax\")]\n )\n \n-(define_insn \"aarch64_reduc_<maxmin_uns>_internal<mode>\"\n+(define_insn \"aarch64_reduc_<optab>_internal<mode>\"\n  [(set (match_operand:VHSDF 0 \"register_operand\" \"=w\")\n        (unspec:VHSDF [(match_operand:VHSDF 1 \"register_operand\" \"w\")]\n \t\t      FMAXMINV))]"}, {"sha": "5de479e141a1cc95ca659ac36b194f62d2630c39", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d331688fcb69e9aae84bb94cb7cc54641a90ab6/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d331688fcb69e9aae84bb94cb7cc54641a90ab6/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=6d331688fcb69e9aae84bb94cb7cc54641a90ab6", "patch": "@@ -6288,7 +6288,7 @@\n \n ;; Unpredicated fmax/fmin (the libm functions).  The optabs for the\n ;; smin/smax rtx codes are handled in the generic section above.\n-(define_expand \"<maxmin_uns><mode>3\"\n+(define_expand \"<fmaxmin><mode>3\"\n   [(set (match_operand:SVE_FULL_F 0 \"register_operand\")\n \t(unspec:SVE_FULL_F\n \t  [(match_dup 3)"}, {"sha": "5297b2d3f95744ac72e36814c6676cc97478d48b", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d331688fcb69e9aae84bb94cb7cc54641a90ab6/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d331688fcb69e9aae84bb94cb7cc54641a90ab6/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=6d331688fcb69e9aae84bb94cb7cc54641a90ab6", "patch": "@@ -6475,7 +6475,7 @@\n ;; Scalar forms for fmax, fmin, fmaxnm, fminnm.\n ;; fmaxnm and fminnm are used for the fmax<mode>3 standard pattern names,\n ;; which implement the IEEE fmax ()/fmin () functions.\n-(define_insn \"<maxmin_uns><mode>3\"\n+(define_insn \"<fmaxmin><mode>3\"\n   [(set (match_operand:GPF_F16 0 \"register_operand\" \"=w\")\n \t(unspec:GPF_F16 [(match_operand:GPF_F16 1 \"register_operand\" \"w\")\n \t\t     (match_operand:GPF_F16 2 \"register_operand\" \"w\")]"}, {"sha": "2e64f079833828b8659a8b1fa5a4c74efc8b1cbe", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d331688fcb69e9aae84bb94cb7cc54641a90ab6/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d331688fcb69e9aae84bb94cb7cc54641a90ab6/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=6d331688fcb69e9aae84bb94cb7cc54641a90ab6", "patch": "@@ -18264,15 +18264,15 @@ __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmax_f32 (float32x2_t __a, float32x2_t __b)\n {\n-  return __builtin_aarch64_smax_nanv2sf (__a, __b);\n+  return __builtin_aarch64_fmax_nanv2sf (__a, __b);\n }\n \n __extension__ extern __inline float64x1_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmax_f64 (float64x1_t __a, float64x1_t __b)\n {\n     return (float64x1_t)\n-      { __builtin_aarch64_smax_nandf (vget_lane_f64 (__a, 0),\n+      { __builtin_aarch64_fmax_nandf (vget_lane_f64 (__a, 0),\n \t\t\t\t      vget_lane_f64 (__b, 0)) };\n }\n \n@@ -18325,14 +18325,14 @@ __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmaxq_f32 (float32x4_t __a, float32x4_t __b)\n {\n-  return __builtin_aarch64_smax_nanv4sf (__a, __b);\n+  return __builtin_aarch64_fmax_nanv4sf (__a, __b);\n }\n \n __extension__ extern __inline float64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmaxq_f64 (float64x2_t __a, float64x2_t __b)\n {\n-  return __builtin_aarch64_smax_nanv2df (__a, __b);\n+  return __builtin_aarch64_fmax_nanv2df (__a, __b);\n }\n \n __extension__ extern __inline int8x16_t\n@@ -19003,15 +19003,15 @@ __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmin_f32 (float32x2_t __a, float32x2_t __b)\n {\n-  return __builtin_aarch64_smin_nanv2sf (__a, __b);\n+  return __builtin_aarch64_fmin_nanv2sf (__a, __b);\n }\n \n __extension__ extern __inline float64x1_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmin_f64 (float64x1_t __a, float64x1_t __b)\n {\n     return (float64x1_t)\n-\t  { __builtin_aarch64_smin_nandf (vget_lane_f64 (__a, 0),\n+\t  { __builtin_aarch64_fmin_nandf (vget_lane_f64 (__a, 0),\n \t\t\t\t\t  vget_lane_f64 (__b, 0)) };\n }\n \n@@ -19064,14 +19064,14 @@ __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vminq_f32 (float32x4_t __a, float32x4_t __b)\n {\n-  return __builtin_aarch64_smin_nanv4sf (__a, __b);\n+  return __builtin_aarch64_fmin_nanv4sf (__a, __b);\n }\n \n __extension__ extern __inline float64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vminq_f64 (float64x2_t __a, float64x2_t __b)\n {\n-  return __builtin_aarch64_smin_nanv2df (__a, __b);\n+  return __builtin_aarch64_fmin_nanv2df (__a, __b);\n }\n \n __extension__ extern __inline int8x16_t\n@@ -29131,14 +29131,14 @@ __extension__ extern __inline float16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmax_f16 (float16x4_t __a, float16x4_t __b)\n {\n-  return __builtin_aarch64_smax_nanv4hf (__a, __b);\n+  return __builtin_aarch64_fmax_nanv4hf (__a, __b);\n }\n \n __extension__ extern __inline float16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmaxq_f16 (float16x8_t __a, float16x8_t __b)\n {\n-  return __builtin_aarch64_smax_nanv8hf (__a, __b);\n+  return __builtin_aarch64_fmax_nanv8hf (__a, __b);\n }\n \n __extension__ extern __inline float16x4_t\n@@ -29159,14 +29159,14 @@ __extension__ extern __inline float16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmin_f16 (float16x4_t __a, float16x4_t __b)\n {\n-  return __builtin_aarch64_smin_nanv4hf (__a, __b);\n+  return __builtin_aarch64_fmin_nanv4hf (__a, __b);\n }\n \n __extension__ extern __inline float16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vminq_f16 (float16x8_t __a, float16x8_t __b)\n {\n-  return __builtin_aarch64_smin_nanv8hf (__a, __b);\n+  return __builtin_aarch64_fmin_nanv8hf (__a, __b);\n }\n \n __extension__ extern __inline float16x4_t"}, {"sha": "e8eebd863a6db6f9ac5ec6d87e9ffbe5449da6f2", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d331688fcb69e9aae84bb94cb7cc54641a90ab6/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d331688fcb69e9aae84bb94cb7cc54641a90ab6/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=6d331688fcb69e9aae84bb94cb7cc54641a90ab6", "patch": "@@ -3189,9 +3189,9 @@\n \t\t\t(UNSPEC_COND_FCVTZS \"fix_trunc\")\n \t\t\t(UNSPEC_COND_FCVTZU \"fixuns_trunc\")\n \t\t\t(UNSPEC_COND_FDIV \"div\")\n-\t\t\t(UNSPEC_COND_FMAX \"smax_nan\")\n+\t\t\t(UNSPEC_COND_FMAX \"fmax_nan\")\n \t\t\t(UNSPEC_COND_FMAXNM \"smax\")\n-\t\t\t(UNSPEC_COND_FMIN \"smin_nan\")\n+\t\t\t(UNSPEC_COND_FMIN \"fmin_nan\")\n \t\t\t(UNSPEC_COND_FMINNM \"smin\")\n \t\t\t(UNSPEC_COND_FMLA \"fma\")\n \t\t\t(UNSPEC_COND_FMLS \"fnma\")\n@@ -3214,22 +3214,12 @@\n \t\t\t(UNSPEC_COND_SCVTF \"float\")\n \t\t\t(UNSPEC_COND_UCVTF \"floatuns\")])\n \n-(define_int_attr  maxmin_uns [(UNSPEC_UMAXV \"umax\")\n-\t\t\t      (UNSPEC_UMINV \"umin\")\n-\t\t\t      (UNSPEC_SMAXV \"smax\")\n-\t\t\t      (UNSPEC_SMINV \"smin\")\n-\t\t\t      (UNSPEC_FMAX  \"smax_nan\")\n-\t\t\t      (UNSPEC_FMAXNMV \"smax\")\n-\t\t\t      (UNSPEC_FMAXV \"smax_nan\")\n-\t\t\t      (UNSPEC_FMIN \"smin_nan\")\n-\t\t\t      (UNSPEC_FMINNMV \"smin\")\n-\t\t\t      (UNSPEC_FMINV \"smin_nan\")\n-\t\t\t      (UNSPEC_FMAXNM \"fmax\")\n-\t\t\t      (UNSPEC_FMINNM \"fmin\")\n-\t\t\t      (UNSPEC_COND_FMAX \"fmax_nan\")\n-\t\t\t      (UNSPEC_COND_FMAXNM \"fmax\")\n-\t\t\t      (UNSPEC_COND_FMIN \"fmin_nan\")\n-\t\t\t      (UNSPEC_COND_FMINNM \"fmin\")])\n+(define_int_attr fmaxmin [(UNSPEC_FMAX \"fmax_nan\")\n+\t\t\t  (UNSPEC_FMAXNM \"fmax\")\n+\t\t\t  (UNSPEC_FMIN \"fmin_nan\")\n+\t\t\t  (UNSPEC_FMINNM \"fmin\")\n+\t\t\t  (UNSPEC_COND_FMAXNM \"fmax\")\n+\t\t\t  (UNSPEC_COND_FMINNM \"fmin\")])\n \n (define_int_attr  maxmin_uns_op [(UNSPEC_UMAXV \"umax\")\n \t\t\t\t (UNSPEC_UMINV \"umin\")"}]}