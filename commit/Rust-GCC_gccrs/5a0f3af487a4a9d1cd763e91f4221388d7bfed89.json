{"sha": "5a0f3af487a4a9d1cd763e91f4221388d7bfed89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEwZjNhZjQ4N2E0YTlkMWNkNzYzZTkxZjQyMjEzODhkN2JmZWQ4OQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2015-09-14T15:25:00Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2015-09-14T15:25:00Z"}, "message": "re PR c++/51911 ([C++11] G++ accepts new auto { list })\n\n/cp\n2015-09-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/51911\n\t* parser.c (cp_parser_new_expression): Enforce 5.3.4/2 (as amended\n\tper the spirit of DR 1467).\n\n/testsuite\n2015-09-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/51911\n\t* g++.dg/cpp0x/new-auto1.C: New.\n\nFrom-SVN: r227753", "tree": {"sha": "69e5aa6ae826f63b0db2ae3e060b5297610042ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69e5aa6ae826f63b0db2ae3e060b5297610042ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a0f3af487a4a9d1cd763e91f4221388d7bfed89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a0f3af487a4a9d1cd763e91f4221388d7bfed89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a0f3af487a4a9d1cd763e91f4221388d7bfed89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a0f3af487a4a9d1cd763e91f4221388d7bfed89/comments", "author": null, "committer": null, "parents": [{"sha": "f6ba5bb293414a4114a8147b3e7fd38169aacccd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6ba5bb293414a4114a8147b3e7fd38169aacccd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6ba5bb293414a4114a8147b3e7fd38169aacccd"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "76e3b912ad03eadbfce3a6cd6b0dd1d348312231", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0f3af487a4a9d1cd763e91f4221388d7bfed89/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0f3af487a4a9d1cd763e91f4221388d7bfed89/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5a0f3af487a4a9d1cd763e91f4221388d7bfed89", "patch": "@@ -1,3 +1,9 @@\n+2015-09-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/51911\n+\t* parser.c (cp_parser_new_expression): Enforce 5.3.4/2 (as amended\n+\tper the spirit of DR 1467).\n+\n 2015-09-11  Mark Wielaard  <mjw@redhat.com>\n \n \tPR c/28901"}, {"sha": "3a68dd791683636a34e814a40761ec01f6917165", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0f3af487a4a9d1cd763e91f4221388d7bfed89/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0f3af487a4a9d1cd763e91f4221388d7bfed89/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5a0f3af487a4a9d1cd763e91f4221388d7bfed89", "patch": "@@ -7591,8 +7591,9 @@ cp_parser_new_expression (cp_parser* parser)\n     type = cp_parser_new_type_id (parser, &nelts);\n \n   /* If the next token is a `(' or '{', then we have a new-initializer.  */\n-  if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN)\n-      || cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n+  cp_token *token = cp_lexer_peek_token (parser->lexer);\n+  if (token->type == CPP_OPEN_PAREN\n+      || token->type == CPP_OPEN_BRACE)\n     initializer = cp_parser_new_initializer (parser);\n   else\n     initializer = NULL;\n@@ -7601,6 +7602,21 @@ cp_parser_new_expression (cp_parser* parser)\n      expression.  */\n   if (cp_parser_non_integral_constant_expression (parser, NIC_NEW))\n     ret = error_mark_node;\n+  /* 5.3.4/2: \"If the auto type-specifier appears in the type-specifier-seq\n+     of a new-type-id or type-id of a new-expression, the new-expression shall\n+     contain a new-initializer of the form ( assignment-expression )\".\n+     Additionally, consistently with the spirit of DR 1467, we want to accept\n+     'new auto { 2 }' too.  */\n+  else if (type_uses_auto (type)\n+\t   && (vec_safe_length (initializer) != 1\n+\t       || (BRACE_ENCLOSED_INITIALIZER_P ((*initializer)[0])\n+\t\t   && CONSTRUCTOR_NELTS ((*initializer)[0]) != 1)))\n+    {\n+      error_at (token->location,\n+\t\t\"initialization of new-expression for type %<auto%> \"\n+\t\t\"requires exactly one element\");\n+      ret = error_mark_node;\n+    }\n   else\n     {\n       /* Create a representation of the new-expression.  */"}, {"sha": "0e0f904475e0e2fb1e0409339d486669e3e60b16", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0f3af487a4a9d1cd763e91f4221388d7bfed89/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0f3af487a4a9d1cd763e91f4221388d7bfed89/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a0f3af487a4a9d1cd763e91f4221388d7bfed89", "patch": "@@ -1,3 +1,8 @@\n+2015-09-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/51911\n+\t* g++.dg/cpp0x/new-auto1.C: New.\n+\n 2015-09-11  Mark Wielaard  <mjw@redhat.com>\n \n \tPR c/28901"}, {"sha": "be09f94dd6998957fc1ef7ca158fc02a86d01ab2", "filename": "gcc/testsuite/g++.dg/cpp0x/new-auto1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0f3af487a4a9d1cd763e91f4221388d7bfed89/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnew-auto1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0f3af487a4a9d1cd763e91f4221388d7bfed89/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnew-auto1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnew-auto1.C?ref=5a0f3af487a4a9d1cd763e91f4221388d7bfed89", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/51911\n+// { dg-do compile { target c++11 } }\n+\n+#include <initializer_list>\n+\n+auto foo1 = new auto { 3, 4, 5 };  // { dg-error \"22:initialization of new-expression for type 'auto'\" }\n+auto bar1 = new auto { 2 };\n+\n+auto foo2 = new auto ( 3, 4, 5 );  // { dg-error \"22:initialization of new-expression for type 'auto'\" }\n+auto bar2 = new auto ( 2 );"}]}