{"sha": "9adab579d59ea50eeb6877df2292d9d5c7b20e3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFkYWI1NzlkNTllYTUwZWViNjg3N2RmMjI5MmQ5ZDVjN2IyMGUzZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-12-16T14:04:46Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-12-16T14:04:46Z"}, "message": "Add VEC_SERIES_EXPR and associated optab\n\nSimilarly to the VEC_DUPLICATE_EXPR, this patch adds a tree code\nequivalent of the VEC_SERIES rtx code: VEC_SERIES_EXPR.\n\n2017-12-16  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* doc/generic.texi (VEC_SERIES_EXPR): Document.\n\t* doc/md.texi (vec_series@var{m}): Document.\n\t* tree.def (VEC_SERIES_EXPR): New tree code.\n\t* tree.h (build_vec_series): Declare.\n\t* tree.c (build_vec_series): New function.\n\t* cfgexpand.c (expand_debug_expr): Handle VEC_SERIES_EXPR.\n\t* tree-pretty-print.c (dump_generic_node): Likewise.\n\t* gimple-pretty-print.c (dump_binary_rhs): Likewise.\n\t* tree-inline.c (estimate_operator_cost): Likewise.\n\t* expr.c (expand_expr_real_2): Likewise.\n\t* optabs-tree.c (optab_for_tree_code): Likewise.\n\t* tree-cfg.c (verify_gimple_assign_binary): Likewise.\n\t* fold-const.c (const_binop): Fold VEC_SERIES_EXPRs of constants.\n\t* expmed.c (make_tree): Handle VEC_SERIES.\n\t* optabs.def (vec_series_optab): New optab.\n\t* optabs.h (expand_vec_series_expr): Declare.\n\t* optabs.c (expand_vec_series_expr): New function.\n\t* tree-vect-generic.c (expand_vector_operations_1): Check that\n\tthe operands also have vector type.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r255741", "tree": {"sha": "57f653f6952ae9f50f71264350c15852415ebe51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57f653f6952ae9f50f71264350c15852415ebe51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9adab579d59ea50eeb6877df2292d9d5c7b20e3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9adab579d59ea50eeb6877df2292d9d5c7b20e3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9adab579d59ea50eeb6877df2292d9d5c7b20e3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/comments", "author": null, "committer": null, "parents": [{"sha": "be4c1d4a42c5c7dc8bffbc5c9e3250f02be0d922", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be4c1d4a42c5c7dc8bffbc5c9e3250f02be0d922", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be4c1d4a42c5c7dc8bffbc5c9e3250f02be0d922"}], "stats": {"total": 150, "additions": 149, "deletions": 1}, "files": [{"sha": "7a9e8ec1eeeeeb969acc3bc1635c0f84e4a9fcf1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9adab579d59ea50eeb6877df2292d9d5c7b20e3e", "patch": "@@ -1,3 +1,27 @@\n+2017-12-16  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* doc/generic.texi (VEC_SERIES_EXPR): Document.\n+\t* doc/md.texi (vec_series@var{m}): Document.\n+\t* tree.def (VEC_SERIES_EXPR): New tree code.\n+\t* tree.h (build_vec_series): Declare.\n+\t* tree.c (build_vec_series): New function.\n+\t* cfgexpand.c (expand_debug_expr): Handle VEC_SERIES_EXPR.\n+\t* tree-pretty-print.c (dump_generic_node): Likewise.\n+\t* gimple-pretty-print.c (dump_binary_rhs): Likewise.\n+\t* tree-inline.c (estimate_operator_cost): Likewise.\n+\t* expr.c (expand_expr_real_2): Likewise.\n+\t* optabs-tree.c (optab_for_tree_code): Likewise.\n+\t* tree-cfg.c (verify_gimple_assign_binary): Likewise.\n+\t* fold-const.c (const_binop): Fold VEC_SERIES_EXPRs of constants.\n+\t* expmed.c (make_tree): Handle VEC_SERIES.\n+\t* optabs.def (vec_series_optab): New optab.\n+\t* optabs.h (expand_vec_series_expr): Declare.\n+\t* optabs.c (expand_vec_series_expr): New function.\n+\t* tree-vect-generic.c (expand_vector_operations_1): Check that\n+\tthe operands also have vector type.\n+\n 2017-12-16  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hawyard@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "a238e8df9a9f664544062cc631288fcf512120ea", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=9adab579d59ea50eeb6877df2292d9d5c7b20e3e", "patch": "@@ -5070,6 +5070,7 @@ expand_debug_expr (tree exp)\n     case VEC_WIDEN_LSHIFT_LO_EXPR:\n     case VEC_PERM_EXPR:\n     case VEC_DUPLICATE_EXPR:\n+    case VEC_SERIES_EXPR:\n       return NULL;\n \n     /* Misc codes.  */"}, {"sha": "29d85316877f113de169633c192f41f92e538f1c", "filename": "gcc/doc/generic.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Fdoc%2Fgeneric.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Fdoc%2Fgeneric.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgeneric.texi?ref=9adab579d59ea50eeb6877df2292d9d5c7b20e3e", "patch": "@@ -1769,6 +1769,7 @@ a value from @code{enum annot_expr_kind}, the third is an @code{INTEGER_CST}.\n @node Vectors\n @subsection Vectors\n @tindex VEC_DUPLICATE_EXPR\n+@tindex VEC_SERIES_EXPR\n @tindex VEC_LSHIFT_EXPR\n @tindex VEC_RSHIFT_EXPR\n @tindex VEC_WIDEN_MULT_HI_EXPR\n@@ -1788,6 +1789,14 @@ a value from @code{enum annot_expr_kind}, the third is an @code{INTEGER_CST}.\n This node has a single operand and represents a vector in which every\n element is equal to that operand.\n \n+@item VEC_SERIES_EXPR\n+This node represents a vector formed from a scalar base and step,\n+given as the first and second operands respectively.  Element @var{i}\n+of the result is equal to @samp{@var{base} + @var{i}*@var{step}}.\n+\n+This node is restricted to integral types, in order to avoid\n+specifying the rounding behavior for floating-point types.\n+\n @item VEC_LSHIFT_EXPR\n @itemx VEC_RSHIFT_EXPR\n These nodes represent whole vector left and right shifts, respectively."}, {"sha": "a131e5972df4456fff949ea881394b782a7b9dad", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=9adab579d59ea50eeb6877df2292d9d5c7b20e3e", "patch": "@@ -4899,6 +4899,19 @@ vectors go through the @code{mov@var{m}} pattern instead.\n \n This pattern is not allowed to @code{FAIL}.\n \n+@cindex @code{vec_series@var{m}} instruction pattern\n+@item @samp{vec_series@var{m}}\n+Initialize vector output operand 0 so that element @var{i} is equal to\n+operand 1 plus @var{i} times operand 2.  In other words, create a linear\n+series whose base value is operand 1 and whose step is operand 2.\n+\n+The vector output has mode @var{m} and the scalar inputs have the mode\n+appropriate for one element of @var{m}.  This pattern is not used for\n+floating-point vectors, in order to avoid having to specify the\n+rounding behavior for @var{i} > 1.\n+\n+This pattern is not allowed to @code{FAIL}.\n+\n @cindex @code{vec_cmp@var{m}@var{n}} instruction pattern\n @item @samp{vec_cmp@var{m}@var{n}}\n Output a vector comparison.  Operand 0 of mode @var{n} is the destination for"}, {"sha": "5884560049224193e45f8017375e41a9a17b3d03", "filename": "gcc/expmed.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=9adab579d59ea50eeb6877df2292d9d5c7b20e3e", "patch": "@@ -5255,6 +5255,13 @@ make_tree (tree type, rtx x)\n \t    tree elt_tree = make_tree (TREE_TYPE (type), XEXP (op, 0));\n \t    return build_vector_from_val (type, elt_tree);\n \t  }\n+\tif (GET_CODE (op) == VEC_SERIES)\n+\t  {\n+\t    tree itype = TREE_TYPE (type);\n+\t    tree base_tree = make_tree (itype, XEXP (op, 0));\n+\t    tree step_tree = make_tree (itype, XEXP (op, 1));\n+\t    return build_vec_series (type, base_tree, step_tree);\n+\t  }\n \treturn make_tree (type, op);\n       }\n "}, {"sha": "0be02757cf8c37740481500de0afa19991fa37b1", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=9adab579d59ea50eeb6877df2292d9d5c7b20e3e", "patch": "@@ -9590,6 +9590,10 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n       gcc_assert (target);\n       return target;\n \n+    case VEC_SERIES_EXPR:\n+      expand_operands (treeop0, treeop1, NULL_RTX, &op0, &op1, modifier);\n+      return expand_vec_series_expr (mode, op0, op1, target);\n+\n     case BIT_INSERT_EXPR:\n       {\n \tunsigned bitpos = tree_to_uhwi (treeop2);"}, {"sha": "2a08010d1455041e9c455efa16520b0c1fbb8f1c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=9adab579d59ea50eeb6877df2292d9d5c7b20e3e", "patch": "@@ -1526,6 +1526,12 @@ const_binop (enum tree_code code, tree type, tree arg1, tree arg2)\n      result as argument put those cases that need it here.  */\n   switch (code)\n     {\n+    case VEC_SERIES_EXPR:\n+      if (CONSTANT_CLASS_P (arg1)\n+\t  && CONSTANT_CLASS_P (arg2))\n+\treturn build_vec_series (type, arg1, arg2);\n+      return NULL_TREE;\n+\n     case COMPLEX_EXPR:\n       if ((TREE_CODE (arg1) == REAL_CST\n \t   && TREE_CODE (arg2) == REAL_CST)"}, {"sha": "2f78a882bf9d5d9cad54beb7b5c856ae129acda4", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=9adab579d59ea50eeb6877df2292d9d5c7b20e3e", "patch": "@@ -431,6 +431,7 @@ dump_binary_rhs (pretty_printer *buffer, gassign *gs, int spc,\n     case VEC_PACK_FIX_TRUNC_EXPR:\n     case VEC_WIDEN_LSHIFT_HI_EXPR:\n     case VEC_WIDEN_LSHIFT_LO_EXPR:\n+    case VEC_SERIES_EXPR:\n       for (p = get_tree_code_name (code); *p; p++)\n \tpp_character (buffer, TOUPPER (*p));\n       pp_string (buffer, \" <\");"}, {"sha": "0cd2d8c9cba236abd228facadf870637b79d4ec2", "filename": "gcc/optabs-tree.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Foptabs-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Foptabs-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs-tree.c?ref=9adab579d59ea50eeb6877df2292d9d5c7b20e3e", "patch": "@@ -202,6 +202,9 @@ optab_for_tree_code (enum tree_code code, const_tree type,\n     case VEC_DUPLICATE_EXPR:\n       return vec_duplicate_optab;\n \n+    case VEC_SERIES_EXPR:\n+      return vec_series_optab;\n+\n     default:\n       break;\n     }"}, {"sha": "3354e40aee47b539dbf4bac76a8f418728dc3767", "filename": "gcc/optabs.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=9adab579d59ea50eeb6877df2292d9d5c7b20e3e", "patch": "@@ -5712,6 +5712,27 @@ expand_vec_cond_expr (tree vec_cond_type, tree op0, tree op1, tree op2,\n   return ops[0].value;\n }\n \n+/* Generate VEC_SERIES_EXPR <OP0, OP1>, returning a value of mode VMODE.\n+   Use TARGET for the result if nonnull and convenient.  */\n+\n+rtx\n+expand_vec_series_expr (machine_mode vmode, rtx op0, rtx op1, rtx target)\n+{\n+  struct expand_operand ops[3];\n+  enum insn_code icode;\n+  machine_mode emode = GET_MODE_INNER (vmode);\n+\n+  icode = direct_optab_handler (vec_series_optab, vmode);\n+  gcc_assert (icode != CODE_FOR_nothing);\n+\n+  create_output_operand (&ops[0], target, vmode);\n+  create_input_operand (&ops[1], op0, emode);\n+  create_input_operand (&ops[2], op1, emode);\n+\n+  expand_insn (icode, 3, ops);\n+  return ops[0].value;\n+}\n+\n /* Generate insns for a vector comparison into a mask.  */\n \n rtx"}, {"sha": "dc587f821f83aaf49b9785f92a8dbfeaf7e04e8c", "filename": "gcc/optabs.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Foptabs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Foptabs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.def?ref=9adab579d59ea50eeb6877df2292d9d5c7b20e3e", "patch": "@@ -366,3 +366,4 @@ OPTAB_D (get_thread_pointer_optab, \"get_thread_pointer$I$a\")\n OPTAB_D (set_thread_pointer_optab, \"set_thread_pointer$I$a\")\n \n OPTAB_DC (vec_duplicate_optab, \"vec_duplicate$a\", VEC_DUPLICATE)\n+OPTAB_DC (vec_series_optab, \"vec_series$a\", VEC_SERIES)"}, {"sha": "4bb8cca98996f27218067e9cd1c2a6115c4534c7", "filename": "gcc/optabs.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=9adab579d59ea50eeb6877df2292d9d5c7b20e3e", "patch": "@@ -316,6 +316,9 @@ extern rtx expand_vec_cmp_expr (tree, tree, rtx);\n /* Generate code for VEC_COND_EXPR.  */\n extern rtx expand_vec_cond_expr (tree, tree, tree, tree, rtx);\n \n+/* Generate code for VEC_SERIES_EXPR.  */\n+extern rtx expand_vec_series_expr (machine_mode, rtx, rtx, rtx);\n+\n /* Generate code for MULT_HIGHPART_EXPR.  */\n extern rtx expand_mult_highpart (machine_mode, rtx, rtx, rtx, bool);\n "}, {"sha": "4bf621895cd67f54521264d722ee107c87c24b45", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=9adab579d59ea50eeb6877df2292d9d5c7b20e3e", "patch": "@@ -4217,6 +4217,23 @@ verify_gimple_assign_binary (gassign *stmt)\n       /* Continue with generic binary expression handling.  */\n       break;\n \n+    case VEC_SERIES_EXPR:\n+      if (!useless_type_conversion_p (rhs1_type, rhs2_type))\n+\t{\n+\t  error (\"type mismatch in series expression\");\n+\t  debug_generic_expr (rhs1_type);\n+\t  debug_generic_expr (rhs2_type);\n+\t  return true;\n+\t}\n+      if (TREE_CODE (lhs_type) != VECTOR_TYPE\n+\t  || !useless_type_conversion_p (TREE_TYPE (lhs_type), rhs1_type))\n+\t{\n+\t  error (\"vector type expected in series expression\");\n+\t  debug_generic_expr (lhs_type);\n+\t  return true;\n+\t}\n+      return false;\n+\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "50d56b4786cdc60526cc24678aa57af987c25442", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=9adab579d59ea50eeb6877df2292d9d5c7b20e3e", "patch": "@@ -3929,6 +3929,7 @@ estimate_operator_cost (enum tree_code code, eni_weights *weights,\n     case VEC_WIDEN_LSHIFT_HI_EXPR:\n     case VEC_WIDEN_LSHIFT_LO_EXPR:\n     case VEC_DUPLICATE_EXPR:\n+    case VEC_SERIES_EXPR:\n \n       return 1;\n "}, {"sha": "681ff944487ba12372e7fdf9100a537a3adf8923", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=9adab579d59ea50eeb6877df2292d9d5c7b20e3e", "patch": "@@ -3162,6 +3162,7 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n       is_expr = false;\n       break;\n \n+    case VEC_SERIES_EXPR:\n     case VEC_WIDEN_MULT_HI_EXPR:\n     case VEC_WIDEN_MULT_LO_EXPR:\n     case VEC_WIDEN_MULT_EVEN_EXPR:"}, {"sha": "c2258142eb4b77074e4c0e20fafe284f56541f96", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=9adab579d59ea50eeb6877df2292d9d5c7b20e3e", "patch": "@@ -1595,7 +1595,8 @@ expand_vector_operations_1 (gimple_stmt_iterator *gsi)\n   if (rhs_class == GIMPLE_BINARY_RHS)\n     rhs2 = gimple_assign_rhs2 (stmt);\n \n-  if (TREE_CODE (type) != VECTOR_TYPE)\n+  if (!VECTOR_TYPE_P (type)\n+      || !VECTOR_TYPE_P (TREE_TYPE (rhs1)))\n     return;\n \n   /* If the vector operation is operating on all same vector elements"}, {"sha": "b43a3fd7ace7301e622c2bb45eea6d8976490dae", "filename": "gcc/tree.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=9adab579d59ea50eeb6877df2292d9d5c7b20e3e", "patch": "@@ -1797,6 +1797,30 @@ build_vector_from_val (tree vectype, tree sc)\n     }\n }\n \n+/* Build a vector series of type TYPE in which element I has the value\n+   BASE + I * STEP.  The result is a constant if BASE and STEP are constant\n+   and a VEC_SERIES_EXPR otherwise.  */\n+\n+tree\n+build_vec_series (tree type, tree base, tree step)\n+{\n+  if (integer_zerop (step))\n+    return build_vector_from_val (type, base);\n+  if (TREE_CODE (base) == INTEGER_CST && TREE_CODE (step) == INTEGER_CST)\n+    {\n+      tree_vector_builder builder (type, 1, 3);\n+      tree elt1 = wide_int_to_tree (TREE_TYPE (base),\n+\t\t\t\t    wi::to_wide (base) + wi::to_wide (step));\n+      tree elt2 = wide_int_to_tree (TREE_TYPE (base),\n+\t\t\t\t    wi::to_wide (elt1) + wi::to_wide (step));\n+      builder.quick_push (base);\n+      builder.quick_push (elt1);\n+      builder.quick_push (elt2);\n+      return builder.build ();\n+    }\n+  return build2 (VEC_SERIES_EXPR, type, base, step);\n+}\n+\n /* Something has messed with the elements of CONSTRUCTOR C after it was built;\n    calculate TREE_CONSTANT and TREE_SIDE_EFFECTS.  */\n "}, {"sha": "48a53b7aa4babafabab18370a368feaa2b531cd3", "filename": "gcc/tree.def", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=9adab579d59ea50eeb6877df2292d9d5c7b20e3e", "patch": "@@ -540,6 +540,16 @@ DEFTREECODE (COND_EXPR, \"cond_expr\", tcc_expression, 3)\n /* Represents a vector in which every element is equal to operand 0.  */\n DEFTREECODE (VEC_DUPLICATE_EXPR, \"vec_duplicate_expr\", tcc_unary, 1)\n \n+/* Vector series created from a start (base) value and a step.\n+\n+   A = VEC_SERIES_EXPR (B, C)\n+\n+   means\n+\n+   for (i = 0; i < N; i++)\n+     A[i] = B + C * i;  */\n+DEFTREECODE (VEC_SERIES_EXPR, \"vec_series_expr\", tcc_binary, 2)\n+\n /* Vector conditional expression. It is like COND_EXPR, but with\n    vector operands.\n "}, {"sha": "ae40e903e4c9fcc74d489aea3df5a23728854a70", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adab579d59ea50eeb6877df2292d9d5c7b20e3e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=9adab579d59ea50eeb6877df2292d9d5c7b20e3e", "patch": "@@ -4052,6 +4052,7 @@ extern tree build_int_cst_type (tree, HOST_WIDE_INT);\n extern tree make_vector (unsigned, unsigned CXX_MEM_STAT_INFO);\n extern tree build_vector_from_ctor (tree, vec<constructor_elt, va_gc> *);\n extern tree build_vector_from_val (tree, tree);\n+extern tree build_vec_series (tree, tree, tree);\n extern void recompute_constructor_flags (tree);\n extern void verify_constructor_flags (tree);\n extern tree build_constructor (tree, vec<constructor_elt, va_gc> *);"}]}