{"sha": "16c16a2476732e37e0220accb906bf6a03f8a6c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZjMTZhMjQ3NjczMmUzN2UwMjIwYWNjYjkwNmJmNmEwM2Y4YTZjMA==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2007-07-15T17:19:13Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2007-07-15T17:19:13Z"}, "message": "re PR middle-end/32398 (checking for suffix of object files... configure: error: cannot compute suffix of f object files: cannot compile)\n\n\tPR middle-end/32398\n\tPR middle-end/32769\n\t* pa-protos.h (pa_eh_return_handler_rtx): Declare.\n\t* pa.c (pa_extra_live_on_entry, rp_saved): Declare.\n\t(TARGET_EXTRA_LIVE_ON_ENTRY): Define.\n\t(pa_output_function_prologue): Use rp_saved and current_function_is_leaf\n\tto generate .CALLINFO statement.\n\t(hppa_expand_prologue): Set rp_saved.\n\t(hppa_expand_epilogue): Use rp_saved.\n\t(pa_extra_live_on_entry, pa_eh_return_handler_rtx): New functions.\n\t* pa.h (EH_RETURN_HANDLER_RTX): Use pa_eh_return_handler_rtx.\n\nFrom-SVN: r126657", "tree": {"sha": "7cb378656885837824b2d81682d15dfd7bfbd9bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cb378656885837824b2d81682d15dfd7bfbd9bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16c16a2476732e37e0220accb906bf6a03f8a6c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c16a2476732e37e0220accb906bf6a03f8a6c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16c16a2476732e37e0220accb906bf6a03f8a6c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c16a2476732e37e0220accb906bf6a03f8a6c0/comments", "author": null, "committer": null, "parents": [{"sha": "b220e3f9c9fb24054b9647abb173b6f0fb8df5b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b220e3f9c9fb24054b9647abb173b6f0fb8df5b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b220e3f9c9fb24054b9647abb173b6f0fb8df5b4"}], "stats": {"total": 73, "additions": 63, "deletions": 10}, "files": [{"sha": "7ca3bbf8607df66504fb79a020e1eb06ddd1cb08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c16a2476732e37e0220accb906bf6a03f8a6c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c16a2476732e37e0220accb906bf6a03f8a6c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16c16a2476732e37e0220accb906bf6a03f8a6c0", "patch": "@@ -1,3 +1,17 @@\n+2007-07-15  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR middle-end/32398\n+\tPR middle-end/32769\n+\t* pa-protos.h (pa_eh_return_handler_rtx): Declare.\n+\t* pa.c (pa_extra_live_on_entry, rp_saved): Declare.\n+\t(TARGET_EXTRA_LIVE_ON_ENTRY): Define.\n+\t(pa_output_function_prologue): Use rp_saved and current_function_is_leaf\n+\tto generate .CALLINFO statement.\n+\t(hppa_expand_prologue): Set rp_saved.\n+\t(hppa_expand_epilogue): Use rp_saved.\n+\t(pa_extra_live_on_entry, pa_eh_return_handler_rtx): New functions.\n+\t* pa.h (EH_RETURN_HANDLER_RTX): Use pa_eh_return_handler_rtx.\n+\n 2007-07-14  Dirk Mueller  <dmueller@suse.de>\n \n \t* omega.c (coalesce): Fix memory leak on early exit."}, {"sha": "111a4c08cfb30e22a98827c3cf6e3a11c812ff69", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c16a2476732e37e0220accb906bf6a03f8a6c0/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c16a2476732e37e0220accb906bf6a03f8a6c0/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=16c16a2476732e37e0220accb906bf6a03f8a6c0", "patch": "@@ -23,6 +23,7 @@ Boston, MA 02110-1301, USA.  */\n /* Prototype function used in various macros.  */\n extern int symbolic_operand (rtx, enum machine_mode);\n extern int tls_symbolic_operand (rtx);\n+extern rtx pa_eh_return_handler_rtx (void);\n \n /* Used in insn-*.c.  */\n extern int following_call (rtx);"}, {"sha": "63437b7a00ec83db6506f6411b05336cb5ef37ad", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 47, "deletions": 6, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c16a2476732e37e0220accb906bf6a03f8a6c0/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c16a2476732e37e0220accb906bf6a03f8a6c0/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=16c16a2476732e37e0220accb906bf6a03f8a6c0", "patch": "@@ -156,7 +156,7 @@ static struct machine_function * pa_init_machine_status (void);\n static enum reg_class pa_secondary_reload (bool, rtx, enum reg_class,\n \t\t\t\t\t   enum machine_mode,\n \t\t\t\t\t   secondary_reload_info *);\n-\n+static void pa_extra_live_on_entry (bitmap);\n \n /* The following extra sections are only used for SOM.  */\n static GTY(()) section *som_readonly_data_section;\n@@ -178,6 +178,10 @@ int flag_pa_unix = TARGET_HPUX_11_11 ? 1998 : TARGET_HPUX_10_10 ? 1995 : 1993;\n    registers which were saved by the current function's prologue.  */\n static int gr_saved, fr_saved;\n \n+/* Boolean indicating whether the return pointer was saved by the\n+   current function's prologue.  */\n+static bool rp_saved;\n+\n static rtx find_addr_reg (rtx);\n \n /* Keep track of the number of bytes we have output in the CODE subspace\n@@ -313,6 +317,9 @@ static size_t n_deferred_plabels = 0;\n #undef TARGET_SECONDARY_RELOAD\n #define TARGET_SECONDARY_RELOAD pa_secondary_reload\n \n+#undef TARGET_EXTRA_LIVE_ON_ENTRY\n+#define TARGET_EXTRA_LIVE_ON_ENTRY pa_extra_live_on_entry\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Parse the -mfixed-range= option string.  */\n@@ -3563,10 +3570,12 @@ pa_output_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n      to output the assembler directives which denote the start\n      of a function.  */\n   fprintf (file, \"\\t.CALLINFO FRAME=\" HOST_WIDE_INT_PRINT_DEC, actual_fsize);\n-  if (df_regs_ever_live_p (2))\n-    fputs (\",CALLS,SAVE_RP\", file);\n-  else\n+  if (current_function_is_leaf)\n     fputs (\",NO_CALLS\", file);\n+  else\n+    fputs (\",CALLS\", file);\n+  if (rp_saved)\n+    fputs (\",SAVE_RP\", file);\n \n   /* The SAVE_SP flag is used to indicate that register %r3 is stored\n      at the beginning of the frame and that it is used as the frame\n@@ -3628,7 +3637,12 @@ hppa_expand_prologue (void)\n      always be stored into the caller's frame at sp - 20 or sp - 16\n      depending on which ABI is in use.  */\n   if (df_regs_ever_live_p (2) || current_function_calls_eh_return)\n-    store_reg (2, TARGET_64BIT ? -16 : -20, STACK_POINTER_REGNUM);\n+    {\n+      store_reg (2, TARGET_64BIT ? -16 : -20, STACK_POINTER_REGNUM);\n+      rp_saved = true;\n+    }\n+  else\n+    rp_saved = false;\n \n   /* Allocate the local frame and set up the frame pointer if needed.  */\n   if (actual_fsize != 0)\n@@ -4030,7 +4044,7 @@ hppa_expand_epilogue (void)\n   /* Try to restore RP early to avoid load/use interlocks when\n      RP gets used in the return (bv) instruction.  This appears to still\n      be necessary even when we schedule the prologue and epilogue.  */\n-  if (df_regs_ever_live_p (2) || current_function_calls_eh_return)\n+  if (rp_saved)\n     {\n       ret_off = TARGET_64BIT ? -16 : -20;\n       if (frame_pointer_needed)\n@@ -5734,6 +5748,33 @@ pa_secondary_reload (bool in_p, rtx x, enum reg_class class,\n   return NO_REGS;\n }\n \n+/* Implement TARGET_EXTRA_LIVE_ON_ENTRY.  The argument pointer\n+   is only marked as live on entry by df-scan when it is a fixed\n+   register.  It isn't a fixed register in the 64-bit runtime,\n+   so we need to mark it here.  */\n+\n+static void\n+pa_extra_live_on_entry (bitmap regs)\n+{\n+  if (TARGET_64BIT)\n+    bitmap_set_bit (regs, ARG_POINTER_REGNUM);\n+}\n+\n+/* Implement EH_RETURN_HANDLER_RTX.  The MEM needs to be volatile\n+   to prevent it from being deleted.  */\n+\n+rtx\n+pa_eh_return_handler_rtx (void)\n+{\n+  rtx tmp;\n+\n+  tmp = gen_rtx_PLUS (word_mode, frame_pointer_rtx,\n+\t\t      TARGET_64BIT ? GEN_INT (-16) : GEN_INT (-20));\n+  tmp = gen_rtx_MEM (word_mode, tmp);\n+  tmp->volatil = 1;\n+  return tmp;\n+}\n+\n /* In the 32-bit runtime, arguments larger than eight bytes are passed\n    by invisible reference.  As a GCC extension, we also pass anything\n    with a zero or variable size by reference."}, {"sha": "1ae199afacf331b7084e46d92699d08a0574f9ce", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c16a2476732e37e0220accb906bf6a03f8a6c0/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c16a2476732e37e0220accb906bf6a03f8a6c0/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=16c16a2476732e37e0220accb906bf6a03f8a6c0", "patch": "@@ -410,10 +410,7 @@ extern struct rtx_def *hppa_pic_save_rtx (void);\n #define EH_RETURN_DATA_REGNO(N)\t\\\n   ((N) < 3 ? (N) + 20 : (N) == 3 ? 31 : INVALID_REGNUM)\n #define EH_RETURN_STACKADJ_RTX\tgen_rtx_REG (Pmode, 29)\n-#define EH_RETURN_HANDLER_RTX \\\n-  gen_rtx_MEM (word_mode,\t\t\t\t\t\t\\\n-\t       gen_rtx_PLUS (word_mode, frame_pointer_rtx,\t\t\\\n-\t\t\t     TARGET_64BIT ? GEN_INT (-16) : GEN_INT (-20)))\n+#define EH_RETURN_HANDLER_RTX pa_eh_return_handler_rtx ()\n \n /* Offset from the frame pointer register value to the top of stack.  */\n #define FRAME_POINTER_CFA_OFFSET(FNDECL) 0"}]}