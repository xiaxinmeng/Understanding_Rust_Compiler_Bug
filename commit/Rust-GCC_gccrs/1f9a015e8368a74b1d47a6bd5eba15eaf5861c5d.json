{"sha": "1f9a015e8368a74b1d47a6bd5eba15eaf5861c5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY5YTAxNWU4MzY4YTc0YjFkNDdhNmJkNWViYTE1ZWFmNTg2MWM1ZA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-08-20T23:11:19Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-08-20T23:11:19Z"}, "message": "rtl.c (rtx_class, [...]): Constify.\n\n\t* rtl.c (rtx_class, note_insn_name, reg_note_name): Constify.\n\n\t* rtl.h (rtx_class, reg_note_name, note_insn_name): Likewise.\n\n\t* genopinit.c (gen_insn): Use accessor macro, not `rtx_class'.\n\nFrom-SVN: r28785", "tree": {"sha": "12bd99171720a7b9d5c2e07a292d53b6c85c1516", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12bd99171720a7b9d5c2e07a292d53b6c85c1516"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f9a015e8368a74b1d47a6bd5eba15eaf5861c5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f9a015e8368a74b1d47a6bd5eba15eaf5861c5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f9a015e8368a74b1d47a6bd5eba15eaf5861c5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f9a015e8368a74b1d47a6bd5eba15eaf5861c5d/comments", "author": null, "committer": null, "parents": [{"sha": "6f7d635c0efc87ff17945764258d9055ac7c8de3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f7d635c0efc87ff17945764258d9055ac7c8de3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f7d635c0efc87ff17945764258d9055ac7c8de3"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "d4abc1e85b749583bf5402732e56af891a4c9fab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9a015e8368a74b1d47a6bd5eba15eaf5861c5d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9a015e8368a74b1d47a6bd5eba15eaf5861c5d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f9a015e8368a74b1d47a6bd5eba15eaf5861c5d", "patch": "@@ -1,3 +1,11 @@\n+Fri Aug 20 19:07:55 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* rtl.c (rtx_class, note_insn_name, reg_note_name): Constify.\n+\n+\t* rtl.h (rtx_class, reg_note_name, note_insn_name): Likewise.\n+\n+\t* genopinit.c (gen_insn): Use accessor macro, not `rtx_class'.\n+\n Fri Aug 20 18:53:43 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* rtl.h (rtx_format): Constify a char*."}, {"sha": "31eecd2af8a334b6cf9552b187877cf8012a137a", "filename": "gcc/genopinit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9a015e8368a74b1d47a6bd5eba15eaf5861c5d/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9a015e8368a74b1d47a6bd5eba15eaf5861c5d/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=1f9a015e8368a74b1d47a6bd5eba15eaf5861c5d", "patch": "@@ -183,7 +183,7 @@ gen_insn (insn)\n \t\t    /* We have to be concerned about matching \"gt\" and\n \t\t       missing \"gtu\", e.g., so verify we have reached the\n \t\t       end of thing we are to match.  */\n-\t\t    if (*p == 0 && *q == 0 && rtx_class[op] == '<')\n+\t\t    if (*p == 0 && *q == 0 && GET_RTX_CLASS(op) == '<')\n \t\t      break;\n \t\t  }\n "}, {"sha": "bf997509f7823314d4cd1605f741f89298405a23", "filename": "gcc/rtl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9a015e8368a74b1d47a6bd5eba15eaf5861c5d/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9a015e8368a74b1d47a6bd5eba15eaf5861c5d/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=1f9a015e8368a74b1d47a6bd5eba15eaf5861c5d", "patch": "@@ -167,15 +167,15 @@ const char *rtx_format[] = {\n /* Indexed by rtx code, gives a character representing the \"class\" of\n    that rtx code.  See rtl.def for documentation on the defined classes.  */\n \n-char rtx_class[] = {\n+const char rtx_class[] = {\n #define DEF_RTL_EXPR(ENUM, NAME, FORMAT, CLASS)   CLASS, \n #include \"rtl.def\"\t\t/* rtl expressions are defined here */\n #undef DEF_RTL_EXPR\n };\n \n /* Names for kinds of NOTEs and REG_NOTEs.  */\n \n-char *note_insn_name[] = { 0                    , \"NOTE_INSN_DELETED\",\n+const char * const note_insn_name[] = { 0       , \"NOTE_INSN_DELETED\",\n \t\t\t   \"NOTE_INSN_BLOCK_BEG\", \"NOTE_INSN_BLOCK_END\",\n \t\t\t   \"NOTE_INSN_LOOP_BEG\", \"NOTE_INSN_LOOP_END\",\n \t\t\t   \"NOTE_INSN_FUNCTION_END\", \"NOTE_INSN_SETJMP\",\n@@ -187,7 +187,7 @@ char *note_insn_name[] = { 0                    , \"NOTE_INSN_DELETED\",\n \t\t\t   \"NOTE_INSN_RANGE_END\", \"NOTE_INSN_LIVE\",\n \t\t\t   \"NOTE_INSN_BASIC_BLOCK\" };\n \n-char *reg_note_name[] = { \"\", \"REG_DEAD\", \"REG_INC\", \"REG_EQUIV\", \"REG_WAS_0\",\n+const char * const reg_note_name[] = { \"\", \"REG_DEAD\", \"REG_INC\", \"REG_EQUIV\", \"REG_WAS_0\",\n \t\t\t  \"REG_EQUAL\", \"REG_RETVAL\", \"REG_LIBCALL\",\n \t\t\t  \"REG_NONNEG\", \"REG_NO_CONFLICT\", \"REG_UNUSED\",\n \t\t\t  \"REG_CC_SETTER\", \"REG_CC_USER\", \"REG_LABEL\","}, {"sha": "381e66d74d339cb76c59dfd7f24fd835f6bfb95e", "filename": "gcc/rtl.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9a015e8368a74b1d47a6bd5eba15eaf5861c5d/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9a015e8368a74b1d47a6bd5eba15eaf5861c5d/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=1f9a015e8368a74b1d47a6bd5eba15eaf5861c5d", "patch": "@@ -57,7 +57,7 @@ extern const char * const rtx_name[];\n extern const char *rtx_format[];\n #define GET_RTX_FORMAT(CODE)\t\t(rtx_format[(int) (CODE)])\n \n-extern char rtx_class[];\n+extern const char rtx_class[];\n #define GET_RTX_CLASS(CODE)\t\t(rtx_class[(int) (CODE)])\n \f\n /* The flags and bitfields of an ADDR_DIFF_VEC.  BASE is the base label\n@@ -378,7 +378,7 @@ enum reg_note { REG_DEAD = 1, REG_INC = 2, REG_EQUIV = 3, REG_WAS_0 = 4,\n \n /* Names for REG_NOTE's in EXPR_LIST insn's.  */\n \n-extern char *reg_note_name[];\n+extern const char * const reg_note_name[];\n #define GET_REG_NOTE_NAME(MODE) (reg_note_name[(int) (MODE)])\n \n /* This field is only present on CALL_INSNs.  It holds a chain of EXPR_LIST of\n@@ -479,7 +479,7 @@ extern char *reg_note_name[];\n \n /* Names for NOTE insn's other than line numbers.  */\n \n-extern char *note_insn_name[];\n+extern const char * const note_insn_name[];\n #define GET_NOTE_INSN_NAME(NOTE_CODE) (note_insn_name[-(NOTE_CODE)])\n \n /* The name of a label, in case it corresponds to an explicit label"}]}