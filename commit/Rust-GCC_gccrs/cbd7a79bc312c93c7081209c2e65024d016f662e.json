{"sha": "cbd7a79bc312c93c7081209c2e65024d016f662e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JkN2E3OWJjMzEyYzkzYzcwODEyMDljMmU2NTAyNGQwMTZmNjYyZQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "mckinlay@redhat.com", "date": "2004-07-15T22:14:45Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2004-07-15T22:14:45Z"}, "message": "re PR libgcj/16574 (java.sql.Timestamp#toString() does not deal with fractional seconds correctly)\n\n2004-07-15  Bryce McKinlay  <mckinlay@redhat.com>\n\n\tPR libgcj/16574\n\t* java/sql/Timestamp.java (dateFormat): Renamed from sdf.\n\t(decimalFormat): New static variable.\n\t(sbuf): Likewise.\n\t(getTime): New. Override Date.getTime().\n\t(toString): Synchronize. Use decimalFormat to format nanos value\n\tcorrectly. Truncate extra zeros.\n\t(before): Compare getNanos() only if getTime() is equal.\n\t(after): Likewise.\n\nFrom-SVN: r84784", "tree": {"sha": "e8016dfc420b4b3ca5e5ace062e88d794c5d3c8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8016dfc420b4b3ca5e5ace062e88d794c5d3c8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbd7a79bc312c93c7081209c2e65024d016f662e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbd7a79bc312c93c7081209c2e65024d016f662e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbd7a79bc312c93c7081209c2e65024d016f662e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbd7a79bc312c93c7081209c2e65024d016f662e/comments", "author": null, "committer": null, "parents": [{"sha": "e4f78bd4af1ac824139f05da29ef6c6c4366aa0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4f78bd4af1ac824139f05da29ef6c6c4366aa0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4f78bd4af1ac824139f05da29ef6c6c4366aa0b"}], "stats": {"total": 61, "additions": 46, "deletions": 15}, "files": [{"sha": "d6d635804ec8c6eeceade016c0de281be00367a6", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbd7a79bc312c93c7081209c2e65024d016f662e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbd7a79bc312c93c7081209c2e65024d016f662e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=cbd7a79bc312c93c7081209c2e65024d016f662e", "patch": "@@ -1,3 +1,15 @@\n+2004-07-15  Bryce McKinlay  <mckinlay@redhat.com>\n+\n+\tPR libgcj/16574\n+\t* java/sql/Timestamp.java (dateFormat): Renamed from sdf.\n+\t(decimalFormat): New static variable.\n+\t(sbuf): Likewise.\n+\t(getTime): New. Override Date.getTime().\n+\t(toString): Synchronize. Use decimalFormat to format nanos value\n+\tcorrectly. Truncate extra zeros.\n+\t(before): Compare getNanos() only if getTime() is equal.\n+\t(after): Likewise.\n+\t\n 2004-07-14  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* acinclude.m4: \"Inline\" LIBGCJ_CONFIGURE macro into..."}, {"sha": "e480fff6be88238a5f498e2ee657fe14289d3873", "filename": "libjava/java/sql/Timestamp.java", "status": "modified", "additions": 34, "deletions": 15, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbd7a79bc312c93c7081209c2e65024d016f662e/libjava%2Fjava%2Fsql%2FTimestamp.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbd7a79bc312c93c7081209c2e65024d016f662e/libjava%2Fjava%2Fsql%2FTimestamp.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FTimestamp.java?ref=cbd7a79bc312c93c7081209c2e65024d016f662e", "patch": "@@ -39,6 +39,7 @@\n package java.sql;\n \n import java.text.ParseException;\n+import java.text.DecimalFormat;\n import java.text.SimpleDateFormat;\n \n /**\n@@ -58,8 +59,10 @@ public class Timestamp extends java.util.Date\n   /**\n    * Used for parsing and formatting this date.\n    */\n-  private static SimpleDateFormat sdf =\n+  private static SimpleDateFormat dateFormat =\n     new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n+  private static DecimalFormat decimalFormat = new DecimalFormat(\"000000000\");\n+  private static StringBuffer sbuf = new StringBuffer(29);\n \n   /**\n     * The nanosecond value for this object\n@@ -96,7 +99,7 @@ public static Timestamp valueOf(String str)\n \n     try\n       {\n-\tjava.util.Date d = (java.util.Date)sdf.parseObject(str);\n+\tjava.util.Date d = (java.util.Date) dateFormat.parseObject(str);\n \n \tif (d == null)\n \t  throw new IllegalArgumentException(str);\n@@ -133,14 +136,24 @@ public Timestamp(int year, int month, int day, int hour, int minute,\n \n   /**\n    * This method initializes a new instance of this class with the\n-   * specified time value representing the number of seconds since \n+   * specified time value representing the number of milliseconds since \n    * Jan 1, 1970 at 12:00 midnight GMT.\n    *\n    * @param time The time value to intialize this <code>Time</code> to.\n    */\n   public Timestamp(long date)\n   {\n-    super(date);\n+    super(date - (date % 1000));\n+    nanos = (int) (date % 1000) * 1000000;\n+  }\n+\n+  /**\n+   * Return the value of this Timestamp as the number of milliseconds \n+   * since Jan 1, 1970 at 12:00 midnight GMT.\n+   */\n+  public long getTime()\n+  {\n+    return super.getTime() + (nanos / 1000000);\n   }\n \n   /**\n@@ -150,7 +163,17 @@ public Timestamp(long date)\n    */\n   public String toString()\n   {\n-    return sdf.format(this) + \".\" + getNanos();\n+    synchronized (dateFormat)\n+      {\n+        sbuf.setLength(0);\n+\tdateFormat.format(this, sbuf, null);\n+\tsbuf.append('.');\n+\tdecimalFormat.format(nanos, sbuf, null);\n+\tint end = sbuf.length() - 1;\n+\twhile (end > 20 && sbuf.charAt(end) == '0')\n+\t  end--;\n+\treturn sbuf.substring(0, end + 1);\n+      }\n   }\n \n   /**\n@@ -182,12 +205,10 @@ public void setNanos(int nanos)\n    */\n   public boolean before(Timestamp ts)\n   {\n-    if (ts.getTime() > getTime())\n+    long time1 = getTime();\n+    long time2 = ts.getTime();\n+    if (time1 < time2 || (time1 == time2 && getNanos() < ts.getNanos()))\n       return true;\n-\n-    if (ts.getNanos() > getNanos())\n-      return true;\n-\n     return false;\n   }\n \n@@ -202,12 +223,10 @@ public boolean before(Timestamp ts)\n    */\n   public boolean after(Timestamp ts)\n   {\n-    if (ts.getTime() < getTime())\n+    long time1 = getTime();\n+    long time2 = ts.getTime();\n+    if (time1 > time2 || (time1 == time2 && getNanos() > ts.getNanos()))\n       return true;\n-\n-    if (ts.getNanos() < getNanos())\n-      return true;\n-\n     return false;\n   }\n "}]}