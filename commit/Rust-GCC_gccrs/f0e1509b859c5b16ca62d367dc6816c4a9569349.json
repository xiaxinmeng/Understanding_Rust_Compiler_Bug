{"sha": "f0e1509b859c5b16ca62d367dc6816c4a9569349", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBlMTUwOWI4NTljNWIxNmNhNjJkMzY3ZGM2ODE2YzRhOTU2OTM0OQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2014-11-24T10:43:55Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2014-11-24T10:43:55Z"}, "message": "[PATCH 2/2] ipa-inline uses sreal for as fibonacci_heap template\n\n\t* ipa-inline.c (edge_badness): long is replaced by sreal\n\tas fibonacci_heap template type.\n\t(update_edge_key): Likewise.\n\t(inline_small_functions): Likewise.\n\nFrom-SVN: r218009", "tree": {"sha": "7d3012f304f5666964296d5fcaa42837ba6a3001", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d3012f304f5666964296d5fcaa42837ba6a3001"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0e1509b859c5b16ca62d367dc6816c4a9569349", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0e1509b859c5b16ca62d367dc6816c4a9569349", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0e1509b859c5b16ca62d367dc6816c4a9569349", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0e1509b859c5b16ca62d367dc6816c4a9569349/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fd27ffab14e3b7c131cc2e454edcd11c9cc53c2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd27ffab14e3b7c131cc2e454edcd11c9cc53c2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd27ffab14e3b7c131cc2e454edcd11c9cc53c2e"}], "stats": {"total": 56, "additions": 32, "deletions": 24}, "files": [{"sha": "b3ee3da8af81a2e55c358f751012b8b4eaec5c62", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e1509b859c5b16ca62d367dc6816c4a9569349/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e1509b859c5b16ca62d367dc6816c4a9569349/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f0e1509b859c5b16ca62d367dc6816c4a9569349", "patch": "@@ -1,3 +1,10 @@\n+2014-11-24  Martin Liska  <mliska@suse.cz>\n+\n+\t* ipa-inline.c (edge_badness): long is replaced by sreal\n+\tas fibonacci_heap template type.\n+\t(update_edge_key): Likewise.\n+\t(inline_small_functions): Likewise.\n+\n 2014-11-24  Martin Liska  <mliska@suse.cz>\n \n \t* predict.c (propagate_freq): More elegant sreal API is used."}, {"sha": "26335ec4b182b326b5eefb10f581585515d35e96", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e1509b859c5b16ca62d367dc6816c4a9569349/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e1509b859c5b16ca62d367dc6816c4a9569349/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=f0e1509b859c5b16ca62d367dc6816c4a9569349", "patch": "@@ -139,8 +139,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"builtins.h\"\n #include \"fibonacci_heap.h\"\n \n-typedef fibonacci_heap <long, cgraph_edge> edge_heap_t;\n-typedef fibonacci_node <long, cgraph_edge> edge_heap_node_t;\n+typedef fibonacci_heap <sreal, cgraph_edge> edge_heap_t;\n+typedef fibonacci_node <sreal, cgraph_edge> edge_heap_node_t;\n \n /* Statistics we collect about inlining algorithm.  */\n static int overall_size;\n@@ -903,10 +903,10 @@ relative_time_benefit (struct inline_summary *callee_info,\n    metrics may accurately depend on values such as number of inlinable callers\n    of the function or function body size.  */\n \n-static int\n+static sreal\n edge_badness (struct cgraph_edge *edge, bool dump)\n {\n-  gcov_type badness;\n+  sreal badness;\n   int growth, edge_time;\n   struct cgraph_node *callee = edge->callee->ultimate_alias_target ();\n   struct inline_summary *callee_info = inline_summary (callee);\n@@ -943,7 +943,7 @@ edge_badness (struct cgraph_edge *edge, bool dump)\n     {\n       badness = INT_MIN / 2 + growth;\n       if (dump)\n-\tfprintf (dump_file, \"      %i: Growth %i <= 0\\n\", (int) badness,\n+\tfprintf (dump_file, \"      %\"PRId64\": Growth %d <= 0\\n\", badness.to_int (),\n \t\t growth);\n     }\n \n@@ -985,9 +985,9 @@ edge_badness (struct cgraph_edge *edge, bool dump)\n       if (dump)\n \t{\n \t  fprintf (dump_file,\n-\t\t   \"      %i (relative %f): profile info. Relative count %f%s\"\n+\t\t   \"      %\"PRId64\" (relative %f): profile info. Relative count %f%s\"\n \t\t   \" * Relative benefit %f\\n\",\n-\t\t   (int) badness, (double) badness / INT_MIN,\n+\t\t   badness.to_int (), (double) badness.to_int () / INT_MIN,\n \t\t   (double) edge_count / max_count,\n \t\t   edge->count > max_count ? \" (capped to max_count)\" : \"\",\n \t\t   relbenefit * 100.0 / RELATIVE_TIME_BENEFIT_RANGE);\n@@ -1030,10 +1030,10 @@ edge_badness (struct cgraph_edge *edge, bool dump)\n       if (dump)\n \t{\n \t  fprintf (dump_file,\n-\t\t   \"      %i: guessed profile. frequency %f,\"\n+\t\t   \"      %\"PRId64\": guessed profile. frequency %f,\"\n \t\t   \" benefit %f%%, time w/o inlining %i, time w inlining %i\"\n \t\t   \" overall growth %i (current) %i (original)\\n\",\n-\t\t   (int) badness, (double)edge->frequency / CGRAPH_FREQ_BASE,\n+\t\t   badness.to_int (), (double)edge->frequency / CGRAPH_FREQ_BASE,\n \t\t   relative_time_benefit (callee_info, edge, edge_time) * 100.0\n \t\t   / RELATIVE_TIME_BENEFIT_RANGE, \n \t\t   (int)compute_uninlined_call_time (callee_info, edge),\n@@ -1053,13 +1053,13 @@ edge_badness (struct cgraph_edge *edge, bool dump)\n \n       /* Decrease badness if call is nested.  */\n       if (badness > 0)\n-\tbadness >>= nest;\n+\tbadness = badness >> nest;\n       else\n \t{\n-\t  badness <<= nest;\n+\t  badness = badness << nest;\n \t}\n       if (dump)\n-\tfprintf (dump_file, \"      %i: no profile. nest %i\\n\", (int) badness,\n+\tfprintf (dump_file, \"      %\"PRId64\": no profile. nest %i\\n\", badness.to_int (),\n \t\t nest);\n     }\n \n@@ -1077,7 +1077,7 @@ edge_badness (struct cgraph_edge *edge, bool dump)\n static inline void\n update_edge_key (edge_heap_t *heap, struct cgraph_edge *edge)\n {\n-  int badness = edge_badness (edge, false);\n+  sreal badness = edge_badness (edge, false);\n   if (edge->aux)\n     {\n       edge_heap_node_t *n = (edge_heap_node_t *) edge->aux;\n@@ -1092,13 +1092,14 @@ update_edge_key (edge_heap_t *heap, struct cgraph_edge *edge)\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file,\n-\t\t       \"  decreasing badness %s/%i -> %s/%i, %i to %i\\n\",\n+\t\t       \"  decreasing badness %s/%i -> %s/%i, %\"PRId64\n+\t\t       \" to %\"PRId64\"\\n\",\n \t\t       xstrdup (edge->caller->name ()),\n \t\t       edge->caller->order,\n \t\t       xstrdup (edge->callee->name ()),\n \t\t       edge->callee->order,\n-\t\t       (int)n->get_key (),\n-\t\t       badness);\n+\t\t       n->get_key ().to_int (),\n+\t\t       badness.to_int ());\n \t    }\n \t  heap->decrease_key (n, badness);\n \t  gcc_checking_assert (n->get_key () == badness);\n@@ -1109,12 +1110,12 @@ update_edge_key (edge_heap_t *heap, struct cgraph_edge *edge)\n        if (dump_file && (dump_flags & TDF_DETAILS))\n \t {\n \t   fprintf (dump_file,\n-\t\t    \"  enqueuing call %s/%i -> %s/%i, badness %i\\n\",\n+\t\t    \"  enqueuing call %s/%i -> %s/%i, badness %\"PRId64\"\\n\",\n \t\t    xstrdup (edge->caller->name ()),\n \t\t    edge->caller->order,\n \t\t    xstrdup (edge->callee->name ()),\n \t\t    edge->callee->order,\n-\t\t    badness);\n+\t\t    badness.to_int ());\n \t }\n       edge->aux = heap->insert (badness, edge);\n     }\n@@ -1564,7 +1565,7 @@ inline_small_functions (void)\n {\n   struct cgraph_node *node;\n   struct cgraph_edge *edge;\n-  edge_heap_t edge_heap (LONG_MIN);\n+  edge_heap_t edge_heap (sreal::min ());\n   bitmap updated_nodes = BITMAP_ALLOC (NULL);\n   int min_size, max_size;\n   auto_vec<cgraph_edge *> new_indirect_edges;\n@@ -1682,9 +1683,9 @@ inline_small_functions (void)\n     {\n       int old_size = overall_size;\n       struct cgraph_node *where, *callee;\n-      int badness = edge_heap.min_key ();\n-      int current_badness;\n-      int cached_badness;\n+      sreal badness = edge_heap.min_key ();\n+      sreal current_badness;\n+      sreal cached_badness;\n       int growth;\n \n       edge = edge_heap.extract_min ();\n@@ -1728,13 +1729,13 @@ inline_small_functions (void)\n \t\t   inline_summary (callee)->size);\n \t  fprintf (dump_file,\n \t\t   \" to be inlined into %s/%i in %s:%i\\n\"\n-\t\t   \" Estimated badness is %i, frequency %.2f.\\n\",\n+\t\t   \" Estimated badness is %\"PRId64\", frequency %.2f.\\n\",\n \t\t   edge->caller->name (), edge->caller->order,\n \t\t   flag_wpa ? \"unknown\"\n \t\t   : gimple_filename ((const_gimple) edge->call_stmt),\n \t\t   flag_wpa ? -1\n \t\t   : gimple_lineno ((const_gimple) edge->call_stmt),\n-\t\t   badness,\n+\t\t   badness.to_int (),\n \t\t   edge->frequency / (double)CGRAPH_FREQ_BASE);\n \t  if (edge->count)\n \t    fprintf (dump_file,\" Called %\"PRId64\"x\\n\","}]}