{"sha": "6349cf36d8bb7fb83f67a7bc27fc67dca73b19dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM0OWNmMzZkOGJiN2ZiODNmNjdhN2JjMjdmYzY3ZGNhNzNiMTlkZA==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2020-03-30T14:20:33Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-15T08:04:24Z"}, "message": "[Ada] Clean up error handling of 'Image\n\n2020-06-15  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* sem_attr.adb (Check_Image_Type): New procedure for checking\n\tthe type, depending on language version. Disable the Ada 2020\n\tsupport until the corresponding expander work is done.\n\t(Analyze_Image_Attribute): Call Check_Image_Type.  Rearrange the\n\tcode to be simplier and more logical.  When P_Type is modified,\n\tmodify P_Base_Type accordingly.\n\t* sem_util.adb (Is_Object_Image): Do not return False if the\n\tprefix is a type. X'Image should be considered an image of an\n\tobject iff X is an object (albeit illegal pre-2020 if\n\tnonscalar).", "tree": {"sha": "0812c36df6e46c61907a17b1bc377b3a79245b19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0812c36df6e46c61907a17b1bc377b3a79245b19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6349cf36d8bb7fb83f67a7bc27fc67dca73b19dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6349cf36d8bb7fb83f67a7bc27fc67dca73b19dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6349cf36d8bb7fb83f67a7bc27fc67dca73b19dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6349cf36d8bb7fb83f67a7bc27fc67dca73b19dd/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfdb362c000c1502ca4757bb7e5ce5cb42a6a5ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfdb362c000c1502ca4757bb7e5ce5cb42a6a5ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfdb362c000c1502ca4757bb7e5ce5cb42a6a5ae"}], "stats": {"total": 76, "additions": 39, "deletions": 37}, "files": [{"sha": "801c4457ed600de3f31e909260d7a4c888b470bb", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 39, "deletions": 30, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6349cf36d8bb7fb83f67a7bc27fc67dca73b19dd/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6349cf36d8bb7fb83f67a7bc27fc67dca73b19dd/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=6349cf36d8bb7fb83f67a7bc27fc67dca73b19dd", "patch": "@@ -1414,56 +1414,65 @@ package body Sem_Attr is\n       -----------------------------\n \n       procedure Analyze_Image_Attribute (Str_Typ : Entity_Id) is\n+         procedure Check_Image_Type (Image_Type : Entity_Id);\n+         --  Check that Image_Type is legal as the type of a prefix of 'Image.\n+         --  Legality depends on the Ada language version.\n+\n+         procedure Check_Image_Type (Image_Type : Entity_Id) is\n+         begin\n+            if False -- ???Disable 2020 feature until expander work is done\n+              and then Ada_Version >= Ada_2020\n+            then\n+               null; -- all types are OK\n+            elsif not Is_Scalar_Type (Image_Type) then\n+               if Ada_Version >= Ada_2012 then\n+                  Error_Attr_P\n+                    (\"prefix of % attribute must be a scalar type or a scalar \"\n+                       & \"object name\");\n+               else\n+                  Error_Attr_P (\"prefix of % attribute must be a scalar type\");\n+               end if;\n+            end if;\n+         end Check_Image_Type;\n+\n+      --  Start of processing for Analyze_Image_Attribute\n+\n       begin\n          --  AI12-0124: The ARG has adopted the GNAT semantics of 'Img for\n          --  scalar types, so that the prefix can be an object, a named value,\n          --  or a type. If the prefix is an object, there is no argument.\n \n-         if Attr_Id = Attribute_Img\n-           or else (Ada_Version >= Ada_2012 and then Is_Object_Image (P))\n-         then\n+         if Is_Object_Image (P) then\n             Check_E0;\n             Set_Etype (N, Str_Typ);\n+            Check_Image_Type (Etype (P));\n \n-            if Attr_Id = Attribute_Img and then not Is_Object_Image (P) then\n-               Error_Attr_P\n-                 (\"prefix of % attribute must be a scalar object name\");\n+            if Attr_Id /= Attribute_Img and then Ada_Version < Ada_2012 then\n+               Error_Attr_P (\"prefix of % attribute must be a scalar type\");\n             end if;\n          else\n             Check_E1;\n             Set_Etype (N, Str_Typ);\n \n-            --  Check that the prefix type is scalar - much in the same way as\n-            --  Check_Scalar_Type but with custom error messages to denote the\n-            --  variants of 'Image attributes.\n+            --  ???It's not clear why 'Img should behave any differently than\n+            --  'Image.\n \n-            if Is_Entity_Name (P)\n-              and then Is_Type (Entity (P))\n-              and then Ekind (Entity (P)) = E_Incomplete_Type\n+            if Attr_Id = Attribute_Img then\n+               Error_Attr_P\n+                 (\"prefix of % attribute must be a scalar object name\");\n+            end if;\n+\n+            pragma Assert (Is_Entity_Name (P) and then Is_Type (Entity (P)));\n+\n+            if Ekind (Entity (P)) = E_Incomplete_Type\n               and then Present (Full_View (Entity (P)))\n             then\n                P_Type := Full_View (Entity (P));\n+               P_Base_Type := Base_Type (P_Type);\n                Set_Entity (P, P_Type);\n             end if;\n \n-            if not Is_Entity_Name (P)\n-              or else not Is_Type (Entity (P))\n-              or else not Is_Scalar_Type (P_Type)\n-            then\n-               if Ada_Version >= Ada_2012 then\n-                  Error_Attr_P\n-                    (\"prefix of % attribute must be a scalar type or a scalar \"\n-                     & \"object name\");\n-               else\n-                  Error_Attr_P (\"prefix of % attribute must be a scalar type\");\n-               end if;\n-\n-            elsif Is_Protected_Self_Reference (P) then\n-               Error_Attr_P\n-                 (\"prefix of % attribute denotes current instance \"\n-                  & \"(RM 9.4(21/2))\");\n-            end if;\n-\n+            Check_Image_Type (P_Type);\n             Resolve (E1, P_Base_Type);\n             Validate_Non_Static_Attribute_Function_Call;\n          end if;"}, {"sha": "a1bf0ae5b2da8a053478f1ee6189139ae7e0ad62", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6349cf36d8bb7fb83f67a7bc27fc67dca73b19dd/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6349cf36d8bb7fb83f67a7bc27fc67dca73b19dd/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=6349cf36d8bb7fb83f67a7bc27fc67dca73b19dd", "patch": "@@ -16797,13 +16797,6 @@ package body Sem_Util is\n \n    function Is_Object_Image (Prefix : Node_Id) return Boolean is\n    begin\n-      --  When the type of the prefix is not scalar, then the prefix is not\n-      --  valid in any scenario.\n-\n-      if not Is_Scalar_Type (Etype (Prefix)) then\n-         return False;\n-      end if;\n-\n       --  Here we test for the case that the prefix is not a type and assume\n       --  if it is not then it must be a named value or an object reference.\n       --  This is because the parser always checks that prefixes of attributes"}]}