{"sha": "f7be254940067ec65e5cc091d30507deab4d89e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdiZTI1NDk0MDA2N2VjNjVlNWNjMDkxZDMwNTA3ZGVhYjRkODllMA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-09-09T20:26:42Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-09-09T20:26:42Z"}, "message": "configopts.html: Change grouping.\n\n\n2002-09-09  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* docs/html/configopts.html: Change grouping. Note ABI impacts.\n\tUpdate information for locale model defaults.\n\t* docs/html/install.html: Update include directory\n\tinformation.\n\tUpdate testing information.\n\tUpdate linux issues for named locales.\n\t* docs/html/abi.txt: Fix typos.\n\tAdd more info.\n\n\t* src/misc-inst.cc: Add missing instantiations.\n\n\t* testsuite/abi_check.cc: Make output results more verbose.\n\n\t* config/os/gnu-linux/ctype_base.h: Remove shadow headers injections.\n\nFrom-SVN: r56979", "tree": {"sha": "75f50b5987cffbe7d4f4f16e442363a48f0925ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75f50b5987cffbe7d4f4f16e442363a48f0925ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7be254940067ec65e5cc091d30507deab4d89e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7be254940067ec65e5cc091d30507deab4d89e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7be254940067ec65e5cc091d30507deab4d89e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7be254940067ec65e5cc091d30507deab4d89e0/comments", "author": null, "committer": null, "parents": [{"sha": "e2a6476ec74eae88cd7db02f1ec240b11cd99c59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2a6476ec74eae88cd7db02f1ec240b11cd99c59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2a6476ec74eae88cd7db02f1ec240b11cd99c59"}], "stats": {"total": 397, "additions": 258, "deletions": 139}, "files": [{"sha": "787792ad612c6f35784f67e7fc6437962f066630", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7be254940067ec65e5cc091d30507deab4d89e0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7be254940067ec65e5cc091d30507deab4d89e0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f7be254940067ec65e5cc091d30507deab4d89e0", "patch": "@@ -1,3 +1,20 @@\n+2002-09-09  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* docs/html/configopts.html: Change grouping. Note ABI impacts.\n+\tUpdate information for locale model defaults.\n+\t* docs/html/install.html: Update include directory\n+\tinformation. \n+\tUpdate testing information. \n+\tUpdate linux issues for named locales.\n+\t* docs/html/abi.txt: Fix typos.\n+\tAdd more info.\n+\n+\t* src/misc-inst.cc: Add missing instantiations.\n+\t\n+\t* testsuite/abi_check.cc: Make output results more verbose.\n+\t\n+\t* config/os/gnu-linux/ctype_base.h: Remove shadow headers injections.\n+\n 2002-09-07  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/locale/generic/messages_members.cc: Add specialization for"}, {"sha": "a431f971c9ba4d9175b9d6ca0b45cbbd9fdd0e42", "filename": "libstdc++-v3/config/os/gnu-linux/ctype_base.h", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7be254940067ec65e5cc091d30507deab4d89e0/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7be254940067ec65e5cc091d30507deab4d89e0/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_base.h?ref=f7be254940067ec65e5cc091d30507deab4d89e0", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,20 +33,6 @@\n   \n // Information as gleaned from /usr/include/ctype.h\n   \n-#if _GLIBCPP_USE_SHADOW_HEADERS\n-  using _C_legacy::_ISspace;\n-  using _C_legacy::_ISprint;\n-  using _C_legacy::_IScntrl;\n-  using _C_legacy::_ISupper;\n-  using _C_legacy::_ISlower;\n-  using _C_legacy::_ISalpha;\n-  using _C_legacy::_ISdigit;\n-  using _C_legacy::_ISpunct;\n-  using _C_legacy::_ISxdigit;\n-  using _C_legacy::_ISalnum;\n-  using _C_legacy::_ISgraph;\n-#endif\n-\n   struct ctype_base\n   {\n     // Non-standard typedefs."}, {"sha": "770c3cf59740b9732f8ae04fa8e5caf3177adf42", "filename": "libstdc++-v3/docs/html/abi.txt", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7be254940067ec65e5cc091d30507deab4d89e0/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fabi.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7be254940067ec65e5cc091d30507deab4d89e0/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fabi.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fabi.txt?ref=f7be254940067ec65e5cc091d30507deab4d89e0", "patch": "@@ -195,9 +195,17 @@ I. What is an ABI? What's covered? What's not?\n   gcc-3.1.x tools, will meet the requirements above.\n \n - What configure options impact symbol versioning?\n-  There is only one: --enable-symvers. For more information see:\n+\n+  It turns out that most of the configure options that change default\n+  behavior will impact the mangled names of exported symbols, and thus\n+  impact versioning and compatibility.\n+\n+  For more information on configure options, including ABI impacts, see:\n   http://gcc.gnu.org/onlinedocs/libstdc++/configopts.html\n \n+  There is one flag that explicitly deals with symbol versioning:\n+  --enable-symvers. \n+\n   In particular, libstdc++-v3/acinclude.m4 has a macro called\n   GLIBCPP_ENABLE_SYMVERS that defaults to yes (or the argument passed\n   in via --enable-symvers=foo). At that point, the macro attempts to\n@@ -281,22 +289,28 @@ III. Versioning\n \n IV. Testing ABI changes\n \n-Currently, there are formal tests for changes in the libstdc++ ABI,\n-and in addition informal testing procedures. Work to develop these\n-tests is ongoing.\n+Testing for GNU C++ ABI changes is composed of two distinct areas:\n+testing the C++ compiler (g++) for compiler changes, and testing the\n+C++ library (libstdc++) for library changes.\n \n-There is a formal method for checking the compiler parts of the C++\n-ABI, donated by Intel. More information can be obtained\n+Testing the C++ compiler ABI can be done various ways.\n+\n+One. \n+Intel ABI checker. More information can be obtained\n <a href=\"http://developer.intel.com/software/products/opensource/\">here.</a>\n \n-Also, it seems as if some members of the open source community are\n-working on C++ ABI testers for the compiler. It is yet unspecified if\n-these tools will be freely available, and able to be included in a GNU\n-project. Please contact Mark Mitchell (mark@codesoucery.com) for more\n-details, and current status.\n+Two.\n+The second is yet unreleased, but has been announced on the gcc\n+mailing list. It is yet unspecified if these tools will be freely\n+available, and able to be included in a GNU project. Please contact\n+Mark Mitchell (mark@codesourcery.com) for more details, and current\n+status.\n \n+Three.\n+Involves using the vlad.consistency test framework. This has also been\n+discussed on the gcc mailing lists.\n \n-To test the library, there are two methods:\n+Testing the C++ library ABI can also be done various ways.\n \n One. \n (Brendan Kehoe, Jeff Law suggestion to run 'make check-c++' two ways, \n@@ -310,11 +324,12 @@ Two.\n Use the 'make check-abi' rule in the libstdc++-v3 Makefile. \n \n This is a proactive check the library ABI. Currently, exported symbol\n-names are checked against a last known good baseline. Currently, this\n-baseline is keyed off of 3.2.0 binaries, as this was the last time the\n-.so number was incremented. In addition, all exported names are\n-demangled, and the exported objects are checked to make sure they are\n-the same size as the same object in the baseline.\n+names that are either weak or defined are checked against a last known\n+good baseline. Currently, this baseline is keyed off of 3.2.0\n+binaries, as this was the last time the .so number was incremented. In\n+addition, all exported names are demangled, and the exported objects\n+are checked to make sure they are the same size as the same object in\n+the baseline.\n \n In the future, more tests should be added. In particular, vtable\n information, offsets of data members in class objects, and other\n@@ -329,7 +344,8 @@ Another approach might be to use the -fdump-class-hierarchy flag to\n get information.\n (See g++/7470 on how this was used to find bugs.)\n \n-Perhaps there are other Library ABI checkers. If so, please notify us.\n+Perhaps there are other C++ ABI checkers. If so, please notify\n+us. We'd like to know about them!\n \n \n V. Issues not directly addressed, and possible suggestions\n@@ -340,7 +356,7 @@ V. Issues not directly addressed, and possible suggestions\n \n   --enable-version-specific-runtime-libs\n \n-  - Alexandre Olva proposal to have extended name attributes, modify ld\n+  - Alexandre Oliva proposal to have extended name attributes, modify ld\n  \n   - directory-level versioning\n "}, {"sha": "47eb4637fbe97fadbc57dc5619296a57f4db37d6", "filename": "libstdc++-v3/docs/html/configopts.html", "status": "modified", "additions": 79, "deletions": 68, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7be254940067ec65e5cc091d30507deab4d89e0/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7be254940067ec65e5cc091d30507deab4d89e0/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html?ref=f7be254940067ec65e5cc091d30507deab4d89e0", "patch": "@@ -45,6 +45,37 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n      </p>\n  </dd>\n \n+ <dt><code>--enable-sjlj-exceptions  </code></dt>\n+ <dd><p>Forces old, set-jump/long-jump exception handling model.  If\n+        at all possible, the new, frame unwinding exception handling routines\n+        should be used instead, as they significantly reduce both\n+        runtime memory usage and executable size. This option can\n+        change the library ABI.\n+     </p>\n+ </dd>\n+\n+ <dt><code>--enable-version-specific-runtime-libs  </code></dt>\n+ <dd><p>Specify that run-time libraries should be installed in the\n+        compiler-specific subdirectory (i.e.,\n+        <code>${libdir}/gcc-lib/${target_alias}/${gcc_version}</code>)\n+        instead of <code>${libdir}</code>.  This option is useful if you\n+        intend to use several versions of gcc in parallel.  In addition,\n+        libstdc++'s include files will be installed in\n+        <code>${libdir}/gcc-lib/${target_alias}/${gcc_version}/include/g++</code>,\n+        unless you also specify\n+       <code>--with-gxx-include-dir=<em>dirname</em></code> during configuration.\n+     </p>\n+ </dd>\n+\n+ <dt><code>--with-gxx-include-dir=&lt;include-files dir&gt;</code></dt>\n+ <dd><p>Adds support for named libstdc++ include directory.  For instance,\n+        the following puts all the libstdc++ headers into a directory\n+        called &quot;2.97-20001008&quot; instead of the usual\n+        &quot;g++-v3&quot;.\n+     </p>\n+        <pre>\n+   --with-gxx-include-dir=/foo/H-x86-gcc-3-c-gxx-inc/include/2.97-20001008</pre> </dd>\n+\n  <dt><code>--enable-debug  </code></dt>\n  <dd><p>The configure script will automatically detect the highest\n         level of optimization that the compiler in use can use.\n@@ -59,11 +90,11 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n \n  <dt><code>--enable-cstdio  </code></dt>\n  <dd><p>This is an abbreviated form of <code>'--enable-cstdio=stdio'</code>\n-        (described next).\n+        (described next). This option can change the library ABI.\n      </p>\n  </dd>\n \n- <dt><code>--enable-cstdio=LIB  </code></dt>\n+ <dt><code>--enable-cstdio=OPTION  </code></dt>\n  <dd><p>Select a target-specific I/O package.  As of libstdc++-v3\n         snapshot 3.0.96, the choices are 'libio' to specify the GNU\n         I/O package (from\n@@ -74,59 +105,29 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n      </p>\n  </dd>\n \n- <dt><code>--enable-sjlj-exceptions  </code></dt>\n- <dd><p>Forces old, set-jump/long-jump exception handling model.  If\n-        at all possible, the new, frame unwinding exception handling routines\n-        should be used instead, as they significantly reduce both runtime\n-        memory usage and executable size.\n-     </p>\n- </dd>\n-\n  <dt><code>--enable-clocale  </code></dt>\n  <dd><p>This is an abbreviated form of <code>'--enable-clocale=generic'</code>\n-        (described next).\n+        (described next). This option can change the library ABI.\n      </p>\n  </dd>\n \n- <dt><code>--enable-clocale=MODEL  </code></dt>\n+ <dt><code>--enable-clocale=OPTION  </code></dt>\n  <dd><p>Select a target-specific underlying locale package.  The\n         choices are 'ieee_1003.1-2001' to specify an X/Open, Standard Unix\n         (IEEE Std. 1003.1-2001) model based on langinfo/iconv/catgets,\n         'gnu' to specify a model based on functionality from the GNU C\n         library (langinfo/iconv/gettext) (from <a\n         href=\"http://sources.redhat.com/glibc/\">glibc</a>, the GNU C\n         library), or 'generic' to use a generic &quot;C&quot;\n-        abstraction which consists of &quot;C&quot; locale info.  The\n-        default is 'generic'.\n+        abstraction which consists of &quot;C&quot; locale info.\n      </p>\n- </dd>\n \n- <dt><code>--enable-c99  </code></dt>\n- <dd><p>The &quot;long long&quot; type was introduced in C99, along\n-        with many other functions for wide characters, and math\n-        classification macros, etc.  If enabled, all C99 functions not\n-        specified by the C++ standard will be put into <code>namespace\n-        __gnu_cxx</code>, and then all these names will\n-        be injected into namespace std, so that C99 functions can be\n-        used &quot;as if&quot; they were in the C++ standard (as they\n-        will eventually be in some future revision of the standard,\n-        without a doubt).  By default, C99 support is on, assuming the\n-        configure probes find all the necessary functions and bits\n-        necessary.\n-    </p>\n- </dd>\n-\n- <dt><code>--enable-long-long  </code></dt>\n- <dd><p>The &quot;long long&quot; type was introduced in C99.  It is\n-        provided as a GNU extension to C++98 in g++.  This flag builds\n-        support for &quot;long long&quot; into the library (specialized\n-        templates and the like for iostreams).  This option is on by default:\n-        if enabled, users will have to either use the new-style &quot;C&quot;\n-        headers by default (i.e., &lt;cmath&gt; not &lt;math.h&gt;)\n-        or add appropriate compile-time flags to all compile lines to\n-        allow &quot;C&quot; visibility of this feature (on GNU/Linux,\n-        the flag is -D_ISOC99_SOURCE, which is added automatically via\n-        CPLUSPLUS_CPP_SPEC's addition of _GNU_SOURCE).\n+     <p>As part of the configuration process, the \"C\" library is\n+      probed both for sufficient vintage, and installed locale\n+      data. If either of these elements are not present, the C++\n+      locale model default to 'generic.' On glibc-based systems of\n+      version 2.2.5 and above with installed locale files, 'gnu' is\n+      automatically selected.\n      </p>\n  </dd>\n \n@@ -140,43 +141,22 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n \n  <dt><code>--enable-threads  </code></dt>\n  <dd><p>This is an abbreviated form of <code>'--enable-threads=yes'</code>\n-        (described next).\n+        (described next). This option can change the library ABI.\n      </p>\n  </dd>\n \n- <dt><code>--enable-threads=LIB  </code></dt>\n+ <dt><code>--enable-threads=OPTION  </code></dt>\n  <dd><p>Select a threading library.  A full description is given in the\n         general <a href=\"http://gcc.gnu.org/install/configure.html\">compiler\n         configuration instructions</a>.\n      </p>\n  </dd>\n \n- <dt><code>--enable-version-specific-runtime-libs  </code></dt>\n- <dd><p>Specify that run-time libraries should be installed in the\n-        compiler-specific subdirectory (i.e.,\n-        <code>${libdir}/gcc-lib/${target_alias}/${gcc_version}</code>)\n-        instead of <code>${libdir}</code>.  This option is useful if you\n-        intend to use several versions of gcc in parallel.  In addition,\n-        libstdc++'s include files will be installed in\n-        <code>${libdir}/gcc-lib/${target_alias}/${gcc_version}/include/g++</code>,\n-        unless you also specify\n-       <code>--with-gxx-include-dir=<em>dirname</em></code> during configuration.\n-     </p>\n- </dd>\n-\n- <dt><code>--with-gxx-include-dir=&lt;include-files dir&gt;</code></dt>\n- <dd><p>Adds support for named libstdc++ include directory.  For instance,\n-        the following puts all the libstdc++ headers into a directory\n-        called &quot;2.97-20001008&quot; instead of the usual\n-        &quot;g++-v3&quot;.\n-     </p>\n-        <pre>\n-   --with-gxx-include-dir=/foo/H-x86-gcc-3-c-gxx-inc/include/2.97-20001008</pre> </dd>\n-\n  <dt><code>--enable-cxx-flags=FLAGS</code></dt>\n  <dd><p>With this option, you can pass a string of -f (functionality)\n-        flags to the compiler to use when building libstdc++.  FLAGS\n-        is a quoted string of options, like\n+        flags to the compiler to use when building libstdc++. This\n+        option can change the library ABI. FLAGS is a quoted string of\n+        options, like\n      </p>\n         <pre>\n   --enable-cxx-flags='-fvtable-gc -fomit-frame-pointer -ansi'</pre>\n@@ -202,13 +182,44 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n      </p>\n  </dd>\n \n+ <dt><code>--enable-c99  </code></dt>\n+ <dd><p>The &quot;long long&quot; type was introduced in C99, along\n+        with many other functions for wide characters, and math\n+        classification macros, etc.  If enabled, all C99 functions not\n+        specified by the C++ standard will be put into <code>namespace\n+        __gnu_cxx</code>, and then all these names will\n+        be injected into namespace std, so that C99 functions can be\n+        used &quot;as if&quot; they were in the C++ standard (as they\n+        will eventually be in some future revision of the standard,\n+        without a doubt).  By default, C99 support is on, assuming the\n+        configure probes find all the necessary functions and bits\n+        necessary. This option can change the library ABI.\n+    </p>\n+ </dd>\n+\n  <dt><code>--enable-c-mbchar  </code>[default]</dt>\n  <dd><p>Certain template specializations are required for wide\n         character conversion support.  This is tricky and currently\n         changing rapidly, and can cause problems on new platforms.\n         Disabling wide character specializations is useful for initial\n         porting steps, but builds only a subset of what is required by\n-        ISO.  By default, this option is on.\n+        ISO.  By default, this option is on.  This option can change\n+        the library ABI.\n+     </p>\n+ </dd>\n+\n+ <dt><code>--enable-long-long  </code></dt>\n+ <dd><p>The &quot;long long&quot; type was introduced in C99.  It is\n+        provided as a GNU extension to C++98 in g++.  This flag builds\n+        support for &quot;long long&quot; into the library (specialized\n+        templates and the like for iostreams).  This option is on by default:\n+        if enabled, users will have to either use the new-style &quot;C&quot;\n+        headers by default (i.e., &lt;cmath&gt; not &lt;math.h&gt;)\n+        or add appropriate compile-time flags to all compile lines to\n+        allow &quot;C&quot; visibility of this feature (on GNU/Linux,\n+        the flag is -D_ISOC99_SOURCE, which is added automatically via\n+        CPLUSPLUS_CPP_SPEC's addition of _GNU_SOURCE).\n+        This option can change the library ABI. \n      </p>\n  </dd>\n "}, {"sha": "20e2a0a366bd48a4a92f80d3d8d83e99d4ddd900", "filename": "libstdc++-v3/docs/html/install.html", "status": "modified", "additions": 39, "deletions": 13, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7be254940067ec65e5cc091d30507deab4d89e0/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7be254940067ec65e5cc091d30507deab4d89e0/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Finstall.html?ref=f7be254940067ec65e5cc091d30507deab4d89e0", "patch": "@@ -92,18 +92,28 @@ <h2><a name=\"prereqs\">Tools you will need beforehand</a></h2>\n    <dl>\n       <dt> linux </dt>\n \n-      <dd>If you are using gcc 3.1 or later on linux, and are using\n-      the gnu locale model (enabled by default for sufficient\n-      versions of glibc), the following locales are used and tested\n-      in the libstdc++ testsuites: en_HK, en_US, fr_FR, fr_FR@euro,\n-      de_DE, de_DE@euro, ja_JP.eucjp, and it_IT. Failure to have the\n-      underlying \"C\" library locale information installed will mean\n-      that C++ named locales for the above regions will not work:\n-      because of this, the libstdc++ testsuite will not pass the\n-      named locale tests. If this isn't an issue, don't worry about\n-      it. If named locales are needed, the underlying locale\n-      information must be installed. Note that rebuilding libstdc++\n-      after locales are installed is not necessary.\n+      <dd>If gcc 3.1.0 or later on is being used on linux, an attempt\n+      will be made to use \"C\" library functionality necessary for C++\n+      named locale support. \n+\n+      <p>\n+      The configure option --enable-clocale can be used force a\n+      particular behavior.\n+      </p>\n+\n+      <p>\n+      If the 'gnu' locale model is being used, the following locales\n+      are used and tested in the libstdc++ testsuites: en_HK, en_US,\n+      fr_FR, fr_FR@euro, de_DE, de_DE@euro, ja_JP.eucjp, and\n+      it_IT. Failure to have the underlying \"C\" library locale\n+      information installed will mean that C++ named locales for the\n+      above regions will not work: because of this, the libstdc++\n+      testsuite will not pass the named locale tests. If this isn't an\n+      issue, don't worry about it. If named locales are needed, the\n+      underlying locale information must be installed. Note that\n+      rebuilding libstdc++ after the \"C\" locales are installed is not\n+      necessary.\n+      </p>\n \n       <p> To install\n       support for locales, do only one of the following: </p>\n@@ -250,7 +260,7 @@ <h2><a name=\"postinstall\">Post-installation</a></h2>\n    </p>\n    <pre>\n    lib/\n-   include/g++-v3/\n+   include/c++/<em>gcc-version</em>\n       backward/\n       bits/\n       <em>cpu-vendor-os</em>/bits/\n@@ -272,6 +282,22 @@ <h2><a name=\"postinstall\">Post-installation</a></h2>\n       <a href=\"faq/index.html#2_4\">FAQ 2.4</a> for which files to examine.\n    </p>\n \n+   <p> In addition, there are some testing options that are mostly of\n+   interest to library maintainers and system integrators. As such,\n+   these tests may not work on all cpu and host combinations. These\n+   options include, but are not necessarily limited to, the following:\n+\n+   <p>The library ABI can be tested using</p>\n+   <pre>\n+   make check-abi</pre>\n+\n+   <p>The library can also be tested using a bash script, instead of\n+   the default dejagnu test harness</p>\n+   <pre>\n+   make check-script</pre>\n+   or\n+   <pre>\n+   make check-script-install</pre>\n \n <hr />\n <h2><a name=\"usage\">Using the library</a></h2>"}, {"sha": "ff899102009bc3ca3d85198d60c35b7d58420db7", "filename": "libstdc++-v3/src/misc-inst.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7be254940067ec65e5cc091d30507deab4d89e0/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7be254940067ec65e5cc091d30507deab4d89e0/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc?ref=f7be254940067ec65e5cc091d30507deab4d89e0", "patch": "@@ -67,4 +67,19 @@ namespace std\n     basic_istream<wchar_t>& \n     getline(basic_istream<wchar_t>&, wstring&);\n #endif\n+\n+#if 1\n+  // XXX\n+  // 2002-05-24 These are no longer needed and should eventually be deleted.\n+  template \n+    string* \n+    __uninitialized_fill_n_aux<string*, size_t, string>\n+    (string*, size_t, string const &, __false_type);\n+\n+  template \n+    string* \n+    __uninitialized_copy_aux<vector<string>::const_iterator, string *>\n+    (vector<string>::const_iterator, vector<string>::const_iterator, \n+     string*, __false_type);\n+#endif\n } // namespace std"}, {"sha": "fd030063d0c001ee2e82979f5b406c1b4221bb78", "filename": "libstdc++-v3/testsuite/abi_check.cc", "status": "modified", "additions": 72, "deletions": 24, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7be254940067ec65e5cc091d30507deab4d89e0/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7be254940067ec65e5cc091d30507deab4d89e0/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc?ref=f7be254940067ec65e5cc091d30507deab4d89e0", "patch": "@@ -56,24 +56,54 @@ struct symbol_info\n };\n \n bool \n-operator==(const symbol_info& lhs, const symbol_info& rhs)\n+check_compatible(const symbol_info& lhs, const symbol_info& rhs, \n+\t\t bool verbose = false)\n {\n+  using namespace std;\n   bool ret = true;\n+  const char tab = '\\t';\n \n   // Check to see if symbol_infos are compatible.\n-  ret &= lhs.type == rhs.type;\n-  ret &= lhs.name == rhs.name;\n-  ret &= lhs.size == rhs.size;\n+  if (lhs.type != rhs.type)\n+    {\n+      ret = false;\n+      if (verbose)\n+\t{\n+\t  cout << tab << \"incompatible types\" << endl;\n+\t}\n+    }\n+  \n+  if (lhs.name != rhs.name)\n+    {\n+      ret = false;\n+      if (verbose)\n+\t{\n+\t  cout << tab << \"incompatible names\" << endl;\n+\t}\n+    }\n+\n+  if (lhs.size != rhs.size)\n+    {\n+      ret = false;\n+      if (verbose)\n+\t{\n+\t  cout << tab << \"incompatible sizes\" << endl;\n+\t}\n+    }\n \n   // Expect something more sophisticated eventually.\n-  ret &= lhs.version == rhs.version;\n+  if (lhs.version != rhs.version)\n+    {\n+      ret = false;\n+      if (verbose)\n+\t{\n+\t  cout << tab << \"incompatible versions\" << endl;\n+\t}\n+    }\n+\n   return ret;\n }\n \n-bool \n-operator!=(const symbol_info& lhs, const symbol_info& rhs)\n-{ return !(lhs == rhs); }\n-\n template<typename _CharT, typename _Traits>\n   std::basic_ostream<_CharT, _Traits>&\n   operator<<(std::basic_ostream<_CharT, _Traits>& os, symbol_info& si)\n@@ -188,8 +218,8 @@ typedef std::deque<std::string>\t\t\t\tsymbol_names;\n typedef __gnu_cxx::hash_map<const char*, symbol_info> \tsymbol_infos;\n \n void\n-collect_symbol_data(const char* file, symbol_infos& symbols, \n-\t\t    symbol_names& names)\n+create_symbol_data(const char* file, symbol_infos& symbols, \n+\t\t   symbol_names& names)\n {\n   // Parse list of symbols in file into vectors of symbol_info.\n   // For 3.2.0 on x86/linux, this usually is\n@@ -213,6 +243,21 @@ collect_symbol_data(const char* file, symbol_infos& symbols,\n     }\n }\n \n+void\n+report_symbol_info(const symbol_info& symbol, std::size_t n)\n+{\n+  using namespace std;\n+  const char tab = '\\t';\n+  cout << tab << n << endl;\n+  cout << tab << \"symbol\"<< endl;\n+  cout << tab << symbol.name << endl;\n+\n+  // Add any other information to display here.\n+  cout << tab << \"demangled symbol\"<< endl;\n+  cout << tab << symbol.name_demangled << endl;\n+\n+  cout << endl;\n+}\n \n int main(int argc, char** argv)\n {\n@@ -275,8 +320,8 @@ int main(int argc, char** argv)\n   symbol_names  baseline_names;\n   symbol_infos  test_symbols;\n   symbol_names  test_names;\n-  collect_symbol_data(baseline_file, baseline_symbols, baseline_names);\n-  collect_symbol_data(test_file, test_symbols, test_names);\n+  create_symbol_data(baseline_file, baseline_symbols, baseline_names);\n+  create_symbol_data(test_file, test_symbols, test_names);\n \n   // Basic sanity check. (Was: error checking, what's that?)\n   const symbol_names::size_type baseline_size = baseline_names.size();\n@@ -323,28 +368,31 @@ int main(int argc, char** argv)\n   vector<symbol_pair> incompatible;\n   for (size_t i = 0; i < shared_size; ++i)\n     {\n-      symbol_info binfo = baseline_symbols[shared_names[i].first.c_str()];\n-      symbol_info tinfo = test_symbols[shared_names[i].second.c_str()];\n-      if (binfo != tinfo)\n-\tincompatible.push_back(symbol_pair(binfo, tinfo));\n+      symbol_info base = baseline_symbols[shared_names[i].first.c_str()];\n+      symbol_info test = test_symbols[shared_names[i].second.c_str()];\n+      if (!check_compatible(base, test))\n+\tincompatible.push_back(symbol_pair(base, test));\n     }\n \n-  // Output data.\n+  // Report results.\n   cout << test_names.size() << \" added symbols \" << endl;\n   for (size_t j = 0; j < test_names.size() ; ++j)\n-    cout << '\\t' << test_names[j] << endl;\n+    report_symbol_info(test_symbols[test_names[j].c_str()], j + 1);\n \n   cout << missing_names.size() << \" missing symbols \" << endl;\n   for (size_t j = 0; j < missing_names.size() ; ++j)\n-    cout << '\\t' << missing_names[j] << endl;\n+    report_symbol_info(baseline_symbols[missing_names[j].c_str()], j + 1);\n \n   cout << incompatible.size() << \" incompatible symbols \" << endl;\n   for (size_t j = 0; j < incompatible.size() ; ++j)\n     {\n-      cout << \"baseline symbol_info:\" << endl;\n-      cout << incompatible[j].first << endl;\n-      cout << \"test symbol_info:\" << endl;\n-      cout << incompatible[j].second << endl;\n+      // First, report name.\n+      const symbol_info& base = incompatible[j].first;\n+      const symbol_info& test = incompatible[j].second;\n+      report_symbol_info(test, j + 1);\n+\n+      // Second, report reason or reasons incompatible.\n+      check_compatible(base, test, true);\n     }\n \n   return 0;"}]}