{"sha": "5062dbd5ae2d18db9d6e715b38ee2e0a724fcdcc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA2MmRiZDVhZTJkMThkYjlkNmU3MTViMzhlZTJlMGE3MjRmY2RjYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@casey.cygnus.com", "date": "2000-05-01T23:51:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-05-01T23:51:37Z"}, "message": "tree.c (build_target_expr_with_type): If we already have a TARGET_EXPR, just return it.\n\n        * tree.c (build_target_expr_with_type): If we already have a\n        TARGET_EXPR, just return it.\n\n        * optimize.c (initialize_inlined_parameters): Don't generate an\n        EXPR_STMT if we can just use DECL_INITIAL.\n        * decl.c (emit_local_var): Only make the initialization a\n        full-expression if stmts_are_full_exprs_p.\n\nFrom-SVN: r33595", "tree": {"sha": "9b1f92405a1082371ff58eb6be57788162dc16bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b1f92405a1082371ff58eb6be57788162dc16bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5062dbd5ae2d18db9d6e715b38ee2e0a724fcdcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5062dbd5ae2d18db9d6e715b38ee2e0a724fcdcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5062dbd5ae2d18db9d6e715b38ee2e0a724fcdcc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5062dbd5ae2d18db9d6e715b38ee2e0a724fcdcc/comments", "author": null, "committer": null, "parents": [{"sha": "cde28f0da4631eda8559c98fa329febb0f1d17fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cde28f0da4631eda8559c98fa329febb0f1d17fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cde28f0da4631eda8559c98fa329febb0f1d17fd"}], "stats": {"total": 50, "additions": 38, "deletions": 12}, "files": [{"sha": "9c9990fdd6fe4a2e339bd1e3f90ae84f7e17b1f7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5062dbd5ae2d18db9d6e715b38ee2e0a724fcdcc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5062dbd5ae2d18db9d6e715b38ee2e0a724fcdcc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5062dbd5ae2d18db9d6e715b38ee2e0a724fcdcc", "patch": "@@ -1,3 +1,13 @@\n+2000-05-01  Jason Merrill  <jason@casey.cygnus.com>\n+\n+\t* tree.c (build_target_expr_with_type): If we already have a\n+\tTARGET_EXPR, just return it.\n+\n+\t* optimize.c (initialize_inlined_parameters): Don't generate an\n+\tEXPR_STMT if we can just use DECL_INITIAL.\n+\t* decl.c (emit_local_var): Only make the initialization a\n+\tfull-expression if stmts_are_full_exprs_p.\n+\n 2000-05-01  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (same_type_ignoring_top_level_qualifiers_p): New"}, {"sha": "3853df163304d7e0b5b4973b1d155386508ae8a8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5062dbd5ae2d18db9d6e715b38ee2e0a724fcdcc/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5062dbd5ae2d18db9d6e715b38ee2e0a724fcdcc/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5062dbd5ae2d18db9d6e715b38ee2e0a724fcdcc", "patch": "@@ -7871,9 +7871,13 @@ emit_local_var (decl)\n     }\n \n   /* Actually do the initialization.  */\n-  expand_start_target_temps ();\n+  if (stmts_are_full_exprs_p)\n+    expand_start_target_temps ();\n+\n   expand_decl_init (decl);\n-  expand_end_target_temps ();\n+\n+  if (stmts_are_full_exprs_p)\n+    expand_end_target_temps ();\n }\n \n /* Finish processing of a declaration;"}, {"sha": "1158f39696544d964562c01c0ac261c77b1ad6db", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5062dbd5ae2d18db9d6e715b38ee2e0a724fcdcc/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5062dbd5ae2d18db9d6e715b38ee2e0a724fcdcc/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=5062dbd5ae2d18db9d6e715b38ee2e0a724fcdcc", "patch": "@@ -429,21 +429,30 @@ initialize_inlined_parameters (id, args, fn)\n       splay_tree_insert (id->decl_map, \n \t\t\t (splay_tree_key) p,\n \t\t\t (splay_tree_value) var);\n+\n+      /* Declare this new variable.  */\n+      init_stmt = build_min_nt (DECL_STMT, var);\n+      TREE_CHAIN (init_stmt) = init_stmts;\n+      init_stmts = init_stmt;\n+\n       /* Initialize this VAR_DECL from the equivalent argument.  If\n \t the argument is an object, created via a constructor or copy,\n \t this will not result in an extra copy: the TARGET_EXPR\n \t representing the argument will be bound to VAR, and the\n \t object will be constructed in VAR.  */\n-      init_stmt = build_min_nt (EXPR_STMT,\n-\t\t\t\tbuild (INIT_EXPR, TREE_TYPE (p),\n-\t\t\t\t       var, value));\n-      /* Declare this new variable.  Note that we do this *after* the\n-\t initialization because we are going to reverse all the\n-\t initialization statements below.  */\n-      TREE_CHAIN (init_stmt) = build_min_nt (DECL_STMT, var);\n-      /* Add this initialization to the list.  */\n-      TREE_CHAIN (TREE_CHAIN (init_stmt)) = init_stmts;\n-      init_stmts = init_stmt;\n+      if (! TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (p)))\n+\tDECL_INITIAL (var) = value;\n+      else\n+\t{\n+\t  init_stmt = build_min_nt (EXPR_STMT,\n+\t\t\t\t    build (INIT_EXPR, TREE_TYPE (p),\n+\t\t\t\t\t   var, value));\n+\t  /* Add this initialization to the list.  Note that we want the\n+\t     declaration *after* the initialization because we are going\n+\t     to reverse all the initialization statements below.  */\n+\t  TREE_CHAIN (init_stmt) = init_stmts;\n+\t  init_stmts = init_stmt;\n+\t}\n     }\n \n   /* The initialization statements have been built up in reverse"}, {"sha": "47209b2fa03be8433927453a80ff907ef783244a", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5062dbd5ae2d18db9d6e715b38ee2e0a724fcdcc/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5062dbd5ae2d18db9d6e715b38ee2e0a724fcdcc/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=5062dbd5ae2d18db9d6e715b38ee2e0a724fcdcc", "patch": "@@ -294,6 +294,9 @@ build_target_expr_with_type (init, type)\n   tree slot;\n   tree rval;\n \n+  if (TREE_CODE (init) == TARGET_EXPR)\n+    return init;\n+\n   slot = build (VAR_DECL, type);\n   DECL_ARTIFICIAL (slot) = 1;\n   DECL_CONTEXT (slot) = current_function_decl;"}]}