{"sha": "336669e7b08e8dc86bd324702013a0a968151bea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM2NjY5ZTdiMDhlOGRjODZiZDMyNDcwMjAxM2EwYTk2ODE1MWJlYQ==", "commit": {"author": {"name": "Carlo Wood", "email": "carlo@gnu.org", "date": "2002-02-18T22:41:45Z"}, "committer": {"name": "Craig Rodrigues", "email": "rodrigc@gcc.gnu.org", "date": "2002-02-18T22:41:45Z"}, "message": "re PR other/5390 ([3.3 only?] Libiberty fails to demangle multi-digit template parameters.)\n\n2002-02-18  Carlo Wood  <carlo@gnu.org>\n\n\tPR c++/5390\n        * cplus-dem.c (demangle_integral_value): Accept multi-digit\n        numbers that do not start with an underscore; This is needed\n        for integer template parameters. This doesn't break anything\n        because multi-digit numbers are never followed by a digit.\n        * testsuite/demangle-expected: Corrected all mangled test\n        cases with multi-digit template parameters: g++ 2.95.x does\n        not generate underscores around these parameters.\n\nFrom-SVN: r49851", "tree": {"sha": "f8f50d5ecbf383cb331c0237f66f0fea6ee36abf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8f50d5ecbf383cb331c0237f66f0fea6ee36abf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/336669e7b08e8dc86bd324702013a0a968151bea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/336669e7b08e8dc86bd324702013a0a968151bea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/336669e7b08e8dc86bd324702013a0a968151bea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/336669e7b08e8dc86bd324702013a0a968151bea/comments", "author": null, "committer": null, "parents": [{"sha": "d4d6d0ce4ceebf82c86f0eb5061340e1c6dd5083", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4d6d0ce4ceebf82c86f0eb5061340e1c6dd5083", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4d6d0ce4ceebf82c86f0eb5061340e1c6dd5083"}], "stats": {"total": 44, "additions": 33, "deletions": 11}, "files": [{"sha": "f3ef42903ca487d304d4bca032744b1e9ed46970", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336669e7b08e8dc86bd324702013a0a968151bea/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336669e7b08e8dc86bd324702013a0a968151bea/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=336669e7b08e8dc86bd324702013a0a968151bea", "patch": "@@ -1,3 +1,14 @@\n+2002-02-18  Carlo Wood  <carlo@gnu.org>\n+\n+\tPR c++/5390\n+\t* cplus-dem.c (demangle_integral_value): Accept multi-digit\n+\tnumbers that do not start with an underscore; This is needed\n+\tfor integer template parameters. This doesn't break anything\n+\tbecause multi-digit numbers are never followed by a digit.\n+\t* testsuite/demangle-expected: Corrected all mangled test\n+\tcases with multi-digit template parameters: g++ 2.95.x does\n+\tnot generate underscores around these parameters.\n+\n 2002-02-05  Jason Merrill  <jason@redhat.com>\n \n \t* cplus-dem.c (flags): Add DMGL_VERBOSE"}, {"sha": "710b69d9c7a2b6afeeea0e46821b1815a50255ab", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336669e7b08e8dc86bd324702013a0a968151bea/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336669e7b08e8dc86bd324702013a0a968151bea/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=336669e7b08e8dc86bd324702013a0a968151bea", "patch": "@@ -1787,7 +1787,7 @@ demangle_integral_value (work, mangled, s)\n \n       /* By default, we let the number decide whether we shall consume an\n \t underscore.  */\n-      int consume_following_underscore = 0;\n+      int multidigit_without_leading_underscore = 0;\n       int leave_following_underscore = 0;\n \n       success = 0;\n@@ -1804,23 +1804,34 @@ demangle_integral_value (work, mangled, s)\n \t     `m'-prefix we must do it here, using consume_count and\n \t     adjusting underscores: we have to consume the underscore\n \t     matching the prepended one.  */\n-\t  consume_following_underscore = 1;\n+\t  multidigit_without_leading_underscore = 1;\n \t  string_appendn (s, \"-\", 1);\n \t  (*mangled) += 2;\n \t}\n       else if (**mangled == '_')\n \t{\n \t  /* Do not consume a following underscore;\n-\t     consume_following_underscore will consume what should be\n+\t     multidigit_without_leading_underscore will consume what should be\n \t     consumed.  */\n \t  leave_following_underscore = 1;\n \t}\n+      else\n+\t{\n+\t  /* Since consume_count_with_underscores does not handle\n+\t     multi-digit numbers that do not start with an underscore,\n+\t     and this number can be an integer template parameter,\n+\t     we have to call consume_count. */\n+\t  multidigit_without_leading_underscore = 1;\n+\t  /* These multi-digit numbers never end on an underscore,\n+\t     so if there is one then don't eat it. */\n+\t  leave_following_underscore = 1;\n+\t}\n \n       /* We must call consume_count if we expect to remove a trailing\n \t underscore, since consume_count_with_underscores expects\n \t the leading underscore (that we consumed) if it is to handle\n \t multi-digit numbers.  */\n-      if (consume_following_underscore)\n+      if (multidigit_without_leading_underscore)\n \tvalue = consume_count (mangled);\n       else\n \tvalue = consume_count_with_underscores (mangled);\n@@ -1838,7 +1849,7 @@ demangle_integral_value (work, mangled, s)\n \t     is wrong.  If other (arbitrary) cases are followed by an\n \t     underscore, we need to do something more radical.  */\n \n-\t  if ((value > 9 || consume_following_underscore)\n+\t  if ((value > 9 || multidigit_without_leading_underscore)\n \t      && ! leave_following_underscore\n \t      && **mangled == '_')\n \t    (*mangled)++;"}, {"sha": "3e90d9f1eaa9eacaee7a912811699c85d1888805", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336669e7b08e8dc86bd324702013a0a968151bea/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336669e7b08e8dc86bd324702013a0a968151bea/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=336669e7b08e8dc86bd324702013a0a968151bea", "patch": "@@ -2476,27 +2476,27 @@ fn__FPQ21n1cPMQ21n1cFPQ21n1c_i\n fn(n::c *, int (n::c::*)(n::c *))\n #\n --format=gnu\n-f__FGt3Bar1i21i\n+f__FGt3Bar1i2G1i\n f(Bar<2>, i)\n #\n --format=gnu\n-f__FGt3Bar1i_21_i\n+f__FGt3Bar1i21i\n f(Bar<21>, int)\n #\n --format=gnu\n-f__FGt3Bar1i24XY_t\n+f__FGt3Bar1i2G4XY_t\n f(Bar<2>, XY_t)\n #\n --format=gnu\n foo__H1Zt2TA2ZRCiZt2NA1Ui9_X01_i\n int foo<TA<int const &, NA<9> > >(TA<int const &, NA<9> >)\n #\n --format=gnu\n-foo__H1Zt2TA2ZcZt2NA1Ui_20__X01_i\n+foo__H1Zt2TA2ZcZt2NA1Ui20_X01_i\n int foo<TA<char, NA<20> > >(TA<char, NA<20> >)\n #\n --format=gnu\n-foo__H1Zt2TA2ZiZt8N___A___1Ui_99__X01_i\n+foo__H1Zt2TA2ZiZt8N___A___1Ui99_X01_i\n int foo<TA<int, N___A___<99> > >(TA<int, N___A___<99> >)\n #\n --format=gnu\n@@ -2532,7 +2532,7 @@ __opi__t2TA2ZiZt8N___A___1i_m99_\n TA<int, N___A___<-99> >::operator int(void)\n #\n --format=gnu\n-foo___bar__baz_____H1Zt2TA2ZiZt8N___A___1i_99__X01_i\n+foo___bar__baz_____H1Zt2TA2ZiZt8N___A___1i99_X01_i\n int foo___bar__baz___<TA<int, N___A___<99> > >(TA<int, N___A___<99> >)\n #\n --format=gnu"}]}