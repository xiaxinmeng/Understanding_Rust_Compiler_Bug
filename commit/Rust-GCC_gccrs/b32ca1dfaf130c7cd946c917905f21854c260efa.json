{"sha": "b32ca1dfaf130c7cd946c917905f21854c260efa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMyY2ExZGZhZjEzMGM3Y2Q5NDZjOTE3OTA1ZjIxODU0YzI2MGVmYQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-06-25T17:07:26Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-06-25T17:07:26Z"}, "message": "hash-traits.h (default_hash_traits): New structure.\n\ngcc/\n\t* hash-traits.h (default_hash_traits): New structure.\n\t* hash-set.h (default_hashset_traits): Delete.\n\t(hash_set): Use default_hash_traits<Key> instead of\n\tdefault_hashset_traits.  Delete hash_entry type and use Key directly.\n\t* ipa-devirt.c (pair_traits): Delete.\n\t(default_hash_traits <type_pair>): Override.\n\t(odr_subtypes_equivalent_p): Remove pair_types template parameter.\n\t(odr_types_equivalent_p, add_type_duplicate): Likewise.\n\nFrom-SVN: r224964", "tree": {"sha": "0d263ff1b78638159eec3b6061f9596f22d5c4e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d263ff1b78638159eec3b6061f9596f22d5c4e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b32ca1dfaf130c7cd946c917905f21854c260efa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b32ca1dfaf130c7cd946c917905f21854c260efa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b32ca1dfaf130c7cd946c917905f21854c260efa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b32ca1dfaf130c7cd946c917905f21854c260efa/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fc17926acd3037f77501798862b70b5b194002eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc17926acd3037f77501798862b70b5b194002eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc17926acd3037f77501798862b70b5b194002eb"}], "stats": {"total": 203, "additions": 34, "deletions": 169}, "files": [{"sha": "e4b464ef4d20e0022a88412648fe2edce67d76fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b32ca1dfaf130c7cd946c917905f21854c260efa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b32ca1dfaf130c7cd946c917905f21854c260efa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b32ca1dfaf130c7cd946c917905f21854c260efa", "patch": "@@ -1,3 +1,14 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* hash-traits.h (default_hash_traits): New structure.\n+\t* hash-set.h (default_hashset_traits): Delete.\n+\t(hash_set): Use default_hash_traits<Key> instead of\n+\tdefault_hashset_traits.  Delete hash_entry type and use Key directly.\n+\t* ipa-devirt.c (pair_traits): Delete.\n+\t(default_hash_traits <type_pair>): Override.\n+\t(odr_subtypes_equivalent_p): Remove pair_types template parameter.\n+\t(odr_types_equivalent_p, add_type_duplicate): Likewise.\n+\n 2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* hash-traits.h (typed_noop_remove): Don't require a pointer type."}, {"sha": "2fb6cae7362ae5c22f8d048ff6d8d69628f655dd", "filename": "gcc/hash-set.h", "status": "modified", "additions": 9, "deletions": 163, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b32ca1dfaf130c7cd946c917905f21854c260efa/gcc%2Fhash-set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b32ca1dfaf130c7cd946c917905f21854c260efa/gcc%2Fhash-set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-set.h?ref=b32ca1dfaf130c7cd946c917905f21854c260efa", "patch": "@@ -21,162 +21,9 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef hash_set_h\n #define hash_set_h\n \n-/* implement default behavior for traits when types allow it.  */\n-\n-struct default_hashset_traits\n-{\n-  /* Hashes the passed in key.  */\n-\n-  template<typename T>\n-  static hashval_t\n-  hash (T *p)\n-    {\n-      return uintptr_t (p) >> 3;\n-    }\n-\n-  template<typename T> static hashval_t hash(const T &v) { return v; }\n-\n-  /* Return true if the two keys passed as arguments are equal.  */\n-\n-  template<typename T>\n-  static bool\n-  equal (const T &a, const T &b)\n-    {\n-      return a == b;\n-    }\n-\n-  /* Called to dispose of the key before marking the entry as deleted.  */\n-\n-  template<typename T> static void remove (T &v) { v.~T (); }\n-\n-  /* Mark the passed in entry as being deleted.  */\n-\n-  template<typename T>\n-  static void\n-  mark_deleted (T *&e)\n-    {\n-      e = reinterpret_cast<void *> (1);\n-    }\n-\n-  /* Mark the passed in entry as being empty.  */\n-\n-  template<typename T>\n-  static void\n-  mark_empty (T *&e)\n-    {\n-      e = NULL;\n-    }\n-\n-  /* Return true if the passed in entry is marked as deleted.  */\n-\n-  template<typename T>\n-  static bool\n-  is_deleted (T *e)\n-    {\n-      return e == reinterpret_cast<void *> (1);\n-    }\n-\n-  /* Return true if the passed in entry is marked as empty.  */\n-\n-  template<typename T> static bool is_empty (T *e) { return e == NULL; }\n-\n-  /* ggc walking routine, mark all objects refered to by this one.  */\n-\n-  template<typename T>\n-  static void\n-  ggc_mx (T &x)\n-    {\n-      extern void gt_ggc_mx (T &);\n-      gt_ggc_mx (x);\n-    }\n-\n-  /* pch walking routine, note all objects refered to by this element.  */\n-\n-  template<typename T>\n-  static void\n-  pch_nx (T &x)\n-    {\n-      extern void gt_pch_nx (T &);\n-      gt_pch_nx (x);\n-    }\n-};\n-\n-template<typename Key, typename Traits = default_hashset_traits>\n+template<typename Key, typename Traits = default_hash_traits<Key> >\n class hash_set\n {\n-  struct hash_entry\n-  {\n-    Key m_key;\n-\n-    typedef hash_entry value_type;\n-    typedef Key compare_type;\n-\n-    static hashval_t hash (const hash_entry &e)\n-      {\n-       \treturn Traits::hash (e.m_key);\n-      }\n-\n-    static bool equal (const hash_entry &a, const Key &b)\n-       \t{\n-\t  return Traits::equal (a.m_key, b);\n-       \t}\n-\n-    static void remove (hash_entry &e) { Traits::remove (e.m_key); }\n-\n-    static void\n-    mark_deleted (hash_entry &e)\n-      {\n-       \tTraits::mark_deleted (e.m_key);\n-      }\n-\n-    static bool is_deleted (const hash_entry &e)\n-      {\n-       \treturn Traits::is_deleted (e.m_key);\n-      }\n-\n-    static void\n-    mark_empty (hash_entry &e)\n-      {\n-\tTraits::mark_empty (e.m_key);\n-      }\n-\n-    static bool\n-    is_empty (const hash_entry &e)\n-      {\n-\treturn Traits::is_empty (e.m_key);\n-      }\n-\n-    static void ggc_mx (hash_entry &e)\n-      {\n-\tTraits::ggc_mx (e.m_key);\n-      }\n-\n-    static void pch_nx (hash_entry &e)\n-      {\n-\tTraits::pch_nx (e.m_key);\n-      }\n-\n-    static void pch_nx (hash_entry &e, gt_pointer_operator op, void *c)\n-      {\n-\tpch_nx_helper (e.m_key, op, c);\n-      }\n-\n-  private:\n-    template<typename T>\n-    static void\n-      pch_nx_helper (T &x, gt_pointer_operator op, void *cookie)\n-\t{\n-\t  gt_pch_nx (&x, op, cookie);\n-\t}\n-\n-    template<typename T>\n-      static void\n-      pch_nx_helper (T *&x, gt_pointer_operator op, void *cookie)\n-\t{\n-\t  op (&x, cookie);\n-\t}\n-  };\n-\n public:\n   explicit hash_set (size_t n = 13, bool ggc = false CXX_MEM_STAT_INFO)\n     : m_table (n, ggc, true, HASH_SET_ORIGIN PASS_MEM_STAT) {}\n@@ -196,11 +43,10 @@ class hash_set\n \n   bool add (const Key &k)\n     {\n-      hash_entry *e = m_table.find_slot_with_hash (k, Traits::hash (k),\n-\t\t\t\t\t\t   INSERT);\n-      bool existed = !hash_entry::is_empty (*e);\n+      Key *e = m_table.find_slot_with_hash (k, Traits::hash (k), INSERT);\n+      bool existed = !Traits::is_empty (*e);\n       if (!existed)\n-\te->m_key = k;\n+\t*e = k;\n \n       return existed;\n     }\n@@ -209,8 +55,8 @@ class hash_set\n \n   bool contains (const Key &k)\n     {\n-      hash_entry &e = m_table.find_with_hash (k, Traits::hash (k));\n-      return !Traits::is_empty (e.m_key);\n+      Key &e = m_table.find_with_hash (k, Traits::hash (k));\n+      return !Traits::is_empty (e);\n     }\n \n   /* Call the call back on each pair of key and value with the passed in\n@@ -219,9 +65,9 @@ class hash_set\n   template<typename Arg, bool (*f)(const Key &, Arg)>\n   void traverse (Arg a) const\n     {\n-      for (typename hash_table<hash_entry>::iterator iter = m_table.begin ();\n+      for (typename hash_table<Traits>::iterator iter = m_table.begin ();\n \t   iter != m_table.end (); ++iter)\n-\tf ((*iter).m_key, a);\n+\tf (*iter, a);\n     }\n \n   /* Return the number of elements in the set.  */\n@@ -234,7 +80,7 @@ class hash_set\n   template<typename T, typename U> friend void gt_pch_nx (hash_set<T, U> *);\n       template<typename T, typename U> friend void gt_pch_nx (hash_set<T, U> *, gt_pointer_operator, void *);\n \n-  hash_table<hash_entry> m_table;\n+  hash_table<Traits> m_table;\n };\n \n /* ggc marking routines.  */"}, {"sha": "c580de9ddf90e12f4ed515350c61c9dcf08ea954", "filename": "gcc/hash-traits.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b32ca1dfaf130c7cd946c917905f21854c260efa/gcc%2Fhash-traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b32ca1dfaf130c7cd946c917905f21854c260efa/gcc%2Fhash-traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-traits.h?ref=b32ca1dfaf130c7cd946c917905f21854c260efa", "patch": "@@ -190,4 +190,9 @@ struct ggc_ptr_hash : pointer_hash <T>, ggc_remove <T *> {};\n template <typename T>\n struct ggc_cache_ptr_hash : pointer_hash <T>, ggc_cache_remove <T *> {};\n \n+template <typename T> struct default_hash_traits;\n+\n+template <typename T>\n+struct default_hash_traits <T *> : ggc_ptr_hash <T> {};\n+\n #endif"}, {"sha": "80f73a68856e8165700a7f2e9376aba2c46e24dd", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b32ca1dfaf130c7cd946c917905f21854c260efa/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b32ca1dfaf130c7cd946c917905f21854c260efa/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=b32ca1dfaf130c7cd946c917905f21854c260efa", "patch": "@@ -162,8 +162,11 @@ typedef struct\n   tree second;\n } type_pair;\n \n-struct pair_traits : default_hashset_traits\n+template <>\n+struct default_hash_traits <type_pair> : typed_noop_remove <type_pair>\n {\n+  typedef type_pair value_type;\n+  typedef type_pair compare_type;\n   static hashval_t\n   hash (type_pair p)\n   {\n@@ -192,7 +195,7 @@ struct pair_traits : default_hashset_traits\n };\n \n static bool odr_types_equivalent_p (tree, tree, bool, bool *,\n-\t\t\t\t    hash_set<type_pair,pair_traits> *,\n+\t\t\t\t    hash_set<type_pair> *,\n \t\t\t\t    location_t, location_t);\n \n static bool odr_violation_reported = false;\n@@ -769,7 +772,7 @@ set_type_binfo (tree type, tree binfo)\n \n static bool\n odr_subtypes_equivalent_p (tree t1, tree t2,\n-\t\t\t   hash_set<type_pair,pair_traits> *visited,\n+\t\t\t   hash_set<type_pair> *visited,\n \t\t\t   location_t loc1, location_t loc2)\n {\n \n@@ -1335,7 +1338,7 @@ warn_types_mismatch (tree t1, tree t2, location_t loc1, location_t loc2)\n \n static bool\n odr_types_equivalent_p (tree t1, tree t2, bool warn, bool *warned,\n-\t\t\thash_set<type_pair,pair_traits> *visited,\n+\t\t\thash_set<type_pair> *visited,\n \t\t\tlocation_t loc1, location_t loc2)\n {\n   /* Check first for the obvious case of pointer identity.  */\n@@ -1785,7 +1788,7 @@ odr_types_equivalent_p (tree t1, tree t2, bool warn, bool *warned,\n bool\n odr_types_equivalent_p (tree type1, tree type2)\n {\n-  hash_set<type_pair,pair_traits> visited;\n+  hash_set<type_pair> visited;\n \n #ifdef ENABLE_CHECKING\n   gcc_assert (odr_or_derived_type_p (type1) && odr_or_derived_type_p (type2));\n@@ -1860,7 +1863,7 @@ add_type_duplicate (odr_type val, tree type)\n   bool base_mismatch = false;\n   unsigned int i;\n   bool warned = false;\n-  hash_set<type_pair,pair_traits> visited;\n+  hash_set<type_pair> visited;\n \n   gcc_assert (in_lto_p);\n   vec_safe_push (val->types, type);"}]}