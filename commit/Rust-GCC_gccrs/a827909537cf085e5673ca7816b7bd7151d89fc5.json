{"sha": "a827909537cf085e5673ca7816b7bd7151d89fc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgyNzkwOTUzN2NmMDg1ZTU2NzNjYTc4MTZiN2JkNzE1MWQ4OWZjNQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-05T14:53:31Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-05T15:27:42Z"}, "message": "Make the path solver's range_of_stmt() handle all statements.\n\nThe path solver's range_of_stmt() was handcuffed to only fold\nGIMPLE_COND statements, since those were the only statements the\nbackward threader needed to resolve.  However, there is no need for this\nrestriction, as the folding code is perfectly capable of folding any\nstatement.\n\nThis can be the case when trying to fold other statements in the final\nblock of a path (for instance, in the forward threader as it tries to\nfold candidate statements along a path).\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* gimple-range-path.cc (path_range_query::range_of_stmt): Remove\n\tGIMPLE_COND special casing.\n\t(path_range_query::range_defined_in_block): Use range_of_stmt\n\tinstead of calling fold_range directly.", "tree": {"sha": "48dce970ace777673182e5ead546faec71f60370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48dce970ace777673182e5ead546faec71f60370"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a827909537cf085e5673ca7816b7bd7151d89fc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a827909537cf085e5673ca7816b7bd7151d89fc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a827909537cf085e5673ca7816b7bd7151d89fc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a827909537cf085e5673ca7816b7bd7151d89fc5/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90ef15352701c6880faee83a46031d7837ab9d27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90ef15352701c6880faee83a46031d7837ab9d27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90ef15352701c6880faee83a46031d7837ab9d27"}], "stats": {"total": 8, "additions": 3, "deletions": 5}, "files": [{"sha": "a4fa3b296ff6d66f35ba53b9c222a010f9533261", "filename": "gcc/gimple-range-path.cc", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a827909537cf085e5673ca7816b7bd7151d89fc5/gcc%2Fgimple-range-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a827909537cf085e5673ca7816b7bd7151d89fc5/gcc%2Fgimple-range-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.cc?ref=a827909537cf085e5673ca7816b7bd7151d89fc5", "patch": "@@ -155,7 +155,6 @@ path_range_query::unreachable_path_p ()\n }\n \n // Return the range of STMT at the end of the path being analyzed.\n-// Anything but the final conditional in a BB will return VARYING.\n \n bool\n path_range_query::range_of_stmt (irange &r, gimple *stmt, tree)\n@@ -165,10 +164,9 @@ path_range_query::range_of_stmt (irange &r, gimple *stmt, tree)\n   if (!irange::supports_type_p (type))\n     return false;\n \n-  if (gimple_code (stmt) == GIMPLE_COND && fold_range (r, stmt, this))\n-    return true;\n+  if (!fold_range (r, stmt, this))\n+    r.set_varying (type);\n \n-  r.set_varying (type);\n   return true;\n }\n \n@@ -237,7 +235,7 @@ path_range_query::range_defined_in_block (irange &r, tree name, basic_block bb)\n \n   if (gimple_code (def_stmt) == GIMPLE_PHI)\n     ssa_range_in_phi (r, as_a<gphi *> (def_stmt));\n-  else if (!fold_range (r, def_stmt, this))\n+  else if (!range_of_stmt (r, def_stmt, name))\n     r.set_varying (TREE_TYPE (name));\n \n   if (bb)"}]}