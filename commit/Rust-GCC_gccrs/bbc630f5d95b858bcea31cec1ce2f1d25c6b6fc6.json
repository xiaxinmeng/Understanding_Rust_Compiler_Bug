{"sha": "bbc630f5d95b858bcea31cec1ce2f1d25c6b6fc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJjNjMwZjVkOTViODU4YmNlYTMxY2VjMWNlMmYxZDI1YzZiNmZjNg==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2004-07-24T01:05:45Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2004-07-24T01:05:45Z"}, "message": "re PR tree-optimization/16688 (ICE in group_aliases, at tree-ssa-alias.c:1234)\n\n\n\tPR tree-optimization/16688\n\tPR tree-optimization/16689\n\t* tree-ssa-alias.c (setup_pointers_and_addressables): Remove\n\tunnecessary initialization of 'tag'.\n\t(get_tmt_for): Check that the new type tag has the same alias\n\tset as the pointed-to type.\n\t(group_aliases): Only regular variables need to be removed\n\tfrom the alias set of a name tag.\n\t* tree-ssa-copy.c (may_propagate_copy): Do not allow copy\n\tpropagation if the two types are not compatible.\n\t(merge_alias_info): Rename from replace_ssa_names_ann.\n\tAdd more checking.\n\t(replace_exp_1): If both arguments are SSA_NAMEs, check that\n\tthe propagation can be done.\n\tOnly call merge_alias_info on pointers.\n\t(propagate_value): Likewise.\n\t* tree-ssa-copyrename.c: Include langhooks.h.\n\t(copy_rename_partition_coalesce): Call replace_ssa_name_symbol\n\tto do the merging.\n\tDo not coalesce variables with incompatible types.\n\t(rename_ssa_copies): Call replace_ssa_name_symbol.\n\t* tree-ssa.c (verify_ssa_name): Verify that the SSA_NAME has\n\tthe same type as the underlying _DECL.\n\t* tree-ssanames.c (replace_ssa_name_symbol): New function.\n\t* tree.h (replace_ssa_name_symbol): Declare.\n\nFrom-SVN: r85108", "tree": {"sha": "152cb570bb5673abd6f3cb0e91129d27c8889d40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/152cb570bb5673abd6f3cb0e91129d27c8889d40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbc630f5d95b858bcea31cec1ce2f1d25c6b6fc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbc630f5d95b858bcea31cec1ce2f1d25c6b6fc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbc630f5d95b858bcea31cec1ce2f1d25c6b6fc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbc630f5d95b858bcea31cec1ce2f1d25c6b6fc6/comments", "author": null, "committer": null, "parents": [{"sha": "368bf4a1843bfd8edf1fac035e4e703bb9fabf4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/368bf4a1843bfd8edf1fac035e4e703bb9fabf4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/368bf4a1843bfd8edf1fac035e4e703bb9fabf4a"}], "stats": {"total": 156, "additions": 119, "deletions": 37}, "files": [{"sha": "bd8785c902c336a26d0e1b59c3825da6b89b8a9c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbc630f5d95b858bcea31cec1ce2f1d25c6b6fc6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbc630f5d95b858bcea31cec1ce2f1d25c6b6fc6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bbc630f5d95b858bcea31cec1ce2f1d25c6b6fc6", "patch": "@@ -1,3 +1,31 @@\n+2004-07-23  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR tree-optimization/16688\n+\tPR tree-optimization/16689\n+\t* tree-ssa-alias.c (setup_pointers_and_addressables): Remove\n+\tunnecessary initialization of 'tag'.\n+\t(get_tmt_for): Check that the new type tag has the same alias\n+\tset as the pointed-to type.\n+\t(group_aliases): Only regular variables need to be removed\n+\tfrom the alias set of a name tag.\n+\t* tree-ssa-copy.c (may_propagate_copy): Do not allow copy\n+\tpropagation if the two types are not compatible.\n+\t(merge_alias_info): Rename from replace_ssa_names_ann.\n+\tAdd more checking.\n+\t(replace_exp_1): If both arguments are SSA_NAMEs, check that\n+\tthe propagation can be done.\n+\tOnly call merge_alias_info on pointers.\n+\t(propagate_value): Likewise.\n+\t* tree-ssa-copyrename.c: Include langhooks.h.\n+\t(copy_rename_partition_coalesce): Call replace_ssa_name_symbol\n+\tto do the merging.\n+\tDo not coalesce variables with incompatible types.\n+\t(rename_ssa_copies): Call replace_ssa_name_symbol.\n+\t* tree-ssa.c (verify_ssa_name): Verify that the SSA_NAME has\n+\tthe same type as the underlying _DECL.\n+\t* tree-ssanames.c (replace_ssa_name_symbol): New function.\n+\t* tree.h (replace_ssa_name_symbol): Declare.\n+\n 2004-07-23  Richard Henderson  <rth@redhat.com>\n \n \tPR c++/16277"}, {"sha": "fab9e027841548941f21ab25a2b1ed37715606f8", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbc630f5d95b858bcea31cec1ce2f1d25c6b6fc6/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbc630f5d95b858bcea31cec1ce2f1d25c6b6fc6/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=bbc630f5d95b858bcea31cec1ce2f1d25c6b6fc6", "patch": "@@ -1225,7 +1225,8 @@ group_aliases (struct alias_info *ai)\n \t{\n \t  tree alias = VARRAY_TREE (aliases, j);\n \t  var_ann_t ann = var_ann (alias);\n-\t  if (ann->may_aliases)\n+\n+\t  if (ann->mem_tag_kind == NOT_A_TAG && ann->may_aliases)\n \t    {\n \t      tree new_alias;\n \n@@ -1370,7 +1371,7 @@ setup_pointers_and_addressables (struct alias_info *ai)\n \t  && (bitmap_bit_p (ai->dereferenced_ptrs_store, v_ann->uid)\n \t      || bitmap_bit_p (ai->dereferenced_ptrs_load, v_ann->uid)))\n \t{\n-\t  tree tag = v_ann->type_mem_tag;\n+\t  tree tag;\n \t  var_ann_t t_ann;\n \n \t  /* If pointer VAR still doesn't have a memory tag associated\n@@ -2170,6 +2171,14 @@ get_tmt_for (tree ptr, struct alias_info *ai)\n       ai->pointers[ai->num_pointers++] = alias_map;\n     }\n \n+#if defined ENABLE_CHECKING\n+  /* Make sure that the type tag has the same alias set as the\n+     pointed-to type.  */\n+  if (tag_set != get_alias_set (tag))\n+    abort ();\n+#endif\n+\n+\n   return tag;\n }\n "}, {"sha": "0ddfa9ce8257b8ed7254f1447a323f6bd889ed06", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 51, "deletions": 32, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbc630f5d95b858bcea31cec1ce2f1d25c6b6fc6/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbc630f5d95b858bcea31cec1ce2f1d25c6b6fc6/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=bbc630f5d95b858bcea31cec1ce2f1d25c6b6fc6", "patch": "@@ -110,6 +110,8 @@ may_propagate_copy (tree dest, tree orig)\n       tree mt_orig = var_ann (SSA_NAME_VAR (orig))->type_mem_tag;\n       if (mt_dest && mt_orig && mt_dest != mt_orig)\n \treturn false;\n+      else if (!lang_hooks.types_compatible_p (type_d, type_o))\n+\treturn false;\n     }\n \n   /* If the destination is a SSA_NAME for a virtual operand, then we have\n@@ -152,41 +154,40 @@ may_propagate_copy (tree dest, tree orig)\n   return true;\n }\n \n-/* Given two SSA_NAMEs, replace the annotations for the one referred to by OP \n-   with VAR's annotations.\n-\n-   If OP is a pointer, copy the memory tag used originally by OP into\n-   VAR.  This is needed in cases where VAR had never been dereferenced in the\n-   program.\n \n-   If FOR_PROPAGATION is true, then perform additional checks to ensure\n-   that const/copy propagation of var for OP is valid.  */\n+/* Given two SSA_NAMEs pointers ORIG and NEW such that we are copy\n+   propagating NEW into ORIG, consolidate aliasing information so that\n+   they both share the same memory tags.  */\n    \n static void\n-replace_ssa_names_ann (tree op,\n-\t\t   tree var,\n-\t\t   bool for_propagation ATTRIBUTE_UNUSED)\n+merge_alias_info (tree orig, tree new)\n {\n+  tree new_sym = SSA_NAME_VAR (new);\n+  tree orig_sym = SSA_NAME_VAR (orig);\n+  var_ann_t new_ann = var_ann (new_sym);\n+  var_ann_t orig_ann = var_ann (orig_sym);\n+\n #if defined ENABLE_CHECKING\n-  if (for_propagation && !may_propagate_copy (op, var))\n+  if (!POINTER_TYPE_P (TREE_TYPE (orig))\n+      || !POINTER_TYPE_P (TREE_TYPE (new))\n+      || !lang_hooks.types_compatible_p (TREE_TYPE (orig), TREE_TYPE (new)))\n     abort ();\n-#endif\n \n-  /* If VAR doesn't have a memory tag, copy the one from the original\n-     operand.  Also copy the dereferenced flags.  */\n-  if (POINTER_TYPE_P (TREE_TYPE (op)))\n-    {\n-      var_ann_t new_ann = var_ann (SSA_NAME_VAR (var));\n-      var_ann_t orig_ann = var_ann (SSA_NAME_VAR (op));\n-\n-      if (new_ann->type_mem_tag == NULL_TREE)\n-\tnew_ann->type_mem_tag = orig_ann->type_mem_tag;\n-      else if (orig_ann->type_mem_tag == NULL_TREE)\n-\torig_ann->type_mem_tag = new_ann->type_mem_tag;\n-      else if (new_ann->type_mem_tag != orig_ann->type_mem_tag)\n-\tabort ();\n-    }\n+  /* If the pointed-to alias sets are different, these two pointers\n+     would never have the same memory tag.  In this case, NEW should\n+     not have been propagated into ORIG.  */\n+  if (get_alias_set (TREE_TYPE (TREE_TYPE (new_sym)))\n+      != get_alias_set (TREE_TYPE (TREE_TYPE (orig_sym))))\n+    abort ();\n+#endif\n \n+  /* Merge type-based alias info.  */\n+  if (new_ann->type_mem_tag == NULL_TREE)\n+    new_ann->type_mem_tag = orig_ann->type_mem_tag;\n+  else if (orig_ann->type_mem_tag == NULL_TREE)\n+    orig_ann->type_mem_tag = new_ann->type_mem_tag;\n+  else if (new_ann->type_mem_tag != orig_ann->type_mem_tag)\n+    abort ();\n }   \n \n \n@@ -196,12 +197,23 @@ replace_ssa_names_ann (tree op,\n    replacement is done to propagate a value or not.  */\n \n static void\n-replace_exp_1 (use_operand_p op_p, tree val, bool for_propagation)\n+replace_exp_1 (use_operand_p op_p, tree val,\n+\t       bool for_propagation ATTRIBUTE_UNUSED)\n {\n+  tree op = USE_FROM_PTR (op_p);\n+\n+#if defined ENABLE_CHECKING\n+  if (for_propagation\n+      && TREE_CODE (op) == SSA_NAME\n+      && TREE_CODE (val) == SSA_NAME\n+      && !may_propagate_copy (op, val))\n+    abort ();\n+#endif\n+\n   if (TREE_CODE (val) == SSA_NAME)\n     {\n-      if (TREE_CODE (USE_FROM_PTR (op_p)) == SSA_NAME)\n-\treplace_ssa_names_ann (USE_FROM_PTR (op_p), val, for_propagation);\n+      if (TREE_CODE (op) == SSA_NAME && POINTER_TYPE_P (TREE_TYPE (op)))\n+\tmerge_alias_info (op, val);\n       SET_USE (op_p, val);\n     }\n   else\n@@ -233,10 +245,17 @@ propagate_value (use_operand_p op_p, tree val)\n void\n propagate_tree_value (tree *op_p, tree val)\n {\n+#if defined ENABLE_CHECKING\n+  if (TREE_CODE (val) == SSA_NAME\n+      && TREE_CODE (*op_p) == SSA_NAME\n+      && !may_propagate_copy (*op_p, val))\n+    abort ();\n+#endif\n+\n   if (TREE_CODE (val) == SSA_NAME)\n     {\n-      if (TREE_CODE (*op_p) == SSA_NAME)\n-\treplace_ssa_names_ann (*op_p, val, true);\n+      if (TREE_CODE (*op_p) == SSA_NAME && POINTER_TYPE_P (TREE_TYPE (*op_p)))\n+\tmerge_alias_info (*op_p, val);\n       *op_p = val;\n     }\n   else"}, {"sha": "ac7c00aa06eed618dc05106de541a7e54331c672", "filename": "gcc/tree-ssa-copyrename.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbc630f5d95b858bcea31cec1ce2f1d25c6b6fc6/gcc%2Ftree-ssa-copyrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbc630f5d95b858bcea31cec1ce2f1d25c6b6fc6/gcc%2Ftree-ssa-copyrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copyrename.c?ref=bbc630f5d95b858bcea31cec1ce2f1d25c6b6fc6", "patch": "@@ -38,6 +38,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree-dump.h\"\n #include \"tree-ssa-live.h\"\n #include \"tree-pass.h\"\n+#include \"langhooks.h\"\n \n extern void rename_ssa_copies (void);\n \n@@ -247,16 +248,24 @@ copy_rename_partition_coalesce (var_map map, tree var1, tree var2, FILE *debug)\n \tgimp2 = false;\n       }\n \n+  /* Don't coalesce if the two variables aren't type compatible.  */\n+  if (!lang_hooks.types_compatible_p (TREE_TYPE (root1), TREE_TYPE (root2)))\n+    {\n+      if (debug)\n+\tfprintf (debug, \" : Incompatible types.  No coalesce.\\n\");\n+      return;\n+    }\n+\n   /* Merge the two partitions.  */\n   p3 = partition_union (map->var_partition, p1, p2);\n \n   /* Set the root variable of the partition to the better choice, if there is \n      one.  */\n   if (!gimp2)\n-    SSA_NAME_VAR (partition_to_var (map, p3)) = root2;\n+    replace_ssa_name_symbol (partition_to_var (map, p3), root2);\n   else\n     if (!gimp1)\n-      SSA_NAME_VAR (partition_to_var (map, p3)) = root1;\n+      replace_ssa_name_symbol (partition_to_var (map, p3), root1);\n \n   /* Update the various flag widgitry of the current base representative.  */\n   ann3 = var_ann (SSA_NAME_VAR (partition_to_var (map, p3)));\n@@ -359,7 +368,7 @@ rename_ssa_copies (void)\n \t      fprintf (debug, \"\\n\");\n \t    }\n \t}\n-      SSA_NAME_VAR (var) = SSA_NAME_VAR (part_var);\n+      replace_ssa_name_symbol (var, SSA_NAME_VAR (part_var));\n     }\n \n   delete_var_map (map);"}, {"sha": "27b3a5b1bf007827b8fce1becce90632e170bb29", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbc630f5d95b858bcea31cec1ce2f1d25c6b6fc6/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbc630f5d95b858bcea31cec1ce2f1d25c6b6fc6/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=bbc630f5d95b858bcea31cec1ce2f1d25c6b6fc6", "patch": "@@ -118,6 +118,12 @@ verify_ssa_name (tree ssa_name, bool is_virtual)\n       return true;\n     }\n \n+  if (TREE_TYPE (ssa_name) != TREE_TYPE (SSA_NAME_VAR (ssa_name)))\n+    {\n+      error (\"Type mismatch between an SSA_NAME and its symbol.\");\n+      return true;\n+    }\n+\n   if (SSA_NAME_IN_FREE_LIST (ssa_name))\n     {\n       error (\"Found an SSA_NAME that had been released into the free pool\");"}, {"sha": "4e8985a4b21f55e6c6dad220aeac76ee8c6a3f57", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbc630f5d95b858bcea31cec1ce2f1d25c6b6fc6/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbc630f5d95b858bcea31cec1ce2f1d25c6b6fc6/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=bbc630f5d95b858bcea31cec1ce2f1d25c6b6fc6", "patch": "@@ -249,4 +249,14 @@ release_defs (tree stmt)\n     release_ssa_name (V_MUST_DEF_OP (v_must_defs, i));\n }\n \n+\n+/* Replace the symbol associated with SSA_NAME with SYM.  */\n+\n+void\n+replace_ssa_name_symbol (tree ssa_name, tree sym)\n+{\n+  SSA_NAME_VAR (ssa_name) = sym;\n+  TREE_TYPE (ssa_name) = TREE_TYPE (sym);\n+}\n+\n #include \"gt-tree-ssanames.h\""}, {"sha": "a5c0a2c2ad69c7410bdc25353522df9c8fb311bf", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbc630f5d95b858bcea31cec1ce2f1d25c6b6fc6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbc630f5d95b858bcea31cec1ce2f1d25c6b6fc6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=bbc630f5d95b858bcea31cec1ce2f1d25c6b6fc6", "patch": "@@ -2648,6 +2648,7 @@ extern tree make_ssa_name (tree, tree);\n extern tree duplicate_ssa_name (tree, tree);\n extern void release_ssa_name (tree);\n extern void release_defs (tree);\n+extern void replace_ssa_name_symbol (tree, tree);\n \n #ifdef GATHER_STATISTICS\n extern void ssanames_print_statistics (void);"}]}