{"sha": "3d10ed6cbc7248d756077c1e7dc3533257c44a4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QxMGVkNmNiYzcyNDhkNzU2MDc3YzFlN2RjMzUzMzI1N2M0NGE0Zg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2008-08-21T17:50:01Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2008-08-21T17:50:01Z"}, "message": "c-tree.h (grokfield): New argument.\n\n        * c-tree.h (grokfield): New argument.\n        * c-decl.c (grokfield): Handle new location argument.\n        * c-parser.c (c_parser_struct_declaration): Pass location to\n        grokfield.\ntestsuite/\n        * gcc.dg/20011008-1.c: Test column.\n        * gcc.dg/20080820.c: New.\n        * gcc.dg/fltconst-1.c: Test column.\n        * gcc.dg/cpp/cpp.exp: Add -fno-show-column.\n        * gcc.dg/cpp/trad/trad.exp: Same.\n        * lib/gcc.exp (gcc_target_compile): Remove -fno-show-column.\n        * lib/gcc-dg.exp (process-message): Handle columns.\n\nFrom-SVN: r139403", "tree": {"sha": "a0c100e51cbbf0a73555687afb760c911a5d2f78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0c100e51cbbf0a73555687afb760c911a5d2f78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d10ed6cbc7248d756077c1e7dc3533257c44a4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d10ed6cbc7248d756077c1e7dc3533257c44a4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d10ed6cbc7248d756077c1e7dc3533257c44a4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d10ed6cbc7248d756077c1e7dc3533257c44a4f/comments", "author": null, "committer": null, "parents": [{"sha": "eb5712c966473f563c24c8749e1f96d3acb671a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb5712c966473f563c24c8749e1f96d3acb671a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb5712c966473f563c24c8749e1f96d3acb671a2"}], "stats": {"total": 90, "additions": 64, "deletions": 26}, "files": [{"sha": "23783fd2dabf685f4bafd18f194eab59758f8ebe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d10ed6cbc7248d756077c1e7dc3533257c44a4f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d10ed6cbc7248d756077c1e7dc3533257c44a4f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d10ed6cbc7248d756077c1e7dc3533257c44a4f", "patch": "@@ -1,3 +1,10 @@\n+2008-08-21  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* c-tree.h (grokfield): New argument.\n+\t* c-decl.c (grokfield): Handle new location argument.\n+\t* c-parser.c (c_parser_struct_declaration): Pass location to\n+\tgrokfield.\n+\n 2008-08-21  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-ccp.c (ccp_fold): Fold VIEW_CONVERT_EXPRs of constants.\n@@ -360,6 +367,7 @@\n \t(compute_branch_probabilities): Refactored. Invokes mcf_smooth_cfg if\n \tflag_profile_correction is set.\n \n+>>>>>>> .r139386\n 2008-08-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* rtlanal.c (subreg_offset_representable_p): Check HARD_REGNO_MODE_OK."}, {"sha": "056cb3860584aeb5ca11f3960f134ec392e63cb6", "filename": "gcc/c-decl.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d10ed6cbc7248d756077c1e7dc3533257c44a4f/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d10ed6cbc7248d756077c1e7dc3533257c44a4f/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=3d10ed6cbc7248d756077c1e7dc3533257c44a4f", "patch": "@@ -5363,12 +5363,15 @@ start_struct (enum tree_code code, tree name)\n    WIDTH is non-NULL for bit-fields only, and is an INTEGER_CST node.\n    DECL_ATTRS is as for grokdeclarator.\n \n+   LOC is the location of the structure component.\n+\n    This is done during the parsing of the struct declaration.\n    The FIELD_DECL nodes are chained together and the lot of them\n    are ultimately passed to `build_struct' to make the RECORD_TYPE node.  */\n \n tree\n-grokfield (struct c_declarator *declarator, struct c_declspecs *declspecs,\n+grokfield (location_t loc,\n+\t   struct c_declarator *declarator, struct c_declspecs *declspecs,\n \t   tree width, tree *decl_attrs)\n {\n   tree value;\n@@ -5414,10 +5417,10 @@ grokfield (struct c_declarator *declarator, struct c_declspecs *declspecs,\n \t}\n       if (!ok)\n \t{\n-\t  pedwarn (input_location, 0, \"declaration does not declare anything\");\n+\t  pedwarn (loc, 0, \"declaration does not declare anything\");\n \t  return NULL_TREE;\n \t}\n-      pedwarn (input_location, OPT_pedantic, \"ISO C doesn%'t support unnamed structs/unions\");\n+      pedwarn (loc, OPT_pedantic, \"ISO C doesn%'t support unnamed structs/unions\");\n     }\n \n   value = grokdeclarator (declarator, declspecs, FIELD, false,"}, {"sha": "e69b0a738694e4b4f5f32fcb338d6ea4ea039525", "filename": "gcc/c-parser.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d10ed6cbc7248d756077c1e7dc3533257c44a4f/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d10ed6cbc7248d756077c1e7dc3533257c44a4f/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=3d10ed6cbc7248d756077c1e7dc3533257c44a4f", "patch": "@@ -1960,7 +1960,9 @@ c_parser_struct_declaration (c_parser *parser)\n \t     structs or unions (which is [a] useful and [b] supports\n \t     MS P-SDK).  */\n \t  tree attrs = NULL;\n-\t  ret = grokfield (build_id_declarator (NULL_TREE), specs,\n+\n+\t  ret = grokfield (c_parser_peek_token (parser)->location,\n+\t\t\t   build_id_declarator (NULL_TREE), specs,\n \t\t\t   NULL_TREE, &attrs);\n \t  if (ret)\n \t    decl_attributes (&ret, attrs, 0);\n@@ -2003,7 +2005,8 @@ c_parser_struct_declaration (c_parser *parser)\n \t    }\n \t  if (c_parser_next_token_is_keyword (parser, RID_ATTRIBUTE))\n \t    postfix_attrs = c_parser_attributes (parser);\n-\t  d = grokfield (declarator, specs, width, &all_prefix_attrs);\n+\t  d = grokfield (c_parser_peek_token (parser)->location,\n+\t\t\t declarator, specs, width, &all_prefix_attrs);\n \t  decl_attributes (&d, chainon (postfix_attrs,\n \t\t\t\t\tall_prefix_attrs), 0);\n \t  TREE_CHAIN (d) = decls;"}, {"sha": "539254ec8f98a86a65ee3953b9005fe6fc056b8b", "filename": "gcc/c-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d10ed6cbc7248d756077c1e7dc3533257c44a4f/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d10ed6cbc7248d756077c1e7dc3533257c44a4f/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=3d10ed6cbc7248d756077c1e7dc3533257c44a4f", "patch": "@@ -475,8 +475,8 @@ extern tree finish_enum (tree, tree, tree);\n extern void finish_function (void);\n extern tree finish_struct (tree, tree, tree);\n extern struct c_arg_info *get_parm_info (bool);\n-extern tree grokfield (struct c_declarator *, struct c_declspecs *,\n-\t\t       tree, tree *);\n+extern tree grokfield (location_t, struct c_declarator *,\n+\t\t       struct c_declspecs *, tree, tree *);\n extern tree groktypename (struct c_type_name *);\n extern tree grokparm (const struct c_parm *);\n extern tree implicitly_declare (tree);"}, {"sha": "0aa749ee35f1316a8d90575798578ac159401564", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d10ed6cbc7248d756077c1e7dc3533257c44a4f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d10ed6cbc7248d756077c1e7dc3533257c44a4f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3d10ed6cbc7248d756077c1e7dc3533257c44a4f", "patch": "@@ -1,3 +1,13 @@\n+2008-08-21  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/20011008-1.c: Test column.\n+\t* gcc.dg/20080820.c: New.\n+\t* gcc.dg/fltconst-1.c: Test column.\n+\t* gcc.dg/cpp/cpp.exp: Add -fno-show-column.\n+\t* gcc.dg/cpp/trad/trad.exp: Same.\n+\t* lib/gcc.exp (gcc_target_compile): Remove -fno-show-column.\n+\t* lib/gcc-dg.exp (process-message): Handle columns.\n+\n 2008-08-21  Joseph Myers  <joseph@codesourcery.com>\n \n \t* g++.dg/opt/anchor1.C (foo): Return the return value of"}, {"sha": "e3991471a9f5dca9262b599ee8cc0ec401fe404d", "filename": "gcc/testsuite/gcc.dg/20011008-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d10ed6cbc7248d756077c1e7dc3533257c44a4f/gcc%2Ftestsuite%2Fgcc.dg%2F20011008-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d10ed6cbc7248d756077c1e7dc3533257c44a4f/gcc%2Ftestsuite%2Fgcc.dg%2F20011008-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20011008-1.c?ref=3d10ed6cbc7248d756077c1e7dc3533257c44a4f", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0\" } */\n+/* { dg-options \"-O0 -fshow-column\" } */\n \n-struct { int; int q; } a; /* { dg-warning \"does not declare anything\" } */\n+struct { int; int q; } a; /* { dg-warning \"13:does not declare anything\" } */\n struct { union {int x;}; int q; } b;\n struct { struct {int x;}; int q; } c;\n union { union {int x;}; int q; } d;"}, {"sha": "b9dd8a7c89700f5d6ca14c9b9509db47929bd31b", "filename": "gcc/testsuite/gcc.dg/20080820.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d10ed6cbc7248d756077c1e7dc3533257c44a4f/gcc%2Ftestsuite%2Fgcc.dg%2F20080820.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d10ed6cbc7248d756077c1e7dc3533257c44a4f/gcc%2Ftestsuite%2Fgcc.dg%2F20080820.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20080820.c?ref=3d10ed6cbc7248d756077c1e7dc3533257c44a4f", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fshow-column -fms-extensions -pedantic\" } */\n+\n+struct { struct a { int x; }; int bar; } hot; /* { dg-warning \"29:ISO C doesn't support unnamed\" } */"}, {"sha": "1dc504e30ba8cc0d1fe1bdd128382d36f7ae6e0f", "filename": "gcc/testsuite/gcc.dg/cpp/cpp.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d10ed6cbc7248d756077c1e7dc3533257c44a4f/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcpp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d10ed6cbc7248d756077c1e7dc3533257c44a4f/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcpp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcpp.exp?ref=3d10ed6cbc7248d756077c1e7dc3533257c44a4f", "patch": "@@ -37,7 +37,7 @@ dg-init\n \n # Main loop.\n dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.{c,S} ]] \\\n-\t\"\" $DEFAULT_CFLAGS\n+\t\"-fno-show-column\" $DEFAULT_CFLAGS\n \n # All done.\n dg-finish"}, {"sha": "22225e51915056ba69aa16b9efd7baf4a7ffd954", "filename": "gcc/testsuite/gcc.dg/cpp/trad/trad.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d10ed6cbc7248d756077c1e7dc3533257c44a4f/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Ftrad.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d10ed6cbc7248d756077c1e7dc3533257c44a4f/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Ftrad.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Ftrad.exp?ref=3d10ed6cbc7248d756077c1e7dc3533257c44a4f", "patch": "@@ -37,7 +37,7 @@ dg-init\n \n # Main loop.\n dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \\\n-\t\"\" $DEFAULT_TRADCPPFLAGS\n+\t\"-fno-show-column\" $DEFAULT_TRADCPPFLAGS\n \n # All done.\n dg-finish"}, {"sha": "85e1d34a583488663cfcd932c096be9c82e36b03", "filename": "gcc/testsuite/gcc.dg/fltconst-1.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d10ed6cbc7248d756077c1e7dc3533257c44a4f/gcc%2Ftestsuite%2Fgcc.dg%2Ffltconst-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d10ed6cbc7248d756077c1e7dc3533257c44a4f/gcc%2Ftestsuite%2Fgcc.dg%2Ffltconst-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffltconst-1.c?ref=3d10ed6cbc7248d756077c1e7dc3533257c44a4f", "patch": "@@ -1,16 +1,16 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99\" } */\n \n-double a = 1.ld;\t/* { dg-error \"invalid suffix\" } */\n-double b = 1.fd;\t/* { dg-error \"invalid suffix\" } */\n-double c = 1.di;\t/* { dg-error \"invalid suffix\" } */\n-double d = 1.dj;\t/* { dg-error \"invalid suffix\" } */\n-double e = 1.id;\t/* { dg-error \"invalid suffix\" } */\n-double f = 1.jd;\t/* { dg-error \"invalid suffix\" } */\n-double g = 1.ddd;\t/* { dg-error \"invalid suffix\" } */\n-double h = 1.ldd;\t/* { dg-error \"invalid suffix\" } */\n-double i = 1.dld;\t/* { dg-error \"invalid suffix\" } */\n-double j = 1.ddl;\t/* { dg-error \"invalid suffix\" } */\n-double k = 1.fdd;\t/* { dg-error \"invalid suffix\" } */\n-double l = 1.dfd;\t/* { dg-error \"invalid suffix\" } */\n-double m = 1.ddf;\t/* { dg-error \"invalid suffix\" } */\n+double a = 1.ld;\t/* { dg-error \"12:invalid suffix\" } */\n+double b = 1.fd;\t/* { dg-error \"12:invalid suffix\" } */\n+double c = 1.di;\t/* { dg-error \"12:invalid suffix\" } */\n+double d = 1.dj;\t/* { dg-error \"12:invalid suffix\" } */\n+double e = 1.id;\t/* { dg-error \"12:invalid suffix\" } */\n+double f = 1.jd;\t/* { dg-error \"12:invalid suffix\" } */\n+double g = 1.ddd;\t/* { dg-error \"12:invalid suffix\" } */\n+double h = 1.ldd;\t/* { dg-error \"12:invalid suffix\" } */\n+double i = 1.dld;\t/* { dg-error \"12:invalid suffix\" } */\n+double j = 1.ddl;\t/* { dg-error \"12:invalid suffix\" } */\n+double k = 1.fdd;\t/* { dg-error \"12:invalid suffix\" } */\n+double l = 1.dfd;\t/* { dg-error \"12:invalid suffix\" } */\n+double m = 1.ddf;\t/* { dg-error \"12:invalid suffix\" } */"}, {"sha": "1497ce38ed97547fc1e653cfe9d025ea02cd1bfe", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d10ed6cbc7248d756077c1e7dc3533257c44a4f/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d10ed6cbc7248d756077c1e7dc3533257c44a4f/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=3d10ed6cbc7248d756077c1e7dc3533257c44a4f", "patch": "@@ -636,7 +636,18 @@ proc process-message { msgproc msgprefix dgargs } {\n     # it match a single line.\n     set newentry [lindex ${dg-messages} end]\n     set expmsg [lindex $newentry 2]\n-    set expmsg \"$msgprefix\\[^\\n]*$expmsg\"\n+\n+    # If we have a column...\n+    if [regexp \"^(\\[0-9\\]+):\" $expmsg \"\" column] {\n+\t# Remove \"COLUMN:\"\n+\tregsub \"^\\[0-9\\]+:\" $expmsg \"\" expmsg\n+\n+\t# Include the column in the search expression.\n+\tset expmsg \"$column: $msgprefix\\[^\\n]*$expmsg\"\n+    } else {\n+\tset expmsg \"$msgprefix\\[^\\n]*$expmsg\"\n+    }\n+\n     set newentry [lreplace $newentry 2 2 $expmsg]\n     set dg-messages [lreplace ${dg-messages} end end $newentry]\n     verbose \"process-message:\\n${dg-messages}\" 2"}, {"sha": "5985ce061d7b2f33c93b88d50e729c9fb4b01f57", "filename": "gcc/testsuite/lib/gcc.exp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d10ed6cbc7248d756077c1e7dc3533257c44a4f/gcc%2Ftestsuite%2Flib%2Fgcc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d10ed6cbc7248d756077c1e7dc3533257c44a4f/gcc%2Ftestsuite%2Flib%2Fgcc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc.exp?ref=3d10ed6cbc7248d756077c1e7dc3533257c44a4f", "patch": "@@ -150,7 +150,6 @@ proc gcc_target_compile { source dest type options } {\n     if [target_info exists gcc,timeout] {\n \tlappend options \"timeout=[target_info gcc,timeout]\"\n     }\n-    lappend options \"additional_flags=-fno-show-column\"\n     lappend options \"compiler=$GCC_UNDER_TEST\"\n     set options [dg-additional-files-options $options $source]\n     return [target_compile $source $dest $type $options]"}]}