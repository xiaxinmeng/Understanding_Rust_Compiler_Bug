{"sha": "141a25c268513da985b10d374df46f006412a0c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQxYTI1YzI2ODUxM2RhOTg1YjEwZDM3NGRmNDZmMDA2NDEyYTBjNw==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2012-02-18T02:32:38Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2012-02-18T02:32:38Z"}, "message": "invoke.texi: Minor copy-edits to bring into conformance with GCC coding conventions.\n\n2012-02-17  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/invoke.texi: Minor copy-edits to bring into conformance with\n\tGCC coding conventions.\n\nFrom-SVN: r184367", "tree": {"sha": "06a2fc623ff8167df42c0887c069fa8efede5bb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06a2fc623ff8167df42c0887c069fa8efede5bb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/141a25c268513da985b10d374df46f006412a0c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/141a25c268513da985b10d374df46f006412a0c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/141a25c268513da985b10d374df46f006412a0c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/141a25c268513da985b10d374df46f006412a0c7/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d46bf05387ab101906629b706336868503305bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d46bf05387ab101906629b706336868503305bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d46bf05387ab101906629b706336868503305bb"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "feaea56cc96d16ea76c6b944a809482f8c14410c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/141a25c268513da985b10d374df46f006412a0c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/141a25c268513da985b10d374df46f006412a0c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=141a25c268513da985b10d374df46f006412a0c7", "patch": "@@ -1,3 +1,8 @@\n+2012-02-17  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/invoke.texi: Minor copy-edits to bring into conformance with\n+\tGCC coding conventions.\n+\n 2012-02-17  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* doc/invoke.texi: Consistently hyphenate \"big-endian\"/\"little-endian\""}, {"sha": "614fdd5048fabca43a89258c7e3b4df2f756bd5e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/141a25c268513da985b10d374df46f006412a0c7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/141a25c268513da985b10d374df46f006412a0c7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=141a25c268513da985b10d374df46f006412a0c7", "patch": "@@ -2128,11 +2128,11 @@ This information is generally only useful to the G++ development team.\n @item -fstrict-enums\n @opindex fstrict-enums\n Allow the compiler to optimize using the assumption that a value of\n-enumeration type can only be one of the values of the enumeration (as\n+enumerated type can only be one of the values of the enumeration (as\n defined in the C++ standard; basically, a value that can be\n represented in the minimum number of bits needed to represent all the\n enumerators).  This assumption may not be valid if the program uses a\n-cast to convert an arbitrary integer value to the enumeration type.\n+cast to convert an arbitrary integer value to the enumerated type.\n \n @item -ftemplate-depth=@var{n}\n @opindex ftemplate-depth\n@@ -3738,20 +3738,20 @@ Possibly useful when higher levels\n do not warn but -fstrict-aliasing still breaks the code, as it has very few\n false negatives.  However, it has many false positives.\n Warns for all pointer conversions between possibly incompatible types,\n-even if never dereferenced.  Runs in the frontend only.\n+even if never dereferenced.  Runs in the front end only.\n \n Level 2: Aggressive, quick, not too precise.\n May still have many false positives (not as many as level 1 though),\n and few false negatives (but possibly more than level 1).\n Unlike level 1, it only warns when an address is taken.  Warns about\n-incomplete types.  Runs in the frontend only.\n+incomplete types.  Runs in the front end only.\n \n Level 3 (default for @option{-Wstrict-aliasing}):\n Should have very few false positives and few false\n negatives.  Slightly slower than levels 1 or 2 when optimization is enabled.\n-Takes care of the common pun+dereference pattern in the frontend:\n+Takes care of the common pun+dereference pattern in the front end:\n @code{*(int*)&some_float}.\n-If optimization is enabled, it also runs in the backend, where it deals\n+If optimization is enabled, it also runs in the back end, where it deals\n with multiple statement cases using flow-sensitive points-to information.\n Only warns when the converted pointer is dereferenced.\n Does not warn about incomplete types.\n@@ -4212,7 +4212,7 @@ while} statement.  This warning is also enabled by @option{-Wextra}.\n @item -Wenum-compare\n @opindex Wenum-compare\n @opindex Wno-enum-compare\n-Warn about a comparison between values of different enum types. In C++\n+Warn about a comparison between values of different enumerated types. In C++\n this warning is enabled by default.  In C this warning is enabled by\n @option{-Wall}.\n \n@@ -4223,7 +4223,7 @@ Warn if a @code{goto} statement or a @code{switch} statement jumps\n forward across the initialization of a variable, or jumps backward to a\n label after the variable has been initialized.  This only warns about\n variables that are initialized when they are declared.  This warning is\n-only supported for C and Objective C; in C++ this sort of branch is an\n+only supported for C and Objective-C; in C++ this sort of branch is an\n error in any case.\n \n @option{-Wjump-misses-init} is included in @option{-Wc++-compat}.  It\n@@ -5432,7 +5432,7 @@ Dump after post-reload optimizations.\n \n @itemx -fdump-rtl-pro_and_epilogue\n @opindex fdump-rtl-pro_and_epilogue\n-Dump after generating the function pro and epilogues.\n+Dump after generating the function prologues and epilogues.\n \n @item -fdump-rtl-regmove\n @opindex fdump-rtl-regmove\n@@ -8599,7 +8599,7 @@ The limit specifying really large functions.  For functions larger than this\n limit after inlining, inlining is constrained by\n @option{--param large-function-growth}.  This parameter is useful primarily\n to avoid extreme compilation time caused by non-linear algorithms used by the\n-backend.\n+back end.\n The default value is 2700.\n \n @item large-function-growth\n@@ -8716,7 +8716,7 @@ of huge functions.  The default value is 30.\n \n @item max-tail-merge-comparisons\n The maximum amount of similar bbs to compare a bb with.  This is used to\n-avoid quadratic behaviour in tree tail merging.  The default value is 10.\n+avoid quadratic behavior in tree tail merging.  The default value is 10.\n \n @item max-tail-merge-iterations\n The maximum amount of iterations of the pass over the function.  This is used to\n@@ -10585,7 +10585,7 @@ configurations this option is meaningless.\n \n @item -mno-sched-prolog\n @opindex mno-sched-prolog\n-Prevent the reordering of instructions in the function prolog, or the\n+Prevent the reordering of instructions in the function prologue, or the\n merging of those instruction with the instructions in the function's\n body.  This means that all functions will start with a recognizable set\n of instructions (or in fact one of a choice from a small set of\n@@ -10666,7 +10666,7 @@ See @option{-mtune} for more information.\n \n @option{-mcpu=native} causes the compiler to auto-detect the CPU\n of the build computer.  At present, this feature is only supported on\n-Linux, and not all architectures are recognised.  If the auto-detect is\n+Linux, and not all architectures are recognized.  If the auto-detect is\n unsuccessful the option has no effect.\n \n @item -mtune=@var{name}\n@@ -10689,7 +10689,7 @@ this option may change in future GCC versions as CPU models come and go.\n \n @option{-mtune=native} causes the compiler to auto-detect the CPU\n of the build computer.  At present, this feature is only supported on\n-Linux, and not all architectures are recognised.  If the auto-detect is\n+Linux, and not all architectures are recognized.  If the auto-detect is\n unsuccessful the option has no effect.\n \n @item -march=@var{name}\n@@ -10707,7 +10707,7 @@ of the @option{-mcpu=} option.  Permissible names are: @samp{armv2},\n \n @option{-march=native} causes the compiler to auto-detect the architecture\n of the build computer.  At present, this feature is only supported on\n-Linux, and not all architectures are recognised.  If the auto-detect is\n+Linux, and not all architectures are recognized.  If the auto-detect is\n unsuccessful the option has no effect.\n \n @item -mfpu=@var{name}\n@@ -11210,7 +11210,7 @@ The built-in macros' names follow\n the scheme @code{__AVR_@var{Device}__} where @var{Device} is\n the device name as from the AVR user manual. The difference between\n @var{Device} in the built-in macro and @var{device} in\n-@code{-mmcu=@var{device}} is that the latter is always lower case.\n+@code{-mmcu=@var{device}} is that the latter is always lowercase.\n \n @item __AVR_HAVE_RAMPZ__\n @item __AVR_HAVE_ELPM__\n@@ -17286,7 +17286,7 @@ could result in slower and/or larger code if variables which once\n could have been held in the reserved register are now pushed onto the\n stack.\n \n-Note, common variables (variables that have not been initialised) and\n+Note, common variables (variables that have not been initialized) and\n constants are not placed into the small data area as they are assigned\n to other sections in the output executable.\n \n@@ -18848,9 +18848,9 @@ it.\n @table @gcctabopt\n @item -fbounds-check\n @opindex fbounds-check\n-For front-ends that support it, generate additional code to check that\n+For front ends that support it, generate additional code to check that\n indices used to access arrays are within the declared range.  This is\n-currently only supported by the Java and Fortran front-ends, where\n+currently only supported by the Java and Fortran front ends, where\n this option defaults to true and false respectively.\n \n @item -ftrapv\n@@ -18864,7 +18864,7 @@ This option instructs the compiler to assume that signed arithmetic\n overflow of addition, subtraction and multiplication wraps around\n using twos-complement representation.  This flag enables some optimizations\n and disables others.  This option is enabled by default for the Java\n-front-end, as required by the Java language specification.\n+front end, as required by the Java language specification.\n \n @item -fexceptions\n @opindex fexceptions\n@@ -19279,7 +19279,7 @@ The resulting program has a discontiguous stack which can only\n overflow if the program is unable to allocate any more memory.  This\n is most useful when running threaded programs, as it is no longer\n necessary to calculate a good stack size to use for each thread.  This\n-is currently only implemented for the i386 and x86_64 backends running\n+is currently only implemented for the i386 and x86_64 back ends running\n GNU/Linux.\n \n When code compiled with @option{-fsplit-stack} calls code compiled\n@@ -19381,20 +19381,20 @@ is at @uref{http://gcc.gnu.org/@/wiki/@/Visibility}.\n \n @item -fstrict-volatile-bitfields\n @opindex fstrict-volatile-bitfields\n-This option should be used if accesses to volatile bitfields (or other\n+This option should be used if accesses to volatile bit-fields (or other\n structure fields, although the compiler usually honors those types\n anyway) should use a single access of the width of the\n field's type, aligned to a natural alignment if possible.  For\n example, targets with memory-mapped peripheral registers might require\n all such accesses to be 16 bits wide; with this flag the user could\n-declare all peripheral bitfields as ``unsigned short'' (assuming short\n+declare all peripheral bit-fields as ``unsigned short'' (assuming short\n is 16 bits on these targets) to force GCC to use 16-bit accesses\n instead of, perhaps, a more efficient 32-bit access.\n \n If this option is disabled, the compiler will use the most efficient\n instruction.  In the previous example, that might be a 32-bit load\n instruction, even though that will access bytes that do not contain\n-any portion of the bitfield, or memory-mapped registers unrelated to\n+any portion of the bit-field, or memory-mapped registers unrelated to\n the one being updated.\n \n If the target requires strict alignment, and honoring the field"}]}