{"sha": "a48e3dd10e2e898742f2a730b8307b73b1a23022", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ4ZTNkZDEwZTJlODk4NzQyZjJhNzMwYjgzMDdiNzNiMWEyMzAyMg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-08-18T15:13:49Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-08-18T15:13:49Z"}, "message": "c1x-uni-string-1.c, [...]: New tests.\n\ngcc/testsuite:\n\t* gcc.dg/c1x-uni-string-1.c, gcc.dg/c1x-uni-string-2.c: New tests.\n\nlibcpp:\n\t* include/cpplib.h (struct cpp_options): Add rliterals.\n\t* init.c  (struct lang_flags, lang_defaults): Add rliterals.\n\t(cpp_set_lang): Set rliterals option.\n\t(cpp_init_builtins): Define __STDC_UTF_16__ and __STDC_UTF_32__.\n\t* lex.c (_cpp_lex_direct): Only accept raw strings if rliterals.\n\nFrom-SVN: r177868", "tree": {"sha": "08a78c5cfab58cc36bb826b78a1902d8f7e41149", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08a78c5cfab58cc36bb826b78a1902d8f7e41149"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a48e3dd10e2e898742f2a730b8307b73b1a23022", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a48e3dd10e2e898742f2a730b8307b73b1a23022", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a48e3dd10e2e898742f2a730b8307b73b1a23022", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a48e3dd10e2e898742f2a730b8307b73b1a23022/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b6fa7a5c6e84489d6be9012163c9923cbb9a95c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b6fa7a5c6e84489d6be9012163c9923cbb9a95c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b6fa7a5c6e84489d6be9012163c9923cbb9a95c"}], "stats": {"total": 187, "additions": 167, "deletions": 20}, "files": [{"sha": "d8f7f1140ef3f94ff9da6e56c6b18dcffb589856", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a48e3dd10e2e898742f2a730b8307b73b1a23022/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a48e3dd10e2e898742f2a730b8307b73b1a23022/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a48e3dd10e2e898742f2a730b8307b73b1a23022", "patch": "@@ -1,3 +1,7 @@\n+2011-08-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c1x-uni-string-1.c, gcc.dg/c1x-uni-string-2.c: New tests.\n+\n 2011-08-18  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/18918"}, {"sha": "30a98c1d669b3e04ba4376b923bc734cddd2cc9b", "filename": "gcc/testsuite/gcc.dg/c1x-uni-string-1.c", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a48e3dd10e2e898742f2a730b8307b73b1a23022/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-uni-string-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a48e3dd10e2e898742f2a730b8307b73b1a23022/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-uni-string-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-uni-string-1.c?ref=a48e3dd10e2e898742f2a730b8307b73b1a23022", "patch": "@@ -0,0 +1,112 @@\n+/* Test Unicode strings in C1X.  Test valid code.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c1x -pedantic-errors\" } */\n+\n+/* More thorough tests are in c-c++-common/raw-string-*.c; this test\n+   verifies the particular subset (Unicode but not raw strings) that\n+   is in C1X.  */\n+\n+typedef __CHAR16_TYPE__ char16_t;\n+typedef __CHAR32_TYPE__ char32_t;\n+typedef __SIZE_TYPE__ size_t;\n+\n+extern void abort (void);\n+extern void exit (int);\n+extern int memcmp (const void *, const void *, size_t);\n+\n+#define R \"(R)\"\n+#define u8R \"(u8R)\"\n+#define uR \"(uR)\"\n+#define UR \"(UR)\"\n+#define LR \"(LR)\"\n+#define u8 randomu8\n+#define u randomu\n+#define U randomU\n+\n+const char su8[] = u8\"a\\u010d\";\n+const char su8a[] = \"a\\xc4\\x8d\";\n+\n+const char16_t su16[] = u\"\\u0567\";\n+const char16_t su16a[] = { 0x0567, 0 };\n+\n+const char32_t su32[] = U\"\\u0123\";\n+const char32_t su32a[] = { 0x0123, 0 };\n+\n+const char tu[] = R\"a\";\n+const char tua[] = \"(R)a\";\n+\n+const char tu8[] = u8R\"b\";\n+const char tu8a[] = \"(u8R)b\";\n+\n+const char tu16[] = uR\"c\";\n+const char tu16a[] = \"(uR)c\";\n+\n+const char tu32[] = UR\"d\";\n+const char tu32a[] = \"(UR)d\";\n+\n+const char tl[] = LR\"e\";\n+const char tla[] = \"(LR)e\";\n+\n+#define str(x) #x\n+const char ts[] = str(u\"a\" U\"b\" u8\"c\");\n+const char tsa[] = \"u\\\"a\\\" U\\\"b\\\" u8\\\"c\\\"\";\n+\n+/* GCC always uses UTF-16 and UTF-32 for char16_t and char32_t.  */\n+#ifndef __STDC_UTF_16__\n+#error \"__STDC_UTF_16__ not defined\"\n+#endif\n+#ifndef __STDC_UTF_32__\n+#error \"__STDC_UTF_32__ not defined\"\n+#endif\n+#define xstr(x) str(x)\n+const char tm16[] = xstr(__STDC_UTF_16__);\n+const char tm16a[] = \"1\";\n+const char tm32[] = xstr(__STDC_UTF_32__);\n+const char tm32a[] = \"1\";\n+\n+int\n+main (void)\n+{\n+  if (sizeof (su8) != sizeof (su8a)\n+      || memcmp (su8, su8a, sizeof (su8)) != 0)\n+    abort ();\n+  if (sizeof (su16) != sizeof (su16a)\n+      || memcmp (su16, su16a, sizeof (su16)) != 0)\n+    abort ();\n+  if (sizeof (su32) != sizeof (su32a)\n+      || memcmp (su32, su32a, sizeof (su32)) != 0)\n+    abort ();\n+  if (sizeof (tu) != sizeof (tua)\n+      || memcmp (tu, tua, sizeof (tu)) != 0)\n+    abort ();\n+  if (sizeof (tu8) != sizeof (tu8a)\n+      || memcmp (tu8, tu8a, sizeof (tu8)) != 0)\n+    abort ();\n+  if (sizeof (tu16) != sizeof (tu16a)\n+      || memcmp (tu16, tu16a, sizeof (tu16)) != 0)\n+    abort ();\n+  if (sizeof (tu32) != sizeof (tu32a)\n+      || memcmp (tu32, tu32a, sizeof (tu32)) != 0)\n+    abort ();\n+  if (sizeof (tl) != sizeof (tla)\n+      || memcmp (tl, tla, sizeof (tl)) != 0)\n+    abort ();\n+  if (sizeof (ts) != sizeof (tsa)\n+      || memcmp (ts, tsa, sizeof (ts)) != 0)\n+    abort ();\n+  if (sizeof (tm16) != sizeof (tm16a)\n+      || memcmp (tm16, tm16a, sizeof (tm16)) != 0)\n+    abort ();\n+  if (sizeof (tm32) != sizeof (tm32a)\n+      || memcmp (tm32, tm32a, sizeof (tm32)) != 0)\n+    abort ();\n+  if (u'\\u0123' != 0x0123)\n+    abort ();\n+  if (U'\\u0456' != 0x0456)\n+    abort ();\n+#undef u8\n+#define u8\n+  if (u8'a' != 'a')\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "698b0c1df39a7ad628fc9bac2cb4751b3c78c6a9", "filename": "gcc/testsuite/gcc.dg/c1x-uni-string-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a48e3dd10e2e898742f2a730b8307b73b1a23022/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-uni-string-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a48e3dd10e2e898742f2a730b8307b73b1a23022/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-uni-string-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-uni-string-2.c?ref=a48e3dd10e2e898742f2a730b8307b73b1a23022", "patch": "@@ -0,0 +1,8 @@\n+/* Test Unicode strings in C1X.  Test constraint.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c1x -pedantic-errors\" } */\n+\n+const void *p1 = L\"a\" u8\"b\"; /* { dg-error \"concatenation\" } */\n+const void *p2 = L\"a\" \"b\" u8\"c\"; /* { dg-error \"concatenation\" } */\n+const void *p3 = u8\"a\" L\"b\"; /* { dg-error \"concatenation\" } */\n+const void *p4 = u8\"a\" \"b\" L\"c\"; /* { dg-error \"concatenation\" } */"}, {"sha": "ad51473536686108157eb27fa0a6acd5c8017fa9", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a48e3dd10e2e898742f2a730b8307b73b1a23022/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a48e3dd10e2e898742f2a730b8307b73b1a23022/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=a48e3dd10e2e898742f2a730b8307b73b1a23022", "patch": "@@ -1,3 +1,11 @@\n+2011-08-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* include/cpplib.h (struct cpp_options): Add rliterals.\n+\t* init.c  (struct lang_flags, lang_defaults): Add rliterals.\n+\t(cpp_set_lang): Set rliterals option.\n+\t(cpp_init_builtins): Define __STDC_UTF_16__ and __STDC_UTF_32__.\n+\t* lex.c (_cpp_lex_direct): Only accept raw strings if rliterals.\n+\n 2011-08-15  Gabriel Charette  <gchare@google.com>\n \n \t* include/line-map.h (LINEMAP_POSITION_FOR_COLUMN): Remove."}, {"sha": "30b1e983c4afa661db8bfb0aee53fea039de6973", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a48e3dd10e2e898742f2a730b8307b73b1a23022/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a48e3dd10e2e898742f2a730b8307b73b1a23022/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=a48e3dd10e2e898742f2a730b8307b73b1a23022", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for CPP library.\n    Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,\n-   2004, 2005, 2007, 2008, 2009, 2010\n+   2004, 2005, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Written by Per Bothner, 1994-95.\n \n@@ -315,6 +315,10 @@ struct cpp_options\n   /* Nonzero means process u/U prefix literals (UTF-16/32).  */\n   unsigned char uliterals;\n \n+  /* Nonzero means process r/R rax strings.  If this is set, uliterals\n+     must be set as well.  */\n+  unsigned char rliterals;\n+\n   /* Nonzero means print names of header files (-H).  */\n   unsigned char print_include_names;\n "}, {"sha": "1cbb9dda2f05ffe3b453440dc87bb85aa2f60daf", "filename": "libcpp/init.c", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a48e3dd10e2e898742f2a730b8307b73b1a23022/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a48e3dd10e2e898742f2a730b8307b73b1a23022/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=a48e3dd10e2e898742f2a730b8307b73b1a23022", "patch": "@@ -1,7 +1,7 @@\n /* CPP Library.\n    Copyright (C) 1986, 1987, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n    1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008,\n-   2009, 2010 Free Software Foundation, Inc.\n+   2009, 2010, 2011 Free Software Foundation, Inc.\n    Contributed by Per Bothner, 1994-95.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -79,22 +79,23 @@ struct lang_flags\n   char cplusplus_comments;\n   char digraphs;\n   char uliterals;\n+  char rliterals;\n };\n \n static const struct lang_flags lang_defaults[] =\n-{ /*              c99 c++ xnum xid std  //   digr ulit */\n-  /* GNUC89   */  { 0,  0,  1,   0,  0,   1,   1,   0 },\n-  /* GNUC99   */  { 1,  0,  1,   0,  0,   1,   1,   1 },\n-  /* GNUC1X   */  { 1,  0,  1,   0,  0,   1,   1,   1 },\n-  /* STDC89   */  { 0,  0,  0,   0,  1,   0,   0,   0 },\n-  /* STDC94   */  { 0,  0,  0,   0,  1,   0,   1,   0 },\n-  /* STDC99   */  { 1,  0,  1,   0,  1,   1,   1,   0 },\n-  /* STDC1X   */  { 1,  0,  1,   0,  1,   1,   1,   0 },\n-  /* GNUCXX   */  { 0,  1,  1,   0,  0,   1,   1,   0 },\n-  /* CXX98    */  { 0,  1,  1,   0,  1,   1,   1,   0 },\n-  /* GNUCXX0X */  { 1,  1,  1,   0,  0,   1,   1,   1 },\n-  /* CXX0X    */  { 1,  1,  1,   0,  1,   1,   1,   1 },\n-  /* ASM      */  { 0,  0,  1,   0,  0,   1,   0,   0 }\n+{ /*              c99 c++ xnum xid std  //   digr ulit rlit */\n+  /* GNUC89   */  { 0,  0,  1,   0,  0,   1,   1,   0,   0 },\n+  /* GNUC99   */  { 1,  0,  1,   0,  0,   1,   1,   1,   1 },\n+  /* GNUC1X   */  { 1,  0,  1,   0,  0,   1,   1,   1,   1 },\n+  /* STDC89   */  { 0,  0,  0,   0,  1,   0,   0,   0,   0 },\n+  /* STDC94   */  { 0,  0,  0,   0,  1,   0,   1,   0,   0 },\n+  /* STDC99   */  { 1,  0,  1,   0,  1,   1,   1,   0,   0 },\n+  /* STDC1X   */  { 1,  0,  1,   0,  1,   1,   1,   1,   0 },\n+  /* GNUCXX   */  { 0,  1,  1,   0,  0,   1,   1,   0,   0 },\n+  /* CXX98    */  { 0,  1,  1,   0,  1,   1,   1,   0,   0 },\n+  /* GNUCXX0X */  { 1,  1,  1,   0,  0,   1,   1,   1,   1 },\n+  /* CXX0X    */  { 1,  1,  1,   0,  1,   1,   1,   1,   1 },\n+  /* ASM      */  { 0,  0,  1,   0,  0,   1,   0,   0,   0 }\n   /* xid should be 1 for GNUC99, STDC99, GNUCXX, CXX98, GNUCXX0X, and\n      CXX0X when no longer experimental (when all uses of identifiers\n      in the compiler have been audited for correct handling of\n@@ -118,6 +119,7 @@ cpp_set_lang (cpp_reader *pfile, enum c_lang lang)\n   CPP_OPTION (pfile, cplusplus_comments)\t = l->cplusplus_comments;\n   CPP_OPTION (pfile, digraphs)\t\t\t = l->digraphs;\n   CPP_OPTION (pfile, uliterals)\t\t\t = l->uliterals;\n+  CPP_OPTION (pfile, rliterals)\t\t\t = l->rliterals;\n }\n \n /* Initialize library global state.  */\n@@ -464,6 +466,13 @@ cpp_init_builtins (cpp_reader *pfile, int hosted)\n   else if (CPP_OPTION (pfile, c99))\n     _cpp_define_builtin (pfile, \"__STDC_VERSION__ 199901L\");\n \n+  if (CPP_OPTION (pfile, uliterals)\n+      && !CPP_OPTION (pfile, cplusplus))\n+    {\n+      _cpp_define_builtin (pfile, \"__STDC_UTF_16__ 1\");\n+      _cpp_define_builtin (pfile, \"__STDC_UTF_32__ 1\");\n+    }\n+\n   if (hosted)\n     _cpp_define_builtin (pfile, \"__STDC_HOSTED__ 1\");\n   else"}, {"sha": "463b5c80eee4102dc559c391dd15842e9c334077", "filename": "libcpp/lex.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a48e3dd10e2e898742f2a730b8307b73b1a23022/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a48e3dd10e2e898742f2a730b8307b73b1a23022/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=a48e3dd10e2e898742f2a730b8307b73b1a23022", "patch": "@@ -1,6 +1,6 @@\n /* CPP Library - lexical analysis.\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n-   Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010,\n+   2011 Free Software Foundation, Inc.\n    Contributed by Per Bothner, 1994-95.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -2007,18 +2007,20 @@ _cpp_lex_direct (cpp_reader *pfile)\n     case 'R':\n       /* 'L', 'u', 'U', 'u8' or 'R' may introduce wide characters,\n \t wide strings or raw strings.  */\n-      if (c == 'L' || CPP_OPTION (pfile, uliterals))\n+      if (c == 'L' || CPP_OPTION (pfile, rliterals)\n+\t  || (c != 'R' && CPP_OPTION (pfile, uliterals)))\n \t{\n \t  if ((*buffer->cur == '\\'' && c != 'R')\n \t      || *buffer->cur == '\"'\n \t      || (*buffer->cur == 'R'\n \t\t  && c != 'R'\n \t\t  && buffer->cur[1] == '\"'\n-\t\t  && CPP_OPTION (pfile, uliterals))\n+\t\t  && CPP_OPTION (pfile, rliterals))\n \t      || (*buffer->cur == '8'\n \t\t  && c == 'u'\n \t\t  && (buffer->cur[1] == '\"'\n-\t\t      || (buffer->cur[1] == 'R' && buffer->cur[2] == '\"'))))\n+\t\t      || (buffer->cur[1] == 'R' && buffer->cur[2] == '\"'\n+\t\t\t  && CPP_OPTION (pfile, rliterals)))))\n \t    {\n \t      lex_string (pfile, result, buffer->cur - 1);\n \t      break;"}]}