{"sha": "1942e820686abbdd62515895e219476c26429945", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk0MmU4MjA2ODZhYmJkZDYyNTE1ODk1ZTIxOTQ3NmMyNjQyOTk0NQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-16T21:03:44Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-16T21:03:44Z"}, "message": "(rescan): Remove unnecessary comparisons of ibp to limit.\n\nFrom-SVN: r8469", "tree": {"sha": "c7043ba3ea1782ecbf8a4aabeec98e24ed383f9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7043ba3ea1782ecbf8a4aabeec98e24ed383f9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1942e820686abbdd62515895e219476c26429945", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1942e820686abbdd62515895e219476c26429945", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1942e820686abbdd62515895e219476c26429945", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1942e820686abbdd62515895e219476c26429945/comments", "author": null, "committer": null, "parents": [{"sha": "534bfae4adfc4c6de4e33494d854dc2c6947efa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/534bfae4adfc4c6de4e33494d854dc2c6947efa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/534bfae4adfc4c6de4e33494d854dc2c6947efa1"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "b33ae3af0c5e2f91b5058692f0b49187b6d06384", "filename": "gcc/cccp.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1942e820686abbdd62515895e219476c26429945/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1942e820686abbdd62515895e219476c26429945/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=1942e820686abbdd62515895e219476c26429945", "patch": "@@ -2880,7 +2880,7 @@ do { ip = &instack[indepth];\t\t\\\n \twhile (ibp < limit) {\n \t  switch (*ibp++) {\n \t  case '/':\n-\t    if (warn_comments && ibp < limit && *ibp == '*')\n+\t    if (warn_comments && *ibp == '*')\n \t      warning (\"`/*' within comment\");\n \t    break;\n \t  case '*':\n@@ -2928,8 +2928,8 @@ do { ip = &instack[indepth];\t\t\\\n \t as an identifier.  Periods also, for sake of \"3.e7\".  */\n \n       if (ident_length == 0) {\n-\twhile (ibp < limit) {\n-\t  while (ibp < limit && ibp[0] == '\\\\' && ibp[1] == '\\n') {\n+\tfor (;;) {\n+\t  while (ibp[0] == '\\\\' && ibp[1] == '\\n') {\n \t    ++ip->lineno;\n \t    ibp += 2;\n \t  }\n@@ -2942,11 +2942,11 @@ do { ip = &instack[indepth];\t\t\\\n \t  /* A sign can be part of a preprocessing number\n \t     if it follows an e.  */\n \t  if (c == 'e' || c == 'E') {\n-\t    while (ibp < limit && ibp[0] == '\\\\' && ibp[1] == '\\n') {\n+\t    while (ibp[0] == '\\\\' && ibp[1] == '\\n') {\n \t      ++ip->lineno;\n \t      ibp += 2;\n \t    }\n-\t    if (ibp < limit && (*ibp == '+' || *ibp == '-')) {\n+\t    if (*ibp == '+' || *ibp == '-') {\n \t      *obp++ = *ibp++;\n \t      /* But traditional C does not let the token go past the sign.  */\n \t      if (traditional)\n@@ -3204,7 +3204,7 @@ do { ip = &instack[indepth];\t\t\\\n \t\t      old_oln = op->lineno;\n \t\t    }\n \t\t    /* A comment: copy it unchanged or discard it.  */\n-\t\t    else if (*ibp == '/' && ibp+1 != limit && ibp[1] == '*') {\n+\t\t    else if (*ibp == '/' && ibp[1] == '*') {\n \t\t      if (put_out_comments) {\n \t\t\t*obp++ = '/';\n \t\t\t*obp++ = '*';"}]}