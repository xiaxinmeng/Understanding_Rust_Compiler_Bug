{"sha": "547513eeab951fddeb53baaa577de32dc8b779de", "node_id": "C_kwDOANBUbNoAKDU0NzUxM2VlYWI5NTFmZGRlYjUzYmFhYTU3N2RlMzJkYzhiNzc5ZGU", "commit": {"author": {"name": "Doug Rupp", "email": "rupp@adacore.com", "date": "2021-10-06T20:03:56Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-11T13:38:12Z"}, "message": "[Ada] Runtime transition: System.Threads\n\ngcc/ada/\n\n\t* libgnat/s-thread.ads: Fix comments.  Remove unused package\n\timports.\n\t(Thread_Body_Exception_Exit): Remove Exception_Occurrence\n\tparameter.\n\t(ATSD): Declare type locally.\n\t* libgnat/s-thread__ae653.adb: Fix comments.  Remove unused\n\tpackage imports.  Remove package references to Stack_Limit\n\tchecking.\n\t(Install_Handler): Remove.\n\t(Set_Sec_Stack): Likewise.\n\t(Thread_Body_Enter): Remove calls to Install_Handler and\n\tStack_Limit checking.\n\t(Thread_Body_Exception_Exit): Remove Exception_Occurrence\n\tparameter.\n\t(Init_RTS): Call local Get_Sec_Stack.  Remove call to\n\tInstall_Handler.  Remove references to accessors for\n\tGet_Sec_Stack and Set_Sec_Stack.  Remove OS check.\n\t(Set_Sec_Stack): Remove.", "tree": {"sha": "dc4f7aced4bff3fdb89195e78930549057954ea1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc4f7aced4bff3fdb89195e78930549057954ea1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/547513eeab951fddeb53baaa577de32dc8b779de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/547513eeab951fddeb53baaa577de32dc8b779de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/547513eeab951fddeb53baaa577de32dc8b779de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/547513eeab951fddeb53baaa577de32dc8b779de/comments", "author": {"login": "Cementitious", "id": 115579865, "node_id": "U_kgDOBuOb2Q", "avatar_url": "https://avatars.githubusercontent.com/u/115579865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cementitious", "html_url": "https://github.com/Cementitious", "followers_url": "https://api.github.com/users/Cementitious/followers", "following_url": "https://api.github.com/users/Cementitious/following{/other_user}", "gists_url": "https://api.github.com/users/Cementitious/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cementitious/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cementitious/subscriptions", "organizations_url": "https://api.github.com/users/Cementitious/orgs", "repos_url": "https://api.github.com/users/Cementitious/repos", "events_url": "https://api.github.com/users/Cementitious/events{/privacy}", "received_events_url": "https://api.github.com/users/Cementitious/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a59626c8b8497593145aa5969ca30cddaeaa8acd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a59626c8b8497593145aa5969ca30cddaeaa8acd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a59626c8b8497593145aa5969ca30cddaeaa8acd"}], "stats": {"total": 92, "additions": 14, "deletions": 78}, "files": [{"sha": "6508df50c3faf2c0e205b47c9c86b9ce55d8041f", "filename": "gcc/ada/libgnat/s-thread.ads", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/547513eeab951fddeb53baaa577de32dc8b779de/gcc%2Fada%2Flibgnat%2Fs-thread.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/547513eeab951fddeb53baaa577de32dc8b779de/gcc%2Fada%2Flibgnat%2Fs-thread.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-thread.ads?ref=547513eeab951fddeb53baaa577de32dc8b779de", "patch": "@@ -34,16 +34,13 @@\n \n --  This package is currently implemented for:\n \n---    VxWorks AE653 rts-cert\n---    VxWorks AE653 rts-full (not rts-kernel)\n+--    VxWorks7r2Cert Light\n \n-with Ada.Exceptions;\n with Ada.Unchecked_Conversion;\n \n with Interfaces.C;\n \n with System.Secondary_Stack;\n-with System.Soft_Links;\n \n package System.Threads is\n \n@@ -81,12 +78,15 @@ package System.Threads is\n    procedure Thread_Body_Leave;\n    --  Leave thread body (normally), see above for details\n \n-   procedure Thread_Body_Exceptional_Exit\n-     (EO : Ada.Exceptions.Exception_Occurrence);\n+   procedure Thread_Body_Exceptional_Exit;\n    --  Leave thread body (abnormally on exception), see above for details\n \n private\n \n-   type ATSD is new System.Soft_Links.TSD;\n+   type ATSD is record\n+      Sec_Stack_Ptr : SST.SS_Stack_Ptr;\n+      --  Pointer of the allocated secondary stack\n+\n+   end record;\n \n end System.Threads;"}, {"sha": "2282a66c87a2c0945a2a2c90eb9863cbd4ce8dd4", "filename": "gcc/ada/libgnat/s-thread__ae653.adb", "status": "modified", "additions": 7, "deletions": 71, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/547513eeab951fddeb53baaa577de32dc8b779de/gcc%2Fada%2Flibgnat%2Fs-thread__ae653.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/547513eeab951fddeb53baaa577de32dc8b779de/gcc%2Fada%2Flibgnat%2Fs-thread__ae653.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-thread__ae653.adb?ref=547513eeab951fddeb53baaa577de32dc8b779de", "patch": "@@ -29,44 +29,27 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This is the VxWorks 653 version of this package\n+--  This is the VxWorks7r2Cert Light version of this package\n \n pragma Restrictions (No_Tasking);\n---  The VxWorks 653 version of this package is intended only for programs\n---  which do not use Ada tasking. This restriction ensures that this\n---  will be checked by the binder.\n+--  The VxWorks7r2Cert Light version of this package is intended only\n+--  for programs which do not use Ada tasking. This restriction ensures\n+--  that this will be checked by the binder.\n \n with System.Storage_Elements; use System.Storage_Elements;\n-with System.OS_Versions; use System.OS_Versions;\n \n package body System.Threads is\n \n    use Interfaces.C;\n \n-   package SSL renames System.Soft_Links;\n-\n    Main_ATSD : aliased ATSD;\n    --  TSD for environment task\n \n    Current_ATSD : aliased System.Address := System.Null_Address;\n    pragma Thread_Local_Storage (Current_ATSD);\n    --  pragma TLS needed since TaskVarAdd no longer available\n \n-   --  Assume guard pages for Helix APEX partitions, but leave\n-   --  checking mechanism in for now, in case of surprises. ???\n-   Stack_Limit : Address;\n-   pragma Import (C, Stack_Limit, \"__gnat_stack_limit\");\n-\n-   type Set_Stack_Limit_Proc_Acc is access procedure;\n-   pragma Convention (C, Set_Stack_Limit_Proc_Acc);\n-\n-   Set_Stack_Limit_Hook : Set_Stack_Limit_Proc_Acc;\n-   pragma Import (C, Set_Stack_Limit_Hook, \"__gnat_set_stack_limit_hook\");\n-   --  Procedure to be called when a task is created to set stack limit if\n-   --  limit checking is used.\n-\n    --  VxWorks specific API\n-\n    ERROR : constant STATUS := Interfaces.C.int (-1);\n    OK    : constant STATUS := Interfaces.C.int (0);\n \n@@ -85,13 +68,8 @@ package body System.Threads is\n    --  It installs System.Threads versions of certain operations of the\n    --  run-time lib.\n \n-   procedure Install_Handler;\n-   pragma Import (C, Install_Handler, \"__gnat_install_handler\");\n-\n    function  Get_Sec_Stack return SST.SS_Stack_Ptr;\n \n-   procedure Set_Sec_Stack (Stack : SST.SS_Stack_Ptr);\n-\n    -----------------------\n    -- Thread_Body_Enter --\n    -----------------------\n@@ -108,27 +86,14 @@ package body System.Threads is\n       ATSD.Sec_Stack_Ptr := Sec_Stack_Ptr;\n       SST.SS_Init (ATSD.Sec_Stack_Ptr);\n       Current_ATSD := Process_ATSD_Address;\n-      Install_Handler;\n-\n-      --  Assume guard pages for Helix/Vx7, but leave in for now ???\n-      --  Initialize stack limit if needed.\n \n-      if Current_ATSD /= Main_ATSD'Address\n-        and then Set_Stack_Limit_Hook /= null\n-      then\n-         Set_Stack_Limit_Hook.all;\n-      end if;\n    end Thread_Body_Enter;\n \n    ----------------------------------\n    -- Thread_Body_Exceptional_Exit --\n    ----------------------------------\n \n-   procedure Thread_Body_Exceptional_Exit\n-     (EO : Ada.Exceptions.Exception_Occurrence)\n-   is\n-      pragma Unreferenced (EO);\n-\n+   procedure Thread_Body_Exceptional_Exit is\n    begin\n       --  No action for this target\n \n@@ -156,11 +121,8 @@ package body System.Threads is\n       pragma Assert (Result /= ERROR);\n \n    begin\n-      Main_ATSD.Sec_Stack_Ptr := SSL.Get_Sec_Stack_NT;\n+      Main_ATSD.Sec_Stack_Ptr := Get_Sec_Stack;\n       Current_ATSD := Main_ATSD'Address;\n-      Install_Handler;\n-      SSL.Get_Sec_Stack := Get_Sec_Stack'Access;\n-      SSL.Set_Sec_Stack := Set_Sec_Stack'Access;\n    end Init_RTS;\n \n    -------------------\n@@ -190,38 +152,12 @@ package body System.Threads is\n \n       Current_ATSD := To_Address (Integer_Address (T));\n \n-      --  The same issue applies to the task variable that contains the stack\n-      --  limit when that overflow checking mechanism is used instead of\n-      --  probing. If stack checking is enabled and limit checking is used,\n-      --  allocate the limit for this task. The environment task has this\n-      --  initialized by the binder-generated main when\n-      --  System.Stack_Check_Limits = True.\n-\n-      pragma Warnings (Off);\n-\n-      --  OS is a constant\n-      if OS /= VxWorks_653 and then Set_Stack_Limit_Hook /= null then\n-         --  Check that this is correct if limit checking left in. ???\n-         Stack_Limit := To_Address (Integer_Address (T));\n-      end if;\n-      pragma Warnings (On);\n-\n       return OK;\n    end Register;\n \n-   -------------------\n-   -- Set_Sec_Stack --\n-   -------------------\n-\n-   procedure Set_Sec_Stack (Stack : SST.SS_Stack_Ptr) is\n-      CTSD : constant ATSD_Access := From_Address (Current_ATSD);\n-   begin\n-      pragma Assert (CTSD /= null);\n-      CTSD.Sec_Stack_Ptr := Stack;\n-   end Set_Sec_Stack;\n-\n begin\n    --  Initialize run-time library\n \n    Init_RTS;\n+\n end System.Threads;"}]}