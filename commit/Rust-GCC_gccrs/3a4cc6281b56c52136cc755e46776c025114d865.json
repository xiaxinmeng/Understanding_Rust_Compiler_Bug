{"sha": "3a4cc6281b56c52136cc755e46776c025114d865", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E0Y2M2MjgxYjU2YzUyMTM2Y2M3NTVlNDY3NzZjMDI1MTE0ZDg2NQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-12-05T00:42:06Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-12-05T00:42:06Z"}, "message": "libstdc++: Implement spaceship for std::array (P1614R2)\n\nAs done for std::pair, this defines operator<=> as a non-member function\ntemplate and does not alter operator==, as expected to be proposed as\nthe resolution to an unpublished LWG issue.\n\nInstead of calling std::lexicographical_compare_three_way the <=>\noverload is implemented by hand to take advantage of the fact the\nelement types and array sizes are known to be the same.\n\n\t* include/bits/cpp_type_traits.h (__is_byte<char8_t>): Add\n\tspecialization.\n\t* include/std/array (operator<=>): Likewise.\n\t* testsuite/23_containers/array/comparison_operators/constexpr.cc:\n\tTest three-way comparisons and arrays of unsigned char.\n\t* testsuite/23_containers/array/tuple_interface/get_neg.cc: Adjust\n\tdg-error line numbers.\n\nFrom-SVN: r278981", "tree": {"sha": "204b53d72bcd8d72a429ccc276d959002b69f048", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/204b53d72bcd8d72a429ccc276d959002b69f048"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a4cc6281b56c52136cc755e46776c025114d865", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a4cc6281b56c52136cc755e46776c025114d865", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a4cc6281b56c52136cc755e46776c025114d865", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a4cc6281b56c52136cc755e46776c025114d865/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "880c7b8c2570544ae4218374688a10a98c9d6542", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/880c7b8c2570544ae4218374688a10a98c9d6542", "html_url": "https://github.com/Rust-GCC/gccrs/commit/880c7b8c2570544ae4218374688a10a98c9d6542"}], "stats": {"total": 65, "additions": 62, "deletions": 3}, "files": [{"sha": "ec5c0efa2b8e8b71da462806fadfe12235f5ffb7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4cc6281b56c52136cc755e46776c025114d865/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4cc6281b56c52136cc755e46776c025114d865/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3a4cc6281b56c52136cc755e46776c025114d865", "patch": "@@ -1,3 +1,13 @@\n+2019-12-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/cpp_type_traits.h (__is_byte<char8_t>): Add\n+\tspecialization.\n+\t* include/std/array (operator<=>): Likewise.\n+\t* testsuite/23_containers/array/comparison_operators/constexpr.cc:\n+\tTest three-way comparisons and arrays of unsigned char.\n+\t* testsuite/23_containers/array/tuple_interface/get_neg.cc: Adjust\n+\tdg-error line numbers.\n+\n 2019-12-03  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/stl_pair.h [__cpp_lib_three_way_comparison]"}, {"sha": "28180bfc06dbe30025312bda86d831492e1301ff", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4cc6281b56c52136cc755e46776c025114d865/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4cc6281b56c52136cc755e46776c025114d865/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=3a4cc6281b56c52136cc755e46776c025114d865", "patch": "@@ -411,6 +411,15 @@ __INT_N(__GLIBCXX_TYPE_INT_N_3)\n     };\n #endif // C++17\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  template<>\n+    struct __is_byte<char8_t>\n+    {\n+      enum { __value = 1 };\n+      typedef __true_type __type;\n+    };\n+#endif\n+\n   //\n   // Move iterator type\n   //"}, {"sha": "ad3f6518da23a3d0c69a003a21093b95c287b048", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4cc6281b56c52136cc755e46776c025114d865/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4cc6281b56c52136cc755e46776c025114d865/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=3a4cc6281b56c52136cc755e46776c025114d865", "patch": "@@ -253,6 +253,25 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n     { return std::equal(__one.begin(), __one.end(), __two.begin()); }\n \n+#if __cpp_lib_three_way_comparison && __cpp_lib_concepts\n+  template<typename _Tp, size_t _Nm>\n+    constexpr __detail::__synth3way_t<_Tp>\n+    operator<=>(const array<_Tp, _Nm>& __a, const array<_Tp, _Nm>& __b)\n+    {\n+      if constexpr (_Nm && __is_byte<_Tp>::__value)\n+\treturn __builtin_memcmp(__a.data(), __b.data(), _Nm) <=> 0;\n+      else\n+\t{\n+\t  for (size_t __i = 0; __i < _Nm; ++__i)\n+\t    {\n+\t      auto __c = __detail::__synth3way(__a[__i], __b[__i]);\n+\t      if (__c != 0)\n+\t\treturn __c;\n+\t    }\n+\t}\n+      return strong_ordering::equal;\n+    }\n+#else\n   template<typename _Tp, std::size_t _Nm>\n     _GLIBCXX20_CONSTEXPR\n     inline bool\n@@ -285,6 +304,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     inline bool\n     operator>=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n     { return !(__one < __two); }\n+#endif // three_way_comparison && concepts\n \n   // Specialized algorithms.\n   template<typename _Tp, std::size_t _Nm>"}, {"sha": "91a8a24b9e5890d45a32e965c2a06fa7bcb0eae5", "filename": "libstdc++-v3/testsuite/23_containers/array/comparison_operators/constexpr.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4cc6281b56c52136cc755e46776c025114d865/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcomparison_operators%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4cc6281b56c52136cc755e46776c025114d865/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcomparison_operators%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcomparison_operators%2Fconstexpr.cc?ref=3a4cc6281b56c52136cc755e46776c025114d865", "patch": "@@ -31,3 +31,23 @@ static_assert(a1 < a3);\n static_assert(a4 > a1);\n static_assert(a1 <= a3);\n static_assert(a4 >= a1);\n+static_assert(std::is_eq(a1 <=> a1));\n+static_assert(std::is_neq(a1 <=> a2));\n+static_assert(std::is_lt(a1 <=> a3));\n+static_assert(std::is_gt(a4 <=> a1));\n+\n+constexpr std::array<unsigned char, 3> a5{{1, 2, 3}};\n+constexpr std::array<unsigned char, 3> a6{{4, 5, 6}};\n+constexpr std::array<unsigned char, 3> a7{{1, 2, 4}};\n+constexpr std::array<unsigned char, 3> a8{{1, 3, 3}};\n+\n+static_assert(a5 == a5);\n+static_assert(a5 != a6);\n+static_assert(a5 < a7);\n+static_assert(a8 > a5);\n+static_assert(a5 <= a7);\n+static_assert(a8 >= a5);\n+static_assert(std::is_eq(a5 <=> a5));\n+static_assert(std::is_neq(a5 <=> a6));\n+static_assert(std::is_lt(a5 <=> a7));\n+static_assert(std::is_gt(a8 <=> a5));"}, {"sha": "7833748392a2f267adf73ed76eddb96c0303215b", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/get_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4cc6281b56c52136cc755e46776c025114d865/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4cc6281b56c52136cc755e46776c025114d865/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc?ref=3a4cc6281b56c52136cc755e46776c025114d865", "patch": "@@ -27,6 +27,6 @@ int n1 = std::get<1>(a);\n int n2 = std::get<1>(std::move(a));\n int n3 = std::get<1>(ca);\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 316 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 325 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 333 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 336 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 345 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 353 }"}]}