{"sha": "01f1c24e423755d237e6c13ff81da1356b153caa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFmMWMyNGU0MjM3NTVkMjM3ZTZjMTNmZjgxZGExMzU2YjE1M2NhYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-06-16T12:19:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-06-16T12:19:24Z"}, "message": "re PR tree-optimization/81090 ([graphite] ICE in loop_preheader_edge)\n\n2017-06-16  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/81090\n\t* passes.def (pass_record_bounds): Remove.\n\t* tree-pass.h (make_pass_record_bounds): Likewise.\n\t* tree-ssa-loop.c (pass_data_record_bounds, pass_record_bounds,\n\tmake_pass_record_bounds): Likewise.\n\t* tree-ssa-loop-ivcanon.c (canonicalize_induction_variables): Do\n\tnot free niter estimates at the beginning but at the end.\n\t* tree-scalar-evolution.c (scev_finalize): Free niter estimates.\n\n\t* gcc.dg/graphite/pr81090.c: New testcase.\n\nFrom-SVN: r249249", "tree": {"sha": "4e97df0e01a3410ea111bab38411be80a1de6d6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e97df0e01a3410ea111bab38411be80a1de6d6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01f1c24e423755d237e6c13ff81da1356b153caa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01f1c24e423755d237e6c13ff81da1356b153caa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01f1c24e423755d237e6c13ff81da1356b153caa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01f1c24e423755d237e6c13ff81da1356b153caa/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4317778a9b6213a97a3de5ffd77edf516592fb71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4317778a9b6213a97a3de5ffd77edf516592fb71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4317778a9b6213a97a3de5ffd77edf516592fb71"}], "stats": {"total": 96, "additions": 45, "deletions": 51}, "files": [{"sha": "b55b0cecd7a81642bc87d270f314813116c14d7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f1c24e423755d237e6c13ff81da1356b153caa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f1c24e423755d237e6c13ff81da1356b153caa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01f1c24e423755d237e6c13ff81da1356b153caa", "patch": "@@ -1,3 +1,14 @@\n+2017-06-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81090\n+\t* passes.def (pass_record_bounds): Remove.\n+\t* tree-pass.h (make_pass_record_bounds): Likewise.\n+\t* tree-ssa-loop.c (pass_data_record_bounds, pass_record_bounds,\n+\tmake_pass_record_bounds): Likewise.\n+\t* tree-ssa-loop-ivcanon.c (canonicalize_induction_variables): Do\n+\tnot free niter estimates at the beginning but at the end.\n+\t* tree-scalar-evolution.c (scev_finalize): Free niter estimates.\n+\n 2017-06-16  Richard Biener  <rguenther@suse.de>\n \n \t* tree-switch-conversion.c (emit_case_bit_tests): Adjust"}, {"sha": "c14f6b9f63c23dcc417cc561d7ee65060613eee5", "filename": "gcc/passes.def", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f1c24e423755d237e6c13ff81da1356b153caa/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f1c24e423755d237e6c13ff81da1356b153caa/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=01f1c24e423755d237e6c13ff81da1356b153caa", "patch": "@@ -276,7 +276,6 @@ along with GCC; see the file COPYING3.  If not see\n \t  /* All unswitching, final value replacement and splitting can expose\n \t     empty loops.  Remove them now.  */\n \t  NEXT_PASS (pass_cd_dce);\n-\t  NEXT_PASS (pass_record_bounds);\n \t  NEXT_PASS (pass_iv_canon);\n \t  NEXT_PASS (pass_loop_distribution);\n \t  NEXT_PASS (pass_copy_prop);"}, {"sha": "f6b56ad5742d6d2da0cb0bbe1aac85a1283491f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f1c24e423755d237e6c13ff81da1356b153caa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f1c24e423755d237e6c13ff81da1356b153caa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=01f1c24e423755d237e6c13ff81da1356b153caa", "patch": "@@ -1,3 +1,8 @@\n+2017-06-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81090\n+\t* gcc.dg/graphite/pr81090.c: New testcase.\n+\n 2017-06-16  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/80983"}, {"sha": "b5ebd43a91f5b6f230af02f3d043c89e4392b783", "filename": "gcc/testsuite/gcc.dg/graphite/pr81090.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f1c24e423755d237e6c13ff81da1356b153caa/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr81090.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f1c24e423755d237e6c13ff81da1356b153caa/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr81090.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr81090.c?ref=01f1c24e423755d237e6c13ff81da1356b153caa", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -floop-nest-optimize\" } */\n+\n+int x3, za;\n+int hg[1];\n+\n+void\n+yw (int dq)\n+{\n+  const int r7 = 2;\n+\n+  while (dq < 1)\n+    {\n+      for (x3 = 0; x3 < r7; ++x3)\n+\tfor (za = 0; za < r7; ++za)\n+\t  hg[1] = 0;\n+      ++dq;\n+    }\n+\n+  x3 = 0;\n+  while (x3 < r7)\n+    {\n+      ++x3;\n+      if (x3 == 0)\n+\tbreak;\n+    }\n+}"}, {"sha": "2863f769610891405d713fac049506b233d0830f", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f1c24e423755d237e6c13ff81da1356b153caa/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f1c24e423755d237e6c13ff81da1356b153caa/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=01f1c24e423755d237e6c13ff81da1356b153caa", "patch": "@@ -373,7 +373,6 @@ extern gimple_opt_pass *make_pass_predcom (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_iv_canon (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_scev_cprop (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_empty_loop (gcc::context *ctxt);\n-extern gimple_opt_pass *make_pass_record_bounds (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_graphite (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_graphite_transforms (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_if_conversion (gcc::context *ctxt);"}, {"sha": "8459793a01b390b2e76fc3d0573020167539aeda", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f1c24e423755d237e6c13ff81da1356b153caa/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f1c24e423755d237e6c13ff81da1356b153caa/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=01f1c24e423755d237e6c13ff81da1356b153caa", "patch": "@@ -3636,6 +3636,7 @@ scev_finalize (void)\n     return;\n   scalar_evolution_info->empty ();\n   scalar_evolution_info = NULL;\n+  free_numbers_of_iterations_estimates (cfun);\n }\n \n /* Returns true if the expression EXPR is considered to be too expensive"}, {"sha": "f4ebe4837e09f0b309289e2b80c5591d320e8d8d", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f1c24e423755d237e6c13ff81da1356b153caa/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f1c24e423755d237e6c13ff81da1356b153caa/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=01f1c24e423755d237e6c13ff81da1356b153caa", "patch": "@@ -1212,7 +1212,6 @@ canonicalize_induction_variables (void)\n   bool irred_invalidated = false;\n   bitmap loop_closed_ssa_invalidated = BITMAP_ALLOC (NULL);\n \n-  free_numbers_of_iterations_estimates (cfun);\n   estimate_numbers_of_iterations ();\n \n   FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n@@ -1230,6 +1229,7 @@ canonicalize_induction_variables (void)\n \n   /* Clean up the information about numbers of iterations, since brute force\n      evaluation could reveal new information.  */\n+  free_numbers_of_iterations_estimates (cfun);\n   scev_reset ();\n \n   if (!bitmap_empty_p (loop_closed_ssa_invalidated))"}, {"sha": "19a0f30c525cc98a0eb9ddd7c70712e88f94180c", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f1c24e423755d237e6c13ff81da1356b153caa/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f1c24e423755d237e6c13ff81da1356b153caa/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=01f1c24e423755d237e6c13ff81da1356b153caa", "patch": "@@ -459,54 +459,6 @@ make_pass_scev_cprop (gcc::context *ctxt)\n   return new pass_scev_cprop (ctxt);\n }\n \n-/* Record bounds on numbers of iterations of loops.  */\n-\n-namespace {\n-\n-const pass_data pass_data_record_bounds =\n-{\n-  GIMPLE_PASS, /* type */\n-  \"*record_bounds\", /* name */\n-  OPTGROUP_NONE, /* optinfo_flags */\n-  TV_TREE_LOOP_BOUNDS, /* tv_id */\n-  ( PROP_cfg | PROP_ssa ), /* properties_required */\n-  0, /* properties_provided */\n-  0, /* properties_destroyed */\n-  0, /* todo_flags_start */\n-  0, /* todo_flags_finish */\n-};\n-\n-class pass_record_bounds : public gimple_opt_pass\n-{\n-public:\n-  pass_record_bounds (gcc::context *ctxt)\n-    : gimple_opt_pass (pass_data_record_bounds, ctxt)\n-  {}\n-\n-  /* opt_pass methods: */\n-  virtual unsigned int execute (function *);\n-\n-}; // class pass_record_bounds\n-\n-unsigned int\n-pass_record_bounds::execute (function *fun)\n-{\n-  if (number_of_loops (fun) <= 1)\n-    return 0;\n-\n-  estimate_numbers_of_iterations ();\n-  scev_reset ();\n-  return 0;\n-}\n-\n-} // anon namespace\n-\n-gimple_opt_pass *\n-make_pass_record_bounds (gcc::context *ctxt)\n-{\n-  return new pass_record_bounds (ctxt);\n-}\n-\n /* Induction variable optimizations.  */\n \n namespace {"}]}