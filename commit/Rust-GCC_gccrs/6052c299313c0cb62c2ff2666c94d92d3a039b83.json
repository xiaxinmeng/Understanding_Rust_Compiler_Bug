{"sha": "6052c299313c0cb62c2ff2666c94d92d3a039b83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA1MmMyOTkzMTNjMGNiNjJjMmZmMjY2NmM5NGQ5MmQzYTAzOWI4Mw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-05-14T16:45:16Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-05-14T16:45:16Z"}, "message": "re PR fortran/49110 (Deferred-length character result triggers (false positive) error for pure procedures)\n\n2012-05-14  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/49110\n        PR fortran/51055\n        PR fortran/53329\n        * trans-expr.c (gfc_trans_assignment_1): Fix allocation\n        handling for assignment of function results to allocatable\n        deferred-length strings.\n        * trans-decl.c (gfc_create_string_length): For deferred-length\n        module variables, include module name in the assembler name.\n        (gfc_get_symbol_decl): Don't override the assembler name.\n\n2012-05-14  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/49110\n        PR fortran/51055\n        PR fortran/53329\n        * gfortran.dg/deferred_type_param_4.f90: New.\n        * gfortran.dg/deferred_type_param_6.f90: New.\n\nFrom-SVN: r187472", "tree": {"sha": "4ef2633dd8fd9a4ece6ecc704937dddc9c4cfd56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ef2633dd8fd9a4ece6ecc704937dddc9c4cfd56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6052c299313c0cb62c2ff2666c94d92d3a039b83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6052c299313c0cb62c2ff2666c94d92d3a039b83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6052c299313c0cb62c2ff2666c94d92d3a039b83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6052c299313c0cb62c2ff2666c94d92d3a039b83/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5bb53d1a1dc6cfa55cbca53cf72a8bdf017da834", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bb53d1a1dc6cfa55cbca53cf72a8bdf017da834", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bb53d1a1dc6cfa55cbca53cf72a8bdf017da834"}], "stats": {"total": 128, "additions": 107, "deletions": 21}, "files": [{"sha": "5e1dba9343597ff9683344264a66ef8f94d8d39c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6052c299313c0cb62c2ff2666c94d92d3a039b83/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6052c299313c0cb62c2ff2666c94d92d3a039b83/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6052c299313c0cb62c2ff2666c94d92d3a039b83", "patch": "@@ -1,3 +1,15 @@\n+2012-05-14  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/49110\n+\tPR fortran/51055\n+\tPR fortran/53329\n+\t* trans-expr.c (gfc_trans_assignment_1): Fix allocation\n+\thandling for assignment of function results to allocatable\n+\tdeferred-length strings.\n+\t* trans-decl.c (gfc_create_string_length): For deferred-length\n+\tmodule variables, include module name in the assembler name.\n+\t(gfc_get_symbol_decl): Don't override the assembler name.\n+\n 2012-05-14  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR 53063"}, {"sha": "1354ad05e3da1361ab4485019bd7341cee642ad5", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6052c299313c0cb62c2ff2666c94d92d3a039b83/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6052c299313c0cb62c2ff2666c94d92d3a039b83/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=6052c299313c0cb62c2ff2666c94d92d3a039b83", "patch": "@@ -1087,11 +1087,14 @@ gfc_create_string_length (gfc_symbol * sym)\n   if (sym->ts.u.cl->backend_decl == NULL_TREE)\n     {\n       tree length;\n-      char name[GFC_MAX_MANGLED_SYMBOL_LEN + 2];\n+      const char *name;\n \n       /* Also prefix the mangled name.  */\n-      strcpy (&name[1], sym->name);\n-      name[0] = '.';\n+      if (sym->module)\n+\tname = gfc_get_string (\".__%s_MOD_%s\", sym->module, sym->name);\n+      else\n+\tname = gfc_get_string (\".%s\", sym->name);\n+\n       length = build_decl (input_location,\n \t\t\t   VAR_DECL, get_identifier (name),\n \t\t\t   gfc_charlen_type_node);\n@@ -1101,6 +1104,13 @@ gfc_create_string_length (gfc_symbol * sym)\n \tgfc_defer_symbol_init (sym);\n \n       sym->ts.u.cl->backend_decl = length;\n+\n+      if (sym->attr.save || sym->ns->proc_name->attr.flavor == FL_MODULE)\n+\tTREE_STATIC (length) = 1;\n+\n+      if (sym->ns->proc_name->attr.flavor == FL_MODULE\n+\t  && (sym->attr.access != ACCESS_PRIVATE || sym->attr.public_used))\n+\tTREE_PUBLIC (length) = 1;\n     }\n \n   gcc_assert (sym->ts.u.cl->backend_decl != NULL_TREE);\n@@ -1402,17 +1412,6 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n \n       if (TREE_CODE (length) != INTEGER_CST)\n \t{\n-\t  char name[GFC_MAX_MANGLED_SYMBOL_LEN + 2];\n-\n-\t  if (sym->module)\n-\t    {\n-\t      /* Also prefix the mangled name for symbols from modules.  */\n-\t      strcpy (&name[1], sym->name);\n-\t      name[0] = '.';\n-\t      strcpy (&name[1],\n-\t\t      IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (length)));\n-\t      gfc_set_decl_assembler_name (decl, get_identifier (name));\n-\t    }\n \t  gfc_finish_var_decl (length, sym);\n \t  gcc_assert (!sym->value);\n \t}"}, {"sha": "9d48a09e12983ca7377451d67828b98e9249c881", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6052c299313c0cb62c2ff2666c94d92d3a039b83/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6052c299313c0cb62c2ff2666c94d92d3a039b83/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=6052c299313c0cb62c2ff2666c94d92d3a039b83", "patch": "@@ -7005,13 +7005,14 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n       gfc_add_expr_to_block (&loop.post, tmp);\n     }\n \n-  /* For a deferred character length function, the function call must\n-     happen before the (re)allocation of the lhs, otherwise the character\n-     length of the result is not known.  */\n-  def_clen_func = (((expr2->expr_type == EXPR_FUNCTION)\n-\t\t\t   || (expr2->expr_type == EXPR_COMPCALL)\n-\t\t\t   || (expr2->expr_type == EXPR_PPC))\n-\t\t       && expr2->ts.deferred);\n+  /* When assigning a character function result to a deferred-length variable,\n+     the function call must happen before the (re)allocation of the lhs -\n+     otherwise the character length of the result is not known.\n+     NOTE: This relies on having the exact dependence of the length type\n+     parameter available to the caller; gfortran saves it in the .mod files. */\n+  def_clen_func = (expr2->expr_type == EXPR_FUNCTION\n+\t\t   || expr2->expr_type == EXPR_COMPCALL\n+\t\t   || expr2->expr_type == EXPR_PPC);\n   if (gfc_option.flag_realloc_lhs\n \t&& expr2->ts.type == BT_CHARACTER\n \t&& (def_clen_func || expr2->expr_type == EXPR_OP)"}, {"sha": "9025441272486aeb1cd5a239efc3e65088519225", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6052c299313c0cb62c2ff2666c94d92d3a039b83/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6052c299313c0cb62c2ff2666c94d92d3a039b83/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6052c299313c0cb62c2ff2666c94d92d3a039b83", "patch": "@@ -1,3 +1,11 @@\n+2012-05-14  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/49110\n+\tPR fortran/51055\n+\tPR fortran/53329\n+\t* gfortran.dg/deferred_type_param_4.f90: New.\n+\t* gfortran.dg/deferred_type_param_6.f90: New.\n+\n 2012-05-14  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* gcc.target/i386/retarg.c: New test."}, {"sha": "c0583f5686c1d28a144f8fc28dc0c314cdc108cc", "filename": "gcc/testsuite/gfortran.dg/deferred_type_param_4.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6052c299313c0cb62c2ff2666c94d92d3a039b83/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_type_param_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6052c299313c0cb62c2ff2666c94d92d3a039b83/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_type_param_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_type_param_4.f90?ref=6052c299313c0cb62c2ff2666c94d92d3a039b83", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do run }\n+!\n+! PR fortran/51055\n+! PR fortran/49110\n+!\n+!\n+program test\n+  implicit none\n+  character(len=:), allocatable :: str\n+  integer :: i\n+  i = 5\n+  str = f()\n+  call printIt ()\n+  i = 7\n+  str = repeat('X', i)\n+  call printIt ()\n+contains\n+  function f()\n+    character(len=i) :: f\n+    f = '1234567890'\n+  end function f\n+  subroutine printIt\n+!    print *, len(str)\n+!    print '(3a)', '>',str,'<'\n+    if (i == 5) then\n+      if (str /= \"12345\" .or. len(str) /= 5) call abort ()\n+    else if (i == 7) then\n+      if (str /= \"XXXXXXX\" .or. len(str) /= 7) call abort ()\n+    else\n+      call abort ()\n+    end if\n+  end subroutine\n+end"}, {"sha": "eb0077840f4fd5c3288ecf199ef8dda9099a32ed", "filename": "gcc/testsuite/gfortran.dg/deferred_type_param_6.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6052c299313c0cb62c2ff2666c94d92d3a039b83/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_type_param_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6052c299313c0cb62c2ff2666c94d92d3a039b83/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_type_param_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_type_param_6.f90?ref=6052c299313c0cb62c2ff2666c94d92d3a039b83", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do run }\n+!\n+! PR fortran/51055\n+! PR fortran/49110\n+!\n+\n+subroutine test()\n+  implicit none\n+  integer :: i = 5\n+  character(len=:), allocatable :: s1\n+  call sub(s1, i)\n+  if (len(s1) /= 5) call abort()\n+  if (s1 /= \"ZZZZZ\") call abort()\n+contains\n+  subroutine sub(str,j)\n+    character(len=:), allocatable :: str\n+    integer :: j\n+    str = REPEAT(\"Z\",j)\n+    if (len(str) /= 5) call abort()\n+    if (str /= \"ZZZZZ\") call abort()\n+  end subroutine sub\n+end subroutine test\n+\n+program a\n+ character(len=:),allocatable :: s\n+ integer :: j=2\n+ s = repeat ('x', j)\n+ if (len(repeat(' ',j)) /= 2) call abort()\n+ if (repeat('y',j) /= \"yy\") call abort()\n+ if (len(s) /= 2) call abort()\n+ if (s /= \"xx\") call abort()\n+ call test()\n+end program a"}]}