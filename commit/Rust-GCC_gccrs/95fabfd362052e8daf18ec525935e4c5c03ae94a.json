{"sha": "95fabfd362052e8daf18ec525935e4c5c03ae94a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVmYWJmZDM2MjA1MmU4ZGFmMThlYzUyNTkzNWU0YzVjMDNhZTk0YQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-12-05T17:58:46Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-12-05T17:58:46Z"}, "message": "cp-tree.h (calls_setjmp_p): Declare.\n\n\t* cp-tree.h (calls_setjmp_p): Declare.\n\t* decl.c (finish_function): Mark functions that call setjmp as\n\tuninlinable.\n\t* optimize.c (calls_setjmp_r): New function.\n\t(calls_setjmp_p): Likewise.\n\nFrom-SVN: r30789", "tree": {"sha": "1eccbfde182d3affc92d416e43991a58f82fb813", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1eccbfde182d3affc92d416e43991a58f82fb813"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95fabfd362052e8daf18ec525935e4c5c03ae94a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95fabfd362052e8daf18ec525935e4c5c03ae94a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95fabfd362052e8daf18ec525935e4c5c03ae94a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95fabfd362052e8daf18ec525935e4c5c03ae94a/comments", "author": null, "committer": null, "parents": [{"sha": "3a8c995be7629b05f71e5e0d0afb1bd4e7bb6176", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a8c995be7629b05f71e5e0d0afb1bd4e7bb6176", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a8c995be7629b05f71e5e0d0afb1bd4e7bb6176"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "01ee07692fc1f4d02eebe692e56d8d1e7264051f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fabfd362052e8daf18ec525935e4c5c03ae94a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fabfd362052e8daf18ec525935e4c5c03ae94a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=95fabfd362052e8daf18ec525935e4c5c03ae94a", "patch": "@@ -1,3 +1,11 @@\n+1999-12-05  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (calls_setjmp_p): Declare.\n+\t* decl.c (finish_function): Mark functions that call setjmp as\n+\tuninlinable.\n+\t* optimize.c (calls_setjmp_r): New function.\n+\t(calls_setjmp_p): Likewise.\n+\n 1999-12-04  Mark Mitchell  <mark@codesourcery.com>\n \n \t* optimize.c (expand_call_inline): Wrap the expanded call in an"}, {"sha": "7410a821420d51723397f2758ec26f3735273879", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fabfd362052e8daf18ec525935e4c5c03ae94a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fabfd362052e8daf18ec525935e4c5c03ae94a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=95fabfd362052e8daf18ec525935e4c5c03ae94a", "patch": "@@ -3777,6 +3777,7 @@ extern tree get_id_2\t\t\t\tPROTO((const char *, tree));\n \n /* In optimize.c */\n extern void optimize_function                   PROTO((tree));\n+extern int calls_setjmp_p                       PROTO((tree));\n \n /* in pt.c */\n extern void init_pt                             PROTO ((void));"}, {"sha": "031e666943326d8c42a18c9990fba8d17f88e99b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fabfd362052e8daf18ec525935e4c5c03ae94a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fabfd362052e8daf18ec525935e4c5c03ae94a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=95fabfd362052e8daf18ec525935e4c5c03ae94a", "patch": "@@ -13664,6 +13664,18 @@ finish_function (lineno, flags)\n   if (!expanding_p && !processing_template_decl)\n     save_function_data (fndecl);\n \n+  /* If this function calls `setjmp' it cannot be inlined.  When\n+     `longjmp' is called it is not guaranteed to restore the value of\n+     local variables that have been modified since the call to\n+     `setjmp'.  So, if were to inline this function into some caller\n+     `c', then when we `longjmp', we might not restore all variables\n+     in `c'.  (It might seem, at first blush, that there's no way for\n+     this function to modify local variables in `c', but their\n+     addresses may have been stored somewhere accessible to this\n+     function.)  */\n+  if (!expanding_p && !processing_template_decl && calls_setjmp_p (fndecl))\n+    DECL_UNINLINABLE (fndecl) = 1;\n+\n   if (expand_p)\n     {\n       int returns_null;"}, {"sha": "dbbda797bcc480ef57eb4c2af3f1451e5218f0e3", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fabfd362052e8daf18ec525935e4c5c03ae94a/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fabfd362052e8daf18ec525935e4c5c03ae94a/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=95fabfd362052e8daf18ec525935e4c5c03ae94a", "patch": "@@ -77,6 +77,7 @@ static int inlinable_function_p PROTO((tree, inline_data *));\n static tree remap_decl PROTO((tree, inline_data *));\n static void remap_block PROTO((tree, tree, inline_data *));\n static void copy_scope_stmt PROTO((tree *, int *, inline_data *));\n+static tree calls_setjmp_r PROTO((tree *, int *, void *));\n \n /* Remap DECL during the copying of the BLOCK tree for the function.\n    DATA is really an `inline_data *'.  */\n@@ -720,3 +721,39 @@ optimize_function (fn)\n       VARRAY_FREE (id.fns);\n     }\n }\n+\n+/* Called from calls_setjmp_p via walk_tree.  */\n+\n+static tree\n+calls_setjmp_r (tp, walk_subtrees, data)\n+     tree *tp;\n+     int *walk_subtrees ATTRIBUTE_UNUSED;\n+     void *data ATTRIBUTE_UNUSED;\n+{\n+  int setjmp_p;\n+  int longjmp_p;\n+  int malloc_p;\n+  int alloca_p;\n+\n+  /* We're only interested in FUNCTION_DECLS.  */\n+  if (TREE_CODE (*tp) != FUNCTION_DECL)\n+    return NULL_TREE;\n+\n+  special_function_p (*tp, &setjmp_p, &longjmp_p, &malloc_p, &alloca_p);\n+\n+  return setjmp_p ? *tp : NULL_TREE;\n+}\n+\n+/* Returns non-zero if FN calls `setjmp' or some other function that\n+   can return more than once.  This function is conservative; it may\n+   occasionally return a non-zero value even when FN does not actually\n+   call `setjmp'.  */\n+\n+int\n+calls_setjmp_p (fn)\n+     tree fn;\n+{\n+  return (walk_tree (&DECL_SAVED_TREE (fn), calls_setjmp_r, NULL) \n+\t  != NULL_TREE);\n+}\n+"}]}