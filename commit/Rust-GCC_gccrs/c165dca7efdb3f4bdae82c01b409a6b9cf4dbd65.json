{"sha": "c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE2NWRjYTdlZmRiM2Y0YmRhZTgyYzAxYjQwOWE2YjljZjRkYmQ2NQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-09-28T20:08:38Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-09-28T20:08:38Z"}, "message": "add ObjC* class, category and protocol attribute parsers\n\ngcc/c-family:\n\n\t* c-common.h (objc_start_class_interface): Adjust prototype.\n\t(objc_start_category_interface): Likewise.\n\t(objc_start_protocol): Likewise.\n\t* stub-objc.c (objc_start_protocol): Adjust for extra argument.\n\t(objc_start_class_interface): Likewise.\n\t(objc_start_category_interface): Likewise.\n\ngcc/objc:\n\n\t* objc-act.c (objc_start_class_interface): Handle and ignore attributes.\n\t(objc_start_category_interface): Likewise.\n\t(objc_start_protocol): Likewise.\n\ngcc/cp:\n\n\t* parser.c (cp_parser_objc_valid_prefix_attributes): New.\n\t(cp_parser_declaration): Parse prefix attributes for ObjC++.\n\t(cp_parser_objc_protocol_declaration): Handle attributes.\n\t(cp_parser_objc_class_interface): Likewise.\n\t(cp_parser_objc_declaration): Likewise.\n\ngcc:\n\n\t* c-parser.c (c_parser_objc_class_definition): Adjust prototype.\n\t(c_parser_objc_protocol_definition): Likewise.\n\t(c_parser_external_declaration): Provide dummy attribute arguments.\n\t(c_parser_declaration_or_fndef): Parse prefix attributes for ObjC.\n\t(c_parser_objc_class_definition): Handle attributes.\n\t(c_parser_objc_protocol_definition): Likewise.\n\ngcc/testsuite:\n\n\t* objc.dg/attributes: New.\n\t* objc.dg/attributes/attributes.exp: New.\n\t* objc.dg/attributes/class-attribute-1.m: New.\n\t* objc.dg/attributes/class-attribute-2.m: New\n\t* objc.dg/attributes/categ-attribute-1.m: New\n\t* objc.dg/attributes/categ-attribute-2.m: New\n\t* objc.dg/attributes/proto-attribute-1.m: New\n\n\t* obj-c++.dg/attributes: New.\n\t* obj-c++.dg/attributes/attributes.exp: New\n\t* obj-c++.dg/attributes/class-attribute-1.mm: New\n\t* obj-c++.dg/attributes/class-attribute-2.mm: New\n\t* obj-c++.dg/attributes/categ-attribute-1.mm: New\n\t* obj-c++.dg/attributes/categ-attribute-2.mm: New\n\t* obj-c++.dg/attributes/proto-attribute-1.mm: New\n\nFrom-SVN: r164700", "tree": {"sha": "e9f050f6c9de15c20adf243711859bc55a85c841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9f050f6c9de15c20adf243711859bc55a85c841"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41804a5be02d8d811e5189a9cca9060f41cea765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41804a5be02d8d811e5189a9cca9060f41cea765", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41804a5be02d8d811e5189a9cca9060f41cea765"}], "stats": {"total": 642, "additions": 610, "deletions": 32}, "files": [{"sha": "780d46a3804148d9dc926e3cac7532adcf210eef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65", "patch": "@@ -1,3 +1,12 @@\n+2010-09-28  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* c-parser.c (c_parser_objc_class_definition): Adjust prototype.\n+\t(c_parser_objc_protocol_definition): Likewise.\n+\t(c_parser_external_declaration): Provide dummy attribute arguments.\n+\t(c_parser_declaration_or_fndef): Parse prefix attributes for ObjC.\n+\t(c_parser_objc_class_definition): Handle attributes.\n+\t(c_parser_objc_protocol_definition): Likewise.\n+\n 2010-09-28  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/40569"}, {"sha": "b3687d8c71c8100b42ed11095f2170a63286a235", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65", "patch": "@@ -1,3 +1,12 @@\n+2010-09-28  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* c-common.h (objc_start_class_interface): Adjust prototype.\n+\t(objc_start_category_interface): Likewise.\n+\t(objc_start_protocol): Likewise.\n+\t* stub-objc.c (objc_start_protocol): Adjust for extra argument.\n+\t(objc_start_class_interface): Likewise.\n+\t(objc_start_category_interface): Likewise.\n+\n 2010-09-27  Ian Lance Taylor  <iant@google.com>\n \n \t* c-common.c (c_common_attribute_table): Add no_split_stack."}, {"sha": "99efe84906d11dbd2873bc0aaad780b0aea33c26", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65", "patch": "@@ -965,9 +965,9 @@ extern tree objc_get_protocol_qualified_type (tree, tree);\n extern tree objc_get_class_reference (tree);\n extern tree objc_get_class_ivars (tree);\n extern tree objc_get_interface_ivars (tree);\n-extern void objc_start_class_interface (tree, tree, tree);\n-extern void objc_start_category_interface (tree, tree, tree);\n-extern void objc_start_protocol (tree, tree);\n+extern void objc_start_class_interface (tree, tree, tree, tree);\n+extern void objc_start_category_interface (tree, tree, tree, tree);\n+extern void objc_start_protocol (tree, tree, tree);\n extern void objc_continue_interface (void);\n extern void objc_finish_interface (void);\n extern void objc_start_class_implementation (tree, tree);"}, {"sha": "83472bef1d16a46532dd50278193b86d6995e439", "filename": "gcc/c-family/stub-objc.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Fc-family%2Fstub-objc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Fc-family%2Fstub-objc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fstub-objc.c?ref=c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65", "patch": "@@ -122,21 +122,24 @@ objc_declare_protocols (tree ARG_UNUSED (list))\n \n void\n objc_start_protocol (tree ARG_UNUSED (proto),\n-\t\t     tree ARG_UNUSED (protorefs))\n+\t\t     tree ARG_UNUSED (protorefs),\n+\t\t     tree ARG_UNUSED (attribs))\n {\n }\n \n void\n objc_start_class_interface (tree ARG_UNUSED (name),\n \t\t\t    tree ARG_UNUSED (super),\n-\t\t\t    tree ARG_UNUSED (protos))\n+\t\t\t    tree ARG_UNUSED (protos),\n+\t\t\t    tree ARG_UNUSED (attribs))\n {\n }\n \n void\n objc_start_category_interface (tree ARG_UNUSED (name),\n \t\t\t       tree ARG_UNUSED (categ),\n-\t\t\t       tree ARG_UNUSED (protos))\n+\t\t\t       tree ARG_UNUSED (protos),\n+\t\t\t       tree ARG_UNUSED (attribs))\n {\n }\n "}, {"sha": "2743f3020e4f021eb278457794981b215732f0b0", "filename": "gcc/c-parser.c", "status": "modified", "additions": 82, "deletions": 13, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65", "patch": "@@ -977,11 +977,11 @@ static bool c_parser_pragma (c_parser *, enum pragma_context);\n \n /* These Objective-C parser functions are only ever called when\n    compiling Objective-C.  */\n-static void c_parser_objc_class_definition (c_parser *);\n+static void c_parser_objc_class_definition (c_parser *, tree);\n static void c_parser_objc_class_instance_variables (c_parser *);\n static void c_parser_objc_class_declaration (c_parser *);\n static void c_parser_objc_alias_declaration (c_parser *);\n-static void c_parser_objc_protocol_definition (c_parser *);\n+static void c_parser_objc_protocol_definition (c_parser *, tree);\n static enum tree_code c_parser_objc_method_type (c_parser *);\n static void c_parser_objc_method_definition (c_parser *);\n static void c_parser_objc_methodprotolist (c_parser *);\n@@ -996,6 +996,8 @@ static tree c_parser_objc_selector_arg (c_parser *);\n static tree c_parser_objc_receiver (c_parser *);\n static tree c_parser_objc_message_args (c_parser *);\n static tree c_parser_objc_keywordexpr (c_parser *);\n+static bool c_parser_objc_diagnose_bad_element_prefix \n+  (c_parser *, struct c_declspecs *);\n \n /* Parse a translation unit (C90 6.7, C99 6.9).\n \n@@ -1079,7 +1081,7 @@ c_parser_external_declaration (c_parser *parser)\n \tcase RID_AT_INTERFACE:\n \tcase RID_AT_IMPLEMENTATION:\n \t  gcc_assert (c_dialect_objc ());\n-\t  c_parser_objc_class_definition (parser);\n+\t  c_parser_objc_class_definition (parser, NULL_TREE);\n \t  break;\n \tcase RID_CLASS:\n \t  gcc_assert (c_dialect_objc ());\n@@ -1091,7 +1093,7 @@ c_parser_external_declaration (c_parser *parser)\n \t  break;\n \tcase RID_AT_PROTOCOL:\n \t  gcc_assert (c_dialect_objc ());\n-\t  c_parser_objc_protocol_definition (parser);\n+\t  c_parser_objc_protocol_definition (parser, NULL_TREE);\n \t  break;\n \tcase RID_AT_END:\n \t  gcc_assert (c_dialect_objc ());\n@@ -1123,15 +1125,15 @@ c_parser_external_declaration (c_parser *parser)\n \t as a declaration or function definition.  */\n     default:\n     decl_or_fndef:\n-      /* A declaration or a function definition.  We can only tell\n-\t which after parsing the declaration specifiers, if any, and\n-\t the first declarator.  */\n+      /* A declaration or a function definition (or, in Objective-C,\n+\t an @interface or @protocol with prefix attributes).  We can\n+\t only tell which after parsing the declaration specifiers, if\n+\t any, and the first declarator.  */\n       c_parser_declaration_or_fndef (parser, true, true, true, false, true);\n       break;\n     }\n }\n \n-\n /* Parse a declaration or function definition (C90 6.5, 6.7.1, C99\n    6.7, 6.9.1).  If FNDEF_OK is true, a function definition is\n    accepted; otherwise (old-style parameter declarations) only other\n@@ -1173,6 +1175,11 @@ c_parser_external_declaration (c_parser *parser)\n      declaration-specifiers declarator declaration-list[opt]\n        compound-statement\n \n+   Objective-C:\n+     attributes objc-class-definition\n+     attributes objc-category-definition\n+     attributes objc-protocol-definition\n+\n    The simple-asm-expr and attributes are GNU extensions.\n \n    This function does not handle __extension__; that is handled in its\n@@ -1235,6 +1242,51 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n       c_parser_consume_token (parser);\n       return;\n     }\n+  else if (c_dialect_objc ())\n+    {\n+      /* This is where we parse 'attributes @interface ...',\n+\t 'attributes @implementation ...', 'attributes @protocol ...'\n+\t (where attributes could be, for example, __attribute__\n+\t ((deprecated)).\n+      */\n+      switch (c_parser_peek_token (parser)->keyword)\n+\t{\n+\tcase RID_AT_INTERFACE:\n+\t  {\n+\t    if (c_parser_objc_diagnose_bad_element_prefix (parser, specs))\n+\t      return;\n+\t    c_parser_objc_class_definition (parser, specs->attrs);\n+\t    return;\n+\t  }\n+\t  break;\n+\tcase RID_AT_IMPLEMENTATION:\n+\t  {\n+\t    if (c_parser_objc_diagnose_bad_element_prefix (parser, specs))\n+\t      return;\n+\t    if (specs->attrs)\n+\t      {\n+\t\twarning_at (c_parser_peek_token (parser)->location, \n+\t\t\tOPT_Wattributes,\n+\t\t\t\"prefix attributes are ignored for implementations\");\n+\t\tspecs->attrs = NULL_TREE;\n+\t      }\n+\t    c_parser_objc_class_definition (parser, NULL_TREE);\t    \n+\t    return;\n+\t  }\n+\t  break;\n+\tcase RID_AT_PROTOCOL:\n+\t  {\n+\t    if (c_parser_objc_diagnose_bad_element_prefix (parser, specs))\n+\t      return;\n+\t    c_parser_objc_protocol_definition (parser, specs->attrs);\n+\t    return;\n+\t  }\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+    }\n+  \n   pending_xref_error ();\n   prefix_attrs = specs->attrs;\n   all_prefix_attrs = prefix_attrs;\n@@ -6254,7 +6306,7 @@ c_parser_expr_list (c_parser *parser, bool convert_p, bool fold_p,\n    objc-protocol-refs and objc-class-instance-variables are omitted.  */\n \n static void\n-c_parser_objc_class_definition (c_parser *parser)\n+c_parser_objc_class_definition (c_parser *parser, tree attributes)\n {\n   bool iface_p;\n   tree id1;\n@@ -6265,6 +6317,7 @@ c_parser_objc_class_definition (c_parser *parser)\n     iface_p = false;\n   else\n     gcc_unreachable ();\n+\n   c_parser_consume_token (parser);\n   if (c_parser_next_token_is_not (parser, CPP_NAME))\n     {\n@@ -6294,7 +6347,7 @@ c_parser_objc_class_definition (c_parser *parser)\n \t}\n       if (c_parser_next_token_is (parser, CPP_LESS))\n \tproto = c_parser_objc_protocol_refs (parser);\n-      objc_start_category_interface (id1, id2, proto);\n+      objc_start_category_interface (id1, id2, proto, attributes);\n       c_parser_objc_methodprotolist (parser);\n       c_parser_require_keyword (parser, RID_AT_END, \"expected %<@end%>\");\n       objc_finish_interface ();\n@@ -6318,7 +6371,7 @@ c_parser_objc_class_definition (c_parser *parser)\n       tree proto = NULL_TREE;\n       if (c_parser_next_token_is (parser, CPP_LESS))\n \tproto = c_parser_objc_protocol_refs (parser);\n-      objc_start_class_interface (id1, superclass, proto);\n+      objc_start_class_interface (id1, superclass, proto, attributes);\n     }\n   else\n     objc_start_class_implementation (id1, superclass);\n@@ -6498,9 +6551,10 @@ c_parser_objc_alias_declaration (c_parser *parser)\n    omitted.  */\n \n static void\n-c_parser_objc_protocol_definition (c_parser *parser)\n+c_parser_objc_protocol_definition (c_parser *parser, tree attributes)\n {\n   gcc_assert (c_parser_next_token_is_keyword (parser, RID_AT_PROTOCOL));\n+\n   c_parser_consume_token (parser);\n   if (c_parser_next_token_is_not (parser, CPP_NAME))\n     {\n@@ -6540,7 +6594,7 @@ c_parser_objc_protocol_definition (c_parser *parser)\n       if (c_parser_next_token_is (parser, CPP_LESS))\n \tproto = c_parser_objc_protocol_refs (parser);\n       parser->objc_pq_context = true;\n-      objc_start_protocol (id, proto);\n+      objc_start_protocol (id, proto, attributes);\n       c_parser_objc_methodprotolist (parser);\n       c_parser_require_keyword (parser, RID_AT_END, \"expected %<@end%>\");\n       parser->objc_pq_context = false;\n@@ -7129,6 +7183,21 @@ c_parser_objc_keywordexpr (c_parser *parser)\n   return ret;\n }\n \n+/* A check, needed in several places, that ObjC interface, implementation or\n+   method definitions are not prefixed by incorrect items.  */\n+static bool\n+c_parser_objc_diagnose_bad_element_prefix (c_parser *parser, \n+\t\t\t\t\t   struct c_declspecs *specs)\n+{\n+  if (!specs->declspecs_seen_p || specs->type_seen_p || specs->non_sc_seen_p)\n+    {\n+      c_parser_error (parser, \n+      \t\t      \"no type or storage class may be specified here,\");\n+      c_parser_skip_to_end_of_block_or_statement (parser);\n+      return true;\n+    }\n+  return false;\n+}\n \f\n /* Handle pragmas.  Some OpenMP pragmas are associated with, and therefore\n    should be considered, statements.  ALLOW_STMT is true if we're within"}, {"sha": "a1806fcff7e9d0f4f1038ab07aff4b97e866260a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65", "patch": "@@ -1,3 +1,11 @@\n+2010-09-28  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* parser.c (cp_parser_objc_valid_prefix_attributes): New.\n+\t(cp_parser_declaration): Parse prefix attributes for ObjC++.\n+\t(cp_parser_objc_protocol_declaration): Handle attributes.\n+\t(cp_parser_objc_class_interface): Likewise.\n+\t(cp_parser_objc_declaration): Likewise.\n+\n 2010-09-27  Jason Merrill  <jason@redhat.com>\n \n \tRequire lvalues as specified by the standard."}, {"sha": "8f6ea256ea774292fb57dcaec5f728c2179f81bf", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 57, "deletions": 10, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65", "patch": "@@ -2086,9 +2086,11 @@ static tree cp_parser_objc_selector\n static tree cp_parser_objc_protocol_refs_opt\n   (cp_parser *);\n static void cp_parser_objc_declaration\n-  (cp_parser *);\n+  (cp_parser *, tree);\n static tree cp_parser_objc_statement\n   (cp_parser *);\n+static bool cp_parser_objc_valid_prefix_attributes\n+  (cp_parser* parser, tree *attrib);\n \n /* Utility Routines */\n \n@@ -9285,6 +9287,7 @@ cp_parser_declaration (cp_parser* parser)\n   cp_token token2;\n   int saved_pedantic;\n   void *p;\n+  tree attributes = NULL_TREE;\n \n   /* Check for the `__extension__' keyword.  */\n   if (cp_parser_extension_opt (parser, &saved_pedantic))\n@@ -9362,7 +9365,11 @@ cp_parser_declaration (cp_parser* parser)\n     cp_parser_namespace_definition (parser);\n   /* Objective-C++ declaration/definition.  */\n   else if (c_dialect_objc () && OBJC_IS_AT_KEYWORD (token1.keyword))\n-    cp_parser_objc_declaration (parser);\n+    cp_parser_objc_declaration (parser, NULL_TREE);\n+  else if (c_dialect_objc ()\n+\t   && token1.keyword == RID_ATTRIBUTE\n+\t   && cp_parser_objc_valid_prefix_attributes (parser, &attributes))\n+    cp_parser_objc_declaration (parser, attributes);\n   /* We must have either a block declaration or a function\n      definition.  */\n   else\n@@ -21739,7 +21746,7 @@ cp_parser_objc_class_ivars (cp_parser* parser)\n /* Parse an Objective-C protocol declaration.  */\n \n static void\n-cp_parser_objc_protocol_declaration (cp_parser* parser)\n+cp_parser_objc_protocol_declaration (cp_parser* parser, tree attributes)\n {\n   tree proto, protorefs;\n   cp_token *tok;\n@@ -21768,7 +21775,7 @@ cp_parser_objc_protocol_declaration (cp_parser* parser)\n     {\n       proto = cp_parser_identifier (parser);\n       protorefs = cp_parser_objc_protocol_refs_opt (parser);\n-      objc_start_protocol (proto, protorefs);\n+      objc_start_protocol (proto, protorefs, attributes);\n       cp_parser_objc_method_prototype_list (parser);\n     }\n }\n@@ -21798,7 +21805,7 @@ cp_parser_objc_superclass_or_category (cp_parser *parser, tree *super,\n /* Parse an Objective-C class interface.  */\n \n static void\n-cp_parser_objc_class_interface (cp_parser* parser)\n+cp_parser_objc_class_interface (cp_parser* parser, tree attributes)\n {\n   tree name, super, categ, protos;\n \n@@ -21809,10 +21816,10 @@ cp_parser_objc_class_interface (cp_parser* parser)\n \n   /* We have either a class or a category on our hands.  */\n   if (categ)\n-    objc_start_category_interface (name, categ, protos);\n+    objc_start_category_interface (name, categ, protos, attributes);\n   else\n     {\n-      objc_start_class_interface (name, super, protos);\n+      objc_start_class_interface (name, super, protos, attributes);\n       /* Handle instance variable declarations, if any.  */\n       cp_parser_objc_class_ivars (parser);\n       objc_continue_interface ();\n@@ -21858,11 +21865,31 @@ cp_parser_objc_end_implementation (cp_parser* parser)\n /* Parse an Objective-C declaration.  */\n \n static void\n-cp_parser_objc_declaration (cp_parser* parser)\n+cp_parser_objc_declaration (cp_parser* parser, tree attributes)\n {\n   /* Try to figure out what kind of declaration is present.  */\n   cp_token *kwd = cp_lexer_peek_token (parser->lexer);\n \n+  if (attributes)\n+    switch (kwd->keyword)\n+      {\n+\tcase RID_AT_ALIAS:\n+\tcase RID_AT_CLASS:\n+\tcase RID_AT_END:\n+\t  error_at (kwd->location, \"attributes may not be specified before\"\n+\t            \" the %<@%D%> Objective-C++ keyword\",\n+\t\t    kwd->u.value);\n+\t  attributes = NULL;\n+\t  break;\n+\tcase RID_AT_IMPLEMENTATION:\n+\t  warning_at (kwd->location, OPT_Wattributes,\n+\t\t      \"prefix attributes are ignored before %<@%D%>\",\n+\t\t      kwd->u.value);\n+\t  attributes = NULL;\n+\tdefault:\n+\t  break;\n+      }\n+\n   switch (kwd->keyword)\n     {\n     case RID_AT_ALIAS:\n@@ -21872,10 +21899,10 @@ cp_parser_objc_declaration (cp_parser* parser)\n       cp_parser_objc_class_declaration (parser);\n       break;\n     case RID_AT_PROTOCOL:\n-      cp_parser_objc_protocol_declaration (parser);\n+      cp_parser_objc_protocol_declaration (parser, attributes);\n       break;\n     case RID_AT_INTERFACE:\n-      cp_parser_objc_class_interface (parser);\n+      cp_parser_objc_class_interface (parser, attributes);\n       break;\n     case RID_AT_IMPLEMENTATION:\n       cp_parser_objc_class_implementation (parser);\n@@ -22024,6 +22051,26 @@ cp_parser_objc_statement (cp_parser * parser) {\n \n   return error_mark_node;\n }\n+\n+/* If we are compiling ObjC++ and we see an __attribute__ we neeed to \n+   look ahead to see if an objc keyword follows the attributes.  This\n+   is to detect the use of prefix attributes on ObjC @interface and \n+   @protocol.  */\n+\n+static bool\n+cp_parser_objc_valid_prefix_attributes (cp_parser* parser, tree *attrib)\n+{\n+  cp_lexer_save_tokens (parser->lexer);\n+  *attrib = cp_parser_attributes_opt (parser);\n+  gcc_assert (*attrib);\n+  if (OBJC_IS_AT_KEYWORD (cp_lexer_peek_token (parser->lexer)->keyword))\n+    {\n+      cp_lexer_commit_tokens (parser->lexer);\n+      return true;\n+    }\n+  cp_lexer_rollback_tokens (parser->lexer);\n+  return false;  \n+}\n \f\n /* OpenMP 2.5 parsing routines.  */\n "}, {"sha": "d797283e51f09b9664cd7db14cde997f6fada845", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65", "patch": "@@ -1,3 +1,9 @@\n+2010-09-28  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* objc-act.c (objc_start_class_interface): Handle and ignore attributes.\n+\t(objc_start_category_interface): Likewise.\n+\t(objc_start_protocol): Likewise.\n+\n 2010-09-28  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tMerge from 'apple/trunk' branch on FSF servers."}, {"sha": "9401769b7d63a99c777fbaeb4e8370d8966f814c", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65", "patch": "@@ -651,26 +651,40 @@ lookup_protocol_in_reflist (tree rproto_list, tree lproto)\n }\n \n void\n-objc_start_class_interface (tree klass, tree super_class, tree protos)\n+objc_start_class_interface (tree klass, tree super_class,\n+\t\t\t    tree protos, tree attributes)\n {\n+  if (attributes)\n+    warning_at (input_location, OPT_Wattributes, \n+\t\t\"class attributes are not available in this version\"\n+\t\t\" of the compiler, (ignored)\");\n   objc_interface_context\n     = objc_ivar_context\n     = start_class (CLASS_INTERFACE_TYPE, klass, super_class, protos);\n   objc_public_flag = 0;\n }\n \n void\n-objc_start_category_interface (tree klass, tree categ, tree protos)\n+objc_start_category_interface (tree klass, tree categ,\n+\t\t\t       tree protos, tree attributes)\n {\n+  if (attributes)\n+    warning_at (input_location, OPT_Wattributes, \n+\t\t\"category attributes are not available in this version\"\n+\t\t\" of the compiler, (ignored)\");\n   objc_interface_context\n     = start_class (CATEGORY_INTERFACE_TYPE, klass, categ, protos);\n   objc_ivar_chain\n     = continue_class (objc_interface_context);\n }\n \n void\n-objc_start_protocol (tree name, tree protos)\n+objc_start_protocol (tree name, tree protos, tree attributes)\n {\n+  if (attributes)\n+    warning_at (input_location, OPT_Wattributes, \n+\t\t\"protocol attributes are not available in this version\"\n+\t\t\" of the compiler, (ignored)\");\n   objc_interface_context\n     = start_protocol (PROTOCOL_INTERFACE_TYPE, name, protos);\n }"}, {"sha": "22cb056a0d2adf68a9c4315622c854463ea5a1f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65", "patch": "@@ -1,3 +1,21 @@\n+2010-09-28  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* objc.dg/attributes: New.\n+\t* objc.dg/attributes/attributes.exp: New.\n+\t* objc.dg/attributes/class-attribute-1.m: New.\n+\t* objc.dg/attributes/class-attribute-2.m: New\n+\t* objc.dg/attributes/categ-attribute-1.m: New\n+\t* objc.dg/attributes/categ-attribute-2.m: New\n+\t* objc.dg/attributes/proto-attribute-1.m: New\n+\n+\t* obj-c++.dg/attributes: New.\n+\t* obj-c++.dg/attributes/attributes.exp: New\n+\t* obj-c++.dg/attributes/class-attribute-1.mm: New\n+\t* obj-c++.dg/attributes/class-attribute-2.mm: New\n+\t* obj-c++.dg/attributes/categ-attribute-1.mm: New\n+\t* obj-c++.dg/attributes/categ-attribute-2.mm: New\n+\t* obj-c++.dg/attributes/proto-attribute-1.mm: New\n+\n 2010-09-28  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tMerge from 'apple/trunk' branch on FSF servers (test method-20.m"}, {"sha": "1d4cae4ef2ee8a6a2cf5ba7680baf9da497fb6c1", "filename": "gcc/testsuite/obj-c++.dg/attributes/attributes.exp", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fattributes.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fattributes.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fattributes.exp?ref=c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65", "patch": "@@ -0,0 +1,43 @@\n+# Copyright (C) 2010 Free Software Foundation, Inc.\n+# \n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Load support procs.\n+load_lib obj-c++-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_OBJCXXFLAGS\n+if ![info exists DEFAULT_OBJCXXFLAGS] then {\n+    set DEFAULT_OBJCXXFLAGS \" -ansi -pedantic-errors -Wno-long-long\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Gather a list of all tests.\n+set tests [lsort [glob -nocomplain $srcdir/$subdir/*.mm]]\n+\n+# Main loop.\n+dg-runtest $tests \"-fgnu-runtime\" $DEFAULT_OBJCXXFLAGS\n+\n+# darwin targets can also run code with the NeXT runtime.\n+if [istarget \"*-*-darwin*\" ] {\n+  dg-runtest $tests \"-fnext-runtime\" $DEFAULT_OBJCXXFLAGS\n+}\n+\n+# All done.\n+dg-finish"}, {"sha": "6c48e0ad1bc4a1af0eab686e5a20ac08eeca3ca9", "filename": "gcc/testsuite/obj-c++.dg/attributes/categ-attribute-1.mm", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fcateg-attribute-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fcateg-attribute-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fcateg-attribute-1.mm?ref=c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+#include \"../../objc-obj-c++-shared/Object1.h\"\n+\n+@interface obj : Object { \n+@public \n+  int var; \n+} \n+- (int) mth;\n+@end\n+\n+@implementation obj\n+- (int) mth {  return var; } \n+@end\n+\n+__attribute ((deprecated)) \n+@interface obj (dep_categ) /* { dg-warning \"category attributes are not available in this version\" } */\n+- (int) depmth;\n+@end\n+\n+@implementation obj (dep_categ)\n+- (int) depmth { return var + 1; }\n+@end\n+\n+int foo (void)\n+{\n+    obj *p = [obj new];\t \n+    int q = [p depmth];\n+    return [p mth];    \n+}"}, {"sha": "631607a0147f665fd3609db7dad7f07a74152200", "filename": "gcc/testsuite/obj-c++.dg/attributes/categ-attribute-2.mm", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fcateg-attribute-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fcateg-attribute-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fcateg-attribute-2.mm?ref=c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+#include \"../../objc-obj-c++-shared/Object1.h\"\n+\n+@interface obj : Object { \n+@public \n+  int var; \n+} \n+- (int) mth;\n+@end\n+\n+@implementation obj\n+- (int) mth {  return var; } \n+@end\n+\n+__attribute__ ((deprecated(\"no dep_categ\")))\n+@interface obj (dep_categ) /* { dg-warning \"category attributes are not available in this version\" } */ \n+- (int) depmth;\n+@end\n+\n+__attribute__ ((deprecated)) \n+@implementation obj (dep_categ) /* { dg-error \"prefix attributes are ignored before\" } */\n+- (int) depmth { return var + 1; }\n+@end\n+\n+int foo (void)\n+{\n+    obj *p = [obj new];\t \n+    int q = [p depmth];\n+    return [p mth];    \n+}"}, {"sha": "5cd5ea05712a7fa79329eaa55966b1e3345812ac", "filename": "gcc/testsuite/obj-c++.dg/attributes/class-attribute-1.mm", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fclass-attribute-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fclass-attribute-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fclass-attribute-1.mm?ref=c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+#include \"../../objc-obj-c++-shared/Object1.h\"\n+\n+/* Normal deprecated func. */\n+__attribute ((deprecated)) void f1();\n+__attribute__ ((deprecated(\"use some new func\"))) void f2();\n+\n+__attribute__ ((deprecated)) \n+@interface depobj : Object { /* { dg-warning \"class attributes are not available in this version\" } */\n+@public \n+  int var; \n+} \n+- (int) mth;\n+@end\n+\n+@implementation depobj\n+-(int) mth {  return var; } \n+@end\n+\n+@interface depobj (ok_categ) \n+@end \n+\n+@interface NS : depobj \n+@end \n+\n+depobj * deprecated;\n+\n+int foo (depobj *dep_obj) /*  dg - warning \"deprecated\"  */\n+{\n+    depobj *p = [depobj new];\t/*  dg - warning \"deprecated\"   */ \n+\n+    f1();\t/* { dg-warning \"'void f1..' is deprecated .declared at\" } */\n+    f2();\t/* { dg-warning \"'void f2..' is deprecated .declared at \\[^\\\\)\\]*.: use some new func\" } */\n+    int q = p->var;\n+    return [p mth];    \n+}"}, {"sha": "ae94e2f7ad01a17eecbf93388b3fe88a223e5be9", "filename": "gcc/testsuite/obj-c++.dg/attributes/class-attribute-2.mm", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fclass-attribute-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fclass-attribute-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fclass-attribute-2.mm?ref=c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+#include \"../../objc-obj-c++-shared/Object1.h\"\n+\n+__attribute ((deprecated)) \n+@interface depobj : Object { /* { dg-warning \"class attributes are not available in this version\" } */\n+@public \n+  int ivar; \n+} \n+- (int) mth;\n+@end\n+\n+__attribute ((deprecated)) \n+@implementation depobj /* { dg-error \"prefix attributes are ignored before\" } */\n+-(int) mth {  return ivar; } \n+@end\n+\n+int foo (void)\n+{\n+    depobj *p = [depobj new];\t/*  dg - warning \"deprecated\"   */ \n+\n+    int q = p->ivar;\n+    return [p mth];    \n+}"}, {"sha": "c21caad3be6540ffc1aafcc67bc58db5f073aaa4", "filename": "gcc/testsuite/obj-c++.dg/attributes/proto-attribute-1.mm", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fproto-attribute-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fproto-attribute-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fproto-attribute-1.mm?ref=c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+#include \"../../objc-obj-c++-shared/Object1.h\"\n+\n+__attribute ((deprecated)) \n+@protocol dep_proto /* { dg-warning \"protocol attributes are not available in this version\" } */\n+- (int) depprotomth; \n+@end\n+\n+@interface obj : Object <dep_proto>\n+{ \n+@public \n+  int var; \n+} \n+- (int) mth;\n+@end\n+\n+@implementation obj\n+- (int) mth {  return var; } \n+- (int) depprotomth { return var + 1; }\n+@end\n+\n+int foo (void)\n+{\n+    obj *p = [obj new];\t \n+    int q = [p depprotomth];\n+    return [p mth];    \n+}"}, {"sha": "cb11216c5bec29d4dfa8582ef0138dec63611b5a", "filename": "gcc/testsuite/objc.dg/attributes/attributes.exp", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fattributes.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fattributes.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fattributes.exp?ref=c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65", "patch": "@@ -0,0 +1,44 @@\n+# Copyright (C) 2010 Free Software Foundation, Inc.\n+# \n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Load support procs.\n+\n+load_lib objc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \"\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Gather a list of all tests.\n+set tests [lsort [glob -nocomplain $srcdir/$subdir/*.m]]\n+\n+# Main loop.\n+dg-runtest $tests \"-fgnu-runtime\" $DEFAULT_CFLAGS\n+\n+# darwin targets can also run code with the NeXT runtime.\n+if [istarget \"*-*-darwin*\" ] {\n+  dg-runtest $tests \"-fnext-runtime\" $DEFAULT_CFLAGS\n+}\n+\n+# All done.\n+dg-finish"}, {"sha": "e9fe9c986cda644a8642ffe6473f3b80f4f3bd1b", "filename": "gcc/testsuite/objc.dg/attributes/categ-attribute-1.m", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fcateg-attribute-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fcateg-attribute-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fcateg-attribute-1.m?ref=c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+#include \"../../objc-obj-c++-shared/Object1.h\"\n+\n+@interface obj : Object { \n+@public \n+  int var; \n+} \n+- (int) mth;\n+@end\n+\n+@implementation obj\n+- (int) mth {  return var; } \n+@end\n+\n+__attribute ((deprecated)) \n+@interface obj (dep_categ) \n+- (int) depmth;/* { dg-warning \"category attributes are not available in this version\" } */\n+@end\n+\n+@implementation obj (dep_categ)\n+- (int) depmth { return var + 1; }\n+@end\n+\n+int foo (void)\n+{\n+    obj *p = [obj new];\t \n+    int q = [p depmth];\n+    return [p mth];    \n+}"}, {"sha": "4a98de13099599cbb0905e8aa4a32df834227bb0", "filename": "gcc/testsuite/objc.dg/attributes/categ-attribute-2.m", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fcateg-attribute-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fcateg-attribute-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fcateg-attribute-2.m?ref=c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+#include \"../../objc-obj-c++-shared/Object1.h\"\n+\n+@interface obj : Object { \n+@public \n+  int var; \n+} \n+- (int) mth;\n+@end\n+\n+@implementation obj\n+- (int) mth {  return var; } \n+@end\n+\n+__attribute__ ((deprecated(\"no dep_categ\")))\n+@interface obj (dep_categ) \n+- (int) depmth;/* { dg-warning \"category attributes are not available in this version\" } */\n+@end\n+\n+__attribute__ ((deprecated)) \n+@implementation obj (dep_categ) /* { dg-warning \"prefix attributes are ignored for implementations\" } */\n+- (int) depmth { return var + 1; }\n+@end\n+\n+int foo (void)\n+{\n+    obj *p = [obj new];\t \n+    int q = [p depmth];\n+    return [p mth];    \n+}"}, {"sha": "802c211ff3677b5aadd8de9233e2d70b0fdee7a7", "filename": "gcc/testsuite/objc.dg/attributes/class-attribute-1.m", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fclass-attribute-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fclass-attribute-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fclass-attribute-1.m?ref=c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+#include \"../../objc-obj-c++-shared/Object1.h\"\n+\n+/* Normal deprecated func. */\n+__attribute ((deprecated)) void f1();\n+__attribute__ ((deprecated(\"use some new func\"))) void f2();\n+\n+__attribute__ ((deprecated)) \n+@interface DEPRECATED : Object\n+  { @public int ivar; } /* { dg-warning \"class attributes are not available in this version\" } */\n+  - (int) instancemethod;\n+@end\n+\n+@implementation DEPRECATED\n+-(int) instancemethod {  return ivar; } \n+@end\n+\n+@interface DEPRECATED (Category) \n+@end /*  dg - warning \"deprecated\"  */\n+\n+@interface NS : DEPRECATED \n+@end /* dg - warning \"deprecated\"  */\n+\n+DEPRECATED * deprecated_obj; /*  dg - warning \"deprecated\"  */\n+\n+int foo (DEPRECATED *unavailable_obj) /*  dg - warning \"deprecated\"  */\n+{\n+    DEPRECATED *p = [DEPRECATED new];\t/*  dg - warning \"deprecated\"   */ \n+\n+    f1();\t/* { dg-warning \"'f1' is deprecated\" } */\n+    f2();\t/* { dg-warning \"'f2' is deprecated .declared at \\[^\\\\)\\]*.: use some new func\" } */\n+    int q = p->ivar;\n+    return [p instancemethod];    \n+}"}, {"sha": "3ab93ccdfc2ec33a08c3d7e88dac128717a7fb60", "filename": "gcc/testsuite/objc.dg/attributes/class-attribute-2.m", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fclass-attribute-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fclass-attribute-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fclass-attribute-2.m?ref=c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+#include \"../../objc-obj-c++-shared/Object1.h\"\n+\n+__attribute ((deprecated)) \n+@interface depobj : Object { /* { dg-warning \"class attributes are not available in this version\" } */\n+@public \n+  int ivar; \n+} \n+- (int) mth;\n+@end\n+\n+__attribute ((deprecated)) \n+@implementation depobj /* { dg-warning \"prefix attributes are ignored for implementations\" } */\n+-(int) mth {  return ivar; } \n+@end\n+\n+int foo (void)\n+{\n+    depobj *p = [depobj new];\t/*  dg - warning \"deprecated\"   */ \n+\n+    int q = p->ivar;\n+    return [p mth];    \n+}"}, {"sha": "c9dc8786f76fbe888ada6745a063291a686225da", "filename": "gcc/testsuite/objc.dg/attributes/proto-attribute-1.m", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fproto-attribute-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fproto-attribute-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fproto-attribute-1.m?ref=c165dca7efdb3f4bdae82c01b409a6b9cf4dbd65", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+#include \"../../objc-obj-c++-shared/Object1.h\"\n+\n+__attribute ((deprecated)) \n+@protocol dep_proto \n+- (int) depprotomth; /* { dg-warning \"protocol attributes are not available in this version\" } */\n+@end\n+\n+@interface obj : Object <dep_proto>\n+{ \n+@public \n+  int var; \n+} \n+- (int) mth;\n+@end\n+\n+@implementation obj\n+- (int) mth {  return var; } \n+- (int) depprotomth { return var + 1; }\n+@end\n+\n+int foo (void)\n+{\n+    obj *p = [obj new];\t \n+    int q = [p depprotomth];\n+    return [p mth];    \n+}"}]}