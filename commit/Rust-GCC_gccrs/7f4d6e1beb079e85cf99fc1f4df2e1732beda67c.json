{"sha": "7f4d6e1beb079e85cf99fc1f4df2e1732beda67c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y0ZDZlMWJlYjA3OWU4NWNmOTlmYzFmNGRmMmUxNzMyYmVkYTY3Yw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-03-14T12:20:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-03-14T12:20:48Z"}, "message": "re PR tree-optimization/48098 (internal compiler error: in build_vector_from_val, at tree.c:1380)\n\n2011-03-14  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/48098\n\t* tree.c (build_vector_from_val): Adjust assert to requirements\n\tand reality.\n\n\t* gcc.dg/torture/pr48098.c: New testcase.\n\nFrom-SVN: r170934", "tree": {"sha": "eecb2902ac6eba928a764de20f2feb8d0e72be95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eecb2902ac6eba928a764de20f2feb8d0e72be95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f4d6e1beb079e85cf99fc1f4df2e1732beda67c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f4d6e1beb079e85cf99fc1f4df2e1732beda67c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f4d6e1beb079e85cf99fc1f4df2e1732beda67c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f4d6e1beb079e85cf99fc1f4df2e1732beda67c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c6104ef1c3ce9c543dcc6b2c3b5c3aca04dcadad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6104ef1c3ce9c543dcc6b2c3b5c3aca04dcadad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6104ef1c3ce9c543dcc6b2c3b5c3aca04dcadad"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "086d1ba44aae5b1e3d89ec66761a02c2dd48718e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4d6e1beb079e85cf99fc1f4df2e1732beda67c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4d6e1beb079e85cf99fc1f4df2e1732beda67c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f4d6e1beb079e85cf99fc1f4df2e1732beda67c", "patch": "@@ -1,3 +1,9 @@\n+2011-03-14  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/48098\n+\t* tree.c (build_vector_from_val): Adjust assert to requirements\n+\tand reality.\n+\n 2011-03-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/48102"}, {"sha": "2356b1de170009d3d21e5bd3dd9f5956a11d0db2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4d6e1beb079e85cf99fc1f4df2e1732beda67c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4d6e1beb079e85cf99fc1f4df2e1732beda67c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7f4d6e1beb079e85cf99fc1f4df2e1732beda67c", "patch": "@@ -1,3 +1,8 @@\n+2011-03-14  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/48098\n+\t* gcc.dg/torture/pr48098.c: New testcase.\n+\n 2011-03-12  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR target/48053"}, {"sha": "cd72939374fac61fcf4d2177b428113cb36c37e2", "filename": "gcc/testsuite/gcc.dg/torture/pr48098.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4d6e1beb079e85cf99fc1f4df2e1732beda67c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr48098.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4d6e1beb079e85cf99fc1f4df2e1732beda67c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr48098.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr48098.c?ref=7f4d6e1beb079e85cf99fc1f4df2e1732beda67c", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+\n+void\n+foo (int n)\n+{\n+  static char *__restrict *p;\n+  int i;\n+  p = __builtin_malloc (n);\n+  for (i = 0; i < n; i++)\n+    p[i] = 0;\n+}\n+"}, {"sha": "405b5499502e0791ec4c975cbd18511ae0f7c7c9", "filename": "gcc/tree.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4d6e1beb079e85cf99fc1f4df2e1732beda67c/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4d6e1beb079e85cf99fc1f4df2e1732beda67c/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=7f4d6e1beb079e85cf99fc1f4df2e1732beda67c", "patch": "@@ -1376,8 +1376,14 @@ build_vector_from_val (tree vectype, tree sc)\n   if (sc == error_mark_node)\n     return sc;\n \n-  gcc_assert (useless_type_conversion_p (TREE_TYPE (sc),\n-\t\t\t\t\t TREE_TYPE (vectype)));\n+  /* Verify that the vector type is suitable for SC.  Note that there\n+     is some inconsistency in the type-system with respect to restrict\n+     qualifications of pointers.  Vector types always have a main-variant\n+     element type and the qualification is applied to the vector-type.\n+     So TREE_TYPE (vector-type) does not return a properly qualified\n+     vector element-type.  */\n+  gcc_checking_assert (types_compatible_p (TYPE_MAIN_VARIANT (TREE_TYPE (sc)),\n+\t\t\t\t\t   TREE_TYPE (vectype)));\n \n   v = VEC_alloc (constructor_elt, gc, nunits);\n   for (i = 0; i < nunits; ++i)"}]}