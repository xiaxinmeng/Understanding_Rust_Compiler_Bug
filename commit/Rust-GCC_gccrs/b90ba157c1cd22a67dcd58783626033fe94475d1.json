{"sha": "b90ba157c1cd22a67dcd58783626033fe94475d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkwYmExNTdjMWNkMjJhNjdkY2Q1ODc4MzYyNjAzM2ZlOTQ0NzVkMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-11-25T22:15:20Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-11-25T22:15:20Z"}, "message": "list_read.c (nml_parse_qualifier): Use memcpy to extract values from dtp->u.p.value.\n\n        * io/list_read.c (nml_parse_qualifier): Use memcpy to extract\n        values from dtp->u.p.value.\n        * io/io.h (struct st_parameter_dt): Change reversion_flag, first_item,\n        seen_dollar, sf_seen_eor, eor_condition, no_leading_blank, char_flag,\n        input_complete, at_eol, comma_flag, namelist_mode, nml_read_error to\n        single-bit fields.  Move value to where it'll be at least pointer\n        aligned.\n\nFrom-SVN: r107520", "tree": {"sha": "f9f33abfc8781280d130db8483e6df894211a1c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9f33abfc8781280d130db8483e6df894211a1c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b90ba157c1cd22a67dcd58783626033fe94475d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b90ba157c1cd22a67dcd58783626033fe94475d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b90ba157c1cd22a67dcd58783626033fe94475d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b90ba157c1cd22a67dcd58783626033fe94475d1/comments", "author": null, "committer": null, "parents": [{"sha": "11e30dd8f23b75d788be0408437e3b6ed8e3b9d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11e30dd8f23b75d788be0408437e3b6ed8e3b9d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11e30dd8f23b75d788be0408437e3b6ed8e3b9d0"}], "stats": {"total": 97, "additions": 52, "deletions": 45}, "files": [{"sha": "a637ee4753621458cf90c5f79c1443c17dec6337", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b90ba157c1cd22a67dcd58783626033fe94475d1/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b90ba157c1cd22a67dcd58783626033fe94475d1/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=b90ba157c1cd22a67dcd58783626033fe94475d1", "patch": "@@ -1,3 +1,13 @@\n+2005-11-25  Richard Henderson  <rth@redhat.com>\n+\n+\t* io/list_read.c (nml_parse_qualifier): Use memcpy to extract\n+\tvalues from dtp->u.p.value.\n+\t* io/io.h (struct st_parameter_dt): Change reversion_flag, first_item,\n+\tseen_dollar, sf_seen_eor, eor_condition, no_leading_blank, char_flag,\n+\tinput_complete, at_eol, comma_flag, namelist_mode, nml_read_error to\n+\tsingle-bit fields.  Move value to where it'll be at least pointer\n+\taligned.\n+\n 2005-11-23  Alan Modra  <amodra@bigpond.net.au>\n \n \t* io/open.c (new_unit): Use the right unit number when checking"}, {"sha": "e0b251a5a82bcbccd028121a63fcb4749ddecbbc", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b90ba157c1cd22a67dcd58783626033fe94475d1/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b90ba157c1cd22a67dcd58783626033fe94475d1/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=b90ba157c1cd22a67dcd58783626033fe94475d1", "patch": "@@ -380,30 +380,30 @@ typedef struct st_parameter_dt\n \t  /* Number of spaces to be done for T and X-editing.  */\n \t  int pending_spaces;\n \t  unit_advance advance_status;\n-\t  char reversion_flag; /* Format reversion has occurred.  */\n-\t  char first_item;\n-\t  char seen_dollar;\n-\t  char sf_seen_eor;\n-\t  char eor_condition;\n-\t  char no_leading_blank;\n-\t  char nml_delim;\n-\t  char char_flag;\n-\t  char input_complete;\n-\t  char at_eol;\n-\t  char comma_flag;\n-\t  char last_char;\n+\n+\t  unsigned reversion_flag : 1; /* Format reversion has occurred.  */\n+\t  unsigned first_item : 1;\n+\t  unsigned seen_dollar : 1;\n+\t  unsigned sf_seen_eor : 1;\n+\t  unsigned eor_condition : 1;\n+\t  unsigned no_leading_blank : 1;\n+\t  unsigned char_flag : 1;\n+\t  unsigned input_complete : 1;\n+\t  unsigned at_eol : 1;\n+\t  unsigned comma_flag : 1;\n \t  /* A namelist specific flag used in the list directed library\n \t     to flag that calls are being made from namelist read (eg. to\n \t     ignore comments or to treat '/' as a terminator)  */\n-\t  char namelist_mode;\n+\t  unsigned namelist_mode : 1;\n \t  /* A namelist specific flag used in the list directed library\n \t     to flag read errors and return, so that an attempt can be\n \t     made to read a new object name.  */\n-\t  char nml_read_error;\n-\t  /* Storage area for values except for strings.  Must be large\n-\t     enough to hold a complex value (two reals) of the largest\n-\t     kind.  */\n-\t  char value[32];\n+\t  unsigned nml_read_error : 1;\n+\t  /* 20 unused bits.  */\n+\n+\t  char last_char;\n+\t  char nml_delim;\n+\n \t  int repeat_count;\n \t  int saved_length;\n \t  int saved_used;\n@@ -414,6 +414,11 @@ typedef struct st_parameter_dt\n \t  struct format_data *fmt;\n \t  jmp_buf *eof_jump;\n \t  namelist_info *ionml;\n+\n+\t  /* Storage area for values except for strings.  Must be large\n+\t     enough to hold a complex value (two reals) of the largest\n+\t     kind.  */\n+\t  char value[32];\n \t} p;\n       char pad[16 * sizeof (char *) + 32 * sizeof (int)];\n     } u;"}, {"sha": "1eb38d2533be9de74aa30f5a718f7dd2c36ab397", "filename": "libgfortran/io/list_read.c", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b90ba157c1cd22a67dcd58783626033fe94475d1/libgfortran%2Fio%2Flist_read.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b90ba157c1cd22a67dcd58783626033fe94475d1/libgfortran%2Fio%2Flist_read.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Flist_read.c?ref=b90ba157c1cd22a67dcd58783626033fe94475d1", "patch": "@@ -1489,8 +1489,7 @@ nml_parse_qualifier (st_parameter_dt *dtp, descriptor_dimension *ad,\n \t  eat_spaces (dtp);\n \t  neg = 0;\n \n-\t  /*process a potential sign.  */\n-\n+\t  /* Process a potential sign.  */\n \t  c = next_char (dtp);\n \t  switch (c)\n \t    {\n@@ -1506,8 +1505,7 @@ nml_parse_qualifier (st_parameter_dt *dtp, descriptor_dimension *ad,\n \t      break;\n \t    }\n \n-\t  /*process characters up to the next ':' , ',' or ')'  */\n-\n+\t  /* Process characters up to the next ':' , ',' or ')'.  */\n \t  for (;;)\n \t    {\n \t      c = next_char (dtp);\n@@ -1518,8 +1516,8 @@ nml_parse_qualifier (st_parameter_dt *dtp, descriptor_dimension *ad,\n \t\t  break;\n \n \t\tcase ',': case ')':\n-\t\t  if ( (c==',' && dim == rank -1)\n-\t\t    || (c==')' && dim  < rank -1))\n+\t\t  if ((c==',' && dim == rank -1)\n+\t\t      || (c==')' && dim < rank -1))\n \t\t    {\n \t\t      st_sprintf (parse_err_msg,\n \t\t\t\t  \"Bad number of index fields\");\n@@ -1549,7 +1547,7 @@ nml_parse_qualifier (st_parameter_dt *dtp, descriptor_dimension *ad,\n \t\t}\n \n \t      if ((c == ':' && indx == 1 && dtp->u.p.saved_string == 0)\n-\t\t|| (indx == 2 && dtp->u.p.saved_string == 0))\n+\t\t  || (indx == 2 && dtp->u.p.saved_string == 0))\n \t\t{\n \t\t  st_sprintf(parse_err_msg, \"Bad index triplet\");\n \t\t  goto err_ret;\n@@ -1558,14 +1556,13 @@ nml_parse_qualifier (st_parameter_dt *dtp, descriptor_dimension *ad,\n \t      /* If '( : ? )' or '( ? : )' break and flag read failure.  */\n \t      null_flag = 0;\n \t      if ((c == ':' && indx == 0 && dtp->u.p.saved_string == 0)\n-\t\t|| (indx==1 && dtp->u.p.saved_string == 0))\n+\t\t  || (indx==1 && dtp->u.p.saved_string == 0))\n \t\t{\n \t\t  null_flag = 1;\n \t\t  break;\n \t\t}\n \n \t      /* Now read the index.  */\n-\n \t      if (convert_integer (dtp, sizeof(int), neg))\n \t\t{\n \t\t  st_sprintf (parse_err_msg, \"Bad integer in index\");\n@@ -1574,52 +1571,47 @@ nml_parse_qualifier (st_parameter_dt *dtp, descriptor_dimension *ad,\n \t      break;\n \t    }\n \n-\t  /*feed the index values to the triplet arrays.  */\n-\n+\t  /* Feed the index values to the triplet arrays.  */\n \t  if (!null_flag)\n \t    {\n \t      if (indx == 0)\n-\t\tls[dim].start = *(int *)dtp->u.p.value;\n+\t\tmemcpy (&ls[dim].start, dtp->u.p.value, sizeof(int));\n \t      if (indx == 1)\n-\t\tls[dim].end   = *(int *)dtp->u.p.value;\n+\t\tmemcpy (&ls[dim].end, dtp->u.p.value, sizeof(int));\n \t      if (indx == 2)\n-\t\tls[dim].step  = *(int *)dtp->u.p.value;\n+\t\tmemcpy (&ls[dim].step, dtp->u.p.value, sizeof(int));\n \t    }\n \n-\t  /*singlet or doublet indices  */\n-\n+\t  /* Singlet or doublet indices.  */\n \t  if (c==',' || c==')')\n \t    {\n \t      if (indx == 0)\n \t\t{\n-\t\t  ls[dim].start = *(int *)dtp->u.p.value;\n-\t\t  ls[dim].end = *(int *)dtp->u.p.value;\n+\t\t  memcpy (&ls[dim].start, dtp->u.p.value, sizeof(int));\n+\t\t  ls[dim].end = ls[dim].start;\n \t\t}\n \t      break;\n \t    }\n \t}\n \n-      /*Check the values of the triplet indices.  */\n-\n-      if ( (ls[dim].start > (ssize_t)ad[dim].ubound)\n-\t|| (ls[dim].start < (ssize_t)ad[dim].lbound)\n-\t|| (ls[dim].end   > (ssize_t)ad[dim].ubound)\n-\t|| (ls[dim].end   < (ssize_t)ad[dim].lbound))\n+      /* Check the values of the triplet indices.  */\n+      if ((ls[dim].start > (ssize_t)ad[dim].ubound)\n+\t  || (ls[dim].start < (ssize_t)ad[dim].lbound)\n+\t  || (ls[dim].end > (ssize_t)ad[dim].ubound)\n+\t  || (ls[dim].end < (ssize_t)ad[dim].lbound))\n \t{\n \t  st_sprintf (parse_err_msg, \"Index %d out of range\", dim + 1);\n \t  goto err_ret;\n \t}\n       if (((ls[dim].end - ls[dim].start ) * ls[dim].step < 0)\n-\t|| (ls[dim].step == 0))\n+\t  || (ls[dim].step == 0))\n \t{\n \t  st_sprintf (parse_err_msg, \"Bad range in index %d\", dim + 1);\n \t  goto err_ret;\n \t}\n \n       /* Initialise the loop index counter.  */\n-\n       ls[dim].idx = ls[dim].start;\n-\n     }\n   eat_spaces (dtp);\n   return SUCCESS;"}]}