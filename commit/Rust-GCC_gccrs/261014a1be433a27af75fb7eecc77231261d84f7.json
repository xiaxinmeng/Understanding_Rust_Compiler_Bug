{"sha": "261014a1be433a27af75fb7eecc77231261d84f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYxMDE0YTFiZTQzM2EyN2FmNzVmYjdlZWNjNzcyMzEyNjFkODRmNw==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-20T14:14:35Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-20T14:14:35Z"}, "message": "[ARM][GCC][9x]: MVE ACLE predicated intrinsics with (dont-care) variant.\n\nThis patch supports following MVE ACLE predicated intrinsic with `_x` (dont-care) variant.\n* ``_x`` (dont-care) which indicates that the false-predicated lanes have undefined values.\nThese are syntactic sugar for merge intrinsics with a ``vuninitializedq`` inactive parameter.\n\nvabdq_x_f16, vabdq_x_f32, vabdq_x_s16, vabdq_x_s32, vabdq_x_s8, vabdq_x_u16, vabdq_x_u32, vabdq_x_u8,\nvabsq_x_f16, vabsq_x_f32, vabsq_x_s16, vabsq_x_s32, vabsq_x_s8, vaddq_x_f16, vaddq_x_f32, vaddq_x_n_f16,\nvaddq_x_n_f32, vaddq_x_n_s16, vaddq_x_n_s32, vaddq_x_n_s8, vaddq_x_n_u16, vaddq_x_n_u32, vaddq_x_n_u8,\nvaddq_x_s16, vaddq_x_s32, vaddq_x_s8, vaddq_x_u16, vaddq_x_u32, vaddq_x_u8, vandq_x_f16, vandq_x_f32,\nvandq_x_s16, vandq_x_s32, vandq_x_s8, vandq_x_u16, vandq_x_u32, vandq_x_u8, vbicq_x_f16, vbicq_x_f32,\nvbicq_x_s16, vbicq_x_s32, vbicq_x_s8, vbicq_x_u16, vbicq_x_u32, vbicq_x_u8, vbrsrq_x_n_f16,\nvbrsrq_x_n_f32, vbrsrq_x_n_s16, vbrsrq_x_n_s32, vbrsrq_x_n_s8, vbrsrq_x_n_u16, vbrsrq_x_n_u32,\nvbrsrq_x_n_u8, vcaddq_rot270_x_f16, vcaddq_rot270_x_f32, vcaddq_rot270_x_s16, vcaddq_rot270_x_s32,\nvcaddq_rot270_x_s8, vcaddq_rot270_x_u16, vcaddq_rot270_x_u32, vcaddq_rot270_x_u8, vcaddq_rot90_x_f16,\nvcaddq_rot90_x_f32, vcaddq_rot90_x_s16, vcaddq_rot90_x_s32, vcaddq_rot90_x_s8, vcaddq_rot90_x_u16,\nvcaddq_rot90_x_u32, vcaddq_rot90_x_u8, vclsq_x_s16, vclsq_x_s32, vclsq_x_s8, vclzq_x_s16, vclzq_x_s32,\nvclzq_x_s8, vclzq_x_u16, vclzq_x_u32, vclzq_x_u8, vcmulq_rot180_x_f16, vcmulq_rot180_x_f32,\nvcmulq_rot270_x_f16, vcmulq_rot270_x_f32, vcmulq_rot90_x_f16, vcmulq_rot90_x_f32, vcmulq_x_f16,\nvcmulq_x_f32, vcvtaq_x_s16_f16, vcvtaq_x_s32_f32, vcvtaq_x_u16_f16, vcvtaq_x_u32_f32, vcvtbq_x_f32_f16,\nvcvtmq_x_s16_f16, vcvtmq_x_s32_f32, vcvtmq_x_u16_f16, vcvtmq_x_u32_f32, vcvtnq_x_s16_f16,\nvcvtnq_x_s32_f32, vcvtnq_x_u16_f16, vcvtnq_x_u32_f32, vcvtpq_x_s16_f16, vcvtpq_x_s32_f32,\nvcvtpq_x_u16_f16, vcvtpq_x_u32_f32, vcvtq_x_f16_s16, vcvtq_x_f16_u16, vcvtq_x_f32_s32, vcvtq_x_f32_u32,\nvcvtq_x_n_f16_s16, vcvtq_x_n_f16_u16, vcvtq_x_n_f32_s32, vcvtq_x_n_f32_u32, vcvtq_x_n_s16_f16,\nvcvtq_x_n_s32_f32, vcvtq_x_n_u16_f16, vcvtq_x_n_u32_f32, vcvtq_x_s16_f16, vcvtq_x_s32_f32,\nvcvtq_x_u16_f16, vcvtq_x_u32_f32, vcvttq_x_f32_f16, vddupq_x_n_u16, vddupq_x_n_u32, vddupq_x_n_u8,\nvddupq_x_wb_u16, vddupq_x_wb_u32, vddupq_x_wb_u8, vdupq_x_n_f16, vdupq_x_n_f32, vdupq_x_n_s16,\nvdupq_x_n_s32, vdupq_x_n_s8, vdupq_x_n_u16, vdupq_x_n_u32, vdupq_x_n_u8, vdwdupq_x_n_u16, vdwdupq_x_n_u32,\nvdwdupq_x_n_u8, vdwdupq_x_wb_u16, vdwdupq_x_wb_u32, vdwdupq_x_wb_u8, veorq_x_f16, veorq_x_f32, veorq_x_s16,\nveorq_x_s32, veorq_x_s8, veorq_x_u16, veorq_x_u32, veorq_x_u8, vhaddq_x_n_s16, vhaddq_x_n_s32,\nvhaddq_x_n_s8, vhaddq_x_n_u16, vhaddq_x_n_u32, vhaddq_x_n_u8, vhaddq_x_s16, vhaddq_x_s32, vhaddq_x_s8,\nvhaddq_x_u16, vhaddq_x_u32, vhaddq_x_u8, vhcaddq_rot270_x_s16, vhcaddq_rot270_x_s32, vhcaddq_rot270_x_s8,\nvhcaddq_rot90_x_s16, vhcaddq_rot90_x_s32, vhcaddq_rot90_x_s8, vhsubq_x_n_s16, vhsubq_x_n_s32,\nvhsubq_x_n_s8, vhsubq_x_n_u16, vhsubq_x_n_u32, vhsubq_x_n_u8, vhsubq_x_s16, vhsubq_x_s32, vhsubq_x_s8,\nvhsubq_x_u16, vhsubq_x_u32, vhsubq_x_u8, vidupq_x_n_u16, vidupq_x_n_u32, vidupq_x_n_u8, vidupq_x_wb_u16,\nvidupq_x_wb_u32, vidupq_x_wb_u8, viwdupq_x_n_u16, viwdupq_x_n_u32, viwdupq_x_n_u8, viwdupq_x_wb_u16,\nviwdupq_x_wb_u32, viwdupq_x_wb_u8, vmaxnmq_x_f16, vmaxnmq_x_f32, vmaxq_x_s16, vmaxq_x_s32, vmaxq_x_s8,\nvmaxq_x_u16, vmaxq_x_u32, vmaxq_x_u8, vminnmq_x_f16, vminnmq_x_f32, vminq_x_s16, vminq_x_s32, vminq_x_s8,\nvminq_x_u16, vminq_x_u32, vminq_x_u8, vmovlbq_x_s16, vmovlbq_x_s8, vmovlbq_x_u16, vmovlbq_x_u8,\nvmovltq_x_s16, vmovltq_x_s8, vmovltq_x_u16, vmovltq_x_u8, vmulhq_x_s16, vmulhq_x_s32, vmulhq_x_s8,\nvmulhq_x_u16, vmulhq_x_u32, vmulhq_x_u8, vmullbq_int_x_s16, vmullbq_int_x_s32, vmullbq_int_x_s8,\nvmullbq_int_x_u16, vmullbq_int_x_u32, vmullbq_int_x_u8, vmullbq_poly_x_p16, vmullbq_poly_x_p8,\nvmulltq_int_x_s16, vmulltq_int_x_s32, vmulltq_int_x_s8, vmulltq_int_x_u16, vmulltq_int_x_u32,\nvmulltq_int_x_u8, vmulltq_poly_x_p16, vmulltq_poly_x_p8, vmulq_x_f16, vmulq_x_f32, vmulq_x_n_f16,\nvmulq_x_n_f32, vmulq_x_n_s16, vmulq_x_n_s32, vmulq_x_n_s8, vmulq_x_n_u16, vmulq_x_n_u32, vmulq_x_n_u8,\nvmulq_x_s16, vmulq_x_s32, vmulq_x_s8, vmulq_x_u16, vmulq_x_u32, vmulq_x_u8, vmvnq_x_n_s16, vmvnq_x_n_s32,\nvmvnq_x_n_u16, vmvnq_x_n_u32, vmvnq_x_s16, vmvnq_x_s32, vmvnq_x_s8, vmvnq_x_u16, vmvnq_x_u32, vmvnq_x_u8,\nvnegq_x_f16, vnegq_x_f32, vnegq_x_s16, vnegq_x_s32, vnegq_x_s8, vornq_x_f16, vornq_x_f32, vornq_x_s16,\nvornq_x_s32, vornq_x_s8, vornq_x_u16, vornq_x_u32, vornq_x_u8, vorrq_x_f16, vorrq_x_f32, vorrq_x_s16,\nvorrq_x_s32, vorrq_x_s8, vorrq_x_u16, vorrq_x_u32, vorrq_x_u8, vrev16q_x_s8, vrev16q_x_u8, vrev32q_x_f16,\nvrev32q_x_s16, vrev32q_x_s8, vrev32q_x_u16, vrev32q_x_u8, vrev64q_x_f16, vrev64q_x_f32, vrev64q_x_s16,\nvrev64q_x_s32, vrev64q_x_s8, vrev64q_x_u16, vrev64q_x_u32, vrev64q_x_u8, vrhaddq_x_s16, vrhaddq_x_s32,\nvrhaddq_x_s8, vrhaddq_x_u16, vrhaddq_x_u32, vrhaddq_x_u8, vrmulhq_x_s16, vrmulhq_x_s32, vrmulhq_x_s8,\nvrmulhq_x_u16, vrmulhq_x_u32, vrmulhq_x_u8, vrndaq_x_f16, vrndaq_x_f32, vrndmq_x_f16, vrndmq_x_f32,\nvrndnq_x_f16, vrndnq_x_f32, vrndpq_x_f16, vrndpq_x_f32, vrndq_x_f16, vrndq_x_f32, vrndxq_x_f16,\nvrndxq_x_f32, vrshlq_x_s16, vrshlq_x_s32, vrshlq_x_s8, vrshlq_x_u16, vrshlq_x_u32, vrshlq_x_u8,\nvrshrq_x_n_s16, vrshrq_x_n_s32, vrshrq_x_n_s8, vrshrq_x_n_u16, vrshrq_x_n_u32, vrshrq_x_n_u8,\nvshllbq_x_n_s16, vshllbq_x_n_s8, vshllbq_x_n_u16, vshllbq_x_n_u8, vshlltq_x_n_s16, vshlltq_x_n_s8,\nvshlltq_x_n_u16, vshlltq_x_n_u8, vshlq_x_n_s16, vshlq_x_n_s32, vshlq_x_n_s8, vshlq_x_n_u16, vshlq_x_n_u32,\nvshlq_x_n_u8, vshlq_x_s16, vshlq_x_s32, vshlq_x_s8, vshlq_x_u16, vshlq_x_u32, vshlq_x_u8, vshrq_x_n_s16,\nvshrq_x_n_s32, vshrq_x_n_s8, vshrq_x_n_u16, vshrq_x_n_u32, vshrq_x_n_u8, vsubq_x_f16, vsubq_x_f32,\nvsubq_x_n_f16, vsubq_x_n_f32, vsubq_x_n_s16, vsubq_x_n_s32, vsubq_x_n_s8, vsubq_x_n_u16, vsubq_x_n_u32,\nvsubq_x_n_u8, vsubq_x_s16, vsubq_x_s32, vsubq_x_s8, vsubq_x_u16, vsubq_x_u32, vsubq_x_u8.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1] for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm_mve.h (vddupq_x_n_u8): Define macro.\n\t(vddupq_x_n_u16): Likewise.\n\t(vddupq_x_n_u32): Likewise.\n\t(vddupq_x_wb_u8): Likewise.\n\t(vddupq_x_wb_u16): Likewise.\n\t(vddupq_x_wb_u32): Likewise.\n\t(vdwdupq_x_n_u8): Likewise.\n\t(vdwdupq_x_n_u16): Likewise.\n\t(vdwdupq_x_n_u32): Likewise.\n\t(vdwdupq_x_wb_u8): Likewise.\n\t(vdwdupq_x_wb_u16): Likewise.\n\t(vdwdupq_x_wb_u32): Likewise.\n\t(vidupq_x_n_u8): Likewise.\n\t(vidupq_x_n_u16): Likewise.\n\t(vidupq_x_n_u32): Likewise.\n\t(vidupq_x_wb_u8): Likewise.\n\t(vidupq_x_wb_u16): Likewise.\n\t(vidupq_x_wb_u32): Likewise.\n\t(viwdupq_x_n_u8): Likewise.\n\t(viwdupq_x_n_u16): Likewise.\n\t(viwdupq_x_n_u32): Likewise.\n\t(viwdupq_x_wb_u8): Likewise.\n\t(viwdupq_x_wb_u16): Likewise.\n\t(viwdupq_x_wb_u32): Likewise.\n\t(vdupq_x_n_s8): Likewise.\n\t(vdupq_x_n_s16): Likewise.\n\t(vdupq_x_n_s32): Likewise.\n\t(vdupq_x_n_u8): Likewise.\n\t(vdupq_x_n_u16): Likewise.\n\t(vdupq_x_n_u32): Likewise.\n\t(vminq_x_s8): Likewise.\n\t(vminq_x_s16): Likewise.\n\t(vminq_x_s32): Likewise.\n\t(vminq_x_u8): Likewise.\n\t(vminq_x_u16): Likewise.\n\t(vminq_x_u32): Likewise.\n\t(vmaxq_x_s8): Likewise.\n\t(vmaxq_x_s16): Likewise.\n\t(vmaxq_x_s32): Likewise.\n\t(vmaxq_x_u8): Likewise.\n\t(vmaxq_x_u16): Likewise.\n\t(vmaxq_x_u32): Likewise.\n\t(vabdq_x_s8): Likewise.\n\t(vabdq_x_s16): Likewise.\n\t(vabdq_x_s32): Likewise.\n\t(vabdq_x_u8): Likewise.\n\t(vabdq_x_u16): Likewise.\n\t(vabdq_x_u32): Likewise.\n\t(vabsq_x_s8): Likewise.\n\t(vabsq_x_s16): Likewise.\n\t(vabsq_x_s32): Likewise.\n\t(vaddq_x_s8): Likewise.\n\t(vaddq_x_s16): Likewise.\n\t(vaddq_x_s32): Likewise.\n\t(vaddq_x_n_s8): Likewise.\n\t(vaddq_x_n_s16): Likewise.\n\t(vaddq_x_n_s32): Likewise.\n\t(vaddq_x_u8): Likewise.\n\t(vaddq_x_u16): Likewise.\n\t(vaddq_x_u32): Likewise.\n\t(vaddq_x_n_u8): Likewise.\n\t(vaddq_x_n_u16): Likewise.\n\t(vaddq_x_n_u32): Likewise.\n\t(vclsq_x_s8): Likewise.\n\t(vclsq_x_s16): Likewise.\n\t(vclsq_x_s32): Likewise.\n\t(vclzq_x_s8): Likewise.\n\t(vclzq_x_s16): Likewise.\n\t(vclzq_x_s32): Likewise.\n\t(vclzq_x_u8): Likewise.\n\t(vclzq_x_u16): Likewise.\n\t(vclzq_x_u32): Likewise.\n\t(vnegq_x_s8): Likewise.\n\t(vnegq_x_s16): Likewise.\n\t(vnegq_x_s32): Likewise.\n\t(vmulhq_x_s8): Likewise.\n\t(vmulhq_x_s16): Likewise.\n\t(vmulhq_x_s32): Likewise.\n\t(vmulhq_x_u8): Likewise.\n\t(vmulhq_x_u16): Likewise.\n\t(vmulhq_x_u32): Likewise.\n\t(vmullbq_poly_x_p8): Likewise.\n\t(vmullbq_poly_x_p16): Likewise.\n\t(vmullbq_int_x_s8): Likewise.\n\t(vmullbq_int_x_s16): Likewise.\n\t(vmullbq_int_x_s32): Likewise.\n\t(vmullbq_int_x_u8): Likewise.\n\t(vmullbq_int_x_u16): Likewise.\n\t(vmullbq_int_x_u32): Likewise.\n\t(vmulltq_poly_x_p8): Likewise.\n\t(vmulltq_poly_x_p16): Likewise.\n\t(vmulltq_int_x_s8): Likewise.\n\t(vmulltq_int_x_s16): Likewise.\n\t(vmulltq_int_x_s32): Likewise.\n\t(vmulltq_int_x_u8): Likewise.\n\t(vmulltq_int_x_u16): Likewise.\n\t(vmulltq_int_x_u32): Likewise.\n\t(vmulq_x_s8): Likewise.\n\t(vmulq_x_s16): Likewise.\n\t(vmulq_x_s32): Likewise.\n\t(vmulq_x_n_s8): Likewise.\n\t(vmulq_x_n_s16): Likewise.\n\t(vmulq_x_n_s32): Likewise.\n\t(vmulq_x_u8): Likewise.\n\t(vmulq_x_u16): Likewise.\n\t(vmulq_x_u32): Likewise.\n\t(vmulq_x_n_u8): Likewise.\n\t(vmulq_x_n_u16): Likewise.\n\t(vmulq_x_n_u32): Likewise.\n\t(vsubq_x_s8): Likewise.\n\t(vsubq_x_s16): Likewise.\n\t(vsubq_x_s32): Likewise.\n\t(vsubq_x_n_s8): Likewise.\n\t(vsubq_x_n_s16): Likewise.\n\t(vsubq_x_n_s32): Likewise.\n\t(vsubq_x_u8): Likewise.\n\t(vsubq_x_u16): Likewise.\n\t(vsubq_x_u32): Likewise.\n\t(vsubq_x_n_u8): Likewise.\n\t(vsubq_x_n_u16): Likewise.\n\t(vsubq_x_n_u32): Likewise.\n\t(vcaddq_rot90_x_s8): Likewise.\n\t(vcaddq_rot90_x_s16): Likewise.\n\t(vcaddq_rot90_x_s32): Likewise.\n\t(vcaddq_rot90_x_u8): Likewise.\n\t(vcaddq_rot90_x_u16): Likewise.\n\t(vcaddq_rot90_x_u32): Likewise.\n\t(vcaddq_rot270_x_s8): Likewise.\n\t(vcaddq_rot270_x_s16): Likewise.\n\t(vcaddq_rot270_x_s32): Likewise.\n\t(vcaddq_rot270_x_u8): Likewise.\n\t(vcaddq_rot270_x_u16): Likewise.\n\t(vcaddq_rot270_x_u32): Likewise.\n\t(vhaddq_x_n_s8): Likewise.\n\t(vhaddq_x_n_s16): Likewise.\n\t(vhaddq_x_n_s32): Likewise.\n\t(vhaddq_x_n_u8): Likewise.\n\t(vhaddq_x_n_u16): Likewise.\n\t(vhaddq_x_n_u32): Likewise.\n\t(vhaddq_x_s8): Likewise.\n\t(vhaddq_x_s16): Likewise.\n\t(vhaddq_x_s32): Likewise.\n\t(vhaddq_x_u8): Likewise.\n\t(vhaddq_x_u16): Likewise.\n\t(vhaddq_x_u32): Likewise.\n\t(vhcaddq_rot90_x_s8): Likewise.\n\t(vhcaddq_rot90_x_s16): Likewise.\n\t(vhcaddq_rot90_x_s32): Likewise.\n\t(vhcaddq_rot270_x_s8): Likewise.\n\t(vhcaddq_rot270_x_s16): Likewise.\n\t(vhcaddq_rot270_x_s32): Likewise.\n\t(vhsubq_x_n_s8): Likewise.\n\t(vhsubq_x_n_s16): Likewise.\n\t(vhsubq_x_n_s32): Likewise.\n\t(vhsubq_x_n_u8): Likewise.\n\t(vhsubq_x_n_u16): Likewise.\n\t(vhsubq_x_n_u32): Likewise.\n\t(vhsubq_x_s8): Likewise.\n\t(vhsubq_x_s16): Likewise.\n\t(vhsubq_x_s32): Likewise.\n\t(vhsubq_x_u8): Likewise.\n\t(vhsubq_x_u16): Likewise.\n\t(vhsubq_x_u32): Likewise.\n\t(vrhaddq_x_s8): Likewise.\n\t(vrhaddq_x_s16): Likewise.\n\t(vrhaddq_x_s32): Likewise.\n\t(vrhaddq_x_u8): Likewise.\n\t(vrhaddq_x_u16): Likewise.\n\t(vrhaddq_x_u32): Likewise.\n\t(vrmulhq_x_s8): Likewise.\n\t(vrmulhq_x_s16): Likewise.\n\t(vrmulhq_x_s32): Likewise.\n\t(vrmulhq_x_u8): Likewise.\n\t(vrmulhq_x_u16): Likewise.\n\t(vrmulhq_x_u32): Likewise.\n\t(vandq_x_s8): Likewise.\n\t(vandq_x_s16): Likewise.\n\t(vandq_x_s32): Likewise.\n\t(vandq_x_u8): Likewise.\n\t(vandq_x_u16): Likewise.\n\t(vandq_x_u32): Likewise.\n\t(vbicq_x_s8): Likewise.\n\t(vbicq_x_s16): Likewise.\n\t(vbicq_x_s32): Likewise.\n\t(vbicq_x_u8): Likewise.\n\t(vbicq_x_u16): Likewise.\n\t(vbicq_x_u32): Likewise.\n\t(vbrsrq_x_n_s8): Likewise.\n\t(vbrsrq_x_n_s16): Likewise.\n\t(vbrsrq_x_n_s32): Likewise.\n\t(vbrsrq_x_n_u8): Likewise.\n\t(vbrsrq_x_n_u16): Likewise.\n\t(vbrsrq_x_n_u32): Likewise.\n\t(veorq_x_s8): Likewise.\n\t(veorq_x_s16): Likewise.\n\t(veorq_x_s32): Likewise.\n\t(veorq_x_u8): Likewise.\n\t(veorq_x_u16): Likewise.\n\t(veorq_x_u32): Likewise.\n\t(vmovlbq_x_s8): Likewise.\n\t(vmovlbq_x_s16): Likewise.\n\t(vmovlbq_x_u8): Likewise.\n\t(vmovlbq_x_u16): Likewise.\n\t(vmovltq_x_s8): Likewise.\n\t(vmovltq_x_s16): Likewise.\n\t(vmovltq_x_u8): Likewise.\n\t(vmovltq_x_u16): Likewise.\n\t(vmvnq_x_s8): Likewise.\n\t(vmvnq_x_s16): Likewise.\n\t(vmvnq_x_s32): Likewise.\n\t(vmvnq_x_u8): Likewise.\n\t(vmvnq_x_u16): Likewise.\n\t(vmvnq_x_u32): Likewise.\n\t(vmvnq_x_n_s16): Likewise.\n\t(vmvnq_x_n_s32): Likewise.\n\t(vmvnq_x_n_u16): Likewise.\n\t(vmvnq_x_n_u32): Likewise.\n\t(vornq_x_s8): Likewise.\n\t(vornq_x_s16): Likewise.\n\t(vornq_x_s32): Likewise.\n\t(vornq_x_u8): Likewise.\n\t(vornq_x_u16): Likewise.\n\t(vornq_x_u32): Likewise.\n\t(vorrq_x_s8): Likewise.\n\t(vorrq_x_s16): Likewise.\n\t(vorrq_x_s32): Likewise.\n\t(vorrq_x_u8): Likewise.\n\t(vorrq_x_u16): Likewise.\n\t(vorrq_x_u32): Likewise.\n\t(vrev16q_x_s8): Likewise.\n\t(vrev16q_x_u8): Likewise.\n\t(vrev32q_x_s8): Likewise.\n\t(vrev32q_x_s16): Likewise.\n\t(vrev32q_x_u8): Likewise.\n\t(vrev32q_x_u16): Likewise.\n\t(vrev64q_x_s8): Likewise.\n\t(vrev64q_x_s16): Likewise.\n\t(vrev64q_x_s32): Likewise.\n\t(vrev64q_x_u8): Likewise.\n\t(vrev64q_x_u16): Likewise.\n\t(vrev64q_x_u32): Likewise.\n\t(vrshlq_x_s8): Likewise.\n\t(vrshlq_x_s16): Likewise.\n\t(vrshlq_x_s32): Likewise.\n\t(vrshlq_x_u8): Likewise.\n\t(vrshlq_x_u16): Likewise.\n\t(vrshlq_x_u32): Likewise.\n\t(vshllbq_x_n_s8): Likewise.\n\t(vshllbq_x_n_s16): Likewise.\n\t(vshllbq_x_n_u8): Likewise.\n\t(vshllbq_x_n_u16): Likewise.\n\t(vshlltq_x_n_s8): Likewise.\n\t(vshlltq_x_n_s16): Likewise.\n\t(vshlltq_x_n_u8): Likewise.\n\t(vshlltq_x_n_u16): Likewise.\n\t(vshlq_x_s8): Likewise.\n\t(vshlq_x_s16): Likewise.\n\t(vshlq_x_s32): Likewise.\n\t(vshlq_x_u8): Likewise.\n\t(vshlq_x_u16): Likewise.\n\t(vshlq_x_u32): Likewise.\n\t(vshlq_x_n_s8): Likewise.\n\t(vshlq_x_n_s16): Likewise.\n\t(vshlq_x_n_s32): Likewise.\n\t(vshlq_x_n_u8): Likewise.\n\t(vshlq_x_n_u16): Likewise.\n\t(vshlq_x_n_u32): Likewise.\n\t(vrshrq_x_n_s8): Likewise.\n\t(vrshrq_x_n_s16): Likewise.\n\t(vrshrq_x_n_s32): Likewise.\n\t(vrshrq_x_n_u8): Likewise.\n\t(vrshrq_x_n_u16): Likewise.\n\t(vrshrq_x_n_u32): Likewise.\n\t(vshrq_x_n_s8): Likewise.\n\t(vshrq_x_n_s16): Likewise.\n\t(vshrq_x_n_s32): Likewise.\n\t(vshrq_x_n_u8): Likewise.\n\t(vshrq_x_n_u16): Likewise.\n\t(vshrq_x_n_u32): Likewise.\n\t(vdupq_x_n_f16): Likewise.\n\t(vdupq_x_n_f32): Likewise.\n\t(vminnmq_x_f16): Likewise.\n\t(vminnmq_x_f32): Likewise.\n\t(vmaxnmq_x_f16): Likewise.\n\t(vmaxnmq_x_f32): Likewise.\n\t(vabdq_x_f16): Likewise.\n\t(vabdq_x_f32): Likewise.\n\t(vabsq_x_f16): Likewise.\n\t(vabsq_x_f32): Likewise.\n\t(vaddq_x_f16): Likewise.\n\t(vaddq_x_f32): Likewise.\n\t(vaddq_x_n_f16): Likewise.\n\t(vaddq_x_n_f32): Likewise.\n\t(vnegq_x_f16): Likewise.\n\t(vnegq_x_f32): Likewise.\n\t(vmulq_x_f16): Likewise.\n\t(vmulq_x_f32): Likewise.\n\t(vmulq_x_n_f16): Likewise.\n\t(vmulq_x_n_f32): Likewise.\n\t(vsubq_x_f16): Likewise.\n\t(vsubq_x_f32): Likewise.\n\t(vsubq_x_n_f16): Likewise.\n\t(vsubq_x_n_f32): Likewise.\n\t(vcaddq_rot90_x_f16): Likewise.\n\t(vcaddq_rot90_x_f32): Likewise.\n\t(vcaddq_rot270_x_f16): Likewise.\n\t(vcaddq_rot270_x_f32): Likewise.\n\t(vcmulq_x_f16): Likewise.\n\t(vcmulq_x_f32): Likewise.\n\t(vcmulq_rot90_x_f16): Likewise.\n\t(vcmulq_rot90_x_f32): Likewise.\n\t(vcmulq_rot180_x_f16): Likewise.\n\t(vcmulq_rot180_x_f32): Likewise.\n\t(vcmulq_rot270_x_f16): Likewise.\n\t(vcmulq_rot270_x_f32): Likewise.\n\t(vcvtaq_x_s16_f16): Likewise.\n\t(vcvtaq_x_s32_f32): Likewise.\n\t(vcvtaq_x_u16_f16): Likewise.\n\t(vcvtaq_x_u32_f32): Likewise.\n\t(vcvtnq_x_s16_f16): Likewise.\n\t(vcvtnq_x_s32_f32): Likewise.\n\t(vcvtnq_x_u16_f16): Likewise.\n\t(vcvtnq_x_u32_f32): Likewise.\n\t(vcvtpq_x_s16_f16): Likewise.\n\t(vcvtpq_x_s32_f32): Likewise.\n\t(vcvtpq_x_u16_f16): Likewise.\n\t(vcvtpq_x_u32_f32): Likewise.\n\t(vcvtmq_x_s16_f16): Likewise.\n\t(vcvtmq_x_s32_f32): Likewise.\n\t(vcvtmq_x_u16_f16): Likewise.\n\t(vcvtmq_x_u32_f32): Likewise.\n\t(vcvtbq_x_f32_f16): Likewise.\n\t(vcvttq_x_f32_f16): Likewise.\n\t(vcvtq_x_f16_u16): Likewise.\n\t(vcvtq_x_f16_s16): Likewise.\n\t(vcvtq_x_f32_s32): Likewise.\n\t(vcvtq_x_f32_u32): Likewise.\n\t(vcvtq_x_n_f16_s16): Likewise.\n\t(vcvtq_x_n_f16_u16): Likewise.\n\t(vcvtq_x_n_f32_s32): Likewise.\n\t(vcvtq_x_n_f32_u32): Likewise.\n\t(vcvtq_x_s16_f16): Likewise.\n\t(vcvtq_x_s32_f32): Likewise.\n\t(vcvtq_x_u16_f16): Likewise.\n\t(vcvtq_x_u32_f32): Likewise.\n\t(vcvtq_x_n_s16_f16): Likewise.\n\t(vcvtq_x_n_s32_f32): Likewise.\n\t(vcvtq_x_n_u16_f16): Likewise.\n\t(vcvtq_x_n_u32_f32): Likewise.\n\t(vrndq_x_f16): Likewise.\n\t(vrndq_x_f32): Likewise.\n\t(vrndnq_x_f16): Likewise.\n\t(vrndnq_x_f32): Likewise.\n\t(vrndmq_x_f16): Likewise.\n\t(vrndmq_x_f32): Likewise.\n\t(vrndpq_x_f16): Likewise.\n\t(vrndpq_x_f32): Likewise.\n\t(vrndaq_x_f16): Likewise.\n\t(vrndaq_x_f32): Likewise.\n\t(vrndxq_x_f16): Likewise.\n\t(vrndxq_x_f32): Likewise.\n\t(vandq_x_f16): Likewise.\n\t(vandq_x_f32): Likewise.\n\t(vbicq_x_f16): Likewise.\n\t(vbicq_x_f32): Likewise.\n\t(vbrsrq_x_n_f16): Likewise.\n\t(vbrsrq_x_n_f32): Likewise.\n\t(veorq_x_f16): Likewise.\n\t(veorq_x_f32): Likewise.\n\t(vornq_x_f16): Likewise.\n\t(vornq_x_f32): Likewise.\n\t(vorrq_x_f16): Likewise.\n\t(vorrq_x_f32): Likewise.\n\t(vrev32q_x_f16): Likewise.\n\t(vrev64q_x_f16): Likewise.\n\t(vrev64q_x_f32): Likewise.\n\t(__arm_vddupq_x_n_u8): Define intrinsic.\n\t(__arm_vddupq_x_n_u16): Likewise.\n\t(__arm_vddupq_x_n_u32): Likewise.\n\t(__arm_vddupq_x_wb_u8): Likewise.\n\t(__arm_vddupq_x_wb_u16): Likewise.\n\t(__arm_vddupq_x_wb_u32): Likewise.\n\t(__arm_vdwdupq_x_n_u8): Likewise.\n\t(__arm_vdwdupq_x_n_u16): Likewise.\n\t(__arm_vdwdupq_x_n_u32): Likewise.\n\t(__arm_vdwdupq_x_wb_u8): Likewise.\n\t(__arm_vdwdupq_x_wb_u16): Likewise.\n\t(__arm_vdwdupq_x_wb_u32): Likewise.\n\t(__arm_vidupq_x_n_u8): Likewise.\n\t(__arm_vidupq_x_n_u16): Likewise.\n\t(__arm_vidupq_x_n_u32): Likewise.\n\t(__arm_vidupq_x_wb_u8): Likewise.\n\t(__arm_vidupq_x_wb_u16): Likewise.\n\t(__arm_vidupq_x_wb_u32): Likewise.\n\t(__arm_viwdupq_x_n_u8): Likewise.\n\t(__arm_viwdupq_x_n_u16): Likewise.\n\t(__arm_viwdupq_x_n_u32): Likewise.\n\t(__arm_viwdupq_x_wb_u8): Likewise.\n\t(__arm_viwdupq_x_wb_u16): Likewise.\n\t(__arm_viwdupq_x_wb_u32): Likewise.\n\t(__arm_vdupq_x_n_s8): Likewise.\n\t(__arm_vdupq_x_n_s16): Likewise.\n\t(__arm_vdupq_x_n_s32): Likewise.\n\t(__arm_vdupq_x_n_u8): Likewise.\n\t(__arm_vdupq_x_n_u16): Likewise.\n\t(__arm_vdupq_x_n_u32): Likewise.\n\t(__arm_vminq_x_s8): Likewise.\n\t(__arm_vminq_x_s16): Likewise.\n\t(__arm_vminq_x_s32): Likewise.\n\t(__arm_vminq_x_u8): Likewise.\n\t(__arm_vminq_x_u16): Likewise.\n\t(__arm_vminq_x_u32): Likewise.\n\t(__arm_vmaxq_x_s8): Likewise.\n\t(__arm_vmaxq_x_s16): Likewise.\n\t(__arm_vmaxq_x_s32): Likewise.\n\t(__arm_vmaxq_x_u8): Likewise.\n\t(__arm_vmaxq_x_u16): Likewise.\n\t(__arm_vmaxq_x_u32): Likewise.\n\t(__arm_vabdq_x_s8): Likewise.\n\t(__arm_vabdq_x_s16): Likewise.\n\t(__arm_vabdq_x_s32): Likewise.\n\t(__arm_vabdq_x_u8): Likewise.\n\t(__arm_vabdq_x_u16): Likewise.\n\t(__arm_vabdq_x_u32): Likewise.\n\t(__arm_vabsq_x_s8): Likewise.\n\t(__arm_vabsq_x_s16): Likewise.\n\t(__arm_vabsq_x_s32): Likewise.\n\t(__arm_vaddq_x_s8): Likewise.\n\t(__arm_vaddq_x_s16): Likewise.\n\t(__arm_vaddq_x_s32): Likewise.\n\t(__arm_vaddq_x_n_s8): Likewise.\n\t(__arm_vaddq_x_n_s16): Likewise.\n\t(__arm_vaddq_x_n_s32): Likewise.\n\t(__arm_vaddq_x_u8): Likewise.\n\t(__arm_vaddq_x_u16): Likewise.\n\t(__arm_vaddq_x_u32): Likewise.\n\t(__arm_vaddq_x_n_u8): Likewise.\n\t(__arm_vaddq_x_n_u16): Likewise.\n\t(__arm_vaddq_x_n_u32): Likewise.\n\t(__arm_vclsq_x_s8): Likewise.\n\t(__arm_vclsq_x_s16): Likewise.\n\t(__arm_vclsq_x_s32): Likewise.\n\t(__arm_vclzq_x_s8): Likewise.\n\t(__arm_vclzq_x_s16): Likewise.\n\t(__arm_vclzq_x_s32): Likewise.\n\t(__arm_vclzq_x_u8): Likewise.\n\t(__arm_vclzq_x_u16): Likewise.\n\t(__arm_vclzq_x_u32): Likewise.\n\t(__arm_vnegq_x_s8): Likewise.\n\t(__arm_vnegq_x_s16): Likewise.\n\t(__arm_vnegq_x_s32): Likewise.\n\t(__arm_vmulhq_x_s8): Likewise.\n\t(__arm_vmulhq_x_s16): Likewise.\n\t(__arm_vmulhq_x_s32): Likewise.\n\t(__arm_vmulhq_x_u8): Likewise.\n\t(__arm_vmulhq_x_u16): Likewise.\n\t(__arm_vmulhq_x_u32): Likewise.\n\t(__arm_vmullbq_poly_x_p8): Likewise.\n\t(__arm_vmullbq_poly_x_p16): Likewise.\n\t(__arm_vmullbq_int_x_s8): Likewise.\n\t(__arm_vmullbq_int_x_s16): Likewise.\n\t(__arm_vmullbq_int_x_s32): Likewise.\n\t(__arm_vmullbq_int_x_u8): Likewise.\n\t(__arm_vmullbq_int_x_u16): Likewise.\n\t(__arm_vmullbq_int_x_u32): Likewise.\n\t(__arm_vmulltq_poly_x_p8): Likewise.\n\t(__arm_vmulltq_poly_x_p16): Likewise.\n\t(__arm_vmulltq_int_x_s8): Likewise.\n\t(__arm_vmulltq_int_x_s16): Likewise.\n\t(__arm_vmulltq_int_x_s32): Likewise.\n\t(__arm_vmulltq_int_x_u8): Likewise.\n\t(__arm_vmulltq_int_x_u16): Likewise.\n\t(__arm_vmulltq_int_x_u32): Likewise.\n\t(__arm_vmulq_x_s8): Likewise.\n\t(__arm_vmulq_x_s16): Likewise.\n\t(__arm_vmulq_x_s32): Likewise.\n\t(__arm_vmulq_x_n_s8): Likewise.\n\t(__arm_vmulq_x_n_s16): Likewise.\n\t(__arm_vmulq_x_n_s32): Likewise.\n\t(__arm_vmulq_x_u8): Likewise.\n\t(__arm_vmulq_x_u16): Likewise.\n\t(__arm_vmulq_x_u32): Likewise.\n\t(__arm_vmulq_x_n_u8): Likewise.\n\t(__arm_vmulq_x_n_u16): Likewise.\n\t(__arm_vmulq_x_n_u32): Likewise.\n\t(__arm_vsubq_x_s8): Likewise.\n\t(__arm_vsubq_x_s16): Likewise.\n\t(__arm_vsubq_x_s32): Likewise.\n\t(__arm_vsubq_x_n_s8): Likewise.\n\t(__arm_vsubq_x_n_s16): Likewise.\n\t(__arm_vsubq_x_n_s32): Likewise.\n\t(__arm_vsubq_x_u8): Likewise.\n\t(__arm_vsubq_x_u16): Likewise.\n\t(__arm_vsubq_x_u32): Likewise.\n\t(__arm_vsubq_x_n_u8): Likewise.\n\t(__arm_vsubq_x_n_u16): Likewise.\n\t(__arm_vsubq_x_n_u32): Likewise.\n\t(__arm_vcaddq_rot90_x_s8): Likewise.\n\t(__arm_vcaddq_rot90_x_s16): Likewise.\n\t(__arm_vcaddq_rot90_x_s32): Likewise.\n\t(__arm_vcaddq_rot90_x_u8): Likewise.\n\t(__arm_vcaddq_rot90_x_u16): Likewise.\n\t(__arm_vcaddq_rot90_x_u32): Likewise.\n\t(__arm_vcaddq_rot270_x_s8): Likewise.\n\t(__arm_vcaddq_rot270_x_s16): Likewise.\n\t(__arm_vcaddq_rot270_x_s32): Likewise.\n\t(__arm_vcaddq_rot270_x_u8): Likewise.\n\t(__arm_vcaddq_rot270_x_u16): Likewise.\n\t(__arm_vcaddq_rot270_x_u32): Likewise.\n\t(__arm_vhaddq_x_n_s8): Likewise.\n\t(__arm_vhaddq_x_n_s16): Likewise.\n\t(__arm_vhaddq_x_n_s32): Likewise.\n\t(__arm_vhaddq_x_n_u8): Likewise.\n\t(__arm_vhaddq_x_n_u16): Likewise.\n\t(__arm_vhaddq_x_n_u32): Likewise.\n\t(__arm_vhaddq_x_s8): Likewise.\n\t(__arm_vhaddq_x_s16): Likewise.\n\t(__arm_vhaddq_x_s32): Likewise.\n\t(__arm_vhaddq_x_u8): Likewise.\n\t(__arm_vhaddq_x_u16): Likewise.\n\t(__arm_vhaddq_x_u32): Likewise.\n\t(__arm_vhcaddq_rot90_x_s8): Likewise.\n\t(__arm_vhcaddq_rot90_x_s16): Likewise.\n\t(__arm_vhcaddq_rot90_x_s32): Likewise.\n\t(__arm_vhcaddq_rot270_x_s8): Likewise.\n\t(__arm_vhcaddq_rot270_x_s16): Likewise.\n\t(__arm_vhcaddq_rot270_x_s32): Likewise.\n\t(__arm_vhsubq_x_n_s8): Likewise.\n\t(__arm_vhsubq_x_n_s16): Likewise.\n\t(__arm_vhsubq_x_n_s32): Likewise.\n\t(__arm_vhsubq_x_n_u8): Likewise.\n\t(__arm_vhsubq_x_n_u16): Likewise.\n\t(__arm_vhsubq_x_n_u32): Likewise.\n\t(__arm_vhsubq_x_s8): Likewise.\n\t(__arm_vhsubq_x_s16): Likewise.\n\t(__arm_vhsubq_x_s32): Likewise.\n\t(__arm_vhsubq_x_u8): Likewise.\n\t(__arm_vhsubq_x_u16): Likewise.\n\t(__arm_vhsubq_x_u32): Likewise.\n\t(__arm_vrhaddq_x_s8): Likewise.\n\t(__arm_vrhaddq_x_s16): Likewise.\n\t(__arm_vrhaddq_x_s32): Likewise.\n\t(__arm_vrhaddq_x_u8): Likewise.\n\t(__arm_vrhaddq_x_u16): Likewise.\n\t(__arm_vrhaddq_x_u32): Likewise.\n\t(__arm_vrmulhq_x_s8): Likewise.\n\t(__arm_vrmulhq_x_s16): Likewise.\n\t(__arm_vrmulhq_x_s32): Likewise.\n\t(__arm_vrmulhq_x_u8): Likewise.\n\t(__arm_vrmulhq_x_u16): Likewise.\n\t(__arm_vrmulhq_x_u32): Likewise.\n\t(__arm_vandq_x_s8): Likewise.\n\t(__arm_vandq_x_s16): Likewise.\n\t(__arm_vandq_x_s32): Likewise.\n\t(__arm_vandq_x_u8): Likewise.\n\t(__arm_vandq_x_u16): Likewise.\n\t(__arm_vandq_x_u32): Likewise.\n\t(__arm_vbicq_x_s8): Likewise.\n\t(__arm_vbicq_x_s16): Likewise.\n\t(__arm_vbicq_x_s32): Likewise.\n\t(__arm_vbicq_x_u8): Likewise.\n\t(__arm_vbicq_x_u16): Likewise.\n\t(__arm_vbicq_x_u32): Likewise.\n\t(__arm_vbrsrq_x_n_s8): Likewise.\n\t(__arm_vbrsrq_x_n_s16): Likewise.\n\t(__arm_vbrsrq_x_n_s32): Likewise.\n\t(__arm_vbrsrq_x_n_u8): Likewise.\n\t(__arm_vbrsrq_x_n_u16): Likewise.\n\t(__arm_vbrsrq_x_n_u32): Likewise.\n\t(__arm_veorq_x_s8): Likewise.\n\t(__arm_veorq_x_s16): Likewise.\n\t(__arm_veorq_x_s32): Likewise.\n\t(__arm_veorq_x_u8): Likewise.\n\t(__arm_veorq_x_u16): Likewise.\n\t(__arm_veorq_x_u32): Likewise.\n\t(__arm_vmovlbq_x_s8): Likewise.\n\t(__arm_vmovlbq_x_s16): Likewise.\n\t(__arm_vmovlbq_x_u8): Likewise.\n\t(__arm_vmovlbq_x_u16): Likewise.\n\t(__arm_vmovltq_x_s8): Likewise.\n\t(__arm_vmovltq_x_s16): Likewise.\n\t(__arm_vmovltq_x_u8): Likewise.\n\t(__arm_vmovltq_x_u16): Likewise.\n\t(__arm_vmvnq_x_s8): Likewise.\n\t(__arm_vmvnq_x_s16): Likewise.\n\t(__arm_vmvnq_x_s32): Likewise.\n\t(__arm_vmvnq_x_u8): Likewise.\n\t(__arm_vmvnq_x_u16): Likewise.\n\t(__arm_vmvnq_x_u32): Likewise.\n\t(__arm_vmvnq_x_n_s16): Likewise.\n\t(__arm_vmvnq_x_n_s32): Likewise.\n\t(__arm_vmvnq_x_n_u16): Likewise.\n\t(__arm_vmvnq_x_n_u32): Likewise.\n\t(__arm_vornq_x_s8): Likewise.\n\t(__arm_vornq_x_s16): Likewise.\n\t(__arm_vornq_x_s32): Likewise.\n\t(__arm_vornq_x_u8): Likewise.\n\t(__arm_vornq_x_u16): Likewise.\n\t(__arm_vornq_x_u32): Likewise.\n\t(__arm_vorrq_x_s8): Likewise.\n\t(__arm_vorrq_x_s16): Likewise.\n\t(__arm_vorrq_x_s32): Likewise.\n\t(__arm_vorrq_x_u8): Likewise.\n\t(__arm_vorrq_x_u16): Likewise.\n\t(__arm_vorrq_x_u32): Likewise.\n\t(__arm_vrev16q_x_s8): Likewise.\n\t(__arm_vrev16q_x_u8): Likewise.\n\t(__arm_vrev32q_x_s8): Likewise.\n\t(__arm_vrev32q_x_s16): Likewise.\n\t(__arm_vrev32q_x_u8): Likewise.\n\t(__arm_vrev32q_x_u16): Likewise.\n\t(__arm_vrev64q_x_s8): Likewise.\n\t(__arm_vrev64q_x_s16): Likewise.\n\t(__arm_vrev64q_x_s32): Likewise.\n\t(__arm_vrev64q_x_u8): Likewise.\n\t(__arm_vrev64q_x_u16): Likewise.\n\t(__arm_vrev64q_x_u32): Likewise.\n\t(__arm_vrshlq_x_s8): Likewise.\n\t(__arm_vrshlq_x_s16): Likewise.\n\t(__arm_vrshlq_x_s32): Likewise.\n\t(__arm_vrshlq_x_u8): Likewise.\n\t(__arm_vrshlq_x_u16): Likewise.\n\t(__arm_vrshlq_x_u32): Likewise.\n\t(__arm_vshllbq_x_n_s8): Likewise.\n\t(__arm_vshllbq_x_n_s16): Likewise.\n\t(__arm_vshllbq_x_n_u8): Likewise.\n\t(__arm_vshllbq_x_n_u16): Likewise.\n\t(__arm_vshlltq_x_n_s8): Likewise.\n\t(__arm_vshlltq_x_n_s16): Likewise.\n\t(__arm_vshlltq_x_n_u8): Likewise.\n\t(__arm_vshlltq_x_n_u16): Likewise.\n\t(__arm_vshlq_x_s8): Likewise.\n\t(__arm_vshlq_x_s16): Likewise.\n\t(__arm_vshlq_x_s32): Likewise.\n\t(__arm_vshlq_x_u8): Likewise.\n\t(__arm_vshlq_x_u16): Likewise.\n\t(__arm_vshlq_x_u32): Likewise.\n\t(__arm_vshlq_x_n_s8): Likewise.\n\t(__arm_vshlq_x_n_s16): Likewise.\n\t(__arm_vshlq_x_n_s32): Likewise.\n\t(__arm_vshlq_x_n_u8): Likewise.\n\t(__arm_vshlq_x_n_u16): Likewise.\n\t(__arm_vshlq_x_n_u32): Likewise.\n\t(__arm_vrshrq_x_n_s8): Likewise.\n\t(__arm_vrshrq_x_n_s16): Likewise.\n\t(__arm_vrshrq_x_n_s32): Likewise.\n\t(__arm_vrshrq_x_n_u8): Likewise.\n\t(__arm_vrshrq_x_n_u16): Likewise.\n\t(__arm_vrshrq_x_n_u32): Likewise.\n\t(__arm_vshrq_x_n_s8): Likewise.\n\t(__arm_vshrq_x_n_s16): Likewise.\n\t(__arm_vshrq_x_n_s32): Likewise.\n\t(__arm_vshrq_x_n_u8): Likewise.\n\t(__arm_vshrq_x_n_u16): Likewise.\n\t(__arm_vshrq_x_n_u32): Likewise.\n\t(__arm_vdupq_x_n_f16): Likewise.\n\t(__arm_vdupq_x_n_f32): Likewise.\n\t(__arm_vminnmq_x_f16): Likewise.\n\t(__arm_vminnmq_x_f32): Likewise.\n\t(__arm_vmaxnmq_x_f16): Likewise.\n\t(__arm_vmaxnmq_x_f32): Likewise.\n\t(__arm_vabdq_x_f16): Likewise.\n\t(__arm_vabdq_x_f32): Likewise.\n\t(__arm_vabsq_x_f16): Likewise.\n\t(__arm_vabsq_x_f32): Likewise.\n\t(__arm_vaddq_x_f16): Likewise.\n\t(__arm_vaddq_x_f32): Likewise.\n\t(__arm_vaddq_x_n_f16): Likewise.\n\t(__arm_vaddq_x_n_f32): Likewise.\n\t(__arm_vnegq_x_f16): Likewise.\n\t(__arm_vnegq_x_f32): Likewise.\n\t(__arm_vmulq_x_f16): Likewise.\n\t(__arm_vmulq_x_f32): Likewise.\n\t(__arm_vmulq_x_n_f16): Likewise.\n\t(__arm_vmulq_x_n_f32): Likewise.\n\t(__arm_vsubq_x_f16): Likewise.\n\t(__arm_vsubq_x_f32): Likewise.\n\t(__arm_vsubq_x_n_f16): Likewise.\n\t(__arm_vsubq_x_n_f32): Likewise.\n\t(__arm_vcaddq_rot90_x_f16): Likewise.\n\t(__arm_vcaddq_rot90_x_f32): Likewise.\n\t(__arm_vcaddq_rot270_x_f16): Likewise.\n\t(__arm_vcaddq_rot270_x_f32): Likewise.\n\t(__arm_vcmulq_x_f16): Likewise.\n\t(__arm_vcmulq_x_f32): Likewise.\n\t(__arm_vcmulq_rot90_x_f16): Likewise.\n\t(__arm_vcmulq_rot90_x_f32): Likewise.\n\t(__arm_vcmulq_rot180_x_f16): Likewise.\n\t(__arm_vcmulq_rot180_x_f32): Likewise.\n\t(__arm_vcmulq_rot270_x_f16): Likewise.\n\t(__arm_vcmulq_rot270_x_f32): Likewise.\n\t(__arm_vcvtaq_x_s16_f16): Likewise.\n\t(__arm_vcvtaq_x_s32_f32): Likewise.\n\t(__arm_vcvtaq_x_u16_f16): Likewise.\n\t(__arm_vcvtaq_x_u32_f32): Likewise.\n\t(__arm_vcvtnq_x_s16_f16): Likewise.\n\t(__arm_vcvtnq_x_s32_f32): Likewise.\n\t(__arm_vcvtnq_x_u16_f16): Likewise.\n\t(__arm_vcvtnq_x_u32_f32): Likewise.\n\t(__arm_vcvtpq_x_s16_f16): Likewise.\n\t(__arm_vcvtpq_x_s32_f32): Likewise.\n\t(__arm_vcvtpq_x_u16_f16): Likewise.\n\t(__arm_vcvtpq_x_u32_f32): Likewise.\n\t(__arm_vcvtmq_x_s16_f16): Likewise.\n\t(__arm_vcvtmq_x_s32_f32): Likewise.\n\t(__arm_vcvtmq_x_u16_f16): Likewise.\n\t(__arm_vcvtmq_x_u32_f32): Likewise.\n\t(__arm_vcvtbq_x_f32_f16): Likewise.\n\t(__arm_vcvttq_x_f32_f16): Likewise.\n\t(__arm_vcvtq_x_f16_u16): Likewise.\n\t(__arm_vcvtq_x_f16_s16): Likewise.\n\t(__arm_vcvtq_x_f32_s32): Likewise.\n\t(__arm_vcvtq_x_f32_u32): Likewise.\n\t(__arm_vcvtq_x_n_f16_s16): Likewise.\n\t(__arm_vcvtq_x_n_f16_u16): Likewise.\n\t(__arm_vcvtq_x_n_f32_s32): Likewise.\n\t(__arm_vcvtq_x_n_f32_u32): Likewise.\n\t(__arm_vcvtq_x_s16_f16): Likewise.\n\t(__arm_vcvtq_x_s32_f32): Likewise.\n\t(__arm_vcvtq_x_u16_f16): Likewise.\n\t(__arm_vcvtq_x_u32_f32): Likewise.\n\t(__arm_vcvtq_x_n_s16_f16): Likewise.\n\t(__arm_vcvtq_x_n_s32_f32): Likewise.\n\t(__arm_vcvtq_x_n_u16_f16): Likewise.\n\t(__arm_vcvtq_x_n_u32_f32): Likewise.\n\t(__arm_vrndq_x_f16): Likewise.\n\t(__arm_vrndq_x_f32): Likewise.\n\t(__arm_vrndnq_x_f16): Likewise.\n\t(__arm_vrndnq_x_f32): Likewise.\n\t(__arm_vrndmq_x_f16): Likewise.\n\t(__arm_vrndmq_x_f32): Likewise.\n\t(__arm_vrndpq_x_f16): Likewise.\n\t(__arm_vrndpq_x_f32): Likewise.\n\t(__arm_vrndaq_x_f16): Likewise.\n\t(__arm_vrndaq_x_f32): Likewise.\n\t(__arm_vrndxq_x_f16): Likewise.\n\t(__arm_vrndxq_x_f32): Likewise.\n\t(__arm_vandq_x_f16): Likewise.\n\t(__arm_vandq_x_f32): Likewise.\n\t(__arm_vbicq_x_f16): Likewise.\n\t(__arm_vbicq_x_f32): Likewise.\n\t(__arm_vbrsrq_x_n_f16): Likewise.\n\t(__arm_vbrsrq_x_n_f32): Likewise.\n\t(__arm_veorq_x_f16): Likewise.\n\t(__arm_veorq_x_f32): Likewise.\n\t(__arm_vornq_x_f16): Likewise.\n\t(__arm_vornq_x_f32): Likewise.\n\t(__arm_vorrq_x_f16): Likewise.\n\t(__arm_vorrq_x_f32): Likewise.\n\t(__arm_vrev32q_x_f16): Likewise.\n\t(__arm_vrev64q_x_f16): Likewise.\n\t(__arm_vrev64q_x_f32): Likewise.\n\t(vabdq_x): Define polymorphic variant.\n\t(vabsq_x): Likewise.\n\t(vaddq_x): Likewise.\n\t(vandq_x): Likewise.\n\t(vbicq_x): Likewise.\n\t(vbrsrq_x): Likewise.\n\t(vcaddq_rot270_x): Likewise.\n\t(vcaddq_rot90_x): Likewise.\n\t(vcmulq_rot180_x): Likewise.\n\t(vcmulq_rot270_x): Likewise.\n\t(vcmulq_x): Likewise.\n\t(vcvtq_x): Likewise.\n\t(vcvtq_x_n): Likewise.\n\t(vcvtnq_m): Likewise.\n\t(veorq_x): Likewise.\n\t(vmaxnmq_x): Likewise.\n\t(vminnmq_x): Likewise.\n\t(vmulq_x): Likewise.\n\t(vnegq_x): Likewise.\n\t(vornq_x): Likewise.\n\t(vorrq_x): Likewise.\n\t(vrev32q_x): Likewise.\n\t(vrev64q_x): Likewise.\n\t(vrndaq_x): Likewise.\n\t(vrndmq_x): Likewise.\n\t(vrndnq_x): Likewise.\n\t(vrndpq_x): Likewise.\n\t(vrndq_x): Likewise.\n\t(vrndxq_x): Likewise.\n\t(vsubq_x): Likewise.\n\t(vcmulq_rot90_x): Likewise.\n\t(vadciq): Likewise.\n\t(vclsq_x): Likewise.\n\t(vclzq_x): Likewise.\n\t(vhaddq_x): Likewise.\n\t(vhcaddq_rot270_x): Likewise.\n\t(vhcaddq_rot90_x): Likewise.\n\t(vhsubq_x): Likewise.\n\t(vmaxq_x): Likewise.\n\t(vminq_x): Likewise.\n\t(vmovlbq_x): Likewise.\n\t(vmovltq_x): Likewise.\n\t(vmulhq_x): Likewise.\n\t(vmullbq_int_x): Likewise.\n\t(vmullbq_poly_x): Likewise.\n\t(vmulltq_int_x): Likewise.\n\t(vmulltq_poly_x): Likewise.\n\t(vmvnq_x): Likewise.\n\t(vrev16q_x): Likewise.\n\t(vrhaddq_x): Likewise.\n\t(vrmulhq_x): Likewise.\n\t(vrshlq_x): Likewise.\n\t(vrshrq_x): Likewise.\n\t(vshllbq_x): Likewise.\n\t(vshlltq_x): Likewise.\n\t(vshlq_x_n): Likewise.\n\t(vshlq_x): Likewise.\n\t(vdwdupq_x_u8): Likewise.\n\t(vdwdupq_x_u16): Likewise.\n\t(vdwdupq_x_u32): Likewise.\n\t(viwdupq_x_u8): Likewise.\n\t(viwdupq_x_u16): Likewise.\n\t(viwdupq_x_u32): Likewise.\n\t(vidupq_x_u8): Likewise.\n\t(vddupq_x_u8): Likewise.\n\t(vidupq_x_u16): Likewise.\n\t(vddupq_x_u16): Likewise.\n\t(vidupq_x_u32): Likewise.\n\t(vddupq_x_u32): Likewise.\n\t(vshrq_x): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_f16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabdq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabsq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_x_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_x_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclsq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclsq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclsq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclzq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot180_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot180_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot270_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot270_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot90_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot90_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtaq_x_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtaq_x_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtaq_x_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtaq_x_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtbq_x_f32_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtmq_x_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtmq_x_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtmq_x_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtmq_x_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtnq_x_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtnq_x_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtnq_x_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtnq_x_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtpq_x_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtpq_x_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtpq_x_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtpq_x_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_f16_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_f16_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_f32_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_f32_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_n_f16_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_n_f16_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_n_f32_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_n_f32_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_n_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_n_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_n_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_n_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_x_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvttq_x_f32_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_x_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_x_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_x_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhaddq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot270_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot270_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot270_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot90_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot90_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot90_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_x_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_x_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_x_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_x_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_x_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/viwdupq_x_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovlbq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovlbq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovlbq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovlbq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovltq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovltq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovltq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmovltq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulhq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_int_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_poly_x_p16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_poly_x_p8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_int_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_poly_x_p16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_poly_x_p8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vnegq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev16q_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev16q_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev32q_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrhaddq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmulhq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndaq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndaq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndmq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndmq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndnq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndnq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndpq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndpq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndxq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrndxq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshlq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshllbq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshllbq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshllbq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshllbq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlltq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlltq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlltq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlltq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_u8.c: Likewise.", "tree": {"sha": "aa62f5bb309e40d468bf48663dfcd0c5d89ecdaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa62f5bb309e40d468bf48663dfcd0c5d89ecdaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/261014a1be433a27af75fb7eecc77231261d84f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/261014a1be433a27af75fb7eecc77231261d84f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/261014a1be433a27af75fb7eecc77231261d84f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/261014a1be433a27af75fb7eecc77231261d84f7/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d42842c07f4143042f3dcc39a050b262bcf1b55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d42842c07f4143042f3dcc39a050b262bcf1b55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d42842c07f4143042f3dcc39a050b262bcf1b55"}], "stats": {"total": 15389, "additions": 14292, "deletions": 1097}, "files": [{"sha": "6bbdf060497d1dac6bbe285fead7e136fb5b29d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 825, "deletions": 0, "changes": 825, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -1,3 +1,828 @@\n+2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm_mve.h (vddupq_x_n_u8): Define macro.\n+\t(vddupq_x_n_u16): Likewise.\n+\t(vddupq_x_n_u32): Likewise.\n+\t(vddupq_x_wb_u8): Likewise.\n+\t(vddupq_x_wb_u16): Likewise.\n+\t(vddupq_x_wb_u32): Likewise.\n+\t(vdwdupq_x_n_u8): Likewise.\n+\t(vdwdupq_x_n_u16): Likewise.\n+\t(vdwdupq_x_n_u32): Likewise.\n+\t(vdwdupq_x_wb_u8): Likewise.\n+\t(vdwdupq_x_wb_u16): Likewise.\n+\t(vdwdupq_x_wb_u32): Likewise.\n+\t(vidupq_x_n_u8): Likewise.\n+\t(vidupq_x_n_u16): Likewise.\n+\t(vidupq_x_n_u32): Likewise.\n+\t(vidupq_x_wb_u8): Likewise.\n+\t(vidupq_x_wb_u16): Likewise.\n+\t(vidupq_x_wb_u32): Likewise.\n+\t(viwdupq_x_n_u8): Likewise.\n+\t(viwdupq_x_n_u16): Likewise.\n+\t(viwdupq_x_n_u32): Likewise.\n+\t(viwdupq_x_wb_u8): Likewise.\n+\t(viwdupq_x_wb_u16): Likewise.\n+\t(viwdupq_x_wb_u32): Likewise.\n+\t(vdupq_x_n_s8): Likewise.\n+\t(vdupq_x_n_s16): Likewise.\n+\t(vdupq_x_n_s32): Likewise.\n+\t(vdupq_x_n_u8): Likewise.\n+\t(vdupq_x_n_u16): Likewise.\n+\t(vdupq_x_n_u32): Likewise.\n+\t(vminq_x_s8): Likewise.\n+\t(vminq_x_s16): Likewise.\n+\t(vminq_x_s32): Likewise.\n+\t(vminq_x_u8): Likewise.\n+\t(vminq_x_u16): Likewise.\n+\t(vminq_x_u32): Likewise.\n+\t(vmaxq_x_s8): Likewise.\n+\t(vmaxq_x_s16): Likewise.\n+\t(vmaxq_x_s32): Likewise.\n+\t(vmaxq_x_u8): Likewise.\n+\t(vmaxq_x_u16): Likewise.\n+\t(vmaxq_x_u32): Likewise.\n+\t(vabdq_x_s8): Likewise.\n+\t(vabdq_x_s16): Likewise.\n+\t(vabdq_x_s32): Likewise.\n+\t(vabdq_x_u8): Likewise.\n+\t(vabdq_x_u16): Likewise.\n+\t(vabdq_x_u32): Likewise.\n+\t(vabsq_x_s8): Likewise.\n+\t(vabsq_x_s16): Likewise.\n+\t(vabsq_x_s32): Likewise.\n+\t(vaddq_x_s8): Likewise.\n+\t(vaddq_x_s16): Likewise.\n+\t(vaddq_x_s32): Likewise.\n+\t(vaddq_x_n_s8): Likewise.\n+\t(vaddq_x_n_s16): Likewise.\n+\t(vaddq_x_n_s32): Likewise.\n+\t(vaddq_x_u8): Likewise.\n+\t(vaddq_x_u16): Likewise.\n+\t(vaddq_x_u32): Likewise.\n+\t(vaddq_x_n_u8): Likewise.\n+\t(vaddq_x_n_u16): Likewise.\n+\t(vaddq_x_n_u32): Likewise.\n+\t(vclsq_x_s8): Likewise.\n+\t(vclsq_x_s16): Likewise.\n+\t(vclsq_x_s32): Likewise.\n+\t(vclzq_x_s8): Likewise.\n+\t(vclzq_x_s16): Likewise.\n+\t(vclzq_x_s32): Likewise.\n+\t(vclzq_x_u8): Likewise.\n+\t(vclzq_x_u16): Likewise.\n+\t(vclzq_x_u32): Likewise.\n+\t(vnegq_x_s8): Likewise.\n+\t(vnegq_x_s16): Likewise.\n+\t(vnegq_x_s32): Likewise.\n+\t(vmulhq_x_s8): Likewise.\n+\t(vmulhq_x_s16): Likewise.\n+\t(vmulhq_x_s32): Likewise.\n+\t(vmulhq_x_u8): Likewise.\n+\t(vmulhq_x_u16): Likewise.\n+\t(vmulhq_x_u32): Likewise.\n+\t(vmullbq_poly_x_p8): Likewise.\n+\t(vmullbq_poly_x_p16): Likewise.\n+\t(vmullbq_int_x_s8): Likewise.\n+\t(vmullbq_int_x_s16): Likewise.\n+\t(vmullbq_int_x_s32): Likewise.\n+\t(vmullbq_int_x_u8): Likewise.\n+\t(vmullbq_int_x_u16): Likewise.\n+\t(vmullbq_int_x_u32): Likewise.\n+\t(vmulltq_poly_x_p8): Likewise.\n+\t(vmulltq_poly_x_p16): Likewise.\n+\t(vmulltq_int_x_s8): Likewise.\n+\t(vmulltq_int_x_s16): Likewise.\n+\t(vmulltq_int_x_s32): Likewise.\n+\t(vmulltq_int_x_u8): Likewise.\n+\t(vmulltq_int_x_u16): Likewise.\n+\t(vmulltq_int_x_u32): Likewise.\n+\t(vmulq_x_s8): Likewise.\n+\t(vmulq_x_s16): Likewise.\n+\t(vmulq_x_s32): Likewise.\n+\t(vmulq_x_n_s8): Likewise.\n+\t(vmulq_x_n_s16): Likewise.\n+\t(vmulq_x_n_s32): Likewise.\n+\t(vmulq_x_u8): Likewise.\n+\t(vmulq_x_u16): Likewise.\n+\t(vmulq_x_u32): Likewise.\n+\t(vmulq_x_n_u8): Likewise.\n+\t(vmulq_x_n_u16): Likewise.\n+\t(vmulq_x_n_u32): Likewise.\n+\t(vsubq_x_s8): Likewise.\n+\t(vsubq_x_s16): Likewise.\n+\t(vsubq_x_s32): Likewise.\n+\t(vsubq_x_n_s8): Likewise.\n+\t(vsubq_x_n_s16): Likewise.\n+\t(vsubq_x_n_s32): Likewise.\n+\t(vsubq_x_u8): Likewise.\n+\t(vsubq_x_u16): Likewise.\n+\t(vsubq_x_u32): Likewise.\n+\t(vsubq_x_n_u8): Likewise.\n+\t(vsubq_x_n_u16): Likewise.\n+\t(vsubq_x_n_u32): Likewise.\n+\t(vcaddq_rot90_x_s8): Likewise.\n+\t(vcaddq_rot90_x_s16): Likewise.\n+\t(vcaddq_rot90_x_s32): Likewise.\n+\t(vcaddq_rot90_x_u8): Likewise.\n+\t(vcaddq_rot90_x_u16): Likewise.\n+\t(vcaddq_rot90_x_u32): Likewise.\n+\t(vcaddq_rot270_x_s8): Likewise.\n+\t(vcaddq_rot270_x_s16): Likewise.\n+\t(vcaddq_rot270_x_s32): Likewise.\n+\t(vcaddq_rot270_x_u8): Likewise.\n+\t(vcaddq_rot270_x_u16): Likewise.\n+\t(vcaddq_rot270_x_u32): Likewise.\n+\t(vhaddq_x_n_s8): Likewise.\n+\t(vhaddq_x_n_s16): Likewise.\n+\t(vhaddq_x_n_s32): Likewise.\n+\t(vhaddq_x_n_u8): Likewise.\n+\t(vhaddq_x_n_u16): Likewise.\n+\t(vhaddq_x_n_u32): Likewise.\n+\t(vhaddq_x_s8): Likewise.\n+\t(vhaddq_x_s16): Likewise.\n+\t(vhaddq_x_s32): Likewise.\n+\t(vhaddq_x_u8): Likewise.\n+\t(vhaddq_x_u16): Likewise.\n+\t(vhaddq_x_u32): Likewise.\n+\t(vhcaddq_rot90_x_s8): Likewise.\n+\t(vhcaddq_rot90_x_s16): Likewise.\n+\t(vhcaddq_rot90_x_s32): Likewise.\n+\t(vhcaddq_rot270_x_s8): Likewise.\n+\t(vhcaddq_rot270_x_s16): Likewise.\n+\t(vhcaddq_rot270_x_s32): Likewise.\n+\t(vhsubq_x_n_s8): Likewise.\n+\t(vhsubq_x_n_s16): Likewise.\n+\t(vhsubq_x_n_s32): Likewise.\n+\t(vhsubq_x_n_u8): Likewise.\n+\t(vhsubq_x_n_u16): Likewise.\n+\t(vhsubq_x_n_u32): Likewise.\n+\t(vhsubq_x_s8): Likewise.\n+\t(vhsubq_x_s16): Likewise.\n+\t(vhsubq_x_s32): Likewise.\n+\t(vhsubq_x_u8): Likewise.\n+\t(vhsubq_x_u16): Likewise.\n+\t(vhsubq_x_u32): Likewise.\n+\t(vrhaddq_x_s8): Likewise.\n+\t(vrhaddq_x_s16): Likewise.\n+\t(vrhaddq_x_s32): Likewise.\n+\t(vrhaddq_x_u8): Likewise.\n+\t(vrhaddq_x_u16): Likewise.\n+\t(vrhaddq_x_u32): Likewise.\n+\t(vrmulhq_x_s8): Likewise.\n+\t(vrmulhq_x_s16): Likewise.\n+\t(vrmulhq_x_s32): Likewise.\n+\t(vrmulhq_x_u8): Likewise.\n+\t(vrmulhq_x_u16): Likewise.\n+\t(vrmulhq_x_u32): Likewise.\n+\t(vandq_x_s8): Likewise.\n+\t(vandq_x_s16): Likewise.\n+\t(vandq_x_s32): Likewise.\n+\t(vandq_x_u8): Likewise.\n+\t(vandq_x_u16): Likewise.\n+\t(vandq_x_u32): Likewise.\n+\t(vbicq_x_s8): Likewise.\n+\t(vbicq_x_s16): Likewise.\n+\t(vbicq_x_s32): Likewise.\n+\t(vbicq_x_u8): Likewise.\n+\t(vbicq_x_u16): Likewise.\n+\t(vbicq_x_u32): Likewise.\n+\t(vbrsrq_x_n_s8): Likewise.\n+\t(vbrsrq_x_n_s16): Likewise.\n+\t(vbrsrq_x_n_s32): Likewise.\n+\t(vbrsrq_x_n_u8): Likewise.\n+\t(vbrsrq_x_n_u16): Likewise.\n+\t(vbrsrq_x_n_u32): Likewise.\n+\t(veorq_x_s8): Likewise.\n+\t(veorq_x_s16): Likewise.\n+\t(veorq_x_s32): Likewise.\n+\t(veorq_x_u8): Likewise.\n+\t(veorq_x_u16): Likewise.\n+\t(veorq_x_u32): Likewise.\n+\t(vmovlbq_x_s8): Likewise.\n+\t(vmovlbq_x_s16): Likewise.\n+\t(vmovlbq_x_u8): Likewise.\n+\t(vmovlbq_x_u16): Likewise.\n+\t(vmovltq_x_s8): Likewise.\n+\t(vmovltq_x_s16): Likewise.\n+\t(vmovltq_x_u8): Likewise.\n+\t(vmovltq_x_u16): Likewise.\n+\t(vmvnq_x_s8): Likewise.\n+\t(vmvnq_x_s16): Likewise.\n+\t(vmvnq_x_s32): Likewise.\n+\t(vmvnq_x_u8): Likewise.\n+\t(vmvnq_x_u16): Likewise.\n+\t(vmvnq_x_u32): Likewise.\n+\t(vmvnq_x_n_s16): Likewise.\n+\t(vmvnq_x_n_s32): Likewise.\n+\t(vmvnq_x_n_u16): Likewise.\n+\t(vmvnq_x_n_u32): Likewise.\n+\t(vornq_x_s8): Likewise.\n+\t(vornq_x_s16): Likewise.\n+\t(vornq_x_s32): Likewise.\n+\t(vornq_x_u8): Likewise.\n+\t(vornq_x_u16): Likewise.\n+\t(vornq_x_u32): Likewise.\n+\t(vorrq_x_s8): Likewise.\n+\t(vorrq_x_s16): Likewise.\n+\t(vorrq_x_s32): Likewise.\n+\t(vorrq_x_u8): Likewise.\n+\t(vorrq_x_u16): Likewise.\n+\t(vorrq_x_u32): Likewise.\n+\t(vrev16q_x_s8): Likewise.\n+\t(vrev16q_x_u8): Likewise.\n+\t(vrev32q_x_s8): Likewise.\n+\t(vrev32q_x_s16): Likewise.\n+\t(vrev32q_x_u8): Likewise.\n+\t(vrev32q_x_u16): Likewise.\n+\t(vrev64q_x_s8): Likewise.\n+\t(vrev64q_x_s16): Likewise.\n+\t(vrev64q_x_s32): Likewise.\n+\t(vrev64q_x_u8): Likewise.\n+\t(vrev64q_x_u16): Likewise.\n+\t(vrev64q_x_u32): Likewise.\n+\t(vrshlq_x_s8): Likewise.\n+\t(vrshlq_x_s16): Likewise.\n+\t(vrshlq_x_s32): Likewise.\n+\t(vrshlq_x_u8): Likewise.\n+\t(vrshlq_x_u16): Likewise.\n+\t(vrshlq_x_u32): Likewise.\n+\t(vshllbq_x_n_s8): Likewise.\n+\t(vshllbq_x_n_s16): Likewise.\n+\t(vshllbq_x_n_u8): Likewise.\n+\t(vshllbq_x_n_u16): Likewise.\n+\t(vshlltq_x_n_s8): Likewise.\n+\t(vshlltq_x_n_s16): Likewise.\n+\t(vshlltq_x_n_u8): Likewise.\n+\t(vshlltq_x_n_u16): Likewise.\n+\t(vshlq_x_s8): Likewise.\n+\t(vshlq_x_s16): Likewise.\n+\t(vshlq_x_s32): Likewise.\n+\t(vshlq_x_u8): Likewise.\n+\t(vshlq_x_u16): Likewise.\n+\t(vshlq_x_u32): Likewise.\n+\t(vshlq_x_n_s8): Likewise.\n+\t(vshlq_x_n_s16): Likewise.\n+\t(vshlq_x_n_s32): Likewise.\n+\t(vshlq_x_n_u8): Likewise.\n+\t(vshlq_x_n_u16): Likewise.\n+\t(vshlq_x_n_u32): Likewise.\n+\t(vrshrq_x_n_s8): Likewise.\n+\t(vrshrq_x_n_s16): Likewise.\n+\t(vrshrq_x_n_s32): Likewise.\n+\t(vrshrq_x_n_u8): Likewise.\n+\t(vrshrq_x_n_u16): Likewise.\n+\t(vrshrq_x_n_u32): Likewise.\n+\t(vshrq_x_n_s8): Likewise.\n+\t(vshrq_x_n_s16): Likewise.\n+\t(vshrq_x_n_s32): Likewise.\n+\t(vshrq_x_n_u8): Likewise.\n+\t(vshrq_x_n_u16): Likewise.\n+\t(vshrq_x_n_u32): Likewise.\n+\t(vdupq_x_n_f16): Likewise.\n+\t(vdupq_x_n_f32): Likewise.\n+\t(vminnmq_x_f16): Likewise.\n+\t(vminnmq_x_f32): Likewise.\n+\t(vmaxnmq_x_f16): Likewise.\n+\t(vmaxnmq_x_f32): Likewise.\n+\t(vabdq_x_f16): Likewise.\n+\t(vabdq_x_f32): Likewise.\n+\t(vabsq_x_f16): Likewise.\n+\t(vabsq_x_f32): Likewise.\n+\t(vaddq_x_f16): Likewise.\n+\t(vaddq_x_f32): Likewise.\n+\t(vaddq_x_n_f16): Likewise.\n+\t(vaddq_x_n_f32): Likewise.\n+\t(vnegq_x_f16): Likewise.\n+\t(vnegq_x_f32): Likewise.\n+\t(vmulq_x_f16): Likewise.\n+\t(vmulq_x_f32): Likewise.\n+\t(vmulq_x_n_f16): Likewise.\n+\t(vmulq_x_n_f32): Likewise.\n+\t(vsubq_x_f16): Likewise.\n+\t(vsubq_x_f32): Likewise.\n+\t(vsubq_x_n_f16): Likewise.\n+\t(vsubq_x_n_f32): Likewise.\n+\t(vcaddq_rot90_x_f16): Likewise.\n+\t(vcaddq_rot90_x_f32): Likewise.\n+\t(vcaddq_rot270_x_f16): Likewise.\n+\t(vcaddq_rot270_x_f32): Likewise.\n+\t(vcmulq_x_f16): Likewise.\n+\t(vcmulq_x_f32): Likewise.\n+\t(vcmulq_rot90_x_f16): Likewise.\n+\t(vcmulq_rot90_x_f32): Likewise.\n+\t(vcmulq_rot180_x_f16): Likewise.\n+\t(vcmulq_rot180_x_f32): Likewise.\n+\t(vcmulq_rot270_x_f16): Likewise.\n+\t(vcmulq_rot270_x_f32): Likewise.\n+\t(vcvtaq_x_s16_f16): Likewise.\n+\t(vcvtaq_x_s32_f32): Likewise.\n+\t(vcvtaq_x_u16_f16): Likewise.\n+\t(vcvtaq_x_u32_f32): Likewise.\n+\t(vcvtnq_x_s16_f16): Likewise.\n+\t(vcvtnq_x_s32_f32): Likewise.\n+\t(vcvtnq_x_u16_f16): Likewise.\n+\t(vcvtnq_x_u32_f32): Likewise.\n+\t(vcvtpq_x_s16_f16): Likewise.\n+\t(vcvtpq_x_s32_f32): Likewise.\n+\t(vcvtpq_x_u16_f16): Likewise.\n+\t(vcvtpq_x_u32_f32): Likewise.\n+\t(vcvtmq_x_s16_f16): Likewise.\n+\t(vcvtmq_x_s32_f32): Likewise.\n+\t(vcvtmq_x_u16_f16): Likewise.\n+\t(vcvtmq_x_u32_f32): Likewise.\n+\t(vcvtbq_x_f32_f16): Likewise.\n+\t(vcvttq_x_f32_f16): Likewise.\n+\t(vcvtq_x_f16_u16): Likewise.\n+\t(vcvtq_x_f16_s16): Likewise.\n+\t(vcvtq_x_f32_s32): Likewise.\n+\t(vcvtq_x_f32_u32): Likewise.\n+\t(vcvtq_x_n_f16_s16): Likewise.\n+\t(vcvtq_x_n_f16_u16): Likewise.\n+\t(vcvtq_x_n_f32_s32): Likewise.\n+\t(vcvtq_x_n_f32_u32): Likewise.\n+\t(vcvtq_x_s16_f16): Likewise.\n+\t(vcvtq_x_s32_f32): Likewise.\n+\t(vcvtq_x_u16_f16): Likewise.\n+\t(vcvtq_x_u32_f32): Likewise.\n+\t(vcvtq_x_n_s16_f16): Likewise.\n+\t(vcvtq_x_n_s32_f32): Likewise.\n+\t(vcvtq_x_n_u16_f16): Likewise.\n+\t(vcvtq_x_n_u32_f32): Likewise.\n+\t(vrndq_x_f16): Likewise.\n+\t(vrndq_x_f32): Likewise.\n+\t(vrndnq_x_f16): Likewise.\n+\t(vrndnq_x_f32): Likewise.\n+\t(vrndmq_x_f16): Likewise.\n+\t(vrndmq_x_f32): Likewise.\n+\t(vrndpq_x_f16): Likewise.\n+\t(vrndpq_x_f32): Likewise.\n+\t(vrndaq_x_f16): Likewise.\n+\t(vrndaq_x_f32): Likewise.\n+\t(vrndxq_x_f16): Likewise.\n+\t(vrndxq_x_f32): Likewise.\n+\t(vandq_x_f16): Likewise.\n+\t(vandq_x_f32): Likewise.\n+\t(vbicq_x_f16): Likewise.\n+\t(vbicq_x_f32): Likewise.\n+\t(vbrsrq_x_n_f16): Likewise.\n+\t(vbrsrq_x_n_f32): Likewise.\n+\t(veorq_x_f16): Likewise.\n+\t(veorq_x_f32): Likewise.\n+\t(vornq_x_f16): Likewise.\n+\t(vornq_x_f32): Likewise.\n+\t(vorrq_x_f16): Likewise.\n+\t(vorrq_x_f32): Likewise.\n+\t(vrev32q_x_f16): Likewise.\n+\t(vrev64q_x_f16): Likewise.\n+\t(vrev64q_x_f32): Likewise.\n+\t(__arm_vddupq_x_n_u8): Define intrinsic.\n+\t(__arm_vddupq_x_n_u16): Likewise.\n+\t(__arm_vddupq_x_n_u32): Likewise.\n+\t(__arm_vddupq_x_wb_u8): Likewise.\n+\t(__arm_vddupq_x_wb_u16): Likewise.\n+\t(__arm_vddupq_x_wb_u32): Likewise.\n+\t(__arm_vdwdupq_x_n_u8): Likewise.\n+\t(__arm_vdwdupq_x_n_u16): Likewise.\n+\t(__arm_vdwdupq_x_n_u32): Likewise.\n+\t(__arm_vdwdupq_x_wb_u8): Likewise.\n+\t(__arm_vdwdupq_x_wb_u16): Likewise.\n+\t(__arm_vdwdupq_x_wb_u32): Likewise.\n+\t(__arm_vidupq_x_n_u8): Likewise.\n+\t(__arm_vidupq_x_n_u16): Likewise.\n+\t(__arm_vidupq_x_n_u32): Likewise.\n+\t(__arm_vidupq_x_wb_u8): Likewise.\n+\t(__arm_vidupq_x_wb_u16): Likewise.\n+\t(__arm_vidupq_x_wb_u32): Likewise.\n+\t(__arm_viwdupq_x_n_u8): Likewise.\n+\t(__arm_viwdupq_x_n_u16): Likewise.\n+\t(__arm_viwdupq_x_n_u32): Likewise.\n+\t(__arm_viwdupq_x_wb_u8): Likewise.\n+\t(__arm_viwdupq_x_wb_u16): Likewise.\n+\t(__arm_viwdupq_x_wb_u32): Likewise.\n+\t(__arm_vdupq_x_n_s8): Likewise.\n+\t(__arm_vdupq_x_n_s16): Likewise.\n+\t(__arm_vdupq_x_n_s32): Likewise.\n+\t(__arm_vdupq_x_n_u8): Likewise.\n+\t(__arm_vdupq_x_n_u16): Likewise.\n+\t(__arm_vdupq_x_n_u32): Likewise.\n+\t(__arm_vminq_x_s8): Likewise.\n+\t(__arm_vminq_x_s16): Likewise.\n+\t(__arm_vminq_x_s32): Likewise.\n+\t(__arm_vminq_x_u8): Likewise.\n+\t(__arm_vminq_x_u16): Likewise.\n+\t(__arm_vminq_x_u32): Likewise.\n+\t(__arm_vmaxq_x_s8): Likewise.\n+\t(__arm_vmaxq_x_s16): Likewise.\n+\t(__arm_vmaxq_x_s32): Likewise.\n+\t(__arm_vmaxq_x_u8): Likewise.\n+\t(__arm_vmaxq_x_u16): Likewise.\n+\t(__arm_vmaxq_x_u32): Likewise.\n+\t(__arm_vabdq_x_s8): Likewise.\n+\t(__arm_vabdq_x_s16): Likewise.\n+\t(__arm_vabdq_x_s32): Likewise.\n+\t(__arm_vabdq_x_u8): Likewise.\n+\t(__arm_vabdq_x_u16): Likewise.\n+\t(__arm_vabdq_x_u32): Likewise.\n+\t(__arm_vabsq_x_s8): Likewise.\n+\t(__arm_vabsq_x_s16): Likewise.\n+\t(__arm_vabsq_x_s32): Likewise.\n+\t(__arm_vaddq_x_s8): Likewise.\n+\t(__arm_vaddq_x_s16): Likewise.\n+\t(__arm_vaddq_x_s32): Likewise.\n+\t(__arm_vaddq_x_n_s8): Likewise.\n+\t(__arm_vaddq_x_n_s16): Likewise.\n+\t(__arm_vaddq_x_n_s32): Likewise.\n+\t(__arm_vaddq_x_u8): Likewise.\n+\t(__arm_vaddq_x_u16): Likewise.\n+\t(__arm_vaddq_x_u32): Likewise.\n+\t(__arm_vaddq_x_n_u8): Likewise.\n+\t(__arm_vaddq_x_n_u16): Likewise.\n+\t(__arm_vaddq_x_n_u32): Likewise.\n+\t(__arm_vclsq_x_s8): Likewise.\n+\t(__arm_vclsq_x_s16): Likewise.\n+\t(__arm_vclsq_x_s32): Likewise.\n+\t(__arm_vclzq_x_s8): Likewise.\n+\t(__arm_vclzq_x_s16): Likewise.\n+\t(__arm_vclzq_x_s32): Likewise.\n+\t(__arm_vclzq_x_u8): Likewise.\n+\t(__arm_vclzq_x_u16): Likewise.\n+\t(__arm_vclzq_x_u32): Likewise.\n+\t(__arm_vnegq_x_s8): Likewise.\n+\t(__arm_vnegq_x_s16): Likewise.\n+\t(__arm_vnegq_x_s32): Likewise.\n+\t(__arm_vmulhq_x_s8): Likewise.\n+\t(__arm_vmulhq_x_s16): Likewise.\n+\t(__arm_vmulhq_x_s32): Likewise.\n+\t(__arm_vmulhq_x_u8): Likewise.\n+\t(__arm_vmulhq_x_u16): Likewise.\n+\t(__arm_vmulhq_x_u32): Likewise.\n+\t(__arm_vmullbq_poly_x_p8): Likewise.\n+\t(__arm_vmullbq_poly_x_p16): Likewise.\n+\t(__arm_vmullbq_int_x_s8): Likewise.\n+\t(__arm_vmullbq_int_x_s16): Likewise.\n+\t(__arm_vmullbq_int_x_s32): Likewise.\n+\t(__arm_vmullbq_int_x_u8): Likewise.\n+\t(__arm_vmullbq_int_x_u16): Likewise.\n+\t(__arm_vmullbq_int_x_u32): Likewise.\n+\t(__arm_vmulltq_poly_x_p8): Likewise.\n+\t(__arm_vmulltq_poly_x_p16): Likewise.\n+\t(__arm_vmulltq_int_x_s8): Likewise.\n+\t(__arm_vmulltq_int_x_s16): Likewise.\n+\t(__arm_vmulltq_int_x_s32): Likewise.\n+\t(__arm_vmulltq_int_x_u8): Likewise.\n+\t(__arm_vmulltq_int_x_u16): Likewise.\n+\t(__arm_vmulltq_int_x_u32): Likewise.\n+\t(__arm_vmulq_x_s8): Likewise.\n+\t(__arm_vmulq_x_s16): Likewise.\n+\t(__arm_vmulq_x_s32): Likewise.\n+\t(__arm_vmulq_x_n_s8): Likewise.\n+\t(__arm_vmulq_x_n_s16): Likewise.\n+\t(__arm_vmulq_x_n_s32): Likewise.\n+\t(__arm_vmulq_x_u8): Likewise.\n+\t(__arm_vmulq_x_u16): Likewise.\n+\t(__arm_vmulq_x_u32): Likewise.\n+\t(__arm_vmulq_x_n_u8): Likewise.\n+\t(__arm_vmulq_x_n_u16): Likewise.\n+\t(__arm_vmulq_x_n_u32): Likewise.\n+\t(__arm_vsubq_x_s8): Likewise.\n+\t(__arm_vsubq_x_s16): Likewise.\n+\t(__arm_vsubq_x_s32): Likewise.\n+\t(__arm_vsubq_x_n_s8): Likewise.\n+\t(__arm_vsubq_x_n_s16): Likewise.\n+\t(__arm_vsubq_x_n_s32): Likewise.\n+\t(__arm_vsubq_x_u8): Likewise.\n+\t(__arm_vsubq_x_u16): Likewise.\n+\t(__arm_vsubq_x_u32): Likewise.\n+\t(__arm_vsubq_x_n_u8): Likewise.\n+\t(__arm_vsubq_x_n_u16): Likewise.\n+\t(__arm_vsubq_x_n_u32): Likewise.\n+\t(__arm_vcaddq_rot90_x_s8): Likewise.\n+\t(__arm_vcaddq_rot90_x_s16): Likewise.\n+\t(__arm_vcaddq_rot90_x_s32): Likewise.\n+\t(__arm_vcaddq_rot90_x_u8): Likewise.\n+\t(__arm_vcaddq_rot90_x_u16): Likewise.\n+\t(__arm_vcaddq_rot90_x_u32): Likewise.\n+\t(__arm_vcaddq_rot270_x_s8): Likewise.\n+\t(__arm_vcaddq_rot270_x_s16): Likewise.\n+\t(__arm_vcaddq_rot270_x_s32): Likewise.\n+\t(__arm_vcaddq_rot270_x_u8): Likewise.\n+\t(__arm_vcaddq_rot270_x_u16): Likewise.\n+\t(__arm_vcaddq_rot270_x_u32): Likewise.\n+\t(__arm_vhaddq_x_n_s8): Likewise.\n+\t(__arm_vhaddq_x_n_s16): Likewise.\n+\t(__arm_vhaddq_x_n_s32): Likewise.\n+\t(__arm_vhaddq_x_n_u8): Likewise.\n+\t(__arm_vhaddq_x_n_u16): Likewise.\n+\t(__arm_vhaddq_x_n_u32): Likewise.\n+\t(__arm_vhaddq_x_s8): Likewise.\n+\t(__arm_vhaddq_x_s16): Likewise.\n+\t(__arm_vhaddq_x_s32): Likewise.\n+\t(__arm_vhaddq_x_u8): Likewise.\n+\t(__arm_vhaddq_x_u16): Likewise.\n+\t(__arm_vhaddq_x_u32): Likewise.\n+\t(__arm_vhcaddq_rot90_x_s8): Likewise.\n+\t(__arm_vhcaddq_rot90_x_s16): Likewise.\n+\t(__arm_vhcaddq_rot90_x_s32): Likewise.\n+\t(__arm_vhcaddq_rot270_x_s8): Likewise.\n+\t(__arm_vhcaddq_rot270_x_s16): Likewise.\n+\t(__arm_vhcaddq_rot270_x_s32): Likewise.\n+\t(__arm_vhsubq_x_n_s8): Likewise.\n+\t(__arm_vhsubq_x_n_s16): Likewise.\n+\t(__arm_vhsubq_x_n_s32): Likewise.\n+\t(__arm_vhsubq_x_n_u8): Likewise.\n+\t(__arm_vhsubq_x_n_u16): Likewise.\n+\t(__arm_vhsubq_x_n_u32): Likewise.\n+\t(__arm_vhsubq_x_s8): Likewise.\n+\t(__arm_vhsubq_x_s16): Likewise.\n+\t(__arm_vhsubq_x_s32): Likewise.\n+\t(__arm_vhsubq_x_u8): Likewise.\n+\t(__arm_vhsubq_x_u16): Likewise.\n+\t(__arm_vhsubq_x_u32): Likewise.\n+\t(__arm_vrhaddq_x_s8): Likewise.\n+\t(__arm_vrhaddq_x_s16): Likewise.\n+\t(__arm_vrhaddq_x_s32): Likewise.\n+\t(__arm_vrhaddq_x_u8): Likewise.\n+\t(__arm_vrhaddq_x_u16): Likewise.\n+\t(__arm_vrhaddq_x_u32): Likewise.\n+\t(__arm_vrmulhq_x_s8): Likewise.\n+\t(__arm_vrmulhq_x_s16): Likewise.\n+\t(__arm_vrmulhq_x_s32): Likewise.\n+\t(__arm_vrmulhq_x_u8): Likewise.\n+\t(__arm_vrmulhq_x_u16): Likewise.\n+\t(__arm_vrmulhq_x_u32): Likewise.\n+\t(__arm_vandq_x_s8): Likewise.\n+\t(__arm_vandq_x_s16): Likewise.\n+\t(__arm_vandq_x_s32): Likewise.\n+\t(__arm_vandq_x_u8): Likewise.\n+\t(__arm_vandq_x_u16): Likewise.\n+\t(__arm_vandq_x_u32): Likewise.\n+\t(__arm_vbicq_x_s8): Likewise.\n+\t(__arm_vbicq_x_s16): Likewise.\n+\t(__arm_vbicq_x_s32): Likewise.\n+\t(__arm_vbicq_x_u8): Likewise.\n+\t(__arm_vbicq_x_u16): Likewise.\n+\t(__arm_vbicq_x_u32): Likewise.\n+\t(__arm_vbrsrq_x_n_s8): Likewise.\n+\t(__arm_vbrsrq_x_n_s16): Likewise.\n+\t(__arm_vbrsrq_x_n_s32): Likewise.\n+\t(__arm_vbrsrq_x_n_u8): Likewise.\n+\t(__arm_vbrsrq_x_n_u16): Likewise.\n+\t(__arm_vbrsrq_x_n_u32): Likewise.\n+\t(__arm_veorq_x_s8): Likewise.\n+\t(__arm_veorq_x_s16): Likewise.\n+\t(__arm_veorq_x_s32): Likewise.\n+\t(__arm_veorq_x_u8): Likewise.\n+\t(__arm_veorq_x_u16): Likewise.\n+\t(__arm_veorq_x_u32): Likewise.\n+\t(__arm_vmovlbq_x_s8): Likewise.\n+\t(__arm_vmovlbq_x_s16): Likewise.\n+\t(__arm_vmovlbq_x_u8): Likewise.\n+\t(__arm_vmovlbq_x_u16): Likewise.\n+\t(__arm_vmovltq_x_s8): Likewise.\n+\t(__arm_vmovltq_x_s16): Likewise.\n+\t(__arm_vmovltq_x_u8): Likewise.\n+\t(__arm_vmovltq_x_u16): Likewise.\n+\t(__arm_vmvnq_x_s8): Likewise.\n+\t(__arm_vmvnq_x_s16): Likewise.\n+\t(__arm_vmvnq_x_s32): Likewise.\n+\t(__arm_vmvnq_x_u8): Likewise.\n+\t(__arm_vmvnq_x_u16): Likewise.\n+\t(__arm_vmvnq_x_u32): Likewise.\n+\t(__arm_vmvnq_x_n_s16): Likewise.\n+\t(__arm_vmvnq_x_n_s32): Likewise.\n+\t(__arm_vmvnq_x_n_u16): Likewise.\n+\t(__arm_vmvnq_x_n_u32): Likewise.\n+\t(__arm_vornq_x_s8): Likewise.\n+\t(__arm_vornq_x_s16): Likewise.\n+\t(__arm_vornq_x_s32): Likewise.\n+\t(__arm_vornq_x_u8): Likewise.\n+\t(__arm_vornq_x_u16): Likewise.\n+\t(__arm_vornq_x_u32): Likewise.\n+\t(__arm_vorrq_x_s8): Likewise.\n+\t(__arm_vorrq_x_s16): Likewise.\n+\t(__arm_vorrq_x_s32): Likewise.\n+\t(__arm_vorrq_x_u8): Likewise.\n+\t(__arm_vorrq_x_u16): Likewise.\n+\t(__arm_vorrq_x_u32): Likewise.\n+\t(__arm_vrev16q_x_s8): Likewise.\n+\t(__arm_vrev16q_x_u8): Likewise.\n+\t(__arm_vrev32q_x_s8): Likewise.\n+\t(__arm_vrev32q_x_s16): Likewise.\n+\t(__arm_vrev32q_x_u8): Likewise.\n+\t(__arm_vrev32q_x_u16): Likewise.\n+\t(__arm_vrev64q_x_s8): Likewise.\n+\t(__arm_vrev64q_x_s16): Likewise.\n+\t(__arm_vrev64q_x_s32): Likewise.\n+\t(__arm_vrev64q_x_u8): Likewise.\n+\t(__arm_vrev64q_x_u16): Likewise.\n+\t(__arm_vrev64q_x_u32): Likewise.\n+\t(__arm_vrshlq_x_s8): Likewise.\n+\t(__arm_vrshlq_x_s16): Likewise.\n+\t(__arm_vrshlq_x_s32): Likewise.\n+\t(__arm_vrshlq_x_u8): Likewise.\n+\t(__arm_vrshlq_x_u16): Likewise.\n+\t(__arm_vrshlq_x_u32): Likewise.\n+\t(__arm_vshllbq_x_n_s8): Likewise.\n+\t(__arm_vshllbq_x_n_s16): Likewise.\n+\t(__arm_vshllbq_x_n_u8): Likewise.\n+\t(__arm_vshllbq_x_n_u16): Likewise.\n+\t(__arm_vshlltq_x_n_s8): Likewise.\n+\t(__arm_vshlltq_x_n_s16): Likewise.\n+\t(__arm_vshlltq_x_n_u8): Likewise.\n+\t(__arm_vshlltq_x_n_u16): Likewise.\n+\t(__arm_vshlq_x_s8): Likewise.\n+\t(__arm_vshlq_x_s16): Likewise.\n+\t(__arm_vshlq_x_s32): Likewise.\n+\t(__arm_vshlq_x_u8): Likewise.\n+\t(__arm_vshlq_x_u16): Likewise.\n+\t(__arm_vshlq_x_u32): Likewise.\n+\t(__arm_vshlq_x_n_s8): Likewise.\n+\t(__arm_vshlq_x_n_s16): Likewise.\n+\t(__arm_vshlq_x_n_s32): Likewise.\n+\t(__arm_vshlq_x_n_u8): Likewise.\n+\t(__arm_vshlq_x_n_u16): Likewise.\n+\t(__arm_vshlq_x_n_u32): Likewise.\n+\t(__arm_vrshrq_x_n_s8): Likewise.\n+\t(__arm_vrshrq_x_n_s16): Likewise.\n+\t(__arm_vrshrq_x_n_s32): Likewise.\n+\t(__arm_vrshrq_x_n_u8): Likewise.\n+\t(__arm_vrshrq_x_n_u16): Likewise.\n+\t(__arm_vrshrq_x_n_u32): Likewise.\n+\t(__arm_vshrq_x_n_s8): Likewise.\n+\t(__arm_vshrq_x_n_s16): Likewise.\n+\t(__arm_vshrq_x_n_s32): Likewise.\n+\t(__arm_vshrq_x_n_u8): Likewise.\n+\t(__arm_vshrq_x_n_u16): Likewise.\n+\t(__arm_vshrq_x_n_u32): Likewise.\n+\t(__arm_vdupq_x_n_f16): Likewise.\n+\t(__arm_vdupq_x_n_f32): Likewise.\n+\t(__arm_vminnmq_x_f16): Likewise.\n+\t(__arm_vminnmq_x_f32): Likewise.\n+\t(__arm_vmaxnmq_x_f16): Likewise.\n+\t(__arm_vmaxnmq_x_f32): Likewise.\n+\t(__arm_vabdq_x_f16): Likewise.\n+\t(__arm_vabdq_x_f32): Likewise.\n+\t(__arm_vabsq_x_f16): Likewise.\n+\t(__arm_vabsq_x_f32): Likewise.\n+\t(__arm_vaddq_x_f16): Likewise.\n+\t(__arm_vaddq_x_f32): Likewise.\n+\t(__arm_vaddq_x_n_f16): Likewise.\n+\t(__arm_vaddq_x_n_f32): Likewise.\n+\t(__arm_vnegq_x_f16): Likewise.\n+\t(__arm_vnegq_x_f32): Likewise.\n+\t(__arm_vmulq_x_f16): Likewise.\n+\t(__arm_vmulq_x_f32): Likewise.\n+\t(__arm_vmulq_x_n_f16): Likewise.\n+\t(__arm_vmulq_x_n_f32): Likewise.\n+\t(__arm_vsubq_x_f16): Likewise.\n+\t(__arm_vsubq_x_f32): Likewise.\n+\t(__arm_vsubq_x_n_f16): Likewise.\n+\t(__arm_vsubq_x_n_f32): Likewise.\n+\t(__arm_vcaddq_rot90_x_f16): Likewise.\n+\t(__arm_vcaddq_rot90_x_f32): Likewise.\n+\t(__arm_vcaddq_rot270_x_f16): Likewise.\n+\t(__arm_vcaddq_rot270_x_f32): Likewise.\n+\t(__arm_vcmulq_x_f16): Likewise.\n+\t(__arm_vcmulq_x_f32): Likewise.\n+\t(__arm_vcmulq_rot90_x_f16): Likewise.\n+\t(__arm_vcmulq_rot90_x_f32): Likewise.\n+\t(__arm_vcmulq_rot180_x_f16): Likewise.\n+\t(__arm_vcmulq_rot180_x_f32): Likewise.\n+\t(__arm_vcmulq_rot270_x_f16): Likewise.\n+\t(__arm_vcmulq_rot270_x_f32): Likewise.\n+\t(__arm_vcvtaq_x_s16_f16): Likewise.\n+\t(__arm_vcvtaq_x_s32_f32): Likewise.\n+\t(__arm_vcvtaq_x_u16_f16): Likewise.\n+\t(__arm_vcvtaq_x_u32_f32): Likewise.\n+\t(__arm_vcvtnq_x_s16_f16): Likewise.\n+\t(__arm_vcvtnq_x_s32_f32): Likewise.\n+\t(__arm_vcvtnq_x_u16_f16): Likewise.\n+\t(__arm_vcvtnq_x_u32_f32): Likewise.\n+\t(__arm_vcvtpq_x_s16_f16): Likewise.\n+\t(__arm_vcvtpq_x_s32_f32): Likewise.\n+\t(__arm_vcvtpq_x_u16_f16): Likewise.\n+\t(__arm_vcvtpq_x_u32_f32): Likewise.\n+\t(__arm_vcvtmq_x_s16_f16): Likewise.\n+\t(__arm_vcvtmq_x_s32_f32): Likewise.\n+\t(__arm_vcvtmq_x_u16_f16): Likewise.\n+\t(__arm_vcvtmq_x_u32_f32): Likewise.\n+\t(__arm_vcvtbq_x_f32_f16): Likewise.\n+\t(__arm_vcvttq_x_f32_f16): Likewise.\n+\t(__arm_vcvtq_x_f16_u16): Likewise.\n+\t(__arm_vcvtq_x_f16_s16): Likewise.\n+\t(__arm_vcvtq_x_f32_s32): Likewise.\n+\t(__arm_vcvtq_x_f32_u32): Likewise.\n+\t(__arm_vcvtq_x_n_f16_s16): Likewise.\n+\t(__arm_vcvtq_x_n_f16_u16): Likewise.\n+\t(__arm_vcvtq_x_n_f32_s32): Likewise.\n+\t(__arm_vcvtq_x_n_f32_u32): Likewise.\n+\t(__arm_vcvtq_x_s16_f16): Likewise.\n+\t(__arm_vcvtq_x_s32_f32): Likewise.\n+\t(__arm_vcvtq_x_u16_f16): Likewise.\n+\t(__arm_vcvtq_x_u32_f32): Likewise.\n+\t(__arm_vcvtq_x_n_s16_f16): Likewise.\n+\t(__arm_vcvtq_x_n_s32_f32): Likewise.\n+\t(__arm_vcvtq_x_n_u16_f16): Likewise.\n+\t(__arm_vcvtq_x_n_u32_f32): Likewise.\n+\t(__arm_vrndq_x_f16): Likewise.\n+\t(__arm_vrndq_x_f32): Likewise.\n+\t(__arm_vrndnq_x_f16): Likewise.\n+\t(__arm_vrndnq_x_f32): Likewise.\n+\t(__arm_vrndmq_x_f16): Likewise.\n+\t(__arm_vrndmq_x_f32): Likewise.\n+\t(__arm_vrndpq_x_f16): Likewise.\n+\t(__arm_vrndpq_x_f32): Likewise.\n+\t(__arm_vrndaq_x_f16): Likewise.\n+\t(__arm_vrndaq_x_f32): Likewise.\n+\t(__arm_vrndxq_x_f16): Likewise.\n+\t(__arm_vrndxq_x_f32): Likewise.\n+\t(__arm_vandq_x_f16): Likewise.\n+\t(__arm_vandq_x_f32): Likewise.\n+\t(__arm_vbicq_x_f16): Likewise.\n+\t(__arm_vbicq_x_f32): Likewise.\n+\t(__arm_vbrsrq_x_n_f16): Likewise.\n+\t(__arm_vbrsrq_x_n_f32): Likewise.\n+\t(__arm_veorq_x_f16): Likewise.\n+\t(__arm_veorq_x_f32): Likewise.\n+\t(__arm_vornq_x_f16): Likewise.\n+\t(__arm_vornq_x_f32): Likewise.\n+\t(__arm_vorrq_x_f16): Likewise.\n+\t(__arm_vorrq_x_f32): Likewise.\n+\t(__arm_vrev32q_x_f16): Likewise.\n+\t(__arm_vrev64q_x_f16): Likewise.\n+\t(__arm_vrev64q_x_f32): Likewise.\n+\t(vabdq_x): Define polymorphic variant.\n+\t(vabsq_x): Likewise.\n+\t(vaddq_x): Likewise.\n+\t(vandq_x): Likewise.\n+\t(vbicq_x): Likewise.\n+\t(vbrsrq_x): Likewise.\n+\t(vcaddq_rot270_x): Likewise.\n+\t(vcaddq_rot90_x): Likewise.\n+\t(vcmulq_rot180_x): Likewise.\n+\t(vcmulq_rot270_x): Likewise.\n+\t(vcmulq_x): Likewise.\n+\t(vcvtq_x): Likewise.\n+\t(vcvtq_x_n): Likewise.\n+\t(vcvtnq_m): Likewise.\n+\t(veorq_x): Likewise.\n+\t(vmaxnmq_x): Likewise.\n+\t(vminnmq_x): Likewise.\n+\t(vmulq_x): Likewise.\n+\t(vnegq_x): Likewise.\n+\t(vornq_x): Likewise.\n+\t(vorrq_x): Likewise.\n+\t(vrev32q_x): Likewise.\n+\t(vrev64q_x): Likewise.\n+\t(vrndaq_x): Likewise.\n+\t(vrndmq_x): Likewise.\n+\t(vrndnq_x): Likewise.\n+\t(vrndpq_x): Likewise.\n+\t(vrndq_x): Likewise.\n+\t(vrndxq_x): Likewise.\n+\t(vsubq_x): Likewise.\n+\t(vcmulq_rot90_x): Likewise.\n+\t(vadciq): Likewise.\n+\t(vclsq_x): Likewise.\n+\t(vclzq_x): Likewise.\n+\t(vhaddq_x): Likewise.\n+\t(vhcaddq_rot270_x): Likewise.\n+\t(vhcaddq_rot90_x): Likewise.\n+\t(vhsubq_x): Likewise.\n+\t(vmaxq_x): Likewise.\n+\t(vminq_x): Likewise.\n+\t(vmovlbq_x): Likewise.\n+\t(vmovltq_x): Likewise.\n+\t(vmulhq_x): Likewise.\n+\t(vmullbq_int_x): Likewise.\n+\t(vmullbq_poly_x): Likewise.\n+\t(vmulltq_int_x): Likewise.\n+\t(vmulltq_poly_x): Likewise.\n+\t(vmvnq_x): Likewise.\n+\t(vrev16q_x): Likewise.\n+\t(vrhaddq_x): Likewise.\n+\t(vrmulhq_x): Likewise.\n+\t(vrshlq_x): Likewise.\n+\t(vrshrq_x): Likewise.\n+\t(vshllbq_x): Likewise.\n+\t(vshlltq_x): Likewise.\n+\t(vshlq_x_n): Likewise.\n+\t(vshlq_x): Likewise.\n+\t(vdwdupq_x_u8): Likewise.\n+\t(vdwdupq_x_u16): Likewise.\n+\t(vdwdupq_x_u32): Likewise.\n+\t(viwdupq_x_u8): Likewise.\n+\t(viwdupq_x_u16): Likewise.\n+\t(viwdupq_x_u32): Likewise.\n+\t(vidupq_x_u8): Likewise.\n+\t(vddupq_x_u8): Likewise.\n+\t(vidupq_x_u16): Likewise.\n+\t(vddupq_x_u16): Likewise.\n+\t(vidupq_x_u32): Likewise.\n+\t(vddupq_x_u32): Likewise.\n+\t(vshrq_x): Likewise.\n+\n 2020-03-20  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-slp.c (vect_analyze_slp_instance): Push the stmts"}, {"sha": "77df7c75c3f76066d37f879e01b6d8df6c7394ae", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 4932, "deletions": 1093, "changes": 6025, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=261014a1be433a27af75fb7eecc77231261d84f7"}, {"sha": "adf53b3e245449c34cc19a14f8fd83048b302751", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 378, "deletions": 0, "changes": 378, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -1,3 +1,381 @@\n+2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vabdq_x_f16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vabdq_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabdq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabdq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabdq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabdq_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabdq_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabdq_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabsq_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabsq_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabsq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabsq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabsq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vandq_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vandq_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vandq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vandq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vandq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vandq_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vandq_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vandq_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbrsrq_x_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbrsrq_x_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbrsrq_x_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbrsrq_x_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbrsrq_x_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbrsrq_x_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbrsrq_x_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbrsrq_x_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclsq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclsq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclsq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot180_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot180_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot270_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot270_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot90_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot90_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtaq_x_s16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtaq_x_s32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtaq_x_u16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtaq_x_u32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtbq_x_f32_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtmq_x_s16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtmq_x_s32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtmq_x_u16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtmq_x_u32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtnq_x_s16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtnq_x_s32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtnq_x_u16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtnq_x_u32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtpq_x_s16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtpq_x_s32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtpq_x_u16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtpq_x_u32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_x_f16_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_x_f16_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_x_f32_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_x_f32_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_x_n_f16_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_x_n_f16_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_x_n_f32_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_x_n_f32_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_x_n_s16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_x_n_s32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_x_n_u16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_x_n_u32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_x_s16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_x_s32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_x_u16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_x_u32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvttq_x_f32_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vddupq_x_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vddupq_x_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vddupq_x_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vddupq_x_wb_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vddupq_x_wb_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vddupq_x_wb_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdupq_x_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_wb_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_wb_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vdwdupq_x_wb_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/veorq_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/veorq_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/veorq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/veorq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/veorq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/veorq_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/veorq_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/veorq_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot270_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot270_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot270_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot90_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot90_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhcaddq_rot90_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vidupq_x_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vidupq_x_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vidupq_x_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vidupq_x_wb_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vidupq_x_wb_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vidupq_x_wb_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/viwdupq_x_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/viwdupq_x_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/viwdupq_x_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/viwdupq_x_wb_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/viwdupq_x_wb_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/viwdupq_x_wb_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmq_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmq_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxq_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxq_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxq_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmq_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmq_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminq_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminq_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminq_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovlbq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovlbq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovlbq_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovlbq_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovltq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovltq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovltq_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmovltq_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_poly_x_p16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_poly_x_p8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_poly_x_p16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_poly_x_p8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_x_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_x_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_x_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_x_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vornq_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vornq_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vornq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vornq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vornq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vornq_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vornq_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vornq_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev16q_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev16q_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev32q_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev32q_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev32q_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev32q_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev32q_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev64q_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev64q_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev64q_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev64q_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev64q_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev64q_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev64q_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev64q_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrhaddq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrhaddq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrhaddq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrhaddq_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrhaddq_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrhaddq_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmulhq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmulhq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmulhq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmulhq_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmulhq_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmulhq_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndaq_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndaq_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndmq_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndmq_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndnq_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndnq_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndpq_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndpq_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndq_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndq_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndxq_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrndxq_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshlq_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrq_x_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrq_x_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrq_x_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrq_x_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrq_x_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrq_x_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshllbq_x_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshllbq_x_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshllbq_x_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshllbq_x_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlltq_x_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlltq_x_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlltq_x_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlltq_x_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_x_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_x_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_x_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_x_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_x_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_x_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrq_x_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrq_x_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrq_x_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrq_x_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrq_x_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_x_u8.c: Likewise.\n+\n 2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n             Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>"}, {"sha": "2663db239944c57f0d4a4d8b8918a67ba26f11e5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_x_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vabdq_x_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabdt.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vabdq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "0a5eb5c8d7297c6c6809b5b27d8f3c1d9000c3b6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_x_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vabdq_x_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabdt.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vabdq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "3dd5e5d27171e7d20d5fe3a6fd910ab3314fde43", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_x_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vabdq_x_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabdt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vabdq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabdt.s16\"  }  } */"}, {"sha": "9b1f30f1ae58139bfb6847d70d32d261dc8f0450", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_x_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vabdq_x_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabdt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vabdq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "0e386b5b46faad194ce8d4079380393e5a79ba46", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_x_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vabdq_x_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabdt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vabdq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "ff7599a118acb6d06a674592d27d601dfc7ee85f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_x_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vabdq_x_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabdt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vabdq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "d93c0804652854f8367283400db25350bd194cd6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_x_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vabdq_x_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabdt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vabdq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "73f89e4bd6f8a39d1daba87100663dac939c04ab", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_x_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_x_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vabdq_x_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabdt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vabdq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "4fb74a827ba3022ac3882d1c4d0774d321d20a5d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabsq_x_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_x_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_x_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_x_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, mve_pred16_t p)\n+{\n+  return vabsq_x_f16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabst.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, mve_pred16_t p)\n+{\n+  return vabsq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "2bad3c1515cc491bd9d7607ab28db17a67f5cd29", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabsq_x_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_x_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_x_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_x_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, mve_pred16_t p)\n+{\n+  return vabsq_x_f32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabst.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, mve_pred16_t p)\n+{\n+  return vabsq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "84c0a8a389843afba23433b38ed0a51d768d26e8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabsq_x_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, mve_pred16_t p)\n+{\n+  return vabsq_x_s16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabst.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, mve_pred16_t p)\n+{\n+  return vabsq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "cf427a4e48b52a9c5dae3e06a61f8653b3599075", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabsq_x_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_x_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, mve_pred16_t p)\n+{\n+  return vabsq_x_s32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabst.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, mve_pred16_t p)\n+{\n+  return vabsq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "a3fa9743495a555885f6ba12cee6f894864c45a8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabsq_x_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabsq_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, mve_pred16_t p)\n+{\n+  return vabsq_x_s8 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabst.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, mve_pred16_t p)\n+{\n+  return vabsq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "ec3a85d9916d0c240e80c266860b7aa64985451a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vaddq_x_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.f16\"  }  } */"}, {"sha": "b9b216cb9aec10a2d7ac79e2a6835b192398c403", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vaddq_x_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.f32\"  }  } */"}, {"sha": "2e65cbf95edd349eff37238d4a26abeaad9ccd16", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_n_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vaddq_x_n_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.f16\"  }  } */"}, {"sha": "11243a62bd6c5bc4481697ccb6a6bfb2206dc273", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_n_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vaddq_x_n_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.f32\"  }  } */"}, {"sha": "0ef9afd490c85048a8adcbedbd33236688245ec3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vaddq_x_n_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */"}, {"sha": "20b88a40d515c523e7183c008e106cefc703161a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vaddq_x_n_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */"}, {"sha": "2bc90725c95331a25478e2e30d573304362b50da", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_n_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vaddq_x_n_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */"}, {"sha": "9e3ffb4c79e16921be31d1afa00b89f4dde18ac5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vaddq_x_n_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */"}, {"sha": "ab5140e44ab827b35fbae47e6ab1def877ecf6bc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vaddq_x_n_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */"}, {"sha": "0bdc00d0b4caa8c6f29a00791e561ee233df71fc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vaddq_x_n_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */"}, {"sha": "c33c5cf0df101cebb4d4df60477030495421a585", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vaddq_x_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */"}, {"sha": "458119051d31b80f15634601a9ee854cf7f34c7e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vaddq_x_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */"}, {"sha": "1aa65c9311cfb4146b4f757d7bcfedd532d3402e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vaddq_x_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */"}, {"sha": "eef9acc88a75e13eb8a782f7e979e3860b5a5178", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vaddq_x_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i16\"  }  } */"}, {"sha": "e8e430bc6ff5bfbd25a510c6c59e479c574a6444", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vaddq_x_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i32\"  }  } */"}, {"sha": "1b77145203c6da065642a64ee4c053788663261d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vaddq_x_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.i8\"  }  } */"}, {"sha": "357e4b3c871e8770d052287ebd3d3f9265ca35d5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vandq_x_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_x_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_x_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_x_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vandq_x_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vandt\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vandq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "0e6cdf675a6f1a9a6277ead0813b44e07faa85eb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vandq_x_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_x_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_x_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_x_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vandq_x_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vandt\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vandq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "c18a19e8cf0b8e1e582251c6e9d05975313aec35", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vandq_x_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vandq_x_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vandt\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vandq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "3509dc78c3b484ad7e6a4a7d26cbf863486df83a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vandq_x_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_x_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vandq_x_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vandt\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vandq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "a4f0eece22b2e824b69da85927e5c6ab994294ec", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vandq_x_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vandq_x_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vandt\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vandq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "e85c5bd4ce8b74221f16c942120c2c81380b1aa7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vandq_x_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_x_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vandq_x_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vandt\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vandq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "89430be4fca8e63fab1f3bd5df1d050389169991", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vandq_x_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_x_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_x_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_x_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vandq_x_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vandt\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vandq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "ab074c2b195fba7474dbb595b5e4f18c24c8731f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vandq_x_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_x_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vandq_x_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vandt\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vandq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "12036af29df7fc0414efcb3f4c52af0f42225515", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_x_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_x_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_x_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_x_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vbicq_x_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vbicq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "784653fa20dbc7e3bfd40effb2d520cc4e0f4868", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_x_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_x_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_x_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_x_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vbicq_x_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vbicq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "b0b34aea5d5e6a1d6b964d900d5c473252f82a4d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_x_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vbicq_x_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vbicq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "c023cfaca807f8a2bf020413814efc5ed438245c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_x_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_x_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vbicq_x_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vbicq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "3355dc625c7e5778076000ca23b8f35b994d0dc9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_x_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vbicq_x_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vbicq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "abdcf0021412b9f0ef671cf58f369cef176f4f21", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_x_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_x_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vbicq_x_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vbicq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "2aa34c508095aed75bf129d21b5394db6cda9263", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_x_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_x_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_x_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_x_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vbicq_x_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vbicq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "26c9e2ced9a8a215ba64d29c108502030ad9e8dc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_x_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_x_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vbicq_x_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vbicq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "282837a14957a1362de489e349d08295d61c78e2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbrsrq_x_n_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_x_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_x_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_x_n_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_x_n_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.16\"  }  } */"}, {"sha": "74ef4e61cea267d542de84ff302ed9f217e12e65", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbrsrq_x_n_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_x_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_x_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_x_n_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_x_n_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.32\"  }  } */"}, {"sha": "7f9dc4e773be76250bc5afc152adafdac01c8ab3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbrsrq_x_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_x_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_x_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_x_n_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_x_n_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.16\"  }  } */"}, {"sha": "4a4ffded8e5b7f3b99d94131a7ec3185905824f5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbrsrq_x_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_x_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_x_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_x_n_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_x_n_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.32\"  }  } */"}, {"sha": "db1f6ab8994f9a5e5c33dab37e4b474ad9a0e18a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbrsrq_x_n_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_x_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_x_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_x_n_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_x_n_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.8\"  }  } */"}, {"sha": "1bce070883c3c61eae1d477b318a0f81c6fe0271", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbrsrq_x_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_x_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_x_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_x_n_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_x_n_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.16\"  }  } */"}, {"sha": "6e059c75d7c6bf0fbde121fdc589845be6448bad", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbrsrq_x_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_x_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_x_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_x_n_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_x_n_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.32\"  }  } */"}, {"sha": "aed3136d0516372655b0b7a37738c0616156351b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbrsrq_x_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_x_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_x_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_x_n_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_x_n_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.8\"  }  } */"}, {"sha": "60a96ada068de60c9f54214acf7b92f081679674", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_x_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "b79e7d03ef30d24e370e5480458e78fc07dc4917", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_x_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "efc58205c594b84a56105ffb1a73d626b61ae5ff", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_x_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "25cf2ef5f6d9955572c3e9d72c0a57a5f9a994c5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_x_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "8dbdf137f618ef36d1b1234231c064c0520e47e4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_x_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "13d9aa03204b1fc2663f25e150a4d508c4da8ab0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_x_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "887133e575b99b8a047808b83dbd2f5ca9b48a84", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_x_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "e23cbab797ce1efea56605deaababd22d7d1d6b3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_x_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_x_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "2c96c2ac77faf13a2c5f4ae40e7e7ae7ae3a6bb9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_x_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "6ed2793185d0c8eaf35e64a58aabadc0c61f0c78", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_x_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "9983baed23ca43a42491747804ecbcb0e312c365", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_x_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "658763c4de23d5b4b5cbdf587e0195dd3b653ddb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_x_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "a63dbe621c6d68deaaa3368125bf5756b7034dbf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_x_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "e256cba3831eb57a57ae8c2716fc4598fd3f9da6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_x_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "9361a980f8f8e44376ae75b7b47e36d2be771a43", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_x_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "0664c6e77a72d900a1ab09950b13b19a15ed4240", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_x_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_x_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.i8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "e956fe2de4ff291a3033cbdce9e3a78ad615e5e7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclsq_x_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, mve_pred16_t p)\n+{\n+  return vclsq_x_s16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vclst.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, mve_pred16_t p)\n+{\n+  return vclsq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "cc0037986f8b443ef9cd4079df897fb26f97bda8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclsq_x_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_x_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, mve_pred16_t p)\n+{\n+  return vclsq_x_s32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vclst.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, mve_pred16_t p)\n+{\n+  return vclsq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "262e04c6a15bd06331a415704e7409542e20f9b8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclsq_x_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, mve_pred16_t p)\n+{\n+  return vclsq_x_s8 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vclst.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, mve_pred16_t p)\n+{\n+  return vclsq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "782d385b2f0e994066a158837b50c3dd5ffc3eb5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_x_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, mve_pred16_t p)\n+{\n+  return vclzq_x_s16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vclzt.i16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, mve_pred16_t p)\n+{\n+  return vclzq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "cb96176a6dd06d658c0e0309e2b45dec448326e1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_x_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, mve_pred16_t p)\n+{\n+  return vclzq_x_s32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vclzt.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, mve_pred16_t p)\n+{\n+  return vclzq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "ee7ab8f86feb0dfcae017c6be79c32625b77a73b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_x_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, mve_pred16_t p)\n+{\n+  return vclzq_x_s8 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vclzt.i8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, mve_pred16_t p)\n+{\n+  return vclzq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "d4074abe6e83af85f2abbb9864a42fa921e40be2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_x_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, mve_pred16_t p)\n+{\n+  return vclzq_x_u16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vclzt.i16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, mve_pred16_t p)\n+{\n+  return vclzq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "971126915292b5f7d5deb72fe3e6c9e1fc119653", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_x_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, mve_pred16_t p)\n+{\n+  return vclzq_x_u32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vclzt.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, mve_pred16_t p)\n+{\n+  return vclzq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "baa8eddcecd719ce5af3ef367e2b8d77da2976dc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclzq_x_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclzq_x_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, mve_pred16_t p)\n+{\n+  return vclzq_x_u8 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vclzt.i8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, mve_pred16_t p)\n+{\n+  return vclzq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "caed477d1caa6b16ed983fab51c59e44c6a2eee5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmulq_rot180_x_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot180_x_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot180_x_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot180_x_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmulq_rot180_x_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmult.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmulq_rot180_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "21814ade0c93bf368d91e26780776a0d39107ff7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmulq_rot180_x_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot180_x_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot180_x_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot180_x_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmulq_rot180_x_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmult.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmulq_rot180_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "14f939109e81abb0885ab07e10f4ef4e91dc6b17", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmulq_rot270_x_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot270_x_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot270_x_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot270_x_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmulq_rot270_x_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmult.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmulq_rot270_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "af20dfcbcf630b7a160cc79cb1292d2c6aadc61b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmulq_rot270_x_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot270_x_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot270_x_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot270_x_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmulq_rot270_x_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmult.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmulq_rot270_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "a7fd38043f946944ac4788dd6c09efb57cba81f7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmulq_rot90_x_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot90_x_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot90_x_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot90_x_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmulq_rot90_x_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmult.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmulq_rot90_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmult.f16\"  }  } */"}, {"sha": "6730cd76c5d3591feeeb5bad55b3c6312fc7423e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmulq_rot90_x_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot90_x_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot90_x_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot90_x_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmulq_rot90_x_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmult.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmulq_rot90_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmult.f32\"  }  } */"}, {"sha": "18d32172bdff2f318a217896d819410a7d0352d3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmulq_x_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_x_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_x_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_x_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmulq_x_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmult.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmulq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "7162f4991d1907c63155218d1098330c635dd430", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmulq_x_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_x_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_x_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_x_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmulq_x_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmult.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmulq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "ed4a0ed12991a3d85e718bdf69958faf5d77b394", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtaq_x_s16_f16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_x_s16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_x_s16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_x_s16_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtaq_x_s16_f16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtat.s16.f16\"  }  } */"}, {"sha": "be969caf1b96dcda9ac215bc76b969c9cfb15418", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtaq_x_s32_f32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_x_s32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_x_s32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_x_s32_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtaq_x_s32_f32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtat.s32.f32\"  }  } */"}, {"sha": "93038e94502cefd3dfdc7d1660199ca0fc58ba60", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtaq_x_u16_f16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_x_u16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_x_u16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_x_u16_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtaq_x_u16_f16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtat.u16.f16\"  }  } */"}, {"sha": "421f238adfd2b86f165aaa8d731ecf169868c562", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtaq_x_u32_f32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_x_u32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_x_u32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtaq_x_u32_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtaq_x_u32_f32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtat.u32.f32\"  }  } */"}, {"sha": "98e15cb6e3bd211ccaf8696a1fdcd84260b070a7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtbq_x_f32_f16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtbq_x_f32_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtbq_x_f32_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtbq_x_f32_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtbq_x_f32_f16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtbt.f32.f16\"  }  } */"}, {"sha": "b017c0ee107c294338161714179c80e769564343", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtmq_x_s16_f16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_x_s16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_x_s16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_x_s16_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtmq_x_s16_f16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtmt.s16.f16\"  }  } */"}, {"sha": "8e5e73cb728be5106b4cbfbdd8c786e3dc87c8c8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtmq_x_s32_f32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_x_s32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_x_s32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_x_s32_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtmq_x_s32_f32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtmt.s32.f32\"  }  } */"}, {"sha": "a747745c65f6c303aef83ceb996c60dc7b750bbe", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtmq_x_u16_f16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_x_u16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_x_u16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_x_u16_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtmq_x_u16_f16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtmt.u16.f16\"  }  } */"}, {"sha": "7863427d40cbf3eccfc6337515c0a474578345f1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtmq_x_u32_f32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_x_u32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_x_u32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtmq_x_u32_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtmq_x_u32_f32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtmt.u32.f32\"  }  } */"}, {"sha": "b2b7230ce61e44027f3e9dfb08c719ddcd447540", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtnq_x_s16_f16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_x_s16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_x_s16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_x_s16_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtnq_x_s16_f16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtnt.s16.f16\"  }  } */"}, {"sha": "e9f2fadcc328f1c12b028e6b2b85cd2f3679152f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtnq_x_s32_f32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_x_s32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_x_s32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_x_s32_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtnq_x_s32_f32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtnt.s32.f32\"  }  } */"}, {"sha": "05566182b521c8769bbc5cdff6a5acab0b2062c8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtnq_x_u16_f16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_x_u16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_x_u16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_x_u16_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtnq_x_u16_f16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtnt.u16.f16\"  }  } */"}, {"sha": "967bfb8ccda054656d2ea4d0d80a98046b9e90da", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtnq_x_u32_f32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_x_u32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_x_u32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtnq_x_u32_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtnq_x_u32_f32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtnt.u32.f32\"  }  } */"}, {"sha": "7ffe464cf7cdb558d9811f0ea2463dce96542861", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtpq_x_s16_f16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_x_s16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_x_s16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_x_s16_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtpq_x_s16_f16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtpt.s16.f16\"  }  } */"}, {"sha": "0fe3380deb2a02250ba2da163d018537410aa48c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtpq_x_s32_f32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_x_s32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_x_s32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_x_s32_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtpq_x_s32_f32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtpt.s32.f32\"  }  } */"}, {"sha": "77fd34c3edf48f6f1b01e051c918715b47f0c3ed", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtpq_x_u16_f16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_x_u16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_x_u16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_x_u16_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtpq_x_u16_f16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtpt.u16.f16\"  }  } */"}, {"sha": "369c9419a6cd56c6aa32d565cb7c734c00c5f613", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtpq_x_u32_f32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_x_u32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_x_u32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtpq_x_u32_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtpq_x_u32_f32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtpt.u32.f32\"  }  } */"}, {"sha": "3c97d6e454a0a837aadad01e11d86cebf891308f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_x_f16_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_f16_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_f16_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_f16_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (int16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_x_f16_s16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f16.s16\"  }  } */\n+\n+float16x8_t\n+foo1 (int16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f16.s16\"  }  } */"}, {"sha": "14ca8c7b98289fa071cba1342f90652a3fc8ee25", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_x_f16_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_f16_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_f16_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_f16_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (uint16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_x_f16_u16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f16.u16\"  }  } */\n+\n+float16x8_t\n+foo1 (uint16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f16.u16\"  }  } */"}, {"sha": "b851d918f8bb32fe50fee3cdaeee26ad4100dba6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_x_f32_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_f32_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_f32_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_f32_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (int32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_x_f32_s32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f32.s32\"  }  } */\n+\n+float32x4_t\n+foo1 (int32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f32.s32\"  }  } */"}, {"sha": "4c44257ab0cd50ed72042eaa36b74695d3ffc554", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_x_f32_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_f32_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_f32_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_f32_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (uint32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_x_f32_u32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f32.u32\"  }  } */\n+\n+float32x4_t\n+foo1 (uint32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f32.u32\"  }  } */"}, {"sha": "63d6cc6cfde6294cad1018b979121f5effd0c733", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_x_n_f16_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_n_f16_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_n_f16_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_n_f16_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (int16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_x_n_f16_s16 (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f16.s16\"  }  } */\n+\n+float16x8_t\n+foo1 (int16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_x_n (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f16.s16\"  }  } */"}, {"sha": "13cf17dd6151b43f232795dfc61a852bf5ebb556", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_x_n_f16_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_n_f16_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_n_f16_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_n_f16_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (uint16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_x_n_f16_u16 (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f16.u16\"  }  } */\n+\n+float16x8_t\n+foo1 (uint16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_x_n (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f16.u16\"  }  } */"}, {"sha": "630d3bface7e39ae83defea336baa000b3677a25", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_x_n_f32_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_n_f32_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_n_f32_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_n_f32_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (int32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_x_n_f32_s32 (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f32.s32\"  }  } */\n+\n+float32x4_t\n+foo1 (int32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_x_n (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f32.s32\"  }  } */"}, {"sha": "5d64fec59e5bf9a1f73e8b6cc00635df69c67127", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_x_n_f32_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_n_f32_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_n_f32_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_n_f32_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (uint32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_x_n_f32_u32 (a, 16, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f32.u32\"  }  } */\n+\n+float32x4_t\n+foo1 (uint32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_x_n (a, 16, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f32.u32\"  }  } */"}, {"sha": "1b053fd3887ea5e7c1e151426cfc26669c59d0f2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_x_n_s16_f16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_n_s16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_n_s16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_n_s16_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_x_n_s16_f16 (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.s16.f16\"  }  } */"}, {"sha": "2cc8f74cd37cbd57f5cd8684e2acae8f006ecf1d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_x_n_s32_f32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_n_s32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_n_s32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_n_s32_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_x_n_s32_f32 (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.s32.f32\"  }  } */"}, {"sha": "a55579177e9149e8a7515b6a7e19534817f2321b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_x_n_u16_f16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_n_u16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_n_u16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_n_u16_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_x_n_u16_f16 (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.u16.f16\"  }  } */"}, {"sha": "5a8c22db1eeb425bde09f3e01c95c0118ef1e7f3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_x_n_u32_f32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_n_u32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_n_u32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_n_u32_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_x_n_u32_f32 (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.u32.f32\"  }  } */"}, {"sha": "de29fce5de33f022e355c5a126496e653d429392", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_x_s16_f16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_s16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_s16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_s16_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_x_s16_f16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.s16.f16\"  }  } */"}, {"sha": "312254ed58e233d4f1c8bf16f75859bea64b59ae", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_x_s32_f32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_s32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_s32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_s32_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_x_s32_f32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.s32.f32\"  }  } */"}, {"sha": "de6305e4d7fb0e60455f8fa7ec6e589a56c09306", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_x_u16_f16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_u16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_u16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_u16_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_x_u16_f16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.u16.f16\"  }  } */"}, {"sha": "1e1ab55fe56cc89c5e7ad915a5e3cae508e238ef", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_x_u32_f32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_u32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_u32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_x_u32_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_x_u32_f32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.u32.f32\"  }  } */"}, {"sha": "14090127af558a2bdc11eec934bf7014ebf205cd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvttq_x_f32_f16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvttq_x_f32_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvttq_x_f32_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvttq_x_f32_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvttq_x_f32_f16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvttt.f32.f16\"  }  } */"}, {"sha": "e11051004745097ff210f295084f96d56ac49b94", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_x_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_n_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint32_t a, mve_pred16_t p)\n+{\n+  return vddupq_x_n_u16 (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vddupt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint32_t a, mve_pred16_t p)\n+{\n+  return vddupq_x_u16 (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vddupt.u16\"  }  } */"}, {"sha": "5915ab8996d049d4d7353b0ef2c152a45d6aa6c0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_x_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_n_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32_t a, mve_pred16_t p)\n+{\n+  return vddupq_x_n_u32 (a, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vddupt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32_t a, mve_pred16_t p)\n+{\n+  return vddupq_x_u32 (a, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vddupt.u32\"  }  } */"}, {"sha": "7973f45227f18567e8cb7cbe7712d5bfadcfdde2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_x_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_n_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint32_t a, mve_pred16_t p)\n+{\n+  return vddupq_x_n_u8 (a, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vddupt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint32_t a, mve_pred16_t p)\n+{\n+  return vddupq_x_u8 (a, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vddupt.u8\"  }  } */"}, {"sha": "348cd58e09d9aee0e9879f0763ae4f3c63b2fb23", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_x_wb_u16.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_wb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_wb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_wb_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t *a;\n+\n+uint16x8_t\n+foo (mve_pred16_t p)\n+{\n+  return vddupq_x_wb_u16 (a, 2, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vddupt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (mve_pred16_t p)\n+{\n+  return vddupq_x_u16 (a, 2, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vddupt.u16\"  }  } */"}, {"sha": "c8d664d68496d2986bf9b111951dc03ef2e27228", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_x_wb_u32.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_wb_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t *a;\n+\n+uint32x4_t\n+foo (mve_pred16_t p)\n+{\n+  return vddupq_x_wb_u32 (a, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vddupt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (mve_pred16_t p)\n+{\n+  return vddupq_x_u32 (a, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vddupt.u32\"  }  } */"}, {"sha": "74fea793e935e0812319993e0275b1119b5c4f03", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_x_wb_u8.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_wb_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_wb_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_wb_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t *a;\n+\n+uint8x16_t\n+foo (mve_pred16_t p)\n+{\n+  return vddupq_x_wb_u8 (a, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vddupt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (mve_pred16_t p)\n+{\n+  return vddupq_x_u8 (a, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vddupt.u8\"  }  } */"}, {"sha": "b738c2b390633e4d0a72ee50a26d264c8f103401", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdupq_x_n_f16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_x_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_x_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_x_n_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16_t a, mve_pred16_t p)\n+{\n+  return vdupq_x_n_f16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdupt.16\"  }  } */"}, {"sha": "2c7e49c20a82874e069fe68c6c690d3b737b07c4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdupq_x_n_f32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_x_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_x_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_x_n_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32_t a, mve_pred16_t p)\n+{\n+  return vdupq_x_n_f32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdupt.32\"  }  } */"}, {"sha": "43cda918226d77dd1b5d69661e34865e7399e6a2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdupq_x_n_s16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_x_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_x_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_x_n_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16_t a, mve_pred16_t p)\n+{\n+  return vdupq_x_n_s16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdupt.16\"  }  } */"}, {"sha": "b57fe6b7163aa12ee78c7fb7b410672f25ccbb90", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdupq_x_n_s32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_x_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_x_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_x_n_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32_t a, mve_pred16_t p)\n+{\n+  return vdupq_x_n_s32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdupt.32\"  }  } */"}, {"sha": "89c13c9443fc3618b9acf4533d68260ae65af249", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdupq_x_n_s8.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_x_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_x_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_x_n_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8_t a, mve_pred16_t p)\n+{\n+  return vdupq_x_n_s8 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdupt.8\"  }  } */"}, {"sha": "edadfca744cd2b83c16271361f2b261cacdc7cfb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdupq_x_n_u16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_x_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_x_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_x_n_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16_t a, mve_pred16_t p)\n+{\n+  return vdupq_x_n_u16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdupt.16\"  }  } */"}, {"sha": "a4b48741f91fc58deb0aac067598a0fc51be91d5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdupq_x_n_u32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_x_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_x_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_x_n_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32_t a, mve_pred16_t p)\n+{\n+  return vdupq_x_n_u32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdupt.32\"  }  } */"}, {"sha": "cfbf97d375bc60b300e2025ce9e57a6145a85138", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdupq_x_n_u8.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_x_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_x_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdupq_x_n_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8_t a, mve_pred16_t p)\n+{\n+  return vdupq_x_n_u8 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdupt.8\"  }  } */"}, {"sha": "9969ae34b838a5ee05d1efb1aa8056fba433863b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_x_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_n_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vdwdupq_x_n_u16 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdwdupt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vdwdupq_x_u16 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdwdupt.u16\"  }  } */"}, {"sha": "ae563872affad5119ad88e54282fb5bc972a18c4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_x_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_n_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vdwdupq_x_n_u32 (a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdwdupt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vdwdupq_x_u32 (a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdwdupt.u32\"  }  } */"}, {"sha": "ee29159860026eae9692a9ebd651abbacb5e1a60", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_x_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_n_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vdwdupq_x_n_u8 (a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdwdupt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vdwdupq_x_u8 (a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdwdupt.u8\"  }  } */"}, {"sha": "4e3c1bfb792548fe3ab8e2d465c473d03af1168c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_x_wb_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_wb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_wb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_wb_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint32_t * a, uint32_t b, mve_pred16_t p)\n+{\n+  return vdwdupq_x_wb_u16 (a, b, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdwdupt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint32_t * a, uint32_t b, mve_pred16_t p)\n+{\n+  return vdwdupq_x_u16 (a, b, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdwdupt.u16\"  }  } */"}, {"sha": "0988b07d50fc397038b85aaef6912fcd1d23fbde", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_x_wb_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_wb_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32_t * a, uint32_t b, mve_pred16_t p)\n+{\n+  return vdwdupq_x_wb_u32 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdwdupt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32_t * a, uint32_t b, mve_pred16_t p)\n+{\n+  return vdwdupq_x_u32 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdwdupt.u32\"  }  } */"}, {"sha": "570894706a37e6d5b7a014a80b16f3d8bb76b422", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vdwdupq_x_wb_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_wb_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_wb_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvdwdupq_x_wb_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint32_t * a, uint32_t b, mve_pred16_t p)\n+{\n+  return vdwdupq_x_wb_u8 (a, b, 2, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdwdupt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint32_t * a, uint32_t b, mve_pred16_t p)\n+{\n+  return vdwdupq_x_u8 (a, b, 2, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vdwdupt.u8\"  }  } */"}, {"sha": "bbabc079bdc8aa4d5940d583658f83dacc4d03a5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/veorq_x_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_x_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_x_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_x_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return veorq_x_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return veorq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */"}, {"sha": "577df0e2f897c5b72f16e582bd88612274d4ff5b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/veorq_x_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_x_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_x_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_x_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return veorq_x_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return veorq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */"}, {"sha": "88ba5f16d240e1418046bbc9ab7858bb314d4656", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/veorq_x_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return veorq_x_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return veorq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */"}, {"sha": "bea7870acee0a7b9f546570da805c8598b936ce7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/veorq_x_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_x_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return veorq_x_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return veorq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */"}, {"sha": "23bb97132a50386838fab8c90c2fb215d5d04ff2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/veorq_x_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return veorq_x_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return veorq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */"}, {"sha": "30f52682a0b65e62e08f74d81b8c8d10067b364b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/veorq_x_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_x_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return veorq_x_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return veorq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */"}, {"sha": "91225741c059a9fd49c951e5eff84dfdbc814e45", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/veorq_x_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_x_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_x_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_x_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return veorq_x_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return veorq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */"}, {"sha": "c5babd2c493b2ef3c8d27ac188d797e658f87234", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/veorq_x_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_x_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return veorq_x_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return veorq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */"}, {"sha": "3af3d61407b79439dcf8c58a932e428191329e39", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmaq_n_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_n_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -16,7 +16,7 @@ foo (float16x8_t a, float16x8_t b, float16_t c)\n float16x8_t\n foo1 (float16x8_t a, float16x8_t b, float16_t c)\n {\n-  return vfmaq_n (a, b, c);\n+  return vfmaq (a, b, c);\n }\n \n /* { dg-final { scan-assembler \"vfma.f16\"  }  } */"}, {"sha": "b6a9205a2a2426fcd2df9423173206775fa55aed", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmaq_n_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_n_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -16,7 +16,7 @@ foo (float32x4_t a, float32x4_t b, float32_t c)\n float32x4_t\n foo1 (float32x4_t a, float32x4_t b, float32_t c)\n {\n-  return vfmaq_n (a, b, c);\n+  return vfmaq (a, b, c);\n }\n \n /* { dg-final { scan-assembler \"vfma.f32\"  }  } */"}, {"sha": "358faf69ab5416cd167afdab1573f24b62dae546", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmasq_n_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_n_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -16,7 +16,7 @@ foo (float16x8_t a, float16x8_t b, float16_t c)\n float16x8_t\n foo1 (float16x8_t a, float16x8_t b, float16_t c)\n {\n-  return vfmasq_n (a, b, c);\n+  return vfmasq (a, b, c);\n }\n \n /* { dg-final { scan-assembler \"vfmas.f16\"  }  } */"}, {"sha": "02ca854ebcede3f6416a250f1e01b1822223bd67", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmasq_n_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_n_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -16,7 +16,7 @@ foo (float32x4_t a, float32x4_t b, float32_t c)\n float32x4_t\n foo1 (float32x4_t a, float32x4_t b, float32_t c)\n {\n-  return vfmasq_n (a, b, c);\n+  return vfmasq (a, b, c);\n }\n \n /* { dg-final { scan-assembler \"vfmas.f32\"  }  } */"}, {"sha": "3e27bf14cced53ea758db09ca770a015cf527b6f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_x_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_n_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vhaddq_x_n_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vhaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.s16\"  }  } */"}, {"sha": "8ae4f7e7ba380ee2ef2cc6075d1af5b0043b6aaa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_x_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_n_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vhaddq_x_n_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vhaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.s32\"  }  } */"}, {"sha": "0c46b821432637836ab551acde2e3c41817e5f74", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_x_n_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_n_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vhaddq_x_n_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vhaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.s8\"  }  } */"}, {"sha": "c4814d3aa5cf881e1d8d4b1e89e18891f35b1d94", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_x_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_n_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vhaddq_x_n_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vhaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.u16\"  }  } */"}, {"sha": "f8658e231a12c20b4e53d86845da68c1b135e338", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_x_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_n_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vhaddq_x_n_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vhaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.u32\"  }  } */"}, {"sha": "b69445b9604f17c67a2e27dcd2eea849efa8f683", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_x_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_n_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vhaddq_x_n_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vhaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.u8\"  }  } */"}, {"sha": "1c54a3315286c188359830040477041ffc7e71c9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_x_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vhaddq_x_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vhaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "9fd4305039d418fe57335fcacf9fcfda2d40825f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_x_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vhaddq_x_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vhaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "69f14a54ef45f9d01df88d5c93492ac3e7105d18", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_x_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vhaddq_x_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vhaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "010bfc544e66ee98736ce7795bd5f9f356a6da89", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_x_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vhaddq_x_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vhaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "a5931263d5c3b637a6d9aec97960410edd59eb0c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_x_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vhaddq_x_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vhaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "28784b3ee17f83e38ad18e794f219b9fcc5af417", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhaddq_x_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhaddq_x_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vhaddq_x_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhaddt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vhaddq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "bfb354998740f2df1b174047fa7872b11c2d8914", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhcaddq_rot270_x_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot270_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot270_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot270_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vhcaddq_rot270_x_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhcaddt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vhcaddq_rot270_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "cbbcd413ad5f61b0bd560e458b3d7dcbb0f0170f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhcaddq_rot270_x_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot270_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot270_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot270_x_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vhcaddq_rot270_x_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhcaddt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vhcaddq_rot270_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "0a06cb9d266b5e31b443626d86a23f04c2ef6f6b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhcaddq_rot270_x_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot270_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot270_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot270_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vhcaddq_rot270_x_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhcaddt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vhcaddq_rot270_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "d7807cc95770a93d895e14624efb88c2c3566a2f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhcaddq_rot90_x_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot90_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot90_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot90_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vhcaddq_rot90_x_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhcaddt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vhcaddq_rot90_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "a55e53c77dea833146d05a936de9de101cf3ef42", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhcaddq_rot90_x_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot90_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot90_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot90_x_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vhcaddq_rot90_x_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhcaddt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vhcaddq_rot90_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "438c9da3429a2b6b22494bcaf5eb7b15ab6c3e58", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhcaddq_rot90_x_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot90_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot90_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhcaddq_rot90_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vhcaddq_rot90_x_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhcaddt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vhcaddq_rot90_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "d6d0458f7e5dffe17a73acdb5b0f53f9bbe42fa1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_x_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vhsubq_x_n_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vhsubq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.s16\"  }  } */"}, {"sha": "ff949c888938f303a187d38e77cb403fd4176beb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_x_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vhsubq_x_n_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vhsubq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.s32\"  }  } */"}, {"sha": "c322cd344099fe16678358f2f0f61d7a5454a02a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_x_n_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vhsubq_x_n_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vhsubq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.s8\"  }  } */"}, {"sha": "d43080becaafffa5b354c1a8ebfd0dcdd1f0c8b1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_x_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vhsubq_x_n_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vhsubq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.u16\"  }  } */"}, {"sha": "c814784a04ca012db9ae305c4085d7346eb86796", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_x_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vhsubq_x_n_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vhsubq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.u32\"  }  } */"}, {"sha": "b259747087c4bad782c314495942a5cb6918c95d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_x_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vhsubq_x_n_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vhsubq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.u8\"  }  } */"}, {"sha": "fff5b54c62fd672419ced63111d4c93025ee99f9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_x_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vhsubq_x_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vhsubq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "811548fd94aa46616604ede865af4e3add33ae53", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_x_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vhsubq_x_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vhsubq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "a8e05bea7577446b0bfb6960cce425968242fc91", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_x_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vhsubq_x_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vhsubq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "c01cfe054d6c462376df88a634c58eace4894ef1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_x_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vhsubq_x_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vhsubq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "21d5a1ec4f4309a5c97aed7ffc9e8205a1f1abfa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_x_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vhsubq_x_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vhsubq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "51811e2f2119776bb53b1729405de412b3bc92d9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_x_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vhsubq_x_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vhsubt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vhsubq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "f1bd0602a75838e28989f920e15181844da3c004", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_x_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_n_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint32_t a, mve_pred16_t p)\n+{\n+  return vidupq_x_n_u16 (a, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vidupt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint32_t a, mve_pred16_t p)\n+{\n+  return vidupq_x_u16 (a, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vidupt.u16\"  }  } */"}, {"sha": "497f932b17426123291eaee27a4f14d81e86e7e4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_x_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_n_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32_t a, mve_pred16_t p)\n+{\n+  return vidupq_x_n_u32 (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vidupt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32_t a, mve_pred16_t p)\n+{\n+  return vidupq_x_u32 (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vidupt.u32\"  }  } */"}, {"sha": "eafe9832eeb21884686964aa934526628307e5a9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_x_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_n_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint32_t a, mve_pred16_t p)\n+{\n+  return vidupq_x_n_u8 (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vidupt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint32_t a, mve_pred16_t p)\n+{\n+  return vidupq_x_u8 (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vidupt.u8\"  }  } */"}, {"sha": "97dc350efd691296fa3e6a34504701c53513433e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_x_wb_u16.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_wb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_wb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_wb_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t *a;\n+\n+uint16x8_t\n+foo (mve_pred16_t p)\n+{\n+  return vidupq_x_wb_u16 (a, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vidupt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (mve_pred16_t p)\n+{\n+  return vidupq_x_u16 (a, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vidupt.u16\"  }  } */"}, {"sha": "b21be73098734f6a4971175bacefd4fc032cf957", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_x_wb_u32.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_wb_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t *a;\n+\n+uint32x4_t\n+foo (mve_pred16_t p)\n+{\n+  return vidupq_x_wb_u32 (a, 2, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vidupt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (mve_pred16_t p)\n+{\n+  return vidupq_x_u32 (a, 2, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vidupt.u32\"  }  } */"}, {"sha": "239d04e6cab7b34be6c2f39b7205ebbec8027a1f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_x_wb_u8.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_wb_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_wb_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_wb_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t * a;\n+\n+uint8x16_t\n+foo (mve_pred16_t p)\n+{\n+  return vidupq_x_wb_u8 (a, 2, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vidupt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (mve_pred16_t p)\n+{\n+  return vidupq_x_u8 (a, 2, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vidupt.u8\"  }  } */"}, {"sha": "2503927817ca3180b6278e8d0c9800311af18fac", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_x_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_n_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return viwdupq_x_n_u16 (a, b, 2, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"viwdupt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return viwdupq_x_u16 (a, b, 2, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"viwdupt.u16\"  }  } */"}, {"sha": "26d0e09bccd9c5a4489aa6ed130af0d852c6d006", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_x_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_n_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return viwdupq_x_n_u32 (a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"viwdupt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return viwdupq_x_u32 (a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"viwdupt.u32\"  }  } */"}, {"sha": "97f47a4d9af5357b608a1b9c0d1edfe974ac816c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_x_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_n_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return viwdupq_x_n_u8 (a, b, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"viwdupt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint32_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return viwdupq_x_u8 (a, b, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"viwdupt.u8\"  }  } */"}, {"sha": "bbb2fa4fa04d496628dec1a9e698b5aef6057641", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_x_wb_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_wb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_wb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_wb_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint32_t * a, uint32_t b, mve_pred16_t p)\n+{\n+  return viwdupq_x_wb_u16 (a, b, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"viwdupt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint32_t * a, uint32_t b, mve_pred16_t p)\n+{\n+  return viwdupq_x_u16 (a, b, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"viwdupt.u16\"  }  } */"}, {"sha": "8b9a2c73b883e3f841135f46e0b2f15303ceca08", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_x_wb_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_wb_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32_t * a, uint32_t b, mve_pred16_t p)\n+{\n+  return viwdupq_x_wb_u32 (a, b, 2, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"viwdupt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32_t * a, uint32_t b, mve_pred16_t p)\n+{\n+  return viwdupq_x_u32 (a, b, 2, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"viwdupt.u32\"  }  } */"}, {"sha": "012343b3b742334c215a5b239adf2e99f34617af", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/viwdupq_x_wb_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_wb_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_wb_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fviwdupq_x_wb_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint32_t * a, uint32_t b, mve_pred16_t p)\n+{\n+  return viwdupq_x_wb_u8 (a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"viwdupt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint32_t * a, uint32_t b, mve_pred16_t p)\n+{\n+  return viwdupq_x_u8 (a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"viwdupt.u8\"  }  } */"}, {"sha": "5ffedb8583475d594460cf286e85682023824c4f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmq_x_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_x_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_x_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_x_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxnmq_x_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxnmt.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxnmq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "223681a578099a644a6b1346a232f727dc84ec36", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmq_x_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_x_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_x_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_x_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxnmq_x_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxnmt.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxnmq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "caba15adce63c24f48ce396ee30d74c9c2fc122c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_x_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxq_x_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "24e0edb20b42abd118e427bd7c2b2eb1e83411e6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_x_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxq_x_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "12e99b97ce45a33c6b8d9917c6195ddc0a6ce3db", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_x_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmaxq_x_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmaxq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "4d158f883253baaac104a7c2c79d69217019c0fe", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_x_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxq_x_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "2a28b3d0ae6181e5ed7d407be5079e26c1ad1ec6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_x_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxq_x_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "6a8bc6b99cc86bf52c1ebd13850e953107202f51", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_x_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmaxq_x_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmaxq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "59ef96fa96b8f780bcc38d87a00d001f0e3ed9bd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmq_x_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_x_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_x_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_x_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vminnmq_x_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vminnmt.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vminnmq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "6225aa1c42cd178eb13b7ed39e3fae8f93157232", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmq_x_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_x_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_x_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_x_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vminnmq_x_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vminnmt.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vminnmq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "0f29965071ac44421ba7b4682cd9ff74f1f29b39", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_x_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vminq_x_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmint.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vminq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "f2b20f1e855566f4142dde745b39c4db82a86620", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_x_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vminq_x_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmint.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vminq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "a4b172f7ed1843e76a64525070522d8e356d72b7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_x_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vminq_x_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmint.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vminq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "e4643ad9822b2e5d22a2108abd226306035c2d64", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_x_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vminq_x_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmint.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vminq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "a04274913ed883ba2526590f2d35c115c2fcd6e3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_x_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vminq_x_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmint.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vminq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "cb578ab33f219793fa67c49d53aaa62c97465a8e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminq_x_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminq_x_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vminq_x_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmint.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vminq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "a55e0931a7f837722335696cfbf1b5d43b048e30", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovlbq_x_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int16x8_t a, mve_pred16_t p)\n+{\n+  return vmovlbq_x_s16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmovlbt.s16\"  }  } */\n+\n+int32x4_t\n+foo1 (int16x8_t a, mve_pred16_t p)\n+{\n+  return vmovlbq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "8462ca402a0b46918c6adb583a7739a764d8b49f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovlbq_x_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int8x16_t a, mve_pred16_t p)\n+{\n+  return vmovlbq_x_s8 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmovlbt.s8\"  }  } */\n+\n+int16x8_t\n+foo1 (int8x16_t a, mve_pred16_t p)\n+{\n+  return vmovlbq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "d51eae84a730ee8291e97c6cef8cc0d89a406108", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovlbq_x_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_x_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint16x8_t a, mve_pred16_t p)\n+{\n+  return vmovlbq_x_u16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmovlbt.u16\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint16x8_t a, mve_pred16_t p)\n+{\n+  return vmovlbq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "f9040cd08f6ad9c711cdefe7e7b7a6c5d7a7ac87", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovlbq_x_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovlbq_x_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint8x16_t a, mve_pred16_t p)\n+{\n+  return vmovlbq_x_u8 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmovlbt.u8\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint8x16_t a, mve_pred16_t p)\n+{\n+  return vmovlbq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "6168454334e8aee4559a19cfe7b14e5ea0bf794e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovltq_x_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int16x8_t a, mve_pred16_t p)\n+{\n+  return vmovltq_x_s16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmovltt.s16\"  }  } */\n+\n+int32x4_t\n+foo1 (int16x8_t a, mve_pred16_t p)\n+{\n+  return vmovltq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "3a8c081dc0c87857c7e303652915600ebefe95c6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovltq_x_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int8x16_t a, mve_pred16_t p)\n+{\n+  return vmovltq_x_s8 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmovltt.s8\"  }  } */\n+\n+int16x8_t\n+foo1 (int8x16_t a, mve_pred16_t p)\n+{\n+  return vmovltq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "98583051954f40fa259ffbc693f7c481fc85a327", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovltq_x_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_x_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint16x8_t a, mve_pred16_t p)\n+{\n+  return vmovltq_x_u16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmovltt.u16\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint16x8_t a, mve_pred16_t p)\n+{\n+  return vmovltq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "9072372b3cde988d4d5f8682f79e693fa93ab328", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmovltq_x_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmovltq_x_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint8x16_t a, mve_pred16_t p)\n+{\n+  return vmovltq_x_u8 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmovltt.u8\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint8x16_t a, mve_pred16_t p)\n+{\n+  return vmovltq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "d8d5b014572b041470d960612f951116cb369d02", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulhq_x_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmulhq_x_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulht.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmulhq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "ca46762ff8b2989052d6396c0de499cc4253dc1e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulhq_x_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_x_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmulhq_x_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulht.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmulhq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "9e154a5808c65dcaeedcaabd800db040fc15ad13", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulhq_x_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmulhq_x_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulht.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmulhq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "9cee31aeea44b9993624e6b310a1a52e996b96f8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulhq_x_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_x_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmulhq_x_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulht.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmulhq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "0bc19e3c4a33e07321f234cf4dd0c160a9398df7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulhq_x_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_x_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_x_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_x_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmulhq_x_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulht.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmulhq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "feb2fa4ec7baf0ae8eab2170d94a7441b459e08f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulhq_x_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulhq_x_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmulhq_x_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulht.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmulhq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "f24ec82e2282cf777ecfa315cb3b2e618c2facb5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmullbq_int_x_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmullbq_int_x_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmullbt.s16\"  }  } */\n+\n+int32x4_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmullbq_int_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "ffc77b80de82c46b0b56664bbe7780b6d48fad04", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmullbq_int_x_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_x_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64x2_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmullbq_int_x_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmullbt.s32\"  }  } */\n+\n+int64x2_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmullbq_int_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "495269076ba61b503cd6f9e138f3ebb0cc775ad6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmullbq_int_x_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmullbq_int_x_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmullbt.s8\"  }  } */\n+\n+int16x8_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmullbq_int_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "58cd666747f4b5ac5ab4a7cb0b5d61e9ff153964", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmullbq_int_x_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_x_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmullbq_int_x_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmullbt.u16\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmullbq_int_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "7029df8f2cfd9937c9d83ea781701bc8c54c4f13", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmullbq_int_x_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_x_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_x_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_x_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64x2_t\n+foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmullbq_int_x_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmullbt.u32\"  }  } */\n+\n+uint64x2_t\n+foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmullbq_int_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "7b7efc3d9312123c316887f4d446c5e9bb8c9d2f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmullbq_int_x_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_int_x_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmullbq_int_x_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmullbt.u8\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmullbq_int_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "b18fb29b4d319787a5f902e9da751c42a4d0b06c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmullbq_poly_x_p16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_poly_x_p16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_poly_x_p16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_poly_x_p16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmullbq_poly_x_p16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmullbt.p16\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmullbq_poly_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "4e5a5e305e2b2593559ae43133a48bfc5c9c6af2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmullbq_poly_x_p8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_poly_x_p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_poly_x_p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_poly_x_p8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmullbq_poly_x_p8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmullbt.p8\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmullbq_poly_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "0aa2ebdb52c9e8e10962f1611a6290571e959d2f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulltq_int_x_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmulltq_int_x_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulltt.s16\"  }  } */\n+\n+int32x4_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmulltq_int_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "491d05023957c9d84e03ae9ebf7e02049939c3c2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulltq_int_x_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_x_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64x2_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmulltq_int_x_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulltt.s32\"  }  } */\n+\n+int64x2_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmulltq_int_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "f0e1aaf4f53a1b7eb23f1e07dfd9d4f28f833293", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulltq_int_x_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmulltq_int_x_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulltt.s8\"  }  } */\n+\n+int16x8_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmulltq_int_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "21d094db0b4bec0ea62049856c7426d333222b39", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulltq_int_x_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_x_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmulltq_int_x_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulltt.u16\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmulltq_int_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "5ec93e35babd741cc601c61734251e7ef91f39a7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulltq_int_x_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_x_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_x_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_x_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64x2_t\n+foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmulltq_int_x_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulltt.u32\"  }  } */\n+\n+uint64x2_t\n+foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmulltq_int_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "be9d922d9d1df0f2decd02f395656f44f025f60d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulltq_int_x_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_int_x_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmulltq_int_x_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulltt.u8\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmulltq_int_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "5a5dec040456f47ae680e09eaf5db2831b4a67ef", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulltq_poly_x_p16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_poly_x_p16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_poly_x_p16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_poly_x_p16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmulltq_poly_x_p16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulltt.p16\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmulltq_poly_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "ff8eccd3ea63b2e2a6afb524ff2cb247ccee63f4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulltq_poly_x_p8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_poly_x_p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_poly_x_p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_poly_x_p8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmulltq_poly_x_p8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulltt.p8\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmulltq_poly_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "2a44a45c55303f9a797fb1252ce2eb6236b85e51", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_x_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vmulq_x_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vmulq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.f16\"  }  } */"}, {"sha": "f33f085b8c685d1800ce756a0c267d13ec6c1478", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_x_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vmulq_x_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vmulq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.f32\"  }  } */"}, {"sha": "29958907aa213749fc4112183fc2368f636f63a0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_x_n_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vmulq_x_n_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vmulq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.f16\"  }  } */"}, {"sha": "53aa6b731253ed417ef5ceaccb305ba43b436c83", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_x_n_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vmulq_x_n_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vmulq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.f32\"  }  } */"}, {"sha": "fc64cc157013efdc3ef158e2ff022e6d731118f9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_x_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vmulq_x_n_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vmulq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i16\"  }  } */"}, {"sha": "28a5d0b57f14214af22b323de72b0eb18db723f0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_x_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vmulq_x_n_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vmulq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i32\"  }  } */"}, {"sha": "b3d24199221955872444551765d53d977c6018fa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_x_n_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vmulq_x_n_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8_t b, mve_pred16_t p)\n+{\n+  return vmulq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i8\"  }  } */"}, {"sha": "7864a133eec25907a4074aee6be4f155cb59868e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_x_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vmulq_x_n_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16_t b, mve_pred16_t p)\n+{\n+  return vmulq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i16\"  }  } */"}, {"sha": "29bec64d82aa087a722f07728b6619f9997b73aa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_x_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vmulq_x_n_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32_t b, mve_pred16_t p)\n+{\n+  return vmulq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i32\"  }  } */"}, {"sha": "88afbebdbbbf4a62df72327b88ffafd4a329b1fe", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_x_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vmulq_x_n_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8_t b, mve_pred16_t p)\n+{\n+  return vmulq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i8\"  }  } */"}, {"sha": "5ca463a05a8d4f2d1cae15ba8d611ba97033cd2f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_x_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmulq_x_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vmulq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i16\"  }  } */"}, {"sha": "2d29ff0fdebfb8bf35a28da10257196fb99f0cdd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_x_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmulq_x_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vmulq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i32\"  }  } */"}, {"sha": "3c372271b5eb3c41689293bb08d4dd72970b64d6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_x_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmulq_x_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vmulq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i8\"  }  } */"}, {"sha": "34461fbb4a9e2aea4d481896c47c996183a99286", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_x_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmulq_x_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmulq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i16\"  }  } */"}, {"sha": "b8c46c3361ace650028ea7c084c5b9792b8de24d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_x_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmulq_x_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vmulq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i32\"  }  } */"}, {"sha": "d37f305dafb45295842ddf172b6d33af6b05b489", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_x_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmulq_x_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmulq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.i8\"  }  } */"}, {"sha": "47e306d829d20e5c6ad0e06c65d5f6e34e7ccc13", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_x_n_s16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_n_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (mve_pred16_t p)\n+{\n+  return vmvnq_x_n_s16 (2, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmvnt.i16\"  }  } */"}, {"sha": "e93f4c74edc9fabf789df30d0b1b2edad7ef6440", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_x_n_s32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_n_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (mve_pred16_t p)\n+{\n+  return vmvnq_x_n_s32 (2, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmvnt.i32\"  }  } */"}, {"sha": "383964577eb62ef6a6d6771f9db64e6acc12be76", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_x_n_u16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_n_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (mve_pred16_t p)\n+{\n+  return vmvnq_x_n_u16 (4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmvnt.i16\"  }  } */"}, {"sha": "885f61c138f631bc45440a9753e80e95c1912a02", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_x_n_u32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_n_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (mve_pred16_t p)\n+{\n+  return vmvnq_x_n_u32 (4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmvnt.i32\"  }  } */"}, {"sha": "0ba4d741b2de1cc0f61ff9f84039ad6343014a79", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_x_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, mve_pred16_t p)\n+{\n+  return vmvnq_x_s16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmvnt\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, mve_pred16_t p)\n+{\n+  return vmvnq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmvnt\"  }  } */"}, {"sha": "e040d3f9cec5d559fc51784dae98c9868ddfbff7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_x_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, mve_pred16_t p)\n+{\n+  return vmvnq_x_s32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmvnt\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, mve_pred16_t p)\n+{\n+  return vmvnq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmvnt\"  }  } */"}, {"sha": "020510353b392df8737f38b59475d08e9f06ec68", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_x_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, mve_pred16_t p)\n+{\n+  return vmvnq_x_s8 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmvnt\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, mve_pred16_t p)\n+{\n+  return vmvnq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmvnt\"  }  } */"}, {"sha": "1f55d61a2a55862133bf39814b8c9f9cc8e83ccc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_x_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, mve_pred16_t p)\n+{\n+  return vmvnq_x_u16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmvnt\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, mve_pred16_t p)\n+{\n+  return vmvnq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmvnt\"  }  } */"}, {"sha": "c5fb84d0957dfa37874c94a34fae8656500b38f4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_x_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, mve_pred16_t p)\n+{\n+  return vmvnq_x_u32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmvnt\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, mve_pred16_t p)\n+{\n+  return vmvnq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmvnt\"  }  } */"}, {"sha": "0b46308ee0e3682f0b9b65d7df30da1839305f6b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_x_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_x_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, mve_pred16_t p)\n+{\n+  return vmvnq_x_u8 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmvnt\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, mve_pred16_t p)\n+{\n+  return vmvnq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmvnt\"  }  } */"}, {"sha": "6719f8ba4bc061426e429452bce60474a55820fa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_x_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, mve_pred16_t p)\n+{\n+  return vnegq_x_f16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vnegt.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, mve_pred16_t p)\n+{\n+  return vnegq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "0b5fc0139cc6c3a08dcb6f47a86d7ad682b4b47e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_x_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, mve_pred16_t p)\n+{\n+  return vnegq_x_f32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vnegt.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, mve_pred16_t p)\n+{\n+  return vnegq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "c1e5130fbe15bbf9986b05c8332ffaa788bdf80e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_x_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, mve_pred16_t p)\n+{\n+  return vnegq_x_s16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vnegt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, mve_pred16_t p)\n+{\n+  return vnegq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "cdd0b8bd09d28ed48d5ffa6ffd3fed9e501d84b0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_x_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, mve_pred16_t p)\n+{\n+  return vnegq_x_s32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vnegt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, mve_pred16_t p)\n+{\n+  return vnegq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "5308961d0a29757fc0520c936d15793a8f5f4ccf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vnegq_x_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvnegq_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, mve_pred16_t p)\n+{\n+  return vnegq_x_s8 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vnegt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, mve_pred16_t p)\n+{\n+  return vnegq_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "061e7bfe22a1d653ba47e10e9fa555d8b9a0baf6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vornq_x_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_x_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_x_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_x_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vornq_x_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vornt\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vornq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "e4810837eba481bb3c9e23bbddba8a13cda00224", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vornq_x_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_x_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_x_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_x_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vornq_x_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vornt\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vornq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "176061efeb01b58e75b7fcc8508162fb736eacaf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vornq_x_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vornq_x_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vornt\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vornq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "7c1562eb99bc0e9dbd22aaf403f2a14255185073", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vornq_x_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_x_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vornq_x_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vornt\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vornq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "017359b68d2ee1c4575333f3068fb98a5136bfca", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vornq_x_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vornq_x_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vornt\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vornq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "f5ae55574e2a20c0fafbe23bae8f984238d28b9e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vornq_x_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_x_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vornq_x_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vornt\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vornq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "5e2844745d6df03e2d27e51c7c38ba4fa8c5ed59", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vornq_x_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_x_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_x_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_x_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vornq_x_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vornt\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vornq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "7e19d00178299c93046760c0f357fe74a5bc318d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vornq_x_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_x_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vornq_x_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vornt\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vornq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "df93d2935fffef67820a49c6799fc0415f5174a8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_x_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_x_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_x_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_x_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vorrq_x_f16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vorrq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "356d991d9f288f502721cb5eddda03a616b7ca23", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_x_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_x_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_x_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_x_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vorrq_x_f32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vorrq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "01a2b58f986afa09a3618114a3c2860d6dbf1100", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_x_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vorrq_x_s16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vorrq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "b332474948151c236c1b67d9b08c96ccc88a0a0e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_x_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_x_s32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vorrq_x_s32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vorrq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "a62b24ea2f13c40a741707a76dbcb8e070cd5869", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_x_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vorrq_x_s8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vorrq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "2054d47d5d0cd0c15683e46b0b30933f28e2c6a7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_x_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_x_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vorrq_x_u16 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vorrq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "37e828b24b9a70f54e8eb5b8b521568a5abf33fd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_x_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_x_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_x_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_x_u32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vorrq_x_u32 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vorrq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "2a6a273e303f8748a6c58e176a8f4104f1d893f2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_x_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_x_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vorrq_x_u8 (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vorrq_x (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "917012f2406d605de0c0fc570fa200da28223c8e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev16q_x_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev16q_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev16q_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev16q_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, mve_pred16_t p)\n+{\n+  return vrev16q_x_s8 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrev16t.8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, mve_pred16_t p)\n+{\n+  return vrev16q_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "e91ef2060084b3987606232677ca446ea4241b07", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev16q_x_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev16q_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev16q_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev16q_x_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, mve_pred16_t p)\n+{\n+  return vrev16q_x_u8 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrev16t.8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, mve_pred16_t p)\n+{\n+  return vrev16q_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "7f0eafc7373627528d1a4591a49a3faa22d765fc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev32q_x_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_x_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_x_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_x_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, mve_pred16_t p)\n+{\n+  return vrev32q_x_f16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrev32t.16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, mve_pred16_t p)\n+{\n+  return vrev32q_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "24613a5fc8e665a27671bfbb867f4e4393070c23", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev32q_x_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, mve_pred16_t p)\n+{\n+  return vrev32q_x_s16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrev32t.16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, mve_pred16_t p)\n+{\n+  return vrev32q_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "29eb4839e229e6d1726ee5a117ae318148483098", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev32q_x_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_x_s8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, mve_pred16_t p)\n+{\n+  return vrev32q_x_s8 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrev32t.8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, mve_pred16_t p)\n+{\n+  return vrev32q_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "0d4ad70004082722c90c35fd67dbb4913c545806", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev32q_x_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_x_u16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, mve_pred16_t p)\n+{\n+  return vrev32q_x_u16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrev32t.16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, mve_pred16_t p)\n+{\n+  return vrev32q_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "9dfad95ccccfcbab6c75e454c22f3536f2f0a1d4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev32q_x_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev32q_x_u8.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, mve_pred16_t p)\n+{\n+  return vrev32q_x_u8 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrev32t.8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, mve_pred16_t p)\n+{\n+  return vrev32q_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "b86697922dece1e7b511b4c9e740e425ff8f0b8a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev64q_x_f16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_x_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_x_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_x_f16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, mve_pred16_t p)\n+{\n+  return vrev64q_x_f16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrev64t.16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, mve_pred16_t p)\n+{\n+  return vrev64q_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "986efeb1a22bdebf4d7ac073d2c8749bdbbd4863", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev64q_x_f32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_x_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_x_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_x_f32.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, mve_pred16_t p)\n+{\n+  return vrev64q_x_f32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrev64t.32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, mve_pred16_t p)\n+{\n+  return vrev64q_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "51165f1eabf4fa5f53d7d3b396adf0dfeb76fe31", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev64q_x_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261014a1be433a27af75fb7eecc77231261d84f7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_x_s16.c?ref=261014a1be433a27af75fb7eecc77231261d84f7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, mve_pred16_t p)\n+{\n+  return vrev64q_x_s16 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrev64t.16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, mve_pred16_t p)\n+{\n+  return vrev64q_x (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}]}