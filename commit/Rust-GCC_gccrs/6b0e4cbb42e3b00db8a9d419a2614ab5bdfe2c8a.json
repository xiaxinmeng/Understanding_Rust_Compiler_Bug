{"sha": "6b0e4cbb42e3b00db8a9d419a2614ab5bdfe2c8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIwZTRjYmI0MmUzYjAwZGI4YTlkNDE5YTI2MTRhYjViZGZlMmM4YQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-05-02T19:03:57Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-05-02T19:03:57Z"}, "message": "fr30-protos.h (Mmode): Don't define.\n\n\t* config/fr30/fr30-protos.h (Mmode): Don't define.\n\t* config/m32r/m32r-protos.h (Mmode): Don't define.  Expand\n\tdefinition where used.\n\t* config/mn10300/mn10300-protos.h (Mmode, Cstar, Rclas): Don't\n\tdefine.  Expand definitions where used.\n\t* config/rx/rx-protos.h (Mmode, Fargs, Rcode): Don't define.\n\tExpand definitions where used.\n\t* config/rx/rx.c (rx_is_legitimate_address, rx_function_arg_size,\n\trx_function_arg, rx_function_arg_advance,\n\trx_function_arg_boundary): Expand definitions of those macros.\n\t* config/v850/v850-protos.h (Mmode): Don't define.  Expand\n\tdefinition where used.\n\nFrom-SVN: r173266", "tree": {"sha": "356b3ef0acba0744eca78495ea3239c82e36bf46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/356b3ef0acba0744eca78495ea3239c82e36bf46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b0e4cbb42e3b00db8a9d419a2614ab5bdfe2c8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b0e4cbb42e3b00db8a9d419a2614ab5bdfe2c8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b0e4cbb42e3b00db8a9d419a2614ab5bdfe2c8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b0e4cbb42e3b00db8a9d419a2614ab5bdfe2c8a/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e938ce6e76e9189fb2c4b8850c3a2ff7ad07782", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e938ce6e76e9189fb2c4b8850c3a2ff7ad07782", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e938ce6e76e9189fb2c4b8850c3a2ff7ad07782"}], "stats": {"total": 112, "additions": 56, "deletions": 56}, "files": [{"sha": "faf8eac48f41a788635c78b156088c224bf1b55a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0e4cbb42e3b00db8a9d419a2614ab5bdfe2c8a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0e4cbb42e3b00db8a9d419a2614ab5bdfe2c8a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b0e4cbb42e3b00db8a9d419a2614ab5bdfe2c8a", "patch": "@@ -1,3 +1,18 @@\n+2011-05-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/fr30/fr30-protos.h (Mmode): Don't define.\n+\t* config/m32r/m32r-protos.h (Mmode): Don't define.  Expand\n+\tdefinition where used.\n+\t* config/mn10300/mn10300-protos.h (Mmode, Cstar, Rclas): Don't\n+\tdefine.  Expand definitions where used.\n+\t* config/rx/rx-protos.h (Mmode, Fargs, Rcode): Don't define.\n+\tExpand definitions where used.\n+\t* config/rx/rx.c (rx_is_legitimate_address, rx_function_arg_size,\n+\trx_function_arg, rx_function_arg_advance,\n+\trx_function_arg_boundary): Expand definitions of those macros.\n+\t* config/v850/v850-protos.h (Mmode): Don't define.  Expand\n+\tdefinition where used.\n+\n 2011-05-02  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/mmx.md (*mov<mode>_internal_rex64): Use %vmovq for"}, {"sha": "d27bcbc4a4947e9d78e8f606d8784c9ab7d67f2e", "filename": "gcc/config/fr30/fr30-protos.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0e4cbb42e3b00db8a9d419a2614ab5bdfe2c8a/gcc%2Fconfig%2Ffr30%2Ffr30-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0e4cbb42e3b00db8a9d419a2614ab5bdfe2c8a/gcc%2Fconfig%2Ffr30%2Ffr30-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30-protos.h?ref=6b0e4cbb42e3b00db8a9d419a2614ab5bdfe2c8a", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes for fr30.c functions used in the md file & elsewhere.\n-   Copyright (C) 1999, 2000, 2002, 2004, 2007, 2010\n+   Copyright (C) 1999, 2000, 2002, 2004, 2007, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -28,8 +28,6 @@ extern void  fr30_print_operand (FILE *, rtx, int);\n extern void  fr30_print_operand_address (FILE *, rtx);\n extern rtx   fr30_move_double (rtx *);\n #ifdef HAVE_MACHINE_MODES\n-#define Mmode enum machine_mode\n extern int   fr30_const_double_is_zero (rtx);\n-#undef Mmode\n #endif /* HAVE_MACHINE_MODES */\n #endif /* RTX_CODE */"}, {"sha": "d35fc4e8472fd4d08d71a3741fbdc99f23b6ccbf", "filename": "gcc/config/m32r/m32r-protos.h", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0e4cbb42e3b00db8a9d419a2614ab5bdfe2c8a/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0e4cbb42e3b00db8a9d419a2614ab5bdfe2c8a/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h?ref=6b0e4cbb42e3b00db8a9d419a2614ab5bdfe2c8a", "patch": "@@ -21,7 +21,6 @@\n \n /* Function prototypes that cannot exist in m32r.h due to dependency\n    complications.  */\n-#define Mmode enum machine_mode\n \n extern void   m32r_init (void);\n extern void   m32r_init_expanders (void);\n@@ -52,16 +51,14 @@ extern rtx    m32r_return_addr (int);\n extern rtx    m32r_function_symbol (const char *);\n \n #ifdef HAVE_MACHINE_MODES\n-extern int    call_operand (rtx, Mmode);\n-extern int    small_data_operand (rtx, Mmode);\n-extern int    addr24_operand (rtx, Mmode);\n-extern int    addr32_operand (rtx, Mmode);\n-extern int    call26_operand (rtx, Mmode);\n-extern int    memreg_operand (rtx, Mmode);\n-extern int    small_insn_p (rtx, Mmode);\n+extern int    call_operand (rtx, enum machine_mode);\n+extern int    small_data_operand (rtx, enum machine_mode);\n+extern int    addr24_operand (rtx, enum machine_mode);\n+extern int    addr32_operand (rtx, enum machine_mode);\n+extern int    call26_operand (rtx, enum machine_mode);\n+extern int    memreg_operand (rtx, enum machine_mode);\n+extern int    small_insn_p (rtx, enum machine_mode);\n \n #endif /* HAVE_MACHINE_MODES */\n \n #endif /* RTX_CODE */\n-\n-#undef  Mmode"}, {"sha": "fe0452b88258762e7489a01c62cc4b7801f5e38b", "filename": "gcc/config/mn10300/mn10300-protos.h", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0e4cbb42e3b00db8a9d419a2614ab5bdfe2c8a/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0e4cbb42e3b00db8a9d419a2614ab5bdfe2c8a/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h?ref=6b0e4cbb42e3b00db8a9d419a2614ab5bdfe2c8a", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler. Matsushita MN10300 series\n-   Copyright (C) 2000, 2003, 2004, 2005, 2007, 2009, 2010\n+   Copyright (C) 2000, 2003, 2004, 2005, 2007, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n@@ -19,28 +19,25 @@\n    along with GCC; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n \n-#define Mmode enum machine_mode\n-#define Cstar const char *\n-#define Rclas enum reg_class\n-\n #ifdef RTX_CODE\n extern rtx   mn10300_legitimize_pic_address (rtx, rtx);\n extern int   mn10300_legitimate_pic_operand_p (rtx);\n-extern rtx   mn10300_legitimize_reload_address (rtx, Mmode, int, int, int);\n+extern rtx   mn10300_legitimize_reload_address (rtx, enum machine_mode,\n+\t\t\t\t\t\tint, int, int);\n extern bool  mn10300_function_value_regno_p (const unsigned int);\n extern int   mn10300_get_live_callee_saved_regs (void);\n-extern bool  mn10300_hard_regno_mode_ok (unsigned int, Mmode);\n-extern bool  mn10300_modes_tieable (Mmode, Mmode);\n-extern Cstar mn10300_output_add (rtx[3], bool);\n+extern bool  mn10300_hard_regno_mode_ok (unsigned int, enum machine_mode);\n+extern bool  mn10300_modes_tieable (enum machine_mode, enum machine_mode);\n+extern const char *mn10300_output_add (rtx[3], bool);\n extern void  mn10300_print_operand (FILE *, rtx, int);\n extern void  mn10300_print_operand_address (FILE *, rtx);\n extern void  mn10300_print_reg_list (FILE *, int);\n-extern Mmode mn10300_select_cc_mode (enum rtx_code, rtx, rtx);\n-extern int   mn10300_store_multiple_operation (rtx, Mmode);\n-extern int   mn10300_symbolic_operand (rtx, Mmode);\n-extern void  mn10300_split_cbranch (Mmode, rtx, rtx);\n+extern enum machine_mode mn10300_select_cc_mode (enum rtx_code, rtx, rtx);\n+extern int   mn10300_store_multiple_operation (rtx, enum machine_mode);\n+extern int   mn10300_symbolic_operand (rtx, enum machine_mode);\n+extern void  mn10300_split_cbranch (enum machine_mode, rtx, rtx);\n extern int   mn10300_split_and_operand_count (rtx);\n-extern bool  mn10300_match_ccmode (rtx, Mmode);\n+extern bool  mn10300_match_ccmode (rtx, enum machine_mode);\n #endif /* RTX_CODE */\n \n extern bool  mn10300_regno_in_class_p (unsigned, int, bool);\n@@ -50,7 +47,3 @@ extern void  mn10300_expand_prologue (void);\n extern void  mn10300_expand_epilogue (void);\n extern int   mn10300_initial_offset (int, int);\n extern int   mn10300_frame_size (void);\n-\n-#undef Mmode\n-#undef Cstar\n-#undef Rclas"}, {"sha": "c43b3981817dacd971e6b876178d36a157b65de5", "filename": "gcc/config/rx/rx-protos.h", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0e4cbb42e3b00db8a9d419a2614ab5bdfe2c8a/gcc%2Fconfig%2Frx%2Frx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0e4cbb42e3b00db8a9d419a2614ab5bdfe2c8a/gcc%2Fconfig%2Frx%2Frx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx-protos.h?ref=6b0e4cbb42e3b00db8a9d419a2614ab5bdfe2c8a", "patch": "@@ -21,11 +21,6 @@\n #ifndef GCC_RX_PROTOS_H\n #define GCC_RX_PROTOS_H\n \n-/* A few abbreviations to make the prototypes shorter.  */\n-#define Mmode \tenum machine_mode\n-#define Fargs\tCUMULATIVE_ARGS\n-#define Rcode\tenum rtx_code\n-\f\n extern int\t\trx_align_for_label (void);\n extern void\t\trx_expand_prologue (void);\n extern int\t\trx_initial_elimination_offset (int, int);\n@@ -37,11 +32,13 @@ extern void             rx_emit_stack_pushm (rtx *);\n extern void\t\trx_expand_epilogue (bool);\n extern char *\t\trx_gen_move_template (rtx *, bool);\n extern bool\t\trx_legitimate_constant_p (enum machine_mode, rtx);\n-extern bool\t\trx_is_restricted_memory_address (rtx, Mmode);\n-extern bool\t\trx_match_ccmode (rtx, Mmode);\n+extern bool\t\trx_is_restricted_memory_address (rtx,\n+\t\t\t\t\t\t\t enum machine_mode);\n+extern bool\t\trx_match_ccmode (rtx, enum machine_mode);\n extern void\t\trx_notice_update_cc (rtx body, rtx insn);\n-extern void\t\trx_split_cbranch (Mmode, Rcode, rtx, rtx, rtx);\n-extern Mmode\t\trx_select_cc_mode (Rcode, rtx, rtx);\n+extern void\t\trx_split_cbranch (enum machine_mode, enum rtx_code,\n+\t\t\t\t\t  rtx, rtx, rtx);\n+extern enum machine_mode\trx_select_cc_mode (enum rtx_code, rtx, rtx);\n #endif\n \n #endif /* GCC_RX_PROTOS_H */"}, {"sha": "d9894c2a50d409a9577deacbec58b7adc7b88dcc", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0e4cbb42e3b00db8a9d419a2614ab5bdfe2c8a/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0e4cbb42e3b00db8a9d419a2614ab5bdfe2c8a/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=6b0e4cbb42e3b00db8a9d419a2614ab5bdfe2c8a", "patch": "@@ -78,7 +78,8 @@ rx_small_data_operand (rtx op)\n }\n \n static bool\n-rx_is_legitimate_address (Mmode mode, rtx x, bool strict ATTRIBUTE_UNUSED)\n+rx_is_legitimate_address (enum machine_mode mode, rtx x,\n+\t\t\t  bool strict ATTRIBUTE_UNUSED)\n {\n   if (RTX_OK_FOR_BASE (x, strict))\n     /* Register Indirect.  */\n@@ -809,7 +810,7 @@ rx_round_up (unsigned int value, unsigned int alignment)\n    occupied by an argument of type TYPE and mode MODE.  */\n \n static unsigned int\n-rx_function_arg_size (Mmode mode, const_tree type)\n+rx_function_arg_size (enum machine_mode mode, const_tree type)\n {\n   unsigned int num_bytes;\n \n@@ -829,7 +830,8 @@ rx_function_arg_size (Mmode mode, const_tree type)\n    variable parameter list.  */\n \n static rtx\n-rx_function_arg (Fargs * cum, Mmode mode, const_tree type, bool named)\n+rx_function_arg (CUMULATIVE_ARGS * cum, enum machine_mode mode,\n+\t\t const_tree type, bool named)\n {\n   unsigned int next_reg;\n   unsigned int bytes_so_far = *cum;\n@@ -866,14 +868,14 @@ rx_function_arg (Fargs * cum, Mmode mode, const_tree type, bool named)\n }\n \n static void\n-rx_function_arg_advance (Fargs * cum, Mmode mode, const_tree type,\n-\t\t\t bool named ATTRIBUTE_UNUSED)\n+rx_function_arg_advance (CUMULATIVE_ARGS * cum, enum machine_mode mode,\n+\t\t\t const_tree type, bool named ATTRIBUTE_UNUSED)\n {\n   *cum += rx_function_arg_size (mode, type);\n }\n \n static unsigned int\n-rx_function_arg_boundary (Mmode mode ATTRIBUTE_UNUSED,\n+rx_function_arg_boundary (enum machine_mode mode ATTRIBUTE_UNUSED,\n \t\t\t  const_tree type ATTRIBUTE_UNUSED)\n {\n   return 32;"}, {"sha": "106c298c9647adef170c6ba45e463e0d5ee58638", "filename": "gcc/config/v850/v850-protos.h", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0e4cbb42e3b00db8a9d419a2614ab5bdfe2c8a/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0e4cbb42e3b00db8a9d419a2614ab5bdfe2c8a/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-protos.h?ref=6b0e4cbb42e3b00db8a9d419a2614ab5bdfe2c8a", "patch": "@@ -23,8 +23,6 @@\n #ifndef GCC_V850_PROTOS_H\n #define GCC_V850_PROTOS_H\n \n-#define Mmode enum machine_mode\n-\n extern void   expand_prologue               (void);\n extern void   expand_epilogue               (void);\n extern int    v850_handle_pragma            (int (*)(void), void (*)(int), char *);\n@@ -41,12 +39,14 @@ extern char * construct_restore_jr          (rtx);\n #ifdef HAVE_MACHINE_MODES\n extern char * construct_dispose_instruction (rtx);\n extern char * construct_prepare_instruction (rtx);\n-extern int    ep_memory_operand             (rtx, Mmode, int);\n-extern int    v850_float_z_comparison_operator (rtx, Mmode);\n-extern int    v850_float_nz_comparison_operator (rtx, Mmode);\n-extern rtx    v850_gen_compare              (enum rtx_code, Mmode, rtx, rtx);\n-extern Mmode  v850_gen_float_compare (enum rtx_code, Mmode, rtx, rtx);\n-extern Mmode  v850_select_cc_mode (RTX_CODE, rtx, rtx);\n+extern int    ep_memory_operand             (rtx, enum machine_mode, int);\n+extern int    v850_float_z_comparison_operator (rtx, enum machine_mode);\n+extern int    v850_float_nz_comparison_operator (rtx, enum machine_mode);\n+extern rtx    v850_gen_compare              (enum rtx_code, enum machine_mode,\n+\t\t\t\t\t     rtx, rtx);\n+extern enum machine_mode  v850_gen_float_compare (enum rtx_code,\n+\t\t\t\t\t\t  enum machine_mode, rtx, rtx);\n+extern enum machine_mode  v850_select_cc_mode (RTX_CODE, rtx, rtx);\n #endif\n #endif /* RTX_CODE */\n \n@@ -67,6 +67,4 @@ extern void ghs_pragma_endtda\t\t    (struct cpp_reader *);\n extern void ghs_pragma_endsda\t\t    (struct cpp_reader *);\n extern void ghs_pragma_endzda\t\t    (struct cpp_reader *);\n \n-#undef  Mmode\n-\n #endif /* ! GCC_V850_PROTOS_H */"}]}