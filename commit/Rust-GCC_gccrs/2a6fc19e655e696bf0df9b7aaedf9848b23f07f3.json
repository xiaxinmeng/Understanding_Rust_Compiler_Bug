{"sha": "2a6fc19e655e696bf0df9b7aaedf9848b23f07f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE2ZmMxOWU2NTVlNjk2YmYwZGY5YjdhYWVkZjk4NDhiMjNmMDdmMw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-05-03T17:35:37Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-05-03T17:35:37Z"}, "message": "c++: base-clause parsing and implicit 'this' [PR100362]\n\nMy r11-6815 change to defer access checking when processing a\nbase-clause removed a pair of pushclass / popclass calls that seemed to\nbe unnecessary now that we'd also defer access checking while parsing\nthe base-clause.\n\nBut it turns out these calls make a difference in the below testcase,\nwhere we have a local class whose base-clause implicitly uses the 'this'\nof the enclosing class.  Before r11-6815, while parsing the base-clause\nof the local class, maybe_resolve_dummy would fail to resolve the dummy\n'this' object because the current scope would be the local class.  Now,\nsince the current scope is the lambda, maybe_resolve_dummy succeeds and\nreturns the 'this' for the enclosing class Qux.  Later, during deferred\ninstantiation of the local class, we get confused trying to resolve the\naccess of 'a_' through this non-dummy 'this'.\n\nSo this patch just reinstates the calls to pushclass / popclass that\nwere removed in r11-6815.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/100362\n\t* parser.c (cp_parser_class_head): Reinstate calls to pushclass\n\tand popclass when parsing the base-clause that were removed in\n\tr11-6815.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/100362\n\t* g++.dg/cpp1y/lambda-generic-100362.C: New test.", "tree": {"sha": "8ca05e6d392eb94ded6018a66afc8a50f0b83a69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ca05e6d392eb94ded6018a66afc8a50f0b83a69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a6fc19e655e696bf0df9b7aaedf9848b23f07f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a6fc19e655e696bf0df9b7aaedf9848b23f07f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a6fc19e655e696bf0df9b7aaedf9848b23f07f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a6fc19e655e696bf0df9b7aaedf9848b23f07f3/comments", "author": null, "committer": null, "parents": [{"sha": "eef4fa6968ae0682679c27dae06409db3d113d5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eef4fa6968ae0682679c27dae06409db3d113d5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eef4fa6968ae0682679c27dae06409db3d113d5d"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "58bd6d1e7933546687726ddcf3fe71165e684b5c", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a6fc19e655e696bf0df9b7aaedf9848b23f07f3/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a6fc19e655e696bf0df9b7aaedf9848b23f07f3/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=2a6fc19e655e696bf0df9b7aaedf9848b23f07f3", "patch": "@@ -25690,7 +25690,13 @@ cp_parser_class_head (cp_parser* parser,\n      until the entire list has been seen, as per [class.access.general].  */\n   push_deferring_access_checks (dk_deferred);\n   if (cp_lexer_next_token_is (parser->lexer, CPP_COLON))\n-    bases = cp_parser_base_clause (parser);\n+    {\n+      if (type)\n+\tpushclass (type);\n+      bases = cp_parser_base_clause (parser);\n+      if (type)\n+\tpopclass ();\n+    }\n   else\n     bases = NULL_TREE;\n "}, {"sha": "283c2c9477ef0fb9743d0540346c685b93ae7a2c", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-100362.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a6fc19e655e696bf0df9b7aaedf9848b23f07f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-100362.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a6fc19e655e696bf0df9b7aaedf9848b23f07f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-100362.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-100362.C?ref=2a6fc19e655e696bf0df9b7aaedf9848b23f07f3", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/100362\n+// { dg-do compile { target c++14 } }\n+\n+template <class>\n+struct Qux {\n+  struct A { } a_;\n+  A f();\n+\n+  void AsyncOp() {\n+    [](auto) {\n+      struct local : decltype(a_) {};\n+      local ptr;\n+    }(0);\n+\n+    [](auto) {\n+      struct local : decltype(f()) {};\n+      local ptr;\n+    }(0);\n+  }\n+};\n+\n+void corge() {\n+  Qux<int> qux;\n+  qux.AsyncOp();\n+}"}]}