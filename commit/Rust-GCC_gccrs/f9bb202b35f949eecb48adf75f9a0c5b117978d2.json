{"sha": "f9bb202b35f949eecb48adf75f9a0c5b117978d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjliYjIwMmIzNWY5NDllZWNiNDhhZGY3NWY5YTBjNWIxMTc5NzhkMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-10-03T19:52:11Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-10-03T19:52:11Z"}, "message": "cgraph.h (struct indirect_call_info): Add IN_POLYMORPHIC_CDTOR\n\n\n\t* cgraph.h (struct indirect_call_info): Add IN_POLYMORPHIC_CDTOR\n\t* lto-cgraph.c (lto_output_edge, input_edge): Stream\n\tin_polymorphic_cdtor\n\t* cgraph.c (symbol_table::create_edge): Compute in_polymorphic_cdtor.\n\t(cgraph_edge::make_speculative): Copy in_polymorphic_cdtor.\n\t* cgraphclones.c (cgraph_edge::clone): Likewise.\n\t* ipa-prop.c (update_jump_functions_after_inlining, \n\ttry_make_edge_direct_virtual_call): Pass in_polymorphic_cdtor\n\tto possible_dynamic_type_change.\n\t(decl_maybe_in_construction_p): Allow empty OUTER_TYPE and BASE.\n\t(ipa_polymorphic_call_context::possible_dynamic_type_change): Add\n\tIN_POLY_CDOTR argument.\n\nFrom-SVN: r215871", "tree": {"sha": "985ae03907469842ffadf25aece38775da66d63a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/985ae03907469842ffadf25aece38775da66d63a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9bb202b35f949eecb48adf75f9a0c5b117978d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9bb202b35f949eecb48adf75f9a0c5b117978d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9bb202b35f949eecb48adf75f9a0c5b117978d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9bb202b35f949eecb48adf75f9a0c5b117978d2/comments", "author": null, "committer": null, "parents": [{"sha": "8a5b2f56c4c9d80c8ac2c31c82304681f4e9da80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a5b2f56c4c9d80c8ac2c31c82304681f4e9da80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a5b2f56c4c9d80c8ac2c31c82304681f4e9da80"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "4bf61ab521241bd6c2d79bba57927b3f6b0e05dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bb202b35f949eecb48adf75f9a0c5b117978d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bb202b35f949eecb48adf75f9a0c5b117978d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9bb202b35f949eecb48adf75f9a0c5b117978d2", "patch": "@@ -1,3 +1,18 @@\n+2014-10-03  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* cgraph.h (struct indirect_call_info): Add IN_POLYMORPHIC_CDTOR\n+\t* lto-cgraph.c (lto_output_edge, input_edge): Stream\n+\tin_polymorphic_cdtor\n+\t* cgraph.c (symbol_table::create_edge): Compute in_polymorphic_cdtor.\n+\t(cgraph_edge::make_speculative): Copy in_polymorphic_cdtor.\n+\t* cgraphclones.c (cgraph_edge::clone): Likewise.\n+\t* ipa-prop.c (update_jump_functions_after_inlining, \n+\ttry_make_edge_direct_virtual_call): Pass in_polymorphic_cdtor\n+\tto possible_dynamic_type_change.\n+\t(decl_maybe_in_construction_p): Allow empty OUTER_TYPE and BASE.\n+\t(ipa_polymorphic_call_context::possible_dynamic_type_change): Add\n+\tIN_POLY_CDOTR argument.\n+\n 2014-10-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/i386.c (ix86_expand_vec_perm_vpermi2): Fix up formatting."}, {"sha": "a46e1883fd0d24264aeb747c99e99f5f7f2ab6ce", "filename": "gcc/cgraph.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bb202b35f949eecb48adf75f9a0c5b117978d2/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bb202b35f949eecb48adf75f9a0c5b117978d2/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=f9bb202b35f949eecb48adf75f9a0c5b117978d2", "patch": "@@ -819,6 +819,12 @@ symbol_table::create_edge (cgraph_node *caller, cgraph_node *callee,\n   edge->indirect_inlining_edge = 0;\n   edge->speculative = false;\n   edge->indirect_unknown_callee = indir_unknown_callee;\n+  if (flag_devirtualize && call_stmt && DECL_STRUCT_FUNCTION (caller->decl))\n+    edge->in_polymorphic_cdtor\n+      = decl_maybe_in_construction_p (NULL, NULL, call_stmt,\n+\t\t\t\t      caller->decl);\n+  else\n+    edge->in_polymorphic_cdtor = caller->thunk.thunk_p;\n   if (call_stmt && caller->call_site_hash)\n     cgraph_add_edge_to_call_site_hash (edge);\n \n@@ -1033,6 +1039,7 @@ cgraph_edge::make_speculative (cgraph_node *n2, gcov_type direct_count,\n   else\n     e2->can_throw_external = can_throw_external;\n   e2->lto_stmt_uid = lto_stmt_uid;\n+  e2->in_polymorphic_cdtor = in_polymorphic_cdtor;\n   count -= e2->count;\n   frequency -= e2->frequency;\n   symtab->call_edge_duplication_hooks (this, e2);"}, {"sha": "5ed078acfa9aac563c26bc94c1b9a1f29bc1d38c", "filename": "gcc/cgraph.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bb202b35f949eecb48adf75f9a0c5b117978d2/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bb202b35f949eecb48adf75f9a0c5b117978d2/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=f9bb202b35f949eecb48adf75f9a0c5b117978d2", "patch": "@@ -1333,7 +1333,7 @@ class GTY(()) ipa_polymorphic_call_context {\n   void offset_by (HOST_WIDE_INT);\n   /* Use when we can not track dynamic type change.  This speculatively assume\n      type change is not happening.  */\n-  void possible_dynamic_type_change (tree otr_type = NULL);\n+  void possible_dynamic_type_change (bool, tree otr_type = NULL);\n   /* Assume that both THIS and a given context is valid and strenghten THIS\n      if possible.  Return true if any strenghtening was made.\n      If actual type the context is being used in is known, OTR_TYPE should be\n@@ -1512,6 +1512,9 @@ struct GTY((chain_next (\"%h.next_caller\"), chain_prev (\"%h.prev_caller\"))) cgrap\n      Optimizers may later redirect direct call to clone, so 1) and 3)\n      do not need to necesarily agree with destination.  */\n   unsigned int speculative : 1;\n+  /* Set to true when caller is a constructor or destructor of polymorphic\n+     type.  */\n+  unsigned in_polymorphic_cdtor : 1;\n \n private:\n   /* Remove the edge from the list of the callers of the callee.  */"}, {"sha": "c487c13f3db277b56f4ddbaaf4d9b53e5aa735ff", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bb202b35f949eecb48adf75f9a0c5b117978d2/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bb202b35f949eecb48adf75f9a0c5b117978d2/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=f9bb202b35f949eecb48adf75f9a0c5b117978d2", "patch": "@@ -159,6 +159,7 @@ cgraph_edge::clone (cgraph_node *n, gimple call_stmt, unsigned stmt_uid,\n   new_edge->can_throw_external = can_throw_external;\n   new_edge->call_stmt_cannot_inline_p = call_stmt_cannot_inline_p;\n   new_edge->speculative = speculative;\n+  new_edge->in_polymorphic_cdtor = in_polymorphic_cdtor;\n   if (update_original)\n     {\n       count -= new_edge->count;"}, {"sha": "c5bcb3a908f5f44132b07e2b13c450ed17339642", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bb202b35f949eecb48adf75f9a0c5b117978d2/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bb202b35f949eecb48adf75f9a0c5b117978d2/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=f9bb202b35f949eecb48adf75f9a0c5b117978d2", "patch": "@@ -2652,7 +2652,7 @@ update_jump_functions_after_inlining (struct cgraph_edge *cs,\n \n \t      /* TODO: Make type preserved safe WRT contexts.  */\n \t      if (!dst->value.ancestor.agg_preserved)\n-\t\tctx.possible_dynamic_type_change ();\n+\t\tctx.possible_dynamic_type_change (e->in_polymorphic_cdtor);\n \t      ctx.offset_by (dst->value.ancestor.offset);\n \t      if (!ctx.useless_p ())\n \t\t{\n@@ -2722,7 +2722,7 @@ update_jump_functions_after_inlining (struct cgraph_edge *cs,\n \n \t\t  /* TODO: Make type preserved safe WRT contexts.  */\n \t\t  if (!dst->value.ancestor.agg_preserved)\n-\t\t    ctx.possible_dynamic_type_change ();\n+\t\t    ctx.possible_dynamic_type_change (e->in_polymorphic_cdtor);\n \t\t  if (!ctx.useless_p ())\n \t\t    {\n \t\t      if (!dst_ctx)\n@@ -3128,7 +3128,8 @@ try_make_edge_direct_virtual_call (struct cgraph_edge *ie,\n \n       /* TODO: We want to record if type change happens.  \n \t Old code did not do that that seems like a bug.  */\n-      ctx.possible_dynamic_type_change (ie->indirect_info->otr_type);\n+      ctx.possible_dynamic_type_change (ie->in_polymorphic_cdtor,\n+\t\t\t\t\tie->indirect_info->otr_type);\n \n       updated = ie->indirect_info->context.combine_with\n \t\t  (ctx, ie->indirect_info->otr_type);"}, {"sha": "a48e61eb89339e8e28837d7a79c32ee1803a05c7", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bb202b35f949eecb48adf75f9a0c5b117978d2/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bb202b35f949eecb48adf75f9a0c5b117978d2/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=f9bb202b35f949eecb48adf75f9a0c5b117978d2", "patch": "@@ -284,6 +284,7 @@ lto_output_edge (struct lto_simple_output_block *ob, struct cgraph_edge *edge,\n   bp_pack_value (&bp, edge->speculative, 1);\n   bp_pack_value (&bp, edge->call_stmt_cannot_inline_p, 1);\n   bp_pack_value (&bp, edge->can_throw_external, 1);\n+  bp_pack_value (&bp, edge->in_polymorphic_cdtor, 1);\n   if (edge->indirect_unknown_callee)\n     {\n       int flags = edge->indirect_info->ecf_flags;\n@@ -1366,6 +1367,7 @@ input_edge (struct lto_input_block *ib, vec<symtab_node *> nodes,\n   edge->inline_failed = inline_failed;\n   edge->call_stmt_cannot_inline_p = bp_unpack_value (&bp, 1);\n   edge->can_throw_external = bp_unpack_value (&bp, 1);\n+  edge->in_polymorphic_cdtor = bp_unpack_value (&bp, 1);\n   if (indirect)\n     {\n       if (bp_unpack_value (&bp, 1))"}]}