{"sha": "894f597f8fb8693a5d0f5834e98a8ccebbbb9106", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk0ZjU5N2Y4ZmI4NjkzYTVkMGY1ODM0ZTk4YThjY2ViYmJiOTEwNg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2018-09-20T19:34:30Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2018-09-20T19:34:30Z"}, "message": "[PR87013] check for .loc is_stmt support in the assembler\n\nBack when we had the logic to output is_stmt but never exercised it,\nit didn't matter that we didn't test for assembler support for it.\nBut there are still assemblers out there that do not support it, so\nnow that we enable the formerly latent is_stmt logic, we'd better make\nsure the assembler can deal with it.\n\nfor  gcc/ChangeLog\n\n\tPR bootstrap/87013\n\t* configure.ac: Check for .loc is_stmt support.\n\t* configure, config.in: Rebuilt.\n\t* dwarf2out.c (dwarf2out_source_line): Skip is_stmt\n\tif not supported.\n\nFrom-SVN: r264449", "tree": {"sha": "aa13ba0a1197e59239ebf0dab931b47a5b780549", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa13ba0a1197e59239ebf0dab931b47a5b780549"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/894f597f8fb8693a5d0f5834e98a8ccebbbb9106", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/894f597f8fb8693a5d0f5834e98a8ccebbbb9106", "html_url": "https://github.com/Rust-GCC/gccrs/commit/894f597f8fb8693a5d0f5834e98a8ccebbbb9106", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/894f597f8fb8693a5d0f5834e98a8ccebbbb9106/comments", "author": null, "committer": null, "parents": [{"sha": "2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eb3745a7bcd7f326b44f784d2f0ca6a2fd4080d"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "641e3591040ffeaa3283aa0786a36434bd3b188a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894f597f8fb8693a5d0f5834e98a8ccebbbb9106/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894f597f8fb8693a5d0f5834e98a8ccebbbb9106/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=894f597f8fb8693a5d0f5834e98a8ccebbbb9106", "patch": "@@ -1,3 +1,11 @@\n+2018-09-20  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR bootstrap/87013\n+\t* configure.ac: Check for .loc is_stmt support.\n+\t* configure, config.in: Rebuilt.\n+\t* dwarf2out.c (dwarf2out_source_line): Skip is_stmt\n+\tif not supported.\n+\n 2018-09-20  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.opt (misel=no, misel=yes): Delete."}, {"sha": "775536e68e98f2ccba64f4f9ffa848f1b62b173f", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894f597f8fb8693a5d0f5834e98a8ccebbbb9106/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894f597f8fb8693a5d0f5834e98a8ccebbbb9106/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=894f597f8fb8693a5d0f5834e98a8ccebbbb9106", "patch": "@@ -1297,6 +1297,12 @@\n #endif\n \n \n+/* Define if your assembler supports the .loc is_stmt sub-directive. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_GAS_LOC_STMT\n+#endif\n+\n+\n /* Define if your assembler supports specifying the maximum number of bytes to\n    skip when using the GAS .p2align command. */\n #ifndef USED_FOR_TARGET"}, {"sha": "b3205adc718884513305c9bc597156c14f173fd3", "filename": "gcc/configure", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894f597f8fb8693a5d0f5834e98a8ccebbbb9106/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894f597f8fb8693a5d0f5834e98a8ccebbbb9106/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=894f597f8fb8693a5d0f5834e98a8ccebbbb9106", "patch": "@@ -23942,6 +23942,44 @@ _ACEOF\n   ;;\n esac\n \n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for line table is_stmt support\" >&5\n+$as_echo_n \"checking assembler for line table is_stmt support... \" >&6; }\n+if test \"${gcc_cv_as_is_stmt+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_is_stmt=no\n+    if test $in_tree_gas = yes; then\n+    if test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 16 \\) \\* 1000 + 92`\n+  then gcc_cv_as_is_stmt=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    $as_echo '\t.text\n+\t.file 1 \"conf.c\"\n+\t.loc 1 1 0 is_stmt 1' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags  -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_is_stmt=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_is_stmt\" >&5\n+$as_echo \"$gcc_cv_as_is_stmt\" >&6; }\n+if test $gcc_cv_as_is_stmt = yes; then\n+\n+$as_echo \"#define HAVE_GAS_LOC_STMT 1\" >>confdefs.h\n+\n+fi\n+\n+\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for line table discriminator support\" >&5\n $as_echo_n \"checking assembler for line table discriminator support... \" >&6; }\n if test \"${gcc_cv_as_discriminator+set}\" = set; then :"}, {"sha": "92cecbd763699d15a666f4933afed4fb3317cd06", "filename": "gcc/configure.ac", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894f597f8fb8693a5d0f5834e98a8ccebbbb9106/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894f597f8fb8693a5d0f5834e98a8ccebbbb9106/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=894f597f8fb8693a5d0f5834e98a8ccebbbb9106", "patch": "@@ -3146,6 +3146,15 @@ case \"${target}\" in\n   ;;\n esac\n \n+gcc_GAS_CHECK_FEATURE([line table is_stmt support],\n+ gcc_cv_as_is_stmt,\n+ [2,16,92],,\n+[\t.text\n+\t.file 1 \"conf.c\"\n+\t.loc 1 1 0 is_stmt 1],,\n+[AC_DEFINE(HAVE_GAS_LOC_STMT, 1,\n+  [Define if your assembler supports the .loc is_stmt sub-directive.])])\n+\n gcc_GAS_CHECK_FEATURE([line table discriminator support],\n  gcc_cv_as_discriminator,\n  [2,19,51],,"}, {"sha": "55fcb7be4afa7cc861789d38408d8c741175f822", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894f597f8fb8693a5d0f5834e98a8ccebbbb9106/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894f597f8fb8693a5d0f5834e98a8ccebbbb9106/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=894f597f8fb8693a5d0f5834e98a8ccebbbb9106", "patch": "@@ -27931,8 +27931,10 @@ dwarf2out_source_line (unsigned int line, unsigned int column,\n \n       if (is_stmt != table->is_stmt)\n \t{\n+#if HAVE_GAS_LOC_STMT\n \t  fputs (\" is_stmt \", asm_out_file);\n \t  putc (is_stmt ? '1' : '0', asm_out_file);\n+#endif\n \t}\n       if (SUPPORTS_DISCRIMINATOR && discriminator != 0)\n \t{"}]}