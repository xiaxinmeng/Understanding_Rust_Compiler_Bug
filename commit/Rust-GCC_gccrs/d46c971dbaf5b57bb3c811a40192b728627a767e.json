{"sha": "d46c971dbaf5b57bb3c811a40192b728627a767e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ2Yzk3MWRiYWY1YjU3YmIzYzgxMWE0MDE5MmI3Mjg2MjdhNzY3ZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-08-23T07:00:22Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-08-23T07:00:22Z"}, "message": "mips.h (GENERATE_MULT3_SI): Check TARGET_MAD.\n\n\t* config/mips/mips.h (GENERATE_MULT3_SI): Check TARGET_MAD.\n\t* config/mips/mips.md (mul[sd]i3, mul[sd]i3_internal)\n\t(mul[sd]i3_r4000): Redefine using :GPR.\n\t(mulsi3_mult3): Don't check TARGET_MAD separately.\n\t(muldi3_mult3): Moved after mulsi_mult3.\n\nFrom-SVN: r86406", "tree": {"sha": "8048a9c310116bbe87b24b55edf41acb1a8eb435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8048a9c310116bbe87b24b55edf41acb1a8eb435"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d46c971dbaf5b57bb3c811a40192b728627a767e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d46c971dbaf5b57bb3c811a40192b728627a767e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d46c971dbaf5b57bb3c811a40192b728627a767e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d46c971dbaf5b57bb3c811a40192b728627a767e/comments", "author": null, "committer": null, "parents": [{"sha": "5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5811cb27a8bb6ff2dcfa12ca57cb140c97079fa1"}], "stats": {"total": 128, "additions": 50, "deletions": 78}, "files": [{"sha": "1551d62f9deb502075a656f3e8a904c3b4dfa2c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d46c971dbaf5b57bb3c811a40192b728627a767e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d46c971dbaf5b57bb3c811a40192b728627a767e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d46c971dbaf5b57bb3c811a40192b728627a767e", "patch": "@@ -1,3 +1,11 @@\n+2004-08-23  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.h (GENERATE_MULT3_SI): Check TARGET_MAD.\n+\t* config/mips/mips.md (mul[sd]i3, mul[sd]i3_internal)\n+\t(mul[sd]i3_r4000): Redefine using :GPR.\n+\t(mulsi3_mult3): Don't check TARGET_MAD separately.\n+\t(muldi3_mult3): Moved after mulsi_mult3.\n+\n 2004-08-23  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config.gcc (mips-*-*): Remove definitions of MASK_GAS and"}, {"sha": "51f895287e694b99a7cbfbf6c69260908443fa12", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d46c971dbaf5b57bb3c811a40192b728627a767e/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d46c971dbaf5b57bb3c811a40192b728627a767e/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=d46c971dbaf5b57bb3c811a40192b728627a767e", "patch": "@@ -779,6 +779,7 @@ extern const struct mips_cpu_info *mips_tune_info;\n                                   || TARGET_MIPS5500                    \\\n                                   || TARGET_MIPS7000                    \\\n                                   || TARGET_MIPS9000                    \\\n+\t\t\t\t  || TARGET_MAD\t\t\t\t\\\n                                   || ISA_MIPS32\t                        \\\n                                   || ISA_MIPS32R2                       \\\n                                   || ISA_MIPS64)                        \\"}, {"sha": "08dfca38e21f0e80be13be98bd1d022dca0b75d1", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 41, "deletions": 78, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d46c971dbaf5b57bb3c811a40192b728627a767e/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d46c971dbaf5b57bb3c811a40192b728627a767e/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=d46c971dbaf5b57bb3c811a40192b728627a767e", "patch": "@@ -822,18 +822,19 @@\n ;; These processors have PRId values of 0x00004220 and 0x00004300,\n ;; respectively.\n \n-(define_expand \"mulsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\")\n-\t(mult:SI (match_operand:SI 1 \"register_operand\")\n-\t\t (match_operand:SI 2 \"register_operand\")))]\n+(define_expand \"mul<mode>3\"\n+  [(set (match_operand:GPR 0 \"register_operand\")\n+\t(mult:GPR (match_operand:GPR 1 \"register_operand\")\n+\t\t  (match_operand:GPR 2 \"register_operand\")))]\n   \"\"\n {\n-  if (GENERATE_MULT3_SI || TARGET_MAD)\n-    emit_insn (gen_mulsi3_mult3 (operands[0], operands[1], operands[2]));\n+  if (GENERATE_MULT3_<MODE>)\n+    emit_insn (gen_mul<mode>3_mult3 (operands[0], operands[1], operands[2]));\n   else if (!TARGET_FIX_R4000)\n-    emit_insn (gen_mulsi3_internal (operands[0], operands[1], operands[2]));\n+    emit_insn (gen_mul<mode>3_internal (operands[0], operands[1],\n+\t\t\t\t\toperands[2]));\n   else\n-    emit_insn (gen_mulsi3_r4000 (operands[0], operands[1], operands[2]));\n+    emit_insn (gen_mul<mode>3_r4000 (operands[0], operands[1], operands[2]));\n   DONE;\n })\n \n@@ -843,8 +844,7 @@\n \t\t (match_operand:SI 2 \"register_operand\" \"d,d\")))\n    (clobber (match_scratch:SI 3 \"=h,h\"))\n    (clobber (match_scratch:SI 4 \"=l,X\"))]\n-  \"GENERATE_MULT3_SI\n-   || TARGET_MAD\"\n+  \"GENERATE_MULT3_SI\"\n {\n   if (which_alternative == 1)\n     return \"mult\\t%1,%2\";\n@@ -859,8 +859,19 @@\n     return \"mul\\t%0,%1,%2\";\n   return \"mult\\t%0,%1,%2\";\n }\n-  [(set_attr \"type\"\t\"imul\")\n-   (set_attr \"mode\"\t\"SI\")])\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"muldi3_mult3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+\t(mult:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+\t\t (match_operand:DI 2 \"register_operand\" \"d\")))\n+   (clobber (match_scratch:DI 3 \"=h\"))\n+   (clobber (match_scratch:DI 4 \"=l\"))]\n+  \"TARGET_64BIT && GENERATE_MULT3_DI\"\n+  \"dmult\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"mode\" \"DI\")])\n \n ;; If a register gets allocated to LO, and we spill to memory, the reload\n ;; will include a move from LO to a GPR.  Merge it into the multiplication\n@@ -888,27 +899,27 @@\n         (clobber (match_dup 3))\n         (clobber (match_dup 0))])])\n \n-(define_insn \"mulsi3_internal\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=l\")\n-\t(mult:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t\t (match_operand:SI 2 \"register_operand\" \"d\")))\n-   (clobber (match_scratch:SI 3 \"=h\"))]\n+(define_insn \"mul<mode>3_internal\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=l\")\n+\t(mult:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t  (match_operand:GPR 2 \"register_operand\" \"d\")))\n+   (clobber (match_scratch:GPR 3 \"=h\"))]\n   \"!TARGET_FIX_R4000\"\n-  \"mult\\t%1,%2\"\n-  [(set_attr \"type\"\t\"imul\")\n-   (set_attr \"mode\"\t\"SI\")])\n+  \"<d>mult\\t%1,%2\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"mulsi3_r4000\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(mult:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t\t (match_operand:SI 2 \"register_operand\" \"d\")))\n-   (clobber (match_scratch:SI 3 \"=h\"))\n-   (clobber (match_scratch:SI 4 \"=l\"))]\n+(define_insn \"mul<mode>3_r4000\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(mult:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t  (match_operand:GPR 2 \"register_operand\" \"d\")))\n+   (clobber (match_scratch:GPR 3 \"=h\"))\n+   (clobber (match_scratch:GPR 4 \"=l\"))]\n   \"TARGET_FIX_R4000\"\n-  \"mult\\t%1,%2\\;mflo\\t%0\"\n-  [(set_attr \"type\"\t\"imul\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"   \"8\")])\n+  \"<d>mult\\t%1,%2\\;mflo\\t%0\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"length\" \"8\")])\n \n ;; On the VR4120 and VR4130, it is better to use \"mtlo $0; macc\" instead\n ;; of \"mult; mflo\".  They have the same latency, but the first form gives\n@@ -1284,54 +1295,6 @@\n   [(set_attr \"type\"     \"imul\")\n    (set_attr \"mode\"     \"SI\")])\n \n-(define_expand \"muldi3\"\n-  [(set (match_operand:DI 0 \"register_operand\")\n-\t(mult:DI (match_operand:DI 1 \"register_operand\")\n-\t\t (match_operand:DI 2 \"register_operand\")))]\n-  \"TARGET_64BIT\"\n-{\n-  if (GENERATE_MULT3_DI)\n-    emit_insn (gen_muldi3_mult3 (operands[0], operands[1], operands[2]));\n-  else if (!TARGET_FIX_R4000)\n-    emit_insn (gen_muldi3_internal (operands[0], operands[1], operands[2]));\n-  else\n-    emit_insn (gen_muldi3_r4000 (operands[0], operands[1], operands[2]));\n-  DONE;\n-})\n-\n-(define_insn \"muldi3_mult3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(mult:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t (match_operand:DI 2 \"register_operand\" \"d\")))\n-   (clobber (match_scratch:DI 3 \"=h\"))\n-   (clobber (match_scratch:DI 4 \"=l\"))]\n-  \"TARGET_64BIT && GENERATE_MULT3_DI\"\n-  \"dmult\\t%0,%1,%2\"\n-  [(set_attr \"type\"\t\"imul\")\n-   (set_attr \"mode\"\t\"DI\")])\n-\n-(define_insn \"muldi3_internal\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=l\")\n-\t(mult:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t (match_operand:DI 2 \"register_operand\" \"d\")))\n-   (clobber (match_scratch:DI 3 \"=h\"))]\n-  \"TARGET_64BIT && !TARGET_FIX_R4000\"\n-  \"dmult\\t%1,%2\"\n-  [(set_attr \"type\"\t\"imul\")\n-   (set_attr \"mode\"\t\"DI\")])\n-\n-(define_insn \"muldi3_r4000\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(mult:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-\t\t (match_operand:DI 2 \"register_operand\" \"d\")))\n-   (clobber (match_scratch:DI 3 \"=h\"))\n-   (clobber (match_scratch:DI 4 \"=l\"))]\n-  \"TARGET_64BIT && TARGET_FIX_R4000\"\n-  \"dmult\\t%1,%2\\;mflo\\t%0\"\n-  [(set_attr \"type\"\t\"imul\")\n-   (set_attr \"mode\"\t\"DI\")\n-   (set_attr \"length\"\t\"8\")])\n-\n ;; ??? We could define a mulditi3 pattern when TARGET_64BIT.\n \n (define_expand \"mulsidi3\""}]}