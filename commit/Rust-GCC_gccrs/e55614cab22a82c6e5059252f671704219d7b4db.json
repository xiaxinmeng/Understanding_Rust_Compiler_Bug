{"sha": "e55614cab22a82c6e5059252f671704219d7b4db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU1NjE0Y2FiMjJhODJjNmU1MDU5MjUyZjY3MTcwNDIxOWQ3YjRkYg==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2003-04-29T20:39:12Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2003-04-29T20:39:12Z"}, "message": "c-semantics.c (expand_unreachable_stmt): Return a tree.\n\n\t* c-semantics.c (expand_unreachable_stmt): Return a tree.\n\t(expand_stmt): Update for change to expand_unreachable_stmt.\n\t(expand_unreachable_if_stmt): Likewise.\n\nFrom-SVN: r66252", "tree": {"sha": "ed84d5aecfac24b3426de18d3a9ccf8117ca780f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed84d5aecfac24b3426de18d3a9ccf8117ca780f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e55614cab22a82c6e5059252f671704219d7b4db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e55614cab22a82c6e5059252f671704219d7b4db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e55614cab22a82c6e5059252f671704219d7b4db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e55614cab22a82c6e5059252f671704219d7b4db/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b9538b2e886f20d3077dc5edd822d722c1a43bf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9538b2e886f20d3077dc5edd822d722c1a43bf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9538b2e886f20d3077dc5edd822d722c1a43bf7"}], "stats": {"total": 96, "additions": 52, "deletions": 44}, "files": [{"sha": "02111b65711775da1c4fe37065be601fc6e562d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e55614cab22a82c6e5059252f671704219d7b4db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e55614cab22a82c6e5059252f671704219d7b4db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e55614cab22a82c6e5059252f671704219d7b4db", "patch": "@@ -1,5 +1,9 @@\n 2003-04-29  Geoffrey Keating  <geoffk@apple.com>\n \n+\t* c-semantics.c (expand_unreachable_stmt): Return a tree.\n+\t(expand_stmt): Update for change to expand_unreachable_stmt.\n+\t(expand_unreachable_if_stmt): Likewise.\n+\n \t* Makefile.in (quickstrap): Pass BOOT_CFLAGS to submake.\n \n 2003-04-29  Jason Merrill  <jason@redhat.com>"}, {"sha": "fc7ccb745ff49e79a775e8cb5bba7785485e3280", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 48, "deletions": 44, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e55614cab22a82c6e5059252f671704219d7b4db/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e55614cab22a82c6e5059252f671704219d7b4db/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=e55614cab22a82c6e5059252f671704219d7b4db", "patch": "@@ -55,7 +55,7 @@ void (*lang_expand_decl_stmt) PARAMS ((tree));\n static tree find_reachable_label_1\tPARAMS ((tree *, int *, void *));\n static tree find_reachable_label\tPARAMS ((tree));\n static bool expand_unreachable_if_stmt\tPARAMS ((tree));\n-static bool expand_unreachable_stmt\tPARAMS ((tree, int));\n+static tree expand_unreachable_stmt\tPARAMS ((tree, int));\n \n /* Create an empty statement tree rooted at T.  */\n \n@@ -823,8 +823,8 @@ expand_stmt (t)\n \n \tcase RETURN_STMT:\n \t  genrtl_return_stmt (t);\n-\t  expand_unreachable_stmt (TREE_CHAIN (t), warn_notreached);\n-\t  return;\n+\t  t = expand_unreachable_stmt (TREE_CHAIN (t), warn_notreached);\n+\t  goto process_t;\n \n \tcase EXPR_STMT:\n \t  genrtl_expr_stmt_value (EXPR_STMT_EXPR (t), TREE_ADDRESSABLE (t),\n@@ -859,13 +859,13 @@ expand_stmt (t)\n \n \tcase BREAK_STMT:\n \t  genrtl_break_stmt ();\n-\t  expand_unreachable_stmt (TREE_CHAIN (t), warn_notreached);\n-\t  return;\n+\t  t = expand_unreachable_stmt (TREE_CHAIN (t), warn_notreached);\n+\t  goto process_t;\n \n \tcase CONTINUE_STMT:\n \t  genrtl_continue_stmt ();\n-\t  expand_unreachable_stmt (TREE_CHAIN (t), warn_notreached);\n-\t  return;\n+\t  t = expand_unreachable_stmt (TREE_CHAIN (t), warn_notreached);\n+\t  goto process_t;\n \n \tcase SWITCH_STMT:\n \t  genrtl_switch_stmt (t);\n@@ -890,8 +890,8 @@ expand_stmt (t)\n \t      NOTE_PREDICTION (note) = NOTE_PREDICT (PRED_GOTO, NOT_TAKEN);\n \t    }\n \t  genrtl_goto_stmt (GOTO_DESTINATION (t));\n-\t  expand_unreachable_stmt (TREE_CHAIN (t), warn_notreached);\n-\t  return;\n+\t  t = expand_unreachable_stmt (TREE_CHAIN (t), warn_notreached);\n+\t  goto process_t;\n \n \tcase ASM_STMT:\n \t  genrtl_asm_stmt (ASM_CV_QUAL (t), ASM_STRING (t),\n@@ -915,12 +915,13 @@ expand_stmt (t)\n \t  break;\n \t}\n \n+      /* Go on to the next statement in this scope.  */\n+      t = TREE_CHAIN (t);\n+\n+    process_t:\n       /* Restore saved state.  */\n       current_stmt_tree ()->stmts_are_full_exprs_p\n \t= saved_stmts_are_full_exprs_p;\n-\n-      /* Go on to the next statement in this scope.  */\n-      t = TREE_CHAIN (t);\n     }\n }\n \f\n@@ -964,6 +965,8 @@ static bool\n expand_unreachable_if_stmt (t)\n      tree t;\n {\n+  tree n;\n+  \n   if (find_reachable_label (IF_COND (t)) != NULL_TREE)\n     {\n       genrtl_if_stmt (t);\n@@ -972,31 +975,38 @@ expand_unreachable_if_stmt (t)\n \n   if (THEN_CLAUSE (t) && ELSE_CLAUSE (t))\n     {\n-      if (expand_unreachable_stmt (THEN_CLAUSE (t), 0))\n+      n = expand_unreachable_stmt (THEN_CLAUSE (t), 0);\n+      \n+      if (n != NULL_TREE)\n \t{\n \t  rtx label;\n+\t  expand_stmt (n);\n \t  label = gen_label_rtx ();\n \t  emit_jump (label);\n-\t  expand_unreachable_stmt (ELSE_CLAUSE (t), 0);\n+\t  expand_stmt (expand_unreachable_stmt (ELSE_CLAUSE (t), 0));\n \t  emit_label (label);\n \t  return true;\n \t}\n       else\n-\treturn expand_unreachable_stmt (ELSE_CLAUSE (t), 0);\n+\tn = expand_unreachable_stmt (ELSE_CLAUSE (t), 0);\n     }\n   else if (THEN_CLAUSE (t))\n-    return expand_unreachable_stmt (THEN_CLAUSE (t), 0);\n+    n = expand_unreachable_stmt (THEN_CLAUSE (t), 0);\n   else if (ELSE_CLAUSE (t))\n-    return expand_unreachable_stmt (ELSE_CLAUSE (t), 0);\n-\n-  return false;\n+    n = expand_unreachable_stmt (ELSE_CLAUSE (t), 0);\n+  else\n+    n = NULL_TREE;\n+  \n+  expand_stmt (n);\n+  \n+  return n != NULL_TREE;\n }\n \n /* Expand an unreachable statement list.  This function skips all\n    statements preceding the first potentially reachable label and\n-   then expands the statements normally with expand_stmt.  This\n-   function returns true if such a reachable label was found.  */\n-static bool\n+   then returns the label (or, in same cases, the statement after\n+   one containing the label).  */\n+static tree\n expand_unreachable_stmt (t, warn)\n      tree t;\n      int warn;\n@@ -1037,36 +1047,31 @@ expand_unreachable_stmt (t, warn)\n \n \tcase RETURN_STMT:\n \t  if (find_reachable_label (RETURN_STMT_EXPR (t)) != NULL_TREE)\n-\t    {\n-\t      expand_stmt (t);\n-\t      return true;\n-\t    }\n+\t    return t;\n \t  break;\n \n \tcase EXPR_STMT:\n \t  if (find_reachable_label (EXPR_STMT_EXPR (t)) != NULL_TREE)\n-\t    {\n-\t      expand_stmt (t);\n-\t      return true;\n-\t    }\n+\t    return t;\n \t  break;\n \n \tcase IF_STMT:\n \t  if (expand_unreachable_if_stmt (t))\n-\t    {\n-\t      expand_stmt (TREE_CHAIN (t));\n-\t      return true;\n-\t    }\n+\t    return TREE_CHAIN (t);\n \t  break;\n \n \tcase COMPOUND_STMT:\n-\t  if (expand_unreachable_stmt (COMPOUND_BODY (t), warn))\n-\t    {\n-\t      expand_stmt (TREE_CHAIN (t));\n-\t      return true;\n-\t    }\n-\t  warn = false;\n-\t  break;\n+\t  {\n+\t    tree n;\n+\t    n = expand_unreachable_stmt (COMPOUND_BODY (t), warn);\n+\t    if (n != NULL_TREE)\n+\t      {\n+\t\texpand_stmt (n);\n+\t\treturn TREE_CHAIN (t);\n+\t      }\n+\t    warn = false;\n+\t    break;\n+\t  }\n \n \tcase SCOPE_STMT:\n \t  saved = stmts_are_full_exprs_p ();\n@@ -1076,11 +1081,10 @@ expand_unreachable_stmt (t, warn)\n \t  break;\n \n \tdefault:\n-\t  expand_stmt (t);\n-\t  return true;\n+\t  return t;\n \t}\n       t = TREE_CHAIN (t);\n     }\n-  return false;\n+  return NULL_TREE;\n }\n "}]}