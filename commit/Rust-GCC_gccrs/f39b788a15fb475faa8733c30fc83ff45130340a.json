{"sha": "f39b788a15fb475faa8733c30fc83ff45130340a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM5Yjc4OGExNWZiNDc1ZmFhODczM2MzMGZjODNmZjQ1MTMwMzQwYQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-02-07T21:17:30Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-02-07T21:17:30Z"}, "message": "jni.cc (add_char): Conditional on INTERPRETER.\n\n\t* jni.cc (add_char): Conditional on INTERPRETER.\n\t(mangled_name): Likewise.\n\t(call): Likewise.\n\t* include/java-interp.h (class _Jv_MethodBase): Conditional on\n\tINTERPRETER.\n\t(class _Jv_JNIMethod): Likewise.\n\nFrom-SVN: r31839", "tree": {"sha": "faba3a37f43974f358ae5a8683da016bc6316c15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/faba3a37f43974f358ae5a8683da016bc6316c15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f39b788a15fb475faa8733c30fc83ff45130340a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f39b788a15fb475faa8733c30fc83ff45130340a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f39b788a15fb475faa8733c30fc83ff45130340a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f39b788a15fb475faa8733c30fc83ff45130340a/comments", "author": null, "committer": null, "parents": [{"sha": "f766bd4696b6aeec71bf0168c819e562a12aa96f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f766bd4696b6aeec71bf0168c819e562a12aa96f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f766bd4696b6aeec71bf0168c819e562a12aa96f"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "d3078fa8fc8319d8efa03a4226b8a6ae575183c6", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f39b788a15fb475faa8733c30fc83ff45130340a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f39b788a15fb475faa8733c30fc83ff45130340a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f39b788a15fb475faa8733c30fc83ff45130340a", "patch": "@@ -1,3 +1,12 @@\n+2000-02-07  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* jni.cc (add_char): Conditional on INTERPRETER.\n+\t(mangled_name): Likewise.\n+\t(call): Likewise.\n+\t* include/java-interp.h (class _Jv_MethodBase): Conditional on\n+\tINTERPRETER.\n+\t(class _Jv_JNIMethod): Likewise.\n+\n 2000-02-04  Warren Levy  <warrenl@cygnus.com>\n \n \t* Makefile.am: Added MPN.java and BigInteger.java."}, {"sha": "8111d40f2a7c4d18b0834ebd7b88672462da3812", "filename": "libjava/include/java-interp.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f39b788a15fb475faa8733c30fc83ff45130340a/libjava%2Finclude%2Fjava-interp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f39b788a15fb475faa8733c30fc83ff45130340a/libjava%2Finclude%2Fjava-interp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-interp.h?ref=f39b788a15fb475faa8733c30fc83ff45130340a", "patch": "@@ -14,18 +14,6 @@ details.  */\n #include <jvm.h>\n #include <java-cpool.h>\n \n-// Base class for method representations.  Subclasses are interpreted\n-// and JNI methods.\n-class _Jv_MethodBase\n-{\n-protected:\n-  // The class which defined this method.\n-  _Jv_InterpClass *defining_class;\n-\n-  // The method description.\n-  _Jv_Method *self;\n-};\n-\n #ifdef INTERPRETER\n \n #pragma interface\n@@ -78,6 +66,18 @@ class _Jv_InterpException {\n   friend class _Jv_InterpMethod;\n };\n \n+// Base class for method representations.  Subclasses are interpreted\n+// and JNI methods.\n+class _Jv_MethodBase\n+{\n+protected:\n+  // The class which defined this method.\n+  _Jv_InterpClass *defining_class;\n+\n+  // The method description.\n+  _Jv_Method *self;\n+};\n+\n class _Jv_InterpMethod : public _Jv_MethodBase\n {\n   _Jv_ushort       max_stack;\n@@ -169,8 +169,6 @@ struct _Jv_ResolvedMethod {\n   ffi_type *      arg_types[0];\n };\n \n-#endif /* INTERPRETER */\n-\n class _Jv_JNIMethod : public _Jv_MethodBase\n {\n   // The underlying function.  If NULL we have to look for the\n@@ -186,4 +184,6 @@ class _Jv_JNIMethod : public _Jv_MethodBase\n   friend void _Jv_PrepareClass(jclass);\n };\n \n+#endif /* INTERPRETER */\n+\n #endif /* __JAVA_INTERP_H__ */"}, {"sha": "82105a4d66f72ec425faea5b31348aa92a4a259e", "filename": "libjava/jni.cc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f39b788a15fb475faa8733c30fc83ff45130340a/libjava%2Fjni.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f39b788a15fb475faa8733c30fc83ff45130340a/libjava%2Fjni.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni.cc?ref=f39b788a15fb475faa8733c30fc83ff45130340a", "patch": "@@ -8,12 +8,6 @@ This software is copyrighted work licensed under the terms of the\n Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n details.  */\n \n-// Note: currently we take the approach of not checking most\n-// arguments.  Instead we could do more checking conditionally (e.g.,\n-// if DEBUG is defined).  That might be beneficial in some cases,\n-// though to me it seems that one could just as easily use the\n-// debugger.\n-\n #include <config.h>\n \n #include <stddef.h>\n@@ -1205,6 +1199,8 @@ _Jv_JNI_FromReflectedMethod (JNIEnv *, jobject method)\n \n \f\n \n+#ifdef INTERPRETER\n+\n // Add a character to the buffer, encoding properly.\n static void\n add_char (char *buf, jchar c, int *here)\n@@ -1347,6 +1343,7 @@ _Jv_JNIMethod::call (ffi_cif *cif, void *ret, ffi_raw *args, void *__this)\n     }\n \n   // The actual call to the JNI function.\n+  // FIXME: if this is a static function we must include the class!\n   ffi_raw_call (cif, (void (*) (...)) _this->function, ret, args);\n \n   do\n@@ -1359,6 +1356,8 @@ _Jv_JNIMethod::call (ffi_cif *cif, void *ret, ffi_raw *args, void *__this)\n     JvThrow (env.ex);\n }\n \n+#endif /* INTERPRETER */\n+\n \f\n \n #define NOT_IMPL NULL"}]}