{"sha": "cf958f8f168f695d49e29297ef9fb37f6efa5d0f", "node_id": "C_kwDOANBUbNoAKGNmOTU4ZjhmMTY4ZjY5NWQ0OWUyOTI5N2VmOWZiMzdmNmVmYTVkMGY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-16T13:42:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-16T13:44:45Z"}, "message": "c++: Fix up calls to static operator() or operator[] [PR107624]\n\nOne thing that doesn't work properly is the same problem as I've filed\nyesterday for static operator() - PR107624 - that side-effects of\nthe postfix-expression on which the call or subscript operator are\napplied are thrown away, I assume we have to add them into COMPOUND_EXPR\nsomewhere after we find out that the we've chosen a static member function\noperator.\n\nOn Mon, Nov 14, 2022 at 06:29:44PM -0500, Jason Merrill wrote:\n> Indeed.  The code in build_new_method_call for this case has the comment\n>\n>               /* In an expression of the form `a->f()' where `f' turns\n>                  out to be a static member function, `a' is\n>                  none-the-less evaluated.  */\n\nHad to tweak 3 spots for this.  Furthermore, found that if in non-pedantic\nC++20 compilation static operator[] is accepted, we required that it has 2\narguments, I think it is better to require exactly one because that case\nis the only one that will actually work in C++20 and older.\n\n2022-11-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/107624\n\t* call.cc (keep_unused_object_arg): New function.\n\t(build_op_call): Use it.\n\t(build_op_subscript): Likewise.\n\t(build_new_op): Similarly for ARRAY_REF.\n\t(build_new_method_call): Use it.\n\t* decl.cc (grok_op_properties): For C++20 and earlier, if operator[]\n\tis static member function, require exactly one parameter rather than\n\texactly two parameters.\n\n\t* g++.dg/cpp23/static-operator-call4.C: New test.\n\t* g++.dg/cpp23/subscript10.C: New test.\n\t* g++.dg/cpp23/subscript11.C: New test.", "tree": {"sha": "7347017f8bd4bb25b5722320294b2219474ff959", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7347017f8bd4bb25b5722320294b2219474ff959"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf958f8f168f695d49e29297ef9fb37f6efa5d0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf958f8f168f695d49e29297ef9fb37f6efa5d0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf958f8f168f695d49e29297ef9fb37f6efa5d0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf958f8f168f695d49e29297ef9fb37f6efa5d0f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85966f0d20baf50a767ac1110f537395441604a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85966f0d20baf50a767ac1110f537395441604a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85966f0d20baf50a767ac1110f537395441604a9"}], "stats": {"total": 164, "additions": 148, "deletions": 16}, "files": [{"sha": "459e86b5f09fb6b68cf812b141aea6678c6d892d", "filename": "gcc/cp/call.cc", "status": "modified", "additions": 50, "deletions": 16, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf958f8f168f695d49e29297ef9fb37f6efa5d0f/gcc%2Fcp%2Fcall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf958f8f168f695d49e29297ef9fb37f6efa5d0f/gcc%2Fcp%2Fcall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.cc?ref=cf958f8f168f695d49e29297ef9fb37f6efa5d0f", "patch": "@@ -5017,6 +5017,33 @@ build_operator_new_call (tree fnname, vec<tree, va_gc> **args,\n    return ret;\n }\n \n+/* Evaluate side-effects from OBJ before evaluating call\n+   to FN in RESULT expression.\n+   This is for expressions of the form `obj->fn(...)'\n+   where `fn' turns out to be a static member function and\n+   `obj' needs to be evaluated.  `fn' could be also static operator[]\n+   or static operator(), in which cases the source expression\n+   would be `obj[...]' or `obj(...)'.  */\n+\n+static tree\n+keep_unused_object_arg (tree result, tree obj, tree fn)\n+{\n+  if (result == NULL_TREE\n+      || result == error_mark_node\n+      || TREE_CODE (TREE_TYPE (fn)) == METHOD_TYPE\n+      || !TREE_SIDE_EFFECTS (obj))\n+    return result;\n+\n+  /* But avoid the implicit lvalue-rvalue conversion when `obj' is\n+     volatile.  */\n+  tree a = obj;\n+  if (TREE_THIS_VOLATILE (a))\n+    a = build_this (a);\n+  if (TREE_SIDE_EFFECTS (a))\n+    return build2 (COMPOUND_EXPR, TREE_TYPE (result), a, result);\n+  return result;\n+}\n+\n /* Build a new call to operator().  This may change ARGS.  */\n \n tree\n@@ -5137,7 +5164,13 @@ build_op_call (tree obj, vec<tree, va_gc> **args, tsubst_flags_t complain)\n       else if (TREE_CODE (cand->fn) == FUNCTION_DECL\n \t       && DECL_OVERLOADED_OPERATOR_P (cand->fn)\n \t       && DECL_OVERLOADED_OPERATOR_IS (cand->fn, CALL_EXPR))\n-\tresult = build_over_call (cand, LOOKUP_NORMAL, complain);\n+\t{\n+\t  result = build_over_call (cand, LOOKUP_NORMAL, complain);\n+\t  /* In an expression of the form `a()' where cand->fn\n+\t     which is operator() turns out to be a static member function,\n+\t     `a' is none-the-less evaluated.  */\n+\t  result = keep_unused_object_arg (result, obj, cand->fn);\n+\t}\n       else\n \t{\n \t  if (TREE_CODE (cand->fn) == FUNCTION_DECL)\n@@ -7046,6 +7079,12 @@ build_new_op (const op_location_t &loc, enum tree_code code, int flags,\n \t\t  gcc_unreachable ();\n \t\t}\n \t    }\n+\n+\t  /* In an expression of the form `a[]' where cand->fn\n+\t     which is operator[] turns out to be a static member function,\n+\t     `a' is none-the-less evaluated.  */\n+\t  if (code == ARRAY_REF)\n+\t    result = keep_unused_object_arg (result, arg1, cand->fn);\n \t}\n       else\n \t{\n@@ -7302,6 +7341,11 @@ build_op_subscript (const op_location_t &loc, tree obj,\n \t      /* Specify evaluation order as per P0145R2.  */\n \t      CALL_EXPR_ORDERED_ARGS (call) = op_is_ordered (ARRAY_REF) == 1;\n \t    }\n+\n+\t  /* In an expression of the form `a[]' where cand->fn\n+\t     which is operator[] turns out to be a static member function,\n+\t     `a' is none-the-less evaluated.  */\n+\t  result = keep_unused_object_arg (result, obj, cand->fn);\n \t}\n       else\n \tgcc_unreachable ();\n@@ -11494,21 +11538,11 @@ build_new_method_call (tree instance, tree fns, vec<tree, va_gc> **args,\n \t      /* In an expression of the form `a->f()' where `f' turns\n \t\t out to be a static member function, `a' is\n \t\t none-the-less evaluated.  */\n-\t      if (TREE_CODE (TREE_TYPE (fn)) != METHOD_TYPE\n-\t\t  && !is_dummy_object (instance)\n-\t\t  && TREE_SIDE_EFFECTS (instance))\n-\t\t{\n-\t\t  /* But avoid the implicit lvalue-rvalue conversion when 'a'\n-\t\t     is volatile.  */\n-\t\t  tree a = instance;\n-\t\t  if (TREE_THIS_VOLATILE (a))\n-\t\t    a = build_this (a);\n-\t\t  if (TREE_SIDE_EFFECTS (a))\n-\t\t    call = build2 (COMPOUND_EXPR, TREE_TYPE (call), a, call);\n-\t\t}\n-\t      else if (call != error_mark_node\n-\t\t       && DECL_DESTRUCTOR_P (cand->fn)\n-\t\t       && !VOID_TYPE_P (TREE_TYPE (call)))\n+\t      if (!is_dummy_object (instance))\n+\t\tcall = keep_unused_object_arg (call, instance, fn);\n+\t      if (call != error_mark_node\n+\t\t  && DECL_DESTRUCTOR_P (cand->fn)\n+\t\t  && !VOID_TYPE_P (TREE_TYPE (call)))\n \t\t/* An explicit call of the form \"x->~X()\" has type\n \t\t   \"void\".  However, on platforms where destructors\n \t\t   return \"this\" (i.e., those where"}, {"sha": "d28889ed86592bc386ccafbaaca6f9b7f56eae47", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf958f8f168f695d49e29297ef9fb37f6efa5d0f/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf958f8f168f695d49e29297ef9fb37f6efa5d0f/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=cf958f8f168f695d49e29297ef9fb37f6efa5d0f", "patch": "@@ -15404,6 +15404,10 @@ grok_op_properties (tree decl, bool complain)\n \t    pedwarn (loc, OPT_Wc__23_extensions, \"%qD may be a static member \"\n \t\t     \"function only with %<-std=c++23%> or %<-std=gnu++23%>\",\n \t\t     decl);\n+\t  if (operator_code == ARRAY_REF)\n+\t    /* static operator[] should have exactly one argument\n+\t       for C++20 and earlier, so that it isn't multidimensional.  */\n+\t    op_flags = OVL_OP_FLAG_UNARY;\n \t}\n       else if (DECL_STATIC_FUNCTION_P (decl))\n \t{"}, {"sha": "83ccde3b9c5b832b9d5f18e7798ef312692059e6", "filename": "gcc/testsuite/g++.dg/cpp23/static-operator-call4.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf958f8f168f695d49e29297ef9fb37f6efa5d0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fstatic-operator-call4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf958f8f168f695d49e29297ef9fb37f6efa5d0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fstatic-operator-call4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fstatic-operator-call4.C?ref=cf958f8f168f695d49e29297ef9fb37f6efa5d0f", "patch": "@@ -0,0 +1,37 @@\n+// PR c++/107624\n+// { dg-do run { target c++11 } }\n+// { dg-options \"\" }\n+\n+int n[3];\n+struct S {\n+  static void operator() (int x) { n[0] |= (1 << x); }\t// { dg-warning \"may be a static member function only with\" \"\" { target c++20_down } }\n+  static void baz (int x) { n[1] |= (1 << x); }\n+  int s;\n+};\n+volatile S s[2];\n+\n+S &\n+foo (int x)\n+{\n+  static S t;\n+  n[2] |= (1 << x);\n+  return t;\n+}\n+\n+int\n+main ()\n+{\n+  int i = 0;\n+  foo (0) (0);\n+  if (n[0] != 1 || n[1] || n[2] != 1)\n+    __builtin_abort ();\n+  foo (1).baz (1);\n+  if (n[0] != 1 || n[1] != 2 || n[2] != 3)\n+    __builtin_abort ();\n+  s[i++] (2);\n+  if (i != 1 || n[0] != 5 || n[1] != 2 || n[2] != 3)\n+    __builtin_abort ();\n+  s[--i].baz (3);\n+  if (i != 0 || n[0] != 5 || n[1] != 10 || n[2] != 3)\n+    __builtin_abort ();\n+}"}, {"sha": "96e5e1f3ed29d324faba1e3661bcc339247b4c12", "filename": "gcc/testsuite/g++.dg/cpp23/subscript10.C", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf958f8f168f695d49e29297ef9fb37f6efa5d0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fsubscript10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf958f8f168f695d49e29297ef9fb37f6efa5d0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fsubscript10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fsubscript10.C?ref=cf958f8f168f695d49e29297ef9fb37f6efa5d0f", "patch": "@@ -0,0 +1,46 @@\n+// PR c++/107624\n+// { dg-do run { target c++11 } }\n+// { dg-options \"\" }\n+\n+int n[3];\n+struct S {\n+  static int &operator[] (int x) { n[0] |= (1 << x); return n[2]; }\t// { dg-warning \"may be a static member function only with\" \"\" { target c++20_down } }\n+#if __cpp_multidimensional_subscript >= 202211L\n+  static int &operator[] () { n[0] |= (1 << 8); return n[2]; }\n+  static int &operator[] (int y, int z, int w) { n[0] |= (1 << y) | (1 << z) | (1 << w); return n[2]; }\n+#endif\n+  int s;\n+};\n+volatile S s[2];\n+\n+S &\n+foo (int x)\n+{\n+  static S t;\n+  n[1] |= (1 << x);\n+  return t;\n+}\n+\n+int\n+main ()\n+{\n+  int i = 0;\n+  foo (0) [0]++;\n+  if (n[0] != 1 || n[1] != 1 || n[2] != 1)\n+    __builtin_abort ();\n+  s[i++][2]++;\n+  if (i != 1 || n[0] != 5 || n[1] != 1 || n[2] != 2)\n+    __builtin_abort ();\n+#if __cpp_multidimensional_subscript >= 202211L\n+  foo (3) []++;\n+  if (n[0] != 261 || n[1] != 9 || n[2] != 3)\n+    __builtin_abort ();\n+  int y = 10;\n+  int z = 10;\n+  int w = 13;\n+  foo (4) [y++, ++z, w++]++;\n+  if (n[0] != 11525 || n[1] != 25 || n[2] != 4\n+      || y != 11 || z != 11 || w != 14)\n+    __builtin_abort ();\n+#endif\n+}"}, {"sha": "990a70327b2448e3b9f080909c10ec7a003c530c", "filename": "gcc/testsuite/g++.dg/cpp23/subscript11.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf958f8f168f695d49e29297ef9fb37f6efa5d0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fsubscript11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf958f8f168f695d49e29297ef9fb37f6efa5d0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fsubscript11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fsubscript11.C?ref=cf958f8f168f695d49e29297ef9fb37f6efa5d0f", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+struct S {\n+  static int &operator[] (int);\t// { dg-warning \"may be a static member function only with\" \"\" { target c++20_down } }\n+  static int &operator[] ();\t// { dg-warning \"may be a static member function only with\" \"\" { target c++20_down } }\n+\t\t\t\t// { dg-error \"'static int& S::operator\\\\\\[\\\\\\]\\\\\\(\\\\\\)' must have exactly one argument\" \"\" { target c++20_down } .-1 }\n+  static int &operator[] (int, int, int);\t// { dg-warning \"may be a static member function only with\" \"\" { target c++20_down } }\n+\t\t\t\t// { dg-error \"'static int& S::operator\\\\\\[\\\\\\]\\\\\\(int, int, int\\\\\\)' must have exactly one argument\" \"\" { target c++20_down } .-1 }\n+  int s;\n+};"}]}