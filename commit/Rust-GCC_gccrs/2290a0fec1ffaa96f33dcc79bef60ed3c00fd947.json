{"sha": "2290a0fec1ffaa96f33dcc79bef60ed3c00fd947", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI5MGEwZmVjMWZmYWE5NmYzM2RjYzc5YmVmNjBlZDNjMDBmZDk0Nw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-02-20T14:35:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-02-20T14:35:51Z"}, "message": "[multiple changes]\n\n2015-02-20  Robert Dewar  <dewar@adacore.com>\n\n\t* errout.ads: Document replacement of Name_uPre/Post/Type_Invariant.\n\t* erroutc.adb (Set_Msg_Str): Replace _xxx.\n\t(Pre/Post/Type_Invariant) by xxx'Class.\n\t* erroutc.ads (Set_Msg_Str): Replace _xxx.\n\t(Pre/Post/Type_Invariant) by xxx'Class.\n\t* sem_prag.adb (Fix_Error): Remove special casing of\n\tName_uType_Invariant.\n\t(Analyze_Pre_Post_Condition_In_Decl_Part): Remove special casing of\n\tName_uPre and Name_uPost in aspect case (done in Errout now).\n\n2015-02-20  Robert Dewar  <dewar@adacore.com>\n\n\t* g-alveop.adb: Minor style fixes.\n\n2015-02-20  Robert Dewar  <dewar@adacore.com>\n\n\t* freeze.adb (Warn_Overlay): Guard against blow up with address\n\tclause.\n\n2015-02-20  Bob Duff  <duff@adacore.com>\n\n\t* exp_attr.adb (May_Be_External_Call): Remove this. There is no need\n\tfor the compiler to guess whether the call is internal or external --\n\tit is always external.\n\t(Expand_Access_To_Protected_Op): For P'Access, where P\n\tis a protected subprogram, always create a pointer to the\n\tExternal_Subprogram.\n\nFrom-SVN: r220869", "tree": {"sha": "f3e1d72804902cd51a26badb810fb60cb7ebb953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3e1d72804902cd51a26badb810fb60cb7ebb953"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2290a0fec1ffaa96f33dcc79bef60ed3c00fd947", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2290a0fec1ffaa96f33dcc79bef60ed3c00fd947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2290a0fec1ffaa96f33dcc79bef60ed3c00fd947", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2290a0fec1ffaa96f33dcc79bef60ed3c00fd947/comments", "author": null, "committer": null, "parents": [{"sha": "67c0e6625c6ce7e235b1558f320d5f94b07a1393", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67c0e6625c6ce7e235b1558f320d5f94b07a1393", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67c0e6625c6ce7e235b1558f320d5f94b07a1393"}], "stats": {"total": 190, "additions": 102, "deletions": 88}, "files": [{"sha": "60acc83cbcd1af4aa8a1a8ea0b758711a03ed24e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2290a0fec1ffaa96f33dcc79bef60ed3c00fd947/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2290a0fec1ffaa96f33dcc79bef60ed3c00fd947/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2290a0fec1ffaa96f33dcc79bef60ed3c00fd947", "patch": "@@ -1,3 +1,33 @@\n+2015-02-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* errout.ads: Document replacement of Name_uPre/Post/Type_Invariant.\n+\t* erroutc.adb (Set_Msg_Str): Replace _xxx.\n+\t(Pre/Post/Type_Invariant) by xxx'Class.\n+\t* erroutc.ads (Set_Msg_Str): Replace _xxx.\n+\t(Pre/Post/Type_Invariant) by xxx'Class.\n+\t* sem_prag.adb (Fix_Error): Remove special casing of\n+\tName_uType_Invariant.\n+\t(Analyze_Pre_Post_Condition_In_Decl_Part): Remove special casing of\n+\tName_uPre and Name_uPost in aspect case (done in Errout now).\n+\n+2015-02-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* g-alveop.adb: Minor style fixes.\n+\n+2015-02-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* freeze.adb (Warn_Overlay): Guard against blow up with address\n+\tclause.\n+\n+2015-02-20  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_attr.adb (May_Be_External_Call): Remove this. There is no need\n+\tfor the compiler to guess whether the call is internal or external --\n+\tit is always external.\n+\t(Expand_Access_To_Protected_Op): For P'Access, where P\n+\tis a protected subprogram, always create a pointer to the\n+\tExternal_Subprogram.\n+\n 2015-02-20  Robert Dewar  <dewar@adacore.com>\n \n \t* a-dispat.adb, a-stcoed.ads: Minor reformatting."}, {"sha": "f23bed31ff5c5fc48e54dbe519828a0f3f44de7a", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2290a0fec1ffaa96f33dcc79bef60ed3c00fd947/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2290a0fec1ffaa96f33dcc79bef60ed3c00fd947/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=2290a0fec1ffaa96f33dcc79bef60ed3c00fd947", "patch": "@@ -139,12 +139,18 @@ package Errout is\n    --      casing mode. Note: if a unit name ending with %b or %s is passed\n    --      for this kind of insertion, this suffix is simply stripped. Use a\n    --      unit name insertion ($) to process the suffix.\n+   --\n+   --      Note: the special names _xxx (xxx = Pre/Post/Invariant) are changed\n+   --      to insert the string xxx'Class into the message.\n \n    --    Insertion character %% (Double percent: insert literal name)\n    --      The character sequence %% acts as described above for %, except\n    --      that the name is simply obtained with Get_Name_String and is not\n    --      decoded or cased, it is inserted literally from the names table.\n    --      A trailing %b or %s is not treated specially.\n+   --\n+   --      Note: the special names _xxx (xxx = Pre/Post/Invariant) are changed\n+   --      to insert the string xxx'Class into the message.\n \n    --    Insertion character $ (Dollar: insert unit name from Names table)\n    --      The character $ is treated similarly to %, except that the name is\n@@ -181,6 +187,9 @@ package Errout is\n    --      Error_Msg_Qual_Level is non-zero, then the reference will include\n    --      up to the given number of levels of qualification, using the scope\n    --      chain.\n+   --\n+   --      Note: the special names _xxx (xxx = Pre/Post/Invariant) are changed\n+   --      to insert the string xxx'Class into the message.\n \n    --    Insertion character # (Pound: insert line number reference)\n    --      The character # is replaced by the string indicating the source"}, {"sha": "c76c1ceff278482d9d7abb9052edbb7990b7f9cb", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2290a0fec1ffaa96f33dcc79bef60ed3c00fd947/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2290a0fec1ffaa96f33dcc79bef60ed3c00fd947/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=2290a0fec1ffaa96f33dcc79bef60ed3c00fd947", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1344,9 +1344,7 @@ package body Erroutc is\n \n    procedure Set_Msg_Name_Buffer is\n    begin\n-      for J in 1 .. Name_Len loop\n-         Set_Msg_Char (Name_Buffer (J));\n-      end loop;\n+      Set_Msg_Str (Name_Buffer (1 .. Name_Len));\n    end Set_Msg_Name_Buffer;\n \n    -------------------\n@@ -1366,9 +1364,42 @@ package body Erroutc is\n \n    procedure Set_Msg_Str (Text : String) is\n    begin\n-      for J in Text'Range loop\n-         Set_Msg_Char (Text (J));\n-      end loop;\n+      --  Do replacement for special x'Class aspect names\n+\n+      if Text = \"_Pre\" then\n+         Set_Msg_Str (\"Pre'Class\");\n+\n+      elsif Text = \"_Post\" then\n+         Set_Msg_Str (\"Post'Class\");\n+\n+      elsif Text = \"_Type_Invariant\" then\n+         Set_Msg_Str (\"Type_Invariant'Class\");\n+\n+      elsif Text = \"_pre\" then\n+         Set_Msg_Str (\"pre'class\");\n+\n+      elsif Text = \"_post\" then\n+         Set_Msg_Str (\"post'class\");\n+\n+      elsif Text = \"_type_invariant\" then\n+         Set_Msg_Str (\"type_invariant'class\");\n+\n+      elsif Text = \"_PRE\" then\n+         Set_Msg_Str (\"PRE'CLASS\");\n+\n+      elsif Text = \"_POST\" then\n+         Set_Msg_Str (\"POST'CLASS\");\n+\n+      elsif Text = \"_TYPE_INVARIANT\" then\n+         Set_Msg_Str (\"TYPE_INVARIANT'CLASS\");\n+\n+      --  Normal case with no replacement\n+\n+      else\n+         for J in Text'Range loop\n+            Set_Msg_Char (Text (J));\n+         end loop;\n+      end if;\n    end Set_Msg_Str;\n \n    ------------------------------"}, {"sha": "a2eec177e814e3967967c04ee88f936ea41d9a77", "filename": "gcc/ada/erroutc.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2290a0fec1ffaa96f33dcc79bef60ed3c00fd947/gcc%2Fada%2Ferroutc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2290a0fec1ffaa96f33dcc79bef60ed3c00fd947/gcc%2Fada%2Ferroutc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.ads?ref=2290a0fec1ffaa96f33dcc79bef60ed3c00fd947", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -527,7 +527,8 @@ package Erroutc is\n    procedure Set_Msg_Str (Text : String);\n    --  Add a sequence of characters to the current message. This routine does\n    --  not check for special insertion characters (they are just treated as\n-   --  text characters if they occur).\n+   --  text characters if they occur). It does perform the transformation of\n+   --  the special strings _xxx (xxx = Pre/Post/Type_Invariant) to xxx'Class.\n \n    procedure Set_Next_Non_Deleted_Msg (E : in out Error_Msg_Id);\n    --  Given a message id, move to next message id, but skip any deleted"}, {"sha": "5cc45ae660fa9d38d3f03f08c7e01a5fdb0883a6", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 9, "deletions": 44, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2290a0fec1ffaa96f33dcc79bef60ed3c00fd947/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2290a0fec1ffaa96f33dcc79bef60ed3c00fd947/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=2290a0fec1ffaa96f33dcc79bef60ed3c00fd947", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -690,41 +690,6 @@ package body Exp_Attr is\n       Obj_Ref : Node_Id;\n       Curr    : Entity_Id;\n \n-      function May_Be_External_Call return Boolean;\n-      --  If the 'Access is to a local operation, but appears in a context\n-      --  where it may lead to a call from outside the object, we must treat\n-      --  this as an external call. Clearly we cannot tell without full\n-      --  flow analysis, and a subsequent call that uses this 'Access may\n-      --  lead to a bounded error (trying to seize locks twice, e.g.). For\n-      --  now we treat 'Access as a potential external call if it is an actual\n-      --  in a call to an outside subprogram.\n-\n-      --------------------------\n-      -- May_Be_External_Call --\n-      --------------------------\n-\n-      function May_Be_External_Call return Boolean is\n-         Subp : Entity_Id;\n-         Par  : Node_Id := Parent (N);\n-\n-      begin\n-         --  Account for the case where the Access attribute is part of a\n-         --  named parameter association.\n-\n-         if Nkind (Par) = N_Parameter_Association then\n-            Par := Parent (Par);\n-         end if;\n-\n-         if Nkind (Par) in N_Subprogram_Call\n-            and then Is_Entity_Name (Name (Par))\n-         then\n-            Subp := Entity (Name (Par));\n-            return not In_Open_Scopes (Scope (Subp));\n-         else\n-            return False;\n-         end if;\n-      end May_Be_External_Call;\n-\n    --  Start of processing for Expand_Access_To_Protected_Op\n \n    begin\n@@ -733,14 +698,14 @@ package body Exp_Attr is\n       --  protected body of the current enclosing operation.\n \n       if Is_Entity_Name (Pref) then\n-         if May_Be_External_Call then\n-            Sub :=\n-              New_Occurrence_Of (External_Subprogram (Entity (Pref)), Loc);\n-         else\n-            Sub :=\n-              New_Occurrence_Of\n-                (Protected_Body_Subprogram (Entity (Pref)), Loc);\n-         end if;\n+         --  All indirect calls are external calls, so must do locking and\n+         --  barrier reevaluation, even if the 'Access occurs within the\n+         --  protected body. Hence the call to External_Subprogram, as opposed\n+         --  to Protected_Body_Subprogram, below. See RM-9.5(5). This means\n+         --  that indirect calls from within the same protected body will\n+         --  deadlock, as allowed by RM-9.5.1(8,15,17).\n+\n+         Sub := New_Occurrence_Of (External_Subprogram (Entity (Pref)), Loc);\n \n          --  Don't traverse the scopes when the attribute occurs within an init\n          --  proc, because we directly use the _init formal of the init proc in"}, {"sha": "c16a4e29cf6caa805e070a264367e0b24a73c87c", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2290a0fec1ffaa96f33dcc79bef60ed3c00fd947/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2290a0fec1ffaa96f33dcc79bef60ed3c00fd947/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=2290a0fec1ffaa96f33dcc79bef60ed3c00fd947", "patch": "@@ -8034,18 +8034,22 @@ package body Freeze is\n             return;\n          end if;\n \n-         Decl := Next (Parent (Expr));\n-\n          --  If a pragma Import follows, we assume that it is for the current\n          --  target of the address clause, and skip the warning.\n \n-         if Present (Decl)\n-           and then Nkind (Decl) = N_Pragma\n-           and then Pragma_Name (Decl) = Name_Import\n-         then\n-            return;\n+         if Is_List_Member (Parent (Expr)) then\n+            Decl := Next (Parent (Expr));\n+\n+            if Present (Decl)\n+              and then Nkind (Decl) = N_Pragma\n+              and then Pragma_Name (Decl) = Name_Import\n+            then\n+               return;\n+            end if;\n          end if;\n \n+         --  Otherwise give warning message\n+\n          if Present (Old) then\n             Error_Msg_Node_2 := Old;\n             Error_Msg_N"}, {"sha": "0a7b1d3f083d9fee53d85661a10d1667a3a8a0fe", "filename": "gcc/ada/g-alveop.adb", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2290a0fec1ffaa96f33dcc79bef60ed3c00fd947/gcc%2Fada%2Fg-alveop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2290a0fec1ffaa96f33dcc79bef60ed3c00fd947/gcc%2Fada%2Fg-alveop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-alveop.adb?ref=2290a0fec1ffaa96f33dcc79bef60ed3c00fd947", "patch": "@@ -31,14 +31,6 @@\n \n with GNAT.Altivec.Low_Level_Interface; use GNAT.Altivec.Low_Level_Interface;\n \n-------------------------------------\n--- GNAT.Altivec.Vector_Operations --\n-------------------------------------\n-\n-------------------------------------\n--- GNAT.Altivec.Vector_Operations --\n-------------------------------------\n-\n package body GNAT.Altivec.Vector_Operations is\n \n    --------------------------------------------------------"}, {"sha": "ac745e7706decd529798561fa34285be150d739a", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2290a0fec1ffaa96f33dcc79bef60ed3c00fd947/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2290a0fec1ffaa96f33dcc79bef60ed3c00fd947/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=2290a0fec1ffaa96f33dcc79bef60ed3c00fd947", "patch": "@@ -5918,17 +5918,6 @@ package body Sem_Prag is\n             --  Get name from corresponding aspect\n \n             Error_Msg_Name_1 := Original_Aspect_Name (N);\n-\n-            if Class_Present (N) then\n-\n-               --  Replace the name with a leading underscore used\n-               --  internally, with a name that is more user-friendly.\n-\n-               if Error_Msg_Name_1 = Name_uType_Invariant then\n-                  Error_Msg_Name_1 := Name_Type_Invariant_Class;\n-               end if;\n-            end if;\n-\n          end if;\n \n          --  Return possibly modified message\n@@ -21897,16 +21886,9 @@ package body Sem_Prag is\n                --  Pre'Class/Post'Class aspect cases\n \n                if From_Aspect_Specification (Prag) then\n-                  if Nam = Name_uPre then\n-                     Error_Msg_Name_1 := Name_Pre;\n-                  else\n-                     Error_Msg_Name_1 := Name_Post;\n-                  end if;\n-\n-                  Error_Msg_Name_2 := Name_Class;\n-\n+                  Error_Msg_Name_1 := Nam;\n                   Error_Msg_N\n-                    (\"aspect `%''%` can only be specified for a primitive \"\n+                    (\"aspect% can only be specified for a primitive \"\n                      & \"operation of a tagged type\",\n                      Corresponding_Aspect (Prag));\n "}]}