{"sha": "2322c8b1b4429e85aa1caa6c6bbc46bb41e80178", "node_id": "C_kwDOANBUbNoAKDIzMjJjOGIxYjQ0MjllODVhYTFjYWE2YzZiYmM0NmJiNDFlODAxNzg", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-29T00:16:37Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-29T00:16:37Z"}, "message": "Daily bump.", "tree": {"sha": "37eeba65e36727e97f96ab3fd7141214018b4b15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37eeba65e36727e97f96ab3fd7141214018b4b15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2322c8b1b4429e85aa1caa6c6bbc46bb41e80178", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2322c8b1b4429e85aa1caa6c6bbc46bb41e80178", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2322c8b1b4429e85aa1caa6c6bbc46bb41e80178", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2322c8b1b4429e85aa1caa6c6bbc46bb41e80178/comments", "author": null, "committer": null, "parents": [{"sha": "6ef9ad930945b0912747f186f58ef446e7bf29c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ef9ad930945b0912747f186f58ef446e7bf29c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ef9ad930945b0912747f186f58ef446e7bf29c2"}], "stats": {"total": 258, "additions": 257, "deletions": 1}, "files": [{"sha": "420e9d78f2bcab92cd1677185946a7b42d9ca6a5", "filename": "ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2322c8b1b4429e85aa1caa6c6bbc46bb41e80178/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2322c8b1b4429e85aa1caa6c6bbc46bb41e80178/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=2322c8b1b4429e85aa1caa6c6bbc46bb41e80178", "patch": "@@ -1,3 +1,10 @@\n+2021-10-28  Richard Purdie  <richard.purdie@linuxfoundation.org>\n+\n+\t* Makefile.tpl: Add CPP_FOR_BUILD and CPPFLAGS_FOR_BUILD support\n+\t* Makefile.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.ac: Add CPP_FOR_BUILD and CPPFLAGS_FOR_BUILD support\n+\n 2021-10-26  Jeff Law  <jeffreyalaw@gmail.com>\n \n \t* MAINTAINERS: Fix up Maciej's entries."}, {"sha": "7feb03c27feefb401f7e7b6752aa436427d38295", "filename": "gcc/ChangeLog", "status": "modified", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2322c8b1b4429e85aa1caa6c6bbc46bb41e80178/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2322c8b1b4429e85aa1caa6c6bbc46bb41e80178/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2322c8b1b4429e85aa1caa6c6bbc46bb41e80178", "patch": "@@ -1,3 +1,156 @@\n+2021-10-28  Aldy Hernandez  <aldyh@redhat.com>\n+\t    Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* value-relation.cc (path_oracle::killing_def): Walk the\n+\tequivalency list and remove SSA from any equivalencies.\n+\n+2021-10-28  Stafford Horne  <shorne@gmail.com>\n+\n+\t* config/or1k/or1k.h (PROFILE_HOOK): Add return address argument\n+\tto _mcount.\n+\n+2021-10-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/102951\n+\t* fold-const.h (address_compare): Declare.\n+\t* fold-const.c (address_compare): New function.\n+\t* match.pd (cmp (convert1?@2 addr@0) (convert2? addr@1)): Use\n+\taddress_compare helper.\n+\t(minmax cmp (convert1?@2 addr@0) (convert2?@3 addr@1)): New\n+\tsimplification.\n+\n+2021-10-28  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* vr-values.c (simplify_using_ranges::fold_cond): Change fold message.\n+\n+2021-10-28  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/102940\n+\t* tree-vrp.c (execute_ranger_vrp): Reset scev.\n+\n+2021-10-28  Richard Purdie  <richard.purdie@linuxfoundation.org>\n+\n+\t* config/nios2/linux.h (MUSL_DYNAMIC_LINKER): Add musl linker\n+\n+2021-10-28  Richard Purdie  <richard.purdie@linuxfoundation.org>\n+\n+\t* configure: Regenerate.\n+\t* configure.ac: Use CPPFLAGS_FOR_BUILD for GMPINC\n+\n+2021-10-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/invoke.texi (%X): Remove obsolete reference to -Wl.\n+\n+2021-10-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/84407\n+\t* fold-const.c (fold_convert_const): Avoid int to float\n+\tconstant folding with -frounding-math and inexact result.\n+\t* simplify-rtx.c (simplify_const_unary_operation): Likewise\n+\tfor both float and unsigned_float.\n+\n+2021-10-28  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadbackward.c\n+\t(back_threader::find_taken_edge_switch): Use find_case_label_range\n+\tinstead of find_taken_edge.\n+\n+2021-10-28  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadbackward.c (class back_threader_registry):\n+\tInherit from back_jt_path_registry.\n+\t(back_threader_registry::thread_through_all_blocks): Remove.\n+\t(back_threader_registry::register_path): Remove\n+\tm_lowlevel_registry prefix.\n+\n+2021-10-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/57245\n+\t* fold-const.c (fold_convert_const_real_from_real): Honor\n+\t-frounding-math if the conversion is not exact.\n+\t* simplify-rtx.c (simplify_const_unary_operation): Do not\n+\tsimplify FLOAT_TRUNCATE with sign dependent rounding.\n+\n+2021-10-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102949\n+\t* tree-vect-stmts.c (ensure_base_align): Look at the\n+\tdr_info of a group leader and assert we are looking at\n+\tone with analyzed alignment.\n+\n+2021-10-28  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR target/102767\n+\t* config/rs6000/rs6000.c (rs6000_builtin_vectorization_cost): Consider\n+\tV1T1 mode for unaligned load and store.\n+\n+2021-10-28  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* config/riscv/riscv.md (zero_extendsidi2_internal): Allow ZBB\n+\tuse this pattern.\n+\n+2021-10-28  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* config/riscv/arch-canonicalize (CANONICAL_ORDER): Add `i` to\n+\tCANONICAL_ORDER.\n+\n+2021-10-28  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* common.opt (fharden-compares): New.\n+\t(fharden-conditional-branches): New.\n+\t* doc/invoke.texi: Document new options.\n+\t* gimple-harden-conditionals.cc: New.\n+\t* Makefile.in (OBJS): Build it.\n+\t* passes.def: Add new passes.\n+\t* tree-pass.h (make_pass_harden_compares): Declare.\n+\t(make_pass_harden_conditional_branches): Declare.\n+\n+2021-10-28  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\tPR target/94613\n+\t* config/rs6000/altivec.md: Add vsx register constraints.\n+\t* config/rs6000/vsx.md (vsx_xxsel<mode>): Delete.\n+\t(vsx_xxsel<mode>2): Likewise.\n+\t(vsx_xxsel<mode>3): Likewise.\n+\t(vsx_xxsel<mode>4): Likewise.\n+\n+2021-10-28  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\tPR target/94613\n+\t* config/rs6000/altivec.md (*altivec_vsel<mode>): Change to ...\n+\t(altivec_vsel<mode>): ... this and update define.\n+\t(*altivec_vsel<mode>_uns): Delete.\n+\t(altivec_vsel<mode>2): New define_insn.\n+\t(altivec_vsel<mode>3): Likewise.\n+\t(altivec_vsel<mode>4): Likewise.\n+\t* config/rs6000/rs6000-call.c (altivec_expand_vec_sel_builtin): New.\n+\t(altivec_expand_builtin): Call altivec_expand_vec_sel_builtin to expand\n+\tvel_sel.\n+\t* config/rs6000/rs6000.c (rs6000_emit_vector_cond_expr): Use bit-wise\n+\tselection instead of per element.\n+\t* config/rs6000/vector.md:\n+\t* config/rs6000/vsx.md (*vsx_xxsel<mode>): Change to ...\n+\t(vsx_xxsel<mode>): ... this and update define.\n+\t(*vsx_xxsel<mode>_uns): Delete.\n+\t(vsx_xxsel<mode>2): New define_insn.\n+\t(vsx_xxsel<mode>3): Likewise.\n+\t(vsx_xxsel<mode>4): Likewise.\n+\n+2021-10-28  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* config/i386/i386.c (use_rsqrt_p): Add mode parameter, enable\n+\t  HFmode rsqrt without TARGET_SSE_MATH.\n+\t(ix86_optab_supported_p): Refactor rint, adjust floor, ceil,\n+\tbtrunc condition to be restricted by -ftrapping-math, adjust\n+\tuse_rsqrt_p function call.\n+\t* config/i386/i386.md (rcphf2): New define_insn.\n+\t(rsqrthf2): Likewise.\n+\t* config/i386/sse.md (div<mode>3): Change VF2H to VF2.\n+\t(div<mode>3): New expander for HF mode.\n+\t(rsqrt<mode>2): Likewise.\n+\t(*avx512fp16_vmrcpv8hf2): New define_insn for rpad pass.\n+\t(*avx512fp16_vmrsqrtv8hf2): Likewise.\n+\n 2021-10-27  Saagar Jha  <saagar@saagarjha.com>\n \n \t* config.gcc: Adjust for Darwin21."}, {"sha": "2b0e14155ab9327e961dadecaea55ef9578cc252", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2322c8b1b4429e85aa1caa6c6bbc46bb41e80178/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2322c8b1b4429e85aa1caa6c6bbc46bb41e80178/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=2322c8b1b4429e85aa1caa6c6bbc46bb41e80178", "patch": "@@ -1 +1 @@\n-20211028\n+20211029"}, {"sha": "a298881b779de559fa9f3033d2202ef30bef7705", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2322c8b1b4429e85aa1caa6c6bbc46bb41e80178/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2322c8b1b4429e85aa1caa6c6bbc46bb41e80178/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2322c8b1b4429e85aa1caa6c6bbc46bb41e80178", "patch": "@@ -1,3 +1,8 @@\n+2021-10-28  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* doc/gnat_rm/security_hardening_features.rst\n+\t(Hardened Conditionals): New.\n+\n 2021-10-25  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gcc-interface/Make-lang.in, gcc-interface/Makefile.in: Remove"}, {"sha": "db9d1c14699efff1a2a3ae32fb3cb9061c751dcd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2322c8b1b4429e85aa1caa6c6bbc46bb41e80178/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2322c8b1b4429e85aa1caa6c6bbc46bb41e80178/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2322c8b1b4429e85aa1caa6c6bbc46bb41e80178", "patch": "@@ -1,3 +1,27 @@\n+2021-10-28  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/102933\n+\t* parser.c (cp_parser_simple_type_specifier): Adjust diagnostic\n+\tfor using auto in parameter declaration.\n+\t* pt.c (extract_autos_r): Ignore CTAD placeholders.\n+\t(extract_autos): Use range-based for.\n+\t(do_auto_deduction): Use extract_autos only for the concepts TS\n+\tand not also for standard concepts.\n+\t(type_uses_auto): Likewise with for_each_template_parm.\n+\t(check_auto_in_tmpl_args): Just return false outside of the\n+\tconcepts TS.  Simplify.\n+\n+2021-10-28  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/102780\n+\t* constexpr.c (potential_constant_expression_1) <case TRUTH_*_EXPR>:\n+\tWhen tf_error isn't set, preemptively check potentiality of the\n+\tsecond operand before performing trial evaluation of the first\n+\toperand.\n+\t(potential_constant_expression_1): When tf_error is set, first check\n+\tpotentiality quietly and return true if successful, otherwise\n+\tproceed noisily to give errors.\n+\n 2021-10-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/102854"}, {"sha": "9e3462bf94e0d5df4c5d33097b5579bfd02ec384", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2322c8b1b4429e85aa1caa6c6bbc46bb41e80178/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2322c8b1b4429e85aa1caa6c6bbc46bb41e80178/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2322c8b1b4429e85aa1caa6c6bbc46bb41e80178", "patch": "@@ -1,3 +1,70 @@\n+2021-10-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/102951\n+\t* gcc.dg/tree-ssa/pr102951.c: New test.\n+\t* gcc.dg/Wstringop-overflow-62.c: Adjust expected diagnostics.\n+\n+2021-10-28  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/ifcvt-4.c: Adjust.\n+\n+2021-10-28  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/evrp9.c: Adjust message scanned for.\n+\t* gcc.dg/tree-ssa/pr21458-2.c: Ditto.\n+\n+2021-10-28  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/102933\n+\t* g++.dg/cpp2a/nontype-class50.C: New test.\n+\t* g++.dg/cpp2a/nontype-class50a.C: New test.\n+\n+2021-10-28  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/102780\n+\t* g++.dg/cpp1z/fold13.C: New test.\n+\n+2021-10-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/84407\n+\t* gcc.dg/torture/fp-uint64-convert-double-1.c: New testcase.\n+\t* gcc.dg/torture/fp-uint64-convert-double-2.c: Likewise.\n+\n+2021-10-28  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/vrp106.c: Adjust for threading.\n+\t* gcc.dg/tree-ssa/vrp113.c: Same.\n+\n+2021-10-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/57245\n+\t* gcc.dg/torture/fp-double-convert-float-1.c: New testcase.\n+\n+2021-10-28  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR target/102767\n+\t* gcc.target/powerpc/ppc-fortran/pr102767.f90: New file.\n+\n+2021-10-28  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* c-c++-common/torture/harden-comp.c: New.\n+\t* c-c++-common/torture/harden-cond.c: New.\n+\n+2021-10-28  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/builtins-1.c: Adjust.\n+\n+2021-10-28  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\tPR target/94613\n+\t* gcc.target/powerpc/pr94613.c: New test.\n+\n+2021-10-28  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-recip-1.c: New test.\n+\t* gcc.target/i386/avx512fp16-recip-2.c: Ditto.\n+\t* gcc.target/i386/pr102464.c: Add -fno-trapping-math.\n+\n 2021-10-27  Martin Sebor  <msebor@redhat.com>\n \n \t* gcc.dg/Warray-bounds-90.c: Fix a typo."}]}