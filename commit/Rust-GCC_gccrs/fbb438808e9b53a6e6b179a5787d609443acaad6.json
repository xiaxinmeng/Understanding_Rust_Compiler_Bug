{"sha": "fbb438808e9b53a6e6b179a5787d609443acaad6", "node_id": "C_kwDOANBUbNoAKGZiYjQzODgwOGU5YjUzYTZlNmIxNzlhNTc4N2Q2MDk0NDNhY2FhZDY", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2019-09-20T20:53:10Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-01-17T07:57:20Z"}, "message": "Test cases for references in OpenACC 'private' clauses\n\n\tlibgomp/\n\t* testsuite/libgomp.oacc-fortran/privatized-ref-1.f95: New test.\n\t* testsuite/libgomp.oacc-c++/privatized-ref-2.C: New test.\n\t* testsuite/libgomp.oacc-c++/privatized-ref-3.C: New test.\n\nCo-authored-by: Thomas Schwinge <thomas@codesourcery.com>", "tree": {"sha": "b051bbb82e3de22737ca797ecb4fa4223d30f8b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b051bbb82e3de22737ca797ecb4fa4223d30f8b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbb438808e9b53a6e6b179a5787d609443acaad6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbb438808e9b53a6e6b179a5787d609443acaad6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbb438808e9b53a6e6b179a5787d609443acaad6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbb438808e9b53a6e6b179a5787d609443acaad6/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "025a707d285832cec91c28811db02b74cd08a59a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/025a707d285832cec91c28811db02b74cd08a59a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/025a707d285832cec91c28811db02b74cd08a59a"}], "stats": {"total": 211, "additions": 211, "deletions": 0}, "files": [{"sha": "7091091cac2f051eefc1424a7d86bae9b8e89029", "filename": "libgomp/testsuite/libgomp.oacc-c++/privatized-ref-2.C", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbb438808e9b53a6e6b179a5787d609443acaad6/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fprivatized-ref-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbb438808e9b53a6e6b179a5787d609443acaad6/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fprivatized-ref-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fprivatized-ref-2.C?ref=fbb438808e9b53a6e6b179a5787d609443acaad6", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+\n+void workers (void)\n+{\n+  double res[65536];\n+  int i;\n+\n+#pragma acc parallel copyout(res) num_gangs(64) num_workers(64)\n+  /* { dg-warning \"using num_workers \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } .-1 } */\n+  {\n+    int i, j;\n+#pragma acc loop gang\n+    for (i = 0; i < 256; i++)\n+      {\n+#pragma acc loop worker\n+\tfor (j = 0; j < 256; j++)\n+\t  {\n+\t    int tmpvar;\n+\t    int &tmpref = tmpvar;\n+\t    tmpref = (i * 256 + j) * 99;\n+\t    res[i * 256 + j] = tmpref;\n+\t  }\n+      }\n+  }\n+\n+  for (i = 0; i < 65536; i++)\n+    if (res[i] != i * 99)\n+      abort ();\n+}\n+\n+void vectors (void)\n+{\n+  double res[65536];\n+  int i;\n+\n+#pragma acc parallel copyout(res) num_gangs(64) num_workers(64)\n+  /* { dg-warning \"using num_workers \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } .-1 } */\n+  {\n+    int i, j;\n+#pragma acc loop gang worker\n+    for (i = 0; i < 256; i++)\n+      {\n+#pragma acc loop vector\n+\tfor (j = 0; j < 256; j++)\n+\t  {\n+\t    int tmpvar;\n+\t    int &tmpref = tmpvar;\n+\t    tmpref = (i * 256 + j) * 101;\n+\t    res[i * 256 + j] = tmpref;\n+\t  }\n+      }\n+  }\n+\n+  for (i = 0; i < 65536; i++)\n+    if (res[i] != i * 101)\n+      abort ();\n+}\n+\n+int main (int argc, char *argv[])\n+{\n+  workers ();\n+  vectors ();\n+  return 0;\n+}"}, {"sha": "478876e35960687820cb41b558ecb66a88f69494", "filename": "libgomp/testsuite/libgomp.oacc-c++/privatized-ref-3.C", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbb438808e9b53a6e6b179a5787d609443acaad6/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fprivatized-ref-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbb438808e9b53a6e6b179a5787d609443acaad6/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fprivatized-ref-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fprivatized-ref-3.C?ref=fbb438808e9b53a6e6b179a5787d609443acaad6", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do run } */\n+\n+/*TODO\n+   { dg-xfail-run-if TODO { openacc_radeon_accel_selected && { ! __OPTIMIZE__ } } } */\n+\n+#include <stdlib.h>\n+\n+void workers (void)\n+{\n+  double res[65536];\n+  int i;\n+\n+#pragma acc parallel copyout(res) num_gangs(64) num_workers(64)\n+  /* { dg-warning \"using num_workers \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } .-1 } */\n+  {\n+    int i, j;\n+    int tmpvar;\n+    int &tmpref = tmpvar;\n+#pragma acc loop gang\n+    for (i = 0; i < 256; i++)\n+      {\n+#pragma acc loop worker private(tmpref)\n+\tfor (j = 0; j < 256; j++)\n+\t  {\n+\t    tmpref = (i * 256 + j) * 99;\n+\t    res[i * 256 + j] = tmpref;\n+\t  }\n+      }\n+  }\n+\n+  for (i = 0; i < 65536; i++)\n+    if (res[i] != i * 99)\n+      abort ();\n+}\n+\n+void vectors (void)\n+{\n+  double res[65536];\n+  int i;\n+\n+#pragma acc parallel copyout(res) num_gangs(64) num_workers(64)\n+  /* { dg-warning \"using num_workers \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } .-1 } */\n+  {\n+    int i, j;\n+    int tmpvar;\n+    int &tmpref = tmpvar;\n+#pragma acc loop gang worker\n+    for (i = 0; i < 256; i++)\n+      {\n+#pragma acc loop vector private(tmpref)\n+\tfor (j = 0; j < 256; j++)\n+\t  {\n+\t    tmpref = (i * 256 + j) * 101;\n+\t    res[i * 256 + j] = tmpref;\n+\t  }\n+      }\n+  }\n+\n+  for (i = 0; i < 65536; i++)\n+    if (res[i] != i * 101)\n+      abort ();\n+}\n+\n+int main (int argc, char *argv[])\n+{\n+  workers ();\n+  vectors ();\n+  return 0;\n+}"}, {"sha": "bb0910b1006e9ce4605092a7b01dbb94c9c351f9", "filename": "libgomp/testsuite/libgomp.oacc-fortran/privatized-ref-1.f95", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbb438808e9b53a6e6b179a5787d609443acaad6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-1.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbb438808e9b53a6e6b179a5787d609443acaad6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-1.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-1.f95?ref=fbb438808e9b53a6e6b179a5787d609443acaad6", "patch": "@@ -0,0 +1,76 @@\n+! { dg-do run }\n+\n+!TODO\n+! { dg-xfail-run-if TODO { openacc_radeon_accel_selected && { ! __OPTIMIZE__ } } }\n+\n+program main\n+  implicit none\n+  integer :: myint\n+  integer :: i\n+  real :: res(65536), tmp\n+\n+  res(:) = 0.0\n+\n+  myint = 5\n+  call workers(myint, res)\n+\n+  do i=1,65536\n+    tmp = i * 99\n+    if (res(i) .ne. tmp) stop 1\n+  end do\n+\n+  res(:) = 0.0\n+\n+  myint = 7\n+  call vectors(myint, res)\n+\n+  do i=1,65536\n+    tmp = i * 101\n+    if (res(i) .ne. tmp) stop 2\n+  end do\n+\n+contains\n+\n+  subroutine workers(t1, res)\n+    implicit none\n+    integer :: t1\n+    integer :: i, j\n+    real, intent(out) :: res(:)\n+\n+    !$acc parallel copyout(res) num_gangs(64) num_workers(64)\n+    ! { dg-warning \"using num_workers \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } .-1 }\n+\n+    !$acc loop gang\n+    do i=0,255\n+      !$acc loop worker private(t1)\n+      do j=1,256\n+        t1 = (i * 256 + j) * 99\n+        res(i * 256 + j) = t1\n+      end do\n+    end do\n+\n+    !$acc end parallel\n+  end subroutine workers\n+\n+  subroutine vectors(t1, res)\n+    implicit none\n+    integer :: t1\n+    integer :: i, j\n+    real, intent(out) :: res(:)\n+\n+    !$acc parallel copyout(res) num_gangs(64) num_workers(64)\n+    ! { dg-warning \"using num_workers \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } .-1 }\n+\n+    !$acc loop gang worker\n+    do i=0,255\n+      !$acc loop vector private(t1)\n+      do j=1,256\n+        t1 = (i * 256 + j) * 101\n+        res(i * 256 + j) = t1\n+      end do\n+    end do\n+\n+    !$acc end parallel\n+  end subroutine vectors\n+\n+end program main"}]}