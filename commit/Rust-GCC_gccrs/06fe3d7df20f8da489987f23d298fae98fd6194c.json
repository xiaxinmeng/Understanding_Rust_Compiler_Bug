{"sha": "06fe3d7df20f8da489987f23d298fae98fd6194c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZmZTNkN2RmMjBmOGRhNDg5OTg3ZjIzZDI5OGZhZTk4ZmQ2MTk0Yw==", "commit": {"author": {"name": "Fernando Nasser", "email": "fnasser@redhat.com", "date": "2004-01-08T21:12:25Z"}, "committer": {"name": "Fernando Nasser", "email": "fnasser@gcc.gnu.org", "date": "2004-01-08T21:12:25Z"}, "message": "GtkFileDialogPeer.java (nativeSetFile): New name for the former setFile native method.\n\n        * gnu/java/awt/peer/gtk/GtkFileDialogPeer.java (nativeSetFile):\n        New name for the former setFile native method.\n        (setFile): New method.\n        (setDirectory): Implemented.\n        (connectSignals): New native method.\n        (setFilenameFilter): Improve comment.\n        (getGraphics): Comment.\n        (gtkHideFileDialog): New method.\n        (gtkDisposeFileDialog): New method.\n        (gtkSetFilename): New method.\n        * java/awt/Dialog.java (show): Block on modal dialogs, but only\n        for FileDialog for now.\n        (hide): New method.\n        (dispose): New method.\n        * jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.c\n        (Java_gnu_java_awt_peer_gtk_GtkFileDialog_create): Replace\n        deprecated creation functions.  Make dialog modal.  Add it to the\n        window group.\n        (Java_gnu_java_awt_peer_gtk_GtkFileDialog_connectSignals): New\n        function.\n        (Java_gnu_java_awt_peer_gtk_GtkFileDialogPeer_gtkFileSelectionSetFilename):\n        Rename to...\n        (Java_gnu_java_awt_peer_gtk_GtkFileDialogPeer_nativeSetFile): New\n        name.\n        (window_closed): New function.\n        (ok_clicked): New function.\n        (cancel_clicked): New function.\n\nFrom-SVN: r75557", "tree": {"sha": "240ed2d35f3bb8323d793e3af65083d1f6585530", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/240ed2d35f3bb8323d793e3af65083d1f6585530"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06fe3d7df20f8da489987f23d298fae98fd6194c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06fe3d7df20f8da489987f23d298fae98fd6194c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06fe3d7df20f8da489987f23d298fae98fd6194c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06fe3d7df20f8da489987f23d298fae98fd6194c/comments", "author": {"login": "fnasser", "id": 326533, "node_id": "MDQ6VXNlcjMyNjUzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/326533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fnasser", "html_url": "https://github.com/fnasser", "followers_url": "https://api.github.com/users/fnasser/followers", "following_url": "https://api.github.com/users/fnasser/following{/other_user}", "gists_url": "https://api.github.com/users/fnasser/gists{/gist_id}", "starred_url": "https://api.github.com/users/fnasser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fnasser/subscriptions", "organizations_url": "https://api.github.com/users/fnasser/orgs", "repos_url": "https://api.github.com/users/fnasser/repos", "events_url": "https://api.github.com/users/fnasser/events{/privacy}", "received_events_url": "https://api.github.com/users/fnasser/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d779bc04df45cfe9c5595bfcaeeddeaf66e7537c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d779bc04df45cfe9c5595bfcaeeddeaf66e7537c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d779bc04df45cfe9c5595bfcaeeddeaf66e7537c"}], "stats": {"total": 399, "additions": 386, "deletions": 13}, "files": [{"sha": "943473419263079e8b07c500117eb9c9a3c2b079", "filename": "libjava/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06fe3d7df20f8da489987f23d298fae98fd6194c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06fe3d7df20f8da489987f23d298fae98fd6194c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=06fe3d7df20f8da489987f23d298fae98fd6194c", "patch": "@@ -1,3 +1,33 @@\n+2004-01-08  Fernando Nasser  <fnasser@redhat.com>\n+\n+\t* gnu/java/awt/peer/gtk/GtkFileDialogPeer.java (nativeSetFile):\n+\tNew name for the former setFile native method.\n+\t(setFile): New method.\n+\t(setDirectory): Implemented.\n+\t(connectSignals): New native method.\n+\t(setFilenameFilter): Improve comment.\n+\t(getGraphics): Comment.\n+\t(gtkHideFileDialog): New method.\n+\t(gtkDisposeFileDialog): New method.\n+\t(gtkSetFilename): New method.\n+\t* java/awt/Dialog.java (show): Block on modal dialogs, but only\n+\tfor FileDialog for now.\n+\t(hide): New method.\n+\t(dispose): New method.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkFileDialog_create): Replace\n+\tdeprecated creation functions.  Make dialog modal.  Add it to the\n+\twindow group.\n+\t(Java_gnu_java_awt_peer_gtk_GtkFileDialog_connectSignals): New\n+\tfunction.\n+\t(Java_gnu_java_awt_peer_gtk_GtkFileDialogPeer_gtkFileSelectionSetFilename):\n+\tRename to...\n+\t(Java_gnu_java_awt_peer_gtk_GtkFileDialogPeer_nativeSetFile): New\n+\tname.\n+\t(window_closed): New function.\n+\t(ok_clicked): New function.\n+\t(cancel_clicked): New function.\n+\n 2004-01-08  Michael Koch  <konqueror@gmx.de>\n \n \t* javax/swing/JLayeredPane.java: Revert changes to standard"}, {"sha": "dc2c8b0be9c3b84c1dd59ad1b250a7dfaeaa29e4", "filename": "libjava/gnu/java/awt/peer/gtk/GtkFileDialogPeer.java", "status": "modified", "additions": 126, "deletions": 5, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06fe3d7df20f8da489987f23d298fae98fd6194c/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkFileDialogPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06fe3d7df20f8da489987f23d298fae98fd6194c/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkFileDialogPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkFileDialogPeer.java?ref=06fe3d7df20f8da489987f23d298fae98fd6194c", "patch": "@@ -38,35 +38,156 @@\n \n package gnu.java.awt.peer.gtk;\n \n+import java.awt.AWTEvent;\n+import java.awt.Dialog;\n import java.awt.FileDialog;\n import java.awt.Graphics;\n+import java.awt.event.WindowEvent;\n import java.awt.peer.FileDialogPeer;\n import java.io.FilenameFilter;\n \n public class GtkFileDialogPeer extends GtkDialogPeer implements FileDialogPeer\n {\n+  static final String FS = System.getProperty(\"file.separator\");\n+  \n+  private String currentFile = null;\n+  private String currentDirectory = null;\n+\n   native void create ();\n \n   public GtkFileDialogPeer (FileDialog fd)\n   {\n     super (fd);\n   }\n \n-  public void setDirectory (String directory)\n+  native void connectJObject ();\n+  native void connectSignals ();\n+  native void nativeSetFile (String file);\n+\n+  public void setFile (String fileName)\n   {\n-    setFile (directory);\n+    /* If nothing changed do nothing.  This usually happens because\n+       the only way we have to set the file name in FileDialog is by\n+       calling its SetFile which will call us back. */\n+    if ((fileName == null && currentFile == null)\n+        || (fileName != null && fileName.equals (currentFile)))\n+      return;\n+\n+    if (fileName == null || fileName.equals (\"\"))\n+      {\n+        currentFile = \"\";\n+        nativeSetFile (\"\");\n+        return;\n+      }\n+\n+    // Remove any directory path from the filename\n+    int sepIndex = fileName.lastIndexOf (FS);\n+    if (sepIndex < 0)\n+      {\n+        currentFile = fileName;\n+        nativeSetFile (fileName);\n+      }\n+    else\n+      {\n+        if (fileName.length() > (sepIndex + 1))\n+\t  {\n+\t    String fn = fileName.substring (sepIndex + 1);\n+            currentFile = fn;\n+            nativeSetFile (fn);\n+\t  }\n+\telse\n+\t  {\n+            currentFile = \"\";\n+            nativeSetFile (\"\");\n+\t  }\n+      }\n   }\n \n-  public native void setFile (String file);\n-  public native void connectJObject ();\n+  public void setDirectory (String directory)\n+  {\n+    /* If nothing changed so nothing.  This usually happens because\n+       the only way we have to set the directory in FileDialog is by\n+       calling its setDirectory which will call us back. */\n+    if ((directory == null && currentDirectory == null)\n+        || (directory != null && directory.equals (currentDirectory)))\n+      return;\n+\n+    if (directory == null || directory.equals (\"\"))\n+      {\n+        currentDirectory = FS;\n+        nativeSetFile (FS);\n+\treturn;\n+      }\n+      \n+    currentDirectory = directory;\n+\n+    // Gtk expects the directory to end with a file separator\n+    if (directory.substring (directory.length () - 1).equals (FS))\n+      nativeSetFile (directory);\n+    else\n+      nativeSetFile (directory + FS);\n+  }\n \n   public void setFilenameFilter (FilenameFilter filter)\n   {\n-    /* GTK has no filters. */\n+    /* GTK has no filter callbacks yet.  It works by setting a pattern\n+     * (see gtk_file_selection_complete), which we can't convert\n+     * to the callback paradigm. With GTK-2.4 there will be a\n+     * gtk_file_filter_add_custom function that we can use. */\n   }\n \n   public Graphics getGraphics ()\n   {\n+    // GtkFileDialog will repaint by itself\n     return null;\n   }\n+  \n+  void gtkHideFileDialog () \n+  {\n+    ((Dialog) awtComponent).hide();\n+  }\n+  \n+  void gtkDisposeFileDialog () \n+  {\n+    ((Dialog) awtComponent).dispose();\n+  }\n+\n+  /* Callback to set the file and directory values when the user is finished\n+   * with the dialog.\n+   */\n+  void gtkSetFilename (String fileName)\n+  {\n+    FileDialog fd = (FileDialog) awtWidget;\n+    if (fileName == null)\n+      {\n+        currentFile = null;\n+        fd.setFile(null);\n+        return;\n+      }\n+\n+    int sepIndex = fileName.lastIndexOf (FS);\n+    if (sepIndex < 0)\n+      {\n+        /* This should never happen on Unix (all paths start with '/') */\n+\tcurrentFile = fileName;\n+      }\n+    else\n+      {\n+        if (fileName.length() > (sepIndex + 1))\n+\t  {\n+\t    String fn = fileName.substring (sepIndex + 1);\n+\t    currentFile = fn;\n+\t  }\n+\telse\n+\t  {\n+            currentFile = null;\n+\t  }\n+\n+        String dn = fileName.substring (0, sepIndex + 1);\n+        currentDirectory = dn;\n+        fd.setDirectory(dn);\n+      }\n+\n+    fd.setFile (currentFile);\n+  }\n }"}, {"sha": "fd1eb4fbc222187233f6111dcb1ea6a04be9c6d8", "filename": "libjava/java/awt/Dialog.java", "status": "modified", "additions": 77, "deletions": 5, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06fe3d7df20f8da489987f23d298fae98fd6194c/libjava%2Fjava%2Fawt%2FDialog.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06fe3d7df20f8da489987f23d298fae98fd6194c/libjava%2Fjava%2Fawt%2FDialog.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FDialog.java?ref=06fe3d7df20f8da489987f23d298fae98fd6194c", "patch": "@@ -78,10 +78,15 @@ public class Dialog extends Window\n   */\n private String title;\n \n-  /**\n-   * This field indicates whether the dialog is undecorated or not.\n-   */\n-  private boolean undecorated = false;\n+/**\n+  * This field indicates whether the dialog is undecorated or not.\n+  */\n+private boolean undecorated = false;\n+\n+/**\n+  * Indicates that we are blocked for modality in show\n+  */\n+private boolean blocked = false;\n \n /*************************************************************************/\n \n@@ -380,11 +385,78 @@ public class Dialog extends Window\n \n /**\n   * Makes this dialog visible and brings it to the front.\n+  * If the dialog is modal and is not already visible, this call will not\n+  *  return until the dialog is hidden by someone calling hide or dispose.\n+  * If this is the event dispatching thread we must ensure that another event\n+  *  thread runs while the one which invoked this method is blocked. \n   */\n-public void\n+public synchronized void\n show()\n {\n   super.show();\n+  if (isModal())\n+    {\n+      // If already shown (and blocked) just return\n+      if (blocked)\n+\treturn;\n+\n+      /* FIXME: Currently this thread may block forever if it called from\n+         the event dispatch thread, so we only do this for FileDialog which\n+         only depends on a signal which is delivered in the Gtk thread.\n+         Remove this test when we add code to start another event\n+         dispatch thread. */\n+      if ((Thread.currentThread () instanceof EventDispatchThread) &&\n+          !(this instanceof FileDialog))\n+        return;\n+      \n+      try \n+        {\n+\t  blocked = true;\n+\t  wait ();\n+\t  blocked = false;\n+        } \n+      catch (InterruptedException e)\n+        {\n+\t  blocked = false;\n+\t  return;\n+        }\n+    }  \n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Hides the Dialog and then\n+  * causes show() to return if it is currently blocked.\n+  */\n+\n+public synchronized void \n+hide ()\n+{\n+  if (blocked)\n+    {\n+      notifyAll ();\n+    }\n+\n+  super.hide();\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Disposes the Dialog and then causes show() to return\n+  * if it is currently blocked.\n+  */\n+\n+public synchronized void \n+dispose ()\n+{\n+  if (blocked)\n+    {\n+      notifyAll ();\n+    }\n+\n+  super.dispose();\n }\n \n /*************************************************************************/"}, {"sha": "9e84dde1b6e3aecafe3719d2b32b8c78be30ee70", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.c", "status": "modified", "additions": 153, "deletions": 3, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06fe3d7df20f8da489987f23d298fae98fd6194c/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkFileDialogPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06fe3d7df20f8da489987f23d298fae98fd6194c/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkFileDialogPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkFileDialogPeer.c?ref=06fe3d7df20f8da489987f23d298fae98fd6194c", "patch": "@@ -37,8 +37,17 @@ exception statement from your version. */\n \n \n #include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkComponentPeer.h\"\n #include \"gnu_java_awt_peer_gtk_GtkFileDialogPeer.h\"\n \n+static void window_closed (GtkDialog *dialog,\n+                           gint responseId,\n+                           jobject peer_obj);\n+static void ok_clicked (GtkButton *button,\n+\t                jobject peer_obj);\n+static void cancel_clicked (GtkButton *button,\n+\t                    jobject peer_obj);\n+\n /*\n  * Make a new file selection dialog\n  */\n@@ -54,7 +63,13 @@ Java_gnu_java_awt_peer_gtk_GtkFileDialogPeer_create\n \n   gdk_threads_enter ();\n   \n-  widget = gtk_type_new (gtk_file_selection_get_type ());\n+  widget = gtk_file_selection_new (\"\");\n+  /* GtkFileSelect is not modal by default */\n+  gtk_window_set_modal (GTK_WINDOW (widget), TRUE);\n+\n+  /* We must add this window to the group so input in the others are\n+     disable while it is being shown */\n+  gtk_window_group_add_window (global_gtk_window_group, GTK_WINDOW (widget));\n \n   gdk_threads_leave ();\n \n@@ -76,22 +91,157 @@ Java_gnu_java_awt_peer_gtk_GtkFileDialogPeer_connectJObject\n   gdk_threads_leave ();\n }\n \n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkFileDialogPeer_connectSignals\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr = NSA_GET_PTR (env, obj);\n+  jobject *gref = NSA_GET_GLOBAL_REF (env, obj);\n+  g_assert (gref);\n+\n+  gdk_threads_enter ();\n+\n+  gtk_widget_realize (GTK_WIDGET (ptr));\n+\n+  /* connect buttons to handlers */\n+\n+  g_signal_connect (G_OBJECT (GTK_DIALOG (ptr)),\n+                    \"response\", \n+\t\t    GTK_SIGNAL_FUNC (window_closed), *gref);\n+\n+  g_signal_connect (G_OBJECT (GTK_FILE_SELECTION (ptr)->ok_button),\n+                    \"clicked\", \n+\t\t    GTK_SIGNAL_FUNC (ok_clicked), *gref);\n+\n+  g_signal_connect (G_OBJECT (GTK_FILE_SELECTION (ptr)->cancel_button),\n+                    \"clicked\", \n+\t\t    GTK_SIGNAL_FUNC (cancel_clicked), *gref);\n+\t\t    \n+  gdk_threads_leave ();\n+\n+  /* Connect the superclass signals.  */\n+  Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals (env, obj);\n+}\n+\n /*\n  * Set the filename in the file selection dialog.\n  */\n \n JNIEXPORT void JNICALL \n-Java_gnu_java_awt_peer_gtk_GtkFileDialogPeer_gtkFileSelectionSetFilename \n+Java_gnu_java_awt_peer_gtk_GtkFileDialogPeer_nativeSetFile \n     (JNIEnv *env, jobject obj, jstring filename)\n {\n   void *ptr;\n   const char *str;\n \n   ptr = NSA_GET_PTR (env, obj);\n     \n-  str = (*env)->GetStringUTFChars (env, filename, 0);      \n+  str = (*env)->GetStringUTFChars (env, filename, 0);\n+     \n   gdk_threads_enter ();\n+\n   gtk_file_selection_set_filename (GTK_FILE_SELECTION (ptr), str);\n+\n   gdk_threads_leave ();\n+\n   (*env)->ReleaseStringUTFChars (env, filename, str);\n }\n+\n+static void\n+window_closed (GtkDialog *dialog __attribute__((unused)),\n+               gint responseId,\n+               jobject peer_obj)\n+{\n+  static int isIDSet = 0;\n+  static jmethodID disposeID;\n+  void *ptr;\n+\n+  // We only need this for the case when the user closed the window\n+  if (responseId != GTK_RESPONSE_DELETE_EVENT)\n+    return;\n+\n+  ptr = NSA_GET_PTR (gdk_env, peer_obj);\n+  \n+  if (!isIDSet)\n+    {\n+      jclass cx = (*gdk_env)->GetObjectClass (gdk_env, peer_obj);\n+      disposeID = (*gdk_env)->GetMethodID (gdk_env, cx, \"gtkDisposeFileDialog\", \"()V\");\n+      isIDSet = 1;\n+    }\n+    \n+  gdk_threads_leave ();\n+\n+  /* We can dispose of the dialog now (and unblock show) */\n+  (*gdk_env)->CallVoidMethod (gdk_env, peer_obj, disposeID);\n+\n+  gdk_threads_enter ();\n+}\n+\n+static void\n+ok_clicked (GtkButton *button __attribute__((unused)),\n+\t                jobject peer_obj)\n+{\n+  static int isIDSet = 0;\n+  static jmethodID gtkSetFilenameID;\n+  static jmethodID hideID;\n+  void *ptr;\n+  G_CONST_RETURN gchar *fileName;\n+\n+  ptr = NSA_GET_PTR (gdk_env, peer_obj);\n+  \n+  fileName = gtk_file_selection_get_filename (\n+               GTK_FILE_SELECTION (GTK_WIDGET (ptr)));\n+  \n+  if (!isIDSet)\n+    {\n+      jclass cx = (*gdk_env)->GetObjectClass (gdk_env, peer_obj);\n+      hideID = (*gdk_env)->GetMethodID (gdk_env, cx, \"gtkHideFileDialog\", \"()V\");\n+      gtkSetFilenameID = (*gdk_env)->GetMethodID (gdk_env, cx,\n+                                   \"gtkSetFilename\", \"(Ljava.lang.String;)V\");\n+      isIDSet = 1;\n+    }\n+    \n+  gdk_threads_leave ();\n+  \n+  /* Set the Java object field 'file' with this value. */\n+  jstring str_fileName = (*gdk_env)->NewStringUTF (gdk_env, fileName);\n+  (*gdk_env)->CallVoidMethod (gdk_env, peer_obj, gtkSetFilenameID, str_fileName);\n+\n+  /* We can hide the dialog now (and unblock show) */\n+  (*gdk_env)->CallVoidMethod (gdk_env, peer_obj, hideID);\n+\n+  gdk_threads_enter ();\n+}\n+\n+static void\n+cancel_clicked (GtkButton *button __attribute__((unused)),\n+\t                    jobject peer_obj)\n+{\n+  static int isIDSet = 0;\n+  static jmethodID gtkSetFilenameID;\n+  static jmethodID hideID;\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (gdk_env, peer_obj);\n+  \n+  if (!isIDSet)\n+    {\n+      jclass cx = (*gdk_env)->GetObjectClass (gdk_env, peer_obj);\n+      hideID = (*gdk_env)->GetMethodID (gdk_env, cx, \"gtkHideFileDialog\", \"()V\");\n+      gtkSetFilenameID = (*gdk_env)->GetMethodID (gdk_env, cx,\n+                                   \"gtkSetFilename\", \"(Ljava.lang.String;)V\");\n+      isIDSet = 1;\n+    }\n+    \n+  gdk_threads_leave ();\n+\n+  /* Set the Java object field 'file' with the null value. */\n+  (*gdk_env)->CallVoidMethod (gdk_env, peer_obj, gtkSetFilenameID, NULL);\n+\n+  /* We can hide the dialog now (and unblock show) */\n+  (*gdk_env)->CallVoidMethod (gdk_env, peer_obj, hideID);\n+\n+  gdk_threads_enter ();\n+}\n+\n+"}]}