{"sha": "a58a965eb73253759f6a3e1c7380392557da89c8", "node_id": "C_kwDOANBUbNoAKGE1OGE5NjVlYjczMjUzNzU5ZjZhM2UxYzczODAzOTI1NTdkYTg5Yzg", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-12T15:54:08Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-12T15:54:08Z"}, "message": "libgomp: Fix up creation of artificial teams\n\nWhen not in explicit parallel/target/teams construct, we in some cases create\nan artificial parallel with a single thread (either to handle target nowait\nor for task reduction purposes).  In those cases, it handled again artificially\ncreated implicit task (created by gomp_new_icv for cases where we needed to write\nto some ICVs), but as the testcases show, didn't take into account possibility\nof this being done from explicit task(s).  The code would destroy/free the previous\ntask and replace it with the new implicit task.  If task is an explicit task\n(when teams is NULL, all explicit tasks behave like if (0)), it is a pointer to\na local stack variable, so freeing it doesn't work, and additionally we shouldn't\nlose the explicit tasks - the new implicit task should instead replace the\nancestor task which is the first implicit one.\n\n2022-10-12  Jakub Jelinek  <jakub@redhat.com>\n\n\t* task.c (gomp_create_artificial_team): Fix up handling of invocations\n\tfrom within explicit task.\n\t* target.c (GOMP_target_ext): Likewise.\n\t* testsuite/libgomp.c/task-7.c: New test.\n\t* testsuite/libgomp.c/task-8.c: New test.\n\t* testsuite/libgomp.c-c++-common/task-reduction-17.c: New test.\n\t* testsuite/libgomp.c-c++-common/task-reduction-18.c: New test.", "tree": {"sha": "1cdb86eba60f2ed367dd254e1c8886187d727db3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cdb86eba60f2ed367dd254e1c8886187d727db3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a58a965eb73253759f6a3e1c7380392557da89c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a58a965eb73253759f6a3e1c7380392557da89c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a58a965eb73253759f6a3e1c7380392557da89c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a58a965eb73253759f6a3e1c7380392557da89c8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bf74082bc93226e1ceb66430706e957e460c841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf74082bc93226e1ceb66430706e957e460c841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bf74082bc93226e1ceb66430706e957e460c841"}], "stats": {"total": 123, "additions": 117, "deletions": 6}, "files": [{"sha": "73c99c7c2e7679aa588511bd81fb6b7990cf3a62", "filename": "libgomp/target.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58a965eb73253759f6a3e1c7380392557da89c8/libgomp%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58a965eb73253759f6a3e1c7380392557da89c8/libgomp%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftarget.c?ref=a58a965eb73253759f6a3e1c7380392557da89c8", "patch": "@@ -2813,6 +2813,7 @@ GOMP_target_ext (int device, void (*fn) (void *), size_t mapnum,\n \t{\n \t  struct gomp_team *team = gomp_new_team (1);\n \t  struct gomp_task *task = thr->task;\n+\t  struct gomp_task **implicit_task = &task;\n \t  struct gomp_task_icv *icv = task ? &task->icv : &gomp_global_icv;\n \t  team->prev_ts = thr->ts;\n \t  thr->ts.team = team;\n@@ -2825,15 +2826,23 @@ GOMP_target_ext (int device, void (*fn) (void *), size_t mapnum,\n \t  thr->ts.static_trip = 0;\n \t  thr->task = &team->implicit_task[0];\n \t  gomp_init_task (thr->task, NULL, icv);\n-\t  if (task)\n+\t  while (*implicit_task\n+\t\t && (*implicit_task)->kind != GOMP_TASK_IMPLICIT)\n+\t    implicit_task = &(*implicit_task)->parent;\n+\t  if (*implicit_task)\n \t    {\n-\t      thr->task = task;\n+\t      thr->task = *implicit_task;\n \t      gomp_end_task ();\n-\t      free (task);\n+\t      free (*implicit_task);\n \t      thr->task = &team->implicit_task[0];\n \t    }\n \t  else\n \t    pthread_setspecific (gomp_thread_destructor, thr);\n+\t  if (implicit_task != &task)\n+\t    {\n+\t      *implicit_task = thr->task;\n+\t      thr->task = task;\n+\t    }\n \t}\n       if (thr->ts.team\n \t  && !thr->task->final_task)"}, {"sha": "7766535d1aa233e0125f9712dfc6cdc0b6513d9b", "filename": "libgomp/task.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58a965eb73253759f6a3e1c7380392557da89c8/libgomp%2Ftask.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58a965eb73253759f6a3e1c7380392557da89c8/libgomp%2Ftask.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftask.c?ref=a58a965eb73253759f6a3e1c7380392557da89c8", "patch": "@@ -2465,6 +2465,7 @@ gomp_create_artificial_team (void)\n   struct gomp_task_icv *icv;\n   struct gomp_team *team = gomp_new_team (1);\n   struct gomp_task *task = thr->task;\n+  struct gomp_task **implicit_task = &task;\n   icv = task ? &task->icv : &gomp_global_icv;\n   team->prev_ts = thr->ts;\n   thr->ts.team = team;\n@@ -2477,17 +2478,25 @@ gomp_create_artificial_team (void)\n   thr->ts.static_trip = 0;\n   thr->task = &team->implicit_task[0];\n   gomp_init_task (thr->task, NULL, icv);\n-  if (task)\n+  while (*implicit_task\n+\t && (*implicit_task)->kind != GOMP_TASK_IMPLICIT)\n+    implicit_task = &(*implicit_task)->parent;\n+  if (*implicit_task)\n     {\n-      thr->task = task;\n+      thr->task = *implicit_task;\n       gomp_end_task ();\n-      free (task);\n+      free (*implicit_task);\n       thr->task = &team->implicit_task[0];\n     }\n #ifdef LIBGOMP_USE_PTHREADS\n   else\n     pthread_setspecific (gomp_thread_destructor, thr);\n #endif\n+  if (implicit_task != &task)\n+    {\n+      *implicit_task = thr->task;\n+      thr->task = task;\n+    }\n }\n \n /* The format of data is:"}, {"sha": "4a8d1e8bb73519d06175ac1317c268587443938c", "filename": "libgomp/testsuite/libgomp.c-c++-common/task-reduction-17.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58a965eb73253759f6a3e1c7380392557da89c8/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftask-reduction-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58a965eb73253759f6a3e1c7380392557da89c8/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftask-reduction-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftask-reduction-17.c?ref=a58a965eb73253759f6a3e1c7380392557da89c8", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+\n+#include <omp.h>\n+#include <stdlib.h>\n+\n+int a;\n+\n+int\n+main ()\n+{\n+  #pragma omp task final (1)\n+  {\n+    if (!omp_in_final ())\n+      abort ();\n+    #pragma omp task\n+    {\n+      if (!omp_in_final ())\n+\tabort ();\n+      #pragma omp taskgroup task_reduction (+: a)\n+      {\n+\tif (!omp_in_final ())\n+\t  abort ();\n+\t#pragma omp task in_reduction (+: a)\n+\t{\n+\t  ++a;\n+\t  if (!omp_in_final ())\n+\t    abort ();\n+\t}\n+      }\n+      if (!omp_in_final ())\n+\tabort ();\n+      #pragma omp taskwait\n+    }\n+  }\n+  return 0;\n+}"}, {"sha": "483f4406f6fa29d66837cb8c5e2c352f9105f0c5", "filename": "libgomp/testsuite/libgomp.c-c++-common/task-reduction-18.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58a965eb73253759f6a3e1c7380392557da89c8/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftask-reduction-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58a965eb73253759f6a3e1c7380392557da89c8/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftask-reduction-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftask-reduction-18.c?ref=a58a965eb73253759f6a3e1c7380392557da89c8", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+\n+int a;\n+\n+int\n+main ()\n+{\n+  #pragma omp task\n+  {\n+    #pragma omp taskgroup task_reduction (+: a)\n+    {\n+      #pragma omp task in_reduction (+: a)\n+      ++a;\n+    }\n+  }\n+  return 0;\n+}"}, {"sha": "0307575f978bcade044459c59388a93257cb334c", "filename": "libgomp/testsuite/libgomp.c/task-7.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58a965eb73253759f6a3e1c7380392557da89c8/libgomp%2Ftestsuite%2Flibgomp.c%2Ftask-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58a965eb73253759f6a3e1c7380392557da89c8/libgomp%2Ftestsuite%2Flibgomp.c%2Ftask-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Ftask-7.c?ref=a58a965eb73253759f6a3e1c7380392557da89c8", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+\n+#include <omp.h>\n+#include <stdlib.h>\n+\n+int\n+main ()\n+{\n+  #pragma omp task final (1)\n+  {\n+    if (!omp_in_final ())\n+      abort ();\n+    #pragma omp task\n+    {\n+      if (!omp_in_final ())\n+\tabort ();\n+      #pragma omp target nowait\n+      if (omp_in_final ())\n+\tabort ();\n+      if (!omp_in_final ())\n+\tabort ();\n+      #pragma omp taskwait\n+    }\n+  }\n+  return 0;\n+}"}, {"sha": "f03aef6a030149580724ad07b2741d4b0fa007cf", "filename": "libgomp/testsuite/libgomp.c/task-8.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58a965eb73253759f6a3e1c7380392557da89c8/libgomp%2Ftestsuite%2Flibgomp.c%2Ftask-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58a965eb73253759f6a3e1c7380392557da89c8/libgomp%2Ftestsuite%2Flibgomp.c%2Ftask-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Ftask-8.c?ref=a58a965eb73253759f6a3e1c7380392557da89c8", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+\n+int\n+main ()\n+{\n+  int i = 0;\n+  #pragma omp task\n+  {\n+    #pragma omp target nowait private (i)\n+    i = 1;\n+    #pragma omp taskwait\n+  }\n+  return 0;\n+}"}]}