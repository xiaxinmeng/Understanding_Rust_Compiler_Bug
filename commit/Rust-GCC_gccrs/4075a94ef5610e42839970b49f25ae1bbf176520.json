{"sha": "4075a94ef5610e42839970b49f25ae1bbf176520", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA3NWE5NGVmNTYxMGU0MjgzOTk3MGI0OWYyNWFlMWJiZjE3NjUyMA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2005-11-06T20:05:12Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2005-11-06T20:05:12Z"}, "message": "re PR fortran/24534 (PUBLIC derived types with private components)\n\n2005-11-06  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/24534\n\t* resolve.c (resolve_symbol): Exclude case of PRIVATE declared\n\twithin derived type from error associated with PRIVATE type\n\tcomponents within derived type.\n\n\tPR fortran/20838\n\tPR fortran/20840\n\t* gfortran.h: Add prototype for gfc_has_vector_index.\n\t* io.c (gfc_resolve_dt): Error if internal unit has a vector index.\n\t* expr.c (gfc_has_vector_index): New function to check if any of\n\tthe array references of an expression have vector inidices.\n\t(gfc_check_pointer_assign): Error if internal unit has a vector index.\n\n\tPR fortran/17737\n\t* data.c (gfc_assign_data_value): Remove gcc_assert that caused the ICE\n\tand replace by a standard dependent warning/error if overwriting an\n\texisting initialization.\n\t* decl.c (gfc_data_variable): Remove old error for already initialized\n\tvariable and the unused error check for common block variables.  Add\n\terror for hots associated variable and standard dependent error for\n\tcommon block variables, outside of blockdata.\n\t* symbol.c (check_conflict): Add constraints for DATA statement.\n\n2005-11-06  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/24534\n\tgfortran.dg/private_type_2.f90: Modified to check that case with\n\tPRIVATE declaration within derived type is accepted.\n\n\tPR fortran/20838\n\tgfortran.dg/pointer_assign_1.f90: New test.\n\n\tPR fortran/20840\n\t* gfortran.dg/arrayio_0.f90: New test.\n\n\tPR fortran/17737\n\tgfortran.dg/data_initialized.f90: New test.\n\tgfortran.dg/data_constraints_1.f90: New test.\n\tgfortran.dg/data_constraints_2.f90: New test.\n\nFrom-SVN: r106567", "tree": {"sha": "cf705dd04dbbcc1d3afb58821a83148e48c5ea47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf705dd04dbbcc1d3afb58821a83148e48c5ea47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4075a94ef5610e42839970b49f25ae1bbf176520", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4075a94ef5610e42839970b49f25ae1bbf176520", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4075a94ef5610e42839970b49f25ae1bbf176520", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4075a94ef5610e42839970b49f25ae1bbf176520/comments", "author": null, "committer": null, "parents": [{"sha": "c5a35c3c50228be69ecbb579b53925d7be73377d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5a35c3c50228be69ecbb579b53925d7be73377d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5a35c3c50228be69ecbb579b53925d7be73377d"}], "stats": {"total": 230, "additions": 209, "deletions": 21}, "files": [{"sha": "60b20b769705ed1724274add41ea6d36babf0797", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4075a94ef5610e42839970b49f25ae1bbf176520", "patch": "@@ -1,3 +1,28 @@\n+2005-11-06  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/24534\n+\t* resolve.c (resolve_symbol): Exclude case of PRIVATE declared\n+\twithin derived type from error associated with PRIVATE type\n+\tcomponents within derived type.\n+\n+\tPR fortran/20838\n+\tPR fortran/20840\n+\t* gfortran.h: Add prototype for gfc_has_vector_index.\n+\t* io.c (gfc_resolve_dt): Error if internal unit has a vector index.\n+\t* expr.c (gfc_has_vector_index): New function to check if any of\n+\tthe array references of an expression have vector inidices.\n+\t(gfc_check_pointer_assign): Error if internal unit has a vector index.\n+\n+\tPR fortran/17737\n+\t* data.c (gfc_assign_data_value): Remove gcc_assert that caused the ICE\n+\tand replace by a standard dependent warning/error if overwriting an\n+\texisting initialization.\n+\t* decl.c (gfc_data_variable): Remove old error for already initialized\n+\tvariable and the unused error check for common block variables.  Add\n+\terror for hots associated variable and standard dependent error for\n+\tcommon block variables, outside of blockdata.\n+\t* symbol.c (check_conflict): Add constraints for DATA statement.\n+\n 2005-11-06  Janne Blomqvist <jb@gcc.gnu.org>\n \n \tPR fortran/24174"}, {"sha": "fdb98569c7ae666e1ca732beb7acd3ddbdc2d822", "filename": "gcc/fortran/data.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ffortran%2Fdata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ffortran%2Fdata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdata.c?ref=4075a94ef5610e42839970b49f25ae1bbf176520", "patch": "@@ -315,8 +315,19 @@ gfc_assign_data_value (gfc_expr * lvalue, gfc_expr * rvalue, mpz_t index)\n     expr = create_character_intializer (init, last_ts, ref, rvalue);\n   else\n     {\n-      /* We should never be overwriting an existing initializer.  */\n-      gcc_assert (!init);\n+      /* Overwriting an existing initializer is non-standard but usually only\n+\t provokes a warning from other compilers.  */\n+      if (init != NULL)\n+\t{\n+\t  /* Order in which the expressions arrive here depends on whether they\n+\t     are from data statements or F95 style declarations. Therefore,\n+\t     check which is the most recent.  */\n+\t  expr = (init->where.lb->linenum > rvalue->where.lb->linenum) ?\n+\t\t    init : rvalue;\n+\t  gfc_notify_std (GFC_STD_GNU, \"Extension: re-initialization \"\n+\t\t\t  \"of '%s' at %L\",  symbol->name, &expr->where);\n+\t  return;\n+\t}\n \n       expr = gfc_copy_expr (rvalue);\n       if (!gfc_compare_types (&lvalue->ts, &expr->ts))"}, {"sha": "8352c5274617be611eabf61d7db9a478af7787ce", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=4075a94ef5610e42839970b49f25ae1bbf176520", "patch": "@@ -203,24 +203,19 @@ var_element (gfc_data_variable * new)\n \n   sym = new->expr->symtree->n.sym;\n \n-  if(sym->value != NULL)\n+  if (!sym->attr.function && gfc_current_ns->parent && gfc_current_ns->parent == sym->ns)\n     {\n-      gfc_error (\"Variable '%s' at %C already has an initialization\",\n-\t\t sym->name);\n+      gfc_error (\"Host associated variable '%s' may not be in the DATA \"\n+\t\t \"statement at %C.\", sym->name);\n       return MATCH_ERROR;\n     }\n \n-#if 0 /* TODO: Find out where to move this message */\n-  if (sym->attr.in_common)\n-    /* See if sym is in the blank common block.  */\n-    for (t = &sym->ns->blank_common; t; t = t->common_next)\n-      if (sym == t->head)\n-\t{\n-\t  gfc_error (\"DATA statement at %C may not initialize variable \"\n-\t\t     \"'%s' from blank COMMON\", sym->name);\n-\t  return MATCH_ERROR;\n-\t}\n-#endif\n+  if (gfc_current_state () != COMP_BLOCK_DATA\n+\t&& sym->attr.in_common\n+\t&& gfc_notify_std (GFC_STD_GNU, \"Extension: initialization of \"\n+\t\t\t   \"common block variable '%s' in DATA statement at %C\",\n+\t\t\t   sym->name) == FAILURE)\n+    return MATCH_ERROR;\n \n   if (gfc_add_data (&sym->attr, sym->name, &new->expr->where) == FAILURE)\n     return MATCH_ERROR;"}, {"sha": "1ceec01eae03a61e695e7dc858c07d6b3cff332a", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=4075a94ef5610e42839970b49f25ae1bbf176520", "patch": "@@ -311,6 +311,23 @@ copy_ref (gfc_ref * src)\n }\n \n \n+/* Detect whether an expression has any vector index array\n+   references.  */\n+\n+int\n+gfc_has_vector_index (gfc_expr *e)\n+{\n+  gfc_ref * ref;\n+  int i;\n+  for (ref = e->ref; ref; ref = ref->next)\n+    if (ref->type == REF_ARRAY)\n+      for (i = 0; i < ref->u.ar.dimen; i++)\n+\tif (ref->u.ar.dimen_type[i] == DIMEN_VECTOR)\n+\t  return 1;\n+  return 0;\n+}\n+\n+\n /* Copy a shape array.  */\n \n mpz_t *\n@@ -1962,6 +1979,13 @@ gfc_check_pointer_assign (gfc_expr * lvalue, gfc_expr * rvalue)\n       return FAILURE;\n     }\n \n+  if (gfc_has_vector_index (rvalue))\n+    {\n+      gfc_error (\"Pointer assignment with vector subscript \"\n+\t\t \"on rhs at %L\", &rvalue->where);\n+      return FAILURE;\n+    }\n+\n   return SUCCESS;\n }\n "}, {"sha": "5626cc986a7d5a57ffc368837fb890ae0cd70bb9", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=4075a94ef5610e42839970b49f25ae1bbf176520", "patch": "@@ -1790,6 +1790,7 @@ void gfc_free_ref_list (gfc_ref *);\n void gfc_type_convert_binary (gfc_expr *);\n int gfc_is_constant_expr (gfc_expr *);\n try gfc_simplify_expr (gfc_expr *, int);\n+int gfc_has_vector_index (gfc_expr *);\n \n gfc_expr *gfc_get_expr (void);\n void gfc_free_expr (gfc_expr *);"}, {"sha": "183948e57889f33afc3dc2e54f491ce2b07accc0", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=4075a94ef5610e42839970b49f25ae1bbf176520", "patch": "@@ -1787,6 +1787,13 @@ gfc_resolve_dt (gfc_dt * dt)\n   /* Sanity checks on data transfer statements.  */\n   if (e->ts.type == BT_CHARACTER)\n     {\n+      if (gfc_has_vector_index (e))\n+\t{\n+\t  gfc_error (\"Internal unit with vector subscript at %L\",\n+\t\t     &e->where);\n+\t  return FAILURE;\n+\t}\n+\n       if (dt->rec != NULL)\n \t{\n \t  gfc_error (\"REC tag at %L is incompatible with internal file\","}, {"sha": "50d22b0ea839eb66c1f64c0995bfc6ee08e97b6a", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=4075a94ef5610e42839970b49f25ae1bbf176520", "patch": "@@ -4358,9 +4358,11 @@ resolve_symbol (gfc_symbol * sym)\n       return;\n     }\n \n-  /* Ensure that derived type components of a public derived type\n-     are not of a private type.  */\n+  /* If a component of a derived type is of a type declared to be private,\n+     either the derived type definition must contain the PRIVATE statement,\n+     or the derived type must be private.  (4.4.1 just after R427) */\n   if (sym->attr.flavor == FL_DERIVED\n+\t&& sym->component_access != ACCESS_PRIVATE\n \t&& gfc_check_access(sym->attr.access, sym->ns->default_access))\n     {\n       for (c = sym->components; c; c = c->next)"}, {"sha": "20fb7470dff6fe10820b93c3b314ecb8cc2d7206", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=4075a94ef5610e42839970b49f25ae1bbf176520", "patch": "@@ -264,7 +264,7 @@ check_conflict (symbol_attribute * attr, const char * name, locus * where)\n     *function = \"FUNCTION\", *subroutine = \"SUBROUTINE\",\n     *dimension = \"DIMENSION\", *in_equivalence = \"EQUIVALENCE\",\n     *use_assoc = \"USE ASSOCIATED\", *cray_pointer = \"CRAY POINTER\",\n-    *cray_pointee = \"CRAY POINTEE\";\n+    *cray_pointee = \"CRAY POINTEE\", *data = \"DATA\";\n \n   const char *a1, *a2;\n \n@@ -373,6 +373,12 @@ check_conflict (symbol_attribute * attr, const char * name, locus * where)\n   conf (cray_pointee, in_common);\n   conf (cray_pointee, in_equivalence);\n \n+  conf (data, dummy);\n+  conf (data, function);\n+  conf (data, result);\n+  conf (data, allocatable);\n+  conf (data, use_assoc);\n+\n   a1 = gfc_code2string (flavors, attr->flavor);\n \n   if (attr->in_namelist"}, {"sha": "0dca65ba8113117244fce1780c09717d91e98555", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4075a94ef5610e42839970b49f25ae1bbf176520", "patch": "@@ -1,3 +1,20 @@\n+2005-11-06  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/24534\n+\tgfortran.dg/private_type_2.f90: Modified to check that case with\n+\tPRIVATE declaration within derived type is accepted.\n+\n+\tPR fortran/20838\n+\tgfortran.dg/pointer_assign_1.f90: New test.\n+\n+\tPR fortran/20840\n+\t* gfortran.dg/arrayio_0.f90: New test.\n+\n+\tPR fortran/17737\n+\tgfortran.dg/data_initialized.f90: New test.\n+\tgfortran.dg/data_constraints_1.f90: New test.\n+\tgfortran.dg/data_constraints_2.f90: New test.\n+\n 2005-11-06  Janne Blomqvist <jb@gcc.gnu.org>\n \n \tPR fortran/24174"}, {"sha": "1331cf2edda03106ca2fb4b8f598b2ce037ad344", "filename": "gcc/testsuite/gfortran.dg/arrayio_0.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_0.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_0.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_0.f90?ref=4075a94ef5610e42839970b49f25ae1bbf176520", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+! Tests fix for PR20840 - would ICE with vector subscript in \n+! internal unit.\n+!\n+! Contributed by Paul Thomas  <pault@gcc.gnu.org>\n+!\n+  character(len=12), dimension(4) :: iu, buff\n+  character(len=48), dimension(2) :: iue\n+  equivalence (iu, iue)\n+  integer, dimension(4) :: v = (/2,1,4,3/)\n+  iu = (/\"Vector\",\"subscripts\",\"not\",\"allowed!\"/)\n+  read (iu, '(a12/)') buff\n+  read (iue(1), '(4a12)') buff\n+  read (iu(4:1:-1), '(a12/)') buff\n+  read (iu(v), '(a12/)') buff           ! { dg-error \"with vector subscript\" }\n+  read (iu((/2,4,3,1/)), '(a12/)') buff ! { dg-error \"with vector subscript\" }\n+  print *, buff\n+  end\n+"}, {"sha": "5f11ffdbaea5b762cd536607b7e3d89e5c07f337", "filename": "gcc/testsuite/gfortran.dg/data_constraints_1.f90", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ftestsuite%2Fgfortran.dg%2Fdata_constraints_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ftestsuite%2Fgfortran.dg%2Fdata_constraints_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdata_constraints_1.f90?ref=4075a94ef5610e42839970b49f25ae1bbf176520", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do compile }\n+! Tests standard indepedendent constraints for variables in a data statement\n+!\n+! Contributed by Paul Thomas <pault@gcc.gnu.org>\n+!\n+  module global\n+   integer n\n+  end module global\n+\n+  use global\n+  integer q\n+  data n /0/            ! { dg-error \"Cannot change attributes\" }\n+  n = 1\n+  n = foo (n)\n+contains\n+  function foo (m) result (bar)\n+  integer p (m), bar\n+  integer, allocatable :: l(:)\n+  allocate (l(1))\n+  data l /42/           ! { dg-error \"conflicts with ALLOCATABLE\" }\n+  data p(1) /1/         ! { dg-error \"non-constant array in DATA\" }\n+  data q /1/            ! { dg-error \"Host associated variable\" }\n+  data m /1/            ! { dg-error \"conflicts with DUMMY attribute\" }\n+  data bar /99/         ! { dg-error \"conflicts with RESULT\" }\n+  end function foo\n+  function foobar ()\n+  integer foobar\n+  data foobar /0/       ! { dg-error \"conflicts with FUNCTION\" }\n+  end function foobar\n+end"}, {"sha": "46de3c81434f5fdcaebe40f6ef06aa772a55b3af", "filename": "gcc/testsuite/gfortran.dg/data_constraints_2.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ftestsuite%2Fgfortran.dg%2Fdata_constraints_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ftestsuite%2Fgfortran.dg%2Fdata_constraints_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdata_constraints_2.f90?ref=4075a94ef5610e42839970b49f25ae1bbf176520", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f95\" }\n+! Tests constraints for variables in a data statement that are commonly\n+! relaxed.\n+!\n+! Contributed by Paul Thomas <pault@gcc.gnu.org>\n+!\n+  common // a\n+  common /b/ c\n+  integer d\n+  data a /1/            ! { dg-error \"common block variable\" }\n+  data c /2/            ! { dg-error \"common block variable\" }\n+  data d /3/\n+  data d /4/            ! { dg-error \" re-initialization\" }\n+end"}, {"sha": "56cf059ae36b26075d9a5e77ca05959f4e3a713d", "filename": "gcc/testsuite/gfortran.dg/data_initialized.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ftestsuite%2Fgfortran.dg%2Fdata_initialized.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ftestsuite%2Fgfortran.dg%2Fdata_initialized.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdata_initialized.f90?ref=4075a94ef5610e42839970b49f25ae1bbf176520", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f95\" }\n+! Tests fix for PR17737 - already initialized variable cannot appear\n+! in data statement\n+      integer :: i, j = 1\n+      data i/0/\n+      data i/0/   ! { dg-error \"Extension: re-initialization\" }\n+      data j/2/   ! { dg-error \"Extension: re-initialization\" }\n+      end\n+"}, {"sha": "cfe8ad1700694a49a6125ad648ccf1dd7f0fd29c", "filename": "gcc/testsuite/gfortran.dg/pointer_assign_1.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_1.f90?ref=4075a94ef5610e42839970b49f25ae1bbf176520", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do compile }\n+! Tests fix for PR20838 - would ICE with vector subscript in \n+! pointer assignment.\n+!\n+! Contributed by Paul Thomas  <pault@gcc.gnu.org>\n+!\n+  integer, parameter, dimension(3) :: i = (/2,1,3/)\n+  integer, dimension(3), target   :: tar\n+  integer, dimension(2, 3), target   :: tar2\n+  integer, dimension(:), pointer  :: ptr\n+  ptr => tar\n+  ptr => tar(3:1:-1)\n+  ptr => tar(i)     ! { dg-error \"with vector subscript\" }\n+  ptr => tar2(1, :)\n+  ptr => tar2(2, i) ! { dg-error \"with vector subscript\" }\n+  end\n+"}, {"sha": "9cb0b380703fb4c48a1d6a2548a1a0310650f1f3", "filename": "gcc/testsuite/gfortran.dg/private_type_2.f90", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ftestsuite%2Fgfortran.dg%2Fprivate_type_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4075a94ef5610e42839970b49f25ae1bbf176520/gcc%2Ftestsuite%2Fgfortran.dg%2Fprivate_type_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fprivate_type_2.f90?ref=4075a94ef5610e42839970b49f25ae1bbf176520", "patch": "@@ -1,5 +1,9 @@\n ! { dg-do compile }\n-! PR16404 test 6 - A public type cannot have private-type components.\n+! PR16404 test 6 - If a component of a derived type is of a type declared to\n+! be private, either the derived type definition must contain the PRIVATE\n+! statement, or the derived type must be private.\n+! Modified on 20051105 to test PR24534.\n+!\n ! Contributed by Joost VandeVondele <jv244@cam.ac.uk>\n MODULE TEST\n   PRIVATE\n@@ -9,7 +13,12 @@ MODULE TEST\n   TYPE :: all_type! { dg-error \"PRIVATE type and cannot be a component\" }\n     TYPE(info_type) :: info\n   END TYPE\n-  public  all_type\n+  TYPE :: any_type! This is OK because of the PRIVATE statement.\n+    PRIVATE\n+    TYPE(info_type) :: info\n+  END TYPE\n+  public  all_type, any_type\n END MODULE\n END\n \n+"}]}