{"sha": "f065303fcf9aa29bf376cf9db985b81d338d7709", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA2NTMwM2ZjZjlhYTI5YmYzNzZjZjlkYjk4NWI4MWQzMzhkNzcwOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-11-10T21:42:36Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-11-10T21:42:36Z"}, "message": "PR c++/77337 - auto return and lambda\n\n\t* pt.c (tsubst_friend_function): Don't set DECL_INITIAL.\n\t(instantiate_decl): It's OK to defer a constexpr function.\n\t* cp-tree.h (DECL_FRIEND_PSEUDO_TEMPLATE_INSTANTIATION): Check\n\tDECL_LANG_SPECIFIC.\n\t* decl2.c (decl_defined_p): Use it.  No longer static.\n\t* decl.c (redeclaration_error_message): Use decl_defined_p.\n\t* constexpr.c (cxx_eval_call_expression): Set input_location around\n\tcall to instantiate_decl.\n\nFrom-SVN: r242056", "tree": {"sha": "22f95d301fd585185ceb5330742ed82e7eb9e125", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22f95d301fd585185ceb5330742ed82e7eb9e125"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f065303fcf9aa29bf376cf9db985b81d338d7709", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f065303fcf9aa29bf376cf9db985b81d338d7709", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f065303fcf9aa29bf376cf9db985b81d338d7709", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f065303fcf9aa29bf376cf9db985b81d338d7709/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "28d1bf44643294ccac3c609104ad06b567b44149", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28d1bf44643294ccac3c609104ad06b567b44149", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28d1bf44643294ccac3c609104ad06b567b44149"}], "stats": {"total": 66, "additions": 54, "deletions": 12}, "files": [{"sha": "678c44d5d40a2e79085337c4720a5caf8b88264b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f065303fcf9aa29bf376cf9db985b81d338d7709/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f065303fcf9aa29bf376cf9db985b81d338d7709/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f065303fcf9aa29bf376cf9db985b81d338d7709", "patch": "@@ -1,3 +1,15 @@\n+2016-11-10  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/77337\n+\t* pt.c (tsubst_friend_function): Don't set DECL_INITIAL.\n+\t(instantiate_decl): It's OK to defer a constexpr function.\n+\t* cp-tree.h (DECL_FRIEND_PSEUDO_TEMPLATE_INSTANTIATION): Check\n+\tDECL_LANG_SPECIFIC.\n+\t* decl2.c (decl_defined_p): Use it.  No longer static.\n+\t* decl.c (redeclaration_error_message): Use decl_defined_p.\n+\t* constexpr.c (cxx_eval_call_expression): Set input_location around\n+\tcall to instantiate_decl.\n+\n 2016-11-10  Jakub Jelinek  <jakub@redhat.com>\n \n \t* mangle.c (mangle_decl): Only emit -Wc++1z-compat warnings for"}, {"sha": "f75f0b039fa958635e914fafa903039fd7c6e8e0", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f065303fcf9aa29bf376cf9db985b81d338d7709/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f065303fcf9aa29bf376cf9db985b81d338d7709/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=f065303fcf9aa29bf376cf9db985b81d338d7709", "patch": "@@ -1464,9 +1464,12 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n   if (!DECL_INITIAL (fun)\n       && DECL_TEMPLOID_INSTANTIATION (fun))\n     {\n+      location_t save_loc = input_location;\n+      input_location = loc;\n       ++function_depth;\n       instantiate_decl (fun, /*defer_ok*/false, /*expl_inst*/false);\n       --function_depth;\n+      input_location = save_loc;\n     }\n \n   /* If in direct recursive call, optimize definition search.  */"}, {"sha": "8183775b49ef966457347b4db55f64ba2472973d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f065303fcf9aa29bf376cf9db985b81d338d7709/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f065303fcf9aa29bf376cf9db985b81d338d7709/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f065303fcf9aa29bf376cf9db985b81d338d7709", "patch": "@@ -4380,7 +4380,8 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n    instantiated will not be a DECL_TEMPLATE_INSTANTIATION, but will be\n    a DECL_FRIEND_PSEUDO_TEMPLATE_INSTANTIATION.  */\n #define DECL_FRIEND_PSEUDO_TEMPLATE_INSTANTIATION(DECL) \\\n-  (DECL_TEMPLATE_INFO (DECL) && !DECL_USE_TEMPLATE (DECL))\n+  (DECL_LANG_SPECIFIC (DECL) && DECL_TEMPLATE_INFO (DECL) \\\n+   && !DECL_USE_TEMPLATE (DECL))\n \n /* Nonzero if DECL is a function generated from a function 'temploid',\n    i.e. template, member of class template, or dependent friend.  */\n@@ -5895,6 +5896,7 @@ extern void import_export_decl\t\t\t(tree);\n extern tree build_cleanup\t\t\t(tree);\n extern tree build_offset_ref_call_from_tree\t(tree, vec<tree, va_gc> **,\n \t\t\t\t\t\t tsubst_flags_t);\n+extern bool decl_defined_p\t\t\t(tree);\n extern bool decl_constant_var_p\t\t\t(tree);\n extern bool decl_maybe_constant_var_p\t\t(tree);\n extern void no_linkage_error\t\t\t(tree);"}, {"sha": "185c98bebb8d4ad1322cdbc6d346587d3b333e84", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f065303fcf9aa29bf376cf9db985b81d338d7709/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f065303fcf9aa29bf376cf9db985b81d338d7709/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f065303fcf9aa29bf376cf9db985b81d338d7709", "patch": "@@ -2778,8 +2778,8 @@ redeclaration_error_message (tree newdecl, tree olddecl)\n \t warn_extern_redeclared_static.  */\n \n       /* Defining the same name twice is no good.  */\n-      if (DECL_INITIAL (olddecl) != NULL_TREE\n-\t  && DECL_INITIAL (newdecl) != NULL_TREE)\n+      if (decl_defined_p (olddecl)\n+\t  && decl_defined_p (newdecl))\n \t{\n \t  if (DECL_NAME (olddecl) == NULL_TREE)\n \t    return G_(\"%q#D not declared in class\");"}, {"sha": "4ebc7dca8d6467e55c2e644560059e8f72da3cff", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f065303fcf9aa29bf376cf9db985b81d338d7709/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f065303fcf9aa29bf376cf9db985b81d338d7709/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=f065303fcf9aa29bf376cf9db985b81d338d7709", "patch": "@@ -80,7 +80,6 @@ static void import_export_class (tree);\n static tree get_guard_bits (tree);\n static void determine_visibility_from_class (tree, tree);\n static bool determine_hidden_inline (tree);\n-static bool decl_defined_p (tree);\n static void maybe_instantiate_decl (tree);\n \n /* A list of static class variables.  This is needed, because a\n@@ -4085,11 +4084,15 @@ collect_ada_namespace (tree namespc, const char *source_file)\n /* Returns true iff there is a definition available for variable or\n    function DECL.  */\n \n-static bool\n+bool\n decl_defined_p (tree decl)\n {\n   if (TREE_CODE (decl) == FUNCTION_DECL)\n-    return (DECL_INITIAL (decl) != NULL_TREE);\n+    return (DECL_INITIAL (decl) != NULL_TREE\n+\t    /* A pending instantiation of a friend temploid is defined.  */\n+\t    || (DECL_FRIEND_PSEUDO_TEMPLATE_INSTANTIATION (decl)\n+\t\t&& DECL_INITIAL (DECL_TEMPLATE_RESULT\n+\t\t\t\t (DECL_TI_TEMPLATE (decl)))));\n   else\n     {\n       gcc_assert (VAR_P (decl));"}, {"sha": "d4855d5bc3525831f0ca42b99bba0553e4c97743", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f065303fcf9aa29bf376cf9db985b81d338d7709/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f065303fcf9aa29bf376cf9db985b81d338d7709/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f065303fcf9aa29bf376cf9db985b81d338d7709", "patch": "@@ -9383,10 +9383,6 @@ tsubst_friend_function (tree decl, tree args)\n       else\n \tnew_friend_result_template_info = NULL_TREE;\n \n-      /* Make the init_value nonzero so pushdecl knows this is a defn.  */\n-      if (new_friend_is_defn)\n-\tDECL_INITIAL (new_friend) = error_mark_node;\n-\n       /* Inside pushdecl_namespace_level, we will push into the\n \t current namespace. However, the friend function should go\n \t into the namespace of the template.  */\n@@ -22086,8 +22082,7 @@ instantiate_decl (tree d, int defer_ok,\n      case that an expression refers to the value of the variable --\n      if the variable has a constant value the referring expression can\n      take advantage of that fact.  */\n-  if (VAR_P (d)\n-      || DECL_DECLARED_CONSTEXPR_P (d))\n+  if (VAR_P (d))\n     defer_ok = 0;\n \n   /* Don't instantiate cloned functions.  Instead, instantiate the"}, {"sha": "cfd849815034ae47007d9a476bd4e3b1221f2a62", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn33.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f065303fcf9aa29bf376cf9db985b81d338d7709/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn33.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f065303fcf9aa29bf376cf9db985b81d338d7709/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn33.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn33.C?ref=f065303fcf9aa29bf376cf9db985b81d338d7709", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/77337\n+// { dg-do compile { target c++14 } }\n+\n+template<typename Functor>\n+struct fix_type {\n+  Functor functor;\n+\n+  decltype(auto) operator()()\n+  { return functor(*this); }\n+};\n+\n+template<typename Functor>\n+fix_type<Functor> fix(Functor functor)\n+{ return { functor }; }\n+\n+int main()\n+{\n+  auto zero = fix\n+    ([](auto& self) -> int // N.B. non-deduced, non-dependent return type\n+     {\n+       return 0;\n+\n+       self(); // error: use of 'decltype(auto) fix_type<Functor>::operator()() [with Functor = main()::<lambda(auto:1&)>]' before deduction of 'auto'\n+     });\n+\n+  return zero();\n+}"}]}