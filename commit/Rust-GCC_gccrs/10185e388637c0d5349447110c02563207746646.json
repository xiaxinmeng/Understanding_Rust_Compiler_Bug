{"sha": "10185e388637c0d5349447110c02563207746646", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAxODVlMzg4NjM3YzBkNTM0OTQ0NzExMGMwMjU2MzIwNzc0NjY0Ng==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-01-18T01:01:58Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-01-18T01:01:58Z"}, "message": "MenuComponent.java: Merged with Classpath.\n\n\t* java/awt/MenuComponent.java: Merged with Classpath.\n\t* java/awt/MenuItem.java: Merged with Classpath.\n\t* java/awt/Button.java: Merged with Classpath.\n\nFrom-SVN: r48975", "tree": {"sha": "1daf1069cde70e552af191c6d0e456a883971bf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1daf1069cde70e552af191c6d0e456a883971bf3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10185e388637c0d5349447110c02563207746646", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10185e388637c0d5349447110c02563207746646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10185e388637c0d5349447110c02563207746646", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10185e388637c0d5349447110c02563207746646/comments", "author": null, "committer": null, "parents": [{"sha": "ccc643e212b7470dc23e0d9307442e2c9420caf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccc643e212b7470dc23e0d9307442e2c9420caf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccc643e212b7470dc23e0d9307442e2c9420caf5"}], "stats": {"total": 1413, "additions": 1011, "deletions": 402}, "files": [{"sha": "4dece51693b03fb3cef37ca85fbe5f0b7cbb8cda", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10185e388637c0d5349447110c02563207746646/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10185e388637c0d5349447110c02563207746646/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=10185e388637c0d5349447110c02563207746646", "patch": "@@ -1,5 +1,9 @@\n 2002-01-17  Tom Tromey  <tromey@redhat.com>\n \n+\t* java/awt/MenuComponent.java: Merged with Classpath.\n+\t* java/awt/MenuItem.java: Merged with Classpath.\n+\t* java/awt/Button.java: Merged with Classpath.\n+\n \t* java/awt/ActiveEvent.java: Updated copyright.\n \n \t* java/awt/AWTError.java: Replaced with Classpath version."}, {"sha": "1626047bb68ac2f3b21119ce0e9e9240c53d529d", "filename": "libjava/java/awt/Button.java", "status": "modified", "additions": 264, "deletions": 103, "changes": 367, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10185e388637c0d5349447110c02563207746646/libjava%2Fjava%2Fawt%2FButton.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10185e388637c0d5349447110c02563207746646/libjava%2Fjava%2Fawt%2FButton.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FButton.java?ref=10185e388637c0d5349447110c02563207746646", "patch": "@@ -1,116 +1,277 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Button.java -- AWT button widget\n+   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n \n-   This file is part of libjava.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n-details.  */\n \n package java.awt;\n+\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n import java.awt.peer.ButtonPeer;\n import java.awt.peer.ComponentPeer;\n-import java.awt.event.ActionListener;\n-import java.awt.event.ActionEvent;\n import java.util.EventListener;\n \n /**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date July 30, 2000\n+  * This class provides a button widget for the AWT. \n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Tom Tromey <tromey@cygnus.com>\n+  */\n+public class Button extends Component implements java.io.Serializable\n+{\n+\n+/*\n+ * Static Variables\n+ */\n+\n+// FIXME: Need readObject/writeObject for serialization\n+\n+// Serialization version constant\n+private static final long serialVersionUID = -8774683716313001058L;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+/**\n+  * @serial The action command name for this button.\n+  */\n+private String actionCommand;\n+\n+/**\n+  * @serial The label for this button.\n+  */\n+private String label;\n+\n+// List of ActionListeners for this class.\n+private transient ActionListener action_listeners;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Initializes a new instance of <code>Button</code> with no label.\n+  */\n+public\n+Button()\n+{\n+  this(null);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>Button</code> with the specified\n+  * label.  The action command name is also initialized to this value.\n+  *\n+  * @param label The label to display on the button.\n+  */\n+public\n+Button(String label)\n+{\n+  this.label = label;\n+  actionCommand = label;\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n  */\n \n-public class Button extends Component\n+/**\n+  * Returns the label for this button.\n+  *\n+  * @return The label for this button.\n+  */\n+public String\n+getLabel()\n {\n-  public Button ()\n-  {\n-    this (null);\n-  }\n-\n-  public Button (String label)\n-  {\n-    this.label = label;\n-  }\n-\n-  public void addActionListener (ActionListener l)\n-  {\n-    actionListener = AWTEventMulticaster.add (actionListener, l);\n-  }\n-\n-  public void addNotify ()\n-  {\n-    if (peer == null)\n-      peer = getToolkit ().createButton (this);\n-    super.addNotify();\n-  }\n-\n-  public String getActionCommand ()\n-  {\n-    return actionCommand;\n-  }\n-\n-  public String getLabel ()\n-  {\n-    return label;\n-  }\n-\n-  protected String paramString ()\n-  {\n-    return \"Button[\" + label + \"]\";\n-  }\n-\n-  void dispatchEventImpl(AWTEvent e)\n-  {\n-      super.dispatchEventImpl(e);\n-      \n-      if (e.id <= ActionEvent.ACTION_LAST \n-\t  && e.id >= ActionEvent.ACTION_FIRST\n-\t  && (actionListener != null \n-\t      || (eventMask & AWTEvent.ACTION_EVENT_MASK) != 0))\n-\t  processEvent(e);\n-  }\n-\n-  protected void processActionEvent (ActionEvent e)\n-  {\n-    if (actionListener != null)\n-      actionListener.actionPerformed (e);\n-  }\n-\n-  protected void processEvent (AWTEvent e)\n-  {\n-    if (e instanceof ActionEvent)\n-      processActionEvent ((ActionEvent) e);\n-    else\n-      super.processEvent (e);\n-  }\n-\n-  public void removeActionListener (ActionListener l)\n-  {\n-    actionListener = AWTEventMulticaster.remove (actionListener, l);\n-  }\n-\n-  public EventListener[] getListeners(Class listenerType)\n-  {\n-    if (listenerType == ActionListener.class)\n-      return getListenersImpl(listenerType, actionListener);\n-    return super.getListeners(listenerType);\n-  }\n-\n-  public void setActionCommand (String command)\n-  {\n-    this.actionCommand = (command == null) ? label : command;\n-  }\n-\n-  public void setLabel (String label)\n-  {\n-    this.label = label;\n-    if (peer != null)\n-      {\n-\tButtonPeer bp = (ButtonPeer) peer;\n-\tbp.setLabel (label);\n-      }\n-  }\n-\n-  String label;\n-  String actionCommand;\n-\n-  transient ActionListener actionListener;\n+  return(label);\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the label for this button to the specified value.\n+  *\n+  * @param label The new label for this button.\n+  */\n+public synchronized void\n+setLabel(String label)\n+{\n+  this.label = label;\n+  if (peer != null)\n+    {\n+      ButtonPeer bp = (ButtonPeer) peer;\n+      bp.setLabel (label);\n+    }\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the action command name for this button.\n+  *\n+  * @return The action command name for this button.\n+  */\n+public String\n+getActionCommand()\n+{\n+  return(actionCommand);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the action command name for this button to the specified value.\n+  *\n+  * @param actionCommand The new action command name.\n+  */\n+public void\n+setActionCommand(String actionCommand)\n+{\n+  this.actionCommand = actionCommand == null ? label : actionCommand;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Adds a new entry to the list of listeners that will receive\n+  * action events from this button.\n+  *\n+  * @param listener The listener to add.\n+  */\n+public synchronized void\n+addActionListener(ActionListener listener)\n+{\n+  action_listeners = AWTEventMulticaster.add(action_listeners, listener);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Removes the specified listener from the list of listeners that will\n+  * receive action events from this button.\n+  * \n+  * @param listener The listener to remove.\n+  */\n+public synchronized void\n+removeActionListener(ActionListener listener)\n+{\n+  action_listeners = AWTEventMulticaster.remove(action_listeners, listener);\n+}\n+\n+public EventListener[]\n+getListeners(Class listenerType)\n+{\n+  if (listenerType == ActionListener.class)\n+    return getListenersImpl(listenerType, action_listeners);\n+  return super.getListeners(listenerType);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Notifies this button that it should create its native peer object.\n+  */\n+public void\n+addNotify()\n+{\n+  if (peer == null)\n+    peer = getToolkit ().createButton (this);\n+  super.addNotify();\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Processes an event for this button.  If the specified event is an\n+  * instance of <code>ActionEvent</code>, then the\n+  * <code>processActionEvent()</code> method is called to dispatch it\n+  * to any registered listeners.  Otherwise, the superclass method\n+  * will be invoked.  Note that this method will not be called at all\n+  * unless <code>ActionEvent</code>'s are enabled.  This will be done\n+  * implicitly if any listeners are added.\n+  *\n+  * @param event The event to process.\n+  */\n+protected void\n+processEvent(AWTEvent event)\n+{\n+  if (event instanceof ActionEvent)\n+    processActionEvent((ActionEvent)event);\n+  else\n+    super.processEvent(event);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method dispatches an action event for this button to any\n+  * registered listeners.\n+  *\n+  * @param event The event to process.\n+  */\n+protected void\n+processActionEvent(ActionEvent event)\n+{\n+  if (action_listeners != null)\n+    action_listeners.actionPerformed(event);\n+}\n+\n+void\n+dispatchEventImpl(AWTEvent e)\n+{\n+  super.dispatchEventImpl(e);\n+\n+  if (e.id <= ActionEvent.ACTION_LAST \n+      && e.id >= ActionEvent.ACTION_FIRST\n+      && (action_listeners != null \n+\t  || (eventMask & AWTEvent.ACTION_EVENT_MASK) != 0))\n+    processEvent(e);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a debugging string for this button.\n+  *\n+  * @return A debugging string for this button.\n+  */\n+protected String\n+paramString()\n+{\n+  return(getClass().getName() + \"(label=\" + getLabel() + \",actionCommand=\" +\n+         getActionCommand() + \")\");\n+}\n+\n+} // class Button \n+"}, {"sha": "41a085ffb078c61df359a49196193fde4e3b3ff2", "filename": "libjava/java/awt/MenuComponent.java", "status": "modified", "additions": 303, "deletions": 111, "changes": 414, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10185e388637c0d5349447110c02563207746646/libjava%2Fjava%2Fawt%2FMenuComponent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10185e388637c0d5349447110c02563207746646/libjava%2Fjava%2Fawt%2FMenuComponent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMenuComponent.java?ref=10185e388637c0d5349447110c02563207746646", "patch": "@@ -1,120 +1,312 @@\n-/* Copyright (C) 1999, 2000  Free Software Foundation\n+/* MenuComponent.java -- Superclass of all AWT menu components\n+   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt;\n \n-/* Status: partially complete, untested. */\n+import java.awt.peer.MenuComponentPeer;\n+\n+// FIXME: Java 1.0 event model unimplemented\n \n+/**\n+  * This is the superclass of all non-menu AWT widgets. \n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n public abstract class MenuComponent implements java.io.Serializable\n {\n-  // Fields from the serialization spec. Decalare others \"transient\".\n-  Font font;\n-  String name;\n-  boolean nameExplicitlySet;\n-  boolean newEventsOnly;\n-  //AccessibleContext accessibleContext;\n-  \n-  transient MenuContainer parent;\n-  transient java.awt.peer.MenuComponentPeer peer;\n-\n-  public MenuComponent()\n-  {\n-  }\n-\n-  public String getName()\n-  {\n-    if (name == null && !nameExplicitlySet)\n-      name = generateName();\n-    return name;\n-  }\n-  \n-  /** Subclasses should override this to generate unique names like \n-    * \"menuitem0\".\n-    */\n-  String generateName()\n-  {\n-    // MenuComponent is abstract.\n-    return null;\n-  }\n-\n-  public void setName(String name)\n-  {\n-    nameExplicitlySet = true;\n-    this.name = name;\n-  }\n-\n-  public MenuContainer getParent()\n-  {\n-    return parent;\n-  }\n-\n-  /** @deprecated Don't use this. */\n-  public java.awt.peer.MenuComponentPeer getPeer()\n-  {\n-    return peer;\n-  }\n-\n-  public Font getFont()\n-  {\n-    return font;\n-  }\n-\n-  public void setFont(Font f)\n-  {\n-    this.font = f;\n-  }\n-\n-  public void removeNotify()\n-  {\n-    if (peer != null)\n-      peer.dispose ();\n-    peer = null;\n-  }\n-\n-  /** @deprecated Replaced by dispatchEvent(AWTEvent) */\n-  public boolean postEvent(Event evt)\n-  {\n-    return false;\n-  }\n-\n-  public final void dispatchEvent(AWTEvent e)\n-  {\n-    // FIXME\n-    dispatchEventImpl(e);\n-  }\n-  \n-  void dispatchEventImpl(AWTEvent e)\n-  {\n-    // This is overridden by subclasses that support events.\n-  }\n-\n-  protected void processEvent(AWTEvent e)\n-  {\n-    // Nothing to do here? This is be overridden by subclasses that \n-    // support events.\n-  }\n-\n-  protected String paramString()\n-  {\n-    return name;\n-  }\n-\n-  public String toString()\n-  {\n-    return this.getClass().getName() + \"[\" + paramString() + \"]\";\n-  }\n-\n-  protected final Object getTreeLock()\n-  {\n-    // FIXME: figure out how the tree lock works.\n-    return null;\n-  }\n-\n-  // Accessibility API not yet implemented.\n-  // public AccessibleContext getAccessibleContext()\n+\n+/*\n+ * Static Variables\n+ */\n+\n+// Serialization Constant\n+private static final long serialVersionUID = -4536902356223894379L;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+  // FIXME: missing serialized fields `nameExplicitlySet',\n+  // `newEventsOnly', and `accessibleContext'.\n+\n+// The font for this component\n+private Font font;\n+\n+// The name of the component\n+private String name;\n+\n+// The parent of this component\n+transient MenuContainer parent;\n+\n+// The native peer for this componet\n+transient MenuComponentPeer peer;\n+\n+// The synchronization locking object for this component\n+private transient Object tree_lock = this;\n+\n+// The toolkit for this object\n+private static transient Toolkit toolkit = Toolkit.getDefaultToolkit();\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Default constructor for subclasses.\n+  */\n+protected\n+MenuComponent()\n+{\n }\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * Returns the font in use for this component.\n+  *\n+  * @return The font for this component.\n+  */\n+public Font\n+getFont()\n+{\n+  return(font);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the font for this component to the specified font.\n+  *\n+  * @param font The new font for this component.\n+  */\n+public void\n+setFont(Font font)\n+{\n+  this.font = font;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the name of this component.\n+  *\n+  * @return The name of this component.\n+  */\n+public String\n+getName()\n+{\n+  return(name);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the name of this component to the specified name.\n+  *\n+  * @param name The new name of this component.\n+  */\n+public void\n+setName(String name)\n+{\n+  this.name = name;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the parent of this component.\n+  * \n+  * @return The parent of this component.\n+  */\n+public MenuContainer\n+getParent()\n+{\n+  return(parent);\n+} \n+\n+/*************************************************************************/\n+\n+// Sets the parent of this component.\n+final void\n+setParent(MenuContainer parent)\n+{\n+  this.parent = parent;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the native windowing system peer for this component.\n+  *\n+  * @return The peer for this component.\n+  */\n+public MenuComponentPeer\n+getPeer()\n+{\n+  return(peer);\n+}\n+\n+/*************************************************************************/\n+\n+// Sets the peer for this component.\n+final void\n+setPeer(MenuComponentPeer peer)\n+{\n+  this.peer = peer;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Destroys this component's native peer\n+  */\n+public void\n+removeNotify()\n+{\n+  if (peer != null)\n+    peer.dispose();\n+  peer = null;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the toolkit in use for this component.\n+  *\n+  * @return The toolkit for this component.\n+  */\n+final Toolkit\n+getToolkit()\n+{\n+  return(toolkit);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the object used for synchronization locks on this component\n+  * when performing tree and layout functions.\n+  *\n+  * @return The synchronization lock for this component.\n+  */\n+public final Object\n+getTreeLock()\n+{\n+  return(tree_lock);\n+}\n+\n+/*************************************************************************/\n+\n+// The sync lock object for this component.\n+final void\n+setTreeLock(Object tree_lock)\n+{\n+  this.tree_lock = tree_lock;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * AWT 1.0 event dispatcher.\n+  *\n+  * @deprecated Deprecated in favor of <code>dispatchEvent()</code>.\n+  */\n+public boolean\n+postEvent(Event event)\n+{\n+  return(false);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sends this event to this component or a subcomponent for processing.\n+  *\n+  * @param event The event to dispatch\n+  */\n+public final void\n+dispatchEvent(AWTEvent event)\n+{\n+  // See comment in Component.dispatchEvent().\n+  dispatchEventImpl(event);\n+}\n+\n+void\n+dispatchEventImpl(AWTEvent e)\n+{\n+  // This is overridden by subclasses that support events.\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Processes the specified event.  In this class, this method simply\n+  * calls one of the more specific event handlers.\n+  * \n+  * @param event The event to process.\n+  */\n+protected void\n+processEvent(AWTEvent event)\n+{\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a string representation of this component.\n+  *\n+  * @return A string representation of this component\n+  */\n+public String\n+toString()\n+{\n+  return(getClass().getName() + \"(\" + getName() + \")\");\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a debugging string for this component\n+  */\n+protected String\n+paramString()\n+{\n+  return(toString());\n+}\n+\n+// Accessibility API not yet implemented.\n+// public AccessibleContext getAccessibleContext()\n+\n+} // class Component"}, {"sha": "538dbcfe189ca7223dd5cec403d3d159808b4880", "filename": "libjava/java/awt/MenuItem.java", "status": "modified", "additions": 440, "deletions": 188, "changes": 628, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10185e388637c0d5349447110c02563207746646/libjava%2Fjava%2Fawt%2FMenuItem.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10185e388637c0d5349447110c02563207746646/libjava%2Fjava%2Fawt%2FMenuItem.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMenuItem.java?ref=10185e388637c0d5349447110c02563207746646", "patch": "@@ -1,195 +1,447 @@\n-/* Copyright (C) 1999, 2000, 2001  Free Software Foundation\n+/* MenuItem.java -- An item in a menu\n+   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt;\n-import java.awt.event.*;\n-import java.util.EventListener;\n+\n import java.awt.peer.MenuItemPeer;\n+import java.awt.peer.MenuComponentPeer;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.util.EventListener;\n+\n+/**\n+  * This class represents an item in a menu.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public class MenuItem extends MenuComponent implements java.io.Serializable\n+{\n+\n+// FIXME: The enabled event mask is not used at this time.\n+\n+/*\n+ * Static Variables\n+ */\n+\n+// Serialization Constant\n+private static final long serialVersionUID = -21757335363267194L;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+/**\n+  * @serial The name of the action command generated by this item.\n+  */\n+private String actionCommand;\n+\n+/**\n+  * @serial Indicates whether or not this menu item is enabled.\n+  */\n+private boolean enabled;\n \n-public class MenuItem extends MenuComponent\n-{\n-  // Fields from the serialization spec. Decalare others \"transient\".\n-  boolean enabled;\n-  String label;\n-  String actionCommand;\n-  long eventMask;\n-  MenuShortcut shortcut;\n-  int menuItemSerializedDataVersion;\n-\n-  transient ActionListener actionListener;\n-\n-  public MenuItem ()\n-  {\n-    this.label = \"\";\n-  }\n-\n-  public MenuItem (String label)\n-  {\n-    this.label = label;\n-  }\n-\n-  public MenuItem (String label, MenuShortcut shortcut)\n-  {\n-    this.label = label;\n-    this.shortcut = shortcut;\n-  }\n-\n-  public String getLabel()\n-  {\n-    return label;\n-  }\n-\n-  public synchronized void setLabel(String label)\n-  {\n-    this.label = label;\n-    if (peer != null)\n-      {\n-\tMenuItemPeer mp = (MenuItemPeer) peer;\n-\tmp.setLabel (label);\n-      }\n-  }\n-\n-  public boolean isEnabled()\n-  {\n-    return enabled;\n-  }\n-\n-  public synchronized void setEnabled(boolean b)\n-  {\n-    // The JCL says this method is ignored if the enabled state does\n-    // not change.  I take that to mean that the peer is not notified\n-    // in this case.\n-    if (this.enabled != b)\n-      {\n-\tthis.enabled = b;\n-\tif (peer != null)\n-\t  {\n-\t    MenuItemPeer mp = (MenuItemPeer) peer;\n-\t    mp.setEnabled (b);\n-\t  }\n-      }\n-  }\n-\n-  /** @deprecated Use setEnabled() instead. */\n-  public void enable()\n-  {\n-    setEnabled(true);\n-  }\n-\n-  /** @deprecated Use setEnabled() instead. */\n-  public void enable(boolean b)\n-  {\n-    setEnabled(b);\n-  }\n-\n-  /** @deprecated Use setEnabled() instead. */\n-  public void disable()\n-  {\n-    setEnabled(false);\n-  }\n-\n-  public MenuShortcut getShortcut()\n-  {\n-    return shortcut;\n-  }\n-\n-  public void setShortcut(MenuShortcut s)\n-  {\n-    this.shortcut = s;\n-  }\n-\n-  public void deleteShortcut()\n-  {\n-    setShortcut(null);\n-  }\n-\n-  protected final void enableEvents(long eventsToEnable)\n-  {\n-    eventMask |= eventsToEnable;\n-    // TODO: see comment in Component.enableEvents().    \n-  }\n-\n-  protected final void disableEvents(long eventsToDisable)\n-  {\n-    eventMask &= ~eventsToDisable;    \n-  }\n-\n-  public void setActionCommand(String command)\n-  {\n-    this.actionCommand = command;\n-  }\n-\n-  public String getActionCommand()\n-  {\n-    return actionCommand;\n-  }\n-\n-  public synchronized void addActionListener(ActionListener l)\n-  {\n-    actionListener = AWTEventMulticaster.add(actionListener, l);\n-    if (actionListener != null)\n-      enableEvents(AWTEvent.ACTION_EVENT_MASK);\n-  }\n-\n-  public synchronized void removeActionListener(ActionListener l)\n-  {\n-    actionListener = AWTEventMulticaster.remove(actionListener, l);\n-  }\n-\n-  public void addNotify ()\n-  {\n-    if (peer != null)\n-      {\n-\t// This choice of toolkit seems unsatisfying, but I'm not sure\n-\t// what else to do.\n-\tpeer = Toolkit.getDefaultToolkit ().createMenuItem (this);\n-      }\n-  }\n-\n-  /** Returns all registered EventListers of the given listenerType. \n-    * listenerType must be a subclass of EventListener, or a \n-    * ClassClassException is thrown.\n-    * @since 1.3 \n-    */\n-  public EventListener[] getListeners(Class listenerType)\n-  {\n-    if (listenerType == ActionListener.class)\n-      return Component.getListenersImpl(listenerType, actionListener);\n-    else\n-      return Component.getListenersImpl(listenerType, null);\n-  }\n-\n-  void dispatchEventImpl(AWTEvent e)\n-  {\n-    if (e.id <= ActionEvent.ACTION_LAST \n-\t&& e.id >= ActionEvent.ACTION_FIRST\n-\t&& (actionListener != null\n-\t    || (eventMask & AWTEvent.ACTION_EVENT_MASK) != 0))\n-      processEvent(e);\n-  }\n-\n-  protected void processEvent(AWTEvent e)\n-  {\n-    if (e instanceof ActionEvent)\n-      processActionEvent((ActionEvent) e);\n-  }\n-\n-  protected void processActionEvent(ActionEvent e)\n-  {\n-    if (actionListener != null)\n-      actionListener.actionPerformed(e);\n-  }\n-\n-  public String paramString()\n-  {\n-    return name + \",label=\" + label;\n-  }\n-\n-  // Accessibility API not yet implemented.\n-  // public AccessibleContext getAccessibleContext()\n+/**\n+  * @serial The mask of events that are enabled for this menu item.\n+  */\n+private long eventMask;\n+\n+/**\n+  * @serial This menu item's label\n+  */\n+private String label;\n+\n+/**\n+  * @serial The shortcut for this menu item, if any\n+  */\n+private MenuShortcut shortcut;\n+\n+// The list of action listeners for this menu item.\n+private transient ActionListener action_listeners;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Initializes a new instance of <code>MenuItem</code> with no label\n+  * and no shortcut.\n+  */\n+public\n+MenuItem()\n+{\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>MenuItem</code> with the specified\n+  * label and no shortcut.\n+  *\n+  * @param label The label for this menu item.\n+  */\n+public \n+MenuItem(String label)\n+{\n+  this.label = label;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>MenuItem</code> with the specified\n+  * label and shortcut.\n+  *\n+  * @param label The label for this menu item.\n+  * @param shortcut The shortcut for this menu item.\n+  */\n+public\n+MenuItem(String label, MenuShortcut shortcut)\n+{\n+  this.label = label;\n+  this.shortcut = shortcut;\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * Returns the label for this menu item, which may be <code>null</code>.\n+  *\n+  * @return The label for this menu item.\n+  */\n+public String\n+getLabel()\n+{\n+  return(label);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the label for this menu to the specified value.\n+  *\n+  * @param label The new label for this menu item.\n+  */\n+public synchronized void\n+setLabel(String label)\n+{\n+  this.label = label;\n+  if (peer != null)\n+    {\n+      MenuItemPeer mp = (MenuItemPeer) peer;\n+      mp.setLabel (label);\n+    }\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Tests whether or not this menu item is enabled.\n+  *\n+  * @return <code>true</code> if this menu item is enabled, <code>false</code>\n+  * otherwise.\n+  */\n+public boolean\n+isEnabled()\n+{\n+  return(enabled);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the enabled status of this menu item.\n+  * \n+  * @param enabled <code>true</code> to enable this menu item,\n+  * <code>false</code> otherwise.\n+  */\n+public synchronized void\n+setEnabled(boolean enabled)\n+{\n+  if (enabled == this.enabled)\n+    return;\n+\n+  this.enabled = enabled;\n+  if (peer != null)\n+    {\n+      MenuItemPeer mp = (MenuItemPeer) peer;\n+      mp.setEnabled (enabled);\n+    }\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the enabled status of this menu item.\n+  * \n+  * @param enabled <code>true</code> to enable this menu item,\n+  * <code>false</code> otherwise.\n+  *\n+  * @deprecated This method is deprecated in favor of <code>setEnabled()</code>.\n+  */\n+public void\n+enable(boolean enabled)\n+{\n+  setEnabled(enabled);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Enables this menu item.\n+  *\n+  * @deprecated This method is deprecated in favor of <code>setEnabled()</code>.\n+  */\n+public void\n+enable()\n+{\n+  setEnabled(true);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Disables this menu item.\n+  *\n+  * @deprecated This method is deprecated in favor of <code>setEnabled()</code>.\n+  */\n+public void\n+disable()\n+{\n+  setEnabled(false);\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the shortcut for this menu item, which may be <code>null</code>.\n+  *\n+  * @return The shortcut for this menu item.\n+  */\n+public MenuShortcut\n+getShortcut()\n+{\n+  return(shortcut);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the shortcut for this menu item to the specified value.  This\n+  * must be done before the native peer is created.\n+  *\n+  * @param shortcut The new shortcut for this menu item.\n+  */\n+public void\n+setShortcut(MenuShortcut shortcut)\n+{\n+  this.shortcut = shortcut;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Deletes the shortcut for this menu item if one exists.  This must be\n+  * done before the native peer is created.\n+  */\n+public void\n+deleteShortcut()\n+{\n+  shortcut = null;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the name of the action command in the action events\n+  * generated by this menu item.\n+  *\n+  * @return The action command name\n+  */\n+public String\n+getActionCommand()\n+{\n+  return(actionCommand);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the name of the action command in the action events generated by\n+  * this menu item.\n+  *\n+  * @param actionCommand The new action command name.\n+  */\n+public void\n+setActionCommand(String actionCommand)\n+{\n+  this.actionCommand = actionCommand;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Enables the specified events.  This is done automatically when a \n+  * listener is added and does not normally need to be done by\n+  * application code.\n+  *\n+  * @param events The events to enable, which should be the bit masks\n+  * from <code>AWTEvent</code>.\n+  */\n+protected final void\n+enableEvents(long events)\n+{\n+  eventMask |= events;\n+  // TODO: see comment in Component.enableEvents().    \n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Disables the specified events.\n+  *\n+  * @param events The events to enable, which should be the bit masks\n+  * from <code>AWTEvent</code>.\n+  */\n+protected final void\n+disableEvents(long events)\n+{\n+  eventMask &= ~events;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Creates the native peer for this object.\n+  */\n+public void\n+addNotify()\n+{\n+  if (peer != null)\n+    peer = getToolkit ().createMenuItem (this);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Adds the specified listener to the list of registered action listeners\n+  * for this component.\n+  *\n+  * @param listener The listener to add.\n+  */\n+public synchronized void\n+addActionListener(ActionListener listener)\n+{\n+  action_listeners = AWTEventMulticaster.add(action_listeners, listener);\n+\n+  enableEvents(AWTEvent.ACTION_EVENT_MASK);\n+}\n+\n+public synchronized void\n+removeActionListener(ActionListener l)\n+{\n+  action_listeners = AWTEventMulticaster.remove(action_listeners, l);\n+}\n+\n+/** Returns all registered EventListers of the given listenerType. \n+ * listenerType must be a subclass of EventListener, or a \n+ * ClassClassException is thrown.\n+ * @since 1.3 \n+ */\n+public EventListener[]\n+getListeners(Class listenerType)\n+{\n+  if (listenerType == ActionListener.class)\n+    return Component.getListenersImpl(listenerType, action_listeners);\n+  else\n+    return Component.getListenersImpl(listenerType, null);\n+}\n+\n+/*************************************************************************/\n+\n+void\n+dispatchEventImpl(AWTEvent e)\n+{\n+  if (e.id <= ActionEvent.ACTION_LAST \n+      && e.id >= ActionEvent.ACTION_FIRST\n+      && (action_listeners != null\n+\t  || (eventMask & AWTEvent.ACTION_EVENT_MASK) != 0))\n+    processEvent(e);\n+}\n+\n+/**\n+  * Processes the specified event by calling <code>processActionEvent()</code>\n+  * if it is an instance of <code>ActionEvent</code>.\n+  *\n+  * @param event The event to process.\n+  */\n+protected void\n+processEvent(AWTEvent event)\n+{\n+  if (event instanceof ActionEvent)\n+    processActionEvent((ActionEvent)event);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Processes the specified event by dispatching it to any registered listeners.\n+  *\n+  * @param event The event to process.\n+  */\n+protected void\n+processActionEvent(ActionEvent event)\n+{\n+  if (action_listeners != null)\n+    action_listeners.actionPerformed(event);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a debugging string for this object.\n+  *\n+  * @return A debugging string for this object.\n+  */\n+public String\n+paramString()\n+{\n+  return(getClass().getName() + \"(label+\" + label + \",enabled=\" + enabled +\n+         \",actionCommand=\" + actionCommand + \")\");\n+}\n+\n+// Accessibility API not yet implemented.\n+// public AccessibleContext getAccessibleContext()\n+\n+} // class MenuItem "}]}