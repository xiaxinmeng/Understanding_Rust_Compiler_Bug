{"sha": "c240868146f0421a88ea96f9fdbe42e0327805be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI0MDg2ODE0NmYwNDIxYTg4ZWE5NmY5ZmRiZTQyZTAzMjc4MDViZQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-04-16T20:53:07Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-04-16T20:53:07Z"}, "message": "re PR fortran/35932 (ICE: CHAR with array arg and also a KIND arg)\n\n2008-04-16  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/35932\n\t* trans-intrinsic.c (gfc_conv_intrinsic_char): Even though KIND\n\tis not used, the argument must be converted.\n\n2008-04-16  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/35932\n\t* gfortran.dg/intrinsic_char_1.f90: New test.\n\nFrom-SVN: r134364", "tree": {"sha": "b7396555ae74660be2232a9236a2e8e7f45950c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7396555ae74660be2232a9236a2e8e7f45950c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c240868146f0421a88ea96f9fdbe42e0327805be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c240868146f0421a88ea96f9fdbe42e0327805be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c240868146f0421a88ea96f9fdbe42e0327805be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c240868146f0421a88ea96f9fdbe42e0327805be/comments", "author": null, "committer": null, "parents": [{"sha": "64bfac414632be741d0e760d2eacfddb0f72a775", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64bfac414632be741d0e760d2eacfddb0f72a775", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64bfac414632be741d0e760d2eacfddb0f72a775"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "3e4dfa2e0d902315f48b400551aff5555b432fde", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c240868146f0421a88ea96f9fdbe42e0327805be/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c240868146f0421a88ea96f9fdbe42e0327805be/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c240868146f0421a88ea96f9fdbe42e0327805be", "patch": "@@ -1,3 +1,9 @@\n+2008-04-16  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/35932\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_char): Even though KIND\n+\tis not used, the argument must be converted.\n+\n 2008-04-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/35662"}, {"sha": "e832b8a30e99c8a533876ecfee129a0f3f64aaba", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c240868146f0421a88ea96f9fdbe42e0327805be/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c240868146f0421a88ea96f9fdbe42e0327805be/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=c240868146f0421a88ea96f9fdbe42e0327805be", "patch": "@@ -1266,19 +1266,22 @@ gfc_conv_intrinsic_dprod (gfc_se * se, gfc_expr * expr)\n static void\n gfc_conv_intrinsic_char (gfc_se * se, gfc_expr * expr)\n {\n-  tree arg;\n+  tree arg[2];\n   tree var;\n   tree type;\n+  unsigned int num_args;\n \n-  gfc_conv_intrinsic_function_args (se, expr, &arg, 1);\n+  /* We must allow for the KIND argument, even though.... */\n+  num_args = gfc_intrinsic_argument_list_length (expr);\n+  gfc_conv_intrinsic_function_args (se, expr, arg, num_args);\n \n-  /* We currently don't support character types != 1.  */\n+  /* .... we currently don't support character types != 1.  */\n   gcc_assert (expr->ts.kind == 1);\n   type = gfc_character1_type_node;\n   var = gfc_create_var (type, \"char\");\n \n-  arg = convert (type, arg);\n-  gfc_add_modify_expr (&se->pre, var, arg);\n+  arg[0] = convert (type, arg[0]);\n+  gfc_add_modify_expr (&se->pre, var, arg[0]);\n   se->expr = gfc_build_addr_expr (build_pointer_type (type), var);\n   se->string_length = integer_one_node;\n }"}, {"sha": "2c6e58b396ca697fee98c9f397fc8b522d4e9534", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c240868146f0421a88ea96f9fdbe42e0327805be/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c240868146f0421a88ea96f9fdbe42e0327805be/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c240868146f0421a88ea96f9fdbe42e0327805be", "patch": "@@ -1,3 +1,8 @@\n+2008-04-16  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/35932\n+\t* gfortran.dg/intrinsic_char_1.f90: New test.\n+\n 2008-04-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR target/35944"}, {"sha": "845493cb649cd5d052954dc8516d2bed41feec86", "filename": "gcc/testsuite/gfortran.dg/intrinsic_char_1.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c240868146f0421a88ea96f9fdbe42e0327805be/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_char_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c240868146f0421a88ea96f9fdbe42e0327805be/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_char_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_char_1.f90?ref=c240868146f0421a88ea96f9fdbe42e0327805be", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do run }\n+! Tests the fix for PR35932, in which the KIND argument of CHAR\n+! was not converted and this screwed up the scalarizer.\n+!\n+! Contributed by Dick Hendrickson <dick.hendrickson@gmail.com>\n+!\n+program FA0005\n+\n+  CHARACTER(1) CDA1(10)\n+  character(10) CDA10\n+  INTEGER :: IDA(10) = [(i, i = 97,106)]\n+\n+  CDA1 = CHAR (  IDA, KIND(\"A\" ))     !failed\n+  if (transfer (CDA1, CDA10) /= \"abcdefghij\") call abort ()\n+  CDA1 = CHAR (  IDA  )               !worked\n+  if (transfer (CDA1, CDA10) /= \"abcdefghij\") call abort ()\n+END "}]}