{"sha": "9661b15f951d61710cadd3b4c85d5b29078e116e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY2MWIxNWY5NTFkNjE3MTBjYWRkM2I0Yzg1ZDViMjkwNzhlMTE2ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2003-04-28T19:58:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2003-04-28T19:58:52Z"}, "message": "c-decl.c (finish_decl): When prototype with asmspec is found for built-in...\n\n\t* c-decl.c (finish_decl): When prototype with asmspec is found\n\tfor built-in, adjust built_in_decls as well as expr.c decls.\n\t* expr.c (init_block_move_fn, init_block_clear_fn): New functions.\n\t(emit_block_move_libcall_fn, clear_storage_libcall_fn): Use it.\n\t* expr.c (init_block_move_fn, init_block_clear_fn): New prototypes.\n\n\t* gcc.c-torture/execute/string-opt-asm-1.c: New test.\n\t* gcc.c-torture/execute/string-opt-asm-2.c: New test.\n\nFrom-SVN: r66181", "tree": {"sha": "331faf76cb1d514411e5707a36e1f12f9c9dcbdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/331faf76cb1d514411e5707a36e1f12f9c9dcbdb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9661b15f951d61710cadd3b4c85d5b29078e116e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9661b15f951d61710cadd3b4c85d5b29078e116e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9661b15f951d61710cadd3b4c85d5b29078e116e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9661b15f951d61710cadd3b4c85d5b29078e116e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "62a3446bb83d9c091ba650e10eb21fd9d4577cc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62a3446bb83d9c091ba650e10eb21fd9d4577cc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62a3446bb83d9c091ba650e10eb21fd9d4577cc1"}], "stats": {"total": 321, "additions": 297, "deletions": 24}, "files": [{"sha": "ecf8202b84e32ac5c7b4257ab0d97431ae546656", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9661b15f951d61710cadd3b4c85d5b29078e116e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9661b15f951d61710cadd3b4c85d5b29078e116e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9661b15f951d61710cadd3b4c85d5b29078e116e", "patch": "@@ -1,3 +1,11 @@\n+2003-04-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-decl.c (finish_decl): When prototype with asmspec is found\n+\tfor built-in, adjust built_in_decls as well as expr.c decls.\n+\t* expr.c (init_block_move_fn, init_block_clear_fn): New functions.\n+\t(emit_block_move_libcall_fn, clear_storage_libcall_fn): Use it.\n+\t* expr.c (init_block_move_fn, init_block_clear_fn): New prototypes.\n+\n 2003-04-28  Richard Henderson  <rth@redhat.com>\n \n         * config/sparc/sparc.c (print_operand): Add 's' to sign-extend."}, {"sha": "e16c2b6205c735940666c18538c5586e7c7bb397", "filename": "gcc/c-decl.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9661b15f951d61710cadd3b4c85d5b29078e116e/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9661b15f951d61710cadd3b4c85d5b29078e116e/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=9661b15f951d61710cadd3b4c85d5b29078e116e", "patch": "@@ -2867,12 +2867,28 @@ finish_decl (decl, init, asmspec_tree)\n \tTREE_USED (decl) = 1;\n     }\n \n-  /* If this is a function and an assembler name is specified, it isn't\n-     builtin any more.  Also reset DECL_RTL so we can give it its new\n-     name.  */\n+  /* If this is a function and an assembler name is specified, reset DECL_RTL\n+     so we can give it its new name.  Also, update built_in_decls if it\n+     was a normal built-in.  */\n   if (TREE_CODE (decl) == FUNCTION_DECL && asmspec)\n     {\n-      DECL_BUILT_IN_CLASS (decl) = NOT_BUILT_IN;\n+      if (DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL)\n+\t{\n+\t  tree builtin = built_in_decls [DECL_FUNCTION_CODE (decl)];\n+\t  SET_DECL_RTL (builtin, NULL_RTX);\n+\t  SET_DECL_ASSEMBLER_NAME (builtin, get_identifier (asmspec));\n+#ifdef TARGET_MEM_FUNCTIONS\n+\t  if (DECL_FUNCTION_CODE (decl) == BUILT_IN_MEMCPY)\n+\t    init_block_move_fn (asmspec);\n+\t  else if (DECL_FUNCTION_CODE (decl) == BUILT_IN_MEMSET)\n+\t    init_block_clear_fn (asmspec);\n+#else\n+\t  if (DECL_FUNCTION_CODE (decl) == BUILT_IN_BCOPY)\n+\t    init_block_move_fn (asmspec);\n+\t  else if (DECL_FUNCTION_CODE (decl) == BUILT_IN_BZERO)\n+\t    init_block_clear_fn (asmspec);\n+#endif\n+\t}\n       SET_DECL_RTL (decl, NULL_RTX);\n       SET_DECL_ASSEMBLER_NAME (decl, get_identifier (asmspec));\n     }"}, {"sha": "73f9baf6eb5081f71acbe5fda4e5187eae3e05b4", "filename": "gcc/expr.c", "status": "modified", "additions": 50, "deletions": 20, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9661b15f951d61710cadd3b4c85d5b29078e116e/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9661b15f951d61710cadd3b4c85d5b29078e116e/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=9661b15f951d61710cadd3b4c85d5b29078e116e", "patch": "@@ -1994,15 +1994,14 @@ emit_block_move_via_libcall (dst, src, size)\n \n static GTY(()) tree block_move_fn;\n \n-static tree\n-emit_block_move_libcall_fn (for_call)\n-      int for_call;\n+void\n+init_block_move_fn (asmspec)\n+     const char *asmspec;\n {\n-  static bool emitted_extern;\n-  tree fn = block_move_fn, args;\n-\n-  if (!fn)\n+  if (!block_move_fn)\n     {\n+      tree fn, args;\n+\n       if (TARGET_MEM_FUNCTIONS)\n \t{\n \t  fn = get_identifier (\"memcpy\");\n@@ -2027,14 +2026,30 @@ emit_block_move_libcall_fn (for_call)\n       block_move_fn = fn;\n     }\n \n+  if (asmspec)\n+    {\n+      SET_DECL_RTL (block_move_fn, NULL_RTX);\n+      SET_DECL_ASSEMBLER_NAME (block_move_fn, get_identifier (asmspec));\n+    }\n+}\n+\n+static tree\n+emit_block_move_libcall_fn (for_call)\n+     int for_call;\n+{\n+  static bool emitted_extern;\n+\n+  if (!block_move_fn)\n+    init_block_move_fn (NULL);\n+\n   if (for_call && !emitted_extern)\n     {\n       emitted_extern = true;\n-      make_decl_rtl (fn, NULL);\n-      assemble_external (fn);\n+      make_decl_rtl (block_move_fn, NULL);\n+      assemble_external (block_move_fn);\n     }\n \n-  return fn;\n+  return block_move_fn;\n }\n \n /* A subroutine of emit_block_move.  Copy the data via an explicit\n@@ -3089,15 +3104,14 @@ clear_storage_via_libcall (object, size)\n \n static GTY(()) tree block_clear_fn;\n \n-static tree\n-clear_storage_libcall_fn (for_call)\n-     int for_call;\n+void\n+init_block_clear_fn (asmspec)\n+     const char *asmspec;\n {\n-  static bool emitted_extern;\n-  tree fn = block_clear_fn, args;\n-\n-  if (!fn)\n+  if (!block_clear_fn)\n     {\n+      tree fn, args;\n+\n       if (TARGET_MEM_FUNCTIONS)\n \t{\n \t  fn = get_identifier (\"memset\");\n@@ -3121,14 +3135,30 @@ clear_storage_libcall_fn (for_call)\n       block_clear_fn = fn;\n     }\n \n+  if (asmspec)\n+    {\n+      SET_DECL_RTL (block_clear_fn, NULL_RTX);\n+      SET_DECL_ASSEMBLER_NAME (block_clear_fn, get_identifier (asmspec));\n+    }\n+}\n+\n+static tree\n+clear_storage_libcall_fn (for_call)\n+     int for_call;\n+{\n+  static bool emitted_extern;\n+\n+  if (!block_clear_fn)\n+    init_block_clear_fn (NULL);\n+\n   if (for_call && !emitted_extern)\n     {\n       emitted_extern = true;\n-      make_decl_rtl (fn, NULL);\n-      assemble_external (fn);\n+      make_decl_rtl (block_clear_fn, NULL);\n+      assemble_external (block_clear_fn);\n     }\n \n-  return fn;\n+  return block_clear_fn;\n }\n \f\n /* Generate code to copy Y into X."}, {"sha": "7e157cdf30225449f834a162e6f627e4ea26e017", "filename": "gcc/expr.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9661b15f951d61710cadd3b4c85d5b29078e116e/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9661b15f951d61710cadd3b4c85d5b29078e116e/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=9661b15f951d61710cadd3b4c85d5b29078e116e", "patch": "@@ -385,6 +385,9 @@ enum block_op_methods\n   BLOCK_OP_CALL_PARM\n };\n \n+extern void init_block_move_fn PARAMS ((const char *));\n+extern void init_block_clear_fn PARAMS ((const char *));\n+\n extern rtx emit_block_move PARAMS ((rtx, rtx, rtx, enum block_op_methods));\n \n /* Copy all or part of a value X into registers starting at REGNO."}, {"sha": "ccd7e529dfc5ac5b984e1a5e3fdf7596a0dfc19a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9661b15f951d61710cadd3b4c85d5b29078e116e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9661b15f951d61710cadd3b4c85d5b29078e116e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9661b15f951d61710cadd3b4c85d5b29078e116e", "patch": "@@ -2,6 +2,9 @@\n \n \t* gcc.c-torture/execute/string-opt-19.c: New test.\n \n+\t* gcc.c-torture/execute/string-opt-asm-1.c: New test.\n+\t* gcc.c-torture/execute/string-opt-asm-2.c: New test.\n+\n 2003-04-27  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/10506"}, {"sha": "5f50f91c550f884906c9d06758b7a23bf59fa3b3", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-asm-1.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9661b15f951d61710cadd3b4c85d5b29078e116e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-asm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9661b15f951d61710cadd3b4c85d5b29078e116e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-asm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-asm-1.c?ref=9661b15f951d61710cadd3b4c85d5b29078e116e", "patch": "@@ -0,0 +1,82 @@\n+/* Copyright (C) 2000, 2003  Free Software Foundation.\n+\n+   Ensure all expected transformations of builtin strstr occur and\n+   perform correctly in presence of redirect.  */\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern void abort (void);\n+extern char *strstr (const char *, const char *)\n+  __asm (\"my_strstr\");\n+extern char *strchr (const char *, int);\n+extern int strcmp (const char *, const char *);\n+extern int strncmp (const char *, const char *, size_t);\n+\n+const char *p = \"rld\", *q = \"hello world\";\n+\n+int\n+main (void)\n+{\n+  const char *const foo = \"hello world\";\n+  \n+  if (strstr (foo, \"\") != foo)\n+    abort ();\n+  if (strstr (foo + 4, \"\") != foo + 4)\n+    abort ();\n+  if (strstr (foo, \"h\") != foo)\n+    abort ();\n+  if (strstr (foo, \"w\") != foo + 6)\n+    abort ();\n+  if (strstr (foo + 6, \"o\") != foo + 7)\n+    abort ();\n+  if (strstr (foo + 1, \"world\") != foo + 6)\n+    abort ();\n+  if (strstr (foo + 2, p) != foo + 8)\n+    abort ();\n+  if (strstr (q, \"\") != q)\n+    abort ();\n+  if (strstr (q + 1, \"o\") != q + 4)\n+    abort ();\n+\n+  /* Test at least one instance of the __builtin_ style.  We do this\n+     to ensure that it works and that the prototype is correct.  */\n+  if (__builtin_strstr (foo + 1, \"world\") != foo + 6)\n+    abort ();\n+  \n+  return 0;\n+}\n+\n+/* There should be no calls to real strstr.  */\n+static char *real_strstr (const char *, const char *)\n+  __asm (\"strstr\");\n+\n+__attribute__ ((noinline))\n+static char *\n+real_strstr (const char *s1, const char *s2)\n+{\n+  abort ();\n+}\n+\n+static char *\n+strstr (const char *s1, const char *s2)\n+  __asm (\"my_strstr\");\n+\n+__attribute__ ((noinline))\n+static char *\n+strstr (const char *s1, const char *s2)\n+{\n+  size_t len = strlen (s2);\n+\n+#ifdef __OPTIMIZE__\n+  /* If optimizing, we should be called only in the\n+     strstr (foo + 2, p) case above.  All other cases should\n+     be optimized.  */\n+  if (s2 != p || strcmp (s1, \"hello world\" + 2) != 0)\n+    abort ();\n+#endif\n+  if (len == 0)\n+    return (char *) s1;\n+  for (s1 = strchr (s1, *s2); s1; s1 = strchr (s1 + 1, *s2))\n+    if (strncmp (s1, s2, len) == 0)\n+      return (char *) s1;\n+  return (char *) 0;\n+}"}, {"sha": "9c629a2b8d1a2bb218bfb80ac0e218fd87f108b4", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-asm-2.c", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9661b15f951d61710cadd3b4c85d5b29078e116e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-asm-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9661b15f951d61710cadd3b4c85d5b29078e116e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-asm-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-asm-2.c?ref=9661b15f951d61710cadd3b4c85d5b29078e116e", "patch": "@@ -0,0 +1,131 @@\n+/* Copyright (C) 2003 Free Software Foundation.\n+\n+   Test memcpy and memset in presence of redirect.  */\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern void abort (void);\n+extern void *memcpy (void *, const void *, size_t)\n+  __asm (\"my_memcpy\");\n+extern void bcopy (const void *, void *, size_t)\n+  __asm (\"my_bcopy\");\n+extern void *memset (void *, int, size_t)\n+  __asm (\"my_memset\");\n+extern void bzero (void *, size_t)\n+  __asm (\"my_bzero\");\n+extern int memcmp (const void *, const void *, size_t);\n+\n+struct A { char c[32]; } a = { \"foobar\" };\n+char x[64] = \"foobar\", y[64];\n+int i = 39, j = 6, k = 4;\n+\n+int\n+main (void)\n+{\n+  struct A b = a;\n+  struct A c = { { 'x' } };\n+\n+  if (memcmp (b.c, x, 32) || c.c[0] != 'x' || memcmp (c.c + 1, x + 32, 31))\n+    abort ();\n+  if (__builtin_memcpy (y, x, i) != y || memcmp (x, y, 64))\n+    abort ();\n+  if (memcpy (y + 6, x, j) != y + 6\n+      || memcmp (x, y, 6) || memcmp (x, y + 6, 58))\n+    abort ();\n+  if (__builtin_memset (y + 2, 'X', k) != y + 2\n+      || memcmp (y, \"foXXXXfoobar\", 13))\n+    abort ();\n+  bcopy (y + 1, y + 2, 6);\n+  if (memcmp (y, \"fooXXXXfobar\", 13))\n+    abort ();\n+  __builtin_bzero (y + 4, 2);\n+  if (memcmp (y, \"fooX\\0\\0Xfobar\", 13))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* There should be no calls to real memcpy, memset, bcopy or bzero.  */\n+static void *real_memcpy (void *, const void *, size_t)\n+  __asm (\"memcpy\");\n+static void real_bcopy (const void *, void *, size_t)\n+  __asm (\"bcopy\");\n+static void *real_memset (void *, int, size_t)\n+  __asm (\"memset\");\n+static void real_bzero (void *, size_t)\n+  __asm (\"bzero\");\n+\n+__attribute__ ((noinline))\n+static void *\n+real_memcpy (void *d, const void *s, size_t n)\n+{\n+  abort ();\n+}\n+\n+__attribute__ ((noinline))\n+static void\n+real_bcopy (const void *s, void *d, size_t n)\n+{\n+  abort ();\n+}\n+\n+__attribute__ ((noinline))\n+static void *\n+real_memset (void *d, int c, size_t n)\n+{\n+  abort ();\n+}\n+\n+__attribute__ ((noinline))\n+static void\n+real_bzero (void *d, size_t n)\n+{\n+  abort ();\n+}\n+\n+__attribute__ ((noinline))\n+void *\n+memcpy (void *d, const void *s, size_t n)\n+{\n+  char *dst = (char *) d;\n+  const char *src = (const char *) s;\n+  while (n--)\n+    *dst++ = *src++;\n+  return (char *) d;\n+}\n+\n+__attribute__ ((noinline))\n+void\n+bcopy (const void *s, void *d, size_t n)\n+{\n+  char *dst = (char *) d;\n+  const char *src = (const char *) s;\n+  if (src >= dst)\n+    while (n--)\n+      *dst++ = *src++;\n+  else\n+    {\n+      dst += n;\n+      src += n;\n+      while (n--)\n+        *--dst = *--src;\n+    }\n+}\n+\n+__attribute__ ((noinline))\n+void *\n+memset (void *d, int c, size_t n)\n+{\n+  char *dst = (char *) d;\n+  while (n--)\n+    *dst++ = c;\n+  return (char *) d;\n+}\n+\n+__attribute__ ((noinline))\n+void\n+bzero (void *d, size_t n)\n+{\n+  char *dst = (char *) d;\n+  while (n--)\n+    *dst++ = '\\0';\n+}"}]}