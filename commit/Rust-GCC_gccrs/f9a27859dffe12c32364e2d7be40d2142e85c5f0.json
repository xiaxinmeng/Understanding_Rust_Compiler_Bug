{"sha": "f9a27859dffe12c32364e2d7be40d2142e85c5f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjlhMjc4NTlkZmZlMTJjMzIzNjRlMmQ3YmU0MGQyMTQyZTg1YzVmMA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2017-01-10T12:38:42Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-01-10T12:38:42Z"}, "message": "Make Python printers and xmethods work with versioned namespace\n\n2017-01-10  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\t    Jonathan Wakely  <jwakely@redhat.com>\n\n\t* python/libstdcxx/v6/printers.py (_versioned_namespace): Define.\n\t(is_specialization, strip_versioned_namespace): New helpers functions\n\tto work with symbols in the versioned namespace.\n\t(Printer.add_version): Add second name using versioned namespace.\n\t(add_one_template_type_printer, add_one_type_printer): Add second\n\ttype printers using versioned namespace.\n\t(register_type_printers): Add template type printer for basic_string.\n\t(build_libstdcxx_dictionary): Remove dead code.\n\t* python/libstdcxx/v6/xmethods.py: Make all matchers look for\n\tversioned namespace.\n\t* testsuite/libstdc++-prettyprinters/48362.cc: Adjust expected\n\tresults.\n\t* testsuite/libstdc++-prettyprinters/whatis.cc: Likewise.\n\nCo-Authored-By: Jonathan Wakely <jwakely@redhat.com>\n\nFrom-SVN: r244262", "tree": {"sha": "349d9a3e975a301c7525eea270832328bbfca32b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/349d9a3e975a301c7525eea270832328bbfca32b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9a27859dffe12c32364e2d7be40d2142e85c5f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9a27859dffe12c32364e2d7be40d2142e85c5f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9a27859dffe12c32364e2d7be40d2142e85c5f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9a27859dffe12c32364e2d7be40d2142e85c5f0/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad730facfbf77c30042b711802b1aff317e2b8e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad730facfbf77c30042b711802b1aff317e2b8e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad730facfbf77c30042b711802b1aff317e2b8e2"}], "stats": {"total": 133, "additions": 91, "deletions": 42}, "files": [{"sha": "5667ccf257339c4e7e3da7fba9ab1caa9d895263", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a27859dffe12c32364e2d7be40d2142e85c5f0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a27859dffe12c32364e2d7be40d2142e85c5f0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f9a27859dffe12c32364e2d7be40d2142e85c5f0", "patch": "@@ -1,3 +1,20 @@\n+2017-01-10  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* python/libstdcxx/v6/printers.py (_versioned_namespace): Define.\n+\t(is_specialization, strip_versioned_namespace): New helpers functions\n+\tto work with symbols in the versioned namespace.\n+\t(Printer.add_version): Add second name using versioned namespace.\n+\t(add_one_template_type_printer, add_one_type_printer): Add second\n+\ttype printers using versioned namespace.\n+\t(register_type_printers): Add template type printer for basic_string.\n+\t(build_libstdcxx_dictionary): Remove dead code.\n+\t* python/libstdcxx/v6/xmethods.py: Make all matchers look for\n+\tversioned namespace.\n+\t* testsuite/libstdc++-prettyprinters/48362.cc: Adjust expected\n+\tresults.\n+\t* testsuite/libstdc++-prettyprinters/whatis.cc: Likewise.\n+\n 2017-01-09  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/79017"}, {"sha": "36dd81dd8c8969fa6bb39df35edd5b8397cc5ea2", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 60, "deletions": 28, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a27859dffe12c32364e2d7be40d2142e85c5f0/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a27859dffe12c32364e2d7be40d2142e85c5f0/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=f9a27859dffe12c32364e2d7be40d2142e85c5f0", "patch": "@@ -100,11 +100,26 @@ def find_type(orig, name):\n             raise ValueError(\"Cannot find type %s::%s\" % (str(orig), name))\n         typ = field.type\n \n+_versioned_namespace = '__7::'\n+\n+# Test if a type is a given template instantiation.\n+def is_specialization_of(type, template_name):\n+    global _versioned_namespace\n+    if _versioned_namespace:\n+        return re.match('^std::(%s)?%s<.*>$' % (_versioned_namespace, template_name), type) is not None\n+    return re.match('^std::%s<.*>$' % template_name, type) is not None\n+\n+def strip_versioned_namespace(typename):\n+    global _versioned_namespace\n+    if _versioned_namespace:\n+        return typename.replace(_versioned_namespace, '')\n+    return typename\n+\n class SharedPointerPrinter:\n     \"Print a shared_ptr or weak_ptr\"\n \n     def __init__ (self, typename, val):\n-        self.typename = typename\n+        self.typename = strip_versioned_namespace(typename)\n         self.val = val\n \n     def to_string (self):\n@@ -127,9 +142,9 @@ def __init__ (self, typename, val):\n \n     def to_string (self):\n         impl_type = self.val.type.fields()[0].type.tag\n-        if impl_type.startswith('std::__uniq_ptr_impl<'): # New implementation\n+        if is_specialization_of(impl_type, '__uniq_ptr_impl'): # New implementation\n             v = self.val['_M_t']['_M_t']['_M_head_impl']\n-        elif impl_type.startswith('std::tuple<'):\n+        elif is_specialization_of(impl_type, 'tuple'):\n             v = self.val['_M_t']['_M_head_impl']\n         else:\n             raise ValueError(\"Unsupported implementation for unique_ptr: %s\" % self.val.type.fields()[0].type.tag)\n@@ -179,7 +194,7 @@ def __next__(self):\n             return ('[%d]' % count, val)\n \n     def __init__(self, typename, val):\n-        self.typename = typename\n+        self.typename = strip_versioned_namespace(typename)\n         self.val = val\n \n     def children(self):\n@@ -299,7 +314,7 @@ def __next__(self):\n                 return ('[%d]' % count, elt)\n \n     def __init__(self, typename, val):\n-        self.typename = typename\n+        self.typename = strip_versioned_namespace(typename)\n         self.val = val\n         self.is_bool = val.type.template_argument(0).code  == gdb.TYPE_CODE_BOOL\n \n@@ -403,7 +418,7 @@ def __next__ (self):\n                 return ('[%d]' % self.count, impl['_M_head_impl'])\n \n     def __init__ (self, typename, val):\n-        self.typename = typename\n+        self.typename = strip_versioned_namespace(typename)\n         self.val = val;\n \n     def children (self):\n@@ -418,7 +433,7 @@ class StdStackOrQueuePrinter:\n     \"Print a std::stack or std::queue\"\n \n     def __init__ (self, typename, val):\n-        self.typename = typename\n+        self.typename = strip_versioned_namespace(typename)\n         self.visualizer = gdb.default_visualizer(val['c'])\n \n     def children (self):\n@@ -496,7 +511,10 @@ class StdRbtreeIteratorPrinter:\n     def __init__ (self, typename, val):\n         self.val = val\n         valtype = self.val.type.template_argument(0).strip_typedefs()\n-        nodetype = gdb.lookup_type('std::_Rb_tree_node<' + str(valtype) + '>')\n+        nodetype = '_Rb_tree_node<' + str(valtype) + '>'\n+        if _versioned_namespace and typename.startswith('std::' + _versioned_namespace):\n+            nodetype = _versioned_namespace + nodetype\n+        nodetype = gdb.lookup_type('std::' + nodetype)\n         self.link_type = nodetype.strip_typedefs().pointer()\n \n     def to_string (self):\n@@ -552,7 +570,7 @@ def __next__(self):\n             return result\n \n     def __init__ (self, typename, val):\n-        self.typename = typename\n+        self.typename = strip_versioned_namespace(typename)\n         self.val = val\n \n     def to_string (self):\n@@ -592,7 +610,7 @@ def __next__(self):\n             return result\n \n     def __init__ (self, typename, val):\n-        self.typename = typename\n+        self.typename = strip_versioned_namespace(typename)\n         self.val = val\n \n     def to_string (self):\n@@ -609,7 +627,7 @@ class StdBitsetPrinter:\n     \"Print a std::bitset\"\n \n     def __init__(self, typename, val):\n-        self.typename = typename\n+        self.typename = strip_versioned_namespace(typename)\n         self.val = val\n \n     def to_string (self):\n@@ -679,7 +697,7 @@ def __next__(self):\n             return result\n \n     def __init__(self, typename, val):\n-        self.typename = typename\n+        self.typename = strip_versioned_namespace(typename)\n         self.val = val\n         self.elttype = val.type.template_argument(0)\n         size = self.elttype.sizeof\n@@ -805,7 +823,7 @@ class Tr1UnorderedSetPrinter:\n     \"Print a tr1::unordered_set\"\n \n     def __init__ (self, typename, val):\n-        self.typename = typename\n+        self.typename = strip_versioned_namespace(typename)\n         self.val = val\n \n     def hashtable (self):\n@@ -831,7 +849,7 @@ class Tr1UnorderedMapPrinter:\n     \"Print a tr1::unordered_map\"\n \n     def __init__ (self, typename, val):\n-        self.typename = typename\n+        self.typename = strip_versioned_namespace(typename)\n         self.val = val\n \n     def hashtable (self):\n@@ -897,7 +915,7 @@ def __next__(self):\n \n     def __init__(self, typename, val):\n         self.val = val\n-        self.typename = typename\n+        self.typename = strip_versioned_namespace(typename)\n \n     def children(self):\n         nodetype = find_type(self.val.type, '_Node')\n@@ -952,12 +970,12 @@ def display_hint (self):\n             return self.visualizer.display_hint ()\n         return self.hint\n \n-\n class StdExpAnyPrinter(SingleObjContainerPrinter):\n     \"Print a std::any or std::experimental::any\"\n \n     def __init__ (self, typename, val):\n         self.typename = re.sub('^std::experimental::fundamentals_v\\d::', 'std::experimental::', typename, 1)\n+        self.typename = strip_versioned_namespace(self.typename)\n         self.val = val\n         self.contained_type = None\n         contained_value = None\n@@ -972,8 +990,11 @@ def __init__ (self, typename, val):\n             if not m:\n                 raise ValueError(\"Unknown manager function in %s\" % self.typename)\n \n+            mgrname = m.group(1)\n             # FIXME need to expand 'std::string' so that gdb.lookup_type works\n-            mgrname = re.sub(\"std::string(?!\\w)\", str(gdb.lookup_type('std::string').strip_typedefs()), m.group(1))\n+            if 'std::string' in mgrname:\n+                mgrname = re.sub(\"std::string(?!\\w)\", str(gdb.lookup_type('std::string').strip_typedefs()), m.group(1))\n+\n             mgrtype = gdb.lookup_type(mgrname)\n             self.contained_type = mgrtype.template_argument(0)\n             valptr = None\n@@ -994,14 +1015,15 @@ def to_string (self):\n         if hasattr (self.visualizer, 'children'):\n             return desc + self.visualizer.to_string ()\n         valtype = self._recognize (self.contained_type)\n-        return desc + valtype\n+        return desc + strip_versioned_namespace(str(valtype))\n \n class StdExpOptionalPrinter(SingleObjContainerPrinter):\n     \"Print a std::optional or std::experimental::optional\"\n \n     def __init__ (self, typename, val):\n         valtype = self._recognize (val.type.template_argument(0))\n         self.typename = re.sub('^std::(experimental::|)(fundamentals_v\\d::|)(.*)', r'std::\\1\\3<%s>' % valtype, typename, 1)\n+        self.typename = strip_versioned_namespace(self.typename)\n         self.val = val\n         contained_value = val['_M_payload'] if self.val['_M_engaged'] else None\n         visualizer = gdb.default_visualizer (val['_M_payload'])\n@@ -1021,6 +1043,7 @@ class StdVariantPrinter(SingleObjContainerPrinter):\n     def __init__(self, typename, val):\n         alternatives = self._template_args(val)\n         self.typename = \"%s<%s>\" % (typename, ', '.join([self._recognize(alt) for alt in alternatives]))\n+        self.typename = strip_versioned_namespace(self.typename)\n         self.index = val['_M_index']\n         if self.index >= len(alternatives):\n             self.contained_type = None\n@@ -1058,7 +1081,7 @@ class StdNodeHandlePrinter(SingleObjContainerPrinter):\n     def __init__(self, typename, val):\n         self.value_type = val.type.template_argument(1)\n         nodetype = val.type.template_argument(2).template_argument(0)\n-        self.is_rb_tree_node = nodetype.name.startswith('std::_Rb_tree_node')\n+        self.is_rb_tree_node = is_specialization_of(nodetype.name, '_Rb_tree_node')\n         self.is_map_node = val.type.template_argument(0) != self.value_type\n         nodeptr = val['_M_ptr']\n         if nodeptr:\n@@ -1202,7 +1225,8 @@ def add(self, name, function):\n     # Add a name using _GLIBCXX_BEGIN_NAMESPACE_VERSION.\n     def add_version(self, base, name, function):\n         self.add(base + name, function)\n-        self.add(base + '__7::' + name, function)\n+        if _versioned_namespace:\n+            self.add(base + _versioned_namespace + name, function)\n \n     # Add a name using _GLIBCXX_BEGIN_NAMESPACE_CONTAINER.\n     def add_container(self, base, name, function):\n@@ -1294,8 +1318,14 @@ def instantiate(self):\n         return self._recognizer(self.pattern, self.subst)\n \n def add_one_template_type_printer(obj, name, match, subst):\n-    printer = TemplateTypePrinter(name, '^std::' + match + '$', 'std::' + subst)\n+    match = '^std::' + match + '$'\n+    printer = TemplateTypePrinter(name, match, 'std::' + subst)\n     gdb.types.register_type_printer(obj, printer)\n+    if _versioned_namespace:\n+        # Add second type printer for same type in versioned namespace:\n+        match = match.replace('std::', 'std::' + _versioned_namespace)\n+        printer = TemplateTypePrinter(name, match, 'std::' + subst)\n+        gdb.types.register_type_printer(obj, printer)\n \n class FilteringTypePrinter(object):\n     def __init__(self, match, name):\n@@ -1322,7 +1352,7 @@ def recognize(self, type_obj):\n                 except:\n                     pass\n             if self.type_obj == type_obj:\n-                return self.name\n+                return strip_versioned_namespace(self.name)\n             return None\n \n     def instantiate(self):\n@@ -1331,6 +1361,9 @@ def instantiate(self):\n def add_one_type_printer(obj, match, name):\n     printer = FilteringTypePrinter(match, 'std::' + name)\n     gdb.types.register_type_printer(obj, printer)\n+    if _versioned_namespace:\n+        printer = FilteringTypePrinter(match, 'std::' + _versioned_namespace + name)\n+        gdb.types.register_type_printer(obj, printer)\n \n def register_type_printers(obj):\n     global _use_type_printing\n@@ -1372,9 +1405,9 @@ def register_type_printers(obj):\n     # Note that we can't have a printer for std::wstreampos, because\n     # it shares the same underlying type as std::streampos.\n     add_one_type_printer(obj, 'fpos', 'streampos')\n+\n     add_one_type_printer(obj, 'basic_string', 'u16string')\n     add_one_type_printer(obj, 'basic_string', 'u32string')\n-\n     add_one_type_printer(obj, 'basic_string_view', 'u16string_view')\n     add_one_type_printer(obj, 'basic_string_view', 'u32string_view')\n \n@@ -1397,6 +1430,10 @@ def register_type_printers(obj):\n             'unique_ptr<(.*), std::default_delete<\\\\1 ?> >',\n             'unique_ptr<{1}>')\n \n+    add_one_template_type_printer(obj, 'basic_string<T>',\n+            'basic_string<((un)?signed char), std::char_traits<\\\\1 ?>, std::allocator<\\\\1 ?> >',\n+            'basic_string<{1}>')\n+\n     add_one_template_type_printer(obj, 'deque<T>',\n             'deque<(.*), std::allocator<\\\\1 ?> >',\n             'deque<{1}>')\n@@ -1465,11 +1502,6 @@ def build_libstdcxx_dictionary ():\n \n     libstdcxx_printer = Printer(\"libstdc++-v6\")\n \n-    # For _GLIBCXX_BEGIN_NAMESPACE_VERSION.\n-    vers = '(__7::)?'\n-    # For _GLIBCXX_BEGIN_NAMESPACE_CONTAINER.\n-    container = '(__cxx1998::' + vers + ')?'\n-\n     # libstdc++ objects requiring pretty-printing.\n     # In order from:\n     # http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/a01847.html"}, {"sha": "02feab66acb200ed77eaaadd3d977bcfc415d3ec", "filename": "libstdc++-v3/python/libstdcxx/v6/xmethods.py", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a27859dffe12c32364e2d7be40d2142e85c5f0/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fxmethods.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a27859dffe12c32364e2d7be40d2142e85c5f0/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fxmethods.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fxmethods.py?ref=f9a27859dffe12c32364e2d7be40d2142e85c5f0", "patch": "@@ -148,7 +148,7 @@ def __init__(self):\n         self.methods = [self._method_dict[m] for m in self._method_dict]\n \n     def match(self, class_type, method_name):\n-        if not re.match('^std::array<.*>$', class_type.tag):\n+        if not re.match('^std::(__\\d+::)?array<.*>$', class_type.tag):\n             return None\n         method = self._method_dict.get(method_name)\n         if method is None or not method.enabled:\n@@ -265,7 +265,7 @@ def __init__(self):\n         self.methods = [self._method_dict[m] for m in self._method_dict]\n \n     def match(self, class_type, method_name):\n-        if not re.match('^std::deque<.*>$', class_type.tag):\n+        if not re.match('^std::(__\\d+::)?deque<.*>$', class_type.tag):\n             return None\n         method = self._method_dict.get(method_name)\n         if method is None or not method.enabled:\n@@ -309,7 +309,7 @@ def __init__(self):\n         self.methods = [self._method_dict[m] for m in self._method_dict]\n \n     def match(self, class_type, method_name):\n-        if not re.match('^std::forward_list<.*>$', class_type.tag):\n+        if not re.match('^std::(__\\d+::)?forward_list<.*>$', class_type.tag):\n             return None\n         method = self._method_dict.get(method_name)\n         if method is None or not method.enabled:\n@@ -390,7 +390,7 @@ def __init__(self):\n         self.methods = [self._method_dict[m] for m in self._method_dict]\n \n     def match(self, class_type, method_name):\n-        if not re.match('^std::(__cxx11::)?list<.*>$', class_type.tag):\n+        if not re.match('^std::(__\\d+::)?(__cxx11::)?list<.*>$', class_type.tag):\n             return None\n         method = self._method_dict.get(method_name)\n         if method is None or not method.enabled:\n@@ -505,7 +505,7 @@ def __init__(self):\n         self.methods = [self._method_dict[m] for m in self._method_dict]\n \n     def match(self, class_type, method_name):\n-        if not re.match('^std::vector<.*>$', class_type.tag):\n+        if not re.match('^std::(__\\d+::)?vector<.*>$', class_type.tag):\n             return None\n         method = self._method_dict.get(method_name)\n         if method is None or not method.enabled:\n@@ -554,7 +554,7 @@ def __init__(self, name):\n         self.methods = [self._method_dict[m] for m in self._method_dict]\n \n     def match(self, class_type, method_name):\n-        if not re.match('^std::%s<.*>$' % self._name, class_type.tag):\n+        if not re.match('^std::(__\\d+::)?%s<.*>$' % self._name, class_type.tag):\n             return None\n         method = self._method_dict.get(method_name)\n         if method is None or not method.enabled:\n@@ -586,9 +586,9 @@ def _supports(self, method_name):\n \n     def __call__(self, obj):\n         impl_type = obj.dereference().type.fields()[0].type.tag\n-        if impl_type.startswith('std::__uniq_ptr_impl<'): # New implementation\n+        if re.match('^std::(__\\d+::)?__uniq_ptr_impl<.*>$', impl_type): # New implementation\n             return obj['_M_t']['_M_t']['_M_head_impl']\n-        elif impl_type.startswith('std::tuple<'):\n+        elif re.match('^std::(__\\d+::)?tuple<.*>$', impl_type):\n             return obj['_M_t']['_M_head_impl']\n         return None\n \n@@ -640,7 +640,7 @@ def __init__(self):\n         self.methods = [self._method_dict[m] for m in self._method_dict]\n \n     def match(self, class_type, method_name):\n-        if not re.match('^std::unique_ptr<.*>$', class_type.tag):\n+        if not re.match('^std::(__\\d+::)?unique_ptr<.*>$', class_type.tag):\n             return None\n         method = self._method_dict.get(method_name)\n         if method is None or not method.enabled:\n@@ -758,7 +758,7 @@ def __init__(self):\n         self.methods = [self._method_dict[m] for m in self._method_dict]\n \n     def match(self, class_type, method_name):\n-        if not re.match('^std::shared_ptr<.*>$', class_type.tag):\n+        if not re.match('^std::(__\\d+::)?shared_ptr<.*>$', class_type.tag):\n             return None\n         method = self._method_dict.get(method_name)\n         if method is None or not method.enabled:"}, {"sha": "998b6d5cf101d803ea390d190bedfbc0871c17f0", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/48362.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a27859dffe12c32364e2d7be40d2142e85c5f0/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2F48362.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a27859dffe12c32364e2d7be40d2142e85c5f0/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2F48362.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2F48362.cc?ref=f9a27859dffe12c32364e2d7be40d2142e85c5f0", "patch": "@@ -26,10 +26,10 @@ int\n main()\n {\n   std::tuple<> t1;\n-// { dg-final { regexp-test t1 {empty std::(__7::)?tuple} } }\n+// { dg-final { regexp-test t1 {empty std::tuple} } }\n \n   std::tuple<std::string, int, std::tuple<>> t2{ \"Johnny\", 5, {} };\n-// { dg-final { regexp-test t2 {std::(__7::)?tuple containing = {\\[1\\] = \"Johnny\", \\[2\\] = 5, \\[3\\] = {<std::(__7::)?tuple<>> = empty std::(__7::)?tuple, <No data fields>}}} } }\n+// { dg-final { regexp-test t2 {std::tuple containing = {\\[1\\] = \"Johnny\", \\[2\\] = 5, \\[3\\] = {<std::(__7::)?tuple<>> = empty std::tuple, <No data fields>}}} } }\n \n   std::cout << \"\\n\";\n   return 0; // Mark SPOT"}, {"sha": "7a55bb774a85d4b6ddbca74dbc23eeaab487b943", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/whatis.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9a27859dffe12c32364e2d7be40d2142e85c5f0/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fwhatis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9a27859dffe12c32364e2d7be40d2142e85c5f0/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fwhatis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fwhatis.cc?ref=f9a27859dffe12c32364e2d7be40d2142e85c5f0", "patch": "@@ -166,11 +166,11 @@ holder<std::knuth_b> knuth_b_holder;\n \n ustring *ustring_ptr;\n holder<ustring> ustring_holder;\n-// { dg-final { whatis-test ustring_holder \"holder<std::basic_string<unsigned char, std::char_traits<unsigned char>, std::allocator<unsigned char> > >\" } }\n+// { dg-final { whatis-test ustring_holder \"holder<std::basic_string<unsigned char> >\" } }\n \n std::basic_string<signed char> *sstring_ptr;\n holder< std::basic_string<signed char> > sstring_holder;\n-// { dg-final { whatis-test sstring_holder \"holder<std::basic_string<signed char, std::char_traits<signed char>, std::allocator<signed char> > >\" } }\n+// { dg-final { whatis-test sstring_holder \"holder<std::basic_string<signed char> >\" } }\n \n std::vector<std::deque<std::unique_ptr<char>>> *seq1_ptr;\n holder< std::vector<std::deque<std::unique_ptr<char>>> > seq1_holder;"}]}