{"sha": "02022f3a706d462cdb2da30e2d8cfd79901d78ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIwMjJmM2E3MDZkNDYyY2RiMmRhMzBlMmQ4Y2ZkNzk5MDFkNzhhYg==", "commit": {"author": {"name": "Simon Martin", "email": "simartin@users.sourceforge.net", "date": "2006-11-20T21:15:44Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-11-20T21:15:44Z"}, "message": "re PR c++/29475 (incomplete  template diagnostics.)\n\n\tPR c++/29475\n\t* cp-tree.h (enforce_access, perform_or_defer_access_check): Added an\n\textra argument that represents the declaration to use to print\n\tpotential error messages.\n\t* init.c (build_offset_ref): Adjusted the call to\n\tperform_or_defer_access_check.\n\t* class.c (alter_access, resolve_address_of_overloaded_function):\n\tLikewise.\n\t* decl.c (make_typename_type, make_unbound_class_template): Likewise. \n\t* search.c (lookup_member): Likewise.\n\t* friend.c (add_friend): Likewise.\n\t* parser.c (cp_parser_template_id,\n\tcp_parser_pre_parsed_nested_name_specifier): Likewise.\n\t* semantics.c (finish_non_static_data_member,\n\tcheck_accessibility_of_qualified_id, finish_id_expression): Likewise.\n\t(pop_to_parent_deferring_access_checks, perform_access_checks,\n\tperform_or_defer_access_check): Adjusted the call to enforce_access.\n\t* call.c (enforce_access): Use the new extra argument to build the\n\terror message.\n\t(build_op_delete_call): Adjusted the call to\n\tperform_or_defer_access_check.\n\t(build_over_call): Likewise.\n\n\tPR c++/29475\n\t* g++.dg/template/access19.C: New test.\n\t* g++.old-deja/g++.other/access11.C: Adjusted the line where the\n\terror is reported.\n\nFrom-SVN: r119027", "tree": {"sha": "49ec524753ca756a93eb724fe929b9e30035943c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49ec524753ca756a93eb724fe929b9e30035943c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02022f3a706d462cdb2da30e2d8cfd79901d78ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02022f3a706d462cdb2da30e2d8cfd79901d78ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02022f3a706d462cdb2da30e2d8cfd79901d78ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02022f3a706d462cdb2da30e2d8cfd79901d78ab/comments", "author": {"login": "simartin", "id": 935202, "node_id": "MDQ6VXNlcjkzNTIwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/935202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simartin", "html_url": "https://github.com/simartin", "followers_url": "https://api.github.com/users/simartin/followers", "following_url": "https://api.github.com/users/simartin/following{/other_user}", "gists_url": "https://api.github.com/users/simartin/gists{/gist_id}", "starred_url": "https://api.github.com/users/simartin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simartin/subscriptions", "organizations_url": "https://api.github.com/users/simartin/orgs", "repos_url": "https://api.github.com/users/simartin/repos", "events_url": "https://api.github.com/users/simartin/events{/privacy}", "received_events_url": "https://api.github.com/users/simartin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "903ff2758bdad932eee6ae84539361c18e6c45e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/903ff2758bdad932eee6ae84539361c18e6c45e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/903ff2758bdad932eee6ae84539361c18e6c45e9"}], "stats": {"total": 122, "additions": 92, "deletions": 30}, "files": [{"sha": "5d0dd5c2f558061bca5a90668cca24992633c98f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02022f3a706d462cdb2da30e2d8cfd79901d78ab/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02022f3a706d462cdb2da30e2d8cfd79901d78ab/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=02022f3a706d462cdb2da30e2d8cfd79901d78ab", "patch": "@@ -1,3 +1,28 @@\n+2006-11-20  Simon Martin  <simartin@users.sourceforge.net>\n+\n+\tPR c++/29475\n+\t* cp-tree.h (enforce_access, perform_or_defer_access_check): Added an\n+\textra argument that represents the declaration to use to print\n+\tpotential error messages.\n+\t* init.c (build_offset_ref): Adjusted the call to\n+\tperform_or_defer_access_check.\n+\t* class.c (alter_access, resolve_address_of_overloaded_function):\n+\tLikewise.\n+\t* decl.c (make_typename_type, make_unbound_class_template): Likewise. \n+\t* search.c (lookup_member): Likewise.\n+\t* friend.c (add_friend): Likewise.\n+\t* parser.c (cp_parser_template_id,\n+\tcp_parser_pre_parsed_nested_name_specifier): Likewise.\n+\t* semantics.c (finish_non_static_data_member,\n+\tcheck_accessibility_of_qualified_id, finish_id_expression): Likewise.\n+\t(pop_to_parent_deferring_access_checks, perform_access_checks,\n+\tperform_or_defer_access_check): Adjusted the call to enforce_access.\n+\t* call.c (enforce_access): Use the new extra argument to build the\n+\terror message.\n+\t(build_op_delete_call): Adjusted the call to\n+\tperform_or_defer_access_check.\n+\t(build_over_call): Likewise.\n+\t\n 2006-11-16  Dirk Mueller  <dmueller@suse.de>\n \n \t* name-lookup.c (begin_scope): Use GGC_CNEW instead of"}, {"sha": "cfb566b16b0f5a775aa2618f12d90aabd38d4973", "filename": "gcc/cp/call.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02022f3a706d462cdb2da30e2d8cfd79901d78ab/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02022f3a706d462cdb2da30e2d8cfd79901d78ab/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=02022f3a706d462cdb2da30e2d8cfd79901d78ab", "patch": "@@ -4097,7 +4097,7 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n       /* If the FN is a member function, make sure that it is\n \t accessible.  */\n       if (DECL_CLASS_SCOPE_P (fn))\n-\tperform_or_defer_access_check (TYPE_BINFO (type), fn);\n+\tperform_or_defer_access_check (TYPE_BINFO (type), fn, fn);\n \n       if (pass == 0)\n \targs = tree_cons (NULL_TREE, addr, args);\n@@ -4128,21 +4128,22 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n \n /* If the current scope isn't allowed to access DECL along\n    BASETYPE_PATH, give an error.  The most derived class in\n-   BASETYPE_PATH is the one used to qualify DECL.  */\n+   BASETYPE_PATH is the one used to qualify DECL. DIAG_DECL is\n+   the declaration to use in the error diagnostic.  */\n \n bool\n-enforce_access (tree basetype_path, tree decl)\n+enforce_access (tree basetype_path, tree decl, tree diag_decl)\n {\n   gcc_assert (TREE_CODE (basetype_path) == TREE_BINFO);\n \n   if (!accessible_p (basetype_path, decl, true))\n     {\n       if (TREE_PRIVATE (decl))\n-\terror (\"%q+#D is private\", decl);\n+\terror (\"%q+#D is private\", diag_decl);\n       else if (TREE_PROTECTED (decl))\n-\terror (\"%q+#D is protected\", decl);\n+\terror (\"%q+#D is protected\", diag_decl);\n       else\n-\terror (\"%q+#D is inaccessible\", decl);\n+\terror (\"%q+#D is inaccessible\", diag_decl);\n       error (\"within this context\");\n       return false;\n     }\n@@ -4771,9 +4772,9 @@ build_over_call (struct z_candidate *cand, int flags)\n       if (DECL_TEMPLATE_INFO (fn)\n \t  && DECL_MEMBER_TEMPLATE_P (DECL_TI_TEMPLATE (fn)))\n \tperform_or_defer_access_check (cand->access_path,\n-\t\t\t\t       DECL_TI_TEMPLATE (fn));\n+\t\t\t\t       DECL_TI_TEMPLATE (fn), fn);\n       else\n-\tperform_or_defer_access_check (cand->access_path, fn);\n+\tperform_or_defer_access_check (cand->access_path, fn, fn);\n     }\n \n   if (args && TREE_CODE (args) != TREE_LIST)"}, {"sha": "3e569f5777db501386511932bd2e1eeffbbe6e42", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02022f3a706d462cdb2da30e2d8cfd79901d78ab/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02022f3a706d462cdb2da30e2d8cfd79901d78ab/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=02022f3a706d462cdb2da30e2d8cfd79901d78ab", "patch": "@@ -1129,7 +1129,7 @@ alter_access (tree t, tree fdecl, tree access)\n     }\n   else\n     {\n-      perform_or_defer_access_check (TYPE_BINFO (t), fdecl);\n+      perform_or_defer_access_check (TYPE_BINFO (t), fdecl, fdecl);\n       DECL_ACCESS (fdecl) = tree_cons (t, access, DECL_ACCESS (fdecl));\n       return 1;\n     }\n@@ -5958,7 +5958,7 @@ resolve_address_of_overloaded_function (tree target_type,\n       if (DECL_FUNCTION_MEMBER_P (fn))\n \t{\n \t  gcc_assert (access_path);\n-\t  perform_or_defer_access_check (access_path, fn);\n+\t  perform_or_defer_access_check (access_path, fn, fn);\n \t}\n     }\n "}, {"sha": "d7e523ba382804866211866aa863b5fae03fd217", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02022f3a706d462cdb2da30e2d8cfd79901d78ab/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02022f3a706d462cdb2da30e2d8cfd79901d78ab/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=02022f3a706d462cdb2da30e2d8cfd79901d78ab", "patch": "@@ -3772,7 +3772,7 @@ extern tree build_op_delete_call\t\t(enum tree_code, tree, tree, bool, tree, tree)\n extern bool can_convert\t\t\t\t(tree, tree);\n extern bool can_convert_arg\t\t\t(tree, tree, tree, int);\n extern bool can_convert_arg_bad\t\t\t(tree, tree, tree);\n-extern bool enforce_access\t\t\t(tree, tree);\n+extern bool enforce_access\t\t\t(tree, tree, tree);\n extern tree convert_default_arg\t\t\t(tree, tree, tree, int);\n extern tree convert_arg_to_ellipsis\t\t(tree);\n extern tree build_x_va_arg\t\t\t(tree, tree);\n@@ -4209,7 +4209,7 @@ extern tree get_deferred_access_checks\t\t(void);\n extern void pop_to_parent_deferring_access_checks (void);\n extern void perform_access_checks\t\t(tree);\n extern void perform_deferred_access_checks\t(void);\n-extern void perform_or_defer_access_check\t(tree, tree);\n+extern void perform_or_defer_access_check\t(tree, tree, tree);\n extern int stmts_are_full_exprs_p\t\t(void);\n extern void init_cp_semantics\t\t\t(void);\n extern tree do_poplevel\t\t\t\t(tree);"}, {"sha": "e8af0e45679ede67028f65beffbf7626f1ef0d66", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02022f3a706d462cdb2da30e2d8cfd79901d78ab/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02022f3a706d462cdb2da30e2d8cfd79901d78ab/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=02022f3a706d462cdb2da30e2d8cfd79901d78ab", "patch": "@@ -2858,7 +2858,7 @@ make_typename_type (tree context, tree name, enum tag_types tag_type,\n     }\n   \n   if (complain & tf_error)\n-    perform_or_defer_access_check (TYPE_BINFO (context), t);\n+    perform_or_defer_access_check (TYPE_BINFO (context), t, t);\n \n   if (want_template)\n     return lookup_template_class (t, TREE_OPERAND (fullname, 1),\n@@ -2921,7 +2921,7 @@ make_unbound_class_template (tree context, tree name, tree parm_list,\n \t}\n \n       if (complain & tf_error)\n-\tperform_or_defer_access_check (TYPE_BINFO (context), tmpl);\n+\tperform_or_defer_access_check (TYPE_BINFO (context), tmpl, tmpl);\n \n       return tmpl;\n     }"}, {"sha": "bc946e8a52729bf6e9e7d48bcaf69bc2ba8ca61f", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02022f3a706d462cdb2da30e2d8cfd79901d78ab/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02022f3a706d462cdb2da30e2d8cfd79901d78ab/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=02022f3a706d462cdb2da30e2d8cfd79901d78ab", "patch": "@@ -171,7 +171,7 @@ add_friend (tree type, tree decl, bool complain)\n \n   ctx = DECL_CONTEXT (decl);\n   if (ctx && CLASS_TYPE_P (ctx) && !uses_template_parms (ctx))\n-    perform_or_defer_access_check (TYPE_BINFO (ctx), decl);\n+    perform_or_defer_access_check (TYPE_BINFO (ctx), decl, decl);\n \n   maybe_add_class_template_decl_list (type, decl, /*friend_p=*/1);\n "}, {"sha": "0ea68882ee9d4ffb892aa8e06eb1e9655f74f761", "filename": "gcc/cp/init.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02022f3a706d462cdb2da30e2d8cfd79901d78ab/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02022f3a706d462cdb2da30e2d8cfd79901d78ab/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=02022f3a706d462cdb2da30e2d8cfd79901d78ab", "patch": "@@ -1383,9 +1383,9 @@ build_offset_ref (tree type, tree member, bool address_p)\n \t       (or any class derived from that class).  */\n \t  if (address_p && DECL_P (t)\n \t      && DECL_NONSTATIC_MEMBER_P (t))\n-\t    perform_or_defer_access_check (TYPE_BINFO (type), t);\n+\t    perform_or_defer_access_check (TYPE_BINFO (type), t, t);\n \t  else\n-\t    perform_or_defer_access_check (basebinfo, t);\n+\t    perform_or_defer_access_check (basebinfo, t, t);\n \n \t  if (DECL_STATIC_FUNCTION_P (t))\n \t    return t;\n@@ -1398,7 +1398,7 @@ build_offset_ref (tree type, tree member, bool address_p)\n     /* We need additional test besides the one in\n        check_accessibility_of_qualified_id in case it is\n        a pointer to non-static member.  */\n-    perform_or_defer_access_check (TYPE_BINFO (type), member);\n+    perform_or_defer_access_check (TYPE_BINFO (type), member, member);\n \n   if (!address_p)\n     {"}, {"sha": "8e79eabe895639b2fbd8f3e99134f3f3a66942f6", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02022f3a706d462cdb2da30e2d8cfd79901d78ab/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02022f3a706d462cdb2da30e2d8cfd79901d78ab/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=02022f3a706d462cdb2da30e2d8cfd79901d78ab", "patch": "@@ -8759,6 +8759,7 @@ cp_parser_template_id (cp_parser *parser,\n       /* Perform any access checks that were deferred.  */\n       for (check = TREE_PURPOSE (value); check; check = TREE_CHAIN (check))\n \tperform_or_defer_access_check (TREE_PURPOSE (check),\n+\t\t\t\t       TREE_VALUE (check),\n \t\t\t\t       TREE_VALUE (check));\n       /* Return the stored value.  */\n       return TREE_VALUE (value);\n@@ -16643,7 +16644,9 @@ cp_parser_pre_parsed_nested_name_specifier (cp_parser *parser)\n   value = cp_lexer_consume_token (parser->lexer)->value;\n   /* Perform any access checks that were deferred.  */\n   for (check = TREE_PURPOSE (value); check; check = TREE_CHAIN (check))\n-    perform_or_defer_access_check (TREE_PURPOSE (check), TREE_VALUE (check));\n+    perform_or_defer_access_check (TREE_PURPOSE (check),\n+\t\t\t\t   TREE_VALUE (check),\n+\t\t\t\t   TREE_VALUE (check));\n   /* Set the scope from the stored value.  */\n   parser->scope = TREE_VALUE (value);\n   parser->qualifying_scope = TREE_TYPE (value);"}, {"sha": "9d47aaf59e7dc9ac311660939b957fd8b294afdc", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02022f3a706d462cdb2da30e2d8cfd79901d78ab/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02022f3a706d462cdb2da30e2d8cfd79901d78ab/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=02022f3a706d462cdb2da30e2d8cfd79901d78ab", "patch": "@@ -1273,7 +1273,7 @@ lookup_member (tree xbasetype, tree name, int protect, bool want_type)\n       && !really_overloaded_fn (rval)\n       && !(TREE_CODE (rval) == FUNCTION_DECL\n \t   && DECL_NONSTATIC_MEMBER_FUNCTION_P (rval)))\n-    perform_or_defer_access_check (basetype_path, rval);\n+    perform_or_defer_access_check (basetype_path, rval, rval);\n \n   if (errstr && protect)\n     {"}, {"sha": "e3dc3ab3ec4525819c86d690f1e44b8a1dc01dc5", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02022f3a706d462cdb2da30e2d8cfd79901d78ab/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02022f3a706d462cdb2da30e2d8cfd79901d78ab/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=02022f3a706d462cdb2da30e2d8cfd79901d78ab", "patch": "@@ -234,7 +234,7 @@ pop_to_parent_deferring_access_checks (void)\n \t  /* Check access.  */\n \t  for (; checks; checks = TREE_CHAIN (checks))\n \t    enforce_access (TREE_PURPOSE (checks),\n-\t\t\t    TREE_VALUE (checks));\n+\t\t\t    TREE_VALUE (checks), TREE_VALUE (checks));\n \t}\n       else\n \t{\n@@ -271,7 +271,7 @@ perform_access_checks (tree checks)\n   while (checks)\n     {\n       enforce_access (TREE_PURPOSE (checks),\n-\t\t      TREE_VALUE (checks));\n+\t\t      TREE_VALUE (checks), TREE_VALUE (checks));\n       checks = TREE_CHAIN (checks);\n     }\n }\n@@ -299,10 +299,10 @@ perform_deferred_access_checks (void)\n }\n \n /* Defer checking the accessibility of DECL, when looked up in\n-   BINFO.  */\n+   BINFO. DIAG_DECL is the declaration to use to print diagnostics.  */\n \n void\n-perform_or_defer_access_check (tree binfo, tree decl)\n+perform_or_defer_access_check (tree binfo, tree decl, tree diag_decl)\n {\n   tree check;\n   deferred_access *ptr;\n@@ -319,7 +319,7 @@ perform_or_defer_access_check (tree binfo, tree decl)\n   /* If we are not supposed to defer access checks, just check now.  */\n   if (ptr->deferring_access_checks_kind == dk_no_deferred)\n     {\n-      enforce_access (binfo, decl);\n+      enforce_access (binfo, decl, diag_decl);\n       return;\n     }\n \n@@ -1432,7 +1432,8 @@ finish_non_static_data_member (tree decl, tree object, tree qualifying_scope)\n \t\t\t\t     DECL_NAME (decl),\n \t\t\t\t     /*template_p=*/false);\n \n-      perform_or_defer_access_check (TYPE_BINFO (access_type), decl);\n+      perform_or_defer_access_check (TYPE_BINFO (access_type), decl,\n+\t\t\t\t     decl);\n \n       /* If the data member was named `C::M', convert `*this' to `C'\n \t first.  */\n@@ -1511,7 +1512,8 @@ check_accessibility_of_qualified_id (tree decl,\n \t or similar in a default argument value.  */\n       && CLASS_TYPE_P (qualifying_type)\n       && !dependent_type_p (qualifying_type))\n-    perform_or_defer_access_check (TYPE_BINFO (qualifying_type), decl);\n+    perform_or_defer_access_check (TYPE_BINFO (qualifying_type), decl,\n+\t\t\t\t   decl);\n }\n \n /* EXPR is the result of a qualified-id.  The QUALIFYING_CLASS was the\n@@ -2839,7 +2841,7 @@ finish_id_expression (tree id_expression,\n \t      tree path;\n \n \t      path = currently_open_derived_class (DECL_CONTEXT (decl));\n-\t      perform_or_defer_access_check (TYPE_BINFO (path), decl);\n+\t      perform_or_defer_access_check (TYPE_BINFO (path), decl, decl);\n \t    }\n \n \t  decl = convert_from_reference (decl);"}, {"sha": "079e73efe67d1c3f7a6b5fa59e91d2509a2f8b35", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02022f3a706d462cdb2da30e2d8cfd79901d78ab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02022f3a706d462cdb2da30e2d8cfd79901d78ab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=02022f3a706d462cdb2da30e2d8cfd79901d78ab", "patch": "@@ -1,3 +1,10 @@\n+2006-11-20  Simon Martin  <simartin@users.sourceforge.net>\n+\n+\tPR c++/29475\n+\t* g++.dg/template/access19.C: New test.\n+\t* g++.old-deja/g++.other/access11.C: Adjusted the line where the\n+\terror is reported.\n+\t\n 2006-11-20  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR tree-opt/25500"}, {"sha": "e717a72d4f22d22381af6d3d006f8b4a0a224a3c", "filename": "gcc/testsuite/g++.dg/template/access19.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02022f3a706d462cdb2da30e2d8cfd79901d78ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02022f3a706d462cdb2da30e2d8cfd79901d78ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess19.C?ref=02022f3a706d462cdb2da30e2d8cfd79901d78ab", "patch": "@@ -0,0 +1,24 @@\n+/* PR c++/29475 The error diagnostic contained \"U = U\" instead of \"U = char\" */\r\n+/* { dg-do \"compile\" } */\r\n+\r\n+template< class T >\r\n+class explicit_t\r\n+{\r\n+public:\r\n+        explicit_t( const T& c ): value( c ) { }\r\n+        operator T&() { return value; }\r\n+private:\r\n+        template< class U >\r\n+        explicit_t( U t ); /* { dg-error \"with U = char, T = int|is private\" } */\r\n+        T value;\r\n+};\r\n+\r\n+int foo( int x, explicit_t< int > y )\r\n+{\r\n+        return x + y;\r\n+}\r\n+\r\n+int main()\r\n+{\r\n+        return foo( 5, 'c' ); /* { dg-error \"this context\" } */\r\n+}\r"}, {"sha": "72fc333c1afcc98ade33932d9ad0e25ac84dac56", "filename": "gcc/testsuite/g++.old-deja/g++.other/access11.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02022f3a706d462cdb2da30e2d8cfd79901d78ab/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Faccess11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02022f3a706d462cdb2da30e2d8cfd79901d78ab/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Faccess11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Faccess11.C?ref=02022f3a706d462cdb2da30e2d8cfd79901d78ab", "patch": "@@ -5,12 +5,12 @@\n class A\n {\n private:\n-  template <class T> void g(T t)  {} // { dg-error \"\" } private\n+  template <class T> void g(T t)  {}\n   int i;\n };\n \n template <>\n-void A::g<int>(int t) { i = 1; }\n+void A::g<int>(int t) { i = 1; } // { dg-error \"\" } private\n \n int main()\n {"}]}