{"sha": "b52b99b62df8fc9b3a3010cb0a8cf49bc35037f0", "node_id": "C_kwDOANBUbNoAKGI1MmI5OWI2MmRmOGZjOWIzYTMwMTBjYjBhOGNmNDliYzM1MDM3ZjA", "commit": {"author": {"name": "Lewis Hyatt", "email": "lhyatt@gmail.com", "date": "2022-09-30T18:10:00Z"}, "committer": {"name": "Lewis Hyatt", "email": "lhyatt@gmail.com", "date": "2022-09-30T18:10:00Z"}, "message": "diagnostics: Fix virtual location for -Wuninitialized [PR69543]\n\nWarnings issued for -Wuninitialized have been using the spelling location of\nthe problematic usage, discarding any information on the location of the macro\nexpansion point if such usage was in a macro. This makes the warnings\nimpossible to control reliably with #pragma GCC diagnostic, and also discards\nuseful context in the diagnostic output. There seems to be no need to discard\nthe virtual location information, so this patch fixes that.\n\nPR69543 was mostly about _Pragma issues which have been fixed for many years\nnow. The PR remains open because two of the testcases added in response to it\nstill have xfails, but those xfails have nothing to do with _Pragma and rather\njust with the issue fixed by this patch, so the PR can be closed now as well.\n\nThe other testcase modified here, pragma-diagnostic-2.c, was explicitly\ntesting for the undesirable behavior that was xfailed in pr69543-3.c. I have\nadjusted that and also added a new testcase verifying all 3 types of warning\nthat come from tree-ssa-uninit.cc get the proper location information now.\n\ngcc/ChangeLog:\n\n\tPR preprocessor/69543\n\t* tree-ssa-uninit.cc (warn_uninit): Stop stripping macro tracking\n\tinformation away from the diagnostic location.\n\t(maybe_warn_read_write_only): Likewise.\n\t(maybe_warn_operand): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR preprocessor/69543\n\t* c-c++-common/pr69543-3.c: Remove xfail.\n\t* c-c++-common/pr69543-4.c: Likewise.\n\t* gcc.dg/cpp/pragma-diagnostic-2.c: Adjust test for new behavior.\n\t* c-c++-common/pragma-diag-16.c: New test.", "tree": {"sha": "68920f03ad6c037493f978e4efe36ddf5a9c628f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68920f03ad6c037493f978e4efe36ddf5a9c628f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b52b99b62df8fc9b3a3010cb0a8cf49bc35037f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b52b99b62df8fc9b3a3010cb0a8cf49bc35037f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b52b99b62df8fc9b3a3010cb0a8cf49bc35037f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b52b99b62df8fc9b3a3010cb0a8cf49bc35037f0/comments", "author": null, "committer": null, "parents": [{"sha": "e564021e4c225420cd8986e9a7a42efe741f92d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e564021e4c225420cd8986e9a7a42efe741f92d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e564021e4c225420cd8986e9a7a42efe741f92d1"}], "stats": {"total": 98, "additions": 73, "deletions": 25}, "files": [{"sha": "6d4224f4af759b81b86cf37e1902b5d83fdba3fd", "filename": "gcc/testsuite/c-c++-common/pr69543-3.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b99b62df8fc9b3a3010cb0a8cf49bc35037f0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69543-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b99b62df8fc9b3a3010cb0a8cf49bc35037f0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69543-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69543-3.c?ref=b52b99b62df8fc9b3a3010cb0a8cf49bc35037f0", "patch": "@@ -3,15 +3,11 @@\n /* Verify disabling a warning, where the _Pragma is in regular code,\n    but the affected code is within a macro.  */\n \n-/* TODO: XFAIL: both C and C++ erroneously fail to suppress the warning\n-   The warning is reported at the macro definition location, rather than\n-   the macro expansion location.  */\n-\n-#define WARNABLE_CODE *++yyvsp = yylval; /* { dg-bogus \"used uninitialized\" \"\" { xfail *-*-* } } */\n+#define WARNABLE_CODE *++yyvsp = yylval; /* { dg-bogus \"used uninitialized\" } */\n \n void test (char yylval)\n {\n-  char *yyvsp; /* { dg-bogus \"declared here\" \"\" { xfail *-*-* } } */\n+  char *yyvsp; /* { dg-bogus \"declared here\" } */\n   _Pragma (\"GCC diagnostic push\")\n   _Pragma (\"GCC diagnostic ignored \\\"-Wuninitialized\\\"\")\n   _Pragma (\"GCC diagnostic ignored \\\"-Wmaybe-uninitialized\\\"\")"}, {"sha": "3db2eeb16eb67cb0c70945cec6df1b81e2479c72", "filename": "gcc/testsuite/c-c++-common/pr69543-4.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b99b62df8fc9b3a3010cb0a8cf49bc35037f0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69543-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b99b62df8fc9b3a3010cb0a8cf49bc35037f0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69543-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69543-4.c?ref=b52b99b62df8fc9b3a3010cb0a8cf49bc35037f0", "patch": "@@ -3,22 +3,18 @@\n /* Verify disabling a warning, where both the _Pragma and the\n    affected code are within (different) macros.  */\n \n-/* TODO: XFAIL: both C and C++ erroneously fail to suppress the warning\n-   The warning is reported at the macro definition location, rather than\n-   the macro expansion location.  */\n-\n # define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\t\\\n     _Pragma (\"GCC diagnostic push\") \\\n     _Pragma (\"GCC diagnostic ignored \\\"-Wuninitialized\\\"\")\\\n     _Pragma (\"GCC diagnostic ignored \\\"-Wmaybe-uninitialized\\\"\")\n # define YY_IGNORE_MAYBE_UNINITIALIZED_END \\\n     _Pragma (\"GCC diagnostic pop\")\n \n-#define WARNABLE_CODE *++yyvsp = yylval; /* { dg-bogus \"used uninitialized\" \"\" { xfail *-*-* } } */\n+#define WARNABLE_CODE *++yyvsp = yylval; /* { dg-bogus \"used uninitialized\" } */\n \n void test (char yylval)\n {\n-  char *yyvsp; /* { dg-bogus \"declared here\" \"\" { xfail *-*-* } } */\n+  char *yyvsp; /* { dg-bogus \"declared here\" } */\n   YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n   WARNABLE_CODE\n   YY_IGNORE_MAYBE_UNINITIALIZED_END"}, {"sha": "8cacd872bef7fe32e221f1ed41ad00be8a4ee08f", "filename": "gcc/testsuite/c-c++-common/pragma-diag-16.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b99b62df8fc9b3a3010cb0a8cf49bc35037f0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpragma-diag-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b99b62df8fc9b3a3010cb0a8cf49bc35037f0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpragma-diag-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpragma-diag-16.c?ref=b52b99b62df8fc9b3a3010cb0a8cf49bc35037f0", "patch": "@@ -0,0 +1,63 @@\n+/* Make sure that the 3 types of warnings generated from tree-ssa-uninit.cc have\n+   proper virtual locations and so can be controlled by pragmas when they appear\n+   in macros.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Wuninitialized -Wmaybe-uninitialized\" } */\n+\n+/* 1.  Check maybe_warn_read_write_only().  */\n+#define DEREF1(p) (*p) /* { dg-warning {may be used uninitialized} } */\n+__attribute__ ((access (write_only, 1)))\n+int f1 (int* x) /* { dg-note {accessing argument 1} } */\n+{\n+  return DEREF1 (x); /* { dg-note {in expansion of macro 'DEREF1'} } */\n+}\n+\n+#define DEREF2(p) (*p) /* { dg-bogus {may be used uninitialized} } */\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wmaybe-uninitialized\"\n+__attribute__ ((access (write_only, 1)))\n+int f2 (int* x) /* { dg-bogus {accessing argument 1} } */\n+{\n+  return DEREF2 (x); /* { dg-bogus {in expansion of macro 'DEREF1'} } */\n+}\n+#pragma GCC diagnostic pop\n+\n+/* 2.  Check warn_uninit().  */\n+int g;\n+#define SET3(a, b) ((a) = (b)) /* { dg-warning {'x' is used uninitialized} } */\n+void f3 ()\n+{\n+  int x; /* { dg-note {'x' was declared here} } */\n+  SET3 (g, x); /* { dg-note {in expansion of macro 'SET3'} } */\n+}\n+\n+#define SET4(a, b) ((a) = (b)) /* { dg-bogus {'x' is used uninitialized} } */\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wuninitialized\"\n+void f4 ()\n+{\n+  int x; /* { dg-bogus {'x' was declared here} } */\n+  SET4 (g, x); /* { dg-bogus {in expansion of macro 'SET3'} } */\n+}\n+#pragma GCC diagnostic pop\n+\n+/* 3.  Check maybe_warn_operand().  */\n+#define CALL5(func, arg) ((func) (arg)) /* { dg-warning {'c' may be used uninitialized} } */\n+void f5a (const char *); /* { dg-note {by argument 1} } */\n+void f5b ()\n+{\n+  char c; /* { dg-note {'c' declared here} } */\n+  CALL5 (f5a, &c); /* { dg-note {in expansion of macro 'CALL5'} } */\n+}\n+\n+#define CALL6(func, arg) ((func) (arg)) /* { dg-bogus {'c' may be used uninitialized} } */\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wmaybe-uninitialized\"\n+void f6a (const char *); /* { dg-bogus {by argument 1} } */\n+void f6b ()\n+{\n+  char c; /* { dg-bogus {'c' declared here} } */\n+  CALL6 (f6a, &c); /* { dg-bogus {in expansion of macro 'CALL6'} } */\n+}\n+#pragma GCC diagnostic pop"}, {"sha": "89d2975ee7bd7cd8b18359dd1bc9fa2a8adc7c4a", "filename": "gcc/testsuite/gcc.dg/cpp/pragma-diagnostic-2.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b99b62df8fc9b3a3010cb0a8cf49bc35037f0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpragma-diagnostic-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b99b62df8fc9b3a3010cb0a8cf49bc35037f0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpragma-diagnostic-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpragma-diagnostic-2.c?ref=b52b99b62df8fc9b3a3010cb0a8cf49bc35037f0", "patch": "@@ -7,22 +7,23 @@ void f (unsigned);\n \n #define CODE_WITH_WARNING \\\n   int a; /* { dg-message \"was declared here\" } */\t \\\n-  f (a)\t /* { dg-warning \"used uninitialized\" } */\n+  f (a)\t /* { dg-error \"used uninitialized\" } */\n \n #pragma GCC diagnostic ignored \"-Wuninitialized\"\n \n void\n g (void)\n {\n+  /* No warning expected here since the #pragma is in effect.  */\n   CODE_WITH_WARNING;\n }\n \n-#pragma GCC diagnostic push\n-\n #pragma GCC diagnostic error \"-Wuninitialized\"\n \n void\n h (void)\n {\n   CODE_WITH_WARNING; /* { dg-message \"in expansion of macro 'CODE_WITH_WARNING'\" } */\n }\n+\n+/* { dg-regexp {.*some warnings being treated as errors} } */"}, {"sha": "bf2e50511af150b26ad6e09510868725b2a7e444", "filename": "gcc/tree-ssa-uninit.cc", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b99b62df8fc9b3a3010cb0a8cf49bc35037f0/gcc%2Ftree-ssa-uninit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b99b62df8fc9b3a3010cb0a8cf49bc35037f0/gcc%2Ftree-ssa-uninit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.cc?ref=b52b99b62df8fc9b3a3010cb0a8cf49bc35037f0", "patch": "@@ -274,9 +274,6 @@ warn_uninit (opt_code opt, tree t, tree var, gimple *context,\n   else if (var_name_str)\n     location = gimple_location (var_def_stmt);\n \n-  location = linemap_resolve_location (line_table, location,\n-\t\t\t\t       LRK_SPELLING_LOCATION, NULL);\n-\n   auto_diagnostic_group d;\n   gcc_assert (opt == OPT_Wuninitialized || opt == OPT_Wmaybe_uninitialized);\n   if (var)\n@@ -424,10 +421,7 @@ maybe_warn_read_write_only (tree fndecl, gimple *stmt, tree arg, tree ptr)\n \t  && access->mode != access_write_only)\n \tcontinue;\n \n-      location_t stmtloc\n-\t= linemap_resolve_location (line_table, gimple_location (stmt),\n-\t\t\t\t    LRK_SPELLING_LOCATION, NULL);\n-\n+      location_t stmtloc = gimple_location (stmt);\n       if (!warning_at (stmtloc, OPT_Wmaybe_uninitialized,\n \t\t       \"%qE may be used uninitialized\", ptr))\n \tbreak;\n@@ -722,9 +716,7 @@ maybe_warn_operand (ao_ref &ref, gimple *stmt, tree lhs, tree rhs,\n   bool warned = false;\n   /* We didn't find any may-defs so on all paths either\n      reached function entry or a killing clobber.  */\n-  location_t location\n-    = linemap_resolve_location (line_table, gimple_location (stmt),\n-\t\t\t\tLRK_SPELLING_LOCATION, NULL);\n+  location_t location = gimple_location (stmt);\n   if (wlims.always_executed)\n     {\n       if (warning_at (location, OPT_Wuninitialized,"}]}