{"sha": "b13476386feac312f1c35320213099bdad2248ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEzNDc2Mzg2ZmVhYzMxMmYxYzM1MzIwMjEzMDk5YmRhZDIyNDhlZA==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-09-22T00:42:28Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-09-22T00:42:28Z"}, "message": "tree-data-ref.c (analyze_array_indexes): Only estimate when estimate_only is true.\n\n2005-09-20  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-data-ref.c (analyze_array_indexes): Only estimate when\n\testimate_only  is true.\n\t* tree-flow.h (ref_contains_indirect_ref): New prototype.\n\t* tree-flow-inline.h (ref_contains_indirect_ref): Moved from\n\ttree-ssa-structalias.c\n\t* tree-ssa-loop-niter.c (infer_loop_bounds_from_undefined): Use\n\tref_contains_indirect_ref.\n\t* tree-ssa-structalias.c (ref_contains_indirect_ref): Moved.\n\nFrom-SVN: r104518", "tree": {"sha": "4b807050400db7408a16243b129aa442be14c1d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b807050400db7408a16243b129aa442be14c1d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b13476386feac312f1c35320213099bdad2248ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b13476386feac312f1c35320213099bdad2248ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b13476386feac312f1c35320213099bdad2248ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b13476386feac312f1c35320213099bdad2248ed/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0c9976393b0be03a81c5587359390f97c75865f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c9976393b0be03a81c5587359390f97c75865f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c9976393b0be03a81c5587359390f97c75865f8"}], "stats": {"total": 59, "additions": 35, "deletions": 24}, "files": [{"sha": "471414d45c90375bf8c450a5b57b1a8d534f85e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b13476386feac312f1c35320213099bdad2248ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b13476386feac312f1c35320213099bdad2248ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b13476386feac312f1c35320213099bdad2248ed", "patch": "@@ -1,3 +1,14 @@\n+2005-09-21  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* tree-data-ref.c (analyze_array_indexes): Only estimate when\n+\testimate_only  is true.\n+\t* tree-flow.h (ref_contains_indirect_ref): New prototype.\n+\t* tree-flow-inline.h (ref_contains_indirect_ref): Moved from\n+\ttree-ssa-structalias.c \n+\t* tree-ssa-loop-niter.c (infer_loop_bounds_from_undefined): Use\n+\tref_contains_indirect_ref.\n+\t* tree-ssa-structalias.c (ref_contains_indirect_ref): Moved.\n+\n 2005-09-21  DJ Delorie  <dj@redhat.com>\n \n \t* config/mn10300/mn10300.c (TARGET_DEFAULT_TARGET_FLAGS): Add"}, {"sha": "cb3a0ea06815097d1c5ad05b670b6ae75d46ebf8", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b13476386feac312f1c35320213099bdad2248ed/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b13476386feac312f1c35320213099bdad2248ed/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=b13476386feac312f1c35320213099bdad2248ed", "patch": "@@ -823,7 +823,8 @@ analyze_array_indexes (struct loop *loop,\n   access_fn = instantiate_parameters \n     (loop, analyze_scalar_evolution (loop, opnd1));\n \n-  if (chrec_contains_undetermined (loop->estimated_nb_iterations))\n+  if (estimate_only \n+      && chrec_contains_undetermined (loop->estimated_nb_iterations))\n     estimate_niter_from_size_of_data (loop, opnd0, access_fn, stmt);\n \n   if (!estimate_only)"}, {"sha": "b317c8ccc9a8598766ca38d681beae10562605dc", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b13476386feac312f1c35320213099bdad2248ed/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b13476386feac312f1c35320213099bdad2248ed/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=b13476386feac312f1c35320213099bdad2248ed", "patch": "@@ -1414,6 +1414,21 @@ unmodifiable_var_p (tree var)\n   return TREE_READONLY (var) && (TREE_STATIC (var) || DECL_EXTERNAL (var));\n }\n \n+/* Return true if REF, an ARRAY_REF, has an INDIRECT_REF somewhere in\n+   it.  */\n+\n+static inline bool\n+ref_contains_indirect_ref (tree ref)\n+{\n+  while (handled_component_p (ref))\n+    {\n+      if (TREE_CODE (ref) == INDIRECT_REF)\n+\treturn true;\n+      ref = TREE_OPERAND (ref, 0);\n+    }\n+  return false;\n+}\n+\n /* Return true if REF, a COMPONENT_REF, has an ARRAY_REF somewhere in it.  */\n \n static inline bool"}, {"sha": "ac34f66c55d3c035aa88e6811f1a82b653b2d028", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b13476386feac312f1c35320213099bdad2248ed/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b13476386feac312f1c35320213099bdad2248ed/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=b13476386feac312f1c35320213099bdad2248ed", "patch": "@@ -614,6 +614,7 @@ extern void count_uses_and_derefs (tree, tree, unsigned *, unsigned *, bool *);\n static inline subvar_t get_subvars_for_var (tree);\n static inline tree get_subvar_at (tree, unsigned HOST_WIDE_INT);\n static inline bool ref_contains_array_ref (tree);\n+static inline bool ref_contains_indirect_ref (tree);\n extern tree okay_component_ref_for_subvars (tree, unsigned HOST_WIDE_INT *,\n \t\t\t\t\t    unsigned HOST_WIDE_INT *);\n static inline bool var_can_have_subvars (tree);"}, {"sha": "c41519ca8463cc81e85619e33b539c0656f46b54", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b13476386feac312f1c35320213099bdad2248ed/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b13476386feac312f1c35320213099bdad2248ed/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=b13476386feac312f1c35320213099bdad2248ed", "patch": "@@ -2008,12 +2008,12 @@ offset_overlaps_with_access (const unsigned HOST_WIDE_INT fieldpos,\n /* Given a COMPONENT_REF T, return the constraint_expr for it.  */\n \n static struct constraint_expr\n-get_constraint_for_component_ref (tree t, bool *needs_anyoffset)\n+get_constraint_for_component_ref (tree t, bool *need_anyoffset)\n {\n   struct constraint_expr result;\n-  HOST_WIDE_INT bitsize;\n+  HOST_WIDE_INT bitsize = -1;\n   HOST_WIDE_INT bitpos;\n-  tree offset;\n+  tree offset = NULL_TREE;\n   enum machine_mode mode;\n   int unsignedp;\n   int volatilep;\n@@ -2039,7 +2039,7 @@ get_constraint_for_component_ref (tree t, bool *needs_anyoffset)\n  \n   t = get_inner_reference (t, &bitsize, &bitpos, &offset, &mode,\n \t\t\t   &unsignedp, &volatilep, false);\n-  result = get_constraint_for (t, needs_anyoffset);\n+  result = get_constraint_for (t, need_anyoffset);\n \n   /* This can also happen due to weird offsetof type macros.  */\n   if (TREE_CODE (t) != ADDR_EXPR && result.type == ADDRESSOF)\n@@ -2051,10 +2051,10 @@ get_constraint_for_component_ref (tree t, bool *needs_anyoffset)\n     {\n       result.offset = bitpos;\n     }\t\n-  else if (needs_anyoffset)\n+  else if (need_anyoffset)\n     {\n       result.offset = 0;\n-      *needs_anyoffset = true; \n+      *need_anyoffset = true; \n     }\n   else\n     {\n@@ -2510,23 +2510,6 @@ do_structure_copy (tree lhsop, tree rhsop)\n     }\n }\n \n-\n-/* Return true if REF, a COMPONENT_REF, has an INDIRECT_REF somewhere\n-   in it.  */\n-\n-static inline bool\n-ref_contains_indirect_ref (tree ref)\n-{\n-  while (handled_component_p (ref))\n-    {\n-      if (TREE_CODE (ref) == INDIRECT_REF)\n-\treturn true;\n-      ref = TREE_OPERAND (ref, 0);\n-    }\n-  return false;\n-}\n-\n-\n /* Update related alias information kept in AI.  This is used when\n    building name tags, alias sets and deciding grouping heuristics.\n    STMT is the statement to process.  This function also updates"}]}