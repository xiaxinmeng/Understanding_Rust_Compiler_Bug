{"sha": "92eef6c33d49137707e5b3962822c6dded1f3c79", "node_id": "C_kwDOANBUbNoAKDkyZWVmNmMzM2Q0OTEzNzcwN2U1YjM5NjI4MjJjNmRkZWQxZjNjNzk", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-08T16:05:54Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-08T16:24:48Z"}, "message": "Fix type inference on unit-structs\n\nWhen we initilize a structure that contains an identifier for the value\nwhich resolves to a generic unit-struct. The unit struct has no fields\nbut it also contains a reference to a generic parameter which needs to be\ninfered this updates the code for identifiers to act like a\nPathInExpression to infer the generic parameters when its unit struct only.\n\nFixes #1447", "tree": {"sha": "64afc1dfa0d48ff24e387ff7d23e897e8146cca2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64afc1dfa0d48ff24e387ff7d23e897e8146cca2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92eef6c33d49137707e5b3962822c6dded1f3c79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92eef6c33d49137707e5b3962822c6dded1f3c79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92eef6c33d49137707e5b3962822c6dded1f3c79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92eef6c33d49137707e5b3962822c6dded1f3c79/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9840366b6e4f2bba8f3c67a4ee805d9f4f3c1c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9840366b6e4f2bba8f3c67a4ee805d9f4f3c1c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9840366b6e4f2bba8f3c67a4ee805d9f4f3c1c5"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "0c44f28e4ac0bfae44a34130773281c7ce705359", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92eef6c33d49137707e5b3962822c6dded1f3c79/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92eef6c33d49137707e5b3962822c6dded1f3c79/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=92eef6c33d49137707e5b3962822c6dded1f3c79", "patch": "@@ -310,6 +310,17 @@ class TypeCheckExpr : public TypeCheckBase\n       }\n \n     infered = lookup->clone ();\n+\n+    // Generic unit structs look like an identifier but they actually need be\n+    // handled as a path-in-expression so this gives us a chance to infer the\n+    // generic parameters.\n+    // see https://github.com/Rust-GCC/gccrs/issues/1447\n+    bool is_unit_struct\n+      = infered->get_kind () == TyTy::TypeKind::ADT && infered->is_unit ();\n+    if (is_unit_struct && infered->needs_generic_substitutions ())\n+      {\n+\tinfered = SubstMapper::InferSubst (infered, expr.get_locus ());\n+      }\n   }\n \n   void visit (HIR::LiteralExpr &expr) override"}, {"sha": "e0543e6247c4a071bad0dd1f85589505835c9dc5", "filename": "gcc/testsuite/rust/compile/issue-1447.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92eef6c33d49137707e5b3962822c6dded1f3c79/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1447.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92eef6c33d49137707e5b3962822c6dded1f3c79/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1447.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1447.rs?ref=92eef6c33d49137707e5b3962822c6dded1f3c79", "patch": "@@ -0,0 +1,28 @@\n+// { dg-options \"-w\" }\n+struct PhantomData<T>;\n+\n+struct Hasher<S> {\n+    _marker: PhantomData<S>,\n+}\n+\n+struct Sip24Rounds;\n+\n+struct SipHasher24 {\n+    hasher: Hasher<Sip24Rounds>,\n+}\n+\n+impl SipHasher24 {\n+    pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher24 {\n+        SipHasher24 {\n+            hasher: Hasher::new_with_keys(),\n+        }\n+    }\n+}\n+\n+impl<S> Hasher<S> {\n+    fn new_with_keys() -> Hasher<S> {\n+        Hasher {\n+            _marker: PhantomData,\n+        }\n+    }\n+}"}]}