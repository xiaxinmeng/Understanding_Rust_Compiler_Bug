{"sha": "d5ffe1cdb023f502c09fbc64744f4cf9ad2be90d", "node_id": "C_kwDOANBUbNoAKGQ1ZmZlMWNkYjAyM2Y1MDJjMDlmYmM2NDc0NGY0Y2Y5YWQyYmU5MGQ", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-28T09:38:09Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-28T09:38:09Z"}, "message": "refactor name resolution of generic arguments into ResolveType class", "tree": {"sha": "e74a42c6d48e74ab286d674779aa9030ebe7b583", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e74a42c6d48e74ab286d674779aa9030ebe7b583"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5ffe1cdb023f502c09fbc64744f4cf9ad2be90d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5ffe1cdb023f502c09fbc64744f4cf9ad2be90d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5ffe1cdb023f502c09fbc64744f4cf9ad2be90d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5ffe1cdb023f502c09fbc64744f4cf9ad2be90d/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da2dda70637ecd42a9ba3fba976a5f280e880852", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da2dda70637ecd42a9ba3fba976a5f280e880852", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da2dda70637ecd42a9ba3fba976a5f280e880852"}], "stats": {"total": 82, "additions": 25, "deletions": 57}, "files": [{"sha": "f0ad5673ab4d4aadbdcb3bb7acfe986f638e2aa4", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ffe1cdb023f502c09fbc64744f4cf9ad2be90d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ffe1cdb023f502c09fbc64744f4cf9ad2be90d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc?ref=d5ffe1cdb023f502c09fbc64744f4cf9ad2be90d", "patch": "@@ -87,7 +87,7 @@ ResolveExpr::visit (AST::MethodCallExpr &expr)\n   if (expr.get_method_name ().has_generic_args ())\n     {\n       AST::GenericArgs &args = expr.get_method_name ().get_generic_args ();\n-      ResolveTypeToCanonicalPath::type_resolve_generic_args (args);\n+      ResolveType::type_resolve_generic_args (args);\n     }\n \n   auto const &in_params = expr.get_params ();"}, {"sha": "a6940d41c0edd33bb1d1edc82a226d9e7fbbe861", "filename": "gcc/rust/resolve/rust-ast-resolve-path.cc", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ffe1cdb023f502c09fbc64744f4cf9ad2be90d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ffe1cdb023f502c09fbc64744f4cf9ad2be90d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc?ref=d5ffe1cdb023f502c09fbc64744f4cf9ad2be90d", "patch": "@@ -88,14 +88,7 @@ ResolvePath::resolve_path (AST::PathInExpression *expr)\n       // resolve any generic args\n       if (segment.has_generic_args ())\n \t{\n-\t  bool ok = ResolveTypeToCanonicalPath::type_resolve_generic_args (\n-\t    segment.get_generic_args ());\n-\t  if (!ok)\n-\t    {\n-\t      rust_error_at (segment.get_locus (),\n-\t\t\t     \"failed to resolve generic arguments\");\n-\t      return;\n-\t    }\n+\t  ResolveType::type_resolve_generic_args (segment.get_generic_args ());\n \t}\n \n       // logic is awkward here there are a few cases\n@@ -235,14 +228,7 @@ ResolvePath::resolve_path (AST::QualifiedPathInExpression *expr)\n       // generic arguments used\n       if (segment.has_generic_args ())\n \t{\n-\t  bool ok = ResolveTypeToCanonicalPath::type_resolve_generic_args (\n-\t    segment.get_generic_args ());\n-\t  if (!ok)\n-\t    {\n-\t      rust_error_at (segment.get_locus (),\n-\t\t\t     \"failed to resolve generic arguments\");\n-\t      return;\n-\t    }\n+\t  ResolveType::type_resolve_generic_args (segment.get_generic_args ());\n \t}\n     }\n }"}, {"sha": "553008d40ccac8da7549a512084d9fef3fee736a", "filename": "gcc/rust/resolve/rust-ast-resolve-type.cc", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ffe1cdb023f502c09fbc64744f4cf9ad2be90d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ffe1cdb023f502c09fbc64744f4cf9ad2be90d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc?ref=d5ffe1cdb023f502c09fbc64744f4cf9ad2be90d", "patch": "@@ -44,19 +44,6 @@ ResolveTypeToCanonicalPath::canonicalize_generic_args (AST::GenericArgs &args)\n   return \"<\" + buf + \">\";\n }\n \n-bool\n-ResolveTypeToCanonicalPath::type_resolve_generic_args (AST::GenericArgs &args)\n-{\n-  for (auto &gt : args.get_type_args ())\n-    {\n-      ResolveType::go (gt.get (), UNKNOWN_NODEID);\n-      // FIXME error handling here for inference variable since they do not have\n-      // a node to resolve to\n-      // if (resolved == UNKNOWN_NODEID) return false;\n-    }\n-  return true;\n-}\n-\n void\n ResolveTypeToCanonicalPath::visit (AST::TypePathSegmentGeneric &seg)\n {\n@@ -79,8 +66,7 @@ ResolveTypeToCanonicalPath::visit (AST::TypePathSegmentGeneric &seg)\n \n   if (type_resolve_generic_args_flag)\n     {\n-      bool ok = type_resolve_generic_args (seg.get_generic_args ());\n-      failure_flag = !ok;\n+      ResolveType::type_resolve_generic_args (seg.get_generic_args ());\n     }\n \n   if (include_generic_args_flag)"}, {"sha": "b16799f2af257ab07c1516277731fd896ccaf67e", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 21, "deletions": 25, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ffe1cdb023f502c09fbc64744f4cf9ad2be90d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ffe1cdb023f502c09fbc64744f4cf9ad2be90d/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=d5ffe1cdb023f502c09fbc64744f4cf9ad2be90d", "patch": "@@ -64,8 +64,6 @@ class ResolveTypeToCanonicalPath : public ResolverBase\n \n   static std::string canonicalize_generic_args (AST::GenericArgs &args);\n \n-  static bool type_resolve_generic_args (AST::GenericArgs &args);\n-\n protected:\n   ResolveTypeToCanonicalPath (bool include_generic_args,\n \t\t\t      bool type_resolve_generic_args)\n@@ -81,29 +79,6 @@ class ResolveTypeToCanonicalPath : public ResolverBase\n   bool failure_flag;\n };\n \n-class ResolvePathSegmentToCanonicalPath\n-{\n-public:\n-  static CanonicalPath resolve (AST::PathExprSegment &seg)\n-  {\n-    if (!seg.has_generic_args ())\n-      return CanonicalPath::new_seg (seg.get_node_id (),\n-\t\t\t\t     seg.get_ident_segment ().as_string ());\n-\n-    bool ok = ResolveTypeToCanonicalPath::type_resolve_generic_args (\n-      seg.get_generic_args ());\n-    if (!ok)\n-      {\n-\trust_error_at (seg.get_locus (),\n-\t\t       \"failed to resolve all generic arguments\");\n-\treturn CanonicalPath::create_empty ();\n-      }\n-\n-    return CanonicalPath::new_seg (seg.get_node_id (),\n-\t\t\t\t   seg.get_ident_segment ().as_string ());\n-  }\n-};\n-\n class TraitImplProjection\n {\n public:\n@@ -143,6 +118,12 @@ class ResolveType : public ResolverBase\n     return resolver.resolved_node;\n   }\n \n+  static void type_resolve_generic_args (AST::GenericArgs &args)\n+  {\n+    for (auto &gt : args.get_type_args ())\n+      ResolveType::go (gt.get ());\n+  }\n+\n   void visit (AST::BareFunctionType &fntype) override\n   {\n     for (auto &param : fntype.get_function_params ())\n@@ -213,6 +194,21 @@ class ResolveType : public ResolverBase\n   CanonicalPath *canonical_path;\n };\n \n+class ResolvePathSegmentToCanonicalPath\n+{\n+public:\n+  static CanonicalPath resolve (AST::PathExprSegment &seg)\n+  {\n+    if (!seg.has_generic_args ())\n+      return CanonicalPath::new_seg (seg.get_node_id (),\n+\t\t\t\t     seg.get_ident_segment ().as_string ());\n+\n+    ResolveType::type_resolve_generic_args (seg.get_generic_args ());\n+    return CanonicalPath::new_seg (seg.get_node_id (),\n+\t\t\t\t   seg.get_ident_segment ().as_string ());\n+  }\n+};\n+\n class ResolveTypeBound : public ResolverBase\n {\n   using Rust::Resolver::ResolverBase::visit;"}]}