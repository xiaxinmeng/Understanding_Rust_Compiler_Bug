{"sha": "8deb7047a6f2f1c3d8a1d3dadd7c4a48363844d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRlYjcwNDdhNmYyZjFjM2Q4YTFkM2RhZGQ3YzRhNDgzNjM4NDRkNA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-01-24T00:03:35Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-01-24T00:03:35Z"}, "message": "(emit_store_flag): Reset ICODE using returned COMPARISON.\n\nFrom-SVN: r3315", "tree": {"sha": "a02f5c1112ad474ed4f92cea61e2f43ff6d90ddf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a02f5c1112ad474ed4f92cea61e2f43ff6d90ddf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8deb7047a6f2f1c3d8a1d3dadd7c4a48363844d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8deb7047a6f2f1c3d8a1d3dadd7c4a48363844d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8deb7047a6f2f1c3d8a1d3dadd7c4a48363844d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8deb7047a6f2f1c3d8a1d3dadd7c4a48363844d4/comments", "author": null, "committer": null, "parents": [{"sha": "de5f1a5a770f44ff67211d5a9c0c02a22d5c22dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de5f1a5a770f44ff67211d5a9c0c02a22d5c22dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de5f1a5a770f44ff67211d5a9c0c02a22d5c22dc"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "c652d075d9b68b721397740b63d3bccd44ba48e4", "filename": "gcc/expmed.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8deb7047a6f2f1c3d8a1d3dadd7c4a48363844d4/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8deb7047a6f2f1c3d8a1d3dadd7c4a48363844d4/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=8deb7047a6f2f1c3d8a1d3dadd7c4a48363844d4", "patch": "@@ -2800,7 +2800,7 @@ emit_store_flag (target, code, op0, op1, mode, unsignedp, normalizep)\n \t      && (STORE_FLAG_VALUE \n \t\t  == (HOST_WIDE_INT) 1 << (GET_MODE_BITSIZE (mode) - 1)))))\n     {\n-      rtx subtarget = target;\n+      subtarget = target;\n \n       /* If the result is to be wider than OP0, it is best to convert it\n \t first.  If it is to be narrower, it is *incorrect* to convert it\n@@ -2851,6 +2851,12 @@ emit_store_flag (target, code, op0, op1, mode, unsignedp, normalizep)\n \t\t: normalizep == -1 ? constm1_rtx\n \t\t: const_true_rtx);\n \n+      /* Comparison operands could have been swapped;\n+\t so get the new comprison code.\n+\t Note that GET_CODE gives us either the original code\n+\t or the result of swap_condition.  */\n+      icode = setcc_gen_code[(int) GET_CODE (comparison)];\n+\n       /* Get a reference to the target in the proper mode for this insn.  */\n       compare_mode = insn_operand_mode[(int) icode][0];\n       subtarget = target;"}]}