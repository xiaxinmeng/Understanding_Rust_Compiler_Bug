{"sha": "1fba0608d12a209a5d76d65bcb1dec1c07bc33e9", "node_id": "C_kwDOANBUbNoAKDFmYmEwNjA4ZDEyYTIwOWE1ZDc2ZDY1YmNiMWRlYzFjMDdiYzMzZTk", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-05-16T01:06:04Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-05-17T00:59:42Z"}, "message": "Clamp vec_perm_expr index in simplify_bitfield_ref to avoid ICE.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/105591\n\t* tree-ssa-forwprop.cc (simplify_bitfield_ref): Clamp\n\tvec_perm_expr index.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/pr105591.c: New test.", "tree": {"sha": "b013b616a7ae843b415190a79e6b6018574d675c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b013b616a7ae843b415190a79e6b6018574d675c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fba0608d12a209a5d76d65bcb1dec1c07bc33e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fba0608d12a209a5d76d65bcb1dec1c07bc33e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fba0608d12a209a5d76d65bcb1dec1c07bc33e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fba0608d12a209a5d76d65bcb1dec1c07bc33e9/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "702bd11fa7ddfce0d24581251e979e8a6d7c0d4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "9554c42e2f48b5bb75f768d2025878e6308e7755", "filename": "gcc/testsuite/gcc.dg/pr105591.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fba0608d12a209a5d76d65bcb1dec1c07bc33e9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105591.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fba0608d12a209a5d76d65bcb1dec1c07bc33e9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105591.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105591.c?ref=1fba0608d12a209a5d76d65bcb1dec1c07bc33e9", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-psabi -O\" } */\n+/* { dg-additional-options \"-mavx\" { target x86_64-*-* i?86-*-* } } */\n+typedef unsigned long long __attribute__((__vector_size__ (16))) U;\n+typedef unsigned long long __attribute__((__vector_size__ (32))) V;\n+\n+V\n+foo (U u)\n+{\n+  U x = __builtin_shuffle (u, (U) { 0xBE2ED0AB630B33FE });\n+  return __builtin_shufflevector (u, x, 2, 1, 0, 3);\n+}"}, {"sha": "7da3f80af105a2d98bc60b22f045f62307dd6f2f", "filename": "gcc/tree-ssa-forwprop.cc", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fba0608d12a209a5d76d65bcb1dec1c07bc33e9/gcc%2Ftree-ssa-forwprop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fba0608d12a209a5d76d65bcb1dec1c07bc33e9/gcc%2Ftree-ssa-forwprop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.cc?ref=1fba0608d12a209a5d76d65bcb1dec1c07bc33e9", "patch": "@@ -2381,23 +2381,26 @@ simplify_bitfield_ref (gimple_stmt_iterator *gsi)\n \n   /* One element.  */\n   if (known_eq (size, elem_size))\n-    idx = TREE_INT_CST_LOW (VECTOR_CST_ELT (m, idx));\n+    idx = TREE_INT_CST_LOW (VECTOR_CST_ELT (m, idx)) % (2 * nelts);\n   else\n     {\n       unsigned HOST_WIDE_INT nelts_op;\n       if (!constant_multiple_p (size, elem_size, &nelts_op)\n \t  || !pow2p_hwi (nelts_op))\n \treturn false;\n-      unsigned start = TREE_INT_CST_LOW (vector_cst_elt (m, idx));\n-      unsigned end = TREE_INT_CST_LOW (vector_cst_elt (m, idx + nelts_op - 1));\n+      /* Clamp vec_perm_expr index.  */\n+      unsigned start = TREE_INT_CST_LOW (vector_cst_elt (m, idx)) % (2 * nelts);\n+      unsigned end = TREE_INT_CST_LOW (vector_cst_elt (m, idx + nelts_op - 1))\n+\t\t     % (2 * nelts);\n       /* Be in the same vector.  */\n       if ((start < nelts) != (end < nelts))\n \treturn false;\n       for (unsigned HOST_WIDE_INT i = 1; i != nelts_op; i++)\n \t{\n \t  /* Continuous area.  */\n-\t  if (TREE_INT_CST_LOW (vector_cst_elt (m, idx + i)) - 1\n-\t      != TREE_INT_CST_LOW (vector_cst_elt (m, idx + i - 1)))\n+\t  if (TREE_INT_CST_LOW (vector_cst_elt (m, idx + i)) % (2 * nelts) - 1\n+\t      != TREE_INT_CST_LOW (vector_cst_elt (m, idx + i - 1))\n+\t\t % (2 * nelts))\n \t    return false;\n \t}\n       /* Alignment not worse than before.  */"}]}