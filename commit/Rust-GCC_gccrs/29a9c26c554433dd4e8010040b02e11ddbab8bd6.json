{"sha": "29a9c26c554433dd4e8010040b02e11ddbab8bd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlhOWMyNmM1NTQ0MzNkZDRlODAxMDA0MGIwMmUxMWRkYmFiOGJkNg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-08-08T20:28:21Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-08-08T20:28:21Z"}, "message": "2018-08-08  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/stl_algo.h\n\t(__rotate(_Ite, _Ite, _Ite, forward_iterator_tag))\n\t(__rotate(_Ite, _Ite, _Ite, bidirectional_iterator_tag))\n\t(__rotate(_Ite, _Ite, _Ite, random_access_iterator_tag)): Move code duplication...\n\t(rotate(_Ite, _Ite, _Ite)): ...here.\n\t(__stable_partition_adaptive(_FIt, _FIt, _Pred, _Dist, _Pointer, _Dist)):\n\tSimplify rotate call.\n\t(__rotate_adaptive(_BIt1, _BIt1, _BIt1, _Dist, _Dist, _Bit2, _Dist)):\n\tLikewise.\n\t(__merge_without_buffer(_BIt, _BIt, _BIt, _Dist, _Dist, _Comp)):\n\tLikewise.\n\nFrom-SVN: r263433", "tree": {"sha": "b7cb21d4b2277b32dd4de540b90b5bc959e46a2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7cb21d4b2277b32dd4de540b90b5bc959e46a2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29a9c26c554433dd4e8010040b02e11ddbab8bd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29a9c26c554433dd4e8010040b02e11ddbab8bd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29a9c26c554433dd4e8010040b02e11ddbab8bd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29a9c26c554433dd4e8010040b02e11ddbab8bd6/comments", "author": null, "committer": null, "parents": [{"sha": "ede9446c26a9290bfb60422b31868212c00a4af7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ede9446c26a9290bfb60422b31868212c00a4af7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ede9446c26a9290bfb60422b31868212c00a4af7"}], "stats": {"total": 49, "additions": 23, "deletions": 26}, "files": [{"sha": "20e03a1fdf5a083f4df04695a99e4c191f8e2ee0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a9c26c554433dd4e8010040b02e11ddbab8bd6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a9c26c554433dd4e8010040b02e11ddbab8bd6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=29a9c26c554433dd4e8010040b02e11ddbab8bd6", "patch": "@@ -1,3 +1,17 @@\n+2018-08-08  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_algo.h\n+\t(__rotate(_Ite, _Ite, _Ite, forward_iterator_tag))\n+\t(__rotate(_Ite, _Ite, _Ite, bidirectional_iterator_tag))\n+\t(__rotate(_Ite, _Ite, _Ite, random_access_iterator_tag)): Move code duplication...\n+\t(rotate(_Ite, _Ite, _Ite)): ...here.\n+\t(__stable_partition_adaptive(_FIt, _FIt, _Pred, _Dist, _Pointer, _Dist)):\n+\tSimplify rotate call.\n+\t(__rotate_adaptive(_BIt1, _BIt1, _BIt1, _Dist, _Dist, _Bit2, _Dist)):\n+\tLikewise.\n+\t(__merge_without_buffer(_BIt, _BIt, _BIt, _Dist, _Dist, _Comp)):\n+\tLikewise.\n+\n 2018-08-08  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* libsupc++/new_opa.cc (aligned_alloc): Declare inside namespace to"}, {"sha": "e2388b0780db8bdbcca8d224947d6581cb9d6d22", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 9, "deletions": 26, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a9c26c554433dd4e8010040b02e11ddbab8bd6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a9c26c554433dd4e8010040b02e11ddbab8bd6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=29a9c26c554433dd4e8010040b02e11ddbab8bd6", "patch": "@@ -1251,11 +1251,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t     _ForwardIterator __last,\n \t     forward_iterator_tag)\n     {\n-      if (__first == __middle)\n-\treturn __last;\n-      else if (__last  == __middle)\n-\treturn __first;\n-\n       _ForwardIterator __first2 = __middle;\n       do\n \t{\n@@ -1296,11 +1291,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<\n \t\t\t\t  _BidirectionalIterator>)\n \n-      if (__first == __middle)\n-\treturn __last;\n-      else if (__last  == __middle)\n-\treturn __first;\n-\n       std::__reverse(__first,  __middle, bidirectional_iterator_tag());\n       std::__reverse(__middle, __last,   bidirectional_iterator_tag());\n \n@@ -1334,11 +1324,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t\t\t\t  _RandomAccessIterator>)\n \n-      if (__first == __middle)\n-\treturn __last;\n-      else if (__last  == __middle)\n-\treturn __first;\n-\n       typedef typename iterator_traits<_RandomAccessIterator>::difference_type\n \t_Distance;\n       typedef typename iterator_traits<_RandomAccessIterator>::value_type\n@@ -1440,6 +1425,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_requires_valid_range(__first, __middle);\n       __glibcxx_requires_valid_range(__middle, __last);\n \n+      if (__first == __middle)\n+\treturn __last;\n+      else if (__last  == __middle)\n+\treturn __first;\n+\n       return std::__rotate(__first, __middle, __last,\n \t\t\t   std::__iterator_category(__first));\n     }\n@@ -1601,9 +1591,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t   __right_len,\n \t\t\t\t\t   __buffer, __buffer_size);\n \n-      std::rotate(__left_split, __middle, __right_split);\n-      std::advance(__left_split, std::distance(__middle, __right_split));\n-      return __left_split;\n+      return std::rotate(__left_split, __middle, __right_split);\n     }\n \n   template<typename _ForwardIterator, typename _Predicate>\n@@ -2402,11 +2390,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    return __last;\n \t}\n       else\n-\t{\n-\t  std::rotate(__first, __middle, __last);\n-\t  std::advance(__first, std::distance(__middle, __last));\n-\t  return __first;\n-\t}\n+\treturn std::rotate(__first, __middle, __last);\n     }\n \n   /// This is a helper function for the merge routines.\n@@ -2513,9 +2497,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  __len11 = std::distance(__first, __first_cut);\n \t}\n \n-      std::rotate(__first_cut, __middle, __second_cut);\n-      _BidirectionalIterator __new_middle = __first_cut;\n-      std::advance(__new_middle, std::distance(__middle, __second_cut));\n+      _BidirectionalIterator __new_middle\n+\t= std::rotate(__first_cut, __middle, __second_cut);\n       std::__merge_without_buffer(__first, __first_cut, __new_middle,\n \t\t\t\t  __len11, __len22, __comp);\n       std::__merge_without_buffer(__new_middle, __second_cut, __last,"}]}