{"sha": "de9bb867970b755eca6ff612daae801f120ee928", "node_id": "C_kwDOANBUbNoAKGRlOWJiODY3OTcwYjc1NWVjYTZmZjYxMmRhYWU4MDFmMTIwZWU5Mjg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-15T22:32:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-15T22:32:42Z"}, "message": "Merge #831\n\n831: Fix out-of-bounds in typechecking of ADTTypes r=philberty a=philberty\n\nIn the case of an enum where there are more variants than the number of\r\nfields within any variant we end up hitting an out of bounds exception\r\nas we are using the wrong iterator on the fields during type checking.\r\nThis also means we were missing all possible fields in the case during\r\ntype checking. \n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "d14617885960c60ecb777993479bbe967302ec02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d14617885960c60ecb777993479bbe967302ec02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de9bb867970b755eca6ff612daae801f120ee928", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhum0KCRBK7hj4Ov3rIwAAZnMIAFGPFESqdyUO69z6Bx+DrFG2\nTto4ZHBUdBwngJBk1PbeS+Jg870aTyfKg8pI3n7nwUg3IsQIn7cmLVFbHiIc1nin\n7rl+NnP44pO8yRDqAyJ5/Y0c7umYcSLoQkNZEiRytXpsZppwQm8PPijjn/9wql7J\nLadZE3yde/y4zi2I/GVtFkvhf/Aqiyv1oDPc1Eaz7yCRHRMDi03H7+AY4enjmZYq\nCUk/qrTnEbAFGwqW6a3v0Zm4TJ8dRL88E5L3q6gby0bdxS6ZA8VDGdScBySOl/64\nQ9PSwnzwiYGnFEYYt9QF4PSugymeuSSiRBVBtN+/g7SZ71hoX+DQAe7s8pOgGXo=\n=LgB9\n-----END PGP SIGNATURE-----\n", "payload": "tree d14617885960c60ecb777993479bbe967302ec02\nparent 310968874db1902084012cf767ad0b6e93f028c2\nparent 24dd9a6aef8493a46e61735b17c9c26bd7c164ef\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1639607562 +0000\ncommitter GitHub <noreply@github.com> 1639607562 +0000\n\nMerge #831\n\n831: Fix out-of-bounds in typechecking of ADTTypes r=philberty a=philberty\n\nIn the case of an enum where there are more variants than the number of\r\nfields within any variant we end up hitting an out of bounds exception\r\nas we are using the wrong iterator on the fields during type checking.\r\nThis also means we were missing all possible fields in the case during\r\ntype checking. \n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de9bb867970b755eca6ff612daae801f120ee928", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de9bb867970b755eca6ff612daae801f120ee928", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de9bb867970b755eca6ff612daae801f120ee928/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "310968874db1902084012cf767ad0b6e93f028c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/310968874db1902084012cf767ad0b6e93f028c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/310968874db1902084012cf767ad0b6e93f028c2"}, {"sha": "24dd9a6aef8493a46e61735b17c9c26bd7c164ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24dd9a6aef8493a46e61735b17c9c26bd7c164ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24dd9a6aef8493a46e61735b17c9c26bd7c164ef"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "291e59039482ebf310c3b22f9e20fdd54a139166", "filename": "gcc/rust/typecheck/rust-tyty-cmp.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9bb867970b755eca6ff612daae801f120ee928/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9bb867970b755eca6ff612daae801f120ee928/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h?ref=de9bb867970b755eca6ff612daae801f120ee928", "patch": "@@ -1021,8 +1021,8 @@ class ADTCmp : public BaseCmp\n \n \tfor (size_t j = 0; j < a->num_fields (); j++)\n \t  {\n-\t    TyTy::StructFieldType *base_field = a->get_field_at_index (i);\n-\t    TyTy::StructFieldType *other_field = b->get_field_at_index (i);\n+\t    TyTy::StructFieldType *base_field = a->get_field_at_index (j);\n+\t    TyTy::StructFieldType *other_field = b->get_field_at_index (j);\n \n \t    TyTy::BaseType *this_field_ty = base_field->get_field_type ();\n \t    TyTy::BaseType *other_field_ty = other_field->get_field_type ();"}, {"sha": "b483130eb5338c15c5c7ef066fa33dd63b168c73", "filename": "gcc/rust/typecheck/rust-tyty-coercion.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9bb867970b755eca6ff612daae801f120ee928/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9bb867970b755eca6ff612daae801f120ee928/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h?ref=de9bb867970b755eca6ff612daae801f120ee928", "patch": "@@ -1031,8 +1031,8 @@ class ADTCoercionRules : public BaseCoercionRules\n \n \tfor (size_t j = 0; j < a->num_fields (); j++)\n \t  {\n-\t    TyTy::StructFieldType *base_field = a->get_field_at_index (i);\n-\t    TyTy::StructFieldType *other_field = b->get_field_at_index (i);\n+\t    TyTy::StructFieldType *base_field = a->get_field_at_index (j);\n+\t    TyTy::StructFieldType *other_field = b->get_field_at_index (j);\n \n \t    TyTy::BaseType *this_field_ty = base_field->get_field_type ();\n \t    TyTy::BaseType *other_field_ty = other_field->get_field_type ();"}, {"sha": "5dc2d2ffda4523dc0b4a34e89e7b3edff6d8fbc1", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9bb867970b755eca6ff612daae801f120ee928/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9bb867970b755eca6ff612daae801f120ee928/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=de9bb867970b755eca6ff612daae801f120ee928", "patch": "@@ -1047,8 +1047,8 @@ class ADTRules : public BaseRules\n \n \tfor (size_t j = 0; j < a->num_fields (); j++)\n \t  {\n-\t    TyTy::StructFieldType *base_field = a->get_field_at_index (i);\n-\t    TyTy::StructFieldType *other_field = b->get_field_at_index (i);\n+\t    TyTy::StructFieldType *base_field = a->get_field_at_index (j);\n+\t    TyTy::StructFieldType *other_field = b->get_field_at_index (j);\n \n \t    TyTy::BaseType *this_field_ty = base_field->get_field_type ();\n \t    TyTy::BaseType *other_field_ty = other_field->get_field_type ();"}]}