{"sha": "ef2c20e73c8989e83863bdb05af0bf629faf5ff2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYyYzIwZTczYzg5ODllODM4NjNiZGIwNWFmMGJmNjI5ZmFmNWZmMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-02-05T11:22:39Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-02-05T11:22:39Z"}, "message": "015-02-05  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch13.adb (Add_Invariants): Don't assume invariant is\n\tstandard Boolean.\n\t* sem_prag.adb (Analyze_Pragma, case Check): Don't assume\n\tcondition is standard Boolean, it can be non-standard derived\n\tBoolean.\n\n2015-02-05  Robert Dewar  <dewar@adacore.com>\n\n\t* checks.adb (Enable_Range_Check): Disconnect attempted\n\toptimization for the case of range check for subscript of\n\tunconstrained array.\n\n2015-02-05  Robert Dewar  <dewar@adacore.com>\n\n\t* par-ch13.adb (With_Present): New function\n\t(Aspect_Specifications_Present): Handle WHEN in place of WITH\n\t(Get_Aspect_Specifications): Comment update.\n\t* par.adb: Comment updates.\n\n2015-02-05  Robert Dewar  <dewar@adacore.com>\n\n\t* errout.adb (Handle_Serious_Error): New setting of Fatal_Error.\n\t* frontend.adb (Frontend): New setting of Fatal_Error.\n\t* lib-load.adb (Create_Dummy_Package_Unit): New setting of\n\tFatal_Error.\n\t(Load_Main_Source): New setting of Fatal_Error\n\t(Load_Unit): New setting of Fatal_Error.\n\t* lib-writ.adb (Add_Preprocessing_Dependency): New setting of\n\tFatal_Error.\n\t(Ensure_System_Dependency): New setting of Fatal_Error.\n\t* lib.adb (Fatal_Error): New setting of Fatal_Error\n\t(Set_Fatal_Error): New setting of Fatal_Error.\n\t* lib.ads: New definition of Fatal_Error and associated routines.\n\t* par-ch10.adb (P_Compilation_Unit): New setting of Fatal_Error.\n\t* par-load.adb (Load): New setting of Fatal_Error.\n\t* rtsfind.adb (Load_RTU): New setting of Fatal_Error.\n\t* sem_ch10.adb (Analyze_Compilation_Unit): New setting of\n\tFatal_Error.\n\t(Optional_Subunit): New setting of Fatal_Error.\n\t(Analyze_Proper_Body): New setting of Fatal_Error.\n\t(Load_Needed_Body): New setting of Fatal_Error.\n\n2015-02-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Resolve_Call): If the function being called has\n\tout parameters do not check for language version if the function\n\tcomes from a predefined unit, as those are always compiled in\n\tAda 2012 mode.\n\n2015-02-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Process_Full_View): Verify that the full view\n\tof a type extension must carry an explicit limited keyword if\n\tthe partial view does (RM 7.3 (10.1)).\n\nFrom-SVN: r220446", "tree": {"sha": "8d9d3895dc4cbec40c32fe4e675a705399623c9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d9d3895dc4cbec40c32fe4e675a705399623c9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef2c20e73c8989e83863bdb05af0bf629faf5ff2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef2c20e73c8989e83863bdb05af0bf629faf5ff2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef2c20e73c8989e83863bdb05af0bf629faf5ff2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/comments", "author": null, "committer": null, "parents": [{"sha": "c93f201145542240f9b197b17c06ddab696bbfd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c93f201145542240f9b197b17c06ddab696bbfd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c93f201145542240f9b197b17c06ddab696bbfd4"}], "stats": {"total": 326, "additions": 245, "deletions": 81}, "files": [{"sha": "bd6f02ad88df99251aab1d31afc72349d18afeda", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ef2c20e73c8989e83863bdb05af0bf629faf5ff2", "patch": "@@ -1,3 +1,60 @@\n+2015-02-05  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch13.adb (Add_Invariants): Don't assume invariant is\n+\tstandard Boolean.\n+\t* sem_prag.adb (Analyze_Pragma, case Check): Don't assume\n+\tcondition is standard Boolean, it can be non-standard derived\n+\tBoolean.\n+\n+2015-02-05  Robert Dewar  <dewar@adacore.com>\n+\n+\t* checks.adb (Enable_Range_Check): Disconnect attempted\n+\toptimization for the case of range check for subscript of\n+\tunconstrained array.\n+\n+2015-02-05  Robert Dewar  <dewar@adacore.com>\n+\n+\t* par-ch13.adb (With_Present): New function\n+\t(Aspect_Specifications_Present): Handle WHEN in place of WITH\n+\t(Get_Aspect_Specifications): Comment update.\n+\t* par.adb: Comment updates.\n+\n+2015-02-05  Robert Dewar  <dewar@adacore.com>\n+\n+\t* errout.adb (Handle_Serious_Error): New setting of Fatal_Error.\n+\t* frontend.adb (Frontend): New setting of Fatal_Error.\n+\t* lib-load.adb (Create_Dummy_Package_Unit): New setting of\n+\tFatal_Error.\n+\t(Load_Main_Source): New setting of Fatal_Error\n+\t(Load_Unit): New setting of Fatal_Error.\n+\t* lib-writ.adb (Add_Preprocessing_Dependency): New setting of\n+\tFatal_Error.\n+\t(Ensure_System_Dependency): New setting of Fatal_Error.\n+\t* lib.adb (Fatal_Error): New setting of Fatal_Error\n+\t(Set_Fatal_Error): New setting of Fatal_Error.\n+\t* lib.ads: New definition of Fatal_Error and associated routines.\n+\t* par-ch10.adb (P_Compilation_Unit): New setting of Fatal_Error.\n+\t* par-load.adb (Load): New setting of Fatal_Error.\n+\t* rtsfind.adb (Load_RTU): New setting of Fatal_Error.\n+\t* sem_ch10.adb (Analyze_Compilation_Unit): New setting of\n+\tFatal_Error.\n+\t(Optional_Subunit): New setting of Fatal_Error.\n+\t(Analyze_Proper_Body): New setting of Fatal_Error.\n+\t(Load_Needed_Body): New setting of Fatal_Error.\n+\n+2015-02-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Call): If the function being called has\n+\tout parameters do not check for language version if the function\n+\tcomes from a predefined unit, as those are always compiled in\n+\tAda 2012 mode.\n+\n+2015-02-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Process_Full_View): Verify that the full view\n+\tof a type extension must carry an explicit limited keyword if\n+\tthe partial view does (RM 7.3 (10.1)).\n+\n 2015-02-05  Robert Dewar  <dewar@adacore.com>\n \n \t* g-rannum.adb, g-rannum.ads, s-rannum.adb, s-rannum.ads,"}, {"sha": "87c39956ed0621578a96b65cbc2dde76387dd1e3", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=ef2c20e73c8989e83863bdb05af0bf629faf5ff2", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -5521,10 +5521,14 @@ package body Checks is\n                   return;\n                end if;\n \n-            --  Ditto if the prefix is an explicit dereference whose designated\n-            --  type is unconstrained.\n+            --  Ditto if prefix is simply an unconstrained array. We used\n+            --  to think this case was OK, if the prefix was not an explicit\n+            --  dereference, but we have now seen a case where this is not\n+            --  true, so it is safer to just suppress the optimization in this\n+            --  case. The back end is getting better at eliminating redundant\n+            --  checks in any case, so the loss won't be important.\n \n-            elsif Nkind (Prefix (P)) = N_Explicit_Dereference\n+            elsif Is_Array_Type (Atyp)\n               and then not Is_Constrained (Atyp)\n             then\n                Activate_Range_Check (N);"}, {"sha": "df0fa96387d2fdaca9e43bf656a4a6fde6303643", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=ef2c20e73c8989e83863bdb05af0bf629faf5ff2", "patch": "@@ -753,12 +753,23 @@ package body Errout is\n          end if;\n \n          --  Set the fatal error flag in the unit table unless we are in\n-         --  Try_Semantics mode. This stops the semantics from being performed\n+         --  Try_Semantics mode (in which case we set ignored mode if not\n+         --  currently set. This stops the semantics from being performed\n          --  if we find a serious error. This is skipped if we are currently\n          --  dealing with the configuration pragma file.\n \n-         if not Try_Semantics and then Current_Source_Unit /= No_Unit then\n-            Set_Fatal_Error (Get_Source_Unit (Sptr));\n+         if Current_Source_Unit /= No_Unit then\n+            declare\n+               U : constant Unit_Number_Type := Get_Source_Unit (Sptr);\n+            begin\n+               if Try_Semantics then\n+                  if Fatal_Error (U) = None then\n+                     Set_Fatal_Error (U, Error_Ignored);\n+                  end if;\n+               else\n+                  Set_Fatal_Error (U, Error_Detected);\n+               end if;\n+            end;\n          end if;\n       end Handle_Serious_Error;\n "}, {"sha": "adee97df2fe4c8412cd064c3e478733d759663f8", "filename": "gcc/ada/frontend.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Ffrontend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Ffrontend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffrontend.adb?ref=ef2c20e73c8989e83863bdb05af0bf629faf5ff2", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -338,7 +338,7 @@ begin\n      --  unit failed to load, to avoid cascaded inconsistencies that can lead\n      --  to a compiler crash.\n \n-     and then not Fatal_Error (Main_Unit)\n+     and then Fatal_Error (Main_Unit) /= Error_Detected\n    then\n       --  Pragmas that require some semantic activity, such as Interrupt_State,\n       --  cannot be processed until the main unit is installed, because they\n@@ -388,7 +388,7 @@ begin\n \n       --  Following steps are skipped if we had a fatal error during parsing\n \n-      if not Fatal_Error (Main_Unit) then\n+      if Fatal_Error (Main_Unit) /= Error_Detected then\n \n          --  Reset Operating_Mode to Check_Semantics for subunits. We cannot\n          --  actually generate code for subunits, so we suppress expansion."}, {"sha": "fc52f84f4efe003deeb32a817eb4c270c0645204", "filename": "gcc/ada/lib-load.adb", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Flib-load.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Flib-load.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-load.adb?ref=ef2c20e73c8989e83863bdb05af0bf629faf5ff2", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -212,7 +212,7 @@ package body Lib.Load is\n         Dynamic_Elab      => False,\n         Error_Location    => Sloc (With_Node),\n         Expected_Unit     => Spec_Name,\n-        Fatal_Error       => True,\n+        Fatal_Error       => Error_Detected,\n         Generate_Code     => False,\n         Has_RACW          => False,\n         Filler            => False,\n@@ -319,7 +319,7 @@ package body Lib.Load is\n            Dynamic_Elab      => False,\n            Error_Location    => No_Location,\n            Expected_Unit     => No_Unit_Name,\n-           Fatal_Error       => False,\n+           Fatal_Error       => None,\n            Generate_Code     => False,\n            Has_RACW          => False,\n            Filler            => False,\n@@ -683,7 +683,7 @@ package body Lib.Load is\n               Dynamic_Elab      => False,\n               Error_Location    => Sloc (Error_Node),\n               Expected_Unit     => Uname_Actual,\n-              Fatal_Error       => False,\n+              Fatal_Error       => None,\n               Generate_Code     => False,\n               Has_RACW          => False,\n               Filler            => False,\n@@ -742,10 +742,20 @@ package body Lib.Load is\n \n             --  If loaded unit had a fatal error, then caller inherits it\n \n-            if Units.Table (Unum).Fatal_Error\n-              and then Present (Error_Node)\n-            then\n-               Units.Table (Calling_Unit).Fatal_Error := True;\n+            if Present (Error_Node) then\n+               case Units.Table (Unum).Fatal_Error is\n+                  when None =>\n+                     null;\n+\n+                  when Error_Detected =>\n+                     Units.Table (Calling_Unit).Fatal_Error := Error_Detected;\n+\n+                  when Error_Ignored =>\n+                     if Units.Table (Calling_Unit).Fatal_Error = None then\n+                        Units.Table (Calling_Unit).Fatal_Error :=\n+                                                               Error_Ignored;\n+                     end if;\n+               end case;\n             end if;\n \n             --  Remove load stack entry and return the entry in the file table"}, {"sha": "5a3dcc4d1555eec0f1f6620a560fba6df83c0630", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=ef2c20e73c8989e83863bdb05af0bf629faf5ff2", "patch": "@@ -81,7 +81,7 @@ package body Lib.Writ is\n          Cunit_Entity      => Empty,\n          Dependency_Num    => 0,\n          Dynamic_Elab      => False,\n-         Fatal_Error       => False,\n+         Fatal_Error       => None,\n          Generate_Code     => False,\n          Has_RACW          => False,\n          Filler            => False,\n@@ -139,7 +139,7 @@ package body Lib.Writ is\n         Cunit_Entity      => Empty,\n         Dependency_Num    => 0,\n         Dynamic_Elab      => False,\n-        Fatal_Error       => False,\n+        Fatal_Error       => None,\n         Generate_Code     => False,\n         Has_RACW          => False,\n         Filler            => False,"}, {"sha": "08866b2fb5512116f95fd062dd38b1b0fcb64efe", "filename": "gcc/ada/lib.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Flib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Flib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.adb?ref=ef2c20e73c8989e83863bdb05af0bf629faf5ff2", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -106,7 +106,7 @@ package body Lib is\n       return Units.Table (U).Expected_Unit;\n    end Expected_Unit;\n \n-   function Fatal_Error (U : Unit_Number_Type) return Boolean is\n+   function Fatal_Error (U : Unit_Number_Type) return Fatal_Type is\n    begin\n       return Units.Table (U).Fatal_Error;\n    end Fatal_Error;\n@@ -196,9 +196,9 @@ package body Lib is\n       Units.Table (U).Error_Location := W;\n    end Set_Error_Location;\n \n-   procedure Set_Fatal_Error (U : Unit_Number_Type; B : Boolean := True) is\n+   procedure Set_Fatal_Error (U : Unit_Number_Type; V : Fatal_Type) is\n    begin\n-      Units.Table (U).Fatal_Error := B;\n+      Units.Table (U).Fatal_Error := V;\n    end Set_Fatal_Error;\n \n    procedure Set_Generate_Code (U : Unit_Number_Type; B : Boolean := True) is"}, {"sha": "4e9471c43fd24d2e8891d6a6bc8c4fde3f0d5d9e", "filename": "gcc/ada/lib.ads", "status": "modified", "additions": 36, "deletions": 19, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Flib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Flib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.ads?ref=ef2c20e73c8989e83863bdb05af0bf629faf5ff2", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -302,14 +302,15 @@ package Lib is\n    --      No_Name for the main unit.\n \n    --    Fatal_Error\n-   --      A flag that is initialized to False, and gets set to True if a fatal\n+   --      A flag that is initialized to None and gets set to Errorif a fatal\n    --      error occurs during the processing of a unit. A fatal error is one\n    --      defined as serious enough to stop the next phase of the compiler\n    --      from running (i.e. fatal error during parsing stops semantics,\n    --      fatal error during semantics stops code generation). Note that\n    --      currently, errors of any kind cause Fatal_Error to be set, but\n    --      eventually perhaps only errors labeled as fatal errors should be\n    --      this severe if we decide to try Sem on sources with minor errors.\n+   --      There are three settings (see declaration of Fatal_Type).\n \n    --    Generate_Code\n    --      This flag is set True for all units in the current file for which\n@@ -401,13 +402,29 @@ package Lib is\n    Default_Main_CPU : constant Int := -1;\n    --  Value used in Main_CPU field to indicate default main affinity\n \n+   --  The following defines settings for the Fatal_Error field\n+\n+   type Fatal_Type is (\n+      None,\n+      --  No error detected for this unit\n+\n+      Error_Detected,\n+      --  Fatal error detected that prevents moving to the next phase. For\n+      --  example, a fatal error during parsing inhibits semantic analysis.\n+\n+      Error_Ignored);\n+      --  A fatal error was detected, but we are in Try_Semantics mode (as set\n+      --  by -gnatq or -gnatQ). This does not stop the compiler from proceding,\n+      --  but tools can use this status (e.g. ASIS looking at the generated\n+      --  tree) to know that a fatal error was detected.\n+\n    function Cunit             (U : Unit_Number_Type) return Node_Id;\n    function Cunit_Entity      (U : Unit_Number_Type) return Entity_Id;\n    function Dependency_Num    (U : Unit_Number_Type) return Nat;\n    function Dynamic_Elab      (U : Unit_Number_Type) return Boolean;\n    function Error_Location    (U : Unit_Number_Type) return Source_Ptr;\n    function Expected_Unit     (U : Unit_Number_Type) return Unit_Name_Type;\n-   function Fatal_Error       (U : Unit_Number_Type) return Boolean;\n+   function Fatal_Error       (U : Unit_Number_Type) return Fatal_Type;\n    function Generate_Code     (U : Unit_Number_Type) return Boolean;\n    function Ident_String      (U : Unit_Number_Type) return Node_Id;\n    function Has_RACW          (U : Unit_Number_Type) return Boolean;\n@@ -422,20 +439,20 @@ package Lib is\n    function Unit_Name         (U : Unit_Number_Type) return Unit_Name_Type;\n    --  Get value of named field from given units table entry\n \n-   procedure Set_Cunit             (U : Unit_Number_Type; N : Node_Id);\n-   procedure Set_Cunit_Entity      (U : Unit_Number_Type; E : Entity_Id);\n-   procedure Set_Dynamic_Elab      (U : Unit_Number_Type; B : Boolean := True);\n-   procedure Set_Error_Location    (U : Unit_Number_Type; W : Source_Ptr);\n-   procedure Set_Fatal_Error       (U : Unit_Number_Type; B : Boolean := True);\n-   procedure Set_Generate_Code     (U : Unit_Number_Type; B : Boolean := True);\n-   procedure Set_Has_RACW          (U : Unit_Number_Type; B : Boolean := True);\n-   procedure Set_Ident_String      (U : Unit_Number_Type; N : Node_Id);\n-   procedure Set_Loading           (U : Unit_Number_Type; B : Boolean := True);\n-   procedure Set_Main_CPU          (U : Unit_Number_Type; P : Int);\n-   procedure Set_No_Elab_Code_All  (U : Unit_Number_Type; B : Boolean := True);\n-   procedure Set_Main_Priority     (U : Unit_Number_Type; P : Int);\n-   procedure Set_OA_Setting        (U : Unit_Number_Type; C : Character);\n-   procedure Set_Unit_Name         (U : Unit_Number_Type; N : Unit_Name_Type);\n+   procedure Set_Cunit            (U : Unit_Number_Type; N : Node_Id);\n+   procedure Set_Cunit_Entity     (U : Unit_Number_Type; E : Entity_Id);\n+   procedure Set_Dynamic_Elab     (U : Unit_Number_Type; B : Boolean := True);\n+   procedure Set_Error_Location   (U : Unit_Number_Type; W : Source_Ptr);\n+   procedure Set_Fatal_Error      (U : Unit_Number_Type; V : Fatal_Type);\n+   procedure Set_Generate_Code    (U : Unit_Number_Type; B : Boolean := True);\n+   procedure Set_Has_RACW         (U : Unit_Number_Type; B : Boolean := True);\n+   procedure Set_Ident_String     (U : Unit_Number_Type; N : Node_Id);\n+   procedure Set_Loading          (U : Unit_Number_Type; B : Boolean := True);\n+   procedure Set_Main_CPU         (U : Unit_Number_Type; P : Int);\n+   procedure Set_No_Elab_Code_All (U : Unit_Number_Type; B : Boolean := True);\n+   procedure Set_Main_Priority    (U : Unit_Number_Type; P : Int);\n+   procedure Set_OA_Setting       (U : Unit_Number_Type; C : Character);\n+   procedure Set_Unit_Name        (U : Unit_Number_Type; N : Unit_Name_Type);\n    --  Set value of named field for given units table entry. Note that we\n    --  do not have an entry for each possible field, since some of the fields\n    --  can only be set by specialized interfaces (defined below).\n@@ -606,7 +623,7 @@ package Lib is\n    function Is_Loaded (Uname : Unit_Name_Type) return Boolean;\n    --  Determines if unit with given name is already loaded, i.e. there is\n    --  already an entry in the file table with this unit name for which the\n-   --  corresponding file was found and parsed. Note that the Fatal_Error flag\n+   --  corresponding file was found and parsed. Note that the Fatal_Error value\n    --  of this entry must be checked before proceeding with further processing.\n \n    function Last_Unit return Unit_Number_Type;\n@@ -767,7 +784,7 @@ private\n       Serial_Number     : Nat;\n       Version           : Word;\n       Error_Location    : Source_Ptr;\n-      Fatal_Error       : Boolean;\n+      Fatal_Error       : Fatal_Type;\n       Generate_Code     : Boolean;\n       Has_RACW          : Boolean;\n       Dynamic_Elab      : Boolean;"}, {"sha": "551173066a0f68efccf151c52aa249711f7971e6", "filename": "gcc/ada/par-ch10.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Fpar-ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Fpar-ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch10.adb?ref=ef2c20e73c8989e83863bdb05af0bf629faf5ff2", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -596,7 +596,7 @@ package body Ch10 is\n \n       else\n          Cunit_Error_Flag := True;\n-         Set_Fatal_Error (Current_Source_Unit);\n+         Set_Fatal_Error (Current_Source_Unit, Error_Detected);\n       end if;\n \n       --  Clear away any missing semicolon indication, we are done with that\n@@ -726,7 +726,7 @@ package body Ch10 is\n          --  cascaded messages in some situations.\n \n          else\n-            if not Fatal_Error (Current_Source_Unit) then\n+            if Fatal_Error (Current_Source_Unit) /= Error_Detected then\n                if Token in Token_Class_Cunit then\n                   Error_Msg_SC\n                     (\"end of file expected, \" &\n@@ -758,7 +758,7 @@ package body Ch10 is\n       --  An error resync is a serious bomb, so indicate result unit no good\n \n       when Error_Resync =>\n-         Set_Fatal_Error (Current_Source_Unit);\n+         Set_Fatal_Error (Current_Source_Unit, Error_Detected);\n          return Error;\n    end P_Compilation_Unit;\n "}, {"sha": "fc8874bfd58f8eafea19c5d490871a43aa75ece4", "filename": "gcc/ada/par-ch13.adb", "status": "modified", "additions": 47, "deletions": 5, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Fpar-ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Fpar-ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch13.adb?ref=ef2c20e73c8989e83863bdb05af0bf629faf5ff2", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -48,6 +48,10 @@ package body Ch13 is\n       function Possible_Misspelled_Aspect return Boolean;\n       --  Returns True, if Token_Name is a misspelling of some aspect name\n \n+      function With_Present return Boolean;\n+      --  Returns True if WITH is present, indicating presence of aspect\n+      --  specifications. Also allows incorrect use of WHEN in place of WITH.\n+\n       --------------------------------\n       -- Possible_Misspelled_Aspect --\n       --------------------------------\n@@ -63,6 +67,43 @@ package body Ch13 is\n          return False;\n       end Possible_Misspelled_Aspect;\n \n+      ------------------\n+      -- With_Present --\n+      ------------------\n+\n+      function With_Present return Boolean is\n+      begin\n+         if Token = Tok_With then\n+            return True;\n+\n+         --  Check for WHEN used in place of WITH\n+\n+         elsif Token = Tok_When then\n+            declare\n+               Scan_State : Saved_Scan_State;\n+\n+            begin\n+               Save_Scan_State (Scan_State);\n+               Scan; -- past WHEN\n+\n+               if Token = Tok_Identifier\n+                 and then Get_Aspect_Id (Token_Name) /= No_Aspect\n+               then\n+                  Error_Msg_SC (\"WHEN should be WITH\");\n+                  Restore_Scan_State (Scan_State);\n+                  return True;\n+\n+               else\n+                  Restore_Scan_State (Scan_State);\n+                  return False;\n+               end if;\n+            end;\n+\n+         else\n+            return False;\n+         end if;\n+      end With_Present;\n+\n    --  Start of processing for Aspect_Specifications_Present\n \n    begin\n@@ -79,14 +120,15 @@ package body Ch13 is\n       --  be too expensive. Instead we pick up the aspect specifications later\n       --  as a bogus declaration, and diagnose the semicolon at that point.\n \n-      if Token /= Tok_With then\n+      if not With_Present then\n          return False;\n       end if;\n \n-      --  Have a WITH, see if it looks like an aspect specification\n+      --  Have a WITH or some token that we accept as a legitimate bad attempt\n+      --  at writing WITH. See if it looks like an aspect specification\n \n       Save_Scan_State (Scan_State);\n-      Scan; -- past WITH\n+      Scan; -- past WITH (or WHEN or other bad keyword)\n \n       --  If no identifier, then consider that we definitely do not have an\n       --  aspect specification.\n@@ -193,7 +235,7 @@ package body Ch13 is\n          return Aspects;\n       end if;\n \n-      Scan; -- past WITH\n+      Scan; -- past WITH (or possible WHEN after error)\n       Aspects := Empty_List;\n \n       --  Loop to scan aspects"}, {"sha": "ebd5709ed33912949dca4cbfa349ae070a57dfce", "filename": "gcc/ada/par-load.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Fpar-load.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Fpar-load.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-load.adb?ref=ef2c20e73c8989e83863bdb05af0bf629faf5ff2", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -127,7 +127,7 @@ procedure Load is\n begin\n    --  Don't do any loads if we already had a fatal error\n \n-   if Fatal_Error (Cur_Unum) then\n+   if Fatal_Error (Cur_Unum) = Error_Detected then\n       return;\n    end if;\n "}, {"sha": "76f6e53128d4e3f2cde8b683266019e838b69f4a", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=ef2c20e73c8989e83863bdb05af0bf629faf5ff2", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -951,6 +951,9 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       --  permitted). Note: this routine never checks the terminator token\n       --  for aspects so it does not matter whether the aspect specifications\n       --  are terminated by semicolon or some other character.\n+      --\n+      --  Note: This function also handles the case of WHEN used where WITH\n+      --  was intended, and in that case posts an error and returns True.\n \n       procedure P_Aspect_Specifications\n         (Decl      : Node_Id;\n@@ -960,15 +963,17 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       --  argument is False, the scan pointer is left pointing past the aspects\n       --  and the caller must check for a proper terminator.\n       --\n-      --  P_Aspect_Specifications is called with the current token pointing to\n-      --  either a WITH keyword starting an aspect specification, or an\n-      --  instance of the terminator token. In the former case, the aspect\n-      --  specifications are scanned out including the terminator token if it\n-      --  it is a semicolon, and the Has_Aspect_Specifications flag is set in\n-      --  the given declaration node. A list of aspects is built and stored for\n-      --  this declaration node using a call to Set_Aspect_Specifications. If\n-      --  no WITH keyword is present, then this call has no effect other than\n-      --  scanning out the terminator if it is a semicolon.\n+      --  P_Aspect_Specifications is called with the current token pointing\n+      --  to either a WITH keyword starting an aspect specification, or an\n+      --  instance of what shpould be a terminator token. In the former case,\n+      --  the aspect specifications are scanned out including the terminator\n+      --  token if it it is a semicolon, and the Has_Aspect_Specifications\n+      --  flag is set in the given declaration node. A list of aspects\n+      --  is built and stored for this declaration node using a call to\n+      --  Set_Aspect_Specifications. If no WITH keyword is present, then this\n+      --  call has no effect other than scanning out the terminator if it is a\n+      --  semicolon (with the exception that it detects WHEN used in place of\n+      --  WITH).\n \n       --  If Decl is Error on entry, any scanned aspect specifications are\n       --  ignored and a message is output saying aspect specifications not"}, {"sha": "c96e708872e5c6a5b531fcefc85be6ed82dfc1e2", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=ef2c20e73c8989e83863bdb05af0bf629faf5ff2", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -979,7 +979,7 @@ package body Rtsfind is\n \n       if U.Unum = No_Unit then\n          Load_Fail (\"not found\", U_Id, Id);\n-      elsif Fatal_Error (U.Unum) then\n+      elsif Fatal_Error (U.Unum) = Error_Detected then\n          Load_Fail (\"had parser errors\", U_Id, Id);\n       end if;\n \n@@ -1025,7 +1025,7 @@ package body Rtsfind is\n                Semantics (Cunit (U.Unum));\n                Restore_Private_Visibility;\n \n-               if Fatal_Error (U.Unum) then\n+               if Fatal_Error (U.Unum) = Error_Detected then\n                   Load_Fail (\"had semantic errors\", U_Id, Id);\n                end if;\n             end if;"}, {"sha": "d7df7eb9bbba01cfcc0c816ca647b7918b61bf02", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=ef2c20e73c8989e83863bdb05af0bf629faf5ff2", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -936,7 +936,7 @@ package body Sem_Ch10 is\n         and then (Distribution_Stub_Mode = Generate_Receiver_Stub_Body\n                     or else\n                   Distribution_Stub_Mode = Generate_Caller_Stub_Body)\n-        and then not Fatal_Error (Main_Unit)\n+        and then Fatal_Error (Main_Unit) /= Error_Detected\n       then\n          if Is_RCI_Pkg_Spec_Or_Body (N) then\n \n@@ -1096,7 +1096,7 @@ package body Sem_Ch10 is\n \n                      elsif not Analyzed (Cunit (Un))\n                        and then Un /= Main_Unit\n-                       and then not Fatal_Error (Un)\n+                       and then Fatal_Error (Un) /= Error_Detected\n                      then\n                         Style_Check := False;\n                         Semantics (Cunit (Un));\n@@ -1623,7 +1623,8 @@ package body Sem_Ch10 is\n          --  All done if we successfully loaded the subunit\n \n          if Unum /= No_Unit\n-           and then (not Fatal_Error (Unum) or else Try_Semantics)\n+           and then (Fatal_Error (Unum) /= Error_Detected\n+                      or else Try_Semantics)\n          then\n             Comp_Unit := Cunit (Unum);\n \n@@ -1860,7 +1861,9 @@ package body Sem_Ch10 is\n \n                   --  Analyze the unit if semantics active\n \n-                  if not Fatal_Error (Unum) or else Try_Semantics then\n+                  if Fatal_Error (Unum) /= Error_Detected\n+                    or else Try_Semantics\n+                  then\n                      Analyze_Subunit (Comp_Unit);\n                   end if;\n                end if;\n@@ -5442,7 +5445,7 @@ package body Sem_Ch10 is\n       else\n          Compiler_State := Analyzing; -- reset after load\n \n-         if not Fatal_Error (Unum) or else Try_Semantics then\n+         if Fatal_Error (Unum) /= Error_Detected or else Try_Semantics then\n             if Debug_Flag_L then\n                Write_Str (\"*** Loaded generic body\");\n                Write_Eol;"}, {"sha": "7d0ca02d6fc89412e7d3c9c579cbeee01456340f", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=ef2c20e73c8989e83863bdb05af0bf629faf5ff2", "patch": "@@ -7770,7 +7770,7 @@ package body Sem_Ch13 is\n                --  at the end of the private part and has the wrong visibility.\n \n                Set_Parent (Exp, N);\n-               Preanalyze_Assert_Expression (Exp, Standard_Boolean);\n+               Preanalyze_Assert_Expression (Exp, Any_Boolean);\n \n                --  A class-wide invariant may be inherited in a separate unit,\n                --  where the corresponding expression cannot be resolved by"}, {"sha": "5aa5fe0475c521087e259918a19208d33817fda3", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=ef2c20e73c8989e83863bdb05af0bf629faf5ff2", "patch": "@@ -19420,15 +19420,27 @@ package body Sem_Ch3 is\n \n       begin\n          if Nkind (Parent (Priv_T)) = N_Private_Extension_Declaration\n-           and then not Limited_Present (Parent (Priv_T))\n-           and then not Synchronized_Present (Parent (Priv_T))\n            and then Nkind (Orig_Decl) = N_Full_Type_Declaration\n            and then Nkind\n              (Type_Definition (Orig_Decl)) = N_Derived_Type_Definition\n-           and then Limited_Present (Type_Definition (Orig_Decl))\n          then\n-            Error_Msg_N\n-              (\"full view of non-limited extension cannot be limited\", N);\n+            if not Limited_Present (Parent (Priv_T))\n+              and then not Synchronized_Present (Parent (Priv_T))\n+              and then Limited_Present (Type_Definition (Orig_Decl))\n+            then\n+               Error_Msg_N\n+                (\"full view of non-limited extension cannot be limited\", N);\n+\n+            --  Conversely, if the partial view carries the limited keyword,\n+            --  the full view must as well, even if it may be redundant.\n+\n+            elsif Limited_Present (Parent (Priv_T))\n+              and then not Limited_Present (Type_Definition (Orig_Decl))\n+            then\n+               Error_Msg_N\n+                (\"full view of limited extension must be explicitly limited\",\n+                 N);\n+            end if;\n          end if;\n       end;\n "}, {"sha": "0567c176b9a8626c423ca47716c50bc71d9f5216", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=ef2c20e73c8989e83863bdb05af0bf629faf5ff2", "patch": "@@ -11783,7 +11783,7 @@ package body Sem_Prag is\n                  Make_If_Statement (Eloc,\n                    Condition =>\n                      Make_And_Then (Eloc,\n-                       Left_Opnd  => New_Occurrence_Of (Standard_False, Eloc),\n+                       Left_Opnd  => Make_Identifier (Eloc, Name_False),\n                        Right_Opnd => Expr),\n                    Then_Statements => New_List (\n                      Make_Null_Statement (Eloc))));"}, {"sha": "b51a2806e147c8eebb6e89369034f54a6de2e46f", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2c20e73c8989e83863bdb05af0bf629faf5ff2/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=ef2c20e73c8989e83863bdb05af0bf629faf5ff2", "patch": "@@ -6310,11 +6310,14 @@ package body Sem_Res is\n \n       --  Check for calling a function with OUT or IN OUT parameter when the\n       --  calling context (us right now) is not Ada 2012, so does not allow\n-      --  OUT or IN OUT parameters in function calls.\n+      --  OUT or IN OUT parameters in function calls. Functions declared in\n+      --  a predefined unit are OK, as they may be called indirectly from a\n+      --  user-declared instantiation.\n \n       if Ada_Version < Ada_2012\n         and then Ekind (Nam) = E_Function\n         and then Has_Out_Or_In_Out_Parameter (Nam)\n+        and then not In_Predefined_Unit (Nam)\n       then\n          Error_Msg_NE (\"& has at least one OUT or `IN OUT` parameter\", N, Nam);\n          Error_Msg_N (\"\\call to this function only allowed in Ada 2012\", N);"}]}