{"sha": "7c3694857570a7ed472cbacbb027521715a26da6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MzNjk0ODU3NTcwYTdlZDQ3MmNiYWNiYjAyNzUyMTcxNWEyNmRhNg==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-09-08T19:03:53Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-09-08T19:03:53Z"}, "message": "[AArch64] vld{2,3,4}{,_lane,_dup}, vcombine, vcreate\n\ngcc/:\n\n\t* config/aarch64/aarch64.c (aarch64_split_simd_combine): Add V4HFmode.\n\t* config/aarch64/aarch64-builtins.c (VAR13, VAR14): New.\n\t(aarch64_scalar_builtin_types, aarch64_init_simd_builtin_scalar_types):\n\tAdd __builtin_aarch64_simd_hf.\n\t* config/aarch64/arm_neon.h (float16x4x2_t, float16x8x2_t,\n\tfloat16x4x3_t, float16x8x3_t, float16x4x4_t, float16x8x4_t,\n\tvcombine_f16, vst2_lane_f16, vst2q_lane_f16, vst3_lane_f16,\n\tvst3q_lane_f16, vst4_lane_f16, vst4q_lane_f16, vld2_f16, vld2q_f16,\n\tvld3_f16, vld3q_f16, vld4_f16, vld4q_f16, vld2_dup_f16, vld2q_dup_f16,\n\tvld3_dup_f16, vld3q_dup_f16, vld4_dup_f16, vld4q_dup_f16,\n\tvld2_lane_f16, vld2q_lane_f16, vld3_lane_f16, vld3q_lane_f16,\n\tvld4_lane_f16, vld4q_lane_f16, vst2_f16, vst2q_f16, vst3_f16,\n\tvst3q_f16, vst4_f16, vst4q_f16, vcreate_f16): New.\n\n\t* config/aarch64/iterators.md (VALLDIF, Vtype, Vetype, Vbtype,\n\tV_cmp_result, v_cmp_result): Add cases for V4HF and V8HF.\n\t(VDC, Vdbl): Add V4HF.\n\ngcc/testsuite/:\n\n\t* gcc.target/aarch64/vldN_1.c: Add float16x4_t and float16x8_t cases.\n\t* gcc.target/aarch64/vldN_dup_1.c: Likewise.\n\t* gcc.target/aarch64/vldN_lane_1.c: Likewise.\n\t(main): update orig_data to avoid float16 NaN on bigendian.\n\nFrom-SVN: r227543", "tree": {"sha": "9e5b275c8a6b11c641640fb4aef119d7305bafbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e5b275c8a6b11c641640fb4aef119d7305bafbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c3694857570a7ed472cbacbb027521715a26da6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c3694857570a7ed472cbacbb027521715a26da6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c3694857570a7ed472cbacbb027521715a26da6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c3694857570a7ed472cbacbb027521715a26da6/comments", "author": null, "committer": null, "parents": [{"sha": "71a11456ef9b85dc6cc098151d90b6651db7f0df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71a11456ef9b85dc6cc098151d90b6651db7f0df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71a11456ef9b85dc6cc098151d90b6651db7f0df"}], "stats": {"total": 351, "additions": 341, "deletions": 10}, "files": [{"sha": "0a4e8d0f4dbba79fb7e9ace2cf5f05995822aaf0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3694857570a7ed472cbacbb027521715a26da6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3694857570a7ed472cbacbb027521715a26da6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c3694857570a7ed472cbacbb027521715a26da6", "patch": "@@ -1,3 +1,23 @@\n+2015-09-08  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_split_simd_combine): Add V4HFmode.\n+\t* config/aarch64/aarch64-builtins.c (VAR13, VAR14): New.\n+\t(aarch64_scalar_builtin_types, aarch64_init_simd_builtin_scalar_types):\n+\tAdd __builtin_aarch64_simd_hf.\n+\t* config/aarch64/arm_neon.h (float16x4x2_t, float16x8x2_t,\n+\tfloat16x4x3_t, float16x8x3_t, float16x4x4_t, float16x8x4_t,\n+\tvcombine_f16, vst2_lane_f16, vst2q_lane_f16, vst3_lane_f16,\n+\tvst3q_lane_f16, vst4_lane_f16, vst4q_lane_f16, vld2_f16, vld2q_f16,\n+\tvld3_f16, vld3q_f16, vld4_f16, vld4q_f16, vld2_dup_f16, vld2q_dup_f16,\n+\tvld3_dup_f16, vld3q_dup_f16, vld4_dup_f16, vld4q_dup_f16,\n+\tvld2_lane_f16, vld2q_lane_f16, vld3_lane_f16, vld3q_lane_f16,\n+\tvld4_lane_f16, vld4q_lane_f16, vst2_f16, vst2q_f16, vst3_f16,\n+\tvst3q_f16, vst4_f16, vst4q_f16, vcreate_f16): New.\n+\n+\t* config/aarch64/iterators.md (VALLDIF, Vtype, Vetype, Vbtype,\n+\tV_cmp_result, v_cmp_result): Add cases for V4HF and V8HF.\n+\t(VDC, Vdbl): Add V4HF.\n+\n 2015-09-08  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_vector_mode_supported_p): Support"}, {"sha": "5a0426348eed4cef65e98d7c471329e8a14953a7", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3694857570a7ed472cbacbb027521715a26da6/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3694857570a7ed472cbacbb027521715a26da6/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=7c3694857570a7ed472cbacbb027521715a26da6", "patch": "@@ -297,6 +297,12 @@ aarch64_types_storestruct_lane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n #define VAR12(T, N, MAP, A, B, C, D, E, F, G, H, I, J, K, L) \\\n   VAR11 (T, N, MAP, A, B, C, D, E, F, G, H, I, J, K) \\\n   VAR1 (T, N, MAP, L)\n+#define VAR13(T, N, MAP, A, B, C, D, E, F, G, H, I, J, K, L, M) \\\n+  VAR12 (T, N, MAP, A, B, C, D, E, F, G, H, I, J, K, L) \\\n+  VAR1 (T, N, MAP, M)\n+#define VAR14(T, X, MAP, A, B, C, D, E, F, G, H, I, J, K, L, M, N) \\\n+  VAR13 (T, X, MAP, A, B, C, D, E, F, G, H, I, J, K, L, M) \\\n+  VAR1 (T, X, MAP, N)\n \n #include \"aarch64-builtin-iterators.h\"\n \n@@ -374,6 +380,7 @@ const char *aarch64_scalar_builtin_types[] = {\n   \"__builtin_aarch64_simd_qi\",\n   \"__builtin_aarch64_simd_hi\",\n   \"__builtin_aarch64_simd_si\",\n+  \"__builtin_aarch64_simd_hf\",\n   \"__builtin_aarch64_simd_sf\",\n   \"__builtin_aarch64_simd_di\",\n   \"__builtin_aarch64_simd_df\",\n@@ -661,6 +668,8 @@ aarch64_init_simd_builtin_scalar_types (void)\n \t\t\t\t\t     \"__builtin_aarch64_simd_qi\");\n   (*lang_hooks.types.register_builtin_type) (intHI_type_node,\n \t\t\t\t\t     \"__builtin_aarch64_simd_hi\");\n+  (*lang_hooks.types.register_builtin_type) (aarch64_fp16_type_node,\n+\t\t\t\t\t     \"__builtin_aarch64_simd_hf\");\n   (*lang_hooks.types.register_builtin_type) (intSI_type_node,\n \t\t\t\t\t     \"__builtin_aarch64_simd_si\");\n   (*lang_hooks.types.register_builtin_type) (float_type_node,"}, {"sha": "79671705d77144070a1d39687f9ceb574746d84f", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3694857570a7ed472cbacbb027521715a26da6/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3694857570a7ed472cbacbb027521715a26da6/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=7c3694857570a7ed472cbacbb027521715a26da6", "patch": "@@ -1335,6 +1335,9 @@ aarch64_split_simd_combine (rtx dst, rtx src1, rtx src2)\n \tcase V2SImode:\n \t  gen = gen_aarch64_simd_combinev2si;\n \t  break;\n+\tcase V4HFmode:\n+\t  gen = gen_aarch64_simd_combinev4hf;\n+\t  break;\n \tcase V2SFmode:\n \t  gen = gen_aarch64_simd_combinev2sf;\n \t  break;"}, {"sha": "2bb75bb0eba0428762fd78d349fec031f413af9b", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 281, "deletions": 3, "changes": 284, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3694857570a7ed472cbacbb027521715a26da6/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3694857570a7ed472cbacbb027521715a26da6/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=7c3694857570a7ed472cbacbb027521715a26da6", "patch": "@@ -152,6 +152,16 @@ typedef struct uint64x2x2_t\n   uint64x2_t val[2];\n } uint64x2x2_t;\n \n+typedef struct float16x4x2_t\n+{\n+  float16x4_t val[2];\n+} float16x4x2_t;\n+\n+typedef struct float16x8x2_t\n+{\n+  float16x8_t val[2];\n+} float16x8x2_t;\n+\n typedef struct float32x2x2_t\n {\n   float32x2_t val[2];\n@@ -272,6 +282,16 @@ typedef struct uint64x2x3_t\n   uint64x2_t val[3];\n } uint64x2x3_t;\n \n+typedef struct float16x4x3_t\n+{\n+  float16x4_t val[3];\n+} float16x4x3_t;\n+\n+typedef struct float16x8x3_t\n+{\n+  float16x8_t val[3];\n+} float16x8x3_t;\n+\n typedef struct float32x2x3_t\n {\n   float32x2_t val[3];\n@@ -392,6 +412,16 @@ typedef struct uint64x2x4_t\n   uint64x2_t val[4];\n } uint64x2x4_t;\n \n+typedef struct float16x4x4_t\n+{\n+  float16x4_t val[4];\n+} float16x4x4_t;\n+\n+typedef struct float16x8x4_t\n+{\n+  float16x8_t val[4];\n+} float16x8x4_t;\n+\n typedef struct float32x2x4_t\n {\n   float32x2_t val[4];\n@@ -2643,6 +2673,12 @@ vcreate_s64 (uint64_t __a)\n   return (int64x1_t) {__a};\n }\n \n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vcreate_f16 (uint64_t __a)\n+{\n+  return (float16x4_t) __a;\n+}\n+\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vcreate_f32 (uint64_t __a)\n {\n@@ -4779,6 +4815,12 @@ vcombine_s64 (int64x1_t __a, int64x1_t __b)\n   return __builtin_aarch64_combinedi (__a[0], __b[0]);\n }\n \n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vcombine_f16 (float16x4_t __a, float16x4_t __b)\n+{\n+  return __builtin_aarch64_combinev4hf (__a, __b);\n+}\n+\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vcombine_f32 (float32x2_t __a, float32x2_t __b)\n {\n@@ -9907,7 +9949,7 @@ vtstq_p16 (poly16x8_t a, poly16x8_t b)\n    +------+----+----+----+----+\n    |uint  | Y  | Y  | N  | N  |\n    +------+----+----+----+----+\n-   |float | -  | -  | N  | N  |\n+   |float | -  | Y  | N  | N  |\n    +------+----+----+----+----+\n    |poly  | Y  | Y  | -  | -  |\n    +------+----+----+----+----+\n@@ -9921,7 +9963,7 @@ vtstq_p16 (poly16x8_t a, poly16x8_t b)\n    +------+----+----+----+----+\n    |uint  | Y  | Y  | Y  | Y  |\n    +------+----+----+----+----+\n-   |float | -  | -  | Y  | Y  |\n+   |float | -  | Y  | Y  | Y  |\n    +------+----+----+----+----+\n    |poly  | Y  | Y  | -  | -  |\n    +------+----+----+----+----+\n@@ -9935,7 +9977,7 @@ vtstq_p16 (poly16x8_t a, poly16x8_t b)\n    +------+----+----+----+----+\n    |uint  | Y  | N  | N  | Y  |\n    +------+----+----+----+----+\n-   |float | -  | -  | N  | Y  |\n+   |float | -  | N  | N  | Y  |\n    +------+----+----+----+----+\n    |poly  | Y  | N  | -  | -  |\n    +------+----+----+----+----+\n@@ -9951,6 +9993,7 @@ __STRUCTN (int, 8, 2)\n __STRUCTN (int, 16, 2)\n __STRUCTN (uint, 8, 2)\n __STRUCTN (uint, 16, 2)\n+__STRUCTN (float, 16, 2)\n __STRUCTN (poly, 8, 2)\n __STRUCTN (poly, 16, 2)\n /* 3-element structs.  */\n@@ -9962,6 +10005,7 @@ __STRUCTN (uint, 8, 3)\n __STRUCTN (uint, 16, 3)\n __STRUCTN (uint, 32, 3)\n __STRUCTN (uint, 64, 3)\n+__STRUCTN (float, 16, 3)\n __STRUCTN (float, 32, 3)\n __STRUCTN (float, 64, 3)\n __STRUCTN (poly, 8, 3)\n@@ -9999,6 +10043,8 @@ vst2_lane_ ## funcsuffix (ptrtype *__ptr,\t\t\t\t     \\\n \t\t\t\t     __ptr, __o, __c);\t\t\t     \\\n }\n \n+__ST2_LANE_FUNC (float16x4x2_t, float16x8x2_t, float16_t, v4hf, v8hf, hf, f16,\n+\t\t float16x8_t)\n __ST2_LANE_FUNC (float32x2x2_t, float32x4x2_t, float32_t, v2sf, v4sf, sf, f32,\n \t\t float32x4_t)\n __ST2_LANE_FUNC (float64x1x2_t, float64x2x2_t, float64_t, df, v2df, df, f64,\n@@ -10037,6 +10083,7 @@ vst2q_lane_ ## funcsuffix (ptrtype *__ptr,\t\t\t\t    \\\n \t\t\t\t    __ptr, __temp.__o, __c);\t\t    \\\n }\n \n+__ST2_LANE_FUNC (float16x8x2_t, float16_t, v8hf, hf, f16)\n __ST2_LANE_FUNC (float32x4x2_t, float32_t, v4sf, sf, f32)\n __ST2_LANE_FUNC (float64x2x2_t, float64_t, v2df, df, f64)\n __ST2_LANE_FUNC (poly8x16x2_t, poly8_t, v16qi, qi, p8)\n@@ -10078,6 +10125,8 @@ vst3_lane_ ## funcsuffix (ptrtype *__ptr,\t\t\t\t     \\\n \t\t\t\t     __ptr, __o, __c);\t\t\t     \\\n }\n \n+__ST3_LANE_FUNC (float16x4x3_t, float16x8x3_t, float16_t, v4hf, v8hf, hf, f16,\n+\t\t float16x8_t)\n __ST3_LANE_FUNC (float32x2x3_t, float32x4x3_t, float32_t, v2sf, v4sf, sf, f32,\n \t\t float32x4_t)\n __ST3_LANE_FUNC (float64x1x3_t, float64x2x3_t, float64_t, df, v2df, df, f64,\n@@ -10116,6 +10165,7 @@ vst3q_lane_ ## funcsuffix (ptrtype *__ptr,\t\t\t\t    \\\n \t\t\t\t    __ptr, __temp.__o, __c);\t\t    \\\n }\n \n+__ST3_LANE_FUNC (float16x8x3_t, float16_t, v8hf, hf, f16)\n __ST3_LANE_FUNC (float32x4x3_t, float32_t, v4sf, sf, f32)\n __ST3_LANE_FUNC (float64x2x3_t, float64_t, v2df, df, f64)\n __ST3_LANE_FUNC (poly8x16x3_t, poly8_t, v16qi, qi, p8)\n@@ -10162,6 +10212,8 @@ vst4_lane_ ## funcsuffix (ptrtype *__ptr,\t\t\t\t     \\\n \t\t\t\t     __ptr, __o, __c);\t\t\t     \\\n }\n \n+__ST4_LANE_FUNC (float16x4x4_t, float16x8x4_t, float16_t, v4hf, v8hf, hf, f16,\n+\t\t float16x8_t)\n __ST4_LANE_FUNC (float32x2x4_t, float32x4x4_t, float32_t, v2sf, v4sf, sf, f32,\n \t\t float32x4_t)\n __ST4_LANE_FUNC (float64x1x4_t, float64x2x4_t, float64_t, df, v2df, df, f64,\n@@ -10200,6 +10252,7 @@ vst4q_lane_ ## funcsuffix (ptrtype *__ptr,\t\t\t\t    \\\n \t\t\t\t    __ptr, __temp.__o, __c);\t\t    \\\n }\n \n+__ST4_LANE_FUNC (float16x8x4_t, float16_t, v8hf, hf, f16)\n __ST4_LANE_FUNC (float32x4x4_t, float32_t, v4sf, sf, f32)\n __ST4_LANE_FUNC (float64x2x4_t, float64_t, v2df, df, f64)\n __ST4_LANE_FUNC (poly8x16x4_t, poly8_t, v16qi, qi, p8)\n@@ -15255,6 +15308,17 @@ vld2_u32 (const uint32_t * __a)\n   return ret;\n }\n \n+__extension__ static __inline float16x4x2_t __attribute__ ((__always_inline__))\n+vld2_f16 (const float16_t * __a)\n+{\n+  float16x4x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld2v4hf (__a);\n+  ret.val[0] = __builtin_aarch64_get_dregoiv4hf (__o, 0);\n+  ret.val[1] = __builtin_aarch64_get_dregoiv4hf (__o, 1);\n+  return ret;\n+}\n+\n __extension__ static __inline float32x2x2_t __attribute__ ((__always_inline__))\n vld2_f32 (const float32_t * __a)\n {\n@@ -15376,6 +15440,17 @@ vld2q_u64 (const uint64_t * __a)\n   return ret;\n }\n \n+__extension__ static __inline float16x8x2_t __attribute__ ((__always_inline__))\n+vld2q_f16 (const float16_t * __a)\n+{\n+  float16x8x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld2v8hf (__a);\n+  ret.val[0] = __builtin_aarch64_get_qregoiv8hf (__o, 0);\n+  ret.val[1] = __builtin_aarch64_get_qregoiv8hf (__o, 1);\n+  return ret;\n+}\n+\n __extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))\n vld2q_f32 (const float32_t * __a)\n {\n@@ -15530,6 +15605,18 @@ vld3_u32 (const uint32_t * __a)\n   return ret;\n }\n \n+__extension__ static __inline float16x4x3_t __attribute__ ((__always_inline__))\n+vld3_f16 (const float16_t * __a)\n+{\n+  float16x4x3_t ret;\n+  __builtin_aarch64_simd_ci __o;\n+  __o = __builtin_aarch64_ld3v4hf (__a);\n+  ret.val[0] = __builtin_aarch64_get_dregciv4hf (__o, 0);\n+  ret.val[1] = __builtin_aarch64_get_dregciv4hf (__o, 1);\n+  ret.val[2] = __builtin_aarch64_get_dregciv4hf (__o, 2);\n+  return ret;\n+}\n+\n __extension__ static __inline float32x2x3_t __attribute__ ((__always_inline__))\n vld3_f32 (const float32_t * __a)\n {\n@@ -15662,6 +15749,18 @@ vld3q_u64 (const uint64_t * __a)\n   return ret;\n }\n \n+__extension__ static __inline float16x8x3_t __attribute__ ((__always_inline__))\n+vld3q_f16 (const float16_t * __a)\n+{\n+  float16x8x3_t ret;\n+  __builtin_aarch64_simd_ci __o;\n+  __o = __builtin_aarch64_ld3v8hf (__a);\n+  ret.val[0] = __builtin_aarch64_get_qregciv8hf (__o, 0);\n+  ret.val[1] = __builtin_aarch64_get_qregciv8hf (__o, 1);\n+  ret.val[2] = __builtin_aarch64_get_qregciv8hf (__o, 2);\n+  return ret;\n+}\n+\n __extension__ static __inline float32x4x3_t __attribute__ ((__always_inline__))\n vld3q_f32 (const float32_t * __a)\n {\n@@ -15829,6 +15928,19 @@ vld4_u32 (const uint32_t * __a)\n   return ret;\n }\n \n+__extension__ static __inline float16x4x4_t __attribute__ ((__always_inline__))\n+vld4_f16 (const float16_t * __a)\n+{\n+  float16x4x4_t ret;\n+  __builtin_aarch64_simd_xi __o;\n+  __o = __builtin_aarch64_ld4v4hf (__a);\n+  ret.val[0] = __builtin_aarch64_get_dregxiv4hf (__o, 0);\n+  ret.val[1] = __builtin_aarch64_get_dregxiv4hf (__o, 1);\n+  ret.val[2] = __builtin_aarch64_get_dregxiv4hf (__o, 2);\n+  ret.val[3] = __builtin_aarch64_get_dregxiv4hf (__o, 3);\n+  return ret;\n+}\n+\n __extension__ static __inline float32x2x4_t __attribute__ ((__always_inline__))\n vld4_f32 (const float32_t * __a)\n {\n@@ -15972,6 +16084,19 @@ vld4q_u64 (const uint64_t * __a)\n   return ret;\n }\n \n+__extension__ static __inline float16x8x4_t __attribute__ ((__always_inline__))\n+vld4q_f16 (const float16_t * __a)\n+{\n+  float16x8x4_t ret;\n+  __builtin_aarch64_simd_xi __o;\n+  __o = __builtin_aarch64_ld4v8hf (__a);\n+  ret.val[0] = __builtin_aarch64_get_qregxiv8hf (__o, 0);\n+  ret.val[1] = __builtin_aarch64_get_qregxiv8hf (__o, 1);\n+  ret.val[2] = __builtin_aarch64_get_qregxiv8hf (__o, 2);\n+  ret.val[3] = __builtin_aarch64_get_qregxiv8hf (__o, 3);\n+  return ret;\n+}\n+\n __extension__ static __inline float32x4x4_t __attribute__ ((__always_inline__))\n vld4q_f32 (const float32_t * __a)\n {\n@@ -16033,6 +16158,17 @@ vld2_dup_s32 (const int32_t * __a)\n   return ret;\n }\n \n+__extension__ static __inline float16x4x2_t __attribute__ ((__always_inline__))\n+vld2_dup_f16 (const float16_t * __a)\n+{\n+  float16x4x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld2rv4hf ((const __builtin_aarch64_simd_hf *) __a);\n+  ret.val[0] = __builtin_aarch64_get_dregoiv4hf (__o, 0);\n+  ret.val[1] = (float16x4_t) __builtin_aarch64_get_dregoiv4hf (__o, 1);\n+  return ret;\n+}\n+\n __extension__ static __inline float32x2x2_t __attribute__ ((__always_inline__))\n vld2_dup_f32 (const float32_t * __a)\n {\n@@ -16242,6 +16378,17 @@ vld2q_dup_u64 (const uint64_t * __a)\n   return ret;\n }\n \n+__extension__ static __inline float16x8x2_t __attribute__ ((__always_inline__))\n+vld2q_dup_f16 (const float16_t * __a)\n+{\n+  float16x8x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld2rv8hf ((const __builtin_aarch64_simd_hf *) __a);\n+  ret.val[0] = (float16x8_t) __builtin_aarch64_get_qregoiv8hf (__o, 0);\n+  ret.val[1] = __builtin_aarch64_get_qregoiv8hf (__o, 1);\n+  return ret;\n+}\n+\n __extension__ static __inline float32x4x2_t __attribute__ ((__always_inline__))\n vld2q_dup_f32 (const float32_t * __a)\n {\n@@ -16396,6 +16543,18 @@ vld3_dup_u32 (const uint32_t * __a)\n   return ret;\n }\n \n+__extension__ static __inline float16x4x3_t __attribute__ ((__always_inline__))\n+vld3_dup_f16 (const float16_t * __a)\n+{\n+  float16x4x3_t ret;\n+  __builtin_aarch64_simd_ci __o;\n+  __o = __builtin_aarch64_ld3rv4hf ((const __builtin_aarch64_simd_hf *) __a);\n+  ret.val[0] = (float16x4_t) __builtin_aarch64_get_dregciv4hf (__o, 0);\n+  ret.val[1] = (float16x4_t) __builtin_aarch64_get_dregciv4hf (__o, 1);\n+  ret.val[2] = (float16x4_t) __builtin_aarch64_get_dregciv4hf (__o, 2);\n+  return ret;\n+}\n+\n __extension__ static __inline float32x2x3_t __attribute__ ((__always_inline__))\n vld3_dup_f32 (const float32_t * __a)\n {\n@@ -16528,6 +16687,18 @@ vld3q_dup_u64 (const uint64_t * __a)\n   return ret;\n }\n \n+__extension__ static __inline float16x8x3_t __attribute__ ((__always_inline__))\n+vld3q_dup_f16 (const float16_t * __a)\n+{\n+  float16x8x3_t ret;\n+  __builtin_aarch64_simd_ci __o;\n+  __o = __builtin_aarch64_ld3rv8hf ((const __builtin_aarch64_simd_hf *) __a);\n+  ret.val[0] = (float16x8_t) __builtin_aarch64_get_qregciv8hf (__o, 0);\n+  ret.val[1] = (float16x8_t) __builtin_aarch64_get_qregciv8hf (__o, 1);\n+  ret.val[2] = (float16x8_t) __builtin_aarch64_get_qregciv8hf (__o, 2);\n+  return ret;\n+}\n+\n __extension__ static __inline float32x4x3_t __attribute__ ((__always_inline__))\n vld3q_dup_f32 (const float32_t * __a)\n {\n@@ -16695,6 +16866,19 @@ vld4_dup_u32 (const uint32_t * __a)\n   return ret;\n }\n \n+__extension__ static __inline float16x4x4_t __attribute__ ((__always_inline__))\n+vld4_dup_f16 (const float16_t * __a)\n+{\n+  float16x4x4_t ret;\n+  __builtin_aarch64_simd_xi __o;\n+  __o = __builtin_aarch64_ld4rv4hf ((const __builtin_aarch64_simd_hf *) __a);\n+  ret.val[0] = (float16x4_t) __builtin_aarch64_get_dregxiv4hf (__o, 0);\n+  ret.val[1] = (float16x4_t) __builtin_aarch64_get_dregxiv4hf (__o, 1);\n+  ret.val[2] = (float16x4_t) __builtin_aarch64_get_dregxiv4hf (__o, 2);\n+  ret.val[3] = (float16x4_t) __builtin_aarch64_get_dregxiv4hf (__o, 3);\n+  return ret;\n+}\n+\n __extension__ static __inline float32x2x4_t __attribute__ ((__always_inline__))\n vld4_dup_f32 (const float32_t * __a)\n {\n@@ -16838,6 +17022,19 @@ vld4q_dup_u64 (const uint64_t * __a)\n   return ret;\n }\n \n+__extension__ static __inline float16x8x4_t __attribute__ ((__always_inline__))\n+vld4q_dup_f16 (const float16_t * __a)\n+{\n+  float16x8x4_t ret;\n+  __builtin_aarch64_simd_xi __o;\n+  __o = __builtin_aarch64_ld4rv8hf ((const __builtin_aarch64_simd_hf *) __a);\n+  ret.val[0] = (float16x8_t) __builtin_aarch64_get_qregxiv8hf (__o, 0);\n+  ret.val[1] = (float16x8_t) __builtin_aarch64_get_qregxiv8hf (__o, 1);\n+  ret.val[2] = (float16x8_t) __builtin_aarch64_get_qregxiv8hf (__o, 2);\n+  ret.val[3] = (float16x8_t) __builtin_aarch64_get_qregxiv8hf (__o, 3);\n+  return ret;\n+}\n+\n __extension__ static __inline float32x4x4_t __attribute__ ((__always_inline__))\n vld4q_dup_f32 (const float32_t * __a)\n {\n@@ -16890,6 +17087,8 @@ vld2_lane_##funcsuffix (const ptrtype * __ptr, intype __b, const int __c)  \\\n   return __b;\t\t\t\t\t\t\t\t   \\\n }\n \n+__LD2_LANE_FUNC (float16x4x2_t, float16x4_t, float16x8x2_t, float16_t, v4hf,\n+\t\t v8hf, hf, f16, float16x8_t)\n __LD2_LANE_FUNC (float32x2x2_t, float32x2_t, float32x4x2_t, float32_t, v2sf, v4sf,\n \t\t sf, f32, float32x4_t)\n __LD2_LANE_FUNC (float64x1x2_t, float64x1_t, float64x2x2_t, float64_t, df, v2df,\n@@ -16934,6 +17133,7 @@ vld2q_lane_##funcsuffix (const ptrtype * __ptr, intype __b, const int __c) \\\n   return ret;\t\t\t\t\t\t\t\t   \\\n }\n \n+__LD2_LANE_FUNC (float16x8x2_t, float16x8_t, float16_t, v8hf, hf, f16)\n __LD2_LANE_FUNC (float32x4x2_t, float32x4_t, float32_t, v4sf, sf, f32)\n __LD2_LANE_FUNC (float64x2x2_t, float64x2_t, float64_t, v2df, df, f64)\n __LD2_LANE_FUNC (poly8x16x2_t, poly8x16_t, poly8_t, v16qi, qi, p8)\n@@ -16981,6 +17181,8 @@ vld3_lane_##funcsuffix (const ptrtype * __ptr, intype __b, const int __c)  \\\n   return __b;\t\t\t\t\t\t\t\t   \\\n }\n \n+__LD3_LANE_FUNC (float16x4x3_t, float16x4_t, float16x8x3_t, float16_t, v4hf,\n+\t\t v8hf, hf, f16, float16x8_t)\n __LD3_LANE_FUNC (float32x2x3_t, float32x2_t, float32x4x3_t, float32_t, v2sf, v4sf,\n \t\t sf, f32, float32x4_t)\n __LD3_LANE_FUNC (float64x1x3_t, float64x1_t, float64x2x3_t, float64_t, df, v2df,\n@@ -17027,6 +17229,7 @@ vld3q_lane_##funcsuffix (const ptrtype * __ptr, intype __b, const int __c) \\\n   return ret;\t\t\t\t\t\t\t\t   \\\n }\n \n+__LD3_LANE_FUNC (float16x8x3_t, float16x8_t, float16_t, v8hf, hf, f16)\n __LD3_LANE_FUNC (float32x4x3_t, float32x4_t, float32_t, v4sf, sf, f32)\n __LD3_LANE_FUNC (float64x2x3_t, float64x2_t, float64_t, v2df, df, f64)\n __LD3_LANE_FUNC (poly8x16x3_t, poly8x16_t, poly8_t, v16qi, qi, p8)\n@@ -17082,6 +17285,8 @@ vld4_lane_##funcsuffix (const ptrtype * __ptr, intype __b, const int __c)  \\\n \n /* vld4q_lane */\n \n+__LD4_LANE_FUNC (float16x4x4_t, float16x4_t, float16x8x4_t, float16_t, v4hf,\n+\t\t v8hf, hf, f16, float16x8_t)\n __LD4_LANE_FUNC (float32x2x4_t, float32x2_t, float32x4x4_t, float32_t, v2sf, v4sf,\n \t\t sf, f32, float32x4_t)\n __LD4_LANE_FUNC (float64x1x4_t, float64x1_t, float64x2x4_t, float64_t, df, v2df,\n@@ -17130,6 +17335,7 @@ vld4q_lane_##funcsuffix (const ptrtype * __ptr, intype __b, const int __c) \\\n   return ret;\t\t\t\t\t\t\t\t   \\\n }\n \n+__LD4_LANE_FUNC (float16x8x4_t, float16x8_t, float16_t, v8hf, hf, f16)\n __LD4_LANE_FUNC (float32x4x4_t, float32x4_t, float32_t, v4sf, sf, f32)\n __LD4_LANE_FUNC (float64x2x4_t, float64x2_t, float64_t, v2df, df, f64)\n __LD4_LANE_FUNC (poly8x16x4_t, poly8x16_t, poly8_t, v16qi, qi, p8)\n@@ -22490,6 +22696,18 @@ vst2_u32 (uint32_t * __a, uint32x2x2_t val)\n   __builtin_aarch64_st2v2si ((__builtin_aarch64_simd_si *) __a, __o);\n }\n \n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+vst2_f16 (float16_t * __a, float16x4x2_t val)\n+{\n+  __builtin_aarch64_simd_oi __o;\n+  float16x8x2_t temp;\n+  temp.val[0] = vcombine_f16 (val.val[0], vcreate_f16 (__AARCH64_UINT64_C (0)));\n+  temp.val[1] = vcombine_f16 (val.val[1], vcreate_f16 (__AARCH64_UINT64_C (0)));\n+  __o = __builtin_aarch64_set_qregoiv8hf (__o, temp.val[0], 0);\n+  __o = __builtin_aarch64_set_qregoiv8hf (__o, temp.val[1], 1);\n+  __builtin_aarch64_st2v4hf (__a, __o);\n+}\n+\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst2_f32 (float32_t * __a, float32x2x2_t val)\n {\n@@ -22592,6 +22810,15 @@ vst2q_u64 (uint64_t * __a, uint64x2x2_t val)\n   __builtin_aarch64_st2v2di ((__builtin_aarch64_simd_di *) __a, __o);\n }\n \n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+vst2q_f16 (float16_t * __a, float16x8x2_t val)\n+{\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_set_qregoiv8hf (__o, val.val[0], 0);\n+  __o = __builtin_aarch64_set_qregoiv8hf (__o, val.val[1], 1);\n+  __builtin_aarch64_st2v8hf (__a, __o);\n+}\n+\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst2q_f32 (float32_t * __a, float32x4x2_t val)\n {\n@@ -22764,6 +22991,20 @@ vst3_u32 (uint32_t * __a, uint32x2x3_t val)\n   __builtin_aarch64_st3v2si ((__builtin_aarch64_simd_si *) __a, __o);\n }\n \n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+vst3_f16 (float16_t * __a, float16x4x3_t val)\n+{\n+  __builtin_aarch64_simd_ci __o;\n+  float16x8x3_t temp;\n+  temp.val[0] = vcombine_f16 (val.val[0], vcreate_f16 (__AARCH64_UINT64_C (0)));\n+  temp.val[1] = vcombine_f16 (val.val[1], vcreate_f16 (__AARCH64_UINT64_C (0)));\n+  temp.val[2] = vcombine_f16 (val.val[2], vcreate_f16 (__AARCH64_UINT64_C (0)));\n+  __o = __builtin_aarch64_set_qregciv8hf (__o, (float16x8_t) temp.val[0], 0);\n+  __o = __builtin_aarch64_set_qregciv8hf (__o, (float16x8_t) temp.val[1], 1);\n+  __o = __builtin_aarch64_set_qregciv8hf (__o, (float16x8_t) temp.val[2], 2);\n+  __builtin_aarch64_st3v4hf ((__builtin_aarch64_simd_hf *) __a, __o);\n+}\n+\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst3_f32 (float32_t * __a, float32x2x3_t val)\n {\n@@ -22878,6 +23119,16 @@ vst3q_u64 (uint64_t * __a, uint64x2x3_t val)\n   __builtin_aarch64_st3v2di ((__builtin_aarch64_simd_di *) __a, __o);\n }\n \n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+vst3q_f16 (float16_t * __a, float16x8x3_t val)\n+{\n+  __builtin_aarch64_simd_ci __o;\n+  __o = __builtin_aarch64_set_qregciv8hf (__o, (float16x8_t) val.val[0], 0);\n+  __o = __builtin_aarch64_set_qregciv8hf (__o, (float16x8_t) val.val[1], 1);\n+  __o = __builtin_aarch64_set_qregciv8hf (__o, (float16x8_t) val.val[2], 2);\n+  __builtin_aarch64_st3v8hf ((__builtin_aarch64_simd_hf *) __a, __o);\n+}\n+\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst3q_f32 (float32_t * __a, float32x4x3_t val)\n {\n@@ -23074,6 +23325,22 @@ vst4_u32 (uint32_t * __a, uint32x2x4_t val)\n   __builtin_aarch64_st4v2si ((__builtin_aarch64_simd_si *) __a, __o);\n }\n \n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+vst4_f16 (float16_t * __a, float16x4x4_t val)\n+{\n+  __builtin_aarch64_simd_xi __o;\n+  float16x8x4_t temp;\n+  temp.val[0] = vcombine_f16 (val.val[0], vcreate_f16 (__AARCH64_UINT64_C (0)));\n+  temp.val[1] = vcombine_f16 (val.val[1], vcreate_f16 (__AARCH64_UINT64_C (0)));\n+  temp.val[2] = vcombine_f16 (val.val[2], vcreate_f16 (__AARCH64_UINT64_C (0)));\n+  temp.val[3] = vcombine_f16 (val.val[3], vcreate_f16 (__AARCH64_UINT64_C (0)));\n+  __o = __builtin_aarch64_set_qregxiv8hf (__o, (float16x8_t) temp.val[0], 0);\n+  __o = __builtin_aarch64_set_qregxiv8hf (__o, (float16x8_t) temp.val[1], 1);\n+  __o = __builtin_aarch64_set_qregxiv8hf (__o, (float16x8_t) temp.val[2], 2);\n+  __o = __builtin_aarch64_set_qregxiv8hf (__o, (float16x8_t) temp.val[3], 3);\n+  __builtin_aarch64_st4v4hf ((__builtin_aarch64_simd_hf *) __a, __o);\n+}\n+\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst4_f32 (float32_t * __a, float32x2x4_t val)\n {\n@@ -23200,6 +23467,17 @@ vst4q_u64 (uint64_t * __a, uint64x2x4_t val)\n   __builtin_aarch64_st4v2di ((__builtin_aarch64_simd_di *) __a, __o);\n }\n \n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+vst4q_f16 (float16_t * __a, float16x8x4_t val)\n+{\n+  __builtin_aarch64_simd_xi __o;\n+  __o = __builtin_aarch64_set_qregxiv8hf (__o, (float16x8_t) val.val[0], 0);\n+  __o = __builtin_aarch64_set_qregxiv8hf (__o, (float16x8_t) val.val[1], 1);\n+  __o = __builtin_aarch64_set_qregxiv8hf (__o, (float16x8_t) val.val[2], 2);\n+  __o = __builtin_aarch64_set_qregxiv8hf (__o, (float16x8_t) val.val[3], 3);\n+  __builtin_aarch64_st4v8hf ((__builtin_aarch64_simd_hf *) __a, __o);\n+}\n+\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst4q_f32 (float32_t * __a, float32x4x4_t val)\n {"}, {"sha": "58cc0008549f919b02d7a302dbc84f6e59995979", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3694857570a7ed472cbacbb027521715a26da6/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3694857570a7ed472cbacbb027521715a26da6/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=7c3694857570a7ed472cbacbb027521715a26da6", "patch": "@@ -111,9 +111,9 @@\n (define_mode_iterator VALLDI_F16 [V8QI V16QI V4HI V8HI V2SI V4SI V2DI\n \t\t\t\t  V4HF V8HF V2SF V4SF V2DF DI])\n \n-;; All vector modes barring HF modes, plus DI and DF.\n+;; All vector modes, plus DI and DF.\n (define_mode_iterator VALLDIF [V8QI V16QI V4HI V8HI V2SI V4SI\n-\t\t\t       V2DI V2SF V4SF V2DF DI DF])\n+\t\t\t       V2DI V4HF V8HF V2SF V4SF V2DF DI DF])\n \n ;; Vector modes for Integer reduction across lanes.\n (define_mode_iterator VDQV [V8QI V16QI V4HI V8HI V4SI V2DI])\n@@ -134,7 +134,7 @@\n (define_mode_iterator VQW [V16QI V8HI V4SI])\n \n ;; Double vector modes for combines.\n-(define_mode_iterator VDC [V8QI V4HI V2SI V2SF DI DF])\n+(define_mode_iterator VDC [V8QI V4HI V4HF V2SI V2SF DI DF])\n \n ;; Vector modes except double int.\n (define_mode_iterator VDQIF [V8QI V16QI V4HI V8HI V2SI V4SI V2SF V4SF V2DF])\n@@ -361,7 +361,8 @@\n                          (V2SI \"2s\") (V4SI  \"4s\")\n                          (DI   \"1d\") (DF    \"1d\")\n                          (V2DI \"2d\") (V2SF \"2s\")\n-\t\t\t (V4SF \"4s\") (V2DF \"2d\")])\n+\t\t\t (V4SF \"4s\") (V2DF \"2d\")\n+\t\t\t (V4HF \"4h\") (V8HF \"8h\")])\n \n (define_mode_attr Vrevsuff [(V4HI \"16\") (V8HI \"16\") (V2SI \"32\")\n                             (V4SI \"32\") (V2DI \"64\")])\n@@ -387,7 +388,8 @@\n (define_mode_attr Vetype [(V8QI \"b\") (V16QI \"b\")\n \t\t\t  (V4HI \"h\") (V8HI  \"h\")\n                           (V2SI \"s\") (V4SI  \"s\")\n-\t\t\t  (V2DI \"d\") (V2SF  \"s\")\n+\t\t\t  (V2DI \"d\") (V4HF \"h\")\n+\t\t\t  (V8HF \"h\") (V2SF  \"s\")\n \t\t\t  (V4SF \"s\") (V2DF  \"d\")\n \t\t\t  (SF   \"s\") (DF  \"d\")\n \t\t\t  (QI \"b\")   (HI \"h\")\n@@ -397,7 +399,8 @@\n (define_mode_attr Vbtype [(V8QI \"8b\")  (V16QI \"16b\")\n \t\t\t  (V4HI \"8b\") (V8HI  \"16b\")\n \t\t\t  (V2SI \"8b\") (V4SI  \"16b\")\n-\t\t\t  (V2DI \"16b\") (V2SF  \"8b\")\n+\t\t\t  (V2DI \"16b\") (V4HF \"8b\")\n+\t\t\t  (V8HF \"16b\") (V2SF  \"8b\")\n \t\t\t  (V4SF \"16b\") (V2DF  \"16b\")\n \t\t\t  (DI   \"8b\")  (DF    \"8b\")\n \t\t\t  (SI   \"8b\")])\n@@ -448,6 +451,7 @@\n \n ;; Double modes of vector modes (lower case).\n (define_mode_attr Vdbl [(V8QI \"v16qi\") (V4HI \"v8hi\")\n+\t\t\t(V4HF \"v8hf\")\n \t\t\t(V2SI \"v4si\")  (V2SF \"v4sf\")\n \t\t\t(SI   \"v2si\")  (DI   \"v2di\")\n \t\t\t(DF   \"v2df\")])\n@@ -522,6 +526,7 @@\n \t\t\t\t(V4HI \"V4HI\") (V8HI  \"V8HI\")\n \t\t\t\t(V2SI \"V2SI\") (V4SI  \"V4SI\")\n \t\t\t\t(DI   \"DI\")   (V2DI  \"V2DI\")\n+\t\t\t\t(V4HF \"V4HI\") (V8HF  \"V8HI\")\n \t\t\t\t(V2SF \"V2SI\") (V4SF  \"V4SI\")\n \t\t\t\t(V2DF \"V2DI\") (DF    \"DI\")\n \t\t\t\t(SF   \"SI\")])\n@@ -531,6 +536,7 @@\n \t\t\t\t(V4HI \"v4hi\") (V8HI  \"v8hi\")\n \t\t\t\t(V2SI \"v2si\") (V4SI  \"v4si\")\n \t\t\t\t(DI   \"di\")   (V2DI  \"v2di\")\n+\t\t\t\t(V4HF \"v4hi\") (V8HF  \"v8hi\")\n \t\t\t\t(V2SF \"v2si\") (V4SF  \"v4si\")\n \t\t\t\t(V2DF \"v2di\") (DF    \"di\")\n \t\t\t\t(SF   \"si\")])"}, {"sha": "e2ca58f98f9f64fadec3972dc97212a1b743b47e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3694857570a7ed472cbacbb027521715a26da6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3694857570a7ed472cbacbb027521715a26da6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7c3694857570a7ed472cbacbb027521715a26da6", "patch": "@@ -1,3 +1,10 @@\n+2015-09-08  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* gcc.target/aarch64/vldN_1.c: Add float16x4_t and float16x8_t cases.\n+\t* gcc.target/aarch64/vldN_dup_1.c: Likewise.\n+\t* gcc.target/aarch64/vldN_lane_1.c: Likewise.\n+\t(main): update orig_data to avoid float16 NaN on bigendian.\n+\n 2015-09-08  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* g++.dg/abi/mangle-neon-aarch64.C: Add cases for float16x4_t and"}, {"sha": "caac94f86cef77eccd0cdfd6ace846058bf2e25b", "filename": "gcc/testsuite/gcc.target/aarch64/vldN_1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3694857570a7ed472cbacbb027521715a26da6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2FvldN_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3694857570a7ed472cbacbb027521715a26da6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2FvldN_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2FvldN_1.c?ref=7c3694857570a7ed472cbacbb027521715a26da6", "patch": "@@ -39,6 +39,7 @@ VARIANT (int32, 2, STRUCT, _s32)\t\\\n VARIANT (int64, 1, STRUCT, _s64)\t\\\n VARIANT (poly8, 8, STRUCT, _p8)\t\t\\\n VARIANT (poly16, 4, STRUCT, _p16)\t\\\n+VARIANT (float16, 4, STRUCT, _f16)\t\\\n VARIANT (float32, 2, STRUCT, _f32)\t\\\n VARIANT (float64, 1, STRUCT, _f64)\t\\\n VARIANT (uint8, 16, STRUCT, q_u8)\t\\\n@@ -51,6 +52,7 @@ VARIANT (int32, 4, STRUCT, q_s32)\t\\\n VARIANT (int64, 2, STRUCT, q_s64)\t\\\n VARIANT (poly8, 16, STRUCT, q_p8)\t\\\n VARIANT (poly16, 8, STRUCT, q_p16)\t\\\n+VARIANT (float16, 8, STRUCT, q_f16)\t\\\n VARIANT (float32, 4, STRUCT, q_f32)\t\\\n VARIANT (float64, 2, STRUCT, q_f64)\n "}, {"sha": "68c3fc34f5a037255be95334126a63feb875196b", "filename": "gcc/testsuite/gcc.target/aarch64/vldN_dup_1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3694857570a7ed472cbacbb027521715a26da6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2FvldN_dup_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3694857570a7ed472cbacbb027521715a26da6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2FvldN_dup_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2FvldN_dup_1.c?ref=7c3694857570a7ed472cbacbb027521715a26da6", "patch": "@@ -16,6 +16,7 @@ VARIANT (int32, , 2, _s32, STRUCT)\t\\\n VARIANT (int64, , 1, _s64, STRUCT)\t\\\n VARIANT (poly8, , 8, _p8, STRUCT)\t\\\n VARIANT (poly16, , 4, _p16, STRUCT)\t\\\n+VARIANT (float16, , 4, _f16, STRUCT)\t\\\n VARIANT (float32, , 2, _f32, STRUCT)\t\\\n VARIANT (float64, , 1, _f64, STRUCT)\t\\\n VARIANT (uint8, q, 16, _u8, STRUCT)\t\\\n@@ -28,6 +29,7 @@ VARIANT (int32, q, 4, _s32, STRUCT)\t\\\n VARIANT (int64, q, 2, _s64, STRUCT)\t\\\n VARIANT (poly8, q, 16, _p8, STRUCT)\t\\\n VARIANT (poly16, q, 8, _p16, STRUCT)\t\\\n+VARIANT (float16, q, 8, _f16, STRUCT)\t\\\n VARIANT (float32, q, 4, _f32, STRUCT)\t\\\n VARIANT (float64, q, 2, _f64, STRUCT)\n \n@@ -74,6 +76,7 @@ main (int argc, char **argv)\n   int64_t *int64_data = (int64_t *)uint64_data;\n   poly8_t poly8_data[4] = { 0, 7, 13, 18, };\n   poly16_t poly16_data[4] = { 11111, 2222, 333, 44 };\n+  float16_t float16_data[4] = { 1.0625, 3.125, 0.03125, 7.75 };\n   float32_t float32_data[4] = { 3.14159, 2.718, 1.414, 100.0 };\n   float64_t float64_data[4] = { 1.010010001, 12345.6789, -9876.54321, 1.618 };\n "}, {"sha": "6837a1161176ff8468143ccac1e8c9e87689dd0f", "filename": "gcc/testsuite/gcc.target/aarch64/vldN_lane_1.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3694857570a7ed472cbacbb027521715a26da6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2FvldN_lane_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3694857570a7ed472cbacbb027521715a26da6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2FvldN_lane_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2FvldN_lane_1.c?ref=7c3694857570a7ed472cbacbb027521715a26da6", "patch": "@@ -16,6 +16,7 @@ VARIANT (int32, , 2, _s32, 0, STRUCT)\t\\\n VARIANT (int64, , 1, _s64, 0, STRUCT)\t\\\n VARIANT (poly8, , 8, _p8, 7, STRUCT)\t\\\n VARIANT (poly16, , 4, _p16, 1, STRUCT)\t\\\n+VARIANT (float16, , 4, _f16, 3, STRUCT)\t\\\n VARIANT (float32, , 2, _f32, 1, STRUCT)\t\\\n VARIANT (float64, , 1, _f64, 0, STRUCT)\t\\\n VARIANT (uint8, q, 16, _u8, 14, STRUCT)\t\\\n@@ -28,6 +29,7 @@ VARIANT (int32, q, 4, _s32, 2, STRUCT)\t\\\n VARIANT (int64, q, 2, _s64, 1, STRUCT)\t\\\n VARIANT (poly8, q, 16, _p8, 12, STRUCT)\t\\\n VARIANT (poly16, q, 8, _p16, 5, STRUCT)\t\\\n+VARIANT (float16, q, 8, _f16, 7, STRUCT)\\\n VARIANT (float32, q, 4, _f32, 1, STRUCT)\\\n VARIANT (float64, q, 2, _f64, 0, STRUCT)\n \n@@ -71,7 +73,7 @@ main (int argc, char **argv)\n {\n   /* Original data for all vector formats.  */\n   uint64_t orig_data[8] = {0x1234567890abcdefULL, 0x13579bdf02468aceULL,\n-\t\t\t   0x012389ab4567cdefULL, 0xfeeddadacafe0431ULL,\n+\t\t\t   0x012389ab4567cdefULL, 0xdeeddadacafe0431ULL,\n \t\t\t   0x1032547698badcfeULL, 0xbadbadbadbad0badULL,\n \t\t\t   0x0102030405060708ULL, 0x0f0e0d0c0b0a0908ULL};\n \n@@ -87,6 +89,7 @@ main (int argc, char **argv)\n   int64_t *int64_data = (int64_t *)uint64_data;\n   poly8_t poly8_data[4] = { 0, 7, 13, 18, };\n   poly16_t poly16_data[4] = { 11111, 2222, 333, 44 };\n+  float16_t float16_data[4] = { 0.8125, 7.5, 19, 0.046875 };\n   float32_t float32_data[4] = { 3.14159, 2.718, 1.414, 100.0 };\n   float64_t float64_data[4] = { 1.010010001, 12345.6789, -9876.54321, 1.618 };\n "}]}