{"sha": "e61c65627303b0e086a5347df3cb0d7e658e3a97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYxYzY1NjI3MzAzYjBlMDg2YTUzNDdkZjNjYjBkN2U2NThlM2E5Nw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-07-31T13:41:43Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-07-31T13:41:43Z"}, "message": "bsd.h (ASM_BYTE): New define.\n\n\t* config/i386/bsd.h (ASM_BYTE): New define.\n\t* config/i386/darwin.h (ASM_BYTE): Rename from ASM_BYTE_OP.\n\t* config/i386/att.h (ASM_BYTE): New define. Use ASM_BYTE instead of\n\t.byte.  Use fputs or putc instead of fprintf where appropriate.\n\t* config/i386/i386-interix.h: Use ASM_BYTE instead of .byte.  Use\n\tfputs or putc instead of fprintf where appropriate.\n\t* config/i386/i386elf.h: Ditto.\n\t* config/i386/sysv4.h: Ditto.\n\t\n\t* config/i386/i386.c (TARGET_ASM_BYTE_OP): New define.\n\t* config/i386/i386.md (x86_sahf_1): Use ASM_BYTE instead of .byte.\n\t(*tls_global_dynamic_64): Ditto.\n\nFrom-SVN: r150315", "tree": {"sha": "90ce7b9684aba7ae0426990b26cc358479567f35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90ce7b9684aba7ae0426990b26cc358479567f35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e61c65627303b0e086a5347df3cb0d7e658e3a97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e61c65627303b0e086a5347df3cb0d7e658e3a97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e61c65627303b0e086a5347df3cb0d7e658e3a97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e61c65627303b0e086a5347df3cb0d7e658e3a97/comments", "author": null, "committer": null, "parents": [{"sha": "ea2002ba74c91a555992984a01398529e4c2ed17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea2002ba74c91a555992984a01398529e4c2ed17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea2002ba74c91a555992984a01398529e4c2ed17"}], "stats": {"total": 74, "additions": 45, "deletions": 29}, "files": [{"sha": "9357738ca0a4a4e1bb51d833702e24acf04ec412", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c65627303b0e086a5347df3cb0d7e658e3a97/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c65627303b0e086a5347df3cb0d7e658e3a97/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e61c65627303b0e086a5347df3cb0d7e658e3a97", "patch": "@@ -1,3 +1,18 @@\n+2009-07-31  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/bsd.h (ASM_BYTE): New define.\n+\t* config/i386/darwin.h (ASM_BYTE): Rename from ASM_BYTE_OP.\n+\t* config/i386/att.h (ASM_BYTE): New define. Use ASM_BYTE instead of\n+\t.byte.  Use fputs or putc instead of fprintf where appropriate.\n+\t* config/i386/i386-interix.h: Use ASM_BYTE instead of .byte.  Use\n+\tfputs or putc instead of fprintf where appropriate.\n+\t* config/i386/i386elf.h: Ditto.\n+\t* config/i386/sysv4.h: Ditto.\n+\t\n+\t* config/i386/i386.c (TARGET_ASM_BYTE_OP): New define.\n+\t* config/i386/i386.md (x86_sahf_1): Use ASM_BYTE instead of .byte.\n+\t(*tls_global_dynamic_64): Ditto.\n+\n 2009-07-31  Christian Bruel  <christian.bruel@st.com>\t\n \n \t* gcc/config.gcc (sh*-*-elf): test with_libgloss.\n@@ -223,8 +238,7 @@\n \t(vector_copysign<mode>3): Ditto.\n \n \t* config/rs6000/predicates.md (easy_vector_constant_msb): New\n-\tpredicate for setting the high bit in each word, used for\n-\tcopysign.\n+\tpredicate for setting the high bit in each word, used for copysign.\n \n \t* config/rs6000/ppc-asm.h (f19): Whitespace.\n \t(f32-f63): Define if VSX.\n@@ -236,8 +250,7 @@\n \t* config/rs6000/power7.md: New file, provide tuning parameters for\n \t-mcpu=power7.\n \n-\t* config/rs6000/rs6000-c.c (rs6000_macro_to_expand): Add VSX\n-\tsupport.\n+\t* config/rs6000/rs6000-c.c (rs6000_macro_to_expand): Add VSX support.\n \t(rs6000_cpu_cpp_builtins): Ditto.\n \t(altivec_overloaded_builtins): Ditto.\n \t(altivec_resolve_overloaded_builtin): Ditto.\n@@ -288,8 +301,7 @@\n \tsplitter for vectorizing copysign.\n \t(altivec_vrfiz): Rename from altivec_fturncv4sf2.  Add support for\n \tvectorizing simple math functions.\n-\t(altivec_vrfip): Add support for vectorizing simple math\n-\tfunctions.\n+\t(altivec_vrfip): Add support for vectorizing simple math functions.\n \t(altivec_vrfim): Ditto.\n \t(altivec_copysign_v4sf3): New insn for Altivec copysign support.\n \n@@ -337,9 +349,8 @@\n \t(vec_nearbyint): Ditto.\n \t(vec_rint): Ditto.\n \t(vec_sqrt): Ditto.\n-\t(all predicates): Use the generic builtin function, and not the\n-\tV4SF specific function so that the predicates will work with\n-\tVSX's V2DF.\n+\t(all predicates): Use the generic builtin function, and not the V4SF\n+\tspecific function so that the predicates will work with VSX's V2DF.\n \t(vec_all_*): Ditto.\n \t(vec_any_*): Ditto.\n "}, {"sha": "30616904fe2cfc8140e1929b08268d393b47eee3", "filename": "gcc/config/i386/att.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c65627303b0e086a5347df3cb0d7e658e3a97/gcc%2Fconfig%2Fi386%2Fatt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c65627303b0e086a5347df3cb0d7e658e3a97/gcc%2Fconfig%2Fi386%2Fatt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fatt.h?ref=e61c65627303b0e086a5347df3cb0d7e658e3a97", "patch": "@@ -31,6 +31,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n /* Assembler pseudos to introduce constants of various size.  */\n \n+#define ASM_BYTE \"\\t.byte\\t\"\n #define ASM_SHORT \"\\t.value\\t\"\n #define ASM_LONG \"\\t.long\\t\"\n #define ASM_QUAD \"\\t.quad\\t\"  /* Should not be used for 32bit compilation.  */\n@@ -43,7 +44,7 @@ do\t\t\t\t\t\t\t\t\\\n { size_t i = 0, limit = (SIZE); \t\t\t\t\\\n   while (i < limit)\t\t\t\t\t\t\\\n     { if (i%10 == 0) { if (i!=0) putc ('\\n', (FILE));\t\t\\\n-\t\t       fputs (\"\\t.byte\\t\", (FILE)); }\t\t\\\n+\t\t       fputs (ASM_BYTE, (FILE)); }\t\t\\\n       else putc (',', (FILE));\t\t\t\t\t\\\n \tfprintf ((FILE), \"0x%x\", ((PTR)[i++] & 0377)) ;}\t\\\n       putc ('\\n', (FILE));\t\t\t\t\t\\"}, {"sha": "e408ccdb03210ab8a943e878fbd988ea1925f1b6", "filename": "gcc/config/i386/bsd.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c65627303b0e086a5347df3cb0d7e658e3a97/gcc%2Fconfig%2Fi386%2Fbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c65627303b0e086a5347df3cb0d7e658e3a97/gcc%2Fconfig%2Fi386%2Fbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbsd.h?ref=e61c65627303b0e086a5347df3cb0d7e658e3a97", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Assembler pseudos to introduce constants of various size.  */\n \n+#define ASM_BYTE \"\\t.byte\\t\"\n #define ASM_SHORT \"\\t.word\\t\"\n #define ASM_LONG \"\\t.long\\t\"\n #define ASM_QUAD \"\\t.quad\\t\"  /* Should not be used for 32bit compilation.  */"}, {"sha": "eb9ee70a04de8d1c3b989eaa9f2da0bdbc4c6241", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c65627303b0e086a5347df3cb0d7e658e3a97/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c65627303b0e086a5347df3cb0d7e658e3a97/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=e61c65627303b0e086a5347df3cb0d7e658e3a97", "patch": "@@ -189,7 +189,7 @@ extern void darwin_x86_file_end (void);\n \n /* Assembler pseudos to introduce constants of various size.  */\n \n-#define ASM_BYTE_OP \"\\t.byte\\t\"\n+#define ASM_BYTE \"\\t.byte\\t\"\n #define ASM_SHORT \"\\t.word\\t\"\n #define ASM_LONG \"\\t.long\\t\"\n #define ASM_QUAD \"\\t.quad\\t\""}, {"sha": "060b82ca245e4b397c49cb199c2e978ff06d464f", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c65627303b0e086a5347df3cb0d7e658e3a97/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c65627303b0e086a5347df3cb0d7e658e3a97/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=e61c65627303b0e086a5347df3cb0d7e658e3a97", "patch": "@@ -209,15 +209,15 @@ along with GCC; see the file COPYING3.  If not see\n \t  else\t\t\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      if (bytes_in_chunk == 0)\t\t\t\t\t\\\n-\t\tfprintf ((FILE), \"\\t.byte\\t\");\t\t\t\t\\\n+\t\tfputs (ASM_BYTE, (FILE));\t\t\t\t\\\n \t      else\t\t\t\t\t\t\t\\\n \t\tfputc (',', (FILE));\t\t\t\t\t\\\n \t      fprintf ((FILE), \"0x%02x\", *_ascii_bytes);\t\t\\\n \t      bytes_in_chunk += 5;\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n       if (bytes_in_chunk > 0)\t\t\t\t\t\t\\\n-        fprintf ((FILE), \"\\n\");\t\t\t\t\t\t\\\n+        fputc ('\\n', (FILE));\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n@@ -277,11 +277,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_DEF(FILE,LABEL1,LABEL2)\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-    fprintf ((FILE), \"%s\", SET_ASM_OP);\t\t\t\t\t\\\n+    fputs (SET_ASM_OP, (FILE));\t\t\t\t\t\t\\\n     assemble_name (FILE, LABEL1);\t\t\t\t\t\\\n-    fprintf (FILE, \",\");\t\t\t\t\t\t\\\n+    fputc (',', (FILE));\t\t\t\t\t\t\\\n     assemble_name (FILE, LABEL2);\t\t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+    fputc ('\\n', (FILE));\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n while (0)\n \n@@ -359,4 +359,4 @@ extern void i386_pe_unique_section (tree, int);\n \n #define SUBTARGET_RETURN_IN_MEMORY(TYPE, FNTYPE) \\\n \t(TYPE_MODE (TYPE) == BLKmode \\\n-\t || (AGGREGATE_TYPE_P (TYPE) && int_size_in_bytes (TYPE) > 8 ))\n\\ No newline at end of file\n+\t || (AGGREGATE_TYPE_P (TYPE) && int_size_in_bytes (TYPE) > 8 ))"}, {"sha": "73b26907cc7fc76fe726b93870d674fb32970d51", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c65627303b0e086a5347df3cb0d7e658e3a97/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c65627303b0e086a5347df3cb0d7e658e3a97/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e61c65627303b0e086a5347df3cb0d7e658e3a97", "patch": "@@ -30491,6 +30491,9 @@ ix86_enum_va_list (int idx, const char **pname, tree *ptree)\n #undef TARGET_ASM_CLOSE_PAREN\n #define TARGET_ASM_CLOSE_PAREN \"\"\n \n+#undef TARGET_ASM_BYTE_OP\n+#define TARGET_ASM_BYTE_OP ASM_BYTE\n+\n #undef TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP ASM_SHORT\n #undef TARGET_ASM_ALIGNED_SI_OP"}, {"sha": "3d832f11249ed8974abad5f86cad5571568f53f0", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c65627303b0e086a5347df3cb0d7e658e3a97/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c65627303b0e086a5347df3cb0d7e658e3a97/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e61c65627303b0e086a5347df3cb0d7e658e3a97", "patch": "@@ -1555,7 +1555,7 @@\n #ifdef HAVE_AS_IX86_SAHF\n   return \"sahf\";\n #else\n-  return \".byte\\t0x9e\";\n+  return ASM_BYTE \"0x9e\";\n #endif\n }\n   [(set_attr \"length\" \"1\")\n@@ -16473,7 +16473,7 @@\n    (unspec:DI [(match_operand:DI 1 \"tls_symbolic_operand\" \"\")]\n \t      UNSPEC_TLS_GD)]\n   \"TARGET_64BIT\"\n-  { return \".byte\\t0x66\\n\\tlea{q}\\t{%a1@TLSGD(%%rip), %%rdi|rdi, %a1@TLSGD[rip]}\\n\" ASM_SHORT \"0x6666\\n\\trex64\\n\\tcall\\t%P2\"; }\n+  { return ASM_BYTE \"0x66\\n\\tlea{q}\\t{%a1@TLSGD(%%rip), %%rdi|rdi, %a1@TLSGD[rip]}\\n\" ASM_SHORT \"0x6666\\n\\trex64\\n\\tcall\\t%P2\"; }\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"16\")])\n "}, {"sha": "44cf6818f7c5fe1e935bcca2f4a2309275adeb76", "filename": "gcc/config/i386/i386elf.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c65627303b0e086a5347df3cb0d7e658e3a97/gcc%2Fconfig%2Fi386%2Fi386elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c65627303b0e086a5347df3cb0d7e658e3a97/gcc%2Fconfig%2Fi386%2Fi386elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386elf.h?ref=e61c65627303b0e086a5347df3cb0d7e658e3a97", "patch": "@@ -63,7 +63,7 @@ along with GCC; see the file COPYING3.  If not see\n       const unsigned char *limit = _ascii_bytes + (LENGTH);\t\t\\\n       unsigned bytes_in_chunk = 0;\t\t\t\t\t\\\n       for (; _ascii_bytes < limit; _ascii_bytes++)\t\t\t\\\n-        {\t\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n \t  const unsigned char *p;\t\t\t\t\t\\\n \t  if (bytes_in_chunk >= 64)\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n@@ -85,15 +85,15 @@ along with GCC; see the file COPYING3.  If not see\n \t  else\t\t\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      if (bytes_in_chunk == 0)\t\t\t\t\t\\\n-\t\tfprintf ((FILE), \"\\t.byte\\t\");\t\t\t\t\\\n+\t\tfputs (ASM_BYTE, (FILE));\t\t\t\t\\\n \t      else\t\t\t\t\t\t\t\\\n \t\tfputc (',', (FILE));\t\t\t\t\t\\\n \t      fprintf ((FILE), \"0x%02x\", *_ascii_bytes);\t\t\\\n \t      bytes_in_chunk += 5;\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n       if (bytes_in_chunk > 0)\t\t\t\t\t\t\\\n-        fprintf ((FILE), \"\\n\");\t\t\t\t\t\t\\\n+\tfputc ('\\n', (FILE));\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n "}, {"sha": "63c0cbc85a78b1bfacb4eb923e121fb131b4ddc0", "filename": "gcc/config/i386/sysv4.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61c65627303b0e086a5347df3cb0d7e658e3a97/gcc%2Fconfig%2Fi386%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61c65627303b0e086a5347df3cb0d7e658e3a97/gcc%2Fconfig%2Fi386%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsysv4.h?ref=e61c65627303b0e086a5347df3cb0d7e658e3a97", "patch": "@@ -55,7 +55,7 @@ along with GCC; see the file COPYING3.  If not see\n       const unsigned char *limit = _ascii_bytes + (LENGTH);\t\t\\\n       unsigned bytes_in_chunk = 0;\t\t\t\t\t\\\n       for (; _ascii_bytes < limit; _ascii_bytes++)\t\t\t\\\n-        {\t\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n \t  const unsigned char *p;\t\t\t\t\t\\\n \t  if (bytes_in_chunk >= 64)\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n@@ -77,15 +77,15 @@ along with GCC; see the file COPYING3.  If not see\n \t  else\t\t\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      if (bytes_in_chunk == 0)\t\t\t\t\t\\\n-\t\tfprintf ((FILE), \"\\t.byte\\t\");\t\t\t\t\\\n+\t\tfputs (ASM_BYTE, (FILE));\t\t\t\t\\\n \t      else\t\t\t\t\t\t\t\\\n \t\tfputc (',', (FILE));\t\t\t\t\t\\\n \t      fprintf ((FILE), \"0x%02x\", *_ascii_bytes);\t\t\\\n \t      bytes_in_chunk += 5;\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n       if (bytes_in_chunk > 0)\t\t\t\t\t\t\\\n-        fprintf ((FILE), \"\\n\");\t\t\t\t\t\t\\\n+\tfputc ('\\n', (FILE));\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n@@ -103,10 +103,10 @@ along with GCC; see the file COPYING3.  If not see\n   do {\t\t\t\t\t\t\t\t\t\\\n     if ((SIZE) == 4 && ((ENCODING) & 0x70) == DW_EH_PE_datarel)\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-        fputs (ASM_LONG, FILE);\t\t\t\t\t\t\\\n-        assemble_name (FILE, XSTR (ADDR, 0));\t\t\t\t\\\n-\tfputs (((ENCODING) & DW_EH_PE_indirect ? \"@GOT\" : \"@GOTOFF\"), FILE); \\\n-        goto DONE;\t\t\t\t\t\t\t\\\n+\tfputs (ASM_LONG, (FILE));\t\t\t\t\t\\\n+\tassemble_name (FILE, XSTR (ADDR, 0));\t\t\t\t\\\n+\tfputs (((ENCODING) & DW_EH_PE_indirect ? \"@GOT\" : \"@GOTOFF\"), (FILE)); \\\n+\tgoto DONE;\t\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n   } while (0)\n "}]}