{"sha": "8244fc4f48759523b1eb9d4b5ef9d75f5ec1418d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI0NGZjNGY0ODc1OTUyM2IxZWI5ZDRiNWVmOWQ3NWY1ZWMxNDE4ZA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-04-07T22:13:16Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-04-07T22:13:16Z"}, "message": "(mark_set_1): Clear reg_next_use for all kinds of regs.\n\nFrom-SVN: r4041", "tree": {"sha": "099e22b7c7e6b8a3085e78ba19fca612f1b04548", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/099e22b7c7e6b8a3085e78ba19fca612f1b04548"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8244fc4f48759523b1eb9d4b5ef9d75f5ec1418d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8244fc4f48759523b1eb9d4b5ef9d75f5ec1418d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8244fc4f48759523b1eb9d4b5ef9d75f5ec1418d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8244fc4f48759523b1eb9d4b5ef9d75f5ec1418d/comments", "author": null, "committer": null, "parents": [{"sha": "84ab931b38ea576576927b27e9b56be80dcfb486", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84ab931b38ea576576927b27e9b56be80dcfb486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84ab931b38ea576576927b27e9b56be80dcfb486"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "183f1ada12f53ef9e1caa0ba8e5f88f66d19dc85", "filename": "gcc/flow.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8244fc4f48759523b1eb9d4b5ef9d75f5ec1418d/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8244fc4f48759523b1eb9d4b5ef9d75f5ec1418d/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=8244fc4f48759523b1eb9d4b5ef9d75f5ec1418d", "patch": "@@ -1795,6 +1795,9 @@ mark_set_1 (needed, dead, x, insn, significant)\n       /* Mark it as as dead before this insn.  */\n       dead[offset] |= bit;\n \n+      /* The next use is no longer \"next\", since a store intervenes.  */\n+      reg_next_use[regno] = 0;\n+\n       /* A hard reg in a wide mode may really be multiple registers.\n \t If so, mark all of them just like the first.  */\n       if (regno < FIRST_PSEUDO_REGISTER)\n@@ -1863,9 +1866,6 @@ mark_set_1 (needed, dead, x, insn, significant)\n \t      reg_live_length[regno]++;\n \t    }\n \n-\t  /* The next use is no longer \"next\", since a store intervenes.  */\n-\t  reg_next_use[regno] = 0;\n-\n \t  if (all_needed)\n \t    {\n \t      /* Make a logical link from the next following insn\n@@ -1915,6 +1915,8 @@ mark_set_1 (needed, dead, x, insn, significant)\n \t    }\n \t}\n     }\n+  else if (GET_CODE (reg) == REG)\n+    reg_next_use[regno] = 0;\n \n   /* If this is the last pass and this is a SCRATCH, show it will be dying\n      here and count it.  */"}]}