{"sha": "455d8f0605b9e3c4f8760470471d22a43d01f531", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU1ZDhmMDYwNWI5ZTNjNGY4NzYwNDcwNDcxZDIyYTQzZDAxZjUzMQ==", "commit": {"author": {"name": "Andreas Tobler", "email": "a.tobler@schweiz.ch", "date": "2005-03-16T18:18:59Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2005-03-16T18:18:59Z"}, "message": "stacktrace.cc (_Jv_StackTrace::UnwindTraceFn): Protect interpreter-specific code with #ifdef INTERPRETER.\n\n2005-03-15  Andreas Tobler  <a.tobler@schweiz.ch>\n\n        * stacktrace.cc (_Jv_StackTrace::UnwindTraceFn): Protect\n        interpreter-specific code with #ifdef INTERPRETER.\n        (_Jv_StackTrace::getLineNumberForFrame): Likewise.\n        (_Jv_StackTrace::FillInFrameInfo): Likewise.\n        (_Jv_StackTrace::non_system_trace_fn): Likewise.\n        * include/java-stack.h (struct _Jv_InterpFrameInfo): Protect  with\n        #ifdef INTERPRETER. Also protect declarations that use it.\n        * java/lang/Class.h: Move _Jv_StackTrace friend declaration  outside\n        #ifdef INTERPRETER block.\n\nFrom-SVN: r96571", "tree": {"sha": "9871e263b817e18744f4503c39a8704b9cf723fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9871e263b817e18744f4503c39a8704b9cf723fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/455d8f0605b9e3c4f8760470471d22a43d01f531", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/455d8f0605b9e3c4f8760470471d22a43d01f531", "html_url": "https://github.com/Rust-GCC/gccrs/commit/455d8f0605b9e3c4f8760470471d22a43d01f531", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/455d8f0605b9e3c4f8760470471d22a43d01f531/comments", "author": null, "committer": null, "parents": [{"sha": "ab1bc4e8168069b1fbe71fd5f69baf339a45775d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab1bc4e8168069b1fbe71fd5f69baf339a45775d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab1bc4e8168069b1fbe71fd5f69baf339a45775d"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "7adeca6e93b1edc877d4159c5a44f175a0c1ff22", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455d8f0605b9e3c4f8760470471d22a43d01f531/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455d8f0605b9e3c4f8760470471d22a43d01f531/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=455d8f0605b9e3c4f8760470471d22a43d01f531", "patch": "@@ -1,3 +1,15 @@\n+2005-03-15  Andreas Tobler  <a.tobler@schweiz.ch>\n+\n+\t* stacktrace.cc (_Jv_StackTrace::UnwindTraceFn): Protect\n+\tinterpreter-specific code with #ifdef INTERPRETER.\n+\t(_Jv_StackTrace::getLineNumberForFrame): Likewise.\n+\t(_Jv_StackTrace::FillInFrameInfo): Likewise.\n+\t(_Jv_StackTrace::non_system_trace_fn): Likewise.\n+\t* include/java-stack.h (struct _Jv_InterpFrameInfo): Protect with\n+\t#ifdef INTERPRETER. Also protect declarations that use it.\n+\t* java/lang/Class.h: Move _Jv_StackTrace friend declaration outside \n+\t#ifdef INTERPRETER block.\n+\n 2005-03-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libgcj/20251"}, {"sha": "5905e264e47360c86f7eb72eac8d6c1eaff72ae6", "filename": "libjava/include/java-stack.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455d8f0605b9e3c4f8760470471d22a43d01f531/libjava%2Finclude%2Fjava-stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455d8f0605b9e3c4f8760470471d22a43d01f531/libjava%2Finclude%2Fjava-stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-stack.h?ref=455d8f0605b9e3c4f8760470471d22a43d01f531", "patch": "@@ -71,7 +71,9 @@ struct _Jv_UnwindState\n   jint length;                   // length of FRAMES\n   jint pos;                      // current position in FRAMES\n   _Jv_StackFrame *frames;        // array of stack frame data to be filled.\n+#ifdef INTERPRETER\n   _Jv_InterpFrame *interp_frame; // current frame in the interpreter stack.\n+#endif\n   _Jv_TraceFn trace_function;    // function to call back after each frame\n   \t\t\t\t // is enumerated. May be NULL.\n   void *trace_data;\t\t // additional state data for trace_function.\n@@ -84,8 +86,10 @@ struct _Jv_UnwindState\n       Thread *thread = Thread::currentThread();\n       // Check for NULL currentThread(), in case an exception is created \n       // very early during the runtime startup.\n+#ifdef INTERPRETER\n       if (thread)\n \tinterp_frame = (_Jv_InterpFrame *) thread->interp_frame;\n+#endif\n       trace_function = NULL;\n       trace_data = NULL;\n     }"}, {"sha": "70e314e7cb35da1da3cb3897c62b91e0f4efd52b", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455d8f0605b9e3c4f8760470471d22a43d01f531/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455d8f0605b9e3c4f8760470471d22a43d01f531/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=455d8f0605b9e3c4f8760470471d22a43d01f531", "patch": "@@ -472,8 +472,8 @@ class java::lang::Class : public java::lang::Object\n   friend class ::_Jv_ClassReader;\t\n   friend class ::_Jv_InterpClass;\n   friend class ::_Jv_InterpMethod;\n-  friend class ::_Jv_StackTrace;\n #endif\n+  friend class ::_Jv_StackTrace;\n \n #ifdef JV_MARKOBJ_DECL\n   friend JV_MARKOBJ_DECL;"}, {"sha": "6484dc6008d96ffaad605c213faaa6b1abe052fc", "filename": "libjava/stacktrace.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455d8f0605b9e3c4f8760470471d22a43d01f531/libjava%2Fstacktrace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455d8f0605b9e3c4f8760470471d22a43d01f531/libjava%2Fstacktrace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fstacktrace.cc?ref=455d8f0605b9e3c4f8760470471d22a43d01f531", "patch": "@@ -120,6 +120,7 @@ _Jv_StackTrace::UnwindTraceFn (struct _Unwind_Context *context, void *state_ptr)\n   // the java code and not the interpreter itself. This assumes a 1:1 \n   // correspondance between call frames in the interpreted stack and occurances\n   // of _Jv_InterpMethod::run() on the native stack.\n+#ifdef INTERPRETER\n   if (func_addr == (_Unwind_Ptr) &_Jv_InterpMethod::run)\n     {\n       state->frames[pos].type = frame_interpreter;\n@@ -128,6 +129,7 @@ _Jv_StackTrace::UnwindTraceFn (struct _Unwind_Context *context, void *state_ptr)\n       state->interp_frame = state->interp_frame->next;\n     }\n   else\n+#endif\n     {\n       state->frames[pos].type = frame_native;\n       state->frames[pos].ip = (void *) _Unwind_GetIP (context);\n@@ -174,6 +176,7 @@ void\n _Jv_StackTrace::getLineNumberForFrame(_Jv_StackFrame *frame, NameFinder *finder, \n \t\t jstring *sourceFileName, jint *lineNum)\n {\n+#ifdef INTERPRETER\n   if (frame->type == frame_interpreter)\n     {\n       _Jv_InterpMethod *interp_meth = frame->interp.meth;\n@@ -183,6 +186,7 @@ _Jv_StackTrace::getLineNumberForFrame(_Jv_StackFrame *frame, NameFinder *finder,\n       *lineNum = interp_meth->get_source_line(frame->interp.pc);\n       return;\n     }\n+#endif\n   // Use dladdr() to determine in which binary the address IP resides.\n #if defined (HAVE_DLFCN_H) && defined (HAVE_DLADDR)\n   extern char **_Jv_argv;\n@@ -245,12 +249,14 @@ _Jv_StackTrace::FillInFrameInfo (_Jv_StackFrame *frame)\n \t      }\n \t  }\n     }\n+#ifdef INTERPRETER\n   else if (frame->type == frame_interpreter)\n     {\n       _Jv_InterpMethod *interp_meth = frame->interp.meth;\n       klass = interp_meth->defining_class;\n       meth = interp_meth->self;\n     }\n+#endif\n   else\n     JvFail (\"Unknown frame type\");\n   \n@@ -495,11 +501,13 @@ _Jv_StackTrace::non_system_trace_fn (_Jv_UnwindState *state)\n   if (frame->klass)\n     {\n       classLoader = frame->klass->getClassLoaderInternal();\n+#ifdef INTERPRETER\n       if (classLoader != NULL && classLoader != ClassLoader::systemClassLoader)\n         {\n           state->trace_data = (void *) classLoader;\n \t  return _URC_NORMAL_STOP;\n \t}\n+#endif\n     }\n \n   return _URC_NO_REASON;"}]}