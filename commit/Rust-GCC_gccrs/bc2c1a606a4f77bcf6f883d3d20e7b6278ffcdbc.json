{"sha": "bc2c1a606a4f77bcf6f883d3d20e7b6278ffcdbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMyYzFhNjA2YTRmNzdiY2Y2Zjg4M2QzZDIwZTdiNjI3OGZmY2RiYw==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2011-04-20T16:33:48Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2011-04-20T16:33:48Z"}, "message": "arm.c (arm_gen_constant): Move movw support ....\n\n2011-04-20  Andrew Stubbs  <ams@codesourcery.com>\n\n\tgcc/\n\t* config/arm/arm.c (arm_gen_constant): Move movw support ....\n\t(const_ok_for_op): ... to here.\n\nFrom-SVN: r172777", "tree": {"sha": "dca58fc9061409434781efead0cd1fff82b041e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dca58fc9061409434781efead0cd1fff82b041e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc2c1a606a4f77bcf6f883d3d20e7b6278ffcdbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc2c1a606a4f77bcf6f883d3d20e7b6278ffcdbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc2c1a606a4f77bcf6f883d3d20e7b6278ffcdbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc2c1a606a4f77bcf6f883d3d20e7b6278ffcdbc/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "583722ee5836f737b0a05f915d6d4ffc095565f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/583722ee5836f737b0a05f915d6d4ffc095565f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/583722ee5836f737b0a05f915d6d4ffc095565f9"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "455bfeb58bc23140d4353f43cd0b92a8c726d446", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2c1a606a4f77bcf6f883d3d20e7b6278ffcdbc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2c1a606a4f77bcf6f883d3d20e7b6278ffcdbc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc2c1a606a4f77bcf6f883d3d20e7b6278ffcdbc", "patch": "@@ -1,3 +1,8 @@\n+2011-04-20  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/arm/arm.c (arm_gen_constant): Move movw support ....\n+\t(const_ok_for_op): ... to here.\n+\n 2011-04-20  Kai Tietz  <ktietz@redhat.com>\n \n \t* fold-const.c (fold_binary_loc): Add handling for"}, {"sha": "38aa390ab6e4f1c264bbd1bd7369e3358037f7cd", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2c1a606a4f77bcf6f883d3d20e7b6278ffcdbc/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2c1a606a4f77bcf6f883d3d20e7b6278ffcdbc/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=bc2c1a606a4f77bcf6f883d3d20e7b6278ffcdbc", "patch": "@@ -2307,6 +2307,13 @@ const_ok_for_op (HOST_WIDE_INT i, enum rtx_code code)\n \n   switch (code)\n     {\n+    case SET:\n+      /* See if we can use movw.  */\n+      if (arm_arch_thumb2 && (i & 0xffff0000) == 0)\n+\treturn 1;\n+      else\n+\treturn 0;\n+\n     case PLUS:\n     case COMPARE:\n     case EQ:\n@@ -2663,9 +2670,7 @@ arm_gen_constant (enum rtx_code code, enum machine_mode mode, rtx cond,\n     }\n \n   /* If we can do it in one insn get out quickly.  */\n-  if (const_ok_for_arm (val)\n-      || (can_negate_initial && const_ok_for_arm (-val))\n-      || (can_invert && const_ok_for_arm (~val)))\n+  if (const_ok_for_op (val, code))\n     {\n       if (generate)\n \temit_constant_insn (cond,\n@@ -2718,15 +2723,6 @@ arm_gen_constant (enum rtx_code code, enum machine_mode mode, rtx cond,\n   switch (code)\n     {\n     case SET:\n-      /* See if we can use movw.  */\n-      if (arm_arch_thumb2 && (remainder & 0xffff0000) == 0)\n-\t{\n-\t  if (generate)\n-\t    emit_constant_insn (cond, gen_rtx_SET (VOIDmode, target,\n-\t\t\t\t\t\t   GEN_INT (val)));\n-\t  return 1;\n-\t}\n-\n       /* See if we can do this by sign_extending a constant that is known\n \t to be negative.  This is a good, way of doing it, since the shift\n \t may well merge into a subsequent insn.  */"}]}