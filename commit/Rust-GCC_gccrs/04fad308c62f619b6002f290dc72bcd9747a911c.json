{"sha": "04fad308c62f619b6002f290dc72bcd9747a911c", "node_id": "C_kwDOANBUbNoAKDA0ZmFkMzA4YzYyZjYxOWI2MDAyZjI5MGRjNzJiY2Q5NzQ3YTkxMWM", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-04-17T19:48:41Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-04-26T15:02:40Z"}, "message": "gccrs: Fix memory corruption at peek_context\n\nWhen working in the resolve_operator_overload it was found that we got\nmemory corruption as method resolution will use the query system and\ntherefore resolve new methods and the current function context info will\nchange and due to the fact the peek_context interface returns a reference\nto the element which was now safe from a vector which can change and all\nyou need is the current function context at that moment in time.\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-autoderef.cc: don't take a reference\n\t* typecheck/rust-hir-type-check-expr.cc (TypeCheckExpr::visit): likewise\n\t* typecheck/rust-hir-type-check.h: remove reference\n\t* typecheck/rust-typecheck-context.cc (TypeCheckContext::pop_return_type): likewise\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "7b3b942c631e2cced17cd3aebfc34104312972d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b3b942c631e2cced17cd3aebfc34104312972d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04fad308c62f619b6002f290dc72bcd9747a911c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04fad308c62f619b6002f290dc72bcd9747a911c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04fad308c62f619b6002f290dc72bcd9747a911c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04fad308c62f619b6002f290dc72bcd9747a911c/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e70fbab606bdfa858d5993eddbc9d8070914a139", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e70fbab606bdfa858d5993eddbc9d8070914a139", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e70fbab606bdfa858d5993eddbc9d8070914a139"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "078a5705b5686adb17af5ba8079c87a47001f96a", "filename": "gcc/rust/typecheck/rust-autoderef.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04fad308c62f619b6002f290dc72bcd9747a911c/gcc%2Frust%2Ftypecheck%2Frust-autoderef.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04fad308c62f619b6002f290dc72bcd9747a911c/gcc%2Frust%2Ftypecheck%2Frust-autoderef.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-autoderef.cc?ref=04fad308c62f619b6002f290dc72bcd9747a911c", "patch": "@@ -164,7 +164,7 @@ resolve_operator_overload_fn (\n   // handle the case where we are within the impl block for this\n   // lang_item otherwise we end up with a recursive operator overload\n   // such as the i32 operator overload trait\n-  TypeCheckContextItem &fn_context = context->peek_context ();\n+  TypeCheckContextItem fn_context = context->peek_context ();\n   if (fn_context.get_type () == TypeCheckContextItem::ItemType::IMPL_ITEM)\n     {\n       auto &impl_item = fn_context.get_impl_item ();"}, {"sha": "f205a49e70757184a2cc955b1882e5039adae284", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04fad308c62f619b6002f290dc72bcd9747a911c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04fad308c62f619b6002f290dc72bcd9747a911c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc?ref=04fad308c62f619b6002f290dc72bcd9747a911c", "patch": "@@ -1457,7 +1457,7 @@ TypeCheckExpr::visit (HIR::MatchExpr &expr)\n void\n TypeCheckExpr::visit (HIR::ClosureExpr &expr)\n {\n-  TypeCheckContextItem &current_context = context->peek_context ();\n+  TypeCheckContextItem current_context = context->peek_context ();\n   TyTy::FnType *current_context_fndecl = current_context.get_context_type ();\n \n   HirId ref = expr.get_mappings ().get_hirid ();\n@@ -1624,7 +1624,7 @@ TypeCheckExpr::resolve_operator_overload (\n   // handle the case where we are within the impl block for this lang_item\n   // otherwise we end up with a recursive operator overload such as the i32\n   // operator overload trait\n-  TypeCheckContextItem &fn_context = context->peek_context ();\n+  TypeCheckContextItem fn_context = context->peek_context ();\n   if (fn_context.get_type () == TypeCheckContextItem::ItemType::IMPL_ITEM)\n     {\n       auto &impl_item = fn_context.get_impl_item ();"}, {"sha": "ec63657aaa6feff721f285dd013d17acfbe0ddef", "filename": "gcc/rust/typecheck/rust-hir-type-check.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04fad308c62f619b6002f290dc72bcd9747a911c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04fad308c62f619b6002f290dc72bcd9747a911c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h?ref=04fad308c62f619b6002f290dc72bcd9747a911c", "patch": "@@ -90,7 +90,7 @@ class TypeCheckContext\n   bool lookup_type_by_node_id (NodeId ref, HirId *id);\n \n   TyTy::BaseType *peek_return_type ();\n-  TypeCheckContextItem &peek_context ();\n+  TypeCheckContextItem peek_context ();\n   void push_return_type (TypeCheckContextItem item,\n \t\t\t TyTy::BaseType *return_type);\n   void pop_return_type ();"}, {"sha": "7a40fc8313bee4173fd2f5908d9312cf3d91c855", "filename": "gcc/rust/typecheck/rust-typecheck-context.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04fad308c62f619b6002f290dc72bcd9747a911c/gcc%2Frust%2Ftypecheck%2Frust-typecheck-context.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04fad308c62f619b6002f290dc72bcd9747a911c/gcc%2Frust%2Ftypecheck%2Frust-typecheck-context.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-typecheck-context.cc?ref=04fad308c62f619b6002f290dc72bcd9747a911c", "patch": "@@ -157,7 +157,7 @@ TypeCheckContext::pop_return_type ()\n   return_type_stack.pop_back ();\n }\n \n-TypeCheckContextItem &\n+TypeCheckContextItem\n TypeCheckContext::peek_context ()\n {\n   rust_assert (!return_type_stack.empty ());"}]}