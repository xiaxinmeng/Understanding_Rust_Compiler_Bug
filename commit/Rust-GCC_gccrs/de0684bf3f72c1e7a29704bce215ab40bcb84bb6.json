{"sha": "de0684bf3f72c1e7a29704bce215ab40bcb84bb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUwNjg0YmYzZjcyYzFlN2EyOTcwNGJjZTIxNWFiNDBiY2I4NGJiNg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-01-24T23:08:58Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-01-25T19:26:07Z"}, "message": "c++: Poor diagnostic for dynamic_cast in constexpr context [PR93414]\n\nI neglected to add a proper diagnostic for the reference dynamic_cast\ncase when the operand of a dynamic_cast doesn't refer to a public base\nof Derived, resulting in suboptimal error message\n\n   error: call to non-'constexpr' function 'void* __cxa_bad_cast()'\n\n2020-01-25  Marek Polacek  <polacek@redhat.com>\n\n\tPR c++/93414 - poor diagnostic for dynamic_cast in constexpr context.\n\t* constexpr.c (cxx_eval_dynamic_cast_fn): Add a reference\n\tdynamic_cast diagnostic.\n\n\t* g++.dg/cpp2a/constexpr-dynamic18.C: New test.", "tree": {"sha": "0c6b84992dd87dd390731bee7c92d1c38438af14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c6b84992dd87dd390731bee7c92d1c38438af14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de0684bf3f72c1e7a29704bce215ab40bcb84bb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de0684bf3f72c1e7a29704bce215ab40bcb84bb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de0684bf3f72c1e7a29704bce215ab40bcb84bb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de0684bf3f72c1e7a29704bce215ab40bcb84bb6/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10be08aa276916b4dc286abc269ed0a175f033dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10be08aa276916b4dc286abc269ed0a175f033dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10be08aa276916b4dc286abc269ed0a175f033dd"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "0dc1ad212286e2e3d09757124426c0cd286be7b6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0684bf3f72c1e7a29704bce215ab40bcb84bb6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0684bf3f72c1e7a29704bce215ab40bcb84bb6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=de0684bf3f72c1e7a29704bce215ab40bcb84bb6", "patch": "@@ -1,3 +1,9 @@\n+2020-01-25  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/93414 - poor diagnostic for dynamic_cast in constexpr context.\n+\t* constexpr.c (cxx_eval_dynamic_cast_fn): Add a reference\n+\tdynamic_cast diagnostic.\n+\n 2020-01-24  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/93400 - ICE with constrained friend."}, {"sha": "577022e9b9a6a7ab5ee1a257ee9cef4571612afb", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0684bf3f72c1e7a29704bce215ab40bcb84bb6/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0684bf3f72c1e7a29704bce215ab40bcb84bb6/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=de0684bf3f72c1e7a29704bce215ab40bcb84bb6", "patch": "@@ -1888,7 +1888,20 @@ cxx_eval_dynamic_cast_fn (const constexpr_ctx *ctx, tree call,\n   if (tree t = (TREE_CODE (obj) == COMPONENT_REF\n \t\t? TREE_OPERAND (obj, 1) : obj))\n     if (TREE_CODE (t) != FIELD_DECL || !DECL_FIELD_IS_BASE (t))\n-      return integer_zero_node;\n+      {\n+\tif (reference_p)\n+\t  {\n+\t    if (!ctx->quiet)\n+\t      {\n+\t\terror_at (loc, \"reference %<dynamic_cast%> failed\");\n+\t\tinform (loc, \"dynamic type %qT of its operand does \"\n+\t\t\t\"not have a base class of type %qT\",\n+\t\t\tobjtype, type);\n+\t      }\n+\t    *non_constant_p = true;\n+\t  }\n+\treturn integer_zero_node;\n+      }\n \n   /* [class.cdtor] When a dynamic_cast is used in a constructor ...\n      or in a destructor ... if the operand of the dynamic_cast refers"}, {"sha": "587603ffb46ce3b21619277e0c444cef9b8851a8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0684bf3f72c1e7a29704bce215ab40bcb84bb6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0684bf3f72c1e7a29704bce215ab40bcb84bb6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de0684bf3f72c1e7a29704bce215ab40bcb84bb6", "patch": "@@ -1,3 +1,8 @@\n+2020-01-25  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/93414 - poor diagnostic for dynamic_cast in constexpr context.\n+\t* g++.dg/cpp2a/constexpr-dynamic18.C: New test.\n+\n 2020-01-25  Feng Xue  <fxue@os.amperecomputing.com>\n \n \tPR ipa/93166"}, {"sha": "346f9f5647099201b7190cb8fc5a8367bbb33a55", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dynamic18.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0684bf3f72c1e7a29704bce215ab40bcb84bb6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0684bf3f72c1e7a29704bce215ab40bcb84bb6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dynamic18.C?ref=de0684bf3f72c1e7a29704bce215ab40bcb84bb6", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/93414 - poor diagnostic for dynamic_cast in constexpr context.\n+// { dg-do compile { target c++2a } }\n+// Here 'b' doesn't point/refer to a public base of Derived.\n+\n+struct Base {\n+    constexpr virtual ~Base(){}\n+};\n+\n+struct Derived: Base {\n+    constexpr ~Derived(){}\n+};\n+\n+constexpr const Derived& cast(const Base& b) {\n+    return dynamic_cast<const Derived&>(b); // { dg-error \"reference .dynamic_cast. failed\" }\n+// { dg-message \"dynamic type .const Base. of its operand does not have a base class of type .Derived.\" \"\" { target *-*-* } .-1 }\n+}\n+\n+auto test() {\n+    static constexpr Base b;\n+    constexpr auto res = cast(b);\n+    return res;\n+}"}]}