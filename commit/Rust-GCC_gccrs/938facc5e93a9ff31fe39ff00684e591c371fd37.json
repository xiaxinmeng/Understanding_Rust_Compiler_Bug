{"sha": "938facc5e93a9ff31fe39ff00684e591c371fd37", "node_id": "C_kwDOANBUbNoAKDkzOGZhY2M1ZTkzYTlmZjMxZmUzOWZmMDA2ODRlNTkxYzM3MWZkMzc", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-08-26T12:09:24Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-01-31T13:16:49Z"}, "message": "gccrs: lint: Do not emit unused warnings for public items\n\ngcc/rust/ChangeLog:\n\n\t* checks/lints/rust-lint-scan-deadcode.h: Do not report public items\n\tas dead code.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/issue-1031.rs: Remove extraneous dead code warnings.\n\t* rust/compile/issue-1289.rs: Likewise.\n\t* rust/compile/test_mod.rs: Likewise.\n\t* rust/compile/torture/raw_identifiers.rs: Likewise.\n\t* rust/compile/torture/raw_identifiers_keywords.rs: Likewise.\n\t* rust/compile/privacy7.rs: New test.", "tree": {"sha": "932824796545492d7157a9551d950b984e26d3a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/932824796545492d7157a9551d950b984e26d3a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/938facc5e93a9ff31fe39ff00684e591c371fd37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/938facc5e93a9ff31fe39ff00684e591c371fd37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/938facc5e93a9ff31fe39ff00684e591c371fd37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/938facc5e93a9ff31fe39ff00684e591c371fd37/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a3a352091b74916c5ad3177e0df9d624d746cac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a3a352091b74916c5ad3177e0df9d624d746cac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a3a352091b74916c5ad3177e0df9d624d746cac"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "63a308949c3a03c0754c3ea712fc61ae7517ec60", "filename": "gcc/rust/checks/lints/rust-lint-scan-deadcode.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938facc5e93a9ff31fe39ff00684e591c371fd37/gcc%2Frust%2Fchecks%2Flints%2Frust-lint-scan-deadcode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938facc5e93a9ff31fe39ff00684e591c371fd37/gcc%2Frust%2Fchecks%2Flints%2Frust-lint-scan-deadcode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Flints%2Frust-lint-scan-deadcode.h?ref=938facc5e93a9ff31fe39ff00684e591c371fd37", "patch": "@@ -53,7 +53,7 @@ class ScanDeadcode : public MarkLiveBase\n   void visit (HIR::Function &function) override\n   {\n     HirId hirId = function.get_mappings ().get_hirid ();\n-    if (should_warn (hirId))\n+    if (should_warn (hirId) && !function.get_visibility ().is_public ())\n       {\n \tif (mappings->is_impl_item (hirId))\n \t  {\n@@ -78,7 +78,7 @@ class ScanDeadcode : public MarkLiveBase\n   void visit (HIR::StructStruct &stct) override\n   {\n     HirId hirId = stct.get_mappings ().get_hirid ();\n-    if (should_warn (hirId))\n+    if (should_warn (hirId) && !stct.get_visibility ().is_public ())\n       {\n \tbool name_starts_underscore = stct.get_identifier ().at (0) == '_';\n \tif (!name_starts_underscore)\n@@ -92,7 +92,8 @@ class ScanDeadcode : public MarkLiveBase\n \tfor (auto &field : stct.get_fields ())\n \t  {\n \t    HirId field_hir_id = field.get_mappings ().get_hirid ();\n-\t    if (should_warn (field_hir_id))\n+\t    if (should_warn (field_hir_id)\n+\t\t&& !field.get_visibility ().is_public ())\n \t      {\n \t\trust_warning_at (field.get_locus (), 0,\n \t\t\t\t \"field is never read: %<%s%>\",\n@@ -106,7 +107,7 @@ class ScanDeadcode : public MarkLiveBase\n   {\n     // only warn tuple struct unconstructed, and ignoring unused field\n     HirId hirId = stct.get_mappings ().get_hirid ();\n-    if (should_warn (hirId))\n+    if (should_warn (hirId) && !stct.get_visibility ().is_public ())\n       {\n \trust_warning_at (stct.get_locus (), 0,\n \t\t\t \"struct is never constructed: %<%s%>\","}, {"sha": "5ba8f7a267b22fbbb44c880fbc2b282cbcb55faa", "filename": "gcc/testsuite/rust/compile/issue-1031.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938facc5e93a9ff31fe39ff00684e591c371fd37/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1031.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938facc5e93a9ff31fe39ff00684e591c371fd37/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1031.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1031.rs?ref=938facc5e93a9ff31fe39ff00684e591c371fd37", "patch": "@@ -6,12 +6,10 @@ extern \"rust-intrinsic\" {\n #[lang = \"const_ptr\"]\n impl<T> *const T {\n     pub const unsafe fn offset(self, count: isize) -> *const T {\n-        // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n         unsafe { offset(self, count) }\n     }\n \n     pub const unsafe fn add(self, count: usize) -> Self {\n-        // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n         unsafe { self.offset(count as isize) }\n     }\n }"}, {"sha": "eb41af0a75b7bb7f1ccd76dd57f8503892c85a64", "filename": "gcc/testsuite/rust/compile/issue-1289.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938facc5e93a9ff31fe39ff00684e591c371fd37/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1289.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938facc5e93a9ff31fe39ff00684e591c371fd37/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1289.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1289.rs?ref=938facc5e93a9ff31fe39ff00684e591c371fd37", "patch": "@@ -23,12 +23,10 @@ impl<T> *mut T {\n #[lang = \"const_ptr\"]\n impl<T> *const T {\n     pub const unsafe fn offset(self, count: isize) -> *mut T {\n-        // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n         unsafe { intrinsics::offset(self, count) as *mut T }\n     }\n \n     pub const unsafe fn add(self, count: usize) -> Self {\n-        // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n         unsafe { self.offset(count as isize) }\n     }\n }"}, {"sha": "00fa0ef8f11c74fa69465eb93bcfa6ec655b2462", "filename": "gcc/testsuite/rust/compile/privacy7.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938facc5e93a9ff31fe39ff00684e591c371fd37/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy7.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938facc5e93a9ff31fe39ff00684e591c371fd37/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy7.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy7.rs?ref=938facc5e93a9ff31fe39ff00684e591c371fd37", "patch": "@@ -0,0 +1,9 @@\n+pub struct Foo(i8);\n+struct Bar(pub i8); // { dg-warning \"struct is never constructed: .Bar.\" }\n+pub struct Baz {\n+    a: i32, // { dg-warning \"field is never read: .a.\" }\n+    pub b: i32,\n+}\n+\n+pub fn foo() {}\n+fn bar() {} // { dg-warning \"function is never used: .bar.\" }"}, {"sha": "6e9c19b3fa4ad461ff68ec42f0c62679cc92a589", "filename": "gcc/testsuite/rust/compile/test_mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938facc5e93a9ff31fe39ff00684e591c371fd37/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftest_mod.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938facc5e93a9ff31fe39ff00684e591c371fd37/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftest_mod.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftest_mod.rs?ref=938facc5e93a9ff31fe39ff00684e591c371fd37", "patch": "@@ -3,4 +3,3 @@\n //! foo bar baz cake pizza carbs\n \n pub struct Test(pub i32);\n-// { dg-warning \"struct is never constructed\" \"\" { target *-*-* } .-1 }"}, {"sha": "7e6cd916244462c640da4d16ab8e1404c17d2eda", "filename": "gcc/testsuite/rust/compile/torture/raw_identifiers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938facc5e93a9ff31fe39ff00684e591c371fd37/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fraw_identifiers.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938facc5e93a9ff31fe39ff00684e591c371fd37/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fraw_identifiers.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fraw_identifiers.rs?ref=938facc5e93a9ff31fe39ff00684e591c371fd37", "patch": "@@ -1,3 +1,3 @@\n-pub fn square(num: i32) -> i32 { /* { dg-warning \"used\" } */\n+pub fn square(num: i32) -> i32 {\n     r#num * num\n-}\n\\ No newline at end of file\n+}"}, {"sha": "3a15223631fff26701703c20afbc469786c01eb9", "filename": "gcc/testsuite/rust/compile/torture/raw_identifiers_keywords.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938facc5e93a9ff31fe39ff00684e591c371fd37/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fraw_identifiers_keywords.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938facc5e93a9ff31fe39ff00684e591c371fd37/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fraw_identifiers_keywords.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fraw_identifiers_keywords.rs?ref=938facc5e93a9ff31fe39ff00684e591c371fd37", "patch": "@@ -1,3 +1,3 @@\n-pub fn plus(r#break: i32, r#unsafe: i32) -> i32 { /* { dg-warning \"used\" } */\n+pub fn plus(r#break: i32, r#unsafe: i32) -> i32 {\n     r#break + r#unsafe\n-}\n\\ No newline at end of file\n+}"}]}