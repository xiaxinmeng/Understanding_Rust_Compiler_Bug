{"sha": "0988829edde6f7357e875ddd2b6ab09de44bea3a", "node_id": "C_kwDOANBUbNoAKDA5ODg4MjllZGRlNmY3MzU3ZTg3NWRkZDJiNmFiMDlkZTQ0YmVhM2E", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2021-07-27T13:57:04Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-09-22T15:01:51Z"}, "message": "[Ada] Simplify contract of Ada.Strings.Fixed.Trim for proof\n\ngcc/ada/\n\n\t* libgnat/a-strfix.ads (Trim): Simplify contracts.\n\t* libgnat/a-strfix.adb (Trim): Remove white space.", "tree": {"sha": "71a100825a37fece2e32835989ff44a35384fcd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71a100825a37fece2e32835989ff44a35384fcd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0988829edde6f7357e875ddd2b6ab09de44bea3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0988829edde6f7357e875ddd2b6ab09de44bea3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0988829edde6f7357e875ddd2b6ab09de44bea3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0988829edde6f7357e875ddd2b6ab09de44bea3a/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfe93fd5f5a5e271d7f3b03984f837d8597ee3bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfe93fd5f5a5e271d7f3b03984f837d8597ee3bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfe93fd5f5a5e271d7f3b03984f837d8597ee3bf"}], "stats": {"total": 67, "additions": 17, "deletions": 50}, "files": [{"sha": "e6f882f2799c535396ca5fbba9ccb72b986684e9", "filename": "gcc/ada/libgnat/a-strfix.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0988829edde6f7357e875ddd2b6ab09de44bea3a/gcc%2Fada%2Flibgnat%2Fa-strfix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0988829edde6f7357e875ddd2b6ab09de44bea3a/gcc%2Fada%2Flibgnat%2Fa-strfix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-strfix.adb?ref=0988829edde6f7357e875ddd2b6ab09de44bea3a", "patch": "@@ -865,7 +865,7 @@ package body Ada.Strings.Fixed with SPARK_Mode is\n       High, Low : Integer;\n \n    begin\n-      Low := Index (Source, Set => Left, Test  => Outside, Going => Forward);\n+      Low := Index (Source, Set => Left, Test => Outside, Going => Forward);\n \n       --  Case where source comprises only characters in Left\n "}, {"sha": "3555c7d8e1b0f02bf064fa8a80e68f90af28f340", "filename": "gcc/ada/libgnat/a-strfix.ads", "status": "modified", "additions": 16, "deletions": 49, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0988829edde6f7357e875ddd2b6ab09de44bea3a/gcc%2Fada%2Flibgnat%2Fa-strfix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0988829edde6f7357e875ddd2b6ab09de44bea3a/gcc%2Fada%2Flibgnat%2Fa-strfix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-strfix.ads?ref=0988829edde6f7357e875ddd2b6ab09de44bea3a", "patch": "@@ -1133,31 +1133,15 @@ package Ada.Strings.Fixed with SPARK_Mode is\n             --  Otherwise, the returned string is a slice of Source\n \n             else\n-              (for some Low in Source'Range =>\n-                 (for some High in Source'Range =>\n-\n-                    --  Trim returns the slice of Source between Low and High\n-\n-                    Trim'Result = Source (Low .. High)\n-\n-                      --  Values of Low and High and the characters at their\n-                      --  position depend on Side.\n-\n-                      and then\n-                        (if Side = Left then High = Source'Last\n-                         else Source (High) /= ' ')\n-                      and then\n-                        (if Side = Right then Low = Source'First\n-                         else Source (Low) /= ' ')\n-\n-                      --  All characters outside range Low .. High are\n-                      --  Space characters.\n-\n-                      and then\n-                        (for all J in Source'Range =>\n-                           (if J < Low then Source (J) = ' ')\n-                              and then\n-                                (if J > High then Source (J) = ' '))))),\n+              (declare\n+                 Low  : constant Positive :=\n+                   (if Side = Right then Source'First\n+                    else Index_Non_Blank (Source, Forward));\n+                 High : constant Positive :=\n+                   (if Side = Left then Source'Last\n+                    else Index_Non_Blank (Source, Backward));\n+               begin\n+                 Trim'Result = Source (Low .. High))),\n      Global => null;\n    --  Returns the string obtained by removing from Source all leading Space\n    --  characters (if Side = Left), all trailing Space characters (if\n@@ -1203,30 +1187,13 @@ package Ada.Strings.Fixed with SPARK_Mode is\n         --  Otherwise, the returned string is a slice of Source\n \n         else\n-          (for some Low in Source'Range =>\n-             (for some High in Source'Range =>\n-\n-                --  Trim returns the slice of Source between Low and High\n-\n-                Trim'Result = Source (Low .. High)\n-\n-                  --  Characters at the bounds of the returned string are\n-                  --  not contained in Left or Right.\n-\n-                  and then not Ada.Strings.Maps.Is_In (Source (Low), Left)\n-                  and then not Ada.Strings.Maps.Is_In (Source (High), Right)\n-\n-                  --  All characters before Low are contained in Left.\n-                  --  All characters after High are contained in Right.\n-\n-                  and then\n-                    (for all K in Source'Range =>\n-                       (if K < Low\n-                        then\n-                          Ada.Strings.Maps.Is_In (Source (K), Left))\n-                            and then\n-                              (if K > High then\n-                               Ada.Strings.Maps.Is_In (Source (K), Right)))))),\n+           (declare\n+              Low  : constant Positive :=\n+                Index (Source, Left, Outside, Forward);\n+              High : constant Positive :=\n+                Index (Source, Right, Outside, Backward);\n+            begin\n+              Trim'Result = Source (Low .. High))),\n      Global => null;\n    --  Returns the string obtained by removing from Source all leading\n    --  characters in Left and all trailing characters in Right."}]}