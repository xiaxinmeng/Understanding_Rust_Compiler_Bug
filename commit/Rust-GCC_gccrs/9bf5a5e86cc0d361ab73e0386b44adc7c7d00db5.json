{"sha": "9bf5a5e86cc0d361ab73e0386b44adc7c7d00db5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJmNWE1ZTg2Y2MwZDM2MWFiNzNlMDM4NmI0NGFkYzdjN2QwMGRiNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-08-15T09:21:06Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-08-15T09:21:06Z"}, "message": "* ChangeLog: Remove gcc/ prefix from file names.\n\nFrom-SVN: r127509", "tree": {"sha": "07083ec416fffb6ad4fdc1f5a2342ea007227a43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07083ec416fffb6ad4fdc1f5a2342ea007227a43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bf5a5e86cc0d361ab73e0386b44adc7c7d00db5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf5a5e86cc0d361ab73e0386b44adc7c7d00db5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bf5a5e86cc0d361ab73e0386b44adc7c7d00db5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf5a5e86cc0d361ab73e0386b44adc7c7d00db5/comments", "author": null, "committer": null, "parents": [{"sha": "ba75df2bd35a7fa872e287f752b94f2169e4370c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba75df2bd35a7fa872e287f752b94f2169e4370c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba75df2bd35a7fa872e287f752b94f2169e4370c"}], "stats": {"total": 51, "additions": 25, "deletions": 26}, "files": [{"sha": "246cd5cbe1edb8a749aa323f884aa0942aa3c116", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf5a5e86cc0d361ab73e0386b44adc7c7d00db5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf5a5e86cc0d361ab73e0386b44adc7c7d00db5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bf5a5e86cc0d361ab73e0386b44adc7c7d00db5", "patch": "@@ -92,7 +92,7 @@\n \tCCCmode for LTU, GTU, LEU and GEU.\n \t(ix86_comparison_operator): Likewise.\n \t(ix86_carry_flag_operator): Carry flag is set if LTU or GTU in CCCmode.\n-\t* gcc/config/i386/i386.c (put_condition_code): Support CCCmode.\n+\t* config/i386/i386.c (put_condition_code): Support CCCmode.\n \t(ix86_cc_mode): Use CCCmode when testing for overflow of PLUS\n \tor MINUS expressions.\n \n@@ -1172,15 +1172,15 @@\n \n 2007-08-08  Samuel Thibault  <samuel.thibault@ens-lyon.org>\n \n-\t* gcc/config/i386/gnu.h (STARTFILE_SPEC): Use gcrt0.o in profile mode, add\n+\t* config/i386/gnu.h (STARTFILE_SPEC): Use gcrt0.o in profile mode, add\n \t-profile option, add pie support.\n \t(ENDFILE_SPEC): New spec.\n-\t* gcc/config/gnu.h (LIB_SPEC): Add -profile option.\n+\t* config/gnu.h (LIB_SPEC): Add -profile option.\n \n 2007-08-08  Samuel Thibault  <samuel.thibault@ens-lyon.org>\n \n-\t* gcc/config/i386/gnu.h (CPP_SPEC): Add -pthread option.\n-\t* gcc/config/gnu.h (LIB_SPEC): Likewise.\n+\t* config/i386/gnu.h (CPP_SPEC): Add -pthread option.\n+\t* config/gnu.h (LIB_SPEC): Likewise.\n \n 2007-08-07  Yaz Saito  <saito@google.com>\n \t    Ian Lance Taylor  <iant@google.com>\n@@ -1957,7 +1957,6 @@\n \n 2007-07-29  Mark Mitchell  <mark@codesourcery.com>\n \n-\tgcc/\n \t* config/m68k/lb1sf68.asm (FUNC): New macro.\n \t(__mulsi3): Use it.\n \t(__udivsi3): Likewise.\n@@ -4658,12 +4657,12 @@\n \n 2007-07-04  Rask Ingemann Lambertsen  <rask@sygehus.dk>\n \n-\t* config/gcc/v850/v850.c (expand_prologue): Make sure\n+\t* config/v850/v850.c (expand_prologue): Make sure\n \tGEN_INT() argument is sign extended rather than zero extended.\n \t(expand_epilogue): Likewise.\n \t(output_move_double): Delete.\n-\t* config/gcc/v850/v850-protos.h (output_move_double): Delete.\n-\t* config/gcc/v850/v850.md (movdi): Delete.\n+\t* config/v850/v850-protos.h (output_move_double): Delete.\n+\t* config/v850/v850.md (movdi): Delete.\n \t(*movdi_internal): Delete.\n \t(movdf): Delete.\n \t(*movdf_internal): Delete.\n@@ -5402,7 +5401,7 @@\n \t(scan_function): Likewise.\n \t(analyze_function): Likewise.\n  \t(static_execute): Likewise.\n-\t* gcc/ipa-reference.c (scan_for_static_refs): Likewise.\n+\t* ipa-reference.c (scan_for_static_refs): Likewise.\n \t(merge_callee_local_info): Likewise.\n \t(analyze_function): Use type safe memory macros.\n \t(static_execute): Likewise. Cast according to the coding conventions.\n@@ -6893,12 +6892,12 @@\n \n 2007-06-11  Rafael Avila de Espindola  <espindola@google.com>\n \n-\t* gcc/tree.c (signed_or_unsigned_type_for): New.\n+\t* tree.c (signed_or_unsigned_type_for): New.\n \t(unsigned_type_for): Use signed_or_unsigned_type_for.\n \t(signed_type_for): Use signed_or_unsigned_type_for.\n-\t* gcc/tree.h (signed_or_unsigned_type_for): New.\n+\t* tree.h (signed_or_unsigned_type_for): New.\n \t(get_signed_or_unsigned_type): Remove.\n-\t* gcc/fold-const.c (fold_negate_expr): Use signed_type_for instead of\n+\t* fold-const.c (fold_negate_expr): Use signed_type_for instead of\n \tlang_hooks.types.signed_type\n \t(size_diffop): Likewise.\n \t(all_ones_mask_p): Likewise.\n@@ -6912,35 +6911,35 @@\n \t(fold_ternary): Likewise.\n \t(operand_equal_for_comparison_p): Use signed_or_unsigned_type_for\n \tinstead of get_signed_or_unsigned_type.\n-\t* gcc/c-objc-common.h (LANG_HOOKS_SIGNED_TYPE): Remove.\n+\t* c-objc-common.h (LANG_HOOKS_SIGNED_TYPE): Remove.\n \t(LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE): Remove.\n-\t* gcc/expr.c (signed_or_unsigned_type_for): Use\n+\t* expr.c (signed_or_unsigned_type_for): Use\n \tsigned_or_unsigned_type_for instead of get_signed_or_unsigned_type.\n-\t* gcc/langhooks.c (get_signed_or_unsigned_type): Remove.\n+\t* langhooks.c (get_signed_or_unsigned_type): Remove.\n \t(lhd_signed_or_unsigned_type): Remove.\n-\t* gcc/langhooks.h (lang_hooks_for_types): Remove signed_type and\n+\t* langhooks.h (lang_hooks_for_types): Remove signed_type and\n \tsigned_or_unsigned_type.\n \t(lhd_signed_or_unsigned_type): Remove.\n-\t* gcc/expmed.c (make_tree): Use signed_type_for instead of\n+\t* expmed.c (make_tree): Use signed_type_for instead of\n \tlang_hooks.types.signed_type.\n-\t* gcc/c-common.c (same_scalar_type_ignoring_signedness): Use\n+\t* c-common.c (same_scalar_type_ignoring_signedness): Use\n \tc_common_signed_type instead of lang_hooks.types.signed_type.\n \t(c_common_unsigned_type): New.\n \t(c_common_signed_type): Just call c_common_signed_or_unsigned_type.\n \t(shorten_compare): Use c_common_unsigned_type instead of\n \tc_common_signed_or_unsigned_type.\n \t(c_common_nodes_and_builtins): Use c_common_unsigned_type instead of\n \tunsigned_type_for.\n-\t* gcc/convert.c (convert_to_integer): Use signed_type_for instead of\n+\t* convert.c (convert_to_integer): Use signed_type_for instead of\n \tlang_hooks.types.signed_type.\n-\t* gcc/langhooks-def.h (LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE): Remove.\n+\t* langhooks-def.h (LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE): Remove.\n \t(LANG_HOOK_FOR_TYPES_INITIALIZER): Remove LANG_HOOKS_SIGNED_TYPE and\n \tLANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE.\n-\t* gcc/c-format.c (check_format_types): Use c_common_unsigned_type\n+\t* c-format.c (check_format_types): Use c_common_unsigned_type\n \tinstead of unsigned_type_for.\n-\t* gcc/c-decl.c (groakdeclarator): Likewise.\n-\t* gcc/c-typeck.c (convert_for_assignment): Likewise.\n-\t* gcc/c-common.h (c_common_unsigned_type): New.\n+\t* c-decl.c (groakdeclarator): Likewise.\n+\t* c-typeck.c (convert_for_assignment): Likewise.\n+\t* c-common.h (c_common_unsigned_type): New.\n \n 2007-06-11  Uros Bizjak  <ubizjak@gmail.com>\n \n@@ -7656,7 +7655,7 @@\n 2007-06-04  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR c/32191\n-\t* gcc/c-common.c (c_define_builtins): Call targetm.init_builtins ()\n+\t* c-common.c (c_define_builtins): Call targetm.init_builtins ()\n \tbefore build_common_builtin_nodes ().\n \n 2007-06-04  Steve Ellcey  <sje@cup.hp.com>"}]}