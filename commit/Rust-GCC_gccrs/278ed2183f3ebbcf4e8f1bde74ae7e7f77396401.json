{"sha": "278ed2183f3ebbcf4e8f1bde74ae7e7f77396401", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc4ZWQyMTgzZjNlYmJjZjRlOGYxYmRlNzRhZTdlN2Y3NzM5NjQwMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-27T17:36:20Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-27T17:36:20Z"}, "message": "function.c (expand_function_end): Don't init arg_pointer_save_area.\n\n        * function.c (expand_function_end): Don't init arg_pointer_save_area.\n        (get_arg_pointer_save_area): New.  Create an init it here.\n        (fix_lexical_addr): Use it.\n        * function.h: Declare it.\n        * builtins.c (expand_builtin_setjmp_receiver): Use it.\n        * stmt.c (expand_nl_goto_receiver): Use it.\n\nFrom-SVN: r45200", "tree": {"sha": "6974cc8c80b55c205754b981c6f2050865b697e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6974cc8c80b55c205754b981c6f2050865b697e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/278ed2183f3ebbcf4e8f1bde74ae7e7f77396401", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/278ed2183f3ebbcf4e8f1bde74ae7e7f77396401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/278ed2183f3ebbcf4e8f1bde74ae7e7f77396401", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/278ed2183f3ebbcf4e8f1bde74ae7e7f77396401/comments", "author": null, "committer": null, "parents": [{"sha": "36d7136e9983a0c8f2d07b84a0b8cb16f8e9e9db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36d7136e9983a0c8f2d07b84a0b8cb16f8e9e9db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36d7136e9983a0c8f2d07b84a0b8cb16f8e9e9db"}], "stats": {"total": 92, "additions": 54, "deletions": 38}, "files": [{"sha": "2484f2fd9700d53851a89a91cda1cd836052283f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278ed2183f3ebbcf4e8f1bde74ae7e7f77396401/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278ed2183f3ebbcf4e8f1bde74ae7e7f77396401/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=278ed2183f3ebbcf4e8f1bde74ae7e7f77396401", "patch": "@@ -1,3 +1,12 @@\n+2001-08-27  Richard Henderson  <rth@redhat.com>\n+\n+\t* function.c (expand_function_end): Don't init arg_pointer_save_area.\n+\t(get_arg_pointer_save_area): New.  Create an init it here.\n+\t(fix_lexical_addr): Use it.\n+\t* function.h: Declare it.\n+\t* builtins.c (expand_builtin_setjmp_receiver): Use it.\n+\t* stmt.c (expand_nl_goto_receiver): Use it.\n+\n 2001-08-27  Richard Henderson  <rth@redhat.com>\n \n \t* final.c (final_scan_insn): Don't enter APP_ON mode for\n@@ -13,7 +22,7 @@\n \n 2001-08-25 Dan Nicolaescu  <dann@ics.uci.edu>\n   \n-        * ssa-ccp.c (ssa_const_prop): Free ssa_edges.\n+\t* ssa-ccp.c (ssa_const_prop): Free ssa_edges.\n \n 2001-08-27  Alan Modra  <amodra@bigpond.net.au>\n \n@@ -79,8 +88,8 @@ Sun Aug 26 20:25:44 2001  Denis Chertykov  <denisc@overta.ru>\n \n 2001-08-26  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/mips/mips.c (mips_function_value): Handle complex return\n-        values.\n+\t* config/mips/mips.c (mips_function_value): Handle complex return\n+\tvalues.\n \n 2001-08-25  Hans-Peter Nilsson  <hp@bitrange.com>\n "}, {"sha": "70ed30e118a5d6d975f234457c1c39960dd6eda0", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278ed2183f3ebbcf4e8f1bde74ae7e7f77396401/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278ed2183f3ebbcf4e8f1bde74ae7e7f77396401/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=278ed2183f3ebbcf4e8f1bde74ae7e7f77396401", "patch": "@@ -557,14 +557,9 @@ expand_builtin_setjmp_receiver (receiver_label)\n #endif\n \t{\n \t  /* Now restore our arg pointer from the address at which it\n-\t     was saved in our stack frame.\n-\t     If there hasn't be space allocated for it yet, make\n-\t     some now.  */\n-\t  if (arg_pointer_save_area == 0)\n-\t    arg_pointer_save_area\n-\t      = assign_stack_local (Pmode, GET_MODE_SIZE (Pmode), 0);\n+\t     was saved in our stack frame.  */\n \t  emit_move_insn (virtual_incoming_args_rtx,\n-\t\t\t  copy_to_reg (arg_pointer_save_area));\n+\t\t\t  copy_to_reg (get_arg_pointer_save_area (cfun)));\n \t}\n     }\n #endif"}, {"sha": "4c87e5814727ab14f6639a23c6f39e3e0316912d", "filename": "gcc/function.c", "status": "modified", "additions": 36, "deletions": 19, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278ed2183f3ebbcf4e8f1bde74ae7e7f77396401/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278ed2183f3ebbcf4e8f1bde74ae7e7f77396401/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=278ed2183f3ebbcf4e8f1bde74ae7e7f77396401", "patch": "@@ -5557,11 +5557,8 @@ fix_lexical_addr (addr, var)\n #ifdef NEED_SEPARATE_AP\n       rtx addr;\n \n-      if (fp->x_arg_pointer_save_area == 0)\n-\tfp->x_arg_pointer_save_area\n-\t  = assign_stack_local_1 (Pmode, GET_MODE_SIZE (Pmode), 0, fp);\n-\n-      addr = fix_lexical_addr (XEXP (fp->x_arg_pointer_save_area, 0), var);\n+      addr = get_arg_pointer_save_area (fp);\n+      addr = fix_lexical_addr (XEXP (addr, 0), var);\n       addr = memory_address (Pmode, addr);\n \n       base = gen_rtx_MEM (Pmode, addr);\n@@ -6703,20 +6700,6 @@ expand_function_end (filename, line, end_bindings)\n     }\n #endif\n \n-  /* Save the argument pointer if a save area was made for it.  */\n-  if (arg_pointer_save_area)\n-    {\n-      /* arg_pointer_save_area may not be a valid memory address, so we\n-\t have to check it and fix it if necessary.  */\n-      rtx seq;\n-      start_sequence ();\n-      emit_move_insn (validize_mem (arg_pointer_save_area),\n-\t\t      virtual_incoming_args_rtx);\n-      seq = gen_sequence ();\n-      end_sequence ();\n-      emit_insn_before (seq, tail_recursion_reentry);\n-    }\n-\n   /* Initialize any trampolines required by this function.  */\n   for (link = trampoline_list; link; link = TREE_CHAIN (link))\n     {\n@@ -7013,6 +6996,40 @@ expand_function_end (filename, line, end_bindings)\n      then you will lose.  */\n   expand_fixups (get_insns ());\n }\n+\n+rtx\n+get_arg_pointer_save_area (f)\n+     struct function *f;\n+{\n+  rtx ret = f->x_arg_pointer_save_area;\n+\n+  if (! ret)\n+    {\n+      rtx seq;\n+\n+      ret = assign_stack_local_1 (Pmode, GET_MODE_SIZE (Pmode), 0, f);\n+      f->x_arg_pointer_save_area = ret;\n+\n+      /* Save the arg pointer at the beginning of the function.  The \n+\t generated stack slot may not be a valid memory address, so w\n+\t have to check it and fix it if necessary.  */\n+      start_sequence ();\n+      emit_move_insn (validize_mem (ret), virtual_incoming_args_rtx);\n+      seq = gen_sequence ();\n+      end_sequence ();\n+\n+      if (f == cfun)\n+\t{\n+\t  push_topmost_sequence ();\n+\t  emit_insn_after (seq, get_insns ());\n+\t  pop_topmost_sequence ();\n+\t}\n+      else\n+\temit_insn_before (seq, f->x_tail_recursion_reentry);\n+    }\n+\n+  return ret;\n+}\n \f\n /* Extend a vector that records the INSN_UIDs of INSNS (either a\n    sequence or a single insn).  */"}, {"sha": "24c99ccb97c3f84d543440a2b8c0b72897b7425b", "filename": "gcc/function.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278ed2183f3ebbcf4e8f1bde74ae7e7f77396401/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278ed2183f3ebbcf4e8f1bde74ae7e7f77396401/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=278ed2183f3ebbcf4e8f1bde74ae7e7f77396401", "patch": "@@ -609,6 +609,8 @@ extern void clobber_return_register\tPARAMS ((void));\n extern void use_return_register\t\tPARAMS ((void));\n #endif\n \n+extern rtx get_arg_pointer_save_area\tPARAMS ((struct function *));\n+\n extern void init_virtual_regs\t\tPARAMS ((struct emit_status *));\n \n /* Called once, at initialization, to initialize function.c.  */"}, {"sha": "123c9d3c2b78cfbc71a2aa6b176c0db2a0b58898", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278ed2183f3ebbcf4e8f1bde74ae7e7f77396401/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278ed2183f3ebbcf4e8f1bde74ae7e7f77396401/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=278ed2183f3ebbcf4e8f1bde74ae7e7f77396401", "patch": "@@ -3490,16 +3490,9 @@ expand_nl_goto_receiver ()\n #endif\n \t{\n \t  /* Now restore our arg pointer from the address at which it\n-\t     was saved in our stack frame.\n-\t     If there hasn't be space allocated for it yet, make\n-\t     some now.  */\n-\t  if (arg_pointer_save_area == 0)\n-\t    arg_pointer_save_area\n-\t      = assign_stack_local (Pmode, GET_MODE_SIZE (Pmode), 0);\n+\t     was saved in our stack frame.  */\n \t  emit_move_insn (virtual_incoming_args_rtx,\n-\t\t\t  /* We need a pseudo here, or else\n-\t\t\t     instantiate_virtual_regs_1 complains.  */\n-\t\t\t  copy_to_reg (arg_pointer_save_area));\n+\t\t\t  copy_to_reg (get_arg_pointer_save_area (cfun)));\n \t}\n     }\n #endif"}]}