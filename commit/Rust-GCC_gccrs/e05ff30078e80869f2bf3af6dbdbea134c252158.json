{"sha": "e05ff30078e80869f2bf3af6dbdbea134c252158", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA1ZmYzMDA3OGU4MDg2OWYyYmYzYWY2ZGJkYmVhMTM0YzI1MjE1OA==", "commit": {"author": {"name": "Mike Crowe", "email": "mac@mcrowe.com", "date": "2020-09-11T13:25:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-09-11T13:28:50Z"}, "message": "libstdc++: Avoid rounding errors on custom clocks in condition_variable\n\nThe fix for PR68519 in 83fd5e73b3c16296e0d7ba54f6c547e01c7eae7b only\napplied to condition_variable::wait_for. This problem can also apply to\ncondition_variable::wait_until but only if the custom clock is using a\nmore recent epoch so that a small enough delta can be calculated. let's\nuse the newly-added chrono::__detail::ceil to fix this and also make use\nof that function to simplify the previous wait_for fixes.\n\nAlso, simplify the existing test case for PR68519 a little and make its\nvariables local so we can add a new test case for the above problem.\nUnfortunately, the test would have only started failing if sufficient\ntime has passed since the chrono::steady_clock epoch had passed anyway,\nbut it's better than nothing.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/condition_variable (condition_variable::wait_until):\n\tConvert delta to steady_clock duration before adding to current\n\tsteady_clock time to avoid rounding errors described in PR68519.\n\t(condition_variable::wait_for): Simplify calculation of absolute\n\ttime by using chrono::__detail::ceil in both overloads.\n\t* testsuite/30_threads/condition_variable/members/68519.cc:\n\t(test_wait_for): Renamed from test01. Replace unassigned val\n\tvariable with constant false. Reduce scope of mx and cv\n\tvariables to just test_wait_for function.\n\t(test_wait_until): Add new test case.", "tree": {"sha": "6c76570dc68fb584ed2a54c7d05007fda53b4347", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c76570dc68fb584ed2a54c7d05007fda53b4347"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e05ff30078e80869f2bf3af6dbdbea134c252158", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e05ff30078e80869f2bf3af6dbdbea134c252158", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e05ff30078e80869f2bf3af6dbdbea134c252158", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e05ff30078e80869f2bf3af6dbdbea134c252158/comments", "author": {"login": "mikecrowe", "id": 93615, "node_id": "MDQ6VXNlcjkzNjE1", "avatar_url": "https://avatars.githubusercontent.com/u/93615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikecrowe", "html_url": "https://github.com/mikecrowe", "followers_url": "https://api.github.com/users/mikecrowe/followers", "following_url": "https://api.github.com/users/mikecrowe/following{/other_user}", "gists_url": "https://api.github.com/users/mikecrowe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikecrowe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikecrowe/subscriptions", "organizations_url": "https://api.github.com/users/mikecrowe/orgs", "repos_url": "https://api.github.com/users/mikecrowe/repos", "events_url": "https://api.github.com/users/mikecrowe/events{/privacy}", "received_events_url": "https://api.github.com/users/mikecrowe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9ddb696a289cc48d24d3d23c0b324cb88de9573", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9ddb696a289cc48d24d3d23c0b324cb88de9573", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9ddb696a289cc48d24d3d23c0b324cb88de9573"}], "stats": {"total": 79, "additions": 63, "deletions": 16}, "files": [{"sha": "1abec546320bde8209419527e1e2d8a3833d55ac", "filename": "libstdc++-v3/include/std/condition_variable", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e05ff30078e80869f2bf3af6dbdbea134c252158/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e05ff30078e80869f2bf3af6dbdbea134c252158/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable?ref=e05ff30078e80869f2bf3af6dbdbea134c252158", "patch": "@@ -133,10 +133,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus > 201703L\n \tstatic_assert(chrono::is_clock_v<_Clock>);\n #endif\n+\tusing __s_dur = typename __clock_t::duration;\n \tconst typename _Clock::time_point __c_entry = _Clock::now();\n \tconst __clock_t::time_point __s_entry = __clock_t::now();\n \tconst auto __delta = __atime - __c_entry;\n-\tconst auto __s_atime = __s_entry + __delta;\n+\tconst auto __s_atime = __s_entry +\n+\t  chrono::__detail::ceil<__s_dur>(__delta);\n \n \tif (__wait_until_impl(__lock, __s_atime) == cv_status::no_timeout)\n \t  return cv_status::no_timeout;\n@@ -166,10 +168,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       const chrono::duration<_Rep, _Period>& __rtime)\n       {\n \tusing __dur = typename steady_clock::duration;\n-\tauto __reltime = chrono::duration_cast<__dur>(__rtime);\n-\tif (__reltime < __rtime)\n-\t  ++__reltime;\n-\treturn wait_until(__lock, steady_clock::now() + __reltime);\n+\treturn wait_until(__lock,\n+\t\t\t  steady_clock::now() +\n+\t\t\t  chrono::__detail::ceil<__dur>(__rtime));\n       }\n \n     template<typename _Rep, typename _Period, typename _Predicate>\n@@ -179,10 +180,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       _Predicate __p)\n       {\n \tusing __dur = typename steady_clock::duration;\n-\tauto __reltime = chrono::duration_cast<__dur>(__rtime);\n-\tif (__reltime < __rtime)\n-\t  ++__reltime;\n-\treturn wait_until(__lock, steady_clock::now() + __reltime,\n+\treturn wait_until(__lock,\n+\t\t\t  steady_clock::now() +\n+\t\t\t  chrono::__detail::ceil<__dur>(__rtime),\n \t\t\t  std::move(__p));\n       }\n "}, {"sha": "c86ca2ccdbfc0c9a6e1cc09cc050ba43fd6cff7e", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/members/68519.cc", "status": "modified", "additions": 54, "deletions": 7, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e05ff30078e80869f2bf3af6dbdbea134c252158/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F68519.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e05ff30078e80869f2bf3af6dbdbea134c252158/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F68519.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F68519.cc?ref=e05ff30078e80869f2bf3af6dbdbea134c252158", "patch": "@@ -25,25 +25,72 @@\n \n // PR libstdc++/68519\n \n-bool val = false;\n-std::mutex mx;\n-std::condition_variable cv;\n-\n void\n-test01()\n+test_wait_for()\n {\n+  std::mutex mx;\n+  std::condition_variable cv;\n+\n   for (int i = 0; i < 3; ++i)\n   {\n     std::unique_lock<std::mutex> l(mx);\n     auto start = std::chrono::system_clock::now();\n-    cv.wait_for(l, std::chrono::duration<float>(1), [] { return val; });\n+    cv.wait_for(l, std::chrono::duration<float>(1), [] { return false; });\n     auto t = std::chrono::system_clock::now();\n     VERIFY( (t - start) >= std::chrono::seconds(1) );\n   }\n }\n \n+// In order to ensure that the delta calculated in the arbitrary clock overload\n+// of condition_variable::wait_until fits accurately in a float, but the result\n+// of adding it to steady_clock with a float duration does not, this clock\n+// needs to use a more recent epoch.\n+struct recent_epoch_float_clock\n+{\n+  using rep = std::chrono::duration<float>::rep;\n+  using period = std::chrono::duration<float>::period;\n+  using time_point = std::chrono::time_point<recent_epoch_float_clock,\n+    std::chrono::duration<float>>;\n+  static constexpr bool is_steady = true;\n+\n+  static const std::chrono::steady_clock::time_point epoch;\n+\n+  static time_point now()\n+  {\n+    const auto steady = std::chrono::steady_clock::now();\n+    return time_point{steady - epoch};\n+  }\n+};\n+\n+const std::chrono::steady_clock::time_point recent_epoch_float_clock::epoch =\n+  std::chrono::steady_clock::now();\n+\n+void\n+test_wait_until()\n+{\n+  using clock = recent_epoch_float_clock;\n+\n+  std::mutex mx;\n+  std::condition_variable cv;\n+\n+  for (int i = 0; i < 3; ++i)\n+  {\n+    std::unique_lock<std::mutex> l(mx);\n+    const auto start = clock::now();\n+    const auto wait_time = start + std::chrono::duration<float>{1.0};\n+\n+    // In theory we could get a spurious wakeup, but in practice we won't.\n+    const auto result = cv.wait_until(l, wait_time);\n+\n+    VERIFY( result == std::cv_status::timeout );\n+    const auto elapsed = clock::now() - start;\n+    VERIFY( elapsed >= std::chrono::seconds(1) );\n+  }\n+}\n+\n int\n main()\n {\n-  test01();\n+  test_wait_for();\n+  test_wait_until();\n }"}]}