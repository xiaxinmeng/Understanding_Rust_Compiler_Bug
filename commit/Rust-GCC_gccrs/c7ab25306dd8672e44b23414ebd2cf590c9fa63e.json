{"sha": "c7ab25306dd8672e44b23414ebd2cf590c9fa63e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdhYjI1MzA2ZGQ4NjcyZTQ0YjIzNDE0ZWJkMmNmNTkwYzlmYTYzZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2013-01-11T10:20:02Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-01-11T10:20:02Z"}, "message": "re PR tree-optimization/44061 (Warns about out-of-bounds array access inside __builtin_constant_p guarded section)\n\n2012-01-11  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/44061\n\t* tree-vrp.c (extract_range_basic): Compute zero as\n\tvalue-range for __builtin_constant_p of function parameters.\n\n\t* gcc.dg/pr44061.c: New testcase.\n\nFrom-SVN: r195103", "tree": {"sha": "cf7a483327f831613f65e779338a6b9783f8fd9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf7a483327f831613f65e779338a6b9783f8fd9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7ab25306dd8672e44b23414ebd2cf590c9fa63e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7ab25306dd8672e44b23414ebd2cf590c9fa63e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7ab25306dd8672e44b23414ebd2cf590c9fa63e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7ab25306dd8672e44b23414ebd2cf590c9fa63e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8549adbd32fa9fdcb30e70cc3ff9cd9875e22d34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8549adbd32fa9fdcb30e70cc3ff9cd9875e22d34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8549adbd32fa9fdcb30e70cc3ff9cd9875e22d34"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "9cbce45312b8234f321fe20940271b0f1ea47e73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ab25306dd8672e44b23414ebd2cf590c9fa63e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ab25306dd8672e44b23414ebd2cf590c9fa63e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7ab25306dd8672e44b23414ebd2cf590c9fa63e", "patch": "@@ -1,3 +1,9 @@\n+2012-01-11  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/44061\n+\t* tree-vrp.c (extract_range_basic): Compute zero as\n+\tvalue-range for __builtin_constant_p of function parameters.\n+\n 2013-01-10  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tUpdate copyright years"}, {"sha": "df0378f1d123a834de99021781c097a0b76f8a29", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ab25306dd8672e44b23414ebd2cf590c9fa63e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ab25306dd8672e44b23414ebd2cf590c9fa63e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7ab25306dd8672e44b23414ebd2cf590c9fa63e", "patch": "@@ -1,3 +1,8 @@\n+2012-01-11  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/44061\n+\t* gcc.dg/pr44061.c: New testcase.\n+\n 2013-01-10  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tUpdate copyright years"}, {"sha": "60a4260ae94c3257e9c9b37a945b1f654809ea39", "filename": "gcc/testsuite/gcc.dg/pr44061.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ab25306dd8672e44b23414ebd2cf590c9fa63e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44061.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ab25306dd8672e44b23414ebd2cf590c9fa63e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44061.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44061.c?ref=c7ab25306dd8672e44b23414ebd2cf590c9fa63e", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wall\" } */\n+\n+int a[2];\n+int foo (int q)\n+{\n+  if (__builtin_constant_p (q))\n+    {\n+      if (q == 4)\n+\treturn a[4]; /* { dg-bogus \"array subscript is above array bounds\" } */\n+      else\n+\treturn a[0];\n+    }\n+  else\n+    return a[q];\n+}"}, {"sha": "e902f6eb33d9c72f16eb7ca6ff7fa6271aa96bc2", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ab25306dd8672e44b23414ebd2cf590c9fa63e/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ab25306dd8672e44b23414ebd2cf590c9fa63e/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=c7ab25306dd8672e44b23414ebd2cf590c9fa63e", "patch": "@@ -3565,8 +3565,20 @@ extract_range_basic (value_range_t *vr, gimple stmt)\n   bool sop = false;\n   tree type = gimple_expr_type (stmt);\n \n-  if (INTEGRAL_TYPE_P (type)\n-      && gimple_stmt_nonnegative_warnv_p (stmt, &sop))\n+  /* If the call is __builtin_constant_p and the argument is a\n+     function parameter resolve it to false.  This avoids bogus\n+     array bound warnings.\n+     ???  We could do this as early as inlining is finished.  */\n+  if (gimple_call_builtin_p (stmt, BUILT_IN_CONSTANT_P))\n+    {\n+      tree arg = gimple_call_arg (stmt, 0);\n+      if (TREE_CODE (arg) == SSA_NAME\n+\t  && SSA_NAME_IS_DEFAULT_DEF (arg)\n+\t  && TREE_CODE (SSA_NAME_VAR (arg)) == PARM_DECL)\n+\tset_value_range_to_null (vr, type);\n+    }\n+  else if (INTEGRAL_TYPE_P (type)\n+\t   && gimple_stmt_nonnegative_warnv_p (stmt, &sop))\n     set_value_range_to_nonnegative (vr, type,\n \t\t\t\t    sop || stmt_overflow_infinity (stmt));\n   else if (vrp_stmt_computes_nonzero (stmt, &sop)"}]}