{"sha": "5d59eef2697a46611385b025252447b6117578b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ1OWVlZjI2OTdhNDY2MTEzODViMDI1MjUyNDQ3YjYxMTc1NzhiNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T10:42:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T10:42:45Z"}, "message": "[multiple changes]\n\n2011-08-29  Tristan Gingold  <gingold@adacore.com>\n\n\t* a-exexpr.adb, a-except-2005.ads (Jmpbuf_Address): Move to a-exexpr.adb\n\t(To_Jmpbuf_Address): Ditto\n\t(builtin_longjmp): Ditto\n\n2011-08-29  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_res.adb: Minor reformatting.\n\n2011-08-29  Vincent Celier  <celier@adacore.com>\n\n\t* make.adb (Gnatmake): Move special processing for VM targets after the\n\tcall to Get_Target_Parameters.\n\n2011-08-29  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch12.adb, par-ch12.adb: Minor reformatting.\n\nFrom-SVN: r178197", "tree": {"sha": "ea12457ad334280f40506946d26b8a0deb438344", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea12457ad334280f40506946d26b8a0deb438344"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d59eef2697a46611385b025252447b6117578b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d59eef2697a46611385b025252447b6117578b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d59eef2697a46611385b025252447b6117578b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d59eef2697a46611385b025252447b6117578b6/comments", "author": null, "committer": null, "parents": [{"sha": "949a18ccb2de8ef2b73b7fc918d31d40e8b50826", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/949a18ccb2de8ef2b73b7fc918d31d40e8b50826", "html_url": "https://github.com/Rust-GCC/gccrs/commit/949a18ccb2de8ef2b73b7fc918d31d40e8b50826"}], "stats": {"total": 136, "additions": 75, "deletions": 61}, "files": [{"sha": "38c160570e91df6bb00a08abfb56747e252403e1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d59eef2697a46611385b025252447b6117578b6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d59eef2697a46611385b025252447b6117578b6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5d59eef2697a46611385b025252447b6117578b6", "patch": "@@ -1,3 +1,22 @@\n+2011-08-29  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* a-exexpr.adb, a-except-2005.ads (Jmpbuf_Address): Move to a-exexpr.adb\n+\t(To_Jmpbuf_Address): Ditto\n+\t(builtin_longjmp): Ditto\n+\n+2011-08-29  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_res.adb: Minor reformatting.\n+\n+2011-08-29  Vincent Celier  <celier@adacore.com>\n+\n+\t* make.adb (Gnatmake): Move special processing for VM targets after the\n+\tcall to Get_Target_Parameters.\n+\n+2011-08-29  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch12.adb, par-ch12.adb: Minor reformatting.\n+\n 2011-08-29  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_res.adb (Resolve_Allocator): Implement Ada2012-B052. Detect cases"}, {"sha": "f4cdebb47de079d240139c83eaddf74c3f1f4b1e", "filename": "gcc/ada/a-except-2005.ads", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d59eef2697a46611385b025252447b6117578b6/gcc%2Fada%2Fa-except-2005.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d59eef2697a46611385b025252447b6117578b6/gcc%2Fada%2Fa-except-2005.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.ads?ref=5d59eef2697a46611385b025252447b6117578b6", "patch": "@@ -50,8 +50,6 @@ with System.Parameters;\n with System.Standard_Library;\n with System.Traceback_Entries;\n \n-with Ada.Unchecked_Conversion;\n-\n package Ada.Exceptions is\n    pragma Warnings (Off);\n    pragma Preelaborate_05;\n@@ -230,16 +228,13 @@ private\n    --  system to return here rather than to the original location.\n \n    procedure Raise_From_Controlled_Operation\n-     (X          : Ada.Exceptions.Exception_Occurrence;\n-      From_Abort : Boolean);\n+     (X : Ada.Exceptions.Exception_Occurrence);\n    pragma No_Return (Raise_From_Controlled_Operation);\n    pragma Export\n      (Ada, Raise_From_Controlled_Operation,\n            \"__gnat_raise_from_controlled_operation\");\n    --  Raise Program_Error, providing information about X (an exception raised\n-   --  during a controlled operation) in the exception message. However, if the\n-   --  finalization was triggered by abort, keep aborting instead of raising\n-   --  Program_Error.\n+   --  during a controlled operation) in the exception message.\n \n    procedure Reraise_Occurrence_Always (X : Exception_Occurrence);\n    pragma No_Return (Reraise_Occurrence_Always);\n@@ -359,18 +354,4 @@ private\n      Tracebacks       => (others => TBE.Null_TB_Entry),\n      Private_Data     => System.Null_Address);\n \n-   --  Common binding to __builtin_longjmp for sjlj variants.\n-\n-   --  The builtin expects a pointer type for the jmpbuf address argument, and\n-   --  System.Address doesn't work because this is really an integer type.\n-\n-   type Jmpbuf_Address is access Character;\n-\n-   function To_Jmpbuf_Address is new\n-     Ada.Unchecked_Conversion (System.Address, Jmpbuf_Address);\n-\n-   procedure builtin_longjmp (buffer : Jmpbuf_Address; Flag : Integer);\n-   pragma No_Return (builtin_longjmp);\n-   pragma Import (Intrinsic, builtin_longjmp, \"__builtin_longjmp\");\n-\n end Ada.Exceptions;"}, {"sha": "b58ca23b0f91db54b8df5eaedd429a97ac4531ab", "filename": "gcc/ada/a-exexpr.adb", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d59eef2697a46611385b025252447b6117578b6/gcc%2Fada%2Fa-exexpr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d59eef2697a46611385b025252447b6117578b6/gcc%2Fada%2Fa-exexpr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exexpr.adb?ref=5d59eef2697a46611385b025252447b6117578b6", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,13 +34,29 @@\n \n with System.Storage_Elements;  use System.Storage_Elements;\n \n+with Ada.Unchecked_Conversion;\n+\n pragma Warnings (Off);\n --  Since several constructs give warnings in 3.14a1, including unreferenced\n --  variables and pragma Unreferenced itself.\n \n separate (Ada.Exceptions)\n package body Exception_Propagation is\n \n+   --  Common binding to __builtin_longjmp for sjlj variants.\n+\n+   --  The builtin expects a pointer type for the jmpbuf address argument, and\n+   --  System.Address doesn't work because this is really an integer type.\n+\n+   type Jmpbuf_Address is access Character;\n+\n+   function To_Jmpbuf_Address is new\n+     Ada.Unchecked_Conversion (System.Address, Jmpbuf_Address);\n+\n+   procedure builtin_longjmp (buffer : Jmpbuf_Address; Flag : Integer);\n+   pragma No_Return (builtin_longjmp);\n+   pragma Import (Intrinsic, builtin_longjmp, \"__builtin_longjmp\");\n+\n    ---------------------\n    -- Setup_Exception --\n    ---------------------"}, {"sha": "d64975d21a31423eaba5ecb32f7d14b1fad2ff99", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d59eef2697a46611385b025252447b6117578b6/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d59eef2697a46611385b025252447b6117578b6/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=5d59eef2697a46611385b025252447b6117578b6", "patch": "@@ -5931,29 +5931,6 @@ package body Make is\n            (\"nothing to do for a main project that is externally built\");\n       end if;\n \n-      --  Special processing for VM targets\n-\n-      if Targparm.VM_Target /= No_VM then\n-\n-         --  Set proper processing commands\n-\n-         case Targparm.VM_Target is\n-            when Targparm.JVM_Target =>\n-\n-               --  Do not check for an object file (\".o\") when compiling to\n-               --  JVM machine since \".class\" files are generated instead.\n-\n-               Check_Object_Consistency := False;\n-               Gcc := new String'(\"jvm-gnatcompile\");\n-\n-            when Targparm.CLI_Target =>\n-               Gcc := new String'(\"dotnet-gnatcompile\");\n-\n-            when Targparm.No_VM =>\n-               raise Program_Error;\n-         end case;\n-      end if;\n-\n       --  If no project file is used, we just put the gcc switches\n       --  from the command line in the Gcc_Switches table.\n \n@@ -6125,6 +6102,29 @@ package body Make is\n                   Make_Failed (\"*** make failed.\");\n             end;\n \n+            --  Special processing for VM targets\n+\n+            if Targparm.VM_Target /= No_VM then\n+\n+               --  Set proper processing commands\n+\n+               case Targparm.VM_Target is\n+               when Targparm.JVM_Target =>\n+\n+                  --  Do not check for an object file (\".o\") when compiling to\n+                  --  JVM machine since \".class\" files are generated instead.\n+\n+                  Check_Object_Consistency := False;\n+                  Gcc := new String'(\"jvm-gnatcompile\");\n+\n+               when Targparm.CLI_Target =>\n+                  Gcc := new String'(\"dotnet-gnatcompile\");\n+\n+               when Targparm.No_VM =>\n+                  raise Program_Error;\n+               end case;\n+            end if;\n+\n             Is_First_Main := False;\n          end if;\n "}, {"sha": "b8b760cce4e29f89fcd28e4f14bad69a7a52b2bd", "filename": "gcc/ada/par-ch12.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d59eef2697a46611385b025252447b6117578b6/gcc%2Fada%2Fpar-ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d59eef2697a46611385b025252447b6117578b6/gcc%2Fada%2Fpar-ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch12.adb?ref=5d59eef2697a46611385b025252447b6117578b6", "patch": "@@ -533,7 +533,7 @@ package body Ch12 is\n \n       if Token = Tok_Semicolon then\n \n-         --  Ada2012: Incomplete formal type\n+         --  Ada 2012: Incomplete formal type\n \n          Scan; -- past semicolon\n "}, {"sha": "6f0b049e8dc5b9c6a38a236f8fdd336008ec5852", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d59eef2697a46611385b025252447b6117578b6/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d59eef2697a46611385b025252447b6117578b6/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=5d59eef2697a46611385b025252447b6117578b6", "patch": "@@ -342,8 +342,8 @@ package body Sem_Ch12 is\n       Def : Node_Id);\n    --  Creates a new private type, which does not require completion\n \n-   procedure Analyze_Formal_Incomplete_Type (T   : Entity_Id; Def : Node_Id);\n-   --  Ada2012: Creates a new incomplete type whose actual does not freeze\n+   procedure Analyze_Formal_Incomplete_Type (T : Entity_Id; Def : Node_Id);\n+   --  Ada 2012: Creates a new incomplete type whose actual does not freeze\n \n    procedure Analyze_Generic_Formal_Part (N : Node_Id);\n    --  Analyze generic formal part\n@@ -1304,8 +1304,8 @@ package body Sem_Ch12 is\n                        Assoc);\n \n                      --  An instantiation is a freeze point for the actuals,\n-                     --  unless this is a rewritten formal package, and\n-                     --  unless it is an Ada2012 formal incomplete type.\n+                     --  unless this is a rewritten formal package, or the\n+                     --  formal is an Ada 2012 formal incomplete type.\n \n                      if Nkind (I_Node) /= N_Formal_Package_Declaration\n                        and then\n@@ -1316,9 +1316,8 @@ package body Sem_Ch12 is\n                      end if;\n                   end if;\n \n-                  --  A remote access-to-class-wide type must not be an\n-                  --  actual parameter for a generic formal of an access\n-                  --  type (E.2.2 (17)).\n+                  --  A remote access-to-class-wide type is not a legal actual\n+                  --  for a generic formal of an access type (E.2.2(17)).\n \n                   if Nkind (Analyzed_Formal) = N_Formal_Type_Declaration\n                     and then\n@@ -9483,9 +9482,9 @@ package body Sem_Ch12 is\n       procedure Validate_Interface_Type_Instance;\n       procedure Validate_Private_Type_Instance;\n       procedure Validate_Incomplete_Type_Instance;\n-      --  These procedures perform validation tests for the named case\n+      --  These procedures perform validation tests for the named case.\n       --  Validate_Discriminated_Formal_Type is shared by formal private\n-      --  types and Ada2012 formal incomplete types.\n+      --  types and Ada 2012 formal incomplete types.\n \n       function Subtypes_Match (Gen_T, Act_T : Entity_Id) return Boolean;\n       --  Check that base types are the same and that the subtypes match"}, {"sha": "ff54fe9a3f7530009d82f4608cf15ca108ff0053", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d59eef2697a46611385b025252447b6117578b6/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d59eef2697a46611385b025252447b6117578b6/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=5d59eef2697a46611385b025252447b6117578b6", "patch": "@@ -4388,19 +4388,18 @@ package body Sem_Res is\n                Discr : constant Entity_Id :=\n                          Defining_Identifier (Associated_Node_For_Itype (Typ));\n             begin\n-               --  Ada2012-B052: If the designated type of the allocator is\n-               --  limited, then the allocator shall not be used to define the\n-               --  value of an access discriminant, unless the discriminated\n+               --  Ada 2012 AI05-0052: If the designated type of the allocator\n+               --  is limited, then the allocator shall not be used to define\n+               --  the value of an access discriminant unless the discriminated\n                --  type is immutably limited.\n \n                if Ada_Version >= Ada_2012\n                  and then Is_Limited_Type (Desig_T)\n                  and then not Is_Immutably_Limited_Type (Scope (Discr))\n                then\n                   Error_Msg_N\n-                    (\"only immutably limited types can have anonymous \", N);\n-                  Error_Msg_N\n-                    (\"\\discriminants of limited designated type\", N);\n+                    (\"only immutably limited types can have anonymous \"\n+                     & \"access discriminants designating a limited type\", N);\n                end if;\n             end;\n "}]}