{"sha": "f2beb7ef551e6d8560f95a1ff2772720716b1697", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJiZWI3ZWY1NTFlNmQ4NTYwZjk1YTFmZjI3NzI3MjA3MTZiMTY5Nw==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "2000-12-12T20:52:54Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2000-12-12T20:52:54Z"}, "message": "Makefile.am (gctest_LDADD): Added EXTRA_TEST_LIBS.\n\n2000-12-11  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n        * Makefile.am (gctest_LDADD): Added EXTRA_TEST_LIBS.\n        * configure.in (EXTRA_TEST_LIBS): Check for `dlopen' in -ldl and\n        set accordingly.\n        * Makefile.in: Rebuilt.\n        * configure: Likewise.\n\n(http://sources.redhat.com/ml/java-patches/2000-q4/msg00237.html)\n\nFrom-SVN: r38208", "tree": {"sha": "cc4c12662e02c0a04b6809bbcdcc93fd6fdec164", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc4c12662e02c0a04b6809bbcdcc93fd6fdec164"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2beb7ef551e6d8560f95a1ff2772720716b1697", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2beb7ef551e6d8560f95a1ff2772720716b1697", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2beb7ef551e6d8560f95a1ff2772720716b1697", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2beb7ef551e6d8560f95a1ff2772720716b1697/comments", "author": null, "committer": null, "parents": [{"sha": "2b60b2cb39dc367d809b732b35ed9d26fe9658c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b60b2cb39dc367d809b732b35ed9d26fe9658c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b60b2cb39dc367d809b732b35ed9d26fe9658c0"}], "stats": {"total": 123, "additions": 66, "deletions": 57}, "files": [{"sha": "758a4d97817312bc3cd2828d08c9b49232a99089", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2beb7ef551e6d8560f95a1ff2772720716b1697/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2beb7ef551e6d8560f95a1ff2772720716b1697/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=f2beb7ef551e6d8560f95a1ff2772720716b1697", "patch": "@@ -1,3 +1,11 @@\n+2000-12-11  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* Makefile.am (gctest_LDADD): Added EXTRA_TEST_LIBS.\n+\t* configure.in (EXTRA_TEST_LIBS): Check for `dlopen' in -ldl and\n+\tset accordingly.\n+\t* Makefile.in: Rebuilt.\n+\t* configure: Likewise.\n+\n 2000-12-10  Geoffrey Keating  <geoffk@redhat.com>\n \n \t* gcconfig.h: Add new case for powerpc EABI."}, {"sha": "f2286c4b2e9845a17602997250fe8a5fb171af1d", "filename": "boehm-gc/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2beb7ef551e6d8560f95a1ff2772720716b1697/boehm-gc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2beb7ef551e6d8560f95a1ff2772720716b1697/boehm-gc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FMakefile.am?ref=f2beb7ef551e6d8560f95a1ff2772720716b1697", "patch": "@@ -45,7 +45,7 @@ AM_CFLAGS = @BOEHM_GC_CFLAGS@\n \n check_PROGRAMS = gctest\n gctest_SOURCES = test.c\n-gctest_LDADD = ./libgcjgc.la $(THREADLIB)\n+gctest_LDADD = ./libgcjgc.la $(THREADLIB) $(EXTRA_TEST_LIBS)\n \n TESTS = gctest\n "}, {"sha": "e12d68d709eef36bb6c80addaf280a21ae7732e3", "filename": "boehm-gc/Makefile.in", "status": "modified", "additions": 11, "deletions": 56, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2beb7ef551e6d8560f95a1ff2772720716b1697/boehm-gc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2beb7ef551e6d8560f95a1ff2772720716b1697/boehm-gc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FMakefile.in?ref=f2beb7ef551e6d8560f95a1ff2772720716b1697", "patch": "@@ -73,6 +73,7 @@ CXXCPP = @CXXCPP@\n CXXINCLUDES = @CXXINCLUDES@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n+EXTRA_TEST_LIBS = @EXTRA_TEST_LIBS@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n INCLUDES = @INCLUDES@\n@@ -101,27 +102,19 @@ MULTIDIRS =\n MULTISUBDIR = \n MULTIDO = true\n MULTICLEAN = true\n-@USE_LIBDIR_TRUE@toolexeclibdir = @USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = @USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexecdir = @USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n+@USE_LIBDIR_TRUE@toolexeclibdir = $(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexecdir = $(exec_prefix)/$(target_alias)\n \n toolexeclib_LTLIBRARIES = $(target_all)\n EXTRA_LTLIBRARIES = libgcjgc.la\n-libgcjgc_la_SOURCES = allchblk.c alloc.c blacklst.c checksums.c\t\\\n-gcconfig.h dbg_mlc.c dyn_load.c finalize.c gc.h gc_alloc.h gc_cpp.h \\\n-gc_hdrs.h gc_mark.h gc_priv.h gc_private.h gc_typed.h gcj_mlc.c headers.c \\\n-hpux_irix_threads.c linux_threads.c malloc.c mallocx.c mark.c mark_rts.c \\\n-misc.c new_hblk.c obj_map.c os_dep.c pcr_interface.c ptr_chck.c\t\\\n-real_malloc.c reclaim.c solaris_pthreads.c solaris_threads.c \\\n-solaris_threads.h stubborn.c typd_mlc.c version.h weakpointer.h\n+libgcjgc_la_SOURCES = allchblk.c alloc.c blacklst.c checksums.c\tgcconfig.h dbg_mlc.c dyn_load.c finalize.c gc.h gc_alloc.h gc_cpp.h gc_hdrs.h gc_mark.h gc_priv.h gc_private.h gc_typed.h gcj_mlc.c headers.c hpux_irix_threads.c linux_threads.c malloc.c mallocx.c mark.c mark_rts.c misc.c new_hblk.c obj_map.c os_dep.c pcr_interface.c ptr_chck.c\treal_malloc.c reclaim.c solaris_pthreads.c solaris_threads.c solaris_threads.h stubborn.c typd_mlc.c version.h weakpointer.h\n \n libgcjgc_la_LIBADD = @addobjs@\n libgcjgc_la_DEPENDENCIES = @addobjs@\n libgcjgc_la_LDFLAGS = -version-info 1:1:0 -rpath $(toolexeclibdir)\n \n-EXTRA_libgcjgc_la_SOURCES = alpha_mach_dep.s mips_sgi_mach_dep.s \\\n-mips_ultrix_mach_dep.s rs6000_mach_dep.s sparc_mach_dep.s \\\n-sparc_sunos4_mach_dep.s mach_dep.c ecos.cc\n+EXTRA_libgcjgc_la_SOURCES = alpha_mach_dep.s mips_sgi_mach_dep.s mips_ultrix_mach_dep.s rs6000_mach_dep.s sparc_mach_dep.s sparc_sunos4_mach_dep.s mach_dep.c ecos.cc\n \n \n AM_CXXFLAGS = @BOEHM_GC_CFLAGS@\n@@ -130,58 +123,20 @@ AM_CFLAGS = @BOEHM_GC_CFLAGS@\n \n check_PROGRAMS = gctest\n gctest_SOURCES = test.c\n-gctest_LDADD = ./libgcjgc.la $(THREADLIB)\n+gctest_LDADD = ./libgcjgc.la $(THREADLIB) $(EXTRA_TEST_LIBS)\n \n TESTS = gctest\n \n all_objs = @addobjs@ $(libgcjgc_la_OBJECTS)\n \n-LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) \\\n-\t$(AM_CPPFLAGS) $(CPPFLAGS) \\\n-\t$(AM_CFLAGS) $(MY_CFLAGS) $(BOEHM_GC_CFLAGS) \n+LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) \t$(AM_CPPFLAGS) $(CPPFLAGS) \t$(AM_CFLAGS) $(MY_CFLAGS) $(BOEHM_GC_CFLAGS) \n \n LINK = $(LIBTOOL) --mode=link $(CC) $(AM_CFLAGS) $(MY_CFLAGS) $(LDFLAGS) -o $@\n \n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS = \\\n-\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n-\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n-\t\"CFLAGS=$(CFLAGS)\" \\\n-\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n-\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n-\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n-\t\"INSTALL=$(INSTALL)\" \\\n-\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n-\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n-\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n-\t\"LDFLAGS=$(LDFLAGS)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\"MAKE=$(MAKE)\" \\\n-\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n-\t\"SHELL=$(SHELL)\" \\\n-\t\"EXPECT=$(EXPECT)\" \\\n-\t\"RUNTEST=$(RUNTEST)\" \\\n-\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n-\t\"exec_prefix=$(exec_prefix)\" \\\n-\t\"infodir=$(infodir)\" \\\n-\t\"libdir=$(libdir)\" \\\n-\t\"prefix=$(prefix)\" \\\n-\t\"tooldir=$(tooldir)\" \\\n-\t\"AR=$(AR)\" \\\n-\t\"AS=$(AS)\" \\\n-\t\"CC=$(CC)\" \\\n-\t\"CXX=$(CXX)\" \\\n-\t\"LD=$(LD)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"NM=$(NM)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"RANLIB=$(RANLIB)\" \\\n-\t\"DESTDIR=$(DESTDIR)\"\n+AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"EXPECT=$(EXPECT)\" \t\"RUNTEST=$(RUNTEST)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"CC=$(CC)\" \t\"CXX=$(CXX)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"NM=$(NM)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"DESTDIR=$(DESTDIR)\"\n \n \n CONFIG_STATUS_DEPENDENCIES = $(boehm_gc_basedir)/configure.host\n@@ -221,7 +176,7 @@ aclocal.m4 configure configure.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = tar\n+TAR = gtar\n GZIP_ENV = --best\n SOURCES = $(libgcjgc_la_SOURCES) $(EXTRA_libgcjgc_la_SOURCES) $(gctest_SOURCES)\n OBJECTS = $(libgcjgc_la_OBJECTS) $(gctest_OBJECTS)\n@@ -402,7 +357,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  if test -f $$file; then d=.; else d=$(srcdir); fi; \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\"}, {"sha": "cd68c6b51e3d708b7bfff01a5c775ffe101ade96", "filename": "boehm-gc/configure", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2beb7ef551e6d8560f95a1ff2772720716b1697/boehm-gc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2beb7ef551e6d8560f95a1ff2772720716b1697/boehm-gc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure?ref=f2beb7ef551e6d8560f95a1ff2772720716b1697", "patch": "@@ -2656,6 +2656,48 @@ esac\n echo \"$ac_t\"\"$THREADS\" 1>&6\n \n \n+echo $ac_n \"checking for dlopen in -ldl\"\"... $ac_c\" 1>&6\n+echo \"configure:2661: checking for dlopen in -ldl\" >&5\n+ac_lib_var=`echo dl'_'dlopen | sed 'y%./+-%__p_%'`\n+if eval \"test \\\"`echo '$''{'ac_cv_lib_$ac_lib_var'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  ac_save_LIBS=\"$LIBS\"\n+LIBS=\"-ldl  $LIBS\"\n+cat > conftest.$ac_ext <<EOF\n+#line 2669 \"configure\"\n+#include \"confdefs.h\"\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+/* We use char because int might match the return type of a gcc2\n+    builtin and then its argument prototype would still apply.  */\n+char dlopen();\n+\n+int main() {\n+dlopen()\n+; return 0; }\n+EOF\n+if { (eval echo configure:2680: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+  rm -rf conftest*\n+  eval \"ac_cv_lib_$ac_lib_var=yes\"\n+else\n+  echo \"configure: failed program was:\" >&5\n+  cat conftest.$ac_ext >&5\n+  rm -rf conftest*\n+  eval \"ac_cv_lib_$ac_lib_var=no\"\n+fi\n+rm -f conftest*\n+LIBS=\"$ac_save_LIBS\"\n+\n+fi\n+if eval \"test \\\"`echo '$ac_cv_lib_'$ac_lib_var`\\\" = yes\"; then\n+  echo \"$ac_t\"\"yes\" 1>&6\n+  EXTRA_TEST_LIBS=\"$EXTRA_TEST_LIBS -ldl\"\n+else\n+  echo \"$ac_t\"\"no\" 1>&6\n+fi\n+\n+\n+\n # Check whether --enable-java-gc or --disable-java-gc was given.\n if test \"${enable_java_gc+set}\" = set; then\n   enableval=\"$enable_java_gc\"\n@@ -3001,6 +3043,7 @@ s%@STRIP@%$STRIP%g\n s%@LIBTOOL@%$LIBTOOL%g\n s%@CXXCPP@%$CXXCPP%g\n s%@THREADLIB@%$THREADLIB%g\n+s%@EXTRA_TEST_LIBS@%$EXTRA_TEST_LIBS%g\n s%@target_all@%$target_all%g\n s%@INCLUDES@%$INCLUDES%g\n s%@CXXINCLUDES@%$CXXINCLUDES%g"}, {"sha": "ea23b5123e5ae6e4748470d126e6d52f508958a1", "filename": "boehm-gc/configure.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2beb7ef551e6d8560f95a1ff2772720716b1697/boehm-gc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2beb7ef551e6d8560f95a1ff2772720716b1697/boehm-gc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure.in?ref=f2beb7ef551e6d8560f95a1ff2772720716b1697", "patch": "@@ -98,6 +98,9 @@ esac\n AC_MSG_RESULT($THREADS)\n AC_SUBST(THREADLIB)\n \n+AC_CHECK_LIB(dl, dlopen, EXTRA_TEST_LIBS=\"$EXTRA_TEST_LIBS -ldl\")\n+AC_SUBST(EXTRA_TEST_LIBS)\n+\n AC_ARG_ENABLE(java-gc,\n changequote(<<,>>)dnl\n <<  --enable-java-gc=TYPE   choose garbage collector [boehm]>>,"}]}