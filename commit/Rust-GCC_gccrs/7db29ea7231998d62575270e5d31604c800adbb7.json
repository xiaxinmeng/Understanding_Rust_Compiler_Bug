{"sha": "7db29ea7231998d62575270e5d31604c800adbb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RiMjllYTcyMzE5OThkNjI1NzUyNzBlNWQzMTYwNGM4MDBhZGJiNw==", "commit": {"author": {"name": "Emmanuel Briot", "email": "briot@adacore.com", "date": "2011-08-04T12:03:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T12:03:56Z"}, "message": "make.adb, [...] (Complete_Mains): if a main specified on the command line is not a file name...\n\n2011-08-04  Emmanuel Briot  <briot@adacore.com>\n\n\t* make.adb, makeutl.adb (Complete_Mains): if a main specified on the\n\tcommand line is not a file name, also check whether it could be a unit\n\tname.\n\nFrom-SVN: r177362", "tree": {"sha": "67bc0a95fb4ee296e2986bfa258a91ec98ff3dc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67bc0a95fb4ee296e2986bfa258a91ec98ff3dc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7db29ea7231998d62575270e5d31604c800adbb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7db29ea7231998d62575270e5d31604c800adbb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7db29ea7231998d62575270e5d31604c800adbb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7db29ea7231998d62575270e5d31604c800adbb7/comments", "author": {"login": "briot", "id": 42402, "node_id": "MDQ6VXNlcjQyNDAy", "avatar_url": "https://avatars.githubusercontent.com/u/42402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/briot", "html_url": "https://github.com/briot", "followers_url": "https://api.github.com/users/briot/followers", "following_url": "https://api.github.com/users/briot/following{/other_user}", "gists_url": "https://api.github.com/users/briot/gists{/gist_id}", "starred_url": "https://api.github.com/users/briot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/briot/subscriptions", "organizations_url": "https://api.github.com/users/briot/orgs", "repos_url": "https://api.github.com/users/briot/repos", "events_url": "https://api.github.com/users/briot/events{/privacy}", "received_events_url": "https://api.github.com/users/briot/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d9b056ead95099bad4dea18d45f348190ea5c4ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9b056ead95099bad4dea18d45f348190ea5c4ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9b056ead95099bad4dea18d45f348190ea5c4ce"}], "stats": {"total": 190, "additions": 40, "deletions": 150}, "files": [{"sha": "d7309c5e45f341336ae847c9edcd3a0650221b75", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db29ea7231998d62575270e5d31604c800adbb7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db29ea7231998d62575270e5d31604c800adbb7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7db29ea7231998d62575270e5d31604c800adbb7", "patch": "@@ -1,3 +1,9 @@\n+2011-08-04  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* make.adb, makeutl.adb (Complete_Mains): if a main specified on the\n+\tcommand line is not a file name, also check whether it could be a unit\n+\tname.\n+\n 2011-08-04  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* bindgen.adb (Gen_Finalize_Library_Ada): Factor out code to generate"}, {"sha": "6b485f08cca4a37652c3dde5135ca7fafb36c264", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 0, "deletions": 137, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db29ea7231998d62575270e5d31604c800adbb7/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db29ea7231998d62575270e5d31604c800adbb7/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=7db29ea7231998d62575270e5d31604c800adbb7", "patch": "@@ -4151,143 +4151,6 @@ package body Make is\n \n          Mains.Complete_Mains\n            (Root_Environment.Flags, Main_Project, Project_Tree);\n---\n---\n---           Real_Main_Project : Project_Id := No_Project;\n---           --  The project of the first main\n---\n---           Proj              : Project_Id := No_Project;\n---           --  The project of the current main\n---\n---           Real_Path         : String_Access;\n---\n---        begin\n---           Mains.Reset;\n---\n---           --  Check each main\n---\n---           loop\n---              declare\n---                 Main      : constant String := Mains.Next_Main;\n---            --  The name specified on the command line may include directory\n---                 --  information.\n---\n---                 File_Name : constant String := Base_Name (Main);\n---                 --  The simple file name of the current main\n---\n---                 Lang : Language_Ptr;\n---\n---              begin\n---                 exit when Main = \"\";\n---\n---                 --  Get the project of the current main\n---\n---                 Proj := Prj.Env.Project_Of\n---                           (File_Name, Main_Project, Project_Tree);\n---\n---                 --  Fail if the current main is not a source of a project\n---\n---                 if Proj = No_Project then\n---                    Make_Failed\n---                      (\"\"\"\" & Main & \"\"\" is not a source of any project\");\n---\n---                 else\n---                --  If there is directory information, check that the source\n---                --  exists and, if it does, that the path is the actual path\n---                    --  of a source of a project.\n---\n---                    if Main /= File_Name then\n---                       Lang := Get_Language_From_Name (Main_Project, \"ada\");\n---\n---                       Real_Path :=\n---                         Locate_Regular_File\n---                           (Main & Get_Name_String\n---                                (Lang.Config.Naming_Data.Body_Suffix),\n---                            \"\");\n---                       if Real_Path = null then\n---                          Real_Path :=\n---                            Locate_Regular_File\n---                              (Main & Get_Name_String\n---                                   (Lang.Config.Naming_Data.Spec_Suffix),\n---                               \"\");\n---                       end if;\n---\n---                       if Real_Path = null then\n---                          Real_Path := Locate_Regular_File (Main, \"\");\n---                       end if;\n---\n---                       --  Fail if the file cannot be found\n---\n---                       if Real_Path = null then\n---                        Make_Failed (\"file \"\"\" & Main & \"\"\" does not exist\");\n---                       end if;\n---\n---                       declare\n---                          Project_Path : constant String :=\n---                                      Prj.Env.File_Name_Of_Library_Unit_Body\n---                                           (Name              => File_Name,\n---                                          Project           => Main_Project,\n---                                          In_Tree           => Project_Tree,\n---                                              Main_Project_Only => False,\n---                                              Full_Path         => True);\n---                          Normed_Path  : constant String :=\n---                                           Normalize_Pathname\n---                                             (Real_Path.all,\n---                                              Case_Sensitive => False);\n---                          Proj_Path    : constant String :=\n---                                           Normalize_Pathname\n---                                             (Project_Path,\n---                                              Case_Sensitive => False);\n---\n---                       begin\n---                          Free (Real_Path);\n---\n---                          --  Fail if it is not the correct path\n---\n---                          if Normed_Path /= Proj_Path then\n---                             if Verbose_Mode then\n---                                Set_Standard_Error;\n---                                Write_Str (Normed_Path);\n---                                Write_Str (\" /= \");\n---                                Write_Line (Proj_Path);\n---                             end if;\n---\n---                             Make_Failed\n---                               (\"\"\"\" & Main &\n---                                \"\"\" is not a source of any project\");\n---                          end if;\n---                       end;\n---                    end if;\n---\n---                    if not Unique_Compile then\n---\n---                       --  Record the project, if it is the first main\n---\n---                       if Real_Main_Project = No_Project then\n---                          Real_Main_Project := Proj;\n---\n---                       elsif Proj /= Real_Main_Project then\n---\n---                        --  Fail, as the current main is not a source of the\n---                          --  same project as the first main.\n---\n---                          Make_Failed\n---                            (\"\"\"\" & Main &\n---                             \"\"\" is not a source of project \" &\n---                             Get_Name_String (Real_Main_Project.Name));\n---                       end if;\n---                    end if;\n---                 end if;\n---\n---                 --  If -u and -U are not used, we may have mains that are\n---                 --  sources of a project that is not the one specified with\n---                 --  switch -P.\n---\n---                 if not Unique_Compile then\n---                    Main_Project := Real_Main_Project;\n---                 end if;\n---              end;\n---           end loop;\n       end Check_Mains;\n \n    --  Start of processing for Gnatmake"}, {"sha": "dca18b90645185e3bbb7978a2109e184089412de", "filename": "gcc/ada/makeutl.adb", "status": "modified", "additions": 34, "deletions": 13, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db29ea7231998d62575270e5d31604c800adbb7/gcc%2Fada%2Fmakeutl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db29ea7231998d62575270e5d31604c800adbb7/gcc%2Fada%2Fmakeutl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.adb?ref=7db29ea7231998d62575270e5d31604c800adbb7", "patch": "@@ -1351,25 +1351,30 @@ package body Makeutl is\n \n                for J in reverse Names.First .. Names.Last loop\n                   declare\n-                     File        : Main_Info       := Names.Table (J);\n-                     Main_Id     : File_Name_Type  := File.File;\n-                     Main        : constant String :=\n-                                     Get_Name_String (Main_Id);\n-                     Source      : Prj.Source_Id   := No_Source;\n+                     File       : Main_Info       := Names.Table (J);\n+                     Main_Id    : File_Name_Type  := File.File;\n+                     Main       : constant String := Get_Name_String (Main_Id);\n+                     Source     : Prj.Source_Id   := No_Source;\n+                     Suffix     : File_Name_Type;\n+                     Iter       : Source_Iterator;\n                      Is_Absolute : Boolean         := False;\n-                     Suffix      : File_Name_Type;\n-                     Iter        : Source_Iterator;\n \n                   begin\n-                     if Base_Name (Main) /= Main then\n+                     if Base /= Main then\n                         if Is_Absolute_Path (Main) then\n-                           Main_Id := Create_Name (Base_Name (Main));\n+                           Main_Id := Create_Name (Base);\n                            Is_Absolute := True;\n                         else\n-                           Fail_Program\n-                             (Tree,\n-                              \"mains cannot include directory information (\"\"\"\n-                              & Main & \"\"\")\");\n+                           declare\n+                              Absolute : constant String :=\n+                                Normalize_Pathname\n+                                  (Name           => Main,\n+                                   Directory      => \"\",\n+                                   Resolve_Links  => False);\n+                           begin\n+                              File.File := Create_Name (Absolute);\n+                              Main_Id := Create_Name (Base);\n+                           end;\n                         end if;\n                      end if;\n \n@@ -1468,6 +1473,22 @@ package body Makeutl is\n                            end if;\n                         end if;\n \n+                        if Source = No_Source then\n+                           --  Still not found ? Maybe we have a unit name\n+                           declare\n+                              Unit : constant Unit_Index :=\n+                                Units_Htable.Get\n+                                  (File.Tree.Units_HT, Name_Id (Main_Id));\n+                           begin\n+                              if Unit /= No_Unit_Index then\n+                                 Source := Unit.File_Names (Impl);\n+                                 if Source = No_Source then\n+                                    Source := Unit.File_Names (Spec);\n+                                 end if;\n+                              end if;\n+                           end;\n+                        end if;\n+\n                         if Source /= No_Source then\n \n                            --  If we have found a multi-unit source file but"}]}