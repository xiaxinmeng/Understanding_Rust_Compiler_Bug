{"sha": "8a1360e72d6c6056606aa5edd8c906c50f26de59", "node_id": "C_kwDOANBUbNoAKDhhMTM2MGU3MmQ2YzYwNTY2MDZhYTVlZGQ4YzkwNmM1MGYyNmRlNTk", "commit": {"author": {"name": "Stam Markianos-Wright", "email": "stam.markianos-wright@arm.com", "date": "2023-01-16T11:40:40Z"}, "committer": {"name": "Stam Markianos-Wright", "email": "stam.markianos-wright@arm.com", "date": "2023-01-16T12:03:42Z"}, "message": "arm: Split up MVE _Generic associations to prevent type clashes [PR107515]\n\nWith these previous patches:\nhttps://gcc.gnu.org/pipermail/gcc-patches/2022-November/606586.html\nhttps://gcc.gnu.org/pipermail/gcc-patches/2022-November/606587.html\nwe enabled the MVE overloaded _Generic associations to handle more\nscalar types, however at PR 107515 we found a new regression that\nwasn't detected in our testing:\n\nWith glibc's posix/types.h:\n```\ntypedef signed int __int32_t;\n...\ntypedef __int32_t int32_t;\n```\nWe would get a `error: '_Generic' specifies two compatible types`\nfrom `__ARM_mve_coerce3` because of `type: param`, when `type` is\n`int` and `int32_t: param` both being the same under the hood.\n\nThe same did not happen with Newlib's header sys/_stdint.h:\n```\ntypedef long int __int32_t;\n...\ntypedef __int32_t int32_t ;\n```\nwhich worked fine, because it uses `long int`.\n\nThe same could feasibly happen in `__ARM_mve_coerce2` between\n`__fp16` and `float16_t`.\n\nThe solution here is to break the _Generic down so that the similar\ntypes don't appear at the same level, as is done in `__ARM_mve_typeid`\n\ngcc/ChangeLog:\n\tPR target/96795\n\tPR target/107515\n\t* config/arm/arm_mve.h (__ARM_mve_coerce2): Split types.\n\t(__ARM_mve_coerce3): Likewise.\n\ngcc/testsuite/ChangeLog:\n\tPR target/96795\n\tPR target/107515\n\t* gcc.target/arm/mve/intrinsics/mve_intrinsic_type_overloads-fp.c: New test.\n\t* gcc.target/arm/mve/intrinsics/mve_intrinsic_type_overloads-int.c: New test.", "tree": {"sha": "98578c56eb04b11628c58142be4717083bcf3fb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98578c56eb04b11628c58142be4717083bcf3fb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a1360e72d6c6056606aa5edd8c906c50f26de59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a1360e72d6c6056606aa5edd8c906c50f26de59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a1360e72d6c6056606aa5edd8c906c50f26de59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a1360e72d6c6056606aa5edd8c906c50f26de59/comments", "author": {"login": "Stammark", "id": 30555766, "node_id": "MDQ6VXNlcjMwNTU1NzY2", "avatar_url": "https://avatars.githubusercontent.com/u/30555766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stammark", "html_url": "https://github.com/Stammark", "followers_url": "https://api.github.com/users/Stammark/followers", "following_url": "https://api.github.com/users/Stammark/following{/other_user}", "gists_url": "https://api.github.com/users/Stammark/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stammark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stammark/subscriptions", "organizations_url": "https://api.github.com/users/Stammark/orgs", "repos_url": "https://api.github.com/users/Stammark/repos", "events_url": "https://api.github.com/users/Stammark/events{/privacy}", "received_events_url": "https://api.github.com/users/Stammark/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Stammark", "id": 30555766, "node_id": "MDQ6VXNlcjMwNTU1NzY2", "avatar_url": "https://avatars.githubusercontent.com/u/30555766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stammark", "html_url": "https://github.com/Stammark", "followers_url": "https://api.github.com/users/Stammark/followers", "following_url": "https://api.github.com/users/Stammark/following{/other_user}", "gists_url": "https://api.github.com/users/Stammark/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stammark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stammark/subscriptions", "organizations_url": "https://api.github.com/users/Stammark/orgs", "repos_url": "https://api.github.com/users/Stammark/repos", "events_url": "https://api.github.com/users/Stammark/events{/privacy}", "received_events_url": "https://api.github.com/users/Stammark/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f81164255bf0d7605cd0651ede0063d10ec72c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f81164255bf0d7605cd0651ede0063d10ec72c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f81164255bf0d7605cd0651ede0063d10ec72c1"}], "stats": {"total": 114, "additions": 112, "deletions": 2}, "files": [{"sha": "13bdb60e82e5435728287b6db3c22e390ae77339", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a1360e72d6c6056606aa5edd8c906c50f26de59/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a1360e72d6c6056606aa5edd8c906c50f26de59/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=8a1360e72d6c6056606aa5edd8c906c50f26de59", "patch": "@@ -35659,9 +35659,9 @@ extern void *__ARM_undef;\n #define __ARM_mve_coerce1(param, type) \\\n     _Generic(param, type: param, const type: param, default: *(type *)__ARM_undef)\n #define __ARM_mve_coerce2(param, type) \\\n-    _Generic(param, type: param, float16_t: param, float32_t: param, default: *(type *)__ARM_undef)\n+    _Generic(param, type: param, __fp16: param, default: _Generic (param, _Float16: param, float16_t: param, float32_t: param, default: *(type *)__ARM_undef))\n #define __ARM_mve_coerce3(param, type) \\\n-    _Generic(param, type: param, int8_t: param, int16_t: param, int32_t: param, int64_t: param, uint8_t: param, uint16_t: param, uint32_t: param, uint64_t: param, default: *(type *)__ARM_undef)\n+    _Generic(param, type: param, default: _Generic (param, int8_t: param, int16_t: param, int32_t: param, int64_t: param, uint8_t: param, uint16_t: param, uint32_t: param, uint64_t: param, default: *(type *)__ARM_undef))\n \n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n "}, {"sha": "7492e9b22bd3f024f154d0ee2c9ed700702446af", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_intrinsic_type_overloads-fp.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a1360e72d6c6056606aa5edd8c906c50f26de59/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_intrinsic_type_overloads-fp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a1360e72d6c6056606aa5edd8c906c50f26de59/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_intrinsic_type_overloads-fp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_intrinsic_type_overloads-fp.c?ref=8a1360e72d6c6056606aa5edd8c906c50f26de59", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2 -Wno-pedantic -Wno-long-long\" } */\n+#include \"arm_mve.h\"\n+\n+float f1;\n+double f2;\n+float16_t f3;\n+float32_t f4;\n+__fp16 f5;\n+_Float16 f6;\n+\n+int i1;\n+short i2;\n+long i3;\n+long long i4;\n+int8_t i5;\n+int16_t i6;\n+int32_t i7;\n+int64_t i8;\n+\n+const int ci1;\n+const short ci2;\n+const long ci3;\n+const long long ci4;\n+const int8_t ci5;\n+const int16_t ci6;\n+const int32_t ci7;\n+const int64_t ci8;\n+\n+float16x8_t floatvec;\n+int16x8_t intvec;\n+\n+void test(void)\n+{\n+    /* Test a few different supported ways of passing an int value.  The\n+    intrinsic vmulq was chosen arbitrarily, but it is representative of\n+    all intrinsics that take a non-const scalar value.  */\n+    intvec = vmulq(intvec, 2);\n+    intvec = vmulq(intvec, (int32_t) 2);\n+    intvec = vmulq(intvec, (short) 2);\n+    intvec = vmulq(intvec, i1);\n+    intvec = vmulq(intvec, i2);\n+    intvec = vmulq(intvec, i3);\n+    intvec = vmulq(intvec, i4);\n+    intvec = vmulq(intvec, i5);\n+    intvec = vmulq(intvec, i6);\n+    intvec = vmulq(intvec, i7);\n+    intvec = vmulq(intvec, i8);\n+\n+    /* Test a few different supported ways of passing a float value.  */\n+    floatvec = vmulq(floatvec, 0.5);\n+    floatvec = vmulq(floatvec, 0.5f);\n+    floatvec = vmulq(floatvec, (__fp16) 0.5);\n+    floatvec = vmulq(floatvec, f1);\n+    floatvec = vmulq(floatvec, f2);\n+    floatvec = vmulq(floatvec, f3);\n+    floatvec = vmulq(floatvec, f4);\n+    floatvec = vmulq(floatvec, f5);\n+    floatvec = vmulq(floatvec, f6);\n+    floatvec = vmulq(floatvec, 0.15f16);\n+    floatvec = vmulq(floatvec, (_Float16) 0.15);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "9a921bf40e81f3578a5687f14e60fa6f78dcd123", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_intrinsic_type_overloads-int.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a1360e72d6c6056606aa5edd8c906c50f26de59/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_intrinsic_type_overloads-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a1360e72d6c6056606aa5edd8c906c50f26de59/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_intrinsic_type_overloads-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_intrinsic_type_overloads-int.c?ref=8a1360e72d6c6056606aa5edd8c906c50f26de59", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2 -Wno-pedantic -Wno-long-long\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int i1;\n+short i2;\n+long i3;\n+long long i4;\n+int8_t i5;\n+int16_t i6;\n+int32_t i7;\n+int64_t i8;\n+\n+const int ci1;\n+const short ci2;\n+const long ci3;\n+const long long ci4;\n+const int8_t ci5;\n+const int16_t ci6;\n+const int32_t ci7;\n+const int64_t ci8;\n+\n+int16x8_t intvec;\n+\n+void test(void)\n+{\n+    /* Test a few different supported ways of passing an int value.  The\n+    intrinsic vmulq was chosen arbitrarily, but it is representative of\n+    all intrinsics that take a non-const scalar value.  */\n+    intvec = vmulq(intvec, 2);\n+    intvec = vmulq(intvec, (int32_t) 2);\n+    intvec = vmulq(intvec, (short) 2);\n+    intvec = vmulq(intvec, i1);\n+    intvec = vmulq(intvec, i2);\n+    intvec = vmulq(intvec, i3);\n+    intvec = vmulq(intvec, i4);\n+    intvec = vmulq(intvec, i5);\n+    intvec = vmulq(intvec, i6);\n+    intvec = vmulq(intvec, i7);\n+    intvec = vmulq(intvec, i8);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}]}