{"sha": "3f047028365e08c688ac65a7461c8ace4186591b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YwNDcwMjgzNjVlMDhjNjg4YWM2NWE3NDYxYzhhY2U0MTg2NTkxYg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-11-24T16:55:43Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-11-24T16:55:43Z"}, "message": "2003-11-24  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/swing/BoxLayout.java\n\t(serialVersionUIR): New member variable.\n\t(X_AXIS, Y_AXIS): Documentation added.\n\t(LINE_AXIS, PAGE_AXIS): New constants.\n\t(grid): Renamed from gridbag.\n\t(BoxLayout): Use new constants, throw exception if invalid value for\n\tway, added documentation.\n\t(BoxLayout): Removed.\n\t(addLayoutComponent): Use new constants, added documentation.\n\t(removeLayoutComponent): Likewise.\n\t(addLayoutContainer): Added documentation.\n\t(preferredLayoutSize): Added documentation, check given argument.\n\t(minimumLayoutSize): Likewise.\n\t(layoutContainer): Likewise.\n\t(getLayoutAlignmentX): Likewise.\n\t(getLayoutAlignmentY): Likewise.\n\t(invalidateLayout): Likewise.\n\t(maximumLayoutSize): Likewise.\n\nFrom-SVN: r73878", "tree": {"sha": "d70267d3b33f99b838fd145cb60d6f230917039d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d70267d3b33f99b838fd145cb60d6f230917039d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f047028365e08c688ac65a7461c8ace4186591b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f047028365e08c688ac65a7461c8ace4186591b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f047028365e08c688ac65a7461c8ace4186591b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f047028365e08c688ac65a7461c8ace4186591b/comments", "author": null, "committer": null, "parents": [{"sha": "7677e9e06291274cb77681e899df0246e02f9f20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7677e9e06291274cb77681e899df0246e02f9f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7677e9e06291274cb77681e899df0246e02f9f20"}], "stats": {"total": 339, "additions": 248, "deletions": 91}, "files": [{"sha": "f8a678f3f61fa0de5ee989fb679c9b7f199f102f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f047028365e08c688ac65a7461c8ace4186591b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f047028365e08c688ac65a7461c8ace4186591b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=3f047028365e08c688ac65a7461c8ace4186591b", "patch": "@@ -1,3 +1,24 @@\n+2003-11-24  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/swing/BoxLayout.java\n+\t(serialVersionUIR): New member variable.\n+\t(X_AXIS, Y_AXIS): Documentation added.\n+\t(LINE_AXIS, PAGE_AXIS): New constants.\n+\t(grid): Renamed from gridbag.\n+\t(BoxLayout): Use new constants, throw exception if invalid value for\n+\tway, added documentation.\n+\t(BoxLayout): Removed.\n+\t(addLayoutComponent): Use new constants, added documentation.\n+\t(removeLayoutComponent): Likewise.\n+\t(addLayoutContainer): Added documentation.\n+\t(preferredLayoutSize): Added documentation, check given argument.\n+\t(minimumLayoutSize): Likewise.\n+\t(layoutContainer): Likewise.\n+\t(getLayoutAlignmentX): Likewise.\n+\t(getLayoutAlignmentY): Likewise.\n+\t(invalidateLayout): Likewise.\n+\t(maximumLayoutSize): Likewise.\n+\n 2003-11-22  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/net/natPlainDatagramSocketImplWin32.cc"}, {"sha": "0dd97ac60ba7af31d46caba0af96fb534179fdcf", "filename": "libjava/javax/swing/BoxLayout.java", "status": "modified", "additions": 227, "deletions": 91, "changes": 318, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f047028365e08c688ac65a7461c8ace4186591b/libjava%2Fjavax%2Fswing%2FBoxLayout.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f047028365e08c688ac65a7461c8ace4186591b/libjava%2Fjavax%2Fswing%2FBoxLayout.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FBoxLayout.java?ref=3f047028365e08c688ac65a7461c8ace4186591b", "patch": "@@ -1,5 +1,5 @@\n /* BoxLayout.java -- A layout for swing components.\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,16 +35,18 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n-\n package javax.swing;\n \n-import java.awt.Container;\n+import java.awt.AWTError;\n import java.awt.Component;\n+import java.awt.ComponentOrientation;\n+import java.awt.Container;\n import java.awt.Dimension;\n import java.awt.GridLayout;\n import java.awt.LayoutManager2;\n import java.io.Serializable;\n \n+\n /**\n  * A layout for swing components.\n  * This implementation delegates its methods to\n@@ -54,101 +56,235 @@\n  */\n public class BoxLayout implements LayoutManager2, Serializable\n {\n-    GridLayout      gridbag;\n-    \n-    final static int X_AXIS = 0;\n-    final static int Y_AXIS = 1;\n+  /**\n+   * Specifies that components are laid out left to right.\n+   */\n+  public static final int X_AXIS = 0;\n+\n+  /**\n+   * Specifies that components are laid out top to bottom.\n+   */\n+  public static final int Y_AXIS = 1;\n+\n+  /**\n+   * Specifies that components are laid out in the direction of a line of text.\n+   */\n+  public static final int LINE_AXIS = 2;\n \n-    int way = X_AXIS;\n+  /**\n+   * Sepcifies that components are laid out in the direction of the line flow.\n+   */\n+  public static final int PAGE_AXIS = 3;\n \n-    BoxLayout(JComponent p,\n-\t      int way)\n-    {\n-\tint width = 0;\n-\tint height = 0;\n+  /*\n+   * Needed for serialization.\n+   */\n+  private static final long serialVersionUID = -2474455742719112368L;\n \n-\tthis.way = way;\n+  /*\n+   * The container given to the constructor.\n+   */\n+  private Container container;\n+  \n+  /*\n+   * Internal layout.\n+   */\n+  private GridLayout grid;\n \n-\tif (way == X_AXIS)\n-\t    {\n-\t\twidth = 1;\n-\t    }\n+  /*\n+   * Current type of component layouting. Defaults to X_AXIS.\n+   */\n+  private int way = X_AXIS;\n+\n+  /**\n+   * Constructs a <code>BoxLayout</code> object.\n+   *\n+   * @param container The container that needs to be laid out.\n+   * @param way The orientation of the components.\n+   *\n+   * @exception AWTError If way has an invalid value.\n+   */\n+  public BoxLayout(Container container, int way)\n+  {\n+    int width = 0;\n+    int height = 0;\n+    ComponentOrientation orientation = container.getComponentOrientation();\n+\n+    this.container = container;\n+    this.way = way;\n+\n+    switch (way)\n+      {\n+      case X_AXIS:\n+\twidth = 1;\n+\tbreak;\n+      case Y_AXIS:\n+\theight = 1;\n+\tbreak;\n+      case LINE_AXIS:\n+\tif (orientation.isHorizontal())\n+          height = 1;\n+\telse\n+\t  width = 1;\n+\tbreak;\n+      case PAGE_AXIS:\n+\tif (!orientation.isHorizontal())\n+          height = 1;\n \telse\n-\t    {\n-\t\theight = 1;\n-\t    }\n-\t\n+\t  width = 1;\n+\tbreak;\n+      default:\n+\tthrow new AWTError(\"Invalid value for way\");\n+      }\n+\n+    grid = new GridLayout(width, height);\n+  }\n+\n+  /**\n+   * Adds a component to the layout.\n+   *\n+   * @param name The name of the component to add.\n+   * @param component the component to add to the layout.\n+   */\n+  public void addLayoutComponent(String name, Component component)\n+  {\n+    if (way == X_AXIS\n+        || (way == LINE_AXIS\n+            && component.getComponentOrientation().isHorizontal())\n+        || (way == PAGE_AXIS\n+            && !component.getComponentOrientation().isHorizontal()))\n+      grid.setColumns(grid.getColumns() + 1);\n+    else\n+      grid.setRows(grid.getRows() + 1);\n+  }\n+\n+  /**\n+   * Removes a component from the layout.\n+   *\n+   * @param component The component to remove from the layout.\n+   */\n+  public void removeLayoutComponent(Component component)\n+  {\n+    grid.removeLayoutComponent(component);\n \n-\tgridbag = new GridLayout(width, height);\n-    }\n+    if (way == X_AXIS\n+        || (way == LINE_AXIS\n+            && component.getComponentOrientation().isHorizontal())\n+        || (way == PAGE_AXIS\n+            && !component.getComponentOrientation().isHorizontal()))\n+      grid.setColumns(grid.getColumns() - 1);\n+    else\n+      grid.setRows(grid.getRows() - 1);\n+  }\n+\n+  /**\n+   * Returns the preferred size of the layout.\n+   *\n+   * @param parent The container that needs to be laid out.\n+   *\n+   * @return The dimension of the layout.\n+   */\n+  public Dimension preferredLayoutSize(Container parent)\n+  {\n+    if (parent != container)\n+      throw new AWTError(\"invalid parent\");\n     \n-    BoxLayout(int way)\n-    {\n-\tthis(null,way);\n-    }\n+    return grid.preferredLayoutSize(parent);\n+  }\n+\n+  /**\n+   * Returns the minimum size of the layout.\n+   *\n+   * @param parent The container that needs to be laid out.\n+   *\n+   * @return The dimension of the layout.\n+   */\n+  public Dimension minimumLayoutSize(Container parent)\n+  {\n+    if (parent != container)\n+      throw new AWTError(\"invalid parent\");\n     \n+    return grid.minimumLayoutSize(parent);\n+  }\n \n-    public void addLayoutComponent(String name, Component comp)\n-    {\n-\tif (way == X_AXIS)\n-\t    {\n-\t\tgridbag.setColumns( gridbag.getColumns() + 1);\n-\t    }\n-\telse\n-\t    {\n-\t\tgridbag.setRows( gridbag.getRows() + 1);\n-\t    }\n-    }\n-\n-    public void removeLayoutComponent(Component comp)\n-    {\n-\tgridbag.removeLayoutComponent(comp);\n-\tif (way == X_AXIS)\n-\t    {\n-\t\tgridbag.setColumns( gridbag.getColumns() - 1);\n-\t    }\n-\telse\n-\t    {\n-\t\tgridbag.setRows( gridbag.getRows() - 1);\n-\t    }\n-    }\n-\n-    public Dimension preferredLayoutSize(Container parent)\n-    {\n-\treturn gridbag.preferredLayoutSize(parent);\n-    }\n-\n-    public Dimension minimumLayoutSize(Container parent)\n-    {\n-\treturn gridbag.minimumLayoutSize(parent);\n-    }\n-\n-    public void layoutContainer(Container parent)\n-    {\t\n-\tgridbag.layoutContainer(parent);\n-    }\n-\n-    public void addLayoutComponent ( Component child, Object constraints )\n-    {\n-\taddLayoutComponent(\"\", child);\n-    }\n-\n-    public float getLayoutAlignmentX ( Container parent )\n-    {\n-\treturn 0;\n-    }\n-\n-    public float getLayoutAlignmentY ( Container parent )\n-    {\n-\treturn 0;\n-    }\n-\n-    public void invalidateLayout ( Container parent )\n-    {\n-    }\n-\n-    public Dimension maximumLayoutSize ( Container parent )\n-    {\n-\treturn preferredLayoutSize(parent);\n-    }\n+  /**\n+   * Lays out the specified container using this layout.\n+   *\n+   * @param parent The container that needs to be laid out.\n+   */\n+  public void layoutContainer(Container parent)\n+  {\n+    if (parent != container)\n+      throw new AWTError(\"invalid parent\");\n+    \n+    grid.layoutContainer(parent);\n+  }\n+\n+  /**\n+   * Adds a component to the layout.\n+   *\n+   * @param child The component to add to the layout.\n+   * @param constraints The constraints for the component in the layout.\n+   */\n+  public void addLayoutComponent(Component child, Object constraints)\n+  {\n+    addLayoutComponent(\"\", child);\n+  }\n+\n+  /**\n+   * Returns the alignment along the X axis for the container.\n+   *\n+   * @param parent The container that needs to be laid out.\n+   *\n+   * @return The alignment.\n+   */\n+  public float getLayoutAlignmentX(Container parent)\n+  {\n+    if (parent != container)\n+      throw new AWTError(\"invalid parent\");\n+    \n+    return 0;\n+  }\n+\n+  /**\n+   * Returns the alignment along the Y axis for the container.\n+   *\n+   * @param parent The container that needs to be laid out.\n+   *\n+   * @return The alignment.\n+   */\n+  public float getLayoutAlignmentY(Container parent)\n+  {\n+    if (parent != container)\n+      throw new AWTError(\"invalid parent\");\n+    \n+    return 0;\n+  }\n+\n+  /**\n+   * Invalidates the layout.\n+   *\n+   * @param parent The container that needs to be laid out.\n+   */\n+  public void invalidateLayout(Container parent)\n+  {\n+    if (parent != container)\n+      throw new AWTError(\"invalid parent\");\n+  }\n+\n+  /**\n+   * Returns the maximum size of the layout gived the components\n+   * in the given container.\n+   *\n+   * @param parent The container that needs to be laid out.\n+   *\n+   * @return The dimension of the layout.\n+   */\n+  public Dimension maximumLayoutSize(Container parent)\n+  {\n+    if (parent != container)\n+      throw new AWTError(\"invalid parent\");\n+    \n+    return preferredLayoutSize(parent);\n+  }\n }"}]}