{"sha": "316b2a2d842eca1cf1a2f31afba946d6328c5477", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE2YjJhMmQ4NDJlY2ExY2YxYTJmMzFhZmJhOTQ2ZDYzMjhjNTQ3Nw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-02-14T13:14:51Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-02-14T13:14:51Z"}, "message": "Check array indices in object_address_invariant_in_loop_p (PR 84357)\n\nobject_address_invariant_in_loop_p ignored ARRAY_REF indices on\nthe basis that:\n\n\t  /* Index of the ARRAY_REF was zeroed in analyze_indices, thus we only\n\t     need to check the stride and the lower bound of the reference.  */\n\nThat was true back in 2007 when the code was added:\n\nstatic void\ndr_analyze_indices (struct data_reference *dr, struct loop *nest)\n{\n  [...]\n  while (handled_component_p (aref))\n    {\n      if (TREE_CODE (aref) == ARRAY_REF)\n        {\n          op = TREE_OPERAND (aref, 1);\n          access_fn = analyze_scalar_evolution (loop, op);\n          access_fn = resolve_mixers (nest, access_fn);\n          VEC_safe_push (tree, heap, access_fns, access_fn);\n\n          TREE_OPERAND (aref, 1) = build_int_cst (TREE_TYPE (op), 0);\n        }\n\n      aref = TREE_OPERAND (aref, 0);\n    }\n\nbut the assignment was removed a few years ago.  We were therefore\ntreating \"two->arr[i]\" and \"three->arr[i]\" as loop invariant.\n\n2018-02-14  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\tPR tree-optimization/84357\n\t* tree-data-ref.c (object_address_invariant_in_loop_p): Check\n\toperand 1 of an ARRAY_REF too.\n\ngcc/testsuite/\n\tPR tree-optimization/84357\n\t* gcc.dg/vect/pr84357.c: New test.\n\nFrom-SVN: r257657", "tree": {"sha": "0d307819facf0f00f38dba2e76114d6b8131c3e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d307819facf0f00f38dba2e76114d6b8131c3e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/316b2a2d842eca1cf1a2f31afba946d6328c5477", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/316b2a2d842eca1cf1a2f31afba946d6328c5477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/316b2a2d842eca1cf1a2f31afba946d6328c5477", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/316b2a2d842eca1cf1a2f31afba946d6328c5477/comments", "author": null, "committer": null, "parents": [{"sha": "06e972705d2459498212969adac45c592c7a02bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06e972705d2459498212969adac45c592c7a02bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06e972705d2459498212969adac45c592c7a02bb"}], "stats": {"total": 53, "additions": 46, "deletions": 7}, "files": [{"sha": "cc294407691ba2feb7d823e4a64a52dcdfab50f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316b2a2d842eca1cf1a2f31afba946d6328c5477/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316b2a2d842eca1cf1a2f31afba946d6328c5477/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=316b2a2d842eca1cf1a2f31afba946d6328c5477", "patch": "@@ -1,3 +1,9 @@\n+2018-02-14  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR tree-optimization/84357\n+\t* tree-data-ref.c (object_address_invariant_in_loop_p): Check\n+\toperand 1 of an ARRAY_REF too.\n+\n 2018-02-14  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/83831"}, {"sha": "473a2723012b298c207ac94fc5229e1359815b3c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316b2a2d842eca1cf1a2f31afba946d6328c5477/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316b2a2d842eca1cf1a2f31afba946d6328c5477/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=316b2a2d842eca1cf1a2f31afba946d6328c5477", "patch": "@@ -1,3 +1,8 @@\n+2018-02-14  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR tree-optimization/84357\n+\t* gcc.dg/vect/pr84357.c: New test.\n+\n 2018-02-14  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/83831"}, {"sha": "cd3cc4a92ed29639d25a8786a62315004de8f077", "filename": "gcc/testsuite/gcc.dg/vect/pr84357.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316b2a2d842eca1cf1a2f31afba946d6328c5477/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr84357.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316b2a2d842eca1cf1a2f31afba946d6328c5477/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr84357.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr84357.c?ref=316b2a2d842eca1cf1a2f31afba946d6328c5477", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Wall\" } */\n+\n+#define COUNT 32\n+\n+typedef struct s1 {\n+    unsigned char c;\n+} s1;\n+\n+typedef struct s2\n+{\n+    char pad;\n+    s1 arr[COUNT];\n+} s2;\n+\n+typedef struct s3 {\n+    s1 arr[COUNT];\n+} s3;\n+\n+s2 * get_s2();\n+s3 * gActiveS3;\n+void foo()\n+{\n+    s3 * three = gActiveS3;\n+    s2 * two = get_s2();\n+\n+    for (int i = 0; i < COUNT; i++)\n+    {\n+        two->arr[i].c = three->arr[i].c;\n+    }\n+}"}, {"sha": "a886329966cb89361c187afebbe1870c6f06e62e", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316b2a2d842eca1cf1a2f31afba946d6328c5477/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316b2a2d842eca1cf1a2f31afba946d6328c5477/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=316b2a2d842eca1cf1a2f31afba946d6328c5477", "patch": "@@ -2200,13 +2200,10 @@ object_address_invariant_in_loop_p (const struct loop *loop, const_tree obj)\n     {\n       if (TREE_CODE (obj) == ARRAY_REF)\n \t{\n-\t  /* Index of the ARRAY_REF was zeroed in analyze_indices, thus we only\n-\t     need to check the stride and the lower bound of the reference.  */\n-\t  if (chrec_contains_symbols_defined_in_loop (TREE_OPERAND (obj, 2),\n-\t\t\t\t\t\t      loop->num)\n-\t      || chrec_contains_symbols_defined_in_loop (TREE_OPERAND (obj, 3),\n-\t\t\t\t\t\t\t loop->num))\n-\t    return false;\n+\t  for (int i = 1; i < 4; ++i)\n+\t    if (chrec_contains_symbols_defined_in_loop (TREE_OPERAND (obj, i),\n+\t\t\t\t\t\t\tloop->num))\n+\t      return false;\n \t}\n       else if (TREE_CODE (obj) == COMPONENT_REF)\n \t{"}]}