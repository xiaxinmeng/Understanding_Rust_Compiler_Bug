{"sha": "aca670a0a949d7b79bd7d70997df0e0fbbd71b5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNhNjcwYTBhOTQ5ZDdiNzliZDdkNzA5OTdkZjBlMGZiYmQ3MWI1ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-06-13T10:25:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-06-13T10:25:19Z"}, "message": "[multiple changes]\n\n2014-06-13  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma): Add local\n\tvariable Missing_Parentheses. Emit an error when a state\n\tdeclaration with options appears without parentheses. Add a\n\tguard to prevent a bogus error when a state declaration may be\n\tinterpreted as an option if a previous declaration with options\n\twas not parenthesized.\n\n2014-06-13  Robert Dewar  <dewar@adacore.com>\n\n\t* checks.adb: Validate_Alignment_Check_Warnings: New procedure\n\t(Apply_Address_Clause_Check): Make Aligment_Warnings table entry.\n\t* checks.ads (Alignment_Warnings_Record): New type.\n\t(Alignment_Warnings): New table\n\t(Validate_Alignment_Check_Warnings): New procedure.\n\t* errout.adb (Delete_Warning_And_Continuations): New procedure\n\t(Error_Msg_Internal): Set Warning_Msg (Delete_Warning): Handle\n\tWarnings_Treated_As_Errors (Finalize): Minor reformatting\n\t* errout.ads (Warning_Msg): New variable\n\t(Delete_Warning_And_Continuations): New procedure\n\t* erroutc.adb (Delete_Msg): Handle Warnings_Treated_As_Errors count.\n\t* gnat1drv.adb (Post_Compilation_Validation_Checks): New procedure.\n\n2014-06-13  Ed Schonberg  <schonberg@adacore.com>\n\n\t* a-coinho.adb, a-coinho.ads: Add Reference machinery.\n\nFrom-SVN: r211627", "tree": {"sha": "94050b936eaf1e4f99d2f8a0807cf0f887224fe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94050b936eaf1e4f99d2f8a0807cf0f887224fe3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aca670a0a949d7b79bd7d70997df0e0fbbd71b5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aca670a0a949d7b79bd7d70997df0e0fbbd71b5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aca670a0a949d7b79bd7d70997df0e0fbbd71b5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aca670a0a949d7b79bd7d70997df0e0fbbd71b5d/comments", "author": null, "committer": null, "parents": [{"sha": "d2adb45e357e4416bca760e3c98fba735e99393e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2adb45e357e4416bca760e3c98fba735e99393e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2adb45e357e4416bca760e3c98fba735e99393e"}], "stats": {"total": 501, "additions": 437, "deletions": 64}, "files": [{"sha": "7dc730c0ffd5e2a6fce109cc36d53478b42864be", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca670a0a949d7b79bd7d70997df0e0fbbd71b5d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca670a0a949d7b79bd7d70997df0e0fbbd71b5d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=aca670a0a949d7b79bd7d70997df0e0fbbd71b5d", "patch": "@@ -1,3 +1,31 @@\n+2014-06-13  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Add local\n+\tvariable Missing_Parentheses. Emit an error when a state\n+\tdeclaration with options appears without parentheses. Add a\n+\tguard to prevent a bogus error when a state declaration may be\n+\tinterpreted as an option if a previous declaration with options\n+\twas not parenthesized.\n+\n+2014-06-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* checks.adb: Validate_Alignment_Check_Warnings: New procedure\n+\t(Apply_Address_Clause_Check): Make Aligment_Warnings table entry.\n+\t* checks.ads (Alignment_Warnings_Record): New type.\n+\t(Alignment_Warnings): New table\n+\t(Validate_Alignment_Check_Warnings): New procedure.\n+\t* errout.adb (Delete_Warning_And_Continuations): New procedure\n+\t(Error_Msg_Internal): Set Warning_Msg (Delete_Warning): Handle\n+\tWarnings_Treated_As_Errors (Finalize): Minor reformatting\n+\t* errout.ads (Warning_Msg): New variable\n+\t(Delete_Warning_And_Continuations): New procedure\n+\t* erroutc.adb (Delete_Msg): Handle Warnings_Treated_As_Errors count.\n+\t* gnat1drv.adb (Post_Compilation_Validation_Checks): New procedure.\n+\n+2014-06-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* a-coinho.adb, a-coinho.ads: Add Reference machinery.\n+\n 2014-06-13  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* errout.adb (SPARK_Msg_N): New routine."}, {"sha": "7fb7bece45dab179b22b22e5d2a3d1a7e4fdace5", "filename": "gcc/ada/a-coinho.adb", "status": "modified", "additions": 80, "deletions": 4, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca670a0a949d7b79bd7d70997df0e0fbbd71b5d/gcc%2Fada%2Fa-coinho.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca670a0a949d7b79bd7d70997df0e0fbbd71b5d/gcc%2Fada%2Fa-coinho.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinho.adb?ref=aca670a0a949d7b79bd7d70997df0e0fbbd71b5d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---             Copyright (C) 2012, Free Software Foundation, Inc.           --\n+--             Copyright (C) 2014, Free Software Foundation, Inc.           --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -62,6 +62,13 @@ package body Ada.Containers.Indefinite_Holders is\n       Container.Busy := 0;\n    end Adjust;\n \n+   overriding procedure Adjust (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         Control.Container.Busy := Control.Container.Busy + 1;\n+      end if;\n+   end Adjust;\n+\n    ------------\n    -- Assign --\n    ------------\n@@ -94,16 +101,30 @@ package body Ada.Containers.Indefinite_Holders is\n       Free (Container.Element);\n    end Clear;\n \n+   ------------------------\n+   -- Constant_Reference --\n+   ------------------------\n+\n+   function Constant_Reference\n+     (Container : aliased Holder) return Constant_Reference_Type\n+   is\n+      Ref : constant Constant_Reference_Type :=\n+              (Element => Container.Element,\n+               Control => (Controlled with Container'Unrestricted_Access));\n+   begin\n+      return Ref;\n+   end Constant_Reference;\n+\n    ----------\n    -- Copy --\n    ----------\n \n    function Copy (Source : Holder) return Holder is\n    begin\n       if Source.Element = null then\n-         return (AF.Controlled with null, 0);\n+         return (Controlled with null, 0);\n       else\n-         return (AF.Controlled with new Element_Type'(Source.Element.all), 0);\n+         return (Controlled with new Element_Type'(Source.Element.all), 0);\n       end if;\n    end Copy;\n \n@@ -133,6 +154,16 @@ package body Ada.Containers.Indefinite_Holders is\n       Free (Container.Element);\n    end Finalize;\n \n+   overriding procedure Finalize (Control : in out Reference_Control_Type)\n+   is\n+   begin\n+      if Control.Container /= null then\n+         Control.Container.Busy := Control.Container.Busy - 1;\n+\n+      end if;\n+      Control.Container := null;\n+   end Finalize;\n+\n    --------------\n    -- Is_Empty --\n    --------------\n@@ -207,6 +238,36 @@ package body Ada.Containers.Indefinite_Holders is\n       end if;\n    end Read;\n \n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n+   ---------------\n+   -- Reference --\n+   ---------------\n+\n+   function Reference\n+     (Container : aliased in out Holder) return Reference_Type\n+   is\n+      Ref : constant Reference_Type :=\n+              (Element => Container.Element,\n+               Control => (Controlled with Container'Unrestricted_Access));\n+   begin\n+      return Ref;\n+   end Reference;\n+\n    ---------------------\n    -- Replace_Element --\n    ---------------------\n@@ -247,7 +308,7 @@ package body Ada.Containers.Indefinite_Holders is\n       pragma Unsuppress (Accessibility_Check);\n \n    begin\n-      return (AF.Controlled with new Element_Type'(New_Item), 0);\n+      return (Controlled with new Element_Type'(New_Item), 0);\n    end To_Holder;\n \n    --------------------\n@@ -293,5 +354,20 @@ package body Ada.Containers.Indefinite_Holders is\n          Element_Type'Output (Stream, Container.Element.all);\n       end if;\n    end Write;\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n \n end Ada.Containers.Indefinite_Holders;"}, {"sha": "5edfc64770be73bc46a7c40a28367a5b2d5cbbc2", "filename": "gcc/ada/a-coinho.ads", "status": "modified", "additions": 73, "deletions": 3, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca670a0a949d7b79bd7d70997df0e0fbbd71b5d/gcc%2Fada%2Fa-coinho.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca670a0a949d7b79bd7d70997df0e0fbbd71b5d/gcc%2Fada%2Fa-coinho.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinho.ads?ref=aca670a0a949d7b79bd7d70997df0e0fbbd71b5d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---             Copyright (C) 2011, Free Software Foundation, Inc.           --\n+--             Copyright (C) 2014, Free Software Foundation, Inc.           --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -62,10 +62,29 @@ package Ada.Containers.Indefinite_Holders is\n    procedure Query_Element\n      (Container : Holder;\n       Process   : not null access procedure (Element : Element_Type));\n+\n    procedure Update_Element\n      (Container : Holder;\n       Process   : not null access procedure (Element : in out Element_Type));\n \n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type) is private\n+   with\n+      Implicit_Dereference => Element;\n+\n+   type Reference_Type\n+     (Element : not null access Element_Type) is private\n+   with\n+      Implicit_Dereference => Element;\n+\n+   function Constant_Reference\n+     (Container : aliased Holder) return Constant_Reference_Type;\n+   pragma Inline (Constant_Reference);\n+\n+   function Reference\n+     (Container : aliased in out Holder) return Reference_Type;\n+   pragma Inline (Reference);\n+\n    procedure Assign (Target : in out Holder; Source : Holder);\n \n    function Copy (Source : Holder) return Holder;\n@@ -74,10 +93,14 @@ package Ada.Containers.Indefinite_Holders is\n \n private\n \n-   package AF renames Ada.Finalization;\n+   use Ada.Finalization;\n+   use Ada.Streams;\n \n    type Element_Access is access all Element_Type;\n \n+   type Holder_Access is access all Holder;\n+   for Holder_Access'Storage_Size use 0;\n+\n    procedure Read\n      (Stream    : not null access Ada.Streams.Root_Stream_Type'Class;\n       Container : out Holder);\n@@ -96,6 +119,53 @@ private\n    overriding procedure Adjust (Container : in out Holder);\n    overriding procedure Finalize (Container : in out Holder);\n \n-   Empty_Holder : constant Holder := (AF.Controlled with null, 0);\n+   type Reference_Control_Type is new Controlled with\n+   record\n+      Container : Holder_Access;\n+   end record;\n+\n+   overriding procedure Adjust (Control : in out Reference_Control_Type);\n+   pragma Inline (Adjust);\n+\n+   overriding procedure Finalize (Control : in out Reference_Control_Type);\n+   pragma Inline (Finalize);\n+\n+   type Constant_Reference_Type\n+      (Element : not null access constant Element_Type)\n+   is record\n+      Control : Reference_Control_Type;\n+   end record;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Read use Read;\n+\n+   type Reference_Type\n+     (Element : not null access Element_Type)\n+   is record\n+      Control : Reference_Control_Type;\n+   end record;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Reference_Type);\n+\n+   for Reference_Type'Write use Write;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Reference_Type);\n+\n+   for Reference_Type'Read use Read;\n+\n+   Empty_Holder : constant Holder := (Controlled with null, 0);\n \n end Ada.Containers.Indefinite_Holders;"}, {"sha": "61d0324cc7d69684e86d012ba1d0bbe43857328f", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 47, "deletions": 17, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca670a0a949d7b79bd7d70997df0e0fbbd71b5d/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca670a0a949d7b79bd7d70997df0e0fbbd71b5d/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=aca670a0a949d7b79bd7d70997df0e0fbbd71b5d", "patch": "@@ -27,15 +27,14 @@ with Atree;    use Atree;\n with Casing;   use Casing;\n with Debug;    use Debug;\n with Einfo;    use Einfo;\n-with Errout;   use Errout;\n+with Elists;   use Elists;\n+with Eval_Fat; use Eval_Fat;\n+with Exp_Ch11; use Exp_Ch11;\n with Exp_Ch2;  use Exp_Ch2;\n with Exp_Ch4;  use Exp_Ch4;\n-with Exp_Ch11; use Exp_Ch11;\n with Exp_Pakd; use Exp_Pakd;\n with Exp_Util; use Exp_Util;\n-with Elists;   use Elists;\n with Expander; use Expander;\n-with Eval_Fat; use Eval_Fat;\n with Freeze;   use Freeze;\n with Lib;      use Lib;\n with Nlists;   use Nlists;\n@@ -47,9 +46,9 @@ with Rident;   use Rident;\n with Rtsfind;  use Rtsfind;\n with Sem;      use Sem;\n with Sem_Aux;  use Sem_Aux;\n-with Sem_Eval; use Sem_Eval;\n with Sem_Ch3;  use Sem_Ch3;\n with Sem_Ch8;  use Sem_Ch8;\n+with Sem_Eval; use Sem_Eval;\n with Sem_Res;  use Sem_Res;\n with Sem_Util; use Sem_Util;\n with Sem_Warn; use Sem_Warn;\n@@ -589,7 +588,7 @@ package body Checks is\n       Expr : Node_Id;\n       --  Address expression (not necessarily the same as Aexp, for example\n       --  when Aexp is a reference to a constant, in which case Expr gets\n-      --  reset to reference the value expression of the constant.\n+      --  reset to reference the value expression of the constant).\n \n       procedure Compile_Time_Bad_Alignment;\n       --  Post error warnings when alignment is known to be incompatible. Note\n@@ -758,21 +757,32 @@ package body Checks is\n                          Prefix         => New_Occurrence_Of (E, Loc),\n                          Attribute_Name => Name_Alignment)),\n                  Right_Opnd => Make_Integer_Literal (Loc, Uint_0)),\n-             Reason => PE_Misaligned_Address_Value));\n+                       Reason    => PE_Misaligned_Address_Value));\n+\n+         Warning_Msg := No_Error_Msg;\n          Analyze (First (Actions (N)), Suppress => All_Checks);\n \n-         --  If the address clause generates an alignment check and we are\n-         --  in ZFP or some restricted run-time, add a warning to explain\n-         --  the propagation warning that is generated by the check.\n+         --  If the address clause generated a warning message (for example,\n+         --  from Warn_On_Non_Local_Exception mode with the active restriction\n+         --  No_Exception_Propagation).\n+\n+         if Warning_Msg /= No_Error_Msg then\n+\n+            --  If the expression has a known at compile time value, then\n+            --  once we know the alignment of the type, we can check if the\n+            --  exception will be raised or not, and if not, we don't need\n+            --  the warning so we will kill the warning later on.\n+\n+            if Compile_Time_Known_Value (Expr) then\n+               Alignment_Warnings.Append\n+                 ((E => E, A => Expr_Value (Expr), W => Warning_Msg));\n+            end if;\n+\n+            --  Add explanation of the warning that is generated by the check\n \n-         if Nkind (First (Actions (N))) = N_Raise_Program_Error\n-           and then not Warnings_Off (E)\n-           and then Warn_On_Non_Local_Exception\n-           and then Restriction_Active (No_Exception_Propagation)\n-         then\n             Error_Msg_N\n-              (\"address value may be incompatible with alignment of object?\",\n-               N);\n+              (\"\\address value may be incompatible with alignment \"\n+               & \"of object?X?\", AC);\n          end if;\n \n          return;\n@@ -9483,6 +9493,26 @@ package body Checks is\n       end if;\n    end Tag_Checks_Suppressed;\n \n+   ---------------------------------------\n+   -- Validate_Alignment_Check_Warnings --\n+   ---------------------------------------\n+\n+   procedure Validate_Alignment_Check_Warnings is\n+   begin\n+      for J in Alignment_Warnings.First .. Alignment_Warnings.Last loop\n+         declare\n+            AWR : Alignment_Warnings_Record\n+                    renames Alignment_Warnings.Table (J);\n+         begin\n+            if Known_Alignment (AWR.E)\n+              and then AWR.A mod Alignment (AWR.E) = 0\n+            then\n+               Delete_Warning_And_Continuations (AWR.W);\n+            end if;\n+         end;\n+      end loop;\n+   end Validate_Alignment_Check_Warnings;\n+\n    --------------------------\n    -- Validity_Check_Range --\n    --------------------------"}, {"sha": "1c6b810848d5e14dd6e87ea82a9b65c29d5fb419", "filename": "gcc/ada/checks.ads", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca670a0a949d7b79bd7d70997df0e0fbbd71b5d/gcc%2Fada%2Fchecks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca670a0a949d7b79bd7d70997df0e0fbbd71b5d/gcc%2Fada%2Fchecks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.ads?ref=aca670a0a949d7b79bd7d70997df0e0fbbd71b5d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,6 +35,7 @@\n --  This always occurs whether checks are suppressed or not. Dynamic range\n --  checks are, of course, not inserted if checks are suppressed.\n \n+with Errout; use Errout;\n with Namet;  use Namet;\n with Table;\n with Types;  use Types;\n@@ -79,6 +80,53 @@ package Checks is\n    --  Returns current overflow checking mode, taking into account whether\n    --  we are inside an assertion expression.\n \n+   ------------------------------------------\n+   --  Control of Alignment Check Warnings --\n+   ------------------------------------------\n+\n+   --  When we have address clauses, there is an issue of whether the address\n+   --  specified is appropriate to the alignment. In the general case where the\n+   --  address is dynamic, we generate a check and a possible warning (this\n+   --  warning occurs for example if we have a restricted run time with the\n+   --  restriction No_Exception_Propagation). We also issue this warning in\n+   --  the case where the address is static, but we don't know the alignment\n+   --  at the time we process the address clause. In such a case, we issue the\n+   --  warning, but we may be able to find out later (after the back end has\n+   --  annotated the actual alignment chosen) that the warning was not needed.\n+\n+   --  To deal with deleting these potentially annoying warnings, we save the\n+   --  warning information in a table, and then delete the waranings in the\n+   --  post compilation validation stage if we can tell that the check would\n+   --  never fail (in general the back end will also optimize away the check\n+   --  in such cases).\n+\n+   --  Table used to record information\n+\n+   type Alignment_Warnings_Record is record\n+      E : Entity_Id;\n+      --  Entity whose alignment possibly warrants a warning\n+\n+      A : Uint;\n+      --  Compile time known value of address clause for which the alignment\n+      --  is to be checked once we know the alignment.\n+\n+      W : Error_Msg_Id;\n+      --  Id of warning message we might delete\n+   end record;\n+\n+   package Alignment_Warnings is new Table.Table (\n+     Table_Component_Type => Alignment_Warnings_Record,\n+     Table_Index_Type     => Int,\n+     Table_Low_Bound      => 0,\n+     Table_Initial        => 10,\n+     Table_Increment      => 200,\n+     Table_Name           => \"Alignment_Warnings\");\n+\n+   procedure Validate_Alignment_Check_Warnings;\n+   --  This routine is called after back annotation of type data to delete any\n+   --  alignment warnings that turn out to be false alarms, based on knowing\n+   --  the actual alignment, and a compile-time known alignment value.\n+\n    -------------------------------------------\n    -- Procedures to Activate Checking Flags --\n    -------------------------------------------"}, {"sha": "a2e9b45f1f328019021bb1e7712facdd628d9eca", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca670a0a949d7b79bd7d70997df0e0fbbd71b5d/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca670a0a949d7b79bd7d70997df0e0fbbd71b5d/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=aca670a0a949d7b79bd7d70997df0e0fbbd71b5d", "patch": "@@ -249,6 +249,38 @@ package body Errout is\n       end if;\n    end Compilation_Errors;\n \n+   --------------------------------------\n+   -- Delete_Warning_And_Continuations --\n+   --------------------------------------\n+\n+   procedure Delete_Warning_And_Continuations (Msg : Error_Msg_Id) is\n+      Id : Error_Msg_Id;\n+\n+   begin\n+      pragma Assert (not Errors.Table (Msg).Msg_Cont);\n+\n+      Id := Msg;\n+      loop\n+         declare\n+            M : Error_Msg_Object renames Errors.Table (Id);\n+\n+         begin\n+            if not M.Deleted then\n+               M.Deleted := True;\n+               Warnings_Detected := Warnings_Detected - 1;\n+\n+               if M.Warn_Err then\n+                  Warnings_Treated_As_Errors := Warnings_Treated_As_Errors + 1;\n+               end if;\n+            end if;\n+\n+            Id := M.Next;\n+            exit when Id = No_Error_Msg;\n+            exit when not Errors.Table (Id).Msg_Cont;\n+         end;\n+      end loop;\n+   end Delete_Warning_And_Continuations;\n+\n    ---------------\n    -- Error_Msg --\n    ---------------\n@@ -1117,6 +1149,14 @@ package body Errout is\n          end if;\n       end if;\n \n+      --  Record warning message issued\n+\n+      if Errors.Table (Cur_Msg).Warn\n+        and then not Errors.Table (Cur_Msg).Msg_Cont\n+      then\n+         Warning_Msg := Cur_Msg;\n+      end if;\n+\n       --  If too many warnings turn off warnings\n \n       if Maximum_Messages /= 0 then\n@@ -1296,7 +1336,7 @@ package body Errout is\n       F   : Error_Msg_Id;\n \n       procedure Delete_Warning (E : Error_Msg_Id);\n-      --  Delete a message if not already deleted and adjust warning count\n+      --  Delete a warning msg if not already deleted and adjust warning count\n \n       --------------------\n       -- Delete_Warning --\n@@ -1307,10 +1347,14 @@ package body Errout is\n          if not Errors.Table (E).Deleted then\n             Errors.Table (E).Deleted := True;\n             Warnings_Detected := Warnings_Detected - 1;\n+\n+            if Errors.Table (E).Warn_Err then\n+               Warnings_Treated_As_Errors := Warnings_Treated_As_Errors + 1;\n+            end if;\n          end if;\n       end Delete_Warning;\n \n-   --  Start of message for Finalize\n+   --  Start of processing for Finalize\n \n    begin\n       --  Set Prev pointers\n@@ -1360,11 +1404,12 @@ package body Errout is\n             then\n                Delete_Warning (Cur);\n \n-               --  If this is a continuation, delete previous messages\n+               --  If this is a continuation, delete previous parts of message\n \n                F := Cur;\n                while Errors.Table (F).Msg_Cont loop\n                   F := Errors.Table (F).Prev;\n+                  exit when F = No_Error_Msg;\n                   Delete_Warning (F);\n                end loop;\n "}, {"sha": "303c21494ebd2160432db768e4a435809fa2982e", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca670a0a949d7b79bd7d70997df0e0fbbd71b5d/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca670a0a949d7b79bd7d70997df0e0fbbd71b5d/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=aca670a0a949d7b79bd7d70997df0e0fbbd71b5d", "patch": "@@ -615,6 +615,16 @@ package Errout is\n    --  A constant which is different from any value returned by Get_Error_Id.\n    --  Typically used by a client to indicate absense of a saved Id value.\n \n+   Warning_Msg : Error_Msg_Id := No_Error_Msg;\n+   --  This is set if a warning message is generated to the ID of the resulting\n+   --  message. Continuation messages have no effect. It is legitimate for the\n+   --  client to set this to No_Error_Msg and then test it to see if a warning\n+   --  message has been issued.\n+\n+   procedure Delete_Warning_And_Continuations (Msg : Error_Msg_Id);\n+   --  Deletes the given warning message and all its continuations. This is\n+   --  typically used in conjunction with reading the value of Warning_Msg.\n+\n    function Get_Msg_Id return Error_Msg_Id renames Erroutc.Get_Msg_Id;\n    --  Returns the Id of the message most recently posted using one of the\n    --  Error_Msg routines."}, {"sha": "66ab8f18452d0df705d12815dc4b8119639d154a", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca670a0a949d7b79bd7d70997df0e0fbbd71b5d/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca670a0a949d7b79bd7d70997df0e0fbbd71b5d/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=aca670a0a949d7b79bd7d70997df0e0fbbd71b5d", "patch": "@@ -140,6 +140,11 @@ package body Erroutc is\n             if Errors.Table (D).Warn or else Errors.Table (D).Style then\n                Warnings_Detected := Warnings_Detected - 1;\n \n+               if Errors.Table (D).Warn_Err then\n+                  Warnings_Treated_As_Errors :=\n+                    Warnings_Treated_As_Errors + 1;\n+               end if;\n+\n             else\n                Total_Errors_Detected := Total_Errors_Detected - 1;\n "}, {"sha": "aa91f7d4cd5ae08b71ac44d6684642dd36c3ddb5", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 42, "deletions": 22, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca670a0a949d7b79bd7d70997df0e0fbbd71b5d/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca670a0a949d7b79bd7d70997df0e0fbbd71b5d/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=aca670a0a949d7b79bd7d70997df0e0fbbd71b5d", "patch": "@@ -25,6 +25,7 @@\n \n with Atree;    use Atree;\n with Back_End; use Back_End;\n+with Checks;\n with Comperr;\n with Csets;    use Csets;\n with Debug;    use Debug;\n@@ -110,6 +111,13 @@ procedure Gnat1drv is\n    --  Called when we are not generating code, to check if -gnatR was requested\n    --  and if so, explain that we will not be honoring the request.\n \n+   procedure Post_Compilation_Validation_Checks;\n+   --  This procedure performs various validation checks that have to be left\n+   --  to the end of the compilation process, after generating code but before\n+   --  issuing error messages. In particular, these checks generally require\n+   --  the information provided by the back end in back annotation of declared\n+   --  entities (e.g. actual size and alignment values chosen by the back end).\n+\n    ----------------------------\n    -- Adjust_Global_Switches --\n    ----------------------------\n@@ -746,6 +754,35 @@ procedure Gnat1drv is\n       end if;\n    end Check_Rep_Info;\n \n+   ----------------------------------------\n+   -- Post_Compilation_Validation_Checks --\n+   ----------------------------------------\n+\n+   procedure Post_Compilation_Validation_Checks is\n+   begin\n+      --  Validate alignment check warnings. In some cases we generate warnings\n+      --  about possible alignment errors because we don't know the alignment\n+      --  that will be chosen by the back end. This routine is in charge of\n+      --  getting rid of those warnings if we can tell they are not needed.\n+\n+      Checks.Validate_Alignment_Check_Warnings;\n+\n+      --  Validate unchecked conversions (using the values for size and\n+      --  alignment annotated by the backend where possible).\n+\n+      Sem_Ch13.Validate_Unchecked_Conversions;\n+\n+      --  Validate address clauses (again using alignment values annotated\n+      --  by the backend where possible).\n+\n+      Sem_Ch13.Validate_Address_Clauses;\n+\n+      --  Validate independence pragmas (again using values annotated by\n+      --  the back end for component layout etc.)\n+\n+      Sem_Ch13.Validate_Independence;\n+   end Post_Compilation_Validation_Checks;\n+\n --  Start of processing for Gnat1drv\n \n begin\n@@ -897,9 +934,7 @@ begin\n \n       if Compilation_Errors then\n          Treepr.Tree_Dump;\n-         Sem_Ch13.Validate_Unchecked_Conversions;\n-         Sem_Ch13.Validate_Address_Clauses;\n-         Sem_Ch13.Validate_Independence;\n+         Post_Compilation_Validation_Checks;\n          Errout.Output_Messages;\n          Namet.Finalize;\n \n@@ -1095,9 +1130,7 @@ begin\n \n          Set_Standard_Output;\n \n-         Sem_Ch13.Validate_Unchecked_Conversions;\n-         Sem_Ch13.Validate_Address_Clauses;\n-         Sem_Ch13.Validate_Independence;\n+         Post_Compilation_Validation_Checks;\n          Errout.Finalize (Last_Call => True);\n          Errout.Output_Messages;\n          Treepr.Tree_Dump;\n@@ -1137,9 +1170,7 @@ begin\n             or else Targparm.Frontend_Layout_On_Target\n             or else Targparm.VM_Target /= No_VM)\n       then\n-         Sem_Ch13.Validate_Unchecked_Conversions;\n-         Sem_Ch13.Validate_Address_Clauses;\n-         Sem_Ch13.Validate_Independence;\n+         Post_Compilation_Validation_Checks;\n          Errout.Finalize (Last_Call => True);\n          Errout.Output_Messages;\n          Write_ALI (Object => False);\n@@ -1189,20 +1220,9 @@ begin\n \n       Exp_CG.Generate_CG_Output;\n \n-      --  Validate unchecked conversions (using the values for size and\n-      --  alignment annotated by the backend where possible).\n-\n-      Sem_Ch13.Validate_Unchecked_Conversions;\n-\n-      --  Validate address clauses (again using alignment values annotated\n-      --  by the backend where possible).\n-\n-      Sem_Ch13.Validate_Address_Clauses;\n+      --  Perform post compilation validation checks\n \n-      --  Validate independence pragmas (again using values annotated by\n-      --  the back end for component layout etc.)\n-\n-      Sem_Ch13.Validate_Independence;\n+      Post_Compilation_Validation_Checks;\n \n       --  Now we complete output of errors, rep info and the tree info. These\n       --  are delayed till now, since it is perfectly possible for gigi to"}, {"sha": "f95fb3b12c926524b816a38cd0e100454f7ff9cc", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 55, "deletions": 14, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca670a0a949d7b79bd7d70997df0e0fbbd71b5d/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca670a0a949d7b79bd7d70997df0e0fbbd71b5d/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=aca670a0a949d7b79bd7d70997df0e0fbbd71b5d", "patch": "@@ -10133,6 +10133,9 @@ package body Sem_Prag is\n          --  ABSTRACT_STATE ::= name\n \n          when Pragma_Abstract_State => Abstract_State : declare\n+            Missing_Parentheses : Boolean := False;\n+            --  Flag set when a state declaration with options is not properly\n+            --  parenthesized.\n \n             --  Flags used to verify the consistency of states\n \n@@ -10569,25 +10572,63 @@ package body Sem_Prag is\n \n                   Opt := First (Expressions (State));\n                   while Present (Opt) loop\n-                     if Nkind (Opt) = N_Identifier\n-                       and then Chars (Opt) = Name_External\n-                     then\n-                        Analyze_External_Option (Opt);\n+                     if Nkind (Opt) = N_Identifier then\n+                        if Chars (Opt) = Name_External then\n+                           Analyze_External_Option (Opt);\n+\n+                        --  Option Part_Of without an encapsulating state is\n+                        --  illegal. (SPARK RM 7.1.4(9)).\n \n-                     --  When an illegal option Part_Of is without a parent\n-                     --  state, it appears in the list of expression of the\n-                     --  aggregate rather than the component associations\n-                     --  (SPARK RM 7.1.4(9)).\n+                        elsif Chars (Opt) = Name_Part_Of then\n+                           SPARK_Msg_N\n+                             (\"indicator Part_Of must denote an abstract \"\n+                              & \"state\", Opt);\n+\n+                        --  Do not emit an error message when a previous state\n+                        --  declaration with options was not parenthesized as\n+                        --  the option is actually another state declaration.\n+                        --\n+                        --    with Abstract_State\n+                        --      (State_1 with ...,   --  missing parentheses\n+                        --      (State_2 with ...),\n+                        --       State_3)            --  ok state declaration\n+\n+                        elsif Missing_Parentheses then\n+                           null;\n+\n+                        --  Otherwise the option is not allowed. Note that it\n+                        --  is not possible to distinguish between an option\n+                        --  and a state declaration when a previous state with\n+                        --  options not properly parentheses.\n+                        --\n+                        --    with Abstract_State\n+                        --      (State_1 with ...,  --  missing parentheses\n+                        --       State_2);          --  could be an option\n \n-                     elsif Chars (Opt) = Name_Part_Of then\n+                        else\n+                           SPARK_Msg_N\n+                             (\"simple option not allowed in state declaration\",\n+                              Opt);\n+                        end if;\n+\n+                     --  Catch a case where missing parentheses around a state\n+                     --  declaration with options cause a subsequent state\n+                     --  declaration with options to be treated as an option.\n+                     --\n+                     --    with Abstract_State\n+                     --      (State_1 with ...,   --  missing parentheses\n+                     --      (State_2 with ...))\n+\n+                     elsif Nkind (Opt) = N_Extension_Aggregate then\n+                        Missing_Parentheses := True;\n                         SPARK_Msg_N\n-                          (\"indicator Part_Of must denote an abstract state\",\n-                           Opt);\n+                          (\"state declaration must be parenthesized\",\n+                           Ancestor_Part (State));\n+\n+                     --  Otherwise the option is malformed\n \n                      else\n-                        SPARK_Msg_N\n-                          (\"simple option not allowed in state declaration\",\n-                           Opt);\n+                        SPARK_Msg_N (\"malformed option\", Opt);\n                      end if;\n \n                      Next (Opt);"}]}