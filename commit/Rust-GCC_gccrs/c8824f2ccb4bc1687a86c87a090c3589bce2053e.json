{"sha": "c8824f2ccb4bc1687a86c87a090c3589bce2053e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg4MjRmMmNjYjRiYzE2ODdhODZjODdhMDkwYzM1ODliY2UyMDUzZQ==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2014-11-11T17:37:35Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2014-11-11T17:37:35Z"}, "message": "[Patch AArch64] Fix up BSL expander for floating point types\n\ngcc/\n\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_simd_bsl<mode>_internal): Remove float cases, canonicalize.\n\t(aarch64_simd_bsl<mode>): Add gen_lowpart expressions where we\n\tare punning between float vectors and integer vectors.\n\ngcc/testsuite/\n\n\t* gcc.target/aarch64/vbslq_f64_1.c: New.\n\t* gcc.target/aarch64/vbslq_f64_2.c: Likewise.\n\t* gcc.target/aarch64/vbslq_u64_1.c: Likewise.\n\t* gcc.target/aarch64/vbslq_u64_2.c: Likewise.\n\nFrom-SVN: r217362", "tree": {"sha": "64feec8b8842992d131749045b465fa4bae5118a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64feec8b8842992d131749045b465fa4bae5118a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8824f2ccb4bc1687a86c87a090c3589bce2053e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8824f2ccb4bc1687a86c87a090c3589bce2053e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8824f2ccb4bc1687a86c87a090c3589bce2053e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8824f2ccb4bc1687a86c87a090c3589bce2053e/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "50457b9e2151e9cc3d11da733bd885cf148a29a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50457b9e2151e9cc3d11da733bd885cf148a29a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50457b9e2151e9cc3d11da733bd885cf148a29a3"}], "stats": {"total": 130, "additions": 120, "deletions": 10}, "files": [{"sha": "302958455a1ec113ddc36743e0aca0999fa21b82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8824f2ccb4bc1687a86c87a090c3589bce2053e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8824f2ccb4bc1687a86c87a090c3589bce2053e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8824f2ccb4bc1687a86c87a090c3589bce2053e", "patch": "@@ -1,3 +1,10 @@\n+2014-11-11  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_simd_bsl<mode>_internal): Remove float cases, canonicalize.\n+\t(aarch64_simd_bsl<mode>): Add gen_lowpart expressions where we\n+\tare punning between float vectors and integer vectors.\n+\n 2014-11-11  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/alpha/alpha.c (alpha_emit_conditional_branch): Replace"}, {"sha": "f7012ecab07c1b38836e949c2f4e5bd0c7939b5c", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8824f2ccb4bc1687a86c87a090c3589bce2053e/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8824f2ccb4bc1687a86c87a090c3589bce2053e/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=c8824f2ccb4bc1687a86c87a090c3589bce2053e", "patch": "@@ -1924,15 +1924,15 @@\n ;;     bif op0, op1, mask\n \n (define_insn \"aarch64_simd_bsl<mode>_internal\"\n-  [(set (match_operand:VALLDIF 0 \"register_operand\"\t\t\"=w,w,w\")\n-\t(ior:VALLDIF\n-\t   (and:VALLDIF\n-\t     (match_operand:<V_cmp_result> 1 \"register_operand\"\t\" 0,w,w\")\n-\t     (match_operand:VALLDIF 2 \"register_operand\"\t\" w,w,0\"))\n-\t   (and:VALLDIF\n+  [(set (match_operand:VSDQ_I_DI 0 \"register_operand\"\t\t\"=w,w,w\")\n+\t(ior:VSDQ_I_DI\n+\t   (and:VSDQ_I_DI\n \t     (not:<V_cmp_result>\n-\t\t(match_dup:<V_cmp_result> 1))\n-\t     (match_operand:VALLDIF 3 \"register_operand\"\t\" w,0,w\"))\n+\t       (match_operand:<V_cmp_result> 1 \"register_operand\"\t\" 0,w,w\"))\n+\t     (match_operand:VSDQ_I_DI 3 \"register_operand\"\t\" w,0,w\"))\n+\t   (and:VSDQ_I_DI\n+\t     (match_dup:<V_cmp_result> 1)\n+\t     (match_operand:VSDQ_I_DI 2 \"register_operand\"\t\" w,w,0\"))\n \t))]\n   \"TARGET_SIMD\"\n   \"@\n@@ -1950,9 +1950,21 @@\n  \"TARGET_SIMD\"\n {\n   /* We can't alias operands together if they have different modes.  */\n+  rtx tmp = operands[0];\n+  if (FLOAT_MODE_P (<MODE>mode))\n+    {\n+      operands[2] = gen_lowpart (<V_cmp_result>mode, operands[2]);\n+      operands[3] = gen_lowpart (<V_cmp_result>mode, operands[3]);\n+      tmp = gen_reg_rtx (<V_cmp_result>mode);\n+    }\n   operands[1] = gen_lowpart (<V_cmp_result>mode, operands[1]);\n-  emit_insn (gen_aarch64_simd_bsl<mode>_internal (operands[0], operands[1],\n-\t\t\t\t\t\t  operands[2], operands[3]));\n+  emit_insn (gen_aarch64_simd_bsl<v_cmp_result>_internal (tmp,\n+\t\t\t\t\t\t\t  operands[1],\n+\t\t\t\t\t\t\t  operands[2],\n+\t\t\t\t\t\t\t  operands[3]));\n+  if (tmp != operands[0])\n+    emit_move_insn (operands[0], gen_lowpart (<MODE>mode, tmp));\n+\n   DONE;\n })\n "}, {"sha": "ae73a1013d199a31168d619c52a451a99c396477", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8824f2ccb4bc1687a86c87a090c3589bce2053e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8824f2ccb4bc1687a86c87a090c3589bce2053e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c8824f2ccb4bc1687a86c87a090c3589bce2053e", "patch": "@@ -1,3 +1,10 @@\n+2014-11-11  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* gcc.target/aarch64/vbslq_f64_1.c: New.\n+\t* gcc.target/aarch64/vbslq_f64_2.c: Likewise.\n+\t* gcc.target/aarch64/vbslq_u64_1.c: Likewise.\n+\t* gcc.target/aarch64/vbslq_u64_2.c: Likewise.\n+\n 2014-11-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/63265"}, {"sha": "128a1db2a663095d736836eeac6c727fc56cc238", "filename": "gcc/testsuite/gcc.target/aarch64/vbslq_f64_1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8824f2ccb4bc1687a86c87a090c3589bce2053e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvbslq_f64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8824f2ccb4bc1687a86c87a090c3589bce2053e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvbslq_f64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvbslq_f64_1.c?ref=c8824f2ccb4bc1687a86c87a090c3589bce2053e", "patch": "@@ -0,0 +1,21 @@\n+/* Test vbslq_f64 can be folded.  */\n+/* { dg-do assemble } */\n+/* { dg-options \"--save-temps -O3\" } */\n+\n+#include <arm_neon.h>\n+\n+/* Folds to ret.  */\n+\n+float32x4_t\n+fold_me (float32x4_t a, float32x4_t b)\n+{\n+  uint32x4_t mask = {-1, -1, -1, -1};\n+  return vbslq_f32 (mask, a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"bsl\\\\tv\" } } */\n+/* { dg-final { scan-assembler-not \"bit\\\\tv\" } } */\n+/* { dg-final { scan-assembler-not \"bif\\\\tv\" } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */\n+"}, {"sha": "62358bf593249fa55c177c2da42fd40c6a92948e", "filename": "gcc/testsuite/gcc.target/aarch64/vbslq_f64_2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8824f2ccb4bc1687a86c87a090c3589bce2053e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvbslq_f64_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8824f2ccb4bc1687a86c87a090c3589bce2053e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvbslq_f64_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvbslq_f64_2.c?ref=c8824f2ccb4bc1687a86c87a090c3589bce2053e", "patch": "@@ -0,0 +1,24 @@\n+/* Test vbslq_f64 can be folded.  */\n+/* { dg-do assemble } */\n+/* { dg-options \"--save-temps -O3\" } */\n+\n+#include <arm_neon.h>\n+\n+/* Should fold out one half of the BSL, leaving just a BIC.  */\n+\n+float32x4_t\n+half_fold_me (uint32x4_t mask)\n+{\n+  float32x4_t a = {0.0, 0.0, 0.0, 0.0};\n+  float32x4_t b = {2.0, 4.0, 8.0, 16.0};\n+  return vbslq_f32 (mask, a, b);\n+\n+}\n+\n+/* { dg-final { scan-assembler-not \"bsl\\\\tv\" } } */\n+/* { dg-final { scan-assembler-not \"bit\\\\tv\" } } */\n+/* { dg-final { scan-assembler-not \"bif\\\\tv\" } } */\n+/* { dg-final { scan-assembler \"bic\\\\tv\" } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */\n+"}, {"sha": "7a4892e9577c33db8dddbec92f015336271c666a", "filename": "gcc/testsuite/gcc.target/aarch64/vbslq_u64_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8824f2ccb4bc1687a86c87a090c3589bce2053e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvbslq_u64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8824f2ccb4bc1687a86c87a090c3589bce2053e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvbslq_u64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvbslq_u64_1.c?ref=c8824f2ccb4bc1687a86c87a090c3589bce2053e", "patch": "@@ -0,0 +1,17 @@\n+/* Test if a BSL-like instruction can be generated from a C idiom.  */\n+/* { dg-do assemble } */\n+/* { dg-options \"--save-temps -O3\" } */\n+\n+#include <arm_neon.h>\n+\n+/* Folds to BIF.  */\n+\n+uint32x4_t\n+vbslq_dummy_u32 (uint32x4_t a, uint32x4_t b, uint32x4_t mask)\n+{\n+  return (mask & a) | (~mask & b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"bif\\\\tv\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */\n+"}, {"sha": "5b70168e391963b2d0508ab51e0d7be541892448", "filename": "gcc/testsuite/gcc.target/aarch64/vbslq_u64_2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8824f2ccb4bc1687a86c87a090c3589bce2053e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvbslq_u64_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8824f2ccb4bc1687a86c87a090c3589bce2053e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvbslq_u64_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvbslq_u64_2.c?ref=c8824f2ccb4bc1687a86c87a090c3589bce2053e", "patch": "@@ -0,0 +1,22 @@\n+/* Test vbslq_u64 can be folded.  */\n+/* { dg-do assemble } */\n+/* { dg-options \"--save-temps -O3\" } */\n+#include <arm_neon.h>\n+\n+/* Folds to BIC.  */\n+\n+int32x4_t\n+half_fold_int (uint32x4_t mask)\n+{\n+  int32x4_t a = {0, 0, 0, 0};\n+  int32x4_t b = {2, 4, 8, 16};\n+  return vbslq_s32 (mask, a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"bsl\\\\tv\" } } */\n+/* { dg-final { scan-assembler-not \"bit\\\\tv\" } } */\n+/* { dg-final { scan-assembler-not \"bif\\\\tv\" } } */\n+/* { dg-final { scan-assembler \"bic\\\\tv\" } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */\n+"}]}