{"sha": "2900f2f2c5fb234678eb8b76564e5994ec5970b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkwMGYyZjJjNWZiMjM0Njc4ZWI4Yjc2NTY0ZTU5OTRlYzU5NzBiOQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-01-30T00:16:19Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-01-30T00:16:19Z"}, "message": "Daily bump.", "tree": {"sha": "799f882025741930be8395eeb74e4086e4263fbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/799f882025741930be8395eeb74e4086e4263fbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2900f2f2c5fb234678eb8b76564e5994ec5970b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2900f2f2c5fb234678eb8b76564e5994ec5970b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2900f2f2c5fb234678eb8b76564e5994ec5970b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2900f2f2c5fb234678eb8b76564e5994ec5970b9/comments", "author": null, "committer": null, "parents": [{"sha": "4d31df4089987bb7fb85dd07c9d181dbee40ba87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d31df4089987bb7fb85dd07c9d181dbee40ba87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d31df4089987bb7fb85dd07c9d181dbee40ba87"}], "stats": {"total": 303, "additions": 302, "deletions": 1}, "files": [{"sha": "670728aec62fa148ab595aff0b1c82cecf0ded3b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2900f2f2c5fb234678eb8b76564e5994ec5970b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2900f2f2c5fb234678eb8b76564e5994ec5970b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2900f2f2c5fb234678eb8b76564e5994ec5970b9", "patch": "@@ -1,3 +1,189 @@\n+2021-01-29  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/97701\n+\t* lra-constraints.c (in_class_p): Don't narrow class only for REG\n+\tor MEM.\n+\n+2021-01-29  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000-call.c (rs6000_expand_binup_builtin): Add\n+\tclauses for CODE_FOR_vsx_xvcvuxddp_scale and\n+\tCODE_FOR_vsx_xvcvsxddp_scale to the parameter checking code.\n+\n+2021-01-29  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/98866\n+\t* gimple-range-gori.h (gori_compute:set_range_invariant): New.\n+\t* gimple-range-gori.cc (gori_map::set_range_invariant): New.\n+\t(gori_map::m_maybe_invariant): Rename from all_outgoing.\n+\t(gori_map::gori_map): Rename all_outgoing to m_maybe_invariant.\n+\t(gori_map::is_export_p): Ditto.\n+\t(gori_map::calculate_gori): Ditto.\n+\t(gori_compute::set_range_invariant): New.\n+\t* gimple-range.cc (gimple_ranger::range_of_stmt): Set range\n+\tinvariant for pointers evaluating to [1, +INF].\n+\n+2021-01-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR rtl-optimization/98863\n+\t* config/i386/i386-features.c (remove_partial_avx_dependency):\n+\tDo not perform DF analysis.\n+\t(pass_data_remove_partial_avx_dependency): Remove\n+\tTODO_df_finish.\n+\n+2021-01-29  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add [su]mull_n\n+\tbuiltin generator macros.\n+\t* config/aarch64/aarch64-simd.md (aarch64_<su>mull_n<mode>):\n+\tDefine.\n+\t* config/aarch64/arm_neon.h (vmull_n_s16): Use RTL builtin\n+\tinstead of inline asm.\n+\t(vmull_n_s32): Likewise.\n+\t(vmull_n_u16): Likewise.\n+\t(vmull_n_u32): Likewise.\n+\n+2021-01-29  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (sabdl2, uabdl2):\n+\tDefine builtins.\n+\t* config/aarch64/aarch64-simd.md (aarch64_<sur>abdl2<mode>_3):\n+\tRename to...\n+\t(aarch64_<sur>abdl2<mode>): ... This.\n+\t(<sur>sadv16qi): Adjust use of above.\n+\t* config/aarch64/arm_neon.h (vabdl_high_s8): Reimplement using\n+\tbuiltin.\n+\t(vabdl_high_s16): Likewise.\n+\t(vabdl_high_s32): Likewise.\n+\t(vabdl_high_u8): Likewise.\n+\t(vabdl_high_u16): Likewise.\n+\t(vabdl_high_u32): Likewise.\n+\n+2021-01-29  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (sabal2): Define\n+\tbuiltin.\n+\t(uabal2): Likewise.\n+\t* config/aarch64/aarch64-simd.md (aarch64_<sur>abal2<mode>): New\n+\tpattern.\n+\t* config/aarch64/aarch64.md (unspec): Add UNSPEC_SABAL2 and\n+\tUNSPEC_UABAL2.\n+\t* config/aarch64/arm_neon.h (vabal_high_s8): Reimplement using\n+\tbuiltin.\n+\t(vabal_high_s16): Likewise.\n+\t(vabal_high_s32): Likewise.\n+\t(vabal_high_u8): Likewise.\n+\t(vabal_high_u16): Likewise.\n+\t(vabal_high_u32): Likewise.\n+\t* config/aarch64/iterators.md (ABAL2): New mode iterator.\n+\t(sur): Handle UNSPEC_SABAL2, UNSPEC_UABAL2.\n+\n+2021-01-29  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (sabal): Define\n+\tbuiltin.\n+\t(uabal): Likewise.\n+\t* config/aarch64/aarch64-simd.md (aarch64_<sur>abal<mode>_4):\n+\tRename to...\n+\t(aarch64_<sur>abal<mode>): ... This\n+\t(<sur>sadv16qi): Adust use of the above.\n+\t* config/aarch64/arm_neon.h (vabal_s8): Reimplement using\n+\tbuiltin.\n+\t(vabal_s16): Likewise.\n+\t(vabal_s32): Likewise.\n+\t(vabal_u8): Likewise.\n+\t(vabal_u16): Likewise.\n+\t(vabal_u32): Likewise.\n+\n+2021-01-29  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (saddlv, uaddlv):\n+\tDefine builtins.\n+\t* config/aarch64/aarch64-simd.md (aarch64_<su>addlv<mode>):\n+\tDefine.\n+\t* config/aarch64/arm_neon.h (vaddlv_s8): Reimplement using\n+\tbuiltin.\n+\t(vaddlv_s16): Likewise.\n+\t(vaddlv_u8): Likewise.\n+\t(vaddlv_u16): Likewise.\n+\t(vaddlvq_s8): Likewise.\n+\t(vaddlvq_s16): Likewise.\n+\t(vaddlvq_s32): Likewise.\n+\t(vaddlvq_u8): Likewise.\n+\t(vaddlvq_u16): Likewise.\n+\t(vaddlvq_u32): Likewise.\n+\t(vaddlv_s32): Likewise.\n+\t(vaddlv_u32): Likewise.\n+\t* config/aarch64/iterators.md (VDQV_L): New mode iterator.\n+\t(unspec): Add UNSPEC_SADDLV, UNSPEC_UADDLV.\n+\t(Vwstype): New mode attribute.\n+\t(Vwsuf): Likewise.\n+\t(VWIDE_S): Likewise.\n+\t(USADDLV): New int iterator.\n+\t(su): Handle UNSPEC_SADDLV, UNSPEC_UADDLV.\n+\n+2021-01-29  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add [su]mlsl_lane[q]\n+\tbuiltin generator macros.\n+\t* config/aarch64/aarch64-simd.md (aarch64_vec_<su>mlsl_lane<Qlane>):\n+\tDefine.\n+\t* config/aarch64/arm_neon.h (vmlsl_lane_s16): Use RTL builtin\n+\tinstead of inline asm.\n+\t(vmlsl_lane_s32): Likewise.\n+\t(vmlsl_lane_u16): Likewise.\n+\t(vmlsl_lane_u32): Likewise.\n+\t(vmlsl_laneq_s16): Likewise.\n+\t(vmlsl_laneq_s32): Likewise.\n+\t(vmlsl_laneq_u16): Likewise.\n+\t(vmlsl_laneq_u32): Likewise.\n+\n+2021-01-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* doc/invoke.texi (--param max-gcse-memory): Document unit\n+\tof size.\n+\t* gcse.c (gcse_or_cprop_is_too_expensive): Adjust.\n+\t* params.opt (--param max-gcse-memory): Adjust default and\n+\tdocument unit of size.\n+\n+2021-01-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR rtl-optimization/98863\n+\t* gcse.c (gcse_or_cprop_is_too_expensive): Use unsigned\n+\tHOST_WIDE_INT for the memory estimate.\n+\n+2021-01-29  Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97627\n+\t* tree-ssa-loop-niter.c (number_of_iterations_exit_assumptions):\n+\tDo not analyze fake edges.\n+\n+2021-01-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR rtl-optimization/98144\n+\t* df.h (df_mir_bb_info): Add con_visited member.\n+\t* df-problems.c (df_mir_alloc): Initialize con_visited,\n+\tdo not fully populate IN and OUT.\n+\t(df_mir_reset): Likewise.\n+\t(df_mir_confluence_0): Set con_visited.\n+\t(df_mir_confluence_n): Properly handle implicitely\n+\tfully populated IN and OUT as designated by con_visited\n+\tand update con_visited accordingly.\n+\n+2021-01-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/98849\n+\t* config/arm/vec-common.md (mve_vshlq_<supf><mode>,\n+\tvashl<mode>3, vashr<mode>3, vlshr<mode>3): Add\n+\t&& !TARGET_REALLY_IWMMXT to conditions.\n+\n+2021-01-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/98331\n+\t* cfgbuild.c (find_bb_boundaries): Reset debug_insn when seeing\n+\ta BARRIER.\n+\n 2021-01-28  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/94775"}, {"sha": "4bb5ee7c145bfbce6d2d6fd8f722c83bc23ae4c0", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2900f2f2c5fb234678eb8b76564e5994ec5970b9/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2900f2f2c5fb234678eb8b76564e5994ec5970b9/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=2900f2f2c5fb234678eb8b76564e5994ec5970b9", "patch": "@@ -1 +1 @@\n-20210129\n+20210130"}, {"sha": "09d7d7cbdda4c2921a0b47ad37af7a112386d6e8", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2900f2f2c5fb234678eb8b76564e5994ec5970b9/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2900f2f2c5fb234678eb8b76564e5994ec5970b9/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=2900f2f2c5fb234678eb8b76564e5994ec5970b9", "patch": "@@ -1,3 +1,25 @@\n+2021-01-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* checker-path.cc (event_kind_to_string): Handle\n+\tEK_START_CONSOLIDATED_CFG_EDGES and\n+\tEK_END_CONSOLIDATED_CFG_EDGES.\n+\t(start_consolidated_cfg_edges_event::get_desc): New.\n+\t(checker_path::cfg_edge_pair_at_p): New.\n+\t* checker-path.h (enum event_kind): Add\n+\tEK_START_CONSOLIDATED_CFG_EDGES and\n+\tEK_END_CONSOLIDATED_CFG_EDGES.\n+\t(class start_consolidated_cfg_edges_event): New class.\n+\t(class end_consolidated_cfg_edges_event): New class.\n+\t(checker_path::delete_events): New.\n+\t(checker_path::replace_event): New.\n+\t(checker_path::cfg_edge_pair_at_p): New decl.\n+\t* diagnostic-manager.cc (diagnostic_manager::prune_path): Call\n+\tconsolidate_conditions.\n+\t(same_line_as_p): New.\n+\t(diagnostic_manager::consolidate_conditions): New.\n+\t* diagnostic-manager.h\n+\t(diagnostic_manager::consolidate_conditions): New decl.\n+\n 2021-01-18  David Malcolm  <dmalcolm@redhat.com>\n \n \t* analyzer.h (is_std_named_call_p): New decl."}, {"sha": "0637358c3c3a3f6679516068762cf33ea0577218", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2900f2f2c5fb234678eb8b76564e5994ec5970b9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2900f2f2c5fb234678eb8b76564e5994ec5970b9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2900f2f2c5fb234678eb8b76564e5994ec5970b9", "patch": "@@ -1,3 +1,23 @@\n+2021-01-29  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/98843\n+\t* module.cc (module_state_config): Add num_entities field.\n+\t(module_state::read_entities): The entity_ary span is\n+\talready allocated.\n+\t(module_state::write_config): Write num_entities.\n+\t(module_state::read_config): Read num_entities.\n+\t(module_state::write): Set config's num_entities.\n+\t(module_state::read_initial): Allocate the entity ary\n+\tspan here.\n+\t(module_state::read_language): Do not set entity_lwm\n+\there.\n+\n+2021-01-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/96137\n+\t* parser.c (cp_parser_class_name): If parser->scope is\n+\terror_mark_node, return it, otherwise continue.\n+\n 2021-01-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/98841"}, {"sha": "889a34deba30b16f55fbdf07ab4d7c1249c4a882", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2900f2f2c5fb234678eb8b76564e5994ec5970b9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2900f2f2c5fb234678eb8b76564e5994ec5970b9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2900f2f2c5fb234678eb8b76564e5994ec5970b9", "patch": "@@ -1,3 +1,76 @@\n+2021-01-29  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\tPR testsuite/98870\n+\t* gcc.target/powerpc/ppc-fortran/ieee128-math.f90: Fix the\n+\texpected result.\n+\n+2021-01-29  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/pr91903.c: Fix dg-require stanza.\n+\n+2021-01-29  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/97701\n+\t* gcc.target/aarch64/pr97701.c: Modify.\n+\n+2021-01-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/combined-conditionals-1.c: New test.\n+\n+2021-01-29  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/97701\n+\t* gcc.target/aarch64/pr97701.c: New.\n+\n+2021-01-29  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/pr91903.c: New test.\n+\t* gcc.target/powerpc/builtins-1.fold.h: Update.\n+\t* gcc.target/powerpc/builtins-2.c: Update.\n+\n+2021-01-29  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/98843\n+\t* g++.dg/modules/pr98843_a.C: New.\n+\t* g++.dg/modules/pr98843_b.H: New.\n+\t* g++.dg/modules/pr98843_c.C: New.\n+\n+2021-01-29  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/simd/vaddlv_1.c: New test.\n+\n+2021-01-29  Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97627\n+\t* g++.dg/pr97627.C: New testcase.\n+\n+2021-01-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/98849\n+\t* gcc.c-torture/compile/pr98849.c: New test.\n+\n+2021-01-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/98331\n+\t* gcc.dg/pr98331.c: New test.\n+\n+2021-01-29  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/pr79251.p8.c: Move TEST_VEC_INSERT_ALL\n+\tto ...\n+\t* gcc.target/powerpc/pr79251.h: ...this.\n+\t* gcc.target/powerpc/pr79251.p9.c: Likewise.\n+\t* gcc.target/powerpc/pr79251-run.c: Move run_test to pr79251.h.\n+\tRename to...\n+\t* gcc.target/powerpc/pr79251-run.p8.c: ...this.\n+\t* gcc.target/powerpc/pr79251-run.p9.c: New test.\n+\n+2021-01-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/96137\n+\t* g++.dg/parse/error63.C: New test.\n+\n 2021-01-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/98841"}]}