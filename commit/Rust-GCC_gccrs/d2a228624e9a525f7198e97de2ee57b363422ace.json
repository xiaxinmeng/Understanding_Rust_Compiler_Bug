{"sha": "d2a228624e9a525f7198e97de2ee57b363422ace", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJhMjI4NjI0ZTlhNTI1ZjcxOThlOTdkZTJlZTU3YjM2MzQyMmFjZQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-07T18:48:55Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-07T18:48:55Z"}, "message": "(struct file_name_list): Add new field c_system_include_path.\n\n(*various*): Set this flag correctly\n(is_system_include): Return 2 if C-language system include.\n(output_line_command): Output \" 4\" after \" 3\" for C-language system\ninclude.\n\nFrom-SVN: r5659", "tree": {"sha": "006b61b79dae6852aba85884746b654ddfcc6d18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/006b61b79dae6852aba85884746b654ddfcc6d18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2a228624e9a525f7198e97de2ee57b363422ace", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2a228624e9a525f7198e97de2ee57b363422ace", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2a228624e9a525f7198e97de2ee57b363422ace", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2a228624e9a525f7198e97de2ee57b363422ace/comments", "author": null, "committer": null, "parents": [{"sha": "9eb9177211dea7f3077b6fc6b56ad0bea812e485", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eb9177211dea7f3077b6fc6b56ad0bea812e485", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eb9177211dea7f3077b6fc6b56ad0bea812e485"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "d659da52e0b9312ce3c5b6b15e8d5e0bf93206e8", "filename": "gcc/cccp.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a228624e9a525f7198e97de2ee57b363422ace/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a228624e9a525f7198e97de2ee57b363422ace/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=d2a228624e9a525f7198e97de2ee57b363422ace", "patch": "@@ -540,6 +540,9 @@ struct file_name_list\n     /* If the following is nonzero, it is a macro name.\n        Don't include the file again if that macro is defined.  */\n     U_CHAR *control_macro;\n+    /* If the following is nonzero, it is a C-language system include\n+       directory.  */\n+    int c_system_include_path;\n   };\n \n /* #include \"file\" looks in source file dir, then stack. */\n@@ -1121,6 +1124,7 @@ main (argc, argv)\n \t    xmalloc (sizeof (struct file_name_list));\n \t  dirtmp->next = 0;\t/* New one goes on the end */\n \t  dirtmp->control_macro = 0;\n+\t  dirtmp->c_system_include_path = 0;\n \t  if (i + 1 == argc)\n \t    fatal (\"Directory name missing after `-iwithprefix' option\");\n \n@@ -1154,6 +1158,7 @@ main (argc, argv)\n \t    xmalloc (sizeof (struct file_name_list));\n \t  dirtmp->next = 0;\t/* New one goes on the end */\n \t  dirtmp->control_macro = 0;\n+\t  dirtmp->c_system_include_path = 0;\n \t  if (i + 1 == argc)\n \t    fatal (\"Directory name missing after `-iwithprefixbefore' option\");\n \n@@ -1172,6 +1177,7 @@ main (argc, argv)\n \t    xmalloc (sizeof (struct file_name_list));\n \t  dirtmp->next = 0;\t/* New one goes on the end */\n \t  dirtmp->control_macro = 0;\n+\t  dirtmp->c_system_include_path = 0;\n \t  if (i + 1 == argc)\n \t    fatal (\"Directory name missing after `-idirafter' option\");\n \t  else\n@@ -1421,6 +1427,7 @@ main (argc, argv)\n \t      xmalloc (sizeof (struct file_name_list));\n \t    dirtmp->next = 0;\t\t/* New one goes on the end */\n \t    dirtmp->control_macro = 0;\n+\t    dirtmp->c_system_include_path = 0;\n \t    if (argv[i][2] != 0)\n \t      dirtmp->fname = argv[i] + 2;\n \t    else if (i + 1 == argc)\n@@ -1684,6 +1691,7 @@ main (argc, argv)\n \t    strcat (str, p->fname + default_len);\n \t    new->fname = str;\n \t    new->control_macro = 0;\n+\t    new->c_system_include_path = !p->cplusplus;\n \t    append_include_chain (new, new);\n \t    if (first_system_include == 0)\n \t      first_system_include = new;\n@@ -1697,6 +1705,7 @@ main (argc, argv)\n \tstruct file_name_list *new\n \t  = (struct file_name_list *) xmalloc (sizeof (struct file_name_list));\n \tnew->control_macro = 0;\n+\tnew->c_system_include_path = !p->cplusplus;\n \tnew->fname = p->fname;\n \tappend_include_chain (new, new);\n \tif (first_system_include == 0)\n@@ -2015,6 +2024,7 @@ path_include (path)\n \txmalloc (sizeof (struct file_name_list));\n       dirtmp->next = 0;\t\t/* New one goes on the end */\n       dirtmp->control_macro = 0;\n+      dirtmp->c_system_include_path = 0;\n       dirtmp->fname = name;\n       append_include_chain (dirtmp, dirtmp);\n \n@@ -4094,6 +4104,7 @@ do_include (buf, limit, op, keyword)\n \n       ptr = (struct file_name_list *) xmalloc (sizeof (struct file_name_list));\n       ptr->control_macro = 0;\n+      ptr->c_system_include_path = 0;\n       ptr->next = all_include_files;\n       all_include_files = ptr;\n       ptr->fname = savestring (fname);\n@@ -4203,7 +4214,12 @@ is_system_include (filename)\n       register unsigned length = strlen (sys_dir);\n \n       if (! strncmp (sys_dir, filename, length) && filename[length] == '/')\n-\treturn 1;\n+\t{\n+\t  if (searchptr->c_system_include_path)\n+\t    return 2;\n+\t  else\n+\t    return 1;\n+\t}\n     }\n   return 0;\n }\n@@ -6099,6 +6115,7 @@ do_once ()\n     dont_repeat_files = new;\n     new->fname = savestring (ip->fname);\n     new->control_macro = 0;\n+    new->c_system_include_path = 0;\n   }\n   return 0;\n }\n@@ -7088,6 +7105,11 @@ output_line_command (ip, op, conditional, file_change)\n     *line_end++ = ' ';\n     *line_end++ = '3';\n   }\n+  /* Tell cc1plus if following text should be treated as C.  */\n+  if (ip->system_header_p == 2) {\n+    *line_end++ = ' ';\n+    *line_end++ = '4';\n+  }\n   *line_end++ = '\\n';\n   len = line_end - line_cmd_buf;\n   check_expand (op, len + 1);"}]}