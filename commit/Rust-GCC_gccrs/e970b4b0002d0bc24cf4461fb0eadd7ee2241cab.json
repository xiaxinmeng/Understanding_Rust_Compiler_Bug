{"sha": "e970b4b0002d0bc24cf4461fb0eadd7ee2241cab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk3MGI0YjAwMDJkMGJjMjRjZjQ0NjFmYjBlYWRkN2VlMjI0MWNhYg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2015-12-02T08:05:04Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2015-12-02T08:05:04Z"}, "message": "S/390: Make constant checking more strict\n\ngcc/ChangeLog:\n\n2015-12-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/predicates.md (const_mask_operand): New predicate.\n\t* config/s390/s390-builtins.def: Set a smaller bitmask for a few builtins.\n\t* config/s390/vector.md: Change predicate from immediate_operand\n\tto either const_int_operand or const_mask_operand.  Add special\n\tinsn conditions on patterns which have to exclude certain values.\n\t* config/s390/vx-builtins.md: Likewise.\n\nFrom-SVN: r231159", "tree": {"sha": "5886b95940ca6bc627d7dcb2599a207eb8c48166", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5886b95940ca6bc627d7dcb2599a207eb8c48166"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e970b4b0002d0bc24cf4461fb0eadd7ee2241cab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e970b4b0002d0bc24cf4461fb0eadd7ee2241cab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e970b4b0002d0bc24cf4461fb0eadd7ee2241cab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e970b4b0002d0bc24cf4461fb0eadd7ee2241cab/comments", "author": null, "committer": null, "parents": [{"sha": "8eb1b59beb4a1216993e4f6185f59ce546d53b83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eb1b59beb4a1216993e4f6185f59ce546d53b83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eb1b59beb4a1216993e4f6185f59ce546d53b83"}], "stats": {"total": 232, "additions": 123, "deletions": 109}, "files": [{"sha": "8d30d04a53faa1d239897bcd96c7205c67d8e5ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e970b4b0002d0bc24cf4461fb0eadd7ee2241cab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e970b4b0002d0bc24cf4461fb0eadd7ee2241cab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e970b4b0002d0bc24cf4461fb0eadd7ee2241cab", "patch": "@@ -1,3 +1,12 @@\n+2015-12-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/predicates.md (const_mask_operand): New predicate.\n+\t* config/s390/s390-builtins.def: Set a smaller bitmask for a few builtins.\n+\t* config/s390/vector.md: Change predicate from immediate_operand\n+\tto either const_int_operand or const_mask_operand.  Add special\n+\tinsn conditions on patterns which have to exclude certain values.\n+\t* config/s390/vx-builtins.md: Likewise.\n+\n 2015-12-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/vector.md (\"*vec_set<mode>\"): Change shift count"}, {"sha": "6a5ebbbf303f0eeee1822f350319dcd0836f4b73", "filename": "gcc/config/s390/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e970b4b0002d0bc24cf4461fb0eadd7ee2241cab/gcc%2Fconfig%2Fs390%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e970b4b0002d0bc24cf4461fb0eadd7ee2241cab/gcc%2Fconfig%2Fs390%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fpredicates.md?ref=e970b4b0002d0bc24cf4461fb0eadd7ee2241cab", "patch": "@@ -34,6 +34,11 @@\n   (and (match_code \"const_int, const_double,const_vector\")\n        (match_test \"op == CONSTM1_RTX (mode)\")))\n \n+;; Return true if OP is a 4 bit mask operand\n+(define_predicate \"const_mask_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"UINTVAL (op) < 16\")))\n+\n ;; Return true if OP is constant.\n \n (define_special_predicate \"consttable_operand\""}, {"sha": "b0a86e979990351c8a94256b9cb7c876b0eef097", "filename": "gcc/config/s390/s390-builtins.def", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e970b4b0002d0bc24cf4461fb0eadd7ee2241cab/gcc%2Fconfig%2Fs390%2Fs390-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e970b4b0002d0bc24cf4461fb0eadd7ee2241cab/gcc%2Fconfig%2Fs390%2Fs390-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-builtins.def?ref=e970b4b0002d0bc24cf4461fb0eadd7ee2241cab", "patch": "@@ -2470,15 +2470,15 @@ OB_DEF     (s390_vec_ctd,               s390_vec_ctd_s64,   s390_vec_ctd_u64,\n OB_DEF_VAR (s390_vec_ctd_s64,           s390_vec_ctd_s64,   O2_U5,              BT_OV_V2DF_V2DI_INT)                     /* vcdgb */\n OB_DEF_VAR (s390_vec_ctd_u64,           s390_vec_ctd_u64,   O2_U5,              BT_OV_V2DF_UV2DI_INT)                    /* vcdlgb */\n \n-B_DEF      (s390_vec_ctd_s64,           vec_ctd_s64,        0,                  B_VX,               O2_U5,              BT_FN_V2DF_V2DI_INT)                     /* vcdgb */\n-B_DEF      (s390_vec_ctd_u64,           vec_ctd_u64,        0,                  B_VX,               O2_U5,              BT_FN_V2DF_UV2DI_INT)                    /* vcdlgb */\n-B_DEF      (s390_vcdgb,                 vec_di_to_df_s64,   0,                  B_VX,               O2_U5,              BT_FN_V2DF_V2DI_INT)\n-B_DEF      (s390_vcdlgb,                vec_di_to_df_u64,   0,                  B_VX,               O2_U5,              BT_FN_V2DF_UV2DI_INT)\n-B_DEF      (s390_vec_ctsl,              vec_ctsl,           0,                  B_VX,               O2_U5,              BT_FN_V2DI_V2DF_INT)                     /* vcgdb */\n-B_DEF      (s390_vec_ctul,              vec_ctul,           0,                  B_VX,               O2_U5,              BT_FN_UV2DI_V2DF_INT)                    /* vclgdb */\n-B_DEF      (s390_vcgdb,                 vec_df_to_di_s64,   0,                  B_VX,               O2_U5,              BT_FN_V2DI_V2DF_INT)\n-B_DEF      (s390_vclgdb,                vec_df_to_di_u64,   0,                  B_VX,               O2_U5,              BT_FN_UV2DI_V2DF_INT)\n-B_DEF      (s390_vfidb,                 vfidb,              0,                  B_VX,               O2_U4 | O3_U4,      BT_FN_V2DF_V2DF_UCHAR_UCHAR)\n+B_DEF      (s390_vec_ctd_s64,           vec_ctd_s64,        0,                  B_VX,               O2_U3,              BT_FN_V2DF_V2DI_INT)                     /* vcdgb */\n+B_DEF      (s390_vec_ctd_u64,           vec_ctd_u64,        0,                  B_VX,               O2_U3,              BT_FN_V2DF_UV2DI_INT)                    /* vcdlgb */\n+B_DEF      (s390_vcdgb,                 vec_di_to_df_s64,   0,                  B_VX,               O2_U3,              BT_FN_V2DF_V2DI_INT)                     /* vcdgb */\n+B_DEF      (s390_vcdlgb,                vec_di_to_df_u64,   0,                  B_VX,               O2_U3,              BT_FN_V2DF_UV2DI_INT)                    /* vcdlgb */\n+B_DEF      (s390_vec_ctsl,              vec_ctsl,           0,                  B_VX,               O2_U3,              BT_FN_V2DI_V2DF_INT)                     /* vcgdb */\n+B_DEF      (s390_vec_ctul,              vec_ctul,           0,                  B_VX,               O2_U3,              BT_FN_UV2DI_V2DF_INT)                    /* vclgdb */\n+B_DEF      (s390_vcgdb,                 vec_df_to_di_s64,   0,                  B_VX,               O2_U3,              BT_FN_V2DI_V2DF_INT)                     /* vcgdb */\n+B_DEF      (s390_vclgdb,                vec_df_to_di_u64,   0,                  B_VX,               O2_U3,              BT_FN_UV2DI_V2DF_INT)                    /* vclgdb */\n+B_DEF      (s390_vfidb,                 vfidb,              0,                  B_VX,               O2_U4 | O3_U3,      BT_FN_V2DF_V2DF_UCHAR_UCHAR)\n B_DEF      (s390_vec_ld2f,              vec_ld2f,           0,                  B_VX,               0,                  BT_FN_V2DF_FLTCONSTPTR)                  /* vldeb */\n B_DEF      (s390_vec_st2f,              vec_st2f,           0,                  B_VX,               0,                  BT_FN_VOID_V2DF_FLTPTR)                  /* vledb */\n B_DEF      (s390_vfmadb,                fmav2df4,           0,                  B_VX,               0,                  BT_FN_V2DF_V2DF_V2DF_V2DF)"}, {"sha": "c9f589017dc2e6894c314cc22b02f4a4fbfded34", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e970b4b0002d0bc24cf4461fb0eadd7ee2241cab/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e970b4b0002d0bc24cf4461fb0eadd7ee2241cab/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=e970b4b0002d0bc24cf4461fb0eadd7ee2241cab", "patch": "@@ -364,8 +364,8 @@\n \t (vec_select:<non_vec>\n \t  (match_operand:V_HW 1 \"register_operand\"  \"v\")\n \t  (parallel\n-\t   [(match_operand:QI 2 \"immediate_operand\" \"C\")]))))]\n-  \"TARGET_VX\"\n+\t   [(match_operand:QI 2 \"const_mask_operand\" \"C\")]))))]\n+  \"TARGET_VX && UINTVAL (operands[2]) < GET_MODE_NUNITS (<V_HW:MODE>mode)\"\n   \"vrep<bhfgq>\\t%v0,%v1,%2\"\n   [(set_attr \"op_type\" \"VRI\")])\n \n@@ -1073,7 +1073,7 @@\n   [(set (match_operand:VI_HW_QHS 0 \"register_operand\" \"=v\")\n \t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"v\")\n \t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:QI 3 \"immediate_operand\" \"C\")]\n+\t\t\t   (match_operand:QI 3 \"const_mask_operand\" \"C\")]\n \t\t\t  UNSPEC_VEC_VFENE))\n    (set (reg:CCRAW CC_REGNUM)\n \t(unspec:CCRAW [(match_dup 1)"}, {"sha": "b772439af54137950adbf1116e1ae64e18fb22f3", "filename": "gcc/config/s390/vx-builtins.md", "status": "modified", "additions": 97, "deletions": 97, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e970b4b0002d0bc24cf4461fb0eadd7ee2241cab/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e970b4b0002d0bc24cf4461fb0eadd7ee2241cab/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvx-builtins.md?ref=e970b4b0002d0bc24cf4461fb0eadd7ee2241cab", "patch": "@@ -67,20 +67,20 @@\n ; Vector gather element\n \n (define_insn \"vec_gather_element<mode>\"\n-  [(set (match_operand:V_HW_32_64                     0 \"register_operand\" \"=v\")\n-\t(unspec:V_HW_32_64 [(match_operand:V_HW_32_64 1 \"register_operand\"  \"0\")\n-\t\t\t    (match_operand:<tointvec> 2 \"register_operand\"  \"v\")\n-\t\t\t    (match_operand:BLK        3 \"memory_operand\"   \"QR\")\n-\t\t\t    (match_operand:QI         4 \"immediate_operand\" \"C\")]\n+  [(set (match_operand:V_HW_32_64                     0 \"register_operand\"  \"=v\")\n+\t(unspec:V_HW_32_64 [(match_operand:V_HW_32_64 1 \"register_operand\"   \"0\")\n+\t\t\t    (match_operand:<tointvec> 2 \"register_operand\"   \"v\")\n+\t\t\t    (match_operand:BLK        3 \"memory_operand\"    \"QR\")\n+\t\t\t    (match_operand:QI         4 \"const_mask_operand\" \"C\")]\n \t\t\t   UNSPEC_VEC_GATHER))]\n-  \"TARGET_VX\"\n+  \"TARGET_VX && UINTVAL (operands[4]) < GET_MODE_NUNITS (<V_HW_32_64:MODE>mode)\"\n   \"vge<bhfgq>\\t%0,%O3(%v2,%R3),%b4\"\n   [(set_attr \"op_type\" \"VRV\")])\n \n (define_expand \"vec_genmask<mode>\"\n   [(match_operand:VI_HW 0 \"register_operand\" \"=v\")\n-   (match_operand:QI    1 \"immediate_operand\" \"C\")\n-   (match_operand:QI    2 \"immediate_operand\" \"C\")]\n+   (match_operand:QI    1 \"const_int_operand\" \"C\")\n+   (match_operand:QI    2 \"const_int_operand\" \"C\")]\n   \"TARGET_VX\"\n {\n   int nunits = GET_MODE_NUNITS (<VI_HW:MODE>mode);\n@@ -120,8 +120,8 @@\n \n (define_expand \"vec_genbytemaskv16qi\"\n   [(match_operand:V16QI 0 \"register_operand\"  \"\")\n-   (match_operand       1 \"immediate_operand\" \"\")]\n-  \"TARGET_VX && CONST_OK_FOR_CONSTRAINT_P (INTVAL (operands[1]), 'K', \\\"K\\\")\"\n+   (match_operand:HI    1 \"const_int_operand\" \"\")]\n+  \"TARGET_VX\"\n {\n   int i;\n   unsigned mask = 0x8000;\n@@ -177,11 +177,11 @@\n   [(set_attr \"op_type\" \"VRX\")])\n \n (define_insn \"vlbb\"\n-  [(set (match_operand:V16QI              0 \"register_operand\"  \"=v\")\n-\t(unspec:V16QI [(match_operand:BLK 1 \"memory_operand\"    \"QR\")\n-\t\t       (match_operand:HI  2 \"immediate_operand\" \" K\")]\n+  [(set (match_operand:V16QI              0 \"register_operand\"   \"=v\")\n+\t(unspec:V16QI [(match_operand:BLK 1 \"memory_operand\"     \"QR\")\n+\t\t       (match_operand:QI  2 \"const_mask_operand\"  \"C\")]\n \t\t      UNSPEC_VEC_LOAD_BNDRY))]\n-  \"TARGET_VX\"\n+  \"TARGET_VX && UINTVAL (operands[2]) < 7\"\n   \"vlbb\\t%v0,%1,%2\"\n   [(set_attr \"op_type\" \"VRX\")])\n \n@@ -351,10 +351,10 @@\n   [(set_attr \"op_type\" \"VRR\")])\n \n (define_expand \"vec_permi<mode>\"\n-  [(set (match_operand:V_HW_64                  0 \"register_operand\"  \"\")\n-\t(unspec:V_HW_64 [(match_operand:V_HW_64 1 \"register_operand\"  \"\")\n-\t\t\t (match_operand:V_HW_64 2 \"register_operand\"  \"\")\n-\t\t\t (match_operand:QI      3 \"immediate_operand\" \"\")]\n+  [(set (match_operand:V_HW_64                  0 \"register_operand\"   \"\")\n+\t(unspec:V_HW_64 [(match_operand:V_HW_64 1 \"register_operand\"   \"\")\n+\t\t\t (match_operand:V_HW_64 2 \"register_operand\"   \"\")\n+\t\t\t (match_operand:QI      3 \"const_mask_operand\" \"\")]\n \t\t\tUNSPEC_VEC_PERMI))]\n   \"TARGET_VX\"\n {\n@@ -363,12 +363,12 @@\n })\n \n (define_insn \"*vec_permi<mode>\"\n-  [(set (match_operand:V_HW_64                  0 \"register_operand\" \"=v\")\n-\t(unspec:V_HW_64 [(match_operand:V_HW_64 1 \"register_operand\"  \"v\")\n-\t\t\t (match_operand:V_HW_64 2 \"register_operand\"  \"v\")\n-\t\t\t (match_operand:QI      3 \"immediate_operand\" \"C\")]\n+  [(set (match_operand:V_HW_64                  0 \"register_operand\"  \"=v\")\n+\t(unspec:V_HW_64 [(match_operand:V_HW_64 1 \"register_operand\"   \"v\")\n+\t\t\t (match_operand:V_HW_64 2 \"register_operand\"   \"v\")\n+\t\t\t (match_operand:QI      3 \"const_mask_operand\" \"C\")]\n \t\t\tUNSPEC_VEC_PERMI))]\n-  \"TARGET_VX\"\n+  \"TARGET_VX && (UINTVAL (operands[3]) & 10) == 0\"\n   \"vpdi\\t%v0,%v1,%v2,%b3\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n@@ -382,7 +382,7 @@\n \t(vec_duplicate:V_HW (vec_select:<non_vec>\n \t\t\t     (match_operand:V_HW 1 \"register_operand\"  \"\")\n \t\t\t     (parallel\n-\t\t\t      [(match_operand:QI 2 \"immediate_operand\" \"\")]))))]\n+\t\t\t      [(match_operand:QI 2 \"const_mask_operand\" \"\")]))))]\n   \"TARGET_VX\")\n \n ; Vector scatter element\n@@ -393,41 +393,41 @@\n (define_insn \"vec_scatter_elementv4si_DI\"\n   [(set (mem:SI\n \t (plus:DI (zero_extend:DI\n-\t\t   (unspec:SI [(match_operand:V4SI 1 \"register_operand\"  \"v\")\n-\t\t\t       (match_operand:DI   3 \"immediate_operand\" \"I\")]\n+\t\t   (unspec:SI [(match_operand:V4SI 1 \"register_operand\"   \"v\")\n+\t\t\t       (match_operand:QI   3 \"const_mask_operand\" \"C\")]\n \t\t\t      UNSPEC_VEC_EXTRACT))\n-\t\t  (match_operand:SI                2 \"address_operand\"  \"ZQ\")))\n-\t(unspec:SI [(match_operand:V4SI            0 \"register_operand\"  \"v\")\n+\t\t  (match_operand:SI                2 \"address_operand\"   \"ZQ\")))\n+\t(unspec:SI [(match_operand:V4SI            0 \"register_operand\"   \"v\")\n \t\t    (match_dup 3)] UNSPEC_VEC_EXTRACT))]\n-  \"TARGET_VX && TARGET_64BIT\"\n+  \"TARGET_VX && TARGET_64BIT && UINTVAL (operands[3]) < 4\"\n   \"vscef\\t%v0,%O2(%v1,%R2),%3\"\n   [(set_attr \"op_type\" \"VRV\")])\n \n ; A 31 bit target address is generated from 64 bit elements\n (define_insn \"vec_scatter_element<V_HW_64:mode>_SI\"\n   [(set (mem:<non_vec>\n \t (plus:SI (subreg:SI\n-\t\t   (unspec:<non_vec_int> [(match_operand:V_HW_64 1 \"register_operand\"  \"v\")\n-\t\t\t\t\t  (match_operand:DI      3 \"immediate_operand\" \"I\")]\n+\t\t   (unspec:<non_vec_int> [(match_operand:V_HW_64 1 \"register_operand\"   \"v\")\n+\t\t\t\t\t  (match_operand:QI      3 \"const_mask_operand\" \"C\")]\n \t\t\t\t\t UNSPEC_VEC_EXTRACT) 4)\n-\t\t  (match_operand:SI                              2 \"address_operand\"  \"ZQ\")))\n-\t(unspec:<non_vec> [(match_operand:V_HW_64                0 \"register_operand\"  \"v\")\n+\t\t  (match_operand:SI                              2 \"address_operand\"   \"ZQ\")))\n+\t(unspec:<non_vec> [(match_operand:V_HW_64                0 \"register_operand\"   \"v\")\n \t\t\t   (match_dup 3)] UNSPEC_VEC_EXTRACT))]\n-  \"TARGET_VX && !TARGET_64BIT\"\n+  \"TARGET_VX && !TARGET_64BIT && UINTVAL (operands[3]) < GET_MODE_NUNITS (<V_HW_64:MODE>mode)\"\n   \"vsce<V_HW_64:bhfgq>\\t%v0,%O2(%v1,%R2),%3\"\n   [(set_attr \"op_type\" \"VRV\")])\n \n ; Element size and target adress size is the same\n (define_insn \"vec_scatter_element<mode>_<non_vec_int>\"\n   [(set (mem:<non_vec>\n \t (plus:<non_vec_int> (unspec:<non_vec_int>\n-\t\t\t      [(match_operand:<tointvec> 1 \"register_operand\"  \"v\")\n-\t\t\t       (match_operand:DI         3 \"immediate_operand\" \"I\")]\n+\t\t\t      [(match_operand:<tointvec> 1 \"register_operand\"   \"v\")\n+\t\t\t       (match_operand:QI         3 \"const_mask_operand\" \"C\")]\n \t\t\t      UNSPEC_VEC_EXTRACT)\n-\t\t\t     (match_operand:DI           2 \"address_operand\"  \"ZQ\")))\n-\t(unspec:<non_vec> [(match_operand:V_HW_32_64     0 \"register_operand\"  \"v\")\n+\t\t\t     (match_operand:DI           2 \"address_operand\"   \"ZQ\")))\n+\t(unspec:<non_vec> [(match_operand:V_HW_32_64     0 \"register_operand\"   \"v\")\n \t\t\t   (match_dup 3)] UNSPEC_VEC_EXTRACT))]\n-  \"TARGET_VX\"\n+  \"TARGET_VX && UINTVAL (operands[3]) < GET_MODE_NUNITS (<V_HW_32_64:MODE>mode)\"\n   \"vsce<bhfgq>\\t%v0,%O2(%v1,%R2),%3\"\n   [(set_attr \"op_type\" \"VRV\")])\n \n@@ -438,7 +438,7 @@\n   [(match_operand:V_HW_32_64 0 \"register_operand\" \"\")\n    (match_operand:<tointvec> 1 \"register_operand\" \"\")\n    (match_operand 2 \"address_operand\" \"\")\n-   (match_operand:DI 3 \"immediate_operand\" \"\")]\n+   (match_operand:QI 3 \"const_mask_operand\" \"\")]\n   \"TARGET_VX\"\n {\n   if (TARGET_64BIT)\n@@ -1042,7 +1042,7 @@\n \t(unspec:VI_HW [(match_operand:VI_HW 1 \"register_operand\"  \"0\")\n \t\t       (match_operand:VI_HW 2 \"register_operand\"  \"v\")\n \t\t       (match_operand:VI_HW 3 \"register_operand\"  \"v\")\n-\t\t       (match_operand:SI    4 \"immediate_operand\" \"I\")]\n+\t\t       (match_operand:QI    4 \"const_int_operand\" \"C\")]\n \t\t      UNSPEC_VEC_RL_MASK))]\n   \"TARGET_VX\"\n   \"verim<bhfgq>\\t%v0,%v2,%v3,%b4\"\n@@ -1079,7 +1079,7 @@\n   [(set (match_operand:V_HW 0 \"register_operand\"              \"=v\")\n \t(unspec:V_HW [(match_operand:V_HW 1 \"register_operand\" \"v\")\n \t\t      (match_operand:V_HW 2 \"register_operand\" \"v\")\n-\t\t      (match_operand:DI 3 \"immediate_operand\" \"C\")]\n+\t\t      (match_operand:QI 3 \"const_int_operand\"  \"C\")]\n \t\t     UNSPEC_VEC_SLDB))]\n   \"TARGET_VX\"\n   \"vsldb\\t%v0,%v1,%v2,%b3\"\n@@ -1089,7 +1089,7 @@\n   [(set (match_operand:V_HW 0 \"register_operand\"               \"\")\n \t(unspec:V_HW [(match_operand:V_HW 1 \"register_operand\" \"\")\n \t\t      (match_operand:V_HW 2 \"register_operand\" \"\")\n-\t\t      (match_operand:DI 3 \"immediate_operand\"  \"\")]\n+\t\t      (match_operand:QI 3 \"const_int_operand\"  \"\")]\n \t\t     UNSPEC_VEC_SLDB))]\n   \"TARGET_VX\"\n {\n@@ -1262,7 +1262,7 @@\n   [(set (match_operand:VI_HW_QHS 0 \"register_operand\" \"=v\")\n \t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"v\")\n \t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:SI        3 \"immediate_operand\" \"C\")]\n+\t\t\t   (match_operand:QI        3 \"const_mask_operand\" \"C\")]\n \t\t\t  UNSPEC_VEC_VFAE))]\n   \"TARGET_VX\"\n {\n@@ -1282,9 +1282,9 @@\n ; vfaezbs, vfaezhs, vfaezfs\n (define_insn \"*vfaes<mode>\"\n   [(set (match_operand:VI_HW_QHS 0 \"register_operand\" \"=v\")\n-\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:SI        3 \"immediate_operand\" \"C\")]\n+\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\"   \"v\")\n+\t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\"   \"v\")\n+\t\t\t   (match_operand:QI        3 \"const_mask_operand\" \"C\")]\n \t\t\t  UNSPEC_VEC_VFAE))\n    (set (reg:CCRAW CC_REGNUM)\n \t(unspec:CCRAW [(match_dup 1)\n@@ -1307,9 +1307,9 @@\n \n (define_expand \"vfaez<mode>\"\n   [(set (match_operand:VI_HW_QHS 0 \"register_operand\" \"=v\")\n-\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:SI        3 \"immediate_operand\" \"C\")]\n+\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\"  \"\")\n+\t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\"  \"\")\n+\t\t\t   (match_operand:QI        3 \"const_mask_operand\" \"\")]\n \t\t\t  UNSPEC_VEC_VFAE))]\n   \"TARGET_VX\"\n {\n@@ -1319,9 +1319,9 @@\n (define_expand \"vfaes<mode>\"\n   [(parallel\n     [(set (match_operand:VI_HW_QHS 0 \"register_operand\" \"\")\n-\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"\")\n-\t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\" \"\")\n-\t\t\t   (match_operand:SI        3 \"immediate_operand\" \"C\")]\n+\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\"  \"\")\n+\t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\"  \"\")\n+\t\t\t   (match_operand:QI        3 \"const_mask_operand\" \"\")]\n \t\t\t  UNSPEC_VEC_VFAE))\n    (set (reg:CCRAW CC_REGNUM)\n \t(unspec:CCRAW [(match_dup 1)\n@@ -1338,9 +1338,9 @@\n (define_expand \"vfaezs<mode>\"\n   [(parallel\n     [(set (match_operand:VI_HW_QHS 0 \"register_operand\" \"\")\n-\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"\")\n-\t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\" \"\")\n-\t\t\t   (match_operand:SI        3 \"immediate_operand\" \"C\")]\n+\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\"  \"\")\n+\t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\"  \"\")\n+\t\t\t   (match_operand:SI        3 \"const_mask_operand\" \"\")]\n \t\t\t  UNSPEC_VEC_VFAE))\n    (set (reg:CCRAW CC_REGNUM)\n \t(unspec:CCRAW [(match_dup 1)\n@@ -1363,7 +1363,7 @@\n   [(set (match_operand:VI_HW_QHS 0 \"register_operand\" \"=v\")\n \t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"v\")\n \t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:QI 3 \"immediate_operand\" \"C\")]\n+\t\t\t   (match_operand:QI 3 \"const_mask_operand\" \"C\")]\n \t\t\t  UNSPEC_VEC_VFEE))\n    (set (reg:CCRAW CC_REGNUM)\n \t(unspec:CCRAW [(match_dup 1)\n@@ -1541,11 +1541,11 @@\n ; vstrcb, vstrch, vstrcf\n ; vstrczb, vstrczh, vstrczf\n (define_insn \"vstrc<mode>\"\n-  [(set (match_operand:VI_HW_QHS                    0 \"register_operand\" \"=v\")\n-\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\"  \"v\")\n-\t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\"  \"v\")\n-\t\t\t   (match_operand:VI_HW_QHS 3 \"register_operand\"  \"v\")\n-\t\t\t   (match_operand:SI        4 \"immediate_operand\" \"C\")]\n+  [(set (match_operand:VI_HW_QHS                    0 \"register_operand\"  \"=v\")\n+\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\"   \"v\")\n+\t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\"   \"v\")\n+\t\t\t   (match_operand:VI_HW_QHS 3 \"register_operand\"   \"v\")\n+\t\t\t   (match_operand:QI        4 \"const_mask_operand\" \"C\")]\n \t\t\t  UNSPEC_VEC_VSTRC))]\n   \"TARGET_VX\"\n {\n@@ -1564,11 +1564,11 @@\n ; vstrcbs, vstrchs, vstrcfs\n ; vstrczbs, vstrczhs, vstrczfs\n (define_insn \"*vstrcs<mode>\"\n-  [(set (match_operand:VI_HW_QHS                    0 \"register_operand\" \"=v\")\n-\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\"  \"v\")\n-\t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\"  \"v\")\n-\t\t\t   (match_operand:VI_HW_QHS 3 \"register_operand\"  \"v\")\n-\t\t\t   (match_operand:SI        4 \"immediate_operand\" \"C\")]\n+  [(set (match_operand:VI_HW_QHS                    0 \"register_operand\"  \"=v\")\n+\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\"   \"v\")\n+\t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\"   \"v\")\n+\t\t\t   (match_operand:VI_HW_QHS 3 \"register_operand\"   \"v\")\n+\t\t\t   (match_operand:QI        4 \"const_mask_operand\" \"C\")]\n \t\t\t  UNSPEC_VEC_VSTRC))\n    (set (reg:CCRAW CC_REGNUM)\n \t(unspec:CCRAW [(match_dup 1)\n@@ -1591,11 +1591,11 @@\n   [(set_attr \"op_type\" \"VRR\")])\n \n (define_expand \"vstrcz<mode>\"\n-  [(set (match_operand:VI_HW_QHS 0 \"register_operand\" \"=v\")\n-\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:VI_HW_QHS 3 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:SI        4 \"immediate_operand\" \"C\")]\n+  [(set (match_operand:VI_HW_QHS 0 \"register_operand\" \"\")\n+\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\"   \"\")\n+\t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\"   \"\")\n+\t\t\t   (match_operand:VI_HW_QHS 3 \"register_operand\"   \"\")\n+\t\t\t   (match_operand:QI        4 \"const_mask_operand\" \"\")]\n \t\t\t  UNSPEC_VEC_VSTRC))]\n   \"TARGET_VX\"\n {\n@@ -1608,7 +1608,7 @@\n \t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"\")\n \t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\" \"\")\n \t\t\t   (match_operand:VI_HW_QHS 3 \"register_operand\" \"\")\n-\t\t\t   (match_operand:SI        4 \"immediate_operand\" \"C\")]\n+\t\t\t   (match_operand:QI        4 \"const_mask_operand\" \"\")]\n \t\t\t  UNSPEC_VEC_VSTRC))\n    (set (reg:CCRAW CC_REGNUM)\n \t(unspec:CCRAW [(match_dup 1)\n@@ -1629,7 +1629,7 @@\n \t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"\")\n \t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\" \"\")\n \t\t\t   (match_operand:VI_HW_QHS 3 \"register_operand\" \"\")\n-\t\t\t   (match_operand:SI        4 \"immediate_operand\" \"C\")]\n+\t\t\t   (match_operand:QI        4 \"const_mask_operand\" \"\")]\n \t\t\t  UNSPEC_VEC_VSTRC))\n    (set (reg:CCRAW CC_REGNUM)\n \t(unspec:CCRAW [(match_dup 1)\n@@ -1647,11 +1647,11 @@\n \n ; Signed V2DI -> V2DF conversion - inexact exception disabled\n (define_insn \"vec_di_to_df_s64\"\n-  [(set (match_operand:V2DF 0 \"register_operand\"               \"=v\")\n-\t(unspec:V2DF [(match_operand:V2DI 1 \"register_operand\"  \"v\")\n-\t\t      (match_operand:QI   2 \"immediate_operand\" \"C\")]\n+  [(set (match_operand:V2DF 0 \"register_operand\"                \"=v\")\n+\t(unspec:V2DF [(match_operand:V2DI 1 \"register_operand\"   \"v\")\n+\t\t      (match_operand:QI   2 \"const_mask_operand\" \"C\")]\n \t\t     UNSPEC_VEC_VCDGB))]\n-  \"TARGET_VX\"\n+  \"TARGET_VX && UINTVAL (operands[2]) != 2 && UINTVAL (operands[2]) <= 7\"\n   \"vcdgb\\t%v0,%v1,4,%b2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n@@ -1661,7 +1661,7 @@\n \t(unspec:V2DF [(match_operand:V2DI 1 \"register_operand\" \"\")\n \t\t      (const_int 0)] ; According to current BFP rounding mode\n \t\t     UNSPEC_VEC_VCDGB))\n-   (use (match_operand:QI 2 \"immediate_operand\" \"\"))\n+   (use (match_operand:QI 2 \"const_int_operand\" \"\"))\n    (set (match_dup 0) (mult:V2DF (match_dup 0) (match_dup 3)))]\n   \"TARGET_VX\"\n {\n@@ -1679,7 +1679,7 @@\n (define_insn \"vec_di_to_df_u64\"\n   [(set (match_operand:V2DF 0 \"register_operand\"               \"=v\")\n \t(unspec:V2DF [(match_operand:V2DI 1 \"register_operand\"  \"v\")\n-\t\t      (match_operand:QI   2 \"immediate_operand\" \"C\")]\n+\t\t      (match_operand:QI   2 \"const_int_operand\" \"C\")]\n \t\t     UNSPEC_VEC_VCDLGB))]\n   \"TARGET_VX\"\n   \"vcdlgb\\t%v0,%v1,4,%b2\"\n@@ -1691,7 +1691,7 @@\n \t(unspec:V2DF [(match_operand:V2DI 1 \"register_operand\" \"\")\n \t\t      (const_int 0)] ; According to current BFP rounding mode\n \t\t     UNSPEC_VEC_VCDLGB))\n-   (use (match_operand:QI 2 \"immediate_operand\" \"\"))\n+   (use (match_operand:QI 2 \"const_int_operand\" \"\"))\n    (set (match_dup 0) (mult:V2DF (match_dup 0) (match_dup 3)))]\n   \"TARGET_VX\"\n {\n@@ -1710,15 +1710,15 @@\n (define_insn \"vec_df_to_di_s64\"\n   [(set (match_operand:V2DI 0 \"register_operand\"               \"=v\")\n \t(unspec:V2DI [(match_operand:V2DF 1 \"register_operand\"  \"v\")\n-\t\t      (match_operand:QI   2 \"immediate_operand\" \"C\")]\n+\t\t      (match_operand:QI   2 \"const_int_operand\" \"C\")]\n \t\t     UNSPEC_VEC_VCGDB))]\n   \"TARGET_VX\"\n   \"vcgdb\\t%v0,%v1,4,%b2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n ; The input needs to be multiplied with 2**op2\n (define_expand \"vec_ctsl\"\n-  [(use (match_operand:QI 2 \"immediate_operand\" \"\"))\n+  [(use (match_operand:QI 2 \"const_int_operand\" \"\"))\n    (set (match_dup 4) (mult:V2DF (match_operand:V2DF 1 \"register_operand\" \"\")\n \t\t\t\t (match_dup 3)))\n    (set (match_operand:V2DI 0 \"register_operand\" \"\")\n@@ -1741,15 +1741,15 @@\n (define_insn \"vec_df_to_di_u64\"\n   [(set (match_operand:V2DI 0 \"register_operand\"               \"=v\")\n \t(unspec:V2DI [(match_operand:V2DF 1 \"register_operand\"  \"v\")\n-\t\t      (match_operand:QI   2 \"immediate_operand\" \"C\")]\n+\t\t      (match_operand:QI   2 \"const_mask_operand\" \"C\")]\n \t\t     UNSPEC_VEC_VCLGDB))]\n-  \"TARGET_VX\"\n+  \"TARGET_VX && UINTVAL (operands[2]) <= 7\"\n   \"vclgdb\\t%v0,%v1,4,%b2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n ; The input needs to be multiplied with 2**op2\n (define_expand \"vec_ctul\"\n-  [(use (match_operand:QI 2 \"immediate_operand\" \"\"))\n+  [(use (match_operand:QI 2 \"const_int_operand\" \"\"))\n    (set (match_dup 4) (mult:V2DF (match_operand:V2DF 1 \"register_operand\" \"\")\n \t\t\t\t (match_dup 3)))\n    (set (match_operand:V2DI 0 \"register_operand\" \"\")\n@@ -1770,12 +1770,12 @@\n \n ; Vector load fp integer - IEEE inexact exception is suppressed\n (define_insn \"vfidb\"\n-  [(set (match_operand:V2DI               0 \"register_operand\" \"=v\")\n-\t(unspec:V2DI [(match_operand:V2DF 1 \"register_operand\"  \"v\")\n-\t\t      (match_operand:QI   2 \"immediate_operand\" \"C\")\n-\t\t      (match_operand:QI   3 \"immediate_operand\" \"C\")]\n+  [(set (match_operand:V2DI               0 \"register_operand\"  \"=v\")\n+\t(unspec:V2DI [(match_operand:V2DF 1 \"register_operand\"   \"v\")\n+\t\t      (match_operand:QI   2 \"const_mask_operand\" \"C\")\n+\t\t      (match_operand:QI   3 \"const_mask_operand\" \"C\")]\n \t\t     UNSPEC_VEC_VFIDB))]\n-  \"TARGET_VX\"\n+  \"TARGET_VX && !(UINTVAL (operands[2]) & 3) && UINTVAL (operands[3]) <= 7\"\n   \"vfidb\\t%v0,%v1,%b2,%b3\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n@@ -1887,35 +1887,35 @@\n (define_insn \"*vftcidb\"\n   [(set (match_operand:V2DF 0 \"register_operand\"  \"=v\")\n \t(unspec:V2DF [(match_operand:V2DF 1 \"register_operand\"  \"v\")\n-\t\t      (match_operand:SI   2 \"immediate_operand\" \"J\")]\n+\t\t      (match_operand:HI   2 \"const_int_operand\" \"J\")]\n \t\t     UNSPEC_VEC_VFTCIDB))\n    (set (reg:CCRAW CC_REGNUM)\n \t(unspec:CCRAW [(match_dup 1) (match_dup 2)] UNSPEC_VEC_VFTCIDBCC))]\n-  \"TARGET_VX\"\n+  \"TARGET_VX && CONST_OK_FOR_CONSTRAINT_P (INTVAL (operands[2]), 'J', \\\"J\\\")\"\n   \"vftcidb\\t%v0,%v1,%x2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n (define_insn \"*vftcidb_cconly\"\n   [(set (reg:CCRAW CC_REGNUM)\n \t(unspec:CCRAW [(match_operand:V2DF 1 \"register_operand\"  \"v\")\n-\t\t       (match_operand:SI   2 \"immediate_operand\" \"J\")]\n+\t\t       (match_operand:HI   2 \"const_int_operand\" \"J\")]\n \t\t      UNSPEC_VEC_VFTCIDBCC))\n    (clobber (match_scratch:V2DI 0 \"=v\"))]\n-  \"TARGET_VX\"\n+  \"TARGET_VX && CONST_OK_FOR_CONSTRAINT_P (INTVAL (operands[2]), 'J', \\\"J\\\")\"\n   \"vftcidb\\t%v0,%v1,%x2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n (define_expand \"vftcidb\"\n   [(parallel\n     [(set (match_operand:V2DF               0 \"register_operand\"  \"\")\n \t  (unspec:V2DF [(match_operand:V2DF 1 \"register_operand\"  \"\")\n-\t\t\t(match_operand:SI   2 \"immediate_operand\" \"\")]\n+\t\t\t(match_operand:HI   2 \"const_int_operand\" \"\")]\n \t\t       UNSPEC_VEC_VFTCIDB))\n      (set (reg:CCRAW CC_REGNUM)\n \t  (unspec:CCRAW [(match_dup 1) (match_dup 2)] UNSPEC_VEC_VFTCIDBCC))])\n    (set (match_operand:SI 3 \"memory_operand\" \"\")\n \t(unspec:SI [(reg:CCRAW CC_REGNUM)] UNSPEC_CC_TO_INT))]\n-  \"TARGET_VX\")\n+  \"TARGET_VX && CONST_OK_FOR_CONSTRAINT_P (INTVAL (operands[2]), 'J', \\\"J\\\")\")\n \n ;;\n ;; Integer compares"}]}