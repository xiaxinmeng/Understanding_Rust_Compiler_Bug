{"sha": "c947d638c601375ce799ef4d87f9aa6d5b8972a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk0N2Q2MzhjNjAxMzc1Y2U3OTllZjRkODdmOWFhNmQ1Yjg5NzJhOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-12-21T15:56:22Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-12-21T15:56:22Z"}, "message": "re PR libstdc++/38596 (tr1_impl/functional incompatible with -fno-rtti)\n\n2008-12-21  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/38596\n\t* include/tr1_impl/function (function<>::target,\n\tfunction<>::target_type): Provide only when __GXX_RTTI is defined.\n\t(_Function_base::_M_manager, _Ref_manager<>::_M_manager,\n\t_Function_handler<void(_ArgTypes...), _Member _Class::*>::_M_manager):\n\tAdjust.\n\nFrom-SVN: r142862", "tree": {"sha": "803821babb9d1a61932326659c49f4defabde15f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/803821babb9d1a61932326659c49f4defabde15f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c947d638c601375ce799ef4d87f9aa6d5b8972a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c947d638c601375ce799ef4d87f9aa6d5b8972a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c947d638c601375ce799ef4d87f9aa6d5b8972a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c947d638c601375ce799ef4d87f9aa6d5b8972a8/comments", "author": null, "committer": null, "parents": [{"sha": "924eabec0b90e5499271806c28af40814d77496b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/924eabec0b90e5499271806c28af40814d77496b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/924eabec0b90e5499271806c28af40814d77496b"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "b0ebadca88bc6b405de0e9a2362321d5b200f08c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c947d638c601375ce799ef4d87f9aa6d5b8972a8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c947d638c601375ce799ef4d87f9aa6d5b8972a8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c947d638c601375ce799ef4d87f9aa6d5b8972a8", "patch": "@@ -1,3 +1,12 @@\n+2008-12-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/38596\n+\t* include/tr1_impl/function (function<>::target,\n+\tfunction<>::target_type): Provide only when __GXX_RTTI is defined.\n+\t(_Function_base::_M_manager, _Ref_manager<>::_M_manager,\n+\t_Function_handler<void(_ArgTypes...), _Member _Class::*>::_M_manager):\n+\tAdjust.\n+\n 2008-12-19  Ben Elliston  <bje@au.ibm.com>\n \n \t* acinclude.m4: Guard a variable test against an empty string."}, {"sha": "f3d843c9d8cd9686d70480d745d2acd9b3917e1b", "filename": "libstdc++-v3/include/tr1_impl/functional", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c947d638c601375ce799ef4d87f9aa6d5b8972a8/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c947d638c601375ce799ef4d87f9aa6d5b8972a8/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ffunctional?ref=c947d638c601375ce799ef4d87f9aa6d5b8972a8", "patch": "@@ -1531,10 +1531,11 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \t{\n \t  switch (__op)\n \t    {\n+#ifdef __GXX_RTTI\n \t    case __get_type_info:\n \t      __dest._M_access<const type_info*>() = &typeid(_Functor);\n \t      break;\n-\n+#endif\n \t    case __get_functor_ptr:\n \t      __dest._M_access<_Functor*>() = _M_get_pointer(__source);\n \t      break;\n@@ -1596,10 +1597,11 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \t{\n \t  switch (__op)\n \t    {\n+#ifdef __GXX_RTTI\n \t    case __get_type_info:\n \t      __dest._M_access<const type_info*>() = &typeid(_Functor);\n \t      break;\n-\t      \n+#endif\n \t    case __get_functor_ptr:\n \t      __dest._M_access<_Functor*>() = *_Base::_M_get_pointer(__source);\n \t      return is_const<_Functor>::value;\n@@ -1730,10 +1732,11 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       {\n         switch (__op)\n \t  {\n+#ifdef __GXX_RTTI\n \t  case __get_type_info:\n \t    __dest._M_access<const type_info*>() = &typeid(_Functor);\n \t    break;\n-\t    \n+#endif\t    \n \t  case __get_functor_ptr:\n \t    __dest._M_access<_Functor*>() =\n \t      &_Base::_M_get_pointer(__source)->__value;\n@@ -1935,7 +1938,8 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n        *  stored by @c this.\n        */\n       _Res operator()(_ArgTypes... __args) const;\n-      \n+\n+#ifdef __GXX_RTTI\n       // [3.7.2.5] function target access\n       /**\n        *  @brief Determine the type of the target of this function object\n@@ -1961,7 +1965,8 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       \n       /// @overload\n       template<typename _Functor> const _Functor* target() const;\n-      \n+#endif\n+\n     private:\n       // [3.7.2.6] undefined operators\n       template<typename _Function>\n@@ -2020,6 +2025,7 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       return _M_invoker(_M_functor, __args...);\n     }\n \n+#ifdef __GXX_RTTI\n   template<typename _Res, typename... _ArgTypes>\n     const type_info&\n     function<_Res(_ArgTypes...)>::\n@@ -2069,6 +2075,7 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \telse\n \t  return 0;\n       }\n+#endif\n \n   // [3.7.2.7] null pointer comparisons\n "}]}