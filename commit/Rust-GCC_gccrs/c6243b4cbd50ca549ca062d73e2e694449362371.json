{"sha": "c6243b4cbd50ca549ca062d73e2e694449362371", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYyNDNiNGNiZDUwY2E1NDljYTA2MmQ3M2UyZTY5NDQ0OTM2MjM3MQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@redhat.com", "date": "2001-11-09T01:17:07Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2001-11-09T01:17:07Z"}, "message": "In ChangeLog: 2001-11-08 Geoffrey Keating <geoffk@redhat.com>\n\nIn ChangeLog:\n2001-11-08  Geoffrey Keating  <geoffk@redhat.com>\n\n\t* config.sub: Import from master sources, rev. 1.230.\n\t* MAINTAINERS: Change 'stormy16' to 'xstormy16'.\n\nIndex: gcc/ChangeLog\n2001-11-08  Geoffrey Keating  <geoffk@redhat.com>\n\n\t* config.gcc: Rename stormy16 to xstormy16.\n\t* config/stormy16/stormy-abi: Likewise.\n\t* config/stormy16/stormy16-protos.h: Likewise.\n\t* config/stormy16/stormy16.c: Likewise.\n\t* config/stormy16/stormy16.h: Likewise.\n\t* config/stormy16/stormy16.md: Likewise.\n\nIndex: gcc/testsuite/ChangeLog\n2001-11-08  Geoffrey Keating  <geoffk@redhat.com>\n\n\t* g++.old-deja/g++.bugs/900227_01.C: Change stormy16 to xstormy16.\n\t* g++.old-deja/g++.eh/badalloc1.C: Change stormy16 to xstormy16.\n\t* g++.old-deja/g++.mike/ns15.C: Change stormy16 to xstormy16.\n\t* g++.old-deja/g++.pt/crash16.C: Change stormy16 to xstormy16.\n\t* gcc.c-torture/compile/961203-1.x: Change stormy16 to xstormy16.\n\t* gcc.c-torture/compile/980506-1.x: Change stormy16 to xstormy16.\n\t* gcc.c-torture/compile/990617-1.x: Change stormy16 to xstormy16.\n\nFrom-SVN: r46867", "tree": {"sha": "6c97f7cbf3d1bfdc96be4058eef624db563ccd20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c97f7cbf3d1bfdc96be4058eef624db563ccd20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6243b4cbd50ca549ca062d73e2e694449362371", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6243b4cbd50ca549ca062d73e2e694449362371", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6243b4cbd50ca549ca062d73e2e694449362371", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6243b4cbd50ca549ca062d73e2e694449362371/comments", "author": null, "committer": null, "parents": [{"sha": "7857151141885e7e091c30170f76bbf394b56478", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7857151141885e7e091c30170f76bbf394b56478", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7857151141885e7e091c30170f76bbf394b56478"}], "stats": {"total": 487, "additions": 260, "deletions": 227}, "files": [{"sha": "ef287de5ee171afc53add7e944afecb64901787b", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6243b4cbd50ca549ca062d73e2e694449362371/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6243b4cbd50ca549ca062d73e2e694449362371/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=c6243b4cbd50ca549ca062d73e2e694449362371", "patch": "@@ -1,3 +1,8 @@\n+2001-11-08  Geoffrey Keating  <geoffk@redhat.com>\n+\n+\t* config.sub: Import from master sources, rev. 1.230.\n+\t* MAINTAINERS: Change 'stormy16' to 'xstormy16'.\n+\n 2001-11-07  Laurent Guerby  <guerby@acm.org>\n \n \t* MAINTAINERS (Write After Approval): Add self."}, {"sha": "f4939580ba9e8584dca28ccfc194e03d639982de", "filename": "MAINTAINERS", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6243b4cbd50ca549ca062d73e2e694449362371/MAINTAINERS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6243b4cbd50ca549ca062d73e2e694449362371/MAINTAINERS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/MAINTAINERS?ref=c6243b4cbd50ca549ca062d73e2e694449362371", "patch": "@@ -43,7 +43,7 @@ alpha port\t\tRichard Henderson\trth@redhat.com\n sparc port\t\tRichard Henderson\trth@redhat.com\n sparc port\t\tDavid S. Miller\t\tdavem@redhat.com\n sparc port\t\tJakub Jelinek\t\tjakub@redhat.com\n-stormy16 port\t\tGeoffrey Keating\tgeoffk@redhat.com\n+xstormy16 port\t\tGeoffrey Keating\tgeoffk@redhat.com\n x86 ports\t\tStan Cox\t\tscox@redhat.com\n c4x port\t\tMichael Hayes\t\tm.hayes@elec.canterbury.ac.nz\n arc port\t\tRichard Kenner\t\tkenner@nyu.edu"}, {"sha": "24794696d385740b6b5c17fd3ade2787c010d70d", "filename": "config.sub", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6243b4cbd50ca549ca062d73e2e694449362371/config.sub", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6243b4cbd50ca549ca062d73e2e694449362371/config.sub", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config.sub?ref=c6243b4cbd50ca549ca062d73e2e694449362371", "patch": "@@ -3,7 +3,7 @@\n #   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001\n #   Free Software Foundation, Inc.\n \n-timestamp='2001-10-05'\n+timestamp='2001-11-08'\n \n # This file is (in principle) common to ALL GNU software.\n # The presence of a machine in this file suggests that SOME GNU software\n@@ -245,14 +245,13 @@ case $basic_machine in\n \t| pdp10 | pdp11 | pj | pjl \\\n \t| powerpc | powerpc64 | powerpc64le | powerpcle | ppcbe \\\n \t| pyramid \\\n-\t| s390 | s390x \\\n \t| sh | sh[34] | sh[34]eb | shbe | shle \\\n \t| sparc | sparc64 | sparclet | sparclite | sparcv9 | sparcv9b \\\n-\t| stormy16 | strongarm \\\n+\t| strongarm \\\n \t| tahoe | thumb | tic80 | tron \\\n \t| v850 \\\n \t| we32k \\\n-\t| x86 | xscale \\\n+\t| x86 | xscale | xstormy16 \\\n \t| z8k)\n \t\tbasic_machine=$basic_machine-unknown\n \t\t;;\n@@ -304,14 +303,13 @@ case $basic_machine in\n \t| powerpc-* | powerpc64-* | powerpc64le-* | powerpcle-* | ppcbe-* \\\n \t| pyramid-* \\\n \t| romp-* | rs6000-* \\\n-\t| s390-* | s390x-* \\\n \t| sh-* | sh[34]-* | sh[34]eb-* | shbe-* | shle-* \\\n \t| sparc-* | sparc64-* | sparc86x-* | sparclite-* \\\n-\t| sparcv9-* | sparcv9b-* | stormy16-* | strongarm-* | sv1-* \\\n+\t| sparcv9-* | sparcv9b-* | strongarm-* | sv1-* \\\n \t| t3e-* | tahoe-* | thumb-* | tic30-* | tic54x-* | tic80-* | tron-* \\\n \t| v850-* | vax-* \\\n \t| we32k-* \\\n-\t| x86-* | x86_64-* | xmp-* | xps100-* | xscale-* \\\n+\t| x86-* | x86_64-* | xmp-* | xps100-* | xscale-* | xstormy16-* \\\n \t| ymp-* \\\n \t| z8k-*)\n \t\t;;\n@@ -786,6 +784,12 @@ case $basic_machine in\n \trtpc | rtpc-*)\n \t\tbasic_machine=romp-ibm\n \t\t;;\n+\ts390 | s390-*)\n+\t\tbasic_machine=s390-ibm\n+\t\t;;\n+\ts390x | s390x-*)\n+\t\tbasic_machine=s390x-ibm\n+\t\t;;\n \tsa29200)\n \t\tbasic_machine=a29k-amd\n \t\tos=-udi\n@@ -1070,7 +1074,7 @@ case $os in\n \t      | -interix* | -uwin* | -rhapsody* | -darwin* | -opened* \\\n \t      | -openstep* | -oskit* | -conix* | -pw32* | -nonstopux* \\\n \t      | -storm-chaos* | -tops10* | -tenex* | -tops20* | -its* \\\n-\t      | -os2* | -vos*)\n+\t      | -os2* | -vos* | -palmos* | -uclinux*)\n \t# Remember, each alternative MUST END IN *, to match a version number.\n \t\t;;\n \t-qnx*)"}, {"sha": "974b21b67ab5d60e19daabaff7d05c729ed1f805", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6243b4cbd50ca549ca062d73e2e694449362371", "patch": "@@ -1,3 +1,17 @@\n+2001-11-08  Geoffrey Keating  <geoffk@redhat.com>\n+\n+\t* config.gcc: Rename stormy16 to xstormy16.\n+\t* config/stormy16/stormy-abi: Likewise.\n+\t* config/stormy16/stormy16-protos.h: Likewise.\n+\t* config/stormy16/stormy16.c: Likewise.\n+\t* config/stormy16/stormy16.h: Likewise.\n+\t* config/stormy16/stormy16.md: Likewise.\n+\n+2001-11-06  Geoffrey Keating  <geoffk@redhat.com>\n+\n+\t* tree.h (TYPE_VOLATILE): Add enable-checking code.\n+\t(TYPE_READONLY): Likewise.\n+\n Thu Nov  8 18:00:55 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* reload1.c (reload): Don't delete equiv insn if can throw."}, {"sha": "8bd2ebd486f0764ab1edb7069dda5d5ed026d1f5", "filename": "gcc/config/stormy16/stormy-abi", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2Fconfig%2Fstormy16%2Fstormy-abi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2Fconfig%2Fstormy16%2Fstormy-abi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy-abi?ref=c6243b4cbd50ca549ca062d73e2e694449362371", "patch": "@@ -1,4 +1,4 @@\n-Stormy16 ABI\n+xStormy16 ABI\n ************\n \n !!!!! NOTE !!!!!\n@@ -114,10 +114,10 @@ ELF File Format\n ELF file header\n ---------------\n \n-Stormy16 ELF files are distinguished by the value EM_STORMY16 in\n+xStormy16 ELF files are distinguished by the value EM_XSTORMY16 in\n the e_machine field of the ELF file header:\n \n-#define EM_STORMY16\t        0xad45\n+#define EM_XSTORMY16\t        0xad45\n \n DWARF Register Number Mapping\n -----------------------------\n@@ -131,17 +131,17 @@ RELA relocs are used exclusively.  The relocation types defined are:\n \n Name\t\t\tValue\tField\tCalculation\tOverflow\n ----------------------------------------------------------------\n-R_STORMY16_NONE\t\t0\tnone\tnone\t\tnone\n-R_STORMY16_32\t\t1\t32\tS + A\t\tnone\n-R_STORMY16_16\t\t2\t16\tS + A\t\tunsigned\n-R_STORMY16_8\t\t3\t8\tS + A\t\tunsigned\n-R_STORMY16_PC32\t\t4\t32\tS + A - P\tnone\n-R_STORMY16_PC16\t\t5\t16\tS + A - P\tsigned\n-R_STORMY16_PC8\t\t6\t8\tS + A - P\tsigned\n-R_STORMY16_REL_12\t7\t16:12:0\tS + A - P\tsigned\n-R_STORMY16_24\t\t8\t32:23:1\t(S + A) >> 1\tunsigned\n-R_STORMY16_GNU_VTINHERIT 9\tn/a\tn/a\t\tn/a\n-R_STORMY16_GNU_VTENTRY\t10\tn/a\tn/a\t\tn/a\n+R_XSTORMY16_NONE\t\t0\tnone\tnone\t\tnone\n+R_XSTORMY16_32\t\t1\t32\tS + A\t\tnone\n+R_XSTORMY16_16\t\t2\t16\tS + A\t\tunsigned\n+R_XSTORMY16_8\t\t3\t8\tS + A\t\tunsigned\n+R_XSTORMY16_PC32\t\t4\t32\tS + A - P\tnone\n+R_XSTORMY16_PC16\t\t5\t16\tS + A - P\tsigned\n+R_XSTORMY16_PC8\t\t6\t8\tS + A - P\tsigned\n+R_XSTORMY16_REL_12\t7\t16:12:0\tS + A - P\tsigned\n+R_XSTORMY16_24\t\t8\t32:23:1\t(S + A) >> 1\tunsigned\n+R_XSTORMY16_GNU_VTINHERIT 9\tn/a\tn/a\t\tn/a\n+R_XSTORMY16_GNU_VTENTRY\t10\tn/a\tn/a\t\tn/a\n \n In the 'Calculation' column, 'S' is the value of the symbol to which\n the reloc refers, 'A' is the addend, and 'P' represents the place of"}, {"sha": "47c1e3e2b54fd153c700fe96fe02e898f524c365", "filename": "gcc/config/stormy16/stormy16-protos.h", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h?ref=c6243b4cbd50ca549ca062d73e2e694449362371", "patch": "@@ -1,4 +1,4 @@\n-/* Prototypes for exported functions defined in stormy16.c\n+/* Prototypes for exported functions defined in xstormy16.c\n    Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc.\n \n@@ -21,71 +21,71 @@ Boston, MA 02111-1307, USA.  */\n \n \n \n-extern struct stormy16_stack_layout \n-\t\t    stormy16_compute_stack_layout PARAMS((void));\n-extern void         stormy16_expand_prologue      PARAMS ((void));\n-extern void         stormy16_expand_epilogue      PARAMS ((void));\n-extern int\tstormy16_initial_elimination_offset PARAMS ((int, int));\n+extern struct xstormy16_stack_layout \n+\t\t    xstormy16_compute_stack_layout PARAMS((void));\n+extern void         xstormy16_expand_prologue      PARAMS ((void));\n+extern void         xstormy16_expand_epilogue      PARAMS ((void));\n+extern int\txstormy16_initial_elimination_offset PARAMS ((int, int));\n extern int\tdirect_return PARAMS ((void));\n-extern int\tstormy16_interrupt_function_p PARAMS ((void));\n-extern int\tstormy16_epilogue_uses PARAMS ((int));\n+extern int\txstormy16_interrupt_function_p PARAMS ((void));\n+extern int\txstormy16_epilogue_uses PARAMS ((int));\n \n #if defined (TREE_CODE)\n #  if defined (HAVE_MACHINE_MODES)\n-extern CUMULATIVE_ARGS stormy16_function_arg_advance \n+extern CUMULATIVE_ARGS xstormy16_function_arg_advance \n   PARAMS ((CUMULATIVE_ARGS, enum machine_mode, tree, int));\n #  endif\n-extern void    stormy16_setup_incoming_varargs \n+extern void    xstormy16_setup_incoming_varargs \n   PARAMS ((CUMULATIVE_ARGS, int, tree, int *));\n-extern tree    stormy16_build_va_list PARAMS ((void));\n-extern void    stormy16_encode_section_info PARAMS ((tree));\n+extern tree    xstormy16_build_va_list PARAMS ((void));\n+extern void    xstormy16_encode_section_info PARAMS ((tree));\n #endif\n \n #if defined (TREE_CODE) && defined (RTX_CODE)\n-extern void    stormy16_expand_builtin_va_start PARAMS ((int, tree, rtx));\n-extern rtx     stormy16_expand_builtin_va_arg PARAMS ((tree, tree));\n-extern void    stormy16_initialize_trampoline PARAMS ((rtx, rtx, rtx));\n-extern rtx     stormy16_function_value PARAMS ((tree, tree));\n-extern void    stormy16_asm_output_mi_thunk PARAMS ((FILE *, tree, int, tree));\n+extern void    xstormy16_expand_builtin_va_start PARAMS ((int, tree, rtx));\n+extern rtx     xstormy16_expand_builtin_va_arg PARAMS ((tree, tree));\n+extern void    xstormy16_initialize_trampoline PARAMS ((rtx, rtx, rtx));\n+extern rtx     xstormy16_function_value PARAMS ((tree, tree));\n+extern void    xstormy16_asm_output_mi_thunk PARAMS ((FILE *, tree, int, tree));\n #endif\n \n #ifdef RTX_CODE\n-extern void stormy16_emit_cbranch PARAMS ((enum rtx_code, rtx));\n-extern char * stormy16_output_cbranch_hi PARAMS ((rtx, const char *, int, \n+extern void xstormy16_emit_cbranch PARAMS ((enum rtx_code, rtx));\n+extern char * xstormy16_output_cbranch_hi PARAMS ((rtx, const char *, int, \n \t\t\t\t\t\t  rtx));\n-extern char * stormy16_output_cbranch_si PARAMS ((rtx, const char *, int, \n+extern char * xstormy16_output_cbranch_si PARAMS ((rtx, const char *, int, \n \t\t\t\t\t\t  rtx));\n-extern int stormy16_mode_dependent_address_p PARAMS ((rtx));\n-extern int stormy16_extra_constraint_p PARAMS ((rtx, int));\n+extern int xstormy16_mode_dependent_address_p PARAMS ((rtx));\n+extern int xstormy16_extra_constraint_p PARAMS ((rtx, int));\n \n-extern void stormy16_print_operand          PARAMS ((FILE *, rtx, int));\n-extern void stormy16_print_operand_address  PARAMS ((FILE *, rtx));\n+extern void xstormy16_print_operand          PARAMS ((FILE *, rtx, int));\n+extern void xstormy16_print_operand_address  PARAMS ((FILE *, rtx));\n \n-extern void stormy16_expand_casesi PARAMS ((rtx, rtx, rtx, rtx, rtx));\n-extern void stormy16_output_addr_vec PARAMS ((FILE *, rtx, rtx));\n-extern void stormy16_expand_call PARAMS ((rtx, rtx, rtx));\n+extern void xstormy16_expand_casesi PARAMS ((rtx, rtx, rtx, rtx, rtx));\n+extern void xstormy16_output_addr_vec PARAMS ((FILE *, rtx, rtx));\n+extern void xstormy16_expand_call PARAMS ((rtx, rtx, rtx));\n #endif\n \n #if defined (HAVE_MACHINE_MODES) && defined (RTX_CODE)\n-extern int stormy16_ineqsi_operator PARAMS ((rtx, enum machine_mode));\n+extern int xstormy16_ineqsi_operator PARAMS ((rtx, enum machine_mode));\n extern int equality_operator PARAMS ((rtx, enum machine_mode));\n extern int inequality_operator PARAMS ((rtx, enum machine_mode));\n-extern void stormy16_split_cbranch PARAMS ((enum machine_mode, \n+extern void xstormy16_split_cbranch PARAMS ((enum machine_mode, \n \t\t\t\t\t   rtx, rtx, rtx, rtx));\n extern int  short_memory_operand PARAMS ((rtx, enum machine_mode));\n-extern enum reg_class stormy16_secondary_reload_class \n+extern enum reg_class xstormy16_secondary_reload_class \n   PARAMS ((enum reg_class, enum machine_mode, rtx));\n-extern int  stormy16_carry_plus_operand PARAMS ((rtx, enum machine_mode));\n-extern enum reg_class stormy16_preferred_reload_class \n+extern int  xstormy16_carry_plus_operand PARAMS ((rtx, enum machine_mode));\n+extern enum reg_class xstormy16_preferred_reload_class \n   PARAMS ((rtx, enum reg_class));\n-extern int stormy16_legitimate_address_p \n+extern int xstormy16_legitimate_address_p \n    PARAMS ((enum machine_mode, rtx, int));\n-extern void stormy16_split_move PARAMS ((enum machine_mode, rtx, rtx));\n-extern void stormy16_expand_move PARAMS ((enum machine_mode, rtx, rtx));\n-extern void stormy16_expand_arith PARAMS ((enum machine_mode, enum rtx_code, \n+extern void xstormy16_split_move PARAMS ((enum machine_mode, rtx, rtx));\n+extern void xstormy16_expand_move PARAMS ((enum machine_mode, rtx, rtx));\n+extern void xstormy16_expand_arith PARAMS ((enum machine_mode, enum rtx_code, \n \t\t\t\t\t   rtx, rtx, rtx, rtx));\n extern int  shift_operator PARAMS ((rtx, enum machine_mode));\n-extern const char * stormy16_output_shift PARAMS ((enum machine_mode, \n+extern const char * xstormy16_output_shift PARAMS ((enum machine_mode, \n \t\t\t\t\t\t   enum rtx_code, \n \t\t\t\t\t\t   rtx, rtx, rtx));\n #endif"}, {"sha": "78831540c7d4b583286f8b2db8adbfecf20158bb", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 88, "deletions": 88, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=c6243b4cbd50ca549ca062d73e2e694449362371", "patch": "@@ -1,4 +1,4 @@\n-/* Stormy16 target functions.\n+/* Xstormy16 target functions.\n    Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc.\n \n@@ -45,18 +45,18 @@ Boston, MA 02111-1307, USA.  */\n #include \"tm_p.h\"\n \n static rtx emit_addhi3_postreload PARAMS ((rtx, rtx, rtx));\n-static void stormy16_asm_out_constructor PARAMS ((rtx, int));\n-static void stormy16_asm_out_destructor PARAMS ((rtx, int));\n+static void xstormy16_asm_out_constructor PARAMS ((rtx, int));\n+static void xstormy16_asm_out_destructor PARAMS ((rtx, int));\n \n /* Define the information needed to generate branch and scc insns.  This is\n    stored from the compare operation.  */\n-struct rtx_def * stormy16_compare_op0;\n-struct rtx_def * stormy16_compare_op1;\n+struct rtx_def * xstormy16_compare_op0;\n+struct rtx_def * xstormy16_compare_op1;\n \n /* Return 1 if this is a LT, GE, LTU, or GEU operator.  */\n \n int\n-stormy16_ineqsi_operator (op, mode)\n+xstormy16_ineqsi_operator (op, mode)\n     register rtx op;\n     enum machine_mode mode;\n {\n@@ -113,12 +113,12 @@ inequality_operator (op, mode)\n /* Emit a branch of kind CODE to location LOC.  */\n \n void\n-stormy16_emit_cbranch (code, loc)\n+xstormy16_emit_cbranch (code, loc)\n      enum rtx_code code;\n      rtx loc;\n {\n-  rtx op0 = stormy16_compare_op0;\n-  rtx op1 = stormy16_compare_op1;\n+  rtx op0 = xstormy16_compare_op0;\n+  rtx op1 = xstormy16_compare_op1;\n   rtx condition_rtx, loc_ref, branch, cy_clobber;\n   rtvec vec;\n   enum machine_mode mode;\n@@ -136,10 +136,10 @@ stormy16_emit_cbranch (code, loc)\n       \n       if (gt_p)\n \tlab = gen_label_rtx ();\n-      stormy16_emit_cbranch (unsigned_p ? LTU : LT, gt_p ? lab : loc);\n+      xstormy16_emit_cbranch (unsigned_p ? LTU : LT, gt_p ? lab : loc);\n       /* This should be generated as a comparison against the temporary\n \t created by the previous insn, but reload can't handle that.  */\n-      stormy16_emit_cbranch (gt_p ? NE : EQ, loc);\n+      xstormy16_emit_cbranch (gt_p ? NE : EQ, loc);\n       if (gt_p)\n \temit_label (lab);\n       return;\n@@ -157,17 +157,17 @@ stormy16_emit_cbranch (code, loc)\n       \n       for (i = 0; i < num_words - 1; i++)\n \t{\n-\t  stormy16_compare_op0 = simplify_gen_subreg (word_mode, op0, mode, \n+\t  xstormy16_compare_op0 = simplify_gen_subreg (word_mode, op0, mode, \n \t\t\t\t\t\t      i * UNITS_PER_WORD);\n-\t  stormy16_compare_op1 = simplify_gen_subreg (word_mode, op1, mode, \n+\t  xstormy16_compare_op1 = simplify_gen_subreg (word_mode, op1, mode, \n \t\t\t\t\t\t      i * UNITS_PER_WORD);\n-\t  stormy16_emit_cbranch (NE, code == EQ ? lab : loc);\n+\t  xstormy16_emit_cbranch (NE, code == EQ ? lab : loc);\n \t}\n-      stormy16_compare_op0 = simplify_gen_subreg (word_mode, op0, mode, \n+      xstormy16_compare_op0 = simplify_gen_subreg (word_mode, op0, mode, \n \t\t\t\t\t\t  i * UNITS_PER_WORD);\n-      stormy16_compare_op1 = simplify_gen_subreg (word_mode, op1, mode, \n+      xstormy16_compare_op1 = simplify_gen_subreg (word_mode, op1, mode, \n \t\t\t\t\t\t  i * UNITS_PER_WORD);\n-      stormy16_emit_cbranch (code, loc);\n+      xstormy16_emit_cbranch (code, loc);\n \n       if (code == EQ)\n \temit_label (lab);\n@@ -212,10 +212,10 @@ stormy16_emit_cbranch (code, loc)\n \n /* Take a SImode conditional branch, one of GT/LE/GTU/LEU, and split\n    the arithmetic operation.  Most of the work is done by\n-   stormy16_expand_arith.  */\n+   xstormy16_expand_arith.  */\n \n void\n-stormy16_split_cbranch (mode, label, comparison, dest, carry)\n+xstormy16_split_cbranch (mode, label, comparison, dest, carry)\n      enum machine_mode mode;\n      rtx label;\n      rtx comparison;\n@@ -228,7 +228,7 @@ stormy16_split_cbranch (mode, label, comparison, dest, carry)\n   rtx compare;\n   \n   start_sequence ();\n-  stormy16_expand_arith (mode, COMPARE, dest, op0, op1, carry);\n+  xstormy16_expand_arith (mode, COMPARE, dest, op0, op1, carry);\n   seq = gen_sequence ();\n   end_sequence ();\n   compare = SET_SRC (XVECEXP (PATTERN (XVECEXP (seq, 0, XVECLEN (seq, 0) - 1)),\n@@ -249,7 +249,7 @@ stormy16_split_cbranch (mode, label, comparison, dest, carry)\n    INSN is the insn.  */\n \n char *\n-stormy16_output_cbranch_hi (op, label, reversed, insn)\n+xstormy16_output_cbranch_hi (op, label, reversed, insn)\n      rtx op;\n      const char * label;\n      int reversed;\n@@ -326,7 +326,7 @@ stormy16_output_cbranch_hi (op, label, reversed, insn)\n    INSN is the insn.  */\n \n char *\n-stormy16_output_cbranch_si (op, label, reversed, insn)\n+xstormy16_output_cbranch_si (op, label, reversed, insn)\n      rtx op;\n      const char * label;\n      int reversed;\n@@ -444,7 +444,7 @@ stormy16_output_cbranch_si (op, label, reversed, insn)\n    This case often occurs between floating-point and general registers.  */\n \n enum reg_class\n-stormy16_secondary_reload_class (class, mode, x)\n+xstormy16_secondary_reload_class (class, mode, x)\n      enum reg_class class;\n      enum machine_mode mode;\n      rtx x;\n@@ -460,15 +460,15 @@ stormy16_secondary_reload_class (class, mode, x)\n \n   /* When reloading a PLUS, the carry register will be required\n      unless the inc or dec instructions can be used.  */\n-  if (stormy16_carry_plus_operand (x, mode))\n+  if (xstormy16_carry_plus_operand (x, mode))\n     return CARRY_REGS;\n \n   return NO_REGS;\n }\n \n /* Recognise a PLUS that needs the carry register.  */\n int\n-stormy16_carry_plus_operand (x, mode)\n+xstormy16_carry_plus_operand (x, mode)\n      rtx x;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n@@ -479,7 +479,7 @@ stormy16_carry_plus_operand (x, mode)\n \n \n enum reg_class\n-stormy16_preferred_reload_class (x, class)\n+xstormy16_preferred_reload_class (x, class)\n      enum reg_class class;\n      rtx x;\n {\n@@ -501,7 +501,7 @@ stormy16_preferred_reload_class (x, class)\n   && (INTVAL (X) + (OFFSET) < 0x100 || INTVAL (X) + (OFFSET) >= 0x7F00))\n \n int\n-stormy16_legitimate_address_p (mode, x, strict)\n+xstormy16_legitimate_address_p (mode, x, strict)\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n      rtx x;\n      int strict;\n@@ -541,7 +541,7 @@ stormy16_legitimate_address_p (mode, x, strict)\n    address for DImode or DFmode, or if the address is a post-increment\n    or pre-decrement address.  */\n int\n-stormy16_mode_dependent_address_p (x)\n+xstormy16_mode_dependent_address_p (x)\n      rtx x;\n {\n   if (LEGITIMATE_ADDRESS_CONST_INT_P (x, 0)\n@@ -571,7 +571,7 @@ stormy16_mode_dependent_address_p (x)\n    represented by the constraint letter C.  If C is not defined as an extra\n    constraint, the value returned should be 0 regardless of VALUE.  */\n int\n-stormy16_extra_constraint_p (x, c)\n+xstormy16_extra_constraint_p (x, c)\n      rtx x;\n      int c;\n {\n@@ -593,7 +593,7 @@ stormy16_extra_constraint_p (x, c)\n     case 'S':\n       return (GET_CODE (x) == MEM\n \t      && GET_CODE (XEXP (x, 0)) == CONST_INT\n-\t      && stormy16_legitimate_address_p (VOIDmode, XEXP (x, 0), 0));\n+\t      && xstormy16_legitimate_address_p (VOIDmode, XEXP (x, 0), 0));\n \n       /* 'T' is for Rx.  */\n     case 'T':\n@@ -629,7 +629,7 @@ short_memory_operand (x, mode)\n    */\n \n void \n-stormy16_split_move (mode, dest, src)\n+xstormy16_split_move (mode, dest, src)\n      enum machine_mode mode;\n      rtx dest;\n      rtx src;\n@@ -771,7 +771,7 @@ stormy16_split_move (mode, dest, src)\n    mode MODE from SRC to DEST.  */\n \n void \n-stormy16_expand_move (mode, dest, src)\n+xstormy16_expand_move (mode, dest, src)\n      enum machine_mode mode;\n      rtx dest;\n      rtx src;\n@@ -781,7 +781,7 @@ stormy16_expand_move (mode, dest, src)\n       && ! reload_completed\n       && GET_CODE (dest) == MEM\n       && (GET_CODE (XEXP (dest, 0)) != CONST_INT\n-\t  || ! stormy16_legitimate_address_p (mode, XEXP (dest, 0), 0))\n+\t  || ! xstormy16_legitimate_address_p (mode, XEXP (dest, 0), 0))\n       && GET_CODE (src) != REG\n       && GET_CODE (src) != SUBREG)\n     src = copy_to_mode_reg (mode, src);\n@@ -790,7 +790,7 @@ stormy16_expand_move (mode, dest, src)\n   if (reload_completed\n       && mode != HImode && mode != QImode)\n     {\n-      stormy16_split_move (mode, dest, src);\n+      xstormy16_split_move (mode, dest, src);\n       return;\n     }\n   \n@@ -818,7 +818,7 @@ AP->\tReturn address (two words)\n   instruction.  */\n \n /* A structure to describe the layout.  */\n-struct stormy16_stack_layout\n+struct xstormy16_stack_layout\n {\n   /* Size of the topmost three items on the stack.  */\n   int locals_size;\n@@ -839,12 +839,12 @@ struct stormy16_stack_layout\n        && (regs_ever_live[REGNUM] || ! current_function_is_leaf)))\n \n /* Compute the stack layout.  */\n-struct stormy16_stack_layout \n-stormy16_compute_stack_layout ()\n+struct xstormy16_stack_layout \n+xstormy16_compute_stack_layout ()\n {\n-  struct stormy16_stack_layout layout;\n+  struct xstormy16_stack_layout layout;\n   int regno;\n-  const int ifun = stormy16_interrupt_function_p ();\n+  const int ifun = xstormy16_interrupt_function_p ();\n \n   layout.locals_size = get_frame_size ();\n   \n@@ -882,13 +882,13 @@ stormy16_compute_stack_layout ()\n \n /* Determine how all the special registers get eliminated.  */\n int\n-stormy16_initial_elimination_offset (from, to)\n+xstormy16_initial_elimination_offset (from, to)\n      int from, to;\n {\n-  struct stormy16_stack_layout layout;\n+  struct xstormy16_stack_layout layout;\n   int result;\n   \n-  layout = stormy16_compute_stack_layout ();\n+  layout = xstormy16_compute_stack_layout ();\n \n   if (from == FRAME_POINTER_REGNUM && to == HARD_FRAME_POINTER_REGNUM)\n     result = layout.sp_minus_fp - layout.locals_size;\n@@ -929,21 +929,21 @@ emit_addhi3_postreload (dest, src0, src1)\n    Also any insns generated here should have RTX_FRAME_RELATED_P(insn) = 1\n    so that the debug info generation code can handle them properly.  */\n void\n-stormy16_expand_prologue ()\n+xstormy16_expand_prologue ()\n {\n-  struct stormy16_stack_layout layout;\n+  struct xstormy16_stack_layout layout;\n   int regno;\n   rtx insn;\n   rtx mem_push_rtx;\n   rtx mem_fake_push_rtx;\n-  const int ifun = stormy16_interrupt_function_p ();\n+  const int ifun = xstormy16_interrupt_function_p ();\n   \n   mem_push_rtx = gen_rtx_POST_INC (Pmode, stack_pointer_rtx);\n   mem_push_rtx = gen_rtx_MEM (HImode, mem_push_rtx);\n   mem_fake_push_rtx = gen_rtx_PRE_INC (Pmode, stack_pointer_rtx);\n   mem_fake_push_rtx = gen_rtx_MEM (HImode, mem_fake_push_rtx);\n     \n-  layout = stormy16_compute_stack_layout ();\n+  layout = xstormy16_compute_stack_layout ();\n \n   /* Save the argument registers if necessary.  */\n   if (layout.stdarg_save_size)\n@@ -1011,7 +1011,7 @@ int\n direct_return ()\n {\n   return (reload_completed \n-\t  && stormy16_compute_stack_layout ().frame_size == 0);\n+\t  && xstormy16_compute_stack_layout ().frame_size == 0);\n }\n \n /* Called after register allocation to add any instructions needed for\n@@ -1023,17 +1023,17 @@ direct_return ()\n    such scheduling.  */\n \n void\n-stormy16_expand_epilogue ()\n+xstormy16_expand_epilogue ()\n {\n-  struct stormy16_stack_layout layout;\n+  struct xstormy16_stack_layout layout;\n   rtx mem_pop_rtx;\n   int regno;\n-  const int ifun = stormy16_interrupt_function_p ();\n+  const int ifun = xstormy16_interrupt_function_p ();\n   \n   mem_pop_rtx = gen_rtx_PRE_DEC (Pmode, stack_pointer_rtx);\n   mem_pop_rtx = gen_rtx_MEM (HImode, mem_pop_rtx);\n   \n-  layout = stormy16_compute_stack_layout ();\n+  layout = xstormy16_compute_stack_layout ();\n \n   /* Pop the stack for the locals.  */\n   if (layout.locals_size)\n@@ -1063,12 +1063,12 @@ stormy16_expand_epilogue ()\n }\n \n int\n-stormy16_epilogue_uses (regno)\n+xstormy16_epilogue_uses (regno)\n      int regno;\n {\n   if (reload_completed && call_used_regs[regno])\n     {\n-      const int ifun = stormy16_interrupt_function_p ();\n+      const int ifun = xstormy16_interrupt_function_p ();\n       return REG_NEEDS_SAVE (regno, ifun);\n     }\n   return 0;\n@@ -1083,10 +1083,10 @@ stormy16_epilogue_uses (regno)\n    This function need not do anything if the argument in question was\n    passed on the stack.  The compiler knows how to track the amount of\n    stack space used for arguments without any special help.  However,\n-   it makes life easier for stormy16_build_va_list if it does update\n+   it makes life easier for xstormy16_build_va_list if it does update\n    the word count.  */\n CUMULATIVE_ARGS\n-stormy16_function_arg_advance (cum, mode, type, named)\n+xstormy16_function_arg_advance (cum, mode, type, named)\n      CUMULATIVE_ARGS cum;\n      enum machine_mode mode;\n      tree type;\n@@ -1096,18 +1096,18 @@ stormy16_function_arg_advance (cum, mode, type, named)\n      and partially on the stack, the whole of it is passed on the\n      stack.  */\n   if (cum < NUM_ARGUMENT_REGISTERS\n-      && cum + STORMY16_WORD_SIZE (type, mode) > NUM_ARGUMENT_REGISTERS)\n+      && cum + XSTORMY16_WORD_SIZE (type, mode) > NUM_ARGUMENT_REGISTERS)\n     cum = NUM_ARGUMENT_REGISTERS;\n   \n-  cum += STORMY16_WORD_SIZE (type, mode);\n+  cum += XSTORMY16_WORD_SIZE (type, mode);\n   \n   return cum;\n }\n \n /* Do any needed setup for a variadic function.  CUM has not been updated\n    for the last named argument which has type TYPE and mode MODE.  */\n void\n-stormy16_setup_incoming_varargs (cum, int_mode, type, pretend_size)\n+xstormy16_setup_incoming_varargs (cum, int_mode, type, pretend_size)\n      CUMULATIVE_ARGS cum ATTRIBUTE_UNUSED;\n      int             int_mode ATTRIBUTE_UNUSED;\n      tree            type ATTRIBUTE_UNUSED;\n@@ -1124,7 +1124,7 @@ stormy16_setup_incoming_varargs (cum, int_mode, type, pretend_size)\n    To keep the layout nice, the pointer is first in the structure.  */\n \n tree\n-stormy16_build_va_list ()\n+xstormy16_build_va_list ()\n {\n   tree f_1, f_2, record, type_decl;\n \n@@ -1154,7 +1154,7 @@ stormy16_build_va_list ()\n    variable to initialize.  NEXTARG is the machine independent notion of the\n    'next' argument after the variable arguments.  */\n void\n-stormy16_expand_builtin_va_start (stdarg_p, valist, nextarg)\n+xstormy16_expand_builtin_va_start (stdarg_p, valist, nextarg)\n      int stdarg_p ATTRIBUTE_UNUSED;\n      tree valist;\n      rtx nextarg ATTRIBUTE_UNUSED;\n@@ -1163,7 +1163,7 @@ stormy16_expand_builtin_va_start (stdarg_p, valist, nextarg)\n   tree base, count;\n   tree t;\n \n-  if (stormy16_interrupt_function_p ())\n+  if (xstormy16_interrupt_function_p ())\n     error (\"cannot use va_start in interrupt function\");\n   \n   f_base = TYPE_FIELDS (va_list_type_node);\n@@ -1190,7 +1190,7 @@ stormy16_expand_builtin_va_start (stdarg_p, valist, nextarg)\n    Note:  This algorithm is documented in stormy-abi.  */\n    \n rtx\n-stormy16_expand_builtin_va_arg (valist, type)\n+xstormy16_expand_builtin_va_arg (valist, type)\n      tree valist;\n      tree type;\n {\n@@ -1277,7 +1277,7 @@ stormy16_expand_builtin_va_arg (valist, type)\n    the nested function; STATIC_CHAIN is an RTX for the static chain\n    value that should be passed to the function when it is called.  */\n void\n-stormy16_initialize_trampoline (addr, fnaddr, static_chain)\n+xstormy16_initialize_trampoline (addr, fnaddr, static_chain)\n      rtx addr;\n      rtx fnaddr;\n      rtx static_chain;\n@@ -1325,7 +1325,7 @@ stormy16_initialize_trampoline (addr, fnaddr, static_chain)\n    because these are returned in another way.  See `STRUCT_VALUE_REGNUM' and\n    related macros.  */\n rtx\n-stormy16_function_value (valtype, func)\n+xstormy16_function_value (valtype, func)\n      tree valtype;\n      tree func ATTRIBUTE_UNUSED;\n {\n@@ -1362,7 +1362,7 @@ stormy16_function_value (valtype, func)\n    probably not.  */\n \n void\n-stormy16_asm_output_mi_thunk (file, thunk_fndecl, delta, function)\n+xstormy16_asm_output_mi_thunk (file, thunk_fndecl, delta, function)\n      FILE *file;\n      tree thunk_fndecl ATTRIBUTE_UNUSED;\n      int delta;\n@@ -1383,7 +1383,7 @@ stormy16_asm_output_mi_thunk (file, thunk_fndecl, delta, function)\n /* Mark functions with SYMBOL_REF_FLAG.  */\n \n void\n-stormy16_encode_section_info (decl)\n+xstormy16_encode_section_info (decl)\n      tree decl;\n {\n   if (TREE_CODE (decl) == FUNCTION_DECL)\n@@ -1393,12 +1393,12 @@ stormy16_encode_section_info (decl)\n /* Output constructors and destructors.  Just like \n    default_named_section_asm_out_* but don't set the sections writable.  */\n #undef TARGET_ASM_CONSTRUCTOR\n-#define TARGET_ASM_CONSTRUCTOR stormy16_asm_out_constructor\n+#define TARGET_ASM_CONSTRUCTOR xstormy16_asm_out_constructor\n #undef TARGET_ASM_DESTRUCTOR\n-#define TARGET_ASM_DESTRUCTOR stormy16_asm_out_destructor\n+#define TARGET_ASM_DESTRUCTOR xstormy16_asm_out_destructor\n \n static void\n-stormy16_asm_out_destructor (symbol, priority)\n+xstormy16_asm_out_destructor (symbol, priority)\n      rtx symbol;\n      int priority;\n {\n@@ -1422,7 +1422,7 @@ stormy16_asm_out_destructor (symbol, priority)\n }\n \n static void\n-stormy16_asm_out_constructor (symbol, priority)\n+xstormy16_asm_out_constructor (symbol, priority)\n      rtx symbol;\n      int priority;\n {\n@@ -1447,7 +1447,7 @@ stormy16_asm_out_constructor (symbol, priority)\n \f\n /* Print a memory address as an operand to reference that memory location.  */\n void\n-stormy16_print_operand_address (file, address)\n+xstormy16_print_operand_address (file, address)\n      FILE * file;\n      rtx    address;\n {\n@@ -1505,7 +1505,7 @@ stormy16_print_operand_address (file, address)\n \n /* Print an operand to a assembler instruction.  */\n void\n-stormy16_print_operand (file, x, code)\n+xstormy16_print_operand (file, x, code)\n      FILE * file;\n      rtx    x;\n      int    code;\n@@ -1540,7 +1540,7 @@ stormy16_print_operand (file, x, code)\n       if (GET_CODE (x) == SYMBOL_REF)\n \tassemble_name (file, XSTR (x, 0));\n       else\n-\tstormy16_print_operand_address (file, x);\n+\txstormy16_print_operand_address (file, x);\n       return;\n \n     case 'o':\n@@ -1568,7 +1568,7 @@ stormy16_print_operand (file, x, code)\n       break;\n       \n     default:\n-      output_operand_lossage (\"stormy16_print_operand: unknown code\");\n+      output_operand_lossage (\"xstormy16_print_operand: unknown code\");\n       return;\n     }\n \n@@ -1579,7 +1579,7 @@ stormy16_print_operand (file, x, code)\n       break;\n \n     case MEM:\n-      stormy16_print_operand_address (file, XEXP (x, 0));\n+      xstormy16_print_operand_address (file, XEXP (x, 0));\n       break;\n \n     default:\n@@ -1605,7 +1605,7 @@ stormy16_print_operand (file, x, code)\n */\n \n void \n-stormy16_expand_casesi (index, lower_bound, range, table, default_label)\n+xstormy16_expand_casesi (index, lower_bound, range, table, default_label)\n      rtx index;\n      rtx lower_bound;\n      rtx range;\n@@ -1639,7 +1639,7 @@ stormy16_expand_casesi (index, lower_bound, range, table, default_label)\n    all reach.  */\n \n void\n-stormy16_output_addr_vec (file, label, table)\n+xstormy16_output_addr_vec (file, label, table)\n      FILE *file;\n      rtx label ATTRIBUTE_UNUSED;\n      rtx table;\n@@ -1652,7 +1652,7 @@ stormy16_output_addr_vec (file, label, table)\n   for (idx = 0; idx < vlen; idx++)\n     {\n       fputs (\"\\tjmpf \", file);\n-      stormy16_print_operand_address (file, \n+      xstormy16_print_operand_address (file, \n \t\t\t\t      XEXP (XVECEXP (table, 0, idx), 0));\n       fputc ('\\n', file);\n     }\n@@ -1670,7 +1670,7 @@ stormy16_output_addr_vec (file, label, table)\n */\n \n void \n-stormy16_expand_call (retval, dest, counter)\n+xstormy16_expand_call (retval, dest, counter)\n      rtx retval;\n      rtx dest;\n      rtx counter;\n@@ -1717,10 +1717,10 @@ stormy16_expand_call (retval, dest, counter)\n    \n    using CARRY as a temporary.  When CODE is COMPARE, a branch\n    template is generated (this saves duplicating code in\n-   stormy16_split_cbranch).  */\n+   xstormy16_split_cbranch).  */\n \n void \n-stormy16_expand_arith (mode, code, dest, src0, src1, carry)\n+xstormy16_expand_arith (mode, code, dest, src0, src1, carry)\n      enum machine_mode mode;\n      enum rtx_code code;\n      rtx dest;\n@@ -1842,7 +1842,7 @@ shift_operator (op, mode)\n    SIZE_R will be a CONST_INT, X will be a hard register.  */\n \n const char * \n-stormy16_output_shift (mode, code, x, size_r, temp)\n+xstormy16_output_shift (mode, code, x, size_r, temp)\n      enum machine_mode mode;\n      enum rtx_code code;\n      rtx x;\n@@ -1959,7 +1959,7 @@ stormy16_output_shift (mode, code, x, size_r, temp)\n \n /* Return nonzero if the function is an interrupt function.  */\n int\n-stormy16_interrupt_function_p ()\n+xstormy16_interrupt_function_p ()\n {\n   tree attributes;\n   \n@@ -1974,19 +1974,19 @@ stormy16_interrupt_function_p ()\n }\n \n #undef TARGET_ATTRIBUTE_TABLE\n-#define TARGET_ATTRIBUTE_TABLE stormy16_attribute_table\n-static tree stormy16_handle_interrupt_attribute PARAMS ((tree *, tree, tree, int, bool *));\n-static const struct attribute_spec stormy16_attribute_table[] =\n+#define TARGET_ATTRIBUTE_TABLE xstormy16_attribute_table\n+static tree xstormy16_handle_interrupt_attribute PARAMS ((tree *, tree, tree, int, bool *));\n+static const struct attribute_spec xstormy16_attribute_table[] =\n {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n-  { \"interrupt\", 0, 0, false, true,  true,  stormy16_handle_interrupt_attribute },\n+  { \"interrupt\", 0, 0, false, true,  true,  xstormy16_handle_interrupt_attribute },\n   { NULL,        0, 0, false, false, false, NULL }\n };\n \n /* Handle an \"interrupt\" attribute;\n    arguments as in struct attribute_spec.handler.  */\n static tree\n-stormy16_handle_interrupt_attribute (node, name, args, flags, no_add_attrs)\n+xstormy16_handle_interrupt_attribute (node, name, args, flags, no_add_attrs)\n      tree *node;\n      tree name;\n      tree args ATTRIBUTE_UNUSED;"}, {"sha": "3a8b2ac13c9d9d955dfb58674a609a5fe90f7f02", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=c6243b4cbd50ca549ca062d73e2e694449362371", "patch": "@@ -1,4 +1,4 @@\n-/* Stormy16 cpu description.\n+/* Xstormy16 cpu description.\n    Copyright (C) 1997, 1998, 1999, 2000, 2001\n    Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc.\n@@ -138,7 +138,7 @@ Boston, MA 02111-1307, USA.  */\n    between the two is that `LIB_SPEC' is used at the end of the command given\n    to the linker.\n \n-   For stormy16:\n+   For xstormy16:\n    - If -msim is specified, everything is built and linked as for the sim.\n    - If -T is specified, that linker script is used, and it should provide\n      appropriate libraries.\n@@ -355,7 +355,7 @@ Boston, MA 02111-1307, USA.  */\n    The result is to define the macros `__mc68000__', `__sun__' and `__unix__'\n    unconditionally, and the macros `mc68000', `sun' and `unix' provided `-ansi'\n    is not specified.  */\n-#define CPP_PREDEFINES \"-Dstormy16 -Amachine=stormy16 -D__INT_MAX__=32767\"\n+#define CPP_PREDEFINES \"-Dxstormy16 -Amachine=xstormy16 -D__INT_MAX__=32767\"\n \n /* This declaration should be present.  */\n extern int target_flags;\n@@ -444,7 +444,7 @@ extern int target_flags;\n         #define TARGET_VERSION \\\n           fprintf (stderr, \" (68k, MIT syntax)\");\n         #endif  */\n-#define TARGET_VERSION fprintf (stderr, \" (stormy16 cpu core)\");\n+#define TARGET_VERSION fprintf (stderr, \" (xstormy16 cpu core)\");\n \n /* Sometimes certain combinations of command options do not make sense on a\n    particular target machine.  You can define a macro `OVERRIDE_OPTIONS' to\n@@ -1347,13 +1347,13 @@ enum reg_class\n \n    This declaration must be present.  */\n #define PREFERRED_RELOAD_CLASS(X, CLASS) \\\n-  stormy16_preferred_reload_class (X, CLASS)\n+  xstormy16_preferred_reload_class (X, CLASS)\n \n /* Like `PREFERRED_RELOAD_CLASS', but for output reloads instead of input\n    reloads.  If you don't define this macro, the default is to use CLASS,\n    unchanged.  */\n #define PREFERRED_OUTPUT_RELOAD_CLASS(X, CLASS) \\\n-  stormy16_preferred_reload_class (X, CLASS)\n+  xstormy16_preferred_reload_class (X, CLASS)\n \n /* A C expression that places additional restrictions on the register class to\n    use when it is necessary to be able to hold a value of mode MODE in a reload\n@@ -1424,7 +1424,7 @@ enum reg_class\n /* This chip has the interesting property that only the first eight\n    registers can be moved to/from memory.  */\n #define SECONDARY_RELOAD_CLASS(CLASS, MODE, X)\t\t\t\\\n-  stormy16_secondary_reload_class (CLASS, MODE, X)\n+  xstormy16_secondary_reload_class (CLASS, MODE, X)\n \n /* #define SECONDARY_INPUT_RELOAD_CLASS(CLASS, MODE, X) */\n /* #define SECONDARY_OUTPUT_RELOAD_CLASS(CLASS, MODE, X) */\n@@ -1572,7 +1572,7 @@ enum reg_class\n    input and `r' on the output.  The next alternative specifies `m' on the\n    input and a register class that does not include r0 on the output.  */\n #define EXTRA_CONSTRAINT(VALUE, C) \\\n-  stormy16_extra_constraint_p (VALUE, C)\n+  xstormy16_extra_constraint_p (VALUE, C)\n \n \f\n /* Basic Stack Layout */\n@@ -1680,7 +1680,7 @@ enum reg_class\n \n    You only need to define this macro if you want to support call frame\n    debugging information like that provided by DWARF 2.  */\n-#define INCOMING_FRAME_SP_OFFSET (stormy16_interrupt_function_p () ? 6 : 4)\n+#define INCOMING_FRAME_SP_OFFSET (xstormy16_interrupt_function_p () ? 6 : 4)\n \n \f\n /* Stack Checking.  */\n@@ -1876,7 +1876,7 @@ enum reg_class\n    initial difference between the specified pair of registers.  This macro must\n    be defined if `ELIMINABLE_REGS' is defined.  */\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) \\\n-  (OFFSET) = stormy16_initial_elimination_offset (FROM, TO)\n+  (OFFSET) = xstormy16_initial_elimination_offset (FROM, TO)\n \n /* Define this macro if the `longjmp' function restores registers from the\n    stack frames, rather than from those saved specifically by `setjmp'.\n@@ -2015,7 +2015,7 @@ enum reg_class\n #define NUM_ARGUMENT_REGISTERS 6\n #define FIRST_ARGUMENT_REGISTER 2\n \n-#define STORMY16_WORD_SIZE(TYPE, MODE)\t\t\t\t\\\n+#define XSTORMY16_WORD_SIZE(TYPE, MODE)\t\t\t\t\\\n   ((((TYPE) ? int_size_in_bytes (TYPE) : GET_MODE_SIZE (MODE))\t\\\n     + 1) \t\t\t\t\t\t\t\\\n    / 2)\n@@ -2052,7 +2052,7 @@ enum reg_class\n    stack and then loaded into a register.  */\n #define FUNCTION_ARG(CUM, MODE, TYPE, NAMED)\t\t\t\t  \\\n   ((MODE) == VOIDmode ? const0_rtx\t\t\t\t\t  \\\n-   : (CUM) + STORMY16_WORD_SIZE (TYPE, MODE) > NUM_ARGUMENT_REGISTERS ? 0 \\\n+   : (CUM) + XSTORMY16_WORD_SIZE (TYPE, MODE) > NUM_ARGUMENT_REGISTERS ? 0 \\\n    : gen_rtx_REG (MODE, (CUM) + 2))\n \n /* Define this macro if the target machine has \"register windows\", so that the\n@@ -2161,7 +2161,7 @@ typedef int CUMULATIVE_ARGS;\n    the stack.  The compiler knows how to track the amount of stack space used\n    for arguments without any special help.  */\n #define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\t\t\\\n-  ((CUM) = stormy16_function_arg_advance (CUM, MODE, TYPE, NAMED))\n+  ((CUM) = xstormy16_function_arg_advance (CUM, MODE, TYPE, NAMED))\n \n /* If defined, a C expression which determines whether, and in which direction,\n    to pad out an argument with extra space.  The value should be of type `enum\n@@ -2221,7 +2221,7 @@ typedef int CUMULATIVE_ARGS;\n    because these are returned in another way.  See `STRUCT_VALUE_REGNUM' and\n    related macros, below.  */\n #define FUNCTION_VALUE(VALTYPE, FUNC) \\\n-  stormy16_function_value (VALTYPE, FUNC)\n+  xstormy16_function_value (VALTYPE, FUNC)\n \n \n /* Define this macro if the target machine has \"register windows\" so that the\n@@ -2376,7 +2376,7 @@ typedef int CUMULATIVE_ARGS;\n    frame pointer registers are already be assumed to be used as\n    needed.  */\n #define EPILOGUE_USES(REGNO) \\\n-  stormy16_epilogue_uses (REGNO)\n+  xstormy16_epilogue_uses (REGNO)\n \n /* Define this macro if the function epilogue contains delay slots to which\n    instructions from the rest of the function can be \"moved\".  The definition\n@@ -2437,7 +2437,7 @@ typedef int CUMULATIVE_ARGS;\n    FUNCTION instead of jumping to it.  The generic approach does not support\n    varargs.  */\n #define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)\t\\\n-  stormy16_asm_output_mi_thunk (FILE, THUNK_FNDECL, DELTA, FUNCTION)\n+  xstormy16_asm_output_mi_thunk (FILE, THUNK_FNDECL, DELTA, FUNCTION)\n \n \f\n /* Generating Code for Profiling.  */\n@@ -2604,7 +2604,7 @@ typedef int CUMULATIVE_ARGS;\n    a message describing why the function could not be inlined.  The message will\n    displayed if the '-Winline' command line switch has been given.  If the message\n    contains a '%s' sequence, this will be replaced by the name of the function.  */\n-/* #define TARGET_CANNOT_INLINE_P(FN_DECL) stormy16_cannot_inline_p (FN_DECL) */\n+/* #define TARGET_CANNOT_INLINE_P(FN_DECL) xstormy16_cannot_inline_p (FN_DECL) */\n \f\n /* Implementing the Varargs Macros.  */\n \n@@ -2648,7 +2648,7 @@ typedef int CUMULATIVE_ARGS;\n    this case.  */\n #define SETUP_INCOMING_VARARGS(ARGS_SO_FAR, MODE, TYPE, PRETEND_ARGS_SIZE, SECOND_TIME) \\\n   if (! SECOND_TIME) \\\n-    stormy16_setup_incoming_varargs (ARGS_SO_FAR, MODE, TYPE, & PRETEND_ARGS_SIZE)\n+    xstormy16_setup_incoming_varargs (ARGS_SO_FAR, MODE, TYPE, & PRETEND_ARGS_SIZE)\n \n /* Define this macro if the location where a function argument is passed\n    depends on whether or not it is a named argument.\n@@ -2664,20 +2664,20 @@ typedef int CUMULATIVE_ARGS;\n /* Build up the stdarg/varargs va_list type tree, assinging it to NODE.  If not\n    defined, it is assumed that va_list is a void * pointer.  */\n #define BUILD_VA_LIST_TYPE(NODE) \\\n-  ((NODE) = stormy16_build_va_list ())\n+  ((NODE) = xstormy16_build_va_list ())\n \n /* Implement the stdarg/varargs va_start macro.  STDARG_P is non-zero if this\n    is stdarg.h instead of varargs.h.  VALIST is the tree of the va_list\n    variable to initialize.  NEXTARG is the machine independent notion of the\n    'next' argument after the variable arguments.  If not defined, a standard\n    implementation will be defined that works for arguments passed on the stack.  */\n #define EXPAND_BUILTIN_VA_START(STDARG_P, VALIST, NEXTARG) \\\n-  stormy16_expand_builtin_va_start (STDARG_P, VALIST, NEXTARG)\n+  xstormy16_expand_builtin_va_start (STDARG_P, VALIST, NEXTARG)\n \n /* Implement the stdarg/varargs va_arg macro.  VALIST is the variable of type\n    va_list as a tree, TYPE is the type passed to va_arg.  */\n #define EXPAND_BUILTIN_VA_ARG(VALIST, TYPE) \\\n-  stormy16_expand_builtin_va_arg (VALIST, TYPE)\n+  xstormy16_expand_builtin_va_arg (VALIST, TYPE)\n \n /* Implement the stdarg/varargs va_end macro.  VALIST is the variable of type\n    va_list as a tree.  */\n@@ -2710,7 +2710,7 @@ typedef int CUMULATIVE_ARGS;\n    the nested function; STATIC_CHAIN is an RTX for the static chain value that\n    should be passed to the function when it is called.  */\n #define INITIALIZE_TRAMPOLINE(ADDR, FNADDR, STATIC_CHAIN) \\\n-  stormy16_initialize_trampoline (ADDR, FNADDR, STATIC_CHAIN)\n+  xstormy16_initialize_trampoline (ADDR, FNADDR, STATIC_CHAIN)\n \n /* A C expression to allocate run-time space for a trampoline.  The expression\n    value should be an RTX representing a memory reference to the space for the\n@@ -3042,13 +3042,13 @@ typedef int CUMULATIVE_ARGS;\n #ifdef REG_OK_STRICT\n #define GO_IF_LEGITIMATE_ADDRESS(MODE, X, LABEL)\t\\\n do {\t\t\t\t\t\t\t\\\n-  if (stormy16_legitimate_address_p (MODE, X, 1))\t\\\n+  if (xstormy16_legitimate_address_p (MODE, X, 1))\t\\\n     goto LABEL;\t\t\t\t\t\t\\\n } while (0)\n #else\n #define GO_IF_LEGITIMATE_ADDRESS(MODE, X, LABEL)\t\\\n do {\t\t\t\t\t\t\t\\\n-  if (stormy16_legitimate_address_p (MODE, X, 0))\t\\\n+  if (xstormy16_legitimate_address_p (MODE, X, 0))\t\\\n     goto LABEL;\t\t\t\t\t\t\\\n } while (0)\n #endif\n@@ -3116,7 +3116,7 @@ do {\t\t\t\t\t\t\t\\\n    or pre-decrement address.\n */\n #define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\t\t\t\\\n-  if (stormy16_mode_dependent_address_p (ADDR))\t\t\t\t\\\n+  if (xstormy16_mode_dependent_address_p (ADDR))\t\t\t\t\\\n     goto LABEL\n \n /* A C expression that is nonzero if X is a legitimate constant for an\n@@ -3526,7 +3526,7 @@ do {\t\t\t\t\t\t\t\\\n    The usual thing for this macro to do is to record a flag in the `symbol_ref'\n    (such as `SYMBOL_REF_FLAG') or to store a modified name string in the\n    `symbol_ref' (if one bit is not enough information).  */\n-#define ENCODE_SECTION_INFO(DECL)  stormy16_encode_section_info(DECL)\n+#define ENCODE_SECTION_INFO(DECL)  xstormy16_encode_section_info(DECL)\n \n /* Decode SYM_NAME and store the real name part in VAR, sans the characters\n    that encode section info.  Define this macro if `ENCODE_SECTION_INFO' alters\n@@ -4402,7 +4402,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    When the machine description has a specification `%PUNCT' (a `%' followed by\n    a punctuation character), this macro is called with a null pointer for X and\n    the punctuation character for CODE.  */\n-#define PRINT_OPERAND(STREAM, X, CODE) stormy16_print_operand (STREAM, X, CODE)\n+#define PRINT_OPERAND(STREAM, X, CODE) xstormy16_print_operand (STREAM, X, CODE)\n \n /* A C expression which evaluates to true if CODE is a valid punctuation\n    character for use in the `PRINT_OPERAND' macro.  If\n@@ -4420,7 +4420,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    then check for it here.\n \n    This declaration must be present.  */\n-#define PRINT_OPERAND_ADDRESS(STREAM, X) stormy16_print_operand_address (STREAM, X)\n+#define PRINT_OPERAND_ADDRESS(STREAM, X) xstormy16_print_operand_address (STREAM, X)\n \n /* A C statement, to be executed after all slot-filler instructions have been\n    output.  If necessary, call `dbr_sequence_length' to determine the number of\n@@ -4490,7 +4490,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    which would be bad.  Instead, it controls the output of the table\n    itself.  */\n #define ASM_OUTPUT_ADDR_VEC(LABEL, BODY) \\\n-  stormy16_output_addr_vec (file, LABEL, BODY)\n+  xstormy16_output_addr_vec (file, LABEL, BODY)\n \n /* Alignment for ADDR_VECs is the same as for code.  */\n #define ADDR_VEC_ALIGN(ADDR_VEC) 1\n@@ -4956,7 +4956,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   {\"shift_operator\", {ASHIFT, ASHIFTRT, LSHIFTRT }},\t\\\n   {\"equality_operator\", {EQ, NE }},\t\t\t\\\n   {\"inequality_operator\", {GE, GT, LE, LT, GEU, GTU, LEU, LTU }}, \\\n-  {\"stormy16_ineqsi_operator\", {LT, GE, LTU, GEU }},\n+  {\"xstormy16_ineqsi_operator\", {LT, GE, LTU, GEU }},\n \n /* An alias for a machine mode name.  This is the machine mode that elements of\n    a jump-table should have.  */\n@@ -5342,6 +5342,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    stored from the compare operation.  Note that we can't use \"rtx\" here\n    since it hasn't been defined!  */\n \n-extern struct rtx_def *stormy16_compare_op0, *stormy16_compare_op1;\n+extern struct rtx_def *xstormy16_compare_op0, *xstormy16_compare_op1;\n \n-/* End of stormy16.h */\n+/* End of xstormy16.h */"}, {"sha": "d19a3cf2bb1007ee0fc140074a5270ccf3faa93c", "filename": "gcc/config/stormy16/stormy16.md", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2Fconfig%2Fstormy16%2Fstormy16.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2Fconfig%2Fstormy16%2Fstormy16.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.md?ref=c6243b4cbd50ca549ca062d73e2e694449362371", "patch": "@@ -1,4 +1,4 @@\n-;; STORMY16 Machine description template\n+;; XSTORMY16 Machine description template\n ;; Copyright (C) 1997, 1998, 1999, 2001 Free Software Foundation, Inc.\n ;; Contributed by Red Hat, Inc.\n \n@@ -77,7 +77,7 @@\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n \t(match_operand:QI 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"{ stormy16_expand_move (QImode, operands[0], operands[1]); DONE; }\")\n+  \"{ xstormy16_expand_move (QImode, operands[0], operands[1]); DONE; }\")\n \n (define_insn \"*movqi_internal\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,Q,r,m,e,e,T,r,S\")\n@@ -113,7 +113,7 @@\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n \t(match_operand:HI 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"{ stormy16_expand_move (HImode, operands[0], operands[1]); DONE; }\")\n+  \"{ xstormy16_expand_move (HImode, operands[0], operands[1]); DONE; }\")\n \n (define_insn \"*movhi_internal\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,Q,r,m,e,e,T,r,S\")\n@@ -149,7 +149,7 @@\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t(match_operand:SI 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"{ stormy16_expand_move (SImode, operands[0], operands[1]); DONE; }\")\n+  \"{ xstormy16_expand_move (SImode, operands[0], operands[1]); DONE; }\")\n \n (define_insn_and_split \"*movsi_internal\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,Q,r,m,e,&e,e,r,S\")\n@@ -158,7 +158,7 @@\n   \"#\"\n   \"reload_completed\"\n   [(pc)]\n-  \"{ stormy16_split_move (SImode, operands[0], operands[1]); DONE; }\"\n+  \"{ xstormy16_split_move (SImode, operands[0], operands[1]); DONE; }\"\n   [(set_attr_alternative \"length\" \n \t     [(const_int 4)\n \t      (const_int 4)\n@@ -250,7 +250,7 @@\n ; shows it how to place the register in RTL to make the addition work.\n (define_expand \"reload_inhi\"\n   [(parallel [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t\t   (match_operand:HI 1 \"stormy16_carry_plus_operand\" \"\"))\n+\t\t   (match_operand:HI 1 \"xstormy16_carry_plus_operand\" \"\"))\n \t      (clobber (match_operand:BI 2 \"\" \"=&y\"))])]\n   \"\"\n   \"if (! rtx_equal_p (operands[0], XEXP (operands[1], 0)))\n@@ -501,7 +501,7 @@\n   \"#\"\n   \"reload_completed\"\n   [(pc)]\n-  \"{ stormy16_expand_arith (SImode, PLUS, operands[0], operands[1],\n+  \"{ xstormy16_expand_arith (SImode, PLUS, operands[0], operands[1],\n \t\t\t    operands[2], operands[3]); DONE; } \"\n   [(set_attr \"length\" \"4\")])\n \n@@ -515,15 +515,15 @@\n   \"#\"\n   \"reload_completed\"\n   [(pc)]\n-  \"{ stormy16_expand_arith (SImode, MINUS, operands[0], operands[1],\n+  \"{ xstormy16_expand_arith (SImode, MINUS, operands[0], operands[1],\n \t\t\t    operands[2], operands[3]); DONE; } \"\n   [(set_attr \"length\" \"4\")])\n \n (define_expand \"negsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(neg:SI (match_operand:SI 1 \"register_operand\" \"\")))]\n   \"\"\n-  \"{ stormy16_expand_arith (SImode, NEG, operands[0], const0_rtx,\n+  \"{ xstormy16_expand_arith (SImode, NEG, operands[0], const0_rtx,\n \t\t\t    operands[1], gen_reg_rtx (BImode)); DONE; }\")\n \n ;; ::::::::::::::::::::\n@@ -573,7 +573,7 @@\n    (clobber (match_operand:BI 3 \"register_operand\" \"=y,y\"))\n    (clobber (match_operand:HI 4 \"\" \"=X,r\"))]\n   \"\"\n-  \"* return stormy16_output_shift (SImode, GET_CODE (operands[5]), \n+  \"* return xstormy16_output_shift (SImode, GET_CODE (operands[5]), \n \t\t\t\t   operands[0], operands[2], operands[4]);\"\n   [(set_attr \"length\" \"6,10\")\n    (set_attr \"psw_operand\" \"clobber,clobber\")])\n@@ -596,8 +596,8 @@\n   \"\"\n   \"\n {\n-  stormy16_compare_op0 = operands[0];\n-  stormy16_compare_op1 = operands[1];\n+  xstormy16_compare_op0 = operands[0];\n+  xstormy16_compare_op1 = operands[1];\n   DONE;\n }\")\n \n@@ -610,8 +610,8 @@\n   \"\"\n   \"\n {\n-  stormy16_compare_op0 = operands[0];\n-  stormy16_compare_op1 = operands[1];\n+  xstormy16_compare_op0 = operands[0];\n+  xstormy16_compare_op1 = operands[1];\n   DONE;\n }\")\n \n@@ -625,52 +625,52 @@\n (define_expand \"beq\"\n   [(use (match_operand 0 \"\" \"\"))]\n   \"\"\n-  \"{ stormy16_emit_cbranch (EQ, operands[0]); DONE; }\")\n+  \"{ xstormy16_emit_cbranch (EQ, operands[0]); DONE; }\")\n \n (define_expand \"bne\"\n   [(use (match_operand 0 \"\" \"\"))]\n   \"\"\n-  \"{ stormy16_emit_cbranch (NE, operands[0]); DONE; }\")\n+  \"{ xstormy16_emit_cbranch (NE, operands[0]); DONE; }\")\n \n (define_expand \"bge\"\n   [(use (match_operand 0 \"\" \"\"))]\n   \"\"\n-  \"{ stormy16_emit_cbranch (GE, operands[0]); DONE; }\")\n+  \"{ xstormy16_emit_cbranch (GE, operands[0]); DONE; }\")\n \n (define_expand \"bgt\"\n   [(use (match_operand 0 \"\" \"\"))]\n   \"\"\n-  \"{ stormy16_emit_cbranch (GT, operands[0]); DONE; }\")\n+  \"{ xstormy16_emit_cbranch (GT, operands[0]); DONE; }\")\n \n (define_expand \"ble\"\n   [(use (match_operand 0 \"\" \"\"))]\n   \"\"\n-  \"{ stormy16_emit_cbranch (LE, operands[0]); DONE; }\")\n+  \"{ xstormy16_emit_cbranch (LE, operands[0]); DONE; }\")\n \n (define_expand \"blt\"\n   [(use (match_operand 0 \"\" \"\"))]\n   \"\"\n-  \"{ stormy16_emit_cbranch (LT, operands[0]); DONE; }\")\n+  \"{ xstormy16_emit_cbranch (LT, operands[0]); DONE; }\")\n \n (define_expand \"bgeu\"\n   [(use (match_operand 0 \"\" \"\"))]\n   \"\"\n-  \"{ stormy16_emit_cbranch (GEU, operands[0]); DONE; }\")\n+  \"{ xstormy16_emit_cbranch (GEU, operands[0]); DONE; }\")\n \n (define_expand \"bgtu\"\n   [(use (match_operand 0 \"\" \"\"))]\n   \"\"\n-  \"{ stormy16_emit_cbranch (GTU, operands[0]); DONE; }\")\n+  \"{ xstormy16_emit_cbranch (GTU, operands[0]); DONE; }\")\n \n (define_expand \"bleu\"\n   [(use (match_operand 0 \"\" \"\"))]\n   \"\"\n-  \"{ stormy16_emit_cbranch (LEU, operands[0]); DONE; }\")\n+  \"{ xstormy16_emit_cbranch (LEU, operands[0]); DONE; }\")\n \n (define_expand \"bltu\"\n   [(use (match_operand 0 \"\" \"\"))]\n   \"\"\n-  \"{ stormy16_emit_cbranch (LTU, operands[0]); DONE; }\")\n+  \"{ xstormy16_emit_cbranch (LTU, operands[0]); DONE; }\")\n \n \n (define_insn \"*cbranchhi\"\n@@ -686,7 +686,7 @@\n   \"\"\n   \"*\n {\n-  return stormy16_output_cbranch_hi (operands[1], \\\"%l0\\\", 0, insn);\n+  return xstormy16_output_cbranch_hi (operands[1], \\\"%l0\\\", 0, insn);\n }\"\n   [(set_attr \"branch_class\" \"bcc12\")\n    (set_attr \"psw_operand\" \"0,0,1\")])\n@@ -704,7 +704,7 @@\n   \"\"\n   \"*\n {\n-  return stormy16_output_cbranch_hi (operands[1], \\\"%l0\\\", 1, insn);\n+  return xstormy16_output_cbranch_hi (operands[1], \\\"%l0\\\", 1, insn);\n }\"\n   [(set_attr \"branch_class\" \"bcc12\")\n    (set_attr \"psw_operand\" \"0,0,1\")])\n@@ -725,14 +725,14 @@\n   \"\"\n   \"*\n {\n-  return stormy16_output_cbranch_si (operands[1], \\\"%l0\\\", 0, insn);\n+  return xstormy16_output_cbranch_si (operands[1], \\\"%l0\\\", 0, insn);\n }\"\n   [(set_attr \"branch_class\" \"bcc8p2\")\n    (set_attr \"psw_operand\" \"clobber\")])\n \n (define_insn_and_split \"*ineqbranchsi\"\n   [(set (pc)\n-\t(if_then_else (match_operator:SI 1 \"stormy16_ineqsi_operator\"\n+\t(if_then_else (match_operator:SI 1 \"xstormy16_ineqsi_operator\"\n \t\t\t\t      [(match_operand:SI 2 \"register_operand\" \n \t\t\t\t\t\t\t \"+r\")\n \t\t\t\t       (match_operand:SI 3 \"nonmemory_operand\" \n@@ -753,13 +753,13 @@\n   \"#\"\n   \"reload_completed\"\n   [(pc)]\n-  \"{ stormy16_split_cbranch (SImode, operands[0], operands[1], operands[2],\n+  \"{ xstormy16_split_cbranch (SImode, operands[0], operands[1], operands[2],\n \t\t\t     operands[4]); DONE; }\"\n   [(set_attr \"length\" \"8\")])\n \n (define_insn \"*ineqbranch_1\"\n   [(set (pc)\n-\t(if_then_else (match_operator:HI 5 \"stormy16_ineqsi_operator\"\n+\t(if_then_else (match_operator:HI 5 \"xstormy16_ineqsi_operator\"\n \t\t       [(minus:HI (match_operand:HI 1 \"register_operand\" \n \t\t\t\t\t\t    \"T,r,r\")\n \t\t\t   (zero_extend:HI (match_operand:BI 4\n@@ -775,7 +775,7 @@\n   \"\"\n   \"*\n {\n-  return stormy16_output_cbranch_si (operands[5], \\\"%l0\\\", 0, insn);\n+  return xstormy16_output_cbranch_si (operands[5], \\\"%l0\\\", 0, insn);\n }\"\n   [(set_attr \"branch_class\" \"bcc8p2,bcc8p2,bcc8p4\")\n    (set_attr \"psw_operand\" \"2,2,2\")])\n@@ -802,7 +802,7 @@\n \t (match_operand 1 \"\" \"\"))\n    (use (match_operand 2 \"immediate_operand\" \"\"))]\n   \"\"\n-  \"stormy16_expand_call (NULL_RTX, operands[0], operands[1]); DONE;\")\n+  \"xstormy16_expand_call (NULL_RTX, operands[0], operands[1]); DONE;\")\n \n ;; Subroutine call instruction returning a value.  Operand 0 is the hard\n ;; register in which the value is returned.  There are three more operands, the\n@@ -817,7 +817,7 @@\n \t      (match_operand:SI 2 \"\" \"\")))\n \t(use (match_operand 3 \"immediate_operand\" \"\"))]\n   \"\"\n-  \"stormy16_expand_call (operands[0], operands[1], operands[2]); DONE;\")\n+  \"xstormy16_expand_call (operands[0], operands[1], operands[2]); DONE;\")\n \n (define_insn \"*call_internal\"\n   [(call (mem:HI (match_operand:HI 0 \"nonmemory_operand\" \"i,r\"))\n@@ -867,7 +867,7 @@\n   \"\"\n   \"*\n {\n-  return stormy16_output_cbranch_hi (NULL_RTX, \\\"%l0\\\", 0, insn);\n+  return xstormy16_output_cbranch_hi (NULL_RTX, \\\"%l0\\\", 0, insn);\n }\"\n   [(set_attr \"branch_class\" \"br12\")\n    (set_attr \"psw_operand\" \"nop\")])\n@@ -898,7 +898,7 @@\n   \"\"\n   \"\n {\n-  stormy16_expand_casesi (operands[0], operands[1], operands[2],\n+  xstormy16_expand_casesi (operands[0], operands[1], operands[2],\n \t\t\t  operands[3], operands[4]);\n   DONE;\n }\")\n@@ -929,7 +929,7 @@\n   \"\"\n   \"\n {\n-  stormy16_expand_prologue ();\n+  xstormy16_expand_prologue ();\n   DONE;\n }\")\n \n@@ -945,7 +945,7 @@\n   \"\"\n   \"\n {\n-  stormy16_expand_epilogue ();\n+  xstormy16_expand_epilogue ();\n   DONE;\n }\")\n "}, {"sha": "dc44d389f9331e15f6fdf3ab0f0ef19fbb9ba290", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c6243b4cbd50ca549ca062d73e2e694449362371", "patch": "@@ -1,3 +1,13 @@\n+2001-11-08  Geoffrey Keating  <geoffk@redhat.com>\n+\n+\t* g++.old-deja/g++.bugs/900227_01.C: Change stormy16 to xstormy16.\n+\t* g++.old-deja/g++.eh/badalloc1.C: Change stormy16 to xstormy16.\n+\t* g++.old-deja/g++.mike/ns15.C: Change stormy16 to xstormy16.\n+\t* g++.old-deja/g++.pt/crash16.C: Change stormy16 to xstormy16.\n+\t* gcc.c-torture/compile/961203-1.x: Change stormy16 to xstormy16.\n+\t* gcc.c-torture/compile/980506-1.x: Change stormy16 to xstormy16.\n+\t* gcc.c-torture/compile/990617-1.x: Change stormy16 to xstormy16.\n+\n 2001-11-08  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* g++.dg/warn/Wshadow-1.C: New tests."}, {"sha": "a878873aae78388881028f788e90bc419b6887be", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900227_01.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900227_01.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900227_01.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900227_01.C?ref=c6243b4cbd50ca549ca062d73e2e694449362371", "patch": "@@ -32,7 +32,7 @@\n \n int main ();\n \n-short s = (short) &main;\t// WARNING - small integer XFAIL h8*-*-* stormy16-*-*\n+short s = (short) &main;\t// WARNING - small integer XFAIL h8*-*-* xstormy16-*-*\n char c = (char) &main;\t\t// WARNING - small integer\n \n int main () { return 0; }"}, {"sha": "ac1fdd7bc4ecf878ff581d7511123c58c9baa327", "filename": "gcc/testsuite/g++.old-deja/g++.eh/badalloc1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fbadalloc1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fbadalloc1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fbadalloc1.C?ref=c6243b4cbd50ca549ca062d73e2e694449362371", "patch": "@@ -1,4 +1,4 @@\n-// excess errors test - XFAIL stormy16-*-*\n+// excess errors test - XFAIL xstormy16-*-*\n // Copyright (C) 2000 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 6 June 2000 <nathan@codesourcery.com>\n "}, {"sha": "247aab192c21b558a16f3042afc244bfcaa1f17d", "filename": "gcc/testsuite/g++.old-deja/g++.mike/ns15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fns15.C?ref=c6243b4cbd50ca549ca062d73e2e694449362371", "patch": "@@ -1,5 +1,5 @@\n // Build don't link:\n-// excess errors test - XFAIL stormy16-*-*\n+// excess errors test - XFAIL xstormy16-*-*\n \n #include <stdio.h>\n #include <stdlib.h>"}, {"sha": "d8a4e152a8327a8676481d89bb93f7cabb30d9e5", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash16.C?ref=c6243b4cbd50ca549ca062d73e2e694449362371", "patch": "@@ -1,6 +1,6 @@\n // Build don't link:\n // Special g++ Options:\n-// excess errors test - XFAIL stormy16-*-*\n+// excess errors test - XFAIL xstormy16-*-*\n \n extern \"C\" void qsort(void *base, __SIZE_TYPE__ nmemb, __SIZE_TYPE__ size,\n               int (*compar)(const void *, const void *));"}, {"sha": "30ebea69ea64796771d5f3b1e833da905bdf4ef5", "filename": "gcc/testsuite/gcc.c-torture/compile/961203-1.x", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F961203-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F961203-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F961203-1.x?ref=c6243b4cbd50ca549ca062d73e2e694449362371", "patch": "@@ -1,6 +1,6 @@\n-# The structure is too large for the stormy16 - won't fit in 16 bits.\n+# The structure is too large for the xstormy16 - won't fit in 16 bits.\n \n-if { [istarget \"stormy16-*-*\"] } {\n+if { [istarget \"xstormy16-*-*\"] } {\n         return 1;\n }\n "}, {"sha": "a0717a90674b9560a47e188ea399824a95e74387", "filename": "gcc/testsuite/gcc.c-torture/compile/980506-1.x", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F980506-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F980506-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F980506-1.x?ref=c6243b4cbd50ca549ca062d73e2e694449362371", "patch": "@@ -1,5 +1,5 @@\n-# The arrays are too large for the stormy16 - won't fit in 16 bits.\n-if { [istarget \"stormy16-*-*\"] } {\n+# The arrays are too large for the xstormy16 - won't fit in 16 bits.\n+if { [istarget \"xstormy16-*-*\"] } {\n         return 1;\n }\n "}, {"sha": "b326395523bf0d3f888ceb3c08f76bd390b6e24c", "filename": "gcc/testsuite/gcc.c-torture/compile/990617-1.x", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F990617-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6243b4cbd50ca549ca062d73e2e694449362371/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F990617-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F990617-1.x?ref=c6243b4cbd50ca549ca062d73e2e694449362371", "patch": "@@ -1,6 +1,6 @@\n-# 0x70000000 is too large a constant to become a pointer on stormy16.\n+# 0x70000000 is too large a constant to become a pointer on xstormy16.\n \n-if { [istarget \"stormy16-*-*\"] } {\n+if { [istarget \"xstormy16-*-*\"] } {\n         return 1;\n }\n "}]}