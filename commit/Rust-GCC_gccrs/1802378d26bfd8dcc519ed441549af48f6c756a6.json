{"sha": "1802378d26bfd8dcc519ed441549af48f6c756a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgwMjM3OGQyNmJmZDhkY2M1MTllZDQ0MTU0OWFmNDhmNmM3NTZhNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-10-09T12:15:31Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-10-09T12:15:31Z"}, "message": "re PR tree-optimization/45612 (Reference to undefined label building libada on Solaris 2/SPARC)\n\n\tPR tree-optimization/45612\n\t* ipa-split.c (test_nonssa_use): Remove bogus ATTRIBUTE_UNUSED.\n\tTest LABEL_DECLs as well.  Fix formatting issues.\n\t(verify_non_ssa_vars): Return false for a GIMPLE_LABEL statement\n\twhose label is present in NON_SSA_VARS.\n\t(mark_nonssa_use): Remove bogus ATTRIBUTE_UNUSED.  Handle LABEL_DECLs\n\tas well.  Fix formatting issues.\n\t(visit_bb): Fix typos and formatting issue.\n\nFrom-SVN: r165221", "tree": {"sha": "54b0e306a9a4059e91a6c893c69b1893ec2efc72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54b0e306a9a4059e91a6c893c69b1893ec2efc72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1802378d26bfd8dcc519ed441549af48f6c756a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1802378d26bfd8dcc519ed441549af48f6c756a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1802378d26bfd8dcc519ed441549af48f6c756a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1802378d26bfd8dcc519ed441549af48f6c756a6/comments", "author": null, "committer": null, "parents": [{"sha": "64978ba3f2ba45b89732cc3f70c7efbded95da2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64978ba3f2ba45b89732cc3f70c7efbded95da2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64978ba3f2ba45b89732cc3f70c7efbded95da2a"}], "stats": {"total": 100, "additions": 65, "deletions": 35}, "files": [{"sha": "74394b9115ac612d67fdb2bbccb5b77f2c3af70a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1802378d26bfd8dcc519ed441549af48f6c756a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1802378d26bfd8dcc519ed441549af48f6c756a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1802378d26bfd8dcc519ed441549af48f6c756a6", "patch": "@@ -1,3 +1,14 @@\n+2010-10-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR tree-optimization/45612\n+\t* ipa-split.c (test_nonssa_use): Remove bogus ATTRIBUTE_UNUSED.\n+\tTest LABEL_DECLs as well.  Fix formatting issues.\n+\t(verify_non_ssa_vars): Return false for a GIMPLE_LABEL statement\n+\twhose label is present in NON_SSA_VARS.\n+\t(mark_nonssa_use): Remove bogus ATTRIBUTE_UNUSED.  Handle LABEL_DECLs\n+\tas well.  Fix formatting issues.\n+\t(visit_bb): Fix typos and formatting issue.\n+\n 2010-10-09  Nathan Froyd  <froydnj@codesourcery.com>\n \n \tPR tree-optimization/45950"}, {"sha": "23882b2f8a62f598883fa5188b03e45b6fc9fba6", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 54, "deletions": 35, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1802378d26bfd8dcc519ed441549af48f6c756a6/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1802378d26bfd8dcc519ed441549af48f6c756a6/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=1802378d26bfd8dcc519ed441549af48f6c756a6", "patch": "@@ -132,29 +132,34 @@ struct split_point best_split_point;\n \n static tree find_retval (basic_block return_bb);\n \n-/* Callback for walk_stmt_load_store_addr_ops.  If T is non-ssa automatic\n+/* Callback for walk_stmt_load_store_addr_ops.  If T is non-SSA automatic\n    variable, check it if it is present in bitmap passed via DATA.  */\n \n static bool\n-test_nonssa_use (gimple stmt ATTRIBUTE_UNUSED, tree t,\n-\t         void *data ATTRIBUTE_UNUSED)\n+test_nonssa_use (gimple stmt ATTRIBUTE_UNUSED, tree t, void *data)\n {\n   t = get_base_address (t);\n \n-  if (t && !is_gimple_reg (t)\n-      && ((TREE_CODE (t) == VAR_DECL\n+  if (!t || is_gimple_reg (t))\n+    return false;\n+\n+  if (TREE_CODE (t) == PARM_DECL\n+      || (TREE_CODE (t) == VAR_DECL\n \t  && auto_var_in_fn_p (t, current_function_decl))\n-\t  || (TREE_CODE (t) == RESULT_DECL)\n-\t  || (TREE_CODE (t) == PARM_DECL)))\n+      || TREE_CODE (t) == RESULT_DECL\n+      || TREE_CODE (t) == LABEL_DECL)\n     return bitmap_bit_p ((bitmap)data, DECL_UID (t));\n \n-  /* For DECL_BY_REFERENCE, the return value is actually pointer.  We want to pretend\n-     that the value pointed to is actual result decl.  */\n-  if (t && (TREE_CODE (t) == MEM_REF || INDIRECT_REF_P (t))\n+  /* For DECL_BY_REFERENCE, the return value is actually a pointer.  We want\n+     to pretend that the value pointed to is actual result decl.  */\n+  if ((TREE_CODE (t) == MEM_REF || INDIRECT_REF_P (t))\n       && TREE_CODE (TREE_OPERAND (t, 0)) == SSA_NAME\n       && TREE_CODE (SSA_NAME_VAR (TREE_OPERAND (t, 0))) == RESULT_DECL\n       && DECL_BY_REFERENCE (DECL_RESULT (current_function_decl)))\n-    return bitmap_bit_p ((bitmap)data, DECL_UID (DECL_RESULT (current_function_decl)));\n+    return\n+      bitmap_bit_p ((bitmap)data,\n+\t\t    DECL_UID (DECL_RESULT (current_function_decl)));\n+\n   return false;\n }\n \n@@ -173,8 +178,8 @@ dump_split_point (FILE * file, struct split_point *current)\n   dump_bitmap (file, current->ssa_names_to_pass);\n }\n \n-/* Look for all BBs in header that might lead to split part and verify that\n-   they are not defining any of SSA vars used by split part. \n+/* Look for all BBs in header that might lead to the split part and verify\n+   that they are not defining any non-SSA var used by the split part.\n    Parameters are the same as for consider_split.  */\n \n static bool\n@@ -186,15 +191,15 @@ verify_non_ssa_vars (struct split_point *current, bitmap non_ssa_vars,\n   edge e;\n   edge_iterator ei;\n   bool ok = true;\n-  \n+\n   FOR_EACH_EDGE (e, ei, current->entry_bb->preds)\n     if (e->src != ENTRY_BLOCK_PTR\n \t&& !bitmap_bit_p (current->split_bbs, e->src->index))\n       {\n         VEC_safe_push (basic_block, heap, worklist, e->src);\n \tbitmap_set_bit (seen, e->src->index);\n       }\n-  \n+\n   while (!VEC_empty (basic_block, worklist))\n     {\n       gimple_stmt_iterator bsi;\n@@ -210,21 +215,29 @@ verify_non_ssa_vars (struct split_point *current, bitmap non_ssa_vars,\n \t  }\n       for (bsi = gsi_start_bb (bb); !gsi_end_p (bsi); gsi_next (&bsi))\n \t{\n-\t  if (is_gimple_debug (gsi_stmt (bsi)))\n+\t  gimple stmt = gsi_stmt (bsi);\n+\t  if (is_gimple_debug (stmt))\n \t    continue;\n \t  if (walk_stmt_load_store_addr_ops\n-\t      (gsi_stmt (bsi), non_ssa_vars, test_nonssa_use,\n-\t       test_nonssa_use, test_nonssa_use))\n+\t      (stmt, non_ssa_vars, test_nonssa_use, test_nonssa_use,\n+\t       test_nonssa_use))\n \t    {\n \t      ok = false;\n \t      goto done;\n \t    }\n+\t  if (gimple_code (stmt) == GIMPLE_LABEL\n+\t      && test_nonssa_use (stmt, gimple_label_label (stmt),\n+\t\t\t\t  non_ssa_vars))\n+\t  {\n+\t    ok = false;\n+\t    goto done;\n+\t  }\n \t}\n       for (bsi = gsi_start_phis (bb); !gsi_end_p (bsi); gsi_next (&bsi))\n \t{\n \t  if (walk_stmt_load_store_addr_ops\n-\t      (gsi_stmt (bsi), non_ssa_vars, test_nonssa_use,\n-\t       test_nonssa_use, test_nonssa_use))\n+\t      (gsi_stmt (bsi), non_ssa_vars, test_nonssa_use, test_nonssa_use,\n+\t       test_nonssa_use))\n \t    {\n \t      ok = false;\n \t      goto done;\n@@ -542,13 +555,12 @@ find_retval (basic_block return_bb)\n   return NULL;\n }\n \n-/* Callback for walk_stmt_load_store_addr_ops.  If T is non-ssa automatic\n-   variable, mark it as used in bitmap passed via DATA. \n+/* Callback for walk_stmt_load_store_addr_ops.  If T is non-SSA automatic\n+   variable, mark it as used in bitmap passed via DATA.\n    Return true when access to T prevents splitting the function.  */\n \n static bool\n-mark_nonssa_use (gimple stmt ATTRIBUTE_UNUSED, tree t,\n-\t         void *data ATTRIBUTE_UNUSED)\n+mark_nonssa_use (gimple stmt ATTRIBUTE_UNUSED, tree t, void *data)\n {\n   t = get_base_address (t);\n \n@@ -560,21 +572,27 @@ mark_nonssa_use (gimple stmt ATTRIBUTE_UNUSED, tree t,\n   if (TREE_CODE (t) == PARM_DECL)\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n-\tfprintf (dump_file, \"Can not split use of non-ssa function parameter.\\n\");\n+\tfprintf (dump_file,\n+\t\t \"Cannot split: use of non-ssa function parameter.\\n\");\n       return true;\n     }\n \n-  if ((TREE_CODE (t) == VAR_DECL && auto_var_in_fn_p (t, current_function_decl))\n-      || (TREE_CODE (t) == RESULT_DECL))\n+  if ((TREE_CODE (t) == VAR_DECL\n+       && auto_var_in_fn_p (t, current_function_decl))\n+      || TREE_CODE (t) == RESULT_DECL\n+      || TREE_CODE (t) == LABEL_DECL)\n     bitmap_set_bit ((bitmap)data, DECL_UID (t));\n \n-  /* For DECL_BY_REFERENCE, the return value is actually pointer.  We want to pretend\n-     that the value pointed to is actual result decl.  */\n-  if (t && (TREE_CODE (t) == MEM_REF || INDIRECT_REF_P (t))\n+  /* For DECL_BY_REFERENCE, the return value is actually a pointer.  We want\n+     to pretend that the value pointed to is actual result decl.  */\n+  if ((TREE_CODE (t) == MEM_REF || INDIRECT_REF_P (t))\n       && TREE_CODE (TREE_OPERAND (t, 0)) == SSA_NAME\n       && TREE_CODE (SSA_NAME_VAR (TREE_OPERAND (t, 0))) == RESULT_DECL\n       && DECL_BY_REFERENCE (DECL_RESULT (current_function_decl)))\n-    return bitmap_bit_p ((bitmap)data, DECL_UID (DECL_RESULT (current_function_decl)));\n+    return\n+      bitmap_bit_p ((bitmap)data,\n+\t\t    DECL_UID (DECL_RESULT (current_function_decl)));\n+\n   return false;\n }\n \n@@ -617,13 +635,13 @@ visit_bb (basic_block bb, basic_block return_bb,\n \t  && stmt_can_throw_external (stmt))\n \t{\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    fprintf (dump_file, \"Can not split external resx.\\n\");\n+\t    fprintf (dump_file, \"Cannot split: external resx.\\n\");\n \t  can_split = false;\n \t}\n       if (gimple_code (stmt) == GIMPLE_EH_DISPATCH)\n \t{\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    fprintf (dump_file, \"Can not split eh dispatch.\\n\");\n+\t    fprintf (dump_file, \"Cannot split: eh dispatch.\\n\");\n \t  can_split = false;\n \t}\n \n@@ -642,12 +660,13 @@ visit_bb (basic_block bb, basic_block return_bb,\n \t  case BUILT_IN_APPLY:\n \t  case BUILT_IN_VA_START:\n \t    if (dump_file && (dump_flags & TDF_DETAILS))\n-\t      fprintf (dump_file, \"Can not split builtin_apply and va_start.\\n\");\n+\t      fprintf (dump_file,\n+\t\t       \"Cannot split: builtin_apply and va_start.\\n\");\n \t    can_split = false;\n \t    break;\n \t  case BUILT_IN_EH_POINTER:\n \t    if (dump_file && (dump_flags & TDF_DETAILS))\n-\t      fprintf (dump_file, \"Can not split builtin_eh_pointer.\\n\");\n+\t      fprintf (dump_file, \"Cannot split: builtin_eh_pointer.\\n\");\n \t    can_split = false;\n \t    break;\n \t  default:"}]}