{"sha": "dececdaa772723e625f7b1617ad8162982012ba9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVjZWNkYWE3NzI3MjNlNjI1ZjdiMTYxN2FkODE2Mjk4MjAxMmJhOQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2018-01-22T10:50:20Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-01-22T10:50:20Z"}, "message": "[arm] Make gcc.target/arm/copysign_softfloat_1.c more robust\n\nThis test has needlessly restrictive requirements. It tries to force a soft-float target and tries to run.\nThis makes it unsupportable for any non-soft-float variant.\nIn fact, the test can be a run-time test for any target, and only the scan-assembler tests are specific to\n-mfloat-abi=soft. So this patch makes the test always runnable and makes the scan-assembler checks predicable\non the the new arm_sotftfloat effective target check. \n\n\t* doc/sourcebuild.texi (arm_softfloat): Document.\n\n\t* lib/target-supports.exp (check_effective_target_arm_softfloat):\n\tNew procedure.\n\t* gcc.target/arm/copysign_softfloat_1.c: Allow running everywhere.\n\tAdjust scan-assembler checks for soft-float.\n\nFrom-SVN: r256940", "tree": {"sha": "1013b52005ef3db9d767b709aa0fcf9409c0db5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1013b52005ef3db9d767b709aa0fcf9409c0db5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dececdaa772723e625f7b1617ad8162982012ba9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dececdaa772723e625f7b1617ad8162982012ba9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dececdaa772723e625f7b1617ad8162982012ba9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dececdaa772723e625f7b1617ad8162982012ba9/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a79ea14b2774c2d8a51b978d3b3e7a67ae1067b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a79ea14b2774c2d8a51b978d3b3e7a67ae1067b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a79ea14b2774c2d8a51b978d3b3e7a67ae1067b"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "f3fe4f69710168080385047392777eb81707cd0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dececdaa772723e625f7b1617ad8162982012ba9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dececdaa772723e625f7b1617ad8162982012ba9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dececdaa772723e625f7b1617ad8162982012ba9", "patch": "@@ -1,3 +1,7 @@\n+2018-01-22  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* doc/sourcebuild.texi (arm_softfloat): Document.\n+\n 2018-01-21  John David Anglin  <danglin@gcc.gnu.org>\n \n \tPR gcc/77734"}, {"sha": "69fbf6ac76842ae90fcf4f07638755c18ecc23c9", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dececdaa772723e625f7b1617ad8162982012ba9/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dececdaa772723e625f7b1617ad8162982012ba9/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=dececdaa772723e625f7b1617ad8162982012ba9", "patch": "@@ -1650,6 +1650,10 @@ ARM target adheres to the VFP and Advanced SIMD Register Arguments\n variant of the ABI for the ARM Architecture (as selected with\n @code{-mfloat-abi=hard}).\n \n+@item arm_softfloat\n+ARM target uses the soft-float ABI with no floating-point instructions\n+used whatsoever (as selected with @code{-mfloat-abi=soft}).\n+\n @item arm_hard_vfp_ok\n ARM target supports @code{-mfpu=vfp -mfloat-abi=hard}.\n Some multilibs may be incompatible with these options."}, {"sha": "a63fa4a35fc9ae24b3dd2d3439be6e6eced68204", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dececdaa772723e625f7b1617ad8162982012ba9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dececdaa772723e625f7b1617ad8162982012ba9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dececdaa772723e625f7b1617ad8162982012ba9", "patch": "@@ -1,3 +1,10 @@\n+2018-01-22  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_arm_softfloat):\n+\tNew procedure.\n+\t* gcc.target/arm/copysign_softfloat_1.c: Allow running everywhere.\n+\tAdjust scan-assembler checks for soft-float.\n+\n 2018-01-21  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR target/83946"}, {"sha": "fdbeeadc01e1c9b9a7810a8ff8b23c58f6c429a5", "filename": "gcc/testsuite/gcc.target/arm/copysign_softfloat_1.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dececdaa772723e625f7b1617ad8162982012ba9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcopysign_softfloat_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dececdaa772723e625f7b1617ad8162982012ba9/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcopysign_softfloat_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcopysign_softfloat_1.c?ref=dececdaa772723e625f7b1617ad8162982012ba9", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do run } */\n /* { dg-require-effective-target arm_thumb2_ok } */\n-/* { dg-require-effective-target arm_soft_ok } */\n-/* { dg-skip-if \"skip override\" { *-*-* } { \"-mfloat-abi=softfp\" \"-mfloat-abi=hard\" } { \"\" } } */\n-/* { dg-options \"-O2 -mfloat-abi=soft --save-temps\" } */\n+/* { dg-add-options arm_arch_v6t2 } */\n+/* { dg-additional-options \"-O2 --save-temps\" } */\n+\n extern void abort (void);\n \n #define N 16\n@@ -42,8 +42,8 @@ main (int argc, char **argv)\n {\n   int index = 0;\n \n-/* { dg-final { scan-assembler-times \"bfi\" 2 } } */\n-/* { dg-final { scan-assembler-times \"lsr\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bfi\" 2 { target arm_softfloat } } } */\n+/* { dg-final { scan-assembler-times \"lsr\" 1 { target arm_softfloat } } } */\n   for (index; index < N; index++)\n     {\n       if (__builtin_copysignf (a_f[index], b_f[index]) != c_f[index])"}, {"sha": "720914b0c4c6173d989fa1c8f3362ff5a22c3e71", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dececdaa772723e625f7b1617ad8162982012ba9/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dececdaa772723e625f7b1617ad8162982012ba9/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=dececdaa772723e625f7b1617ad8162982012ba9", "patch": "@@ -4885,6 +4885,19 @@ proc check_effective_target_arm_hf_eabi { } {\n     }]\n }\n \n+# Return 1 if this is an ARM target that uses the soft float ABI\n+# with no floating-point instructions at all (e.g. -mfloat-abi=soft).\n+\n+proc check_effective_target_arm_softfloat { } {\n+    return [check_no_compiler_messages arm_softfloat object {\n+\t#if !defined(__SOFTFP__)\n+\t#error not soft-float EABI\n+\t#else\n+\tint dummy;\n+\t#endif\n+    }]\n+}\n+\n # Return 1 if this is an ARM target supporting -mcpu=iwmmxt.\n # Some multilibs may be incompatible with this option.\n "}]}