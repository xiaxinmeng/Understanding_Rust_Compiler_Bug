{"sha": "799e2e7f023784b9cdcebfe5751d183d125b2bd8", "node_id": "C_kwDOANBUbNoAKDc5OWUyZTdmMDIzNzg0YjljZGNlYmZlNTc1MWQxODNkMTI1YjJiZDg", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2023-01-09T21:56:34Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2023-01-09T21:56:34Z"}, "message": "c: Check for modifiable static compound literals in inline definitions\n\nThe C rule against modifiable objects with static storage duration in\ninline definitions should apply to compound literals (using the C2x\nfeature of storage-class specifiers for compound literals) just as to\nvariables.  Add a call to record_inline_static for compound literals\nto make sure this case is detected.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\ngcc/c/\n\t* c-decl.cc (build_compound_literal): Call record_inline_static.\n\ngcc/testsuite/\n\t* gcc.dg/c2x-complit-8.c: New test.", "tree": {"sha": "b06e62909bde04fd684f9c5265f1c3abb0d0a79b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b06e62909bde04fd684f9c5265f1c3abb0d0a79b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/799e2e7f023784b9cdcebfe5751d183d125b2bd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/799e2e7f023784b9cdcebfe5751d183d125b2bd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/799e2e7f023784b9cdcebfe5751d183d125b2bd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/799e2e7f023784b9cdcebfe5751d183d125b2bd8/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "150d4b02838c73b392c4da89a5acc0130c0950e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/150d4b02838c73b392c4da89a5acc0130c0950e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/150d4b02838c73b392c4da89a5acc0130c0950e0"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "d76ffb3380d88397dcef3baf330e53f8812218f7", "filename": "gcc/c/c-decl.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/799e2e7f023784b9cdcebfe5751d183d125b2bd8/gcc%2Fc%2Fc-decl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/799e2e7f023784b9cdcebfe5751d183d125b2bd8/gcc%2Fc%2Fc-decl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.cc?ref=799e2e7f023784b9cdcebfe5751d183d125b2bd8", "patch": "@@ -6260,6 +6260,13 @@ build_compound_literal (location_t loc, tree type, tree init, bool non_const,\n       DECL_USER_ALIGN (decl) = 1;\n     }\n   store_init_value (loc, decl, init, NULL_TREE);\n+  if (current_scope != file_scope\n+      && TREE_STATIC (decl)\n+      && !TREE_READONLY (decl)\n+      && DECL_DECLARED_INLINE_P (current_function_decl)\n+      && DECL_EXTERNAL (current_function_decl))\n+    record_inline_static (input_location, current_function_decl,\n+\t\t\t  decl, csi_modifiable);\n \n   if (TREE_CODE (type) == ARRAY_TYPE && !COMPLETE_TYPE_P (type))\n     {"}, {"sha": "fb614ab78025c161b4eb564552489ec7fcd77079", "filename": "gcc/testsuite/gcc.dg/c2x-complit-8.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/799e2e7f023784b9cdcebfe5751d183d125b2bd8/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-complit-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/799e2e7f023784b9cdcebfe5751d183d125b2bd8/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-complit-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-complit-8.c?ref=799e2e7f023784b9cdcebfe5751d183d125b2bd8", "patch": "@@ -0,0 +1,70 @@\n+/* Test C2x storage class specifiers in compound literals: inline function\n+   constraints.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+inline void\n+f1 ()\n+{\n+  (static int) { 123 }; /* { dg-error \"static but declared in inline function 'f1' which is not static\" } */\n+  (static thread_local int) { 456 } ; /* { dg-error \"static but declared in inline function 'f1' which is not static\" } */\n+  (int) { 789 };\n+  (register int) { 1234 };\n+}\n+\n+inline void\n+f1e ()\n+{\n+  (static int) { 123 };\n+  (static thread_local int) { 456 } ;\n+}\n+\n+static inline void\n+f1s ()\n+{\n+  (static int) { 123 };\n+  (static thread_local int) { 456 } ;\n+}\n+\n+inline void\n+f2 ()\n+{\n+  (static const int) { 123 };\n+  (static thread_local const int) { 456 };\n+}\n+\n+inline void\n+f2e ()\n+{\n+  (static const int) { 123 };\n+  (static thread_local const int) { 456 };\n+}\n+\n+static inline void\n+f2s ()\n+{\n+  (static const int) { 123 };\n+  (static thread_local const int) { 456 };\n+}\n+\n+inline void\n+f3 ()\n+{\n+  (static constexpr int) { 123 };\n+}\n+\n+inline void\n+f3e ()\n+{\n+  (static constexpr int) { 123 };\n+}\n+\n+static inline void\n+f3s ()\n+{\n+  (static constexpr int) { 123 };\n+}\n+\n+extern void f1e ();\n+extern void f2e ();\n+extern void f3e ();"}]}