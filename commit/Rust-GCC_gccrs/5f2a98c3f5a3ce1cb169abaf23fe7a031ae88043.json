{"sha": "5f2a98c3f5a3ce1cb169abaf23fe7a031ae88043", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYyYTk4YzNmNWEzY2UxY2IxNjlhYmFmMjNmZTdhMDMxYWU4ODA0Mw==", "commit": {"author": {"name": "Chung-Ju Wu", "email": "jasonwucj@gmail.com", "date": "2018-04-08T11:14:09Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2018-04-08T11:14:09Z"}, "message": "[NDS32] Add strict_aligned_p to machine_function and implement TARGET_EXPAND_TO_RTL_HOOK.\n\ngcc/\n\t* config/nds32/nds32.c (nds32_init_machine_status,\n\tnds32_legitimate_index_p, nds32_legitimate_address_p): Consider\n\tstrict_aligned_p field.\n\t(nds32_expand_to_rtl_hook): New function.\n\t(TARGET_EXPAND_TO_RTL_HOOK): Define.\n\t* config/nds32/nds32.h (machine_function): Add strict_aligned_p field.\n\nFrom-SVN: r259222", "tree": {"sha": "969e2f39722169d85a7a85b3c7a70d147964a1c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/969e2f39722169d85a7a85b3c7a70d147964a1c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f2a98c3f5a3ce1cb169abaf23fe7a031ae88043", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f2a98c3f5a3ce1cb169abaf23fe7a031ae88043", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f2a98c3f5a3ce1cb169abaf23fe7a031ae88043", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f2a98c3f5a3ce1cb169abaf23fe7a031ae88043/comments", "author": {"login": "jasonwucj", "id": 5520732, "node_id": "MDQ6VXNlcjU1MjA3MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5520732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonwucj", "html_url": "https://github.com/jasonwucj", "followers_url": "https://api.github.com/users/jasonwucj/followers", "following_url": "https://api.github.com/users/jasonwucj/following{/other_user}", "gists_url": "https://api.github.com/users/jasonwucj/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonwucj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonwucj/subscriptions", "organizations_url": "https://api.github.com/users/jasonwucj/orgs", "repos_url": "https://api.github.com/users/jasonwucj/repos", "events_url": "https://api.github.com/users/jasonwucj/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonwucj/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "63ab910dd75cce3d9e595879465d6ea5fdf13602", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63ab910dd75cce3d9e595879465d6ea5fdf13602", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63ab910dd75cce3d9e595879465d6ea5fdf13602"}], "stats": {"total": 62, "additions": 58, "deletions": 4}, "files": [{"sha": "f1d773b2ab1f3d9fa7fc29a15b18adfb46b03e71", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2a98c3f5a3ce1cb169abaf23fe7a031ae88043/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2a98c3f5a3ce1cb169abaf23fe7a031ae88043/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f2a98c3f5a3ce1cb169abaf23fe7a031ae88043", "patch": "@@ -1,3 +1,12 @@\n+2018-04-08  Chung-Ju Wu  <jasonwucj@gmail.com>\n+\n+\t* config/nds32/nds32.c (nds32_init_machine_status,\n+\tnds32_legitimate_index_p, nds32_legitimate_address_p): Consider\n+\tstrict_aligned_p field.\n+\t(nds32_expand_to_rtl_hook): New function.\n+\t(TARGET_EXPAND_TO_RTL_HOOK): Define.\n+\t* config/nds32/nds32.h (machine_function): Add strict_aligned_p field.\n+\n 2018-04-08  Kito Cheng  <kito.cheng@gmail.com>\n \t    Chung-Ju Wu  <jasonwucj@gmail.com>\n "}, {"sha": "36417cbc543d6bda3086ebe45e9bcaf009fb874f", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2a98c3f5a3ce1cb169abaf23fe7a031ae88043/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2a98c3f5a3ce1cb169abaf23fe7a031ae88043/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=5f2a98c3f5a3ce1cb169abaf23fe7a031ae88043", "patch": "@@ -342,6 +342,9 @@ nds32_init_machine_status (void)\n   /* Initially assume this function does NOT use fp_as_gp optimization.  */\n   machine->fp_as_gp_p = 0;\n \n+  /* Initially this function is not under strictly aligned situation.  */\n+  machine->strict_aligned_p = 0;\n+\n   return machine;\n }\n \n@@ -1414,8 +1417,12 @@ nds32_legitimate_index_p (machine_mode outer_mode,\n \t  /* Further check if the value is legal for the 'outer_mode'.  */\n \t  if (satisfies_constraint_Is16 (index))\n \t    {\n+\t      /* If it is not under strictly aligned situation,\n+\t\t we can return true without checking alignment.  */\n+\t      if (!cfun->machine->strict_aligned_p)\n+\t\treturn true;\n \t      /* Make sure address is half word alignment.  */\n-\t      if (NDS32_HALF_WORD_ALIGN_P (INTVAL (index)))\n+\t      else if (NDS32_HALF_WORD_ALIGN_P (INTVAL (index)))\n \t\treturn true;\n \t    }\n \t  break;\n@@ -1430,8 +1437,12 @@ nds32_legitimate_index_p (machine_mode outer_mode,\n \t\t    return false;\n \t\t}\n \n+\t      /* If it is not under strictly aligned situation,\n+\t\t we can return true without checking alignment.  */\n+\t      if (!cfun->machine->strict_aligned_p)\n+\t\treturn true;\n \t      /* Make sure address is word alignment.  */\n-\t      if (NDS32_SINGLE_WORD_ALIGN_P (INTVAL (index)))\n+\t      else if (NDS32_SINGLE_WORD_ALIGN_P (INTVAL (index)))\n \t\treturn true;\n \t    }\n \t  break;\n@@ -1446,11 +1457,15 @@ nds32_legitimate_index_p (machine_mode outer_mode,\n \t\t    return false;\n \t\t}\n \n+\t      /* If it is not under strictly aligned situation,\n+\t\t we can return true without checking alignment.  */\n+\t      if (!cfun->machine->strict_aligned_p)\n+\t\treturn true;\n \t      /* Make sure address is word alignment.\n \t\tCurrently we do not have 64-bit load/store yet,\n \t\tso we will use two 32-bit load/store instructions to do\n \t\tmemory access and they are single word alignment.  */\n-\t      if (NDS32_SINGLE_WORD_ALIGN_P (INTVAL (index)))\n+\t      else if (NDS32_SINGLE_WORD_ALIGN_P (INTVAL (index)))\n \t\treturn true;\n \t    }\n \t  break;\n@@ -1589,6 +1604,20 @@ nds32_adjust_insn_length (rtx_insn *insn, int length)\n     }\n }\n \n+/* Storage Layout.  */\n+\n+/* This function will be called just before expansion into rtl.  */\n+static void\n+nds32_expand_to_rtl_hook (void)\n+{\n+  /* We need to set strictly aligned situation.\n+     After that, the memory address checking in nds32_legitimate_address_p()\n+     will take alignment offset into consideration so that it will not create\n+     unaligned [base + offset] access during the rtl optimization.  */\n+  cfun->machine->strict_aligned_p = 1;\n+}\n+\n+\f\n /* Register Usage.  */\n \n static void\n@@ -2469,11 +2498,15 @@ nds32_legitimate_address_p (machine_mode mode, rtx x, bool strict)\n \t\t{\n \t\t  if (satisfies_constraint_Is14 (op1))\n \t\t    {\n+\t\t      /* If it is not under strictly aligned situation,\n+\t\t\t we can return true without checking alignment.  */\n+\t\t      if (!cfun->machine->strict_aligned_p)\n+\t\t\treturn true;\n \t\t      /* Make sure address is word alignment.\n \t\t\tCurrently we do not have 64-bit load/store yet,\n \t\t\tso we will use two 32-bit load/store instructions to do\n \t\t\tmemory access and they are single word alignment.  */\n-\t\t      if (NDS32_SINGLE_WORD_ALIGN_P (INTVAL (op1)))\n+\t\t      else if (NDS32_SINGLE_WORD_ALIGN_P (INTVAL (op1)))\n \t\t\treturn true;\n \t\t    }\n \t\t}\n@@ -4827,6 +4860,9 @@ nds32_use_blocks_for_constant_p (machine_mode mode,\n #define TARGET_PROMOTE_FUNCTION_MODE \\\n   default_promote_function_mode_always_promote\n \n+#undef TARGET_EXPAND_TO_RTL_HOOK\n+#define TARGET_EXPAND_TO_RTL_HOOK nds32_expand_to_rtl_hook\n+\n \f\n /* Layout of Source Language Data Types.  */\n "}, {"sha": "d68820c422bcbfbdc780a4c2c26e79ccacc8588b", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f2a98c3f5a3ce1cb169abaf23fe7a031ae88043/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f2a98c3f5a3ce1cb169abaf23fe7a031ae88043/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=5f2a98c3f5a3ce1cb169abaf23fe7a031ae88043", "patch": "@@ -296,6 +296,15 @@ struct GTY(()) machine_function\n   /* Indicate that whether this function\n      uses fp_as_gp optimization.  */\n   int fp_as_gp_p;\n+  /* Indicate that whether this function is under strictly aligned\n+     situation for legitimate address checking.  This flag informs\n+     nds32_legitimate_address_p() how to treat offset alignment:\n+       1. The IVOPT phase needs to detect available range for memory access,\n+\t  such as checking [base + 32767] ~ [base + (-32768)].\n+\t  For this case we do not want address to be strictly aligned.\n+       2. The rtl lowering and optimization are close to target code.\n+\t  For this case we need address to be strictly aligned.  */\n+  int strict_aligned_p;\n };\n \n /* A C structure that contains the arguments information.  */"}]}