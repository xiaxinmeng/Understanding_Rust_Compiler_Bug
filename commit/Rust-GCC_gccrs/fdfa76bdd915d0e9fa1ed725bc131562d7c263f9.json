{"sha": "fdfa76bdd915d0e9fa1ed725bc131562d7c263f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRmYTc2YmRkOTE1ZDBlOWZhMWVkNzI1YmMxMzE1NjJkN2MyNjNmOQ==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@specifixinc.com", "date": "2005-03-30T23:08:17Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2005-03-30T23:08:17Z"}, "message": "Emit DW_AT_ranges for inlined subroutines that contain disjoint blocks.\n\nPR debug/20268\n* dwarf2out.c (add_high_low_attributes): New function, extracted from\ngen_lexical_block_die.\n(gen_lexical_block_die, gen_inlined_subroutine_die): Call it.\n\nFrom-SVN: r97289", "tree": {"sha": "ad30aafff27e9cd58bd621e891b17b3f9e33e6e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad30aafff27e9cd58bd621e891b17b3f9e33e6e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdfa76bdd915d0e9fa1ed725bc131562d7c263f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdfa76bdd915d0e9fa1ed725bc131562d7c263f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdfa76bdd915d0e9fa1ed725bc131562d7c263f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdfa76bdd915d0e9fa1ed725bc131562d7c263f9/comments", "author": null, "committer": null, "parents": [{"sha": "cd9c7bd28b72dd5c5a97f40f2f690db21f80c8e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd9c7bd28b72dd5c5a97f40f2f690db21f80c8e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd9c7bd28b72dd5c5a97f40f2f690db21f80c8e2"}], "stats": {"total": 74, "additions": 42, "deletions": 32}, "files": [{"sha": "aef2715279078fae78bf6126badb24e616d85c4d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfa76bdd915d0e9fa1ed725bc131562d7c263f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfa76bdd915d0e9fa1ed725bc131562d7c263f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fdfa76bdd915d0e9fa1ed725bc131562d7c263f9", "patch": "@@ -1,3 +1,10 @@\n+2005-03-30  James E. Wilson  <wilson@specifixinc.com>\n+\n+\tPR debug/20268\n+\t* dwarf2out.c (add_high_low_attributes): New function, extracted from\n+\tgen_lexical_block_die.\n+\t(gen_lexical_block_die, gen_inlined_subroutine_die): Call it.\n+\n 2005-03-31  Jan Hubicka  <jh@suse.cz>\n \n \t2004-11-02  Jan Hubicka  <jh@suse.cz>"}, {"sha": "3f340ba265271562eed4f56fd71450402c1d0c2a", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 35, "deletions": 32, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfa76bdd915d0e9fa1ed725bc131562d7c263f9/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfa76bdd915d0e9fa1ed725bc131562d7c263f9/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=fdfa76bdd915d0e9fa1ed725bc131562d7c263f9", "patch": "@@ -11578,41 +11578,49 @@ gen_label_die (tree decl, dw_die_ref context_die)\n     }\n }\n \n-/* Generate a DIE for a lexical block.  */\n+/* A helper function for gen_lexical_block_die and gen_inlined_subroutine_die.\n+   Add low_pc and high_pc attributes to the DIE for a block STMT.  */\n \n-static void\n-gen_lexical_block_die (tree stmt, dw_die_ref context_die, int depth)\n+static inline void\n+add_high_low_attributes (tree stmt, dw_die_ref die)\n {\n-  dw_die_ref stmt_die = new_die (DW_TAG_lexical_block, context_die, stmt);\n   char label[MAX_ARTIFICIAL_LABEL_BYTES];\n \n-  if (! BLOCK_ABSTRACT (stmt))\n+  if (BLOCK_FRAGMENT_CHAIN (stmt))\n     {\n-      if (BLOCK_FRAGMENT_CHAIN (stmt))\n-\t{\n-\t  tree chain;\n+      tree chain;\n \n-\t  add_AT_range_list (stmt_die, DW_AT_ranges, add_ranges (stmt));\n+      add_AT_range_list (die, DW_AT_ranges, add_ranges (stmt));\n \n-\t  chain = BLOCK_FRAGMENT_CHAIN (stmt);\n-\t  do\n-\t    {\n-\t      add_ranges (chain);\n-\t      chain = BLOCK_FRAGMENT_CHAIN (chain);\n-\t    }\n-\t  while (chain);\n-\t  add_ranges (NULL);\n-\t}\n-      else\n+      chain = BLOCK_FRAGMENT_CHAIN (stmt);\n+      do\n \t{\n-\t  ASM_GENERATE_INTERNAL_LABEL (label, BLOCK_BEGIN_LABEL,\n-\t\t\t\t       BLOCK_NUMBER (stmt));\n-\t  add_AT_lbl_id (stmt_die, DW_AT_low_pc, label);\n-\t  ASM_GENERATE_INTERNAL_LABEL (label, BLOCK_END_LABEL,\n-\t\t\t\t       BLOCK_NUMBER (stmt));\n-\t  add_AT_lbl_id (stmt_die, DW_AT_high_pc, label);\n+\t  add_ranges (chain);\n+\t  chain = BLOCK_FRAGMENT_CHAIN (chain);\n \t}\n+      while (chain);\n+      add_ranges (NULL);\n+    }\n+  else\n+    {\n+      ASM_GENERATE_INTERNAL_LABEL (label, BLOCK_BEGIN_LABEL,\n+\t\t\t\t   BLOCK_NUMBER (stmt));\n+      add_AT_lbl_id (die, DW_AT_low_pc, label);\n+      ASM_GENERATE_INTERNAL_LABEL (label, BLOCK_END_LABEL,\n+\t\t\t\t   BLOCK_NUMBER (stmt));\n+      add_AT_lbl_id (die, DW_AT_high_pc, label);\n     }\n+}\n+\n+/* Generate a DIE for a lexical block.  */\n+\n+static void\n+gen_lexical_block_die (tree stmt, dw_die_ref context_die, int depth)\n+{\n+  dw_die_ref stmt_die = new_die (DW_TAG_lexical_block, context_die, stmt);\n+\n+  if (! BLOCK_ABSTRACT (stmt))\n+    add_high_low_attributes (stmt, stmt_die);\n \n   decls_for_scope (stmt, stmt_die, depth);\n }\n@@ -11634,15 +11642,10 @@ gen_inlined_subroutine_die (tree stmt, dw_die_ref context_die, int depth)\n     {\n       dw_die_ref subr_die\n \t= new_die (DW_TAG_inlined_subroutine, context_die, stmt);\n-      char label[MAX_ARTIFICIAL_LABEL_BYTES];\n \n       add_abstract_origin_attribute (subr_die, decl);\n-      ASM_GENERATE_INTERNAL_LABEL (label, BLOCK_BEGIN_LABEL,\n-\t\t\t\t   BLOCK_NUMBER (stmt));\n-      add_AT_lbl_id (subr_die, DW_AT_low_pc, label);\n-      ASM_GENERATE_INTERNAL_LABEL (label, BLOCK_END_LABEL,\n-\t\t\t\t   BLOCK_NUMBER (stmt));\n-      add_AT_lbl_id (subr_die, DW_AT_high_pc, label);\n+      add_high_low_attributes (stmt, subr_die);\n+\n       decls_for_scope (stmt, subr_die, depth);\n       current_function_has_inlines = 1;\n     }"}]}