{"sha": "b2a9e89771cf7514b80695411fcee6fcfa3e9805", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJhOWU4OTc3MWNmNzUxNGI4MDY5NTQxMWZjZWU2ZmNmYTNlOTgwNQ==", "commit": {"author": {"name": "Andrew Burgess", "email": "andrew.burgess@embecosm.com", "date": "2016-07-13T22:18:40Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2016-07-13T22:18:40Z"}, "message": "genrecog.c (special_predicate_operand_p): New function.\n\n\t* genrecog.c (special_predicate_operand_p): New function.\n\t(predicate_name): Move function.\n\t(validate_pattern): Don't warn about missing mode for all\n\tdefine_special_predicate predicates.\n\nFrom-SVN: r238314", "tree": {"sha": "9e22df34eba7ed243a8221086e19425a71a62088", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e22df34eba7ed243a8221086e19425a71a62088"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2a9e89771cf7514b80695411fcee6fcfa3e9805", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2a9e89771cf7514b80695411fcee6fcfa3e9805", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2a9e89771cf7514b80695411fcee6fcfa3e9805", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2a9e89771cf7514b80695411fcee6fcfa3e9805/comments", "author": {"login": "T-J-Teru", "id": 475372, "node_id": "MDQ6VXNlcjQ3NTM3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/T-J-Teru", "html_url": "https://github.com/T-J-Teru", "followers_url": "https://api.github.com/users/T-J-Teru/followers", "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}", "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}", "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions", "organizations_url": "https://api.github.com/users/T-J-Teru/orgs", "repos_url": "https://api.github.com/users/T-J-Teru/repos", "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}", "received_events_url": "https://api.github.com/users/T-J-Teru/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "03ef0c6c55ab81002abef62cec430d0496c3a01c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03ef0c6c55ab81002abef62cec430d0496c3a01c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03ef0c6c55ab81002abef62cec430d0496c3a01c"}], "stats": {"total": 57, "additions": 42, "deletions": 15}, "files": [{"sha": "786e899046d8c0c1806d0273a15254eccba4b0c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a9e89771cf7514b80695411fcee6fcfa3e9805/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a9e89771cf7514b80695411fcee6fcfa3e9805/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2a9e89771cf7514b80695411fcee6fcfa3e9805", "patch": "@@ -1,3 +1,10 @@\n+2016-07-13  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* genrecog.c (special_predicate_operand_p): New function.\n+\t(predicate_name): Move function.\n+\t(validate_pattern): Don't warn about missing mode for all\n+\tdefine_special_predicate predicates.\n+\n 2016-07-13  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-vect-data-refs.c (vect_no_alias_p): New function."}, {"sha": "056798c82f7a7719e0a14ccec4156a3f6c21793f", "filename": "gcc/genrecog.c", "status": "modified", "additions": 35, "deletions": 15, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a9e89771cf7514b80695411fcee6fcfa3e9805/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a9e89771cf7514b80695411fcee6fcfa3e9805/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=b2a9e89771cf7514b80695411fcee6fcfa3e9805", "patch": "@@ -463,6 +463,38 @@ constraints_supported_in_insn_p (rtx insn)\n \t   || GET_CODE (insn) == DEFINE_PEEPHOLE2);\n }\n \n+/* Return the name of the predicate matched by MATCH_RTX.  */\n+\n+static const char *\n+predicate_name (rtx match_rtx)\n+{\n+  if (GET_CODE (match_rtx) == MATCH_SCRATCH)\n+    return \"scratch_operand\";\n+  else\n+    return XSTR (match_rtx, 1);\n+}\n+\n+/* Return true if OPERAND is a MATCH_OPERAND using a special predicate\n+   function.  */\n+\n+static bool\n+special_predicate_operand_p (rtx operand)\n+{\n+  if (GET_CODE (operand) == MATCH_OPERAND)\n+    {\n+      const char *pred_name = predicate_name (operand);\n+      if (pred_name[0] != 0)\n+\t{\n+\t  const struct pred_data *pred;\n+\n+\t  pred = lookup_predicate (pred_name);\n+\t  return pred != NULL && pred->special;\n+\t}\n+    }\n+\n+  return false;\n+}\n+\n /* Check for various errors in PATTERN, which is part of INFO.\n    SET is nonnull for a destination, and is the complete set pattern.\n    SET_CODE is '=' for normal sets, and '+' within a context that\n@@ -651,10 +683,9 @@ validate_pattern (rtx pattern, md_rtx_info *info, rtx set, int set_code)\n \tdmode = GET_MODE (dest);\n \tsmode = GET_MODE (src);\n \n-\t/* The mode of an ADDRESS_OPERAND is the mode of the memory\n-\t   reference, not the mode of the address.  */\n-\tif (GET_CODE (src) == MATCH_OPERAND\n-\t    && ! strcmp (XSTR (src, 1), \"address_operand\"))\n+\t/* Mode checking is not performed for special predicates.  */\n+\tif (special_predicate_operand_p (src)\n+\t    || special_predicate_operand_p (dest))\n \t  ;\n \n         /* The operands of a SET must have the same mode unless one\n@@ -3788,17 +3819,6 @@ operator < (const pattern_pos &e1, const pattern_pos &e2)\n   return diff < 0;\n }\n \n-/* Return the name of the predicate matched by MATCH_RTX.  */\n-\n-static const char *\n-predicate_name (rtx match_rtx)\n-{\n-  if (GET_CODE (match_rtx) == MATCH_SCRATCH)\n-    return \"scratch_operand\";\n-  else\n-    return XSTR (match_rtx, 1);\n-}\n-\n /* Add new decisions to S that check whether the rtx at position POS\n    matches PATTERN.  Return the state that is reached in that case.\n    TOP_PATTERN is the overall pattern, as passed to match_pattern_1.  */"}]}