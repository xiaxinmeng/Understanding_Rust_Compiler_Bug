{"sha": "efbe8cc4d958cf71e95cb681b11eaaba7652f3b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZiZThjYzRkOTU4Y2Y3MWU5NWNiNjgxYjExZWFhYmE3NjUyZjNiMg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-12-01T12:02:11Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2020-12-01T17:50:50Z"}, "message": "Resolve the type from an ArrayIndexExpression\n\nAdds new TypeVisitor to resolve Types from the AST via Visitor Pattern, so\nthe element type can be extracted.\n\nAddresses: #27 #55", "tree": {"sha": "44580e0dcc145e62b20bd17826ae2c6e408a0f37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44580e0dcc145e62b20bd17826ae2c6e408a0f37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efbe8cc4d958cf71e95cb681b11eaaba7652f3b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efbe8cc4d958cf71e95cb681b11eaaba7652f3b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efbe8cc4d958cf71e95cb681b11eaaba7652f3b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efbe8cc4d958cf71e95cb681b11eaaba7652f3b2/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "886b230d42e4a326e24f029e673ad1591159f7ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/886b230d42e4a326e24f029e673ad1591159f7ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/886b230d42e4a326e24f029e673ad1591159f7ad"}], "stats": {"total": 299, "additions": 290, "deletions": 9}, "files": [{"sha": "387f7fcda209a57d2640a40d6a2576ad12c72639", "filename": "gcc/rust/analysis/rust-type-resolution.cc", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efbe8cc4d958cf71e95cb681b11eaaba7652f3b2/gcc%2Frust%2Fanalysis%2Frust-type-resolution.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efbe8cc4d958cf71e95cb681b11eaaba7652f3b2/gcc%2Frust%2Fanalysis%2Frust-type-resolution.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-type-resolution.cc?ref=efbe8cc4d958cf71e95cb681b11eaaba7652f3b2", "patch": "@@ -1,5 +1,6 @@\n #include \"rust-type-resolution.h\"\n #include \"rust-diagnostics.h\"\n+#include \"rust-type-visitor.h\"\n \n #define ADD_BUILTIN_TYPE(_X, _S)                                               \\\n   do                                                                           \\\n@@ -470,8 +471,6 @@ TypeResolution::visit (AST::ArrayExpr &expr)\n void\n TypeResolution::visit (AST::ArrayIndexExpr &expr)\n {\n-  printf (\"ArrayIndexExpr: %s\\n\", expr.as_string ().c_str ());\n-\n   auto before = typeBuffer.size ();\n   expr.get_array_expr ()->accept_vis (*this);\n   if (typeBuffer.size () <= before)\n@@ -495,16 +494,20 @@ TypeResolution::visit (AST::ArrayIndexExpr &expr)\n   AST::Type *array_index_type = typeBuffer.back ();\n   typeBuffer.pop_back ();\n \n-  printf (\"Array expr type %s array index expr type: [%s]\\n\",\n-\t  array_expr_type->as_string ().c_str (),\n-\t  array_index_type->as_string ().c_str ());\n-\n-  // the the element type from the array_expr_type and it _must_ be an array\n-  // TODO\n-\n   // check the index_type should be an i32 which should really be\n   // more permissive\n   // TODO\n+\n+  // the the element type from the array_expr_type and it _must_ be an array\n+  AST::ArrayType *resolved = ArrayTypeVisitor::Resolve (array_expr_type);\n+  if (resolved == nullptr)\n+    {\n+      rust_error_at (expr.get_locus_slow (),\n+\t\t     \"unable to resolve type for array expression\");\n+      return;\n+    }\n+\n+  typeBuffer.push_back (resolved->get_element_type ());\n }\n \n void"}, {"sha": "d461b661a998f4e6efce98bb40752d0718ff8b0d", "filename": "gcc/rust/analysis/rust-type-resolution.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efbe8cc4d958cf71e95cb681b11eaaba7652f3b2/gcc%2Frust%2Fanalysis%2Frust-type-resolution.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efbe8cc4d958cf71e95cb681b11eaaba7652f3b2/gcc%2Frust%2Fanalysis%2Frust-type-resolution.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-type-resolution.h?ref=efbe8cc4d958cf71e95cb681b11eaaba7652f3b2", "patch": "@@ -1,3 +1,20 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n #pragma once\n \n #include \"rust-resolution.h\""}, {"sha": "8cfe156782e648d50c30d2d02cbb37eb2d29c6d6", "filename": "gcc/rust/analysis/rust-type-visitor.h", "status": "added", "additions": 261, "deletions": 0, "changes": 261, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efbe8cc4d958cf71e95cb681b11eaaba7652f3b2/gcc%2Frust%2Fanalysis%2Frust-type-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efbe8cc4d958cf71e95cb681b11eaaba7652f3b2/gcc%2Frust%2Fanalysis%2Frust-type-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-type-visitor.h?ref=efbe8cc4d958cf71e95cb681b11eaaba7652f3b2", "patch": "@@ -0,0 +1,261 @@\n+// rust-type-visitor.h -- Rust AST Visitor to AST::Type specific\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_TYPE_VISITOR_H\n+#define RUST_TYPE_VISITOR_H\n+\n+#include \"rust-system.h\"\n+#include \"rust-ast-full.h\"\n+#include \"rust-ast-visitor.h\"\n+#include \"rust-scan.h\"\n+\n+namespace Rust {\n+namespace Analysis {\n+\n+class BaseTypeVisitor : public AST::ASTVisitor\n+{\n+public:\n+  // visitor impl\n+  // rust-ast.h\n+  //  virtual void visit(AttrInput& attr_input);\n+  //  virtual void visit(TokenTree& token_tree);\n+  //  virtual void visit(MacroMatch& macro_match);\n+  virtual void visit (AST::Token &tok) override {}\n+  virtual void visit (AST::DelimTokenTree &delim_tok_tree) override {}\n+  virtual void visit (AST::AttrInputMetaItemContainer &input) override {}\n+  //  virtual void visit(MetaItem& meta_item) override {}\n+  //  void vsit(Stmt& stmt) override {}\n+  //  virtual void visit(Expr& expr) override {}\n+  virtual void visit (AST::IdentifierExpr &ident_expr) override {}\n+  //  virtual void visit(Pattern& pattern) override {}\n+  //  virtual void visit(Type& type) override {}\n+  //  virtual void visit(TypeParamBound& type_param_bound) override {}\n+  virtual void visit (AST::Lifetime &lifetime) override {}\n+  //  virtual void visit(GenericParam& generic_param) override {}\n+  virtual void visit (AST::LifetimeParam &lifetime_param) override {}\n+  //  virtual void visit(TraitItem& trait_item) override {}\n+  //  virtual void visit(InherentImplItem& inherent_impl_item) override {}\n+  //  virtual void visit(TraitImplItem& trait_impl_item) override {}\n+  virtual void visit (AST::MacroInvocationSemi &macro) override {}\n+\n+  // rust-path.h\n+  virtual void visit (AST::PathInExpression &path) override {}\n+  virtual void visit (AST::TypePathSegment &segment) override {}\n+  virtual void visit (AST::TypePathSegmentGeneric &segment) override {}\n+  virtual void visit (AST::TypePathSegmentFunction &segment) override {}\n+  virtual void visit (AST::TypePath &path) override {}\n+  virtual void visit (AST::QualifiedPathInExpression &path) override {}\n+  virtual void visit (AST::QualifiedPathInType &path) override {}\n+\n+  // rust-expr.h\n+  virtual void visit (AST::LiteralExpr &expr) override {}\n+  virtual void visit (AST::AttrInputLiteral &attr_input) override {}\n+  virtual void visit (AST::MetaItemLitExpr &meta_item) override {}\n+  virtual void visit (AST::MetaItemPathLit &meta_item) override {}\n+  virtual void visit (AST::BorrowExpr &expr) override {}\n+  virtual void visit (AST::DereferenceExpr &expr) override {}\n+  virtual void visit (AST::ErrorPropagationExpr &expr) override {}\n+  virtual void visit (AST::NegationExpr &expr) override {}\n+  virtual void visit (AST::ArithmeticOrLogicalExpr &expr) override {}\n+  virtual void visit (AST::ComparisonExpr &expr) override {}\n+  virtual void visit (AST::LazyBooleanExpr &expr) override {}\n+  virtual void visit (AST::TypeCastExpr &expr) override {}\n+  virtual void visit (AST::AssignmentExpr &expr) override {}\n+  virtual void visit (AST::CompoundAssignmentExpr &expr) override {}\n+  virtual void visit (AST::GroupedExpr &expr) override {}\n+  //  virtual void visit(ArrayElems& elems) override {}\n+  virtual void visit (AST::ArrayElemsValues &elems) override {}\n+  virtual void visit (AST::ArrayElemsCopied &elems) override {}\n+  virtual void visit (AST::ArrayExpr &expr) override {}\n+  virtual void visit (AST::ArrayIndexExpr &expr) override {}\n+  virtual void visit (AST::TupleExpr &expr) override {}\n+  virtual void visit (AST::TupleIndexExpr &expr) override {}\n+  virtual void visit (AST::StructExprStruct &expr) override {}\n+  //  virtual void visit(StructExprField& field) override {}\n+  virtual void visit (AST::StructExprFieldIdentifier &field) override {}\n+  virtual void visit (AST::StructExprFieldIdentifierValue &field) override {}\n+  virtual void visit (AST::StructExprFieldIndexValue &field) override {}\n+  virtual void visit (AST::StructExprStructFields &expr) override {}\n+  virtual void visit (AST::StructExprStructBase &expr) override {}\n+  virtual void visit (AST::StructExprTuple &expr) override {}\n+  virtual void visit (AST::StructExprUnit &expr) override {}\n+  //  virtual void visit(EnumExprField& field) override {}\n+  virtual void visit (AST::EnumExprFieldIdentifier &field) override {}\n+  virtual void visit (AST::EnumExprFieldIdentifierValue &field) override {}\n+  virtual void visit (AST::EnumExprFieldIndexValue &field) override {}\n+  virtual void visit (AST::EnumExprStruct &expr) override {}\n+  virtual void visit (AST::EnumExprTuple &expr) override {}\n+  virtual void visit (AST::EnumExprFieldless &expr) override {}\n+  virtual void visit (AST::CallExpr &expr) override {}\n+  virtual void visit (AST::MethodCallExpr &expr) override {}\n+  virtual void visit (AST::FieldAccessExpr &expr) override {}\n+  virtual void visit (AST::ClosureExprInner &expr) override {}\n+  virtual void visit (AST::BlockExpr &expr) override {}\n+  virtual void visit (AST::ClosureExprInnerTyped &expr) override {}\n+  virtual void visit (AST::ContinueExpr &expr) override {}\n+  virtual void visit (AST::BreakExpr &expr) override {}\n+  virtual void visit (AST::RangeFromToExpr &expr) override {}\n+  virtual void visit (AST::RangeFromExpr &expr) override {}\n+  virtual void visit (AST::RangeToExpr &expr) override {}\n+  virtual void visit (AST::RangeFullExpr &expr) override {}\n+  virtual void visit (AST::RangeFromToInclExpr &expr) override {}\n+  virtual void visit (AST::RangeToInclExpr &expr) override {}\n+  virtual void visit (AST::ReturnExpr &expr) override {}\n+  virtual void visit (AST::UnsafeBlockExpr &expr) override {}\n+  virtual void visit (AST::LoopExpr &expr) override {}\n+  virtual void visit (AST::WhileLoopExpr &expr) override {}\n+  virtual void visit (AST::WhileLetLoopExpr &expr) override {}\n+  virtual void visit (AST::ForLoopExpr &expr) override {}\n+  virtual void visit (AST::IfExpr &expr) override {}\n+  virtual void visit (AST::IfExprConseqElse &expr) override {}\n+  virtual void visit (AST::IfExprConseqIf &expr) override {}\n+  virtual void visit (AST::IfExprConseqIfLet &expr) override {}\n+  virtual void visit (AST::IfLetExpr &expr) override {}\n+  virtual void visit (AST::IfLetExprConseqElse &expr) override {}\n+  virtual void visit (AST::IfLetExprConseqIf &expr) override {}\n+  virtual void visit (AST::IfLetExprConseqIfLet &expr) override {}\n+  //  virtual void visit(MatchCase& match_case) override {}\n+  // virtual void visit (AST::MatchCaseBlockExpr &match_case) override {}\n+  // virtual void visit (AST::MatchCaseExpr &match_case) override {}\n+  virtual void visit (AST::MatchExpr &expr) override {}\n+  virtual void visit (AST::AwaitExpr &expr) override {}\n+  virtual void visit (AST::AsyncBlockExpr &expr) override {}\n+\n+  // rust-item.h\n+  virtual void visit (AST::TypeParam &param) override {}\n+  //  virtual void visit(WhereClauseItem& item) override {}\n+  virtual void visit (AST::LifetimeWhereClauseItem &item) override {}\n+  virtual void visit (AST::TypeBoundWhereClauseItem &item) override {}\n+  virtual void visit (AST::Method &method) override {}\n+  virtual void visit (AST::ModuleBodied &module) override {}\n+  virtual void visit (AST::ModuleNoBody &module) override {}\n+  virtual void visit (AST::ExternCrate &crate) override {}\n+  //  virtual void visit(UseTree& use_tree) override {}\n+  virtual void visit (AST::UseTreeGlob &use_tree) override {}\n+  virtual void visit (AST::UseTreeList &use_tree) override {}\n+  virtual void visit (AST::UseTreeRebind &use_tree) override {}\n+  virtual void visit (AST::UseDeclaration &use_decl) override {}\n+  virtual void visit (AST::Function &function) override {}\n+  virtual void visit (AST::TypeAlias &type_alias) override {}\n+  virtual void visit (AST::StructStruct &struct_item) override {}\n+  virtual void visit (AST::TupleStruct &tuple_struct) override {}\n+  virtual void visit (AST::EnumItem &item) override {}\n+  virtual void visit (AST::EnumItemTuple &item) override {}\n+  virtual void visit (AST::EnumItemStruct &item) override {}\n+  virtual void visit (AST::EnumItemDiscriminant &item) override {}\n+  virtual void visit (AST::Enum &enum_item) override {}\n+  virtual void visit (AST::Union &union_item) override {}\n+  virtual void visit (AST::ConstantItem &const_item) override {}\n+  virtual void visit (AST::StaticItem &static_item) override {}\n+  virtual void visit (AST::TraitItemFunc &item) override {}\n+  virtual void visit (AST::TraitItemMethod &item) override {}\n+  virtual void visit (AST::TraitItemConst &item) override {}\n+  virtual void visit (AST::TraitItemType &item) override {}\n+  virtual void visit (AST::Trait &trait) override {}\n+  virtual void visit (AST::InherentImpl &impl) override {}\n+  virtual void visit (AST::TraitImpl &impl) override {}\n+  //  virtual void visit(ExternalItem& item) override {}\n+  virtual void visit (AST::ExternalStaticItem &item) override {}\n+  virtual void visit (AST::ExternalFunctionItem &item) override {}\n+  virtual void visit (AST::ExternBlock &block) override {}\n+\n+  // rust-macro.h\n+  virtual void visit (AST::MacroMatchFragment &match) override {}\n+  virtual void visit (AST::MacroMatchRepetition &match) override {}\n+  virtual void visit (AST::MacroMatcher &matcher) override {}\n+  virtual void visit (AST::MacroRulesDefinition &rules_def) override {}\n+  virtual void visit (AST::MacroInvocation &macro_invoc) override {}\n+  virtual void visit (AST::MetaItemPath &meta_item) override {}\n+  virtual void visit (AST::MetaItemSeq &meta_item) override {}\n+  virtual void visit (AST::MetaWord &meta_item) override {}\n+  virtual void visit (AST::MetaNameValueStr &meta_item) override {}\n+  virtual void visit (AST::MetaListPaths &meta_item) override {}\n+  virtual void visit (AST::MetaListNameValueStr &meta_item) override {}\n+\n+  // rust-pattern.h\n+  virtual void visit (AST::LiteralPattern &pattern) override {}\n+  virtual void visit (AST::IdentifierPattern &pattern) override {}\n+  virtual void visit (AST::WildcardPattern &pattern) override {}\n+  //  virtual void visit(RangePatternBound& bound) override {}\n+  virtual void visit (AST::RangePatternBoundLiteral &bound) override {}\n+  virtual void visit (AST::RangePatternBoundPath &bound) override {}\n+  virtual void visit (AST::RangePatternBoundQualPath &bound) override {}\n+  virtual void visit (AST::RangePattern &pattern) override {}\n+  virtual void visit (AST::ReferencePattern &pattern) override {}\n+  //  virtual void visit(StructPatternField& field) override {}\n+  virtual void visit (AST::StructPatternFieldTuplePat &field) override {}\n+  virtual void visit (AST::StructPatternFieldIdentPat &field) override {}\n+  virtual void visit (AST::StructPatternFieldIdent &field) override {}\n+  virtual void visit (AST::StructPattern &pattern) override {}\n+  //  virtual void visit(TupleStructItems& tuple_items) override {}\n+  virtual void visit (AST::TupleStructItemsNoRange &tuple_items) override {}\n+  virtual void visit (AST::TupleStructItemsRange &tuple_items) override {}\n+  virtual void visit (AST::TupleStructPattern &pattern) override {}\n+  //  virtual void visit(TuplePatternItems& tuple_items) override {}\n+  virtual void visit (AST::TuplePatternItemsMultiple &tuple_items) override {}\n+  virtual void visit (AST::TuplePatternItemsRanged &tuple_items) override {}\n+  virtual void visit (AST::TuplePattern &pattern) override {}\n+  virtual void visit (AST::GroupedPattern &pattern) override {}\n+  virtual void visit (AST::SlicePattern &pattern) override {}\n+\n+  // rust-stmt.h\n+  virtual void visit (AST::EmptyStmt &stmt) override {}\n+  virtual void visit (AST::LetStmt &stmt) override {}\n+  virtual void visit (AST::ExprStmtWithoutBlock &stmt) override {}\n+  virtual void visit (AST::ExprStmtWithBlock &stmt) override {}\n+\n+  // rust-type.h\n+  virtual void visit (AST::TraitBound &bound) override {}\n+  virtual void visit (AST::ImplTraitType &type) override {}\n+  virtual void visit (AST::TraitObjectType &type) override {}\n+  virtual void visit (AST::ParenthesisedType &type) override {}\n+  virtual void visit (AST::ImplTraitTypeOneBound &type) override {}\n+  virtual void visit (AST::TraitObjectTypeOneBound &type) override {}\n+  virtual void visit (AST::TupleType &type) override {}\n+  virtual void visit (AST::NeverType &type) override {}\n+  virtual void visit (AST::RawPointerType &type) override {}\n+  virtual void visit (AST::ReferenceType &type) override {}\n+  virtual void visit (AST::ArrayType &type) override {}\n+  virtual void visit (AST::SliceType &type) override {}\n+  virtual void visit (AST::InferredType &type) override {}\n+  virtual void visit (AST::BareFunctionType &type) override {}\n+};\n+\n+class ArrayTypeVisitor : public BaseTypeVisitor\n+{\n+public:\n+  static AST::ArrayType *Resolve (AST::Type *type)\n+  {\n+    ArrayTypeVisitor vis;\n+    type->accept_vis (vis);\n+    return vis.resolved;\n+  }\n+\n+  virtual void visit (AST::ArrayType &type) override { resolved = &type; };\n+\n+private:\n+  ArrayTypeVisitor () : resolved (nullptr) {}\n+\n+  AST::ArrayType *resolved;\n+};\n+\n+} // namespace Analysis\n+} // namespace Rust\n+\n+#endif // RUST_TYPE_VISITOR_H"}]}