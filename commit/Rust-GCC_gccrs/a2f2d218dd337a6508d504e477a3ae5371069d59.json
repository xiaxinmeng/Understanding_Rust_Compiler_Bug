{"sha": "a2f2d218dd337a6508d504e477a3ae5371069d59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJmMmQyMThkZDMzN2E2NTA4ZDUwNGU0NzdhM2FlNTM3MTA2OWQ1OQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-05-04T11:01:34Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-05-04T11:01:34Z"}, "message": "re PR target/48496 ('asm' operand requires impossible reload)\n\n\tPR target/48496\n\t* recog.c (constrain_operands): If extra constraints are present, also\n\taccept pseudo-registers with equivalent memory locations during reload.\n\nFrom-SVN: r187150", "tree": {"sha": "ff51844afb0d248a98556451ecbb9b1c3a056a0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff51844afb0d248a98556451ecbb9b1c3a056a0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2f2d218dd337a6508d504e477a3ae5371069d59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2f2d218dd337a6508d504e477a3ae5371069d59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2f2d218dd337a6508d504e477a3ae5371069d59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2f2d218dd337a6508d504e477a3ae5371069d59/comments", "author": null, "committer": null, "parents": [{"sha": "9178a345850d1c35cc1fe2bed529a8a0029c4251", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9178a345850d1c35cc1fe2bed529a8a0029c4251", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9178a345850d1c35cc1fe2bed529a8a0029c4251"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "783ee345d3ebe2a2a7903ce26aceaa5a4cacde4d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f2d218dd337a6508d504e477a3ae5371069d59/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f2d218dd337a6508d504e477a3ae5371069d59/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2f2d218dd337a6508d504e477a3ae5371069d59", "patch": "@@ -1,3 +1,9 @@\n+2012-05-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/48496\n+\t* recog.c (constrain_operands): If extra constraints are present, also\n+\taccept pseudo-registers with equivalent memory locations during reload.\n+\n 2012-05-04  Olivier Hainque  <hainque@adacore.com>\n \n \t* collect2.c (may_unlink_output_file): New global."}, {"sha": "3f6bc545fb41a5a854037cc2e78209d69d4d069a", "filename": "gcc/recog.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f2d218dd337a6508d504e477a3ae5371069d59/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f2d218dd337a6508d504e477a3ae5371069d59/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=a2f2d218dd337a6508d504e477a3ae5371069d59", "patch": "@@ -2680,6 +2680,16 @@ constrain_operands (int strict)\n \t\t\t   /* Every address operand can be reloaded to fit.  */\n \t\t\t   && strict < 0)\n \t\t    win = 1;\n+\t\t  /* Cater to architectures like IA-64 that define extra memory\n+\t\t     constraints without using define_memory_constraint.  */\n+\t\t  else if (reload_in_progress\n+\t\t\t   && REG_P (op)\n+\t\t\t   && REGNO (op) >= FIRST_PSEUDO_REGISTER\n+\t\t\t   && reg_renumber[REGNO (op)] < 0\n+\t\t\t   && reg_equiv_mem (REGNO (op)) != 0\n+\t\t\t   && EXTRA_CONSTRAINT_STR\n+\t\t\t      (reg_equiv_mem (REGNO (op)), c, p))\n+\t\t    win = 1;\n #endif\n \t\t  break;\n \t\t}"}, {"sha": "7036381b0acd07ff663c2b8e88eb72f52dedf8b6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f2d218dd337a6508d504e477a3ae5371069d59/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f2d218dd337a6508d504e477a3ae5371069d59/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a2f2d218dd337a6508d504e477a3ae5371069d59", "patch": "@@ -1,3 +1,8 @@\n+2012-05-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.target/ia64/pr48496.c: New test.\n+\t* gcc.target/ia64/pr52657.c: Likewise.\n+\n 2012-05-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c/51712"}, {"sha": "6e604336adb74d077cc178b826912d6d865a01d6", "filename": "gcc/testsuite/gcc.target/ia64/pr48496.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f2d218dd337a6508d504e477a3ae5371069d59/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fpr48496.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f2d218dd337a6508d504e477a3ae5371069d59/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fpr48496.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fpr48496.c?ref=a2f2d218dd337a6508d504e477a3ae5371069d59", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef unsigned int UINT64 __attribute__((__mode__(__DI__)));\n+\n+typedef struct\n+{\n+  UINT64 x[2] __attribute__((aligned(16)));\n+} fpreg;\n+\n+struct ia64_args\n+{\n+  fpreg fp_regs[8];\n+  UINT64 gp_regs[8];\n+};\n+\n+ffi_call(long i, long gpcount, long fpcount, void **avalue)\n+{\n+  struct ia64_args *stack;\n+  stack = __builtin_alloca (64);\n+  asm (\"stf.spill %0 = %1%P0\" : \"=m\" (*&stack->fp_regs[fpcount++])\n+                              : \"f\"(*(double *)avalue[i]));\n+  stack->gp_regs[gpcount++] = *(UINT64 *)avalue[i];\n+}"}, {"sha": "8db5881985e00241fdf5d4c3a1eecb4241f0e354", "filename": "gcc/testsuite/gcc.target/ia64/pr52657.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f2d218dd337a6508d504e477a3ae5371069d59/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fpr52657.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f2d218dd337a6508d504e477a3ae5371069d59/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fpr52657.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fpr52657.c?ref=a2f2d218dd337a6508d504e477a3ae5371069d59", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+typedef unsigned long int mp_limb_t;\n+\n+typedef struct\n+{\n+  int _mp_alloc;\n+  int _mp_size;\n+  mp_limb_t *_mp_d;\n+} __mpz_struct;\n+\n+typedef __mpz_struct mpz_t[1];\n+typedef mp_limb_t * mp_ptr;\n+typedef const mp_limb_t * mp_srcptr;\n+typedef long int mp_size_t;\n+\n+extern mp_limb_t __gmpn_addmul_2 (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr);\n+\n+void\n+__gmpn_redc_2 (mp_ptr rp, mp_ptr up, mp_srcptr mp, mp_size_t n, mp_srcptr mip)\n+{\n+  mp_limb_t q[2];\n+  mp_size_t j;\n+  mp_limb_t upn;\n+\n+  for (j = n - 2; j >= 0; j -= 2)\n+    {\n+      mp_limb_t _ph, _pl;\n+      __asm__ (\"xma.hu %0 = %3, %5, f0\\n\\t\"\n+               \"xma.l %1 = %3, %5, f0\\n\\t\"\n+               \";;\\n\\t\"\n+               \"xma.l %0 = %3, %4, %0\\n\\t\"\n+               \";;\\n\\t\"\n+               \"xma.l %0 = %2, %5, %0\"\n+               : \"=&f\" (q[1]), \"=&f\" (q[0])\n+               : \"f\" (mip[1]), \"f\" (mip[0]), \"f\" (up[1]), \"f\" (up[0]));\n+      upn = up[n];\n+      up[1] = __gmpn_addmul_2 (up, mp, n, q);\n+      up[0] = up[n];\n+      up[n] = upn;\n+      up += 2;\n+    }\n+}"}]}