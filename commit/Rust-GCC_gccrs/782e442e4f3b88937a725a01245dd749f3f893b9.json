{"sha": "782e442e4f3b88937a725a01245dd749f3f893b9", "node_id": "C_kwDOANBUbNoAKDc4MmU0NDJlNGYzYjg4OTM3YTcyNWEwMTI0NWRkNzQ5ZjNmODkzYjk", "commit": {"author": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2023-02-23T06:08:21Z"}, "committer": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2023-02-23T09:30:22Z"}, "message": "xtensa: fix PR target/108876\n\nIn commit b2ef02e8cbbaf95fee98be255f697f47193960ec, the sibling call\ninsn included (use (reg:SI A0_REG)) to fix the problem, which added\na USE chain unconditionally to the data flow of register A0 during\nthe sibling call.\n\nAs a result, df_regs_ever_live_p (A0_REG) returns true, so even if\nregister A0 is not used outside of the sibling call insn, saves and\nrestores to stack slots are emitted in pro/epilogue, and finally\ncode size increases.\n(This is why I never included (use A0) in sibling calls)\n\n    /* example */\n    extern int foo(int);\n    int test(int a) {\n      return foo(a * 3 + 1);\n    }\n\n;; before\n    test:\n\taddi\tsp, sp, -16\t;; unneeded stack frame allocation (induced)\n\ts32i.n\ta0, sp, 12\t;; unneeded saving of register A0\n\tl32i.n\ta0, sp, 12\t;; unneeded restoration of register A0\n\taddx2\ta2, a2, a2\n\taddi.n\ta2, a2, 1\n\taddi\tsp, sp, 16\t;; unneeded stack frame freeing (induced)\n\tj.l\tfoo, a9\t\t;; sibling call (truly needs register A0)\n\nThe essential cause is that we emit (use A0) *before* the insns that\ndoes the stack pointer adjustment during epilogue expansion, so the\nliveness of register A0 ends early, so register A0 is reused afterwards.\n\nThis patch fixes the problem and avoids such regression by doing the\nemit of (use A0) in the sibling call epilogue expansion at the end.\n\n;; after\ntest:\n\taddx2\ta2, a2, a2\n\taddi.n\ta2, a2, 1\n\tj.l\tfoo, a9\n\n>From RTL-pass \"315r.rnreg\" by\n\"gfortran -O3 -funroll-loops -mabi=call0 -S -da gcc-gnu/gcc/testsuite/gfortran.dg/allocate_with_source_5.f90\":\n\n    ;; Function selector_init (__selectors_MOD_selector_init, funcdef_no=2, decl_uid=987, cgraph_uid=3, symbol_order=4)\n    ...\n    (insn 3807 3806 3808 121 (set (reg:SI 15 a15)\n            (mem/c:SI (plus:SI (reg/f:SI 1 sp)\n                    (const_int 268 [0x10c])) [31  S4 A32])) \"gcc-gnu/gcc/testsuite/gfortran.dg/allocate_with_source_5.f90\":35:30 53 {movsi_internal}\n         (nil))\n    (insn 3808 3807 3809 121 (set (reg:SI 7 a7)\n            (const_int 288 [0x120])) \"gcc-gnu/gcc/testsuite/gfortran.dg/allocate_with_source_5.f90\":35:30 53 {movsi_internal}\n         (nil))\n    (insn 3809 3808 3810 121 (set (reg/f:SI 1 sp)\n            (plus:SI (reg/f:SI 1 sp)\n                (reg:SI 7 a7))) \"gcc-gnu/gcc/testsuite/gfortran.dg/allocate_with_source_5.f90\":35:30 1 {addsi3}\n         (expr_list:REG_DEAD (reg:SI 9 a9)\n            (nil)))\n    (insn 3810 3809 721 121 (use (reg:SI 0 a0)) \"gcc-gnu/gcc/testsuite/gfortran.dg/allocate_with_source_5.f90\":35:30 -1\n         (expr_list:REG_DEAD (reg:SI 0 a0)\n            (nil)))\n    (call_insn/j 721 3810 722 121 (call (mem:SI (symbol_ref:SI (\"free\") [flags 0x41]  <function_decl 0x7f7c885f6000 __builtin_free>) [0 __builtin_free S4 A32])\n            (const_int 0 [0])) \"gcc-gnu/gcc/testsuite/gfortran.dg/allocate_with_source_5.f90\":35:30 discrim 1 106 {sibcall_internal}\n         (expr_list:REG_DEAD (reg:SI 2 a2)\n            (expr_list:REG_CALL_DECL (symbol_ref:SI (\"free\") [flags 0x41]  <function_decl 0x7f7c885f6000 __builtin_free>)\n                (expr_list:REG_EH_REGION (const_int 0 [0])\n                    (nil))))\n        (expr_list:SI (use (reg:SI 2 a2))\n            (nil)))\n\n(IMHO the \"rnreg\" pass doesn't take REG_ALLOC_ORDER into account;\nit just seems to allocate registers in fixed_regs index order,\nwhich may have hurt register A0 that became allocatable in the recent\npatch)\n\ngcc/ChangeLog:\n\tPR target/108876\n\n\t* config/xtensa/xtensa.cc (xtensa_expand_epilogue):\n\tEmit (use (reg:SI A0_REG)) at the end in the sibling call\n\t(i.e. the same place as (return) in the normal call).", "tree": {"sha": "a8ec6b3ce2413423834f538b261629049cea68b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8ec6b3ce2413423834f538b261629049cea68b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/782e442e4f3b88937a725a01245dd749f3f893b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/782e442e4f3b88937a725a01245dd749f3f893b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/782e442e4f3b88937a725a01245dd749f3f893b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/782e442e4f3b88937a725a01245dd749f3f893b9/comments", "author": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c3191de2a82a406200dab364c49a571a80db0af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c3191de2a82a406200dab364c49a571a80db0af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c3191de2a82a406200dab364c49a571a80db0af"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "b80eef5c19ef5e0724f846687b42130f13cea4a7", "filename": "gcc/config/xtensa/xtensa.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782e442e4f3b88937a725a01245dd749f3f893b9/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782e442e4f3b88937a725a01245dd749f3f893b9/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc?ref=782e442e4f3b88937a725a01245dd749f3f893b9", "patch": "@@ -3548,8 +3548,6 @@ xtensa_expand_epilogue (bool sibcall_p)\n \t\t\t      gen_frame_mem (SImode, x));\n \t    }\n \t}\n-      if (sibcall_p)\n-\temit_use (gen_rtx_REG (SImode, A0_REG));\n \n       if (cfun->machine->current_frame_size > 0)\n \t{\n@@ -3575,7 +3573,9 @@ xtensa_expand_epilogue (bool sibcall_p)\n \t\t\t\t  EH_RETURN_STACKADJ_RTX));\n     }\n   cfun->machine->epilogue_done = true;\n-  if (!sibcall_p)\n+  if (sibcall_p)\n+    emit_use (gen_rtx_REG (SImode, A0_REG));\n+  else\n     emit_jump_insn (gen_return ());\n }\n "}]}