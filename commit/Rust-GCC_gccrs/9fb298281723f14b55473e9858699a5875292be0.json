{"sha": "9fb298281723f14b55473e9858699a5875292be0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZiMjk4MjgxNzIzZjE0YjU1NDczZTk4NTg2OTlhNTg3NTI5MmJlMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-11-13T23:51:42Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-11-13T23:51:42Z"}, "message": "cmath (atan2, [...]): Simplify constraining on the return type.\n\n2011-11-13  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/c_global/cmath (atan2, fmod, pow, copysign, fdim,\n\tfma, fmax, fmin, hypot, nextafter, remainder, remquo): Simplify\n\tconstraining on the return type.\n\t* include/tr1/cmath (copysign, fdim, fma, fmax, fmin, hypot,\n\tnextafter, remainder, remquo): Likewise.\n\nFrom-SVN: r181341", "tree": {"sha": "6ca67dded89df69c1e6da599a96eece1a04f3a31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ca67dded89df69c1e6da599a96eece1a04f3a31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fb298281723f14b55473e9858699a5875292be0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fb298281723f14b55473e9858699a5875292be0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fb298281723f14b55473e9858699a5875292be0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fb298281723f14b55473e9858699a5875292be0/comments", "author": null, "committer": null, "parents": [{"sha": "f36348b34b4513bc127d1b740e48b72b69f17c01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f36348b34b4513bc127d1b740e48b72b69f17c01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f36348b34b4513bc127d1b740e48b72b69f17c01"}], "stats": {"total": 135, "additions": 30, "deletions": 105}, "files": [{"sha": "6e506bac8a7fe97a2e98194b70a49695cff318e8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb298281723f14b55473e9858699a5875292be0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb298281723f14b55473e9858699a5875292be0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9fb298281723f14b55473e9858699a5875292be0", "patch": "@@ -1,3 +1,11 @@\n+2011-11-13  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/c_global/cmath (atan2, fmod, pow, copysign, fdim,\n+\tfma, fmax, fmin, hypot, nextafter, remainder, remquo): Simplify\n+\tconstraining on the return type.\n+\t* include/tr1/cmath (copysign, fdim, fma, fmax, fmin, hypot,\n+\tnextafter, remainder, remquo): Likewise.\n+\n 2011-11-13  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* using.xml: Use GNU/Linux."}, {"sha": "cd29f3d8ad5000448223ab7f612e7833ee2ab223", "filename": "libstdc++-v3/include/c_global/cmath", "status": "modified", "additions": 13, "deletions": 59, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb298281723f14b55473e9858699a5875292be0/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb298281723f14b55473e9858699a5875292be0/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath?ref=9fb298281723f14b55473e9858699a5875292be0", "patch": "@@ -173,10 +173,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp, typename _Up>\n     inline _GLIBCXX_CONSTEXPR\n-    typename __gnu_cxx::__promote_2<\n-    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n-\t\t\t\t    && __is_arithmetic<_Up>::__value,\n-\t\t\t\t    _Tp>::__type, _Up>::__type\n+    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n     atan2(_Tp __y, _Up __x)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -311,10 +308,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp, typename _Up>\n     inline _GLIBCXX_CONSTEXPR\n-    typename __gnu_cxx::__promote_2<\n-    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n-\t\t\t\t    && __is_arithmetic<_Up>::__value,\n-\t\t\t\t    _Tp>::__type, _Up>::__type\n+    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n     fmod(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -439,10 +433,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp, typename _Up>\n     inline _GLIBCXX_CONSTEXPR\n-    typename __gnu_cxx::__promote_2<\n-    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n-\t\t\t\t    && __is_arithmetic<_Up>::__value,\n-\t\t\t\t    _Tp>::__type, _Up>::__type\n+    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n     pow(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -1256,11 +1247,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_copysignl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    constexpr\n-    typename __gnu_cxx::__promote_2<\n-    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n-\t\t\t\t    && __is_arithmetic<_Up>::__value,\n-\t\t\t\t    _Tp>::__type, _Up>::__type\n+    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n     copysign(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -1332,11 +1319,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_fdiml(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    constexpr\n-    typename __gnu_cxx::__promote_2<\n-    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n-\t\t\t\t    && __is_arithmetic<_Up>::__value,\n-\t\t\t\t    _Tp>::__type, _Up>::__type\n+    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n     fdim(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -1352,12 +1335,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_fmal(__x, __y, __z); }\n \n   template<typename _Tp, typename _Up, typename _Vp>\n-    constexpr\n-    typename __gnu_cxx::__promote_3<\n-    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n-\t\t\t\t    && __is_arithmetic<_Up>::__value\n-\t\t\t\t    && __is_arithmetic<_Vp>::__value,\n-\t\t\t\t    _Tp>::__type, _Up, _Vp>::__type\n+    constexpr typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type\n     fma(_Tp __x, _Up __y, _Vp __z)\n     {\n       typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;\n@@ -1373,11 +1351,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_fmaxl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    constexpr\n-    typename __gnu_cxx::__promote_2<\n-    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n-\t\t\t\t    && __is_arithmetic<_Up>::__value,\n-\t\t\t\t    _Tp>::__type, _Up>::__type\n+    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n     fmax(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -1393,11 +1367,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_fminl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    constexpr\n-    typename __gnu_cxx::__promote_2<\n-    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n-\t\t\t\t    && __is_arithmetic<_Up>::__value,\n-\t\t\t\t    _Tp>::__type, _Up>::__type\n+    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n     fmin(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -1413,12 +1383,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_hypotl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    constexpr\n-    typename __gnu_cxx::__promote_2<\n-    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n-\t\t\t\t    && __is_arithmetic<_Up>::__value,\n-\t\t\t\t    _Tp>::__type, _Up>::__type\n-     hypot(_Tp __x, _Up __y)\n+    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n+    hypot(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n       return hypot(__type(__x), __type(__y));\n@@ -1575,11 +1541,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_nextafterl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    constexpr\n-    typename __gnu_cxx::__promote_2<\n-    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n-\t\t\t\t    && __is_arithmetic<_Up>::__value,\n-\t\t\t\t    _Tp>::__type, _Up>::__type\n+    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n     nextafter(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -1609,11 +1571,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_remainderl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    constexpr\n-    typename __gnu_cxx::__promote_2<\n-    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n-\t\t\t\t    && __is_arithmetic<_Up>::__value,\n-\t\t\t\t    _Tp>::__type, _Up>::__type\n+    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n     remainder(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -1629,11 +1587,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_remquol(__x, __y, __pquo); }\n \n   template<typename _Tp, typename _Up>\n-    constexpr\n-    typename __gnu_cxx::__promote_2<\n-    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n-\t\t\t\t    && __is_arithmetic<_Up>::__value,\n-\t\t\t\t    _Tp>::__type, _Up>::__type\n+    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n     remquo(_Tp __x, _Up __y, int* __pquo)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;"}, {"sha": "e702bee16fa175f9cdceb9ed6987a1020aeb2177", "filename": "libstdc++-v3/include/tr1/cmath", "status": "modified", "additions": 9, "deletions": 46, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb298281723f14b55473e9858699a5875292be0/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb298281723f14b55473e9858699a5875292be0/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath?ref=9fb298281723f14b55473e9858699a5875292be0", "patch": "@@ -492,11 +492,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_copysignl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline\n-    typename __gnu_cxx::__promote_2<\n-    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n-\t\t\t\t    && __is_arithmetic<_Up>::__value,\n-\t\t\t\t    _Tp>::__type, _Up>::__type\n+    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n     copysign(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -597,11 +593,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_fdiml(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline\n-    typename __gnu_cxx::__promote_2<\n-    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n-\t\t\t\t    && __is_arithmetic<_Up>::__value,\n-\t\t\t\t    _Tp>::__type, _Up>::__type\n+    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n     fdim(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -619,12 +611,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_fmal(__x, __y, __z); }\n \n   template<typename _Tp, typename _Up, typename _Vp>\n-    inline\n-    typename __gnu_cxx::__promote_3<\n-    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n-\t\t\t\t    && __is_arithmetic<_Up>::__value\n-\t\t\t\t    && __is_arithmetic<_Vp>::__value,\n-\t\t\t\t    _Tp>::__type, _Up, _Vp>::__type\n+    inline typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type\n     fma(_Tp __x, _Up __y, _Vp __z)\n     {\n       typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;\n@@ -640,11 +627,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_fmaxl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline\n-    typename __gnu_cxx::__promote_2<\n-    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n-\t\t\t\t    && __is_arithmetic<_Up>::__value,\n-\t\t\t\t    _Tp>::__type, _Up>::__type\n+    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n     fmax(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -660,11 +643,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_fminl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline\n-    typename __gnu_cxx::__promote_2<\n-    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n-\t\t\t\t    && __is_arithmetic<_Up>::__value,\n-\t\t\t\t    _Tp>::__type, _Up>::__type\n+    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n     fmin(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -683,11 +662,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_hypotl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline\n-    typename __gnu_cxx::__promote_2<\n-    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n-\t\t\t\t    && __is_arithmetic<_Up>::__value,\n-\t\t\t\t    _Tp>::__type, _Up>::__type\n+    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n     hypot(_Tp __y, _Up __x)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -851,11 +826,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_nextafterl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline\n-    typename __gnu_cxx::__promote_2<\n-    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n-\t\t\t\t    && __is_arithmetic<_Up>::__value,\n-\t\t\t\t    _Tp>::__type, _Up>::__type\n+    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n     nextafter(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -889,11 +860,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_remainderl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline\n-    typename __gnu_cxx::__promote_2<\n-    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n-\t\t\t\t    && __is_arithmetic<_Up>::__value,\n-\t\t\t\t    _Tp>::__type, _Up>::__type\n+    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n     remainder(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -909,11 +876,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_remquol(__x, __y, __pquo); }\n \n   template<typename _Tp, typename _Up>\n-    inline\n-    typename __gnu_cxx::__promote_2<\n-    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n-\t\t\t\t    && __is_arithmetic<_Up>::__value,\n-\t\t\t\t    _Tp>::__type, _Up>::__type\n+    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n     remquo(_Tp __x, _Up __y, int* __pquo)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;"}]}