{"sha": "5815f92a08bb7e03c83e3592e93ea2470067148c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgxNWY5MmEwOGJiN2UwM2M4M2UzNTkyZTkzZWEyNDcwMDY3MTQ4Yw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2019-12-18T07:15:52Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-12-18T07:15:52Z"}, "message": "[Ada] Simplify Big_Integer and Big_Real interface\n\n2019-12-18  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/a-nbnbin.ads, libgnat/a-nbnbin.adb,\n\tlibgnat/a-nbnbre.ads, libgnat/a-nbnbre.adb: Replace\n\tOptional_Big_* types by a simple check and exception raise in\n\tGet_Bignum.\n\t(Set_Bignum): Arg should be 'out' and not 'in out'.\n\t(Invalid_Big_Integer, No_Big_Real): Removed.\n\t(Is_Valid): Now convention Intrinsic.\n\nFrom-SVN: r279515", "tree": {"sha": "e0df265c18ffaa31a721399940736639bb73b11a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0df265c18ffaa31a721399940736639bb73b11a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5815f92a08bb7e03c83e3592e93ea2470067148c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5815f92a08bb7e03c83e3592e93ea2470067148c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5815f92a08bb7e03c83e3592e93ea2470067148c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5815f92a08bb7e03c83e3592e93ea2470067148c/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "16b54914309fa2d94159d71b2e4a75fd497e1e75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16b54914309fa2d94159d71b2e4a75fd497e1e75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16b54914309fa2d94159d71b2e4a75fd497e1e75"}], "stats": {"total": 157, "additions": 70, "deletions": 87}, "files": [{"sha": "94d115e5852809977e2ffb7c0accdb532c4f5411", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5815f92a08bb7e03c83e3592e93ea2470067148c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5815f92a08bb7e03c83e3592e93ea2470067148c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5815f92a08bb7e03c83e3592e93ea2470067148c", "patch": "@@ -1,3 +1,13 @@\n+2019-12-18  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/a-nbnbin.ads, libgnat/a-nbnbin.adb,\n+\tlibgnat/a-nbnbre.ads, libgnat/a-nbnbre.adb: Replace\n+\tOptional_Big_* types by a simple check and exception raise in\n+\tGet_Bignum.\n+\t(Set_Bignum): Arg should be 'out' and not 'in out'.\n+\t(Invalid_Big_Integer, No_Big_Real): Removed.\n+\t(Is_Valid): Now convention Intrinsic.\n+\n 2019-12-18  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* doc/gnat_rm/implementation_defined_pragmas.rst,"}, {"sha": "7d8311d165ea3cee60351dcff01990f4c3a4bf21", "filename": "gcc/ada/libgnat/a-nbnbin.adb", "status": "modified", "additions": 39, "deletions": 32, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5815f92a08bb7e03c83e3592e93ea2470067148c/gcc%2Fada%2Flibgnat%2Fa-nbnbin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5815f92a08bb7e03c83e3592e93ea2470067148c/gcc%2Fada%2Flibgnat%2Fa-nbnbin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nbnbin.adb?ref=5815f92a08bb7e03c83e3592e93ea2470067148c", "patch": "@@ -44,19 +44,22 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n \n    procedure Free is new Ada.Unchecked_Deallocation (Bignum_Data, Bignum);\n \n-   function Get_Bignum (Arg : Optional_Big_Integer) return Bignum is\n-     (To_Bignum (Arg.Value.C));\n-   --  Return the Bignum value stored in Arg\n-\n-   procedure Set_Bignum (Arg : in out Optional_Big_Integer; Value : Bignum)\n+   function Get_Bignum (Arg : Big_Integer) return Bignum is\n+     (if Arg.Value.C = System.Null_Address\n+      then raise Constraint_Error with \"invalid big integer\"\n+      else To_Bignum (Arg.Value.C));\n+   --  Check for validity of Arg and return the Bignum value stored in Arg.\n+   --  Raise Constraint_Error if Arg is uninitialized.\n+\n+   procedure Set_Bignum (Arg : out Big_Integer; Value : Bignum)\n      with Inline;\n    --  Set the Bignum value stored in Arg to Value\n \n    ----------------\n    -- Set_Bignum --\n    ----------------\n \n-   procedure Set_Bignum (Arg : in out Optional_Big_Integer; Value : Bignum) is\n+   procedure Set_Bignum (Arg : out Big_Integer; Value : Bignum) is\n    begin\n       Arg.Value.C := To_Address (Value);\n    end Set_Bignum;\n@@ -65,16 +68,9 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- Is_Valid --\n    --------------\n \n-   function Is_Valid (Arg : Optional_Big_Integer) return Boolean is\n+   function Is_Valid (Arg : Big_Integer) return Boolean is\n      (Arg.Value.C /= System.Null_Address);\n \n-   --------------------------\n-   -- Invalid_Big_Integer --\n-   --------------------------\n-\n-   function Invalid_Big_Integer return Optional_Big_Integer is\n-     (Value => (Ada.Finalization.Controlled with C => System.Null_Address));\n-\n    ---------\n    -- \"=\" --\n    ---------\n@@ -125,7 +121,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    --------------------\n \n    function To_Big_Integer (Arg : Integer) return Big_Integer is\n-      Result : Optional_Big_Integer;\n+      Result : Big_Integer;\n    begin\n       Set_Bignum (Result, To_Bignum (Long_Long_Integer (Arg)));\n       return Result;\n@@ -151,7 +147,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n       --------------------\n \n       function To_Big_Integer (Arg : Int) return Big_Integer is\n-         Result : Optional_Big_Integer;\n+         Result : Big_Integer;\n       begin\n          Set_Bignum (Result, To_Bignum (Long_Long_Integer (Arg)));\n          return Result;\n@@ -179,7 +175,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n       --------------------\n \n       function To_Big_Integer (Arg : Int) return Big_Integer is\n-         Result : Optional_Big_Integer;\n+         Result : Big_Integer;\n       begin\n          Set_Bignum (Result, To_Bignum (Unsigned_64 (Arg)));\n          return Result;\n@@ -283,7 +279,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -----------------\n \n    function From_String (Arg : String) return Big_Integer is\n-      Result : Optional_Big_Integer;\n+      Result : Big_Integer;\n    begin\n       --  ??? only support Long_Long_Integer, good enough for now\n       Set_Bignum (Result, To_Bignum (Long_Long_Integer'Value (Arg)));\n@@ -306,7 +302,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    ---------\n \n    function \"+\" (L : Big_Integer) return Big_Integer is\n-      Result : Optional_Big_Integer;\n+      Result : Big_Integer;\n    begin\n       Set_Bignum (Result, new Bignum_Data'(Get_Bignum (L).all));\n       return Result;\n@@ -317,7 +313,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    ---------\n \n    function \"-\" (L : Big_Integer) return Big_Integer is\n-      Result : Optional_Big_Integer;\n+      Result : Big_Integer;\n    begin\n       Set_Bignum (Result, Big_Neg (Get_Bignum (L)));\n       return Result;\n@@ -328,7 +324,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -----------\n \n    function \"abs\" (L : Big_Integer) return Big_Integer is\n-      Result : Optional_Big_Integer;\n+      Result : Big_Integer;\n    begin\n       Set_Bignum (Result, Big_Abs (Get_Bignum (L)));\n       return Result;\n@@ -339,7 +335,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    ---------\n \n    function \"+\" (L, R : Big_Integer) return Big_Integer is\n-      Result : Optional_Big_Integer;\n+      Result : Big_Integer;\n    begin\n       Set_Bignum (Result, Big_Add (Get_Bignum (L), Get_Bignum (R)));\n       return Result;\n@@ -350,7 +346,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    ---------\n \n    function \"-\" (L, R : Big_Integer) return Big_Integer is\n-      Result : Optional_Big_Integer;\n+      Result : Big_Integer;\n    begin\n       Set_Bignum (Result, Big_Sub (Get_Bignum (L), Get_Bignum (R)));\n       return Result;\n@@ -361,7 +357,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    ---------\n \n    function \"*\" (L, R : Big_Integer) return Big_Integer is\n-      Result : Optional_Big_Integer;\n+      Result : Big_Integer;\n    begin\n       Set_Bignum (Result, Big_Mul (Get_Bignum (L), Get_Bignum (R)));\n       return Result;\n@@ -372,7 +368,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    ---------\n \n    function \"/\" (L, R : Big_Integer) return Big_Integer is\n-      Result : Optional_Big_Integer;\n+      Result : Big_Integer;\n    begin\n       Set_Bignum (Result, Big_Div (Get_Bignum (L), Get_Bignum (R)));\n       return Result;\n@@ -383,7 +379,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -----------\n \n    function \"mod\" (L, R : Big_Integer) return Big_Integer is\n-      Result : Optional_Big_Integer;\n+      Result : Big_Integer;\n    begin\n       Set_Bignum (Result, Big_Mod (Get_Bignum (L), Get_Bignum (R)));\n       return Result;\n@@ -394,7 +390,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -----------\n \n    function \"rem\" (L, R : Big_Integer) return Big_Integer is\n-      Result : Optional_Big_Integer;\n+      Result : Big_Integer;\n    begin\n       Set_Bignum (Result, Big_Rem (Get_Bignum (L), Get_Bignum (R)));\n       return Result;\n@@ -405,12 +401,23 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    ----------\n \n    function \"**\" (L : Big_Integer; R : Natural) return Big_Integer is\n-      Exp    : Bignum := To_Bignum (Long_Long_Integer (R));\n-      Result : Optional_Big_Integer;\n    begin\n-      Set_Bignum (Result, Big_Exp (Get_Bignum (L), Exp));\n-      Free (Exp);\n-      return Result;\n+      --  Explicitly check for validity before allocating Exp so that\n+      --  the call to Get_Bignum below cannot raise an exception before\n+      --  we get a chance to free Exp.\n+\n+      if not Is_Valid (L) then\n+         raise Constraint_Error with \"invalid big integer\";\n+      end if;\n+\n+      declare\n+         Exp    : Bignum := To_Bignum (Long_Long_Integer (R));\n+         Result : Big_Integer;\n+      begin\n+         Set_Bignum (Result, Big_Exp (Get_Bignum (L), Exp));\n+         Free (Exp);\n+         return Result;\n+      end;\n    end \"**\";\n \n    ---------"}, {"sha": "a54b09f6ab90010c62adfd3eb7db9fe6aa74437a", "filename": "gcc/ada/libgnat/a-nbnbin.ads", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5815f92a08bb7e03c83e3592e93ea2470067148c/gcc%2Fada%2Flibgnat%2Fa-nbnbin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5815f92a08bb7e03c83e3592e93ea2470067148c/gcc%2Fada%2Flibgnat%2Fa-nbnbin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nbnbin.ads?ref=5815f92a08bb7e03c83e3592e93ea2470067148c", "patch": "@@ -25,19 +25,12 @@ package Ada.Numerics.Big_Numbers.Big_Integers\n   with Preelaborate\n --  Nonblocking\n is\n-   type Optional_Big_Integer is private\n-     with Default_Initial_Condition => not Is_Valid (Optional_Big_Integer);\n-   --       Integer_Literal => From_String,\n+   type Big_Integer is private;\n+   --  with Integer_Literal => From_String,\n    --       Put_Image => Put_Image;\n \n-   function Is_Valid (Arg : Optional_Big_Integer) return Boolean;\n-\n-   subtype Big_Integer is Optional_Big_Integer\n-     with Dynamic_Predicate => Is_Valid (Big_Integer),\n-          Predicate_Failure => (raise Constraint_Error);\n-\n-   function Invalid_Big_Integer return Optional_Big_Integer\n-     with Post => not Is_Valid (Invalid_Big_Integer'Result);\n+   function Is_Valid (Arg : Big_Integer) return Boolean\n+     with Convention => Intrinsic;\n \n    function \"=\" (L, R : Big_Integer) return Boolean;\n \n@@ -51,18 +44,6 @@ is\n \n    function To_Big_Integer (Arg : Integer) return Big_Integer;\n \n-   subtype Optional_Big_Positive is Optional_Big_Integer\n-     with Dynamic_Predicate =>\n-            (not Is_Valid (Optional_Big_Positive))\n-             or else (Optional_Big_Positive > To_Big_Integer (0)),\n-          Predicate_Failure => (raise Constraint_Error);\n-\n-   subtype Optional_Big_Natural is Optional_Big_Integer\n-     with Dynamic_Predicate =>\n-            (not Is_Valid (Optional_Big_Natural))\n-             or else (Optional_Big_Natural >= To_Big_Integer (0)),\n-          Predicate_Failure => (raise Constraint_Error);\n-\n    subtype Big_Positive is Big_Integer\n      with Dynamic_Predicate => Big_Positive > To_Big_Integer (0),\n           Predicate_Failure => (raise Constraint_Error);\n@@ -157,7 +138,7 @@ private\n    procedure Adjust   (This : in out Controlled_Bignum);\n    procedure Finalize (This : in out Controlled_Bignum);\n \n-   type Optional_Big_Integer is record\n+   type Big_Integer is record\n       Value : Controlled_Bignum;\n    end record;\n "}, {"sha": "c087f4960cc97246c734d379f617dbdef48c2b63", "filename": "gcc/ada/libgnat/a-nbnbre.adb", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5815f92a08bb7e03c83e3592e93ea2470067148c/gcc%2Fada%2Flibgnat%2Fa-nbnbre.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5815f92a08bb7e03c83e3592e93ea2470067148c/gcc%2Fada%2Flibgnat%2Fa-nbnbre.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nbnbre.adb?ref=5815f92a08bb7e03c83e3592e93ea2470067148c", "patch": "@@ -45,22 +45,15 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    -- Is_Valid --\n    --------------\n \n-   function Is_Valid (Arg : Optional_Big_Real) return Boolean is\n+   function Is_Valid (Arg : Big_Real) return Boolean is\n      (Is_Valid (Arg.Num) and then Is_Valid (Arg.Den));\n \n-   -----------------\n-   -- No_Big_Real --\n-   -----------------\n-\n-   function No_Big_Real return Optional_Big_Real is\n-     (Num => Invalid_Big_Integer, Den => Invalid_Big_Integer);\n-\n    ---------\n    -- \"/\" --\n    ---------\n \n    function \"/\" (Num, Den : Big_Integer) return Big_Real is\n-      Result : Optional_Big_Real;\n+      Result : Big_Real;\n    begin\n       if Den = To_Big_Integer (0) then\n          raise Constraint_Error with \"divide by zero\";\n@@ -323,7 +316,7 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n \n    function From_String (Arg : String) return Big_Real is\n       Ten   : constant Big_Integer := To_Big_Integer (10);\n-      Frac  : Optional_Big_Integer;\n+      Frac  : Big_Integer;\n       Exp   : Integer := 0;\n       Pow   : Natural := 0;\n       Index : Natural := 0;\n@@ -353,7 +346,7 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n       end if;\n \n       declare\n-         Result : Optional_Big_Real;\n+         Result : Big_Real;\n       begin\n          Result.Den := Ten ** Pow;\n          Result.Num := From_String (Arg (Arg'First .. Index)) * Result.Den;\n@@ -414,7 +407,7 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    ---------\n \n    function \"+\" (L : Big_Real) return Big_Real is\n-      Result : Optional_Big_Real;\n+      Result : Big_Real;\n    begin\n       Result.Num := L.Num;\n       Result.Den := L.Den;\n@@ -440,7 +433,7 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    ---------\n \n    function \"+\" (L, R : Big_Real) return Big_Real is\n-      Result : Optional_Big_Real;\n+      Result : Big_Real;\n    begin\n       Result.Num := L.Num * R.Den + R.Num * L.Den;\n       Result.Den := L.Den * R.Den;\n@@ -453,7 +446,7 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    ---------\n \n    function \"-\" (L, R : Big_Real) return Big_Real is\n-      Result : Optional_Big_Real;\n+      Result : Big_Real;\n    begin\n       Result.Num := L.Num * R.Den - R.Num * L.Den;\n       Result.Den := L.Den * R.Den;\n@@ -466,7 +459,7 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    ---------\n \n    function \"*\" (L, R : Big_Real) return Big_Real is\n-      Result : Optional_Big_Real;\n+      Result : Big_Real;\n    begin\n       Result.Num := L.Num * R.Num;\n       Result.Den := L.Den * R.Den;\n@@ -479,7 +472,7 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    ---------\n \n    function \"/\" (L, R : Big_Real) return Big_Real is\n-      Result : Optional_Big_Real;\n+      Result : Big_Real;\n    begin\n       Result.Num := L.Num * R.Den;\n       Result.Den := L.Den * R.Num;\n@@ -492,7 +485,7 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    ----------\n \n    function \"**\" (L : Big_Real; R : Integer) return Big_Real is\n-      Result : Optional_Big_Real;\n+      Result : Big_Real;\n    begin\n       if R = 0 then\n          Result.Num := To_Big_Integer (1);"}, {"sha": "4827caae3e387387230f75ca2f62e025ff8ebd87", "filename": "gcc/ada/libgnat/a-nbnbre.ads", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5815f92a08bb7e03c83e3592e93ea2470067148c/gcc%2Fada%2Flibgnat%2Fa-nbnbre.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5815f92a08bb7e03c83e3592e93ea2470067148c/gcc%2Fada%2Flibgnat%2Fa-nbnbre.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nbnbre.ads?ref=5815f92a08bb7e03c83e3592e93ea2470067148c", "patch": "@@ -23,19 +23,11 @@ package Ada.Numerics.Big_Numbers.Big_Reals\n   with Preelaborate\n --  Nonblocking, Global => in out synchronized Big_Reals\n is\n-   type Optional_Big_Real is private with\n-     Default_Initial_Condition => not Is_Valid (Optional_Big_Real);\n---   Real_Literal => From_String,\n---   Put_Image => Put_Image;\n+   type Big_Real is private;\n+--   with Real_Literal => From_String,\n+--        Put_Image    => Put_Image;\n \n-   function Is_Valid (Arg : Optional_Big_Real) return Boolean;\n-\n-   function No_Big_Real return Optional_Big_Real\n-     with Post => not Is_Valid (No_Big_Real'Result);\n-\n-   subtype Big_Real is Optional_Big_Real\n-     with Dynamic_Predicate => Is_Valid (Big_Real),\n-          Predicate_Failure => (raise Constraint_Error);\n+   function Is_Valid (Arg : Big_Real) return Boolean;\n \n    function \"/\" (Num, Den : Big_Integers.Big_Integer) return Big_Real;\n --   with Pre => (if Big_Integers.\"=\" (Den, Big_Integers.To_Big_Integer (0))\n@@ -139,8 +131,8 @@ is\n \n private\n \n-   type Optional_Big_Real is record\n-      Num, Den : Big_Integers.Optional_Big_Integer;\n+   type Big_Real is record\n+      Num, Den : Big_Integers.Big_Integer;\n    end record;\n \n end Ada.Numerics.Big_Numbers.Big_Reals;"}]}