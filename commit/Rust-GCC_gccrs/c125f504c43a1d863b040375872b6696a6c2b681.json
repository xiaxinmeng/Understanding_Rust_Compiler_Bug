{"sha": "c125f504c43a1d863b040375872b6696a6c2b681", "node_id": "C_kwDOANBUbNoAKGMxMjVmNTA0YzQzYTFkODYzYjA0MDM3NTg3MmI2Njk2YTZjMmI2ODE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-05-25T09:10:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-05-25T09:10:41Z"}, "message": "libgomp: Fix occassional hangs with taskwait nowait depend\n\nRichi reported occassional hangs with taskwait-depend-nowait-1.*\ntests and I've finally manged to reproduce.  The problem is if\ntaskwait depend without nowait is encountered soon after\ntaskwait depend nowait and the former depends on the latter and there\nis no other work to do, the taskwait depend without nowait is put\nto sleep, but the empty_task optimization in\ngomp_task_run_post_handle_dependers wouldn't wake it up in that\ncase.  gomp_task_run_post_handle_dependers normally does some wakeups\nbecause it schedules more work (another task), which is not the\ncase of empty_task, but we need to do the wakeups that would be done\nupon task completion so that we awake sleeping threads when the\nlast child is done.\nSo, the taskwait-depend-nowait-1.* testcase is fixed with the\nelse if (__builtin_expect (task->parent_depends_on, 0) part of\nthe patch.\nThe new testcase can hang on another problem, if the empty task\nis the last task of a taskgroup, we need to use atomic store\nlike elsewhere to decrease the counter to 0, and wake up taskgroup\nend if needed.\nYet another spot which can sleep is normal taskwait (without depend),\nbut I believe nothing needs to be done for that - in that case we\nawait solely until the children's queue has no tasks, tasks still\nwaiting for dependencies aren't accounted in that, but the reason\nis that if taskwait should wait for something, there needs to be at least\none active child doing something (in the children queue), which then\npossibly awakes some of its siblings when the dependencies are met,\nor in the empty task case awakes further dependencies, but in any\ncase the child that finished is still handled as active child and\nwill awake taskwait at the end if there is nothing further to\ndo.\nLast sleeping case are barriers, but that is handled by ++ret and\nawaking the barrier.\n\n2022-05-25  Jakub Jelinek  <jakub@redhat.com>\n\n\t* task.c (gomp_task_run_post_handle_dependers): If empty_task\n\tis the last task taskwait depend depends on, wake it up.\n\tSimilarly if it is the last child of a taskgroup, use atomic\n\tstore instead of decrement and awak taskgroup wait if any.\n\t* testsuite/libgomp.c-c++-common/taskwait-depend-nowait-2.c: New test.", "tree": {"sha": "a6072dcca785fe49b7fc4257b604216641b7df1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6072dcca785fe49b7fc4257b604216641b7df1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c125f504c43a1d863b040375872b6696a6c2b681", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c125f504c43a1d863b040375872b6696a6c2b681", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c125f504c43a1d863b040375872b6696a6c2b681", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c125f504c43a1d863b040375872b6696a6c2b681/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1c9f779f75283427316b5c670c1e01ff8ce9ced", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1c9f779f75283427316b5c670c1e01ff8ce9ced", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1c9f779f75283427316b5c670c1e01ff8ce9ced"}], "stats": {"total": 70, "additions": 69, "deletions": 1}, "files": [{"sha": "30cd046df2a6549c2b7ce7aef468cd77d2a212fd", "filename": "libgomp/task.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c125f504c43a1d863b040375872b6696a6c2b681/libgomp%2Ftask.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c125f504c43a1d863b040375872b6696a6c2b681/libgomp%2Ftask.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftask.c?ref=c125f504c43a1d863b040375872b6696a6c2b681", "patch": "@@ -1382,10 +1382,30 @@ gomp_task_run_post_handle_dependers (struct gomp_task *child_task,\n \t{\n \t  if (!parent)\n \t    task->parent = NULL;\n+\t  else if (__builtin_expect (task->parent_depends_on, 0)\n+\t\t   && --parent->taskwait->n_depend == 0\n+\t\t   && parent->taskwait->in_depend_wait)\n+\t    {\n+\t      parent->taskwait->in_depend_wait = false;\n+\t      gomp_sem_post (&parent->taskwait->taskwait_sem);\n+\t    }\n \t  if (gomp_task_run_post_handle_depend (task, team))\n \t    ++ret;\n \t  if (taskgroup)\n-\t    taskgroup->num_children--;\n+\t    {\n+\t      if (taskgroup->num_children > 1)\n+\t\t--taskgroup->num_children;\n+\t      else\n+\t\t{\n+\t\t  __atomic_store_n (&taskgroup->num_children, 0,\n+\t\t\t\t    MEMMODEL_RELEASE);\n+\t\t  if (taskgroup->in_taskgroup_wait)\n+\t\t    {\n+\t\t      taskgroup->in_taskgroup_wait = false;\n+\t\t      gomp_sem_post (&taskgroup->taskgroup_sem);\n+\t\t    }\n+\t\t}\n+\t    }\n \t  gomp_finish_task (task);\n \t  free (task);\n \t  continue;"}, {"sha": "371ddf5639ddefd6dfa34ea6d2f271c99e373c04", "filename": "libgomp/testsuite/libgomp.c-c++-common/taskwait-depend-nowait-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c125f504c43a1d863b040375872b6696a6c2b681/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftaskwait-depend-nowait-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c125f504c43a1d863b040375872b6696a6c2b681/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftaskwait-depend-nowait-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftaskwait-depend-nowait-2.c?ref=c125f504c43a1d863b040375872b6696a6c2b681", "patch": "@@ -0,0 +1,48 @@\n+#include <stdlib.h>\n+#include <unistd.h>\n+\n+int\n+main ()\n+{\n+  int a[48], b = 1;\n+  #pragma omp parallel num_threads (4)\n+  {\n+    #pragma omp barrier\n+    #pragma omp single\n+    {\n+      int i;\n+      for (i = 0; i < 48; ++i)\n+\t#pragma omp task depend(in: a) shared(a)\n+\t  a[i] = i;\n+      for (i = 0; i < 32; ++i)\n+\t{\n+\t  #pragma omp taskwait depend(inout: a) nowait\n+\t}\n+      #pragma omp taskwait\n+      for (i = 0; i < 48; ++i)\n+\tif (a[i] != i)\n+\t  abort ();\n+      for (i = 0; i < 48; ++i)\n+\t#pragma omp task depend(in: a) shared(a)\n+\t  a[i] = 2 * i + 1;\n+      #pragma omp taskgroup\n+      {\n+\t#pragma omp taskwait depend(inoutset: a) nowait\n+\t#pragma omp taskgroup\n+\t{\n+\t  #pragma omp taskwait depend(inoutset: a) nowait\n+\t}\n+      }\n+      for (i = 0; i < 48; ++i)\n+\tif (a[i] != 2 * i + 1)\n+\t  abort ();\n+      #pragma omp task depend(in: a) shared(a)\n+      usleep (5000);\n+      #pragma omp taskgroup\n+      {\n+\t#pragma omp taskwait depend(inout: a) nowait\n+      }\n+    }\n+  }\n+  return 0;\n+}"}]}