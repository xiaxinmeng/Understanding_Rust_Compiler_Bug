{"sha": "6e1eaca96f745be9d40672c29cd2355c8b17b674", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUxZWFjYTk2Zjc0NWJlOWQ0MDY3MmMyOWNkMjM1NWM4YjE3YjY3NA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2018-07-31T17:36:09Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2018-07-31T17:36:09Z"}, "message": "AArch64 - disable CB[N]Z TB[N]Z when tracking speculation\n\nThe CB[N]Z and TB[N]Z instructions do not expose the comparison through\nthe condition code flags.  This makes it impossible to track speculative\nexecution through such a branch.  We can handle this relatively easily\nby simply disabling the patterns in this case.\n\nA side effect of this is that the split patterns for the atomic operations\nneed to also avoid generating these instructions.  They mostly have simple\nfall-backs for this already.\n\n\t* config/aarch64/aarch64.md (cb<optab><mode>1): Disable when\n\taarch64_track_speculation is true.\n\t(tb<optab><mode>1): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_split_compare_regs): Do not\n\tgenerate CB[N]Z when tracking speculation.\n\t(aarch64_split_compare_and_swap): Likewise.\n\t(aarch64_split_atomic_op): Likewise.\n\nFrom-SVN: r263172", "tree": {"sha": "811af2ddcf0c35222ede963ae5fde1ef227a2407", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/811af2ddcf0c35222ede963ae5fde1ef227a2407"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e1eaca96f745be9d40672c29cd2355c8b17b674", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e1eaca96f745be9d40672c29cd2355c8b17b674", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e1eaca96f745be9d40672c29cd2355c8b17b674", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e1eaca96f745be9d40672c29cd2355c8b17b674/comments", "author": null, "committer": null, "parents": [{"sha": "3b0c25022ec92d117d4ff6d7e11fdfb5327eff0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b0c25022ec92d117d4ff6d7e11fdfb5327eff0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b0c25022ec92d117d4ff6d7e11fdfb5327eff0e"}], "stats": {"total": 49, "additions": 43, "deletions": 6}, "files": [{"sha": "b4340cc1c194e00609ca45daae63a11ac96c47d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1eaca96f745be9d40672c29cd2355c8b17b674/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1eaca96f745be9d40672c29cd2355c8b17b674/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e1eaca96f745be9d40672c29cd2355c8b17b674", "patch": "@@ -1,3 +1,13 @@\n+2018-07-31  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/aarch64/aarch64.md (cb<optab><mode>1): Disable when\n+\taarch64_track_speculation is true.\n+\t(tb<optab><mode>1): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_split_compare_regs): Do not\n+\tgenerate CB[N]Z when tracking speculation.\n+\t(aarch64_split_compare_and_swap): Likewise.\n+\t(aarch64_split_atomic_op): Likewise.\n+\n 2018-07-31  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/aarch64/aarch64.opt (mtrack-speculation): New target option."}, {"sha": "bcbd8eb84586fd98a2f9fc1a33904238c058cc96", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1eaca96f745be9d40672c29cd2355c8b17b674/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1eaca96f745be9d40672c29cd2355c8b17b674/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=6e1eaca96f745be9d40672c29cd2355c8b17b674", "patch": "@@ -14494,7 +14494,16 @@ aarch64_split_compare_and_swap (rtx operands[])\n \n   if (strong_zero_p)\n     {\n-      x = gen_rtx_NE (VOIDmode, rval, const0_rtx);\n+      if (aarch64_track_speculation)\n+\t{\n+\t  /* Emit an explicit compare instruction, so that we can correctly\n+\t     track the condition codes.  */\n+\t  rtx cc_reg = aarch64_gen_compare_reg (NE, rval, const0_rtx);\n+\t  x = gen_rtx_NE (GET_MODE (cc_reg), cc_reg, const0_rtx);\n+\t}\n+      else\n+\tx = gen_rtx_NE (VOIDmode, rval, const0_rtx);\n+\n       x = gen_rtx_IF_THEN_ELSE (VOIDmode, x,\n \t\t\t\tgen_rtx_LABEL_REF (Pmode, label2), pc_rtx);\n       aarch64_emit_unlikely_jump (gen_rtx_SET (pc_rtx, x));\n@@ -14512,7 +14521,16 @@ aarch64_split_compare_and_swap (rtx operands[])\n \n   if (!is_weak)\n     {\n-      x = gen_rtx_NE (VOIDmode, scratch, const0_rtx);\n+      if (aarch64_track_speculation)\n+\t{\n+\t  /* Emit an explicit compare instruction, so that we can correctly\n+\t     track the condition codes.  */\n+\t  rtx cc_reg = aarch64_gen_compare_reg (NE, scratch, const0_rtx);\n+\t  x = gen_rtx_NE (GET_MODE (cc_reg), cc_reg, const0_rtx);\n+\t}\n+      else\n+\tx = gen_rtx_NE (VOIDmode, scratch, const0_rtx);\n+\n       x = gen_rtx_IF_THEN_ELSE (VOIDmode, x,\n \t\t\t\tgen_rtx_LABEL_REF (Pmode, label1), pc_rtx);\n       aarch64_emit_unlikely_jump (gen_rtx_SET (pc_rtx, x));\n@@ -14848,7 +14866,16 @@ aarch64_split_atomic_op (enum rtx_code code, rtx old_out, rtx new_out, rtx mem,\n   aarch64_emit_store_exclusive (mode, cond, mem,\n \t\t\t\tgen_lowpart (mode, new_out), model_rtx);\n \n-  x = gen_rtx_NE (VOIDmode, cond, const0_rtx);\n+  if (aarch64_track_speculation)\n+    {\n+      /* Emit an explicit compare instruction, so that we can correctly\n+\t track the condition codes.  */\n+      rtx cc_reg = aarch64_gen_compare_reg (NE, cond, const0_rtx);\n+      x = gen_rtx_NE (GET_MODE (cc_reg), cc_reg, const0_rtx);\n+    }\n+  else\n+    x = gen_rtx_NE (VOIDmode, cond, const0_rtx);\n+\n   x = gen_rtx_IF_THEN_ELSE (VOIDmode, x,\n \t\t\t    gen_rtx_LABEL_REF (Pmode, label), pc_rtx);\n   aarch64_emit_unlikely_jump (gen_rtx_SET (pc_rtx, x));"}, {"sha": "8984bbfa19e6472e3f9199b304690851158c5846", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1eaca96f745be9d40672c29cd2355c8b17b674/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1eaca96f745be9d40672c29cd2355c8b17b674/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=6e1eaca96f745be9d40672c29cd2355c8b17b674", "patch": "@@ -690,7 +690,7 @@\n \t\t\t\t(const_int 0))\n \t\t\t   (label_ref (match_operand 1 \"\" \"\"))\n \t\t\t   (pc)))]\n-  \"\"\n+  \"!aarch64_track_speculation\"\n   {\n     if (get_attr_length (insn) == 8)\n       return aarch64_gen_far_branch (operands, 1, \"Lcb\", \"<inv_cb>\\\\t%<w>0, \");\n@@ -720,7 +720,7 @@\n \t     (label_ref (match_operand 2 \"\" \"\"))\n \t     (pc)))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"\"\n+  \"!aarch64_track_speculation\"\n   {\n     if (get_attr_length (insn) == 8)\n       {\n@@ -756,7 +756,7 @@\n \t\t\t   (label_ref (match_operand 1 \"\" \"\"))\n \t\t\t   (pc)))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"\"\n+  \"!aarch64_track_speculation\"\n   {\n     if (get_attr_length (insn) == 8)\n       {"}]}