{"sha": "b37c2fe0fe71ba09d7eac796c4b1c03d5261d932", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM3YzJmZTBmZTcxYmEwOWQ3ZWFjNzk2YzRiMWMwM2Q1MjYxZDkzMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-08-28T06:24:16Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-08-28T06:24:16Z"}, "message": "reload1.c: Include rtl-iter.h.\n\ngcc/\n\t* reload1.c: Include rtl-iter.h.\n\t(note_reg_elim_costly): Turn from being a for_each_rtx callback\n\tto being a function that examines each subrtx itself.\n\t(eliminate_regs_1, elimination_costs_in_insn): Update accordingly.\n\nFrom-SVN: r214653", "tree": {"sha": "23ee3e7ad0c35dfbfba4667ef1f0fe83eb443faf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23ee3e7ad0c35dfbfba4667ef1f0fe83eb443faf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b37c2fe0fe71ba09d7eac796c4b1c03d5261d932", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b37c2fe0fe71ba09d7eac796c4b1c03d5261d932", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b37c2fe0fe71ba09d7eac796c4b1c03d5261d932", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b37c2fe0fe71ba09d7eac796c4b1c03d5261d932/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0d2e76b87c7879bca917cae23f4a95103f105184", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d2e76b87c7879bca917cae23f4a95103f105184", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d2e76b87c7879bca917cae23f4a95103f105184"}], "stats": {"total": 59, "additions": 33, "deletions": 26}, "files": [{"sha": "4c19637eb84749da39c86cafb8b357533364e1ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37c2fe0fe71ba09d7eac796c4b1c03d5261d932/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37c2fe0fe71ba09d7eac796c4b1c03d5261d932/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b37c2fe0fe71ba09d7eac796c4b1c03d5261d932", "patch": "@@ -1,3 +1,10 @@\n+2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* reload1.c: Include rtl-iter.h.\n+\t(note_reg_elim_costly): Turn from being a for_each_rtx callback\n+\tto being a function that examines each subrtx itself.\n+\t(eliminate_regs_1, elimination_costs_in_insn): Update accordingly.\n+\n 2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* regcprop.c (cprop_find_used_regs_1): Delete."}, {"sha": "a386615d12ecfa8ac825d78686a365c1fd2ea51e", "filename": "gcc/reload1.c", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37c2fe0fe71ba09d7eac796c4b1c03d5261d932/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37c2fe0fe71ba09d7eac796c4b1c03d5261d932/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=b37c2fe0fe71ba09d7eac796c4b1c03d5261d932", "patch": "@@ -45,6 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"emit-rtl.h\"\n #include \"dumpfile.h\"\n+#include \"rtl-iter.h\"\n \n /* This file contains the reload pass of the compiler, which is\n    run after register allocation has been done.  It checks that\n@@ -2486,34 +2487,33 @@ set_label_offsets (rtx x, rtx_insn *insn, int initial_p)\n     }\n }\n \f\n-/* Called through for_each_rtx, this function examines every reg that occurs\n-   in PX and adjusts the costs for its elimination which are gathered by IRA.\n-   DATA is the insn in which PX occurs.  We do not recurse into MEM\n-   expressions.  */\n+/* This function examines every reg that occurs in X and adjusts the\n+   costs for its elimination which are gathered by IRA.  INSN is the\n+   insn in which X occurs.  We do not recurse into MEM expressions.  */\n \n-static int\n-note_reg_elim_costly (rtx *px, void *data)\n+static void\n+note_reg_elim_costly (const_rtx x, rtx insn)\n {\n-  rtx insn = (rtx)data;\n-  rtx x = *px;\n-\n-  if (MEM_P (x))\n-    return -1;\n-\n-  if (REG_P (x)\n-      && REGNO (x) >= FIRST_PSEUDO_REGISTER\n-      && reg_equiv_init (REGNO (x))\n-      && reg_equiv_invariant (REGNO (x)))\n-    {\n-      rtx t = reg_equiv_invariant (REGNO (x));\n-      rtx new_rtx = eliminate_regs_1 (t, Pmode, insn, true, true);\n-      int cost = set_src_cost (new_rtx, optimize_bb_for_speed_p (elim_bb));\n-      int freq = REG_FREQ_FROM_BB (elim_bb);\n+  subrtx_iterator::array_type array;\n+  FOR_EACH_SUBRTX (iter, array, x, NONCONST)\n+    {\n+      const_rtx x = *iter;\n+      if (MEM_P (x))\n+\titer.skip_subrtxes ();\n+      else if (REG_P (x)\n+\t       && REGNO (x) >= FIRST_PSEUDO_REGISTER\n+\t       && reg_equiv_init (REGNO (x))\n+\t       && reg_equiv_invariant (REGNO (x)))\n+\t{\n+\t  rtx t = reg_equiv_invariant (REGNO (x));\n+\t  rtx new_rtx = eliminate_regs_1 (t, Pmode, insn, true, true);\n+\t  int cost = set_src_cost (new_rtx, optimize_bb_for_speed_p (elim_bb));\n+\t  int freq = REG_FREQ_FROM_BB (elim_bb);\n \n-      if (cost != 0)\n-\tira_adjust_equiv_reg_cost (REGNO (x), -cost * freq);\n+\t  if (cost != 0)\n+\t    ira_adjust_equiv_reg_cost (REGNO (x), -cost * freq);\n+\t}\n     }\n-  return 0;\n }\n \n /* Scan X and replace any eliminable registers (such as fp) with a\n@@ -2888,7 +2888,7 @@ eliminate_regs_1 (rtx x, enum machine_mode mem_mode, rtx insn,\n       if (for_costs\n \t  && memory_address_p (GET_MODE (x), XEXP (x, 0))\n \t  && !memory_address_p (GET_MODE (x), new_rtx))\n-\tfor_each_rtx (&XEXP (x, 0), note_reg_elim_costly, insn);\n+\tnote_reg_elim_costly (XEXP (x, 0), insn);\n \n       return replace_equiv_address_nv (x, new_rtx);\n \n@@ -3732,7 +3732,7 @@ elimination_costs_in_insn (rtx_insn *insn)\n \t  if (old_set && recog_data.operand_loc[i] == &SET_SRC (old_set))\n \t    is_set_src = true;\n \t  if (is_set_src && !sets_reg_p)\n-\t    note_reg_elim_costly (&SET_SRC (old_set), insn);\n+\t    note_reg_elim_costly (SET_SRC (old_set), insn);\n \t  in_plus = false;\n \t  if (plus_src && sets_reg_p\n \t      && (recog_data.operand_loc[i] == &XEXP (plus_src, 0)"}]}