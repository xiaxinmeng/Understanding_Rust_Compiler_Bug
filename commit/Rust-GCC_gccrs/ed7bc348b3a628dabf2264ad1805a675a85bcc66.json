{"sha": "ed7bc348b3a628dabf2264ad1805a675a85bcc66", "node_id": "C_kwDOANBUbNoAKGVkN2JjMzQ4YjNhNjI4ZGFiZjIyNjRhZDE4MDVhNjc1YTg1YmNjNjY", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2022-08-02T00:04:20Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-09-06T07:14:21Z"}, "message": "[Ada] Bad Valid_Scalars result if signed int component type signed has partial view.\n\nFor an object X of a composite type, the attribute X'Valid_Scalars should\nreturn False if and only if there exists at least one invalid scalar\nsubcomponent of X. The validity test for a scalar part may include a\nrange test. In some cases involving a private type that is implemented as\na signed integer type, this range test was incorrectly implemented using\nunsigned comparisons. For an enclosing object X, this could result in\nX'Valid_Scalars yielding the wrong Boolean result. Such an incorrect\nresult would almost always be False, although an incorrect True result is\ntheoretically possible (this would require that both bounds of the\ncomponent subtype are negative and that the invalid component has a positive\nvalue).\n\ngcc/ada/\n\n\t* exp_attr.adb\n\t(Make_Range_Test): In determining which subtype's First and Last\n\tattributes are to be queried as part of a range test, call\n\tValidated_View in order to get a scalar (as opposed to private)\n\tsubtype.\n\t(Attribute_Valid): In determining whether to perform a signed or\n\tunsigned comparison for a range test, call Validated_View in order\n\tto get a scalar (as opposed to private) type. Also correct a typo\n\twhich, by itself, is the source of the problem reported for this\n\tticket.", "tree": {"sha": "6ef7c01a5ca95759cf9fd5357538a7cb830ba7ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ef7c01a5ca95759cf9fd5357538a7cb830ba7ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed7bc348b3a628dabf2264ad1805a675a85bcc66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed7bc348b3a628dabf2264ad1805a675a85bcc66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed7bc348b3a628dabf2264ad1805a675a85bcc66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed7bc348b3a628dabf2264ad1805a675a85bcc66/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "152f968e86d14bbebe3e69286dd7a9257e3ca174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/152f968e86d14bbebe3e69286dd7a9257e3ca174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/152f968e86d14bbebe3e69286dd7a9257e3ca174"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "33eec37e3b77d87d9f6e937d0838e5701430d753", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed7bc348b3a628dabf2264ad1805a675a85bcc66/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed7bc348b3a628dabf2264ad1805a675a85bcc66/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=ed7bc348b3a628dabf2264ad1805a675a85bcc66", "patch": "@@ -7103,7 +7103,8 @@ package body Exp_Attr is\n       --  See separate sections below for the generated code in each case.\n \n       when Attribute_Valid => Valid : declare\n-         PBtyp : Entity_Id := Base_Type (Ptyp);\n+         PBtyp : Entity_Id := Base_Type (Validated_View (Ptyp));\n+         --  The scalar base type, looking through private types\n \n          Save_Validity_Checks_On : constant Boolean := Validity_Checks_On;\n          --  Save the validity checking mode. We always turn off validity\n@@ -7150,21 +7151,27 @@ package body Exp_Attr is\n                Temp := Duplicate_Subexpr (Pref);\n             end if;\n \n-            return\n-              Make_In (Loc,\n-                Left_Opnd  => Unchecked_Convert_To (PBtyp, Temp),\n-                Right_Opnd =>\n-                  Make_Range (Loc,\n-                    Low_Bound  =>\n-                      Unchecked_Convert_To (PBtyp,\n-                        Make_Attribute_Reference (Loc,\n-                          Prefix         => New_Occurrence_Of (Ptyp, Loc),\n-                          Attribute_Name => Name_First)),\n-                    High_Bound =>\n-                      Unchecked_Convert_To (PBtyp,\n-                        Make_Attribute_Reference (Loc,\n-                          Prefix         => New_Occurrence_Of (Ptyp, Loc),\n-                          Attribute_Name => Name_Last))));\n+            declare\n+               Val_Typ : constant Entity_Id := Validated_View (Ptyp);\n+            begin\n+               return\n+                 Make_In (Loc,\n+                   Left_Opnd  => Unchecked_Convert_To (PBtyp, Temp),\n+                   Right_Opnd =>\n+                     Make_Range (Loc,\n+                       Low_Bound  =>\n+                         Unchecked_Convert_To (PBtyp,\n+                           Make_Attribute_Reference (Loc,\n+                             Prefix         =>\n+                               New_Occurrence_Of (Val_Typ, Loc),\n+                             Attribute_Name => Name_First)),\n+                       High_Bound =>\n+                         Unchecked_Convert_To (PBtyp,\n+                           Make_Attribute_Reference (Loc,\n+                             Prefix         =>\n+                               New_Occurrence_Of (Val_Typ, Loc),\n+                             Attribute_Name => Name_Last))));\n+            end;\n          end Make_Range_Test;\n \n          --  Local variables\n@@ -7186,13 +7193,6 @@ package body Exp_Attr is\n \n          Validity_Checks_On := False;\n \n-         --  Retrieve the base type. Handle the case where the base type is a\n-         --  private enumeration type.\n-\n-         if Is_Private_Type (PBtyp) and then Present (Full_View (PBtyp)) then\n-            PBtyp := Full_View (PBtyp);\n-         end if;\n-\n          --  Floating-point case. This case is handled by the Valid attribute\n          --  code in the floating-point attribute run-time library.\n \n@@ -7462,7 +7462,7 @@ package body Exp_Attr is\n                Uns  : constant Boolean :=\n                         Is_Unsigned_Type (Ptyp)\n                           or else (Is_Private_Type (Ptyp)\n-                                    and then Is_Unsigned_Type (Btyp));\n+                                    and then Is_Unsigned_Type (PBtyp));\n                Size : Uint;\n                P    : Node_Id := Pref;\n "}]}