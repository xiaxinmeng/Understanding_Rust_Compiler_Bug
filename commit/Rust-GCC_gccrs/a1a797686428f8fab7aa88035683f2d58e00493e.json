{"sha": "a1a797686428f8fab7aa88035683f2d58e00493e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFhNzk3Njg2NDI4ZjhmYWI3YWE4ODAzNTY4M2YyZDU4ZTAwNDkzZQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2011-01-20T17:37:13Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2011-01-20T17:37:13Z"}, "message": "xtensa.h (GO_IF_MODE_DEPENDENT_ADDRESS): Remove.\n\n\t* config/xtensa/xtensa.h (GO_IF_MODE_DEPENDENT_ADDRESS): Remove.\n\t* config/xtensa/xtensa-protos.h (constantpool_address_p): Remove.\n\t* config/xtensa/xtensa.c (TARGET_MODE_DEPENDENT_ADDRESS_P): Define.\n\t(xtensa_mode_dependent_address_p): New function.\n\t(constantpool_address_p): Make static. Change return type to bool.\n\tChange argument type to const_rtx. Use CONST_INT_P predicate.\n\nFrom-SVN: r169060", "tree": {"sha": "9a884cc8f66b70d97eb44b3d4d619730594218e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a884cc8f66b70d97eb44b3d4d619730594218e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1a797686428f8fab7aa88035683f2d58e00493e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a797686428f8fab7aa88035683f2d58e00493e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1a797686428f8fab7aa88035683f2d58e00493e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a797686428f8fab7aa88035683f2d58e00493e/comments", "author": null, "committer": null, "parents": [{"sha": "427f6cec9c82ea688d821fd2e8d05197d8a1792f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/427f6cec9c82ea688d821fd2e8d05197d8a1792f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/427f6cec9c82ea688d821fd2e8d05197d8a1792f"}], "stats": {"total": 60, "additions": 37, "deletions": 23}, "files": [{"sha": "ccb76d2301d69d0f0b60c54fb3bb81de9e897b5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a797686428f8fab7aa88035683f2d58e00493e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a797686428f8fab7aa88035683f2d58e00493e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a1a797686428f8fab7aa88035683f2d58e00493e", "patch": "@@ -1,3 +1,12 @@\n+2011-01-20  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/xtensa/xtensa.h (GO_IF_MODE_DEPENDENT_ADDRESS): Remove.\n+\t* config/xtensa/xtensa-protos.h (constantpool_address_p): Remove.\n+\t* config/xtensa/xtensa.c (TARGET_MODE_DEPENDENT_ADDRESS_P): Define.\n+\t(xtensa_mode_dependent_address_p): New function.\n+\t(constantpool_address_p): Make static. Change return type to bool.\n+\tChange argument type to const_rtx. Use CONST_INT_P predicate.\n+\n 2011-01-20  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/46583"}, {"sha": "5db4e4ef42ffa480bb8584960028251fc056c557", "filename": "gcc/config/xtensa/xtensa-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a797686428f8fab7aa88035683f2d58e00493e/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a797686428f8fab7aa88035683f2d58e00493e/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h?ref=a1a797686428f8fab7aa88035683f2d58e00493e", "patch": "@@ -36,7 +36,6 @@ extern bool xtensa_mem_offset (unsigned, enum machine_mode);\n extern int xt_true_regnum (rtx);\n extern int xtensa_valid_move (enum machine_mode, rtx *);\n extern int smalloffset_mem_p (rtx);\n-extern int constantpool_address_p (rtx);\n extern int constantpool_mem_p (rtx);\n extern void xtensa_extend_reg (rtx, rtx);\n extern void xtensa_expand_conditional_branch (rtx *, enum machine_mode);"}, {"sha": "85dac151c3d09ef4c1d101e83c8761edb51a52c5", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a797686428f8fab7aa88035683f2d58e00493e/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a797686428f8fab7aa88035683f2d58e00493e/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=a1a797686428f8fab7aa88035683f2d58e00493e", "patch": "@@ -126,6 +126,7 @@ static rtx fixup_subreg_mem (rtx);\n static struct machine_function * xtensa_init_machine_status (void);\n static rtx xtensa_legitimize_tls_address (rtx);\n static rtx xtensa_legitimize_address (rtx, rtx, enum machine_mode);\n+static bool xtensa_mode_dependent_address_p (const_rtx);\n static bool xtensa_return_in_msb (const_tree);\n static void printx (FILE *, signed int);\n static void xtensa_function_epilogue (FILE *, HOST_WIDE_INT);\n@@ -161,6 +162,8 @@ static void xtensa_asm_trampoline_template (FILE *);\n static void xtensa_trampoline_init (rtx, tree, rtx);\n static bool xtensa_output_addr_const_extra (FILE *, rtx);\n \n+static bool constantpool_address_p (const_rtx addr);\n+\n static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n   REG_ALLOC_ORDER;\n \n@@ -201,6 +204,8 @@ static const struct default_options xtensa_option_optimization_table[] =\n \n #undef TARGET_LEGITIMIZE_ADDRESS\n #define TARGET_LEGITIMIZE_ADDRESS xtensa_legitimize_address\n+#undef TARGET_MODE_DEPENDENT_ADDRESS_P\n+#define TARGET_MODE_DEPENDENT_ADDRESS_P xtensa_mode_dependent_address_p\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS xtensa_rtx_costs\n@@ -494,10 +499,10 @@ smalloffset_mem_p (rtx op)\n }\n \n \n-int\n-constantpool_address_p (rtx addr)\n+static bool\n+constantpool_address_p (const_rtx addr)\n {\n-  rtx sym = addr;\n+  const_rtx sym = addr;\n \n   if (GET_CODE (addr) == CONST)\n     {\n@@ -506,21 +511,21 @@ constantpool_address_p (rtx addr)\n       /* Only handle (PLUS (SYM, OFFSET)) form.  */\n       addr = XEXP (addr, 0);\n       if (GET_CODE (addr) != PLUS)\n-\treturn FALSE;\n+\treturn false;\n \n       /* Make sure the address is word aligned.  */\n       offset = XEXP (addr, 1);\n-      if ((GET_CODE (offset) != CONST_INT)\n+      if ((!CONST_INT_P (offset))\n \t  || ((INTVAL (offset) & 3) != 0))\n-\treturn FALSE;\n+\treturn false;\n \n       sym = XEXP (addr, 0);\n     }\n \n   if ((GET_CODE (sym) == SYMBOL_REF)\n       && CONSTANT_POOL_ADDRESS_P (sym))\n-    return TRUE;\n-  return FALSE;\n+    return true;\n+  return false;\n }\n \n \n@@ -1937,6 +1942,21 @@ xtensa_legitimize_address (rtx x,\n   return x;\n }\n \n+/* Worker function for TARGET_MODE_DEPENDENT_ADDRESS_P.\n+\n+   Treat constant-pool references as \"mode dependent\" since they can\n+   only be accessed with SImode loads.  This works around a bug in the\n+   combiner where a constant pool reference is temporarily converted\n+   to an HImode load, which is then assumed to zero-extend based on\n+   our definition of LOAD_EXTEND_OP.  This is wrong because the high\n+   bits of a 16-bit value in the constant pool are now sign-extended\n+   by default.  */\n+\n+static bool\n+xtensa_mode_dependent_address_p (const_rtx addr)\n+{\n+  return constantpool_address_p (addr);\n+}\n \n /* Helper for xtensa_tls_referenced_p.  */\n "}, {"sha": "3d498e1910af1025b8f48199f6830b673eb0d596", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a797686428f8fab7aa88035683f2d58e00493e/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a797686428f8fab7aa88035683f2d58e00493e/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=a1a797686428f8fab7aa88035683f2d58e00493e", "patch": "@@ -695,20 +695,6 @@ typedef struct xtensa_args\n    && GET_CODE (X) != LABEL_REF\t\t\t\t\t\t\\\n    && GET_CODE (X) != CONST)\n \n-/* Treat constant-pool references as \"mode dependent\" since they can\n-   only be accessed with SImode loads.  This works around a bug in the\n-   combiner where a constant pool reference is temporarily converted\n-   to an HImode load, which is then assumed to zero-extend based on\n-   our definition of LOAD_EXTEND_OP.  This is wrong because the high\n-   bits of a 16-bit value in the constant pool are now sign-extended\n-   by default.  */\n-\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if (constantpool_address_p (ADDR))\t\t\t\t\t\\\n-      goto LABEL;\t\t\t\t\t\t\t\\\n-  } while (0)\n-\n /* Specify the machine mode that this machine uses\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE (SImode)"}]}