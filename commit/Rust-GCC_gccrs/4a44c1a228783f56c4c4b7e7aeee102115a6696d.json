{"sha": "4a44c1a228783f56c4c4b7e7aeee102115a6696d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE0NGMxYTIyODc4M2Y1NmM0YzRiN2U3YWVlZTEwMjExNWE2Njk2ZA==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2006-09-29T20:41:11Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2006-09-29T20:41:11Z"}, "message": "re PR libfortran/18791 (CABS specifics declared of wrong type)\n\n        PR fortran/18791\n\n        * gfortran.dg/specifics_1.f90: New test.\n        * gfortran.fortran-torture/execute/specifics.f90: Add tests for\n        complex specifics.\n\n        * m4/specific.m4: Special-case cabs so that its return type is\n        real. Special-case conjg so that their suffices are _4, _8, _10 and\n        _16 instead of _c4, _c8, _c10 and _c16.\n        * intrinsics/f2c_specifics.F90: Special-case conjg functions so\n        that their suffices are _4 and _8 instead of _c4 and _c8.\n        * generated/_conjg_c4.F90: Regenerate.\n        * generated/_conjg_c8.F90: Regenerate.\n        * generated/_conjg_c10.F90: Regenerate.\n        * generated/_conjg_c16.F90: Regenerate.\n        * generated/_abs_c4.F90: Regenerate.\n        * generated/_abs_c8.F90: Regenerate.\n        * generated/_abs_c10.F90: Regenerate.\n        * generated/_abs_c16.F90: Regenerate.\n\nFrom-SVN: r117317", "tree": {"sha": "7729eb205e524dc696b58941e5b286bf2193392d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7729eb205e524dc696b58941e5b286bf2193392d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a44c1a228783f56c4c4b7e7aeee102115a6696d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a44c1a228783f56c4c4b7e7aeee102115a6696d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a44c1a228783f56c4c4b7e7aeee102115a6696d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a44c1a228783f56c4c4b7e7aeee102115a6696d/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57270ac1c83cfc0f586fadb24e35f633e6b86b30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57270ac1c83cfc0f586fadb24e35f633e6b86b30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57270ac1c83cfc0f586fadb24e35f633e6b86b30"}], "stats": {"total": 359, "additions": 338, "deletions": 21}, "files": [{"sha": "7d29c05ac0804b1d3aec097c94bc19d4befdf7a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a44c1a228783f56c4c4b7e7aeee102115a6696d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a44c1a228783f56c4c4b7e7aeee102115a6696d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4a44c1a228783f56c4c4b7e7aeee102115a6696d", "patch": "@@ -1,3 +1,10 @@\n+2006-09-29  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/18791\n+\t* gfortran.dg/specifics_1.f90: New test.\n+\t* gfortran.fortran-torture/execute/specifics.f90: Add tests for\n+\tcomplex specifics.\n+\n 2006-09-29  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/pthread-init-1.c, pthread-init-2.c,"}, {"sha": "c1d86938ca457d4f02e7941dd56415e32999da3a", "filename": "gcc/testsuite/gfortran.dg/specifics_1.f90", "status": "added", "additions": 224, "deletions": 0, "changes": 224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a44c1a228783f56c4c4b7e7aeee102115a6696d/gcc%2Ftestsuite%2Fgfortran.dg%2Fspecifics_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a44c1a228783f56c4c4b7e7aeee102115a6696d/gcc%2Ftestsuite%2Fgfortran.dg%2Fspecifics_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fspecifics_1.f90?ref=4a44c1a228783f56c4c4b7e7aeee102115a6696d", "patch": "@@ -0,0 +1,224 @@\n+! Program to test intrinsic functions as actual arguments\n+! Copied from gfortran.fortran-torture/execute/specifics.f90\n+! It is run here with -ff2c option\n+!\n+! { dg-do run }\n+! { dg-options \"-ff2c\" }\n+subroutine test_c(fn, val, res)\n+  complex fn\n+  complex val, res\n+\n+  if (diff(fn(val),res)) call abort\n+contains\n+function diff(a,b)\n+  complex a,b\n+  logical diff\n+  diff = (abs(a - b) .gt. 0.00001)\n+end function\n+end subroutine \n+\n+subroutine test_z(fn, val, res)\n+  double complex fn\n+  double complex val, res\n+\n+  if (diff(fn(val),res)) call abort\n+contains\n+function diff(a,b)\n+  double complex a,b\n+  logical diff\n+  diff = (abs(a - b) .gt. 0.00001)\n+end function\n+end subroutine \n+\n+subroutine test_cabs(fn, val, res)\n+  real fn, res\n+  complex val\n+\n+  if (diff(fn(val),res)) call abort\n+contains\n+function diff(a,b)\n+  real a,b\n+  logical diff\n+  diff = (abs(a - b) .gt. 0.00001)\n+end function\n+end subroutine \n+\n+subroutine test_cdabs(fn, val, res)\n+  double precision fn, res\n+  double complex val\n+\n+  if (diff(fn(val),res)) call abort\n+contains\n+function diff(a,b)\n+  double precision a,b\n+  logical diff\n+  diff = (abs(a - b) .gt. 0.00001)\n+end function\n+end subroutine \n+\n+subroutine test_r(fn, val, res)\n+  real fn\n+  real val, res\n+\n+  if (diff(fn(val), res)) call abort\n+contains\n+function diff(a, b)\n+  real a, b\n+  logical diff\n+  diff = (abs(a - b) .gt. 0.00001)\n+end function\n+end subroutine\n+\n+subroutine test_d(fn, val, res)\n+  double precision fn\n+  double precision val, res\n+\n+  if (diff(fn(val), res)) call abort\n+contains\n+function diff(a, b)\n+  double precision a, b\n+  logical diff\n+  diff = (abs(a - b) .gt. 0.00001d0)\n+end function\n+end subroutine\n+\n+subroutine test_r2(fn, val1, val2, res)\n+  real fn\n+  real val1, val2, res\n+\n+  if (diff(fn(val1, val2), res)) call abort\n+contains\n+function diff(a, b)\n+  real a, b\n+  logical diff\n+  diff = (abs(a - b) .gt. 0.00001)\n+end function\n+end subroutine\n+\n+subroutine test_d2(fn, val1, val2, res)\n+  double precision fn\n+  double precision val1, val2, res\n+\n+  if (diff(fn(val1, val2), res)) call abort\n+contains\n+function diff(a, b)\n+  double precision a, b\n+  logical diff\n+  diff = (abs(a - b) .gt. 0.00001d0)\n+end function\n+end subroutine\n+\n+subroutine test_dprod(fn)\n+  double precision fn\n+  if (abs (fn (2.0, 3.0) - 6d0) .gt. 0.00001) call abort\n+end subroutine\n+\n+program specifics\n+  intrinsic abs\n+  intrinsic aint\n+  intrinsic anint\n+  intrinsic acos\n+  intrinsic asin\n+  intrinsic atan\n+  intrinsic cos\n+  intrinsic sin\n+  intrinsic tan\n+  intrinsic cosh\n+  intrinsic sinh\n+  intrinsic tanh\n+  intrinsic alog\n+  intrinsic exp\n+  intrinsic sign\n+  intrinsic amod\n+\n+  intrinsic dabs\n+  intrinsic dint\n+  intrinsic dnint\n+  intrinsic dacos\n+  intrinsic dasin\n+  intrinsic datan\n+  intrinsic dcos\n+  intrinsic dsin\n+  intrinsic dtan\n+  intrinsic dcosh\n+  intrinsic dsinh\n+  intrinsic dtanh\n+  intrinsic dlog\n+  intrinsic dexp\n+  intrinsic dsign\n+  intrinsic dmod\n+\n+  intrinsic conjg\n+  intrinsic ccos\n+  intrinsic cexp\n+  intrinsic clog\n+  intrinsic csin\n+  intrinsic csqrt\n+\n+  intrinsic dconjg\n+  intrinsic cdcos\n+  intrinsic cdexp\n+  intrinsic cdlog\n+  intrinsic cdsin\n+  intrinsic cdsqrt\n+\n+  intrinsic cabs\n+  intrinsic cdabs\n+\n+  intrinsic dprod\n+\n+  call test_r (abs, -1.0, abs(-1.0))\n+  call test_r (aint, 1.7, 1.0)\n+  call test_r (anint, 1.7, 2.0)\n+  call test_r (acos, 0.5, acos(0.5))\n+  call test_r (asin, 0.5, asin(0.5))\n+  call test_r (atan, 0.5, atan(0.5))\n+  call test_r (cos, 1.0, cos(1.0))\n+  call test_r (sin, 1.0, sin(1.0))\n+  call test_r (tan, 1.0, tan(1.0))\n+  call test_r (cosh, 1.0, cosh(1.0))\n+  call test_r (sinh, 1.0, sinh(1.0))\n+  call test_r (tanh, 1.0, tanh(1.0))\n+  call test_r (alog, 2.0, alog(2.0))\n+  call test_r (exp, 1.0, exp(1.0))\n+  call test_r2 (sign, 1.0, -2.0, sign(1.0, -2.0))\n+  call test_r2 (amod, 3.5, 2.0, amod(3.5, 2.0))\n+  \n+  call test_d (dabs, -1d0, abs(-1d0))\n+  call test_d (dint, 1.7d0, 1d0)\n+  call test_d (dnint, 1.7d0, 2d0)\n+  call test_d (dacos, 0.5d0, dacos(0.5d0))\n+  call test_d (dasin, 0.5d0, dasin(0.5d0))\n+  call test_d (datan, 0.5d0, datan(0.5d0))\n+  call test_d (dcos, 1d0, dcos(1d0))\n+  call test_d (dsin, 1d0, dsin(1d0))\n+  call test_d (dtan, 1d0, dtan(1d0))\n+  call test_d (dcosh, 1d0, dcosh(1d0))\n+  call test_d (dsinh, 1d0, dsinh(1d0))\n+  call test_d (dtanh, 1d0, dtanh(1d0))\n+  call test_d (dlog, 2d0, dlog(2d0))\n+  call test_d (dexp, 1d0, dexp(1d0))\n+  call test_d2 (dsign, 1d0, -2d0, sign(1d0, -2d0))\n+  call test_d2 (dmod, 3.5d0, 2d0, dmod(3.5d0, 2d0))\n+\n+  call test_dprod (dprod)\n+\n+  call test_c (conjg, (1.2,-4.), conjg((1.2,-4.)))\n+  call test_c (ccos, (1.2,-4.), ccos((1.2,-4.)))\n+  call test_c (cexp, (1.2,-4.), cexp((1.2,-4.)))\n+  call test_c (clog, (1.2,-4.), clog((1.2,-4.)))\n+  call test_c (csin, (1.2,-4.), csin((1.2,-4.)))\n+  call test_c (csqrt, (1.2,-4.), csqrt((1.2,-4.)))\n+\n+  call test_z (dconjg, (1.2d0,-4.d0), dconjg((1.2d0,-4.d0)))\n+  call test_z (cdcos, (1.2d0,-4.d0), cdcos((1.2d0,-4.d0)))\n+  call test_z (cdexp, (1.2d0,-4.d0), cdexp((1.2d0,-4.d0)))\n+  call test_z (cdlog, (1.2d0,-4.d0), cdlog((1.2d0,-4.d0)))\n+  call test_z (cdsin, (1.2d0,-4.d0), cdsin((1.2d0,-4.d0)))\n+  call test_z (cdsqrt, (1.2d0,-4.d0), cdsqrt((1.2d0,-4.d0)))\n+\n+  call test_cabs (cabs, (1.2,-4.), cabs((1.2,-4.)))\n+  call test_cdabs (cdabs, (1.2d0,-4.d0), cdabs((1.2d0,-4.d0)))\n+\n+end program\n+"}, {"sha": "18490ef99d1b7fcf1fe5476b5d075985c7188fc8", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/specifics.f90", "status": "modified", "additions": 88, "deletions": 3, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a44c1a228783f56c4c4b7e7aeee102115a6696d/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fspecifics.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a44c1a228783f56c4c4b7e7aeee102115a6696d/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fspecifics.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fspecifics.f90?ref=4a44c1a228783f56c4c4b7e7aeee102115a6696d", "patch": "@@ -1,4 +1,56 @@\n ! Program to test intrinsic functions as actual arguments\n+subroutine test_c(fn, val, res)\n+  complex fn\n+  complex val, res\n+\n+  if (diff(fn(val),res)) call abort\n+contains\n+function diff(a,b)\n+  complex a,b\n+  logical diff\n+  diff = (abs(a - b) .gt. 0.00001)\n+end function\n+end subroutine \n+\n+subroutine test_z(fn, val, res)\n+  double complex fn\n+  double complex val, res\n+\n+  if (diff(fn(val),res)) call abort\n+contains\n+function diff(a,b)\n+  double complex a,b\n+  logical diff\n+  diff = (abs(a - b) .gt. 0.00001)\n+end function\n+end subroutine \n+\n+subroutine test_cabs(fn, val, res)\n+  real fn, res\n+  complex val\n+\n+  if (diff(fn(val),res)) call abort\n+contains\n+function diff(a,b)\n+  real a,b\n+  logical diff\n+  diff = (abs(a - b) .gt. 0.00001)\n+end function\n+end subroutine \n+\n+subroutine test_cdabs(fn, val, res)\n+  double precision fn, res\n+  double complex val\n+\n+  if (diff(fn(val),res)) call abort\n+contains\n+function diff(a,b)\n+  double precision a,b\n+  logical diff\n+  diff = (abs(a - b) .gt. 0.00001)\n+end function\n+end subroutine \n+\n subroutine test_r(fn, val, res)\n   real fn\n   real val, res\n@@ -91,9 +143,24 @@ program specifics\n   intrinsic dsign\n   intrinsic dmod\n \n-  intrinsic dprod\n+  intrinsic conjg\n+  intrinsic ccos\n+  intrinsic cexp\n+  intrinsic clog\n+  intrinsic csin\n+  intrinsic csqrt\n+\n+  intrinsic dconjg\n+  intrinsic cdcos\n+  intrinsic cdexp\n+  intrinsic cdlog\n+  intrinsic cdsin\n+  intrinsic cdsqrt\n \n-  !TODO: Also test complex variants\n+  intrinsic cabs\n+  intrinsic cdabs\n+\n+  intrinsic dprod\n \n   call test_r (abs, -1.0, abs(-1.0))\n   call test_r (aint, 1.7, 1.0)\n@@ -129,6 +196,24 @@ program specifics\n   call test_d2 (dsign, 1d0, -2d0, sign(1d0, -2d0))\n   call test_d2 (dmod, 3.5d0, 2d0, dmod(3.5d0, 2d0))\n \n-  call test_dprod(dprod)\n+  call test_dprod (dprod)\n+\n+  call test_c (conjg, (1.2,-4.), conjg((1.2,-4.)))\n+  call test_c (ccos, (1.2,-4.), ccos((1.2,-4.)))\n+  call test_c (cexp, (1.2,-4.), cexp((1.2,-4.)))\n+  call test_c (clog, (1.2,-4.), clog((1.2,-4.)))\n+  call test_c (csin, (1.2,-4.), csin((1.2,-4.)))\n+  call test_c (csqrt, (1.2,-4.), csqrt((1.2,-4.)))\n+\n+  call test_z (dconjg, (1.2d0,-4.d0), dconjg((1.2d0,-4.d0)))\n+  call test_z (cdcos, (1.2d0,-4.d0), cdcos((1.2d0,-4.d0)))\n+  call test_z (cdexp, (1.2d0,-4.d0), cdexp((1.2d0,-4.d0)))\n+  call test_z (cdlog, (1.2d0,-4.d0), cdlog((1.2d0,-4.d0)))\n+  call test_z (cdsin, (1.2d0,-4.d0), cdsin((1.2d0,-4.d0)))\n+  call test_z (cdsqrt, (1.2d0,-4.d0), cdsqrt((1.2d0,-4.d0)))\n+\n+  call test_cabs (cabs, (1.2,-4.), cabs((1.2,-4.)))\n+  call test_cdabs (cdabs, (1.2d0,-4.d0), cdabs((1.2d0,-4.d0)))\n+\n end program\n "}, {"sha": "33a58953b626be6267daa3861433d70e5aaaa414", "filename": "libgfortran/generated/_abs_c10.F90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a44c1a228783f56c4c4b7e7aeee102115a6696d/libgfortran%2Fgenerated%2F_abs_c10.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a44c1a228783f56c4c4b7e7aeee102115a6696d/libgfortran%2Fgenerated%2F_abs_c10.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_abs_c10.F90?ref=4a44c1a228783f56c4c4b7e7aeee102115a6696d", "patch": "@@ -42,7 +42,7 @@\n \n elemental function specific__abs_c10 (parm)\n    complex (kind=10), intent (in) :: parm\n-   complex (kind=10) :: specific__abs_c10\n+   real (kind=10) :: specific__abs_c10\n \n    specific__abs_c10 = abs (parm)\n end function"}, {"sha": "021546d3b358c995b690a37f093b9b70bedacffd", "filename": "libgfortran/generated/_abs_c16.F90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a44c1a228783f56c4c4b7e7aeee102115a6696d/libgfortran%2Fgenerated%2F_abs_c16.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a44c1a228783f56c4c4b7e7aeee102115a6696d/libgfortran%2Fgenerated%2F_abs_c16.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_abs_c16.F90?ref=4a44c1a228783f56c4c4b7e7aeee102115a6696d", "patch": "@@ -42,7 +42,7 @@\n \n elemental function specific__abs_c16 (parm)\n    complex (kind=16), intent (in) :: parm\n-   complex (kind=16) :: specific__abs_c16\n+   real (kind=16) :: specific__abs_c16\n \n    specific__abs_c16 = abs (parm)\n end function"}, {"sha": "6def6b1ae61c5d66ac73dce41265fdbeae530dbc", "filename": "libgfortran/generated/_abs_c4.F90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a44c1a228783f56c4c4b7e7aeee102115a6696d/libgfortran%2Fgenerated%2F_abs_c4.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a44c1a228783f56c4c4b7e7aeee102115a6696d/libgfortran%2Fgenerated%2F_abs_c4.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_abs_c4.F90?ref=4a44c1a228783f56c4c4b7e7aeee102115a6696d", "patch": "@@ -42,7 +42,7 @@\n \n elemental function specific__abs_c4 (parm)\n    complex (kind=4), intent (in) :: parm\n-   complex (kind=4) :: specific__abs_c4\n+   real (kind=4) :: specific__abs_c4\n \n    specific__abs_c4 = abs (parm)\n end function"}, {"sha": "bd549a5865d4d78c42b78ae967c5b7e96d049a9a", "filename": "libgfortran/generated/_abs_c8.F90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a44c1a228783f56c4c4b7e7aeee102115a6696d/libgfortran%2Fgenerated%2F_abs_c8.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a44c1a228783f56c4c4b7e7aeee102115a6696d/libgfortran%2Fgenerated%2F_abs_c8.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_abs_c8.F90?ref=4a44c1a228783f56c4c4b7e7aeee102115a6696d", "patch": "@@ -42,7 +42,7 @@\n \n elemental function specific__abs_c8 (parm)\n    complex (kind=8), intent (in) :: parm\n-   complex (kind=8) :: specific__abs_c8\n+   real (kind=8) :: specific__abs_c8\n \n    specific__abs_c8 = abs (parm)\n end function"}, {"sha": "e03a21bb32492be5784d9747d20dad579526a26b", "filename": "libgfortran/generated/_conjg_c10.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a44c1a228783f56c4c4b7e7aeee102115a6696d/libgfortran%2Fgenerated%2F_conjg_c10.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a44c1a228783f56c4c4b7e7aeee102115a6696d/libgfortran%2Fgenerated%2F_conjg_c10.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_conjg_c10.F90?ref=4a44c1a228783f56c4c4b7e7aeee102115a6696d", "patch": "@@ -40,11 +40,11 @@\n #if defined (HAVE_GFC_COMPLEX_10)\n \n \n-elemental function specific__conjg_c10 (parm)\n+elemental function specific__conjg_10 (parm)\n    complex (kind=10), intent (in) :: parm\n-   complex (kind=10) :: specific__conjg_c10\n+   complex (kind=10) :: specific__conjg_10\n \n-   specific__conjg_c10 = conjg (parm)\n+   specific__conjg_10 = conjg (parm)\n end function\n \n "}, {"sha": "876575ebc939a7a7ae884a75016d48faa99b8e8d", "filename": "libgfortran/generated/_conjg_c16.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a44c1a228783f56c4c4b7e7aeee102115a6696d/libgfortran%2Fgenerated%2F_conjg_c16.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a44c1a228783f56c4c4b7e7aeee102115a6696d/libgfortran%2Fgenerated%2F_conjg_c16.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_conjg_c16.F90?ref=4a44c1a228783f56c4c4b7e7aeee102115a6696d", "patch": "@@ -40,11 +40,11 @@\n #if defined (HAVE_GFC_COMPLEX_16)\n \n \n-elemental function specific__conjg_c16 (parm)\n+elemental function specific__conjg_16 (parm)\n    complex (kind=16), intent (in) :: parm\n-   complex (kind=16) :: specific__conjg_c16\n+   complex (kind=16) :: specific__conjg_16\n \n-   specific__conjg_c16 = conjg (parm)\n+   specific__conjg_16 = conjg (parm)\n end function\n \n "}, {"sha": "ca615ec014f02e5605c82d5f182bcd30c0c770b7", "filename": "libgfortran/generated/_conjg_c4.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a44c1a228783f56c4c4b7e7aeee102115a6696d/libgfortran%2Fgenerated%2F_conjg_c4.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a44c1a228783f56c4c4b7e7aeee102115a6696d/libgfortran%2Fgenerated%2F_conjg_c4.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_conjg_c4.F90?ref=4a44c1a228783f56c4c4b7e7aeee102115a6696d", "patch": "@@ -40,11 +40,11 @@\n #if defined (HAVE_GFC_COMPLEX_4)\n \n \n-elemental function specific__conjg_c4 (parm)\n+elemental function specific__conjg_4 (parm)\n    complex (kind=4), intent (in) :: parm\n-   complex (kind=4) :: specific__conjg_c4\n+   complex (kind=4) :: specific__conjg_4\n \n-   specific__conjg_c4 = conjg (parm)\n+   specific__conjg_4 = conjg (parm)\n end function\n \n "}, {"sha": "b58de8ed45f597051bc70c496451abb316435705", "filename": "libgfortran/generated/_conjg_c8.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a44c1a228783f56c4c4b7e7aeee102115a6696d/libgfortran%2Fgenerated%2F_conjg_c8.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a44c1a228783f56c4c4b7e7aeee102115a6696d/libgfortran%2Fgenerated%2F_conjg_c8.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_conjg_c8.F90?ref=4a44c1a228783f56c4c4b7e7aeee102115a6696d", "patch": "@@ -40,11 +40,11 @@\n #if defined (HAVE_GFC_COMPLEX_8)\n \n \n-elemental function specific__conjg_c8 (parm)\n+elemental function specific__conjg_8 (parm)\n    complex (kind=8), intent (in) :: parm\n-   complex (kind=8) :: specific__conjg_c8\n+   complex (kind=8) :: specific__conjg_8\n \n-   specific__conjg_c8 = conjg (parm)\n+   specific__conjg_8 = conjg (parm)\n end function\n \n "}, {"sha": "a0d03dcba9c455306fda133ce3551755628f6ff3", "filename": "libgfortran/m4/specific.m4", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a44c1a228783f56c4c4b7e7aeee102115a6696d/libgfortran%2Fm4%2Fspecific.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a44c1a228783f56c4c4b7e7aeee102115a6696d/libgfortran%2Fm4%2Fspecific.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fspecific.m4?ref=4a44c1a228783f56c4c4b7e7aeee102115a6696d", "patch": "@@ -6,7 +6,8 @@ define(get_typename2, `$1 (kind=$2)')dnl\n define(get_typename, `get_typename2(ifelse($1,i,integer,ifelse($1,r,real,ifelse($1,l,logical,ifelse($1,c,complex,unknown)))),`$2')')dnl\n define(atype_name, get_typename(atype_letter,atype_kind))dnl\n define(name, regexp(regexp(file, `[^/]*$', `\\&'), `^_\\([^_]*\\)_', `\\1'))dnl\n-define(function_name,`specific__'name`_'atype_code)dnl\n+define(rtype_name,get_typename(ifelse(name,abs,ifelse(atype_letter,c,r,atype_letter),atype_letter),atype_kind))dnl\n+define(function_name,ifelse(name,conjg,`specific__conjg_'atype_kind,`specific__'name`_'atype_code))dnl\n \n define(type,ifelse(atype_letter,l,LOGICAL,ifelse(atype_letter,i,INTEGER,ifelse(atype_letter,r,REAL,ifelse(atype_letter,c,COMPLEX,UNKNOW)))))dnl\n define(Q,ifelse(atype_kind,4,F,ifelse(atype_kind,8,`',ifelse(atype_kind,10,L,ifelse(atype_kind,16,L,`_'atype_kind)))))dnl\n@@ -33,7 +34,7 @@ ifelse(NEEDED,NONE,`',`#ifdef HAVE_'prefix`'NEEDED`'Q)\n \n elemental function function_name (parm)\n    atype_name, intent (in) :: parm\n-   atype_name :: function_name\n+   rtype_name :: function_name\n \n    function_name = name (parm)\n end function"}]}