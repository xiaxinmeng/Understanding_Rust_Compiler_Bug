{"sha": "22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJkZWVmY2JiN2M1NTZhOTlmZDcyYzFmYjkyYTNhMzViNmRmZDRiNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-02-21T10:52:39Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-02-21T10:52:39Z"}, "message": "re PR tree-optimization/56415 (Performance regression after fix for 56273)\n\n2013-02-21  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/56415\n\tRevert\n\t2013-02-11  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/56273\n\t* tree-vrp.c (simplify_cond_using_ranges): Disable for the\n\tfirst VRP run.\n\n\t* g++.dg/warn/Warray-bounds-6.C: New testcase.\n\t* gcc.dg/tree-ssa/pr21559.c: Adjust.\n\t* gcc.dg/tree-ssa/vrp17.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp18.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp23.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp24.c: Likewise.\n\nFrom-SVN: r196200", "tree": {"sha": "a542ffcdf642acb96c23172e970261d990845918", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a542ffcdf642acb96c23172e970261d990845918"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "267499fa590aa35d0e7ad86ee74abf1387c25f63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/267499fa590aa35d0e7ad86ee74abf1387c25f63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/267499fa590aa35d0e7ad86ee74abf1387c25f63"}], "stats": {"total": 101, "additions": 47, "deletions": 54}, "files": [{"sha": "067a61f7f0b3a094642cd0512cebc889675b0613", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4", "patch": "@@ -1,3 +1,13 @@\n+2013-02-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56415\n+\tRevert\n+\t2013-02-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56273\n+\t* tree-vrp.c (simplify_cond_using_ranges): Disable for the\n+\tfirst VRP run.\n+\n 2013-02-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/56258"}, {"sha": "5a2e02b73d266661601fd644af50d205af613df7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4", "patch": "@@ -1,3 +1,17 @@\n+2013-02-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56415\n+\tRevert\n+\t2013-02-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56273\n+\t* g++.dg/warn/Warray-bounds-6.C: New testcase.\n+\t* gcc.dg/tree-ssa/pr21559.c: Adjust.\n+\t* gcc.dg/tree-ssa/vrp17.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp18.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp23.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp24.c: Likewise.\n+\n 2013-02-21  Marek Polacek  <polacek@redhat.com>\n \n \tPR tree-optimization/56398"}, {"sha": "ee2862f1ec17a4c8d9e2a2e39738785ded71142d", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds-6.C", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/267499fa590aa35d0e7ad86ee74abf1387c25f63/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/267499fa590aa35d0e7ad86ee74abf1387c25f63/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-6.C?ref=267499fa590aa35d0e7ad86ee74abf1387c25f63", "patch": "@@ -1,30 +0,0 @@\n-// { dg-do compile }\n-// { dg-options \"-O3 -Warray-bounds\" }\n-\n-struct type {\n-    bool a, b;\n-    bool get_b() { return b; }\n-};\n-\n-type stuff[9u];\n-\n-void bar();\n-\n-void foo() {\n-\n-    for(unsigned i = 0u; i < 9u; i++) {\n-\n-\tif(!stuff[i].a) {\n-\t    continue;\n-\t}\n-\n-\tbar();\n-\n-\tfor(unsigned j = i + 1u; j < 9u; j++) {\n-\t    if(stuff[j].a && stuff[j].get_b()) { // { dg-bogus \"array bounds\" }\n-\t\treturn;\n-\t    }\n-\t}\n-\n-    }\n-}"}, {"sha": "34f4a01db00bc1422e70634a46296bb8bb995ab0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21559.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21559.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21559.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21559.c?ref=22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1-details\" } */\n \n static int blocksize = 4096;\n \n@@ -32,12 +32,12 @@ void foo (void)\n \n \n /* First, we should simplify the bits < 0 test within the loop.  */\n-/* { dg-final { scan-tree-dump-times \"Simplified relational\" 1 \"vrp2\" } } */\n+/* { dg-final { scan-tree-dump-times \"Simplified relational\" 1 \"vrp1\" } } */\n \n /* Second, we should thread the edge out of the loop via the break\n    statement.  We also realize that the final bytes == 0 test is useless,\n    and thread over it.  */\n /* { dg-final { scan-tree-dump-times \"Threaded jump\" 3 \"vrp1\" } } */\n \n /* { dg-final { cleanup-tree-dump \"vrp1\" } } */\n-/* { dg-final { cleanup-tree-dump \"vrp2\" } } */\n+"}, {"sha": "c04b9ba7843526a707e8f61d0168153fffdcfe9f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp17.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp17.c?ref=22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-tail-merge -fdump-tree-vrp2\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n \n extern void abort (void) __attribute__ ((__noreturn__));\n union tree_node;\n@@ -27,5 +27,6 @@ gimplify_for_stmt (tree stmt)\n     abort ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"Simplified relational\" 1 \"vrp2\" } } */\n-/* { dg-final { cleanup-tree-dump \"vrp2\" } } */\n+/* { dg-final { scan-tree-dump-times \"Simplified relational\" 1 \"vrp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp1\" } } */\n+"}, {"sha": "a3cc536ae56f857fe065fa8aa0907255ab3a40f7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp18.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp18.c?ref=22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp2\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n \n static int blocksize = 4096;\n \n@@ -30,5 +30,5 @@ void foo (void)\n     eof_reached = 1;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Simplified relational\" 1 \"vrp2\" } } */\n-/* { dg-final { cleanup-tree-dump \"vrp2\" } } */\n+/* { dg-final { scan-tree-dump-times \"Simplified relational\" 1 \"vrp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp1\" } } */"}, {"sha": "77899a65fcade2039514da746f62547139387333", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp23.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp23.c?ref=22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp2-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1-details\" } */\n \n blah (int code1, int code2)\n {\n@@ -40,5 +40,6 @@ blah (int code1, int code2)\n /* The n_sets > 0 test can be simplified into n_sets == 1 since the\n    only way to reach the test is when n_sets <= 1, and the only value\n    which satisfies both conditions is n_sets == 1.  */\n-/* { dg-final { scan-tree-dump-times \"Simplified relational\" 1 \"vrp2\" } } */\n-/* { dg-final { cleanup-tree-dump \"vrp2\" } } */\n+/* { dg-final { scan-tree-dump-times \"Simplified relational\" 1 \"vrp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp1\" } } */\n+"}, {"sha": "85e5b62d14804e1661a802445093690daa24f6ad", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp24.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp24.c?ref=22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-dominator-opts -fdump-tree-vrp2-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1-details\" } */\n+\n \n struct rtx_def;\n typedef struct rtx_def *rtx;\n@@ -85,5 +86,6 @@ sss (rtx insn, int code1, int code2, int code3)\n    The second n_sets > 0 test can also be simplified into n_sets == 1\n    as the only way to reach the tests is when n_sets <= 1 and the only\n    value which satisfies both conditions is n_sets == 1.  */\n-/* { dg-final { scan-tree-dump-times \"Simplified relational\" 2 \"vrp2\" } } */\n-/* { dg-final { cleanup-tree-dump \"vrp2\" } } */\n+/* { dg-final { scan-tree-dump-times \"Simplified relational\" 2 \"vrp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp1\" } } */\n+"}, {"sha": "a38b14d495676267fb7025044338a63f5037efd7", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=22deefcbb7c556a99fd72c1fb92a3a35b6dfd4b4", "patch": "@@ -8503,8 +8503,9 @@ test_for_singularity (enum tree_code cond_code, tree op0,\n   return NULL;\n }\n \n-/* Simplify the conditional stmt STMT using final range information.\n-   Return true if we simplified the statement.  */\n+/* Simplify a conditional using a relational operator to an equality\n+   test if the range information indicates only one value can satisfy\n+   the original conditional.  */\n \n static bool\n simplify_cond_using_ranges (gimple stmt)\n@@ -8513,13 +8514,7 @@ simplify_cond_using_ranges (gimple stmt)\n   tree op1 = gimple_cond_rhs (stmt);\n   enum tree_code cond_code = gimple_cond_code (stmt);\n \n-  /* Simplify a conditional using a relational operator to an equality\n-     test if the range information indicates only one value can satisfy\n-     the original conditional.\n-     Do that only in the second VRP pass as otherwise assertions derived\n-     from this predicate are weakened.  */\n-  if (!first_pass_instance\n-      && cond_code != NE_EXPR\n+  if (cond_code != NE_EXPR\n       && cond_code != EQ_EXPR\n       && TREE_CODE (op0) == SSA_NAME\n       && INTEGRAL_TYPE_P (TREE_TYPE (op0))"}]}