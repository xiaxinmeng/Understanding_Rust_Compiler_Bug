{"sha": "3520b7452c46c56f64697dcdad55160cdf947d39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUyMGI3NDUyYzQ2YzU2ZjY0Njk3ZGNkYWQ1NTE2MGNkZjk0N2QzOQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2005-02-06T18:48:58Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2005-02-06T18:48:58Z"}, "message": "tree-ssa-loop-ivopts.c (rewrite_use_nonlinear_expr): Do not add unnecessary cast to original induction variable increments.\n\n\t* tree-ssa-loop-ivopts.c (rewrite_use_nonlinear_expr): Do not add\n\tunnecessary cast to original induction variable increments.\n\nFrom-SVN: r94681", "tree": {"sha": "10830e1a2a76f15e0178f61c26c6ab42113944c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10830e1a2a76f15e0178f61c26c6ab42113944c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3520b7452c46c56f64697dcdad55160cdf947d39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3520b7452c46c56f64697dcdad55160cdf947d39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3520b7452c46c56f64697dcdad55160cdf947d39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3520b7452c46c56f64697dcdad55160cdf947d39/comments", "author": null, "committer": null, "parents": [{"sha": "b0a168b645d310b6bf2638967562cfab8f89d555", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0a168b645d310b6bf2638967562cfab8f89d555", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0a168b645d310b6bf2638967562cfab8f89d555"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "a498661799631427d6b8e22b7c0e6d8131c3aec1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3520b7452c46c56f64697dcdad55160cdf947d39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3520b7452c46c56f64697dcdad55160cdf947d39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3520b7452c46c56f64697dcdad55160cdf947d39", "patch": "@@ -1,3 +1,8 @@\n+2005-02-06  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\t* tree-ssa-loop-ivopts.c (rewrite_use_nonlinear_expr): Do not add\n+\tunnecessary cast to original induction variable increments.\n+\n 2005-02-06  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \tPR tree-optimization/18219"}, {"sha": "b5f693e4c9d0df11487bf5fb5abf6cab5b032e72", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3520b7452c46c56f64697dcdad55160cdf947d39/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3520b7452c46c56f64697dcdad55160cdf947d39/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=3520b7452c46c56f64697dcdad55160cdf947d39", "patch": "@@ -4542,11 +4542,32 @@ static void\n rewrite_use_nonlinear_expr (struct ivopts_data *data,\n \t\t\t    struct iv_use *use, struct iv_cand *cand)\n {\n-  tree comp = unshare_expr (get_computation (data->current_loop,\n-\t\t\t\t\t     use, cand));\n+  tree comp;\n   tree op, stmts, tgt, ass;\n   block_stmt_iterator bsi, pbsi;\n- \n+\n+  /* An important special case -- if we are asked to express value of\n+     the original iv by itself, just exit; there is no need to\n+     introduce a new computation (that might also need casting the\n+     variable to unsigned and back).  */\n+  if (cand->pos == IP_ORIGINAL\n+      && TREE_CODE (use->stmt) == MODIFY_EXPR\n+      && TREE_OPERAND (use->stmt, 0) == cand->var_after)\n+    {\n+      op = TREE_OPERAND (use->stmt, 1);\n+\n+      /* Be a bit careful.  In case variable is expressed in some\n+\t complicated way, rewrite it so that we may get rid of this\n+\t complicated expression.  */\n+      if ((TREE_CODE (op) == PLUS_EXPR\n+\t   || TREE_CODE (op) == MINUS_EXPR)\n+\t  && TREE_OPERAND (op, 0) == cand->var_before\n+\t  && TREE_CODE (TREE_OPERAND (op, 1)) == INTEGER_CST)\n+\treturn;\n+    }\n+\n+  comp = unshare_expr (get_computation (data->current_loop,\n+\t\t\t\t\tuse, cand));\n   switch (TREE_CODE (use->stmt))\n     {\n     case PHI_NODE:"}]}