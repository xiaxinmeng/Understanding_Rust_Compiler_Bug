{"sha": "554b61bb304e178d08f69b202b6d16eca14785af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU0YjYxYmIzMDRlMTc4ZDA4ZjY5YjIwMmI2ZDE2ZWNhMTQ3ODVhZg==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@cygnus.com", "date": "1999-05-20T08:26:55Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "1999-05-20T08:26:55Z"}, "message": "prims.cc (catch_fpe): Call to HANDLE_DIVIDE_OVERFLOW added.\n\n1999-05-20  Andrew Haley  <aph@cygnus.com>\n        * libjava/prims.cc (catch_fpe): Call to HANDLE_DIVIDE_OVERFLOW\n        added.\n        * include/i386-signal.h (HANDLE_DIVIDE_OVERFLOW): New macro.\n        (INIT_FPE): Exception string made more informative.\n        * include/sparc-signal.h (INIT_FPE): Exception string made more\n        informative.\n        * testsuite/libjava.lang/Divide_1.java: New file.\n        * testsuite/libjava.lang/Divide_1.out: New file.\n\nFrom-SVN: r27056", "tree": {"sha": "c773f8d236cca5c8caaa0578e6211289e6fc850a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c773f8d236cca5c8caaa0578e6211289e6fc850a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/554b61bb304e178d08f69b202b6d16eca14785af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/554b61bb304e178d08f69b202b6d16eca14785af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/554b61bb304e178d08f69b202b6d16eca14785af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/554b61bb304e178d08f69b202b6d16eca14785af/comments", "author": null, "committer": null, "parents": [{"sha": "bf3118d04b6463cf24e439729ef9a2600b452f60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf3118d04b6463cf24e439729ef9a2600b452f60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf3118d04b6463cf24e439729ef9a2600b452f60"}], "stats": {"total": 219, "additions": 211, "deletions": 8}, "files": [{"sha": "1a964586abee94e69efeb792cc392889101b2ad1", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554b61bb304e178d08f69b202b6d16eca14785af/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554b61bb304e178d08f69b202b6d16eca14785af/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=554b61bb304e178d08f69b202b6d16eca14785af", "patch": "@@ -1,3 +1,14 @@\n+1999-05-20  Andrew Haley  <aph@cygnus.com>\n+\n+\t* libjava/prims.cc (catch_fpe): Call to HANDLE_DIVIDE_OVERFLOW\n+\tadded.\n+\t* include/i386-signal.h (HANDLE_DIVIDE_OVERFLOW): New macro.\n+\t(INIT_FPE): Exception string made more informative.\n+\t* include/sparc-signal.h (INIT_FPE): Exception string made more\n+\tinformative.\n+\t* testsuite/libjava.lang/Divide_1.java: New file.\n+\t* testsuite/libjava.lang/Divide_1.out: New file.\n+\n 1999-05-19  Tom Tromey  <tromey@cygnus.com>\n \n \t* aclocal.m4, configure: Rebuilt."}, {"sha": "12ffe2ada1f730c03b8602a0d314cebadaa2fad5", "filename": "libjava/include/i386-signal.h", "status": "modified", "additions": 77, "deletions": 6, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554b61bb304e178d08f69b202b6d16eca14785af/libjava%2Finclude%2Fi386-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554b61bb304e178d08f69b202b6d16eca14785af/libjava%2Finclude%2Fi386-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fi386-signal.h?ref=554b61bb304e178d08f69b202b6d16eca14785af", "patch": "@@ -25,16 +25,86 @@ details.  */\n static void _name (int _dummy)\n \n #define MAKE_THROW_FRAME\t\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   void **_p = (void **)&_dummy;\t\t\t\t\t\t\\\n   struct sigcontext_struct *_regs = (struct sigcontext_struct *)++_p;\t\\\n \t\t\t\t\t\t\t\t\t\\\n   register unsigned long _ebp = _regs->ebp;\t\t\t\t\\\n-  register unsigned long _eip = _regs->eip;\t\t\t\t\\\n-  \t\t\t\t\t\t\t\t\t\\\n+  register unsigned char *_eip = (unsigned char *)_regs->eip;\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  asm volatile (\"mov %0, (%%ebp); mov %1, 4(%%ebp)\"\t\t\t\\\n+\t\t: : \"r\"(_ebp), \"r\"(_eip));\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+#define HANDLE_DIVIDE_OVERFLOW\t\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  void **_p = (void **)&_dummy;\t\t\t\t\t\t\\\n+  struct sigcontext_struct *_regs = (struct sigcontext_struct *)++_p;\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  register unsigned long *_ebp = (unsigned long *)_regs->ebp;\t\t\\\n+  register unsigned char *_eip = (unsigned char *)_regs->eip;\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  /* According to the JVM spec, \"if the dividend is the negative\t\\\n+   * integer of the smallest magnitude and the divisor is -1, then\t\\\n+   * overflow occurs and the result is equal to the dividend.  Despite\t\\\n+   * the overflow, no exception occurs\".\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+   * We handle this by inspecting the instruction which generated the\t\\\n+   * signal and advancing eip to point to the following instruction.\t\\\n+   * As the instructions are variable length it is necessary to do a\t\\\n+   * little calculation to figure out where the following instruction\t\\\n+   * actually is.\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+   */\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  if (_eip[0] == 0xf7)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      unsigned char _modrm = _eip[1];\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      if (_regs->eax == 0x80000000\t\t\t\t\t\\\n+\t  && ((_modrm >> 3) & 7) == 7) /* Signed divide */\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  _regs->edx = 0; /* the remainder is zero */\t\t\t\\\n+\t  switch (_modrm >> 6)\t\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t    case 0:\t\t\t\t\t\t\t\\\n+\t      if ((_modrm & 7) == 5)\t\t\t\t\t\\\n+\t\t_eip += 4;\t\t\t\t\t\t\\\n+\t      break;\t\t\t\t\t\t\t\\\n+\t    case 1:\t\t\t\t\t\t\t\\\n+\t      _eip += 1;\t\t\t\t\t\t\\\n+\t      break;\t\t\t\t\t\t\t\\\n+\t    case 2:\t\t\t\t\t\t\t\\\n+\t      _eip += 4;\t\t\t\t\t\t\\\n+\t      break;\t\t\t\t\t\t\t\\\n+\t    case 3:\t\t\t\t\t\t\t\\\n+\t      break;\t\t\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t  _eip += 2;\t\t\t\t\t\t\t\\\n+\t  _regs->eip = (unsigned long)_eip;\t\t\t\t\\\n+\t  return;\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else if (((_modrm >> 3) & 7) == 6) /* Unsigned divide */\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  /* We assume that unsigned divisions are in library code, so\t\\\n+\t   * we throw one level down the stack, which was hopefully\t\\\n+\t   * the place that called the library routine.  This will\t\\\n+\t   * break if the library is ever compiled with\t\t\t\\\n+\t   * -fomit-frame-pointer, but at least this way we've got a\t\\\n+\t   * good chance of finding the exception handler. */\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\t  _eip = (unsigned char *)_ebp[1];\t\t\t\t\\\n+\t  _ebp = (unsigned long *)_ebp[0];\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n   asm volatile (\"mov %0, (%%ebp); mov %1, 4(%%ebp)\"\t\t\t\\\n \t\t: : \"r\"(_ebp), \"r\"(_eip));\t\t\t\t\\\n-}\n+}\t\t\t\t\t\t\t\t\t\\\n+while (0)\n \n #define INIT_SEGV\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\\\n@@ -48,10 +118,11 @@ do\t\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\\\n while (0)  \n \n-#define INIT_FPE\t\t\t\t\t\t\\\n+#define INIT_FPE                                                \\\n do\t\t\t\t\t\t\t\t\\\n-  { \t\t\t\t\t\t\t\t\\\n-    arithexception = new java::lang::ArithmeticException ();\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    arithexception = new java::lang::ArithmeticException \t\\\n+      (JvNewStringLatin1 (\"/ by zero\"));\t\t\t\\\n     struct sigaction act;\t\t\t\t\t\\\n     act.sa_handler = catch_fpe;\t\t\t\t\t\\\n     sigemptyset (&act.sa_mask);\t\t\t\t\t\\"}, {"sha": "03b5cdc4dc663b5af96316595b9132ecd42b33c0", "filename": "libjava/include/sparc-signal.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554b61bb304e178d08f69b202b6d16eca14785af/libjava%2Finclude%2Fsparc-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554b61bb304e178d08f69b202b6d16eca14785af/libjava%2Finclude%2Fsparc-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fsparc-signal.h?ref=554b61bb304e178d08f69b202b6d16eca14785af", "patch": "@@ -51,7 +51,8 @@ while (0)\n #define INIT_FPE\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n-    arithexception = new java::lang::ArithmeticException ();\t\\\n+    arithexception = new java::lang::ArithmeticException \t\\\n+      (JvNewStringLatin1 (\"/ by zero\"));\t\t\t\\\n     struct sigaction act;\t\t\t\t\t\\\n     act.sa_flags = SA_SIGINFO;\t\t\t\t\t\\\n     act.sa_sigaction = catch_fpe;\t\t\t\t\\"}, {"sha": "9909485ded0068e6574fe0c22358dd1b5dcf76cf", "filename": "libjava/prims.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554b61bb304e178d08f69b202b6d16eca14785af/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554b61bb304e178d08f69b202b6d16eca14785af/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=554b61bb304e178d08f69b202b6d16eca14785af", "patch": "@@ -68,7 +68,11 @@ SIGNAL_HANDLER (catch_segv)\n static java::lang::ArithmeticException *arithexception;\n SIGNAL_HANDLER (catch_fpe)\n {\n+#ifdef HANDLE_DIVIDE_OVERFLOW\n+  HANDLE_DIVIDE_OVERFLOW;\n+#else\n   MAKE_THROW_FRAME;\n+#endif\n   _Jv_Throw (arithexception);\n }\n #endif\n@@ -97,7 +101,7 @@ _Jv_equalUtf8Consts (Utf8Const* a, Utf8Const *b)\n }\n \n /* True iff A is equal to STR.\n-   HASH is STR->hashCode().\n+   HASH is STR->hashCode().  \n */\n \n jboolean"}, {"sha": "d4e01939aa54c270442c683f3d2cca8794355ede", "filename": "libjava/testsuite/libjava.lang/Divide_1.java", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554b61bb304e178d08f69b202b6d16eca14785af/libjava%2Ftestsuite%2Flibjava.lang%2FDivide_1.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554b61bb304e178d08f69b202b6d16eca14785af/libjava%2Ftestsuite%2Flibjava.lang%2FDivide_1.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FDivide_1.java?ref=554b61bb304e178d08f69b202b6d16eca14785af", "patch": "@@ -0,0 +1,105 @@\n+public class Divide_1\n+{\n+  static int b = Integer.parseInt (\"-1\");  \n+  int b1 = Integer.parseInt (\"-1\");  \n+  static int zero = Integer.parseInt (\"0\");\n+\n+  void probe ()\n+  {\n+     try {\n+      int a = Integer.parseInt (\"-80000000\", 16);\n+      int c = a/b;\n+      System.out.println (c);\n+    } catch (Exception _) {\n+      System.out.println (_);\n+    }\n+  \n+    try {\n+      int a = Integer.parseInt (\"-80000000\", 16);\n+      int c = a/-1;\n+      System.out.println (c);\n+    } catch (Exception _) {\n+      System.out.println (_);\n+    }\n+ \n+    try {\n+      int a = Integer.parseInt (\"-80000000\", 16);\n+      int c = a%b;\n+      System.out.println (c);\n+    } catch (Exception _) {\n+      System.out.println (_);\n+    }\n+ \n+    try {\n+      int a = Integer.parseInt (\"-80000000\", 16);\n+      int c = a%b1;\n+      System.out.println (c);\n+    } catch (Exception _) {\n+      System.out.println (_);\n+    }\n+ \n+    try {\n+      int a = Integer.parseInt (\"-80000000\", 16);\n+      int c = a%-1;\n+      System.out.println (c);\n+    } catch (Exception _) {\n+      System.out.println (_);\n+    }\n+ \n+    try {\n+      int a = Integer.parseInt (\"8000\", 16);\n+      int b = Integer.parseInt (\"0\", 16);\n+      int c = a/b;\n+      System.out.println (c);\n+    } catch (Exception _) {\n+      System.out.println (_);\n+    }\n+ \n+    try {\n+      int a = Integer.parseInt (\"8000\", 16);\n+      int b = Integer.parseInt (\"0\", 16);\n+      int c = a%b;\n+      System.out.println (c);\n+    } catch (Exception _) {\n+      System.out.println (_);\n+    }\n+ \n+   try {\n+      long a = Long.parseLong (\"-8000000000000000\", 16);\n+      long c = a/b;\n+      System.out.println (c);\n+    } catch (Exception _) {\n+      System.out.println (_);\n+    }\n+ \n+    try {\n+      long a = Long.parseLong (\"-8000000000000000\", 16);\n+      long c = a%b;\n+      System.out.println (c);\n+    } catch (Exception _) {\n+      System.out.println (_);\n+    }\n+\n+    try {\n+      long a = Long.parseLong (\"8000\", 16);\n+      long b = Long.parseLong (\"0\", 16);\n+      long c = a/b;\n+      System.out.println (c);\n+    } catch (Exception _) {\n+      System.out.println (_);\n+    }\n+ \n+    try {\n+      long a = Long.parseLong (\"8000\", 16);\n+      long b = Long.parseLong (\"0\", 16);\n+      long c = a%b;\n+      System.out.println (c);\n+    } catch (Exception _) {\n+      System.out.println (_);\n+    }\n+  }\n+ \n+  public static void main (String[] args) {\n+    new Divide_1 ().probe ();\n+  }\n+}"}, {"sha": "6e1f87ed4fc88d77d4ae76383b1044727a050956", "filename": "libjava/testsuite/libjava.lang/Divide_1.out", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554b61bb304e178d08f69b202b6d16eca14785af/libjava%2Ftestsuite%2Flibjava.lang%2FDivide_1.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554b61bb304e178d08f69b202b6d16eca14785af/libjava%2Ftestsuite%2Flibjava.lang%2FDivide_1.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FDivide_1.out?ref=554b61bb304e178d08f69b202b6d16eca14785af", "patch": "@@ -0,0 +1,11 @@\n+-2147483648\n+-2147483648\n+0\n+0\n+0\n+java.lang.ArithmeticException: / by zero\n+java.lang.ArithmeticException: / by zero\n+-9223372036854775808\n+0\n+java.lang.ArithmeticException: / by zero\n+java.lang.ArithmeticException: / by zero"}]}