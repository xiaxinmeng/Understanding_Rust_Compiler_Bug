{"sha": "023d89c70b3912087d9e4a1db51993ed94fdd088", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIzZDg5YzcwYjM5MTIwODdkOWU0YTFkYjUxOTkzZWQ5NGZkZDA4OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-11-18T13:34:08Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-11-18T13:34:08Z"}, "message": "re PR c++/58102 (rejects valid initialization of constexpr object with mutable member)\n\n\tPR c++/58102\n\t* typeck2.c (store_init_value): Set it.\n\t* cp-tree.h (CONSTRUCTOR_MUTABLE_POISON): New.\n\t* constexpr.c (cxx_eval_outermost_constant_expr): Check it.\n\nFrom-SVN: r217713", "tree": {"sha": "c02e1cc1ad1d88205b9940959b4708dca434d9bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c02e1cc1ad1d88205b9940959b4708dca434d9bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/023d89c70b3912087d9e4a1db51993ed94fdd088", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/023d89c70b3912087d9e4a1db51993ed94fdd088", "html_url": "https://github.com/Rust-GCC/gccrs/commit/023d89c70b3912087d9e4a1db51993ed94fdd088", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/023d89c70b3912087d9e4a1db51993ed94fdd088/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bee1d478578db03924bf2505092db9ee967190da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bee1d478578db03924bf2505092db9ee967190da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bee1d478578db03924bf2505092db9ee967190da"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "1afd3cfa46a614d889f857824ea5cda9a8164ac2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/023d89c70b3912087d9e4a1db51993ed94fdd088/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/023d89c70b3912087d9e4a1db51993ed94fdd088/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=023d89c70b3912087d9e4a1db51993ed94fdd088", "patch": "@@ -1,3 +1,10 @@\n+2014-11-18  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/58102\n+\t* typeck2.c (store_init_value): Set it.\n+\t* cp-tree.h (CONSTRUCTOR_MUTABLE_POISON): New.\n+\t* constexpr.c (cxx_eval_outermost_constant_expr): Check it.\n+\n 2014-11-17  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/33911"}, {"sha": "2f0708b40ec3180f5845036abac22ddcac4e4958", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/023d89c70b3912087d9e4a1db51993ed94fdd088/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/023d89c70b3912087d9e4a1db51993ed94fdd088/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=023d89c70b3912087d9e4a1db51993ed94fdd088", "patch": "@@ -3315,15 +3315,15 @@ cxx_eval_outermost_constant_expr (tree t, bool allow_non_constant,\n \n   verify_constant (r, allow_non_constant, &non_constant_p, &overflow_p);\n \n-  if (TREE_CODE (t) != CONSTRUCTOR\n-      && cp_has_mutable_p (TREE_TYPE (t)))\n+  /* Mutable logic is a bit tricky: we want to allow initialization of\n+     constexpr variables with mutable members, but we can't copy those\n+     members to another constexpr variable.  */\n+  if (TREE_CODE (r) == CONSTRUCTOR\n+      && CONSTRUCTOR_MUTABLE_POISON (r))\n     {\n-      /* We allow a mutable type if the original expression was a\n-\t CONSTRUCTOR so that we can do aggregate initialization of\n-\t constexpr variables.  */\n       if (!allow_non_constant)\n-\terror (\"%qT cannot be the type of a complete constant expression \"\n-\t       \"because it has mutable sub-objects\", type);\n+\terror (\"%qE is not a constant expression because it refers to \"\n+\t       \"mutable subobjects of %qT\", t, type);\n       non_constant_p = true;\n     }\n "}, {"sha": "35423442ece7846e829b49f6162e86275f6f4e61", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/023d89c70b3912087d9e4a1db51993ed94fdd088/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/023d89c70b3912087d9e4a1db51993ed94fdd088/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=023d89c70b3912087d9e4a1db51993ed94fdd088", "patch": "@@ -109,6 +109,7 @@ c-common.h, not after.\n       DECLTYPE_FOR_LAMBDA_PROXY (in DECLTYPE_TYPE)\n       REF_PARENTHESIZED_P (in COMPONENT_REF, INDIRECT_REF)\n       AGGR_INIT_ZERO_FIRST (in AGGR_INIT_EXPR)\n+      CONSTRUCTOR_MUTABLE_POISON (in CONSTRUCTOR)\n    3: (TREE_REFERENCE_EXPR) (in NON_LVALUE_EXPR) (commented-out).\n       ICS_BAD_FLAG (in _CONV)\n       FN_TRY_BLOCK_P (in TRY_BLOCK)\n@@ -3497,6 +3498,11 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define CONSTRUCTOR_NO_IMPLICIT_ZERO(NODE) \\\n   (TREE_LANG_FLAG_1 (CONSTRUCTOR_CHECK (NODE)))\n \n+/* True if this CONSTRUCTOR should not be used as a variable initializer\n+   because it was loaded from a constexpr variable with mutable fields.  */\n+#define CONSTRUCTOR_MUTABLE_POISON(NODE) \\\n+  (TREE_LANG_FLAG_2 (CONSTRUCTOR_CHECK (NODE)))\n+\n #define DIRECT_LIST_INIT_P(NODE) \\\n    (BRACE_ENCLOSED_INITIALIZER_P (NODE) && CONSTRUCTOR_IS_DIRECT_INIT (NODE))\n "}, {"sha": "5748650ccf45c866241af6633dc7990ec932eb8a", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/023d89c70b3912087d9e4a1db51993ed94fdd088/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/023d89c70b3912087d9e4a1db51993ed94fdd088/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=023d89c70b3912087d9e4a1db51993ed94fdd088", "patch": "@@ -809,6 +809,10 @@ store_init_value (tree decl, tree init, vec<tree, va_gc>** cleanups, int flags)\n \t    value = cxx_constant_value (value, decl);\n \t}\n       value = maybe_constant_init (value, decl);\n+      if (TREE_CODE (value) == CONSTRUCTOR && cp_has_mutable_p (type))\n+\t/* Poison this CONSTRUCTOR so it can't be copied to another\n+\t   constexpr variable.  */\n+\tCONSTRUCTOR_MUTABLE_POISON (value) = true;\n       const_init = (reduced_constant_expression_p (value)\n \t\t    || error_operand_p (value));\n       DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl) = const_init;"}, {"sha": "c449c3aabc0d8185054910d382667fbf3dad3f79", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-mutable2.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/023d89c70b3912087d9e4a1db51993ed94fdd088/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-mutable2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/023d89c70b3912087d9e4a1db51993ed94fdd088/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-mutable2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-mutable2.C?ref=023d89c70b3912087d9e4a1db51993ed94fdd088", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/58102\n+// { dg-do compile { target c++11 } }\n+\n+struct S {\n+  mutable int n;\n+  constexpr S() : n() {}\n+};\n+\n+constexpr S s = {};\n+constexpr S s2 = s;\t\t// { dg-error \"mutable\" }"}]}