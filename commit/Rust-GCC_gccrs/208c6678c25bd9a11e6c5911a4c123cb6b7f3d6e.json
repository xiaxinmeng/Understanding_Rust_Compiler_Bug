{"sha": "208c6678c25bd9a11e6c5911a4c123cb6b7f3d6e", "node_id": "C_kwDOANBUbNoAKDIwOGM2Njc4YzI1YmQ5YTExZTZjNTkxMWE0YzEyM2NiNmI3ZjNkNmU", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-12-20T21:27:43Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-01-23T00:36:14Z"}, "message": "c++: lifetime extension with .* expression [PR53288]\n\nThis PR points out a case where we are not extending the lifetime of a\ntemporary when the subobject is denoted by a pointer-to-member operation.\nThese rules were clarified in C++20 by CWG1299.\n\nThere are other cases that also need to be handled under CWG1299, but are\nnot fixed by this patch.\n\n\tPR c++/53288\n\tDR 1299\n\ngcc/cp/ChangeLog:\n\n\t* call.cc (extend_ref_init_temps_1): Handle ptrmem expression.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/init/lifetime4.C: New test.", "tree": {"sha": "283ef541f7281b197a69c118355fde75b9468e7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/283ef541f7281b197a69c118355fde75b9468e7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/208c6678c25bd9a11e6c5911a4c123cb6b7f3d6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/208c6678c25bd9a11e6c5911a4c123cb6b7f3d6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/208c6678c25bd9a11e6c5911a4c123cb6b7f3d6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/208c6678c25bd9a11e6c5911a4c123cb6b7f3d6e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7823285a7ae8c516d2dfa96d426692bf2aef571e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7823285a7ae8c516d2dfa96d426692bf2aef571e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7823285a7ae8c516d2dfa96d426692bf2aef571e"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "a7de0e8e9a6eb027349f2807f6a9a6a3f4d4cc8c", "filename": "gcc/cp/call.cc", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/208c6678c25bd9a11e6c5911a4c123cb6b7f3d6e/gcc%2Fcp%2Fcall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/208c6678c25bd9a11e6c5911a4c123cb6b7f3d6e/gcc%2Fcp%2Fcall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.cc?ref=208c6678c25bd9a11e6c5911a4c123cb6b7f3d6e", "patch": "@@ -13952,6 +13952,34 @@ static tree\n extend_ref_init_temps_1 (tree decl, tree init, vec<tree, va_gc> **cleanups,\n \t\t\t tree *cond_guard)\n {\n+  /* CWG1299 (C++20): The temporary object to which the reference is bound or\n+     the temporary object that is the complete object of a subobject to which\n+     the reference is bound persists for the lifetime of the reference if the\n+     glvalue to which the reference is bound was obtained through one of the\n+     following:\n+     - a temporary materialization conversion ([conv.rval]),\n+     - ( expression ), where expression is one of these expressions,\n+     - subscripting ([expr.sub]) of an array operand, where that operand is one\n+       of these expressions,\n+     - a class member access ([expr.ref]) using the . operator where the left\n+       operand is one of these expressions and the right operand designates a\n+       non-static data member of non-reference type,\n+     - a pointer-to-member operation ([expr.mptr.oper]) using the .* operator\n+       where the left operand is one of these expressions and the right operand\n+       is a pointer to data member of non-reference type,\n+     - a const_cast ([expr.const.cast]), static_cast ([expr.static.cast]),\n+       dynamic_cast ([expr.dynamic.cast]), or reinterpret_cast\n+       ([expr.reinterpret.cast]) converting, without a user-defined conversion,\n+       a glvalue operand that is one of these expressions to a glvalue that\n+       refers to the object designated by the operand, or to its complete\n+       object or a subobject thereof,\n+     - a conditional expression ([expr.cond]) that is a glvalue where the\n+       second or third operand is one of these expressions, or\n+     - a comma expression ([expr.comma]) that is a glvalue where the right\n+       operand is one of these expressions.  */\n+\n+  /* FIXME several cases are still handled wrong (101572, 81420).  */\n+\n   tree sub = init;\n   tree *p;\n   STRIP_NOPS (sub);\n@@ -13962,6 +13990,16 @@ extend_ref_init_temps_1 (tree decl, tree init, vec<tree, va_gc> **cleanups,\n \t\t\t\t   cond_guard);\n       return init;\n     }\n+  if (TREE_CODE (sub) == POINTER_PLUS_EXPR\n+      && TYPE_PTRDATAMEM_P (TREE_TYPE (tree_strip_nop_conversions\n+\t\t\t\t       (TREE_OPERAND (sub, 1)))))\n+    {\n+      /* A pointer-to-member operation.  */\n+      TREE_OPERAND (sub, 0)\n+\t= extend_ref_init_temps_1 (decl, TREE_OPERAND (sub, 0), cleanups,\n+\t\t\t\t   cond_guard);\n+      return init;\n+    }\n   if (TREE_CODE (sub) == COND_EXPR)\n     {\n       tree cur_cond_guard = NULL_TREE;"}, {"sha": "4106af7070cc67dfcfe9c350cb98f7631b22ddd9", "filename": "gcc/testsuite/g++.dg/init/lifetime4.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/208c6678c25bd9a11e6c5911a4c123cb6b7f3d6e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Flifetime4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/208c6678c25bd9a11e6c5911a4c123cb6b7f3d6e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Flifetime4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Flifetime4.C?ref=208c6678c25bd9a11e6c5911a4c123cb6b7f3d6e", "patch": "@@ -0,0 +1,39 @@\n+// PR c++/53288\n+// { dg-do compile { target c++11 } }\n+\n+struct B {\n+   B(int data) : _data(data) { }\n+   ~B() { }\n+\n+   int _data;\n+\n+private:\n+   B() = delete;\n+   B(const B &) = delete;\n+   B(B &&) = delete;\n+};\n+\n+int c,d;\n+struct A {\n+   B b;\n+   A(int data) : b(data) { ++c; }\n+   ~A() { ++d; }\n+\n+private:\n+   A() = delete;\n+   A(const A &) = delete;\n+   A(A &&) = delete;\n+};\n+\n+template <class T>\n+void f(T t) {\n+  const B &b = A(1).*t;\n+  if (d) __builtin_abort ();\n+}\n+\n+int main() {\n+  const B &b = A(1).*(&A::b);\n+  if (d) __builtin_abort ();\n+\n+  f(&A::b);\n+}"}]}