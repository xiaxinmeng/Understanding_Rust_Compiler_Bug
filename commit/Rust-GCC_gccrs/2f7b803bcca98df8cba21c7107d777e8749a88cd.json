{"sha": "2f7b803bcca98df8cba21c7107d777e8749a88cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY3YjgwM2JjY2E5OGRmOGNiYTIxYzcxMDdkNzc3ZTg3NDlhODhjZA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-19T16:12:15Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-19T18:36:39Z"}, "message": "Refs should be used in the base ctor of BaseType\n\nRefs refers to the reference chain used in the type checking resolution of\nthis type. We use to eagerly replace the Inference Vars when they unify or\nare coerced or default.\n\nFixes #352", "tree": {"sha": "671bd3aff1b89c63b4266fc97970779523470f20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/671bd3aff1b89c63b4266fc97970779523470f20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f7b803bcca98df8cba21c7107d777e8749a88cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f7b803bcca98df8cba21c7107d777e8749a88cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f7b803bcca98df8cba21c7107d777e8749a88cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f7b803bcca98df8cba21c7107d777e8749a88cd/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eea221e39ead0f45e9ef91aaf1b5ed855a4a5d8b"}], "stats": {"total": 90, "additions": 20, "deletions": 70}, "files": [{"sha": "7f0ad35d0a326615af5f0124d176f38b58f59a21", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 20, "deletions": 70, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7b803bcca98df8cba21c7107d777e8749a88cd/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7b803bcca98df8cba21c7107d777e8749a88cd/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=2f7b803bcca98df8cba21c7107d777e8749a88cd", "patch": "@@ -1293,22 +1293,12 @@ class USizeType : public BaseType\n {\n public:\n   USizeType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n-    : BaseType (ref, ref, TypeKind::USIZE)\n-  {\n-    // TODO unused; should 'refs' be passed as the last argument to the\n-    // 'BaseType' constructor call?  Potential change in behavior (if 'refs' is\n-    // provided by caller)?\n-    (void) refs;\n-  }\n+    : BaseType (ref, ref, TypeKind::USIZE, refs)\n+  {}\n \n   USizeType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n-    : BaseType (ref, ty_ref, TypeKind::USIZE)\n-  {\n-    // TODO unused; should 'refs' be passed as the last argument to the\n-    // 'BaseType' constructor call?  Potential change in behavior (if 'refs' is\n-    // provided by caller)?\n-    (void) refs;\n-  }\n+    : BaseType (ref, ty_ref, TypeKind::USIZE, refs)\n+  {}\n \n   void accept_vis (TyVisitor &vis) override;\n   void accept_vis (TyConstVisitor &vis) const override;\n@@ -1327,22 +1317,12 @@ class ISizeType : public BaseType\n {\n public:\n   ISizeType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n-    : BaseType (ref, ref, TypeKind::ISIZE)\n-  {\n-    // TODO unused; should 'refs' be passed as the last argument to the\n-    // 'BaseType' constructor call?  Potential change in behavior (if 'refs' is\n-    // provided by caller)?\n-    (void) refs;\n-  }\n+    : BaseType (ref, ref, TypeKind::ISIZE, refs)\n+  {}\n \n   ISizeType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n-    : BaseType (ref, ty_ref, TypeKind::ISIZE)\n-  {\n-    // TODO unused; should 'refs' be passed as the last argument to the\n-    // 'BaseType' constructor call?  Potential change in behavior (if 'refs' is\n-    // provided by caller)?\n-    (void) refs;\n-  }\n+    : BaseType (ref, ty_ref, TypeKind::ISIZE, refs)\n+  {}\n \n   void accept_vis (TyVisitor &vis) override;\n   void accept_vis (TyConstVisitor &vis) const override;\n@@ -1361,22 +1341,12 @@ class CharType : public BaseType\n {\n public:\n   CharType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n-    : BaseType (ref, ref, TypeKind::CHAR)\n-  {\n-    // TODO unused; should 'refs' be passed as the last argument to the\n-    // 'BaseType' constructor call?  Potential change in behavior (if 'refs' is\n-    // provided by caller)?\n-    (void) refs;\n-  }\n+    : BaseType (ref, ref, TypeKind::CHAR, refs)\n+  {}\n \n   CharType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n-    : BaseType (ref, ty_ref, TypeKind::CHAR)\n-  {\n-    // TODO unused; should 'refs' be passed as the last argument to the\n-    // 'BaseType' constructor call?  Potential change in behavior (if 'refs' is\n-    // provided by caller)?\n-    (void) refs;\n-  }\n+    : BaseType (ref, ty_ref, TypeKind::CHAR, refs)\n+  {}\n \n   void accept_vis (TyVisitor &vis) override;\n   void accept_vis (TyConstVisitor &vis) const override;\n@@ -1396,23 +1366,13 @@ class ReferenceType : public BaseType\n public:\n   ReferenceType (HirId ref, TyVar base,\n \t\t std::set<HirId> refs = std::set<HirId> ())\n-    : BaseType (ref, ref, TypeKind::REF), base (base)\n-  {\n-    // TODO unused; should 'refs' be passed as the last argument to the\n-    // 'BaseType' constructor call?  Potential change in behavior (if 'refs' is\n-    // provided by caller)?\n-    (void) refs;\n-  }\n+    : BaseType (ref, ref, TypeKind::REF, refs), base (base)\n+  {}\n \n   ReferenceType (HirId ref, HirId ty_ref, TyVar base,\n \t\t std::set<HirId> refs = std::set<HirId> ())\n-    : BaseType (ref, ty_ref, TypeKind::REF), base (base)\n-  {\n-    // TODO unused; should 'refs' be passed as the last argument to the\n-    // 'BaseType' constructor call?  Potential change in behavior (if 'refs' is\n-    // provided by caller)?\n-    (void) refs;\n-  }\n+    : BaseType (ref, ty_ref, TypeKind::REF, refs), base (base)\n+  {}\n \n   BaseType *get_base () const;\n \n@@ -1445,22 +1405,12 @@ class StrType : public BaseType\n {\n public:\n   StrType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n-    : BaseType (ref, ref, TypeKind::STR)\n-  {\n-    // TODO unused; should 'refs' be passed as the last argument to the\n-    // 'BaseType' constructor call?  Potential change in behavior (if 'refs' is\n-    // provided by caller)?\n-    (void) refs;\n-  }\n+    : BaseType (ref, ref, TypeKind::STR, refs)\n+  {}\n \n   StrType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n-    : BaseType (ref, ty_ref, TypeKind::STR)\n-  {\n-    // TODO unused; should 'refs' be passed as the last argument to the\n-    // 'BaseType' constructor call?  Potential change in behavior (if 'refs' is\n-    // provided by caller)?\n-    (void) refs;\n-  }\n+    : BaseType (ref, ty_ref, TypeKind::STR, refs)\n+  {}\n \n   std::string get_name () const override final { return as_string (); }\n "}]}