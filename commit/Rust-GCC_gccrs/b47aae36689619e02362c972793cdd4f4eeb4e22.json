{"sha": "b47aae36689619e02362c972793cdd4f4eeb4e22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ3YWFlMzY2ODk2MTllMDIzNjJjOTcyNzkzY2RkNGY0ZWViNGUyMg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-19T19:52:55Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-19T19:52:55Z"}, "message": "cfgexpand.c: Use rtx_insn\n\n2014-08-19  David Malcolm  <dmalcolm@redhat.com>\n\n\t* cfgexpand.c (expand_used_vars): Strengthen return type from rtx\n\tto rtx_insn *; also for local \"var_end_seq\".\n\t(maybe_dump_rtl_for_gimple_stmt): Likewise for param \"since\".\n\t(maybe_cleanup_end_of_block): Likewise for param \"last\" and local\n\t\"insn\".\n\t(expand_gimple_cond): Likewise for locals \"last2\" and \"last\".\n\t(mark_transaction_restart_calls): Likewise for local \"insn\".\n\t(expand_gimple_stmt): Likewise for return type and locals \"last\"\n\tand \"insn\".\n\t(expand_gimple_tailcall): Likewise for locals \"last2\" and \"last\".\n\t(avoid_complex_debug_insns): Likewise for param \"insn\".\n\t(expand_debug_locations): Likewise for locals \"insn\", \"last\",\n\t\"prev_insn\" and \"insn2\".\n\t(expand_gimple_basic_block): Likewise for local \"last\".\n\t(construct_exit_block): Likewise for locals \"head\", \"end\",\n\t\"orig_end\".\n\t(pass_expand::execute): Likewise for locals \"var_seq\",\n\t\"var_ret_seq\", \"next\".\n\nFrom-SVN: r214190", "tree": {"sha": "a8eec6239e39509f7dac53df7e8efe13cebed52f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8eec6239e39509f7dac53df7e8efe13cebed52f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b47aae36689619e02362c972793cdd4f4eeb4e22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b47aae36689619e02362c972793cdd4f4eeb4e22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b47aae36689619e02362c972793cdd4f4eeb4e22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b47aae36689619e02362c972793cdd4f4eeb4e22/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3a4abd2f6c3c0606dff3ab56505c58abf79dd7e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a4abd2f6c3c0606dff3ab56505c58abf79dd7e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a4abd2f6c3c0606dff3ab56505c58abf79dd7e7"}], "stats": {"total": 65, "additions": 44, "deletions": 21}, "files": [{"sha": "bd2089e6ec63b57ba77c4b61d0bad2949056d844", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b47aae36689619e02362c972793cdd4f4eeb4e22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b47aae36689619e02362c972793cdd4f4eeb4e22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b47aae36689619e02362c972793cdd4f4eeb4e22", "patch": "@@ -1,3 +1,24 @@\n+2014-08-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* cfgexpand.c (expand_used_vars): Strengthen return type from rtx\n+\tto rtx_insn *; also for local \"var_end_seq\".\n+\t(maybe_dump_rtl_for_gimple_stmt): Likewise for param \"since\".\n+\t(maybe_cleanup_end_of_block): Likewise for param \"last\" and local\n+\t\"insn\".\n+\t(expand_gimple_cond): Likewise for locals \"last2\" and \"last\".\n+\t(mark_transaction_restart_calls): Likewise for local \"insn\".\n+\t(expand_gimple_stmt): Likewise for return type and locals \"last\"\n+\tand \"insn\".\n+\t(expand_gimple_tailcall): Likewise for locals \"last2\" and \"last\".\n+\t(avoid_complex_debug_insns): Likewise for param \"insn\".\n+\t(expand_debug_locations): Likewise for locals \"insn\", \"last\",\n+\t\"prev_insn\" and \"insn2\".\n+\t(expand_gimple_basic_block): Likewise for local \"last\".\n+\t(construct_exit_block): Likewise for locals \"head\", \"end\",\n+\t\"orig_end\".\n+\t(pass_expand::execute): Likewise for locals \"var_seq\",\n+\t\"var_ret_seq\", \"next\".\n+\n 2014-08-19  David Malcolm  <dmalcolm@redhat.com>\n \n \t* asan.h (asan_emit_stack_protection): Strengthen return type from"}, {"sha": "77ead1b39df354e838b4d25c74efe06f2d733c1c", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b47aae36689619e02362c972793cdd4f4eeb4e22/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b47aae36689619e02362c972793cdd4f4eeb4e22/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=b47aae36689619e02362c972793cdd4f4eeb4e22", "patch": "@@ -1674,12 +1674,12 @@ stack_protect_return_slot_p ()\n \n /* Expand all variables used in the function.  */\n \n-static rtx\n+static rtx_insn *\n expand_used_vars (void)\n {\n   tree var, outer_block = DECL_INITIAL (current_function_decl);\n   vec<tree> maybe_local_decls = vNULL;\n-  rtx var_end_seq = NULL_RTX;\n+  rtx_insn *var_end_seq = NULL;\n   unsigned i;\n   unsigned len;\n   bool gen_stack_protect_signal = false;\n@@ -1954,7 +1954,7 @@ expand_used_vars (void)\n    generated for STMT should have been appended.  */\n \n static void\n-maybe_dump_rtl_for_gimple_stmt (gimple stmt, rtx since)\n+maybe_dump_rtl_for_gimple_stmt (gimple stmt, rtx_insn *since)\n {\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n@@ -2014,7 +2014,7 @@ label_rtx_for_bb (basic_block bb ATTRIBUTE_UNUSED)\n    last instruction before the just emitted jump sequence.  */\n \n static void\n-maybe_cleanup_end_of_block (edge e, rtx last)\n+maybe_cleanup_end_of_block (edge e, rtx_insn *last)\n {\n   /* Special case: when jumpif decides that the condition is\n      trivial it emits an unconditional jump (and the necessary\n@@ -2029,7 +2029,7 @@ maybe_cleanup_end_of_block (edge e, rtx last)\n      normally isn't there in a cleaned CFG), fix it here.  */\n   if (BARRIER_P (get_last_insn ()))\n     {\n-      rtx insn;\n+      rtx_insn *insn;\n       remove_edge (e);\n       /* Now, we have a single successor block, if we have insns to\n \t insert on the remaining edge we potentially will insert\n@@ -2071,7 +2071,7 @@ expand_gimple_cond (basic_block bb, gimple stmt)\n   edge new_edge;\n   edge true_edge;\n   edge false_edge;\n-  rtx last2, last;\n+  rtx_insn *last2, *last;\n   enum tree_code code;\n   tree op0, op1;\n \n@@ -2217,7 +2217,7 @@ mark_transaction_restart_calls (gimple stmt)\n     {\n       struct tm_restart_node *n = (struct tm_restart_node *) *slot;\n       tree list = n->label_or_list;\n-      rtx insn;\n+      rtx_insn *insn;\n \n       for (insn = next_real_insn (get_last_insn ());\n \t   !CALL_P (insn);\n@@ -3352,11 +3352,11 @@ expand_gimple_stmt_1 (gimple stmt)\n    sets REG_EH_REGION notes if necessary and sets the current source\n    location for diagnostics.  */\n \n-static rtx\n+static rtx_insn *\n expand_gimple_stmt (gimple stmt)\n {\n   location_t saved_location = input_location;\n-  rtx last = get_last_insn ();\n+  rtx_insn *last = get_last_insn ();\n   int lp_nr;\n \n   gcc_assert (cfun);\n@@ -3379,7 +3379,7 @@ expand_gimple_stmt (gimple stmt)\n   lp_nr = lookup_stmt_eh_lp (stmt);\n   if (lp_nr)\n     {\n-      rtx insn;\n+      rtx_insn *insn;\n       for (insn = next_real_insn (last); insn;\n \t   insn = next_real_insn (insn))\n \t{\n@@ -3409,7 +3409,7 @@ expand_gimple_stmt (gimple stmt)\n static basic_block\n expand_gimple_tailcall (basic_block bb, gimple stmt, bool *can_fallthru)\n {\n-  rtx last2, last;\n+  rtx_insn *last2, *last;\n   edge e;\n   edge_iterator ei;\n   int probability;\n@@ -4782,7 +4782,7 @@ expand_debug_source_expr (tree exp)\n    deeper than that, create DEBUG_EXPRs and emit DEBUG_INSNs before INSN.  */\n \n static void\n-avoid_complex_debug_insns (rtx insn, rtx *exp_p, int depth)\n+avoid_complex_debug_insns (rtx_insn *insn, rtx *exp_p, int depth)\n {\n   rtx exp = *exp_p;\n \n@@ -4834,8 +4834,8 @@ avoid_complex_debug_insns (rtx insn, rtx *exp_p, int depth)\n static void\n expand_debug_locations (void)\n {\n-  rtx insn;\n-  rtx last = get_last_insn ();\n+  rtx_insn *insn;\n+  rtx_insn *last = get_last_insn ();\n   int save_strict_alias = flag_strict_aliasing;\n \n   /* New alias sets while setting up memory attributes cause\n@@ -4847,7 +4847,8 @@ expand_debug_locations (void)\n     if (DEBUG_INSN_P (insn))\n       {\n \ttree value = (tree)INSN_VAR_LOCATION_LOC (insn);\n-\trtx val, prev_insn, insn2;\n+\trtx val;\n+\trtx_insn *prev_insn, *insn2;\n \tenum machine_mode mode;\n \n \tif (value == NULL_TREE)\n@@ -4892,7 +4893,8 @@ expand_gimple_basic_block (basic_block bb, bool disable_tail_calls)\n   gimple_stmt_iterator gsi;\n   gimple_seq stmts;\n   gimple stmt = NULL;\n-  rtx note, last;\n+  rtx note;\n+  rtx_insn *last;\n   edge e;\n   edge_iterator ei;\n \n@@ -5324,14 +5326,14 @@ set_block_levels (tree block, int level)\n static void\n construct_exit_block (void)\n {\n-  rtx head = get_last_insn ();\n-  rtx end;\n+  rtx_insn *head = get_last_insn ();\n+  rtx_insn *end;\n   basic_block exit_block;\n   edge e, e2;\n   unsigned ix;\n   edge_iterator ei;\n   basic_block prev_bb = EXIT_BLOCK_PTR_FOR_FN (cfun)->prev_bb;\n-  rtx orig_end = BB_END (prev_bb);\n+  rtx_insn *orig_end = BB_END (prev_bb);\n \n   rtl_profile_for_bb (EXIT_BLOCK_PTR_FOR_FN (cfun));\n \n@@ -5624,7 +5626,7 @@ pass_expand::execute (function *fun)\n   sbitmap blocks;\n   edge_iterator ei;\n   edge e;\n-  rtx var_seq, var_ret_seq;\n+  rtx_insn *var_seq, *var_ret_seq;\n   unsigned i;\n \n   timevar_push (TV_OUT_OF_SSA);\n@@ -5841,7 +5843,7 @@ pass_expand::execute (function *fun)\n   if (var_ret_seq)\n     {\n       rtx after = return_label;\n-      rtx next = NEXT_INSN (after);\n+      rtx_insn *next = NEXT_INSN (after);\n       if (next && NOTE_INSN_BASIC_BLOCK_P (next))\n \tafter = next;\n       emit_insn_after (var_ret_seq, after);"}]}