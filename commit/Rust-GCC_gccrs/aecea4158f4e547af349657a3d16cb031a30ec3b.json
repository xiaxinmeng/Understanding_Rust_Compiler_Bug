{"sha": "aecea4158f4e547af349657a3d16cb031a30ec3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVjZWE0MTU4ZjRlNTQ3YWYzNDk2NTdhM2QxNmNiMDMxYTMwZWMzYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-09-21T22:43:25Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-09-21T22:43:25Z"}, "message": "libstdc++: Fix constraints for drop_view::begin() const [LWG 3482]\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (drop_view::begin()): Adjust constraints\n\tto match the correct condition for O(1) ranges::next (LWG 3482).\n\t* testsuite/std/ranges/adaptors/drop.cc: Check that iterator is\n\tcached for non-sized_range.", "tree": {"sha": "b8daa6e1dbccbceded81fb1dba99e9fc59091abe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8daa6e1dbccbceded81fb1dba99e9fc59091abe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aecea4158f4e547af349657a3d16cb031a30ec3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aecea4158f4e547af349657a3d16cb031a30ec3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aecea4158f4e547af349657a3d16cb031a30ec3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aecea4158f4e547af349657a3d16cb031a30ec3b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be3027e9c8366d92f68e6b3021c1cbe815648480", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be3027e9c8366d92f68e6b3021c1cbe815648480", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be3027e9c8366d92f68e6b3021c1cbe815648480"}], "stats": {"total": 145, "additions": 131, "deletions": 14}, "files": [{"sha": "1bf894dd57015232037f83f8e237557b6cf75db1", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aecea4158f4e547af349657a3d16cb031a30ec3b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aecea4158f4e547af349657a3d16cb031a30ec3b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=aecea4158f4e547af349657a3d16cb031a30ec3b", "patch": "@@ -2238,7 +2238,10 @@ namespace views\n       _Vp _M_base = _Vp();\n       range_difference_t<_Vp> _M_count = 0;\n \n-      static constexpr bool _S_needs_cached_begin = !random_access_range<_Vp>;\n+      // ranges::next(begin(base), count, end(base)) is O(1) if _Vp satisfies\n+      // both random_access_range and sized_range. Otherwise, cache its result.\n+      static constexpr bool _S_needs_cached_begin\n+\t= !(random_access_range<const _Vp> && sized_range<const _Vp>);\n       [[no_unique_address]]\n \t__detail::__maybe_present_t<_S_needs_cached_begin,\n \t\t\t\t    __detail::_CachedPosition<_Vp>>\n@@ -2260,9 +2263,12 @@ namespace views\n       base() &&\n       { return std::move(_M_base); }\n \n+      // This overload is disabled for simple views with constant-time begin().\n       constexpr auto\n-      begin() requires (!(__detail::__simple_view<_Vp>\n-\t\t\t  && random_access_range<_Vp>))\n+      begin()\n+\trequires (!(__detail::__simple_view<_Vp>\n+\t\t    && random_access_range<const _Vp>\n+\t\t    && sized_range<const _Vp>))\n       {\n \tif constexpr (_S_needs_cached_begin)\n \t  if (_M_cached_begin._M_has_value())\n@@ -2275,8 +2281,11 @@ namespace views\n \treturn __it;\n       }\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 3482. drop_view's const begin should additionally require sized_range\n       constexpr auto\n-      begin() const requires random_access_range<const _Vp>\n+      begin() const\n+\trequires random_access_range<const _Vp> && sized_range<const _Vp>\n       {\n \treturn ranges::next(ranges::begin(_M_base), _M_count,\n \t\t\t    ranges::end(_M_base));"}, {"sha": "5fe94b6750732c1d93f6fd4ad9b2f3eece975915", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/drop.cc", "status": "modified", "additions": 118, "deletions": 10, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aecea4158f4e547af349657a3d16cb031a30ec3b/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fdrop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aecea4158f4e547af349657a3d16cb031a30ec3b/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fdrop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fdrop.cc?ref=aecea4158f4e547af349657a3d16cb031a30ec3b", "patch": "@@ -26,6 +26,7 @@\n using __gnu_test::test_range;\n using __gnu_test::forward_iterator_wrapper;\n using __gnu_test::bidirectional_iterator_wrapper;\n+using __gnu_test::random_access_iterator_wrapper;\n \n namespace ranges = std::ranges;\n namespace views = ranges::views;\n@@ -123,32 +124,138 @@ struct test_wrapper : forward_iterator_wrapper<T>\n     forward_iterator_wrapper<T>::operator++();\n     return *this;\n   }\n+};\n \n-  test_wrapper\n+void\n+test07()\n+{\n+  int x[] = {1,2,3,4,5};\n+  test_range<int, test_wrapper> rx(x);\n+  auto v = rx | views::drop(3);\n+  VERIFY( test_wrapper<int>::increment_count == 0 );\n+  (void) v.begin();\n+  VERIFY( test_wrapper<int>::increment_count == 3 );\n+  (void) v.begin();\n+  VERIFY( test_wrapper<int>::increment_count == 3 );\n+  VERIFY( ranges::equal(v, (int[]){4,5}) );\n+  VERIFY( test_wrapper<int>::increment_count == 5 );\n+  VERIFY( ranges::equal(v, (int[]){4,5}) );\n+  VERIFY( test_wrapper<int>::increment_count == 7 );\n+}\n+\n+template<typename T>\n+struct ra_test_wrapper : random_access_iterator_wrapper<T>\n+{\n+  static inline int increment_count = 0;\n+\n+  using random_access_iterator_wrapper<T>::random_access_iterator_wrapper;\n+\n+  ra_test_wrapper() : random_access_iterator_wrapper<T>()\n+  { }\n+\n+  ra_test_wrapper\n+  operator++(int)\n+  {\n+    auto tmp = *this;\n+    ++*this;\n+    return tmp;\n+  }\n+\n+  ra_test_wrapper&\n+  operator++()\n+  {\n+    ++increment_count;\n+    random_access_iterator_wrapper<T>::operator++();\n+    return *this;\n+  }\n+\n+  ra_test_wrapper\n   operator--(int)\n   {\n     auto tmp = *this;\n     --*this;\n     return tmp;\n   }\n \n-  test_wrapper&\n+  ra_test_wrapper&\n   operator--()\n   {\n-    forward_iterator_wrapper<T>::operator--();\n+    random_access_iterator_wrapper<T>::operator--();\n+    return *this;\n+  }\n+\n+  ra_test_wrapper&\n+  operator+=(std::ptrdiff_t n)\n+  {\n+    random_access_iterator_wrapper<T>::operator+=(n);\n     return *this;\n   }\n+\n+  ra_test_wrapper&\n+  operator-=(std::ptrdiff_t n)\n+  { return *this += -n; }\n+\n+  ra_test_wrapper\n+  operator+(std::ptrdiff_t n) const\n+  {\n+    auto tmp = *this;\n+    return tmp += n;\n+  }\n+\n+  ra_test_wrapper\n+  operator-(std::ptrdiff_t n) const\n+  {\n+    auto tmp = *this;\n+    return tmp -= n;\n+  }\n+\n+  std::ptrdiff_t\n+  operator-(const ra_test_wrapper& it) const\n+  {\n+    return static_cast<const random_access_iterator_wrapper<T>&>(*this) - it;\n+  }\n+\n+  friend ra_test_wrapper\n+  operator+(std::ptrdiff_t n, const ra_test_wrapper& it)\n+  { return it + n; }\n };\n \n void\n-test07()\n+test08()\n {\n-  int x[] = {1,2,3,4,5};\n-  test_range<int, test_wrapper> rx(x);\n-  auto v = rx | views::drop(3);\n-  VERIFY( ranges::equal(v, (int[]){4,5}) );\n-  VERIFY( ranges::equal(v, (int[]){4,5}) );\n-  VERIFY( test_wrapper<int>::increment_count == 7 );\n+  // LWG 3482 - drop_view's const begin should additionally require sized_range\n+\n+  short a[10]{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n+  test_range<short, ra_test_wrapper> ra(a);\n+  static_assert( ranges::random_access_range<decltype(ra)> );\n+  ranges::subrange nonsized = {ra.begin(), std::unreachable_sentinel};\n+  using Nonsized = decltype(nonsized);\n+  static_assert( ranges::random_access_range<Nonsized> );\n+  static_assert( ! ranges::sized_range<Nonsized> );\n+  auto v1 = nonsized | views::drop(5);\n+  VERIFY( ra_test_wrapper<short>::increment_count == 0 );\n+  auto b1 = v1.begin();\n+  VERIFY( ra_test_wrapper<short>::increment_count == 5 );\n+  VERIFY( v1.begin() == b1 );\n+  VERIFY( ra_test_wrapper<short>::increment_count == 5 );\n+  VERIFY( *b1 == 5 );\n+  VERIFY( *v1.begin() == 5 );\n+  VERIFY( ra_test_wrapper<short>::increment_count == 5 );\n+\n+  long b[10]{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n+  test_range<long, ra_test_wrapper> rb(b);\n+  ranges::subrange sized = {rb.begin(), rb.begin()+6};\n+  using Sized = decltype(sized);\n+  static_assert( ranges::random_access_range<Sized> );\n+  static_assert( ranges::sized_range<Sized> );\n+  auto v2 = sized | views::drop(6);\n+  auto b2 = v2.begin();\n+  VERIFY( ra_test_wrapper<long>::increment_count == 0 );\n+  VERIFY( v2.begin() == b2 );\n+  VERIFY( ra_test_wrapper<long>::increment_count == 0 );\n+  VERIFY( *b2 == 6 );\n+  VERIFY( *v2.begin() == 6 );\n+  VERIFY( ra_test_wrapper<long>::increment_count == 0 );\n }\n \n int\n@@ -161,4 +268,5 @@ main()\n   test05();\n   test06();\n   test07();\n+  test08();\n }"}]}