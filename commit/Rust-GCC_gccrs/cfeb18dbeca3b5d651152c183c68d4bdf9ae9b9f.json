{"sha": "cfeb18dbeca3b5d651152c183c68d4bdf9ae9b9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZlYjE4ZGJlY2EzYjVkNjUxMTUyYzE4M2M2OGQ0YmRmOWFlOWI5Zg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-12-08T12:45:59Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-12-08T12:45:59Z"}, "message": "re PR libgcj/13176 (Revert PrintStream changes)\n\n2003-12-08  Michael Koch  <konqueror@gmx.de>\n\n\tFix for PR libgcj/13176.\n\t* java/io/PrintStream.java: Partly revert my previous patches to get\n\t(line_separator): New field.\n\t(converter): New field.\n\t(work): New field.\n\t(work_bytes): New field.\n\t(pw): Removed.\n\t(closed): Removed.\n\t(PrintStrean): Initialize converter and not pw.\n\t(checkError): Flush always, pw doesn't exist anymore.\n\t(close): Close underlying out stream.\n\t(print): New method.\n\t(writeChars): New method.\n\t(print): Use new internal print method.\n\t(println): Likewise.\n\nFrom-SVN: r74419", "tree": {"sha": "2cadccb2a988d0446646a56fa491435e0c773b5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2cadccb2a988d0446646a56fa491435e0c773b5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfeb18dbeca3b5d651152c183c68d4bdf9ae9b9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfeb18dbeca3b5d651152c183c68d4bdf9ae9b9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfeb18dbeca3b5d651152c183c68d4bdf9ae9b9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfeb18dbeca3b5d651152c183c68d4bdf9ae9b9f/comments", "author": null, "committer": null, "parents": [{"sha": "de9315db9c74db72425230b6af548c9ddfe02bbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de9315db9c74db72425230b6af548c9ddfe02bbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de9315db9c74db72425230b6af548c9ddfe02bbd"}], "stats": {"total": 215, "additions": 162, "deletions": 53}, "files": [{"sha": "814a35066ac8720a5e9ecce4f7562f7273299bb8", "filename": "libjava/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfeb18dbeca3b5d651152c183c68d4bdf9ae9b9f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfeb18dbeca3b5d651152c183c68d4bdf9ae9b9f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=cfeb18dbeca3b5d651152c183c68d4bdf9ae9b9f", "patch": "@@ -1,3 +1,21 @@\n+2003-12-08  Michael Koch  <konqueror@gmx.de>\n+\n+\tFix for PR libgcj/13176.\n+\t* java/io/PrintStream.java: Partly revert my previous patches to get\n+\t(line_separator): New field.\n+\t(converter): New field.\n+\t(work): New field.\n+\t(work_bytes): New field.\n+\t(pw): Removed.\n+\t(closed): Removed.\n+\t(PrintStrean): Initialize converter and not pw.\n+\t(checkError): Flush always, pw doesn't exist anymore.\n+\t(close): Close underlying out stream.\n+\t(print): New method.\n+\t(writeChars): New method.\n+\t(print): Use new internal print method.\n+\t(println): Likewise.\n+\n 2002-12-08  Bryce McKinlay  <bryce@mckinlay.net.nz>\n \n \t* java/util/Hashtable.java (Hashtable(Map)): Use putAll, not putAllInternal."}, {"sha": "2e9bfc4c22f65655d0cd65b008965a5a81b19568", "filename": "libjava/java/io/PrintStream.java", "status": "modified", "additions": 144, "deletions": 53, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfeb18dbeca3b5d651152c183c68d4bdf9ae9b9f/libjava%2Fjava%2Fio%2FPrintStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfeb18dbeca3b5d651152c183c68d4bdf9ae9b9f/libjava%2Fjava%2Fio%2FPrintStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPrintStream.java?ref=cfeb18dbeca3b5d651152c183c68d4bdf9ae9b9f", "patch": "@@ -38,6 +38,8 @@\n \n package java.io;\n \n+import gnu.gcj.convert.UnicodeToBytes;\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * Status:  Believed complete and correct to 1.3\n@@ -58,6 +60,21 @@\n  */\n public class PrintStream extends FilterOutputStream\n {\n+  /* Notice the implementation is quite similar to OutputStreamWriter.\n+   * This leads to some minor duplication, because neither inherits\n+   * from the other, and we want to maximize performance. */\n+\n+  // Line separator string.\n+  private static final char[] line_separator\n+    = System.getProperty(\"line.separator\").toCharArray();\n+  \n+  UnicodeToBytes converter;\n+\n+  // Work buffer of characters for converter.\n+  char[] work = new char[100];\n+  // Work buffer of bytes where we temporarily keep converter output.\n+  byte[] work_bytes = new byte[100];\n+\n   /**\n    * This boolean indicates whether or not an error has ever occurred\n    * on this stream.\n@@ -70,16 +87,6 @@ public class PrintStream extends FilterOutputStream\n    */\n   private boolean auto_flush;\n \n-  /**\n-   * The PrintWriter instance this object writes to\n-   */\n-  private PrintWriter pw;\n-\n-  /**\n-   * Lets us know if the stream is closed\n-   */\n-  private boolean closed;\n-\n   /**\n    * This method intializes a new <code>PrintStream</code> object to write\n    * to the specified output sink.\n@@ -108,7 +115,7 @@ public PrintStream (OutputStream out, boolean auto_flush)\n   {\n     super (out);\n \n-    pw = new PrintWriter (out, auto_flush);\n+    converter = UnicodeToBytes.getDefaultEncoder();\n     this.auto_flush = auto_flush;\n   }\n \n@@ -132,7 +139,7 @@ public PrintStream (OutputStream out, boolean auto_flush, String encoding)\n   {\n     super (out);\n \n-    pw = new PrintWriter (new OutputStreamWriter (out, encoding), auto_flush);\n+    converter = UnicodeToBytes.getEncoder (encoding);\n     this.auto_flush = auto_flush;\n   }\n \n@@ -147,10 +154,8 @@ public PrintStream (OutputStream out, boolean auto_flush, String encoding)\n    */\n   public boolean checkError ()\n   {\n-    if (!closed)\n-      flush ();\n-\n-    return error_occurred | pw.checkError ();\n+    flush ();\n+    return error_occurred;\n   }\n \n   /**\n@@ -167,8 +172,19 @@ protected void setError ()\n    */\n   public void close ()\n   {\n-    pw.close ();\n-    closed = true;\n+    try\n+      {\n+\tflush();\n+\tout.close();\n+      }\n+    catch (InterruptedIOException iioe)\n+      {\n+\tThread.currentThread().interrupt();\n+      }\n+    catch (IOException e)\n+      {\n+\tsetError ();\n+      }\n   }\n \n   /**\n@@ -177,7 +193,85 @@ public void close ()\n    */\n   public void flush ()\n   {\n-    pw.flush();\n+    try\n+      {\n+\tout.flush();\n+      }\n+    catch (InterruptedIOException iioe)\n+      {\n+\tThread.currentThread().interrupt();\n+      }\n+    catch (IOException e)\n+      {\n+\tsetError ();\n+      }\n+  }\n+\n+  private synchronized void print (String str, boolean println)\n+  {\n+    try\n+      {\n+        writeChars(str, 0, str.length());\n+\tif (println)\n+\t  writeChars(line_separator, 0, line_separator.length);\n+\tif (auto_flush)\n+\t  flush();\n+      }\n+    catch (InterruptedIOException iioe)\n+      {\n+\tThread.currentThread().interrupt();\n+      }\n+    catch (IOException e)\n+      {\n+\tsetError ();\n+      }\n+  }\n+\n+  private synchronized void print (char[] chars, int pos, int len,\n+\t\t\t\t   boolean println)\n+  {\n+    try\n+      {\n+        writeChars(chars, pos, len);\n+\tif (println)\n+\t  writeChars(line_separator, 0, line_separator.length);\n+\tif (auto_flush)\n+\t  flush();\n+      }\n+    catch (InterruptedIOException iioe)\n+      {\n+\tThread.currentThread().interrupt();\n+      }\n+    catch (IOException e)\n+      {\n+\tsetError ();\n+      }\n+  }\n+\n+  private void writeChars(char[] buf, int offset, int count)\n+    throws IOException\n+  {\n+    while (count > 0 || converter.havePendingBytes())\n+      {\n+\tconverter.setOutput(work_bytes, 0);\n+\tint converted = converter.write(buf, offset, count);\n+\toffset += converted;\n+\tcount -= converted;\n+\tout.write(work_bytes, 0, converter.count);\n+      }\n+  }\n+\n+  private void writeChars(String str, int offset, int count)\n+    throws IOException\n+  {\n+    while (count > 0 || converter.havePendingBytes())\n+      {\n+\tconverter.setOutput(work_bytes, 0);\n+\tint converted = converter.write(str, offset, count, work);\n+\toffset += converted;\n+\tcount -= converted;\n+\tout.write(work_bytes, 0, converter.count);\n+      }\n   }\n \n   /**\n@@ -189,7 +283,7 @@ public void flush ()\n    */\n   public void print (boolean bool)\n   {\n-    print (String.valueOf (bool));\n+    print(String.valueOf(bool), false);\n   }\n \n   /**\n@@ -200,7 +294,7 @@ public void print (boolean bool)\n    */\n   public void print (int inum)\n   {\n-    print (String.valueOf (inum));\n+    print(String.valueOf(inum), false);\n   }\n \n   /**\n@@ -211,7 +305,7 @@ public void print (int inum)\n    */\n   public void print (long lnum)\n   {\n-    print (String.valueOf (lnum));\n+    print(String.valueOf(lnum), false);\n   }\n \n   /**\n@@ -222,7 +316,7 @@ public void print (long lnum)\n    */\n   public void print (float fnum)\n   {\n-    print (String.valueOf (fnum));\n+    print(String.valueOf(fnum), false);\n   }\n \n   /**\n@@ -233,7 +327,7 @@ public void print (float fnum)\n    */\n   public void print (double dnum)\n   {\n-    print (String.valueOf (dnum));\n+    print(String.valueOf(dnum), false);\n   }\n \n   /**\n@@ -245,9 +339,7 @@ public void print (double dnum)\n    */\n   public void print (Object obj)\n   {\n-    // Don't call pw directly.  Convert to String so we scan for newline\n-    // characters on auto-flush;\n-    print (String.valueOf (obj));\n+    print(obj == null ? \"null\" : obj.toString(), false);\n   }\n \n   /**\n@@ -258,10 +350,7 @@ public void print (Object obj)\n    */\n   public void print (String str)\n   {\n-    pw.print (str);\n-\n-    if (auto_flush)\n-      flush ();\n+    print(str == null ? \"null\" : str, false);\n   }\n \n   /**\n@@ -270,9 +359,10 @@ public void print (String str)\n    *\n    * @param ch The <code>char</code> value to be printed\n    */\n-  public void print (char ch)\n+  public synchronized void print (char ch)\n   {\n-    print (String.valueOf (ch));\n+    work[0] = ch;\n+    print(work, 0, 1, false);\n   }\n \n   /**\n@@ -283,7 +373,7 @@ public void print (char ch)\n    */\n   public void print (char[] charArray)\n   {\n-    pw.print (charArray);\n+    print(charArray, 0, charArray.length, false);\n   }\n \n   /**\n@@ -293,7 +383,7 @@ public void print (char[] charArray)\n    */\n   public void println ()\n   {\n-    pw.println();\n+    print(line_separator, 0, line_separator.length, false);\n   }\n \n   /**\n@@ -307,7 +397,7 @@ public void println ()\n    */\n   public void println (boolean bool)\n   {\n-    println (String.valueOf (bool));\n+    print(String.valueOf(bool), true);\n   }\n \n   /**\n@@ -320,7 +410,7 @@ public void println (boolean bool)\n    */\n   public void println (int inum)\n   {\n-    println (String.valueOf (inum));\n+    print(String.valueOf(inum), true);\n   }\n \n   /**\n@@ -333,7 +423,7 @@ public void println (int inum)\n    */\n   public void println (long lnum)\n   {\n-    println (String.valueOf (lnum));\n+    print(String.valueOf(lnum), true);\n   }\n \n   /**\n@@ -346,7 +436,7 @@ public void println (long lnum)\n    */\n   public void println (float fnum)\n   {\n-    println (String.valueOf (fnum));\n+    print(String.valueOf(fnum), true);\n   }\n \n   /**\n@@ -359,7 +449,7 @@ public void println (float fnum)\n    */\n   public void println (double dnum)\n   {\n-    println (String.valueOf (dnum));\n+    print(String.valueOf(dnum), true);\n   }\n \n   /**\n@@ -373,7 +463,7 @@ public void println (double dnum)\n    */\n   public void println (Object obj)\n   {\n-    println (String.valueOf (obj));\n+    print(obj == null ? \"null\" : obj.toString(), true);\n   }\n \n   /**\n@@ -386,7 +476,7 @@ public void println (Object obj)\n    */\n   public void println (String str)\n   {\n-    pw.println (str);\n+    print (str == null ? \"null\" : str, true);\n   }\n \n   /**\n@@ -397,9 +487,10 @@ public void println (String str)\n    *\n    * @param ch The <code>char</code> value to be printed\n    */\n-  public void println (char ch)\n+  public synchronized void println (char ch)\n   {\n-    println (String.valueOf (ch));\n+    work[0] = ch;\n+    print(work, 0, 1, true);\n   }\n \n   /**\n@@ -412,7 +503,7 @@ public void println (char ch)\n    */\n   public void println (char[] charArray)\n   {\n-    pw.println (charArray);\n+    print(charArray, 0, charArray.length, true);\n   }\n \n   /**\n@@ -424,17 +515,17 @@ public void println (char[] charArray)\n    */\n   public void write (int oneByte)\n   {\n-    // We actually have to implement this method. Flush first so that\n-    // things get written in the right order.\n-    flush();\n-\n     try\n       {\n         out.write (oneByte & 0xff);\n         \n         if (auto_flush && (oneByte == '\\n'))\n           flush ();\n       }\n+    catch (InterruptedIOException iioe)\n+      {\n+\tThread.currentThread ().interrupt ();\n+      }\n     catch (IOException e)\n       {\n         setError ();\n@@ -451,17 +542,17 @@ public void write (int oneByte)\n    */\n   public void write (byte[] buffer, int offset, int len)\n   {\n-    // We actually have to implement this method too. Flush first so that\n-    // things get written in the right order.\n-    flush();\n-\n     try\n       {\n         out.write (buffer, offset, len);\n         \n         if (auto_flush)\n           flush ();\n       }\n+    catch (InterruptedIOException iioe)\n+      {\n+\tThread.currentThread ().interrupt ();\n+      }\n     catch (IOException e)\n       {\n         setError ();"}]}