{"sha": "64626fcaaaa2584a244db423d48e5bebfc6ade33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ2MjZmY2FhYWEyNTg0YTI0NGRiNDIzZDQ4ZTViZWJmYzZhZGUzMw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-09-22T09:56:54Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-09-22T09:56:54Z"}, "message": "Always qualify std::forward in <variant>\n\n\t* include/bits/uses_allocator.h (__uses_allocator_construct): Qualify\n\tstd::forward and ::new. Cast pointer to void*.\n\t* include/std/variant (_Variant_storage, _Union, _Variant_base)\n\t(__access, __visit_invoke, variant, visit): Qualify std::forward.\n\t* testsuite/20_util/variant/compile.cc: Test for ADL problems.\n\nFrom-SVN: r240344", "tree": {"sha": "11ec47740429344e5fc95aa87dece56a5a192a5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11ec47740429344e5fc95aa87dece56a5a192a5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64626fcaaaa2584a244db423d48e5bebfc6ade33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64626fcaaaa2584a244db423d48e5bebfc6ade33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64626fcaaaa2584a244db423d48e5bebfc6ade33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64626fcaaaa2584a244db423d48e5bebfc6ade33/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c42bc5d73bcfa5c631a4da35830a710a11d507b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c42bc5d73bcfa5c631a4da35830a710a11d507b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c42bc5d73bcfa5c631a4da35830a710a11d507b7"}], "stats": {"total": 123, "additions": 91, "deletions": 32}, "files": [{"sha": "080b4708894629d9b288373f9fa2a84455faaff7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64626fcaaaa2584a244db423d48e5bebfc6ade33/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64626fcaaaa2584a244db423d48e5bebfc6ade33/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=64626fcaaaa2584a244db423d48e5bebfc6ade33", "patch": "@@ -1,8 +1,16 @@\n+2016-09-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/uses_allocator.h (__uses_allocator_construct): Qualify\n+\tstd::forward and ::new. Cast pointer to void*.\n+\t* include/std/variant (_Variant_storage, _Union, _Variant_base)\n+\t(__access, __visit_invoke, variant, visit): Qualify std::forward.\n+\t* testsuite/20_util/variant/compile.cc: Test for ADL problems.\n+\n 2016-09-22  Tim Shen  <timshen@google.com>\n \n-\t* libstdc++-v3/include/std/variant (variant::operator=): Fix assignment\n+\t* include/std/variant (variant::operator=): Fix assignment\n \ton references.\n-\t* libstdc++-v3/testsuite/20_util/variant/compile.cc: Add test.\n+\t* testsuite/20_util/variant/compile.cc: Add test.\n \n 2016-09-22  Tim Shen  <timshen@google.com>\n "}, {"sha": "c7d14f33132768904f356447784bdad43142c2bc", "filename": "libstdc++-v3/include/bits/uses_allocator.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64626fcaaaa2584a244db423d48e5bebfc6ade33/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64626fcaaaa2584a244db423d48e5bebfc6ade33/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h?ref=64626fcaaaa2584a244db423d48e5bebfc6ade33", "patch": "@@ -144,24 +144,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, typename... _Args>\n     void __uses_allocator_construct_impl(__uses_alloc0 __a, _Tp* __ptr,\n \t\t\t\t\t _Args&&... __args)\n-    { new (__ptr) _Tp(forward<_Args>(__args)...); }\n+    { ::new ((void*)__ptr) _Tp(std::forward<_Args>(__args)...); }\n \n   template<typename _Tp, typename _Alloc, typename... _Args>\n     void __uses_allocator_construct_impl(__uses_alloc1<_Alloc> __a, _Tp* __ptr,\n \t\t\t\t\t _Args&&... __args)\n-    { new (__ptr) _Tp(allocator_arg, *__a._M_a, forward<_Args>(__args)...); }\n+    {\n+      ::new ((void*)__ptr) _Tp(allocator_arg, *__a._M_a,\n+\t\t\t       std::forward<_Args>(__args)...);\n+    }\n \n   template<typename _Tp, typename _Alloc, typename... _Args>\n     void __uses_allocator_construct_impl(__uses_alloc2<_Alloc> __a, _Tp* __ptr,\n \t\t\t\t\t _Args&&... __args)\n-    { new (__ptr) _Tp(forward<_Args>(__args)..., *__a._M_a); }\n+    { ::new ((void*)__ptr) _Tp(std::forward<_Args>(__args)..., *__a._M_a); }\n \n   template<typename _Tp, typename _Alloc, typename... _Args>\n     void __uses_allocator_construct(const _Alloc& __a, _Tp* __ptr,\n \t\t\t\t    _Args&&... __args)\n     {\n       __uses_allocator_construct_impl(__use_alloc<_Tp, _Alloc, _Args...>(__a),\n-\t\t\t\t      __ptr, forward<_Args>(__args)...);\n+\t\t\t\t      __ptr, std::forward<_Args>(__args)...);\n     }\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "ac483f3e6ab8e24ec979021b89f97de8bcfaebc6", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64626fcaaaa2584a244db423d48e5bebfc6ade33/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64626fcaaaa2584a244db423d48e5bebfc6ade33/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=64626fcaaaa2584a244db423d48e5bebfc6ade33", "patch": "@@ -298,7 +298,7 @@ namespace __variant\n \n       template<size_t _Np, typename... _Args>\n \tconstexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)\n-\t: _M_union(in_place<_Np>, forward<_Args>(__args)...)\n+\t: _M_union(in_place<_Np>, std::forward<_Args>(__args)...)\n \t{ }\n \n       ~_Variant_storage() = default;\n@@ -316,13 +316,13 @@ namespace __variant\n \n \ttemplate<typename... _Args>\n \t  constexpr _Union(in_place_index_t<0>, _Args&&... __args)\n-\t  : _M_first(in_place<0>, forward<_Args>(__args)...)\n+\t  : _M_first(in_place<0>, std::forward<_Args>(__args)...)\n \t  { }\n \n \ttemplate<size_t _Np, typename... _Args,\n \t\t typename = enable_if_t<0 < _Np && _Np < sizeof...(_Rest) + 1>>\n \t  constexpr _Union(in_place_index_t<_Np>, _Args&&... __args)\n-\t  : _M_rest(in_place<_Np - 1>, forward<_Args>(__args)...)\n+\t  : _M_rest(in_place<_Np - 1>, std::forward<_Args>(__args)...)\n \t  { }\n \n \t_Uninitialized<__storage<_First>> _M_first;\n@@ -386,7 +386,7 @@ namespace __variant\n       template<size_t _Np, typename... _Args>\n \tconstexpr explicit\n \t_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)\n-\t: _Storage(__i, forward<_Args>(__args)...), _M_index(_Np)\n+\t: _Storage(__i, std::forward<_Args>(__args)...), _M_index(_Np)\n \t{ }\n \n       template<typename _Alloc>\n@@ -426,7 +426,7 @@ namespace __variant\n \t  using _Storage =\n \t    __storage<variant_alternative_t<_Np, variant<_Types...>>>;\n \t  __uses_allocator_construct(__a, static_cast<_Storage*>(_M_storage()),\n-\t\t\t\t     forward<_Args>(__args)...);\n+\t\t\t\t     std::forward<_Args>(__args)...);\n \t  __glibcxx_assert(_M_index == _Np);\n \t}\n \n@@ -581,7 +581,7 @@ namespace __variant\n     decltype(auto) __access(_Variant&& __v)\n     {\n       return __get_alternative<__reserved_type_map<_Variant&&, __storage<_Tp>>>(\n-\t__get_storage(forward<_Variant>(__v)));\n+\t__get_storage(std::forward<_Variant>(__v)));\n     }\n \n   // A helper used to create variadic number of _To types.\n@@ -591,10 +591,11 @@ namespace __variant\n   // Call the actual visitor.\n   // _Args are qualified storage types.\n   template<typename _Visitor, typename... _Args>\n-    decltype(auto) __visit_invoke(_Visitor&& __visitor,\n-\t\t\t\t  _To_type<_Args, void*>... __ptrs)\n+    decltype(auto)\n+    __visit_invoke(_Visitor&& __visitor, _To_type<_Args, void*>... __ptrs)\n     {\n-      return forward<_Visitor>(__visitor)(__get_alternative<_Args>(__ptrs)...);\n+      return std::forward<_Visitor>(__visitor)(\n+\t  __get_alternative<_Args>(__ptrs)...);\n     }\n \n   // Used for storing multi-dimensional vtable.\n@@ -1010,15 +1011,15 @@ namespace __variant\n \tconstexpr\n \tvariant(_Tp&& __t)\n \tnoexcept(is_nothrow_constructible_v<__accepted_type<_Tp&&>, _Tp&&>)\n-\t: variant(in_place<__accepted_index<_Tp&&>>, forward<_Tp>(__t))\n+\t: variant(in_place<__accepted_index<_Tp&&>>, std::forward<_Tp>(__t))\n \t{ __glibcxx_assert(holds_alternative<__accepted_type<_Tp&&>>(*this)); }\n \n       template<typename _Tp, typename... _Args,\n \t       typename = enable_if_t<__exactly_once<_Tp>\n \t\t\t  && is_constructible_v<_Tp, _Args&&...>>>\n \tconstexpr explicit\n \tvariant(in_place_type_t<_Tp>, _Args&&... __args)\n-\t: variant(in_place<__index_of<_Tp>>, forward<_Args>(__args)...)\n+\t: variant(in_place<__index_of<_Tp>>, std::forward<_Args>(__args)...)\n \t{ __glibcxx_assert(holds_alternative<_Tp>(*this)); }\n \n       template<typename _Tp, typename _Up, typename... _Args,\n@@ -1029,15 +1030,15 @@ namespace __variant\n \tvariant(in_place_type_t<_Tp>, initializer_list<_Up> __il,\n \t\t_Args&&... __args)\n \t: variant(in_place<__index_of<_Tp>>, __il,\n-\t\t  forward<_Args>(__args)...)\n+\t\t  std::forward<_Args>(__args)...)\n \t{ __glibcxx_assert(holds_alternative<_Tp>(*this)); }\n \n       template<size_t _Np, typename... _Args,\n \t       typename = enable_if_t<\n \t\t is_constructible_v<__to_type<_Np>, _Args&&...>>>\n \tconstexpr explicit\n \tvariant(in_place_index_t<_Np>, _Args&&... __args)\n-\t: _Base(in_place<_Np>, forward<_Args>(__args)...),\n+\t: _Base(in_place<_Np>, std::forward<_Args>(__args)...),\n \t_Default_ctor_enabler(_Enable_default_constructor_tag{})\n \t{ __glibcxx_assert(index() == _Np); }\n \n@@ -1047,7 +1048,7 @@ namespace __variant\n \tconstexpr explicit\n \tvariant(in_place_index_t<_Np>, initializer_list<_Up> __il,\n \t\t_Args&&... __args)\n-\t: _Base(in_place<_Np>, __il, forward<_Args>(__args)...),\n+\t: _Base(in_place<_Np>, __il, std::forward<_Args>(__args)...),\n \t_Default_ctor_enabler(_Enable_default_constructor_tag{})\n \t{ __glibcxx_assert(index() == _Np); }\n \n@@ -1084,7 +1085,7 @@ namespace __variant\n \t\t && !is_same_v<decay_t<_Tp>, variant>, variant&>>\n \tvariant(allocator_arg_t, const _Alloc& __a, _Tp&& __t)\n \t: variant(allocator_arg, __a, in_place<__accepted_index<_Tp&&>>,\n-\t\t  forward<_Tp>(__t))\n+\t\t  std::forward<_Tp>(__t))\n \t{ __glibcxx_assert(holds_alternative<__accepted_type<_Tp&&>>(*this)); }\n \n       template<typename _Alloc, typename _Tp, typename... _Args,\n@@ -1095,7 +1096,7 @@ namespace __variant\n \tvariant(allocator_arg_t, const _Alloc& __a, in_place_type_t<_Tp>,\n \t\t_Args&&... __args)\n \t: variant(allocator_arg, __a, in_place<__index_of<_Tp>>,\n-\t\t  forward<_Args>(__args)...)\n+\t\t  std::forward<_Args>(__args)...)\n \t{ __glibcxx_assert(holds_alternative<_Tp>(*this)); }\n \n       template<typename _Alloc, typename _Tp, typename _Up, typename... _Args,\n@@ -1106,7 +1107,7 @@ namespace __variant\n \tvariant(allocator_arg_t, const _Alloc& __a, in_place_type_t<_Tp>,\n \t\tinitializer_list<_Up> __il, _Args&&... __args)\n \t: variant(allocator_arg, __a, in_place<__index_of<_Tp>>, __il,\n-\t\t  forward<_Args>(__args)...)\n+\t\t  std::forward<_Args>(__args)...)\n \t{ __glibcxx_assert(holds_alternative<_Tp>(*this)); }\n \n       template<typename _Alloc, size_t _Np, typename... _Args,\n@@ -1115,7 +1116,7 @@ namespace __variant\n \t\t   __to_type<_Np>, _Alloc, _Args&&...>>>\n \tvariant(allocator_arg_t, const _Alloc& __a, in_place_index_t<_Np>,\n \t\t_Args&&... __args)\n-\t: _Base(__a, in_place<_Np>, forward<_Args>(__args)...),\n+\t: _Base(__a, in_place<_Np>, std::forward<_Args>(__args)...),\n \t_Default_ctor_enabler(_Enable_default_constructor_tag{})\n \t{ __glibcxx_assert(index() == _Np); }\n \n@@ -1125,7 +1126,7 @@ namespace __variant\n \t\t   __to_type<_Np>, _Alloc, initializer_list<_Up>&, _Args&&...>>>\n \tvariant(allocator_arg_t, const _Alloc& __a, in_place_index_t<_Np>,\n \t\tinitializer_list<_Up> __il, _Args&&... __args)\n-\t: _Base(__a, in_place<_Np>, __il, forward<_Args>(__args)...),\n+\t: _Base(__a, in_place<_Np>, __il, std::forward<_Args>(__args)...),\n \t_Default_ctor_enabler(_Enable_default_constructor_tag{})\n \t{ __glibcxx_assert(index() == _Np); }\n \n@@ -1149,7 +1150,7 @@ namespace __variant\n \t  if (index() == __index)\n \t    std::get<__index>(*this) = std::forward<_Tp>(__rhs);\n \t  else\n-\t    this->emplace<__index>(forward<_Tp>(__rhs));\n+\t    this->emplace<__index>(std::forward<_Tp>(__rhs));\n \t  __glibcxx_assert(holds_alternative<__accepted_type<_Tp&&>>(*this));\n \t  return *this;\n \t}\n@@ -1159,7 +1160,7 @@ namespace __variant\n \t{\n \t  static_assert(__exactly_once<_Tp>,\n \t\t\t\"T should occur for exactly once in alternatives\");\n-\t  this->emplace<__index_of<_Tp>>(forward<_Args>(__args)...);\n+\t  this->emplace<__index_of<_Tp>>(std::forward<_Args>(__args)...);\n \t  __glibcxx_assert(holds_alternative<_Tp>(*this));\n \t}\n \n@@ -1168,7 +1169,7 @@ namespace __variant\n \t{\n \t  static_assert(__exactly_once<_Tp>,\n \t\t\t\"T should occur for exactly once in alternatives\");\n-\t  this->emplace<__index_of<_Tp>>(__il, forward<_Args>(__args)...);\n+\t  this->emplace<__index_of<_Tp>>(__il, std::forward<_Args>(__args)...);\n \t  __glibcxx_assert(holds_alternative<_Tp>(*this));\n \t}\n \n@@ -1181,7 +1182,7 @@ namespace __variant\n \t  __try\n \t    {\n \t      ::new (this) variant(in_place<_Np>,\n-\t\t\t\t   forward<_Args>(__args)...);\n+\t\t\t\t   std::forward<_Args>(__args)...);\n \t    }\n \t  __catch (...)\n \t    {\n@@ -1200,7 +1201,7 @@ namespace __variant\n \t  __try\n \t    {\n \t      ::new (this) variant(in_place<_Np>, __il,\n-\t\t\t\t   forward<_Args>(__args)...);\n+\t\t\t\t   std::forward<_Args>(__args)...);\n \t    }\n \t  __catch (...)\n \t    {\n@@ -1310,12 +1311,12 @@ namespace __variant\n     visit(_Visitor&& __visitor, _Variants&&... __variants)\n     {\n       using _Result_type =\n-\tdecltype(forward<_Visitor>(__visitor)(get<0>(__variants)...));\n+\tdecltype(std::forward<_Visitor>(__visitor)(get<0>(__variants)...));\n       static constexpr auto _S_vtable =\n \t__detail::__variant::__gen_vtable<\n \t  _Result_type, _Visitor&&, _Variants&&...>::_S_apply();\n       auto __func_ptr = _S_vtable._M_access(__variants.index()...);\n-      return (*__func_ptr)(forward<_Visitor>(__visitor),\n+      return (*__func_ptr)(std::forward<_Visitor>(__visitor),\n \t\t\t   __detail::__variant::__get_storage(__variants)...);\n     }\n "}, {"sha": "85a697f5e29eeb2155b348f5221a2297f8f9325b", "filename": "libstdc++-v3/testsuite/20_util/variant/compile.cc", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64626fcaaaa2584a244db423d48e5bebfc6ade33/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64626fcaaaa2584a244db423d48e5bebfc6ade33/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc?ref=64626fcaaaa2584a244db423d48e5bebfc6ade33", "patch": "@@ -418,3 +418,50 @@ void test_pr77641()\n \n   constexpr std::variant<X> v1 = X{};\n }\n+\n+namespace adl_trap\n+{\n+  struct X {\n+    X() = default;\n+    X(int) { }\n+    X(std::initializer_list<int>, const X&) { }\n+  };\n+  template<typename T> void move(T&) { }\n+  template<typename T> void forward(T&) { }\n+\n+  struct Visitor {\n+    template<typename T> void operator()(T&&) { }\n+  };\n+}\n+\n+void test_adl()\n+{\n+   using adl_trap::X;\n+   using std::allocator_arg;\n+   X x;\n+   std::allocator<int> a;\n+   std::initializer_list<int> il;\n+   adl_trap::Visitor vis;\n+\n+   std::variant<X> v0(x);\n+   v0 = x;\n+   v0.emplace<0>(x);\n+   v0.emplace<0>(il, x);\n+   visit(vis, v0);\n+   variant<X> v1{in_place<0>, x};\n+   variant<X> v2{in_place<X>, x};\n+   variant<X> v3{in_place<0>, il, x};\n+   variant<X> v4{in_place<X>, il, x};\n+   variant<X> v5{allocator_arg, a, in_place<0>, x};\n+   variant<X> v6{allocator_arg, a, in_place<X>, x};\n+   variant<X> v7{allocator_arg, a, in_place<0>, il, x};\n+   variant<X> v8{allocator_arg, a, in_place<X>, il, x};\n+   variant<X> v9{allocator_arg, a, in_place<X>, 1};\n+\n+   std::variant<X&> vr0(x);\n+   vr0 = x;\n+   variant<X&> vr1{in_place<0>, x};\n+   variant<X&> vr2{in_place<X&>, x};\n+   variant<X&> vr3{allocator_arg, a, in_place<0>, x};\n+   variant<X&> vr4{allocator_arg, a, in_place<X&>, x};\n+}"}]}