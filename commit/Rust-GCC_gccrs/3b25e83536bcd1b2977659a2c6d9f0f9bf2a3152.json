{"sha": "3b25e83536bcd1b2977659a2c6d9f0f9bf2a3152", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IyNWU4MzUzNmJjZDFiMjk3NzY1OWEyYzZkOWYwZjliZjJhMzE1Mg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-01-04T10:13:04Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-01-11T13:08:50Z"}, "message": "Port update-copyright.py to Python3\n\ncontrib/ChangeLog:\n\n\t* update-copyright.py: Port to python3 by guessing encoding\n\t(first utf8, then iso8859). Add 2 more ignores: .png and .pyc.", "tree": {"sha": "9100000076a842f3bd1b0a0bee84b309501342b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9100000076a842f3bd1b0a0bee84b309501342b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b25e83536bcd1b2977659a2c6d9f0f9bf2a3152", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b25e83536bcd1b2977659a2c6d9f0f9bf2a3152", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b25e83536bcd1b2977659a2c6d9f0f9bf2a3152", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b25e83536bcd1b2977659a2c6d9f0f9bf2a3152/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84684e0f78c20c51492722a5b95cda778ad77073", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84684e0f78c20c51492722a5b95cda778ad77073", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84684e0f78c20c51492722a5b95cda778ad77073"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "5603b8eac1675324d74f59ba537109f443be9ae1", "filename": "contrib/update-copyright.py", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b25e83536bcd1b2977659a2c6d9f0f9bf2a3152/contrib%2Fupdate-copyright.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b25e83536bcd1b2977659a2c6d9f0f9bf2a3152/contrib%2Fupdate-copyright.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fupdate-copyright.py?ref=3b25e83536bcd1b2977659a2c6d9f0f9bf2a3152", "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/python\n+#!/usr/bin/env python3\n #\n # Copyright (C) 2013-2020 Free Software Foundation, Inc.\n #\n@@ -64,7 +64,10 @@ class GenericFilter:\n     def __init__ (self):\n         self.skip_files = set()\n         self.skip_dirs = set()\n-        self.skip_extensions = set()\n+        self.skip_extensions = set([\n+                '.png',\n+                '.pyc',\n+                ])\n         self.fossilised_files = set()\n         self.own_files = set()\n \n@@ -307,7 +310,7 @@ def update_copyright (self, dir, filename, filter, file, line, match):\n             # If it looks like the copyright is incomplete, add the next line.\n             while not self.is_complete (match):\n                 try:\n-                    next_line = file.next()\n+                    next_line = file.readline()\n                 except StopIteration:\n                     break\n \n@@ -381,6 +384,15 @@ def update_copyright (self, dir, filename, filter, file, line, match):\n \n         return (line != orig_line, line, next_line)\n \n+    def guess_encoding (self, pathname):\n+        for encoding in ('utf8', 'iso8859'):\n+            try:\n+                open(pathname, 'r', encoding=encoding).read()\n+                return encoding\n+            except UnicodeDecodeError:\n+                pass\n+        return None\n+\n     def process_file (self, dir, filename, filter):\n         pathname = os.path.join (dir, filename)\n         if filename.endswith ('.tmp'):\n@@ -395,7 +407,8 @@ def process_file (self, dir, filename, filter):\n         changed = False\n         line_filter = filter.get_line_filter (dir, filename)\n         mode = None\n-        with open (pathname, 'r') as file:\n+        encoding = self.guess_encoding(pathname)\n+        with open (pathname, 'r', encoding=encoding) as file:\n             prev = None\n             mode = os.fstat (file.fileno()).st_mode\n             for line in file:\n@@ -421,7 +434,7 @@ def process_file (self, dir, filename, filter):\n         # If something changed, write the new file out.\n         if changed and self.errors.ok():\n             tmp_pathname = pathname + '.tmp'\n-            with open (tmp_pathname, 'w') as file:\n+            with open (tmp_pathname, 'w', encoding=encoding) as file:\n                 for line in lines:\n                     file.write (line)\n                 os.fchmod (file.fileno(), mode)\n@@ -432,7 +445,7 @@ def process_file (self, dir, filename, filter):\n     def process_tree (self, tree, filter):\n         for (dir, subdirs, filenames) in os.walk (tree):\n             # Don't recurse through directories that should be skipped.\n-            for i in xrange (len (subdirs) - 1, -1, -1):\n+            for i in range (len (subdirs) - 1, -1, -1):\n                 if filter.skip_dir (dir, subdirs[i]):\n                     del subdirs[i]\n "}]}