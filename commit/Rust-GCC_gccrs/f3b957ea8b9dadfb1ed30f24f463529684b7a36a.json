{"sha": "f3b957ea8b9dadfb1ed30f24f463529684b7a36a", "node_id": "C_kwDOANBUbNoAKGYzYjk1N2VhOGI5ZGFkZmIxZWQzMGYyNGY0NjM1Mjk2ODRiN2EzNmE", "commit": {"author": {"name": "Lewis Hyatt", "email": "lhyatt@gmail.com", "date": "2022-10-14T17:52:12Z"}, "committer": {"name": "Lewis Hyatt", "email": "lhyatt@gmail.com", "date": "2022-10-19T13:26:09Z"}, "message": "pch: Fix streaming of strings with embedded null bytes\n\nWhen a GTY'ed struct is streamed to PCH, any plain char* pointers it contains\n(whether they live in GC-controlled memory or not) will be marked for PCH\noutput by the routine gt_pch_note_object in ggc-common.cc. This routine\nspecial-cases plain char* strings, and in particular it uses strlen() to get\ntheir length. Thus it does not handle strings with embedded null bytes, but it\nis possible for something PCH cares about (such as a string literal token in a\nmacro definition) to contain such embedded nulls. To fix that up, add a new\nGTY option \"string_length\" so that gt_pch_note_object can be informed the\nactual length it ought to use, and use it in the relevant libcpp structs\n(cpp_string and ht_identifier) accordingly.\n\ngcc/ChangeLog:\n\n\t* gengtype.cc (output_escaped_param): Add missing const.\n\t(get_string_option): Add missing check for option type.\n\t(walk_type): Support new \"string_length\" GTY option.\n\t(write_types_process_field): Likewise.\n\t* ggc-common.cc (gt_pch_note_object): Add optional length argument.\n\t* ggc.h (gt_pch_note_object): Adjust prototype for new argument.\n\t(gt_pch_n_S2): Declare...\n\t* stringpool.cc (gt_pch_n_S2): ...new function.\n\t* doc/gty.texi: Document new GTY((string_length)) option.\n\nlibcpp/ChangeLog:\n\n\t* include/cpplib.h (struct cpp_string): Use new \"string_length\" GTY.\n\t* include/symtab.h (struct ht_identifier): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/pch/pch-string-nulls.C: New test.\n\t* g++.dg/pch/pch-string-nulls.Hs: New test.", "tree": {"sha": "3834aa6c8ae665d37326b8e06543cb77cd9a9524", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3834aa6c8ae665d37326b8e06543cb77cd9a9524"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3b957ea8b9dadfb1ed30f24f463529684b7a36a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3b957ea8b9dadfb1ed30f24f463529684b7a36a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3b957ea8b9dadfb1ed30f24f463529684b7a36a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3b957ea8b9dadfb1ed30f24f463529684b7a36a/comments", "author": null, "committer": null, "parents": [{"sha": "09fed44cabd50f3d8e050f91cc2db02364ce9176", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09fed44cabd50f3d8e050f91cc2db02364ce9176", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09fed44cabd50f3d8e050f91cc2db02364ce9176"}], "stats": {"total": 78, "additions": 68, "deletions": 10}, "files": [{"sha": "4f791b300ba44c82b88686edee33bffeac946f9e", "filename": "gcc/doc/gty.texi", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b957ea8b9dadfb1ed30f24f463529684b7a36a/gcc%2Fdoc%2Fgty.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b957ea8b9dadfb1ed30f24f463529684b7a36a/gcc%2Fdoc%2Fgty.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgty.texi?ref=f3b957ea8b9dadfb1ed30f24f463529684b7a36a", "patch": "@@ -196,7 +196,26 @@ static GTY((length(\"reg_known_value_size\"))) rtx *reg_known_value;\n Note that the @code{length} option is only meant for use with arrays of\n non-atomic objects, that is, objects that contain pointers pointing to\n other GTY-managed objects.  For other GC-allocated arrays and strings\n-you should use @code{atomic}.\n+you should use @code{atomic} or @code{string_length}.\n+\n+@findex string_length\n+@item string_length (\"@var{expression}\")\n+\n+In order to simplify production of PCH, a structure member that is a plain\n+array of bytes (an optionally @code{const} and/or @code{unsigned} @code{char\n+*}) is treated specially by the infrastructure. Even if such an array has not\n+been allocated in GC-controlled memory, it will still be written properly into\n+a PCH.  The machinery responsible for this needs to know the length of the\n+data; by default, the length is determined by calling @code{strlen} on the\n+pointer.  The @code{string_length} option specifies an alternate way to\n+determine the length, such as by inspecting another struct member:\n+\n+@smallexample\n+struct GTY(()) non_terminated_string @{\n+  size_t sz;\n+  const char * GTY((string_length (\"%h.sz\"))) data;\n+@};\n+@end smallexample\n \n @findex skip\n @item skip"}, {"sha": "28bf05e9c57fa6afbc19992f8de66717b1f96d88", "filename": "gcc/gengtype.cc", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b957ea8b9dadfb1ed30f24f463529684b7a36a/gcc%2Fgengtype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b957ea8b9dadfb1ed30f24f463529684b7a36a/gcc%2Fgengtype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.cc?ref=f3b957ea8b9dadfb1ed30f24f463529684b7a36a", "patch": "@@ -2403,7 +2403,7 @@ struct write_types_data\n   enum write_types_kinds kind;\n };\n \n-static void output_escaped_param (struct walk_type_data *d,\n+static void output_escaped_param (const struct walk_type_data *d,\n \t\t\t\t  const char *, const char *);\n static void output_mangled_typename (outf_p, const_type_p);\n static void walk_type (type_p t, struct walk_type_data *d);\n@@ -2537,7 +2537,7 @@ output_mangled_typename (outf_p of, const_type_p t)\n    print error messages.  */\n \n static void\n-output_escaped_param (struct walk_type_data *d, const char *param,\n+output_escaped_param (const struct walk_type_data *d, const char *param,\n \t\t      const char *oname)\n {\n   const char *p;\n@@ -2576,7 +2576,7 @@ const char *\n get_string_option (options_p opt, const char *key)\n {\n   for (; opt; opt = opt->next)\n-    if (strcmp (opt->name, key) == 0)\n+    if (opt->kind == OPTION_STRING && strcmp (opt->name, key) == 0)\n       return opt->info.string;\n   return NULL;\n }\n@@ -2700,6 +2700,8 @@ walk_type (type_p t, struct walk_type_data *d)\n       ;\n     else if (strcmp (oo->name, \"callback\") == 0)\n       ;\n+    else if (strcmp (oo->name, \"string_length\") == 0)\n+      ;\n     else\n       error_at_line (d->line, \"unknown option `%s'\\n\", oo->name);\n \n@@ -3251,7 +3253,22 @@ write_types_process_field (type_p f, const struct walk_type_data *d)\n \t{\n \t  oprintf (d->of, \"%*sgt_%s_\", d->indent, \"\", wtd->prefix);\n \t  output_mangled_typename (d->of, f);\n-\t  oprintf (d->of, \" (%s%s);\\n\", cast, d->val);\n+\n+\t  /* Check if we need to call the special pch note version\n+\t     for strings that takes an explicit length.  */\n+\t  const auto length_override\n+\t    = (f->kind == TYPE_STRING && !strcmp (wtd->prefix, \"pch_n\")\n+\t       ? get_string_option (d->opt, \"string_length\")\n+\t       : nullptr);\n+\t  if (length_override)\n+\t    {\n+\t      oprintf (d->of, \"2 (%s%s, \", cast, d->val);\n+\t      output_escaped_param (d, length_override, \"string_length\");\n+\t    }\n+\t  else\n+\t    oprintf (d->of, \" (%s%s\", cast, d->val);\n+\n+\t  oprintf (d->of, \");\\n\");\n \t  if (d->reorder_fn && wtd->reorder_note_routine)\n \t    oprintf (d->of, \"%*s%s (%s%s, %s%s, %s);\\n\", d->indent, \"\",\n \t\t     wtd->reorder_note_routine, cast, d->val, cast, d->val,"}, {"sha": "62da09d66a7372c6a79c0d4005f7a5740b1f2eb6", "filename": "gcc/ggc-common.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b957ea8b9dadfb1ed30f24f463529684b7a36a/gcc%2Fggc-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b957ea8b9dadfb1ed30f24f463529684b7a36a/gcc%2Fggc-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.cc?ref=f3b957ea8b9dadfb1ed30f24f463529684b7a36a", "patch": "@@ -253,7 +253,8 @@ static vec<void *> reloc_addrs_vec;\n \n int\n gt_pch_note_object (void *obj, void *note_ptr_cookie,\n-\t\t    gt_note_pointers note_ptr_fn)\n+\t\t    gt_note_pointers note_ptr_fn,\n+\t\t    size_t length_override)\n {\n   struct ptr_data **slot;\n \n@@ -273,7 +274,9 @@ gt_pch_note_object (void *obj, void *note_ptr_cookie,\n   (*slot)->obj = obj;\n   (*slot)->note_ptr_fn = note_ptr_fn;\n   (*slot)->note_ptr_cookie = note_ptr_cookie;\n-  if (note_ptr_fn == gt_pch_p_S)\n+  if (length_override != (size_t)-1)\n+    (*slot)->size = length_override;\n+  else if (note_ptr_fn == gt_pch_p_S)\n     (*slot)->size = strlen ((const char *)obj) + 1;\n   else\n     (*slot)->size = ggc_get_size (obj);"}, {"sha": "7bc74ec82b530f3d8ffca6fd81aa7f38d151abdf", "filename": "gcc/ggc.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b957ea8b9dadfb1ed30f24f463529684b7a36a/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b957ea8b9dadfb1ed30f24f463529684b7a36a/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=f3b957ea8b9dadfb1ed30f24f463529684b7a36a", "patch": "@@ -44,7 +44,8 @@ typedef void (*gt_handle_reorder) (void *, void *, gt_pointer_operator,\n \t\t\t\t   void *);\n \n /* Used by the gt_pch_n_* routines.  Register an object in the hash table.  */\n-extern int gt_pch_note_object (void *, void *, gt_note_pointers);\n+extern int gt_pch_note_object (void *, void *, gt_note_pointers,\n+\t\t\t       size_t length_override = (size_t)-1);\n \n /* Used by the gt_pch_p_* routines.  Register address of a callback\n    pointer.  */\n@@ -101,6 +102,7 @@ extern int ggc_marked_p\t(const void *);\n \n /* PCH and GGC handling for strings, mostly trivial.  */\n extern void gt_pch_n_S (const void *);\n+extern void gt_pch_n_S2 (const void *, size_t);\n extern void gt_ggc_m_S (const void *);\n \n /* End of GTY machinery API.  */"}, {"sha": "20dbef5580c79558b1e386962d0e9a550f0214bb", "filename": "gcc/stringpool.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b957ea8b9dadfb1ed30f24f463529684b7a36a/gcc%2Fstringpool.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b957ea8b9dadfb1ed30f24f463529684b7a36a/gcc%2Fstringpool.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstringpool.cc?ref=f3b957ea8b9dadfb1ed30f24f463529684b7a36a", "patch": "@@ -196,6 +196,13 @@ gt_pch_n_S (const void *x)\n \t\t      &gt_pch_p_S);\n }\n \n+void\n+gt_pch_n_S2 (const void *x, size_t string_len)\n+{\n+  gt_pch_note_object (CONST_CAST (void *, x), CONST_CAST (void *, x),\n+\t\t      &gt_pch_p_S, string_len);\n+}\n+\n \n /* User-callable entry point for marking string X.  */\n "}, {"sha": "dfeb21adf7173fe03971a97d049ff58de757cedc", "filename": "gcc/testsuite/g++.dg/pch/pch-string-nulls.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b957ea8b9dadfb1ed30f24f463529684b7a36a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fpch-string-nulls.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b957ea8b9dadfb1ed30f24f463529684b7a36a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fpch-string-nulls.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fpch-string-nulls.C?ref=f3b957ea8b9dadfb1ed30f24f463529684b7a36a", "patch": "@@ -0,0 +1,3 @@\n+// { dg-do compile { target c++11 } }\n+#include \"pch-string-nulls.H\"\n+static_assert (X[4] == '[' && X[5] == '!' && X[6] == ']', \"error\");"}, {"sha": "02f43174eef43b5efcab457021fe9938ce546da4", "filename": "gcc/testsuite/g++.dg/pch/pch-string-nulls.Hs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b957ea8b9dadfb1ed30f24f463529684b7a36a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fpch-string-nulls.Hs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b957ea8b9dadfb1ed30f24f463529684b7a36a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fpch-string-nulls.Hs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fpch-string-nulls.Hs?ref=f3b957ea8b9dadfb1ed30f24f463529684b7a36a"}, {"sha": "1d34c00669fca653c11c094cb6af6569a9945dd7", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b957ea8b9dadfb1ed30f24f463529684b7a36a/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b957ea8b9dadfb1ed30f24f463529684b7a36a/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=f3b957ea8b9dadfb1ed30f24f463529684b7a36a", "patch": "@@ -179,7 +179,11 @@ enum c_lang {CLK_GNUC89 = 0, CLK_GNUC99, CLK_GNUC11, CLK_GNUC17, CLK_GNUC2X,\n /* Payload of a NUMBER, STRING, CHAR or COMMENT token.  */\n struct GTY(()) cpp_string {\n   unsigned int len;\n-  const unsigned char *text;\n+\n+  /* TEXT is always null terminated (terminator not included in len); but this\n+     GTY markup arranges that PCH streaming works properly even if there is a\n+     null byte in the middle of the string.  */\n+  const unsigned char * GTY((string_length (\"1 + %h.len\"))) text;\n };\n \n /* Flags for the cpp_token structure.  */"}, {"sha": "8b45fd5c2ceb94d18c6547a97935991f951cade6", "filename": "libcpp/include/symtab.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b957ea8b9dadfb1ed30f24f463529684b7a36a/libcpp%2Finclude%2Fsymtab.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b957ea8b9dadfb1ed30f24f463529684b7a36a/libcpp%2Finclude%2Fsymtab.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fsymtab.h?ref=f3b957ea8b9dadfb1ed30f24f463529684b7a36a", "patch": "@@ -29,7 +29,10 @@ along with this program; see the file COPYING3.  If not see\n typedef struct ht_identifier ht_identifier;\n typedef struct ht_identifier *ht_identifier_ptr;\n struct GTY(()) ht_identifier {\n-  const unsigned char *str;\n+  /* This GTY markup arranges that the null-terminated identifier would still\n+     stream to PCH correctly, if a null byte were to make its way into an\n+     identifier somehow.  */\n+  const unsigned char * GTY((string_length (\"1 + %h.len\"))) str;\n   unsigned int len;\n   unsigned int hash_value;\n };"}]}