{"sha": "e08607323876b31915e5c5d24115f1937d6ee61f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA4NjA3MzIzODc2YjMxOTE1ZTVjNWQyNDExNWYxOTM3ZDZlZTYxZg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-01-22T22:24:30Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-01-22T22:24:30Z"}, "message": "re PR c++/9298 ([new parser] ICE with function-pointer-type template args)\n\n\tPR c++/9298\n\t* parser.c (cp_parser_consume_semicolon_at_end_of_statement): New\n\tfunction.\n\t(cp_parser_expression_statement): Use it.\n\t(cp_parser_explicit_instantiation): Likewise.\n\t* pt.c (do_decl_instantiation): Improve error handling logic.\n\n\tPR c++/9298\n\t* g++.dg/parse/template1.C: New test.\n\nFrom-SVN: r61618", "tree": {"sha": "a89731eddd2b91fbf4754ea78cbc882a4dbe84fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a89731eddd2b91fbf4754ea78cbc882a4dbe84fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e08607323876b31915e5c5d24115f1937d6ee61f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08607323876b31915e5c5d24115f1937d6ee61f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e08607323876b31915e5c5d24115f1937d6ee61f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08607323876b31915e5c5d24115f1937d6ee61f/comments", "author": null, "committer": null, "parents": [{"sha": "b4ec7fc7f0de5ef2f80066f87b12a168a5625c5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4ec7fc7f0de5ef2f80066f87b12a168a5625c5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4ec7fc7f0de5ef2f80066f87b12a168a5625c5a"}], "stats": {"total": 61, "additions": 48, "deletions": 13}, "files": [{"sha": "f8710774ef30a2b24c47980b2d253f3963678460", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08607323876b31915e5c5d24115f1937d6ee61f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08607323876b31915e5c5d24115f1937d6ee61f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e08607323876b31915e5c5d24115f1937d6ee61f", "patch": "@@ -1,3 +1,12 @@\n+2003-01-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/9298\n+\t* parser.c (cp_parser_consume_semicolon_at_end_of_statement): New\n+\tfunction.\n+\t(cp_parser_expression_statement): Use it.\n+\t(cp_parser_explicit_instantiation): Likewise.\n+\t* pt.c (do_decl_instantiation): Improve error handling logic.\n+\t\n 2003-01-22  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/9384"}, {"sha": "d64f0b4ef499b9d1cf5305a4de5604e29df76c16", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08607323876b31915e5c5d24115f1937d6ee61f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08607323876b31915e5c5d24115f1937d6ee61f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e08607323876b31915e5c5d24115f1937d6ee61f", "patch": "@@ -1766,6 +1766,8 @@ static bool cp_parser_skip_to_closing_parenthesis_or_comma\n   (cp_parser *);\n static void cp_parser_skip_to_end_of_statement\n   PARAMS ((cp_parser *));\n+static void cp_parser_consume_semicolon_at_end_of_statement\n+  (cp_parser *);\n static void cp_parser_skip_to_end_of_block_or_statement\n   PARAMS ((cp_parser *));\n static void cp_parser_skip_to_closing_brace\n@@ -2107,6 +2109,25 @@ cp_parser_skip_to_end_of_statement (parser)\n     }\n }\n \n+/* This function is called at the end of a statement or declaration.\n+   If the next token is a semicolon, it is consumed; otherwise, error\n+   recovery is attempted.  */\n+\n+static void\n+cp_parser_consume_semicolon_at_end_of_statement (cp_parser *parser)\n+{\n+  /* Look for the trailing `;'.  */\n+  if (!cp_parser_require (parser, CPP_SEMICOLON, \"`;'\"))\n+    {\n+      /* If there is additional (erroneous) input, skip to the end of\n+\t the statement.  */\n+      cp_parser_skip_to_end_of_statement (parser);\n+      /* If the next token is now a `;', consume it.  */\n+      if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))\n+\tcp_lexer_consume_token (parser->lexer);\n+    }\n+}\n+\n /* Skip tokens until we have consumed an entire block, or until we\n    have consumed a non-nested `;'.  */\n \n@@ -5628,15 +5649,7 @@ cp_parser_expression_statement (parser)\n       statement = NULL_TREE;\n     }\n   /* Consume the final `;'.  */\n-  if (!cp_parser_require (parser, CPP_SEMICOLON, \"`;'\"))\n-    {\n-      /* If there is additional (erroneous) input, skip to the end of\n-\t the statement.  */\n-      cp_parser_skip_to_end_of_statement (parser);\n-      /* If the next token is now a `;', consume it.  */\n-      if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))\n-\tcp_lexer_consume_token (parser->lexer);\n-    }\n+  cp_parser_consume_semicolon_at_end_of_statement (parser);\n \n   return statement;\n }\n@@ -8256,8 +8269,7 @@ cp_parser_explicit_instantiation (parser)\n   /* Trun access control back on.  */\n   scope_chain->check_access = flag_access_control;\n \n-  /* Look for the trailing `;'.  */\n-  cp_parser_require (parser, CPP_SEMICOLON, \"`;'\");\n+  cp_parser_consume_semicolon_at_end_of_statement (parser);\n }\n \n /* Parse an explicit-specialization."}, {"sha": "ca75cb0b0d65a1cacf85410cca346a8d6c50e121", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08607323876b31915e5c5d24115f1937d6ee61f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08607323876b31915e5c5d24115f1937d6ee61f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e08607323876b31915e5c5d24115f1937d6ee61f", "patch": "@@ -10219,9 +10219,9 @@ do_decl_instantiation (tree decl, tree storage)\n \t should handle VAR_DECLs as it currently handles\n \t FUNCTION_DECLs.  */\n       result = lookup_field (DECL_CONTEXT (decl), DECL_NAME (decl), 0, 0);\n-      if (result && TREE_CODE (result) != VAR_DECL)\n+      if (!result || TREE_CODE (result) != VAR_DECL)\n \t{\n-\t  error (\"no matching template for `%D' found\", result);\n+\t  error (\"no matching template for `%D' found\", decl);\n \t  return;\n \t}\n     }"}, {"sha": "fed915c899aaee82b36a88f38734f9baab443575", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08607323876b31915e5c5d24115f1937d6ee61f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08607323876b31915e5c5d24115f1937d6ee61f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e08607323876b31915e5c5d24115f1937d6ee61f", "patch": "@@ -1,5 +1,8 @@\n 2003-01-22  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/9298\n+\t* g++.dg/parse/template1.C: New test.\n+\n \tPR c++/9384\n \t* g++.dg/parse/using1.C: New test.\n "}, {"sha": "d7bbb073f812416a38a4a961618050afd428958c", "filename": "gcc/testsuite/g++.dg/parse/template1.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08607323876b31915e5c5d24115f1937d6ee61f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08607323876b31915e5c5d24115f1937d6ee61f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate1.C?ref=e08607323876b31915e5c5d24115f1937d6ee61f", "patch": "@@ -0,0 +1,11 @@\n+struct CPU {\n+    typedef int (*pfun)();\n+\n+    template <pfun step1>\n+    static int dispatch();\n+};\n+\n+template<int>\n+static int foo();\n+\n+template int CPU::dispatch<&template foo<2> > (); // { dg-error \"\" }"}]}