{"sha": "02f7334ac93f53ed06d881beb611e88be36dc56a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJmNzMzNGFjOTNmNTNlZDA2ZDg4MWJlYjYxMWU4OGJlMzZkYzU2YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-19T11:22:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-19T11:22:47Z"}, "message": "c++: Fix up handling of captured vars in lambdas in OpenMP clauses [PR93931]\n\nWithout the parser.c change we were ICEing on the testcase, because while the\nuses of the captured vars inside of the constructs were replaced with capture\nproxy decls, we didn't do that for decls in OpenMP clauses.\n\nWith that fixed, we don't ICE anymore, but the testcase is miscompiled and FAILs\nat runtime.  This is because the capture proxy decls have DECL_VALUE_EXPR and\nduring gimplification we were gimplifying those to their DECL_VALUE_EXPRs.\nThat is fine for shared vars, but for privatized ones we must not do that.\nSo that is what the cp-gimplify.c changes do.  Had to add a DECL_CONTEXT check\nbefore calling is_capture_proxy because some VAR_DECLs don't have DECL_CONTEXT\nset (yet) and is_capture_proxy relies on that being non-NULL always.\n\n2020-03-19  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/93931\n\t* parser.c (cp_parser_omp_var_list_no_open): Call process_outer_var_ref\n\ton outer_automatic_var_p decls.\n\t* cp-gimplify.c (cxx_omp_disregard_value_expr): Return true also for\n\tcapture proxy decls.\n\n\t* testsuite/libgomp.c++/pr93931.C: New test.", "tree": {"sha": "25393775d4aa2281b84448fb9a60525f6a2d8513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25393775d4aa2281b84448fb9a60525f6a2d8513"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02f7334ac93f53ed06d881beb611e88be36dc56a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02f7334ac93f53ed06d881beb611e88be36dc56a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02f7334ac93f53ed06d881beb611e88be36dc56a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02f7334ac93f53ed06d881beb611e88be36dc56a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb83e069ebadf0a724298f80a65b1775eff9cfab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb83e069ebadf0a724298f80a65b1775eff9cfab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb83e069ebadf0a724298f80a65b1775eff9cfab"}], "stats": {"total": 152, "additions": 146, "deletions": 6}, "files": [{"sha": "b5d429b5c3572a580ba8c0540e9f4ab8aa6b3465", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f7334ac93f53ed06d881beb611e88be36dc56a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f7334ac93f53ed06d881beb611e88be36dc56a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=02f7334ac93f53ed06d881beb611e88be36dc56a", "patch": "@@ -1,3 +1,11 @@\n+2020-03-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/93931\n+\t* parser.c (cp_parser_omp_var_list_no_open): Call process_outer_var_ref\n+\ton outer_automatic_var_p decls.\n+\t* cp-gimplify.c (cxx_omp_disregard_value_expr): Return true also for\n+\tcapture proxy decls.\n+\n 2020-03-18  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/94147 - mangling of lambdas assigned to globals"}, {"sha": "87c7e394b014126b4e1ff70488a0e9df31ab21fa", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f7334ac93f53ed06d881beb611e88be36dc56a/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f7334ac93f53ed06d881beb611e88be36dc56a/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=02f7334ac93f53ed06d881beb611e88be36dc56a", "patch": "@@ -2260,12 +2260,17 @@ cxx_omp_finish_clause (tree c, gimple_seq *)\n bool\n cxx_omp_disregard_value_expr (tree decl, bool shared)\n {\n-  return !shared\n-\t && VAR_P (decl)\n-\t && DECL_HAS_VALUE_EXPR_P (decl)\n-\t && DECL_ARTIFICIAL (decl)\n-\t && DECL_LANG_SPECIFIC (decl)\n-\t && DECL_OMP_PRIVATIZED_MEMBER (decl);\n+  if (shared)\n+    return false;\n+  if (VAR_P (decl)\n+      && DECL_HAS_VALUE_EXPR_P (decl)\n+      && DECL_ARTIFICIAL (decl)\n+      && DECL_LANG_SPECIFIC (decl)\n+      && DECL_OMP_PRIVATIZED_MEMBER (decl))\n+    return true;\n+  if (VAR_P (decl) && DECL_CONTEXT (decl) && is_capture_proxy (decl))\n+    return true;\n+  return false;\n }\n \n /* Fold expression X which is used as an rvalue if RVAL is true.  */"}, {"sha": "cbd5510a8fb3e4fe67b565a3751bdfd2d5846d02", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f7334ac93f53ed06d881beb611e88be36dc56a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f7334ac93f53ed06d881beb611e88be36dc56a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=02f7334ac93f53ed06d881beb611e88be36dc56a", "patch": "@@ -34059,6 +34059,8 @@ cp_parser_omp_var_list_no_open (cp_parser *parser, enum omp_clause_code kind,\n \t\t\t\t\t   token->location);\n \t    }\n \t}\n+      if (outer_automatic_var_p (decl))\n+\tdecl = process_outer_var_ref (decl, tf_warning_or_error);\n       if (decl == error_mark_node)\n \t;\n       else if (kind != 0)"}, {"sha": "f7cd873f498cf44c06e72c3a868d6b73f633779a", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f7334ac93f53ed06d881beb611e88be36dc56a/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f7334ac93f53ed06d881beb611e88be36dc56a/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=02f7334ac93f53ed06d881beb611e88be36dc56a", "patch": "@@ -1,3 +1,8 @@\n+2020-03-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/93931\n+\t* testsuite/libgomp.c++/pr93931.C: New test.\n+\n 2020-03-19  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* testsuite/libgomp.c-c++-common/function-not-offloaded.c: Add"}, {"sha": "4d4232ef3405b419aff4a260971e45b9e727c2dd", "filename": "libgomp/testsuite/libgomp.c++/pr93931.C", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f7334ac93f53ed06d881beb611e88be36dc56a/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr93931.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f7334ac93f53ed06d881beb611e88be36dc56a/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr93931.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr93931.C?ref=02f7334ac93f53ed06d881beb611e88be36dc56a", "patch": "@@ -0,0 +1,120 @@\n+// PR c++/93931\n+// { dg-do run }\n+// { dg-options \"-O2 -std=c++14\" }\n+\n+extern \"C\" void abort ();\n+\n+void\n+sink (int &x)\n+{\n+  int *volatile p;\n+  p = &x;\n+  (*p)++;\n+}\n+\n+int\n+foo ()\n+{\n+  int r = 0;\n+  [&r] () {\n+#pragma omp parallel for reduction(+ : r)\n+    for (int i = 0; i < 1024; ++i)\n+      r += i;\n+  } ();\n+  return r;\n+}\n+\n+int\n+bar ()\n+{\n+  int l = 0;\n+  [&l] () {\n+#pragma omp parallel for lastprivate (l)\n+    for (int i = 0; i < 1024; ++i)\n+      l = i;\n+  } ();\n+  return l;\n+}\n+\n+void\n+baz ()\n+{\n+  int f = 18;\n+  [&f] () {\n+#pragma omp parallel for firstprivate (f)\n+    for (int i = 0; i < 1024; ++i)\n+      {\n+\tsink (f);\n+\tf += 3;\n+\tsink (f);\n+\tif (f != 23)\n+\t  abort ();\n+\tsink (f);\n+\tf -= 7;\n+\tsink (f);\n+      }\n+  } ();\n+  if (f != 18)\n+    abort ();\n+}\n+\n+int\n+qux ()\n+{\n+  int r = 0;\n+  [&] () {\n+#pragma omp parallel for reduction(+ : r)\n+    for (int i = 0; i < 1024; ++i)\n+      r += i;\n+  } ();\n+  return r;\n+}\n+\n+int\n+corge ()\n+{\n+  int l = 0;\n+  [&] () {\n+#pragma omp parallel for lastprivate (l)\n+    for (int i = 0; i < 1024; ++i)\n+      l = i;\n+  } ();\n+  return l;\n+}\n+\n+void\n+garply ()\n+{\n+  int f = 18;\n+  [&] () {\n+#pragma omp parallel for firstprivate (f)\n+    for (int i = 0; i < 1024; ++i)\n+      {\n+\tsink (f);\n+\tf += 3;\n+\tsink (f);\n+\tif (f != 23)\n+\t  abort ();\n+\tsink (f);\n+\tf -= 7;\n+\tsink (f);\n+      }\n+  } ();\n+  if (f != 18)\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  if (foo () != 1024 * 1023 / 2)\n+    abort ();\n+  if (bar () != 1023)\n+    abort ();\n+  baz ();\n+  if (qux () != 1024 * 1023 / 2)\n+    abort ();\n+  if (corge () != 1023)\n+    abort ();\n+  garply ();\n+}"}]}