{"sha": "04afaf4575ff239279cfa34aff17101345451965", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRhZmFmNDU3NWZmMjM5Mjc5Y2ZhMzRhZmYxNzEwMTM0NTQ1MTk2NQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-06-15T19:31:32Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-06-16T17:19:44Z"}, "message": "c++: Don't allow designated initializers with non-aggregates [PR95369]\n\nAnother part of 95369 is that we accept designated initializers with\nnon-aggregate types.  That seems to be wrong since they're part of\naggregate initialization.  clang/icc also reject it.\n\nThere are multiple contexts where we can use designated initializers:\nfunction-like casts, member list initializers, NTTP, etc.  I've adjusted\nadd_list_candidates and implicit_conversion_error in order to to detect\nthis case.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95369\n\t* call.c (add_list_candidates): Return if a designated initializer\n\tis used with a non-aggregate.\n\t(implicit_conversion_error): Give an error for the case above.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95369\n\t* g++.dg/cpp2a/desig11.C: Adjust dg-error.\n\t* g++.dg/cpp2a/desig16.C: New test.", "tree": {"sha": "d091dc21ff9341deebe58246a414828e44ccb56d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d091dc21ff9341deebe58246a414828e44ccb56d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04afaf4575ff239279cfa34aff17101345451965", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04afaf4575ff239279cfa34aff17101345451965", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04afaf4575ff239279cfa34aff17101345451965", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04afaf4575ff239279cfa34aff17101345451965/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2661635323bd44410f1a154683eccecd2c163b46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2661635323bd44410f1a154683eccecd2c163b46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2661635323bd44410f1a154683eccecd2c163b46"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "1d95bd2d07bed5826772fcb9f4fb94355f445bf1", "filename": "gcc/cp/call.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04afaf4575ff239279cfa34aff17101345451965/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04afaf4575ff239279cfa34aff17101345451965/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=04afaf4575ff239279cfa34aff17101345451965", "patch": "@@ -3952,6 +3952,14 @@ add_list_candidates (tree fns, tree first_arg,\n       if (any_strictly_viable (*candidates))\n \treturn;\n     }\n+  else if (CONSTRUCTOR_IS_DESIGNATED_INIT (init_list)\n+\t   && !CP_AGGREGATE_TYPE_P (totype))\n+    {\n+      if (complain & tf_error)\n+\terror (\"designated initializers cannot be used with a \"\n+\t       \"non-aggregate type %qT\", totype);\n+      return;\n+    }\n \n   /* Expand the CONSTRUCTOR into a new argument vec.  */\n   vec<tree, va_gc> *new_args;\n@@ -4301,6 +4309,11 @@ implicit_conversion_error (location_t loc, tree type, tree expr)\n     instantiate_type (type, expr, complain);\n   else if (invalid_nonstatic_memfn_p (loc, expr, complain))\n     /* We gave an error.  */;\n+  else if (BRACE_ENCLOSED_INITIALIZER_P (expr)\n+\t   && CONSTRUCTOR_IS_DESIGNATED_INIT (expr)\n+\t   && !CP_AGGREGATE_TYPE_P (type))\n+    error_at (loc, \"designated initializers cannot be used with a \"\n+\t      \"non-aggregate type %qT\", type);\n   else\n     {\n       range_label_for_type_mismatch label (TREE_TYPE (expr), type);"}, {"sha": "a189fff2059632a94671a4c7907e686f00ee8eca", "filename": "gcc/testsuite/g++.dg/cpp2a/desig11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04afaf4575ff239279cfa34aff17101345451965/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04afaf4575ff239279cfa34aff17101345451965/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig11.C?ref=04afaf4575ff239279cfa34aff17101345451965", "patch": "@@ -11,4 +11,4 @@ int bar (_Complex int);\t\t\t// { dg-message \"initializing argument 1 of\" }\n int y = bar ({.real = 0, .imag = 1});\t// { dg-error \"cannot convert\" }\n \n int baz (std::initializer_list<int>);\n-int z = baz ({.one = 1, .two = 2, .three = 3});\t// { dg-error \"could not convert\" }\n+int z = baz ({.one = 1, .two = 2, .three = 3});\t// { dg-error \"designated initializers\" }"}, {"sha": "3edb68d24a4db0c94b7223dc95d2ee824981277d", "filename": "gcc/testsuite/g++.dg/cpp2a/desig16.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04afaf4575ff239279cfa34aff17101345451965/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04afaf4575ff239279cfa34aff17101345451965/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig16.C?ref=04afaf4575ff239279cfa34aff17101345451965", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/95369\n+// { dg-do compile { target c++20 } }\n+\n+struct S {\n+  unsigned a;\n+  unsigned b;\n+  constexpr S(unsigned _a, unsigned _b) noexcept: a{_a}, b{_b} { }\n+};\n+\n+template<S s> struct X { };\n+void g(S);\n+\n+struct Z {\n+  S s;\n+  Z() : s{.a = 1, .b = 2} { } // { dg-error \"designated initializers|no matching function\" }\n+};\n+\n+S\n+f()\n+{\n+  X<{.a = 1, .b = 2}> x; // { dg-error \"designated initializers\" }\n+  S s{ .a = 1, .b = 2 }; // { dg-error \"designated initializers|no matching function\" }\n+  S s2 = { .a = 1, .b = 2 }; // { dg-error \"designated initializers\" }\n+  S s3 = S{ .a = 1, .b = 2 }; // { dg-error \"designated initializers|no matching function\" }\n+  g({.a = 1, .b = 2}); // { dg-error \"designated initializers\" }\n+  g(S{.a = 1, .b = 2}); // { dg-error \"designated initializers|no matching function\" }\n+  return {.a = 1, .b = 2}; // { dg-error \"designated initializers\" }\n+}"}]}