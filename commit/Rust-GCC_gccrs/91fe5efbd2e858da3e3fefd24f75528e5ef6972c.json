{"sha": "91fe5efbd2e858da3e3fefd24f75528e5ef6972c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFmZTVlZmJkMmU4NThkYTNlM2ZlZmQyNGY3NTUyOGU1ZWY2OTcyYw==", "commit": {"author": {"name": "Sriraman Tallam", "email": "tmsriram@google.com", "date": "2012-06-12T02:55:20Z"}, "committer": {"name": "Sriraman Tallam", "email": "tmsriram@gcc.gnu.org", "date": "2012-06-12T02:55:20Z"}, "message": "libgcc-bsd.ver: Version symbol __cpu_indicator_init.\n\n2012-06-11  Sriraman Tallam  <tmsriram@google.com>\n\n\t* config/i386/libgcc-bsd.ver: Version symbol __cpu_indicator_init.\n\t* config/i386/libgcc-sol2.ver: Ditto.\n\t* config/i386/libgcc-glibc.ver: Ditto.\n\n\t* gcc.target/i386/builtin_target.c (vendor_signatures): New enum.\n\t(check_intel_cpu_model): New function.\n\t(check_amd_cpu_model): New function.\n\t(check_features): New function.\n\t(__get_cpuid_output): New function.\n\t(check_detailed): New function.\n\t(fn1): Rename to quick_check.\n\t(main): Update to call quick_check and call check_detailed.\n\nFrom-SVN: r188417", "tree": {"sha": "b12c8e95aa60c18439854115b683ae0ec7951f78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b12c8e95aa60c18439854115b683ae0ec7951f78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91fe5efbd2e858da3e3fefd24f75528e5ef6972c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91fe5efbd2e858da3e3fefd24f75528e5ef6972c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91fe5efbd2e858da3e3fefd24f75528e5ef6972c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91fe5efbd2e858da3e3fefd24f75528e5ef6972c/comments", "author": {"login": "tmsri", "id": 38991943, "node_id": "MDQ6VXNlcjM4OTkxOTQz", "avatar_url": "https://avatars.githubusercontent.com/u/38991943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmsri", "html_url": "https://github.com/tmsri", "followers_url": "https://api.github.com/users/tmsri/followers", "following_url": "https://api.github.com/users/tmsri/following{/other_user}", "gists_url": "https://api.github.com/users/tmsri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmsri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmsri/subscriptions", "organizations_url": "https://api.github.com/users/tmsri/orgs", "repos_url": "https://api.github.com/users/tmsri/repos", "events_url": "https://api.github.com/users/tmsri/events{/privacy}", "received_events_url": "https://api.github.com/users/tmsri/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3db91d7e0b9286ac4bf071a66cdb7412733d7e85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3db91d7e0b9286ac4bf071a66cdb7412733d7e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3db91d7e0b9286ac4bf071a66cdb7412733d7e85"}], "stats": {"total": 247, "additions": 243, "deletions": 4}, "files": [{"sha": "6dc98f4f617d205898afdfbc31eedff793148a27", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91fe5efbd2e858da3e3fefd24f75528e5ef6972c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91fe5efbd2e858da3e3fefd24f75528e5ef6972c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=91fe5efbd2e858da3e3fefd24f75528e5ef6972c", "patch": "@@ -1,3 +1,14 @@\n+2012-06-11  Sriraman Tallam  <tmsriram@google.com>\n+\n+\t* gcc.target/i386/builtin_target.c (vendor_signatures): New enum.\n+\t(check_intel_cpu_model): New function.\n+\t(check_amd_cpu_model): New function.\n+\t(check_features): New function.\n+\t(__get_cpuid_output): New function.\n+\t(check_detailed): New function.\n+\t(fn1): Rename to quick_check.\n+\t(main): Update to call quick_check and call check_detailed.\n+\n 2012-06-11  Richard Henderson  <rth@redhat.com>\n \n \t* lib/target-supports.exp"}, {"sha": "ab6b82e68534dd00e3fdd9b3cea2c71be5164385", "filename": "gcc/testsuite/gcc.target/i386/builtin_target.c", "status": "modified", "additions": 222, "deletions": 4, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91fe5efbd2e858da3e3fefd24f75528e5ef6972c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91fe5efbd2e858da3e3fefd24f75528e5ef6972c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c?ref=91fe5efbd2e858da3e3fefd24f75528e5ef6972c", "patch": "@@ -1,12 +1,228 @@\n /* This test checks if the __builtin_cpu_is and __builtin_cpu_supports calls\n-   are recognized. */\n+   are recognized.  It also independently uses CPUID to get cpu type and\n+   features supported and checks if the builtins correctly identify the\n+   platform.  The code to do the identification is adapted from\n+   libgcc/config/i386/cpuinfo.c.  */\n \n /* { dg-do run } */\n \n #include <assert.h>\n+#include \"cpuid.h\"\n \n-int\n-fn1 ()\n+enum vendor_signatures\n+{\n+  SIG_INTEL =\t0x756e6547 /* Genu */,\n+  SIG_AMD =\t0x68747541 /* Auth */\n+};\n+\n+/* Check if the Intel CPU model and sub-model are identified.  */\n+static void\n+check_intel_cpu_model (unsigned int family, unsigned int model,\n+\t\t       unsigned int brand_id)\n+{\n+  /* Parse family and model only if brand ID is 0. */\n+  if (brand_id == 0)\n+    {\n+      switch (family)\n+\t{\n+\tcase 0x5:\n+\t  /* Pentium.  */\n+\t  break;\n+\tcase 0x6:\n+\t  switch (model)\n+\t    {\n+\t    case 0x1c:\n+\t    case 0x26:\n+\t      /* Atom.  */\n+\t      assert (__builtin_cpu_is (\"atom\"));\n+\t      break;\n+\t    case 0x1a:\n+\t    case 0x1e:\n+\t    case 0x1f:\n+\t    case 0x2e:\n+\t      /* Nehalem.  */\n+\t      assert (__builtin_cpu_is (\"corei7\"));\n+\t      assert (__builtin_cpu_is (\"nehalem\"));\n+\t      break;\n+\t    case 0x25:\n+\t    case 0x2c:\n+\t    case 0x2f:\n+\t      /* Westmere.  */\n+\t      assert (__builtin_cpu_is (\"corei7\"));\n+\t      assert (__builtin_cpu_is (\"westmere\"));\n+\t      break;\n+\t    case 0x2a:\n+\t      /* Sandy Bridge.  */\n+\t      assert (__builtin_cpu_is (\"corei7\"));\n+\t      assert (__builtin_cpu_is (\"sandybridge\"));\n+\t      break;\n+\t    case 0x17:\n+\t    case 0x1d:\n+\t      /* Penryn.  */\n+\t    case 0x0f:\n+\t      /* Merom.  */\n+\t      assert (__builtin_cpu_is (\"core2\"));\n+\t      break;\n+\t    default:\n+\t      break;\n+\t    }\n+\t  break;\n+\tdefault:\n+\t  /* We have no idea.  */\n+\t  break;\n+\t}\n+    }\n+}\n+\n+/* Check if the AMD CPU model and sub-model are identified.  */\n+static void\n+check_amd_cpu_model (unsigned int family, unsigned int model)\n+{\n+  switch (family)\n+    {\n+    /* AMD Family 10h.  */\n+    case 0x10:\n+      switch (model)\n+\t{\n+\tcase 0x2:\n+\t  /* Barcelona.  */\n+\t  assert (__builtin_cpu_is (\"amdfam10h\"));\n+\t  assert (__builtin_cpu_is (\"barcelona\"));\n+\t  break;\n+\tcase 0x4:\n+\t  /* Shanghai.  */\n+\t  assert (__builtin_cpu_is (\"amdfam10h\"));\n+\t  assert (__builtin_cpu_is (\"shanghai\"));\n+\t  break;\n+\tcase 0x8:\n+\t  /* Istanbul.  */\n+\t  assert (__builtin_cpu_is (\"amdfam10h\"));\n+\t  assert (__builtin_cpu_is (\"istanbul\"));\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+      break;\n+    /* AMD Family 15h.  */\n+    case 0x15:\n+      assert (__builtin_cpu_is (\"amdfam15h\"));\n+      /* Bulldozer version 1.  */\n+      if ( model <= 0xf)\n+\tassert (__builtin_cpu_is (\"bdver1\"));\n+      /* Bulldozer version 2.  */\n+      if (model >= 0x10 && model <= 0x1f)\n+\tassert (__builtin_cpu_is (\"bdver2\"));\n+      break;\n+    default:\n+      break;\n+    }\n+}\n+\n+/* Check if the ISA features are identified.  */\n+static void\n+check_features (unsigned int ecx, unsigned int edx,\n+\t\tint max_cpuid_level)\n+{\n+  if (edx & bit_CMOV)\n+    assert (__builtin_cpu_supports (\"cmov\"));\n+  if (edx & bit_MMX)\n+    assert (__builtin_cpu_supports (\"mmx\"));\n+  if (edx & bit_SSE)\n+    assert (__builtin_cpu_supports (\"sse\"));\n+  if (edx & bit_SSE2)\n+    assert (__builtin_cpu_supports (\"sse2\"));\n+  if (ecx & bit_POPCNT)\n+    assert (__builtin_cpu_supports (\"popcnt\"));\n+  if (ecx & bit_SSE3)\n+    assert (__builtin_cpu_supports (\"sse3\"));\n+  if (ecx & bit_SSSE3)\n+    assert (__builtin_cpu_supports (\"ssse3\"));\n+  if (ecx & bit_SSE4_1)\n+    assert (__builtin_cpu_supports (\"sse4.1\"));\n+  if (ecx & bit_SSE4_2)\n+    assert (__builtin_cpu_supports (\"sse4.2\"));\n+  if (ecx & bit_AVX)\n+    assert (__builtin_cpu_supports (\"avx\"));\n+\n+  /* Get advanced features at level 7 (eax = 7, ecx = 0).  */\n+  if (max_cpuid_level >= 7)\n+    {\n+      unsigned int eax, ebx, ecx, edx;\n+      __cpuid_count (7, 0, eax, ebx, ecx, edx);\n+      if (ebx & bit_AVX2)\n+\tassert (__builtin_cpu_supports (\"avx2\"));\n+    }\n+}\n+\n+static int __attribute__ ((noinline))\n+__get_cpuid_output (unsigned int __level,\n+\t\t    unsigned int *__eax, unsigned int *__ebx,\n+\t\t    unsigned int *__ecx, unsigned int *__edx)\n+{\n+  return __get_cpuid (__level, __eax, __ebx, __ecx, __edx);\n+}\n+\n+static int\n+check_detailed ()\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  int max_level; \n+  unsigned int vendor;\n+  unsigned int model, family, brand_id;\n+  unsigned int extended_model, extended_family;\n+\n+  /* Assume cpuid insn present. Run in level 0 to get vendor id. */\n+  if (!__get_cpuid_output (0, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  vendor = ebx;\n+  max_level = eax;\n+\n+  if (max_level < 1)\n+    return 0;\n+\n+  if (!__get_cpuid_output (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  model = (eax >> 4) & 0x0f;\n+  family = (eax >> 8) & 0x0f;\n+  brand_id = ebx & 0xff;\n+  extended_model = (eax >> 12) & 0xf0;\n+  extended_family = (eax >> 20) & 0xff;\n+\n+  if (vendor == SIG_INTEL)\n+    {\n+      assert (__builtin_cpu_is (\"intel\"));\n+      /* Adjust family and model for Intel CPUs.  */\n+      if (family == 0x0f)\n+\t{\n+\t  family += extended_family;\n+\t  model += extended_model;\n+\t}\n+      else if (family == 0x06)\n+\tmodel += extended_model;\n+      check_intel_cpu_model (family, model, brand_id);\n+      check_features (ecx, edx, max_level);\n+    }\n+  else if (vendor == SIG_AMD)\n+    {\n+      assert (__builtin_cpu_is (\"amd\"));\n+      /* Adjust model and family for AMD CPUS. */\n+      if (family == 0x0f)\n+\t{\n+\t  family += extended_family;\n+\t  model += (extended_model << 4);\n+\t}\n+      check_amd_cpu_model (family, model);\n+      check_features (ecx, edx, max_level);\n+    }\n+\n+  return 0;\n+}\n+\n+static int\n+quick_check ()\n {\n   /* Check CPU Features.  */\n   assert (__builtin_cpu_supports (\"cmov\") >= 0);\n@@ -68,5 +284,7 @@ fn1 ()\n int main ()\n {\n   __builtin_cpu_init ();\n-  return fn1 ();\n+  quick_check ();\n+  check_detailed ();\n+  return 0;\n }"}, {"sha": "9308090e32c9694644e2276256d075ceec96d83f", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91fe5efbd2e858da3e3fefd24f75528e5ef6972c/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91fe5efbd2e858da3e3fefd24f75528e5ef6972c/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=91fe5efbd2e858da3e3fefd24f75528e5ef6972c", "patch": "@@ -1,3 +1,9 @@\n+2012-06-11  Sriraman Tallam  <tmsriram@google.com>\n+\n+\t* config/i386/libgcc-bsd.ver: Version symbol __cpu_indicator_init.\n+\t* config/i386/libgcc-sol2.ver: Ditto.\n+\t* config/i386/libgcc-glibc.ver: Ditto.\n+\n 2012-06-11  Roland McGrath  <mcgrathr@google.com>\n \n \t* gthr-posix.h [neither FreeBSD nor Solaris] (__gthread_active_p):"}, {"sha": "0c4b47496bf851cd65bccd38cb4fc9fc7b70a988", "filename": "libgcc/config/i386/libgcc-bsd.ver", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91fe5efbd2e858da3e3fefd24f75528e5ef6972c/libgcc%2Fconfig%2Fi386%2Flibgcc-bsd.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91fe5efbd2e858da3e3fefd24f75528e5ef6972c/libgcc%2Fconfig%2Fi386%2Flibgcc-bsd.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Flibgcc-bsd.ver?ref=91fe5efbd2e858da3e3fefd24f75528e5ef6972c", "patch": "@@ -109,4 +109,5 @@ GCC_4.6.0 {\n \n GCC_4.8.0 {\n   __cpu_model\n+  __cpu_indicator_init\n }"}, {"sha": "3bfb0286c297baa6d6e26a135b7e7bfe75c7157f", "filename": "libgcc/config/i386/libgcc-glibc.ver", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91fe5efbd2e858da3e3fefd24f75528e5ef6972c/libgcc%2Fconfig%2Fi386%2Flibgcc-glibc.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91fe5efbd2e858da3e3fefd24f75528e5ef6972c/libgcc%2Fconfig%2Fi386%2Flibgcc-glibc.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Flibgcc-glibc.ver?ref=91fe5efbd2e858da3e3fefd24f75528e5ef6972c", "patch": "@@ -150,6 +150,7 @@ GCC_4.3.0 {\n \n GCC_4.8.0 {\n   __cpu_model\n+  __cpu_indicator_init\n }\n %else\n GCC_4.4.0 {\n@@ -190,5 +191,6 @@ GCC_4.5.0 {\n \n GCC_4.8.0 {\n   __cpu_model\n+  __cpu_indicator_init\n }\n %endif"}, {"sha": "0aa0499b869f3f5df21cea3ce27bd3c7833e38b8", "filename": "libgcc/config/i386/libgcc-sol2.ver", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91fe5efbd2e858da3e3fefd24f75528e5ef6972c/libgcc%2Fconfig%2Fi386%2Flibgcc-sol2.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91fe5efbd2e858da3e3fefd24f75528e5ef6972c/libgcc%2Fconfig%2Fi386%2Flibgcc-sol2.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Flibgcc-sol2.ver?ref=91fe5efbd2e858da3e3fefd24f75528e5ef6972c", "patch": "@@ -109,4 +109,5 @@ GCC_4.5.0 {\n \n GCC_4.8.0 {\n   __cpu_model\n+  __cpu_indicator_init\n }"}]}