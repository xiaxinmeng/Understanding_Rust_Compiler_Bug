{"sha": "59c83dbf283e0dcf89ecfcfcbab856682291842a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTljODNkYmYyODNlMGRjZjg5ZWNmY2ZjYmFiODU2NjgyMjkxODQyYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2001-12-12T19:12:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2001-12-12T19:12:16Z"}, "message": "c-typeck.c (digest_init): Allow initializing static storage duration objects with compound literals.\n\n\t* c-typeck.c (digest_init): Allow initializing\n\tstatic storage duration objects with compound literals.\n\t* doc/extend.texi (Compound literals): Document the extension.\n\n\t* gcc.dg/gnu89-init-1.c: New test.\n\nFrom-SVN: r47945", "tree": {"sha": "52579c466b178af3b34b3b7f1c35b83542ee7516", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52579c466b178af3b34b3b7f1c35b83542ee7516"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59c83dbf283e0dcf89ecfcfcbab856682291842a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59c83dbf283e0dcf89ecfcfcbab856682291842a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59c83dbf283e0dcf89ecfcfcbab856682291842a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59c83dbf283e0dcf89ecfcfcbab856682291842a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3af37d3f59fae068635c004403868f317eb732af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af37d3f59fae068635c004403868f317eb732af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3af37d3f59fae068635c004403868f317eb732af"}], "stats": {"total": 86, "additions": 84, "deletions": 2}, "files": [{"sha": "acd75f9769e36eef64f0fd5275f4e0bc48d35b09", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59c83dbf283e0dcf89ecfcfcbab856682291842a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59c83dbf283e0dcf89ecfcfcbab856682291842a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59c83dbf283e0dcf89ecfcfcbab856682291842a", "patch": "@@ -1,3 +1,9 @@\n+2001-12-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-typeck.c (digest_init): Allow initializing\n+\tstatic storage duration objects with compound literals.\n+\t* doc/extend.texi (Compound literals): Document the extension.\n+\n 2001-12-12  Richard Henderson  <rth@redhat.com>\n \n \t* emit-rtl.c (adjust_address_1): Always copy address to avoid"}, {"sha": "f3f7d09696404d76b139302c84fa36161ede0d97", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59c83dbf283e0dcf89ecfcfcbab856682291842a/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59c83dbf283e0dcf89ecfcfcbab856682291842a/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=59c83dbf283e0dcf89ecfcfcbab856682291842a", "patch": "@@ -4780,8 +4780,19 @@ digest_init (type, init, require_constant, constructor_constant)\n     {\n       if (code == POINTER_TYPE)\n \tinside_init = default_function_array_conversion (inside_init);\n-      else if (code == ARRAY_TYPE && TREE_CODE (inside_init) != STRING_CST\n-\t       && TREE_CODE (inside_init) != CONSTRUCTOR)\n+\n+      if (require_constant && !flag_isoc99\n+\t  && TREE_CODE (inside_init) == COMPOUND_LITERAL_EXPR)\n+\t{\n+\t  /* As an extension, allow initializing objects with static storage\n+\t     duration with compound literals (which are then treated just as\n+\t     the brace enclosed list they contain).  */\n+\t  tree decl = COMPOUND_LITERAL_EXPR_DECL (inside_init);\n+\t  inside_init = DECL_INITIAL (decl);\n+\t}\n+\n+      if (code == ARRAY_TYPE && TREE_CODE (inside_init) != STRING_CST\n+\t  && TREE_CODE (inside_init) != CONSTRUCTOR)\n \t{\n \t  error_init (\"array initialized from non-constant array expression\");\n \t  return error_mark_node;"}, {"sha": "9b97805f151b46a535fa23ed893cfdd5394896c1", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59c83dbf283e0dcf89ecfcfcbab856682291842a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59c83dbf283e0dcf89ecfcfcbab856682291842a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=59c83dbf283e0dcf89ecfcfcbab856682291842a", "patch": "@@ -1649,6 +1649,30 @@ Compound literals for scalar types and union types are is\n also allowed, but then the compound literal is equivalent\n to a cast.\n \n+As a GNU extension, GCC allows initialization of objects with static storage\n+duration by compound literals (which is not possible in ISO C99, because\n+the initializer is not a constant).\n+It is handled as if the object was initialized only with the bracket\n+enclosed list if compound literal's and object types match.\n+The initializer list of the compound literal must be constant.\n+If the object being initialized has array type of unknown size, the size is\n+determined by compound literal's initializer list, not by the size of the\n+compound literal.\n+\n+@example\n+static struct foo x = (struct foo) @{1, 'a', 'b'@};\n+static int y[] = (int []) @{1, 2, 3@};\n+static int z[] = (int [3]) @{1@};\n+@end example\n+\n+@noindent\n+The above lines are equivalent to the following:\n+@example\n+static struct foo x = @{1, 'a', 'b'@};\n+static int y[] = @{1, 2, 3@};\n+static int z[] = @{1@};\n+@end example\n+\n @node Designated Inits\n @section Designated Initializers\n @cindex initializers with labeled elements"}, {"sha": "489171423d41d9afaba484a97ce94d049a2603db", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59c83dbf283e0dcf89ecfcfcbab856682291842a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59c83dbf283e0dcf89ecfcfcbab856682291842a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=59c83dbf283e0dcf89ecfcfcbab856682291842a", "patch": "@@ -1,3 +1,7 @@\n+2001-12-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/gnu89-init-1.c: New test.\n+\n 2001-12-12  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.old-deja/g++.brendan/crash56.C: Adjust implicit typename."}, {"sha": "dae61b57da5fb78a1fcbc7a8bb59d65f5a5540bc", "filename": "gcc/testsuite/gcc.dg/gnu89-init-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59c83dbf283e0dcf89ecfcfcbab856682291842a/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu89-init-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59c83dbf283e0dcf89ecfcfcbab856682291842a/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu89-init-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu89-init-1.c?ref=59c83dbf283e0dcf89ecfcfcbab856682291842a", "patch": "@@ -0,0 +1,37 @@\n+/* Test for GNU extensions to compound literals */\n+/* Origin: Jakub Jelinek <jakub@redhat.com> */\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu89\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+struct A { int i; int j; int k[4]; };\n+struct B { };\n+\n+/* As a GNU extension, we allow initialization of objects with static storage\n+   duration by compound literals.  It is handled as if the object\n+   was initialized only with the bracket enclosed list if compound literal's\n+   and object types match.  If the object being initialized has array type\n+   of unknown size, the size is determined by compound literal's initializer\n+   list, not by size of the compound literal.  */\n+\n+struct A a = (struct A) { .j = 6, .k[2] = 12 };\n+struct B b = (struct B) { };\n+int c[] = (int []) { [2] = 6, 7, 8 };\n+int d[] = (int [3]) { 1 };\n+\n+int main (void)\n+{\n+  if (a.i || a.j != 6 || a.k[0] || a.k[1] || a.k[2] != 12 || a.k[3])\n+    abort ();\n+  if (c[0] || c[1] || c[2] != 6 || c[3] != 7 || c[4] != 8)\n+    abort ();\n+  if (sizeof (c) != 5 * sizeof (int))\n+    abort ();\n+  if (d[0] != 1)\n+    abort ();\n+  if (sizeof (d) != sizeof (int))\n+    abort ();\n+  exit (0);\n+}"}]}