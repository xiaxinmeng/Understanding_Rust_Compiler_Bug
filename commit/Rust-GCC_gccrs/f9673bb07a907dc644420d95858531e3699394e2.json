{"sha": "f9673bb07a907dc644420d95858531e3699394e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk2NzNiYjA3YTkwN2RjNjQ0NDIwZDk1ODU4NTMxZTM2OTkzOTRlMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-26T12:35:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-26T12:35:17Z"}, "message": "[multiple changes]\n\n2010-10-26  Geert Bosch  <bosch@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Use the subprogram_body\n\tnode to determine wether the subprogram is a rewritten parameterized\n\texpression.\n\n2010-10-26  Robert Dewar  <dewar@adacore.com>\n\n\t* opt.ads: Minor code reorganization\n\tAlphabetize Warning switches.\n\nFrom-SVN: r165951", "tree": {"sha": "2a58aed56937af5c7e59f935c7834336b72e760d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a58aed56937af5c7e59f935c7834336b72e760d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9673bb07a907dc644420d95858531e3699394e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9673bb07a907dc644420d95858531e3699394e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9673bb07a907dc644420d95858531e3699394e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9673bb07a907dc644420d95858531e3699394e2/comments", "author": null, "committer": null, "parents": [{"sha": "da20aa430cc918e7c0449f7756c02a5fb77939b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da20aa430cc918e7c0449f7756c02a5fb77939b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da20aa430cc918e7c0449f7756c02a5fb77939b0"}], "stats": {"total": 63, "additions": 36, "deletions": 27}, "files": [{"sha": "591d7e49cb20c9f97d5092a16c0d1809beb3d0f3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9673bb07a907dc644420d95858531e3699394e2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9673bb07a907dc644420d95858531e3699394e2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f9673bb07a907dc644420d95858531e3699394e2", "patch": "@@ -1,3 +1,14 @@\n+2010-10-26  Geert Bosch  <bosch@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Use the subprogram_body\n+\tnode to determine wether the subprogram is a rewritten parameterized\n+\texpression.\n+\n+2010-10-26  Robert Dewar  <dewar@adacore.com>\n+\n+\t* opt.ads: Minor code reorganization\n+\tAlphabetize Warning switches.\n+\n 2010-10-26  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_res.adb, xsinfo.adb: Minor reformatting."}, {"sha": "23cbd6c82051535e1f1cddc08aaef72b14bbc204", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9673bb07a907dc644420d95858531e3699394e2/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9673bb07a907dc644420d95858531e3699394e2/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=f9673bb07a907dc644420d95858531e3699394e2", "patch": "@@ -41,10 +41,10 @@\n with Hostparm; use Hostparm;\n with Types;    use Types;\n \n+with System.WCh_Con; use System.WCh_Con;\n+\n pragma Warnings (Off);\n---  This package is used also by gnatcoll\n with System.Strings; use System.Strings;\n-with System.WCh_Con; use System.WCh_Con;\n pragma Warnings (On);\n \n package Opt is\n@@ -1360,11 +1360,12 @@ package Opt is\n    --  including warnings on Ada 2012 obsolescent features used in Ada 2012\n    --  mode. Set False by -gnatwY.\n \n-   Warn_On_Parameter_Order : Boolean := False;\n+   Warn_On_All_Unread_Out_Parameters : Boolean := False;\n    --  GNAT\n-   --  Set to True to generate warnings for cases where the argument list for\n-   --  a call is a sequence of identifiers that match the formal identifiers,\n-   --  but are in the wrong order.\n+   --  Set to True to generate warnings in all cases where a variable is\n+   --  modified by being passed as to an OUT formal, but the resulting value is\n+   --  never read. The default is that this warning is suppressed, except in\n+   --  the case of\n \n    Warn_On_Assertion_Failure : Boolean := True;\n    --  GNAT\n@@ -1421,13 +1422,6 @@ package Opt is\n    --  but only if there is only one out parameter for the procedure involved.\n    --  The default is that this warning is suppressed.\n \n-   Warn_On_All_Unread_Out_Parameters : Boolean := False;\n-   --  GNAT\n-   --  Set to True to generate warnings in all cases where a variable is\n-   --  modified by being passed as to an OUT formal, but the resulting value is\n-   --  never read. The default is that this warning is suppressed, except in\n-   --  the case of\n-\n    Warn_On_No_Value_Assigned : Boolean := True;\n    --  GNAT\n    --  Set to True to generate warnings if no value is ever assigned to a\n@@ -1449,6 +1443,11 @@ package Opt is\n    --  use this to avoid turning it on by default when No_Exception_Propagation\n    --  restriction is set and an exception handler is present.\n \n+   Warn_On_Object_Renames_Function : Boolean := False;\n+   --  GNAT\n+   --  Set to True to generate warnings when a function result is renamed as\n+   --  an object. The default is that this warning is disabled.\n+\n    Warn_On_Obsolescent_Feature : Boolean := False;\n    --  GNAT\n    --  Set to True to generate warnings on use of any feature in Annex or if a\n@@ -1464,16 +1463,17 @@ package Opt is\n    --  Set to True to generate warnings for cases where parentheses are missing\n    --  and the usage is questionable, because the intent is unclear.\n \n+   Warn_On_Parameter_Order : Boolean := False;\n+   --  GNAT\n+   --  Set to True to generate warnings for cases where the argument list for\n+   --  a call is a sequence of identifiers that match the formal identifiers,\n+   --  but are in the wrong order.\n+\n    Warn_On_Redundant_Constructs : Boolean := False;\n    --  GNAT\n    --  Set to True to generate warnings for redundant constructs (e.g. useless\n    --  assignments/conversions). The default is that this warning is disabled.\n \n-   Warn_On_Object_Renames_Function : Boolean := False;\n-   --  GNAT\n-   --  Set to True to generate warnings when a function result is renamed as\n-   --  an object. The default is that this warning is disabled.\n-\n    Warn_On_Reverse_Bit_Order : Boolean := True;\n    --  GNAT\n    --  Set to True to generate warning (informational) messages for component"}, {"sha": "a0de929698d97c9da5419bc89ddc7a0426986165", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9673bb07a907dc644420d95858531e3699394e2/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9673bb07a907dc644420d95858531e3699394e2/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=f9673bb07a907dc644420d95858531e3699394e2", "patch": "@@ -2342,8 +2342,7 @@ package body Sem_Ch6 is\n \n            --  No warnings for parameterized expressions\n \n-           and then Nkind (Original_Node (Body_Id)) /=\n-                                        N_Parameterized_Expression\n+           and then Nkind (Original_Node (N)) /= N_Parameterized_Expression\n          then\n             Style.Body_With_No_Spec (N);\n          end if;\n@@ -4679,10 +4678,10 @@ package body Sem_Ch6 is\n                --  through the attribute alias)\n \n                if (Is_Dispatching_Operation (Subp)\n-                     or else Is_Dispatching_Operation (Overridden_Subp))\n+                    or else Is_Dispatching_Operation (Overridden_Subp))\n                  and then not Comes_From_Source (Overridden_Subp)\n-                 and then Find_Dispatching_Type (Overridden_Subp)\n-                            = Find_Dispatching_Type (Subp)\n+                 and then Find_Dispatching_Type (Overridden_Subp) =\n+                          Find_Dispatching_Type (Subp)\n                  and then Present (Alias (Overridden_Subp))\n                  and then Comes_From_Source (Alias (Overridden_Subp))\n                then\n@@ -8167,8 +8166,8 @@ package body Sem_Ch6 is\n \n                      if not (Comes_From_Source (E))\n                        and then Is_Dispatching_Operation (E)\n-                       and then Find_Dispatching_Type (E)\n-                                  = Find_Dispatching_Type (S)\n+                       and then Find_Dispatching_Type (E) =\n+                                Find_Dispatching_Type (S)\n                        and then Present (Alias (E))\n                        and then Comes_From_Source (Alias (E))\n                      then\n@@ -8204,8 +8203,7 @@ package body Sem_Ch6 is\n                      if Is_Dispatching_Operation (E) then\n \n                         --  An overriding dispatching subprogram inherits the\n-                        --  convention of the overridden subprogram (by\n-                        --  AI-117).\n+                        --  convention of the overridden subprogram (AI-117).\n \n                         Set_Convention (S, Convention (E));\n                         Check_Dispatching_Operation (S, E);"}]}