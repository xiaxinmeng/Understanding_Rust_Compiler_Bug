{"sha": "612c9c702e2c9ebf0058d659d57371605c2e0020", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjEyYzljNzAyZTJjOWViZjAwNThkNjU5ZDU3MzcxNjA1YzJlMDAyMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-07-26T14:02:01Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-07-26T14:02:01Z"}, "message": "Remove char16_t and char32_t dependency on <stdint.h>\n\nThe char16_t and char32_t types are automatically defined by the\ncompiler and do not depend on support in <stdint.h>. The char_traits\nspecializations depend on uint_leastNN_t but can be made to work anyway\nby using the predefined macros, or as a last resort make_unsigned.\n\n\t* include/bits/basic_string.h [!_GLIBCXX_USE_C99_STDINT_TR1]\n\t(hash<u16string>, hash<u32string>): Remove dependency on\n\t_GLIBCXX_USE_C99_STDINT_TR1.\n\t* include/bits/char_traits.h [!_GLIBCXX_USE_C99_STDINT_TR1]\n\t(char_traits<char16_t>, char_traits<char32_t>): Remove dependency on\n\t_GLIBCXX_USE_C99_STDINT_TR1. Use __UINT_LEAST16_TYPE__ and\n\t__UINT_LEAST32_TYPE__ or make_unsigned when <stdint.h> is not usable.\n\t* include/bits/codecvt.h [!_GLIBCXX_USE_C99_STDINT_TR1]\n\t(codecvt<char16_t, char, mbstate_t>)\n\t(codecvt<char32_t, char, mbstate_t>)\n\t(codecvt_byname<char16_t, char, mbstate_t>)\n\t(codecvt_byname<char32_t, char, mbstate_t>): Remove dependency\n\ton _GLIBCXX_USE_C99_STDINT_TR1.\n\t* include/bits/locale_facets.h [!_GLIBCXX_USE_C99_STDINT_TR1]\n\t(_GLIBCXX_NUM_UNICODE_FACETS): Likewise.\n\t* include/bits/stringfwd.h [!_GLIBCXX_USE_C99_STDINT_TR1]\n\t(char_traits<char16_t>, char_traits<char32_t>)\n\t(basic_string<char16_t>, basic_string<char32_t>): Remove dependency\n\ton _GLIBCXX_USE_C99_STDINT_TR1.\n\t* include/experimental/string_view [!_GLIBCXX_USE_C99_STDINT_TR1]\n\t(u16string_view, u32string_view, hash<u16string_view>)\n\t(hash<u32string_view>, operator\"\"sv(const char16_t, size_t))\n\t(operator\"\"sv(const char32_t, size_t)): Likewise.\n\t* include/ext/vstring.h [!_GLIBCXX_USE_C99_STDINT_TR1]\n\t(hash<__u16vstring>, hash<__u32vstring>): Likewise.\n\t* include/ext/vstring_fwd.h [!_GLIBCXX_USE_C99_STDINT_TR1]\n\t(__u16vstring, __u16sso_string, __u16rc_string, __u32vstring)\n\t(__u32sso_string, __u32rc_string): Likewise.\n\t* include/std/codecvt [!_GLIBCXX_USE_C99_STDINT_TR1] (codecvt_mode)\n\t(codecvt_utf8, codecvt_utf16, codecvt_utf8_utf16): Likewise.\n\t* include/std/string_view [!_GLIBCXX_USE_C99_STDINT_TR1]\n\t(u16string_view, u32string_view, hash<u16string_view>)\n\t(hash<u32string_view>, operator\"\"sv(const char16_t, size_t))\n\t(operator\"\"sv(const char32_t, size_t)): Likewise.\n\t* src/c++11/codecvt.cc: Likewise.\n\t* src/c++98/locale_init.cc: Likewise.\n\t* src/c++98/localename.cc: Likewise.\n\nFrom-SVN: r263002", "tree": {"sha": "08f927d7d698e4bb39bdc5adf7a27a7473b28ecf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08f927d7d698e4bb39bdc5adf7a27a7473b28ecf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/612c9c702e2c9ebf0058d659d57371605c2e0020", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/612c9c702e2c9ebf0058d659d57371605c2e0020", "html_url": "https://github.com/Rust-GCC/gccrs/commit/612c9c702e2c9ebf0058d659d57371605c2e0020", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/612c9c702e2c9ebf0058d659d57371605c2e0020/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ba7f29e3dd0640f3b40f60f57d1f491c6d35a74"}], "stats": {"total": 120, "additions": 67, "deletions": 53}, "files": [{"sha": "10b1496af8148cfef2e3cbb20aa78752f7aeb79b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=612c9c702e2c9ebf0058d659d57371605c2e0020", "patch": "@@ -1,5 +1,43 @@\n 2018-07-26  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/basic_string.h [!_GLIBCXX_USE_C99_STDINT_TR1]\n+\t(hash<u16string>, hash<u32string>): Remove dependency on\n+\t_GLIBCXX_USE_C99_STDINT_TR1.\n+\t* include/bits/char_traits.h [!_GLIBCXX_USE_C99_STDINT_TR1]\n+\t(char_traits<char16_t>, char_traits<char32_t>): Remove dependency on\n+\t_GLIBCXX_USE_C99_STDINT_TR1. Use __UINT_LEAST16_TYPE__ and\n+\t__UINT_LEAST32_TYPE__ or make_unsigned when <stdint.h> is not usable.\n+\t* include/bits/codecvt.h [!_GLIBCXX_USE_C99_STDINT_TR1]\n+\t(codecvt<char16_t, char, mbstate_t>)\n+\t(codecvt<char32_t, char, mbstate_t>)\n+\t(codecvt_byname<char16_t, char, mbstate_t>)\n+\t(codecvt_byname<char32_t, char, mbstate_t>): Remove dependency\n+\ton _GLIBCXX_USE_C99_STDINT_TR1.\n+\t* include/bits/locale_facets.h [!_GLIBCXX_USE_C99_STDINT_TR1]\n+\t(_GLIBCXX_NUM_UNICODE_FACETS): Likewise.\n+\t* include/bits/stringfwd.h [!_GLIBCXX_USE_C99_STDINT_TR1]\n+\t(char_traits<char16_t>, char_traits<char32_t>)\n+\t(basic_string<char16_t>, basic_string<char32_t>): Remove dependency\n+\ton _GLIBCXX_USE_C99_STDINT_TR1.\n+\t* include/experimental/string_view [!_GLIBCXX_USE_C99_STDINT_TR1]\n+\t(u16string_view, u32string_view, hash<u16string_view>)\n+\t(hash<u32string_view>, operator\"\"sv(const char16_t, size_t))\n+\t(operator\"\"sv(const char32_t, size_t)): Likewise.\n+\t* include/ext/vstring.h [!_GLIBCXX_USE_C99_STDINT_TR1]\n+\t(hash<__u16vstring>, hash<__u32vstring>): Likewise.\n+\t* include/ext/vstring_fwd.h [!_GLIBCXX_USE_C99_STDINT_TR1]\n+\t(__u16vstring, __u16sso_string, __u16rc_string, __u32vstring)\n+\t(__u32sso_string, __u32rc_string): Likewise.\n+\t* include/std/codecvt [!_GLIBCXX_USE_C99_STDINT_TR1] (codecvt_mode)\n+\t(codecvt_utf8, codecvt_utf16, codecvt_utf8_utf16): Likewise.\n+\t* include/std/string_view [!_GLIBCXX_USE_C99_STDINT_TR1]\n+\t(u16string_view, u32string_view, hash<u16string_view>)\n+\t(hash<u32string_view>, operator\"\"sv(const char16_t, size_t))\n+\t(operator\"\"sv(const char32_t, size_t)): Likewise.\n+\t* src/c++11/codecvt.cc: Likewise.\n+\t* src/c++98/locale_init.cc: Likewise.\n+\t* src/c++98/localename.cc: Likewise.\n+\n \t* include/bits/atomic_futex.h [!_GLIBCXX_USE_C99_STDINT_TR1]\n \t(__atomic_futex_unsigned_base): Remove dependency on\n \t_GLIBCXX_USE_C99_STDINT_TR1 macro."}, {"sha": "c9463989ddc9c0b1d1e886541a02519e881e92ba", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=612c9c702e2c9ebf0058d659d57371605c2e0020", "patch": "@@ -6662,7 +6662,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n #endif /* _GLIBCXX_COMPATIBILITY_CXX0X */\n \n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n   /// std::hash specialization for u16string.\n   template<>\n     struct hash<u16string>\n@@ -6692,7 +6691,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<>\n     struct __is_fast_hash<hash<u32string>> : std::false_type\n     { };\n-#endif\n \n #if __cplusplus > 201103L\n \n@@ -6716,7 +6714,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return basic_string<wchar_t>{__str, __len}; }\n #endif\n \n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n     _GLIBCXX_DEFAULT_ABI_TAG\n     inline basic_string<char16_t>\n     operator\"\"s(const char16_t* __str, size_t __len)\n@@ -6726,7 +6723,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline basic_string<char32_t>\n     operator\"\"s(const char32_t* __str, size_t __len)\n     { return basic_string<char32_t>{__str, __len}; }\n-#endif\n \n #pragma GCC diagnostic pop\n   } // inline namespace string_literals"}, {"sha": "63e810715f844f13c5957f9936f58ddae775e197", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=612c9c702e2c9ebf0058d659d57371605c2e0020", "patch": "@@ -41,7 +41,7 @@\n #include <cwchar>               // For WEOF, wmemmove, wmemset, etc.\n \n #ifndef _GLIBCXX_ALWAYS_INLINE\n-#define _GLIBCXX_ALWAYS_INLINE inline __attribute__((__always_inline__))\n+# define _GLIBCXX_ALWAYS_INLINE inline __attribute__((__always_inline__))\n #endif\n \n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n@@ -495,8 +495,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#if ((__cplusplus >= 201103L) \\\n-     && defined(_GLIBCXX_USE_C99_STDINT_TR1))\n+#if __cplusplus >= 201103L\n \n #include <cstdint>\n \n@@ -508,7 +507,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct char_traits<char16_t>\n     {\n       typedef char16_t          char_type;\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n       typedef uint_least16_t    int_type;\n+#elif defined __UINT_LEAST16_TYPE__\n+      typedef __UINT_LEAST16_TYPE__\t    int_type;\n+#else\n+      typedef make_unsigned<char16_t>::type int_type;\n+#endif\n       typedef streamoff         off_type;\n       typedef u16streampos      pos_type;\n       typedef mbstate_t         state_type;\n@@ -605,7 +610,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct char_traits<char32_t>\n     {\n       typedef char32_t          char_type;\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n       typedef uint_least32_t    int_type;\n+#elif defined __UINT_LEAST32_TYPE__\n+      typedef __UINT_LEAST32_TYPE__\t    int_type;\n+#else\n+      typedef make_unsigned<char32_t>::type int_type;\n+#endif\n       typedef streamoff         off_type;\n       typedef u32streampos      pos_type;\n       typedef mbstate_t         state_type;\n@@ -701,6 +712,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#endif \n+#endif  // C++11\n \n #endif // _CHAR_TRAITS_H"}, {"sha": "bafa28c3a004f2ddbf9f34e293e45ff67b369c48", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=612c9c702e2c9ebf0058d659d57371605c2e0020", "patch": "@@ -459,7 +459,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif //_GLIBCXX_USE_WCHAR_T\n \n #if __cplusplus >= 201103L\n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n   /** @brief  Class codecvt<char16_t, char, mbstate_t> specialization.\n    *\n    *  Converts between UTF-16 and UTF-8.\n@@ -574,7 +573,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       do_max_length() const throw();\n     };\n \n-#endif // _GLIBCXX_USE_C99_STDINT_TR1\n #endif // C++11\n \n   /// class codecvt_byname [22.2.1.6].\n@@ -605,7 +603,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       ~codecvt_byname() { }\n     };\n \n-#if __cplusplus >= 201103L && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+#if __cplusplus >= 201103L\n   template<>\n     class codecvt_byname<char16_t, char, mbstate_t>\n     : public codecvt<char16_t, char, mbstate_t>\n@@ -641,7 +639,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       virtual\n       ~codecvt_byname() { }\n     };\n-#endif\n+#endif // C++11\n \n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.\n@@ -668,7 +666,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     has_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);\n #endif\n \n-#if __cplusplus >= 201103L && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+#if __cplusplus >= 201103L\n   extern template class codecvt_byname<char16_t, char, mbstate_t>;\n   extern template class codecvt_byname<char32_t, char, mbstate_t>;\n #endif"}, {"sha": "f6e0283fec931df1e11ef33e0b2129ccf4eacada", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=612c9c702e2c9ebf0058d659d57371605c2e0020", "patch": "@@ -59,11 +59,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n # define  _GLIBCXX_NUM_FACETS 14\n # define  _GLIBCXX_NUM_CXX11_FACETS 8\n #endif\n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n-# define _GLIBCXX_NUM_UNICODE_FACETS 2\n-#else\n-# define _GLIBCXX_NUM_UNICODE_FACETS 0\n-#endif\n+#define _GLIBCXX_NUM_UNICODE_FACETS 2\n \n   // Convert string to numeric value of type _Tp and store results.\n   // NB: This is specialized for all required types, there is no"}, {"sha": "15eb7183633b503d0018cca9d8549d8af195e372", "filename": "libstdc++-v3/include/bits/stringfwd.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h?ref=612c9c702e2c9ebf0058d659d57371605c2e0020", "patch": "@@ -58,8 +58,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<> struct char_traits<wchar_t>;\n #endif\n \n-#if ((__cplusplus >= 201103L) \\\n-     && defined(_GLIBCXX_USE_C99_STDINT_TR1))\n+#if __cplusplus >= 201103L\n   template<> struct char_traits<char16_t>;\n   template<> struct char_traits<char32_t>;\n #endif\n@@ -78,8 +77,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   typedef basic_string<wchar_t> wstring;   \n #endif\n \n-#if ((__cplusplus >= 201103L) \\\n-     && defined(_GLIBCXX_USE_C99_STDINT_TR1))\n+#if __cplusplus >= 201103L\n   /// A string of @c char16_t\n   typedef basic_string<char16_t> u16string; \n "}, {"sha": "b3bc1a9fb4f27f58f80661b547231f6cc16f5bf6", "filename": "libstdc++-v3/include/experimental/string_view", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view?ref=612c9c702e2c9ebf0058d659d57371605c2e0020", "patch": "@@ -566,10 +566,8 @@ inline namespace fundamentals_v1\n #ifdef _GLIBCXX_USE_WCHAR_T\n   using wstring_view = basic_string_view<wchar_t>;\n #endif\n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n   using u16string_view = basic_string_view<char16_t>;\n   using u32string_view = basic_string_view<char32_t>;\n-#endif\n } // namespace fundamentals_v1\n } // namespace experimental\n \n@@ -607,7 +605,6 @@ inline namespace fundamentals_v1\n     { };\n #endif\n \n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n   template<>\n     struct hash<experimental::u16string_view>\n     : public __hash_base<size_t, experimental::u16string_view>\n@@ -635,7 +632,6 @@ inline namespace fundamentals_v1\n   template<>\n     struct __is_fast_hash<hash<experimental::u32string_view>> : std::false_type\n     { };\n-#endif\n \n namespace experimental\n {\n@@ -656,15 +652,13 @@ namespace experimental\n     { return basic_string_view<wchar_t>{__str, __len}; }\n #endif\n \n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n     inline constexpr basic_string_view<char16_t>\n     operator\"\"sv(const char16_t* __str, size_t __len) noexcept\n     { return basic_string_view<char16_t>{__str, __len}; }\n \n     inline constexpr basic_string_view<char32_t>\n     operator\"\"sv(const char32_t* __str, size_t __len) noexcept\n     { return basic_string_view<char32_t>{__str, __len}; }\n-#endif\n #pragma GCC diagnostic pop\n   } // namespace string_literals\n   } // namespace literals"}, {"sha": "246684d555f8ae9878b03e76d5d371e8545a3b11", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=612c9c702e2c9ebf0058d659d57371605c2e0020", "patch": "@@ -2933,7 +2933,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n #endif\n \n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n   /// std::hash specialization for __u16vstring.\n   template<>\n     struct hash<__gnu_cxx::__u16vstring>\n@@ -2955,7 +2954,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return std::_Hash_impl::hash(__s.data(),\n                                      __s.length() * sizeof(char32_t)); }\n     };\n-#endif\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "f2e6b4bdfa7f1bae69c316198b8d631235807fc3", "filename": "libstdc++-v3/include/ext/vstring_fwd.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_fwd.h?ref=612c9c702e2c9ebf0058d659d57371605c2e0020", "patch": "@@ -66,9 +66,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t std::allocator<wchar_t>, __rc_string_base> __wrc_string;\n #endif  \n \n-#if ((__cplusplus >= 201103L) \\\n-     && defined(_GLIBCXX_USE_C99_STDINT_TR1))\n-\n+#if __cplusplus >= 201103L\n   typedef __versa_string<char16_t>                          __u16vstring;\n   typedef __u16vstring                                      __u16sso_string;\n   typedef \n@@ -80,8 +78,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   typedef \n   __versa_string<char32_t, std::char_traits<char32_t>,\n \t\t std::allocator<char32_t>, __rc_string_base> __u32rc_string;\n-\n-#endif\n+#endif // C++11\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "f765c674d78dce31b958b533c016a46d93dfe28c", "filename": "libstdc++-v3/include/std/codecvt", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcodecvt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcodecvt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcodecvt?ref=612c9c702e2c9ebf0058d659d57371605c2e0020", "patch": "@@ -40,8 +40,6 @@\n #include <bits/locale_classes.h>\n #include <bits/codecvt.h>\n \n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n-\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -174,8 +172,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n-#endif // _GLIBCXX_USE_C99_STDINT_TR1\n-\n-#endif\n+#endif // C++11\n \n #endif /* _GLIBCXX_CODECVT */"}, {"sha": "9e0f6a723e4e88de349d060a83e3d23bc9c031f1", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=612c9c702e2c9ebf0058d659d57371605c2e0020", "patch": "@@ -555,10 +555,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #ifdef _GLIBCXX_USE_WCHAR_T\n   using wstring_view = basic_string_view<wchar_t>;\n #endif\n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+\n   using u16string_view = basic_string_view<char16_t>;\n   using u32string_view = basic_string_view<char32_t>;\n-#endif\n \n   // [string.view.hash], hash support:\n \n@@ -594,7 +593,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { };\n #endif\n \n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n   template<>\n     struct hash<u16string_view>\n     : public __hash_base<size_t, u16string_view>\n@@ -622,7 +620,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<>\n     struct __is_fast_hash<hash<u32string_view>> : std::false_type\n     { };\n-#endif\n \n   inline namespace literals\n   {\n@@ -640,15 +637,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return basic_string_view<wchar_t>{__str, __len}; }\n #endif\n \n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n     inline constexpr basic_string_view<char16_t>\n     operator\"\"sv(const char16_t* __str, size_t __len) noexcept\n     { return basic_string_view<char16_t>{__str, __len}; }\n \n     inline constexpr basic_string_view<char32_t>\n     operator\"\"sv(const char32_t* __str, size_t __len) noexcept\n     { return basic_string_view<char32_t>{__str, __len}; }\n-#endif\n+\n #pragma GCC diagnostic pop\n   } // namespace string_literals\n   } // namespace literals"}, {"sha": "503f2fe1ff34d4de7c5bd2338141e4e39beab7e8", "filename": "libstdc++-v3/src/c++11/codecvt.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc?ref=612c9c702e2c9ebf0058d659d57371605c2e0020", "patch": "@@ -26,7 +26,6 @@\n #include <cstring>\t\t// std::memcpy, std::memcmp\n #include <bits/stl_algobase.h>\t// std::min\n \n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -1639,4 +1638,3 @@ template class codecvt_byname<char32_t, char, mbstate_t>;\n \n _GLIBCXX_END_NAMESPACE_VERSION\n }\n-#endif // _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "5651c04b9ed0ea00dc776d4ce96430edb7fdc6c5", "filename": "libstdc++-v3/src/c++98/locale_init.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_init.cc?ref=612c9c702e2c9ebf0058d659d57371605c2e0020", "patch": "@@ -201,15 +201,13 @@ namespace\n   fake_messages_w messages_w;\n #endif\n \n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n   typedef char fake_codecvt_c16[sizeof(codecvt<char16_t, char, mbstate_t>)]\n   __attribute__ ((aligned(__alignof__(codecvt<char16_t, char, mbstate_t>))));\n   fake_codecvt_c16 codecvt_c16;\n \n   typedef char fake_codecvt_c32[sizeof(codecvt<char32_t, char, mbstate_t>)]\n   __attribute__ ((aligned(__alignof__(codecvt<char32_t, char, mbstate_t>))));\n   fake_codecvt_c32 codecvt_c32;\n-#endif\n \n   // Storage for \"C\" locale caches.\n   typedef char fake_num_cache_c[sizeof(std::__numpunct_cache<char>)]\n@@ -329,7 +327,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     &std::ctype<wchar_t>::id,\n     &codecvt<wchar_t, char, mbstate_t>::id,\n #endif\n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+#if _GLIBCXX_NUM_UNICODE_FACETS != 0\n     &codecvt<char16_t, char, mbstate_t>::id,\n     &codecvt<char32_t, char, mbstate_t>::id,\n #endif\n@@ -536,7 +534,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _M_init_facet(new (&messages_w) std::messages<wchar_t>(1));\n #endif\n \n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+#ifdef _GLIBCXX_NUM_UNICODE_FACETS != 0\n     _M_init_facet(new (&codecvt_c16) codecvt<char16_t, char, mbstate_t>(1));\n     _M_init_facet(new (&codecvt_c32) codecvt<char32_t, char, mbstate_t>(1));\n #endif"}, {"sha": "afb43e5cea93b0324f8f22c4cad2b7a24643e996", "filename": "libstdc++-v3/src/c++98/localename.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612c9c702e2c9ebf0058d659d57371605c2e0020/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocalename.cc?ref=612c9c702e2c9ebf0058d659d57371605c2e0020", "patch": "@@ -269,7 +269,7 @@ const int num_facets = _GLIBCXX_NUM_FACETS + _GLIBCXX_NUM_UNICODE_FACETS\n \t_M_init_facet(new std::messages<wchar_t>(__cloc, __s));\n #endif\n \n-#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+#if _GLIBCXX_NUM_UNICODE_FACETS != 0\n         _M_init_facet(new codecvt<char16_t, char, mbstate_t>);\n         _M_init_facet(new codecvt<char32_t, char, mbstate_t>);\n #endif"}]}