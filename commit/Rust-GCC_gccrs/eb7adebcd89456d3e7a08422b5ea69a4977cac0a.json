{"sha": "eb7adebcd89456d3e7a08422b5ea69a4977cac0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI3YWRlYmNkODk0NTZkM2U3YTA4NDIyYjVlYTY5YTQ5NzdjYWMwYQ==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2009-06-08T11:37:12Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2009-06-08T11:37:12Z"}, "message": "re PR debug/40012 (Revision 146817 generated bad debug info for local variables)\n\n        PR debug/40012\n\n        * cfgexpand.c (set_rtl): Store place also in DECL_RTL, if all\n        partitions use the same.\n        (expand_one_var): Deal with DECL_RTL sometimes begin set also\n        for basevars of SSA_NAMEs.\n        (expand_used_vars): Reset TREE_USED for basevars of SSA_NAMEs,\n        to not expand them twice.\n        (gimple_expand_cfg): Clear DECL_RTL for those decls that have\n        multiple places.\n\nFrom-SVN: r148273", "tree": {"sha": "d2d08b327c9b0c078011803cdb59bfc254a16c7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2d08b327c9b0c078011803cdb59bfc254a16c7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb7adebcd89456d3e7a08422b5ea69a4977cac0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb7adebcd89456d3e7a08422b5ea69a4977cac0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb7adebcd89456d3e7a08422b5ea69a4977cac0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb7adebcd89456d3e7a08422b5ea69a4977cac0a/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2153915d0ab419d1e0b67f9e0e302368820d76f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2153915d0ab419d1e0b67f9e0e302368820d76f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2153915d0ab419d1e0b67f9e0e302368820d76f6"}], "stats": {"total": 50, "additions": 47, "deletions": 3}, "files": [{"sha": "c9a5a4c16ef1f7a2bcc37f0d2805e55c7948d918", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7adebcd89456d3e7a08422b5ea69a4977cac0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7adebcd89456d3e7a08422b5ea69a4977cac0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb7adebcd89456d3e7a08422b5ea69a4977cac0a", "patch": "@@ -1,3 +1,16 @@\n+2009-06-08  Michael Matz  <matz@suse.de>\n+\n+\tPR debug/40012\n+\n+\t* cfgexpand.c (set_rtl): Store place also in DECL_RTL, if all\n+\tpartitions use the same.\n+\t(expand_one_var): Deal with DECL_RTL sometimes begin set also\n+\tfor basevars of SSA_NAMEs.\n+\t(expand_used_vars): Reset TREE_USED for basevars of SSA_NAMEs,\n+\tto not expand them twice.\n+\t(gimple_expand_cfg): Clear DECL_RTL for those decls that have\n+\tmultiple places.\n+\n 2009-06-08  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* common.opt (fcompare-debug=, fcompare-debug-second): New."}, {"sha": "ff2684ea91efa8f220b3fc424d186109a5a34695", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7adebcd89456d3e7a08422b5ea69a4977cac0a/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7adebcd89456d3e7a08422b5ea69a4977cac0a/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=eb7adebcd89456d3e7a08422b5ea69a4977cac0a", "patch": "@@ -455,6 +455,28 @@ set_rtl (tree t, rtx x)\n       SA.partition_to_pseudo[var_to_partition (SA.map, t)] = x;\n       if (x && !MEM_P (x))\n \tset_reg_attrs_for_decl_rtl (SSA_NAME_VAR (t), x);\n+      /* For the benefit of debug information at -O0 (where vartracking\n+         doesn't run) record the place also in the base DECL if it's\n+\t a normal variable (not a parameter).  */\n+      if (x && x != pc_rtx && TREE_CODE (SSA_NAME_VAR (t)) == VAR_DECL)\n+\t{\n+\t  tree var = SSA_NAME_VAR (t);\n+\t  /* If we don't yet have something recorded, just record it now.  */\n+\t  if (!DECL_RTL_SET_P (var))\n+\t    SET_DECL_RTL (var, x);\n+\t  /* If we have it set alrady to \"multiple places\" don't\n+\t     change this.  */\n+\t  else if (DECL_RTL (var) == pc_rtx)\n+\t    ;\n+\t  /* If we have something recorded and it's not the same place\n+\t     as we want to record now, we have multiple partitions for the\n+\t     same base variable, with different places.  We can't just\n+\t     randomly chose one, hence we have to say that we don't know.\n+\t     This only happens with optimization, and there var-tracking\n+\t     will figure out the right thing.  */\n+\t  else if (DECL_RTL (var) != x)\n+\t    SET_DECL_RTL (var, pc_rtx);\n+\t}\n     }\n   else\n     SET_DECL_RTL (t, x);\n@@ -1161,7 +1183,6 @@ expand_one_var (tree var, bool toplevel, bool really_expand)\n \t\t  || (!DECL_EXTERNAL (var)\n \t\t      && !DECL_HAS_VALUE_EXPR_P (var)\n \t\t      && !TREE_STATIC (var)\n-\t\t      && !DECL_RTL_SET_P (var)\n \t\t      && TREE_TYPE (var) != error_mark_node\n \t\t      && !DECL_HARD_REGISTER (var)\n \t\t      && really_expand));\n@@ -1174,7 +1195,7 @@ expand_one_var (tree var, bool toplevel, bool really_expand)\n     ;\n   else if (TREE_STATIC (var))\n     ;\n-  else if (DECL_RTL_SET_P (var))\n+  else if (TREE_CODE (origvar) != SSA_NAME && DECL_RTL_SET_P (var))\n     ;\n   else if (TREE_TYPE (var) == error_mark_node)\n     {\n@@ -1561,7 +1582,11 @@ expand_used_vars (void)\n \n       /* Expanded above already.  */\n       if (is_gimple_reg (var))\n-\t;\n+\t{\n+\t  TREE_USED (var) = 0;\n+\t  ggc_free (t);\n+\t  continue;\n+\t}\n       /* We didn't set a block for static or extern because it's hard\n \t to tell the difference between a global variable (re)declared\n \t in a local scope, and one that's really declared there to\n@@ -2495,6 +2520,12 @@ gimple_expand_cfg (void)\n \t  && !SA.partition_to_pseudo[i])\n \tSA.partition_to_pseudo[i] = DECL_RTL_IF_SET (var);\n       gcc_assert (SA.partition_to_pseudo[i]);\n+\n+      /* If this decl was marked as living in multiple places, reset\n+         this now to NULL.  */\n+      if (DECL_RTL_IF_SET (var) == pc_rtx)\n+\tSET_DECL_RTL (var, NULL);\n+\n       /* Some RTL parts really want to look at DECL_RTL(x) when x\n          was a decl marked in REG_ATTR or MEM_ATTR.  We could use\n \t SET_DECL_RTL here making this available, but that would mean"}]}