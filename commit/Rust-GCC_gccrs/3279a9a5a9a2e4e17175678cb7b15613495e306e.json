{"sha": "3279a9a5a9a2e4e17175678cb7b15613495e306e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI3OWE5YTVhOWEyZTRlMTcxNzU2NzhjYjdiMTU2MTM0OTVlMzA2ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-19T21:54:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-19T21:54:31Z"}, "message": "c: Fix up -Wunused-but-set-* warnings for _Atomics [PR99588]\n\nAs the following testcases show, compared to -D_Atomic= case we have many\n-Wunused-but-set-* warning false positives.\nWhen an _Atomic variable/parameter is read, we call mark_exp_read on it in\nconvert_lvalue_to_rvalue, but build_atomic_assign does not.\nFor consistency with the non-_Atomic case where we mark_exp_read the lhs\nfor lhs op= ... but not for lhs = ..., this patch does that too.\nBut furthermore we need to pattern match the trees emitted by _Atomic store,\nso that _Atomic store itself is not marked as being a variable read, but\nwhen the result of the store is used, we mark it.\n\n2021-03-19  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c/99588\n\t* c-typeck.c (mark_exp_read): Recognize what build_atomic_assign\n\twith modifycode NOP_EXPR produces and mark the _Atomic var as read\n\tif found.\n\t(build_atomic_assign): For modifycode of NOP_EXPR, use COMPOUND_EXPRs\n\trather than STATEMENT_LIST.  Otherwise call mark_exp_read on lhs.\n\tSet TREE_SIDE_EFFECTS on the TARGET_EXPR.\n\n\t* gcc.dg/Wunused-var-5.c: New test.\n\t* gcc.dg/Wunused-var-6.c: New test.", "tree": {"sha": "1874979bd0e80e0189c05bfa79b2fe94625ce9b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1874979bd0e80e0189c05bfa79b2fe94625ce9b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3279a9a5a9a2e4e17175678cb7b15613495e306e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3279a9a5a9a2e4e17175678cb7b15613495e306e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3279a9a5a9a2e4e17175678cb7b15613495e306e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3279a9a5a9a2e4e17175678cb7b15613495e306e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5d74554b5759637439c7cab00903f864653af5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5d74554b5759637439c7cab00903f864653af5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5d74554b5759637439c7cab00903f864653af5f"}], "stats": {"total": 103, "additions": 97, "deletions": 6}, "files": [{"sha": "2685afb2af2ea4fa6e090d28a6856d6cfa921f93", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 60, "deletions": 6, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3279a9a5a9a2e4e17175678cb7b15613495e306e/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3279a9a5a9a2e4e17175678cb7b15613495e306e/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=3279a9a5a9a2e4e17175678cb7b15613495e306e", "patch": "@@ -1968,6 +1968,50 @@ mark_exp_read (tree exp)\n       mark_exp_read (TREE_OPERAND (exp, 0));\n       break;\n     case COMPOUND_EXPR:\n+      /* Pattern match what build_atomic_assign produces with modifycode\n+\t NOP_EXPR.  */\n+      if (VAR_P (TREE_OPERAND (exp, 1))\n+\t  && DECL_ARTIFICIAL (TREE_OPERAND (exp, 1))\n+\t  && TREE_CODE (TREE_OPERAND (exp, 0)) == COMPOUND_EXPR)\n+\t{\n+\t  tree t1 = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n+\t  tree t2 = TREE_OPERAND (TREE_OPERAND (exp, 0), 1);\n+\t  if (TREE_CODE (t1) == TARGET_EXPR\n+\t      && TARGET_EXPR_SLOT (t1) == TREE_OPERAND (exp, 1)\n+\t      && TREE_CODE (t2) == CALL_EXPR)\n+\t    {\n+\t      tree fndecl = get_callee_fndecl (t2);\n+\t      tree arg = NULL_TREE;\n+\t      if (fndecl\n+\t\t  && TREE_CODE (fndecl) == FUNCTION_DECL\n+\t\t  && fndecl_built_in_p (fndecl, BUILT_IN_NORMAL)\n+\t\t  && call_expr_nargs (t2) >= 2)\n+\t\tswitch (DECL_FUNCTION_CODE (fndecl))\n+\t\t  {\n+\t\t  case BUILT_IN_ATOMIC_STORE:\n+\t\t    arg = CALL_EXPR_ARG (t2, 1);\n+\t\t    break;\n+\t\t  case BUILT_IN_ATOMIC_STORE_1:\n+\t\t  case BUILT_IN_ATOMIC_STORE_2:\n+\t\t  case BUILT_IN_ATOMIC_STORE_4:\n+\t\t  case BUILT_IN_ATOMIC_STORE_8:\n+\t\t  case BUILT_IN_ATOMIC_STORE_16:\n+\t\t    arg = CALL_EXPR_ARG (t2, 0);\n+\t\t    break;\n+\t\t  default:\n+\t\t    break;\n+\t\t  }\n+\t      if (arg)\n+\t\t{\n+\t\t  STRIP_NOPS (arg);\n+\t\t  if (TREE_CODE (arg) == ADDR_EXPR\n+\t\t      && DECL_P (TREE_OPERAND (arg, 0))\n+\t\t      && TYPE_ATOMIC (TREE_TYPE (TREE_OPERAND (arg, 0))))\n+\t\t    mark_exp_read (TREE_OPERAND (arg, 0));\n+\t\t}\n+\t    }\n+\t}\n+      /* FALLTHRU */\n     case C_MAYBE_CONST_EXPR:\n       mark_exp_read (TREE_OPERAND (exp, 1));\n       break;\n@@ -4065,7 +4109,7 @@ build_atomic_assign (location_t loc, tree lhs, enum tree_code modifycode,\n   vec<tree, va_gc> *params;\n   tree val, nonatomic_lhs_type, nonatomic_rhs_type, newval, newval_addr;\n   tree old, old_addr;\n-  tree compound_stmt;\n+  tree compound_stmt = NULL_TREE;\n   tree stmt, goto_stmt;\n   tree loop_label, loop_decl, done_label, done_decl;\n \n@@ -4086,7 +4130,15 @@ build_atomic_assign (location_t loc, tree lhs, enum tree_code modifycode,\n \n   /* Create a compound statement to hold the sequence of statements\n      with a loop.  */\n-  compound_stmt = c_begin_compound_stmt (false);\n+  if (modifycode != NOP_EXPR)\n+    {\n+      compound_stmt = c_begin_compound_stmt (false);\n+\n+      /* For consistency with build_modify_expr on non-_Atomic,\n+\t mark the lhs as read.  Also, it would be very hard to match\n+\t such expressions in mark_exp_read.  */\n+      mark_exp_read (lhs);\n+    }\n \n   /* Remove any excess precision (which is only present here in the\n      case of compound assignments).  */\n@@ -4112,24 +4164,26 @@ build_atomic_assign (location_t loc, tree lhs, enum tree_code modifycode,\n   TREE_NO_WARNING (val) = 1;\n   rhs = build4 (TARGET_EXPR, nonatomic_rhs_type, val, rhs, NULL_TREE,\n \t\tNULL_TREE);\n+  TREE_SIDE_EFFECTS (rhs) = 1;\n   SET_EXPR_LOCATION (rhs, loc);\n-  add_stmt (rhs);\n+  if (modifycode != NOP_EXPR)\n+    add_stmt (rhs);\n \n   /* NOP_EXPR indicates it's a straight store of the RHS. Simply issue\n      an atomic_store.  */\n   if (modifycode == NOP_EXPR)\n     {\n+      compound_stmt = rhs;\n       /* Build __atomic_store (&lhs, &val, SEQ_CST)  */\n       rhs = build_unary_op (loc, ADDR_EXPR, val, false);\n       fndecl = builtin_decl_explicit (BUILT_IN_ATOMIC_STORE);\n       params->quick_push (lhs_addr);\n       params->quick_push (rhs);\n       params->quick_push (seq_cst);\n       func_call = c_build_function_call_vec (loc, vNULL, fndecl, params, NULL);\n-      add_stmt (func_call);\n \n-      /* Finish the compound statement.  */\n-      compound_stmt = c_end_compound_stmt (loc, compound_stmt, false);\n+      compound_stmt = build2 (COMPOUND_EXPR, void_type_node,\n+\t\t\t      compound_stmt, func_call);\n \n       /* VAL is the value which was stored, return a COMPOUND_STMT of\n \t the statement and that value.  */"}, {"sha": "cc5bbf51ab0fb1997f90e32f6a7570cf72300eea", "filename": "gcc/testsuite/gcc.dg/Wunused-var-5.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3279a9a5a9a2e4e17175678cb7b15613495e306e/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3279a9a5a9a2e4e17175678cb7b15613495e306e/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-5.c?ref=3279a9a5a9a2e4e17175678cb7b15613495e306e", "patch": "@@ -0,0 +1,23 @@\n+/* PR c/99588 */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -Wunused-but-set-variable\" } */\n+\n+void bar (int, ...);\n+void f1 (void) { static _Atomic int x = 0; bar (0, x); }\n+void f2 (void) { static _Atomic int x = 0; bar (0, x += 1); }\n+void f3 (void) { static _Atomic int x = 0; bar (x); }\n+void f4 (void) { static _Atomic int x = 0; bar (x += 1); }\n+void f5 (void) { static _Atomic int x = 0; bar (x = 1); }\n+void f6 (void) { static _Atomic int x = 0; x = 1; }\t/* { dg-warning \"variable 'x' set but not used\" } */\n+void f7 (void) { static _Atomic int x = 0; x += 3; }\n+void f8 (void) { _Atomic int x = 0; bar (0, x); }\n+void f9 (void) { _Atomic int x = 0; bar (0, x += 1); }\n+void f10 (void) { _Atomic int x = 0; bar (x); }\n+void f11 (void) { _Atomic int x = 0; bar (x += 1); }\n+void f12 (void) { _Atomic int x = 0; bar (x = 1); }\n+void f13 (void) { _Atomic int x = 0; x = 1; }\t\t/* { dg-warning \"variable 'x' set but not used\" } */\n+void f14 (void) { _Atomic int x = 0; x += 3; }\n+void f15 (void) { _Atomic int x = 0; int y = 3; x += y; }\n+void f16 (void) { _Atomic int x = 0; int y = 3; bar (x += y); }\n+void f17 (void) { _Atomic int x = 0; int y = 3; x = y; }\t/* { dg-warning \"variable 'x' set but not used\" } */\n+void f18 (void) { _Atomic int x = 0; int y = 3; bar (x = y); }"}, {"sha": "f48a4554d73da99f889adc1f7c99daaa300f2c64", "filename": "gcc/testsuite/gcc.dg/Wunused-var-6.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3279a9a5a9a2e4e17175678cb7b15613495e306e/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3279a9a5a9a2e4e17175678cb7b15613495e306e/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-6.c?ref=3279a9a5a9a2e4e17175678cb7b15613495e306e", "patch": "@@ -0,0 +1,14 @@\n+/* PR c/99588 */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -Wunused-but-set-variable\" } */\n+\n+void bar (int, ...);\n+struct S { int a, b, c; };\n+typedef _Atomic struct S T;\n+\n+void\n+foo (void)\n+{\n+  static T x = (struct S) { 0, 0, 0 };\t/* { dg-bogus \"set but not used\" } */\n+  bar (0, x = (struct S) { 1, 1, 1 });\n+}"}]}