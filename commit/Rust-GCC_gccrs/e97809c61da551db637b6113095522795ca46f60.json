{"sha": "e97809c61da551db637b6113095522795ca46f60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk3ODA5YzYxZGE1NTFkYjYzN2I2MTEzMDk1NTIyNzk1Y2E0NmY2MA==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2009-04-27T12:16:00Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2009-04-27T12:16:00Z"}, "message": "ssaexpand.h (struct ssaexpand): Member 'values' is a bitmap.\n\n\t* ssaexpand.h (struct ssaexpand): Member 'values' is a bitmap.\n\t(get_gimple_for_ssa_name): Adjust, lookup using SSA_NAME_DEF_STMT.\n\t* tree-ssa-live.h: (find_replaceable_exprs): Return a bitmap.\n\t(dump_replaceable_exprs): Take a bitmap.\n\t* cfgexpand.c (gimple_cond_pred_to_tree): Handle bitmap instead of\n\tarray.\n\t(expand_gimple_basic_block): Likewise.\n\t* tree-ssa-ter.c (struct temp_expr_table_d): Make\n\treplaceable_expressions member a bitmap.\n\t(free_temp_expr_table): Pass back and deal with bitmap, not gimple*.\n\t(mark_replaceable): Likewise.\n\t(find_replaceable_in_bb, dump_replaceable_exprs): Likewise.\n\t* tree-outof-ssa.c (remove_ssa_form): 'values' is a bitmap.\n\nFrom-SVN: r146837", "tree": {"sha": "7f62f8eda796cd4e483b1fb239fc73ab0b2e64f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f62f8eda796cd4e483b1fb239fc73ab0b2e64f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e97809c61da551db637b6113095522795ca46f60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e97809c61da551db637b6113095522795ca46f60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e97809c61da551db637b6113095522795ca46f60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e97809c61da551db637b6113095522795ca46f60/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "211ca15cb41d3ae362b6e0b01e47344a9b30d987", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/211ca15cb41d3ae362b6e0b01e47344a9b30d987", "html_url": "https://github.com/Rust-GCC/gccrs/commit/211ca15cb41d3ae362b6e0b01e47344a9b30d987"}], "stats": {"total": 64, "additions": 40, "deletions": 24}, "files": [{"sha": "fae01de79f3a665bbf891b582c0efc64c5743e20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97809c61da551db637b6113095522795ca46f60/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97809c61da551db637b6113095522795ca46f60/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e97809c61da551db637b6113095522795ca46f60", "patch": "@@ -1,3 +1,19 @@\n+2009-04-27  Michael Matz  <matz@suse.de>\n+\n+\t* ssaexpand.h (struct ssaexpand): Member 'values' is a bitmap.\n+\t(get_gimple_for_ssa_name): Adjust, lookup using SSA_NAME_DEF_STMT.\n+\t* tree-ssa-live.h: (find_replaceable_exprs): Return a bitmap.\n+\t(dump_replaceable_exprs): Take a bitmap.\n+\t* cfgexpand.c (gimple_cond_pred_to_tree): Handle bitmap instead of\n+\tarray.\n+\t(expand_gimple_basic_block): Likewise.\n+\t* tree-ssa-ter.c (struct temp_expr_table_d): Make\n+\treplaceable_expressions member a bitmap.\n+\t(free_temp_expr_table): Pass back and deal with bitmap, not gimple*.\n+\t(mark_replaceable): Likewise.\n+\t(find_replaceable_in_bb, dump_replaceable_exprs): Likewise.\n+\t* tree-outof-ssa.c (remove_ssa_form): 'values' is a bitmap.\n+\n 2009-04-27  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-cfg.c (remove_useless_stmts): Verify stmts afterwards."}, {"sha": "03d0996989af4814e4a8c054c0cb6a1e898662c1", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97809c61da551db637b6113095522795ca46f60/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97809c61da551db637b6113095522795ca46f60/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=e97809c61da551db637b6113095522795ca46f60", "patch": "@@ -94,8 +94,8 @@ gimple_cond_pred_to_tree (gimple stmt)\n   tree lhs = gimple_cond_lhs (stmt);\n   if (SA.values\n       && TREE_CODE (lhs) == SSA_NAME\n-      && SA.values[SSA_NAME_VERSION (lhs)])\n-    lhs = gimple_assign_rhs_to_tree (SA.values[SSA_NAME_VERSION (lhs)]);\n+      && bitmap_bit_p (SA.values, SSA_NAME_VERSION (lhs)))\n+    lhs = gimple_assign_rhs_to_tree (SSA_NAME_DEF_STMT (lhs));\n \n   return build2 (gimple_cond_code (stmt), boolean_type_node,\n \t\t lhs, gimple_cond_rhs (stmt));\n@@ -2078,7 +2078,8 @@ expand_gimple_basic_block (basic_block bb)\n \t\t  /* Ignore this stmt if it is in the list of\n \t\t     replaceable expressions.  */\n \t\t  if (SA.values\n-\t\t      && SA.values[SSA_NAME_VERSION (DEF_FROM_PTR (def_p))])\n+\t\t      && bitmap_bit_p (SA.values, \n+\t\t\t\t       SSA_NAME_VERSION (DEF_FROM_PTR (def_p))))\n \t\t    continue;\n \t\t}\n \t      stmt_tree = gimple_to_tree (stmt);"}, {"sha": "95c55596a98995cc179f63ffb51a458c511ff3cc", "filename": "gcc/ssaexpand.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97809c61da551db637b6113095522795ca46f60/gcc%2Fssaexpand.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97809c61da551db637b6113095522795ca46f60/gcc%2Fssaexpand.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssaexpand.h?ref=e97809c61da551db637b6113095522795ca46f60", "patch": "@@ -31,10 +31,9 @@ struct ssaexpand\n   /* The computed partitions of SSA names are stored here.  */\n   var_map map;\n \n-  /* For a SSA name version V values[V] contains the gimple statement\n-     defining it iff TER decided that it should be forwarded, NULL\n-     otherwise.  */\n-  gimple *values;\n+  /* For an SSA name version V bit V is set iff TER decided that\n+     its definition should be forwarded.  */\n+  bitmap values;\n \n   /* For a partition number I partition_to_pseudo[I] contains the\n      RTL expression of the allocated space of it (either a MEM or\n@@ -67,8 +66,8 @@ static inline gimple\n get_gimple_for_ssa_name (tree exp)\n {\n   int v = SSA_NAME_VERSION (exp);\n-  if (SA.values)\n-    return SA.values[v];\n+  if (SA.values && bitmap_bit_p (SA.values, v))\n+    return SSA_NAME_DEF_STMT (exp);\n   return NULL;\n }\n "}, {"sha": "4e7c78704aea19db065974ff69dc3fe47335c560", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97809c61da551db637b6113095522795ca46f60/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97809c61da551db637b6113095522795ca46f60/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=e97809c61da551db637b6113095522795ca46f60", "patch": "@@ -791,7 +791,7 @@ expand_phi_nodes (struct ssaexpand *sa)\n static void\n remove_ssa_form (bool perform_ter, struct ssaexpand *sa)\n {\n-  gimple *values = NULL;\n+  bitmap values = NULL;\n   var_map map;\n   unsigned i;\n \n@@ -926,7 +926,7 @@ finish_out_of_ssa (struct ssaexpand *sa)\n {\n   free (sa->partition_to_pseudo);\n   if (sa->values)\n-    free (sa->values);\n+    BITMAP_FREE (sa->values);\n   delete_var_map (sa->map);\n   BITMAP_FREE (sa->partition_has_default_def);\n   memset (sa, 0, sizeof *sa);"}, {"sha": "d7dd10dc0dc8d1da1f42e3371fcf977c71b0bbdd", "filename": "gcc/tree-ssa-live.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97809c61da551db637b6113095522795ca46f60/gcc%2Ftree-ssa-live.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97809c61da551db637b6113095522795ca46f60/gcc%2Ftree-ssa-live.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.h?ref=e97809c61da551db637b6113095522795ca46f60", "patch": "@@ -341,8 +341,8 @@ extern var_map coalesce_ssa_name (void);\n \n \n /* From tree-ssa-ter.c  */\n-extern gimple *find_replaceable_exprs (var_map);\n-extern void dump_replaceable_exprs (FILE *, gimple *);\n+extern bitmap find_replaceable_exprs (var_map);\n+extern void dump_replaceable_exprs (FILE *, bitmap);\n \n \n #endif /* _TREE_SSA_LIVE_H  */"}, {"sha": "3bbc8b9f866ff56547c68e2597076e93a1fe62e7", "filename": "gcc/tree-ssa-ter.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97809c61da551db637b6113095522795ca46f60/gcc%2Ftree-ssa-ter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97809c61da551db637b6113095522795ca46f60/gcc%2Ftree-ssa-ter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ter.c?ref=e97809c61da551db637b6113095522795ca46f60", "patch": "@@ -159,7 +159,7 @@ typedef struct temp_expr_table_d\n {\n   var_map map;\n   bitmap *partition_dependencies;\t/* Partitions expr is dependent on.  */\n-  gimple *replaceable_expressions;\t/* Replacement expression table.  */\n+  bitmap replaceable_expressions;\t/* Replacement expression table.  */\n   bitmap *expr_decl_uids;\t\t/* Base uids of exprs.  */\n   bitmap *kill_list;\t\t\t/* Expr's killed by a partition.  */\n   int virtual_partition;\t\t/* Pseudo partition for virtual ops.  */\n@@ -216,10 +216,10 @@ new_temp_expr_table (var_map map)\n /* Free TER table T.  If there are valid replacements, return the expression \n    vector.  */\n \n-static gimple *\n+static bitmap\n free_temp_expr_table (temp_expr_table_p t)\n {\n-  gimple *ret = NULL;\n+  bitmap ret = NULL;\n \n #ifdef ENABLE_CHECKING\n   unsigned x;\n@@ -255,7 +255,7 @@ version_to_be_replaced_p (temp_expr_table_p tab, int version)\n {\n   if (!tab->replaceable_expressions)\n     return false;\n-  return tab->replaceable_expressions[version] != NULL;\n+  return bitmap_bit_p (tab->replaceable_expressions, version);\n }\n \n \n@@ -562,8 +562,8 @@ mark_replaceable (temp_expr_table_p tab, tree var, bool more_replacing)\n \n   /* Set the replaceable expression.  */\n   if (!tab->replaceable_expressions)\n-    tab->replaceable_expressions = XCNEWVEC (gimple, num_ssa_names + 1);\n-  tab->replaceable_expressions[version] = SSA_NAME_DEF_STMT (var);\n+    tab->replaceable_expressions = BITMAP_ALLOC (NULL);\n+  bitmap_set_bit (tab->replaceable_expressions, version);\n }\n \n \n@@ -653,12 +653,12 @@ find_replaceable_in_bb (temp_expr_table_p tab, basic_block bb)\n    NULL is returned by the function, otherwise an expression vector indexed\n    by SSA_NAME version numbers.  */\n \n-extern gimple *\n+extern bitmap\n find_replaceable_exprs (var_map map)\n {\n   basic_block bb;\n   temp_expr_table_p table;\n-  gimple *ret;\n+  bitmap ret;\n \n   table = new_temp_expr_table (map);\n   FOR_EACH_BB (bb)\n@@ -676,19 +676,19 @@ find_replaceable_exprs (var_map map)\n /* Dump TER expression table EXPR to file F.  */\n \n void\n-dump_replaceable_exprs (FILE *f, gimple *expr)\n+dump_replaceable_exprs (FILE *f, bitmap expr)\n {\n   tree var;\n   unsigned x;\n \n   fprintf (f, \"\\nReplacing Expressions\\n\");\n   for (x = 0; x < num_ssa_names; x++)\n-    if (expr[x])\n+    if (bitmap_bit_p (expr, x))\n       {\n \tvar = ssa_name (x);\n \tprint_generic_expr (f, var, TDF_SLIM);\n \tfprintf (f, \" replace with --> \");\n-\tprint_gimple_stmt (f, expr[x], 0, TDF_SLIM);\n+\tprint_gimple_stmt (f, SSA_NAME_DEF_STMT (var), 0, TDF_SLIM);\n \tfprintf (f, \"\\n\");\n       }\n   fprintf (f, \"\\n\");"}]}