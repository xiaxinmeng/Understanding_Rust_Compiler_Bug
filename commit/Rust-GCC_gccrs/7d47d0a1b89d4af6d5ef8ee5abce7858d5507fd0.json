{"sha": "7d47d0a1b89d4af6d5ef8ee5abce7858d5507fd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q0N2QwYTFiODlkNGFmNmQ1ZWY4ZWU1YWJjZTc4NThkNTUwN2ZkMA==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2015-01-31T23:47:13Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2015-01-31T23:47:13Z"}, "message": "extend.texi: Use \"x86\"...\n\n2015-01-31  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/extend.texi: Use \"x86\", \"x86-32\", and \"x86-64\" as the\n\tpreferred names of the architecture and its 32- and 64-bit\n\tvariants.\n\t* doc/invoke.texi: Likewise.\n\t* doc/md.texi: Likewise.\n\nFrom-SVN: r220309", "tree": {"sha": "bed6326b1a4a941db169c949bc04345b46fe6249", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bed6326b1a4a941db169c949bc04345b46fe6249"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d47d0a1b89d4af6d5ef8ee5abce7858d5507fd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d47d0a1b89d4af6d5ef8ee5abce7858d5507fd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d47d0a1b89d4af6d5ef8ee5abce7858d5507fd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d47d0a1b89d4af6d5ef8ee5abce7858d5507fd0/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "407028931a0d0729690c646579fe282eff66aa16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/407028931a0d0729690c646579fe282eff66aa16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/407028931a0d0729690c646579fe282eff66aa16"}], "stats": {"total": 201, "additions": 98, "deletions": 103}, "files": [{"sha": "ddf23f931caedc30f2db80c518c36147de7e9bef", "filename": "ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d47d0a1b89d4af6d5ef8ee5abce7858d5507fd0/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d47d0a1b89d4af6d5ef8ee5abce7858d5507fd0/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=7d47d0a1b89d4af6d5ef8ee5abce7858d5507fd0", "patch": "@@ -1,3 +1,11 @@\n+2015-01-31  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/extend.texi: Use \"x86\", \"x86-32\", and \"x86-64\" as the\n+\tpreferred names of the architecture and its 32- and 64-bit\n+\tvariants.\n+\t* doc/invoke.texi: Likewise.\n+\t* doc/md.texi: Likewise.\n+\n 2015-01-29  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/64780"}, {"sha": "681812e2c9bda54d0c145d1678771ba567bbc53a", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 65, "deletions": 65, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d47d0a1b89d4af6d5ef8ee5abce7858d5507fd0/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d47d0a1b89d4af6d5ef8ee5abce7858d5507fd0/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=7d47d0a1b89d4af6d5ef8ee5abce7858d5507fd0", "patch": "@@ -971,7 +971,7 @@ typedef _Complex float __attribute__((mode(XC))) _Complex80;\n @end smallexample\n \n Not all targets support additional floating-point types.  @code{__float80}\n-and @code{__float128} types are supported on i386, x86_64 and IA-64 targets.\n+and @code{__float128} types are supported on x86 and IA-64 targets.\n The @code{__float128} type is supported on hppa HP-UX targets.\n \n @node Half-Precision\n@@ -2178,10 +2178,10 @@ the enclosing block.\n @cindex @code{const} applied to function\n @cindex functions with @code{printf}, @code{scanf}, @code{strftime} or @code{strfmon} style arguments\n @cindex functions with non-null pointer arguments\n-@cindex functions that are passed arguments in registers on the 386\n-@cindex functions that pop the argument stack on the 386\n-@cindex functions that do not pop the argument stack on the 386\n-@cindex functions that have different compilation options on the 386\n+@cindex functions that are passed arguments in registers on x86-32\n+@cindex functions that pop the argument stack on x86-32\n+@cindex functions that do not pop the argument stack on x86-32\n+@cindex functions that have different compilation options on x86-32\n @cindex functions that have different optimization options\n @cindex functions that are dynamically resolved\n \n@@ -2426,9 +2426,9 @@ is diagnosed earlier and with exact location of the call even in presence\n of inline functions or when not emitting debugging information.\n \n @item cdecl\n-@cindex functions that do pop the argument stack on the 386\n+@cindex functions that do pop the argument stack on x86-32\n @opindex mrtd\n-On the Intel 386, the @code{cdecl} attribute causes the compiler to\n+On the x86-32 targets, the @code{cdecl} attribute causes the compiler to\n assume that the calling function pops off the stack space used to\n pass arguments.  This is\n useful to override the effects of the @option{-mrtd} switch.\n@@ -2677,17 +2677,17 @@ function is a fast interrupt handler.  This is just like the\n instead of @code{reit}.\n \n @item fastcall\n-@cindex functions that pop the argument stack on the 386\n-On the Intel 386, the @code{fastcall} attribute causes the compiler to\n+@cindex functions that pop the argument stack on x86-32\n+On x86-32 targets, the @code{fastcall} attribute causes the compiler to\n pass the first argument (if of integral type) in the register ECX and\n the second argument (if of integral type) in the register EDX@.  Subsequent\n and other typed arguments are passed on the stack.  The called function\n pops the arguments off the stack.  If the number of arguments is variable all\n arguments are pushed on the stack.\n \n @item thiscall\n-@cindex functions that pop the argument stack on the 386\n-On the Intel 386, the @code{thiscall} attribute causes the compiler to\n+@cindex functions that pop the argument stack on x86-32\n+On x86-32 targets, the @code{thiscall} attribute causes the compiler to\n pass the first argument (if of integral type) in the register ECX.\n Subsequent and other typed arguments are passed on the stack. The called\n function pops the arguments off the stack.\n@@ -3344,7 +3344,7 @@ defined by shared libraries.\n @cindex @code{ms_abi} attribute\n @cindex @code{sysv_abi} attribute\n \n-On 32-bit and 64-bit (i?86|x86_64)-*-* targets, you can use an ABI attribute\n+On 32-bit and 64-bit x86 targets, you can use an ABI attribute\n to indicate which calling convention should be used for a function.  The\n @code{ms_abi} attribute tells the compiler to use the Microsoft ABI,\n while the @code{sysv_abi} attribute tells the compiler to use the ABI\n@@ -3357,21 +3357,21 @@ requires the @option{-maccumulate-outgoing-args} option.\n @item callee_pop_aggregate_return (@var{number})\n @cindex @code{callee_pop_aggregate_return} attribute\n \n-On 32-bit i?86-*-* targets, you can use this attribute to control how\n+On x86-32 targets, you can use this attribute to control how\n aggregates are returned in memory.  If the caller is responsible for\n popping the hidden pointer together with the rest of the arguments, specify\n @var{number} equal to zero.  If callee is responsible for popping the\n hidden pointer, specify @var{number} equal to one.  \n \n-The default i386 ABI assumes that the callee pops the\n-stack for hidden pointer.  However, on 32-bit i386 Microsoft Windows targets,\n+The default x86-32 ABI assumes that the callee pops the\n+stack for hidden pointer.  However, on x86-32 Microsoft Windows targets,\n the compiler assumes that the\n caller pops the stack for hidden pointer.\n \n @item ms_hook_prologue\n @cindex @code{ms_hook_prologue} attribute\n \n-On 32-bit i[34567]86-*-* targets and 64-bit x86_64-*-* targets, you can use\n+On 32-bit and 64-bit x86 targets, you can use\n this function attribute to make GCC generate the ``hot-patching'' function\n prologue used in Win32 API functions in Microsoft Windows XP Service Pack 2\n and newer.\n@@ -3763,8 +3763,8 @@ with @option{-fchkp-instrument-marked-only} option.\n \n @item regparm (@var{number})\n @cindex @code{regparm} attribute\n-@cindex functions that are passed arguments in registers on the 386\n-On the Intel 386, the @code{regparm} attribute causes the compiler to\n+@cindex functions that are passed arguments in registers on x86-32\n+On x86-32 targets, the @code{regparm} attribute causes the compiler to\n pass arguments number one to @var{number} if they are of integral type\n in registers EAX, EDX, and ECX instead of on the stack.  Functions that\n take a variable number of arguments continue to be passed all of their\n@@ -3798,15 +3798,15 @@ Provide a user-defined function to handle warm reset exception.\n \n @item sseregparm\n @cindex @code{sseregparm} attribute\n-On the Intel 386 with SSE support, the @code{sseregparm} attribute\n+On x86-32 targets with SSE support, the @code{sseregparm} attribute\n causes the compiler to pass up to 3 floating-point arguments in\n SSE registers instead of on the stack.  Functions that take a\n variable number of arguments continue to pass all of their\n floating-point arguments on the stack.\n \n @item force_align_arg_pointer\n @cindex @code{force_align_arg_pointer} attribute\n-On the Intel x86, the @code{force_align_arg_pointer} attribute may be\n+On x86 targets, the @code{force_align_arg_pointer} attribute may be\n applied to individual function definitions, generating an alternate\n prologue and epilogue that realigns the run-time stack if necessary.\n This supports mixing legacy codes that run with a 4-byte aligned stack\n@@ -3952,8 +3952,8 @@ void f () __attribute__ ((interrupt_handler,\n @end smallexample\n \n @item stdcall\n-@cindex functions that pop the argument stack on the 386\n-On the Intel 386, the @code{stdcall} attribute causes the compiler to\n+@cindex functions that pop the argument stack on x86-32\n+On x86-32 targets, the @code{stdcall} attribute causes the compiler to\n assume that the called function pops off the stack space used to\n pass arguments, unless it takes a variable number of arguments.\n \n@@ -3976,15 +3976,15 @@ more than one function to be compiled with specific target options.\n @xref{Function Specific Option Pragmas}, for details about the\n @samp{#pragma GCC target} pragma.\n \n-For instance on a 386, you could compile one function with\n+For instance on an x86, you could compile one function with\n @code{target(\"sse4.1,arch=core2\")} and another with\n @code{target(\"sse4a,arch=amdfam10\")}.  This is equivalent to\n compiling the first function with @option{-msse4.1} and\n @option{-march=core2} options, and the second function with\n @option{-msse4a} and @option{-march=amdfam10} options.  It is up to the\n user to make sure that a function is only invoked on a machine that\n supports the particular ISA it is compiled for (for example by using\n-@code{cpuid} on 386 to determine what feature bits and architecture\n+@code{cpuid} on x86 to determine what feature bits and architecture\n family are used).\n \n @smallexample\n@@ -3997,10 +3997,10 @@ strings to specify multiple options, or separate the options\n with a comma (@samp{,}).\n \n The @code{target} attribute is presently implemented for\n-i386/x86_64, PowerPC, and Nios II targets only.\n+x86, PowerPC, and Nios II targets only.\n The options supported are specific to each target.\n \n-On the 386, the following options are allowed:\n+On the x86, the following options are allowed:\n \n @table @samp\n @item abm\n@@ -4345,7 +4345,7 @@ named @var{name}.\n @xref{Nios II Options}, for more information.\n @end table\n \n-On the 386/x86_64 and PowerPC back ends, the inliner does not inline a\n+On the x86 and PowerPC back ends, the inliner does not inline a\n function that has different target options than the caller, unless the\n callee has a subset of the target options of the caller.  For example\n a function declared with @code{target(\"sse3\")} can inline a function\n@@ -5521,11 +5521,11 @@ int cpu_clock __attribute__((cb(0x123)));\n \n @end table\n \n-@anchor{i386 Variable Attributes}\n-@subsection i386 Variable Attributes\n+@anchor{x86 Variable Attributes}\n+@subsection x86 Variable Attributes\n \n-Two attributes are currently defined for i386 configurations:\n-@code{ms_struct} and @code{gcc_struct}\n+Two attributes are currently defined for x86 configurations:\n+@code{ms_struct} and @code{gcc_struct}.\n \n @table @code\n @item ms_struct\n@@ -5540,7 +5540,7 @@ data between functions compiled with GCC and the native Microsoft compiler\n (either via function call or as data in a file), it may be necessary to access\n either format.\n \n-Currently @option{-m[no-]ms-bitfields} is provided for the Microsoft Windows X86\n+Currently @option{-m[no-]ms-bitfields} is provided for the Microsoft Windows x86\n compilers to match the native Microsoft compiler.\n \n The Microsoft structure layout algorithm is fairly simple with the exception\n@@ -5665,7 +5665,7 @@ Three attributes currently are defined for PowerPC configurations:\n @code{altivec}, @code{ms_struct} and @code{gcc_struct}.\n \n For full documentation of the struct attributes please see the\n-documentation in @ref{i386 Variable Attributes}.\n+documentation in @ref{x86 Variable Attributes}.\n \n For documentation of @code{altivec} attribute please see the\n documentation in @ref{PowerPC Type Attributes}.\n@@ -6078,10 +6078,10 @@ Specifically, the @code{based}, @code{tiny}, @code{near}, and\n @code{far} attributes may be applied to either.  The @code{io} and\n @code{cb} attributes may not be applied to types.\n \n-@anchor{i386 Type Attributes}\n-@subsection i386 Type Attributes\n+@anchor{x86 Type Attributes}\n+@subsection x86 Type Attributes\n \n-Two attributes are currently defined for i386 configurations:\n+Two attributes are currently defined for x86 configurations:\n @code{ms_struct} and @code{gcc_struct}.\n \n @table @code\n@@ -6098,7 +6098,7 @@ data between functions compiled with GCC and the native Microsoft compiler\n (either via function call or as data in a file), it may be necessary to access\n either format.\n \n-Currently @option{-m[no-]ms-bitfields} is provided for the Microsoft Windows X86\n+Currently @option{-m[no-]ms-bitfields} is provided for the Microsoft Windows x86\n compilers to match the native Microsoft compiler.\n @end table\n \n@@ -6109,7 +6109,7 @@ Three attributes currently are defined for PowerPC configurations:\n @code{altivec}, @code{ms_struct} and @code{gcc_struct}.\n \n For full documentation of the @code{ms_struct} and @code{gcc_struct}\n-attributes please see the documentation in @ref{i386 Type Attributes}.\n+attributes please see the documentation in @ref{x86 Type Attributes}.\n \n The @code{altivec} attribute allows one to declare AltiVec vector data\n types supported by the AltiVec Programming Interface Manual.  The\n@@ -6662,7 +6662,7 @@ void do_print(uint32_t dwSomeValue)\n @end example\n \n The following example demonstrates a case where you need to use the \n-@code{volatile} qualifier. It uses the i386 RDTSC instruction, which reads \n+@code{volatile} qualifier. It uses the x86 RDTSC instruction, which reads \n the computer's time-stamp counter. Without the @code{volatile} qualifier, \n the optimizers might assume that the @code{asm} block will always return the \n same value and therefore optimize away the second call.\n@@ -6755,7 +6755,7 @@ Since GCC does not parse the AssemblerTemplate, it has no visibility of any\n symbols it references. This may result in GCC discarding those symbols as \n unreferenced unless they are also listed as input, output, or goto operands.\n \n-GCC can support multiple assembler dialects (for example, GCC for i386 \n+GCC can support multiple assembler dialects (for example, GCC for x86 \n supports \"att\" and \"intel\" dialects) for inline assembler. In builds that \n support this capability, the @option{-masm} option controls which dialect \n GCC uses as its default. The hardware-specific documentation for the \n@@ -6779,7 +6779,7 @@ This construct outputs 'dialect0' when using dialect #0 to compile the code,\n braces than the number of dialects the compiler supports, the construct \n outputs nothing.\n \n-For example, if an i386 compiler supports two dialects (att, intel), an \n+For example, if an x86 compiler supports two dialects (att, intel), an \n assembler template such as this:\n \n @example\n@@ -6927,8 +6927,8 @@ will be undefined if @var{a} is modified before using @var{b}.\n \n @code{asm} supports operand modifiers on operands (for example @code{%k2} \n instead of simply @code{%2}). Typically these qualifiers are hardware \n-dependent. The list of supported modifiers for i386 is found at \n-@ref{i386Operandmodifiers,i386 Operand modifiers}.\n+dependent. The list of supported modifiers for x86 is found at \n+@ref{x86Operandmodifiers,x86 Operand modifiers}.\n \n If the C code that follows the @code{asm} makes no use of any of the output \n operands, use @code{volatile} for the @code{asm} statement to prevent the \n@@ -7069,8 +7069,8 @@ The total number of input + output + goto operands has a limit of 30.\n \n @code{asm} supports operand modifiers on operands (for example @code{%k2} \n instead of simply @code{%2}). Typically these qualifiers are hardware \n-dependent. The list of supported modifiers for i386 is found at \n-@ref{i386Operandmodifiers,i386 Operand modifiers}.\n+dependent. The list of supported modifiers for x86 is found at \n+@ref{x86Operandmodifiers,x86 Operand modifiers}.\n \n Examples:\n \n@@ -7229,12 +7229,12 @@ error:\n @}\n @end example\n \n-@anchor{i386Operandmodifiers}\n-@subsubsection i386 Operand modifiers\n+@anchor{x86Operandmodifiers}\n+@subsubsection x86 Operand modifiers\n \n Input, output, and goto operands for extended @code{asm} statements can use \n modifiers to affect the code output to the assembler. For example, the \n-following code uses the \"h\" and \"b\" modifiers for i386:\n+following code uses the \"h\" and \"b\" modifiers for x86:\n \n @example\n uint16_t  num;\n@@ -7326,10 +7326,10 @@ The table below shows the list of supported modifiers and their effects.\n @tab @code{2}\n @end multitable\n \n-@anchor{i386floatingpointasmoperands}\n-@subsubsection i386 floating-point asm operands\n+@anchor{x86floatingpointasmoperands}\n+@subsubsection x86 floating-point asm operands\n \n-On i386 targets, there are several rules on the usage of stack-like registers\n+On x86 targets, there are several rules on the usage of stack-like registers\n in the operands of an @code{asm}.  These rules apply only to the operands\n that are stack-like registers:\n \n@@ -7922,7 +7922,7 @@ purposes.\n \n On some targets, the instruction set contains SIMD vector instructions which\n operate on multiple values contained in one large register at the same time.\n-For example, on the i386 the MMX, 3DNow!@: and SSE extensions can be used\n+For example, on the x86 the MMX, 3DNow!@: and SSE extensions can be used\n this way.\n \n The first step in using these extensions is to provide the necessary data\n@@ -8594,7 +8594,7 @@ functions above, except they perform multiplication, instead of addition.\n @node x86 specific memory model extensions for transactional memory\n @section x86 specific memory model extensions for transactional memory\n \n-The i386 architecture supports additional memory ordering flags\n+The x86 architecture supports additional memory ordering flags\n to mark lock critical sections for hardware lock elision. \n These must be specified in addition to an existing memory model to \n atomic intrinsics.\n@@ -10113,8 +10113,8 @@ instructions, but allow the compiler to schedule those calls.\n * AVR Built-in Functions::\n * Blackfin Built-in Functions::\n * FR-V Built-in Functions::\n-* X86 Built-in Functions::\n-* X86 transactional memory intrinsics::\n+* x86 Built-in Functions::\n+* x86 transactional memory intrinsics::\n * MIPS DSP Built-in Functions::\n * MIPS Paired-Single Support::\n * MIPS Loongson Built-in Functions::\n@@ -11484,10 +11484,10 @@ Use the @code{nldub} instruction to load the contents of address @var{x}\n into the data cache.  The instruction is issued in slot I1@.\n @end table\n \n-@node X86 Built-in Functions\n-@subsection X86 Built-in Functions\n+@node x86 Built-in Functions\n+@subsection x86 Built-in Functions\n \n-These built-in functions are available for the i386 and x86-64 family\n+These built-in functions are available for the x86-32 and x86-64 family\n of computers, depending on the command-line switches used.\n \n If you specify command-line switches such as @option{-msse},\n@@ -12879,7 +12879,7 @@ v2si __builtin_ia32_pswapdsi (v2si)\n The following built-in functions are available when @option{-mrtm} is used\n They are used for restricted transactional memory. These are the internal\n low level functions. Normally the functions in \n-@ref{X86 transactional memory intrinsics} should be used instead.\n+@ref{x86 transactional memory intrinsics} should be used instead.\n \n @smallexample\n int __builtin_ia32_xbegin ()\n@@ -12888,10 +12888,10 @@ void __builtin_ia32_xabort (status)\n int __builtin_ia32_xtest ()\n @end smallexample\n \n-@node X86 transactional memory intrinsics\n-@subsection X86 transaction memory intrinsics\n+@node x86 transactional memory intrinsics\n+@subsection x86 transaction memory intrinsics\n \n-Hardware transactional memory intrinsics for i386. These allow to use\n+Hardware transactional memory intrinsics for x86. These allow to use\n memory transactions with RTM (Restricted Transactional Memory).\n For using HLE (Hardware Lock Elision) see @ref{x86 specific memory model extensions for transactional memory} instead.\n This support is enabled with the @option{-mrtm} option.\n@@ -17603,7 +17603,7 @@ multiple @code{#pragma pack(@var{n})} instances and finalized by a single\n @code{#pragma pack(pop)}.\n @end enumerate\n \n-Some targets, e.g.@: i386 and PowerPC, support the @code{ms_struct}\n+Some targets, e.g.@: x86 and PowerPC, support the @code{ms_struct}\n @code{#pragma} which lays out a structure as the documented\n @code{__attribute__ ((ms_struct))}.\n @enumerate\n@@ -17796,7 +17796,7 @@ function.  The parenthesis around the options is optional.\n @code{target} attribute and the attribute syntax.\n \n The @code{#pragma GCC target} pragma is presently implemented for\n-i386/x86_64, PowerPC, and Nios II targets only.\n+x86, PowerPC, and Nios II targets only.\n @end table\n \n @table @code\n@@ -18827,7 +18827,7 @@ See also @ref{Namespace Association}.\n @section Function Multiversioning\n @cindex function versions\n \n-With the GNU C++ front end, for target i386, you may specify multiple\n+With the GNU C++ front end, for x86 targets, you may specify multiple\n versions of a function, where each function is specialized for a\n specific target feature.  At runtime, the appropriate version of the\n function is automatically executed depending on the characteristics of"}, {"sha": "94ca9472120cb0564dcd579095400f897e5ea7fb", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 23, "deletions": 36, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d47d0a1b89d4af6d5ef8ee5abce7858d5507fd0/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d47d0a1b89d4af6d5ef8ee5abce7858d5507fd0/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7d47d0a1b89d4af6d5ef8ee5abce7858d5507fd0", "patch": "@@ -676,7 +676,7 @@ Objective-C and Objective-C++ Dialects}.\n -mschedule=@var{cpu-type}  -mspace-regs  -msio  -mwsio @gol\n -munix=@var{unix-std}  -nolibdld  -static  -threads}\n \n-@emph{i386 and x86-64 Options}\n+@emph{x86 Options}\n @gccoptlist{-mtune=@var{cpu-type}  -march=@var{cpu-type} @gol\n -mtune-ctrl=@var{feature-list} -mdump-tune-features -mno-default @gol\n -mfpmath=@var{unit} @gol\n@@ -709,7 +709,7 @@ Objective-C and Objective-C++ Dialects}.\n -mavx256-split-unaligned-load -mavx256-split-unaligned-store @gol\n -malign-data=@var{type} -mstack-protector-guard=@var{guard}}\n \n-@emph{i386 and x86-64 Windows Options}\n+@emph{x86 Windows Options}\n @gccoptlist{-mconsole -mcygwin -mno-cygwin -mdll @gol\n -mnop-fun-dllimport -mthread @gol\n -municode -mwin32 -mwindows -fno-set-stack-executable}\n@@ -1081,9 +1081,6 @@ See RS/6000 and PowerPC Options.\n @gccoptlist{-mrtp  -non-static  -Bstatic  -Bdynamic @gol\n -Xbind-lazy  -Xbind-now}\n \n-@emph{x86-64 Options}\n-See i386 and x86-64 Options.\n-\n @emph{Xstormy16 Options}\n @gccoptlist{-msim}\n \n@@ -1964,7 +1961,7 @@ Some cases of unnamed fields in structures and unions are only\n accepted with this option.  @xref{Unnamed Fields,,Unnamed struct/union\n fields within structs/unions}, for details.\n \n-Note that this option is off for all targets but i?86 and x86_64\n+Note that this option is off for all targets but x86 \n targets using ms-abi.\n \n @item -fplan9-extensions\n@@ -11955,8 +11952,8 @@ platform.\n * GNU/Linux Options::\n * H8/300 Options::\n * HPPA Options::\n-* i386 and x86-64 Options::\n-* i386 and x86-64 Windows Options::\n+* x86 Options::\n+* x86 Windows Options::\n * IA-64 Options::\n * LM32 Options::\n * M32C Options::\n@@ -11992,7 +11989,6 @@ platform.\n * Visium Options::\n * VMS Options::\n * VxWorks Options::\n-* x86-64 Options::\n * Xstormy16 Options::\n * Xtensa Options::\n * zSeries Options::\n@@ -15365,15 +15361,11 @@ under HP-UX@.  This option sets flags for both the preprocessor and\n linker.\n @end table\n \n-@node i386 and x86-64 Options\n-@subsection Intel 386 and AMD x86-64 Options\n-@cindex i386 Options\n-@cindex x86-64 Options\n-@cindex Intel 386 Options\n-@cindex AMD x86-64 Options\n+@node x86 Options\n+@subsection x86 Options\n+@cindex x86 Options\n \n-These @samp{-m} options are defined for the i386 and x86-64 family of\n-computers:\n+These @samp{-m} options are defined for the x86 family of computers.\n \n @table @gcctabopt\n \n@@ -15644,7 +15636,7 @@ The temporary results are computed in 80-bit precision instead of the precision\n specified by the type, resulting in slightly different results compared to most\n of other chips.  See @option{-ffloat-store} for more detailed description.\n \n-This is the default choice for i386 compiler.\n+This is the default choice for x86-32 targets.\n \n @item sse\n Use scalar floating-point instructions present in the SSE instruction set.\n@@ -15656,7 +15648,7 @@ extended-precision arithmetic are still done using 387.  A later version, presen\n only in Pentium 4 and AMD x86-64 chips, supports double-precision\n arithmetic too.\n \n-For the i386 compiler, you must use @option{-march=@var{cpu-type}}, @option{-msse}\n+For the x86-32 compiler, you must use @option{-march=@var{cpu-type}}, @option{-msse}\n or @option{-msse2} switches to enable SSE extensions and make this option\n effective.  For the x86-64 compiler, these extensions are enabled by default.\n \n@@ -15741,15 +15733,15 @@ On x86-64, @option{-malign-double} is enabled by default.\n \n @strong{Warning:} if you use the @option{-malign-double} switch,\n structures containing the above types are aligned differently than\n-the published application binary interface specifications for the 386\n+the published application binary interface specifications for the x86-32\n and are not binary compatible with structures in code compiled\n without that switch.\n \n @item -m96bit-long-double\n @itemx -m128bit-long-double\n @opindex m96bit-long-double\n @opindex m128bit-long-double\n-These switches control the size of @code{long double} type.  The i386\n+These switches control the size of @code{long double} type.  The x86-32\n application binary interface specifies the size to be 96 bits,\n so @option{-m96bit-long-double} is the default in 32-bit mode.\n \n@@ -15892,7 +15884,7 @@ when this option is used to set the precision to less than extended precision.\n \n @item -mstackrealign\n @opindex mstackrealign\n-Realign the stack at entry.  On the Intel x86, the @option{-mstackrealign}\n+Realign the stack at entry.  On the x86, the @option{-mstackrealign}\n option generates an alternate prologue and epilogue that realigns the\n run-time stack if necessary.  This supports mixing legacy codes that keep\n 4-byte stack alignment with modern codes that keep 16-byte stack alignment for\n@@ -16064,7 +16056,7 @@ extended instruction sets.  Each has a corresponding @option{-mno-} option\n to disable use of these instructions.\n \n These extensions are also available as built-in functions: see\n-@ref{X86 Built-in Functions}, for details of the functions enabled and\n+@ref{x86 Built-in Functions}, for details of the functions enabled and\n disabled by these switches.\n \n To generate SSE/SSE2 instructions automatically from floating-point\n@@ -16505,9 +16497,10 @@ and x32 environments.  It is the default address mode for 32-bit and\n x32 environments.\n @end table\n \n-@node i386 and x86-64 Windows Options\n-@subsection i386 and x86-64 Windows Options\n-@cindex i386 and x86-64 Windows Options\n+@node x86 Windows Options\n+@subsection x86 Windows Options\n+@cindex x86 Windows Options\n+@cindex Windows Options for x86\n \n These additional options are available for Microsoft Windows targets:\n \n@@ -16583,7 +16576,7 @@ GCC detects that the target assembler found during configuration\n supports the feature.\n @end table\n \n-See also under @ref{i386 and x86-64 Options} for standard options.\n+See also under @ref{x86 Options} for standard options.\n \n @node IA-64 Options\n @subsection IA-64 Options\n@@ -22857,12 +22850,6 @@ Disable lazy binding of function calls.  This option is the default and\n is defined for compatibility with Diab.\n @end table\n \n-@node x86-64 Options\n-@subsection x86-64 Options\n-@cindex x86-64 options\n-\n-These are listed under @xref{i386 and x86-64 Options}.\n-\n @node Xstormy16 Options\n @subsection Xstormy16 Options\n @cindex Xstormy16 Options\n@@ -23287,10 +23274,10 @@ the GOT size for the linked executable exceeds a machine-specific\n maximum size, you get an error message from the linker indicating that\n @option{-fpic} does not work; in that case, recompile with @option{-fPIC}\n instead.  (These maximums are 8k on the SPARC and 32k\n-on the m68k and RS/6000.  The 386 has no such limit.)\n+on the m68k and RS/6000.  The x86 has no such limit.)\n \n Position-independent code requires special support, and therefore works\n-only on certain machines.  For the 386, GCC supports PIC for System V\n+only on certain machines.  For the x86, GCC supports PIC for System V\n but not for the Sun 386i.  Code generated for the IBM RS/6000 is always\n position-independent.\n \n@@ -23528,7 +23515,7 @@ The resulting program has a discontiguous stack which can only\n overflow if the program is unable to allocate any more memory.  This\n is most useful when running threaded programs, as it is no longer\n necessary to calculate a good stack size to use for each thread.  This\n-is currently only implemented for the i386 and x86_64 back ends running\n+is currently only implemented for the x86 targets running\n GNU/Linux.\n \n When code compiled with @option{-fsplit-stack} calls code compiled"}, {"sha": "03faa12d4a761ec9047b22cf1e5b0b9f7fa96df3", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d47d0a1b89d4af6d5ef8ee5abce7858d5507fd0/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d47d0a1b89d4af6d5ef8ee5abce7858d5507fd0/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=7d47d0a1b89d4af6d5ef8ee5abce7858d5507fd0", "patch": "@@ -2306,7 +2306,7 @@ Vector constant that is all zeros.\n \n @end table\n \n-@item Intel 386---@file{config/i386/constraints.md}\n+@item x86 family---@file{config/i386/constraints.md}\n @table @code\n @item R\n Legacy register---the eight integer registers available on all\n@@ -2360,7 +2360,7 @@ unsigned long long rdtsc (void)\n @}\n @end smallexample\n \n-This is not correct on x86_64 as it would allocate tick in either @code{ax}\n+This is not correct on x86-64 as it would allocate tick in either @code{ax}\n or @code{dx}.  You have to use the following variant instead:\n \n @smallexample"}]}