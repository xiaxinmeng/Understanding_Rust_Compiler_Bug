{"sha": "8264c84d54602b4ced60ec0a969b58b2c9c5a944", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI2NGM4NGQ1NDYwMmI0Y2VkNjBlYzBhOTY5YjU4YjJjOWM1YTk0NA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-05-18T14:23:46Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-05-18T14:23:46Z"}, "message": "Transform TDF_{lang,tree,ipa,rtl} to dump_kind enum.\n\n2017-05-18  Martin Liska  <mliska@suse.cz>\n\n\t* cfgrtl.c (rtl_verify_edges): Remove usage of TDF_RTL.\n\t* dumpfile.c (dump_register): Use new enum dump_kind.\n\t(get_dump_file_name): Likewise.\n\t(dump_enable_all): Likewise.\n\t(dump_switch_p_1): Likewise.\n\t(enable_rtl_dump_file): Remove usage of TDF_RTL.\n\t* dumpfile.h (enum dump_kind): New enum type.\n\t(struct dump_file_info): Create constructor and\n\tformat fields and comments.\n\t* passes.c (pass_manager::register_one_dump_file):\n\tUse num dump_kind.\n\t* statistics.c (statistics_early_init): Likewise.\n\t* tree-ssa-loop-prefetch.c (dump_mem_details): Replace\n\tTDF_TREE with TDF_SLIM.\n\t(gather_memory_references_ref): Likewise.\n\nFrom-SVN: r248206", "tree": {"sha": "96265d1dfbd547ed2dbc558b16dd61ca13fc7362", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96265d1dfbd547ed2dbc558b16dd61ca13fc7362"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8264c84d54602b4ced60ec0a969b58b2c9c5a944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8264c84d54602b4ced60ec0a969b58b2c9c5a944", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8264c84d54602b4ced60ec0a969b58b2c9c5a944", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8264c84d54602b4ced60ec0a969b58b2c9c5a944/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "671d5bcb262855ea7193f8349f38a15c388fcb6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/671d5bcb262855ea7193f8349f38a15c388fcb6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/671d5bcb262855ea7193f8349f38a15c388fcb6f"}], "stats": {"total": 219, "additions": 131, "deletions": 88}, "files": [{"sha": "f2762580970f71deae668b85d61f40abed471598", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8264c84d54602b4ced60ec0a969b58b2c9c5a944/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8264c84d54602b4ced60ec0a969b58b2c9c5a944/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8264c84d54602b4ced60ec0a969b58b2c9c5a944", "patch": "@@ -1,3 +1,21 @@\n+2017-05-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* cfgrtl.c (rtl_verify_edges): Remove usage of TDF_RTL.\n+\t* dumpfile.c (dump_register): Use new enum dump_kind.\n+\t(get_dump_file_name): Likewise.\n+\t(dump_enable_all): Likewise.\n+\t(dump_switch_p_1): Likewise.\n+\t(enable_rtl_dump_file): Remove usage of TDF_RTL.\n+\t* dumpfile.h (enum dump_kind): New enum type.\n+\t(struct dump_file_info): Create constructor and\n+\tformat fields and comments.\n+\t* passes.c (pass_manager::register_one_dump_file):\n+\tUse num dump_kind.\n+\t* statistics.c (statistics_early_init): Likewise.\n+\t* tree-ssa-loop-prefetch.c (dump_mem_details): Replace\n+\tTDF_TREE with TDF_SLIM.\n+\t(gather_memory_references_ref): Likewise.\n+\n 2017-05-18  Martin Liska  <mliska@suse.cz>\n \n \t* vec.h (struct vnull): Use it."}, {"sha": "aad0292139210d2ea5fe94d12ce0b9e956ced6fe", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8264c84d54602b4ced60ec0a969b58b2c9c5a944/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8264c84d54602b4ced60ec0a969b58b2c9c5a944/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=8264c84d54602b4ced60ec0a969b58b2c9c5a944", "patch": "@@ -2527,7 +2527,7 @@ rtl_verify_edges (void)\n \t    && JUMP_P (BB_END (bb))\n \t    && CROSSING_JUMP_P (BB_END (bb)))\n           {\n-            print_rtl_with_bb (stderr, get_insns (), TDF_RTL | TDF_BLOCKS | TDF_DETAILS);\n+\t    print_rtl_with_bb (stderr, get_insns (), TDF_BLOCKS | TDF_DETAILS);\n             error (\"Region crossing jump across same section in bb %i\",\n                    bb->index);\n             err = 1;"}, {"sha": "d5a0e70cf6641462886ff58a65b1ef55b5684c6a", "filename": "gcc/dumpfile.c", "status": "modified", "additions": 45, "deletions": 41, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8264c84d54602b4ced60ec0a969b58b2c9c5a944/gcc%2Fdumpfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8264c84d54602b4ced60ec0a969b58b2c9c5a944/gcc%2Fdumpfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.c?ref=8264c84d54602b4ced60ec0a969b58b2c9c5a944", "patch": "@@ -47,37 +47,43 @@ FILE *alt_dump_file = NULL;\n const char *dump_file_name;\n dump_flags_t dump_flags;\n \n+CONSTEXPR dump_file_info::dump_file_info (): suffix (NULL), swtch (NULL),\n+  glob (NULL), pfilename (NULL), alt_filename (NULL), pstream (NULL),\n+  alt_stream (NULL), dkind (DK_none), pflags (), alt_flags (0),\n+  optgroup_flags (0), pstate (0), alt_state (0), num (0), owns_strings (false),\n+  graph_dump_initialized (false)\n+{\n+}\n+\n+dump_file_info::dump_file_info (const char *_suffix, const char *_swtch,\n+\t\t\t\tdump_kind _dkind, int _num):\n+  suffix (_suffix), swtch (_swtch), glob (NULL),\n+  pfilename (NULL), alt_filename (NULL), pstream (NULL), alt_stream (NULL),\n+  dkind (_dkind), pflags (), alt_flags (0), optgroup_flags (0),\n+  pstate (0), alt_state (0), num (_num), owns_strings (false),\n+  graph_dump_initialized (false)\n+{\n+}\n+\n /* Table of tree dump switches. This must be consistent with the\n    TREE_DUMP_INDEX enumeration in dumpfile.h.  */\n static struct dump_file_info dump_files[TDI_end] =\n {\n-  {NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0, 0, false, false},\n-  {\".cgraph\", \"ipa-cgraph\", NULL, NULL, NULL, NULL, NULL, TDF_IPA,\n-   0, 0, 0, 0, 0, false, false},\n-  {\".type-inheritance\", \"ipa-type-inheritance\", NULL, NULL, NULL, NULL, NULL, TDF_IPA,\n-   0, 0, 0, 0, 0, false, false},\n-  {\".ipa-clones\", \"ipa-clones\", NULL, NULL, NULL, NULL, NULL, TDF_IPA,\n-   0, 0, 0, 0, 0, false, false},\n-  {\".tu\", \"translation-unit\", NULL, NULL, NULL, NULL, NULL, TDF_LANG,\n-   0, 0, 0, 0, 1, false, false},\n-  {\".class\", \"class-hierarchy\", NULL, NULL, NULL, NULL, NULL, TDF_LANG,\n-   0, 0, 0, 0, 2, false, false},\n-  {\".original\", \"tree-original\", NULL, NULL, NULL, NULL, NULL, TDF_TREE,\n-   0, 0, 0, 0, 3, false, false},\n-  {\".gimple\", \"tree-gimple\", NULL, NULL, NULL, NULL, NULL, TDF_TREE,\n-   0, 0, 0, 0, 4, false, false},\n-  {\".nested\", \"tree-nested\", NULL, NULL, NULL, NULL, NULL, TDF_TREE,\n-   0, 0, 0, 0, 5, false, false},\n+  dump_file_info (),\n+  dump_file_info (\".cgraph\", \"ipa-cgraph\", DK_ipa, 0),\n+  dump_file_info (\".type-inheritance\", \"ipa-type-inheritance\", DK_ipa, 0),\n+  dump_file_info (\".ipa-clones\", \"ipa-clones\", DK_ipa, 0),\n+  dump_file_info (\".tu\", \"translation-unit\", DK_lang, 1),\n+  dump_file_info (\".class\", \"class-hierarchy\", DK_lang, 2),\n+  dump_file_info (\".original\", \"tree-original\", DK_tree, 3),\n+  dump_file_info (\".gimple\", \"tree-gimple\", DK_tree, 4),\n+  dump_file_info (\".nested\", \"tree-nested\", DK_tree, 5),\n #define FIRST_AUTO_NUMBERED_DUMP 6\n \n-  {NULL, \"lang-all\", NULL, NULL, NULL, NULL, NULL, TDF_LANG,\n-   0, 0, 0, 0, 0, false, false},\n-  {NULL, \"tree-all\", NULL, NULL, NULL, NULL, NULL, TDF_TREE,\n-   0, 0, 0, 0, 0, false, false},\n-  {NULL, \"rtl-all\", NULL, NULL, NULL, NULL, NULL, TDF_RTL,\n-   0, 0, 0, 0, 0, false, false},\n-  {NULL, \"ipa-all\", NULL, NULL, NULL, NULL, NULL, TDF_IPA,\n-   0, 0, 0, 0, 0, false, false},\n+  dump_file_info (NULL, \"lang-all\", DK_lang, 0),\n+  dump_file_info (NULL, \"tree-all\", DK_tree, 0),\n+  dump_file_info (NULL, \"rtl-all\", DK_rtl, 0),\n+  dump_file_info (NULL, \"ipa-all\", DK_ipa, 0),\n };\n \n /* Define a name->number mapping for a dump flag value.  */\n@@ -118,7 +124,7 @@ static const struct dump_option_value_info dump_options[] =\n   {\"missed\", MSG_MISSED_OPTIMIZATION},\n   {\"note\", MSG_NOTE},\n   {\"optall\", MSG_ALL},\n-  {\"all\", ~(TDF_KIND_MASK | TDF_RAW | TDF_SLIM | TDF_LINENO\n+  {\"all\", ~(TDF_RAW | TDF_SLIM | TDF_LINENO\n \t    | TDF_STMTADDR | TDF_GRAPH | TDF_DIAGNOSTIC | TDF_VERBOSE\n \t    | TDF_RHS_ONLY | TDF_NOUID | TDF_ENUMERATE_LOCALS | TDF_SCEV\n \t    | TDF_GIMPLE)},\n@@ -181,8 +187,7 @@ gcc::dump_manager::~dump_manager ()\n unsigned int\n gcc::dump_manager::\n dump_register (const char *suffix, const char *swtch, const char *glob,\n-\t       dump_flags_t flags, int optgroup_flags,\n-\t       bool take_ownership)\n+\t       dump_kind dkind, int optgroup_flags, bool take_ownership)\n {\n   int num = m_next_dump++;\n \n@@ -203,7 +208,7 @@ dump_register (const char *suffix, const char *swtch, const char *glob,\n   m_extra_dump_files[count].suffix = suffix;\n   m_extra_dump_files[count].swtch = swtch;\n   m_extra_dump_files[count].glob = glob;\n-  m_extra_dump_files[count].pflags = flags;\n+  m_extra_dump_files[count].dkind = dkind;\n   m_extra_dump_files[count].optgroup_flags = optgroup_flags;\n   m_extra_dump_files[count].num = num;\n   m_extra_dump_files[count].owns_strings = take_ownership;\n@@ -285,11 +290,10 @@ get_dump_file_name (struct dump_file_info *dfi) const\n     dump_id[0] = '\\0';\n   else\n     {\n-      /* LANG, TREE, RTL, IPA.  */\n-      char suffix = \"ltri\"[TDF_KIND (dfi->pflags)];\n+      /* (null), LANG, TREE, RTL, IPA.  */\n+      char suffix = \" ltri\"[dfi->dkind];\n       \n-      if (snprintf (dump_id, sizeof (dump_id), \".%03d%c\", dfi->num, suffix)\n-\t  < 0)\n+      if (snprintf (dump_id, sizeof (dump_id), \".%03d%c\", dfi->num, suffix) < 0)\n \tdump_id[0] = '\\0';\n     }\n \n@@ -494,7 +498,7 @@ dump_start (int phase, dump_flags_t *flag_ptr)\n       dfi->pstream = stream;\n       dump_file = dfi->pstream;\n       /* Initialize current dump flags. */\n-      pflags = TDF_FLAGS (dfi->pflags);\n+      pflags = dfi->pflags;\n     }\n \n   stream = dump_open_alternate_stream (dfi);\n@@ -504,7 +508,7 @@ dump_start (int phase, dump_flags_t *flag_ptr)\n       count++;\n       alt_dump_file = dfi->alt_stream;\n       /* Initialize current -fopt-info flags. */\n-      alt_flags = TDF_FLAGS (dfi->alt_flags);\n+      alt_flags = dfi->alt_flags;\n     }\n \n   if (flag_ptr)\n@@ -657,15 +661,14 @@ dump_end (int phase ATTRIBUTE_UNUSED, FILE *stream)\n \n int\n gcc::dump_manager::\n-dump_enable_all (dump_flags_t flags, const char *filename)\n+dump_enable_all (dump_kind dkind, dump_flags_t flags, const char *filename)\n {\n-  dump_flags_t ir_dump_type = TDF_KIND (flags);\n   int n = 0;\n   size_t i;\n \n   for (i = TDI_none + 1; i < (size_t) TDI_end; i++)\n     {\n-      if (TDF_KIND (dump_files[i].pflags) == ir_dump_type)\n+      if ((dump_files[i].dkind == dkind))\n         {\n           const char *old_filename = dump_files[i].pfilename;\n           dump_files[i].pstate = -1;\n@@ -686,7 +689,7 @@ dump_enable_all (dump_flags_t flags, const char *filename)\n \n   for (i = 0; i < m_extra_dump_files_in_use; i++)\n     {\n-      if (TDF_KIND (m_extra_dump_files[i].pflags) == ir_dump_type)\n+      if ((m_extra_dump_files[i].dkind == dkind))\n         {\n           const char *old_filename = m_extra_dump_files[i].pfilename;\n           m_extra_dump_files[i].pstate = -1;\n@@ -832,7 +835,7 @@ dump_switch_p_1 (const char *arg, struct dump_file_info *dfi, bool doglob)\n   /* Process -fdump-tree-all and -fdump-rtl-all, by enabling all the\n      known dumps.  */\n   if (dfi->suffix == NULL)\n-    dump_enable_all (dfi->pflags, dfi->pfilename);\n+    dump_enable_all (dfi->dkind, dfi->pflags, dfi->pfilename);\n \n   return 1;\n }\n@@ -1017,6 +1020,7 @@ enable_rtl_dump_file (void)\n {\n   gcc::dump_manager *dumps = g->get_dumps ();\n   int num_enabled =\n-    dumps->dump_enable_all (TDF_RTL | TDF_DETAILS | TDF_BLOCKS, NULL);\n+    dumps->dump_enable_all (DK_rtl, dump_flags_t (TDF_DETAILS) | TDF_BLOCKS,\n+\t\t\t    NULL);\n   return num_enabled > 0;\n }"}, {"sha": "6edea857ba8410ee3454f8a861e3d459a97272ca", "filename": "gcc/dumpfile.h", "status": "modified", "additions": 54, "deletions": 33, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8264c84d54602b4ced60ec0a969b58b2c9c5a944/gcc%2Fdumpfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8264c84d54602b4ced60ec0a969b58b2c9c5a944/gcc%2Fdumpfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.h?ref=8264c84d54602b4ced60ec0a969b58b2c9c5a944", "patch": "@@ -44,20 +44,22 @@ enum tree_dump_index\n   TDI_end\n };\n \n+/* Enum used to distinguish dump files to types.  */\n+\n+enum dump_kind\n+{\n+  DK_none,\n+  DK_lang,\n+  DK_tree,\n+  DK_rtl,\n+  DK_ipa,\n+};\n+\n /* Bit masks to control dumping. Not all values are applicable to all\n    dumps. Add new ones at the end. When you define new values, extend\n    the DUMP_OPTIONS array in dumpfile.c. The TDF_* flags coexist with\n    MSG_* flags (for -fopt-info) and the bit values must be chosen to\n    allow that.  */\n-#define TDF_LANG\t0\t/* is a lang-specific dump.  */\n-#define TDF_TREE\t1\t/* is a tree dump */\n-#define TDF_RTL\t\t2\t/* is a RTL dump */\n-#define TDF_IPA\t\t3\t/* is an IPA dump */\n-#define TDF_KIND_MASK   3\n-#define TDF_KIND(X) ((X) & TDF_KIND_MASK)\n-#define TDF_FLAGS(X) ((X) & ~TDF_KIND_MASK)\n-\n-/* Bit 2 unused, available for hire.  */\n #define TDF_ADDRESS\t(1 << 3)\t/* dump node addresses */\n #define TDF_SLIM\t(1 << 4)\t/* don't go wild following links */\n #define TDF_RAW\t\t(1 << 5)\t/* don't unparse the function */\n@@ -124,27 +126,47 @@ typedef uint64_t dump_flags_t;\n /* Define a tree dump switch.  */\n struct dump_file_info\n {\n-  const char *suffix;\t\t/* suffix to give output file.  */\n-  const char *swtch;\t\t/* command line dump switch */\n-  const char *glob;\t\t/* command line glob  */\n-  const char *pfilename;\t/* filename for the pass-specific stream  */\n-  const char *alt_filename;\t/* filename for the -fopt-info stream  */\n-  FILE *pstream;\t\t/* pass-specific dump stream  */\n-  FILE *alt_stream;\t\t/* -fopt-info stream */\n-  dump_flags_t pflags;\t\t/* dump flags */\n-  int optgroup_flags;\t\t/* optgroup flags for -fopt-info */\n-  int alt_flags;\t\t/* flags for opt-info */\n-  int pstate;\t\t\t/* state of pass-specific stream */\n-  int alt_state;\t\t/* state of the -fopt-info stream */\n-  int num;\t\t\t/* dump file number */\n-  bool owns_strings;\t\t/* fields \"suffix\", \"swtch\", \"glob\" can be\n-\t\t\t\t   const strings, or can be dynamically\n-\t\t\t\t   allocated, needing free.  */\n-  bool graph_dump_initialized;\t/* When a given dump file is being\n-\t\t\t\t   initialized, this flag is set to\n-\t\t\t\t   true if the corresponding TDF_graph\n-\t\t\t\t   dump file has also been\n-\t\t\t\t   initialized.  */\n+  /* Constructor.  */\n+  CONSTEXPR dump_file_info ();\n+\n+  /* Constructor.  */\n+  dump_file_info (const char *_suffix, const char *_swtch, dump_kind _dkind,\n+\t\t  int _num);\n+\n+  /* Suffix to give output file.  */\n+  const char *suffix;\n+  /* Command line dump switch.  */\n+  const char *swtch;\n+  /* Command line glob.  */\n+  const char *glob;\n+  /* Filename for the pass-specific stream.  */\n+  const char *pfilename;\n+  /* Filename for the -fopt-info stream.  */\n+  const char *alt_filename;\n+  /* Pass-specific dump stream.  */\n+  FILE *pstream;\n+  /* -fopt-info stream.  */\n+  FILE *alt_stream;\n+  /* Dump kind.  */\n+  dump_kind dkind;\n+  /* Dump flags.  */\n+  dump_flags_t pflags;\n+  /* A pass flags for -fopt-info.  */\n+  int alt_flags;\n+  /* Flags for -fopt-info given by a user.  */\n+  int optgroup_flags;\n+  /* State of pass-specific stream.  */\n+  int pstate;\n+  /* State of the -fopt-info stream.  */\n+  int alt_state;\n+  /* Dump file number.  */\n+  int num;\n+  /* Fields \"suffix\", \"swtch\", \"glob\" can be const strings,\n+     or can be dynamically allocated, needing free.  */\n+  bool owns_strings;\n+  /* When a given dump file is being initialized, this flag is set to true\n+     if the corresponding TDF_graph dump file has also been initialized.  */\n+  bool graph_dump_initialized;\n };\n \n /* In dumpfile.c */\n@@ -201,8 +223,7 @@ class dump_manager\n      SUFFIX, SWTCH, and GLOB. */\n   unsigned int\n   dump_register (const char *suffix, const char *swtch, const char *glob,\n-\t\t dump_flags_t flags, int optgroup_flags,\n-\t\t bool take_ownership);\n+\t\t dump_kind dkind, int optgroup_flags, bool take_ownership);\n \n   /* Return the dump_file_info for the given phase.  */\n   struct dump_file_info *\n@@ -255,7 +276,7 @@ class dump_manager\n   dump_switch_p_1 (const char *arg, struct dump_file_info *dfi, bool doglob);\n \n   int\n-  dump_enable_all (dump_flags_t flags, const char *filename);\n+  dump_enable_all (dump_kind dkind, dump_flags_t flags, const char *filename);\n \n   int\n   opt_info_enable_passes (int optgroup_flags, dump_flags_t flags,"}, {"sha": "5feaa8c20cb06447911e53d963e15042ec89d120", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8264c84d54602b4ced60ec0a969b58b2c9c5a944/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8264c84d54602b4ced60ec0a969b58b2c9c5a944/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=8264c84d54602b4ced60ec0a969b58b2c9c5a944", "patch": "@@ -191,7 +191,7 @@ static rtx get_expansion (struct var_to_expand *);\n static void\n report_unroll (struct loop *loop, location_t locus)\n {\n-  dump_flags_t report_flags = MSG_OPTIMIZED_LOCATIONS | TDF_RTL | TDF_DETAILS;\n+  dump_flags_t report_flags = MSG_OPTIMIZED_LOCATIONS | TDF_DETAILS;\n \n   if (loop->lpt_decision.decision == LPT_NONE)\n     return;\n@@ -223,7 +223,7 @@ decide_unrolling (int flags)\n       location_t locus = get_loop_location (loop);\n \n       if (dump_enabled_p ())\n-\tdump_printf_loc (TDF_RTL, locus,\n+\tdump_printf_loc (MSG_NOTE, locus,\n                          \";; *** Considering loop %d at BB %d for \"\n                          \"unrolling ***\\n\",\n                          loop->num, loop->header->index);"}, {"sha": "e7c5d194010ac7a3c191f58e8e057e33b5505015", "filename": "gcc/passes.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8264c84d54602b4ced60ec0a969b58b2c9c5a944/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8264c84d54602b4ced60ec0a969b58b2c9c5a944/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=8264c84d54602b4ced60ec0a969b58b2c9c5a944", "patch": "@@ -776,7 +776,7 @@ pass_manager::register_one_dump_file (opt_pass *pass)\n \n   /* Buffer big enough to format a 32-bit UINT_MAX into.  */\n   char num[11];\n-  dump_flags_t flags;\n+  dump_kind dkind;\n   int id;\n   int optgroup_flags = OPTGROUP_NONE;\n   gcc::dump_manager *dumps = m_ctxt->get_dumps ();\n@@ -798,18 +798,18 @@ pass_manager::register_one_dump_file (opt_pass *pass)\n   if (pass->type == SIMPLE_IPA_PASS || pass->type == IPA_PASS)\n     {\n       prefix = \"ipa-\";\n-      flags = TDF_IPA;\n+      dkind = DK_ipa;\n       optgroup_flags |= OPTGROUP_IPA;\n     }\n   else if (pass->type == GIMPLE_PASS)\n     {\n       prefix = \"tree-\";\n-      flags = TDF_TREE;\n+      dkind = DK_tree;\n     }\n   else\n     {\n       prefix = \"rtl-\";\n-      flags = TDF_RTL;\n+      dkind = DK_rtl;\n     }\n \n   flag_name = concat (prefix, name, num, NULL);\n@@ -820,7 +820,7 @@ pass_manager::register_one_dump_file (opt_pass *pass)\n      any dump messages are emitted properly under -fopt-info(-optall).  */\n   if (optgroup_flags == OPTGROUP_NONE)\n     optgroup_flags = OPTGROUP_OTHER;\n-  id = dumps->dump_register (dot_name, flag_name, glob_name, flags,\n+  id = dumps->dump_register (dot_name, flag_name, glob_name, dkind,\n \t\t\t     optgroup_flags,\n \t\t\t     true);\n   set_pass_for_id (id, pass);"}, {"sha": "2961f9f51529583ad6558d6187b89583ee00fbcc", "filename": "gcc/statistics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8264c84d54602b4ced60ec0a969b58b2c9c5a944/gcc%2Fstatistics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8264c84d54602b4ced60ec0a969b58b2c9c5a944/gcc%2Fstatistics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstatistics.c?ref=8264c84d54602b4ced60ec0a969b58b2c9c5a944", "patch": "@@ -259,7 +259,7 @@ statistics_early_init (void)\n {\n   gcc::dump_manager *dumps = g->get_dumps ();\n   statistics_dump_nr = dumps->dump_register (\".statistics\", \"statistics\",\n-\t\t\t\t\t     \"statistics\", TDF_TREE,\n+\t\t\t\t\t     \"statistics\", DK_tree,\n \t\t\t\t\t     OPTGROUP_NONE,\n \t\t\t\t\t     false);\n }"}, {"sha": "31a4b3224faac1556fbe24d25ffaa5c29d1fd2da", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8264c84d54602b4ced60ec0a969b58b2c9c5a944/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8264c84d54602b4ced60ec0a969b58b2c9c5a944/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=8264c84d54602b4ced60ec0a969b58b2c9c5a944", "patch": "@@ -686,7 +686,7 @@ try_unroll_loop_completely (struct loop *loop,\n   struct loop_size size;\n   bool n_unroll_found = false;\n   edge edge_to_cancel = NULL;\n-  dump_flags_t report_flags = MSG_OPTIMIZED_LOCATIONS | TDF_RTL | TDF_DETAILS;\n+  dump_flags_t report_flags = MSG_OPTIMIZED_LOCATIONS | TDF_DETAILS;\n \n   /* See if we proved number of iterations to be low constant.\n "}, {"sha": "f5f2802e5b93a527144dd5b19bc5f37ace8e822a", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8264c84d54602b4ced60ec0a969b58b2c9c5a944/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8264c84d54602b4ced60ec0a969b58b2c9c5a944/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=8264c84d54602b4ced60ec0a969b58b2c9c5a944", "patch": "@@ -288,7 +288,7 @@ dump_mem_details (FILE *file, tree base, tree step,\n   if (cst_and_fits_in_hwi (step))\n     fprintf (file, HOST_WIDE_INT_PRINT_DEC, int_cst_value (step));\n   else\n-    print_generic_expr (file, step, TDF_TREE);\n+    print_generic_expr (file, step, TDF_SLIM);\n   fprintf (file, \")\\n\");\n   fprintf (file, \"  delta \");\n   fprintf (file, HOST_WIDE_INT_PRINT_DEC, delta);\n@@ -553,8 +553,8 @@ gather_memory_references_ref (struct loop *loop, struct mem_ref_group **refs,\n           if (dump_file && (dump_flags & TDF_DETAILS))\n             {\n               fprintf (dump_file, \"Memory expression %p\\n\",(void *) ref ); \n-              print_generic_expr (dump_file, ref, TDF_TREE); \n-              fprintf (dump_file,\":\");\n+\t      print_generic_expr (dump_file, ref, TDF_SLIM);\n+\t      fprintf (dump_file,\":\");\n               dump_mem_details (dump_file, base, step, delta, write_p);\n               fprintf (dump_file, \n                        \"Ignoring %p, non-constant step prefetching is \"\n@@ -570,7 +570,7 @@ gather_memory_references_ref (struct loop *loop, struct mem_ref_group **refs,\n             if (dump_file && (dump_flags & TDF_DETAILS))\n               {\n                 fprintf (dump_file, \"Memory expression %p\\n\",(void *) ref );\n-                print_generic_expr (dump_file, ref, TDF_TREE);\n+\t\tprint_generic_expr (dump_file, ref, TDF_SLIM);\n                 fprintf (dump_file,\":\");\n                 dump_mem_details (dump_file, base, step, delta, write_p);\n                 fprintf (dump_file, "}]}