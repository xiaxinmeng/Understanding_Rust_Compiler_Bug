{"sha": "73e52926b6c5f02fb3f34706b4afb2d8bcd86638", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNlNTI5MjZiNmM1ZjAyZmIzZjM0NzA2YjRhZmIyZDhiY2Q4NjYzOA==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-02-09T15:35:16Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-02-09T17:23:08Z"}, "message": "testsuite: aarch64: Add tests for vpaddq intrinsics\n\nAdd tests for vpaddq_* Neon intrinsics. Since these intrinsics are\nonly supported for AArch64, these tests are restricted to only run on\nAArch64 targets.\n\ngcc/testsuite/ChangeLog:\n\n2021-02-09  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vpXXXq.inc:\n\tNew test template.\n\t* gcc.target/aarch64/advsimd-intrinsics/vpaddq.c: New test.", "tree": {"sha": "4211c29900f05746620eba0009ab433d384e322f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4211c29900f05746620eba0009ab433d384e322f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73e52926b6c5f02fb3f34706b4afb2d8bcd86638", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73e52926b6c5f02fb3f34706b4afb2d8bcd86638", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73e52926b6c5f02fb3f34706b4afb2d8bcd86638", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73e52926b6c5f02fb3f34706b4afb2d8bcd86638/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfdb7b8c6f54807789471705a8fcd03bab3d7fc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfdb7b8c6f54807789471705a8fcd03bab3d7fc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfdb7b8c6f54807789471705a8fcd03bab3d7fc3"}], "stats": {"total": 136, "additions": 136, "deletions": 0}, "files": [{"sha": "3c27d32992c0e3a1d69580d1699c28f01fbb76ab", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vpXXXq.inc", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e52926b6c5f02fb3f34706b4afb2d8bcd86638/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvpXXXq.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e52926b6c5f02fb3f34706b4afb2d8bcd86638/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvpXXXq.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvpXXXq.inc?ref=73e52926b6c5f02fb3f34706b4afb2d8bcd86638", "patch": "@@ -0,0 +1,96 @@\n+#define FNNAME1(NAME) exec_ ## NAME\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+void FNNAME (INSN_NAME) (void)\n+{\n+  /* Basic test: y=OP(x), then store the result.  */\n+#define TEST_VPXXXQ1(INSN, T1, T2, W, N)\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    INSN##_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\t\\\n+\t\t   VECT_VAR(vector, T1, W, N));\t\t\t\t\\\n+  vst1q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n+\t\t  VECT_VAR(vector_res, T1, W, N))\n+\n+#define TEST_VPXXXQ(INSN, T1, T2, W, N)\t\t\t\t\t\\\n+  TEST_VPXXXQ1(INSN, T1, T2, W, N)\t\t\t\t\t\\\n+\n+  DECL_VARIABLE(vector, int, 8, 16);\n+  DECL_VARIABLE(vector, int, 16, 8);\n+  DECL_VARIABLE(vector, int, 32, 4);\n+  DECL_VARIABLE(vector, int, 64, 2);\n+  DECL_VARIABLE(vector, uint, 8, 16);\n+  DECL_VARIABLE(vector, uint, 16, 8);\n+  DECL_VARIABLE(vector, uint, 32, 4);\n+  DECL_VARIABLE(vector, uint, 64, 2);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector, float, 16, 8);\n+#endif\n+  DECL_VARIABLE(vector, float, 32, 4);\n+  DECL_VARIABLE(vector, float, 64, 2);\n+\n+  DECL_VARIABLE(vector_res, int, 8, 16);\n+  DECL_VARIABLE(vector_res, int, 16, 8);\n+  DECL_VARIABLE(vector_res, int, 32, 4);\n+  DECL_VARIABLE(vector_res, int, 64, 2);\n+  DECL_VARIABLE(vector_res, uint, 8, 16);\n+  DECL_VARIABLE(vector_res, uint, 16, 8);\n+  DECL_VARIABLE(vector_res, uint, 32, 4);\n+  DECL_VARIABLE(vector_res, uint, 64, 2);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector_res, float, 16, 8);\n+#endif\n+  DECL_VARIABLE(vector_res, float, 32, 4);\n+  DECL_VARIABLE(vector_res, float, 64, 2);\n+\n+  clean_results ();\n+\n+  /* Initialize input \"vector\" from \"buffer\".  */\n+  VLOAD(vector, buffer, q, int, s, 8, 16);\n+  VLOAD(vector, buffer, q, int, s, 16, 8);\n+  VLOAD(vector, buffer, q, int, s, 32, 4);\n+  VLOAD(vector, buffer, q, int, s, 64, 2);\n+  VLOAD(vector, buffer, q, uint, u, 8, 16);\n+  VLOAD(vector, buffer, q, uint, u, 16, 8);\n+  VLOAD(vector, buffer, q, uint, u, 32, 4);\n+  VLOAD(vector, buffer, q, uint, u, 64, 2);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VLOAD(vector, buffer, q, float, f, 16, 8);\n+#endif\n+  VLOAD(vector, buffer, q, float, f, 32, 4);\n+  VLOAD(vector, buffer, q, float, f, 64, 2);\n+\n+  /* Apply a binary operator named INSN_NAME.  */\n+  TEST_VPXXXQ(INSN_NAME, int, s, 8, 16);\n+  TEST_VPXXXQ(INSN_NAME, int, s, 16, 8);\n+  TEST_VPXXXQ(INSN_NAME, int, s, 32, 4);\n+  TEST_VPXXXQ(INSN_NAME, int, s, 64, 2);\n+  TEST_VPXXXQ(INSN_NAME, uint, u, 8, 16);\n+  TEST_VPXXXQ(INSN_NAME, uint, u, 16, 8);\n+  TEST_VPXXXQ(INSN_NAME, uint, u, 32, 4);\n+  TEST_VPXXXQ(INSN_NAME, uint, u, 64, 2);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VPXXXQ(INSN_NAME, float, f, 16, 8);\n+#endif\n+  TEST_VPXXXQ(INSN_NAME, float, f, 32, 4);\n+  TEST_VPXXXQ(INSN_NAME, float, f, 64, 2);\n+\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected, \"\");\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected, \"\");\n+#endif\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected, \"\");\n+  CHECK_FP(TEST_MSG, float, 64, 2, PRIx64, expected, \"\");\n+}\n+\n+int main (void)\n+{\n+  FNNAME (INSN_NAME) ();\n+  return 0;\n+}"}, {"sha": "f15ada8aa52ae004389e014e4c45a5ebdddab291", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vpaddq.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e52926b6c5f02fb3f34706b4afb2d8bcd86638/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvpaddq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e52926b6c5f02fb3f34706b4afb2d8bcd86638/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvpaddq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvpaddq.c?ref=73e52926b6c5f02fb3f34706b4afb2d8bcd86638", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define INSN_NAME vpaddq\n+#define TEST_MSG \"VPADDQ\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected, int, 8, 16) [] = { 0xe1, 0xe5, 0xe9, 0xed,\n+\t\t\t\t\t   0xf1, 0xf5, 0xf9, 0xfd,\n+\t\t\t\t\t   0xe1, 0xe5, 0xe9, 0xed,\n+\t\t\t\t\t   0xf1, 0xf5, 0xf9, 0xfd };\n+VECT_VAR_DECL(expected, int, 16, 8) [] = { 0xffe1, 0xffe5, 0xffe9, 0xffed,\n+\t\t\t\t\t   0xffe1, 0xffe5, 0xffe9, 0xffed };\n+VECT_VAR_DECL(expected, int, 32, 4) [] = { 0xffffffe1, 0xffffffe5,\n+\t\t\t\t\t   0xffffffe1, 0xffffffe5 };\n+VECT_VAR_DECL(expected, int, 64, 2) [] = { 0xffffffffffffffe1,\n+\t\t\t\t\t   0xffffffffffffffe1 };\n+VECT_VAR_DECL(expected, uint, 8, 16) [] = { 0xe1, 0xe5, 0xe9, 0xed,\n+\t\t\t\t\t    0xf1, 0xf5, 0xf9, 0xfd,\n+\t\t\t\t\t    0xe1, 0xe5, 0xe9, 0xed,\n+\t\t\t\t\t    0xf1, 0xf5, 0xf9, 0xfd };\n+VECT_VAR_DECL(expected, uint, 16, 8) [] = { 0xffe1, 0xffe5, 0xffe9, 0xffed,\n+\t\t\t\t\t    0xffe1, 0xffe5, 0xffe9, 0xffed };\n+VECT_VAR_DECL(expected, uint, 32, 4) [] = { 0xffffffe1, 0xffffffe5,\n+\t\t\t\t\t    0xffffffe1, 0xffffffe5};\n+VECT_VAR_DECL(expected, uint, 64, 2) [] = { 0xffffffffffffffe1,\n+\t\t\t\t\t    0xffffffffffffffe1 };\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected, hfloat, 16, 8) [] = { 0xcfc0, 0xcec0, 0xcdc0, 0xccc0,\n+\t\t\t\t\t      0xcfc0, 0xcec0, 0xcdc0, 0xccc0 };\n+#endif\n+VECT_VAR_DECL(expected, hfloat, 32, 4) [] = { 0xc1f80000, 0xc1d80000,\n+\t\t\t\t\t      0xc1f80000, 0xc1d80000 };\n+VECT_VAR_DECL(expected, hfloat, 64, 2) [] = { 0xc03f000000000000,\n+\t\t\t\t\t      0xc03f000000000000 };\n+\n+#include \"vpXXXq.inc\""}]}