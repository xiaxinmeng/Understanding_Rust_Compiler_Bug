{"sha": "0e8fc1857d7cd24c8e09e1eadcff184249fb4746", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU4ZmMxODU3ZDdjZDI0YzhlMDllMWVhZGNmZjE4NDI0OWZiNDc0Ng==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2009-10-06T03:08:20Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2009-10-06T03:08:20Z"}, "message": "re PR libfortran/35862 ([F2003] Implement new rounding modes for run time)\n\n2009-10-05  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libgfortran/35862\n\t* write_float.def (outout_float): Fix handling of special case where no\n\tdigits after the decimal point and values less than 1.0. Adjust index\n\tinto digits string. (WRITE_FLOAT): Remove special case code from macro.\n\nFrom-SVN: r152483", "tree": {"sha": "7c728299c8a13eaa89384aae4c998d99a09c573c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c728299c8a13eaa89384aae4c998d99a09c573c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e8fc1857d7cd24c8e09e1eadcff184249fb4746", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e8fc1857d7cd24c8e09e1eadcff184249fb4746", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e8fc1857d7cd24c8e09e1eadcff184249fb4746", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e8fc1857d7cd24c8e09e1eadcff184249fb4746/comments", "author": null, "committer": null, "parents": [{"sha": "1c8afa72df3e340ad339b20c07c795c993b42fd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c8afa72df3e340ad339b20c07c795c993b42fd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c8afa72df3e340ad339b20c07c795c993b42fd1"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "014d883ffe278d8838c5015e26b062121181f0c5", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8fc1857d7cd24c8e09e1eadcff184249fb4746/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8fc1857d7cd24c8e09e1eadcff184249fb4746/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=0e8fc1857d7cd24c8e09e1eadcff184249fb4746", "patch": "@@ -1,3 +1,10 @@\n+2009-10-05  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/35862\n+\t* write_float.def (outout_float): Fix handling of special case where no\n+\tdigits after the decimal point and values less than 1.0. Adjust index\n+\tinto digits string. (WRITE_FLOAT): Remove special case code from macro.\n+\n 2009-09-28  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/35862"}, {"sha": "eca0e56a5e91b4e4717d83fae1c3c73d42d3bfd1", "filename": "libgfortran/io/write_float.def", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e8fc1857d7cd24c8e09e1eadcff184249fb4746/libgfortran%2Fio%2Fwrite_float.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e8fc1857d7cd24c8e09e1eadcff184249fb4746/libgfortran%2Fio%2Fwrite_float.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite_float.def?ref=0e8fc1857d7cd24c8e09e1eadcff184249fb4746", "patch": "@@ -141,6 +141,13 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n   switch (ft)\n     {\n     case FMT_F:\n+      if (d == 0 && e <= 0 && dtp->u.p.scale_factor == 0)\n+\t{\n+\t  memmove (digits + 1, digits, ndigits - 1);\n+\t  digits[0] = '0';\n+\t  e++;\n+\t}\n+\n       nbefore = e + dtp->u.p.scale_factor;\n       if (nbefore < 0)\n \t{\n@@ -255,7 +262,7 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n       case ROUND_NEAREST:\n \t/* Round compatible unless there is a tie. A tie is a 5 with\n \t   all trailing zero's.  */\n-\ti = nafter + 1;\n+\ti = nafter + nbefore;\n \tif (digits[i] == '5')\n \t  {\n \t    for(i++ ; i < ndigits; i++)\n@@ -264,7 +271,7 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n \t\t  goto do_rnd;\n \t      }\n \t    /* It is a  tie so round to even.  */\n-\t    switch (digits[nafter])\n+\t    switch (digits[nafter + nbefore - 1])\n \t      {\n \t\tcase '1':\n \t\tcase '3':\n@@ -818,14 +825,6 @@ sprintf (buffer, \"%+-#\" STR(MIN_FIELD_WIDTH) \".*\" \\\n \t    return;\\\n \t  }\\\n \ttmp = sign_bit ? -tmp : tmp;\\\n-\tif (f->u.real.d == 0 && f->format == FMT_F\\\n-\t    && dtp->u.p.scale_factor == 0)\\\n-\t  {\\\n-\t    if (tmp < 0.5)\\\n-\t      tmp = 0.0;\\\n-\t    else if (tmp < 1.0)\\\n-\t      tmp = 1.0;\\\n-\t  }\\\n \tzero_flag = (tmp == 0.0);\\\n \\\n \tDTOA ## y\\"}]}