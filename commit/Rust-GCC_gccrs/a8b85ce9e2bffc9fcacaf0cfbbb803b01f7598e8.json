{"sha": "a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThiODVjZTllMmJmZmM5ZmNhY2FmMGNmYmJiODAzYjAxZjc1OThlOA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2016-05-02T14:09:07Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2016-05-02T14:09:07Z"}, "message": "Move \"X +- C1 CMP C2 to X CMP C2 -+ C1\" to match.pd\n\n2016-05-02  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* flag-types.h (enum warn_strict_overflow_code): Move ...\n\t* coretypes.h: ... here.\n\t* fold-const.h (fold_overflow_warning): Declare.\n\t* fold-const.c (fold_overflow_warning): Make non-static.\n\t(fold_comparison): Move the transformation of X +- C1 CMP C2\n\tinto X CMP C2 -+ C1 ...\n\t* match.pd: ... here.\n\t* gimple-fold.c (fold_stmt_1): Protect with\n\tfold_defer_overflow_warnings.\n\ngcc/testsuite/\n\t* gcc.dg/tree-ssa/20040305-1.c: Adjust.\n\nFrom-SVN: r235760", "tree": {"sha": "7567c427730a007f93a9f0c7a26e2c9deebd6207", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7567c427730a007f93a9f0c7a26e2c9deebd6207"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5b37e8664b05336df60996a2411b4d61a852c613", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b37e8664b05336df60996a2411b4d61a852c613", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b37e8664b05336df60996a2411b4d61a852c613"}], "stats": {"total": 185, "additions": 90, "deletions": 95}, "files": [{"sha": "10bf855f351f6fdcf7f28351f45ca8cc33dc0e61", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8", "patch": "@@ -1,3 +1,15 @@\n+2016-05-02  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* flag-types.h (enum warn_strict_overflow_code): Move ...\n+\t* coretypes.h: ... here.\n+\t* fold-const.h (fold_overflow_warning): Declare.\n+\t* fold-const.c (fold_overflow_warning): Make non-static.\n+\t(fold_comparison): Move the transformation of X +- C1 CMP C2\n+\tinto X CMP C2 -+ C1 ...\n+\t* match.pd: ... here.\n+\t* gimple-fold.c (fold_stmt_1): Protect with\n+\tfold_defer_overflow_warnings.\n+\n 2016-05-02  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* omp-low.c (struct oacc_loop): Add 'inner' field."}, {"sha": "2932d73e2614c94f55b11b8854b3e84912314093", "filename": "gcc/coretypes.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8", "patch": "@@ -222,6 +222,30 @@ enum var_init_status\n   VAR_INIT_STATUS_INITIALIZED\n };\n \n+/* Names for the different levels of -Wstrict-overflow=N.  The numeric\n+   values here correspond to N.  */\n+enum warn_strict_overflow_code\n+{\n+  /* Overflow warning that should be issued with -Wall: a questionable\n+     construct that is easy to avoid even when using macros.  Example:\n+     folding (x + CONSTANT > x) to 1.  */\n+  WARN_STRICT_OVERFLOW_ALL = 1,\n+  /* Overflow warning about folding a comparison to a constant because\n+     of undefined signed overflow, other than cases covered by\n+     WARN_STRICT_OVERFLOW_ALL.  Example: folding (abs (x) >= 0) to 1\n+     (this is false when x == INT_MIN).  */\n+  WARN_STRICT_OVERFLOW_CONDITIONAL = 2,\n+  /* Overflow warning about changes to comparisons other than folding\n+     them to a constant.  Example: folding (x + 1 > 1) to (x > 0).  */\n+  WARN_STRICT_OVERFLOW_COMPARISON = 3,\n+  /* Overflow warnings not covered by the above cases.  Example:\n+     folding ((x * 10) / 5) to (x * 2).  */\n+  WARN_STRICT_OVERFLOW_MISC = 4,\n+  /* Overflow warnings about reducing magnitude of constants in\n+     comparison.  Example: folding (x + 2 > y) to (x + 1 >= y).  */\n+  WARN_STRICT_OVERFLOW_MAGNITUDE = 5\n+};\n+\n /* The type of an alias set.  Code currently assumes that variables of\n    this type can take the values 0 (the alias set which aliases\n    everything) and -1 (sometimes indicating that the alias set is"}, {"sha": "dd57e167098a334f193b4f072e45feecd975dedf", "filename": "gcc/flag-types.h", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8", "patch": "@@ -178,30 +178,6 @@ enum stack_check_type\n   FULL_BUILTIN_STACK_CHECK\n };\n \n-/* Names for the different levels of -Wstrict-overflow=N.  The numeric\n-   values here correspond to N.  */\n-enum warn_strict_overflow_code\n-{\n-  /* Overflow warning that should be issued with -Wall: a questionable\n-     construct that is easy to avoid even when using macros.  Example:\n-     folding (x + CONSTANT > x) to 1.  */\n-  WARN_STRICT_OVERFLOW_ALL = 1,\n-  /* Overflow warning about folding a comparison to a constant because\n-     of undefined signed overflow, other than cases covered by\n-     WARN_STRICT_OVERFLOW_ALL.  Example: folding (abs (x) >= 0) to 1\n-     (this is false when x == INT_MIN).  */\n-  WARN_STRICT_OVERFLOW_CONDITIONAL = 2,\n-  /* Overflow warning about changes to comparisons other than folding\n-     them to a constant.  Example: folding (x + 1 > 1) to (x > 0).  */\n-  WARN_STRICT_OVERFLOW_COMPARISON = 3,\n-  /* Overflow warnings not covered by the above cases.  Example:\n-     folding ((x * 10) / 5) to (x * 2).  */\n-  WARN_STRICT_OVERFLOW_MISC = 4,\n-  /* Overflow warnings about reducing magnitude of constants in\n-     comparison.  Example: folding (x + 2 > y) to (x + 1 >= y).  */\n-  WARN_STRICT_OVERFLOW_MAGNITUDE = 5\n-};\n-\n /* Floating-point contraction mode.  */\n enum fp_contract_mode {\n   FP_CONTRACT_OFF = 0,"}, {"sha": "0004f789d53269ade669457a8e6475e43b9cf76c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 70, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8", "patch": "@@ -297,7 +297,7 @@ fold_deferring_overflow_warnings_p (void)\n /* This is called when we fold something based on the fact that signed\n    overflow is undefined.  */\n \n-static void\n+void\n fold_overflow_warning (const char* gmsgid, enum warn_strict_overflow_code wc)\n {\n   if (fold_deferring_overflow_warnings > 0)\n@@ -8392,75 +8392,6 @@ fold_comparison (location_t loc, enum tree_code code, tree type,\n   STRIP_SIGN_NOPS (arg0);\n   STRIP_SIGN_NOPS (arg1);\n \n-  /* Transform comparisons of the form X +- C1 CMP C2 to X CMP C2 -+ C1.  */\n-  if ((TREE_CODE (arg0) == PLUS_EXPR || TREE_CODE (arg0) == MINUS_EXPR)\n-      && (equality_code\n-\t  || (ANY_INTEGRAL_TYPE_P (TREE_TYPE (arg0))\n-\t      && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (arg0))))\n-      && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST\n-      && !TREE_OVERFLOW (TREE_OPERAND (arg0, 1))\n-      && TREE_CODE (arg1) == INTEGER_CST\n-      && !TREE_OVERFLOW (arg1))\n-    {\n-      const enum tree_code\n-\treverse_op = TREE_CODE (arg0) == PLUS_EXPR ? MINUS_EXPR : PLUS_EXPR;\n-      tree const1 = TREE_OPERAND (arg0, 1);\n-      tree const2 = fold_convert_loc (loc, TREE_TYPE (const1), arg1);\n-      tree variable = TREE_OPERAND (arg0, 0);\n-      tree new_const = int_const_binop (reverse_op, const2, const1);\n-\n-      /* If the constant operation overflowed this can be\n-\t simplified as a comparison against INT_MAX/INT_MIN.  */\n-      if (TREE_OVERFLOW (new_const)\n-\t  && !TYPE_OVERFLOW_WRAPS (TREE_TYPE (arg0)))\n-\t{\n-\t  int const1_sgn = tree_int_cst_sgn (const1);\n-\t  enum tree_code code2 = code;\n-\n-\t  /* Get the sign of the constant on the lhs if the\n-\t     operation were VARIABLE + CONST1.  */\n-\t  if (TREE_CODE (arg0) == MINUS_EXPR)\n-\t    const1_sgn = -const1_sgn;\n-\n-\t  /* The sign of the constant determines if we overflowed\n-\t     INT_MAX (const1_sgn == -1) or INT_MIN (const1_sgn == 1).\n-\t     Canonicalize to the INT_MIN overflow by swapping the comparison\n-\t     if necessary.  */\n-\t  if (const1_sgn == -1)\n-\t    code2 = swap_tree_comparison (code);\n-\n-\t  /* We now can look at the canonicalized case\n-\t       VARIABLE + 1  CODE2  INT_MIN\n-\t     and decide on the result.  */\n-\t  switch (code2)\n-\t    {\n-\t    case EQ_EXPR:\n-\t    case LT_EXPR:\n-\t    case LE_EXPR:\n-\t      return\n-\t\tomit_one_operand_loc (loc, type, boolean_false_node, variable);\n-\n-\t    case NE_EXPR:\n-\t    case GE_EXPR:\n-\t    case GT_EXPR:\n-\t      return\n-\t\tomit_one_operand_loc (loc, type, boolean_true_node, variable);\n-\n-\t    default:\n-\t      gcc_unreachable ();\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  if (!equality_code)\n-\t    fold_overflow_warning (\"assuming signed overflow does not occur \"\n-\t\t\t\t   \"when changing X +- C1 cmp C2 to \"\n-\t\t\t\t   \"X cmp C2 -+ C1\",\n-\t\t\t\t   WARN_STRICT_OVERFLOW_COMPARISON);\n-\t  return fold_build2_loc (loc, code, type, variable, new_const);\n-\t}\n-    }\n-\n   /* For comparisons of pointers we can decompose it to a compile time\n      comparison of the base objects and the offsets into the object.\n      This requires at least one operand being an ADDR_EXPR or a"}, {"sha": "637e46b0d48788217196ba53110b69d302b17db7", "filename": "gcc/fold-const.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8/gcc%2Ffold-const.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8/gcc%2Ffold-const.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.h?ref=a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8", "patch": "@@ -86,6 +86,7 @@ extern void fold_defer_overflow_warnings (void);\n extern void fold_undefer_overflow_warnings (bool, const gimple *, int);\n extern void fold_undefer_and_ignore_overflow_warnings (void);\n extern bool fold_deferring_overflow_warnings_p (void);\n+extern void fold_overflow_warning (const char*, enum warn_strict_overflow_code);\n extern int operand_equal_p (const_tree, const_tree, unsigned int);\n extern int multiple_of_p (tree, const_tree, const_tree);\n #define omit_one_operand(T1,T2,T3)\\"}, {"sha": "d5e859c95737022808ce512965e6070caf0af817", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8", "patch": "@@ -3525,7 +3525,9 @@ fold_stmt_1 (gimple_stmt_iterator *gsi, bool inplace, tree (*valueize) (tree))\n {\n   bool changed = false;\n   gimple *stmt = gsi_stmt (*gsi);\n+  bool nowarning = gimple_no_warning_p (stmt);\n   unsigned i;\n+  fold_defer_overflow_warnings ();\n \n   /* First do required canonicalization of [TARGET_]MEM_REF addresses\n      after propagation.\n@@ -3818,6 +3820,7 @@ fold_stmt_1 (gimple_stmt_iterator *gsi, bool inplace, tree (*valueize) (tree))\n \t}\n     }\n \n+  fold_undefer_overflow_warnings (changed && !nowarning, stmt, 0);\n   return changed;\n }\n "}, {"sha": "f1b1f15412568896f91f44f2ba01780d4da02b00", "filename": "gcc/match.pd", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8", "patch": "@@ -3186,3 +3186,47 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (SIGNBIT @0)\n  (if (!HONOR_SIGNED_ZEROS (@0))\n   (convert (lt @0 { build_real (TREE_TYPE (@0), dconst0); }))))\n+\n+/* Transform comparisons of the form X +- C1 CMP C2 to X CMP C2 -+ C1.  */\n+(for cmp (eq ne)\n+ (for op (plus minus)\n+      rop (minus plus)\n+  (simplify\n+   (cmp (op@3 @0 INTEGER_CST@1) INTEGER_CST@2)\n+   (if (!TREE_OVERFLOW (@1) && !TREE_OVERFLOW (@2)\n+\t&& !TYPE_OVERFLOW_SANITIZED (TREE_TYPE (@0))\n+\t&& !TYPE_OVERFLOW_TRAPS (TREE_TYPE (@0))\n+\t&& !TYPE_SATURATING (TREE_TYPE (@0)))\n+    (with { tree res = int_const_binop (rop, @2, @1); }\n+     (if (TREE_OVERFLOW (res))\n+      { constant_boolean_node (cmp == NE_EXPR, type); }\n+      (if (single_use (@3))\n+       (cmp @0 { res; }))))))))\n+(for cmp (lt le gt ge)\n+ (for op (plus minus)\n+      rop (minus plus)\n+  (simplify\n+   (cmp (op@3 @0 INTEGER_CST@1) INTEGER_CST@2)\n+   (if (!TREE_OVERFLOW (@1) && !TREE_OVERFLOW (@2)\n+\t&& TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@0)))\n+    (with { tree res = int_const_binop (rop, @2, @1); }\n+     (if (TREE_OVERFLOW (res))\n+      {\n+\tfold_overflow_warning ((\"assuming signed overflow does not occur \"\n+\t\t\t\t\"when simplifying conditional to constant\"),\n+\t\t\t       WARN_STRICT_OVERFLOW_CONDITIONAL);\n+        bool less = cmp == LE_EXPR || cmp == LT_EXPR;\n+\t/* wi::ges_p (@2, 0) should be sufficient for a signed type.  */\n+\tbool ovf_high = wi::lt_p (@1, 0, TYPE_SIGN (TREE_TYPE (@1)))\n+\t\t\t!= (op == MINUS_EXPR);\n+\tconstant_boolean_node (less == ovf_high, type);\n+      }\n+      (if (single_use (@3))\n+       (with\n+\t{\n+\t  fold_overflow_warning ((\"assuming signed overflow does not occur \"\n+\t\t\t\t  \"when changing X +- C1 cmp C2 to \"\n+\t\t\t\t  \"X cmp C2 -+ C1\"),\n+\t\t\t\t WARN_STRICT_OVERFLOW_COMPARISON);\n+\t}\n+\t(cmp @0 { res; })))))))))"}, {"sha": "f40758432842b288d2c4796f799f624f88f87398", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8", "patch": "@@ -1,3 +1,7 @@\n+2016-05-02  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* gcc.dg/tree-ssa/20040305-1.c: Adjust.\n+\n 2016-05-02  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* c-c++-common/goacc/loop-auto-1.c: Adjust expected warnings."}, {"sha": "501e28cff54df34998a3c278238c2ee20d39ecfb", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040305-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040305-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040305-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040305-1.c?ref=a8b85ce9e2bffc9fcacaf0cfbbb803b01f7598e8", "patch": "@@ -23,7 +23,7 @@ void foo(int edx, int eax)\n  \n \n /* Verify that we did a forward propagation.  */\n-/* { dg-final { scan-tree-dump-times \"Replaced\" 1 \"forwprop1\"} } */\n+/* { dg-final { scan-tree-dump-times \"gimple_simplified\" 1 \"forwprop1\"} } */\n \n /* After cddce we should have two IF statements remaining as the other\n    two tests can be threaded.  */"}]}