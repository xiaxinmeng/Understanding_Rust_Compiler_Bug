{"sha": "acdc40dfd2305e16f92e15273dad1cc6d8bee32c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNkYzQwZGZkMjMwNWUxNmY5MmUxNTI3M2RhZDFjYzZkOGJlZTMyYw==", "commit": {"author": {"name": "Dorit Nuzman", "email": "dorit@il.ibm.com", "date": "2007-01-14T12:42:40Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2007-01-14T12:42:40Z"}, "message": "param.h (MIN_VECT_LOOP_BOUND): New.\n\n        * param.h (MIN_VECT_LOOP_BOUND): New.\n        * params.def (MIN_VECT_LOOP_BOUND): New.\n        * tree-vectorizer.c (slpeel_tree_peel_loop_to_edge): Takes another\n        argument - minimum threshold for number of iterations.\n        * tree-vectorizer.h (slpeel_tree_peel_loop_to_edge): Add another\n        argument to declaration.\n        * tree-vect-analyze.c (vect_analyze_operations): Check value of\n        MIN_VECT_LOOP_BOUND.\n        * tree-vect-transform.c (vect_do_peeling_for_loop_bound): Call\n        slpeel_tree_peel_loop_to_edge with additional argument.\n        (vect_do_peeling_for_alignment): Likewise.\n        * doc/invoke.texi (min-vect-loop-bound): Document new param option.\n\nFrom-SVN: r120770", "tree": {"sha": "c1d065e5ba09e4c5a85904acf9038d65101037cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1d065e5ba09e4c5a85904acf9038d65101037cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acdc40dfd2305e16f92e15273dad1cc6d8bee32c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acdc40dfd2305e16f92e15273dad1cc6d8bee32c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acdc40dfd2305e16f92e15273dad1cc6d8bee32c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acdc40dfd2305e16f92e15273dad1cc6d8bee32c/comments", "author": null, "committer": null, "parents": [{"sha": "37fc8424ac5a0896dc43a0d506d434b60c55452d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37fc8424ac5a0896dc43a0d506d434b60c55452d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37fc8424ac5a0896dc43a0d506d434b60c55452d"}], "stats": {"total": 51, "additions": 45, "deletions": 6}, "files": [{"sha": "646e2928035626e0fe9c2c51521c2008c46d2f02", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acdc40dfd2305e16f92e15273dad1cc6d8bee32c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acdc40dfd2305e16f92e15273dad1cc6d8bee32c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=acdc40dfd2305e16f92e15273dad1cc6d8bee32c", "patch": "@@ -1,3 +1,18 @@\n+2007-01-14  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\t* param.h (MIN_VECT_LOOP_BOUND): New.\n+\t* params.def (MIN_VECT_LOOP_BOUND): New.\n+\t* tree-vectorizer.c (slpeel_tree_peel_loop_to_edge): Takes another\n+\targument - minimum threshold for number of iterations. \n+\t* tree-vectorizer.h (slpeel_tree_peel_loop_to_edge): Add another\n+\targument to declaration.\n+\t* tree-vect-analyze.c (vect_analyze_operations): Check value of \n+\tMIN_VECT_LOOP_BOUND.\n+\t* tree-vect-transform.c (vect_do_peeling_for_loop_bound): Call\n+\tslpeel_tree_peel_loop_to_edge with additional argument.\n+\t(vect_do_peeling_for_alignment): Likewise.\n+\t* doc/invoke.texi (min-vect-loop-bound): Document new param option.\n+\n 2007-01-14  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/30413"}, {"sha": "b896aa5a6b2ca352d6b3b3e956c54b73dccc32d4", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acdc40dfd2305e16f92e15273dad1cc6d8bee32c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acdc40dfd2305e16f92e15273dad1cc6d8bee32c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=acdc40dfd2305e16f92e15273dad1cc6d8bee32c", "patch": "@@ -6130,6 +6130,12 @@ inlining for code having large abstraction penalty (many functions that just\n pass the arguments to other functions) and decrease inlining for code with low\n abstraction penalty.  The default value is 16.\n \n+@item min-vect-loop-bound\n+The minimum number of iterations under which a loop will not get vectorized \n+when @option{-ftree-vectorize} is used.  The number of iterations after \n+vectorization needs to be greater than the value specified by this option\n+to allow vectorization.  The default value is 0.\n+\n @item max-unrolled-insns\n The maximum number of instructions that a loop should have if that loop\n is unrolled, and if the loop is unrolled, it determines how many times"}, {"sha": "6528361e6e94428bdaadad224b46451cc15b855e", "filename": "gcc/params.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acdc40dfd2305e16f92e15273dad1cc6d8bee32c/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acdc40dfd2305e16f92e15273dad1cc6d8bee32c/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=acdc40dfd2305e16f92e15273dad1cc6d8bee32c", "patch": "@@ -146,6 +146,12 @@ DEFPARAM (PARAM_MAX_VARIABLE_EXPANSIONS,\n \t  \"If -fvariable-expansion-in-unroller is used, the maximum number of times that an individual variable will be expanded during loop unrolling\",\n           1, 0, 0)\n      \n+/* Limit loop autovectorization to loops with large enough iteration count.  */\n+DEFPARAM (PARAM_MIN_VECT_LOOP_BOUND,\n+\t  \"min-vect-loop-bound\",\n+\t  \"If -ftree-vectorize is used, the minimal loop bound of a loop to be considered for vectorization\",\n+\t  0, 0, 0)\n+\n /* The maximum number of instructions to consider when looking for an\n    instruction to fill a delay slot.  If more than this arbitrary\n    number of instructions is searched, the time savings from filling"}, {"sha": "296db6141f55ce07911016c282eee263b13b437a", "filename": "gcc/params.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acdc40dfd2305e16f92e15273dad1cc6d8bee32c/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acdc40dfd2305e16f92e15273dad1cc6d8bee32c/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=acdc40dfd2305e16f92e15273dad1cc6d8bee32c", "patch": "@@ -118,6 +118,8 @@ typedef enum compiler_param\n   PARAM_VALUE (PARAM_MAX_INLINE_INSNS_AUTO)\n #define MAX_VARIABLE_EXPANSIONS \\\n   PARAM_VALUE (PARAM_MAX_VARIABLE_EXPANSIONS)\n+#define MIN_VECT_LOOP_BOUND \\\n+  PARAM_VALUE (PARAM_MIN_VECT_LOOP_BOUND)\n #define MAX_DELAY_SLOT_INSN_SEARCH \\\n   PARAM_VALUE (PARAM_MAX_DELAY_SLOT_INSN_SEARCH)\n #define MAX_DELAY_SLOT_LIVE_SEARCH \\"}, {"sha": "83293d6051e5fd07b4e48bf40c3bc76f74014cc2", "filename": "gcc/tree-vect-analyze.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acdc40dfd2305e16f92e15273dad1cc6d8bee32c/gcc%2Ftree-vect-analyze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acdc40dfd2305e16f92e15273dad1cc6d8bee32c/gcc%2Ftree-vect-analyze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-analyze.c?ref=acdc40dfd2305e16f92e15273dad1cc6d8bee32c", "patch": "@@ -368,7 +368,10 @@ vect_analyze_operations (loop_vec_info loop_vinfo)\n         vectorization_factor, LOOP_VINFO_INT_NITERS (loop_vinfo));\n \n   if (LOOP_VINFO_NITERS_KNOWN_P (loop_vinfo)\n-      && LOOP_VINFO_INT_NITERS (loop_vinfo) < vectorization_factor)\n+      && ((LOOP_VINFO_INT_NITERS (loop_vinfo) < vectorization_factor)\n+\t  || (LOOP_VINFO_INT_NITERS (loop_vinfo) <=\n+\t\t((unsigned) (PARAM_VALUE (PARAM_MIN_VECT_LOOP_BOUND)) \n+\t\t\t\t\t   * vectorization_factor))))\n     {\n       if (vect_print_dump_info (REPORT_UNVECTORIZED_LOOPS))\n \tfprintf (vect_dump, \"not vectorized: iteration count too small.\");"}, {"sha": "70fa217453a9aa91ebc8350f9a43f87fc8f45bf9", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acdc40dfd2305e16f92e15273dad1cc6d8bee32c/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acdc40dfd2305e16f92e15273dad1cc6d8bee32c/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=acdc40dfd2305e16f92e15273dad1cc6d8bee32c", "patch": "@@ -35,6 +35,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"cfgloop.h\"\n #include \"expr.h\"\n #include \"optabs.h\"\n+#include \"params.h\"\n #include \"recog.h\"\n #include \"tree-data-ref.h\"\n #include \"tree-chrec.h\"\n@@ -4276,6 +4277,7 @@ vect_do_peeling_for_loop_bound (loop_vec_info loop_vinfo, tree *ratio)\n   edge update_e;\n   basic_block preheader;\n   int loop_num;\n+  unsigned int th;\n \n   if (vect_print_dump_info (REPORT_DETAILS))\n     fprintf (vect_dump, \"=== vect_do_peeling_for_loop_bound ===\");\n@@ -4291,8 +4293,11 @@ vect_do_peeling_for_loop_bound (loop_vec_info loop_vinfo, tree *ratio)\n \t\t\t\t   &ratio_mult_vf_name, ratio);\n \n   loop_num  = loop->num; \n+  /* Threshold for vectorized loop.  */\n+  th = (PARAM_VALUE (PARAM_MIN_VECT_LOOP_BOUND)) * \n+\t\t\tLOOP_VINFO_VECT_FACTOR (loop_vinfo);\n   new_loop = slpeel_tree_peel_loop_to_edge (loop, single_exit (loop),\n-\t\t\t\t\t    ratio_mult_vf_name, ni_name, false);\n+\t\t\t\t\t    ratio_mult_vf_name, ni_name, false, th);\n   gcc_assert (new_loop);\n   gcc_assert (loop_num == loop->num);\n #ifdef ENABLE_CHECKING\n@@ -4517,7 +4522,7 @@ vect_do_peeling_for_alignment (loop_vec_info loop_vinfo)\n   /* Peel the prolog loop and iterate it niters_of_prolog_loop.  */\n   new_loop = \n \tslpeel_tree_peel_loop_to_edge (loop, loop_preheader_edge (loop), \n-\t\t\t\t       niters_of_prolog_loop, ni_name, true); \n+\t\t\t\t       niters_of_prolog_loop, ni_name, true, 0); \n   gcc_assert (new_loop);\n #ifdef ENABLE_CHECKING\n   slpeel_verify_cfg_after_peeling (new_loop, loop);"}, {"sha": "7fb9857795189ce3250df438de71d63a1c71386a", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acdc40dfd2305e16f92e15273dad1cc6d8bee32c/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acdc40dfd2305e16f92e15273dad1cc6d8bee32c/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=acdc40dfd2305e16f92e15273dad1cc6d8bee32c", "patch": "@@ -1064,7 +1064,8 @@ slpeel_verify_cfg_after_peeling (struct loop *first_loop,\n struct loop*\n slpeel_tree_peel_loop_to_edge (struct loop *loop, \n \t\t\t       edge e, tree first_niters, \n-\t\t\t       tree niters, bool update_first_loop_count)\n+\t\t\t       tree niters, bool update_first_loop_count,\n+\t\t\t       unsigned int th)\n {\n   struct loop *new_loop = NULL, *first_loop, *second_loop;\n   edge skip_e;\n@@ -1157,7 +1158,8 @@ slpeel_tree_peel_loop_to_edge (struct loop *loop,\n \n   pre_condition =\n     fold_build2 (LE_EXPR, boolean_type_node, first_niters, \n-                 build_int_cst (TREE_TYPE (first_niters), 0));\n+\tbuild_int_cst (TREE_TYPE (first_niters), th));\n+\n   skip_e = slpeel_add_loop_guard (bb_before_first_loop, pre_condition,\n                                   bb_before_second_loop, bb_before_first_loop);\n   slpeel_update_phi_nodes_for_guard1 (skip_e, first_loop,"}, {"sha": "92b556712f3e0e18f1f08d0e9a873c63c9a3f5b1", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acdc40dfd2305e16f92e15273dad1cc6d8bee32c/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acdc40dfd2305e16f92e15273dad1cc6d8bee32c/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=acdc40dfd2305e16f92e15273dad1cc6d8bee32c", "patch": "@@ -342,7 +342,7 @@ extern bitmap vect_memsyms_to_rename;\n    divide by the vectorization factor, and to peel the first few iterations\n    to force the alignment of data references in the loop.  */\n extern struct loop *slpeel_tree_peel_loop_to_edge \n-  (struct loop *, edge, tree, tree, bool);\n+  (struct loop *, edge, tree, tree, bool, unsigned int);\n extern void slpeel_make_loop_iterate_ntimes (struct loop *, tree);\n extern bool slpeel_can_duplicate_loop_p (struct loop *, edge);\n #ifdef ENABLE_CHECKING"}]}