{"sha": "8a5d3064fb8b6f15ff667623f9e16b6eac8d5cbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE1ZDMwNjRmYjhiNmYxNWZmNjY3NjIzZjllMTZiNmVhYzhkNWNiZQ==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-05-17T20:28:08Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-05-17T20:28:08Z"}, "message": "expr.c (expand_expr, [...]): Move from the C++ frontend to the backend where it belongs.\n\n\t* expr.c (expand_expr, cond UNSAVE_EXPR): Move from the C++\n\tfrontend to the backend where it belongs.\n\t* tree.c (unsave_expr): Ditto.\n\t(unsave_expr_now): Ditto.\n\t* tree.def (UNSAVE_EXPR): Ditto.\n\t* cp-tree.h (unsave_expr): Ditto.\n\t(unsave_expr_now): Ditto.\n\nFrom-SVN: r12016", "tree": {"sha": "23db2cbca06d16ef5bd807c62513ab31201453ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23db2cbca06d16ef5bd807c62513ab31201453ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a5d3064fb8b6f15ff667623f9e16b6eac8d5cbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a5d3064fb8b6f15ff667623f9e16b6eac8d5cbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a5d3064fb8b6f15ff667623f9e16b6eac8d5cbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a5d3064fb8b6f15ff667623f9e16b6eac8d5cbe/comments", "author": null, "committer": null, "parents": [{"sha": "679163cf4d5b714dde664c4124be0e0ececf86e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/679163cf4d5b714dde664c4124be0e0ececf86e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/679163cf4d5b714dde664c4124be0e0ececf86e0"}], "stats": {"total": 105, "additions": 0, "deletions": 105}, "files": [{"sha": "4694c476c75b29f3a5179c1b5550c71f431867d5", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5d3064fb8b6f15ff667623f9e16b6eac8d5cbe/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5d3064fb8b6f15ff667623f9e16b6eac8d5cbe/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=8a5d3064fb8b6f15ff667623f9e16b6eac8d5cbe", "patch": "@@ -35,15 +35,6 @@ DEFTREECODE (CP_OFFSET_REF, \"cp_offset_ref\", \"r\", 2)\n DEFTREECODE (DELETE_EXPR, \"dl_expr\", \"e\", 2)\n DEFTREECODE (VEC_DELETE_EXPR, \"vec_dl_expr\", \"e\", 2)\n \n-/* For a UNSAVE_EXPR, operand 0 is the value to unsave.  By unsave, we\n-   mean that all _EXPRs such as TARGET_EXPRs, SAVE_EXPRs,\n-   CALL_EXPRs and RTL_EXPRs, that are protected\n-   from being evaluated more than once should be reset so that a new\n-   expand_expr call of this expr will cause those to be re-evaluated.\n-   This is useful when we want to reuse a tree in different places,\n-   but where we must re-expand.  */\n-DEFTREECODE (UNSAVE_EXPR, \"unsave_expr\", \"e\", 1)\n-\n /* Value is reference to particular overloaded class method.\n    Operand 0 is the class name (an IDENTIFIER_NODE);\n    operand 1 is the field (also an IDENTIFIER_NODE)."}, {"sha": "272ac1b4e2b8060ae5eca4f9d5409c631f618ddf", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5d3064fb8b6f15ff667623f9e16b6eac8d5cbe/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5d3064fb8b6f15ff667623f9e16b6eac8d5cbe/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8a5d3064fb8b6f15ff667623f9e16b6eac8d5cbe", "patch": "@@ -2151,7 +2151,6 @@ extern tree start_anon_func\t\t\tPROTO((void));\n /* skip cplus_expand_expr */\n extern void init_cplus_expand\t\t\tPROTO((void));\n extern void fixup_result_decl\t\t\tPROTO((tree, struct rtx_def *));\n-extern tree unsave_expr_now\t\t\tPROTO((tree));\n \n /* in repo.c */\n extern void init_repo\t\t\t\tPROTO((char*));\n@@ -2404,8 +2403,6 @@ extern void print_lang_statistics\t\tPROTO((void));\n extern tree array_type_nelts_total\t\tPROTO((tree));\n extern tree array_type_nelts_top\t\tPROTO((tree));\n extern tree break_out_target_exprs\t\tPROTO((tree));\n-extern tree build_unsave_expr\t\t\tPROTO((tree));\n-extern tree unsave_expr\t\t\t\tPROTO((tree));\n extern int cp_expand_decl_cleanup\t\tPROTO((tree, tree));\n extern tree get_type_decl\t\t\tPROTO((tree));\n extern tree vec_binfo_member\t\t\tPROTO((tree, tree));"}, {"sha": "ef90ad4ecea0bc44a3a9cf8b10adcb23723e76c9", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5d3064fb8b6f15ff667623f9e16b6eac8d5cbe/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5d3064fb8b6f15ff667623f9e16b6eac8d5cbe/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=8a5d3064fb8b6f15ff667623f9e16b6eac8d5cbe", "patch": "@@ -226,14 +226,6 @@ cplus_expand_expr (exp, target, tmode, modifier)\n       expand_throw (TREE_OPERAND (exp, 0));\n       return NULL;\n \n-    case UNSAVE_EXPR:\n-      {\n-\trtx temp;\n-\ttemp = expand_expr (TREE_OPERAND (exp, 0), target, tmode, modifier);\n-\tTREE_OPERAND (exp, 0) = unsave_expr_now (TREE_OPERAND (exp, 0));\n-\treturn temp;\n-      }\n-\n     case VEC_INIT_EXPR:\n       return expand_expr\n \t(expand_vec_init"}, {"sha": "d0970cd2d484895dbe49eb88b81ebf2fcb104b68", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5d3064fb8b6f15ff667623f9e16b6eac8d5cbe/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5d3064fb8b6f15ff667623f9e16b6eac8d5cbe/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=8a5d3064fb8b6f15ff667623f9e16b6eac8d5cbe", "patch": "@@ -1753,91 +1753,6 @@ break_out_target_exprs (t)\n   return mapcar (t, bot_manip);\n }\n \n-/* Arrange for an expression to be expanded multiple independent\n-   times.  This is useful for cleanup actions, as the backend can\n-   expand them multiple times in different places.  */\n-tree\n-unsave_expr (expr)\n-     tree expr;\n-{\n-  tree t;\n-\n-  /* If this is already protected, no sense in protecting it again.  */\n-  if (TREE_CODE (expr) == UNSAVE_EXPR)\n-    return expr;\n-\n-  t = build1 (UNSAVE_EXPR, TREE_TYPE (expr), expr);\n-  TREE_SIDE_EFFECTS (t) = TREE_SIDE_EFFECTS (expr);\n-  return t;\n-}\n-\n-/* Modify a tree in place so that all the evaluate only once things\n-   are cleared out.  Return the EXPR given.  */\n-tree\n-unsave_expr_now (expr)\n-     tree expr;\n-{\n-  enum tree_code code;\n-  register int i;\n-\n-  if (expr == NULL_TREE)\n-    return expr;\n-\n-  code = TREE_CODE (expr);\n-  switch (code)\n-    {\n-    case SAVE_EXPR:\n-      SAVE_EXPR_RTL (expr) = NULL_RTX;\n-      break;\n-\n-    case TARGET_EXPR:\n-      sorry (\"TARGET_EXPR reused inside UNSAVE_EXPR\");\n-      break;\n-      \n-    case RTL_EXPR:\n-      warning (\"RTL_EXPR reused inside UNSAVE_EXPR\");\n-      RTL_EXPR_SEQUENCE (expr) = NULL_RTX;\n-      break;\n-\n-    case CALL_EXPR:\n-      CALL_EXPR_RTL (expr) = NULL_RTX;\n-      if (TREE_OPERAND (expr, 1)\n-\t  && TREE_CODE (TREE_OPERAND (expr, 1)) == TREE_LIST)\n-\t{\n-\t  tree exp = TREE_OPERAND (expr, 1);\n-\t  while (exp)\n-\t    {\n-\t      unsave_expr_now (TREE_VALUE (exp));\n-\t      exp = TREE_CHAIN (exp);\n-\t    }\n-\t}\n-      break;\n-    }\n-\n-  switch (TREE_CODE_CLASS (code))\n-    {\n-    case 'c':  /* a constant */\n-    case 't':  /* a type node */\n-    case 'x':  /* something random, like an identifier or an ERROR_MARK.  */\n-    case 'd':  /* A decl node */\n-    case 'b':  /* A block node */\n-      return expr;\n-\n-    case 'e':  /* an expression */\n-    case 'r':  /* a reference */\n-    case 's':  /* an expression with side effects */\n-    case '<':  /* a comparison expression */\n-    case '2':  /* a binary arithmetic expression */\n-    case '1':  /* a unary arithmetic expression */\n-      for (i = tree_code_length[(int) code] - 1; i >= 0; i--)\n-\tunsave_expr_now (TREE_OPERAND (expr, i));\n-      return expr;\n-\n-    default:\n-      my_friendly_abort (999);\n-    }\n-}\n-\n /* Since cleanup may have SAVE_EXPRs in it, we protect it with an\n    UNSAVE_EXPR as the backend cannot yet handle SAVE_EXPRs in cleanups\n    by itself.  */"}]}