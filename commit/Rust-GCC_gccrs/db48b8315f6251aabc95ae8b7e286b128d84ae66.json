{"sha": "db48b8315f6251aabc95ae8b7e286b128d84ae66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI0OGI4MzE1ZjYyNTFhYWJjOTVhZThiN2UyODZiMTI4ZDg0YWU2Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-09-30T00:50:29Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-09-30T00:50:29Z"}, "message": "Support normal type_info-based EH mechanisms with -fno-rtti.\n\n\t* except.c (build_eh_type_type): Remove special -fno-rtti handling.\n\t(build_eh_type_type_ref): Likewise.\n\t(build_eh_type): Remove.\n\t(expand_throw): Call build_eh_type_type, not build_eh_type.\n\t* decl2.c (import_export_decl): Don't associate the tinfo fn with\n\tthe vtable if -fno-rtti.\n\t* decl.c (init_decl_processing): Always init_rtti_processing.\n\n\t* rtti.c (get_typeid): Don't complain about -fno-rtti.\n\nFrom-SVN: r29715", "tree": {"sha": "fd62bca163e20657a4fd39431cbd3bfed981a486", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd62bca163e20657a4fd39431cbd3bfed981a486"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db48b8315f6251aabc95ae8b7e286b128d84ae66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db48b8315f6251aabc95ae8b7e286b128d84ae66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db48b8315f6251aabc95ae8b7e286b128d84ae66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db48b8315f6251aabc95ae8b7e286b128d84ae66/comments", "author": null, "committer": null, "parents": [{"sha": "2450ddbbda5092aa95cbba7ae9db64fb9ea46f2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2450ddbbda5092aa95cbba7ae9db64fb9ea46f2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2450ddbbda5092aa95cbba7ae9db64fb9ea46f2a"}], "stats": {"total": 74, "additions": 23, "deletions": 51}, "files": [{"sha": "43ebd72f99b30f74fa6f4bc57cc9d65e3af83752", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db48b8315f6251aabc95ae8b7e286b128d84ae66/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db48b8315f6251aabc95ae8b7e286b128d84ae66/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=db48b8315f6251aabc95ae8b7e286b128d84ae66", "patch": "@@ -1,5 +1,16 @@\n 1999-09-29  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\tSupport normal type_info-based EH mechanisms with -fno-rtti.\n+\t* except.c (build_eh_type_type): Remove special -fno-rtti handling.\n+\t(build_eh_type_type_ref): Likewise.\n+\t(build_eh_type): Remove.\n+\t(expand_throw): Call build_eh_type_type, not build_eh_type.\n+\t* decl2.c (import_export_decl): Don't associate the tinfo fn with\n+\tthe vtable if -fno-rtti.\n+\t* decl.c (init_decl_processing): Always init_rtti_processing.\n+\n+\t* rtti.c (get_typeid): Don't complain about -fno-rtti.\n+\n \t* class.c (class_cache_obstack, class_obstack): Remove.\n \t(init_class_processing): Don't initialize class_obstack.\n \t(push_cache_obstack): Remove."}, {"sha": "bdbd1e8c8b1fb3941076b40e91e7a3e74eb7df35", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db48b8315f6251aabc95ae8b7e286b128d84ae66/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db48b8315f6251aabc95ae8b7e286b128d84ae66/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=db48b8315f6251aabc95ae8b7e286b128d84ae66", "patch": "@@ -6330,8 +6330,7 @@ init_decl_processing ()\n   init_class_processing ();\n   init_init_processing ();\n   init_search_processing ();\n-  if (flag_rtti)\n-    init_rtti_processing ();\n+  init_rtti_processing ();\n \n   if (flag_exceptions)\n     init_exception_processing ();"}, {"sha": "6fb90fe64414af0813194f8ce3dc5924744288fa", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db48b8315f6251aabc95ae8b7e286b128d84ae66/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db48b8315f6251aabc95ae8b7e286b128d84ae66/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=db48b8315f6251aabc95ae8b7e286b128d84ae66", "patch": "@@ -2685,6 +2685,10 @@ import_export_decl (decl)\n \n       if (IS_AGGR_TYPE (ctype) && CLASSTYPE_INTERFACE_KNOWN (ctype)\n \t  && TYPE_VIRTUAL_P (ctype)\n+\t  /* If -fno-rtti, we're not necessarily emitting this stuff with\n+\t     the class, so go ahead and emit it now.  This can happen\n+\t     when a class is used in exception handling.  */\n+\t  && flag_rtti\n \t  /* If the type is a cv-qualified variant of a type, then we\n \t     must emit the tinfo function in this translation unit\n \t     since it will not be emitted when the vtable for the type"}, {"sha": "72644e63847d319ac6efab62274ab7ea50e96d52", "filename": "gcc/cp/except.c", "status": "modified", "additions": 7, "deletions": 46, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db48b8315f6251aabc95ae8b7e286b128d84ae66/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db48b8315f6251aabc95ae8b7e286b128d84ae66/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=db48b8315f6251aabc95ae8b7e286b128d84ae66", "patch": "@@ -38,7 +38,6 @@ Boston, MA 02111-1307, USA.  */\n \n static void push_eh_cleanup PROTO((void));\n static tree build_eh_type_type PROTO((tree));\n-static tree build_eh_type PROTO((tree));\n static tree call_eh_info PROTO((void));\n static void push_eh_info PROTO((void));\n static tree get_eh_info PROTO((void));\n@@ -333,9 +332,6 @@ static tree\n build_eh_type_type (type)\n      tree type;\n {\n-  const char *typestring;\n-  tree exp;\n-\n   if (type == error_mark_node)\n     return error_mark_node;\n \n@@ -346,22 +342,16 @@ build_eh_type_type (type)\n   /* Peel off cv qualifiers.  */\n   type = TYPE_MAIN_VARIANT (type);\n \n-  if (flag_rtti)\n-    return build1 (ADDR_EXPR, ptr_type_node, get_typeid_1 (type));\n-\n-  typestring = build_overload_name (type, 1, 1);\n-  exp = combine_strings (build_string (strlen (typestring)+1, typestring));\n-  return build1 (ADDR_EXPR, ptr_type_node, exp);\n+  return build1 (ADDR_EXPR, ptr_type_node, get_typeid_1 (type));\n }\n \n-/* Build the address of a runtime type for use in the runtime matching\n-   field of the new exception model */\n+/* Build the address of a typeinfo function for use in the runtime\n+   matching field of the new exception model */\n \n static tree\n build_eh_type_type_ref (type)\n      tree type;\n {\n-  const char *typestring;\n   tree exp;\n \n   if (type == error_mark_node)\n@@ -374,41 +364,12 @@ build_eh_type_type_ref (type)\n   /* Peel off cv qualifiers.  */\n   type = TYPE_MAIN_VARIANT (type);\n \n-  push_permanent_obstack ();\n+  exp = get_tinfo_fn (type);\n+  exp = build1 (ADDR_EXPR, ptr_type_node, exp);\n \n-  if (flag_rtti)\n-    {\n-      exp = get_tinfo_fn (type);\n-      TREE_USED (exp) = 1;\n-      mark_inline_for_output (exp);\n-      exp = build1 (ADDR_EXPR, ptr_type_node, exp);\n-    }\n-  else\n-    {\n-      typestring = build_overload_name (type, 1, 1);\n-      exp = combine_strings (build_string (strlen (typestring)+1, typestring));\n-      exp = build1 (ADDR_EXPR, ptr_type_node, exp);\n-    }\n-  pop_obstacks ();\n   return (exp);\n }\n \n-\n-/* Build a type value for use at runtime for a exp that is thrown or\n-   matched against by the exception handling system.  */\n-\n-static tree\n-build_eh_type (exp)\n-     tree exp;\n-{\n-  if (flag_rtti)\n-    {\n-      exp = build_typeid (exp);\n-      return build1 (ADDR_EXPR, ptr_type_node, exp);\n-    }\n-  return build_eh_type_type (TREE_TYPE (exp));\n-}\n-\n /* This routine is called to mark all the symbols representing runtime\n    type functions in the exception table as haveing been referenced.\n    This will make sure code is emitted for them. Called from finish_file. */\n@@ -859,7 +820,7 @@ expand_throw (exp)\n \t     (NULL_TREE, integer_type_node, void_list_node))));\n \n       if (TYPE_PTR_P (TREE_TYPE (exp)))\n-\tthrow_type = build_eh_type (exp);\n+\tthrow_type = build_eh_type_type (TREE_TYPE (exp));\n       else\n \t{\n \t  tree object, ptr;\n@@ -907,7 +868,7 @@ expand_throw (exp)\n \t  finish_cleanup_try_block (try_block);\n \t  finish_cleanup (build_terminate_handler (), try_block);\n \n-\t  throw_type = build_eh_type (object);\n+\t  throw_type = build_eh_type_type (TREE_TYPE (object));\n \n \t  if (TYPE_HAS_DESTRUCTOR (TREE_TYPE (object)))\n \t    {"}, {"sha": "f5eb8935ad1e65e3893598bc29f73c5768954c3a", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db48b8315f6251aabc95ae8b7e286b128d84ae66/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db48b8315f6251aabc95ae8b7e286b128d84ae66/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=db48b8315f6251aabc95ae8b7e286b128d84ae66", "patch": "@@ -424,9 +424,6 @@ get_typeid (type)\n       return error_mark_node;\n     }\n   \n-  if (! flag_rtti)\n-    error (\"requesting typeid with -fno-rtti\");\n-\n   if (processing_template_decl)\n     return build_min_nt (TYPEID_EXPR, type);\n "}]}