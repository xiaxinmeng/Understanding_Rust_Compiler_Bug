{"sha": "96b4a0b57e64c29c6232ac80765f93a16ff6293a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZiNGEwYjU3ZTY0YzI5YzYyMzJhYzgwNzY1ZjkzYTE2ZmY2MjkzYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-02-12T19:46:29Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-02-12T19:46:29Z"}, "message": "re PR c++/43054 ([C++0x] ambiguous overload from identical declarations using decltype)\n\n\tPR c++/43054\n\t* tree.c (cp_tree_equal): Correct CALL_EXPR logic, handle\n\tEXPR_PACK_EXPANSION.\n\nFrom-SVN: r156737", "tree": {"sha": "df621a5758c367f798b27ed22c08d0bdde486143", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df621a5758c367f798b27ed22c08d0bdde486143"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96b4a0b57e64c29c6232ac80765f93a16ff6293a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96b4a0b57e64c29c6232ac80765f93a16ff6293a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96b4a0b57e64c29c6232ac80765f93a16ff6293a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96b4a0b57e64c29c6232ac80765f93a16ff6293a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9ab999338b1a5b3fa79f59dbe68e9b13673e7e9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ab999338b1a5b3fa79f59dbe68e9b13673e7e9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ab999338b1a5b3fa79f59dbe68e9b13673e7e9d"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "ba2fd04d34ac0d9839c7bb3906f96e75c2050b1f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b4a0b57e64c29c6232ac80765f93a16ff6293a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b4a0b57e64c29c6232ac80765f93a16ff6293a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=96b4a0b57e64c29c6232ac80765f93a16ff6293a", "patch": "@@ -1,3 +1,9 @@\n+2010-02-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/43054\n+\t* tree.c (cp_tree_equal): Correct CALL_EXPR logic, handle\n+\tEXPR_PACK_EXPANSION.\n+\n 2010-02-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/43033"}, {"sha": "89ac3ddad38d6eb840af3ab6fa86247e9aeaebf7", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b4a0b57e64c29c6232ac80765f93a16ff6293a/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b4a0b57e64c29c6232ac80765f93a16ff6293a/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=96b4a0b57e64c29c6232ac80765f93a16ff6293a", "patch": "@@ -2060,7 +2060,9 @@ cp_tree_equal (tree t1, tree t2)\n \t       arg2 = next_call_expr_arg (&iter2))\n \t  if (!cp_tree_equal (arg1, arg2))\n \t    return false;\n-\treturn (arg1 || arg2);\n+\tif (arg1 || arg2)\n+\t  return false;\n+\treturn true;\n       }\n \n     case TARGET_EXPR:\n@@ -2197,6 +2199,10 @@ cp_tree_equal (tree t1, tree t2)\n       return same_type_p (TRAIT_EXPR_TYPE1 (t1), TRAIT_EXPR_TYPE1 (t2))\n \t&& same_type_p (TRAIT_EXPR_TYPE2 (t1), TRAIT_EXPR_TYPE2 (t2));\n \n+    case EXPR_PACK_EXPANSION:\n+      return cp_tree_equal (PACK_EXPANSION_PATTERN (t1),\n+\t\t\t    PACK_EXPANSION_PATTERN (t2));\n+\n     default:\n       break;\n     }"}, {"sha": "9ec83bf382ee75c6b7fee6f4a91cc72df3ebc602", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b4a0b57e64c29c6232ac80765f93a16ff6293a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b4a0b57e64c29c6232ac80765f93a16ff6293a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=96b4a0b57e64c29c6232ac80765f93a16ff6293a", "patch": "@@ -1,3 +1,8 @@\n+2010-02-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/43054\n+\t* g++.dg/cpp0x/variadic99.C: New.\n+\n 2010-02-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/guality/guality.h (GUALCVT): Zero extend instead of"}, {"sha": "457212712bd4ec0ea3cd658fb0b8c391df53d4d8", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic99.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b4a0b57e64c29c6232ac80765f93a16ff6293a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic99.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b4a0b57e64c29c6232ac80765f93a16ff6293a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic99.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic99.C?ref=96b4a0b57e64c29c6232ac80765f93a16ff6293a", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/43054\n+// { dg-options \"-std=c++0x\" }\n+\n+template<typename R> struct future { };\n+\n+template<typename Fn, typename... Args>\n+ auto\n+ async(Fn&& fn, Args&&... args)\n+ -> future<decltype(fn(args...))>;\n+\n+template<typename Fn, typename... Args>\n+ auto\n+ async(Fn&& fn, Args&&... args)\n+ -> future<decltype(fn(args...))>;\n+\n+int work2(int value);\n+\n+void work(int value)\n+{\n+  async(work2, value);\n+}\n+"}]}