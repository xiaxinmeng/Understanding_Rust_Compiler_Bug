{"sha": "158ab204321cfa5fe5466faa5a12b3c38c45125a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU4YWIyMDQzMjFjZmE1ZmU1NDY2ZmFhNWExMmIzYzM4YzQ1MTI1YQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-09-23T09:19:10Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-09-23T09:19:10Z"}, "message": "re PR fortran/91729 (ICE in gfc_match_select_rank, at fortran/match.c:6586)\n\n2019-09-23  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/91729\n\t* match.c (gfc_match_select_rank): Initialise 'as' to NULL.\n\tCheck for a symtree in the selector expression before trying to\n\tassign a value to 'as'. Revert to gfc_error and go to cleanup\n\tafter setting a MATCH_ERROR.\n\n2019-09-23  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/91729\n\t* gfortran.dg/select_rank_2.f90 : Add two more errors in foo2.\n\t* gfortran.dg/select_rank_3.f90 : New test.\n\nFrom-SVN: r276051", "tree": {"sha": "4f354f0a71b207100c814aa1f714f5f8d8d9927b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f354f0a71b207100c814aa1f714f5f8d8d9927b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/158ab204321cfa5fe5466faa5a12b3c38c45125a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/158ab204321cfa5fe5466faa5a12b3c38c45125a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/158ab204321cfa5fe5466faa5a12b3c38c45125a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/158ab204321cfa5fe5466faa5a12b3c38c45125a/comments", "author": null, "committer": null, "parents": [{"sha": "b7bb3d35804f1d50d7dcfa18aacf1f91d898bb1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7bb3d35804f1d50d7dcfa18aacf1f91d898bb1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7bb3d35804f1d50d7dcfa18aacf1f91d898bb1f"}], "stats": {"total": 73, "additions": 62, "deletions": 11}, "files": [{"sha": "cd1ca756d0fbf7625d529ea9e6bb62e3e782dbc2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/158ab204321cfa5fe5466faa5a12b3c38c45125a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/158ab204321cfa5fe5466faa5a12b3c38c45125a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=158ab204321cfa5fe5466faa5a12b3c38c45125a", "patch": "@@ -1,3 +1,11 @@\n+2019-09-23  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/91729\n+\t* match.c (gfc_match_select_rank): Initialise 'as' to NULL.\n+\tCheck for a symtree in the selector expression before trying to\n+\tassign a value to 'as'. Revert to gfc_error and go to cleanup\n+\tafter setting a MATCH_ERROR.\n+\n 2019-09-20  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/78260"}, {"sha": "9b9dbf1f96f6c6afa20856fd380697bbc96b4eeb", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/158ab204321cfa5fe5466faa5a12b3c38c45125a/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/158ab204321cfa5fe5466faa5a12b3c38c45125a/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=158ab204321cfa5fe5466faa5a12b3c38c45125a", "patch": "@@ -6510,7 +6510,7 @@ gfc_match_select_rank (void)\n   char name[GFC_MAX_SYMBOL_LEN];\n   gfc_symbol *sym, *sym2;\n   gfc_namespace *ns = gfc_current_ns;\n-  gfc_array_spec *as;\n+  gfc_array_spec *as = NULL;\n \n   m = gfc_match_label ();\n   if (m == MATCH_ERROR)\n@@ -6538,13 +6538,21 @@ gfc_match_select_rank (void)\n \t}\n \n       sym = expr1->symtree->n.sym;\n-      sym2 = expr2->symtree->n.sym;\n \n-      as = sym2->ts.type == BT_CLASS ? CLASS_DATA (sym2)->as : sym2->as;\n+      if (expr2->symtree)\n+\t{\n+\t  sym2 = expr2->symtree->n.sym;\n+\t  as = sym2->ts.type == BT_CLASS ? CLASS_DATA (sym2)->as : sym2->as;\n+\t}\n+\n       if (expr2->expr_type != EXPR_VARIABLE\n \t  || !(as && as->type == AS_ASSUMED_RANK))\n-\tgfc_error_now (\"The SELECT RANK selector at %C must be an assumed \"\n-\t\t       \"rank variable\");\n+\t{\n+\t  gfc_error (\"The SELECT RANK selector at %C must be an assumed \"\n+\t\t     \"rank variable\");\n+\t  m = MATCH_ERROR;\n+\t  goto cleanup;\n+\t}\n \n       if (expr2->ts.type == BT_CLASS)\n \t{\n@@ -6583,12 +6591,20 @@ gfc_match_select_rank (void)\n \t  return m;\n \t}\n \n-      sym = expr1->symtree->n.sym;\n-      as = sym->ts.type == BT_CLASS ? CLASS_DATA (sym)->as : sym->as;\n+      if (expr1->symtree)\n+\t{\n+\t  sym = expr1->symtree->n.sym;\n+\t  as = sym->ts.type == BT_CLASS ? CLASS_DATA (sym)->as : sym->as;\n+\t}\n+\n       if (expr1->expr_type != EXPR_VARIABLE\n \t  || !(as && as->type == AS_ASSUMED_RANK))\n-\tgfc_error_now (\"The SELECT RANK selector at %C must be an assumed \"\n-\t\t       \"rank variable\");\n+\t{\n+\t  gfc_error(\"The SELECT RANK selector at %C must be an assumed \"\n+\t\t    \"rank variable\");\n+\t  m = MATCH_ERROR;\n+\t  goto cleanup;\n+\t}\n     }\n \n   m = gfc_match (\" )%t\");"}, {"sha": "cd7ee8d32303d8947b8c25fed185a56643e62787", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/158ab204321cfa5fe5466faa5a12b3c38c45125a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/158ab204321cfa5fe5466faa5a12b3c38c45125a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=158ab204321cfa5fe5466faa5a12b3c38c45125a", "patch": "@@ -1,3 +1,9 @@\n+2019-09-23  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/91729\n+\t* gfortran.dg/select_rank_2.f90 : Add two more errors in foo2.\n+\t* gfortran.dg/select_rank_3.f90 : New test.\n+\n 2019-09-23  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* gnat.dg/system_info1.adb: Sort dg-do target list."}, {"sha": "184027f6b6d936bf5301beade9eb5d6a7ebad7c1", "filename": "gcc/testsuite/gfortran.dg/select_rank_2.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/158ab204321cfa5fe5466faa5a12b3c38c45125a/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_rank_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/158ab204321cfa5fe5466faa5a12b3c38c45125a/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_rank_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_rank_2.f90?ref=158ab204321cfa5fe5466faa5a12b3c38c45125a", "patch": "@@ -8,9 +8,9 @@ subroutine foo1 (arg)\n   integer :: i\n   integer, dimension(3) :: arg\n   select rank (arg)   ! { dg-error \"must be an assumed rank variable\" }\n-    rank (3)\n+    rank (3)          ! { dg-error \"Unexpected RANK statement\" }\n     print *, arg\n-  end select\n+  end select          ! { dg-error \"Expecting END SUBROUTINE\" }\n end\n \n subroutine foo2 (arg)"}, {"sha": "35cd8cd9a0e2a1ae79a940f823c123e1d8edef61", "filename": "gcc/testsuite/gfortran.dg/select_rank_3.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/158ab204321cfa5fe5466faa5a12b3c38c45125a/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_rank_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/158ab204321cfa5fe5466faa5a12b3c38c45125a/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_rank_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_rank_3.f90?ref=158ab204321cfa5fe5466faa5a12b3c38c45125a", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do compile }\n+!\n+! Test the fix for PR91729\n+!\n+! Contributed by Gerhardt Steinmetz  <gscfq@t-online.de>\n+!\n+subroutine s(x)\n+   integer :: x(..)\n+   select rank (-x)       ! { dg-error \"must be an assumed rank\" }\n+     rank (1)             ! { dg-error \"Unexpected RANK statement\" }\n+       print *, x         ! { dg-error \"may only be used as actual argument\" }\n+   end select             ! { dg-error \"Expecting END SUBROUTINE\" }\n+end\n+\n+subroutine t(x)\n+   integer :: x(..)\n+   select rank (z => -x)  ! { dg-error \"must be an assumed rank\" }\n+     rank (1)             ! { dg-error \"Unexpected RANK statement\" }\n+       print *, z\n+   end select             ! { dg-error \"Expecting END SUBROUTINE\" }\n+end"}]}