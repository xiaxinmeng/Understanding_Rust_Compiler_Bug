{"sha": "70f122f2467df0432afee22564b58044aed086c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBmMTIyZjI0NjdkZjA0MzJhZmVlMjI1NjRiNTgwNDRhZWQwODZjMw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2002-01-15T05:25:26Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-01-15T05:25:26Z"}, "message": "* mips-tfile.c: Fix formatting.\n\nFrom-SVN: r48863", "tree": {"sha": "fc78c14d7fc8ad71be89f4addfa1a9cd17abce61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc78c14d7fc8ad71be89f4addfa1a9cd17abce61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70f122f2467df0432afee22564b58044aed086c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70f122f2467df0432afee22564b58044aed086c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70f122f2467df0432afee22564b58044aed086c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70f122f2467df0432afee22564b58044aed086c3/comments", "author": null, "committer": null, "parents": [{"sha": "80a86f21763cb23a5fde151fd95accb2834e97ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80a86f21763cb23a5fde151fd95accb2834e97ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80a86f21763cb23a5fde151fd95accb2834e97ec"}], "stats": {"total": 252, "additions": 128, "deletions": 124}, "files": [{"sha": "60f1673a7dbcd7c9ffd017491589a8405a3a965f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f122f2467df0432afee22564b58044aed086c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f122f2467df0432afee22564b58044aed086c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70f122f2467df0432afee22564b58044aed086c3", "patch": "@@ -1,3 +1,7 @@\n+2002-01-15  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* mips-tfile.c: Fix formatting.\n+\n Tue Jan 15 00:56:11 CET 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* unroll.c (final_reg_note_copy): Fix previous commit."}, {"sha": "e354c9108f0bb127ef94e53393cb0501e8ac0f08", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 124, "deletions": 124, "changes": 248, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f122f2467df0432afee22564b58044aed086c3/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f122f2467df0432afee22564b58044aed086c3/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=70f122f2467df0432afee22564b58044aed086c3", "patch": "@@ -902,7 +902,7 @@ enum alloc_type {\n #define PAGE_SIZE 4096\t\t/* size of varray pages */\n #endif\n \n-#define PAGE_USIZE ((Size_t)PAGE_SIZE)\n+#define PAGE_USIZE ((Size_t) PAGE_SIZE)\n \n \n #ifndef MAX_CLUSTER_PAGES\t/* # pages to get from system */\n@@ -1273,7 +1273,7 @@ static EXTR\t  *last_func_eptr;\n    Maybe this will be fixed in 2.10 or 2.20 of the MIPS compiler\n    suite, but for now go with what works.  */\n \n-static const bt_t map_coff_types[ (int)T_MAX ] = {\n+static const bt_t map_coff_types[ (int) T_MAX ] = {\n   bt_Nil,\t\t\t/* T_NULL */\n   bt_Nil,\t\t\t/* T_ARG */\n   bt_Char,\t\t\t/* T_CHAR */\n@@ -1293,7 +1293,7 @@ static const bt_t map_coff_types[ (int)T_MAX ] = {\n };\n \n /* Convert COFF storage class to ECOFF storage class.  */\n-static const sc_t map_coff_storage[ (int)C_MAX ] = {\n+static const sc_t map_coff_storage[ (int) C_MAX ] = {\n   sc_Nil,\t\t\t/*   0: C_NULL */\n   sc_Abs,\t\t\t/*   1: C_AUTO\t  auto var */\n   sc_Undefined,\t\t\t/*   2: C_EXT\t  external */\n@@ -1404,7 +1404,7 @@ static const sc_t map_coff_storage[ (int)C_MAX ] = {\n };\n \n /* Convert COFF storage class to ECOFF symbol type.  */\n-static const st_t map_coff_sym_type[ (int)C_MAX ] = {\n+static const st_t map_coff_sym_type[ (int) C_MAX ] = {\n   st_Nil,\t\t\t/*   0: C_NULL */\n   st_Local,\t\t\t/*   1: C_AUTO\t  auto var */\n   st_Global,\t\t\t/*   2: C_EXT\t  external */\n@@ -1515,7 +1515,7 @@ static const st_t map_coff_sym_type[ (int)C_MAX ] = {\n };\n \n /* Map COFF derived types to ECOFF type qualifiers.  */\n-static const tq_t map_coff_derived_type[ (int)DT_MAX ] = {\n+static const tq_t map_coff_derived_type[ (int) DT_MAX ] = {\n   tq_Nil,\t\t\t/* 0: DT_NON\tno more qualifiers */\n   tq_Ptr,\t\t\t/* 1: DT_PTR\tpointer */\n   tq_Proc,\t\t\t/* 2: DT_FCN\tfunction */\n@@ -1524,7 +1524,7 @@ static const tq_t map_coff_derived_type[ (int)DT_MAX ] = {\n \n \n /* Keep track of different sized allocation requests.  */\n-static alloc_info_t alloc_counts[ (int)alloc_type_last ];\n+static alloc_info_t alloc_counts[ (int) alloc_type_last ];\n \n \f\n /* Pointers and such to the original symbol table that is read in.  */\n@@ -1546,7 +1546,7 @@ static EXTR\t*orig_ext_syms;\t\t\t/* external symbols */\n /* Macros to convert an index into a given object within the original\n    symbol table.  */\n #define CHECK(num,max,str) \\\n-  (((unsigned long)num > (unsigned long)max) ? out_of_bounds (num, max, str, __LINE__) : 0)\n+  (((unsigned long) num > (unsigned long) max) ? out_of_bounds (num, max, str, __LINE__) : 0)\n \n #define ORIG_LINENUM(indx)\t(CHECK ((indx), orig_sym_hdr.cbLine,    \"line#\"), (indx) + orig_linenum)\n #define ORIG_DENSE(indx)\t(CHECK ((indx), orig_sym_hdr.idnMax,    \"dense\"), (indx) + orig_dense)\n@@ -1750,8 +1750,8 @@ add_varray_page (vp)\n #endif\n     new_links->datum = allocate_page ();\n \n-  alloc_counts[ (int)alloc_type_varray ].total_alloc++;\n-  alloc_counts[ (int)alloc_type_varray ].total_pages++;\n+  alloc_counts[ (int) alloc_type_varray ].total_alloc++;\n+  alloc_counts[ (int) alloc_type_varray ].total_pages++;\n \n   new_links->start_index = vp->num_allocated;\n   vp->objects_last_page = 0;\n@@ -1898,7 +1898,7 @@ add_local_symbol (str_start, str_end_p1, type, storage, value, indx)\n \n   ret = vp->num_allocated++;\n \n-  if (MIPS_IS_STAB(psym))\n+  if (MIPS_IS_STAB (psym))\n     return ret;\n \n   /* Save the symbol within the hash table if this is a static\n@@ -1942,7 +1942,7 @@ add_local_symbol (str_start, str_end_p1, type, storage, value, indx)\n \n     case st_End:\n       pscope = cur_file_ptr->cur_scope;\n-      if (pscope == (scope_t *)0)\n+      if (pscope == (scope_t *) 0)\n \terror (\"internal error, too many st_End's\");\n \n       else\n@@ -2050,7 +2050,7 @@ add_ext_symbol (esym, ifd)\n   shash_t *hash_ptr = (shash_t *) 0;\n \n   str_start = ORIG_ESTRS (esym->asym.iss);\n-  str_end_p1 = str_start + strlen(str_start);\n+  str_end_p1 = str_start + strlen (str_start);\n \n   if (debug > 1)\n     {\n@@ -2232,7 +2232,7 @@ add_aux_sym_tir (t, state, hash_tbl)\n      for an enum bitfield.  */\n \n   if (t->bitfield)\n-    (void) add_aux_sym_symint ((symint_t)t->sizes[t->num_sizes-1]);\n+    (void) add_aux_sym_symint ((symint_t) t->sizes[t->num_sizes-1]);\n \n \n   /* Add tag information if needed.  Structure, union, and enum\n@@ -2444,14 +2444,14 @@ add_procedure (func_start, func_end_p1)\n \n       if (old_proc_ptr != (PDR *) 0\n \t  && sym_ptr != (SYMR *) 0\n-\t  && ((st_t)sym_ptr->st == st_Proc || (st_t)sym_ptr->st == st_StaticProc))\n+\t  && ((st_t) sym_ptr->st == st_Proc || (st_t) sym_ptr->st == st_StaticProc))\n \t{\n \t  cur_oproc_begin = sym_ptr;\n \t  cur_oproc_end = shash_ptr->end_ptr;\n \t  value = sym_ptr->value;\n \n \t  cur_oproc_ptr = old_proc_ptr;\n-\t  proc_type = (st_t)sym_ptr->st;\n+\t  proc_type = (st_t) sym_ptr->st;\n \t  *new_proc_ptr = *old_proc_ptr;\t/* initialize */\n \t}\n     }\n@@ -2595,10 +2595,10 @@ add_bytes (vp, input_ptr, nitems)\n /* Convert storage class to string.  */\n \n STATIC const char *\n-sc_to_string(storage_class)\n+sc_to_string (storage_class)\n      sc_t storage_class;\n {\n-  switch(storage_class)\n+  switch (storage_class)\n     {\n     case sc_Nil:\t return \"Nil,\";\n     case sc_Text:\t return \"Text,\";\n@@ -2633,10 +2633,10 @@ sc_to_string(storage_class)\n /* Convert symbol type to string.  */\n \n STATIC const char *\n-st_to_string(symbol_type)\n+st_to_string (symbol_type)\n      st_t symbol_type;\n {\n-  switch(symbol_type)\n+  switch (symbol_type)\n     {\n     case st_Nil:\treturn \"Nil,\";\n     case st_Global:\treturn \"Global,\";\n@@ -2840,7 +2840,7 @@ parse_bend (start)\n \n   (void) add_local_symbol ((const char *) 0, (const char *) 0,\n \t\t\t   st_End, sc_Text,\n-\t\t\t   (symint_t)hash_ptr->sym_ptr->value - cur_oproc_begin->value,\n+\t\t\t   (symint_t) hash_ptr->sym_ptr->value - cur_oproc_begin->value,\n \t\t\t   (symint_t) 0);\n }\n \n@@ -3123,13 +3123,13 @@ parse_def (name_start)\n \t      tq_t *tq_ptr = &t.type_qualifiers[0];\n \n \t      t.orig_type = (coff_type_t) (arg_number & N_BTMASK);\n-\t      t.basic_type = map_coff_types [(int)t.orig_type];\n+\t      t.basic_type = map_coff_types [(int) t.orig_type];\n \t      for (i = N_TQ-1; i >= 0; i--)\n \t\t{\n \t\t  int dt = (arg_number >> ((i * N_TQ_SHIFT) + N_BT_SHIFT)\n \t\t\t    & N_TMASK);\n \n-\t\t  if (dt != (int)DT_NON)\n+\t\t  if (dt != (int) DT_NON)\n \t\t    *tq_ptr++ = map_coff_derived_type [dt];\n \t\t}\n \n@@ -3295,7 +3295,7 @@ parse_def (name_start)\n \t      return;\n \t    }\n \n-\t  t.tag_ptr = get_tag (tag_start, tag_end_p1,  (symint_t)indexNil,\n+\t  t.tag_ptr = get_tag (tag_start, tag_end_p1,  (symint_t) indexNil,\n \t\t\t       t.basic_type);\n \t}\n \n@@ -3376,7 +3376,7 @@ parse_def (name_start)\n      for which the external symbol table is fine enough.  */\n \n   if (eptr == (EXTR *) 0\n-      || eptr->asym.st == (int)st_Nil\n+      || eptr->asym.st == (int) st_Nil\n       || cur_proc_ptr != (PDR *) 0)\n     {\n       symint_t isym = add_local_symbol (name_start, name_end_p1,\n@@ -3476,7 +3476,7 @@ parse_end (start)\n \n   orig_fdr = cur_file_ptr->orig_fdr;\n   value = 0;\n-  if (orig_fdr != (FDR *)0 && cur_oproc_end != (SYMR *) 0)\n+  if (orig_fdr != (FDR *) 0 && cur_oproc_end != (SYMR *) 0)\n     value = cur_oproc_end->value;\n \n   else\n@@ -3570,7 +3570,7 @@ mark_stabs (start)\n       stabs_seen = 1;\n       (void) add_local_symbol (stabs_symbol,\n \t\t\t       stabs_symbol + sizeof (stabs_symbol),\n-\t\t\t       stNil, scInfo, -1, MIPS_MARK_STAB(0));\n+\t\t\t       stNil, scInfo, -1, MIPS_MARK_STAB (0));\n \n     }\n }\n@@ -3637,7 +3637,7 @@ parse_stabs_common (string_start, string_end, rest)\n      address.  The symbol type is st_Label, which should be different from\n      the other stabs, so that gdb can recognize it.  */\n \n-  if (code == (int)N_SLINE)\n+  if (code == (int) N_SLINE)\n     {\n       SYMR *sym_ptr, dummy_symr;\n       shash_t *shash_ptr;\n@@ -3735,7 +3735,7 @@ parse_stabs_common (string_start, string_end, rest)\n \t  if ((end_p1 = strchr (start, '+')) == (char *) 0)\n \t    {\n \t      if ((end_p1 = strchr (start, '-')) == (char *) 0)\n-\t\tend_p1 = start + strlen(start) - 1;\n+\t\tend_p1 = start + strlen (start) - 1;\n \t    }\n \n \t  shash_ptr = hash_string (start,\n@@ -3795,7 +3795,7 @@ parse_stabs_common (string_start, string_end, rest)\n \t\t}\n \t    }\n \t}\n-      code = MIPS_MARK_STAB(code);\n+      code = MIPS_MARK_STAB (code);\n     }\n \n   (void) add_local_symbol (string_start, string_end, st, sc, value, code);\n@@ -3939,7 +3939,7 @@ update_headers ()\n       sym_end_p1 = sym_start + fd_ptr->csym;\n       for (sym = sym_start; sym < sym_end_p1; sym++)\n \t{\n-\t  if ((st_t)sym->st == st_Static)\n+\t  if ((st_t) sym->st == st_Static)\n \t    {\n \t      char *str = ORIG_LSTRS (fd_ptr->issBase + sym->iss);\n \t      Size_t len = strlen (str);\n@@ -3949,15 +3949,15 @@ update_headers ()\n \t      if (str[0] == '$' && str[1] == 'L')\n \t\tcontinue;\n \t      hash_ptr = hash_string (str,\n-\t\t\t\t      (Ptrdiff_t)len,\n+\t\t\t\t      (Ptrdiff_t) len,\n \t\t\t\t      &file_ptr->shash_head[0],\n \t\t\t  \t      (symint_t *) 0);\n \t      if (hash_ptr == (shash_t *) 0)\n \t\t{\n \t\t  (void) add_local_symbol (str, str + len,\n-\t\t\t\t\t   (st_t)sym->st, (sc_t)sym->sc,\n-\t\t\t\t\t   (symint_t)sym->value,\n-\t\t\t\t\t   (symint_t)indexNil);\n+\t\t\t\t\t   (st_t) sym->st, (sc_t) sym->sc,\n+\t\t\t\t\t   (symint_t) sym->value,\n+\t\t\t\t\t   (symint_t) indexNil);\n \t\t}\n \t    }\n \t}\n@@ -4101,7 +4101,7 @@ write_varray (vp, offset, str)\n     }\n   \n   if (file_offset != offset\n-      && fseek (object_stream, (long)offset, SEEK_SET) < 0)\n+      && fseek (object_stream, (long) offset, SEEK_SET) < 0)\n     pfatal_with_name (object_name);\n \n   for (ptr = vp->first; ptr != (vlinks_t *) 0; ptr = ptr->next)\n@@ -4229,7 +4229,7 @@ write_object ()\n     }\n \n   if (symbolic_header.idnMax > 0)\t\t/* dense numbers */\n-    write_varray (&dense_num, (off_t)symbolic_header.cbDnOffset, \"Dense numbers\");\n+    write_varray (&dense_num, (off_t) symbolic_header.cbDnOffset, \"Dense numbers\");\n \n   if (symbolic_header.ipdMax > 0)\t\t/* procedure tables */\n     {\n@@ -4286,7 +4286,7 @@ write_object ()\n     {\n       offset = symbolic_header.cbFdOffset;\n       if (file_offset != offset\n-\t  && fseek (object_stream, (long)offset, SEEK_SET) < 0)\n+\t  && fseek (object_stream, (long) offset, SEEK_SET) < 0)\n \tpfatal_with_name (object_name);\n \n       file_offset = offset;\n@@ -4347,7 +4347,7 @@ write_object ()\n       if (sys_write <= 0)\n \tpfatal_with_name (object_name);\n \n-      else if (sys_write != (long)num_write)\n+      else if (sys_write != (long) num_write)\n \tfatal (\"wrote %lu bytes to %s, system returned %ld\",\n \t       num_write,\n \t       object_name,\n@@ -4357,7 +4357,7 @@ write_object ()\n     }\n \n   if (symbolic_header.issExtMax > 0)\t\t/* external symbols */\n-    write_varray (&ext_symbols, (off_t)symbolic_header.cbExtOffset, \"External symbols\");\n+    write_varray (&ext_symbols, (off_t) symbolic_header.cbExtOffset, \"External symbols\");\n \n   if (fclose (object_stream) != 0)\n     pfatal_with_name (object_name);\n@@ -4403,7 +4403,7 @@ read_seek (size, offset, str)\n \t  if (sys_read <= 0)\n \t    pfatal_with_name (obj_in_name);\n \n-\t  if ((symint_t)sys_read != difference)\n+\t  if ((symint_t) sys_read != difference)\n \t    fatal (\"wanted to read %lu bytes from %s, system returned %ld\",\n \t\t   (unsigned long) size,\n \t\t   obj_in_name,\n@@ -4508,61 +4508,61 @@ copy_object ()\n   file_offset =  orig_file_header.f_symptr + sizeof (struct filehdr);\n \n   if (orig_sym_hdr.cbLine > 0)\t\t\t/* line numbers */\n-    orig_linenum = (char *) read_seek ((Size_t)orig_sym_hdr.cbLine,\n+    orig_linenum = (char *) read_seek ((Size_t) orig_sym_hdr.cbLine,\n \t\t\t\t       orig_sym_hdr.cbLineOffset,\n \t\t\t\t       \"Line numbers\");\n \n   if (orig_sym_hdr.ipdMax > 0)\t\t\t/* procedure tables */\n-    orig_procs = (PDR *) read_seek ((Size_t)orig_sym_hdr.ipdMax * sizeof (PDR),\n+    orig_procs = (PDR *) read_seek ((Size_t) orig_sym_hdr.ipdMax * sizeof (PDR),\n \t\t\t\t    orig_sym_hdr.cbPdOffset,\n \t\t\t\t    \"Procedure tables\");\n \n   if (orig_sym_hdr.isymMax > 0)\t\t\t/* local symbols */\n-    orig_local_syms = (SYMR *) read_seek ((Size_t)orig_sym_hdr.isymMax * sizeof (SYMR),\n+    orig_local_syms = (SYMR *) read_seek ((Size_t) orig_sym_hdr.isymMax * sizeof (SYMR),\n \t\t\t\t\t  orig_sym_hdr.cbSymOffset,\n \t\t\t\t\t  \"Local symbols\");\n \n   if (orig_sym_hdr.iauxMax > 0)\t\t\t/* aux symbols */\n-    orig_aux_syms = (AUXU *) read_seek ((Size_t)orig_sym_hdr.iauxMax * sizeof (AUXU),\n+    orig_aux_syms = (AUXU *) read_seek ((Size_t) orig_sym_hdr.iauxMax * sizeof (AUXU),\n \t\t\t\t\torig_sym_hdr.cbAuxOffset,\n \t\t\t\t\t\"Aux. symbols\");\n \n   if (orig_sym_hdr.issMax > 0)\t\t\t/* local strings */\n-    orig_local_strs = (char *) read_seek ((Size_t)orig_sym_hdr.issMax,\n+    orig_local_strs = (char *) read_seek ((Size_t) orig_sym_hdr.issMax,\n \t\t\t\t\t  orig_sym_hdr.cbSsOffset,\n \t\t\t\t\t  \"Local strings\");\n \n   if (orig_sym_hdr.issExtMax > 0)\t\t/* external strings */\n-    orig_ext_strs = (char *) read_seek ((Size_t)orig_sym_hdr.issExtMax,\n+    orig_ext_strs = (char *) read_seek ((Size_t) orig_sym_hdr.issExtMax,\n \t\t\t\t\torig_sym_hdr.cbSsExtOffset,\n \t\t\t\t\t\"External strings\");\n \n   if (orig_sym_hdr.ifdMax > 0)\t\t\t/* file tables */\n-    orig_files = (FDR *) read_seek ((Size_t)orig_sym_hdr.ifdMax * sizeof (FDR),\n+    orig_files = (FDR *) read_seek ((Size_t) orig_sym_hdr.ifdMax * sizeof (FDR),\n \t\t\t\t    orig_sym_hdr.cbFdOffset,\n \t\t\t\t    \"File tables\");\n \n   if (orig_sym_hdr.crfd > 0)\t\t\t/* relative file descriptors */\n-    orig_rfds = (symint_t *) read_seek ((Size_t)orig_sym_hdr.crfd * sizeof (symint_t),\n+    orig_rfds = (symint_t *) read_seek ((Size_t) orig_sym_hdr.crfd * sizeof (symint_t),\n \t\t\t\t\torig_sym_hdr.cbRfdOffset,\n \t\t\t\t\t\"Relative file descriptors\");\n \n   if (orig_sym_hdr.issExtMax > 0)\t\t/* external symbols */\n-    orig_ext_syms = (EXTR *) read_seek ((Size_t)orig_sym_hdr.iextMax * sizeof (EXTR),\n+    orig_ext_syms = (EXTR *) read_seek ((Size_t) orig_sym_hdr.iextMax * sizeof (EXTR),\n \t\t\t\t\torig_sym_hdr.cbExtOffset,\n \t\t\t\t\t\"External symbols\");\n \n   if (orig_sym_hdr.idnMax > 0)\t\t\t/* dense numbers */\n     {\n-      orig_dense = (DNR *) read_seek ((Size_t)orig_sym_hdr.idnMax * sizeof (DNR),\n+      orig_dense = (DNR *) read_seek ((Size_t) orig_sym_hdr.idnMax * sizeof (DNR),\n \t\t\t\t      orig_sym_hdr.cbDnOffset,\n \t\t\t\t      \"Dense numbers\");\n \n-      add_bytes (&dense_num, (char *) orig_dense, (Size_t)orig_sym_hdr.idnMax);\n+      add_bytes (&dense_num, (char *) orig_dense, (Size_t) orig_sym_hdr.idnMax);\n     }\n \n   if (orig_sym_hdr.ioptMax > 0)\t\t\t/* opt symbols */\n-    orig_opt_syms = (OPTR *) read_seek ((Size_t)orig_sym_hdr.ioptMax * sizeof (OPTR),\n+    orig_opt_syms = (OPTR *) read_seek ((Size_t) orig_sym_hdr.ioptMax * sizeof (OPTR),\n \t\t\t\t\torig_sym_hdr.cbOptOffset,\n \t\t\t\t\t\"Optimizer symbols\");\n \n@@ -4686,7 +4686,7 @@ copy_object ()\n \t\tchar *str = ORIG_LSTRS (fd_ptr->issBase + sym->iss);\n \t\tSize_t len = strlen (str);\n \t\tshash_t *shash_ptr = hash_string (str,\n-\t\t\t\t\t\t  (Ptrdiff_t)len,\n+\t\t\t\t\t\t  (Ptrdiff_t) len,\n \t\t\t\t\t\t  &orig_str_hash[0],\n \t\t\t\t\t\t  &hash_index);\n \n@@ -4716,7 +4716,7 @@ copy_object ()\n \t\t    {\n \t\t      Size_t len = strlen (str);\n \t\t      shash_t *shash_ptr = hash_string (str,\n-\t\t\t\t\t\t\t(Ptrdiff_t)len,\n+\t\t\t\t\t\t\t(Ptrdiff_t) len,\n \t\t\t\t\t\t\t&orig_str_hash[0],\n \t\t\t\t\t\t\t(symint_t *) 0);\n \n@@ -4746,7 +4746,7 @@ copy_object ()\n \t  char *str = ORIG_LSTRS (fd_ptr->issBase + proc_sym->iss);\n \t  Size_t len = strlen (str);\n \t  shash_t *shash_ptr = hash_string (str,\n-\t\t\t\t\t    (Ptrdiff_t)len,\n+\t\t\t\t\t    (Ptrdiff_t) len,\n \t\t\t\t\t    &orig_str_hash[0],\n \t\t\t\t\t    (symint_t *) 0);\n \n@@ -4863,7 +4863,7 @@ main (argc, argv)\n \n       case 'd':\n \tdebug = strtol (optarg, &num_end, 0);\n-\tif ((unsigned)debug > 4 || num_end == optarg)\n+\tif ((unsigned) debug > 4 || num_end == optarg)\n \t  had_errors++;\n \n \tbreak;\n@@ -4907,7 +4907,7 @@ main (argc, argv)\n   /* If there is an output name, but no input name use\n      the same file for both, deleting the name between\n      opening it for input and opening it for output.  */\n-  if (obj_in_name == (char *) 0 && object_name != (char *)0)\n+  if (obj_in_name == (char *) 0 && object_name != (char *) 0)\n     {\n       obj_in_name = object_name;\n       delete_input = 1;\n@@ -4968,7 +4968,7 @@ main (argc, argv)\n \t    fatal (\"wrote %d bytes to %s, expected to write %d\", len2, obj_in_name, len);\n \t}\n \n-      free_multiple_pages ((page_t *)buffer, 4);\n+      free_multiple_pages ((page_t *) buffer, 4);\n \n       if (len < 0)\n \tpfatal_with_name (object_name);\n@@ -5009,7 +5009,7 @@ main (argc, argv)\n   if (debug)\n     {\n       fprintf (stderr, \"\\n\\tAllocation summary:\\n\\n\");\n-      for (i = (int)alloc_type_none; i < (int)alloc_type_last; i++)\n+      for (i = (int) alloc_type_none; i < (int) alloc_type_last; i++)\n \tif (alloc_counts[i].total_alloc)\n \t  {\n \t    fprintf (stderr,\n@@ -5032,7 +5032,7 @@ catch_signal (signum)\n      int signum;\n {\n   (void) signal (signum, SIG_DFL);\t/* just in case...  */\n-  fatal (\"%s\", strsignal(signum));\n+  fatal (\"%s\", strsignal (signum));\n }\n \n /* Print a fatal error message.  NAME is the text.\n@@ -5113,10 +5113,10 @@ allocate_cluster (npages)\n       if (sbrk (PAGE_USIZE - offset) == (char *)-1)\n \tpfatal_with_name (\"allocate_cluster\");\n \n-      ptr = (page_t *) (((char *)ptr) + PAGE_SIZE - offset);\n+      ptr = (page_t *) (((char *) ptr) + PAGE_SIZE - offset);\n     }\n \n-  if (sbrk (npages * PAGE_USIZE) == (char *)-1)\n+  if (sbrk (npages * PAGE_USIZE) == (char *) -1)\n     pfatal_with_name (\"allocate_cluster\");\n \n   if (debug > 3)\n@@ -5231,32 +5231,32 @@ allocate_scope ()\n   static scope_t initial_scope;\n \n #ifndef MALLOC_CHECK\n-  ptr = alloc_counts[ (int)alloc_type_scope ].free_list.f_scope;\n+  ptr = alloc_counts[ (int) alloc_type_scope ].free_list.f_scope;\n   if (ptr != (scope_t *) 0)\n-    alloc_counts[ (int)alloc_type_scope ].free_list.f_scope = ptr->free;\n+    alloc_counts[ (int) alloc_type_scope ].free_list.f_scope = ptr->free;\n \n   else\n     {\n-      int unallocated\t= alloc_counts[ (int)alloc_type_scope ].unallocated;\n-      page_t *cur_page\t= alloc_counts[ (int)alloc_type_scope ].cur_page;\n+      int unallocated\t= alloc_counts[ (int) alloc_type_scope ].unallocated;\n+      page_t *cur_page\t= alloc_counts[ (int) alloc_type_scope ].cur_page;\n \n       if (unallocated == 0)\n \t{\n \t  unallocated = PAGE_SIZE / sizeof (scope_t);\n-\t  alloc_counts[ (int)alloc_type_scope ].cur_page = cur_page = allocate_page ();\n-\t  alloc_counts[ (int)alloc_type_scope ].total_pages++;\n+\t  alloc_counts[ (int) alloc_type_scope ].cur_page = cur_page = allocate_page ();\n+\t  alloc_counts[ (int) alloc_type_scope ].total_pages++;\n \t}\n \n       ptr = &cur_page->scope[ --unallocated ];\n-      alloc_counts[ (int)alloc_type_scope ].unallocated = unallocated;\n+      alloc_counts[ (int) alloc_type_scope ].unallocated = unallocated;\n     }\n \n #else\n   ptr = (scope_t *) xmalloc (sizeof (scope_t));\n \n #endif\n \n-  alloc_counts[ (int)alloc_type_scope ].total_alloc++;\n+  alloc_counts[ (int) alloc_type_scope ].total_alloc++;\n   *ptr = initial_scope;\n   return ptr;\n }\n@@ -5267,11 +5267,11 @@ STATIC void\n free_scope (ptr)\n      scope_t *ptr;\n {\n-  alloc_counts[ (int)alloc_type_scope ].total_free++;\n+  alloc_counts[ (int) alloc_type_scope ].total_free++;\n \n #ifndef MALLOC_CHECK\n-  ptr->free = alloc_counts[ (int)alloc_type_scope ].free_list.f_scope;\n-  alloc_counts[ (int)alloc_type_scope ].free_list.f_scope = ptr;\n+  ptr->free = alloc_counts[ (int) alloc_type_scope ].free_list.f_scope;\n+  alloc_counts[ (int) alloc_type_scope ].free_list.f_scope = ptr;\n \n #else\n   free ((PTR) ptr);\n@@ -5289,25 +5289,25 @@ allocate_vlinks ()\n   static vlinks_t initial_vlinks;\n \n #ifndef MALLOC_CHECK\n-  int unallocated\t= alloc_counts[ (int)alloc_type_vlinks ].unallocated;\n-  page_t *cur_page\t= alloc_counts[ (int)alloc_type_vlinks ].cur_page;\n+  int unallocated\t= alloc_counts[ (int) alloc_type_vlinks ].unallocated;\n+  page_t *cur_page\t= alloc_counts[ (int) alloc_type_vlinks ].cur_page;\n \n   if (unallocated == 0)\n     {\n       unallocated = PAGE_SIZE / sizeof (vlinks_t);\n-      alloc_counts[ (int)alloc_type_vlinks ].cur_page = cur_page = allocate_page ();\n-      alloc_counts[ (int)alloc_type_vlinks ].total_pages++;\n+      alloc_counts[ (int) alloc_type_vlinks ].cur_page = cur_page = allocate_page ();\n+      alloc_counts[ (int) alloc_type_vlinks ].total_pages++;\n     }\n \n   ptr = &cur_page->vlinks[ --unallocated ];\n-  alloc_counts[ (int)alloc_type_vlinks ].unallocated = unallocated;\n+  alloc_counts[ (int) alloc_type_vlinks ].unallocated = unallocated;\n \n #else\n   ptr = (vlinks_t *) xmalloc (sizeof (vlinks_t));\n \n #endif\n \n-  alloc_counts[ (int)alloc_type_vlinks ].total_alloc++;\n+  alloc_counts[ (int) alloc_type_vlinks ].total_alloc++;\n   *ptr = initial_vlinks;\n   return ptr;\n }\n@@ -5322,25 +5322,25 @@ allocate_shash ()\n   static shash_t initial_shash;\n \n #ifndef MALLOC_CHECK\n-  int unallocated\t= alloc_counts[ (int)alloc_type_shash ].unallocated;\n-  page_t *cur_page\t= alloc_counts[ (int)alloc_type_shash ].cur_page;\n+  int unallocated\t= alloc_counts[ (int) alloc_type_shash ].unallocated;\n+  page_t *cur_page\t= alloc_counts[ (int) alloc_type_shash ].cur_page;\n \n   if (unallocated == 0)\n     {\n       unallocated = PAGE_SIZE / sizeof (shash_t);\n-      alloc_counts[ (int)alloc_type_shash ].cur_page = cur_page = allocate_page ();\n-      alloc_counts[ (int)alloc_type_shash ].total_pages++;\n+      alloc_counts[ (int) alloc_type_shash ].cur_page = cur_page = allocate_page ();\n+      alloc_counts[ (int) alloc_type_shash ].total_pages++;\n     }\n \n   ptr = &cur_page->shash[ --unallocated ];\n-  alloc_counts[ (int)alloc_type_shash ].unallocated = unallocated;\n+  alloc_counts[ (int) alloc_type_shash ].unallocated = unallocated;\n \n #else\n   ptr = (shash_t *) xmalloc (sizeof (shash_t));\n \n #endif\n \n-  alloc_counts[ (int)alloc_type_shash ].total_alloc++;\n+  alloc_counts[ (int) alloc_type_shash ].total_alloc++;\n   *ptr = initial_shash;\n   return ptr;\n }\n@@ -5355,25 +5355,25 @@ allocate_thash ()\n   static thash_t initial_thash;\n \n #ifndef MALLOC_CHECK\n-  int unallocated\t= alloc_counts[ (int)alloc_type_thash ].unallocated;\n-  page_t *cur_page\t= alloc_counts[ (int)alloc_type_thash ].cur_page;\n+  int unallocated\t= alloc_counts[ (int) alloc_type_thash ].unallocated;\n+  page_t *cur_page\t= alloc_counts[ (int) alloc_type_thash ].cur_page;\n \n   if (unallocated == 0)\n     {\n       unallocated = PAGE_SIZE / sizeof (thash_t);\n-      alloc_counts[ (int)alloc_type_thash ].cur_page = cur_page = allocate_page ();\n-      alloc_counts[ (int)alloc_type_thash ].total_pages++;\n+      alloc_counts[ (int) alloc_type_thash ].cur_page = cur_page = allocate_page ();\n+      alloc_counts[ (int) alloc_type_thash ].total_pages++;\n     }\n \n   ptr = &cur_page->thash[ --unallocated ];\n-  alloc_counts[ (int)alloc_type_thash ].unallocated = unallocated;\n+  alloc_counts[ (int) alloc_type_thash ].unallocated = unallocated;\n \n #else\n   ptr = (thash_t *) xmalloc (sizeof (thash_t));\n \n #endif\n \n-  alloc_counts[ (int)alloc_type_thash ].total_alloc++;\n+  alloc_counts[ (int) alloc_type_thash ].total_alloc++;\n   *ptr = initial_thash;\n   return ptr;\n }\n@@ -5388,32 +5388,32 @@ allocate_tag ()\n   static tag_t initial_tag;\n \n #ifndef MALLOC_CHECK\n-  ptr = alloc_counts[ (int)alloc_type_tag ].free_list.f_tag;\n+  ptr = alloc_counts[ (int) alloc_type_tag ].free_list.f_tag;\n   if (ptr != (tag_t *) 0)\n-    alloc_counts[ (int)alloc_type_tag ].free_list.f_tag = ptr->free;\n+    alloc_counts[ (int) alloc_type_tag ].free_list.f_tag = ptr->free;\n \n   else\n     {\n-      int unallocated\t= alloc_counts[ (int)alloc_type_tag ].unallocated;\n-      page_t *cur_page\t= alloc_counts[ (int)alloc_type_tag ].cur_page;\n+      int unallocated\t= alloc_counts[ (int) alloc_type_tag ].unallocated;\n+      page_t *cur_page\t= alloc_counts[ (int) alloc_type_tag ].cur_page;\n \n       if (unallocated == 0)\n \t{\n \t  unallocated = PAGE_SIZE / sizeof (tag_t);\n-\t  alloc_counts[ (int)alloc_type_tag ].cur_page = cur_page = allocate_page ();\n-\t  alloc_counts[ (int)alloc_type_tag ].total_pages++;\n+\t  alloc_counts[ (int) alloc_type_tag ].cur_page = cur_page = allocate_page ();\n+\t  alloc_counts[ (int) alloc_type_tag ].total_pages++;\n \t}\n \n       ptr = &cur_page->tag[ --unallocated ];\n-      alloc_counts[ (int)alloc_type_tag ].unallocated = unallocated;\n+      alloc_counts[ (int) alloc_type_tag ].unallocated = unallocated;\n     }\n \n #else\n   ptr = (tag_t *) xmalloc (sizeof (tag_t));\n \n #endif\n \n-  alloc_counts[ (int)alloc_type_tag ].total_alloc++;\n+  alloc_counts[ (int) alloc_type_tag ].total_alloc++;\n   *ptr = initial_tag;\n   return ptr;\n }\n@@ -5424,11 +5424,11 @@ STATIC void\n free_tag (ptr)\n      tag_t *ptr;\n {\n-  alloc_counts[ (int)alloc_type_tag ].total_free++;\n+  alloc_counts[ (int) alloc_type_tag ].total_free++;\n \n #ifndef MALLOC_CHECK\n-  ptr->free = alloc_counts[ (int)alloc_type_tag ].free_list.f_tag;\n-  alloc_counts[ (int)alloc_type_tag ].free_list.f_tag = ptr;\n+  ptr->free = alloc_counts[ (int) alloc_type_tag ].free_list.f_tag;\n+  alloc_counts[ (int) alloc_type_tag ].free_list.f_tag = ptr;\n \n #else\n   free ((PTR) ptr);\n@@ -5446,32 +5446,32 @@ allocate_forward ()\n   static forward_t initial_forward;\n \n #ifndef MALLOC_CHECK\n-  ptr = alloc_counts[ (int)alloc_type_forward ].free_list.f_forward;\n+  ptr = alloc_counts[ (int) alloc_type_forward ].free_list.f_forward;\n   if (ptr != (forward_t *) 0)\n-    alloc_counts[ (int)alloc_type_forward ].free_list.f_forward = ptr->free;\n+    alloc_counts[ (int) alloc_type_forward ].free_list.f_forward = ptr->free;\n \n   else\n     {\n-      int unallocated\t= alloc_counts[ (int)alloc_type_forward ].unallocated;\n-      page_t *cur_page\t= alloc_counts[ (int)alloc_type_forward ].cur_page;\n+      int unallocated\t= alloc_counts[ (int) alloc_type_forward ].unallocated;\n+      page_t *cur_page\t= alloc_counts[ (int) alloc_type_forward ].cur_page;\n \n       if (unallocated == 0)\n \t{\n \t  unallocated = PAGE_SIZE / sizeof (forward_t);\n-\t  alloc_counts[ (int)alloc_type_forward ].cur_page = cur_page = allocate_page ();\n-\t  alloc_counts[ (int)alloc_type_forward ].total_pages++;\n+\t  alloc_counts[ (int) alloc_type_forward ].cur_page = cur_page = allocate_page ();\n+\t  alloc_counts[ (int) alloc_type_forward ].total_pages++;\n \t}\n \n       ptr = &cur_page->forward[ --unallocated ];\n-      alloc_counts[ (int)alloc_type_forward ].unallocated = unallocated;\n+      alloc_counts[ (int) alloc_type_forward ].unallocated = unallocated;\n     }\n \n #else\n   ptr = (forward_t *) xmalloc (sizeof (forward_t));\n \n #endif\n \n-  alloc_counts[ (int)alloc_type_forward ].total_alloc++;\n+  alloc_counts[ (int) alloc_type_forward ].total_alloc++;\n   *ptr = initial_forward;\n   return ptr;\n }\n@@ -5482,11 +5482,11 @@ STATIC void\n free_forward (ptr)\n      forward_t *ptr;\n {\n-  alloc_counts[ (int)alloc_type_forward ].total_free++;\n+  alloc_counts[ (int) alloc_type_forward ].total_free++;\n \n #ifndef MALLOC_CHECK\n-  ptr->free = alloc_counts[ (int)alloc_type_forward ].free_list.f_forward;\n-  alloc_counts[ (int)alloc_type_forward ].free_list.f_forward = ptr;\n+  ptr->free = alloc_counts[ (int) alloc_type_forward ].free_list.f_forward;\n+  alloc_counts[ (int) alloc_type_forward ].free_list.f_forward = ptr;\n \n #else\n   free ((PTR) ptr);\n@@ -5504,32 +5504,32 @@ allocate_thead ()\n   static thead_t initial_thead;\n \n #ifndef MALLOC_CHECK\n-  ptr = alloc_counts[ (int)alloc_type_thead ].free_list.f_thead;\n+  ptr = alloc_counts[ (int) alloc_type_thead ].free_list.f_thead;\n   if (ptr != (thead_t *) 0)\n-    alloc_counts[ (int)alloc_type_thead ].free_list.f_thead = ptr->free;\n+    alloc_counts[ (int) alloc_type_thead ].free_list.f_thead = ptr->free;\n \n   else\n     {\n-      int unallocated\t= alloc_counts[ (int)alloc_type_thead ].unallocated;\n-      page_t *cur_page\t= alloc_counts[ (int)alloc_type_thead ].cur_page;\n+      int unallocated\t= alloc_counts[ (int) alloc_type_thead ].unallocated;\n+      page_t *cur_page\t= alloc_counts[ (int) alloc_type_thead ].cur_page;\n \n       if (unallocated == 0)\n \t{\n \t  unallocated = PAGE_SIZE / sizeof (thead_t);\n-\t  alloc_counts[ (int)alloc_type_thead ].cur_page = cur_page = allocate_page ();\n-\t  alloc_counts[ (int)alloc_type_thead ].total_pages++;\n+\t  alloc_counts[ (int) alloc_type_thead ].cur_page = cur_page = allocate_page ();\n+\t  alloc_counts[ (int) alloc_type_thead ].total_pages++;\n \t}\n \n       ptr = &cur_page->thead[ --unallocated ];\n-      alloc_counts[ (int)alloc_type_thead ].unallocated = unallocated;\n+      alloc_counts[ (int) alloc_type_thead ].unallocated = unallocated;\n     }\n \n #else\n   ptr = (thead_t *) xmalloc (sizeof (thead_t));\n \n #endif\n \n-  alloc_counts[ (int)alloc_type_thead ].total_alloc++;\n+  alloc_counts[ (int) alloc_type_thead ].total_alloc++;\n   *ptr = initial_thead;\n   return ptr;\n }\n@@ -5540,11 +5540,11 @@ STATIC void\n free_thead (ptr)\n      thead_t *ptr;\n {\n-  alloc_counts[ (int)alloc_type_thead ].total_free++;\n+  alloc_counts[ (int) alloc_type_thead ].total_free++;\n \n #ifndef MALLOC_CHECK\n-  ptr->free = (thead_t *) alloc_counts[ (int)alloc_type_thead ].free_list.f_thead;\n-  alloc_counts[ (int)alloc_type_thead ].free_list.f_thead = ptr;\n+  ptr->free = (thead_t *) alloc_counts[ (int) alloc_type_thead ].free_list.f_thead;\n+  alloc_counts[ (int) alloc_type_thead ].free_list.f_thead = ptr;\n \n #else\n   free ((PTR) ptr);"}]}