{"sha": "e2cfa983c31fa7886f496a47feb8714297ca0063", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJjZmE5ODNjMzFmYTc4ODZmNDk2YTQ3ZmViODcxNDI5N2NhMDA2Mw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-07-25T12:05:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-07-25T12:05:19Z"}, "message": "tree-vrp.c (extract_range_from_multiplicative_op): Add type parameter and use it instead of guessing expression type from the...\n\n2019-07-25  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vrp.c (extract_range_from_multiplicative_op): Add\n\ttype parameter and use it instead of guessing expression\n\ttype from the first operand.\n\t(extract_range_from_binary_expr): Pass expr_type down.\n\nFrom-SVN: r273797", "tree": {"sha": "8420353f6db2827ae4b9113bfca65049e5b004ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8420353f6db2827ae4b9113bfca65049e5b004ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2cfa983c31fa7886f496a47feb8714297ca0063", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2cfa983c31fa7886f496a47feb8714297ca0063", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2cfa983c31fa7886f496a47feb8714297ca0063", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2cfa983c31fa7886f496a47feb8714297ca0063/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c9357dc13bdc10df1eba95d7b79ee2d3ae4fbbc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9357dc13bdc10df1eba95d7b79ee2d3ae4fbbc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9357dc13bdc10df1eba95d7b79ee2d3ae4fbbc6"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "87a4ecd1d22d1d4dae84583894336a5c9949bdbf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2cfa983c31fa7886f496a47feb8714297ca0063/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2cfa983c31fa7886f496a47feb8714297ca0063/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2cfa983c31fa7886f496a47feb8714297ca0063", "patch": "@@ -1,3 +1,10 @@\n+2019-07-25  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vrp.c (extract_range_from_multiplicative_op): Add\n+\ttype parameter and use it instead of guessing expression\n+\ttype from the first operand.\n+\t(extract_range_from_binary_expr): Pass expr_type down.\n+\n 2019-07-25  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/arm.md (SATrev): Change to code attribute."}, {"sha": "9ba6f80b626731f4b8d06b89311f2789ae036f9b", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2cfa983c31fa7886f496a47feb8714297ca0063/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2cfa983c31fa7886f496a47feb8714297ca0063/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=e2cfa983c31fa7886f496a47feb8714297ca0063", "patch": "@@ -1238,7 +1238,7 @@ extract_range_into_wide_ints (const value_range_base *vr,\n \n static void\n extract_range_from_multiplicative_op (value_range_base *vr,\n-\t\t\t\t      enum tree_code code,\n+\t\t\t\t      enum tree_code code, tree type,\n \t\t\t\t      const value_range_base *vr0,\n \t\t\t\t      const value_range_base *vr1)\n {\n@@ -1253,7 +1253,6 @@ extract_range_from_multiplicative_op (value_range_base *vr,\n   gcc_assert (vr0->kind () == VR_RANGE\n \t      && vr0->kind () == vr1->kind ());\n \n-  tree type = vr0->type ();\n   wide_int res_lb, res_ub;\n   wide_int vr0_lb = wi::to_wide (vr0->min ());\n   wide_int vr0_ub = wi::to_wide (vr0->max ());\n@@ -1785,7 +1784,7 @@ extract_range_from_binary_expr (value_range_base *vr,\n \t  vr->set_varying ();\n \t  return;\n \t}\n-      extract_range_from_multiplicative_op (vr, code, &vr0, &vr1);\n+      extract_range_from_multiplicative_op (vr, code, expr_type, &vr0, &vr1);\n       return;\n     }\n   else if (code == RSHIFT_EXPR\n@@ -1806,7 +1805,8 @@ extract_range_from_binary_expr (value_range_base *vr,\n \t      if (vr0.kind () != VR_RANGE || vr0.symbolic_p ())\n \t\tvr0.set (VR_RANGE, vrp_val_min (expr_type),\n \t\t\t vrp_val_max (expr_type));\n-\t      extract_range_from_multiplicative_op (vr, code, &vr0, &vr1);\n+\t      extract_range_from_multiplicative_op (vr, code, expr_type,\n+\t\t\t\t\t\t    &vr0, &vr1);\n \t      return;\n \t    }\n \t  else if (code == LSHIFT_EXPR"}]}