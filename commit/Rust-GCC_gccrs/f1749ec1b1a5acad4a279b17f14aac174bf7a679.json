{"sha": "f1749ec1b1a5acad4a279b17f14aac174bf7a679", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE3NDllYzFiMWE1YWNhZDRhMjc5YjE3ZjE0YWFjMTc0YmY3YTY3OQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-01-03T11:54:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-01-03T11:54:53Z"}, "message": "re PR tree-optimization/51692 (ICE on several valgrind tests)\n\n2012-01-03  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/51692\n\t* tree-ssa-dce.c (eliminate_unnecessary_stmts): Do not remove\n\tthe LHS of allocation stmts.\n\n\t* gcc.dg/torture/pr51692.c: New testcase.\n\nFrom-SVN: r182838", "tree": {"sha": "c7ecc5722ca818dfc6ef3e519e393dabcd83add7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7ecc5722ca818dfc6ef3e519e393dabcd83add7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1749ec1b1a5acad4a279b17f14aac174bf7a679", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1749ec1b1a5acad4a279b17f14aac174bf7a679", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1749ec1b1a5acad4a279b17f14aac174bf7a679", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1749ec1b1a5acad4a279b17f14aac174bf7a679/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "75291c57b91d9a328fbb19dcc01195fb1ddc8468", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75291c57b91d9a328fbb19dcc01195fb1ddc8468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75291c57b91d9a328fbb19dcc01195fb1ddc8468"}], "stats": {"total": 75, "additions": 53, "deletions": 22}, "files": [{"sha": "77e96a33595a2bd86c3f14e138a16a226943712c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1749ec1b1a5acad4a279b17f14aac174bf7a679/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1749ec1b1a5acad4a279b17f14aac174bf7a679/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1749ec1b1a5acad4a279b17f14aac174bf7a679", "patch": "@@ -1,3 +1,9 @@\n+2012-01-03  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/51692\n+\t* tree-ssa-dce.c (eliminate_unnecessary_stmts): Do not remove\n+\tthe LHS of allocation stmts.\n+\n 2012-01-03  Olivier Hainque  <hainque@adacore.com>\n \n \t* system.h: Prior to #define, #undef fopen and freopen unconditionally."}, {"sha": "195630cb5ae9a8110fc99f867d3247dd848ec871", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1749ec1b1a5acad4a279b17f14aac174bf7a679/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1749ec1b1a5acad4a279b17f14aac174bf7a679/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f1749ec1b1a5acad4a279b17f14aac174bf7a679", "patch": "@@ -1,3 +1,8 @@\n+2012-01-03  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/51692\n+\t* gcc.dg/torture/pr51692.c: New testcase.\n+\n 2012-01-03  Richard Guenther  <rguenther@suse.de>\n \n \tPR debug/51650"}, {"sha": "34a81c29de127295b4dca2f046ddd0502ea0c646", "filename": "gcc/testsuite/gcc.dg/torture/pr51692.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1749ec1b1a5acad4a279b17f14aac174bf7a679/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr51692.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1749ec1b1a5acad4a279b17f14aac174bf7a679/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr51692.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr51692.c?ref=f1749ec1b1a5acad4a279b17f14aac174bf7a679", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+int\n+main ()\n+{\n+  volatile double d = 0.0;\n+  double *p = __builtin_calloc (1, sizeof (double));\n+  d += 1.0;\n+  *p += 2.0;\n+  __builtin_free (p);\n+  return 0;\n+}\n+"}, {"sha": "ccdf14a17027acc3061bcdf16c29f67593b1770e", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1749ec1b1a5acad4a279b17f14aac174bf7a679/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1749ec1b1a5acad4a279b17f14aac174bf7a679/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=f1749ec1b1a5acad4a279b17f14aac174bf7a679", "patch": "@@ -1329,31 +1329,38 @@ eliminate_unnecessary_stmts (void)\n \t    }\n \t  else if (is_gimple_call (stmt))\n \t    {\n-\t      call = gimple_call_fndecl (stmt);\n-\t      if (call)\n+\t      tree name = gimple_call_lhs (stmt);\n+\n+\t      notice_special_calls (stmt);\n+\n+\t      /* When LHS of var = call (); is dead, simplify it into\n+\t\t call (); saving one operand.  */\n+\t      if (name\n+\t\t  && TREE_CODE (name) == SSA_NAME\n+\t\t  && !TEST_BIT (processed, SSA_NAME_VERSION (name))\n+\t\t  /* Avoid doing so for allocation calls which we\n+\t\t     did not mark as necessary, it will confuse the\n+\t\t     special logic we apply to malloc/free pair removal.  */\n+\t\t  && (!(call = gimple_call_fndecl (stmt))\n+\t\t      || DECL_BUILT_IN_CLASS (call) != BUILT_IN_NORMAL\n+\t\t      || (DECL_FUNCTION_CODE (call) != BUILT_IN_MALLOC\n+\t\t\t  && DECL_FUNCTION_CODE (call) != BUILT_IN_CALLOC\n+\t\t\t  && DECL_FUNCTION_CODE (call) != BUILT_IN_ALLOCA\n+\t\t\t  && (DECL_FUNCTION_CODE (call)\n+\t\t\t      != BUILT_IN_ALLOCA_WITH_ALIGN))))\n \t\t{\n-\t\t  tree name;\n-\n-\t\t  /* When LHS of var = call (); is dead, simplify it into\n-\t\t     call (); saving one operand.  */\n-\t\t  name = gimple_call_lhs (stmt);\n-\t\t  if (name && TREE_CODE (name) == SSA_NAME\n-\t\t           && !TEST_BIT (processed, SSA_NAME_VERSION (name)))\n+\t\t  something_changed = true;\n+\t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t    {\n-\t\t      something_changed = true;\n-\t\t      if (dump_file && (dump_flags & TDF_DETAILS))\n-\t\t\t{\n-\t\t\t  fprintf (dump_file, \"Deleting LHS of call: \");\n-\t\t\t  print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n-\t\t\t  fprintf (dump_file, \"\\n\");\n-\t\t\t}\n-\n-\t\t      gimple_call_set_lhs (stmt, NULL_TREE);\n-\t\t      maybe_clean_or_replace_eh_stmt (stmt, stmt);\n-\t\t      update_stmt (stmt);\n-\t\t      release_ssa_name (name);\n+\t\t      fprintf (dump_file, \"Deleting LHS of call: \");\n+\t\t      print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n+\t\t      fprintf (dump_file, \"\\n\");\n \t\t    }\n-\t\t  notice_special_calls (stmt);\n+\n+\t\t  gimple_call_set_lhs (stmt, NULL_TREE);\n+\t\t  maybe_clean_or_replace_eh_stmt (stmt, stmt);\n+\t\t  update_stmt (stmt);\n+\t\t  release_ssa_name (name);\n \t\t}\n \t    }\n \t}"}]}