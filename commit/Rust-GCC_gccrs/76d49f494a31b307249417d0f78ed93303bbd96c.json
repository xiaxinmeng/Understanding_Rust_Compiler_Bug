{"sha": "76d49f494a31b307249417d0f78ed93303bbd96c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZkNDlmNDk0YTMxYjMwNzI0OTQxN2QwZjc4ZWQ5MzMwM2JiZDk2Yw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2011-12-20T13:53:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-12-20T13:53:42Z"}, "message": "sem_ch13.adb (Check_Indexing_Functions): The return type of an indexing function can be the default element type...\n\n2011-12-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Check_Indexing_Functions): The return type of an\n\tindexing function can be the default element type, and does not\n\tneed to be a reference type.\n\t* sem_ch4.adb (Try_Container_Indexing): Ditto.\n\nFrom-SVN: r182536", "tree": {"sha": "8d732d54ed8e03a3134a8fa928ce114cee530c59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d732d54ed8e03a3134a8fa928ce114cee530c59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76d49f494a31b307249417d0f78ed93303bbd96c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76d49f494a31b307249417d0f78ed93303bbd96c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76d49f494a31b307249417d0f78ed93303bbd96c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76d49f494a31b307249417d0f78ed93303bbd96c/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a68d415b1d94bf3cbafd889642bedc71c0e6ac5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a68d415b1d94bf3cbafd889642bedc71c0e6ac5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a68d415b1d94bf3cbafd889642bedc71c0e6ac5a"}], "stats": {"total": 73, "additions": 53, "deletions": 20}, "files": [{"sha": "26d8fcb9905f04178356f8304c5c42331c769a03", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d49f494a31b307249417d0f78ed93303bbd96c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d49f494a31b307249417d0f78ed93303bbd96c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=76d49f494a31b307249417d0f78ed93303bbd96c", "patch": "@@ -1,3 +1,10 @@\n+2011-12-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Check_Indexing_Functions): The return type of an\n+\tindexing function can be the default element type, and does not\n+\tneed to be a reference type.\n+\t* sem_ch4.adb (Try_Container_Indexing): Ditto.\n+\n 2011-12-20  Robert Dewar  <dewar@adacore.com>\n \n \t* a-cdlili.ads, sem_cat.adb, sem_ch10.adb: Minor reformatting."}, {"sha": "8c7452f784e7dded3456a2a837cfa94fa828b359", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d49f494a31b307249417d0f78ed93303bbd96c/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d49f494a31b307249417d0f78ed93303bbd96c/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=76d49f494a31b307249417d0f78ed93303bbd96c", "patch": "@@ -1867,13 +1867,33 @@ package body Sem_Ch13 is\n          ------------------------\n \n          procedure Check_One_Function (Subp : Entity_Id) is\n+            Default_Element : constant Node_Id :=\n+              Find_Aspect\n+                (Etype (First_Formal (Subp)),\n+                   Aspect_Iterator_Element);\n+\n          begin\n             if not Check_Primitive_Function (Subp) then\n                Error_Msg_NE\n                  (\"aspect Indexing requires a function that applies to type&\",\n                    Subp, Ent);\n             end if;\n \n+            --  An indexing function must return either the default element of\n+            --  the container, or a reference type.\n+\n+            if Present (Default_Element) then\n+               Analyze (Default_Element);\n+               if Is_Entity_Name (Default_Element)\n+                 and then\n+                   Covers (Entity (Default_Element), Etype (Subp))\n+               then\n+                  return;\n+               end if;\n+            end if;\n+\n+            --  Otherwise the return type must be a reference type.\n+\n             if not Has_Implicit_Dereference (Etype (Subp)) then\n                Error_Msg_N\n                  (\"function for indexing must return a reference type\", Subp);"}, {"sha": "416323112ecfe388feb0008daa8b165a771c0c8e", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d49f494a31b307249417d0f78ed93303bbd96c/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d49f494a31b307249417d0f78ed93303bbd96c/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=76d49f494a31b307249417d0f78ed93303bbd96c", "patch": "@@ -6491,18 +6491,22 @@ package body Sem_Ch4 is\n          Rewrite (N, Indexing);\n          Analyze (N);\n \n-         --  The return type of the indexing function is a reference type, so\n-         --  add the dereference as a possible interpretation.\n-\n-         Disc := First_Discriminant (Etype (Func));\n-         while Present (Disc) loop\n-            if Has_Implicit_Dereference (Disc) then\n-               Add_One_Interp (N, Disc, Designated_Type (Etype (Disc)));\n-               exit;\n-            end if;\n+         --  If the return type of the indexing function is a reference type,\n+         --  add the dereference as a possible interpretation. Note that the\n+         --  indexing aspect may be a function that returns the element type\n+         --  with no intervening implicit dereference.\n+\n+         if Has_Discriminants (Etype (Func)) then\n+            Disc := First_Discriminant (Etype (Func));\n+            while Present (Disc) loop\n+               if Has_Implicit_Dereference (Disc) then\n+                  Add_One_Interp (N, Disc, Designated_Type (Etype (Disc)));\n+                  exit;\n+               end if;\n \n-            Next_Discriminant (Disc);\n-         end loop;\n+               Next_Discriminant (Disc);\n+            end loop;\n+         end if;\n \n       else\n          Indexing := Make_Function_Call (Loc,\n@@ -6528,16 +6532,18 @@ package body Sem_Ch4 is\n \n                   --  Add implicit dereference interpretation\n \n-                  Disc := First_Discriminant (Etype (It.Nam));\n-                  while Present (Disc) loop\n-                     if Has_Implicit_Dereference (Disc) then\n-                        Add_One_Interp\n-                          (N, Disc, Designated_Type (Etype (Disc)));\n-                        exit;\n-                     end if;\n+                  if Has_Discriminants (Etype (It.Nam)) then\n+                     Disc := First_Discriminant (Etype (It.Nam));\n+                     while Present (Disc) loop\n+                        if Has_Implicit_Dereference (Disc) then\n+                           Add_One_Interp\n+                             (N, Disc, Designated_Type (Etype (Disc)));\n+                           exit;\n+                        end if;\n \n-                     Next_Discriminant (Disc);\n-                  end loop;\n+                        Next_Discriminant (Disc);\n+                     end loop;\n+                  end if;\n \n                   exit;\n                end if;"}]}