{"sha": "e838422b9eee3123812624de39ed76259e212492", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgzODQyMmI5ZWVlMzEyMzgxMjYyNGRlMzllZDc2MjU5ZTIxMjQ5Mg==", "commit": {"author": {"name": "Ira Rosen", "email": "irar@il.ibm.com", "date": "2007-03-11T11:13:34Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2007-03-11T11:13:34Z"}, "message": "tree-data-ref.c (analyze_offset): Add a return value (bool) to indicate success/failure of the analysis.\n\n\t* tree-data-ref.c (analyze_offset): Add a return value (bool) to\n\tindicate success/failure of the analysis. Add negation to subtrahend\n\tin case of subtraction. Fail if both operands contain constants.\n\t(create_data_ref): Fail if analyze_offset fails.\n\nFrom-SVN: r122817", "tree": {"sha": "a0d2e2a93834af978e8625b3a711d9c1a40ab9d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0d2e2a93834af978e8625b3a711d9c1a40ab9d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e838422b9eee3123812624de39ed76259e212492", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e838422b9eee3123812624de39ed76259e212492", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e838422b9eee3123812624de39ed76259e212492", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e838422b9eee3123812624de39ed76259e212492/comments", "author": {"login": "irar2", "id": 16818592, "node_id": "MDQ6VXNlcjE2ODE4NTky", "avatar_url": "https://avatars.githubusercontent.com/u/16818592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irar2", "html_url": "https://github.com/irar2", "followers_url": "https://api.github.com/users/irar2/followers", "following_url": "https://api.github.com/users/irar2/following{/other_user}", "gists_url": "https://api.github.com/users/irar2/gists{/gist_id}", "starred_url": "https://api.github.com/users/irar2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irar2/subscriptions", "organizations_url": "https://api.github.com/users/irar2/orgs", "repos_url": "https://api.github.com/users/irar2/repos", "events_url": "https://api.github.com/users/irar2/events{/privacy}", "received_events_url": "https://api.github.com/users/irar2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7b8cd03d6990e75f2f3286db9dda977ef6017bee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b8cd03d6990e75f2f3286db9dda977ef6017bee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b8cd03d6990e75f2f3286db9dda977ef6017bee"}], "stats": {"total": 88, "additions": 81, "deletions": 7}, "files": [{"sha": "1bdc3064224317a863ed4384f8f3176b5d0aecd5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e838422b9eee3123812624de39ed76259e212492/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e838422b9eee3123812624de39ed76259e212492/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e838422b9eee3123812624de39ed76259e212492", "patch": "@@ -1,3 +1,10 @@\n+2007-03-11  Ira Rosen  <irar@il.ibm.com>\n+\n+\t* tree-data-ref.c (analyze_offset): Add a return value (bool) to \n+\tindicate success/failure of the analysis. Add negation to subtrahend\n+\tin case of subtraction. Fail if both operands contain constants.\n+\t(create_data_ref): Fail if analyze_offset fails.\n+\n 2007-03-11  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (frndintxf2): Rename to ..."}, {"sha": "ac53f61749d7cbfcf485b5d8a58bc0fda730fe20", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e838422b9eee3123812624de39ed76259e212492/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e838422b9eee3123812624de39ed76259e212492/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e838422b9eee3123812624de39ed76259e212492", "patch": "@@ -1,3 +1,8 @@\n+2007-03-11  Ira Rosen  <irar@il.ibm.com>\n+\n+\tPR tree-optimization/29925\n+\t* gcc.dg/vect/fast-math-vect-pr29925.c: New test.\n+\n 2007-03-10  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/30274"}, {"sha": "caa6a3ca67d2e45f11135437621cb445d01e15f0", "filename": "gcc/testsuite/gcc.dg/vect/fast-math-vect-pr29925.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e838422b9eee3123812624de39ed76259e212492/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-vect-pr29925.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e838422b9eee3123812624de39ed76259e212492/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-vect-pr29925.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-vect-pr29925.c?ref=e838422b9eee3123812624de39ed76259e212492", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-require-effective-target vect_float } */\n+\n+#include <stdlib.h>\n+#include \"tree-vect.h\"\n+\n+void interp_pitch(float *exc, float *interp, int pitch, int len)\n+{\n+   int i,k;\n+   int maxj;\n+\n+   maxj=3;\n+   for (i=0;i<len;i++)\n+   {\n+      float tmp = 0;\n+      for (k=0;k<7;k++)\n+      {\n+         tmp += exc[i-pitch+k+maxj-6];\n+      }\n+      interp[i] = tmp;\n+   }\n+}\n+\n+int main()\n+{\n+   float *exc = calloc(126,sizeof(float));\n+   float *interp = calloc(80,sizeof(float));\n+   int pitch = -35;\n+\n+   check_vect ();\n+\n+   interp_pitch(exc, interp, pitch, 80);\n+   free(exc);\n+   free(interp);\n+   return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "d59278c89f511f52f4ee595bfb68e3150087f1a3", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e838422b9eee3123812624de39ed76259e212492/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e838422b9eee3123812624de39ed76259e212492/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=e838422b9eee3123812624de39ed76259e212492", "patch": "@@ -1835,7 +1835,7 @@ object_analysis (tree memref, tree stmt, bool is_read,\n    Extract INVARIANT and CONSTANT parts from OFFSET. \n \n */\n-static void \n+static bool \n analyze_offset (tree offset, tree *invariant, tree *constant)\n {\n   tree op0, op1, constant_0, constant_1, invariant_0, invariant_1;\n@@ -1851,23 +1851,36 @@ analyze_offset (tree offset, tree *invariant, tree *constant)\n \t*constant = offset;\n       else\n \t*invariant = offset;\n-      return;\n+      return true;\n     }\n \n   op0 = TREE_OPERAND (offset, 0);\n   op1 = TREE_OPERAND (offset, 1);\n \n   /* Recursive call with the operands.  */\n-  analyze_offset (op0, &invariant_0, &constant_0);\n-  analyze_offset (op1, &invariant_1, &constant_1);\n+  if (!analyze_offset (op0, &invariant_0, &constant_0)\n+      || !analyze_offset (op1, &invariant_1, &constant_1))\n+    return false;\n \n-  /* Combine the results.  */\n+  /* Combine the results. Add negation to the subtrahend in case of \n+     subtraction.  */\n+  if (constant_0 && constant_1)\n+    return false;\n   *constant = constant_0 ? constant_0 : constant_1;\n+  if (code == MINUS_EXPR && constant_1)\n+    *constant = fold_build1 (NEGATE_EXPR, TREE_TYPE (*constant), *constant);\n+\n   if (invariant_0 && invariant_1)\n     *invariant = \n       fold_build2 (code, TREE_TYPE (invariant_0), invariant_0, invariant_1);\n   else\n-    *invariant = invariant_0 ? invariant_0 : invariant_1;\n+    {\n+      *invariant = invariant_0 ? invariant_0 : invariant_1;\n+      if (code == MINUS_EXPR && invariant_1)\n+        *invariant = \n+           fold_build1 (NEGATE_EXPR, TREE_TYPE (*invariant), *invariant);\n+    }\n+  return true;\n }\n \n /* Free the memory used by the data reference DR.  */\n@@ -1941,7 +1954,17 @@ create_data_ref (tree memref, tree stmt, bool is_read)\n   STRIP_NOPS (offset);\n   if (offset != orig_offset)\n     type = TREE_TYPE (orig_offset);\n-  analyze_offset (offset, &invariant, &constant);\n+  if (!analyze_offset (offset, &invariant, &constant))\n+    {\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+        {\n+          fprintf (dump_file, \"\\ncreate_data_ref: failed to analyze dr's\");\n+          fprintf (dump_file, \" offset for \");\n+          print_generic_expr (dump_file, memref, TDF_SLIM);\n+          fprintf (dump_file, \"\\n\");\n+        }\n+      return NULL;\n+    }\n   if (type && invariant)\n     invariant = fold_convert (type, invariant);\n "}]}