{"sha": "6344da6f57393a5df75f5738343afc30d1f9ea23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM0NGRhNmY1NzM5M2E1ZGY3NWY1NzM4MzQzYWZjMzBkMWY5ZWEyMw==", "commit": {"author": {"name": "Adam King", "email": "aking@dreammechanics.com", "date": "2002-04-16T15:37:39Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-04-16T15:37:39Z"}, "message": "natFileWin32.cc (performList): Return the correct array type.\n\n2002-04-16  Adam King <aking@dreammechanics.com>\n\t    Tom Tromey  <tromey@redhat.com>\n\n\t* java/io/natFileWin32.cc (performList): Return the correct array\n\ttype.  Don't duplicate the creation of a File since it's already\n\tdone earlier in the method and the existing code would cause a\n\tArrayStoreException.  Don't use fixed-size array.\n\t(_access, _stat, attr, getCanonicalPath, performMkdir,\n\tperformRenameTo): Don't use fixed-size array.\n\t(getCanonicalPath): Use throw, not _Jv_Throw.\n\nCo-Authored-By: Tom Tromey <tromey@redhat.com>\n\nFrom-SVN: r52369", "tree": {"sha": "4c07fa46a51c23bee0cfd38f78243f89be0f881f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c07fa46a51c23bee0cfd38f78243f89be0f881f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6344da6f57393a5df75f5738343afc30d1f9ea23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6344da6f57393a5df75f5738343afc30d1f9ea23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6344da6f57393a5df75f5738343afc30d1f9ea23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6344da6f57393a5df75f5738343afc30d1f9ea23/comments", "author": null, "committer": null, "parents": [{"sha": "3148ad6d93bbe2414b3c973adc501337a9de91d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3148ad6d93bbe2414b3c973adc501337a9de91d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3148ad6d93bbe2414b3c973adc501337a9de91d3"}], "stats": {"total": 66, "additions": 35, "deletions": 31}, "files": [{"sha": "1becfdd3de2be41da4fefae5dd5b7413576bd7e2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6344da6f57393a5df75f5738343afc30d1f9ea23/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6344da6f57393a5df75f5738343afc30d1f9ea23/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6344da6f57393a5df75f5738343afc30d1f9ea23", "patch": "@@ -1,3 +1,14 @@\n+2002-04-16  Adam King <aking@dreammechanics.com>\n+\t    Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/io/natFileWin32.cc (performList): Return the correct array\n+\ttype.  Don't duplicate the creation of a File since it's already\n+\tdone earlier in the method and the existing code would cause a\n+\tArrayStoreException.  Don't use fixed-size array.\n+\t(_access, _stat, attr, getCanonicalPath, performMkdir,\n+\tperformRenameTo): Don't use fixed-size array.\n+\t(getCanonicalPath): Use throw, not _Jv_Throw.\n+\t\n 2002-04-15  DJ Delorie  <dj@redhat.com>\n \n \t* configure.in: Allow building in $srcdir."}, {"sha": "af955016c4faf4922e42f6c603b12cab94a77c60", "filename": "libjava/java/io/natFileWin32.cc", "status": "modified", "additions": 24, "deletions": 31, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6344da6f57393a5df75f5738343afc30d1f9ea23/libjava%2Fjava%2Fio%2FnatFileWin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6344da6f57393a5df75f5738343afc30d1f9ea23/libjava%2Fjava%2Fio%2FnatFileWin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatFileWin32.cc?ref=6344da6f57393a5df75f5738343afc30d1f9ea23", "patch": "@@ -1,6 +1,6 @@\n // natFileWin32.cc - Native part of File class.\n \n-/* Copyright (C) 1998, 1999  Red Hat, Inc.\n+/* Copyright (C) 1998, 1999, 2002  Red Hat, Inc.\n \n    This file is part of libgcj.\n \n@@ -32,9 +32,8 @@ java::io::File::_access (jint query)\n   jstring canon = getCanonicalPath();\n   if (! canon)\n     return false;\n-  char buf[MAX_PATH];\n+  char *buf = (char *) __builtin_alloca (JvGetStringUTFLength (canon) + 1);\n   jsize total = JvGetStringUTFRegion (canon, 0, canon->length(), buf);\n-  // FIXME?\n   buf[total] = '\\0';\n \n   JvAssert (query == READ || query == WRITE || query == EXISTS);\n@@ -56,9 +55,8 @@ java::io::File::_stat (jint query)\n   jstring canon = getCanonicalPath();\n   if (! canon)\n     return false;\n-  char buf[MAX_PATH];\n+  char *buf = (char *) __builtin_alloca (JvGetStringUTFLength (canon) + 1);\n   jsize total = JvGetStringUTFRegion (canon, 0, canon->length(), buf);\n-  // FIXME?\n   buf[total] = '\\0';\n \n   JvAssert (query == DIRECTORY || query == ISFILE);\n@@ -79,9 +77,8 @@ java::io::File::attr (jint query)\n   jstring canon = getCanonicalPath();\n   if (! canon)\n     return false;\n-  char buf[MAX_PATH];\n+  char *buf = (char *) __builtin_alloca (JvGetStringUTFLength (canon) + 1);\n   jsize total = JvGetStringUTFRegion (canon, 0, canon->length(), buf);\n-  // FIXME?\n   buf[total] = '\\0';\n \n   JvAssert (query == MODIFIED || query == LENGTH);\n@@ -102,14 +99,14 @@ java::io::File::attr (jint query)\n jstring\n java::io::File::getCanonicalPath (void)\n {\n-  char buf[MAX_PATH], buf2[MAX_PATH];\n+  char *buf = (char *) __builtin_alloca (JvGetStringUTFLength (path) + 1);\n   jsize total = JvGetStringUTFRegion (path, 0, path->length(), buf);\n-  // FIXME?\n   buf[total] = '\\0';\n \n   LPTSTR unused;\n+  char buf2[MAX_PATH];\n   if(!GetFullPathName(buf, MAX_PATH, buf2, &unused))\n-    _Jv_Throw (new IOException (JvNewStringLatin1 (\"GetFullPathName failed\")));\n+    throw new IOException (JvNewStringLatin1 (\"GetFullPathName failed\"));\n \n   // FIXME: what encoding to assume for file names?  This affects many\n   // calls.\n@@ -143,7 +140,7 @@ java::io::File::performList (java::io::FilenameFilter *filter,\n   jstring canon = getCanonicalPath();\n   if (! canon)\n     return NULL;\n-  char buf[MAX_PATH];\n+  char *buf = (char *) __builtin_alloca (JvGetStringUTFLength (canon) + 5);\n   jsize total = JvGetStringUTFRegion (canon, 0, canon->length(), buf);\n   // FIXME?\n   strcpy(&buf[total], \"\\\\*.*\");\n@@ -161,13 +158,17 @@ java::io::File::performList (java::io::FilenameFilter *filter,\n         {\n           jstring name = JvNewStringUTF (data.cFileName);\n \n-          if (filter && !filter->accept(this, name)) continue;\n-          if (clazz == &java::io::File::class$) {\n+          if (filter && !filter->accept(this, name))\n+\t    continue;\n+          if (clazz == &java::io::File::class$)\n+\t    {\n               java::io::File *file = new java::io::File (this, name);\n-              if (fileFilter && !fileFilter->accept(file)) continue;\n-          }\n-          vec->addElement (name);\n-\n+              if (fileFilter && !fileFilter->accept(file))\n+\t\tcontinue;\n+\t      vec->addElement (file);\n+\t    }\n+\t  else\n+\t    vec->addElement (name);\n         }\n     }\n   while (FindNextFile (handle, &data));\n@@ -177,23 +178,17 @@ java::io::File::performList (java::io::FilenameFilter *filter,\n \n   FindClose (handle);\n \n-  jobjectArray ret = JvNewObjectArray (vec->size(), canon->getClass(), NULL);\n+  jobjectArray ret = JvNewObjectArray (vec->size(), clazz, NULL);\n   vec->copyInto (ret);\n-  if (clazz == &java::io::File::class$) {\n-      jobject *ret_elements = elements(ret);\n-      for(int i=0; i<ret->length; i++)\n-          ret_elements[i] = new File((jstring)(ret_elements[i]));\n-  }\n   return ret;\n }\n \n \n jboolean\n java::io::File::performMkdir (void)\n {\n-  char buf[MAX_PATH];\n+  char *buf = (char *) __builtin_alloca (JvGetStringUTFLength (path) + 1);\n   jsize total = JvGetStringUTFRegion(path, 0, path->length(), buf);\n-  // FIXME?\n   buf[total] = '\\0';\n \n   return (CreateDirectory(buf, NULL)) ? true : false;\n@@ -202,13 +197,12 @@ java::io::File::performMkdir (void)\n jboolean\n java::io::File::performRenameTo (File *dest)\n {\n-  char buf[MAX_PATH];\n+  char *buf = (char *) __builtin_alloca (JvGetStringUTFLength (path) + 1);\n   jsize total = JvGetStringUTFRegion(path, 0, path->length(), buf);\n-  // FIXME?\n   buf[total] = '\\0';\n-  char buf2[MAX_PATH];\n+  char *buf2 = (char *) __builtin_alloca (JvGetStringUTFLength (dest->path)\n+\t\t\t\t\t  + 1);\n   total = JvGetStringUTFRegion(dest->path, 0, dest->path->length(), buf2);\n-  // FIXME?\n   buf2[total] = '\\0';\n \n   return (MoveFile(buf, buf2)) ? true : false;\n@@ -218,9 +212,8 @@ jboolean\n java::io::File::performDelete ()\n {\n   jstring canon = getCanonicalPath();\n-  char buf[MAX_PATH];\n+  char *buf = (char *) __builtin_alloca (JvGetStringUTFLength (canon) + 1);\n   jsize total = JvGetStringUTFRegion(canon, 0, canon->length(), buf);\n-  // FIXME?\n   buf[total] = '\\0';\n \n   DWORD attributes = GetFileAttributes (buf);"}]}