{"sha": "ee8c1b05d53213625231c9df895501823b19d44c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU4YzFiMDVkNTMyMTM2MjUyMzFjOWRmODk1NTAxODIzYjE5ZDQ0Yw==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2006-12-20T14:15:53Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2006-12-20T14:15:53Z"}, "message": "loop-unswitch.c (unswitch_loop): Update arguments of duplicate_loop_to_header_edge call.\n\n\t* loop-unswitch.c (unswitch_loop): Update arguments of\n\tduplicate_loop_to_header_edge call.\n\t* tree-ssa-loop-ivcanon.c (try_unroll_loop_completely): Ditto.\n\t* loop-unroll.c (peel_loop_completely, unroll_loop_constant_iterations,\n\tunroll_loop_runtime_iterations, peel_loop_simple, unroll_loop_stupid):\n\tDitto.\n\t* cfgloopmanip.c (loop_version): Ditto.\n\t(duplicate_loop_to_header_edge): Change\n\ttype of to_remove to VEC(edge), remove n_to_remove argument.\n\t* tree-ssa-loop-manip.c (tree_duplicate_loop_to_header_edge):\n\tChange type of to_remove to VEC(edge), remove n_to_remove argument.\n\t(tree_unroll_loop): Update arguments of\n\ttree_duplicate_loop_to_header_edge call.\n\t* cfghooks.c (cfg_hook_duplicate_loop_to_header_edge):\n\tChange type of to_remove to VEC(edge), remove n_to_remove argument.\n\t* cfghooks.h (struct cfg_hooks): Type of\n\tcfg_hook_duplicate_loop_to_header_edge changed.\n\t(cfg_hook_duplicate_loop_to_header_edge): Declaration changed.\n\t* cfgloop.h (duplicate_loop_to_header_edge): Ditto.\n\t* tree-flow.h (tree_duplicate_loop_to_header_edge): Ditto.\n\nFrom-SVN: r120074", "tree": {"sha": "c833734dce382efda016f8ef594a2fe91177e6ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c833734dce382efda016f8ef594a2fe91177e6ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee8c1b05d53213625231c9df895501823b19d44c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee8c1b05d53213625231c9df895501823b19d44c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee8c1b05d53213625231c9df895501823b19d44c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee8c1b05d53213625231c9df895501823b19d44c/comments", "author": null, "committer": null, "parents": [{"sha": "c882a2c2384d367d612ab1ce12030d6900d216c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c882a2c2384d367d612ab1ce12030d6900d216c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c882a2c2384d367d612ab1ce12030d6900d216c9"}], "stats": {"total": 159, "additions": 88, "deletions": 71}, "files": [{"sha": "f991a4d066d09078c13f633d206b3c48df2073ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8c1b05d53213625231c9df895501823b19d44c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8c1b05d53213625231c9df895501823b19d44c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee8c1b05d53213625231c9df895501823b19d44c", "patch": "@@ -1,3 +1,26 @@\n+2006-12-20  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\t* loop-unswitch.c (unswitch_loop): Update arguments of\n+\tduplicate_loop_to_header_edge call.\n+\t* tree-ssa-loop-ivcanon.c (try_unroll_loop_completely): Ditto.\n+\t* loop-unroll.c (peel_loop_completely, unroll_loop_constant_iterations,\n+\tunroll_loop_runtime_iterations, peel_loop_simple, unroll_loop_stupid):\n+\tDitto.\n+\t* cfgloopmanip.c (loop_version): Ditto.\n+\t(duplicate_loop_to_header_edge): Change\n+\ttype of to_remove to VEC(edge), remove n_to_remove argument.\n+\t* tree-ssa-loop-manip.c (tree_duplicate_loop_to_header_edge):\n+\tChange type of to_remove to VEC(edge), remove n_to_remove argument.\n+\t(tree_unroll_loop): Update arguments of\n+\ttree_duplicate_loop_to_header_edge call.\n+\t* cfghooks.c (cfg_hook_duplicate_loop_to_header_edge):\n+\tChange type of to_remove to VEC(edge), remove n_to_remove argument.\n+\t* cfghooks.h (struct cfg_hooks): Type of\n+\tcfg_hook_duplicate_loop_to_header_edge changed.\n+\t(cfg_hook_duplicate_loop_to_header_edge): Declaration changed.\n+\t* cfgloop.h (duplicate_loop_to_header_edge): Ditto.\n+\t* tree-flow.h (tree_duplicate_loop_to_header_edge): Ditto.\n+\n 2006-12-20  Dorit Nuzman  <dorit@il.ibm.com>\n \n \t* config/spu/spu.md (vec_widen_umult_hi_v8hi): New."}, {"sha": "50aca9f1b6929f61f5be19af00e5cbee0afdcb14", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8c1b05d53213625231c9df895501823b19d44c/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8c1b05d53213625231c9df895501823b19d44c/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=ee8c1b05d53213625231c9df895501823b19d44c", "patch": "@@ -939,14 +939,14 @@ bool\n cfg_hook_duplicate_loop_to_header_edge (struct loop *loop, edge e,\n \t\t\t\t\tunsigned int ndupl,\n \t\t\t\t\tsbitmap wont_exit, edge orig,\n-\t\t\t\t\tedge *to_remove,\n-\t\t\t\t\tunsigned int *n_to_remove, int flags)\n+\t\t\t\t\tVEC (edge, heap) **to_remove,\n+\t\t\t\t\tint flags)\n {\n   gcc_assert (cfg_hooks->cfg_hook_duplicate_loop_to_header_edge);\n   return cfg_hooks->cfg_hook_duplicate_loop_to_header_edge (loop, e,\n \t\t\t\t\t\t\t    ndupl, wont_exit,\n \t\t\t\t\t\t\t    orig, to_remove,\n-\t\t\t\t\t\t\t    n_to_remove, flags);\n+\t\t\t\t\t\t\t    flags);\n }\n \n /* Conditional jumps are represented differently in trees and RTL,"}, {"sha": "fb6264df7038b8b68456bad5d68557e74d289f47", "filename": "gcc/cfghooks.h", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8c1b05d53213625231c9df895501823b19d44c/gcc%2Fcfghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8c1b05d53213625231c9df895501823b19d44c/gcc%2Fcfghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.h?ref=ee8c1b05d53213625231c9df895501823b19d44c", "patch": "@@ -111,12 +111,10 @@ struct cfg_hooks\n \n   /* A hook for duplicating loop in CFG, currently this is used\n      in loop versioning.  */\n-  bool (*cfg_hook_duplicate_loop_to_header_edge) (struct loop *loop, edge e,\n-\t\t\t\t\t\t  unsigned int ndupl,\n-\t\t\t\t\t\t  sbitmap wont_exit,\n-\t\t\t\t\t\t  edge orig, edge *to_remove,\n-\t\t\t\t\t\t  unsigned int *n_to_remove,\n-\t\t\t\t\t\t  int flags);\n+  bool (*cfg_hook_duplicate_loop_to_header_edge) (struct loop *, edge,\n+\t\t\t\t\t\t  unsigned, sbitmap,\n+\t\t\t\t\t\t  edge, VEC (edge, heap) **,\n+\t\t\t\t\t\t  int);\n \n   /* Add condition to new basic block and update CFG used in loop\n      versioning.  */\n@@ -165,8 +163,8 @@ extern void execute_on_shrinking_pred (edge);\n extern bool cfg_hook_duplicate_loop_to_header_edge (struct loop *loop, edge,\n \t\t\t\t\t\t    unsigned int ndupl,\n \t\t\t\t\t\t    sbitmap wont_exit,\n-\t\t\t\t\t\t    edge orig, edge *to_remove,\n-\t\t\t\t\t\t    unsigned int *n_to_remove,\n+\t\t\t\t\t\t    edge orig,\n+\t\t\t\t\t\t    VEC (edge, heap) **to_remove,\n \t\t\t\t\t\t    int flags);\n \n extern void lv_flush_pending_stmts (edge);"}, {"sha": "aa12dbf3ed0e904756fb7a4a22b76f3cb9be760a", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8c1b05d53213625231c9df895501823b19d44c/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8c1b05d53213625231c9df895501823b19d44c/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=ee8c1b05d53213625231c9df895501823b19d44c", "patch": "@@ -251,8 +251,8 @@ extern bool can_duplicate_loop_p (struct loop *loop);\n \n extern struct loop * duplicate_loop (struct loop *, struct loop *);\n extern bool duplicate_loop_to_header_edge (struct loop *, edge, \n-\t\t\t\t\t   unsigned, sbitmap, edge, edge *,\n-\t\t\t\t\t   unsigned *, int);\n+\t\t\t\t\t   unsigned, sbitmap, edge,\n+ \t\t\t\t\t   VEC (edge, heap) **, int);\n extern struct loop *loopify (edge, edge,\n \t\t\t     basic_block, edge, edge, bool);\n struct loop * loop_version (struct loop *, void *,"}, {"sha": "9021fbafd4e14059ccae9a3ac04dfe6e75b2f9de", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8c1b05d53213625231c9df895501823b19d44c/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8c1b05d53213625231c9df895501823b19d44c/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=ee8c1b05d53213625231c9df895501823b19d44c", "patch": "@@ -814,11 +814,12 @@ update_single_exit_for_duplicated_loops (struct loop *orig_loops[], unsigned n)\n    original LOOP body, the other copies are numbered in order given by control\n    flow through them) into TO_REMOVE array.  Returns false if duplication is\n    impossible.  */\n+\n bool\n duplicate_loop_to_header_edge (struct loop *loop, edge e,\n \t\t\t       unsigned int ndupl, sbitmap wont_exit,\n-\t\t\t       edge orig, edge *to_remove,\n-\t\t\t       unsigned int *n_to_remove, int flags)\n+\t\t\t       edge orig, VEC (edge, heap) **to_remove,\n+\t\t\t       int flags)\n {\n   struct loop *target, *aloop;\n   struct loop **orig_loops;\n@@ -966,10 +967,6 @@ duplicate_loop_to_header_edge (struct loop *loop, edge e,\n   if (current_loops->state & LOOPS_HAVE_MARKED_SINGLE_EXITS)\n     update_single_exits_after_duplication (bbs, n, target);\n \n-  /* Record exit edge in original loop body.  */\n-  if (orig && TEST_BIT (wont_exit, 0))\n-    to_remove[(*n_to_remove)++] = orig;\n-\n   spec_edges[SE_ORIG] = orig;\n   spec_edges[SE_LATCH] = latch_edge;\n \n@@ -1043,7 +1040,10 @@ duplicate_loop_to_header_edge (struct loop *loop, edge e,\n \n       /* Record exit edge in this copy.  */\n       if (orig && TEST_BIT (wont_exit, j + 1))\n-\tto_remove[(*n_to_remove)++] = new_spec_edges[SE_ORIG];\n+\t{\n+\t  if (to_remove)\n+\t    VEC_safe_push (edge, heap, *to_remove, new_spec_edges[SE_ORIG]);\n+\t}\n \n       /* Record the first copy in the control flow order if it is not\n \t the original loop (i.e. in case of peeling).  */\n@@ -1063,6 +1063,13 @@ duplicate_loop_to_header_edge (struct loop *loop, edge e,\n   free (new_bbs);\n   free (orig_loops);\n \n+  /* Record the exit edge in the original loop body, and update the frequencies.  */\n+  if (orig && TEST_BIT (wont_exit, 0))\n+    {\n+      if (to_remove)\n+\tVEC_safe_push (edge, heap, *to_remove, orig);\n+    }\n+\n   /* Update the original loop.  */\n   if (!is_latch)\n     set_immediate_dominator (CDI_DOMINATORS, e->dest, e->src);\n@@ -1302,7 +1309,7 @@ loop_version (struct loop *loop,\n \n   /* Duplicate loop.  */\n   if (!cfg_hook_duplicate_loop_to_header_edge (loop, entry, 1,\n-\t\t\t\t\t       NULL, NULL, NULL, NULL, 0))\n+\t\t\t\t\t       NULL, NULL, NULL, 0))\n     return NULL;\n \n   /* After duplication entry edge now points to new loop head block."}, {"sha": "63eebed31830e3677637e3db700cc54b224c338c", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 30, "deletions": 31, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8c1b05d53213625231c9df895501823b19d44c/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8c1b05d53213625231c9df895501823b19d44c/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=ee8c1b05d53213625231c9df895501823b19d44c", "patch": "@@ -446,8 +446,9 @@ peel_loop_completely (struct loop *loop)\n {\n   sbitmap wont_exit;\n   unsigned HOST_WIDE_INT npeel;\n-  unsigned n_remove_edges, i;\n-  edge *remove_edges, ein;\n+  unsigned i;\n+  VEC (edge, heap) *remove_edges;\n+  edge ein;\n   struct niter_desc *desc = get_simple_loop_desc (loop);\n   struct opt_info *opt_info = NULL;\n   \n@@ -463,8 +464,7 @@ peel_loop_completely (struct loop *loop)\n       if (desc->noloop_assumptions)\n \tRESET_BIT (wont_exit, 1);\n \n-      remove_edges = XCNEWVEC (edge, npeel);\n-      n_remove_edges = 0;\n+      remove_edges = NULL;\n \n       if (flag_split_ivs_in_unroller)\n         opt_info = analyze_insns_in_loop (loop);\n@@ -473,7 +473,7 @@ peel_loop_completely (struct loop *loop)\n       ok = duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n \t\t\t\t\t  npeel,\n \t\t\t\t\t  wont_exit, desc->out_edge,\n-\t\t\t\t\t  remove_edges, &n_remove_edges,\n+\t\t\t\t\t  &remove_edges,\n \t\t\t\t\t  DLTHE_FLAG_UPDATE_FREQ\n \t\t\t\t\t  | DLTHE_FLAG_COMPLETTE_PEEL\n \t\t\t\t\t  | (opt_info\n@@ -489,9 +489,9 @@ peel_loop_completely (struct loop *loop)\n  \t}\n \n       /* Remove the exit edges.  */\n-      for (i = 0; i < n_remove_edges; i++)\n-\tremove_path (remove_edges[i]);\n-      free (remove_edges);\n+      for (i = 0; VEC_iterate (edge, remove_edges, i, ein); i++)\n+\tremove_path (ein);\n+      VEC_free (edge, heap, remove_edges);\n     }\n \n   ein = desc->in_edge;\n@@ -630,8 +630,9 @@ unroll_loop_constant_iterations (struct loop *loop)\n   unsigned HOST_WIDE_INT niter;\n   unsigned exit_mod;\n   sbitmap wont_exit;\n-  unsigned n_remove_edges, i;\n-  edge *remove_edges;\n+  unsigned i;\n+  VEC (edge, heap) *remove_edges;\n+  edge e;\n   unsigned max_unroll = loop->lpt_decision.times;\n   struct niter_desc *desc = get_simple_loop_desc (loop);\n   bool exit_at_end = loop_exit_at_end_p (loop);\n@@ -648,8 +649,7 @@ unroll_loop_constant_iterations (struct loop *loop)\n   wont_exit = sbitmap_alloc (max_unroll + 1);\n   sbitmap_ones (wont_exit);\n \n-  remove_edges = XCNEWVEC (edge, max_unroll + exit_mod + 1);\n-  n_remove_edges = 0;\n+  remove_edges = NULL;\n   if (flag_split_ivs_in_unroller \n       || flag_variable_expansion_in_unroller)\n     opt_info = analyze_insns_in_loop (loop);\n@@ -674,7 +674,7 @@ unroll_loop_constant_iterations (struct loop *loop)\n           ok = duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n \t\t\t\t\t      exit_mod,\n \t\t\t\t\t      wont_exit, desc->out_edge,\n-\t\t\t\t\t      remove_edges, &n_remove_edges,\n+\t\t\t\t\t      &remove_edges,\n \t\t\t\t\t      DLTHE_FLAG_UPDATE_FREQ\n \t\t\t\t\t      | (opt_info && exit_mod > 1\n \t\t\t\t\t\t ? DLTHE_RECORD_COPY_NUMBER\n@@ -713,7 +713,7 @@ unroll_loop_constant_iterations (struct loop *loop)\n \t  ok = duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n \t\t\t\t\t      exit_mod + 1,\n \t\t\t\t\t      wont_exit, desc->out_edge,\n-\t\t\t\t\t      remove_edges, &n_remove_edges,\n+\t\t\t\t\t      &remove_edges,\n \t\t\t\t\t      DLTHE_FLAG_UPDATE_FREQ\n \t\t\t\t\t      | (opt_info && exit_mod > 0\n \t\t\t\t\t\t ? DLTHE_RECORD_COPY_NUMBER\n@@ -740,7 +740,7 @@ unroll_loop_constant_iterations (struct loop *loop)\n   ok = duplicate_loop_to_header_edge (loop, loop_latch_edge (loop),\n \t\t\t\t      max_unroll,\n \t\t\t\t      wont_exit, desc->out_edge,\n-\t\t\t\t      remove_edges, &n_remove_edges,\n+\t\t\t\t      &remove_edges,\n \t\t\t\t      DLTHE_FLAG_UPDATE_FREQ\n \t\t\t\t      | (opt_info\n \t\t\t\t\t ? DLTHE_RECORD_COPY_NUMBER\n@@ -777,9 +777,9 @@ unroll_loop_constant_iterations (struct loop *loop)\n   desc->niter_expr = GEN_INT (desc->niter);\n \n   /* Remove the edges.  */\n-  for (i = 0; i < n_remove_edges; i++)\n-    remove_path (remove_edges[i]);\n-  free (remove_edges);\n+  for (i = 0; VEC_iterate (edge, remove_edges, i, e); i++)\n+    remove_path (e);\n+  VEC_free (edge, heap, remove_edges);\n \n   if (dump_file)\n     fprintf (dump_file,\n@@ -923,8 +923,9 @@ unroll_loop_runtime_iterations (struct loop *loop)\n   unsigned n_dom_bbs;\n   sbitmap wont_exit;\n   int may_exit_copy;\n-  unsigned n_peel, n_remove_edges;\n-  edge *remove_edges, e;\n+  unsigned n_peel;\n+  VEC (edge, heap) *remove_edges;\n+  edge e;\n   bool extra_zero_check, last_may_exit;\n   unsigned max_unroll = loop->lpt_decision.times;\n   struct niter_desc *desc = get_simple_loop_desc (loop);\n@@ -995,8 +996,7 @@ unroll_loop_runtime_iterations (struct loop *loop)\n   /* Precondition the loop.  */\n   split_edge_and_insert (loop_preheader_edge (loop), init_code);\n \n-  remove_edges = XCNEWVEC (edge, max_unroll + n_peel + 1);\n-  n_remove_edges = 0;\n+  remove_edges = NULL;\n \n   wont_exit = sbitmap_alloc (max_unroll + 2);\n \n@@ -1011,7 +1011,7 @@ unroll_loop_runtime_iterations (struct loop *loop)\n   ezc_swtch = loop_preheader_edge (loop)->src;\n   ok = duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n \t\t\t\t      1, wont_exit, desc->out_edge,\n-\t\t\t\t      remove_edges, &n_remove_edges,\n+\t\t\t\t      &remove_edges,\n \t\t\t\t      DLTHE_FLAG_UPDATE_FREQ);\n   gcc_assert (ok);\n \n@@ -1026,7 +1026,7 @@ unroll_loop_runtime_iterations (struct loop *loop)\n \tSET_BIT (wont_exit, 1);\n       ok = duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n \t\t\t\t\t  1, wont_exit, desc->out_edge,\n-\t\t\t\t\t  remove_edges, &n_remove_edges,\n+\t\t\t\t\t  &remove_edges,\n \t\t\t\t\t  DLTHE_FLAG_UPDATE_FREQ);\n       gcc_assert (ok);\n \n@@ -1082,7 +1082,7 @@ unroll_loop_runtime_iterations (struct loop *loop)\n   ok = duplicate_loop_to_header_edge (loop, loop_latch_edge (loop),\n \t\t\t\t      max_unroll,\n \t\t\t\t      wont_exit, desc->out_edge,\n-\t\t\t\t      remove_edges, &n_remove_edges,\n+\t\t\t\t      &remove_edges,\n \t\t\t\t      DLTHE_FLAG_UPDATE_FREQ\n \t\t\t\t      | (opt_info\n \t\t\t\t\t ? DLTHE_RECORD_COPY_NUMBER\n@@ -1116,9 +1116,9 @@ unroll_loop_runtime_iterations (struct loop *loop)\n     }\n \n   /* Remove the edges.  */\n-  for (i = 0; i < n_remove_edges; i++)\n-    remove_path (remove_edges[i]);\n-  free (remove_edges);\n+  for (i = 0; VEC_iterate (edge, remove_edges, i, e); i++)\n+    remove_path (e);\n+  VEC_free (edge, heap, remove_edges);\n \n   /* We must be careful when updating the number of iterations due to\n      preconditioning and the fact that the value must be valid at entry\n@@ -1264,8 +1264,7 @@ peel_loop_simple (struct loop *loop)\n   opt_info_start_duplication (opt_info);\n   \n   ok = duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n-\t\t\t\t      npeel, wont_exit,\n-\t\t\t\t      NULL, NULL,\n+\t\t\t\t      npeel, wont_exit, NULL,\n \t\t\t\t      NULL, DLTHE_FLAG_UPDATE_FREQ\n \t\t\t\t      | (opt_info\n \t\t\t\t\t ? DLTHE_RECORD_COPY_NUMBER\n@@ -1416,7 +1415,7 @@ unroll_loop_stupid (struct loop *loop)\n   \n   ok = duplicate_loop_to_header_edge (loop, loop_latch_edge (loop),\n \t\t\t\t      nunroll, wont_exit,\n-\t\t\t\t      NULL, NULL, NULL,\n+\t\t\t\t      NULL, NULL,\n \t\t\t\t      DLTHE_FLAG_UPDATE_FREQ\n \t\t\t\t      | (opt_info\n \t\t\t\t\t ? DLTHE_RECORD_COPY_NUMBER"}, {"sha": "38706d174d87da9270f64f9f7c058a967fdb85b6", "filename": "gcc/loop-unswitch.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8c1b05d53213625231c9df895501823b19d44c/gcc%2Floop-unswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8c1b05d53213625231c9df895501823b19d44c/gcc%2Floop-unswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unswitch.c?ref=ee8c1b05d53213625231c9df895501823b19d44c", "patch": "@@ -410,14 +410,9 @@ unswitch_loop (struct loop *loop, basic_block unswitch_on, rtx cond, rtx cinsn)\n   irred_flag = entry->flags & EDGE_IRREDUCIBLE_LOOP;\n   entry->flags &= ~EDGE_IRREDUCIBLE_LOOP;\n   zero_bitmap = sbitmap_alloc (2);\n-  sbitmap_zero (zero_bitmap);\n   if (!duplicate_loop_to_header_edge (loop, entry, 1,\n-\tzero_bitmap, NULL, NULL, NULL, 0))\n-    {\n-      sbitmap_free (zero_bitmap);\n-      return NULL;\n-    }\n-  sbitmap_free (zero_bitmap);\n+\t\t\t      \t      NULL, NULL, NULL, 0))\n+    return NULL;\n   entry->flags |= irred_flag;\n \n   /* Record the block with condition we unswitch on.  */"}, {"sha": "5f63ba93b01571cd8cbfe452dea7491e3c19ab81", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8c1b05d53213625231c9df895501823b19d44c/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8c1b05d53213625231c9df895501823b19d44c/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=ee8c1b05d53213625231c9df895501823b19d44c", "patch": "@@ -882,8 +882,8 @@ basic_block ip_end_pos (struct loop *);\n basic_block ip_normal_pos (struct loop *);\n bool tree_duplicate_loop_to_header_edge (struct loop *, edge,\n \t\t\t\t\t unsigned int, sbitmap,\n-\t\t\t\t\t edge, edge *,\n-\t\t\t\t\t unsigned int *, int);\n+\t\t\t\t\t edge, VEC (edge, heap) **,\n+\t\t\t\t\t int);\n struct loop *tree_ssa_loop_version (struct loop *, tree,\n \t\t\t\t    basic_block *);\n tree expand_simple_operations (tree);"}, {"sha": "fa92a6898093a0948aa121f234907995f5e42dfe", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8c1b05d53213625231c9df895501823b19d44c/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8c1b05d53213625231c9df895501823b19d44c/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=ee8c1b05d53213625231c9df895501823b19d44c", "patch": "@@ -223,8 +223,6 @@ try_unroll_loop_completely (struct loop *loop,\n   if (n_unroll)\n     {\n       sbitmap wont_exit;\n-      edge *edges_to_remove = XNEWVEC (edge, n_unroll);\n-      unsigned int n_to_remove = 0;\n \n       old_cond = COND_EXPR_COND (cond);\n       COND_EXPR_COND (cond) = dont_exit;\n@@ -237,20 +235,17 @@ try_unroll_loop_completely (struct loop *loop,\n \n       if (!tree_duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n \t\t\t\t\t       n_unroll, wont_exit,\n-\t\t\t\t\t       exit, edges_to_remove,\n-\t\t\t\t\t       &n_to_remove,\n+\t\t\t\t\t       exit, NULL,\n \t\t\t\t\t       DLTHE_FLAG_UPDATE_FREQ\n \t\t\t\t\t       | DLTHE_FLAG_COMPLETTE_PEEL))\n \t{\n \t  COND_EXPR_COND (cond) = old_cond;\n \t  update_stmt (cond);\n           free_original_copy_tables ();\n \t  free (wont_exit);\n-\t  free (edges_to_remove);\n \t  return false;\n \t}\n       free (wont_exit);\n-      free (edges_to_remove);\n       free_original_copy_tables ();\n     }\n   "}, {"sha": "e68ca555166b5a06d96d200a7b9b1529f49dc229", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee8c1b05d53213625231c9df895501823b19d44c/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee8c1b05d53213625231c9df895501823b19d44c/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=ee8c1b05d53213625231c9df895501823b19d44c", "patch": "@@ -562,8 +562,8 @@ copy_phi_node_args (unsigned first_new_block)\n bool\n tree_duplicate_loop_to_header_edge (struct loop *loop, edge e,\n \t\t\t\t    unsigned int ndupl, sbitmap wont_exit,\n-\t\t\t\t    edge orig, edge *to_remove,\n-\t\t\t\t    unsigned int *n_to_remove, int flags)\n+\t\t\t\t    edge orig, VEC (edge, heap) **to_remove,\n+\t\t\t\t    int flags)\n {\n   unsigned first_new_block;\n \n@@ -578,7 +578,7 @@ tree_duplicate_loop_to_header_edge (struct loop *loop, edge e,\n \n   first_new_block = last_basic_block;\n   if (!duplicate_loop_to_header_edge (loop, e, ndupl, wont_exit,\n-\t\t\t\t      orig, to_remove, n_to_remove, flags))\n+\t\t\t\t      orig, to_remove, flags))\n     return false;\n \n   /* Readd the removed phi args for e.  */\n@@ -853,7 +853,7 @@ tree_unroll_loop (struct loop *loop, unsigned factor,\n   sbitmap_ones (wont_exit);\n   ok = tree_duplicate_loop_to_header_edge\n \t  (loop, loop_latch_edge (loop), factor - 1,\n-\t   wont_exit, NULL, NULL, NULL, DLTHE_FLAG_UPDATE_FREQ);\n+\t   wont_exit, exit, NULL, DLTHE_FLAG_UPDATE_FREQ);\n   free (wont_exit);\n   gcc_assert (ok);\n   update_ssa (TODO_update_ssa);"}]}