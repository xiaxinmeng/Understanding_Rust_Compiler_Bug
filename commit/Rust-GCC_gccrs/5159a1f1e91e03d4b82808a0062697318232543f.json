{"sha": "5159a1f1e91e03d4b82808a0062697318232543f", "node_id": "C_kwDOANBUbNoAKDUxNTlhMWYxZTkxZTAzZDRiODI4MDhhMDA2MjY5NzMxODIzMjU0M2Y", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2023-03-14T08:10:35Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2023-03-14T08:10:35Z"}, "message": "Fix overactive sanity check in profile_count::to_sreal_scale\n\nAs discussed in the PR log, profile_count::to_cgraph_frequency was originally\nintended to work across function boundary and has some extra logic and sanity\ncheck for that.  It is used only within single function and with current\nAPI it can not really work well globally, so this patch synchronizes its\nimplementation with probability_in which does similar job but to determine\nrelative probability.\n\ngcc/ChangeLog:\n\n2023-03-14  Jan Hubicka  <hubicka@ucw.cz>\n\n\tPR tree-optimization/106896\n\t* profile-count.cc (profile_count::to_sreal_scale): Synchronize\n\timplementatoin with probability_in; avoid some asserts.", "tree": {"sha": "a428d749546ac50ad08aa387201fdcaba044bf89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a428d749546ac50ad08aa387201fdcaba044bf89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5159a1f1e91e03d4b82808a0062697318232543f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5159a1f1e91e03d4b82808a0062697318232543f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5159a1f1e91e03d4b82808a0062697318232543f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5159a1f1e91e03d4b82808a0062697318232543f/comments", "author": null, "committer": null, "parents": [{"sha": "e17936f842d2885447b6b8b82c2fb9cbf2679d7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e17936f842d2885447b6b8b82c2fb9cbf2679d7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e17936f842d2885447b6b8b82c2fb9cbf2679d7e"}], "stats": {"total": 34, "additions": 11, "deletions": 23}, "files": [{"sha": "16585045f8ea08ca0cafb581103777e08a008fd9", "filename": "gcc/profile-count.cc", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5159a1f1e91e03d4b82808a0062697318232543f/gcc%2Fprofile-count.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5159a1f1e91e03d4b82808a0062697318232543f/gcc%2Fprofile-count.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.cc?ref=5159a1f1e91e03d4b82808a0062697318232543f", "patch": "@@ -325,6 +325,13 @@ profile_count::to_cgraph_frequency (profile_count entry_bb_count) const\n sreal\n profile_count::to_sreal_scale (profile_count in, bool *known) const\n {\n+  if (*this == zero ()\n+      && !(in == zero ()))\n+  {\n+    if (known)\n+      *known = true;\n+    return 0;\n+  }\n   if (!initialized_p () || !in.initialized_p ())\n     {\n       if (known)\n@@ -333,32 +340,13 @@ profile_count::to_sreal_scale (profile_count in, bool *known) const\n     }\n   if (known)\n     *known = true;\n-  /* Watch for cases where one count is IPA and other is not.  */\n-  if (in.ipa ().initialized_p ())\n-    {\n-      gcc_checking_assert (ipa ().initialized_p ());\n-      /* If current count is inter-procedurally 0 and IN is inter-procedurally\n-\t non-zero, return 0.  */\n-      if (in.ipa ().nonzero_p ()\n-\t  && !ipa().nonzero_p ())\n-\treturn 0;\n-    }\n-  else \n-    /* We can handle correctly 0 IPA count within locally estimated\n-       profile, but otherwise we are lost and this should not happen.   */\n-    gcc_checking_assert (!ipa ().initialized_p () || !ipa ().nonzero_p ());\n-  if (*this == zero ())\n-    return 0;\n-  if (m_val == in.m_val)\n+  if (*this == in)\n     return 1;\n   gcc_checking_assert (compatible_p (in));\n-\n+  if (m_val == in.m_val)\n+    return 1;\n   if (!in.m_val)\n-    {\n-      if (!m_val)\n-\treturn 1;\n-      return m_val * 4;\n-    }\n+    return m_val * 4;\n   return (sreal)m_val / (sreal)in.m_val;\n }\n "}]}