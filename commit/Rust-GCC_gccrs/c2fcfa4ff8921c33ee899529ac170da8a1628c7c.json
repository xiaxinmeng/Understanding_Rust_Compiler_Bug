{"sha": "c2fcfa4ff8921c33ee899529ac170da8a1628c7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJmY2ZhNGZmODkyMWMzM2VlODk5NTI5YWMxNzBkYThhMTYyOGM3Yw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2004-05-07T05:38:21Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2004-05-07T05:38:21Z"}, "message": "optabs.h (enum optab_index): Add new OTI_log1p.\n\n\t* optabs.h (enum optab_index): Add new OTI_log1p.\n\t(log1p_optab): Define corresponding macro.\n\t* optabs.c (init_optabs): Initialize log1p_optab.\n\t* genopinit.c (optabs): Implement log1p_optab using log1p?f2\n\tpatterns.\n\t* builtins.c (expand_builtin_mathfn): Handle BUILT_IN_LOG1P{,F,L}\n\tusing log1p_optab.\n\t(expand_builtin): Expand BUILT_IN_LOG1P{,F,L} using\n\texpand_builtin_mathfn if flag_unsafe_math_optimizations is set.\n\n\t* reg-stack.c (subst_stack_regs_pat): Handle UNSPEC_FYL2XP1.\n\n\t* config/i386/i386.c (ix86_emit_i387_log1p): New function.\n\t* config/i386/i386-protos.h (ix86_emit_i387_log1p):\n\tPrototype here.\n\t* config/i386/i386.md (UNSPEC_FYL2XP1): New unspec to represent\n\tx87's fyl2xp1 instruction.\n\t(*fyl2x_xf3): Rename insn definition to fyl2x_xf3.\n\t(fyl2xp1_xf3): New pattern to implement fyl2xp1 x87 instruction.\n\t(log1psf2, log1pdf2, log1pxf2): New expanders to implement log1pf,\n\tlog1p  and log1pl built-ins as inline x87 intrinsics.\n\n\t* testsuite/gcc.dg/builtins-33.c:  Also check log1p*.\n\nFrom-SVN: r81606", "tree": {"sha": "471a2c68d2c2564dfb50adb742590b68eb2cd647", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/471a2c68d2c2564dfb50adb742590b68eb2cd647"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2fcfa4ff8921c33ee899529ac170da8a1628c7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2fcfa4ff8921c33ee899529ac170da8a1628c7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2fcfa4ff8921c33ee899529ac170da8a1628c7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2fcfa4ff8921c33ee899529ac170da8a1628c7c/comments", "author": null, "committer": null, "parents": [{"sha": "61af3d861bbc083c5eede0039a1a2d780b7a3124", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61af3d861bbc083c5eede0039a1a2d780b7a3124", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61af3d861bbc083c5eede0039a1a2d780b7a3124"}], "stats": {"total": 145, "additions": 144, "deletions": 1}, "files": [{"sha": "fd7949157cee752ffe3d33f66267386e6d77a974", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2fcfa4ff8921c33ee899529ac170da8a1628c7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2fcfa4ff8921c33ee899529ac170da8a1628c7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2fcfa4ff8921c33ee899529ac170da8a1628c7c", "patch": "@@ -1,3 +1,27 @@\n+2004-05-07  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* optabs.h (enum optab_index): Add new OTI_log1p.\n+\t(log1p_optab): Define corresponding macro.\n+\t* optabs.c (init_optabs): Initialize log1p_optab.\n+\t* genopinit.c (optabs): Implement log1p_optab using log1p?f2\n+\tpatterns.\n+\t* builtins.c (expand_builtin_mathfn): Handle BUILT_IN_LOG1P{,F,L}\n+\tusing log1p_optab.\n+\t(expand_builtin): Expand BUILT_IN_LOG1P{,F,L} using\n+\texpand_builtin_mathfn if flag_unsafe_math_optimizations is set.\n+\n+\t* reg-stack.c (subst_stack_regs_pat): Handle UNSPEC_FYL2XP1.\n+\n+\t* config/i386/i386.c (ix86_emit_i387_log1p): New function.\n+\t* config/i386/i386-protos.h (ix86_emit_i387_log1p):\n+\tPrototype here.\n+\t* config/i386/i386.md (UNSPEC_FYL2XP1): New unspec to represent\n+\tx87's fyl2xp1 instruction.\n+\t(*fyl2x_xf3): Rename insn definition to fyl2x_xf3.\n+\t(fyl2xp1_xf3): New pattern to implement fyl2xp1 x87 instruction.\n+\t(log1psf2, log1pdf2, log1pxf2): New expanders to implement log1pf,\n+\tlog1p  and log1pl built-ins as inline x87 intrinsics.\n+\n 2004-05-07  Loren James Rittle  <ljrittle@acm.org>\n \n \t* config/alpha/freebsd.h (SUBTARGET_EXTRA_SPECS): Pass -Werror."}, {"sha": "33fca2ab32eaa56ebc6674b86c676863811b3ecd", "filename": "gcc/builtins.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2fcfa4ff8921c33ee899529ac170da8a1628c7c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2fcfa4ff8921c33ee899529ac170da8a1628c7c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c2fcfa4ff8921c33ee899529ac170da8a1628c7c", "patch": "@@ -1624,6 +1624,10 @@ expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n     case BUILT_IN_LOG2F:\n     case BUILT_IN_LOG2L:\n       errno_set = true; builtin_optab = log2_optab; break;\n+    case BUILT_IN_LOG1P:\n+    case BUILT_IN_LOG1PF:\n+    case BUILT_IN_LOG1PL:\n+      errno_set = true; builtin_optab = log1p_optab; break;\n     case BUILT_IN_ASIN:\n     case BUILT_IN_ASINF:\n     case BUILT_IN_ASINL:\n@@ -5322,6 +5326,9 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_LOG2:\n     case BUILT_IN_LOG2F:\n     case BUILT_IN_LOG2L:\n+    case BUILT_IN_LOG1P:\n+    case BUILT_IN_LOG1PF:\n+    case BUILT_IN_LOG1PL:\n     case BUILT_IN_TAN:\n     case BUILT_IN_TANF:\n     case BUILT_IN_TANL:"}, {"sha": "42771f95051a7e688f5c38124908fae4584e4ad9", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2fcfa4ff8921c33ee899529ac170da8a1628c7c/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2fcfa4ff8921c33ee899529ac170da8a1628c7c/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=c2fcfa4ff8921c33ee899529ac170da8a1628c7c", "patch": "@@ -184,6 +184,8 @@ extern void x86_function_profiler (FILE *, int);\n extern void x86_emit_floatuns (rtx [2]);\n extern void ix86_emit_fp_unordered_jump (rtx);\n \n+extern void ix86_emit_i387_log1p (rtx, rtx);\n+\n extern enum rtx_code ix86_reverse_condition (enum rtx_code, enum machine_mode);\n \n #ifdef TREE_CODE"}, {"sha": "0a45e3e95d5453093b165b241129f512e18070b9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2fcfa4ff8921c33ee899529ac170da8a1628c7c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2fcfa4ff8921c33ee899529ac170da8a1628c7c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c2fcfa4ff8921c33ee899529ac170da8a1628c7c", "patch": "@@ -15949,4 +15949,34 @@ ix86_emit_fp_unordered_jump (rtx label)\n   emit_jump_insn (temp);\n }\n \n+/* Output code to perform a log1p XFmode calculation.  */\n+\n+void ix86_emit_i387_log1p (rtx op0, rtx op1)\n+{\n+  rtx label1 = gen_label_rtx ();\n+  rtx label2 = gen_label_rtx ();\n+\n+  rtx tmp = gen_reg_rtx (XFmode);\n+  rtx tmp2 = gen_reg_rtx (XFmode);\n+\n+  emit_insn (gen_absxf2 (tmp, op1));\n+  emit_insn (gen_cmpxf (tmp,\n+    CONST_DOUBLE_FROM_REAL_VALUE (\n+       REAL_VALUE_ATOF (\"0.29289321881345247561810596348408353\", XFmode),\n+       XFmode)));\n+  emit_jump_insn (gen_bge (label1));\n+\n+  emit_move_insn (tmp2, standard_80387_constant_rtx (4)); /* fldln2 */\n+  emit_insn (gen_fyl2xp1_xf3 (op0, tmp2, op1));\n+  emit_jump (label2);\n+\n+  emit_label (label1);\n+  emit_move_insn (tmp, CONST1_RTX (XFmode));\n+  emit_insn (gen_addxf3 (tmp, op1, tmp));\n+  emit_move_insn (tmp2, standard_80387_constant_rtx (4)); /* fldln2 */\n+  emit_insn (gen_fyl2x_xf3 (op0, tmp2, tmp));\n+\n+  emit_label (label2);\n+}\n+     \n #include \"gt-i386.h\""}, {"sha": "b1366799ba301c665dfdd81e4b19a346a90fa584", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2fcfa4ff8921c33ee899529ac170da8a1628c7c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2fcfa4ff8921c33ee899529ac170da8a1628c7c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c2fcfa4ff8921c33ee899529ac170da8a1628c7c", "patch": "@@ -117,6 +117,7 @@\n    ; x87 Floating point\n    (UNSPEC_FPATAN\t\t65)\n    (UNSPEC_FYL2X\t\t66)\n+   (UNSPEC_FYL2XP1\t\t67)\n    (UNSPEC_FRNDINT\t\t68)\n    (UNSPEC_F2XM1\t\t69)\n \n@@ -15628,7 +15629,7 @@\n   emit_move_insn (operands[3], CONST1_RTX (XFmode));  /* fld1 */\n })\n \n-(define_insn \"*fyl2x_xf3\"\n+(define_insn \"fyl2x_xf3\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n         (unspec:XF [(match_operand:XF 2 \"register_operand\" \"0\")\n \t\t    (match_operand:XF 1 \"register_operand\" \"u\")]\n@@ -15808,6 +15809,58 @@\n   emit_move_insn (operands[2], CONST1_RTX (XFmode));  /* fld1 */\n })\n \n+(define_insn \"fyl2xp1_xf3\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+        (unspec:XF [(match_operand:XF 2 \"register_operand\" \"0\")\n+\t\t    (match_operand:XF 1 \"register_operand\" \"u\")]\n+\t           UNSPEC_FYL2XP1))\n+   (clobber (match_scratch:XF 3 \"=1\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+  \"fyl2xp1\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"XF\")])\n+\n+(define_expand \"log1psf2\"\n+  [(use (match_operand:XF 0 \"register_operand\" \"\"))\n+   (use (match_operand:XF 1 \"register_operand\" \"\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx op0 = gen_reg_rtx (XFmode);\n+  rtx op1 = gen_reg_rtx (XFmode);\n+\n+  emit_insn (gen_extendsfxf2 (op1, operands[1]));\n+  ix86_emit_i387_log1p (op0, op1);\n+  emit_insn (gen_truncxfsf2_noop (operands[0], op0));\n+  DONE;\n+})\n+\n+(define_expand \"log1pdf2\"\n+  [(use (match_operand:XF 0 \"register_operand\" \"\"))\n+   (use (match_operand:XF 1 \"register_operand\" \"\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx op0 = gen_reg_rtx (XFmode);\n+  rtx op1 = gen_reg_rtx (XFmode);\n+\n+  emit_insn (gen_extenddfxf2 (op1, operands[1]));\n+  ix86_emit_i387_log1p (op0, op1);\n+  emit_insn (gen_truncxfdf2_noop (operands[0], op0));\n+  DONE;\n+})\n+\n+(define_expand \"log1pxf2\"\n+  [(use (match_operand:XF 0 \"register_operand\" \"\"))\n+   (use (match_operand:XF 1 \"register_operand\" \"\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  ix86_emit_i387_log1p (operands[0], operands[1]);\n+  DONE;\n+})\n+\n (define_insn \"*fxtractxf3\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(unspec:XF [(match_operand:XF 2 \"register_operand\" \"0\")]"}, {"sha": "a7c9f7e56283b6af5a9f2e7e1999bc77703e318b", "filename": "gcc/genopinit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2fcfa4ff8921c33ee899529ac170da8a1628c7c/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2fcfa4ff8921c33ee899529ac170da8a1628c7c/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=c2fcfa4ff8921c33ee899529ac170da8a1628c7c", "patch": "@@ -138,6 +138,7 @@ static const char * const optabs[] =\n   \"log_optab->handlers[$A].insn_code = CODE_FOR_$(log$a2$)\",\n   \"log10_optab->handlers[$A].insn_code = CODE_FOR_$(log10$a2$)\",  \n   \"log2_optab->handlers[$A].insn_code = CODE_FOR_$(log2$a2$)\",  \n+  \"log1p_optab->handlers[$A].insn_code = CODE_FOR_$(log1p$a2$)\",  \n   \"tan_optab->handlers[$A].insn_code = CODE_FOR_$(tan$a2$)\",\n   \"atan_optab->handlers[$A].insn_code = CODE_FOR_$(atan$a2$)\",\n   \"strlen_optab->handlers[$A].insn_code = CODE_FOR_$(strlen$a$)\","}, {"sha": "f89e053c456d975341d86b06942cd98baa94fad8", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2fcfa4ff8921c33ee899529ac170da8a1628c7c/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2fcfa4ff8921c33ee899529ac170da8a1628c7c/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=c2fcfa4ff8921c33ee899529ac170da8a1628c7c", "patch": "@@ -5394,6 +5394,7 @@ init_optabs (void)\n   log_optab = init_optab (UNKNOWN);\n   log10_optab = init_optab (UNKNOWN);\n   log2_optab = init_optab (UNKNOWN);\n+  log1p_optab = init_optab (UNKNOWN);\n   tan_optab = init_optab (UNKNOWN);\n   atan_optab = init_optab (UNKNOWN);\n   strlen_optab = init_optab (UNKNOWN);"}, {"sha": "6fc6c1779e180e5b75511ae87871f957a44a82bc", "filename": "gcc/optabs.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2fcfa4ff8921c33ee899529ac170da8a1628c7c/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2fcfa4ff8921c33ee899529ac170da8a1628c7c/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=c2fcfa4ff8921c33ee899529ac170da8a1628c7c", "patch": "@@ -178,6 +178,8 @@ enum optab_index\n   OTI_log10,\n   /* Base-2 Logarithm */\n   OTI_log2,\n+  /* logarithm of 1 plus argument */\n+  OTI_log1p,\n   /* Rounding functions */\n   OTI_floor,\n   OTI_ceil,\n@@ -294,6 +296,7 @@ extern GTY(()) optab optab_table[OTI_MAX];\n #define log_optab (optab_table[OTI_log])\n #define log10_optab (optab_table[OTI_log10])\n #define log2_optab (optab_table[OTI_log2])\n+#define log1p_optab (optab_table[OTI_log1p])\n #define floor_optab (optab_table[OTI_floor])\n #define ceil_optab (optab_table[OTI_ceil])\n #define btrunc_optab (optab_table[OTI_trunc])"}, {"sha": "8314b21ce3570814091e38d6e4a6b4d34246e288", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2fcfa4ff8921c33ee899529ac170da8a1628c7c/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2fcfa4ff8921c33ee899529ac170da8a1628c7c/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=c2fcfa4ff8921c33ee899529ac170da8a1628c7c", "patch": "@@ -1747,6 +1747,7 @@ subst_stack_regs_pat (rtx insn, stack regstack, rtx pat)\n \n \t      case UNSPEC_FPATAN:\n \t      case UNSPEC_FYL2X:\n+\t      case UNSPEC_FYL2XP1:\n \t\t/* These insns operate on the top two stack slots.  */\n \n \t\tsrc1 = get_true_reg (&XVECEXP (pat_src, 0, 0));"}, {"sha": "c94bb5442cd2d4f316bdc0dd1f23611f8e85fd92", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2fcfa4ff8921c33ee899529ac170da8a1628c7c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2fcfa4ff8921c33ee899529ac170da8a1628c7c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c2fcfa4ff8921c33ee899529ac170da8a1628c7c", "patch": "@@ -1,3 +1,7 @@\n+2004-05-07  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* gcc.dg/builtins-33.c:  Also check log1p*.\n+\n 2004-05-07  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR optimization/15296"}, {"sha": "11393e30089ba95619502f8b7681fb0c45f8e99b", "filename": "gcc/testsuite/gcc.dg/builtins-33.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2fcfa4ff8921c33ee899529ac170da8a1628c7c/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2fcfa4ff8921c33ee899529ac170da8a1628c7c/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-33.c?ref=c2fcfa4ff8921c33ee899529ac170da8a1628c7c", "patch": "@@ -10,10 +10,13 @@\n \n extern double log10(double);\n extern double log2(double);\n+extern double log1p(double);\n extern float log10f(float);\n extern float log2f(float);\n+extern float log1pf(float);\n extern long double log10l(long double);\n extern long double log2l(long double);\n+extern long double log1pl(long double);\n \n \n double test1(double x)\n@@ -26,6 +29,11 @@ double test2(double x)\n   return log2(x);\n }\n \n+double test3(double x)\n+{\n+  return log1p(x);\n+}\n+\n float test1f(float x)\n {\n   return log10f(x);\n@@ -36,6 +44,11 @@ float test2f(float x)\n   return log2f(x);\n }\n \n+float test3f(float x)\n+{\n+  return log1pf(x);\n+}\n+\n long double test1l(long double x)\n {\n   return log10l(x);\n@@ -46,3 +59,7 @@ long double test2l(long double x)\n   return log2l(x);\n }\n \n+long double test3l(long double x)\n+{\n+  return log1pl(x);\n+}"}]}