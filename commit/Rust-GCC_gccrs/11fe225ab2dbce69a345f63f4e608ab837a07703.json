{"sha": "11fe225ab2dbce69a345f63f4e608ab837a07703", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFmZTIyNWFiMmRiY2U2OWEzNDVmNjNmNGU2MDhhYjgzN2EwNzcwMw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-04-25T00:07:07Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-04-25T00:07:07Z"}, "message": "optimize.c: Include hashtab.h.\n\n\t* cp/optimize.c: Include hashtab.h.\n\t(struct inline_data): Add tree_pruner.\n\t(expand_call_inline, expand_calls_inline): Use it when calling\n\twalk_tree.\n\t(optimize_function): Initialize and free tree_pruner.\n\n\t* g++.old-deja/g++.other/perf1.C: New test.\n\nFrom-SVN: r41525", "tree": {"sha": "6ddcc730090f9a47c260cecab3b03657f2ca5830", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ddcc730090f9a47c260cecab3b03657f2ca5830"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11fe225ab2dbce69a345f63f4e608ab837a07703", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11fe225ab2dbce69a345f63f4e608ab837a07703", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11fe225ab2dbce69a345f63f4e608ab837a07703", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11fe225ab2dbce69a345f63f4e608ab837a07703/comments", "author": null, "committer": null, "parents": [{"sha": "5ec89e892cdd8c2d84b71d2e5f0fcc681aaf0b81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ec89e892cdd8c2d84b71d2e5f0fcc681aaf0b81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ec89e892cdd8c2d84b71d2e5f0fcc681aaf0b81"}], "stats": {"total": 133, "additions": 117, "deletions": 16}, "files": [{"sha": "618ba0d7b413d238127ffa271f4777cb849d355b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11fe225ab2dbce69a345f63f4e608ab837a07703/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11fe225ab2dbce69a345f63f4e608ab837a07703/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=11fe225ab2dbce69a345f63f4e608ab837a07703", "patch": "@@ -1,3 +1,11 @@\n+2001-04-24  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* cp/optimize.c: Include hashtab.h.\n+\t(struct inline_data): Add tree_pruner.\n+\t(expand_call_inline, expand_calls_inline): Use it when calling\n+\twalk_tree.\n+\t(optimize_function): Initialize and free tree_pruner.\n+\n 2001-04-24  Nathan Sidwell <nathan@codesourcery.com>\n \n \tLazy __FUNCTION__ generation.\n@@ -54,7 +62,7 @@\n \t* cp-tree.h (finish_enum): Change prototype.\n \t* decl.c (finish_enum): Reorganize.\n \t* parse.y (structsp): Adjust calls to finish_enum.\n-\t\n+\n 2001-04-20  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* tree.c (cp_tree_equal): Adjust final switch formatting. Add\n@@ -99,7 +107,7 @@\n \t* mangle.c (mangle_decl_string): Don't mangle the names of\n \tvariables declared with C language linkage.\n \t* semantics.c (finish_member_declaration): Use SET_DECL_LANGUAGE.\n-\t\n+\n 2001-04-18  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* semantics.c (simplify_aggr_init_exprs_r): Don't restore\n@@ -127,7 +135,7 @@\n \t(expand_ptrmemfunc_cst): Remove idx and delta2 parameters.\n \t(delta2_from_ptrmemfunc): Remove.\n \t(pfn_from_ptrmemfunc): Adjust call to expand_ptrmemfunc_cst.\n-\t\n+\n 2001-04-12  Jason Merrill  <jason_merrill@redhat.com>\n \n \t* cp-tree.h (decl_namespace_list): New macro.\n@@ -140,7 +148,7 @@\n \n \t* cp-tree.h (warn_return_type, yylex): Delete redundant\n \tdeclarations.\n-\t\n+\n \t* decl.c (current_class_depth, global_namespace): Likewise.\n \n \t* decl2.c (current_class_depth, flag_gnu_xref): Likewise\n@@ -223,7 +231,7 @@\n \t(import_export_decl): Likewise.\n \t* method.c (implicitly_declare_fn): Likewise.\n \t* optimize.c (maybe_clone_body): Likewise.\n-\t\n+\n 2001-04-05  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* lang-specs.h: Add __DEPRECATED.\n@@ -251,7 +259,7 @@ Thu Apr  5 16:54:29 2001  J\"orn Rennecke <amylaar@redhat.com>\n \n 2001-04-03  Mark Mitchell  <mark@codesourcery.com>\n \n-\t* decl2.c (import_export_decl): Don't call import_export_class \n+\t* decl2.c (import_export_decl): Don't call import_export_class\n \twhen processing an inline member function.\n \t* semantics.c (expand_body): Call import_export_decl before\n \temitting inline functions.\n@@ -267,7 +275,7 @@ Thu Apr  5 16:54:29 2001  J\"orn Rennecke <amylaar@redhat.com>\n \t(struct cp_language_function): Rename x_eh_spec_try_block\n \tto x_eh_spec_block.\n \t(EH_SPEC_STMTS, EH_SPEC_RAISES): New.\n-\t* decl.c (current_binding_level): If no current function \n+\t* decl.c (current_binding_level): If no current function\n \tbindings, revert to scope_chain.\n \t(initialize_predefined_identifiers): Remove __cp_push_exception.\n \t(store_parm_decls): Use begin_eh_spec_block.\n@@ -374,7 +382,7 @@ Thu Apr  5 16:54:29 2001  J\"orn Rennecke <amylaar@redhat.com>\n \trest_of_compilation.  Clear DECL_RTL for local variables\n \tafterwards.\n \t(clear_decl_rtl): New function.\n-\t\t\n+\n 2001-03-26  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tImplement DR 209\n@@ -444,7 +452,7 @@ Thu Apr  5 16:54:29 2001  J\"orn Rennecke <amylaar@redhat.com>\n \t* tree.c (cp_valid_lang_attribute): Handle \"java_interface\" attribute\n \tby setting TYPE_JAVA_INTERFACE.\n \t* call.c (java_iface_lookup_fn): New static.\n-\t(build_over_call): If calling a method declared in a \n+\t(build_over_call): If calling a method declared in a\n \tTYPE_JAVA_INTERFACE, call build_java_interface_fn_ref to generate the\n \texpression which resolves the function address.\n \t(build_java_interface_fn_ref): New function.\n@@ -577,7 +585,7 @@ Thu Apr  5 16:54:29 2001  J\"orn Rennecke <amylaar@redhat.com>\n \t* search.c (looup_field_1): Likewise.\n \t* semantics.c (finish_named_return_value): Likewise.\n \t* tree.c (init_tree): Set lang_set_decl_assembler_name.\n-\t\n+\n 2001-03-15  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \tCorrect semantics restrictions checking in throw-expression.\n@@ -612,7 +620,7 @@ Thu Apr  5 16:54:29 2001  J\"orn Rennecke <amylaar@redhat.com>\n \t(expand_body): Likewise.\n \t(genrtl_finish_function): Likewise.\n \t* tree.c (cp_tree_equal): Likewise.\n-\t\n+\n 2001-03-12  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* call.c (convert_like_real): Add extra semantics to INNER\n@@ -713,7 +721,7 @@ Thu Apr  5 16:54:29 2001  J\"orn Rennecke <amylaar@redhat.com>\n \t(build_rtt_vtbl_entries): Lose RTTI_BINFO parameter.\n \t(get_matching_base): Remove.\n \t(get_original_base): New function.\n-\t(build_vtbl_initializer): Initialize vid.rtti_binfo. \n+\t(build_vtbl_initializer): Initialize vid.rtti_binfo.\n \tUse a virtual thunk for a ctor vtable with an index\n \t(add_vcall_offset_vtbl_entries_1): Check if binfo has lost a\n \tprimary base within a constructor vtable. Only set\n@@ -729,7 +737,7 @@ Thu Apr  5 16:54:29 2001  J\"orn Rennecke <amylaar@redhat.com>\n 2001-02-26  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* except.c (call_eh_info): Cleanup generation of cp_eh_info struct.\n-\t\n+\n \t* decl.c (mark_inlined_fns): Prototype.\n \n 2001-02-22  Mark Mitchell  <mark@codesourcery.com>"}, {"sha": "096bd5d0d640ad89017c4674484c599fdd9895d8", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11fe225ab2dbce69a345f63f4e608ab837a07703/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11fe225ab2dbce69a345f63f4e608ab837a07703/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=11fe225ab2dbce69a345f63f4e608ab837a07703", "patch": "@@ -31,6 +31,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"varray.h\"\n #include \"ggc.h\"\n #include \"params.h\"\n+#include \"hashtab.h\"\n \n /* To Do:\n \n@@ -80,6 +81,9 @@ typedef struct inline_data\n      distinguish between those two situations.  This flag is true nif\n      we are cloning, rather than inlining.  */\n   bool cloning_p;\n+  /* Hash table used to prevent walk_tree from visiting the same node\n+     umpteen million times.  */\n+  htab_t tree_pruner;\n } inline_data;\n \n /* Prototypes.  */\n@@ -706,7 +710,7 @@ expand_call_inline (tp, walk_subtrees, data)\n \t  if (i == 2)\n \t    ++id->in_target_cleanup_p;\n \t  walk_tree (&TREE_OPERAND (*tp, i), expand_call_inline, data,\n-\t\t     NULL);\n+\t\t     id->tree_pruner);\n \t  if (i == 2)\n \t    --id->in_target_cleanup_p;\n \t}\n@@ -889,8 +893,12 @@ expand_calls_inline (tp, id)\n      inline_data *id;\n {\n   /* Search through *TP, replacing all calls to inline functions by\n-     appropriate equivalents.  */\n-  walk_tree (tp, expand_call_inline, id, NULL);\n+     appropriate equivalents.  Use walk_tree in no-duplicates mode\n+     to avoid exponential time complexity.  (We can't just use\n+     walk_tree_without_duplicates, because of the special TARGET_EXPR\n+     handling in expand_calls.  The hash table is set up in\n+     optimize_function.  */\n+  walk_tree (tp, expand_call_inline, id, id->tree_pruner);\n }\n \n /* Optimize the body of FN.  */\n@@ -949,9 +957,12 @@ optimize_function (fn)\n \n       /* Replace all calls to inline functions with the bodies of those\n \t functions.  */\n+      id.tree_pruner = htab_create (37, htab_hash_pointer,\n+\t\t\t\t    htab_eq_pointer, NULL);\n       expand_calls_inline (&DECL_SAVED_TREE (fn), &id);\n \n       /* Clean up.  */\n+      htab_delete (id.tree_pruner);\n       VARRAY_FREE (id.fns);\n       VARRAY_FREE (id.target_exprs);\n       if (DECL_LANG_SPECIFIC (fn))"}, {"sha": "39abc4e4905814ef83bf90aaa18dbcab4ca0b726", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11fe225ab2dbce69a345f63f4e608ab837a07703/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11fe225ab2dbce69a345f63f4e608ab837a07703/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=11fe225ab2dbce69a345f63f4e608ab837a07703", "patch": "@@ -1,3 +1,7 @@\n+2001-04-24  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* g++.old-deja/g++.other/perf1.C: New test.\n+\n 2001-04-24  Nathan Sidwell <nathan@codesourcery.com>\n \n \t* gcc.dg/c99-func-2.c: Remove xfail."}, {"sha": "3f8981175119251ff8016475ac978c93a5ccc1f3", "filename": "gcc/testsuite/g++.old-deja/g++.other/perf1.C", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11fe225ab2dbce69a345f63f4e608ab837a07703/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fperf1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11fe225ab2dbce69a345f63f4e608ab837a07703/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fperf1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fperf1.C?ref=11fe225ab2dbce69a345f63f4e608ab837a07703", "patch": "@@ -0,0 +1,78 @@\n+// Build don't link:\n+\n+// Test of severe performance regression from 2.95.  This code generates\n+// a heavily self-referential tree which caused the inliner to take\n+// O(3**N) time to scan it for function calls.\n+// Reported by Kelley Cook <kelley.cook@home.com>.  PR c++/1687.\n+\n+bool in0 ;\n+bool in1 ;\n+bool in2 ;\n+bool in3 ;\n+bool in4 ;\n+bool in5 ;\n+bool in6 ;\n+bool in7 ;\n+bool in8 ;\n+bool in9 ;\n+bool in10;\n+bool in11;\n+bool in12;\n+bool in13;\n+bool in14;\n+bool in15;\n+bool in16;\n+bool in17;\n+bool in18;\n+bool in19;\n+bool in20;\n+bool in21;\n+bool in22;\n+bool in23;\n+bool in24;\n+bool in25;\n+bool in26;\n+bool in27;\n+bool in28;\n+bool in29;\n+bool in30;\n+bool in31;\n+unsigned long output;\n+\n+void mux(void)\n+{\n+  output =\n+      (in0   ?  0x00000001 : 0) |\n+      (in1   ?  0x00000002 : 0) |\n+      (in2   ?  0x00000004 : 0) |\n+      (in3   ?  0x00000008 : 0) |\n+      (in4   ?  0x00000010 : 0) |\n+      (in5   ?  0x00000020 : 0) |\n+      (in6   ?  0x00000040 : 0) |\n+      (in7   ?  0x00000080 : 0) |\n+      (in8   ?  0x00000100 : 0) |\n+      (in9   ?  0x00000200 : 0) |\n+      (in10  ?  0x00000400 : 0) |\n+      (in11  ?  0x00000800 : 0) |\n+      (in12  ?  0x00001000 : 0) |\n+      (in13  ?  0x00002000 : 0) |\n+      (in14  ?  0x00004000 : 0) |\n+      (in15  ?  0x00008000 : 0) |\n+      (in16  ?  0x00010000 : 0) |\n+      (in17  ?  0x00020000 : 0) |\n+      (in18  ?  0x00040000 : 0) |\n+      (in19  ?  0x00080000 : 0) |\n+      (in20  ?  0x00100000 : 0) |\n+      (in21  ?  0x00200000 : 0) |\n+      (in22  ?  0x00400000 : 0) |\n+      (in23  ?  0x00800000 : 0) |\n+      (in24  ?  0x01000000 : 0) |\n+      (in25  ?  0x02000000 : 0) |\n+      (in26  ?  0x04000000 : 0) |\n+      (in27  ?  0x08000000 : 0) |\n+      (in28  ?  0x10000000 : 0) |\n+      (in29  ?  0x20000000 : 0) |\n+      (in30  ?  0x40000000 : 0) |\n+      (in31  ?  0x80000000 : 0) ;\n+}\n+"}]}