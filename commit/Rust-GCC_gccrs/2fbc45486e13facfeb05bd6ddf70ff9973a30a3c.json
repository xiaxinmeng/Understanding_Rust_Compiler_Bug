{"sha": "2fbc45486e13facfeb05bd6ddf70ff9973a30a3c", "node_id": "C_kwDOANBUbNoAKDJmYmM0NTQ4NmUxM2ZhY2ZlYjA1YmQ2ZGRmNzBmZjk5NzNhMzBhM2M", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-01-05T14:49:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-01-07T00:24:31Z"}, "message": "c++: keep destroying array after one dtor throws [PR66451]\n\nWhen we're cleaning up an array, if one destructor throws, we should still\ntry to clean up the rest of the array.  We can use TRY_CATCH_EXPR for this,\ninstead of a TARGET_EXPR like my other recent patches, because a destructor\ncall can't involve any temporaries that need to live longer.\n\nI thought about only doing this when we call build_vec_delete_1 from\nbuild_vec_init, but it seems appropriate for delete-expressions as well;\nwe've said that the array's lifetime is over, it makes sense to keep trying\nto destroy it.  The standard isn't clear, but clang seems to agree with me.\n\n\tPR c++/66451\n\ngcc/cp/ChangeLog:\n\n\t* init.c (build_vec_delete_1): Handle throwing dtor.\n\t(build_vec_init): Tell it we're in a cleanup already.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/eh/array3.C: New test.\n\t* g++.dg/eh/array1.C: Mark destructor as throw().\n\t* g++.dg/ipa/devirt-40.C: Likewise.\n\t* g++.dg/warn/pr83054.C: Likewise.\n\t* g++.dg/eh/delete1.C: Shorten array to one element.", "tree": {"sha": "b3e12dc5d275caa8a5c4a443a15353387b867edd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3e12dc5d275caa8a5c4a443a15353387b867edd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fbc45486e13facfeb05bd6ddf70ff9973a30a3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fbc45486e13facfeb05bd6ddf70ff9973a30a3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fbc45486e13facfeb05bd6ddf70ff9973a30a3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fbc45486e13facfeb05bd6ddf70ff9973a30a3c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40140b734487cbe03cd897dca47120317f898004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40140b734487cbe03cd897dca47120317f898004", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40140b734487cbe03cd897dca47120317f898004"}], "stats": {"total": 87, "additions": 81, "deletions": 6}, "files": [{"sha": "df63e618394fa4ed7e54d0571cfc9a1392a30412", "filename": "gcc/cp/init.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fbc45486e13facfeb05bd6ddf70ff9973a30a3c/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fbc45486e13facfeb05bd6ddf70ff9973a30a3c/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=2fbc45486e13facfeb05bd6ddf70ff9973a30a3c", "patch": "@@ -4006,7 +4006,8 @@ build_new (location_t loc, vec<tree, va_gc> **placement, tree type,\n static tree\n build_vec_delete_1 (location_t loc, tree base, tree maxindex, tree type,\n \t\t    special_function_kind auto_delete_vec,\n-\t\t    int use_global_delete, tsubst_flags_t complain)\n+\t\t    int use_global_delete, tsubst_flags_t complain,\n+\t\t    bool in_cleanup = false)\n {\n   tree virtual_size;\n   tree ptype = build_pointer_type (type = complete_type (type));\n@@ -4109,6 +4110,18 @@ build_vec_delete_1 (location_t loc, tree base, tree maxindex, tree type,\n   body = build_compound_expr (loc, body, tmp);\n \n   loop = build1 (LOOP_EXPR, void_type_node, body);\n+\n+  /* If one destructor throws, keep trying to clean up the rest, unless we're\n+     already in a build_vec_init cleanup.  */\n+  if (flag_exceptions && !in_cleanup && !expr_noexcept_p (tmp, tf_none))\n+    {\n+      loop = build2 (TRY_CATCH_EXPR, void_type_node, loop,\n+\t\t     unshare_expr (loop));\n+      /* Tell honor_protect_cleanup_actions to discard this on the\n+\t exceptional path.  */\n+      TRY_CATCH_IS_CLEANUP (loop) = true;\n+    }\n+\n   loop = build_compound_expr (loc, tbase_init, loop);\n \n  no_destructor:\n@@ -4490,7 +4503,8 @@ build_vec_init (tree base, tree maxindex, tree init,\n \n       e = build_vec_delete_1 (input_location, rval, m,\n \t\t\t      inner_elt_type, sfk_complete_destructor,\n-\t\t\t      /*use_global_delete=*/0, complain);\n+\t\t\t      /*use_global_delete=*/0, complain,\n+\t\t\t      /*in_cleanup*/true);\n       if (e == error_mark_node)\n \terrors = true;\n       TARGET_EXPR_CLEANUP (iterator_targ) = e;"}, {"sha": "79d62ad5058366171170c231e65b9462ec5571ec", "filename": "gcc/testsuite/g++.dg/eh/array1.C", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fbc45486e13facfeb05bd6ddf70ff9973a30a3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Farray1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fbc45486e13facfeb05bd6ddf70ff9973a30a3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Farray1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Farray1.C?ref=2fbc45486e13facfeb05bd6ddf70ff9973a30a3c", "patch": "@@ -2,10 +2,16 @@\n // rather than one for each element.\n // { dg-options \"-fdump-tree-gimple\" }\n \n+#if __cplusplus < 201100L\n+#define NOTHROW throw()\n+#else\n+#define NOTHROW noexcept\n+#endif\n+\n struct A\n {\n   A();\n-  ~A();\n+  ~A() NOTHROW;\n };\n \n void f()"}, {"sha": "547541b5dc32589cb163a9617247c63725307508", "filename": "gcc/testsuite/g++.dg/eh/array3.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fbc45486e13facfeb05bd6ddf70ff9973a30a3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Farray3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fbc45486e13facfeb05bd6ddf70ff9973a30a3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Farray3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Farray3.C?ref=2fbc45486e13facfeb05bd6ddf70ff9973a30a3c", "patch": "@@ -0,0 +1,40 @@\n+// PR c++/66451\n+// { dg-do run }\n+\n+#if __cplusplus > 201100L\n+#define THROWING noexcept(false)\n+#else\n+#define THROWING\n+#endif\n+\n+extern \"C\" void abort();\n+\n+int c;\n+struct A\n+{\n+  int a;\n+\n+  A(int new_a) : a(new_a) { ++c; }\n+  A(const A&); // not defined\n+  ~A() THROWING\n+  {\n+    --c;\n+    if(a==4)\n+      throw a;\n+  }\n+};\n+\n+struct B\n+{\n+  A a[2];\n+  ~B() { }\n+};\n+\n+int sink;\n+int main()\n+{\n+  try {\n+    B b = {3,4};\n+  } catch(...) { }\n+  if (c != 0) abort();\n+}"}, {"sha": "92ed646ef2cd9814dead8592b069c707e66dcc69", "filename": "gcc/testsuite/g++.dg/eh/delete1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fbc45486e13facfeb05bd6ddf70ff9973a30a3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fdelete1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fbc45486e13facfeb05bd6ddf70ff9973a30a3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fdelete1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fdelete1.C?ref=2fbc45486e13facfeb05bd6ddf70ff9973a30a3c", "patch": "@@ -69,7 +69,7 @@ int ary ()\n {\n   deleted = 0;\n \n-  Baz *p = new Baz[5];\n+  Baz *p = new Baz[1];\n   try { delete[] p; }\n   catch (...) { return deleted != 1;}\n   return 1;"}, {"sha": "31fe1504cb854efcb5acd0067c8f904624eb6825", "filename": "gcc/testsuite/g++.dg/ipa/devirt-40.C", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fbc45486e13facfeb05bd6ddf70ff9973a30a3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-40.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fbc45486e13facfeb05bd6ddf70ff9973a30a3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-40.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-40.C?ref=2fbc45486e13facfeb05bd6ddf70ff9973a30a3c", "patch": "@@ -1,12 +1,20 @@\n /* { dg-options \"-O2 -fdump-tree-fre3-details\"  } */\n+\n+// A throwing dtor in C++98 mode changes the results.\n+#if __cplusplus < 201100L\n+#define NOTHROW throw()\n+#else\n+#define NOTHROW noexcept\n+#endif\n+\n typedef enum\n {\n } UErrorCode;\n class UnicodeString\n {\n public:\n   UnicodeString ();\n-  virtual ~UnicodeString ();\n+  virtual ~UnicodeString () NOTHROW;\n };\n class A\n {"}, {"sha": "5285f94aceea1e0eb9df83915aa76c6842ba0800", "filename": "gcc/testsuite/g++.dg/warn/pr83054.C", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fbc45486e13facfeb05bd6ddf70ff9973a30a3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr83054.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fbc45486e13facfeb05bd6ddf70ff9973a30a3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr83054.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr83054.C?ref=2fbc45486e13facfeb05bd6ddf70ff9973a30a3c", "patch": "@@ -2,6 +2,13 @@\n // { dg-options \"-O3 -Wsuggest-final-types\" }\n // { dg-do compile }\n \n+// A throwing dtor in C++98 mode changes the warning.\n+#if __cplusplus < 201100L\n+#define NOTHROW throw()\n+#else\n+#define NOTHROW noexcept\n+#endif\n+\n extern \"C\" int printf (const char *, ...);\n struct foo // { dg-warning \"final would enable devirtualization of 5 calls\" }\n {\n@@ -12,7 +19,7 @@ struct foo // { dg-warning \"final would enable devirtualization of 5 calls\" }\n     x = count++;\n     printf(\"this %d = %x\\n\", x, (void *)this);\n   }\n-  virtual ~foo () {\n+  virtual ~foo () NOTHROW {\n     printf(\"this %d = %x\\n\", x, (void *)this);\n     --count;\n   }"}]}