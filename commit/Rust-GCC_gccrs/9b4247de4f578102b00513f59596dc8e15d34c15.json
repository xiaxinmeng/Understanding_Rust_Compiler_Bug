{"sha": "9b4247de4f578102b00513f59596dc8e15d34c15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI0MjQ3ZGU0ZjU3ODEwMmIwMDUxM2Y1OTU5NmRjOGUxNWQzNGMxNQ==", "commit": {"author": {"name": "Sudakshina Das", "email": "sudi.das@arm.com", "date": "2019-01-09T14:08:01Z"}, "committer": {"name": "Sudakshina Das", "email": "sudi@gcc.gnu.org", "date": "2019-01-09T14:08:01Z"}, "message": "[AArch64, 2/6] Add new arch command line feaures from ARMv8.5-A\n\nThis patch is part of a series that enables ARMv8.5-A in GCC and\nadds Branch Target Identification Mechanism.\n\nThis patch add all the command line feature that are added by ARMv8.5.\nOptional extensions to armv8.5-a:\n+rng : Random number Generation Instructions.\n+memtag : Memory Tagging Extension.\n\nARMv8.5-A features that are optional to older arch:\n+sb : Speculation barrier instruction.\n+ssbs: Speculative Store Bypass Safe instruction.\n+predres: Execution and Data Prediction Restriction instructions.\n\nAll of the above only effect the assembler and have already gone in the\ntrunk of binutils.\n\n*** gcc/ChangeLog ***\n\n2018-01-09  Sudakshina Das  <sudi.das@arm.com>\n\n\t* config/aarch64/aarch64-option-extensions.def: Define\n\tAARCH64_OPT_EXTENSION for memtag, rng, sb, ssbs and predres.\n\t* gcc/config/aarch64/aarch64.h (AARCH64_FL_RNG): New.\n\t(AARCH64_FL_MEMTAG, ARCH64_FL_SB, AARCH64_FL_SSBS): New.\n\t(AARCH64_FL_PREDRES): New.\n\t(AARCH64_FL_FOR_ARCH8_5): Add AARCH64_FL_SB, AARCH64_FL_SSBS and\n\tAARCH64_FL_PREDRES by default.\n\t* gcc/doc/invoke.texi: Document rng, memtag, sb, ssbs and predres.\n\nFrom-SVN: r267766", "tree": {"sha": "9c63af8e522587ef6d7deb9d01cc1f7b1a49cc46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c63af8e522587ef6d7deb9d01cc1f7b1a49cc46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b4247de4f578102b00513f59596dc8e15d34c15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4247de4f578102b00513f59596dc8e15d34c15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b4247de4f578102b00513f59596dc8e15d34c15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4247de4f578102b00513f59596dc8e15d34c15/comments", "author": {"login": "sudakshina-das-arm", "id": 28538945, "node_id": "MDQ6VXNlcjI4NTM4OTQ1", "avatar_url": "https://avatars.githubusercontent.com/u/28538945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sudakshina-das-arm", "html_url": "https://github.com/sudakshina-das-arm", "followers_url": "https://api.github.com/users/sudakshina-das-arm/followers", "following_url": "https://api.github.com/users/sudakshina-das-arm/following{/other_user}", "gists_url": "https://api.github.com/users/sudakshina-das-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/sudakshina-das-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sudakshina-das-arm/subscriptions", "organizations_url": "https://api.github.com/users/sudakshina-das-arm/orgs", "repos_url": "https://api.github.com/users/sudakshina-das-arm/repos", "events_url": "https://api.github.com/users/sudakshina-das-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/sudakshina-das-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "59beeb623e5cba29105b046ff4196b7d051b69ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59beeb623e5cba29105b046ff4196b7d051b69ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59beeb623e5cba29105b046ff4196b7d051b69ec"}], "stats": {"total": 62, "additions": 61, "deletions": 1}, "files": [{"sha": "99f9022744919c0bddde94da75753fd736eec07c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4247de4f578102b00513f59596dc8e15d34c15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4247de4f578102b00513f59596dc8e15d34c15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b4247de4f578102b00513f59596dc8e15d34c15", "patch": "@@ -1,3 +1,14 @@\n+2018-01-09  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* config/aarch64/aarch64-option-extensions.def: Define\n+\tAARCH64_OPT_EXTENSION for memtag, rng, sb, ssbs and predres.\n+\t* gcc/config/aarch64/aarch64.h (AARCH64_FL_RNG): New.\n+\t(AARCH64_FL_MEMTAG, ARCH64_FL_SB, AARCH64_FL_SSBS): New.\n+\t(AARCH64_FL_PREDRES): New.\n+\t(AARCH64_FL_FOR_ARCH8_5): Add AARCH64_FL_SB, AARCH64_FL_SSBS and\n+\tAARCH64_FL_PREDRES by default.\n+\t* gcc/doc/invoke.texi: Document rng, memtag, sb, ssbs and predres.\n+\n 2018-01-09  Sudakshina Das  <sudi.das@arm.com>\n \n \t* config/aarch64/aarch64-arches.def: Define AARCH64_ARCH for"}, {"sha": "2879e35cf2d41d96cb41bb3edd82c0f50091b077", "filename": "gcc/config/aarch64/aarch64-option-extensions.def", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4247de4f578102b00513f59596dc8e15d34c15/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4247de4f578102b00513f59596dc8e15d34c15/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def?ref=9b4247de4f578102b00513f59596dc8e15d34c15", "patch": "@@ -108,4 +108,19 @@ AARCH64_OPT_EXTENSION(\"sve\", AARCH64_FL_SVE, AARCH64_FL_FP | AARCH64_FL_SIMD | A\n /* Enabling/Disabling \"profile\" does not enable/disable any other feature.  */\n AARCH64_OPT_EXTENSION(\"profile\", AARCH64_FL_PROFILE, 0, 0, \"\")\n \n+/* Enabling/Disabling \"rng\" only changes \"rng\".  */\n+AARCH64_OPT_EXTENSION(\"rng\", AARCH64_FL_RNG, 0, 0, \"\")\n+\n+/* Enabling/Disabling \"memtag\" only changes \"memtag\".  */\n+AARCH64_OPT_EXTENSION(\"memtag\", AARCH64_FL_MEMTAG, 0, 0, \"\")\n+\n+/* Enabling/Disabling \"sb\" only changes \"sb\".  */\n+AARCH64_OPT_EXTENSION(\"sb\", AARCH64_FL_SB, 0, 0, \"\")\n+\n+/* Enabling/Disabling \"ssbs\" only changes \"ssbs\".  */\n+AARCH64_OPT_EXTENSION(\"ssbs\", AARCH64_FL_SSBS, 0, 0, \"\")\n+\n+/* Enabling/Disabling \"predres\" only changes \"predres\".  */\n+AARCH64_OPT_EXTENSION(\"predres\", AARCH64_FL_PREDRES, 0, 0, \"\")\n+\n #undef AARCH64_OPT_EXTENSION"}, {"sha": "10e73bb1224dff6903d04fa67a71dce99325da25", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4247de4f578102b00513f59596dc8e15d34c15/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4247de4f578102b00513f59596dc8e15d34c15/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=9b4247de4f578102b00513f59596dc8e15d34c15", "patch": "@@ -179,6 +179,18 @@ extern unsigned aarch64_architecture_version;\n \n /* ARMv8.5-A architecture extensions.  */\n #define AARCH64_FL_V8_5\t      (1 << 22)  /* Has ARMv8.5-A features.  */\n+#define AARCH64_FL_RNG\t      (1 << 23)  /* ARMv8.5-A Random Number Insns.  */\n+#define AARCH64_FL_MEMTAG     (1 << 24)  /* ARMv8.5-A Memory Tagging\n+\t\t\t\t\t    Extensions.  */\n+\n+/* Speculation Barrier instruction supported.  */\n+#define AARCH64_FL_SB\t      (1 << 25)\n+\n+/* Speculative Store Bypass Safe instruction supported.  */\n+#define AARCH64_FL_SSBS\t      (1 << 26)\n+\n+/* Execution and Data Prediction Restriction instructions supported.  */\n+#define AARCH64_FL_PREDRES    (1 << 27)\n \n /* Has FP and SIMD.  */\n #define AARCH64_FL_FPSIMD     (AARCH64_FL_FP | AARCH64_FL_SIMD)\n@@ -199,7 +211,8 @@ extern unsigned aarch64_architecture_version;\n   (AARCH64_FL_FOR_ARCH8_3 | AARCH64_FL_V8_4 | AARCH64_FL_F16FML \\\n    | AARCH64_FL_DOTPROD | AARCH64_FL_RCPC8_4)\n #define AARCH64_FL_FOR_ARCH8_5\t\t\t\\\n-  (AARCH64_FL_FOR_ARCH8_4 | AARCH64_FL_V8_5)\n+  (AARCH64_FL_FOR_ARCH8_4 | AARCH64_FL_V8_5\t\\\n+   | AARCH64_FL_SB | AARCH64_FL_SSBS | AARCH64_FL_PREDRES)\n \n /* Macros to test ISA flags.  */\n "}, {"sha": "c7c80f73012d0691df16fcea1605550f7e7b6fe8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4247de4f578102b00513f59596dc8e15d34c15/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4247de4f578102b00513f59596dc8e15d34c15/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9b4247de4f578102b00513f59596dc8e15d34c15", "patch": "@@ -15836,6 +15836,27 @@ Use of this option with architectures prior to Armv8.2-A is not supported.\n @item profile\n Enable the Statistical Profiling extension.  This option is only to enable the\n extension at the assembler level and does not affect code generation.\n+@item rng\n+Enable the Armv8.5-a Random Number instructions.  This option is only to\n+enable the extension at the assembler level and does not affect code\n+generation.\n+@item memtag\n+Enable the Armv8.5-a Memory Tagging Extensions.  This option is only to\n+enable the extension at the assembler level and does not affect code\n+generation.\n+@item sb\n+Enable the Armv8-a Speculation Barrier instruction.  This option is only to\n+enable the extension at the assembler level and does not affect code\n+generation.  This option is enabled by default for @option{-march=armv8.5-a}.\n+@item ssbs\n+Enable the Armv8-a Speculative Store Bypass Safe instruction.  This option\n+is only to enable the extension at the assembler level and does not affect code\n+generation.  This option is enabled by default for @option{-march=armv8.5-a}.\n+@item predres\n+Enable the Armv8-a Execution and Data Prediction Restriction instructions.\n+This option is only to enable the extension at the assembler level and does\n+not affect code generation.  This option is enabled by default for\n+@option{-march=armv8.5-a}.\n \n @end table\n "}]}