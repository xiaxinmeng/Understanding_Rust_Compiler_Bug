{"sha": "0f50f6daa140186a048cbf33f54f4591eabf5f12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY1MGY2ZGFhMTQwMTg2YTA0OGNiZjMzZjU0ZjQ1OTFlYWJmNWYxMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-11T19:46:59Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-11T20:18:11Z"}, "message": "c++: tree walk into TYPENAME_TYPE.\n\nWhile looking at 92583/92654 it occurred to me that typename types needed\nthe same fix.  So extract_locals_r also needs to see the TYPE_CONTEXT of a\nTYPENAME_TYPE.  But it must not look through a typedef.\n\nMost tree walking in the front end wants to walk through the syntactic form\nof a type of expression, and doesn't care about the type referred to by a\ntypedef.  But min_vis_r does care.\n\ngcc/cp/ChangeLog\n2020-05-11  Jason Merrill  <jason@redhat.com>\n\n\tPR c++/92583\n\tPR c++/92654\n\t* tree.c (cp_walk_subtrees): Stop at typedefs.\n\tHandle TYPENAME_TYPE here.\n\t* pt.c (find_parameter_packs_r): Not here.\n\t(for_each_template_parm_r): Clear *walk_subtrees.\n\t* decl2.c (min_vis_r): Look through typedefs.", "tree": {"sha": "8f6ef8ad0d40a14488583b05c26a12f7fe23a7ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f6ef8ad0d40a14488583b05c26a12f7fe23a7ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f50f6daa140186a048cbf33f54f4591eabf5f12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f50f6daa140186a048cbf33f54f4591eabf5f12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f50f6daa140186a048cbf33f54f4591eabf5f12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f50f6daa140186a048cbf33f54f4591eabf5f12/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42e9f80bf4f6a38733c221c03a512c432cdb784f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42e9f80bf4f6a38733c221c03a512c432cdb784f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42e9f80bf4f6a38733c221c03a512c432cdb784f"}], "stats": {"total": 68, "additions": 46, "deletions": 22}, "files": [{"sha": "5195a0a043f9426e03ff30a7cda5b993400a027a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f50f6daa140186a048cbf33f54f4591eabf5f12/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f50f6daa140186a048cbf33f54f4591eabf5f12/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0f50f6daa140186a048cbf33f54f4591eabf5f12", "patch": "@@ -1,3 +1,13 @@\n+2020-05-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/92583\n+\tPR c++/92654\n+\t* tree.c (cp_walk_subtrees): Stop at typedefs.\n+\tHandle TYPENAME_TYPE here.\n+\t* pt.c (find_parameter_packs_r): Not here.\n+\t(for_each_template_parm_r): Clear *walk_subtrees.\n+\t* decl2.c (min_vis_r): Look through typedefs.\n+\n 2020-05-11  Jason Merrill  <jason@redhat.com>\n \n \t* call.c (implicit_conversion_error): Split out from..."}, {"sha": "4767d53adef375aef260be96c968ee09d281d23a", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f50f6daa140186a048cbf33f54f4591eabf5f12/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f50f6daa140186a048cbf33f54f4591eabf5f12/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=0f50f6daa140186a048cbf33f54f4591eabf5f12", "patch": "@@ -2328,26 +2328,30 @@ static tree\n min_vis_r (tree *tp, int *walk_subtrees, void *data)\n {\n   int *vis_p = (int *)data;\n+  int this_vis = VISIBILITY_DEFAULT;\n   if (! TYPE_P (*tp))\n+    *walk_subtrees = 0;\n+  else if (typedef_variant_p (*tp))\n+    /* Look through typedefs despite cp_walk_subtrees.  */\n+    this_vis = type_visibility (DECL_ORIGINAL_TYPE (TYPE_NAME (*tp)));\n+  else if (OVERLOAD_TYPE_P (*tp)\n+\t   && !TREE_PUBLIC (TYPE_MAIN_DECL (*tp)))\n     {\n+      this_vis = VISIBILITY_ANON;\n       *walk_subtrees = 0;\n     }\n-  else if (OVERLOAD_TYPE_P (*tp)\n-\t   && !TREE_PUBLIC (TYPE_MAIN_DECL (*tp)))\n+  else if (CLASS_TYPE_P (*tp))\n     {\n-      *vis_p = VISIBILITY_ANON;\n-      return *tp;\n+      this_vis = CLASSTYPE_VISIBILITY (*tp);\n+      *walk_subtrees = 0;\n     }\n-  else if (CLASS_TYPE_P (*tp)\n-\t   && CLASSTYPE_VISIBILITY (*tp) > *vis_p)\n-    *vis_p = CLASSTYPE_VISIBILITY (*tp);\n   else if (TREE_CODE (*tp) == ARRAY_TYPE\n \t   && uses_template_parms (TYPE_DOMAIN (*tp)))\n-    {\n-      int evis = expr_visibility (TYPE_MAX_VALUE (TYPE_DOMAIN (*tp)));\n-      if (evis > *vis_p)\n-\t*vis_p = evis;\n-    }\n+    this_vis = expr_visibility (TYPE_MAX_VALUE (TYPE_DOMAIN (*tp)));\n+\n+  if (this_vis > *vis_p)\n+    *vis_p = this_vis;\n+\n   return NULL;\n }\n "}, {"sha": "86f1bb7470df0ddb3efafb61d3ab8c7910ba0b2d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f50f6daa140186a048cbf33f54f4591eabf5f12/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f50f6daa140186a048cbf33f54f4591eabf5f12/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=0f50f6daa140186a048cbf33f54f4591eabf5f12", "patch": "@@ -3963,12 +3963,6 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n \t\t    &find_parameter_packs_r, ppd, ppd->visited);\n       return NULL_TREE;\n \n-    case TYPENAME_TYPE:\n-      cp_walk_tree (&TYPENAME_TYPE_FULLNAME (t), &find_parameter_packs_r,\n-                   ppd, ppd->visited);\n-      *walk_subtrees = 0;\n-      return NULL_TREE;\n-\n     case TYPE_PACK_EXPANSION:\n     case EXPR_PACK_EXPANSION:\n       *walk_subtrees = 0;\n@@ -10321,6 +10315,7 @@ for_each_template_parm_r (tree *tp, int *walk_subtrees, void *d)\n       /* A template-id in a TYPENAME_TYPE might be a deduced context after\n \t partial instantiation.  */\n       WALK_SUBTREE (TYPENAME_TYPE_FULLNAME (t));\n+      *walk_subtrees = 0;\n       break;\n \n     case CONSTRUCTOR:"}, {"sha": "d526a6311e06c60d205d75e300cc0bd5622f778b", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f50f6daa140186a048cbf33f54f4591eabf5f12/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f50f6daa140186a048cbf33f54f4591eabf5f12/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=0f50f6daa140186a048cbf33f54f4591eabf5f12", "patch": "@@ -5006,9 +5006,18 @@ cp_walk_subtrees (tree *tp, int *walk_subtrees_p, walk_tree_fn func,\n   while (0)\n \n   if (TYPE_P (*tp))\n-    /* Walk into template args without looking through typedefs.  */\n-    if (tree ti = TYPE_TEMPLATE_INFO_MAYBE_ALIAS (*tp))\n-      WALK_SUBTREE (TI_ARGS (ti));\n+    {\n+      /* Walk into template args without looking through typedefs.  */\n+      if (tree ti = TYPE_TEMPLATE_INFO_MAYBE_ALIAS (*tp))\n+\tWALK_SUBTREE (TI_ARGS (ti));\n+      /* Don't look through typedefs; walk_tree_fns that want to look through\n+\t typedefs (like min_vis_r) need to do that themselves.  */\n+      if (typedef_variant_p (*tp))\n+\t{\n+\t  *walk_subtrees_p = 0;\n+\t  return NULL_TREE;\n+\t}\n+    }\n \n   /* Not one of the easy cases.  We must explicitly go through the\n      children.  */\n@@ -5021,14 +5030,19 @@ cp_walk_subtrees (tree *tp, int *walk_subtrees_p, walk_tree_fn func,\n     case UNBOUND_CLASS_TEMPLATE:\n     case TEMPLATE_PARM_INDEX:\n     case TEMPLATE_TYPE_PARM:\n-    case TYPENAME_TYPE:\n     case TYPEOF_TYPE:\n     case UNDERLYING_TYPE:\n       /* None of these have subtrees other than those already walked\n \t above.  */\n       *walk_subtrees_p = 0;\n       break;\n \n+    case TYPENAME_TYPE:\n+      WALK_SUBTREE (TYPE_CONTEXT (*tp));\n+      WALK_SUBTREE (TYPENAME_TYPE_FULLNAME (*tp));\n+      *walk_subtrees_p = 0;\n+      break;\n+\n     case BASELINK:\n       if (BASELINK_QUALIFIED_P (*tp))\n \tWALK_SUBTREE (BINFO_TYPE (BASELINK_ACCESS_BINFO (*tp)));"}, {"sha": "fa9a4b6d8c0034ac533d2f25126b08ccac43dbbb", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if-lambda3.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f50f6daa140186a048cbf33f54f4591eabf5f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if-lambda3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f50f6daa140186a048cbf33f54f4591eabf5f12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if-lambda3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if-lambda3.C?ref=0f50f6daa140186a048cbf33f54f4591eabf5f12", "patch": "@@ -18,6 +18,7 @@ template <auto l, typename j> void m(j f) {\n template <int, int c> void o() {\n   auto p = [](auto i) {\n     if constexpr (a<i>{}) ;\n+    if constexpr (typename a<i>::t{});\t// { dg-error \"\" }\n   };\n   m<c>(p);\n }"}]}