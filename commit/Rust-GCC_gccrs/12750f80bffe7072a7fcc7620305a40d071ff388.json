{"sha": "12750f80bffe7072a7fcc7620305a40d071ff388", "node_id": "C_kwDOANBUbNoAKDEyNzUwZjgwYmZmZTcwNzJhN2ZjYzc2MjAzMDVhNDBkMDcxZmYzODg", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-05-20T00:16:32Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-05-20T00:16:32Z"}, "message": "Daily bump.", "tree": {"sha": "f66be2ef44d26e29f1b1daaa16bab835bd4810e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f66be2ef44d26e29f1b1daaa16bab835bd4810e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12750f80bffe7072a7fcc7620305a40d071ff388", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12750f80bffe7072a7fcc7620305a40d071ff388", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12750f80bffe7072a7fcc7620305a40d071ff388", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12750f80bffe7072a7fcc7620305a40d071ff388/comments", "author": null, "committer": null, "parents": [{"sha": "6f038efd93593da6e661b829d1bd3877e75550f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f038efd93593da6e661b829d1bd3877e75550f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f038efd93593da6e661b829d1bd3877e75550f1"}], "stats": {"total": 463, "additions": 462, "deletions": 1}, "files": [{"sha": "bb3fd55e9b9ac12f1011518c6f53fb450bb7cbaf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12750f80bffe7072a7fcc7620305a40d071ff388/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12750f80bffe7072a7fcc7620305a40d071ff388/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12750f80bffe7072a7fcc7620305a40d071ff388", "patch": "@@ -1,3 +1,58 @@\n+2022-05-19  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR middle-end/98865\n+\t* expr.cc (expand_expr_real_2) [MULT_EXPR]:  Expand X*Y as X&Y\n+\twhen both X and Y are [0, 1], X*Y as X&-Y when Y is [0,1] and\n+\tlikewise X*Y as -X&Y when X is [0,1] using tree_nonzero_bits.\n+\n+2022-05-19  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000-builtins.def: Rephrase\n+\tto remove RS6000_BTC_SPECIAL from comment.\n+\t* config/rs6000/rs6000.h (RS6000_BTC_UNARY, RS6000_BTC_BINARY,\n+\tRS6000_BTC_TERNARY, RS6000_BTC_QUATERNARY,\n+\tRS6000_BTC_QUINARY, RS6000_BTC_SENARY, RS6000_BTC_OPND_MASK,\n+\tRS6000_BTC_SPECIAL, RS6000_BTC_PREDICATE, RS6000_BTC_ABS,\n+\tRS6000_BTC_DST, RS6000_BTC_TYPE_MASK, RS6000_BTC_MISC,\n+\tRS6000_BTC_CONST, RS6000_BTC_PURE, RS6000_BTC_FP,\n+\tRS6000_BTC_QUAD, RS6000_BTC_PAIR, RS6000_BTC_QUADPAIR,\n+\tRS6000_BTC_ATTR_MASK, RS6000_BTC_SPR, RS6000_BTC_VOID,\n+\tRS6000_BTC_CR, RS6000_BTC_OVERLOADED, RS6000_BTC_GIMPLE,\n+\tRS6000_BTC_MISC_MASK, RS6000_BTC_MEM, RS6000_BTC_SAT,\n+\tRS6000_BTM_ALWAYS): Delete.\n+\n+2022-05-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* omp-expand.cc (expand_omp_atomic_cas): Do not short-cut\n+\tcomputation of the new value.\n+\n+2022-05-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-pre.cc (get_or_alloc_expression_id): Remove.\n+\t(add_to_value): Use get_expression_id.\n+\t(bitmap_insert_into_set): Likewise.\n+\t(bitmap_value_insert_into_set): Likewise.\n+\n+2022-05-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* doc/invoke.texi (-fanalyzer-checker=): Add\n+\t-Wanalyzer-va-list-leak and -Wanalyzer-va-list-use-after-va-end to\n+\tthe list of analyzer warnings disabled by\n+\t-fanalyzer-checker=taint.\n+\n+2022-05-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/105630\n+\t* cfgexpand.cc (expand_debug_expr): For VAR_DECL, punt for\n+\tglobal vars without symtab node even when they have DECL_RTL\n+\tset.\n+\n+2022-05-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/105635\n+\t* pointer-query.cc (gimple_parm_array_size): Return NULL if var\n+\tdoesn't have pointer or reference type.\n+\n 2022-05-18  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/105131"}, {"sha": "dc35e2277dbd044cc9e3e303dbac99021767be72", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12750f80bffe7072a7fcc7620305a40d071ff388/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12750f80bffe7072a7fcc7620305a40d071ff388/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=12750f80bffe7072a7fcc7620305a40d071ff388", "patch": "@@ -1 +1 @@\n-20220519\n+20220520"}, {"sha": "0a766f2eba259ab09ca491c920405c95a58e91fe", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 316, "deletions": 0, "changes": 316, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12750f80bffe7072a7fcc7620305a40d071ff388/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12750f80bffe7072a7fcc7620305a40d071ff388/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=12750f80bffe7072a7fcc7620305a40d071ff388", "patch": "@@ -1,3 +1,319 @@\n+2022-05-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.cc (gnat_to_gnu_entity) <E_Constant>: Deal with\n+\ta constant related to a return in a function specially.\n+\t* gcc-interface/trans.cc (Call_to_gnu): Use return slot optimization\n+\tif the target is a return object.\n+\t(gnat_to_gnu) <N_Object_Declaration>: Deal with a constant related\n+\tto a return in a function specially.\n+\n+2022-05-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.cc (gnat_pushdecl): Also set TREE_NO_WARNING\n+\ton the decl if Comes_From_Source is false for the associated node.\n+\n+2022-05-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.cc (gnat_gimplify_expr): Tidy up.\n+\n+2022-05-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.cc (gnat_to_gnu_entity) <E_Function>: Also call\n+\tprocess_attributes for built-in functions.\n+\t(prepend_one_attribute_pragma): Deal with \"simd\" attribute.\n+\t* gcc-interface/utils.cc (handle_simd_attribute): New function.\n+\t(gnat_internal_attribute_table): Add entry for \"simd\" attribute.\n+\n+2022-05-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.cc (components_to_record): Use NULL recursively\n+\tas P_GNU_REP_LIST for the innermost variant level in the unchecked\n+\tunion case with a fixed part.\n+\n+2022-05-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.cc (gnat_to_gnu): Do not set Current_Error_Node\n+\tto a node without location.\n+\n+2022-05-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.cc (gnat_to_gnu_entity) <E_Access_Subtype>: And\n+\tskip the elaboration of the designated subtype when that of its base\n+\ttype has been delayed.\n+\n+2022-05-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.cc (gnat_to_gnu_entity) <E_Record_Subtype>: If\n+\tit is a special subtype designated by an access subtype, then defer\n+\tthe completion of incomplete types.\n+\n+2022-05-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/ada-tree.h, gcc-interface/ada.h,\n+\tgcc-interface/gadaint.h, gcc-interface/targtyps.cc: Adjust\n+\tcopyright line.\n+\n+2022-05-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.cc (unchecked_convert): Do not fold a string\n+\tconstant if the target type is pointer to character.\n+\n+2022-05-19  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Remove redundant call to\n+\tSet_Error_Posted.\n+\n+2022-05-19  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch8.adb (Find_Expanded_Name): Emit a main error message\n+\tbefore adding a continuation with the call to\n+\tError_Missing_With_Of_Known_Unit.\n+\n+2022-05-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_util.ads (Requires_Transient_Scope): Add pragma Inline.\n+\n+2022-05-19  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_ch13.adb (Build_Predicate_Functions): If a semantic error\n+\thas been detected then ignore Predicate_Failure aspect\n+\tspecifications in the same way as is done for CodePeer and\n+\tSPARK. This avoids an internal compiler error if\n+\tAncestor_Predicate_Function_Called is True but Result_Expr is\n+\tnot an N_And_Then node (and is therefore unsuitable as an\n+\targument in a call to Left_Opnd).\n+\n+2022-05-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch7.adb (Wrap_Transient_Declaration): Propagate Uses_Sec_Stack\n+\tto enclosing function if it does not return on the secondary stack.\n+\t* exp_ch6.adb (Expand_Call_Helper): Call Establish_Transient_Scope\n+\twith Manage_Sec_Stack set to True only when necessary.\n+\t* sem_res.adb (Resolve_Call): Likewise.\n+\t(Resolve_Entry_Call): Likewise.\n+\n+2022-05-19  Daniel Mercier  <mercier@adacore.com>\n+\n+\t* sem_ch13.adb (Build_Predicate_Function): Ignore predicate\n+\tfailure in CodePeer mode.\n+\n+2022-05-19  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* raise-gcc.c: Fix compilation with -DSTANDALONE under windows.\n+\n+2022-05-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch4.adb (Narrow_Large_Operation): Preserve and reuse Etype.\n+\n+2022-05-19  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_attr.adb (Add_Implicit_Interface_Type_Conversion): New\n+\tsubprogram which factorizes code.\n+\t(Expand_N_Attribute_Reference): Call the new subprogram to add\n+\tthe missing implicit interface type conversion.\n+\n+2022-05-19  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch13.adb (Build_Predicate_Function): Ignore predicate\n+\tfailure in GNATprove mode.\n+\n+2022-05-19  Steve Baird  <baird@adacore.com>\n+\n+\t* einfo-utils.ads, einfo-utils.adb: Delete Predicate_Function_M\n+\tfunction and Set_Predicate_Function_M procedure.\n+\t* einfo.ads: Delete comments for Is_Predicate_Function_M and\n+\tPredicate_Function_M functions. Add comment for new\n+\tPredicate_Expression function. Update comment describing\n+\tpredicate functions.\n+\t* exp_util.ads, exp_util.adb (Make_Predicate_Call): Replace Mem\n+\tformal parameter with Static_Mem and Dynamic_Mem formals.\n+\t(Make_Predicate_Check): Delete Add_Failure_Expression and call\n+\tto it.\n+\t* exp_ch4.adb (Expand_N_In.Predicate_Check): Update\n+\tMake_Predicate_Call call to match profile change.\n+\t* gen_il-fields.ads: Delete Is_Predicate_Function_M field, add\n+\tPredicate_Expression field.\n+\t* gen_il-gen-gen_entities.adb: Delete Is_Predicate_Function_M\n+\tuse, add Predicate_Expression use.\n+\t* sem_ch13.adb (Build_Predicate_Functions): Rename as singular,\n+\tnot plural; we no longer build a Predicate_M function. Delete\n+\tPredicate_M references. Add new Boolean parameter for predicate\n+\tfunctions when needed. Restructure body of generated predicate\n+\tfunctions to implement required Predicate_Failure behavior and\n+\tto set new Predicate_Expression attribute. Remove special\n+\ttreatment of raise expressions within predicate expressions.\n+\t* sem_util.ads (Predicate_Failure_Expression,\n+\tPredicate_Function_Needs_Membership_Parameter): New functions.\n+\t* sem_util.adb (Is_Current_Instance): Fix bugs which caused\n+\twrong result.\n+\t(Is_Current_Instance_Reference_In_Type_Aspect): Delete\n+\tIs_Predicate_Function_M reference.\n+\t(Predicate_Failure_Expression): New function.\n+\t(Propagate_Predicate_Attributes): Delete Is_Predicate_Function_M\n+\treferences.\n+\n+2022-05-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Call_Helper): Adjust comment.\n+\t(Expand_Simple_Function_Return): For the case of a type which needs\n+\tfinalization and is returned on the primary stack, do not create a\n+\tcopy if the expression originates from a function call.\n+\t* exp_ch7.adb (Transient Scope Management): Adjust comment.\n+\t* exp_util.ads (Is_Related_To_Func_Return): Add WARNING line.\n+\t* fe.h (Is_Related_To_Func_Return): Declare.\n+\n+2022-05-19  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch9.adb (Build_Find_Body_Index): Remove empty Elsif_Parts\n+\tfrom the constructed IF statement.\n+\n+2022-05-19  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch9.adb (Build_Find_Body_Index): Remove IF statement whose\n+\tcondition was true-by-construction; remove excessive assertion\n+\t(since the call to Elsif_Parts will check that Nod is present\n+\tand it is an if-statement).\n+\n+2022-05-19  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat1drv.adb, gnatcmd.adb: Remove references to gnatfind/xref.\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst,\n+\tdoc/gnat_ugn/the_gnat_compilation_model.rst: Ditto.\n+\t* gnat_ugn.texi: Regenerate.\n+\t* gnatfind.adb, gnatxref.adb, xr_tabls.adb, xr_tabls.ads,\n+\txref_lib.adb, xref_lib.ads: Removed, no longer used.\n+\n+2022-05-19  Claire Dross  <dross@adacore.com>\n+\n+\t* libgnat/a-strfix.adb: Add assertions.\n+\t* libgnat/a-strsup.adb: Idem.\n+\n+2022-05-19  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* erroutc.ads: Fix a single-character typo in a comment.\n+\t* exp_aggr.adb: Fix a single-character typo in a comment.\n+\tReplace several pairs of calls to Low_Bound and\n+\tHigh_Bound (which do not handle an identifier that denotes a\n+\tscalar subtype) with corresponding calls to Get_Index_Bounds\n+\t(which does handle that case).\n+\t* par-ch4.adb (P_Aggregate_Or_Paren_Expr): Set the\n+\tComponent_Associations attribute of a null array aggregate to\n+\tNew_List.\n+\t* sem_aggr.ads: New visible function\n+\tIs_Null_Array_Aggregate_High_Bound.\n+\t* sem_aggr.adb (Is_Null_Array_Aggregate_High_Bound,\n+\tIs_Null_Aggregate, Resolve_Null_Array_Aggregate): New functions.\n+\t(Resolve_Aggregate): Recognize null array aggregates (using\n+\tIs_Null_Aggregate) and, when one is recognized, resolve\n+\tit (using Resolve_Null_Array_Aggregate).  Avoid calling\n+\tArray_Aggr_Subtype for a null array aggregate; the needed\n+\tsubtype is built in Resolve_Null_Array_Aggregate. Do not\n+\tincorrectly flag a null aggregate (after it is transformed by\n+\texpansion) as being both positional and named.\n+\t* sem_attr.adb (Eval_Attribute): Special treatment for null\n+\tarray aggregate high bounds to avoid incorrectly flagging\n+\tsomething like Integer'Pred (Integer'First) as an illegal static\n+\texpression.\n+\t* sem_eval.adb (Out_Of_Range): Special treatment for null array\n+\taggregate high bounds to avoid incorrectly flagging something\n+\tlike Integer'Pred (Integer'First) as an illegal static\n+\texpression.\n+\n+2022-05-19  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-aridou.adb (Lemma_Abs_Range,\n+\tLemma_Double_Shift_Left, Lemma_Shift_Left): New lemmas.\n+\t(Double_Divide): Add ghost code.\n+\t(Lemma_Concat_Definition, Lemma_Double_Shift_Left,\n+\tLemma_Shift_Left, Lemma_Shift_Right): Define or complete lemmas.\n+\t(Scaled_Divide): Add ghost code.\n+\n+2022-05-19  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_pakd.adb (Expand_Packed_Eq): Replace the check for *same*\n+\tmodular type, with a check for any modular type, and assert that\n+\tthe two types have the same modulus and so on.\n+\t* exp_pakd.ads: Minor comment improvements.\n+\n+2022-05-19  Bob Duff  <duff@adacore.com>\n+\n+\t* style.adb (Check_Identifier): Deal with the case where a\n+\trecord component definition has been transformed; we want to\n+\twarn if the original came from source.\n+\t* libgnat/s-objrea.ads, libgnat/s-objrea.adb: Fix casing of MF\n+\tto be consistent.\n+\t* uname.adb: Fix casing of Chars to be consistent.\n+\t* sem_util.ads: Minor comment fix.\n+\n+2022-05-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* Makefile.rtl (GNATRTL_NONTASKING_OBJS): Add s-retsta.\n+\t* debug.adb (d_r): Document usage.\n+\t* exp_ch4.adb (Expand_N_Allocato): Deal with the return stack pool.\n+\t* exp_ch6.adb (Expand_Simple_Function_Return): Replace calls to\n+\tRequires_Transient_Scope with Returns_On_Secondary_Stack.  Deal\n+\twith types that need finalization returned on the primary stack,\n+\tuse CW_Or_Needs_Finalization for those returned on the secondary.\n+\t* exp_util.adb (Build_Allocate_Deallocate_Proc): Return early\n+\tfor the return stack pool.\n+\t(Remove_Side_Effects): Call CW_Or_Needs_Finalization.\n+\t* fe.h (Requires_Transient_Scope): Delete.\n+\t(Returns_On_Secondary_Stack): Declare.\n+\t* gnat1drv.adb (Adjust_Global_Switches): Set Back_End_Return_Slot\n+\tto False when generating C code or if -gnatd_r is specified.\n+\t* opt.ads (Back_End_Return_Slot): New boolean variable.\n+\t* rtsfind.ads (RTU_Id): Add System_Return_Stack.\n+\t(RE_Id): Add RE_RS_Allocate and RE_RS_Pool.\n+\t(RE_Unit_Table): Add entries for RE_RS_Allocate and RE_RS_Pool.\n+\t* sem_util.ads (CW_Or_Has_Controlled_Part): Delete.\n+\t(CW_Or_Needs_Finalization): Declare.\n+\t(Requires_Transient_Scope): Adjust description.\n+\t(Returns_On_Secondary_Stack): Declare.\n+\t* sem_util.adb (Compute_Returns_By_Ref): Set Returns_By_Ref on types\n+\twhich need finalization if they are returned on the secondary stack.\n+\t(CW_Or_Has_Controlled_Part): Rename to...\n+\t(CW_Or_Needs_Finalization): ...this.\n+\t(Requires_Transient_Scope): Move bulk of implementation to...\n+\t(Returns_On_Secondary_Stack): ...here.  Return true for types which\n+\tneed finalization only if the back-end return slot is not supported.\n+\t* libgnat/s-retsta.ads: New file.\n+\t* gcc-interface/ada-builtin-types.def (BT_FN_PTR_SSIZE): Define.\n+\t* gcc-interface/ada-builtins.def (return_slot): Likewise.\n+\t* gcc-interface/ada-tree.h (BUILT_IN_RETURN_SLOT): Likewise.\n+\t* gcc-interface/decl.cc (gnat_to_gnu_subprog_type): Replace call to\n+\tRequires_Transient_Scope with Returns_On_Secondary_Stack.\n+\t* gcc-interface/trans.cc (gnat_to_gnu) <N_Simple_Return_Statement>:\n+\tIn the return by invisible reference, skip the copy if the source\n+\tis the same as the destination.\n+\t* gcc-interface/utils2.cc (build_call_alloc_dealloc_proc): Deal with\n+\tthe return stack pool.\n+\n+2022-05-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.cc: Fix formatting issues in comments.\n+\t(Subprogram_Body_to_gnu): Tidy up.\n+\t(Exception_Handler_to_gnu_gcc): Rename into...\n+\t(Exception_Handler_to_gnu): ...this.\n+\t(gnat_to_gnu) <N_Exception_Handler>: Adjust to above renaming.\n+\n+2022-05-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.cc (Subprogram_Body_to_gnu): Rename a couple\n+\tof local variables and use Is_Generic_Subprogram predicate.\n+\t(process_decls): Likewise.\n+\n+2022-05-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.cc (Subprogram_Body_to_gnu): Do not deal with\n+\tinlining heuristics for expression functions here but...\n+\t* gcc-interface/decl.cc (inline_status_for_subprog): ...here instead\n+\tand do not override them at -Os.\n+\n+2022-05-19  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* gcc-interface/decl.cc (gnat_to_gnu_entity): Remove dead code\n+\twhich expected Scope to return E_Subprogram_Body entity.\n+\n 2022-05-18  Claire Dross  <dross@adacore.com>\n \n \t* libgnat/s-imageu.adb (Set_Image_Unsigned): Change assertion."}, {"sha": "613dbbe560dc9c17805a19e6f65a938a3f3fcc94", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12750f80bffe7072a7fcc7620305a40d071ff388/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12750f80bffe7072a7fcc7620305a40d071ff388/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=12750f80bffe7072a7fcc7620305a40d071ff388", "patch": "@@ -1,3 +1,29 @@\n+2022-05-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* g++.dg/cpp0x/variadic-tuple.C: Qualify function to avoid ADL\n+\tfinding std::make_tuple.\n+\n+2022-05-19  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR middle-end/98865\n+\t* gcc.target/i386/pr98865.c: New test case.\n+\n+2022-05-19  Giuliano Belinassi  <gbelinassi@suse.de>\n+\n+\tPR target/105647\n+\t* g++.dg/modules/pr105169_a.C: Change -fpatchable-function-entry to 2.\n+\t* g++.dg/modules/pr105169_b.C: Likewise.\n+\n+2022-05-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/105630\n+\t* gcc.dg/pr105630.c: New test.\n+\n+2022-05-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/105635\n+\t* gcc.dg/pr105635.c: New test.\n+\n 2022-05-18  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/105131"}, {"sha": "e755911c996f527ef65b43d6956a205db780e066", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12750f80bffe7072a7fcc7620305a40d071ff388/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12750f80bffe7072a7fcc7620305a40d071ff388/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=12750f80bffe7072a7fcc7620305a40d071ff388", "patch": "@@ -1,3 +1,67 @@\n+2022-05-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/char_traits.h: Only include <cstdint> when\n+\tnecessary.\n+\t* include/std/stacktrace: Use __UINTPTR_TYPE__ instead of\n+\tuintptr_t.\n+\t* src/c++11/cow-stdexcept.cc: Include <stdint.h>.\n+\t* src/c++17/floating_to_chars.cc: Likewise.\n+\t* testsuite/20_util/assume_aligned/1.cc: Include <cstdint>.\n+\t* testsuite/20_util/assume_aligned/3.cc: Likewise.\n+\t* testsuite/20_util/shared_ptr/creation/array.cc: Likewise.\n+\n+2022-05-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/basic_string.h: Do not include <ext/atomicity.h>\n+\there.\n+\t* include/bits/cow_string.h: Include it here.\n+\n+2022-05-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/Makefile.am: Add new header.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/bits/memory_resource.h: New file.\n+\t* include/std/deque: Include <bits/memory_resource.h>.\n+\t* include/std/forward_list: Likewise.\n+\t* include/std/list: Likewise.\n+\t* include/std/map: Likewise.\n+\t* include/std/memory_resource (pmr::memory_resource): Move to\n+\tnew <bits/memory_resource.h> header.\n+\t(pmr::polymorphic_allocator): Likewise.\n+\t* include/std/regex: Likewise.\n+\t* include/std/set: Likewise.\n+\t* include/std/stacktrace: Likewise.\n+\t* include/std/string: Likewise.\n+\t* include/std/unordered_map: Likewise.\n+\t* include/std/unordered_set: Likewise.\n+\t* include/std/vector: Likewise.\n+\t* testsuite/21_strings/basic_string/types/pmr_typedefs.cc:\n+\tRemove <memory_resource> header and check construction.\n+\t* testsuite/23_containers/deque/types/pmr_typedefs.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/pmr_typedefs.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/pmr_typedefs.cc: Likewise.\n+\t* testsuite/23_containers/map/pmr_typedefs.cc: Likewise.\n+\t* testsuite/23_containers/multimap/pmr_typedefs.cc: Likewise.\n+\t* testsuite/23_containers/multiset/pmr_typedefs.cc: Likewise.\n+\t* testsuite/23_containers/set/pmr_typedefs.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/pmr_typedefs.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multimap/pmr_typedefs.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multiset/pmr_typedefs.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_set/pmr_typedefs.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/pmr_typedefs.cc: Likewise.\n+\t* testsuite/28_regex/match_results/pmr_typedefs.cc: Likewise.\n+\n+2022-05-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/memory_resource (polymorphic_allocator): Add\n+\tnon-template equality operator, as proposed for LWG 3683.\n+\t* testsuite/20_util/polymorphic_allocator/lwg3683.cc: New test.\n+\n 2022-05-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* src/c++17/memory_resource.cc (set_default_resource): Use"}]}