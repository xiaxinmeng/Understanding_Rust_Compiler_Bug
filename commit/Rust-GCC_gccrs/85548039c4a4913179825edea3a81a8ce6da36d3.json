{"sha": "85548039c4a4913179825edea3a81a8ce6da36d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU1NDgwMzljNGE0OTEzMTc5ODI1ZWRlYTNhODFhOGNlNmRhMzZkMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-06-01T00:10:35Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-06-01T00:10:35Z"}, "message": "ia64-protos.h (ia64_expand_prediction): Remove.\n\n        * config/ia64/ia64-protos.h (ia64_expand_prediction): Remove.\n        * config/ia64/ia64.c (ia64_expand_prediction): Move code ...\n        (ia64_print_operand) [+]: ... here.  Use current_output_insn.\n        * config/ia64/ia64.h (PRINT_OPERAND_PUNCT_VALID_P): New.\n        * config/ia64/ia64.md (all branch/call patterns): Use %+.\n\nFrom-SVN: r34318", "tree": {"sha": "1b4083e2af4d9b1edb23f425021bb3e112864bd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b4083e2af4d9b1edb23f425021bb3e112864bd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85548039c4a4913179825edea3a81a8ce6da36d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85548039c4a4913179825edea3a81a8ce6da36d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85548039c4a4913179825edea3a81a8ce6da36d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85548039c4a4913179825edea3a81a8ce6da36d3/comments", "author": null, "committer": null, "parents": [{"sha": "18153f6ceb9010d8db0caca298ac6b5722561aa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18153f6ceb9010d8db0caca298ac6b5722561aa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18153f6ceb9010d8db0caca298ac6b5722561aa9"}], "stats": {"total": 138, "additions": 48, "deletions": 90}, "files": [{"sha": "53ba7fc3799161c9cc06ecf3c2d8c7e84622c313", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85548039c4a4913179825edea3a81a8ce6da36d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85548039c4a4913179825edea3a81a8ce6da36d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85548039c4a4913179825edea3a81a8ce6da36d3", "patch": "@@ -1,3 +1,11 @@\n+2000-05-31  Richard Henderson  <rth@cygnus.com>\n+\n+\t* config/ia64/ia64-protos.h (ia64_expand_prediction): Remove.\n+\t* config/ia64/ia64.c (ia64_expand_prediction): Move code ...\n+\t(ia64_print_operand) [+]: ... here.  Use current_output_insn.\n+\t* config/ia64/ia64.h (PRINT_OPERAND_PUNCT_VALID_P): New.\n+\t* config/ia64/ia64.md (all branch/call patterns): Use %+.\n+\n 2000-05-31  Richard Henderson  <rth@cygnus.com>\n \n \t* ifcvt.c (cond_exec_process_insns): Don't ever ignore clobbers."}, {"sha": "ec820b1aaa62da13888b6ca3b8c1a839f1c592f7", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85548039c4a4913179825edea3a81a8ce6da36d3/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85548039c4a4913179825edea3a81a8ce6da36d3/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=85548039c4a4913179825edea3a81a8ce6da36d3", "patch": "@@ -61,7 +61,6 @@ extern enum reg_class ia64_secondary_reload_class PARAMS((enum reg_class,\n \t\t\t\t\t\t\t  enum machine_mode,\n \t\t\t\t\t\t\t  rtx));\n extern void ia64_reorg PARAMS((rtx));\n-extern const char *ia64_expand_prediction PARAMS((rtx, const char *));\n #endif /* RTX_CODE */\n \n #ifdef TREE_CODE"}, {"sha": "3e170f85833fd870b43b1ff48aae8f003b901033", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 30, "deletions": 44, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85548039c4a4913179825edea3a81a8ce6da36d3/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85548039c4a4913179825edea3a81a8ce6da36d3/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=85548039c4a4913179825edea3a81a8ce6da36d3", "patch": "@@ -1714,8 +1714,6 @@ ia64_print_operand (file, x, code)\n {\n   switch (code)\n     {\n-      /* XXX Add other codes here.  */\n-\n     case 0:\n       /* Handled below.  */\n       break;\n@@ -1840,6 +1838,36 @@ ia64_print_operand (file, x, code)\n \toutput_operand_lossage (\"invalid %%r value\");\n       return;\n \n+    case '+':\n+      {\n+\tconst char *which;\n+\t\n+\t/* For conditional branches, returns or calls, substitute\n+\t   sptk, dptk, dpnt, or spnt for %s.  */\n+\tx = find_reg_note (current_output_insn, REG_BR_PROB, 0);\n+\tif (x)\n+\t  {\n+\t    int pred_val = INTVAL (XEXP (x, 0));\n+\n+\t    /* Guess top and bottom 10% statically predicted.  */\n+\t    if (pred_val < REG_BR_PROB_BASE / 10)\n+\t      which = \".spnt\";\n+\t    else if (pred_val < REG_BR_PROB_BASE / 2)\n+\t      which = \".dpnt\";\n+\t    else if (pred_val < REG_BR_PROB_BASE * 9 / 10)\n+\t      which = \".dptk\";\n+\t    else\n+\t      which = \".sptk\";\n+\t  }\n+\telse if (GET_CODE (current_output_insn) == CALL_INSN)\n+\t  which = \".sptk\";\n+\telse\n+\t  which = \".dptk\";\n+\n+\tfputs (which, file);\n+\treturn;\n+      }\n+\n     default:\n       output_operand_lossage (\"ia64_print_operand: unknown code\");\n       return;\n@@ -1872,48 +1900,6 @@ ia64_print_operand (file, x, code)\n \n   return;\n }\n-\n-/* For conditional branches, returns or calls, substitute\n-   sptk, dptk, dpnt, or spnt for %s.  */\n-\n-const char *\n-ia64_expand_prediction (insn, template)\n-     rtx insn;\n-     const char *template;\n-{\n-  static char const pred_name[4][5] = {\n-\t\"spnt\", \"dpnt\", \"dptk\", \"sptk\"\n-  };\n-  static char new_template[64];\n-\n-  int pred_val, pred_which;\n-  rtx note;\n-\n-  note = find_reg_note (insn, REG_BR_PROB, 0);\n-  if (note)\n-    {\n-      pred_val = INTVAL (XEXP (note, 0));\n-\n-      /* Guess top and bottom 10% statically predicted.  */\n-      if (pred_val < REG_BR_PROB_BASE / 10)\n-\tpred_which = 0;\n-      else if (pred_val < REG_BR_PROB_BASE / 2)\n-\tpred_which = 1;\n-      else if (pred_val < REG_BR_PROB_BASE * 9 / 10)\n-\tpred_which = 2;\n-      else\n-\tpred_which = 3;\n-    }\n-  else\n-    pred_which = 2;\n-\n-  if (strlen (template) >= sizeof (new_template) - 3)\n-    abort ();\n-\n-  sprintf (new_template, template, pred_name[pred_which]);\n-\n-  return new_template;\n-}\n \f\n \n /* This function returns the register class required for a secondary"}, {"sha": "6ea12dcc9ee957df73372d2cf9dfc1484e53ecfd", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85548039c4a4913179825edea3a81a8ce6da36d3/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85548039c4a4913179825edea3a81a8ce6da36d3/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=85548039c4a4913179825edea3a81a8ce6da36d3", "patch": "@@ -2469,7 +2469,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* ??? Keep this around for now, as we might need it later.  */\n \n-/* #define PRINT_OPERAND_PUNCT_VALID_P(CODE) */\n+#define PRINT_OPERAND_PUNCT_VALID_P(CODE)   ((CODE) == '+')\n \n /* A C compound statement to output to stdio stream STREAM the assembler syntax\n    for an instruction operand that is a memory reference whose address is X.  X"}, {"sha": "d46563e1ef826e1dcd932bcbdc9112ae6ee5246d", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 9, "deletions": 44, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85548039c4a4913179825edea3a81a8ce6da36d3/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85548039c4a4913179825edea3a81a8ce6da36d3/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=85548039c4a4913179825edea3a81a8ce6da36d3", "patch": "@@ -2162,7 +2162,7 @@\n \t\t      (label_ref (match_operand 2 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"* return ia64_expand_prediction (insn, \\\"(%%J0) br.cond.%s %%l2\\\");\"\n+  \"(%J0) br.cond%+ %l2\"\n   [(set_attr \"type\" \"B\")\n    (set_attr \"predicable\" \"no\")])\n \n@@ -2174,7 +2174,7 @@\n \t\t      (pc)\n \t\t      (label_ref (match_operand 2 \"\" \"\"))))]\n   \"\"\n-  \"* return ia64_expand_prediction (insn, \\\"(%%j0) br.cond.%s %%l2\\\");\"\n+  \"(%j0) br.cond%+ %l2\"\n   [(set_attr \"type\" \"B\")\n    (set_attr \"predicable\" \"no\")])\n \f\n@@ -2717,14 +2717,7 @@\n \t (match_operand 1 \"\" \"\"))\n    (clobber (match_operand:DI 2 \"register_operand\" \"=b\"))]\n   \"\"\n-  \"*\n-{\n-  operands[3] = current_insn_predicate;\n-  if (operands[3] != NULL_RTX)\n-    return ia64_expand_prediction (insn, \\\"(%%J3) br.call.%s.many %2 = %0\\\");\n-  else\n-    return \\\"br.call.sptk.many %2 = %0\\\";\n-}\"\n+  \"br.call%+.many %2 = %0\"\n   [(set_attr \"type\" \"B\")])\n \n (define_insn \"*call_internal1\"\n@@ -2733,14 +2726,7 @@\n    (use (reg:DI 1))\n    (clobber (match_operand:DI 2 \"register_operand\" \"=b\"))]\n   \"\"\n-  \"*\n-{\n-  operands[3] = current_insn_predicate;\n-  if (operands[3] != NULL_RTX)\n-    return ia64_expand_prediction (insn, \\\"(%%J3) br.call.%s.many %2 = %0\\\");\n-  else\n-    return \\\"br.call.sptk.many %2 = %0\\\";\n-}\"\n+  \"br.call%+.many %2 = %0\"\n   [(set_attr \"type\" \"B\")])\n \n ;; Subroutine call instruction returning a value.  Operand 0 is the hard\n@@ -2940,14 +2926,7 @@\n \t      (match_operand 2 \"\" \"\")))\n    (clobber (match_operand:DI 3 \"register_operand\" \"=b\"))]\n   \"\"\n-  \"*\n-{\n-  operands[4] = current_insn_predicate;\n-  if (operands[4] != NULL_RTX)\n-    return ia64_expand_prediction (insn, \\\"(%%J4) br.call.%s.many %3 = %1\\\");\n-  else\n-    return \\\"br.call.sptk.many %3 = %1\\\";\n-}\"\n+  \"br.call%+.many %3 = %1\"\n   [(set_attr \"type\" \"B\")])\n \n (define_insn \"*call_value_internal1\"\n@@ -2957,14 +2936,7 @@\n    (use (reg:DI 1))\n    (clobber (match_operand:DI 3 \"register_operand\" \"=b\"))]\n   \"\"\n-  \"*\n-{\n-  operands[4] = current_insn_predicate;\n-  if (operands[4] != NULL_RTX)\n-    return ia64_expand_prediction (insn, \\\"(%%J4) br.call.%s.many %3 = %1\\\");\n-  else\n-    return \\\"br.call.sptk.many %3 = %1\\\";\n-}\"\n+  \"br.call%+.many %3 = %1\"\n   [(set_attr \"type\" \"B\")])\n \n (define_insn \"*call_multiple_values_internal1\"\n@@ -2975,14 +2947,7 @@\n \t\t    (use (reg:DI 1))\n \t\t    (clobber (match_operand:DI 4 \"register_operand\" \"=b\"))])]\n   \"\"\n-  \"*\n-{\n-  operands[5] = current_insn_predicate;\n-  if (operands[5] != NULL_RTX)\n-    return ia64_expand_prediction (insn, \\\"(%%J5) br.call.%s.many %4 = %2\\\");\n-  else\n-    return \\\"br.call.sptk.many %4 = %2\\\";\n-}\"\n+  \"br.call%+.many %4 = %2\"\n   [(set_attr \"type\" \"B\")])\n \n ;; Call subroutine returning any type.\n@@ -3035,7 +3000,7 @@\n \t\t      (return)\n \t\t      (pc)))]\n   \"ia64_direct_return ()\"\n-  \"* return ia64_expand_prediction (insn, \\\"(%%J0) br.ret.%s.many rp\\\");\"\n+  \"(%%J0) br.ret%+.many rp\"\n   [(set_attr \"type\" \"B\")\n    (set_attr \"predicable\" \"no\")])\n \n@@ -3047,7 +3012,7 @@\n \t\t      (pc)\n \t\t      (return)))]\n   \"ia64_direct_return ()\"\n-  \"* return ia64_expand_prediction (insn, \\\"(%%j0) br.ret.%s.many rp\\\");\"\n+  \"(%%j0) br.ret%+.many rp\"\n   [(set_attr \"type\" \"B\")\n    (set_attr \"predicable\" \"no\")])\n "}]}