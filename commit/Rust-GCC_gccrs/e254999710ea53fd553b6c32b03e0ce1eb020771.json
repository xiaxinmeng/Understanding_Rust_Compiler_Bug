{"sha": "e254999710ea53fd553b6c32b03e0ce1eb020771", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI1NDk5OTcxMGVhNTNmZDU1M2I2YzMyYjAzZTBjZTFlYjAyMDc3MQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-11-20T19:02:25Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-11-20T19:02:25Z"}, "message": "(init_expr_once): Try indexing mem by fp as well as sp.\n\nFrom-SVN: r2760", "tree": {"sha": "10a9a410384c37abf44b5d2ef5de29fbe409f76f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10a9a410384c37abf44b5d2ef5de29fbe409f76f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e254999710ea53fd553b6c32b03e0ce1eb020771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e254999710ea53fd553b6c32b03e0ce1eb020771", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e254999710ea53fd553b6c32b03e0ce1eb020771", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e254999710ea53fd553b6c32b03e0ce1eb020771/comments", "author": null, "committer": null, "parents": [{"sha": "2513f07a896ebaded0a3ea759b8944f5d25c6248", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2513f07a896ebaded0a3ea759b8944f5d25c6248", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2513f07a896ebaded0a3ea759b8944f5d25c6248"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "1881da40ed52c32f7f6b0cb6787fb86882369780", "filename": "gcc/expr.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e254999710ea53fd553b6c32b03e0ce1eb020771/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e254999710ea53fd553b6c32b03e0ce1eb020771/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=e254999710ea53fd553b6c32b03e0ce1eb020771", "patch": "@@ -139,7 +139,11 @@ init_expr_once ()\n {\n   rtx insn, pat;\n   enum machine_mode mode;\n+  /* Try indexing by frame ptr and try by stack ptr.\n+     It is known that on the Convex the stack ptr isn't a valid index.\n+     With luck, one or the other is valid on any machine.  */\n   rtx mem = gen_rtx (MEM, VOIDmode, stack_pointer_rtx);\n+  rtx mem1 = gen_rtx (MEM, VOIDmode, frame_pointer_rtx);\n \n   start_sequence ();\n   insn = emit_insn (gen_rtx (SET, 0, 0));\n@@ -154,6 +158,7 @@ init_expr_once ()\n \n       direct_load[(int) mode] = direct_store[(int) mode] = 0;\n       PUT_MODE (mem, mode);\n+      PUT_MODE (mem1, mode);\n \n       /* See if there is some register that can be used in this mode and\n \t directly loaded or stored from memory.  */\n@@ -173,10 +178,20 @@ init_expr_once ()\n \t    if (recog (pat, insn, &num_clobbers) >= 0)\n \t      direct_load[(int) mode] = 1;\n \n+\t    SET_SRC (pat) = mem1;\n+\t    SET_DEST (pat) = reg;\n+\t    if (recog (pat, insn, &num_clobbers) >= 0)\n+\t      direct_load[(int) mode] = 1;\n+\n \t    SET_SRC (pat) = reg;\n \t    SET_DEST (pat) = mem;\n \t    if (recog (pat, insn, &num_clobbers) >= 0)\n \t      direct_store[(int) mode] = 1;\n+\n+\t    SET_SRC (pat) = reg;\n+\t    SET_DEST (pat) = mem1;\n+\t    if (recog (pat, insn, &num_clobbers) >= 0)\n+\t      direct_store[(int) mode] = 1;\n \t  }\n \n       movstr_optab[(int) mode] = CODE_FOR_nothing;"}]}