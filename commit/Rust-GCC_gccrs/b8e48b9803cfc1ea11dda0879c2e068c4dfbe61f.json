{"sha": "b8e48b9803cfc1ea11dda0879c2e068c4dfbe61f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhlNDhiOTgwM2NmYzFlYTExZGRhMDg3OWMyZTA2OGM0ZGZiZTYxZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-01-25T23:09:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-01-25T23:09:10Z"}, "message": "re PR rtl-optimization/19579 (-march=i686 generates a bogus program for x86*)\n\n\tPR rtl-optimization/19579\n\t* ifcvt.c (noce_try_cmove_arith): If emitting instructions to set up\n\tboth A and B, see if they don't clobber registers the other expr uses.\n\n\t* gcc.c-torture/execute/20050124-1.c: New test.\n\nFrom-SVN: r94234", "tree": {"sha": "acbe784c2e411ea29bd4577aa9c328f01710b429", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acbe784c2e411ea29bd4577aa9c328f01710b429"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8e48b9803cfc1ea11dda0879c2e068c4dfbe61f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8e48b9803cfc1ea11dda0879c2e068c4dfbe61f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8e48b9803cfc1ea11dda0879c2e068c4dfbe61f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8e48b9803cfc1ea11dda0879c2e068c4dfbe61f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8dac1b213e4e0995fdcbbbd1bea9514e79033305", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dac1b213e4e0995fdcbbbd1bea9514e79033305", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dac1b213e4e0995fdcbbbd1bea9514e79033305"}], "stats": {"total": 78, "additions": 73, "deletions": 5}, "files": [{"sha": "0596f1153be0c6c93dfc2678a93b14e6fce5cf99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e48b9803cfc1ea11dda0879c2e068c4dfbe61f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e48b9803cfc1ea11dda0879c2e068c4dfbe61f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8e48b9803cfc1ea11dda0879c2e068c4dfbe61f", "patch": "@@ -1,3 +1,9 @@\n+2005-01-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/19579\n+\t* ifcvt.c (noce_try_cmove_arith): If emitting instructions to set up\n+\tboth A and B, see if they don't clobber registers the other expr uses.\n+\n 2005-01-25  J\"orn Rennecke <joern.rennecke@st.com>\n \n \t* real.c (do_add): Initialize signalling and canonical members."}, {"sha": "39fced43b2447ca88a7ed89e7ac8d0f3f3ac5cdf", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e48b9803cfc1ea11dda0879c2e068c4dfbe61f/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e48b9803cfc1ea11dda0879c2e068c4dfbe61f/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=b8e48b9803cfc1ea11dda0879c2e068c4dfbe61f", "patch": "@@ -1229,6 +1229,7 @@ noce_try_cmove_arith (struct noce_if_info *if_info)\n   rtx a = if_info->a;\n   rtx b = if_info->b;\n   rtx x = if_info->x;\n+  rtx orig_a, orig_b;\n   rtx insn_a, insn_b;\n   rtx tmp, target;\n   int is_mem = 0;\n@@ -1304,6 +1305,9 @@ noce_try_cmove_arith (struct noce_if_info *if_info)\n \n   start_sequence ();\n \n+  orig_a = a;\n+  orig_b = b;\n+\n   /* If either operand is complex, load it into a register first.\n      The best way to do this is to copy the original insn.  In this\n      way we preserve any clobbers etc that the insn may have had.\n@@ -1335,17 +1339,15 @@ noce_try_cmove_arith (struct noce_if_info *if_info)\n     }\n   if (! general_operand (b, GET_MODE (b)))\n     {\n-      rtx set;\n+      rtx set, last;\n \n       if (no_new_pseudos)\n \tgoto end_seq_and_fail;\n \n       if (is_mem)\n \t{\n           tmp = gen_reg_rtx (GET_MODE (b));\n-\t  tmp = emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t  \ttmp,\n-\t\t\t\t\tb));\n+\t  tmp = gen_rtx_SET (VOIDmode, tmp, b);\n \t}\n       else if (! insn_b)\n \tgoto end_seq_and_fail;\n@@ -1355,8 +1357,22 @@ noce_try_cmove_arith (struct noce_if_info *if_info)\n \t  tmp = copy_rtx (insn_b);\n \t  set = single_set (tmp);\n \t  SET_DEST (set) = b;\n-\t  tmp = emit_insn (PATTERN (tmp));\n+\t  tmp = PATTERN (tmp);\n+\t}\n+\n+      /* If insn to set up A clobbers any registers B depends on, try to\n+\t swap insn that sets up A with the one that sets up B.  If even\n+\t that doesn't help, punt.  */\n+      last = get_last_insn ();\n+      if (last && modified_in_p (orig_b, last))\n+\t{\n+\t  tmp = emit_insn_before (tmp, get_insns ());\n+\t  if (modified_in_p (orig_a, tmp))\n+\t    goto end_seq_and_fail;\n \t}\n+      else\n+\ttmp = emit_insn (tmp);\n+\n       if (recog_memoized (tmp) < 0)\n \tgoto end_seq_and_fail;\n     }"}, {"sha": "2f7606aff2ad6b95486f7e736aaf4e8864876485", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e48b9803cfc1ea11dda0879c2e068c4dfbe61f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e48b9803cfc1ea11dda0879c2e068c4dfbe61f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b8e48b9803cfc1ea11dda0879c2e068c4dfbe61f", "patch": "@@ -1,3 +1,8 @@\n+2005-01-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/19579\n+\t* gcc.c-torture/execute/20050124-1.c: New test.\n+\n 2005-01-18  Jan Hubicka  <jh@suse.cz>\n \n \tPR tree-optimize/19337"}, {"sha": "9d039ef6623437117d57e6836e804d98a1eef657", "filename": "gcc/testsuite/gcc.c-torture/execute/20050124-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e48b9803cfc1ea11dda0879c2e068c4dfbe61f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050124-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e48b9803cfc1ea11dda0879c2e068c4dfbe61f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050124-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050124-1.c?ref=b8e48b9803cfc1ea11dda0879c2e068c4dfbe61f", "patch": "@@ -0,0 +1,41 @@\n+/* PR rtl-optimization/19579 */\n+\n+extern void abort (void);\n+\n+int\n+foo (int i, int j)\n+{\n+  int k = i + 1;\n+\n+  if (j)\n+    {\n+      if (k > 0)\n+\tk++;\n+      else if (k < 0)\n+\tk--;\n+    }\n+\n+  return k;\n+}\n+\n+int\n+main (void)\n+{\n+  if (foo (-2, 0) != -1)\n+    abort ();\n+  if (foo (-1, 0) != 0)\n+    abort ();\n+  if (foo (0, 0) != 1)\n+    abort ();\n+  if (foo (1, 0) != 2)\n+    abort ();\n+  if (foo (-2, 1) != -2)\n+    abort ();\n+  if (foo (-1, 1) != 0)\n+    abort ();\n+  if (foo (0, 1) != 2)\n+    abort ();\n+  if (foo (1, 1) != 3)\n+    abort ();\n+  return 0;\n+}"}]}