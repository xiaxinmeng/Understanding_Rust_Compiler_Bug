{"sha": "74f7912ac84090b59ebc8fffa51893b167a0552a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRmNzkxMmFjODQwOTBiNTllYmM4ZmZmYTUxODkzYjE2N2EwNTUyYQ==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2010-06-29T14:38:13Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2010-06-29T14:38:13Z"}, "message": "tm.texi (TARGET_OPTION_OVERRIDE): Document.\n\n        * doc/tm.texi (TARGET_OPTION_OVERRIDE): Document.\n        (OVERRIDE_OPTIONS): Add note of obsolescence.\n        Replace references with references to TARGET_OPTION_OVERRIDE.\n        (Except for C_COMMON_OVERRIDE_OPTIONS, which remains similar to\n         the macro).\n        * targhooks.c (default_target_option_override): New function.\n        * targhooks.h (default_target_option_override): Declare.\n        * target.h (struct gcc_target): Add override member to\n        target_option emmber.\n        * toplev.c (process_options): Replace OVERRIDE_OPTIONS use with\n        targetm.target_option.override call.\n        * target-def.h (TARGET_OPTION_OVERRIDE): Define.\n        (TARGET_OPTION_HOOKS): Add TARGET_OPTION_OVERRIDE.\n\nFrom-SVN: r161538", "tree": {"sha": "59640e76d8830768e1fbdfbf9ed5e3164eca252d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59640e76d8830768e1fbdfbf9ed5e3164eca252d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74f7912ac84090b59ebc8fffa51893b167a0552a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74f7912ac84090b59ebc8fffa51893b167a0552a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74f7912ac84090b59ebc8fffa51893b167a0552a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74f7912ac84090b59ebc8fffa51893b167a0552a/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "20a6bb58201d19ef46edaa44266c2dc2e992b365", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20a6bb58201d19ef46edaa44266c2dc2e992b365", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20a6bb58201d19ef46edaa44266c2dc2e992b365"}], "stats": {"total": 68, "additions": 58, "deletions": 10}, "files": [{"sha": "28db8c5ee934c4375ea5982a54087857e892a4f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f7912ac84090b59ebc8fffa51893b167a0552a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f7912ac84090b59ebc8fffa51893b167a0552a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74f7912ac84090b59ebc8fffa51893b167a0552a", "patch": "@@ -1,3 +1,19 @@\n+2010-06-29  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\t* doc/tm.texi (TARGET_OPTION_OVERRIDE): Document.\n+\t(OVERRIDE_OPTIONS): Add note of obsolescence.\n+\tReplace references with references to TARGET_OPTION_OVERRIDE.\n+\t(Except for C_COMMON_OVERRIDE_OPTIONS, which remains similar to\n+\t the macro).\n+\t* targhooks.c (default_target_option_override): New function.\n+\t* targhooks.h (default_target_option_override): Declare.\n+\t* target.h (struct gcc_target): Add override member to\n+\ttarget_option emmber.\n+\t* toplev.c (process_options): Replace OVERRIDE_OPTIONS use with\n+\ttargetm.target_option.override call.\n+\t* target-def.h (TARGET_OPTION_OVERRIDE): Define.\n+\t(TARGET_OPTION_HOOKS): Add TARGET_OPTION_OVERRIDE.\n+\n 2010-06-29  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-inline.c: Replace incomming by incomin and clonning by cloning."}, {"sha": "2290fd4ec47face80381c0519b79683fb7e7b2d6", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f7912ac84090b59ebc8fffa51893b167a0552a/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f7912ac84090b59ebc8fffa51893b167a0552a/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=74f7912ac84090b59ebc8fffa51893b167a0552a", "patch": "@@ -786,15 +786,18 @@ Don't use this macro to turn on various extra optimizations for\n If you need to do something whenever the optimization level is\n changed via the optimize attribute or pragma, see\n @code{TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE}\n+\n+This macros is obsolete, new ports should use the target hook\n+@code{TARGET_OPTION_OVERRIDE} instead.\n @end defmac\n \n @deftypefn {Target Hook} void TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE (void)\n-This target function is similar to the macro @code{OVERRIDE_OPTIONS}\n+This target function is similar to the hook @code{TARGET_OPTION_OVERRIDE}\n but is called when the optimize level is changed via an attribute or\n pragma or when it is reset at the end of the code affected by the\n attribute or pragma.  It is not called at the beginning of compilation\n-when @code{OVERRIDE_OPTIONS} is called so if you want to perform these\n-actions then, you should have @code{OVERRIDE_OPTIONS} call\n+when @code{TARGET_OPTION_OVERRIDE} is called so if you want to perform these\n+actions then, you should have @code{TARGET_OPTION_OVERRIDE} call\n @code{TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE}.\n @end deftypefn\n \n@@ -8839,7 +8842,7 @@ define the macro.\n \n Unless it's necessary to inspect the @var{label} parameter, it is better\n to set the variable @var{align_jumps} in the target's\n-@code{OVERRIDE_OPTIONS}.  Otherwise, you should try to honor the user's\n+@code{TARGET_OPTION_OVERRIDE}.  Otherwise, you should try to honor the user's\n selection in @var{align_jumps} in a @code{JUMP_ALIGN} implementation.\n @end defmac\n \n@@ -8868,7 +8871,7 @@ define the macro.\n \n Unless it's necessary to inspect the @var{label} parameter, it is better\n to set the variable @code{align_loops} in the target's\n-@code{OVERRIDE_OPTIONS}.  Otherwise, you should try to honor the user's\n+@code{TARGET_OPTION_OVERRIDE}.  Otherwise, you should try to honor the user's\n selection in @code{align_loops} in a @code{LOOP_ALIGN} implementation.\n @end defmac\n \n@@ -8884,7 +8887,7 @@ the maximum of the specified values is used.\n \n Unless it's necessary to inspect the @var{label} parameter, it is better\n to set the variable @code{align_labels} in the target's\n-@code{OVERRIDE_OPTIONS}.  Otherwise, you should try to honor the user's\n+@code{TARGET_OPTION_OVERRIDE}.  Otherwise, you should try to honor the user's\n selection in @code{align_labels} in a @code{LABEL_ALIGN} implementation.\n @end defmac\n \n@@ -9356,7 +9359,7 @@ in response to the @option{-g} option.  The default behavior for VMS\n is to generate minimal debug info for a traceback in the absence of\n @option{-g} unless explicitly overridden with @option{-g0}.  This\n behavior is controlled by @code{OPTIMIZATION_OPTIONS} and\n-@code{OVERRIDE_OPTIONS}.\n+@code{TARGET_OPTION_OVERRIDE}.\n @end defmac\n \n @node Floating Point\n@@ -9698,6 +9701,20 @@ input stream.  The options should be the same as handled by the\n @code{TARGET_VALID_OPTION_ATTRIBUTE_P} hook.\n @end deftypefn\n \n+@deftypefn {Target Hook} void TARGET_OPTION_OVERRIDE (void)\n+Sometimes certain combinations of command options do not make sense on\n+a particular target machine.  You can override the hook\n+@code{TARGET_OPTION_OVERRIDE} to take account of this.  This hooks is called\n+once just after all the command options have been parsed.\n+\n+Don't use this hook to turn on various extra optimizations for\n+@option{-O}.  That is what @code{OPTIMIZATION_OPTIONS} is for.\n+\n+If you need to do something whenever the optimization level is\n+changed via the optimize attribute or pragma, see\n+@code{TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE}\n+@end deftypefn\n+\n @deftypefn {Target Hook} bool TARGET_CAN_INLINE_P (tree @var{caller}, tree @var{callee})\n This target hook returns @code{false} if the @var{caller} function\n cannot inline @var{callee}, based on target specific information.  By"}, {"sha": "00b66c62c33f0fcbc371c18733f88bc684db72ba", "filename": "gcc/target-def.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f7912ac84090b59ebc8fffa51893b167a0552a/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f7912ac84090b59ebc8fffa51893b167a0552a/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=74f7912ac84090b59ebc8fffa51893b167a0552a", "patch": "@@ -971,6 +971,10 @@\n #define TARGET_OPTION_PRAGMA_PARSE default_target_option_pragma_parse\n #endif\n \n+#ifndef TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE default_target_option_override\n+#endif\n+\n #ifndef TARGET_CAN_INLINE_P\n #define TARGET_CAN_INLINE_P default_target_can_inline_p\n #endif\n@@ -982,6 +986,7 @@\n     TARGET_OPTION_RESTORE,\t\t\t\\\n     TARGET_OPTION_PRINT,\t\t\t\\\n     TARGET_OPTION_PRAGMA_PARSE,\t\t\t\\\n+    TARGET_OPTION_OVERRIDE,\t\t\t\\\n     TARGET_CAN_INLINE_P,\t\t\t\\\n   }\n "}, {"sha": "71b4d202a98ebb5bd0f1167992b22838809fd864", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f7912ac84090b59ebc8fffa51893b167a0552a/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f7912ac84090b59ebc8fffa51893b167a0552a/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=74f7912ac84090b59ebc8fffa51893b167a0552a", "patch": "@@ -1264,6 +1264,9 @@ struct gcc_target\n        true if the options are valid, and set the current state.  */\n     bool (*pragma_parse) (tree, tree);\n \n+     /* Do option overrides for the target.  */\n+     void (*override) (void);\n+\n     /* Function to determine if one function can inline another function.  */\n     bool (*can_inline_p) (tree, tree);\n   } target_option;"}, {"sha": "128a5cb448c404fae0d88f9f7790a8722744d663", "filename": "gcc/targhooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f7912ac84090b59ebc8fffa51893b167a0552a/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f7912ac84090b59ebc8fffa51893b167a0552a/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=74f7912ac84090b59ebc8fffa51893b167a0552a", "patch": "@@ -910,6 +910,14 @@ default_secondary_reload (bool in_p ATTRIBUTE_UNUSED, rtx x ATTRIBUTE_UNUSED,\n   return rclass;\n }\n \n+void\n+default_target_option_override (void)\n+{\n+#ifdef OVERRIDE_OPTIONS\n+  OVERRIDE_OPTIONS;\n+#endif\n+}\n+\n bool\n default_handle_c_option (size_t code ATTRIBUTE_UNUSED,\n \t\t\t const char *arg ATTRIBUTE_UNUSED,"}, {"sha": "f6e1ddce00f8fe2231163448d3bff2cb75600540", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f7912ac84090b59ebc8fffa51893b167a0552a/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f7912ac84090b59ebc8fffa51893b167a0552a/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=74f7912ac84090b59ebc8fffa51893b167a0552a", "patch": "@@ -122,6 +122,7 @@ extern const enum reg_class *default_ira_cover_classes (void);\n extern enum reg_class default_secondary_reload (bool, rtx, enum reg_class,\n \t\t\t\t\t\tenum machine_mode,\n \t\t\t\t\t\tsecondary_reload_info *);\n+extern void default_target_option_override (void);\n extern void hook_void_bitmap (bitmap);\n extern bool default_handle_c_option (size_t, const char *, int);\n extern int default_reloc_rw_mask (void);"}, {"sha": "276ae7ed4f1d17a18edfde4a488e38d2ed0d56fc", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74f7912ac84090b59ebc8fffa51893b167a0552a/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74f7912ac84090b59ebc8fffa51893b167a0552a/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=74f7912ac84090b59ebc8fffa51893b167a0552a", "patch": "@@ -1761,10 +1761,8 @@ process_options (void)\n      so we can correctly initialize debug output.  */\n   no_backend = lang_hooks.post_options (&main_input_filename);\n \n-#ifdef OVERRIDE_OPTIONS\n   /* Some machines may reject certain combinations of options.  */\n-  OVERRIDE_OPTIONS;\n-#endif\n+  targetm.target_option.override ();\n \n   /* Avoid any informative notes in the second run of -fcompare-debug.  */\n   if (flag_compare_debug) "}]}