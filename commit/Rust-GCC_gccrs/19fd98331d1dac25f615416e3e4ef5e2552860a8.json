{"sha": "19fd98331d1dac25f615416e3e4ef5e2552860a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTlmZDk4MzMxZDFkYWMyNWY2MTU0MTZlM2U0ZWY1ZTI1NTI4NjBhOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-11-01T00:08:58Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-11-01T00:08:58Z"}, "message": "dr1325-2.cc: Fix typo.\n\n2010-10-31  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* testsuite/23_containers/bitset/cons/dr1325-2.cc: Fix typo.\n\t* testsuite/20_util/hash/quality.cc: Avoid -Wall warnings.\n\t* testsuite/20_util/hash/chi2_quality.cc: Likewise.\n\nFrom-SVN: r166114", "tree": {"sha": "12d84af8f7a1b469380b00b9d073531bb20cd293", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12d84af8f7a1b469380b00b9d073531bb20cd293"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19fd98331d1dac25f615416e3e4ef5e2552860a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19fd98331d1dac25f615416e3e4ef5e2552860a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19fd98331d1dac25f615416e3e4ef5e2552860a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19fd98331d1dac25f615416e3e4ef5e2552860a8/comments", "author": null, "committer": null, "parents": [{"sha": "ac7513e1e04c143f89bd18bd49317c87731d3a80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac7513e1e04c143f89bd18bd49317c87731d3a80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac7513e1e04c143f89bd18bd49317c87731d3a80"}], "stats": {"total": 48, "additions": 26, "deletions": 22}, "files": [{"sha": "793b8dcb10361f7a453c825a083e40481d7d5b12", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19fd98331d1dac25f615416e3e4ef5e2552860a8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19fd98331d1dac25f615416e3e4ef5e2552860a8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=19fd98331d1dac25f615416e3e4ef5e2552860a8", "patch": "@@ -1,3 +1,9 @@\n+2010-10-31  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* testsuite/23_containers/bitset/cons/dr1325-2.cc: Fix typo.\n+\t* testsuite/20_util/hash/quality.cc: Avoid -Wall warnings.\n+\t* testsuite/20_util/hash/chi2_quality.cc: Likewise.\n+\n 2010-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_function.h (_Select1st<>::operator()): Add"}, {"sha": "a105f4b45d004a75af87c4ac79f71f3e1c082b22", "filename": "libstdc++-v3/testsuite/20_util/hash/chi2_quality.cc", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19fd98331d1dac25f615416e3e4ef5e2552860a8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Fchi2_quality.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19fd98331d1dac25f615416e3e4ef5e2552860a8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Fchi2_quality.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Fchi2_quality.cc?ref=19fd98331d1dac25f615416e3e4ef5e2552860a8", "patch": "@@ -91,10 +91,8 @@ test_uniform_random()\n   while (set.size() < N)\n     {\n       s.clear();\n-      for (int i = 0; i < len; ++i)\n-        {\n-          s.push_back(rand() % 128);\n-        }\n+      for (unsigned int i = 0; i < len; ++i)\n+\ts.push_back(rand() % 128);\n       set.insert(s);\n     }\n \n@@ -122,7 +120,7 @@ test_bit_flip_set()\n   while (set.size() < N)\n     {\n       std::string s(base, base+len);\n-      for (int i = 0; i < bits_to_flip; ++i)\n+      for (unsigned int i = 0; i < bits_to_flip; ++i)\n         {\n           int bit = rand() % bitlen;\n           s[bit/8] ^= (1 << (bit%8));\n@@ -168,7 +166,7 @@ test_bit_string_set()\n   for (unsigned long i = 0; i < N; ++i)\n     {\n       s.clear();\n-      for (int j = 0; j < sizeof(unsigned long) * 8; ++j)\n+      for (unsigned int j = 0; j < sizeof(unsigned long) * 8; ++j)\n         {\n           const bool bit = (1UL << j) & i;\n           s.push_back(bit ? '1' : '0');"}, {"sha": "8a6edac1687b8f6043043b3b8c0295ab5b1c23df", "filename": "libstdc++-v3/testsuite/20_util/hash/quality.cc", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19fd98331d1dac25f615416e3e4ef5e2552860a8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Fquality.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19fd98331d1dac25f615416e3e4ef5e2552860a8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Fquality.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Fquality.cc?ref=19fd98331d1dac25f615416e3e4ef5e2552860a8", "patch": "@@ -37,12 +37,12 @@ using namespace std;\n #define STRSIZE 42\n #endif\n \n-const int num_quality_tests = NTESTS;\n-const int num_strings_for_quality_tests = NSTRINGS;\n-const int string_size = STRSIZE;\n+const unsigned int num_quality_tests = NTESTS;\n+const unsigned int num_strings_for_quality_tests = NSTRINGS;\n+const unsigned int string_size = STRSIZE;\n \n vector<string>\n-random_strings(int n, int len)\n+random_strings(unsigned int n, unsigned int len)\n {\n   string s(len, '\\0');\n   unordered_set<string> result_set;\n@@ -57,10 +57,10 @@ random_strings(int n, int len)\n }\n \n double\n-score_from_varying_position(string s, int index)\n+score_from_varying_position(string s, unsigned int index)\n {\n   bool test __attribute__((unused)) = true;\n-  int bits_in_hash_code = sizeof(size_t) * 8;\n+  unsigned int bits_in_hash_code = sizeof(size_t) * 8;\n \n   // We'll iterate through all 256 vals for s[index], leaving the rest\n   // of s fixed.  Then, for example, out of the 128 times that\n@@ -71,9 +71,9 @@ score_from_varying_position(string s, int index)\n   // count the number of times each output position (of which there are\n   // bits_in_hash_code) is 1 for each bit position within s[index] (of \n   // which there are 8) and value of that bit (of which there are 2).\n-  const int jj = 2;\n-  const int kk = jj * bits_in_hash_code;\n-  const int array_size = 8 * kk;\n+  const unsigned int jj = 2;\n+  const unsigned int kk = jj * bits_in_hash_code;\n+  const unsigned int array_size = 8 * kk;\n   vector<int> ones(array_size, 0);\n \n   for (int i = 0; i < 256; i++)\n@@ -99,7 +99,7 @@ score_from_varying_position(string s, int index)\n   int good = 0, bad = 0;\n   for (int bit = 0; bit <= 1; bit++)\n     {\n-      for (int j = 0; j < bits_in_hash_code; j++)\n+      for (unsigned int j = 0; j < bits_in_hash_code; j++)\n         {\n           for (int bitpos = 0; bitpos < 8; bitpos++)\n             {\n@@ -121,21 +121,21 @@ score_from_varying_position(string s, int index)\n }\n \n double\n-score_from_varying_position(const vector<string>& v, int index)\n+score_from_varying_position(const vector<string>& v, unsigned int index)\n {\n   double score = 0;\n-  for (int i = 0; i < v.size(); i++)\n+  for (unsigned int i = 0; i < v.size(); i++)\n     score += score_from_varying_position(v[i], index);\n   return score / v.size();\n }\n \n double\n-quality_test(int num_strings, int string_size)\n+quality_test(unsigned int num_strings, unsigned int string_size)\n {\n   // Construct random strings.\n   vector<string> v = random_strings(num_strings, string_size);\n   double sum_of_scores = 0;\n-  for (int i = 0; i < string_size; i++)\n+  for (unsigned int i = 0; i < string_size; i++)\n     sum_of_scores += score_from_varying_position(v, i);\n \n   // A good hash function should have a score very close to 1, and a bad\n@@ -149,7 +149,7 @@ quality_test()\n   bool test __attribute__((unused)) = true;\n   srand(137);\n   double sum_of_scores = 0;\n-  for (int i = 0; i < num_quality_tests; i++)\n+  for (unsigned int i = 0; i < num_quality_tests; i++)\n     {\n       double score = quality_test(num_strings_for_quality_tests,\n \t\t\t\t  string_size);"}, {"sha": "e261ce5e6e0bba75e864f1abf8d99799677bbd2d", "filename": "libstdc++-v3/testsuite/23_containers/bitset/cons/dr1325-2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19fd98331d1dac25f615416e3e4ef5e2552860a8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fcons%2Fdr1325-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19fd98331d1dac25f615416e3e4ef5e2552860a8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fcons%2Fdr1325-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Fcons%2Fdr1325-2.cc?ref=19fd98331d1dac25f615416e3e4ef5e2552860a8", "patch": "@@ -45,7 +45,7 @@ void test01()\n   VERIFY( bitset<4>(s1, 4) == test01_ref<4>(s1, 4) );\n \n   const char s2[3] = { '1', '1', '0' };\n-  VERIFY( bitset<6>(s1, 3) == test01_ref<6>(s1, 3) );\n+  VERIFY( bitset<6>(s2, 3) == test01_ref<6>(s2, 3) );\n \n   const char* s3 = \"1110110\";\n   VERIFY( bitset<7>(s3) == test01_ref<7>(s3) );"}]}