{"sha": "2d593c86cfae119d9b8e765a07a952eda35ca5af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ1OTNjODZjZmFlMTE5ZDliOGU3NjVhMDdhOTUyZWRhMzVjYTVhZg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2008-02-26T16:05:24Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2008-02-26T16:05:24Z"}, "message": "system.h (USE_MAPPED_LOCATION): Poison.\n\ngcc\n\t* system.h (USE_MAPPED_LOCATION): Poison.\n\t* Makefile.in (GTFILES): Put CPP_ID_DATA_H first.\n\t* tree-cfg.c (make_cond_expr_edges): Remove old location code.\n\t(make_goto_expr_edges): Likewise.\n\t(remove_bb): Likewise.\n\t(execute_warn_function_return): Likewise.\n\t* basic-block.h (struct edge_def) <goto_locus>: Change type to\n\tlocation_t.\n\t* c-common.c (fname_decl): Remove old location code.\n\t* tree-vect-transform.c (vect_finish_stmt_generation): Remove old\n\tlocation code.\n\t* rtl.h (ASM_OPERANDS_SOURCE_LOCATION): Remove old-location\n\tvariant.\n\t(ASM_INPUT_SOURCE_LOCATION): Likewise.\n\t(gen_rtx_ASM_INPUT): Likewise.\n\t(gen_rtx_ASM_INPUT_loc): Likewise.\n\t(get_rtx_asm_OPERANDS): Remove.\n\t* cfglayout.c (insn_locators_alloc): Remove old location code.\n\t(set_curr_insn_source_location): Likewise.\n\t(curr_insn_locator): Likewise.\n\t* print-tree.c (print_node): Remove old location code.\n\t* tree-mudflap.c (mf_varname_tree): Remove old location code.\n\t(mf_file_function_line_tree): Remove test of USE_MAPPED_LOCATION.\n\t* cfgexpand.c (expand_gimple_cond_expr): Don't use\n\tlocation_from_locus.\n\t(construct_exit_block): Remove old location code.\n\t* emit-rtl.c (force_next_line_note): Remove old location code.\n\t* profile.c (branch_prob): Remove old location code.\n\t* tree-vectorizer.h (LOC, UNKNOWN_LOC, EXPR_LOC, LOC_FILE,\n\tLOC_LINE): Remove old-location variants.\n\t* langhooks.c (lhd_print_error_function): Remove old location\n\tcode.\n\t* configure, config.in: Rebuilt.\n\t* configure.ac (--enable-mapped-location): Remove.\n\t* c-decl.c (c_init_decl_processing): Remove old location code.\n\t(finish_function): Likewise.\n\t* recog.c (decode_asm_operands): Remove old location code.\n\t* c-pch.c (c_common_read_pch): Remove old location code.\n\t* rtl.def (ASM_INPUT, ASM_OPERANDS): Remove old location\n\tvariants.\n\t* gimple-low.c (lower_function_body): Remove old location code.\n\t* toplev.c (unknown_location): Remove.\n\t(push_srcloc): Remove old-location variant.\n\t(process_options): Remove old location code.\n\t(lang_dependent_init): Likewise.\n\t* input.h (UNKNOWN_LOCATION): Move definition.\n\t(location_t): Undeprecate.\n\t(source_locus): Remove.\n\t(location_from_locus): Remove.\n\t(struct location_s): Remove.\n\tRemove all old-location code.\n\t(input_line, input_filename): Remove.\n\t* final.c (final_scan_insn): Remove old location code.\n\t* diagnostic.c (diagnostic_build_prefix): Remove\n\tUSE_MAPPED_LOCATION test.\n\t* tree.h (gimple_stmt) <locus>: Now a location_t.\n\t(tree_exp) <locus>: Likewise.\n\t(DECL_IS_BUILTIN): Remove old-location variant.\n\t(annotate_with_file_line, annotate_with_locus): Likewise.\n\t(expr_locus, set_expr_locus): Update.\n\t* tree.c (build1_stat): Remove old location code.\n\t(last_annotated_node): Remove.\n\t(annotate_with_file_line): Remove old-location variant.\n\t(annotate_with_locus): Likewise.\n\t(expr_location): Remove old location code.\n\t(set_expr_location): Likewise.\n\t(expr_has_location): Likewise.\n\t(expr_locus): Likewise.\n\t(set_expr_locus): Likewise.\n\t(expr_filename): Don't use location_from_locus.\n\t(expr_lineno): Likewise.\n\t* rtl-error.c (location_for_asm): Remove old location code.\n\t* c-lex.c (cb_line_change): Remove old location code.\n\t(fe_file_change): Likewise.\n\t(cb_def_pragma): Likewise.\n\t(c_lex_with_flags): Likewise.\n\t* gengtype.c (do_typedef): Don't special-case location types.\n\t(define_location_structures): Remove.\n\t(main): Don't call define_location_structures.\n\t* tree-pretty-print.c (dump_implicit_edges): Remove old location\n\tcode.\ngcc/ada\n\t* misc.c (internal_error_function): Remove test of\n\tUSE_MAPPED_LOCATION.\n\t* trans.c (gigi): Remove test of USE_MAPPED_LOCATION.\n\t(Sloc_to_locus): Remove old location code.\ngcc/cp\n\t* parser.c (eof_token): Remove old location code.\n\t(check_empty_body): Remove test of USE_MAPPED_LOCATION.\n\t* decl2.c (generate_ctor_or_dtor_function): Remove old location\n\tcode.\n\t(cp_write_global_declarations): Likewise.\n\t* lex.c (cxx_init): Remove old location code.\n\t(handle_pragma_implementation): Remove test of\n\tUSE_MAPPED_LOCATION.\n\t* pt.c (tsubst): Remove old location code.\n\t* error.c (cp_print_error_function): Remove test of\n\tUSE_MAPPED_LOCATION.\n\t* decl.c (pop_label): Remove old location code.\n\t(finish_function): Likewise.\ngcc/fortran\n\t* trans-io.c (set_error_locus): Remove old location code.\n\t* trans-decl.c (gfc_set_decl_location): Remove old location code.\n\t* f95-lang.c (gfc_init): Remove test of USE_MAPPED_LOCATION.\n\t* scanner.c (gfc_gobble_whitespace): Remove old location code.\n\t(get_file): Likewise.\n\t(preprocessor_line): Likewise.\n\t(load_file): Likewise.\n\t(gfc_new_file): Likewise.\n\t* trans.c (gfc_trans_runtime_check): Remove old location code.\n\t(gfc_get_backend_locus): Likewise.\n\t(gfc_set_backend_locus): Likewise.\n\t* data.c (gfc_assign_data_value): Remove old location code.\n\t* error.c (show_locus): Remove old location code.\n\t* gfortran.h (gfc_linebuf): Remove old location code.\n\t(gfc_linebuf_linenum): Remove old-location variant.\ngcc/java\n\t* lang.c (java_post_options): Remove conditional.\n\t* expr.c (expand_byte_code): Remove old location code.\n\t* jcf-parse.c (set_source_filename): Remove old location code.\n\t(give_name_to_class): Likewise.\n\t(jcf_parse): Likewise.\n\t(duplicate_class_warning): Likewise.\n\t(parse_class_file): Likewise.\n\t(java_parse_file): Likewise.\n\t* decl.c (finish_method): Remove old location code.\n\t* class.c (push_class): Remove old location code.\ngcc/objc\n\t* objc-act.c (objc_init): Remove old location code.\ngcc/treelang\n\t* tree1.c (treelang_init): Remove old location code.\n\t(treelang_parse_file): Likewise.\n\t* lex.l (LINEMAP_POSITION_FOR_COLUMN): Remove.\n\t(update_lineno_charno): Remove old location code.\n\nFrom-SVN: r132679", "tree": {"sha": "f43ad37c53fe9e709732439c80643fe626116583", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f43ad37c53fe9e709732439c80643fe626116583"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d593c86cfae119d9b8e765a07a952eda35ca5af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d593c86cfae119d9b8e765a07a952eda35ca5af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d593c86cfae119d9b8e765a07a952eda35ca5af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d593c86cfae119d9b8e765a07a952eda35ca5af/comments", "author": null, "committer": null, "parents": [{"sha": "4f01eeb4b5a04e0f10d647b06dbeefdf6b88cf13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f01eeb4b5a04e0f10d647b06dbeefdf6b88cf13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f01eeb4b5a04e0f10d647b06dbeefdf6b88cf13"}], "stats": {"total": 1020, "additions": 235, "deletions": 785}, "files": [{"sha": "35ee86e328b02033b23d10df5e4c44272fa98616", "filename": "gcc/ChangeLog", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,3 +1,87 @@\n+2008-02-26  Tom Tromey  <tromey@redhat.com>\n+\n+\t* system.h (USE_MAPPED_LOCATION): Poison.\n+\t* Makefile.in (GTFILES): Put CPP_ID_DATA_H first.\n+\t* tree-cfg.c (make_cond_expr_edges): Remove old location code.\n+\t(make_goto_expr_edges): Likewise.\n+\t(remove_bb): Likewise.\n+\t(execute_warn_function_return): Likewise.\n+\t* basic-block.h (struct edge_def) <goto_locus>: Change type to\n+\tlocation_t.\n+\t* c-common.c (fname_decl): Remove old location code.\n+\t* tree-vect-transform.c (vect_finish_stmt_generation): Remove old\n+\tlocation code.\n+\t* rtl.h (ASM_OPERANDS_SOURCE_LOCATION): Remove old-location\n+\tvariant.\n+\t(ASM_INPUT_SOURCE_LOCATION): Likewise.\n+\t(gen_rtx_ASM_INPUT): Likewise.\n+\t(gen_rtx_ASM_INPUT_loc): Likewise.\n+\t(get_rtx_asm_OPERANDS): Remove.\n+\t* cfglayout.c (insn_locators_alloc): Remove old location code.\n+\t(set_curr_insn_source_location): Likewise.\n+\t(curr_insn_locator): Likewise.\n+\t* print-tree.c (print_node): Remove old location code.\n+\t* tree-mudflap.c (mf_varname_tree): Remove old location code.\n+\t(mf_file_function_line_tree): Remove test of USE_MAPPED_LOCATION.\n+\t* cfgexpand.c (expand_gimple_cond_expr): Don't use\n+\tlocation_from_locus.\n+\t(construct_exit_block): Remove old location code.\n+\t* emit-rtl.c (force_next_line_note): Remove old location code.\n+\t* profile.c (branch_prob): Remove old location code.\n+\t* tree-vectorizer.h (LOC, UNKNOWN_LOC, EXPR_LOC, LOC_FILE,\n+\tLOC_LINE): Remove old-location variants.\n+\t* langhooks.c (lhd_print_error_function): Remove old location\n+\tcode.\n+\t* configure, config.in: Rebuilt.\n+\t* configure.ac (--enable-mapped-location): Remove.\n+\t* c-decl.c (c_init_decl_processing): Remove old location code.\n+\t(finish_function): Likewise.\n+\t* recog.c (decode_asm_operands): Remove old location code.\n+\t* c-pch.c (c_common_read_pch): Remove old location code.\n+\t* rtl.def (ASM_INPUT, ASM_OPERANDS): Remove old location\n+\tvariants.\n+\t* gimple-low.c (lower_function_body): Remove old location code.\n+\t* toplev.c (unknown_location): Remove.\n+\t(push_srcloc): Remove old-location variant.\n+\t(process_options): Remove old location code.\n+\t(lang_dependent_init): Likewise.\n+\t* input.h (UNKNOWN_LOCATION): Move definition.\n+\t(location_t): Undeprecate.\n+\t(source_locus): Remove.\n+\t(location_from_locus): Remove.\n+\t(struct location_s): Remove.\n+\tRemove all old-location code.\n+\t(input_line, input_filename): Remove.\n+\t* final.c (final_scan_insn): Remove old location code.\n+\t* diagnostic.c (diagnostic_build_prefix): Remove\n+\tUSE_MAPPED_LOCATION test.\n+\t* tree.h (gimple_stmt) <locus>: Now a location_t.\n+\t(tree_exp) <locus>: Likewise.\n+\t(DECL_IS_BUILTIN): Remove old-location variant.\n+\t(annotate_with_file_line, annotate_with_locus): Likewise.\n+\t(expr_locus, set_expr_locus): Update.\n+\t* tree.c (build1_stat): Remove old location code.\n+\t(last_annotated_node): Remove.\n+\t(annotate_with_file_line): Remove old-location variant.\n+\t(annotate_with_locus): Likewise.\n+\t(expr_location): Remove old location code.\n+\t(set_expr_location): Likewise.\n+\t(expr_has_location): Likewise.\n+\t(expr_locus): Likewise.\n+\t(set_expr_locus): Likewise.\n+\t(expr_filename): Don't use location_from_locus.\n+\t(expr_lineno): Likewise.\n+\t* rtl-error.c (location_for_asm): Remove old location code.\n+\t* c-lex.c (cb_line_change): Remove old location code.\n+\t(fe_file_change): Likewise.\n+\t(cb_def_pragma): Likewise.\n+\t(c_lex_with_flags): Likewise.\n+\t* gengtype.c (do_typedef): Don't special-case location types.\n+\t(define_location_structures): Remove.\n+\t(main): Don't call define_location_structures.\n+\t* tree-pretty-print.c (dump_implicit_edges): Remove old location\n+\tcode.\n+\n 2008-02-26  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n         PR 26264"}, {"sha": "34ad39509ccec391d35801d25f79d41be1ed224d", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -3087,8 +3087,8 @@ s-constrs-h: $(MD_DEPS) build/genpreds$(build_exeext)\n \t$(SHELL) $(srcdir)/../move-if-change tmp-constrs.h tm-constrs.h\n \t$(STAMP) s-constrs-h\n \n-GTFILES = $(srcdir)/input.h $(srcdir)/coretypes.h \\\n-  $(CPP_ID_DATA_H) $(host_xm_file_list) \\\n+GTFILES = $(CPP_ID_DATA_H) $(srcdir)/input.h $(srcdir)/coretypes.h \\\n+  $(host_xm_file_list) \\\n   $(tm_file_list) $(HASHTAB_H) $(SPLAY_TREE_H) $(srcdir)/bitmap.h \\\n   $(srcdir)/alias.h $(srcdir)/coverage.c $(srcdir)/rtl.h \\\n   $(srcdir)/optabs.h $(srcdir)/tree.h $(srcdir)/function.h $(srcdir)/libfuncs.h $(SYMTAB_H) \\"}, {"sha": "148d066b42b57eed11f28883dae85c4e40d34a1a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,3 +1,10 @@\n+2008-02-26  Tom Tromey  <tromey@redhat.com>\n+\n+\t* misc.c (internal_error_function): Remove test of\n+\tUSE_MAPPED_LOCATION.\n+\t* trans.c (gigi): Remove test of USE_MAPPED_LOCATION.\n+\t(Sloc_to_locus): Remove old location code.\n+\n 2008-02-25  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* gnat_rm.texi, gnat_ugn.texi: Fix spacing after `e.g.' and"}, {"sha": "4ddf10f23a9bc9cba50eef8d45cf73d103bf5bb5", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -412,11 +412,9 @@ internal_error_function (const char *msgid, va_list *ap)\n   fp.Array = buffer;\n \n   s = expand_location (input_location);\n-#ifdef USE_MAPPED_LOCATION\n   if (flag_show_column && s.column != 0)\n     asprintf (&loc, \"%s:%d:%d\", s.file, s.line, s.column);\n   else\n-#endif\n     asprintf (&loc, \"%s:%d\", s.file, s.line);\n   temp_loc.Low_Bound = 1;\n   temp_loc.High_Bound = strlen (loc);"}, {"sha": "34cb297d24554ebd3f0f872067438bd32b96468e", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -244,7 +244,6 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name,\n \n   type_annotate_only = (gigi_operating_mode == 1);\n \n-#ifdef USE_MAPPED_LOCATION\n   for (i = 0; i < number_files; i++)\n     {\n       /* Use the identifier table to make a permanent copy of the filename as\n@@ -268,7 +267,6 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name,\n       linemap_position_for_column (line_table, 252 - 1);\n       linemap_add (line_table, LC_LEAVE, 0, NULL, 0);\n     }\n-#endif\n \n   /* Initialize ourselves.  */\n   init_code_table ();\n@@ -6650,7 +6648,6 @@ Sloc_to_locus (Source_Ptr Sloc, location_t *locus)\n     return false;\n \n   if (Sloc <= Standard_Location)\n-#ifdef USE_MAPPED_LOCATION\n     {\n       *locus = BUILTINS_LOCATION;\n       return false;\n@@ -6667,22 +6664,6 @@ Sloc_to_locus (Source_Ptr Sloc, location_t *locus)\n \t\t+ ((line - map->to_line) << map->column_bits)\n \t\t+ (column & ((1 << map->column_bits) - 1));\n     }\n-#else\n-  return false;\n-\n-  /* Use the identifier table to make a hashed, permanent copy of the filename,\n-     since the name table gets reallocated after Gigi returns but before all\n-     the debugging information is output. The __gnat_to_canonical_file_spec\n-     call translates filenames from pragmas Source_Reference that contain host\n-     style syntax not understood by gdb. */\n-  locus->file\n-    = IDENTIFIER_POINTER\n-      (get_identifier\n-       (__gnat_to_canonical_file_spec\n-\t(Get_Name_String (Full_Debug_Name (Get_Source_File_Index (Sloc))))));\n-\n-  locus->line = Get_Logical_Line_Number (Sloc);\n-#endif\n \n   ref_filename\n     = IDENTIFIER_POINTER"}, {"sha": "0261ef363bed6f7dcb272fa1d27a3e457f1c6035", "filename": "gcc/basic-block.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,6 +1,6 @@\n /* Define control and data flow tables, and regsets.\n    Copyright (C) 1987, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2005, 2006, 2007 Free Software Foundation, Inc.\n+   2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -130,7 +130,7 @@ struct edge_def GTY(())\n   PTR GTY ((skip (\"\"))) aux;\n \n   /* Location of any goto implicit in the edge, during tree-ssa.  */\n-  source_locus goto_locus;\n+  location_t goto_locus;\n \n   /* The index number corresponding to this edge in the edge vector\n      dest->preds.  */"}, {"sha": "9706d874456137251b73e31407319accbd247a7a", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -840,11 +840,7 @@ fname_decl (unsigned int rid, tree id)\n \t it from appearing in the RTL.  */\n       tree stmts;\n       location_t saved_location = input_location;\n-#ifdef USE_MAPPED_LOCATION\n       input_location = UNKNOWN_LOCATION;\n-#else\n-      input_line = 0;\n-#endif\n \n       stmts = push_stmt_list ();\n       decl = (*make_fname_decl) (id, fname_vars[ix].pretty);"}, {"sha": "7a600409cbb9bbf54d5c4bd29018b73e88adaad3", "filename": "gcc/c-decl.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -2760,12 +2760,7 @@ c_init_decl_processing (void)\n   /* Declarations from c_common_nodes_and_builtins must not be associated\n      with this input file, lest we get differences between using and not\n      using preprocessed headers.  */\n-#ifdef USE_MAPPED_LOCATION\n   input_location = BUILTINS_LOCATION;\n-#else\n-  input_location.file = \"<built-in>\";\n-  input_location.line = 0;\n-#endif\n \n   build_common_tree_nodes (flag_signed_char, false);\n \n@@ -6721,20 +6716,13 @@ finish_function (void)\n \t  if (flag_isoc99)\n \t    {\n \t      tree stmt = c_finish_return (integer_zero_node);\n-#ifdef USE_MAPPED_LOCATION\n \t      /* Hack.  We don't want the middle-end to warn that this return\n \t\t is unreachable, so we mark its location as special.  Using\n \t\t UNKNOWN_LOCATION has the problem that it gets clobbered in\n \t\t annotate_one_with_locus.  A cleaner solution might be to\n \t\t ensure ! should_carry_locus_p (stmt), but that needs a flag.\n \t      */\n \t      SET_EXPR_LOCATION (stmt, BUILTINS_LOCATION);\n-#else\n-\t      /* Hack.  We don't want the middle-end to warn that this\n-\t\t return is unreachable, so put the statement on the\n-\t\t special line 0.  */\n-\t      annotate_with_file_line (stmt, input_filename, 0);\n-#endif\n \t    }\n \t}\n     }"}, {"sha": "7bc283b1300b30cf03421d12f62dfd823174a91c", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 43, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,6 +1,6 @@\n /* Mainly the interface between cpplib and the C front ends.\n    Copyright (C) 1987, 1988, 1989, 1992, 1994, 1995, 1996, 1997\n-   1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007\n+   1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -190,15 +190,7 @@ cb_line_change (cpp_reader * ARG_UNUSED (pfile), const cpp_token *token,\n \t\tint parsing_args)\n {\n   if (token->type != CPP_EOF && !parsing_args)\n-#ifdef USE_MAPPED_LOCATION\n     input_location = token->src_loc;\n-#else\n-    {\n-      source_location loc = token->src_loc;\n-      const struct line_map *map = linemap_lookup (line_table, loc);\n-      input_line = SOURCE_LINE (map, loc);\n-    }\n-#endif\n }\n \n void\n@@ -213,17 +205,10 @@ fe_file_change (const struct line_map *new_map)\n \t we already did in compile_file.  */\n       if (!MAIN_FILE_P (new_map))\n \t{\n-#ifdef USE_MAPPED_LOCATION\n \t  int included_at = LAST_SOURCE_LINE_LOCATION (new_map - 1);\n \n \t  input_location = included_at;\n \t  push_srcloc (new_map->start_location);\n-#else\n-\t  int included_at = LAST_SOURCE_LINE (new_map - 1);\n-\n-\t  input_line = included_at;\n-\t  push_srcloc (new_map->to_file, 1);\n-#endif\n \t  (*debug_hooks->start_source_file) (included_at, new_map->to_file);\n #ifndef NO_IMPLICIT_EXTERN_C\n \t  if (c_header_level)\n@@ -253,12 +238,7 @@ fe_file_change (const struct line_map *new_map)\n \n   update_header_times (new_map->to_file);\n   in_system_header = new_map->sysp != 0;\n-#ifdef USE_MAPPED_LOCATION\n   input_location = new_map->start_location;\n-#else\n-  input_filename = new_map->to_file;\n-  input_line = new_map->to_line;\n-#endif\n }\n \n static void\n@@ -271,14 +251,7 @@ cb_def_pragma (cpp_reader *pfile, source_location loc)\n     {\n       const unsigned char *space, *name;\n       const cpp_token *s;\n-#ifndef USE_MAPPED_LOCATION\n-      location_t fe_loc;\n-      const struct line_map *map = linemap_lookup (line_table, loc);\n-      fe_loc.file = map->to_file;\n-      fe_loc.line = SOURCE_LINE (map, loc);\n-#else\n       location_t fe_loc = loc;\n-#endif\n \n       space = name = (const unsigned char *) \"\";\n       s = cpp_get_token (pfile);\n@@ -329,12 +302,7 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags,\n \n   timevar_push (TV_CPP);\n  retry:\n-#ifdef USE_MAPPED_LOCATION\n   tok = cpp_get_token_with_location (parse_in, loc);\n-#else\n-  tok = cpp_get_token (parse_in);\n-  *loc = input_location;\n-#endif\n   type = tok->type;\n \n  retry_after_at:\n@@ -381,19 +349,11 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags,\n       /* An @ may give the next token special significance in Objective-C.  */\n       if (c_dialect_objc ())\n \t{\n-#ifdef USE_MAPPED_LOCATION\n \t  location_t atloc = *loc;\n \t  location_t newloc;\n-#else\n-\t  location_t atloc = input_location;\n-#endif\n \n \tretry_at:\n-#ifdef USE_MAPPED_LOCATION\n \t  tok = cpp_get_token_with_location (parse_in, &newloc);\n-#else\n-\t  tok = cpp_get_token (parse_in);\n-#endif\n \t  type = tok->type;\n \t  switch (type)\n \t    {\n@@ -417,9 +377,7 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags,\n \t    default:\n \t      /* ... or not.  */\n \t      error (\"%Hstray %<@%> in program\", &atloc);\n-#ifdef USE_MAPPED_LOCATION\n \t      *loc = newloc;\n-#endif\n \t      goto retry_after_at;\n \t    }\n \t  break;"}, {"sha": "691e12a2f797e619cda522bf377f3a46effc330a", "filename": "gcc/c-pch.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pch.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,5 +1,5 @@\n /* Precompiled header implementation for the C languages.\n-   Copyright (C) 2000, 2002, 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2002, 2003, 2004, 2005, 2007, 2008 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -410,16 +410,7 @@ c_common_read_pch (cpp_reader *pfile, const char *name,\n     }\n \n   /* Save the location and then restore it after reading the PCH.  */\n-#ifdef USE_MAPPED_LOCATION\n   saved_loc = expand_location (line_table->highest_line);\n-#else\n-  {\n-    const struct line_map *map = linemap_lookup (line_table,\n-\t\t\t\t\t\t line_table->highest_line);\n-    saved_loc.file = map->to_file;\n-    saved_loc.line = SOURCE_LINE (map, line_table->highest_line);\n-  }\n-#endif\n \n   cpp_prepare_state (pfile, &smd);\n "}, {"sha": "943a0704168e200d5bc4cf11ef16d553c5349237", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,5 +1,5 @@\n /* A pass for lowering trees to RTL.\n-   Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -1316,7 +1316,7 @@ expand_gimple_cond_expr (basic_block bb, tree stmt)\n       add_reg_br_prob_note (last, true_edge->probability);\n       maybe_dump_rtl_for_tree_stmt (stmt, last);\n       if (true_edge->goto_locus)\n-  \tset_curr_insn_source_location (location_from_locus (true_edge->goto_locus));\n+  \tset_curr_insn_source_location (true_edge->goto_locus);\n       false_edge->flags |= EDGE_FALLTHRU;\n       return NULL;\n     }\n@@ -1326,7 +1326,7 @@ expand_gimple_cond_expr (basic_block bb, tree stmt)\n       add_reg_br_prob_note (last, false_edge->probability);\n       maybe_dump_rtl_for_tree_stmt (stmt, last);\n       if (false_edge->goto_locus)\n-  \tset_curr_insn_source_location (location_from_locus (false_edge->goto_locus));\n+  \tset_curr_insn_source_location (false_edge->goto_locus);\n       true_edge->flags |= EDGE_FALLTHRU;\n       return NULL;\n     }\n@@ -1357,7 +1357,7 @@ expand_gimple_cond_expr (basic_block bb, tree stmt)\n   maybe_dump_rtl_for_tree_stmt (stmt, last2);\n \n   if (false_edge->goto_locus)\n-    set_curr_insn_source_location (location_from_locus (false_edge->goto_locus));\n+    set_curr_insn_source_location (false_edge->goto_locus);\n \n   return new_bb;\n }\n@@ -1624,7 +1624,7 @@ expand_gimple_basic_block (basic_block bb)\n     {\n       emit_jump (label_rtx_for_bb (e->dest));\n       if (e->goto_locus)\n-        set_curr_insn_source_location (location_from_locus (e->goto_locus));\n+        set_curr_insn_source_location (e->goto_locus);\n       e->flags &= ~EDGE_FALLTHRU;\n     }\n \n@@ -1724,11 +1724,7 @@ construct_exit_block (void)\n \n   /* Make sure the locus is set to the end of the function, so that\n      epilogue line numbers and warnings are set properly.  */\n-#ifdef USE_MAPPED_LOCATION\n   if (cfun->function_end_locus != UNKNOWN_LOCATION)\n-#else\n-  if (cfun->function_end_locus.file)\n-#endif\n     input_location = cfun->function_end_locus;\n \n   /* The following insns belong to the top scope.  */"}, {"sha": "5387b3882601fb8134df6539f6351a3bb114a902", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,5 +1,5 @@\n /* Basic block reordering routines for the GNU compiler.\n-   Copyright (C) 2000, 2001, 2003, 2004, 2005, 2006, 2007\n+   Copyright (C) 2000, 2001, 2003, 2004, 2005, 2006, 2007, 2008\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -255,13 +255,8 @@ insn_locators_alloc (void)\n   locations_locators_locs = VEC_alloc (int, heap, 32);\n   locations_locators_vals = VEC_alloc (location_t, heap, 32);\n \n-#ifdef USE_MAPPED_LOCATION\n   last_location = -1;\n   curr_location = -1;\n-#else\n-  last_location.line = -1;\n-  curr_location.line = -1;\n-#endif\n   curr_block = NULL;\n   last_block = NULL;\n   curr_rtl_loc = 0;\n@@ -284,15 +279,8 @@ set_curr_insn_source_location (location_t location)\n      time locators are not initialized.  */\n   if (curr_rtl_loc == -1)\n     return;\n-#ifdef USE_MAPPED_LOCATION\n   if (location == last_location)\n     return;\n-#else\n-  if (location.file && last_location.file\n-      && !strcmp (location.file, last_location.file)\n-      && location.line == last_location.line)\n-    return;\n-#endif\n   curr_location = location;\n }\n \n@@ -321,12 +309,7 @@ curr_insn_locator (void)\n       VEC_safe_push (tree, gc, block_locators_blocks, curr_block);\n       last_block = curr_block;\n     }\n-#ifdef USE_MAPPED_LOCATION\n   if (last_location != curr_location)\n-#else\n-  if (last_location.file != curr_location.file\n-      || last_location.line != curr_location.line)\n-#endif\n     {\n       curr_rtl_loc++;\n       VEC_safe_push (int, heap, locations_locators_locs, curr_rtl_loc);"}, {"sha": "37fbe453e5d2b2e0edbdf9e34d2c146bf91f5a5d", "filename": "gcc/config.in", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1448,12 +1448,6 @@\n #endif\n \n \n-/* Define if location_t is fileline integer cookie. */\n-#ifndef USED_FOR_TARGET\n-#undef USE_MAPPED_LOCATION\n-#endif\n-\n-\n /* Define to be the last component of the Windows registry key under which to\n    look for installation paths. The full key used will be\n    HKEY_LOCAL_MACHINE/SOFTWARE/Free Software Foundation/{WIN32_REGISTRY_KEY}."}, {"sha": "ea8549a122611abdcce03fd6da171991d183b11f", "filename": "gcc/configure", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -869,7 +869,6 @@ Optional Features:\n \t\t\t  Categories are: yes,no,all,none,release.\n \t\t\t  Flags are: assert,df,fold,gc,gcac,misc,\n \t\t\t  rtlflag,rtl,runtime,tree,valgrind,types.\n-  --enable-mapped-location   location_t is fileline integer cookie\n   --enable-coverage=LEVEL\n \t\t\t  enable compiler's code coverage collection.\n \t\t\t  Use to measure compiler performance and locate\n@@ -6895,22 +6894,6 @@ fi\n \n \n \n-# Check whether --enable-mapped-location or --disable-mapped-location was given.\n-if test \"${enable_mapped_location+set}\" = set; then\n-  enableval=\"$enable_mapped_location\"\n-\n-else\n-  enable_mapped_location=yes\n-fi;\n-\n-if test \"$enable_mapped_location\" = yes ; then\n-\n-cat >>confdefs.h <<\\_ACEOF\n-#define USE_MAPPED_LOCATION 1\n-_ACEOF\n-\n-fi\n-\n # Enable code coverage collection\n # Check whether --enable-coverage or --disable-coverage was given.\n if test \"${enable_coverage+set}\" = set; then"}, {"sha": "118d9b2a77bb53f9d0578caeaf82cec53cbe8a1b", "filename": "gcc/configure.ac", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -523,15 +523,6 @@ fi\n AC_SUBST(valgrind_path_defines)\n AC_SUBST(valgrind_command)\n \n-AC_ARG_ENABLE(mapped-location,\n-[  --enable-mapped-location   location_t is fileline integer cookie],,\n-enable_mapped_location=yes)\n-\n-if test \"$enable_mapped_location\" = yes ; then\n-  AC_DEFINE(USE_MAPPED_LOCATION, 1,\n-[Define if location_t is fileline integer cookie.])\n-fi\n-\n # Enable code coverage collection\n AC_ARG_ENABLE(coverage,\n [  --enable-coverage[=LEVEL]"}, {"sha": "f56c61c7310beef5e292192a4b134560b7f4c762", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,3 +1,19 @@\n+2008-02-26  Tom Tromey  <tromey@redhat.com>\n+\n+\t* parser.c (eof_token): Remove old location code.\n+\t(check_empty_body): Remove test of USE_MAPPED_LOCATION.\n+\t* decl2.c (generate_ctor_or_dtor_function): Remove old location\n+\tcode.\n+\t(cp_write_global_declarations): Likewise.\n+\t* lex.c (cxx_init): Remove old location code.\n+\t(handle_pragma_implementation): Remove test of\n+\tUSE_MAPPED_LOCATION.\n+\t* pt.c (tsubst): Remove old location code.\n+\t* error.c (cp_print_error_function): Remove test of\n+\tUSE_MAPPED_LOCATION.\n+\t* decl.c (pop_label): Remove old location code.\n+\t(finish_function): Likewise.\n+\n 2008-02-26  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 26264"}, {"sha": "5a5a81a4d01e0ab7cb0110b5bcc1cd00b5e3fae0", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -357,12 +357,7 @@ pop_label (tree label, tree old_value)\n \t  location_t location;\n \n \t  error (\"label %q+D used but not defined\", label);\n-#ifdef USE_MAPPED_LOCATION\n \t  location = input_location; /* FIXME want (input_filename, (line)0) */\n-#else\n-\t  location.file = input_filename;\n-\t  location.line = 0;\n-#endif\n \t  /* Avoid crashing later.  */\n \t  define_label (location, DECL_NAME (label));\n \t}\n@@ -11807,14 +11802,10 @@ finish_function (int flags)\n \t  /* Hack.  We don't want the middle-end to warn that this\n \t     return is unreachable, so put the statement on the\n \t     special line 0.  */\n-#ifdef USE_MAPPED_LOCATION\n \t  {\n \t    location_t linezero = linemap_line_start (line_table, 0, 1);\n \t    SET_EXPR_LOCATION (stmt, linezero);\n \t  }\n-#else\n-\t  annotate_with_file_line (stmt, input_filename, 0);\n-#endif\n \t}\n \n       if (use_eh_spec_block (current_function_decl))"}, {"sha": "d7e3d766ca7dd7c37b00999813e66e735314a7ac", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,6 +1,6 @@\n /* Process declarations and variables for C++ compiler.\n    Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007  Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008  Free Software Foundation, Inc.\n    Hacked by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GCC.\n@@ -2995,11 +2995,8 @@ generate_ctor_or_dtor_function (bool constructor_p, int priority,\n   size_t i;\n \n   input_location = *locus;\n-#ifdef USE_MAPPED_LOCATION\n   /* ??? */\n-#else\n-  locus->line++;\n-#endif\n+  /* Was: locus->line++; */\n \n   /* We use `I' to indicate initialization and `D' to indicate\n      destruction.  */\n@@ -3179,13 +3176,7 @@ cp_write_global_declarations (void)\n   if (pch_file)\n     c_common_write_pch ();\n \n-#ifdef USE_MAPPED_LOCATION\n-  /* FIXME - huh? */\n-#else\n-  /* Otherwise, GDB can get confused, because in only knows\n-     about source for LINENO-1 lines.  */\n-  input_line -= 1;\n-#endif\n+  /* FIXME - huh?  was  input_line -= 1;*/\n \n   /* We now have to write out all the stuff we put off writing out.\n      These include:\n@@ -3318,11 +3309,7 @@ cp_write_global_declarations (void)\n \t     instantiations, etc.  */\n \t  reconsider = true;\n \t  ssdf_count++;\n-#ifdef USE_MAPPED_LOCATION\n-\t  /* ??? */\n-#else\n-\t  locus.line++;\n-#endif\n+\t  /* ??? was:  locus.line++; */\n \t}\n \n       /* Go through the set of inline functions whose bodies have not"}, {"sha": "0893f801565d7488660667c9d3b643f7751c5736", "filename": "gcc/cp/error.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -2436,14 +2436,12 @@ cp_print_error_function (diagnostic_context *context,\n \t\t  pp_base_newline (context->printer);\n \t\t  if (s.file != NULL)\n \t\t    {\n-#ifdef USE_MAPPED_LOCATION\n \t\t      if (flag_show_column && s.column != 0)\n \t\t\tpp_printf (context->printer,\n \t\t\t\t   \"    inlined from %qs at %s:%d:%d\",\n \t\t\t\t   cxx_printable_name (fndecl, 2),\n \t\t\t\t   s.file, s.line, s.column);\n \t\t      else\n-#endif\n \t\t\tpp_printf (context->printer,\n \t\t\t\t   \"    inlined from %qs at %s:%d\",\n \t\t\t\t   cxx_printable_name (fndecl, 2),"}, {"sha": "2558a78dbf7a2324ee920c6a0d56c503077332a8", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,6 +1,6 @@\n /* Separate lexical analyzer for GNU C++.\n    Copyright (C) 1987, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008\n    Free Software Foundation, Inc.\n    Hacked by Michael Tiemann (tiemann@cygnus.com)\n \n@@ -385,14 +385,7 @@ cxx_init (void)\n   for (i = 0; i < ARRAY_SIZE (stmt_codes); i++)\n     statement_code_p[stmt_codes[i]] = true;\n \n-  /* We cannot just assign to input_filename because it has already\n-     been initialized and will be used later as an N_BINCL for stabs+\n-     debugging.  */\n-#ifdef USE_MAPPED_LOCATION\n   push_srcloc (BUILTINS_LOCATION);\n-#else\n-  push_srcloc (\"<built-in>\", 0);\n-#endif\n \n   init_reswords ();\n   init_tree ();\n@@ -572,17 +565,9 @@ handle_pragma_implementation (cpp_reader* dfile ATTRIBUTE_UNUSED )\n   else\n     {\n       filename = ggc_strdup (TREE_STRING_POINTER (fname));\n-#ifdef USE_MAPPED_LOCATION\n-      /* We currently cannot give this diagnostic, as we reach this point\n-\t only after cpplib has scanned the entire translation unit, so\n-\t cpp_included always returns true.  A plausible fix is to compare\n-\t the current source-location cookie with the first source-location\n-\t cookie (if any) of the filename, but this requires completing the\n-\t --enable-mapped-location project first.  See PR 17577.  */\n       if (cpp_included_before (parse_in, filename, input_location))\n \twarning (0, \"#pragma implementation for %qs appears after \"\n \t\t \"file is included\", filename);\n-#endif\n     }\n \n   for (; ifiles; ifiles = ifiles->next)"}, {"sha": "77542bfb9f1046cabddf20e7f701a97a8684fddc", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -100,11 +100,7 @@ DEF_VEC_ALLOC_P (cp_token_position,heap);\n static cp_token eof_token =\n {\n   CPP_EOF, RID_MAX, 0, PRAGMA_NONE, 0, 0, false, 0, { NULL },\n-#if USE_MAPPED_LOCATION\n   0\n-#else\n-  {0, 0}\n-#endif\n };\n \n /* The cp_lexer structure represents the C++ lexer.  It is responsible\n@@ -7206,10 +7202,7 @@ check_empty_body (cp_parser* parser, const char* type)\n \n   semi_loc =  expand_location (token->location);\n   if (close_loc.line == semi_loc.line\n-#ifdef USE_MAPPED_LOCATION\n-      && close_loc.column+1 == semi_loc.column\n-#endif\n-      )\n+      && close_loc.column+1 == semi_loc.column)\n     warning (OPT_Wempty_body,\n \t     \"suggest a space before %<;%> or explicit braces around empty \"\n \t     \"body in %<%s%> statement\","}, {"sha": "ade17a5ceddc4ca0a216a45eabd974edbc298c4f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -9156,13 +9156,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t       message to avoid spewing a ton of messages during a\n \t       single bad template instantiation.  */\n \t    if (complain & tf_error\n-#ifdef USE_MAPPED_LOCATION\n-\t\t&& last_loc != input_location\n-#else\n-\t\t&& (last_loc.line != input_line\n-\t\t    || last_loc.file != input_filename)\n-#endif\n-\t\t  )\n+\t\t&& last_loc != input_location)\n \t      {\n \t\tif (TREE_CODE (type) == VOID_TYPE)\n \t\t  error (\"forming reference to void\");"}, {"sha": "05f153387d7120d5693b047fea560892b6ad49c7", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,5 +1,5 @@\n /* Language-independent diagnostic subroutines for the GNU Compiler Collection\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n    Free Software Foundation, Inc.\n    Contributed by Gabriel Dos Reis <gdr@codesourcery.com>\n \n@@ -157,10 +157,8 @@ diagnostic_build_prefix (diagnostic_info *diagnostic)\n   return\n     (s.file == NULL\n      ? build_message_string (\"%s: %s\", progname, text)\n-#ifdef USE_MAPPED_LOCATION\n      : flag_show_column && s.column != 0\n      ? build_message_string (\"%s:%d:%d: %s\", s.file, s.line, s.column, text)\n-#endif\n      : build_message_string (\"%s:%d: %s\", s.file, s.line, text));\n }\n "}, {"sha": "36997cd77a627d5a48dd814df3e2da90d536a330", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,6 +1,6 @@\n /* Emit RTL for the GCC expander.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -4533,11 +4533,7 @@ emit_note (enum insn_note kind)\n void\n force_next_line_note (void)\n {\n-#ifdef USE_MAPPED_LOCATION\n   last_location = -1;\n-#else\n-  last_location.line = -1;\n-#endif\n }\n \n /* Place a note of KIND on insn INSN with DATUM as the datum. If a"}, {"sha": "05d60d5d68d4908b93f9afaf95a3fb7b1f54b1c1", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,6 +1,6 @@\n /* Convert RTL to assembler code and output it, for GNU compiler.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,\n-   1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+   1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -2192,12 +2192,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t\t    fputs (ASM_APP_ON, file);\n \t\t    app_on = 1;\n \t\t  }\n-#ifdef USE_MAPPED_LOCATION\n \t\tloc = expand_location (ASM_INPUT_SOURCE_LOCATION (body));\n-#else\n-\t\tloc.file = ASM_INPUT_SOURCE_FILE (body);\n-\t\tloc.line = ASM_INPUT_SOURCE_LINE (body);\n-#endif\n \t\tif (*loc.file && loc.line)\n \t\t  fprintf (asm_out_file, \"%s %i \\\"%s\\\" 1\\n\",\n \t\t\t   ASM_COMMENT_START, loc.line, loc.file);"}, {"sha": "aef1c7934f7eebeb93673dd85823dd486fa229dc", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,3 +1,21 @@\n+2008-02-26  Tom Tromey  <tromey@redhat.com>\n+\n+\t* trans-io.c (set_error_locus): Remove old location code.\n+\t* trans-decl.c (gfc_set_decl_location): Remove old location code.\n+\t* f95-lang.c (gfc_init): Remove test of USE_MAPPED_LOCATION.\n+\t* scanner.c (gfc_gobble_whitespace): Remove old location code.\n+\t(get_file): Likewise.\n+\t(preprocessor_line): Likewise.\n+\t(load_file): Likewise.\n+\t(gfc_new_file): Likewise.\n+\t* trans.c (gfc_trans_runtime_check): Remove old location code.\n+\t(gfc_get_backend_locus): Likewise.\n+\t(gfc_set_backend_locus): Likewise.\n+\t* data.c (gfc_assign_data_value): Remove old location code.\n+\t* error.c (show_locus): Remove old location code.\n+\t* gfortran.h (gfc_linebuf): Remove old location code.\n+\t(gfc_linebuf_linenum): Remove old-location variant.\n+\n 2008-02-25  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/34729"}, {"sha": "13af445dfd441984fc147552c109d898b8b21513", "filename": "gcc/fortran/data.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ffortran%2Fdata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ffortran%2Fdata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdata.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -424,14 +424,9 @@ gfc_assign_data_value (gfc_expr *lvalue, gfc_expr *rvalue, mpz_t index)\n \t  /* Order in which the expressions arrive here depends on whether\n \t     they are from data statements or F95 style declarations.\n \t     Therefore, check which is the most recent.  */\n-#ifdef USE_MAPPED_LOCATION\n \t  expr = (LOCATION_LINE (init->where.lb->location)\n \t\t  > LOCATION_LINE (rvalue->where.lb->location))\n \t       ? init : rvalue;\n-#else\n-\t  expr = (init->where.lb->linenum > rvalue->where.lb->linenum)\n-\t       ? init : rvalue;\n-#endif\n \t  gfc_notify_std (GFC_STD_GNU, \"Extension: re-initialization \"\n \t\t\t  \"of '%s' at %L\", symbol->name, &expr->where);\n \t}"}, {"sha": "669c2d47a6b18b550caf7f7ad3adb15de7803a64", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -182,11 +182,7 @@ show_locus (locus *loc, int c1, int c2)\n   error_string (f->filename);\n   error_char (':');\n     \n-#ifdef USE_MAPPED_LOCATION\n   error_integer (LOCATION_LINE (lb->location));\n-#else\n-  error_integer (lb->linenum);\n-#endif\n \n   if ((c1 > 0) || (c2 > 0))\n     error_char ('.');"}, {"sha": "643f41865e4894f1b29979353825e96902225cdc", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -276,10 +276,8 @@ gfc_be_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n static bool\n gfc_init (void)\n {\n-#ifdef USE_MAPPED_LOCATION\n   linemap_add (line_table, LC_ENTER, false, gfc_source_file, 1);\n   linemap_add (line_table, LC_RENAME, false, \"<built-in>\", 0);\n-#endif\n \n   /* First initialize the backend.  */\n   gfc_init_decl_processing ();"}, {"sha": "cc749792604a4bdc88d744e74ad92827837196f7", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -713,11 +713,7 @@ typedef struct gfc_file\n \n typedef struct gfc_linebuf\n {\n-#ifdef USE_MAPPED_LOCATION\n   source_location location;\n-#else\n-  int linenum;\n-#endif\n   struct gfc_file *file;\n   struct gfc_linebuf *next;\n \n@@ -729,11 +725,7 @@ typedef struct gfc_linebuf\n \n #define gfc_linebuf_header_size (offsetof (gfc_linebuf, line))\n \n-#ifdef USE_MAPPED_LOCATION\n #define gfc_linebuf_linenum(LBUF) (LOCATION_LINE ((LBUF)->location))\n-#else\n-#define gfc_linebuf_linenum(LBUF) ((LBUF)->linenum)\n-#endif\n \n typedef struct\n {"}, {"sha": "b93e1c65478172dca8bb5d00e5d889dc47dc820b", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1064,11 +1064,7 @@ gfc_gobble_whitespace (void)\n \t line will be scanned multiple times.  */\n       if (!gfc_option.warn_tabs && c == '\\t')\n \t{\n-#ifdef USE_MAPPED_LOCATION\n \t  int cur_linenum = LOCATION_LINE (gfc_current_locus.lb->location);\n-#else\n-\t  int cur_linenum = gfc_current_locus.lb->linenum;\n-#endif\n \t  if (cur_linenum != linenum)\n \t    {\n \t      linenum = cur_linenum;\n@@ -1285,9 +1281,7 @@ get_file (const char *name, enum lc_reason reason ATTRIBUTE_UNUSED)\n   if (current_file != NULL)\n     f->inclusion_line = current_file->line;\n \n-#ifdef USE_MAPPED_LOCATION\n   linemap_add (line_table, reason, false, f->filename, 1);\n-#endif\n \n   return f;\n }\n@@ -1412,10 +1406,8 @@ preprocessor_line (char *c)\n \n       add_file_change (NULL, line);\n       current_file = current_file->up;\n-#ifdef USE_MAPPED_LOCATION\n       linemap_add (line_table, LC_RENAME, false, current_file->filename,\n \t\t   current_file->line);\n-#endif\n     }\n \n   /* The name of the file can be a temporary file produced by\n@@ -1645,12 +1637,8 @@ load_file (const char *filename, bool initial)\n \n       b = gfc_getmem (gfc_linebuf_header_size + len + 1);\n \n-#ifdef USE_MAPPED_LOCATION\n       b->location\n \t= linemap_line_start (line_table, current_file->line++, 120);\n-#else\n-      b->linenum = current_file->line++;\n-#endif\n       b->file = current_file;\n       b->truncated = trunc;\n       strcpy (b->line, line);\n@@ -1674,9 +1662,7 @@ load_file (const char *filename, bool initial)\n   if (!initial)\n     add_file_change (NULL, current_file->inclusion_line + 1);\n   current_file = current_file->up;\n-#ifdef USE_MAPPED_LOCATION\n   linemap_add (line_table, LC_LEAVE, 0, NULL, 0);\n-#endif\n   return SUCCESS;\n }\n \n@@ -1699,13 +1685,8 @@ gfc_new_file (void)\n #if 0 /* Debugging aid.  */\n   for (; line_head; line_head = line_head->next)\n     gfc_status (\"%s:%3d %s\\n\",\n-#ifdef USE_MAPPED_LOCATION\n \t\tLOCATION_FILE (line_head->location),\n \t\tLOCATION_LINE (line_head->location),\n-#else\n-\t\tline_head->file->filename, \n-\t\tline_head->linenum,\n-#endif\n \t\tline_head->line);\n \n   exit (0);"}, {"sha": "70609aca13559dd502309961371d312f16e59f1c", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -224,12 +224,7 @@ gfc_get_return_label (void)\n void\n gfc_set_decl_location (tree decl, locus * loc)\n {\n-#ifdef USE_MAPPED_LOCATION\n   DECL_SOURCE_LOCATION (decl) = loc->lb->location;\n-#else\n-  DECL_SOURCE_LINE (decl) = loc->lb->linenum;\n-  DECL_SOURCE_FILE (decl) = loc->lb->file->filename;\n-#endif\n }\n \n "}, {"sha": "f5f1df0c7c2e4db15e4affcdc0f8b426e451a06c", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -851,11 +851,7 @@ set_error_locus (stmtblock_t * block, tree var, locus * where)\n   str = gfc_build_addr_expr (pchar_type_node, str);\n   gfc_add_modify_expr (block, locus_file, str);\n \n-#ifdef USE_MAPPED_LOCATION\n   line = LOCATION_LINE (where->lb->location);\n-#else\n-  line = where->lb->linenum;\n-#endif\n   set_parameter_const (block, var, IOPARM_common_line, line);\n }\n "}, {"sha": "36a7f122c0b7dd16a7d742c5932be647912dd312", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -382,11 +382,7 @@ gfc_trans_runtime_check (tree cond, stmtblock_t * pblock, locus * where,\n \n   if (where)\n     {\n-#ifdef USE_MAPPED_LOCATION\n       line = LOCATION_LINE (where->lb->location);\n-#else \n-      line = where->lb->linenum;\n-#endif\n       asprintf (&message, \"At line %d of file %s\",  line,\n \t\twhere->lb->file->filename);\n     }\n@@ -940,11 +936,7 @@ void\n gfc_get_backend_locus (locus * loc)\n {\n   loc->lb = gfc_getmem (sizeof (gfc_linebuf));    \n-#ifdef USE_MAPPED_LOCATION\n   loc->lb->location = input_location;\n-#else\n-  loc->lb->linenum = input_line;\n-#endif\n   loc->lb->file = gfc_current_backend_file;\n }\n \n@@ -955,12 +947,7 @@ void\n gfc_set_backend_locus (locus * loc)\n {\n   gfc_current_backend_file = loc->lb->file;\n-#ifdef USE_MAPPED_LOCATION\n   input_location = loc->lb->location;\n-#else\n-  input_line = loc->lb->linenum;\n-  input_filename = loc->lb->file->filename;\n-#endif\n }\n \n "}, {"sha": "e136a13d7441faf43dc43b16696e4c201bcaa366", "filename": "gcc/gengtype.c", "status": "modified", "additions": 6, "deletions": 42, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,5 +1,5 @@\n /* Process source files and output type information.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008\n    Free Software Foundation, Inc.\n \n    This file is part of GCC.\n@@ -521,16 +521,11 @@ do_typedef (const char *s, type_p t, struct fileloc *pos)\n {\n   pair_p p;\n \n-  /* temporary kludge - gengtype doesn't handle conditionals or macros.\n-     Ignore any attempt to typedef CUMULATIVE_ARGS, location_t,\n-     expanded_location, or source_locus, unless it is coming from\n-     this file (main() sets them up with safe dummy definitions).  */\n-  if ((!strcmp (s, \"CUMULATIVE_ARGS\")\n-       || !strcmp (s, \"location_t\")\n-       || !strcmp (s, \"source_locus\")\n-       || !strcmp (s, \"source_location\")\n-       || !strcmp (s, \"expanded_location\"))\n-      && pos->file != this_file)\n+  /* temporary kludge - gengtype doesn't handle conditionals or\n+     macros.  Ignore any attempt to typedef CUMULATIVE_ARGS, unless it\n+     is coming from this file (main() sets them up with safe dummy\n+     definitions).  */\n+  if (!strcmp (s, \"CUMULATIVE_ARGS\") && pos->file != this_file)\n     return;\n \n   for (p = typedefs; p != NULL; p = p->next)\n@@ -3478,36 +3473,6 @@ note_def_vec_alloc (const char *type, const char *astrat, struct fileloc *pos)\n   do_typedef (astratname, new_structure (astratname, 0, pos, field, 0), pos);\n }\n \n-/* Yet more temporary kludge since gengtype doesn't understand conditionals.\n-   This must be kept in sync with input.h.  */\n-static void\n-define_location_structures (void)\n-{\n-  pair_p fields;\n-  type_p locs;\n-  static struct fileloc pos = { this_file, __LINE__ };\n-  do_scalar_typedef (\"source_location\", &pos);\n-\n-#ifdef USE_MAPPED_LOCATION\n-    fields = create_field (0, &scalar_nonchar, \"column\");\n-    fields = create_field (fields, &scalar_nonchar, \"line\");\n-    fields = create_field (fields, &string_type, \"file\");\n-    locs = new_structure (\"anon:expanded_location\", 0, &pos, fields, 0);\n-\n-    do_typedef (\"expanded_location\", locs, &pos);\n-    do_scalar_typedef (\"location_t\", &pos);\n-    do_scalar_typedef (\"source_locus\", &pos);\n-#else\n-    fields = create_field (0, &scalar_nonchar, \"line\");\n-    fields = create_field (fields, &string_type, \"file\");\n-    locs = new_structure (\"location_s\", 0, &pos, fields, 0);\n-\n-    do_typedef (\"expanded_location\", locs, &pos);\n-    do_typedef (\"location_t\", locs, &pos);\n-    do_typedef (\"source_locus\", create_pointer (locs), &pos);\n-#endif\n-}\n-\n \f\n int\n main (int argc, char **argv)\n@@ -3544,7 +3509,6 @@ main (int argc, char **argv)\n   do_scalar_typedef (\"JCF_u2\", &pos); pos.line++;\n   do_scalar_typedef (\"void\", &pos); pos.line++;\n   do_typedef (\"PTR\", create_pointer (resolve_typedef (\"void\", &pos)), &pos);\n-  define_location_structures ();\n \n   for (i = 0; i < num_gt_files; i++)\n     parse_file (gt_files[i]);"}, {"sha": "a860dd1caf10770a6affc4b4d0724fc82ef41cd5", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,6 +1,6 @@\n /* Tree lowering pass.  Lowers GIMPLE into unstructured form.\n \n-   Copyright (C) 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -108,11 +108,7 @@ lower_function_body (void)\n \t It now fills in for many such returns.  Failure to remove this\n \t will result in incorrect results for coverage analysis.  */\n       x = TREE_VALUE (t);\n-#ifdef USE_MAPPED_LOCATION\n       SET_EXPR_LOCATION (x, UNKNOWN_LOCATION);\n-#else\n-      SET_EXPR_LOCUS (x, NULL);\n-#endif\n       tsi_link_after (&i, x, TSI_CONTINUE_LINKING);\n     }\n "}, {"sha": "4a3040c3d50a154025b3949b33bdefbc6726c641", "filename": "gcc/input.h", "status": "modified", "additions": 11, "deletions": 41, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,6 +1,6 @@\n /* Declarations for variables relating to reading the source file.\n    Used by parsers, lexical analyzers, and error message routines.\n-   Copyright (C) 1993, 1997, 1998, 2000, 2003, 2004, 2007\n+   Copyright (C) 1993, 1997, 1998, 2000, 2003, 2004, 2007, 2008\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -23,17 +23,16 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_INPUT_H\n \n #include \"line-map.h\"\n+\n extern GTY(()) struct line_maps *line_table;\n \n+/* A value which will never be used to represent a real location.  */\n+#define UNKNOWN_LOCATION ((source_location) 0)\n+\n /* The location for declarations in \"<built-in>\" */\n #define BUILTINS_LOCATION ((source_location) 2)\n \n-/* Note: if any of the types defined inside this #ifdef are changed,\n-   gengtype.c:define_location_structures must be updated to match.  */\n-\n-#ifdef USE_MAPPED_LOCATION\n-\n-typedef struct\n+typedef struct GTY (())\n {\n   /* The name of the source file involved.  */\n   const char *file;\n@@ -46,34 +45,9 @@ typedef struct\n \n extern expanded_location expand_location (source_location);\n \n-#define UNKNOWN_LOCATION ((source_location) 0)\n-typedef source_location location_t; /* deprecated typedef */\n-typedef source_location source_locus; /* to be removed */\n-\n-#define location_from_locus(LOCUS) (LOCUS)\n-\n-#else /* ! USE_MAPPED_LOCATION */\n-\n-struct location_s GTY(())\n-{\n-  /* The name of the source file involved.  */\n-  const char *file;\n-\n-  /* The line-location in the source file.  */\n-  int line;\n-};\n-\n-typedef struct location_s expanded_location;\n-typedef struct location_s location_t;\n-typedef location_t *source_locus;\n-\n-#define expand_location(FILELINE) (FILELINE)\n-extern location_t unknown_location;\n-#define UNKNOWN_LOCATION unknown_location\n-\n-#define location_from_locus(LOCUS) (* (LOCUS))\n-\n-#endif /* ! USE_MAPPED_LOCATION */\n+/* Historically GCC used location_t, while cpp used source_location.\n+   This could be removed but it hardly seems worth the effort.  */\n+typedef source_location location_t;\n \n struct file_stack\n {\n@@ -85,19 +59,15 @@ struct file_stack\n extern const char *main_input_filename;\n \n extern location_t input_location;\n-#ifdef USE_MAPPED_LOCATION\n extern void push_srcloc (location_t);\n-#else /* ! USE_MAPPED_LOCATION */\n-extern void push_srcloc (const char *name, int line);\n-#endif /* ! USE_MAPPED_LOCATION */\n extern void pop_srcloc (void);\n extern void restore_input_file_stack (int);\n \n #define LOCATION_FILE(LOC) ((expand_location (LOC)).file)\n #define LOCATION_LINE(LOC) ((expand_location (LOC)).line)\n \n-#define input_line LOCATION_LINE(input_location)\n-#define input_filename LOCATION_FILE(input_location)\n+#define input_line LOCATION_LINE (input_location)\n+#define input_filename LOCATION_FILE (input_location)\n \n /* Stack of currently pending input files.\n    The line member is not accurate for the innermost file on the stack.  */"}, {"sha": "90f9a0cad9ef2a0a41d12f6ab0e7d59c92fe4a98", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,3 +1,16 @@\n+2008-02-26  Tom Tromey  <tromey@redhat.com>\n+\n+\t* lang.c (java_post_options): Remove conditional.\n+\t* expr.c (expand_byte_code): Remove old location code.\n+\t* jcf-parse.c (set_source_filename): Remove old location code.\n+\t(give_name_to_class): Likewise.\n+\t(jcf_parse): Likewise.\n+\t(duplicate_class_warning): Likewise.\n+\t(parse_class_file): Likewise.\n+\t(java_parse_file): Likewise.\n+\t* decl.c (finish_method): Remove old location code.\n+\t* class.c (push_class): Remove old location code.\n+\n 2008-02-06  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \tPR other/35107"}, {"sha": "4eb3360a53913ae86f145d04f4d844500e0b5bc8", "filename": "gcc/java/class.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,6 +1,6 @@\n /* Functions related to building classes and their related objects.\n    Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2005, 2006, 2007 Free Software Foundation, Inc.\n+   2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -479,10 +479,6 @@ push_class (tree class_type, tree class_name)\n {\n   tree decl, signature;\n   location_t saved_loc = input_location;\n-#ifndef USE_MAPPED_LOCATION\n-  input_filename = \"<unknown>\";\n-  input_line = 0;\n-#endif\n   CLASS_P (class_type) = 1;\n   decl = build_decl (TYPE_DECL, class_name, class_type);\n   TYPE_DECL_SUPPRESS_DEBUG (decl) = 1;"}, {"sha": "9f08746154ad55352e40b05c010c38acd0ff53df", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,7 +1,7 @@\n /* Process declarations and variables for the GNU compiler for the\n    Java(TM) language.\n    Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2007,\n-   2005, 2006, 2007 Free Software Foundation, Inc.\n+   2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -1851,12 +1851,7 @@ finish_method (tree fndecl)\n     set_cfun (DECL_STRUCT_FUNCTION (fndecl));\n   else\n     allocate_struct_function (fndecl, false);\n-#ifdef USE_MAPPED_LOCATION\n   cfun->function_end_locus = DECL_FUNCTION_LAST_LINE (fndecl);\n-#else\n-  cfun->function_end_locus.file = DECL_SOURCE_FILE (fndecl);\n-  cfun->function_end_locus.line = DECL_FUNCTION_LAST_LINE (fndecl);\n-#endif\n \n   /* Defer inlining and expansion to the cgraph optimizers.  */\n   cgraph_finalize_function (fndecl, false);"}, {"sha": "c174ed9a41ebfa8bfb8489b7d7524ca285f37bf1", "filename": "gcc/java/expr.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,6 +1,6 @@\n /* Process expressions for the GNU compiler for the Java(TM) language.\n    Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2005, 2006, 2007 Free Software Foundation, Inc.\n+   2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -3218,11 +3218,7 @@ expand_byte_code (JCF *jcf, tree method)\n \t      if (pc == PC)\n \t\t{\n \t\t  int line = GET_u2 (linenumber_pointer - 2);\n-#ifdef USE_MAPPED_LOCATION\n \t\t  input_location = linemap_line_start (line_table, line, 1);\n-#else\n-\t\t  input_location.line = line;\n-#endif\n \t\t  if (!(instruction_bits[PC] & BCODE_HAS_MULTI_LINENUMBERS))\n \t\t    break;\n \t\t}"}, {"sha": "3350191dc34643aba33fb1ab61bbe1dc7cbc86cb", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 2, "deletions": 44, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,6 +1,6 @@\n /* Parser for Java(TM) .class files.\n    Copyright (C) 1996, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2005, 2006, 2007 Free Software Foundation, Inc.\n+   2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -327,14 +327,7 @@ set_source_filename (JCF *jcf, int index)\n \t  && strcmp (sfname, old_filename + old_len - new_len) == 0\n \t  && (old_filename[old_len - new_len - 1] == '/'\n \t      || old_filename[old_len - new_len - 1] == '\\\\'))\n-\t{\n-#ifndef USE_MAPPED_LOCATION\n-\t  input_filename = find_sourcefile (input_filename);\n-\t  DECL_SOURCE_LOCATION (TYPE_NAME (current_class)) = input_location;\n-\t  file_start_location = input_location;\n-#endif\n-\t  return;\n-\t}\n+\treturn;\n     }\n   if (strchr (sfname, '/') == NULL && strchr (sfname, '\\\\') == NULL)\n     {\n@@ -364,13 +357,7 @@ set_source_filename (JCF *jcf, int index)\n     }\n       \n   sfname = find_sourcefile (sfname);\n-#ifdef USE_MAPPED_LOCATION\n   line_table->maps[line_table->used-1].to_file = sfname;\n-#else\n-  input_filename = sfname;\n-  DECL_SOURCE_LOCATION (TYPE_NAME (current_class)) = input_location;\n-  file_start_location = input_location;\n-#endif\n   if (current_class == main_class) main_input_filename = sfname;\n }\n \n@@ -1205,7 +1192,6 @@ give_name_to_class (JCF *jcf, int i)\n       tree class_name = unmangle_classname ((const char *) JPOOL_UTF_DATA (jcf, j),\n \t\t\t\t\t    JPOOL_UTF_LENGTH (jcf, j));\n       this_class = lookup_class (class_name);\n-#ifdef USE_MAPPED_LOCATION\n       {\n       tree source_name = identifier_subst (class_name, \"\", '.', '/', \".java\");\n       const char *sfname = IDENTIFIER_POINTER (source_name);\n@@ -1216,14 +1202,6 @@ give_name_to_class (JCF *jcf, int i)\n       if (main_input_filename == NULL && jcf == main_jcf)\n \tmain_input_filename = sfname;\n       }\n-#else\n-     if (! DECL_ARTIFICIAL (TYPE_NAME (this_class)))\n-      {\n-\tinput_location = DECL_SOURCE_LOCATION (TYPE_NAME (this_class));\n-\tif (main_input_filename == NULL && jcf == main_jcf)\n-\t  main_input_filename = input_filename;\n-      }\n-#endif\n \n       jcf->cpool.data[i].t = this_class;\n       JPOOL_TAG (jcf, i) = CONSTANT_ResolvedClass;\n@@ -1496,9 +1474,7 @@ jcf_parse (JCF* jcf)\n   if (TYPE_REFLECTION_DATA (current_class))\n     annotation_write_byte (JV_DONE_ATTR);\n \n-#ifdef USE_MAPPED_LOCATION\n   linemap_add (line_table, LC_LEAVE, false, NULL, 0);\n-#endif\n \n   /* The fields of class_type_node are already in correct order. */\n   if (current_class != class_type_node && current_class != object_type_node)\n@@ -1531,13 +1507,8 @@ static void\n duplicate_class_warning (const char *filename)\n {\n   location_t warn_loc;\n-#ifdef USE_MAPPED_LOCATION\n   linemap_add (line_table, LC_RENAME, 0, filename, 0);\n   warn_loc = linemap_line_start (line_table, 0, 1);\n-#else\n-  warn_loc.file = filename;\n-  warn_loc.line = 0;\n-#endif\n   warning (0, \"%Hduplicate class will only be compiled once\", &warn_loc);\n }\n \n@@ -1586,13 +1557,11 @@ parse_class_file (void)\n   java_layout_seen_class_methods ();\n \n   input_location = DECL_SOURCE_LOCATION (TYPE_NAME (current_class));\n-#ifdef USE_MAPPED_LOCATION\n   {\n     /* Re-enter the current file.  */\n     expanded_location loc = expand_location (input_location);\n     linemap_add (line_table, LC_ENTER, 0, loc.file, loc.line);\n   }\n-#endif\n   file_start_location = input_location;\n   (*debug_hooks->start_source_file) (input_line, input_filename);\n \n@@ -1657,13 +1626,8 @@ parse_class_file (void)\n \t      if (min_line == 0 || line < min_line)\n \t\tmin_line = line;\n \t    }\n-#ifdef USE_MAPPED_LOCATION\n \t  if (min_line != 0)\n \t    input_location = linemap_line_start (line_table, min_line, 1);\n-#else\n-\t  if (min_line != 0)\n-\t    input_line = min_line;\n-#endif\n \t}\n       else\n \t{\n@@ -1934,18 +1898,14 @@ java_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n \t  JCF_ZERO (main_jcf);\n \t  main_jcf->read_state = finput;\n \t  main_jcf->filbuf = jcf_filbuf_from_stdio;\n-#ifdef USE_MAPPED_LOCATION\n \t  linemap_add (line_table, LC_ENTER, false, filename, 0);\n \t  input_location = linemap_line_start (line_table, 0, 1);\n-#endif\n \t  if (open_in_zip (main_jcf, filename, NULL, 0) <  0)\n \t    fatal_error (\"bad zip/jar file %s\", filename);\n \t  localToFile = SeenZipFiles;\n \t  /* Register all the classes defined there.  */\n \t  process_zip_dir (main_jcf->read_state);\n-#ifdef USE_MAPPED_LOCATION\n \t  linemap_add (line_table, LC_LEAVE, false, NULL, 0);\n-#endif\n \t  parse_zip_file_entries ();\n \t}\n       else if (magic == (JCF_u4) ZIPEMPTYMAGIC)\n@@ -1962,9 +1922,7 @@ java_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n \t  parse_source_file_1 (real_file, filename, finput);\n \t  java_parser_context_restore_global ();\n \t  java_pop_parser_context (1);\n-#ifdef USE_MAPPED_LOCATION\n \t  linemap_add (line_table, LC_LEAVE, false, NULL, 0);\n-#endif\n #endif\n \t}\n     }"}, {"sha": "76b024ce8228106cd1954756a8dfb3f3c76f94f0", "filename": "gcc/java/lang.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,6 +1,6 @@\n /* Java(TM) language-specific utility routines.\n    Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2005, 2006, 2007 Free Software Foundation, Inc.\n+   2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -655,10 +655,8 @@ java_post_options (const char **pfilename)\n \t    }\n \t}\n     }\n-#ifdef USE_MAPPED_LOCATION\n   linemap_add (line_table, LC_ENTER, false, filename, 0);\n   linemap_add (line_table, LC_RENAME, false, \"<built-in>\", 0);\n-#endif\n \n   /* Initialize the compiler back end.  */\n   return false;"}, {"sha": "2df5c27915d4317c0e3c9af52b28faec0393c806", "filename": "gcc/langhooks.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,5 +1,5 @@\n /* Default language-specific hooks.\n-   Copyright 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+   Copyright 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n    Free Software Foundation, Inc.\n    Contributed by Alexandre Oliva  <aoliva@redhat.com>\n \n@@ -455,14 +455,12 @@ lhd_print_error_function (diagnostic_context *context, const char *file,\n \t\t  pp_newline (context->printer);\n \t\t  if (s.file != NULL)\n \t\t    {\n-#ifdef USE_MAPPED_LOCATION\n \t\t      if (flag_show_column && s.column != 0)\n \t\t\tpp_printf (context->printer,\n \t\t\t\t   _(\"    inlined from %qs at %s:%d:%d\"),\n \t\t\t\t   lang_hooks.decl_printable_name (fndecl, 2),\n \t\t\t\t   s.file, s.line, s.column);\n \t\t      else\n-#endif\n \t\t\tpp_printf (context->printer,\n \t\t\t\t   _(\"    inlined from %qs at %s:%d\"),\n \t\t\t\t   lang_hooks.decl_printable_name (fndecl, 2),"}, {"sha": "6a1fc5671b4d578de8fb1e44820e41d91a26da07", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,3 +1,7 @@\n+2008-02-26  Tom Tromey  <tromey@redhat.com>\n+\n+\t* objc-act.c (objc_init): Remove old location code.\n+\n 2008-02-06  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \tPR other/35107"}, {"sha": "c8b418ce3281e9ad846272bc4651587e2c37843f", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,6 +1,6 @@\n /* Implement classes and message passing for Objective C.\n    Copyright (C) 1992, 1993, 1994, 1995, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n+   2001, 2002, 2003, 2004, 2005, 2007, 2008 Free Software Foundation, Inc.\n    Contributed by Steve Naroff.\n \n This file is part of GCC.\n@@ -484,13 +484,6 @@ objc_init (void)\n #endif\n     return false;\n \n-#ifndef USE_MAPPED_LOCATION\n-  /* Force the line number back to 0; check_newline will have\n-     raised it to 1, which will make the builtin functions appear\n-     not to be built in.  */\n-  input_line = 0;\n-#endif\n-\n   /* If gen_declaration desired, open the output file.  */\n   if (flag_gen_declaration)\n     {"}, {"sha": "7df81616d51bb2c51852b2d98b2548d46325016b", "filename": "gcc/print-tree.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,6 +1,6 @@\n /* Prints out tree in human readable form - GCC\n    Copyright (C) 1990, 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -442,10 +442,8 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \n \n       xloc = expand_location (DECL_SOURCE_LOCATION (node));\n-      fprintf (file, \" file %s line %d\", xloc.file, xloc.line);\n-#ifdef USE_MAPPED_LOCATION\n-      fprintf (file, \" col %d\", xloc.column);\n-#endif\n+      fprintf (file, \" file %s line %d col %d\", xloc.file, xloc.line,\n+\t       xloc.column);\n \n       if (CODE_CONTAINS_STRUCT (code, TS_DECL_COMMON))\n \t{\t  \n@@ -949,10 +947,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n     {\n       expanded_location xloc = expand_location (EXPR_LOCATION (node));\n       indent_to (file, indent+4);\n-      fprintf (file, \"%s:%d\", xloc.file, xloc.line);\n-#ifdef USE_MAPPED_LOCATION\n-      fprintf (file, \":%d\", xloc.column);\n-#endif\n+      fprintf (file, \"%s:%d:%d\", xloc.file, xloc.line, xloc.column);\n     }\n \n   fprintf (file, \">\");"}, {"sha": "a4f46b3ad4d3ca73ba35281f374e0462d3e22299", "filename": "gcc/profile.c", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,6 +1,6 @@\n /* Calculate branch probabilities, and basic block execution counts.\n    Copyright (C) 1990, 1991, 1992, 1993, 1994, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005, 2007\n+   2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008\n    Free Software Foundation, Inc.\n    Contributed by James E. Wilson, UC Berkeley/Cygnus Support;\n    based on some ideas from Dain Samples of UC Berkeley.\n@@ -814,15 +814,10 @@ branch_prob (void)\n \t  if (last && EXPR_LOCUS (last)\n \t      && e->goto_locus\n \t      && !single_succ_p (bb)\n-#ifdef USE_MAPPED_LOCATION\n \t      && (LOCATION_FILE (e->goto_locus)\n \t          != LOCATION_FILE (EXPR_LOCATION  (last))\n \t\t  || (LOCATION_LINE (e->goto_locus)\n \t\t      != LOCATION_LINE (EXPR_LOCATION  (last)))))\n-#else\n-\t      && (e->goto_locus->file != EXPR_LOCUS (last)->file\n-\t\t  || (e->goto_locus->line != EXPR_LOCUS (last)->line)))\n-#endif\n \t    {\n \t      basic_block new = split_edge (e);\n \t      single_succ_edge (new)->goto_locus = e->goto_locus;\n@@ -1020,16 +1015,10 @@ branch_prob (void)\n \t     CFG.  */\n \t  if (single_succ_p (bb) && single_succ_edge (bb)->goto_locus)\n \t    {\n-\t      /* ??? source_locus type is marked deprecated in input.h.  */\n-\t      source_locus curr_location = single_succ_edge (bb)->goto_locus;\n+\t      location_t curr_location = single_succ_edge (bb)->goto_locus;\n \t      /* ??? The FILE/LINE API is inconsistent for these cases.  */\n-#ifdef USE_MAPPED_LOCATION \n \t      output_location (LOCATION_FILE (curr_location),\n \t\t\t       LOCATION_LINE (curr_location), &offset, bb);\n-#else\n-\t      output_location (curr_location->file, curr_location->line,\n-\t\t\t       &offset, bb);\n-#endif\n \t    }\n \n \t  if (offset)"}, {"sha": "2629adc3229569fd143dcb7b9e7eb7d376e04062", "filename": "gcc/recog.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines used by or related to instruction recognition.\n    Copyright (C) 1987, 1988, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -1490,14 +1490,7 @@ decode_asm_operands (rtx body, rtx *operands, rtx **operand_locs,\n     }\n \n   if (loc)\n-    {\n-#ifdef USE_MAPPED_LOCATION\n-      *loc = ASM_OPERANDS_SOURCE_LOCATION (asmop);\n-#else\n-      loc->file = ASM_OPERANDS_SOURCE_FILE (asmop);\n-      loc->line = ASM_OPERANDS_SOURCE_LINE (asmop);\n-#endif\n-    }\n+    *loc = ASM_OPERANDS_SOURCE_LOCATION (asmop);\n \n   return ASM_OPERANDS_TEMPLATE (asmop);\n }"}, {"sha": "6f38631b71e0ec3c291f7ba32f0b743614ec8e10", "filename": "gcc/rtl-error.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Frtl-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Frtl-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-error.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,5 +1,5 @@\n /* RTL specific diagnostic subroutines for GCC\n-   Copyright (C) 2001, 2002, 2003, 2004, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002, 2003, 2004, 2007, 2008 Free Software Foundation, Inc.\n    Contributed by Gabriel Dos Reis <gdr@codesourcery.com>\n \n This file is part of GCC.\n@@ -58,14 +58,7 @@ location_for_asm (const_rtx insn)\n     asmop = NULL;\n \n   if (asmop)\n-#ifdef USE_MAPPED_LOCATION\n     loc = ASM_OPERANDS_SOURCE_LOCATION (asmop);\n-#else\n-    {\n-      loc.file = ASM_OPERANDS_SOURCE_FILE (asmop);\n-      loc.line = ASM_OPERANDS_SOURCE_LINE (asmop);\n-    }\n-#endif\n   else\n     loc = input_location;\n   return loc;"}, {"sha": "33bf6bd1879fb1d0db3b03c982b90ec22114658a", "filename": "gcc/rtl.def", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -2,7 +2,7 @@\n    Register Transfer Expressions (rtx's) that make up the\n    Register Transfer Language (rtl) used in the Back End of the GNU compiler.\n    Copyright (C) 1987, 1988, 1992, 1994, 1995, 1997, 1998, 1999, 2000, 2004,\n-   2005, 2006, 2007\n+   2005, 2006, 2007, 2008\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -159,7 +159,6 @@ DEF_RTL_EXPR(COND_EXEC, \"cond_exec\", \"ee\", RTX_EXTRA)\n /* Several operations to be done in parallel (perhaps under COND_EXEC).  */\n DEF_RTL_EXPR(PARALLEL, \"parallel\", \"E\", RTX_EXTRA)\n \n-#ifdef USE_MAPPED_LOCATION\n /* A string that is passed through to the assembler as input.\n      One can obviously pass comments through by using the\n      assembler comment syntax.\n@@ -180,29 +179,6 @@ DEF_RTL_EXPR(ASM_INPUT, \"asm_input\", \"si\", RTX_EXTRA)\n      and whose mode indicates the mode of the input operand.\n    6th is the source line number.  */\n DEF_RTL_EXPR(ASM_OPERANDS, \"asm_operands\", \"ssiEEi\", RTX_EXTRA)\n-#else\n-/* A string that is passed through to the assembler as input.\n-     One can obviously pass comments through by using the\n-     assembler comment syntax.\n-     These occur in an insn all by themselves as the PATTERN.\n-     They also appear inside an ASM_OPERANDS\n-     as a convenient way to hold a string.  */\n-DEF_RTL_EXPR(ASM_INPUT, \"asm_input\", \"ssi\", RTX_EXTRA)\n-\n-/* An assembler instruction with operands.\n-   1st operand is the instruction template.\n-   2nd operand is the constraint for the output.\n-   3rd operand is the number of the output this expression refers to.\n-     When an insn stores more than one value, a separate ASM_OPERANDS\n-     is made for each output; this integer distinguishes them.\n-   4th is a vector of values of input operands.\n-   5th is a vector of modes and constraints for the input operands.\n-     Each element is an ASM_INPUT containing a constraint string\n-     and whose mode indicates the mode of the input operand.\n-   6th is the name of the containing source file.\n-   7th is the source line number.  */\n-DEF_RTL_EXPR(ASM_OPERANDS, \"asm_operands\", \"ssiEEsi\", RTX_EXTRA)\n-#endif\n \n /* A machine-specific operation.\n    1st operand is a vector of operands being used by the operation so that"}, {"sha": "604d09678952007aa80bb97edca78d4b3129c799", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,6 +1,6 @@\n /* Register Transfer Language (RTL) definitions for GCC\n    Copyright (C) 1987, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -1114,15 +1114,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n   XSTR (XCVECEXP (RTX, 4, N, ASM_OPERANDS), 0)\n #define ASM_OPERANDS_INPUT_MODE(RTX, N)  \\\n   GET_MODE (XCVECEXP (RTX, 4, N, ASM_OPERANDS))\n-#ifdef USE_MAPPED_LOCATION\n #define ASM_OPERANDS_SOURCE_LOCATION(RTX) XCUINT (RTX, 5, ASM_OPERANDS)\n #define ASM_INPUT_SOURCE_LOCATION(RTX) XCUINT (RTX, 1, ASM_INPUT)\n-#else\n-#define ASM_OPERANDS_SOURCE_FILE(RTX) XCSTR (RTX, 5, ASM_OPERANDS)\n-#define ASM_OPERANDS_SOURCE_LINE(RTX) XCINT (RTX, 6, ASM_OPERANDS)\n-#define ASM_INPUT_SOURCE_FILE(RTX) XCSTR (RTX, 1, ASM_INPUT)\n-#define ASM_INPUT_SOURCE_LINE(RTX) XCINT (RTX, 2, ASM_INPUT)\n-#endif\n \n /* 1 if RTX is a mem that is statically allocated in read-only memory.  */\n #define MEM_READONLY_P(RTX) \\\n@@ -1892,20 +1885,10 @@ extern GTY(()) rtx return_address_pointer_rtx;\n #ifndef GENERATOR_FILE\n #include \"genrtl.h\"\n #undef gen_rtx_ASM_INPUT\n-#ifdef USE_MAPPED_LOCATION\n #define gen_rtx_ASM_INPUT(MODE, ARG0)\t\t\t\t\\\n   gen_rtx_fmt_si (ASM_INPUT, (MODE), (ARG0), 0)\n #define gen_rtx_ASM_INPUT_loc(MODE, ARG0, LOC)\t\t\t\\\n   gen_rtx_fmt_si (ASM_INPUT, (MODE), (ARG0), (LOC))\n-#else\n-#define gen_rtx_ASM_INPUT(MODE, ARG0)\t\t\t\t\\\n-  gen_rtx_fmt_ssi (ASM_INPUT, (MODE), (ARG0), \"\", 0)\n-#define gen_rtx_ASM_INPUT_loc(MODE, ARG0, LOC)\t\t\t\\\n-  gen_rtx_fmt_ssi (ASM_INPUT, (MODE), (ARG0), (LOC).file, (LOC).line)\n-#undef gen_rtx_ASM_OPERANDS\n-#define gen_rtx_ASM_OPERANDS(MODE, ARG0, ARG1, ARG2, ARG3, ARG4, LOC) \\\n-  gen_rtx_fmt_ssiEEsi (ASM_OPERANDS, (MODE), (ARG0), (ARG1), (ARG2), (ARG3), (ARG4), (LOC).file, (LOC).line)\n-#endif\n #endif\n \n /* There are some RTL codes that require special attention; the"}, {"sha": "f1386323d5e7ad2dcaad0e38025f7750d17f88b9", "filename": "gcc/system.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,6 +1,6 @@\n /* Get common system includes and various definitions and declarations based\n    on autoconf macros.\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -744,6 +744,9 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tLANG_HOOKS_MAYBE_BUILD_CLEANUP LANG_HOOKS_UPDATE_DECL_AFTER_SAVING \\\n \tLANG_HOOKS_POPLEVEL LANG_HOOKS_TRUTHVALUE_CONVERSION\n \n+/* Miscellaneous macros that are no longer used.  */\n+ #pragma GCC poison USE_MAPPED_LOCATION\n+\n /* Libiberty macros that are no longer used in GCC.  */\n #undef ANSI_PROTOTYPES\n #undef PTR_CONST"}, {"sha": "cf0ec2ad287da2c1325836c49264f11a6bbfec22", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,6 +1,6 @@\n /* Top level of GCC compilers (cc1, cc1plus, etc.)\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -134,10 +134,6 @@ static const char **save_argv;\n \n const char *main_input_filename;\n \n-#ifndef USE_MAPPED_LOCATION\n-location_t unknown_location = { NULL, 0 };\n-#endif\n-\n /* Used to enable -fvar-tracking, -fweb and -frename-registers according\n    to optimize and default_debug_hooks in process_options ().  */\n #define AUTODETECT_VALUE 2\n@@ -962,11 +958,7 @@ warn_deprecated_use (tree node)\n    INPUT_LOCATION accordingly.  */\n \n void\n-#ifdef USE_MAPPED_LOCATION\n push_srcloc (location_t fline)\n-#else\n-push_srcloc (const char *file, int line)\n-#endif\n {\n   struct file_stack *fs;\n \n@@ -977,12 +969,7 @@ push_srcloc (const char *file, int line)\n   fs = XNEW (struct file_stack);\n   fs->location = input_location;\n   fs->next = input_file_stack;\n-#ifdef USE_MAPPED_LOCATION\n   input_location = fline;\n-#else\n-  input_filename = file;\n-  input_line = line;\n-#endif\n   input_file_stack = fs;\n   input_file_stack_tick++;\n   VEC_safe_push (fs_p, heap, input_file_stack_history, input_file_stack);\n@@ -1732,9 +1719,6 @@ process_options (void)\n      sets the original filename if appropriate (e.g. foo.i -> foo.c)\n      so we can correctly initialize debug output.  */\n   no_backend = lang_hooks.post_options (&main_input_filename);\n-#ifndef USE_MAPPED_LOCATION\n-  input_filename = main_input_filename;\n-#endif\n \n #ifdef OVERRIDE_OPTIONS\n   /* Some machines may reject certain combinations of options.  */\n@@ -2125,12 +2109,7 @@ lang_dependent_init (const char *name)\n     dump_base_name = name && name[0] ? name : \"gccdump\";\n \n   /* Other front-end initialization.  */\n-#ifdef USE_MAPPED_LOCATION\n   input_location = BUILTINS_LOCATION;\n-#else\n-  input_filename = \"<built-in>\";\n-  input_line = 0;\n-#endif\n   if (lang_hooks.init () == 0)\n     return 0;\n   input_location = save_loc;"}, {"sha": "6d848a0c2d8d3646ae9f1cf165b854cd08d19615", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 56, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -628,20 +628,10 @@ make_cond_expr_edges (basic_block bb)\n   else_bb = label_to_block (else_label);\n \n   e = make_edge (bb, then_bb, EDGE_TRUE_VALUE);\n-#ifdef USE_MAPPED_LOCATION\n   e->goto_locus = EXPR_LOCATION (COND_EXPR_THEN (entry));\n-#else\n-  e->goto_locus = EXPR_LOCUS (COND_EXPR_THEN (entry));\n-#endif\n   e = make_edge (bb, else_bb, EDGE_FALSE_VALUE);\n   if (e)\n-    {\n-#ifdef USE_MAPPED_LOCATION\n-      e->goto_locus = EXPR_LOCATION (COND_EXPR_ELSE (entry));\n-#else\n-      e->goto_locus = EXPR_LOCUS (COND_EXPR_ELSE (entry));\n-#endif\n-    }\n+    e->goto_locus = EXPR_LOCATION (COND_EXPR_ELSE (entry));\n \n   /* We do not need the gotos anymore.  */\n   COND_EXPR_THEN (entry) = NULL_TREE;\n@@ -835,11 +825,7 @@ make_goto_expr_edges (basic_block bb)\n     {\n       tree dest = GOTO_DESTINATION (goto_t);\n       edge e = make_edge (bb, label_to_block (dest), EDGE_FALLTHRU);\n-#ifdef USE_MAPPED_LOCATION\n       e->goto_locus = EXPR_LOCATION (goto_t);\n-#else\n-      e->goto_locus = EXPR_LOCUS (goto_t);\n-#endif\n       bsi_remove (&last, true);\n       return;\n     }\n@@ -1993,11 +1979,7 @@ static void\n remove_bb (basic_block bb)\n {\n   block_stmt_iterator i;\n-#ifdef USE_MAPPED_LOCATION\n   source_location loc = UNKNOWN_LOCATION;\n-#else\n-  source_locus loc = 0;\n-#endif\n \n   if (dump_file)\n     {\n@@ -2065,15 +2047,8 @@ remove_bb (basic_block bb)\n \t     program that are indeed unreachable.  */\n \t  if (TREE_CODE (stmt) != GOTO_EXPR && EXPR_HAS_LOCATION (stmt) && !loc)\n \t    {\n-#ifdef USE_MAPPED_LOCATION\n \t      if (EXPR_HAS_LOCATION (stmt))\n \t\tloc = EXPR_LOCATION (stmt);\n-#else\n-\t      source_locus t;\n-\t      t = EXPR_LOCUS (stmt);\n-\t      if (t && LOCATION_LINE (*t) > 0)\n-\t\tloc = t;\n-#endif\n \t    }\n \t}\n     }\n@@ -2082,13 +2057,8 @@ remove_bb (basic_block bb)\n      block is unreachable.  We walk statements backwards in the\n      loop above, so the last statement we process is the first statement\n      in the block.  */\n-#ifdef USE_MAPPED_LOCATION\n   if (loc > BUILTINS_LOCATION && LOCATION_LINE (loc) > 0)\n     warning (OPT_Wunreachable_code, \"%Hwill never be executed\", &loc);\n-#else\n-  if (loc)\n-    warning (OPT_Wunreachable_code, \"%Hwill never be executed\", loc);\n-#endif\n \n   remove_phi_nodes_and_edges_for_unreachable_block (bb);\n   bb->il.tree = NULL;\n@@ -6990,11 +6960,7 @@ gimplify_build1 (block_stmt_iterator *bsi, enum tree_code code, tree type,\n static unsigned int\n execute_warn_function_return (void)\n {\n-#ifdef USE_MAPPED_LOCATION\n   source_location location;\n-#else\n-  location_t *locus;\n-#endif\n   tree last;\n   edge e;\n   edge_iterator ei;\n@@ -7003,31 +6969,17 @@ execute_warn_function_return (void)\n   if (TREE_THIS_VOLATILE (cfun->decl)\n       && EDGE_COUNT (EXIT_BLOCK_PTR->preds) > 0)\n     {\n-#ifdef USE_MAPPED_LOCATION\n       location = UNKNOWN_LOCATION;\n-#else\n-      locus = NULL;\n-#endif\n       FOR_EACH_EDGE (e, ei, EXIT_BLOCK_PTR->preds)\n \t{\n \t  last = last_stmt (e->src);\n \t  if (TREE_CODE (last) == RETURN_EXPR\n-#ifdef USE_MAPPED_LOCATION\n \t      && (location = EXPR_LOCATION (last)) != UNKNOWN_LOCATION)\n-#else\n-\t      && (locus = EXPR_LOCUS (last)) != NULL)\n-#endif\n \t    break;\n \t}\n-#ifdef USE_MAPPED_LOCATION\n       if (location == UNKNOWN_LOCATION)\n \tlocation = cfun->function_end_locus;\n       warning (0, \"%H%<noreturn%> function does return\", &location);\n-#else\n-      if (!locus)\n-\tlocus = &cfun->function_end_locus;\n-      warning (0, \"%H%<noreturn%> function does return\", locus);\n-#endif\n     }\n \n   /* If we see \"return;\" in some basic block, then we do reach the end\n@@ -7044,17 +6996,10 @@ execute_warn_function_return (void)\n \t      && TREE_OPERAND (last, 0) == NULL\n \t      && !TREE_NO_WARNING (last))\n \t    {\n-#ifdef USE_MAPPED_LOCATION\n \t      location = EXPR_LOCATION (last);\n \t      if (location == UNKNOWN_LOCATION)\n \t\t  location = cfun->function_end_locus;\n \t      warning (OPT_Wreturn_type, \"%Hcontrol reaches end of non-void function\", &location);\n-#else\n-\t      locus = EXPR_LOCUS (last);\n-\t      if (!locus)\n-\t\tlocus = &cfun->function_end_locus;\n-\t      warning (OPT_Wreturn_type, \"%Hcontrol reaches end of non-void function\", locus);\n-#endif\n \t      TREE_NO_WARNING (cfun->decl) = 1;\n \t      break;\n \t    }"}, {"sha": "190a3d3ce2d45ed4770064d27c3bee137b2e6bd6", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,5 +1,5 @@\n /* Mudflap: narrow-pointer bounds-checking by tree rewriting.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008\n    Free Software Foundation, Inc.\n    Contributed by Frank Ch. Eigler <fche@redhat.com>\n    and Graydon Hoare <graydon@redhat.com>\n@@ -121,9 +121,7 @@ mf_varname_tree (tree decl)\n     const char *sourcefile;\n     unsigned sourceline = xloc.line;\n     unsigned sourcecolumn = 0;\n-#ifdef USE_MAPPED_LOCATION\n     sourcecolumn = xloc.column;\n-#endif\n     sourcefile = xloc.file;\n     if (sourcefile == NULL && current_function_decl != NULL_TREE)\n       sourcefile = DECL_SOURCE_FILE (current_function_decl);\n@@ -214,11 +212,9 @@ mf_file_function_line_tree (location_t location)\n \n   if (xloc.line > 0)\n     {\n-#ifdef USE_MAPPED_LOCATION\n       if (xloc.column > 0)\n         sprintf (linecolbuf, \"%d:%d\", xloc.line, xloc.column);\n       else\n-#endif\n         sprintf (linecolbuf, \"%d\", xloc.line);\n       colon = \":\";\n       line = linecolbuf;"}, {"sha": "b64571dbae2665ec2933750eefe7d7aab51bd21a", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,5 +1,5 @@\n /* Pretty formatting of GENERIC trees in C syntax.\n-   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n    Free Software Foundation, Inc.\n    Adapted from c-pretty-print.c by Diego Novillo <dnovillo@redhat.com>\n \n@@ -3112,20 +3112,10 @@ dump_implicit_edges (pretty_printer *buffer, basic_block bb, int indent,\n     {\n       INDENT (indent);\n \n-      if ((flags & TDF_LINENO)\n-#ifdef USE_MAPPED_LOCATION\n-\t  && e->goto_locus != UNKNOWN_LOCATION\n-#else\n-\t  && e->goto_locus\n-#endif\n-\t  )\n+      if ((flags & TDF_LINENO) && e->goto_locus != UNKNOWN_LOCATION)\n \t{\n \t  expanded_location goto_xloc;\n-#ifdef USE_MAPPED_LOCATION\n \t  goto_xloc = expand_location (e->goto_locus);\n-#else\n-\t  goto_xloc = *e->goto_locus;\n-#endif\n \t  pp_character (buffer, '[');\n \t  if (goto_xloc.file)\n \t    {"}, {"sha": "883d745707744dc445094a70dfd6cc10c00c452f", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,5 +1,5 @@\n /* Transformation Utilities for Loop Vectorization.\n-   Copyright (C) 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n    Contributed by Dorit Naishlos <dorit@il.ibm.com>\n \n This file is part of GCC.\n@@ -2111,11 +2111,7 @@ vect_finish_stmt_generation (tree stmt, tree vec_stmt,\n   /* Make sure bsi points to the stmt that is being vectorized.  */\n   gcc_assert (stmt == bsi_stmt (*bsi));\n \n-#ifdef USE_MAPPED_LOCATION\n   SET_EXPR_LOCATION (vec_stmt, EXPR_LOCATION (stmt));\n-#else\n-  SET_EXPR_LOCUS (vec_stmt, EXPR_LOCUS (stmt));\n-#endif\n }\n \n "}, {"sha": "93aa7978dec0c7f61cbf6c6c506b7a4c403ff763", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,5 +1,5 @@\n /* Loop Vectorization\n-   Copyright (C) 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n    Contributed by Dorit Naishlos <dorit@il.ibm.com>\n \n This file is part of GCC.\n@@ -21,19 +21,11 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_TREE_VECTORIZER_H\n #define GCC_TREE_VECTORIZER_H\n \n-#ifdef USE_MAPPED_LOCATION\n-  typedef source_location LOC;\n-  #define UNKNOWN_LOC UNKNOWN_LOCATION\n-  #define EXPR_LOC(e) EXPR_LOCATION(e)\n-  #define LOC_FILE(l) LOCATION_FILE (l)\n-  #define LOC_LINE(l) LOCATION_LINE (l)\n-#else\n-  typedef source_locus LOC;\n-  #define UNKNOWN_LOC NULL\n-  #define EXPR_LOC(e) EXPR_LOCUS(e)\n-  #define LOC_FILE(l) (l)->file\n-  #define LOC_LINE(l) (l)->line\n-#endif\n+typedef source_location LOC;\n+#define UNKNOWN_LOC UNKNOWN_LOCATION\n+#define EXPR_LOC(e) EXPR_LOCATION(e)\n+#define LOC_FILE(l) LOCATION_FILE (l)\n+#define LOC_LINE(l) LOCATION_LINE (l)\n \n /* Used for naming of new temporaries.  */\n enum vect_var_kind {"}, {"sha": "9f41635a09bcf542dfa751ee4bea23608b973489", "filename": "gcc/tree.c", "status": "modified", "additions": 6, "deletions": 102, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,6 +1,6 @@\n /* Language-independent node constructors for parse phase of GNU compiler.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -3030,11 +3030,7 @@ build1_stat (enum tree_code code, tree type, tree node MEM_STAT_DECL)\n   TREE_SET_CODE (t, code);\n \n   TREE_TYPE (t) = type;\n-#ifdef USE_MAPPED_LOCATION\n   SET_EXPR_LOCATION (t, UNKNOWN_LOCATION);\n-#else\n-  SET_EXPR_LOCUS (t, NULL);\n-#endif\n   TREE_OPERAND (t, 0) = node;\n   TREE_BLOCK (t) = NULL_TREE;\n   if (node && !TYPE_P (node))\n@@ -3476,13 +3472,6 @@ build_block (tree vars, tree subblocks, tree supercontext, tree chain)\n   return block;\n }\n \n-#if 1 /* ! defined(USE_MAPPED_LOCATION) */\n-/* ??? gengtype doesn't handle conditionals */\n-static GTY(()) source_locus last_annotated_node;\n-#endif\n-\n-#ifdef USE_MAPPED_LOCATION\n-\n expanded_location\n expand_location (source_location loc)\n {\n@@ -3503,53 +3492,6 @@ expand_location (source_location loc)\n   return xloc;\n }\n \n-#else\n-\n-/* Record the exact location where an expression or an identifier were\n-   encountered.  */\n-\n-void\n-annotate_with_file_line (tree node, const char *file, int line)\n-{\n-  location_t *new_loc;\n-\n-  /* Roughly one percent of the calls to this function are to annotate\n-     a node with the same information already attached to that node!\n-     Just return instead of wasting memory.  */\n-  if (EXPR_LOCUS (node)\n-      && EXPR_LINENO (node) == line\n-      && (EXPR_FILENAME (node) == file\n-\t  || !strcmp (EXPR_FILENAME (node), file)))\n-    {\n-      last_annotated_node = EXPR_LOCUS (node);\n-      return;\n-    }\n-\n-  /* In heavily macroized code (such as GCC itself) this single\n-     entry cache can reduce the number of allocations by more\n-     than half.  */\n-  if (last_annotated_node\n-      && last_annotated_node->line == line\n-      && (last_annotated_node->file == file\n-\t  || !strcmp (last_annotated_node->file, file)))\n-    {\n-      SET_EXPR_LOCUS (node, last_annotated_node);\n-      return;\n-    }\n-\n-  new_loc = GGC_NEW (location_t);\n-  new_loc->file = file;\n-  new_loc->line = line;\n-  SET_EXPR_LOCUS (node, new_loc);\n-  last_annotated_node = new_loc;\n-}\n-\n-void\n-annotate_with_locus (tree node, location_t locus)\n-{\n-  annotate_with_file_line (node, locus.file, locus.line);\n-}\n-#endif\n \f\n /* Source location accessor functions.  */\n \n@@ -3560,71 +3502,39 @@ annotate_with_locus (tree node, location_t locus)\n location_t\n expr_location (const_tree node)\n {\n-#ifdef USE_MAPPED_LOCATION\n   if (GIMPLE_STMT_P (node))\n     return GIMPLE_STMT_LOCUS (node);\n   return EXPR_P (node) ? node->exp.locus : UNKNOWN_LOCATION;\n-#else\n-  if (GIMPLE_STMT_P (node))\n-    return EXPR_HAS_LOCATION (node)\n-      ? *GIMPLE_STMT_LOCUS (node) : UNKNOWN_LOCATION;\n-  return EXPR_HAS_LOCATION (node) ? *node->exp.locus : UNKNOWN_LOCATION;\n-#endif\n }\n \n void\n set_expr_location (tree node, location_t locus)\n {\n-#ifdef USE_MAPPED_LOCATION\n   if (GIMPLE_STMT_P (node))\n     GIMPLE_STMT_LOCUS (node) = locus;\n   else\n     EXPR_CHECK (node)->exp.locus = locus;\n-#else\n-      annotate_with_locus (node, locus);\n-#endif\n }\n \n bool\n expr_has_location (const_tree node)\n {\n-#ifdef USE_MAPPED_LOCATION\n   return expr_location (node) != UNKNOWN_LOCATION;\n-#else\n-  return expr_locus (node) != NULL;\n-#endif\n }\n \n-#ifdef USE_MAPPED_LOCATION\n source_location *\n-#else\n-source_locus\n-#endif\n expr_locus (const_tree node)\n {\n-#ifdef USE_MAPPED_LOCATION\n   if (GIMPLE_STMT_P (node))\n     return CONST_CAST (source_location *, &GIMPLE_STMT_LOCUS (node));\n   return (EXPR_P (node)\n \t  ? CONST_CAST (source_location *, &node->exp.locus)\n \t  : (source_location *) NULL);\n-#else\n-  if (GIMPLE_STMT_P (node))\n-    return GIMPLE_STMT_LOCUS (node);\n-  return EXPR_P (node) ? node->exp.locus : (source_locus) NULL;\n-#endif\n }\n \n void\n-set_expr_locus (tree node,\n-#ifdef USE_MAPPED_LOCATION\n-\t\tsource_location *loc\n-#else\n-\t\tsource_locus loc\n-#endif\n-\t\t)\n+set_expr_locus (tree node, source_location *loc)\n {\n-#ifdef USE_MAPPED_LOCATION\n   if (loc == NULL)\n     {\n       if (GIMPLE_STMT_P (node))\n@@ -3639,30 +3549,24 @@ set_expr_locus (tree node,\n       else\n \tEXPR_CHECK (node)->exp.locus = *loc;\n     }\n-#else\n-  if (GIMPLE_STMT_P (node))\n-    GIMPLE_STMT_LOCUS (node) = loc;\n-  else\n-    EXPR_CHECK (node)->exp.locus = loc;\n-#endif\n }\n \n /* Return the file name of the location of NODE.  */\n const char *\n expr_filename (const_tree node)\n {\n   if (GIMPLE_STMT_P (node))\n-    return LOCATION_FILE (location_from_locus (GIMPLE_STMT_LOCUS (node)));\n-  return LOCATION_FILE (location_from_locus (EXPR_CHECK (node)->exp.locus));\n+    return LOCATION_FILE (GIMPLE_STMT_LOCUS (node));\n+  return LOCATION_FILE (EXPR_CHECK (node)->exp.locus);\n }\n \n /* Return the line number of the location of NODE.  */\n int\n expr_lineno (const_tree node)\n {\n   if (GIMPLE_STMT_P (node))\n-    return LOCATION_LINE (location_from_locus (GIMPLE_STMT_LOCUS (node)));\n-  return LOCATION_LINE (location_from_locus (EXPR_CHECK (node)->exp.locus));\n+    return LOCATION_LINE (GIMPLE_STMT_LOCUS (node));\n+  return LOCATION_LINE (EXPR_CHECK (node)->exp.locus);\n }\n \n \f"}, {"sha": "5f441a8811b0555e064911b2289faca4a817a718", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -417,7 +417,7 @@ struct tree_common GTY(())\n struct gimple_stmt GTY(())\n {\n   struct tree_base base;\n-  source_locus locus;\n+  location_t locus;\n   tree block;\n   /* FIXME tuples: Eventually this should be of type ``struct gimple_expr''.  */\n   tree GTY ((length (\"TREE_CODE_LENGTH (TREE_CODE (&%h))\"))) operands[1];\n@@ -1841,7 +1841,7 @@ enum omp_clause_default_kind\n struct tree_exp GTY(())\n {\n   struct tree_common common;\n-  source_locus locus;\n+  location_t locus;\n   tree block;\n   tree GTY ((special (\"tree_exp\"),\n \t     desc (\"TREE_CODE ((tree) &%0)\")))\n@@ -2515,12 +2515,8 @@ struct function;\n #define DECL_SOURCE_LOCATION(NODE) (DECL_MINIMAL_CHECK (NODE)->decl_minimal.locus)\n #define DECL_SOURCE_FILE(NODE) LOCATION_FILE (DECL_SOURCE_LOCATION (NODE))\n #define DECL_SOURCE_LINE(NODE) LOCATION_LINE (DECL_SOURCE_LOCATION (NODE))\n-#ifdef USE_MAPPED_LOCATION\n #define DECL_IS_BUILTIN(DECL) \\\n   (DECL_SOURCE_LOCATION (DECL) <= BUILTINS_LOCATION)\n-#else\n-#define DECL_IS_BUILTIN(DECL) (DECL_SOURCE_LINE(DECL) == 0)\n-#endif\n \n /*  For FIELD_DECLs, this is the RECORD_TYPE, UNION_TYPE, or\n     QUAL_UNION_TYPE node that the field is a member of.  For VAR_DECL,\n@@ -3999,10 +3995,6 @@ extern tree build_decl_stat (enum tree_code, tree, tree MEM_STAT_DECL);\n extern tree build_fn_decl (const char *, tree);\n #define build_decl(c,t,q) build_decl_stat (c,t,q MEM_STAT_INFO)\n extern tree build_block (tree, tree, tree, tree);\n-#ifndef USE_MAPPED_LOCATION\n-extern void annotate_with_file_line (tree, const char *, int);\n-extern void annotate_with_locus (tree, location_t);\n-#endif\n extern tree build_empty_stmt (void);\n extern tree build_omp_clause (enum omp_clause_code);\n \n@@ -4935,13 +4927,8 @@ extern location_t expr_location (const_tree);\n extern void set_expr_location (tree, location_t);\n extern bool expr_has_location (const_tree);\n \n-#ifdef USE_MAPPED_LOCATION\n-extern source_locus *expr_locus (const_tree);\n+extern location_t *expr_locus (const_tree);\n extern void set_expr_locus (tree, source_location *);\n-#else\n-extern source_locus expr_locus (const_tree);\n-extern void set_expr_locus (tree, source_locus loc);\n-#endif\n extern const char *expr_filename (const_tree);\n extern int expr_lineno (const_tree);\n "}, {"sha": "5aef0c14a3fb5d673779c532df347e1be8b3f1ee", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -1,3 +1,10 @@\n+2008-02-26  Tom Tromey  <tromey@redhat.com>\n+\n+\t* tree1.c (treelang_init): Remove old location code.\n+\t(treelang_parse_file): Likewise.\n+\t* lex.l (LINEMAP_POSITION_FOR_COLUMN): Remove.\n+\t(update_lineno_charno): Remove old location code.\n+\n 2008-02-06  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \tPR other/35107"}, {"sha": "86a81d783433e60d999978870c7f24e2c28ec545", "filename": "gcc/treelang/lex.l", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ftreelang%2Flex.l", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ftreelang%2Flex.l", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Flex.l?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -5,7 +5,7 @@\n    ---------------------------------------------------------------------\n \n    Copyright (C) 1986, 87, 89, 92-96, 1997, 1999, 2000, 2001, 2002, 2003,\n-   2004, 2005, 2007 Free Software Foundation, Inc.\n+   2004, 2005, 2007, 2008 Free Software Foundation, Inc.\n    \n    This program is free software; you can redistribute it and/or modify it \n    under the terms of the GNU General Public License as published by the\n@@ -59,10 +59,6 @@ static void dump_lex_value (int lexret);\n    {fprintf (stderr, \"\\nlexer returning\"); dump_lex_value (a);} return a;}\n #define NOT_RETURN(a) {update_yylval (a); if (option_lexer_trace)\\\n    {fprintf (stderr, \"\\nlexer swallowing\"); dump_lex_value (a);}}\n-#ifndef USE_MAPPED_LOCATION\n-#undef LINEMAP_POSITION_FOR_COLUMN\n-#define LINEMAP_POSITION_FOR_COLUMN(INPUT, LINETABLE, COL)\n-#endif\n %}\n \n %option nostack\n@@ -242,13 +238,9 @@ update_lineno_charno (void)\n       {\n          if ( yytext[yyl] == '\\n' ) \n             {\n-#ifdef USE_MAPPED_LOCATION\n \t      source_location s = linemap_line_start (line_table, ++lineno,\n \t\t\t\t\t\t      80);\n \t      input_location = s;\n-#else\n-\t      input_line = ++lineno;\n-#endif\n \t      next_tree_charno = 1;\n             } \n          else "}, {"sha": "e667a846eba09bd903b080e41eb5b81a862f5dff", "filename": "gcc/treelang/tree1.c", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ftreelang%2Ftree1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d593c86cfae119d9b8e765a07a952eda35ca5af/gcc%2Ftreelang%2Ftree1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftree1.c?ref=2d593c86cfae119d9b8e765a07a952eda35ca5af", "patch": "@@ -2,7 +2,7 @@\n    Called by GCC's toplev.c\n \n    Copyright (C) 1986, 87, 89, 92-96, 1997, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2007  Free Software Foundation, Inc.\n+   2007, 2008  Free Software Foundation, Inc.\n \n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n@@ -139,11 +139,7 @@ treelang_handle_option (size_t scode, const char *arg ATTRIBUTE_UNUSED,\n bool\n treelang_init (void)\n {\n-#ifndef USE_MAPPED_LOCATION\n-  input_filename = main_input_filename;\n-#else\n   linemap_add (line_table, LC_ENTER, false, main_input_filename, 1);\n-#endif\n \n   /* This error will not happen from GCC as it will always create a\n      fake input file.  */\n@@ -165,10 +161,8 @@ treelang_init (void)\n       exit (1);\n     }\n \n-#ifdef USE_MAPPED_LOCATION\n   linemap_add (line_table, LC_RENAME, false, \"<built-in>\", 1);\n   linemap_line_start (line_table, 0, 1);\n-#endif\n \n   /* Init decls, etc.  */\n   treelang_init_decl_processing ();\n@@ -189,21 +183,15 @@ treelang_finish (void)\n void\n treelang_parse_file (int debug_flag ATTRIBUTE_UNUSED)\n {\n-#ifdef USE_MAPPED_LOCATION\n   source_location s;\n   linemap_add (line_table, LC_RENAME, false, main_input_filename, 1);\n   s = linemap_line_start (line_table, 1, 80);\n   input_location = s;\n-#else\n-  input_line = 1;\n-#endif\n \n   treelang_debug ();\n   yyparse ();\n   cgraph_finalize_compilation_unit ();\n-#ifdef USE_MAPPED_LOCATION\n   linemap_add (line_table, LC_LEAVE, false, NULL, 0);\n-#endif\n   cgraph_optimize ();\n }\n "}]}