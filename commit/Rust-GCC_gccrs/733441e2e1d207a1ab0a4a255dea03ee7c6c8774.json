{"sha": "733441e2e1d207a1ab0a4a255dea03ee7c6c8774", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMzNDQxZTJlMWQyMDdhMWFiMGE0YTI1NWRlYTAzZWU3YzZjODc3NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-11-05T14:55:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-11-05T14:55:53Z"}, "message": "re PR tree-optimization/87873 (ICE: verify_gimple failed (error: incompatible types in PHI argument 0))\n\n2018-11-05  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/87873\n\t* tree-ssa-loop-manip.h (split_loop_exit_edge): Add copy_constants_p\n\targument.\n\t* tree-ssa-loop-manip.c (split_loop_exit_edge): Likewise.\n\t* tree-vect-loop.c (vect_transform_loop): When splitting the\n\tloop exit also create forwarder PHIs for constants.\n\t* tree-vect-loop-manip.c (slpeel_duplicate_current_defs_from_edges):\n\tHandle constant to_arg, add extra checking we match up the correct\n\tPHIs.\n\n\t* gcc.dg/pr87873.c: New testcase.\n\nFrom-SVN: r265812", "tree": {"sha": "62bd882842e65e9ca1e9b1bfc1b94458f8753104", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62bd882842e65e9ca1e9b1bfc1b94458f8753104"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/733441e2e1d207a1ab0a4a255dea03ee7c6c8774", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/733441e2e1d207a1ab0a4a255dea03ee7c6c8774", "html_url": "https://github.com/Rust-GCC/gccrs/commit/733441e2e1d207a1ab0a4a255dea03ee7c6c8774", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/733441e2e1d207a1ab0a4a255dea03ee7c6c8774/comments", "author": null, "committer": null, "parents": [{"sha": "546f678c5cc27adf9ca02cbcc578b2ddaffc0d81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/546f678c5cc27adf9ca02cbcc578b2ddaffc0d81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/546f678c5cc27adf9ca02cbcc578b2ddaffc0d81"}], "stats": {"total": 62, "additions": 53, "deletions": 9}, "files": [{"sha": "11f9e0e56a1329391d6048266f11f7e37b9da938", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/733441e2e1d207a1ab0a4a255dea03ee7c6c8774/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/733441e2e1d207a1ab0a4a255dea03ee7c6c8774/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=733441e2e1d207a1ab0a4a255dea03ee7c6c8774", "patch": "@@ -1,3 +1,15 @@\n+2018-11-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/87873\n+\t* tree-ssa-loop-manip.h (split_loop_exit_edge): Add copy_constants_p\n+\targument.\n+\t* tree-ssa-loop-manip.c (split_loop_exit_edge): Likewise.\n+\t* tree-vect-loop.c (vect_transform_loop): When splitting the\n+\tloop exit also create forwarder PHIs for constants.\n+\t* tree-vect-loop-manip.c (slpeel_duplicate_current_defs_from_edges):\n+\tHandle constant to_arg, add extra checking we match up the correct\n+\tPHIs.\n+\n 2018-11-05  Robin Dapp  <rdapp@linux.ibm.com>\n \n \t* config/s390/s390.md: QImode and HImode for load on condition."}, {"sha": "9001057f89c7dbb5948c31344dbbf6150e5ac5a2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/733441e2e1d207a1ab0a4a255dea03ee7c6c8774/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/733441e2e1d207a1ab0a4a255dea03ee7c6c8774/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=733441e2e1d207a1ab0a4a255dea03ee7c6c8774", "patch": "@@ -1,4 +1,9 @@\n-2018-10-26  Robin Dapp  <rdapp@linux.ibm.com>\n+2018-11-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/87873\n+\t* gcc.dg/pr87873.c: New testcase.\n+\n+2018-11-05  Robin Dapp  <rdapp@linux.ibm.com>\n \n \t* gcc.target/s390/ifcvt-one-insn-bool.c: New test.\n \t* gcc.target/s390/ifcvt-one-insn-char.c: New test."}, {"sha": "63d05342b40f7cd65ce552b4f40146b6f3f2bcec", "filename": "gcc/testsuite/gcc.dg/pr87873.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/733441e2e1d207a1ab0a4a255dea03ee7c6c8774/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87873.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/733441e2e1d207a1ab0a4a255dea03ee7c6c8774/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87873.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87873.c?ref=733441e2e1d207a1ab0a4a255dea03ee7c6c8774", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -ftree-loop-vectorize\" } */\n+\n+long k3;\n+int gs;\n+\n+void\n+s2 (int aj)\n+{\n+  while (aj < 1)\n+    {\n+      gs ^= 1;\n+      k3 = (long) gs * 2;\n+      if (k3 != 0)\n+\tk3 = 0;\n+\n+      ++aj;\n+    }\n+}"}, {"sha": "726590ac6df1f4005e54fb31249f09e113e1ca12", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/733441e2e1d207a1ab0a4a255dea03ee7c6c8774/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/733441e2e1d207a1ab0a4a255dea03ee7c6c8774/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=733441e2e1d207a1ab0a4a255dea03ee7c6c8774", "patch": "@@ -773,10 +773,12 @@ verify_loop_closed_ssa (bool verify_ssa_p, struct loop *loop)\n }\n \n /* Split loop exit edge EXIT.  The things are a bit complicated by a need to\n-   preserve the loop closed ssa form.  The newly created block is returned.  */\n+   preserve the loop closed ssa form.  If COPY_CONSTANTS_P is true then\n+   forwarder PHIs are also created for constant arguments.\n+   The newly created block is returned.  */\n \n basic_block\n-split_loop_exit_edge (edge exit)\n+split_loop_exit_edge (edge exit, bool copy_constants_p)\n {\n   basic_block dest = exit->dest;\n   basic_block bb = split_edge (exit);\n@@ -796,12 +798,13 @@ split_loop_exit_edge (edge exit)\n \n       /* If the argument of the PHI node is a constant, we do not need\n \t to keep it inside loop.  */\n-      if (TREE_CODE (name) != SSA_NAME)\n+      if (TREE_CODE (name) != SSA_NAME\n+\t  && !copy_constants_p)\n \tcontinue;\n \n       /* Otherwise create an auxiliary phi node that will copy the value\n \t of the SSA name out of the loop.  */\n-      new_name = duplicate_ssa_name (name, NULL);\n+      new_name = duplicate_ssa_name (PHI_RESULT (phi), NULL);\n       new_phi = create_phi_node (new_name, bb);\n       add_phi_arg (new_phi, name, exit, locus);\n       SET_USE (op_p, new_name);"}, {"sha": "ddda5cf75158d4d476ab159d1d60a49a75b0053f", "filename": "gcc/tree-ssa-loop-manip.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/733441e2e1d207a1ab0a4a255dea03ee7c6c8774/gcc%2Ftree-ssa-loop-manip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/733441e2e1d207a1ab0a4a255dea03ee7c6c8774/gcc%2Ftree-ssa-loop-manip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.h?ref=733441e2e1d207a1ab0a4a255dea03ee7c6c8774", "patch": "@@ -37,7 +37,7 @@ checking_verify_loop_closed_ssa (bool verify_ssa_p, struct loop *loop = NULL)\n     verify_loop_closed_ssa (verify_ssa_p, loop);\n }\n \n-extern basic_block split_loop_exit_edge (edge);\n+extern basic_block split_loop_exit_edge (edge, bool = false);\n extern basic_block ip_end_pos (struct loop *);\n extern basic_block ip_normal_pos (struct loop *);\n extern void standard_iv_increment_position (struct loop *,"}, {"sha": "f1b023b4e4e053816f75aa42c686e36f308089f9", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/733441e2e1d207a1ab0a4a255dea03ee7c6c8774/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/733441e2e1d207a1ab0a4a255dea03ee7c6c8774/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=733441e2e1d207a1ab0a4a255dea03ee7c6c8774", "patch": "@@ -977,10 +977,15 @@ slpeel_duplicate_current_defs_from_edges (edge from, edge to)\n \t}\n       if (TREE_CODE (from_arg) != SSA_NAME)\n \tgcc_assert (operand_equal_p (from_arg, to_arg, 0));\n-      else\n+      else if (TREE_CODE (to_arg) == SSA_NAME)\n \t{\n \t  if (get_current_def (to_arg) == NULL_TREE)\n-\t    set_current_def (to_arg, get_current_def (from_arg));\n+\t    {\n+\t      gcc_assert (types_compatible_p (TREE_TYPE (to_arg),\n+\t\t\t\t\t      TREE_TYPE (get_current_def\n+\t\t\t\t\t\t\t   (from_arg))));\n+\t      set_current_def (to_arg, get_current_def (from_arg));\n+\t    }\n \t}\n       gsi_next (&gsi_from);\n       gsi_next (&gsi_to);"}, {"sha": "41a46c2d234e2eb17cb1026d6d4291ed5926db9a", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/733441e2e1d207a1ab0a4a255dea03ee7c6c8774/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/733441e2e1d207a1ab0a4a255dea03ee7c6c8774/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=733441e2e1d207a1ab0a4a255dea03ee7c6c8774", "patch": "@@ -8196,7 +8196,7 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n   edge e = single_exit (loop);\n   if (! single_pred_p (e->dest))\n     {\n-      split_loop_exit_edge (e);\n+      split_loop_exit_edge (e, true);\n       if (dump_enabled_p ())\n \tdump_printf (MSG_NOTE, \"split exit edge\\n\");\n     }"}]}