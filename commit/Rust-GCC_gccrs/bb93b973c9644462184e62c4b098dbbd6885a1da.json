{"sha": "bb93b973c9644462184e62c4b098dbbd6885a1da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI5M2I5NzNjOTY0NDQ2MjE4NGU2MmM0YjA5OGRiYmQ2ODg1YTFkYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2002-01-12T14:05:32Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2002-01-12T14:05:32Z"}, "message": "diagnostic.c (warn_deprecated_use): Rework to lower indentation.\n\n\t* diagnostic.c (warn_deprecated_use): Rework to lower indentation.\n\t* expr.c (emit_move_insn_1): Remove warning, use HOST_WIDE_INT for\n\toffsets, and change line folding.\n\t* optabs.c (expand_binop): Remove warnings.\n\t* sdbout.c (sdbout_record_type_name): Constify NAME to avoid warning.\n\nFrom-SVN: r48801", "tree": {"sha": "78bd460be80a3f429232e5c5858492b59c3012f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78bd460be80a3f429232e5c5858492b59c3012f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb93b973c9644462184e62c4b098dbbd6885a1da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb93b973c9644462184e62c4b098dbbd6885a1da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb93b973c9644462184e62c4b098dbbd6885a1da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb93b973c9644462184e62c4b098dbbd6885a1da/comments", "author": null, "committer": null, "parents": [{"sha": "6a0b0c1b5ecd6ee74c0cfc43038114ad0504a37a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a0b0c1b5ecd6ee74c0cfc43038114ad0504a37a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a0b0c1b5ecd6ee74c0cfc43038114ad0504a37a"}], "stats": {"total": 125, "additions": 67, "deletions": 58}, "files": [{"sha": "c1ff26bf01215001dc17f68318dfc4efa20786e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb93b973c9644462184e62c4b098dbbd6885a1da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb93b973c9644462184e62c4b098dbbd6885a1da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb93b973c9644462184e62c4b098dbbd6885a1da", "patch": "@@ -1,3 +1,11 @@\n+Sat Jan 12 08:54:51 2002  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* diagnostic.c (warn_deprecated_use): Rework to lower indentation.\n+\t* expr.c (emit_move_insn_1): Remove warning, use HOST_WIDE_INT for\n+\toffsets, and change line folding.\n+\t* optabs.c (expand_binop): Remove warnings.\n+\t* sdbout.c (sdbout_record_type_name): Constify NAME to avoid warning.\n+\t\n 2002-01-12  Graham Stott <grahams@redhat.com>\n \n \t* attribs.c (handle_deprecated_attribute): constify WHAT."}, {"sha": "2803049cf0408f89fd0f8c957bda434db2816fbb", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 28, "deletions": 33, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb93b973c9644462184e62c4b098dbbd6885a1da/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb93b973c9644462184e62c4b098dbbd6885a1da/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=bb93b973c9644462184e62c4b098dbbd6885a1da", "patch": "@@ -1525,41 +1525,36 @@ void\n warn_deprecated_use (node)\n      tree node;\n {\n-  if (node && warn_deprecated_decl)\n+  if (node == 0 || !warn_deprecated_decl)\n+    return;\n+\n+  if (DECL_P (node))\n+    warning (\"`%s' is deprecated (declared at %s:%d)\",\n+\t     IDENTIFIER_POINTER (DECL_NAME (node)),\n+\t     DECL_SOURCE_FILE (node), DECL_SOURCE_LINE (node));\n+  else if (TYPE_P (node))\n     {\n-      if (DECL_P (node))\n-        {\n-\t  warning (\"`%s' is deprecated (declared at %s:%d)\",\n-\t\t   IDENTIFIER_POINTER (DECL_NAME (node)),\n-\t\t   DECL_SOURCE_FILE (node), DECL_SOURCE_LINE (node));\n-        }\n-      else if (TYPE_P (node))\n-        {\n-      \t  const char *what = NULL;\n-\t  tree decl = TYPE_STUB_DECL (node);\n-      \t\n-\t  if (TREE_CODE (TYPE_NAME (node)) == IDENTIFIER_NODE)\n-\t    what = IDENTIFIER_POINTER (TYPE_NAME (node));\n-\t  else if (TREE_CODE (TYPE_NAME (node)) == TYPE_DECL\n-\t\t   && DECL_NAME (TYPE_NAME (node)))\n-\t    what = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (node)));\n+      const char *what = NULL;\n+      tree decl = TYPE_STUB_DECL (node);\n+\n+      if (TREE_CODE (TYPE_NAME (node)) == IDENTIFIER_NODE)\n+\twhat = IDENTIFIER_POINTER (TYPE_NAME (node));\n+      else if (TREE_CODE (TYPE_NAME (node)) == TYPE_DECL\n+\t       && DECL_NAME (TYPE_NAME (node)))\n+\twhat = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (node)));\n \t\n-\t  if (what)\n-\t    {\n-\t      if (decl)\n-\t        warning (\"`%s' is deprecated (declared at %s:%d)\", what,\n-\t\t         DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl));\n-\t      else\n-\t        warning (\"`%s' is deprecated\", what);\n-\t    }\n+      if (what)\n+\t{\n+\t  if (decl)\n+\t    warning (\"`%s' is deprecated (declared at %s:%d)\", what,\n+\t\t     DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl));\n \t  else\n-\t    {\n-\t      if (decl)\n-\t        warning (\"type is deprecated (declared at %s:%d)\",\n-\t\t         DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl));\n-\t      else\n-\t        warning (\"type is deprecated\");\n-\t    }\n-        }\n+\t    warning (\"`%s' is deprecated\", what);\n+\t}\n+      else if (decl)\n+\twarning (\"type is deprecated (declared at %s:%d)\",\n+\t\t DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl));\n+      else\n+\twarning (\"type is deprecated\");\n     }\n }"}, {"sha": "b17658a041d68a67f313c7fcdcf7ade9a5b57993", "filename": "gcc/expr.c", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb93b973c9644462184e62c4b098dbbd6885a1da/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb93b973c9644462184e62c4b098dbbd6885a1da/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=bb93b973c9644462184e62c4b098dbbd6885a1da", "patch": "@@ -2791,7 +2791,6 @@ emit_move_insn_1 (x, y)\n   enum machine_mode mode = GET_MODE (x);\n   enum machine_mode submode;\n   enum mode_class class = GET_MODE_CLASS (mode);\n-  unsigned int i;\n \n   if ((unsigned int) mode >= (unsigned int) MAX_MACHINE_MODE)\n     abort ();\n@@ -2817,10 +2816,11 @@ emit_move_insn_1 (x, y)\n       /* In case we output to the stack, but the size is smaller machine can\n \t push exactly, we need to use move instructions.  */\n       if (stack\n-\t  && PUSH_ROUNDING (GET_MODE_SIZE (submode)) != GET_MODE_SIZE (submode))\n+\t  && (PUSH_ROUNDING (GET_MODE_SIZE (submode))\n+\t      != GET_MODE_SIZE (submode)))\n \t{\n \t  rtx temp;\n-\t  int offset1, offset2;\n+\t  HOST_WIDE_INT offset1, offset2;\n \n \t  /* Do not use anti_adjust_stack, since we don't want to update\n \t     stack_pointer_delta.  */\n@@ -2832,12 +2832,13 @@ emit_move_insn_1 (x, y)\n #endif\n \t\t\t       stack_pointer_rtx,\n \t\t\t       GEN_INT\n-\t\t\t\t (PUSH_ROUNDING (GET_MODE_SIZE (GET_MODE (x)))),\n-\t\t\t       stack_pointer_rtx,\n-\t\t\t       0,\n-\t\t\t       OPTAB_LIB_WIDEN);\n+\t\t\t\t (PUSH_ROUNDING\n+\t\t\t\t  (GET_MODE_SIZE (GET_MODE (x)))),\n+\t\t\t       stack_pointer_rtx, 0, OPTAB_LIB_WIDEN);\n+\n \t  if (temp != stack_pointer_rtx)\n \t    emit_move_insn (stack_pointer_rtx, temp);\n+\n #ifdef STACK_GROWS_DOWNWARD\n \t  offset1 = 0;\n \t  offset2 = GET_MODE_SIZE (submode);\n@@ -2846,6 +2847,7 @@ emit_move_insn_1 (x, y)\n \t  offset2 = (-PUSH_ROUNDING (GET_MODE_SIZE (GET_MODE (x)))\n \t\t     + GET_MODE_SIZE (submode));\n #endif\n+\n \t  emit_move_insn (change_address (x, submode,\n \t\t\t\t\t  gen_rtx_PLUS (Pmode,\n \t\t\t\t\t\t        stack_pointer_rtx,\n@@ -2901,8 +2903,10 @@ emit_move_insn_1 (x, y)\n \t  if (GET_MODE_BITSIZE (mode) < 2 * BITS_PER_WORD\n \t      && (reload_in_progress | reload_completed) == 0)\n \t    {\n-\t      int packed_dest_p = (REG_P (x) && REGNO (x) < FIRST_PSEUDO_REGISTER);\n-\t      int packed_src_p  = (REG_P (y) && REGNO (y) < FIRST_PSEUDO_REGISTER);\n+\t      int packed_dest_p\n+\t\t= (REG_P (x) && REGNO (x) < FIRST_PSEUDO_REGISTER);\n+\t      int packed_src_p\n+\t\t= (REG_P (y) && REGNO (y) < FIRST_PSEUDO_REGISTER);\n \n \t      if (packed_dest_p || packed_src_p)\n \t\t{\n@@ -2924,12 +2928,14 @@ emit_move_insn_1 (x, y)\n \t\t      if (packed_dest_p)\n \t\t\t{\n \t\t\t  rtx sreg = gen_rtx_SUBREG (reg_mode, x, 0);\n+\n \t\t\t  emit_move_insn_1 (cmem, y);\n \t\t\t  return emit_move_insn_1 (sreg, mem);\n \t\t\t}\n \t\t      else\n \t\t\t{\n \t\t\t  rtx sreg = gen_rtx_SUBREG (reg_mode, y, 0);\n+\n \t\t\t  emit_move_insn_1 (mem, sreg);\n \t\t\t  return emit_move_insn_1 (x, cmem);\n \t\t\t}\n@@ -2950,9 +2956,7 @@ emit_move_insn_1 (x, y)\n \t      && ! (reload_in_progress || reload_completed)\n \t      && (GET_CODE (realpart_x) == SUBREG\n \t\t  || GET_CODE (imagpart_x) == SUBREG))\n-\t    {\n-\t      emit_insn (gen_rtx_CLOBBER (VOIDmode, x));\n-\t    }\n+\t    emit_insn (gen_rtx_CLOBBER (VOIDmode, x));\n \n \t  emit_insn (GEN_FCN (mov_optab->handlers[(int) submode].insn_code)\n \t\t     (realpart_x, realpart_y));\n@@ -2971,6 +2975,7 @@ emit_move_insn_1 (x, y)\n       rtx last_insn = 0;\n       rtx seq, inner;\n       int need_clobber;\n+      int i;\n \n #ifdef PUSH_ROUNDING\n \n@@ -2991,19 +2996,20 @@ emit_move_insn_1 (x, y)\n #endif\n \t\t\t       stack_pointer_rtx,\n \t\t\t       GEN_INT\n-\t\t\t\t (PUSH_ROUNDING (GET_MODE_SIZE (GET_MODE (x)))),\n-\t\t\t       stack_pointer_rtx,\n-\t\t\t       0,\n-\t\t\t       OPTAB_LIB_WIDEN);\n+\t\t\t\t (PUSH_ROUNDING\n+\t\t\t\t  (GET_MODE_SIZE (GET_MODE (x)))),\n+\t\t\t       stack_pointer_rtx, 0,& OPTAB_LIB_WIDEN);\n+\n           if (temp != stack_pointer_rtx)\n             emit_move_insn (stack_pointer_rtx, temp);\n \n \t  code = GET_CODE (XEXP (x, 0));\n+\n \t  /* Just hope that small offsets off SP are OK.  */\n \t  if (code == POST_INC)\n \t    temp = gen_rtx_PLUS (Pmode, stack_pointer_rtx, \n-\t\t\t\tGEN_INT (-(HOST_WIDE_INT)\n-\t\t\t\t\t   GET_MODE_SIZE (GET_MODE (x))));\n+\t\t\t\tGEN_INT (-((HOST_WIDE_INT)\n+\t\t\t\t\t   GET_MODE_SIZE (GET_MODE (x)))));\n \t  else if (code == POST_DEC)\n \t    temp = gen_rtx_PLUS (Pmode, stack_pointer_rtx, \n \t\t\t\tGEN_INT (GET_MODE_SIZE (GET_MODE (x))));\n@@ -3062,9 +3068,7 @@ emit_move_insn_1 (x, y)\n       if (x != y\n \t  && ! (reload_in_progress || reload_completed)\n \t  && need_clobber != 0)\n-\t{\n-\t  emit_insn (gen_rtx_CLOBBER (VOIDmode, x));\n-\t}\n+\temit_insn (gen_rtx_CLOBBER (VOIDmode, x));\n \n       emit_insn (seq);\n "}, {"sha": "2a2ebb3a8dfb579dc3fcfccb37d00e3f7866393f", "filename": "gcc/optabs.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb93b973c9644462184e62c4b098dbbd6885a1da/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb93b973c9644462184e62c4b098dbbd6885a1da/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=bb93b973c9644462184e62c4b098dbbd6885a1da", "patch": "@@ -895,7 +895,7 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n       && GET_MODE_SIZE (mode) > UNITS_PER_WORD\n       && binoptab->handlers[(int) word_mode].insn_code != CODE_FOR_nothing)\n     {\n-      unsigned int i;\n+      int i;\n       rtx insns;\n       rtx equiv_value;\n \n@@ -1186,7 +1186,7 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n       && GET_MODE_SIZE (mode) >= 2 * UNITS_PER_WORD\n       && binoptab->handlers[(int) word_mode].insn_code != CODE_FOR_nothing)\n     {\n-      unsigned int i;\n+      int i;\n       optab otheroptab = binoptab == add_optab ? sub_optab : add_optab;\n       unsigned int nwords = GET_MODE_BITSIZE (mode) / BITS_PER_WORD;\n       rtx carry_in = NULL_RTX, carry_out = NULL_RTX;\n@@ -2176,7 +2176,7 @@ expand_unop (mode, unoptab, op0, target, unsignedp)\n       && GET_MODE_SIZE (mode) > UNITS_PER_WORD\n       && unoptab->handlers[(int) word_mode].insn_code != CODE_FOR_nothing)\n     {\n-      unsigned int i;\n+      int i;\n       rtx insns;\n \n       if (target == 0 || target == op0)\n@@ -2191,6 +2191,7 @@ expand_unop (mode, unoptab, op0, target, unsignedp)\n \t  rtx x = expand_unop (word_mode, unoptab,\n \t\t\t       operand_subword_force (op0, i, mode),\n \t\t\t       target_piece, unsignedp);\n+\n \t  if (target_piece != x)\n \t    emit_move_insn (target_piece, x);\n \t}"}, {"sha": "91f92aa77a572e1ca428ae91c0f44019e3a6979b", "filename": "gcc/sdbout.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb93b973c9644462184e62c4b098dbbd6885a1da/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb93b973c9644462184e62c4b098dbbd6885a1da/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=bb93b973c9644462184e62c4b098dbbd6885a1da", "patch": "@@ -440,7 +440,7 @@ static void\n sdbout_record_type_name (type)\n      tree type;\n {\n-  char *name = 0;\n+  const char *name = 0;\n   int no_name;\n \n   if (KNOWN_TYPE_TAG (type))\n@@ -449,6 +449,7 @@ sdbout_record_type_name (type)\n   if (TYPE_NAME (type) != 0)\n     {\n       tree t = 0;\n+\n       /* Find the IDENTIFIER_NODE for the type name.  */\n       if (TREE_CODE (TYPE_NAME (type)) == IDENTIFIER_NODE)\n \tt = TYPE_NAME (type);"}]}