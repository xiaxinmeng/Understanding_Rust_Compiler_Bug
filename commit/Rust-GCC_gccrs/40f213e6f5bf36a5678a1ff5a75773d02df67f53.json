{"sha": "40f213e6f5bf36a5678a1ff5a75773d02df67f53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBmMjEzZTZmNWJmMzZhNTY3OGExZmY1YTc1NzczZDAyZGY2N2Y1Mw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2013-11-26T13:31:25Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2013-11-26T13:31:25Z"}, "message": "Add -fuse-ld=bfd/-fuse-ld=gold support to exec-tool.in\n\n\tPR bootstrap/55552\n\t* configure.ac (install_gold_as_default): New.  Set to yes for\n\t--disable-ld or --enable-gold=default.\n\t(gcc_cv_ld_gold_srcdir): New.\n\t(gcc_cv_ld): Also check in-tree gold if install_gold_as_default\n\tis yes.\n\t(ORIGINAL_LD_BFD_FOR_TARGET): New AC_SUBST.\n\t(ORIGINAL_LD_GOLD_FOR_TARGET): Likewise.\n\t* configure: Regenerated.\n\n\t* exec-tool.in (ORIGINAL_LD_BFD_FOR_TARGET): New variable.\n\t(ORIGINAL_LD_GOLD_FOR_TARGET): Likewise.\n\t(original) [collect-ld && -fuse-ld=bfd]: Set to\n\t$ORIGINAL_LD_BFD_FOR_TARGET.\n\t(original) [collect-ld && -fuse-ld=gold]: Set to\n\t$ORIGINAL_LD_GOLD_FOR_TARGET.\n\t(dir) [collect-ld && ../gold/ld-new]: Set to gold.\n\t(fast_install) [collect-ld && ../gold/ld-new]: Set to yes.\n\nFrom-SVN: r205392", "tree": {"sha": "39b9cfc7867e282de9048571b137b32b0c4f4c06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39b9cfc7867e282de9048571b137b32b0c4f4c06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40f213e6f5bf36a5678a1ff5a75773d02df67f53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f213e6f5bf36a5678a1ff5a75773d02df67f53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40f213e6f5bf36a5678a1ff5a75773d02df67f53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f213e6f5bf36a5678a1ff5a75773d02df67f53/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "84c44566f3f16c29b65a007944e0d3ea81b48c34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84c44566f3f16c29b65a007944e0d3ea81b48c34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84c44566f3f16c29b65a007944e0d3ea81b48c34"}], "stats": {"total": 153, "additions": 144, "deletions": 9}, "files": [{"sha": "d63759e2c8c7f6f6c85212d0f3e16db282506eea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f213e6f5bf36a5678a1ff5a75773d02df67f53/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f213e6f5bf36a5678a1ff5a75773d02df67f53/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40f213e6f5bf36a5678a1ff5a75773d02df67f53", "patch": "@@ -1,3 +1,24 @@\n+2013-11-26   H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR bootstrap/55552\n+\t* configure.ac (install_gold_as_default): New.  Set to yes for\n+\t--disable-ld or --enable-gold=default.\n+\t(gcc_cv_ld_gold_srcdir): New.\n+\t(gcc_cv_ld): Also check in-tree gold if install_gold_as_default\n+\tis yes.\n+\t(ORIGINAL_LD_BFD_FOR_TARGET): New AC_SUBST.\n+\t(ORIGINAL_LD_GOLD_FOR_TARGET): Likewise.\n+\t* configure: Regenerated.\n+\n+\t* exec-tool.in (ORIGINAL_LD_BFD_FOR_TARGET): New variable.\n+\t(ORIGINAL_LD_GOLD_FOR_TARGET): Likewise.\n+\t(original) [collect-ld && -fuse-ld=bfd]: Set to\n+\t$ORIGINAL_LD_BFD_FOR_TARGET.\n+\t(original) [collect-ld && -fuse-ld=gold]: Set to\n+\t$ORIGINAL_LD_GOLD_FOR_TARGET.\n+\t(dir) [collect-ld && ../gold/ld-new]: Set to gold.\n+\t(fast_install) [collect-ld && ../gold/ld-new]: Set to yes.\n+\n 2013-11-26  Terry Guo  <terry.guo@arm.com>\n \n \t* config/arm/arm.c (require_pic_register): Handle high pic base"}, {"sha": "fdf0cd0819b3c81f16bb5e2772eb2a81ed780ac1", "filename": "gcc/configure", "status": "modified", "additions": 55, "deletions": 2, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f213e6f5bf36a5678a1ff5a75773d02df67f53/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f213e6f5bf36a5678a1ff5a75773d02df67f53/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=40f213e6f5bf36a5678a1ff5a75773d02df67f53", "patch": "@@ -682,6 +682,8 @@ gcc_cv_readelf\n gcc_cv_objdump\n ORIGINAL_NM_FOR_TARGET\n gcc_cv_nm\n+ORIGINAL_LD_GOLD_FOR_TARGET\n+ORIGINAL_LD_BFD_FOR_TARGET\n ORIGINAL_LD_FOR_TARGET\n ORIGINAL_PLUGIN_LD_FOR_TARGET\n gcc_cv_ld\n@@ -911,6 +913,8 @@ enable_static\n with_pic\n enable_fast_install\n enable_libtool_lock\n+enable_ld\n+enable_gold\n with_plugin_ld\n enable_gnu_indirect_function\n enable_initfini_array\n@@ -1624,6 +1628,8 @@ Optional Features:\n   --enable-fast-install[=PKGS]\n                           optimize for fast installation [default=yes]\n   --disable-libtool-lock  avoid locking (might break parallel builds)\n+  --enable-ld[=ARG]       build ld [ARG={default,yes,no}]\n+  --enable-gold[=ARG]     build gold [ARG={default,yes,no}]\n   --enable-gnu-indirect-function\n                           enable the use of the @gnu_indirect_function to\n                           glibc systems\n@@ -17913,7 +17919,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17916 \"configure\"\n+#line 17922 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18019,7 +18025,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18022 \"configure\"\n+#line 18028 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -21397,6 +21403,39 @@ $as_echo \"$gcc_cv_as\" >&6; }\n   in_tree_gas=no\n fi\n \n+default_ld=\n+# Check whether --enable-ld was given.\n+if test \"${enable_ld+set}\" = set; then :\n+  enableval=$enable_ld; case \"${enableval}\" in\n+ no)\n+   default_ld=ld.gold\n+   ;;\n+ esac\n+fi\n+\n+\n+# Check whether --enable-gold was given.\n+if test \"${enable_gold+set}\" = set; then :\n+  enableval=$enable_gold; case \"${enableval}\" in\n+ default)\n+   install_gold_as_default=yes\n+   ;;\n+ yes)\n+   if test x${default_ld} != x; then\n+     install_gold_as_default=yes\n+   fi\n+   ;;\n+ no)\n+   ;;\n+ *)\n+   as_fn_error \"invalid --enable-gold argument\" \"$LINENO\" 5\n+   ;;\n+ esac\n+else\n+  install_gold_as_default=no\n+fi\n+\n+\n # Identify the linker which will work hand-in-glove with the newly\n # built GCC, so that we can examine its features.  This is the linker\n # which will be driven by the driver program.\n@@ -21407,6 +21446,7 @@ fi\n gcc_cv_gld_major_version=\n gcc_cv_gld_minor_version=\n gcc_cv_ld_gld_srcdir=`echo $srcdir | sed -e 's,/gcc$,,'`/ld\n+gcc_cv_ld_gold_srcdir=`echo $srcdir | sed -e 's,/gcc$,,'`/gold\n gcc_cv_ld_bfd_srcdir=`echo $srcdir | sed -e 's,/gcc$,,'`/bfd\n \n if test \"${gcc_cv_ld+set}\" = set; then :\n@@ -21415,6 +21455,11 @@ else\n \n if test -x \"$DEFAULT_LINKER\"; then\n \tgcc_cv_ld=\"$DEFAULT_LINKER\"\n+elif test $install_gold_as_default = yes \\\n+     && test -f $gcc_cv_ld_gold_srcdir/configure.ac \\\n+     && test -f ../gold/Makefile \\\n+     && test x$build = x$host; then\n+\tgcc_cv_ld=../gold/ld-new$build_exeext\n elif test -f $gcc_cv_ld_gld_srcdir/configure.in \\\n      && test -f ../ld/Makefile \\\n      && test x$build = x$host; then\n@@ -21544,12 +21589,20 @@ $as_echo \"newly built ld\" >&6; }\n \tesac\n \tgcc_cv_gld_major_version=`expr \"$gcc_cv_gld_version\" : \"VERSION=\\([0-9]*\\)\"`\n \tgcc_cv_gld_minor_version=`expr \"$gcc_cv_gld_version\" : \"VERSION=[0-9]*\\.\\([0-9]*\\)\"`\n+\tORIGINAL_LD_BFD_FOR_TARGET=../ld/ld-new$build_exeext\n+\tORIGINAL_LD_GOLD_FOR_TARGET=../gold/ld-new$build_exeext\n else\n \t{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_ld\" >&5\n $as_echo \"$gcc_cv_ld\" >&6; }\n \tin_tree_ld=no\n+\tgcc_cvs_ld_program=`dirname $gcc_cv_ld`/`basename $gcc_cv_ld $host_exeext`\n+\tORIGINAL_LD_BFD_FOR_TARGET=${gcc_cvs_ld_program}.bfd$host_exeext\n+\tORIGINAL_LD_GOLD_FOR_TARGET=${gcc_cvs_ld_program}.gold$host_exeext\n fi\n \n+\n+\n+\n # Figure out what nm we will be using.\n gcc_cv_binutils_srcdir=`echo $srcdir | sed -e 's,/gcc$,,'`/binutils\n if test \"${gcc_cv_nm+set}\" = set; then :"}, {"sha": "91a22d58cf7543160f2bc6252003be8b07963d73", "filename": "gcc/configure.ac", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f213e6f5bf36a5678a1ff5a75773d02df67f53/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f213e6f5bf36a5678a1ff5a75773d02df67f53/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=40f213e6f5bf36a5678a1ff5a75773d02df67f53", "patch": "@@ -2016,6 +2016,34 @@ else\n   in_tree_gas=no\n fi\n \n+default_ld=\n+AC_ARG_ENABLE(ld,\n+[[  --enable-ld[=ARG]       build ld [ARG={default,yes,no}]]],\n+[case \"${enableval}\" in\n+ no)\n+   default_ld=ld.gold\n+   ;;\n+ esac])\n+\n+AC_ARG_ENABLE(gold,\n+[[  --enable-gold[=ARG]     build gold [ARG={default,yes,no}]]],\n+[case \"${enableval}\" in\n+ default)\n+   install_gold_as_default=yes\n+   ;;\n+ yes)\n+   if test x${default_ld} != x; then\n+     install_gold_as_default=yes\n+   fi\n+   ;;\n+ no)\n+   ;;\n+ *)\n+   AC_MSG_ERROR([invalid --enable-gold argument])\n+   ;;\n+ esac],\n+[install_gold_as_default=no])\n+\n # Identify the linker which will work hand-in-glove with the newly\n # built GCC, so that we can examine its features.  This is the linker\n # which will be driven by the driver program.\n@@ -2026,11 +2054,17 @@ fi\n gcc_cv_gld_major_version=\n gcc_cv_gld_minor_version=\n gcc_cv_ld_gld_srcdir=`echo $srcdir | sed -e 's,/gcc$,,'`/ld\n+gcc_cv_ld_gold_srcdir=`echo $srcdir | sed -e 's,/gcc$,,'`/gold\n gcc_cv_ld_bfd_srcdir=`echo $srcdir | sed -e 's,/gcc$,,'`/bfd\n \n AS_VAR_SET_IF(gcc_cv_ld,, [\n if test -x \"$DEFAULT_LINKER\"; then\n \tgcc_cv_ld=\"$DEFAULT_LINKER\"\n+elif test $install_gold_as_default = yes \\\n+     && test -f $gcc_cv_ld_gold_srcdir/configure.ac \\\n+     && test -f ../gold/Makefile \\\n+     && test x$build = x$host; then\n+\tgcc_cv_ld=../gold/ld-new$build_exeext\n elif test -f $gcc_cv_ld_gld_srcdir/configure.in \\\n      && test -f ../ld/Makefile \\\n      && test x$build = x$host; then\n@@ -2112,11 +2146,19 @@ changequote(,)dnl\n \tgcc_cv_gld_major_version=`expr \"$gcc_cv_gld_version\" : \"VERSION=\\([0-9]*\\)\"`\n \tgcc_cv_gld_minor_version=`expr \"$gcc_cv_gld_version\" : \"VERSION=[0-9]*\\.\\([0-9]*\\)\"`\n changequote([,])dnl\n+\tORIGINAL_LD_BFD_FOR_TARGET=../ld/ld-new$build_exeext\n+\tORIGINAL_LD_GOLD_FOR_TARGET=../gold/ld-new$build_exeext\n else\n \tAC_MSG_RESULT($gcc_cv_ld)\n \tin_tree_ld=no\n+\tgcc_cvs_ld_program=`dirname $gcc_cv_ld`/`basename $gcc_cv_ld $host_exeext`\n+\tORIGINAL_LD_BFD_FOR_TARGET=${gcc_cvs_ld_program}.bfd$host_exeext\n+\tORIGINAL_LD_GOLD_FOR_TARGET=${gcc_cvs_ld_program}.gold$host_exeext\n fi\n \n+AC_SUBST(ORIGINAL_LD_BFD_FOR_TARGET)\n+AC_SUBST(ORIGINAL_LD_GOLD_FOR_TARGET)\n+\n # Figure out what nm we will be using.\n gcc_cv_binutils_srcdir=`echo $srcdir | sed -e 's,/gcc$,,'`/binutils\n AS_VAR_SET_IF(gcc_cv_nm,, ["}, {"sha": "76d0ef65ab10977c427e5b941161249dc72a9ab3", "filename": "gcc/exec-tool.in", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f213e6f5bf36a5678a1ff5a75773d02df67f53/gcc%2Fexec-tool.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f213e6f5bf36a5678a1ff5a75773d02df67f53/gcc%2Fexec-tool.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexec-tool.in?ref=40f213e6f5bf36a5678a1ff5a75773d02df67f53", "patch": "@@ -21,6 +21,8 @@\n \n ORIGINAL_AS_FOR_TARGET=\"@ORIGINAL_AS_FOR_TARGET@\"\n ORIGINAL_LD_FOR_TARGET=\"@ORIGINAL_LD_FOR_TARGET@\"\n+ORIGINAL_LD_BFD_FOR_TARGET=\"@ORIGINAL_LD_BFD_FOR_TARGET@\"\n+ORIGINAL_LD_GOLD_FOR_TARGET=\"@ORIGINAL_LD_GOLD_FOR_TARGET@\"\n ORIGINAL_PLUGIN_LD_FOR_TARGET=\"@ORIGINAL_PLUGIN_LD_FOR_TARGET@\"\n ORIGINAL_NM_FOR_TARGET=\"@ORIGINAL_NM_FOR_TARGET@\"\n exeext=@host_exeext@\n@@ -36,15 +38,32 @@ case \"$invoked\" in\n     dir=gas\n     ;;\n   collect-ld)\n-    # when using a linker plugin, gcc will always pass '-plugin' as the\n-    # first or second option to the linker.\n-    if test x\"$1\" = \"x-plugin\" || test x\"$2\" = \"x-plugin\"; then\n-      original=$ORIGINAL_PLUGIN_LD_FOR_TARGET\n+    # Check -fuse-ld=bfd and -fuse-ld=gold\n+    case \" $* \" in\n+      *\\ -fuse-ld=bfd\\ *)\n+\toriginal=$ORIGINAL_LD_BFD_FOR_TARGET\n+\t;;\n+      *\\ -fuse-ld=gold\\ *)\n+\toriginal=$ORIGINAL_LD_GOLD_FOR_TARGET\n+\t;;\n+      *)\n+\t# when using a linker plugin, gcc will always pass '-plugin' as the\n+\t# first or second option to the linker.\n+\tif test x\"$1\" = \"x-plugin\" || test x\"$2\" = \"x-plugin\"; then\n+\t  original=$ORIGINAL_PLUGIN_LD_FOR_TARGET\n+\telse\n+\t  original=$ORIGINAL_LD_FOR_TARGET\n+\tfi\n+\t;;\n+    esac\n+    prog=ld-new$exeext\n+    if test \"$original\" = ../gold/ld-new$exeext; then\n+      dir=gold\n+      # No need to handle relink since gold doesn't use libtool.\n+      fast_install=yes\n     else\n-      original=$ORIGINAL_LD_FOR_TARGET\n+      dir=ld\n     fi\n-    prog=ld-new$exeext\n-    dir=ld\n     id=ld\n     ;;\n   nm)"}]}