{"sha": "982b149787057bb288caed389f231c4979e969dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgyYjE0OTc4NzA1N2JiMjg4Y2FlZDM4OWYyMzFjNDk3OWU5NjlkYw==", "commit": {"author": {"name": "Xiong Hu Luo", "email": "luoxhu@linux.ibm.com", "date": "2019-07-25T09:20:13Z"}, "committer": {"name": "Xiong Hu Luo", "email": "luoxhu@gcc.gnu.org", "date": "2019-07-25T09:20:13Z"}, "message": "Generalize get_most_common_single_value to return n_th value & count\n\nCurrently get_most_common_single_value could only return the max hist\n<value, count>, add sort after reading from disk, then it return nth value\nin later use.  Rename it to get_nth_most_common_value.\n\ngcc/ChangeLog:\n\n2019-07-15  Xiong Hu Luo  <luoxhu@linux.ibm.com>\n\n\t* ipa-profile.c (get_most_common_single_value): Use\n\tget_nth_most_common_value.\n\t* profile.c (sort_hist_value): New function.\n\t(compute_value_histograms): Call sort_hist_value to sort the\n\tvalues after loading from disk.\n\t* value-prof.c (get_most_common_single_value): Rename to ...\n\tget_nth_most_common_value.  Add input params n, return\n\tthe n_th value and count.\n\t(gimple_divmod_fixed_value_transform): Use\n\tget_nth_most_common_value.\n\t(gimple_ic_transform): Likewise.\n\t(gimple_stringops_transform): Likewise.\n\t* value-prof.h (get_most_common_single_value): Add input params\n\tn, default to 0.\n\nFrom-SVN: r273789", "tree": {"sha": "2a07f4c7042d98ef450b5c6e62c0f08bb7e143f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a07f4c7042d98ef450b5c6e62c0f08bb7e143f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/982b149787057bb288caed389f231c4979e969dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/982b149787057bb288caed389f231c4979e969dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/982b149787057bb288caed389f231c4979e969dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/982b149787057bb288caed389f231c4979e969dc/comments", "author": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "25b46fc9185402b36eeab7e2ec12931bfec378ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25b46fc9185402b36eeab7e2ec12931bfec378ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25b46fc9185402b36eeab7e2ec12931bfec378ba"}], "stats": {"total": 123, "additions": 86, "deletions": 37}, "files": [{"sha": "ef12578de30469696ff38dbc4740a530d4636670", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/982b149787057bb288caed389f231c4979e969dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/982b149787057bb288caed389f231c4979e969dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=982b149787057bb288caed389f231c4979e969dc", "patch": "@@ -1,3 +1,20 @@\n+2019-07-25  Xiong Hu Luo  <luoxhu@linux.ibm.com>\n+\n+\t* ipa-profile.c (get_most_common_single_value): Use\n+\tget_nth_most_common_value.\n+\t* profile.c (sort_hist_value): New function.\n+\t(compute_value_histograms): Call sort_hist_value to sort the\n+\tvalues after loading from disk.\n+\t* value-prof.c (get_most_common_single_value): Rename to ...\n+\tget_nth_most_common_value.  Add input params n, return\n+\tthe n_th value and count.\n+\t(gimple_divmod_fixed_value_transform): Use\n+\tget_nth_most_common_value.\n+\t(gimple_ic_transform): Likewise.\n+\t(gimple_stringops_transform): Likewise.\n+\t* value-prof.h (get_most_common_single_value): Add input params\n+\tn, default to 0.\n+\n 2019-07-25  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/91236"}, {"sha": "970dba39c8015fdb1fd4821b19711c9a4bc11510", "filename": "gcc/ipa-profile.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/982b149787057bb288caed389f231c4979e969dc/gcc%2Fipa-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/982b149787057bb288caed389f231c4979e969dc/gcc%2Fipa-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-profile.c?ref=982b149787057bb288caed389f231c4979e969dc", "patch": "@@ -192,8 +192,8 @@ ipa_profile_generate_summary (void)\n \t\t  if (h)\n \t\t    {\n \t\t      gcov_type val, count, all;\n-\t\t      if (get_most_common_single_value (NULL, \"indirect call\",\n-\t\t\t\t\t\t\th, &val, &count, &all))\n+\t\t      if (get_nth_most_common_value (NULL, \"indirect call\", h,\n+\t\t\t\t\t\t     &val, &count, &all))\n \t\t\t{\n \t\t\t  struct cgraph_edge * e = node->get_edge (stmt);\n \t\t\t  if (e && !e->indirect_unknown_callee)"}, {"sha": "6c8127ab3def4f4a87722ad662b52825585b7b6a", "filename": "gcc/profile.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/982b149787057bb288caed389f231c4979e969dc/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/982b149787057bb288caed389f231c4979e969dc/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=982b149787057bb288caed389f231c4979e969dc", "patch": "@@ -743,6 +743,42 @@ compute_branch_probabilities (unsigned cfg_checksum, unsigned lineno_checksum)\n   free_aux_for_blocks ();\n }\n \n+/* Sort the histogram value and count for TOPN and INDIR_CALL type.  */\n+\n+static void\n+sort_hist_values (histogram_value hist)\n+{\n+  /* counters[2] equal to -1 means that all counters are invalidated.  */\n+  if (hist->hvalue.counters[2] == -1)\n+    return;\n+\n+  gcc_assert (hist->type == HIST_TYPE_TOPN_VALUES\n+\t      || hist->type == HIST_TYPE_INDIR_CALL);\n+\n+  gcc_assert (hist->n_counters == GCOV_TOPN_VALUES_COUNTERS);\n+\n+  /* Hist value is organized as:\n+     [total_executions, value1, counter1, ..., value4, counter4]\n+     Use decrease bubble sort to rearrange it.  The sort starts from <value1,\n+     counter1> and compares counter first.  If counter is same, compares the\n+     value, exchange it if small to keep stable.  */\n+  for (unsigned i = 0; i < GCOV_TOPN_VALUES - 1; i++)\n+    {\n+      bool swapped = false;\n+      for (unsigned j = 0; j < GCOV_TOPN_VALUES - 1 - i; j++)\n+\t{\n+\t  gcov_type *p = &hist->hvalue.counters[2 * j + 1];\n+\t  if (p[1] < p[3] || (p[1] == p[3] && p[0] < p[2]))\n+\t    {\n+\t      std::swap (p[0], p[2]);\n+\t      std::swap (p[1], p[3]);\n+\t      swapped = true;\n+\t    }\n+\t}\n+      if (!swapped)\n+\tbreak;\n+    }\n+}\n /* Load value histograms values whose description is stored in VALUES array\n    from .gcda file.  \n \n@@ -808,6 +844,10 @@ compute_value_histograms (histogram_values values, unsigned cfg_checksum,\n         else\n           hist->hvalue.counters[j] = 0;\n \n+      if (hist->type == HIST_TYPE_TOPN_VALUES\n+\t  || hist->type == HIST_TYPE_INDIR_CALL)\n+\tsort_hist_values (hist);\n+\n       /* Time profiler counter is not related to any statement,\n          so that we have to read the counter and set the value to\n          the corresponding call graph node.  */"}, {"sha": "759458868a89025ac74b903f110b89bb001f86cb", "filename": "gcc/value-prof.c", "status": "modified", "additions": 23, "deletions": 30, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/982b149787057bb288caed389f231c4979e969dc/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/982b149787057bb288caed389f231c4979e969dc/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=982b149787057bb288caed389f231c4979e969dc", "patch": "@@ -713,45 +713,38 @@ gimple_divmod_fixed_value (gassign *stmt, tree value, profile_probability prob,\n   return tmp2;\n }\n \n-/* Return most common value of TOPN_VALUE histogram.  If\n-   there's a unique value, return true and set VALUE and COUNT\n+/* Return the n-th value count of TOPN_VALUE histogram.  If\n+   there's a value, return true and set VALUE and COUNT\n    arguments.  */\n \n bool\n-get_most_common_single_value (gimple *stmt, const char *counter_type,\n-\t\t\t      histogram_value hist,\n-\t\t\t      gcov_type *value, gcov_type *count,\n-\t\t\t      gcov_type *all)\n+get_nth_most_common_value (gimple *stmt, const char *counter_type,\n+\t\t\t   histogram_value hist, gcov_type *value,\n+\t\t\t   gcov_type *count, gcov_type *all, unsigned n)\n {\n   if (hist->hvalue.counters[2] == -1)\n     return false;\n \n+  gcc_assert (n < GCOV_TOPN_VALUES);\n+\n   *count = 0;\n   *value = 0;\n \n   gcov_type read_all = hist->hvalue.counters[0];\n \n-  for (unsigned i = 0; i < GCOV_TOPN_VALUES; i++)\n-    {\n-      gcov_type v = hist->hvalue.counters[2 * i + 1];\n-      gcov_type c = hist->hvalue.counters[2 * i + 2];\n-\n-      /* Indirect calls can't be vereified.  */\n-      if (stmt && check_counter (stmt, counter_type, &c, &read_all,\n-\t\t\t\t gimple_bb (stmt)->count))\n-\treturn false;\n+  gcov_type v = hist->hvalue.counters[2 * n + 1];\n+  gcov_type c = hist->hvalue.counters[2 * n + 2];\n \n-      *all = read_all;\n+  /* Indirect calls can't be verified.  */\n+  if (stmt\n+      && check_counter (stmt, counter_type, &c, &read_all,\n+\t\t\tgimple_bb (stmt)->count))\n+    return false;\n \n-      if (c > *count)\n-\t{\n-\t  *value = v;\n-\t  *count = c;\n-\t}\n-      else if (c == *count && v > *value)\n-\t*value = v;\n-    }\n+  *all = read_all;\n \n+  *value = v;\n+  *count = c;\n   return true;\n }\n \n@@ -784,8 +777,8 @@ gimple_divmod_fixed_value_transform (gimple_stmt_iterator *si)\n   if (!histogram)\n     return false;\n \n-  if (!get_most_common_single_value (stmt, \"divmod\", histogram, &val, &count,\n-\t\t\t\t     &all))\n+  if (!get_nth_most_common_value (stmt, \"divmod\", histogram, &val, &count,\n+\t\t\t\t  &all))\n     return false;\n \n   value = histogram->hvalue.value;\n@@ -1439,8 +1432,8 @@ gimple_ic_transform (gimple_stmt_iterator *gsi)\n   if (!histogram)\n     return false;\n \n-  if (!get_most_common_single_value (NULL, \"indirect call\", histogram, &val,\n-\t\t\t\t     &count, &all))\n+  if (!get_nth_most_common_value (NULL, \"indirect call\", histogram, &val,\n+\t\t\t\t  &count, &all))\n     return false;\n \n   if (4 * count <= 3 * all)\n@@ -1658,8 +1651,8 @@ gimple_stringops_transform (gimple_stmt_iterator *gsi)\n   if (!histogram)\n     return false;\n \n-  if (!get_most_common_single_value (stmt, \"stringops\", histogram, &val,\n-\t\t\t\t     &count, &all))\n+  if (!get_nth_most_common_value (stmt, \"stringops\", histogram, &val, &count,\n+\t\t\t\t  &all))\n     return false;\n \n   gimple_remove_histogram_value (cfun, stmt, histogram);"}, {"sha": "1078722163b81999d836bbd51a60c7fbca12d72c", "filename": "gcc/value-prof.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/982b149787057bb288caed389f231c4979e969dc/gcc%2Fvalue-prof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/982b149787057bb288caed389f231c4979e969dc/gcc%2Fvalue-prof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.h?ref=982b149787057bb288caed389f231c4979e969dc", "patch": "@@ -89,11 +89,10 @@ void free_histograms (function *);\n void stringop_block_profile (gimple *, unsigned int *, HOST_WIDE_INT *);\n gcall *gimple_ic (gcall *, struct cgraph_node *, profile_probability);\n bool check_ic_target (gcall *, struct cgraph_node *);\n-bool get_most_common_single_value (gimple *stmt, const char *counter_type,\n-\t\t\t\t   histogram_value hist,\n-\t\t\t\t   gcov_type *value, gcov_type *count,\n-\t\t\t\t   gcov_type *all);\n-\n+bool get_nth_most_common_value (gimple *stmt, const char *counter_type,\n+\t\t\t\thistogram_value hist, gcov_type *value,\n+\t\t\t\tgcov_type *count, gcov_type *all,\n+\t\t\t\tunsigned n = 0);\n \n /* In tree-profile.c.  */\n extern void gimple_init_gcov_profiler (void);"}]}