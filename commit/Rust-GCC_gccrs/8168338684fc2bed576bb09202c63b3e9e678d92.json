{"sha": "8168338684fc2bed576bb09202c63b3e9e678d92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE2ODMzODY4NGZjMmJlZDU3NmJiMDkyMDJjNjNiM2U5ZTY3OGQ5Mg==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-07-19T21:11:38Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-07-20T07:14:28Z"}, "message": "[gcn] Work-around libgomp 'error: array subscript 0 is outside array bounds of \u2018__lds struct gomp_thread * __lds[0]\u2019 [-Werror=array-bounds]' some more [PR101484]\n\nWith yesterday's commit 9f2bc5077debef2b046b6c10d38591ac324ad8b5 \"[gcn]\nWork-around libgomp 'error: array subscript 0 is outside array bounds of\n\u2018__lds struct gomp_thread * __lds[0]\u2019 [-Werror=array-bounds]' [PR101484]\",\nI did defuse the \"unexpected\" '-Werror=array-bounds' diagnostics that we see\nas of commit a110855667782dac7b674d3e328b253b3b3c919b \"Correct handling of\nvariable offset minus constant in -Warray-bounds [PR100137]\".  However, these\n'#pragma GCC diagnostic [...]' directives cause some code generation changes\n(that seems unexpected, problematic!), which results in a lot (ten thousands)\nof 'GCN team arena exhausted' run-time diagnostics, also leading to a few\nFAILs:\n\n    PASS: libgomp.c/../libgomp.c-c++-common/for-11.c (test for excess errors)\n    [-PASS:-]{+FAIL:+} libgomp.c/../libgomp.c-c++-common/for-11.c execution test\n\n    PASS: libgomp.c/../libgomp.c-c++-common/for-12.c (test for excess errors)\n    [-PASS:-]{+FAIL:+} libgomp.c/../libgomp.c-c++-common/for-12.c execution test\n\n    PASS: libgomp.c/../libgomp.c-c++-common/for-3.c (test for excess errors)\n    [-PASS:-]{+FAIL:+} libgomp.c/../libgomp.c-c++-common/for-3.c execution test\n\n    PASS: libgomp.c/../libgomp.c-c++-common/for-5.c (test for excess errors)\n    [-PASS:-]{+FAIL:+} libgomp.c/../libgomp.c-c++-common/for-5.c execution test\n\n    PASS: libgomp.c/../libgomp.c-c++-common/for-6.c (test for excess errors)\n    [-PASS:-]{+FAIL:+} libgomp.c/../libgomp.c-c++-common/for-6.c execution test\n\n    PASS: libgomp.c/../libgomp.c-c++-common/for-9.c (test for excess errors)\n    [-PASS:-]{+FAIL:+} libgomp.c/../libgomp.c-c++-common/for-9.c execution test\n\nSame for 'libgomp.c++'.\n\nIt remains to be analyzed how '#pragma GCC diagnostic [...]' directives can\ncause code generation changes; for now I'm working around the \"unexpected\"\n'-Werror=array-bounds' diagnostics differently.\n\nOverall, still awaiting a different solution, of course.\n\n\tlibgomp/\n\tPR target/101484\n\t* configure.tgt [amdgcn*-*-*] (XCFLAGS): Add\n\t'-Wno-error=array-bounds'.\n\t* config/gcn/team.c: Remove '-Werror=array-bounds' work-around.\n\t* libgomp.h [__AMDGCN__]: Likewise.", "tree": {"sha": "bd4dd6e64fee2b8e38be8ced65cf0e425b0138d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd4dd6e64fee2b8e38be8ced65cf0e425b0138d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8168338684fc2bed576bb09202c63b3e9e678d92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8168338684fc2bed576bb09202c63b3e9e678d92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8168338684fc2bed576bb09202c63b3e9e678d92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8168338684fc2bed576bb09202c63b3e9e678d92/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d4da4aeef5b20f7f9693ddc27d26740d0dbe36c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d4da4aeef5b20f7f9693ddc27d26740d0dbe36c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d4da4aeef5b20f7f9693ddc27d26740d0dbe36c"}], "stats": {"total": 18, "additions": 3, "deletions": 15}, "files": [{"sha": "627210ea4071cf66bf75f9c3b47281831dd775bd", "filename": "libgomp/config/gcn/team.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8168338684fc2bed576bb09202c63b3e9e678d92/libgomp%2Fconfig%2Fgcn%2Fteam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8168338684fc2bed576bb09202c63b3e9e678d92/libgomp%2Fconfig%2Fgcn%2Fteam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Fgcn%2Fteam.c?ref=8168338684fc2bed576bb09202c63b3e9e678d92", "patch": "@@ -65,12 +65,9 @@ gomp_gcn_enter_kernel (void)\n       void * __lds *arena_start = (void * __lds *)TEAM_ARENA_START;\n       void * __lds *arena_free = (void * __lds *)TEAM_ARENA_FREE;\n       void * __lds *arena_end = (void * __lds *)TEAM_ARENA_END;\n-# pragma GCC diagnostic push\n-# pragma GCC diagnostic ignored \"-Warray-bounds\" /*TODO PR101484 */\n       *arena_start = team_arena;\n       *arena_free = team_arena;\n       *arena_end = team_arena + TEAM_ARENA_SIZE;\n-# pragma GCC diagnostic pop\n \n       /* Allocate and initialize the team-local-storage data.  */\n       struct gomp_thread *thrs = team_malloc_cleared (sizeof (*thrs)"}, {"sha": "d4f1e741b5ab8fd40567ff6b0a2e1c028dceb44a", "filename": "libgomp/configure.tgt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8168338684fc2bed576bb09202c63b3e9e678d92/libgomp%2Fconfigure.tgt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8168338684fc2bed576bb09202c63b3e9e678d92/libgomp%2Fconfigure.tgt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure.tgt?ref=8168338684fc2bed576bb09202c63b3e9e678d92", "patch": "@@ -173,6 +173,9 @@ case \"${target}\" in\n \n   amdgcn*-*-*)\n \tconfig_path=\"gcn accel\"\n+\n+\t#TODO PR101484\n+\tXCFLAGS=\"$XCFLAGS -Wno-error=array-bounds\"\n \t;;\n \n   *)"}, {"sha": "8d25dc8e2a8518421bacb091690e28ac0c8fc8a5", "filename": "libgomp/libgomp.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8168338684fc2bed576bb09202c63b3e9e678d92/libgomp%2Flibgomp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8168338684fc2bed576bb09202c63b3e9e678d92/libgomp%2Flibgomp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.h?ref=8168338684fc2bed576bb09202c63b3e9e678d92", "patch": "@@ -128,10 +128,7 @@ team_malloc (size_t size)\n        : \"=v\"(result) : \"v\"(TEAM_ARENA_FREE), \"v\"(size), \"e\"(1L) : \"memory\");\n \n   /* Handle OOM.  */\n-# pragma GCC diagnostic push\n-# pragma GCC diagnostic ignored \"-Warray-bounds\" /*TODO PR101484 */\n   if (result + size > *(void * __lds *)TEAM_ARENA_END)\n-# pragma GCC diagnostic pop\n     {\n       /* While this is experimental, let's make sure we know when OOM\n \t happens.  */\n@@ -162,11 +159,8 @@ team_free (void *ptr)\n      However, if we fell back to using heap then we should free it.\n      It would be better if this function could be a no-op, but at least\n      LDS loads are cheap.  */\n-# pragma GCC diagnostic push\n-# pragma GCC diagnostic ignored \"-Warray-bounds\" /*TODO PR101484 */\n   if (ptr < *(void * __lds *)TEAM_ARENA_START\n       || ptr >= *(void * __lds *)TEAM_ARENA_END)\n-# pragma GCC diagnostic pop\n     free (ptr);\n }\n #else\n@@ -795,19 +789,13 @@ static inline struct gomp_thread *gcn_thrs (void)\n {\n   /* The value is at the bottom of LDS.  */\n   struct gomp_thread * __lds *thrs = (struct gomp_thread * __lds *)4;\n-# pragma GCC diagnostic push\n-# pragma GCC diagnostic ignored \"-Warray-bounds\" /*TODO PR101484 */\n   return *thrs;\n-# pragma GCC diagnostic pop\n }\n static inline void set_gcn_thrs (struct gomp_thread *val)\n {\n   /* The value is at the bottom of LDS.  */\n   struct gomp_thread * __lds *thrs = (struct gomp_thread * __lds *)4;\n-# pragma GCC diagnostic push\n-# pragma GCC diagnostic ignored \"-Warray-bounds\" /*TODO PR101484 */\n   *thrs = val;\n-# pragma GCC diagnostic pop\n }\n static inline struct gomp_thread *gomp_thread (void)\n {"}]}