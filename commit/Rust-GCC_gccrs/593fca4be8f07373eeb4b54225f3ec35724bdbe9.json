{"sha": "593fca4be8f07373eeb4b54225f3ec35724bdbe9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkzZmNhNGJlOGYwNzM3M2VlYjRiNTQyMjVmM2VjMzU3MjRiZGJlOQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-02-27T12:23:14Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2011-02-27T12:23:14Z"}, "message": "re PR target/45261 (Doesn't indicate failure status when it doesn't support (attiny2313A))\n\n2011-02-23  Georg-Johann Lay  <avr@gjlay.de>\n\n\tPR target/45261\n\t* config/avr/avr.c (avr_option_override): Use error on bad options.\n\t(avr_help): New function.\n\t(TARGET_HELP): Define.\n\nFrom-SVN: r170536", "tree": {"sha": "2ed1955f9cd6da44574b9e4b934e64497fec9a3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ed1955f9cd6da44574b9e4b934e64497fec9a3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/593fca4be8f07373eeb4b54225f3ec35724bdbe9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/593fca4be8f07373eeb4b54225f3ec35724bdbe9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/593fca4be8f07373eeb4b54225f3ec35724bdbe9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/593fca4be8f07373eeb4b54225f3ec35724bdbe9/comments", "author": null, "committer": null, "parents": [{"sha": "113a53c14290fae0b8769675cc1dff8d0140c54f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113a53c14290fae0b8769675cc1dff8d0140c54f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/113a53c14290fae0b8769675cc1dff8d0140c54f"}], "stats": {"total": 53, "additions": 49, "deletions": 4}, "files": [{"sha": "1d6f9a5d90952325a2e98f8473a9dd6cfcfcc5c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593fca4be8f07373eeb4b54225f3ec35724bdbe9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593fca4be8f07373eeb4b54225f3ec35724bdbe9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=593fca4be8f07373eeb4b54225f3ec35724bdbe9", "patch": "@@ -1,3 +1,10 @@\n+2011-02-23  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/45261\n+\t* config/avr/avr.c (avr_option_override): Use error on bad options.\n+\t(avr_help): New function.\n+\t(TARGET_HELP): Define.\n+\n 2011-02-22  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/42240"}, {"sha": "465de46225acf2646ff9fb26669c1271fab5f838", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593fca4be8f07373eeb4b54225f3ec35724bdbe9/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593fca4be8f07373eeb4b54225f3ec35724bdbe9/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=593fca4be8f07373eeb4b54225f3ec35724bdbe9", "patch": "@@ -97,6 +97,7 @@ static rtx avr_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t     const_tree, bool);\n static void avr_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t      const_tree, bool);\n+static void avr_help (void);\n \n /* Allocate registers from r25 to r8 for parameters for function calls.  */\n #define FIRST_CUM_REG 26\n@@ -221,6 +222,9 @@ static const struct default_options avr_option_optimization_table[] =\n #undef TARGET_CANNOT_MODIFY_JUMPS_P\n #define TARGET_CANNOT_MODIFY_JUMPS_P avr_cannot_modify_jumps_p\n \n+#undef TARGET_HELP\n+#define TARGET_HELP avr_help\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n static void\n@@ -236,10 +240,8 @@ avr_option_override (void)\n \n   if (!t->name)\n     {\n-      fprintf (stderr, \"unknown MCU '%s' specified\\nKnown MCU names:\\n\",\n-\t       avr_mcu_name);\n-      for (t = avr_mcu_types; t->name; t++)\n-\tfprintf (stderr,\"   %s\\n\", t->name);\n+      error (\"unrecognized argument to -mmcu= option: %qs\", avr_mcu_name);\n+      inform (input_location,  \"See --target-help for supported MCUs\");\n     }\n \n   avr_current_device = t;\n@@ -252,6 +254,42 @@ avr_option_override (void)\n   init_machine_status = avr_init_machine_status;\n }\n \n+/* Implement TARGET_HELP */\n+/* Report extra information for --target-help */\n+\n+static void\n+avr_help (void)\n+{\n+  const struct mcu_type_s *t;\n+  const char * const indent = \"  \";\n+  int len;\n+\n+  /* Give a list of MCUs that are accepted by -mmcu=* .\n+     Note that MCUs supported by the compiler might differ from\n+     MCUs supported by binutils. */\n+\n+  len = strlen (indent);\n+  printf (\"Known MCU names:\\n%s\", indent);\n+\n+  /* Print a blank-separated list of all supported MCUs */\n+\n+  for (t = avr_mcu_types; t->name; t++)\n+    {\n+      printf (\"%s \", t->name);\n+      len += 1 + strlen (t->name);\n+\n+      /* Break long lines */\n+      \n+      if (len > 66 && (t+1)->name)\n+        {\n+          printf (\"\\n%s\", indent);\n+          len = strlen (indent);\n+        }\n+    }\n+\n+  printf (\"\\n\\n\");\n+}\n+\n /*  return register class from register number.  */\n \n static const enum reg_class reg_class_tab[]={"}]}