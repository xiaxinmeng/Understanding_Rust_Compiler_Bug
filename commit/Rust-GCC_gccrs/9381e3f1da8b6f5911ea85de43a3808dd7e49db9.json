{"sha": "9381e3f1da8b6f5911ea85de43a3808dd7e49db9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM4MWUzZjFkYThiNmY1OTExZWE4NWRlNDNhMzgwOGRkN2U0OWRiOQ==", "commit": {"author": {"name": "Wolfgang Gellerich", "email": "gellerich@de.ibm.com", "date": "2008-08-15T07:36:40Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2008-08-15T07:36:40Z"}, "message": "2008-08-15  Wolfgang Gellerich  <gellerich@de.ibm.com>\n\n\t* config/s390/2097.md New file.\n\t* config/s390/s390.md (\"z10prop\" attribute): Define none,\n        z10_super, z10_super_E1, z10_super_A1, z10_super_c,\n        z10_super_c_E1, z10_fwd, z10_fwd_A1, z10_fwd_A3, z10_fwd_E1,\n        z10_rec, z10_fr, z10_fr_A3, z10_fr_E1, z10_c, and z10_cobra as\n        possible values and apply them to insns as appropriate.\n        (\"type\" attribute): Removed itof and added ftrunctf,ftruncdf,\n        ftruncsd, ftruncdd, itoftf, itofdf, itofsf, itofdd, itoftd,\n        fdivdd, fdivtd, floaddd, floadsd, fmuldd, fmultd, fsimpdd,\n        fsimpsd, fsimptd, fstoredd, fstoresd, ftoidfp as possible\n        values.\n\t(\"bfp\" mode attribute): Removed.  Every occurence replaced\n\twith <mode>.\n\t* config/s390/s390.c (struct \"z10_cost\"): Updated entries.\n\t* config/s390/2084.md (insn_reservation \"x_itof\"): Updated\n          type attribute.\n\nFrom-SVN: r139124", "tree": {"sha": "c3d715e00b1ee0379cbc13b408228ae9a00f3c52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3d715e00b1ee0379cbc13b408228ae9a00f3c52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9381e3f1da8b6f5911ea85de43a3808dd7e49db9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9381e3f1da8b6f5911ea85de43a3808dd7e49db9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9381e3f1da8b6f5911ea85de43a3808dd7e49db9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9381e3f1da8b6f5911ea85de43a3808dd7e49db9/comments", "author": null, "committer": null, "parents": [{"sha": "501bbad73ffd655e9b22d58e2812275acd7858e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/501bbad73ffd655e9b22d58e2812275acd7858e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/501bbad73ffd655e9b22d58e2812275acd7858e3"}], "stats": {"total": 1717, "additions": 1444, "deletions": 273}, "files": [{"sha": "d25df32cd9eb1004bdd96fe8b0fce2e5f4908da0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9381e3f1da8b6f5911ea85de43a3808dd7e49db9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9381e3f1da8b6f5911ea85de43a3808dd7e49db9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9381e3f1da8b6f5911ea85de43a3808dd7e49db9", "patch": "@@ -1,3 +1,22 @@\n+2008-08-15  Wolfgang Gellerich  <gellerich@de.ibm.com>\n+\n+\t* config/s390/2097.md New file.\n+\t* config/s390/s390.md (\"z10prop\" attribute): Define none,\n+        z10_super, z10_super_E1, z10_super_A1, z10_super_c,\n+        z10_super_c_E1, z10_fwd, z10_fwd_A1, z10_fwd_A3, z10_fwd_E1,\n+        z10_rec, z10_fr, z10_fr_A3, z10_fr_E1, z10_c, and z10_cobra as\n+        possible values and apply them to insns as appropriate.\n+        (\"type\" attribute): Removed itof and added ftrunctf,ftruncdf,\n+        ftruncsd, ftruncdd, itoftf, itofdf, itofsf, itofdd, itoftd,\n+        fdivdd, fdivtd, floaddd, floadsd, fmuldd, fmultd, fsimpdd,\n+        fsimpsd, fsimptd, fstoredd, fstoresd, ftoidfp as possible\n+        values.\n+\t(\"bfp\" mode attribute): Removed.  Every occurence replaced\n+\twith <mode>.\n+\t* config/s390/s390.c (struct \"z10_cost\"): Updated entries.\n+\t* config/s390/2084.md (insn_reservation \"x_itof\"): Updated\n+          type attribute.\n+\n 2008-08-14  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n         PR c/28152"}, {"sha": "d3c92722bd9387802860bd18f64c0ee946c5524f", "filename": "gcc/config/s390/2084.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9381e3f1da8b6f5911ea85de43a3808dd7e49db9/gcc%2Fconfig%2Fs390%2F2084.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9381e3f1da8b6f5911ea85de43a3808dd7e49db9/gcc%2Fconfig%2Fs390%2F2084.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2F2084.md?ref=9381e3f1da8b6f5911ea85de43a3808dd7e49db9", "patch": "@@ -243,7 +243,7 @@\n \n (define_insn_reservation \"x_itof\" 7 \n   (and (eq_attr \"cpu\" \"z990,z9_109\")\n-       (eq_attr \"type\" \"itof\"))\n+       (eq_attr \"type\" \"itoftf,itofdf,itofsf\"))\n   \"x_e1_t*3,x-wr-fp\") \n \n (define_bypass 1 \"x_fsimpdf\" \"x_fstoredf\")"}, {"sha": "f27302e0a2ba1016a17ec38c5ed0cf4eb2a81abb", "filename": "gcc/config/s390/2097.md", "status": "added", "additions": 764, "deletions": 0, "changes": 764, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9381e3f1da8b6f5911ea85de43a3808dd7e49db9/gcc%2Fconfig%2Fs390%2F2097.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9381e3f1da8b6f5911ea85de43a3808dd7e49db9/gcc%2Fconfig%2Fs390%2F2097.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2F2097.md?ref=9381e3f1da8b6f5911ea85de43a3808dd7e49db9", "patch": "@@ -0,0 +1,764 @@\n+;; Scheduling description for z10 (cpu 2097).\n+;; Copyright (C) 2008 Free Software Foundation, Inc.\n+;; Contributed by Wolfgang Gellerich (gellerich@de.ibm.com).\n+\n+\n+; General naming conventions used in this file:\n+; - The two pipelines are called S and T, respectively.\n+; - A name ending \"_S\" or \"_T\" indicates that something happens in\n+;   (or belongs to) this pipeline.\n+; - A name ending \"_ANY\" indicates that something happens in (or belongs\n+;   to) either of the two pipelines.\n+; - A name ending \"_BOTH\" indicates that something happens in (or belongs\n+;   to) both pipelines.\n+\n+\n+;; Automaton and components.\n+\n+(define_automaton \"z10_cpu\")\n+\n+(define_cpu_unit \"z10_e1_S, z10_e1_T\"  \"z10_cpu\")\n+(define_reservation \"z10_e1_ANY\" \"(z10_e1_S | z10_e1_T)\")\n+(define_reservation \"z10_e1_BOTH\" \"(z10_e1_S + z10_e1_T)\")\n+\n+\n+; Both pipelines can execute a branch instruction, and branch\n+; instructions can be grouped with all other groupable instructions\n+; but not with a second branch instruction.\n+\n+(define_cpu_unit \"z10_branch_ANY\"  \"z10_cpu\")\n+\n+(define_insn_reservation \"z10_branch\" 4\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"branch\"))\n+  \"z10_branch_ANY + z10_e1_ANY, z10_Gate_ANY\")\n+\n+\n+; Z10 operand and result forwarding.\n+\n+; Instructions marked with the attributes as z10_fwd or z10_fr can\n+; forward a value they load from one of their operants into a register\n+; if the instruction in the second pipeline reads the same register.\n+; The second operation must be superscalar.  Instructions marked as\n+; z10_rec or z10_fr can receive a value they read from a register is\n+; this register gets updated by an instruction in the first pipeline.\n+; The first instruction must be superscalar.\n+\n+\n+; Forwarding from z10_fwd and z10_fr to z10_super.\n+\n+(define_bypass 0 \"z10_la_fwd, z10_la_fwd_A1, z10_larl_fwd, z10_larl_fwd_A3, \\\n+                  z10_load_fwd, z10_load_fwd_A3, \\\n+                  z10_other_fwd, z10_other_fwd_A1, z10_other_fwd_A3, \\\n+\t \t  z10_other_fr, z10_other_fr_A3, z10_other_fr_E1, \\\n+                  z10_other_fwd_E1, z10_lr_fr, z10_lr_fr_E1, \\\n+                  z10_int_fwd, z10_int_fwd_A1, z10_int_fwd_A3, \\\n+                  z10_int_fwd_E1, z10_int_fr, z10_int_fr_E1, \\\n+                  z10_int_fr_A3\"\n+                  \"z10_other_super, z10_other_super_c_E1, z10_other_super_E1, \\\n+                  z10_int_super, z10_int_super_E1, \\\n+                  z10_lr, z10_store_super\")\n+\n+\n+; Forwarding from z10_super to frz10_ and z10_rec.\n+\n+(define_bypass 0 \"z10_other_super, z10_other_super_E1, z10_other_super_c_E1, \\\n+                  z10_int_super, z10_int_super_E1, \\\n+                  z10_larl_super_E1, z10_larl_super, \\\n+                  z10_store_super\"\n+                  \"z10_int_fr, z10_int_fr_E1, z10_int_fr_A3, \\\n+                  z10_other_fr, z10_other_fr_A3, z10_lr_fr, z10_lr_fr_E1, \\\n+                  z10_other_fr_E1, z10_store_rec\")\n+\n+\n+; Forwarding from z10_fwd and z10_fr to z10_rec and z10_fr.\n+\n+(define_bypass 0 \"z10_la_fwd, z10_la_fwd_A1, z10_larl_fwd, z10_larl_fwd_A3, \\\n+                  z10_load_fwd, z10_load_fwd_A3, \\\n+                  z10_other_fwd, z10_other_fwd_A1, z10_other_fwd_A3, \\\n+                  z10_other_fr, z10_other_fr_A3, z10_other_fr_E1, \\\n+                  z10_other_fwd_E1, \\\n+                  z10_lr_fr, z10_lr_fr_E1, \\\n+                  z10_int_fwd, z10_int_fwd_A1, z10_int_fwd_A3, \\\n+                  z10_int_fwd_E1, z10_int_fr, z10_int_fr_E1, \\\n+                  z10_int_fr_A3\"\n+                  \"z10_int_fr, z10_int_fr_E1, z10_int_fr_A3, \\\n+                  z10_other_fr, z10_other_fr_A3, z10_lr_fr, z10_lr_fr_E1, \\\n+                  z10_other_fr_E1, z10_store_rec\")\n+\n+\n+;\n+; Simple insns\n+;\n+\n+; Here is the cycle diagram for FXU-executed instructions:\n+; ... A1 A2 A3 E1 P1 P2 P3 R0 ...\n+;        ^              ^  ^\n+;        |              |  updated GPR is available\n+;        |              write to GPR\n+;        instruction reads GPR during this cycle\n+\n+\n+; Variants of z10_int follow.\n+\n+(define_insn_reservation \"z10_int\" 6\n+  (and (and (eq_attr \"cpu\" \"z10\")\n+            (eq_attr \"type\" \"integer\"))\n+       (and (eq_attr \"atype\" \"reg\")\n+             (and (and (eq_attr \"z10prop\" \"!z10_super\")\n+                       (eq_attr \"z10prop\" \"!z10_super_c\"))\n+                  (and (and (and (and (eq_attr \"z10prop\" \"!z10_super_E1\")\n+                                      (eq_attr \"z10prop\" \"!z10_super_c_E1\"))\n+                                  (eq_attr \"z10prop\" \"!z10_fwd\"))\n+                             (and (eq_attr \"z10prop\" \"!z10_fwd_A1\")\n+                                  (eq_attr \"z10prop\" \"!z10_fwd_A3\")))\n+                        (and (and (eq_attr \"z10prop\" \"!z10_fwd_E1\")\n+                                  (eq_attr \"z10prop\" \"!z10_fr\"))\n+                             (and (eq_attr \"z10prop\" \"!z10_fr_E1\")\n+                                  (eq_attr \"z10prop\" \"!z10_fr_A3\")))))))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+\n+(define_insn_reservation \"z10_int_super\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"integer\")\n+            (and (eq_attr \"atype\" \"reg\")\n+                 (ior (eq_attr \"z10prop\" \"z10_super\")\n+                      (eq_attr \"z10prop\" \"z10_super_c\")))))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+\n+(define_insn_reservation \"z10_int_super_E1\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"integer\")\n+            (and (eq_attr \"atype\" \"reg\")\n+                 (ior (eq_attr \"z10prop\" \"z10_super_E1\")\n+                      (eq_attr \"z10prop\" \"z10_super_c_E1\")))))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+\n+(define_insn_reservation \"z10_int_fwd\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"integer\")\n+            (and (eq_attr \"atype\" \"reg\")\n+                 (eq_attr \"z10prop\" \"z10_fwd\"))))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+\n+(define_insn_reservation \"z10_int_fwd_A1\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"integer\")\n+            (and (eq_attr \"atype\" \"reg\")\n+                 (eq_attr \"z10prop\" \"z10_fwd_A1\"))))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+\n+(define_insn_reservation \"z10_int_fwd_A3\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"integer\")\n+            (and (eq_attr \"atype\" \"reg\")\n+                 (eq_attr \"z10prop\" \"z10_fwd_A3\"))))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+\n+(define_insn_reservation \"z10_int_fwd_E1\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"integer\")\n+            (and (eq_attr \"atype\" \"reg\")\n+                 (eq_attr \"z10prop\" \"z10_fwd_E1\"))))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+\n+(define_insn_reservation \"z10_int_fr\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"integer\")\n+            (and (eq_attr \"atype\" \"reg\")\n+                 (eq_attr \"z10prop\" \"z10_fr\"))))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+\n+(define_insn_reservation \"z10_int_fr_E1\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"integer\")\n+            (and (eq_attr \"atype\" \"reg\")\n+                 (eq_attr \"z10prop\" \"z10_fr_E1\"))))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+\n+(define_insn_reservation \"z10_int_fr_A3\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"integer\")\n+            (and (eq_attr \"atype\" \"reg\")\n+                 (eq_attr \"z10prop\" \"z10_fr_A3\"))))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+\n+; END of z10_int variants\n+\n+\n+(define_insn_reservation \"z10_agen\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"integer\")\n+            (eq_attr \"atype\" \"agen\")))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+\n+\n+(define_insn_reservation \"z10_lr\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"lr\")\n+            (and (eq_attr \"z10prop\" \"!z10_fr\")\n+                 (eq_attr \"z10prop\" \"!z10_fr_E1\"))))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+\n+(define_insn_reservation \"z10_lr_fr\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"lr\")\n+            (eq_attr \"z10prop\" \"z10_fr\")))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+;  \"z10_e1_ANY\")\n+\n+(define_insn_reservation \"z10_lr_fr_E1\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"lr\")\n+            (eq_attr \"z10prop\" \"z10_fr_E1\")))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+;  \"z10_e1_ANY\")\n+\n+\n+(define_insn_reservation \"z10_la\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"la\")\n+            (and (eq_attr \"z10prop\" \"!z10_fwd\")\n+                 (eq_attr \"z10prop\" \"!z10_fwd_A1\"))))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+\n+(define_insn_reservation \"z10_la_fwd\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"la\")\n+            (eq_attr \"z10prop\" \"z10_fwd\")))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+;  \"z10_e1_ANY\")\n+\n+(define_insn_reservation \"z10_la_fwd_A1\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"la\")\n+            (eq_attr \"z10prop\" \"z10_fwd_A1\")))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+;  \"z10_e1_ANY\")\n+\n+\n+; larl-type instructions\n+\n+(define_insn_reservation \"z10_larl\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"larl\")\n+                 (and (eq_attr \"z10prop\" \"!z10_super_A1\")\n+                      (and (eq_attr \"z10prop\" \"!z10_fwd\")\n+                           (and (eq_attr \"z10prop\" \"!z10_fwd_A3\")\n+                                (and (eq_attr \"z10prop\" \"!z10_super\")\n+                                     (eq_attr \"z10prop\" \"!z10_super_c\"))\n+                                (and (eq_attr \"z10prop\" \"!z10_super_E1\")\n+                                     (eq_attr \"z10prop\" \"!z10_super_c_E1\")))))))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+\n+(define_insn_reservation \"z10_larl_super\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"larl\")\n+            (and (eq_attr \"z10prop\" \"z10_super\")\n+                 (eq_attr \"z10prop\" \"z10_super_c\"))))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+\n+(define_insn_reservation \"z10_larl_fwd\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"larl\")\n+            (eq_attr \"z10prop\" \"z10_fwd\")))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+\n+(define_insn_reservation \"z10_larl_fwd_A3\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"larl\")\n+            (eq_attr \"z10prop\" \"z10_fwd_A3\")))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+\n+\n+(define_insn_reservation \"z10_larl_A1\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"larl\")\n+            (eq_attr \"z10prop\" \"z10_super_A1\")))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+;  \"z10_e1_ANY\")\n+\n+(define_insn_reservation \"z10_larl_super_E1\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"larl\")\n+            (ior (eq_attr \"z10prop\" \"z10_super_E1\")\n+                 (eq_attr \"z10prop\" \"z10_super_c_E1\"))))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+;  \"z10_e1_ANY\")\n+\n+\n+(define_insn_reservation \"z10_load\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"load\")\n+            (and (eq_attr \"z10prop\" \"!z10_fwd\")\n+                 (eq_attr \"z10prop\" \"!z10_fwd_A3\"))))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+\n+(define_insn_reservation \"z10_load_fwd\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"load\")\n+            (eq_attr \"z10prop\" \"z10_fwd\")))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+;  \"z10_e1_ANY\")\n+\n+(define_insn_reservation \"z10_load_fwd_A3\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"load\")\n+            (eq_attr \"z10prop\" \"z10_fwd_A3\")))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+;  \"z10_e1_ANY\")\n+\n+(define_insn_reservation \"z10_store\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"store\")\n+            (and (eq_attr \"z10prop\" \"!z10_rec\")\n+                 (and (eq_attr \"z10prop\" \"!z10_super\")\n+                      (eq_attr \"z10prop\" \"!z10_super_c\")))))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+\n+(define_insn_reservation \"z10_store_super\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"store\")\n+            (ior (eq_attr \"z10prop\" \"z10_super\")\n+                 (eq_attr \"z10prop\" \"z10_super_c\"))))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+\n+(define_insn_reservation \"z10_store_rec\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"store\")\n+            (eq_attr \"z10prop\" \"z10_rec\")))\n+  \"z10_e1_ANY, z10_Gate_ANY\")\n+\n+; The default_latency is chosen to drain off the pipeline.\n+(define_insn_reservation \"z10_call\" 14\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"jsr\"))\n+  \"z10_e1_BOTH*4, z10_Gate_BOTH\")\n+\n+; The default latency is for worst case.  CS and CSG take one\n+; cycle only (i.e. latency would be 6).\n+(define_insn_reservation \"z10_sem\" 9\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"sem\"))\n+  \"z10_e1_BOTH*5, z10_Gate_ANY\")\n+\n+(define_insn_reservation \"z10_cs\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"cs\"))\n+  \"z10_e1_BOTH, z10_Gate_BOTH\")\n+\n+(define_insn_reservation \"z10_vs\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"vs\"))\n+  \"z10_e1_BOTH*4, z10_Gate_BOTH\")\n+\n+; Load and store multiple. Actual number of cycles\n+; in unknown at compile.time.\n+(define_insn_reservation \"z10_stm\" 10\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (ior (eq_attr \"type\" \"stm\")\n+            (eq_attr \"type\" \"lm\")))\n+  \"z10_e1_BOTH*4, z10_Gate_BOTH\")\n+\n+\n+; Subsets of z10_other follow.\n+\n+(define_insn_reservation \"z10_other\" 6\n+  (and (and (eq_attr \"cpu\" \"z10\")\n+            (eq_attr \"type\" \"other\"))\n+       (and (and (eq_attr \"z10prop\" \"!z10_fwd\")\n+                 (eq_attr \"z10prop\" \"!z10_fwd_A1\"))\n+            (and (and  (and (eq_attr \"z10prop\" \"!z10_fr_A3\")\n+                            (eq_attr \"z10prop\" \"!z10_fwd_A3\"))\n+                       (and (eq_attr \"z10prop\" \"!z10_fr\")\n+                            (eq_attr \"z10prop\" \"!z10_fr_E1\")))\n+                 (and  (and (and (eq_attr \"z10prop\" \"!z10_super\")\n+                                  (eq_attr \"z10prop\" \"!z10_super_c\"))\n+                            (eq_attr \"z10prop\" \"!z10_super_c_E1\"))\n+                       (and (eq_attr \"z10prop\" \"!z10_super_E1\")\n+                            (eq_attr \"z10prop\" \"!z10_fwd_E1\"))))))\n+  \"z10_e1_BOTH, z10_Gate_BOTH\")\n+\n+(define_insn_reservation \"z10_other_fr_E1\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"other\")\n+            (eq_attr \"z10prop\" \"z10_fr_E1\")))\n+  \"z10_e1_BOTH, z10_Gate_BOTH\")\n+\n+(define_insn_reservation \"z10_other_super_c_E1\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"other\")\n+            (eq_attr \"z10prop\" \"z10_super_c_E1\")))\n+  \"z10_e1_BOTH, z10_Gate_BOTH\")\n+\n+(define_insn_reservation \"z10_other_super_E1\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"other\")\n+            (eq_attr \"z10prop\" \"z10_super_E1\")))\n+  \"z10_e1_BOTH, z10_Gate_BOTH\")\n+\n+(define_insn_reservation \"z10_other_fwd_E1\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"other\")\n+            (eq_attr \"z10prop\" \"z10_fwd_E1\")))\n+  \"z10_e1_BOTH, z10_Gate_BOTH\")\n+\n+(define_insn_reservation \"z10_other_fwd\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"other\")\n+            (eq_attr \"z10prop\" \"z10_fwd\")))\n+  \"z10_e1_BOTH, z10_Gate_BOTH\")\n+\n+(define_insn_reservation \"z10_other_fwd_A3\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"other\")\n+            (eq_attr \"z10prop\" \"z10_fwd_A3\")))\n+  \"z10_e1_BOTH, z10_Gate_BOTH\")\n+\n+(define_insn_reservation \"z10_other_fwd_A1\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"other\")\n+            (eq_attr \"z10prop\" \"z10_fwd_A1\")))\n+  \"z10_e1_BOTH, z10_Gate_BOTH\")\n+\n+(define_insn_reservation \"z10_other_fr\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"other\")\n+            (eq_attr \"z10prop\" \"z10_fr\")))\n+  \"z10_e1_BOTH, z10_Gate_BOTH\")\n+\n+(define_insn_reservation \"z10_other_fr_A3\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"other\")\n+            (eq_attr \"z10prop\" \"z10_fr_A3\")))\n+  \"z10_e1_BOTH, z10_Gate_BOTH\")\n+\n+(define_insn_reservation \"z10_other_super\" 6\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (and (eq_attr \"type\" \"other\")\n+            (ior (eq_attr \"z10prop\" \"z10_super\")\n+                 (eq_attr \"z10prop\" \"z10_super_c\"))))\n+  \"z10_e1_BOTH, z10_Gate_BOTH\")\n+\n+; END of z10_other subsets.\n+\n+\n+;\n+; Floating point insns\n+;\n+\n+; Z10 executes the following integer operations in the BFU pipeline.\n+\n+(define_insn_reservation \"z10_mul_sidi\" 12\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"imulsi,imuldi,imulhi\"))\n+  \"z10_e1_BOTH, z10_Gate_FP\")\n+\n+; Some variants take fewer cycles, but that is not relevant here.\n+(define_insn_reservation \"z10_div\" 162\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"idiv\"))\n+  \"z10_e1_BOTH*4, z10_Gate_FP\")\n+\n+\n+; BFP multiplication and general instructions\n+\n+(define_insn_reservation \"z10_fsimpdf\" 12\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"fsimpdf,fmuldf\"))\n+  \"z10_e1_BOTH, z10_Gate_FP\")\n+; Wg \"z10_e1_T, z10_Gate_FP\")\n+\n+(define_insn_reservation \"z10_fsimpsf\" 12\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"fsimpsf,fmulsf\"))\n+  \"z10_e1_BOTH, z10_Gate_FP\")\n+; Wg \"z10_e1_T, z10_Gate_FP\")\n+\n+(define_insn_reservation \"z10_fmultf\" 52\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"fmultf\"))\n+  \"z10_e1_BOTH*4, z10_Gate_FP\")\n+; Wg  \"z10_e1_T*4, z10_Gate_FP\")\n+\n+(define_insn_reservation \"z10_fsimptf\" 14\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"fsimptf\"))\n+  \"z10_e1_BOTH*2, z10_Gate_FP\")\n+; Wg  \"z10_e1_T*2, z10_Gate_FP\")\n+\n+\n+; BFP division\n+\n+(define_insn_reservation \"z10_fdivtf\" 113\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"fdivtf\"))\n+  \"z10_e1_T*4, z10_Gate_FP\")\n+\n+(define_insn_reservation \"z10_fdivdf\" 41\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"fdivdf\"))\n+  \"z10_e1_T*4, z10_Gate_FP\")\n+\n+(define_insn_reservation \"z10_fdivsf\" 34\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"fdivsf\"))\n+  \"z10_e1_T*4, z10_Gate_FP\")\n+\n+\n+; BFP sqrt\n+\n+(define_insn_reservation \"z10_fsqrtsf\" 41\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"fsqrtsf\"))\n+  \"z10_e1_T*4, z10_Gate_FP\")\n+\n+(define_insn_reservation \"z10_fsqrtdf\" 54\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"fsqrtdf\"))\n+  \"z10_e1_T*4, z10_Gate_FP\")\n+\n+(define_insn_reservation \"z10_fsqrtf\" 122\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"fsqrttf\"))\n+  \"z10_e1_T*4, z10_Gate_FP\")\n+\n+\n+; BFP load and store\n+\n+(define_insn_reservation \"z10_floadtf\" 12\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"floadtf\"))\n+  \"z10_e1_T, z10_Gate_FP\")\n+\n+(define_insn_reservation \"z10_floaddf\" 12\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"floaddf\"))\n+  \"z10_e1_T, z10_Gate_FP\")\n+\n+(define_insn_reservation \"z10_floadsf\" 12\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"floadsf\"))\n+  \"z10_e1_T, z10_Gate_FP\")\n+\n+(define_insn_reservation \"z10_fstoredf\" 12\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"fstoredf,fstoredd\"))\n+  \"z10_e1_T, z10_Gate_FP\")\n+\n+(define_insn_reservation \"z10_fstoresf\" 12\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"fstoresf,fstoresd\"))\n+  \"z10_e1_T, z10_Gate_FP\")\n+\n+\n+; BFP truncate\n+(define_insn_reservation \"z10_ftrunctf\" 12\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"ftrunctf\"))\n+  \"z10_e1_T, z10_Gate_FP\")\n+\n+(define_insn_reservation \"z10_ftruncdf\" 16\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"ftruncdf\"))\n+  \"z10_e1_T, z10_Gate_FP\")\n+\n+\n+; Conversion between BFP and int.\n+(define_insn_reservation \"z10_ftoi\" 13\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"ftoi\"))\n+  \"z10_e1_T, z10_Gate_FP\")\n+\n+(define_insn_reservation \"z10_itoftf\" 14\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"itoftf\"))\n+  \"z10_e1_T*2, z10_Gate_FP\")\n+\n+(define_insn_reservation \"z10_itofsfdf\" 12\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"itofdf,itofsf\"))\n+  \"z10_e1_T, z10_Gate_FP\")\n+\n+\n+\n+; BFP-related bypasses.  There is no bypass for extended mode.\n+(define_bypass 1 \"z10_fsimpdf\" \"z10_fstoredf\")\n+(define_bypass 1 \"z10_fsimpsf\" \"z10_fstoresf\")\n+(define_bypass 1 \"z10_floaddf\" \"z10_fsimpdf, z10_fstoredf, z10_floaddf\")\n+(define_bypass 1 \"z10_floadsf\" \"z10_fsimpsf, z10_fstoresf, z10_floadsf\")\n+\n+\n+;\n+; insn_reservations for DFP instructions.\n+;\n+\n+; Exact number of cycles is not known at compile-time.\n+(define_insn_reservation \"z10_fdivddtd\" 40\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"fdivdd,fdivtd\"))\n+  \"z10_e1_BOTH,z10_Gate_DFU\")\n+\n+(define_insn_reservation \"z10_ftruncsd\" 38\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"ftruncsd\"))\n+  \"z10_e1_BOTH*4,z10_Gate_DFU\")\n+\n+(define_insn_reservation \"z10_ftruncdd\" 340\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"ftruncsd\"))\n+  \"z10_e1_BOTH*4,z10_Gate_DFU\")\n+\n+(define_insn_reservation \"z10_floaddd\" 12\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"floaddd\"))\n+  \"z10_e1_BOTH,z10_Gate_DFU\")\n+\n+(define_insn_reservation \"z10_floadsd\" 12\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"floadsd\"))\n+  \"z10_e1_BOTH,z10_Gate_DFU\")\n+\n+; Exact number of cycles is not known at compile-time.\n+(define_insn_reservation \"z10_fmulddtd\" 35\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"fmuldd,fmultd\"))\n+  \"z10_e1_BOTH,z10_Gate_DFU\")\n+\n+(define_insn_reservation \"z10_fsimpdd\" 17\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"fsimpdd\"))\n+  \"z10_e1_BOTH,z10_Gate_DFU\")\n+\n+(define_insn_reservation \"z10_fsimpsd\" 17\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"fsimpsd\"))\n+  \"z10_e1_BOTH,z10_Gate_DFU\")\n+\n+(define_insn_reservation \"z10_fsimptd\" 18\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"fsimptd\"))\n+  \"z10_e1_BOTH,z10_Gate_DFU\")\n+\n+(define_insn_reservation \"z10_itofdd\" 36\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"itofdd\"))\n+  \"z10_e1_BOTH*3,z10_Gate_DFU\")\n+\n+(define_insn_reservation \"z10_itoftd\" 49\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"itoftd\"))\n+  \"z10_e1_BOTH*3,z10_Gate_DFU\")\n+\n+; Exact number of cycles is not known at compile-time.\n+(define_insn_reservation \"z10_ftoidfp\" 30\n+  (and (eq_attr \"cpu\" \"z10\")\n+       (eq_attr \"type\" \"ftoidfp\"))\n+  \"z10_e1_BOTH*3,z10_Gate_DFU\")\n+\n+\n+;\n+; Address-related bypasses\n+;\n+\n+; Here is the cycle diagram for Address-related bypasses:\n+; ... G1 G2 G3 A0 A1 A2 A3 E1 P1 P2 P3 R0 ...\n+;         ^  ^    ^     ^  ^\n+;         |  |    |     |  E1-type bypasses provide the new addr AFTER this cycle\n+;         |  |    |     A3-type bypasses provide the new addr AFTER this cycle\n+;         |  |    A1-type bypasses provide the new addr AFTER this cycle\n+;         |  AGI resolution, actual USE of address is DURING this cycle\n+;         AGI detection\n+\n+(define_bypass 3 \"z10_larl_A1, z10_la_fwd_A1, z10_other_fwd_A1, \\\n+                  z10_int_fwd_A1\"\n+                 \"z10_agen, z10_la, z10_branch, z10_call, z10_load, \\\n+                  z10_store, \\\n+                  z10_cs, z10_stm, z10_other\"\n+\t         \"s390_agen_dep_p\")\n+\n+\n+(define_bypass 5 \"z10_larl_fwd_A3, z10_load_fwd_A3, z10_other_fwd_A3, \\\n+                  z10_other_fr_A3, z10_int_fwd_A3, z10_int_fr_A3\"\n+                 \"z10_agen, z10_la, z10_branch, z10_call, z10_load, \\\n+                  z10_store, \\\n+                  z10_cs, z10_stm, z10_other\"\n+\t         \"s390_agen_dep_p\")\n+\n+(define_bypass 6 \"z10_other_fr_E1, z10_other_super_c_E1, z10_other_super_E1, \\\n+                  z10_other_fwd_E1, \\\n+                  z10_lr_fr_E1, z10_larl_super_E1, \\\n+                  z10_int_super_E1, z10_int_fwd_E1, z10_int_fr_E1\"\n+                 \"z10_agen, z10_la, z10_branch, z10_call, z10_load, \\\n+                  z10_store, \\\n+                  z10_cs, z10_stm, z10_other\"\n+ \t         \"s390_agen_dep_p\")\n+\n+\n+\n+;\n+; Try to avoid transitions between DFU-, BFU- and FXU-executed instructions as there is a\n+; dispatch delay required.\n+;\n+\n+\n+; Declaration for some pseudo-pipeline stages that reflect the\n+; dispatch gap when issueing an INT/FXU/BFU-executed instruction after\n+; an instruction executed by a different unit has been executed.  The\n+; approach is that we pretend a pipelined execution of BFU operations\n+; with as many stages as the gap is long and request that none of\n+; these stages is busy when issueing a FXU- or DFU-executed\n+; instruction.  Similar for FXU- and DFU-executed instructions.\n+\n+; Declaration for FPU stages.\n+(define_cpu_unit \"z10_f0, z10_f1, z10_f2, z10_f3, z10_f4, z10_f5, z10_f6, \\\n+                  z10_f7, z10_f8, z10_f9, z10_f10, z10_f11, z10_f12\" \"z10_cpu\")\n+(define_reservation \"z10_FP_PP\" \"z10_f0, z10_f1, z10_f2, z10_f3, z10_f4, \\\n+                  z10_f5, z10_f6, z10_f7, z10_f8, z10_f9, z10_f10, z10_f11, \\\n+                  z10_f12\")\n+\n+; Declaration for FXU stages.\n+(define_cpu_unit \"z10_S1, z10_S2, z10_S3, z10_S4, z10_S5, z10_S6\"  \"z10_cpu\")\n+(define_cpu_unit \"z10_T1, z10_T2, z10_T3, z10_T4, z10_T5, z10_T6\"  \"z10_cpu\")\n+(define_reservation \"z10_INT_PP\" \"z10_S1 | z10_T1, z10_S2 | z10_T2, z10_S3 \\\n+                                  | z10_T3, z10_S4 | z10_T4, z10_S5 | \\\n+                                  z10_T5, z10_S6 | z10_T6\")\n+\n+; Declaration for DFU stages.\n+(define_cpu_unit \"z10_d0, z10_d1, z10_d2, z10_d3, z10_d4, z10_d5, z10_d6\"\n+                 \"z10_cpu\")\n+(define_reservation \"z10_DFU_PP\" \"z10_d0, z10_d1, z10_d2, z10_d3, z10_d4, \\\n+                                 z10_d5, z10_d6\")\n+\n+\n+; Pseudo-units representing whether the respective unit is available\n+; in the sense that using it does not cause a dispatch delay.\n+\n+(define_cpu_unit \"z10_S_avail, z10_T_avail, z10_FP_avail, z10_DFU_avail\"\n+                 \"z10_cpu\")\n+\n+(absence_set \"z10_FP_avail\"\n+             \"z10_S1, z10_S2, z10_S3, z10_S4, z10_S5, z10_S6, z10_T1, z10_T2, z10_T3, z10_T4, \\\n+              z10_T5, z10_T6, \\\n+              z10_d0, z10_d1, z10_d2, z10_d3, z10_d4, z10_d5, z10_d6\")\n+\n+(absence_set \"z10_S_avail,z10_T_avail\"\n+             \"z10_f0, z10_f1, z10_f2, z10_f3, z10_f4, z10_f5, z10_f6, z10_f7, \\\n+              z10_f8, z10_f9, z10_f10, z10_f11, z10_f12, \\\n+              z10_d0, z10_d1, z10_d2, z10_d3, z10_d4, z10_d5, z10_d6\")\n+\n+(absence_set \"z10_DFU_avail\"\n+             \"z10_S1, z10_S2, z10_S3, z10_S4, z10_S5, z10_S6, z10_T1, z10_T2, z10_T3, z10_T4, \\\n+              z10_T5, z10_T6, \\\n+              z10_f0, z10_f1, z10_f2, z10_f3, z10_f4, z10_f5, z10_f6, z10_f7, \\\n+              z10_f8, z10_f9, z10_f10, z10_f11, z10_f12\")\n+\n+\n+; Pseudo-units to be used in insn_reservations.\n+\n+(define_reservation \"z10_Gate_ANY\" \"((z10_S_avail | z10_T_avail), z10_INT_PP)\")\n+(define_reservation \"z10_Gate_BOTH\" \"((z10_S_avail + z10_T_avail), z10_INT_PP)\")\n+\n+(define_reservation \"z10_Gate_FP\" \"z10_FP_avail, z10_FP_PP\")\n+\n+(define_reservation \"z10_Gate_DFU\" \"z10_DFU_avail, z10_DFU_PP\")"}, {"sha": "957707b860724e764d3efd8256288b06e7779728", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9381e3f1da8b6f5911ea85de43a3808dd7e49db9/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9381e3f1da8b6f5911ea85de43a3808dd7e49db9/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=9381e3f1da8b6f5911ea85de43a3808dd7e49db9", "patch": "@@ -192,33 +192,33 @@ struct processor_costs z9_109_cost =\n static const\n struct processor_costs z10_cost =\n {\n-  COSTS_N_INSNS (4),     /* M     */\n-  COSTS_N_INSNS (2),     /* MGHI  */\n-  COSTS_N_INSNS (2),     /* MH    */\n-  COSTS_N_INSNS (2),     /* MHI   */\n-  COSTS_N_INSNS (4),     /* ML    */\n-  COSTS_N_INSNS (4),     /* MR    */\n-  COSTS_N_INSNS (5),     /* MS    */\n-  COSTS_N_INSNS (6),     /* MSG   */\n-  COSTS_N_INSNS (4),     /* MSGF  */\n-  COSTS_N_INSNS (4),     /* MSGFR */\n-  COSTS_N_INSNS (4),     /* MSGR  */\n-  COSTS_N_INSNS (4),     /* MSR   */\n-  COSTS_N_INSNS (1),     /* multiplication in DFmode */\n-  COSTS_N_INSNS (28),    /* MXBR */\n-  COSTS_N_INSNS (130),   /* SQXBR */\n-  COSTS_N_INSNS (66),    /* SQDBR */\n+  COSTS_N_INSNS (10),    /* M     */\n+  COSTS_N_INSNS (10),    /* MGHI  */\n+  COSTS_N_INSNS (10),    /* MH    */\n+  COSTS_N_INSNS (10),    /* MHI   */\n+  COSTS_N_INSNS (10),    /* ML    */\n+  COSTS_N_INSNS (10),    /* MR    */\n+  COSTS_N_INSNS (10),    /* MS    */\n+  COSTS_N_INSNS (10),    /* MSG   */\n+  COSTS_N_INSNS (10),    /* MSGF  */\n+  COSTS_N_INSNS (10),    /* MSGFR */\n+  COSTS_N_INSNS (10),    /* MSGR  */\n+  COSTS_N_INSNS (10),    /* MSR   */\n+  COSTS_N_INSNS (10),    /* multiplication in DFmode */\n+  COSTS_N_INSNS (50),    /* MXBR */\n+  COSTS_N_INSNS (120),   /* SQXBR */\n+  COSTS_N_INSNS (52),    /* SQDBR */\n   COSTS_N_INSNS (38),    /* SQEBR */\n-  COSTS_N_INSNS (1),     /* MADBR */\n-  COSTS_N_INSNS (1),     /* MAEBR */\n-  COSTS_N_INSNS (60),    /* DXBR */\n-  COSTS_N_INSNS (40),    /* DDBR */\n-  COSTS_N_INSNS (26),    /* DEBR */\n-  COSTS_N_INSNS (30),    /* DLGR */\n-  COSTS_N_INSNS (23),    /* DLR */\n-  COSTS_N_INSNS (23),    /* DR */\n-  COSTS_N_INSNS (24),    /* DSGFR */\n-  COSTS_N_INSNS (24),    /* DSGR */\n+  COSTS_N_INSNS (10),    /* MADBR */\n+  COSTS_N_INSNS (10),    /* MAEBR */\n+  COSTS_N_INSNS (111),   /* DXBR */\n+  COSTS_N_INSNS (39),    /* DDBR */\n+  COSTS_N_INSNS (32),    /* DEBR */\n+  COSTS_N_INSNS (160),   /* DLGR */\n+  COSTS_N_INSNS (71),    /* DLR */\n+  COSTS_N_INSNS (71),    /* DR */\n+  COSTS_N_INSNS (71),    /* DSGFR */\n+  COSTS_N_INSNS (71),    /* DSGR */\n };\n \n extern int reload_completed;\n@@ -5266,6 +5266,7 @@ s390_agen_dep_p (rtx dep_insn, rtx insn)\n   return 0;\n }\n \n+\n /* A C statement (sans semicolon) to update the integer scheduling priority\n    INSN_PRIORITY (INSN).  Increase the priority to execute the INSN earlier,\n    reduce the priority to execute INSN later.  Do not define this macro if"}, {"sha": "21cde2bc2781611cffb3ebd03233cc461a9ca7b1", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 633, "deletions": 246, "changes": 879, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9381e3f1da8b6f5911ea85de43a3808dd7e49db9/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9381e3f1da8b6f5911ea85de43a3808dd7e49db9/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=9381e3f1da8b6f5911ea85de43a3808dd7e49db9", "patch": "@@ -202,8 +202,12 @@\n \t\t     branch,jsr,fsimptf,fsimpdf,fsimpsf,\n \t\t     floadtf,floaddf,floadsf,fstoredf,fstoresf,\n \t\t     fmultf,fmuldf,fmulsf,fdivtf,fdivdf,fdivsf,\n-\t\t     ftoi,itof,fsqrttf,fsqrtdf,fsqrtsf,\n-                     ftrunctf,ftruncdf,other\"\n+\t\t     ftoi,fsqrttf,fsqrtdf,fsqrtsf,\n+                     ftrunctf,ftruncdf, ftruncsd, ftruncdd,\n+                     itoftf, itofdf, itofsf, itofdd, itoftd,\n+                     fdivdd, fdivtd, floaddd, floadsd, fmuldd, fmultd,\n+                     fsimpdd, fsimpsd, fsimptd, fstoredd, fstoresd,\n+                     ftoidfp, other\"\n   (cond [(eq_attr \"op_type\" \"NN\")  (const_string \"other\")\n          (eq_attr \"op_type\" \"SS\")  (const_string \"cs\")]\n     (const_string \"integer\")))\n@@ -217,6 +221,31 @@\n \t\t(const_string \"reg\")\n \t\t(const_string \"agen\")))\n \n+;; Properties concerning Z10 execution grouping and value forwarding.\n+;; z10_super: instruction is superscalar.\n+;; z10_super_c: instruction is superscalar and meets the condition of z10_c.\n+;; z10_fwd: The instruction reads the value of an operand and stores it into a\n+;;   target register.  It can forward this value to a second instruction that reads\n+;;   the same register if that second instruction is issued in the same group.\n+;; z10_rec: The instruction is in the T pipeline and reads a register. If the\n+;;   instruction in the S pipe writes to the register, then the T instruction\n+;;   can immediately read the new value.\n+;; z10_fr: union of Z10_fwd and z10_rec.\n+;; z10_c: second operand of instruction is a register and read with complemented bits.\n+;; z10_cobra: its a compare and branch instruction\n+;;\n+;; An additional suffix A1, A3, or E1 indicates the respective AGI bypass.\n+\n+\n+(define_attr \"z10prop\" \"none,\n+                        z10_super, z10_super_E1, z10_super_A1, z10_super_c, z10_super_c_E1,\n+                        z10_fwd, z10_fwd_A1, z10_fwd_A3, z10_fwd_E1,\n+                        z10_rec,\n+                        z10_fr, z10_fr_A3, z10_fr_E1,\n+                        z10_c, z10_cobra\"\n+             (const_string \"none\"))\n+\n+\n ;; Length in bytes.\n \n (define_attr \"length\" \"\"\n@@ -272,6 +301,9 @@\n ;; Pipeline description for z990, z9-109 and z9-ec.\n (include \"2084.md\")\n \n+;; Pipeline description for z10\n+(include \"2097.md\")\n+\n ;; Predicates\n (include \"predicates.md\")\n \n@@ -388,12 +420,6 @@\n ;; modes and to an empty string for bfp modes.\n (define_mode_attr _d [(TF \"\") (DF \"\") (SF \"\") (TD \"d\") (DD \"d\") (SD \"d\")])\n \n-;; Although it is imprecise for z9-ec we handle all dfp instructions like\n-;; bfp regarding the pipeline description.\n-(define_mode_attr bfp [(TF \"tf\") (DF \"df\") (SF \"sf\")\n-                       (TD \"tf\") (DD \"df\") (SD \"sf\")])\n-\n-\n ;; In GPR and P templates, a constraint like \"<d0>\" will expand to \"d\" in DImode\n ;; and \"0\" in SImode. This allows to combine instructions of which the 31bit\n ;; version only operates on one register.\n@@ -403,13 +429,13 @@\n ;; version only operates on one register. The DImode version needs an additional\n ;; register for the assembler output.\n (define_mode_attr 1 [(DI \"%1,\") (SI \"\")])\n-  \n-;; In SHIFT templates, a string like \"s<lr>dl\" will expand to \"sldl\" in \n+\n+;; In SHIFT templates, a string like \"s<lr>dl\" will expand to \"sldl\" in\n ;; 'ashift' and \"srdl\" in 'lshiftrt'.\n (define_code_attr lr [(ashift \"l\") (lshiftrt \"r\")])\n \n ;; In SHIFT templates, this attribute holds the correct standard name for the\n-;; pattern itself and the corresponding function calls. \n+;; pattern itself and the corresponding function calls.\n (define_code_attr shift [(ashift \"ashl\") (lshiftrt \"lshr\")])\n \n ;; This attribute handles differences in the instruction 'type' and will result\n@@ -499,7 +525,8 @@\n   \"@\n    tm\\t%S0,%b1\n    tmy\\t%S0,%b1\"\n-  [(set_attr \"op_type\" \"SI,SIY\")])\n+  [(set_attr \"op_type\" \"SI,SIY\")\n+   (set_attr \"z10prop\" \"z10_super,z10_super\")])\n \n (define_insn \"*tmdi_reg\"\n   [(set (reg CC_REGNUM)\n@@ -515,7 +542,8 @@\n    tmhl\\t%0,%i1\n    tmlh\\t%0,%i1\n    tmll\\t%0,%i1\"\n-  [(set_attr \"op_type\" \"RI\")])\n+  [(set_attr \"op_type\" \"RI\")\n+   (set_attr \"z10prop\" \"z10_super,z10_super,z10_super,z10_super\")])\n \n (define_insn \"*tmsi_reg\"\n   [(set (reg CC_REGNUM)\n@@ -558,7 +586,8 @@\n   \"ltgfr\\t%2,%0\n    ltgf\\t%2,%0\"\n   [(set_attr \"op_type\"      \"RRE,RXY\")\n-   (set_attr \"cpu_facility\" \"*,z10\")])\n+   (set_attr \"cpu_facility\" \"*,z10\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\") ])\n \n ; ltr, lt, ltgr, ltg\n (define_insn \"*tst<mode>_extimm\"\n@@ -571,7 +600,8 @@\n   \"@\n    lt<g>r\\t%2,%0\n    lt<g>\\t%2,%0\"\n-  [(set_attr \"op_type\" \"RR<E>,RXY\")])\n+  [(set_attr \"op_type\" \"RR<E>,RXY\")\n+   (set_attr \"z10prop\" \"z10_fr_E1,z10_fr_A3\") ])\n \n ; ltr, lt, ltgr, ltg\n (define_insn \"*tst<mode>_cconly_extimm\"\n@@ -583,7 +613,8 @@\n   \"@\n    lt<g>r\\t%0,%0\n    lt<g>\\t%2,%0\"\n-  [(set_attr \"op_type\" \"RR<E>,RXY\")])\n+  [(set_attr \"op_type\" \"RR<E>,RXY\")\n+   (set_attr \"z10prop\" \"z10_fr_E1,z10_fr_A3\")])\n \n (define_insn \"*tstdi\"\n   [(set (reg CC_REGNUM)\n@@ -593,7 +624,8 @@\n         (match_dup 0))]\n   \"s390_match_ccmode(insn, CCSmode) && TARGET_64BIT && !TARGET_EXTIMM\"\n   \"ltgr\\t%2,%0\"\n-  [(set_attr \"op_type\" \"RRE\")])\n+  [(set_attr \"op_type\" \"RRE\")\n+   (set_attr \"z10prop\" \"z10_fr_E1\")])\n \n (define_insn \"*tstsi\"\n   [(set (reg CC_REGNUM)\n@@ -606,7 +638,8 @@\n    ltr\\t%2,%0\n    icm\\t%2,15,%S0\n    icmy\\t%2,15,%S0\"\n-  [(set_attr \"op_type\" \"RR,RS,RSY\")])\n+  [(set_attr \"op_type\" \"RR,RS,RSY\")\n+   (set_attr \"z10prop\" \"z10_fr_E1,z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*tstsi_cconly\"\n   [(set (reg CC_REGNUM)\n@@ -618,7 +651,8 @@\n    ltr\\t%0,%0\n    icm\\t%2,15,%S0\n    icmy\\t%2,15,%S0\"\n-  [(set_attr \"op_type\" \"RR,RS,RSY\")])\n+  [(set_attr \"op_type\" \"RR,RS,RSY\")\n+   (set_attr \"z10prop\" \"z10_fr_E1,z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*tstdi_cconly_31\"\n   [(set (reg CC_REGNUM)\n@@ -636,7 +670,8 @@\n                  (match_operand:GPR 1 \"const0_operand\" \"\")))]\n   \"s390_match_ccmode(insn, CCSmode)\"\n   \"lt<g>r\\t%0,%0\"\n-  [(set_attr \"op_type\" \"RR<E>\")])\n+  [(set_attr \"op_type\" \"RR<E>\")\n+   (set_attr \"z10prop\" \"z10_fr_E1\")])\n \n ; tst(hi|qi) instruction pattern(s).\n \n@@ -651,7 +686,8 @@\n    icm\\t%2,<icm_lo>,%S0\n    icmy\\t%2,<icm_lo>,%S0\n    tml\\t%0,<max_uint>\"\n-  [(set_attr \"op_type\" \"RS,RSY,RI\")])\n+  [(set_attr \"op_type\" \"RS,RSY,RI\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super\")])\n \n (define_insn \"*tsthiCCT_cconly\"\n   [(set (reg CC_REGNUM)\n@@ -663,7 +699,8 @@\n    icm\\t%2,3,%S0\n    icmy\\t%2,3,%S0\n    tml\\t%0,65535\"\n-  [(set_attr \"op_type\" \"RS,RSY,RI\")])\n+  [(set_attr \"op_type\" \"RS,RSY,RI\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super\")])\n \n (define_insn \"*tstqiCCT_cconly\"\n   [(set (reg CC_REGNUM)\n@@ -674,7 +711,8 @@\n    cli\\t%S0,0\n    cliy\\t%S0,0\n    tml\\t%0,255\"\n-  [(set_attr \"op_type\" \"SI,SIY,RI\")])\n+  [(set_attr \"op_type\" \"SI,SIY,RI\")\n+   (set_attr \"z10prop\" \"z10_super,z10_super,*\")])\n \n (define_insn \"*tst<mode>\"\n   [(set (reg CC_REGNUM)\n@@ -686,7 +724,8 @@\n   \"@\n    icm\\t%2,<icm_lo>,%S0\n    icmy\\t%2,<icm_lo>,%S0\"\n-  [(set_attr \"op_type\" \"RS,RSY\")])\n+  [(set_attr \"op_type\" \"RS,RSY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*tst<mode>_cconly\"\n   [(set (reg CC_REGNUM)\n@@ -697,7 +736,8 @@\n   \"@\n    icm\\t%2,<icm_lo>,%S0\n    icmy\\t%2,<icm_lo>,%S0\"\n-  [(set_attr \"op_type\" \"RS,RSY\")])\n+  [(set_attr \"op_type\" \"RS,RSY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n \n \n ; Compare (equality) instructions\n@@ -713,7 +753,8 @@\n    cgfi\\t%0,%1\n    cg\\t%0,%1\n    #\"\n-  [(set_attr \"op_type\" \"RRE,RI,RIL,RXY,SS\")])\n+  [(set_attr \"op_type\" \"RRE,RI,RIL,RXY,SS\")\n+   (set_attr \"z10prop\" \"z10_super_c,z10_super,z10_super,z10_super,*\")])\n \n (define_insn \"*cmpsi_cct\"\n   [(set (reg CC_REGNUM)\n@@ -727,8 +768,8 @@\n    c\\t%0,%1\n    cy\\t%0,%1\n    #\"\n-  [(set_attr \"op_type\" \"RR,RI,RIL,RX,RXY,SS\")])\n-\n+  [(set_attr \"op_type\" \"RR,RI,RIL,RX,RXY,SS\")\n+   (set_attr \"z10prop\" \"z10_super,z10_super,z10_super,z10_super,z10_super,*\")])\n \n ; Compare (signed) instructions\n \n@@ -743,9 +784,11 @@\n    cgf\\t%0,%1\n    cgfrl\\t%0,%1\"\n   [(set_attr \"op_type\"      \"RRE,RXY,RIL\")\n-   (set_attr \"cpu_facility\" \"*,*,z10\")\n+   (set_attr \"z10prop\" \"z10_c,*,*\")\n    (set_attr \"type\"         \"*,*,larl\")])\n \n+\n+\n (define_insn \"*cmpsi_ccs_sign\"\n   [(set (reg CC_REGNUM)\n         (compare (sign_extend:SI (match_operand:HI 1 \"memory_operand\" \"R,T,b\"))\n@@ -796,7 +839,8 @@\n    c<g>rl\\t%0,%1\"\n   [(set_attr \"op_type\" \"RR<E>,RI,SIL,RIL,RX<Y>,RXY,RIL\")\n    (set_attr \"cpu_facility\" \"*,*,z10,extimm,*,*,z10\")\n-   (set_attr \"type\" \"*,*,*,*,*,*,larl\")])\n+   (set_attr \"type\" \"*,*,*,*,*,*,larl\")\n+   (set_attr \"z10prop\" \"z10_super_c,z10_super,z10_super,z10_super,z10_super,z10_super,z10_super\")])\n \n \n ; Compare (unsigned) instructions\n@@ -820,7 +864,8 @@\n   \"s390_match_ccmode(insn, CCURmode) && TARGET_Z10\"\n   \"cl<g>hrl\\t%0,%1\"\n   [(set_attr \"op_type\" \"RIL\")\n-   (set_attr \"type\"    \"larl\")])\n+   (set_attr \"type\"    \"larl\")\n+   (set_attr \"z10prop\" \"z10_super\")])\n \n (define_insn \"*cmpdi_ccu_zero\"\n   [(set (reg CC_REGNUM)\n@@ -834,7 +879,8 @@\n    clgfrl\\t%0,%1\"\n   [(set_attr \"op_type\"      \"RRE,RXY,RIL\")\n    (set_attr \"cpu_facility\" \"*,*,z10\")\n-   (set_attr \"type\"         \"*,*,larl\")])\n+   (set_attr \"type\"         \"*,*,larl\")\n+   (set_attr \"z10prop\" \"z10_super_c,z10_super_E1,z10_super\")])\n \n (define_insn \"*cmpdi_ccu\"\n   [(set (reg CC_REGNUM)\n@@ -853,7 +899,8 @@\n    #\"\n   [(set_attr \"op_type\" \"RRE,RIL,RIL,SIL,RXY,SS,SS\")\n    (set_attr \"cpu_facility\" \"*,extimm,z10,z10,*,*,*\")\n-   (set_attr \"type\"         \"*,*,larl,*,*,*,*\")])\n+   (set_attr \"type\"         \"*,*,larl,*,*,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_c,z10_super,z10_super,z10_super,z10_super,*,*\")])\n \n (define_insn \"*cmpsi_ccu\"\n   [(set (reg CC_REGNUM)\n@@ -871,7 +918,8 @@\n    #\"\n   [(set_attr \"op_type\" \"RR,RIL,RIL,SIL,RX,RXY,SS,SS\")\n    (set_attr \"cpu_facility\" \"*,extimm,z10,z10,*,*,*,*\")\n-   (set_attr \"type\"         \"*,*,larl,*,*,*,*,*\")])\n+   (set_attr \"type\"         \"*,*,larl,*,*,*,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_c,z10_super,z10_super,z10_super,z10_super,z10_super,*,*\")])\n \n (define_insn \"*cmphi_ccu\"\n   [(set (reg CC_REGNUM)\n@@ -886,7 +934,8 @@\n    #\n    #\"\n   [(set_attr \"op_type\" \"RS,RSY,SIL,SS,SS\")\n-   (set_attr \"cpu_facility\" \"*,*,z10,*,*\")])\n+   (set_attr \"cpu_facility\" \"*,*,z10,*,*\")\n+   (set_attr \"z10prop\" \"*,*,z10_super,*,*\")])\n \n (define_insn \"*cmpqi_ccu\"\n   [(set (reg CC_REGNUM)\n@@ -901,7 +950,8 @@\n    cliy\\t%S0,%b1\n    #\n    #\"\n-  [(set_attr \"op_type\" \"RS,RSY,SI,SIY,SS,SS\")])\n+  [(set_attr \"op_type\" \"RS,RSY,SI,SIY,SS,SS\")\n+   (set_attr \"z10prop\" \"*,*,z10_super,z10_super,*,*\")])\n \n \n ; Block compare (CLC) instruction patterns.\n@@ -948,7 +998,7 @@\n   \"s390_match_ccmode(insn, CCSmode) && TARGET_HARD_FLOAT\"\n   \"lt<xde><bt>r\\t%0,%0\"\n    [(set_attr \"op_type\" \"RRE\")\n-    (set_attr \"type\"  \"fsimp<bfp>\")])\n+    (set_attr \"type\"  \"fsimp<mode>\")])\n \n ; cxtr, cxbr, cdbr, cebr, cxb, cdb, ceb, cxbtr, cdbtr\n (define_insn \"*cmp<mode>_ccs\"\n@@ -960,12 +1010,14 @@\n    c<xde><bt>r\\t%0,%1\n    c<xde>b\\t%0,%1\"\n    [(set_attr \"op_type\" \"RRE,RXE\")\n-    (set_attr \"type\"  \"fsimp<bfp>\")])\n+    (set_attr \"type\"  \"fsimp<mode>\")])\n \n \n ; Compare and Branch instructions\n \n ; cij, cgij, crj, cgrj, cfi, cgfi, cr, cgr\n+; The following instructions do a complementary access of their second\n+; operand (z01 only): crj_c, cgrjc, cr, cgr\n (define_insn \"*cmp_and_br_signed_<mode>\"\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"s390_signed_integer_comparison\"\n@@ -985,12 +1037,15 @@\n }\n   [(set_attr \"op_type\" \"RIE\")\n    (set_attr \"type\"    \"branch\")\n+   (set_attr \"z10prop\" \"z10_cobra,z10_super\")\n    (set (attr \"length\")\n         (if_then_else (lt (abs (minus (pc) (match_dup 3))) (const_int 60000))\n                       (const_int 6) (const_int 12)))]) ; 8 byte for cr/jg\n                                                        ; 10 byte for cgr/jg\n \n ; clij, clgij, clrj, clgrj, clfi, clgfi, clr, clgr\n+; The following instructions do a complementary access of their second\n+; operand (z10 only): clrj, clgrj, clr, clgr\n (define_insn \"*cmp_and_br_unsigned_<mode>\"\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"s390_unsigned_integer_comparison\"\n@@ -1010,6 +1065,7 @@\n }\n   [(set_attr \"op_type\" \"RIE\")\n    (set_attr \"type\"    \"branch\")\n+   (set_attr \"z10prop\" \"z10_cobra,z10_super\")\n    (set (attr \"length\")\n         (if_then_else (lt (abs (minus (pc) (match_dup 3))) (const_int 60000))\n                       (const_int 6) (const_int 12)))]) ; 8 byte for clr/jg\n@@ -1210,7 +1266,8 @@\n    && !FP_REG_P (operands[0])\"\n   \"larl\\t%0,%1\"\n    [(set_attr \"op_type\" \"RIL\")\n-    (set_attr \"type\"    \"larl\")])\n+    (set_attr \"type\"    \"larl\")\n+    (set_attr \"z10prop\" \"z10_super_A1\")])\n \n (define_insn \"*movdi_64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n@@ -1255,7 +1312,35 @@\n                      *,*,*\")\n    (set_attr \"cpu_facility\" \"*,*,*,*,*,extimm,extimm,extimm,dfp,dfp,longdisp,\n                              z10,*,*,*,*,*,longdisp,*,longdisp,\n-                             z10,z10,*,*,*,*,*\")])\n+                             z10,z10,*,*,*,*,*\")\n+   (set_attr \"z10prop\" \"z10_fwd_A1,\n+                        z10_fwd_E1,\n+                        z10_fwd_E1,\n+                        z10_fwd_E1,\n+                        z10_fwd_E1,\n+                        z10_fwd_A1,\n+                        z10_fwd_E1,\n+                        z10_fwd_E1,\n+                        *,\n+                        *,\n+                        z10_fwd_A1,\n+                        z10_fwd_A3,\n+                        z10_fr_E1,\n+                        z10_fwd_A3,\n+                        z10_rec,\n+                        *,\n+                        *,\n+                        *,\n+                        *,\n+                        *,\n+                        z10_rec,\n+                        z10_super,\n+                        *,\n+                        *,\n+                        *,\n+                        *,\n+                        *\")\n+])\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -1390,7 +1475,8 @@\n    la\\t%0,%a1\n    lay\\t%0,%a1\"\n   [(set_attr \"op_type\" \"RX,RXY\")\n-   (set_attr \"type\"    \"la\")])\n+   (set_attr \"type\"    \"la\")\n+   (set_attr \"z10prop\" \"z10_fwd_A1,z10_fwd_A1\")])\n \n (define_peephole2\n   [(parallel\n@@ -1441,7 +1527,8 @@\n    && !FP_REG_P (operands[0])\"\n   \"larl\\t%0,%1\"\n    [(set_attr \"op_type\" \"RIL\")\n-    (set_attr \"type\"    \"larl\")])\n+    (set_attr \"type\"    \"larl\")\n+    (set_attr \"z10prop\" \"z10_super_A1\")])\n \n (define_insn \"*movsi_zarch\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\"\n@@ -1475,10 +1562,54 @@\n    #\"\n   [(set_attr \"op_type\" \"RI,RI,RI,RIL,RXY,RIL,RR,RX,RXY,RX,RXY,\n                         RR,RX,RXY,RX,RXY,RRE,RRE,RS,RIL,SIL,RS,SS\")\n-   (set_attr \"type\" \"*,*,*,*,la,larl,lr,load,load,store,store,\n-                     floadsf,floadsf,floadsf,fstoresf,fstoresf,*,*,*,larl,*,*,*\")\n+   (set_attr \"type\" \"*,\n+                     *,\n+                     *,\n+                     *,\n+                     la,\n+                     larl,\n+                     lr,\n+                     load,\n+                     load,\n+                     store,\n+                     store,\n+                     floadsf,\n+                     floadsf,\n+                     floadsf,\n+                     fstoresf,\n+                     fstoresf,\n+                     *,\n+                     *,\n+                     *,\n+                     larl,\n+                     *,\n+                     *,\n+                     *\")\n    (set_attr \"cpu_facility\" \"*,*,*,extimm,longdisp,z10,*,*,longdisp,*,longdisp,\n-                             *,*,longdisp,*,longdisp,*,*,*,z10,z10,*,*\")])\n+                             *,*,longdisp,*,longdisp,*,*,*,z10,z10,*,*\")\n+   (set_attr \"z10prop\" \"z10_fwd_A1,\n+                        z10_fwd_E1,\n+                        z10_fwd_E1,\n+                        z10_fwd_A1,\n+                        z10_fwd_A1,\n+                        z10_fwd_A3,\n+                        z10_fr_E1,\n+                        z10_fwd_A3,\n+                        z10_fwd_A3,\n+                        z10_super,\n+                        z10_rec,\n+                        *,\n+                        *,\n+                        *,\n+                        *,\n+                        *,\n+                        z10_super_E1,\n+                        z10_super,\n+                        *,\n+                        z10_rec,\n+                        z10_super,\n+                        *,\n+                        *\")])\n \n (define_insn \"*movsi_esa\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,d,R,!*f,!*f,!R,d,t,Q,t,?Q\")\n@@ -1498,7 +1629,20 @@\n    lam\\t%0,%0,%S1\n    #\"\n   [(set_attr \"op_type\" \"RI,RR,RX,RX,RR,RX,RX,RRE,RRE,RS,RS,SS\")\n-   (set_attr \"type\" \"*,lr,load,store,floadsf,floadsf,fstoresf,*,*,*,*,*\")])\n+   (set_attr \"type\" \"*,lr,load,store,floadsf,floadsf,fstoresf,*,*,*,*,*\")\n+   (set_attr \"z10prop\" \"z10_fwd_A1,\n+                        z10_fr_E1,\n+                        z10_fwd_A3,\n+                        z10_super,\n+                        *,\n+                        *,\n+                        *,\n+                        z10_super_E1,\n+                        z10_super,\n+                        *,\n+                        *,\n+                        *\")\n+])\n \n (define_peephole2\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -1519,7 +1663,8 @@\n    la\\t%0,%a1\n    lay\\t%0,%a1\"\n   [(set_attr \"op_type\"  \"RX,RXY\")\n-   (set_attr \"type\"     \"la\")])\n+   (set_attr \"type\"     \"la\")\n+   (set_attr \"z10prop\" \"z10_fwd_A1,z10_fwd_A1\")])\n \n (define_peephole2\n   [(parallel\n@@ -1554,7 +1699,8 @@\n    la\\t%0,%a1\n    lay\\t%0,%a1\"\n   [(set_attr \"op_type\"  \"RX,RXY\")\n-   (set_attr \"type\"     \"la\")])\n+   (set_attr \"type\"     \"la\")\n+   (set_attr \"z10prop\" \"z10_fwd_A1,z10_fwd_A1\")])\n \n (define_insn_and_split \"*la_31_and_cc\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n@@ -1579,7 +1725,8 @@\n    la\\t%0,%a1\n    lay\\t%0,%a1\"\n   [(set_attr \"op_type\"  \"RX\")\n-   (set_attr \"type\"     \"la\")])\n+   (set_attr \"type\"     \"la\")\n+   (set_attr \"z10prop\" \"z10_fwd_A1,z10_fwd_A1\")])\n \n ;\n ; movhi instruction pattern(s).\n@@ -1620,7 +1767,17 @@\n    #\"\n   [(set_attr \"op_type\"      \"RR,RI,RX,RXY,RIL,RX,RXY,RIL,SIL,SS\")\n    (set_attr \"type\"         \"lr,*,*,*,larl,store,store,store,*,*\")\n-   (set_attr \"cpu_facility\" \"*,*,*,*,z10,*,*,z10,z10,*\")])\n+   (set_attr \"cpu_facility\" \"*,*,*,*,z10,*,*,z10,z10,*\")\n+   (set_attr \"z10prop\" \"z10_fr_E1,\n+                       z10_fwd_A1,\n+                       z10_super_E1,\n+                       z10_super_E1,\n+                       z10_super_E1,\n+                       z10_super,\n+                       z10_rec,\n+                       z10_rec,\n+                       z10_super,\n+                       *\")])\n \n (define_peephole2\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n@@ -1669,7 +1826,16 @@\n    mviy\\t%S0,%b1\n    #\"\n   [(set_attr \"op_type\" \"RR,RI,RX,RXY,RX,RXY,SI,SIY,SS\")\n-   (set_attr \"type\" \"lr,*,*,*,store,store,store,store,*\")])\n+   (set_attr \"type\" \"lr,*,*,*,store,store,store,store,*\")\n+   (set_attr \"z10prop\" \"z10_fr_E1,\n+                        z10_fwd_A1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super,\n+                        z10_rec,\n+                        z10_super,\n+                        z10_super,\n+                        *\")])\n \n (define_peephole2\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n@@ -1692,7 +1858,8 @@\n   \"@\n    ic\\t%0,%1\n    icy\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RX,RXY\")])\n+  [(set_attr \"op_type\"  \"RX,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super\")])\n \n ;\n ; movstricthi instruction pattern(s).\n@@ -1706,7 +1873,8 @@\n   \"@\n    icm\\t%0,3,%S1\n    icmy\\t%0,3,%S1\"\n-  [(set_attr \"op_type\" \"RS,RSY\")])\n+  [(set_attr \"op_type\" \"RS,RSY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n \n ;\n ; movstrictsi instruction pattern(s).\n@@ -1722,7 +1890,8 @@\n    ly\\t%0,%1\n    ear\\t%0,%1\"\n   [(set_attr \"op_type\" \"RR,RX,RXY,RRE\")\n-   (set_attr \"type\" \"lr,load,load,*\")])\n+   (set_attr \"type\" \"lr,load,load,*\")\n+   (set_attr \"z10prop\" \"z10_fr_E1,z10_fwd_A3,z10_fwd_A3,z10_super_E1\")])\n \n ;\n ; mov(tf|td) instruction pattern(s).\n@@ -1812,7 +1981,7 @@\n (define_split\n   [(set (match_operand:TD_TF 0 \"register_operand\" \"\")\n         (match_operand:TD_TF 1 \"memory_operand\" \"\"))]\n-  \"reload_completed && offsettable_memref_p (operands[1]) \n+  \"reload_completed && offsettable_memref_p (operands[1])\n    && FP_REG_P (operands[0])\"\n   [(set (match_dup 2) (match_dup 4))\n    (set (match_dup 3) (match_dup 5))]\n@@ -1872,7 +2041,20 @@\n    #\"\n   [(set_attr \"op_type\" \"RRE,RR,RRE,RRE,RX,RXY,RX,RXY,RRE,RXY,RXY,SS\")\n    (set_attr \"type\" \"fsimpdf,floaddf,floaddf,floaddf,floaddf,floaddf,\n-                     fstoredf,fstoredf,lr,load,store,*\")])\n+                     fstoredf,fstoredf,lr,load,store,*\")\n+   (set_attr \"z10prop\" \"*,\n+                        *,\n+                        *,\n+                        *,\n+                        *,\n+                        *,\n+                        *,\n+                        *,\n+                        z10_fr_E1,\n+                        z10_fwd_A3,\n+                        z10_rec,\n+                        *\")\n+])\n \n (define_insn \"*mov<mode>_64\"\n   [(set (match_operand:DD_DF 0 \"nonimmediate_operand\" \"=f,f,f,f,R,T,d, d,RT,?Q\")\n@@ -1890,8 +2072,18 @@\n    stg\\t%1,%0\n    #\"\n   [(set_attr \"op_type\" \"RRE,RR,RX,RXY,RX,RXY,RRE,RXY,RXY,SS\")\n-   (set_attr \"type\" \"fsimp<bfp>,fload<bfp>,fload<bfp>,fload<bfp>,\n-                     fstore<bfp>,fstore<bfp>,lr,load,store,*\")])\n+   (set_attr \"type\" \"fsimp<mode>,fload<mode>,fload<mode>,fload<mode>,\n+                     fstore<mode>,fstore<mode>,lr,load,store,*\")\n+   (set_attr \"z10prop\" \"*,\n+                        *,\n+                        *,\n+                        *,\n+                        *,\n+                        *,\n+                        z10_fr_E1,\n+                        z10_fwd_A3,\n+                        z10_rec,\n+                        *\")])\n \n (define_insn \"*mov<mode>_31\"\n   [(set (match_operand:DD_DF 0 \"nonimmediate_operand\"\n@@ -1914,8 +2106,8 @@\n    #\n    #\"\n   [(set_attr \"op_type\" \"RRE,RR,RX,RXY,RX,RXY,RS,RSY,RS,RSY,*,*,SS\")\n-   (set_attr \"type\" \"fsimp<bfp>,fload<bfp>,fload<bfp>,fload<bfp>,\n-                     fstore<bfp>,fstore<bfp>,lm,lm,stm,stm,*,*,*\")])\n+   (set_attr \"type\" \"fsimp<mode>,fload<mode>,fload<mode>,fload<mode>,\n+                     fstore<mode>,fstore<mode>,lm,lm,stm,stm,*,*,*\")])\n \n (define_split\n   [(set (match_operand:DD_DF 0 \"nonimmediate_operand\" \"\")\n@@ -1982,8 +2174,20 @@\n    sty\\t%1,%0\n    #\"\n   [(set_attr \"op_type\" \"RRE,RR,RX,RXY,RX,RXY,RR,RX,RXY,RX,RXY,SS\")\n-   (set_attr \"type\" \"fsimp<bfp>,fload<bfp>,fload<bfp>,fload<bfp>,\n-                     fstore<bfp>,fstore<bfp>,lr,load,load,store,store,*\")])\n+   (set_attr \"type\" \"fsimp<mode>,fload<mode>,fload<mode>,fload<mode>,\n+                     fstore<mode>,fstore<mode>,lr,load,load,store,store,*\")\n+   (set_attr \"z10prop\" \"*,\n+                        *,\n+                        *,\n+                        *,\n+                        *,\n+                        *,\n+                        z10_fr_E1,\n+                        z10_fwd_A3,\n+                        z10_fwd_A3,\n+                        z10_super,\n+                        z10_rec,\n+                        *\")])\n \n ;\n ; movcc instruction pattern\n@@ -2002,7 +2206,8 @@\n    l\\t%1,%0\n    ly\\t%1,%0\"\n   [(set_attr \"op_type\" \"RR,RI,RRE,RX,RXY,RX,RXY\")\n-   (set_attr \"type\" \"lr,*,*,store,store,load,load\")])\n+   (set_attr \"type\" \"lr,*,*,store,store,load,load\")\n+   (set_attr \"z10prop\" \"z10_fr_E1,*,*,z10_super,z10_rec,z10_fwd_A3,z10_fwd_A3\")])\n \n ;\n ; Block move (MVC) patterns.\n@@ -2042,7 +2247,7 @@\n      (use (match_operand 5 \"const_int_operand\" \"\"))])]\n   \"s390_offset_p (operands[0], operands[3], operands[2])\n    && s390_offset_p (operands[1], operands[4], operands[2])\n-   && !s390_overlap_p (operands[0], operands[1], \n+   && !s390_overlap_p (operands[0], operands[1],\n                        INTVAL (operands[2]) + INTVAL (operands[5]))\n    && INTVAL (operands[2]) + INTVAL (operands[5]) <= 256\"\n   [(parallel\n@@ -2348,19 +2553,19 @@\n   \"clst\\t%0,%1\\;jo\\t.-4\"\n   [(set_attr \"length\" \"8\")\n    (set_attr \"type\" \"vs\")])\n- \n+\n ;\n ; movstr instruction pattern.\n ;\n \n (define_expand \"movstr\"\n   [(set (reg:SI 0) (const_int 0))\n-   (parallel \n+   (parallel\n     [(clobber (match_dup 3))\n      (set (match_operand:BLK 1 \"memory_operand\" \"\")\n \t  (match_operand:BLK 2 \"memory_operand\" \"\"))\n      (set (match_operand 0 \"register_operand\" \"\")\n-\t  (unspec [(match_dup 1) \n+\t  (unspec [(match_dup 1)\n \t\t   (match_dup 2)\n \t\t   (reg:SI 0)] UNSPEC_MVST))\n      (clobber (reg:CC CC_REGNUM))])]\n@@ -2381,15 +2586,15 @@\n    (set (mem:BLK (match_operand:P 1 \"register_operand\" \"0\"))\n \t(mem:BLK (match_operand:P 3 \"register_operand\" \"2\")))\n    (set (match_operand:P 0 \"register_operand\" \"=d\")\n-\t(unspec [(mem:BLK (match_dup 1)) \n+\t(unspec [(mem:BLK (match_dup 1))\n \t\t (mem:BLK (match_dup 3))\n \t\t (reg:SI 0)] UNSPEC_MVST))\n    (clobber (reg:CC CC_REGNUM))]\n   \"\"\n   \"mvst\\t%1,%2\\;jo\\t.-4\"\n   [(set_attr \"length\" \"8\")\n    (set_attr \"type\" \"vs\")])\n-  \n+\n \n ;\n ; movmemM instruction pattern(s).\n@@ -2477,7 +2682,7 @@\n   \"reload_completed && TARGET_CPU_ZARCH\"\n   [(set (match_dup 3) (label_ref (match_dup 4)))\n    (parallel\n-    [(unspec [(match_dup 2) (mem:BLK (match_dup 3)) \n+    [(unspec [(match_dup 2) (mem:BLK (match_dup 3))\n               (label_ref (match_dup 4))] UNSPEC_EXECUTE)\n      (set (match_dup 0) (match_dup 1))\n      (use (const_int 1))])]\n@@ -2538,8 +2743,8 @@\n \n (define_expand \"signbit<mode>2\"\n   [(set (reg:CCZ CC_REGNUM)\n-        (unspec:CCZ [(match_operand:FP_ALL 1 \"register_operand\" \"f\") \n-                     (match_dup 2)] \n+        (unspec:CCZ [(match_operand:FP_ALL 1 \"register_operand\" \"f\")\n+                     (match_dup 2)]\n                      UNSPEC_TDC_INSN))\n    (set (match_operand:SI 0 \"register_operand\" \"=d\")\n         (unspec:SI [(reg:CCZ CC_REGNUM)] UNSPEC_CCZ_TO_INT))]\n@@ -2550,8 +2755,8 @@\n \n (define_expand \"isinf<mode>2\"\n   [(set (reg:CCZ CC_REGNUM)\n-        (unspec:CCZ [(match_operand:FP_ALL 1 \"register_operand\" \"f\") \n-                     (match_dup 2)] \n+        (unspec:CCZ [(match_operand:FP_ALL 1 \"register_operand\" \"f\")\n+                     (match_dup 2)]\n                      UNSPEC_TDC_INSN))\n    (set (match_operand:SI 0 \"register_operand\" \"=d\")\n         (unspec:SI [(reg:CCZ CC_REGNUM)] UNSPEC_CCZ_TO_INT))]\n@@ -2563,16 +2768,16 @@\n ; This insn is used to generate all variants of the Test Data Class\n ; instruction, namely tcxb, tcdb, and tceb.  The insn's first operand\n ; is the register to be tested and the second one is the bit mask\n-; specifying the required test(s).  \n+; specifying the required test(s).\n ;\n (define_insn \"*TDC_insn_<mode>\"\n   [(set (reg:CCZ CC_REGNUM)\n-        (unspec:CCZ [(match_operand:FP_ALL 0 \"register_operand\" \"f\") \n+        (unspec:CCZ [(match_operand:FP_ALL 0 \"register_operand\" \"f\")\n                      (match_operand:SI 1 \"const_int_operand\")] UNSPEC_TDC_INSN))]\n   \"TARGET_HARD_FLOAT\"\n   \"t<_d>c<xde><bt>\\t%0,%1\"\n    [(set_attr \"op_type\" \"RXE\")\n-    (set_attr \"type\"  \"fsimp<bfp>\")])\n+    (set_attr \"type\"  \"fsimp<mode>\")])\n \n (define_insn_and_split \"*ccz_to_int\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n@@ -2679,14 +2884,14 @@\n   \"reload_completed && TARGET_CPU_ZARCH\"\n   [(set (match_dup 2) (label_ref (match_dup 3)))\n    (parallel\n-    [(unspec [(match_dup 1) (mem:BLK (match_dup 2)) \n+    [(unspec [(match_dup 1) (mem:BLK (match_dup 2))\n               (label_ref (match_dup 3))] UNSPEC_EXECUTE)\n      (set (match_dup 0) (const_int 0))\n      (use (const_int 1))\n      (clobber (reg:CC CC_REGNUM))])]\n   \"operands[3] = gen_label_rtx ();\")\n \n-; Initialize a block of arbitrary length with (operands[2] % 256). \n+; Initialize a block of arbitrary length with (operands[2] % 256).\n \n (define_expand \"setmem_long\"\n   [(parallel\n@@ -2833,7 +3038,7 @@\n   \"reload_completed && TARGET_CPU_ZARCH\"\n   [(set (match_dup 3) (label_ref (match_dup 4)))\n    (parallel\n-    [(unspec [(match_dup 2) (mem:BLK (match_dup 3)) \n+    [(unspec [(match_dup 2) (mem:BLK (match_dup 3))\n               (label_ref (match_dup 4))] UNSPEC_EXECUTE)\n      (set (reg:CCU CC_REGNUM) (compare:CCU (match_dup 0) (match_dup 1)))\n      (use (const_int 1))])]\n@@ -2938,7 +3143,7 @@\n \n (define_insn_and_split \"*cmpint_sign_cc\"\n   [(set (reg CC_REGNUM)\n-        (compare (ashiftrt:DI (ashift:DI (subreg:DI \n+        (compare (ashiftrt:DI (ashift:DI (subreg:DI\n                    (unspec:SI [(match_operand:CCU 1 \"register_operand\" \"0\")]\n                               UNSPEC_CCU_TO_INT) 0)\n                    (const_int 32)) (const_int 32))\n@@ -2972,7 +3177,8 @@\n   \"@\n    icm\\t%0,%2,%S1\n    icmy\\t%0,%2,%S1\"\n-  [(set_attr \"op_type\" \"RS,RSY\")])\n+  [(set_attr \"op_type\" \"RS,RSY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*sethighpartdi_64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n@@ -2992,7 +3198,9 @@\n   \"@\n    icm\\t%0,%2,%S1\n    icmy\\t%0,%2,%S1\"\n-  [(set_attr \"op_type\" \"RS,RSY\")])\n+  [(set_attr \"op_type\" \"RS,RSY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n+\n \n (define_insn_and_split \"*extzv<mode>\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n@@ -3083,7 +3291,8 @@\n \n   return \"risbg\\t%0,%3,%b2,%b1,%b4\";\n }\n-  [(set_attr \"op_type\" \"RIE\")])\n+  [(set_attr \"op_type\" \"RIE\")\n+   (set_attr \"z10prop\" \"z10_super_E1\")])\n \n ; and op1 with a mask being 1 for the selected bits and 0 for the rest\n ; and op3=op0 with a mask being 0 for the selected bits and 1 for the rest\n@@ -3112,7 +3321,8 @@\n \n   return \"risbg\\t%0,%1,%b5,%b6,%b7\";\n }\n-  [(set_attr \"op_type\" \"RIE\")])\n+  [(set_attr \"op_type\" \"RIE\")\n+   (set_attr \"z10prop\" \"z10_super_E1\")])\n \n ; and op1 with a mask being 1 for the selected bits and 0 for the rest\n (define_insn \"*insv<mode>_or_z10_noshift\"\n@@ -3151,10 +3361,11 @@\n     int size = INTVAL (operands[1]) / BITS_PER_UNIT;\n \n     operands[1] = GEN_INT ((1ul << size) - 1);\n-    return (which_alternative == 0) ? \"stcm\\t%2,%1,%S0\" \n+    return (which_alternative == 0) ? \"stcm\\t%2,%1,%S0\"\n \t\t\t\t    : \"stcmy\\t%2,%1,%S0\";\n }\n-  [(set_attr \"op_type\" \"RS,RSY\")])\n+  [(set_attr \"op_type\" \"RS,RSY\")\n+   (set_attr \"z10prop\" \"z10_super,z10_super\")])\n \n (define_insn \"*insvdi_mem_reghigh\"\n   [(set (zero_extract:DI (match_operand:QI 0 \"memory_operand\" \"+QS\")\n@@ -3172,7 +3383,8 @@\n     operands[1] = GEN_INT ((1ul << size) - 1);\n     return \"stcmh\\t%2,%1,%S0\";\n }\n-[(set_attr \"op_type\" \"RSY\")])\n+[(set_attr \"op_type\" \"RSY\")\n+ (set_attr \"z10prop\" \"z10_super\")])\n \n (define_insn \"*insv<mode>_reg_imm\"\n   [(set (zero_extract:P (match_operand:P 0 \"register_operand\" \"+d\")\n@@ -3193,7 +3405,9 @@\n       default: gcc_unreachable();\n     }\n }\n-  [(set_attr \"op_type\" \"RI\")])\n+  [(set_attr \"op_type\" \"RI\")\n+   (set_attr \"z10prop\" \"z10_super_E1\")])\n+\n \n (define_insn \"*insv<mode>_reg_extimm\"\n   [(set (zero_extract:P (match_operand:P 0 \"register_operand\" \"+d\")\n@@ -3212,7 +3426,9 @@\n       default: gcc_unreachable();\n     }\n }\n-  [(set_attr \"op_type\" \"RIL\")])\n+  [(set_attr \"op_type\" \"RIL\")\n+   (set_attr \"z10prop\" \"z10_fwd_E1\")])\n+\n \n ;\n ; extendsidi2 instruction pattern(s).\n@@ -3243,7 +3459,8 @@\n    lgfrl\\t%0,%1\"\n   [(set_attr \"op_type\"      \"RRE,RXY,RIL\")\n    (set_attr \"type\"         \"*,*,larl\")\n-   (set_attr \"cpu_facility\" \"*,*,z10\")])\n+   (set_attr \"cpu_facility\" \"*,*,z10\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1\")])\n \n ;\n ; extend(hi|qi)(si|di)2 instruction pattern(s).\n@@ -3287,14 +3504,16 @@\n    lghrl\\t%0,%1\"\n   [(set_attr \"op_type\"      \"RRE,RXY,RIL\")\n    (set_attr \"type\"         \"*,*,larl\")\n-   (set_attr \"cpu_facility\" \"extimm,extimm,z10\")])\n+   (set_attr \"cpu_facility\" \"extimm,extimm,z10\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*extendhidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n         (sign_extend:DI (match_operand:HI 1 \"memory_operand\" \"RT\")))]\n   \"TARGET_64BIT\"\n   \"lgh\\t%0,%1\"\n-  [(set_attr \"op_type\" \"RXY\")])\n+  [(set_attr \"op_type\" \"RXY\")\n+   (set_attr \"z10prop\" \"z10_super_E1\")])\n \n ;\n ; extendhisi2 instruction pattern(s).\n@@ -3311,7 +3530,8 @@\n    lhrl\\t%0,%1\"\n   [(set_attr \"op_type\"      \"RRE,RX,RXY,RIL\")\n    (set_attr \"type\"         \"*,*,*,larl\")\n-   (set_attr \"cpu_facility\" \"extimm,extimm,extimm,z10\")])\n+   (set_attr \"cpu_facility\" \"extimm,extimm,extimm,z10\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*extendhisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n@@ -3320,7 +3540,8 @@\n   \"@\n    lh\\t%0,%1\n    lhy\\t%0,%1\"\n-  [(set_attr \"op_type\" \"RX,RXY\")])\n+  [(set_attr \"op_type\" \"RX,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n \n ;\n ; extendqi(si|di)2 instruction pattern(s).\n@@ -3334,15 +3555,17 @@\n   \"@\n    l<g>br\\t%0,%1\n    l<g>b\\t%0,%1\"\n-  [(set_attr \"op_type\" \"RRE,RXY\")])\n+  [(set_attr \"op_type\" \"RRE,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n \n ; lb, lgb\n (define_insn \"*extendqi<mode>2\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n         (sign_extend:GPR (match_operand:QI 1 \"memory_operand\" \"RT\")))]\n   \"!TARGET_EXTIMM && TARGET_LONG_DISPLACEMENT\"\n   \"l<g>b\\t%0,%1\"\n-  [(set_attr \"op_type\" \"RXY\")])\n+  [(set_attr \"op_type\" \"RXY\")\n+   (set_attr \"z10prop\" \"z10_super_E1\")])\n \n (define_insn_and_split \"*extendqi<mode>2_short_displ\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n@@ -3392,7 +3615,8 @@\n    llgfrl\\t%0,%1\"\n   [(set_attr \"op_type\"      \"RRE,RXY,RIL\")\n    (set_attr \"type\"         \"*,*,larl\")\n-   (set_attr \"cpu_facility\" \"*,*,z10\")])\n+   (set_attr \"cpu_facility\" \"*,*,z10\")\n+   (set_attr \"z10prop\" \"z10_fwd_E1,z10_fwd_A3,z10_fwd_A3\")])\n \n ;\n ; LLGT-type instructions (zero-extend from 31 bit to 64 bit).\n@@ -3404,7 +3628,8 @@\n \t\t(const_int 2147483647)))]\n   \"TARGET_64BIT\"\n   \"llgt\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RXE\")])\n+  [(set_attr \"op_type\"  \"RXE\")\n+   (set_attr \"z10prop\" \"z10_super_E1\")])\n \n (define_insn_and_split \"*llgt_sidi_split\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n@@ -3427,7 +3652,8 @@\n   \"@\n    llgtr\\t%0,%1\n    llgt\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RRE,RXE\")])\n+  [(set_attr \"op_type\"  \"RRE,RXE\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*llgt_didi\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n@@ -3437,7 +3663,8 @@\n   \"@\n    llgtr\\t%0,%1\n    llgt\\t%0,%N1\"\n-  [(set_attr \"op_type\"  \"RRE,RXE\")])\n+  [(set_attr \"op_type\"  \"RRE,RXE\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n \n (define_split\n   [(set (match_operand:GPR 0 \"register_operand\" \"\")\n@@ -3468,7 +3695,7 @@\n     }\n   else if (!TARGET_EXTIMM)\n     {\n-      rtx bitcount = GEN_INT (GET_MODE_BITSIZE(DImode) - \n+      rtx bitcount = GEN_INT (GET_MODE_BITSIZE(DImode) -\n \t\t\t      GET_MODE_BITSIZE(<MODE>mode));\n       operands[1] = gen_lowpart (DImode, operands[1]);\n       emit_insn (gen_ashldi3 (operands[0], operands[1], bitcount));\n@@ -3485,7 +3712,7 @@\n   if (!TARGET_EXTIMM)\n     {\n       operands[1] = gen_lowpart (SImode, operands[1]);\n-      emit_insn (gen_andsi3 (operands[0], operands[1], \n+      emit_insn (gen_andsi3 (operands[0], operands[1],\n                    GEN_INT ((1 << GET_MODE_BITSIZE(<MODE>mode)) - 1)));\n       DONE;\n     }\n@@ -3502,7 +3729,8 @@\n    ll<g>hrl\\t%0,%1\"\n   [(set_attr \"op_type\"      \"RXY,RRE,RIL\")\n    (set_attr \"type\"         \"*,*,larl\")\n-   (set_attr \"cpu_facility\" \"*,*,z10\")])\n+   (set_attr \"cpu_facility\" \"*,*,z10\")\n+   (set_attr \"z10prop\" \"z10_fwd_A3\")])\n \n ; llhr, llcr, llghr, llgcr, llh, llc, llgh, llgc\n (define_insn \"*zero_extend<HQI:mode><GPR:mode>2_extimm\"\n@@ -3512,15 +3740,17 @@\n   \"@\n    ll<g><hc>r\\t%0,%1\n    ll<g><hc>\\t%0,%1\"\n-  [(set_attr \"op_type\" \"RRE,RXY\")])\n+  [(set_attr \"op_type\" \"RRE,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_fwd_A3\")])\n \n ; llgh, llgc\n (define_insn \"*zero_extend<HQI:mode><GPR:mode>2\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n         (zero_extend:GPR (match_operand:HQI 1 \"memory_operand\" \"RT\")))]\n   \"TARGET_ZARCH && !TARGET_EXTIMM\"\n   \"llg<hc>\\t%0,%1\"\n-  [(set_attr \"op_type\" \"RXY\")])\n+  [(set_attr \"op_type\" \"RXY\")\n+   (set_attr \"z10prop\" \"z10_fwd_A3\")])\n \n (define_insn_and_split \"*zero_extendhisi2_31\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n@@ -3564,7 +3794,8 @@\n         (zero_extend:HI (match_operand:QI 1 \"memory_operand\" \"RT\")))]\n   \"TARGET_ZARCH && !TARGET_EXTIMM\"\n   \"llgc\\t%0,%1\"\n-  [(set_attr \"op_type\" \"RXY\")])\n+  [(set_attr \"op_type\" \"RXY\")\n+   (set_attr \"z10prop\" \"z10_fwd_A3\")])\n \n (define_insn_and_split \"*zero_extendqihi2_31\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=&d\")\n@@ -3585,7 +3816,7 @@\n     [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t  (unsigned_fix:DI (match_operand:DD 1 \"register_operand\" \"\")))\n      (clobber (match_scratch:TD 2 \"=f\"))])]\n-\t      \n+\n   \"TARGET_HARD_FLOAT && TARGET_HARD_DFP\"\n {\n   rtx label1 = gen_label_rtx ();\n@@ -3597,7 +3828,7 @@\n   decimal_real_from_string (&sub, \"18446744073709551616.0\"); /* 2^64 */\n \n   /* 2^63 can't be represented as 64bit DFP number with full precision.  The\n-     solution is doing the check and the subtraction in TD mode and using a \n+     solution is doing the check and the subtraction in TD mode and using a\n      TD -> DI convert afterwards.  */\n   emit_insn (gen_extendddtd2 (temp, operands[1]));\n   temp = force_reg (TDmode, temp);\n@@ -3624,11 +3855,11 @@\n   rtx label2 = gen_label_rtx ();\n   rtx temp = gen_reg_rtx (TDmode);\n   REAL_VALUE_TYPE cmp, sub;\n-  \n+\n   operands[1] = force_reg (TDmode, operands[1]);\n   decimal_real_from_string (&cmp, \"9223372036854775808.0\");  /* 2^63 */\n   decimal_real_from_string (&sub, \"18446744073709551616.0\"); /* 2^64 */\n-  \n+\n   emit_insn (gen_cmptd (operands[1],\n \tCONST_DOUBLE_FROM_REAL_VALUE (cmp, TDmode)));\n   emit_jump_insn (gen_blt (label1));\n@@ -3644,7 +3875,7 @@\n })\n \n ;\n-; fixuns_trunc(sf|df)(si|di)2 and fix_trunc(sf|df)(si|di)2 \n+; fixuns_trunc(sf|df)(si|di)2 and fix_trunc(sf|df)(si|di)2\n ; instruction pattern(s).\n ;\n \n@@ -3657,11 +3888,11 @@\n   rtx label2 = gen_label_rtx ();\n   rtx temp = gen_reg_rtx (<BFP:MODE>mode);\n   REAL_VALUE_TYPE cmp, sub;\n-  \n+\n   operands[1] = force_reg (<BFP:MODE>mode, operands[1]);\n   real_2expN (&cmp, GET_MODE_BITSIZE(<GPR:MODE>mode) - 1, <BFP:MODE>mode);\n   real_2expN (&sub, GET_MODE_BITSIZE(<GPR:MODE>mode), <BFP:MODE>mode);\n-  \n+\n   emit_insn (gen_cmp<BFP:mode> (operands[1],\n \tCONST_DOUBLE_FROM_REAL_VALUE (cmp, <BFP:MODE>mode)));\n   emit_jump_insn (gen_blt (label1));\n@@ -3724,7 +3955,7 @@\n   \"TARGET_64BIT && TARGET_HARD_FLOAT && TARGET_HARD_DFP\"\n   \"cg<DFP:xde>tr\\t%0,%h2,%1\"\n   [(set_attr \"op_type\" \"RRF\")\n-   (set_attr \"type\"    \"ftoi\")])\n+   (set_attr \"type\"    \"ftoidfp\")])\n \n \n ;\n@@ -3751,7 +3982,7 @@\n   \"TARGET_64BIT && TARGET_HARD_FLOAT\"\n   \"c<xde>g<bt>r\\t%0,%1\"\n   [(set_attr \"op_type\" \"RRE\")\n-   (set_attr \"type\"    \"itof\" )])\n+   (set_attr \"type\"    \"itof<mode>\" )])\n \n ; cxfbr, cdfbr, cefbr\n (define_insn \"floatsi<mode>2\"\n@@ -3760,7 +3991,7 @@\n   \"TARGET_HARD_FLOAT\"\n   \"c<xde>fbr\\t%0,%1\"\n   [(set_attr \"op_type\" \"RRE\")\n-   (set_attr \"type\"   \"itof\" )])\n+   (set_attr \"type\"   \"itof<mode>\" )])\n \n \n ;\n@@ -3787,7 +4018,7 @@\n   \"TARGET_HARD_FLOAT\"\n   \"l<xde>xbr\\t%2,%1\\;l<xde>r\\t%0,%2\"\n   [(set_attr \"length\" \"6\")\n-   (set_attr \"type\"   \"ftrunctf\")])   \n+   (set_attr \"type\"   \"ftrunctf\")])\n \n ;\n ; trunctddd2 and truncddsd2 instruction pattern(s).\n@@ -3800,15 +4031,15 @@\n   \"TARGET_HARD_FLOAT && TARGET_HARD_DFP\"\n   \"ldxtr\\t%2,0,%1,0\\;ldr\\t%0,%2\"\n   [(set_attr \"length\"  \"6\")\n-   (set_attr \"type\"    \"ftrunctf\")])\n+   (set_attr \"type\"    \"ftruncdd\")])\n \n (define_insn \"truncddsd2\"\n   [(set (match_operand:SD 0 \"register_operand\" \"=f\")\n \t(float_truncate:SD (match_operand:DD 1 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT && TARGET_HARD_DFP\"\n   \"ledtr\\t%0,0,%1,0\"\n   [(set_attr \"op_type\" \"RRF\")\n-   (set_attr \"type\"    \"fsimptf\")])\n+   (set_attr \"type\"    \"ftruncsd\")])\n \n ;\n ; extend(sf|df)(df|tf)2 instruction pattern(s).\n@@ -4045,7 +4276,8 @@\n   \"@\n    algfr\\t%0,%2\n    algf\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+  [(set_attr \"op_type\"  \"RRE,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*adddi3_zero_cconly\"\n   [(set (reg CC_REGNUM)\n@@ -4057,7 +4289,8 @@\n   \"@\n    algfr\\t%0,%2\n    algf\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+  [(set_attr \"op_type\"  \"RRE,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*adddi3_zero\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n@@ -4068,7 +4301,8 @@\n   \"@\n    algfr\\t%0,%2\n    algf\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+  [(set_attr \"op_type\"  \"RRE,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n \n (define_insn_and_split \"*adddi3_31z\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=&d\")\n@@ -4171,7 +4405,14 @@\n    a<y>\\t%0,%2\n    a<g>si\\t%0,%c2\"\n   [(set_attr \"op_type\"  \"RR<E>,RI,RIL,RIL,RX<Y>,RXY,SIY\")\n-   (set_attr \"cpu_facility\" \"*,*,extimm,extimm,*,*,z10\")])\n+   (set_attr \"cpu_facility\" \"*,*,extimm,extimm,*,*,z10\")\n+   (set_attr \"z10prop\" \"z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1\")])\n \n ; alr, alfi, slfi, al, aly, algr, algfi, slgfi, alg, alsi, algsi\n (define_insn \"*add<mode>3_carry1_cc\"\n@@ -4190,7 +4431,13 @@\n    al<y>\\t%0,%2\n    al<g>si\\t%0,%c2\"\n   [(set_attr \"op_type\"      \"RR<E>,RIL,RIL,RX<Y>,RXY,SIY\")\n-   (set_attr \"cpu_facility\" \"*,extimm,extimm,*,*,z10\")])\n+   (set_attr \"cpu_facility\" \"*,extimm,extimm,*,*,z10\")\n+   (set_attr \"z10prop\" \"z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1\")])\n \n ; alr, al, aly, algr, alg\n (define_insn \"*add<mode>3_carry1_cconly\"\n@@ -4204,7 +4451,8 @@\n    al<g>r\\t%0,%2\n    al<g>\\t%0,%2\n    al<y>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")])\n+  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1\")])\n \n ; alr, alfi, slfi, al, aly, algr, algfi, slgfi, alg, alsi, algsi\n (define_insn \"*add<mode>3_carry2_cc\"\n@@ -4223,7 +4471,13 @@\n    al<y>\\t%0,%2\n    al<g>si\\t%0,%c2\"\n   [(set_attr \"op_type\"  \"RR<E>,RIL,RIL,RX<Y>,RXY,SIY\")\n-   (set_attr \"cpu_facility\" \"*,extimm,extimm,*,*,z10\")])\n+   (set_attr \"cpu_facility\" \"*,extimm,extimm,*,*,z10\")\n+   (set_attr \"z10prop\" \"z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1\")])\n \n ; alr, al, aly, algr, alg\n (define_insn \"*add<mode>3_carry2_cconly\"\n@@ -4237,7 +4491,8 @@\n    al<g>r\\t%0,%2\n    al<g>\\t%0,%2\n    al<y>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")])\n+  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1\")])\n \n ; alr, alfi, slfi, al, aly, algr, algfi, slgfi, alg, alsi, algsi\n (define_insn \"*add<mode>3_cc\"\n@@ -4256,7 +4511,13 @@\n    al<y>\\t%0,%2\n    al<g>si\\t%0,%c2\"\n   [(set_attr \"op_type\"  \"RR<E>,RIL,RIL,RX<Y>,RXY,SIY\")\n-   (set_attr \"cpu_facility\" \"*,extimm,extimm,*,*,z10\")])\n+   (set_attr \"cpu_facility\" \"*,extimm,extimm,*,*,z10\")\n+   (set_attr \"z10prop\" \"z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1\")])\n \n ; alr, al, aly, algr, alg\n (define_insn \"*add<mode>3_cconly\"\n@@ -4270,7 +4531,8 @@\n    al<g>r\\t%0,%2\n    al<g>\\t%0,%2\n    al<y>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")])\n+  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1\")])\n \n ; alr, al, aly, algr, alg\n (define_insn \"*add<mode>3_cconly2\"\n@@ -4283,7 +4545,8 @@\n    al<g>r\\t%0,%2\n    al<g>\\t%0,%2\n    al<y>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")])\n+  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1\")])\n \n ; ahi, afi, aghi, agfi, asi, agsi\n (define_insn \"*add<mode>3_imm_cc\"\n@@ -4303,7 +4566,8 @@\n    a<g>fi\\t%0,%2\n    a<g>si\\t%0,%c2\"\n   [(set_attr \"op_type\"      \"RI,RIL,SIY\")\n-   (set_attr \"cpu_facility\" \"*,extimm,z10\")])\n+   (set_attr \"cpu_facility\" \"*,extimm,z10\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1\")])\n \n ;\n ; add(tf|df|sf|td|dd)3 instruction pattern(s).\n@@ -4320,7 +4584,7 @@\n    a<xde><bt>r\\t%0,<op1>%2\n    a<xde>b\\t%0,%2\"\n   [(set_attr \"op_type\"  \"<RRer>,RXE\")\n-   (set_attr \"type\"     \"fsimp<bfp>\")])\n+   (set_attr \"type\"     \"fsimp<mode>\")])\n \n ; axbr, adbr, aebr, axb, adb, aeb, adtr, axtr\n (define_insn \"*add<mode>3_cc\"\n@@ -4335,7 +4599,7 @@\n    a<xde><bt>r\\t%0,<op1>%2\n    a<xde>b\\t%0,%2\"\n   [(set_attr \"op_type\"  \"<RRer>,RXE\")\n-   (set_attr \"type\"     \"fsimp<bfp>\")])\n+   (set_attr \"type\"     \"fsimp<mode>\")])\n \n ; axbr, adbr, aebr, axb, adb, aeb, adtr, axtr\n (define_insn \"*add<mode>3_cconly\"\n@@ -4349,7 +4613,7 @@\n    a<xde><bt>r\\t%0,<op1>%2\n    a<xde>b\\t%0,%2\"\n   [(set_attr \"op_type\"  \"<RRer>,RXE\")\n-   (set_attr \"type\"     \"fsimp<bfp>\")])\n+   (set_attr \"type\"     \"fsimp<mode>\")])\n \n \n ;;\n@@ -4406,7 +4670,8 @@\n   \"@\n    sgfr\\t%0,%2\n    sgf\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+  [(set_attr \"op_type\"  \"RRE,RXY\")\n+   (set_attr \"z10prop\" \"z10_c,*\")])\n \n (define_insn \"*subdi3_zero_cc\"\n   [(set (reg CC_REGNUM)\n@@ -4419,7 +4684,8 @@\n   \"@\n    slgfr\\t%0,%2\n    slgf\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+  [(set_attr \"op_type\"  \"RRE,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_c_E1,z10_super_E1\")])\n \n (define_insn \"*subdi3_zero_cconly\"\n   [(set (reg CC_REGNUM)\n@@ -4431,7 +4697,8 @@\n   \"@\n    slgfr\\t%0,%2\n    slgf\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+  [(set_attr \"op_type\"  \"RRE,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_c_E1,z10_super_E1\")])\n \n (define_insn \"*subdi3_zero\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n@@ -4442,7 +4709,8 @@\n   \"@\n    slgfr\\t%0,%2\n    slgf\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+  [(set_attr \"op_type\"  \"RRE,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_c_E1,z10_super_E1\")])\n \n (define_insn_and_split \"*subdi3_31z\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&d\")\n@@ -4539,7 +4807,8 @@\n    s<g>r\\t%0,%2\n    s<g>\\t%0,%2\n    s<y>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")])\n+  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_c_E1,z10_super_E1,z10_super_E1\")])\n \n ; slr, sl, sly, slgr, slg\n (define_insn \"*sub<mode>3_borrow_cc\"\n@@ -4554,7 +4823,8 @@\n    sl<g>r\\t%0,%2\n    sl<g>\\t%0,%2\n    sl<y>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")])\n+  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_c_E1,z10_super_E1,z10_super_E1\")])\n \n ; slr, sl, sly, slgr, slg\n (define_insn \"*sub<mode>3_borrow_cconly\"\n@@ -4568,7 +4838,8 @@\n    sl<g>r\\t%0,%2\n    sl<g>\\t%0,%2\n    sl<y>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")])\n+  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_c_E1,z10_super_E1,z10_super_E1\")])\n \n ; slr, sl, sly, slgr, slg\n (define_insn \"*sub<mode>3_cc\"\n@@ -4583,7 +4854,8 @@\n    sl<g>r\\t%0,%2\n    sl<g>\\t%0,%2\n    sl<y>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")])\n+  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_c_E1,z10_super_E1,z10_super_E1\")])\n \n ; slr, sl, sly, slgr, slg\n (define_insn \"*sub<mode>3_cc2\"\n@@ -4597,7 +4869,8 @@\n    sl<g>r\\t%0,%2\n    sl<g>\\t%0,%2\n    sl<y>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")])\n+  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_c_E1,z10_super_E1,z10_super_E1\")])\n \n ; slr, sl, sly, slgr, slg\n (define_insn \"*sub<mode>3_cconly\"\n@@ -4611,7 +4884,9 @@\n    sl<g>r\\t%0,%2\n    sl<g>\\t%0,%2\n    sl<y>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")])\n+  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_c_E1,z10_super_E1,z10_super_E1\")])\n+\n \n ; slr, sl, sly, slgr, slg\n (define_insn \"*sub<mode>3_cconly2\"\n@@ -4624,7 +4899,9 @@\n    sl<g>r\\t%0,%2\n    sl<g>\\t%0,%2\n    sl<y>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")])\n+  [(set_attr \"op_type\"  \"RR<E>,RX<Y>,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_c_E1,z10_super_E1,z10_super_E1\")])\n+\n \n ;\n ; sub(tf|df|sf|td|dd)3 instruction pattern(s).\n@@ -4641,7 +4918,7 @@\n    s<xde><bt>r\\t%0,<op1>%2\n    s<xde>b\\t%0,%2\"\n   [(set_attr \"op_type\"  \"<RRer>,RXE\")\n-   (set_attr \"type\"     \"fsimp<bfp>\")])\n+   (set_attr \"type\"     \"fsimp<mode>\")])\n \n ; sxbr, sdbr, sebr, sxb, sdb, seb, sxtr, sdtr\n (define_insn \"*sub<mode>3_cc\"\n@@ -4656,7 +4933,7 @@\n    s<xde><bt>r\\t%0,<op1>%2\n    s<xde>b\\t%0,%2\"\n   [(set_attr \"op_type\"  \"<RRer>,RXE\")\n-   (set_attr \"type\"     \"fsimp<bfp>\")])\n+   (set_attr \"type\"     \"fsimp<mode>\")])\n \n ; sxbr, sdbr, sebr, sxb, sdb, seb, sxtr, sdtr\n (define_insn \"*sub<mode>3_cconly\"\n@@ -4670,7 +4947,7 @@\n    s<xde><bt>r\\t%0,<op1>%2\n    s<xde>b\\t%0,%2\"\n   [(set_attr \"op_type\"  \"<RRer>,RXE\")\n-   (set_attr \"type\"     \"fsimp<bfp>\")])\n+   (set_attr \"type\"     \"fsimp<mode>\")])\n \n \n ;;\n@@ -4793,7 +5070,8 @@\n   \"@\n    slb<g>r\\t%0,%2\n    slb<g>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+  [(set_attr \"op_type\"  \"RRE,RXY\")\n+   (set_attr \"z10prop\" \"z10_c,*\")])\n \n ; slbr, slb, slbgr, slbg\n (define_insn \"*sub<mode>3_slb\"\n@@ -4806,17 +5084,18 @@\n   \"@\n    slb<g>r\\t%0,%2\n    slb<g>\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+  [(set_attr \"op_type\"  \"RRE,RXY\")\n+   (set_attr \"z10prop\" \"z10_c,*\")])\n \n (define_expand \"add<mode>cc\"\n   [(match_operand:GPR 0 \"register_operand\" \"\")\n    (match_operand 1 \"comparison_operator\" \"\")\n    (match_operand:GPR 2 \"register_operand\" \"\")\n    (match_operand:GPR 3 \"const_int_operand\" \"\")]\n   \"TARGET_CPU_ZARCH\"\n-  \"if (!s390_expand_addcc (GET_CODE (operands[1]), \n-\t\t\t   s390_compare_op0, s390_compare_op1, \n-\t\t\t   operands[0], operands[2], \n+  \"if (!s390_expand_addcc (GET_CODE (operands[1]),\n+\t\t\t   s390_compare_op0, s390_compare_op1,\n+\t\t\t   operands[0], operands[2],\n \t\t\t   operands[3])) FAIL; DONE;\")\n \n ;\n@@ -4872,7 +5151,7 @@\n     [(set (match_dup 0) (xor:SI (match_dup 0) (const_int 1)))\n      (clobber (reg:CC CC_REGNUM))])]\n   \"\"\n-{ \n+{\n   if (!s390_compare_emitted || GET_MODE (s390_compare_emitted) != CCZ1mode)\n     FAIL;\n   operands[1] = s390_emit_compare (NE, s390_compare_op0, s390_compare_op1);\n@@ -4881,7 +5160,7 @@\n \n (define_insn_and_split \"*sne\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(ne:SI (match_operand:CCZ1 1 \"register_operand\" \"0\") \n+\t(ne:SI (match_operand:CCZ1 1 \"register_operand\" \"0\")\n \t       (const_int 0)))\n    (clobber (reg:CC CC_REGNUM))]\n   \"\"\n@@ -4996,7 +5275,7 @@\n ; mul(tf|df|sf|td|dd)3 instruction pattern(s).\n ;\n \n-; mxbr mdbr, meebr, mxb, mxb, meeb, mdtr, mxtr\n+; mxbr, mdbr, meebr, mxb, mxb, meeb, mdtr, mxtr\n (define_insn \"mul<mode>3\"\n   [(set (match_operand:FP 0 \"register_operand\"              \"=f,f\")\n         (mult:FP (match_operand:FP 1 \"nonimmediate_operand\" \"%<f0>,0\")\n@@ -5006,9 +5285,9 @@\n    m<xdee><bt>r\\t%0,<op1>%2\n    m<xdee>b\\t%0,%2\"\n   [(set_attr \"op_type\"  \"<RRer>,RXE\")\n-   (set_attr \"type\"     \"fmul<bfp>\")])\n+   (set_attr \"type\"     \"fmul<mode>\")])\n \n-; maxbr, madbr, maebr, maxb, madb, maeb\n+; madbr, maebr, maxb, madb, maeb\n (define_insn \"*fmadd<mode>\"\n   [(set (match_operand:DSF 0 \"register_operand\" \"=f,f\")\n \t(plus:DSF (mult:DSF (match_operand:DSF 1 \"register_operand\" \"%f,f\")\n@@ -5466,7 +5745,7 @@\n    d<xde><bt>r\\t%0,<op1>%2\n    d<xde>b\\t%0,%2\"\n   [(set_attr \"op_type\"  \"<RRer>,RXE\")\n-   (set_attr \"type\"     \"fdiv<bfp>\")])\n+   (set_attr \"type\"     \"fdiv<mode>\")])\n \n \n ;;\n@@ -5496,7 +5775,8 @@\n   \"@\n    ngr\\t%0,%2\n    ng\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+  [(set_attr \"op_type\"  \"RRE,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*anddi3_cconly\"\n   [(set (reg CC_REGNUM)\n@@ -5510,7 +5790,8 @@\n   \"@\n    ngr\\t%0,%2\n    ng\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+  [(set_attr \"op_type\"  \"RRE,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_E1, z10_super_E1\")])\n \n (define_insn \"*anddi3\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,d,d,d,d,AQ,Q\")\n@@ -5534,7 +5815,19 @@\n    #\n    #\"\n   [(set_attr \"op_type\" \"RRE,RXE,RI,RI,RI,RI,RIL,RIL,RRE,RXY,SI,SS\")\n-   (set_attr \"cpu_facility\" \"*,*,*,*,*,*,extimm,extimm,*,*,*,*\")])\n+   (set_attr \"cpu_facility\" \"*,*,*,*,*,*,extimm,extimm,*,*,*,*\")\n+   (set_attr \"z10prop\" \"*,\n+                        *,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        *,\n+                        *\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"s_operand\" \"\")\n@@ -5564,7 +5857,8 @@\n    nr\\t%0,%2\n    n\\t%0,%2\n    ny\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY\")])\n+  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*andsi3_cconly\"\n   [(set (reg CC_REGNUM)\n@@ -5580,7 +5874,8 @@\n    nr\\t%0,%2\n    n\\t%0,%2\n    ny\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY\")])\n+  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*andsi3_zarch\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,d,d,AQ,Q\")\n@@ -5601,7 +5896,17 @@\n    ny\\t%0,%2\n    #\n    #\"\n-  [(set_attr \"op_type\"  \"RRE,RXE,RI,RI,RIL,RR,RX,RXY,SI,SS\")])\n+  [(set_attr \"op_type\"  \"RRE,RXE,RI,RI,RIL,RR,RX,RXY,SI,SS\")\n+   (set_attr \"z10prop\" \"*,\n+                        *,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        *,\n+                        *\")])\n \n (define_insn \"*andsi3_esa\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,AQ,Q\")\n@@ -5614,7 +5919,9 @@\n    n\\t%0,%2\n    #\n    #\"\n-  [(set_attr \"op_type\"  \"RR,RX,SI,SS\")])\n+  [(set_attr \"op_type\"  \"RR,RX,SI,SS\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,*,*\")])\n+\n \n (define_split\n   [(set (match_operand:SI 0 \"s_operand\" \"\")\n@@ -5641,7 +5948,9 @@\n    nill\\t%0,%x2\n    #\n    #\"\n-  [(set_attr \"op_type\"  \"RR,RI,SI,SS\")])\n+  [(set_attr \"op_type\"  \"RR,RI,SI,SS\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,*,*\")\n+])\n \n (define_insn \"*andhi3_esa\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,AQ,Q\")\n@@ -5653,7 +5962,9 @@\n    nr\\t%0,%2\n    #\n    #\"\n-  [(set_attr \"op_type\"  \"RR,SI,SS\")])\n+  [(set_attr \"op_type\"  \"RR,SI,SS\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*,*\")\n+])\n \n (define_split\n   [(set (match_operand:HI 0 \"s_operand\" \"\")\n@@ -5681,7 +5992,8 @@\n    ni\\t%S0,%b2\n    niy\\t%S0,%b2\n    #\"\n-  [(set_attr \"op_type\"  \"RR,RI,SI,SIY,SS\")])\n+  [(set_attr \"op_type\"  \"RR,RI,SI,SIY,SS\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super,z10_super,*\")])\n \n (define_insn \"*andqi3_esa\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,Q,Q\")\n@@ -5693,7 +6005,8 @@\n    nr\\t%0,%2\n    ni\\t%S0,%b2\n    #\"\n-  [(set_attr \"op_type\"  \"RR,SI,SS\")])\n+  [(set_attr \"op_type\"  \"RR,SI,SS\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super,*\")])\n \n ;\n ; Block and (NC) patterns.\n@@ -5742,7 +6055,7 @@\n      (clobber (reg:CC CC_REGNUM))])]\n   \"s390_offset_p (operands[0], operands[3], operands[2])\n    && s390_offset_p (operands[1], operands[4], operands[2])\n-   && !s390_overlap_p (operands[0], operands[1], \n+   && !s390_overlap_p (operands[0], operands[1],\n                        INTVAL (operands[2]) + INTVAL (operands[5]))\n    && INTVAL (operands[2]) + INTVAL (operands[5]) <= 256\"\n   [(parallel\n@@ -5781,7 +6094,8 @@\n   \"@\n    ogr\\t%0,%2\n    og\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+  [(set_attr \"op_type\"  \"RRE,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*iordi3_cconly\"\n   [(set (reg CC_REGNUM)\n@@ -5793,7 +6107,8 @@\n   \"@\n    ogr\\t%0,%2\n    og\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+  [(set_attr \"op_type\"  \"RRE,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*iordi3\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,d,d,AQ,Q\")\n@@ -5814,7 +6129,17 @@\n    #\n    #\"\n   [(set_attr \"op_type\"  \"RI,RI,RI,RI,RIL,RIL,RRE,RXY,SI,SS\")\n-   (set_attr \"cpu_facility\" \"*,*,*,*,extimm,extimm,*,*,*,*\")])\n+   (set_attr \"cpu_facility\" \"*,*,*,*,extimm,extimm,*,*,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        *,\n+                        *\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"s_operand\" \"\")\n@@ -5843,7 +6168,8 @@\n    or\\t%0,%2\n    o\\t%0,%2\n    oy\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY\")])\n+  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*iorsi3_cconly\"\n   [(set (reg CC_REGNUM)\n@@ -5857,7 +6183,8 @@\n    or\\t%0,%2\n    o\\t%0,%2\n    oy\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY\")])\n+  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*iorsi3_zarch\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,AQ,Q\")\n@@ -5874,7 +6201,15 @@\n    oy\\t%0,%2\n    #\n    #\"\n-  [(set_attr \"op_type\"  \"RI,RI,RIL,RR,RX,RXY,SI,SS\")])\n+  [(set_attr \"op_type\"  \"RI,RI,RIL,RR,RX,RXY,SI,SS\")\n+   (set_attr \"z10prop\" \"z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        z10_super_E1,\n+                        *,\n+                        *\")])\n \n (define_insn \"*iorsi3_esa\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,AQ,Q\")\n@@ -5887,7 +6222,8 @@\n    o\\t%0,%2\n    #\n    #\"\n-  [(set_attr \"op_type\"  \"RR,RX,SI,SS\")])\n+  [(set_attr \"op_type\"  \"RR,RX,SI,SS\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,*,*\")])\n \n (define_split\n   [(set (match_operand:SI 0 \"s_operand\" \"\")\n@@ -5914,7 +6250,8 @@\n    oill\\t%0,%x2\n    #\n    #\"\n-  [(set_attr \"op_type\"  \"RR,RI,SI,SS\")])\n+  [(set_attr \"op_type\"  \"RR,RI,SI,SS\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,*,*\")])\n \n (define_insn \"*iorhi3_esa\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,AQ,Q\")\n@@ -5926,7 +6263,8 @@\n    or\\t%0,%2\n    #\n    #\"\n-  [(set_attr \"op_type\"  \"RR,SI,SS\")])\n+  [(set_attr \"op_type\"  \"RR,SI,SS\")\n+   (set_attr \"z10prop\" \"z10_super_E1,*,*\")])\n \n (define_split\n   [(set (match_operand:HI 0 \"s_operand\" \"\")\n@@ -5954,7 +6292,8 @@\n    oi\\t%S0,%b2\n    oiy\\t%S0,%b2\n    #\"\n-  [(set_attr \"op_type\"  \"RR,RI,SI,SIY,SS\")])\n+  [(set_attr \"op_type\"  \"RR,RI,SI,SIY,SS\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super,z10_super,*\")])\n \n (define_insn \"*iorqi3_esa\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,Q,Q\")\n@@ -5966,7 +6305,8 @@\n    or\\t%0,%2\n    oi\\t%S0,%b2\n    #\"\n-  [(set_attr \"op_type\"  \"RR,SI,SS\")])\n+  [(set_attr \"op_type\"  \"RR,SI,SS\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super,*\")])\n \n ;\n ; Block inclusive or (OC) patterns.\n@@ -6015,7 +6355,7 @@\n      (clobber (reg:CC CC_REGNUM))])]\n   \"s390_offset_p (operands[0], operands[3], operands[2])\n    && s390_offset_p (operands[1], operands[4], operands[2])\n-   && !s390_overlap_p (operands[0], operands[1], \n+   && !s390_overlap_p (operands[0], operands[1],\n                        INTVAL (operands[2]) + INTVAL (operands[5]))\n    && INTVAL (operands[2]) + INTVAL (operands[5]) <= 256\"\n   [(parallel\n@@ -6054,7 +6394,8 @@\n   \"@\n    xgr\\t%0,%2\n    xg\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+  [(set_attr \"op_type\"  \"RRE,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*xordi3_cconly\"\n   [(set (reg CC_REGNUM)\n@@ -6066,7 +6407,8 @@\n   \"@\n    xgr\\t%0,%2\n    xg\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")])\n+  [(set_attr \"op_type\"  \"RRE,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*xordi3\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,d,d,AQ,Q\")\n@@ -6082,7 +6424,8 @@\n    #\n    #\"\n   [(set_attr \"op_type\"  \"RIL,RIL,RRE,RXY,SI,SS\")\n-   (set_attr \"cpu_facility\" \"extimm,extimm,*,*,*,*\")])\n+   (set_attr \"cpu_facility\" \"extimm,extimm,*,*,*,*\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1,z10_super_E1,*,*\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"s_operand\" \"\")\n@@ -6111,7 +6454,8 @@\n    xr\\t%0,%2\n    x\\t%0,%2\n    xy\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY\")])\n+  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*xorsi3_cconly\"\n   [(set (reg CC_REGNUM)\n@@ -6125,7 +6469,8 @@\n    xr\\t%0,%2\n    x\\t%0,%2\n    xy\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY\")])\n+  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1,z10_super_E1\")])\n \n (define_insn \"*xorsi3\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,d,d,AQ,Q\")\n@@ -6140,7 +6485,8 @@\n    xy\\t%0,%2\n    #\n    #\"\n-  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY,SI,SS\")])\n+  [(set_attr \"op_type\"  \"RIL,RR,RX,RXY,SI,SS\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super_E1,z10_super_E1,*,*\")])\n \n (define_split\n   [(set (match_operand:SI 0 \"s_operand\" \"\")\n@@ -6167,7 +6513,8 @@\n    xr\\t%0,%2\n    #\n    #\"\n-  [(set_attr \"op_type\"  \"RIL,RR,SI,SS\")])\n+  [(set_attr \"op_type\"  \"RIL,RR,SI,SS\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,*,*\")])\n \n (define_split\n   [(set (match_operand:HI 0 \"s_operand\" \"\")\n@@ -6195,7 +6542,9 @@\n    xi\\t%S0,%b2\n    xiy\\t%S0,%b2\n    #\"\n-  [(set_attr \"op_type\"  \"RIL,RR,SI,SIY,SS\")])\n+  [(set_attr \"op_type\"  \"RIL,RR,SI,SIY,SS\")\n+   (set_attr \"z10prop\" \"z10_super_E1,z10_super_E1,z10_super,z10_super,*\")])\n+\n \n ;\n ; Block exclusive or (XC) patterns.\n@@ -6244,7 +6593,7 @@\n      (clobber (reg:CC CC_REGNUM))])]\n   \"s390_offset_p (operands[0], operands[3], operands[2])\n    && s390_offset_p (operands[1], operands[4], operands[2])\n-   && !s390_overlap_p (operands[0], operands[1], \n+   && !s390_overlap_p (operands[0], operands[1],\n                        INTVAL (operands[2]) + INTVAL (operands[5]))\n    && INTVAL (operands[2]) + INTVAL (operands[5]) <= 256\"\n   [(parallel\n@@ -6316,7 +6665,7 @@\n   \"TARGET_64BIT && s390_match_ccmode (insn, CCAmode)\"\n   \"lcgfr\\t%0,%1\"\n   [(set_attr \"op_type\"  \"RRE\")])\n-  \n+\n (define_insn \"*negdi2_sign\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n         (neg:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))))\n@@ -6334,7 +6683,8 @@\n         (neg:GPR (match_dup 1)))]\n   \"s390_match_ccmode (insn, CCAmode)\"\n   \"lc<g>r\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RR<E>\")])\n+  [(set_attr \"op_type\"  \"RR<E>\")\n+   (set_attr \"z10prop\" \"z10_super_c_E1\")])\n \n ; lcr, lcgr\n (define_insn \"*neg<mode>2_cconly\"\n@@ -6344,7 +6694,8 @@\n    (clobber (match_scratch:GPR 0 \"=d\"))]\n   \"s390_match_ccmode (insn, CCAmode)\"\n   \"lc<g>r\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RR<E>\")])\n+  [(set_attr \"op_type\"  \"RR<E>\")\n+   (set_attr \"z10prop\" \"z10_super_c_E1\")])\n \n ; lcr, lcgr\n (define_insn \"*neg<mode>2\"\n@@ -6353,7 +6704,8 @@\n    (clobber (reg:CC CC_REGNUM))]\n   \"\"\n   \"lc<g>r\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RR<E>\")])\n+  [(set_attr \"op_type\"  \"RR<E>\")\n+   (set_attr \"z10prop\" \"z10_super_c_E1\")])\n \n (define_insn_and_split \"*negdi2_31\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n@@ -6425,7 +6777,7 @@\n   \"TARGET_HARD_FLOAT && TARGET_DFP\"\n   \"lcdfr\\t%0,%1\"\n   [(set_attr \"op_type\"  \"RRE\")\n-   (set_attr \"type\"     \"fsimp<bfp>\")])\n+   (set_attr \"type\"     \"fsimp<mode>\")])\n \n ; lcxbr, lcdbr, lcebr\n (define_insn \"*neg<mode>2\"\n@@ -6475,17 +6827,19 @@\n         (abs:GPR (match_dup 1)))]\n   \"s390_match_ccmode (insn, CCAmode)\"\n   \"lp<g>r\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RR<E>\")])\n+  [(set_attr \"op_type\"  \"RR<E>\")\n+   (set_attr \"z10prop\" \"z10_c\")])\n \n-; lpr, lpgr  \n+; lpr, lpgr\n (define_insn \"*abs<mode>2_cconly\"\n   [(set (reg CC_REGNUM)\n         (compare (abs:GPR (match_operand:GPR 1 \"register_operand\" \"d\"))\n                  (const_int 0)))\n    (clobber (match_scratch:GPR 0 \"=d\"))]\n   \"s390_match_ccmode (insn, CCAmode)\"\n   \"lp<g>r\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RR<E>\")])\n+  [(set_attr \"op_type\"  \"RR<E>\")\n+   (set_attr \"z10prop\" \"z10_c\")])\n \n ; lpr, lpgr\n (define_insn \"abs<mode>2\"\n@@ -6494,7 +6848,8 @@\n    (clobber (reg:CC CC_REGNUM))]\n   \"\"\n   \"lp<g>r\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RR<E>\")])\n+  [(set_attr \"op_type\"  \"RR<E>\")\n+   (set_attr \"z10prop\" \"z10_c\")])\n \n ;\n ; abs(df|sf)2 instruction pattern(s).\n@@ -6538,7 +6893,7 @@\n   \"TARGET_HARD_FLOAT && TARGET_DFP\"\n   \"lpdfr\\t%0,%1\"\n   [(set_attr \"op_type\"  \"RRE\")\n-   (set_attr \"type\"     \"fsimp<bfp>\")])\n+   (set_attr \"type\"     \"fsimp<mode>\")])\n \n ; lpxbr, lpdbr, lpebr\n (define_insn \"*abs<mode>2\"\n@@ -6570,7 +6925,7 @@\n   \"TARGET_64BIT && s390_match_ccmode (insn, CCAmode)\"\n   \"lngfr\\t%0,%1\"\n   [(set_attr \"op_type\"  \"RRE\")])\n- \n+\n (define_insn \"*negabsdi2_sign\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n \t(neg:DI (abs:DI (sign_extend:DI\n@@ -6589,7 +6944,8 @@\n         (neg:GPR (abs:GPR (match_dup 1))))]\n   \"s390_match_ccmode (insn, CCAmode)\"\n   \"ln<g>r\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RR<E>\")])\n+  [(set_attr \"op_type\"  \"RR<E>\")\n+   (set_attr \"z10prop\" \"z10_c\")])\n \n ; lnr, lngr\n (define_insn \"*negabs<mode>2_cconly\"\n@@ -6599,7 +6955,8 @@\n    (clobber (match_scratch:GPR 0 \"=d\"))]\n   \"s390_match_ccmode (insn, CCAmode)\"\n   \"ln<g>r\\t%0,%1\"\n-  [(set_attr \"op_type\"  \"RR<E>\")])\n+  [(set_attr \"op_type\"  \"RR<E>\")\n+   (set_attr \"z10prop\" \"z10_c\")])\n \n ; lnr, lngr\n (define_insn \"*negabs<mode>2\"\n@@ -6608,7 +6965,8 @@\n    (clobber (reg:CC CC_REGNUM))]\n   \"\"\n   \"ln<g>r\\t%0,%1\"\n-  [(set_attr \"op_type\" \"RR<E>\")])\n+  [(set_attr \"op_type\" \"RR<E>\")\n+   (set_attr \"z10prop\" \"z10_c\")])\n \n ;\n ; Floating point\n@@ -6644,7 +7002,7 @@\n   \"TARGET_HARD_FLOAT && TARGET_DFP\"\n   \"lndfr\\t%0,%1\"\n   [(set_attr \"op_type\"  \"RRE\")\n-   (set_attr \"type\"     \"fsimp<bfp>\")])\n+   (set_attr \"type\"     \"fsimp<mode>\")])\n \n ; lnxbr, lndbr, lnebr\n (define_insn \"*negabs<mode>2\"\n@@ -6664,12 +7022,12 @@\n (define_insn \"copysign<mode>3\"\n   [(set (match_operand:FP 0 \"register_operand\" \"=f\")\n \t(unspec:FP [(match_operand:FP 1 \"register_operand\" \"<fT0>\")\n-\t\t    (match_operand:FP 2 \"register_operand\" \"f\")] \n+\t\t    (match_operand:FP 2 \"register_operand\" \"f\")]\n \t\t    UNSPEC_COPYSIGN))]\n   \"TARGET_HARD_FLOAT && TARGET_DFP\"\n   \"cpsdr\\t%0,%2,%1\"\n   [(set_attr \"op_type\"  \"RRF\")\n-   (set_attr \"type\"     \"fsimp<bfp>\")])\n+   (set_attr \"type\"     \"fsimp<mode>\")])\n \n ;;\n ;;- Square root instructions.\n@@ -6679,7 +7037,7 @@\n ; sqrt(df|sf)2 instruction pattern(s).\n ;\n \n-; sqxbr, sqdbr, sqebr, sqxb, sqdb, sqeb\n+; sqxbr, sqdbr, sqebr, sqdb, sqeb\n (define_insn \"sqrt<mode>2\"\n   [(set (match_operand:BFP 0 \"register_operand\" \"=f,f\")\n \t(sqrt:BFP (match_operand:BFP 1 \"general_operand\" \"f,<Rf>\")))]\n@@ -6726,7 +7084,7 @@\n \n   emit_insn (gen_clztidi2 (wide_reg, operands[1], msb));\n \n-  insn = emit_move_insn (operands[0], gen_highpart (DImode, wide_reg));  \n+  insn = emit_move_insn (operands[0], gen_highpart (DImode, wide_reg));\n   set_unique_reg_note (insn, REG_EQUAL, clz_equal);\n \n   DONE;\n@@ -6735,16 +7093,16 @@\n (define_insn \"clztidi2\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=d\")\n \t(ior:TI\n-\t  (ashift:TI \n-            (zero_extend:TI \n+\t  (ashift:TI\n+            (zero_extend:TI\n    \t      (xor:DI (match_operand:DI 1 \"register_operand\" \"d\")\n                       (lshiftrt (match_operand:DI 2 \"const_int_operand\" \"\")\n \t\t\t\t(subreg:SI (clz:DI (match_dup 1)) 4))))\n-\t    \n+\n \t    (const_int 64))\n           (zero_extend:TI (clz:DI (match_dup 1)))))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"(unsigned HOST_WIDE_INT) INTVAL (operands[2]) \n+  \"(unsigned HOST_WIDE_INT) INTVAL (operands[2])\n    == (unsigned HOST_WIDE_INT) 1 << 63\n    && TARGET_EXTIMM && TARGET_64BIT\"\n   \"flogr\\t%0,%1\"\n@@ -6767,7 +7125,8 @@\n   \"TARGET_CPU_ZARCH\"\n   \"rll<g>\\t%0,%1,%Y2\"\n   [(set_attr \"op_type\"  \"RSE\")\n-   (set_attr \"atype\"    \"reg\")])\n+   (set_attr \"atype\"    \"reg\")\n+   (set_attr \"z10prop\" \"z10_super_E1\")])\n \n ; rll, rllg\n (define_insn \"*rotl<mode>3_and\"\n@@ -6778,7 +7137,8 @@\n   \"TARGET_CPU_ZARCH && (INTVAL (operands[3]) & 63) == 63\"\n   \"rll<g>\\t%0,%1,%Y2\"\n   [(set_attr \"op_type\"  \"RSE\")\n-   (set_attr \"atype\"    \"reg\")])\n+   (set_attr \"atype\"    \"reg\")\n+   (set_attr \"z10prop\" \"z10_super_E1\")])\n \n \n ;;\n@@ -6814,7 +7174,8 @@\n   \"\"\n   \"s<lr>l<g>\\t%0,<1>%Y2\"\n   [(set_attr \"op_type\"  \"RS<E>\")\n-   (set_attr \"atype\"    \"reg\")])\n+   (set_attr \"atype\"    \"reg\")\n+   (set_attr \"z10prop\" \"z10_super_E1\")])\n \n ; sldl, srdl\n (define_insn \"*<shift>di3_31_and\"\n@@ -6836,7 +7197,8 @@\n   \"(INTVAL (operands[3]) & 63) == 63\"\n   \"s<lr>l<g>\\t%0,<1>%Y2\"\n   [(set_attr \"op_type\"  \"RS<E>\")\n-   (set_attr \"atype\"    \"reg\")])\n+   (set_attr \"atype\"    \"reg\")\n+   (set_attr \"z10prop\" \"z10_super_E1\")])\n \n ;\n ; ashr(di|si)3 instruction pattern(s).\n@@ -6895,7 +7257,8 @@\n   \"s390_match_ccmode(insn, CCSmode)\"\n   \"sra<g>\\t%0,<1>%Y2\"\n   [(set_attr \"op_type\"  \"RS<E>\")\n-   (set_attr \"atype\"    \"reg\")])\n+   (set_attr \"atype\"    \"reg\")\n+   (set_attr \"z10prop\" \"z10_super_E1\")])\n \n ; sra, srag\n (define_insn \"*ashr<mode>3_cconly\"\n@@ -6907,7 +7270,8 @@\n   \"s390_match_ccmode(insn, CCSmode)\"\n   \"sra<g>\\t%0,<1>%Y2\"\n   [(set_attr \"op_type\"  \"RS<E>\")\n-   (set_attr \"atype\"    \"reg\")])\n+   (set_attr \"atype\"    \"reg\")\n+   (set_attr \"z10prop\" \"z10_super_E1\")])\n \n ; sra, srag\n (define_insn \"*ashr<mode>3\"\n@@ -6918,7 +7282,8 @@\n   \"\"\n   \"sra<g>\\t%0,<1>%Y2\"\n   [(set_attr \"op_type\"  \"RS<E>\")\n-   (set_attr \"atype\"    \"reg\")])\n+   (set_attr \"atype\"    \"reg\")\n+   (set_attr \"z10prop\" \"z10_super_E1\")])\n \n \n ; shift pattern with implicit ANDs\n@@ -6973,7 +7338,8 @@\n   \"s390_match_ccmode(insn, CCSmode) && (INTVAL (operands[3]) & 63) == 63\"\n   \"sra<g>\\t%0,<1>%Y2\"\n   [(set_attr \"op_type\"  \"RS<E>\")\n-   (set_attr \"atype\"    \"reg\")])\n+   (set_attr \"atype\"    \"reg\")\n+   (set_attr \"z10prop\" \"z10_super_E1\")])\n \n ; sra, srag\n (define_insn \"*ashr<mode>3_cconly_and\"\n@@ -6986,7 +7352,8 @@\n   \"s390_match_ccmode(insn, CCSmode) && (INTVAL (operands[3]) & 63) == 63\"\n   \"sra<g>\\t%0,<1>%Y2\"\n   [(set_attr \"op_type\"  \"RS<E>\")\n-   (set_attr \"atype\"    \"reg\")])\n+   (set_attr \"atype\"    \"reg\")\n+   (set_attr \"z10prop\" \"z10_super_E1\")])\n \n ; sra, srag\n (define_insn \"*ashr<mode>3_and\"\n@@ -6998,7 +7365,8 @@\n   \"(INTVAL (operands[3]) & 63) == 63\"\n   \"sra<g>\\t%0,<1>%Y2\"\n   [(set_attr \"op_type\"  \"RS<E>\")\n-   (set_attr \"atype\"    \"reg\")])\n+   (set_attr \"atype\"    \"reg\")\n+   (set_attr \"z10prop\" \"z10_super_E1\")])\n \n \n ;;\n@@ -7158,7 +7526,7 @@\n   \"\"\n {\n   if (operands[1] != const0_rtx) FAIL;\n-  operands[0] = s390_emit_compare (GET_CODE (operands[0]), \n+  operands[0] = s390_emit_compare (GET_CODE (operands[0]),\n                                    s390_compare_op0, s390_compare_op1);\n })\n \n@@ -7181,7 +7549,8 @@\n    c<g>rt%C0\\t%1,%2\n    c<g>it%C0\\t%1,%h2\"\n   [(set_attr \"op_type\" \"RRF,RIE\")\n-   (set_attr \"type\"    \"branch\")])\n+   (set_attr \"type\"    \"branch\")\n+   (set_attr \"z10prop\" \"z10_c,*\")])\n \n ; clrt, clgrt, clfit, clgit\n (define_insn \"*cmp_and_trap_unsigned_int<mode>\"\n@@ -7194,7 +7563,8 @@\n    cl<g>rt%C0\\t%1,%2\n    cl<gf>it%C0\\t%1,%x2\"\n   [(set_attr \"op_type\" \"RRF,RIE\")\n-   (set_attr \"type\"    \"branch\")])\n+   (set_attr \"type\"    \"branch\")\n+   (set_attr \"z10prop\" \"z10_c,*\")])\n \n ;;\n ;;- Loop instructions.\n@@ -7256,6 +7626,9 @@\n                            (pc)))]\n   \"\"\n   [(set_attr \"op_type\"  \"RI\")\n+   ; Strictly speaking, the z10 properties are valid for brct only, however, it does not\n+   ; hurt us in the (rare) case of ahi.\n+   (set_attr \"z10prop\"  \"z10_super\")\n    (set_attr \"type\"  \"branch\")\n    (set (attr \"length\")\n         (if_then_else (lt (abs (minus (pc) (match_dup 0))) (const_int 60000))\n@@ -7295,6 +7668,9 @@\n                            (pc)))]\n   \"\"\n   [(set_attr \"op_type\"  \"RI\")\n+   ; Strictly speaking, the z10 properties are valid for brct only, however, it does not\n+   ; hurt us in the (rare) case of ahi.\n+   (set_attr \"z10prop\"  \"z10_super\")\n    (set_attr \"type\"  \"branch\")\n    (set (attr \"length\")\n         (if_then_else (eq (symbol_ref \"flag_pic\") (const_int 0))\n@@ -7361,6 +7737,9 @@\n                            (pc)))]\n   \"\"\n   [(set_attr \"op_type\"  \"RI\")\n+   ; Strictly speaking, the z10 properties are valid for brct only, however, it does not\n+   ; hurt us in the (rare) case of ahi.\n+   (set_attr \"z10prop\"  \"z10_super\")\n    (set_attr \"type\"  \"branch\")\n    (set (attr \"length\")\n         (if_then_else (lt (abs (minus (pc) (match_dup 0))) (const_int 60000))\n@@ -7427,7 +7806,8 @@\n         (if_then_else (match_operand 0 \"register_operand\" \"\")\n                       (const_string \"RR\") (const_string \"RX\")))\n    (set_attr \"type\"  \"branch\")\n-   (set_attr \"atype\" \"agen\")])\n+   (set_attr \"atype\" \"agen\")\n+   (set_attr \"z10prop\" \"z10_super\")])\n \n ;\n ; casesi instruction pattern(s).\n@@ -7770,7 +8150,8 @@\n \t\t   UNSPEC_TLS_LOAD))]\n   \"TARGET_64BIT\"\n   \"lg\\t%0,%1%J2\"\n-  [(set_attr \"op_type\" \"RXE\")])\n+  [(set_attr \"op_type\" \"RXE\")\n+   (set_attr \"z10prop\" \"z10_fwd_A3\")])\n \n (define_insn \"*tls_load_31\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n@@ -7781,7 +8162,8 @@\n   \"@\n    l\\t%0,%1%J2\n    ly\\t%0,%1%J2\"\n-  [(set_attr \"op_type\" \"RX,RXY\")])\n+  [(set_attr \"op_type\" \"RX,RXY\")\n+   (set_attr \"z10prop\" \"z10_fwd_A3,z10_fwd_A3\")])\n \n (define_insn \"*bras_tls\"\n   [(set (match_operand 0 \"\" \"\")\n@@ -7851,6 +8233,8 @@\n   \"\"\n   \"bcr\\t15,0\"\n   [(set_attr \"op_type\" \"RR\")])\n+; Although bcr is superscalar on Z10, this variant will never become part of\n+; an execution group.\n \n ;\n ; compare and swap patterns.\n@@ -7883,7 +8267,7 @@\n      (set (reg:CCZ1 CC_REGNUM)\n \t  (compare:CCZ1 (match_dup 1) (match_dup 2)))])]\n   \"\"\n-  \"s390_expand_cs_hqi (<MODE>mode, operands[0], operands[1], \n+  \"s390_expand_cs_hqi (<MODE>mode, operands[0], operands[1],\n \t\t       operands[2], operands[3]); DONE;\")\n \n (define_expand \"sync_compare_and_swap_cc<mode>\"\n@@ -7936,7 +8320,7 @@\n \t  UNSPECV_CAS))\n    (set (reg:CCZ1 CC_REGNUM)\n \t(compare:CCZ1 (match_dup 1) (match_dup 2)))]\n-  \"\" \n+  \"\"\n   \"cs<g>\\t%0,%3,%S1\"\n   [(set_attr \"op_type\" \"RS<E>\")\n    (set_attr \"type\"   \"sem\")])\n@@ -7951,15 +8335,15 @@\n    (match_operand:HQI 1 \"memory_operand\")\n    (match_operand:HQI 2 \"general_operand\")]\n   \"\"\n-  \"s390_expand_atomic (<MODE>mode, SET, operands[0], operands[1], \n+  \"s390_expand_atomic (<MODE>mode, SET, operands[0], operands[1],\n \t\t       operands[2], false); DONE;\")\n \n (define_expand \"sync_<atomic><mode>\"\n   [(set (match_operand:HQI 0 \"memory_operand\")\n \t(ATOMIC:HQI (match_dup 0)\n \t\t    (match_operand:HQI 1 \"general_operand\")))]\n   \"\"\n-  \"s390_expand_atomic (<MODE>mode, <CODE>, NULL_RTX, operands[0], \n+  \"s390_expand_atomic (<MODE>mode, <CODE>, NULL_RTX, operands[0],\n \t\t       operands[1], false); DONE;\")\n \n (define_expand \"sync_old_<atomic><mode>\"\n@@ -7969,16 +8353,16 @@\n \t(ATOMIC:HQI (match_dup 1)\n \t\t    (match_operand:HQI 2 \"general_operand\")))]\n   \"\"\n-  \"s390_expand_atomic (<MODE>mode, <CODE>, operands[0], operands[1], \n+  \"s390_expand_atomic (<MODE>mode, <CODE>, operands[0], operands[1],\n \t\t       operands[2], false); DONE;\")\n \n (define_expand \"sync_new_<atomic><mode>\"\n   [(set (match_operand:HQI 0 \"register_operand\")\n \t(ATOMIC:HQI (match_operand:HQI 1 \"memory_operand\")\n-\t\t    (match_operand:HQI 2 \"general_operand\"))) \n+\t\t    (match_operand:HQI 2 \"general_operand\")))\n    (set (match_dup 1) (ATOMIC:HQI (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"s390_expand_atomic (<MODE>mode, <CODE>, operands[0], operands[1], \n+  \"s390_expand_atomic (<MODE>mode, <CODE>, operands[0], operands[1],\n \t\t       operands[2], true); DONE;\")\n \n ;;\n@@ -8090,7 +8474,7 @@\n \n   if (TARGET_BACKCHAIN)\n     temp = force_reg (Pmode, operand_subword (operands[1], 0, 0, mode));\n-    \n+\n   emit_move_insn (base, operand_subword (operands[1], 2, 0, mode));\n   emit_move_insn (operands[0], operand_subword (operands[1], 1, 0, mode));\n \n@@ -8178,7 +8562,8 @@\n   \"TARGET_CPU_ZARCH && GET_MODE (operands[0]) == Pmode\"\n   \"larl\\t%0,%1\"\n   [(set_attr \"op_type\" \"RIL\")\n-   (set_attr \"type\"    \"larl\")])\n+   (set_attr \"type\"    \"larl\")\n+   (set_attr \"z10prop\" \"z10_super_A1\")])\n \n (define_insn \"main_pool\"\n   [(set (match_operand 0 \"register_operand\" \"=a\")\n@@ -8187,7 +8572,7 @@\n {\n   gcc_unreachable ();\n }\n-  [(set (attr \"type\") \n+  [(set (attr \"type\")\n         (if_then_else (ne (symbol_ref \"TARGET_CPU_ZARCH\") (const_int 0))\n                       (const_string \"larl\") (const_string \"la\")))])\n \n@@ -8205,7 +8590,8 @@\n   \"TARGET_CPU_ZARCH && GET_MODE (operands[0]) == Pmode\"\n   \"larl\\t%0,%1\"\n   [(set_attr \"op_type\" \"RIL\")\n-   (set_attr \"type\"    \"larl\")])\n+   (set_attr \"type\"    \"larl\")\n+   (set_attr \"z10prop\" \"z10_super_A1\")])\n \n (define_insn \"pool\"\n   [(unspec_volatile [(match_operand 0 \"const_int_operand\" \"n\")] UNSPECV_POOL)]\n@@ -8366,6 +8752,7 @@\n      instruction.  */\n \n   return \"\";\n-\n-} [(set_attr \"type\" \"load,larl\")\n-   (set_attr \"op_type\" \"RXY,RIL\")])\n+}\n+  [(set_attr \"type\" \"load,larl\")\n+   (set_attr \"op_type\" \"RXY,RIL\")\n+   (set_attr \"z10prop\" \"z10_super\")])"}]}