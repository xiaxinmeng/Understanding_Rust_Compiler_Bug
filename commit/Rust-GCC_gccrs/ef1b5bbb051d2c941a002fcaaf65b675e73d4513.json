{"sha": "ef1b5bbb051d2c941a002fcaaf65b675e73d4513", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYxYjViYmIwNTFkMmM5NDFhMDAyZmNhYWY2NWI2NzVlNzNkNDUxMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2003-10-08T08:26:10Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2003-10-08T08:26:10Z"}, "message": "mips.h (EXTRA_CONSTRAINT): Add 'W' constraint.\n\n\t* config/mips/mips.h (EXTRA_CONSTRAINT): Add 'W' constraint.\n\t(EXTRA_MEMORY_CONSTRAINT): Define.\n\t(CAN_ELIMINATE): Remove lwu workaround.\n\t* config/mips/mips.md (*zero_extendsidi2_mem): Enable for mips16 too.\n\tUse a 'W' constraint for the source operand.\n\nFrom-SVN: r72221", "tree": {"sha": "fb056209921d6b340351df196368922951d622c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb056209921d6b340351df196368922951d622c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef1b5bbb051d2c941a002fcaaf65b675e73d4513", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef1b5bbb051d2c941a002fcaaf65b675e73d4513", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef1b5bbb051d2c941a002fcaaf65b675e73d4513", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef1b5bbb051d2c941a002fcaaf65b675e73d4513/comments", "author": null, "committer": null, "parents": [{"sha": "dcc3fcf29258eb75d78c0275e26349c783ef50c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcc3fcf29258eb75d78c0275e26349c783ef50c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcc3fcf29258eb75d78c0275e26349c783ef50c4"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "b2344790fa0f5b2703d39323a99fb9d9b2688f5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1b5bbb051d2c941a002fcaaf65b675e73d4513/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1b5bbb051d2c941a002fcaaf65b675e73d4513/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef1b5bbb051d2c941a002fcaaf65b675e73d4513", "patch": "@@ -1,3 +1,11 @@\n+2003-10-08  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.h (EXTRA_CONSTRAINT): Add 'W' constraint.\n+\t(EXTRA_MEMORY_CONSTRAINT): Define.\n+\t(CAN_ELIMINATE): Remove lwu workaround.\n+\t* config/mips/mips.md (*zero_extendsidi2_mem): Enable for mips16 too.\n+\tUse a 'W' constraint for the source operand.\n+\n 2003-10-08  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* genopinit.c (main): Output code to declare undefined"}, {"sha": "5ea19a821a09041e1ebd6833c2d80c9814ff7758", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1b5bbb051d2c941a002fcaaf65b675e73d4513/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1b5bbb051d2c941a002fcaaf65b675e73d4513/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=ef1b5bbb051d2c941a002fcaaf65b675e73d4513", "patch": "@@ -2035,7 +2035,11 @@ extern enum reg_class mips_char_to_class[256];\n \t constraint has often been used in linux and glibc code.\n    `S' is for legitimate constant call addresses.\n    `T' is for constant move_operands that cannot be safely loaded into $25.\n-   `U' is for constant move_operands that can be safely loaded into $25.  */\n+   `U' is for constant move_operands that can be safely loaded into $25.\n+   `W' is for memory references that are based on a member of BASE_REG_CLASS.\n+\t This is true for all non-mips16 references (although it can somtimes\n+\t be indirect if !TARGET_EXPLICIT_RELOCS).  For mips16, it excludes\n+\t stack and constant-pool references.  */\n \n #define EXTRA_CONSTRAINT(OP,CODE)\t\t\t\t\t\\\n   (((CODE) == 'Q')\t  ? const_arith_operand (OP, VOIDmode)\t\t\\\n@@ -2049,8 +2053,16 @@ extern enum reg_class mips_char_to_class[256];\n    : ((CODE) == 'U')\t  ? (CONSTANT_P (OP)\t\t\t\t\\\n \t\t\t     && move_operand (OP, VOIDmode)\t\t\\\n \t\t\t     && !DANGEROUS_FOR_LA25_P (OP))\t\t\\\n+   : ((CODE) == 'W')\t  ? (GET_CODE (OP) == MEM\t\t\t\\\n+\t\t\t     && memory_operand (OP, VOIDmode)\t\t\\\n+\t\t\t     && (!TARGET_MIPS16\t\t\t\t\\\n+\t\t\t\t || (!stack_operand (OP, VOIDmode)\t\\\n+\t\t\t\t     && !CONSTANT_P (XEXP (OP, 0)))))\t\\\n    : FALSE)\n \n+/* Say which of the above are memory constraints.  */\n+#define EXTRA_MEMORY_CONSTRAINT(C, STR) ((C) == 'R' || (C) == 'W')\n+\n /* Given an rtx X being reloaded into a reg required to be\n    in class CLASS, return the class of reg to actually use.\n    In general this is just CLASS; but on some machines\n@@ -2150,15 +2162,10 @@ extern enum reg_class mips_char_to_class[256];\n    In mips16 mode, we need a frame pointer for a large frame; otherwise,\n    reload may be unable to compute the address of a local variable,\n    since there is no way to add a large constant to the stack pointer\n-   without using a temporary register.\n-\n-   Also, for some mips16 instructions (eg lwu), we can't eliminate the\n-   frame pointer for the stack pointer.  These instructions are\n-   only generated in TARGET_64BIT mode.  */\n+   without using a temporary register.  */\n #define CAN_ELIMINATE(FROM, TO)\t\t\t\t\t\t\\\n   ((TO) == HARD_FRAME_POINTER_REGNUM \t\t\t\t        \\\n    || ((TO) == STACK_POINTER_REGNUM && !frame_pointer_needed\t\t\\\n-       && !(TARGET_MIPS16 && TARGET_64BIT)\t\t\t\t\\\n        && (!TARGET_MIPS16\t\t\t\t\t\t\\\n \t   || compute_frame_size (get_frame_size ()) < 32768)))\n "}, {"sha": "179d217fbe0d342160bc3b37386fa13df8c9c7fe", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1b5bbb051d2c941a002fcaaf65b675e73d4513/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1b5bbb051d2c941a002fcaaf65b675e73d4513/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=ef1b5bbb051d2c941a002fcaaf65b675e73d4513", "patch": "@@ -3292,8 +3292,8 @@ dsrl\\t%3,%3,1\\n\\\n \n (define_insn \"*zero_extendsidi2_mem\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (zero_extend:DI (match_operand:SI 1 \"memory_operand\" \"m\")))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n+        (zero_extend:DI (match_operand:SI 1 \"memory_operand\" \"W\")))]\n+  \"TARGET_64BIT\"\n   \"lwu\\t%0,%1\"\n   [(set_attr \"type\"     \"load\")\n    (set_attr \"mode\"     \"DI\")])"}]}