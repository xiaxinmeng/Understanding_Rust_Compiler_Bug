{"sha": "a186ab670e97c4c3883d96506655c4621e7c5515", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE4NmFiNjcwZTk3YzRjMzg4M2Q5NjUwNjY1NWM0NjIxZTdjNTUxNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-21T13:40:54Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-21T13:40:54Z"}, "message": "libstdc++: Make structured bindings always work for subranges [PR 97512]\n\nThe definition of ranges::subrange was moved to the new\n<bits/ranges_util.h> header so that it could be used in <algorithm>\nwithout including the whole of <ranges>. However, the tuple-like support\nthat enables subrange to be used with structured bindings was left in\n<ranges>. This is arguably conforming (to use a subrange you should\ninclude <ranges>) but it's inconvenient and probably confusing.\n\nThis change makes the tuple-like support available whenever subrange\nitself is available.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/97512\n\t* include/bits/ranges_util.h (tuple_size<subrange>)\n\t(tuple_element<I, cv subrange>): Move here from ...\n\t* include/std/ranges: ... here.\n\t* testsuite/std/ranges/subrange/97512.cc: New test.", "tree": {"sha": "8936f3809ef772d3acbf611f1a729583ec8bca2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8936f3809ef772d3acbf611f1a729583ec8bca2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a186ab670e97c4c3883d96506655c4621e7c5515", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a186ab670e97c4c3883d96506655c4621e7c5515", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a186ab670e97c4c3883d96506655c4621e7c5515", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a186ab670e97c4c3883d96506655c4621e7c5515/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e957b86ca26f9a4e49acf625ed397e7dd05b0d66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e957b86ca26f9a4e49acf625ed397e7dd05b0d66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e957b86ca26f9a4e49acf625ed397e7dd05b0d66"}], "stats": {"total": 75, "additions": 54, "deletions": 21}, "files": [{"sha": "cc50e2ad4e42311d451490aa7ae9a7a0e3c0fcb9", "filename": "libstdc++-v3/include/bits/ranges_util.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a186ab670e97c4c3883d96506655c4621e7c5515/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a186ab670e97c4c3883d96506655c4621e7c5515/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h?ref=a186ab670e97c4c3883d96506655c4621e7c5515", "patch": "@@ -410,6 +410,27 @@ namespace ranges\n \n   using ranges::get;\n \n+  template<typename _Iter, typename _Sent, ranges::subrange_kind _Kind>\n+    struct tuple_size<ranges::subrange<_Iter, _Sent, _Kind>>\n+    : integral_constant<size_t, 2>\n+    { };\n+\n+  template<typename _Iter, typename _Sent, ranges::subrange_kind _Kind>\n+    struct tuple_element<0, ranges::subrange<_Iter, _Sent, _Kind>>\n+    { using type = _Iter; };\n+\n+  template<typename _Iter, typename _Sent, ranges::subrange_kind _Kind>\n+    struct tuple_element<1, ranges::subrange<_Iter, _Sent, _Kind>>\n+    { using type = _Sent; };\n+\n+  template<typename _Iter, typename _Sent, ranges::subrange_kind _Kind>\n+    struct tuple_element<0, const ranges::subrange<_Iter, _Sent, _Kind>>\n+    { using type = _Iter; };\n+\n+  template<typename _Iter, typename _Sent, ranges::subrange_kind _Kind>\n+    struct tuple_element<1, const ranges::subrange<_Iter, _Sent, _Kind>>\n+    { using type = _Sent; };\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // library concepts"}, {"sha": "4d3a4940c6f4a79181dbdca618134b9b1a811cf2", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a186ab670e97c4c3883d96506655c4621e7c5515/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a186ab670e97c4c3883d96506655c4621e7c5515/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=a186ab670e97c4c3883d96506655c4621e7c5515", "patch": "@@ -3320,27 +3320,6 @@ namespace views\n \n   namespace views = ranges::views;\n \n-  template<typename _Iter, typename _Sent, ranges::subrange_kind _Kind>\n-    struct tuple_size<ranges::subrange<_Iter, _Sent, _Kind>>\n-    : integral_constant<size_t, 2>\n-    { };\n-\n-  template<typename _Iter, typename _Sent, ranges::subrange_kind _Kind>\n-    struct tuple_element<0, ranges::subrange<_Iter, _Sent, _Kind>>\n-    { using type = _Iter; };\n-\n-  template<typename _Iter, typename _Sent, ranges::subrange_kind _Kind>\n-    struct tuple_element<1, ranges::subrange<_Iter, _Sent, _Kind>>\n-    { using type = _Sent; };\n-\n-  template<typename _Iter, typename _Sent, ranges::subrange_kind _Kind>\n-    struct tuple_element<0, const ranges::subrange<_Iter, _Sent, _Kind>>\n-    { using type = _Iter; };\n-\n-  template<typename _Iter, typename _Sent, ranges::subrange_kind _Kind>\n-    struct tuple_element<1, const ranges::subrange<_Iter, _Sent, _Kind>>\n-    { using type = _Sent; };\n-\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n #endif // library concepts"}, {"sha": "b0fd0e2577fae97e8aff6f34dd2b890aefb421f1", "filename": "libstdc++-v3/testsuite/std/ranges/subrange/97512.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a186ab670e97c4c3883d96506655c4621e7c5515/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsubrange%2F97512.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a186ab670e97c4c3883d96506655c4621e7c5515/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsubrange%2F97512.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsubrange%2F97512.cc?ref=a186ab670e97c4c3883d96506655c4621e7c5515", "patch": "@@ -0,0 +1,33 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// PR libstdc++/97512\n+// Check that structured bindings work for subranges without <ranges>.\n+#include <algorithm>\n+\n+constexpr bool\n+test01()\n+{\n+  int r[] = { 1, 2, 2, 3, 3, 3 };\n+  auto [first, last] = std::ranges::unique(r);\n+  return first == std::ranges::begin(r) + 3 && last == std::ranges::end(r);\n+}\n+\n+static_assert( test01() );"}]}