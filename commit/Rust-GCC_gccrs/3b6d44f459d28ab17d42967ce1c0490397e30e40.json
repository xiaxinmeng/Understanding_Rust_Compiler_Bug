{"sha": "3b6d44f459d28ab17d42967ce1c0490397e30e40", "node_id": "C_kwDOANBUbNoAKDNiNmQ0NGY0NTlkMjhhYjE3ZDQyOTY3Y2UxYzA0OTAzOTdlMzBlNDA", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-14T15:39:03Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-17T02:46:35Z"}, "message": "RISC-V: Remove \"extern\" for namespace [NFC]\n\nJust like other targets, aarch64_sve namespace in aarch64-protos.h\narm_mve in arm-protos, nds namesace in nds32-protos.h\n\nThey all don't have 'extern' in namespace.\nThis is a NFC patch to make RISC-V be consistent with other targets.\nNo functionality change.\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-protos.h (riscv_run_selftests): Remove 'extern'.\n\t(init_builtins): Ditto.\n\t(mangle_builtin_type): Ditto.\n\t(verify_type_context): Ditto.\n\t(handle_pragma_vector):  Ditto.\n\t(builtin_decl): Ditto.\n\t(expand_builtin): Ditto.\n\t(const_vec_all_same_in_range_p): Ditto.\n\t(legitimize_move): Ditto.\n\t(emit_vlmax_op): Ditto.\n\t(emit_nonvlmax_op): Ditto.\n\t(get_vlmul): Ditto.\n\t(get_ratio): Ditto.\n\t(get_ta): Ditto.\n\t(get_ma): Ditto.\n\t(get_avl_type): Ditto.\n\t(calculate_ratio): Ditto.\n\t(enum vlmul_type): Ditto.\n\t(simm5_p): Ditto.\n\t(neg_simm5_p): Ditto.\n\t(has_vi_variant_p): Ditto.", "tree": {"sha": "2726084ac81f8fda8bb2c736686f9f3911cf9129", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2726084ac81f8fda8bb2c736686f9f3911cf9129"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b6d44f459d28ab17d42967ce1c0490397e30e40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b6d44f459d28ab17d42967ce1c0490397e30e40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b6d44f459d28ab17d42967ce1c0490397e30e40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b6d44f459d28ab17d42967ce1c0490397e30e40/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9da8f063a6c65228172528d5cbf9eff511350da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9da8f063a6c65228172528d5cbf9eff511350da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9da8f063a6c65228172528d5cbf9eff511350da"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "81ad2eabc00a77d6ba505f1eddfa77305edf9cff", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b6d44f459d28ab17d42967ce1c0490397e30e40/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b6d44f459d28ab17d42967ce1c0490397e30e40/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=3b6d44f459d28ab17d42967ce1c0490397e30e40", "patch": "@@ -115,7 +115,7 @@ extern const riscv_cpu_info *riscv_find_cpu (const char *);\n /* Routines implemented in riscv-selftests.cc.  */\n #if CHECKING_P\n namespace selftest {\n-extern void riscv_run_selftests (void);\n+void riscv_run_selftests (void);\n } // namespace selftest\n #endif\n \n@@ -141,24 +141,24 @@ enum avl_type\n   VLMAX,\n };\n /* Routines implemented in riscv-vector-builtins.cc.  */\n-extern void init_builtins (void);\n-extern const char *mangle_builtin_type (const_tree);\n+void init_builtins (void);\n+const char *mangle_builtin_type (const_tree);\n #ifdef GCC_TARGET_H\n-extern bool verify_type_context (location_t, type_context_kind, const_tree, bool);\n+bool verify_type_context (location_t, type_context_kind, const_tree, bool);\n #endif\n-extern void handle_pragma_vector (void);\n-extern tree builtin_decl (unsigned, bool);\n-extern rtx expand_builtin (unsigned int, tree, rtx);\n-extern bool const_vec_all_same_in_range_p (rtx, HOST_WIDE_INT, HOST_WIDE_INT);\n-extern bool legitimize_move (rtx, rtx, machine_mode);\n-extern void emit_vlmax_op (unsigned, rtx, rtx, machine_mode);\n-extern void emit_nonvlmax_op (unsigned, rtx, rtx, rtx, machine_mode);\n-extern enum vlmul_type get_vlmul (machine_mode);\n-extern unsigned int get_ratio (machine_mode);\n-extern int get_ta (rtx);\n-extern int get_ma (rtx);\n-extern int get_avl_type (rtx);\n-extern unsigned int calculate_ratio (unsigned int, enum vlmul_type);\n+void handle_pragma_vector (void);\n+tree builtin_decl (unsigned, bool);\n+rtx expand_builtin (unsigned int, tree, rtx);\n+bool const_vec_all_same_in_range_p (rtx, HOST_WIDE_INT, HOST_WIDE_INT);\n+bool legitimize_move (rtx, rtx, machine_mode);\n+void emit_vlmax_op (unsigned, rtx, rtx, machine_mode);\n+void emit_nonvlmax_op (unsigned, rtx, rtx, rtx, machine_mode);\n+enum vlmul_type get_vlmul (machine_mode);\n+unsigned int get_ratio (machine_mode);\n+int get_ta (rtx);\n+int get_ma (rtx);\n+int get_avl_type (rtx);\n+unsigned int calculate_ratio (unsigned int, enum vlmul_type);\n enum tail_policy\n {\n   TAIL_UNDISTURBED = 0,\n@@ -176,10 +176,10 @@ enum tail_policy get_prefer_tail_policy ();\n enum mask_policy get_prefer_mask_policy ();\n rtx get_avl_type_rtx (enum avl_type);\n opt_machine_mode get_vector_mode (scalar_mode, poly_uint64);\n-extern bool simm5_p (rtx);\n-extern bool neg_simm5_p (rtx);\n+bool simm5_p (rtx);\n+bool neg_simm5_p (rtx);\n #ifdef RTX_CODE\n-extern bool has_vi_variant_p (rtx_code, rtx);\n+bool has_vi_variant_p (rtx_code, rtx);\n #endif\n }\n "}]}