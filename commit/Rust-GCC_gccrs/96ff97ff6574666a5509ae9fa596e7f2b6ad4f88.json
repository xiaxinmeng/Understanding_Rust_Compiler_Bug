{"sha": "96ff97ff6574666a5509ae9fa596e7f2b6ad4f88", "node_id": "C_kwDOANBUbNoAKDk2ZmY5N2ZmNjU3NDY2NmE1NTA5YWU5ZmE1OTZlN2YyYjZhZDRmODg", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2023-03-01T12:53:09Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2023-03-01T12:53:09Z"}, "message": "OpenMP/Fortran: Fix handling of optional is_device_ptr + bind(C) [PR108546]\n\nFor is_device_ptr, optional checks should only be done before calling\nlibgomp, afterwards they are NULL either because of absent or, by\nchance, because it is unallocated or unassociated (for pointers/allocatables).\n\nAdditionally, it fixes an issue with explicit mapping for 'type(c_ptr)'.\n\n\tPR middle-end/108546\n\ngcc/fortran/ChangeLog:\n\n\t* trans-openmp.cc (gfc_trans_omp_clauses): Fix mapping of\n\ttype(C_ptr) variables.\n\ngcc/ChangeLog:\n\n\t* omp-low.cc (lower_omp_target): Remove optional handling\n\ton the receiver side, i.e. inside target (data), for\n\tuse_device_ptr.\n\nlibgomp/ChangeLog:\n\n\t* testsuite/libgomp.fortran/is_device_ptr-3.f90: New test.\n\t* testsuite/libgomp.fortran/use_device_ptr-optional-4.f90: New test.", "tree": {"sha": "c26a5a27dcad86aac7dde1325122e757a94c48e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c26a5a27dcad86aac7dde1325122e757a94c48e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96ff97ff6574666a5509ae9fa596e7f2b6ad4f88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96ff97ff6574666a5509ae9fa596e7f2b6ad4f88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96ff97ff6574666a5509ae9fa596e7f2b6ad4f88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96ff97ff6574666a5509ae9fa596e7f2b6ad4f88/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f72c8918416f67aad907752f1892c19eda12eecb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f72c8918416f67aad907752f1892c19eda12eecb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f72c8918416f67aad907752f1892c19eda12eecb"}], "stats": {"total": 106, "additions": 104, "deletions": 2}, "files": [{"sha": "84c0184f48efd46ae51c8498d255c3bbcd34a59b", "filename": "gcc/fortran/trans-openmp.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96ff97ff6574666a5509ae9fa596e7f2b6ad4f88/gcc%2Ffortran%2Ftrans-openmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96ff97ff6574666a5509ae9fa596e7f2b6ad4f88/gcc%2Ffortran%2Ftrans-openmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.cc?ref=96ff97ff6574666a5509ae9fa596e7f2b6ad4f88", "patch": "@@ -3152,7 +3152,9 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t\t\t       || GFC_DECL_CRAY_POINTEE (decl)\n \t\t\t       || GFC_DESCRIPTOR_TYPE_P\n \t\t\t\t\t     (TREE_TYPE (TREE_TYPE (decl)))\n-\t\t\t       || n->sym->ts.type == BT_DERIVED))\n+\t\t\t       || (n->sym->ts.type == BT_DERIVED\n+\t\t\t\t   && (n->sym->ts.u.derived->ts.f90_type\n+\t\t\t\t       != BT_VOID))))\n \t\t    {\n \t\t      tree orig_decl = decl;\n "}, {"sha": "9757592c635b25cb6562315e18b41c4b5d2d42f0", "filename": "gcc/omp-low.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96ff97ff6574666a5509ae9fa596e7f2b6ad4f88/gcc%2Fomp-low.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96ff97ff6574666a5509ae9fa596e7f2b6ad4f88/gcc%2Fomp-low.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.cc?ref=96ff97ff6574666a5509ae9fa596e7f2b6ad4f88", "patch": "@@ -13942,7 +13942,8 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t      }\n \t    tree present;\n \t    present = ((do_optional_check\n-\t\t\t&& OMP_CLAUSE_CODE (c) != OMP_CLAUSE_HAS_DEVICE_ADDR)\n+\t\t\t&& OMP_CLAUSE_CODE (c) != OMP_CLAUSE_HAS_DEVICE_ADDR\n+\t\t\t&& OMP_CLAUSE_CODE (c) != OMP_CLAUSE_IS_DEVICE_PTR)\n \t\t       ? omp_check_optional_argument (OMP_CLAUSE_DECL (c), true)\n \t\t       : NULL_TREE);\n \t    if (present)"}, {"sha": "ab9f00ebecb09e56c28327327b20cfdf0b899a35", "filename": "libgomp/testsuite/libgomp.fortran/is_device_ptr-3.f90", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96ff97ff6574666a5509ae9fa596e7f2b6ad4f88/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fis_device_ptr-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96ff97ff6574666a5509ae9fa596e7f2b6ad4f88/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fis_device_ptr-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fis_device_ptr-3.f90?ref=96ff97ff6574666a5509ae9fa596e7f2b6ad4f88", "patch": "@@ -0,0 +1,46 @@\n+module m\n+   use iso_c_binding\n+   implicit none\n+contains\n+   subroutine s(x,y,z)\n+      type(c_ptr), optional :: x\n+      integer, pointer, optional :: y\n+      integer, allocatable, optional :: z\n+      logical is_present, is_null\n+      is_present = present(x)\n+      if (is_present) &\n+        is_null = .not. c_associated(x)\n+\n+      !$omp target is_device_ptr(x) has_device_addr(y) has_device_addr(z)\n+        if (is_present) then\n+          if (is_null) then\n+            if (c_associated(x)) stop 1\n+            if (associated(y)) stop 2\n+            if (allocated(z)) stop 3\n+          else\n+            if (.not. c_associated(x, c_loc(y))) stop 4\n+            if (y /= 7) stop 5\n+            if (z /= 9) stop 6\n+          end if\n+        end if\n+      !$omp end target\n+   end\n+end\n+\n+use m\n+implicit none\n+integer, pointer :: p\n+integer, allocatable :: a\n+p => null()\n+call s()\n+!$omp target data map(p,a) use_device_addr(p,a)\n+  call s(c_null_ptr, p, a)\n+!$omp end target data\n+allocate(p,a)\n+p = 7\n+a = 9\n+!$omp target data map(p,a) use_device_addr(p,a)\n+  call s(c_loc(p), p, a)\n+!$omp end target data\n+deallocate(p,a)\n+end"}, {"sha": "b2a5c314685085dc839150f7dd2db299cae2dc02", "filename": "libgomp/testsuite/libgomp.fortran/use_device_ptr-optional-4.f90", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96ff97ff6574666a5509ae9fa596e7f2b6ad4f88/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fuse_device_ptr-optional-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96ff97ff6574666a5509ae9fa596e7f2b6ad4f88/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fuse_device_ptr-optional-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fuse_device_ptr-optional-4.f90?ref=96ff97ff6574666a5509ae9fa596e7f2b6ad4f88", "patch": "@@ -0,0 +1,53 @@\n+! PR middle-end/108546\n+!\n+module m\n+   use iso_c_binding\n+   implicit none\n+   type(c_ptr) :: p2, p3\n+contains\n+   subroutine s(x,y,z)\n+      type(c_ptr), optional :: x\n+      integer, pointer, optional :: y\n+      integer, allocatable, optional, target :: z\n+      logical is_present, is_null\n+      is_present = present(x)\n+      if (is_present) &\n+        is_null = .not. c_associated(x)\n+\n+      !$omp target data use_device_ptr(x) use_device_addr(y) use_device_addr(z)\n+        if (is_present) then\n+          if (is_null) then\n+            if (c_associated(x)) stop 1\n+            if (associated(y)) stop 2\n+            if (allocated(z)) stop 3\n+          else\n+            if (.not. c_associated(x, p2)) stop 4\n+            if (.not. c_associated(c_loc(y), p2)) stop 5\n+            if (.not. c_associated(c_loc(z), p3)) stop 6\n+          end if\n+        end if\n+      !$omp end target data\n+   end\n+end\n+\n+use m\n+implicit none\n+type(c_ptr) :: cp\n+integer, pointer :: p\n+integer, allocatable, target :: a\n+call s()\n+p => null()\n+call s(c_null_ptr, p, a)\n+allocate(p,a)\n+p = 7\n+a = 9\n+cp = c_loc(p)\n+!$omp target enter data map(to: cp, p, a)\n+!$omp target map(from: p2, p3)\n+  p2 = c_loc(p)\n+  p3 = c_loc(a)\n+!$omp end target\n+call s(cp, p, a)\n+!$omp target exit data map(delete: cp, p, a)\n+deallocate(p,a)\n+end"}]}