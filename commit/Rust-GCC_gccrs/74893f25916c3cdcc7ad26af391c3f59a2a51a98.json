{"sha": "74893f25916c3cdcc7ad26af391c3f59a2a51a98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ4OTNmMjU5MTZjM2NkY2M3YWQyNmFmMzkxYzNmNTlhMmE1MWE5OA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2014-11-19T13:31:24Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2014-11-19T13:31:24Z"}, "message": "Allow the static chain to be set from C\n\nWe need to be able to set the static chain on a few calls within the\nGo runtime, so expose this with __builtin_call_with_static_chain.\n\n        * c-family/c-common.c (c_common_reswords): Add\n        __builtin_call_with_static_chain.\n        * c-family/c-common.h (RID_BUILTIN_CALL_WITH_STATIC_CHAIN): New.\n        * c/c-parser.c (c_parser_postfix_expression): Handle it.\n        * doc/extend.texi (__builtin_call_with_static_chain): Document it.\n\nFrom-SVN: r217771", "tree": {"sha": "6e11f41a5ade384361d3bf280fa4e43b0e99fa63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e11f41a5ade384361d3bf280fa4e43b0e99fa63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74893f25916c3cdcc7ad26af391c3f59a2a51a98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74893f25916c3cdcc7ad26af391c3f59a2a51a98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74893f25916c3cdcc7ad26af391c3f59a2a51a98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74893f25916c3cdcc7ad26af391c3f59a2a51a98/comments", "author": null, "committer": null, "parents": [{"sha": "f2d3d07ee55fa52b41c1ec08e51269831961a772", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d3d07ee55fa52b41c1ec08e51269831961a772", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2d3d07ee55fa52b41c1ec08e51269831961a772"}], "stats": {"total": 130, "additions": 129, "deletions": 1}, "files": [{"sha": "5a6a3544c33d7714915b78584e16a0f056c9b225", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74893f25916c3cdcc7ad26af391c3f59a2a51a98/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74893f25916c3cdcc7ad26af391c3f59a2a51a98/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74893f25916c3cdcc7ad26af391c3f59a2a51a98", "patch": "@@ -1,5 +1,11 @@\n 2014-11-19  Richard Henderson  <rth@redhat.com>\n \n+\t* c-family/c-common.c (c_common_reswords): Add\n+\t__builtin_call_with_static_chain.\n+\t* c-family/c-common.h (RID_BUILTIN_CALL_WITH_STATIC_CHAIN): New.\n+\t* c/c-parser.c (c_parser_postfix_expression): Handle it.\n+\t* doc/extend.texi (__builtin_call_with_static_chain): Document it.\n+\n \t* calls.c (prepare_call_address): Allow decl or type for first arg.\n \t(expand_call): Pass type to prepare_call_address if no decl.\n \t* gimple-fold.c (gimple_fold_call): Eliminate the static chain if"}, {"sha": "95b6b1b93e05a6461036cf845ea280176a172cab", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74893f25916c3cdcc7ad26af391c3f59a2a51a98/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74893f25916c3cdcc7ad26af391c3f59a2a51a98/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=74893f25916c3cdcc7ad26af391c3f59a2a51a98", "patch": "@@ -453,6 +453,8 @@ const struct c_common_resword c_common_reswords[] =\n   { \"__attribute__\",\tRID_ATTRIBUTE,\t0 },\n   { \"__auto_type\",\tRID_AUTO_TYPE,\tD_CONLY },\n   { \"__bases\",          RID_BASES, D_CXXONLY },\n+  { \"__builtin_call_with_static_chain\",\n+    RID_BUILTIN_CALL_WITH_STATIC_CHAIN, D_CONLY },\n   { \"__builtin_choose_expr\", RID_CHOOSE_EXPR, D_CONLY },\n   { \"__builtin_complex\", RID_BUILTIN_COMPLEX, D_CONLY },\n   { \"__builtin_shuffle\", RID_BUILTIN_SHUFFLE, 0 },"}, {"sha": "7e53923a551e5df0f8df024cd16ecd72cb2eb9cd", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74893f25916c3cdcc7ad26af391c3f59a2a51a98/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74893f25916c3cdcc7ad26af391c3f59a2a51a98/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=74893f25916c3cdcc7ad26af391c3f59a2a51a98", "patch": "@@ -101,7 +101,7 @@ enum rid\n   RID_EXTENSION, RID_IMAGPART, RID_REALPART, RID_LABEL,      RID_CHOOSE_EXPR,\n   RID_TYPES_COMPATIBLE_P,      RID_BUILTIN_COMPLEX,\t     RID_BUILTIN_SHUFFLE,\n   RID_DFLOAT32, RID_DFLOAT64, RID_DFLOAT128,\n-  RID_FRACT, RID_ACCUM, RID_AUTO_TYPE,\n+  RID_FRACT, RID_ACCUM, RID_AUTO_TYPE, RID_BUILTIN_CALL_WITH_STATIC_CHAIN,\n \n   /* C11 */\n   RID_ALIGNAS, RID_GENERIC,"}, {"sha": "8a4fd39fe803080afd3e91b84d43dc86fbe6257a", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74893f25916c3cdcc7ad26af391c3f59a2a51a98/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74893f25916c3cdcc7ad26af391c3f59a2a51a98/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=74893f25916c3cdcc7ad26af391c3f59a2a51a98", "patch": "@@ -7414,6 +7414,46 @@ c_parser_postfix_expression (c_parser *parser)\n \t      = comptypes (e1, e2) ? integer_one_node : integer_zero_node;\n \t  }\n \t  break;\n+\tcase RID_BUILTIN_CALL_WITH_STATIC_CHAIN:\n+\t  {\n+\t    vec<c_expr_t, va_gc> *cexpr_list;\n+\t    c_expr_t *e2_p;\n+\t    tree chain_value;\n+\n+\t    c_parser_consume_token (parser);\n+\t    if (!c_parser_get_builtin_args (parser,\n+\t\t\t\t\t    \"__builtin_call_with_static_chain\",\n+\t\t\t\t\t    &cexpr_list, false))\n+\t      {\n+\t\texpr.value = error_mark_node;\n+\t\tbreak;\n+\t      }\n+\t    if (vec_safe_length (cexpr_list) != 2)\n+\t      {\n+\t\terror_at (loc, \"wrong number of arguments to \"\n+\t\t\t       \"%<__builtin_call_with_static_chain%>\");\n+\t\texpr.value = error_mark_node;\n+\t\tbreak;\n+\t      }\n+\n+\t    expr = (*cexpr_list)[0];\n+\t    e2_p = &(*cexpr_list)[1];\n+\t    *e2_p = convert_lvalue_to_rvalue (loc, *e2_p, true, true);\n+\t    chain_value = e2_p->value;\n+\t    mark_exp_read (chain_value);\n+\n+\t    if (TREE_CODE (expr.value) != CALL_EXPR)\n+\t      error_at (loc, \"first argument to \"\n+\t\t\t\"%<__builtin_call_with_static_chain%> \"\n+\t\t\t\"must be a call expression\");\n+\t    else if (TREE_CODE (TREE_TYPE (chain_value)) != POINTER_TYPE)\n+\t      error_at (loc, \"second argument to \"\n+\t\t\t\"%<__builtin_call_with_static_chain%> \"\n+\t\t\t\"must be a pointer type\");\n+\t    else\n+\t      CALL_EXPR_STATIC_CHAIN (expr.value) = chain_value;\n+\t    break;\n+\t  }\n \tcase RID_BUILTIN_COMPLEX:\n \t  {\n \t    vec<c_expr_t, va_gc> *cexpr_list;"}, {"sha": "7178c9a7e8e271a7e76033cd4e49de4b1bd2d9d8", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74893f25916c3cdcc7ad26af391c3f59a2a51a98/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74893f25916c3cdcc7ad26af391c3f59a2a51a98/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=74893f25916c3cdcc7ad26af391c3f59a2a51a98", "patch": "@@ -8913,6 +8913,7 @@ in the Cilk Plus language manual which can be found at\n @node Other Builtins\n @section Other Built-in Functions Provided by GCC\n @cindex built-in functions\n+@findex __builtin_call_with_static_chain\n @findex __builtin_fpclassify\n @findex __builtin_isfinite\n @findex __builtin_isnormal\n@@ -9501,6 +9502,18 @@ depending on the arguments' types.  For example:\n \n @end deftypefn\n \n+@deftypefn {Built-in Function} @var{type} __builtin_call_with_static_chain (@var{call_exp}, @var{pointer_exp})\n+\n+The @var{call_exp} expression must be a function call, and the\n+@var{pointer_exp} expression must be a pointer.  The @var{pointer_exp}\n+is passed to the function call in the target's static chain location.\n+The result of builtin is the result of the function call.\n+\n+@emph{Note:} This builtin is only available for C@.\n+This builtin can be used to call Go closures from C.\n+\n+@end deftypefn\n+\n @deftypefn {Built-in Function} @var{type} __builtin_choose_expr (@var{const_exp}, @var{exp1}, @var{exp2})\n \n You can use the built-in function @code{__builtin_choose_expr} to"}, {"sha": "b4fcae8c06199165d8e383e87f58fe17454363c0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74893f25916c3cdcc7ad26af391c3f59a2a51a98/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74893f25916c3cdcc7ad26af391c3f59a2a51a98/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=74893f25916c3cdcc7ad26af391c3f59a2a51a98", "patch": "@@ -1,3 +1,8 @@\n+2014-11-19  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.dg/cwsc0.c: New test.\n+\t* gcc.dg/cwsc1.c: New test.\n+\n 2014-11-19  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/63879"}, {"sha": "3d92222bf9cc7500d8fcba470d316ec62e195fcd", "filename": "gcc/testsuite/gcc.dg/cwsc0.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74893f25916c3cdcc7ad26af391c3f59a2a51a98/gcc%2Ftestsuite%2Fgcc.dg%2Fcwsc0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74893f25916c3cdcc7ad26af391c3f59a2a51a98/gcc%2Ftestsuite%2Fgcc.dg%2Fcwsc0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcwsc0.c?ref=74893f25916c3cdcc7ad26af391c3f59a2a51a98", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+#include <stddef.h>\n+\n+void foo(void);\n+void test(int (*f)(void), char *p)\n+{\n+  __builtin_call_with_static_chain(f(), p);\n+  __builtin_call_with_static_chain(p, f());  /* { dg-error \"must be a call\" } */\n+  __builtin_call_with_static_chain(f() + 1, p); /* { dg-error \"must be a call\" } */\n+  __builtin_call_with_static_chain(f(), 0);  /* { dg-error \"must be a pointer\" } */\n+  __builtin_call_with_static_chain(f(), NULL);\n+  __builtin_call_with_static_chain(foo, p);  /* { dg-error \"must be a call\" } */\n+  __builtin_call_with_static_chain(foo(), p);\n+  __builtin_call_with_static_chain(foo(), foo);\n+}"}, {"sha": "e793e26116af4eea9e8af04b23f3be85a24d1005", "filename": "gcc/testsuite/gcc.dg/cwsc1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74893f25916c3cdcc7ad26af391c3f59a2a51a98/gcc%2Ftestsuite%2Fgcc.dg%2Fcwsc1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74893f25916c3cdcc7ad26af391c3f59a2a51a98/gcc%2Ftestsuite%2Fgcc.dg%2Fcwsc1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcwsc1.c?ref=74893f25916c3cdcc7ad26af391c3f59a2a51a98", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O\" } */\n+\n+#if defined(__x86_64__)\n+# define CHAIN\t\"%r10\"\n+#elif defined(__i386__)\n+# define CHAIN  \"%ecx\"\n+#elif defined(__aarch64__)\n+# define CHAIN  \"x18\"\n+#elif defined(__alpha__)\n+# define CHAIN  \"$1\"\n+#elif defined(__arm__)\n+# define CHAIN  \"ip\"\n+#elif defined(__powerpc__)\n+# define CHAIN  \"11\"\n+#elif defined(__s390__)\n+# define CHAIN  \"%r0\"\n+#elif defined(__sparc__)\n+# ifdef __arch64__\n+#  define CHAIN \"%g5\"\n+# else\n+#  define CHAIN \"%g2\"\n+# endif\n+#endif\n+\n+#ifdef CHAIN\n+void *__attribute__((noinline, noclone)) foo(void)\n+{\n+  register void *chain __asm__(CHAIN);\n+  return chain;\n+}\n+\n+void * (*ptr)(void) = foo;\n+extern void abort(void);\n+\n+int main()\n+{\n+  char c;\n+  void *x = __builtin_call_with_static_chain(ptr(), &c);\n+  if (x != &c)\n+    abort();\n+  return 0;\n+}\n+#else\n+int main() { return 0; }\n+#endif"}]}