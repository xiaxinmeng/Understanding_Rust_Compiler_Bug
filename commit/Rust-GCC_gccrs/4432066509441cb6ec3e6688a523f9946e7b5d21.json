{"sha": "4432066509441cb6ec3e6688a523f9946e7b5d21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQzMjA2NjUwOTQ0MWNiNmVjM2U2Njg4YTUyM2Y5OTQ2ZTdiNWQyMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-08-19T15:14:13Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-08-19T15:14:55Z"}, "message": "i386: Use code_for_ instead of gen_ for parameterized names more.\n\nSome builtins are better expanded to patterns with\nparametrized names via code_for_ than gen_ helpers.\n\nNo functional changes.\n\n2020-08-19  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\t* config/i386/i386-expand.c (ix86_expand_builtin)\n\t[case IX86_BUILTIN_ENQCMD, case IX86_BUILTIN_ENQCMDS]:\n\tRewrite expansion to use code_for_enqcmd.\n\t[case IX86_BUILTIN_WRSSD, case IX86_BUILTIN_WRSSQ]:\n\tRewrite expansion to use code_for_wrss.\n\t[case IX86_BUILTIN_WRUSSD, case IX86_BUILTIN_WRUSSD]:\n\tRewrite expansion to use code_for_wrss.", "tree": {"sha": "8f22c4e7b5387864d56bf89b31e7fd99a70434e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f22c4e7b5387864d56bf89b31e7fd99a70434e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4432066509441cb6ec3e6688a523f9946e7b5d21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4432066509441cb6ec3e6688a523f9946e7b5d21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4432066509441cb6ec3e6688a523f9946e7b5d21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4432066509441cb6ec3e6688a523f9946e7b5d21/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "459f6f68a75fe88e7c8309ca8ad3244a532b0d8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/459f6f68a75fe88e7c8309ca8ad3244a532b0d8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/459f6f68a75fe88e7c8309ca8ad3244a532b0d8e"}], "stats": {"total": 36, "additions": 19, "deletions": 17}, "files": [{"sha": "61618636cffe3593c2fc575cf7f36461e73783f8", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4432066509441cb6ec3e6688a523f9946e7b5d21/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4432066509441cb6ec3e6688a523f9946e7b5d21/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=4432066509441cb6ec3e6688a523f9946e7b5d21", "patch": "@@ -11433,24 +11433,24 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \t}\n       else\n \t{\n-\t  rtx pat;\n+\t  if (target == 0\n+\t      || !register_operand (target, SImode))\n+\t    target = gen_reg_rtx (SImode);\n \n-\t  target = gen_reg_rtx (SImode);\n \t  emit_move_insn (target, const0_rtx);\n \t  target = gen_rtx_SUBREG (QImode, target, 0);\n \n-\t  if (fcode == IX86_BUILTIN_ENQCMD)\n-\t    pat = gen_enqcmd (UNSPECV_ENQCMD, Pmode, op0, op1);\n-\t  else\n-\t    pat = gen_enqcmd (UNSPECV_ENQCMDS, Pmode, op0, op1);\n-\n-\t  emit_insn (pat);\n-\n-\t  emit_insn (gen_rtx_SET (gen_rtx_STRICT_LOW_PART (VOIDmode, target),\n-\t\t\t\t  gen_rtx_fmt_ee (EQ, QImode,\n-\t\t\t\t\t\t  SET_DEST (pat),\n-\t\t\t\t\t\t  const0_rtx)));\n+\t  int unspecv = (fcode == IX86_BUILTIN_ENQCMD\n+\t\t\t ? UNSPECV_ENQCMD\n+\t\t\t : UNSPECV_ENQCMDS);\n+\t  icode = code_for_enqcmd (unspecv, Pmode);\n+\t  emit_insn (GEN_FCN (icode) (op0, op1));\n \n+\t  emit_insn\n+\t    (gen_rtx_SET (gen_rtx_STRICT_LOW_PART (VOIDmode, target),\n+\t\t\t  gen_rtx_fmt_ee (EQ, QImode,\n+\t\t\t\t\t  gen_rtx_REG (CCZmode, FLAGS_REG),\n+\t\t\t\t\t  const0_rtx)));\n \t  return SUBREG_REG (target);\n \t}\n \n@@ -12839,10 +12839,12 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \t}\n       op1 = gen_rtx_MEM (mode, op1);\n \n-      emit_insn ((fcode == IX86_BUILTIN_WRSSD\n-\t\t  || fcode == IX86_BUILTIN_WRSSQ)\n-\t\t ? gen_wrss (mode, op0, op1)\n-\t\t : gen_wruss (mode, op0, op1));\n+      icode = ((fcode == IX86_BUILTIN_WRSSD\n+\t\t|| fcode == IX86_BUILTIN_WRSSQ)\n+\t       ? code_for_wrss (mode)\n+\t       : code_for_wruss (mode));\n+      emit_insn (GEN_FCN (icode) (op0, op1));\n+\n       return 0;\n \n     default:"}]}