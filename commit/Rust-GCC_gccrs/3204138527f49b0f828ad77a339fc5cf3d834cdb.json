{"sha": "3204138527f49b0f828ad77a339fc5cf3d834cdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIwNDEzODUyN2Y0OWIwZjgyOGFkNzdhMzM5ZmM1Y2YzZDgzNGNkYg==", "commit": {"author": {"name": "Chao-ying Fu", "email": "fu@mips.com", "date": "2007-03-09T19:19:44Z"}, "committer": {"name": "Chao-ying Fu", "email": "chaoyingfu@gcc.gnu.org", "date": "2007-03-09T19:19:44Z"}, "message": "extend.texi (MIPS DSP Built-in Functions): Document the DSP REV 2.\n\n* doc/extend.texi (MIPS DSP Built-in Functions): Document the DSP\nREV 2.\n* doc/invoke.texi (-mdspr2): Document new option.\n* config/mips/mips.md (UNSPEC_ABSQ_S_QB .. UNSPEC_DPSQX_SA_W_PH):\nNew unspec for DSP REV 2.\n(<u>mulsidi3_32bit_internal): Check if !TARGET_DSPR2, because\nthese instructions are extended in DSP REV 2.\n(mips-dspr2.md): Include.\n* config/mips/mips.opt (mdspr2): New option.\n* config/mips/mips.c (mips_function_type): Add MIPS_V4QI_FTYPE_V4QI,\nMIPS_SI_FTYPE_SI_SI_SI, MIPS_DI_FTYPE_DI_USI_USI, MIPS_DI_FTYPE_SI_SI,\nMIPS_DI_FTYPE_USI_USI, MIPS_V2HI_FTYPE_SI_SI_SI.\n(override_options): Check TARGET_DSPR2 to enable MASK_DSP.\n(CODE_FOR_mips_mul_ph): Define it to CODE_FOR_mulv2hi3.\n(dsp_bdesc): Add DSP REV 2 builtins.  Remove 32-bit only DSP builtins.\n(dsp_32only_bdesc): New description table for 32-bit only DSP REV 1\nand 2 builtins.\n(bdesc_map): Add one field of unsupported_target_flags.\n(bdesc_arrays):  Update entries to have extra fields.  Add\ndsp_32only_bdesc.\n(mips_init_builtins): Initialize new function types.\nCheck unsupported_target_fileds to filter out builtins.\n* config/mips/mips.h (TARGET_CPU_CPP_BUILTINS): Define __mips_dspr2 if\nTARGET_DSPR2.\n(ASM_SPEC): Pass mdspr2 to the assembler.\n* config/mips/mips-dspr2.md: New file.\n\nFrom-SVN: r122756", "tree": {"sha": "fa5cf3d809924e7c90a9ea7d99968e176a99f78c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa5cf3d809924e7c90a9ea7d99968e176a99f78c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3204138527f49b0f828ad77a339fc5cf3d834cdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3204138527f49b0f828ad77a339fc5cf3d834cdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3204138527f49b0f828ad77a339fc5cf3d834cdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3204138527f49b0f828ad77a339fc5cf3d834cdb/comments", "author": null, "committer": null, "parents": [{"sha": "4a71edd9b8aff0f005c08ce6094aca36e8a33c25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a71edd9b8aff0f005c08ce6094aca36e8a33c25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a71edd9b8aff0f005c08ce6094aca36e8a33c25"}], "stats": {"total": 986, "additions": 953, "deletions": 33}, "files": [{"sha": "c8c76905eb63cc60146fc67fe45da3b2e95104ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3204138527f49b0f828ad77a339fc5cf3d834cdb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3204138527f49b0f828ad77a339fc5cf3d834cdb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3204138527f49b0f828ad77a339fc5cf3d834cdb", "patch": "@@ -1,3 +1,32 @@\n+2007-03-09  Chao-ying Fu  <fu@mips.com>\n+\n+\t* doc/extend.texi (MIPS DSP Built-in Functions): Document the DSP\n+\tREV 2.\n+\t* doc/invoke.texi (-mdspr2): Document new option.\n+\t* config/mips/mips.md (UNSPEC_ABSQ_S_QB .. UNSPEC_DPSQX_SA_W_PH):\n+\tNew unspec for DSP REV 2.\n+\t(<u>mulsidi3_32bit_internal): Check if !TARGET_DSPR2, because\n+\tthese instructions are extended in DSP REV 2.\n+\t(mips-dspr2.md): Include.\n+\t* config/mips/mips.opt (mdspr2): New option.\n+\t* config/mips/mips.c (mips_function_type): Add MIPS_V4QI_FTYPE_V4QI,\n+\tMIPS_SI_FTYPE_SI_SI_SI, MIPS_DI_FTYPE_DI_USI_USI, MIPS_DI_FTYPE_SI_SI,\n+\tMIPS_DI_FTYPE_USI_USI, MIPS_V2HI_FTYPE_SI_SI_SI.\n+\t(override_options): Check TARGET_DSPR2 to enable MASK_DSP.\n+\t(CODE_FOR_mips_mul_ph): Define it to CODE_FOR_mulv2hi3.\n+\t(dsp_bdesc): Add DSP REV 2 builtins.  Remove 32-bit only DSP builtins.\n+\t(dsp_32only_bdesc): New description table for 32-bit only DSP REV 1\n+\tand 2 builtins.\n+\t(bdesc_map): Add one field of unsupported_target_flags.\n+\t(bdesc_arrays):  Update entries to have extra fields.  Add\n+\tdsp_32only_bdesc.\n+\t(mips_init_builtins): Initialize new function types.\n+\tCheck unsupported_target_fileds to filter out builtins.\n+\t* config/mips/mips.h (TARGET_CPU_CPP_BUILTINS): Define __mips_dspr2 if\n+\tTARGET_DSPR2.\n+\t(ASM_SPEC): Pass mdspr2 to the assembler.\n+\t* config/mips/mips-dspr2.md: New file.\n+\n 2007-03-09  Sa Liu  <saliu@de.ibm.com>\n \n \t* config/rs6000/altivec.md: Fix vcond patterns using if_then_else."}, {"sha": "948c693c7d83c01d6d400031c49bf2169c1150a8", "filename": "gcc/config/mips/mips-dspr2.md", "status": "added", "additions": 626, "deletions": 0, "changes": 626, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3204138527f49b0f828ad77a339fc5cf3d834cdb/gcc%2Fconfig%2Fmips%2Fmips-dspr2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3204138527f49b0f828ad77a339fc5cf3d834cdb/gcc%2Fconfig%2Fmips%2Fmips-dspr2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-dspr2.md?ref=3204138527f49b0f828ad77a339fc5cf3d834cdb", "patch": "@@ -0,0 +1,626 @@\n+; MIPS DSP ASE REV 2 Revision 0.02 11/24/2006\n+\n+(define_insn \"mips_absq_s_qb\"\n+  [(parallel\n+    [(set (match_operand:V4QI 0 \"register_operand\" \"=d\")\n+\t  (unspec:V4QI [(match_operand:V4QI 1 \"reg_or_0_operand\" \"dYG\")]\n+\t\t       UNSPEC_ABSQ_S_QB))\n+     (set (reg:CCDSP CCDSP_OU_REGNUM)\n+\t  (unspec:CCDSP [(match_dup 1)] UNSPEC_ABSQ_S_QB))])]\n+  \"TARGET_DSPR2\"\n+  \"absq_s.qb\\t%0,%z1\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_addu_ph\"\n+  [(parallel\n+    [(set (match_operand:V2HI 0 \"register_operand\" \"=d\")\n+\t  (plus:V2HI (match_operand:V2HI 1 \"reg_or_0_operand\" \"dYG\")\n+\t\t     (match_operand:V2HI 2 \"reg_or_0_operand\" \"dYG\")))\n+     (set (reg:CCDSP CCDSP_OU_REGNUM)\n+\t  (unspec:CCDSP [(match_dup 1) (match_dup 2)] UNSPEC_ADDU_PH))])]\n+  \"TARGET_DSPR2\"\n+  \"addu.ph\\t%0,%z1,%z2\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_addu_s_ph\"\n+  [(parallel\n+    [(set (match_operand:V2HI 0 \"register_operand\" \"=d\")\n+\t  (unspec:V2HI [(match_operand:V2HI 1 \"reg_or_0_operand\" \"dYG\")\n+\t\t\t(match_operand:V2HI 2 \"reg_or_0_operand\" \"dYG\")]\n+\t\t       UNSPEC_ADDU_S_PH))\n+     (set (reg:CCDSP CCDSP_OU_REGNUM)\n+\t  (unspec:CCDSP [(match_dup 1) (match_dup 2)] UNSPEC_ADDU_S_PH))])]\n+  \"TARGET_DSPR2\"\n+  \"addu_s.ph\\t%0,%z1,%z2\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_adduh_qb\"\n+  [(set (match_operand:V4QI 0 \"register_operand\" \"=d\")\n+\t(unspec:V4QI [(match_operand:V4QI 1 \"reg_or_0_operand\" \"dYG\")\n+\t\t      (match_operand:V4QI 2 \"reg_or_0_operand\" \"dYG\")]\n+\t\t     UNSPEC_ADDUH_QB))]\n+  \"TARGET_DSPR2\"\n+  \"adduh.qb\\t%0,%z1,%z2\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_adduh_r_qb\"\n+  [(set (match_operand:V4QI 0 \"register_operand\" \"=d\")\n+\t(unspec:V4QI [(match_operand:V4QI 1 \"reg_or_0_operand\" \"dYG\")\n+\t\t      (match_operand:V4QI 2 \"reg_or_0_operand\" \"dYG\")]\n+\t\t     UNSPEC_ADDUH_R_QB))]\n+  \"TARGET_DSPR2\"\n+  \"adduh_r.qb\\t%0,%z1,%z2\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_append\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t    (match_operand:SI 2 \"reg_or_0_operand\" \"dJ\")\n+\t\t    (match_operand:SI 3 \"const_int_operand\" \"n\")]\n+\t\t   UNSPEC_APPEND))]\n+  \"TARGET_DSPR2\"\n+{\n+  if (INTVAL (operands[3]) & ~(unsigned HOST_WIDE_INT) 31)\n+    operands[2] = GEN_INT (INTVAL (operands[2]) & 31);\n+  return \"append\\t%0,%z2,%3\";\n+}\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_balign\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t    (match_operand:SI 2 \"reg_or_0_operand\" \"dJ\")\n+\t\t    (match_operand:SI 3 \"const_int_operand\" \"n\")]\n+\t\t   UNSPEC_BALIGN))]\n+  \"TARGET_DSPR2\"\n+{\n+  if (INTVAL (operands[3]) & ~(unsigned HOST_WIDE_INT) 3)\n+    operands[2] = GEN_INT (INTVAL (operands[2]) & 3);\n+  return \"balign\\t%0,%z2,%3\";\n+}\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_cmpgdu_eq_qb\"\n+  [(parallel\n+    [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t  (unspec:SI [(match_operand:V4QI 1 \"reg_or_0_operand\" \"dYG\")\n+\t\t      (match_operand:V4QI 2 \"reg_or_0_operand\" \"dYG\")]\n+\t\t     UNSPEC_CMPGDU_EQ_QB))\n+     (set (reg:CCDSP CCDSP_CC_REGNUM)\n+\t  (unspec:CCDSP [(match_dup 1) (match_dup 2)\n+\t\t\t (reg:CCDSP CCDSP_CC_REGNUM)]\n+\t\t\tUNSPEC_CMPGDU_EQ_QB))])]\n+  \"TARGET_DSPR2\"\n+  \"cmpgdu.eq.qb\\t%0,%z1,%z2\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_cmpgdu_lt_qb\"\n+  [(parallel\n+    [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t  (unspec:SI [(match_operand:V4QI 1 \"reg_or_0_operand\" \"dYG\")\n+\t\t      (match_operand:V4QI 2 \"reg_or_0_operand\" \"dYG\")]\n+\t\t     UNSPEC_CMPGDU_LT_QB))\n+     (set (reg:CCDSP CCDSP_CC_REGNUM)\n+\t  (unspec:CCDSP [(match_dup 1) (match_dup 2)\n+\t\t\t (reg:CCDSP CCDSP_CC_REGNUM)]\n+\t\t\tUNSPEC_CMPGDU_LT_QB))])]\n+  \"TARGET_DSPR2\"\n+  \"cmpgdu.lt.qb\\t%0,%z1,%z2\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_cmpgdu_le_qb\"\n+  [(parallel\n+    [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t  (unspec:SI [(match_operand:V4QI 1 \"reg_or_0_operand\" \"dYG\")\n+\t\t      (match_operand:V4QI 2 \"reg_or_0_operand\" \"dYG\")]\n+\t\t     UNSPEC_CMPGDU_LE_QB))\n+     (set (reg:CCDSP CCDSP_CC_REGNUM)\n+\t  (unspec:CCDSP [(match_dup 1) (match_dup 2)\n+\t\t\t (reg:CCDSP CCDSP_CC_REGNUM)]\n+\t\t\tUNSPEC_CMPGDU_LE_QB))])]\n+  \"TARGET_DSPR2\"\n+  \"cmpgdu.le.qb\\t%0,%z1,%z2\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_dpa_w_ph\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n+\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"0\")\n+\t\t    (match_operand:V2HI 2 \"reg_or_0_operand\" \"dYG\")\n+\t\t    (match_operand:V2HI 3 \"reg_or_0_operand\" \"dYG\")]\n+\t\t   UNSPEC_DPA_W_PH))]\n+  \"TARGET_DSPR2 && !TARGET_64BIT\"\n+  \"dpa.w.ph\\t%q0,%z2,%z3\"\n+  [(set_attr \"type\"\t\"imadd\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_dps_w_ph\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n+\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"0\")\n+\t\t    (match_operand:V2HI 2 \"reg_or_0_operand\" \"dYG\")\n+\t\t    (match_operand:V2HI 3 \"reg_or_0_operand\" \"dYG\")]\n+\t\t   UNSPEC_DPS_W_PH))]\n+  \"TARGET_DSPR2 && !TARGET_64BIT\"\n+  \"dps.w.ph\\t%q0,%z2,%z3\"\n+  [(set_attr \"type\"\t\"imadd\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_madd\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n+\t(plus:DI\n+\t (mult:DI (sign_extend:DI\n+\t\t   (match_operand:SI 2 \"register_operand\" \"d\"))\n+\t\t  (sign_extend:DI\n+\t\t   (match_operand:SI 3 \"register_operand\" \"d\")))\n+\t (match_operand:DI 1 \"register_operand\" \"0\")))]\n+  \"TARGET_DSPR2 && !TARGET_64BIT\"\n+  \"madd\\t%q0,%2,%3\"\n+  [(set_attr \"type\"\t\"imadd\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_maddu\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n+\t(plus:DI\n+\t (mult:DI (zero_extend:DI\n+\t\t   (match_operand:SI 2 \"register_operand\" \"d\"))\n+\t\t  (zero_extend:DI\n+\t\t   (match_operand:SI 3 \"register_operand\" \"d\")))\n+\t (match_operand:DI 1 \"register_operand\" \"0\")))]\n+  \"TARGET_DSPR2 && !TARGET_64BIT\"\n+  \"maddu\\t%q0,%2,%3\"\n+  [(set_attr \"type\"\t\"imadd\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_msub\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n+\t(minus:DI\n+\t (match_operand:DI 1 \"register_operand\" \"0\")\n+\t (mult:DI (sign_extend:DI\n+\t\t   (match_operand:SI 2 \"register_operand\" \"d\"))\n+\t\t  (sign_extend:DI\n+\t\t   (match_operand:SI 3 \"register_operand\" \"d\")))))]\n+  \"TARGET_DSPR2 && !TARGET_64BIT\"\n+  \"msub\\t%q0,%2,%3\"\n+  [(set_attr \"type\"\t\"imadd\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_msubu\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n+\t(minus:DI\n+\t (match_operand:DI 1 \"register_operand\" \"0\")\n+\t (mult:DI (zero_extend:DI\n+\t\t   (match_operand:SI 2 \"register_operand\" \"d\"))\n+\t\t  (zero_extend:DI\n+\t\t   (match_operand:SI 3 \"register_operand\" \"d\")))))]\n+  \"TARGET_DSPR2 && !TARGET_64BIT\"\n+  \"msubu\\t%q0,%2,%3\"\n+  [(set_attr \"type\"\t\"imadd\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mulv2hi3\"\n+  [(parallel\n+    [(set (match_operand:V2HI 0 \"register_operand\" \"=d\")\n+\t  (mult:V2HI (match_operand:V2HI 1 \"register_operand\" \"d\")\n+\t\t     (match_operand:V2HI 2 \"register_operand\" \"d\")))\n+     (set (reg:CCDSP CCDSP_OU_REGNUM)\n+\t  (unspec:CCDSP [(match_dup 1) (match_dup 2)] UNSPEC_MUL_PH))\n+     (clobber (match_scratch:DI 3 \"=x\"))])]\n+  \"TARGET_DSPR2\"\n+  \"mul.ph\\t%0,%1,%2\"\n+  [(set_attr \"type\"\t\"imul3\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_mul_s_ph\"\n+  [(parallel\n+    [(set (match_operand:V2HI 0 \"register_operand\" \"=d\")\n+\t  (unspec:V2HI [(match_operand:V2HI 1 \"reg_or_0_operand\" \"dYG\")\n+\t\t\t(match_operand:V2HI 2 \"reg_or_0_operand\" \"dYG\")]\n+\t\t       UNSPEC_MUL_S_PH))\n+     (set (reg:CCDSP CCDSP_OU_REGNUM)\n+\t  (unspec:CCDSP [(match_dup 1) (match_dup 2)] UNSPEC_MUL_S_PH))\n+     (clobber (match_scratch:DI 3 \"=x\"))])]\n+  \"TARGET_DSPR2\"\n+  \"mul_s.ph\\t%0,%z1,%z2\"\n+  [(set_attr \"type\"\t\"imul3\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_mulq_rs_w\"\n+  [(parallel\n+    [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t  (unspec:SI [(match_operand:SI 1 \"reg_or_0_operand\" \"dJ\")\n+\t\t      (match_operand:SI 2 \"reg_or_0_operand\" \"dJ\")]\n+\t\t     UNSPEC_MULQ_RS_W))\n+     (set (reg:CCDSP CCDSP_OU_REGNUM)\n+\t  (unspec:CCDSP [(match_dup 1) (match_dup 2)] UNSPEC_MULQ_RS_W))\n+     (clobber (match_scratch:DI 3 \"=x\"))])]\n+  \"TARGET_DSPR2\"\n+  \"mulq_rs.w\\t%0,%z1,%z2\"\n+  [(set_attr \"type\"\t\"imul3\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_mulq_s_ph\"\n+  [(parallel\n+    [(set (match_operand:V2HI 0 \"register_operand\" \"=d\")\n+\t  (unspec:V2HI [(match_operand:V2HI 1 \"reg_or_0_operand\" \"dYG\")\n+\t\t\t(match_operand:V2HI 2 \"reg_or_0_operand\" \"dYG\")]\n+\t\t       UNSPEC_MULQ_S_PH))\n+     (set (reg:CCDSP CCDSP_OU_REGNUM)\n+\t  (unspec:CCDSP [(match_dup 1) (match_dup 2)] UNSPEC_MULQ_S_PH))\n+     (clobber (match_scratch:DI 3 \"=x\"))])]\n+  \"TARGET_DSPR2\"\n+  \"mulq_s.ph\\t%0,%z1,%z2\"\n+  [(set_attr \"type\"\t\"imul3\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_mulq_s_w\"\n+  [(parallel\n+    [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t  (unspec:SI [(match_operand:SI 1 \"reg_or_0_operand\" \"dJ\")\n+\t\t      (match_operand:SI 2 \"reg_or_0_operand\" \"dJ\")]\n+\t\t     UNSPEC_MULQ_S_W))\n+     (set (reg:CCDSP CCDSP_OU_REGNUM)\n+\t  (unspec:CCDSP [(match_dup 1) (match_dup 2)] UNSPEC_MULQ_S_W))\n+     (clobber (match_scratch:DI 3 \"=x\"))])]\n+  \"TARGET_DSPR2\"\n+  \"mulq_s.w\\t%0,%z1,%z2\"\n+  [(set_attr \"type\"\t\"imul3\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_mulsa_w_ph\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n+\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"0\")\n+\t\t    (match_operand:V2HI 2 \"reg_or_0_operand\" \"dYG\")\n+\t\t    (match_operand:V2HI 3 \"reg_or_0_operand\" \"dYG\")]\n+\t\t   UNSPEC_MULSA_W_PH))]\n+  \"TARGET_DSPR2 && !TARGET_64BIT\"\n+  \"mulsa.w.ph\\t%q0,%z2,%z3\"\n+  [(set_attr \"type\"\t\"imadd\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_mult\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n+\t(mult:DI\n+\t (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n+\t (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))]\n+  \"TARGET_DSPR2 && !TARGET_64BIT\"\n+  \"mult\\t%q0,%1,%2\"\n+  [(set_attr \"type\"\t\"imul\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_multu\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n+\t(mult:DI\n+\t (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n+\t (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))]\n+  \"TARGET_DSPR2 && !TARGET_64BIT\"\n+  \"multu\\t%q0,%1,%2\"\n+  [(set_attr \"type\"\t\"imul\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_precr_qb_ph\"\n+  [(set (match_operand:V4QI 0 \"register_operand\" \"=d\")\n+\t(unspec:V4QI [(match_operand:V2HI 1 \"reg_or_0_operand\" \"dYG\")\n+\t\t      (match_operand:V2HI 2 \"reg_or_0_operand\" \"dYG\")]\n+\t\t     UNSPEC_PRECR_QB_PH))]\n+  \"TARGET_DSPR2\"\n+  \"precr.qb.ph\\t%0,%z1,%z2\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_precr_sra_ph_w\"\n+  [(set (match_operand:V2HI 0 \"register_operand\" \"=d\")\n+\t(unspec:V2HI [(match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:SI 2 \"reg_or_0_operand\" \"dJ\")\n+\t\t      (match_operand:SI 3 \"const_int_operand\" \"n\")]\n+\t\t     UNSPEC_PRECR_SRA_PH_W))]\n+  \"TARGET_DSPR2\"\n+{\n+  if (INTVAL (operands[3]) & ~(unsigned HOST_WIDE_INT) 31)\n+    operands[2] = GEN_INT (INTVAL (operands[2]) & 31);\n+  return \"precr_sra.ph.w\\t%0,%z2,%3\";\n+}\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_precr_sra_r_ph_w\"\n+  [(set (match_operand:V2HI 0 \"register_operand\" \"=d\")\n+\t(unspec:V2HI [(match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:SI 2 \"reg_or_0_operand\" \"dJ\")\n+\t\t      (match_operand:SI 3 \"const_int_operand\" \"n\")]\n+\t\t     UNSPEC_PRECR_SRA_R_PH_W))]\n+  \"TARGET_DSPR2\"\n+{\n+  if (INTVAL (operands[3]) & ~(unsigned HOST_WIDE_INT) 31)\n+    operands[2] = GEN_INT (INTVAL (operands[2]) & 31);\n+  return \"precr_sra_r.ph.w\\t%0,%z2,%3\";\n+}\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_prepend\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t    (match_operand:SI 2 \"reg_or_0_operand\" \"dJ\")\n+\t\t    (match_operand:SI 3 \"const_int_operand\" \"n\")]\n+\t\t   UNSPEC_PREPEND))]\n+  \"TARGET_DSPR2\"\n+{\n+  if (INTVAL (operands[3]) & ~(unsigned HOST_WIDE_INT) 31)\n+    operands[2] = GEN_INT (INTVAL (operands[2]) & 31);\n+  return \"prepend\\t%0,%z2,%3\";\n+}\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_shra_qb\"\n+  [(set (match_operand:V4QI 0 \"register_operand\" \"=d,d\")\n+\t(unspec:V4QI [(match_operand:V4QI 1 \"reg_or_0_operand\" \"dYG,dYG\")\n+\t\t      (match_operand:SI 2 \"arith_operand\" \"I,d\")]\n+\t\t     UNSPEC_SHRA_QB))]\n+  \"TARGET_DSPR2\"\n+{\n+  if (which_alternative == 0)\n+    {\n+      if (INTVAL (operands[2]) & ~(unsigned HOST_WIDE_INT) 7)\n+\toperands[2] = GEN_INT (INTVAL (operands[2]) & 7);\n+      return \"shra.qb\\t%0,%z1,%2\";\n+    }\n+  return \"shrav.qb\\t%0,%z1,%2\";\n+}\n+  [(set_attr \"type\"\t\"shift\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+\n+(define_insn \"mips_shra_r_qb\"\n+  [(set (match_operand:V4QI 0 \"register_operand\" \"=d,d\")\n+\t(unspec:V4QI [(match_operand:V4QI 1 \"reg_or_0_operand\" \"dYG,dYG\")\n+\t\t      (match_operand:SI 2 \"arith_operand\" \"I,d\")]\n+\t\t     UNSPEC_SHRA_R_QB))]\n+  \"TARGET_DSPR2\"\n+{\n+  if (which_alternative == 0)\n+    {\n+      if (INTVAL (operands[2]) & ~(unsigned HOST_WIDE_INT) 7)\n+\toperands[2] = GEN_INT (INTVAL (operands[2]) & 7);\n+      return \"shra_r.qb\\t%0,%z1,%2\";\n+    }\n+  return \"shrav_r.qb\\t%0,%z1,%2\";\n+}\n+  [(set_attr \"type\"\t\"shift\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_shrl_ph\"\n+  [(set (match_operand:V2HI 0 \"register_operand\" \"=d,d\")\n+\t(unspec:V2HI [(match_operand:V2HI 1 \"reg_or_0_operand\" \"dYG,dYG\")\n+\t\t      (match_operand:SI 2 \"arith_operand\" \"I,d\")]\n+\t\t     UNSPEC_SHRL_PH))]\n+  \"TARGET_DSPR2\"\n+{\n+  if (which_alternative == 0)\n+    {\n+      if (INTVAL (operands[2]) & ~(unsigned HOST_WIDE_INT) 15)\n+\toperands[2] = GEN_INT (INTVAL (operands[2]) & 15);\n+      return \"shrl.ph\\t%0,%z1,%2\";\n+    }\n+  return \"shrlv.ph\\t%0,%z1,%2\";\n+}\n+  [(set_attr \"type\"\t\"shift\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_subu_ph\"\n+  [(parallel\n+    [(set (match_operand:V2HI 0 \"register_operand\" \"=d\")\n+\t  (unspec:V2HI [(match_operand:V2HI 1 \"reg_or_0_operand\" \"dYG\")\n+\t\t\t(match_operand:V2HI 2 \"reg_or_0_operand\" \"dYG\")]\n+\t\t       UNSPEC_SUBU_PH))\n+     (set (reg:CCDSP CCDSP_OU_REGNUM)\n+\t  (unspec:CCDSP [(match_dup 1) (match_dup 2)] UNSPEC_SUBU_PH))])]\n+  \"TARGET_DSPR2\"\n+  \"subu.ph\\t%0,%z1,%z2\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_subu_s_ph\"\n+  [(parallel\n+    [(set (match_operand:V2HI 0 \"register_operand\" \"=d\")\n+\t  (unspec:V2HI [(match_operand:V2HI 1 \"reg_or_0_operand\" \"dYG\")\n+\t\t\t(match_operand:V2HI 2 \"reg_or_0_operand\" \"dYG\")]\n+\t\t       UNSPEC_SUBU_S_PH))\n+     (set (reg:CCDSP CCDSP_OU_REGNUM)\n+\t  (unspec:CCDSP [(match_dup 1) (match_dup 2)] UNSPEC_SUBU_S_PH))])]\n+  \"TARGET_DSPR2\"\n+  \"subu_s.ph\\t%0,%z1,%z2\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_subuh_qb\"\n+  [(set (match_operand:V4QI 0 \"register_operand\" \"=d\")\n+\t(unspec:V4QI [(match_operand:V4QI 1 \"reg_or_0_operand\" \"dYG\")\n+\t\t      (match_operand:V4QI 2 \"reg_or_0_operand\" \"dYG\")]\n+\t\t     UNSPEC_SUBUH_QB))]\n+  \"TARGET_DSPR2\"\n+  \"subuh.qb\\t%0,%z1,%z2\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_subuh_r_qb\"\n+  [(set (match_operand:V4QI 0 \"register_operand\" \"=d\")\n+\t(unspec:V4QI [(match_operand:V4QI 1 \"reg_or_0_operand\" \"dYG\")\n+\t\t      (match_operand:V4QI 2 \"reg_or_0_operand\" \"dYG\")]\n+\t\t     UNSPEC_SUBUH_R_QB))]\n+  \"TARGET_DSPR2\"\n+  \"subuh_r.qb\\t%0,%z1,%z2\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_addqh_ph\"\n+  [(set (match_operand:V2HI 0 \"register_operand\" \"=d\")\n+\t(unspec:V2HI [(match_operand:V2HI 1 \"reg_or_0_operand\" \"dYG\")\n+\t\t      (match_operand:V2HI 2 \"reg_or_0_operand\" \"dYG\")]\n+\t\t     UNSPEC_ADDQH_PH))]\n+  \"TARGET_DSPR2\"\n+  \"addqh.ph\\t%0,%z1,%z2\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_addqh_r_ph\"\n+  [(set (match_operand:V2HI 0 \"register_operand\" \"=d\")\n+\t(unspec:V2HI [(match_operand:V2HI 1 \"reg_or_0_operand\" \"dYG\")\n+\t\t      (match_operand:V2HI 2 \"reg_or_0_operand\" \"dYG\")]\n+\t\t     UNSPEC_ADDQH_R_PH))]\n+  \"TARGET_DSPR2\"\n+  \"addqh_r.ph\\t%0,%z1,%z2\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_addqh_w\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(unspec:SI [(match_operand:SI 1 \"reg_or_0_operand\" \"dJ\")\n+\t\t    (match_operand:SI 2 \"reg_or_0_operand\" \"dJ\")]\n+\t\t   UNSPEC_ADDQH_W))]\n+  \"TARGET_DSPR2\"\n+  \"addqh.w\\t%0,%z1,%z2\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_addqh_r_w\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(unspec:SI [(match_operand:SI 1 \"reg_or_0_operand\" \"dJ\")\n+\t\t    (match_operand:SI 2 \"reg_or_0_operand\" \"dJ\")]\n+\t\t   UNSPEC_ADDQH_R_W))]\n+  \"TARGET_DSPR2\"\n+  \"addqh_r.w\\t%0,%z1,%z2\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_subqh_ph\"\n+  [(set (match_operand:V2HI 0 \"register_operand\" \"=d\")\n+\t(unspec:V2HI [(match_operand:V2HI 1 \"reg_or_0_operand\" \"dYG\")\n+\t\t      (match_operand:V2HI 2 \"reg_or_0_operand\" \"dYG\")]\n+\t\t     UNSPEC_SUBQH_PH))]\n+  \"TARGET_DSPR2\"\n+  \"subqh.ph\\t%0,%z1,%z2\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_subqh_r_ph\"\n+  [(set (match_operand:V2HI 0 \"register_operand\" \"=d\")\n+\t(unspec:V2HI [(match_operand:V2HI 1 \"reg_or_0_operand\" \"dYG\")\n+\t\t      (match_operand:V2HI 2 \"reg_or_0_operand\" \"dYG\")]\n+\t\t     UNSPEC_SUBQH_R_PH))]\n+  \"TARGET_DSPR2\"\n+  \"subqh_r.ph\\t%0,%z1,%z2\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_subqh_w\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(unspec:SI [(match_operand:SI 1 \"reg_or_0_operand\" \"dJ\")\n+\t\t    (match_operand:SI 2 \"reg_or_0_operand\" \"dJ\")]\n+\t\t   UNSPEC_SUBQH_W))]\n+  \"TARGET_DSPR2\"\n+  \"subqh.w\\t%0,%z1,%z2\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_subqh_r_w\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(unspec:SI [(match_operand:SI 1 \"reg_or_0_operand\" \"dJ\")\n+\t\t    (match_operand:SI 2 \"reg_or_0_operand\" \"dJ\")]\n+\t\t   UNSPEC_SUBQH_R_W))]\n+  \"TARGET_DSPR2\"\n+  \"subqh_r.w\\t%0,%z1,%z2\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_dpax_w_ph\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n+\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"0\")\n+\t\t    (match_operand:V2HI 2 \"reg_or_0_operand\" \"dYG\")\n+\t\t    (match_operand:V2HI 3 \"reg_or_0_operand\" \"dYG\")]\n+\t\t   UNSPEC_DPAX_W_PH))]\n+  \"TARGET_DSPR2 && !TARGET_64BIT\"\n+  \"dpax.w.ph\\t%q0,%z2,%z3\"\n+  [(set_attr \"type\"\t\"imadd\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_dpsx_w_ph\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n+\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"0\")\n+\t\t    (match_operand:V2HI 2 \"reg_or_0_operand\" \"dYG\")\n+\t\t    (match_operand:V2HI 3 \"reg_or_0_operand\" \"dYG\")]\n+\t\t   UNSPEC_DPSX_W_PH))]\n+  \"TARGET_DSPR2 && !TARGET_64BIT\"\n+  \"dpsx.w.ph\\t%q0,%z2,%z3\"\n+  [(set_attr \"type\"\t\"imadd\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_dpaqx_s_w_ph\"\n+  [(parallel\n+    [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n+\t  (unspec:DI [(match_operand:DI 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V2HI 2 \"reg_or_0_operand\" \"dYG\")\n+\t\t      (match_operand:V2HI 3 \"reg_or_0_operand\" \"dYG\")]\n+\t\t     UNSPEC_DPAQX_S_W_PH))\n+     (set (reg:CCDSP CCDSP_OU_REGNUM)\n+\t  (unspec:CCDSP [(match_dup 1) (match_dup 2) (match_dup 3)]\n+\t\t\tUNSPEC_DPAQX_S_W_PH))])]\n+  \"TARGET_DSPR2 && !TARGET_64BIT\"\n+  \"dpaqx_s.w.ph\\t%q0,%z2,%z3\"\n+  [(set_attr \"type\"\t\"imadd\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_dpaqx_sa_w_ph\"\n+  [(parallel\n+    [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n+\t  (unspec:DI [(match_operand:DI 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V2HI 2 \"reg_or_0_operand\" \"dYG\")\n+\t\t      (match_operand:V2HI 3 \"reg_or_0_operand\" \"dYG\")]\n+\t\t     UNSPEC_DPAQX_SA_W_PH))\n+     (set (reg:CCDSP CCDSP_OU_REGNUM)\n+\t  (unspec:CCDSP [(match_dup 1) (match_dup 2) (match_dup 3)]\n+\t\t\tUNSPEC_DPAQX_SA_W_PH))])]\n+  \"TARGET_DSPR2 && !TARGET_64BIT\"\n+  \"dpaqx_sa.w.ph\\t%q0,%z2,%z3\"\n+  [(set_attr \"type\"\t\"imadd\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_dpsqx_s_w_ph\"\n+  [(parallel\n+    [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n+\t  (unspec:DI [(match_operand:DI 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V2HI 2 \"reg_or_0_operand\" \"dYG\")\n+\t\t      (match_operand:V2HI 3 \"reg_or_0_operand\" \"dYG\")]\n+\t\t     UNSPEC_DPSQX_S_W_PH))\n+     (set (reg:CCDSP CCDSP_OU_REGNUM)\n+\t  (unspec:CCDSP [(match_dup 1) (match_dup 2) (match_dup 3)]\n+\t\t\tUNSPEC_DPSQX_S_W_PH))])]\n+  \"TARGET_DSPR2 && !TARGET_64BIT\"\n+  \"dpsqx_s.w.ph\\t%q0,%z2,%z3\"\n+  [(set_attr \"type\"\t\"imadd\")\n+   (set_attr \"mode\"\t\"SI\")])\n+\n+(define_insn \"mips_dpsqx_sa_w_ph\"\n+  [(parallel\n+    [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n+\t  (unspec:DI [(match_operand:DI 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V2HI 2 \"reg_or_0_operand\" \"dYG\")\n+\t\t      (match_operand:V2HI 3 \"reg_or_0_operand\" \"dYG\")]\n+\t\t     UNSPEC_DPSQX_SA_W_PH))\n+     (set (reg:CCDSP CCDSP_OU_REGNUM)\n+\t  (unspec:CCDSP [(match_dup 1) (match_dup 2) (match_dup 3)]\n+\t\t\tUNSPEC_DPSQX_SA_W_PH))])]\n+  \"TARGET_DSPR2 && !TARGET_64BIT\"\n+  \"dpsqx_sa.w.ph\\t%q0,%z2,%z3\"\n+  [(set_attr \"type\"\t\"imadd\")\n+   (set_attr \"mode\"\t\"SI\")])\n+"}, {"sha": "7203a83a7ccb50f925e6c049d4a6c1af7824df48", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 135, "deletions": 23, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3204138527f49b0f828ad77a339fc5cf3d834cdb/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3204138527f49b0f828ad77a339fc5cf3d834cdb/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=3204138527f49b0f828ad77a339fc5cf3d834cdb", "patch": "@@ -180,6 +180,14 @@ enum mips_function_type\n   MIPS_VOID_FTYPE_V2HI_V2HI,\n   MIPS_VOID_FTYPE_V4QI_V4QI,\n \n+  /* For MIPS DSP REV 2 ASE.  */\n+  MIPS_V4QI_FTYPE_V4QI,\n+  MIPS_SI_FTYPE_SI_SI_SI,\n+  MIPS_DI_FTYPE_DI_USI_USI,\n+  MIPS_DI_FTYPE_SI_SI,\n+  MIPS_DI_FTYPE_USI_USI,\n+  MIPS_V2HI_FTYPE_SI_SI_SI,\n+\n   /* The last type.  */\n   MIPS_MAX_FTYPE_MAX\n };\n@@ -4929,6 +4937,10 @@ override_options (void)\n   if (TARGET_PAIRED_SINGLE_FLOAT && !ISA_MIPS64)\n     error (\"-mips3d/-mpaired-single must be used with -mips64\");\n \n+  /* If TARGET_DSPR2, enable MASK_DSP.  */\n+  if (TARGET_DSPR2)\n+    target_flags |= MASK_DSP;\n+\n   if (TARGET_MIPS16 && TARGET_DSP)\n     error (\"-mips16 and -mdsp cannot be used together\");\n \n@@ -10096,6 +10108,7 @@ static const struct builtin_description sb1_bdesc[] =\n #define CODE_FOR_mips_addu_qb CODE_FOR_addv4qi3\n #define CODE_FOR_mips_subq_ph CODE_FOR_subv2hi3\n #define CODE_FOR_mips_subu_qb CODE_FOR_subv4qi3\n+#define CODE_FOR_mips_mul_ph CODE_FOR_mulv2hi3\n \n /* Define a MIPS_BUILTIN_DIRECT_NO_TARGET function for instruction\n    CODE_FOR_mips_<INSN>.  FUNCTION_TYPE and TARGET_FLAGS are\n@@ -10155,19 +10168,6 @@ static const struct builtin_description dsp_bdesc[] =\n   DIRECT_BUILTIN (mulq_rs_ph, MIPS_V2HI_FTYPE_V2HI_V2HI, MASK_DSP),\n   DIRECT_BUILTIN (muleq_s_w_phl, MIPS_SI_FTYPE_V2HI_V2HI, MASK_DSP),\n   DIRECT_BUILTIN (muleq_s_w_phr, MIPS_SI_FTYPE_V2HI_V2HI, MASK_DSP),\n-  DIRECT_BUILTIN (dpau_h_qbl, MIPS_DI_FTYPE_DI_V4QI_V4QI, MASK_DSP),\n-  DIRECT_BUILTIN (dpau_h_qbr, MIPS_DI_FTYPE_DI_V4QI_V4QI, MASK_DSP),\n-  DIRECT_BUILTIN (dpsu_h_qbl, MIPS_DI_FTYPE_DI_V4QI_V4QI, MASK_DSP),\n-  DIRECT_BUILTIN (dpsu_h_qbr, MIPS_DI_FTYPE_DI_V4QI_V4QI, MASK_DSP),\n-  DIRECT_BUILTIN (dpaq_s_w_ph, MIPS_DI_FTYPE_DI_V2HI_V2HI, MASK_DSP),\n-  DIRECT_BUILTIN (dpsq_s_w_ph, MIPS_DI_FTYPE_DI_V2HI_V2HI, MASK_DSP),\n-  DIRECT_BUILTIN (mulsaq_s_w_ph, MIPS_DI_FTYPE_DI_V2HI_V2HI, MASK_DSP),\n-  DIRECT_BUILTIN (dpaq_sa_l_w, MIPS_DI_FTYPE_DI_SI_SI, MASK_DSP),\n-  DIRECT_BUILTIN (dpsq_sa_l_w, MIPS_DI_FTYPE_DI_SI_SI, MASK_DSP),\n-  DIRECT_BUILTIN (maq_s_w_phl, MIPS_DI_FTYPE_DI_V2HI_V2HI, MASK_DSP),\n-  DIRECT_BUILTIN (maq_s_w_phr, MIPS_DI_FTYPE_DI_V2HI_V2HI, MASK_DSP),\n-  DIRECT_BUILTIN (maq_sa_w_phl, MIPS_DI_FTYPE_DI_V2HI_V2HI, MASK_DSP),\n-  DIRECT_BUILTIN (maq_sa_w_phr, MIPS_DI_FTYPE_DI_V2HI_V2HI, MASK_DSP),\n   DIRECT_BUILTIN (bitrev, MIPS_SI_FTYPE_SI, MASK_DSP),\n   DIRECT_BUILTIN (insv, MIPS_SI_FTYPE_SI_SI, MASK_DSP),\n   DIRECT_BUILTIN (repl_qb, MIPS_V4QI_FTYPE_SI, MASK_DSP),\n@@ -10184,6 +10184,65 @@ static const struct builtin_description dsp_bdesc[] =\n   DIRECT_BUILTIN (pick_qb, MIPS_V4QI_FTYPE_V4QI_V4QI, MASK_DSP),\n   DIRECT_BUILTIN (pick_ph, MIPS_V2HI_FTYPE_V2HI_V2HI, MASK_DSP),\n   DIRECT_BUILTIN (packrl_ph, MIPS_V2HI_FTYPE_V2HI_V2HI, MASK_DSP),\n+  DIRECT_NO_TARGET_BUILTIN (wrdsp, MIPS_VOID_FTYPE_SI_SI, MASK_DSP),\n+  DIRECT_BUILTIN (rddsp, MIPS_SI_FTYPE_SI, MASK_DSP),\n+  DIRECT_BUILTIN (lbux, MIPS_SI_FTYPE_PTR_SI, MASK_DSP),\n+  DIRECT_BUILTIN (lhx, MIPS_SI_FTYPE_PTR_SI, MASK_DSP),\n+  DIRECT_BUILTIN (lwx, MIPS_SI_FTYPE_PTR_SI, MASK_DSP),\n+  BPOSGE_BUILTIN (32, MASK_DSP),\n+\n+  /* The following are for the MIPS DSP ASE REV 2.  */\n+  DIRECT_BUILTIN (absq_s_qb, MIPS_V4QI_FTYPE_V4QI, MASK_DSPR2),\n+  DIRECT_BUILTIN (addu_ph, MIPS_V2HI_FTYPE_V2HI_V2HI, MASK_DSPR2),\n+  DIRECT_BUILTIN (addu_s_ph, MIPS_V2HI_FTYPE_V2HI_V2HI, MASK_DSPR2),\n+  DIRECT_BUILTIN (adduh_qb, MIPS_V4QI_FTYPE_V4QI_V4QI, MASK_DSPR2),\n+  DIRECT_BUILTIN (adduh_r_qb, MIPS_V4QI_FTYPE_V4QI_V4QI, MASK_DSPR2),\n+  DIRECT_BUILTIN (append, MIPS_SI_FTYPE_SI_SI_SI, MASK_DSPR2),\n+  DIRECT_BUILTIN (balign, MIPS_SI_FTYPE_SI_SI_SI, MASK_DSPR2),\n+  DIRECT_BUILTIN (cmpgdu_eq_qb, MIPS_SI_FTYPE_V4QI_V4QI, MASK_DSPR2),\n+  DIRECT_BUILTIN (cmpgdu_lt_qb, MIPS_SI_FTYPE_V4QI_V4QI, MASK_DSPR2),\n+  DIRECT_BUILTIN (cmpgdu_le_qb, MIPS_SI_FTYPE_V4QI_V4QI, MASK_DSPR2),\n+  DIRECT_BUILTIN (mul_ph, MIPS_V2HI_FTYPE_V2HI_V2HI, MASK_DSPR2),\n+  DIRECT_BUILTIN (mul_s_ph, MIPS_V2HI_FTYPE_V2HI_V2HI, MASK_DSPR2),\n+  DIRECT_BUILTIN (mulq_rs_w, MIPS_SI_FTYPE_SI_SI, MASK_DSPR2),\n+  DIRECT_BUILTIN (mulq_s_ph, MIPS_V2HI_FTYPE_V2HI_V2HI, MASK_DSPR2),\n+  DIRECT_BUILTIN (mulq_s_w, MIPS_SI_FTYPE_SI_SI, MASK_DSPR2),\n+  DIRECT_BUILTIN (precr_qb_ph, MIPS_V4QI_FTYPE_V2HI_V2HI, MASK_DSPR2),\n+  DIRECT_BUILTIN (precr_sra_ph_w, MIPS_V2HI_FTYPE_SI_SI_SI, MASK_DSPR2),\n+  DIRECT_BUILTIN (precr_sra_r_ph_w, MIPS_V2HI_FTYPE_SI_SI_SI, MASK_DSPR2),\n+  DIRECT_BUILTIN (prepend, MIPS_SI_FTYPE_SI_SI_SI, MASK_DSPR2),\n+  DIRECT_BUILTIN (shra_qb, MIPS_V4QI_FTYPE_V4QI_SI, MASK_DSPR2),\n+  DIRECT_BUILTIN (shra_r_qb, MIPS_V4QI_FTYPE_V4QI_SI, MASK_DSPR2),\n+  DIRECT_BUILTIN (shrl_ph, MIPS_V2HI_FTYPE_V2HI_SI, MASK_DSPR2),\n+  DIRECT_BUILTIN (subu_ph, MIPS_V2HI_FTYPE_V2HI_V2HI, MASK_DSPR2),\n+  DIRECT_BUILTIN (subu_s_ph, MIPS_V2HI_FTYPE_V2HI_V2HI, MASK_DSPR2),\n+  DIRECT_BUILTIN (subuh_qb, MIPS_V4QI_FTYPE_V4QI_V4QI, MASK_DSPR2),\n+  DIRECT_BUILTIN (subuh_r_qb, MIPS_V4QI_FTYPE_V4QI_V4QI, MASK_DSPR2),\n+  DIRECT_BUILTIN (addqh_ph, MIPS_V2HI_FTYPE_V2HI_V2HI, MASK_DSPR2),\n+  DIRECT_BUILTIN (addqh_r_ph, MIPS_V2HI_FTYPE_V2HI_V2HI, MASK_DSPR2),\n+  DIRECT_BUILTIN (addqh_w, MIPS_SI_FTYPE_SI_SI, MASK_DSPR2),\n+  DIRECT_BUILTIN (addqh_r_w, MIPS_SI_FTYPE_SI_SI, MASK_DSPR2),\n+  DIRECT_BUILTIN (subqh_ph, MIPS_V2HI_FTYPE_V2HI_V2HI, MASK_DSPR2),\n+  DIRECT_BUILTIN (subqh_r_ph, MIPS_V2HI_FTYPE_V2HI_V2HI, MASK_DSPR2),\n+  DIRECT_BUILTIN (subqh_w, MIPS_SI_FTYPE_SI_SI, MASK_DSPR2),\n+  DIRECT_BUILTIN (subqh_r_w, MIPS_SI_FTYPE_SI_SI, MASK_DSPR2)\n+};\n+\n+static const struct builtin_description dsp_32only_bdesc[] =\n+{\n+  DIRECT_BUILTIN (dpau_h_qbl, MIPS_DI_FTYPE_DI_V4QI_V4QI, MASK_DSP),\n+  DIRECT_BUILTIN (dpau_h_qbr, MIPS_DI_FTYPE_DI_V4QI_V4QI, MASK_DSP),\n+  DIRECT_BUILTIN (dpsu_h_qbl, MIPS_DI_FTYPE_DI_V4QI_V4QI, MASK_DSP),\n+  DIRECT_BUILTIN (dpsu_h_qbr, MIPS_DI_FTYPE_DI_V4QI_V4QI, MASK_DSP),\n+  DIRECT_BUILTIN (dpaq_s_w_ph, MIPS_DI_FTYPE_DI_V2HI_V2HI, MASK_DSP),\n+  DIRECT_BUILTIN (dpsq_s_w_ph, MIPS_DI_FTYPE_DI_V2HI_V2HI, MASK_DSP),\n+  DIRECT_BUILTIN (mulsaq_s_w_ph, MIPS_DI_FTYPE_DI_V2HI_V2HI, MASK_DSP),\n+  DIRECT_BUILTIN (dpaq_sa_l_w, MIPS_DI_FTYPE_DI_SI_SI, MASK_DSP),\n+  DIRECT_BUILTIN (dpsq_sa_l_w, MIPS_DI_FTYPE_DI_SI_SI, MASK_DSP),\n+  DIRECT_BUILTIN (maq_s_w_phl, MIPS_DI_FTYPE_DI_V2HI_V2HI, MASK_DSP),\n+  DIRECT_BUILTIN (maq_s_w_phr, MIPS_DI_FTYPE_DI_V2HI_V2HI, MASK_DSP),\n+  DIRECT_BUILTIN (maq_sa_w_phl, MIPS_DI_FTYPE_DI_V2HI_V2HI, MASK_DSP),\n+  DIRECT_BUILTIN (maq_sa_w_phr, MIPS_DI_FTYPE_DI_V2HI_V2HI, MASK_DSP),\n   DIRECT_BUILTIN (extr_w, MIPS_SI_FTYPE_DI_SI, MASK_DSP),\n   DIRECT_BUILTIN (extr_r_w, MIPS_SI_FTYPE_DI_SI, MASK_DSP),\n   DIRECT_BUILTIN (extr_rs_w, MIPS_SI_FTYPE_DI_SI, MASK_DSP),\n@@ -10192,12 +10251,23 @@ static const struct builtin_description dsp_bdesc[] =\n   DIRECT_BUILTIN (extpdp, MIPS_SI_FTYPE_DI_SI, MASK_DSP),\n   DIRECT_BUILTIN (shilo, MIPS_DI_FTYPE_DI_SI, MASK_DSP),\n   DIRECT_BUILTIN (mthlip, MIPS_DI_FTYPE_DI_SI, MASK_DSP),\n-  DIRECT_NO_TARGET_BUILTIN (wrdsp, MIPS_VOID_FTYPE_SI_SI, MASK_DSP),\n-  DIRECT_BUILTIN (rddsp, MIPS_SI_FTYPE_SI, MASK_DSP),\n-  DIRECT_BUILTIN (lbux, MIPS_SI_FTYPE_PTR_SI, MASK_DSP),\n-  DIRECT_BUILTIN (lhx, MIPS_SI_FTYPE_PTR_SI, MASK_DSP),\n-  DIRECT_BUILTIN (lwx, MIPS_SI_FTYPE_PTR_SI, MASK_DSP),\n-  BPOSGE_BUILTIN (32, MASK_DSP)\n+\n+  /* The following are for the MIPS DSP ASE REV 2.  */\n+  DIRECT_BUILTIN (dpa_w_ph, MIPS_DI_FTYPE_DI_V2HI_V2HI, MASK_DSPR2),\n+  DIRECT_BUILTIN (dps_w_ph, MIPS_DI_FTYPE_DI_V2HI_V2HI, MASK_DSPR2),\n+  DIRECT_BUILTIN (madd, MIPS_DI_FTYPE_DI_SI_SI, MASK_DSPR2),\n+  DIRECT_BUILTIN (maddu, MIPS_DI_FTYPE_DI_USI_USI, MASK_DSPR2),\n+  DIRECT_BUILTIN (msub, MIPS_DI_FTYPE_DI_SI_SI, MASK_DSPR2),\n+  DIRECT_BUILTIN (msubu, MIPS_DI_FTYPE_DI_USI_USI, MASK_DSPR2),\n+  DIRECT_BUILTIN (mulsa_w_ph, MIPS_DI_FTYPE_DI_V2HI_V2HI, MASK_DSPR2),\n+  DIRECT_BUILTIN (mult, MIPS_DI_FTYPE_SI_SI, MASK_DSPR2),\n+  DIRECT_BUILTIN (multu, MIPS_DI_FTYPE_USI_USI, MASK_DSPR2),\n+  DIRECT_BUILTIN (dpax_w_ph, MIPS_DI_FTYPE_DI_V2HI_V2HI, MASK_DSPR2),\n+  DIRECT_BUILTIN (dpsx_w_ph, MIPS_DI_FTYPE_DI_V2HI_V2HI, MASK_DSPR2),\n+  DIRECT_BUILTIN (dpaqx_s_w_ph, MIPS_DI_FTYPE_DI_V2HI_V2HI, MASK_DSPR2),\n+  DIRECT_BUILTIN (dpaqx_sa_w_ph, MIPS_DI_FTYPE_DI_V2HI_V2HI, MASK_DSPR2),\n+  DIRECT_BUILTIN (dpsqx_s_w_ph, MIPS_DI_FTYPE_DI_V2HI_V2HI, MASK_DSPR2),\n+  DIRECT_BUILTIN (dpsqx_sa_w_ph, MIPS_DI_FTYPE_DI_V2HI_V2HI, MASK_DSPR2)\n };\n \n /* This helps provide a mapping from builtin function codes to bdesc\n@@ -10214,13 +10284,19 @@ struct bdesc_map\n   /* The target processor that supports these builtin functions.\n      PROCESSOR_MAX means we enable them for all processors.  */\n   enum processor_type proc;\n+\n+  /* If the target has these flags, this builtin function table\n+     will not be supported.  */\n+  int unsupported_target_flags;\n };\n \n static const struct bdesc_map bdesc_arrays[] =\n {\n-  { mips_bdesc, ARRAY_SIZE (mips_bdesc), PROCESSOR_MAX },\n-  { sb1_bdesc, ARRAY_SIZE (sb1_bdesc), PROCESSOR_SB1 },\n-  { dsp_bdesc, ARRAY_SIZE (dsp_bdesc), PROCESSOR_MAX }\n+  { mips_bdesc, ARRAY_SIZE (mips_bdesc), PROCESSOR_MAX, 0 },\n+  { sb1_bdesc, ARRAY_SIZE (sb1_bdesc), PROCESSOR_SB1, 0 },\n+  { dsp_bdesc, ARRAY_SIZE (dsp_bdesc), PROCESSOR_MAX, 0 },\n+  { dsp_32only_bdesc, ARRAY_SIZE (dsp_32only_bdesc), PROCESSOR_MAX,\n+    MASK_64BIT }\n };\n \n /* Take the argument ARGNUM of the arglist of EXP and convert it into a form\n@@ -10541,6 +10617,41 @@ mips_init_builtins (void)\n \n       types[MIPS_SI_FTYPE_VOID]\n \t= build_function_type (intSI_type_node, void_list_node);\n+\n+      if (TARGET_DSPR2)\n+\t{\n+\t  types[MIPS_V4QI_FTYPE_V4QI]\n+\t    = build_function_type_list (V4QI_type_node,\n+\t\t\t\t\tV4QI_type_node,\n+\t\t\t\t\tNULL_TREE);\n+\n+\t  types[MIPS_SI_FTYPE_SI_SI_SI]\n+\t    = build_function_type_list (intSI_type_node,\n+\t\t\t\t\tintSI_type_node, intSI_type_node,\n+\t\t\t\t\tintSI_type_node, NULL_TREE);\n+\n+\t  types[MIPS_DI_FTYPE_DI_USI_USI]\n+\t    = build_function_type_list (intDI_type_node,\n+\t\t\t\t\tintDI_type_node,\n+\t\t\t\t\tunsigned_intSI_type_node,\n+\t\t\t\t\tunsigned_intSI_type_node, NULL_TREE);\n+\n+\t  types[MIPS_DI_FTYPE_SI_SI]\n+\t    = build_function_type_list (intDI_type_node,\n+\t\t\t\t\tintSI_type_node, intSI_type_node,\n+\t\t\t\t\tNULL_TREE);\n+\n+\t  types[MIPS_DI_FTYPE_USI_USI]\n+\t    = build_function_type_list (intDI_type_node,\n+\t\t\t\t\tunsigned_intSI_type_node,\n+\t\t\t\t\tunsigned_intSI_type_node, NULL_TREE);\n+\n+\t  types[MIPS_V2HI_FTYPE_SI_SI_SI]\n+\t    = build_function_type_list (V2HI_type_node,\n+\t\t\t\t\tintSI_type_node, intSI_type_node,\n+\t\t\t\t\tintSI_type_node, NULL_TREE);\n+\n+\t}\n     }\n \n   /* Iterate through all of the bdesc arrays, initializing all of the\n@@ -10549,7 +10660,8 @@ mips_init_builtins (void)\n   offset = 0;\n   for (m = bdesc_arrays; m < &bdesc_arrays[ARRAY_SIZE (bdesc_arrays)]; m++)\n     {\n-      if (m->proc == PROCESSOR_MAX || (m->proc == mips_arch))\n+      if ((m->proc == PROCESSOR_MAX || (m->proc == mips_arch))\n+\t  && (m->unsupported_target_flags & target_flags) == 0)\n \tfor (d = m->bdesc; d < &m->bdesc[m->size]; d++)\n \t  if ((d->target_flags & target_flags) == d->target_flags)\n \t    add_builtin_function (d->name, types[d->function_type],"}, {"sha": "ef6b02c4186b6c07dcc5b297095c75f9a174f095", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3204138527f49b0f828ad77a339fc5cf3d834cdb/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3204138527f49b0f828ad77a339fc5cf3d834cdb/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=3204138527f49b0f828ad77a339fc5cf3d834cdb", "patch": "@@ -340,6 +340,9 @@ extern const struct mips_rtx_cost_data *mips_cost;\n       if (TARGET_DSP)\t\t\t\t\t\t\\\n \tbuiltin_define (\"__mips_dsp\");\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n+      if (TARGET_DSPR2)\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__mips_dspr2\");\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n       MIPS_CPP_SET_PROCESSOR (\"_MIPS_ARCH\", mips_arch_info);\t\\\n       MIPS_CPP_SET_PROCESSOR (\"_MIPS_TUNE\", mips_tune_info);\t\\\n \t\t\t\t\t\t\t\t\\\n@@ -820,6 +823,7 @@ extern const struct mips_rtx_cost_data *mips_cost;\n %{mips16:%{!mno-mips16:-mips16}} %{mno-mips16:-no-mips16} \\\n %{mips3d:-mips3d} \\\n %{mdsp} \\\n+%{mdspr2} \\\n %{mfix-vr4120} %{mfix-vr4130} \\\n %(subtarget_asm_optimizing_spec) \\\n %(subtarget_asm_debugging_spec) \\"}, {"sha": "149c7f4f0406324f93990e81ab207fbfca74c8a2", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3204138527f49b0f828ad77a339fc5cf3d834cdb/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3204138527f49b0f828ad77a339fc5cf3d834cdb/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=3204138527f49b0f828ad77a339fc5cf3d834cdb", "patch": "@@ -147,6 +147,57 @@\n    (UNSPEC_MTHLIP\t\t365)\n    (UNSPEC_WRDSP\t\t366)\n    (UNSPEC_RDDSP\t\t367)\n+\n+   ;; MIPS DSP ASE REV 2 Revision 0.02 11/24/2006\n+   (UNSPEC_ABSQ_S_QB\t\t400)\n+   (UNSPEC_ADDU_PH\t\t401)\n+   (UNSPEC_ADDU_S_PH\t\t402)\n+   (UNSPEC_ADDUH_QB\t\t403)\n+   (UNSPEC_ADDUH_R_QB\t\t404)\n+   (UNSPEC_APPEND\t\t405)\n+   (UNSPEC_BALIGN\t\t406)\n+   (UNSPEC_CMPGDU_EQ_QB\t\t407)\n+   (UNSPEC_CMPGDU_LT_QB\t\t408)\n+   (UNSPEC_CMPGDU_LE_QB\t\t409)\n+   (UNSPEC_DPA_W_PH\t\t410)\n+   (UNSPEC_DPS_W_PH\t\t411)\n+   (UNSPEC_MADD\t\t\t412)\n+   (UNSPEC_MADDU\t\t413)\n+   (UNSPEC_MSUB\t\t\t414)\n+   (UNSPEC_MSUBU\t\t415)\n+   (UNSPEC_MUL_PH\t\t416)\n+   (UNSPEC_MUL_S_PH\t\t417)\n+   (UNSPEC_MULQ_RS_W\t\t418)\n+   (UNSPEC_MULQ_S_PH\t\t419)\n+   (UNSPEC_MULQ_S_W\t\t420)\n+   (UNSPEC_MULSA_W_PH\t\t421)\n+   (UNSPEC_MULT\t\t\t422)\n+   (UNSPEC_MULTU\t\t423)\n+   (UNSPEC_PRECR_QB_PH\t\t424)\n+   (UNSPEC_PRECR_SRA_PH_W\t425)\n+   (UNSPEC_PRECR_SRA_R_PH_W\t426)\n+   (UNSPEC_PREPEND\t\t427)\n+   (UNSPEC_SHRA_QB\t\t428)\n+   (UNSPEC_SHRA_R_QB\t\t429)\n+   (UNSPEC_SHRL_PH\t\t430)\n+   (UNSPEC_SUBU_PH\t\t431)\n+   (UNSPEC_SUBU_S_PH\t\t432)\n+   (UNSPEC_SUBUH_QB\t\t433)\n+   (UNSPEC_SUBUH_R_QB\t\t434)\n+   (UNSPEC_ADDQH_PH\t\t435)\n+   (UNSPEC_ADDQH_R_PH\t\t436)\n+   (UNSPEC_ADDQH_W\t\t437)\n+   (UNSPEC_ADDQH_R_W\t\t438)\n+   (UNSPEC_SUBQH_PH\t\t439)\n+   (UNSPEC_SUBQH_R_PH\t\t440)\n+   (UNSPEC_SUBQH_W\t\t441)\n+   (UNSPEC_SUBQH_R_W\t\t442)\n+   (UNSPEC_DPAX_W_PH\t\t443)\n+   (UNSPEC_DPSX_W_PH\t\t444)\n+   (UNSPEC_DPAQX_S_W_PH\t\t445)\n+   (UNSPEC_DPAQX_SA_W_PH\t446)\n+   (UNSPEC_DPSQX_S_W_PH\t\t447)\n+   (UNSPEC_DPSQX_SA_W_PH\t448)\n   ]\n )\n \n@@ -1505,7 +1556,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=x\")\n \t(mult:DI (any_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n \t\t (any_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))]\n-  \"!TARGET_64BIT && !TARGET_FIX_R4000\"\n+  \"!TARGET_64BIT && !TARGET_FIX_R4000 && !TARGET_DSPR2\"\n   \"mult<u>\\t%1,%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"mode\" \"SI\")])\n@@ -5514,3 +5565,7 @@\n ; The MIPS DSP Instructions.\n \n (include \"mips-dsp.md\")\n+\n+; The MIPS DSP REV 2 Instructions.\n+\n+(include \"mips-dspr2.md\")"}, {"sha": "db6055ce7a967f2e49576892e3edcac44409fa53", "filename": "gcc/config/mips/mips.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3204138527f49b0f828ad77a339fc5cf3d834cdb/gcc%2Fconfig%2Fmips%2Fmips.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3204138527f49b0f828ad77a339fc5cf3d834cdb/gcc%2Fconfig%2Fmips%2Fmips.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.opt?ref=3204138527f49b0f828ad77a339fc5cf3d834cdb", "patch": "@@ -59,6 +59,10 @@ mdsp\n Target Report Mask(DSP)\n Use MIPS-DSP instructions\n \n+mdspr2\n+Target Report Mask(DSPR2)\n+Use MIPS-DSP REV 2 instructions\n+\n mdebug\n Target Var(TARGET_DEBUG_MODE) Undocumented\n "}, {"sha": "8257fdc421bb2fc9bac7167ff30392406fcec83e", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 91, "deletions": 8, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3204138527f49b0f828ad77a339fc5cf3d834cdb/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3204138527f49b0f828ad77a339fc5cf3d834cdb/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=3204138527f49b0f828ad77a339fc5cf3d834cdb", "patch": "@@ -7403,25 +7403,36 @@ v2si __builtin_ia32_pswapdsi (v2si)\n The MIPS DSP Application-Specific Extension (ASE) includes new\n instructions that are designed to improve the performance of DSP and\n media applications.  It provides instructions that operate on packed\n-8-bit integer data, Q15 fractional data and Q31 fractional data.\n+8-bit/16-bit integer data, Q7, Q15 and Q31 fractional data.\n \n GCC supports MIPS DSP operations using both the generic\n vector extensions (@pxref{Vector Extensions}) and a collection of\n MIPS-specific built-in functions.  Both kinds of support are\n enabled by the @option{-mdsp} command-line option.\n \n+Revision 2 of the ASE was introduced in the second half of 2006.\n+This revision adds extra instructions to the original ASE, but is\n+otherwise backwards-compatible with it.  You can select revision 2\n+using the command-line option @option{-mdspr2}; this option implies\n+@option{-mdsp}.\n+\n At present, GCC only provides support for operations on 32-bit\n vectors.  The vector type associated with 8-bit integer data is\n-usually called @code{v4i8} and the vector type associated with Q15 is\n-usually called @code{v2q15}.  They can be defined in C as follows:\n+usually called @code{v4i8}, the vector type associated with Q7\n+is usually called @code{v4q7}, the vector type associated with 16-bit\n+integer data is usually called @code{v2i16}, and the vector type\n+associated with Q15 is usually called @code{v2q15}.  They can be\n+defined in C as follows:\n \n @smallexample\n-typedef char v4i8 __attribute__ ((vector_size(4)));\n+typedef signed char v4i8 __attribute__ ((vector_size(4)));\n+typedef signed char v4q7 __attribute__ ((vector_size(4)));\n+typedef short v2i16 __attribute__ ((vector_size(4)));\n typedef short v2q15 __attribute__ ((vector_size(4)));\n @end smallexample\n \n-@code{v4i8} and @code{v2q15} values are initialized in the same way as\n-aggregates.  For example:\n+@code{v4i8}, @code{v4q7}, @code{v2i16} and @code{v2q15} values are\n+initialized in the same way as aggregates.  For example:\n \n @smallexample\n v4i8 a = @{1, 2, 3, 4@};\n@@ -7440,9 +7451,10 @@ order applies to big-endian targets.  For example, the code above will\n set the lowest byte of @code{a} to @code{1} on little-endian targets\n and @code{4} on big-endian targets.\n \n-@emph{Note:} Q15 and Q31 values must be initialized with their integer\n+@emph{Note:} Q7, Q15 and Q31 values must be initialized with their integer\n representation.  As shown in this example, the integer representation\n-of a Q15 value can be obtained by multiplying the fractional value by\n+of a Q7 value can be obtained by multiplying the fractional value by\n+@code{0x1.0p7}.  The equivalent for Q15 values is to multiply by\n @code{0x1.0p15}.  The equivalent for Q31 values is to multiply by\n @code{0x1.0p31}.\n \n@@ -7458,12 +7470,22 @@ and @code{c} and @code{d} are @code{v2q15} values.\n @item @code{c - d} @tab @code{subq.ph}\n @end multitable\n \n+The table below lists the @code{v2i16} operation for which\n+hardware support exists for the DSP ASE REV 2.  @code{e} and @code{f} are\n+@code{v2i16} values.\n+\n+@multitable @columnfractions .50 .50\n+@item C code @tab MIPS instruction\n+@item @code{e * f} @tab @code{mul.ph}\n+@end multitable\n+\n It is easier to describe the DSP built-in functions if we first define\n the following types:\n \n @smallexample\n typedef int q31;\n typedef int i32;\n+typedef unsigned int ui32;\n typedef long long a64;\n @end smallexample\n \n@@ -7480,6 +7502,7 @@ numbers and register operands, or accept immediate numbers only.  The\n immediate parameters are listed as follows.\n \n @smallexample\n+imm0_3: 0 to 3.\n imm0_7: 0 to 7.\n imm0_15: 0 to 15.\n imm0_31: 0 to 31.\n@@ -7599,6 +7622,66 @@ i32 __builtin_mips_lwx (void *, i32)\n i32 __builtin_mips_bposge32 (void)\n @end smallexample\n \n+The following built-in functions map directly to a particular MIPS DSP REV 2\n+instruction.  Please refer to the architecture specification\n+for details on what each instruction does.\n+\n+@smallexample\n+v4q7 __builtin_mips_absq_s_qb (v4q7);\n+v2i16 __builtin_mips_addu_ph (v2i16, v2i16);\n+v2i16 __builtin_mips_addu_s_ph (v2i16, v2i16);\n+v4i8 __builtin_mips_adduh_qb (v4i8, v4i8);\n+v4i8 __builtin_mips_adduh_r_qb (v4i8, v4i8);\n+i32 __builtin_mips_append (i32, i32, imm0_31);\n+i32 __builtin_mips_balign (i32, i32, imm0_3);\n+i32 __builtin_mips_cmpgdu_eq_qb (v4i8, v4i8);\n+i32 __builtin_mips_cmpgdu_lt_qb (v4i8, v4i8);\n+i32 __builtin_mips_cmpgdu_le_qb (v4i8, v4i8);\n+a64 __builtin_mips_dpa_w_ph (a64, v2i16, v2i16);\n+a64 __builtin_mips_dps_w_ph (a64, v2i16, v2i16);\n+a64 __builtin_mips_madd (a64, i32, i32);\n+a64 __builtin_mips_maddu (a64, ui32, ui32);\n+a64 __builtin_mips_msub (a64, i32, i32);\n+a64 __builtin_mips_msubu (a64, ui32, ui32);\n+v2i16 __builtin_mips_mul_ph (v2i16, v2i16);\n+v2i16 __builtin_mips_mul_s_ph (v2i16, v2i16);\n+q31 __builtin_mips_mulq_rs_w (q31, q31);\n+v2q15 __builtin_mips_mulq_s_ph (v2q15, v2q15);\n+q31 __builtin_mips_mulq_s_w (q31, q31);\n+a64 __builtin_mips_mulsa_w_ph (a64, v2i16, v2i16);\n+a64 __builtin_mips_mult (i32, i32);\n+a64 __builtin_mips_multu (ui32, ui32);\n+v4i8 __builtin_mips_precr_qb_ph (v2i16, v2i16);\n+v2i16 __builtin_mips_precr_sra_ph_w (i32, i32, imm0_31);\n+v2i16 __builtin_mips_precr_sra_r_ph_w (i32, i32, imm0_31);\n+i32 __builtin_mips_prepend (i32, i32, imm0_31);\n+v4i8 __builtin_mips_shra_qb (v4i8, imm0_7);\n+v4i8 __builtin_mips_shra_r_qb (v4i8, imm0_7);\n+v4i8 __builtin_mips_shra_qb (v4i8, i32);\n+v4i8 __builtin_mips_shra_r_qb (v4i8, i32);\n+v2i16 __builtin_mips_shrl_ph (v2i16, imm0_15);\n+v2i16 __builtin_mips_shrl_ph (v2i16, i32);\n+v2i16 __builtin_mips_subu_ph (v2i16, v2i16);\n+v2i16 __builtin_mips_subu_s_ph (v2i16, v2i16);\n+v4i8 __builtin_mips_subuh_qb (v4i8, v4i8);\n+v4i8 __builtin_mips_subuh_r_qb (v4i8, v4i8);\n+v2q15 __builtin_mips_addqh_ph (v2q15, v2q15);\n+v2q15 __builtin_mips_addqh_r_ph (v2q15, v2q15);\n+q31 __builtin_mips_addqh_w (q31, q31);\n+q31 __builtin_mips_addqh_r_w (q31, q31);\n+v2q15 __builtin_mips_subqh_ph (v2q15, v2q15);\n+v2q15 __builtin_mips_subqh_r_ph (v2q15, v2q15);\n+q31 __builtin_mips_subqh_w (q31, q31);\n+q31 __builtin_mips_subqh_r_w (q31, q31);\n+a64 __builtin_mips_dpax_w_ph (a64, v2i16, v2i16);\n+a64 __builtin_mips_dpsx_w_ph (a64, v2i16, v2i16);\n+a64 __builtin_mips_dpaqx_s_w_ph (a64, v2q15, v2q15);\n+a64 __builtin_mips_dpaqx_sa_w_ph (a64, v2q15, v2q15);\n+a64 __builtin_mips_dpsqx_s_w_ph (a64, v2q15, v2q15);\n+a64 __builtin_mips_dpsqx_sa_w_ph (a64, v2q15, v2q15);\n+@end smallexample\n+\n+\n @node MIPS Paired-Single Support\n @subsection MIPS Paired-Single Support\n "}, {"sha": "7bb9f38d038c79130f167c47dc1287b9b37e80f9", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3204138527f49b0f828ad77a339fc5cf3d834cdb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3204138527f49b0f828ad77a339fc5cf3d834cdb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3204138527f49b0f828ad77a339fc5cf3d834cdb", "patch": "@@ -613,7 +613,7 @@ Objective-C and Objective-C++ Dialects}.\n -mips16  -mno-mips16  -mabi=@var{abi}  -mabicalls  -mno-abicalls @gol\n -mshared  -mno-shared  -mxgot  -mno-xgot  -mgp32  -mgp64  @gol\n -mfp32  -mfp64  -mhard-float  -msoft-float  @gol\n--msingle-float  -mdouble-float  -mdsp  -mpaired-single  -mips3d @gol\n+-msingle-float  -mdouble-float  -mdsp  -mdspr2  -mpaired-single  -mips3d @gol\n -mlong64  -mlong32  -msym32  -mno-sym32 @gol\n -G@var{num}  -membedded-data  -mno-embedded-data @gol\n -muninit-const-in-rodata  -mno-uninit-const-in-rodata @gol\n@@ -11318,6 +11318,13 @@ operations.  This is the default.\n @opindex mno-dsp\n Use (do not use) the MIPS DSP ASE.  @xref{MIPS DSP Built-in Functions}.\n \n+@itemx -mdspr2\n+@itemx -mno-dspr2\n+@opindex mdspr2\n+@opindex mno-dspr2\n+Use (do not use) the MIPS DSP ASE REV 2.  @xref{MIPS DSP Built-in Functions}.\n+The option @option{-mdspr2} implies @option{-mdsp}.\n+\n @itemx -mpaired-single\n @itemx -mno-paired-single\n @opindex mpaired-single"}]}