{"sha": "8efc91cde4e098f3c23fede96ad1561ea90f5500", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVmYzkxY2RlNGUwOThmM2MyM2ZlZGU5NmFkMTU2MWVhOTBmNTUwMA==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2011-02-13T00:27:06Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2011-02-13T00:27:06Z"}, "message": "darwin.h: Make pretty.\n\n\t* config/darwin.h: Make pretty.\n\t* config/t-darwin (config/darwin.h.rebuild): Add.\n\t(build/slashify): Add.\n\t* config/slashify.c: Add.\n\nFrom-SVN: r170097", "tree": {"sha": "c0aed2f8902f5e7b70854383ddb2bed06679990a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0aed2f8902f5e7b70854383ddb2bed06679990a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8efc91cde4e098f3c23fede96ad1561ea90f5500", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8efc91cde4e098f3c23fede96ad1561ea90f5500", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8efc91cde4e098f3c23fede96ad1561ea90f5500", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8efc91cde4e098f3c23fede96ad1561ea90f5500/comments", "author": null, "committer": null, "parents": [{"sha": "d65dd7dc958a4622c413e16947e5034e1d9e3afb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d65dd7dc958a4622c413e16947e5034e1d9e3afb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d65dd7dc958a4622c413e16947e5034e1d9e3afb"}], "stats": {"total": 907, "additions": 493, "deletions": 414}, "files": [{"sha": "e060af6b5251cdf40b050637c1f5cdda1c6082ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efc91cde4e098f3c23fede96ad1561ea90f5500/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efc91cde4e098f3c23fede96ad1561ea90f5500/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8efc91cde4e098f3c23fede96ad1561ea90f5500", "patch": "@@ -1,3 +1,10 @@\n+2011-02-12  Mike Stump  <mikestump@comcast.net>\n+\n+\t* config/darwin.h: Make pretty.\n+\t* config/t-darwin (config/darwin.h.rebuild): Add.\n+\t(build/slashify): Add.\n+\t* config/slashify.c: Add.\n+\n 2011-02-12  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR driver/45731\n@@ -46,7 +53,7 @@\n 2011-02-12  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* config/darwin.c (darwin_override_options): Add a hunk missed\n-\tfrom the commit of r168571.  Trim comment line lengths and \n+\tfrom the commit of r168571.  Trim comment line lengths and\n \tcorrect indents of the preceding block.\n \n 2011-02-12  Iain Sandoe  <iains@gcc.gnu.org>"}, {"sha": "4bcb88abc3682d1b9e75f8cdcaecb59a5ea2068b", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 415, "deletions": 413, "changes": 828, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efc91cde4e098f3c23fede96ad1561ea90f5500/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efc91cde4e098f3c23fede96ad1561ea90f5500/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=8efc91cde4e098f3c23fede96ad1561ea90f5500", "patch": "@@ -123,46 +123,47 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n /* True if pragma ms_struct is in effect.  */\n extern GTY(()) int darwin_ms_struct;\n \n-#define DRIVER_SELF_SPECS\t\t\t\t\t\\\n-  \"%{gfull:-g -fno-eliminate-unused-debug-symbols} %<gfull\",\t\\\n-  \"%{gused:-g -feliminate-unused-debug-symbols} %<gused\",\t\\\n-  \"%{fapple-kext|mkernel:-static}\",\t\t\t\t\\\n-  \"%{shared:-Zdynamiclib} %<shared\"\n-\n-#define DARWIN_CC1_SPEC\t\t\t\t\t\t\t\\\n-  \"%{findirect-virtual-calls: -fapple-kext} %<findirect-virtual-calls \" \\\n-  \"%{fterminated-vtables: -fapple-kext} %<fterminated-vtables \"\t\t\\\n-  \"%<filelist* %<framework*\"\n-\n-#define SUBSUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    darwin_override_options ();\t\t\t\t\t\t\\\n-  } while (0)\n-\n-#define SUBTARGET_C_COMMON_OVERRIDE_OPTIONS do {                        \\\n-  /* Sort out ObjC exceptions: If the runtime is NeXT we default to\t\\\n-     sjlj for m32 only.  */\t\t\t\t\t\t\\\n-  if (!global_options_set.x_flag_objc_sjlj_exceptions)\t\t\t\\\n-    global_options.x_flag_objc_sjlj_exceptions = \t\t\t\\\n-\t\t\t\tflag_next_runtime && !TARGET_64BIT;\t\\\n-    if (flag_mkernel || flag_apple_kext)\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tif (flag_use_cxa_atexit == 2)\t\t\t\t\t\\\n-\t  flag_use_cxa_atexit = 0;\t\t\t\t\t\\\n-\t/* kexts should always be built without the coalesced sections\t\\\n-\t   because the kernel loader doesn't grok such sections.  */\t\\\n-\tflag_weak = 0;\t\t\t\t\t\t\t\\\n-\t/* No RTTI in kexts.  */\t\t\t\t\t\\\n-\tflag_rtti = 0;\t\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  } while (0)\n+#define DRIVER_SELF_SPECS @(\n+  \"%{gfull:-g -fno-eliminate-unused-debug-symbols} %<gfull\",\n+  \"%{gused:-g -feliminate-unused-debug-symbols} %<gused\",\n+  \"%{fapple-kext|mkernel:-static}\",\n+  \"%{shared:-Zdynamiclib} %<shared\"@)\n+\n+#define DARWIN_CC1_SPEC @(\n+  \"%{findirect-virtual-calls: -fapple-kext} %<findirect-virtual-calls \"\n+  \"%{fterminated-vtables: -fapple-kext} %<fterminated-vtables \"\n+  \"%<filelist* %<framework*\"@)\n+\n+#define SUBSUBTARGET_OVERRIDE_OPTIONS @(\n+  do {\n+    darwin_override_options ();\n+  } while (0)@)\n+\n+#define SUBTARGET_C_COMMON_OVERRIDE_OPTIONS @(\n+  do {\n+    /* Sort out ObjC exceptions: If the runtime is NeXT we default to\n+       sjlj for m32 only.  */\n+    if (!global_options_set.x_flag_objc_sjlj_exceptions)\n+      global_options.x_flag_objc_sjlj_exceptions\n+\t= flag_next_runtime && !TARGET_64BIT;\n+    if (flag_mkernel || flag_apple_kext)\n+      {\n+\tif (flag_use_cxa_atexit == 2)\n+\t  flag_use_cxa_atexit = 0;\n+\t/* kexts should always be built without the coalesced sections\n+\t   because the kernel loader doesn't grok such sections.  */\n+\tflag_weak = 0;\n+\t/* No RTTI in kexts.  */\n+\tflag_rtti = 0;\n+      }\n+  } while (0)@)\n \n /* Machine dependent cpp options.  Don't add more options here, add\n    them to darwin_cpp_builtins in darwin-c.c.  */\n \n #undef\tCPP_SPEC\n-#define CPP_SPEC \"%{static:%{!dynamic:-D__STATIC__}}%{!static:-D__DYNAMIC__}\" \\\n-\t\" %{pthread:-D_REENTRANT}\"\n+#define CPP_SPEC \"%{static:%{!dynamic:-D__STATIC__}}%{!static:-D__DYNAMIC__}\" @(\n+\t\" %{pthread:-D_REENTRANT}\"@)\n \n /* This is mostly a clone of the standard LINK_COMMAND_SPEC, plus\n    precomp, libtool, and fat build additions.\n@@ -172,31 +173,31 @@ extern GTY(()) int darwin_ms_struct;\n    specifying the handling of options understood by generic Unix\n    linkers, and for positional arguments like libraries.  */\n \n-#define LINK_COMMAND_SPEC_A \\\n-   \"%{!fdump=*:%{!fsyntax-only:%{!c:%{!M:%{!MM:%{!E:%{!S:\\\n-    %(linker) \\\n-    %{flto*:%<fcompare-debug*} \\\n-    %{flto*} \\\n-    %l %X %{s} %{t} %{Z} %{u*} \\\n-    %{e*} %{r} \\\n-    %{o*}%{!o:-o a.out} \\\n-    %{!nostdlib:%{!nostartfiles:%S}} \\\n-    %{L*} %(link_libgcc) %o %{fprofile-arcs|fprofile-generate*|coverage:-lgcov} \\\n-    %{fopenmp|ftree-parallelize-loops=*: \\\n-      %{static|static-libgcc|static-libstdc++|static-libgfortran: libgomp.a%s; : -lgomp } } \\\n-    %{!nostdlib:%{!nodefaultlibs:\\\n-      %(link_ssp) %(link_gcc_c_sequence)\\\n-    }}\\\n-    %{!nostdlib:%{!nostartfiles:%E}} %{T*} %{F*} }}}}}}}\"\n+#define LINK_COMMAND_SPEC_A @(\n+   \"%{!fdump=*:%{!fsyntax-only:%{!c:%{!M:%{!MM:%{!E:%{!S:\n+    %(linker)\n+    %{flto*:%<fcompare-debug*}\n+    %{flto*}\n+    %l %X %{s} %{t} %{Z} %{u*}\n+    %{e*} %{r}\n+    %{o*}%{!o:-o a.out}\n+    %{!nostdlib:%{!nostartfiles:%S}}\n+    %{L*} %(link_libgcc) %o %{fprofile-arcs|fprofile-generate*|coverage:-lgcov}\n+    %{fopenmp|ftree-parallelize-loops=*:\n+      %{static|static-libgcc|static-libstdc++|static-libgfortran: libgomp.a%s; : -lgomp } }\n+    %{!nostdlib:%{!nodefaultlibs:\n+      %(link_ssp) %(link_gcc_c_sequence)\n+    }}\n+    %{!nostdlib:%{!nostartfiles:%E}} %{T*} %{F*} }}}}}}}\"@)\n \n #define DSYMUTIL \"\\ndsymutil\"\n \n-#define DSYMUTIL_SPEC \\\n-   \"%{!fdump=*:%{!fsyntax-only:%{!c:%{!M:%{!MM:%{!E:%{!S:\\\n-    %{v} \\\n-    %{gdwarf-2:%{!gstabs*:%{!g0: -idsym}}}\\\n-    %{.c|.cc|.C|.cpp|.cp|.c++|.cxx|.CPP|.m|.mm: \\\n-    %{gdwarf-2:%{!gstabs*:%{!g0: -dsym}}}}}}}}}}}\"\n+#define DSYMUTIL_SPEC @(\n+   \"%{!fdump=*:%{!fsyntax-only:%{!c:%{!M:%{!MM:%{!E:%{!S:\n+    %{v}\n+    %{gdwarf-2:%{!gstabs*:%{!g0: -idsym}}}\n+    %{.c|.cc|.C|.cpp|.cp|.c++|.cxx|.CPP|.m|.mm:\n+    %{gdwarf-2:%{!gstabs*:%{!g0: -dsym}}}}}}}}}}}\"@)\n \n #define LINK_COMMAND_SPEC LINK_COMMAND_SPEC_A DSYMUTIL_SPEC\n \n@@ -209,8 +210,8 @@ extern GTY(()) int darwin_ms_struct;\n #define LINK_GCC_C_SEQUENCE_SPEC \"%G %L\"\n \n #ifdef TARGET_SYSTEM_ROOT\n-#define LINK_SYSROOT_SPEC \\\n-  \"%{isysroot*:-syslibroot %*;:-syslibroot \" TARGET_SYSTEM_ROOT \"}\"\n+#define LINK_SYSROOT_SPEC @(\n+  \"%{isysroot*:-syslibroot %*;:-syslibroot \" TARGET_SYSTEM_ROOT \"}\"@)\n #else\n #define LINK_SYSROOT_SPEC \"%{isysroot*:-syslibroot %*}\"\n #endif\n@@ -219,90 +220,90 @@ extern GTY(()) int darwin_ms_struct;\n    'Z' and 'no' prefixes). Note that options taking arguments may appear\n    multiple times on a command line with different arguments each time,\n    so put a * after their names so all of them get passed.  */\n-#define LINK_SPEC  \\\n-  \"%{static}%{!static:-dynamic} \\\n-   %:remove-outfile(-ldl) \\\n-   %:remove-outfile(-lm) \\\n-   %:remove-outfile(-lpthread) \\\n-   %{fgnu-runtime: %{static|static-libgcc: \\\n-                     %:replace-outfile(-lobjc libobjc-gnu.a%s); \\\n-                    :%:replace-outfile(-lobjc -lobjc-gnu ) } }\\\n-   %{static|static-libgcc|static-libgfortran:%:replace-outfile(-lgfortran libgfortran.a%s)}\\\n-   %{static|static-libgcc|static-libstdc++|static-libgfortran:%:replace-outfile(-lgomp libgomp.a%s)}\\\n-   %{static|static-libgcc|static-libstdc++:%:replace-outfile(-lstdc++ libstdc++.a%s)}\\\n-   %{!Zdynamiclib: \\\n-     %{Zforce_cpusubtype_ALL:-arch %(darwin_arch) -force_cpusubtype_ALL} \\\n-     %{!Zforce_cpusubtype_ALL:-arch %(darwin_subarch)} \\\n-     %{Zbundle:-bundle} \\\n-     %{Zbundle_loader*:-bundle_loader %*} \\\n-     %{client_name*} \\\n-     %{compatibility_version*:%e-compatibility_version only allowed with -dynamiclib\\\n-} \\\n-     %{current_version*:%e-current_version only allowed with -dynamiclib} \\\n-     %{Zforce_flat_namespace:-force_flat_namespace} \\\n-     %{Zinstall_name*:%e-install_name only allowed with -dynamiclib} \\\n-     %{keep_private_externs} \\\n-     %{private_bundle} \\\n-    } \\\n-   %{Zdynamiclib: -dylib \\\n-     %{Zbundle:%e-bundle not allowed with -dynamiclib} \\\n-     %{Zbundle_loader*:%e-bundle_loader not allowed with -dynamiclib} \\\n-     %{client_name*:%e-client_name not allowed with -dynamiclib} \\\n-     %{compatibility_version*:-dylib_compatibility_version %*} \\\n-     %{current_version*:-dylib_current_version %*} \\\n-     %{Zforce_cpusubtype_ALL:-arch %(darwin_arch)} \\\n-     %{!Zforce_cpusubtype_ALL: -arch %(darwin_subarch)} \\\n-     %{Zforce_flat_namespace:%e-force_flat_namespace not allowed with -dynamiclib} \\\n-     %{Zinstall_name*:-dylib_install_name %*} \\\n-     %{keep_private_externs:%e-keep_private_externs not allowed with -dynamiclib} \\\n-     %{private_bundle:%e-private_bundle not allowed with -dynamiclib} \\\n-    } \\\n-   %{Zall_load:-all_load} \\\n-   %{Zallowable_client*:-allowable_client %*} \\\n-   %{Zbind_at_load:-bind_at_load} \\\n-   %{Zarch_errors_fatal:-arch_errors_fatal} \\\n-   %{Zdead_strip:-dead_strip} \\\n-   %{Zno_dead_strip_inits_and_terms:-no_dead_strip_inits_and_terms} \\\n-   %{Zdylib_file*:-dylib_file %*} \\\n-   %{Zdynamic:-dynamic}\\\n-   %{Zexported_symbols_list*:-exported_symbols_list %*} \\\n-   %{Zflat_namespace:-flat_namespace} \\\n-   %{headerpad_max_install_names} \\\n-   %{Zimage_base*:-image_base %*} \\\n-   %{Zinit*:-init %*} \\\n-   %{!mmacosx-version-min=*:-macosx_version_min %(darwin_minversion)} \\\n-   %{mmacosx-version-min=*:-macosx_version_min %*} \\\n-   %{nomultidefs} \\\n-   %{Zmulti_module:-multi_module} %{Zsingle_module:-single_module} \\\n-   %{Zmultiply_defined*:-multiply_defined %*} \\\n-   %{!Zmultiply_defined*:%{shared-libgcc: \\\n-     %:version-compare(< 10.5 mmacosx-version-min= -multiply_defined) \\\n-     %:version-compare(< 10.5 mmacosx-version-min= suppress)}} \\\n-   %{Zmultiplydefinedunused*:-multiply_defined_unused %*} \\\n-   %{fpie:-pie} \\\n-   %{prebind} %{noprebind} %{nofixprebinding} %{prebind_all_twolevel_modules} \\\n-   %{read_only_relocs} \\\n-   %{sectcreate*} %{sectorder*} %{seg1addr*} %{segprot*} \\\n-   %{Zsegaddr*:-segaddr %*} \\\n-   %{Zsegs_read_only_addr*:-segs_read_only_addr %*} \\\n-   %{Zsegs_read_write_addr*:-segs_read_write_addr %*} \\\n-   %{Zseg_addr_table*: -seg_addr_table %*} \\\n-   %{Zfn_seg_addr_table_filename*:-seg_addr_table_filename %*} \\\n-   %{sub_library*} %{sub_umbrella*} \\\n-   \" LINK_SYSROOT_SPEC \" \\\n-   %{twolevel_namespace} %{twolevel_namespace_hints} \\\n-   %{Zumbrella*: -umbrella %*} \\\n-   %{undefined*} \\\n-   %{Zunexported_symbols_list*:-unexported_symbols_list %*} \\\n-   %{Zweak_reference_mismatches*:-weak_reference_mismatches %*} \\\n-   %{!Zweak_reference_mismatches*:-weak_reference_mismatches non-weak} \\\n-   %{X} \\\n-   %{y*} \\\n-   %{w} \\\n-   %{pagezero_size*} %{segs_read_*} %{seglinkedit} %{noseglinkedit}  \\\n-   %{sectalign*} %{sectobjectsymbols*} %{segcreate*} %{whyload} \\\n-   %{whatsloaded} %{dylinker_install_name*} \\\n-   %{dylinker} %{Mach} \"\n+#define LINK_SPEC @(\n+  \"%{static}%{!static:-dynamic}\n+   %:remove-outfile(-ldl)\n+   %:remove-outfile(-lm)\n+   %:remove-outfile(-lpthread)\n+   %{fgnu-runtime: %{static|static-libgcc:\n+                     %:replace-outfile(-lobjc libobjc-gnu.a%s);\n+                    :%:replace-outfile(-lobjc -lobjc-gnu ) } }\n+   %{static|static-libgcc|static-libgfortran:%:replace-outfile(-lgfortran libgfortran.a%s)}\n+   %{static|static-libgcc|static-libstdc++|static-libgfortran:%:replace-outfile(-lgomp libgomp.a%s)}\n+   %{static|static-libgcc|static-libstdc++:%:replace-outfile(-lstdc++ libstdc++.a%s)}\n+   %{!Zdynamiclib:\n+     %{Zforce_cpusubtype_ALL:-arch %(darwin_arch) -force_cpusubtype_ALL}\n+     %{!Zforce_cpusubtype_ALL:-arch %(darwin_subarch)}\n+     %{Zbundle:-bundle}\n+     %{Zbundle_loader*:-bundle_loader %*}\n+     %{client_name*}\n+     %{compatibility_version*:%e-compatibility_version only allowed with -dynamiclib\n+}\n+     %{current_version*:%e-current_version only allowed with -dynamiclib}\n+     %{Zforce_flat_namespace:-force_flat_namespace}\n+     %{Zinstall_name*:%e-install_name only allowed with -dynamiclib}\n+     %{keep_private_externs}\n+     %{private_bundle}\n+    }\n+   %{Zdynamiclib: -dylib\n+     %{Zbundle:%e-bundle not allowed with -dynamiclib}\n+     %{Zbundle_loader*:%e-bundle_loader not allowed with -dynamiclib}\n+     %{client_name*:%e-client_name not allowed with -dynamiclib}\n+     %{compatibility_version*:-dylib_compatibility_version %*}\n+     %{current_version*:-dylib_current_version %*}\n+     %{Zforce_cpusubtype_ALL:-arch %(darwin_arch)}\n+     %{!Zforce_cpusubtype_ALL: -arch %(darwin_subarch)}\n+     %{Zforce_flat_namespace:%e-force_flat_namespace not allowed with -dynamiclib}\n+     %{Zinstall_name*:-dylib_install_name %*}\n+     %{keep_private_externs:%e-keep_private_externs not allowed with -dynamiclib}\n+     %{private_bundle:%e-private_bundle not allowed with -dynamiclib}\n+    }\n+   %{Zall_load:-all_load}\n+   %{Zallowable_client*:-allowable_client %*}\n+   %{Zbind_at_load:-bind_at_load}\n+   %{Zarch_errors_fatal:-arch_errors_fatal}\n+   %{Zdead_strip:-dead_strip}\n+   %{Zno_dead_strip_inits_and_terms:-no_dead_strip_inits_and_terms}\n+   %{Zdylib_file*:-dylib_file %*}\n+   %{Zdynamic:-dynamic}\n+   %{Zexported_symbols_list*:-exported_symbols_list %*}\n+   %{Zflat_namespace:-flat_namespace}\n+   %{headerpad_max_install_names}\n+   %{Zimage_base*:-image_base %*}\n+   %{Zinit*:-init %*}\n+   %{!mmacosx-version-min=*:-macosx_version_min %(darwin_minversion)}\n+   %{mmacosx-version-min=*:-macosx_version_min %*}\n+   %{nomultidefs}\n+   %{Zmulti_module:-multi_module} %{Zsingle_module:-single_module}\n+   %{Zmultiply_defined*:-multiply_defined %*}\n+   %{!Zmultiply_defined*:%{shared-libgcc:\n+     %:version-compare(< 10.5 mmacosx-version-min= -multiply_defined)\n+     %:version-compare(< 10.5 mmacosx-version-min= suppress)}}\n+   %{Zmultiplydefinedunused*:-multiply_defined_unused %*}\n+   %{fpie:-pie}\n+   %{prebind} %{noprebind} %{nofixprebinding} %{prebind_all_twolevel_modules}\n+   %{read_only_relocs}\n+   %{sectcreate*} %{sectorder*} %{seg1addr*} %{segprot*}\n+   %{Zsegaddr*:-segaddr %*}\n+   %{Zsegs_read_only_addr*:-segs_read_only_addr %*}\n+   %{Zsegs_read_write_addr*:-segs_read_write_addr %*}\n+   %{Zseg_addr_table*: -seg_addr_table %*}\n+   %{Zfn_seg_addr_table_filename*:-seg_addr_table_filename %*}\n+   %{sub_library*} %{sub_umbrella*}\n+   \" LINK_SYSROOT_SPEC \"\n+   %{twolevel_namespace} %{twolevel_namespace_hints}\n+   %{Zumbrella*: -umbrella %*}\n+   %{undefined*}\n+   %{Zunexported_symbols_list*:-unexported_symbols_list %*}\n+   %{Zweak_reference_mismatches*:-weak_reference_mismatches %*}\n+   %{!Zweak_reference_mismatches*:-weak_reference_mismatches non-weak}\n+   %{X}\n+   %{y*}\n+   %{w}\n+   %{pagezero_size*} %{segs_read_*} %{seglinkedit} %{noseglinkedit}\n+   %{sectalign*} %{sectobjectsymbols*} %{segcreate*} %{whyload}\n+   %{whatsloaded} %{dylinker_install_name*}\n+   %{dylinker} %{Mach} \"@)\n \n \n /* Machine dependent libraries.  */\n@@ -323,19 +324,19 @@ extern GTY(()) int darwin_ms_struct;\n    If it is linked against, it has to be before -lgcc, because it may\n    need symbols from -lgcc.  */\n #undef REAL_LIBGCC_SPEC\n-#define REAL_LIBGCC_SPEC\t\t\t\t\t\t   \\\n-   \"%{static-libgcc|static: -lgcc_eh -lgcc;\t\t\t\t   \\\n-      shared-libgcc|fexceptions|fgnu-runtime:\t\t\t\t   \\\n-       %:version-compare(!> 10.5 mmacosx-version-min= -lgcc_s.10.4)\t   \\\n-       %:version-compare(>< 10.5 10.6 mmacosx-version-min= -lgcc_s.10.5)   \\\n-       %:version-compare(!> 10.5 mmacosx-version-min= -lgcc_ext.10.4)\t   \\\n-       %:version-compare(>= 10.5 mmacosx-version-min= -lgcc_ext.10.5)\t   \\\n-       -lgcc ;\t\t\t\t\t\t\t\t   \\\n-      :%:version-compare(>< 10.3.9 10.5 mmacosx-version-min= -lgcc_s.10.4) \\\n-       %:version-compare(>< 10.5 10.6 mmacosx-version-min= -lgcc_s.10.5)   \\\n-       %:version-compare(!> 10.5 mmacosx-version-min= -lgcc_ext.10.4)\t   \\\n-       %:version-compare(>= 10.5 mmacosx-version-min= -lgcc_ext.10.5)\t   \\\n-       -lgcc }\"\n+#define REAL_LIBGCC_SPEC @(\n+   \"%{static-libgcc|static: -lgcc_eh -lgcc;\n+      shared-libgcc|fexceptions|fgnu-runtime:\n+       %:version-compare(!> 10.5 mmacosx-version-min= -lgcc_s.10.4)\n+       %:version-compare(>< 10.5 10.6 mmacosx-version-min= -lgcc_s.10.5)\n+       %:version-compare(!> 10.5 mmacosx-version-min= -lgcc_ext.10.4)\n+       %:version-compare(>= 10.5 mmacosx-version-min= -lgcc_ext.10.5)\n+       -lgcc ;\n+      :%:version-compare(>< 10.3.9 10.5 mmacosx-version-min= -lgcc_s.10.4)\n+       %:version-compare(>< 10.5 10.6 mmacosx-version-min= -lgcc_s.10.5)\n+       %:version-compare(!> 10.5 mmacosx-version-min= -lgcc_ext.10.4)\n+       %:version-compare(>= 10.5 mmacosx-version-min= -lgcc_ext.10.5)\n+       -lgcc }\"@)\n \n /* We specify crt0.o as -lcrt0.o so that ld will search the library path.\n \n@@ -345,42 +346,42 @@ extern GTY(()) int darwin_ms_struct;\n    powerpc program built.  */\n \n #undef  STARTFILE_SPEC\n-#define STARTFILE_SPEC\t\t\t\t\t\t\t    \\\n-  \"%{Zdynamiclib: %(darwin_dylib1) }\t\t\t\t\t    \\\n-   %{!Zdynamiclib:%{Zbundle:%{!static:-lbundle1.o}}\t\t\t    \\\n-     %{!Zbundle:%{pg:%{static:-lgcrt0.o}\t\t\t\t    \\\n-                     %{!static:%{object:-lgcrt0.o}\t\t\t    \\\n-                               %{!object:%{preload:-lgcrt0.o}\t\t    \\\n-                                 %{!preload:-lgcrt1.o %(darwin_crt2)}}}}    \\\n-                %{!pg:%{static:-lcrt0.o}\t\t\t\t    \\\n-                      %{!static:%{object:-lcrt0.o}\t\t\t    \\\n-                                %{!object:%{preload:-lcrt0.o}\t\t    \\\n-                                  %{!preload: %(darwin_crt1)\t\t    \\\n-\t\t\t\t\t      %(darwin_crt2)}}}}}}\t    \\\n-  %{shared-libgcc:%:version-compare(< 10.5 mmacosx-version-min= crt3.o%s)}\"\n+#define STARTFILE_SPEC @(\n+  \"%{Zdynamiclib: %(darwin_dylib1) }\n+   %{!Zdynamiclib:%{Zbundle:%{!static:-lbundle1.o}}\n+     %{!Zbundle:%{pg:%{static:-lgcrt0.o}\n+                     %{!static:%{object:-lgcrt0.o}\n+                               %{!object:%{preload:-lgcrt0.o}\n+                                 %{!preload:-lgcrt1.o %(darwin_crt2)}}}}\n+                %{!pg:%{static:-lcrt0.o}\n+                      %{!static:%{object:-lcrt0.o}\n+                                %{!object:%{preload:-lcrt0.o}\n+                                  %{!preload: %(darwin_crt1)\n+\t\t\t\t\t      %(darwin_crt2)}}}}}}\n+  %{shared-libgcc:%:version-compare(< 10.5 mmacosx-version-min= crt3.o%s)}\"@)\n \n /* The native Darwin linker doesn't necessarily place files in the order\n    that they're specified on the link line.  Thus, it is pointless\n    to put anything in ENDFILE_SPEC.  */\n /* #define ENDFILE_SPEC \"\" */\n \n-#define DARWIN_EXTRA_SPECS\t\t\t\t\t\t\\\n-  { \"darwin_crt1\", DARWIN_CRT1_SPEC },\t\t\t\t\t\\\n-  { \"darwin_dylib1\", DARWIN_DYLIB1_SPEC },\t\t\t\t\\\n-  { \"darwin_minversion\", DARWIN_MINVERSION_SPEC },\n+#define DARWIN_EXTRA_SPECS @(\n+  { \"darwin_crt1\", DARWIN_CRT1_SPEC },\n+  { \"darwin_dylib1\", DARWIN_DYLIB1_SPEC },\n+  { \"darwin_minversion\", DARWIN_MINVERSION_SPEC },@)\n \n-#define DARWIN_DYLIB1_SPEC\t\t\t\t\t\t\\\n-  \"%:version-compare(!> 10.5 mmacosx-version-min= -ldylib1.o)\t\t\\\n-   %:version-compare(>= 10.5 mmacosx-version-min= -ldylib1.10.5.o)\"\n+#define DARWIN_DYLIB1_SPEC @(\n+  \"%:version-compare(!> 10.5 mmacosx-version-min= -ldylib1.o)\n+   %:version-compare(>= 10.5 mmacosx-version-min= -ldylib1.10.5.o)\"@)\n \n-#define DARWIN_CRT1_SPEC\t\t\t\t\t\t\\\n-  \"%:version-compare(!> 10.5 mmacosx-version-min= -lcrt1.o)\t\t\\\n-   %:version-compare(>= 10.5 mmacosx-version-min= -lcrt1.10.5.o)\"\n+#define DARWIN_CRT1_SPEC @(\n+  \"%:version-compare(!> 10.5 mmacosx-version-min= -lcrt1.o)\n+   %:version-compare(>= 10.5 mmacosx-version-min= -lcrt1.10.5.o)\"@)\n \n /* Default Darwin ASM_SPEC, very simple.  */\n-#define ASM_SPEC \"-arch %(darwin_arch) \\\n-  %{Zforce_cpusubtype_ALL:-force_cpusubtype_ALL} \\\n-  %{static}\"\n+#define ASM_SPEC \"-arch %(darwin_arch) @(\n+  %{Zforce_cpusubtype_ALL:-force_cpusubtype_ALL}\n+  %{static}\"@)\n \n /* We still allow output of STABS.  */\n \n@@ -423,27 +424,27 @@ extern GTY(()) int darwin_ms_struct;\n    coalesced sections.  Weak aliases (or any other kind of aliases) are\n    not supported.  Weak symbols that aren't visible outside the .s file\n    are not supported.  */\n-#define ASM_WEAKEN_DECL(FILE, DECL, NAME, ALIAS)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if (ALIAS)\t\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\twarning (0, \"alias definitions not supported in Mach-O; ignored\");\t\\\n-\tbreak;\t\t\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n- \t\t\t\t\t\t\t\t\t\\\n-    if (! DECL_EXTERNAL (DECL) && TREE_PUBLIC (DECL))\t\t\t\\\n-      targetm.asm_out.globalize_label (FILE, NAME);\t\t\t\\\n-    if (DECL_EXTERNAL (DECL))\t\t\t\t\t\t\\\n-      fputs (\"\\t.weak_reference \", FILE);\t\t\t\t\\\n-    else if (lookup_attribute (\"weak_import\", DECL_ATTRIBUTES (DECL)))\t\\\n-      break;\t\t\t\t\t\t\t\t\\\n-    else if (TREE_PUBLIC (DECL))\t\t\t\t\t\\\n-      fputs (\"\\t.weak_definition \", FILE);\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      break;\t\t\t\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    fputc ('\\n', FILE);\t\t\t\t\t\t\t\\\n-  } while (0)\n+#define ASM_WEAKEN_DECL(FILE, DECL, NAME, ALIAS) @(\n+  do {\n+    if (ALIAS)\n+      {\n+\twarning (0, \"alias definitions not supported in Mach-O; ignored\");\n+\tbreak;\n+      }\n+\n+    if (! DECL_EXTERNAL (DECL) && TREE_PUBLIC (DECL))\n+      targetm.asm_out.globalize_label (FILE, NAME);\n+    if (DECL_EXTERNAL (DECL))\n+      fputs (\"\\t.weak_reference \", FILE);\n+    else if (lookup_attribute (\"weak_import\", DECL_ATTRIBUTES (DECL)))\n+      break;\n+    else if (TREE_PUBLIC (DECL))\n+      fputs (\"\\t.weak_definition \", FILE);\n+    else\n+      break;\n+    assemble_name (FILE, NAME);\n+    fputc ('\\n', FILE);\n+  } while (0)@)\n \n /* Darwin has the pthread routines in libSystem, which every program\n    links to, so there's no need for weak-ness for that.  */\n@@ -524,90 +525,90 @@ extern GTY(()) int darwin_ms_struct;\n #undef  TARGET_ASM_LTO_END\n #define TARGET_ASM_LTO_END darwin_asm_lto_end\n \n-#define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t.space \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", SIZE)\n+#define ASM_OUTPUT_SKIP(FILE,SIZE) @(\n+  fprintf (FILE, \"\\t.space \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", SIZE)@)\n \n /* Give ObjC methods pretty symbol names.  */\n \n #undef\tOBJC_GEN_METHOD_LABEL\n-#define OBJC_GEN_METHOD_LABEL(BUF,IS_INST,CLASS_NAME,CAT_NAME,SEL_NAME,NUM) \\\n-  do { if (CAT_NAME)\t\t\t\t\t\t\t\\\n-\t sprintf (BUF, \"%c[%s(%s) %s]\", (IS_INST) ? '-' : '+',\t\t\\\n-\t\t  (CLASS_NAME), (CAT_NAME), (SEL_NAME));\t\t\\\n-       else\t\t\t\t\t\t\t\t\\\n-\t sprintf (BUF, \"%c[%s %s]\", (IS_INST) ? '-' : '+',\t\t\\\n-\t\t  (CLASS_NAME), (SEL_NAME));\t\t\t\t\\\n-     } while (0)\n+#define OBJC_GEN_METHOD_LABEL(BUF,IS_INST,CLASS_NAME,CAT_NAME,SEL_NAME,NUM) @(\n+  do { if (CAT_NAME)\n+\t sprintf (BUF, \"%c[%s(%s) %s]\", (IS_INST) ? '-' : '+',\n+\t\t  (CLASS_NAME), (CAT_NAME), (SEL_NAME));\n+       else\n+\t sprintf (BUF, \"%c[%s %s]\", (IS_INST) ? '-' : '+',\n+\t\t  (CLASS_NAME), (SEL_NAME));\n+     } while (0)@)\n \n #undef ASM_DECLARE_OBJECT_NAME\n-#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL) \\\n-\tdarwin_asm_declare_object_name ((FILE), (NAME), (DECL))\n+#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL) @(\n+\tdarwin_asm_declare_object_name ((FILE), (NAME), (DECL))@)\n \n /* The RTTI data (e.g., __ti4name) is common and public (and static),\n    but it does need to be referenced via indirect PIC data pointers.\n    The machopic_define_symbol calls are telling the machopic subsystem\n    that the name *is* defined in this module, so it doesn't need to\n    make them indirect.  */\n \n-#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    const char *xname = NAME;\t\t\t\t\t\t\\\n-    if (GET_CODE (XEXP (DECL_RTL (DECL), 0)) != SYMBOL_REF)\t\t\\\n-      xname = IDENTIFIER_POINTER (DECL_NAME (DECL));\t\t\t\\\n-    if (! DECL_WEAK (DECL)\t\t\t\t\t\t\\\n-        && ((TREE_STATIC (DECL)\t\t\t\t\t\t\\\n-\t     && (!DECL_COMMON (DECL) || !TREE_PUBLIC (DECL)))\t\t\\\n-            || DECL_INITIAL (DECL)))\t\t\t\t\t\\\n-        machopic_define_symbol (DECL_RTL (DECL));\t\t\t\\\n-    if ((TREE_STATIC (DECL)\t\t\t\t\t\t\\\n-\t && (!DECL_COMMON (DECL) || !TREE_PUBLIC (DECL)))\t\t\\\n-        || DECL_INITIAL (DECL))\t\t\t\t\t\t\\\n-      (* targetm.encode_section_info) (DECL, DECL_RTL (DECL), false);\t\\\n-    ASM_OUTPUT_FUNCTION_LABEL (FILE, xname, DECL);\t\t\t\\\n-  } while (0)\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL) @(\n+  do {\n+    const char *xname = NAME;\n+    if (GET_CODE (XEXP (DECL_RTL (DECL), 0)) != SYMBOL_REF)\n+      xname = IDENTIFIER_POINTER (DECL_NAME (DECL));\n+    if (! DECL_WEAK (DECL)\n+        && ((TREE_STATIC (DECL)\n+\t     && (!DECL_COMMON (DECL) || !TREE_PUBLIC (DECL)))\n+            || DECL_INITIAL (DECL)))\n+        machopic_define_symbol (DECL_RTL (DECL));\n+    if ((TREE_STATIC (DECL)\n+\t && (!DECL_COMMON (DECL) || !TREE_PUBLIC (DECL)))\n+        || DECL_INITIAL (DECL))\n+      (* targetm.encode_section_info) (DECL, DECL_RTL (DECL), false);\n+    ASM_OUTPUT_FUNCTION_LABEL (FILE, xname, DECL);\n+  } while (0)@)\n \n #undef TARGET_ASM_DECLARE_CONSTANT_NAME\n #define TARGET_ASM_DECLARE_CONSTANT_NAME darwin_asm_declare_constant_name\n \n /* Wrap new method names in quotes so the assembler doesn't gag.\n-   Make Objective-C internal symbols local and in doing this, we need \n+   Make Objective-C internal symbols local and in doing this, we need\n    to accommodate the name mangling done by c++ on file scope locals.  */\n \n int darwin_label_is_anonymous_local_objc_name (const char *name);\n \n #undef\tASM_OUTPUT_LABELREF\n-#define ASM_OUTPUT_LABELREF(FILE,NAME)\t\t\t\t\t     \\\n-  do {\t\t\t\t\t\t\t\t\t     \\\n-       const char *xname = (NAME);\t\t\t\t\t     \\\n-       if (! strcmp (xname, MACHOPIC_FUNCTION_BASE_NAME))\t\t     \\\n-         machopic_output_function_base_name(FILE);                           \\\n-       else if (xname[0] == '&' || xname[0] == '*')\t\t\t     \\\n-         {\t\t\t\t\t\t\t\t     \\\n-           int len = strlen (xname);\t\t\t\t\t     \\\n-\t   if (len > 6 && !strcmp (\"$stub\", xname + len - 5))\t\t     \\\n-\t     machopic_validate_stub_or_non_lazy_ptr (xname);\t\t     \\\n-\t   else if (len > 7 && !strcmp (\"$stub\\\"\", xname + len - 6))\t     \\\n-\t     machopic_validate_stub_or_non_lazy_ptr (xname);\t\t     \\\n-\t   else if (len > 14 && !strcmp (\"$non_lazy_ptr\", xname + len - 13)) \\\n-\t     machopic_validate_stub_or_non_lazy_ptr (xname);\t\t     \\\n-\t   else if (len > 15 && !strcmp (\"$non_lazy_ptr\\\"\", xname + len - 14)) \\\n-\t     machopic_validate_stub_or_non_lazy_ptr (xname);\t\t     \\\n-\t   if (xname[1] != '\"' && name_needs_quotes (&xname[1]))\t     \\\n-\t     fprintf (FILE, \"\\\"%s\\\"\", &xname[1]);\t\t\t     \\\n-\t   else\t\t\t\t\t\t\t\t     \\\n-\t     fputs (&xname[1], FILE); \t\t\t\t\t     \\\n-\t }\t\t\t\t\t\t\t\t     \\\n-       else if (xname[0] == '+' || xname[0] == '-')\t\t\t     \\\n-         fprintf (FILE, \"\\\"%s\\\"\", xname);\t\t\t\t     \\\n-       else if (darwin_label_is_anonymous_local_objc_name (xname))\t\t\t\t     \\\n-         fprintf (FILE, \"L%s\", xname);\t\t\t\t\t     \\\n-       else if (!strncmp (xname, \".objc_class_name_\", 17))\t\t     \\\n-\t fprintf (FILE, \"%s\", xname);\t\t\t\t\t     \\\n-       else if (xname[0] != '\"' && name_needs_quotes (xname))\t\t     \\\n-\t fprintf (FILE, \"\\\"%s\\\"\", xname);\t\t\t\t     \\\n-       else\t\t\t\t\t\t\t\t     \\\n-         asm_fprintf (FILE, \"%U%s\", xname);\t\t\t\t     \\\n-  } while (0)\n+#define ASM_OUTPUT_LABELREF(FILE,NAME) @(\n+  do {\n+       const char *xname = (NAME);\n+       if (! strcmp (xname, MACHOPIC_FUNCTION_BASE_NAME))\n+         machopic_output_function_base_name(FILE);\n+       else if (xname[0] == '&' || xname[0] == '*')\n+         {\n+           int len = strlen (xname);\n+\t   if (len > 6 && !strcmp (\"$stub\", xname + len - 5))\n+\t     machopic_validate_stub_or_non_lazy_ptr (xname);\n+\t   else if (len > 7 && !strcmp (\"$stub\\\"\", xname + len - 6))\n+\t     machopic_validate_stub_or_non_lazy_ptr (xname);\n+\t   else if (len > 14 && !strcmp (\"$non_lazy_ptr\", xname + len - 13))\n+\t     machopic_validate_stub_or_non_lazy_ptr (xname);\n+\t   else if (len > 15 && !strcmp (\"$non_lazy_ptr\\\"\", xname + len - 14))\n+\t     machopic_validate_stub_or_non_lazy_ptr (xname);\n+\t   if (xname[1] != '\"' && name_needs_quotes (&xname[1]))\n+\t     fprintf (FILE, \"\\\"%s\\\"\", &xname[1]);\n+\t   else\n+\t     fputs (&xname[1], FILE);\n+\t }\n+       else if (xname[0] == '+' || xname[0] == '-')\n+         fprintf (FILE, \"\\\"%s\\\"\", xname);\n+       else if (darwin_label_is_anonymous_local_objc_name (xname))\n+         fprintf (FILE, \"L%s\", xname);\n+       else if (!strncmp (xname, \".objc_class_name_\", 17))\n+\t fprintf (FILE, \"%s\", xname);\n+       else if (xname[0] != '\"' && name_needs_quotes (xname))\n+\t fprintf (FILE, \"\\\"%s\\\"\", xname);\n+       else\n+         asm_fprintf (FILE, \"%U%s\", xname);\n+  } while (0)@)\n \n /* Output before executable code.  */\n #undef TEXT_SECTION_ASM_OP\n@@ -622,9 +623,9 @@ int darwin_label_is_anonymous_local_objc_name (const char *name);\n #define ALIGN_ASM_OP\t\t\".align\"\n \n #undef\tASM_OUTPUT_ALIGN\n-#define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n-  if ((LOG) != 0)\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t%d\\n\", ALIGN_ASM_OP, (LOG))\n+#define ASM_OUTPUT_ALIGN(FILE,LOG) @(\n+  if ((LOG) != 0)\n+    fprintf (FILE, \"\\t%s\\t%d\\n\", ALIGN_ASM_OP, (LOG))@)\n \n /* The maximum alignment which the object file format can support in\n    bits.  For Mach-O, this is 2^15 bytes.  */\n@@ -635,18 +636,18 @@ int darwin_label_is_anonymous_local_objc_name (const char *name);\n #define L2_MAX_OFILE_ALIGNMENT 15\n \n /*  These are the three variants that emit referenced blank space.  */\n-#define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN)\t\t\\\n-\tdarwin_output_aligned_bss ((FILE), (DECL), (NAME), (SIZE), (ALIGN))\n+#define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) @(\n+\tdarwin_output_aligned_bss ((FILE), (DECL), (NAME), (SIZE), (ALIGN))@)\n \n #undef\tASM_OUTPUT_ALIGNED_DECL_LOCAL\n-#define ASM_OUTPUT_ALIGNED_DECL_LOCAL(FILE, DECL, NAME, SIZE, ALIGN)\t\\\n-\tdarwin_asm_output_aligned_decl_local\t\t\t\t\\\n-\t\t\t\t  ((FILE), (DECL), (NAME), (SIZE), (ALIGN))\n+#define ASM_OUTPUT_ALIGNED_DECL_LOCAL(FILE, DECL, NAME, SIZE, ALIGN) @(\n+\tdarwin_asm_output_aligned_decl_local\n+\t\t\t\t  ((FILE), (DECL), (NAME), (SIZE), (ALIGN))@)\n \n #undef  ASM_OUTPUT_ALIGNED_DECL_COMMON\n-#define ASM_OUTPUT_ALIGNED_DECL_COMMON(FILE, DECL, NAME, SIZE, ALIGN)\t\\\n-\tdarwin_asm_output_aligned_decl_common\t\t\t\t\\\n-\t\t\t\t   ((FILE), (DECL), (NAME), (SIZE), (ALIGN))\n+#define ASM_OUTPUT_ALIGNED_DECL_COMMON(FILE, DECL, NAME, SIZE, ALIGN) @(\n+\tdarwin_asm_output_aligned_decl_common\n+\t\t\t\t   ((FILE), (DECL), (NAME), (SIZE), (ALIGN))@)\n \n /* The generic version, archs should over-ride where required.  */\n #define MACHOPIC_NL_SYMBOL_PTR_SECTION \".non_lazy_symbol_pointer\"\n@@ -669,8 +670,8 @@ extern GTY(()) section * darwin_sections[NUM_DARWIN_SECTIONS];\n #define TARGET_ASM_FUNCTION_SECTION darwin_function_section\n \n #undef\tTARGET_ASM_FUNCTION_SWITCHED_TEXT_SECTIONS\n-#define TARGET_ASM_FUNCTION_SWITCHED_TEXT_SECTIONS \\\n-\tdarwin_function_switched_text_sections\n+#define TARGET_ASM_FUNCTION_SWITCHED_TEXT_SECTIONS @(\n+\tdarwin_function_switched_text_sections@)\n \n #undef\tTARGET_ASM_SELECT_RTX_SECTION\n #define TARGET_ASM_SELECT_RTX_SECTION machopic_select_rtx_section\n@@ -682,27 +683,27 @@ extern GTY(()) section * darwin_sections[NUM_DARWIN_SECTIONS];\n #define TARGET_ASM_RELOC_RW_MASK machopic_reloc_rw_mask\n \n \n-#define ASM_DECLARE_UNRESOLVED_REFERENCE(FILE,NAME)\t\t\t\\\n-    do {\t\t\t\t\t\t\t\t\\\n-\t if (FILE) {\t\t\t\t\t\t\t\\\n-\t   if (MACHOPIC_INDIRECT)\t\t\t\t\t\\\n-\t     fprintf (FILE, \"\\t.lazy_reference \");\t\t\t\\\n-\t   else\t\t\t\t\t\t\t\t\\\n-\t     fprintf (FILE, \"\\t.reference \");\t\t\t\t\\\n-\t   assemble_name (FILE, NAME);\t\t\t\t\t\\\n-\t   fprintf (FILE, \"\\n\");\t\t\t\t\t\\\n-\t }                                                              \\\n-       } while (0)\n-\n-#define ASM_DECLARE_CLASS_REFERENCE(FILE,NAME)\t\t\t\t\\\n-    do {\t\t\t\t\t\t\t\t\\\n-\t if (FILE) {\t\t\t\t\t\t\t\\\n-\t   fprintf (FILE, \"\\t\");\t\t\t\t\t\\\n-\t   assemble_name (FILE, NAME);\t\t\t\t\t\\\n-\t   fprintf (FILE, \"=0\\n\");\t\t\t\t\t\\\n-\t   (*targetm.asm_out.globalize_label) (FILE, NAME);\t\t\\\n-\t }\t\t\t\t\t\t\t\t\\\n-       } while (0)\n+#define ASM_DECLARE_UNRESOLVED_REFERENCE(FILE,NAME) @(\n+    do {\n+\t if (FILE) {\n+\t   if (MACHOPIC_INDIRECT)\n+\t     fprintf (FILE, \"\\t.lazy_reference \");\n+\t   else\n+\t     fprintf (FILE, \"\\t.reference \");\n+\t   assemble_name (FILE, NAME);\n+\t   fprintf (FILE, \"\\n\");\n+\t }\n+       } while (0)@)\n+\n+#define ASM_DECLARE_CLASS_REFERENCE(FILE,NAME) @(\n+    do {\n+\t if (FILE) {\n+\t   fprintf (FILE, \"\\t\");\n+\t   assemble_name (FILE, NAME);\n+\t   fprintf (FILE, \"=0\\n\");\n+\t   (*targetm.asm_out.globalize_label) (FILE, NAME);\n+\t }\n+       } while (0)@)\n \n /* Globalizing directive for a label.  */\n #define GLOBAL_ASM_OP \"\\t.globl \"\n@@ -715,16 +716,16 @@ extern GTY(()) section * darwin_sections[NUM_DARWIN_SECTIONS];\n #define TARGET_ASM_ASSEMBLE_VISIBILITY darwin_assemble_visibility\n \n /* Extra attributes for Darwin.  */\n-#define SUBTARGET_ATTRIBUTE_TABLE\t\t\t\t\t     \\\n-  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */ \\\n-  { \"apple_kext_compatibility\", 0, 0, false, true, false,\t\t     \\\n-    darwin_handle_kext_attribute },\t\t\t\t\t     \\\n-  { \"weak_import\", 0, 0, true, false, false,\t\t\t\t     \\\n-    darwin_handle_weak_import_attribute }\n+#define SUBTARGET_ATTRIBUTE_TABLE @(\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n+  { \"apple_kext_compatibility\", 0, 0, false, true, false,\n+    darwin_handle_kext_attribute },\n+  { \"weak_import\", 0, 0, true, false, false,\n+    darwin_handle_weak_import_attribute }@)\n \n #undef ASM_GENERATE_INTERNAL_LABEL\n-#define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n-  sprintf (LABEL, \"*%s%ld\", PREFIX, (long)(NUM))\n+#define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM) @(\n+  sprintf (LABEL, \"*%s%ld\", PREFIX, (long)(NUM))@)\n \n #undef TARGET_ASM_MARK_DECL_PRESERVED\n #define TARGET_ASM_MARK_DECL_PRESERVED darwin_mark_decl_preserved\n@@ -770,61 +771,61 @@ enum machopic_addr_class {\n #undef TARGET_STRIP_NAME_ENCODING\n #define TARGET_STRIP_NAME_ENCODING  default_strip_name_encoding\n \n-#define GEN_BINDER_NAME_FOR_STUB(BUF,STUB,STUB_LENGTH)\t\t\\\n-  do {\t\t\t\t\t\t\t\t\\\n-    const char *const stub_ = (STUB);\t\t\t\t\\\n-    char *buffer_ = (BUF);\t\t\t\t\t\\\n-    strcpy (buffer_, stub_);\t\t\t\t\t\\\n-    if (stub_[0] == '\"')\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-\tstrcpy (buffer_ + (STUB_LENGTH) - 1, \"_binder\\\"\");\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-\tstrcpy (buffer_ + (STUB_LENGTH), \"_binder\");\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-  } while (0)\n-\n-#define GEN_SYMBOL_NAME_FOR_SYMBOL(BUF,SYMBOL,SYMBOL_LENGTH)\t\\\n-  do {\t\t\t\t\t\t\t\t\\\n-    const char *const symbol_ = (SYMBOL);\t\t\t\\\n-    char *buffer_ = (BUF);\t\t\t\t\t\\\n-    if (name_needs_quotes (symbol_) && symbol_[0] != '\"')\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-\t  sprintf (buffer_, \"\\\"%s\\\"\", symbol_);\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-\tstrcpy (buffer_, symbol_);\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-  } while (0)\n+#define GEN_BINDER_NAME_FOR_STUB(BUF,STUB,STUB_LENGTH) @(\n+  do {\n+    const char *const stub_ = (STUB);\n+    char *buffer_ = (BUF);\n+    strcpy (buffer_, stub_);\n+    if (stub_[0] == '\"')\n+      {\n+\tstrcpy (buffer_ + (STUB_LENGTH) - 1, \"_binder\\\"\");\n+      }\n+    else\n+      {\n+\tstrcpy (buffer_ + (STUB_LENGTH), \"_binder\");\n+      }\n+  } while (0)@)\n+\n+#define GEN_SYMBOL_NAME_FOR_SYMBOL(BUF,SYMBOL,SYMBOL_LENGTH) @(\n+  do {\n+    const char *const symbol_ = (SYMBOL);\n+    char *buffer_ = (BUF);\n+    if (name_needs_quotes (symbol_) && symbol_[0] != '\"')\n+      {\n+\t  sprintf (buffer_, \"\\\"%s\\\"\", symbol_);\n+      }\n+    else\n+      {\n+\tstrcpy (buffer_, symbol_);\n+      }\n+  } while (0)@)\n \n /* Given a symbol name string, create the lazy pointer version\n    of the symbol name.  */\n \n-#define GEN_LAZY_PTR_NAME_FOR_SYMBOL(BUF,SYMBOL,SYMBOL_LENGTH)\t\\\n-  do {\t\t\t\t\t\t\t\t\\\n-    const char *symbol_ = (SYMBOL);                             \\\n-    char *buffer_ = (BUF);\t\t\t\t\t\\\n-    if (symbol_[0] == '\"')\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-        strcpy (buffer_, \"\\\"L\");\t\t\t\t\\\n-        strcpy (buffer_ + 2, symbol_ + 1);\t\t\t\\\n-\tstrcpy (buffer_ + (SYMBOL_LENGTH), \"$lazy_ptr\\\"\");\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-    else if (name_needs_quotes (symbol_))\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-        strcpy (buffer_, \"\\\"L\");\t\t\t\t\\\n-        strcpy (buffer_ + 2, symbol_);\t\t\t\t\\\n-\tstrcpy (buffer_ + (SYMBOL_LENGTH) + 2, \"$lazy_ptr\\\"\");\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-        strcpy (buffer_, \"L\");\t\t\t\t\t\\\n-        strcpy (buffer_ + 1, symbol_);\t\t\t\t\\\n-\tstrcpy (buffer_ + (SYMBOL_LENGTH) + 1, \"$lazy_ptr\");\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-  } while (0)\n+#define GEN_LAZY_PTR_NAME_FOR_SYMBOL(BUF,SYMBOL,SYMBOL_LENGTH) @(\n+  do {\n+    const char *symbol_ = (SYMBOL);\n+    char *buffer_ = (BUF);\n+    if (symbol_[0] == '\"')\n+      {\n+        strcpy (buffer_, \"\\\"L\");\n+        strcpy (buffer_ + 2, symbol_ + 1);\n+\tstrcpy (buffer_ + (SYMBOL_LENGTH), \"$lazy_ptr\\\"\");\n+      }\n+    else if (name_needs_quotes (symbol_))\n+      {\n+        strcpy (buffer_, \"\\\"L\");\n+        strcpy (buffer_ + 2, symbol_);\n+\tstrcpy (buffer_ + (SYMBOL_LENGTH) + 2, \"$lazy_ptr\\\"\");\n+      }\n+    else\n+      {\n+        strcpy (buffer_, \"L\");\n+        strcpy (buffer_ + 1, symbol_);\n+\tstrcpy (buffer_ + (SYMBOL_LENGTH) + 1, \"$lazy_ptr\");\n+      }\n+  } while (0)@)\n \n #define EH_FRAME_SECTION_NAME   \"__TEXT\"\n #define EH_FRAME_SECTION_ATTR \",coalesced,no_toc+strip_static_syms+live_support\"\n@@ -833,22 +834,22 @@ enum machopic_addr_class {\n #define JCR_SECTION_NAME \"__DATA,jcr,regular,no_dead_strip\"\n \n #undef ASM_PREFERRED_EH_DATA_FORMAT\n-#define ASM_PREFERRED_EH_DATA_FORMAT(CODE,GLOBAL)  \\\n-  (((CODE) == 2 && (GLOBAL) == 1) \\\n-   ? (DW_EH_PE_pcrel | DW_EH_PE_indirect | DW_EH_PE_sdata4) : \\\n-     ((CODE) == 1 || (GLOBAL) == 0) ? DW_EH_PE_pcrel : DW_EH_PE_absptr)\n+#define ASM_PREFERRED_EH_DATA_FORMAT(CODE,GLOBAL) @(\n+  (((CODE) == 2 && (GLOBAL) == 1)\n+   ? (DW_EH_PE_pcrel | DW_EH_PE_indirect | DW_EH_PE_sdata4) :\n+     ((CODE) == 1 || (GLOBAL) == 0) ? DW_EH_PE_pcrel : DW_EH_PE_absptr)@)\n \n-#define ASM_OUTPUT_DWARF_DELTA(FILE,SIZE,LABEL1,LABEL2)  \\\n-  darwin_asm_output_dwarf_delta (FILE, SIZE, LABEL1, LABEL2)\n+#define ASM_OUTPUT_DWARF_DELTA(FILE,SIZE,LABEL1,LABEL2) @(\n+  darwin_asm_output_dwarf_delta (FILE, SIZE, LABEL1, LABEL2)@)\n \n-#define ASM_OUTPUT_DWARF_OFFSET(FILE,SIZE,LABEL,BASE)  \\\n-  darwin_asm_output_dwarf_offset (FILE, SIZE, LABEL, BASE)\n+#define ASM_OUTPUT_DWARF_OFFSET(FILE,SIZE,LABEL,BASE) @(\n+  darwin_asm_output_dwarf_offset (FILE, SIZE, LABEL, BASE)@)\n \n-#define ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX(ASM_OUT_FILE, ENCODING, SIZE, ADDR, DONE)\t\\\n-      if (ENCODING == ASM_PREFERRED_EH_DATA_FORMAT (2, 1)) {\t\t\t\t\\\n-\tdarwin_non_lazy_pcrel (ASM_OUT_FILE, ADDR);\t\t\t\t\t\\\n-\tgoto DONE;\t\t\t\t\t\t\t\t\t\\\n-      }\n+#define ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX(ASM_OUT_FILE, ENCODING, SIZE, ADDR, DONE) @(\n+      if (ENCODING == ASM_PREFERRED_EH_DATA_FORMAT (2, 1)) {\n+\tdarwin_non_lazy_pcrel (ASM_OUT_FILE, ADDR);\n+\tgoto DONE;\n+      }@)\n \n /* Experimentally, putting jump tables in text is faster on SPEC.\n    Also this is needed for correctness for coalesced functions.  */\n@@ -863,16 +864,16 @@ enum machopic_addr_class {\n #undef TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION darwin_asm_named_section\n \n-#define DARWIN_REGISTER_TARGET_PRAGMAS()\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\\\n-    if (!flag_preprocess_only)\t\t\t\t\t\\\n-      cpp_register_pragma (parse_in, NULL, \"mark\",\t\t\\\n-\t\t\t   darwin_pragma_ignore, false);\t\\\n-    c_register_pragma (0, \"options\", darwin_pragma_options);\t\\\n-    c_register_pragma (0, \"segment\", darwin_pragma_ignore);\t\\\n-    c_register_pragma (0, \"unused\", darwin_pragma_unused);\t\\\n-    c_register_pragma (0, \"ms_struct\", darwin_pragma_ms_struct); \\\n-  } while (0)\n+#define DARWIN_REGISTER_TARGET_PRAGMAS() @(\n+  do {\n+    if (!flag_preprocess_only)\n+      cpp_register_pragma (parse_in, NULL, \"mark\",\n+\t\t\t   darwin_pragma_ignore, false);\n+    c_register_pragma (0, \"options\", darwin_pragma_options);\n+    c_register_pragma (0, \"segment\", darwin_pragma_ignore);\n+    c_register_pragma (0, \"unused\", darwin_pragma_unused);\n+    c_register_pragma (0, \"ms_struct\", darwin_pragma_ms_struct);\n+  } while (0)@)\n \n #undef ASM_APP_ON\n #define ASM_APP_ON \"\"\n@@ -902,7 +903,7 @@ void add_framework_path (char *);\n #undef GOMP_SELF_SPECS\n #define GOMP_SELF_SPECS \"\"\n \n-/* Darwin disables section anchors by default.  \n+/* Darwin disables section anchors by default.\n    They should be enabled per arch where support exists in that arch.  */\n #define TARGET_ASM_OUTPUT_ANCHOR NULL\n #define DARWIN_SECTION_ANCHORS 0\n@@ -920,30 +921,31 @@ void add_framework_path (char *);\n     considered dangerous for library calls to send messages to\n     stdout/stderr.  */\n \n-#define ENABLE_EXECUTE_STACK                                            \\\n-extern void __enable_execute_stack (void *);                            \\\n-void                                                                    \\\n-__enable_execute_stack (void *addr)                                     \\\n-{                                                                       \\\n-   extern int mprotect (void *, size_t, int);                           \\\n-   extern int getpagesize (void);\t\t\t\t\t\\\n-   static int size;                                                     \\\n-   static long mask;                                                    \\\n-                                                                        \\\n-   char *page, *end;                                                    \\\n-                                                                        \\\n-   if (size == 0)                                                       \\\n-     {                                                                  \\\n-       size = getpagesize();\t\t\t\t\t\t\\\n-       mask = ~((long) size - 1);                                       \\\n-     }                                                                  \\\n-                                                                        \\\n-   page = (char *) (((long) addr) & mask);                              \\\n-   end  = (char *) ((((long) (addr + (TARGET_64BIT ? 48 : 40))) & mask) + size); \\\n-                                                                        \\\n-   /* 7 == PROT_READ | PROT_WRITE | PROT_EXEC */                        \\\n-   (void) mprotect (page, end - page, 7);                               \\\n-}\n+#define ENABLE_EXECUTE_STACK @(\n+  extern void __enable_execute_stack (void *);\n+\n+  void\n+  __enable_execute_stack (void *addr)\n+  {\n+    extern int mprotect (void *, size_t, int);\n+    extern int getpagesize (void);\n+    static int size;\n+    static long mask;\n+\n+    char *page, *end;\n+\n+    if (size == 0)\n+      {\n+\tsize = getpagesize();\n+\tmask = ~((long) size - 1);\n+      }\n+\n+    page = (char *) (((long) addr) & mask);\n+    end  = (char *) ((((long) (addr + (TARGET_64BIT ? 48 : 40))) & mask) + size);\n+\n+    /* 7 == PROT_READ | PROT_WRITE | PROT_EXEC */\n+    (void) mprotect (page, end - page, 7);\n+  }@)\n \n /* For Apple KEXTs, we make the constructors return this to match gcc\n    2.95.  */\n@@ -953,24 +955,24 @@ __enable_execute_stack (void *addr)                                     \\\n /* We have target-specific builtins.  */\n #define TARGET_FOLD_BUILTIN darwin_fold_builtin\n \n-#define TARGET_OBJC_CONSTRUCT_STRING_OBJECT \\\n-  darwin_objc_construct_string\n+#define TARGET_OBJC_CONSTRUCT_STRING_OBJECT @(\n+  darwin_objc_construct_string@)\n \n-#define TARGET_STRING_OBJECT_REF_TYPE_P \\\n-  darwin_cfstring_ref_p\n+#define TARGET_STRING_OBJECT_REF_TYPE_P @(\n+  darwin_cfstring_ref_p@)\n \n #define TARGET_N_FORMAT_TYPES 1\n #define TARGET_FORMAT_TYPES darwin_additional_format_types\n \n-#define TARGET_CHECK_STRING_OBJECT_FORMAT_ARG \\\n-  darwin_check_cfstring_format_arg\n+#define TARGET_CHECK_STRING_OBJECT_FORMAT_ARG @(\n+  darwin_check_cfstring_format_arg@)\n \n #define TARGET_HAS_TARGETCM 1\n \n #ifndef USED_FOR_TARGET\n extern void darwin_driver_init (unsigned int *,struct cl_decoded_option **);\n-#define GCC_DRIVER_HOST_INITIALIZATION \\\n-  darwin_driver_init (&decoded_options_count, &decoded_options)\n+#define GCC_DRIVER_HOST_INITIALIZATION @(\n+  darwin_driver_init (&decoded_options_count, &decoded_options)@)\n #endif\n \n /* The Apple assembler and linker do not support constructor priorities.  */"}, {"sha": "2db796b04338a89959b44ee626ec92f2d878ac2d", "filename": "gcc/config/slashify.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efc91cde4e098f3c23fede96ad1561ea90f5500/gcc%2Fconfig%2Fslashify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efc91cde4e098f3c23fede96ad1561ea90f5500/gcc%2Fconfig%2Fslashify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fslashify.c?ref=8efc91cde4e098f3c23fede96ad1561ea90f5500", "patch": "@@ -0,0 +1,56 @@\n+/* Generate a slashified version of the input\n+   Copyright (C) 2011\n+   Free Software Foundation, Inc.\n+   Contributed by Mike Stump <mikestump@comcast.net>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+\n+/* This is a small utility to slashify a source file so that one never\n+   needs to stare at backslashes.  */\n+\n+#include <stdio.h>\n+\n+extern int main (int, char **);\n+\n+int main (int argc, char **argv) {\n+  int c,c1;\n+  int saw_start = 0;\n+  while ((c=getchar ()) != EOF) {\n+    if (c != '@') {\n+      if (saw_start && c == '\\n') {\n+\tputchar ('\\\\');\n+      }\n+      putchar (c);\n+      continue;\n+    }\n+    c1=getchar();\n+    if (c1 == EOF) {\n+      putchar (c);\n+      return 0;\n+    }\n+    if (!saw_start && c1 == '(') {\n+      saw_start = 1;\n+    } else if (saw_start && c1 == ')') {\n+      saw_start = 0;\n+    } else {\n+      putchar (c); \n+      putchar (c1); \n+    }\n+  }\n+  return 0;\n+}"}, {"sha": "3abc198476f6f348925fea167ecf5ed15c308057", "filename": "gcc/config/t-darwin", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efc91cde4e098f3c23fede96ad1561ea90f5500/gcc%2Fconfig%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efc91cde4e098f3c23fede96ad1561ea90f5500/gcc%2Fconfig%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-darwin?ref=8efc91cde4e098f3c23fede96ad1561ea90f5500", "patch": "@@ -17,6 +17,20 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n+build/slashify: $(srcdir)/config/slashify.c\n+\t$(COMPILER_FOR_BUILD) $< -o $@\n+\n+$(srcdir)/config/darwin.h: config/darwin.h.rebuild\n+\n+config/darwin.h.rebuild: build/slashify\n+\t@if [ ! -e $(srcdir)/config/darwin.h\t\t\t\t\t\\\n+\t      -o $(srcdir)/config/darwin.h -nt config/darwin.h ]; then\t\t\\\n+\t\t{ test -d config || mkdir config; } &&\t\t\t\t\\\n+\t\tcp -p $(srcdir)/config/darwin-sections.def\t\t\t\\\n+\t\t      config/darwin-sections.def &&\t\t\t\t\\\n+\t\tbuild/slashify < $(srcdir)/config/darwin.h  >config/darwin.h;\t\\\n+\tfi\n+\n darwin.o: $(srcdir)/config/darwin.c $(CONFIG_H) $(SYSTEM_H) coretypes.h     \\\n   $(TM_H) $(RTL_H) $(REGS_H) hard-reg-set.h $(REAL_H) insn-config.h         \\\n   conditions.h insn-flags.h output.h insn-attr.h flags.h $(TREE_H) expr.h   \\"}]}