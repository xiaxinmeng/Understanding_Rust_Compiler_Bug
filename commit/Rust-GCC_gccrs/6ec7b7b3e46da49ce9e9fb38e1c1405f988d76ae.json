{"sha": "6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "node_id": "C_kwDOANBUbNoAKDZlYzdiN2IzZTQ2ZGE0OWNlOWU5ZmIzOGUxYzE0MDVmOTg4ZDc2YWU", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-13T08:25:22Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-15T13:17:23Z"}, "message": "RISC-V: Add binop constraints tests for integer compare\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/binop_vv_constraint-2.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vv_constraint-3.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vv_constraint-4.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vv_constraint-5.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vv_constraint-6.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vv_constraint-7.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-123.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-124.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-125.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-126.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-127.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-128.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-129.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-130.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-131.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-132.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-133.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-134.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-135.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-136.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-137.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-138.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-139.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-140.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-141.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-142.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-143.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-144.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-145.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-146.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-147.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-148.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-149.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-150.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-151.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-152.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-153.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-154.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-155.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-156.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-157.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-158.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-159.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-160.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-161.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-162.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-163.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-164.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-165.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-166.c: New test.", "tree": {"sha": "dedafebd01099bd6f1cf08a6547f9fb5e058fcc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dedafebd01099bd6f1cf08a6547f9fb5e058fcc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d06fc379093fd2353c6e09619d40bc15c89465a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d06fc379093fd2353c6e09619d40bc15c89465a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d06fc379093fd2353c6e09619d40bc15c89465a"}], "stats": {"total": 2276, "additions": 2276, "deletions": 0}, "files": [{"sha": "6a03b00a3a1d7f4a111ef07d5ef02b84d3f4913e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vv_constraint-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-2.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out)\n+{\n+    vint32mf2_t v = __riscv_vle32_v_i32mf2 (in, 4);\n+    vbool64_t mask = __riscv_vlm_v_b64 (in + 1, 4);\n+    vint32mf2_t v2 = __riscv_vle32_v_i32mf2 (in+444, 4);\n+    vbool64_t mask2 = __riscv_vmseq_vv_i32mf2_b64_m(mask,v,v2,4);\n+    mask2 = __riscv_vmslt_vv_i32mf2_b64_mu(mask2,mask2,v2,v,4);\n+    __riscv_vsm_v_b64 (out, mask2, 4);\n+}\n+\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "c4f81382a5c51bbc72fab72876172761c3b0f2cc", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vv_constraint-3.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-3.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmseq_vv_i32m1_b32 (v, v, 4);\n+    vbool32_t m4 = __riscv_vmseq_vv_i32m1_b32_m (m3, v2, v2, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmslt_vv_i32m1_b32 (v, v, 4);\n+    vbool32_t m4 = __riscv_vmslt_vv_i32m1_b32_m (m3, v2, v2, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "e16db932f15772c3f09fb504a9d4dd0197f7c204", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vv_constraint-4.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-4.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmseq_vv_i32m1_b32 (v, v, 4);\n+    vbool32_t m4 = __riscv_vmseq_vv_i32m1_b32_mu (m3, m3, v2, v2, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmslt_vv_i32m1_b32 (v, v, 4);\n+    vbool32_t m4 = __riscv_vmslt_vv_i32m1_b32_mu (m3, m3, v2, v2, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "54a240f44fe17ebf6bb13d4f6635caedc2a88ca1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vv_constraint-5.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-5.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmseq_vv_i32m1_b32 (v, v, 4);\n+    vbool32_t m4 = __riscv_vmseq_vv_i32m1_b32_mu (mask, m3, v, v, 4);\n+    m4 = __riscv_vmseq_vv_i32m1_b32_m (m4, v2, v2, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmslt_vv_i32m1_b32 (v, v, 4);\n+    vbool32_t m4 = __riscv_vmslt_vv_i32m1_b32_mu (mask, m3, v, v, 4);\n+    m4 = __riscv_vmslt_vv_i32m1_b32_m (m4, v2, v2, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vmv} 2 } } */"}, {"sha": "ad5441f3404a017bee131ddddf82b92a2f7cc57c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vv_constraint-6.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-6.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = __riscv_vlm_v_b32 (in, 4);\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmseq_vv_i32m1_b32 (v, v2, 4);\n+    vbool32_t m4 = __riscv_vmseq_vv_i32m1_b32_mu (m3, mask, v, v, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = __riscv_vlm_v_b32 (in, 4);\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmslt_vv_i32m1_b32 (v, v2, 4);\n+    vbool32_t m4 = __riscv_vmslt_vv_i32m1_b32_mu (m3, mask, v, v, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vmv} 2 } } */"}, {"sha": "0ef92a22a349828413799d5f762e3c4677282ff4", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vv_constraint-7.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vv_constraint-7.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmseq_vv_i32m1_b32 (v, v, 4);\n+    vbool32_t m4 = __riscv_vmseq_vv_i32m1_b32_m (m3, v2, v2, 4);\n+    m4 = __riscv_vmseq_vv_i32m1_b32_m (m4, v2, v2, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmslt_vv_i32m1_b32 (v, v, 4);\n+    vbool32_t m4 = __riscv_vmslt_vv_i32m1_b32_m (m3, v2, v2, 4);\n+    m4 = __riscv_vmslt_vv_i32m1_b32_m (m4, v2, v2, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "f11219c52211ad292181e7801a03b00d43467ace", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-123.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-123.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-123.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-123.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int32_t x)\n+{\n+    vint32mf2_t v = __riscv_vle32_v_i32mf2 (in, 4);\n+    vbool64_t mask = __riscv_vlm_v_b64 (in + 1, 4);\n+    vint32mf2_t v2 = __riscv_vle32_v_i32mf2 (in+444, 4);\n+    vbool64_t mask2 = __riscv_vmseq_vx_i32mf2_b64_m(mask,v,x,4);\n+    mask2 = __riscv_vmslt_vx_i32mf2_b64_mu(mask2,mask2,v2,x,4);\n+    __riscv_vsm_v_b64 (out, mask2, 4);\n+}\n+\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "f6c3015872ff3451af4345dff1ef3bcdd8f99756", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-124.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-124.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-124.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-124.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmseq_vx_i32m1_b32 (v, x, 4);\n+    vbool32_t m4 = __riscv_vmseq_vx_i32m1_b32_m (m3, v2, x, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmslt_vx_i32m1_b32 (v, x, 4);\n+    vbool32_t m4 = __riscv_vmslt_vx_i32m1_b32_m (m3, v2, x, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "d92e250dcf460278cc2a7aa5548422066d1fa1f8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-125.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-125.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-125.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-125.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmseq_vx_i32m1_b32 (v, x, 4);\n+    vbool32_t m4 = __riscv_vmseq_vx_i32m1_b32_mu (m3, m3, v2, x, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmslt_vx_i32m1_b32 (v, x, 4);\n+    vbool32_t m4 = __riscv_vmslt_vx_i32m1_b32_mu (m3, m3, v2, x, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "57971915ad8cee99eb24fee5175844b7dd1360ee", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-126.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-126.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-126.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-126.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmseq_vx_i32m1_b32 (v, x, 4);\n+    vbool32_t m4 = __riscv_vmseq_vx_i32m1_b32_mu (mask, m3, v, x, 4);\n+    m4 = __riscv_vmseq_vv_i32m1_b32_m (m4, v2, v2, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmslt_vx_i32m1_b32 (v, x, 4);\n+    vbool32_t m4 = __riscv_vmslt_vx_i32m1_b32_mu (mask, m3, v, x, 4);\n+    m4 = __riscv_vmslt_vv_i32m1_b32_m (m4, v2, v2, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vmv} 2 } } */"}, {"sha": "3933c35f4ce714cae2919e3450e219fd421b5e77", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-127.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-127.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-127.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-127.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = __riscv_vlm_v_b32 (in, 4);\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmseq_vx_i32m1_b32 (v2, x, 4);\n+    vbool32_t m4 = __riscv_vmseq_vx_i32m1_b32_mu (m3, mask, v, x, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = __riscv_vlm_v_b32 (in, 4);\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmslt_vx_i32m1_b32 (v2, x, 4);\n+    vbool32_t m4 = __riscv_vmslt_vx_i32m1_b32_mu (m3, mask, v, x, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vmv} 2 } } */"}, {"sha": "77c3a2b79e48cdd800ce1c1032f962cc54bd9929", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-128.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-128.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmseq_vx_i32m1_b32 (v, x, 4);\n+    vbool32_t m4 = __riscv_vmseq_vx_i32m1_b32_m (m3, v2, x, 4);\n+    m4 = __riscv_vmseq_vx_i32m1_b32_m (m4, v2, x, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmslt_vx_i32m1_b32 (v, x, 4);\n+    vbool32_t m4 = __riscv_vmslt_vx_i32m1_b32_m (m3, v2, x, 4);\n+    m4 = __riscv_vmslt_vx_i32m1_b32_m (m4, v2, x, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "db5dfe1fc3e838f07362045bf120843c6fba09e5", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-129.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-129.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-129.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-129.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,t[au],mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvmseq\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmseq\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**\tvsm\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void * in2, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1 (in2, 4);\n+    vbool32_t m3 = __riscv_vmseq_vx_i32m1_b32 (v, x, 4);\n+    vbool32_t m4 = __riscv_vmseq_vx_i32m1_b32_mu (m3, m3, v2, x, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,t[au],mu\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmseq\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmseq\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvsm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmseq_vx_i32m1_b32 (v, x, 4);\n+    vbool32_t m4 = __riscv_vmseq_vx_i32m1_b32_mu (mask, m3, v2, x, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,t[au],m[au]\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmseq\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmseq\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvsm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmseq_vx_i32m1_b32 (v, x, 4);\n+    vbool32_t m4 = __riscv_vmseq_vx_i32m1_b32_m (m3, v2, x, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}"}, {"sha": "da6b02ddd2df15f1161dd925b91ec35b2eb1bc4e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-130.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-130.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-130.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-130.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,t[au],mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvmseq\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvmseq\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16,v0.t\n+**\tvsm\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void * in2, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1 (in2, 4);\n+    vbool32_t m3 = __riscv_vmseq_vx_i32m1_b32 (v, -16, 4);\n+    vbool32_t m4 = __riscv_vmseq_vx_i32m1_b32_mu (m3, m3, v2, -16, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,t[au],mu\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmseq\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvmseq\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*-16,\\s*v0.t\n+**\tvsm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmseq_vx_i32m1_b32 (v, -16, 4);\n+    vbool32_t m4 = __riscv_vmseq_vx_i32m1_b32_mu (mask, m3, v2, -16, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,t[au],m[au]\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmseq\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvmseq\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16,\\s*v0.t\n+**\tvsm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmseq_vx_i32m1_b32 (v, -16, 4);\n+    vbool32_t m4 = __riscv_vmseq_vx_i32m1_b32_m (m3, v2, -16, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}"}, {"sha": "16d35c8053d8cc796a3888848a584244aadd6649", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-131.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-131.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-131.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-131.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,t[au],mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvmseq\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvmseq\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15,v0.t\n+**\tvsm\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void * in2, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1 (in2, 4);\n+    vbool32_t m3 = __riscv_vmseq_vx_i32m1_b32 (v, 15, 4);\n+    vbool32_t m4 = __riscv_vmseq_vx_i32m1_b32_mu (m3, m3, v2, 15, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,t[au],mu\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmseq\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvmseq\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*15,\\s*v0.t\n+**\tvsm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmseq_vx_i32m1_b32 (v, 15, 4);\n+    vbool32_t m4 = __riscv_vmseq_vx_i32m1_b32_mu (mask, m3, v2, 15, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,t[au],m[au]\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmseq\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvmseq\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15,\\s*v0.t\n+**\tvsm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmseq_vx_i32m1_b32 (v, 15, 4);\n+    vbool32_t m4 = __riscv_vmseq_vx_i32m1_b32_m (m3, v2, 15, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}"}, {"sha": "b804c15baa189e1cc4d2845d0d4968bcfc0c8915", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-132.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-132.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-132.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-132.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\t...\n+**\tvmseq\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmseq\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**\t...\n+**\tret\n+*/\n+void f1 (void * in, void * in2, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1 (in2, 4);\n+    vbool32_t m3 = __riscv_vmseq_vx_i32m1_b32 (v, 16, 4);\n+    vbool32_t m4 = __riscv_vmseq_vx_i32m1_b32_mu (m3, m3, v2, 16, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f2:\n+**\t...\n+**\tvmseq\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmseq\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\t...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmseq_vx_i32m1_b32 (v, 16, 4);\n+    vbool32_t m4 = __riscv_vmseq_vx_i32m1_b32_mu (mask, m3, v2, 16, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f3:\n+**\t...\n+**\tvmseq\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmseq\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\t...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmseq_vx_i32m1_b32 (v, 16, 4);\n+    vbool32_t m4 = __riscv_vmseq_vx_i32m1_b32_m (m3, v2, 16, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}"}, {"sha": "2da8ab7c15e35a1b543d557beeb6f98b536f8aa6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-133.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-133.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-133.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-133.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,t[au],mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**\tvsm\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void * in2, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1 (in2, 4);\n+    vbool32_t m3 = __riscv_vmslt_vx_i32m1_b32 (v, x, 4);\n+    vbool32_t m4 = __riscv_vmslt_vx_i32m1_b32_mu (m3, m3, v2, x, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,t[au],mu\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmslt\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvsm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmslt_vx_i32m1_b32 (v, x, 4);\n+    vbool32_t m4 = __riscv_vmslt_vx_i32m1_b32_mu (mask, m3, v2, x, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,t[au],m[au]\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvsm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmslt_vx_i32m1_b32 (v, x, 4);\n+    vbool32_t m4 = __riscv_vmslt_vx_i32m1_b32_m (m3, v2, x, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}"}, {"sha": "a83fee484949392b6e4d0d5f3f804c691118ff11", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-134.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-134.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-134.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-134.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,t[au],mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvmslt\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-15\n+**\tvmslt\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-15,v0.t\n+**\tvsm\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void * in2, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1 (in2, 4);\n+    vbool32_t m3 = __riscv_vmslt_vx_i32m1_b32 (v, -15, 4);\n+    vbool32_t m4 = __riscv_vmslt_vx_i32m1_b32_mu (m3, m3, v2, -15, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,t[au],mu\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmslt\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-15\n+**\tvmslt\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*-15,\\s*v0.t\n+**\tvsm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmslt_vx_i32m1_b32 (v, -15, 4);\n+    vbool32_t m4 = __riscv_vmslt_vx_i32m1_b32_mu (mask, m3, v2, -15, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,t[au],m[au]\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmslt\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-15\n+**\tvmslt\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-15,\\s*v0.t\n+**\tvsm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmslt_vx_i32m1_b32 (v, -15, 4);\n+    vbool32_t m4 = __riscv_vmslt_vx_i32m1_b32_m (m3, v2, -15, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}"}, {"sha": "767987657b97495e3a9d46f712328292c8f35269", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-135.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-135.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-135.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-135.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,t[au],mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvmslt\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*16\n+**\tvmslt\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*16,v0.t\n+**\tvsm\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void * in2, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1 (in2, 4);\n+    vbool32_t m3 = __riscv_vmslt_vx_i32m1_b32 (v, 16, 4);\n+    vbool32_t m4 = __riscv_vmslt_vx_i32m1_b32_mu (m3, m3, v2, 16, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,t[au],mu\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmslt\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*16\n+**\tvmslt\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*16,\\s*v0.t\n+**\tvsm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmslt_vx_i32m1_b32 (v, 16, 4);\n+    vbool32_t m4 = __riscv_vmslt_vx_i32m1_b32_mu (mask, m3, v2, 16, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,t[au],m[au]\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmslt\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*16\n+**\tvmslt\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*16,\\s*v0.t\n+**\tvsm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmslt_vx_i32m1_b32 (v, 16, 4);\n+    vbool32_t m4 = __riscv_vmslt_vx_i32m1_b32_m (m3, v2, 16, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}"}, {"sha": "d938c20aadca2be718bfc8f1a90b5fb695a19232", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-136.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-136.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-136.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-136.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\t...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**\t...\n+**\tret\n+*/\n+void f1 (void * in, void * in2, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1 (in2, 4);\n+    vbool32_t m3 = __riscv_vmslt_vx_i32m1_b32 (v, 17, 4);\n+    vbool32_t m4 = __riscv_vmslt_vx_i32m1_b32_mu (m3, m3, v2, 17, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f2:\n+**\t...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmslt\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\t...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmslt_vx_i32m1_b32 (v, 17, 4);\n+    vbool32_t m4 = __riscv_vmslt_vx_i32m1_b32_mu (mask, m3, v2, 17, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f3:\n+**\t...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\t...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmslt_vx_i32m1_b32 (v, 17, 4);\n+    vbool32_t m4 = __riscv_vmslt_vx_i32m1_b32_m (m3, v2, 17, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}"}, {"sha": "1825a6ab982f2ad2ea7dd7c1142b9e2296052f79", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-137.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-137.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-137.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-137.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,123 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvmseq\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvmseq\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16,v0.t\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmseq_vx_i64m1_b64 (v2, -16, 4);\n+  vbool64_t v4 = __riscv_vmseq_vx_i64m1_b64_m (v3, v2, -16, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvmseq\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvmseq\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15,v0.t\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmseq_vx_i64m1_b64 (v2, 15, 4);\n+  vbool64_t v4 = __riscv_vmseq_vx_i64m1_b64_m (v3, v2, 15, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvmseq\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmseq\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmseq_vx_i64m1_b64 (v2, 16, 4);\n+  vbool64_t v4 = __riscv_vmseq_vx_i64m1_b64_m (v3, v2, 16, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvmseq\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmseq\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmseq_vx_i64m1_b64 (v2, 0xAAAAAAAA, 4);\n+  vbool64_t v4 = __riscv_vmseq_vx_i64m1_b64_m (v3, v2, 0xAAAAAAAA, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvmseq\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmseq\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**  ...\n+**\tret\n+*/\n+void f4 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmseq_vx_i64m1_b64 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vbool64_t v4 = __riscv_vmseq_vx_i64m1_b64_m (v3, v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvmseq\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmseq\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**  ...\n+**\tret\n+*/\n+void f5 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmseq_vx_i64m1_b64 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vbool64_t v4 = __riscv_vmseq_vx_i64m1_b64_m (v3, v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvmseq\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmseq\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**  ...\n+**\tret\n+*/\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmseq_vx_i64m1_b64 (v2, x, 4);\n+  vbool64_t v4 = __riscv_vmseq_vx_i64m1_b64_m (v3, v2, x, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}"}, {"sha": "1b19982f5d28a2125031b7d34252a1afa02aba0d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-138.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-138.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-138.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-138.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,123 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvmslt\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-15\n+**\tvmslt\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-15,v0.t\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmslt_vx_i64m1_b64 (v2, -15, 4);\n+  vbool64_t v4 = __riscv_vmslt_vx_i64m1_b64_m (v3, v2, -15, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvmslt\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*16\n+**\tvmslt\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*16,v0.t\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmslt_vx_i64m1_b64 (v2, 16, 4);\n+  vbool64_t v4 = __riscv_vmslt_vx_i64m1_b64_m (v3, v2, 16, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmslt_vx_i64m1_b64 (v2, 17, 4);\n+  vbool64_t v4 = __riscv_vmslt_vx_i64m1_b64_m (v3, v2, 17, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmslt_vx_i64m1_b64 (v2, 0xAAAAAAAA, 4);\n+  vbool64_t v4 = __riscv_vmslt_vx_i64m1_b64_m (v3, v2, 0xAAAAAAAA, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**  ...\n+**\tret\n+*/\n+void f4 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmslt_vx_i64m1_b64 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vbool64_t v4 = __riscv_vmslt_vx_i64m1_b64_m (v3, v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**  ...\n+**\tret\n+*/\n+void f5 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmslt_vx_i64m1_b64 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vbool64_t v4 = __riscv_vmslt_vx_i64m1_b64_m (v3, v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**  ...\n+**\tret\n+*/\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmslt_vx_i64m1_b64 (v2, x, 4);\n+  vbool64_t v4 = __riscv_vmslt_vx_i64m1_b64_m (v3, v2, x, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}"}, {"sha": "e062234b011924297dca96f0029772468670cd43", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-139.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-139.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-139.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-139.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvmseq\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvmseq\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16,v0.t\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmseq_vx_i64m1_b64 (v2, -16, 4);\n+  vbool64_t v4 = __riscv_vmseq_vx_i64m1_b64_m (v3, v2, -16, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvmseq\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvmseq\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15,v0.t\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmseq_vx_i64m1_b64 (v2, 15, 4);\n+  vbool64_t v4 = __riscv_vmseq_vx_i64m1_b64_m (v3, v2, 15, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvmseq\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmseq\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmseq_vx_i64m1_b64 (v2, 16, 4);\n+  vbool64_t v4 = __riscv_vmseq_vx_i64m1_b64_m (v3, v2, 16, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvmseq\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmseq\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmseq_vx_i64m1_b64 (v2, 0xAAAAAAA, 4);\n+  vbool64_t v4 = __riscv_vmseq_vx_i64m1_b64_m (v3, v2, 0xAAAAAAA, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}"}, {"sha": "a1dbf777c98a6cb40386153493fa2ad01540c0c0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-140.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-140.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-140.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-140.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvmslt\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-15\n+**\tvmslt\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-15,v0.t\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmslt_vx_i64m1_b64 (v2, -15, 4);\n+  vbool64_t v4 = __riscv_vmslt_vx_i64m1_b64_m (v3, v2, -15, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvmslt\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*16\n+**\tvmslt\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*16,v0.t\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmslt_vx_i64m1_b64 (v2, 16, 4);\n+  vbool64_t v4 = __riscv_vmslt_vx_i64m1_b64_m (v3, v2, 16, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmslt_vx_i64m1_b64 (v2, 17, 4);\n+  vbool64_t v4 = __riscv_vmslt_vx_i64m1_b64_m (v3, v2, 17, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmslt_vx_i64m1_b64 (v2, 0xAAAAAAA, 4);\n+  vbool64_t v4 = __riscv_vmslt_vx_i64m1_b64_m (v3, v2, 0xAAAAAAA, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}"}, {"sha": "7ff6affd3a49b23285776399cc3975156fc33660", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-141.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-141.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-141.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-141.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmseq_vx_i64m1_b64 (v2, 0xAAAAAAAA, 4);\n+  vbool64_t v4 = __riscv_vmseq_vx_i64m1_b64_m (v3, v2, 0xAAAAAAAA, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vmseq\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "4613447f0d253ff14da1b28ec0013c7e6e4c46d7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-142.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-142.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-142.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-142.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmslt_vx_i64m1_b64 (v2, 0xAAAAAAAA, 4);\n+  vbool64_t v4 = __riscv_vmslt_vx_i64m1_b64_m (v3, v2, 0xAAAAAAAA, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "7f44087a0223eb1d390653bb89c5bf1b1300c222", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-143.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-143.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-143.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-143.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmseq_vx_i64m1_b64 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vbool64_t v4 = __riscv_vmseq_vx_i64m1_b64_m (v3, v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vmseq\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "9ccbc15f666326fc4dee81718164e9aa52e4a34a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-144.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-144.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-144.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-144.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmslt_vx_i64m1_b64 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vbool64_t v4 = __riscv_vmslt_vx_i64m1_b64_m (v3, v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "3d73b2af4fb2956e12ed76db4ea260d93cf32515", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-145.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-145.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-145.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-145.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmseq_vx_i64m1_b64 (v2, x, 4);\n+  vbool64_t v4 = __riscv_vmseq_vx_i64m1_b64_m (v3, v2, x, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vmseq\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "9aae1dc28f55f0408fccb90f8dfc6588ec05d8c3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-146.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-146.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-146.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-146.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmslt_vx_i64m1_b64 (v2, x, 4);\n+  vbool64_t v4 = __riscv_vmslt_vx_i64m1_b64_m (v3, v2, x, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "bf08954797d6e6f54e355670555c2addb7b543e9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-147.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-147.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-147.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-147.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int32_t x)\n+{\n+    vint32mf2_t v = __riscv_vle32_v_i32mf2 (in, 4);\n+    vbool64_t mask = __riscv_vlm_v_b64 (in + 1, 4);\n+    vint32mf2_t v2 = __riscv_vle32_v_i32mf2 (in+444, 4);\n+    vbool64_t mask2 = __riscv_vmsge_vx_i32mf2_b64_m(mask,v,x,4);\n+    mask2 = __riscv_vmsge_vx_i32mf2_b64_mu(mask2,mask2,v2,x,4);\n+    __riscv_vsm_v_b64 (out, mask2, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vmslt\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vmslt\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vmxor\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vmandn\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "c48134bc55346d83827199002aa639745b0561ef", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-148.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-148.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-148.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-148.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmsge_vx_i32m1_b32 (v, x, 4);\n+    vbool32_t m4 = __riscv_vmsge_vx_i32m1_b32_m (m3, v2, x, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vmslt\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vmslt\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vmxor\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vmnot\\.mm\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "7ba1a14aab64dd355199ee6fd57bf1bc6ebffe60", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-149.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-149.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-149.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-149.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmsge_vx_i32m1_b32 (v, x, 4);\n+    vbool32_t m4 = __riscv_vmsge_vx_i32m1_b32_mu (m3, m3, v2, x, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vmslt\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmandn\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vmnot\\.mm\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "6282fb48105fafe535613e66a3b3dc84fdd51c3c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-150.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-150.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-150.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-150.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmsge_vx_i32m1_b32 (v, x, 4);\n+    vbool32_t m4 = __riscv_vmsge_vx_i32m1_b32_mu (mask, m3, v, x, 4);\n+    m4 = __riscv_vmsge_vv_i32m1_b32_m (m4, v2, v2, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vmslt\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vmslt\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vmxor\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vmnot\\.mm\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vmv} 1 } } */"}, {"sha": "a2aa633aef75e204643431a560e6606b727a0948", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-151.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-151.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-151.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-151.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = __riscv_vlm_v_b32 (in, 4);\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmsge_vx_i32m1_b32 (v2, x, 4);\n+    vbool32_t m4 = __riscv_vmsge_vx_i32m1_b32_mu (m3, mask, v, x, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vmslt\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vmslt\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vmxor\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vmnot\\.mm\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vmv} 1 } } */"}, {"sha": "1bd751564abb2f616f726893343983a8ac379098", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-152.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-152.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-152.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-152.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    //asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmsge_vx_i32m1_b32 (v, x, 4);\n+    vbool32_t m4 = __riscv_vmsge_vx_i32m1_b32_m (m3, v2, x, 4);\n+    m4 = __riscv_vmsge_vx_i32m1_b32_m (m4, v2, x, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vmslt\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vmslt\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vmxor\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmnot\\.mm\\s+v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "5a3d475e3d8cfca3c65d88a617294bb2312fb83b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-153.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-153.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-153.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-153.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,t[au],m[au]\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  vmnot\\.mm\\s+v[0-9]+,\\s*v[0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmandn\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvsm\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void * in2, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1 (in2, 4);\n+    vbool32_t m3 = __riscv_vmsge_vx_i32m1_b32 (v, x, 4);\n+    vbool32_t m4 = __riscv_vmsge_vx_i32m1_b32_mu (m3, m3, v2, x, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,t[au],mu\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  vmnot\\.mm\\s+v[0-9]+,\\s*v[0-9]+\n+**\tvmslt\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvmxor\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvsm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmsge_vx_i32m1_b32 (v, x, 4);\n+    vbool32_t m4 = __riscv_vmsge_vx_i32m1_b32_mu (mask, m3, v2, x, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,t[au],m[au]\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  vmnot\\.mm\\s+v[0-9]+,\\s*v[0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvmxor\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvsm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmsge_vx_i32m1_b32 (v, x, 4);\n+    vbool32_t m4 = __riscv_vmsge_vx_i32m1_b32_m (m3, v2, x, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}"}, {"sha": "ddbde574565f1de6e4f6f18f77fb6acd8344159c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-154.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-154.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-154.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-154.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,t[au],mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvmsge\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-15\n+**\tvmsge\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-15,v0.t\n+**\tvsm\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void * in2, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1 (in2, 4);\n+    vbool32_t m3 = __riscv_vmsge_vx_i32m1_b32 (v, -15, 4);\n+    vbool32_t m4 = __riscv_vmsge_vx_i32m1_b32_mu (m3, m3, v2, -15, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,t[au],mu\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmsge\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-15\n+**\tvmsge\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*-15,\\s*v0.t\n+**\tvsm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmsge_vx_i32m1_b32 (v, -15, 4);\n+    vbool32_t m4 = __riscv_vmsge_vx_i32m1_b32_mu (mask, m3, v2, -15, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,t[au],m[au]\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmsge\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-15\n+**\tvmsge\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-15,\\s*v0.t\n+**\tvsm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmsge_vx_i32m1_b32 (v, -15, 4);\n+    vbool32_t m4 = __riscv_vmsge_vx_i32m1_b32_m (m3, v2, -15, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}"}, {"sha": "d22f3e4baa69ed3e40ff23d1b821f271b83ad02b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-155.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-155.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-155.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-155.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,t[au],mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvmsge\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*16\n+**\tvmsge\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*16,v0.t\n+**\tvsm\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void * in2, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1 (in2, 4);\n+    vbool32_t m3 = __riscv_vmsge_vx_i32m1_b32 (v, 16, 4);\n+    vbool32_t m4 = __riscv_vmsge_vx_i32m1_b32_mu (m3, m3, v2, 16, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,t[au],mu\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmsge\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*16\n+**\tvmsge\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*16,\\s*v0.t\n+**\tvsm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmsge_vx_i32m1_b32 (v, 16, 4);\n+    vbool32_t m4 = __riscv_vmsge_vx_i32m1_b32_mu (mask, m3, v2, 16, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,t[au],m[au]\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmsge\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*16\n+**\tvmsge\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*16,\\s*v0.t\n+**\tvsm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmsge_vx_i32m1_b32 (v, 16, 4);\n+    vbool32_t m4 = __riscv_vmsge_vx_i32m1_b32_m (m3, v2, 16, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}"}, {"sha": "e2e757097091bb110ff6418a576c70d51ccbee6b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-156.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-156.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-156.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-156.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\t...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  vmnot\\.mm\\s+v[0-9]+,\\s*v[0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmandn\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\t...\n+**\tret\n+*/\n+void f1 (void * in, void * in2, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1 (in2, 4);\n+    vbool32_t m3 = __riscv_vmsge_vx_i32m1_b32 (v, 17, 4);\n+    vbool32_t m4 = __riscv_vmsge_vx_i32m1_b32_mu (m3, m3, v2, 17, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f2:\n+**\t...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  vmnot\\.mm\\s+v[0-9]+,\\s*v[0-9]+\n+**\tvmslt\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvmxor\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\t...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmsge_vx_i32m1_b32 (v, 17, 4);\n+    vbool32_t m4 = __riscv_vmsge_vx_i32m1_b32_mu (mask, m3, v2, 17, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f3:\n+**\t...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  vmnot\\.mm\\s+v[0-9]+,\\s*v[0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvmxor\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\t...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmsge_vx_i32m1_b32 (v, 17, 4);\n+    vbool32_t m4 = __riscv_vmsge_vx_i32m1_b32_m (m3, v2, 17, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}"}, {"sha": "2a9cb6eb6b413dc959ca44f72a328ceb716d6d27", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-157.c", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-157.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-157.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-157.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,133 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvmsge\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-15\n+**\tvmsge\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-15,v0.t\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmsge_vx_i64m1_b64 (v2, -15, 4);\n+  vbool64_t v4 = __riscv_vmsge_vx_i64m1_b64_m (v3, v2, -15, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvmsge\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*16\n+**\tvmsge\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*16,v0.t\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmsge_vx_i64m1_b64 (v2, 16, 4);\n+  vbool64_t v4 = __riscv_vmsge_vx_i64m1_b64_m (v3, v2, 16, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  vmnot\\.mm\\s+v[0-9]+,\\s*v[0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**\tvmxor\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmsge_vx_i64m1_b64 (v2, 17, 4);\n+  vbool64_t v4 = __riscv_vmsge_vx_i64m1_b64_m (v3, v2, 17, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  vmnot\\.mm\\s+v[0-9]+,\\s*v[0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**\tvmxor\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmsge_vx_i64m1_b64 (v2, 0xAAAAAAAA, 4);\n+  vbool64_t v4 = __riscv_vmsge_vx_i64m1_b64_m (v3, v2, 0xAAAAAAAA, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  vmnot\\.mm\\s+v[0-9]+,\\s*v[0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**\tvmxor\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f4 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmsge_vx_i64m1_b64 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vbool64_t v4 = __riscv_vmsge_vx_i64m1_b64_m (v3, v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  vmnot\\.mm\\s+v[0-9]+,\\s*v[0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**\tvmxor\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f5 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmsge_vx_i64m1_b64 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vbool64_t v4 = __riscv_vmsge_vx_i64m1_b64_m (v3, v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  vmnot\\.mm\\s+v[0-9]+,\\s*v[0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**\tvmxor\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmsge_vx_i64m1_b64 (v2, x, 4);\n+  vbool64_t v4 = __riscv_vmsge_vx_i64m1_b64_m (v3, v2, x, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}"}, {"sha": "d22f3e4baa69ed3e40ff23d1b821f271b83ad02b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-158.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-158.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-158.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-158.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,t[au],mu\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvmsge\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*16\n+**\tvmsge\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*16,v0.t\n+**\tvsm\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void * in2, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1 (in2, 4);\n+    vbool32_t m3 = __riscv_vmsge_vx_i32m1_b32 (v, 16, 4);\n+    vbool32_t m4 = __riscv_vmsge_vx_i32m1_b32_mu (m3, m3, v2, 16, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,t[au],mu\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmsge\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*16\n+**\tvmsge\\.vi\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*16,\\s*v0.t\n+**\tvsm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmsge_vx_i32m1_b32 (v, 16, 4);\n+    vbool32_t m4 = __riscv_vmsge_vx_i32m1_b32_mu (mask, m3, v2, 16, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,t[au],m[au]\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvmsge\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*16\n+**\tvmsge\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*16,\\s*v0.t\n+**\tvsm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmsge_vx_i32m1_b32 (v, 16, 4);\n+    vbool32_t m4 = __riscv_vmsge_vx_i32m1_b32_m (m3, v2, 16, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}"}, {"sha": "e2e757097091bb110ff6418a576c70d51ccbee6b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-159.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-159.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-159.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-159.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\t...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  vmnot\\.mm\\s+v[0-9]+,\\s*v[0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvmandn\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\t...\n+**\tret\n+*/\n+void f1 (void * in, void * in2, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1 (in2, 4);\n+    vbool32_t m3 = __riscv_vmsge_vx_i32m1_b32 (v, 17, 4);\n+    vbool32_t m4 = __riscv_vmsge_vx_i32m1_b32_mu (m3, m3, v2, 17, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f2:\n+**\t...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  vmnot\\.mm\\s+v[0-9]+,\\s*v[0-9]+\n+**\tvmslt\\.vx\\tv[1-9][0-9]?,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvmxor\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\t...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmsge_vx_i32m1_b32 (v, 17, 4);\n+    vbool32_t m4 = __riscv_vmsge_vx_i32m1_b32_mu (mask, m3, v2, 17, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}\n+\n+/*\n+** f3:\n+**\t...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  vmnot\\.mm\\s+v[0-9]+,\\s*v[0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\n+**\tvmxor\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\t...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in, 4);\n+    vbool32_t m3 = __riscv_vmsge_vx_i32m1_b32 (v, 17, 4);\n+    vbool32_t m4 = __riscv_vmsge_vx_i32m1_b32_m (m3, v2, 17, 4);\n+    __riscv_vsm_v_b32 (out, m4, 4);\n+}"}, {"sha": "2a9cb6eb6b413dc959ca44f72a328ceb716d6d27", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-160.c", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-160.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-160.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-160.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,133 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvmsge\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-15\n+**\tvmsge\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-15,v0.t\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmsge_vx_i64m1_b64 (v2, -15, 4);\n+  vbool64_t v4 = __riscv_vmsge_vx_i64m1_b64_m (v3, v2, -15, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvmsge\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*16\n+**\tvmsge\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*16,v0.t\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmsge_vx_i64m1_b64 (v2, 16, 4);\n+  vbool64_t v4 = __riscv_vmsge_vx_i64m1_b64_m (v3, v2, 16, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  vmnot\\.mm\\s+v[0-9]+,\\s*v[0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**\tvmxor\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmsge_vx_i64m1_b64 (v2, 17, 4);\n+  vbool64_t v4 = __riscv_vmsge_vx_i64m1_b64_m (v3, v2, 17, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  vmnot\\.mm\\s+v[0-9]+,\\s*v[0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**\tvmxor\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmsge_vx_i64m1_b64 (v2, 0xAAAAAAAA, 4);\n+  vbool64_t v4 = __riscv_vmsge_vx_i64m1_b64_m (v3, v2, 0xAAAAAAAA, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  vmnot\\.mm\\s+v[0-9]+,\\s*v[0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**\tvmxor\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f4 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmsge_vx_i64m1_b64 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vbool64_t v4 = __riscv_vmsge_vx_i64m1_b64_m (v3, v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  vmnot\\.mm\\s+v[0-9]+,\\s*v[0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**\tvmxor\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f5 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmsge_vx_i64m1_b64 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vbool64_t v4 = __riscv_vmsge_vx_i64m1_b64_m (v3, v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  vmnot\\.mm\\s+v[0-9]+,\\s*v[0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**\tvmxor\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmsge_vx_i64m1_b64 (v2, x, 4);\n+  vbool64_t v4 = __riscv_vmsge_vx_i64m1_b64_m (v3, v2, x, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}"}, {"sha": "d95c7c6b6d4195820cd6b061205e573fd49e294e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-161.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-161.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-161.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-161.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,76 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvmsge\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-15\n+**\tvmsge\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-15,v0.t\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmsge_vx_i64m1_b64 (v2, -15, 4);\n+  vbool64_t v4 = __riscv_vmsge_vx_i64m1_b64_m (v3, v2, -15, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvmsge\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*16\n+**\tvmsge\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*16,v0.t\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmsge_vx_i64m1_b64 (v2, 16, 4);\n+  vbool64_t v4 = __riscv_vmsge_vx_i64m1_b64_m (v3, v2, 16, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  vmnot\\.mm\\s+v[0-9]+,\\s*v[0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**\tvmxor\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmsge_vx_i64m1_b64 (v2, 17, 4);\n+  vbool64_t v4 = __riscv_vmsge_vx_i64m1_b64_m (v3, v2, 17, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  vmnot\\.mm\\s+v[0-9]+,\\s*v[0-9]+\n+**\tvmslt\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,v0.t\n+**\tvmxor\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmsge_vx_i64m1_b64 (v2, 0xAAAAAAA, 4);\n+  vbool64_t v4 = __riscv_vmsge_vx_i64m1_b64_m (v3, v2, 0xAAAAAAA, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}"}, {"sha": "976487a680cb55447383b2b314db2e6a679be911", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-162.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-162.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-162.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-162.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmsge_vx_i64m1_b64 (v2, 0xAAAAAAAA, 4);\n+  vbool64_t v4 = __riscv_vmsge_vx_i64m1_b64_m (v3, v2, 0xAAAAAAAA, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */\n+"}, {"sha": "9245f19c1db52a8e6cf1009024b6fe37b06fb40a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-163.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-163.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-163.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-163.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmsge_vx_i64m1_b64 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vbool64_t v4 = __riscv_vmsge_vx_i64m1_b64_m (v3, v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "bd6916e9c38d487bf254d91b215995e8444d852b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-164.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-164.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-164.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-164.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmsge_vx_i64m1_b64 (v2, x, 4);\n+  vbool64_t v4 = __riscv_vmsge_vx_i64m1_b64_m (v3, v2, x, 4);\n+  __riscv_vsm_v_b64 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vmslt\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "313595e29cdbe8c0ac98b83cb277a64b96c7f025", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-165.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-165.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-165.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-165.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vbool64_t v3 = __riscv_vmsgeu_vx_u64m1_b64 (v2, 0, 4);\n+  __riscv_vsm_v_b64 (out + 2, v3, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vmset\\.m\\s+v[0-9]+} 1 } } */"}, {"sha": "1bd52f4c1e1683b913e2c6f410b14ce066250b58", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-166.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-166.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-166.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-166.c?ref=6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vbool64_t mask = __riscv_vlm_v_b64 (in,8);\n+  vbool64_t mask2 = __riscv_vlm_v_b64 (in + 100,8);\n+  vbool64_t v3 = __riscv_vmsgeu_vx_u64m1_b64_mu (mask,mask2,v2, 0, 4);\n+  __riscv_vsm_v_b64 (out + 2, v3, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vmor\\.mm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}]}