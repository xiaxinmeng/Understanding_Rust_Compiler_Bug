{"sha": "7040894c4441fd3f9a39b0dd2d7b640e8e85808a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA0MDg5NGM0NDQxZmQzZjlhMzliMGRkMmQ3YjY0MGU4ZTg1ODA4YQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-05-13T20:22:02Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-05-13T20:22:02Z"}, "message": "c++: Template arg comparison\n\nWhen fixing up the template specialization hasher I was confused by\nthe control flow through template_args_equal.  This reorders the\ncategory checking, so it is clearer as to what kind of node can reach\nwhich point.\n\n\t* pt.c (template_args_equal): Reorder category checking for\n\tclarity.", "tree": {"sha": "f91f9fd4b7b3fd779844bf07ee84b7436bc4504c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f91f9fd4b7b3fd779844bf07ee84b7436bc4504c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7040894c4441fd3f9a39b0dd2d7b640e8e85808a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7040894c4441fd3f9a39b0dd2d7b640e8e85808a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7040894c4441fd3f9a39b0dd2d7b640e8e85808a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7040894c4441fd3f9a39b0dd2d7b640e8e85808a/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bb30de62f59caa9af1ec01aa1029795f4748842", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bb30de62f59caa9af1ec01aa1029795f4748842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bb30de62f59caa9af1ec01aa1029795f4748842"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "2e5351475af58a4b3d6e2c13cb2f071a91a155b7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7040894c4441fd3f9a39b0dd2d7b640e8e85808a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7040894c4441fd3f9a39b0dd2d7b640e8e85808a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7040894c4441fd3f9a39b0dd2d7b640e8e85808a", "patch": "@@ -1,5 +1,8 @@\n 2020-05-13  Nathan Sidwell  <nathan@acm.org>\n \n+\t* pt.c (template_args_equal): Reorder category checking for\n+\tclarity.\n+\n \t* pt.c (perform_typedefs_access_check): Cache expensively\n \tcalculated object references.\n \t(check_auto_in_tmpl_args): Just assert we do not get unexpected"}, {"sha": "a36f603761c1ca2c405e6769a13c3ab851f17d65", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7040894c4441fd3f9a39b0dd2d7b640e8e85808a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7040894c4441fd3f9a39b0dd2d7b640e8e85808a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7040894c4441fd3f9a39b0dd2d7b640e8e85808a", "patch": "@@ -9084,22 +9084,22 @@ template_args_equal (tree ot, tree nt, bool partial_order /* = false */)\n   if (class_nttp_const_wrapper_p (ot))\n     ot = TREE_OPERAND (ot, 0);\n \n-  if (TREE_CODE (nt) == TREE_VEC)\n+  if (TREE_CODE (nt) == TREE_VEC || TREE_CODE (nt) == TREE_VEC)\n     /* For member templates */\n-    return TREE_CODE (ot) == TREE_VEC && comp_template_args (ot, nt);\n-  else if (PACK_EXPANSION_P (ot))\n-    return (PACK_EXPANSION_P (nt)\n+    return TREE_CODE (ot) == TREE_CODE (nt) && comp_template_args (ot, nt);\n+  else if (PACK_EXPANSION_P (ot) || PACK_EXPANSION_P (nt))\n+    return (PACK_EXPANSION_P (ot) && PACK_EXPANSION_P (nt)\n \t    && template_args_equal (PACK_EXPANSION_PATTERN (ot),\n \t\t\t\t    PACK_EXPANSION_PATTERN (nt))\n \t    && template_args_equal (PACK_EXPANSION_EXTRA_ARGS (ot),\n \t\t\t\t    PACK_EXPANSION_EXTRA_ARGS (nt)));\n   else if (ARGUMENT_PACK_P (ot) || ARGUMENT_PACK_P (nt))\n     return cp_tree_equal (ot, nt);\n-  else if (ot && TREE_CODE (ot) == ARGUMENT_PACK_SELECT)\n+  else if (TREE_CODE (ot) == ARGUMENT_PACK_SELECT)\n     gcc_unreachable ();\n-  else if (TYPE_P (nt))\n+  else if (TYPE_P (nt) || TYPE_P (nt))\n     {\n-      if (!TYPE_P (ot))\n+      if (!(TYPE_P (nt) && TYPE_P (ot)))\n \treturn false;\n       /* Don't treat an alias template specialization with dependent\n \t arguments as equivalent to its underlying type when used as a\n@@ -9117,8 +9117,6 @@ template_args_equal (tree ot, tree nt, bool partial_order /* = false */)\n       else\n \treturn same_type_p (ot, nt);\n     }\n-  else if (TREE_CODE (ot) == TREE_VEC || TYPE_P (ot))\n-    return 0;\n   else\n     {\n       /* Try to treat a template non-type argument that has been converted\n@@ -9128,6 +9126,7 @@ template_args_equal (tree ot, tree nt, bool partial_order /* = false */)\n \t     || code1 == NON_LVALUE_EXPR;\n \t   code1 = TREE_CODE (ot))\n \tot = TREE_OPERAND (ot, 0);\n+\n       for (enum tree_code code2 = TREE_CODE (nt);\n \t   CONVERT_EXPR_CODE_P (code2)\n \t     || code2 == NON_LVALUE_EXPR;"}]}