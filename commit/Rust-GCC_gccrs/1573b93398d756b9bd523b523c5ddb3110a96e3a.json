{"sha": "1573b93398d756b9bd523b523c5ddb3110a96e3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU3M2I5MzM5OGQ3NTZiOWJkNTIzYjUyM2M1ZGRiMzExMGE5NmUzYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2000-04-06T15:07:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2000-04-06T15:07:26Z"}, "message": "sparc.md (movtf_insn_sp32, [...]): Accept loading 0.0 into GENERAL_REGS.\n\n\t* config/sparc/sparc.md (movtf_insn_sp32, movtf_insn_vis_sp32,\n\tmovtf_no_e_insn_sp32, movtf_insn_hq_sp64, movtf_insn_hq_vis_sp64,\n\tmovtf_no_e_insn_sp64): Accept loading 0.0 into GENERAL_REGS.\n\t(movtf_insn_sp64, movtf_insn_vis_sp64): Likewise.\n\tAccept storing GENERAL_REGS into offsetable memory.\n\t* config/sparc/sparc.h (PREFERRED_RELOAD_CLASS): Don't allow\n\tbuilding a TFmode constant other than 0.0L into GENERAL_REGS.\n\nFrom-SVN: r32972", "tree": {"sha": "6b6190581cc11ac799a43394b7a47275f324393d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b6190581cc11ac799a43394b7a47275f324393d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1573b93398d756b9bd523b523c5ddb3110a96e3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1573b93398d756b9bd523b523c5ddb3110a96e3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1573b93398d756b9bd523b523c5ddb3110a96e3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1573b93398d756b9bd523b523c5ddb3110a96e3a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0ea6d60cfdda1af1812c8a6550e0b4a2d955856b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea6d60cfdda1af1812c8a6550e0b4a2d955856b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ea6d60cfdda1af1812c8a6550e0b4a2d955856b"}], "stats": {"total": 47, "additions": 30, "deletions": 17}, "files": [{"sha": "202f8a290c31aca0acb3bca4aa8c66b7c86d1385", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1573b93398d756b9bd523b523c5ddb3110a96e3a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1573b93398d756b9bd523b523c5ddb3110a96e3a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1573b93398d756b9bd523b523c5ddb3110a96e3a", "patch": "@@ -1,3 +1,13 @@\n+2000-04-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/sparc/sparc.md (movtf_insn_sp32, movtf_insn_vis_sp32,\n+\tmovtf_no_e_insn_sp32, movtf_insn_hq_sp64, movtf_insn_hq_vis_sp64,\n+\tmovtf_no_e_insn_sp64): Accept loading 0.0 into GENERAL_REGS.\n+\t(movtf_insn_sp64, movtf_insn_vis_sp64): Likewise.\n+\tAccept storing GENERAL_REGS into offsetable memory.\n+\t* config/sparc/sparc.h (PREFERRED_RELOAD_CLASS): Don't allow\n+\tbuilding a TFmode constant other than 0.0L into GENERAL_REGS.\n+\n 2000-04-06  Clinton Popetz  <cpopetz@cygnus.com>\n \n \t* regrename.c (regrename_optimize): Handle no REG_ALLOC_ORDER."}, {"sha": "5b226578d8b036e54a68d8ccf8f288e9298f189a", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1573b93398d756b9bd523b523c5ddb3110a96e3a/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1573b93398d756b9bd523b523c5ddb3110a96e3a/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=1573b93398d756b9bd523b523c5ddb3110a96e3a", "patch": "@@ -1454,14 +1454,18 @@ extern char leaf_reg_remap[];\n /* - We can't load constants into FP registers.\n    - We can't load FP constants into integer registers when soft-float,\n      because there is no soft-float pattern with a r/F constraint.\n+   - We can't load FP constants into integer registers for TFmode unless\n+     it is 0.0L, because there is no movtf pattern with a r/F constraint.\n    - Try and reload integer constants (symbolic or otherwise) back into\n      registers directly, rather than having them dumped to memory.  */\n \n #define PREFERRED_RELOAD_CLASS(X,CLASS)\t\t\t\\\n   (CONSTANT_P (X)\t\t\t\t\t\\\n    ? ((FP_REG_CLASS_P (CLASS)\t\t\t\t\\\n        || (GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT\t\\\n-\t   && ! TARGET_FPU))\t\t\t\t\\\n+\t   && ! TARGET_FPU)\t\t\t\t\\\n+       || (GET_MODE (X) == TFmode\t\t\t\\\n+\t   && ! fp_zero_operand (X, TFmode)))\t\t\\\n       ? NO_REGS\t\t\t\t\t\t\\\n       : (!FP_REG_CLASS_P (CLASS)\t\t\t\\\n          && GET_MODE_CLASS (GET_MODE (X)) == MODE_INT)\t\\"}, {"sha": "9b91c3090a3d652e7e7b26f5a9e9985403047793", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1573b93398d756b9bd523b523c5ddb3110a96e3a/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1573b93398d756b9bd523b523c5ddb3110a96e3a/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=1573b93398d756b9bd523b523c5ddb3110a96e3a", "patch": "@@ -3705,8 +3705,8 @@\n ;; Be careful, fmovq and {st,ld}{x,q} do not exist when !arch64 so\n ;; we must split them all.  :-(\n (define_insn \"*movtf_insn_sp32\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=e,o,U,o,r,o\")\n-\t(match_operand:TF 1 \"input_operand\"    \"oe,Ge,o,U,ro,r\"))]\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=e,o,U,r\")\n+\t(match_operand:TF 1 \"input_operand\"    \"oe,GeUr,o,roG\"))]\n   \"TARGET_FPU\n    && ! TARGET_VIS\n    && ! TARGET_ARCH64\n@@ -3717,8 +3717,8 @@\n   [(set_attr \"length\" \"4\")])\n \n (define_insn \"*movtf_insn_vis_sp32\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=e,o,U,o,r,o\")\n-\t(match_operand:TF 1 \"input_operand\"    \"Goe,Ge,o,U,ro,r\"))]\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=e,o,U,r\")\n+\t(match_operand:TF 1 \"input_operand\"    \"Goe,GeUr,o,roG\"))]\n   \"TARGET_FPU\n    && TARGET_VIS\n    && ! TARGET_ARCH64\n@@ -3734,7 +3734,7 @@\n \n (define_insn \"*movtf_no_e_insn_sp32\"\n   [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=o,U,o,r,o\")\n-\t(match_operand:TF 1 \"input_operand\"    \"G,o,U,ro,r\"))]\n+\t(match_operand:TF 1 \"input_operand\"    \"G,o,U,roG,r\"))]\n   \"! TARGET_FPU\n    && ! TARGET_ARCH64\n    && (register_operand (operands[0], TFmode)\n@@ -3746,8 +3746,8 @@\n ;; Now handle the float reg cases directly when arch64,\n ;; hard_quad, and proper reg number alignment are all true.\n (define_insn \"*movtf_insn_hq_sp64\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=e,e,m,o,r,o\")\n-        (match_operand:TF 1 \"input_operand\"    \"e,m,e,G,ro,r\"))]\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=e,e,m,o,r\")\n+        (match_operand:TF 1 \"input_operand\"    \"e,m,e,Gr,roG\"))]\n   \"TARGET_FPU\n    && ! TARGET_VIS\n    && TARGET_ARCH64\n@@ -3760,14 +3760,13 @@\n   ldq\\\\t%1, %0\n   stq\\\\t%1, %0\n   #\n-  #\n   #\"\n-  [(set_attr \"type\" \"fpmove,fpload,fpstore,*,*,*\")\n-   (set_attr \"length\" \"1,1,1,2,2,2\")])\n+  [(set_attr \"type\" \"fpmove,fpload,fpstore,*,*\")\n+   (set_attr \"length\" \"1,1,1,2,2\")])\n \n (define_insn \"*movtf_insn_hq_vis_sp64\"\n   [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=e,e,m,eo,r,o\")\n-        (match_operand:TF 1 \"input_operand\"    \"e,m,e,G,ro,r\"))]\n+        (match_operand:TF 1 \"input_operand\"    \"e,m,e,G,roG,r\"))]\n   \"TARGET_FPU\n    && TARGET_VIS\n    && TARGET_ARCH64\n@@ -3788,8 +3787,8 @@\n ;; Now we allow the integer register cases even when\n ;; only arch64 is true.\n (define_insn \"*movtf_insn_sp64\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=o,e,r\")\n-        (match_operand:TF 1 \"input_operand\"    \"Ge,oe,or\"))]\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=e,o,r\")\n+        (match_operand:TF 1 \"input_operand\"    \"oe,Ger,orG\"))]\n   \"TARGET_FPU\n    && ! TARGET_VIS\n    && TARGET_ARCH64\n@@ -3801,8 +3800,8 @@\n   [(set_attr \"length\" \"2\")])\n \n (define_insn \"*movtf_insn_vis_sp64\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=eo,e,r\")\n-        (match_operand:TF 1 \"input_operand\"    \"Ge,o,or\"))]\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=e,o,r\")\n+        (match_operand:TF 1 \"input_operand\"    \"Goe,Ger,orG\"))]\n   \"TARGET_FPU\n    && TARGET_VIS\n    && TARGET_ARCH64\n@@ -3815,7 +3814,7 @@\n \n (define_insn \"*movtf_no_e_insn_sp64\"\n   [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=r,o\")\n-        (match_operand:TF 1 \"input_operand\"    \"or,rG\"))]\n+        (match_operand:TF 1 \"input_operand\"    \"orG,rG\"))]\n   \"! TARGET_FPU\n    && TARGET_ARCH64\n    && (register_operand (operands[0], TFmode)"}]}