{"sha": "0a090f42f6f1a646830a7b51c8b267fe27da383c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGEwOTBmNDJmNmYxYTY0NjgzMGE3YjUxYzhiMjY3ZmUyN2RhMzgzYw==", "commit": {"author": {"name": "Seongbae Park", "email": "seongbae.park@gmail.com", "date": "2007-06-12T20:47:16Z"}, "committer": {"name": "Seongbae Park", "email": "spark@gcc.gnu.org", "date": "2007-06-12T20:47:16Z"}, "message": "opts.c (common_handle_option): Handle new option -fdbg-cnt-list.\n\n\n2007-06-12  Seongbae Park  <seongbae.park@gmail.com>\n\n\t* opts.c (common_handle_option): Handle new option -fdbg-cnt-list.\n\t* dbgcnt.c (dbg_cnt_set_limit_by_name): Return value\n\tto indicate an error.\n\t(dbg_cnt_process_single_pair, dbg_cnt_list_all_counters): New functions\n\t(dbg_cnt_process_opt): Print an error on a bad argument.\n\t* dbgcnt.h (dbg_cnt_list_all_counters): New function declaration.\n\t* common.opt (-fdbg-cnt-list): New.\n\t* doc/invoke.texi (-fdbg-cnt-list,-fdbg-cnt=): New.\n\nFrom-SVN: r125657", "tree": {"sha": "442ad5f0eb85d93bc8a16556055d25685c473bc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/442ad5f0eb85d93bc8a16556055d25685c473bc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a090f42f6f1a646830a7b51c8b267fe27da383c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a090f42f6f1a646830a7b51c8b267fe27da383c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a090f42f6f1a646830a7b51c8b267fe27da383c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a090f42f6f1a646830a7b51c8b267fe27da383c/comments", "author": null, "committer": null, "parents": [{"sha": "773a78612016aafd567920f86a36f28703d56674", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/773a78612016aafd567920f86a36f28703d56674", "html_url": "https://github.com/Rust-GCC/gccrs/commit/773a78612016aafd567920f86a36f28703d56674"}], "stats": {"total": 104, "additions": 89, "deletions": 15}, "files": [{"sha": "c60991ff9133824e6bdb922a8afedef60efcbdd3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a090f42f6f1a646830a7b51c8b267fe27da383c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a090f42f6f1a646830a7b51c8b267fe27da383c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a090f42f6f1a646830a7b51c8b267fe27da383c", "patch": "@@ -1,3 +1,14 @@\n+2007-06-12  Seongbae Park  <seongbae.park@gmail.com>\n+\n+\t* opts.c (common_handle_option): Handle new option -fdbg-cnt-list.\n+\t* dbgcnt.c (dbg_cnt_set_limit_by_name): Return value\n+\tto indicate an error.\n+\t(dbg_cnt_process_single_pair, dbg_cnt_list_all_counters): New functions\n+\t(dbg_cnt_process_opt): Print an error on a bad argument.\n+\t* dbgcnt.h (dbg_cnt_list_all_counters): New function declaration.\n+\t* common.opt (-fdbg-cnt-list): New.\n+\t* doc/invoke.texi (-fdbg-cnt-list,-fdbg-cnt=): New.\n+\n 2007-06-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-ssa-alias.c (finalize_ref_all_pointers): Clear pt_anything"}, {"sha": "d03652c0ad3d01efd6c6dcce807464dc938ef575", "filename": "gcc/common.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a090f42f6f1a646830a7b51c8b267fe27da383c/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a090f42f6f1a646830a7b51c8b267fe27da383c/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=0a090f42f6f1a646830a7b51c8b267fe27da383c", "patch": "@@ -392,9 +392,13 @@ fdata-sections\n Common Report Var(flag_data_sections) Optimization\n Place data items into their own section\n \n+fdbg-cnt-list\n+Common Report\n+List all available debugging counters with their limits and counts.\n+\n fdbg-cnt=\n Common RejectNegative Joined\n--fdbg-cnt=<counter>:<limit>             Set the debug counter limit.   \n+-fdbg-cnt=<counter>:<limit>[,<counter>:<limit>,...]    Set the debug counter limit.   \n \n ; Nonzero for -fdefer-pop: don't pop args after each function call\n ; instead save them up to pop many calls' args with one insns."}, {"sha": "660428e1968a62272c2ad917365103f88990bb05", "filename": "gcc/dbgcnt.c", "status": "modified", "additions": 52, "deletions": 14, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a090f42f6f1a646830a7b51c8b267fe27da383c/gcc%2Fdbgcnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a090f42f6f1a646830a7b51c8b267fe27da383c/gcc%2Fdbgcnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbgcnt.c?ref=0a090f42f6f1a646830a7b51c8b267fe27da383c", "patch": "@@ -23,6 +23,7 @@ See dbgcnt.def for usage information.  */\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"errors.h\"\n \n #include \"dbgcnt.h\"\n \n@@ -70,7 +71,7 @@ dbg_cnt_set_limit_by_index (enum debug_counter index, int value)\n   fprintf (stderr, \"dbg_cnt '%s' set to %d\\n\", map[index].name, value);\n }\n \n-static void\n+static bool\n dbg_cnt_set_limit_by_name (const char *name, int len, int value)\n {\n   int i;\n@@ -79,29 +80,66 @@ dbg_cnt_set_limit_by_name (const char *name, int len, int value)\n       break;\n \n   if (i < 0)\n-    return;\n+    return false;\n \n   dbg_cnt_set_limit_by_index (i, value);\n+  return true;\n }\n \n-void\n-dbg_cnt_process_opt (const char *arg)\n+\n+/* Process a single \"name:value\" pair.\n+   Returns NULL if there's no valid pair is found.\n+   Otherwise returns a pointer to the end of the pair. */\n+\n+static const char *\n+dbg_cnt_process_single_pair (const char *arg)\n {\n    char *colon = strchr (arg, ':');\n-   char *comma;\n+   char *endptr = NULL;\n+   int value;\n    \n    if (colon == NULL)\n-     return;\n+     return NULL;\n+\n+   value = strtol (colon + 1, &endptr, 10);\n \n-   dbg_cnt_set_limit_by_name (arg, colon - arg, atoi (colon + 1));\n+   if (endptr != NULL && endptr != colon + 1\n+       && dbg_cnt_set_limit_by_name (arg, colon - arg, value))\n+     return endptr;\n+   \n+   return NULL;\n+}\n \n-   comma = strchr (colon + 1, ',');\n-   while (comma)\n+void\n+dbg_cnt_process_opt (const char *arg)\n+{\n+   const char *start = arg;\n+   const char *next;\n+   do {\n+     next = dbg_cnt_process_single_pair (arg);\n+     if (next == NULL)\n+       break;\n+   } while (*next == ',' && (arg = next + 1));\n+\n+   if (next == NULL || *next != 0)\n      {\n-       colon = strchr (comma + 1, ':');\n-       if (colon == NULL || !(colon[1] >= '0' && colon[1] <= '9'))\n-         return;\n-       dbg_cnt_set_limit_by_name (comma + 1, colon - (comma + 1), atoi (colon + 1));\n-       comma = strchr (colon + 1, ',');\n+       char *buffer = alloca (arg - start + 2);\n+       sprintf (buffer, \"%*c\", (int)(1 + (arg - start)), '^');\n+       error (\"Can not find a valid counter:value pair:\");\n+       error (\"-fdbg-cnt=%s\", start);\n+       error (\"          %s\", buffer);\n      }\n }\n+\n+/* Print name, limit and count of all counters.   */\n+\n+void dbg_cnt_list_all_counters (void)\n+{\n+  int i;\n+  printf (\"  %-30s %-5s %-5s\\n\", \"counter name\",  \"limit\", \"value\");\n+  printf (\"----------------------------------------------\\n\");\n+  for (i = 0; i < debug_counter_number_of_counters; i++)\n+    printf (\"  %-30s %5d %5u\\n\",\n+            map[i].name, limit[map[i].counter], count[map[i].counter]);\n+  printf (\"\\n\");\n+}"}, {"sha": "aafa6663ac888d2e13517d6e2c9ab34ee3dff8e4", "filename": "gcc/dbgcnt.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a090f42f6f1a646830a7b51c8b267fe27da383c/gcc%2Fdbgcnt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a090f42f6f1a646830a7b51c8b267fe27da383c/gcc%2Fdbgcnt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbgcnt.h?ref=0a090f42f6f1a646830a7b51c8b267fe27da383c", "patch": "@@ -35,5 +35,6 @@ enum debug_counter {\n extern bool dbg_cnt_is_enabled (enum debug_counter index);\n extern bool dbg_cnt (enum debug_counter index);\n extern void dbg_cnt_process_opt (const char *arg);\n+extern void dbg_cnt_list_all_counters (void);\n \n #endif /* GCC_DBGCNT_H */"}, {"sha": "dddb37da84eac72c81a064a58cd4b949554cc071", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a090f42f6f1a646830a7b51c8b267fe27da383c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a090f42f6f1a646830a7b51c8b267fe27da383c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0a090f42f6f1a646830a7b51c8b267fe27da383c", "patch": "@@ -269,6 +269,7 @@ Objective-C and Objective-C++ Dialects}.\n @item Debugging Options\n @xref{Debugging Options,,Options for Debugging Your Program or GCC}.\n @gccoptlist{-d@var{letters}  -dumpspecs  -dumpmachine  -dumpversion @gol\n+-fdbg-cnt-list -fdbg-cnt=@var{counter-value-list} @gol\n -fdump-noaddr -fdump-unnumbered  -fdump-translation-unit@r{[}-@var{n}@r{]} @gol\n -fdump-class-hierarchy@r{[}-@var{n}@r{]} @gol\n -fdump-ipa-all -fdump-ipa-cgraph @gol\n@@ -4211,6 +4212,21 @@ above for a description of @var{auxname} and instructions on how to\n generate test coverage data.  Coverage data will match the source files\n more closely, if you do not optimize.\n \n+@item -fdbg-cnt-list\n+@opindex fdbg-cnt-list\n+Print the name and the counter upperbound for all debug counters.\n+\n+@item -fdbg-cnt=@var{counter-value-list}\n+@opindex fdbg-cnt\n+Set the internal debug counter upperbound. @var{counter-value-list} \n+is a comma-separated list of @var{name}:@var{value} pairs\n+which sets the upperbound of each debug counter @var{name} to @var{value}.\n+All debug counters have the initial upperbound of @var{UINT_MAX},\n+thus dbg_cnt() returns true always unless the upperbound is set by this option.\n+e.g. With -fdbg-cnt=dce:10,tail_call:0\n+dbg_cnt(dce) will return true only for first 10 invocations\n+and dbg_cnt(tail_call) will return false always.\n+\n @item -d@var{letters}\n @item -fdump-rtl-@var{pass}\n @opindex d"}, {"sha": "974c19b3765eb207f95764d8232fb95883524cfa", "filename": "gcc/opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a090f42f6f1a646830a7b51c8b267fe27da383c/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a090f42f6f1a646830a7b51c8b267fe27da383c/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=0a090f42f6f1a646830a7b51c8b267fe27da383c", "patch": "@@ -1434,6 +1434,10 @@ common_handle_option (size_t scode, const char *arg, int value,\n       dbg_cnt_process_opt (arg);\n       break;\n \n+    case OPT_fdbg_cnt_list:\n+      dbg_cnt_list_all_counters ();\n+      break;\n+\n     case OPT_fdiagnostics_show_location_:\n       if (!strcmp (arg, \"once\"))\n \tdiagnostic_prefixing_rule (global_dc) = DIAGNOSTICS_SHOW_PREFIX_ONCE;"}]}