{"sha": "20cc76d56e51e3029ef532eabe2634425955fd12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBjYzc2ZDU2ZTUxZTMwMjllZjUzMmVhYmUyNjM0NDI1OTU1ZmQxMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-08-18T23:10:22Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-18T23:10:22Z"}, "message": "timevar.h (struct timevar_time_def): Change element type to float.\n\n        * timevar.h (struct timevar_time_def): Change element type to float.\n        (ticks_to_msec, clocks_to_msec): Likewise.\n        (TICKS_TO_MSEC, CLOCKS_TO_MSEC): Rescale to seconds; use type float.\n        (get_time): Likewise.\n        (timevar_print): Adjust zero check and printing to match.\n\nFrom-SVN: r45013", "tree": {"sha": "87396ec6d992b99795d1807401b33464cc5bd4d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87396ec6d992b99795d1807401b33464cc5bd4d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20cc76d56e51e3029ef532eabe2634425955fd12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20cc76d56e51e3029ef532eabe2634425955fd12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20cc76d56e51e3029ef532eabe2634425955fd12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20cc76d56e51e3029ef532eabe2634425955fd12/comments", "author": null, "committer": null, "parents": [{"sha": "9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c34dbbf06f7ac8a2a0ac0d9c4fd8540f24cec83"}], "stats": {"total": 64, "additions": 34, "deletions": 30}, "files": [{"sha": "390955df9436e7a6dfd96ea7b50d9160fd19f890", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20cc76d56e51e3029ef532eabe2634425955fd12/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20cc76d56e51e3029ef532eabe2634425955fd12/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20cc76d56e51e3029ef532eabe2634425955fd12", "patch": "@@ -1,3 +1,11 @@\n+2001-08-18  Richard Henderson  <rth@redhat.com>\n+\n+\t* timevar.h (struct timevar_time_def): Change element type to float.\n+\t(ticks_to_msec, clocks_to_msec): Likewise.\n+\t(TICKS_TO_MSEC, CLOCKS_TO_MSEC): Rescale to seconds; use type float.\n+\t(get_time): Likewise.\n+\t(timevar_print): Adjust zero check and printing to match.\n+\n 2001-08-18  Zack Weinberg  <zackw@panix.com>\n \n \t* doc/extend.texi, doc/gcc.texi, doc/install-old.texi,"}, {"sha": "58728002e057eddc4ca82450e8fc19e0dc660324", "filename": "gcc/timevar.c", "status": "modified", "additions": 22, "deletions": 26, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20cc76d56e51e3029ef532eabe2634425955fd12/gcc%2Ftimevar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20cc76d56e51e3029ef532eabe2634425955fd12/gcc%2Ftimevar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.c?ref=20cc76d56e51e3029ef532eabe2634425955fd12", "patch": "@@ -99,13 +99,13 @@ extern clock_t clock PARAMS ((void));\n    precompute them.  Whose wonderful idea was it to make all those\n    _constants_ variable at run time, anyway?  */\n #ifdef USE_TIMES\n-static int ticks_to_msec;\n-#define TICKS_TO_MSEC (1000 / TICKS_PER_SECOND)\n+static float ticks_to_msec;\n+#define TICKS_TO_MSEC (1 / (float)TICKS_PER_SECOND)\n #endif\n \n #ifdef USE_CLOCK\n-static int clocks_to_msec;\n-#define CLOCKS_TO_MSEC (1000 / CLOCKS_PER_SEC)\n+static float clocks_to_msec;\n+#define CLOCKS_TO_MSEC (1 / (float)CLOCKS_PER_SEC)\n #endif\n \n #include \"flags.h\"\n@@ -198,8 +198,8 @@ get_time (now)\n #ifdef USE_GETRUSAGE\n     struct rusage rusage;\n     getrusage (RUSAGE_SELF, &rusage);\n-    now->user = rusage.ru_utime.tv_sec * 1000 + rusage.ru_utime.tv_usec / 1000;\n-    now->sys  = rusage.ru_stime.tv_sec * 1000 + rusage.ru_stime.tv_usec / 1000;\n+    now->user = rusage.ru_utime.tv_sec + rusage.ru_utime.tv_usec * 1e-6;\n+    now->sys  = rusage.ru_stime.tv_sec + rusage.ru_stime.tv_usec * 1e-6;\n #endif\n #ifdef USE_CLOCK\n     now->user = clock () * clocks_to_msec;\n@@ -448,6 +448,7 @@ timevar_print (fp)\n   for (id = 0; id < (unsigned int) TIMEVAR_LAST; ++id)\n     {\n       struct timevar_def *tv = &timevars[(timevar_id_t) id];\n+      const float tiny = 5e-3;\n \n       /* Don't print the total execution time here; that goes at the\n \t end.  */\n@@ -460,35 +461,33 @@ timevar_print (fp)\n \n       /* Don't print timing variables if we're going to get a row of\n          zeroes.  */\n-      if (tv->elapsed.user < 10 && tv->elapsed.sys < 10\n-\t  && tv->elapsed.wall < 10)\n+      if (tv->elapsed.user < tiny\n+\t  && tv->elapsed.sys < tiny\n+\t  && tv->elapsed.wall < tiny)\n \tcontinue;\n \n       /* The timing variable name.  */\n       fprintf (fp, \" %-22s:\", tv->name);\n \n #ifdef HAVE_USER_TIME\n       /* Print user-mode time for this process.  */\n-      fprintf (fp, \"%4ld.%02ld (%2.0f%%) usr\", \n-\t       tv->elapsed.user / 1000, (tv->elapsed.user % 1000) / 10,\n-\t       (total->user == 0) ? 0.0\n-\t       : (100.0 * tv->elapsed.user / (double) total->user));\n+      fprintf (fp, \"%7.2f (%2.0f%%) usr\", \n+\t       tv->elapsed.user,\n+\t       (total->user == 0 ? 0 : tv->elapsed.user / total->user) * 100);\n #endif /* HAVE_USER_TIME */\n \n #ifdef HAVE_SYS_TIME\n       /* Print system-mode time for this process.  */\n-      fprintf (fp, \"%4ld.%02ld (%2.0f%%) sys\", \n-\t       tv->elapsed.sys / 1000, (tv->elapsed.sys % 1000) / 10,\n-\t       (total->sys == 0) ? 0.0\n-\t       : (100.0 * tv->elapsed.sys / (double) total->sys));\n+      fprintf (fp, \"%7.2f (%2.0f%%) sys\", \n+\t       tv->elapsed.sys,\n+\t       (total->sys == 0 ? 0 : tv->elapsed.sys / total->sys) * 100);\n #endif /* HAVE_SYS_TIME */\n \n #ifdef HAVE_WALL_TIME\n       /* Print wall clock time elapsed.  */\n-      fprintf (fp, \"%4ld.%02ld (%2.0f%%) wall\", \n-\t       tv->elapsed.wall / 1000, (tv->elapsed.wall % 1000) / 10,\n-\t       (total->wall == 0) ? 0.0\n-\t       : (100.0 * tv->elapsed.wall / (double) total->wall));\n+      fprintf (fp, \"%7.2f (%2.0f%%) wall\", \n+\t       tv->elapsed.wall,\n+\t       (total->wall == 0 ? 0 : tv->elapsed.wall / total->wall) * 100);\n #endif /* HAVE_WALL_TIME */\n \n       putc ('\\n', fp);\n@@ -497,16 +496,13 @@ timevar_print (fp)\n   /* Print total time.  */\n   fputs (_(\" TOTAL                 :\"), fp);\n #ifdef HAVE_USER_TIME\n-  fprintf (fp, \"%4ld.%02ld          \", \n-\t   total->user / 1000, (total->user % 1000) / 10);\n+  fprintf (fp, \"%7.2f          \", total->user);\n #endif \n #ifdef HAVE_SYS_TIME\n-  fprintf (fp, \"%4ld.%02ld          \", \n-\t   total->sys  / 1000, (total->sys  % 1000) / 10);\n+  fprintf (fp, \"%7.2f          \", total->sys);\n #endif\n #ifdef HAVE_WALL_TIME\n-  fprintf (fp, \"%4ld.%02ld\\n\",\n-\t   total->wall / 1000, (total->wall % 1000) / 10);\n+  fprintf (fp, \"%7.2f\\n\", total->wall);\n #endif\n   \n #endif /* defined (HAVE_USER_TIME) || defined (HAVE_SYS_TIME) "}, {"sha": "f6449bc28e0bd4d1cf46693693aedf35f8fb37a3", "filename": "gcc/timevar.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20cc76d56e51e3029ef532eabe2634425955fd12/gcc%2Ftimevar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20cc76d56e51e3029ef532eabe2634425955fd12/gcc%2Ftimevar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.h?ref=20cc76d56e51e3029ef532eabe2634425955fd12", "patch": "@@ -45,22 +45,22 @@\n */\n    \n /* This structure stores the various varieties of time that can be\n-   measured.  Times are stored in milliseconds.  The time may be an\n+   measured.  Times are stored in seconds.  The time may be an\n    absolute time or a time difference; in the former case, the time\n    base is undefined, except that the difference between two times\n    produces a valid time difference.  */\n \n struct timevar_time_def\n {\n   /* User time in this process.  */\n-  unsigned long user;\n+  float user;\n \n   /* System time (if applicable for this host platform) in this\n      process.  */\n-  unsigned long sys;\n+  float sys;\n \n   /* Wall clock time.  */\n-  unsigned long wall;\n+  float wall;\n };\n \n /* An enumeration of timing variable indentifiers.  Constructed from"}]}