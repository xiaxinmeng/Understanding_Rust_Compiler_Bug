{"sha": "690a704a4e5eda3745d4b0d650cba90a36702a64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkwYTcwNGE0ZTVlZGEzNzQ1ZDRiMGQ2NTBjYmE5MGEzNjcwMmE2NA==", "commit": {"author": {"name": "Ben Elliston", "email": "bje@au.ibm.com", "date": "2005-12-13T23:33:26Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2005-12-13T23:33:26Z"}, "message": "c-common.c (c_common_truthvalue_conversion): Generalise warning for addresses converted to booleans; not just function addresses.\n\n\t* c-common.c (c_common_truthvalue_conversion): Generalise warning\n\tfor addresses converted to booleans; not just function addresses.\n\t* c-typeck.c (build_binary_op): Warn for address comparisons which\n\tcan never be NULL (eg. func == NULL or &var == NULL).\n\t* common.opt (Walways-true): New option.\n\t* c-opts.c (c_common_handle_option): Set it with -Wall.\n\t* doc/invoke.texi: Document it.\ntestsuite/\n\t* gcc.dg/warn-addr-cmp.c: New test.\n\nFrom-SVN: r108489", "tree": {"sha": "d72ae86b6320671af20df2fd5c12deb106455c3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d72ae86b6320671af20df2fd5c12deb106455c3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/690a704a4e5eda3745d4b0d650cba90a36702a64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/690a704a4e5eda3745d4b0d650cba90a36702a64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/690a704a4e5eda3745d4b0d650cba90a36702a64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/690a704a4e5eda3745d4b0d650cba90a36702a64/comments", "author": null, "committer": null, "parents": [{"sha": "383eca9ccea8275baab7d6bdf5f464e113482dec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/383eca9ccea8275baab7d6bdf5f464e113482dec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/383eca9ccea8275baab7d6bdf5f464e113482dec"}], "stats": {"total": 127, "additions": 122, "deletions": 5}, "files": [{"sha": "417d69f8be2a42ca39b46f9c8b1e342c766d925d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/690a704a4e5eda3745d4b0d650cba90a36702a64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/690a704a4e5eda3745d4b0d650cba90a36702a64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=690a704a4e5eda3745d4b0d650cba90a36702a64", "patch": "@@ -1,3 +1,13 @@\n+2005-12-14  Ben Elliston  <bje@au.ibm.com>\n+\n+\t* c-common.c (c_common_truthvalue_conversion): Generalise warning\n+\tfor addresses converted to booleans; not just function addresses.\n+\t* c-typeck.c (build_binary_op): Warn for address comparisons which\n+\tcan never be NULL (eg. func == NULL or &var == NULL).\n+\t* common.opt (Walways-true): New option.\n+\t* c-opts.c (c_common_handle_option): Set it with -Wall.\n+\t* doc/invoke.texi: Document it.\n+\n 2005-12-13  Paul Brook  <paul@codesourcery.com>\n \n \t* config/m68k/fpgnulib.c (__unordsf2, __unorddf2, __unordxf2,"}, {"sha": "5f97a9759339d644e441dc1fa6d23ed4dcc367d6", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/690a704a4e5eda3745d4b0d650cba90a36702a64/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/690a704a4e5eda3745d4b0d650cba90a36702a64/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=690a704a4e5eda3745d4b0d650cba90a36702a64", "patch": "@@ -2407,12 +2407,12 @@ c_common_truthvalue_conversion (tree expr)\n \n     case ADDR_EXPR:\n       {\n-\tif (TREE_CODE (TREE_OPERAND (expr, 0)) == FUNCTION_DECL\n+\tif (DECL_P (TREE_OPERAND (expr, 0))\n \t    && !DECL_WEAK (TREE_OPERAND (expr, 0)))\n \t  {\n \t    /* Common Ada/Pascal programmer's mistake.  We always warn\n \t       about this since it is so bad.  */\n-\t    warning (0, \"the address of %qD, will always evaluate as %<true%>\",\n+\t    warning (OPT_Walways_true, \"the address of %qD, will always evaluate as %<true%>\",\n \t\t     TREE_OPERAND (expr, 0));\n \t    return truthvalue_true_node;\n \t  }"}, {"sha": "9968c9b187b00ca4a198c30cccbdb89ad3c1a4b8", "filename": "gcc/c-opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/690a704a4e5eda3745d4b0d650cba90a36702a64/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/690a704a4e5eda3745d4b0d650cba90a36702a64/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=690a704a4e5eda3745d4b0d650cba90a36702a64", "patch": "@@ -387,6 +387,7 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       warn_switch = value;\n       warn_strict_aliasing = value;\n       warn_string_literal_comparison = value;\n+      warn_always_true = value;\n \n       /* Only warn about unknown pragmas that are not in system\n \t headers.  */"}, {"sha": "a38ce6c5ca92c2d8d2f38dc1e30bfe78273ed7d1", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/690a704a4e5eda3745d4b0d650cba90a36702a64/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/690a704a4e5eda3745d4b0d650cba90a36702a64/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=690a704a4e5eda3745d4b0d650cba90a36702a64", "patch": "@@ -7939,9 +7939,23 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t    result_type = ptr_type_node;\n \t}\n       else if (code0 == POINTER_TYPE && null_pointer_constant_p (orig_op1))\n-\tresult_type = type0;\n+\t{\n+\t  if (TREE_CODE (op0) == ADDR_EXPR\n+\t      && DECL_P (TREE_OPERAND (op0, 0)) \n+\t      && !DECL_WEAK (TREE_OPERAND (op0, 0)))\n+\t    warning (OPT_Walways_true, \"the address of %qD will never be NULL\",\n+\t\t     TREE_OPERAND (op0, 0));\n+\t  result_type = type0;\n+\t}\n       else if (code1 == POINTER_TYPE && null_pointer_constant_p (orig_op0))\n-\tresult_type = type1;\n+\t{\n+\t  if (TREE_CODE (op1) == ADDR_EXPR \n+\t      && DECL_P (TREE_OPERAND (op1, 0))\n+\t      && !DECL_WEAK (TREE_OPERAND (op1, 0)))\n+\t    warning (OPT_Walways_true, \"the address of %qD will never be NULL\",\n+\t\t     TREE_OPERAND (op1, 0));\n+\t  result_type = type1;\n+\t}\n       else if (code0 == POINTER_TYPE && code1 == INTEGER_TYPE)\n \t{\n \t  result_type = type0;"}, {"sha": "495042b3f3ae4590c2924bcddda7fc8117e39679", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/690a704a4e5eda3745d4b0d650cba90a36702a64/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/690a704a4e5eda3745d4b0d650cba90a36702a64/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=690a704a4e5eda3745d4b0d650cba90a36702a64", "patch": "@@ -57,6 +57,10 @@ Waggregate-return\n Common Var(warn_aggregate_return)\n Warn about returning structures, unions or arrays\n \n+Walways-true\n+Common Var(warn_always_true)\n+Warn about comparisons that always evaluate to true\n+\n Wattributes\n Common Var(warn_attributes) Init(1)\n Warn about inappropriate attribute usage"}, {"sha": "67a674972399b8a04d894389b4b3b4284fb1d558", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/690a704a4e5eda3745d4b0d650cba90a36702a64/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/690a704a4e5eda3745d4b0d650cba90a36702a64/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=690a704a4e5eda3745d4b0d650cba90a36702a64", "patch": "@@ -222,7 +222,7 @@ Objective-C and Objective-C++ Dialects}.\n @item Warning Options\n @xref{Warning Options,,Options to Request or Suppress Warnings}.\n @gccoptlist{-fsyntax-only  -pedantic  -pedantic-errors @gol\n--w  -Wextra  -Wall  -Waggregate-return -Wno-attributes @gol\n+-w  -Wextra  -Wall  -Waggregate-return -Walways-true -Wno-attributes @gol\n -Wc++-compat -Wcast-align  -Wcast-qual  -Wchar-subscripts  -Wcomment @gol\n -Wconversion  -Wno-deprecated-declarations @gol\n -Wdisabled-optimization  -Wno-div-by-zero  -Wno-endif-labels @gol\n@@ -3112,6 +3112,11 @@ Warn if any functions that return structures or unions are defined or\n called.  (In languages where you can return an array, this also elicits\n a warning.)\n \n+@item -Walways-true\n+@opindex Walways-true\n+Warn about comparisons which are always true such as testing if unsigned\n+values are greater than zero.\n+\n @item -Wno-attributes\n @opindex Wno-attributes\n @opindex Wattributes"}, {"sha": "aaf07473c87361e072e3819993c491a845c764dd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/690a704a4e5eda3745d4b0d650cba90a36702a64/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/690a704a4e5eda3745d4b0d650cba90a36702a64/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=690a704a4e5eda3745d4b0d650cba90a36702a64", "patch": "@@ -1,3 +1,7 @@\n+2005-12-14  Ben Elliston  <bje@au.ibm.com>\n+\n+\t* gcc.dg/warn-addr-cmp.c: New test.\n+\n 2005-12-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/25023"}, {"sha": "d8c9a21908441b0f2d53fea9b640fb711e65a641", "filename": "gcc/testsuite/gcc.dg/warn-addr-cmp.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/690a704a4e5eda3745d4b0d650cba90a36702a64/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-addr-cmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/690a704a4e5eda3745d4b0d650cba90a36702a64/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-addr-cmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-addr-cmp.c?ref=690a704a4e5eda3745d4b0d650cba90a36702a64", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-do compile } */\n+/* { dg-require-weak \"\" } */\n+/* { dg-options \"-Walways-true\" } */\n+/* Warning when addr convert to bool always gives known result.\n+   Ada/Pascal programmers sometimes write 0-param functions without\n+   (), and might as well warn on variables, too.  */\n+\n+int func (void);\n+extern int var;\n+int weak_func (void) __attribute__ ((weak));\n+extern int weak_var __attribute__ ((weak));\n+\n+int\n+test_func_cmp (void)\n+{\n+  if (func)      /* { dg-warning \"the address of 'func'\" } */\n+    return 1;\n+  if (!func)     /* { dg-warning \"the address of 'func'\" } */\n+    return 1;\n+  if (&var)     /* { dg-warning \"the address of 'var'\" } */\n+    return 1;\n+  if (!&var)     /* { dg-warning \"the address of 'var'\" } */\n+    return 1;\n+  if (weak_func)\n+    return 1;\n+  if (!weak_func)\n+    return 1;\n+  if (&weak_var)\n+    return 1;\n+  if (!&weak_var)\n+    return 1;\n+  return 0;\n+}\n+\n+/* Test equality with 0 on the right hand side.  */\n+int\n+test_func_cmp_rhs_zero (void)\n+{\n+  if (func == 0)     /* { dg-warning \"the address of 'func'\" } */\n+    return 1;\n+  if (func != 0)     /* { dg-warning \"the address of 'func'\" } */\n+    return 1;\n+  if (&var == 0)     /* { dg-warning \"the address of 'var'\" } */\n+    return 1;\n+  if (&var != 0)     /* { dg-warning \"the address of 'var'\" } */\n+    return 1;\n+  if (weak_func == 0)\n+    return 1;\n+  if (weak_func != 0)\n+    return 1;\n+  if (&weak_var == 0)\n+    return 1;\n+  if (&weak_var != 0)\n+    return 1;\n+  return 0;\n+}\n+\n+/* Test equality with 0 on the left hand side.  */\n+int\n+test_func_cmp_lhs_zero (void)\n+{\n+  if (0 == func)     /* { dg-warning \"the address of 'func'\" } */\n+    return 1;\n+  if (0 != func)     /* { dg-warning \"the address of 'func'\" } */\n+    return 1;\n+  if (0 == &var)     /* { dg-warning \"the address of 'var'\" } */\n+    return 1;\n+  if (0 != &var)     /* { dg-warning \"the address of 'var'\" } */\n+    return 1;\n+  if (0 == weak_func)\n+    return 1;\n+  if (0 != weak_func)\n+    return 1;\n+  if (0 == &weak_var)\n+    return 1;\n+  if (0 != &weak_var)\n+    return 1;\n+  return 0;\n+}"}]}