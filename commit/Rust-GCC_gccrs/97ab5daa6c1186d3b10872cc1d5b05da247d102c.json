{"sha": "97ab5daa6c1186d3b10872cc1d5b05da247d102c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdhYjVkYWE2YzExODZkM2IxMDg3MmNjMWQ1YjA1ZGEyNDdkMTAyYw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-08-27T01:49:51Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-08-27T01:49:51Z"}, "message": "libstdc++: Implement P1994R1 changes to ranges::elements_view\n\nThe example from the paper doesn't compile without the proposed\nresolution for LWG 3406, so we'll add a testcase for this once the\nproposed resolution is implemented.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (elements_view::end): Replace these two\n\toverloads with four new overloads.\n\t(elements_view::_Iterator::operator==): Remove.\n\t(elements_view::_Iterator::operator-): Likewise.\n\t(elements_view::_Sentinel): Define.", "tree": {"sha": "47239b960ca2fa70bd6a9aa3b3e69ca9727420ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47239b960ca2fa70bd6a9aa3b3e69ca9727420ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97ab5daa6c1186d3b10872cc1d5b05da247d102c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97ab5daa6c1186d3b10872cc1d5b05da247d102c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97ab5daa6c1186d3b10872cc1d5b05da247d102c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97ab5daa6c1186d3b10872cc1d5b05da247d102c/comments", "author": null, "committer": null, "parents": [{"sha": "57ea089421a3cfce936f91f3c0c92bf95ac71da1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57ea089421a3cfce936f91f3c0c92bf95ac71da1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57ea089421a3cfce936f91f3c0c92bf95ac71da1"}], "stats": {"total": 74, "additions": 60, "deletions": 14}, "files": [{"sha": "efa8d2cf9f4a7930241c2897a22ddc62c3d925cc", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 60, "deletions": 14, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ab5daa6c1186d3b10872cc1d5b05da247d102c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ab5daa6c1186d3b10872cc1d5b05da247d102c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=97ab5daa6c1186d3b10872cc1d5b05da247d102c", "patch": "@@ -3366,12 +3366,20 @@ namespace views\n       { return _Iterator<true>(ranges::begin(_M_base)); }\n \n       constexpr auto\n-      end() requires (!__detail::__simple_view<_Vp>)\n-      { return ranges::end(_M_base); }\n+      end()\n+      { return _Sentinel<false>{ranges::end(_M_base)}; }\n \n       constexpr auto\n-      end() const requires __detail::__simple_view<_Vp>\n-      { return ranges::end(_M_base); }\n+      end() requires common_range<_Vp>\n+      { return _Iterator<false>{ranges::end(_M_base)}; }\n+\n+      constexpr auto\n+      end() const requires range<const _Vp>\n+      { return _Sentinel<true>{ranges::end(_M_base)}; }\n+\n+      constexpr auto\n+      end() const requires common_range<const _Vp>\n+      { return _Iterator<true>{ranges::end(_M_base)}; }\n \n       constexpr auto\n       size() requires sized_range<_Vp>\n@@ -3382,6 +3390,9 @@ namespace views\n       { return ranges::size(_M_base); }\n \n     private:\n+      template<bool _Const>\n+\tstruct _Sentinel;\n+\n       template<bool _Const>\n \tstruct _Iterator\n \t{\n@@ -3484,10 +3495,6 @@ namespace views\n \t    requires equality_comparable<iterator_t<_Base>>\n \t  { return __x._M_current == __y._M_current; }\n \n-\t  friend constexpr bool\n-\t  operator==(const _Iterator& __x, const sentinel_t<_Base>& __y)\n-\t  { return __x._M_current == __y; }\n-\n \t  friend constexpr bool\n \t  operator<(const _Iterator& __x, const _Iterator& __y)\n \t    requires random_access_range<_Base>\n@@ -3536,15 +3543,54 @@ namespace views\n \t    requires random_access_range<_Base>\n \t  { return __x._M_current - __y._M_current; }\n \n-\t  friend constexpr difference_type\n-\t  operator-(const _Iterator<_Const>& __x, const sentinel_t<_Base>& __y)\n+\t  friend _Sentinel<_Const>;\n+\t};\n+\n+      template<bool _Const>\n+\tstruct _Sentinel\n+\t{\n+\tprivate:\n+\t  constexpr bool\n+\t  _M_equal(const _Iterator<_Const>& __x) const\n+\t  { return __x._M_current == _M_end; }\n+\n+\t  using _Base = __detail::__maybe_const_t<_Const, _Vp>;\n+\t  sentinel_t<_Base> _M_end = sentinel_t<_Base>();\n+\n+\tpublic:\n+\t  _Sentinel() = default;\n+\n+\t  constexpr explicit\n+\t  _Sentinel(sentinel_t<_Base> __end)\n+\t    : _M_end(std::move(__end))\n+\t  { }\n+\n+\t  constexpr\n+\t  _Sentinel(_Sentinel<!_Const> __other)\n+\t    requires _Const\n+\t      && convertible_to<sentinel_t<_Vp>, sentinel_t<_Base>>\n+\t    : _M_end(std::move(__other._M_end))\n+\t  { }\n+\n+\t  constexpr sentinel_t<_Base>\n+\t  base() const\n+\t  { return _M_end; }\n+\n+\t  friend constexpr bool\n+\t  operator==(const _Iterator<_Const>& __x, const _Sentinel& __y)\n+\t  { return __y._M_equal(__x); }\n+\n+\t  friend constexpr range_difference_t<_Base>\n+\t  operator-(const _Iterator<_Const>& __x, const _Sentinel& __y)\n \t    requires sized_sentinel_for<sentinel_t<_Base>, iterator_t<_Base>>\n-\t  { return __x._M_current - __y; }\n+\t  { return __x._M_current - __y._M_end; }\n \n-\t  friend constexpr difference_type\n-\t  operator-(const sentinel_t<_Base>& __x, const _Iterator<_Const>& __y)\n+\t  friend constexpr range_difference_t<_Base>\n+\t  operator-(const _Sentinel& __x, const _Iterator<_Const>& __y)\n \t    requires sized_sentinel_for<sentinel_t<_Base>, iterator_t<_Base>>\n-\t  { return -(__y - __x); }\n+\t  { return __x._M_end - __y._M_current; }\n+\n+\t  friend _Sentinel<!_Const>;\n \t};\n \n       _Vp _M_base = _Vp();"}]}