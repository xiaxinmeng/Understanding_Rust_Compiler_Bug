{"sha": "bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa", "node_id": "C_kwDOANBUbNoAKGJiOTkxNzFiOWIwZjAxYTQ2YmZjYTJkM2NiZDUyZmM2ZmFmNmNiYWE", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-01-25T00:16:27Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-01-25T00:16:27Z"}, "message": "Daily bump.", "tree": {"sha": "5fb58c523c909d30f0360929b851a481e8005395", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fb58c523c909d30f0360929b851a481e8005395"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa/comments", "author": null, "committer": null, "parents": [{"sha": "b8e4e48d93f20c208db1f69087e81e2a521c1c3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8e4e48d93f20c208db1f69087e81e2a521c1c3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8e4e48d93f20c208db1f69087e81e2a521c1c3b"}], "stats": {"total": 301, "additions": 300, "deletions": 1}, "files": [{"sha": "a334aa5a2565d0364dce742e21108c34d1faa431", "filename": "contrib/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa", "patch": "@@ -1,3 +1,10 @@\n+2022-01-24  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: New files in toplev must\n+\tbe explicitly marked as \"New file\".\n+\t* gcc-changelog/test_email.py: Test.\n+\t* gcc-changelog/test_patches.txt: Add test.\n+\n 2022-01-23  Martin Liska  <mliska@suse.cz>\n \n \t* filter-clang-warnings.py: Filter out one another warning"}, {"sha": "98a2cf0785c48985b67a8b1456113874c00ed23b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa", "patch": "@@ -1,3 +1,148 @@\n+2022-01-24  Martin Sebor  <msebor@redhat.com>\n+\n+\t* pointer-query.cc (pointer_query::dump): Remove duplicate\n+\tblock.\n+\n+2022-01-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR preprocessor/104030\n+\t* doc/invoke.texi: Update documentation for -Wbidi-chars.\n+\n+2022-01-24  Raoni Fassina Firmino  <raoni@linux.ibm.com>\n+\n+\tPR target/94193\n+\t* builtins.cc (expand_builtin_fegetround): New function.\n+\t(expand_builtin_feclear_feraise_except): New function.\n+\t(expand_builtin): Add cases for BUILT_IN_FEGETROUND,\n+\tBUILT_IN_FECLEAREXCEPT and BUILT_IN_FERAISEEXCEPT.\n+\t* config/rs6000/rs6000.md (fegetroundsi): New pattern.\n+\t(feclearexceptsi): New Pattern.\n+\t(feraiseexceptsi): New Pattern.\n+\t* doc/extend.texi: Add a new introductory paragraph about the\n+\tnew builtins.\n+\t* doc/md.texi: (fegetround@var{m}): Document new optab.\n+\t(feclearexcept@var{m}): Document new optab.\n+\t(feraiseexcept@var{m}): Document new optab.\n+\t* optabs.def (fegetround_optab): New optab.\n+\t(feclearexcept_optab): New optab.\n+\t(feraiseexcept_optab): New optab.\n+\n+2022-01-24  Richard Biener  <rguenther@suse.de>\n+\t    Jiufu Guo  <guojiufu@linux.ibm.com>\n+\n+\tPR tree-optimization/100740\n+\tPR tree-optimization/101508\n+\tPR tree-optimization/101972\n+\tPR tree-optimization/102131\n+\t* tree-ssa-loop-niter.cc (number_of_iterations_cond): Properly\n+\tconstrain BASE0 + STEP0 cmp BASE1 + STEP1 to\n+\tBASE0 + STEP0 - STEP1 cmp BASE1 transform.\n+\n+2022-01-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/104158\n+\t* opt-functions.awk (var_set): Handle EnumBitSet property.\n+\t* optc-gen.awk: Don't disallow RejectNegative if EnumBitSet is\n+\tspecified.\n+\t* opts.h (enum cl_enum_var_value): New type.\n+\t* opts-common.cc (decode_cmdline_option): Use CLEV_* values.\n+\tHandle CLEV_BITSET.\n+\t(cmdline_handle_error): Handle CLEV_BITSET.\n+\t* opts.cc (test_enum_sets): Also test EnumBitSet requirements.\n+\t* doc/options.texi (EnumBitSet): Document.\n+\t* common.opt (fsanitize-coverage=): Use EnumBitSet instead of\n+\tEnumSet.\n+\t(trace-pc, trace-cmp): Drop Set properties.\n+\n+2022-01-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/104158\n+\t* common.opt (flag_sanitize_coverage): Remove Variable entry.\n+\t(fsanitize-coverage=): Remove RejectNegative property, add\n+\tVar(flag_sanitize_coverage) and EnumSet properties.\n+\t(trace-pc): Add Set(1) property.\n+\t(trace-cmp): Add Set(2) property.\n+\t* opts.cc (common_handle_option): Don't handle\n+\tOPT_fsanitize_coverage_.\n+\n+2022-01-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/104158\n+\t* opt-functions.awk (var_set): Handle EnumSet property.\n+\t* optc-gen.awk: Don't disallow RejectNegative if EnumSet is\n+\tspecified.\n+\t* opt-read.awk: Handle Set property.\n+\t* opts.h (CL_ENUM_SET_SHIFT, CL_ERR_ENUM_SET_ARG): Define.\n+\t(struct cl_decoded_option): Mention enum in value description.\n+\tAdd mask member.\n+\t(set_option): Add mask argument defaulted to 0.\n+\t* opts.cc (test_enum_sets): New function.\n+\t(opts_cc_tests): Call it.\n+\t* opts-common.cc (enum_arg_to_value): Change return argument\n+\tfrom bool to int, on success return index into the cl_enum_arg\n+\tarray, on failure -1.  Add len argument, if non-0, use strncmp\n+\tinstead of strcmp.\n+\t(opt_enum_arg_to_value): Adjust caller.\n+\t(decode_cmdline_option): Handle EnumSet represented as\n+\tCLVC_ENUM with non-zero var_value.  Initialize decoded->mask.\n+\t(decode_cmdline_options_to_array): CLear opt_array[0].mask.\n+\t(handle_option): Pass decoded->mask to set_options last argument.\n+\t(generate_option): Clear decoded->mask.\n+\t(generate_option_input_file): Likewise.\n+\t(cmdline_handle_error): Handle CL_ERR_ENUM_SET_ARG.\n+\t(set_option): Add mask argument, use it for CLVC_ENUM.\n+\t(control_warning_option): Adjust enum_arg_to_value caller.\n+\t* doc/options.texi: Document Set and EnumSet properties.\n+\n+2022-01-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR bootstrap/104170\n+\t* config/linux.h (OPTION_GLIBC_P, OPTION_UCLIBC_P,\n+\tOPTION_BIONIC_P, OPTION_MUSL_P): Define.\n+\t(OPTION_GLIBC, OPTION_UCLIBC, OPTION_BIONIC, OPTION_MUSL): Redefine\n+\tusing OPTION_*_P macros.\n+\t* config/alpha/linux.h (OPTION_GLIBC_P, OPTION_UCLIBC_P,\n+\tOPTION_BIONIC_P, OPTION_MUSL_P): Define.\n+\t(OPTION_GLIBC, OPTION_UCLIBC, OPTION_BIONIC, OPTION_MUSL): Redefine\n+\tusing OPTION_*_P macros.\n+\t* config/rs6000/linux.h (OPTION_GLIBC_P, OPTION_UCLIBC_P,\n+\tOPTION_BIONIC_P, OPTION_MUSL_P): Define.\n+\t(OPTION_GLIBC, OPTION_UCLIBC, OPTION_BIONIC, OPTION_MUSL): Redefine\n+\tusing OPTION_*_P macros.\n+\t* config/rs6000/linux64.h (OPTION_GLIBC_P, OPTION_UCLIBC_P,\n+\tOPTION_BIONIC_P, OPTION_MUSL_P): Define.\n+\t(OPTION_GLIBC, OPTION_UCLIBC, OPTION_BIONIC, OPTION_MUSL): Redefine\n+\tusing OPTION_*_P macros.\n+\t* config/fuchsia.h (OPTION_MUSL_P): Redefine.\n+\t* config/glibc-stdint.h (OPTION_MUSL_P): Define if not defined.\n+\t* common/config/s390/s390-common.cc (s390_supports_split_stack): Re-add\n+\tATTRIBUTE_UNUSED to opts parameter.  If OPTION_GLIBC_P is defined, use\n+\tOPTION_GLIBC_P (opts) as condition, otherwise assume if (false).\n+\t* common/config/i386/i386-common.cc (ix86_supports_split_stack): If\n+\tOPTION_GLIBC_P is defined use !OPTION_GLIBC_P (opts) as condition,\n+\totherwise assume if (true).\n+\n+2022-01-24  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* common/config/riscv/riscv-common.cc (riscv_subset_list::to_string):\n+\tSkip zicsr and zifencei if I-ext is 2.0.\n+\n+2022-01-24  Jia-Wei Chen  <jiawei@iscas.ac.cn>\n+\n+\t* config.gcc: Modify default isa_spec version.\n+\n+2022-01-24  Jiufu Guo  <guojiufu@linux.ibm.com>\n+\n+\tPR tree-optimization/102087\n+\t* tree-ssa-loop-niter.cc (number_of_iterations_until_wrap):\n+\tCorrect PLUS result type.\n+\n+2022-01-24  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/104188\n+\t* config/i386/predicates.md (bcst_mem_operand): Also check mode\n+\tof memory broadcast.\n+\n 2022-01-23  Andrew Pinski  <apinski@marvell.com>\n \n \tPR target/64821"}, {"sha": "b78619652511927a4be32d2e4be21ff20a688d1a", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa", "patch": "@@ -1 +1 @@\n-20220124\n+20220125"}, {"sha": "e3bf1a76cfb9c48a7090fdeb6beba963ff9cc47b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa", "patch": "@@ -1,3 +1,8 @@\n+2022-01-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR preprocessor/104030\n+\t* c.opt (Wbidi-chars): Mark as EnumSet.  Also accept =ucn.\n+\n 2022-01-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/104148"}, {"sha": "369b0a16a389b8f77ff5fe2dffaa86272a89a007", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa", "patch": "@@ -1,3 +1,16 @@\n+2022-01-24  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/104197\n+\t* pt.cc (make_auto_1): Use -1 as a placeholder default argument\n+\tfor level.\n+\n+2022-01-24  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/104173\n+\t* typeck.cc (build_class_member_access_expr): Extend\n+\tunary_complex_lvalue result adjustment to preserve all\n+\trvalues, not just xvalues.\n+\n 2022-01-23  Will Wray  <wjwray@gmail.com>\n \n \tPR c++/55227"}, {"sha": "08753174c1df5e00fc3756ae98888a97266a43e6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa", "patch": "@@ -1,3 +1,13 @@\n+2022-01-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* lang.opt (fconvert=): Add EnumSet property and mention also\n+\tr16_ieee and r16_ibm arguments.\n+\t(big-endian, little-endian, native, swap): Add Set(1) property.\n+\t(r16_ieee, r16_ibm): New EnumValue entries with Set(2) property.\n+\t* trans-types.cc (gfc_init_kinds): Emit gfc_fatal_error for\n+\t-fconvert=r16_ieee or -fconvert=r16_ibm when R16_IEEE <=> R16_IBM\n+\tconversions aren't supported.\n+\n 2022-01-22  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/104127"}, {"sha": "623d3e2ad89ca8b41c1e23c9932924c0e24e7107", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa", "patch": "@@ -1,3 +1,100 @@\n+2022-01-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR preprocessor/104030\n+\t* c-c++-common/Wbidi-chars-10.c: Turn on UCN checking.\n+\t* c-c++-common/Wbidi-chars-11.c: Likewise.\n+\t* c-c++-common/Wbidi-chars-14.c: Likewise.\n+\t* c-c++-common/Wbidi-chars-16.c: Likewise.\n+\t* c-c++-common/Wbidi-chars-17.c: Likewise.\n+\t* c-c++-common/Wbidi-chars-4.c: Likewise.\n+\t* c-c++-common/Wbidi-chars-5.c: Likewise.\n+\t* c-c++-common/Wbidi-chars-6.c: Likewise.\n+\t* c-c++-common/Wbidi-chars-7.c: Likewise.\n+\t* c-c++-common/Wbidi-chars-8.c: Likewise.\n+\t* c-c++-common/Wbidi-chars-9.c: Likewise.\n+\t* c-c++-common/Wbidi-chars-ranges.c: Likewise.\n+\t* c-c++-common/Wbidi-chars-18.c: New test.\n+\t* c-c++-common/Wbidi-chars-19.c: New test.\n+\t* c-c++-common/Wbidi-chars-20.c: New test.\n+\t* c-c++-common/Wbidi-chars-21.c: New test.\n+\t* c-c++-common/Wbidi-chars-22.c: New test.\n+\t* c-c++-common/Wbidi-chars-23.c: New test.\n+\n+2022-01-24  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* gfortran.dg/ieee/signaling_1.f90: Do not require issignaling.\n+\t* gfortran.dg/ieee/signaling_2.f90: Add comment.\n+\t* gfortran.dg/ieee/signaling_3.f90: New test.\n+\n+2022-01-24  Raoni Fassina Firmino  <raoni@linux.ibm.com>\n+\n+\tPR target/94193\n+\t* gcc.target/powerpc/builtin-feclearexcept-feraiseexcept-1.c: New test.\n+\t* gcc.target/powerpc/builtin-feclearexcept-feraiseexcept-2.c: New test.\n+\t* gcc.target/powerpc/builtin-fegetround.c: New test.\n+\n+2022-01-24  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/104173\n+\t* g++.dg/cpp0x/ref-qual21.C: New test.\n+\n+2022-01-24  Richard Biener  <rguenther@suse.de>\n+\t    Jiufu Guo  <guojiufu@linux.ibm.com>\n+\n+\tPR tree-optimization/100740\n+\tPR tree-optimization/101508\n+\tPR tree-optimization/101972\n+\tPR tree-optimization/102131\n+\t* gcc.dg/torture/pr100740.c: New testcase.\n+\t* gcc.dg/torture/pr101508.c: Likewise.\n+\t* gcc.dg/torture/pr101972.c: Likewise.\n+\t* gcc.dg/torture/pr102131-1.c: Likewise.\n+\t* gcc.dg/torture/pr102131-2.c: Likewise.\n+\t* gcc.dg/torture/pr102131-3.c: Likewise.\n+\t* gcc.dg/torture/pr102131-4.c: Likewise.\n+\n+2022-01-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/104158\n+\t* gcc.dg/sancov/pr104158-7.c: Adjust for repeating of arguments\n+\tbeing allowed.\n+\n+2022-01-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/104158\n+\t* gcc.dg/spellcheck-options-24.c: New test.\n+\t* gcc.dg/sancov/pr104158-1.c: New test.\n+\t* gcc.dg/sancov/pr104158-2.c: New test.\n+\t* gcc.dg/sancov/pr104158-3.c: New test.\n+\t* gcc.dg/sancov/pr104158-4.c: New test.\n+\t* gcc.dg/sancov/pr104158-5.c: New test.\n+\t* gcc.dg/sancov/pr104158-6.c: New test.\n+\t* gcc.dg/sancov/pr104158-7.c: New test.\n+\n+2022-01-24  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* gcc.target/riscv/attribute-19.c: Add -misa-spec=2.2\n+\n+2022-01-24  Jiufu Guo  <guojiufu@linux.ibm.com>\n+\n+\tPR tree-optimization/102087\n+\t* gcc.dg/pr102087_1.c: New test.\n+\n+2022-01-24  LiaoShihua  <shihua@iscas.ac.cn>\n+\n+\t* gcc.target/riscv/arch-9.c: Update the check info.\n+\t* gcc.target/riscv/arch-10.c: Ditto.\n+\t* gcc.target/riscv/arch-12.c: Ditto.\n+\n+2022-01-24  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.dg/analyzer/torture/pr104159.c: Ignore psabi warning.\n+\n+2022-01-24  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/104188\n+\t* gcc.target/i386/pr104188.c: New test.\n+\n 2022-01-23  Will Wray  <wjwray@gmail.com>\n \n \tPR c++/55227"}, {"sha": "61d76351dcef1cafa2da84e1ad4e94b15834e1db", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa", "patch": "@@ -1,3 +1,9 @@\n+2022-01-24  Martin Liska  <mliska@suse.cz>\n+\n+\t* acinclude.m4: Remove duplicate\n+\tLIBAT_CHECK_LINKER_FEATURES.\n+\t* configure: Regenerate.\n+\n 2021-07-21  Martin Sebor  <msebor@redhat.com>\n \n \tPR bootstrap/101379"}, {"sha": "b099e2f2f74dcf684aa6a254f50dde662115d648", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa", "patch": "@@ -1,3 +1,13 @@\n+2022-01-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR preprocessor/104030\n+\t* include/cpplib.h (enum cpp_bidirectional_level): Add\n+\tbidirectional_ucn.  Set values explicitly.\n+\t* internal.h (cpp_reader): Adjust warn_bidi_p.\n+\t* lex.cc (maybe_warn_bidi_on_close): Don't warn about UCNs\n+\tunless UCN checking is on.\n+\t(maybe_warn_bidi_on_char): Likewise.\n+\n 2022-01-18  Richard Biener  <rguenther@suse.de>\n \n \t* include/line-map.h (class line_maps): Re-arrange fields"}, {"sha": "8bfdacd3272635df92bf30f86d6cebd0c4649a14", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=bb99171b9b0f01a46bfca2d3cbd52fc6faf6cbaa", "patch": "@@ -1,3 +1,9 @@\n+2022-01-24  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* ieee/issignaling_fallback.h: New file.\n+\t* ieee/ieee_helper.c: Include issignaling_fallback.h when target\n+\tdoes not define issignaling macro.\n+\n 2022-01-17  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* ieee/issignaling_fallback.h: Remove file."}]}