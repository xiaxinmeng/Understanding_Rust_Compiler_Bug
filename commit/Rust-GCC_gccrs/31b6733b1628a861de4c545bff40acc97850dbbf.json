{"sha": "31b6733b1628a861de4c545bff40acc97850dbbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFiNjczM2IxNjI4YTg2MWRlNGM1NDViZmY0MGFjYzk3ODUwZGJiZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-02-01T10:08:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-02-01T10:08:26Z"}, "message": "re PR tree-optimization/81661 (ICE in gimplify_modify_expr, at gimplify.c:5638)\n\n\tPR tree-optimization/81661\n\tPR tree-optimization/84117\n\t* tree-eh.h (rewrite_to_non_trapping_overflow): Declare.\n\t* tree-eh.c: Include gimplify.h.\n\t(find_trapping_overflow, replace_trapping_overflow,\n\trewrite_to_non_trapping_overflow): New functions.\n\t* tree-vect-loop.c: Include tree-eh.h.\n\t(vect_get_loop_niters): Use rewrite_to_non_trapping_overflow.\n\t* tree-data-ref.c: Include tree-eh.h.\n\t(get_segment_min_max): Use rewrite_to_non_trapping_overflow.\n\n\t* gcc.dg/pr81661.c: New test.\n\t* gfortran.dg/pr84117.f90: New test.\n\nFrom-SVN: r257284", "tree": {"sha": "f42a2adeb53b018ecc56134e5735e062d67b17fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f42a2adeb53b018ecc56134e5735e062d67b17fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31b6733b1628a861de4c545bff40acc97850dbbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31b6733b1628a861de4c545bff40acc97850dbbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31b6733b1628a861de4c545bff40acc97850dbbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31b6733b1628a861de4c545bff40acc97850dbbf/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eae4d8fbb529d67428a2b0eba407b975ee13e7d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eae4d8fbb529d67428a2b0eba407b975ee13e7d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eae4d8fbb529d67428a2b0eba407b975ee13e7d1"}], "stats": {"total": 134, "additions": 132, "deletions": 2}, "files": [{"sha": "b1c56173d599d66a270266b60185a467a3cca8bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b6733b1628a861de4c545bff40acc97850dbbf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b6733b1628a861de4c545bff40acc97850dbbf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31b6733b1628a861de4c545bff40acc97850dbbf", "patch": "@@ -1,3 +1,16 @@\n+2018-02-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/81661\n+\tPR tree-optimization/84117\n+\t* tree-eh.h (rewrite_to_non_trapping_overflow): Declare.\n+\t* tree-eh.c: Include gimplify.h.\n+\t(find_trapping_overflow, replace_trapping_overflow,\n+\trewrite_to_non_trapping_overflow): New functions.\n+\t* tree-vect-loop.c: Include tree-eh.h.\n+\t(vect_get_loop_niters): Use rewrite_to_non_trapping_overflow.\n+\t* tree-data-ref.c: Include tree-eh.h.\n+\t(get_segment_min_max): Use rewrite_to_non_trapping_overflow.\n+\n 2018-01-31  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR rtl-optimization/84123"}, {"sha": "92d013e48799382979322c0ae2c6373d640a4f7e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b6733b1628a861de4c545bff40acc97850dbbf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b6733b1628a861de4c545bff40acc97850dbbf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=31b6733b1628a861de4c545bff40acc97850dbbf", "patch": "@@ -1,3 +1,10 @@\n+2018-02-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/81661\n+\tPR tree-optimization/84117\n+\t* gcc.dg/pr81661.c: New test.\n+\t* gfortran.dg/pr84117.f90: New test.\n+\n 2018-02-01  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR fortran/83705"}, {"sha": "d8d27304ddb848fa90a0d3666e70a36444b19433", "filename": "gcc/testsuite/gcc.dg/pr81661.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b6733b1628a861de4c545bff40acc97850dbbf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81661.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b6733b1628a861de4c545bff40acc97850dbbf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81661.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81661.c?ref=31b6733b1628a861de4c545bff40acc97850dbbf", "patch": "@@ -0,0 +1,12 @@\n+/* PR tree-optimization/81661 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -ftrapv\" } */\n+\n+int a, b, c;\n+\n+void\n+foo (void)\n+{\n+  while (a + c > b)\n+    a--;\n+}"}, {"sha": "1853d8c5f39d090efbee9b3eae8317537285cb8b", "filename": "gcc/testsuite/gfortran.dg/pr84117.f90", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b6733b1628a861de4c545bff40acc97850dbbf/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr84117.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b6733b1628a861de4c545bff40acc97850dbbf/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr84117.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr84117.f90?ref=31b6733b1628a861de4c545bff40acc97850dbbf", "patch": "@@ -0,0 +1,7 @@\n+! PR tree-optimization/84117\n+! { dg-do compile }\n+! { dg-options \"-O3 -ftrapv\" }\n+  FUNCTION pw_integral_aa ( cc ) RESULT ( integral_value )\n+    COMPLEX(KIND=8), DIMENSION(:), POINTER :: cc\n+    integral_value = accurate_sum ( CONJG ( cc (:) ) * cc (:) )\n+  END FUNCTION pw_integral_aa"}, {"sha": "b5c0b7f4281a566d292edda405485e222304e20d", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b6733b1628a861de4c545bff40acc97850dbbf/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b6733b1628a861de4c545bff40acc97850dbbf/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=31b6733b1628a861de4c545bff40acc97850dbbf", "patch": "@@ -98,6 +98,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stringpool.h\"\n #include \"tree-vrp.h\"\n #include \"tree-ssanames.h\"\n+#include \"tree-eh.h\"\n \n static struct datadep_stats\n {\n@@ -1790,7 +1791,8 @@ get_segment_min_max (const dr_with_seg_len &d, tree *seg_min_out,\n   tree addr_base = fold_build_pointer_plus (DR_BASE_ADDRESS (d.dr),\n \t\t\t\t\t    DR_OFFSET (d.dr));\n   addr_base = fold_build_pointer_plus (addr_base, DR_INIT (d.dr));\n-  tree seg_len = fold_convert (sizetype, d.seg_len);\n+  tree seg_len\n+    = fold_convert (sizetype, rewrite_to_non_trapping_overflow (d.seg_len));\n \n   tree min_reach = fold_build3 (COND_EXPR, sizetype, neg_step,\n \t\t\t\tseg_len, size_zero_node);"}, {"sha": "75385f7b53f1462ac73cec0a912a8847093becf1", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b6733b1628a861de4c545bff40acc97850dbbf/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b6733b1628a861de4c545bff40acc97850dbbf/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=31b6733b1628a861de4c545bff40acc97850dbbf", "patch": "@@ -46,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stringpool.h\"\n #include \"attribs.h\"\n #include \"asan.h\"\n+#include \"gimplify.h\"\n \n /* In some instances a tree and a gimple need to be stored in a same table,\n    i.e. in hash tables. This is a structure to do this. */\n@@ -2720,6 +2721,91 @@ tree_could_trap_p (tree expr)\n     }\n }\n \n+/* Return non-NULL if there is an integer operation with trapping overflow\n+   we can rewrite into non-trapping.  Called via walk_tree from\n+   rewrite_to_non_trapping_overflow.  */\n+\n+static tree\n+find_trapping_overflow (tree *tp, int *walk_subtrees, void *data)\n+{\n+  if (EXPR_P (*tp)\n+      && !operation_no_trapping_overflow (TREE_TYPE (*tp), TREE_CODE (*tp)))\n+    return *tp;\n+  if (IS_TYPE_OR_DECL_P (*tp)\n+      || (TREE_CODE (*tp) == SAVE_EXPR && data == NULL))\n+    *walk_subtrees = 0;\n+  return NULL_TREE;\n+}\n+\n+/* Rewrite selected operations into unsigned arithmetics, so that they\n+   don't trap on overflow.  */\n+\n+static tree\n+replace_trapping_overflow (tree *tp, int *walk_subtrees, void *data)\n+{\n+  if (find_trapping_overflow (tp, walk_subtrees, data))\n+    {\n+      tree type = TREE_TYPE (*tp);\n+      tree utype = unsigned_type_for (type);\n+      *walk_subtrees = 0;\n+      int len = TREE_OPERAND_LENGTH (*tp);\n+      for (int i = 0; i < len; ++i)\n+\twalk_tree (&TREE_OPERAND (*tp, i), replace_trapping_overflow,\n+\t\t   data, (hash_set<tree> *) data);\n+\n+      if (TREE_CODE (*tp) == ABS_EXPR)\n+\t{\n+\t  tree op = TREE_OPERAND (*tp, 0);\n+\t  op = save_expr (op);\n+\t  /* save_expr skips simple arithmetics, which is undesirable\n+\t     here, if it might trap due to flag_trapv.  We need to\n+\t     force a SAVE_EXPR in the COND_EXPR condition, to evaluate\n+\t     it before the comparison.  */\n+\t  if (EXPR_P (op)\n+\t      && TREE_CODE (op) != SAVE_EXPR\n+\t      && walk_tree (&op, find_trapping_overflow, NULL, NULL))\n+\t    {\n+\t      op = build1_loc (EXPR_LOCATION (op), SAVE_EXPR, type, op);\n+\t      TREE_SIDE_EFFECTS (op) = 1;\n+\t    }\n+\t  /* Change abs (op) to op < 0 ? -op : op and handle the NEGATE_EXPR\n+\t     like other signed integer trapping operations.  */\n+\t  tree cond = fold_build2 (LT_EXPR, boolean_type_node,\n+\t\t\t\t   op, build_int_cst (type, 0));\n+\t  tree neg = fold_build1 (NEGATE_EXPR, utype,\n+\t\t\t\t  fold_convert (utype, op));\n+\t  *tp = fold_build3 (COND_EXPR, type, cond,\n+\t\t\t     fold_convert (type, neg), op);\n+\t}\n+      else\n+\t{\n+\t  TREE_TYPE (*tp) = utype;\n+\t  len = TREE_OPERAND_LENGTH (*tp);\n+\t  for (int i = 0; i < len; ++i)\n+\t    TREE_OPERAND (*tp, i)\n+\t      = fold_convert (utype, TREE_OPERAND (*tp, i));\n+\t  *tp = fold_convert (type, *tp);\n+\t}\n+    }\n+  return NULL_TREE;\n+}\n+\n+/* If any subexpression of EXPR can trap due to -ftrapv, rewrite it\n+   using unsigned arithmetics to avoid traps in it.  */\n+\n+tree\n+rewrite_to_non_trapping_overflow (tree expr)\n+{\n+  if (!flag_trapv)\n+    return expr;\n+  hash_set<tree> pset;\n+  if (!walk_tree (&expr, find_trapping_overflow, &pset, &pset))\n+    return expr;\n+  expr = unshare_expr (expr);\n+  pset.empty ();\n+  walk_tree (&expr, replace_trapping_overflow, &pset, &pset);\n+  return expr;\n+}\n \n /* Helper for stmt_could_throw_p.  Return true if STMT (assumed to be a\n    an assignment or a conditional) may throw.  */"}, {"sha": "11e096c9e5fa27ec1b317490233fc528bc91681f", "filename": "gcc/tree-eh.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b6733b1628a861de4c545bff40acc97850dbbf/gcc%2Ftree-eh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b6733b1628a861de4c545bff40acc97850dbbf/gcc%2Ftree-eh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.h?ref=31b6733b1628a861de4c545bff40acc97850dbbf", "patch": "@@ -37,6 +37,7 @@ extern bool operation_could_trap_helper_p (enum tree_code, bool, bool, bool,\n \t\t\t\t\t   bool, tree, bool *);\n extern bool operation_could_trap_p (enum tree_code, bool, bool, tree);\n extern bool tree_could_trap_p (tree);\n+extern tree rewrite_to_non_trapping_overflow (tree);\n extern bool stmt_could_throw_p (gimple *);\n extern bool tree_could_throw_p (tree);\n extern bool stmt_can_throw_external (gimple *);"}, {"sha": "c5301684028562656c951ff1e0d7623ffc96c4ad", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b6733b1628a861de4c545bff40acc97850dbbf/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b6733b1628a861de4c545bff40acc97850dbbf/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=31b6733b1628a861de4c545bff40acc97850dbbf", "patch": "@@ -53,6 +53,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"internal-fn.h\"\n #include \"tree-vector-builder.h\"\n #include \"vec-perm-indices.h\"\n+#include \"tree-eh.h\"\n \n /* Loop Vectorization Pass.\n \n@@ -1063,7 +1064,8 @@ vect_get_loop_niters (struct loop *loop, tree *assumptions,\n \t\t\t\t\t\t\t  may_be_zero));\n \t  else\n \t    niter = fold_build3 (COND_EXPR, TREE_TYPE (niter), may_be_zero,\n-\t\t\t\t build_int_cst (TREE_TYPE (niter), 0), niter);\n+\t\t\t\t build_int_cst (TREE_TYPE (niter), 0),\n+\t\t\t\t rewrite_to_non_trapping_overflow (niter));\n \n \t  may_be_zero = NULL_TREE;\n \t}"}]}