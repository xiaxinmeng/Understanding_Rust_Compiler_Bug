{"sha": "c881de027cad019b0c8e556613bec7ac8d492fe0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg4MWRlMDI3Y2FkMDE5YjBjOGU1NTY2MTNiZWM3YWM4ZDQ5MmZlMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "r.sandiford@uk.ibm.com", "date": "2012-06-06T09:12:58Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2012-06-06T09:12:58Z"}, "message": "invoke.texi (sched-pressure-algorithm): Document new --param.\n\ngcc/\n\t* doc/invoke.texi (sched-pressure-algorithm): Document new --param.\n\t* common.opt (fsched-pressure-algorithm=): Remove.\n\t* flag-types.h (sched_pressure_algorithm): Move to...\n\t* sched-int.h (sched_pressure_algorithm): ...here.\n\t* params.def (sched-pressure-algorithm): New param.\n\t* haifa-sched.c (sched_init): Use it to initialize sched_pressure.\n\t* common/config/s390/s390-common.c (s390_option_optimization_table):\n\tRemove OPT_fsched_pressure_algorithm_ entry.\n\t* config/s390/s390.c (s390_option_override): Set a default value for\n\tPARAM_SCHED_PRESSURE_ALGORITHM.\n\nFrom-SVN: r188258", "tree": {"sha": "ea916a73f9fec97c16c5cf2ff5b2caffd34df151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea916a73f9fec97c16c5cf2ff5b2caffd34df151"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c881de027cad019b0c8e556613bec7ac8d492fe0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c881de027cad019b0c8e556613bec7ac8d492fe0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c881de027cad019b0c8e556613bec7ac8d492fe0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c881de027cad019b0c8e556613bec7ac8d492fe0/comments", "author": null, "committer": null, "parents": [{"sha": "14ae3cbc62bc39d5a3ff9b3067977d4f99739ed6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14ae3cbc62bc39d5a3ff9b3067977d4f99739ed6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14ae3cbc62bc39d5a3ff9b3067977d4f99739ed6"}], "stats": {"total": 72, "additions": 46, "deletions": 26}, "files": [{"sha": "6c00603f08635159ec0596acbb265a71e8e1700b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c881de027cad019b0c8e556613bec7ac8d492fe0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c881de027cad019b0c8e556613bec7ac8d492fe0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c881de027cad019b0c8e556613bec7ac8d492fe0", "patch": "@@ -1,3 +1,16 @@\n+2012-06-06  Richard Sandiford  <r.sandiford@uk.ibm.com>\n+\n+\t* doc/invoke.texi (sched-pressure-algorithm): Document new --param.\n+\t* common.opt (fsched-pressure-algorithm=): Remove.\n+\t* flag-types.h (sched_pressure_algorithm): Move to...\n+\t* sched-int.h (sched_pressure_algorithm): ...here.\n+\t* params.def (sched-pressure-algorithm): New param.\n+\t* haifa-sched.c (sched_init): Use it to initialize sched_pressure.\n+\t* common/config/s390/s390-common.c (s390_option_optimization_table):\n+\tRemove OPT_fsched_pressure_algorithm_ entry.\n+\t* config/s390/s390.c (s390_option_override): Set a default value for\n+\tPARAM_SCHED_PRESSURE_ALGORITHM.\n+\n 2012-06-05  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/53487"}, {"sha": "faa05722c6f2679f47cd40b0fd9cc242306a15c8", "filename": "gcc/common.opt", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c881de027cad019b0c8e556613bec7ac8d492fe0/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c881de027cad019b0c8e556613bec7ac8d492fe0/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=c881de027cad019b0c8e556613bec7ac8d492fe0", "patch": "@@ -1664,19 +1664,6 @@ fsched-pressure\n Common Report Var(flag_sched_pressure) Init(0) Optimization\n Enable register pressure sensitive insn scheduling\n \n-fsched-pressure-algorithm=\n-Common Joined RejectNegative Enum(sched_pressure_algorithm) Var(flag_sched_pressure_algorithm) Init(SCHED_PRESSURE_WEIGHTED)\n--fsched-pressure-algorithm=[weighted|model] Set the pressure-scheduling algorithm\n-\n-Enum\n-Name(sched_pressure_algorithm) Type(enum sched_pressure_algorithm) UnknownError(unknown %<fsched-pressure%> algorithm %qs)\n-\n-EnumValue\n-Enum(sched_pressure_algorithm) String(weighted) Value(SCHED_PRESSURE_WEIGHTED)\n-\n-EnumValue\n-Enum(sched_pressure_algorithm) String(model) Value(SCHED_PRESSURE_MODEL)\n-\n fsched-spec\n Common Report Var(flag_schedule_speculative) Init(1) Optimization\n Allow speculative motion of non-loads"}, {"sha": "0c9a1616cf00982c360a16dddd8a20e9686b6b9f", "filename": "gcc/common/config/s390/s390-common.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c881de027cad019b0c8e556613bec7ac8d492fe0/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c881de027cad019b0c8e556613bec7ac8d492fe0/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.c?ref=c881de027cad019b0c8e556613bec7ac8d492fe0", "patch": "@@ -51,11 +51,8 @@ static const struct default_options s390_option_optimization_table[] =\n   {\n     { OPT_LEVELS_1_PLUS, OPT_fomit_frame_pointer, NULL, 1 },\n \n-    /* Enable -fsched-pressure using -fsched-pressure-algorithm=model\n-       by default when optimizing.  */\n+    /* Enable -fsched-pressure by default when optimizing.  */\n     { OPT_LEVELS_1_PLUS, OPT_fsched_pressure, NULL, 1 },\n-    { OPT_LEVELS_1_PLUS, OPT_fsched_pressure_algorithm_,\n-      NULL, SCHED_PRESSURE_MODEL },\n \n     /* ??? There are apparently still problems with -fcaller-saves.  */\n     { OPT_LEVELS_ALL, OPT_fcaller_saves, NULL, 0 },"}, {"sha": "477bd24a25568519807c95b2b5d83ea6481326da", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c881de027cad019b0c8e556613bec7ac8d492fe0/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c881de027cad019b0c8e556613bec7ac8d492fe0/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=c881de027cad019b0c8e556613bec7ac8d492fe0", "patch": "@@ -1649,6 +1649,11 @@ s390_option_override (void)\n      is beneficial on s390, we enable it if available.  */\n   if (flag_prefetch_loop_arrays < 0 && HAVE_prefetch && optimize >= 3)\n     flag_prefetch_loop_arrays = 1;\n+\n+  /* Use the alternative scheduling-pressure algorithm by default.  */\n+  maybe_set_param_value (PARAM_SCHED_PRESSURE_ALGORITHM, 2,\n+                         global_options.x_param_values,\n+                         global_options_set.x_param_values);\n }\n \n /* Map for smallest class containing reg regno.  */"}, {"sha": "2c75bbb4cf5bace021247f14364afa3293964b82", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c881de027cad019b0c8e556613bec7ac8d492fe0/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c881de027cad019b0c8e556613bec7ac8d492fe0/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c881de027cad019b0c8e556613bec7ac8d492fe0", "patch": "@@ -9350,6 +9350,17 @@ Set the maximum number of instructions executed in parallel in\n reassociated tree. This parameter overrides target dependent\n heuristics used by default if has non zero value.\n \n+@item sched-pressure-algorithm\n+Choose between the two available implementations of\n+@option{-fsched-pressure}.  Algorithm 1 is the original implementation\n+and is the more likely to prevent instructions from being reordered.\n+Algorithm 2 was designed to be a compromise between the relatively\n+conservative approach taken by algorithm 1 and the rather aggressive\n+approach taken by the default scheduler.  It relies more heavily on\n+having a regular register file and accurate register pressure classes.\n+See @file{haifa-sched.c} in the GCC sources for more details.\n+\n+The default choice depends on the target.\n @end table\n @end table\n "}, {"sha": "f757423e56a57df51507beabcbfcd07ddf059d48", "filename": "gcc/flag-types.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c881de027cad019b0c8e556613bec7ac8d492fe0/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c881de027cad019b0c8e556613bec7ac8d492fe0/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=c881de027cad019b0c8e556613bec7ac8d492fe0", "patch": "@@ -106,14 +106,6 @@ enum symbol_visibility\n };\n #endif\n \n-/* The algorithm used to implement -fsched-pressure.  */\n-enum sched_pressure_algorithm\n-{\n-  SCHED_PRESSURE_NONE,\n-  SCHED_PRESSURE_WEIGHTED,\n-  SCHED_PRESSURE_MODEL\n-};\n-\n /* The algorithm used for the integrated register allocator (IRA).  */\n enum ira_algorithm\n {"}, {"sha": "9ec005ab9eeb7b8f003f31f96ba298eb2a26472c", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c881de027cad019b0c8e556613bec7ac8d492fe0/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c881de027cad019b0c8e556613bec7ac8d492fe0/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=c881de027cad019b0c8e556613bec7ac8d492fe0", "patch": "@@ -6229,7 +6229,8 @@ sched_init (void)\n   if (flag_sched_pressure\n       && !reload_completed\n       && common_sched_info->sched_pass_id == SCHED_RGN_PASS)\n-    sched_pressure = flag_sched_pressure_algorithm;\n+    sched_pressure = ((enum sched_pressure_algorithm)\n+\t\t      PARAM_VALUE (PARAM_SCHED_PRESSURE_ALGORITHM));\n   else\n     sched_pressure = SCHED_PRESSURE_NONE;\n "}, {"sha": "ad2cf4375bfc2ef3c11600c440bdc06d6c971287", "filename": "gcc/params.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c881de027cad019b0c8e556613bec7ac8d492fe0/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c881de027cad019b0c8e556613bec7ac8d492fe0/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=c881de027cad019b0c8e556613bec7ac8d492fe0", "patch": "@@ -979,6 +979,12 @@ DEFPARAM (PARAM_MAX_TRACKED_STRLENS,\n \t  \"track string lengths\",\n \t  1000, 0, 0)\n \n+/* Keep this in sync with the sched_pressure_algorithm enum.  */\n+DEFPARAM (PARAM_SCHED_PRESSURE_ALGORITHM,\n+\t  \"sched-pressure-algorithm\",\n+\t  \"Which -fsched-pressure algorithm to apply\",\n+\t  1, 1, 2)\n+\n /*\n Local variables:\n mode:c"}, {"sha": "fa5fc66431191664b9bc84220bfc6e593ba5bc6b", "filename": "gcc/sched-int.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c881de027cad019b0c8e556613bec7ac8d492fe0/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c881de027cad019b0c8e556613bec7ac8d492fe0/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=c881de027cad019b0c8e556613bec7ac8d492fe0", "patch": "@@ -37,6 +37,14 @@ along with GCC; see the file COPYING3.  If not see\n enum sched_pass_id_t { SCHED_PASS_UNKNOWN, SCHED_RGN_PASS, SCHED_EBB_PASS,\n \t\t       SCHED_SMS_PASS, SCHED_SEL_PASS };\n \n+/* The algorithm used to implement -fsched-pressure.  */\n+enum sched_pressure_algorithm\n+{\n+  SCHED_PRESSURE_NONE,\n+  SCHED_PRESSURE_WEIGHTED,\n+  SCHED_PRESSURE_MODEL\n+};\n+\n typedef VEC (basic_block, heap) *bb_vec_t;\n typedef VEC (rtx, heap) *insn_vec_t;\n typedef VEC (rtx, heap) *rtx_vec_t;"}]}