{"sha": "a00782edb0f6f87c5a4b338bd5964f97014ee700", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAwNzgyZWRiMGY2Zjg3YzVhNGIzMzhiZDU5NjRmOTcwMTRlZTcwMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-10-22T23:54:47Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-10-22T23:54:47Z"}, "message": "re PR other/8289 (Errorneous prototypes of xmmintrin.h functions)\n\n\n\tPR other/8289\n\t* xmmintrin.h: Add const to the argument of loads.\n\n\t* i386.md (pushv2di): New pattern.\n\tPR target/6890\n\t* xmmintrin.h (_MM_TRANSPOSE4_PS): New.\n\nFrom-SVN: r58428", "tree": {"sha": "3b37322785730f68b3d8ed041e30673b298a242e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b37322785730f68b3d8ed041e30673b298a242e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a00782edb0f6f87c5a4b338bd5964f97014ee700", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a00782edb0f6f87c5a4b338bd5964f97014ee700", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a00782edb0f6f87c5a4b338bd5964f97014ee700", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a00782edb0f6f87c5a4b338bd5964f97014ee700/comments", "author": null, "committer": null, "parents": [{"sha": "ad4f99101437a6adc0f481a0d8902a78fd64f441", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad4f99101437a6adc0f481a0d8902a78fd64f441", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad4f99101437a6adc0f481a0d8902a78fd64f441"}], "stats": {"total": 58, "additions": 39, "deletions": 19}, "files": [{"sha": "4174a7c8bc93789722380ca60281e35b303bdc53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a00782edb0f6f87c5a4b338bd5964f97014ee700/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a00782edb0f6f87c5a4b338bd5964f97014ee700/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a00782edb0f6f87c5a4b338bd5964f97014ee700", "patch": "@@ -1,3 +1,12 @@\n+Wed Oct 23 01:52:36 CEST 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR other/8289\n+\t* xmmintrin.h: Add const to the argument of loads.\n+\n+\t* i386.md (pushv2di): New pattern.\n+\tPR target/6890\n+\t* xmmintrin.h (_MM_TRANSPOSE4_PS): New.\n+\n 2002-10-22  Richard Henderson  <rth@redhat.com>\n \n \t* target.h (gcc_target.asm_out): Merge output_mi_thunk and"}, {"sha": "30b5c9e7d968449dbbf295af78ceccffc0e60120", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a00782edb0f6f87c5a4b338bd5964f97014ee700/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a00782edb0f6f87c5a4b338bd5964f97014ee700/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a00782edb0f6f87c5a4b338bd5964f97014ee700", "patch": "@@ -18055,6 +18055,17 @@\n   \"\"\n   [(set_attr \"type\" \"multi\")])\n \n+(define_insn_and_split \"*pushv2di\"\n+  [(set (match_operand:V2DI 0 \"push_operand\" \"=<\")\n+\t(match_operand:V2DI 1 \"nonmemory_operand\" \"x\"))]\n+  \"TARGET_SSE2\"\n+  \"#\"\n+  \"\"\n+  [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -16)))\n+   (set (mem:V2DI (reg:SI 7)) (match_dup 1))]\n+  \"\"\n+  [(set_attr \"type\" \"multi\")])\n+\n (define_insn_and_split \"*pushv8hi\"\n   [(set (match_operand:V8HI 0 \"push_operand\" \"=<\")\n \t(match_operand:V8HI 1 \"nonmemory_operand\" \"x\"))]"}, {"sha": "2213f96f4a5a5d493ec8739be4b19c3ac6157d32", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a00782edb0f6f87c5a4b338bd5964f97014ee700/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a00782edb0f6f87c5a4b338bd5964f97014ee700/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=a00782edb0f6f87c5a4b338bd5964f97014ee700", "patch": "@@ -648,7 +648,7 @@ _mm_unpacklo_ps (__m128 __A, __m128 __B)\n /* Sets the upper two SPFP values with 64-bits of data loaded from P;\n    the lower two values are passed through from A.  */\n static __inline __m128\n-_mm_loadh_pi (__m128 __A, __m64 *__P)\n+_mm_loadh_pi (__m128 __A, __m64 const *__P)\n {\n   return (__m128) __builtin_ia32_loadhps ((__v4sf)__A, (__v2si *)__P);\n }\n@@ -677,7 +677,7 @@ _mm_movelh_ps (__m128 __A, __m128 __B)\n /* Sets the lower two SPFP values with 64-bits of data loaded from P;\n    the upper two values are passed through from A.  */\n static __inline __m128\n-_mm_loadl_pi (__m128 __A, __m64 *__P)\n+_mm_loadl_pi (__m128 __A, __m64 const *__P)\n {\n   return (__m128) __builtin_ia32_loadlps ((__v4sf)__A, (__v2si *)__P);\n }\n@@ -762,42 +762,42 @@ _MM_SET_FLUSH_ZERO_MODE (unsigned int __mode)\n \n /* Create a vector with element 0 as *P and the rest zero.  */\n static __inline __m128\n-_mm_load_ss (float *__P)\n+_mm_load_ss (float const *__P)\n {\n   return (__m128) __builtin_ia32_loadss (__P);\n }\n \n /* Create a vector with all four elements equal to *P.  */\n static __inline __m128\n-_mm_load1_ps (float *__P)\n+_mm_load1_ps (float const *__P)\n {\n   __v4sf __tmp = __builtin_ia32_loadss (__P);\n   return (__m128) __builtin_ia32_shufps (__tmp, __tmp, _MM_SHUFFLE (0,0,0,0));\n }\n \n static __inline __m128\n-_mm_load_ps1 (float *__P)\n+_mm_load_ps1 (float const *__P)\n {\n   return _mm_load1_ps (__P);\n }\n \n /* Load four SPFP values from P.  The address must be 16-byte aligned.  */\n static __inline __m128\n-_mm_load_ps (float *__P)\n+_mm_load_ps (float const *__P)\n {\n   return (__m128) __builtin_ia32_loadaps (__P);\n }\n \n /* Load four SPFP values from P.  The address need not be 16-byte aligned.  */\n static __inline __m128\n-_mm_loadu_ps (float *__P)\n+_mm_loadu_ps (float const *__P)\n {\n   return (__m128) __builtin_ia32_loadups (__P);\n }\n \n /* Load four SPFP values in reverse order.  The address must be aligned.  */\n static __inline __m128\n-_mm_loadr_ps (float *__P)\n+_mm_loadr_ps (float const *__P)\n {\n   __v4sf __tmp = __builtin_ia32_loadaps (__P);\n   return (__m128) __builtin_ia32_shufps (__tmp, __tmp, _MM_SHUFFLE (0,1,2,3));\n@@ -1069,8 +1069,8 @@ _mm_pause (void)\n do {\t\t\t\t\t\t\t\t\t\\\n   __v4sf __r0 = (row0), __r1 = (row1), __r2 = (row2), __r3 = (row3);\t\\\n   __v4sf __t0 = __builtin_ia32_shufps (__r0, __r1, 0x44);\t\t\\\n-  __v4sf __t1 = __builtin_ia32_shufps (__r0, __r1, 0xEE);\t\t\\\n-  __v4sf __t2 = __builtin_ia32_shufps (__r2, __r3, 0x44);\t\t\\\n+  __v4sf __t2 = __builtin_ia32_shufps (__r0, __r1, 0xEE);\t\t\\\n+  __v4sf __t1 = __builtin_ia32_shufps (__r2, __r3, 0x44);\t\t\\\n   __v4sf __t3 = __builtin_ia32_shufps (__r2, __r3, 0xEE);\t\t\\\n   (row0) = __builtin_ia32_shufps (__t0, __t1, 0x88);\t\t\t\\\n   (row1) = __builtin_ia32_shufps (__t0, __t1, 0xDD);\t\t\t\\\n@@ -1095,42 +1095,42 @@ typedef int __v16qi __attribute__ ((mode (V16QI)));\n \n /* Create a vector with element 0 as *P and the rest zero.  */\n static __inline __m128d\n-_mm_load_sd (double *__P)\n+_mm_load_sd (double const *__P)\n {\n   return (__m128d) __builtin_ia32_loadsd (__P);\n }\n \n /* Create a vector with all two elements equal to *P.  */\n static __inline __m128d\n-_mm_load1_pd (double *__P)\n+_mm_load1_pd (double const *__P)\n {\n   __v2df __tmp = __builtin_ia32_loadsd (__P);\n   return (__m128d) __builtin_ia32_shufpd (__tmp, __tmp, _MM_SHUFFLE2 (0,0));\n }\n \n static __inline __m128d\n-_mm_load_pd1 (double *__P)\n+_mm_load_pd1 (double const *__P)\n {\n   return _mm_load1_pd (__P);\n }\n \n /* Load two DPFP values from P.  The addresd must be 16-byte aligned.  */\n static __inline __m128d\n-_mm_load_pd (double *__P)\n+_mm_load_pd (double const *__P)\n {\n   return (__m128d) __builtin_ia32_loadapd (__P);\n }\n \n /* Load two DPFP values from P.  The addresd need not be 16-byte aligned.  */\n static __inline __m128d\n-_mm_loadu_pd (double *__P)\n+_mm_loadu_pd (double const *__P)\n {\n   return (__m128d) __builtin_ia32_loadupd (__P);\n }\n \n /* Load two DPFP values in reverse order.  The addresd must be aligned.  */\n static __inline __m128d\n-_mm_loadr_pd (double *__P)\n+_mm_loadr_pd (double const *__P)\n {\n   __v2df __tmp = __builtin_ia32_loadapd (__P);\n   return (__m128d) __builtin_ia32_shufpd (__tmp, __tmp, _MM_SHUFFLE2 (0,1));\n@@ -1932,7 +1932,7 @@ _mm_unpacklo_pd (__m128d __A, __m128d __B)\n }\n \n static __inline __m128d\n-_mm_loadh_pd (__m128d __A, double *__B)\n+_mm_loadh_pd (__m128d __A, double const *__B)\n {\n   return (__m128d)__builtin_ia32_loadhpd ((__v2df)__A, (__v2si *)__B);\n }\n@@ -1944,7 +1944,7 @@ _mm_storeh_pd (double *__A, __m128d __B)\n }\n \n static __inline __m128d\n-_mm_loadl_pd (__m128d __A, double *__B)\n+_mm_loadl_pd (__m128d __A, double const *__B)\n {\n   return (__m128d)__builtin_ia32_loadlpd ((__v2df)__A, (__v2si *)__B);\n }\n@@ -2436,7 +2436,7 @@ _mm_movpi64_epi64 (__m64 __A)\n }\n \n static __inline void\n-_mm_clflush (void *__A)\n+_mm_clflush (void const *__A)\n {\n   return __builtin_ia32_clflush (__A);\n }"}]}