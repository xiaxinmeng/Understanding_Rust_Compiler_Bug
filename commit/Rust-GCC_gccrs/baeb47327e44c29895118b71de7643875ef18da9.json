{"sha": "baeb47327e44c29895118b71de7643875ef18da9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFlYjQ3MzI3ZTQ0YzI5ODk1MTE4YjcxZGU3NjQzODc1ZWYxOGRhOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2001-08-19T18:35:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2001-08-19T18:35:06Z"}, "message": "typeck2.c (add_exception_specifier): Only require complete type if not in processing template declaration.\n\n\t* typeck2.c (add_exception_specifier): Only require complete type if\n\tnot in processing template declaration.\n\n\t* g++.dg/eh/template1.C: New test.\n\nFrom-SVN: r45032", "tree": {"sha": "0b8a34439005ae5ca91033d3c6525a749a09fa48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b8a34439005ae5ca91033d3c6525a749a09fa48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/baeb47327e44c29895118b71de7643875ef18da9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baeb47327e44c29895118b71de7643875ef18da9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baeb47327e44c29895118b71de7643875ef18da9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baeb47327e44c29895118b71de7643875ef18da9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fd1a3f73308e2f8014a5835fd32e5d0c4825056a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd1a3f73308e2f8014a5835fd32e5d0c4825056a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd1a3f73308e2f8014a5835fd32e5d0c4825056a"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "e513bdbdd7c7c28257e4e6f7e709f4380244d863", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baeb47327e44c29895118b71de7643875ef18da9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baeb47327e44c29895118b71de7643875ef18da9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=baeb47327e44c29895118b71de7643875ef18da9", "patch": "@@ -1,3 +1,8 @@\n+2001-08-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* typeck2.c (add_exception_specifier): Only require complete type if\n+\tnot in processing template declaration.\n+\n 2001-08-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* decl.c: Cast argument to size_t, not HOST_WIDE_INT, in calls to"}, {"sha": "5ba46111cc06a4bf3bf0ebd16f3be800552f24be", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baeb47327e44c29895118b71de7643875ef18da9/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baeb47327e44c29895118b71de7643875ef18da9/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=baeb47327e44c29895118b71de7643875ef18da9", "patch": "@@ -1293,9 +1293,11 @@ add_exception_specifier (list, spec, complain)\n     ok = is_ptr;\n   else if (TREE_CODE (core) == TEMPLATE_TYPE_PARM)\n     ok = 1;\n+  else if (processing_template_decl)\n+    ok = 1;\n   else\n     ok = COMPLETE_TYPE_P (complete_type (core));\n-  \n+\n   if (ok)\n     {\n       tree probe;"}, {"sha": "babe91e396f2fd3ae2958e0ab529919bd629f914", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baeb47327e44c29895118b71de7643875ef18da9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baeb47327e44c29895118b71de7643875ef18da9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=baeb47327e44c29895118b71de7643875ef18da9", "patch": "@@ -1,3 +1,7 @@\n+2001-08-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/eh/template1.C: New test.\n+\n 2001-08-16  David Billinghurst  <David.Billinghurst@riotinto.com>\n \n \t* g77.f-torture/compile/pr3743.x: Do not return 1 for xfail."}, {"sha": "2cbf9c698b081bb7ae75eeeca52abccea6495f14", "filename": "gcc/testsuite/g++.dg/eh/template1.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baeb47327e44c29895118b71de7643875ef18da9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Ftemplate1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baeb47327e44c29895118b71de7643875ef18da9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Ftemplate1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Ftemplate1.C?ref=baeb47327e44c29895118b71de7643875ef18da9", "patch": "@@ -0,0 +1,38 @@\n+// Test whether exception specifier dependent on template parameter\n+// is accepted during template decl processing.\n+// { dg-do run }\n+\n+extern \"C\" void abort();\n+\n+class A {};\n+\n+template <class T>\n+struct B\n+{\n+  typedef A E;\n+};\n+\n+template <class T>\n+struct C\n+{\n+  typedef B<T> D;\n+  typedef typename D::E E;\n+  void f() throw(E) { throw E(); }\n+};\n+\n+int main()\n+{\n+  int caught = 0;\n+  try\n+    {\n+      C<int> x;\n+      x.f();\n+    }\n+  catch (A)\n+    {\n+      ++caught;\n+    }\n+  if (caught != 1)\n+    abort ();\n+  return 0;\n+}"}]}