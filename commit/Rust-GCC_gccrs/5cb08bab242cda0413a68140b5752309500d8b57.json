{"sha": "5cb08bab242cda0413a68140b5752309500d8b57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNiMDhiYWIyNDJjZGEwNDEzYTY4MTQwYjU3NTIzMDk1MDBkOGI1Nw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-03-13T04:35:12Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-03-13T04:35:12Z"}, "message": "builtins.c (fold_builtin_classify): Take decomposed arguments of CALL_EXPR.\n\n\t* builtins.c (fold_builtin_classify): Take decomposed\n\targuments of CALL_EXPR.\n\t(fold_builtin_1): Update a call to fold_builtin_classify.\n\nFrom-SVN: r96364", "tree": {"sha": "5243d2a6866867ebde05d9e53476ac786b86eeaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5243d2a6866867ebde05d9e53476ac786b86eeaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cb08bab242cda0413a68140b5752309500d8b57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cb08bab242cda0413a68140b5752309500d8b57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cb08bab242cda0413a68140b5752309500d8b57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cb08bab242cda0413a68140b5752309500d8b57/comments", "author": null, "committer": null, "parents": [{"sha": "67c2939d3e5c4e7835e3e58d3700cfa65a4e03ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67c2939d3e5c4e7835e3e58d3700cfa65a4e03ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67c2939d3e5c4e7835e3e58d3700cfa65a4e03ed"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "0ea234e0afd9218440402c3a9b5f14336436e211", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb08bab242cda0413a68140b5752309500d8b57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb08bab242cda0413a68140b5752309500d8b57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5cb08bab242cda0413a68140b5752309500d8b57", "patch": "@@ -1,3 +1,9 @@\n+2005-03-13  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* builtins.c (fold_builtin_classify): Take decomposed\n+\targuments of CALL_EXPR.\n+\t(fold_builtin_1): Update a call to fold_builtin_classify.\n+\n 2005-03-13  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR c/20402"}, {"sha": "b8b8c455bc2449ba976cb5cc20ec5cadd265d4e3", "filename": "gcc/builtins.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb08bab242cda0413a68140b5752309500d8b57/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb08bab242cda0413a68140b5752309500d8b57/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=5cb08bab242cda0413a68140b5752309500d8b57", "patch": "@@ -7750,10 +7750,8 @@ fold_builtin_abs (tree arglist, tree type)\n    EXP is the CALL_EXPR for the call.  */\n \n static tree\n-fold_builtin_classify (tree exp, int builtin_index)\n+fold_builtin_classify (tree fndecl, tree arglist, int builtin_index)\n {\n-  tree fndecl = get_callee_fndecl (exp);\n-  tree arglist = TREE_OPERAND (exp, 1);\n   tree type = TREE_TYPE (TREE_TYPE (fndecl));\n   tree arg;\n   REAL_VALUE_TYPE r;\n@@ -8264,17 +8262,17 @@ fold_builtin_1 (tree exp, bool ignore)\n     case BUILT_IN_FINITE:\n     case BUILT_IN_FINITEF:\n     case BUILT_IN_FINITEL:\n-      return fold_builtin_classify (exp, BUILT_IN_FINITE);\n+      return fold_builtin_classify (fndecl, arglist, BUILT_IN_FINITE);\n \n     case BUILT_IN_ISINF:\n     case BUILT_IN_ISINFF:\n     case BUILT_IN_ISINFL:\n-      return fold_builtin_classify (exp, BUILT_IN_ISINF);\n+      return fold_builtin_classify (fndecl, arglist, BUILT_IN_ISINF);\n \n     case BUILT_IN_ISNAN:\n     case BUILT_IN_ISNANF:\n     case BUILT_IN_ISNANL:\n-      return fold_builtin_classify (exp, BUILT_IN_ISNAN);\n+      return fold_builtin_classify (fndecl, arglist, BUILT_IN_ISNAN);\n \n     case BUILT_IN_ISGREATER:\n       return fold_builtin_unordered_cmp (fndecl, arglist, UNLE_EXPR, LE_EXPR);"}]}