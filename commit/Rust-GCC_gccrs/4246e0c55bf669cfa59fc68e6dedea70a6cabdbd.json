{"sha": "4246e0c55bf669cfa59fc68e6dedea70a6cabdbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI0NmUwYzU1YmY2NjljZmE1OWZjNjhlNmRlZGVhNzBhNmNhYmRiZA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-12-16T17:18:18Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-12-16T17:18:18Z"}, "message": "mn10300.c (expand_epilogue): Restore registers in the \"ret\" instruction instead of a separate movm instruction.\n\n        * mn10300/mn10300.c (expand_epilogue): Restore registers in the\n        \"ret\" instruction instead of a separate movm instruction.\n        Support possible stack deallocation in \"ret\" instruction too.\n        * mn10300.md (return_internal): Use \"ret\" instead of \"rets\";\n        restore registers and deallocate stack as needed.\n        (load_movm): Delete unused pattern.\n\n        * mn10300/mn10300.h (SMALL_REGISTER_CLASSES): Define.\n\nFrom-SVN: r13311", "tree": {"sha": "5f578485e890367f61cfca81233f4b89af535401", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f578485e890367f61cfca81233f4b89af535401"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4246e0c55bf669cfa59fc68e6dedea70a6cabdbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4246e0c55bf669cfa59fc68e6dedea70a6cabdbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4246e0c55bf669cfa59fc68e6dedea70a6cabdbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4246e0c55bf669cfa59fc68e6dedea70a6cabdbd/comments", "author": null, "committer": null, "parents": [{"sha": "58d1a58230888a6aa073bd0de2e102b9028575bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58d1a58230888a6aa073bd0de2e102b9028575bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58d1a58230888a6aa073bd0de2e102b9028575bf"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "19f57c0a6328e8517028fd49f93588c62d7dc31b", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4246e0c55bf669cfa59fc68e6dedea70a6cabdbd/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4246e0c55bf669cfa59fc68e6dedea70a6cabdbd/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=4246e0c55bf669cfa59fc68e6dedea70a6cabdbd", "patch": "@@ -244,17 +244,18 @@ expand_epilogue ()\n \t\t\t     frame_pointer_rtx,\n \t\t\t     GEN_INT (-20)));\n       emit_move_insn (stack_pointer_rtx, frame_pointer_rtx);\n+      size = 0;\n+    }\n+  else if (size > 255)\n+    {\n+      emit_insn (gen_addsi3 (stack_pointer_rtx,\n+\t\t\t     stack_pointer_rtx,\n+\t\t\t     GEN_INT (size)));\n+      size = 0;\n     }\n-  else if (size)\n-    emit_insn (gen_addsi3 (stack_pointer_rtx,\n-\t\t\t   stack_pointer_rtx,\n-\t\t\t   GEN_INT (size)));\n-\n-  /* And restore the registers.  */\n-  emit_insn (gen_load_movm ());\n \n-  /* And return.  */\n-  emit_jump_insn (gen_return_internal ());\n+  /* Deallocate remaining stack, restore registers and return.  And return.  */\n+  emit_jump_insn (gen_return_internal (GEN_INT (size)));\n }\n \n /* Update the condition code from the insn.  */"}, {"sha": "d4bce39ad5a45617246cf033dad938f4cbaf99c3", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4246e0c55bf669cfa59fc68e6dedea70a6cabdbd/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4246e0c55bf669cfa59fc68e6dedea70a6cabdbd/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=4246e0c55bf669cfa59fc68e6dedea70a6cabdbd", "patch": "@@ -177,6 +177,9 @@ extern int target_flags;\n #define MODES_TIEABLE_P(MODE1, MODE2) \\\n   (MODE1 == MODE2 || GET_MODE_SIZE (MODE1) <= 4 && GET_MODE_SIZE (MODE2) <= 4)\n \n+/* 4 data, and effectively 3 address registers is small as far as I'm\n+   concerned.  */\n+#define SMALL_REGISTER_CLASSES 1\n \f\n /* Define the classes of registers for register constraints in the\n    machine description.  Also define ranges of constants."}, {"sha": "443ee999c19e33536d0da9ed212ff3cad56b65ca", "filename": "gcc/config/mn10300/mn10300.md", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4246e0c55bf669cfa59fc68e6dedea70a6cabdbd/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4246e0c55bf669cfa59fc68e6dedea70a6cabdbd/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.md?ref=4246e0c55bf669cfa59fc68e6dedea70a6cabdbd", "patch": "@@ -655,21 +655,18 @@\n   \"rets\"\n   [(set_attr \"cc\" \"clobber\")])\n \n+;; This insn restores the callee saved registers and does a return, it\n+;; can also deallocate stack space.\n (define_insn \"return_internal\"\n   [(const_int 0)\n+   (match_operand:SI 0  \"const_int_operand\" \"i\")\n    (return)]\n   \"\"\n-  \"rets\"\n+  \"ret [d2,d3,a2,a3],%0\"\n   [(set_attr \"cc\" \"clobber\")])\n \n (define_insn \"store_movm\"\n   [(const_int 1)]\n   \"\"\n   \"movm [d2,d3,a2,a3],(sp)\"\n   [(set_attr \"cc\" \"none\")])\n-\n-(define_insn \"load_movm\"\n-  [(const_int 2)]\n-  \"\"\n-  \"movm (sp),[d2,d3,a2,a3]\"\n-  [(set_attr \"cc\" \"none\")])"}]}