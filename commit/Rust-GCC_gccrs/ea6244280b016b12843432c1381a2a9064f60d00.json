{"sha": "ea6244280b016b12843432c1381a2a9064f60d00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE2MjQ0MjgwYjAxNmIxMjg0MzQzMmMxMzgxYTJhOTA2NGY2MGQwMA==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2007-01-27T16:34:32Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2007-01-27T16:34:32Z"}, "message": "* gnu/classpath/jdwp/natVMVirtualMachine.cc\n        (getAllClassMethods): Move error handling to ...\n        (throw_jvmti_error): ... here.\n        (jdwpClassPrepareCB): New function.\n        (jdwpThreadEndCB): New function.\n        (jdwpThreadStartCB): New function.\n        (jdwpVMDeathCB): New function.\n        (jdwpVMInitCB): Define and enable callbacks for\n        ClassPrepare, ThreadEnd, ThreadStart, and VMDeath.\n\nFrom-SVN: r121233", "tree": {"sha": "2551b9d83c81be4bbd40c4ac824bff75b75668be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2551b9d83c81be4bbd40c4ac824bff75b75668be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea6244280b016b12843432c1381a2a9064f60d00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea6244280b016b12843432c1381a2a9064f60d00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea6244280b016b12843432c1381a2a9064f60d00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea6244280b016b12843432c1381a2a9064f60d00/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9eab67850ba2faf07c1bb3e4f12b4754003066cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eab67850ba2faf07c1bb3e4f12b4754003066cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eab67850ba2faf07c1bb3e4f12b4754003066cc"}], "stats": {"total": 124, "additions": 110, "deletions": 14}, "files": [{"sha": "4e6e238684ebbf075761043aa6b56edf246c1900", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6244280b016b12843432c1381a2a9064f60d00/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6244280b016b12843432c1381a2a9064f60d00/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ea6244280b016b12843432c1381a2a9064f60d00", "patch": "@@ -1,3 +1,15 @@\n+2007-01-27  Keith Seitz  <keiths@redhat.com>\n+\n+\t* gnu/classpath/jdwp/natVMVirtualMachine.cc\n+\t(getAllClassMethods): Move error handling to ...\n+\t(throw_jvmti_error): ... here.\n+\t(jdwpClassPrepareCB): New function.\n+\t(jdwpThreadEndCB): New function.\n+\t(jdwpThreadStartCB): New function.\n+\t(jdwpVMDeathCB): New function.\n+\t(jdwpVMInitCB): Define and enable callbacks for\n+\tClassPrepare, ThreadEnd, ThreadStart, and VMDeath.\n+\n 2007-01-27  Jakub Jelinek  <jakub@redhat.com>\n \n \t* Makefile.am (generic_header_files): Add $(inner_nat_headers)."}, {"sha": "1e0806652c5d084e5548e155dddb2ae7cba120b2", "filename": "libjava/gnu/classpath/jdwp/natVMVirtualMachine.cc", "status": "modified", "additions": 98, "deletions": 14, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea6244280b016b12843432c1381a2a9064f60d00/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea6244280b016b12843432c1381a2a9064f60d00/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc?ref=ea6244280b016b12843432c1381a2a9064f60d00", "patch": "@@ -28,7 +28,11 @@ details. */\n #include <gnu/classpath/jdwp/VMFrame.h>\n #include <gnu/classpath/jdwp/VMMethod.h>\n #include <gnu/classpath/jdwp/VMVirtualMachine.h>\n+#include <gnu/classpath/jdwp/event/ClassPrepareEvent.h>\n #include <gnu/classpath/jdwp/event/EventRequest.h>\n+#include <gnu/classpath/jdwp/event/ThreadEndEvent.h>\n+#include <gnu/classpath/jdwp/event/ThreadStartEvent.h>\n+#include <gnu/classpath/jdwp/event/VmDeathEvent.h>\n #include <gnu/classpath/jdwp/event/VmInitEvent.h>\n #include <gnu/classpath/jdwp/exception/InvalidMethodException.h>\n #include <gnu/classpath/jdwp/exception/JdwpInternalErrorException.h>\n@@ -39,7 +43,12 @@ using namespace gnu::classpath::jdwp::event;\n using namespace gnu::classpath::jdwp::util;\n \n // Forward declarations\n+static void JNICALL jdwpClassPrepareCB (jvmtiEnv *, JNIEnv *, jthread, jclass);\n+static void JNICALL jdwpThreadEndCB (jvmtiEnv *, JNIEnv *, jthread);\n+static void JNICALL jdwpThreadStartCB (jvmtiEnv *, JNIEnv *, jthread);\n+static void JNICALL jdwpVMDeathCB (jvmtiEnv *, JNIEnv *);\n static void JNICALL jdwpVMInitCB (jvmtiEnv *, JNIEnv *, jthread);\n+static void throw_jvmti_error (jvmtiError);\n \n #define DEFINE_CALLBACK(Cb,Event) Cb.Event = jdwp ## Event ## CB\n #define ENABLE_EVENT(Event,Thread)\t\t\t\t\t\\\n@@ -313,20 +322,7 @@ getAllClassMethods (jclass klass)\n   jmethodID *methods;\n   jvmtiError err = _jdwp_jvmtiEnv->GetClassMethods (klass, &count, &methods);\n   if (err != JVMTI_ERROR_NONE)\n-    {\n-      char *error;\n-      jstring msg;\n-      if (_jdwp_jvmtiEnv->GetErrorName (err, &error) != JVMTI_ERROR_NONE)\n-\t{\n-\t  msg = JvNewStringLatin1 (error);\n-\t  _jdwp_jvmtiEnv->Deallocate ((unsigned char *) error);\n-\t}\n-      else\n-\tmsg = JvNewStringLatin1 (\"out of memory\");\n-\n-      using namespace gnu::classpath::jdwp::exception;\n-      throw new JdwpInternalErrorException (msg);\n-    }\n+    throw_jvmti_error (err);\n \n   JArray<VMMethod *> *result\n     = (JArray<VMMethod *> *) JvNewObjectArray (count,\n@@ -407,10 +403,98 @@ getSourceFile (MAYBE_UNUSED jclass clazz)\n   return NULL;\n }\n \n+static void\n+throw_jvmti_error (jvmtiError err)\n+{\n+  char *error;\n+  jstring msg;\n+  if (_jdwp_jvmtiEnv->GetErrorName (err, &error) == JVMTI_ERROR_NONE)\n+    {\n+      msg = JvNewStringLatin1 (error);\n+      _jdwp_jvmtiEnv->Deallocate ((unsigned char *) error);\n+    }\n+  else\n+    msg = JvNewStringLatin1 (\"out of memory\");\n+\n+  using namespace gnu::classpath::jdwp::exception;\n+  throw new JdwpInternalErrorException (msg);\n+}\n+\n+static void JNICALL\n+jdwpClassPrepareCB (jvmtiEnv *env, MAYBE_UNUSED JNIEnv *jni_env,\n+\t\t    jthread thread, jclass klass)\n+{\n+  using namespace gnu::classpath::jdwp;\n+\n+  Thread *t = reinterpret_cast<Thread *> (thread);\n+  jint flags = 0;\n+  jvmtiError err = env->GetClassStatus (klass, &flags);\n+  if (err != JVMTI_ERROR_NONE)\n+    throw_jvmti_error (err);\n+\n+  using namespace gnu::classpath::jdwp::event;\n+  jint status = 0;\n+  if (flags & JVMTI_CLASS_STATUS_VERIFIED)\n+    status |= ClassPrepareEvent::STATUS_VERIFIED;\n+  if (flags & JVMTI_CLASS_STATUS_PREPARED)\n+    status |= ClassPrepareEvent::STATUS_PREPARED;\n+  if (flags & JVMTI_CLASS_STATUS_ERROR)\n+    status |= ClassPrepareEvent::STATUS_ERROR;\n+  if (flags & JVMTI_CLASS_STATUS_INITIALIZED)\n+    status |= ClassPrepareEvent::STATUS_INITIALIZED;\n+\n+  event::ClassPrepareEvent *event\n+    = new event::ClassPrepareEvent (t, klass, status);\n+  Jdwp::notify (event);\n+}\n+\n+static void JNICALL\n+jdwpThreadEndCB (MAYBE_UNUSED jvmtiEnv *env, MAYBE_UNUSED JNIEnv *jni_env,\n+\t\t jthread thread)\n+{\n+  using namespace gnu::classpath::jdwp::event;\n+\n+  Thread *t = reinterpret_cast<Thread *> (thread);\n+  ThreadEndEvent *e = new ThreadEndEvent (t);\n+  gnu::classpath::jdwp::Jdwp::notify (e);\n+}\n+\n+static void JNICALL\n+jdwpThreadStartCB (MAYBE_UNUSED jvmtiEnv *env, MAYBE_UNUSED JNIEnv *jni_env,\n+\t\t   jthread thread)\n+{\n+  using namespace gnu::classpath::jdwp::event;\n+\n+  Thread *t = reinterpret_cast<Thread *> (thread);\n+  ThreadStartEvent *e = new ThreadStartEvent (t);\n+  gnu::classpath::jdwp::Jdwp::notify (e);\n+}\n+\n+static void JNICALL\n+jdwpVMDeathCB (MAYBE_UNUSED jvmtiEnv *env, MAYBE_UNUSED JNIEnv *jni_env)\n+{\n+  using namespace gnu::classpath::jdwp::event;\n+  gnu::classpath::jdwp::Jdwp::notify (new VmDeathEvent ());\n+}\n+\n static void JNICALL\n jdwpVMInitCB (MAYBE_UNUSED jvmtiEnv *env, MAYBE_UNUSED JNIEnv *jni_env,\n \t      jthread thread)\n {\n+  // The VM is now initialized, add our callbacks\n+  jvmtiEventCallbacks callbacks;\n+  DEFINE_CALLBACK (callbacks, ClassPrepare);\n+  DEFINE_CALLBACK (callbacks, ThreadEnd);\n+  DEFINE_CALLBACK (callbacks, ThreadStart);\n+  DEFINE_CALLBACK (callbacks, VMDeath);\n+  _jdwp_jvmtiEnv->SetEventCallbacks (&callbacks, sizeof (callbacks));\n+\n+  // Enable callbacks\n+  ENABLE_EVENT (CLASS_PREPARE, NULL);\n+  ENABLE_EVENT (THREAD_END, NULL);\n+  ENABLE_EVENT (THREAD_START, NULL);\n+  ENABLE_EVENT (VM_DEATH, NULL);\n+\n   // Send JDWP VMInit\n   using namespace gnu::classpath::jdwp::event;\n   Thread *init_thread = reinterpret_cast<Thread *> (thread);"}]}