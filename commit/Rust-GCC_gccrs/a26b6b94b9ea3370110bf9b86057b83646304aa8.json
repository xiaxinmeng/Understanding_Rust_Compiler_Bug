{"sha": "a26b6b94b9ea3370110bf9b86057b83646304aa8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI2YjZiOTRiOWVhMzM3MDExMGJmOWI4NjA1N2I4MzY0NjMwNGFhOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-04-25T10:59:21Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-04-25T10:59:21Z"}, "message": "re PR libstdc++/21035 (Documentation for std::basic_string::compare() incorrect)\n\n2005-04-25  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/21035\n\t* include/bits/basic_string.h (compare): Adjust the documentation\n\tto match the implementation and the standard.\n\nFrom-SVN: r98708", "tree": {"sha": "b621a0880903682f541af13ad56a858612014e48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b621a0880903682f541af13ad56a858612014e48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a26b6b94b9ea3370110bf9b86057b83646304aa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a26b6b94b9ea3370110bf9b86057b83646304aa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a26b6b94b9ea3370110bf9b86057b83646304aa8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a26b6b94b9ea3370110bf9b86057b83646304aa8/comments", "author": null, "committer": null, "parents": [{"sha": "9469878ca1988a9d9a7266efc221639eace96f61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9469878ca1988a9d9a7266efc221639eace96f61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9469878ca1988a9d9a7266efc221639eace96f61"}], "stats": {"total": 64, "additions": 42, "deletions": 22}, "files": [{"sha": "e150ad73f9423aebd3f3397955c35171bf0724d2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26b6b94b9ea3370110bf9b86057b83646304aa8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26b6b94b9ea3370110bf9b86057b83646304aa8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a26b6b94b9ea3370110bf9b86057b83646304aa8", "patch": "@@ -1,3 +1,9 @@\n+2005-04-25  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/21035\n+\t* include/bits/basic_string.h (compare): Adjust the documentation\n+\tto match the implementation and the standard.\n+\n 2005-04-24  Paolo Carlini  <pcarlini@suse.de>\n \n \t* docs/html/ext/lwg-active.html, lwg-defects.html: Import Revision 35."}, {"sha": "d257956a9aed57ca1e30314ab763a58a8c44283f", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 36, "deletions": 22, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26b6b94b9ea3370110bf9b86057b83646304aa8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26b6b94b9ea3370110bf9b86057b83646304aa8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=a26b6b94b9ea3370110bf9b86057b83646304aa8", "patch": "@@ -1905,9 +1905,11 @@ namespace std\n        *\n        *  Returns an integer < 0 if this string is ordered before @a str, 0 if\n        *  their values are equivalent, or > 0 if this string is ordered after\n-       *  @a str.  If the lengths of @a str and this string are different, the\n-       *  shorter one is ordered first.  If they are the same, returns the\n-       *  result of traits::compare(data(),str.data(),size());\n+       *  @a str.  Determines the effective length rlen of the strings to\n+       *  compare as the smallest of size() and str.size().  The function\n+       *  then compares the two strings by calling traits::compare(data(),\n+       *  str.data(),rlen).  If the result of the comparison is nonzero returns\n+       *  it, otherwise the shorter one is ordered first.\n       */\n       int\n       compare(const basic_string& __str) const\n@@ -1932,10 +1934,12 @@ namespace std\n        *  Form the substring of this string from the @a n characters starting\n        *  at @a pos.  Returns an integer < 0 if the substring is ordered\n        *  before @a str, 0 if their values are equivalent, or > 0 if the\n-       *  substring is ordered after @a str.  If the lengths @a of str and the\n-       *  substring are different, the shorter one is ordered first.  If they\n-       *  are the same, returns the result of\n-       *  traits::compare(substring.data(),str.data(),size());\n+       *  substring is ordered after @a str.  Determines the effective length\n+       *  rlen of the strings to compare as the smallest of the length of the\n+       *  substring and @a str.size().  The function then compares the two\n+       *  strings by calling traits::compare(substring.data(),str.data(),rlen).\n+       *  If the result of the comparison is nonzero returns it, otherwise the\n+       *  shorter one is ordered first.\n       */\n       int\n       compare(size_type __pos, size_type __n, const basic_string& __str) const;\n@@ -1954,10 +1958,12 @@ namespace std\n        *  starting at @a pos2.  Returns an integer < 0 if this substring is\n        *  ordered before the substring of @a str, 0 if their values are\n        *  equivalent, or > 0 if this substring is ordered after the substring\n-       *  of @a str.  If the lengths of the substring of @a str and this\n-       *  substring are different, the shorter one is ordered first.  If they\n-       *  are the same, returns the result of\n-       *  traits::compare(substring.data(),str.substr(pos2,n2).data(),size());\n+       *  of @a str.  Determines the effective length rlen of the strings\n+       *  to compare as the smallest of the lengths of the substrings.  The\n+       *  function then compares the two strings by calling\n+       *  traits::compare(substring.data(),str.substr(pos2,n2).data(),rlen).\n+       *  If the result of the comparison is nonzero returns it, otherwise the\n+       *  shorter one is ordered first.\n       */\n       int\n       compare(size_type __pos1, size_type __n1, const basic_string& __str,\n@@ -1970,9 +1976,12 @@ namespace std\n        *\n        *  Returns an integer < 0 if this string is ordered before @a s, 0 if\n        *  their values are equivalent, or > 0 if this string is ordered after\n-       *  @a s.  If the lengths of @a s and this string are different, the\n-       *  shorter one is ordered first.  If they are the same, returns the\n-       *  result of traits::compare(data(),s,size());\n+       *  @a s.  Determines the effective length rlen of the strings to\n+       *  compare as the smallest of size() and the length of a string\n+       *  constructed from @a s.  The function then compares the two strings\n+       *  by calling traits::compare(data(),s,rlen).  If the result of the\n+       *  comparison is nonzero returns it, otherwise the shorter one is\n+       *  ordered first.\n       */\n       int\n       compare(const _CharT* __s) const;\n@@ -1989,10 +1998,13 @@ namespace std\n        *  Form the substring of this string from the @a n1 characters starting\n        *  at @a pos.  Returns an integer < 0 if the substring is ordered\n        *  before @a s, 0 if their values are equivalent, or > 0 if the\n-       *  substring is ordered after @a s.  If the lengths of @a s and the\n-       *  substring are different, the shorter one is ordered first.  If they\n-       *  are the same, returns the result of\n-       *  traits::compare(substring.data(),s,size());\n+       *  substring is ordered after @a s.  Determines the effective length\n+       *  rlen of the strings to compare as the smallest of the length of the \n+       *  substring and the length of a string constructed from @a s.  The\n+       *  function then compares the two string by calling\n+       *  traits::compare(substring.data(),s,rlen).  If the result of the\n+       *  comparison is nonzero returns it, otherwise the shorter one is\n+       *  ordered first.\n       */\n       int\n       compare(size_type __pos, size_type __n1, const _CharT* __s) const;\n@@ -2009,10 +2021,12 @@ namespace std\n        *  at @a pos1.  Form a string from the first @a n2 characters of @a s.\n        *  Returns an integer < 0 if this substring is ordered before the string\n        *  from @a s, 0 if their values are equivalent, or > 0 if this substring\n-       *  is ordered after the string from @a s. If the lengths of this\n-       *  substring and @a n2 are different, the shorter one is ordered first.\n-       *  If they are the same, returns the result of\n-       *  traits::compare(substring.data(),s,size());\n+       *  is ordered after the string from @a s.   Determines the effective\n+       *  length rlen of the strings to compare as the smallest of the length\n+       *  of the substring and @a n2.  The function then compares the two\n+       *  strings by calling traits::compare(substring.data(),s,rlen).  If the\n+       *  result of the comparison is nonzero returns it, otherwise the shorter\n+       *  one is ordered first.\n        *\n        *  NB: s must have at least n2 characters, '\\0' has no special\n        *  meaning."}]}