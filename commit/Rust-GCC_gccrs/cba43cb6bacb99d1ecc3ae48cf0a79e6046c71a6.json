{"sha": "cba43cb6bacb99d1ecc3ae48cf0a79e6046c71a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JhNDNjYjZiYWNiOTlkMWVjYzNhZTQ4Y2YwYTc5ZTYwNDZjNzFhNg==", "commit": {"author": {"name": "Volker Reichelt", "email": "reichelt@igpm.rwth-aachen.de", "date": "2006-01-20T21:08:48Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2006-01-20T21:08:48Z"}, "message": "parser.c (cp_lexer_next_token_is_keyword): Simplify.\n\n\t* parser.c (cp_lexer_next_token_is_keyword): Simplify.\n\n\t* parser.c (clear_decl_specs): Remove prototype.\n\n\t* parser.c (cp_parser_expression_fn): Remove.\n\nFrom-SVN: r110039", "tree": {"sha": "63bbfa9e2da95f818aed51ddbe173a2d992ec244", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63bbfa9e2da95f818aed51ddbe173a2d992ec244"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cba43cb6bacb99d1ecc3ae48cf0a79e6046c71a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cba43cb6bacb99d1ecc3ae48cf0a79e6046c71a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cba43cb6bacb99d1ecc3ae48cf0a79e6046c71a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cba43cb6bacb99d1ecc3ae48cf0a79e6046c71a6/comments", "author": null, "committer": null, "parents": [{"sha": "2b6dd222bbb82a052974fa931473702700ecfda9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b6dd222bbb82a052974fa931473702700ecfda9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b6dd222bbb82a052974fa931473702700ecfda9"}], "stats": {"total": 19, "additions": 7, "deletions": 12}, "files": [{"sha": "42c69e8d7b925c7453d56fae986d01d1864de733", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba43cb6bacb99d1ecc3ae48cf0a79e6046c71a6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba43cb6bacb99d1ecc3ae48cf0a79e6046c71a6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cba43cb6bacb99d1ecc3ae48cf0a79e6046c71a6", "patch": "@@ -1,5 +1,11 @@\n 2006-01-20  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n+\t* parser.c (cp_lexer_next_token_is_keyword): Simplify.\n+\n+\t* parser.c (clear_decl_specs): Remove prototype.\n+\n+\t* parser.c (cp_parser_expression_fn): Remove.\n+\n \t* call.c (add_builtin_candidates): Remove superfluous return.\n \t* name-lookup.c (do_toplevel_using_decl): Likewise.\n \t* parser.c (cp_parser_type_specifier_seq): Likewise."}, {"sha": "148eb1d14b3a941a311c96ba25b36d6e65d8f822", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba43cb6bacb99d1ecc3ae48cf0a79e6046c71a6/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba43cb6bacb99d1ecc3ae48cf0a79e6046c71a6/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=cba43cb6bacb99d1ecc3ae48cf0a79e6046c71a6", "patch": "@@ -497,12 +497,7 @@ cp_lexer_next_token_is_not (cp_lexer* lexer, enum cpp_ttype type)\n static inline bool\n cp_lexer_next_token_is_keyword (cp_lexer* lexer, enum rid keyword)\n {\n-  cp_token *token;\n-\n-  /* Peek at the next token.  */\n-  token = cp_lexer_peek_token (lexer);\n-  /* Check to see if it is the indicated keyword.  */\n-  return token->keyword == keyword;\n+  return cp_lexer_peek_token (lexer)->keyword == keyword;\n }\n \n /* Return a pointer to the Nth token in the token stream.  If N is 1,\n@@ -757,9 +752,6 @@ cp_token_cache_new (cp_token *first, cp_token *last)\n \f\n /* Decl-specifiers.  */\n \n-static void clear_decl_specs\n-  (cp_decl_specifier_seq *);\n-\n /* Set *DECL_SPECS to represent an empty decl-specifier-seq.  */\n \n static void\n@@ -1352,9 +1344,6 @@ typedef struct cp_parser GTY(())\n   unsigned num_template_parameter_lists;\n } cp_parser;\n \n-/* The type of a function that parses some kind of expression.  */\n-typedef tree (*cp_parser_expression_fn) (cp_parser *);\n-\n /* Prototypes.  */\n \n /* Constructors and destructors.  */"}]}