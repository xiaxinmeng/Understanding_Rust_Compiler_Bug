{"sha": "ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJkYjczYzBiMDk1MDUwOWVhYjZhNWZhN2YwZjViMzYwYzZlNWNjYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2018-10-29T22:57:39Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2018-10-29T22:57:39Z"}, "message": "decl.c (create_array_type_for_decl): Add location_t parameter and use it.\n\n/cp\n2018-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (create_array_type_for_decl): Add location_t parameter\n\tand use it.\n\t(grokdeclarator): Adjust call.\n\n/testsuite\n2018-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/cpp0x/auto24.C: Test location too.\n\t* g++.dg/cpp0x/auto3.C: Likewise.\n\t* g++.dg/cpp0x/auto42.C: Likewise.\n\t* g++.dg/cpp0x/initlist57.C: Likewise.\n\t* g++.dg/cpp0x/initlist75.C: Likewise.\n\t* g++.dg/cpp0x/initlist80.C: Likewise.\n\t* g++.dg/cpp0x/lambda/lambda-ice13.C: Likewise.\n\t* g++.old-deja/g++.brendan/array-refs.C: Likewise.\n\t* g++.old-deja/g++.bugs/900322_01.C: Likewise.\n\t* g++.old-deja/g++.bugs/900519_07.C: Likewise.\n\t* g++.old-deja/g++.other/typeck1.C: Likewise.\n\nFrom-SVN: r265608", "tree": {"sha": "bf48e3d4f8d3136e880e1cf660a7d68dbe911aac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf48e3d4f8d3136e880e1cf660a7d68dbe911aac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/comments", "author": null, "committer": null, "parents": [{"sha": "64ac3c33ba88dd3b248ff7c07709a2d28e9b1dfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64ac3c33ba88dd3b248ff7c07709a2d28e9b1dfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64ac3c33ba88dd3b248ff7c07709a2d28e9b1dfe"}], "stats": {"total": 92, "additions": 58, "deletions": 34}, "files": [{"sha": "b1e7f2320437511e62ba2f900c2d0021131723a2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca", "patch": "@@ -1,3 +1,9 @@\n+2018-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (create_array_type_for_decl): Add location_t parameter\n+\tand use it.\n+\t(grokdeclarator): Adjust call.\n+\n 2018-10-29  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/87594 - constexpr rejects-valid with range-based for."}, {"sha": "00e75f0bc7909ffa6f23d58d83ce8219e024f314", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca", "patch": "@@ -88,7 +88,7 @@ static void finish_constructor_body (void);\n static void begin_destructor_body (void);\n static void finish_destructor_body (void);\n static void record_key_method_defined (tree);\n-static tree create_array_type_for_decl (tree, tree, tree);\n+static tree create_array_type_for_decl (tree, tree, tree, location_t);\n static tree get_atexit_node (void);\n static tree get_dso_handle_node (void);\n static tree start_cleanup_fn (void);\n@@ -9835,7 +9835,7 @@ get_scope_of_declarator (const cp_declarator *declarator)\n    with this type.  */\n \n static tree\n-create_array_type_for_decl (tree name, tree type, tree size)\n+create_array_type_for_decl (tree name, tree type, tree size, location_t loc)\n {\n   tree itype = NULL_TREE;\n \n@@ -9848,9 +9848,9 @@ create_array_type_for_decl (tree name, tree type, tree size)\n   if (type_uses_auto (type))\n     {\n       if (name)\n-   error (\"%qD declared as array of %qT\", name, type);\n+\terror_at (loc, \"%qD declared as array of %qT\", name, type);\n       else\n-   error (\"creating array of %qT\", type);\n+\terror (\"creating array of %qT\", type);\n       return error_mark_node;\n     }\n \n@@ -9860,28 +9860,29 @@ create_array_type_for_decl (tree name, tree type, tree size)\n     {\n     case VOID_TYPE:\n       if (name)\n-        error (\"declaration of %qD as array of void\", name);\n+\terror_at (loc, \"declaration of %qD as array of void\", name);\n       else\n         error (\"creating array of void\");\n       return error_mark_node;\n \n     case FUNCTION_TYPE:\n       if (name)\n-        error (\"declaration of %qD as array of functions\", name);\n+\terror_at (loc, \"declaration of %qD as array of functions\", name);\n       else\n         error (\"creating array of functions\");\n       return error_mark_node;\n \n     case REFERENCE_TYPE:\n       if (name)\n-        error (\"declaration of %qD as array of references\", name);\n+\terror_at (loc, \"declaration of %qD as array of references\", name);\n       else\n         error (\"creating array of references\");\n       return error_mark_node;\n \n     case METHOD_TYPE:\n       if (name)\n-        error (\"declaration of %qD as array of function members\", name);\n+\terror_at (loc, \"declaration of %qD as array of function members\",\n+\t\t  name);\n       else\n         error (\"creating array of function members\");\n       return error_mark_node;\n@@ -9897,9 +9898,9 @@ create_array_type_for_decl (tree name, tree type, tree size)\n   if (TREE_CODE (type) == ARRAY_TYPE && !TYPE_DOMAIN (type))\n     {\n       if (name)\n-\terror (\"declaration of %qD as multidimensional array must \"\n-\t       \"have bounds for all dimensions except the first\",\n-\t       name);\n+\terror_at (loc, \"declaration of %qD as multidimensional array must \"\n+\t\t  \"have bounds for all dimensions except the first\",\n+\t\t  name);\n       else\n \terror (\"multidimensional array must have bounds for all \"\n \t       \"dimensions except the first\");\n@@ -11164,7 +11165,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t{\n \tcase cdk_array:\n \t  type = create_array_type_for_decl (dname, type,\n-\t\t\t\t\t     declarator->u.array.bounds);\n+\t\t\t\t\t     declarator->u.array.bounds,\n+\t\t\t\t\t     declarator->id_loc);\n \t  if (!valid_array_size_p (input_location, type, dname))\n \t    type = error_mark_node;\n "}, {"sha": "85e910f2097c1c9ea21a56c677b25df874aba6b2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca", "patch": "@@ -1,3 +1,17 @@\n+2018-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/cpp0x/auto24.C: Test location too.\n+\t* g++.dg/cpp0x/auto3.C: Likewise.\n+\t* g++.dg/cpp0x/auto42.C: Likewise.\n+\t* g++.dg/cpp0x/initlist57.C: Likewise.\n+\t* g++.dg/cpp0x/initlist75.C: Likewise.\n+\t* g++.dg/cpp0x/initlist80.C: Likewise.\n+\t* g++.dg/cpp0x/lambda/lambda-ice13.C: Likewise.\n+\t* g++.old-deja/g++.brendan/array-refs.C: Likewise.\n+\t* g++.old-deja/g++.bugs/900322_01.C: Likewise.\n+\t* g++.old-deja/g++.bugs/900519_07.C: Likewise.\n+\t* g++.old-deja/g++.other/typeck1.C: Likewise.\n+\n 2018-10-29  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \tPR middle-end/87469"}, {"sha": "193f92e977a75f1dbad9beb58f682a5c7d4c52d0", "filename": "gcc/testsuite/g++.dg/cpp0x/auto24.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto24.C?ref=ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca", "patch": "@@ -2,4 +2,4 @@\n // { dg-do compile { target c++11 } }\n \n int v[1];\n-auto (*p)[1] = &v;\t\t// { dg-error \"array of .auto\" }\n+auto (*p)[1] = &v;\t\t// { dg-error \"8:.p. declared as array of .auto\" }"}, {"sha": "709898db39db962c23cf2f3a80454e619bcb2a32", "filename": "gcc/testsuite/g++.dg/cpp0x/auto3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto3.C?ref=ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca", "patch": "@@ -10,7 +10,7 @@ auto x;\t\t\t\t// { dg-error \"auto\" }\n auto i = 42, j = 42.0;\t\t// { dg-error \"auto\" }\n \n // New CWG issue\n-auto a[2] = { 1, 2 };\t\t// { dg-error \"auto|initializer_list\" }\n+auto a[2] = { 1, 2 };\t\t// { dg-error \"6:.a. declared as array of .auto\" }\n \n template<class T>\n struct A { };"}, {"sha": "8d15fc96f09595d257e1e3a9023ad7b6901a2670", "filename": "gcc/testsuite/g++.dg/cpp0x/auto42.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto42.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto42.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto42.C?ref=ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca", "patch": "@@ -5,5 +5,5 @@\n \n void foo(int i)\n {\n-  auto x[1] = { 0 };\t\t// { dg-error \"array of .auto\" }\n+  auto x[1] = { 0 };\t\t// { dg-error \"8:.x. declared as array of .auto\" }\n }"}, {"sha": "6f662ef03b6679e46b0ec651d4b9b4497166f6af", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist57.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist57.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist57.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist57.C?ref=ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca", "patch": "@@ -1,7 +1,7 @@\n // PR c++/50054\n // { dg-do compile { target c++11 } }\n \n-void g( const int& (a)[1] ) {}\t// { dg-error \"array of references\" }\n+void g( const int& (a)[1] ) {}\t// { dg-error \"21:declaration of .a. as array of references\" }\n \n int main () {\n     g( { 1, 2 } );\t\t// { dg-error \"initializer list\" }"}, {"sha": "9a45087c5e45aa19990108c232034ffc3eaf92c6", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist75.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist75.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist75.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist75.C?ref=ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca", "patch": "@@ -3,4 +3,4 @@\n \n #include <initializer_list>\n \n-auto foo[] = {};    // { dg-error \"auto|unable to deduce\" }\n+auto foo[] = {};    // { dg-error \"6:.foo. declared as array of .auto\" }"}, {"sha": "15723be16f8bd689fec6f5bdfe9cb6aad341c691", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist80.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist80.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist80.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist80.C?ref=ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca", "patch": "@@ -3,4 +3,4 @@\n \n #include <initializer_list>\n \n-auto x[2] = {};\t\t\t// { dg-error \"\" }\n+auto x[2] = {};\t\t\t// { dg-error \"6:.x. declared as array of .auto\" }"}, {"sha": "cbac7e85112d83c8c5145f1dca3134bde4d3adc9", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-ice13.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice13.C?ref=ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca", "patch": "@@ -10,5 +10,6 @@ void f()\n void g()\n {\n   typedef void (X) ();\n-  X x[] = { [x](){} };  // { dg-error \"array of functions|not declared\" }\n+  X x[] = { [x](){} };  // { dg-error \"5:declaration of .x. as array of functions\" }\n+  // { dg-error \"not declared\" \"\" { target *-*-* } .-1 }\n }"}, {"sha": "e50e9eb7af6753b0ae810dcb47c4eaeb7c7997c4", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/array-refs.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Farray-refs.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Farray-refs.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Farray-refs.C?ref=ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca", "patch": "@@ -3,4 +3,4 @@\n int a, b;\n \n // declaring an array of references should be illegal\n-int & v[ 2] = { a, b};// { dg-error \"\" } .*\n+int & v[ 2] = { a, b};  // { dg-error \"7:declaration of .v. as array of references\" }"}, {"sha": "e0c4a29c473709c996d09ce15a44d443862d5194", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900322_01.C", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900322_01.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900322_01.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900322_01.C?ref=ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca", "patch": "@@ -33,24 +33,25 @@\n \n // keywords: incomplete types, arrays, element types\n \n-extern int extern_two_d [] [];\t\t// { dg-error \"\" } invalid declaration\n-int tenative_two_d [] [];\t\t// { dg-error \"\" } caught by g++\n-static int static_two_d [] [];\t\t// { dg-error \"\" } caught by g++\n+extern int extern_two_d [] [];\t\t// { dg-error \"12:declaration of .extern_two_d. as multidimensional\" } invalid declaration\n+int tenative_two_d [] [];\t\t// { dg-error \"5:declaration of .tenative_two_d. as multidimensional\" } caught by g++\n+static int static_two_d [] [];\t\t// { dg-error \"12:declaration of .static_two_d. as multidimensional\" } caught by g++\n \n-int (*pointer_to_two_d)[][];\t\t// { dg-error \"\" } invalid declaration\n+int (*pointer_to_two_d)[][];\t\t// { dg-error \"7:declaration of .pointer_to_two_d. as multidimensional\" } invalid declaration\n \n-void function_0 (int arg [] []) {\t// { dg-error \"\" } invalid declaration\n+void function_0 (int arg [] []) {\t// { dg-error \"22:declaration of .arg. as multidimensional\" } invalid declaration\n }\n \n typedef int int_one_d_type [];\n-typedef int_one_d_type int_two_d_type[];// { dg-error \"\" } invalid declaration\n+typedef int_one_d_type int_two_d_type[];// { dg-error \"24:declaration of .int_two_d_type. as multidimensional\" } invalid declaration\n \n struct s;\n \n extern struct s extern_s_array [10];\t// OK\n-struct s tenative_s_array [10];\t\t// { dg-error \"\" } object with incomplete type\n-static struct s static_s_array [10];\t// { dg-error \"\" } object with incomplete type\n-\n+struct s tenative_s_array [10];\t\t// { dg-error \"10:elements of array .s tenative_s_array \\\\\\[10\\\\\\]. have incomplete type\" } object with incomplete type\n+// { dg-error \"10:storage size\" \"\" { target *-*-* } .-1 }\n+static struct s static_s_array [10];\t// { dg-error \"17:elements of array .s static_s_array \\\\\\[10\\\\\\]. have incomplete type\" } object with incomplete type\n+// { dg-error \"17:storage size\" \"\" { target *-*-* } .-1 }\n struct s (*pointer_to_s_array) [];\t// OK\n \n void function_1 (struct s arg []) {\t// OK"}, {"sha": "10e7abd38ec94f9979c5b64b82f2bf7a13bdc3c8", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900519_07.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900519_07.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900519_07.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900519_07.C?ref=ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca", "patch": "@@ -11,7 +11,7 @@ int i;\n int j;\n \n typedef int& int_ref;\n-typedef int_ref int_ref_array_type[2];\t\t// { dg-error \"\" } missed\n+typedef int_ref int_ref_array_type[2];\t\t// { dg-error \"17:declaration of .int_ref_array_type. as array of references\" } missed\n \n-int& int_ref_array_obj0[2] = { i, j };\t\t// { dg-error \"\" } missed\n-int_ref int_ref_array_obj1[2] = { i, j };\t// { dg-error \"\" } missed\n+int& int_ref_array_obj0[2] = { i, j };\t\t// { dg-error \"6:declaration of .int_ref_array_obj0. as array of references\" } missed\n+int_ref int_ref_array_obj1[2] = { i, j };\t// { dg-error \"9:declaration of .int_ref_array_obj1. as array of references\" } missed"}, {"sha": "d520667b63df2595126f82cc0e1d1d756ac601f7", "filename": "gcc/testsuite/g++.old-deja/g++.other/typeck1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypeck1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypeck1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypeck1.C?ref=ebdb73c0b0950509eab6a5fa7f0f5b360c6e5cca", "patch": "@@ -1,7 +1,7 @@\n // { dg-do assemble  }\n \n-extern int a[][];   // { dg-error \"\" } invalid multidimensional array\n-extern int b[7][];  // { dg-error \"\" } invalid multidimensional array\n+extern int a[][];   // { dg-error \"12:declaration of .a. as multidimensional array\" } invalid multidimensional array\n+extern int b[7][];  // { dg-error \"12:declaration of .b. as multidimensional array\" } invalid multidimensional array\n extern int c[][7];  // OK\n \n extern int (*i)[];  // { dg-message \"\" } previous declaration"}]}