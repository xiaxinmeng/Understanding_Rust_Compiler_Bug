{"sha": "1ca3916f5688863f49976febd57b1a9640d1c71a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNhMzkxNmY1Njg4ODYzZjQ5OTc2ZmViZDU3YjFhOTY0MGQxYzcxYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-10-26T19:31:16Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-10-26T19:31:16Z"}, "message": "build_string comments\n\nFrom-SVN: r180537", "tree": {"sha": "21ade8d4825d9024836e5cce7f12ddde0032b6c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21ade8d4825d9024836e5cce7f12ddde0032b6c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ca3916f5688863f49976febd57b1a9640d1c71a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ca3916f5688863f49976febd57b1a9640d1c71a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ca3916f5688863f49976febd57b1a9640d1c71a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ca3916f5688863f49976febd57b1a9640d1c71a/comments", "author": null, "committer": null, "parents": [{"sha": "3ce4f9e4d2643273f11647e97b2c7796a64a73dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ce4f9e4d2643273f11647e97b2c7796a64a73dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ce4f9e4d2643273f11647e97b2c7796a64a73dd"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "7b220abd4b8c5070931758028ac5ba2609bb5116", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ca3916f5688863f49976febd57b1a9640d1c71a/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ca3916f5688863f49976febd57b1a9640d1c71a/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=1ca3916f5688863f49976febd57b1a9640d1c71a", "patch": "@@ -344,6 +344,8 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags,\n \t  {\n \t    tree suffix_id = get_identifier (suffix);\n \t    int len = tok->val.str.len - strlen (suffix);\n+\t    /* If this is going to be used as a C string to pass to a\n+\t       raw literal operator, we need to add a trailing NUL.  */\n \t    tree num_string = build_string (len + 1,\n \t\t\t\t\t    (const char *) tok->val.str.text);\n \t    TREE_TYPE (num_string) = char_array_type_node;"}, {"sha": "860556c21a941c97d08b2532bffda66f440d0ed5", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ca3916f5688863f49976febd57b1a9640d1c71a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ca3916f5688863f49976febd57b1a9640d1c71a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1ca3916f5688863f49976febd57b1a9640d1c71a", "patch": "@@ -8592,7 +8592,7 @@ grokdeclarator (const cp_declarator *declarator,\n       error (\"declaration of %qD as non-function\", dname);\n       return error_mark_node;\n     }\n- \n+\n   if (dname\n       && TREE_CODE (dname) == IDENTIFIER_NODE\n       && UDLIT_OPER_P (dname)"}, {"sha": "090482cbd14495859672699c42c4310a16d3f150", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ca3916f5688863f49976febd57b1a9640d1c71a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ca3916f5688863f49976febd57b1a9640d1c71a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=1ca3916f5688863f49976febd57b1a9640d1c71a", "patch": "@@ -3667,6 +3667,7 @@ cp_parser_userdef_numeric_literal (cp_parser *parser)\n /* Parse a user-defined string constant.  Returns a call to a user-defined\n    literal operator taking a character pointer and the length of the string\n    as arguments.  */\n+\n static tree\n cp_parser_userdef_string_literal (cp_token *token)\n {"}, {"sha": "2cbd68b5fd9b3c03e8e8b638823c6551a372d21a", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ca3916f5688863f49976febd57b1a9640d1c71a/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ca3916f5688863f49976febd57b1a9640d1c71a/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=1ca3916f5688863f49976febd57b1a9640d1c71a", "patch": "@@ -1525,6 +1525,7 @@ build_real_from_int_cst (tree type, const_tree i)\n \n /* Return a newly constructed STRING_CST node whose value is\n    the LEN characters at STR.\n+   Note that for a C string literal, LEN should include the trailing NUL.\n    The TREE_TYPE is not initialized.  */\n \n tree"}]}