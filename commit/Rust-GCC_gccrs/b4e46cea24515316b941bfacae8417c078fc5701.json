{"sha": "b4e46cea24515316b941bfacae8417c078fc5701", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRlNDZjZWEyNDUxNTMxNmI5NDFiZmFjYWU4NDE3YzA3OGZjNTcwMQ==", "commit": {"author": {"name": "Per Bothner", "email": "pbothner@apple.com", "date": "2003-03-20T16:46:18Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2003-03-20T16:46:18Z"}, "message": "Various cleanups to help compile server.\n\n\t* cppinit.c (cpp_create_reader):  Take extra hash_table* argument,\n\tand pass that to _cpp_init_hashtable.\n\t(cpp_read_main_file):  Drop hash_table* argument; don't call\n\t_cpp_init_hashtable.\n\t* cpplib.h:  Update declarations to match.\n\t* c-opts.c (c_common_init_options):  Pass ident_hash to\n\tcpp_create_reader.\n\t(c_common_post_options):  Don't pass ident_hash to cpp_read_main_file.\n\t* fix-header.c (read_scan_file):  Likewise pass NULL table to\n\tcpp_create_reader rather than cpp_read_main_file.\n\n\t* cppfiles.c (cpp_rename_file):  Generalized and renamed\n\tto cpp_change_file.\n\t* cpplib.h:  Update declaration to match.\n\t* c-opts.c (push_command_line_line, finish_options):  Change\n\tcpp_rename_file calls to cpp_change_file.\n\nFrom-SVN: r64617", "tree": {"sha": "cff696dfa377a0cf3e735f28e287645b12baeba7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cff696dfa377a0cf3e735f28e287645b12baeba7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4e46cea24515316b941bfacae8417c078fc5701", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e46cea24515316b941bfacae8417c078fc5701", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4e46cea24515316b941bfacae8417c078fc5701", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e46cea24515316b941bfacae8417c078fc5701/comments", "author": null, "committer": null, "parents": [{"sha": "8826ff0fcd12a506e2e91df9e4cae05747b88f13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8826ff0fcd12a506e2e91df9e4cae05747b88f13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8826ff0fcd12a506e2e91df9e4cae05747b88f13"}], "stats": {"total": 81, "additions": 49, "deletions": 32}, "files": [{"sha": "b79f2bd6b54389a10aa14e73b45f69571cf41962", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e46cea24515316b941bfacae8417c078fc5701/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e46cea24515316b941bfacae8417c078fc5701/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4e46cea24515316b941bfacae8417c078fc5701", "patch": "@@ -2,6 +2,23 @@\n \n \tVarious cleanups to help compile server.\n \n+\t* cppinit.c (cpp_create_reader):  Take extra hash_table* argument,\n+\tand pass that to _cpp_init_hashtable.\n+\t(cpp_read_main_file):  Drop hash_table* argument; don't call\n+\t_cpp_init_hashtable.\n+\t* cpplib.h:  Update declarations to match.\n+\t* c-opts.c (c_common_init_options):  Pass ident_hash to\n+\tcpp_create_reader.\n+\t(c_common_post_options):  Don't pass ident_hash to cpp_read_main_file.\n+\t* fix-header.c (read_scan_file):  Likewise pass NULL table to\n+\tcpp_create_reader rather than cpp_read_main_file.\n+\n+\t* cppfiles.c (cpp_rename_file):  Generalized and renamed\n+\tto cpp_change_file.\n+\t* cpplib.h:  Update declaration to match.\n+\t* c-opts.c (push_command_line_line, finish_options):  Change\n+\tcpp_rename_file calls to cpp_change_file.\n+\t\n \t* line-map.c (add_line_map):  Allow leaving the outermost file.\n \tAllowing entering an outermost-file after the initial time. \n "}, {"sha": "5de5019499b713775f64005d58fe4083f7f61a9e", "filename": "gcc/c-opts.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e46cea24515316b941bfacae8417c078fc5701/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e46cea24515316b941bfacae8417c078fc5701/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=b4e46cea24515316b941bfacae8417c078fc5701", "patch": "@@ -587,7 +587,8 @@ c_common_init_options (lang)\n #endif\n \n   c_language = lang;\n-  parse_in = cpp_create_reader (lang == clk_c ? CLK_GNUC89 : CLK_GNUCXX);\n+  parse_in = cpp_create_reader (lang == clk_c ? CLK_GNUC89 : CLK_GNUCXX,\n+\t\t\t\tident_hash);\n   cpp_opts = cpp_get_options (parse_in);\n   if (flag_objc)\n     cpp_opts->objc = 1;\n@@ -1569,7 +1570,7 @@ c_common_post_options (pfilename)\n   cpp_get_callbacks (parse_in)->file_change = cb_file_change;\n \n   /* NOTE: we use in_fname here, not the one supplied.  */\n-  *pfilename = cpp_read_main_file (parse_in, in_fname, ident_hash);\n+  *pfilename = cpp_read_main_file (parse_in, in_fname);\n \n   saved_lineno = lineno;\n   lineno = 0;\n@@ -1784,10 +1785,10 @@ finish_options ()\n     {\n       size_t i;\n \n-      cpp_rename_file (parse_in, _(\"<built-in>\"));\n+      cpp_change_file (parse_in, LC_RENAME, _(\"<built-in>\"));\n       cpp_init_builtins (parse_in);\n       c_cpp_builtins (parse_in);\n-      cpp_rename_file (parse_in, _(\"<command line>\"));\n+      cpp_change_file (parse_in, LC_RENAME, _(\"<command line>\"));\n       for (i = 0; i < deferred_count; i++)\n \t{\n \t  struct deferred_opt *opt = &deferred_opts[i];\n@@ -1837,7 +1838,7 @@ push_command_line_include ()\n   if (include_cursor == deferred_count)\n     {\n       /* Restore the line map from <command line>.  */\n-      cpp_rename_file (parse_in, main_input_filename);\n+      cpp_change_file (parse_in, LC_RENAME, main_input_filename);\n       /* -Wunused-macros should only warn about macros defined hereafter.  */\n       cpp_opts->warn_unused_macros = warn_unused_macros;\n       include_cursor++;"}, {"sha": "1ff34ff00846831f8ae736fcc266b44cfe3d4b60", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e46cea24515316b941bfacae8417c078fc5701/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e46cea24515316b941bfacae8417c078fc5701/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=b4e46cea24515316b941bfacae8417c078fc5701", "patch": "@@ -756,14 +756,16 @@ cpp_make_system_header (pfile, syshdr, externc)\n \t\t       SOURCE_LINE (pfile->map, pfile->line), flags);\n }\n \n-/* Allow the client to rename the current file.  Used by the front end\n-   to achieve pseudo-file names like <built-in>.  */\n+/* Allow the client to change the current file.  Used by the front end\n+   to achieve pseudo-file names like <built-in>.\n+   If REASON is LC_LEAVE, then NEW_NAME must be NULL.  */\n void\n-cpp_rename_file (pfile, new_name)\n+cpp_change_file (pfile, reason, new_name)\n      cpp_reader *pfile;\n+     enum lc_reason reason;\n      const char *new_name;\n {\n-  _cpp_do_file_change (pfile, LC_RENAME, new_name, 1, 0);\n+  _cpp_do_file_change (pfile, reason, new_name, 1, 0);\n }\n \n /* Report on all files that might benefit from a multiple include guard."}, {"sha": "376d72e9e588ad3fe8d3d62eabf0a4ac41c2f0fa", "filename": "gcc/cppinit.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e46cea24515316b941bfacae8417c078fc5701/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e46cea24515316b941bfacae8417c078fc5701/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=b4e46cea24515316b941bfacae8417c078fc5701", "patch": "@@ -132,8 +132,9 @@ init_library ()\n \n /* Initialize a cpp_reader structure.  */\n cpp_reader *\n-cpp_create_reader (lang)\n+cpp_create_reader (lang, table)\n      enum c_lang lang;\n+     hash_table *table;\n {\n   cpp_reader *pfile;\n \n@@ -199,6 +200,8 @@ cpp_create_reader (lang)\n \n   _cpp_init_includes (pfile);\n \n+  _cpp_init_hashtable (pfile, table);\n+\n   return pfile;\n }\n \n@@ -429,20 +432,14 @@ cpp_add_dependency_target (pfile, target, quote)\n    or stdin if it is the empty string.  Return the original filename\n    on success (e.g. foo.i->foo.c), or NULL on failure.  */\n const char *\n-cpp_read_main_file (pfile, fname, table)\n+cpp_read_main_file (pfile, fname)\n      cpp_reader *pfile;\n      const char *fname;\n-     hash_table *table;\n {\n   sanity_checks (pfile);\n \n   post_options (pfile);\n \n-  /* The front ends don't set up the hash table until they have\n-     finished processing the command line options, so initializing the\n-     hashtable is deferred until now.  */\n-  _cpp_init_hashtable (pfile, table);\n-\n   /* Mark named operators before handling command line macros.  */\n   if (CPP_OPTION (pfile, cplusplus) && CPP_OPTION (pfile, operator_names))\n     mark_named_operators (pfile);"}, {"sha": "ec5f8e47c1e62476afe9580c094550663c184ee0", "filename": "gcc/cpplib.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e46cea24515316b941bfacae8417c078fc5701/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e46cea24515316b941bfacae8417c078fc5701/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=b4e46cea24515316b941bfacae8417c078fc5701", "patch": "@@ -485,8 +485,13 @@ struct cpp_hashnode GTY(())\n   } GTY ((desc (\"0\"))) value;\n };\n \n-/* Call this first to get a handle to pass to other functions.  */\n-extern cpp_reader *cpp_create_reader PARAMS ((enum c_lang));\n+/* Call this first to get a handle to pass to other functions.\n+\n+   If you want cpplib to manage its own hashtable, pass in a NULL\n+   pointer.  Otherwise you should pass in an initialized hash table\n+   that cpplib will share; this technique is used by the C front\n+   ends.  */\n+extern cpp_reader *cpp_create_reader PARAMS ((enum c_lang, struct ht *));\n \n /* Call this to change the selected language standard (e.g. because of\n    command line options).  */\n@@ -518,14 +523,8 @@ extern void cpp_set_callbacks PARAMS ((cpp_reader *, cpp_callbacks *));\n    returns the name of the original file; this is the same as the\n    input file, except for preprocessed input.  This will generate at\n    least one file change callback, and possibly a line change callback\n-   too.  If there was an error opening the file, it returns NULL.\n-\n-   If you want cpplib to manage its own hashtable, pass in a NULL\n-   pointer.  Otherwise you should pass in an initialized hash table\n-   that cpplib will share; this technique is used by the C front\n-   ends.  */\n-extern const char *cpp_read_main_file PARAMS ((cpp_reader *, const char *,\n-\t\t\t\t\t       struct ht *));\n+   too.  If there was an error opening the file, it returns NULL.  */\n+extern const char *cpp_read_main_file PARAMS ((cpp_reader *, const char *));\n \n /* Set up built-ins like __FILE__.  */\n extern void cpp_init_builtins PARAMS ((cpp_reader *));\n@@ -708,7 +707,8 @@ extern int cpp_included\tPARAMS ((cpp_reader *, const char *));\n extern void cpp_make_system_header PARAMS ((cpp_reader *, int, int));\n extern void cpp_simplify_path PARAMS ((char *));\n extern bool cpp_push_include PARAMS ((cpp_reader *, const char *));\n-extern void cpp_rename_file PARAMS ((cpp_reader *, const char *));\n+extern void cpp_change_file PARAMS ((cpp_reader *, enum lc_reason,\n+\t\t\t\t     const char *));\n \n /* In cpppch.c */\n struct save_macro_data;"}, {"sha": "423cd57fb8fe6d7552db068ca0310a7998f094e4", "filename": "gcc/fix-header.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e46cea24515316b941bfacae8417c078fc5701/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e46cea24515316b941bfacae8417c078fc5701/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=b4e46cea24515316b941bfacae8417c078fc5701", "patch": "@@ -622,7 +622,7 @@ read_scan_file (in_fname, argc, argv)\n \n   obstack_init (&scan_file_obstack);\n \n-  scan_in = cpp_create_reader (CLK_GNUC89);\n+  scan_in = cpp_create_reader (CLK_GNUC89, NULL);\n   cb = cpp_get_callbacks (scan_in);\n   cb->file_change = cb_file_change;\n \n@@ -632,7 +632,7 @@ read_scan_file (in_fname, argc, argv)\n   options->inhibit_warnings = 1;\n   options->inhibit_errors = 1;\n \n-  if (! cpp_read_main_file (scan_in, in_fname, NULL))\n+  if (! cpp_read_main_file (scan_in, in_fname))\n     exit (FATAL_EXIT_CODE);\n \n   for (i = 0; i < argc; i += strings_processed)\n@@ -675,9 +675,9 @@ read_scan_file (in_fname, argc, argv)\n \t\t\t   true /* stdinc */, false /* cxx_stdinc */,\n \t\t\t   false /* verbose */);\n \n-  cpp_rename_file (scan_in, \"<built-in>\");\n+  cpp_change_file (scan_in, LC_RENAME, \"<built-in>\");\n   cpp_init_builtins (scan_in);\n-  cpp_rename_file (scan_in, in_fname);\n+  cpp_change_file (scan_in, LC_RENAME, in_fname);\n \n   /* We are scanning a system header, so mark it as such.  */\n   cpp_make_system_header (scan_in, 1, 0);"}]}