{"sha": "34d5fe774e8dfff32156ba77aedd20060045955d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRkNWZlNzc0ZThkZmZmMzIxNTZiYTc3YWVkZDIwMDYwMDQ1OTU1ZA==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2016-05-31T15:49:13Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2016-05-31T15:49:13Z"}, "message": "Remove SH5 target regs.\n\ngcc/\n\t* config/sh/constraints.md (b): Remove constraint.\n\t* config/sh/predicates.md (arith_reg_operand): Remove TARGET_REGISTER_P.\n\t* config/sh/sh-modes.def (PDI): Remove.\n\t* config/sh/sh.c (sh_target_reg_class,\n\tsh_optimize_target_register_callee_saved): Remove functions.\n\t(sh_option_override): Don't set MASK_SAVE_ALL_TARGET_REGS.\n\t(sh_expand_epilogue): Update comment.\n\t(sh_hard_regno_mode_ok, sh_register_move_cost, calc_live_regs,\n\tsh_secondary_reload): Remove TARGET_REGS related code.\n\t* config/sh/sh.h (FIRST_TARGET_REG, LAST_TARGET_REG,\n\tTARGET_REGISTER_P): Remove macros.\n\t(SH_DBX_REGISTER_NUMBER, REG_ALLOC_ORDER): Remove target regs.\n\t* config/sh/sh.md (PR_MEDIA_REG, T_MEDIA_REG, FR23_REG, TR0_REG,\n\tTR1_REG, TR2_REG): Remove constants.\n\t* config/sh/sh.opt (SAVE_ALL_TARGET_REGS): Remove.\n\nFrom-SVN: r236928", "tree": {"sha": "353c7069791ad89f0b51cef22585569936b0efad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/353c7069791ad89f0b51cef22585569936b0efad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34d5fe774e8dfff32156ba77aedd20060045955d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34d5fe774e8dfff32156ba77aedd20060045955d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34d5fe774e8dfff32156ba77aedd20060045955d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34d5fe774e8dfff32156ba77aedd20060045955d/comments", "author": null, "committer": null, "parents": [{"sha": "a1443cff0d845ddcb1d114f0864e29c89e37f260", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1443cff0d845ddcb1d114f0864e29c89e37f260", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1443cff0d845ddcb1d114f0864e29c89e37f260"}], "stats": {"total": 118, "additions": 19, "deletions": 99}, "files": [{"sha": "abb536a385a736176e96f9282e418fce0a852707", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d5fe774e8dfff32156ba77aedd20060045955d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d5fe774e8dfff32156ba77aedd20060045955d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34d5fe774e8dfff32156ba77aedd20060045955d", "patch": "@@ -1,3 +1,21 @@\n+2016-05-31  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/sh/constraints.md (b): Remove constraint.\n+\t* config/sh/predicates.md (arith_reg_operand): Remove TARGET_REGISTER_P.\n+\t* config/sh/sh-modes.def (PDI): Remove.\n+\t* config/sh/sh.c (sh_target_reg_class,\n+\tsh_optimize_target_register_callee_saved): Remove functions.\n+\t(sh_option_override): Don't set MASK_SAVE_ALL_TARGET_REGS.\n+\t(sh_expand_epilogue): Update comment.\n+\t(sh_hard_regno_mode_ok, sh_register_move_cost, calc_live_regs,\n+\tsh_secondary_reload): Remove TARGET_REGS related code.\n+\t* config/sh/sh.h (FIRST_TARGET_REG, LAST_TARGET_REG,\n+\tTARGET_REGISTER_P): Remove macros.\n+\t(SH_DBX_REGISTER_NUMBER, REG_ALLOC_ORDER): Remove target regs.\n+\t* config/sh/sh.md (PR_MEDIA_REG, T_MEDIA_REG, FR23_REG, TR0_REG,\n+\tTR1_REG, TR2_REG): Remove constants.\n+\t* config/sh/sh.opt (SAVE_ALL_TARGET_REGS): Remove.\n+\n 2016-05-31  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* config/sh/sh.md (adddi3, subdi3, negdi2, abs<mode>2): Remove"}, {"sha": "c3e9d551e960e7edf3fd38abfb091f785df91b1a", "filename": "gcc/config/sh/constraints.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d5fe774e8dfff32156ba77aedd20060045955d/gcc%2Fconfig%2Fsh%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d5fe774e8dfff32156ba77aedd20060045955d/gcc%2Fconfig%2Fsh%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fconstraints.md?ref=34d5fe774e8dfff32156ba77aedd20060045955d", "patch": "@@ -62,9 +62,6 @@\n (define_register_constraint \"a\" \"ALL_REGS\"\n   \"@internal\")\n \n-(define_register_constraint \"b\" \"TARGET_REGS\"\n-  \"Branch target registers.\")\n-\n (define_register_constraint \"c\" \"FPSCR_REGS\"\n   \"Floating-point status register.\")\n "}, {"sha": "4b93c6dd1c0a061675df21dd7fe67de1f224de79", "filename": "gcc/config/sh/predicates.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d5fe774e8dfff32156ba77aedd20060045955d/gcc%2Fconfig%2Fsh%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d5fe774e8dfff32156ba77aedd20060045955d/gcc%2Fconfig%2Fsh%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fpredicates.md?ref=34d5fe774e8dfff32156ba77aedd20060045955d", "patch": "@@ -34,7 +34,6 @@\n \treturn 1;\n \n       return (regno != T_REG && regno != PR_REG\n-\t      && ! TARGET_REGISTER_P (regno)\n \t      && regno != FPUL_REG && regno != FPSCR_REG\n \t      && regno != MACH_REG && regno != MACL_REG);\n     }"}, {"sha": "6db9943c08eac4df4053ed9b796c2c25111b8f53", "filename": "gcc/config/sh/sh-modes.def", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d5fe774e8dfff32156ba77aedd20060045955d/gcc%2Fconfig%2Fsh%2Fsh-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d5fe774e8dfff32156ba77aedd20060045955d/gcc%2Fconfig%2Fsh%2Fsh-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-modes.def?ref=34d5fe774e8dfff32156ba77aedd20060045955d", "patch": "@@ -17,9 +17,6 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-/* PDI mode is used to represent a function address in a target register.  */\n-PARTIAL_INT_MODE (DI, 64, PDI);\n-\n /* Vector modes.  */\n VECTOR_MODE  (INT, QI, 2);    /*                 V2QI */\n VECTOR_MODES (INT, 4);        /*            V4QI V2HI */"}, {"sha": "2bd917a09401ed44911b06f8cc2576b86dd488e2", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 63, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d5fe774e8dfff32156ba77aedd20060045955d/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d5fe774e8dfff32156ba77aedd20060045955d/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=34d5fe774e8dfff32156ba77aedd20060045955d", "patch": "@@ -234,8 +234,6 @@ static int sh_variable_issue (FILE *, int, rtx_insn *, int);\n static bool sh_function_ok_for_sibcall (tree, tree);\n \n static bool sh_can_follow_jump (const rtx_insn *, const rtx_insn *);\n-static reg_class_t sh_target_reg_class (void);\n-static bool sh_optimize_target_register_callee_saved (bool);\n static bool sh_ms_bitfield_layout_p (const_tree);\n \n static void sh_init_builtins (void);\n@@ -465,11 +463,6 @@ static const struct attribute_spec sh_attribute_table[] =\n \n #undef TARGET_CAN_FOLLOW_JUMP\n #define TARGET_CAN_FOLLOW_JUMP sh_can_follow_jump\n-#undef TARGET_BRANCH_TARGET_REGISTER_CLASS\n-#define TARGET_BRANCH_TARGET_REGISTER_CLASS sh_target_reg_class\n-#undef TARGET_BRANCH_TARGET_REGISTER_CALLEE_SAVED\n-#define TARGET_BRANCH_TARGET_REGISTER_CALLEE_SAVED \\\n-  sh_optimize_target_register_callee_saved\n \n #undef TARGET_MS_BITFIELD_LAYOUT_P\n #define TARGET_MS_BITFIELD_LAYOUT_P sh_ms_bitfield_layout_p\n@@ -800,8 +793,6 @@ sh_option_override (void)\n   int regno;\n \n   SUBTARGET_OVERRIDE_OPTIONS;\n-  if (optimize > 1 && !optimize_size)\n-    target_flags |= MASK_SAVE_ALL_TARGET_REGS;\n \n   sh_cpu = PROCESSOR_SH1;\n   assembler_dialect = 0;\n@@ -7037,30 +7028,6 @@ calc_live_regs (HARD_REG_SET *live_regs_mask)\n       if (nosave_low_regs && reg == R8_REG)\n \tbreak;\n     }\n-  /* If we have a target register optimization pass after prologue / epilogue\n-     threading, we need to assume all target registers will be live even if\n-     they aren't now.  */\n-  if (flag_branch_target_load_optimize2 && TARGET_SAVE_ALL_TARGET_REGS)\n-    for (reg = LAST_TARGET_REG; reg >= FIRST_TARGET_REG; reg--)\n-      if ((! call_really_used_regs[reg] || interrupt_handler)\n-\t  && ! TEST_HARD_REG_BIT (*live_regs_mask, reg))\n-\t{\n-\t  SET_HARD_REG_BIT (*live_regs_mask, reg);\n-\t  count += GET_MODE_SIZE (REGISTER_NATURAL_MODE (reg));\n-\t}\n-  /* If this is an interrupt handler, we don't have any call-clobbered\n-     registers we can conveniently use for target register save/restore.\n-     Make sure we save at least one general purpose register when we need\n-     to save target registers.  */\n-  if (interrupt_handler\n-      && hard_reg_set_intersect_p (*live_regs_mask,\n-\t\t\t\t   reg_class_contents[TARGET_REGS])\n-      && ! hard_reg_set_intersect_p (*live_regs_mask,\n-\t\t\t\t     reg_class_contents[GENERAL_REGS]))\n-    {\n-      SET_HARD_REG_BIT (*live_regs_mask, R0_REG);\n-      count += GET_MODE_SIZE (REGISTER_NATURAL_MODE (R0_REG));\n-    }\n \n   return count;\n }\n@@ -7317,9 +7284,6 @@ sh_expand_epilogue (bool sibcall_p)\n     emit_insn (gen_sp_switch_2 ());\n \n   /* Tell flow the insn that pops PR isn't dead.  */\n-  /* PR_REG will never be live in SHmedia mode, and we don't need to\n-     USE PR_MEDIA_REG, since it will be explicitly copied to TR0_REG\n-     by the return pattern.  */\n   if (TEST_HARD_REG_BIT (live_regs_mask, PR_REG))\n     emit_use (gen_rtx_REG (SImode, PR_REG));\n }\n@@ -10014,19 +9978,6 @@ sh_dfa_new_cycle (FILE *sched_dump ATTRIBUTE_UNUSED,\n   return 0;\n }\n \n-static reg_class_t\n-sh_target_reg_class (void)\n-{\n-  return NO_REGS;\n-}\n-\n-static bool\n-sh_optimize_target_register_callee_saved (bool after_prologue_epilogue_gen\n-\t\t\t\t\t  ATTRIBUTE_UNUSED)\n-{\n-  return false;\n-}\n-\n static bool\n sh_ms_bitfield_layout_p (const_tree record_type ATTRIBUTE_UNUSED)\n {\n@@ -10582,9 +10533,6 @@ sh_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n   if (XD_REGISTER_P (regno))\n     return mode == DFmode;\n \n-  if (TARGET_REGISTER_P (regno))\n-    return (mode == DImode || mode == SImode || mode == PDImode);\n-\n   if (regno == PR_REG)\n     return mode == SImode;\n \n@@ -10726,10 +10674,6 @@ sh_register_move_cost (machine_mode mode,\n \t  && (dstclass == PR_REGS || dstclass == MAC_REGS)))\n     return 7;\n \n-  if ((srcclass == TARGET_REGS && ! REGCLASS_HAS_GENERAL_REG (dstclass))\n-      || ((dstclass) == TARGET_REGS && ! REGCLASS_HAS_GENERAL_REG (srcclass)))\n-    return 20;\n-\n   if ((srcclass == FPSCR_REGS && ! REGCLASS_HAS_GENERAL_REG (dstclass))\n       || (dstclass == FPSCR_REGS && ! REGCLASS_HAS_GENERAL_REG (srcclass)))\n   return 4;\n@@ -11324,17 +11268,11 @@ sh_secondary_reload (bool in_p, rtx x, reg_class_t rclass_i,\n \treturn GENERAL_REGS;\n       return NO_REGS;  // LRA wants NO_REGS here, it used to be FPUL_REGS;\n     }\n-  if (rclass == TARGET_REGS\n-      && !satisfies_constraint_Csy (x)\n-      && (!REG_P (x) || ! GENERAL_REGISTER_P (REGNO (x))))\n-    return GENERAL_REGS;\n+\n   if ((rclass == MAC_REGS || rclass == PR_REGS)\n       && REG_P (x) && ! GENERAL_REGISTER_P (REGNO (x))\n       && rclass != REGNO_REG_CLASS (REGNO (x)))\n     return GENERAL_REGS;\n-  if (rclass != GENERAL_REGS && REG_P (x)\n-      && TARGET_REGISTER_P (REGNO (x)))\n-    return GENERAL_REGS;\n \n  /* If here fall back to loading FPUL register through general registers.\n     This case can happen when movsi_ie insn is picked initially to"}, {"sha": "d724bd2221d39f97b24c7f5f7dfa00e393b5b9cc", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d5fe774e8dfff32156ba77aedd20060045955d/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d5fe774e8dfff32156ba77aedd20060045955d/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=34d5fe774e8dfff32156ba77aedd20060045955d", "patch": "@@ -585,8 +585,6 @@ extern char sh_additional_register_names[ADDREGNAMES_SIZE] \\\n #define LAST_FP_REG  (FIRST_FP_REG + (TARGET_SH2E ? 15 : -1))\n #define FIRST_XD_REG XD0_REG\n #define LAST_XD_REG  (FIRST_XD_REG + ((TARGET_SH4 && TARGET_FMOVD) ? 7 : -1))\n-#define FIRST_TARGET_REG TR0_REG\n-#define LAST_TARGET_REG  (FIRST_TARGET_REG + (-1))\n \n /* Registers that can be accessed through bank0 or bank1 depending on sr.md.  */\n #define FIRST_BANKED_REG R0_REG\n@@ -623,9 +621,6 @@ extern char sh_additional_register_names[ADDREGNAMES_SIZE] \\\n    || (REGNO) == MACH_REG || (REGNO) == MACL_REG \\\n    || (REGNO) == FPSCR_MODES_REG || (REGNO) == FPSCR_STAT_REG)\n \n-#define TARGET_REGISTER_P(REGNO) \\\n-  ((int) (REGNO) >= FIRST_TARGET_REG && (int) (REGNO) <= LAST_TARGET_REG)\n-\n #define VALID_REGISTER_P(REGNO) \\\n   (GENERAL_REGISTER_P (REGNO) || FP_REGISTER_P (REGNO) \\\n    || XD_REGISTER_P (REGNO) \\\n@@ -1037,8 +1032,6 @@ extern enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER];\n     44, 45, 46, 47, 48, 49, 50, 51, \\\n     52, 53, 54, 55, 56, 57, 58, 59, \\\n    /* FPUL */ 150, \\\n-   /* SH5 branch target registers */ \\\n-   128,129,130,131,132,133,134,135, \\\n    /* Fixed registers */ \\\n     15, 16, 24, 25, 26, 27, 63,144, \\\n    145,146,147,148,149,152,153,154,155  }\n@@ -1698,13 +1691,6 @@ extern bool current_function_interrupt;\n    register exists, so we should return -1 for invalid register numbers.  */\n #define DBX_REGISTER_NUMBER(REGNO) SH_DBX_REGISTER_NUMBER (REGNO)\n \n-/* SHcompact PR_REG used to use the encoding 241, and SHcompact FP registers\n-   used to use the encodings 245..260, but that doesn't make sense:\n-   PR_REG and PR_MEDIA_REG are actually the same register, and likewise\n-   the FP registers stay the same when switching between compact and media\n-   mode.  Hence, we also need to use the same dwarf frame columns.\n-   Likewise, we need to support unwind information for SHmedia registers\n-   even in compact code.  */\n #define SH_DBX_REGISTER_NUMBER(REGNO) \\\n   (IN_RANGE ((REGNO), \\\n \t     (unsigned HOST_WIDE_INT) FIRST_GENERAL_REG, \\\n@@ -1716,12 +1702,8 @@ extern bool current_function_interrupt;\n    ? ((unsigned) (REGNO) - FIRST_FP_REG + 25) \\\n    : XD_REGISTER_P (REGNO) \\\n    ? ((unsigned) (REGNO) - FIRST_XD_REG + 87) \\\n-   : TARGET_REGISTER_P (REGNO) \\\n-   ? ((unsigned) (REGNO) - FIRST_TARGET_REG + 68) \\\n    : (REGNO) == PR_REG \\\n    ? (17) \\\n-   : (REGNO) == PR_MEDIA_REG \\\n-   ? ((unsigned) -1) \\\n    : (REGNO) == GBR_REG \\\n    ? (18) \\\n    : (REGNO) == MACH_REG \\"}, {"sha": "edc4d1517a54d437e934b98af19bbf2463cbcf7a", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d5fe774e8dfff32156ba77aedd20060045955d/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d5fe774e8dfff32156ba77aedd20060045955d/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=34d5fe774e8dfff32156ba77aedd20060045955d", "patch": "@@ -86,9 +86,6 @@\n   (FP_REG\t14)\n   (SP_REG\t15)\n \n-  (PR_MEDIA_REG\t18)\n-  (T_MEDIA_REG\t19)\n-\n   (R0_REG\t0)\n   (R1_REG\t1)\n   (R2_REG\t2)\n@@ -108,11 +105,6 @@\n   (DR0_REG\t64)\n   (DR2_REG\t66)\n   (DR4_REG\t68)\n-  (FR23_REG\t87)\n-\n-  (TR0_REG\t128)\n-  (TR1_REG\t129)\n-  (TR2_REG\t130)\n \n   (XD0_REG\t136)\n "}, {"sha": "b348ee3678f1c556fd36991e71d2292081250f2e", "filename": "gcc/config/sh/sh.opt", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d5fe774e8dfff32156ba77aedd20060045955d/gcc%2Fconfig%2Fsh%2Fsh.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d5fe774e8dfff32156ba77aedd20060045955d/gcc%2Fconfig%2Fsh%2Fsh.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.opt?ref=34d5fe774e8dfff32156ba77aedd20060045955d", "patch": "@@ -37,9 +37,6 @@ Mask(HARD_SH2A_DOUBLE)\n ;; Set if compiling for SH4 hardware (to be used for insn costs etc.)\n Mask(HARD_SH4)\n \n-;; Set if we should save all target registers.\n-Mask(SAVE_ALL_TARGET_REGS)\n-\n m1\n Target RejectNegative Mask(SH1) Condition(SUPPORT_SH1)\n Generate SH1 code."}]}