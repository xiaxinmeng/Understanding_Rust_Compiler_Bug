{"sha": "807633e5a30bbc6229c7cd46c2b69ab52eb45b6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA3NjMzZTVhMzBiYmM2MjI5YzdjZDQ2YzJiNjlhYjUyZWI0NWI2Yw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2002-01-23T17:30:28Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-01-23T17:30:28Z"}, "message": "fragments.texi, [...]: Update to reflect current (lack of) need for host configuration by hand.\n\n\t* doc/fragments.texi, doc/hostconfig.texi: Update to reflect\n\tcurrent (lack of) need for host configuration by hand.\n\n\t* doc/gccint.texi, doc/rtl.texi, doc/tm.texi: Adjust cross\n\treferences.  Documentation of some target macros moved from\n\thostconfig.texi to tm.texi.\n\nFrom-SVN: r49142", "tree": {"sha": "7260e4af7d19d8a44d51276ec41dd7cf8472c0c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7260e4af7d19d8a44d51276ec41dd7cf8472c0c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/807633e5a30bbc6229c7cd46c2b69ab52eb45b6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/807633e5a30bbc6229c7cd46c2b69ab52eb45b6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/807633e5a30bbc6229c7cd46c2b69ab52eb45b6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/807633e5a30bbc6229c7cd46c2b69ab52eb45b6c/comments", "author": null, "committer": null, "parents": [{"sha": "d419f1cdf05c0a39e4aae74ce32dc546b3d7c8a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d419f1cdf05c0a39e4aae74ce32dc546b3d7c8a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d419f1cdf05c0a39e4aae74ce32dc546b3d7c8a1"}], "stats": {"total": 394, "additions": 168, "deletions": 226}, "files": [{"sha": "b643950bfb158e7b3051bda75bd88ebdf97244df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807633e5a30bbc6229c7cd46c2b69ab52eb45b6c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807633e5a30bbc6229c7cd46c2b69ab52eb45b6c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=807633e5a30bbc6229c7cd46c2b69ab52eb45b6c", "patch": "@@ -1,3 +1,12 @@\n+2002-01-23  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* doc/fragments.texi, doc/hostconfig.texi: Update to reflect\n+\tcurrent (lack of) need for host configuration by hand.\n+\n+\t* doc/gccint.texi, doc/rtl.texi, doc/tm.texi: Adjust cross\n+\treferences.  Documentation of some target macros moved from\n+\thostconfig.texi to tm.texi.\n+\n 2002-01-23  Will Cohen  <wcohen@redhat.com>\n \n \t* config/arm/arm.h (THUMB_FUNCTION_PROFILER): Define if not currently"}, {"sha": "f9ef3d22b82ff7e2fc19fbfa62f91ec59fea9913", "filename": "gcc/doc/fragments.texi", "status": "modified", "additions": 52, "deletions": 21, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807633e5a30bbc6229c7cd46c2b69ab52eb45b6c/gcc%2Fdoc%2Ffragments.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807633e5a30bbc6229c7cd46c2b69ab52eb45b6c/gcc%2Fdoc%2Ffragments.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ffragments.texi?ref=807633e5a30bbc6229c7cd46c2b69ab52eb45b6c", "patch": "@@ -7,26 +7,36 @@\n @chapter Makefile Fragments\n @cindex makefile fragment\n \n-When you configure GCC using the @file{configure} script,\n-it will construct the file @file{Makefile} from\n-the template file @file{Makefile.in}.  When it does this, it will\n-incorporate makefile fragment files from the @file{config} directory,\n-named @file{t-@var{target}} and @file{x-@var{host}}.  If these files do\n-not exist, it means nothing needs to be added for a given target or\n-host.\n+When you configure GCC using the @file{configure} script, it will\n+construct the file @file{Makefile} from the template file\n+@file{Makefile.in}.  When it does this, it can incorporate makefile\n+fragments from the @file{config} directory.  These are used to set\n+Makefile parameters that are not amenable to being calculated by\n+autoconf.  The list of fragments to incorporate is set by\n+@file{config.gcc}; @xref{System Config}.\n+\n+Fragments are named either @file{t-@var{target}} or @file{x-@var{host}},\n+depending on whether they are relevant to configuring GCC to produce\n+code for a particular target, or to configuring GCC to run on a\n+particular host.  Here @var{target} and @var{host} are mnemonics\n+which usually have some relationship to the canonical system name, but\n+no formal connection.\n+\n+If these files do not exist, it means nothing needs to be added for a\n+given target or host.  Most targets need a few @file{t-@var{target}}\n+fragments, but needing @file{x-@var{host}} fragments is rare.\n \n @menu\n-* Target Fragment:: Writing the @file{t-@var{target}} file.\n-* Host Fragment::   Writing the @file{x-@var{host}} file.\n+* Target Fragment:: Writing @file{t-@var{target}} files.\n+* Host Fragment::   Writing @file{x-@var{host}} files.\n @end menu\n \n @node Target Fragment\n-@section The Target Makefile Fragment\n+@section Target Makefile Fragments\n @cindex target makefile fragment\n @cindex @file{t-@var{target}}\n \n-The target makefile fragment, @file{t-@var{target}}, defines special\n-target dependent variables and targets used in the @file{Makefile}:\n+Target makefile fragments can set these Makefile variables.\n \n @table @code\n @findex LIBGCC2_CFLAGS\n@@ -141,19 +151,40 @@ of options to be used for all builds.\n @end table\n \n @node Host Fragment\n-@section The Host Makefile Fragment\n+@section Host Makefile Fragments\n @cindex host makefile fragment\n @cindex @file{x-@var{host}}\n \n-The host makefile fragment, @file{x-@var{host}}, defines special host\n-dependent variables and targets used in the @file{Makefile}:\n+The use of @file{x-@var{host}} fragments is discouraged.  You should do\n+so only if there is no other mechanism to get the behavior desired.\n+Host fragments should never forcibly override variables set by the\n+configure script, as they may have been adjusted by the user.\n+\n+Variables provided for host fragments to set include:\n \n @table @code\n-@findex CC\n-@item CC\n-The compiler to use when building the first stage.\n \n-@findex INSTALL\n-@item INSTALL\n-The install program to use.\n+@item X_CFLAGS\n+@itemx X_CPPFLAGS\n+These are extra flags to pass to the C compiler and preprocessor,\n+respectively.  They are used both when building GCC, and when compiling\n+things with the just-built GCC.\n+\n+@item XCFLAGS\n+These are extra flags to use when building the compiler.  They are not\n+used when compiling @file{libgcc.a}.  However, they @emph{are} used when\n+recompiling the compiler with itself in later stages of a bootstrap.\n+\n+@item BOOT_LDFLAGS\n+Flags to be passed to the linker when recompiling the compiler with\n+itself in later stages of a bootstrap.  You might need to use this if,\n+for instance, one of the front ends needs more text space than the\n+linker provides by default.\n+\n+@item EXTRA_PROGRAMS\n+A list of additional programs required to use the compiler on this host,\n+which should be compiled with GCC and installed alongside the front\n+ends.  If you set this variable, you must also provide rules to build\n+the extra programs.\n+\n @end table"}, {"sha": "82a7d317a40b8293c8fe13e7e28cdfd25d6a547a", "filename": "gcc/doc/gccint.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807633e5a30bbc6229c7cd46c2b69ab52eb45b6c/gcc%2Fdoc%2Fgccint.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807633e5a30bbc6229c7cd46c2b69ab52eb45b6c/gcc%2Fdoc%2Fgccint.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgccint.texi?ref=807633e5a30bbc6229c7cd46c2b69ab52eb45b6c", "patch": "@@ -165,7 +165,7 @@ Additional tutorial information is linked to from\n * RTL::             The intermediate representation that most passes work on.\n * Machine Desc::    How to write machine description instruction patterns.\n * Target Macros::   How to write the machine description C macros and functions.\n-* Config::          Writing the @file{xm-@var{machine}.h} file.\n+* Host Config::     Writing the @file{xm-@var{machine}.h} file.\n * Fragments::       Writing the @file{t-@var{target}} and @file{x-@var{host}} files.\n * Collect2::        How @code{collect2} works; how it finds @code{ld}.\n * Header Dirs::     Understanding the standard header file directories."}, {"sha": "33c0a3bb28bb0f0bdfdda7ab9a96dc06468550ab", "filename": "gcc/doc/hostconfig.texi", "status": "modified", "additions": 75, "deletions": 194, "changes": 269, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807633e5a30bbc6229c7cd46c2b69ab52eb45b6c/gcc%2Fdoc%2Fhostconfig.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807633e5a30bbc6229c7cd46c2b69ab52eb45b6c/gcc%2Fdoc%2Fhostconfig.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fhostconfig.texi?ref=807633e5a30bbc6229c7cd46c2b69ab52eb45b6c", "patch": "@@ -1,228 +1,99 @@\n @c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-@c 1999, 2000, 2001 Free Software Foundation, Inc.\n+@c 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n-@node Config\n-@chapter The Configuration File\n+@node Host Config\n+@chapter Host Configuration Headers\n @cindex configuration file\n @cindex @file{xm-@var{machine}.h}\n \n-The configuration file @file{xm-@var{machine}.h} contains macro\n-definitions that describe the machine and system on which the compiler\n-is running, unlike the definitions in @file{@var{machine}.h}, which\n-describe the machine for which the compiler is producing output.  Most\n-of the values in @file{xm-@var{machine}.h} are actually the same on all\n-machines that GCC runs on, so large parts of all configuration files\n-are identical.  But there are some macros that vary:\n+Host configuration headers contain macro definitions that describe the\n+machine and system on which the compiler is running.  They are usually\n+unnecessary.  Most of the things GCC needs to know about the host\n+system can be deduced by the @command{configure} script.\n \n-@table @code\n-@findex USG\n-@item USG\n-Define this macro if the host system is System V@.\n+If your host does need a special configuration header, it should be\n+named @file{xm-@var{machine}.h}, where @var{machine} is a short mnemonic\n+for the machine.  Here are some macros which this header can define.\n \n-@findex VMS\n+@ftable @code\n @item VMS\n Define this macro if the host system is VMS@.\n \n-@findex FATAL_EXIT_CODE\n @item FATAL_EXIT_CODE\n A C expression for the status code to be returned when the compiler\n exits after serious errors.  The default is the system-provided macro\n @samp{EXIT_FAILURE}, or @samp{1} if the system doesn't define that\n macro.  Define this macro only if these defaults are incorrect.\n \n-@findex SUCCESS_EXIT_CODE\n @item SUCCESS_EXIT_CODE\n A C expression for the status code to be returned when the compiler\n exits without serious errors.  (Warnings are not serious errors.)  The\n default is the system-provided macro @samp{EXIT_SUCCESS}, or @samp{0} if\n the system doesn't define that macro.  Define this macro only if these\n defaults are incorrect.\n \n-@findex HOST_WORDS_BIG_ENDIAN\n-@item HOST_WORDS_BIG_ENDIAN\n-Defined if the host machine stores words of multi-word values in\n-big-endian order.  (GCC does not depend on the host byte ordering\n-within a word.)\n-\n-@findex HOST_FLOAT_WORDS_BIG_ENDIAN\n-@item HOST_FLOAT_WORDS_BIG_ENDIAN\n-Define this macro to be 1 if the host machine stores @code{DFmode},\n-@code{XFmode} or @code{TFmode} floating point numbers in memory with the\n-word containing the sign bit at the lowest address; otherwise, define it\n-to be zero.\n-\n-This macro need not be defined if the ordering is the same as for\n-multi-word integers.\n-\n-@findex HOST_FLOAT_FORMAT\n-@item HOST_FLOAT_FORMAT\n-A numeric code distinguishing the floating point format for the host\n-machine.  See @code{TARGET_FLOAT_FORMAT} in @ref{Storage Layout} for the\n-alternatives and default.\n-\n-@findex HOST_BITS_PER_CHAR\n-@item HOST_BITS_PER_CHAR\n-A C expression for the number of bits in @code{char} on the host\n-machine.\n-\n-@findex HOST_BITS_PER_SHORT\n-@item HOST_BITS_PER_SHORT\n-A C expression for the number of bits in @code{short} on the host\n-machine.\n-\n-@findex HOST_BITS_PER_INT\n-@item HOST_BITS_PER_INT\n-A C expression for the number of bits in @code{int} on the host\n-machine.\n-\n-@findex HOST_BITS_PER_LONG\n-@item HOST_BITS_PER_LONG\n-A C expression for the number of bits in @code{long} on the host\n-machine.\n-\n-@findex HOST_BITS_PER_LONGLONG\n-@item HOST_BITS_PER_LONGLONG\n-A C expression for the number of bits in @code{long long} on the host\n-machine.\n-\n-@findex ONLY_INT_FIELDS\n-@item ONLY_INT_FIELDS\n-Define this macro to indicate that the host compiler only supports\n-@code{int} bit-fields, rather than other integral types, including\n-@code{enum}, as do most C compilers.\n-\n-@findex OBSTACK_CHUNK_SIZE\n-@item OBSTACK_CHUNK_SIZE\n-A C expression for the size of ordinary obstack chunks.\n-If you don't define this, a usually-reasonable default is used.\n-\n-@findex OBSTACK_CHUNK_ALLOC\n-@item OBSTACK_CHUNK_ALLOC\n-The function used to allocate obstack chunks.\n-If you don't define this, @code{xmalloc} is used.\n-\n-@findex OBSTACK_CHUNK_FREE\n-@item OBSTACK_CHUNK_FREE\n-The function used to free obstack chunks.\n-If you don't define this, @code{free} is used.\n-\n-@findex USE_C_ALLOCA\n @item USE_C_ALLOCA\n-Define this macro to indicate that the compiler is running with the\n-@code{alloca} implemented in C@.  This version of @code{alloca} can be\n-found in the file @file{alloca.c}; to use it, you must also alter the\n-@file{Makefile} variable @code{ALLOCA}.  (This is done automatically\n-for the systems on which we know it is needed.)\n-\n-If you do define this macro, you should probably do it as follows:\n-\n-@example\n-#ifndef __GNUC__\n-#define USE_C_ALLOCA\n-#else\n-#define alloca __builtin_alloca\n-#endif\n-@end example\n-\n-@noindent\n-so that when the compiler is compiled with GCC it uses the more\n-efficient built-in @code{alloca} function.\n-\n-@item FUNCTION_CONVERSION_BUG\n-@findex FUNCTION_CONVERSION_BUG\n-Define this macro to indicate that the host compiler does not properly\n-handle converting a function value to a pointer-to-function when it is\n-used in an expression.\n-\n-@findex MULTIBYTE_CHARS\n-@item MULTIBYTE_CHARS\n-Define this macro to enable support for multibyte characters in the\n-input to GCC@.  This requires that the host system support the ISO C\n-library functions for converting multibyte characters to wide\n-characters.\n-\n-@findex POSIX\n-@item POSIX\n-Define this if your system is POSIX.1 compliant.\n-\n-@findex PATH_SEPARATOR\n+Define this macro if GCC should use the C implementation of @code{alloca}\n+provided by @file{libiberty.a}.  This only affects how some parts of the\n+compiler itself allocate memory.  It does not change code generation.\n+\n+When GCC is built with a compiler other than itself, the C @code{alloca}\n+is always used.  This is because most other implementations have serious\n+bugs.  You should define this macro only on a system where no\n+stack-based @code{alloca} can possibly work.  For instance, if a system\n+has a small limit on the size of the stack, GCC's builtin @code{alloca}\n+will not work reliably.\n+\n+@item HAVE_DOS_BASED_FILE_SYSTEM\n+Define this macro if the host file system obeys the semantics defined by\n+MS-DOS instead of Unix.  DOS file systems are case insensitive, file\n+specifications may begin with a drive letter, and both forward slash and\n+backslash (@samp{/} and @samp{\\}) are directory separators.  If you\n+define this macro, you probably need to define the next three macros too.\n+\n @item PATH_SEPARATOR\n-Define this macro to be a C character constant representing the\n-character used to separate components in paths.  The default value is\n-the colon character\n+If defined, this macro should expand to a character constant specifying\n+the separator for elements of search paths.  The default value is a\n+colon (@samp{:}).  DOS-based systems usually use semicolon (@samp{;}).\n \n-@findex DIR_SEPARATOR\n @item DIR_SEPARATOR\n-If your system uses some character other than slash to separate\n-directory names within a file specification, define this macro to be a C\n-character constant specifying that character.  When GCC displays file\n-names, the character you specify will be used.  GCC will test for\n-both slash and the character you specify when parsing filenames.\n-\n-@findex DIR_SEPARATOR_2\n-@item DIR_SEPARATOR_2\n-If your system uses an alternative character other than\n-@samp{DIR_SEPARATOR} to separate directory names within a file\n-specification, define this macro to be a C character constant specifying\n-that character.  If you define this macro, GCC will test for slash,\n-@samp{DIR_SEPARATOR}, and @samp{DIR_SEPARATOR_2} when parsing filenames.\n-\n-@findex TARGET_OBJECT_SUFFIX\n-@item TARGET_OBJECT_SUFFIX\n-Define this macro to be a C string representing the suffix for object\n-files on your target machine.  If you do not define this macro, GCC will\n-use @samp{.o} as the suffix for object files.\n+@itemx DIR_SEPARATOR_2\n+If defined, these macros expand to character constants specifying\n+separators for directory names within a file specification.  They are\n+used somewhat inconsistently throughout the compiler.  If your system\n+behaves like Unix (only forward slash separates pathnames), define\n+neither of them.  If your system behaves like DOS (both forward and\n+backward slash can be used), define @code{DIR_SEPARATOR} to @samp{/}\n+and @code{DIR_SEPARATOR_2} to @samp{\\}.\n \n-@findex TARGET_EXECUTABLE_SUFFIX\n-@item TARGET_EXECUTABLE_SUFFIX\n-Define this macro to be a C string representing the suffix to be\n-automatically added to executable files on your target machine.  If you\n-do not define this macro, GCC will use the null string as the suffix for\n-executable files.\n-\n-@findex HOST_OBJECT_SUFFIX\n @item HOST_OBJECT_SUFFIX\n Define this macro to be a C string representing the suffix for object\n-files on your host machine (@samp{xm-*.h}).  If you do not define this\n-macro, GCC will use @samp{.o} as the suffix for object files.\n+files on your host machine.  If you do not define this macro, GCC will\n+use @samp{.o} as the suffix for object files.\n \n-@findex HOST_EXECUTABLE_SUFFIX\n @item HOST_EXECUTABLE_SUFFIX\n Define this macro to be a C string representing the suffix for\n-executable files on your host machine (@samp{xm-*.h}).  If you do not\n-define this macro, GCC will use the null string as the suffix for\n-executable files.\n+executable files on your host machine.  If you do not define this macro,\n+GCC will use the null string as the suffix for executable files.\n \n-@findex HOST_BIT_BUCKET\n @item HOST_BIT_BUCKET\n-The name of a file or file-like object on the host system which acts as\n-a ``bit bucket''.  If you do not define this macro, GCC will use\n-@samp{/dev/null} as the bit bucket.  If the target does not support a\n-bit bucket, this should be defined to the null string, or some other\n-invalid filename.  If the bit bucket is not writable, GCC will use a\n-temporary file instead.\n-\n-@findex COLLECT_EXPORT_LIST\n-@item COLLECT_EXPORT_LIST\n-If defined, @code{collect2} will scan the individual object files\n-specified on its command line and create an export list for the linker.\n-Define this macro for systems like AIX, where the linker discards\n-object files that are not referenced from @code{main} and uses export\n-lists.\n-\n-@findex COLLECT2_HOST_INITIALIZATION\n+A pathname defined by the host operating system, which can be opened as\n+a file and written to, but all the information written is discarded.\n+This is commonly known as a @dfn{bit bucket} or @dfn{null device}.  If\n+you do not define this macro, GCC will use @samp{/dev/null} as the bit\n+bucket.  If the host does not support a bit bucket, define this macro to\n+an invalid filename.\n+\n @item COLLECT2_HOST_INITIALIZATION\n If defined, a C statement (sans semicolon) that performs host-dependent\n initialization when @code{collect2} is being initialized.\n \n-@findex GCC_DRIVER_HOST_INITIALIZATION\n @item GCC_DRIVER_HOST_INITIALIZATION\n If defined, a C statement (sans semicolon) that performs host-dependent\n initialization when a compilation driver is being initialized.\n \n-@findex UPDATE_PATH_HOST_CANONICALIZE\n @item UPDATE_PATH_HOST_CANONICALIZE (@var{path})\n If defined, a C statement (sans semicolon) that performs host-dependent\n canonicalization when a path used in a compilation driver or\n@@ -231,19 +102,29 @@ canonicalized.  If the C statement does canonicalize @var{path} into a\n different buffer, the old path should be freed and the new buffer should\n have been allocated with malloc.\n \n-@findex DUMPFILE_FORMAT\n @item DUMPFILE_FORMAT\n-Define this macro to be a C string representing the format to use\n-for constructing the index part of the dump file name on your host machine.\n-If you do not define this macro, GCC will use @samp{.%02d.}.  The full\n-filename will be the prefix of the assembler file name concatenated with\n-the string resulting from applying this format concatenated with a string\n+Define this macro to be a C string representing the format to use for\n+constructing the index part of debugging dump file names.  The resultant\n+string must fit in fifteen bytes.  The full filename will be the\n+concatenation of: the prefix of the assembler file name, the string\n+resulting from applying this format to an index number, and a string\n unique to each dump file kind, e.g. @samp{rtl}.\n-@end table\n-\n-@findex bzero\n-@findex bcmp\n-In addition, configuration files for system V define @code{bcopy},\n-@code{bzero} and @code{bcmp} as aliases.  Some files define @code{alloca}\n-as a macro when compiled with GCC, in order to take advantage of the\n-benefit of GCC's built-in @code{alloca}.\n+\n+If you do not define this macro, GCC will use @samp{.%02d.}.  You should\n+define this macro if using the default will create an invalid file name.\n+\n+@item SMALL_ARG_MAX\n+Define this macro if the host system has a small limit on the total\n+size of an argument vector.  This causes the driver to take more care\n+not to pass unnecessary arguments to subprocesses.\n+@end ftable\n+\n+In addition, if @command{configure} generates an incorrect definition of\n+any of the macros in @file{auto-host.h}, you can override that\n+definition in a host configuration header.  If you need to do this,\n+first see if it is possible to fix @command{configure}.\n+\n+If you need to define only a few of these macros, and they have simple\n+definitions, consider using the @code{xm_defines} variable in your\n+@file{config.gcc} entry instead of creating a host configuration header.\n+@xref{System Config}."}, {"sha": "5b614090b284b2fd2e842f393ac2ffc4b851b15a", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807633e5a30bbc6229c7cd46c2b69ab52eb45b6c/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807633e5a30bbc6229c7cd46c2b69ab52eb45b6c/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=807633e5a30bbc6229c7cd46c2b69ab52eb45b6c", "patch": "@@ -57,9 +57,9 @@ expression (``RTX'', for short) is a C structure, but it is usually\n referred to with a pointer; a type that is given the typedef name\n @code{rtx}.\n \n-An integer is simply an @code{int}; their written form uses decimal digits.\n-A wide integer is an integral object whose type is @code{HOST_WIDE_INT}\n-(@pxref{Config}); their written form uses decimal digits.\n+An integer is simply an @code{int}; their written form uses decimal\n+digits.  A wide integer is an integral object whose type is\n+@code{HOST_WIDE_INT}; their written form uses decimal digits.\n \n A string is a sequence of characters.  In core it is represented as a\n @code{char *} in usual C fashion, and it is written in C syntax as well."}, {"sha": "706cca47b4ce2d54135ab7ac51553b6de57b0d4b", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807633e5a30bbc6229c7cd46c2b69ab52eb45b6c/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807633e5a30bbc6229c7cd46c2b69ab52eb45b6c/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=807633e5a30bbc6229c7cd46c2b69ab52eb45b6c", "patch": "@@ -1313,7 +1313,7 @@ need to define this macro when the format is IEEE@.\n \n @findex VAX_FLOAT_FORMAT\n @item VAX_FLOAT_FORMAT\n-This code indicates the peculiar format used on the VAX.\n+This code indicates the ``D float'' format used on the VAX@.\n \n @findex IBM_FLOAT_FORMAT\n @item IBM_FLOAT_FORMAT\n@@ -1328,14 +1328,14 @@ This code indicates the format used on the TMS320C3x/C4x.\n This code indicates any other format.\n @end table\n \n-The value of this macro is compared with @code{HOST_FLOAT_FORMAT}\n-(@pxref{Config}) to determine whether the target machine has the same\n-format as the host machine.  If any other formats are actually in use on\n-supported machines, new codes should be defined for them.\n+The value of this macro is compared with @code{HOST_FLOAT_FORMAT}, which\n+is defined by the @command{configure} script, to determine whether the\n+target machine has the same format as the host machine.  If any other\n+formats are actually in use on supported machines, new codes should be\n+defined for them.\n \n The ordering of the component words of floating point values stored in\n-memory is controlled by @code{FLOAT_WORDS_BIG_ENDIAN} for the target\n-machine and @code{HOST_FLOAT_WORDS_BIG_ENDIAN} for the host.\n+memory is controlled by @code{FLOAT_WORDS_BIG_ENDIAN}.\n \n @end table\n \n@@ -8600,4 +8600,25 @@ You may use @code{current_function_leaf_function} in the definition of the\n macro, functions that use @code{REG_N_SETS}, to determine if the hard\n register in question will not be clobbered.\n \n+@findex TARGET_OBJECT_SUFFIX\n+@item TARGET_OBJECT_SUFFIX\n+Define this macro to be a C string representing the suffix for object\n+files on your target machine.  If you do not define this macro, GCC will\n+use @samp{.o} as the suffix for object files.\n+\n+@findex TARGET_EXECUTABLE_SUFFIX\n+@item TARGET_EXECUTABLE_SUFFIX\n+Define this macro to be a C string representing the suffix to be\n+automatically added to executable files on your target machine.  If you\n+do not define this macro, GCC will use the null string as the suffix for\n+executable files.\n+\n+@findex COLLECT_EXPORT_LIST\n+@item COLLECT_EXPORT_LIST\n+If defined, @code{collect2} will scan the individual object files\n+specified on its command line and create an export list for the linker.\n+Define this macro for systems like AIX, where the linker discards\n+object files that are not referenced from @code{main} and uses export\n+lists.\n+\n @end table"}]}