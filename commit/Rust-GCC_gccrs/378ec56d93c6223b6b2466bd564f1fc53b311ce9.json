{"sha": "378ec56d93c6223b6b2466bd564f1fc53b311ce9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc4ZWM1NmQ5M2M2MjIzYjZiMjQ2NmJkNTY0ZjFmYzUzYjMxMWNlOQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "1997-10-14T18:41:30Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "1997-10-14T18:41:30Z"}, "message": "Bring over test cases\n\nFrom-SVN: r15897", "tree": {"sha": "1ed492c88b429603be9b250fbe81b2e9feb45f8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ed492c88b429603be9b250fbe81b2e9feb45f8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/378ec56d93c6223b6b2466bd564f1fc53b311ce9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/378ec56d93c6223b6b2466bd564f1fc53b311ce9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/378ec56d93c6223b6b2466bd564f1fc53b311ce9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/378ec56d93c6223b6b2466bd564f1fc53b311ce9/comments", "author": null, "committer": null, "parents": [{"sha": "dae1d6f685ae076d22441aaedd79859e2f720779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dae1d6f685ae076d22441aaedd79859e2f720779", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dae1d6f685ae076d22441aaedd79859e2f720779"}], "stats": {"total": 146, "additions": 146, "deletions": 0}, "files": [{"sha": "770801cdb9015206fccaea1c245be22795a0d640", "filename": "gcc/testsuite/g++.old-deja/g++.benjamin/.Sanitize", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378ec56d93c6223b6b2466bd564f1fc53b311ce9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2F.Sanitize", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378ec56d93c6223b6b2466bd564f1fc53b311ce9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2F.Sanitize", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2F.Sanitize?ref=378ec56d93c6223b6b2466bd564f1fc53b311ce9", "patch": "@@ -0,0 +1,37 @@\n+# .Sanitize for g++ tests.\n+\n+# Each directory to survive it's way into a release will need a file\n+# like this one called \"./.Sanitize\".  All keyword lines must exist,\n+# and must exist in the order specified by this file.  Each directory\n+# in the tree will be processed, top down, in the following order.\n+\n+# Hash started lines like this one are comments and will be deleted\n+# before anything else is done.  Blank lines will also be squashed\n+# out.\n+\n+# The lines between the \"Do-first:\" line and the \"Things-to-keep:\"\n+# line are executed as a /bin/sh shell script before anything else is\n+# done in this directory.\n+\n+Do-first:\n+\n+# All files listed between the \"Things-to-keep:\" line and the\n+# \"Do-last:\" line will be kept.  All other files will be removed.\n+# Directories listed in this section will have their own Sanitize\n+# called.  Directories not listed will be removed in their entirety\n+# with rm -rf.\n+\n+Things-to-keep:\n+\n+.cvsignore\n+p12475.C\n+p13417.C\n+warn01.C\n+\n+Things-to-lose:\n+\n+# The lines between the \"Do-last:\" line and the end of the file\n+# are executed as a /bin/sh shell script after everything else is\n+# done.\n+\n+Do-last:"}, {"sha": "18d62e80512e508eb4949fbc9a4f4b0841d5ef94", "filename": "gcc/testsuite/g++.old-deja/g++.benjamin/p13417.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378ec56d93c6223b6b2466bd564f1fc53b311ce9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fp13417.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378ec56d93c6223b6b2466bd564f1fc53b311ce9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fp13417.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fp13417.C?ref=378ec56d93c6223b6b2466bd564f1fc53b311ce9", "patch": "@@ -0,0 +1,11 @@\n+// Build don't link:\n+// Special g++ Options:  \n+// prms-id: 13417\n+\n+class   Foo {\n+public:\n+  explicit Foo (int){}\n+};\n+Foo f(10);\n+Foo blat() return f(4){}; //this should not give an error\n+ "}, {"sha": "d0cf0d01785d54bef5b03866f34e96a083fb2ad4", "filename": "gcc/testsuite/g++.old-deja/g++.benjamin/warn01.C", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378ec56d93c6223b6b2466bd564f1fc53b311ce9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fwarn01.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378ec56d93c6223b6b2466bd564f1fc53b311ce9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fwarn01.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fwarn01.C?ref=378ec56d93c6223b6b2466bd564f1fc53b311ce9", "patch": "@@ -0,0 +1,98 @@\n+// Build don't link: \n+// Special g++ Options:  -Wall -Weffc++\n+\n+//1 g++/12952 un-named variables in a catch block\n+//Wall or Wunused should not give warnings here\n+template <class T>\n+void f (void) { \n+   try\n+    {\n+    }\n+ \n+   catch( int)\n+    {    \n+    }\n+};\n+\n+//\n+//2 g++/12923 __attribute__((__unused__)) not working for objects\n+//Weffc++ or Wunused should not report the object as an error\n+class C {\n+  public:\n+  C();\n+};\n+\n+void f (void){\n+  C x __attribute__ ((__unused__));\n+  int y __attribute__ ((__unused__));\n+}\n+\n+//\n+//3 g++/12982 lock should not give error here, as above\n+void setLock ();\n+void clearLock ();\n+\n+template <class T>\n+class test {\n+public:\n+   class lock\n+   {\n+   public:\n+     lock () { setLock(); }\n+     ~lock () { clearLock(); }\n+   };\n+\n+  static void f (void)\n+  {\n+   lock local  __attribute__ ((__unused__));\n+  } \n+\n+};\n+\n+\n+//\n+//4 g++/12988 neither Mutex nor AutoMutex varibles should give warnings here\n+//compile with -Weffc++ or -Wunused depending on post or pre 97r1\n+class Mutex {\n+private:\n+  long counter;\n+public:\n+  virtual long retcntr() {return counter;};\n+  Mutex(int i = 0): counter(i) {};\n+  virtual ~Mutex() {};\n+} __attribute__ ((__unused__));\n+\n+class AutoMutex: public Mutex{\n+private:\n+  long counter2;\n+public:\n+  long retcntr() {return counter2;};\n+  AutoMutex(int i = 0): counter2(i) {};\n+  virtual ~AutoMutex() {};\n+} __attribute__ ((__unused__));\n+\n+\n+template <class T>\n+int foofunc(T x){\n+  Mutex sm(2);\n+  AutoMutex m(&sm);\n+  return 0;\n+};\n+\n+\n+//5 sanity check to make sure other attributes cannot be used\n+class Mutex2 {\n+private:\n+  long counter;\n+public:\n+  virtual long retcntr() {return counter;};\n+  Mutex2(int i = 0): counter(i) {};\n+  virtual ~Mutex2() {};\n+} __attribute__ ((warn));  // WARNING - \n+\n+\n+\n+\n+\n+\n+"}]}