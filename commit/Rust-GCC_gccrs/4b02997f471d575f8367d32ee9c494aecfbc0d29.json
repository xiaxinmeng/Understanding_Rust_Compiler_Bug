{"sha": "4b02997f471d575f8367d32ee9c494aecfbc0d29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGIwMjk5N2Y0NzFkNTc1ZjgzNjdkMzJlZTljNDk0YWVjZmJjMGQyOQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2002-01-22T17:35:27Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2002-01-22T17:35:27Z"}, "message": "Move body of HARD_REGNO_MODE_OK into a function: arm_hard_regno_mode_ok\n\nFrom-SVN: r49080", "tree": {"sha": "d5ba45f6205e169b8e856fd187410879ae678135", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5ba45f6205e169b8e856fd187410879ae678135"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b02997f471d575f8367d32ee9c494aecfbc0d29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b02997f471d575f8367d32ee9c494aecfbc0d29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b02997f471d575f8367d32ee9c494aecfbc0d29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b02997f471d575f8367d32ee9c494aecfbc0d29/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c14a3a45786410dbe33b205bb71f3afa5b4b50b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14a3a45786410dbe33b205bb71f3afa5b4b50b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c14a3a45786410dbe33b205bb71f3afa5b4b50b2"}], "stats": {"total": 98, "additions": 62, "deletions": 36}, "files": [{"sha": "4659749eddfc9c48215020dbe2599cd1a688efa4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b02997f471d575f8367d32ee9c494aecfbc0d29/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b02997f471d575f8367d32ee9c494aecfbc0d29/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b02997f471d575f8367d32ee9c494aecfbc0d29", "patch": "@@ -1,4 +1,18 @@\n-2002-01-22  Nick Clifton  <nickc@cambridge.redhat.com>\n+2002-01-22  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/arm/arm.h (CONDITIONAL_REGISTER_USAGE): Move 'regno'\n+\tvariable declaration to outer scope in order to simplify\n+\tfuture extensions.\n+\t(HARD_REGNO_MODE_OK): Replace macro body with a with a call to\n+\tarm_hard_regno_mode_ok.\n+\t* config/arm/arm-protos.h: Add a prototype for\n+\tarm_hard_regno_mode_ok.\n+\t* config/arm/arm.c (soft_df_operand): Remove now redundant\n+\tcheck for DImode values using IP_REGNUM.\n+\t(nonimmediate_soft_df_operand): Remove now redundant check for\n+\tDImode values using IP_REGNUM.\n+\t(arm_hard_regno_mode_ok): New function. New check: make sure\n+\tthat DImode values are not stored in IP_REGNUM.\n \n \t* config/arm/arm.c (arm_expand_prologue): Replace REG_MAYBE_DEAD\n \tnote with a USE."}, {"sha": "b42da823869aa7eef5d4b2e26b634054c2799fb8", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b02997f471d575f8367d32ee9c494aecfbc0d29/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b02997f471d575f8367d32ee9c494aecfbc0d29/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=4b02997f471d575f8367d32ee9c494aecfbc0d29", "patch": "@@ -43,6 +43,7 @@ extern void   arm_encode_call_attribute\tPARAMS ((tree, int));\n extern int    arm_function_ok_for_sibcall PARAMS ((tree));\n #endif\n #ifdef RTX_CODE\n+extern int    arm_hard_regno_mode_ok\tPARAMS ((unsigned int, enum machine_mode));\n extern int    const_ok_for_arm\t\tPARAMS ((HOST_WIDE_INT));\n extern int    arm_split_constant\tPARAMS ((RTX_CODE, enum machine_mode,\n \t\t\t\t\t\tHOST_WIDE_INT, rtx, rtx, int));"}, {"sha": "04f06ae997df902250fa2da9fb0e843b5ea4c06e", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b02997f471d575f8367d32ee9c494aecfbc0d29/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b02997f471d575f8367d32ee9c494aecfbc0d29/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=4b02997f471d575f8367d32ee9c494aecfbc0d29", "patch": "@@ -3358,14 +3358,7 @@ soft_df_operand (op, mode)\n      enum machine_mode mode;\n {\n   if (s_register_operand (op, mode))\n-    {\n-      if (GET_CODE (op) == SUBREG)\n-\top = SUBREG_REG (op);\n-\n-      /* The IP register must not be used, since its higher\n-\t numbered counterpart is 13 - the stack pointer.  */\n-      return REGNO (op) != IP_REGNUM;\n-    }\n+    return TRUE;\n \n   if (mode != VOIDmode && GET_MODE (op) != mode)\n     return FALSE;\n@@ -3397,14 +3390,7 @@ nonimmediate_soft_df_operand (op, mode)\n      enum machine_mode mode;\n {\n   if (s_register_operand (op, mode))\n-    {\n-      if (GET_CODE (op) == SUBREG)\n-\top = SUBREG_REG (op);\n-\n-      /* The IP register must not be used, since its higher\n-\t numbered counterpart is 13 - the stack pointer.  */\n-      return REGNO (op) != IP_REGNUM;\n-    }\n+    return TRUE;\n \n   if (mode != VOIDmode && GET_MODE (op) != mode)\n     return FALSE;\n@@ -9133,6 +9119,44 @@ arm_final_prescan_insn (insn)\n     }\n }\n \n+/* Returns true if REGNO is a valid register\n+   for holding a quantity of tyoe MODE.  */\n+\n+int\n+arm_hard_regno_mode_ok (regno, mode)\n+     unsigned int regno;\n+     enum machine_mode mode;\n+{\n+  if (GET_MODE_CLASS (mode) == MODE_CC)\n+    return regno == CC_REGNUM;\n+  \n+  if (TARGET_THUMB)\n+    /* For the Thumb we only allow values bigger than SImode in\n+       registers 0 - 6, so that there is always a second low\n+       register available to hold the upper part of the value.\n+       We probably we ought to ensure that the register is the\n+       start of an even numbered register pair.  */\n+    return (NUM_REGS (mode) < 2) || (regno < LAST_LO_REGNUM);\n+\n+  if (regno <= LAST_ARM_REGNUM)\n+    /* If the register is a general purpose ARM register we allow\n+       it only if it not a special register (SP, LR, PC) and only\n+       if there will be enough (non-special) registers to hold the\n+       entire value.  */\n+    return regno < (SP_REGNUM - (unsigned) NUM_REGS (mode));\n+\n+  if (   regno == FRAME_POINTER_REGNUM\n+      || regno == ARG_POINTER_REGNUM)\n+    /* We only allow integers in the fake hard registers.  */\n+    return GET_MODE_CLASS (mode) == MODE_INT;\n+\n+  /* The only registers left are the FPU registers\n+     which we only allow to hold FP values.  */\n+  return GET_MODE_CLASS (mode) == MODE_FLOAT\n+    && regno >= FIRST_ARM_FP_REGNUM\n+    && regno <= LAST_ARM_FP_REGNUM;\n+}\n+\n int\n arm_regno_class (regno)\n      int regno;"}, {"sha": "6f055699f010cd1eaed9df79bac024b3dae937c9", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b02997f471d575f8367d32ee9c494aecfbc0d29/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b02997f471d575f8367d32ee9c494aecfbc0d29/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=4b02997f471d575f8367d32ee9c494aecfbc0d29", "patch": "@@ -847,9 +847,10 @@ extern const char * structure_size_string;\n \n #define CONDITIONAL_REGISTER_USAGE\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n+  int regno;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n   if (TARGET_SOFT_FLOAT || TARGET_THUMB)\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      int regno;\t\t\t\t\t\t\\\n       for (regno = FIRST_ARM_FP_REGNUM;\t\t\t\t\\\n \t   regno <= LAST_ARM_FP_REGNUM; ++regno)\t\t\\\n \tfixed_regs[regno] = call_used_regs[regno] = 1;\t\t\\\n@@ -1004,23 +1005,9 @@ extern const char * structure_size_string;\n     && REGNO != ARG_POINTER_REGNUM)\t\\\n    ? 1 : NUM_REGS (MODE))\n \n-/* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.\n-   This is TRUE for ARM regs since they can hold anything, and TRUE for FPU\n-   regs holding FP.\n-   For the Thumb we only allow values bigger than SImode in registers 0 - 6,\n-   so that there is always a second lo register available to hold the upper\n-   part of the value.  Probably we ought to ensure that the register is the\n-   start of an even numbered register pair.  */\n+/* Return true if REGNO is suitable for holding a quantity of type MODE.  */\n #define HARD_REGNO_MODE_OK(REGNO, MODE)\t\t\t\t\t\\\n-  (TARGET_ARM ?\t\t\t\t\t\t\t\t\\\n-   ((GET_MODE_CLASS (MODE) == MODE_CC) ? (REGNO == CC_REGNUM) :\t\t\\\n-    (   REGNO <= LAST_ARM_REGNUM\t\t\t\t\t\\\n-     || REGNO == FRAME_POINTER_REGNUM\t\t\t\t\t\\\n-     || REGNO == ARG_POINTER_REGNUM\t\t\t\t\t\\\n-     || GET_MODE_CLASS (MODE) == MODE_FLOAT))\t\t\t\t\\\n-   :\t\t\t\t\t\t\t\t\t\\\n-   ((GET_MODE_CLASS (MODE) == MODE_CC) ? (REGNO == CC_REGNUM) :\t\t\\\n-    (NUM_REGS (MODE) < 2 || REGNO < LAST_LO_REGNUM)))\n+  arm_hard_regno_mode_ok ((REGNO), (MODE))\n \n /* Value is 1 if it is a good idea to tie two pseudo registers\n    when one has mode MODE1 and one has mode MODE2.\n@@ -1092,7 +1079,7 @@ enum reg_class\n   { 0x200FFFF }, /* GENERAL_REGS */\t\\\n   { 0x2FFFFFF }  /* ALL_REGS */\t\t\\\n }\n-  \n+\n /* The same information, inverted:\n    Return the class number of the smallest class containing\n    reg number REGNO.  This could be a conditional expression\n@@ -1909,7 +1896,7 @@ typedef struct\n         arm_encode_call_attribute (decl, LONG_CALL_FLAG_CHAR);\t\t\\\n       else if (! TREE_PUBLIC (decl))        \t\t\t\t\\\n         arm_encode_call_attribute (decl, SHORT_CALL_FLAG_CHAR);\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+    }\n \n /* Symbols in the text segment can be accessed without indirecting via the\n    constant pool; it may take an extra binary operation, but this is still"}]}