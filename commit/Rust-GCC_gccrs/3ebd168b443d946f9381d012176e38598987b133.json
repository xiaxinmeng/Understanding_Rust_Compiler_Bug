{"sha": "3ebd168b443d946f9381d012176e38598987b133", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ViZDE2OGI0NDNkOTQ2ZjkzODFkMDEyMTc2ZTM4NTk4OTg3YjEzMw==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2020-05-12T02:37:41Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2020-05-12T02:37:41Z"}, "message": "rs6000: Built-in cleanups for vec_clzm, vec_ctzm, and vec_gnb\n\nChanges to the built-in specification occurred after early patches\nadded support for these.  The name of vec_clzm became vec_cntlzm,\nand vec_ctzm became vec_cnttzm.  Four of the overloaded forms of\nvec_gnb were removed, and the fourth argument redefined as an\nunsigned int, not an unsigned char.  This patch reflects those\nchanges in the code and test cases.  Eight of the vec_gnb test\ncases are removed as a result.\n\n[gcc]\n\n2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* config/rs6000/altivec.h (vec_clzm): Rename to vec_cntlzm.\n\t(vec_ctzm): Rename to vec_cnttzm.\n\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):\n\tChange fourth operand for vec_ternarylogic to require\n\tcompatibility with unsigned SImode rather than unsigned QImode.\n\t* config/rs6000/rs6000-call.c (altivec_overloaded_builtins):\n\tRemove overloaded forms of vec_gnb that are no longer needed.\n\t* doc/extend.texi (PowerPC AltiVec Built-in Functions Available\n\tfor a Future Architecture): Replace vec_clzm with vec_cntlzm;\n\treplace vec_ctzm with vec_cntlzm; remove four unwanted forms of\n\tvec_gnb; move vec_ternarylogic documentation into this section\n\tand replace const unsigned char with const unsigned int as its\n\tfourth argument.\n\n[gcc/testsuite]\n\n2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* gcc.target/powerpc/vec-clzm-0.c: Rename to...\n\t* gcc.target/powerpc/vec-cntlzm-0.c: ...this.\n\t* gcc.target/powerpc/vec-clzm-1.c: Rename to...\n\t* gcc.target/powerpc/vec-cntlzm-1.c: ...this.\n\t* gcc.target/powerpc/vec-ctzm-0.c: Rename to...\n\t* gcc.target/powerpc/vec-cnttzm-0.c: ...this.\n\t* gcc.target/powerpc/vec-ctzm-1.c: Rename to...\n\t* gcc.target/powerpc/vec-cnttzm-1.c: ...this.\n\t* gcc.target/powerpc/vec-gnb-8.c: Rename to...\n\t* gcc.target/powerpc/vec-gnb-0.c: ...this, deleting the old file.\n\t* gcc.target/powerpc/vec-gnb-9.c: Rename to...\n\t* gcc.target/powerpc/vec-gnb-1.c: ...this, deleting the old file.\n\t* gcc.target/powerpc/vec-gnb-10.c: Rename to...\n\t* gcc.target/powerpc/vec-gnb-2.c: ...this, deleting the old file.\n\t* gcc.target/powerpc/vec-gnb-3.c: Delete.\n\t* gcc.target/powerpc/vec-gnb-4.c: Delete.\n\t* gcc.target/powerpc/vec-gnb-5.c: Delete.\n\t* gcc.target/powerpc/vec-gnb-6.c: Delete.\n\t* gcc.target/powerpc/vec-gnb-7.c: Delete.", "tree": {"sha": "9361733f78b8198215b383cbf7aa0d288640c403", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9361733f78b8198215b383cbf7aa0d288640c403"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ebd168b443d946f9381d012176e38598987b133", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ebd168b443d946f9381d012176e38598987b133", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ebd168b443d946f9381d012176e38598987b133", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ebd168b443d946f9381d012176e38598987b133/comments", "author": null, "committer": null, "parents": [{"sha": "b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2"}], "stats": {"total": 813, "additions": 126, "deletions": 687}, "files": [{"sha": "ef6867527a1e45ade690d3cff26325ca84183c83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebd168b443d946f9381d012176e38598987b133/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebd168b443d946f9381d012176e38598987b133/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ebd168b443d946f9381d012176e38598987b133", "patch": "@@ -1,3 +1,19 @@\n+2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* config/rs6000/altivec.h (vec_clzm): Rename to vec_cntlzm.\n+\t(vec_ctzm): Rename to vec_cnttzm.\n+\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):\n+\tChange fourth operand for vec_ternarylogic to require\n+\tcompatibility with unsigned SImode rather than unsigned QImode.\n+\t* config/rs6000/rs6000-call.c (altivec_overloaded_builtins):\n+\tRemove overloaded forms of vec_gnb that are no longer needed.\n+\t* doc/extend.texi (PowerPC AltiVec Built-in Functions Available\n+\tfor a Future Architecture): Replace vec_clzm with vec_cntlzm;\n+\treplace vec_ctzm with vec_cntlzm; remove four unwanted forms of\n+\tvec_gnb; move vec_ternarylogic documentation into this section\n+\tand replace const unsigned char with const unsigned int as its\n+\tfourth argument.\n+\n 2020-05-11  Carl Love  <cel@us.ibm.com>\n \n \t* config/rs6000/altivec.h (vec_genpcvm): New #define."}, {"sha": "85c5626877d7e406d25a5822762436de5d2ee794", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebd168b443d946f9381d012176e38598987b133/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebd168b443d946f9381d012176e38598987b133/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=3ebd168b443d946f9381d012176e38598987b133", "patch": "@@ -689,8 +689,8 @@ __altivec_scalar_pred(vec_any_nle,\n #ifdef _ARCH_PWR_FUTURE\n /* May modify these macro definitions if future capabilities overload\n    with support for different vector argument and result types.  */\n-#define vec_clzm(a, b)\t__builtin_altivec_vclzdm (a, b)\n-#define vec_ctzm(a, b)\t__builtin_altivec_vctzdm (a, b)\n+#define vec_cntlzm(a, b)\t__builtin_altivec_vclzdm (a, b)\n+#define vec_cnttzm(a, b)\t__builtin_altivec_vctzdm (a, b)\n #define vec_pdep(a, b)\t__builtin_altivec_vpdepd (a, b)\n #define vec_pext(a, b)\t__builtin_altivec_vpextd (a, b)\n #define vec_cfuge(a, b)\t__builtin_altivec_vcfuged (a, b)"}, {"sha": "07ca33a89b4be9181ad77852bd98f193f64fecad", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebd168b443d946f9381d012176e38598987b133/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebd168b443d946f9381d012176e38598987b133/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=3ebd168b443d946f9381d012176e38598987b133", "patch": "@@ -1813,7 +1813,7 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t\t&& rs6000_builtin_type_compatible (types[1], desc->op2)\n \t\t&& rs6000_builtin_type_compatible (types[2], desc->op3)\n \t\t&& rs6000_builtin_type_compatible (types[3],\n-\t\t\t\t\t\t   RS6000_BTI_UINTQI))\n+\t\t\t\t\t\t   RS6000_BTI_UINTSI))\n \t      {\n \t\tif (rs6000_builtin_decls[desc->overloaded_code] == NULL_TREE)\n \t\t  unsupported_builtin = true;"}, {"sha": "04189eaaa53f8301c2510bb7acaa7aa88b84fd06", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebd168b443d946f9381d012176e38598987b133/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebd168b443d946f9381d012176e38598987b133/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=3ebd168b443d946f9381d012176e38598987b133", "patch": "@@ -5522,14 +5522,6 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n     RS6000_BTI_UINTSI, 0 },\n \n-  { FUTURE_BUILTIN_VEC_GNB, FUTURE_BUILTIN_VGNB, RS6000_BTI_unsigned_long_long,\n-    RS6000_BTI_unsigned_V16QI, RS6000_BTI_UINTQI, 0 },\n-  { FUTURE_BUILTIN_VEC_GNB, FUTURE_BUILTIN_VGNB, RS6000_BTI_unsigned_long_long,\n-    RS6000_BTI_unsigned_V8HI, RS6000_BTI_UINTQI, 0 },\n-  { FUTURE_BUILTIN_VEC_GNB, FUTURE_BUILTIN_VGNB, RS6000_BTI_unsigned_long_long,\n-    RS6000_BTI_unsigned_V4SI, RS6000_BTI_UINTQI, 0 },\n-  { FUTURE_BUILTIN_VEC_GNB, FUTURE_BUILTIN_VGNB, RS6000_BTI_unsigned_long_long,\n-    RS6000_BTI_unsigned_V2DI, RS6000_BTI_UINTQI, 0 },\n   { FUTURE_BUILTIN_VEC_GNB, FUTURE_BUILTIN_VGNB, RS6000_BTI_unsigned_long_long,\n     RS6000_BTI_unsigned_V1TI, RS6000_BTI_UINTQI, 0 },\n   { FUTURE_BUILTIN_VEC_XXGENPCVM, FUTURE_BUILTIN_XXGENPCVM_V2DI,"}, {"sha": "4c5ed3f3bac13fe0549d7bb4d8bb3b5eb9032bea", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 26, "deletions": 34, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebd168b443d946f9381d012176e38598987b133/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebd168b443d946f9381d012176e38598987b133/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=3ebd168b443d946f9381d012176e38598987b133", "patch": "@@ -20762,19 +20762,19 @@ Perform a vector centrifuge operation, as if implemented by the Future\n \n @smallexample\n @exdent vector unsigned long long int\n-@exdent vec_clzm (vector unsigned long long int, vector unsigned long long int)\n+@exdent vec_cntlzm (vector unsigned long long int, vector unsigned long long int)\n @end smallexample\n Perform a vector count leading zeros under bit mask operation, as if\n implemented by the Future @code{vclzdm} instruction.\n-@findex vec_clzm\n+@findex vec_cntlzm\n \n @smallexample\n @exdent vector unsigned long long int\n-@exdent vec_ctzm (vector unsigned long long int, vector unsigned long long int)\n+@exdent vec_cnttzm (vector unsigned long long int, vector unsigned long long int)\n @end smallexample\n Perform a vector count trailing zeros under bit mask operation, as if\n implemented by the Future @code{vctzdm} instruction.\n-@findex vec_ctzm\n+@findex vec_cnttzm\n \n @smallexample\n @exdent vector signed char\n@@ -20802,14 +20802,6 @@ value of @code{n} that is greater than 16 is treated as if it equaled 16.\n \n @smallexample\n @exdent vector unsigned long long int\n-@exdent vec_gnb (vector unsigned char, const unsigned char)\n-@exdent vector unsigned long long int\n-@exdent vec_gnb (vector unsigned short, const unsigned char)\n-@exdent vector unsigned long long int\n-@exdent vec_gnb (vector unsigned int, const unsigned char)\n-@exdent vector unsigned long long int\n-@exdent vec_gnb (vector unsigned long long int, const unsigned char)\n-@exdent vector unsigned long long int\n @exdent vec_gnb (vector unsigned __int128, const unsigned char)\n @end smallexample\n Perform a 128-bit vector gather  operation, as if implemented by the Future\n@@ -20889,6 +20881,28 @@ little-endian targets.  Choose this built-in to check for presence of\n zero element if the same argument is also passed to @code{vec_strir}.\n @findex vec_strir_p\n \n+@smallexample\n+@exdent vector unsigned char\n+@exdent vec_ternarylogic (vector unsigned char, vector unsigned char,\n+            vector unsigned char, const unsigned int)\n+@exdent vector unsigned short\n+@exdent vec_ternarylogic (vector unsigned short, vector unsigned short,\n+            vector unsigned short, const unsigned int)\n+@exdent vector unsigned int\n+@exdent vec_ternarylogic (vector unsigned int, vector unsigned int,\n+            vector unsigned int, const unsigned int)\n+@exdent vector unsigned long long int\n+@exdent vec_ternarylogic (vector unsigned long long int, vector unsigned long long int,\n+            vector unsigned long long int, const unsigned int)\n+@exdent vector unsigned __int128\n+@exdent vec_ternarylogic (vector unsigned __int128, vector unsigned __int128,\n+            vector unsigned __int128, const unsigned int)\n+@end smallexample\n+Perform a 128-bit vector evaluate operation, as if implemented by the\n+Future @code{xxeval} instruction.  The fourth argument must be a literal\n+integer value between 0 and 255 inclusive.\n+@findex vec_ternarylogic\n+\n @smallexample\n @exdent vector unsigned char vec_genpcvm (vector unsigned char, const int)\n @exdent vector unsigned short vec_genpcvm (vector unsigned short, const int)\n@@ -22123,28 +22137,6 @@ else\n @end smallexample\n @end deftypefn\n \n-@smallexample\n-@exdent vector unsigned char\n-@exdent vec_ternarylogic (vector unsigned char, vector unsigned char,\n-            vector unsigned char, const unsigned char)\n-@exdent vector unsigned short\n-@exdent vec_ternarylogic (vector unsigned short, vector unsigned short,\n-            vector unsigned short, const unsigned char)\n-@exdent vector unsigned int\n-@exdent vec_ternarylogic (vector unsigned int, vector unsigned int,\n-            vector unsigned int, const unsigned char)\n-@exdent vector unsigned long long int\n-@exdent vec_ternarylogic (vector unsigned long long int, vector unsigned long long int,\n-            vector unsigned long long int, const unsigned char)\n-@exdent vector unsigned __int128\n-@exdent vec_ternarylogic (vector unsigned __int128, vector unsigned __int128,\n-            vector unsigned __int128, const unsigned char)\n-@end smallexample\n-Perform a 128-bit vector evaluate operation, as if implemented by the\n-Future @code{xxeval} instruction.  The fourth argument must be a literal\n-integer value between 0 and 255 inclusive.\n-@findex vec_ternarylogic\n-\n The following built-in functions are made available by @option{-mmmx}.\n All of them generate the machine instruction that is part of the name.\n "}, {"sha": "5064e684b6b4d0e3e436861baa99e5181568514b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebd168b443d946f9381d012176e38598987b133/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebd168b443d946f9381d012176e38598987b133/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3ebd168b443d946f9381d012176e38598987b133", "patch": "@@ -1,3 +1,25 @@\n+2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/vec-clzm-0.c: Rename to...\n+\t* gcc.target/powerpc/vec-cntlzm-0.c: ...this.\n+\t* gcc.target/powerpc/vec-clzm-1.c: Rename to...\n+\t* gcc.target/powerpc/vec-cntlzm-1.c: ...this.\n+\t* gcc.target/powerpc/vec-ctzm-0.c: Rename to...\n+\t* gcc.target/powerpc/vec-cnttzm-0.c: ...this.\n+\t* gcc.target/powerpc/vec-ctzm-1.c: Rename to...\n+\t* gcc.target/powerpc/vec-cnttzm-1.c: ...this.\n+\t* gcc.target/powerpc/vec-gnb-8.c: Rename to...\n+\t* gcc.target/powerpc/vec-gnb-0.c: ...this, deleting the old file.\n+\t* gcc.target/powerpc/vec-gnb-9.c: Rename to...\n+\t* gcc.target/powerpc/vec-gnb-1.c: ...this, deleting the old file.\n+\t* gcc.target/powerpc/vec-gnb-10.c: Rename to...\n+\t* gcc.target/powerpc/vec-gnb-2.c: ...this, deleting the old file.\n+\t* gcc.target/powerpc/vec-gnb-3.c: Delete.\n+\t* gcc.target/powerpc/vec-gnb-4.c: Delete.\n+\t* gcc.target/powerpc/vec-gnb-5.c: Delete.\n+\t* gcc.target/powerpc/vec-gnb-6.c: Delete.\n+\t* gcc.target/powerpc/vec-gnb-7.c: Delete.\n+\n 2020-05-11  Carl Love  <cel@us.ibm.com>\n \n \t* gcc.target/powerpc/xxgenpc-runnable.c: New."}, {"sha": "6fe0cbd8875884f0bf4a205fddd686da19494f67", "filename": "gcc/testsuite/gcc.target/powerpc/vec-cntlzm-0.c", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebd168b443d946f9381d012176e38598987b133/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-cntlzm-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebd168b443d946f9381d012176e38598987b133/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-cntlzm-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-cntlzm-0.c?ref=3ebd168b443d946f9381d012176e38598987b133", "patch": "@@ -6,10 +6,10 @@\n extern void abort (void);\n \n vector unsigned long long int\n-do_vec_clzm (vector unsigned long long int source,\n+do_vec_cntlzm (vector unsigned long long int source,\n \t     vector unsigned long long int mask)\n {\n-  return vec_clzm (source, mask);\n+  return vec_cntlzm (source, mask);\n }\n \n int main (int argc, char *argv [])\n@@ -39,13 +39,13 @@ int main (int argc, char *argv [])\n   vector unsigned long long int result_ba = { 2, 0 };\n   vector unsigned long long int result_bb = { 0, 1 };\n \n-  if (!vec_all_eq (do_vec_clzm (source_a, mask_a), result_aa))\n+  if (!vec_all_eq (do_vec_cntlzm (source_a, mask_a), result_aa))\n     abort ();\n-  if (!vec_all_eq (do_vec_clzm (source_a, mask_b), result_ab))\n+  if (!vec_all_eq (do_vec_cntlzm (source_a, mask_b), result_ab))\n     abort ();\n-  if (!vec_all_eq (do_vec_clzm (source_b, mask_a), result_ba))\n+  if (!vec_all_eq (do_vec_cntlzm (source_b, mask_a), result_ba))\n     abort ();\n-  if (!vec_all_eq (do_vec_clzm (source_b, mask_b), result_bb))\n+  if (!vec_all_eq (do_vec_cntlzm (source_b, mask_b), result_bb))\n     abort ();\n \n   return 0;", "previous_filename": "gcc/testsuite/gcc.target/powerpc/vec-clzm-0.c"}, {"sha": "7e058ed88431880f539903bb11e3b42ff5f36372", "filename": "gcc/testsuite/gcc.target/powerpc/vec-cntlzm-1.c", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebd168b443d946f9381d012176e38598987b133/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-cntlzm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebd168b443d946f9381d012176e38598987b133/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-cntlzm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-cntlzm-1.c?ref=3ebd168b443d946f9381d012176e38598987b133", "patch": "@@ -7,10 +7,10 @@\n extern void abort (void);\n \n vector unsigned long long int\n-do_vec_clzm (vector unsigned long long int source,\n+do_vec_cntlzm (vector unsigned long long int source,\n \t     vector unsigned long long int mask)\n {\n-  return vec_clzm (source, mask);\n+  return vec_cntlzm (source, mask);\n }\n \n int main (int argc, char *argv [])\n@@ -40,13 +40,13 @@ int main (int argc, char *argv [])\n   vector unsigned long long int result_ba = { 2, 0 };\n   vector unsigned long long int result_bb = { 0, 1 };\n \n-  if (!vec_all_eq (do_vec_clzm (source_a, mask_a), result_aa))\n+  if (!vec_all_eq (do_vec_cntlzm (source_a, mask_a), result_aa))\n     abort ();\n-  if (!vec_all_eq (do_vec_clzm (source_a, mask_b), result_ab))\n+  if (!vec_all_eq (do_vec_cntlzm (source_a, mask_b), result_ab))\n     abort ();\n-  if (!vec_all_eq (do_vec_clzm (source_b, mask_a), result_ba))\n+  if (!vec_all_eq (do_vec_cntlzm (source_b, mask_a), result_ba))\n     abort ();\n-  if (!vec_all_eq (do_vec_clzm (source_b, mask_b), result_bb))\n+  if (!vec_all_eq (do_vec_cntlzm (source_b, mask_b), result_bb))\n     abort ();\n \n   return 0;", "previous_filename": "gcc/testsuite/gcc.target/powerpc/vec-clzm-1.c"}, {"sha": "94fac3bf81729b2e82f70b64fded6496aacdc605", "filename": "gcc/testsuite/gcc.target/powerpc/vec-cnttzm-0.c", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebd168b443d946f9381d012176e38598987b133/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-cnttzm-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebd168b443d946f9381d012176e38598987b133/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-cnttzm-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-cnttzm-0.c?ref=3ebd168b443d946f9381d012176e38598987b133", "patch": "@@ -6,10 +6,10 @@\n extern void abort (void);\n \n vector unsigned long long int\n-do_vec_ctzm (vector unsigned long long int source,\n+do_vec_cnttzm (vector unsigned long long int source,\n \t     vector unsigned long long int mask)\n {\n-  return vec_ctzm (source, mask);\n+  return vec_cnttzm (source, mask);\n }\n \n int main (int argc, char *argv [])\n@@ -39,13 +39,13 @@ int main (int argc, char *argv [])\n   vector unsigned long long int result_ba = { 0, 0 };\n   vector unsigned long long int result_bb = { 1, 2 };\n \n-  if (!vec_all_eq (do_vec_ctzm (source_a, mask_a), result_aa))\n+  if (!vec_all_eq (do_vec_cnttzm (source_a, mask_a), result_aa))\n     abort ();\n-  if (!vec_all_eq (do_vec_ctzm (source_a, mask_b), result_ab))\n+  if (!vec_all_eq (do_vec_cnttzm (source_a, mask_b), result_ab))\n     abort ();\n-  if (!vec_all_eq (do_vec_ctzm (source_b, mask_a),result_ba))\n+  if (!vec_all_eq (do_vec_cnttzm (source_b, mask_a),result_ba))\n     abort ();\n-  if (!vec_all_eq (do_vec_ctzm (source_b, mask_b), result_bb))\n+  if (!vec_all_eq (do_vec_cnttzm (source_b, mask_b), result_bb))\n     abort ();\n \n   return 0;", "previous_filename": "gcc/testsuite/gcc.target/powerpc/vec-ctzm-0.c"}, {"sha": "27ff3bd49614dcac0b55e0ace7267f0a538b826b", "filename": "gcc/testsuite/gcc.target/powerpc/vec-cnttzm-1.c", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebd168b443d946f9381d012176e38598987b133/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-cnttzm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebd168b443d946f9381d012176e38598987b133/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-cnttzm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-cnttzm-1.c?ref=3ebd168b443d946f9381d012176e38598987b133", "patch": "@@ -7,10 +7,10 @@\n extern void abort (void);\n \n vector unsigned long long int\n-do_vec_ctzm (vector unsigned long long int source,\n+do_vec_cnttzm (vector unsigned long long int source,\n \t     vector unsigned long long int mask)\n {\n-  return vec_ctzm (source, mask);\n+  return vec_cnttzm (source, mask);\n }\n \n int main (int argc, char *argv [])\n@@ -40,13 +40,13 @@ int main (int argc, char *argv [])\n   vector unsigned long long int result_ba = { 0, 0 };\n   vector unsigned long long int result_bb = { 1, 2 };\n \n-  if (!vec_all_eq (do_vec_ctzm (source_a, mask_a), result_aa))\n+  if (!vec_all_eq (do_vec_cnttzm (source_a, mask_a), result_aa))\n     abort ();\n-  if (!vec_all_eq (do_vec_ctzm (source_a, mask_b), result_ab))\n+  if (!vec_all_eq (do_vec_cnttzm (source_a, mask_b), result_ab))\n     abort ();\n-  if (!vec_all_eq (do_vec_ctzm (source_b, mask_a),result_ba))\n+  if (!vec_all_eq (do_vec_cnttzm (source_b, mask_a),result_ba))\n     abort ();\n-  if (!vec_all_eq (do_vec_ctzm (source_b, mask_b), result_bb))\n+  if (!vec_all_eq (do_vec_cnttzm (source_b, mask_b), result_bb))\n     abort ();\n \n   return 0;", "previous_filename": "gcc/testsuite/gcc.target/powerpc/vec-ctzm-1.c"}, {"sha": "f18bb16ffb2b51c88aee99b67f0689a19dc4ef07", "filename": "gcc/testsuite/gcc.target/powerpc/vec-gnb-0.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebd168b443d946f9381d012176e38598987b133/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebd168b443d946f9381d012176e38598987b133/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-0.c?ref=3ebd168b443d946f9381d012176e38598987b133", "patch": "@@ -5,10 +5,8 @@\n \n extern void abort (void);\n \n-/* This test is replicated for every different vector type since\n-   vec_gnb is polymorphic.  */\n unsigned long long int\n-do_vec_gnb (vector unsigned char source, int stride)\n+do_vec_gnb (vector unsigned __int128 source, int stride)\n {\n   switch (stride)\n     {\n@@ -46,15 +44,15 @@ main (int argc, char *argv [])\n \n   /* The last array element appears in the left-most (first) bit\n      positions of the vector register.  */\n-  vector unsigned char source_a = {\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x88, 0x88, 0x88, 0x88 };\n-  vector unsigned char source_b = {\n-    0, 0, 0, 0, 0, 0, 0, 0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 };\n-  vector unsigned char source_c = {\n-    0, 0, 0, 0, 0, 0, 0, 0, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88 };\n-  vector unsigned char source_d = {\n-    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,\n-    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 };\n+  vector unsigned __int128 source_a =\n+    { ((unsigned __int128) 0x8888888800000000ull) << 64 };\n+  vector unsigned __int128 source_b =\n+    { ((unsigned __int128) 0x8080808080808080ull) << 64 };\n+  vector unsigned __int128 source_c =\n+    { ((unsigned __int128) 0x8888888888888888ull) << 64 };\n+  vector unsigned __int128 source_d =\n+    { 0x8080808080808080ull |\n+      ((unsigned __int128) 0x8080808080808080ull) << 64 };\n \n   unsigned long long int results [] =\n     { 0xaaaa000000000000ull, 0xaaaa000000000000ull,"}, {"sha": "ee9c44f88b2c29c124330954b09acd1dca5a0129", "filename": "gcc/testsuite/gcc.target/powerpc/vec-gnb-1.c", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebd168b443d946f9381d012176e38598987b133/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebd168b443d946f9381d012176e38598987b133/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-1.c?ref=3ebd168b443d946f9381d012176e38598987b133", "patch": "@@ -6,10 +6,8 @@\n \n extern void abort (void);\n \n-/* This test is replicated for every different vector type since\n-   vec_gnb is polymorphic.  */\n unsigned long long int\n-do_vec_gnb (vector unsigned char source, int stride)\n+do_vec_gnb (vector unsigned __int128 source, int stride)\n {\n   switch (stride)\n     {\n@@ -47,15 +45,15 @@ main (int argc, char *argv [])\n \n   /* The last array element appears in the left-most (first) bit\n      positions of the vector register.  */\n-  vector unsigned char source_a = {\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x88, 0x88, 0x88, 0x88 };\n-  vector unsigned char source_b = {\n-    0, 0, 0, 0, 0, 0, 0, 0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 };\n-  vector unsigned char source_c = {\n-    0, 0, 0, 0, 0, 0, 0, 0, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88 };\n-  vector unsigned char source_d = {\n-    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,\n-    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 };\n+  vector unsigned __int128 source_a =\n+    { ((unsigned __int128) 0x8888888800000000ull) << 64 };\n+  vector unsigned __int128 source_b =\n+    { ((unsigned __int128) 0x8080808080808080ull) << 64 };\n+  vector unsigned __int128 source_c =\n+    { ((unsigned __int128) 0x8888888888888888ull) << 64 };\n+  vector unsigned __int128 source_d =\n+    { 0x8080808080808080ull |\n+      ((unsigned __int128) 0x8080808080808080ull) << 64 };\n \n   unsigned long long int results [] =\n     { 0xaaaa000000000000ull, 0xaaaa000000000000ull,\n@@ -72,4 +70,3 @@ main (int argc, char *argv [])\n \n   return 0;\n }\n-"}, {"sha": "73ff0d9fea7bfc92b557a01879cf4b1abf315ad6", "filename": "gcc/testsuite/gcc.target/powerpc/vec-gnb-10.c", "status": "removed", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-10.c?ref=b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2", "patch": "@@ -1,72 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-mdejagnu-cpu=future\" } */\n-\n-#include <altivec.h>\n-\n-extern void abort (void);\n-\n-unsigned long long int\n-do_vec_gnb (vector unsigned char source, unsigned char stride)\n-{\n-  switch (stride)\n-    {\n-    case 2:\n-      return vec_gnb (source, 0);\t/* { dg-error \"between 2 and 7\" } */\n-    case 3:\n-      return vec_gnb (source, -1);\t/* { dg-error \"between 2 and 7\" } */\n-    case 4:\n-      return vec_gnb (source, 8);\t/* { dg-error \"between 2 and 7\" } */\n-    case 5:\n-      return vec_gnb (source, 1);\t/* { dg-error \"between 2 and 7\" } */\n-    case 6:\n-      return vec_gnb (source, stride);\t/* { dg-error \"unsigned literal\" } */\n-    case 7:\n-      return vec_gnb (source, 7);\n-\n-    default:\n-      /* Illegal value of stride */\n-      abort ();\n-      return 0;\n-    }\n-}\n-\n-int\n-main (int argc, char *argv [])\n-{\n-  /* For result = 0xaaaa_0000_0000_0000, use:\n-      stride = 2: binary 1x0x_1x0x_1x0x_... = 0x8888_8888_0000_0000, 0\n-      stride = 4: binary 1xxx_0xxx_1xxx_0xxxx = 0x8080_8080_8080_8080, 0\n-\n-     For result = 0xaaaa_aaaa_0000_0000, use:\n-      stride = 2: source = 0x8888_8888_8888_8888, 0x0 }\n-      stride = 4: source = { 0x8080_8080_8080_8080, 0x8080_8080_8080_8080 }\n-  */\n-\n-  /* The last array element appears in the left-most (first) bit\n-     positions of the vector register.  */\n-  vector unsigned char source_a = {\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x88, 0x88, 0x88, 0x88 };\n-  vector unsigned char source_b = {\n-    0, 0, 0, 0, 0, 0, 0, 0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 };\n-  vector unsigned char source_c = {\n-    0, 0, 0, 0, 0, 0, 0, 0, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88 };\n-  vector unsigned char source_d = {\n-    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,\n-    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 };\n-\n-  unsigned long long int results [] =\n-    { 0xaaaa000000000000ull, 0xaaaa000000000000ull,\n-      0xaaaaaaaa00000000ull, 0xaaaaaaaa00000000ull };\n-\n-  if (do_vec_gnb (source_a, 2) != results [0])\n-    abort ();\n-  if (do_vec_gnb (source_b, 4) != results [1])\n-    abort ();\n-  if (do_vec_gnb (source_c, 2) != results [2])\n-    abort ();\n-  if (do_vec_gnb (source_d, 4) != results [3])\n-    abort ();\n-\n-  return 0;\n-}\n-"}, {"sha": "591f701e820d7bfa1787aaf149fa9f95b878dcd1", "filename": "gcc/testsuite/gcc.target/powerpc/vec-gnb-2.c", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebd168b443d946f9381d012176e38598987b133/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebd168b443d946f9381d012176e38598987b133/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-2.c?ref=3ebd168b443d946f9381d012176e38598987b133", "patch": "@@ -5,23 +5,21 @@\n \n extern void abort (void);\n \n-/* This test is replicated for every different vector type since\n-   vec_gnb is polymorphic.  */\n unsigned long long int\n-do_vec_gnb (vector unsigned short int source, int stride)\n+do_vec_gnb (vector unsigned __int128 source, int stride)\n {\n   switch (stride)\n     {\n     case 2:\n-      return vec_gnb (source, 2);\n+      return vec_gnb (source, 0);\t/* { dg-error \"between 2 and 7\" } */\n     case 3:\n-      return vec_gnb (source, 3);\n+      return vec_gnb (source, -1);\t/* { dg-error \"between 2 and 7\" } */\n     case 4:\n-      return vec_gnb (source, 4);\n+      return vec_gnb (source, 8);\t/* { dg-error \"between 2 and 7\" } */\n     case 5:\n-      return vec_gnb (source, 5);\n+      return vec_gnb (source, 1);\t/* { dg-error \"between 2 and 7\" } */\n     case 6:\n-      return vec_gnb (source, 6);\n+      return vec_gnb (source, stride);\t/* { dg-error \"unsigned literal\" } */\n     case 7:\n       return vec_gnb (source, 7);\n \n@@ -46,13 +44,15 @@ main (int argc, char *argv [])\n \n   /* The last array element appears in the left-most (first) bit\n      positions of the vector register.  */\n-  vector unsigned short int source_a = { 0, 0, 0, 0, 0, 0, 0x8888, 0x8888 };\n-  vector unsigned short int source_b = {\n-    0, 0, 0, 0, 0x8080, 0x8080, 0x8080, 0x8080 };\n-  vector unsigned short int source_c = {\n-    0, 0, 0, 0, 0x8888, 0x8888, 0x8888, 0x8888 };\n-  vector unsigned short int source_d = {\n-    0x8080, 0x8080, 0x8080, 0x8080, 0x8080, 0x8080, 0x8080, 0x8080 };\n+  vector unsigned __int128 source_a =\n+    { ((unsigned __int128) 0x8888888800000000ull) << 64 };\n+  vector unsigned __int128 source_b =\n+    { ((unsigned __int128) 0x8080808080808080ull) << 64 };\n+  vector unsigned __int128 source_c =\n+    { ((unsigned __int128) 0x8888888888888888ull) << 64 };\n+  vector unsigned __int128 source_d =\n+    { 0x8080808080808080ull |\n+      ((unsigned __int128) 0x8080808080808080ull) << 64 };\n \n   unsigned long long int results [] =\n     { 0xaaaa000000000000ull, 0xaaaa000000000000ull,\n@@ -70,4 +70,3 @@ main (int argc, char *argv [])\n   return 0;\n }\n \n-/* { dg-final { scan-assembler {\\mvgnb\\M} } } */"}, {"sha": "f36b91a83e5a66e49668705e7021a6facb534660", "filename": "gcc/testsuite/gcc.target/powerpc/vec-gnb-3.c", "status": "removed", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-3.c?ref=b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2", "patch": "@@ -1,72 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-require-effective-target powerpc_future_hw } */\n-/* { dg-options \"-mdejagnu-cpu=future\" } */\n-\n-#include <altivec.h>\n-\n-extern void abort (void);\n-\n-/* This test is replicated for every different vector type since\n-   vec_gnb is polymorphic.  */\n-unsigned long long int\n-do_vec_gnb (vector unsigned short int source, int stride)\n-{\n-  switch (stride)\n-    {\n-    case 2:\n-      return vec_gnb (source, 2);\n-    case 3:\n-      return vec_gnb (source, 3);\n-    case 4:\n-      return vec_gnb (source, 4);\n-    case 5:\n-      return vec_gnb (source, 5);\n-    case 6:\n-      return vec_gnb (source, 6);\n-    case 7:\n-      return vec_gnb (source, 7);\n-\n-    default:\n-      /* Illegal value of stride */\n-      abort ();\n-      return 0;\n-    }\n-}\n-\n-int\n-main (int argc, char *argv [])\n-{\n-  /* For result = 0xaaaa_0000_0000_0000, use:\n-      stride = 2: binary 1x0x_1x0x_1x0x_... = 0x8888_8888_0000_0000, 0\n-      stride = 4: binary 1xxx_0xxx_1xxx_0xxxx = 0x8080_8080_8080_8080, 0\n-\n-     For result = 0xaaaa_aaaa_0000_0000, use:\n-      stride = 2: source = 0x8888_8888_8888_8888, 0x0 }\n-      stride = 4: source = { 0x8080_8080_8080_8080, 0x8080_8080_8080_8080 }\n-  */\n-\n-  /* The last array element appears in the left-most (first) bit\n-     positions of the vector register.  */\n-  vector unsigned short int source_a = { 0, 0, 0, 0, 0, 0, 0x8888, 0x8888 };\n-  vector unsigned short int source_b = {\n-    0, 0, 0, 0, 0x8080, 0x8080, 0x8080, 0x8080 };\n-  vector unsigned short int source_c = {\n-    0, 0, 0, 0, 0x8888, 0x8888, 0x8888, 0x8888 };\n-  vector unsigned short int source_d = {\n-    0x8080, 0x8080, 0x8080, 0x8080, 0x8080, 0x8080, 0x8080, 0x8080 };\n-\n-  unsigned long long int results [] =\n-    { 0xaaaa000000000000ull, 0xaaaa000000000000ull,\n-      0xaaaaaaaa00000000ull, 0xaaaaaaaa00000000ull };\n-\n-  if (do_vec_gnb (source_a, 2) != results [0])\n-    abort ();\n-  if (do_vec_gnb (source_b, 4) != results [1])\n-    abort ();\n-  if (do_vec_gnb (source_c, 2) != results [2])\n-    abort ();\n-  if (do_vec_gnb (source_d, 4) != results [3])\n-    abort ();\n-\n-  return 0;\n-}"}, {"sha": "df312ae1b285b3422e649fbecc4533058a1bb07d", "filename": "gcc/testsuite/gcc.target/powerpc/vec-gnb-4.c", "status": "removed", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-4.c?ref=b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2", "patch": "@@ -1,71 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-mdejagnu-cpu=future\" } */\n-\n-#include <altivec.h>\n-\n-extern void abort (void);\n-\n-/* This test is replicated for every different vector type since\n-   vec_gnb is polymorphic.  */\n-unsigned long long int\n-do_vec_gnb (vector unsigned int source, int stride)\n-{\n-  switch (stride)\n-    {\n-    case 2:\n-      return vec_gnb (source, 2);\n-    case 3:\n-      return vec_gnb (source, 3);\n-    case 4:\n-      return vec_gnb (source, 4);\n-    case 5:\n-      return vec_gnb (source, 5);\n-    case 6:\n-      return vec_gnb (source, 6);\n-    case 7:\n-      return vec_gnb (source, 7);\n-\n-    default:\n-      /* Illegal value of stride */\n-      abort ();\n-      return 0;\n-    }\n-}\n-\n-int\n-main (int argc, char *argv [])\n-{\n-  /* For result = 0xaaaa_0000_0000_0000, use:\n-      stride = 2: binary 1x0x_1x0x_1x0x_... = 0x8888_8888_0000_0000, 0\n-      stride = 4: binary 1xxx_0xxx_1xxx_0xxxx = 0x8080_8080_8080_8080, 0\n-\n-     For result = 0xaaaa_aaaa_0000_0000, use:\n-      stride = 2: source = 0x8888_8888_8888_8888, 0x0 }\n-      stride = 4: source = { 0x8080_8080_8080_8080, 0x8080_8080_8080_8080 }\n-  */\n-\n-  /* The last array element appears in the left-most (first) bit\n-     positions of the vector register.  */\n-  vector unsigned int source_a = { 0, 0, 0, 0x88888888 };\n-  vector unsigned int source_b = { 0, 0, 0x80808080, 0x80808080 };\n-  vector unsigned int source_c = { 0, 0, 0x88888888, 0x88888888 };\n-  vector unsigned int source_d =\n-    { 0x80808080, 0x80808080, 0x80808080, 0x80808080 };\n-\n-  unsigned long long int results [] =\n-    { 0xaaaa000000000000ull, 0xaaaa000000000000ull,\n-      0xaaaaaaaa00000000ull, 0xaaaaaaaa00000000ull };\n-\n-  if (do_vec_gnb (source_a, 2) != results [0])\n-    abort ();\n-  if (do_vec_gnb (source_b, 4) != results [1])\n-    abort ();\n-  if (do_vec_gnb (source_c, 2) != results [2])\n-    abort ();\n-  if (do_vec_gnb (source_d, 4) != results [3])\n-    abort ();\n-\n-  return 0;\n-}\n-\n-/* { dg-final { scan-assembler {\\mvgnb\\M} } } */"}, {"sha": "1c3c3fa72c0fee889d00b90d06c155135f395cf2", "filename": "gcc/testsuite/gcc.target/powerpc/vec-gnb-5.c", "status": "removed", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-5.c?ref=b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2", "patch": "@@ -1,71 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-require-effective-target powerpc_future_hw } */\n-/* { dg-options \"-mdejagnu-cpu=future\" } */\n-\n-#include <altivec.h>\n-\n-extern void abort (void);\n-\n-/* This test is replicated for every different vector type since\n-   vec_gnb is polymorphic.  */\n-unsigned long long int\n-do_vec_gnb (vector unsigned int source, int stride)\n-{\n-  switch (stride)\n-    {\n-    case 2:\n-      return vec_gnb (source, 2);\n-    case 3:\n-      return vec_gnb (source, 3);\n-    case 4:\n-      return vec_gnb (source, 4);\n-    case 5:\n-      return vec_gnb (source, 5);\n-    case 6:\n-      return vec_gnb (source, 6);\n-    case 7:\n-      return vec_gnb (source, 7);\n-\n-    default:\n-      /* Illegal value of stride */\n-      abort ();\n-      return 0;\n-    }\n-}\n-\n-int\n-main (int argc, char *argv [])\n-{\n-  /* For result = 0xaaaa_0000_0000_0000, use:\n-      stride = 2: binary 1x0x_1x0x_1x0x_... = 0x8888_8888_0000_0000, 0\n-      stride = 4: binary 1xxx_0xxx_1xxx_0xxxx = 0x8080_8080_8080_8080, 0\n-\n-     For result = 0xaaaa_aaaa_0000_0000, use:\n-      stride = 2: source = 0x8888_8888_8888_8888, 0x0 }\n-      stride = 4: source = { 0x8080_8080_8080_8080, 0x8080_8080_8080_8080 }\n-  */\n-\n-  /* The last array element appears in the left-most (first) bit\n-     positions of the vector register.  */\n-  vector unsigned int source_a = { 0, 0, 0, 0x88888888 };\n-  vector unsigned int source_b = { 0, 0, 0x80808080, 0x80808080 };\n-  vector unsigned int source_c = { 0, 0, 0x88888888, 0x88888888 };\n-  vector unsigned int source_d =\n-    { 0x80808080, 0x80808080, 0x80808080, 0x80808080 };\n-\n-  unsigned long long int results [] =\n-    { 0xaaaa000000000000ull, 0xaaaa000000000000ull,\n-      0xaaaaaaaa00000000ull, 0xaaaaaaaa00000000ull };\n-\n-  if (do_vec_gnb (source_a, 2) != results [0])\n-    abort ();\n-  if (do_vec_gnb (source_b, 4) != results [1])\n-    abort ();\n-  if (do_vec_gnb (source_c, 2) != results [2])\n-    abort ();\n-  if (do_vec_gnb (source_d, 4) != results [3])\n-    abort ();\n-\n-  return 0;\n-}\n-"}, {"sha": "a6dc78a3e98fe45d52ad0ab66509df6d2074c65c", "filename": "gcc/testsuite/gcc.target/powerpc/vec-gnb-6.c", "status": "removed", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-6.c?ref=b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2", "patch": "@@ -1,71 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-mdejagnu-cpu=future\" } */\n-\n-#include <altivec.h>\n-\n-extern void abort (void);\n-\n-/* This test is replicated for every different vector type since\n-   vec_gnb is polymorphic.  */\n-unsigned long long int\n-do_vec_gnb (vector unsigned long long int source, int stride)\n-{\n-  switch (stride)\n-    {\n-    case 2:\n-      return vec_gnb (source, 2);\n-    case 3:\n-      return vec_gnb (source, 3);\n-    case 4:\n-      return vec_gnb (source, 4);\n-    case 5:\n-      return vec_gnb (source, 5);\n-    case 6:\n-      return vec_gnb (source, 6);\n-    case 7:\n-      return vec_gnb (source, 7);\n-\n-    default:\n-      /* Illegal value of stride */\n-      abort ();\n-      return 0;\n-    }\n-}\n-\n-int\n-main (int argc, char *argv [])\n-{\n-  /* For result = 0xaaaa_0000_0000_0000, use:\n-      stride = 2: binary 1x0x_1x0x_1x0x_... = 0x8888_8888_0000_0000, 0\n-      stride = 4: binary 1xxx_0xxx_1xxx_0xxxx = 0x8080_8080_8080_8080, 0\n-\n-     For result = 0xaaaa_aaaa_0000_0000, use:\n-      stride = 2: source = 0x8888_8888_8888_8888, 0x0 }\n-      stride = 4: source = { 0x8080_8080_8080_8080, 0x8080_8080_8080_8080 }\n-  */\n-\n-  /* The last array element appears in the left-most (first) bit\n-     positions of the vector register.  */\n-  vector unsigned long long int source_a = { 0, 0x8888888800000000ull };\n-  vector unsigned long long int source_b = { 0, 0x8080808080808080ull };\n-  vector unsigned long long int source_c = { 0, 0x8888888888888888ull };\n-  vector unsigned long long int source_d = { 0x8080808080808080ull,\n-\t\t\t\t\t     0x8080808080808080ull };\n-\n-  unsigned long long int results [] =\n-    { 0xaaaa000000000000ull, 0xaaaa000000000000ull,\n-      0xaaaaaaaa00000000ull, 0xaaaaaaaa00000000ull };\n-\n-  if (do_vec_gnb (source_a, 2) != results [0])\n-    abort ();\n-  if (do_vec_gnb (source_b, 4) != results [1])\n-    abort ();\n-  if (do_vec_gnb (source_c, 2) != results [2])\n-    abort ();\n-  if (do_vec_gnb (source_d, 4) != results [3])\n-    abort ();\n-\n-  return 0;\n-}\n-\n-/* { dg-final { scan-assembler {\\mvgnb\\M} } } */"}, {"sha": "bbacff986a081961226e852d51f1ade80132ddd4", "filename": "gcc/testsuite/gcc.target/powerpc/vec-gnb-7.c", "status": "removed", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-7.c?ref=b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2", "patch": "@@ -1,71 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-require-effective-target powerpc_future_hw } */\n-/* { dg-options \"-mdejagnu-cpu=future\" } */\n-\n-#include <altivec.h>\n-\n-extern void abort (void);\n-\n-/* This test is replicated for every different vector type since\n-   vec_gnb is polymorphic.  */\n-unsigned long long int\n-do_vec_gnb (vector unsigned long long int source, int stride)\n-{\n-  switch (stride)\n-    {\n-    case 2:\n-      return vec_gnb (source, 2);\n-    case 3:\n-      return vec_gnb (source, 3);\n-    case 4:\n-      return vec_gnb (source, 4);\n-    case 5:\n-      return vec_gnb (source, 5);\n-    case 6:\n-      return vec_gnb (source, 6);\n-    case 7:\n-      return vec_gnb (source, 7);\n-\n-    default:\n-      /* Illegal value of stride */\n-      abort ();\n-      return 0;\n-    }\n-}\n-\n-int\n-main (int argc, char *argv [])\n-{\n-  /* For result = 0xaaaa_0000_0000_0000, use:\n-      stride = 2: binary 1x0x_1x0x_1x0x_... = 0x8888_8888_0000_0000, 0\n-      stride = 4: binary 1xxx_0xxx_1xxx_0xxxx = 0x8080_8080_8080_8080, 0\n-\n-     For result = 0xaaaa_aaaa_0000_0000, use:\n-      stride = 2: source = 0x8888_8888_8888_8888, 0x0 }\n-      stride = 4: source = { 0x8080_8080_8080_8080, 0x8080_8080_8080_8080 }\n-  */\n-\n-  /* The last array element appears in the left-most (first) bit\n-     positions of the vector register.  */\n-  vector unsigned long long int source_a = { 0, 0x8888888800000000ull };\n-  vector unsigned long long int source_b = { 0, 0x8080808080808080ull };\n-  vector unsigned long long int source_c = { 0, 0x8888888888888888ull };\n-  vector unsigned long long int source_d = { 0x8080808080808080ull,\n-\t\t\t\t\t     0x8080808080808080ull };\n-\n-  unsigned long long int results [] =\n-    { 0xaaaa000000000000ull, 0xaaaa000000000000ull,\n-      0xaaaaaaaa00000000ull, 0xaaaaaaaa00000000ull };\n-\n-  if (do_vec_gnb (source_a, 2) != results [0])\n-    abort ();\n-  if (do_vec_gnb (source_b, 4) != results [1])\n-    abort ();\n-  if (do_vec_gnb (source_c, 2) != results [2])\n-    abort ();\n-  if (do_vec_gnb (source_d, 4) != results [3])\n-    abort ();\n-\n-  return 0;\n-}\n-"}, {"sha": "23c16e51d48d55551765f40f91d351a3c9f89329", "filename": "gcc/testsuite/gcc.target/powerpc/vec-gnb-8.c", "status": "removed", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-8.c?ref=b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2", "patch": "@@ -1,75 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-mdejagnu-cpu=future\" } */\n-\n-#include <altivec.h>\n-\n-extern void abort (void);\n-\n-/* This test is replicated for every different vector type since\n-   vec_gnb is polymorphic.  */\n-unsigned long long int\n-do_vec_gnb (vector unsigned __int128 source, int stride)\n-{\n-  switch (stride)\n-    {\n-    case 2:\n-      return vec_gnb (source, 2);\n-    case 3:\n-      return vec_gnb (source, 3);\n-    case 4:\n-      return vec_gnb (source, 4);\n-    case 5:\n-      return vec_gnb (source, 5);\n-    case 6:\n-      return vec_gnb (source, 6);\n-    case 7:\n-      return vec_gnb (source, 7);\n-\n-    default:\n-      /* Illegal value of stride */\n-      abort ();\n-      return 0;\n-    }\n-}\n-\n-int\n-main (int argc, char *argv [])\n-{\n-  /* For result = 0xaaaa_0000_0000_0000, use:\n-      stride = 2: binary 1x0x_1x0x_1x0x_... = 0x8888_8888_0000_0000, 0\n-      stride = 4: binary 1xxx_0xxx_1xxx_0xxxx = 0x8080_8080_8080_8080, 0\n-\n-     For result = 0xaaaa_aaaa_0000_0000, use:\n-      stride = 2: source = 0x8888_8888_8888_8888, 0x0 }\n-      stride = 4: source = { 0x8080_8080_8080_8080, 0x8080_8080_8080_8080 }\n-  */\n-\n-  /* The last array element appears in the left-most (first) bit\n-     positions of the vector register.  */\n-  vector unsigned __int128 source_a =\n-    { ((unsigned __int128) 0x8888888800000000ull) << 64 };\n-  vector unsigned __int128 source_b =\n-    { ((unsigned __int128) 0x8080808080808080ull) << 64 };\n-  vector unsigned __int128 source_c =\n-    { ((unsigned __int128) 0x8888888888888888ull) << 64 };\n-  vector unsigned __int128 source_d =\n-    { 0x8080808080808080ull |\n-      ((unsigned __int128) 0x8080808080808080ull) << 64 };\n-\n-  unsigned long long int results [] =\n-    { 0xaaaa000000000000ull, 0xaaaa000000000000ull,\n-      0xaaaaaaaa00000000ull, 0xaaaaaaaa00000000ull };\n-\n-  if (do_vec_gnb (source_a, 2) != results [0])\n-    abort ();\n-  if (do_vec_gnb (source_b, 4) != results [1])\n-    abort ();\n-  if (do_vec_gnb (source_c, 2) != results [2])\n-    abort ();\n-  if (do_vec_gnb (source_d, 4) != results [3])\n-    abort ();\n-\n-  return 0;\n-}\n-\n-/* { dg-final { scan-assembler {\\mvgnb\\M} } } */"}, {"sha": "659e802d819f6bf6747d6f86aecebabe4e77daa1", "filename": "gcc/testsuite/gcc.target/powerpc/vec-gnb-9.c", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-gnb-9.c?ref=b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2", "patch": "@@ -1,74 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-require-effective-target powerpc_future_hw } */\n-/* { dg-options \"-mdejagnu-cpu=future\" } */\n-\n-#include <altivec.h>\n-\n-extern void abort (void);\n-\n-/* This test is replicated for every different vector type since\n-   vec_gnb is polymorphic.  */\n-unsigned long long int\n-do_vec_gnb (vector unsigned __int128 source, int stride)\n-{\n-  switch (stride)\n-    {\n-    case 2:\n-      return vec_gnb (source, 2);\n-    case 3:\n-      return vec_gnb (source, 3);\n-    case 4:\n-      return vec_gnb (source, 4);\n-    case 5:\n-      return vec_gnb (source, 5);\n-    case 6:\n-      return vec_gnb (source, 6);\n-    case 7:\n-      return vec_gnb (source, 7);\n-\n-    default:\n-      /* Illegal value of stride */\n-      abort ();\n-      return 0;\n-    }\n-}\n-\n-int\n-main (int argc, char *argv [])\n-{\n-  /* For result = 0xaaaa_0000_0000_0000, use:\n-      stride = 2: binary 1x0x_1x0x_1x0x_... = 0x8888_8888_0000_0000, 0\n-      stride = 4: binary 1xxx_0xxx_1xxx_0xxxx = 0x8080_8080_8080_8080, 0\n-\n-     For result = 0xaaaa_aaaa_0000_0000, use:\n-      stride = 2: source = 0x8888_8888_8888_8888, 0x0 }\n-      stride = 4: source = { 0x8080_8080_8080_8080, 0x8080_8080_8080_8080 }\n-  */\n-\n-  /* The last array element appears in the left-most (first) bit\n-     positions of the vector register.  */\n-  vector unsigned __int128 source_a =\n-    { ((unsigned __int128) 0x8888888800000000ull) << 64 };\n-  vector unsigned __int128 source_b =\n-    { ((unsigned __int128) 0x8080808080808080ull) << 64 };\n-  vector unsigned __int128 source_c =\n-    { ((unsigned __int128) 0x8888888888888888ull) << 64 };\n-  vector unsigned __int128 source_d =\n-    { 0x8080808080808080ull |\n-      ((unsigned __int128) 0x8080808080808080ull) << 64 };\n-\n-  unsigned long long int results [] =\n-    { 0xaaaa000000000000ull, 0xaaaa000000000000ull,\n-      0xaaaaaaaa00000000ull, 0xaaaaaaaa00000000ull };\n-\n-  if (do_vec_gnb (source_a, 2) != results [0])\n-    abort ();\n-  if (do_vec_gnb (source_b, 4) != results [1])\n-    abort ();\n-  if (do_vec_gnb (source_c, 2) != results [2])\n-    abort ();\n-  if (do_vec_gnb (source_d, 4) != results [3])\n-    abort ();\n-\n-  return 0;\n-}"}]}