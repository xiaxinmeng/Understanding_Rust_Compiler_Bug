{"sha": "adcb497bdba499d161d2e5e8de782bdd6f75d62c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRjYjQ5N2JkYmE0OTlkMTYxZDJlNWU4ZGU3ODJiZGQ2Zjc1ZDYyYw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-05-18T20:11:16Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-05-19T17:10:15Z"}, "message": "c++: Relax attribute on friend declaration checking [PR100596]\n\nIt turned out that there are codebases that profusely use GNU attributes\non friend declarations, so we have to dial back our checking and allow\nthem.  And for C++11 attributes let's just warn instead of giving\nerrors.\n\n\tPR c++/100596\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (any_non_type_attribute_p): Remove.\n\t* decl.c (grokdeclarator): Turn an error into a warning and only\n\twarn for standard attributes.\n\t* decl2.c (any_non_type_attribute_p): Remove.\n\t* parser.c (cp_parser_elaborated_type_specifier): Turn an error\n\tinto a warning and only warn for standard attributes.\n\t(cp_parser_member_declaration): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/friend7.C: Turn a few dg-warnings into dg-errors.\n\tRemove dg-errors for GNU attributes.\n\t* g++.dg/ext/attrib63.C: Remove dg-error.\n\t* g++.dg/cpp0x/friend8.C: New test.", "tree": {"sha": "a942fb6dd1ff181d3f39e0507b46db9045f88a9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a942fb6dd1ff181d3f39e0507b46db9045f88a9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adcb497bdba499d161d2e5e8de782bdd6f75d62c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adcb497bdba499d161d2e5e8de782bdd6f75d62c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adcb497bdba499d161d2e5e8de782bdd6f75d62c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adcb497bdba499d161d2e5e8de782bdd6f75d62c/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a911287e13d1a1f95259cb60c57293eabc2a27b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a911287e13d1a1f95259cb60c57293eabc2a27b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a911287e13d1a1f95259cb60c57293eabc2a27b9"}], "stats": {"total": 124, "additions": 77, "deletions": 47}, "files": [{"sha": "860ed795299345a066c5a47d238dce2c5f3d2c23", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcb497bdba499d161d2e5e8de782bdd6f75d62c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcb497bdba499d161d2e5e8de782bdd6f75d62c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=adcb497bdba499d161d2e5e8de782bdd6f75d62c", "patch": "@@ -6761,7 +6761,6 @@ extern tree grokbitfield (const cp_declarator *, cp_decl_specifier_seq *,\n \t\t\t  tree, tree, tree);\n extern tree splice_template_attributes\t\t(tree *, tree);\n extern bool any_dependent_type_attributes_p\t(tree);\n-extern bool any_non_type_attribute_p\t\t(tree);\n extern tree cp_reconstruct_complex_type\t\t(tree, tree);\n extern bool attributes_naming_typedef_ok\t(tree);\n extern void cplus_decl_attributes\t\t(tree *, tree, int);"}, {"sha": "28052df9f4532a1fc790a83e9a3728a732d6fd1b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcb497bdba499d161d2e5e8de782bdd6f75d62c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcb497bdba499d161d2e5e8de782bdd6f75d62c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=adcb497bdba499d161d2e5e8de782bdd6f75d62c", "patch": "@@ -13731,11 +13731,15 @@ grokdeclarator (const cp_declarator *declarator,\n \n \tif (friendp)\n \t  {\n-\t    if (attrlist && !funcdef_flag\n-\t\t/* Hack to allow attributes like vector_size on a friend.  */\n-\t\t&& any_non_type_attribute_p (*attrlist))\n-\t      error_at (id_loc, \"attribute appertains to a friend \"\n-\t\t\t\"declaration that is not a definition\");\n+\t    /* Packages tend to use GNU attributes on friends, so we only\n+\t       warn for standard attributes.  */\n+\t    if (attrlist && !funcdef_flag && cxx11_attribute_p (*attrlist))\n+\t      {\n+\t\t*attrlist = NULL_TREE;\n+\t\tif (warning_at (id_loc, OPT_Wattributes, \"attribute ignored\"))\n+\t\t  inform (id_loc, \"an attribute that appertains to a friend \"\n+\t\t\t  \"declaration that is not a definition is ignored\");\n+\t      }\n \t    /* Friends are treated specially.  */\n \t    if (ctype == current_class_type)\n \t      ;  /* We already issued a permerror.  */"}, {"sha": "89f874a32cc95f1fe9496481fd603df684951853", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcb497bdba499d161d2e5e8de782bdd6f75d62c/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcb497bdba499d161d2e5e8de782bdd6f75d62c/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=adcb497bdba499d161d2e5e8de782bdd6f75d62c", "patch": "@@ -1331,20 +1331,6 @@ any_dependent_type_attributes_p (tree attrs)\n   return false;\n }\n \n-/* True if ATTRS contains any attribute that does not require a type.  */\n-\n-bool\n-any_non_type_attribute_p (tree attrs)\n-{\n-  for (tree a = attrs; a; a = TREE_CHAIN (a))\n-    {\n-      const attribute_spec *as = lookup_attribute_spec (get_attribute_name (a));\n-      if (as && !as->type_required)\n-\treturn true;\n-    }\n-  return false;\n-}\n-\n /* Return true iff ATTRS are acceptable attributes to be applied in-place\n    to a typedef which gives a previously unnamed class or enum a name for\n    linkage purposes.  */"}, {"sha": "bc0505df502ffdb975dc67291a0915b9276dffc1", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcb497bdba499d161d2e5e8de782bdd6f75d62c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcb497bdba499d161d2e5e8de782bdd6f75d62c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=adcb497bdba499d161d2e5e8de782bdd6f75d62c", "patch": "@@ -19774,9 +19774,12 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n \t       && ! processing_explicit_instantiation)\n \twarning (OPT_Wattributes,\n \t\t \"attributes ignored on template instantiation\");\n-      else if (is_friend && attributes)\n-\terror (\"attribute appertains to a friend declaration that is not \"\n-\t       \"a definition\");\n+      else if (is_friend && cxx11_attribute_p (attributes))\n+\t{\n+\t  if (warning (OPT_Wattributes, \"attribute ignored\"))\n+\t    inform (input_location, \"an attribute that appertains to a friend \"\n+\t\t    \"declaration that is not a definition is ignored\");\n+\t}\n       else if (is_declaration && cp_parser_declares_only_class_p (parser))\n \tcplus_decl_attributes (&type, attributes, (int) ATTR_FLAG_TYPE_IN_PLACE);\n       else\n@@ -26064,17 +26067,23 @@ cp_parser_member_declaration (cp_parser* parser)\n \t\t   if (type && TREE_CODE (type) == TYPE_DECL)\n \t\t     type = TREE_TYPE (type);\n \t\t }\n+\t       /* Warn if an attribute cannot appear here, as per\n+\t\t  [dcl.attr.grammar]/5.  But not when declares_class_or_enum:\n+\t\t  we ignore attributes in elaborated-type-specifiers.  */\n+\t       if (!declares_class_or_enum\n+\t\t   && cxx11_attribute_p (decl_specifiers.attributes))\n+\t\t {\n+\t\t   decl_specifiers.attributes = NULL_TREE;\n+\t\t   if (warning_at (decl_spec_token_start->location,\n+\t\t\t\t   OPT_Wattributes, \"attribute ignored\"))\n+\t\t     inform (decl_spec_token_start->location, \"an attribute \"\n+\t\t\t     \"that appertains to a friend declaration that \"\n+\t\t\t     \"is not a definition is ignored\");\n+\t\t }\n \t       if (!type || !TYPE_P (type))\n \t\t error_at (decl_spec_token_start->location,\n \t\t\t   \"friend declaration does not name a class or \"\n \t\t\t   \"function\");\n-\t       /* Give an error if an attribute cannot appear here, as per\n-\t\t  [dcl.attr.grammar]/5.  But not when declares_class_or_enum:\n-\t\t  we ignore attributes in elaborated-type-specifiers.  */\n-\t       else if (!declares_class_or_enum && decl_specifiers.attributes)\n-\t\t error_at (decl_spec_token_start->location,\n-\t\t\t   \"attribute appertains to a friend declaration \"\n-\t\t\t   \"that is not a definition\");\n \t       else\n \t\t make_friend_class (current_class_type, type,\n \t\t\t\t    /*complain=*/true);"}, {"sha": "e1d5f449f5c9d7b70ab4449d3f7f46fc10859eb3", "filename": "gcc/testsuite/g++.dg/cpp0x/friend7.C", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcb497bdba499d161d2e5e8de782bdd6f75d62c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffriend7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcb497bdba499d161d2e5e8de782bdd6f75d62c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffriend7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffriend7.C?ref=adcb497bdba499d161d2e5e8de782bdd6f75d62c", "patch": "@@ -6,21 +6,21 @@ template<typename T1, typename T2>\n void foo (T1, T2);\n \n struct S {\n-  [[deprecated]] friend void f(); // { dg-error \"attribute appertains\" }\n+  [[deprecated]] friend void f(); // { dg-warning \"attribute ignored\" }\n   [[deprecated]] friend void f2() { }\n-  __attribute__((deprecated)) friend void f3(); // { dg-error \"attribute appertains\" }\n-  friend void f3 [[deprecated]] (); // { dg-error \"attribute appertains\" }\n+  __attribute__((deprecated)) friend void f3();\n+  friend void f3 [[deprecated]] (); // { dg-warning \"attribute ignored\" }\n   friend void f4 [[deprecated]] () { }\n-  [[deprecated]] friend void; // { dg-error \"attribute appertains\" }\n-  __attribute__((deprecated)) friend int; // { dg-error \"attribute appertains\" }\n-  friend __attribute__((deprecated)) int; // { dg-error \"attribute appertains\" }\n-  friend int __attribute__((deprecated)); // { dg-error \"attribute appertains\" }\n-  [[deprecated]] friend X; // { dg-error \"attribute appertains\" }\n+  [[deprecated]] friend void; // { dg-warning \"attribute ignored\" }\n+  __attribute__((deprecated)) friend int;\n+  friend __attribute__((deprecated)) int;\n+  friend int __attribute__((deprecated));\n+  [[deprecated]] friend X; // { dg-warning \"attribute ignored\" }\n   [[deprecated]] friend class N; // { dg-warning \"attribute ignored\" }\n-  friend class [[deprecated]] N2; // { dg-error \"attribute appertains\" }\n-  friend class __attribute__((deprecated)) N3; // { dg-error \"attribute appertains\" }\n-  [[deprecated]] friend void foo<>(int, int); // { dg-error \"attribute appertains\" }\n-  [[deprecated]] friend void ::foo(int, int); // { dg-error \"attribute appertains\" }\n+  friend class [[deprecated]] N2; // { dg-warning \"attribute ignored\" }\n+  friend class __attribute__((deprecated)) N3;\n+  [[deprecated]] friend void foo<>(int, int); // { dg-warning \"attribute ignored\" }\n+  [[deprecated]] friend void ::foo(int, int); // { dg-warning \"attribute ignored\" }\n   // { dg-bogus \"should have\" \"PR100339\" { xfail *-*-* } .-1 }\n };\n \n@@ -29,12 +29,12 @@ class node { };\n \n template<typename T>\n struct A {\n-  [[deprecated]] friend T; // { dg-error \"attribute appertains\" }\n+  [[deprecated]] friend T; // { dg-warning \"attribute ignored\" }\n   [[deprecated]] friend class node<T>; // { dg-warning \"attribute ignored\" }\n   template<typename>\n   [[deprecated]] friend class A; // { dg-warning \"attribute ignored\" }\n   template<typename>\n   [[deprecated]] friend void bar () { }\n   template<typename>\n-  [[deprecated]] friend void baz (); // { dg-error \"attribute appertains\" }\n+  [[deprecated]] friend void baz (); // { dg-warning \"attribute ignored\" }\n };"}, {"sha": "8d2a2d35d54e295968bdfe7506844037e68f1dd1", "filename": "gcc/testsuite/g++.dg/cpp0x/friend8.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcb497bdba499d161d2e5e8de782bdd6f75d62c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffriend8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcb497bdba499d161d2e5e8de782bdd6f75d62c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffriend8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffriend8.C?ref=adcb497bdba499d161d2e5e8de782bdd6f75d62c", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/100596\n+// { dg-do compile { target c++11 } }\n+\n+struct A\n+{\n+  __attribute((deprecated)) friend void f(A); // part of A API, definition in .C\n+  [[deprecated]] friend void f2(A); // { dg-warning \"ignored\" }\n+};\n+\n+int main()\n+{\n+  A a;\n+  f(a); // { dg-warning \"is deprecated\" }\n+  f2(a);\n+}"}, {"sha": "583779a9159f4316149daa54af23f201d8d1b4cc", "filename": "gcc/testsuite/g++.dg/ext/attrib63.C", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcb497bdba499d161d2e5e8de782bdd6f75d62c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib63.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcb497bdba499d161d2e5e8de782bdd6f75d62c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib63.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib63.C?ref=adcb497bdba499d161d2e5e8de782bdd6f75d62c", "patch": "@@ -4,9 +4,9 @@\n #define vector __attribute__((vector_size(16)))\n class A {\n   friend vector float f();\n-  __attribute__((deprecated)) friend void f2(); // { dg-error \"attribute appertains\" }\n-  friend __attribute__((deprecated, vector_size(16))) float f3(); // { dg-error \"attribute appertains\" }\n-  friend __attribute__((vector_size(16), deprecated)) float f4(); // { dg-error \"attribute appertains\" }\n+  __attribute__((deprecated)) friend void f2();\n+  friend __attribute__((deprecated, vector_size(16))) float f3();\n+  friend __attribute__((vector_size(16), deprecated)) float f4();\n };\n \n vector float vf;\n@@ -15,3 +15,20 @@ f ()\n {\n   return vf;\n }\n+\n+void\n+f2 ()\n+{\n+}\n+\n+vector float\n+f3 ()\n+{\n+  return vf;\n+}\n+\n+vector float\n+f4 ()\n+{\n+  return vf;\n+}"}]}