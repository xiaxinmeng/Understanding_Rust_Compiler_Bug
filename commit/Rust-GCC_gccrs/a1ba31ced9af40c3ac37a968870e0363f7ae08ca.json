{"sha": "a1ba31ced9af40c3ac37a968870e0363f7ae08ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFiYTMxY2VkOWFmNDBjM2FjMzdhOTY4ODcwZTAzNjNmN2FlMDhjYQ==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2007-12-25T10:41:44Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2007-12-25T10:41:44Z"}, "message": "re PR fortran/34533 (DTIME returns total process time and not since last invocation)\n\ngcc/fortran:\n2007-12-25  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/34533\n\t* intrinsic.h (gfc_check_etime): Renamed to ...\n\t(gfc_check_dtime_etime): ... this.\n\t(gfc_check_etime_sub): Renamed to ...\n\t(gfc_check_dtime_etime_sub): ... this.\n\t(gfc_resolve_dtime_sub): New prototype.\n\t* check.c (gfc_check_etime): Renamed to ...\n\t(gfc_check_dtime_etime): ... this.\n\t(gfc_check_etime_sub): Renamed to ...\n\t(gfc_check_dtime_etime_sub): ... this.\n\t* iresolve.c (gfc_resolve_dtime_sub): New implementation.\n\t* intrinsic.c (add_functions): Removed alias from ETIME to DTIME,\n\tadded stand-alone intrinsic DTIME.\n\t(add_subroutines): Adjusted check and resolve function names for\n\tDTIME and ETIME.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_function): Added DTIME\n\tto known functions in switch.\n\t* intrinsic.texi (DTIME): Added paragraph about thread-safety,\n\tfixed return value section.\n\t(CPU_TIME): Clarified intent and added implementation notes.\n\n\nlibgfortran:\n2007-12-25  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/34533\n\t* intrinsics/cpu_time.c: Moved code commonly usable for CPU_TIME,\n\tDTIME and ETIME to ...\n\t* intrinsics/time_1.h: ... here.\n\t* intrinsics/dtime.c: New file.\n\t* intrinsics/etime.c: Newly implemented using the common \n\ttime-aquisition function from time_1.h.\n\t* gfortran.map (_gfortran_dtime, _gfortran_dtime_sub): New.\n\t* Makefile.am: Added new file.\n\t* Makefile.in: Regenerated.\n\t* configure: Regenerated.\n\nFrom-SVN: r131168", "tree": {"sha": "4b9ff08a07e57806321780593e88a8b23ebe3846", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b9ff08a07e57806321780593e88a8b23ebe3846"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1ba31ced9af40c3ac37a968870e0363f7ae08ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1ba31ced9af40c3ac37a968870e0363f7ae08ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1ba31ced9af40c3ac37a968870e0363f7ae08ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "54a838424ea995d251eb361f86794e5215fbe574", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54a838424ea995d251eb361f86794e5215fbe574", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54a838424ea995d251eb361f86794e5215fbe574"}], "stats": {"total": 471, "additions": 349, "deletions": 122}, "files": [{"sha": "7ffa51d1516118cfcc51900d4a2a35eea1629167", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a1ba31ced9af40c3ac37a968870e0363f7ae08ca", "patch": "@@ -1,3 +1,26 @@\n+2007-12-25  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/34533\n+\t* intrinsic.h (gfc_check_etime): Renamed to ...\n+\t(gfc_check_dtime_etime): ... this.\n+\t(gfc_check_etime_sub): Renamed to ...\n+\t(gfc_check_dtime_etime_sub): ... this.\n+\t(gfc_resolve_dtime_sub): New prototype.\n+\t* check.c (gfc_check_etime): Renamed to ...\n+\t(gfc_check_dtime_etime): ... this.\n+\t(gfc_check_etime_sub): Renamed to ...\n+\t(gfc_check_dtime_etime_sub): ... this.\n+\t* iresolve.c (gfc_resolve_dtime_sub): New implementation.\n+\t* intrinsic.c (add_functions): Removed alias from ETIME to DTIME,\n+\tadded stand-alone intrinsic DTIME.\n+\t(add_subroutines): Adjusted check and resolve function names for\n+\tDTIME and ETIME.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_function): Added DTIME\n+\tto known functions in switch.\n+\t* intrinsic.texi (DTIME): Added paragraph about thread-safety,\n+\tfixed return value section.\n+\t(CPU_TIME): Clarified intent and added implementation notes.\n+\n 2007-12-23  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/34421"}, {"sha": "ba7bcf295bd9b556c17397bcc0fa113f4dcab4f7", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=a1ba31ced9af40c3ac37a968870e0363f7ae08ca", "patch": "@@ -3230,7 +3230,7 @@ gfc_check_ctime_sub (gfc_expr *time, gfc_expr *result)\n \n \n try\n-gfc_check_etime (gfc_expr *x)\n+gfc_check_dtime_etime (gfc_expr *x)\n {\n   if (array_check (x, 0) == FAILURE)\n     return FAILURE;\n@@ -3252,7 +3252,7 @@ gfc_check_etime (gfc_expr *x)\n \n \n try\n-gfc_check_etime_sub (gfc_expr *values, gfc_expr *time)\n+gfc_check_dtime_etime_sub (gfc_expr *values, gfc_expr *time)\n {\n   if (array_check (values, 0) == FAILURE)\n     return FAILURE;"}, {"sha": "227c5ec1c6e7af47be8d0ecae8173d902395e0cb", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=a1ba31ced9af40c3ac37a968870e0363f7ae08ca", "patch": "@@ -1360,11 +1360,15 @@ add_functions (void)\n   make_generic (\"erfc\", GFC_ISYM_ERFC, GFC_STD_GNU);\n \n   /* G77 compatibility */\n-  add_sym_1 (\"etime\", GFC_ISYM_ETIME, NO_CLASS, ACTUAL_NO, BT_REAL, 4,  GFC_STD_GNU,\n-\t     gfc_check_etime, NULL, NULL,\n+  add_sym_1 (\"dtime\", GFC_ISYM_DTIME, NO_CLASS, ACTUAL_NO, BT_REAL, 4,  GFC_STD_GNU,\n+\t     gfc_check_dtime_etime, NULL, NULL,\n \t     x, BT_REAL, 4, REQUIRED);\n \n-  make_alias (\"dtime\", GFC_STD_GNU);\n+  make_generic (\"dtime\", GFC_ISYM_DTIME, GFC_STD_GNU);\n+\n+  add_sym_1 (\"etime\", GFC_ISYM_ETIME, NO_CLASS, ACTUAL_NO, BT_REAL, 4,  GFC_STD_GNU,\n+\t     gfc_check_dtime_etime, NULL, NULL,\n+\t     x, BT_REAL, 4, REQUIRED);\n \n   make_generic (\"etime\", GFC_ISYM_ETIME, GFC_STD_GNU);\n \n@@ -2437,11 +2441,11 @@ add_subroutines (void)\n \n   /* More G77 compatibility garbage.  */\n   add_sym_2s (\"etime\", GFC_ISYM_ETIME, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n-\t      gfc_check_etime_sub, NULL, gfc_resolve_etime_sub,\n+\t      gfc_check_dtime_etime_sub, NULL, gfc_resolve_etime_sub,\n \t      vl, BT_REAL, 4, REQUIRED, tm, BT_REAL, 4, REQUIRED);\n \n   add_sym_2s (\"dtime\", GFC_ISYM_DTIME, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n-\t      gfc_check_etime_sub, NULL, gfc_resolve_etime_sub,\n+\t      gfc_check_dtime_etime_sub, NULL, gfc_resolve_dtime_sub,\n \t      vl, BT_REAL, 4, REQUIRED, tm, BT_REAL, 4, REQUIRED);\n \n   add_sym_1s (\"fdate\", GFC_ISYM_FDATE, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,"}, {"sha": "dc544890e49e1b23023bd58f82d208b5b8ac2ed7", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=a1ba31ced9af40c3ac37a968870e0363f7ae08ca", "patch": "@@ -55,7 +55,7 @@ try gfc_check_digits (gfc_expr *);\n try gfc_check_dot_product (gfc_expr *, gfc_expr *);\n try gfc_check_dprod (gfc_expr *, gfc_expr *);\n try gfc_check_eoshift (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n-try gfc_check_etime (gfc_expr *);\n+try gfc_check_dtime_etime (gfc_expr *);\n try gfc_check_fgetputc (gfc_expr *, gfc_expr *);\n try gfc_check_fgetput (gfc_expr *);\n try gfc_check_fstat (gfc_expr *, gfc_expr *);\n@@ -165,7 +165,7 @@ try gfc_check_mvbits (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *,\n \t\t      gfc_expr *);\n try gfc_check_random_number (gfc_expr *);\n try gfc_check_random_seed (gfc_expr *, gfc_expr *, gfc_expr *);\n-try gfc_check_etime_sub (gfc_expr *, gfc_expr *);\n+try gfc_check_dtime_etime_sub (gfc_expr *, gfc_expr *);\n try gfc_check_fgetputc_sub (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_fgetput_sub (gfc_expr *, gfc_expr *);\n try gfc_check_fseek_sub (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n@@ -345,6 +345,7 @@ void gfc_resolve_dble (gfc_expr *, gfc_expr *);\n void gfc_resolve_dim (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_dot_product (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_dprod (gfc_expr *, gfc_expr *, gfc_expr *);\n+void gfc_resolve_dtime_sub (gfc_code *);\n void gfc_resolve_eoshift (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *,\n \t\t\t  gfc_expr *);\n void gfc_resolve_etime_sub (gfc_code *);"}, {"sha": "8b177087080f87be63087f1c410a41bf88ef16cd", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=a1ba31ced9af40c3ac37a968870e0363f7ae08ca", "patch": "@@ -2717,6 +2717,16 @@ Returns a @code{REAL(*)} value representing the elapsed CPU time in\n seconds.  This is useful for testing segments of code to determine\n execution time.\n \n+If a time source is available, time will be reported with microsecond\n+resolution. If no time source is available, @var{TIME} is set to\n+@code{-1.0}.\n+\n+Note that @var{TIME} may contain a, system dependent, arbitrary offset\n+and may not start with @code{0.0}. For @code{CPU_TIME}, the absolute\n+value is meaningless, only differences between subsequent calls to\n+this subroutine, as shown in the example below, should be used.\n+\n+\n @item @emph{Standard}:\n F95 and later\n \n@@ -3321,6 +3331,12 @@ sufficiently small limits that overflows (wrap around) are possible, such as\n become, negative, or numerically less than previous values, during a single\n run of the compiled program.\n \n+Please note, that this implementation is thread safe if used within OpenMP\n+directives, i. e. its state will be consistent while called from multiple\n+threads. However, if @code{DTIME} is called from multiple threads, the result\n+is still the time since the last invocation. This may not give the intended\n+results. If possible, use @code{CPU_TIME} instead.\n+\n This intrinsic is provided in both subroutine and function forms; however,\n only one form can be used in any given program unit.\n \n@@ -3351,7 +3367,8 @@ Subroutine, function\n @end multitable\n \n @item @emph{Return value}:\n-Elapsed time in seconds since the start of program execution.\n+Elapsed time in seconds since the last invocation or since the start of program\n+execution if not called before.\n \n @item @emph{Example}:\n @smallexample\n@@ -3372,6 +3389,10 @@ program test_dtime\n     print *, tarray(2)\n end program test_dtime\n @end smallexample\n+\n+@item @emph{See also}:\n+@ref{CPU_TIME}\n+\n @end table\n \n "}, {"sha": "8a09efcfcb59ca8b9b3e431ab181c3398906d31d", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=a1ba31ced9af40c3ac37a968870e0363f7ae08ca", "patch": "@@ -2676,7 +2676,15 @@ gfc_resolve_symlnk_sub (gfc_code *c)\n }\n \n \n-/* G77 compatibility subroutines etime() and dtime().  */\n+/* G77 compatibility subroutines dtime() and etime().  */\n+\n+void\n+gfc_resolve_dtime_sub (gfc_code *c)\n+{\n+  const char *name;\n+  name = gfc_get_string (PREFIX (\"dtime_sub\"));\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n+}\n \n void\n gfc_resolve_etime_sub (gfc_code *c)"}, {"sha": "c10d44a14104c4ebdda90be088df2d5795d0f35a", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=a1ba31ced9af40c3ac37a968870e0363f7ae08ca", "patch": "@@ -4097,6 +4097,7 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n     case GFC_ISYM_ACCESS:\n     case GFC_ISYM_CHDIR:\n     case GFC_ISYM_CHMOD:\n+    case GFC_ISYM_DTIME:\n     case GFC_ISYM_ETIME:\n     case GFC_ISYM_FGET:\n     case GFC_ISYM_FGETC:"}, {"sha": "0db6850733c57be4a14ff756e3f1de59667f5e45", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=a1ba31ced9af40c3ac37a968870e0363f7ae08ca", "patch": "@@ -1,3 +1,17 @@\n+2007-12-25  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/34533\n+\t* intrinsics/cpu_time.c: Moved code commonly usable for CPU_TIME,\n+\tDTIME and ETIME to ...\n+\t* intrinsics/time_1.h: ... here.\n+\t* intrinsics/dtime.c: New file.\n+\t* intrinsics/etime.c: Newly implemented using the common \n+\ttime-aquisition function from time_1.h.\n+\t* gfortran.map (_gfortran_dtime, _gfortran_dtime_sub): New.\n+\t* Makefile.am: Added new file.\n+\t* Makefile.in: Regenerated.\n+\t* configure: Regenerated.\n+\n 2007-12-25  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR libfortran/34566"}, {"sha": "9721db2c8803c5b0db62bcb4aecc8088fa5854b0", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=a1ba31ced9af40c3ac37a968870e0363f7ae08ca", "patch": "@@ -60,6 +60,7 @@ intrinsics/cpu_time.c \\\n intrinsics/cshift0.c \\\n intrinsics/ctime.c \\\n intrinsics/date_and_time.c \\\n+intrinsics/dtime.c \\\n intrinsics/env.c \\\n intrinsics/eoshift0.c \\\n intrinsics/eoshift2.c \\"}, {"sha": "a58916ba66150e66df3199cfd3e1f57dab431ddb", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=a1ba31ced9af40c3ac37a968870e0363f7ae08ca", "patch": "@@ -362,7 +362,7 @@ am__libgfortran_la_SOURCES_DIST = runtime/backtrace.c \\\n \tintrinsics/c99_functions.c intrinsics/chdir.c \\\n \tintrinsics/chmod.c intrinsics/clock.c intrinsics/cpu_time.c \\\n \tintrinsics/cshift0.c intrinsics/ctime.c \\\n-\tintrinsics/date_and_time.c intrinsics/env.c \\\n+\tintrinsics/date_and_time.c intrinsics/dtime.c intrinsics/env.c \\\n \tintrinsics/eoshift0.c intrinsics/eoshift2.c intrinsics/etime.c \\\n \tintrinsics/exit.c intrinsics/fnum.c intrinsics/gerror.c \\\n \tintrinsics/getcwd.c intrinsics/getlog.c intrinsics/getXid.c \\\n@@ -633,9 +633,9 @@ am__objects_31 = close.lo file_pos.lo format.lo inquire.lo \\\n \tsize_from_kind.lo transfer.lo unit.lo unix.lo write.lo\n am__objects_32 = associated.lo abort.lo access.lo args.lo \\\n \tc99_functions.lo chdir.lo chmod.lo clock.lo cpu_time.lo \\\n-\tcshift0.lo ctime.lo date_and_time.lo env.lo eoshift0.lo \\\n-\teoshift2.lo etime.lo exit.lo fnum.lo gerror.lo getcwd.lo \\\n-\tgetlog.lo getXid.lo hostnm.lo ierrno.lo ishftc.lo \\\n+\tcshift0.lo ctime.lo date_and_time.lo dtime.lo env.lo \\\n+\teoshift0.lo eoshift2.lo etime.lo exit.lo fnum.lo gerror.lo \\\n+\tgetcwd.lo getlog.lo getXid.lo hostnm.lo ierrno.lo ishftc.lo \\\n \tiso_c_generated_procs.lo iso_c_binding.lo kill.lo link.lo \\\n \tmalloc.lo mvbits.lo move_alloc.lo pack_generic.lo perror.lo \\\n \tsignal.lo size.lo sleep.lo spread_generic.lo \\\n@@ -899,6 +899,7 @@ intrinsics/cpu_time.c \\\n intrinsics/cshift0.c \\\n intrinsics/ctime.c \\\n intrinsics/date_and_time.c \\\n+intrinsics/dtime.c \\\n intrinsics/env.c \\\n intrinsics/eoshift0.c \\\n intrinsics/eoshift2.c \\\n@@ -1645,6 +1646,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cshift1_8.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ctime.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/date_and_time.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dtime.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/env.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/environ.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eoshift0.Plo@am__quote@\n@@ -4670,6 +4672,13 @@ date_and_time.lo: intrinsics/date_and_time.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o date_and_time.lo `test -f 'intrinsics/date_and_time.c' || echo '$(srcdir)/'`intrinsics/date_and_time.c\n \n+dtime.lo: intrinsics/dtime.c\n+@am__fastdepCC_TRUE@\tif $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT dtime.lo -MD -MP -MF \"$(DEPDIR)/dtime.Tpo\" -c -o dtime.lo `test -f 'intrinsics/dtime.c' || echo '$(srcdir)/'`intrinsics/dtime.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/dtime.Tpo\" \"$(DEPDIR)/dtime.Plo\"; else rm -f \"$(DEPDIR)/dtime.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='intrinsics/dtime.c' object='dtime.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o dtime.lo `test -f 'intrinsics/dtime.c' || echo '$(srcdir)/'`intrinsics/dtime.c\n+\n env.lo: intrinsics/env.c\n @am__fastdepCC_TRUE@\tif $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT env.lo -MD -MP -MF \"$(DEPDIR)/env.Tpo\" -c -o env.lo `test -f 'intrinsics/env.c' || echo '$(srcdir)/'`intrinsics/env.c; \\\n @am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/env.Tpo\" \"$(DEPDIR)/env.Plo\"; else rm -f \"$(DEPDIR)/env.Tpo\"; exit 1; fi"}, {"sha": "b1431357d0afe7b27d940f4f92a55a0bc55466a4", "filename": "libgfortran/configure", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=a1ba31ced9af40c3ac37a968870e0363f7ae08ca", "patch": "@@ -867,13 +867,13 @@ echo X\"$0\" |\n   \t  /^X\\(\\/\\).*/{ s//\\1/; q; }\n   \t  s/.*/./; q'`\n   srcdir=$ac_confdir\n-  if test ! -r $srcdir/$ac_unique_file; then\n+  if test ! -r \"$srcdir/$ac_unique_file\"; then\n     srcdir=..\n   fi\n else\n   ac_srcdir_defaulted=no\n fi\n-if test ! -r $srcdir/$ac_unique_file; then\n+if test ! -r \"$srcdir/$ac_unique_file\"; then\n   if test \"$ac_srcdir_defaulted\" = yes; then\n     { echo \"$as_me: error: cannot find sources ($ac_unique_file) in $ac_confdir or ..\" >&2\n    { (exit 1); exit 1; }; }\n@@ -882,7 +882,7 @@ if test ! -r $srcdir/$ac_unique_file; then\n    { (exit 1); exit 1; }; }\n   fi\n fi\n-(cd $srcdir && test -r ./$ac_unique_file) 2>/dev/null ||\n+(cd $srcdir && test -r \"./$ac_unique_file\") 2>/dev/null ||\n   { echo \"$as_me: error: sources are in $srcdir, but \\`cd $srcdir' does not work\" >&2\n    { (exit 1); exit 1; }; }\n srcdir=`echo \"$srcdir\" | sed 's%\\([^\\\\/]\\)[\\\\/]*$%\\1%'`"}, {"sha": "149d29bdca21869aa21224639e9c08d3e1bd1101", "filename": "libgfortran/gfortran.map", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/libgfortran%2Fgfortran.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/libgfortran%2Fgfortran.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgfortran.map?ref=a1ba31ced9af40c3ac37a968870e0363f7ae08ca", "patch": "@@ -58,6 +58,8 @@ GFORTRAN_1.0 {\n     _gfortran_ctime;\n     _gfortran_ctime_sub;\n     _gfortran_date_and_time;\n+    _gfortran_dtime;\n+    _gfortran_dtime_sub;\n     _gfortran_eoshift0_1;\n     _gfortran_eoshift0_1_char;\n     _gfortran_eoshift0_2;"}, {"sha": "c1020dcca40f7f0d8243e6039b2a15b17f39ccd9", "filename": "libgfortran/intrinsics/cpu_time.c", "status": "modified", "additions": 9, "deletions": 83, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/libgfortran%2Fintrinsics%2Fcpu_time.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/libgfortran%2Fintrinsics%2Fcpu_time.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fcpu_time.c?ref=a1ba31ced9af40c3ac37a968870e0363f7ae08ca", "patch": "@@ -28,37 +28,11 @@ write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n Boston, MA 02110-1301, USA.  */\n \n #include \"libgfortran.h\"\n-\n-#ifdef HAVE_UNISTD_H\n-#include <unistd.h>\n-#endif\n-\n-/* The CPU_TIME intrinsic to \"compare different algorithms on the same\n-   computer or discover which parts are the most expensive\", so we\n-   need a way to get the CPU time with the finest resolution possible.\n-   We can only be accurate up to microseconds.\n-\n-   As usual with UNIX systems, unfortunately no single way is\n-   available for all systems.  */\n-\n-#ifdef TIME_WITH_SYS_TIME\n-#  include <sys/time.h>\n-#  include <time.h>\n-#else\n-#  if HAVE_SYS_TIME_H\n-#    include <sys/time.h>\n-#  else\n-#    ifdef HAVE_TIME_H\n-#      include <time.h>\n-#    endif\n-#  endif\n-#endif\n+#include \"time_1.h\"\n \n /* The most accurate way to get the CPU time is getrusage ().\n    If we have times(), that's good enough, too.  */\n-#if defined (HAVE_GETRUSAGE) && defined (HAVE_SYS_RESOURCE_H)\n-#  include <sys/resource.h>\n-#else\n+#if !defined (HAVE_GETRUSAGE) || !defined (HAVE_SYS_RESOURCE_H)\n /* For times(), we _must_ know the number of clock ticks per second.  */\n #  if defined (HAVE_TIMES) && (defined (HZ) || defined (_SC_CLK_TCK) || defined (CLK_TCK))\n #    ifdef HAVE_SYS_PARAM_H\n@@ -75,65 +49,18 @@ Boston, MA 02110-1301, USA.  */\n #      endif\n #    endif\n #  endif  /* HAVE_TIMES etc.  */\n-#endif  /* HAVE_GETRUSAGE && HAVE_SYS_RESOURCE_H  */\n-\n-#if defined (__GNUC__) && (__GNUC__ >= 3)\n-#  define ATTRIBUTE_ALWAYS_INLINE __attribute__ ((__always_inline__))\n-#else\n-#  define ATTRIBUTE_ALWAYS_INLINE\n-#endif\n+#endif  /* !HAVE_GETRUSAGE || !HAVE_SYS_RESOURCE_H  */\n \n static inline void __cpu_time_1 (long *, long *) ATTRIBUTE_ALWAYS_INLINE;\n \n-/* Helper function for the actual implementation of the CPU_TIME\n-   intrinsic.  Returns a CPU time in microseconds or -1 if no CPU time\n-   could be computed.  */\n-\n-#ifdef __MINGW32__\n-\n-#define WIN32_LEAN_AND_MEAN\n-#include <windows.h>\n-\n-static void\n-__cpu_time_1 (long *sec, long *usec)\n-{\n-  union {\n-    FILETIME ft;\n-    unsigned long long ulltime;\n-  } kernel_time,  user_time;\n-\n-  FILETIME unused1, unused2;\n-  unsigned long long total_time;\n-\n-  /* No support for Win9x.  The high order bit of the DWORD\n-     returned by GetVersion is 0 for NT and higher. */\n-  if (GetVersion () >= 0x80000000)\n-    {\n-      *sec = -1;\n-      *usec = 0;\n-      return;\n-    }\n-\n-  /* The FILETIME structs filled in by GetProcessTimes represent\n-     time in 100 nanosecond units. */\n-  GetProcessTimes (GetCurrentProcess (), &unused1, &unused2,\n-              \t   &kernel_time.ft, &user_time.ft);\n-      \n-  total_time = (kernel_time.ulltime + user_time.ulltime)/10; \n-  *sec = total_time / 1000000;\n-  *usec = total_time % 1000000;\n-}\n-\n-#else\n-\n static inline void\n __cpu_time_1 (long *sec, long *usec)\n {\n-#if defined (HAVE_GETRUSAGE) && defined (HAVE_SYS_RESOURCE_H)\n-  struct rusage usage;\n-  getrusage (0, &usage);\n-  *sec = usage.ru_utime.tv_sec + usage.ru_stime.tv_sec;\n-  *usec = usage.ru_utime.tv_usec + usage.ru_stime.tv_usec;\n+#if defined(__MINGW32__) || defined (HAVE_GETRUSAGE) && defined (HAVE_SYS_RESOURCE_H)\n+  long user_sec, user_usec, system_sec, system_usec;\n+  __time_1 (&user_sec, &user_usec, &system_sec, &system_usec);\n+  *sec = user_sec + system_sec;\n+  *usec = user_usec + system_usec;\n #else /* ! HAVE_GETRUSAGE || ! HAVE_SYS_RESOURCE_H  */\n #ifdef HAVE_TIMES\n   struct tms buf;\n@@ -145,10 +72,9 @@ __cpu_time_1 (long *sec, long *usec)\n   *sec = -1;\n   *usec = 0;\n #endif  /* HAVE_TIMES */\n-#endif  /* HAVE_GETRUSAGE */\n+#endif  /* __MINGW32__ || HAVE_GETRUSAGE */\n }\n \n-#endif\n \n extern void cpu_time_4 (GFC_REAL_4 *);\n iexport_proto(cpu_time_4);"}, {"sha": "52be491386968d38d8ec75f91eb3976333bda15f", "filename": "libgfortran/intrinsics/dtime.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/libgfortran%2Fintrinsics%2Fdtime.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/libgfortran%2Fintrinsics%2Fdtime.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fdtime.c?ref=a1ba31ced9af40c3ac37a968870e0363f7ae08ca", "patch": "@@ -0,0 +1,86 @@\n+/* Implementation of the dtime intrinsic.\n+   Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+#include \"libgfortran.h\"\n+#include \"time_1.h\"\n+#include <gthr.h>\n+\n+#ifdef __GTHREAD_MUTEX_INIT\n+static __gthread_mutex_t dtime_update_lock = __GTHREAD_MUTEX_INIT;\n+#else\n+static __gthread_mutex_t dtime_update_lock;\n+#endif\n+\n+extern void dtime_sub (gfc_array_r4 *t, GFC_REAL_4 *result);\n+iexport_proto(dtime_sub);\n+\n+void\n+dtime_sub (gfc_array_r4 *t, GFC_REAL_4 *result)\n+{\n+  static GFC_REAL_4 tu = 0.0, ts = 0.0, tt = 0.0;\n+  GFC_REAL_4 *tp;\n+  long user_sec, user_usec, system_sec, system_usec;\n+\n+  if (((t->dim[0].ubound + 1 - t->dim[0].lbound)) < 2)\n+    runtime_error (\"Insufficient number of elements in TARRAY.\");\n+\n+  __gthread_mutex_lock (&dtime_update_lock);\n+  if (__time_1 (&user_sec, &user_usec, &system_sec, &system_usec) == 0)\n+    {\n+      tu = (GFC_REAL_4)(user_sec + 1.e-6 * user_usec) - tu;\n+      ts = (GFC_REAL_4)(system_sec + 1.e-6 * system_usec) - ts;\n+      tt = tu + ts;\n+    }\n+  else\n+    {\n+      tu = (GFC_REAL_4)-1.0;\n+      ts = (GFC_REAL_4)-1.0;\n+      tt = (GFC_REAL_4)-1.0;\n+    }\n+\n+  tp = t->data;\n+\n+  *tp = tu;\n+  tp += t->dim[0].stride;\n+  *tp = ts;\n+  *result = tt;\n+  __gthread_mutex_unlock (&dtime_update_lock);\n+}\n+iexport(dtime_sub);\n+\n+extern GFC_REAL_4 dtime (gfc_array_r4 *t);\n+export_proto(dtime);\n+\n+GFC_REAL_4\n+dtime (gfc_array_r4 *t)\n+{\n+  GFC_REAL_4 val;\n+  dtime_sub (t, &val);\n+  return val;\n+}"}, {"sha": "0ecba26359a240c7ba0050e015a4f49518fd8d4f", "filename": "libgfortran/intrinsics/etime.c", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/libgfortran%2Fintrinsics%2Fetime.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/libgfortran%2Fintrinsics%2Fetime.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fetime.c?ref=a1ba31ced9af40c3ac37a968870e0363f7ae08ca", "patch": "@@ -29,11 +29,7 @@ write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n Boston, MA 02110-1301, USA.  */\n \n #include \"libgfortran.h\"\n-\n-#if defined (HAVE_SYS_TIME_H) && defined (HAVE_SYS_RESOURCE_H)\n-#include <sys/time.h>\n-#include <sys/resource.h>\n-#endif\n+#include \"time_1.h\"\n \n extern void etime_sub (gfc_array_r4 *t, GFC_REAL_4 *result);\n iexport_proto(etime_sub);\n@@ -42,30 +38,23 @@ void\n etime_sub (gfc_array_r4 *t, GFC_REAL_4 *result)\n {\n   GFC_REAL_4 tu, ts, tt, *tp;\n+  long user_sec, user_usec, system_sec, system_usec;\n \n-#if defined(HAVE_SYS_TIME_H) && defined(HAVE_SYS_RESOURCE_H)\n-  struct rusage rt;\n+  if (((t->dim[0].ubound + 1 - t->dim[0].lbound)) < 2)\n+    runtime_error (\"Insufficient number of elements in TARRAY.\");\n \n-  if (getrusage(RUSAGE_SELF, &rt) == 0)\n+  if (__time_1 (&user_sec, &user_usec, &system_sec, &system_usec) == 0)\n     {\n-      tu = (GFC_REAL_4)(rt.ru_utime.tv_sec + 1.e-6 * rt.ru_utime.tv_usec);\n-      ts = (GFC_REAL_4)(rt.ru_stime.tv_sec + 1.e-6 * rt.ru_stime.tv_usec);\n+      tu = (GFC_REAL_4)(user_sec + 1.e-6 * user_usec);\n+      ts = (GFC_REAL_4)(system_sec + 1.e-6 * system_usec);\n       tt = tu + ts;\n     }\n   else\n     {\n-      tu = -1.;\n-      ts = -1.;\n-      tt = -1.;\n+      tu = (GFC_REAL_4)-1.0;\n+      ts = (GFC_REAL_4)-1.0;\n+      tt = (GFC_REAL_4)-1.0;\n     }\n-#else\n-  tu = -1.;\n-  ts = -1.;\n-  tt = -1.;\n-#endif\n-\n-  if (((t->dim[0].ubound + 1 - t->dim[0].lbound)) < 2)\n-    runtime_error (\"Insufficient number of elements in TARRAY.\");\n \n   tp = t->data;\n "}, {"sha": "43e6d8960c131e0ba899c074a90fe05ab657bed9", "filename": "libgfortran/intrinsics/time_1.h", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/libgfortran%2Fintrinsics%2Ftime_1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ba31ced9af40c3ac37a968870e0363f7ae08ca/libgfortran%2Fintrinsics%2Ftime_1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Ftime_1.h?ref=a1ba31ced9af40c3ac37a968870e0363f7ae08ca", "patch": "@@ -0,0 +1,142 @@\n+/* Implementation of the CPU_TIME intrinsic.\n+   Copyright (C) 2003, 2007 Free Software Foundation, Inc.\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+#ifndef LIBGFORTRAN_TIME_H\n+#define LIBGFORTRAN_TIME_H\n+\n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n+\n+/* The time related intrinsics (DTIME, ETIME, CPU_TIME) to \"compare\n+   different algorithms on the same computer or discover which parts\n+   are the most expensive\", need a way to get the CPU time with the\n+   finest resolution possible. We can only be accurate up to\n+   microseconds.\n+\n+   As usual with UNIX systems, unfortunately no single way is\n+   available for all systems.  */\n+\n+#ifdef TIME_WITH_SYS_TIME\n+#  include <sys/time.h>\n+#  include <time.h>\n+#else\n+#  if HAVE_SYS_TIME_H\n+#    include <sys/time.h>\n+#  else\n+#    ifdef HAVE_TIME_H\n+#      include <time.h>\n+#    endif\n+#  endif\n+#endif\n+\n+/* The most accurate way to get the CPU time is getrusage (). */\n+#if defined (HAVE_GETRUSAGE) && defined (HAVE_SYS_RESOURCE_H)\n+#  include <sys/resource.h>\n+#endif  /* HAVE_GETRUSAGE && HAVE_SYS_RESOURCE_H  */\n+\n+#if defined (__GNUC__) && (__GNUC__ >= 3)\n+#  define ATTRIBUTE_ALWAYS_INLINE __attribute__ ((__always_inline__))\n+#else\n+#  define ATTRIBUTE_ALWAYS_INLINE\n+#endif\n+\n+static inline int __time_1 (long *, long *, long *, long *) ATTRIBUTE_ALWAYS_INLINE;\n+\n+/* Helper function for the actual implementation of the DTIME, ETIME and\n+   CPU_TIME intrinsics.  Returns a CPU time in microseconds or -1 if no\n+   CPU time could be computed.  */\n+\n+#ifdef __MINGW32__\n+\n+#define WIN32_LEAN_AND_MEAN\n+#include <windows.h>\n+\n+static int\n+__time_1 (long *user_sec, long *user_usec, long *system_sec, long *system_usec)\n+{\n+  union {\n+    FILETIME ft;\n+    unsigned long long ulltime;\n+  } kernel_time,  user_time;\n+\n+  FILETIME unused1, unused2;\n+  unsigned long long total_time;\n+\n+  /* No support for Win9x.  The high order bit of the DWORD\n+     returned by GetVersion is 0 for NT and higher. */\n+  if (GetVersion () >= 0x80000000)\n+    {\n+      *user_sec = *system_sec = 0;\n+      *user_usec = *system_usec = 0;\n+      return -1;\n+    }\n+\n+  /* The FILETIME structs filled in by GetProcessTimes represent\n+     time in 100 nanosecond units. */\n+  GetProcessTimes (GetCurrentProcess (), &unused1, &unused2,\n+              \t   &kernel_time.ft, &user_time.ft);\n+\n+  *user_sec = user_time.ulltime / 10000000;\n+  *user_usec = user_time.ulltime % 10000000;\n+\n+  *system_sec = kernel_time.ulltime / 10000000;\n+  *system_usec = kernel_time.ulltime % 10000000;\n+  return 0;\n+}\n+\n+#else\n+\n+static inline int\n+__time_1 (long *user_sec, long *user_usec, long *system_sec, long *system_usec)\n+{\n+#if defined (HAVE_GETRUSAGE) && defined (HAVE_SYS_RESOURCE_H)\n+  struct rusage usage;\n+  getrusage (0, &usage);\n+\n+  *user_sec = usage.ru_utime.tv_sec;\n+  *user_usec = usage.ru_utime.tv_usec;\n+  *system_sec = usage.ru_stime.tv_sec;\n+  *system_usec = usage.ru_stime.tv_usec;\n+  return 0;\n+\n+#else /* ! HAVE_GETRUSAGE || ! HAVE_SYS_RESOURCE_H  */\n+\n+  /* We have nothing to go on.  Return -1.  */\n+  *user_sec = *system_sec = 0;\n+  *user_usec = *system_usec = 0;\n+  return -1;\n+\n+#endif\n+}\n+\n+#endif\n+\n+\n+#endif /* LIBGFORTRAN_TIME_H */"}]}