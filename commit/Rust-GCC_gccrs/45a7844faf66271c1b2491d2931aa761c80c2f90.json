{"sha": "45a7844faf66271c1b2491d2931aa761c80c2f90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVhNzg0NGZhZjY2MjcxYzFiMjQ5MWQyOTMxYWE3NjFjODBjMmY5MA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-05-18T22:36:30Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-05-18T22:36:30Z"}, "message": "tree-ssa-dom.c (tree_ssa_dominator_optimize): If some blocks need EH cleanup at the end of the pass...\n\n\t* tree-ssa-dom.c (tree_ssa_dominator_optimize): If some blocks need\n\tEH cleanup at the end of the pass, search for those that have been\n\tturned into forwarder blocks and do the cleanup on their successor.\n\nFrom-SVN: r135514", "tree": {"sha": "f1da280155d74a0224de267e7b4f026be9c8d18c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1da280155d74a0224de267e7b4f026be9c8d18c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45a7844faf66271c1b2491d2931aa761c80c2f90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45a7844faf66271c1b2491d2931aa761c80c2f90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45a7844faf66271c1b2491d2931aa761c80c2f90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45a7844faf66271c1b2491d2931aa761c80c2f90/comments", "author": null, "committer": null, "parents": [{"sha": "f76257660862749a706a6c0d2181811a234e51cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76257660862749a706a6c0d2181811a234e51cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f76257660862749a706a6c0d2181811a234e51cf"}], "stats": {"total": 109, "additions": 109, "deletions": 0}, "files": [{"sha": "5cf0155c5e7924525d2270722353368f863e8e05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a7844faf66271c1b2491d2931aa761c80c2f90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a7844faf66271c1b2491d2931aa761c80c2f90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45a7844faf66271c1b2491d2931aa761c80c2f90", "patch": "@@ -1,3 +1,9 @@\n+2008-05-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-ssa-dom.c (tree_ssa_dominator_optimize): If some blocks need\n+\tEH cleanup at the end of the pass, search for those that have been\n+\tturned into forwarder blocks and do the cleanup on their successor.\n+\n 2008-05-18  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-cfg.c (verify_gimple_expr): Allow conversions from"}, {"sha": "5580d8cc97b4eced6c71609f0b918dcdb4929093", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a7844faf66271c1b2491d2931aa761c80c2f90/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a7844faf66271c1b2491d2931aa761c80c2f90/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=45a7844faf66271c1b2491d2931aa761c80c2f90", "patch": "@@ -1,3 +1,7 @@\n+2008-05-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/loop_optimization2.ad[sb]: New test.\n+\n 2008-05-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/36090"}, {"sha": "f78cd989ab7bff50f1da65f8294a11a6aae7956c", "filename": "gcc/testsuite/gnat.dg/loop_optimization2.adb", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a7844faf66271c1b2491d2931aa761c80c2f90/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a7844faf66271c1b2491d2931aa761c80c2f90/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization2.adb?ref=45a7844faf66271c1b2491d2931aa761c80c2f90", "patch": "@@ -0,0 +1,41 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnata -O2 -fno-inline\" }\n+\n+with Ada.Unchecked_Conversion;\n+\n+package body Loop_Optimization2 is\n+\n+   function To_Addr_Ptr is\n+      new Ada.Unchecked_Conversion (System.Address, Addr_Ptr);\n+\n+   function To_Address is\n+     new Ada.Unchecked_Conversion (Tag, System.Address);\n+\n+   function To_Type_Specific_Data_Ptr is\n+     new Ada.Unchecked_Conversion (System.Address, Type_Specific_Data_Ptr);\n+\n+   function Interface_Ancestor_Tags (T : Tag) return Tag_Array is\n+      TSD_Ptr : constant Addr_Ptr := To_Addr_Ptr (To_Address (T));\n+      TSD : constant Type_Specific_Data_Ptr :=\n+                      To_Type_Specific_Data_Ptr (TSD_Ptr.all);\n+      Iface_Table : constant Interface_Data_Ptr := TSD.Interfaces_Table;\n+   begin\n+      if Iface_Table = null then\n+         declare\n+            Table : Tag_Array (1 .. 0);\n+         begin\n+            return Table;\n+         end;\n+      else\n+         declare\n+            Table : Tag_Array (1 .. Iface_Table.Nb_Ifaces);\n+         begin\n+            for J in 1 .. Iface_Table.Nb_Ifaces loop\n+               Table (J) := Iface_Table.Ifaces_Table (J).Iface_Tag;\n+            end loop;\n+            return Table;\n+         end;\n+      end if;\n+   end Interface_Ancestor_Tags;\n+\n+end Loop_Optimization2;"}, {"sha": "39d83236b8def5124eafc912592fc5f1e7334cce", "filename": "gcc/testsuite/gnat.dg/loop_optimization2.ads", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a7844faf66271c1b2491d2931aa761c80c2f90/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a7844faf66271c1b2491d2931aa761c80c2f90/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization2.ads?ref=45a7844faf66271c1b2491d2931aa761c80c2f90", "patch": "@@ -0,0 +1,41 @@\n+with System;\n+\n+package Loop_Optimization2 is\n+\n+   type Prim_Ptr is access procedure;\n+   type Address_Array is array (Positive range <>) of Prim_Ptr;\n+\n+   subtype Dispatch_Table is Address_Array (1 .. 1);\n+\n+   type Tag is access all Dispatch_Table;\n+\n+   type Tag_Array is array (Positive range <>) of Tag;\n+\n+   function Interface_Ancestor_Tags (T : Tag) return Tag_Array;\n+\n+   type Interface_Data_Element is record\n+      Iface_Tag : Tag;\n+   end record;\n+\n+   type Interfaces_Array is array (Natural range <>) of Interface_Data_Element;\n+\n+   type Interface_Data (Nb_Ifaces : Positive) is record\n+      Ifaces_Table : Interfaces_Array (1 .. Nb_Ifaces);\n+   end record;\n+\n+   type Interface_Data_Ptr is access all Interface_Data;\n+\n+   type Type_Specific_Data (Idepth : Natural) is record\n+      Interfaces_Table : Interface_Data_Ptr;\n+   end record;\n+\n+   type Type_Specific_Data_Ptr is access all Type_Specific_Data;\n+   pragma No_Strict_Aliasing (Type_Specific_Data_Ptr);\n+\n+   subtype Predef_Prims_Table is Address_Array (1 .. 16);\n+   type Predef_Prims_Table_Ptr is access Predef_Prims_Table;\n+\n+   type Addr_Ptr is access System.Address;\n+   pragma No_Strict_Aliasing (Addr_Ptr);\n+\n+end Loop_Optimization2;"}, {"sha": "c4145b30ec26618977687965dcf7e925b641de54", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a7844faf66271c1b2491d2931aa761c80c2f90/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a7844faf66271c1b2491d2931aa761c80c2f90/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=45a7844faf66271c1b2491d2931aa761c80c2f90", "patch": "@@ -319,6 +319,23 @@ tree_ssa_dominator_optimize (void)\n      such edges from the CFG as needed.  */\n   if (!bitmap_empty_p (need_eh_cleanup))\n     {\n+      unsigned i;\n+      bitmap_iterator bi;\n+\n+      /* Jump threading may have created forwarder blocks from blocks\n+\t needing EH cleanup; the new successor of these blocks, which\n+\t has inherited from the original block, needs the cleanup.  */\n+      EXECUTE_IF_SET_IN_BITMAP (need_eh_cleanup, 0, i, bi)\n+\t{\n+\t  basic_block bb = BASIC_BLOCK (i);\n+\t  if (single_succ_p (bb) == 1\n+\t      && (single_succ_edge (bb)->flags & EDGE_EH) == 0)\n+\t    {\n+\t      bitmap_clear_bit (need_eh_cleanup, i);\n+\t      bitmap_set_bit (need_eh_cleanup, single_succ (bb)->index);\n+\t    }\n+\t}\n+\n       tree_purge_all_dead_eh_edges (need_eh_cleanup);\n       bitmap_zero (need_eh_cleanup);\n     }"}]}