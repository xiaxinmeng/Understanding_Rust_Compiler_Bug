{"sha": "f2d1f0ba552e043b985396f93360f1b72d9d4b67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJkMWYwYmE1NTJlMDQzYjk4NTM5NmY5MzM2MGYxYjcyZDlkNGI2Nw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-01-29T02:46:30Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-01-29T02:46:30Z"}, "message": "stmt.c (estimate_case_costs): Use integer_minus_one_node.\n\n\t* stmt.c (estimate_case_costs): Use integer_minus_one_node.\n\n\t* tree.c (build_common_tree_nodes_2): Set integer_minus_one_node.\n\n\t* tree.h (tree_index): Add new element TI_INTEGER_MINUS_ONE.\n\t(integer_minus_one_node): Define.\n\nch:\n\t* ch-tree.h (integer_minus_one_node): Moved to top level gcc\n\tdirectory.\n\n\t* decl.c (integer_minus_one_node): Likewise.\n\t(init_decl_processing): Don't set integer_minus_one_node.\n\ncp:\n\t* cp-tree.h (cp_tree_index): Delete CPTI_MINUS_ONE.\n\t(minus_one_node): Moved to top level gcc directory.  Renamed\n\tto integer_minus_one_node.\n\n\t* init.c (init_init_processing): Don't set minus_one_node.\n\t(build_vec_init): Use integer_minus_one_node.\n\n\t* rtti.c (get_tinfo_decl_dynamic): Likewise.\n\nFrom-SVN: r39325", "tree": {"sha": "e0576a67b40daa2d959bde31647eb1bc8cbaf698", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0576a67b40daa2d959bde31647eb1bc8cbaf698"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2d1f0ba552e043b985396f93360f1b72d9d4b67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d1f0ba552e043b985396f93360f1b72d9d4b67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2d1f0ba552e043b985396f93360f1b72d9d4b67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d1f0ba552e043b985396f93360f1b72d9d4b67/comments", "author": null, "committer": null, "parents": [{"sha": "4f92461a87f8ef9ec018b3f2eb9351106f2f8bf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f92461a87f8ef9ec018b3f2eb9351106f2f8bf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f92461a87f8ef9ec018b3f2eb9351106f2f8bf4"}], "stats": {"total": 52, "additions": 35, "deletions": 17}, "files": [{"sha": "c0e9722a9186b242d348c84cb12d45546f774342", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d1f0ba552e043b985396f93360f1b72d9d4b67/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d1f0ba552e043b985396f93360f1b72d9d4b67/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2d1f0ba552e043b985396f93360f1b72d9d4b67", "patch": "@@ -1,3 +1,12 @@\n+2001-01-28  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* stmt.c (estimate_case_costs): Use integer_minus_one_node.\n+\n+\t* tree.c (build_common_tree_nodes_2): Set integer_minus_one_node.\n+\n+\t* tree.h (tree_index): Add new element TI_INTEGER_MINUS_ONE.\n+\t(integer_minus_one_node): Define.\n+\n 2001-01-28  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* Makefile.in (bootstrap2-lean): Fix typo."}, {"sha": "c3f6809a3760439c9da58b1ef8d36d326ae3dbc6", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d1f0ba552e043b985396f93360f1b72d9d4b67/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d1f0ba552e043b985396f93360f1b72d9d4b67/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=f2d1f0ba552e043b985396f93360f1b72d9d4b67", "patch": "@@ -1,3 +1,11 @@\n+2001-01-28  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* ch-tree.h (integer_minus_one_node): Moved to top level gcc\n+\tdirectory.\n+\n+\t* decl.c (integer_minus_one_node): Likewise.\n+\t(init_decl_processing): Don't set integer_minus_one_node.\n+\n 2001-01-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Makefile.in: Remove all dependencies on defaults.h."}, {"sha": "4d652b1eb2b38acca6c9ae28b82390d0af19664f", "filename": "gcc/ch/ch-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d1f0ba552e043b985396f93360f1b72d9d4b67/gcc%2Fch%2Fch-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d1f0ba552e043b985396f93360f1b72d9d4b67/gcc%2Fch%2Fch-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fch-tree.h?ref=f2d1f0ba552e043b985396f93360f1b72d9d4b67", "patch": "@@ -906,7 +906,6 @@ extern void write_spec_module                   PARAMS ((tree, tree));\n \n /* in ch/lang.c */\n extern tree string_index_type_dummy;\n-extern tree integer_minus_one_node;\n extern int  flag_old_strings;\n extern void GNU_xref_begin                      PARAMS ((void));\n extern void GNU_xref_end                        PARAMS ((void));"}, {"sha": "11a05e00218615a32a3fc7d5698c38ef09efc0b0", "filename": "gcc/ch/decl.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d1f0ba552e043b985396f93360f1b72d9d4b67/gcc%2Fch%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d1f0ba552e043b985396f93360f1b72d9d4b67/gcc%2Fch%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fdecl.c?ref=f2d1f0ba552e043b985396f93360f1b72d9d4b67", "patch": "@@ -299,9 +299,6 @@ tree default_function_type;\n \n const char **boolean_code_name;\n \n-/* A node for the integer constant -1.  */\n-tree integer_minus_one_node;\n-\n /* Nodes for boolean constants TRUE and FALSE. */\n tree boolean_true_node, boolean_false_node;\n \n@@ -3388,9 +3385,6 @@ init_decl_processing ()\n   pushdecl (build_decl (TYPE_DECL, ridpointers[(int) RID_DOUBLE],\n \t\t\tdouble_type_node));\n \n-  integer_minus_one_node = build_int_2 (-1, -1);\n-  TREE_TYPE (integer_minus_one_node) = integer_type_node;\n-\n   build_common_tree_nodes_2 (flag_short_double);\n \n   pushdecl (build_decl (TYPE_DECL,"}, {"sha": "62da98756165ca15874be4177b9212ebff64e1c2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d1f0ba552e043b985396f93360f1b72d9d4b67/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d1f0ba552e043b985396f93360f1b72d9d4b67/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f2d1f0ba552e043b985396f93360f1b72d9d4b67", "patch": "@@ -1,3 +1,14 @@\n+2001-01-28  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* cp-tree.h (cp_tree_index): Delete CPTI_MINUS_ONE.\n+\t(minus_one_node): Moved to top level gcc directory.  Renamed\n+\tto integer_minus_one_node.\n+\n+\t* init.c (init_init_processing): Don't set minus_one_node.\n+\t(build_vec_init): Use integer_minus_one_node.\n+\n+\t* rtti.c (get_tinfo_decl_dynamic): Likewise.\n+\n 2001-01-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* optimize.c (copy_body_r): If MODIFY_EXPR has both arguments"}, {"sha": "b5e6b99e7c2ec5e7f701399ab6077a55893dc3cb", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d1f0ba552e043b985396f93360f1b72d9d4b67/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d1f0ba552e043b985396f93360f1b72d9d4b67/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f2d1f0ba552e043b985396f93360f1b72d9d4b67", "patch": "@@ -635,7 +635,6 @@ enum cp_tree_index\n     CPTI_EMPTY_EXCEPT_SPEC,\n     CPTI_NULL,\n     CPTI_JCLASS,\n-    CPTI_MINUS_ONE,\n     CPTI_TERMINATE,\n     CPTI_ATEXIT,\n     CPTI_DSO_HANDLE,\n@@ -768,9 +767,6 @@ extern tree cp_global_trees[CPTI_MAX];\n /* If non-NULL, a POINTER_TYPE equivalent to (java::lang::Class*). */\n #define jclass_node                     cp_global_trees[CPTI_JCLASS]\n \n-/* A node for `(int) -1'.  */\n-#define minus_one_node                  cp_global_trees[CPTI_MINUS_ONE]\n-\n /* The declaration for `std::terminate'.  */\n #define terminate_node                  cp_global_trees[CPTI_TERMINATE]\n "}, {"sha": "191738952398244bb842eab6c00379e27bb8605d", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d1f0ba552e043b985396f93360f1b72d9d4b67/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d1f0ba552e043b985396f93360f1b72d9d4b67/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=f2d1f0ba552e043b985396f93360f1b72d9d4b67", "patch": "@@ -65,8 +65,6 @@ void init_init_processing ()\n {\n   tree fields[1];\n \n-  minus_one_node = build_int_2 (-1, -1);\n-\n   /* Define the structure that holds header information for\n      arrays allocated via operator new.  */\n   BI_header_type = make_aggr_type (RECORD_TYPE);\n@@ -2989,7 +2987,7 @@ build_vec_init (base, init, from_array)\n \n       if_stmt = begin_if_stmt ();\n       finish_if_stmt_cond (build (NE_EXPR, boolean_type_node,\n-\t\t\t\t  iterator, minus_one_node),\n+\t\t\t\t  iterator, integer_minus_one_node),\n \t\t\t   if_stmt);\n \n       /* Otherwise, loop through the elements.  */\n@@ -3063,7 +3061,7 @@ build_vec_init (base, init, from_array)\n       finish_do_body (do_stmt);\n       finish_do_stmt (build (NE_EXPR, boolean_type_node,\n \t\t\t     build_unary_op (PREDECREMENT_EXPR, iterator, 0),\n-\t\t\t     minus_one_node),\n+\t\t\t     integer_minus_one_node),\n \t\t      do_stmt);\n \n       finish_then_clause (if_stmt);"}, {"sha": "f105649262bb6ca2c53c602ad79da98d7a225eae", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d1f0ba552e043b985396f93360f1b72d9d4b67/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d1f0ba552e043b985396f93360f1b72d9d4b67/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=f2d1f0ba552e043b985396f93360f1b72d9d4b67", "patch": "@@ -265,7 +265,7 @@ get_tinfo_decl_dynamic (exp)\n       /* The RTTI information is always in the vtable, but it's at\n \t different indices depending on the ABI.  */\n       if (new_abi_rtti_p ())\n-\tindex = minus_one_node;\n+\tindex = integer_minus_one_node;\n       else if (flag_vtable_thunks)\n \tindex = integer_one_node;\n       else"}, {"sha": "8465df7221c75e57064d7faffaccbe5c8435004e", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d1f0ba552e043b985396f93360f1b72d9d4b67/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d1f0ba552e043b985396f93360f1b72d9d4b67/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=f2d1f0ba552e043b985396f93360f1b72d9d4b67", "patch": "@@ -5764,7 +5764,7 @@ static int\n estimate_case_costs (node)\n      case_node_ptr node;\n {\n-  tree min_ascii = build_int_2 (-1, -1);\n+  tree min_ascii = integer_minus_one_node;\n   tree max_ascii = convert (TREE_TYPE (node->high), build_int_2 (127, 0));\n   case_node_ptr n;\n   int i;"}, {"sha": "9f7fae7a7efc43cf8e79826ed3ca7b5b6397f1ec", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d1f0ba552e043b985396f93360f1b72d9d4b67/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d1f0ba552e043b985396f93360f1b72d9d4b67/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=f2d1f0ba552e043b985396f93360f1b72d9d4b67", "patch": "@@ -4786,6 +4786,7 @@ build_common_tree_nodes_2 (short_double)\n   /* Define these next since types below may used them.  */\n   integer_zero_node = build_int_2 (0, 0);\n   integer_one_node = build_int_2 (1, 0);\n+  integer_minus_one_node = build_int_2 (-1, -1);\n \n   size_zero_node = size_int (0);\n   size_one_node = size_int (1);"}, {"sha": "b5acb34f805c1c412f6f32be0a53d167e50fcd60", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d1f0ba552e043b985396f93360f1b72d9d4b67/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d1f0ba552e043b985396f93360f1b72d9d4b67/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f2d1f0ba552e043b985396f93360f1b72d9d4b67", "patch": "@@ -1715,6 +1715,7 @@ enum tree_index\n     \n   TI_INTEGER_ZERO,\n   TI_INTEGER_ONE,\n+  TI_INTEGER_MINUS_ONE,\n   TI_NULL_POINTER,\n \n   TI_SIZE_ZERO,\n@@ -1770,6 +1771,7 @@ extern tree global_trees[TI_MAX];\n \n #define integer_zero_node\t\tglobal_trees[TI_INTEGER_ZERO]\n #define integer_one_node\t\tglobal_trees[TI_INTEGER_ONE]\n+#define integer_minus_one_node\t\tglobal_trees[TI_INTEGER_MINUS_ONE]\n #define size_zero_node\t\t\tglobal_trees[TI_SIZE_ZERO]\n #define size_one_node\t\t\tglobal_trees[TI_SIZE_ONE]\n #define bitsize_zero_node\t\tglobal_trees[TI_BITSIZE_ZERO]"}]}