{"sha": "bb4d8febb3660965cc4617f2a91be0014236faf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI0ZDhmZWJiMzY2MDk2NWNjNDYxN2YyYTkxYmUwMDE0MjM2ZmFmNw==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-07-27T03:04:44Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-07-27T22:55:25Z"}, "message": "rs6000: Write static initializations for built-in table\n\n2021-07-26  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/rs6000-gen-builtins.c (write_bif_static_init): New\n\tfunction.\n\t(write_init_file): Call write_bif_static_init.", "tree": {"sha": "b014dc7d2fc44ebeb75bb3dbb6250548b733ff9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b014dc7d2fc44ebeb75bb3dbb6250548b733ff9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb4d8febb3660965cc4617f2a91be0014236faf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb4d8febb3660965cc4617f2a91be0014236faf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb4d8febb3660965cc4617f2a91be0014236faf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb4d8febb3660965cc4617f2a91be0014236faf7/comments", "author": null, "committer": null, "parents": [{"sha": "5b58057b6e7b0d1551907725da515ea18179010d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b58057b6e7b0d1551907725da515ea18179010d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b58057b6e7b0d1551907725da515ea18179010d"}], "stats": {"total": 112, "additions": 112, "deletions": 0}, "files": [{"sha": "1d7f744897ee8e965055c28ef3f151fc9d8e3bf2", "filename": "gcc/config/rs6000/rs6000-gen-builtins.c", "status": "modified", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb4d8febb3660965cc4617f2a91be0014236faf7/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb4d8febb3660965cc4617f2a91be0014236faf7/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c?ref=bb4d8febb3660965cc4617f2a91be0014236faf7", "patch": "@@ -2409,6 +2409,116 @@ write_header_file (void)\n   return 1;\n }\n \n+/* Write the decl and initializer for rs6000_builtin_info_x[].  */\n+static void\n+write_bif_static_init (void)\n+{\n+  const char *res[3];\n+  fprintf (init_file, \"bifdata rs6000_builtin_info_x[RS6000_BIF_MAX] =\\n\");\n+  fprintf (init_file, \"  {\\n\");\n+  fprintf (init_file, \"    { /* RS6000_BIF_NONE: */\\n\");\n+  fprintf (init_file, \"      \\\"\\\", ENB_ALWAYS, 0, CODE_FOR_nothing, 0,\\n\");\n+  fprintf (init_file, \"      0, {0, 0, 0}, {RES_NONE, RES_NONE, RES_NONE},\\n\");\n+  fprintf (init_file, \"      {0, 0, 0}, {0, 0, 0}, \\\"\\\", RS6000_BIF_NONE\\n\");\n+  fprintf (init_file, \"    },\\n\");\n+  for (int i = 0; i <= curr_bif; i++)\n+    {\n+      bifdata *bifp = &bifs[bif_order[i]];\n+      fprintf (init_file, \"    { /* RS6000_BIF_%s: */\\n\", bifp->idname);\n+      fprintf (init_file, \"      /* bifname */\\t\\\"%s\\\",\\n\",\n+\t       bifp->proto.bifname);\n+      fprintf (init_file, \"      /* enable*/\\t%s,\\n\",\n+\t       enable_string[bifp->stanza]);\n+      /* Type must be instantiated at run time.  */\n+      fprintf (init_file, \"      /* fntype */\\t0,\\n\");\n+      fprintf (init_file, \"      /* icode */\\tCODE_FOR_%s,\\n\",\n+\t       bifp->patname);\n+      fprintf (init_file, \"      /* nargs */\\t%d,\\n\",\n+\t       bifp->proto.nargs);\n+      fprintf (init_file, \"      /* bifattrs */\\t0\");\n+      if (bifp->attrs.isinit)\n+\tfprintf (init_file, \" | bif_init_bit\");\n+      if (bifp->attrs.isset)\n+\tfprintf (init_file, \" | bif_set_bit\");\n+      if (bifp->attrs.isextract)\n+\tfprintf (init_file, \" | bif_extract_bit\");\n+      if (bifp->attrs.isnosoft)\n+\tfprintf (init_file, \" | bif_nosoft_bit\");\n+      if (bifp->attrs.isldvec)\n+\tfprintf (init_file, \" | bif_ldvec_bit\");\n+      if (bifp->attrs.isstvec)\n+\tfprintf (init_file, \" | bif_stvec_bit\");\n+      if (bifp->attrs.isreve)\n+\tfprintf (init_file, \" | bif_reve_bit\");\n+      if (bifp->attrs.ispred)\n+\tfprintf (init_file, \" | bif_pred_bit\");\n+      if (bifp->attrs.ishtm)\n+\tfprintf (init_file, \" | bif_htm_bit\");\n+      if (bifp->attrs.ishtmspr)\n+\tfprintf (init_file, \" | bif_htmspr_bit\");\n+      if (bifp->attrs.ishtmcr)\n+\tfprintf (init_file, \" | bif_htmcr_bit\");\n+      if (bifp->attrs.ismma)\n+\tfprintf (init_file, \" | bif_mma_bit\");\n+      if (bifp->attrs.isquad)\n+\tfprintf (init_file, \" | bif_quad_bit\");\n+      if (bifp->attrs.ispair)\n+\tfprintf (init_file, \" | bif_pair_bit\");\n+      if (bifp->attrs.isno32bit)\n+\tfprintf (init_file, \" | bif_no32bit_bit\");\n+      if (bifp->attrs.is32bit)\n+\tfprintf (init_file, \" | bif_32bit_bit\");\n+      if (bifp->attrs.iscpu)\n+\tfprintf (init_file, \" | bif_cpu_bit\");\n+      if (bifp->attrs.isldstmask)\n+\tfprintf (init_file, \" | bif_ldstmask_bit\");\n+      if (bifp->attrs.islxvrse)\n+\tfprintf (init_file, \" | bif_lxvrse_bit\");\n+      if (bifp->attrs.islxvrze)\n+\tfprintf (init_file, \" | bif_lxvrze_bit\");\n+      if (bifp->attrs.isendian)\n+\tfprintf (init_file, \" | bif_endian_bit\");\n+      fprintf (init_file, \",\\n\");\n+      fprintf (init_file, \"      /* restr_opnd */\\t{%d, %d, %d},\\n\",\n+\t       bifp->proto.restr_opnd[0], bifp->proto.restr_opnd[1],\n+\t       bifp->proto.restr_opnd[2]);\n+      for (int j = 0; j < 3; j++)\n+\tif (!bifp->proto.restr_opnd[j])\n+\t  res[j] = \"RES_NONE\";\n+\telse if (bifp->proto.restr[j] == RES_BITS)\n+\t  res[j] = \"RES_BITS\";\n+\telse if (bifp->proto.restr[j] == RES_RANGE)\n+\t  res[j] = \"RES_RANGE\";\n+\telse if (bifp->proto.restr[j] == RES_VALUES)\n+\t  res[j] = \"RES_VALUES\";\n+\telse if (bifp->proto.restr[j] == RES_VAR_RANGE)\n+\t  res[j] = \"RES_VAR_RANGE\";\n+\telse\n+\t  res[j] = \"ERROR\";\n+      fprintf (init_file, \"      /* restr */\\t{%s, %s, %s},\\n\",\n+\t       res[0], res[1], res[2]);\n+      fprintf (init_file, \"      /* restr_val1 */\\t{%s, %s, %s},\\n\",\n+\t       bifp->proto.restr_val1[0] ? bifp->proto.restr_val1[0] : \"0\",\n+\t       bifp->proto.restr_val1[1] ? bifp->proto.restr_val1[1] : \"0\",\n+\t       bifp->proto.restr_val1[2] ? bifp->proto.restr_val1[2] : \"0\");\n+      fprintf (init_file, \"      /* restr_val2 */\\t{%s, %s, %s},\\n\",\n+\t       bifp->proto.restr_val2[0] ? bifp->proto.restr_val2[0] : \"0\",\n+\t       bifp->proto.restr_val2[1] ? bifp->proto.restr_val2[1] : \"0\",\n+\t       bifp->proto.restr_val2[2] ? bifp->proto.restr_val2[2] : \"0\");\n+      fprintf (init_file, \"      /* attr_string */\\t\\\"%s\\\",\\n\",\n+\t       (bifp->kind == FNK_CONST ? \"= const\"\n+\t\t: (bifp->kind == FNK_PURE ? \"= pure\"\n+\t\t   : (bifp->kind == FNK_FPMATH ? \"= fp, const\"\n+\t\t      : \"\"))));\n+      bool no_icode = !strcmp (bifp->patname, \"nothing\");\n+      fprintf (init_file, \"      /* assoc_bif */\\tRS6000_BIF_%s%s\\n\",\n+\t       bifp->attrs.ismma && no_icode ? bifp->idname : \"NONE\",\n+\t       bifp->attrs.ismma && no_icode ? \"_INTERNAL\" : \"\");\n+      fprintf (init_file, \"    },\\n\");\n+    }\n+  fprintf (init_file, \"  };\\n\\n\");\n+}\n+\n /* Write code to initialize the built-in function table.  */\n static void\n write_init_bif_table (void)\n@@ -2598,6 +2708,8 @@ write_init_file (void)\n \n   fprintf (init_file, \"tree rs6000_builtin_decls_x[RS6000_OVLD_MAX];\\n\\n\");\n \n+  write_bif_static_init ();\n+\n   rbt_inorder_callback (&fntype_rbt, fntype_rbt.rbt_root, write_fntype);\n   fprintf (init_file, \"\\n\");\n "}]}