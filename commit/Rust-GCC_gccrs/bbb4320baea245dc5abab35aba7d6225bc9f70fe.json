{"sha": "bbb4320baea245dc5abab35aba7d6225bc9f70fe", "node_id": "C_kwDOANBUbNoAKGJiYjQzMjBiYWVhMjQ1ZGM1YWJhYjM1YWJhN2Q2MjI1YmM5ZjcwZmU", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2022-02-10T09:31:05Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-12T12:38:38Z"}, "message": "[Ada] Remove use of use-clauses in loaded runtime units\n\nThe spec of runtime units that may be loaded by the compiler should not\ncontain use-clauses, for visibility to be correctly handled.  Remove\nuse-clauses that were introduced for the ghost big integers unit as part\nof the proof of runtime units.\n\ngcc/ada/\n\n\t* libgnat/s-aridou.ads: Remove use-clause, add renames and\n\tsubtypes.\n\t* libgnat/s-exponn.ads: Same.\n\t* libgnat/s-expont.ads: Same.\n\t* libgnat/s-widthu.ads: Same.", "tree": {"sha": "ff6f2d5506578f996900b7a6a4bbc683b0001ef5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff6f2d5506578f996900b7a6a4bbc683b0001ef5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbb4320baea245dc5abab35aba7d6225bc9f70fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbb4320baea245dc5abab35aba7d6225bc9f70fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbb4320baea245dc5abab35aba7d6225bc9f70fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbb4320baea245dc5abab35aba7d6225bc9f70fe/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6655b152ebbf97e66888dc003414f6bb62a7edab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6655b152ebbf97e66888dc003414f6bb62a7edab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6655b152ebbf97e66888dc003414f6bb62a7edab"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "29e13a5979a2bef87739797fceeb6e813ccccdd4", "filename": "gcc/ada/libgnat/s-aridou.ads", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbb4320baea245dc5abab35aba7d6225bc9f70fe/gcc%2Fada%2Flibgnat%2Fs-aridou.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbb4320baea245dc5abab35aba7d6225bc9f70fe/gcc%2Fada%2Flibgnat%2Fs-aridou.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-aridou.ads?ref=bbb4320baea245dc5abab35aba7d6225bc9f70fe", "patch": "@@ -34,7 +34,6 @@\n --  or intermediate results are longer than the result type.\n \n with Ada.Numerics.Big_Numbers.Big_Integers_Ghost;\n-use Ada.Numerics.Big_Numbers.Big_Integers_Ghost;\n \n generic\n \n@@ -67,20 +66,27 @@ is\n                             Contract_Cases => Ignore,\n                             Ghost          => Ignore);\n \n-   package Signed_Conversion is new Signed_Conversions (Int => Double_Int);\n+   package BI_Ghost renames Ada.Numerics.Big_Numbers.Big_Integers_Ghost;\n+   subtype Big_Integer is BI_Ghost.Big_Integer with Ghost;\n+   subtype Big_Natural is BI_Ghost.Big_Natural with Ghost;\n+   use type BI_Ghost.Big_Integer;\n+\n+   package Signed_Conversion is\n+     new BI_Ghost.Signed_Conversions (Int => Double_Int);\n \n    function Big (Arg : Double_Int) return Big_Integer is\n      (Signed_Conversion.To_Big_Integer (Arg))\n    with Ghost;\n \n-   package Unsigned_Conversion is new Unsigned_Conversions (Int => Double_Uns);\n+   package Unsigned_Conversion is\n+     new BI_Ghost.Unsigned_Conversions (Int => Double_Uns);\n \n    function Big (Arg : Double_Uns) return Big_Integer is\n      (Unsigned_Conversion.To_Big_Integer (Arg))\n    with Ghost;\n \n    function In_Double_Int_Range (Arg : Big_Integer) return Boolean is\n-     (In_Range (Arg, Big (Double_Int'First), Big (Double_Int'Last)))\n+     (BI_Ghost.In_Range (Arg, Big (Double_Int'First), Big (Double_Int'Last)))\n    with Ghost;\n \n    function Add_With_Ovflo_Check (X, Y : Double_Int) return Double_Int"}, {"sha": "5c6eeac03eeacc090998900ff4086a574a2c5668", "filename": "gcc/ada/libgnat/s-exponn.ads", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbb4320baea245dc5abab35aba7d6225bc9f70fe/gcc%2Fada%2Flibgnat%2Fs-exponn.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbb4320baea245dc5abab35aba7d6225bc9f70fe/gcc%2Fada%2Flibgnat%2Fs-exponn.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-exponn.ads?ref=bbb4320baea245dc5abab35aba7d6225bc9f70fe", "patch": "@@ -32,7 +32,6 @@\n --  Signed integer exponentiation (checks off)\n \n with Ada.Numerics.Big_Numbers.Big_Integers_Ghost;\n-use Ada.Numerics.Big_Numbers.Big_Integers_Ghost;\n \n generic\n \n@@ -41,7 +40,6 @@ generic\n package System.Exponn\n   with Pure, SPARK_Mode\n is\n-\n    --  Preconditions in this unit are meant for analysis only, not for run-time\n    --  checking, so that the expected exceptions are raised. This is enforced\n    --  by setting the corresponding assertion policy to Ignore. Postconditions\n@@ -53,14 +51,18 @@ is\n                             Contract_Cases => Ignore,\n                             Ghost          => Ignore);\n \n-   package Signed_Conversion is new Signed_Conversions (Int => Int);\n+   package BI_Ghost renames Ada.Numerics.Big_Numbers.Big_Integers_Ghost;\n+   subtype Big_Integer is BI_Ghost.Big_Integer with Ghost;\n+   use type BI_Ghost.Big_Integer;\n+\n+   package Signed_Conversion is new BI_Ghost.Signed_Conversions (Int => Int);\n \n    function Big (Arg : Int) return Big_Integer is\n      (Signed_Conversion.To_Big_Integer (Arg))\n    with Ghost;\n \n    function In_Int_Range (Arg : Big_Integer) return Boolean is\n-     (In_Range (Arg, Big (Int'First), Big (Int'Last)))\n+     (BI_Ghost.In_Range (Arg, Big (Int'First), Big (Int'Last)))\n    with Ghost;\n \n    function Expon (Left : Int; Right : Natural) return Int"}, {"sha": "99de227bd6fa817bc5582b474fe3a550bf75246c", "filename": "gcc/ada/libgnat/s-expont.ads", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbb4320baea245dc5abab35aba7d6225bc9f70fe/gcc%2Fada%2Flibgnat%2Fs-expont.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbb4320baea245dc5abab35aba7d6225bc9f70fe/gcc%2Fada%2Flibgnat%2Fs-expont.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-expont.ads?ref=bbb4320baea245dc5abab35aba7d6225bc9f70fe", "patch": "@@ -32,7 +32,6 @@\n --  Signed integer exponentiation (checks on)\n \n with Ada.Numerics.Big_Numbers.Big_Integers_Ghost;\n-use Ada.Numerics.Big_Numbers.Big_Integers_Ghost;\n \n generic\n \n@@ -41,7 +40,6 @@ generic\n package System.Expont\n   with Pure, SPARK_Mode\n is\n-\n    --  Preconditions in this unit are meant for analysis only, not for run-time\n    --  checking, so that the expected exceptions are raised. This is enforced\n    --  by setting the corresponding assertion policy to Ignore. Postconditions\n@@ -53,14 +51,18 @@ is\n                             Contract_Cases => Ignore,\n                             Ghost          => Ignore);\n \n-   package Signed_Conversion is new Signed_Conversions (Int => Int);\n+   package BI_Ghost renames Ada.Numerics.Big_Numbers.Big_Integers_Ghost;\n+   subtype Big_Integer is BI_Ghost.Big_Integer with Ghost;\n+   use type BI_Ghost.Big_Integer;\n+\n+   package Signed_Conversion is new BI_Ghost.Signed_Conversions (Int => Int);\n \n    function Big (Arg : Int) return Big_Integer is\n      (Signed_Conversion.To_Big_Integer (Arg))\n    with Ghost;\n \n    function In_Int_Range (Arg : Big_Integer) return Boolean is\n-     (In_Range (Arg, Big (Int'First), Big (Int'Last)))\n+     (BI_Ghost.In_Range (Arg, Big (Int'First), Big (Int'Last)))\n    with Ghost;\n \n    function Expon (Left : Int; Right : Natural) return Int"}, {"sha": "b6ae54172936801a2846a697ab2395055acf8684", "filename": "gcc/ada/libgnat/s-widthu.ads", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbb4320baea245dc5abab35aba7d6225bc9f70fe/gcc%2Fada%2Flibgnat%2Fs-widthu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbb4320baea245dc5abab35aba7d6225bc9f70fe/gcc%2Fada%2Flibgnat%2Fs-widthu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-widthu.ads?ref=bbb4320baea245dc5abab35aba7d6225bc9f70fe", "patch": "@@ -45,7 +45,6 @@ pragma Assertion_Policy (Pre                => Ignore,\n --  type. The arguments Lo, Hi are the bounds of the type.\n \n with Ada.Numerics.Big_Numbers.Big_Integers_Ghost;\n-use Ada.Numerics.Big_Numbers.Big_Integers_Ghost;\n \n generic\n \n@@ -54,7 +53,14 @@ generic\n package System.Width_U\n   with Pure\n is\n-   package Unsigned_Conversion is new Unsigned_Conversions (Int => Uns);\n+   package BI_Ghost renames Ada.Numerics.Big_Numbers.Big_Integers_Ghost;\n+   subtype Big_Integer is BI_Ghost.Big_Integer with Ghost;\n+   subtype Big_Natural is BI_Ghost.Big_Natural with Ghost;\n+   subtype Big_Positive is BI_Ghost.Big_Positive with Ghost;\n+   use type BI_Ghost.Big_Integer;\n+\n+   package Unsigned_Conversion is\n+     new BI_Ghost.Unsigned_Conversions (Int => Uns);\n \n    function Big (Arg : Uns) return Big_Integer renames\n      Unsigned_Conversion.To_Big_Integer;"}]}