{"sha": "ff381587ecb48a6d844d87d0d22399da71716b56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYzODE1ODdlY2I0OGE2ZDg0NGQ4N2QwZDIyMzk5ZGE3MTcxNmI1Ng==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@cygnus.com", "date": "1998-12-30T19:37:53Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1998-12-30T19:37:53Z"}, "message": "Fix calculation of fpmem_offset on little endian systems; Silence warnings when building explow\n\nFrom-SVN: r24443", "tree": {"sha": "a63c9588b5ab60b2acddeacdad0e40f8f25ddf5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a63c9588b5ab60b2acddeacdad0e40f8f25ddf5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff381587ecb48a6d844d87d0d22399da71716b56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff381587ecb48a6d844d87d0d22399da71716b56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff381587ecb48a6d844d87d0d22399da71716b56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff381587ecb48a6d844d87d0d22399da71716b56/comments", "author": null, "committer": null, "parents": [{"sha": "c2a2650529c07faeb521ac3bdb1453b2938f648a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a2650529c07faeb521ac3bdb1453b2938f648a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2a2650529c07faeb521ac3bdb1453b2938f648a"}], "stats": {"total": 96, "additions": 56, "deletions": 40}, "files": [{"sha": "9f2789645e2dc3c754511596e43a26038bffdcbe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff381587ecb48a6d844d87d0d22399da71716b56/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff381587ecb48a6d844d87d0d22399da71716b56/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff381587ecb48a6d844d87d0d22399da71716b56", "patch": "@@ -1,3 +1,13 @@\n+Wed Dec 30 22:24:00 1998  Michael Meissner  <meissner@cygnus.com>\n+\n+\t* rs6000.md ({save,restore}_stack_function): Take 2 operands to\n+\tavoid warnings in compiling explow.c.\n+\n+\t(patch from Ken Raeburn, raeburn@cygnus.com)\n+\t* rs6000.c (rs6000_stack_info): Force 8-byte alignment of\n+\tfpmem_offset.  Compute total size after that, and then\n+\trs6000_fpmem_offset using both values.\n+\n Mon Dec 28 19:26:32 1998  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n \n \t* gcc.texi (Non-bugs): ``Empty'' loops will be optimized away in"}, {"sha": "2288a42c5d5a229f876e84b637fbcb043319c390", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 40, "deletions": 36, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff381587ecb48a6d844d87d0d22399da71716b56/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff381587ecb48a6d844d87d0d22399da71716b56/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ff381587ecb48a6d844d87d0d22399da71716b56", "patch": "@@ -3496,40 +3496,6 @@ rs6000_stack_info ()\n \t\t\t\t  + info_ptr->toc_size\n \t\t\t\t  + info_ptr->main_size, 8);\n \n-  total_raw_size\t = (info_ptr->vars_size\n-\t\t\t    + info_ptr->parm_size\n-\t\t\t    + info_ptr->fpmem_size\n-\t\t\t    + info_ptr->save_size\n-\t\t\t    + info_ptr->varargs_size\n-\t\t\t    + info_ptr->fixed_size);\n-\n-  info_ptr->total_size   = RS6000_ALIGN (total_raw_size, ABI_STACK_BOUNDARY / BITS_PER_UNIT);\n-\n-  /* Determine if we need to allocate any stack frame:\n-\n-     For AIX we need to push the stack if a frame pointer is needed (because\n-     the stack might be dynamically adjusted), if we are debugging, if we\n-     make calls, or if the sum of fp_save, gp_save, fpmem, and local variables\n-     are more than the space needed to save all non-volatile registers:\n-     32-bit: 18*8 + 19*4 = 220 or 64-bit: 18*8 + 19*8 = 296\n-\n-     For V.4 we don't have the stack cushion that AIX uses, but assume that\n-     the debugger can handle stackless frames.  */\n-\n-  if (info_ptr->calls_p)\n-    info_ptr->push_p = 1;\n-\n-  else if (abi == ABI_V4 || abi == ABI_NT || abi == ABI_SOLARIS)\n-    info_ptr->push_p = (total_raw_size > info_ptr->fixed_size\n-\t\t\t|| (abi == ABI_NT ? info_ptr->lr_save_p\n-\t\t\t    : info_ptr->calls_p));\n-\n-  else\n-    info_ptr->push_p = (frame_pointer_needed\n-\t\t\t|| write_symbols != NO_DEBUG\n-\t\t\t|| ((total_raw_size - info_ptr->fixed_size)\n-\t\t\t    > (TARGET_32BIT ? 220 : 296)));\n-\n   /* Calculate the offsets */\n   switch (abi)\n     {\n@@ -3569,6 +3535,44 @@ rs6000_stack_info ()\n       break;\n     }\n \n+  if (info_ptr->fpmem_p\n+      && (info_ptr->main_save_offset - info_ptr->fpmem_size) % 8)\n+    info_ptr->fpmem_size += reg_size;\n+\n+  total_raw_size\t = (info_ptr->vars_size\n+\t\t\t    + info_ptr->parm_size\n+\t\t\t    + info_ptr->fpmem_size\n+\t\t\t    + info_ptr->save_size\n+\t\t\t    + info_ptr->varargs_size\n+\t\t\t    + info_ptr->fixed_size);\n+\n+  info_ptr->total_size   = RS6000_ALIGN (total_raw_size, ABI_STACK_BOUNDARY / BITS_PER_UNIT);\n+\n+  /* Determine if we need to allocate any stack frame:\n+\n+     For AIX we need to push the stack if a frame pointer is needed (because\n+     the stack might be dynamically adjusted), if we are debugging, if we\n+     make calls, or if the sum of fp_save, gp_save, fpmem, and local variables\n+     are more than the space needed to save all non-volatile registers:\n+     32-bit: 18*8 + 19*4 = 220 or 64-bit: 18*8 + 19*8 = 296\n+\n+     For V.4 we don't have the stack cushion that AIX uses, but assume that\n+     the debugger can handle stackless frames.  */\n+\n+  if (info_ptr->calls_p)\n+    info_ptr->push_p = 1;\n+\n+  else if (abi == ABI_V4 || abi == ABI_NT || abi == ABI_SOLARIS)\n+    info_ptr->push_p = (total_raw_size > info_ptr->fixed_size\n+\t\t\t|| (abi == ABI_NT ? info_ptr->lr_save_p\n+\t\t\t    : info_ptr->calls_p));\n+\n+  else\n+    info_ptr->push_p = (frame_pointer_needed\n+\t\t\t|| write_symbols != NO_DEBUG\n+\t\t\t|| ((total_raw_size - info_ptr->fixed_size)\n+\t\t\t    > (TARGET_32BIT ? 220 : 296)));\n+\n   if (info_ptr->fpmem_p)\n     {\n       info_ptr->fpmem_offset = info_ptr->main_save_offset - info_ptr->fpmem_size;\n@@ -3581,10 +3585,10 @@ rs6000_stack_info ()\n     info_ptr->fpmem_offset = 0;  \n \n   /* Zero offsets if we're not saving those registers */\n-  if (info_ptr->fp_size == 0)\n+  if (!info_ptr->fp_size)\n     info_ptr->fp_save_offset = 0;\n \n-  if (info_ptr->gp_size == 0)\n+  if (!info_ptr->gp_size)\n     info_ptr->gp_save_offset = 0;\n \n   if (!info_ptr->lr_save_p)"}, {"sha": "b3efed9c6a7065f639c1634668752182f8859dd7", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff381587ecb48a6d844d87d0d22399da71716b56/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff381587ecb48a6d844d87d0d22399da71716b56/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=ff381587ecb48a6d844d87d0d22399da71716b56", "patch": "@@ -7226,14 +7226,16 @@\n ;; save area is a memory location.\n \n (define_expand \"save_stack_function\"\n-  [(use (const_int 0))]\n+  [(match_operand 0 \"any_operand\" \"\")\n+   (match_operand 1 \"any_operand\" \"\")]\n   \"\"\n-  \"\")\n+  \"DONE;\")\n \n (define_expand \"restore_stack_function\"\n-  [(use (const_int 0))]\n+  [(match_operand 0 \"any_operand\" \"\")\n+   (match_operand 1 \"any_operand\" \"\")]\n   \"\"\n-  \"\")\n+  \"DONE;\")\n \n (define_expand \"restore_stack_block\"\n   [(use (match_operand 0 \"register_operand\" \"\"))"}]}