{"sha": "88f3c6e6c1983d7c8163ba7f2de1c6ae8cd5667b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhmM2M2ZTZjMTk4M2Q3YzgxNjNiYTdmMmRlMWM2YWU4Y2Q1NjY3Yg==", "commit": {"author": {"name": "David Wohlferd", "email": "dw@LimeGreenSocks.com", "date": "2015-10-19T21:15:41Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-10-19T21:15:41Z"}, "message": "Proposed doc update for Explicit Reg Vars 1/3\n\nProposed doc update for Explicit Reg Vars 1/3\n        * doc/extend.texi (Explicit Register Variables): Simplify and\n        avoid unnecessary and confusion abbreviations.  Update cross\n        references.\n        doc/implement-c.tex: Update cross reference.\n\nFrom-SVN: r229004", "tree": {"sha": "ba79180874d497b7f136a1c37607e3f4c26a0464", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba79180874d497b7f136a1c37607e3f4c26a0464"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88f3c6e6c1983d7c8163ba7f2de1c6ae8cd5667b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f3c6e6c1983d7c8163ba7f2de1c6ae8cd5667b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88f3c6e6c1983d7c8163ba7f2de1c6ae8cd5667b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f3c6e6c1983d7c8163ba7f2de1c6ae8cd5667b/comments", "author": null, "committer": null, "parents": [{"sha": "c3fa5d78ba83b91ca82195aa32d918f2c6fd3a37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3fa5d78ba83b91ca82195aa32d918f2c6fd3a37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3fa5d78ba83b91ca82195aa32d918f2c6fd3a37"}], "stats": {"total": 72, "additions": 34, "deletions": 38}, "files": [{"sha": "c8655aa014161e7e4b293c5dd434128d9b5edde5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f3c6e6c1983d7c8163ba7f2de1c6ae8cd5667b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f3c6e6c1983d7c8163ba7f2de1c6ae8cd5667b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88f3c6e6c1983d7c8163ba7f2de1c6ae8cd5667b", "patch": "@@ -1,3 +1,10 @@\n+2015-10-19  David Wohlferd  <dw@LimeGreenSocks.com>\n+\n+\t* doc/extend.texi (Explicit Register Variables): Simplify and\n+\tavoid unnecessary and confusion abbreviations.  Update cross\n+\treferences.\n+\tdoc/implement-c.tex: Update cross reference.\n+\n 2015-10-19  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-threadupdate.c (valid_jump_thread_path): Reject paths"}, {"sha": "60e47e1d52e7544efbcbec74ddd8b9bb0c83278e", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 26, "deletions": 37, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f3c6e6c1983d7c8163ba7f2de1c6ae8cd5667b/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f3c6e6c1983d7c8163ba7f2de1c6ae8cd5667b/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=88f3c6e6c1983d7c8163ba7f2de1c6ae8cd5667b", "patch": "@@ -7254,7 +7254,8 @@ for a C symbol, or to place a C variable in a specific register.\n * Extended Asm::       Inline assembler with operands.\n * Constraints::        Constraints for @code{asm} operands\n * Asm Labels::         Specifying the assembler name to use for a C symbol.\n-* Explicit Reg Vars::  Defining variables residing in specified registers.\n+* Explicit Register Variables::  Defining variables residing in specified \n+                       registers.\n * Size of an asm::     How GCC calculates the size of an @code{asm} block.\n @end menu\n \n@@ -7774,7 +7775,8 @@ If you list as many alternates as the @code{asm} statement allows, you permit\n the optimizers to produce the best possible code. \n If you must use a specific register, but your Machine Constraints do not\n provide sufficient control to select the specific register you want, \n-local register variables may provide a solution (@pxref{Local Reg Vars}).\n+local register variables may provide a solution (@pxref{Local Register \n+Variables}).\n \n @item cvariablename\n Specifies a C lvalue expression to hold the output, typically a variable name.\n@@ -8004,7 +8006,8 @@ When you list more than one possible location (for example, @samp{\"irm\"}),\n the compiler chooses the most efficient one based on the current context.\n If you must use a specific register, but your Machine Constraints do not\n provide sufficient control to select the specific register you want, \n-local register variables may provide a solution (@pxref{Local Reg Vars}).\n+local register variables may provide a solution (@pxref{Local Register \n+Variables}).\n \n Input constraints can also be digits (for example, @code{\"0\"}). This indicates \n that the specified input must be in the same place as the output constraint \n@@ -8086,7 +8089,8 @@ enclosed in double quotes and separated by commas.\n Clobber descriptions may not in any way overlap with an input or output \n operand. For example, you may not have an operand describing a register class \n with one member when listing that register in the clobber list. Variables \n-declared to live in specific registers (@pxref{Explicit Reg Vars}) and used \n+declared to live in specific registers (@pxref{Explicit Register \n+Variables}) and used \n as @code{asm} input or output operands must have no part mentioned in the \n clobber description. In particular, there is no way to specify that input \n operands get modified without also specifying them as output operands.\n@@ -8442,7 +8446,7 @@ linker that do not start with an underscore.\n GCC does not support using this feature with a non-static local variable \n since such variables do not have assembler names.  If you are\n trying to put the variable in a particular register, see \n-@ref{Explicit Reg Vars}.\n+@ref{Explicit Register Variables}.\n \n @subsubheading Assembler names for functions:\n \n@@ -8461,50 +8465,34 @@ int func (int x, int y)\n This specifies that the name to be used for the function @code{func} in\n the assembler code should be @code{MYFUNC}.\n \n-@node Explicit Reg Vars\n+@node Explicit Register Variables\n @subsection Variables in Specified Registers\n+@anchor{Explicit Reg Vars}\n @cindex explicit register variables\n @cindex variables in specified registers\n @cindex specified registers\n-@cindex registers, global allocation\n \n-GNU C allows you to put a few global variables into specified hardware\n-registers.  You can also specify the register in which an ordinary\n-register variable should be allocated.\n+GNU C allows you to associate specific hardware registers with C \n+variables.  In almost all cases, allowing the compiler to assign\n+registers produces the best code.  However under certain unusual\n+circumstances,  more precise control over the variable storage is \n+required.\n \n-@itemize @bullet\n-@item\n-Global register variables reserve registers throughout the program.\n-This may be useful in programs such as programming language\n-interpreters that have a couple of global variables that are accessed\n-very often.\n-\n-@item\n-Local register variables in specific registers do not reserve the\n-registers, except at the point where they are used as input or output\n-operands in an @code{asm} statement and the @code{asm} statement itself is\n-not deleted.  The compiler's data flow analysis is capable of determining\n-where the specified registers contain live values, and where they are\n-available for other uses.  Stores into local register variables may be deleted\n-when they appear to be dead according to dataflow analysis.  References\n-to local register variables may be deleted or moved or simplified.\n-\n-These local variables are sometimes convenient for use with the extended\n-@code{asm} feature (@pxref{Extended Asm}), if you want to write one\n-output of the assembler instruction directly into a particular register.\n-(This works provided the register you specify fits the constraints\n-specified for that operand in the @code{asm}.)\n-@end itemize\n+Both global and local variables can be associated with a register.  The\n+consequences of performing this association are very different between\n+the two, as explained in the sections below.\n \n @menu\n-* Global Reg Vars::\n-* Local Reg Vars::\n+* Global Register Variables::   Variables declared at global scope.\n+* Local Register Variables::    Variables declared within a function.\n @end menu\n \n-@node Global Reg Vars\n+@node Global Register Variables\n @subsubsection Defining Global Register Variables\n+@anchor{Global Reg Vars}\n @cindex global register variables\n @cindex registers, global variables in\n+@cindex registers, global allocation\n \n You can define a global register variable in GNU C like this:\n \n@@ -8598,8 +8586,9 @@ g2 are local temporaries.\n On the 68000, a2 @dots{} a5 should be suitable, as should d2 @dots{} d7.\n Of course, it does not do to use more than a few of those.\n \n-@node Local Reg Vars\n+@node Local Register Variables\n @subsubsection Specifying Registers for Local Variables\n+@anchor{Local Reg Vars}\n @cindex local variables, specifying registers\n @cindex specifying registers for local variables\n @cindex registers for local variables"}, {"sha": "b8f8f29b54dac760a11012adaa44d11f034eb8e7", "filename": "gcc/doc/implement-c.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f3c6e6c1983d7c8163ba7f2de1c6ae8cd5667b/gcc%2Fdoc%2Fimplement-c.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f3c6e6c1983d7c8163ba7f2de1c6ae8cd5667b/gcc%2Fdoc%2Fimplement-c.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fimplement-c.texi?ref=88f3c6e6c1983d7c8163ba7f2de1c6ae8cd5667b", "patch": "@@ -427,7 +427,7 @@ The @code{register} specifier affects code generation only in these ways:\n @itemize @bullet\n @item\n When used as part of the register variable extension, see\n-@ref{Explicit Reg Vars}.\n+@ref{Explicit Register Variables}.\n \n @item\n When @option{-O0} is in use, the compiler allocates distinct stack"}]}