{"sha": "426d271775dd26066baa2e8993c4633336b8e97b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI2ZDI3MTc3NWRkMjYwNjZiYWEyZTg5OTNjNDYzMzMzNmI4ZTk3Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-05-06T09:19:08Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-05-06T09:19:08Z"}, "message": "[multiple changes]\n\n2009-05-06  Robert Dewar  <dewar@adacore.com>\n\n\t* freeze.adb (Freeze_Record_Type): Improve error msg for bad size\n\tclause.\n\n2009-05-06  Thomas Quinot  <quinot@adacore.com>\n\n\t* g-socthi-vms.adb (C_Recvmsg, C_Sendmsg): Convert Msg to appropriate\n\tpacked type, since on OpenVMS, struct msghdr is packed.\n\n2009-05-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch8.adb (Analyze_Object_Renaming): If the object is a function\n\tcall returning an unconstrained composite value, create the proper\n\tsubtype for it, as is done for object dclarations with unconstrained\n\tnominal subtypes. Perform this transformation regarless of whether\n\tcall comes from source.\n\nFrom-SVN: r147159", "tree": {"sha": "526bdc0d6fc49662eb76173ea72a768744300870", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/526bdc0d6fc49662eb76173ea72a768744300870"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/426d271775dd26066baa2e8993c4633336b8e97b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/426d271775dd26066baa2e8993c4633336b8e97b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/426d271775dd26066baa2e8993c4633336b8e97b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/426d271775dd26066baa2e8993c4633336b8e97b/comments", "author": null, "committer": null, "parents": [{"sha": "8dc10d38ccd5b19f4437671102cc18c60919c221", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dc10d38ccd5b19f4437671102cc18c60919c221", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dc10d38ccd5b19f4437671102cc18c60919c221"}], "stats": {"total": 142, "additions": 96, "deletions": 46}, "files": [{"sha": "bb3f3a3453fb688db55c7b9b58917e72387539d3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/426d271775dd26066baa2e8993c4633336b8e97b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/426d271775dd26066baa2e8993c4633336b8e97b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=426d271775dd26066baa2e8993c4633336b8e97b", "patch": "@@ -1,3 +1,21 @@\n+2009-05-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* freeze.adb (Freeze_Record_Type): Improve error msg for bad size\n+\tclause.\n+\n+2009-05-06  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* g-socthi-vms.adb (C_Recvmsg, C_Sendmsg): Convert Msg to appropriate\n+\tpacked type, since on OpenVMS, struct msghdr is packed.\n+\n+2009-05-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Object_Renaming): If the object is a function\n+\tcall returning an unconstrained composite value, create the proper\n+\tsubtype for it, as is done for object dclarations with unconstrained\n+\tnominal subtypes. Perform this transformation regarless of whether\n+\tcall comes from source.\n+\n 2009-05-06  Robert Dewar  <dewar@adacore.com>\n \n \t* freeze.adb (Freeze_Record_Type): Implement Implicit_Packing for"}, {"sha": "1f91db983880af75b88d1d29856463df3d0a1397", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/426d271775dd26066baa2e8993c4633336b8e97b/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/426d271775dd26066baa2e8993c4633336b8e97b/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=426d271775dd26066baa2e8993c4633336b8e97b", "patch": "@@ -1864,17 +1864,15 @@ package body Freeze is\n                end;\n             end if;\n \n-            --  Processing for possible Implicit_Packing later\n+            --  Gather data for possible Implicit_Packing later\n \n-            if Implicit_Packing then\n-               if not Is_Scalar_Type (Etype (Comp)) then\n-                  All_Scalar_Components := False;\n-               else\n-                  Scalar_Component_Total_RM_Size :=\n-                    Scalar_Component_Total_RM_Size + RM_Size (Etype (Comp));\n-                  Scalar_Component_Total_Esize :=\n-                    Scalar_Component_Total_Esize + Esize (Etype (Comp));\n-               end if;\n+            if not Is_Scalar_Type (Etype (Comp)) then\n+               All_Scalar_Components := False;\n+            else\n+               Scalar_Component_Total_RM_Size :=\n+                 Scalar_Component_Total_RM_Size + RM_Size (Etype (Comp));\n+               Scalar_Component_Total_Esize :=\n+                 Scalar_Component_Total_Esize + Esize (Etype (Comp));\n             end if;\n \n             --  If the component is an Itype with Delayed_Freeze and is either\n@@ -2186,16 +2184,34 @@ package body Freeze is\n             end;\n          end if;\n \n-         --  Apply implicit packing if all conditions are met\n+         --  See if Implicit_Packing would work\n \n-         if Implicit_Packing\n+         if not Is_Packed (Rec)\n+           and then not Placed_Component\n            and then Has_Size_Clause (Rec)\n            and then All_Scalar_Components\n            and then not Has_Discriminants (Rec)\n            and then Esize (Rec) < Scalar_Component_Total_Esize\n            and then Esize (Rec) >= Scalar_Component_Total_RM_Size\n          then\n-            Set_Is_Packed (Rec);\n+            --  If implicit packing enabled, do it\n+\n+            if Implicit_Packing then\n+               Set_Is_Packed (Rec);\n+\n+               --  Otherwise flag the size clause\n+\n+            else\n+               declare\n+                  Sz : constant Node_Id := Size_Clause (Rec);\n+               begin\n+                  Error_Msg_NE\n+                    (\"size given for& too small\", Sz, Rec);\n+                  Error_Msg_N\n+                    (\"\\use explicit pragma Pack \"\n+                     & \"or use pragma Implicit_Packing\", Sz);\n+               end;\n+            end if;\n          end if;\n       end Freeze_Record_Type;\n "}, {"sha": "20855c040fdcc9dd9677da4c7d7339748070f766", "filename": "gcc/ada/g-socthi-vms.adb", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/426d271775dd26066baa2e8993c4633336b8e97b/gcc%2Fada%2Fg-socthi-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/426d271775dd26066baa2e8993c4633336b8e97b/gcc%2Fada%2Fg-socthi-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vms.adb?ref=426d271775dd26066baa2e8993c4633336b8e97b", "patch": "@@ -40,6 +40,11 @@ with Interfaces.C; use Interfaces.C;\n \n package body GNAT.Sockets.Thin is\n \n+   type VMS_Msghdr is new Msghdr;\n+   pragma Pack (VMS_Msghdr);\n+   --  On VMS (unlike other platforms), struct msghdr is packed, so a specific\n+   --  derived type is required.\n+\n    Non_Blocking_Sockets : aliased Fd_Set;\n    --  When this package is initialized with Process_Blocking_IO set to True,\n    --  sockets are set in non-blocking mode to avoid blocking the whole process\n@@ -300,15 +305,21 @@ package body GNAT.Sockets.Thin is\n    is\n       Res : C.int;\n \n+      GNAT_Msg : Msghdr;\n+      for GNAT_Msg'Address use Msg;\n+      pragma Import (Ada, GNAT_Msg);\n+\n+      VMS_Msg : aliased VMS_Msghdr := VMS_Msghdr (GNAT_Msg);\n    begin\n       loop\n-         Res := Syscall_Recvmsg (S, Msg, Flags);\n+         Res := Syscall_Recvmsg (S, VMS_Msg'Address, Flags);\n          exit when SOSC.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n            or else Errno /= SOSC.EWOULDBLOCK;\n          delay Quantum;\n       end loop;\n+      GNAT_Msg := Msghdr (VMS_Msg);\n \n       return ssize_t (Res);\n    end C_Recvmsg;\n@@ -324,15 +335,22 @@ package body GNAT.Sockets.Thin is\n    is\n       Res : C.int;\n \n+      GNAT_Msg : Msghdr;\n+      for GNAT_Msg'Address use Msg;\n+      pragma Import (Ada, GNAT_Msg);\n+\n+      VMS_Msg : aliased VMS_Msghdr := VMS_Msghdr (GNAT_Msg);\n+\n    begin\n       loop\n-         Res := Syscall_Sendmsg (S, Msg, Flags);\n+         Res := Syscall_Sendmsg (S, VMS_Msg'Address, Flags);\n          exit when SOSC.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n            or else Errno /= SOSC.EWOULDBLOCK;\n          delay Quantum;\n       end loop;\n+      GNAT_Msg := Msghdr (VMS_Msg);\n \n       return ssize_t (Res);\n    end C_Sendmsg;"}, {"sha": "42bbd25a71026ee9f068c090a1353d0fe44f7d00", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 29, "deletions": 31, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/426d271775dd26066baa2e8993c4633336b8e97b/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/426d271775dd26066baa2e8993c4633336b8e97b/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=426d271775dd26066baa2e8993c4633336b8e97b", "patch": "@@ -866,42 +866,43 @@ package body Sem_Ch8 is\n          end if;\n       end if;\n \n-      --  Special processing for renaming function return object\n+      --  Special processing for renaming function return object. Some errors\n+      --  and warnings are produced only for calls that come from source.\n \n-      if Nkind (Nam) = N_Function_Call\n-        and then Comes_From_Source (Nam)\n-      then\n+      if Nkind (Nam) = N_Function_Call then\n          case Ada_Version is\n \n             --  Usage is illegal in Ada 83\n \n             when Ada_83 =>\n-               Error_Msg_N\n-                 (\"(Ada 83) cannot rename function return object\", Nam);\n+               if Comes_From_Source (Nam) then\n+                  Error_Msg_N\n+                    (\"(Ada 83) cannot rename function return object\", Nam);\n+               end if;\n \n             --  In Ada 95, warn for odd case of renaming parameterless function\n-            --  call if this is not a limited type (where this is useful)\n+            --  call if this is not a limited type (where this is useful).\n \n             when others =>\n                if Warn_On_Object_Renames_Function\n                  and then No (Parameter_Associations (Nam))\n                  and then not Is_Limited_Type (Etype (Nam))\n+                 and then Comes_From_Source (Nam)\n                then\n                   Error_Msg_N\n-                    (\"?renaming function result object is suspicious\",\n-                     Nam);\n+                    (\"?renaming function result object is suspicious\", Nam);\n                   Error_Msg_NE\n-                    (\"\\?function & will be called only once\",\n-                     Nam, Entity (Name (Nam)));\n+                    (\"\\?function & will be called only once\", Nam,\n+                     Entity (Name (Nam)));\n                   Error_Msg_N\n                     (\"\\?suggest using an initialized constant object instead\",\n                      Nam);\n                end if;\n \n-               --  If the function call returns an unconstrained type, we\n-               --  must build a constrained subtype for the new entity, in\n-               --  a way similar to what is done for an object declaration\n-               --  with an unconstrained nominal type.\n+               --  If the function call returns an unconstrained type, we must\n+               --  build a constrained subtype for the new entity, in a way\n+               --  similar to what is done for an object declaration with an\n+               --  unconstrained nominal type.\n \n                if Is_Composite_Type (Etype (Nam))\n                  and then not Is_Constrained (Etype (Nam))\n@@ -945,6 +946,7 @@ package body Sem_Ch8 is\n       then\n          Error_Msg_NE (\"invalid use of incomplete type&\", Id, T2);\n          return;\n+\n       elsif Ekind (Etype (T)) = E_Incomplete_Type then\n          Error_Msg_NE (\"invalid use of incomplete type&\", Id, T);\n          return;\n@@ -962,8 +964,8 @@ package body Sem_Ch8 is\n         and then Nkind (Nam) in N_Has_Entity\n       then\n          declare\n-            Nam_Decl    : Node_Id;\n-            Nam_Ent     : Entity_Id;\n+            Nam_Decl : Node_Id;\n+            Nam_Ent  : Entity_Id;\n \n          begin\n             if Nkind (Nam) = N_Attribute_Reference then\n@@ -972,7 +974,7 @@ package body Sem_Ch8 is\n                Nam_Ent := Entity (Nam);\n             end if;\n \n-            Nam_Decl    := Parent (Nam_Ent);\n+            Nam_Decl := Parent (Nam_Ent);\n \n             if Has_Null_Exclusion (N)\n               and then not Has_Null_Exclusion (Nam_Decl)\n@@ -985,7 +987,7 @@ package body Sem_Ch8 is\n                --  have a null exclusion or a null-excluding subtype.\n \n                if Is_Formal_Object (Nam_Ent)\n-                 and then In_Generic_Scope (Id)\n+                    and then In_Generic_Scope (Id)\n                then\n                   if not Can_Never_Be_Null (Etype (Nam_Ent)) then\n                      Error_Msg_N\n@@ -1012,11 +1014,11 @@ package body Sem_Ch8 is\n                --  of the renamed actual in the instance will raise\n                --  constraint_error.\n \n-               elsif Nkind (Parent (Nam_Ent)) = N_Object_Declaration\n+               elsif Nkind (Nam_Decl) = N_Object_Declaration\n                  and then In_Instance\n                  and then Present\n-                   (Corresponding_Generic_Association (Parent (Nam_Ent)))\n-                 and then Nkind (Expression (Parent (Nam_Ent)))\n+                   (Corresponding_Generic_Association (Nam_Decl))\n+                 and then Nkind (Expression (Nam_Decl))\n                    = N_Raise_Constraint_Error\n                then\n                   Error_Msg_N\n@@ -1027,7 +1029,7 @@ package body Sem_Ch8 is\n                --  must not be null-excluding.\n \n                elsif No (Access_Definition (N))\n-                 and then  Can_Never_Be_Null (T)\n+                 and then Can_Never_Be_Null (T)\n                then\n                   Error_Msg_NE\n                     (\"`NOT NULL` not allowed (& already excludes null)\",\n@@ -1067,8 +1069,6 @@ package body Sem_Ch8 is\n          then\n             Error_Msg_N\n               (\"illegal renaming of discriminant-dependent component\", Nam);\n-         else\n-            null;\n          end if;\n \n       --  A static function call may have been folded into a literal\n@@ -1143,8 +1143,7 @@ package body Sem_Ch8 is\n          return;\n       end if;\n \n-      --  Apply Text_IO kludge here, since we may be renaming one of the\n-      --  children of Text_IO.\n+      --  Apply Text_IO kludge here since we may be renaming a child of Text_IO\n \n       Text_IO_Kludge (Name (N));\n \n@@ -1162,8 +1161,7 @@ package body Sem_Ch8 is\n       end if;\n \n       if Etype (Old_P) = Any_Type then\n-         Error_Msg_N\n-           (\"expect package name in renaming\", Name (N));\n+         Error_Msg_N (\"expect package name in renaming\", Name (N));\n \n       elsif Ekind (Old_P) /= E_Package\n         and then not (Ekind (Old_P) = E_Generic_Package\n@@ -1400,8 +1398,8 @@ package body Sem_Ch8 is\n \n          Inherit_Renamed_Profile (New_S, Old_S);\n \n-         --  The prefix can be an arbitrary expression that yields a task\n-         --  type, so it must be resolved.\n+         --  The prefix can be an arbitrary expression that yields a task type,\n+         --  so it must be resolved.\n \n          Resolve (Prefix (Nam), Scope (Old_S));\n       end if;"}]}