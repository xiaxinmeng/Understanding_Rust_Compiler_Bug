{"sha": "60af2db18013a0339302928ba98fee893ccc1957", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBhZjJkYjE4MDEzYTAzMzkzMDI5MjhiYTk4ZmVlODkzY2NjMTk1Nw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-10T09:37:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-10T11:05:58Z"}, "message": "tree-optimization/100492 - avoid irreducible regions in loop distribution\n\nWhen we distribute away a condition we rely on the ability to\nchange it to either 1 != 0 or 0 != 0 depending on the direction\nof the exit branch in the respective loop.  But when the loop\ncontains an irreducible sub-region then for the conditions inside\nthis this fails and can lead to infinite loops being generated.\n\nAvoid distibuting loops with irreducible sub-regions.\n\n2021-05-10  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/100492\n\t* tree-loop-distribution.c (find_seed_stmts_for_distribution):\n\tFind nothing when the loop contains an irreducible region.\n\n\t* gcc.dg/torture/pr100492.c: New testcase.", "tree": {"sha": "88a9e0c0e46e838e441917a516385ce5a032ff33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88a9e0c0e46e838e441917a516385ce5a032ff33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60af2db18013a0339302928ba98fee893ccc1957", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60af2db18013a0339302928ba98fee893ccc1957", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60af2db18013a0339302928ba98fee893ccc1957", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60af2db18013a0339302928ba98fee893ccc1957/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc1d563887b1fe3183a21572b2ea63466b2bfa3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc1d563887b1fe3183a21572b2ea63466b2bfa3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc1d563887b1fe3183a21572b2ea63466b2bfa3a"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "75229c8813be49c290e0215e59cc1421e2f6722d", "filename": "gcc/testsuite/gcc.dg/torture/pr100492.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60af2db18013a0339302928ba98fee893ccc1957/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr100492.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60af2db18013a0339302928ba98fee893ccc1957/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr100492.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr100492.c?ref=60af2db18013a0339302928ba98fee893ccc1957", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-ftree-loop-distribution\" } */\n+\n+extern void abort (void);\n+\n+signed char a, c;\n+int b, d, *e = &d, g;\n+signed static char f;\n+int main() {\n+  int h = 0;\n+  int a_ = a;\n+  for (; a_ < 1; a = ++a_) {\n+    int *i[5], **j = &i[4], ***k[3][2] = {{&j}}, ****l = &k[2][1], *****m = &l;\n+    char *n = &c;\n+    f = *e = g = 0;\n+    for (; g < 2; g++) {\n+      for (b = 0; b < 3; b++)\n+        h = (h && (*n = 0)) == 0;\n+      if (g)\n+        break;\n+    }\n+  }\n+  if (f != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "65aa1df4abae2c6acf40299f710bc62ee6bacc07", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60af2db18013a0339302928ba98fee893ccc1957/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60af2db18013a0339302928ba98fee893ccc1957/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=60af2db18013a0339302928ba98fee893ccc1957", "patch": "@@ -3203,6 +3203,16 @@ find_seed_stmts_for_distribution (class loop *loop, vec<gimple *> *work_list)\n   /* Initialize the worklist with stmts we seed the partitions with.  */\n   for (unsigned i = 0; i < loop->num_nodes; ++i)\n     {\n+      /* In irreducible sub-regions we don't know how to redirect\n+\t conditions, so fail.  See PR100492.  */\n+      if (bbs[i]->flags & BB_IRREDUCIBLE_LOOP)\n+\t{\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    fprintf (dump_file, \"loop %d contains an irreducible region.\\n\",\n+\t\t     loop->num);\n+\t  work_list->truncate (0);\n+\t  break;\n+\t}\n       for (gphi_iterator gsi = gsi_start_phis (bbs[i]);\n \t   !gsi_end_p (gsi); gsi_next (&gsi))\n \t{"}]}