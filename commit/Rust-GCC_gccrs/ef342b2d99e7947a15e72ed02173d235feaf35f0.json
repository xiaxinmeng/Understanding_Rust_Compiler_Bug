{"sha": "ef342b2d99e7947a15e72ed02173d235feaf35f0", "node_id": "C_kwDOANBUbNoAKGVmMzQyYjJkOTllNzk0N2ExNWU3MmVkMDIxNzNkMjM1ZmVhZjM1ZjA", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-11-17T19:32:23Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-11-17T19:33:09Z"}, "message": "i386: Introduce LEGACY_SSE_REGNO_P predicate\n\nIntroduce LEGACY_SSE_REGNO_P predicate to simplify a couple of places.\n\nNo functional changes.\n\n2021-11-17  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\t* config/i386/i386.h (LEGACY_SSE_REGNO_P): New predicate.\n\t(SSE_REGNO_P): Use LEGACY_SSE_REGNO_P predicate.\n\t* config/i386/i386.c (zero_all_vector_registers):\n\tUse LEGACY_SSE_REGNO_P predicate.\n\t(ix86_register_priority): Use REX_INT_REGNO_P, REX_SSE_REGNO_P\n\tand EXT_REG_SSE_REGNO_P predicates.\n\t(ix86_hard_regno_call_part_clobbered): Use REX_SSE_REGNO_P\n\tand LEGACY_SSE_REGNO_P predicates.", "tree": {"sha": "4be3702d39dac33fc3e46fe56b5a2db2c925140f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4be3702d39dac33fc3e46fe56b5a2db2c925140f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef342b2d99e7947a15e72ed02173d235feaf35f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef342b2d99e7947a15e72ed02173d235feaf35f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef342b2d99e7947a15e72ed02173d235feaf35f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef342b2d99e7947a15e72ed02173d235feaf35f0/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c2148d8c144d7388abcb7c34b782be647fe81c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c2148d8c144d7388abcb7c34b782be647fe81c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c2148d8c144d7388abcb7c34b782be647fe81c9"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "0c5439dc7a7f8e3abdd3680ed80025d45a585bf1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef342b2d99e7947a15e72ed02173d235feaf35f0/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef342b2d99e7947a15e72ed02173d235feaf35f0/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ef342b2d99e7947a15e72ed02173d235feaf35f0", "patch": "@@ -3665,7 +3665,7 @@ zero_all_vector_registers (HARD_REG_SET need_zeroed_hardregs)\n     return NULL;\n \n   for (unsigned int regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n-    if ((IN_RANGE (regno, FIRST_SSE_REG, LAST_SSE_REG)\n+    if ((LEGACY_SSE_REGNO_P (regno)\n \t || (TARGET_64BIT\n \t     && (REX_SSE_REGNO_P (regno)\n \t\t || (TARGET_AVX512F && EXT_REX_SSE_REGNO_P (regno)))))\n@@ -19089,15 +19089,13 @@ ix86_register_priority (int hard_regno)\n     return 0;\n   if (hard_regno == BP_REG)\n     return 1;\n-  /* New x86-64 int registers result in bigger code size.  Discourage\n-     them.  */\n-  if (IN_RANGE (hard_regno, FIRST_REX_INT_REG, LAST_REX_INT_REG))\n+  /* New x86-64 int registers result in bigger code size.  Discourage them.  */\n+  if (REX_INT_REGNO_P (hard_regno))\n     return 2;\n-  /* New x86-64 SSE registers result in bigger code size.  Discourage\n-     them.  */\n-  if (IN_RANGE (hard_regno, FIRST_REX_SSE_REG, LAST_REX_SSE_REG))\n+  /* New x86-64 SSE registers result in bigger code size.  Discourage them.  */\n+  if (REX_SSE_REGNO_P (hard_regno))\n     return 2;\n-  if (IN_RANGE (hard_regno, FIRST_EXT_REX_SSE_REG, LAST_EXT_REX_SSE_REG))\n+  if (EXT_REX_SSE_REGNO_P (hard_regno))\n     return 1;\n   /* Usage of AX register results in smaller code.  Prefer it.  */\n   if (hard_regno == AX_REG)\n@@ -19974,9 +19972,8 @@ ix86_hard_regno_call_part_clobbered (unsigned int abi_id, unsigned int regno,\n   /* Special ABI for vzeroupper which only clobber higher part of sse regs.  */\n   if (abi_id == ABI_VZEROUPPER)\n       return (GET_MODE_SIZE (mode) > 16\n-\t      && ((TARGET_64BIT\n-\t\t   && (IN_RANGE (regno, FIRST_REX_SSE_REG, LAST_REX_SSE_REG)))\n-\t\t  || (IN_RANGE (regno, FIRST_SSE_REG, LAST_SSE_REG))));\n+\t      && ((TARGET_64BIT && REX_SSE_REGNO_P (regno))\n+\t\t  || LEGACY_SSE_REGNO_P (regno)));\n \n   return SSE_REGNO_P (regno) && GET_MODE_SIZE (mode) > 16;\n }"}, {"sha": "2fda1e0686e175f89cde34d1f1d2159e96704007", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef342b2d99e7947a15e72ed02173d235feaf35f0/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef342b2d99e7947a15e72ed02173d235feaf35f0/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=ef342b2d99e7947a15e72ed02173d235feaf35f0", "patch": "@@ -1409,10 +1409,13 @@ enum reg_class\n \n #define SSE_REG_P(X) (REG_P (X) && SSE_REGNO_P (REGNO (X)))\n #define SSE_REGNO_P(N)\t\t\t\t\t\t\\\n-  (IN_RANGE ((N), FIRST_SSE_REG, LAST_SSE_REG)\t\t\t\\\n+  (LEGACY_SSE_REGNO_P (N)\t\t\t\t\t\\\n    || REX_SSE_REGNO_P (N)\t\t\t\t\t\\\n    || EXT_REX_SSE_REGNO_P (N))\n \n+#define LEGACY_SSE_REGNO_P(N) \\\n+  IN_RANGE ((N), FIRST_SSE_REG, LAST_SSE_REG)\n+\n #define REX_SSE_REGNO_P(N) \\\n   IN_RANGE ((N), FIRST_REX_SSE_REG, LAST_REX_SSE_REG)\n "}]}