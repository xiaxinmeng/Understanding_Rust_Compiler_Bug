{"sha": "e58484a019c57b1085bbbcc1654f1944feddfe73", "node_id": "C_kwDOANBUbNoAKGU1ODQ4NGEwMTljNTdiMTA4NWJiYmNjMTY1NGYxOTQ0ZmVkZGZlNzM", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-04-06T15:46:25Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-04-06T15:46:25Z"}, "message": "c++: make -Wctad-maybe-unsupported respect complain [PR105143]\n\nWe were attempting to issue a -Wctad-maybe-unsupported warning even when\ncomplain=tf_none, which led to a crash in the first testcase below and a\nbogus error during overload resolution in the second testcase.\n\n\tPR c++/105143\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (do_class_deduction): Check complain before attempting\n\tto issue a -Wctad-maybe-unsupported warning.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/nodiscard1.C: New test.\n\t* g++.dg/warn/Wctad-maybe-unsupported4.C: New test.", "tree": {"sha": "74dad14767627d66ead130887ecab79b4635a465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74dad14767627d66ead130887ecab79b4635a465"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e58484a019c57b1085bbbcc1654f1944feddfe73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e58484a019c57b1085bbbcc1654f1944feddfe73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e58484a019c57b1085bbbcc1654f1944feddfe73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e58484a019c57b1085bbbcc1654f1944feddfe73/comments", "author": null, "committer": null, "parents": [{"sha": "6283d5ad4779d3e5b7b2a93e76de03264a7c7cc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6283d5ad4779d3e5b7b2a93e76de03264a7c7cc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6283d5ad4779d3e5b7b2a93e76de03264a7c7cc6"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "63794a40d5d2478b70c4f184be7a3fcd597c47f1", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58484a019c57b1085bbbcc1654f1944feddfe73/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58484a019c57b1085bbbcc1654f1944feddfe73/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=e58484a019c57b1085bbbcc1654f1944feddfe73", "patch": "@@ -30091,7 +30091,7 @@ do_class_deduction (tree ptype, tree tmpl, tree init,\n \n   /* If CTAD succeeded but the type doesn't have any explicit deduction\n      guides, this deduction might not be what the user intended.  */\n-  if (fndecl != error_mark_node && !any_dguides_p)\n+  if (fndecl != error_mark_node && !any_dguides_p && (complain & tf_warning))\n     {\n       if ((!DECL_IN_SYSTEM_HEADER (fndecl)\n \t   || global_dc->dc_warn_system_headers)"}, {"sha": "c3c5094b619b58793d40669f2b189bf585120082", "filename": "gcc/testsuite/g++.dg/cpp2a/nodiscard1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58484a019c57b1085bbbcc1654f1944feddfe73/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58484a019c57b1085bbbcc1654f1944feddfe73/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard1.C?ref=e58484a019c57b1085bbbcc1654f1944feddfe73", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/105143\n+// { dg-do compile { target c++20 } }\n+// We used to crash here with \"Error reporting routines re-entered\".\n+\n+template<class...> struct A { };\n+\n+template<A V> using type = int;\n+\n+template<A V> [[nodiscard]] type<V> get();\n+\n+int main() {\n+  get<{}>(); // { dg-warning \"nodiscard\" }\n+}"}, {"sha": "92ed8214b1d1dba927fe048b874824b839ee46e8", "filename": "gcc/testsuite/g++.dg/warn/Wctad-maybe-unsupported4.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58484a019c57b1085bbbcc1654f1944feddfe73/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWctad-maybe-unsupported4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58484a019c57b1085bbbcc1654f1944feddfe73/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWctad-maybe-unsupported4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWctad-maybe-unsupported4.C?ref=e58484a019c57b1085bbbcc1654f1944feddfe73", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/105143\n+// { dg-do compile { target c++17 } }\n+// { dg-additional-options \"-Werror=ctad-maybe-unsupported\" }\n+\n+template<class...> struct A { };\n+\n+template<template<class...> class TT> auto f(...) -> decltype(TT()); // #1\n+template<template<class...> class TT> void f(int); // #2\n+\n+int main() {\n+  f<A>(0); // Calls #2 without issuing a -Wctad-maybe-unsupported\n+\t   // diagnostic for #1.\n+}"}]}