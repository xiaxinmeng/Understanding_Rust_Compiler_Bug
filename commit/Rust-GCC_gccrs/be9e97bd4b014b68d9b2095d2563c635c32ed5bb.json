{"sha": "be9e97bd4b014b68d9b2095d2563c635c32ed5bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU5ZTk3YmQ0YjAxNGI2OGQ5YjIwOTVkMjU2M2M2MzVjMzJlZDViYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-02-25T21:27:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-02-25T21:27:51Z"}, "message": "DR 1571\n\n\tDR 1571\n\t* call.c (reference_binding): Recurse on user-defined conversion.\n\t(convert_like_real) [ck_ref_bind]: Explain cv-qual mismatch.\n\nFrom-SVN: r208159", "tree": {"sha": "bab4fe34ce250572b5fb8c08d481154595358391", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bab4fe34ce250572b5fb8c08d481154595358391"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be9e97bd4b014b68d9b2095d2563c635c32ed5bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be9e97bd4b014b68d9b2095d2563c635c32ed5bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be9e97bd4b014b68d9b2095d2563c635c32ed5bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be9e97bd4b014b68d9b2095d2563c635c32ed5bb/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "241172a5cdd40dfde479d0fea166d44405ba0447", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/241172a5cdd40dfde479d0fea166d44405ba0447", "html_url": "https://github.com/Rust-GCC/gccrs/commit/241172a5cdd40dfde479d0fea166d44405ba0447"}], "stats": {"total": 96, "additions": 78, "deletions": 18}, "files": [{"sha": "a27643eef91e90c4327c10a7f7db7450ee09b549", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be9e97bd4b014b68d9b2095d2563c635c32ed5bb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be9e97bd4b014b68d9b2095d2563c635c32ed5bb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=be9e97bd4b014b68d9b2095d2563c635c32ed5bb", "patch": "@@ -1,5 +1,9 @@\n 2014-02-25  Jason Merrill  <jason@redhat.com>\n \n+\tDR 1571\n+\t* call.c (reference_binding): Recurse on user-defined conversion.\n+\t(convert_like_real) [ck_ref_bind]: Explain cv-qual mismatch.\n+\n \t* call.c (print_conversion_rejection): Handle n_arg of -2.\n \t(build_user_type_conversion_1): Pass it.\n "}, {"sha": "32767ec7c06265c1918e5726b0d64ab743cac825", "filename": "gcc/cp/call.c", "status": "modified", "additions": 47, "deletions": 17, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be9e97bd4b014b68d9b2095d2563c635c32ed5bb/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be9e97bd4b014b68d9b2095d2563c635c32ed5bb/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=be9e97bd4b014b68d9b2095d2563c635c32ed5bb", "patch": "@@ -1677,20 +1677,37 @@ reference_binding (tree rto, tree rfrom, tree expr, bool c_cast_p, int flags,\n   if (!conv)\n     return NULL;\n \n-  conv = build_conv (ck_ref_bind, rto, conv);\n+  /* Limit this to C++11 mode for GCC 4.9, to be safe.  */\n+  if (cxx_dialect >= cxx11 && conv->user_conv_p)\n+    {\n+      /* If initializing the temporary used a conversion function,\n+\t recalculate the second conversion sequence.  */\n+      for (conversion *t = conv; t; t = next_conversion (t))\n+\tif (t->kind == ck_user\n+\t    && DECL_CONV_FN_P (t->cand->fn))\n+\t  {\n+\t    tree ftype = TREE_TYPE (TREE_TYPE (t->cand->fn));\n+\t    if (TREE_CODE (ftype) != REFERENCE_TYPE)\n+\t      /* Pretend we start from an xvalue to avoid trouble from\n+\t\t LOOKUP_NO_TEMP_BIND.  */\n+\t      ftype = cp_build_reference_type (ftype, true);\n+\t    conversion *new_second\n+\t      = reference_binding (rto, ftype, NULL_TREE, c_cast_p,\n+\t\t\t\t   flags|LOOKUP_NO_CONVERSION, complain);\n+\t    if (!new_second)\n+\t      return NULL;\n+\t    conv = merge_conversion_sequences (t, new_second);\n+\t    break;\n+\t  }\n+    }\n+\n+  if (conv->kind != ck_ref_bind)\n+    conv = build_conv (ck_ref_bind, rto, conv);\n+\n   /* This reference binding, unlike those above, requires the\n      creation of a temporary.  */\n   conv->need_temporary_p = true;\n-  if (TYPE_REF_IS_RVALUE (rto))\n-    {\n-      conv->rvaluedness_matches_p = 1;\n-      /* In the second case, if the reference is an rvalue reference and\n-\t the second standard conversion sequence of the user-defined\n-\t conversion sequence includes an lvalue-to-rvalue conversion, the\n-\t program is ill-formed.  */\n-      if (conv->user_conv_p && next_conversion (conv)->kind == ck_rvalue)\n-\tconv->bad_p = 1;\n-    }\n+  conv->rvaluedness_matches_p = TYPE_REF_IS_RVALUE (rto);\n \n   return conv;\n }\n@@ -6213,12 +6230,25 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \n \tif (convs->bad_p && !next_conversion (convs)->bad_p)\n \t  {\n-\t    gcc_assert (TYPE_REF_IS_RVALUE (ref_type)\n-\t\t\t&& (real_lvalue_p (expr)\n-\t\t\t    || next_conversion(convs)->kind == ck_rvalue));\n-\n-\t    error_at (loc, \"cannot bind %qT lvalue to %qT\",\n-\t\t      TREE_TYPE (expr), totype);\n+\t    gcc_assert (TYPE_REF_IS_RVALUE (ref_type));\n+\n+\t    if (real_lvalue_p (expr)\n+\t\t|| next_conversion(convs)->kind == ck_rvalue)\n+\t      error_at (loc, \"cannot bind %qT lvalue to %qT\",\n+\t\t\tTREE_TYPE (expr), totype);\n+\t    else if (!reference_compatible_p (totype, TREE_TYPE (expr)))\n+\t      error_at (loc, \"binding %qT to reference of type %qT \"\n+\t\t\t\"discards qualifiers\", TREE_TYPE (expr),totype);\n+\t    else\n+\t      gcc_unreachable ();\n+\t    if (convs->user_conv_p)\n+\t      for (conversion *t = convs; t; t = next_conversion (t))\n+\t\tif (t->kind == ck_user)\n+\t\t  {\n+\t\t    print_z_candidate (loc, \"after user-defined conversion:\",\n+\t\t\t\t       t->cand);\n+\t\t    break;\n+\t\t  }\n \t    if (fn)\n \t      inform (input_location,\n \t\t      \"initializing argument %P of %q+D\", argnum, fn);"}, {"sha": "b8f781ad3f7f69b22b9a6dbb564d4182cf551dce", "filename": "gcc/testsuite/g++.dg/cpp0x/overload3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be9e97bd4b014b68d9b2095d2563c635c32ed5bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverload3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be9e97bd4b014b68d9b2095d2563c635c32ed5bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverload3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverload3.C?ref=be9e97bd4b014b68d9b2095d2563c635c32ed5bb", "patch": "@@ -13,5 +13,5 @@ struct wrap\n int main()\n {\n   wrap w;\n-  f(w);\t\t\t\t// { dg-error \"lvalue\" }\n+  f(w);\t\t\t\t// { dg-error \"\" }\n }"}, {"sha": "2e8d4f748efe9beb9760f63c77b6f1c0e40c098e", "filename": "gcc/testsuite/g++.dg/cpp0x/rv-init1.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be9e97bd4b014b68d9b2095d2563c635c32ed5bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-init1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be9e97bd4b014b68d9b2095d2563c635c32ed5bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-init1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-init1.C?ref=be9e97bd4b014b68d9b2095d2563c635c32ed5bb", "patch": "@@ -0,0 +1,26 @@\n+// Core DR 1604/1571/1572\n+// { dg-require-effective-target c++11 }\n+\n+struct Banana { };\n+struct Enigma { operator const Banana(); };\n+struct Doof { operator Banana&(); };\n+void enigmatic() {\n+  typedef const Banana ConstBanana;\n+  Banana &&banana1 = ConstBanana(); // { dg-error \"\" }\n+  Banana &&banana2 = Enigma();      // { dg-error \"\" }\n+  Banana &&banana3 = Doof();        // { dg-error \"\" }\n+}\n+\n+class A {\n+public:\n+  operator volatile int &();\n+};\n+A a;\n+\n+const int & ir1a = a.operator volatile int&(); // { dg-error \"\" }\n+const int & ir2a = a;\t\t\t       // { dg-error \"\" }\n+\n+struct X {\n+  operator int&();\n+} x;\n+int&& rri2 = X();\t\t// { dg-error \"\" }"}]}