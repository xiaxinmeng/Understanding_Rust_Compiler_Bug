{"sha": "39b1af70da1240d695102717ffb88018f81cae55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzliMWFmNzBkYTEyNDBkNjk1MTAyNzE3ZmZiODgwMThmODFjYWU1NQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-01-05T04:38:58Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-01-05T04:38:58Z"}, "message": "parser.c (cp_parser_binary_expression, [...]): Const-ify.\n\n\t* parser.c (cp_parser_binary_expression,\n\tcp_parser_multiplicative_expression,\n\tcp_parser_additive_expression, cp_parser_shift_expression,\n\tcp_parser_relational_expression, cp_parser_equality_expression,\n\tcp_parser_and_expression, cp_parser_exclusive_or_expression,\n\tcp_parser_inclusive_or_expression,\n\tcp_parser_logical_and_expression, cp_parser_logical_or_expression,\n\tcp_parser_binary_expression): Const-ify.\n\nFrom-SVN: r60899", "tree": {"sha": "a0db132877ab9bde8c5a2987a66af8fa3255ac16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0db132877ab9bde8c5a2987a66af8fa3255ac16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39b1af70da1240d695102717ffb88018f81cae55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39b1af70da1240d695102717ffb88018f81cae55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39b1af70da1240d695102717ffb88018f81cae55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39b1af70da1240d695102717ffb88018f81cae55/comments", "author": null, "committer": null, "parents": [{"sha": "83fa8d7a7f897837749084a11240b84e2675ef68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83fa8d7a7f897837749084a11240b84e2675ef68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83fa8d7a7f897837749084a11240b84e2675ef68"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "7b3df0050c9bdd9793e5abb63b503208dbcd78a8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39b1af70da1240d695102717ffb88018f81cae55/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39b1af70da1240d695102717ffb88018f81cae55/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=39b1af70da1240d695102717ffb88018f81cae55", "patch": "@@ -1,3 +1,14 @@\n+2003-01-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* parser.c (cp_parser_binary_expression,\n+\tcp_parser_multiplicative_expression,\n+\tcp_parser_additive_expression, cp_parser_shift_expression,\n+\tcp_parser_relational_expression, cp_parser_equality_expression,\n+\tcp_parser_and_expression, cp_parser_exclusive_or_expression,\n+\tcp_parser_inclusive_or_expression,\n+\tcp_parser_logical_and_expression, cp_parser_logical_or_expression,\n+\tcp_parser_binary_expression): Const-ify.\n+\n 2003-01-04  Mark Mitchell  <mark@codesourcery.com>\n \n \t* method.c (use_thunk): Disable access control while building the"}, {"sha": "8715deb5c583b7af18a557099721193b8829135a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39b1af70da1240d695102717ffb88018f81cae55/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39b1af70da1240d695102717ffb88018f81cae55/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=39b1af70da1240d695102717ffb88018f81cae55", "patch": "@@ -1700,7 +1700,7 @@ static bool cp_parser_check_template_parameters\n   PARAMS ((cp_parser *, unsigned));\n static tree cp_parser_binary_expression\n   PARAMS ((cp_parser *, \n-\t   cp_parser_token_tree_map,\n+\t   const cp_parser_token_tree_map,\n \t   cp_parser_expression_fn));\n static tree cp_parser_global_scope_opt\n   PARAMS ((cp_parser *, bool));\n@@ -5172,7 +5172,7 @@ static tree\n cp_parser_multiplicative_expression (parser)\n      cp_parser *parser;\n {\n-  static cp_parser_token_tree_map map = {\n+  static const cp_parser_token_tree_map map = {\n     { CPP_MULT, MULT_EXPR },\n     { CPP_DIV, TRUNC_DIV_EXPR },\n     { CPP_MOD, TRUNC_MOD_EXPR },\n@@ -5197,7 +5197,7 @@ static tree\n cp_parser_additive_expression (parser)\n      cp_parser *parser;\n {\n-  static cp_parser_token_tree_map map = {\n+  static const cp_parser_token_tree_map map = {\n     { CPP_PLUS, PLUS_EXPR },\n     { CPP_MINUS, MINUS_EXPR },\n     { CPP_EOF, ERROR_MARK }\n@@ -5221,7 +5221,7 @@ static tree\n cp_parser_shift_expression (parser)\n      cp_parser *parser;\n {\n-  static cp_parser_token_tree_map map = {\n+  static const cp_parser_token_tree_map map = {\n     { CPP_LSHIFT, LSHIFT_EXPR },\n     { CPP_RSHIFT, RSHIFT_EXPR },\n     { CPP_EOF, ERROR_MARK }\n@@ -5253,7 +5253,7 @@ static tree\n cp_parser_relational_expression (parser)\n      cp_parser *parser;\n {\n-  static cp_parser_token_tree_map map = {\n+  static const cp_parser_token_tree_map map = {\n     { CPP_LESS, LT_EXPR },\n     { CPP_GREATER, GT_EXPR },\n     { CPP_LESS_EQ, LE_EXPR },\n@@ -5281,7 +5281,7 @@ static tree\n cp_parser_equality_expression (parser)\n      cp_parser *parser;\n {\n-  static cp_parser_token_tree_map map = {\n+  static const cp_parser_token_tree_map map = {\n     { CPP_EQ_EQ, EQ_EXPR },\n     { CPP_NOT_EQ, NE_EXPR },\n     { CPP_EOF, ERROR_MARK }\n@@ -5304,7 +5304,7 @@ static tree\n cp_parser_and_expression (parser)\n      cp_parser *parser;\n {\n-  static cp_parser_token_tree_map map = {\n+  static const cp_parser_token_tree_map map = {\n     { CPP_AND, BIT_AND_EXPR },\n     { CPP_EOF, ERROR_MARK }\n   };\n@@ -5326,7 +5326,7 @@ static tree\n cp_parser_exclusive_or_expression (parser)\n      cp_parser *parser;\n {\n-  static cp_parser_token_tree_map map = {\n+  static const cp_parser_token_tree_map map = {\n     { CPP_XOR, BIT_XOR_EXPR },\n     { CPP_EOF, ERROR_MARK }\n   };\n@@ -5349,7 +5349,7 @@ static tree\n cp_parser_inclusive_or_expression (parser)\n      cp_parser *parser;\n {\n-  static cp_parser_token_tree_map map = {\n+  static const cp_parser_token_tree_map map = {\n     { CPP_OR, BIT_IOR_EXPR },\n     { CPP_EOF, ERROR_MARK }\n   };\n@@ -5371,7 +5371,7 @@ static tree\n cp_parser_logical_and_expression (parser)\n      cp_parser *parser;\n {\n-  static cp_parser_token_tree_map map = {\n+  static const cp_parser_token_tree_map map = {\n     { CPP_AND_AND, TRUTH_ANDIF_EXPR },\n     { CPP_EOF, ERROR_MARK }\n   };\n@@ -5393,7 +5393,7 @@ static tree\n cp_parser_logical_or_expression (parser)\n      cp_parser *parser;\n {\n-  static cp_parser_token_tree_map map = {\n+  static const cp_parser_token_tree_map map = {\n     { CPP_OR_OR, TRUTH_ORIF_EXPR },\n     { CPP_EOF, ERROR_MARK }\n   };\n@@ -13833,7 +13833,7 @@ cp_parser_check_template_parameters (parser, num_templates)\n static tree\n cp_parser_binary_expression (parser, token_tree_map, fn)\n      cp_parser *parser;\n-     cp_parser_token_tree_map token_tree_map;\n+     const cp_parser_token_tree_map token_tree_map;\n      cp_parser_expression_fn fn;\n {\n   tree lhs;\n@@ -13844,7 +13844,7 @@ cp_parser_binary_expression (parser, token_tree_map, fn)\n   while (true)\n     {\n       cp_token *token;\n-      cp_parser_token_tree_map_node *map_node;\n+      const cp_parser_token_tree_map_node *map_node;\n       tree rhs;\n \n       /* Peek at the next token.  */"}]}