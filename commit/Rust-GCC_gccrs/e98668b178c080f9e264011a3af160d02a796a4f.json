{"sha": "e98668b178c080f9e264011a3af160d02a796a4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk4NjY4YjE3OGMwODBmOWUyNjQwMTFhM2FmMTYwZDAyYTc5NmE0Zg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-06-12T11:59:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-06-12T11:59:32Z"}, "message": "[multiple changes]\n\n2012-06-12  Robert Dewar  <dewar@adacore.com>\n\n\t* stringt.adb: Minor reformatting.\n\n2012-06-12  Robert Dewar  <dewar@adacore.com>\n\n\t* ali-util.adb, stringt.ads: Minor reformatting.\n\n2012-06-12  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch7.adb (Process_Declarations): Handle the case where\n\tthe original context has been wrapped in a block to avoid\n\tinterference between exception handlers and At_End handlers.\n\t(Wrap_HSS_In_Block): Mark the block which contains the original\n\tstatements of the context as being a finalization wrapper.\n\t* sinfo.adb (Is_Finalization_Wrapper): New routine.\n\t(Set_Is_Finalization_Wrapper): New routine.\n\n\t* sinfo.ads: Add new attribute Is_Finalization_Wrapper applicable\n\tto block statemnts.\n\t(Is_Finalization_Wrapper): New routine with corresponding pragma Inline.\n\t(Set_Is_Finalization_Wrapper): New routine with corresponding pragma\n\tInline.\n\n2012-06-12  Steve Baird  <baird@adacore.com>\n\n\t* gnat1drv.adb (Adjust_Global_Switches): No longer need to set\n\tException_Extra_Info in CodePeer_Mode.\n\nFrom-SVN: r188449", "tree": {"sha": "e3355c65235add255b8c58fb03b9c7982870adc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3355c65235add255b8c58fb03b9c7982870adc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e98668b178c080f9e264011a3af160d02a796a4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e98668b178c080f9e264011a3af160d02a796a4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e98668b178c080f9e264011a3af160d02a796a4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e98668b178c080f9e264011a3af160d02a796a4f/comments", "author": null, "committer": null, "parents": [{"sha": "175a7536b131a2b90213a8ded70437339f4af1e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/175a7536b131a2b90213a8ded70437339f4af1e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/175a7536b131a2b90213a8ded70437339f4af1e4"}], "stats": {"total": 101, "additions": 89, "deletions": 12}, "files": [{"sha": "5944186d0d23435be8a54154cf460b4c3749acb8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98668b178c080f9e264011a3af160d02a796a4f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98668b178c080f9e264011a3af160d02a796a4f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e98668b178c080f9e264011a3af160d02a796a4f", "patch": "@@ -1,3 +1,32 @@\n+2012-06-12  Robert Dewar  <dewar@adacore.com>\n+\n+\t* stringt.adb: Minor reformatting.\n+\n+2012-06-12  Robert Dewar  <dewar@adacore.com>\n+\n+\t* ali-util.adb, stringt.ads: Minor reformatting.\n+\n+2012-06-12  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch7.adb (Process_Declarations): Handle the case where\n+\tthe original context has been wrapped in a block to avoid\n+\tinterference between exception handlers and At_End handlers.\n+\t(Wrap_HSS_In_Block): Mark the block which contains the original\n+\tstatements of the context as being a finalization wrapper.\n+\t* sinfo.adb (Is_Finalization_Wrapper): New routine.\n+\t(Set_Is_Finalization_Wrapper): New routine.\n+\n+\t* sinfo.ads: Add new attribute Is_Finalization_Wrapper applicable\n+\tto block statemnts.\n+\t(Is_Finalization_Wrapper): New routine with corresponding pragma Inline.\n+\t(Set_Is_Finalization_Wrapper): New routine with corresponding pragma\n+\tInline.\n+\n+2012-06-12  Steve Baird  <baird@adacore.com>\n+\n+\t* gnat1drv.adb (Adjust_Global_Switches): No longer need to set\n+\tException_Extra_Info in CodePeer_Mode.\n+\n 2012-06-12  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_dist.adb, exp_ch7.adb, sem_type.adb, exp_attr.adb,"}, {"sha": "0c2e87d51115ada5a2162fb1c52987394d1dd336", "filename": "gcc/ada/ali-util.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98668b178c080f9e264011a3af160d02a796a4f/gcc%2Fada%2Fali-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98668b178c080f9e264011a3af160d02a796a4f/gcc%2Fada%2Fali-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali-util.adb?ref=e98668b178c080f9e264011a3af160d02a796a4f", "patch": "@@ -475,7 +475,9 @@ package body ALI.Util is\n             --  of the source file in the table if checksums match.\n \n             --  ??? It is probably worth updating the ALI file with a new\n-            --  field to avoid recomputing it each time.\n+            --  field to avoid recomputing it each time. In any case we ensure\n+            --  that we don't gobble up string table space by doing a mark\n+            --  release around this computation.\n \n             Stringt.Mark;\n \n@@ -495,7 +497,6 @@ package body ALI.Util is\n             end if;\n \n             Stringt.Release;\n-\n          end if;\n \n          if (not Read_Only) or else Source.Table (Src).Source_Found then"}, {"sha": "0352fe25767b27a47e9de027184a8dbaee660868", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98668b178c080f9e264011a3af160d02a796a4f/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98668b178c080f9e264011a3af160d02a796a4f/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=e98668b178c080f9e264011a3af160d02a796a4f", "patch": "@@ -2094,6 +2094,22 @@ package body Exp_Ch7 is\n                then\n                   Last_Top_Level_Ctrl_Construct := Decl;\n                end if;\n+\n+            --  Handle the case where the original context has been wrapped in\n+            --  a block to avoid interference between exception handlers and\n+            --  At_End handlers. Treat the block as transparent and process its\n+            --  contents.\n+\n+            elsif Nkind (Decl) = N_Block_Statement\n+              and then Is_Finalization_Wrapper (Decl)\n+            then\n+               if Present (Handled_Statement_Sequence (Decl)) then\n+                  Process_Declarations\n+                    (Statements (Handled_Statement_Sequence (Decl)),\n+                     Preprocess);\n+               end if;\n+\n+               Process_Declarations (Declarations (Decl), Preprocess);\n             end if;\n \n             Prev_Non_Pragma (Decl);\n@@ -3696,6 +3712,11 @@ package body Exp_Ch7 is\n            Make_Block_Statement (Loc,\n              Handled_Statement_Sequence => HSS);\n \n+         --  Signal the finalization machinery that this particular block\n+         --  contains the original context.\n+\n+         Set_Is_Finalization_Wrapper (Block);\n+\n          Set_Handled_Statement_Sequence (N,\n            Make_Handled_Sequence_Of_Statements (Loc, New_List (Block)));\n          HSS := Handled_Statement_Sequence (N);"}, {"sha": "57aacca5b45017ab81676f67ffcaa4b687d37d3f", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98668b178c080f9e264011a3af160d02a796a4f/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98668b178c080f9e264011a3af160d02a796a4f/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=e98668b178c080f9e264011a3af160d02a796a4f", "patch": "@@ -265,12 +265,6 @@ procedure Gnat1drv is\n \n          Force_ALI_Tree_File := True;\n          Try_Semantics := True;\n-\n-         --  Enable Exception_Extra_Info for now, to avoid extra messages\n-         --  on controlled operations.\n-         --  ??? To be revised.\n-\n-         Exception_Extra_Info := True;\n       end if;\n \n       --  Set Configurable_Run_Time mode if system.ads flag set"}, {"sha": "9c6b6888b21a21dd57ee5b857d4fd00c243ceb56", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98668b178c080f9e264011a3af160d02a796a4f/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98668b178c080f9e264011a3af160d02a796a4f/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=e98668b178c080f9e264011a3af160d02a796a4f", "patch": "@@ -1806,6 +1806,14 @@ package body Sinfo is\n       return Flag11 (N);\n    end Is_Expanded_Build_In_Place_Call;\n \n+   function Is_Finalization_Wrapper\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Block_Statement);\n+      return Flag9 (N);\n+   end Is_Finalization_Wrapper;\n+\n    function Is_Folded_In_Parser\n       (N : Node_Id) return Boolean is\n    begin\n@@ -4902,6 +4910,14 @@ package body Sinfo is\n       Set_Flag11 (N, Val);\n    end Set_Is_Expanded_Build_In_Place_Call;\n \n+   procedure Set_Is_Finalization_Wrapper\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Block_Statement);\n+      Set_Flag9 (N, Val);\n+   end Set_Is_Finalization_Wrapper;\n+\n    procedure Set_Is_Folded_In_Parser\n       (N : Node_Id; Val : Boolean := True) is\n    begin"}, {"sha": "76204498da054c54b891f52548b36b896f033dde", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98668b178c080f9e264011a3af160d02a796a4f/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98668b178c080f9e264011a3af160d02a796a4f/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=e98668b178c080f9e264011a3af160d02a796a4f", "patch": "@@ -1310,6 +1310,12 @@ package Sinfo is\n    --    actuals to support a build-in-place style of call have been added to\n    --    the call.\n \n+   --  Is_Finalization_Wrapper (Flag9-Sem);\n+   --    This flag is present in N_Block_Statement nodes. It is set when the\n+   --    block acts as a wrapper of a handled construct which has controlled\n+   --    objects. The wrapper prevents interference between exception handlers\n+   --    and At_End handlers.\n+\n    --  Is_In_Discriminant_Check (Flag11-Sem)\n    --    This flag is present in a selected component, and is used to indicate\n    --    that the reference occurs within a discriminant check. The\n@@ -4331,6 +4337,7 @@ package Sinfo is\n       --  Is_Task_Allocation_Block (Flag6)\n       --  Is_Asynchronous_Call_Block (Flag7)\n       --  Exception_Junk (Flag8-Sem)\n+      --  Is_Finalization_Wrapper (Flag9-Sem)\n \n       -------------------------\n       -- 5.7  Exit Statement --\n@@ -8670,6 +8677,9 @@ package Sinfo is\n    function Is_Expanded_Build_In_Place_Call\n      (N : Node_Id) return Boolean;    -- Flag11\n \n+   function Is_Finalization_Wrapper\n+     (N : Node_Id) return Boolean;    -- Flag9\n+\n    function Is_Folded_In_Parser\n      (N : Node_Id) return Boolean;    -- Flag4\n \n@@ -9657,6 +9667,9 @@ package Sinfo is\n    procedure Set_Is_Expanded_Build_In_Place_Call\n      (N : Node_Id; Val : Boolean := True);    -- Flag11\n \n+   procedure Set_Is_Finalization_Wrapper\n+     (N : Node_Id; Val : Boolean := True);    -- Flag9\n+\n    procedure Set_Is_Folded_In_Parser\n      (N : Node_Id; Val : Boolean := True);    -- Flag4\n \n@@ -12014,6 +12027,7 @@ package Sinfo is\n    pragma Inline (Is_Elsif);\n    pragma Inline (Is_Entry_Barrier_Function);\n    pragma Inline (Is_Expanded_Build_In_Place_Call);\n+   pragma Inline (Is_Finalization_Wrapper);\n    pragma Inline (Is_Folded_In_Parser);\n    pragma Inline (Is_In_Discriminant_Check);\n    pragma Inline (Is_Machine_Number);\n@@ -12338,6 +12352,7 @@ package Sinfo is\n    pragma Inline (Set_Is_Elsif);\n    pragma Inline (Set_Is_Entry_Barrier_Function);\n    pragma Inline (Set_Is_Expanded_Build_In_Place_Call);\n+   pragma Inline (Set_Is_Finalization_Wrapper);\n    pragma Inline (Set_Is_Folded_In_Parser);\n    pragma Inline (Set_Is_In_Discriminant_Check);\n    pragma Inline (Set_Is_Machine_Number);"}, {"sha": "c0ec2f10fdf9253523a95923f2b45e3108042550", "filename": "gcc/ada/stringt.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98668b178c080f9e264011a3af160d02a796a4f/gcc%2Fada%2Fstringt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98668b178c080f9e264011a3af160d02a796a4f/gcc%2Fada%2Fstringt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstringt.adb?ref=e98668b178c080f9e264011a3af160d02a796a4f", "patch": "@@ -70,7 +70,7 @@ package body Stringt is\n    --  when Start_String is called with a parameter that is the last string\n    --  currently allocated in the table.\n \n-   Strings_Last : String_Id := First_String_Id;\n+   Strings_Last      : String_Id := First_String_Id;\n    String_Chars_Last : Int := 0;\n    --  Strings_Last and String_Chars_Last are used by procedure Mark and\n    --  Release to get a snapshot of the tables and to restore them to their"}, {"sha": "7f96df03e478fb7be50a5d8bed56e9a5ad3313ad", "filename": "gcc/ada/stringt.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98668b178c080f9e264011a3af160d02a796a4f/gcc%2Fada%2Fstringt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98668b178c080f9e264011a3af160d02a796a4f/gcc%2Fada%2Fstringt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstringt.ads?ref=e98668b178c080f9e264011a3af160d02a796a4f", "patch": "@@ -63,12 +63,13 @@ package Stringt is\n    --  Unlock internal tables, in case back end needs to modify them\n \n    procedure Mark;\n-   --  Take a snapshot of the internal tables\n+   --  Take a snapshot of the internal tables. Used in conjunction with Release\n+   --  when computing temporary string values that need not be preserved.\n \n    procedure Release;\n    --  Restore the internal tables to the situation when Mark was last called.\n-   --  Mark and Release are used when getting checksums of sources in minimal\n-   --  recompilation mode, to reduce memory usage.\n+   --  If Release is called with no prior call to Mark, the entire string table\n+   --  is cleared to its initial (empty) setting.\n \n    procedure Start_String;\n    --  Sets up for storing a new string in the table. To store a string, a"}]}