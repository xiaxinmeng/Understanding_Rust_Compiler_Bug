{"sha": "70454c50b4592fe6876ecca13268264e395e058f", "node_id": "C_kwDOANBUbNoAKDcwNDU0YzUwYjQ1OTJmZTY4NzZlY2NhMTMyNjgyNjRlMzk1ZTA1OGY", "commit": {"author": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2022-06-21T06:45:07Z"}, "committer": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2022-06-21T06:45:07Z"}, "message": "tree-object-size: Don't let error_mark_node escape for ADDR_EXPR [PR105736]\n\nThe addr_expr computation does not check for error_mark_node before\nreturning the size expression.  This used to work in the constant case\nbecause the conversion to uhwi would end up causing it to return\nsize_unknown, but that won't work for the dynamic case.\n\nModify the control flow to explicitly return size_unknown if the offset\ncomputation returns an error_mark_node.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/105736\n\t* tree-object-size.cc (addr_object_size): Return size_unknown\n\twhen object offset computation returns an error.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/105736\n\t* gcc.dg/builtin-dynamic-object-size-0.c (TV4): New struct.\n\t(val3): New variable.\n\t(test_pr105736): New test.\n\t(main): Call it.\n\nSigned-off-by: Siddhesh Poyarekar <siddhesh@gotplt.org>", "tree": {"sha": "66e0d9570b3740d06281739bd99eeda1b6ea33c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66e0d9570b3740d06281739bd99eeda1b6ea33c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70454c50b4592fe6876ecca13268264e395e058f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70454c50b4592fe6876ecca13268264e395e058f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70454c50b4592fe6876ecca13268264e395e058f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70454c50b4592fe6876ecca13268264e395e058f/comments", "author": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6ba321135463edff57b94fa0efc6bc0dd314267", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6ba321135463edff57b94fa0efc6bc0dd314267", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6ba321135463edff57b94fa0efc6bc0dd314267"}], "stats": {"total": 38, "additions": 29, "deletions": 9}, "files": [{"sha": "01a280b2d7b949b9990bcb1bcc781d32b9843538", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-0.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70454c50b4592fe6876ecca13268264e395e058f/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70454c50b4592fe6876ecca13268264e395e058f/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c?ref=70454c50b4592fe6876ecca13268264e395e058f", "patch": "@@ -479,6 +479,20 @@ test_loop (int *obj, size_t sz, size_t start, size_t end, int incr)\n   return __builtin_dynamic_object_size (ptr, 0);\n }\n \n+/* Other tests.  */\n+\n+struct TV4\n+{\n+  __attribute__((vector_size (sizeof (int) * 4))) int v;\n+};\n+\n+struct TV4 val3;\n+int *\n+test_pr105736 (struct TV4 *a)\n+{\n+  return &a->v[0];\n+}\n+\n unsigned nfails = 0;\n \n #define FAIL() ({ \\\n@@ -633,6 +647,10 @@ main (int argc, char **argv)\n     FAIL ();\n   if (test_loop (arr, 42, 20, 52, 1) != 0)\n     FAIL ();\n+  /* pr105736.  */\n+  int *t = test_pr105736 (&val3);\n+  if (__builtin_dynamic_object_size (t, 0) != -1)\n+    FAIL ();\n \n   if (nfails > 0)\n     __builtin_abort ();"}, {"sha": "12bc0868b7749cc05cdf3ca460a1b146f68aec04", "filename": "gcc/tree-object-size.cc", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70454c50b4592fe6876ecca13268264e395e058f/gcc%2Ftree-object-size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70454c50b4592fe6876ecca13268264e395e058f/gcc%2Ftree-object-size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.cc?ref=70454c50b4592fe6876ecca13268264e395e058f", "patch": "@@ -695,19 +695,21 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n \tvar_size = pt_var_size;\n       bytes = compute_object_offset (TREE_OPERAND (ptr, 0), var);\n       if (bytes != error_mark_node)\n-\tbytes = size_for_offset (var_size, bytes);\n-      if (var != pt_var\n-\t  && pt_var_size\n-\t  && TREE_CODE (pt_var) == MEM_REF\n-\t  && bytes != error_mark_node)\n \t{\n-\t  tree bytes2 = compute_object_offset (TREE_OPERAND (ptr, 0), pt_var);\n-\t  if (bytes2 != error_mark_node)\n+\t  bytes = size_for_offset (var_size, bytes);\n+\t  if (var != pt_var && pt_var_size && TREE_CODE (pt_var) == MEM_REF)\n \t    {\n-\t      bytes2 = size_for_offset (pt_var_size, bytes2);\n-\t      bytes = size_binop (MIN_EXPR, bytes, bytes2);\n+\t      tree bytes2 = compute_object_offset (TREE_OPERAND (ptr, 0),\n+\t\t\t\t\t\t   pt_var);\n+\t      if (bytes2 != error_mark_node)\n+\t\t{\n+\t\t  bytes2 = size_for_offset (pt_var_size, bytes2);\n+\t\t  bytes = size_binop (MIN_EXPR, bytes, bytes2);\n+\t\t}\n \t    }\n \t}\n+      else\n+\tbytes = size_unknown (object_size_type);\n \n       wholebytes\n \t= object_size_type & OST_SUBOBJECT ? var_size : pt_var_wholesize;"}]}