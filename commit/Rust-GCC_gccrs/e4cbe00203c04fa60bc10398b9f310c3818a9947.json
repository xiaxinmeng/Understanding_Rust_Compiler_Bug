{"sha": "e4cbe00203c04fa60bc10398b9f310c3818a9947", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRjYmUwMDIwM2MwNGZhNjBiYzEwMzk4YjlmMzEwYzM4MThhOTk0Nw==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-03-08T20:40:08Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-03-08T20:40:08Z"}, "message": "openbsd.h (HANDLE_SYSV_PRAGMA): Define.\n\n        * config/openbsd.h (HANDLE_SYSV_PRAGMA): Define.\n        * rs6000/xm-sysv4.h (HOST_BITS_PER_LONGLONG): Remove #if 0.\n        * mn10300.h (CASE_DROPS_THROUGH): Delete.\n        * mn10200.h (CASE_DROPS_THROUGH): Delete.\n        * h8300.h (CASE_DROPS_THROUGH): Delete.\n\nFrom-SVN: r25645", "tree": {"sha": "c5d40b6f26002e6d9368f809745ff165a7acdb3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5d40b6f26002e6d9368f809745ff165a7acdb3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4cbe00203c04fa60bc10398b9f310c3818a9947", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4cbe00203c04fa60bc10398b9f310c3818a9947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4cbe00203c04fa60bc10398b9f310c3818a9947", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4cbe00203c04fa60bc10398b9f310c3818a9947/comments", "author": null, "committer": null, "parents": [{"sha": "49071ddced0d0e0e3425fa7dc054744ca1f3e491", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49071ddced0d0e0e3425fa7dc054744ca1f3e491", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49071ddced0d0e0e3425fa7dc054744ca1f3e491"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "877b1e56a90dc1c8c80069893a27714d801b3794", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4cbe00203c04fa60bc10398b9f310c3818a9947/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4cbe00203c04fa60bc10398b9f310c3818a9947/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4cbe00203c04fa60bc10398b9f310c3818a9947", "patch": "@@ -1,3 +1,7 @@\n+Mon Mar  8 18:55:21 1999  Marc Espie <espie@cvs.openbsd.org>\n+\n+        * config/openbsd.h (HANDLE_SYSV_PRAGMA): Define.\n+\n Mon Mar  8 16:04:44 1999  Jim Wilson  <wilson@cygnus.com>\n \n \t* local-alloc.c (combine_regs): Don't combine if we have a hard reg\n@@ -8,6 +12,12 @@ Mon Mar  8 16:04:44 1999  Jim Wilson  <wilson@cygnus.com>\n \n Mon Mar  8 15:27:42 1999  Jeffrey A Law  (law@cygnus.com)\n \n+\t* rs6000/xm-sysv4.h (HOST_BITS_PER_LONGLONG): Remove #if 0.\n+\n+\t* mn10300.h (CASE_DROPS_THROUGH): Delete.\n+\t* mn10200.h (CASE_DROPS_THROUGH): Delete.\n+\t* h8300.h (CASE_DROPS_THROUGH): Delete.\n+\n \t* flow.c (merge_blocks_nomove): For HAVE_cc0 targets, make sure\n \tto also delete the cc0 setter when deleting a conditional branch\n \tto the next block."}, {"sha": "ff94e89284a6c1ab55e0e0f8473643453e92c662", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4cbe00203c04fa60bc10398b9f310c3818a9947/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4cbe00203c04fa60bc10398b9f310c3818a9947/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=e4cbe00203c04fa60bc10398b9f310c3818a9947", "patch": "@@ -879,11 +879,6 @@ struct rtx_def *function_arg();\n    Do not define this if the table should contain absolute addresses. */\n /*#define CASE_VECTOR_PC_RELATIVE 1 */\n \n-/* Define this if the case instruction drops through after the table\n-   when the index is out of range.  Don't define it if the case insn\n-   jumps to the default label instead.  */\n-#define CASE_DROPS_THROUGH\n-\n /* Specify the tree operation to be used to convert reals to integers.  */\n #define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n "}, {"sha": "fcf1058e0a47930dd6501054a40ed53c5c46e739", "filename": "gcc/config/mn10200/mn10200.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4cbe00203c04fa60bc10398b9f310c3818a9947/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4cbe00203c04fa60bc10398b9f310c3818a9947/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.h?ref=e4cbe00203c04fa60bc10398b9f310c3818a9947", "patch": "@@ -991,11 +991,6 @@ do { char dstr[30];\t\t\t\t\t\\\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE Pmode\n \n-/* Define this if the case instruction drops through after the table\n-   when the index is out of range.  Don't define it if the case insn\n-   jumps to the default label instead.  */\n-#define CASE_DROPS_THROUGH\n-\n /* Dispatch tables on the mn10200 are extremely expensive in terms of code\n    and readonly data size.  So we crank up the case threshold value to\n    encourage a series of if/else comparisons to implement many small switch"}, {"sha": "5eb2aef1c28c18fbc2bfd941fd7b4b10b1125570", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4cbe00203c04fa60bc10398b9f310c3818a9947/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4cbe00203c04fa60bc10398b9f310c3818a9947/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=e4cbe00203c04fa60bc10398b9f310c3818a9947", "patch": "@@ -987,11 +987,6 @@ do { char dstr[30];\t\t\t\t\t\\\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE Pmode\n \n-/* Define this if the case instruction drops through after the table\n-   when the index is out of range.  Don't define it if the case insn\n-   jumps to the default label instead.  */\n-#define CASE_DROPS_THROUGH\n-\n /* Define if operations between registers always perform the operation\n    on the full register even if a narrower mode is specified.  */\n #define WORD_REGISTER_OPERATIONS"}, {"sha": "30f2494234121b77dc2976c220d9143ce4841488", "filename": "gcc/config/openbsd.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4cbe00203c04fa60bc10398b9f310c3818a9947/gcc%2Fconfig%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4cbe00203c04fa60bc10398b9f310c3818a9947/gcc%2Fconfig%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fopenbsd.h?ref=e4cbe00203c04fa60bc10398b9f310c3818a9947", "patch": "@@ -300,3 +300,9 @@ do {\t\t\t\t\t\t\t\t\t \\\n    #pragma weak.  */\n #define GTHREAD_USE_WEAK 0\n \n+/* bug work around: we don't want to support #pragma weak, but the current\n+   code layout needs HANDLE_PRAGMA_WEAK asserted for __attribute((weak)) to\n+   work.  On the other hand, we don't define HANDLE_PRAGMA_WEAK directly,\n+   as this depends on a few other details as well...  */\n+#define HANDLE_SYSV_PRAGMA\n+"}, {"sha": "181f8b7d818db4f798d0e003815e863b808e50be", "filename": "gcc/config/rs6000/xm-sysv4.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4cbe00203c04fa60bc10398b9f310c3818a9947/gcc%2Fconfig%2Frs6000%2Fxm-sysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4cbe00203c04fa60bc10398b9f310c3818a9947/gcc%2Fconfig%2Frs6000%2Fxm-sysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxm-sysv4.h?ref=e4cbe00203c04fa60bc10398b9f310c3818a9947", "patch": "@@ -30,9 +30,7 @@ Boston, MA 02111-1307, USA.  */\n #define HOST_BITS_PER_SHORT 16\n #define HOST_BITS_PER_INT 32\n #define HOST_BITS_PER_LONG 32\n-#if 0\n #define HOST_BITS_PER_LONGLONG 64\n-#endif\n \n /* Doubles are stored in memory with the high order word first.  This\n    matters when cross-compiling.  */"}]}