{"sha": "b15fd0927e98e8c679e27ac6b822f8a0817f2abc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE1ZmQwOTI3ZTk4ZThjNjc5ZTI3YWM2YjgyMmY4YTA4MTdmMmFiYw==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-04-15T00:26:35Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-04-15T00:26:35Z"}, "message": "emit-rtl.c (operand_subword): Rework slightly to avoid bogus warning from previous change.\n\n8\n        * emit-rtl.c (operand_subword): Rework slightly to avoid\n        bogus warning from previous change.\n\nFrom-SVN: r19219", "tree": {"sha": "2b88aa9e01bcca308ab0396ac268e41e123503a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b88aa9e01bcca308ab0396ac268e41e123503a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b15fd0927e98e8c679e27ac6b822f8a0817f2abc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b15fd0927e98e8c679e27ac6b822f8a0817f2abc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b15fd0927e98e8c679e27ac6b822f8a0817f2abc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b15fd0927e98e8c679e27ac6b822f8a0817f2abc/comments", "author": null, "committer": null, "parents": [{"sha": "fcb7cb6c0fe5f6c3693cea72ec1af977ef765693", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcb7cb6c0fe5f6c3693cea72ec1af977ef765693", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcb7cb6c0fe5f6c3693cea72ec1af977ef765693"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "4d9361ce9bc5bebe8911b73e9703bf03cd6ac149", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15fd0927e98e8c679e27ac6b822f8a0817f2abc/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15fd0927e98e8c679e27ac6b822f8a0817f2abc/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=b15fd0927e98e8c679e27ac6b822f8a0817f2abc", "patch": "@@ -1091,6 +1091,7 @@ operand_subword (op, i, validate_address, mode)\n {\n   HOST_WIDE_INT val;\n   int size_ratio = HOST_BITS_PER_WIDE_INT / BITS_PER_WORD;\n+  int bits_per_word = BITS_PER_WORD;\n \n   if (mode == VOIDmode)\n     mode = GET_MODE (op);\n@@ -1339,9 +1340,9 @@ operand_subword (op, i, validate_address, mode)\n      bit are all one.  So we get either a reasonable negative value or a\n      reasonable unsigned value for this mode.  */\n   if (BITS_PER_WORD < HOST_BITS_PER_WIDE_INT\n-      && ((val & ((HOST_WIDE_INT) (-1) << (BITS_PER_WORD - 1)))\n-          != ((HOST_WIDE_INT) (-1) << (BITS_PER_WORD - 1))))\n-    val &= ((HOST_WIDE_INT) 1 << BITS_PER_WORD) - 1;\n+      && ((val & ((HOST_WIDE_INT) (-1) << (bits_per_word - 1)))\n+          != ((HOST_WIDE_INT) (-1) << (bits_per_word - 1))))\n+    val &= ((HOST_WIDE_INT) 1 << bits_per_word) - 1;\n \n   /* If this would be an entire word for the target, but is not for\n      the host, then sign-extend on the host so that the number will look\n@@ -1353,8 +1354,8 @@ operand_subword (op, i, validate_address, mode)\n      The later confuses the sparc backend.  */\n \n   if (BITS_PER_WORD < HOST_BITS_PER_WIDE_INT\n-      && (val & ((HOST_WIDE_INT) 1 << (BITS_PER_WORD - 1))))\n-    val |= ((HOST_WIDE_INT) (-1) << BITS_PER_WORD);\n+      && (val & ((HOST_WIDE_INT) 1 << (bits_per_word - 1))))\n+    val |= ((HOST_WIDE_INT) (-1) << bits_per_word);\n \n   return GEN_INT (val);\n }"}]}