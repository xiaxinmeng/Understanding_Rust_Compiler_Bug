{"sha": "cb25dea3ef2c7768007bffc56f0e31e1c42b44e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IyNWRlYTNlZjJjNzc2ODAwN2JmZmM1NmYwZTMxZTFjNDJiNDRlMg==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2021-03-08T18:20:41Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2021-03-08T18:21:39Z"}, "message": "rs6000: Fix invalid splits when using Altivec style addresses [PR98959]\n\nThe rs6000_emit_le_vsx_* functions assume they are not passed an Altivec\nstyle \"& ~16\" address.  However, some of our expanders and splitters do\nnot verify we do not have an Altivec style address before calling those\nfunctions, leading to an ICE.  The solution here is to guard the expanders\nand splitters to ensure we do not call them if we're given an Altivec style\naddress.\n\n2021-03-08  Peter Bergner  <bergner@linux.ibm.com>\n\ngcc/\n\tPR target/98959\n\t* config/rs6000/rs6000.c (rs6000_emit_le_vsx_permute): Add an assert\n\tto ensure we do not have an Altivec style address.\n\t* config/rs6000/vsx.md (*vsx_le_perm_load_<mode>): Disable if passed\n\tan Altivec style address.\n\t(*vsx_le_perm_store_<mode>): Likewise.\n\t(splitters after *vsx_le_perm_store_<mode>): Likewise.\n\t(vsx_load_<mode>): Disable special expander if passed an Altivec\n\tstyle address.\n\t(vsx_store_<mode>): Likewise.\n\ngcc/testsuite/\n\tPR target/98959\n\t* gcc.target/powerpc/pr98959.c: New test.", "tree": {"sha": "53110f8a8226b7d1a8606e84dc070df93114b210", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53110f8a8226b7d1a8606e84dc070df93114b210"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb25dea3ef2c7768007bffc56f0e31e1c42b44e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb25dea3ef2c7768007bffc56f0e31e1c42b44e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb25dea3ef2c7768007bffc56f0e31e1c42b44e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb25dea3ef2c7768007bffc56f0e31e1c42b44e2/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ded6a1953dd7f43229c44e5d0d17c264338a3f4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ded6a1953dd7f43229c44e5d0d17c264338a3f4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ded6a1953dd7f43229c44e5d0d17c264338a3f4c"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "c89fb6e124af1c58cb9e62b334ca667e1e66368e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb25dea3ef2c7768007bffc56f0e31e1c42b44e2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb25dea3ef2c7768007bffc56f0e31e1c42b44e2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=cb25dea3ef2c7768007bffc56f0e31e1c42b44e2", "patch": "@@ -10111,6 +10111,9 @@ rs6000_const_vec (machine_mode mode)\n void\n rs6000_emit_le_vsx_permute (rtx dest, rtx source, machine_mode mode)\n {\n+  gcc_assert (!altivec_indexed_or_indirect_operand (dest, mode));\n+  gcc_assert (!altivec_indexed_or_indirect_operand (source, mode));\n+\n   /* Scalar permutations are easier to express in integer modes rather than\n      floating-point modes, so cast them here.  We use V1TImode instead\n      of TImode to ensure that the values don't go through GPRs.  */"}, {"sha": "a1fa4f94d51a6881a4564552c23e322aa5283a5a", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb25dea3ef2c7768007bffc56f0e31e1c42b44e2/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb25dea3ef2c7768007bffc56f0e31e1c42b44e2/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=cb25dea3ef2c7768007bffc56f0e31e1c42b44e2", "patch": "@@ -987,11 +987,13 @@\n (define_insn_and_split \"*vsx_le_perm_load_<mode>\"\n   [(set (match_operand:VSX_LE_128 0 \"vsx_register_operand\" \"=wa,r\")\n         (match_operand:VSX_LE_128 1 \"memory_operand\" \"Z,Q\"))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\n+   && !altivec_indexed_or_indirect_operand (operands[1], <MODE>mode)\"\n   \"@\n    #\n    #\"\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\n+   && !altivec_indexed_or_indirect_operand (operands[1], <MODE>mode)\"\n   [(const_int 0)]\n {\n   rtx tmp = (can_create_pseudo_p ()\n@@ -1008,7 +1010,8 @@\n (define_insn \"*vsx_le_perm_store_<mode>\"\n   [(set (match_operand:VSX_LE_128 0 \"memory_operand\" \"=Z,Q\")\n         (match_operand:VSX_LE_128 1 \"vsx_register_operand\" \"+wa,r\"))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\n+   & !altivec_indexed_or_indirect_operand (operands[0], <MODE>mode)\"\n   \"@\n    #\n    #\"\n@@ -1019,7 +1022,8 @@\n (define_split\n   [(set (match_operand:VSX_LE_128 0 \"memory_operand\")\n         (match_operand:VSX_LE_128 1 \"vsx_register_operand\"))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !reload_completed && !TARGET_P9_VECTOR\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !reload_completed && !TARGET_P9_VECTOR\n+   && !altivec_indexed_or_indirect_operand (operands[0], <MODE>mode)\"\n   [(const_int 0)]\n {\n   rtx tmp = (can_create_pseudo_p ()\n@@ -1075,7 +1079,8 @@\n (define_split\n   [(set (match_operand:VSX_LE_128 0 \"memory_operand\")\n         (match_operand:VSX_LE_128 1 \"vsx_register_operand\"))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX && reload_completed && !TARGET_P9_VECTOR\"\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && reload_completed && !TARGET_P9_VECTOR\n+   && !altivec_indexed_or_indirect_operand (operands[0], <MODE>mode)\"\n   [(const_int 0)]\n {\n   rs6000_emit_le_vsx_permute (operands[1], operands[1], <MODE>mode);\n@@ -1241,7 +1246,8 @@\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n {\n   /* Expand to swaps if needed, prior to swap optimization.  */\n-  if (!BYTES_BIG_ENDIAN && !TARGET_P9_VECTOR)\n+  if (!BYTES_BIG_ENDIAN && !TARGET_P9_VECTOR\n+      && !altivec_indexed_or_indirect_operand(operands[1], <MODE>mode))\n     {\n       rs6000_emit_le_vsx_move (operands[0], operands[1], <MODE>mode);\n       DONE;\n@@ -1254,7 +1260,8 @@\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n {\n   /* Expand to swaps if needed, prior to swap optimization.  */\n-  if (!BYTES_BIG_ENDIAN && !TARGET_P9_VECTOR)\n+  if (!BYTES_BIG_ENDIAN && !TARGET_P9_VECTOR\n+      && !altivec_indexed_or_indirect_operand(operands[0], <MODE>mode))\n     {\n       rs6000_emit_le_vsx_move (operands[0], operands[1], <MODE>mode);\n       DONE;"}, {"sha": "9e8523db7b506ce88a59d4b55b688f89da3957f9", "filename": "gcc/testsuite/gcc.target/powerpc/pr98959.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb25dea3ef2c7768007bffc56f0e31e1c42b44e2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr98959.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb25dea3ef2c7768007bffc56f0e31e1c42b44e2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr98959.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr98959.c?ref=cb25dea3ef2c7768007bffc56f0e31e1c42b44e2", "patch": "@@ -0,0 +1,17 @@\n+/* PR target/98959 */\n+/* { dg-options \"-fno-schedule-insns -O2 -mcmodel=small\" } */\n+\n+/* Verify we do not ICE on the following.  */\n+\n+typedef __attribute__ ((altivec (vector__))) unsigned __int128 v1ti_t;\n+\n+v1ti_t foo (v1ti_t v);\n+\n+void\n+bug ()\n+{\n+  v1ti_t dv = { ((31415926539) << 6) };\n+  dv = foo (dv);\n+  if (dv[0] != 0)\n+    __builtin_abort ();\n+}"}]}