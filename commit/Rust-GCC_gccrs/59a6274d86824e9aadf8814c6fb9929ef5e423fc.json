{"sha": "59a6274d86824e9aadf8814c6fb9929ef5e423fc", "node_id": "C_kwDOANBUbNoAKDU5YTYyNzRkODY4MjRlOWFhZGY4ODE0YzZmYjk5MjllZjVlNDIzZmM", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-04-19T19:53:35Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-06-02T09:06:46Z"}, "message": "[Ada] Couple of small preparatory adjustments\n\nNo functional changes.\n\ngcc/ada/\n\n\t* gcc-interface/decl.cc (gnat_to_gnu_entity): Do not check the\n\tscope of anonymous access Itypes.\n\t* gcc-interface/trans.cc (Identifier_to_gnu): Do not translate\n\tthe return type of a subprogram here.", "tree": {"sha": "44a7c9ce7fe82a6acf127f6e4444300475528b2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44a7c9ce7fe82a6acf127f6e4444300475528b2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59a6274d86824e9aadf8814c6fb9929ef5e423fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59a6274d86824e9aadf8814c6fb9929ef5e423fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59a6274d86824e9aadf8814c6fb9929ef5e423fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59a6274d86824e9aadf8814c6fb9929ef5e423fc/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbb9c475bff9e3646542fa5273433abc0300cf6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbb9c475bff9e3646542fa5273433abc0300cf6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbb9c475bff9e3646542fa5273433abc0300cf6a"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "9574dbbb3968c99d8dc2f782eb712c12cfc99ee0", "filename": "gcc/ada/gcc-interface/decl.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a6274d86824e9aadf8814c6fb9929ef5e423fc/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a6274d86824e9aadf8814c6fb9929ef5e423fc/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.cc?ref=59a6274d86824e9aadf8814c6fb9929ef5e423fc", "patch": "@@ -346,10 +346,12 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n       && !present_gnu_tree (gnat_entity)\n       && In_Extended_Main_Code_Unit (gnat_entity))\n     {\n-      /* Ensure that we are in a subprogram mentioned in the Scope chain of\n+      /* Unless it's for an anonymous access type, whose scope is irrelevant,\n+\t ensure that we are in a subprogram mentioned in the Scope chain of\n \t this entity, our current scope is global, or we encountered a task\n \t or entry (where we can't currently accurately check scoping).  */\n-      if (!current_function_decl\n+      if (Ekind (gnat_entity) == E_Anonymous_Access_Type\n+\t  || !current_function_decl\n \t  || DECL_ELABORATION_PROC_P (current_function_decl))\n \t{\n \t  process_type (gnat_entity);"}, {"sha": "46030d808f59d8d36856691898f38a12a01890b5", "filename": "gcc/ada/gcc-interface/trans.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a6274d86824e9aadf8814c6fb9929ef5e423fc/gcc%2Fada%2Fgcc-interface%2Ftrans.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a6274d86824e9aadf8814c6fb9929ef5e423fc/gcc%2Fada%2Fgcc-interface%2Ftrans.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.cc?ref=59a6274d86824e9aadf8814c6fb9929ef5e423fc", "patch": "@@ -1220,10 +1220,13 @@ Identifier_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n \tgnat_result_type = Etype (gnat_node);\n     }\n \n-  /* Expand the type of this identifier first, in case it is an enumeral\n-     literal, which only get made when the type is expanded.  There is no\n-     order-of-elaboration issue here.  */\n-  gnu_result_type = get_unpadded_type (gnat_result_type);\n+  /* Expand the type of this identifier first if it is needed, in case it is an\n+     enumeral literal, which only get made when the type is expanded.  There is\n+     no order-of-elaboration issue here.  */\n+  if (Is_Subprogram (gnat_entity))\n+    gnu_result_type = NULL_TREE;\n+  else\n+    gnu_result_type = get_unpadded_type (gnat_result_type);\n \n   /* If this is a non-imported elementary constant with an address clause,\n      retrieve the value instead of a pointer to be dereferenced unless"}]}