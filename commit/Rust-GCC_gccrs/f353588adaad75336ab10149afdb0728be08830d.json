{"sha": "f353588adaad75336ab10149afdb0728be08830d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM1MzU4OGFkYWFkNzUzMzZhYjEwMTQ5YWZkYjA3MjhiZTA4ODMwZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-11-26T19:47:28Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-11-26T19:47:28Z"}, "message": "(insert): Don't put a REG into qty_const.\n\nFrom-SVN: r10607", "tree": {"sha": "5f3cd5d9779bef7cbe5fbfd8a11fab898620ca07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f3cd5d9779bef7cbe5fbfd8a11fab898620ca07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f353588adaad75336ab10149afdb0728be08830d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f353588adaad75336ab10149afdb0728be08830d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f353588adaad75336ab10149afdb0728be08830d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f353588adaad75336ab10149afdb0728be08830d/comments", "author": null, "committer": null, "parents": [{"sha": "de3cb7c346e71aa17e37bc48c19105c9fa2cb772", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de3cb7c346e71aa17e37bc48c19105c9fa2cb772", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de3cb7c346e71aa17e37bc48c19105c9fa2cb772"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "efd05dedaf9227d5ed5b726cfe658c6fa88ac3f6", "filename": "gcc/cse.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f353588adaad75336ab10149afdb0728be08830d/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f353588adaad75336ab10149afdb0728be08830d/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=f353588adaad75336ab10149afdb0728be08830d", "patch": "@@ -1371,20 +1371,22 @@ insert (x, classp, hash, mode)\n      update `qty_const_insn' to show that `this_insn' is the latest\n      insn making that quantity equivalent to the constant.  */\n \n-  if (elt->is_const && classp && GET_CODE (classp->exp) == REG)\n+  if (elt->is_const && classp && GET_CODE (classp->exp) == REG\n+      && GET_CODE (x) != REG)\n     {\n       qty_const[reg_qty[REGNO (classp->exp)]]\n \t= gen_lowpart_if_possible (qty_mode[reg_qty[REGNO (classp->exp)]], x);\n       qty_const_insn[reg_qty[REGNO (classp->exp)]] = this_insn;\n     }\n \n-  else if (GET_CODE (x) == REG && classp && ! qty_const[reg_qty[REGNO (x)]])\n+  else if (GET_CODE (x) == REG && classp && ! qty_const[reg_qty[REGNO (x)]]\n+\t   && ! elt->is_const)\n     {\n       register struct table_elt *p;\n \n       for (p = classp; p != 0; p = p->next_same_value)\n \t{\n-\t  if (p->is_const)\n+\t  if (p->is_const && GET_CODE (p->exp) != REG)\n \t    {\n \t      qty_const[reg_qty[REGNO (x)]]\n \t\t= gen_lowpart_if_possible (GET_MODE (x), p->exp);"}]}