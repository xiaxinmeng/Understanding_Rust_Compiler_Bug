{"sha": "2bc6986d01c982026bb990a0b021b08f132fff74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJjNjk4NmQwMWM5ODIwMjZiYjk5MGEwYjAyMWIwOGYxMzJmZmY3NA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-02T19:14:43Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-02T19:14:43Z"}, "message": "Fix REG_ARGS_SIZE handling when pushing TLS addresses\n\nThe new assert in add_args_size_note triggered for gcc.dg/tls/opt-3.c\nand others on m68k.  This looks like a pre-existing bug: if we pushed\na value that needs a call to something like __tls_get_addr, we ended\nup with two different REG_ARGS_SIZE notes on the same instruction.\n\nIt seems to be OK for emit_single_push_insn to push something that\nneeds a call to __tls_get_addr:\n\n      /* We have to allow non-call_pop patterns for the case\n\t of emit_single_push_insn of a TLS address.  */\n      if (GET_CODE (pat) != PARALLEL)\n\treturn 0;\n\nso I think the bug is in the way this is handled rather than the fact\nthat it occurs at all.\n\nIf we're pushing a value X that needs a call C to calculate, we'll\nadd REG_ARGS_SIZE notes to the pushes and pops for C as part of the\ncall sequence.  Then emit_single_push_insn calls fixup_args_size_notes\non the whole push sequence (the calculation of X, including C,\nand the push of X itself).  This is where the double notes came from.\nBut emit_single_push_insn_1 adjusted stack_pointer_delta *before* the\npush, so the notes added for C were relative to the situation after\nthe future push of X rather than before it.\n\nPresumably this didn't matter in practice because the note added\nsecond tended to trump the note added first.  But code is allowed to\nwalk REG_NOTES without having to disregard secondary notes.\n\n2018-01-02  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* expr.c (fixup_args_size_notes): Check that any existing\n\tREG_ARGS_SIZE notes are correct, and don't try to re-add them.\n\t(emit_single_push_insn_1): Move stack_pointer_delta adjustment to...\n\t(emit_single_push_insn): ...here.\n\nFrom-SVN: r256105", "tree": {"sha": "9b53d3cd8885f377cf6981cd74d08f43baa4c258", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b53d3cd8885f377cf6981cd74d08f43baa4c258"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bc6986d01c982026bb990a0b021b08f132fff74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bc6986d01c982026bb990a0b021b08f132fff74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bc6986d01c982026bb990a0b021b08f132fff74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bc6986d01c982026bb990a0b021b08f132fff74/comments", "author": null, "committer": null, "parents": [{"sha": "cd5ff7bc323a8fa6eafc4513bc814e4e7fa24120", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd5ff7bc323a8fa6eafc4513bc814e4e7fa24120", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd5ff7bc323a8fa6eafc4513bc814e4e7fa24120"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "8784450d1a65bd557614055ea1fcaf975f2459a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bc6986d01c982026bb990a0b021b08f132fff74/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bc6986d01c982026bb990a0b021b08f132fff74/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2bc6986d01c982026bb990a0b021b08f132fff74", "patch": "@@ -1,3 +1,10 @@\n+2018-01-02  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* expr.c (fixup_args_size_notes): Check that any existing\n+\tREG_ARGS_SIZE notes are correct, and don't try to re-add them.\n+\t(emit_single_push_insn_1): Move stack_pointer_delta adjustment to...\n+\t(emit_single_push_insn): ...here.\n+\n 2018-01-02  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* rtl.h (CONST_VECTOR_ELT): Redefine to const_vector_elt."}, {"sha": "275199982e3a38bbb6e98059eece6c158bbaee74", "filename": "gcc/expr.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bc6986d01c982026bb990a0b021b08f132fff74/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bc6986d01c982026bb990a0b021b08f132fff74/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=2bc6986d01c982026bb990a0b021b08f132fff74", "patch": "@@ -4090,6 +4090,14 @@ fixup_args_size_notes (rtx_insn *prev, rtx_insn *last,\n       if (!NONDEBUG_INSN_P (insn))\n \tcontinue;\n \n+      /* We might have existing REG_ARGS_SIZE notes, e.g. when pushing\n+\t a call argument containing a TLS address that itself requires\n+\t a call to __tls_get_addr.  The handling of stack_pointer_delta\n+\t in emit_single_push_insn is supposed to ensure that any such\n+\t notes are already correct.  */\n+      rtx note = find_reg_note (insn, REG_ARGS_SIZE, NULL_RTX);\n+      gcc_assert (!note || known_eq (args_size, get_args_size (note)));\n+\n       poly_int64 this_delta = find_args_size_adjust (insn);\n       if (known_eq (this_delta, 0))\n \t{\n@@ -4103,7 +4111,8 @@ fixup_args_size_notes (rtx_insn *prev, rtx_insn *last,\n       if (known_eq (this_delta, HOST_WIDE_INT_MIN))\n \tsaw_unknown = true;\n \n-      add_args_size_note (insn, args_size);\n+      if (!note)\n+\tadd_args_size_note (insn, args_size);\n       if (STACK_GROWS_DOWNWARD)\n \tthis_delta = -poly_uint64 (this_delta);\n \n@@ -4127,7 +4136,6 @@ emit_single_push_insn_1 (machine_mode mode, rtx x, tree type)\n   rtx dest;\n   enum insn_code icode;\n \n-  stack_pointer_delta += PUSH_ROUNDING (GET_MODE_SIZE (mode));\n   /* If there is push pattern, use it.  Otherwise try old way of throwing\n      MEM representing push operation to move expander.  */\n   icode = optab_handler (push_optab, mode);\n@@ -4214,6 +4222,14 @@ emit_single_push_insn (machine_mode mode, rtx x, tree type)\n \n   emit_single_push_insn_1 (mode, x, type);\n \n+  /* Adjust stack_pointer_delta to describe the situation after the push\n+     we just performed.  Note that we must do this after the push rather\n+     than before the push in case calculating X needs pushes and pops of\n+     its own (e.g. if calling __tls_get_addr).  The REG_ARGS_SIZE notes\n+     for such pushes and pops must not include the effect of the future\n+     push of X.  */\n+  stack_pointer_delta += PUSH_ROUNDING (GET_MODE_SIZE (mode));\n+\n   last = get_last_insn ();\n \n   /* Notice the common case where we emitted exactly one insn.  */"}]}