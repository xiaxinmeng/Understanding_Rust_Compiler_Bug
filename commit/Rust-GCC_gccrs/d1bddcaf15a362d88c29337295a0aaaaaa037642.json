{"sha": "d1bddcaf15a362d88c29337295a0aaaaaa037642", "node_id": "C_kwDOANBUbNoAKGQxYmRkY2FmMTVhMzYyZDg4YzI5MzM3Mjk1YTBhYWFhYWEwMzc2NDI", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2023-03-13T21:04:24Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2023-03-13T21:12:21Z"}, "message": "d: Delay removing DECL_EXTERNAL from thunks until funcion has finished\n\nSecond part to fixing PR109108, don't blindly generate the associated\nfunction definition of all referenced thunks in the compilation. Just\ndelay finishing a thunk until the function gets codegen itself.  If the\nfunction never gets a definition, then the thunk is left as \"extern\".\n\ngcc/d/ChangeLog:\n\n\t* decl.cc (finish_thunk): Unset DECL_EXTERNAL on thunk.\n\t(make_thunk): Set DECL_EXTERNAL on thunk, don't call build_decl_tree.\n\t(finish_function): Call finish_thunk on forward referenced thunks.", "tree": {"sha": "2812d1af8298348da4245b54faadc5e4fd6a5096", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2812d1af8298348da4245b54faadc5e4fd6a5096"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1bddcaf15a362d88c29337295a0aaaaaa037642", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1bddcaf15a362d88c29337295a0aaaaaa037642", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1bddcaf15a362d88c29337295a0aaaaaa037642", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1bddcaf15a362d88c29337295a0aaaaaa037642/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "499b07700f0e679a490c2e3b80ca7c382dd737ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/499b07700f0e679a490c2e3b80ca7c382dd737ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/499b07700f0e679a490c2e3b80ca7c382dd737ab"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "c451805639dd2c641c063ef16cc4f01628471d83", "filename": "gcc/d/decl.cc", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1bddcaf15a362d88c29337295a0aaaaaa037642/gcc%2Fd%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1bddcaf15a362d88c29337295a0aaaaaa037642/gcc%2Fd%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdecl.cc?ref=d1bddcaf15a362d88c29337295a0aaaaaa037642", "patch": "@@ -1858,6 +1858,7 @@ finish_thunk (tree thunk, tree function)\n \n   TREE_ADDRESSABLE (function) = 1;\n   TREE_USED (function) = 1;\n+  DECL_EXTERNAL (thunk) = 0;\n \n   if (flag_syntax_only)\n     {\n@@ -1929,21 +1930,14 @@ make_thunk (FuncDeclaration *decl, int offset)\n \n   if (!DECL_ARGUMENTS (function) || !DECL_RESULT (function))\n     {\n-      /* Compile the function body before generating the thunk, this is done\n-\t even if the decl is external to the current module.  */\n-      if (decl->fbody)\n-\tbuild_decl_tree (decl);\n-      else\n-\t{\n-\t  /* Build parameters for functions that are not being compiled,\n-\t     so that they can be correctly cloned in finish_thunk.  */\n-\t  tree function = get_symbol_decl (decl);\n-\t  DECL_ARGUMENTS (function) = get_fndecl_arguments (decl);\n-\n-\t  /* Also build the result decl, which is needed when force creating\n-\t     the thunk in gimple inside cgraph_node::expand_thunk.  */\n-\t  DECL_RESULT (function) = get_fndecl_result (decl);\n-\t}\n+      /* Build parameters for functions that are not being compiled,\n+\t so that they can be correctly cloned in finish_thunk.  */\n+      tree function = get_symbol_decl (decl);\n+      DECL_ARGUMENTS (function) = get_fndecl_arguments (decl);\n+\n+      /* Also build the result decl, which is needed when force creating\n+\t the thunk in gimple inside cgraph_node::expand_thunk.  */\n+      DECL_RESULT (function) = get_fndecl_result (decl);\n     }\n \n   /* Don't build the thunk if the compilation step failed.  */\n@@ -1969,11 +1963,10 @@ make_thunk (FuncDeclaration *decl, int offset)\n \n   DECL_CONTEXT (thunk) = d_decl_context (decl);\n \n-  /* Thunks inherit the public access of the function they are targeting.\n-     Thunks are connected to the definitions of the functions, so thunks are\n-     not produced for external functions.  */\n+  /* Thunks inherit the public access of the function they are targeting.  */\n   TREE_PUBLIC (thunk) = TREE_PUBLIC (function);\n-  DECL_EXTERNAL (thunk) = DECL_EXTERNAL (function);\n+  /* The thunk has not been defined -- yet.  */\n+  DECL_EXTERNAL (thunk) = 1;\n \n   /* Thunks are always addressable.  */\n   TREE_ADDRESSABLE (thunk) = 1;\n@@ -2013,6 +2006,8 @@ make_thunk (FuncDeclaration *decl, int offset)\n   if (decl->resolvedLinkage () != LINK::cpp)\n     free (CONST_CAST (char *, ident));\n \n+  /* Thunks are connected to the definitions of the functions, so thunks are\n+     not produced for external functions.  */\n   if (!DECL_EXTERNAL (function))\n     finish_thunk (thunk, function);\n \n@@ -2122,6 +2117,10 @@ finish_function (tree old_context)\n \n   DECL_SAVED_TREE (fndecl) = bind;\n \n+  /* Finish any forward referenced thunks for the function.  */\n+  for (tree t = DECL_LANG_THUNKS (fndecl); t; t = DECL_CHAIN (t))\n+    finish_thunk (t, fndecl);\n+\n   if (!errorcount && !global.errors)\n     {\n       /* Dump the D-specific tree IR.  */"}]}