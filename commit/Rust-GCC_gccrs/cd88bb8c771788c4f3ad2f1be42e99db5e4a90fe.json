{"sha": "cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q4OGJiOGM3NzE3ODhjNGYzYWQyZjFiZTQyZTk5ZGI1ZTRhOTBmZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-07-20T18:17:30Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-07-20T18:17:30Z"}, "message": "system_error: Use noexcept.\n\n2011-07-20  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/system_error: Use noexcept.\n\t* src/system_error.cc: Likewise.\n\t* testsuite/19_diagnostics/error_condition/modifiers/39881.cc: Adjust.\n\t* testsuite/19_diagnostics/error_condition/cons/39881.cc: Likewise.\n\t* testsuite/19_diagnostics/error_code/modifiers/39882.cc: Likewise.\n\t* testsuite/19_diagnostics/error_code/cons/39882.cc: Likewise.\n\t* testsuite/util/testsuite_error.h: Likewise.\n\n\t* include/std/system_error (error_code::error_code(_ErrorCodeEnum)):\n\tUse enable_if on template parameter default.\n\t(error_condition::error_condition(_ErrorConditionEnum)): Likewise.\n\nFrom-SVN: r176529", "tree": {"sha": "65be25078ab37ec701d000ff4a8f1f66c3db81ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65be25078ab37ec701d000ff4a8f1f66c3db81ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe/comments", "author": null, "committer": null, "parents": [{"sha": "d05f35643be286f2cb4c10284d053ec13f48de04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d05f35643be286f2cb4c10284d053ec13f48de04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d05f35643be286f2cb4c10284d053ec13f48de04"}], "stats": {"total": 167, "additions": 92, "deletions": 75}, "files": [{"sha": "62d15117c4f7fe531fa94e6e77b377f59abc128d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe", "patch": "@@ -1,3 +1,17 @@\n+2011-07-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/system_error: Use noexcept.\n+\t* src/system_error.cc: Likewise.\n+\t* testsuite/19_diagnostics/error_condition/modifiers/39881.cc: Adjust.\n+\t* testsuite/19_diagnostics/error_condition/cons/39881.cc: Likewise.\n+\t* testsuite/19_diagnostics/error_code/modifiers/39882.cc: Likewise.\n+\t* testsuite/19_diagnostics/error_code/cons/39882.cc: Likewise.\n+\t* testsuite/util/testsuite_error.h: Likewise.\n+\n+\t* include/std/system_error (error_code::error_code(_ErrorCodeEnum)):\n+\tUse enable_if on template parameter default.\n+\t(error_condition::error_condition(_ErrorConditionEnum)): Likewise.\n+\n 2011-07-20  Ed Smith-Rowland  <3dw4rd@verizon.net>\n \n \t* include/precompiled/stdc++.h: Add scoped_allocator."}, {"sha": "565261e709bdf23ff1997489fcdd96c814a28c56", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 53, "deletions": 51, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe", "patch": "@@ -66,47 +66,47 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   class error_category\n   {\n   protected:\n-    error_category();\n+    error_category() noexcept;\n \n   public:\n-    virtual ~error_category();\n+    virtual ~error_category() noexcept;\n \n     error_category(const error_category&) = delete;\n     error_category& operator=(const error_category&) = delete;\n \n     virtual const char* \n-    name() const = 0;\n+    name() const noexcept = 0;\n \n     virtual string \n     message(int) const = 0;\n \n     virtual error_condition\n-    default_error_condition(int __i) const;\n+    default_error_condition(int __i) const noexcept;\n \n     virtual bool \n-    equivalent(int __i, const error_condition& __cond) const;\n+    equivalent(int __i, const error_condition& __cond) const noexcept;\n \n     virtual bool \n-    equivalent(const error_code& __code, int __i) const;\n+    equivalent(const error_code& __code, int __i) const noexcept;\n \n     bool \n-    operator<(const error_category& __other) const\n+    operator<(const error_category& __other) const noexcept\n     { return less<const error_category*>()(this, &__other); }\n \n     bool \n-    operator==(const error_category& __other) const\n+    operator==(const error_category& __other) const noexcept\n     { return this == &__other; }\n \n     bool \n-    operator!=(const error_category& __other) const\n+    operator!=(const error_category& __other) const noexcept\n     { return this != &__other; }\n   };\n \n   // DR 890.\n-  _GLIBCXX_CONST const error_category& system_category() throw();\n-  _GLIBCXX_CONST const error_category& generic_category() throw();\n+  _GLIBCXX_CONST const error_category& system_category() noexcept;\n+  _GLIBCXX_CONST const error_category& generic_category() noexcept;\n \n-  error_code make_error_code(errc);\n+  error_code make_error_code(errc) noexcept;\n \n   template<typename _Tp>\n     struct hash;\n@@ -115,49 +115,49 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Implementation-specific error identification\n   struct error_code\n   {\n-    error_code()\n+    error_code() noexcept\n     : _M_value(0), _M_cat(&system_category()) { }\n \n-    error_code(int __v, const error_category& __cat)\n+    error_code(int __v, const error_category& __cat) noexcept\n     : _M_value(__v), _M_cat(&__cat) { }\n \n-    template<typename _ErrorCodeEnum>\n-      error_code(_ErrorCodeEnum __e,\n-      typename enable_if<is_error_code_enum<_ErrorCodeEnum>::value>::type* = 0)\n+    template<typename _ErrorCodeEnum, typename = typename\n+\t     enable_if<is_error_code_enum<_ErrorCodeEnum>::value>::type>\n+      error_code(_ErrorCodeEnum __e) noexcept\n       { *this = make_error_code(__e); }\n \n     void \n-    assign(int __v, const error_category& __cat)\n+    assign(int __v, const error_category& __cat) noexcept\n     {\n       _M_value = __v;\n       _M_cat = &__cat; \n     }\n \n     void \n-    clear()\n+    clear() noexcept\n     { assign(0, system_category()); }\n \n     // DR 804.\n     template<typename _ErrorCodeEnum>\n       typename enable_if<is_error_code_enum<_ErrorCodeEnum>::value,\n \t\t\t error_code&>::type\n-      operator=(_ErrorCodeEnum __e)\n+      operator=(_ErrorCodeEnum __e) noexcept\n       { return *this = make_error_code(__e); }\n \n     int\n-    value() const { return _M_value; }\n+    value() const noexcept { return _M_value; }\n       \n     const error_category&  \n-    category() const { return *_M_cat; }\n+    category() const noexcept { return *_M_cat; }\n \n     error_condition \n-    default_error_condition() const;\n+    default_error_condition() const noexcept;\n \n     string \n     message() const\n     { return category().message(value()); }\n \n-    explicit operator bool() const\n+    explicit operator bool() const noexcept\n     { return _M_value != 0 ? true : false; }\n \n     // DR 804.\n@@ -170,11 +170,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // 19.4.2.6 non-member functions\n   inline error_code\n-  make_error_code(errc __e)\n+  make_error_code(errc __e) noexcept\n   { return error_code(static_cast<int>(__e), generic_category()); }\n \n   inline bool\n-  operator<(const error_code& __lhs, const error_code& __rhs)\n+  operator<(const error_code& __lhs, const error_code& __rhs) noexcept\n   { \n     return (__lhs.category() < __rhs.category()\n \t    || (__lhs.category() == __rhs.category()\n@@ -186,26 +186,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)\n     { return (__os << __e.category().name() << ':' << __e.value()); }\n \n-  error_condition make_error_condition(errc);\n+  error_condition make_error_condition(errc) noexcept;\n \n   /// error_condition\n   // Portable error identification\n   struct error_condition \n   {\n-    error_condition()\n+    error_condition() noexcept\n     : _M_value(0), _M_cat(&generic_category()) { }\n \n-    error_condition(int __v, const error_category& __cat)     \n+    error_condition(int __v, const error_category& __cat) noexcept\n     : _M_value(__v), _M_cat(&__cat) { }\n \n-    template<typename _ErrorConditionEnum>\n-      error_condition(_ErrorConditionEnum __e,\n-\t\t      typename enable_if<is_error_condition_enum\n-\t\t                      <_ErrorConditionEnum>::value>::type* = 0)\n+    template<typename _ErrorConditionEnum, typename = typename\n+\t enable_if<is_error_condition_enum<_ErrorConditionEnum>::value>::type>\n+      error_condition(_ErrorConditionEnum __e) noexcept\n       { *this = make_error_condition(__e); }\n \n     void\n-    assign(int __v, const error_category& __cat)\n+    assign(int __v, const error_category& __cat) noexcept\n     {\n       _M_value = __v;\n       _M_cat = &__cat;\n@@ -215,25 +214,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _ErrorConditionEnum>\n       typename enable_if<is_error_condition_enum\n \t\t\t <_ErrorConditionEnum>::value, error_condition&>::type\n-      operator=(_ErrorConditionEnum __e)\n+      operator=(_ErrorConditionEnum __e) noexcept\n       { return *this = make_error_condition(__e); }\n \n     void \n-    clear()\n+    clear() noexcept\n     { assign(0, generic_category()); }\n \n     // 19.4.3.4 observers\n-    int \n-    value() const { return _M_value; }\n+    int\n+    value() const noexcept { return _M_value; }\n \n     const error_category&\n-    category() const { return *_M_cat; }\n+    category() const noexcept { return *_M_cat; }\n \n     string \n     message() const\n     { return category().message(value()); }\n \n-    explicit operator bool() const\n+    explicit operator bool() const noexcept\n     { return _M_value != 0 ? true : false; }\n \n     // DR 804.\n@@ -244,11 +243,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // 19.4.3.6 non-member functions\n   inline error_condition\n-  make_error_condition(errc __e)\n+  make_error_condition(errc __e) noexcept\n   { return error_condition(static_cast<int>(__e), generic_category()); }\n \n   inline bool \n-  operator<(const error_condition& __lhs, const error_condition& __rhs)\n+  operator<(const error_condition& __lhs,\n+\t    const error_condition& __rhs) noexcept\n   {\n     return (__lhs.category() < __rhs.category()\n \t    || (__lhs.category() == __rhs.category()\n@@ -257,45 +257,47 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // 19.4.4 Comparison operators\n   inline bool\n-  operator==(const error_code& __lhs, const error_code& __rhs)\n+  operator==(const error_code& __lhs, const error_code& __rhs) noexcept\n   { return (__lhs.category() == __rhs.category()\n \t    && __lhs.value() == __rhs.value()); }\n \n   inline bool\n-  operator==(const error_code& __lhs, const error_condition& __rhs)\n+  operator==(const error_code& __lhs, const error_condition& __rhs) noexcept\n   {\n     return (__lhs.category().equivalent(__lhs.value(), __rhs)\n \t    || __rhs.category().equivalent(__lhs, __rhs.value()));\n   }\n \n   inline bool\n-  operator==(const error_condition& __lhs, const error_code& __rhs)\n+  operator==(const error_condition& __lhs, const error_code& __rhs) noexcept\n   {\n     return (__rhs.category().equivalent(__rhs.value(), __lhs)\n \t    || __lhs.category().equivalent(__rhs, __lhs.value()));\n   }\n \n   inline bool\n-  operator==(const error_condition& __lhs, const error_condition& __rhs)\n+  operator==(const error_condition& __lhs,\n+\t     const error_condition& __rhs) noexcept\n   {\n     return (__lhs.category() == __rhs.category()\n \t    && __lhs.value() == __rhs.value());\n   }\n \n   inline bool\n-  operator!=(const error_code& __lhs, const error_code& __rhs)\n+  operator!=(const error_code& __lhs, const error_code& __rhs) noexcept\n   { return !(__lhs == __rhs); }\n \n   inline bool\n-  operator!=(const error_code& __lhs, const error_condition& __rhs)\n+  operator!=(const error_code& __lhs, const error_condition& __rhs) noexcept\n   { return !(__lhs == __rhs); }\n \n   inline bool\n-  operator!=(const error_condition& __lhs, const error_code& __rhs)\n+  operator!=(const error_condition& __lhs, const error_code& __rhs) noexcept\n   { return !(__lhs == __rhs); }\n \n   inline bool\n-  operator!=(const error_condition& __lhs, const error_condition& __rhs)\n+  operator!=(const error_condition& __lhs,\n+\t     const error_condition& __rhs) noexcept\n   { return !(__lhs == __rhs); }\n \n \n@@ -338,7 +340,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     virtual ~system_error() throw();\n \n     const error_code& \n-    code() const throw() { return _M_code; }\n+    code() const noexcept { return _M_code; }\n   };\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "818619942e44a560792f64ce479f575a4a6f0bae", "filename": "libstdc++-v3/src/system_error.cc", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe/libstdc%2B%2B-v3%2Fsrc%2Fsystem_error.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe/libstdc%2B%2B-v3%2Fsrc%2Fsystem_error.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fsystem_error.cc?ref=cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe", "patch": "@@ -37,7 +37,7 @@ namespace\n     generic_error_category() {}\n \n     virtual const char*\n-    name() const \n+    name() const noexcept\n     { return \"generic\"; }\n \n     virtual string \n@@ -54,7 +54,7 @@ namespace\n     system_error_category() {}\n \n     virtual const char*\n-    name() const\n+    name() const noexcept\n     { return \"system\"; }\n \n     virtual string\n@@ -74,32 +74,33 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  error_category::error_category() = default;\n+  error_category::error_category() noexcept = default;\n \n-  error_category::~error_category() = default;\n+  error_category::~error_category() noexcept = default;\n \n   const error_category& \n-  system_category() throw() { return system_category_instance; }\n+  system_category() noexcept { return system_category_instance; }\n \n   const error_category& \n-  generic_category() throw() { return generic_category_instance; }\n+  generic_category() noexcept { return generic_category_instance; }\n   \n-  system_error::~system_error() throw() = default;\n+  system_error::~system_error() noexcept = default;\n \n   error_condition \n-  error_category::default_error_condition(int __i) const\n+  error_category::default_error_condition(int __i) const noexcept\n   { return error_condition(__i, *this); }\n \n   bool \n-  error_category::equivalent(int __i, const error_condition& __cond) const\n+  error_category::equivalent(int __i,\n+\t\t\t     const error_condition& __cond) const noexcept\n   { return default_error_condition(__i) == __cond; }\n \n   bool \n-  error_category::equivalent(const error_code& __code, int __i) const\n+  error_category::equivalent(const error_code& __code, int __i) const noexcept\n   { return *this == __code.category() && __code.value() == __i; }\n \n   error_condition \n-  error_code::default_error_condition() const\n+  error_code::default_error_condition() const noexcept\n   { return category().default_error_condition(value()); }\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "3edb766defe95553808b3b50655683644771f3e0", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/cons/39882.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2F39882.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2F39882.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2F39882.cc?ref=cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -26,7 +26,7 @@ class my_error_category_impl\n : public std::error_category\n {\n public:\n-  const char* name() const { return \"\"; }\n+  const char* name() const noexcept { return \"\"; }\n   std::string message(int) const { return \"\"; }\n } my_error_category_instance;\n "}, {"sha": "9755ba1964d866f87c5602d23be6cf32984f78be", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/modifiers/39882.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fmodifiers%2F39882.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fmodifiers%2F39882.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fmodifiers%2F39882.cc?ref=cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -26,7 +26,7 @@ class my_error_category_impl\n : public std::error_category\n {\n public:\n-  const char* name() const { return \"\"; }\n+  const char* name() const noexcept { return \"\"; }\n   std::string message(int) const { return \"\"; }\n } my_error_category_instance;\n "}, {"sha": "f41f7469c2220832186e10ece5e96c9c6a95a6dd", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_condition/cons/39881.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fcons%2F39881.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fcons%2F39881.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fcons%2F39881.cc?ref=cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -26,7 +26,7 @@ class my_error_category_impl\n : public std::error_category\n {\n public:\n-  const char* name() const { return \"\"; }\n+  const char* name() const noexcept { return \"\"; }\n   std::string message(int) const { return \"\"; }\n } my_error_category_instance;\n "}, {"sha": "ddd488ea0c19aa0d9aa79be28d5320060099c243", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_condition/modifiers/39881.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fmodifiers%2F39881.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fmodifiers%2F39881.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fmodifiers%2F39881.cc?ref=cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -26,7 +26,7 @@ class my_error_category_impl\n : public std::error_category\n {\n public:\n-  const char* name() const { return \"\"; }\n+  const char* name() const noexcept { return \"\"; }\n   std::string message(int) const { return \"\"; }\n } my_error_category_instance;\n "}, {"sha": "bb9ddd7cdeae9feca7bf86d084999bb3578eee9a", "filename": "libstdc++-v3/testsuite/util/testsuite_error.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_error.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_error.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_error.h?ref=cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*-\n // Error handling utils for the C++ library testsuite. \n //\n-// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,8 +32,8 @@ namespace __gnu_test\n     test_category() {}\n \n     virtual const char*\n-    name() const \n-    { \n+    name() const noexcept\n+    {\n       const char* s = \"__gnu_test::test_category\";\n       return s;\n     }\n@@ -48,8 +48,8 @@ namespace __gnu_test\n     test_derived_category() {}\n \n     virtual const char*\n-    name() const \n-    { \n+    name() const noexcept\n+    {\n       const char* s = \"__gnu_test::test_derived_category\";\n       return s;\n     }"}]}