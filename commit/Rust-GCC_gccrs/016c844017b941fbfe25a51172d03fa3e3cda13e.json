{"sha": "016c844017b941fbfe25a51172d03fa3e3cda13e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE2Yzg0NDAxN2I5NDFmYmZlMjVhNTExNzJkMDNmYTNlM2NkYTEzZQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2000-09-25T13:22:47Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2000-09-25T13:22:47Z"}, "message": "Change callers in config/m*/ to match:\n\nChanges add TABs on either or both sides, covering start of line,\nup to any operand for all .*ASM.*_OP definitions.\n\nFrom-SVN: r36620", "tree": {"sha": "ff34803fc67299c99a03991990dc09043bcac978", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff34803fc67299c99a03991990dc09043bcac978"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/016c844017b941fbfe25a51172d03fa3e3cda13e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/016c844017b941fbfe25a51172d03fa3e3cda13e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/016c844017b941fbfe25a51172d03fa3e3cda13e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/016c844017b941fbfe25a51172d03fa3e3cda13e/comments", "author": null, "committer": null, "parents": [{"sha": "f0ca81d2b05375dec1b891d7d7c6e84d916ddac4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0ca81d2b05375dec1b891d7d7c6e84d916ddac4"}], "stats": {"total": 212, "additions": 106, "deletions": 106}, "files": [{"sha": "4f301a0f289ae4c43f1b626a8d716498e8e607ad", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=016c844017b941fbfe25a51172d03fa3e3cda13e", "patch": "@@ -1816,7 +1816,7 @@ do {\t\t\t\t\t\t\t\\\n \n /* This is how to output an assembler line for a numeric constant byte.  */\n #define ASM_OUTPUT_BYTE(FILE, VALUE)\t\t\t\t\\\n-  fprintf (FILE, \"\\t%s\\t0x%x\\n\", ASM_BYTE_OP, (VALUE))\n+  fprintf (FILE, \"%s0x%x\\n\", ASM_BYTE_OP, (VALUE))\n \n /* The assembler's parentheses characters.  */\n #define ASM_OPEN_PAREN \"(\"\n@@ -2026,9 +2026,9 @@ extern char m32r_punct_chars[];\n     {\t\t\t\t\t\t\t\t\t\\\n       if (! TARGET_SDATA_NONE\t\t\t\t\t\t\\\n \t  && (SIZE) > 0 && (SIZE) <= g_switch_value)\t\t\t\\\n-\tfprintf ((FILE), \"\\t%s\\t\", SCOMMON_ASM_OP);\t\t\t\\\n+\tfprintf ((FILE), \"%s\", SCOMMON_ASM_OP);\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n-\tfprintf ((FILE), \"\\t%s\\t\", COMMON_ASM_OP);\t\t\t\\\n+\tfprintf ((FILE), \"%s\", COMMON_ASM_OP);\t\t\t\t\\\n       assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n       fprintf ((FILE), \",%u,%u\\n\", (SIZE), (ALIGN) / BITS_PER_UNIT);\t\\\n     }\t\t\t\t\t\t\t\t\t\\"}, {"sha": "c7f9e3432e46472b3902e9aed43a6ac0aeea5b7d", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=016c844017b941fbfe25a51172d03fa3e3cda13e", "patch": "@@ -1659,12 +1659,12 @@ do { long l;\t\t\t\t\t\t\\\n \n /* This is how to output an assembler line for a numeric constant byte.  */\n #define ASM_OUTPUT_CHAR(FILE,VALUE)\t\t\t\\\n-( fprintf (FILE, \"\\t%s\\t\", ASM_BYTE_OP),\t\t\\\n+( fprintf (FILE, \"%s\", ASM_BYTE_OP),\t\t\t\\\n   output_addr_const (FILE, (VALUE)),\t\t\t\\\n   putc ('\\n', FILE))\n \n #define ASM_OUTPUT_BYTE(FILE,VALUE)\t\t\t\\\n-  fprintf ((FILE), \"%s 0x%x\\n\", ASM_BYTE_OP, (VALUE))\n+  fprintf ((FILE), \"%s0x%x\\n\", ASM_BYTE_OP, (VALUE))\n \n \n /* Define the parentheses used to group arithmetic operations in assembler\n@@ -1684,7 +1684,7 @@ do { long l;\t\t\t\t\t\t\\\n    defined for reference from other files.  */\n \n #define ASM_GLOBALIZE_LABEL(FILE,NAME)\t\\\n-  do { fprintf (FILE, \"%s \", GLOBAL_ASM_OP);\t\t\\\n+  do { fprintf (FILE, \"%s\", GLOBAL_ASM_OP);\t\t\\\n        assemble_name (FILE, NAME);\t\t\t\\\n        fputs (\"\\n\", FILE);} while (0)\n \n@@ -1773,7 +1773,7 @@ do { long l;\t\t\t\t\t\t\\\n #define ASM_OUTPUT_ALIGN(FILE,LOG)\t\t\t\\\n   do {                                                  \\\n       if ((LOG) > 1)                                    \\\n-          asm_fprintf ((FILE), \"\\t%s\\n\", ALIGN_ASM_OP); \\\n+          asm_fprintf ((FILE), \"%s\\n\", ALIGN_ASM_OP); \\\n   } while (0)\n \n \f"}, {"sha": "7ba595eefb26e3532961384a07e8ccbd3fe239d3", "filename": "gcc/config/m68k/3b1.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm68k%2F3b1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm68k%2F3b1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2F3b1.h?ref=016c844017b941fbfe25a51172d03fa3e3cda13e", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.\n    AT&T UNIX PC version (pc7300, 3b1)\n-   Copyright (C) 1987, 1993, 1996, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1993, 1996, 1999, 2000 Free Software Foundation, Inc.\n    Contributed by Alex Crain (alex@umbc3.umd.edu).\n \n This file is part of GNU CC.\n@@ -199,7 +199,7 @@ do { long l;\t\t\t\t\t\\\n     if (++sp < (LEN)) \\\n       {\tif (lp > 60) \\\n \t  { lp = 0; \\\n-\t    fprintf ((FILE), \"\\n\\t%s \", ASCII_DATA_ASM_OP); }\t\\\n+\t    fprintf ((FILE), \"\\n%s\", ASCII_DATA_ASM_OP); }\t\\\n \telse \\\n \t  putc (',', (FILE)); \\\n \tgoto loop; } \\"}, {"sha": "7707be12dcb535a37b7f0f256237835c1a266f04", "filename": "gcc/config/m68k/amix.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm68k%2Famix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm68k%2Famix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Famix.h?ref=016c844017b941fbfe25a51172d03fa3e3cda13e", "patch": "@@ -1,7 +1,7 @@\n /* Definitions of target machine for GNU compiler.\n    Commodore Amiga A3000UX version.\n \n-   Copyright (C) 1991, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1993, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -55,7 +55,7 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_CASE_END(FILE,NUM,TABLE)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   if (switch_table_difference_label_flag)\t\t\t\t\\\n-    asm_fprintf ((FILE), \"\\t%s %LLD%d,%LL%d\\n\", SET_ASM_OP, (NUM), (NUM));\\\n+    asm_fprintf ((FILE), \"%s%LLD%d,%LL%d\\n\", SET_ASM_OP, (NUM), (NUM));\\\n   switch_table_difference_label_flag = 0;\t\t\t\t\\\n } while (0)\n \n@@ -88,7 +88,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef ASM_OUTPUT_ALIGNED_LOCAL\n #define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  fprintf ((FILE), \"\\t%s\\t%s,%u,%u\\n\",\t\t\t\t\t\\\n+  fprintf ((FILE), \"%s%s,%u,%u\\n\",\t\t\t\t\t\\\n \t   BSS_ASM_OP, (NAME), (SIZE), MAX ((ALIGN) / BITS_PER_UNIT, 4)); \\\n } while (0)\n \n@@ -101,7 +101,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\\\n   register int sp = 0, lp = 0, ch;\t\t\t\t\\\n-  fprintf ((FILE), \"\\t%s \", BYTE_ASM_OP);\t\t\t\\\n+  fprintf ((FILE), \"%s\", BYTE_ASM_OP);\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n     ch = (PTR)[sp];\t\t\t\t\t\t\\\n     if (ch > ' ' && ! (ch & 0x80) && ch != '\\\\')\t\t\\\n@@ -116,7 +116,7 @@ do {\t\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\\\n \tif ((sp % 10) == 0)\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\\\n-\t    fprintf ((FILE), \"\\n\\t%s \", BYTE_ASM_OP);\t\t\\\n+\t    fprintf ((FILE), \"\\n%s\", BYTE_ASM_OP);\t\t\\\n \t  }\t\t\t\t\t\t\t\\\n \telse\t\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\\"}, {"sha": "465c082935af0afa1a2208c183705d87b8419fec", "filename": "gcc/config/m68k/atari.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm68k%2Fatari.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm68k%2Fatari.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fatari.h?ref=016c844017b941fbfe25a51172d03fa3e3cda13e", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.\n    Atari TT ASV version.\n-   Copyright (C) 1994, 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1995, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -46,7 +46,7 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_CASE_END(FILE,NUM,TABLE)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   if (switch_table_difference_label_flag)\t\t\t\t\\\n-    asm_fprintf ((FILE), \"\\t%s %LLD%d,%LL%d\\n\", SET_ASM_OP, (NUM), (NUM));\\\n+    asm_fprintf ((FILE), \"%s%LLD%d,%LL%d\\n\", SET_ASM_OP, (NUM), (NUM));\\\n   switch_table_difference_label_flag = 0;\t\t\t\t\\\n } while (0)\n \n@@ -61,7 +61,7 @@ int switch_table_difference_label_flag;\n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n   register int sp = 0, lp = 0, ch;\t\t\t\t\\\n-  fprintf ((FILE), \"\\t%s \", BYTE_ASM_OP);\t\t\t\t\\\n+  fprintf ((FILE), \"%s\", BYTE_ASM_OP);\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n     ch = (PTR)[sp];\t\t\t\t\t\t\\\n     if (ch > ' ' && ! (ch & 0x80) && ch != '\\\\')\t\t\\\n@@ -76,7 +76,7 @@ int switch_table_difference_label_flag;\n       {\t\t\t\t\t\t\t\t\\\n \tif ((sp % 10) == 0)\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\\\n-\t    fprintf ((FILE), \"\\n\\t%s \", BYTE_ASM_OP);\t\t\\\n+\t    fprintf ((FILE), \"\\n%s\", BYTE_ASM_OP);\t\t\\\n \t  }\t\t\t\t\t\t\t\\\n \telse\t\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\\"}, {"sha": "014d1ecea33be4571be9822117dcc203f62b201c", "filename": "gcc/config/m68k/auxas.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm68k%2Fauxas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm68k%2Fauxas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fauxas.h?ref=016c844017b941fbfe25a51172d03fa3e3cda13e", "patch": "@@ -78,7 +78,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef ASM_OUTPUT_INT\n #define ASM_OUTPUT_INT(FILE,VALUE)                      \\\n-( fprintf ((FILE), \"\\t%s \", LONG_ASM_OP),               \\\n+( fprintf ((FILE), \"%s\", LONG_ASM_OP),                  \\\n   output_addr_const ((FILE), (VALUE)),                  \\\n   fprintf ((FILE), \"\\n\"))\n "}, {"sha": "4565f77fbeca08011ab1710175dcadb60f8b2a23", "filename": "gcc/config/m68k/coff.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm68k%2Fcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm68k%2Fcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fcoff.h?ref=016c844017b941fbfe25a51172d03fa3e3cda13e", "patch": "@@ -155,7 +155,7 @@ dtors_section ()\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     ctors_section ();\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n   } while (0)\n@@ -165,7 +165,7 @@ dtors_section ()\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     dtors_section ();                   \t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);              \t\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n   } while (0)"}, {"sha": "2e4535127ad15a55cc941e412752726923571b29", "filename": "gcc/config/m68k/hp320.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm68k%2Fhp320.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm68k%2Fhp320.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fhp320.h?ref=016c844017b941fbfe25a51172d03fa3e3cda13e", "patch": "@@ -558,7 +558,7 @@ do { register int i;\t\t\t\\\n \tputc('\\n', (f));\t\t\\\n \tinside = FALSE;\t\t\t\\\n       }\t\t\t\t\t\\\n-      fprintf((f), \"\\t%s \", ASCII_DATA_ASM_OP);\t\\\n+      fprintf((f), \"%s\", ASCII_DATA_ASM_OP);\t\\\n     }\t\t\t\t\t\\\n     if ((p)[i] < 32 || (p)[i] == '\\\\' || (p)[i] == '\"' || (p)[i] == 127) {\t\\\n       if (inside) {\t\t\t\\"}, {"sha": "943e83c43c9f428c9003e57da885d0d36f68ca99", "filename": "gcc/config/m68k/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm68k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm68k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux.h?ref=016c844017b941fbfe25a51172d03fa3e3cda13e", "patch": "@@ -203,7 +203,7 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_OUTPUT_ALIGN\n #define ASM_OUTPUT_ALIGN(FILE,LOG)\t\t\t\t\\\n   if ((LOG) > 0)\t\t\t\t\t\t\\\n-    fprintf ((FILE), \"\\t%s \\t%u\\n\", ALIGN_ASM_OP, 1 << (LOG));\n+    fprintf ((FILE), \"%s%u\\n\", ALIGN_ASM_OP, 1 << (LOG));\n \n /* If defined, a C expression whose value is a string containing the\n    assembler operation to identify the following data as uninitialized global"}, {"sha": "38e3480f500674aa066e2ca5a011bf6a0a333882", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=016c844017b941fbfe25a51172d03fa3e3cda13e", "patch": "@@ -1328,7 +1328,7 @@ void\t\t\t\t\t\t\t\t\\\n __transfer_from_trampoline ()\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n   register char *a0 asm (\"%a0\");\t\t\t\t\\\n-  asm (GLOBAL_ASM_OP \" ___trampoline\");\t\t\t\t\\\n+  asm (GLOBAL_ASM_OP \"___trampoline\");\t\t\t\t\\\n   asm (\"___trampoline:\");\t\t\t\t\t\\\n   asm volatile (\"move%.l %0,%@\" : : \"m\" (a0[22]));\t\t\\\n   asm volatile (\"move%.l %1,%0\" : \"=a\" (a0) : \"m\" (a0[18]));\t\\\n@@ -1894,7 +1894,7 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n \n #define GLOBAL_ASM_OP \"\\t.globl\\t\"\n #define ASM_GLOBALIZE_LABEL(FILE,NAME)\t\\\n-  do { fprintf (FILE, \"%s \", GLOBAL_ASM_OP);\t\t\\\n+  do { fprintf (FILE, \"%s\", GLOBAL_ASM_OP);\t\t\\\n        assemble_name (FILE, NAME);\t\t\t\\\n        fputs (\"\\n\", FILE);} while (0)\n "}, {"sha": "d6abc6710da4caf3a2feee454e43acb6994ce784", "filename": "gcc/config/m68k/m68kelf.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm68k%2Fm68kelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm68k%2Fm68kelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68kelf.h?ref=016c844017b941fbfe25a51172d03fa3e3cda13e", "patch": "@@ -99,7 +99,7 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_OUTPUT_ALIGN\n #define ASM_OUTPUT_ALIGN(FILE,LOG)\t\t\t\t\\\n   if ((LOG) > 0)\t\t\t\t\t\t\\\n-    fprintf ((FILE), \"\\t%s \\t%u\\n\", ALIGN_ASM_OP, 1 << (LOG));\t\\\n+    fprintf ((FILE), \"%s%u\\n\", ALIGN_ASM_OP, 1 << (LOG));\t\\\n   else if ((LOG) > 31)\t\t\t\t\t\t\\\n     abort ();\n \n@@ -163,7 +163,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t%s %u\\n\", SPACE_ASM_OP, (SIZE))\n+  fprintf (FILE, \"%s%u\\n\", SPACE_ASM_OP, (SIZE))\n \n #if 0\n /* SVR4 m68k assembler is bitching on the `comm i,1,1' which askes for \n@@ -181,7 +181,7 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\\\n   register int sp = 0, lp = 0, ch;\t\t\t\t\\\n-  fprintf ((FILE), \"\\t%s \", BYTE_ASM_OP);\t\t\t\\\n+  fprintf ((FILE), \"%s\", BYTE_ASM_OP);\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n     ch = (PTR)[sp];\t\t\t\t\t\t\\\n     if (ch > ' ' && ! (ch & 0x80) && ch != '\\\\')\t\t\\\n@@ -196,7 +196,7 @@ do {\t\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\\\n \tif ((sp % 10) == 0)\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\\\n-\t    fprintf ((FILE), \"\\n\\t%s \", BYTE_ASM_OP);\t\t\\\n+\t    fprintf ((FILE), \"\\n%s\", BYTE_ASM_OP);\t\t\\\n \t  }\t\t\t\t\t\t\t\\\n \telse\t\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\\\n@@ -214,7 +214,7 @@ do {\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_CASE_END(FILE,NUM,TABLE)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   if (switch_table_difference_label_flag)\t\t\t\t\\\n-    asm_fprintf ((FILE), \"\\t%s %LLD%d,%LL%d\\n\", SET_ASM_OP, (NUM), (NUM));\\\n+    asm_fprintf ((FILE), \"%s%LLD%d,%LL%d\\n\", SET_ASM_OP, (NUM), (NUM));\t\\\n   switch_table_difference_label_flag = 0;\t\t\t\t\\\n } while (0)\n \n@@ -241,7 +241,7 @@ extern int switch_table_difference_label_flag;\n    standard way to do switch table. */\n #undef ASM_OUTPUT_BEFORE_CASE_LABEL\n #define ASM_OUTPUT_BEFORE_CASE_LABEL(FILE,PREFIX,NUM,TABLE)\t\t\\\n-  fprintf ((FILE), \"\\t%s &%d\\n\", SWBEG_ASM_OP, XVECLEN (PATTERN (TABLE), 1));\n+  fprintf ((FILE), \"%s&%d\\n\", SWBEG_ASM_OP, XVECLEN (PATTERN (TABLE), 1));\n \n /* In m68k svr4, a symbol_ref rtx can be a valid PIC operand if it is an\n    operand of a function call. */"}, {"sha": "63a3b712ba8cb28cadba25dc4b4045fb1d9ea323", "filename": "gcc/config/m68k/m68kv4.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm68k%2Fm68kv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm68k%2Fm68kv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68kv4.h?ref=016c844017b941fbfe25a51172d03fa3e3cda13e", "patch": "@@ -141,7 +141,7 @@ while (0)\n \n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t%s %u\\n\", SPACE_ASM_OP, (SIZE))\n+  fprintf (FILE, \"%s%u\\n\", SPACE_ASM_OP, (SIZE))\n \n /* 1 if N is a possible register number for a function value.\n    For m68k/SVR4 allow d0, a0, or fp0 as return registers, for integral,\n@@ -231,7 +231,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\\\n   register int sp = 0, lp = 0, ch;\t\t\t\t\\\n-  fprintf ((FILE), \"\\t%s \", BYTE_ASM_OP);\t\t\t\\\n+  fprintf ((FILE), \"%s\", BYTE_ASM_OP);\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n     ch = (PTR)[sp];\t\t\t\t\t\t\\\n     if (ch > ' ' && ! (ch & 0x80) && ch != '\\\\')\t\t\\\n@@ -246,7 +246,7 @@ do {\t\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\\\n \tif ((sp % 10) == 0)\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\\\n-\t    fprintf ((FILE), \"\\n\\t%s \", BYTE_ASM_OP);\t\t\\\n+\t    fprintf ((FILE), \"\\n%s\", BYTE_ASM_OP);\t\t\\\n \t  }\t\t\t\t\t\t\t\\\n \telse\t\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\\\n@@ -264,7 +264,7 @@ do {\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_CASE_END(FILE,NUM,TABLE)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   if (switch_table_difference_label_flag)\t\t\t\t\\\n-    asm_fprintf ((FILE), \"\\t%s %LLD%d,%LL%d\\n\", SET_ASM_OP, (NUM), (NUM));\\\n+    asm_fprintf ((FILE), \"%s%LLD%d,%LL%d\\n\", SET_ASM_OP, (NUM), (NUM)); \\\n   switch_table_difference_label_flag = 0;\t\t\t\t\\\n } while (0)\n \n@@ -286,7 +286,7 @@ int switch_table_difference_label_flag;\n    standard way to do switch table. */\n #undef ASM_OUTPUT_BEFORE_CASE_LABEL\n #define ASM_OUTPUT_BEFORE_CASE_LABEL(FILE,PREFIX,NUM,TABLE)\t\t\\\n-  fprintf ((FILE), \"\\t%s &%d\\n\", SWBEG_ASM_OP, XVECLEN (PATTERN (TABLE), 1));\n+  fprintf ((FILE), \"%s&%d\\n\", SWBEG_ASM_OP, XVECLEN (PATTERN (TABLE), 1));\n \n /* In m68k svr4, a symbol_ref rtx can be a valid PIC operand if it is an\n    operand of a function call. */"}, {"sha": "a7dbdee93de351cb8c1dcf14d7fbce2c3081d577", "filename": "gcc/config/m68k/mot3300.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fmot3300.h?ref=016c844017b941fbfe25a51172d03fa3e3cda13e", "patch": "@@ -437,7 +437,7 @@ do { long l;\t\t\t\t\t\\\n #undef ASM_OUTPUT_ALIGN\n #define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n   if ((LOG) >= 1)\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\n\", ALIGN_ASM_OP);\n+    fprintf (FILE, \"%s\\n\", ALIGN_ASM_OP);\n \n #ifndef USE_GAS\n #define SKIP_ASM_OP\t\"\\tspace\\t\"\n@@ -447,7 +447,7 @@ do { long l;\t\t\t\t\t\\\n \n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t%s %u\\n\", SKIP_ASM_OP, (SIZE))\n+  fprintf (FILE, \"%s%u\\n\", SKIP_ASM_OP, (SIZE))\n \n /* Can't use ASM_OUTPUT_SKIP in text section.  */\n \n@@ -476,7 +476,7 @@ do { long l;\t\t\t\t\t\\\n #undef ASM_OUTPUT_ASCII\n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN) \\\n   do { register int sp = 0, lp = 0;\t\t\t\t\\\n-    fprintf ((FILE), \"\\t%s\\t\", ASM_BYTE_OP);\t\t\t\\\n+    fprintf ((FILE), \"%s\", ASM_BYTE_OP);\t\t\t\\\n   loop:\t\t\t\t\t\t\t\t\\\n     if ((PTR)[sp] > ' ' && ! ((PTR)[sp] & 0x80) && (PTR)[sp] != '\\\\')\t\\\n       { lp += 3;\t\t\t\t\t\t\\\n@@ -487,7 +487,7 @@ do { long l;\t\t\t\t\t\\\n     if (++sp < (LEN))\t\t\t\t\t\t\\\n       {\tif (lp > 60)\t\t\t\t\t\t\\\n \t  { lp = 0;\t\t\t\t\t\t\\\n-\t    fprintf ((FILE), \"\\n\\t%s \", ASCII_DATA_ASM_OP); }\t\\\n+\t    fprintf ((FILE), \"\\n%s\", ASCII_DATA_ASM_OP); }\t\\\n \telse\t\t\t\t\t\t\t\\\n \t  putc (',', (FILE));\t\t\t\t\t\\\n \tgoto loop; }\t\t\t\t\t\t\\"}, {"sha": "3e4bbb153296771e63aca4546816c841f94696f8", "filename": "gcc/config/m68k/sgs.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm68k%2Fsgs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm68k%2Fsgs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fsgs.h?ref=016c844017b941fbfe25a51172d03fa3e3cda13e", "patch": "@@ -114,15 +114,15 @@ Boston, MA 02111-1307, USA.  */\n \n #undef ASM_OUTPUT_SHORT\n #define ASM_OUTPUT_SHORT(FILE,VALUE)\t\t\t\\\n-( fprintf ((FILE), \"\\t%s \", WORD_ASM_OP),\t\t\\\n+( fprintf ((FILE), \"%s\", WORD_ASM_OP),\t\t\t\\\n   output_addr_const ((FILE), (VALUE)),\t\t\t\\\n   fprintf ((FILE), \"\\n\"))\n \n #undef ASM_OUTPUT_LONG_DOUBLE\n #define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)  \t\t\t\\\n do { long l[3];\t\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, l);\t\t\\\n-     fprintf ((FILE), \"\\t%s 0x%x,0x%x,0x%x\\n\", LONG_ASM_OP,\t\\\n+     fprintf ((FILE), \"%s0x%x,0x%x,0x%x\\n\", LONG_ASM_OP,\t\\\n \t     l[0], l[1], l[2]);\t\t\t\t\t\\\n    } while (0)\n \n@@ -132,7 +132,7 @@ do { long l[3];\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\\\n do { long l[2];\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_DOUBLE (VALUE, l);\t\t\\\n-     fprintf ((FILE), \"\\t%s 0x%x,0x%x\\n\", LONG_ASM_OP,\t\\\n+     fprintf ((FILE), \"%s0x%x,0x%x\\n\", LONG_ASM_OP,\t\\\n \t      l[0], l[1]);\t\t\t\t\\\n    } while (0)\n \n@@ -142,7 +142,7 @@ do { long l[2];\t\t\t\t\t\t\\\n #define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\\\n do { long l;\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\\\n-     fprintf ((FILE), \"\\t%s 0x%x\\n\", LONG_ASM_OP, l);\t\\\n+     fprintf ((FILE), \"%s0x%x\\n\", LONG_ASM_OP, l);\t\\\n    } while (0)\n \n /* This is how to output an assembler line that says to advance the\n@@ -151,7 +151,7 @@ do { long l;\t\t\t\t\t\t\\\n #undef ASM_OUTPUT_ALIGN\n #define ASM_OUTPUT_ALIGN(FILE,LOG)\t\t\t\t\\\n   if ((LOG) > 0)\t\t\t\t\t\t\\\n-    fprintf ((FILE), \"\\t%s \\t%u\\n\", ALIGN_ASM_OP, 1 << (LOG));\t\\\n+    fprintf ((FILE), \"%s%u\\n\", ALIGN_ASM_OP, 1 << (LOG));\t\\\n   else if ((LOG) > 31)\t\t\t\t\t\t\\\n     abort ();\n \n@@ -165,7 +165,7 @@ do { long l;\t\t\t\t\t\t\\\n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\\\n   register int sp = 0, lp = 0, ch;\t\t\t\t\\\n-  fprintf ((FILE), \"\\t%s \", BYTE_ASM_OP);\t\t\t\\\n+  fprintf ((FILE), \"%s\", BYTE_ASM_OP);\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n     ch = (PTR)[sp];\t\t\t\t\t\t\\\n     if (ch > ' ' && ! (ch & 0x80) && ch != '\\\\')\t\t\\\n@@ -180,7 +180,7 @@ do {\t\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\\\n \tif ((sp % 10) == 0)\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\\\n-\t    fprintf ((FILE), \"\\n\\t%s \", BYTE_ASM_OP);\t\t\\\n+\t    fprintf ((FILE), \"\\n%s\", BYTE_ASM_OP);\t\t\\\n \t  }\t\t\t\t\t\t\t\\\n \telse\t\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\\\n@@ -238,7 +238,7 @@ do {\t\t\t\t\t\t\t\t\\\n \n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t%s %u\\n\", SPACE_ASM_OP, (SIZE))\n+  fprintf (FILE, \"%s%u\\n\", SPACE_ASM_OP, (SIZE))\n \f\n /* Translate Motorola opcodes such as `jbeq' into SGS opcodes such\n    as `beq.w'.\n@@ -399,7 +399,7 @@ do {\t\t\t\t\t\t\t\t\\\n    example, can identify that it is the start of a switch table. */\n \n #define ASM_OUTPUT_BEFORE_CASE_LABEL(FILE,PREFIX,NUM,TABLE)\t\t\\\n-  fprintf ((FILE), \"\\t%s &%d\\n\", SWBEG_ASM_OP, XVECLEN (PATTERN (TABLE), 1));\n+  fprintf ((FILE), \"%s&%d\\n\", SWBEG_ASM_OP, XVECLEN (PATTERN (TABLE), 1));\n \n #define ASM_OUTPUT_CASE_LABEL(FILE,PREFIX,NUM,TABLE)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n@@ -418,7 +418,7 @@ do {\t\t\t\t\t\t\t\t\\\n #undef ASM_OUTPUT_CASE_END\n #define ASM_OUTPUT_CASE_END(FILE,NUM,TABLE)\t\t\\\n { if (switch_table_difference_label_flag)\t\t\\\n-    asm_fprintf (FILE, \"\\t%s %LLD%d,%LL%d-%LLI%d-2.b\\n\",\\\n+    asm_fprintf (FILE, \"%s%LLD%d,%LL%d-%LLI%d-2.b\\n\",\\\n \t\t SET_ASM_OP, (NUM), (NUM), (NUM));\t\\\n   switch_table_difference_label_flag = 0; }\n \n@@ -428,7 +428,7 @@ extern int switch_table_difference_label_flag;\n \n #undef ASM_OUTPUT_ADDR_DIFF_ELT\n #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL)\t\\\n-  asm_fprintf (FILE, \"\\t%s %LL%d-%LL%d\\n\", WORD_ASM_OP, VALUE, REL)\n+  asm_fprintf (FILE, \"%s%LL%d-%LL%d\\n\", WORD_ASM_OP, VALUE, REL)\n \n /* Currently, JUMP_TABLES_IN_TEXT_SECTION must be defined in order to\n    keep switch tables in the text section. */"}, {"sha": "ca5fdd0690f33ca37b31e7a0fa2e9e2ec5468115", "filename": "gcc/config/m88k/dgux.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm88k%2Fdgux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm88k%2Fdgux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fdgux.h?ref=016c844017b941fbfe25a51172d03fa3e3cda13e", "patch": "@@ -178,9 +178,9 @@ Boston, MA 02111-1307, USA.  */\n     if (TARGET_SVR4)\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tif (TARGET_88110)\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"\\t%s\\t \\\"%s\\\"\\n\", VERSION_ASM_OP, \"04.00\");   \\\n+\t  fprintf (FILE, \"%s\\\"%s\\\"\\n\", VERSION_ASM_OP, \"04.00\");\t\\\n \telse\t\t\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"\\t%s\\t \\\"%s\\\"\\n\", VERSION_ASM_OP, \"03.00\");   \\\n+\t  fprintf (FILE, \"%s\\\"%s\\\"\\n\", VERSION_ASM_OP, \"03.00\");\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n     if (write_symbols != NO_DEBUG && !TARGET_NOLEGEND)\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "a30b350c454d183f5bc6e34539a235f236a3a607", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=016c844017b941fbfe25a51172d03fa3e3cda13e", "patch": "@@ -955,7 +955,7 @@ output_short_branch_defs (stream)\n       ASM_GENERATE_INTERNAL_LABEL\n \t(low, \"L\", CODE_LABEL_NUMBER (XEXP (sb_low, 0)));\n       /* This will change as the assembler requirements become known.  */\n-      fprintf (stream, \"\\t%s\\t %s,%s-%s\\n\",\n+      fprintf (stream, \"%s%s,%s-%s\\n\",\n \t       SET_ASM_OP, &name[1], &high[1], &low[1]);\n     }\n   if (sb_name || sb_high || sb_low)\n@@ -1571,7 +1571,7 @@ output_file_start (file, f_options, f_len, W_options, W_len)\n   ASM_FIRST_LINE (file);\n   if (TARGET_88110\n       && TARGET_SVR4)\n-    fprintf (file, \"\\t%s\\n\", REQUIRES_88110_ASM_OP);\n+    fprintf (file, \"%s\\n\", REQUIRES_88110_ASM_OP);\n   output_file_directive (file, main_input_filename);\n   /* Switch to the data section so that the coffsem symbol and the\n      gcc2_compiled. symbol aren't in the text section.  */\n@@ -1583,7 +1583,7 @@ output_file_start (file, f_options, f_len, W_options, W_len)\n       char indent[256];\n \n       time_t now = time ((time_t *)0);\n-      sprintf (indent, \"]\\\"\\n\\t%s\\t \\\"@(#)%s [\", IDENT_ASM_OP, main_input_filename);\n+      sprintf (indent, \"]\\\"\\n%s\\\"@(#)%s [\", IDENT_ASM_OP, main_input_filename);\n       fprintf (file, indent+3);\n       pos = fprintf (file, \"gcc %s, %.24s,\", version_string, ctime (&now));\n #if 1\n@@ -1615,14 +1615,14 @@ output_ascii (file, opcode, max, p, size)\n \n   register int num = 0;\n \n-  fprintf (file, \"\\t%s\\t \\\"\", opcode);\n+  fprintf (file, \"%s\\\"\", opcode);\n   for (i = 0; i < size; i++)\n     {\n       register int c = p[i];\n \n       if (num > max)\n \t{\n-\t  fprintf (file, \"\\\"\\n\\t%s\\t \\\"\", opcode);\n+\t  fprintf (file, \"\\\"\\n%s\\\"\", opcode);\n \t  num = 0;\n \t}\n \t  \n@@ -2343,7 +2343,7 @@ output_tdesc (file, offset)\n \n   tdesc_section ();\n \n-  fprintf (file, \"\\t%s\\t %d,%d\", INT_ASM_OP, /* 8:0,22:(20 or 16),2:2 */\n+  fprintf (file, \"%s%d,%d\", INT_ASM_OP, /* 8:0,22:(20 or 16),2:2 */\n \t   (((xmask != 0) ? 20 : 16) << 2) | 2,\n \t   flag_pic ? 2 : 1);\n "}, {"sha": "5e7276f9b2a3e7c0f1b6d70321d8b05fb57fcb41", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=016c844017b941fbfe25a51172d03fa3e3cda13e", "patch": "@@ -1807,9 +1807,9 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n     if (TARGET_SVR4)\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tif (TARGET_88110)\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"\\t%s\\t \\\"%s\\\"\\n\", VERSION_ASM_OP, \"04.00\");   \\\n+\t  fprintf (FILE, \"%s\\\"%s\\\"\\n\", VERSION_ASM_OP, \"04.00\");\t\\\n \telse\t\t\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"\\t%s\\t \\\"%s\\\"\\n\", VERSION_ASM_OP, \"03.00\");   \\\n+\t  fprintf (FILE, \"%s\\\"%s\\\"\\n\", VERSION_ASM_OP, \"03.00\");\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n   } while (0)\n \n@@ -1825,7 +1825,7 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n #undef\tASM_FILE_END\n \n #define ASM_OUTPUT_SOURCE_FILENAME(FILE, NAME) \\\n-  fprintf (FILE, \"\\t%s\\t \\\"%s\\\"\\n\", FILE_ASM_OP, NAME)\n+  fprintf (FILE, \"%s\\\"%s\\\"\\n\", FILE_ASM_OP, NAME)\n \n #ifdef SDB_DEBUGGING_INFO\n #undef ASM_OUTPUT_SOURCE_LINE\n@@ -1905,7 +1905,7 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n   do {\t\t\t\t\t\t\t\t\t\\\n     if (DECLARE_ASM_NAME)\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n+\tfprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\\\n \tassemble_name (FILE, NAME);\t\t\t\t\t\\\n \tputc (',', FILE);\t\t\t\t\t\t\\\n \tfprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n@@ -1920,7 +1920,7 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n   do {\t\t\t\t\t\t\t\t\t    \\\n     if (DECLARE_ASM_NAME)\t\t\t\t\t\t    \\\n       {\t\t\t\t\t\t\t\t\t    \\\n-\tfprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\t    \\\n+\tfprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t    \\\n \tassemble_name (FILE, NAME);\t\t\t\t\t    \\\n \tputc (',', FILE);\t\t\t\t\t\t    \\\n \tfprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t    \\\n@@ -1929,7 +1929,7 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n \tif (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t    \\\n \t  {\t\t\t\t\t\t\t\t    \\\n             size_directive_output = 1;\t\t\t\t\t    \\\n-\t    fprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t    \\\n+\t    fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t    \\\n \t    assemble_name (FILE, NAME);\t\t\t\t\t    \\\n \t    fprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL))); \\\n \t  }\t\t\t\t\t\t\t\t    \\\n@@ -1954,7 +1954,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n \t && !size_directive_output)\t\t\t\t\t \\\n        {\t\t\t\t\t\t\t\t \\\n \t size_directive_output = 1;\t\t\t\t\t \\\n-\t fprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t \\\n+\t fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t \\\n \t assemble_name (FILE, name);\t\t\t\t\t \\\n \t fprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL))); \\\n        }\t\t\t\t\t\t\t\t \\\n@@ -1973,7 +1973,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n \t    labelno++;\t\t\t\t\t\t\t\\\n \t    ASM_GENERATE_INTERNAL_LABEL (label, \"Lfe\", labelno);\t\\\n \t    ASM_OUTPUT_INTERNAL_LABEL (FILE, \"Lfe\", labelno);\t\t\\\n-\t    fprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t\\\n+\t    fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n \t    assemble_name (FILE, (FNAME));\t\t\t\t\\\n \t    fprintf (FILE, \",%s-\", &label[1]);\t\t\t\t\\\n \t    assemble_name (FILE, (FNAME));\t\t\t\t\\\n@@ -1991,7 +1991,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n    defined for reference from other files.  */\n #define ASM_GLOBALIZE_LABEL(FILE,NAME)\t\t\t\\\n   do {\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", GLOBAL_ASM_OP);\t\t\\\n+    fprintf (FILE, \"%s\", GLOBAL_ASM_OP);\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\t\\\n     putc ('\\n', FILE);\t\t\t\t\t\\\n   } while (0)\n@@ -2018,7 +2018,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n #undef ASM_OUTPUT_INTERNAL_LABEL\n #ifdef AS_BUG_DOT_LABELS /* The assembler requires a declaration of local.  */\n #define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\t\t\\\n-  fprintf (FILE, TARGET_SVR4 ? \".%s%d:\\n\\t%s\\t .%s%d\\n\" : \"@%s%d:\\n\", \\\n+  fprintf (FILE, TARGET_SVR4 ? \".%s%d:\\n%s.%s%d\\n\" : \"@%s%d:\\n\", \\\n \t   PREFIX, NUM, INTERNAL_ASM_OP, PREFIX, NUM)\n #else\n #define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\t\t\\\n@@ -2078,7 +2078,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n   do {\t\t\t\t\t\t\t\t\t\\\n     union { REAL_VALUE_TYPE d; long l[2]; } x;\t\t\t\t\\\n     x.d = (VALUE);\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t 0x%.8lx, 0x%.8lx\\n\", INT_ASM_OP,\t\t\\\n+    fprintf (FILE, \"%s0x%.8lx, 0x%.8lx\\n\", INT_ASM_OP,\t\t\t\\\n \t     (long) x.l[0], (long) x.l[1]);\t\t\t\t\\\n   } while (0)\n \n@@ -2087,28 +2087,28 @@ do {\t\t\t\t\t\t\t\t\t \\\n   do {\t\t\t\t\t\t\t\t\t\\\n     int i;\t\t\t\t\t\t\t\t\\\n     FLOAT_TO_INT_INTERNAL (VALUE, i);\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t 0x%.8x\\n\", INT_ASM_OP, i);\t\t\t\\\n+    fprintf (FILE, \"%s0x%.8x\\n\", INT_ASM_OP, i);\t\t\t\\\n   } while (0)\n \n /* Likewise for `int', `short', and `char' constants.  */\n #define ASM_OUTPUT_INT(FILE,VALUE)\t\t\t\t\t\\\n-( fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP),\t\t\t\t\\\n+( fprintf (FILE, \"%s\", INT_ASM_OP),\t\t\t\t\t\\\n   output_addr_const (FILE, (VALUE)),\t\t\t\t\t\\\n   fprintf (FILE, \"\\n\"))\n \n #define ASM_OUTPUT_SHORT(FILE,VALUE)\t\t\t\t\t\\\n-( fprintf (FILE, \"\\t%s\\t \", SHORT_ASM_OP),\t\t\t\t\\\n+( fprintf (FILE, \"%s\", SHORT_ASM_OP),\t\t\t\t\t\\\n   output_addr_const (FILE, (VALUE)),\t\t\t\t\t\\\n   fprintf (FILE, \"\\n\"))\n \n #define ASM_OUTPUT_CHAR(FILE,VALUE)\t\t\t\t\t\\\n-( fprintf (FILE, \"\\t%s\\t \", CHAR_ASM_OP),\t\t\t\t\\\n+( fprintf (FILE, \"%s\", CHAR_ASM_OP),\t\t\t\t\t\\\n   output_addr_const (FILE, (VALUE)),\t\t\t\t\t\\\n   fprintf (FILE, \"\\n\"))\n \n /* This is how to output an assembler line for a numeric constant byte.  */\n #define ASM_OUTPUT_BYTE(FILE,VALUE)  \\\n-  fprintf (FILE, \"\\t%s\\t 0x%x\\n\", CHAR_ASM_OP, (VALUE))\n+  fprintf (FILE, \"%s0x%x\\n\", CHAR_ASM_OP, (VALUE))\n \n /* The single-byte pseudo-op is the default.  Override svr[34].h.  */\n #undef\tASM_BYTE_OP\n@@ -2165,7 +2165,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n    to a multiple of 2**LOG bytes.  */\n #define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n   if ((LOG) != 0)\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t %d\\n\", ALIGN_ASM_OP, 1<<(LOG))\n+    fprintf (FILE, \"%s%d\\n\", ALIGN_ASM_OP, 1<<(LOG))\n \n /* On the m88100, align the text address to half a cache boundary when it\n    can only be reached by jumping.  Pack code tightly when compiling\n@@ -2176,7 +2176,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n /* Override svr[34].h.  */\n #undef\tASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t%s\\t %u\\n\", SKIP_ASM_OP, (SIZE))\n+  fprintf (FILE, \"%s%u\\n\", SKIP_ASM_OP, (SIZE))\n \n /* Override svr4.h.  */\n #undef\tASM_OUTPUT_EXTERNAL_LIBCALL\n@@ -2187,7 +2187,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n #undef\tASM_OUTPUT_COMMON\n #undef\tASM_OUTPUT_ALIGNED_COMMON\n #define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)\t\\\n-( fprintf ((FILE), \"\\t%s\\t \",\t\t\t\t\\\n+( fprintf ((FILE), \"%s\",\t\t\t\t\\\n \t   ((SIZE) ? (SIZE) : 1) <= m88k_gp_threshold ? SCOMM_ASM_OP : COMMON_ASM_OP), \\\n   assemble_name ((FILE), (NAME)),\t\t\t\\\n   fprintf ((FILE), \",%u\\n\", (SIZE) ? (SIZE) : 1))\n@@ -2197,7 +2197,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n #undef\tASM_OUTPUT_LOCAL\n #undef\tASM_OUTPUT_ALIGNED_LOCAL\n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)\t\\\n-( fprintf ((FILE), \"\\t%s\\t \",\t\t\t\t\\\n+( fprintf ((FILE), \"%s\",\t\t\t\t\\\n \t   ((SIZE) ? (SIZE) : 1) <= m88k_gp_threshold ? SBSS_ASM_OP : BSS_ASM_OP), \\\n   assemble_name ((FILE), (NAME)),\t\t\t\\\n   fprintf ((FILE), \",%u,%d\\n\", (SIZE) ? (SIZE) : 1, (SIZE) <= 4 ? 4 : 8))"}, {"sha": "fce4e8b285033d250bc71f7c81e7e3e651d2b377", "filename": "gcc/config/mcore/mcore-elf.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h?ref=016c844017b941fbfe25a51172d03fa3e3cda13e", "patch": "@@ -121,7 +121,7 @@ exports_section ()\t\t\t\t\t\t\\\n           MCORE_EXPORT_NAME (FILE, NAME);\t\t\\\n \t  function_section (DECL);\t\t\t\\\n \t}\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\\\n+      fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\\\n       assemble_name (FILE, NAME);\t\t\t\\\n       putc (',', FILE);\t\t\t\t\t\\\n       fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\\\n@@ -142,7 +142,7 @@ exports_section ()\t\t\t\t\t\t\\\n \t  MCORE_EXPORT_NAME (FILE, NAME);\t\t\t\t\t\\\n           switch_to_section (save_section, (DECL));\t\t\t\t\\\n         }\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\t\t\\\n+      fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n       assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n       putc (',', FILE);\t\t\t\t\t\t\t\t\\\n       fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\t\\\n@@ -151,7 +151,7 @@ exports_section ()\t\t\t\t\t\t\\\n       if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\t\\\n         {\t\t\t\t\t\t\t\t\t\\\n           size_directive_output = 1;\t\t\t\t\t\t\\\n-          fprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t\t\\\n+          fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\t\\\n           assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n           fprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n         }\t\t\t\t\t\t\t\t\t\\\n@@ -174,7 +174,7 @@ exports_section ()\t\t\t\t\t\t\\\n           && DECL_INITIAL (DECL) == error_mark_node                      \\\n           && !size_directive_output)                                     \\\n         {                                                                \\\n-          fprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);                        \\\n+          fprintf (FILE, \"%s\", SIZE_ASM_OP);                             \\\n           assemble_name (FILE, name);                                    \\\n           fprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL)));\\\n         }                                                                \\"}, {"sha": "417271d21f2d444fa2d7ce646c8bb343db906e7b", "filename": "gcc/config/mcore/mcore-pe.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h?ref=016c844017b941fbfe25a51172d03fa3e3cda13e", "patch": "@@ -195,7 +195,7 @@ rdata_section ()\t\t\t\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       ctors_section ();\t\t\t\t\\\n-      fprintf (STREAM, \"\\t%s\\t \", INT_ASM_OP);\t\\\n+      fprintf (STREAM, \"%s\", INT_ASM_OP);\t\\\n       assemble_name (STREAM, NAME);\t\t\\\n       fprintf (STREAM, \"\\n\");\t\t\t\\\n     }\t\t\t\t\t\t\\\n@@ -208,7 +208,7 @@ rdata_section ()\t\t\t\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       dtors_section ();                   \t\\\n-      fprintf (STREAM, \"\\t%s\\t \", INT_ASM_OP);\t\\\n+      fprintf (STREAM, \"%s\", INT_ASM_OP);\t\\\n       assemble_name (STREAM, NAME);             \\\n       fprintf (STREAM, \"\\n\");\t\t\t\\\n     }\t\t\t\t\t\t\\"}, {"sha": "5dff663a66b0358a646dc88150bca04f26a51363", "filename": "gcc/config/mips/elf.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fmips%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fmips%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf.h?ref=016c844017b941fbfe25a51172d03fa3e3cda13e", "patch": "@@ -136,7 +136,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef ASM_DECLARE_OBJECT_NAME\n #define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n+    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n     putc (',', FILE);\t\t\t\t\t\t\t\\\n     fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\t\\\n@@ -145,7 +145,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n     if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tsize_directive_output = 1;\t\t\t\t\t\\\n-\tfprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t\t\\\n+\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n \tassemble_name (FILE, NAME);\t\t\t\t\t\\\n \tfprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n@@ -168,7 +168,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n \t && !size_directive_output)\t\t\t\t\t \\\n        {\t\t\t\t\t\t\t\t \\\n \t size_directive_output = 1;\t\t\t\t\t \\\n-\t fprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t \\\n+\t fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t \\\n \t assemble_name (FILE, name);\t\t\t\t\t \\\n \t fprintf (FILE, \",%d\\n\", int_size_in_bytes (TREE_TYPE (DECL)));  \\\n        }\t\t\t\t\t\t\t\t \\"}, {"sha": "86d6888de5306660c223908d6427cbd88dac4450", "filename": "gcc/config/mips/elf64.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fmips%2Felf64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fmips%2Felf64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf64.h?ref=016c844017b941fbfe25a51172d03fa3e3cda13e", "patch": "@@ -117,7 +117,7 @@ do {\t\t\t\t\t\t\t\t\\\n #undef ASM_DECLARE_OBJECT_NAME\n #define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n+    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n     putc (',', FILE);\t\t\t\t\t\t\t\\\n     fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\t\\\n@@ -126,7 +126,7 @@ do {\t\t\t\t\t\t\t\t\\\n     if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tsize_directive_output = 1;\t\t\t\t\t\\\n-\tfprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t\t\\\n+\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n \tassemble_name (FILE, NAME);\t\t\t\t\t\\\n \tfprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n@@ -149,7 +149,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n \t && !size_directive_output)\t\t\t\t\t \\\n        {\t\t\t\t\t\t\t\t \\\n \t size_directive_output = 1;\t\t\t\t\t \\\n-\t fprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t \\\n+\t fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t \\\n \t assemble_name (FILE, name);\t\t\t\t\t \\\n \t fprintf (FILE, \",%d\\n\", int_size_in_bytes (TREE_TYPE (DECL)));  \\\n        }\t\t\t\t\t\t\t\t \\"}, {"sha": "89169b7a58517fef3f0683a4473ac0482b7a0a26", "filename": "gcc/config/mips/gnu.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fmips%2Fgnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fmips%2Fgnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fgnu.h?ref=016c844017b941fbfe25a51172d03fa3e3cda13e", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  MIPS GNU Hurd version.\n-   Copyright (C) 1995, 1996, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1995, 1996, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -53,15 +53,15 @@ Boston, MA 02111-1307, USA.  */\n   do {\t\t\t\t \t\t\t\t\t\\\n \tmips_asm_file_end(FILE);\t\t\t\t\t\\\n \tif (!flag_no_ident)\t\t\t\t\t\t\\\n-\t  fprintf ((FILE), \"\\t%s\\t\\\"GCC: (GNU) %s\\\"\\n\",\t\t\t\\\n+\t  fprintf ((FILE), \"%s\\\"GCC: (GNU) %s\\\"\\n\",\t\t\t\\\n \t\t   IDENT_ASM_OP, version_string);\t\t\t\\\n   } while (0)\n \n #undef ASM_OUTPUT_SOURCE_LINE\n #define ASM_OUTPUT_SOURCE_LINE(FILE, LINE)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n       ++sym_lineno;\t\t\t\t\t\t\t\\\n-      fprintf ((FILE), \".LM%d:\\n\\t%s %d,0,%d,.LM%d\\n\",\t\t\t\\\n+      fprintf ((FILE), \".LM%d:\\n%s%d,0,%d,.LM%d\\n\",\t\t\t\\\n \t       sym_lineno, ASM_STABN_OP, N_SLINE, (LINE), sym_lineno);\t\\\n   } while (0)\n \n@@ -72,7 +72,7 @@ Boston, MA 02111-1307, USA.  */\n \t\t\t\t\t\t\t\t\t\\\n     if (TARGET_GP_OPT)\t\t\t\t\t\t\t\\\n       STREAM = asm_out_text_file;\t\t\t\t\t\\\n-    fprintf (STREAM, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n+    fprintf (STREAM, \"%s\", TYPE_ASM_OP);\t\t\t\t\\\n     assemble_name (STREAM, NAME);\t\t\t\t\t\\\n     putc (',', STREAM);\t\t\t\t\t\t\t\\\n     fprintf (STREAM, TYPE_OPERAND_FMT, \"function\");\t\t\t\\"}, {"sha": "177d6d90e761587975e74a867c769cb115531731", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=016c844017b941fbfe25a51172d03fa3e3cda13e", "patch": "@@ -411,7 +411,7 @@ do\t\t\t\t\t\t\t\t\t   \\\n \tmips_declare_object (STREAM, NAME, \"\", \":\\n\", 0);\t\t   \\\n \tASM_OUTPUT_ALIGN (STREAM, floor_log2 (ALIGN / BITS_PER_UNIT));\t   \\\n \tASM_OUTPUT_SKIP (STREAM, SIZE);\t\t\t\t\t   \\\n-\tfprintf (STREAM, \"\\t%s\\n\", POPSECTION_ASM_OP);\t\t\t   \\\n+\tfprintf (STREAM, \"%s\\n\", POPSECTION_ASM_OP);\t\t\t   \\\n       }\t\t\t\t\t\t\t\t\t   \\\n     else\t\t\t\t\t\t\t\t   \\\n       mips_declare_object (STREAM, NAME, \"\\n\\t.lcomm\\t\", \",%u\\n\", (SIZE)); \\\n@@ -436,7 +436,7 @@ do\t\t\t\t\t\t\t\t\t\\\n    if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\\\n      {\t\t\t\t\t\t\t\t\t\\\n        size_directive_output = 1;\t\t\t\t\t\\\n-       fprintf (STREAM, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t\\\n+       fprintf (STREAM, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n        assemble_name (STREAM, NAME);\t\t\t\t\t\\\n        fprintf (STREAM, \",%d\\n\", int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n      }\t\t\t\t\t\t\t\t\t\\\n@@ -465,7 +465,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n \t && !size_directive_output)\t\t\t\t\t \\\n        {\t\t\t\t\t\t\t\t \\\n \t size_directive_output = 1;\t\t\t\t\t \\\n-\t fprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t \\\n+\t fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t \\\n \t assemble_name (FILE, name);\t\t\t\t\t \\\n \t fprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL))); \\\n        }\t\t\t\t\t\t\t\t \\"}, {"sha": "13957fc2f7f6dd189b9ad32eb443c2e15d6187e7", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=016c844017b941fbfe25a51172d03fa3e3cda13e", "patch": "@@ -5857,7 +5857,7 @@ mips_output_filename (stream, name)\n   else if (write_symbols == DBX_DEBUG)\n     {\n       ASM_GENERATE_INTERNAL_LABEL (ltext_label_name, \"Ltext\", 0);\n-      fprintf (stream, \"%s \", ASM_STABS_OP);\n+      fprintf (stream, \"%s\", ASM_STABS_OP);\n       output_quoted_string (stream, name);\n       fprintf (stream, \",%d,0,0,%s\\n\", N_SOL, &ltext_label_name[1]);\n     }\n@@ -5896,7 +5896,7 @@ mips_output_lineno (stream, line)\n   if (write_symbols == DBX_DEBUG)\n     {\n       ++sym_lineno;\n-      fprintf (stream, \"%sLM%d:\\n\\t%s %d,0,%d,%sLM%d\\n\",\n+      fprintf (stream, \"%sLM%d:\\n%s%d,0,%d,%sLM%d\\n\",\n \t       LOCAL_LABEL_PREFIX, sym_lineno, ASM_STABN_OP, N_SLINE, line,\n \t       LOCAL_LABEL_PREFIX, sym_lineno);\n     }\n@@ -5992,7 +5992,7 @@ mips_asm_file_start (stream)\n #endif\n   if (TARGET_ABICALLS)\n     /* ??? but do not want this (or want pic0) if -non-shared? */\n-    fprintf (stream, \"\\t%s\\n\", ABICALLS_ASM_OP);\n+    fprintf (stream, \"%s\\n\", ABICALLS_ASM_OP);\n \n   if (TARGET_MIPS16)\n     fprintf (stream, \"\\t.set\\tmips16\\n\");"}, {"sha": "55eb3627dd854bb343d1b19acf5881c826c46478", "filename": "gcc/config/mips/netbsd.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/016c844017b941fbfe25a51172d03fa3e3cda13e/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fnetbsd.h?ref=016c844017b941fbfe25a51172d03fa3e3cda13e", "patch": "@@ -128,7 +128,7 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_DECLARE_FUNCTION_NAME\n #define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n+    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n     putc (',', FILE);\t\t\t\t\t\t\t\\\n     fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n@@ -141,7 +141,7 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_DECLARE_OBJECT_NAME\n #define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n+    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n     putc (',', FILE);\t\t\t\t\t\t\t\\\n     fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\t\\\n@@ -150,7 +150,7 @@ Boston, MA 02111-1307, USA.  */\n     if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tsize_directive_output = 1;\t\t\t\t\t\\\n-\tfprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t\t\\\n+\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n \tassemble_name (FILE, NAME);\t\t\t\t\t\\\n \tfprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n@@ -173,7 +173,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n \t && !size_directive_output)\t\t\t\t\t \\\n        {\t\t\t\t\t\t\t\t \\\n \t size_directive_output = 1;\t\t\t\t\t \\\n-\t fprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t \\\n+\t fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t \\\n \t assemble_name (FILE, name);\t\t\t\t\t \\\n \t fprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL))); \\\n        }\t\t\t\t\t\t\t\t \\\n@@ -191,7 +191,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n \tlabelno++;\t\t\t\t\t\t\t\\\n \tASM_GENERATE_INTERNAL_LABEL (label, \"Lfe\", labelno);\t\t\\\n \tASM_OUTPUT_INTERNAL_LABEL (FILE, \"Lfe\", labelno);\t\t\\\n-\tfprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t\t\\\n+\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n \tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n         fprintf (FILE, \",\");\t\t\t\t\t\t\\\n \tassemble_name (FILE, label);\t\t\t\t\t\\"}]}