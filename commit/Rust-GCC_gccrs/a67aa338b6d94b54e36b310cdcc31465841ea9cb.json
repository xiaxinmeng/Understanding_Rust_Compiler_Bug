{"sha": "a67aa338b6d94b54e36b310cdcc31465841ea9cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY3YWEzMzhiNmQ5NGI1NGUzNmIzMTBjZGNjMzE0NjU4NDFlYTljYg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2005-05-03T20:51:30Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2005-05-03T20:51:30Z"}, "message": "re PR java/21245 (gcjh creates invalid/empty header files)\n\n\tPR java/21245:\n\t* gjavah.c (main): Unlink output file on error.\n\nFrom-SVN: r99182", "tree": {"sha": "ff17c37a6bfbab73aa5bd203a5ad7f6176e056a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff17c37a6bfbab73aa5bd203a5ad7f6176e056a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a67aa338b6d94b54e36b310cdcc31465841ea9cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a67aa338b6d94b54e36b310cdcc31465841ea9cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a67aa338b6d94b54e36b310cdcc31465841ea9cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a67aa338b6d94b54e36b310cdcc31465841ea9cb/comments", "author": null, "committer": null, "parents": [{"sha": "78d27a0690ddc873d2dfab6e7223a3d53c4ad6e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78d27a0690ddc873d2dfab6e7223a3d53c4ad6e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78d27a0690ddc873d2dfab6e7223a3d53c4ad6e2"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "adb3b5a4cbe2655cadee5632e30beba843b48fa0", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a67aa338b6d94b54e36b310cdcc31465841ea9cb/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a67aa338b6d94b54e36b310cdcc31465841ea9cb/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=a67aa338b6d94b54e36b310cdcc31465841ea9cb", "patch": "@@ -1,3 +1,8 @@\n+2005-05-03  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR java/21245:\n+\t* gjavah.c (main): Unlink output file on error.\n+\n 2005-05-03  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* constants.c, jvgenmain.c, lang.opt, resource.c: Update"}, {"sha": "5606f259b2f99ea9faba7eff7ac96121459f848b", "filename": "gcc/java/gjavah.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a67aa338b6d94b54e36b310cdcc31465841ea9cb/gcc%2Fjava%2Fgjavah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a67aa338b6d94b54e36b310cdcc31465841ea9cb/gcc%2Fjava%2Fgjavah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgjavah.c?ref=a67aa338b6d94b54e36b310cdcc31465841ea9cb", "patch": "@@ -2387,6 +2387,7 @@ main (int argc, char** argv)\n   char *output_file = NULL;\n   int emit_dependencies = 0, suppress_output = 0;\n   int opt;\n+  int local_found_error;\n \n   /* Unlock the stdio streams.  */\n   unlock_std_streams ();\n@@ -2521,12 +2522,18 @@ main (int argc, char** argv)\n       exit (1);\n     }\n \n+  local_found_error = 0;\n   for (argi = optind; argi < argc; argi++)\n     {\n       char *classname = argv[argi];\n-      char *current_output_file;\n+      char *current_output_file = NULL;\n       const char *classfile_name;\n \n+      /* We reset the error state here so that we can detect errors\n+\t that occur when processing this file, so the output can be\n+\t unlinked if need be.  */\n+      found_error = 0;\n+\n       if (verbose)\n \tprintf (_(\"Processing %s\\n\"), classname);\n       if (! output_file)\n@@ -2602,13 +2609,22 @@ main (int argc, char** argv)\n       free_method_name_list ();\n       process_file (&jcf, out);\n       JCF_FINISH (&jcf);\n+\n+      /* If we found an error and we're writing to a real file,\n+\t delete it.  */\n+      if (found_error && ! suppress_output && current_output_file != NULL\n+\t  && strcmp (current_output_file, \"-\"))\n+\tunlink (current_output_file);\n+\n       if (current_output_file != output_file)\n \tfree (current_output_file);\n       jcf_dependency_write ();\n+\n+      local_found_error |= found_error;\n     }\n \n   if (out != NULL && out != stdout)\n     fclose (out);\n \n-  return found_error;\n+  return local_found_error;\n }"}]}