{"sha": "9ad3ca3499c4c5e9153e29de70cb4fef9ac6188c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFkM2NhMzQ5OWM0YzVlOTE1M2UyOWRlNzBjYjRmZWY5YWM2MTg4Yw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-05-07T09:40:34Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-05-07T09:40:34Z"}, "message": "cxxabi.h: Use __SIZE_TYPE_ and __PTRDIFF_TYPE__ in place of std::size_t and...\n\n\t* inc/cxxabi.h: Use __SIZE_TYPE_ and __PTRDIFF_TYPE__ in place\n\tof std::size_t and std::ptrdiff_t respectively.\n\t* tinfo.cc: Likewise.\n\t* vec.cc: Likewise.\n\nFrom-SVN: r33759", "tree": {"sha": "1781cf47889914cf9db55ba456955d522bfecec8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1781cf47889914cf9db55ba456955d522bfecec8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ad3ca3499c4c5e9153e29de70cb4fef9ac6188c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad3ca3499c4c5e9153e29de70cb4fef9ac6188c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ad3ca3499c4c5e9153e29de70cb4fef9ac6188c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad3ca3499c4c5e9153e29de70cb4fef9ac6188c/comments", "author": null, "committer": null, "parents": [{"sha": "b8f4101008cbcf1f0c3f38f90a71616b5edc6950", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8f4101008cbcf1f0c3f38f90a71616b5edc6950", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8f4101008cbcf1f0c3f38f90a71616b5edc6950"}], "stats": {"total": 123, "additions": 67, "deletions": 56}, "files": [{"sha": "64d83e8970bae7255017a55edfeb4d08ac62c162", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad3ca3499c4c5e9153e29de70cb4fef9ac6188c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad3ca3499c4c5e9153e29de70cb4fef9ac6188c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9ad3ca3499c4c5e9153e29de70cb4fef9ac6188c", "patch": "@@ -1,3 +1,10 @@\n+2000-05-07  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* inc/cxxabi.h: Use __SIZE_TYPE_ and __PTRDIFF_TYPE__ in place\n+\tof std::size_t and std::ptrdiff_t respectively.\n+\t* tinfo.cc: Likewise.\n+\t* vec.cc: Likewise.\n+\n 2000-05-06  Richard Henderson  <rth@cygnus.com>\n \n \t* typeck.c (build_c_cast): Don't warn integer->pointer size"}, {"sha": "9bda48459f8e7b9b4b3f54a423b0d144ade644f6", "filename": "gcc/cp/inc/cxxabi.h", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad3ca3499c4c5e9153e29de70cb4fef9ac6188c/gcc%2Fcp%2Finc%2Fcxxabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad3ca3499c4c5e9153e29de70cb4fef9ac6188c/gcc%2Fcp%2Finc%2Fcxxabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finc%2Fcxxabi.h?ref=9ad3ca3499c4c5e9153e29de70cb4fef9ac6188c", "patch": "@@ -49,10 +49,14 @@\n \n #ifdef __cplusplus\n \n+// We use the compiler builtins __SIZE__TYPE__ and __PTRDIFF_TYPE__ instead of\n+// std::size_t and std::ptrdiff_t respectively. This makes us independant of\n+// the conformance level of <cstddef> and whether -fhonor-std was supplied.\n+// <cstddef> is not currently available during compiler building anyway.\n+// including <stddef.h> would be wrong, as that would rudely place size_t in\n+// the global namespace.\n+\n #include <typeinfo>\n-// This should really be cstddef, but that currently is not available when\n-// building the runtime.\n-#include <stddef.h>\n \n namespace __cxxabiv1\n {\n@@ -207,11 +211,11 @@ class __base_class_info\n     { return vmi_offset_flags & virtual_mask; }\n   bool __is_public_p () const\n     { return vmi_offset_flags & public_mask; }\n-  std::ptrdiff_t __offset () const\n+  __PTRDIFF_TYPE__ __offset () const\n     { \n       // This shift, being of a signed type, is implementation defined. GCC\n       // implements such shifts as arithmetic, which is what we want.\n-      return std::ptrdiff_t (vmi_offset_flags) >> offset_shift;\n+      return __PTRDIFF_TYPE__ (vmi_offset_flags) >> offset_shift;\n     }\n };\n \n@@ -277,7 +281,7 @@ class __class_type_info\n      within this type.  If SRC_PTR is one of our SRC_TYPE bases, indicate the\n      virtuality. Returns not_contained for non containment or private\n      containment. */\n-  inline __sub_kind __find_public_src (std::ptrdiff_t __src2dst,\n+  inline __sub_kind __find_public_src (__PTRDIFF_TYPE__ __src2dst,\n                                        const void *__obj_ptr,\n                                        const __class_type_info *__src_type,\n                                        const void *__src_ptr) const;\n@@ -289,7 +293,7 @@ class __class_type_info\n      indicates the static type started from and SRC_PTR points to that base\n      within the most derived object. Fill in RESULT with what we find. Return\n      true if we have located an ambiguous match. */\n-  virtual bool __do_dyncast (std::ptrdiff_t __src2dst,\n+  virtual bool __do_dyncast (__PTRDIFF_TYPE__ __src2dst,\n                              __sub_kind __access_path,\n                              const __class_type_info *__dst_type,\n                              const void *__obj_ptr,\n@@ -301,7 +305,7 @@ class __class_type_info\n      inherited by the type started from -- which is not necessarily the\n      current type. The current type will be a base of the destination type.\n      OBJ_PTR points to the current base. */\n-  virtual __sub_kind __do_find_public_src (std::ptrdiff_t __src2dst,\n+  virtual __sub_kind __do_find_public_src (__PTRDIFF_TYPE__ __src2dst,\n                                            const void *__obj_ptr,\n                                            const __class_type_info *__src_type,\n                                            const void *__src_ptr) const;\n@@ -326,14 +330,14 @@ class __si_class_type_info\n \n /* implementation defined member functions */\n protected:\n-  virtual bool __do_dyncast (std::ptrdiff_t __src2dst,\n+  virtual bool __do_dyncast (__PTRDIFF_TYPE__ __src2dst,\n                              __sub_kind __access_path,\n                              const __class_type_info *__dst_type,\n                              const void *__obj_ptr,\n                              const __class_type_info *__src_type,\n                              const void *__src_ptr,\n                              __dyncast_result &__result) const;\n-  virtual __sub_kind __do_find_public_src (std::ptrdiff_t __src2dst,\n+  virtual __sub_kind __do_find_public_src (__PTRDIFF_TYPE__ __src2dst,\n                                            const void *__obj_ptr,\n                                            const __class_type_info *__src_type,\n                                            const void *__sub_ptr) const;\n@@ -376,14 +380,14 @@ class __vmi_class_type_info : public __class_type_info {\n \n /* implementation defined member functions */\n protected:\n-  virtual bool __do_dyncast (std::ptrdiff_t __src2dst,\n+  virtual bool __do_dyncast (__PTRDIFF_TYPE__ __src2dst,\n                              __sub_kind __access_path,\n                              const __class_type_info *__dst_type,\n                              const void *__obj_ptr,\n                              const __class_type_info *__src_type,\n                              const void *__src_ptr,\n                              __dyncast_result &__result) const;\n-  virtual __sub_kind __do_find_public_src (std::ptrdiff_t __src2dst,\n+  virtual __sub_kind __do_find_public_src (__PTRDIFF_TYPE__ __src2dst,\n                                            const void *__obj_ptr,\n                                            const __class_type_info *__src_type,\n                                            const void *__src_ptr) const;\n@@ -398,7 +402,7 @@ extern \"C++\"\n void *__dynamic_cast (const void *__src_ptr,    /* object started from */\n                       const __class_type_info *__src_type, /* static type of object */\n                       const __class_type_info *__dst_type, /* desired target type */\n-                      std::ptrdiff_t __src2dst); /* how src and dst are related */\n+                      __PTRDIFF_TYPE__ __src2dst); /* how src and dst are related */\n \n     /* src2dst has the following possible values\n        >= 0: src_type is a unique public non-virtual base of dst_type\n@@ -411,32 +415,32 @@ void *__dynamic_cast (const void *__src_ptr,    /* object started from */\n \n /* allocate and construct array */\n extern \"C++\"\n-void *__cxa_vec_new (size_t __element_count,\n-                     size_t __element_size,\n-                     size_t __padding_size,\n+void *__cxa_vec_new (__SIZE_TYPE__ __element_count,\n+                     __SIZE_TYPE__ __element_size,\n+                     __SIZE_TYPE__ __padding_size,\n                      void (*__constructor) (void *),\n                      void (*__destructor) (void *));\n \n /* construct array */\n extern \"C++\"\n void __cxa_vec_ctor (void *__array_address,\n-                     size_t __element_count,\n-                     size_t __element_size,\n+                     __SIZE_TYPE__ __element_count,\n+                     __SIZE_TYPE__ __element_size,\n                      void (*__constructor) (void *),\n                      void (*__destructor) (void *));\n \n /* destruct array */\n extern \"C++\"\n void __cxa_vec_dtor (void *__array_address,\n-                     size_t __element_count,\n-                     size_t __element_size,\n+                     __SIZE_TYPE__ __element_count,\n+                     __SIZE_TYPE__ __element_size,\n                      void (*__destructor) (void *));\n \n /* destruct and release array */\n extern \"C++\"\n void __cxa_vec_delete (void *__array_address,\n-                       size_t __element_size,\n-                       size_t __padding_size,\n+                       __SIZE_TYPE__ __element_size,\n+                       __SIZE_TYPE__ __padding_size,\n                        void (*__destructor) (void *));\n \n } /* namespace __cxxabiv1 */"}, {"sha": "1f4ef4142996f3fde805e5330ce942a289ec1475", "filename": "gcc/cp/tinfo.cc", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad3ca3499c4c5e9153e29de70cb4fef9ac6188c/gcc%2Fcp%2Ftinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad3ca3499c4c5e9153e29de70cb4fef9ac6188c/gcc%2Fcp%2Ftinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftinfo.cc?ref=9ad3ca3499c4c5e9153e29de70cb4fef9ac6188c", "patch": "@@ -579,14 +579,14 @@ using namespace abi;\n // initial part of a vtable, this structure is used with offsetof, so we don't\n // have to keep alignments consistent manually.\n struct vtable_prefix {\n-  ptrdiff_t whole_object;           // offset to most derived object\n+  __PTRDIFF_TYPE__ whole_object;           // offset to most derived object\n   const __class_type_info *whole_type;  // pointer to most derived type_info\n   const void *origin;               // what a class's vptr points to\n };\n \n template <typename T>\n inline const T *\n-adjust_pointer (const void *base, ptrdiff_t offset)\n+adjust_pointer (const void *base, __PTRDIFF_TYPE__ offset)\n {\n   return reinterpret_cast <const T *>\n     (reinterpret_cast <const char *> (base) + offset);\n@@ -595,13 +595,13 @@ adjust_pointer (const void *base, ptrdiff_t offset)\n // ADDR is a pointer to an object.  Convert it to a pointer to a base,\n // using OFFSET. IS_VIRTUAL is true, if we are getting a virtual base.\n inline void const *\n-convert_to_base (void const *addr, bool is_virtual, ptrdiff_t offset)\n+convert_to_base (void const *addr, bool is_virtual, __PTRDIFF_TYPE__ offset)\n {\n   if (is_virtual)\n     {\n       const void *vtable = *static_cast <const void *const *> (addr);\n       \n-      offset = *adjust_pointer<ptrdiff_t> (vtable, offset);\n+      offset = *adjust_pointer<__PTRDIFF_TYPE__> (vtable, offset);\n     }\n \n   return adjust_pointer<void> (addr, offset);\n@@ -716,7 +716,7 @@ __do_upcast (const __class_type_info *dst_type,\n }\n \n inline __class_type_info::__sub_kind __class_type_info::\n-__find_public_src (ptrdiff_t src2dst,\n+__find_public_src (__PTRDIFF_TYPE__ src2dst,\n                    const void *obj_ptr,\n                    const __class_type_info *src_type,\n                    const void *src_ptr) const\n@@ -730,7 +730,7 @@ __find_public_src (ptrdiff_t src2dst,\n }\n \n __class_type_info::__sub_kind __class_type_info::\n-__do_find_public_src (ptrdiff_t,\n+__do_find_public_src (__PTRDIFF_TYPE__,\n                       const void *obj_ptr,\n                       const __class_type_info *,\n                       const void *src_ptr) const\n@@ -742,7 +742,7 @@ __do_find_public_src (ptrdiff_t,\n }\n \n __class_type_info::__sub_kind __si_class_type_info::\n-__do_find_public_src (ptrdiff_t src2dst,\n+__do_find_public_src (__PTRDIFF_TYPE__ src2dst,\n                       const void *obj_ptr,\n                       const __class_type_info *src_type,\n                       const void *src_ptr) const\n@@ -753,21 +753,21 @@ __do_find_public_src (ptrdiff_t src2dst,\n }\n \n __class_type_info::__sub_kind __vmi_class_type_info::\n-__do_find_public_src (ptrdiff_t src2dst,\n+__do_find_public_src (__PTRDIFF_TYPE__ src2dst,\n                       const void *obj_ptr,\n                       const __class_type_info *src_type,\n                       const void *src_ptr) const\n {\n   if (obj_ptr == src_ptr && *this == *src_type)\n     return __contained_public;\n   \n-  for (size_t i = vmi_base_count; i--;)\n+  for (__SIZE_TYPE__ i = vmi_base_count; i--;)\n     {\n       if (!vmi_bases[i].__is_public_p ())\n         continue; // Not public, can't be here.\n       \n       const void *base = obj_ptr;\n-      ptrdiff_t offset = vmi_bases[i].__offset ();\n+      __PTRDIFF_TYPE__ offset = vmi_bases[i].__offset ();\n       bool is_virtual = vmi_bases[i].__is_virtual_p ();\n       \n       if (is_virtual)\n@@ -791,7 +791,7 @@ __do_find_public_src (ptrdiff_t src2dst,\n }\n \n bool __class_type_info::\n-__do_dyncast (ptrdiff_t,\n+__do_dyncast (__PTRDIFF_TYPE__,\n               __sub_kind access_path,\n               const __class_type_info *dst_type,\n               const void *obj_ptr,\n@@ -817,7 +817,7 @@ __do_dyncast (ptrdiff_t,\n }\n \n bool __si_class_type_info::\n-__do_dyncast (ptrdiff_t src2dst,\n+__do_dyncast (__PTRDIFF_TYPE__ src2dst,\n               __sub_kind access_path,\n               const __class_type_info *dst_type,\n               const void *obj_ptr,\n@@ -857,7 +857,7 @@ __do_dyncast (ptrdiff_t src2dst,\n // work by filling in things lazily (when we know we need the information),\n // and opportunisticly take early success or failure results.\n bool __vmi_class_type_info::\n-__do_dyncast (ptrdiff_t src2dst,\n+__do_dyncast (__PTRDIFF_TYPE__ src2dst,\n               __sub_kind access_path,\n               const __class_type_info *dst_type,\n               const void *obj_ptr,\n@@ -884,12 +884,12 @@ __do_dyncast (ptrdiff_t src2dst,\n       return false;\n     }\n   bool result_ambig = false;\n-  for (size_t i = vmi_base_count; i--;)\n+  for (__SIZE_TYPE__ i = vmi_base_count; i--;)\n     {\n       __dyncast_result result2;\n       void const *base = obj_ptr;\n       __sub_kind base_access = access_path;\n-      ptrdiff_t offset = vmi_bases[i].__offset ();\n+      __PTRDIFF_TYPE__ offset = vmi_bases[i].__offset ();\n       bool is_virtual = vmi_bases[i].__is_virtual_p ();\n       \n       if (is_virtual)\n@@ -1071,12 +1071,12 @@ __do_upcast (__sub_kind access_path,\n   if (src_details & __flags_unknown_mask)\n     src_details = vmi_flags;\n   \n-  for (size_t i = vmi_base_count; i--;)\n+  for (__SIZE_TYPE__ i = vmi_base_count; i--;)\n     {\n       __upcast_result result2 (src_details);\n       const void *base = obj_ptr;\n       __sub_kind sub_access = access_path;\n-      ptrdiff_t offset = vmi_bases[i].__offset ();\n+      __PTRDIFF_TYPE__ offset = vmi_bases[i].__offset ();\n       bool is_virtual = vmi_bases[i].__is_virtual_p ();\n       \n       if (!vmi_bases[i].__is_public_p ())\n@@ -1141,12 +1141,12 @@ extern \"C++\" void *\n __dynamic_cast (const void *src_ptr,    // object started from\n                 const __class_type_info *src_type, // type of the starting object\n                 const __class_type_info *dst_type, // desired target type\n-                ptrdiff_t src2dst) // how src and dst are related\n+                __PTRDIFF_TYPE__ src2dst) // how src and dst are related\n {\n   const void *vtable = *static_cast <const void *const *> (src_ptr);\n   const vtable_prefix *prefix =\n-      adjust_pointer <vtable_prefix> (vtable, \n-\t\t\t\t      -offsetof (vtable_prefix, origin));\n+      adjust_pointer <vtable_prefix>\n+        (vtable, -__PTRDIFF_TYPE__(static_cast <vtable_prefix *> (NULL)->origin));\n   const void *whole_ptr =\n       adjust_pointer <void> (src_ptr, prefix->whole_object);\n   const __class_type_info *whole_type = prefix->whole_type;"}, {"sha": "50ee565d271fad7e8397f92b9d92deb8282d7031", "filename": "gcc/cp/vec.cc", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad3ca3499c4c5e9153e29de70cb4fef9ac6188c/gcc%2Fcp%2Fvec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad3ca3499c4c5e9153e29de70cb4fef9ac6188c/gcc%2Fcp%2Fvec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fvec.cc?ref=9ad3ca3499c4c5e9153e29de70cb4fef9ac6188c", "patch": "@@ -41,19 +41,19 @@ namespace __cxxabiv1\n \n /* allocate and construct array */\n extern \"C++\" void *\n-__cxa_vec_new (size_t element_count,\n-               size_t element_size,\n-               size_t padding_size,\n+__cxa_vec_new (__SIZE_TYPE__ element_count,\n+               __SIZE_TYPE__ element_size,\n+               __SIZE_TYPE__ padding_size,\n                void (*constructor) (void *),\n                void (*destructor) (void *))\n {\n-  size_t size = element_count * element_size + padding_size;\n+  __SIZE_TYPE__ size = element_count * element_size + padding_size;\n   char *base = static_cast <char *> (operator new[] (size));\n   \n   if (padding_size)\n     {\n       base += padding_size;\n-      reinterpret_cast <size_t *> (base)[-1] = element_count;\n+      reinterpret_cast <__SIZE_TYPE__ *> (base)[-1] = element_count;\n     }\n   try\n     {\n@@ -72,12 +72,12 @@ __cxa_vec_new (size_t element_count,\n /* construct array */\n extern \"C++\" void\n __cxa_vec_ctor (void *array_address,\n-                size_t element_count,\n-                size_t element_size,\n+                __SIZE_TYPE__ element_count,\n+                __SIZE_TYPE__ element_size,\n                 void (*constructor) (void *),\n                 void (*destructor) (void *))\n {\n-  size_t ix = 0;\n+  __SIZE_TYPE__ ix = 0;\n   char *ptr = static_cast <char *> (array_address);\n   \n   try\n@@ -97,14 +97,14 @@ __cxa_vec_ctor (void *array_address,\n /* destruct array */\n extern \"C++\" void\n __cxa_vec_dtor (void *array_address,\n-                size_t element_count,\n-                size_t element_size,\n+                __SIZE_TYPE__ element_count,\n+                __SIZE_TYPE__ element_size,\n                 void (*destructor) (void *))\n {\n   if (destructor)\n     {\n       char *ptr = static_cast <char *> (array_address);\n-      size_t ix = element_count;\n+      __SIZE_TYPE__ ix = element_count;\n       bool unwinding = std::uncaught_exception ();\n       \n       ptr += element_count * element_size;\n@@ -133,15 +133,15 @@ __cxa_vec_dtor (void *array_address,\n /* destruct and release array */\n extern \"C++\" void\n __cxa_vec_delete (void *array_address,\n-                  size_t element_size,\n-                  size_t padding_size,\n+                  __SIZE_TYPE__ element_size,\n+                  __SIZE_TYPE__ padding_size,\n                   void (*destructor) (void *))\n {\n   char *base = static_cast <char *> (array_address);\n   \n   if (padding_size)\n     {\n-      size_t element_count = reinterpret_cast <size_t *> (base)[-1];\n+      __SIZE_TYPE__ element_count = reinterpret_cast <__SIZE_TYPE__ *> (base)[-1];\n       base -= padding_size;\n       try\n         {"}]}