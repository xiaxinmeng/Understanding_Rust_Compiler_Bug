{"sha": "68a57691dc5d712bff5c70691dd90c0c670022d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhhNTc2OTFkYzVkNzEyYmZmNWM3MDY5MWRkOTBjMGM2NzAwMjJkMA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-08-10T17:53:58Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-08-10T17:53:58Z"}, "message": "system.h (CONST_CAST): New.\n\n\t* system.h (CONST_CAST): New.\n\t* c-decl.c (c_make_fname_decl): Use it.\n\t* c-lex.c (cb_ident, lex_string): Likewise.\n\t* c-typeck.c (free_all_tagged_tu_seen_up_to): Likewise.\n\t* gcc.c (set_spec, read_specs, for_each_path, execute, do_spec_1,\n\tgive_switch, set_multilib_dir): Likewise.\n\t* gengtype-parse.c (string_seq, typedef_name): Likewise.\n\t* passes.c (execute_one_pass): Likewise.\n\t* prefix.c (update_path): Likewise.\n\t* pretty-print.c (pp_base_destroy_prefix): Likewise.\n\t* tree.c (build_string): Likewise.\n\ncp:\n\t* call.c (name_as_c_string): Use CONST_CAST.\n\t* decl.c (build_decl): Likewise.\n\t* parser.c (cp_parser_string_literal): Likewise.\n\nfortran:\n\t* gfortranspec.c (lang_specific_driver): Use CONST_CAST.\n\t* options.c (gfc_post_options): Likewise.\n\t* parse.c (parse_omp_structured_block): Likewise.\n\t* st.c (gfc_free_statement): Likewise.\n\njava:\n\t* jcf-parse.c (read_class, java_parse_file): Use CONST_CAST.\n\t* jcf.h (JCF_FINISH): Likewise.\n\nFrom-SVN: r127344", "tree": {"sha": "53bd7b9b59c9d1379b40355a4bdf1833b81d993b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53bd7b9b59c9d1379b40355a4bdf1833b81d993b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68a57691dc5d712bff5c70691dd90c0c670022d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68a57691dc5d712bff5c70691dd90c0c670022d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68a57691dc5d712bff5c70691dd90c0c670022d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68a57691dc5d712bff5c70691dd90c0c670022d0/comments", "author": null, "committer": null, "parents": [{"sha": "df54b9ab94b46279d2af4977d8bdd4187151a5a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df54b9ab94b46279d2af4977d8bdd4187151a5a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df54b9ab94b46279d2af4977d8bdd4187151a5a7"}], "stats": {"total": 132, "additions": 89, "deletions": 43}, "files": [{"sha": "ab159b5e46a37687bdbda682d7742cc68a1d0b69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68a57691dc5d712bff5c70691dd90c0c670022d0", "patch": "@@ -1,3 +1,17 @@\n+2007-08-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* system.h (CONST_CAST): New.\n+\t* c-decl.c (c_make_fname_decl): Use it.\n+\t* c-lex.c (cb_ident, lex_string): Likewise.\n+\t* c-typeck.c (free_all_tagged_tu_seen_up_to): Likewise.\n+\t* gcc.c (set_spec, read_specs, for_each_path, execute, do_spec_1,\n+\tgive_switch, set_multilib_dir): Likewise.\n+\t* gengtype-parse.c (string_seq, typedef_name): Likewise.\n+\t* passes.c (execute_one_pass): Likewise.\n+\t* prefix.c (update_path): Likewise.\n+\t* pretty-print.c (pp_base_destroy_prefix): Likewise.\n+\t* tree.c (build_string): Likewise.\n+\n 2007-08-10  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* tree-flow-inline.h (is_exec_stmt): Remove."}, {"sha": "ce93ac5799c95b53cb25f3aabee3e54db5c92834", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=68a57691dc5d712bff5c70691dd90c0c670022d0", "patch": "@@ -2811,7 +2811,7 @@ c_make_fname_decl (tree id, int type_dep)\n   DECL_ARTIFICIAL (decl) = 1;\n \n   init = build_string (length + 1, name);\n-  free ((char *) name);\n+  free (CONST_CAST (name));\n   TREE_TYPE (init) = type;\n   DECL_INITIAL (decl) = init;\n "}, {"sha": "a4e3b0c8094a3d6624a9aaa0564b4ee8481107a6", "filename": "gcc/c-lex.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=68a57691dc5d712bff5c70691dd90c0c670022d0", "patch": "@@ -186,7 +186,7 @@ cb_ident (cpp_reader * ARG_UNUSED (pfile),\n       if (cpp_interpret_string (pfile, str, 1, &cstr, false))\n \t{\n \t  ASM_OUTPUT_IDENT (asm_out_file, (const char *) cstr.text);\n-\t  free ((void *) cstr.text);\n+\t  free (CONST_CAST (cstr.text));\n \t}\n     }\n #endif\n@@ -811,7 +811,7 @@ lex_string (const cpp_token *tok, tree *valp, bool objc_string)\n       (parse_in, strs, concats + 1, &istr, wide))\n     {\n       value = build_string (istr.len, (const char *) istr.text);\n-      free ((void *) istr.text);\n+      free (CONST_CAST (istr.text));\n \n       if (c_lex_string_translate == -1)\n \t{\n@@ -832,7 +832,7 @@ lex_string (const cpp_token *tok, tree *valp, bool objc_string)\n \t      *valp = build_string (istr.len, (const char *) istr.text);\n \t      valp = &TREE_CHAIN (*valp);\n \t    }\n-\t  free ((void *) istr.text);\n+\t  free (CONST_CAST (istr.text));\n \t}\n     }\n   else"}, {"sha": "7e6da0f7f4e71169ab898309a3d11a53f4befdd3", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=68a57691dc5d712bff5c70691dd90c0c670022d0", "patch": "@@ -1026,7 +1026,7 @@ free_all_tagged_tu_seen_up_to (const struct tagged_tu_seen_cache *tu_til)\n       const struct tagged_tu_seen_cache *const tu1\n \t= (const struct tagged_tu_seen_cache *) tu;\n       tu = tu1->next;\n-      free ((void *)tu1);\n+      free (CONST_CAST (tu1));\n     }\n   tagged_tu_seen_base = tu_til;\n }"}, {"sha": "38f489c467bd9e2a8d56d6eb7bd09a6868600da2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=68a57691dc5d712bff5c70691dd90c0c670022d0", "patch": "@@ -1,3 +1,9 @@\n+2007-08-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* call.c (name_as_c_string): Use CONST_CAST.\n+\t* decl.c (build_decl): Likewise.\n+\t* parser.c (cp_parser_string_literal): Likewise.\n+\n 2007-08-10  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR c++/17763"}, {"sha": "79b8cd5bc6fb901cac9f7ffd009f2588c2bbbb87", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=68a57691dc5d712bff5c70691dd90c0c670022d0", "patch": "@@ -5388,7 +5388,7 @@ name_as_c_string (tree name, tree type, bool *free_p)\n   if (IDENTIFIER_CTOR_OR_DTOR_P (name))\n     {\n       pretty_name\n-\t= (char *) IDENTIFIER_POINTER (constructor_name (type));\n+\t= (char *) CONST_CAST (IDENTIFIER_POINTER (constructor_name (type)));\n       /* For a destructor, add the '~'.  */\n       if (name == complete_dtor_identifier\n \t  || name == base_dtor_identifier\n@@ -5409,7 +5409,7 @@ name_as_c_string (tree name, tree type, bool *free_p)\n       *free_p = true;\n     }\n   else\n-    pretty_name = (char *) IDENTIFIER_POINTER (name);\n+    pretty_name = (char *) CONST_CAST (IDENTIFIER_POINTER (name));\n \n   return pretty_name;\n }"}, {"sha": "6edb79d6a8de3e67d665eeeb0c60d66b2fdf264c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=68a57691dc5d712bff5c70691dd90c0c670022d0", "patch": "@@ -3368,7 +3368,7 @@ cp_make_fname_decl (tree id, int type_dep)\n   tree decl = build_decl (VAR_DECL, id, type);\n \n   if (name)\n-    free ((char *) name);\n+    free (CONST_CAST (name));\n \n   /* As we're using pushdecl_with_scope, we must set the context.  */\n   DECL_CONTEXT (decl) = current_function_decl;"}, {"sha": "b4ffd2fa4bdd7b9fe0c6574361e449cd3349fd9f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=68a57691dc5d712bff5c70691dd90c0c670022d0", "patch": "@@ -2922,8 +2922,8 @@ cp_parser_string_literal (cp_parser *parser, bool translate, bool wide_ok)\n   if ((translate ? cpp_interpret_string : cpp_interpret_string_notranslate)\n       (parse_in, strs, count, &istr, wide))\n     {\n-      value = build_string (istr.len, (char *)istr.text);\n-      free ((void *)istr.text);\n+      value = build_string (istr.len, (const char *)istr.text);\n+      free (CONST_CAST (istr.text));\n \n       TREE_TYPE (value) = wide ? wchar_array_type_node : char_array_type_node;\n       value = fix_string_type (value);"}, {"sha": "d9a75808e580e0067af4f2cb0abb75a4a6b2b19a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=68a57691dc5d712bff5c70691dd90c0c670022d0", "patch": "@@ -1,3 +1,10 @@\n+2007-08-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gfortranspec.c (lang_specific_driver): Use CONST_CAST.\n+\t* options.c (gfc_post_options): Likewise.\n+\t* parse.c (parse_omp_structured_block): Likewise.\n+\t* st.c (gfc_free_statement): Likewise.\n+\n 2007-08-10  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/32933"}, {"sha": "ca5da2944ec20bb197357f2cdb0f109cd45a59cf", "filename": "gcc/fortran/gfortranspec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Ffortran%2Fgfortranspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Ffortran%2Fgfortranspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortranspec.c?ref=68a57691dc5d712bff5c70691dd90c0c670022d0", "patch": "@@ -302,7 +302,7 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n   g77_xargc = argc;\n   g77_xargv = argv;\n   g77_newargc = 0;\n-  g77_newargv = (const char **) argv;\n+  g77_newargv = (const char **) CONST_CAST (argv);\n \n   /* First pass through arglist.\n "}, {"sha": "ad639ee548451c09f8f5e86b9dd818cc8c3bfc26", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=68a57691dc5d712bff5c70691dd90c0c670022d0", "patch": "@@ -239,7 +239,7 @@ gfc_post_options (const char **pfilename)\n     gfc_add_include_path (\".\", true);\n \n   if (canon_source_file != gfc_source_file)\n-    gfc_free ((void *) canon_source_file);\n+    gfc_free (CONST_CAST (canon_source_file));\n \n   /* Decide which form the file will be read in as.  */\n "}, {"sha": "4e7e8e1857da47459e7a1bebb6f805e7efb46919", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=68a57691dc5d712bff5c70691dd90c0c670022d0", "patch": "@@ -2625,7 +2625,7 @@ parse_omp_structured_block (gfc_statement omp_st, bool workshare_stmts_only)\n \t      && strcmp (cp->ext.omp_name, new_st.ext.omp_name) != 0))\n \tgfc_error (\"Name after !$omp critical and !$omp end critical does \"\n \t\t   \"not match at %C\");\n-      gfc_free ((char *) new_st.ext.omp_name);\n+      gfc_free (CONST_CAST (new_st.ext.omp_name));\n       break;\n     case EXEC_OMP_END_SINGLE:\n       cp->ext.omp_clauses->lists[OMP_LIST_COPYPRIVATE]"}, {"sha": "80844534c06f828f9ceaf3e2406b7ec3c9a4c39b", "filename": "gcc/fortran/st.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Ffortran%2Fst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Ffortran%2Fst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fst.c?ref=68a57691dc5d712bff5c70691dd90c0c670022d0", "patch": "@@ -173,7 +173,7 @@ gfc_free_statement (gfc_code *p)\n       break;\n \n     case EXEC_OMP_CRITICAL:\n-      gfc_free ((char *) p->ext.omp_name);\n+      gfc_free (CONST_CAST (p->ext.omp_name));\n       break;\n \n     case EXEC_OMP_FLUSH:"}, {"sha": "02c365b4b5c63c08b023302abd2c57353ebcd92f", "filename": "gcc/gcc.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=68a57691dc5d712bff5c70691dd90c0c670022d0", "patch": "@@ -1881,7 +1881,7 @@ set_spec (const char *name, const char *spec)\n \n   /* Free the old spec.  */\n   if (old_spec && sl->alloc_p)\n-    free ((void *) old_spec);\n+    free (CONST_CAST(old_spec));\n \n   sl->alloc_p = 1;\n }\n@@ -2186,7 +2186,7 @@ read_specs (const char *filename, int main_p)\n \n \t      set_spec (p2, *(sl->ptr_spec));\n \t      if (sl->alloc_p)\n-\t\tfree ((void *) *(sl->ptr_spec));\n+\t\tfree (CONST_CAST (*(sl->ptr_spec)));\n \n \t      *(sl->ptr_spec) = \"\";\n \t      sl->alloc_p = 0;\n@@ -2536,18 +2536,18 @@ for_each_path (const struct path_prefix *paths,\n \t Don't repeat any we have already seen.  */\n       if (multi_dir)\n \t{\n-\t  free ((char *) multi_dir);\n+\t  free (CONST_CAST (multi_dir));\n \t  multi_dir = NULL;\n-\t  free ((char *) multi_suffix);\n+\t  free (CONST_CAST (multi_suffix));\n \t  multi_suffix = machine_suffix;\n-\t  free ((char *) just_multi_suffix);\n+\t  free (CONST_CAST (just_multi_suffix));\n \t  just_multi_suffix = just_machine_suffix;\n \t}\n       else\n \tskip_multi_dir = true;\n       if (multi_os_dir)\n \t{\n-\t  free ((char *) multi_os_dir);\n+\t  free (CONST_CAST (multi_os_dir));\n \t  multi_os_dir = NULL;\n \t}\n       else\n@@ -2556,12 +2556,12 @@ for_each_path (const struct path_prefix *paths,\n \n   if (multi_dir)\n     {\n-      free ((char *) multi_dir);\n-      free ((char *) multi_suffix);\n-      free ((char *) just_multi_suffix);\n+      free (CONST_CAST (multi_dir));\n+      free (CONST_CAST (multi_suffix));\n+      free (CONST_CAST (just_multi_suffix));\n     }\n   if (multi_os_dir)\n-    free ((char *) multi_os_dir);\n+    free (CONST_CAST (multi_os_dir));\n   if (ret != path)\n     free (path);\n   return ret;\n@@ -2968,7 +2968,7 @@ execute (void)\n       errmsg = pex_run (pex,\n \t\t\t((i + 1 == n_commands ? PEX_LAST : 0)\n \t\t\t | (string == commands[i].prog ? PEX_SEARCH : 0)),\n-\t\t\tstring, (char * const *) commands[i].argv,\n+\t\t\tstring, (char * const *) CONST_CAST (commands[i].argv),\n \t\t\tNULL, NULL, &err);\n       if (errmsg != NULL)\n \t{\n@@ -2982,7 +2982,7 @@ execute (void)\n \t}\n \n       if (string != commands[i].prog)\n-\tfree ((void *) string);\n+\tfree (CONST_CAST (string));\n     }\n \n   execution_count++;\n@@ -5023,7 +5023,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n                   for (i = 0, j = 0; i < max; i++)\n                     if (outfiles[i])\n                       {\n-                        argv[j] = (char *) outfiles[i];\n+                        argv[j] = (char *) CONST_CAST (outfiles[i]);\n                         j++;\n                       }\n                   argv[j] = NULL;\n@@ -5979,13 +5979,13 @@ give_switch (int switchnum, int omit_first_word)\n \t      while (length-- && !IS_DIR_SEPARATOR (arg[length]))\n \t\tif (arg[length] == '.')\n \t\t  {\n-\t\t    ((char *)arg)[length] = 0;\n+\t\t    ((char *)CONST_CAST(arg))[length] = 0;\n \t\t    dot = 1;\n \t\t    break;\n \t\t  }\n \t      do_spec_1 (arg, 1, NULL);\n \t      if (dot)\n-\t\t((char *)arg)[length] = '.';\n+\t\t((char *)CONST_CAST(arg))[length] = '.';\n \t      do_spec_1 (suffix_subst, 1, NULL);\n \t    }\n \t  else\n@@ -7438,7 +7438,7 @@ set_multilib_dir (void)\n   if (multilib_dir == NULL && multilib_os_dir != NULL\n       && strcmp (multilib_os_dir, \".\") == 0)\n     {\n-      free ((char *) multilib_os_dir);\n+      free (CONST_CAST (multilib_os_dir));\n       multilib_os_dir = NULL;\n     }\n   else if (multilib_dir != NULL && multilib_os_dir == NULL)"}, {"sha": "4d546f3ac9bd2a4cda8ac02e3bb96290175ca19a", "filename": "gcc/gengtype-parse.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fgengtype-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fgengtype-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype-parse.c?ref=68a57691dc5d712bff5c70691dd90c0c670022d0", "patch": "@@ -197,9 +197,9 @@ string_seq (void)\n \n       l1 = strlen (s1);\n       l2 = strlen (s2);\n-      buf = XRESIZEVEC (char, s1, l1 + l2 + 1);\n+      buf = XRESIZEVEC (char, CONST_CAST(s1), l1 + l2 + 1);\n       memcpy (buf + l1, s2, l2 + 1);\n-      XDELETE (s2);\n+      XDELETE (CONST_CAST (s2));\n       s1 = buf;\n     }\n   return s1;\n@@ -221,8 +221,8 @@ typedef_name (void)\n       c2 = require (ID);\n       require (')');\n       r = concat (\"VEC_\", c1, \"_\", c2, (char *)0);\n-      free ((void *)c1);\n-      free ((void *)c2);\n+      free (CONST_CAST (c1));\n+      free (CONST_CAST (c2));\n       return r;\n     }\n   else"}, {"sha": "93428ad317cbc4b5dbf5f4cfbcf0c8e99be3306c", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=68a57691dc5d712bff5c70691dd90c0c670022d0", "patch": "@@ -1,3 +1,8 @@\n+2007-08-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* jcf-parse.c (read_class, java_parse_file): Use CONST_CAST.\n+\t* jcf.h (JCF_FINISH): Likewise.\n+\n 2007-07-31  Nick Clifton  <nickc@redhat.com>\n \n \t* java-gimplify.c: Change copyright header to refer to version 3"}, {"sha": "c31645fe00aa5263307d999361aca594a24f03f6", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=68a57691dc5d712bff5c70691dd90c0c670022d0", "patch": "@@ -1301,7 +1301,7 @@ read_class (tree name)\n       if (path_name == 0)\n \treturn 0;\n       else\n-\tfree((char *) path_name);\n+\tfree(CONST_CAST (path_name));\n     }\n \n   current_jcf = jcf;\n@@ -1783,7 +1783,7 @@ java_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n       file_list = list;\n     }\n   else\n-    list = (char *) main_input_filename;\n+    list = (char *) CONST_CAST (main_input_filename);\n \n   while (list)\n     {"}, {"sha": "af9dadd98fbf5878f08eca327a514fb87323d6af", "filename": "gcc/java/jcf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fjava%2Fjcf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fjava%2Fjcf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf.h?ref=68a57691dc5d712bff5c70691dd90c0c670022d0", "patch": "@@ -164,8 +164,8 @@ typedef struct JCF GTY(()) {\n #define JCF_FINISH(JCF) { \\\n   CPOOL_FINISH(&(JCF)->cpool); \\\n   if ((JCF)->buffer) free ((JCF)->buffer); \\\n-  if ((JCF)->filename) free ((char *) (JCF)->filename); \\\n-  if ((JCF)->classname) free ((char *) (JCF)->classname); \\\n+  if ((JCF)->filename) free (CONST_CAST ((JCF)->filename)); \\\n+  if ((JCF)->classname) free (CONST_CAST ((JCF)->classname)); \\\n   (JCF)->finished = 1; }\n   \n #define CPOOL_INIT(CPOOL) \\"}, {"sha": "2d26a9031c9a53131b22ad7852b0beb74ec5dac5", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=68a57691dc5d712bff5c70691dd90c0c670022d0", "patch": "@@ -1147,7 +1147,7 @@ execute_one_pass (struct tree_opt_pass *pass)\n   /* Flush and close dump file.  */\n   if (dump_file_name)\n     {\n-      free ((char *) dump_file_name);\n+      free (CONST_CAST (dump_file_name));\n       dump_file_name = NULL;\n     }\n "}, {"sha": "07d8782b4ea946fe8597a15929c8ea8ee8746a92", "filename": "gcc/prefix.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fprefix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fprefix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprefix.c?ref=68a57691dc5d712bff5c70691dd90c0c670022d0", "patch": "@@ -266,7 +266,7 @@ update_path (const char *path, const char *key)\n \n       result = concat (key, &path[len], NULL);\n       if (free_key)\n-\tfree ((char *) key);\n+\tfree (CONST_CAST (key));\n       result = translate_name (result);\n     }\n   else"}, {"sha": "2b04dc72295776bb0142df828fb778107340344b", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=68a57691dc5d712bff5c70691dd90c0c670022d0", "patch": "@@ -633,7 +633,7 @@ pp_base_destroy_prefix (pretty_printer *pp)\n {\n   if (pp->prefix != NULL)\n     {\n-      free ((char *) pp->prefix);\n+      free (CONST_CAST (pp->prefix));\n       pp->prefix = NULL;\n     }\n }"}, {"sha": "46da3817d80c940315d76ee43b7d90f6d7909c35", "filename": "gcc/system.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=68a57691dc5d712bff5c70691dd90c0c670022d0", "patch": "@@ -766,4 +766,18 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \n #endif /* GCC >= 3.0 */\n \n+/* This macro allows casting away const-ness to pass -Wcast-qual\n+   warnings.  DO NOT USE THIS UNLESS YOU REALLY HAVE TO!  It should\n+   only be used in certain specific cases.  One valid case is where\n+   the C standard definitions or prototypes force you to.  E.g. if you\n+   need to free a const object, or if you pass a const string to\n+   execv, et al.  Another valid use would be in an allocation function\n+   that creates const objects that need to be initialized.  Most other\n+   cases should be viewed with extreme caution.  */\n+#ifdef __GNUC__\n+#define CONST_CAST(X) ((__extension__(union {__typeof(X)_q; void *_v;})(X))._v)\n+#else\n+#define CONST_CAST(X) ((void*)(X))\n+#endif\n+\n #endif /* ! GCC_SYSTEM_H */"}, {"sha": "3ca006e687f9a4a9c919410294caedb63e721edb", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68a57691dc5d712bff5c70691dd90c0c670022d0/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=68a57691dc5d712bff5c70691dd90c0c670022d0", "patch": "@@ -1194,8 +1194,8 @@ build_string (int len, const char *str)\n   TREE_CONSTANT (s) = 1;\n   TREE_INVARIANT (s) = 1;\n   TREE_STRING_LENGTH (s) = len;\n-  memcpy ((char *) TREE_STRING_POINTER (s), str, len);\n-  ((char *) TREE_STRING_POINTER (s))[len] = '\\0';\n+  memcpy (CONST_CAST (TREE_STRING_POINTER (s)), str, len);\n+  ((char *) CONST_CAST (TREE_STRING_POINTER (s)))[len] = '\\0';\n \n   return s;\n }"}]}