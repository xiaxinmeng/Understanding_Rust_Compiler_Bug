{"sha": "01704e5ad985b1f79c2d02dc59ccf94d5af2c5da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE3MDRlNWFkOTg1YjFmNzljMmQwMmRjNTljY2Y5NGQ1YWYyYzVkYQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2015-12-17T09:23:08Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2015-12-17T09:23:08Z"}, "message": "Only support -gstabs on Mac OS X if assember supports it (PR target/67973)\n\n\tgcc:\n\tPR target/67973\n\t* configure.ac (gcc_cv_as_stabs_directive): New test.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\t* config/darwin.h (DBX_DEBUGGING_INFO): Wrap in\n\tHAVE_AS_STABS_DIRECTIVE.\n\t(PREFERRED_DEBUGGING_TYPE): Likewise.\n\t* config/i386/darwin.h (PREFERRED_DEBUGGING_TYPE): Only include\n\tDBX_DEBUG if HAVE_AS_STABS_DIRECTIVE.\n\n\t* doc/sourcebuild.texi (Effective-Target Keywords, Environment\n\tattributes): Document stabs.\n\n\tgcc/testsuite:\n\tPR target/67973\n\t* lib/target-supports.exp (check_effective_target_stabs): New\n\tproc.\n\t* g++.dg/cpp0x/alias-decl-debug-0.C: Restrict to stabs targets.\n\t* g++.dg/other/PR23205.C: Likewise.\n\t* g++.dg/other/pr23205-2.C: Likewise.\n\t* gcc.dg/20040813-1.c: Likewise.\n\t* gcc.dg/darwin-20040809-2.c: Likewise.\n\t* objc.dg/stabs-1.m: Likewise.\n\nFrom-SVN: r231747", "tree": {"sha": "386a71d903e0a9b7ad0c6b9afeabe836fa999010", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/386a71d903e0a9b7ad0c6b9afeabe836fa999010"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "761f6ae919c2ae800acd23a8a99b50a71889e71d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/761f6ae919c2ae800acd23a8a99b50a71889e71d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/761f6ae919c2ae800acd23a8a99b50a71889e71d"}], "stats": {"total": 109, "additions": 95, "deletions": 14}, "files": [{"sha": "0204cc464955f1ed6b084f6fe4085a83c65b6625", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01704e5ad985b1f79c2d02dc59ccf94d5af2c5da", "patch": "@@ -1,3 +1,18 @@\n+2015-12-17  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR target/67973\n+\t* configure.ac (gcc_cv_as_stabs_directive): New test.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\t* config/darwin.h (DBX_DEBUGGING_INFO): Wrap in\n+\tHAVE_AS_STABS_DIRECTIVE.\n+\t(PREFERRED_DEBUGGING_TYPE): Likewise.\n+\t* config/i386/darwin.h (PREFERRED_DEBUGGING_TYPE): Only include\n+\tDBX_DEBUG if HAVE_AS_STABS_DIRECTIVE.\n+\n+\t* doc/sourcebuild.texi (Effective-Target Keywords, Environment\n+\tattributes): Document stabs.\n+\n 2015-12-16  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/68868"}, {"sha": "c00cd0f4bd2df23c04c5240b819fc7dbabca0f61", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=01704e5ad985b1f79c2d02dc59ccf94d5af2c5da", "patch": "@@ -636,6 +636,12 @@\n #endif\n \n \n+/* Define if your assembler supports .stabs. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_STABS_DIRECTIVE\n+#endif\n+\n+\n /* Define if your assembler and linker support thread-local storage. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_TLS"}, {"sha": "32d4c45d63a53387ce783bd3783be5a3334933b0", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=01704e5ad985b1f79c2d02dc59ccf94d5af2c5da", "patch": "@@ -400,12 +400,13 @@ extern GTY(()) int darwin_ms_struct;\n \n #define ASM_DEBUG_SPEC  \"%{g*:%{!g0:%{!gdwarf*:--gstabs}}}\"\n \n-/* We still allow output of STABS.  */\n-\n+/* We still allow output of STABS if the assembler supports it.  */\n+#ifdef HAVE_AS_STABS_DIRECTIVE\n #define DBX_DEBUGGING_INFO 1\n+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+#endif\n \n #define DWARF2_DEBUGGING_INFO 1\n-#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n \n #define DEBUG_FRAME_SECTION\t\"__DWARF,__debug_frame,regular,debug\"\n #define DEBUG_INFO_SECTION\t\"__DWARF,__debug_info,regular,debug\""}, {"sha": "f29598943e96646f64bfd41cd9ad4c78ce202cab", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=01704e5ad985b1f79c2d02dc59ccf94d5af2c5da", "patch": "@@ -226,7 +226,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n    compiles default to stabs+.  darwin9+ defaults to dwarf-2.  */\n #ifndef DARWIN_PREFER_DWARF\n #undef PREFERRED_DEBUGGING_TYPE\n+#ifdef HAVE_AS_STABS_DIRECTIVE\n #define PREFERRED_DEBUGGING_TYPE (TARGET_64BIT ? DWARF2_DEBUG : DBX_DEBUG)\n+#else\n+#define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n+#endif\n #endif\n \n /* Darwin uses the standard DWARF register numbers but the default"}, {"sha": "31407efff91b155c9d50629363c99d4804ebaad5", "filename": "gcc/configure", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=01704e5ad985b1f79c2d02dc59ccf94d5af2c5da", "patch": "@@ -23519,6 +23519,37 @@ cat >>confdefs.h <<_ACEOF\n _ACEOF\n \n \n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for stabs directive\" >&5\n+$as_echo_n \"checking assembler for stabs directive... \" >&6; }\n+if test \"${gcc_cv_as_stabs_directive+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_stabs_directive=no\n+  if test x$gcc_cv_as != x; then\n+    $as_echo '.stabs \"gcc2_compiled.\",60,0,0,0' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags  -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_stabs_directive=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_stabs_directive\" >&5\n+$as_echo \"$gcc_cv_as_stabs_directive\" >&6; }\n+if test $gcc_cv_as_stabs_directive = yes; then\n+\n+$as_echo \"#define HAVE_AS_STABS_DIRECTIVE 1\" >>confdefs.h\n+\n+fi\n+\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for COMDAT group support (GNU as)\" >&5\n $as_echo_n \"checking assembler for COMDAT group support (GNU as)... \" >&6; }\n if test \"${gcc_cv_as_comdat_group+set}\" = set; then :"}, {"sha": "67c05264944f12544429ac97cbebed1d5ceb074b", "filename": "gcc/configure.ac", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=01704e5ad985b1f79c2d02dc59ccf94d5af2c5da", "patch": "@@ -2909,6 +2909,11 @@ AC_DEFINE_UNQUOTED(HAVE_GAS_SHF_MERGE,\n   [`if test $gcc_cv_as_shf_merge = yes; then echo 1; else echo 0; fi`],\n [Define 0/1 if your assembler supports marking sections with SHF_MERGE flag.])\n \n+gcc_GAS_CHECK_FEATURE([stabs directive], gcc_cv_as_stabs_directive, ,,\n+[.stabs \"gcc2_compiled.\",60,0,0,0],,\n+[AC_DEFINE(HAVE_AS_STABS_DIRECTIVE, 1,\n+  [Define if your assembler supports .stabs.])])\n+\n gcc_GAS_CHECK_FEATURE([COMDAT group support (GNU as)],\n  gcc_cv_as_comdat_group,\n  [elf,2,16,0], [--fatal-warnings],"}, {"sha": "a0debc8e799283cf9a289f6c3dbc4a2c495733ae", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=01704e5ad985b1f79c2d02dc59ccf94d5af2c5da", "patch": "@@ -1833,6 +1833,9 @@ time) should be run on this target.  This can be enabled by setting the\n Test system runs executables on a simulator (i.e. slowly) rather than\n hardware (i.e. fast).\n \n+@item stabs\n+Target supports the stabs debugging format.\n+\n @item stdint_types\n Target has the basic signed and unsigned C types in @code{stdint.h}.\n This will be obsolete when GCC ensures a working @code{stdint.h} for"}, {"sha": "054bdf790f93b08adc1b93b06de527e6a052ed5b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=01704e5ad985b1f79c2d02dc59ccf94d5af2c5da", "patch": "@@ -1,3 +1,15 @@\n+2015-12-17  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR target/67973\n+\t* lib/target-supports.exp (check_effective_target_stabs): New\n+\tproc.\n+\t* g++.dg/cpp0x/alias-decl-debug-0.C: Restrict to stabs targets.\n+\t* g++.dg/other/PR23205.C: Likewise.\n+\t* g++.dg/other/pr23205-2.C: Likewise.\n+\t* gcc.dg/20040813-1.c: Likewise.\n+\t* gcc.dg/darwin-20040809-2.c: Likewise.\n+\t* objc.dg/stabs-1.m: Likewise.\n+\n 2015-12-17  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gcc.target/arc/jump-around-jump.c (rtc_set_time): Declare."}, {"sha": "8464aa35a1a011c0b5f5d954d31066e28e84766a", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-debug-0.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-debug-0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-debug-0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-debug-0.C?ref=01704e5ad985b1f79c2d02dc59ccf94d5af2c5da", "patch": "@@ -1,6 +1,5 @@\n // Origin: PR c++/51032\n-// { dg-do compile { target c++11 } }\n-// { dg-skip-if \"No stabs\" { aarch64*-*-* mmix-*-* *-*-aix* alpha*-*-* hppa*64*-*-* ia64-*-* *-*-vxworks* nios2-*-* } { \"*\" } { \"\" } }\n+// { dg-do compile { target { c++11 && stabs } } }\n // { dg-options \"-gstabs+\" }\n \n template <class C>"}, {"sha": "65ba1f6f30603503502dbbace63d78f593f81676", "filename": "gcc/testsuite/g++.dg/other/PR23205.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2FPR23205.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2FPR23205.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2FPR23205.C?ref=01704e5ad985b1f79c2d02dc59ccf94d5af2c5da", "patch": "@@ -1,5 +1,4 @@\n-/* { dg-do compile } */\n-/* { dg-skip-if \"No stabs\" { aarch64*-*-* mmix-*-* *-*-aix* alpha*-*-* hppa*64*-*-* ia64-*-* nios2-*-* tile*-*-* *-*-vxworks } { \"*\" } { \"\" } } */\n+/* { dg-do compile { target stabs } } */\n /* { dg-options \"-gstabs+ -fno-eliminate-unused-debug-types\" } */\n \n const int foobar = 4;"}, {"sha": "7b25c071a67a90f03686a2a82af6c16995c89869", "filename": "gcc/testsuite/g++.dg/other/pr23205-2.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr23205-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr23205-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr23205-2.C?ref=01704e5ad985b1f79c2d02dc59ccf94d5af2c5da", "patch": "@@ -1,5 +1,4 @@\n-/* { dg-do compile } */\n-/* { dg-skip-if \"No stabs\" { aarch64*-*-* mmix-*-* *-*-aix* alpha*-*-* hppa*64*-*-* ia64-*-* tile*-*-* nios2-*-* } { \"*\" } { \"\" } } */\n+/* { dg-do compile { target stabs } } */\n /* { dg-options \"-gstabs+ -fno-eliminate-unused-debug-types -ftoplevel-reorder\" } */\n \n const int foobar = 4;"}, {"sha": "9cf664dd769a89064daa9b85dca31e8e107d2ec7", "filename": "gcc/testsuite/gcc.dg/20040813-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Ftestsuite%2Fgcc.dg%2F20040813-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Ftestsuite%2Fgcc.dg%2F20040813-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20040813-1.c?ref=01704e5ad985b1f79c2d02dc59ccf94d5af2c5da", "patch": "@@ -1,8 +1,7 @@\n /* Test lang in N_SO stab.  */\n /* Contributed by Devang Patel  <dpatel@apple.com>  */\n \n-/* { dg-do compile } */\n-/* { dg-skip-if \"No stabs\" { aarch64*-*-* mmix-*-* *-*-aix* alpha*-*-* hppa*64*-*-* ia64-*-* tile*-*-* nios2-*-* *-*-vxworks* nvptx-*-* } { \"*\" } { \"\" } } */\n+/* { dg-do compile { target stabs } } */\n /* { dg-options \"-gstabs\" } */\n \n int"}, {"sha": "98d571276d0a5c120a767527b7e3b74f3a4c8163", "filename": "gcc/testsuite/gcc.dg/darwin-20040809-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-20040809-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-20040809-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-20040809-2.c?ref=01704e5ad985b1f79c2d02dc59ccf94d5af2c5da", "patch": "@@ -1,7 +1,7 @@\n /* Test dead code strip support.  */\n /* Contributed by Devang Patel  <dpatel@apple.com>  */\n \n-/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-do compile { target { *-*-darwin* && stabs } } } */\n /* { dg-options \"-gstabs+ -fno-eliminate-unused-debug-symbols\" } */\n \n int"}, {"sha": "d97d186d8f88644b3de835937c8c65d7c090a39a", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=01704e5ad985b1f79c2d02dc59ccf94d5af2c5da", "patch": "@@ -938,6 +938,15 @@ proc check_effective_target_pthread {} {\n     } \"-pthread\"]\n }\n \n+# Return 1 if compilation with -gstabs is error-free for trivial\n+# code, 0 otherwise.\n+\n+proc check_effective_target_stabs {} {\n+    return [check_no_compiler_messages stabs object {\n+\tvoid foo (void) { }\n+    } \"-gstabs\"]\n+}\n+\n # Return 1 if compilation with -mpe-aligned-commons is error-free\n # for trivial code, 0 otherwise.\n "}, {"sha": "452993ed9165172d89972a5496163524ebd2e21e", "filename": "gcc/testsuite/objc.dg/stabs-1.m", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Ftestsuite%2Fobjc.dg%2Fstabs-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01704e5ad985b1f79c2d02dc59ccf94d5af2c5da/gcc%2Ftestsuite%2Fobjc.dg%2Fstabs-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstabs-1.m?ref=01704e5ad985b1f79c2d02dc59ccf94d5af2c5da", "patch": "@@ -1,8 +1,7 @@\n /* Check if the final SO STABS record goes into the .text section.  */\n /* Contributed by Ziemowit Laski <zlaski@apple.com> */\n \n-/* { dg-do compile } */\n-/* { dg-skip-if \"No stabs\" { mmix-*-* *-*-aix* alpha*-*-* hppa*64*-*-* ia64-*-* } { \"*\" } { \"\" } } */\n+/* { dg-do compile { target stabs } } */\n /* { dg-options \"-gstabs\" } */\n \n @interface MyClass"}]}