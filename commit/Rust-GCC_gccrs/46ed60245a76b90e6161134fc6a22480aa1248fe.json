{"sha": "46ed60245a76b90e6161134fc6a22480aa1248fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZlZDYwMjQ1YTc2YjkwZTYxNjExMzRmYzZhMjI0ODBhYTEyNDhmZQ==", "commit": {"author": {"name": "Charles Baylis", "email": "charles.baylis@linaro.org", "date": "2014-11-20T16:26:54Z"}, "committer": {"name": "Charles Baylis", "email": "cbaylis@gcc.gnu.org", "date": "2014-11-20T16:26:54Z"}, "message": "re PR target/63870 ([Aarch64] [ARM] Errors in use of NEON intrinsics are reported incorrectly)\n\n        PR target/63870\n        * config/aarch64/aarch64-builtins.c (aarch64_simd_expand_args): Pass\n        expression to aarch64_simd_lane_bounds.\n        * config/aarch64/aarch64-protos.h (aarch64_simd_lane_bounds): Update\n        prototype.\n        * config/aarch64/aarch64-simd.md: (aarch64_combinez<mode>): Update\n        call to aarch64_simd_lane_bounds.\n        (aarch64_get_lanedi): Likewise.\n        (aarch64_ld2_lane<mode>): Likewise.\n        (aarch64_ld3_lane<mode>): Likewise.\n        (aarch64_ld4_lane<mode>): Likewise.\n        (aarch64_im_lane_boundsi): Likewise.\n        * config/aarch64/aarch64.c (aarch64_simd_lane_bounds): Add exp\n        parameter. Report calling function in error message if exp is non-NULL.\n\nFrom-SVN: r217885", "tree": {"sha": "97ed69f527fa0c1160d823060b3c24bcd07b3791", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97ed69f527fa0c1160d823060b3c24bcd07b3791"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46ed60245a76b90e6161134fc6a22480aa1248fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46ed60245a76b90e6161134fc6a22480aa1248fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46ed60245a76b90e6161134fc6a22480aa1248fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46ed60245a76b90e6161134fc6a22480aa1248fe/comments", "author": null, "committer": null, "parents": [{"sha": "a6e76bcb09d72e37a9fd538be4568cb3fc175779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6e76bcb09d72e37a9fd538be4568cb3fc175779", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6e76bcb09d72e37a9fd538be4568cb3fc175779"}], "stats": {"total": 44, "additions": 35, "deletions": 9}, "files": [{"sha": "3cbdb6f5376ceab07d254d6aecb519d2fd7cb326", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ed60245a76b90e6161134fc6a22480aa1248fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ed60245a76b90e6161134fc6a22480aa1248fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46ed60245a76b90e6161134fc6a22480aa1248fe", "patch": "@@ -1,3 +1,20 @@\n+2014-11-20  Charles Baylis  <charles.baylis@linaro.org>\n+\n+\tPR target/63870\n+\t* config/aarch64/aarch64-builtins.c (aarch64_simd_expand_args): Pass\n+\texpression to aarch64_simd_lane_bounds.\n+\t* config/aarch64/aarch64-protos.h (aarch64_simd_lane_bounds): Update\n+\tprototype.\n+\t* config/aarch64/aarch64-simd.md: (aarch64_combinez<mode>): Update\n+\tcall to aarch64_simd_lane_bounds.\n+\t(aarch64_get_lanedi): Likewise.\n+\t(aarch64_ld2_lane<mode>): Likewise.\n+\t(aarch64_ld3_lane<mode>): Likewise.\n+\t(aarch64_ld4_lane<mode>): Likewise.\n+\t(aarch64_im_lane_boundsi): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_simd_lane_bounds): Add exp\n+\tparameter. Report calling function in error message if exp is non-NULL.\n+\n 2014-11-20  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR target/60111"}, {"sha": "e9c4c85fd3f1dbbb81d306bbab79409034261dc3", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ed60245a76b90e6161134fc6a22480aa1248fe/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ed60245a76b90e6161134fc6a22480aa1248fe/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=46ed60245a76b90e6161134fc6a22480aa1248fe", "patch": "@@ -909,7 +909,7 @@ aarch64_simd_expand_args (rtx target, int icode, int have_retval,\n \t\t{\n \t\t  enum machine_mode vmode = mode[argc - 1];\n \t\t  aarch64_simd_lane_bounds (op[argc],\n-\t\t\t\t\t    0, GET_MODE_NUNITS (vmode));\n+\t\t\t\t\t    0, GET_MODE_NUNITS (vmode), exp);\n \t\t  /* Keep to GCC-vector-extension lane indices in the RTL.  */\n \t\t  op[argc] = GEN_INT (ENDIAN_LANE_N (vmode, INTVAL (op[argc])));\n \t\t}"}, {"sha": "52e97e745a01933beccecea0a40a51c6f5d2fe97", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ed60245a76b90e6161134fc6a22480aa1248fe/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ed60245a76b90e6161134fc6a22480aa1248fe/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=46ed60245a76b90e6161134fc6a22480aa1248fe", "patch": "@@ -268,7 +268,7 @@ void aarch64_simd_emit_pair_result_insn (machine_mode,\n /* Expand builtins for SIMD intrinsics.  */\n rtx aarch64_simd_expand_builtin (int, tree, rtx);\n \n-void aarch64_simd_lane_bounds (rtx, HOST_WIDE_INT, HOST_WIDE_INT);\n+void aarch64_simd_lane_bounds (rtx, HOST_WIDE_INT, HOST_WIDE_INT, const_tree);\n \n void aarch64_split_128bit_move (rtx, rtx);\n "}, {"sha": "23345b1df1ebb28075edd2effd5f327749abd61d", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ed60245a76b90e6161134fc6a22480aa1248fe/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ed60245a76b90e6161134fc6a22480aa1248fe/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=46ed60245a76b90e6161134fc6a22480aa1248fe", "patch": "@@ -2436,7 +2436,7 @@\n    (match_operand:SI 2 \"immediate_operand\")]\n   \"TARGET_SIMD\"\n {\n-  aarch64_simd_lane_bounds (operands[2], 0, 1);\n+  aarch64_simd_lane_bounds (operands[2], 0, 1, NULL);\n   emit_move_insn (operands[0], operands[1]);\n   DONE;\n })\n@@ -4366,7 +4366,8 @@\n   machine_mode mode = <V_TWO_ELEM>mode;\n   rtx mem = gen_rtx_MEM (mode, operands[1]);\n \n-  aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode));\n+  aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode),\n+\t\t\t    NULL);\n   emit_insn (gen_aarch64_vec_load_lanesoi_lane<mode> (operands[0],\n \t\t\t\t\t\t      mem,\n \t\t\t\t\t\t      operands[2],\n@@ -4385,7 +4386,8 @@\n   machine_mode mode = <V_THREE_ELEM>mode;\n   rtx mem = gen_rtx_MEM (mode, operands[1]);\n \n-  aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode));\n+  aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode),\n+\t\t\t    NULL);\n   emit_insn (gen_aarch64_vec_load_lanesci_lane<mode> (operands[0],\n \t\t\t\t\t\t      mem,\n \t\t\t\t\t\t      operands[2],\n@@ -4404,7 +4406,8 @@\n   machine_mode mode = <V_FOUR_ELEM>mode;\n   rtx mem = gen_rtx_MEM (mode, operands[1]);\n \n-  aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode));\n+  aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode),\n+\t\t\t    NULL);\n   emit_insn (gen_aarch64_vec_load_lanesxi_lane<mode> (operands[0],\n \t\t\t\t\t\t      mem,\n \t\t\t\t\t\t      operands[2],\n@@ -4554,7 +4557,7 @@\n    (match_operand:SI 1 \"immediate_operand\" \"i\")]\n   \"TARGET_SIMD\"\n {\n-  aarch64_simd_lane_bounds (operands[0], 0, INTVAL (operands[1]));\n+  aarch64_simd_lane_bounds (operands[0], 0, INTVAL (operands[1]), NULL);\n   DONE;\n }\n )"}, {"sha": "180951366481ccb78a48eb22c3c2d464d1279408", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ed60245a76b90e6161134fc6a22480aa1248fe/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ed60245a76b90e6161134fc6a22480aa1248fe/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=46ed60245a76b90e6161134fc6a22480aa1248fe", "patch": "@@ -8403,14 +8403,20 @@ aarch64_simd_check_vect_par_cnst_half (rtx op, machine_mode mode,\n /* Bounds-check lanes.  Ensure OPERAND lies between LOW (inclusive) and\n    HIGH (exclusive).  */\n void\n-aarch64_simd_lane_bounds (rtx operand, HOST_WIDE_INT low, HOST_WIDE_INT high)\n+aarch64_simd_lane_bounds (rtx operand, HOST_WIDE_INT low, HOST_WIDE_INT high,\n+\t\t\t  const_tree exp)\n {\n   HOST_WIDE_INT lane;\n   gcc_assert (CONST_INT_P (operand));\n   lane = INTVAL (operand);\n \n   if (lane < low || lane >= high)\n-    error (\"lane %ld out of range %ld - %ld\", lane, low, high - 1);\n+  {\n+    if (exp)\n+      error (\"%Klane %ld out of range %ld - %ld\", exp, lane, low, high - 1);\n+    else\n+      error (\"lane %ld out of range %ld - %ld\", lane, low, high - 1);\n+  }\n }\n \n /* Emit code to place a AdvSIMD pair result in memory locations (with equal"}]}