{"sha": "7bbce9b50302959286381d9177818642bceaf301", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JiY2U5YjUwMzAyOTU5Mjg2MzgxZDkxNzc4MTg2NDJiY2VhZjMwMQ==", "commit": {"author": {"name": "Jim Wilson", "email": "jimw@sifive.com", "date": "2018-05-17T22:37:38Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2018-05-17T22:37:38Z"}, "message": "RISC-V: Optimize switch with sign-extended index.\n\n\tgcc/\n\t* expr.c (do_tablejump): When converting index to Pmode, if we have a\n\tsign extended promoted subreg, and the range does not have the sign bit\n\tset, then do a sign extend.\n\n\t* config/riscv/riscv.c (riscv_extend_comparands): In unsigned QImode\n\ttest, check for sign extended subreg and/or constant operands, and\n\tdo a sign extend in that case.\n\n\tgcc/testsuite/\n\t* gcc.target/riscv/switch-qi.c: New.\n\t* gcc.target/riscv/switch-si.c: New.\n\nFrom-SVN: r260340", "tree": {"sha": "0ce4f20f1d1ab9a42ba1843c8d03e69332f11446", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ce4f20f1d1ab9a42ba1843c8d03e69332f11446"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bbce9b50302959286381d9177818642bceaf301", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bbce9b50302959286381d9177818642bceaf301", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bbce9b50302959286381d9177818642bceaf301", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bbce9b50302959286381d9177818642bceaf301/comments", "author": null, "committer": null, "parents": [{"sha": "4e0684beff1fcd8398425b1fbe237cdbcb34c359", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e0684beff1fcd8398425b1fbe237cdbcb34c359", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e0684beff1fcd8398425b1fbe237cdbcb34c359"}], "stats": {"total": 78, "additions": 74, "deletions": 4}, "files": [{"sha": "cc71c8b12e9fe7a193b406b5c36185acd823b5f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bbce9b50302959286381d9177818642bceaf301/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bbce9b50302959286381d9177818642bceaf301/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7bbce9b50302959286381d9177818642bceaf301", "patch": "@@ -1,3 +1,13 @@\n+2018-05-17  Jim Wilson  <jimw@sifive.com>\n+\n+\t* expr.c (do_tablejump): When converting index to Pmode, if we have a\n+\tsign extended promoted subreg, and the range does not have the sign bit\n+\tset, then do a sign extend.\n+\n+\t* config/riscv/riscv.c (riscv_extend_comparands): In unsigned QImode\n+\ttest, check for sign extended subreg and/or constant operands, and\n+\tdo a sign extend in that case.\n+\n 2018-05-17  Steve Ellcey  <sellcey@cavium.com>\n \n \t* config/aarch64/thunderx2t99.md (thunderx2t99_ls_both): Delete."}, {"sha": "b4975888bbbe0a33ac7b6ade5808fa3c039d990a", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bbce9b50302959286381d9177818642bceaf301/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bbce9b50302959286381d9177818642bceaf301/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=7bbce9b50302959286381d9177818642bceaf301", "patch": "@@ -2002,8 +2002,18 @@ riscv_extend_comparands (rtx_code code, rtx *op0, rtx *op1)\n   /* Comparisons consider all XLEN bits, so extend sub-XLEN values.  */\n   if (GET_MODE_SIZE (word_mode) > GET_MODE_SIZE (GET_MODE (*op0)))\n     {\n-      /* It is more profitable to zero-extend QImode values.  */\n-      if (unsigned_condition (code) == code && GET_MODE (*op0) == QImode)\n+      /* It is more profitable to zero-extend QImode values.  But not if the\n+\t first operand has already been sign-extended, and the second one is\n+\t is a constant or has already been sign-extended also.  */\n+      if (unsigned_condition (code) == code\n+\t  && (GET_MODE (*op0) == QImode\n+\t      && ! (GET_CODE (*op0) == SUBREG\n+\t\t    && SUBREG_PROMOTED_VAR_P (*op0)\n+\t\t    && SUBREG_PROMOTED_SIGNED_P (*op0)\n+\t\t    && (CONST_INT_P (*op1)\n+\t\t\t|| (GET_CODE (*op1) == SUBREG\n+\t\t\t    && SUBREG_PROMOTED_VAR_P (*op1)\n+\t\t\t    && SUBREG_PROMOTED_SIGNED_P (*op1))))))\n \t{\n \t  *op0 = gen_rtx_ZERO_EXTEND (word_mode, *op0);\n \t  if (CONST_INT_P (*op1))"}, {"sha": "00a802c2ad09d44e4d49112f5e7626cb5e7d03ee", "filename": "gcc/expr.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bbce9b50302959286381d9177818642bceaf301/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bbce9b50302959286381d9177818642bceaf301/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=7bbce9b50302959286381d9177818642bceaf301", "patch": "@@ -11782,11 +11782,26 @@ do_tablejump (rtx index, machine_mode mode, rtx range, rtx table_label,\n     emit_cmp_and_jump_insns (index, range, GTU, NULL_RTX, mode, 1,\n \t\t\t     default_label, default_probability);\n \n-\n   /* If index is in range, it must fit in Pmode.\n      Convert to Pmode so we can index with it.  */\n   if (mode != Pmode)\n-    index = convert_to_mode (Pmode, index, 1);\n+    {\n+      unsigned int width;\n+\n+      /* We know the value of INDEX is between 0 and RANGE.  If we have a\n+\t sign-extended subreg, and RANGE does not have the sign bit set, then\n+\t we have a value that is valid for both sign and zero extension.  In\n+\t this case, we get better code if we sign extend.  */\n+      if (GET_CODE (index) == SUBREG\n+\t  && SUBREG_PROMOTED_VAR_P (index)\n+\t  && SUBREG_PROMOTED_SIGNED_P (index)\n+\t  && ((width = GET_MODE_PRECISION (as_a <scalar_int_mode> (mode)))\n+\t      <= HOST_BITS_PER_WIDE_INT)\n+\t  && ! (UINTVAL (range) & (HOST_WIDE_INT_1U << (width - 1))))\n+\tindex = convert_to_mode (Pmode, index, 0);\n+      else\n+\tindex = convert_to_mode (Pmode, index, 1);\n+    }\n \n   /* Don't let a MEM slip through, because then INDEX that comes\n      out of PIC_CASE_VECTOR_ADDRESS won't be a valid address,"}, {"sha": "7442eb4c9e201c9d39f4ef344f2a77fc95228ead", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bbce9b50302959286381d9177818642bceaf301/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bbce9b50302959286381d9177818642bceaf301/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7bbce9b50302959286381d9177818642bceaf301", "patch": "@@ -1,3 +1,8 @@\n+2018-05-17  Jim Wilson  <jimw@sifive.com>\n+\n+\t* gcc.target/riscv/switch-qi.c: New.\n+\t* gcc.target/riscv/switch-si.c: New.\n+\n 2018-05-17  Pat Haugen  <pthaugen@us.ibm.com>\n \n \tPR target/85698"}, {"sha": "973d09aaaf110cec3708768fc12bab625279d6e7", "filename": "gcc/testsuite/gcc.target/riscv/switch-qi.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bbce9b50302959286381d9177818642bceaf301/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fswitch-qi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bbce9b50302959286381d9177818642bceaf301/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fswitch-qi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fswitch-qi.c?ref=7bbce9b50302959286381d9177818642bceaf301", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { riscv64*-*-* } } } */\n+/* { dg-options \"-march=rv64gc -mabi=lp64 -O2\" } */\n+\n+/* Test for riscv_extend_comparands patch.  */\n+extern void asdf(int);\n+void foo(signed char x) {\n+  switch (x) {\n+  case 0: asdf(10); break;\n+  case 1: asdf(11); break;\n+  case 2: asdf(12); break;\n+  case 3: asdf(13); break;\n+  case 4: asdf(14); break;\n+  }\n+}\n+/* { dg-final { scan-assembler-not \"andi\" } } */"}, {"sha": "de4d68f4d0e969dea5267338fec8bcbfab782d86", "filename": "gcc/testsuite/gcc.target/riscv/switch-si.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bbce9b50302959286381d9177818642bceaf301/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fswitch-si.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bbce9b50302959286381d9177818642bceaf301/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fswitch-si.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fswitch-si.c?ref=7bbce9b50302959286381d9177818642bceaf301", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+/* Test for do_tablejump patch.  */\n+extern void asdf(int);\n+void foo(int x) {\n+  switch (x) {\n+  case 0: asdf(10); break;\n+  case 1: asdf(11); break;\n+  case 2: asdf(12); break;\n+  case 3: asdf(13); break;\n+  case 4: asdf(14); break;\n+  }\n+}\n+/* { dg-final { scan-assembler-not \"srli\" } } */"}]}