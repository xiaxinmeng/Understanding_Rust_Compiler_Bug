{"sha": "86254629b636db579616befde49022f098af8148", "node_id": "C_kwDOANBUbNoAKDg2MjU0NjI5YjYzNmRiNTc5NjE2YmVmZGU0OTAyMmYwOThhZjgxNDg", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-09-22T12:35:26Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-09-22T12:35:26Z"}, "message": "c: fix uninitialized c_expr::m_decimal [PR106830]\n\nI added c_expr::m_decimal in r13-2386-gbedfca647a9e9c1a as part of the\nimplementation of -Wxor-used-as-pow, but I missed various places where\nthe field needed to be initialized.\n\nFixed thusly.\n\ngcc/c-family/ChangeLog:\n\tPR c/106830\n\t* c-warn.cc (check_for_xor_used_as_pow): Don't try checking\n\tvalues that don't fit in uhwi.\n\ngcc/c/ChangeLog:\n\tPR c/106830\n\t* c-parser.cc (c_parser_initelt): Initialize m_decimal.\n\t(c_parser_cast_expression): Likewise.\n\t(c_parser_alignof_expression): Likewise.\n\t(c_parser_postfix_expression_after_paren_type): Likewise.\n\t(c_parser_postfix_expression_after_primary): Likewise.\n\t(c_parser_expression): Likewise.\n\t(c_parser_omp_variable_list): Likewise.\n\t(c_parser_transaction_expression): Likewise.\n\t* c-tree.h (c_expr::set_error): Likewise.\n\t* c-typeck.cc (c_expr_sizeof_expr): Likewise.\n\t(parser_build_unary_op): Likewise.\n\t(parser_build_binary_op): Likewise.\n\t(digest_init): Likewise.\n\t(pop_init_level): Likewise.\n\t* gimple-parser.cc (c_parser_gimple_call_internal): Likewise.\n\ngcc/testsuite/ChangeLog:\n\tPR c/106830\n\t* gcc.dg/Wxor-used-as-pow-pr106830.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "a4b54ac73c403e0bcacf3e7d9bf9c232da7e005d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4b54ac73c403e0bcacf3e7d9bf9c232da7e005d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86254629b636db579616befde49022f098af8148", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86254629b636db579616befde49022f098af8148", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86254629b636db579616befde49022f098af8148", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86254629b636db579616befde49022f098af8148/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9baee6181b4e427e0b5ba417e51424c15858dce7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9baee6181b4e427e0b5ba417e51424c15858dce7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9baee6181b4e427e0b5ba417e51424c15858dce7"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "6742f447ff58424a32ec1640d95306fdac1f2adb", "filename": "gcc/c-family/c-warn.cc", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86254629b636db579616befde49022f098af8148/gcc%2Fc-family%2Fc-warn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86254629b636db579616befde49022f098af8148/gcc%2Fc-family%2Fc-warn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.cc?ref=86254629b636db579616befde49022f098af8148", "patch": "@@ -3809,12 +3809,9 @@ check_for_xor_used_as_pow (location_t lhs_loc, tree lhs_val,\n \t\t\t   location_t operator_loc,\n \t\t\t   tree rhs_val)\n {\n-  /* Only complain if both args are non-negative integer constants.  */\n-  if (!(TREE_CODE (lhs_val) == INTEGER_CST\n-\t&& tree_int_cst_sgn (lhs_val) >= 0))\n-    return;\n-  if (!(TREE_CODE (rhs_val) == INTEGER_CST\n-\t&& tree_int_cst_sgn (rhs_val) >= 0))\n+  /* Only complain if both args are non-negative integer constants that fit\n+     in uhwi.  */\n+  if (!tree_fits_uhwi_p (lhs_val) || !tree_fits_uhwi_p (rhs_val))\n     return;\n \n   /* Only complain if the LHS is 2 or 10.  */"}, {"sha": "bce79d3e61a548e64283e4d7944fbbcf4d82c805", "filename": "gcc/c/c-parser.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86254629b636db579616befde49022f098af8148/gcc%2Fc%2Fc-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86254629b636db579616befde49022f098af8148/gcc%2Fc%2Fc-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.cc?ref=86254629b636db579616befde49022f098af8148", "patch": "@@ -5464,6 +5464,7 @@ c_parser_initelt (c_parser *parser, struct obstack * braced_init_obstack)\n \t\t    = objc_build_message_expr (rec, args);\n \t\t  mexpr.original_code = ERROR_MARK;\n \t\t  mexpr.original_type = NULL;\n+\t\t  mexpr.m_decimal = 0;\n \t\t  /* Now parse and process the remainder of the\n \t\t     initializer, starting with this message\n \t\t     expression as a primary-expression.  */\n@@ -8146,6 +8147,7 @@ c_parser_cast_expression (c_parser *parser, struct c_expr *after)\n \tset_c_expr_source_range (&ret, cast_loc, expr.get_finish ());\n       ret.original_code = ERROR_MARK;\n       ret.original_type = NULL;\n+      ret.m_decimal = 0;\n       return ret;\n     }\n   else\n@@ -8464,6 +8466,7 @@ c_parser_alignof_expression (c_parser *parser)\n       ret.original_code = ERROR_MARK;\n       ret.original_type = NULL;\n       set_c_expr_source_range (&ret, start_loc, end_loc);\n+      ret.m_decimal = 0;\n       return ret;\n     }\n   else\n@@ -8483,6 +8486,7 @@ c_parser_alignof_expression (c_parser *parser)\n       ret.original_code = ERROR_MARK;\n       ret.original_type = NULL;\n       set_c_expr_source_range (&ret, start_loc, end_loc);\n+      ret.m_decimal = 0;\n       return ret;\n     }\n }\n@@ -10383,6 +10387,7 @@ c_parser_postfix_expression_after_paren_type (c_parser *parser,\n   expr.value = build_compound_literal (start_loc, type, init.value, non_const,\n \t\t\t\t       alignas_align);\n   set_c_expr_source_range (&expr, init.src_range);\n+  expr.m_decimal = 0;\n   expr.original_code = ERROR_MARK;\n   expr.original_type = NULL;\n   if (type != error_mark_node\n@@ -10597,6 +10602,7 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t  set_c_expr_source_range (&expr, start, finish);\n \t  expr.original_code = ERROR_MARK;\n \t  expr.original_type = NULL;\n+\t  expr.m_decimal = 0;\n \t  break;\n \tcase CPP_OPEN_PAREN:\n \t  /* Function call.  */\n@@ -10645,6 +10651,7 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t    = c_build_function_call_vec (expr_loc, arg_loc, expr.value,\n \t\t\t\t\t exprlist, origtypes);\n \t  set_c_expr_source_range (&expr, start, finish);\n+\t  expr.m_decimal = 0;\n \n \t  expr.original_code = ERROR_MARK;\n \t  if (TREE_CODE (expr.value) == INTEGER_CST\n@@ -10695,6 +10702,7 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t      else\n \t\texpr.original_type = DECL_BIT_FIELD_TYPE (field);\n \t    }\n+\t  expr.m_decimal = 0;\n \t  break;\n \tcase CPP_DEREF:\n \t  /* Structure element reference.  */\n@@ -10736,6 +10744,7 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t      else\n \t\texpr.original_type = DECL_BIT_FIELD_TYPE (field);\n \t    }\n+\t  expr.m_decimal = 0;\n \t  break;\n \tcase CPP_PLUS_PLUS:\n \t  /* Postincrement.  */\n@@ -10806,6 +10815,7 @@ c_parser_expression (c_parser *parser)\n       expr.value = build_compound_expr (loc, expr.value, next.value);\n       expr.original_code = COMPOUND_EXPR;\n       expr.original_type = next.original_type;\n+      expr.m_decimal = 0;\n     }\n   return expr;\n }\n@@ -13256,6 +13266,7 @@ c_parser_omp_variable_list (c_parser *parser,\n \t\t      t_expr.original_code = ERROR_MARK;\n \t\t      t_expr.original_type = NULL;\n \t\t      set_c_expr_source_range (&t_expr, op_loc, op_loc);\n+\t\t      t_expr.m_decimal = 0;\n \t\t      t_expr = convert_lvalue_to_rvalue (op_loc, t_expr,\n \t\t\t\t\t\t\t true, false);\n \t\t      t = build_indirect_ref (op_loc, t_expr.value, RO_ARROW);\n@@ -23566,6 +23577,7 @@ c_parser_transaction_expression (c_parser *parser, enum rid keyword)\n \tTRANSACTION_EXPR_RELAXED (ret.value) = 1;\n       SET_EXPR_LOCATION (ret.value, loc);\n       ret.original_code = TRANSACTION_EXPR;\n+      ret.m_decimal = 0;\n       if (!parens.require_close (parser))\n \t{\n \t  c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, NULL);"}, {"sha": "46a3e8e97098578896593f415a2660c8749c84e6", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86254629b636db579616befde49022f098af8148/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86254629b636db579616befde49022f098af8148/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=86254629b636db579616befde49022f098af8148", "patch": "@@ -164,12 +164,13 @@ struct c_expr\n   }\n \n   /* Set the value to error_mark_node whilst ensuring that src_range\n-     is initialized.  */\n+     and m_decimal are initialized.  */\n   void set_error ()\n   {\n     value = error_mark_node;\n     src_range.m_start = UNKNOWN_LOCATION;\n     src_range.m_finish = UNKNOWN_LOCATION;\n+    m_decimal = 0;\n   }\n };\n "}, {"sha": "b4ef090836d4f450ef7c64a652585069c1284288", "filename": "gcc/c/c-typeck.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86254629b636db579616befde49022f098af8148/gcc%2Fc%2Fc-typeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86254629b636db579616befde49022f098af8148/gcc%2Fc%2Fc-typeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.cc?ref=86254629b636db579616befde49022f098af8148", "patch": "@@ -2994,6 +2994,7 @@ c_expr_sizeof_expr (location_t loc, struct c_expr expr)\n       ret.value = error_mark_node;\n       ret.original_code = ERROR_MARK;\n       ret.original_type = NULL;\n+      ret.m_decimal = 0;\n       pop_maybe_used (false);\n     }\n   else\n@@ -3017,6 +3018,7 @@ c_expr_sizeof_expr (location_t loc, struct c_expr expr)\n       c_last_sizeof_loc = loc;\n       ret.original_code = SIZEOF_EXPR;\n       ret.original_type = NULL;\n+      ret.m_decimal = 0;\n       if (C_TYPE_VARIABLE_SIZE (TREE_TYPE (folded_expr)))\n \t{\n \t  /* sizeof is evaluated when given a vla (C99 6.5.3.4p2).  */\n@@ -3047,6 +3049,7 @@ c_expr_sizeof_type (location_t loc, struct c_type_name *t)\n   c_last_sizeof_loc = loc;\n   ret.original_code = SIZEOF_EXPR;\n   ret.original_type = NULL;\n+  ret.m_decimal = 0;\n   if (type == error_mark_node)\n     {\n       ret.value = error_mark_node;\n@@ -3782,6 +3785,7 @@ parser_build_unary_op (location_t loc, enum tree_code code, struct c_expr arg)\n \n   result.original_code = code;\n   result.original_type = NULL;\n+  result.m_decimal = 0;\n \n   if (reject_gcc_builtin (arg.value))\n     {\n@@ -3844,6 +3848,7 @@ parser_build_binary_op (location_t location, enum tree_code code,\n \t\t\t\t  arg1.value, arg2.value, true);\n   result.original_code = code;\n   result.original_type = NULL;\n+  result.m_decimal = 0;\n \n   if (TREE_CODE (result.value) == ERROR_MARK)\n     {\n@@ -8072,6 +8077,7 @@ digest_init (location_t init_loc, tree type, tree init, tree origtype,\n \t  expr.value = inside_init;\n \t  expr.original_code = (strict_string ? STRING_CST : ERROR_MARK);\n \t  expr.original_type = NULL;\n+\t  expr.m_decimal = 0;\n \t  maybe_warn_string_init (init_loc, type, expr);\n \n \t  if (TYPE_DOMAIN (type) && !TYPE_MAX_VALUE (TYPE_DOMAIN (type)))\n@@ -8936,6 +8942,7 @@ pop_init_level (location_t loc, int implicit,\n   ret.value = NULL_TREE;\n   ret.original_code = ERROR_MARK;\n   ret.original_type = NULL;\n+  ret.m_decimal = 0;\n \n   if (implicit == 0)\n     {"}, {"sha": "5a2da2cfa0e7a6d9a66968ef31c20eeaa2c89497", "filename": "gcc/c/gimple-parser.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86254629b636db579616befde49022f098af8148/gcc%2Fc%2Fgimple-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86254629b636db579616befde49022f098af8148/gcc%2Fc%2Fgimple-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.cc?ref=86254629b636db579616befde49022f098af8148", "patch": "@@ -1332,6 +1332,7 @@ c_parser_gimple_call_internal (gimple_parser &parser)\n \t     exprlist.address ());\n \t  expr.original_code = ERROR_MARK;\n \t  expr.original_type = NULL;\n+\t  expr.m_decimal = 0;\n \t}\n     }\n   return expr;\n@@ -1751,6 +1752,7 @@ c_parser_gimple_postfix_expression_after_primary (gimple_parser &parser,\n \t    finish = c_parser_tokens_buf (parser, 0)->location;\n \t    expr.value = build_array_ref (op_loc, expr.value, idx);\n \t    set_c_expr_source_range (&expr, start, finish);\n+\t    expr.m_decimal = 0;\n \n \t    expr.original_code = ERROR_MARK;\n \t    expr.original_type = NULL;\n@@ -1774,6 +1776,7 @@ c_parser_gimple_postfix_expression_after_primary (gimple_parser &parser,\n \t    expr.value = build_call_array_loc\n \t\t(expr_loc, TREE_TYPE (TREE_TYPE (expr.value)),\n \t\t expr.value, exprlist.length (), exprlist.address ());\n+\t    expr.m_decimal = 0;\n \t    expr.original_code = ERROR_MARK;\n \t    expr.original_type = NULL;\n \t    break;\n@@ -1802,6 +1805,7 @@ c_parser_gimple_postfix_expression_after_primary (gimple_parser &parser,\n \t    expr.value = build_component_ref (op_loc, expr.value, ident,\n \t\t\t\t\t      comp_loc, UNKNOWN_LOCATION);\n \t    set_c_expr_source_range (&expr, start, finish);\n+\t    expr.m_decimal = 0;\n \t    expr.original_code = ERROR_MARK;\n \t    if (TREE_CODE (expr.value) != COMPONENT_REF)\n \t      expr.original_type = NULL;\n@@ -1851,6 +1855,7 @@ c_parser_gimple_postfix_expression_after_primary (gimple_parser &parser,\n \t\t\t\t\t      ident, comp_loc,\n \t\t\t\t\t      expr.get_location ());\n \t    set_c_expr_source_range (&expr, start, finish);\n+\t    expr.m_decimal = 0;\n \t    expr.original_code = ERROR_MARK;\n \t    if (TREE_CODE (expr.value) != COMPONENT_REF)\n \t      expr.original_type = NULL;"}, {"sha": "104897a5f3915ea1b5eb54a6bf20548b9c1ac3f2", "filename": "gcc/testsuite/gcc.dg/Wxor-used-as-pow-pr106830.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86254629b636db579616befde49022f098af8148/gcc%2Ftestsuite%2Fgcc.dg%2FWxor-used-as-pow-pr106830.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86254629b636db579616befde49022f098af8148/gcc%2Ftestsuite%2Fgcc.dg%2FWxor-used-as-pow-pr106830.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWxor-used-as-pow-pr106830.c?ref=86254629b636db579616befde49022f098af8148", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-require-effective-target int128 }\n+   { dg-options \"-Wno-pedantic\" }  */\n+\n+void foo0_u16_0() {\n+  (__int128)(18302628885633695743 << 4) ^ 0; /* { dg-warning \"integer constant is so large that it is unsigned\" } */\n+}"}]}