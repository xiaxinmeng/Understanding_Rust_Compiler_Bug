{"sha": "b8eb43a245a976d1e97f5afecdb0428867c68271", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhlYjQzYTI0NWE5NzZkMWU5N2Y1YWZlY2RiMDQyODg2N2M2ODI3MQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-08-17T11:36:10Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-08-17T11:36:10Z"}, "message": "(fold): Move conversion back outside of COND_EXPR if moving it inside\ndidn't help anything.\n\n(div_and_round_double): Change some more ints to HOST_WIDE_INTs.\n\nFrom-SVN: r1871", "tree": {"sha": "6cccb3efc6ae65fad573ad1d639e46469656000f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cccb3efc6ae65fad573ad1d639e46469656000f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8eb43a245a976d1e97f5afecdb0428867c68271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8eb43a245a976d1e97f5afecdb0428867c68271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8eb43a245a976d1e97f5afecdb0428867c68271", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8eb43a245a976d1e97f5afecdb0428867c68271/comments", "author": null, "committer": null, "parents": [{"sha": "7c046e4eb295e0492e1c0abdead2b127e2e8f29a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c046e4eb295e0492e1c0abdead2b127e2e8f29a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c046e4eb295e0492e1c0abdead2b127e2e8f29a"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "44933bf686916a686c136e214391053fc9d15385", "filename": "gcc/fold-const.c", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eb43a245a976d1e97f5afecdb0428867c68271/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eb43a245a976d1e97f5afecdb0428867c68271/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=b8eb43a245a976d1e97f5afecdb0428867c68271", "patch": "@@ -458,10 +458,10 @@ div_and_round_double (code, uns,\n   short den[MAX_SHORTS], quo[MAX_SHORTS];\n   register int i, j, work;\n   register int carry = 0;\n-  unsigned int lnum = lnum_orig;\n-  int hnum = hnum_orig;\n-  unsigned int lden = lden_orig;\n-  int hden = hden_orig;\n+  unsigned HOST_WIDE_INT lnum = lnum_orig;\n+  HOST_WIDE_INT hnum = hnum_orig;\n+  unsigned HOST_WIDE_INT lden = lden_orig;\n+  HOST_WIDE_INT hden = hden_orig;\n \n   if ((hden == 0) && (lden == 0))\n     abort ();\n@@ -2909,9 +2909,29 @@ fold (expr)\n \treturn build (COMPOUND_EXPR, type, TREE_OPERAND (arg0, 0),\n \t\t      fold (build1 (code, type, TREE_OPERAND (arg0, 1))));\n       else if (TREE_CODE (arg0) == COND_EXPR)\n-\treturn fold (build (COND_EXPR, type, TREE_OPERAND (arg0, 0),\n-\t\t\t    fold (build1 (code, type, TREE_OPERAND (arg0, 1))),\n-\t\t\t    fold (build1 (code, type, TREE_OPERAND (arg0, 2)))));\n+\t{\n+\t  t = fold (build (COND_EXPR, type, TREE_OPERAND (arg0, 0),\n+\t\t\t   fold (build1 (code, type, TREE_OPERAND (arg0, 1))),\n+\t\t\t   fold (build1 (code, type, TREE_OPERAND (arg0, 2)))));\n+\n+\t  /* If this was a conversion, and all we did was to move into\n+\t     inside the COND_EXPR, bring it back out.  Then return so we\n+\t     don't get into an infinite recursion loop taking the conversion\n+\t     out and then back in.  */\n+\n+\t  if ((code == NOP_EXPR || code == CONVERT_EXPR\n+\t       || code == NON_LVALUE_EXPR)\n+\t      && TREE_CODE (t) == COND_EXPR\n+\t      && TREE_CODE (TREE_OPERAND (t, 1)) == code\n+\t      && TREE_CODE (TREE_OPERAND (t, 2)) == code)\n+\t    t = build1 (code, type,\n+\t\t\tbuild (COND_EXPR,\n+\t\t\t       TREE_TYPE (TREE_OPERAND (TREE_OPERAND (t, 1), 0)),\n+\t\t\t       TREE_OPERAND (t, 0),\n+\t\t\t       TREE_OPERAND (TREE_OPERAND (t, 1), 0),\n+\t\t\t       TREE_OPERAND (TREE_OPERAND (t, 2), 0)));\n+\t  return t;\n+\t}\n       else if (TREE_CODE_CLASS (TREE_CODE (arg0)) == '<') \n \treturn fold (build (COND_EXPR, type, arg0,\n \t\t\t    fold (build1 (code, type, integer_one_node)),"}]}