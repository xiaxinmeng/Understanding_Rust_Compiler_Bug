{"sha": "c65cb8d1f07920e911d13e551476e28d204e8daa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY1Y2I4ZDFmMDc5MjBlOTExZDEzZTU1MTQ3NmUyOGQyMDRlOGRhYQ==", "commit": {"author": {"name": "Ond\u0159ej B\u00edlka", "email": "neleai@seznam.cz", "date": "2013-07-21T17:48:42Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2013-07-21T17:48:42Z"}, "message": "class.c: Fix typos.\n\n2013-07-21   Ond\u00c5\u0099ej B\u00c3\u00adlka  <neleai@seznam.cz>\n\n\t* class.c: Fix typos.\n\t* cp-array-notation.c: Likewise.\n\t* cp-objcp-common.c: Likewise.\n\t* decl.c: Likewise.\n\t* init.c: Likewise.\n\t* mangle.c: Likewise.\n\t* parser.c: Likewise.\n\t* pt.c: Likewise.\n\t* semantics.c: Likewise.\n\nFrom-SVN: r201106", "tree": {"sha": "22d726fe8015d7bcb410dddfed8af54da0888188", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22d726fe8015d7bcb410dddfed8af54da0888188"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c65cb8d1f07920e911d13e551476e28d204e8daa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c65cb8d1f07920e911d13e551476e28d204e8daa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c65cb8d1f07920e911d13e551476e28d204e8daa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c65cb8d1f07920e911d13e551476e28d204e8daa/comments", "author": {"login": "neleai", "id": 48067, "node_id": "MDQ6VXNlcjQ4MDY3", "avatar_url": "https://avatars.githubusercontent.com/u/48067?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neleai", "html_url": "https://github.com/neleai", "followers_url": "https://api.github.com/users/neleai/followers", "following_url": "https://api.github.com/users/neleai/following{/other_user}", "gists_url": "https://api.github.com/users/neleai/gists{/gist_id}", "starred_url": "https://api.github.com/users/neleai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neleai/subscriptions", "organizations_url": "https://api.github.com/users/neleai/orgs", "repos_url": "https://api.github.com/users/neleai/repos", "events_url": "https://api.github.com/users/neleai/events{/privacy}", "received_events_url": "https://api.github.com/users/neleai/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "631b20a7fcb5982ae2092198cea18f25d2ed4a5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/631b20a7fcb5982ae2092198cea18f25d2ed4a5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/631b20a7fcb5982ae2092198cea18f25d2ed4a5e"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "8f4d37577fd90f92ac7544fbfef541de93af712c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65cb8d1f07920e911d13e551476e28d204e8daa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65cb8d1f07920e911d13e551476e28d204e8daa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c65cb8d1f07920e911d13e551476e28d204e8daa", "patch": "@@ -1,3 +1,15 @@\n+2013-07-21   Ond\u00c5\u0099ej B\u00c3\u00adlka  <neleai@seznam.cz>\n+\n+\t* class.c: Fix typos.\n+\t* cp-array-notation.c: Likewise.\n+\t* cp-objcp-common.c: Likewise.\n+\t* decl.c: Likewise.\n+\t* init.c: Likewise.\n+\t* mangle.c: Likewise.\n+\t* parser.c: Likewise.\n+\t* pt.c: Likewise.\n+\t* semantics.c: Likewise.\n+\n 2013-07-14  Adam Butcher  <adam@jessamine.co.uk>\n \n \t* semantics.c (build_lambda_expr),"}, {"sha": "f0c515269e2327c77ee93ac26b57842eaa1d0f7e", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65cb8d1f07920e911d13e551476e28d204e8daa/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65cb8d1f07920e911d13e551476e28d204e8daa/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=c65cb8d1f07920e911d13e551476e28d204e8daa", "patch": "@@ -5864,7 +5864,7 @@ layout_class_type (tree t, tree *virtuals_p)\n   /* Maps offsets (represented as INTEGER_CSTs) to a TREE_LIST of\n      types that appear at that offset.  */\n   splay_tree empty_base_offsets;\n-  /* True if the last field layed out was a bit-field.  */\n+  /* True if the last field laid out was a bit-field.  */\n   bool last_field_was_bitfield = false;\n   /* The location at which the next field should be inserted.  */\n   tree *next_field;\n@@ -6829,7 +6829,7 @@ fixed_type_or_null (tree instance, int *nonnull, int *cdtorp)\n    INSTANCE is really a pointer. Return negative if this is a\n    ctor/dtor. There the dynamic type is known, but this might not be\n    the most derived base of the original object, and hence virtual\n-   bases may not be layed out according to this type.\n+   bases may not be laid out according to this type.\n \n    Used to determine whether the virtual function table is needed\n    or not."}, {"sha": "eb6a70d835c7146cfea941143d7c45f204bb6c40", "filename": "gcc/cp/cp-array-notation.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65cb8d1f07920e911d13e551476e28d204e8daa/gcc%2Fcp%2Fcp-array-notation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65cb8d1f07920e911d13e551476e28d204e8daa/gcc%2Fcp%2Fcp-array-notation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-array-notation.c?ref=c65cb8d1f07920e911d13e551476e28d204e8daa", "patch": "@@ -810,7 +810,7 @@ cp_expand_cond_array_notations (tree orig_stmt)\n \t\t\t&no_rank))\n \treturn error_mark_node;\n       /* If the condition has a zero rank, then handle array notations in body\n-\t seperately.  */\n+\t separately.  */\n       if (cond_rank == 0)\n \treturn orig_stmt;\n       if (cond_rank != yes_rank && yes_rank != 0)"}, {"sha": "82f684a1c7baecce22eb3a4aa113973d73bd5035", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65cb8d1f07920e911d13e551476e28d204e8daa/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65cb8d1f07920e911d13e551476e28d204e8daa/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=c65cb8d1f07920e911d13e551476e28d204e8daa", "patch": "@@ -226,7 +226,7 @@ init_shadowed_var_for_decl (void)\n \t\t\t\t\t   tree_decl_map_eq, 0);\n }\n \n-/* Return true if stmt can fall thru.  Used by block_may_fallthru\n+/* Return true if stmt can fall through.  Used by block_may_fallthru\n    default case.  */\n \n bool"}, {"sha": "6fe4fed272aef25d43e89d6f296a8a2d857cc360", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65cb8d1f07920e911d13e551476e28d204e8daa/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65cb8d1f07920e911d13e551476e28d204e8daa/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c65cb8d1f07920e911d13e551476e28d204e8daa", "patch": "@@ -4888,7 +4888,7 @@ layout_var_decl (tree decl)\n   if (type == error_mark_node)\n     return;\n \n-  /* If we haven't already layed out this declaration, do so now.\n+  /* If we haven't already laid out this declaration, do so now.\n      Note that we must not call complete type for an external object\n      because it's type might involve templates that we are not\n      supposed to instantiate yet.  (And it's perfectly valid to say"}, {"sha": "f346d2fbff59c944f6d9ba72ba166347b03bd076", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65cb8d1f07920e911d13e551476e28d204e8daa/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65cb8d1f07920e911d13e551476e28d204e8daa/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=c65cb8d1f07920e911d13e551476e28d204e8daa", "patch": "@@ -2384,7 +2384,7 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n       cookie_size = targetm.cxx.get_cookie_size (elt_type);\n       gcc_assert (TREE_CODE (cookie_size) == INTEGER_CST);\n       gcc_checking_assert (TREE_INT_CST (cookie_size).ult (max_size));\n-      /* Unconditionally substract the cookie size.  This decreases the\n+      /* Unconditionally subtract the cookie size.  This decreases the\n \t maximum object size and is safe even if we choose not to use\n \t a cookie after all.  */\n       max_size -= TREE_INT_CST (cookie_size);"}, {"sha": "68b956bbbd143eeda148f390a113197b5a91d96d", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65cb8d1f07920e911d13e551476e28d204e8daa/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65cb8d1f07920e911d13e551476e28d204e8daa/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=c65cb8d1f07920e911d13e551476e28d204e8daa", "patch": "@@ -1446,7 +1446,7 @@ write_closure_type_name (const tree type)\n /* Convert NUMBER to ascii using base BASE and generating at least\n    MIN_DIGITS characters. BUFFER points to the _end_ of the buffer\n    into which to store the characters. Returns the number of\n-   characters generated (these will be layed out in advance of where\n+   characters generated (these will be laid out in advance of where\n    BUFFER points).  */\n \n static int"}, {"sha": "38eba292c151dc32059638561b51bd1164c1a295", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65cb8d1f07920e911d13e551476e28d204e8daa/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65cb8d1f07920e911d13e551476e28d204e8daa/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c65cb8d1f07920e911d13e551476e28d204e8daa", "patch": "@@ -7204,7 +7204,7 @@ lookup_template_class_1 (tree d1, tree arglist, tree in_decl, tree context,\n       int use_partial_inst_tmpl = false;\n \n       if (template_type == error_mark_node)\n-\t/* An error occured while building the template TEMPL, and a\n+\t/* An error occurred while building the template TEMPL, and a\n \t   diagnostic has most certainly been emitted for that\n \t   already.  Let's propagate that error.  */\n \treturn error_mark_node;"}, {"sha": "f68d3863ab1ef2e0f627eb60f05f6210ac7933b8", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65cb8d1f07920e911d13e551476e28d204e8daa/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65cb8d1f07920e911d13e551476e28d204e8daa/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=c65cb8d1f07920e911d13e551476e28d204e8daa", "patch": "@@ -6478,7 +6478,7 @@ typedef struct GTY(()) constexpr_call {\n   constexpr_fundef *fundef;\n   /* Parameter bindings environment.  A TREE_LIST where each TREE_PURPOSE\n      is a parameter _DECL and the TREE_VALUE is the value of the parameter.\n-     Note: This arrangement is made to accomodate the use of\n+     Note: This arrangement is made to accommodate the use of\n      iterative_hash_template_arg (see pt.c).  If you change this\n      representation, also change the hash calculation in\n      cxx_eval_call_expression.  */\n@@ -6684,7 +6684,7 @@ cxx_bind_parameters_in_call (const constexpr_call *old_call, tree t,\n       tree x, arg;\n       tree type = parms ? TREE_TYPE (parms) : void_type_node;\n       /* For member function, the first argument is a pointer to the implied\n-         object.  And for an object contruction, don't bind `this' before\n+         object.  And for an object construction, don't bind `this' before\n          it is fully constructed.  */\n       if (i == 0 && DECL_CONSTRUCTOR_P (fun))\n         goto next;\n@@ -8385,7 +8385,7 @@ check_automatic_or_tls (tree ref)\n    C++0x [expr.const] used to say\n \n    6 An expression is a potential constant expression if it is\n-     a constant expression where all occurences of function\n+     a constant expression where all occurrences of function\n      parameters are replaced by arbitrary constant expressions\n      of the appropriate type.\n "}]}