{"sha": "a226590fefb35ed66adf73d85cefe49048a78ab8", "node_id": "C_kwDOANBUbNoAKGEyMjY1OTBmZWZiMzVlZDY2YWRmNzNkODVjZWZlNDkwNDhhNzhhYjg", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-03-17T22:25:13Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-03-20T20:54:11Z"}, "message": "c++: explicit ctor and list-initialization [PR109159]\n\nWhen I implemented explicit(bool) in r9-3735, I added this code to\nadd_template_candidate_real:\n+  /* Now the explicit specifier might have been deduced; check if this\n+     declaration is explicit.  If it is and we're ignoring non-converting\n+     constructors, don't add this function to the set of candidates.  */\n+  if ((flags & LOOKUP_ONLYCONVERTING) && DECL_NONCONVERTING_P (fn))\n+    return NULL;\nbut as this test demonstrates, that's incorrect when we're initializing\nfrom a {}: for list-initialization we consider explicit constructors and\ncomplain if one is chosen.\n\n\tPR c++/109159\n\ngcc/cp/ChangeLog:\n\n\t* call.cc (add_template_candidate_real): Add explicit decls to the\n\tset of candidates when the initializer is a braced-init-list.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/20_util/pair/cons/explicit_construct.cc: Adjust dg-error.\n\t* testsuite/20_util/tuple/cons/explicit_construct.cc: Likewise.\n\t* testsuite/23_containers/span/explicit.cc: Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/explicit16.C: New test.", "tree": {"sha": "e28402d0be762f0e62247b7c5978b0f4de753961", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e28402d0be762f0e62247b7c5978b0f4de753961"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a226590fefb35ed66adf73d85cefe49048a78ab8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a226590fefb35ed66adf73d85cefe49048a78ab8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a226590fefb35ed66adf73d85cefe49048a78ab8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a226590fefb35ed66adf73d85cefe49048a78ab8/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a846340b99675d57fc2f2923a0412134eed09d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a846340b99675d57fc2f2923a0412134eed09d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a846340b99675d57fc2f2923a0412134eed09d3"}], "stats": {"total": 94, "additions": 57, "deletions": 37}, "files": [{"sha": "c52a09b9be24b98f655e2979f8c0b6b11e81fdb1", "filename": "gcc/cp/call.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a226590fefb35ed66adf73d85cefe49048a78ab8/gcc%2Fcp%2Fcall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a226590fefb35ed66adf73d85cefe49048a78ab8/gcc%2Fcp%2Fcall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.cc?ref=a226590fefb35ed66adf73d85cefe49048a78ab8", "patch": "@@ -3612,7 +3612,9 @@ add_template_candidate_real (struct z_candidate **candidates, tree tmpl,\n   /* Now the explicit specifier might have been deduced; check if this\n      declaration is explicit.  If it is and we're ignoring non-converting\n      constructors, don't add this function to the set of candidates.  */\n-  if ((flags & LOOKUP_ONLYCONVERTING) && DECL_NONCONVERTING_P (fn))\n+  if (((flags & (LOOKUP_ONLYCONVERTING|LOOKUP_LIST_INIT_CTOR))\n+       == LOOKUP_ONLYCONVERTING)\n+      && DECL_NONCONVERTING_P (fn))\n     return NULL;\n \n   if (DECL_CONSTRUCTOR_P (fn) && nargs == 2)"}, {"sha": "bb5a823aee69f5a236bb74f7ecc088849bbb40ad", "filename": "gcc/testsuite/g++.dg/cpp0x/explicit16.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a226590fefb35ed66adf73d85cefe49048a78ab8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a226590fefb35ed66adf73d85cefe49048a78ab8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit16.C?ref=a226590fefb35ed66adf73d85cefe49048a78ab8", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/109159\n+// { dg-do compile { target c++11 } }\n+\n+struct A {\n+  A(float) {}\n+  template<class U>\n+  explicit A(U) {}\n+};\n+\n+void f(A t)\n+{\n+  t = {1}; // { dg-error \"explicit constructor\" }\n+  t = 1;\n+  A a1{1};\n+  A a2 = {1}; // { dg-error \"explicit constructor\" }\n+  A a3 = 1;\n+  A a4(1);\n+}"}, {"sha": "d550e9c604bf1be04cd6b27d29377e5845b19ae0", "filename": "libstdc++-v3/testsuite/20_util/pair/cons/explicit_construct.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a226590fefb35ed66adf73d85cefe49048a78ab8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcons%2Fexplicit_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a226590fefb35ed66adf73d85cefe49048a78ab8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcons%2Fexplicit_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcons%2Fexplicit_construct.cc?ref=a226590fefb35ed66adf73d85cefe49048a78ab8", "patch": "@@ -37,7 +37,7 @@ struct ExplicitDefaultDefault\n \n std::pair<int, int> f1() {return {1,2};}\n \n-std::pair<Explicit, Explicit> f2() {return {1,2};} // { dg-error \"could not convert\" }\n+std::pair<Explicit, Explicit> f2() {return {1,2};} // { dg-error \"explicit constructor\" }\n \n std::pair<long, long> f3() {return std::pair<int, int>{1,2};}\n \n@@ -52,7 +52,7 @@ std::pair<int, int> v0{1,2};\n \n std::pair<Explicit, Explicit> v1{1,2};\n \n-std::pair<Explicit, Explicit> v2 = {1,2}; // { dg-error \"could not convert\" }\n+std::pair<Explicit, Explicit> v2 = {1,2}; // { dg-error \"explicit constructor\" }\n \n std::pair<Explicit, Explicit> v3{std::pair<int,int>{1,2}};\n \n@@ -99,7 +99,7 @@ void test_arg_passing()\n {\n   f6(v0); // { dg-error \"could not convert\" }\n   f6(v1);\n-  f6({1,2}); // { dg-error \"could not convert\" }\n+  f6({1,2}); // { dg-error \"explicit constructor\" }\n   f6(std::pair<Explicit, Explicit>{});\n   f6(std::pair<int, int>{}); // { dg-error \"could not convert\" }\n   f7(v0);\n@@ -130,6 +130,6 @@ std::pair<int*, ExplicitMoveOnly> v14{nullptr, MoveOnly{}};\n std::pair<ExplicitMoveOnly, int*> v15{MoveOnly{}, nullptr};\n \n std::pair<int*, ExplicitMoveOnly> v16 =\n-  {nullptr, MoveOnly{}}; // { dg-error \"could not convert\" }\n+  {nullptr, MoveOnly{}}; // { dg-error \"explicit constructor\" }\n std::pair<ExplicitMoveOnly, int*> v17 =\n-  {MoveOnly{}, nullptr}; // { dg-error \"could not convert\" }\n+  {MoveOnly{}, nullptr}; // { dg-error \"explicit constructor\" }"}, {"sha": "3352dd15f7d969d7063f45fdfcf5c91b966cd9a3", "filename": "libstdc++-v3/testsuite/20_util/tuple/cons/explicit_construct.cc", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a226590fefb35ed66adf73d85cefe49048a78ab8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fexplicit_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a226590fefb35ed66adf73d85cefe49048a78ab8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fexplicit_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fexplicit_construct.cc?ref=a226590fefb35ed66adf73d85cefe49048a78ab8", "patch": "@@ -45,11 +45,11 @@ std::tuple<int, int> f1b() {return {1,2};}\n std::tuple<int, int, int> f1c() {return {1,2,3};}\n \n std::tuple<Explicit> f2_a()\n-{return {1};} // { dg-error \"could not convert\" }\n+{return {1};} // { dg-error \"explicit constructor\" }\n std::tuple<Explicit, Explicit> f2_b()\n-{return {1,2};} // { dg-error \"could not convert\" }\n+{return {1,2};} // { dg-error \"explicit constructor\" }\n std::tuple<Explicit, Explicit, Explicit> f2_c()\n-{return {1,2,3};} // { dg-error \"could not convert\" }\n+{return {1,2,3};} // { dg-error \"explicit constructor\" }\n \n std::tuple<long> f3_a() {return std::tuple<int>{1};}\n std::tuple<long, long> f3_b() {return std::tuple<int, int>{1,2};}\n@@ -73,22 +73,22 @@ std::tuple<long, long> f5_b() {return {1,2};}\n std::tuple<long, long, long> f5_c() {return {1,2,3};}\n \n std::tuple<ExplicitDefault> f6_a()\n-{return {};} // { dg-error \"could not convert\" }\n+{return {};} // { dg-error \"explicit constructor\" }\n std::tuple<ExplicitDefault, ExplicitDefault> f6_b()\n-{return {};} // { dg-error \"could not convert\" }\n+{return {};} // { dg-error \"explicit constructor\" }\n std::tuple<ExplicitDefault, ExplicitDefault, ExplicitDefault> f6_c()\n-{return {};} // { dg-error \"could not convert\" }\n+{return {};} // { dg-error \"explicit constructor\" }\n std::tuple<ExplicitDefault, int> f6_d()\n-{return {};} // { dg-error \"could not convert\" }\n+{return {};} // { dg-error \"explicit constructor\" }\n \n std::tuple<ExplicitDefaultDefault> f7_a()\n-{return {};} // { dg-error \"could not convert\" }\n+{return {};} // { dg-error \"explicit constructor\" }\n std::tuple<ExplicitDefaultDefault, ExplicitDefaultDefault> f7_b()\n-{return {};} // { dg-error \"could not convert\" }\n+{return {};} // { dg-error \"explicit constructor\" }\n std::tuple<ExplicitDefaultDefault,\n            ExplicitDefaultDefault,\n            ExplicitDefaultDefault> f7_c()\n-{return {};} // { dg-error \"could not convert\" }\n+{return {};} // { dg-error \"explicit constructor\" }\n \n std::tuple<int, int> fp1() {return std::pair<int, int>{1,2}; }\n std::tuple<long, long> fp2() {return std::pair<int, int>{1,2}; }\n@@ -103,9 +103,9 @@ std::tuple<Explicit> v1_a{1};\n std::tuple<Explicit, Explicit> v1_b{1,2};\n std::tuple<Explicit, Explicit, Explicit> v1_c{1,2,3};\n \n-std::tuple<Explicit> v2_a = {1}; // { dg-error \"could not convert\" }\n-std::tuple<Explicit, Explicit> v2_b = {1,2}; // { dg-error \"could not convert\" }\n-std::tuple<Explicit, Explicit, Explicit> v2_c = {1,2,3}; // { dg-error \"could not convert\" }\n+std::tuple<Explicit> v2_a = {1}; // { dg-error \"explicit constructor\" }\n+std::tuple<Explicit, Explicit> v2_b = {1,2}; // { dg-error \"explicit constructor\" }\n+std::tuple<Explicit, Explicit, Explicit> v2_c = {1,2,3}; // { dg-error \"explicit constructor\" }\n \n std::tuple<Explicit> v3_a{std::tuple<int>{1}};\n std::tuple<Explicit, Explicit> v3_b{std::tuple<int,int>{1,2}};\n@@ -196,11 +196,11 @@ std::tuple<long, long, long>\n   v31_c{std::allocator_arg, std::allocator<int>{}, 1,2,3};\n \n std::tuple<Explicit> v32_a\n-  = {std::allocator_arg, std::allocator<int>{ }, 1}; // { dg-error \"could not convert\" }\n+  = {std::allocator_arg, std::allocator<int>{ }, 1}; // { dg-error \"explicit constructor\" }\n std::tuple<Explicit, Explicit> v32_b\n-  = {std::allocator_arg, std::allocator<int>{}, 1, 2}; // { dg-error \"could not convert\" }\n+  = {std::allocator_arg, std::allocator<int>{}, 1, 2}; // { dg-error \"explicit constructor\" }\n std::tuple<Explicit, Explicit, Explicit> v32_c\n-  = {std::allocator_arg, std::allocator<int>{}, 1,2,3}; // { dg-error \"could not convert\" }\n+  = {std::allocator_arg, std::allocator<int>{}, 1,2,3}; // { dg-error \"explicit constructor\" }\n \n std::tuple<int, int> v33{std::allocator_arg, std::allocator<int>{},\n   std::pair<int, int>{1, 2}};\n@@ -218,7 +218,7 @@ std::tuple<long, long> v37 = {std::allocator_arg, std::allocator<int>{},\n   std::pair<int, int>{1, 2}};\n \n std::tuple<Explicit, Explicit> v38\n-= {std::allocator_arg, std::allocator<int>{}, std::pair<int, int>{1, 2}}; // { dg-error \"could not convert\" }\n+= {std::allocator_arg, std::allocator<int>{}, std::pair<int, int>{1, 2}}; // { dg-error \"explicit constructor\" }\n \n std::tuple<int, int> v39{std::allocator_arg, std::allocator<int>{}, v20};\n \n@@ -232,18 +232,18 @@ std::tuple<int, int> v42 = {std::allocator_arg, std::allocator<int>{}, v20};\n std::tuple<long, long> v43 = {std::allocator_arg, std::allocator<int>{}, v20};\n \n std::tuple<Explicit, Explicit> v44\n-= {std::allocator_arg, std::allocator<int>{ }, v20}; // { dg-error \"could not convert\" }\n+= {std::allocator_arg, std::allocator<int>{ }, v20}; // { dg-error \"explicit constructor\" }\n std::tuple<ExplicitDefault> v45_a{};\n std::tuple<ExplicitDefault, int> v45_b{};\n \n-std::tuple<ExplicitDefault> v46_a = {}; // { dg-error \"could not convert\" }\n-std::tuple<ExplicitDefault, int> v46_b = {}; // { dg-error \"could not convert\" }\n+std::tuple<ExplicitDefault> v46_a = {}; // { dg-error \"explicit constructor\" }\n+std::tuple<ExplicitDefault, int> v46_b = {}; // { dg-error \"explicit constructor\" }\n \n std::tuple<ExplicitDefaultDefault> v47_a{};\n std::tuple<ExplicitDefaultDefault, int> v47_b{};\n \n-std::tuple<ExplicitDefaultDefault> v48_a = {}; // { dg-error \"could not convert\" }\n-std::tuple<ExplicitDefaultDefault, int> v48_b = { }; // { dg-error \"could not convert\" }\n+std::tuple<ExplicitDefaultDefault> v48_a = {}; // { dg-error \"explicit constructor\" }\n+std::tuple<ExplicitDefaultDefault, int> v48_b = { }; // { dg-error \"explicit constructor\" }\n \n \n struct DeletedCopy\n@@ -295,9 +295,9 @@ void test_arg_passing()\n   f8_b(v1_b);\n   f8_c(v1_c);\n \n-  f8_a({1}); // { dg-error \"could not convert\" }\n-  f8_b({1,2}); // { dg-error \"could not convert\" }\n-  f8_c({1,2,3}); // { dg-error \"could not convert\" }\n+  f8_a({1}); // { dg-error \"explicit constructor\" }\n+  f8_b({1,2}); // { dg-error \"explicit constructor\" }\n+  f8_c({1,2,3}); // { dg-error \"explicit constructor\" }\n \n   f8_a(std::tuple<Explicit>{});\n   f8_b(std::tuple<Explicit, Explicit>{});\n@@ -330,10 +330,10 @@ void test_arg_passing()\n   f9_b(std::tuple<long, long>{});\n   f9_c(std::tuple<long, long, long>{});\n \n-  f10_a({}); // { dg-error \"could not convert\" }\n-  f10_b({}); // { dg-error \"could not convert\" }\n-  f11_a({}); // { dg-error \"could not convert\" }\n-  f11_b({}); // { dg-error \"could not convert\" }\n+  f10_a({}); // { dg-error \"explicit constructor\" }\n+  f10_b({}); // { dg-error \"explicit constructor\" }\n+  f11_a({}); // { dg-error \"explicit constructor\" }\n+  f11_b({}); // { dg-error \"explicit constructor\" }\n \n   f10_a(std::tuple<ExplicitDefault>{});\n   f10_b(std::tuple<ExplicitDefault, int>{});"}, {"sha": "b0a1311f02c6d113084bece467cf8c26bcc3b50d", "filename": "libstdc++-v3/testsuite/23_containers/span/explicit.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a226590fefb35ed66adf73d85cefe49048a78ab8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fexplicit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a226590fefb35ed66adf73d85cefe49048a78ab8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fexplicit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fexplicit.cc?ref=a226590fefb35ed66adf73d85cefe49048a78ab8", "patch": "@@ -31,11 +31,11 @@ auto first = std::begin(r), last = std::end(r);\n \n // span(It, size_type)\n std::span<int> s1 = {first, 2};\n-std::span<int, 2> s2 = {first, 2}; // { dg-error \"could not convert\" }\n+std::span<int, 2> s2 = {first, 2}; // { dg-error \"explicit constructor\" }\n \n // span(It, End)\n std::span<int> s3 = {first, last};\n-std::span<int, 2> s4 = {first, last}; // { dg-error \"could not convert\" }\n+std::span<int, 2> s4 = {first, last}; // { dg-error \"explicit constructor\" }\n \n // span(R&&)\n std::span<int> s5 = r;"}]}