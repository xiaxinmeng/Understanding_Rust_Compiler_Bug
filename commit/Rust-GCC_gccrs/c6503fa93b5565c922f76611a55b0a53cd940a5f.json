{"sha": "c6503fa93b5565c922f76611a55b0a53cd940a5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY1MDNmYTkzYjU1NjVjOTIyZjc2NjExYTU1YjBhNTNjZDk0MGE1Zg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-06-04T16:35:27Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-06-04T16:36:28Z"}, "message": "PR c/100719 - missing -Wvla-parameter on a mismatch in second parameter\n\ngcc/ChangeLog:\n\n\t* attribs.c (init_attr_rdwr_indices): Use VLA bounds in the expected\n\torder.\n\t(attr_access::vla_bounds): Also handle VLA bounds.\n\ngcc/c-family/ChangeLog:\n\n\t* c-warn.c (warn_parm_array_mismatch): Check TREE_PURPOSE to test\n\tfor element presence.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/Wvla-parameter-10.c: New test.\n\t* gcc.dg/Wvla-parameter-11.c: New test.", "tree": {"sha": "9f6839ac642ddc2d8d3322e5b57823917abdba1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f6839ac642ddc2d8d3322e5b57823917abdba1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6503fa93b5565c922f76611a55b0a53cd940a5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6503fa93b5565c922f76611a55b0a53cd940a5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6503fa93b5565c922f76611a55b0a53cd940a5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6503fa93b5565c922f76611a55b0a53cd940a5f/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b51f038cf027fdc1bf00240cacee59dd5cbe458", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b51f038cf027fdc1bf00240cacee59dd5cbe458", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b51f038cf027fdc1bf00240cacee59dd5cbe458"}], "stats": {"total": 161, "additions": 153, "deletions": 8}, "files": [{"sha": "70e0a2f188f6deca22bf2f2054182d4ec328f9b1", "filename": "gcc/attribs.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6503fa93b5565c922f76611a55b0a53cd940a5f/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6503fa93b5565c922f76611a55b0a53cd940a5f/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=c6503fa93b5565c922f76611a55b0a53cd940a5f", "patch": "@@ -2126,14 +2126,14 @@ init_attr_rdwr_indices (rdwr_map *rwm, tree attrs)\n \n       /* The (optional) list of VLA bounds.  */\n       tree vblist = TREE_CHAIN (mode);\n-      if (vblist)\n-       vblist = TREE_VALUE (vblist);\n-\n       mode = TREE_VALUE (mode);\n       if (TREE_CODE (mode) != STRING_CST)\n \tcontinue;\n       gcc_assert (TREE_CODE (mode) == STRING_CST);\n \n+      if (vblist)\n+\tvblist = nreverse (copy_list (TREE_VALUE (vblist)));\n+\n       for (const char *m = TREE_STRING_POINTER (mode); *m; )\n \t{\n \t  attr_access acc = { };\n@@ -2308,11 +2308,18 @@ attr_access::to_external_string () const\n unsigned\n attr_access::vla_bounds (unsigned *nunspec) const\n {\n+  unsigned nbounds = 0;\n   *nunspec = 0;\n-  for (const char* p = strrchr (str, ']'); p && *p != '['; --p)\n-    if (*p == '*')\n-      ++*nunspec;\n-  return list_length (size);\n+  /* STR points to the beginning of the specified string for the current\n+     argument that may be followed by the string for the next argument.  */\n+  for (const char* p = strchr (str, ']'); p && *p != '['; --p)\n+    {\n+      if (*p == '*')\n+\t++*nunspec;\n+      else if (*p == '$')\n+\t++nbounds;\n+    }\n+  return nbounds;\n }\n \n /* Reset front end-specific attribute access data from ATTRS."}, {"sha": "a587b993fde7cbc6734727367cc6b2311663cc01", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6503fa93b5565c922f76611a55b0a53cd940a5f/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6503fa93b5565c922f76611a55b0a53cd940a5f/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=c6503fa93b5565c922f76611a55b0a53cd940a5f", "patch": "@@ -3511,7 +3511,7 @@ warn_parm_array_mismatch (location_t origloc, tree fndecl, tree newparms)\n \t  && newa->sizarg != UINT_MAX\n \t  && newa->sizarg == cura->sizarg\n \t  && newa->minsize == cura->minsize\n-\t  && !TREE_CHAIN (newa->size) && !TREE_CHAIN (cura->size))\n+\t  && !TREE_PURPOSE (newa->size) && !TREE_PURPOSE (cura->size))\n \tcontinue;\n \n       if (newa->size || cura->size)"}, {"sha": "68db3edfbc5af7ff07e62bba4a37786ce5cf7709", "filename": "gcc/testsuite/gcc.dg/Wvla-parameter-10.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6503fa93b5565c922f76611a55b0a53cd940a5f/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-parameter-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6503fa93b5565c922f76611a55b0a53cd940a5f/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-parameter-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-parameter-10.c?ref=c6503fa93b5565c922f76611a55b0a53cd940a5f", "patch": "@@ -0,0 +1,68 @@\n+/* PR c/100719 - missing -Wvla-parameter on a mismatch in second parameter\n+   { dg-do compile }\n+   { dg-options \"-Wall\" } */\n+\n+typedef struct A1 { int i; } A1;\n+typedef struct A2 { int i; } A2;\n+typedef struct A3 { int i; } A3;\n+\n+void f2 (int n, A1[n], A2[n]);\n+void f2 (int n, A1[n], A2[n]);\n+\n+void f2_x1 (int n, A1[n],     A2[n]);   // { dg-note \"previously declared as 'A1\\\\\\[n]' with bound argument 1\" }\n+void f2_x1 (int n, A1[n + 1], A2[n]);   // { dg-warning \"argument 2 of type 'A1\\\\\\[n \\\\+ 1]' declared with mismatched bound 'n \\\\+ 1'\" }\n+\n+void f2_x2 (int n, A1[n], A2[n]);       // { dg-note \"previously declared as 'A2\\\\\\[n]' with bound argument 1\" }\n+void f2_x2 (int n, A1[n], A2[n + 2]);   // { dg-warning \"argument 3 of type 'A2\\\\\\[n \\\\+ 2]' declared with mismatched bound 'n \\\\+ 2'\" }\n+\n+\n+void f3 (int n, A1[n], A2[n], A3[n]);\n+void f3 (int n, A1[n], A2[n], A3[n]);\n+\n+void f3_x1 (int n, A1[n],     A2[n], A3[n]);\n+// { dg-note \"previously declared as 'A1\\\\\\[n]' with bound argument 1\" \"note\" { target *-*-* } .-1 }\n+void f3_x1 (int n, A1[n + 1], A2[n], A3[n]);\n+// { dg-warning \"argument 2 of type 'A1\\\\\\[n \\\\+ 1]' declared with mismatched bound 'n \\\\+ 1'\" \"\" { target *-*-* } .-1 }\n+\n+void f3_x2 (int n, A1[n], A2[n],     A3[n]);\n+// { dg-note \"previously declared as 'A2\\\\\\[n]' with bound argument 1\" \"note\" { target *-*-* } .-1 }\n+void f3_x2 (int n, A1[n], A2[n + 2], A3[n]);\n+// { dg-warning \"argument 3 of type 'A2\\\\\\[n \\\\+ 2]' declared with mismatched bound 'n \\\\+ 2'\" \"\" { target *-*-* } .-1 }\n+\n+void f3_x3 (int n, A1[n], A2[n], A3[n]);\n+// { dg-note \"previously declared as 'A3\\\\\\[n]' with bound argument 1\" \"note\" { target *-*-* } .-1 }\n+void f3_x3 (int n, A1[n], A2[n], A3[n + 3]);\n+// { dg-warning \"argument 4 of type 'A3\\\\\\[n \\\\+ 3]' declared with mismatched bound 'n \\\\+ 3'\" \"\" { target *-*-* } .-1 }\n+\n+\n+void g3_x1 (int n, A1[n],     A2[*], A3[n]);\n+// { dg-note \"previously declared as 'A1\\\\\\[n]' with bound argument 1\" \"note\" { target *-*-* } .-1 }\n+void g3_x1 (int n, A1[n + 1], A2[*], A3[n]);\n+// { dg-warning \"argument 2 of type 'A1\\\\\\[n \\\\+ 1]' declared with mismatched bound 'n \\\\+ 1'\" \"\" { target *-*-* } .-1 }\n+\n+void g3_x2 (int n, A1[*], A2[n],     A3[n]);\n+// { dg-note \"previously declared as 'A2\\\\\\[n]' with bound argument 1\" \"note\" { target *-*-* } .-1 }\n+void g3_x2 (int n, A1[*], A2[n + 2], A3[n]);\n+// { dg-warning \"argument 3 of type 'A2\\\\\\[n \\\\+ 2]' declared with mismatched bound 'n \\\\+ 2'\" \"\" { target *-*-* } .-1 }\n+\n+void g3_x3 (int n, A1[*], A2[*], A3[n]);\n+// { dg-note \"previously declared as 'A3\\\\\\[n]' with bound argument 1\" \"note\" { target *-*-* } .-1 }\n+void g3_x3 (int n, A1[*], A2[*], A3[n + 3]);\n+// { dg-warning \"argument 4 of type 'A3\\\\\\[n \\\\+ 3]' declared with mismatched bound 'n \\\\+ 3'\" \"\" { target *-*-* } .-1 }\n+\n+\n+void h3_x1 (int n, A1[n],     A2[ ], A3[n]);\n+// { dg-note \"previously declared as 'A1\\\\\\[n]' with bound argument 1\" \"note\" { target *-*-* } .-1 }\n+void h3_x1 (int n, A1[n + 1], A2[ ], A3[n]);\n+// { dg-warning \"argument 2 of type 'A1\\\\\\[n \\\\+ 1]' declared with mismatched bound 'n \\\\+ 1'\" \"\" { target *-*-* } .-1 }\n+\n+void h3_x2 (int n, A1[ ], A2[n],     A3[n]);\n+// { dg-note \"previously declared as 'A2\\\\\\[n]' with bound argument 1\" \"note\" { target *-*-* } .-1 }\n+void h3_x2 (int n, A1[ ], A2[n + 2], A3[n]);\n+// { dg-warning \"argument 3 of type 'A2\\\\\\[n \\\\+ 2]' declared with mismatched bound 'n \\\\+ 2'\" \"\" { target *-*-* } .-1 }\n+\n+void h3_x3 (int n, A1[ ], A2[ ], A3[n]);\n+// { dg-note \"previously declared as 'A3\\\\\\[n]' with bound argument 1\" \"note\" { target *-*-* } .-1 }\n+void h3_x3 (int n, A1[ ], A2[ ], A3[n + 3]);\n+// { dg-warning \"argument 4 of type 'A3\\\\\\[n \\\\+ 3]' declared with mismatched bound 'n \\\\+ 3'\" \"\" { target *-*-* } .-1 }\n+"}, {"sha": "39886a22d68f4517d9586605cef069c76749920c", "filename": "gcc/testsuite/gcc.dg/Wvla-parameter-11.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6503fa93b5565c922f76611a55b0a53cd940a5f/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-parameter-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6503fa93b5565c922f76611a55b0a53cd940a5f/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-parameter-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-parameter-11.c?ref=c6503fa93b5565c922f76611a55b0a53cd940a5f", "patch": "@@ -0,0 +1,70 @@\n+/* PR c/100719 - missing -Wvla-parameter on a mismatch in second parameter\n+   { dg-do compile }\n+   { dg-options \"-Wall\" } */\n+\n+typedef struct A1 { int i; } A1;\n+typedef struct A2 { int i; } A2;\n+typedef struct A3 { int i; } A3;\n+\n+extern int n, n1, n2, n3;\n+\n+void f2 (int, A1[n], A2[n]);\n+void f2 (int, A1[n], A2[n]);\n+\n+void f2_x1 (int, A1[n],  A2[n]);        // { dg-note \"previously declared as 'A1\\\\\\[n]'\" }\n+void f2_x1 (int, A1[n1], A2[n]);        // { dg-warning \"argument 2 of type 'A1\\\\\\[n1]' declared with mismatched bound 'n1'\" }\n+\n+void f2_x2 (int, A1[n], A2[n]);         // { dg-note \"previously declared as 'A2\\\\\\[n]'\" }\n+void f2_x2 (int, A1[n], A2[n2]);        // { dg-warning \"argument 3 of type 'A2\\\\\\[n2]' declared with mismatched bound 'n2'\" }\n+\n+\n+void f3 (int, A1[n], A2[n], A3[n]);\n+void f3 (int, A1[n], A2[n], A3[n]);\n+\n+void f3_x1 (int, A1[n],  A2[n], A3[n]);\n+// { dg-note \"previously declared as 'A1\\\\\\[n]'\" \"note\" { target *-*-* } .-1 }\n+void f3_x1 (int, A1[n1], A2[n], A3[n]);\n+// { dg-warning \"argument 2 of type 'A1\\\\\\[n1]' declared with mismatched bound 'n1'\" \"\" { target *-*-* } .-1 }\n+\n+void f3_x2 (int, A1[n], A2[n],  A3[n]);\n+// { dg-note \"previously declared as 'A2\\\\\\[n]'\" \"note\" { target *-*-* } .-1 }\n+void f3_x2 (int, A1[n], A2[n2], A3[n]);\n+// { dg-warning \"argument 3 of type 'A2\\\\\\[n2]' declared with mismatched bound 'n2'\" \"\" { target *-*-* } .-1 }\n+\n+void f3_x3 (int, A1[n], A2[n], A3[n]);\n+// { dg-note \"previously declared as 'A3\\\\\\[n]'\" \"note\" { target *-*-* } .-1 }\n+void f3_x3 (int, A1[n], A2[n], A3[n3]);\n+// { dg-warning \"argument 4 of type 'A3\\\\\\[n3]' declared with mismatched bound 'n3'\" \"\" { target *-*-* } .-1 }\n+\n+\n+void g3_x1 (int, A1[n],  A2[*], A3[n]);\n+// { dg-note \"previously declared as 'A1\\\\\\[n]'\" \"note\" { target *-*-* } .-1 }\n+void g3_x1 (int, A1[n1], A2[*], A3[n]);\n+// { dg-warning \"argument 2 of type 'A1\\\\\\[n1]' declared with mismatched bound 'n1'\" \"\" { target *-*-* } .-1 }\n+\n+void g3_x2 (int, A1[*], A2[n],  A3[n]);\n+// { dg-note \"previously declared as 'A2\\\\\\[n]'\" \"note\" { target *-*-* } .-1 }\n+void g3_x2 (int, A1[*], A2[n2], A3[n]);\n+// { dg-warning \"argument 3 of type 'A2\\\\\\[n2]' declared with mismatched bound 'n2'\" \"\" { target *-*-* } .-1 }\n+\n+void g3_x3 (int, A1[*], A2[*], A3[n]);\n+// { dg-note \"previously declared as 'A3\\\\\\[n]'\" \"note\" { target *-*-* } .-1 }\n+void g3_x3 (int, A1[*], A2[*], A3[n3]);\n+// { dg-warning \"argument 4 of type 'A3\\\\\\[n3]' declared with mismatched bound 'n3'\" \"\" { target *-*-* } .-1 }\n+\n+\n+void h3_x1 (int, A1[n],  A2[ ], A3[n]);\n+// { dg-note \"previously declared as 'A1\\\\\\[n]'\" \"note\" { target *-*-* } .-1 }\n+void h3_x1 (int, A1[n1], A2[ ], A3[n]);\n+// { dg-warning \"argument 2 of type 'A1\\\\\\[n1]' declared with mismatched bound 'n1'\" \"\" { target *-*-* } .-1 }\n+\n+void h3_x2 (int, A1[ ], A2[n],  A3[n]);\n+// { dg-note \"previously declared as 'A2\\\\\\[n]'\" \"note\" { target *-*-* } .-1 }\n+void h3_x2 (int, A1[ ], A2[n2], A3[n]);\n+// { dg-warning \"argument 3 of type 'A2\\\\\\[n2]' declared with mismatched bound 'n2'\" \"\" { target *-*-* } .-1 }\n+\n+void h3_x3 (int, A1[ ], A2[ ], A3[n]);\n+// { dg-note \"previously declared as 'A3\\\\\\[n]'\" \"note\" { target *-*-* } .-1 }\n+void h3_x3 (int, A1[ ], A2[ ], A3[n3]);\n+// { dg-warning \"argument 4 of type 'A3\\\\\\[n3]' declared with mismatched bound 'n3'\" \"\" { target *-*-* } .-1 }\n+"}]}