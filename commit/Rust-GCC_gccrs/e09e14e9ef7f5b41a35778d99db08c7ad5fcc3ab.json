{"sha": "e09e14e9ef7f5b41a35778d99db08c7ad5fcc3ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA5ZTE0ZTllZjdmNWI0MWEzNTc3OGQ5OWRiMDhjN2FkNWZjYzNhYg==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "1998-03-21T23:47:27Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-03-21T23:47:27Z"}, "message": "Makefile.in: Various fixes for building cygwin32 native toolchains.\n\n        * Makefile.in: Various fixes for building cygwin32 native toolchains.\n\nCo-Authored-By: Geoff Noer <noer@cygnus.com>\n\nFrom-SVN: r18743", "tree": {"sha": "af32b1345c2c2da3781586050af3153eb46f6475", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af32b1345c2c2da3781586050af3153eb46f6475"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e09e14e9ef7f5b41a35778d99db08c7ad5fcc3ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e09e14e9ef7f5b41a35778d99db08c7ad5fcc3ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e09e14e9ef7f5b41a35778d99db08c7ad5fcc3ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e09e14e9ef7f5b41a35778d99db08c7ad5fcc3ab/comments", "author": null, "committer": null, "parents": [{"sha": "9dbb90b393cdecdaa31297eea0b0c6c57232bd9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dbb90b393cdecdaa31297eea0b0c6c57232bd9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dbb90b393cdecdaa31297eea0b0c6c57232bd9f"}], "stats": {"total": 59, "additions": 32, "deletions": 27}, "files": [{"sha": "b121296fa2591dc7415b8d9512f02b315a297624", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09e14e9ef7f5b41a35778d99db08c7ad5fcc3ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09e14e9ef7f5b41a35778d99db08c7ad5fcc3ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e09e14e9ef7f5b41a35778d99db08c7ad5fcc3ab", "patch": "@@ -1,3 +1,8 @@\n+Sun Mar 22 00:50:42 1998  Nick Clifton  <nickc@cygnus.com>\n+\t\t\t  Geoff Noer\t<noer@cygnus.com>\n+\n+\t* Makefile.in: Various fixes for building cygwin32 native toolchains.\n+\n Sun Mar 22 00:21:46 1998  R. Ganesan  <rganesan@novell.com>\n \n \t* configure.in: Handle with-PACKAGE=no correctly"}, {"sha": "08fc6d5dbd5738ba9121dcde1615d528a0297821", "filename": "gcc/Makefile.in", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09e14e9ef7f5b41a35778d99db08c7ad5fcc3ab/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09e14e9ef7f5b41a35778d99db08c7ad5fcc3ab/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=e09e14e9ef7f5b41a35778d99db08c7ad5fcc3ab", "patch": "@@ -337,7 +337,7 @@ USE_COLLECT2 = @will_use_collect2@\n MAYBE_USE_COLLECT2 = @maybe_use_collect2@\n # It is convenient for configure to add the assignment at the beginning,\n # so don't override it here.\n-USE_COLLECT2 = ld\n+USE_COLLECT2 = ld$(exeext)\n \n # List of extra C and assembler files to add to libgcc1.a.\n # Assembler files should have names ending in `.asm'.\n@@ -378,7 +378,7 @@ COMPILERS = cc1$(exeext) @all_compilers@\n \n # List of things which should already be built whenever we try to use xgcc\n # to compile anything (without linking).\n-GCC_PASSES=xgcc cc1 cpp $(EXTRA_PASSES)\n+GCC_PASSES=xgcc$(exeext) cc1$(exeext) cpp$(exeext) $(EXTRA_PASSES)\n \n # List of things which should already be built whenever we try to use xgcc\n # to link anything.\n@@ -748,18 +748,18 @@ all.internal: start.encap rest.encap\n all.cross: native gcc-cross specs stmp-headers $(LIBGCC) $(STMP_FIXPROTO) \\\n \t$(LIBGCC1_TEST) $(EXTRA_PARTS) lang.all.cross\n # This is what to compile if making gcc with a cross-compiler.\n-all.build: native xgcc $(EXTRA_PARTS) lang.all.build\n+all.build: native xgcc$(exeext) $(EXTRA_PARTS) lang.all.build\n # This is what must be made before installing GCC and converting libraries.\n-start.encap: native xgcc specs $(LIBGCC1) xlimits.h lang.start.encap\n+start.encap: native xgcc$(exeext) specs $(LIBGCC1) xlimits.h lang.start.encap\n # These can't be made until after GCC can run.\n rest.encap: stmp-headers $(LIBGCC) $(STMP_FIXPROTO) $(EXTRA_PARTS) lang.rest.encap\n # This is what is made with the host's compiler\n # whether making a cross compiler or not.\n-native: config.status auto-config.h cpp $(LANGUAGES) \\\n+native: config.status auto-config.h cpp$(exeext) $(LANGUAGES) \\\n \t$(EXTRA_PASSES) $(EXTRA_PROGRAMS) $(USE_COLLECT2)\n \n # Define the names for selecting languages in LANGUAGES.\n-C c: cc1\n+C c: cc1$(exeext)\n PROTO: proto\n \n # Tell GNU make these are phony targets.\n@@ -775,7 +775,7 @@ libgcc1-test: libgcc1-test.o native $(GCC_PARTS)\n \t@echo \"Testing libgcc1.  Ignore linker warning messages.\"\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) libgcc1-test.o -o libgcc1-test \\\n \t  -nostartfiles -nostdlib `$(GCC_FOR_TARGET) --print-libgcc-file-name`\n-libgcc1-test.o: libgcc1-test.c native xgcc\n+libgcc1-test.o: libgcc1-test.c native xgcc$(exeext)\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) -c $(srcdir)/libgcc1-test.c\n \n # Recompile all the language-independent object files.\n@@ -790,23 +790,23 @@ stamp-objlist: $(OBJS)\n # We call this executable `xgcc' rather than `gcc'\n # to avoid confusion if the current directory is in the path\n # and CC is `gcc'.  It is renamed to `gcc' when it is installed.\n-xgcc: gcc.o version.o choose-temp.o pexecute.o prefix.o version.o \\\n+xgcc$(exeext): gcc.o version.o choose-temp.o pexecute.o prefix.o version.o \\\n    $(LIBDEPS) $(EXTRA_GCC_OBJS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ gcc.o prefix.o version.o \\\n \t  choose-temp.o pexecute.o $(EXTRA_GCC_OBJS) $(LIBS)\n \n # Dump a specs file to make -B./ read these specs over installed ones.\n-specs: xgcc\n+specs: xgcc$(exeext)\n \t$(GCC_FOR_TARGET) -dumpspecs > tmp-specs\n \tmv tmp-specs specs\n \n # We do want to create an executable named `xgcc', so we can use it to\n # compile libgcc2.a.\n # Also create gcc-cross, so that install-common will install properly.\n-gcc-cross: xgcc\n+gcc-cross: xgcc$(exeext)\n \tcp xgcc$(exeext) gcc-cross$(exeext)\n \n-cc1: $(P) $(C_OBJS) $(OBJS) $(LIBDEPS)\n+cc1$(exeext): $(P) $(C_OBJS) $(OBJS) $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(C_OBJS) $(OBJS) $(LIBS)\n \n # Copy float.h from its source.\n@@ -1253,12 +1253,12 @@ c-iterate.o: c-iterate.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) c-tree.h \\\n     flags.h\n \n # To make a configuration always use collect2, set USE_COLLECT2 to ld.\n-ld: collect2\n+ld$(exeext): collect2$(exeext)\n \trm -f ld$(exeext)\n \t$(LN) collect2$(exeext) ld$(exeext)\n \n-collect2: collect2.o tlink.o hash.o cplus-dem.o underscore.o version.o \\\n-\tchoose-temp.o $(LIBDEPS)\n+collect2$(exeext): collect2.o tlink.o hash.o cplus-dem.o underscore.o \\\n+\tversion.o choose-temp.o $(LIBDEPS)\n # Don't try modifying collect2 (aka ld) in place--it might be linking this.\n \t-rm -f collect2$(exeext)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ collect2.o tlink.o hash.o \\\n@@ -1741,10 +1741,10 @@ $(HOST_PREFIX_1):\n # Remake cpp and protoize.\n \n # Making the preprocessor\n-cpp: $(CCCP)\n+cpp$(exeext): $(CCCP)$(exeext)\n \t-rm -f cpp$(exeext)\n \t$(LN) $(CCCP)$(exeext) cpp$(exeext)\n-cccp: cccp.o cexp.o version.o prefix.o $(LIBDEPS)\n+cccp$(exeext): cccp.o cexp.o version.o prefix.o $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ cccp.o cexp.o prefix.o \\\n \t  version.o $(LIBS)\n cexp.o: $(srcdir)/cexp.c $(CONFIG_H)\n@@ -1764,7 +1764,7 @@ cccp.o: cccp.c $(CONFIG_H) pcp.h version.c config.status\n \t  -DTOOL_INCLUDE_DIR=\\\"$(tooldir)/include\\\" \\\n \t  -c `echo $(srcdir)/cccp.c | sed 's,^\\./,,'`\n \n-cppmain: cppmain.o cpplib.o cpphash.o cppalloc.o cpperror.o cppexp.o \\\n+cppmain$(exeext): cppmain.o cpplib.o cpphash.o cppalloc.o cpperror.o cppexp.o \\\n   prefix.o version.o $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ cppmain.o cpplib.o cpphash.o \\\n \t  cppalloc.o cpperror.o cppexp.o prefix.o version.o $(LIBS)\n@@ -1792,15 +1792,15 @@ cppalloc.o: cppalloc.c $(CONFIG_H)\n # Note for the stamp targets, we run the program `true' instead of\n # having an empty command (nothing following the semicolon).\n \n-proto: config.status protoize unprotoize SYSCALLS.c.X\n+proto: config.status protoize$(exeext) unprotoize$(exeext) SYSCALLS.c.X\n \n-protoize: protoize.o getopt.o getopt1.o getpwd.o version.o \\\n+protoize$(exeext): protoize.o getopt.o getopt1.o getpwd.o version.o \\\n     pexecute.o choose-temp.o $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \\\n \t  protoize.o getopt.o getopt1.o getpwd.o version.o \\\n \t  pexecute.o choose-temp.o $(LIBS)\n \n-unprotoize: unprotoize.o getopt.o getopt1.o getpwd.o version.o \\\n+unprotoize$(exeext): unprotoize.o getopt.o getopt1.o getpwd.o version.o \\\n     pexecute.o choose-temp.o $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \\\n \t  unprotoize.o getopt.o getopt1.o getpwd.o version.o \\\n@@ -2263,7 +2263,7 @@ install-common: native installdirs $(EXTRA_PARTS) lang.install-common\n \n # Install the driver program as $(target_alias)-gcc\n # and also as either gcc (if native) or $(tooldir)/bin/gcc.\n-install-driver: xgcc\n+install-driver: xgcc$(exeext)\n \t-if [ -f gcc-cross$(exeext) ] ; then \\\n \t  rm -f $(bindir)/$(GCC_CROSS_NAME)$(exeext); \\\n \t  $(INSTALL_PROGRAM) gcc-cross$(exeext) $(bindir)/$(GCC_CROSS_NAME)$(exeext); \\\n@@ -2610,21 +2610,21 @@ bootstrap bootstrap-lean: force\n # To prevent `make install' from compiling alloca.o and then relinking cc1\n # because alloca.o is newer, we permit these recursive makes to compile\n # alloca.o.  Then cc1 is newer, so it won't have to be relinked.\n-\t$(MAKE) CC=\"stage1/xgcc -Bstage1/\" CFLAGS=\"$(WARN_CFLAGS) $(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage1/ LANGUAGES=\"$(LANGUAGES)\"\n+\t$(MAKE) CC=\"stage1/xgcc$(exeext) -Bstage1/\" CFLAGS=\"$(WARN_CFLAGS) $(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage1/ LANGUAGES=\"$(LANGUAGES)\"\n \t$(MAKE) stage2\n \t-if test $@ = bootstrap-lean; then rm -rf stage1; else true; fi\n-\t$(MAKE) CC=\"stage2/xgcc -Bstage2/\" CFLAGS=\"$(WARN_CFLAGS) $(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES=\"$(LANGUAGES)\"\n+\t$(MAKE) CC=\"stage2/xgcc$(exeext) -Bstage2/\" CFLAGS=\"$(WARN_CFLAGS) $(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES=\"$(LANGUAGES)\"\n \n bootstrap2: force\n-\t$(MAKE) CC=\"stage1/xgcc -Bstage1/\" CFLAGS=\"$(WARN_CFLAGS) $(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage1/ LANGUAGES=\"$(LANGUAGES)\"\n+\t$(MAKE) CC=\"stage1/xgcc$(exeext) -Bstage1/\" CFLAGS=\"$(WARN_CFLAGS) $(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage1/ LANGUAGES=\"$(LANGUAGES)\"\n \t$(MAKE) stage2\n-\t$(MAKE) CC=\"stage2/xgcc -Bstage2/\" CFLAGS=\"$(WARN_CFLAGS) $(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES=\"$(LANGUAGES)\"\n+\t$(MAKE) CC=\"stage2/xgcc$(exeext) -Bstage2/\" CFLAGS=\"$(WARN_CFLAGS) $(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES=\"$(LANGUAGES)\"\n \n bootstrap3: force\n-\t$(MAKE) CC=\"stage2/xgcc -Bstage2/\" CFLAGS=\"$(WARN_CFLAGS) $(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES=\"$(LANGUAGES)\"\n+\t$(MAKE) CC=\"stage2/xgcc$(exeext) -Bstage2/\" CFLAGS=\"$(WARN_CFLAGS) $(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES=\"$(LANGUAGES)\"\n \n bootstrap4: force\n-\t$(MAKE) CC=\"stage3/xgcc -Bstage3/\" CFLAGS=\"$(WARN_CFLAGS) $(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage3/ LANGUAGES=\"$(LANGUAGES)\"\n+\t$(MAKE) CC=\"stage3/xgcc$(exeext) -Bstage3/\" CFLAGS=\"$(WARN_CFLAGS) $(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage3/ LANGUAGES=\"$(LANGUAGES)\"\n \n # Compare the object files in the current directory with those in the\n # stage2 directory."}]}