{"sha": "3834917dbfa662ad3c358508dc40e3b7f4c70182", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgzNDkxN2RiZmE2NjJhZDNjMzU4NTA4ZGM0MGUzYjdmNGM3MDE4Mg==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2010-09-08T12:34:52Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2010-09-08T12:34:52Z"}, "message": "re PR tree-optimization/33244 (Missed opportunities for vectorization)\n\n\tPR tree-optimization/33244\n\t* tree-ssa-sink.c (statement_sink_location): Don't sink into\n\tempty loop latches.\n\ntestsuite/\n\tPR tree-optimization/33244\n\t* gfortran.dg/vect/fast-math-vect-8.f90: New test.\n\nFrom-SVN: r163998", "tree": {"sha": "40333867cd2cdc114ffbe072682c1206a8847164", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40333867cd2cdc114ffbe072682c1206a8847164"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3834917dbfa662ad3c358508dc40e3b7f4c70182", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3834917dbfa662ad3c358508dc40e3b7f4c70182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3834917dbfa662ad3c358508dc40e3b7f4c70182", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3834917dbfa662ad3c358508dc40e3b7f4c70182/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b5c878a5159f7d60f0c451b25888bcb2af4025e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5c878a5159f7d60f0c451b25888bcb2af4025e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5c878a5159f7d60f0c451b25888bcb2af4025e5"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "ff56d4b65d2ab1a090aa50eee1cd117f01445b39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3834917dbfa662ad3c358508dc40e3b7f4c70182/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3834917dbfa662ad3c358508dc40e3b7f4c70182/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3834917dbfa662ad3c358508dc40e3b7f4c70182", "patch": "@@ -1,3 +1,9 @@\n+2010-09-08  Michael Matz  <matz@suse.de>\n+\n+\tPR tree-optimization/33244\n+\t* tree-ssa-sink.c (statement_sink_location): Don't sink into\n+\tempty loop latches.\n+\n 2010-09-08  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/45578"}, {"sha": "7b400211dfdc7a69804f0786d79eb03ee266b94b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3834917dbfa662ad3c358508dc40e3b7f4c70182/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3834917dbfa662ad3c358508dc40e3b7f4c70182/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3834917dbfa662ad3c358508dc40e3b7f4c70182", "patch": "@@ -1,3 +1,8 @@\n+2010-09-08  Michael Matz  <matz@suse.de>\n+\n+\tPR tree-optimization/33244\n+\t* gfortran.dg/vect/fast-math-vect-8.f90: New test.\n+\n 2010-09-08  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/45578"}, {"sha": "918943f93a90062f7c9bb811d0052f7d72d9d4b5", "filename": "gcc/testsuite/gfortran.dg/vect/fast-math-vect-8.f90", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3834917dbfa662ad3c358508dc40e3b7f4c70182/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Ffast-math-vect-8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3834917dbfa662ad3c358508dc40e3b7f4c70182/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Ffast-math-vect-8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Ffast-math-vect-8.f90?ref=3834917dbfa662ad3c358508dc40e3b7f4c70182", "patch": "@@ -0,0 +1,93 @@\n+! { dg-do compile } \n+! { dg-require-effective-target vect_float } \n+\n+module solv_cap\n+\n+  implicit none\n+\n+  public  :: init_solve\n+\n+  integer, parameter, public :: dp = 4\n+\n+  real(kind=dp), private :: Pi, Mu0, c0, eps0\n+  logical,       private :: UseFFT, UsePreco\n+  real(kind=dp), private :: D1, D2\n+  integer,       private, save :: Ng1=0, Ng2=0\n+  integer,       private, pointer,     dimension(:,:)  :: Grid\n+  real(kind=dp), private, allocatable, dimension(:,:)  :: G\n+\n+contains\n+\n+  subroutine init_solve(Grid_in, GrSize1, GrSize2, UseFFT_in, UsePreco_in)\n+    integer, intent(in), target, dimension(:,:) :: Grid_in\n+    real(kind=dp), intent(in)  :: GrSize1, GrSize2\n+    logical,       intent(in)  :: UseFFT_in, UsePreco_in\n+    integer                    :: i, j\n+\n+    Pi = acos(-1.0_dp)\n+    Mu0 = 4e-7_dp * Pi\n+    c0 = 299792458\n+    eps0 = 1 / (Mu0 * c0**2)\n+\n+    UseFFT = UseFFT_in\n+    UsePreco = UsePreco_in\n+\n+    if(Ng1 /= 0 .and. allocated(G) ) then\n+      deallocate( G )\n+    end if\n+\n+    Grid => Grid_in\n+    Ng1 = size(Grid, 1)\n+    Ng2 = size(Grid, 2)\n+    D1 = GrSize1/Ng1\n+    D2 = GrSize2/Ng2\n+\n+    allocate( G(0:Ng1,0:Ng2) )\n+\n+    write(unit=*, fmt=*) \"Calculating G\"\n+    do i=0,Ng1\n+      do j=0,Ng2\n+        G(j,i) = Ginteg( -D1/2,-D2/2, D1/2,D2/2, i*D1,j*D2 )\n+      end do\n+    end do\n+\n+    if(UseFFT) then\n+      write(unit=*, fmt=*) \"Transforming G\"\n+      call FourirG(G,1)\n+    end if\n+\n+    return\n+\n+\n+  contains\n+  function Ginteg(xq1,yq1, xq2,yq2, xp,yp)  result(G)\n+    real(kind=dp), intent(in) :: xq1,yq1, xq2,yq2, xp,yp\n+    real(kind=dp)             :: G\n+    real(kind=dp)             :: x1,x2,y1,y2,t\n+    x1 = xq1-xp\n+    x2 = xq2-xp\n+    y1 = yq1-yp\n+    y2 = yq2-yp\n+\n+    if (x1+x2 < 0) then\n+      t = -x1\n+      x1 = -x2\n+      x2 = t\n+    end if\n+    if (y1+y2 < 0) then\n+      t = -y1\n+      y1 = -y2\n+      y2 = t\n+    end if\n+\n+    G = (x2*y2)-(x1*y2)-(x2*y1)+(x1*y1)\n+\n+    return\n+  end function Ginteg\n+\n+  end subroutine init_solve\n+\n+end module solv_cap\n+\n+! { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } \n+! { dg-final { cleanup-tree-dump \"vect\" } } "}, {"sha": "bfa1a3108a71181bd31629fe67c184c6dba521a9", "filename": "gcc/tree-ssa-sink.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3834917dbfa662ad3c358508dc40e3b7f4c70182/gcc%2Ftree-ssa-sink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3834917dbfa662ad3c358508dc40e3b7f4c70182/gcc%2Ftree-ssa-sink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sink.c?ref=3834917dbfa662ad3c358508dc40e3b7f4c70182", "patch": "@@ -429,6 +429,12 @@ statement_sink_location (gimple stmt, basic_block frombb,\n       || sinkbb->loop_father != frombb->loop_father)\n     return false;\n \n+  /* If the latch block is empty, don't make it non-empty by sinking\n+     something into it.  */\n+  if (sinkbb == frombb->loop_father->latch\n+      && empty_block_p (sinkbb))\n+    return false;\n+\n   /* Move the expression to a post dominator can't reduce the number of\n      executions.  */\n   if (dominated_by_p (CDI_POST_DOMINATORS, frombb, sinkbb))"}]}