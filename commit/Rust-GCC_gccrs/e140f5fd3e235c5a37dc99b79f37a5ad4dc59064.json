{"sha": "e140f5fd3e235c5a37dc99b79f37a5ad4dc59064", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE0MGY1ZmQzZTIzNWM1YTM3ZGM5OWI3OWYzN2E1YWQ0ZGM1OTA2NA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-20T18:11:20Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-20T19:29:42Z"}, "message": "aarch64: Split vec_selects of bottom elements into simple move\n\nIn certain intrinsics use cases GCC leaves SETs of a bottom-element vec\nselect lying around:\n        (vec_select:DI (reg:V2DI 34 v2 [orig:128 __o ] [128])\n            (parallel [\n                    (const_int 0 [0])\n                ])))\n\nThis can be treated as a simple move in aarch64 when done between SIMD\nregisters for all normal widths.\nThese go through the aarch64_get_lane pattern.\nThis patch adds a splitter there to simplify these extracts to a move\nthat can, perhaps, be optimised a way.\nAnother benefit is if the destination is memory we can use a simpler STR\ninstruction rather than ST1-lane.\n\ngcc/\n\n\t* config/aarch64/aarch64-simd.md (aarch64_get_lane<mode>):\n\tConvert to define_insn_and_split.  Split into simple move when moving\n\tbottom element.\n\ngcc/testsuite/\n\n\t* gcc.target/aarch64/vdup_lane_2.c: Scan for fmov rather than\n\tdup.", "tree": {"sha": "af6c82b56028d4c97ed7e3d44f0a1cf997f41d59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af6c82b56028d4c97ed7e3d44f0a1cf997f41d59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e140f5fd3e235c5a37dc99b79f37a5ad4dc59064", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e140f5fd3e235c5a37dc99b79f37a5ad4dc59064", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e140f5fd3e235c5a37dc99b79f37a5ad4dc59064", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e140f5fd3e235c5a37dc99b79f37a5ad4dc59064/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8c677776617ab91826af1d950b00d853eaff622", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8c677776617ab91826af1d950b00d853eaff622", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8c677776617ab91826af1d950b00d853eaff622"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "d7acd72bede4e9b8a006fefdb21ed34c080134f5", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e140f5fd3e235c5a37dc99b79f37a5ad4dc59064/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e140f5fd3e235c5a37dc99b79f37a5ad4dc59064/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=e140f5fd3e235c5a37dc99b79f37a5ad4dc59064", "patch": "@@ -3312,7 +3312,9 @@\n ;; Lane extraction of a value, neither sign nor zero extension\n ;; is guaranteed so upper bits should be considered undefined.\n ;; RTL uses GCC vector extension indices throughout so flip only for assembly.\n-(define_insn \"aarch64_get_lane<mode>\"\n+;; Extracting lane zero is split into a simple move when it is between SIMD\n+;; registers or a store.\n+(define_insn_and_split \"aarch64_get_lane<mode>\"\n   [(set (match_operand:<VEL> 0 \"aarch64_simd_nonimmediate_operand\" \"=?r, w, Utv\")\n \t(vec_select:<VEL>\n \t  (match_operand:VALL_F16 1 \"register_operand\" \"w, w, w\")\n@@ -3332,6 +3334,12 @@\n \t  gcc_unreachable ();\n       }\n   }\n+ \"&& reload_completed\n+  && ENDIAN_LANE_N (<nunits>, INTVAL (operands[2])) == 0\"\n+ [(set (match_dup 0) (match_dup 1))]\n+ {\n+   operands[1] = aarch64_replace_reg_mode (operands[1], <VEL>mode);\n+ }\n   [(set_attr \"type\" \"neon_to_gp<q>, neon_dup<q>, neon_store1_one_lane<q>\")]\n )\n "}, {"sha": "16f4808c1dab28b66e9ad2296feb5efb705cfaaa", "filename": "gcc/testsuite/gcc.target/aarch64/vdup_lane_2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e140f5fd3e235c5a37dc99b79f37a5ad4dc59064/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvdup_lane_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e140f5fd3e235c5a37dc99b79f37a5ad4dc59064/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvdup_lane_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvdup_lane_2.c?ref=e140f5fd3e235c5a37dc99b79f37a5ad4dc59064", "patch": "@@ -333,7 +333,7 @@ main ()\n \n /* Asm check for vdups_lane_f32, vdups_lane_s32, vdups_lane_u32.  */\n /* Can't generate \"dup s<n>, v<m>[0]\" for vdups_lane_s32 and vdups_lane_u32.  */\n-/* { dg-final { scan-assembler-times \"dup\\\\ts\\[0-9\\]+, v\\[0-9\\]+\\.s\\\\\\[0\\\\\\]\" 1} } */\n+/* { dg-final { scan-assembler-times {fmov\\ts0, s1} 1 } } */\n /* { dg-final { scan-assembler-times \"dup\\\\ts\\[0-9\\]+, v\\[0-9\\]+\\.s\\\\\\[1\\\\\\]\" 3 } } */\n \n /* Asm check for vdupd_lane_f64, vdupd_lane_s64, vdupd_lane_u64.  */"}]}