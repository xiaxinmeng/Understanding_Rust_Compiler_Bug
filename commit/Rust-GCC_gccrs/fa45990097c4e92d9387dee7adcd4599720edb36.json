{"sha": "fa45990097c4e92d9387dee7adcd4599720edb36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE0NTk5MDA5N2M0ZTkyZDkzODdkZWU3YWRjZDQ1OTk3MjBlZGIzNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-07-27T19:33:51Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-07-27T19:33:51Z"}, "message": "re PR c++/49813 ([C++0x] sinh vs asinh vs constexpr)\n\n2011-07-27  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/49813\n\t* include/c_global/cmath: Use _GLIBCXX_CONSTEXPR and constexpr.\n\nFrom-SVN: r176847", "tree": {"sha": "2b0c4d4dee2815df31b5c56e8ef504a22eb9e12b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b0c4d4dee2815df31b5c56e8ef504a22eb9e12b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa45990097c4e92d9387dee7adcd4599720edb36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa45990097c4e92d9387dee7adcd4599720edb36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa45990097c4e92d9387dee7adcd4599720edb36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa45990097c4e92d9387dee7adcd4599720edb36/comments", "author": null, "committer": null, "parents": [{"sha": "a5f9523c7c8e1ccfc49a1dbea47029216f85fc95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5f9523c7c8e1ccfc49a1dbea47029216f85fc95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5f9523c7c8e1ccfc49a1dbea47029216f85fc95"}], "stats": {"total": 568, "additions": 297, "deletions": 271}, "files": [{"sha": "32f895d2254dacb8f93974173f89681ef6aeab1c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa45990097c4e92d9387dee7adcd4599720edb36/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa45990097c4e92d9387dee7adcd4599720edb36/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fa45990097c4e92d9387dee7adcd4599720edb36", "patch": "@@ -1,3 +1,8 @@\n+2011-07-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/49813\n+\t* include/c_global/cmath: Use _GLIBCXX_CONSTEXPR and constexpr.\n+\n 2011-07-27  Jeffrey Yasskin  <jyasskin@google.com>\n \n \t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Updated."}, {"sha": "4a75d0e613b57f056a5f962f976284c16fc66ae7", "filename": "libstdc++-v3/include/c_global/cmath", "status": "modified", "additions": 292, "deletions": 271, "changes": 563, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa45990097c4e92d9387dee7adcd4599720edb36/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa45990097c4e92d9387dee7adcd4599720edb36/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath?ref=fa45990097c4e92d9387dee7adcd4599720edb36", "patch": "@@ -78,84 +78,88 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  inline double\n+  inline _GLIBCXX_CONSTEXPR double\n   abs(double __x)\n   { return __builtin_fabs(__x); }\n \n-  inline float\n+  inline _GLIBCXX_CONSTEXPR float\n   abs(float __x)\n   { return __builtin_fabsf(__x); }\n \n-  inline long double\n+  inline _GLIBCXX_CONSTEXPR long double\n   abs(long double __x)\n   { return __builtin_fabsl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    inline _GLIBCXX_CONSTEXPR\n+    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n+                                    double>::__type\n     abs(_Tp __x)\n     { return __builtin_fabs(__x); }\n \n   using ::acos;\n \n-  inline float\n+  inline _GLIBCXX_CONSTEXPR float\n   acos(float __x)\n   { return __builtin_acosf(__x); }\n \n-  inline long double\n+  inline _GLIBCXX_CONSTEXPR long double\n   acos(long double __x)\n   { return __builtin_acosl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    inline _GLIBCXX_CONSTEXPR\n+    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                    double>::__type\n     acos(_Tp __x)\n     { return __builtin_acos(__x); }\n \n   using ::asin;\n \n-  inline float\n+  inline _GLIBCXX_CONSTEXPR float\n   asin(float __x)\n   { return __builtin_asinf(__x); }\n \n-  inline long double\n+  inline _GLIBCXX_CONSTEXPR long double\n   asin(long double __x)\n   { return __builtin_asinl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n-\t\t\t\t\t   double>::__type\n+    inline _GLIBCXX_CONSTEXPR\n+    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n+                                    double>::__type\n     asin(_Tp __x)\n     { return __builtin_asin(__x); }\n \n   using ::atan;\n \n-  inline float\n+  inline _GLIBCXX_CONSTEXPR float\n   atan(float __x)\n   { return __builtin_atanf(__x); }\n \n-  inline long double\n+  inline _GLIBCXX_CONSTEXPR long double\n   atan(long double __x)\n   { return __builtin_atanl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    inline _GLIBCXX_CONSTEXPR\n+    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n+                                    double>::__type\n     atan(_Tp __x)\n     { return __builtin_atan(__x); }\n \n   using ::atan2;\n \n-  inline float\n+  inline _GLIBCXX_CONSTEXPR float\n   atan2(float __y, float __x)\n   { return __builtin_atan2f(__y, __x); }\n \n-  inline long double\n+  inline _GLIBCXX_CONSTEXPR long double\n   atan2(long double __y, long double __x)\n   { return __builtin_atan2l(__y, __x); }\n \n   template<typename _Tp, typename _Up>\n-    inline\n+    inline _GLIBCXX_CONSTEXPR\n     typename __gnu_cxx::__promote_2<\n     typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n \t\t\t\t    && __is_arithmetic<_Up>::__value,\n@@ -168,191 +172,201 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::ceil;\n \n-  inline float\n+  inline _GLIBCXX_CONSTEXPR float\n   ceil(float __x)\n   { return __builtin_ceilf(__x); }\n \n-  inline long double\n+  inline _GLIBCXX_CONSTEXPR long double\n   ceil(long double __x)\n   { return __builtin_ceill(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    inline _GLIBCXX_CONSTEXPR\n+    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                    double>::__type\n     ceil(_Tp __x)\n     { return __builtin_ceil(__x); }\n \n   using ::cos;\n \n-  inline float\n+  inline _GLIBCXX_CONSTEXPR float\n   cos(float __x)\n   { return __builtin_cosf(__x); }\n \n-  inline long double\n+  inline _GLIBCXX_CONSTEXPR long double\n   cos(long double __x)\n   { return __builtin_cosl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    inline _GLIBCXX_CONSTEXPR\n+    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n+                                    double>::__type\n     cos(_Tp __x)\n     { return __builtin_cos(__x); }\n \n   using ::cosh;\n \n-  inline float\n+  inline _GLIBCXX_CONSTEXPR float\n   cosh(float __x)\n   { return __builtin_coshf(__x); }\n \n-  inline long double\n+  inline _GLIBCXX_CONSTEXPR long double\n   cosh(long double __x)\n   { return __builtin_coshl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    inline _GLIBCXX_CONSTEXPR\n+    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n+                                    double>::__type\n     cosh(_Tp __x)\n     { return __builtin_cosh(__x); }\n \n   using ::exp;\n \n-  inline float\n+  inline _GLIBCXX_CONSTEXPR float\n   exp(float __x)\n   { return __builtin_expf(__x); }\n \n-  inline long double\n+  inline _GLIBCXX_CONSTEXPR long double\n   exp(long double __x)\n   { return __builtin_expl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    inline _GLIBCXX_CONSTEXPR\n+    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n+                                    double>::__type\n     exp(_Tp __x)\n     { return __builtin_exp(__x); }\n \n   using ::fabs;\n \n-  inline float\n+  inline _GLIBCXX_CONSTEXPR float\n   fabs(float __x)\n   { return __builtin_fabsf(__x); }\n \n-  inline long double\n+  inline _GLIBCXX_CONSTEXPR long double\n   fabs(long double __x)\n   { return __builtin_fabsl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    inline _GLIBCXX_CONSTEXPR\n+    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n+                                    double>::__type\n     fabs(_Tp __x)\n     { return __builtin_fabs(__x); }\n \n   using ::floor;\n \n-  inline float\n+  inline _GLIBCXX_CONSTEXPR float\n   floor(float __x)\n   { return __builtin_floorf(__x); }\n \n-  inline long double\n+  inline _GLIBCXX_CONSTEXPR long double\n   floor(long double __x)\n   { return __builtin_floorl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    inline _GLIBCXX_CONSTEXPR\n+    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n+                                    double>::__type\n     floor(_Tp __x)\n     { return __builtin_floor(__x); }\n \n   using ::fmod;\n \n-  inline float\n+  inline _GLIBCXX_CONSTEXPR float\n   fmod(float __x, float __y)\n   { return __builtin_fmodf(__x, __y); }\n \n-  inline long double\n+  inline _GLIBCXX_CONSTEXPR long double\n   fmod(long double __x, long double __y)\n   { return __builtin_fmodl(__x, __y); }\n \n   using ::frexp;\n \n-  inline float\n+  inline _GLIBCXX_CONSTEXPR float\n   frexp(float __x, int* __exp)\n   { return __builtin_frexpf(__x, __exp); }\n \n-  inline long double\n+  inline _GLIBCXX_CONSTEXPR long double\n   frexp(long double __x, int* __exp)\n   { return __builtin_frexpl(__x, __exp); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    inline _GLIBCXX_CONSTEXPR\n+    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                    double>::__type\n     frexp(_Tp __x, int* __exp)\n     { return __builtin_frexp(__x, __exp); }\n \n   using ::ldexp;\n \n-  inline float\n+  inline _GLIBCXX_CONSTEXPR float\n   ldexp(float __x, int __exp)\n   { return __builtin_ldexpf(__x, __exp); }\n \n-  inline long double\n+  inline _GLIBCXX_CONSTEXPR long double\n   ldexp(long double __x, int __exp)\n   { return __builtin_ldexpl(__x, __exp); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    inline _GLIBCXX_CONSTEXPR\n+    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                    double>::__type\n   ldexp(_Tp __x, int __exp)\n   { return __builtin_ldexp(__x, __exp); }\n \n   using ::log;\n \n-  inline float\n+  inline _GLIBCXX_CONSTEXPR float\n   log(float __x)\n   { return __builtin_logf(__x); }\n \n-  inline long double\n+  inline _GLIBCXX_CONSTEXPR long double\n   log(long double __x)\n   { return __builtin_logl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    inline _GLIBCXX_CONSTEXPR\n+    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                    double>::__type\n     log(_Tp __x)\n     { return __builtin_log(__x); }\n \n   using ::log10;\n \n-  inline float\n+  inline _GLIBCXX_CONSTEXPR float\n   log10(float __x)\n   { return __builtin_log10f(__x); }\n \n-  inline long double\n+  inline _GLIBCXX_CONSTEXPR long double\n   log10(long double __x)\n   { return __builtin_log10l(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    inline _GLIBCXX_CONSTEXPR\n+    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n+                                    double>::__type\n     log10(_Tp __x)\n     { return __builtin_log10(__x); }\n \n   using ::modf;\n \n-  inline float\n+  inline _GLIBCXX_CONSTEXPR float\n   modf(float __x, float* __iptr)\n   { return __builtin_modff(__x, __iptr); }\n \n-  inline long double\n+  inline _GLIBCXX_CONSTEXPR long double\n   modf(long double __x, long double* __iptr)\n   { return __builtin_modfl(__x, __iptr); }\n \n   using ::pow;\n \n-  inline float\n+  inline _GLIBCXX_CONSTEXPR float\n   pow(float __x, float __y)\n   { return __builtin_powf(__x, __y); }\n \n-  inline long double\n+  inline _GLIBCXX_CONSTEXPR long double\n   pow(long double __x, long double __y)\n   { return __builtin_powl(__x, __y); }\n \n@@ -373,7 +387,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   template<typename _Tp, typename _Up>\n-    inline\n+    inline _GLIBCXX_CONSTEXPR\n     typename __gnu_cxx::__promote_2<\n     typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n \t\t\t\t    && __is_arithmetic<_Up>::__value,\n@@ -386,81 +400,86 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   using ::sin;\n \n-  inline float\n+  inline _GLIBCXX_CONSTEXPR float\n   sin(float __x)\n   { return __builtin_sinf(__x); }\n \n-  inline long double\n+  inline _GLIBCXX_CONSTEXPR long double\n   sin(long double __x)\n   { return __builtin_sinl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    inline _GLIBCXX_CONSTEXPR\n+    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                    double>::__type\n     sin(_Tp __x)\n     { return __builtin_sin(__x); }\n \n   using ::sinh;\n \n-  inline float\n+  inline _GLIBCXX_CONSTEXPR float\n   sinh(float __x)\n   { return __builtin_sinhf(__x); }\n \n-  inline long double\n+  inline _GLIBCXX_CONSTEXPR long double\n   sinh(long double __x)\n   { return __builtin_sinhl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    inline _GLIBCXX_CONSTEXPR\n+    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                    double>::__type\n     sinh(_Tp __x)\n     { return __builtin_sinh(__x); }\n \n   using ::sqrt;\n \n-  inline float\n+  inline _GLIBCXX_CONSTEXPR float\n   sqrt(float __x)\n   { return __builtin_sqrtf(__x); }\n \n-  inline long double\n+  inline _GLIBCXX_CONSTEXPR long double\n   sqrt(long double __x)\n   { return __builtin_sqrtl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    inline _GLIBCXX_CONSTEXPR\n+    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                    double>::__type\n     sqrt(_Tp __x)\n     { return __builtin_sqrt(__x); }\n \n   using ::tan;\n \n-  inline float\n+  inline _GLIBCXX_CONSTEXPR float\n   tan(float __x)\n   { return __builtin_tanf(__x); }\n \n-  inline long double\n+  inline _GLIBCXX_CONSTEXPR long double\n   tan(long double __x)\n   { return __builtin_tanl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    inline _GLIBCXX_CONSTEXPR\n+    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                    double>::__type\n     tan(_Tp __x)\n     { return __builtin_tan(__x); }\n \n   using ::tanh;\n \n-  inline float\n+  inline _GLIBCXX_CONSTEXPR float\n   tanh(float __x)\n   { return __builtin_tanhf(__x); }\n \n-  inline long double\n+  inline _GLIBCXX_CONSTEXPR long double\n   tanh(long double __x)\n   { return __builtin_tanhl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    inline _GLIBCXX_CONSTEXPR\n+    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                    double>::__type\n     tanh(_Tp __x)\n     { return __builtin_tanh(__x); }\n \n@@ -489,131 +508,132 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-  inline int\n+  constexpr int\n   fpclassify(float __x)\n   { return __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL,\n \t\t\t\tFP_SUBNORMAL, FP_ZERO, __x); }\n \n-  inline int\n+  constexpr int\n   fpclassify(double __x)\n   { return __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL,\n \t\t\t\tFP_SUBNORMAL, FP_ZERO, __x); }\n \n-  inline int\n+  constexpr int\n   fpclassify(long double __x)\n   { return __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL,\n \t\t\t\tFP_SUBNORMAL, FP_ZERO, __x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n-\t\t\t\t\t   int>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n+                                              int>::__type\n     fpclassify(_Tp __x)\n     { return __x != 0 ? FP_NORMAL : FP_ZERO; }\n \n-  inline bool\n+  constexpr bool\n   isfinite(float __x)\n   { return __builtin_isfinite(__x); }\n \n-  inline bool\n+  constexpr bool\n   isfinite(double __x)\n   { return __builtin_isfinite(__x); }\n \n-  inline bool\n+  constexpr bool\n   isfinite(long double __x)\n   { return __builtin_isfinite(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n-\t\t\t\t\t   bool>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n+                                              bool>::__type\n     isfinite(_Tp __x)\n     { return true; }\n \n-  inline bool\n+  // Workaround the isinf issue discussed in PR 49813.\n+  constexpr bool\n   isinf(float __x)\n-  { return __builtin_isinf(__x); }\n+  { return fpclassify(__x) == FP_INFINITE; }\n \n-  inline bool\n+  constexpr bool\n   isinf(double __x)\n-  { return __builtin_isinf(__x); }\n+  { return fpclassify(__x) == FP_INFINITE; }\n \n-  inline bool\n+  constexpr bool\n   isinf(long double __x)\n-  { return __builtin_isinf(__x); }\n+  { return fpclassify(__x) == FP_INFINITE; }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n-\t\t\t\t\t   bool>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n+                                              bool>::__type\n     isinf(_Tp __x)\n     { return false; }\n \n-  inline bool\n+  constexpr bool\n   isnan(float __x)\n   { return __builtin_isnan(__x); }\n \n-  inline bool\n+  constexpr bool\n   isnan(double __x)\n   { return __builtin_isnan(__x); }\n \n-  inline bool\n+  constexpr bool\n   isnan(long double __x)\n   { return __builtin_isnan(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n-\t\t\t\t\t   bool>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n+                                              bool>::__type\n     isnan(_Tp __x)\n     { return false; }\n \n-  inline bool\n+  constexpr bool\n   isnormal(float __x)\n   { return __builtin_isnormal(__x); }\n \n-  inline bool\n+  constexpr bool\n   isnormal(double __x)\n   { return __builtin_isnormal(__x); }\n \n-  inline bool\n+  constexpr bool\n   isnormal(long double __x)\n   { return __builtin_isnormal(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n-\t\t\t\t\t   bool>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n+                                              bool>::__type\n     isnormal(_Tp __x)\n     { return __x != 0 ? true : false; }\n \n-  inline bool\n+  constexpr bool\n   signbit(float __x)\n   { return __builtin_signbit(__x); }\n \n-  inline bool\n+  constexpr bool\n   signbit(double __x)\n   { return __builtin_signbit(__x); }\n \n-  inline bool\n+  constexpr bool\n   signbit(long double __x)\n   { return __builtin_signbit(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n-\t\t\t\t\t   bool>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n+                                              bool>::__type\n     signbit(_Tp __x)\n     { return __x < 0 ? true : false; }\n \n-  inline bool\n+  constexpr bool\n   isgreater(float __x, float __y)\n   { return __builtin_isgreater(__x, __y); }\n \n-  inline bool\n+  constexpr bool\n   isgreater(double __x, double __y)\n   { return __builtin_isgreater(__x, __y); }\n \n-  inline bool\n+  constexpr bool\n   isgreater(long double __x, long double __y)\n   { return __builtin_isgreater(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline typename\n+    constexpr typename\n     __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value\n \t\t\t    && __is_arithmetic<_Up>::__value), bool>::__type\n     isgreater(_Tp __x, _Up __y)\n@@ -622,20 +642,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __builtin_isgreater(__type(__x), __type(__y));\n     }\n \n-  inline bool\n+  constexpr bool\n   isgreaterequal(float __x, float __y)\n   { return __builtin_isgreaterequal(__x, __y); }\n \n-  inline bool\n+  constexpr bool\n   isgreaterequal(double __x, double __y)\n   { return __builtin_isgreaterequal(__x, __y); }\n \n-  inline bool\n+  constexpr bool\n   isgreaterequal(long double __x, long double __y)\n   { return __builtin_isgreaterequal(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline typename\n+    constexpr typename\n     __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value\n \t\t\t    && __is_arithmetic<_Up>::__value), bool>::__type\n     isgreaterequal(_Tp __x, _Up __y)\n@@ -644,20 +664,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __builtin_isgreaterequal(__type(__x), __type(__y));\n     }\n \n-  inline bool\n+  constexpr bool\n   isless(float __x, float __y)\n   { return __builtin_isless(__x, __y); }\n \n-  inline bool\n+  constexpr bool\n   isless(double __x, double __y)\n   { return __builtin_isless(__x, __y); }\n \n-  inline bool\n+  constexpr bool\n   isless(long double __x, long double __y)\n   { return __builtin_isless(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline typename\n+    constexpr typename\n     __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value\n \t\t\t    && __is_arithmetic<_Up>::__value), bool>::__type\n     isless(_Tp __x, _Up __y)\n@@ -666,20 +686,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __builtin_isless(__type(__x), __type(__y));\n     }\n \n-  inline bool\n+  constexpr bool\n   islessequal(float __x, float __y)\n   { return __builtin_islessequal(__x, __y); }\n \n-  inline bool\n+  constexpr bool\n   islessequal(double __x, double __y)\n   { return __builtin_islessequal(__x, __y); }\n \n-  inline bool\n+  constexpr bool\n   islessequal(long double __x, long double __y)\n   { return __builtin_islessequal(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline typename\n+    constexpr typename\n     __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value\n \t\t\t    && __is_arithmetic<_Up>::__value), bool>::__type\n     islessequal(_Tp __x, _Up __y)\n@@ -688,20 +708,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __builtin_islessequal(__type(__x), __type(__y));\n     }\n \n-  inline bool\n+  constexpr bool\n   islessgreater(float __x, float __y)\n   { return __builtin_islessgreater(__x, __y); }\n \n-  inline bool\n+  constexpr bool\n   islessgreater(double __x, double __y)\n   { return __builtin_islessgreater(__x, __y); }\n \n-  inline bool\n+  constexpr bool\n   islessgreater(long double __x, long double __y)\n   { return __builtin_islessgreater(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline typename\n+    constexpr typename\n     __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value\n \t\t\t    && __is_arithmetic<_Up>::__value), bool>::__type\n     islessgreater(_Tp __x, _Up __y)\n@@ -710,20 +730,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __builtin_islessgreater(__type(__x), __type(__y));\n     }\n \n-  inline bool\n+  constexpr bool\n   isunordered(float __x, float __y)\n   { return __builtin_isunordered(__x, __y); }\n \n-  inline bool\n+  constexpr bool\n   isunordered(double __x, double __y)\n   { return __builtin_isunordered(__x, __y); }\n \n-  inline bool\n+  constexpr bool\n   isunordered(long double __x, long double __y)\n   { return __builtin_isunordered(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline typename\n+    constexpr typename\n     __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value\n \t\t\t    && __is_arithmetic<_Up>::__value), bool>::__type\n     isunordered(_Tp __x, _Up __y)\n@@ -1111,72 +1131,72 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   using ::truncl;\n \n   /// Additional overloads.\n-  inline float\n+  constexpr float\n   acosh(float __x)\n   { return __builtin_acoshf(__x); }\n \n-  inline long double\n+  constexpr long double\n   acosh(long double __x)\n   { return __builtin_acoshl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                              double>::__type\n     acosh(_Tp __x)\n     { return __builtin_acosh(__x); }\n \n-  inline float\n+  constexpr float\n   asinh(float __x)\n   { return __builtin_asinhf(__x); }\n \n-  inline long double\n+  constexpr long double\n   asinh(long double __x)\n   { return __builtin_asinhl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                              double>::__type\n     asinh(_Tp __x)\n     { return __builtin_asinh(__x); }\n \n-  inline float\n+  constexpr float\n   atanh(float __x)\n   { return __builtin_atanhf(__x); }\n \n-  inline long double\n+  constexpr long double\n   atanh(long double __x)\n   { return __builtin_atanhl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                              double>::__type\n     atanh(_Tp __x)\n     { return __builtin_atanh(__x); }\n \n-  inline float\n+  constexpr float\n   cbrt(float __x)\n   { return __builtin_cbrtf(__x); }\n \n-  inline long double\n+  constexpr long double\n   cbrt(long double __x)\n   { return __builtin_cbrtl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                              double>::__type\n     cbrt(_Tp __x)\n     { return __builtin_cbrt(__x); }\n \n-  inline float\n+  constexpr float\n   copysign(float __x, float __y)\n   { return __builtin_copysignf(__x, __y); }\n \n-  inline long double\n+  constexpr long double\n   copysign(long double __x, long double __y)\n   { return __builtin_copysignl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline\n+    constexpr\n     typename __gnu_cxx::__promote_2<\n     typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n \t\t\t\t    && __is_arithmetic<_Up>::__value,\n@@ -1187,72 +1207,72 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return copysign(__type(__x), __type(__y));\n     }\n \n-  inline float\n+  constexpr float\n   erf(float __x)\n   { return __builtin_erff(__x); }\n \n-  inline long double\n+  constexpr long double\n   erf(long double __x)\n   { return __builtin_erfl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                              double>::__type\n     erf(_Tp __x)\n     { return __builtin_erf(__x); }\n \n-  inline float\n+  constexpr float\n   erfc(float __x)\n   { return __builtin_erfcf(__x); }\n \n-  inline long double\n+  constexpr long double\n   erfc(long double __x)\n   { return __builtin_erfcl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                              double>::__type\n     erfc(_Tp __x)\n     { return __builtin_erfc(__x); }\n \n-  inline float\n+  constexpr float\n   exp2(float __x)\n   { return __builtin_exp2f(__x); }\n \n-  inline long double\n+  constexpr long double\n   exp2(long double __x)\n   { return __builtin_exp2l(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                              double>::__type\n     exp2(_Tp __x)\n     { return __builtin_exp2(__x); }\n \n-  inline float\n+  constexpr float\n   expm1(float __x)\n   { return __builtin_expm1f(__x); }\n \n-  inline long double\n+  constexpr long double\n   expm1(long double __x)\n   { return __builtin_expm1l(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                              double>::__type\n     expm1(_Tp __x)\n     { return __builtin_expm1(__x); }\n \n-  inline float\n+  constexpr float\n   fdim(float __x, float __y)\n   { return __builtin_fdimf(__x, __y); }\n \n-  inline long double\n+  constexpr long double\n   fdim(long double __x, long double __y)\n   { return __builtin_fdiml(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline\n+    constexpr\n     typename __gnu_cxx::__promote_2<\n     typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n \t\t\t\t    && __is_arithmetic<_Up>::__value,\n@@ -1263,16 +1283,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return fdim(__type(__x), __type(__y));\n     }\n \n-  inline float\n+  constexpr float\n   fma(float __x, float __y, float __z)\n   { return __builtin_fmaf(__x, __y, __z); }\n \n-  inline long double\n+  constexpr long double\n   fma(long double __x, long double __y, long double __z)\n   { return __builtin_fmal(__x, __y, __z); }\n \n   template<typename _Tp, typename _Up, typename _Vp>\n-    inline\n+    constexpr\n     typename __gnu_cxx::__promote_3<\n     typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n \t\t\t\t    && __is_arithmetic<_Up>::__value\n@@ -1284,16 +1304,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return fma(__type(__x), __type(__y), __type(__z));\n     }\n \n-  inline float\n+  constexpr float\n   fmax(float __x, float __y)\n   { return __builtin_fmaxf(__x, __y); }\n \n-  inline long double\n+  constexpr long double\n   fmax(long double __x, long double __y)\n   { return __builtin_fmaxl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline\n+    constexpr\n     typename __gnu_cxx::__promote_2<\n     typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n \t\t\t\t    && __is_arithmetic<_Up>::__value,\n@@ -1304,16 +1324,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return fmax(__type(__x), __type(__y));\n     }\n \n-  inline float\n+  constexpr float\n   fmin(float __x, float __y)\n   { return __builtin_fminf(__x, __y); }\n \n-  inline long double\n+  constexpr long double\n   fmin(long double __x, long double __y)\n   { return __builtin_fminl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline\n+    constexpr\n     typename __gnu_cxx::__promote_2<\n     typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n \t\t\t\t    && __is_arithmetic<_Up>::__value,\n@@ -1324,16 +1344,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return fmin(__type(__x), __type(__y));\n     }\n \n-  inline float\n+  constexpr float\n   hypot(float __x, float __y)\n   { return __builtin_hypotf(__x, __y); }\n \n-  inline long double\n+  constexpr long double\n   hypot(long double __x, long double __y)\n   { return __builtin_hypotl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline\n+    constexpr\n     typename __gnu_cxx::__promote_2<\n     typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n \t\t\t\t    && __is_arithmetic<_Up>::__value,\n@@ -1344,157 +1364,158 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return hypot(__type(__x), __type(__y));\n     }\n \n-  inline int\n+  constexpr int\n   ilogb(float __x)\n   { return __builtin_ilogbf(__x); }\n \n-  inline int\n+  constexpr int\n   ilogb(long double __x)\n   { return __builtin_ilogbl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   int>::__type\n+    constexpr\n+    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                    int>::__type\n     ilogb(_Tp __x)\n     { return __builtin_ilogb(__x); }\n \n-  inline float\n+  constexpr float\n   lgamma(float __x)\n   { return __builtin_lgammaf(__x); }\n \n-  inline long double\n+  constexpr long double\n   lgamma(long double __x)\n   { return __builtin_lgammal(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                              double>::__type\n     lgamma(_Tp __x)\n     { return __builtin_lgamma(__x); }\n \n-  inline long long\n+  constexpr long long\n   llrint(float __x)\n   { return __builtin_llrintf(__x); }\n \n-  inline long long\n+  constexpr long long\n   llrint(long double __x)\n   { return __builtin_llrintl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   long long>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                              long long>::__type\n     llrint(_Tp __x)\n     { return __builtin_llrint(__x); }\n \n-  inline long long\n+  constexpr long long\n   llround(float __x)\n   { return __builtin_llroundf(__x); }\n \n-  inline long long\n+  constexpr long long\n   llround(long double __x)\n   { return __builtin_llroundl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-                                           long long>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                              long long>::__type\n     llround(_Tp __x)\n     { return __builtin_llround(__x); }\n \n-  inline float\n+  constexpr float\n   log1p(float __x)\n   { return __builtin_log1pf(__x); }\n \n-  inline long double\n+  constexpr long double\n   log1p(long double __x)\n   { return __builtin_log1pl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                              double>::__type\n     log1p(_Tp __x)\n     { return __builtin_log1p(__x); }\n \n   // DR 568.\n-  inline float\n+  constexpr float\n   log2(float __x)\n   { return __builtin_log2f(__x); }\n \n-  inline long double\n+  constexpr long double\n   log2(long double __x)\n   { return __builtin_log2l(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                              double>::__type\n     log2(_Tp __x)\n     { return __builtin_log2(__x); }\n \n-  inline float\n+  constexpr float\n   logb(float __x)\n   { return __builtin_logbf(__x); }\n \n-  inline long double\n+  constexpr long double\n   logb(long double __x)\n   { return __builtin_logbl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                              double>::__type\n     logb(_Tp __x)\n     { return __builtin_logb(__x); }\n \n-  inline long\n+  constexpr long\n   lrint(float __x)\n   { return __builtin_lrintf(__x); }\n \n-  inline long\n+  constexpr long\n   lrint(long double __x)\n   { return __builtin_lrintl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   long>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                              long>::__type\n     lrint(_Tp __x)\n     { return __builtin_lrint(__x); }\n \n-  inline long\n+  constexpr long\n   lround(float __x)\n   { return __builtin_lroundf(__x); }\n \n-  inline long\n+  constexpr long\n   lround(long double __x)\n   { return __builtin_lroundl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   long>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                              long>::__type\n     lround(_Tp __x)\n     { return __builtin_lround(__x); }\n \n-  inline float\n+  constexpr float\n   nearbyint(float __x)\n   { return __builtin_nearbyintf(__x); }\n \n-  inline long double\n+  constexpr long double\n   nearbyint(long double __x)\n   { return __builtin_nearbyintl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                              double>::__type\n     nearbyint(_Tp __x)\n     { return __builtin_nearbyint(__x); }\n \n-  inline float\n+  constexpr float\n   nextafter(float __x, float __y)\n   { return __builtin_nextafterf(__x, __y); }\n \n-  inline long double\n+  constexpr long double\n   nextafter(long double __x, long double __y)\n   { return __builtin_nextafterl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline\n+    constexpr\n     typename __gnu_cxx::__promote_2<\n     typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n \t\t\t\t    && __is_arithmetic<_Up>::__value,\n@@ -1505,30 +1526,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return nextafter(__type(__x), __type(__y));\n     }\n \n-  inline float\n+  constexpr float\n   nexttoward(float __x, long double __y)\n   { return __builtin_nexttowardf(__x, __y); }\n \n-  inline long double\n+  constexpr long double\n   nexttoward(long double __x, long double __y)\n   { return __builtin_nexttowardl(__x, __y); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                              double>::__type\n     nexttoward(_Tp __x, long double __y)\n     { return __builtin_nexttoward(__x, __y); }\n \n-  inline float\n+  constexpr float\n   remainder(float __x, float __y)\n   { return __builtin_remainderf(__x, __y); }\n \n-  inline long double\n+  constexpr long double\n   remainder(long double __x, long double __y)\n   { return __builtin_remainderl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline\n+    constexpr\n     typename __gnu_cxx::__promote_2<\n     typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n \t\t\t\t    && __is_arithmetic<_Up>::__value,\n@@ -1539,16 +1560,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return remainder(__type(__x), __type(__y));\n     }\n \n-  inline float\n+  constexpr float\n   remquo(float __x, float __y, int* __pquo)\n   { return __builtin_remquof(__x, __y, __pquo); }\n \n-  inline long double\n+  constexpr long double\n   remquo(long double __x, long double __y, int* __pquo)\n   { return __builtin_remquol(__x, __y, __pquo); }\n \n   template<typename _Tp, typename _Up>\n-    inline\n+    constexpr\n     typename __gnu_cxx::__promote_2<\n     typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n \t\t\t\t    && __is_arithmetic<_Up>::__value,\n@@ -1559,87 +1580,87 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return remquo(__type(__x), __type(__y), __pquo);\n     }\n \n-  inline float\n+  constexpr float\n   rint(float __x)\n   { return __builtin_rintf(__x); }\n \n-  inline long double\n+  constexpr long double\n   rint(long double __x)\n   { return __builtin_rintl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                              double>::__type\n     rint(_Tp __x)\n     { return __builtin_rint(__x); }\n \n-  inline float\n+  constexpr float\n   round(float __x)\n   { return __builtin_roundf(__x); }\n \n-  inline long double\n+  constexpr long double\n   round(long double __x)\n   { return __builtin_roundl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                              double>::__type\n     round(_Tp __x)\n     { return __builtin_round(__x); }\n \n-  inline float\n+  constexpr float\n   scalbln(float __x, long __ex)\n   { return __builtin_scalblnf(__x, __ex); }\n \n-  inline long double\n+  constexpr long double\n   scalbln(long double __x, long __ex)\n   { return __builtin_scalblnl(__x, __ex); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                              double>::__type\n     scalbln(_Tp __x, long __ex)\n     { return __builtin_scalbln(__x, __ex); }\n  \n-  inline float\n+  constexpr float\n   scalbn(float __x, int __ex)\n   { return __builtin_scalbnf(__x, __ex); }\n \n-  inline long double\n+  constexpr long double\n   scalbn(long double __x, int __ex)\n   { return __builtin_scalbnl(__x, __ex); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                              double>::__type\n     scalbn(_Tp __x, int __ex)\n     { return __builtin_scalbn(__x, __ex); }\n \n-  inline float\n+  constexpr float\n   tgamma(float __x)\n   { return __builtin_tgammaf(__x); }\n \n-  inline long double\n+  constexpr long double\n   tgamma(long double __x)\n   { return __builtin_tgammal(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                              double>::__type\n     tgamma(_Tp __x)\n     { return __builtin_tgamma(__x); }\n  \n-  inline float\n+  constexpr float\n   trunc(float __x)\n   { return __builtin_truncf(__x); }\n \n-  inline long double\n+  constexpr long double\n   trunc(long double __x)\n   { return __builtin_truncl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n-\t\t\t\t\t   double>::__type\n+    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                              double>::__type\n     trunc(_Tp __x)\n     { return __builtin_trunc(__x); }\n "}]}