{"sha": "6bf346d484bb8158e3c54f5353fdad46f9b7231c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJmMzQ2ZDQ4NGJiODE1OGUzYzU0ZjUzNTNmZGFkNDZmOWI3MjMxYw==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@nerim.net", "date": "2002-08-14T03:22:18Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2002-08-14T03:22:18Z"}, "message": "c-pretty-print.h: Guard against multiple inclusion.\n\n        * c-pretty-print.h: Guard against multiple inclusion.\n        Robustify macros.\n        (pp_c_attributes): Declare.\n        * c-pretty-print.c (pp_c_attributes): New function.\n\nFrom-SVN: r56273", "tree": {"sha": "cb98da8bf29b2cfca3865ce5df2f94daa1fe9f0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb98da8bf29b2cfca3865ce5df2f94daa1fe9f0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bf346d484bb8158e3c54f5353fdad46f9b7231c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bf346d484bb8158e3c54f5353fdad46f9b7231c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bf346d484bb8158e3c54f5353fdad46f9b7231c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bf346d484bb8158e3c54f5353fdad46f9b7231c/comments", "author": null, "committer": null, "parents": [{"sha": "cbf2f4797d982be4607bcb1936dc8309e45bed2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbf2f4797d982be4607bcb1936dc8309e45bed2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbf2f4797d982be4607bcb1936dc8309e45bed2f"}], "stats": {"total": 170, "additions": 113, "deletions": 57}, "files": [{"sha": "f2267ead9a3e18653100fdc88b08839f4652b56e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bf346d484bb8158e3c54f5353fdad46f9b7231c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bf346d484bb8158e3c54f5353fdad46f9b7231c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6bf346d484bb8158e3c54f5353fdad46f9b7231c", "patch": "@@ -1,3 +1,10 @@\n+2002-08-14  Gabriel Dos Reis  <gdr@nerim.net>\n+\n+\t* c-pretty-print.h: Guard against multiple inclusion.\n+\tRobustify macros.\n+\t(pp_c_attributes): Declare.\n+\t* c-pretty-print.c (pp_c_attributes): New function.\n+\n 2002-08-13  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* m68k.c (m68k_output_function_prologue,"}, {"sha": "a04b92fddd0f313d4280a80cf12f67a4bc85d605", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bf346d484bb8158e3c54f5353fdad46f9b7231c/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bf346d484bb8158e3c54f5353fdad46f9b7231c/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=6bf346d484bb8158e3c54f5353fdad46f9b7231c", "patch": "@@ -259,6 +259,35 @@ pp_c_parameter_declaration (pp, t)\n   pp_unsupported_tree (pp, t);\n }\n \n+/* Pretty-print ATTRIBUTES using GNU C extension syntax.  */\n+void \n+pp_c_attributes (pp, attributes)\n+     c_pretty_printer pp;\n+     tree attributes;\n+{\n+  if (attributes == NULL_TREE)\n+    return;\n+  \n+  pp_c_identifier (pp, \"__attribute__\");\n+  pp_c_left_paren (pp); \n+  pp_c_left_paren (pp);\n+  for (; attributes != NULL_TREE; attributes = TREE_CHAIN (attributes))\n+    {\n+      pp_tree_identifier (pp, TREE_PURPOSE (attributes));\n+      if (TREE_VALUE (attributes))\n+\t{\n+\t  pp_c_left_paren (pp);\n+\t  pp_c_expression_list (pp, TREE_VALUE (attributes));\n+\t  pp_c_right_paren (pp);\n+\t}\n+      \n+      if (TREE_CHAIN (attributes))\n+\tpp_separate_with (pp, ',');\n+    }\n+  pp_c_right_paren (pp);\n+  pp_c_right_paren (pp);\n+}\n+\n \f\n /* Expressions.  */\n "}, {"sha": "0ab702e0a51abc8819b78186c7389931f02fdd38", "filename": "gcc/c-pretty-print.h", "status": "modified", "additions": 77, "deletions": 57, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bf346d484bb8158e3c54f5353fdad46f9b7231c/gcc%2Fc-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bf346d484bb8158e3c54f5353fdad46f9b7231c/gcc%2Fc-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.h?ref=6bf346d484bb8158e3c54f5353fdad46f9b7231c", "patch": "@@ -19,6 +19,9 @@ along with GCC; see the file COPYING.  If not, write to the Free\n Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n+#ifndef GCC_C_PRETTY_PRINTER\n+#define GCC_C_PRETTY_PRINTER\n+\n #include \"tree.h\"\n #include \"c-common.h\"\n #include \"pretty-print.h\"\n@@ -59,80 +62,95 @@ struct c_pretty_print_info\n   c_pretty_print_fn assignment_expression;\n };\n \n-#define pp_c_left_paren(PPI)             \\\n-   do {                                  \\\n-     pp_left_paren (PPI);                \\\n-     (PPI)->base.padding = pp_none;      \\\n+#define pp_c_left_paren(PPI)                       \\\n+   do {                                            \\\n+     pp_left_paren (PPI);                          \\\n+     pp_c_base (PPI)->base.padding = pp_none;      \\\n    } while (0)\n-#define pp_c_right_paren(PPI)            \\\n-   do {                                  \\\n-     pp_right_paren (PPI);               \\\n-     (PPI)->base.padding = pp_none;      \\\n+#define pp_c_right_paren(PPI)                      \\\n+   do {                                            \\\n+     pp_right_paren (PPI);                         \\\n+     pp_c_base (PPI)->base.padding = pp_none;      \\\n    } while (0)\n-#define pp_c_left_bracket(PPI)           \\\n-   do {                                  \\\n-     pp_left_bracket (PPI);              \\\n-     (PPI)->base.padding = pp_none;      \\\n+#define pp_c_left_bracket(PPI)                     \\\n+   do {                                            \\\n+     pp_left_bracket (PPI);                        \\\n+     pp_c_base (PPI)->base.padding = pp_none;      \\\n    } while (0)\n-#define pp_c_right_bracket(PPI)          \\\n-   do {                                  \\\n-     pp_right_bracket (PPI);             \\\n-     (PPI)->base.padding = pp_none;      \\\n+#define pp_c_right_bracket(PPI)                    \\\n+   do {                                            \\\n+     pp_right_bracket (PPI);                       \\\n+     pp_c_base (PPI)->base.padding = pp_none;      \\\n    } while (0)\n-#define pp_c_whitespace(PPI)             \\\n-   do {                                  \\\n-     pp_whitespace (PPI);                \\\n-     (PPI)->base.padding = pp_none;      \\\n+#define pp_c_whitespace(PPI)                       \\\n+   do {                                            \\\n+     pp_whitespace (PPI);                          \\\n+     pp_c_base (PPI)->base.padding = pp_none;      \\\n    } while (0)\n-#define pp_c_maybe_whitespace(PPI)       \\\n-   do {                                  \\\n-     if ((PPI)->base.padding != pp_none) \\\n-       pp_c_whitespace (PPI);            \\\n+#define pp_c_maybe_whitespace(PPI)                 \\\n+   do {                                            \\\n+     if (pp_c_base (PPI)->base.padding != pp_none) \\\n+       pp_c_whitespace (PPI);                      \\\n    } while (0)\n-#define pp_c_identifier(PPI, ID)         \\\n-   do {                                  \\\n-     pp_c_maybe_whitespace (PPI);        \\\n-     pp_identifier (PPI, ID);            \\\n-     (PPI)->base.padding = pp_before;    \\\n+#define pp_c_identifier(PPI, ID)                   \\\n+   do {                                            \\\n+     pp_c_maybe_whitespace (PPI);                  \\\n+     pp_identifier (PPI, ID);                      \\\n+     pp_c_base (PPI)->base.padding = pp_before;    \\\n    } while (0)\n      \n-#define pp_c_tree_identifier(PPI, ID)    \\\n+#define pp_c_tree_identifier(PPI, ID)              \\\n    pp_c_identifier (PPI, IDENTIFIER_POINTER (ID))\n \n-#define pp_buffer(PPI) (PPI)->base.buffer\n-\n-#define pp_declaration(PPI, T)            (*(PPI)->declaration) (PPI, T)\n-#define pp_declaration_specifiers(PPI, D) \\\n-   (*(PPI)->declaration_specifiers) (PPI, D)\n-#define pp_type_specifier(PPI, D)         (*(PPI)->type_specifier) (PPI, D)\n-#define pp_declarator(PPI, D)             (*(PPI)->declarator) (PPI, D)\n-#define pp_direct_declarator(PPI, D)      (*(PPI)->direct_declarator) (PPI, D)\n-#define pp_parameter_declaration(PPI, T)  \\\n-  (*(PPI)->parameter_declaration) (PPI, T)\n-#define pp_type_id(PPI, D)                (*(PPI)->type_id) (PPI, D)\n-\n-#define pp_statement(PPI, S)              (*(PPI)->statement) (PPI, S)\n-\n-#define pp_primary_expression(PPI, E)     (*(PPI)->primary_expression) (PPI, E)\n-#define pp_postfix_expression(PPI, E)     (*(PPI)->postfix_expression) (PPI, E)\n-#define pp_unary_expression(PPI, E)       (*(PPI)->unary_expression) (PPI, E)\n-#define pp_initializer(PPI, E)            (*(PPI)->initializer) (PPI, E)\n-#define pp_multiplicative_expression(PPI, E)\\\n-   (*(PPI)->multiplicative_expression) (PPI, E)\n-#define pp_conditional_expression(PPI, E)  \\\n-   (*(PPI)->conditional_expression) (PPI, E)\n-#define pp_assignment_expression(PPI, E)  \\\n-   (*(PPI)->assignment_expression) (PPI, E)\n-\n+/* Returns the 'output_buffer *' associated with a PRETTY-PRINTER, the latter\n+   being something digestible by pp_c_base.  */\n+#define pp_buffer(PPI) pp_c_base (PPI)->base.buffer\n+\n+#define pp_declaration(PPI, T)                    \\\n+   (*pp_c_base (PPI)->declaration) (pp_c_base (PPI), T)\n+#define pp_declaration_specifiers(PPI, D)         \\\n+   (*pp_c_base (PPI)->declaration_specifiers) (pp_c_base (PPI), D)\n+#define pp_type_specifier(PPI, D)                 \\\n+   (*pp_c_base (PPI)->type_specifier) (pp_c_base (PPI), D)\n+#define pp_declarator(PPI, D)                     \\\n+   (*pp_c_base (PPI)->declarator) (pp_c_base (PPI), D)\n+#define pp_direct_declarator(PPI, D)              \\\n+   (*pp_c_base (PPI)->direct_declarator) (pp_c_base (PPI), D)\n+#define pp_parameter_declaration(PPI, T)          \\\n+  (*pp_c_base (PPI)->parameter_declaration) (pp_c_base (PPI), T)\n+#define pp_type_id(PPI, D)                        \\\n+  (*pp_c_base (PPI)->type_id) (pp_c_base (PPI), D)\n+\n+#define pp_statement(PPI, S)                      \\\n+  (*pp_c_base (PPI)->statement) (pp_c_base (PPI), S)\n+\n+#define pp_primary_expression(PPI, E)             \\\n+  (*pp_c_base (PPI)->primary_expression) (pp_c_base (PPI), E)\n+#define pp_postfix_expression(PPI, E)             \\\n+  (*pp_c_base (PPI)->postfix_expression) (pp_c_base (PPI), E)\n+#define pp_unary_expression(PPI, E)               \\\n+  (*pp_c_base (PPI)->unary_expression) (pp_c_base (PPI), E)\n+#define pp_initializer(PPI, E)                    \\\n+  (*pp_c_base (PPI)->initializer) (pp_c_base (PPI), E)\n+#define pp_multiplicative_expression(PPI, E)      \\\n+   (*pp_c_base (PPI)->multiplicative_expression) (pp_c_base (PPI), E)\n+#define pp_conditional_expression(PPI, E)         \\\n+   (*pp_c_base (PPI)->conditional_expression) (pp_c_base (PPI), E)\n+#define pp_assignment_expression(PPI, E)          \\\n+   (*pp_c_base (PPI)->assignment_expression) (pp_c_base (PPI), E)\n+\n+\n+/* Returns the c_pretty_printer base object of PRETTY-PRINTER.  This\n+   macro must be overriden by any subclass of c_pretty_print_info.  */\n+#define pp_c_base(PP)  (PP)\n \n extern void pp_c_pretty_printer_init   PARAMS ((c_pretty_printer));\n \n /* Declarations.  */\n+void pp_c_attributes                   PARAMS ((c_pretty_printer, tree));\n void pp_c_cv_qualifier                 PARAMS ((c_pretty_printer, int));\n void pp_c_parameter_declaration_clause PARAMS ((c_pretty_printer, tree));\n void pp_c_declaration                  PARAMS ((c_pretty_printer, tree));\n-void pp_c_statement                    PARAMS ((c_pretty_printer, tree));\n-void pp_c_expression                   PARAMS ((c_pretty_printer, tree));\n /* Statements.  */\n void pp_c_statement                    PARAMS ((c_pretty_printer, tree));\n /* Expressions.  */\n@@ -143,3 +161,5 @@ void pp_c_cast_expression              PARAMS ((c_pretty_printer, tree));\n void pp_c_postfix_expression           PARAMS ((c_pretty_printer, tree));\n void pp_c_initializer                  PARAMS ((c_pretty_printer, tree));\n void pp_c_literal                      PARAMS ((c_pretty_printer, tree));\n+\n+#endif /* GCC_C_PRETTY_PRINTER */"}]}