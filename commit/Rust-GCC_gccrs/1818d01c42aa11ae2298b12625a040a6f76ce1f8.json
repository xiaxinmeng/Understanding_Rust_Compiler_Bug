{"sha": "1818d01c42aa11ae2298b12625a040a6f76ce1f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgxOGQwMWM0MmFhMTFhZTIyOThiMTI2MjVhMDQwYTZmNzZjZTFmOA==", "commit": {"author": {"name": "Christian Bruel", "email": "christian.bruel@st.com", "date": "2013-04-22T07:16:21Z"}, "committer": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2013-04-22T07:16:21Z"}, "message": "re PR target/56995 (sh4 -mfmovd: ICE in find_costs_and_classes)\n\n2013-04-18  Christian Bruel  <christian.bruel@st.com>\n\n       PR target/56995\n       * config/sh/sh.h (enum reg_class): Remove DF_HI_REGS.\n       (REG_CLASS_NAMES): Idem.\n       (REG_CLASS_CONTENTS): Idem.\n       (REGCLASS_HAS_FP_REG): Idem.\n       * config/sh/sh.c (sh_cannot_change_mode_class): Idem.\n       (sh_conditional_register_usage): Idem.\n\nFrom-SVN: r198123", "tree": {"sha": "721b4cab3666b6b5635cfb48a09c3d4e3a8573f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/721b4cab3666b6b5635cfb48a09c3d4e3a8573f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1818d01c42aa11ae2298b12625a040a6f76ce1f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1818d01c42aa11ae2298b12625a040a6f76ce1f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1818d01c42aa11ae2298b12625a040a6f76ce1f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1818d01c42aa11ae2298b12625a040a6f76ce1f8/comments", "author": null, "committer": null, "parents": [{"sha": "3e8a33f96b74947776324692e9f0b91fa93c4771", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e8a33f96b74947776324692e9f0b91fa93c4771", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e8a33f96b74947776324692e9f0b91fa93c4771"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "261b6a771dbbf843894fdf0ad53009c22f50add8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1818d01c42aa11ae2298b12625a040a6f76ce1f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1818d01c42aa11ae2298b12625a040a6f76ce1f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1818d01c42aa11ae2298b12625a040a6f76ce1f8", "patch": "@@ -1,3 +1,13 @@\n+2013-04-18  Christian Bruel  <christian.bruel@st.com>\n+\n+\tPR target/56995\n+\t* config/sh/sh.h (enum reg_class): Remove DF_HI_REGS.\n+\t(REG_CLASS_NAMES): Idem.\n+\t(REG_CLASS_CONTENTS): Idem.\n+\t(REGCLASS_HAS_FP_REG): Idem.\n+\t* config/sh/sh.c (sh_cannot_change_mode_class): Idem.\n+\t(sh_conditional_register_usage): Idem.\n+\n 2013-04-21  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-forwprop.c (simplify_conversion_from_bitmask): New function."}, {"sha": "c61952e103fce36a5b8837973f68cf4f80b0f03d", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1818d01c42aa11ae2298b12625a040a6f76ce1f8/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1818d01c42aa11ae2298b12625a040a6f76ce1f8/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=1818d01c42aa11ae2298b12625a040a6f76ce1f8", "patch": "@@ -12163,7 +12163,7 @@ sh_cannot_change_mode_class (enum machine_mode from, enum machine_mode to,\n       else\n \t{\n \t  if (GET_MODE_SIZE (from) < 8)\n-\t    return reg_classes_intersect_p (DF_HI_REGS, rclass);\n+\t    return reg_classes_intersect_p (DF_REGS, rclass);\n \t}\n     }\n   return false;\n@@ -13210,9 +13210,7 @@ sh_conditional_register_usage (void)\n       call_really_used_regs[MACH_REG] = 0;\n       call_really_used_regs[MACL_REG] = 0;\n     }\n-  for (regno = FIRST_FP_REG + (TARGET_LITTLE_ENDIAN != 0);\n-       regno <= LAST_FP_REG; regno += 2)\n-    SET_HARD_REG_BIT (reg_class_contents[DF_HI_REGS], regno);\n+\n   if (TARGET_SHMEDIA)\n     {\n       for (regno = FIRST_TARGET_REG; regno <= LAST_TARGET_REG; regno ++)"}, {"sha": "8e27030c6a0833338b6044af206f32f4b42fcd82", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1818d01c42aa11ae2298b12625a040a6f76ce1f8/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1818d01c42aa11ae2298b12625a040a6f76ce1f8/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=1818d01c42aa11ae2298b12625a040a6f76ce1f8", "patch": "@@ -984,7 +984,6 @@ enum reg_class\n   GENERAL_REGS,\n   FP0_REGS,\n   FP_REGS,\n-  DF_HI_REGS,\n   DF_REGS,\n   FPSCR_REGS,\n   GENERAL_FP_REGS,\n@@ -1010,7 +1009,6 @@ enum reg_class\n   \"GENERAL_REGS\",\t\\\n   \"FP0_REGS\",\t\t\\\n   \"FP_REGS\",\t\t\\\n-  \"DF_HI_REGS\",\t\t\\\n   \"DF_REGS\",\t\t\\\n   \"FPSCR_REGS\",\t\t\\\n   \"GENERAL_FP_REGS\",\t\\\n@@ -1046,8 +1044,6 @@ enum reg_class\n   { 0x00000000, 0x00000000, 0x00000001, 0x00000000, 0x00000000 },\t\\\n /* FP_REGS:  */\t\t\t\t\t\t\t\t\\\n   { 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000 },\t\\\n-/* DF_HI_REGS:  Initialized in TARGET_CONDITIONAL_REGISTER_USAGE.  */\t\\\n-  { 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x0000ff00 },\t\\\n /* DF_REGS:  */\t\t\t\t\t\t\t\t\\\n   { 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x0000ff00 },\t\\\n /* FPSCR_REGS:  */\t\t\t\t\t\t\t\\\n@@ -1922,7 +1918,7 @@ struct sh_args {\n \n #define REGCLASS_HAS_FP_REG(CLASS) \\\n   ((CLASS) == FP0_REGS || (CLASS) == FP_REGS \\\n-   || (CLASS) == DF_REGS || (CLASS) == DF_HI_REGS)\n+   || (CLASS) == DF_REGS)\n \n /* ??? Perhaps make MEMORY_MOVE_COST depend on compiler option?  This\n    would be so that people with slow memory systems could generate"}, {"sha": "2ba5044301775f03db79a0d4e82552b1f4a762f0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1818d01c42aa11ae2298b12625a040a6f76ce1f8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1818d01c42aa11ae2298b12625a040a6f76ce1f8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1818d01c42aa11ae2298b12625a040a6f76ce1f8", "patch": "@@ -1,3 +1,8 @@\n+2013-04-18  Christian Bruel  <christian.bruel@st.com>\n+\n+\tPR target/56995\n+\t* gcc.target/sh/mfmovd.c: Add new function and check hard_float.\n+\n 2013-04-21  Jeff Law  <law@redhat.com>\n \n \t* gcc.dg/tree-ssa/forwprop-26.c: New test."}, {"sha": "3b7564aeb33efa3b6769b7aa862fa3369863dc4a", "filename": "gcc/testsuite/gcc.target/sh/mfmovd.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1818d01c42aa11ae2298b12625a040a6f76ce1f8/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fmfmovd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1818d01c42aa11ae2298b12625a040a6f76ce1f8/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fmfmovd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fmfmovd.c?ref=1818d01c42aa11ae2298b12625a040a6f76ce1f8", "patch": "@@ -1,8 +1,9 @@\n /* Verify that we generate fmov.d instructions to move doubles when -mfmovd \n    option is enabled.  */\n /* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-require-effective-target hard_float } */\n /* { dg-options \"-mfmovd\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a\" \"-m2a-single\" \"-m4\" \"-m4-single\" \"-m4-100\" \"-m4-100-single\" \"-m4-200\" \"-m4-200-single\" \"-m4-300\" \"-m4-300-single\" \"-m4a\" \"-m4a-single\" } }  */\n+/* { dg-skip-if \"\" { *-*-* }  { \"*-single-only\" } { \"\" } } */\n /* { dg-final { scan-assembler \"fmov.d\" } } */\n \n extern double g;\n@@ -13,3 +14,9 @@ f (double d)\n   g = d;\n }\n \n+extern float h;\n+\n+void f2 ()\n+{\n+  h = g;\n+}"}]}