{"sha": "d996799a507f9f4c379b55b004233be92fa63380", "node_id": "C_kwDOANBUbNoAKGQ5OTY3OTlhNTA3ZjlmNGMzNzliNTViMDA0MjMzYmU5MmZhNjMzODA", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-19T08:19:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-19T10:29:33Z"}, "message": "tree-optimization/102827 - avoid stmts in preheader\n\nThe PR shows that when carefully crafting the runtime alias\ncondition in the vectorizer we might end up using defs from\nthe loop preheader but will end up inserting the condition\nbefore the .LOOP_VECTORIZED call.  So the following makes\nsure to insert invariants before that when we versioned the\nloop, preserving the invariant the vectorizer relies on.\n\n2021-10-19  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/102827\n\t* tree-if-conv.c (predicate_statements): Add pe parameter\n\tand use that edge to insert invariant stmts on.\n\t(combine_blocks): Pass through pe.\n\t(tree_if_conversion): Compute the edge to insert invariant\n\tstmts on and pass it along.\n\n\t* gcc.dg/pr102827.c: New testcase.", "tree": {"sha": "eca587f2c3ee0c5365f7131853eb6dd6c1f2f8bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eca587f2c3ee0c5365f7131853eb6dd6c1f2f8bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d996799a507f9f4c379b55b004233be92fa63380", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d996799a507f9f4c379b55b004233be92fa63380", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d996799a507f9f4c379b55b004233be92fa63380", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d996799a507f9f4c379b55b004233be92fa63380/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f98359ba9d3775319fb3181009be7d3dafe9ba15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f98359ba9d3775319fb3181009be7d3dafe9ba15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f98359ba9d3775319fb3181009be7d3dafe9ba15"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "eed3eba32d1e30ccfa9f9cf0eff4a930df95f3e4", "filename": "gcc/testsuite/gcc.dg/pr102827.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d996799a507f9f4c379b55b004233be92fa63380/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102827.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d996799a507f9f4c379b55b004233be92fa63380/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102827.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102827.c?ref=d996799a507f9f4c379b55b004233be92fa63380", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -ftree-vectorize --param ssa-name-def-chain-limit=0\" } */\n+/* { dg-additional-options \"-mavx\" { target { x86_64-*-* i?86-*-* } } } */\n+\n+void\n+test_double_double_nugt_var (double *dest, double *src, int b, int i)\n+{\n+  while (i < 1)\n+    {\n+      dest[i] = b ? src[i] : 0.0;\n+      ++i;\n+    }\n+}"}, {"sha": "b165dc0c17f44ac0333bfd97c6b6f0362ea6a32e", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d996799a507f9f4c379b55b004233be92fa63380/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d996799a507f9f4c379b55b004233be92fa63380/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=d996799a507f9f4c379b55b004233be92fa63380", "patch": "@@ -2490,7 +2490,7 @@ predicate_rhs_code (gassign *stmt, tree mask, tree cond,\n */\n \n static void\n-predicate_statements (loop_p loop)\n+predicate_statements (loop_p loop, edge pe)\n {\n   unsigned int i, orig_loop_num_nodes = loop->num_nodes;\n   auto_vec<int, 1> vect_sizes;\n@@ -2596,8 +2596,7 @@ predicate_statements (loop_p loop)\n \t\t  if (CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (stmt2))\n \t\t      && expr_invariant_in_loop_p (loop,\n \t\t\t\t\t\t   gimple_assign_rhs1 (stmt2)))\n-\t\t    gsi_insert_on_edge_immediate (loop_preheader_edge (loop),\n-\t\t\t\t\t\t  stmt2);\n+\t\t    gsi_insert_on_edge_immediate (pe, stmt2);\n \t\t  else if (first)\n \t\t    {\n \t\t      gsi_insert_before (&gsi, stmt2, GSI_NEW_STMT);\n@@ -2679,7 +2678,7 @@ remove_conditions_and_labels (loop_p loop)\n    blocks.  Replace PHI nodes with conditional modify expressions.  */\n \n static void\n-combine_blocks (class loop *loop)\n+combine_blocks (class loop *loop, edge pe)\n {\n   basic_block bb, exit_bb, merge_target_bb;\n   unsigned int orig_loop_num_nodes = loop->num_nodes;\n@@ -2692,7 +2691,7 @@ combine_blocks (class loop *loop)\n   predicate_all_scalar_phis (loop);\n \n   if (need_to_predicate || need_to_rewrite_undefined)\n-    predicate_statements (loop);\n+    predicate_statements (loop, pe);\n \n   /* Merge basic blocks.  */\n   exit_bb = NULL;\n@@ -3187,6 +3186,7 @@ tree_if_conversion (class loop *loop, vec<gimple *> *preds)\n   bool aggressive_if_conv;\n   class loop *rloop;\n   bitmap exit_bbs;\n+  edge pe;\n \n  again:\n   rloop = NULL;\n@@ -3218,6 +3218,9 @@ tree_if_conversion (class loop *loop, vec<gimple *> *preds)\n \t  || loop->dont_vectorize))\n     goto cleanup;\n \n+  /* The edge to insert invariant stmts on.  */\n+  pe = loop_preheader_edge (loop);\n+\n   /* Since we have no cost model, always version loops unless the user\n      specified -ftree-loop-if-convert or unless versioning is required.\n      Either version this loop, or if the pattern is right for outer-loop\n@@ -3255,12 +3258,18 @@ tree_if_conversion (class loop *loop, vec<gimple *> *preds)\n \t  gcc_assert (nloop->inner && nloop->inner->next == NULL);\n \t  rloop = nloop->inner;\n \t}\n+      else\n+\t/* If we versioned loop then make sure to insert invariant\n+\t   stmts before the .LOOP_VECTORIZED check since the vectorizer\n+\t   will re-use that for things like runtime alias versioning\n+\t   whose condition can end up using those invariants.  */\n+\tpe = single_pred_edge (gimple_bb (preds->last ()));\n     }\n \n   /* Now all statements are if-convertible.  Combine all the basic\n      blocks into one huge basic block doing the if-conversion\n      on-the-fly.  */\n-  combine_blocks (loop);\n+  combine_blocks (loop, pe);\n \n   /* Perform local CSE, this esp. helps the vectorizer analysis if loads\n      and stores are involved.  CSE only the loop body, not the entry"}]}