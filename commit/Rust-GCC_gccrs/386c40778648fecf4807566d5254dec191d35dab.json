{"sha": "386c40778648fecf4807566d5254dec191d35dab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg2YzQwNzc4NjQ4ZmVjZjQ4MDc1NjZkNTI1NGRlYzE5MWQzNWRhYg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2019-10-15T11:20:06Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2019-10-15T11:20:06Z"}, "message": "[C++ PATCH] build_clone cleanup\n\nhttps://gcc.gnu.org/ml/gcc-patches/2019-10/msg01069.html\nbuild_clone is recursive when applied to a template, but I found the control flow confusing. this makes it clearer and moves some decls to their initializers.\n\n\t* class.c (build_clone): Refactor to clarify recursiveness.\n\nFrom-SVN: r276992", "tree": {"sha": "159f7184ec9acb86a40639f090c6486ffe9ecbb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/159f7184ec9acb86a40639f090c6486ffe9ecbb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/386c40778648fecf4807566d5254dec191d35dab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/386c40778648fecf4807566d5254dec191d35dab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/386c40778648fecf4807566d5254dec191d35dab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/386c40778648fecf4807566d5254dec191d35dab/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c2e7cd91aaa0fa022c8f17f4d5db214439ef178", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c2e7cd91aaa0fa022c8f17f4d5db214439ef178", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c2e7cd91aaa0fa022c8f17f4d5db214439ef178"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "a2fc0720b47a09e6fddd4880f79999a89f477733", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386c40778648fecf4807566d5254dec191d35dab/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386c40778648fecf4807566d5254dec191d35dab/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=386c40778648fecf4807566d5254dec191d35dab", "patch": "@@ -1,3 +1,7 @@\n+2019-10-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* class.c (build_clone): Refactor to clarify recursiveness.\n+\n 2019-10-14  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/91930 - ICE with constrained inherited default ctor."}, {"sha": "b9266b39e287705a7b287ddfdb683ce09bea19e3", "filename": "gcc/cp/class.c", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386c40778648fecf4807566d5254dec191d35dab/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386c40778648fecf4807566d5254dec191d35dab/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=386c40778648fecf4807566d5254dec191d35dab", "patch": "@@ -4581,16 +4581,15 @@ check_methods (tree t)\n static tree\n build_clone (tree fn, tree name)\n {\n-  tree parms;\n-  tree clone;\n-\n   /* Copy the function.  */\n-  clone = copy_decl (fn);\n+  tree clone = copy_decl (fn);\n   /* Reset the function name.  */\n   DECL_NAME (clone) = name;\n   /* Remember where this function came from.  */\n   DECL_ABSTRACT_ORIGIN (clone) = fn;\n-  /* Make it easy to find the CLONE given the FN.  */\n+\n+  /* Make it easy to find the CLONE given the FN.  Note the\n+     template_result of a template will be chained this way too.  */\n   DECL_CHAIN (clone) = DECL_CHAIN (fn);\n   DECL_CHAIN (fn) = clone;\n \n@@ -4599,19 +4598,18 @@ build_clone (tree fn, tree name)\n     {\n       tree result = build_clone (DECL_TEMPLATE_RESULT (clone), name);\n       DECL_TEMPLATE_RESULT (clone) = result;\n+\n       DECL_TEMPLATE_INFO (result) = copy_node (DECL_TEMPLATE_INFO (result));\n       DECL_TI_TEMPLATE (result) = clone;\n+\n       TREE_TYPE (clone) = TREE_TYPE (result);\n       return clone;\n     }\n-  else\n-    {\n-      /* Clone constraints.  */\n-      if (flag_concepts)\n-        if (tree ci = get_constraints (fn))\n-          set_constraints (clone, copy_node (ci));\n-    }\n \n+  if (flag_concepts)\n+    /* Clone constraints.  */\n+    if (tree ci = get_constraints (fn))\n+      set_constraints (clone, copy_node (ci));\n \n   SET_DECL_ASSEMBLER_NAME (clone, NULL_TREE);\n   DECL_CLONED_FUNCTION (clone) = fn;\n@@ -4623,8 +4621,7 @@ build_clone (tree fn, tree name)\n   if (name == base_dtor_identifier)\n     {\n       DECL_VIRTUAL_P (clone) = 0;\n-      if (TREE_CODE (clone) != TEMPLATE_DECL)\n-\tDECL_VINDEX (clone) = NULL_TREE;\n+      DECL_VINDEX (clone) = NULL_TREE;\n     }\n \n   bool ctor_omit_inherited_parms_p = ctor_omit_inherited_parms (clone);\n@@ -4689,7 +4686,7 @@ build_clone (tree fn, tree name)\n   if (ctor_omit_inherited_parms_p)\n     DECL_CHAIN (DECL_CHAIN (DECL_ARGUMENTS (clone))) = NULL_TREE;\n \n-  for (parms = DECL_ARGUMENTS (clone); parms; parms = DECL_CHAIN (parms))\n+  for (tree parms = DECL_ARGUMENTS (clone); parms; parms = DECL_CHAIN (parms))\n     {\n       DECL_CONTEXT (parms) = clone;\n       cxx_dup_lang_specific_decl (parms);"}]}