{"sha": "c31b8e1b17c56b489399c674ed242c657dd8bf62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMxYjhlMWIxN2M1NmI0ODkzOTljNjc0ZWQyNDJjNjU3ZGQ4YmY2Mg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-07-05T18:12:47Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-07-05T18:12:47Z"}, "message": "tree-mudflap.c: Include cgraph.h.\n\ngcc:\n\t* tree-mudflap.c: Include cgraph.h.\n\t(mf_init_extern_trees): Rename to mudflap_init.  Export.\n\tRewrite to create synthetic declarations instead of looking\n\tup declarations from mf-runtime.h.\n\t(mf_make_builtin, mf_make_cache_struct_type): New functions.\n\t(mf_cache_shift_decl, mf_cache_mask_decl, mf_unregister_fndecl):\n\tCorrect commentary.\n\t(execute_mudflap_function_decls, mudflap_register_call):\n\tDon't call mf_init_extern_trees.\n\t(mudflap_finish_file): Use cgraph_build_static_cdtor.\n\n\t* tree-mudflap.h: Update prototypes.\n\t* c-mudflap.c: Delete file.\n\t* c-common.c: Include tree-mudflap.h.\n\t(c_common_nodes_and_builtins): Call mudflap_init if appropriate.\n\t* Makefile.in: Remove all references to c-mudflap.o.\n\tUpdate dependencies.\ngcc/cp:\n\t* cp-mudflap.c: Delete file.\n\t* Makefile.in: Remove all references to cp-mudflap.o.\nlibmudflap:\n\t* mf-runtime.h.in: Wrap declarations of struct __mf_cache,\n\t__mf_lookup_cache, __mf_lc_mask, or __mf_lc_shift in\n\t#ifndef _MUDFLAP.\n\nFrom-SVN: r84126", "tree": {"sha": "8cc207ca91278cefb1806c30086cba43c421cadc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cc207ca91278cefb1806c30086cba43c421cadc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c31b8e1b17c56b489399c674ed242c657dd8bf62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c31b8e1b17c56b489399c674ed242c657dd8bf62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c31b8e1b17c56b489399c674ed242c657dd8bf62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c31b8e1b17c56b489399c674ed242c657dd8bf62/comments", "author": null, "committer": null, "parents": [{"sha": "5dbf8812f12761e10ca9b81be80f27c3ec256873", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dbf8812f12761e10ca9b81be80f27c3ec256873", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dbf8812f12761e10ca9b81be80f27c3ec256873"}], "stats": {"total": 375, "additions": 137, "deletions": 238}, "files": [{"sha": "eefcd34a4e0a8f385b6199762df3cde8d0248fc1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31b8e1b17c56b489399c674ed242c657dd8bf62/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31b8e1b17c56b489399c674ed242c657dd8bf62/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c31b8e1b17c56b489399c674ed242c657dd8bf62", "patch": "@@ -1,3 +1,23 @@\n+2004-07-05  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* tree-mudflap.c: Include cgraph.h.\n+\t(mf_init_extern_trees): Rename to mudflap_init.  Export.\n+\tRewrite to create synthetic declarations instead of looking\n+\tup declarations from mf-runtime.h.\n+\t(mf_make_builtin, mf_make_cache_struct_type): New functions.\n+\t(mf_cache_shift_decl, mf_cache_mask_decl, mf_unregister_fndecl):\n+\tCorrect commentary.\n+\t(execute_mudflap_function_decls, mudflap_register_call):\n+\tDon't call mf_init_extern_trees.\n+\t(mudflap_finish_file): Use cgraph_build_static_cdtor.\n+\n+\t* tree-mudflap.h: Update prototypes.\n+\t* c-mudflap.c: Delete file.\n+\t* c-common.c: Include tree-mudflap.h.\n+\t(c_common_nodes_and_builtins): Call mudflap_init if appropriate.\n+\t* Makefile.in: Remove all references to c-mudflap.o.\n+\tUpdate dependencies.\n+\n 2004-07-05  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* pa.md (prefetch, prefetch_32, prefetch_64): Only allow short"}, {"sha": "5a7929ed1ea8f08b79ad172cbcb442c39c2e878c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31b8e1b17c56b489399c674ed242c657dd8bf62/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31b8e1b17c56b489399c674ed242c657dd8bf62/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c31b8e1b17c56b489399c674ed242c657dd8bf62", "patch": "@@ -878,7 +878,7 @@ C_AND_OBJC_OBJS = attribs.o c-errors.o c-lex.o c-pragma.o c-decl.o c-typeck.o \\\n   c-convert.o c-aux-info.o c-common.o c-opts.o c-format.o c-semantics.o \\\n   c-incpath.o cppdefault.o c-ppoutput.o c-cppbuiltin.o prefix.o \\\n   c-objc-common.o c-dump.o c-pch.o $(C_TARGET_OBJS) \\\n-  c-gimplify.o tree-mudflap.o c-mudflap.o c-pretty-print.o\n+  c-gimplify.o tree-mudflap.o c-pretty-print.o\n \n # Language-specific object files for C.\n C_OBJS = c-parse.o c-lang.o stub-objc.o $(C_AND_OBJC_OBJS)\n@@ -1414,7 +1414,7 @@ c-common.o : c-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n \t$(OBSTACK_H) $(C_COMMON_H) $(FLAGS_H) toplev.h output.h c-pragma.h intl.h \\\n \t$(GGC_H) $(EXPR_H) $(TM_P_H) builtin-types.def builtin-attrs.def \\\n \t$(DIAGNOSTIC_H) gt-c-common.h langhooks.h varray.h $(RTL_H) \\\n-\t$(TARGET_H) $(C_TREE_H) tree-iterator.h langhooks.h\n+\t$(TARGET_H) $(C_TREE_H) tree-iterator.h langhooks.h tree-mudflap.h\n c-pretty-print.o : c-pretty-print.c $(C_PRETTY_PRINT_H) \\\n \t$(C_COMMON_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) real.h \\\n \t$(DIAGNOSTIC_H)\n@@ -1713,10 +1713,7 @@ tree-gimple.o : tree-gimple.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(EXPR_H) \\\n tree-mudflap.o : $(CONFIG_H) errors.h $(SYSTEM_H) $(TREE_H) tree-inline.h \\\n    $(C_TREE_H) $(C_COMMON_H) $(TREE_GIMPLE_H) diagnostic.h $(HASHTAB_H) \\\n    output.h varray.h langhooks.h tree-mudflap.h $(TM_H) coretypes.h \\\n-   $(TREE_DUMP_H) tree-pass.h\n-c-mudflap.o : $(CONFIG_H) errors.h $(SYSTEM_H) $(TREE_H) tree-inline.h \\\n-   $(C_TREE_H) $(C_COMMON_H) $(TREE_GIMPLE_H) diagnostic.h $(HASHTAB_H) \\\n-   output.h varray.h langhooks.h tree-mudflap.h $(TM_H) coretypes.h\n+   $(TREE_DUMP_H) tree-pass.h cgraph.h\n tree-nomudflap.o : $(CONFIG_H) errors.h $(SYSTEM_H) $(TREE_H) tree-inline.h \\\n    $(C_TREE_H) $(C_COMMON_H) $(TREE_GIMPLE_H) diagnostic.h $(HASHTAB_H) \\\n    output.h varray.h langhooks.h tree-mudflap.h $(TM_H) coretypes.h"}, {"sha": "221e07cbb94707ae94b3be3467e207790e3c6846", "filename": "gcc/c-common.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31b8e1b17c56b489399c674ed242c657dd8bf62/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31b8e1b17c56b489399c674ed242c657dd8bf62/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c31b8e1b17c56b489399c674ed242c657dd8bf62", "patch": "@@ -44,6 +44,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"toplev.h\"\n #include \"tree-iterator.h\"\n #include \"hashtab.h\"\n+#include \"tree-mudflap.h\"\n \n cpp_reader *parse_in;\t\t/* Declared in c-pragma.h.  */\n \n@@ -3122,6 +3123,8 @@ c_common_nodes_and_builtins (void)\n #undef DEF_BUILTIN\n \n   targetm.init_builtins ();\n+  if (flag_mudflap)\n+    mudflap_init ();\n \n   main_identifier_node = get_identifier (\"main\");\n }"}, {"sha": "af1ade9b2dea4b427cc427d2e915186bc57ccafd", "filename": "gcc/c-mudflap.c", "status": "removed", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dbf8812f12761e10ca9b81be80f27c3ec256873/gcc%2Fc-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dbf8812f12761e10ca9b81be80f27c3ec256873/gcc%2Fc-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-mudflap.c?ref=5dbf8812f12761e10ca9b81be80f27c3ec256873", "patch": "@@ -1,92 +0,0 @@\n-/* Mudflap: narrow-pointer bounds-checking by tree rewriting:\n-   C front-end interface.\n-\n-   Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n-   Contributed by Frank Ch. Eigler <fche@redhat.com>\n-   and Graydon Hoare <graydon@redhat.com>\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 2, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING.  If not, write to the Free\n-Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n-02111-1307, USA.  */\n-\n-\n-#include \"config.h\"\n-#include \"errors.h\"\n-#include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n-#include \"tree.h\"\n-#include \"tree-inline.h\"\n-#include \"c-tree.h\"\n-#include \"c-common.h\"\n-#include \"diagnostic.h\"\n-#include \"output.h\"\n-#include \"varray.h\"\n-#include \"tree-mudflap.h\"\n-#include \"target.h\"\n-#include \"flags.h\"\n-#include \"rtl.h\"\n-#include \"toplev.h\"\n-#include \"function.h\"\n-\n-\n-\n-/* ------------------------------------------------------------------------ */\n-\n-\n-/* Initialize the global tree nodes that correspond to mf-runtime.h\n-   declarations.  */\n-tree\n-mflang_lookup_decl (const char* name)\n-{\n-  tree decl = lookup_name (get_identifier (name));\n-  if (decl == NULL_TREE)\n-    internal_error (\"mudflap: cannot find declaration of `%s' from mf-runtime.h\",\n-\t\t    name);\n-\n-  return decl;\n-}\n-\n-\n-/* Emit a synthetic CTOR function for the current file.  Populate it from\n-   the enqueued __mf_register calls.  Compile the function.  */\n-\n-void\n-mflang_flush_calls (tree enqueued_call_stmt_chain)\n-{\n-  tree fnname, t1, t2, cs;\n-\n-  /* Short-circuit!  */\n-  if (enqueued_call_stmt_chain == NULL_TREE)\n-    return;\n-\n-  fnname = get_identifier (\"__mudflap_static_initializer\");\n-  t1 = build_tree_list (NULL_TREE, void_type_node);\n-  t2 = tree_cons (NULL, NULL, t1);\n-  start_function (t1, build_nt (CALL_EXPR, fnname, t2, NULL), NULL);\n-  store_parm_decls ();\n-\n-  DECL_STATIC_CONSTRUCTOR (current_function_decl) = 1;\n-  TREE_PUBLIC (current_function_decl) = 0;\n-  TREE_USED (current_function_decl) = 1;\n-  mf_mark (current_function_decl);\n-\n-  cs = c_begin_compound_stmt (true);\n-  c_finish_expr_stmt (enqueued_call_stmt_chain);\n-  add_stmt (c_end_compound_stmt (cs, true));\n-\n-  finish_function ();\n-}"}, {"sha": "7a8aebb39c37f9b509a932760c87f1844c358a76", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31b8e1b17c56b489399c674ed242c657dd8bf62/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31b8e1b17c56b489399c674ed242c657dd8bf62/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c31b8e1b17c56b489399c674ed242c657dd8bf62", "patch": "@@ -1,3 +1,8 @@\n+2004-07-05  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* cp-mudflap.c: Delete file.\n+\t* Makefile.in: Remove all references to cp-mudflap.o.\n+\n 2004-07-05  Zack Weinberg  <zack@codesourcery.com>\n \n \t* decl.c (cxx_init_decl_processing): Call"}, {"sha": "f8609877e708c75a223e2e71ce8c265cb51499d9", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31b8e1b17c56b489399c674ed242c657dd8bf62/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31b8e1b17c56b489399c674ed242c657dd8bf62/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=c31b8e1b17c56b489399c674ed242c657dd8bf62", "patch": "@@ -82,7 +82,7 @@ CXX_OBJS = cp/call.o cp/decl.o cp/expr.o cp/pt.o cp/typeck2.o \\\n  cp/typeck.o cp/cvt.o cp/except.o cp/friend.o cp/init.o cp/method.o \\\n  cp/search.o cp/semantics.o cp/tree.o cp/repo.o cp/dump.o cp/optimize.o \\\n  cp/mangle.o cp/cp-lang.o cp/name-lookup.o cp/cxx-pretty-print.o \\\n- cp/cp-gimplify.o tree-mudflap.o cp/cp-mudflap.o\n+ cp/cp-gimplify.o tree-mudflap.o\n \n # Use strict warnings for this front end.\n cp-warn = $(STRICT_WARN) $(WERROR)\n@@ -267,8 +267,6 @@ cp/parser.o: cp/parser.c $(CXX_TREE_H) $(TM_H) diagnostic.h gt-cp-parser.h \\\n   output.h\n cp/cp-gimplify.o: cp/cp-gimplify.c $(CXX_TREE_H) toplev.h c-common.h \\\n \t$(TM_H) coretypes.h\n-cp/cp-mudflap.o: cp/cp-mudflap.c $(CXX_TREE_H) toplev.h c-common.h \\\n-\t$(TM_H) coretypes.h\n \n cp/name-lookup.o: cp/name-lookup.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \t$(TM_H) $(CXX_TREE_H) timevar.h gt-cp-name-lookup.h toplev.h \\"}, {"sha": "a9703a76ec2d0bbb32e8f599f363a47dcf50a234", "filename": "gcc/cp/cp-mudflap.c", "status": "removed", "additions": 0, "deletions": 107, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dbf8812f12761e10ca9b81be80f27c3ec256873/gcc%2Fcp%2Fcp-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dbf8812f12761e10ca9b81be80f27c3ec256873/gcc%2Fcp%2Fcp-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-mudflap.c?ref=5dbf8812f12761e10ca9b81be80f27c3ec256873", "patch": "@@ -1,107 +0,0 @@\n-/* Mudflap: narrow-pointer bounds-checking by tree rewriting:\n-   C++ front-end interface.\n-\n-   Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n-   Contributed by Frank Ch. Eigler <fche@redhat.com>\n-   and Graydon Hoare <graydon@redhat.com>\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 2, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING.  If not, write to the Free\n-Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n-02111-1307, USA.  */\n-\n-\n-#include \"config.h\"\n-#include \"errors.h\"\n-#include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n-#include \"tree.h\"\n-#include \"tree-inline.h\"\n-#include \"cp-tree.h\"\n-#include \"c-common.h\"\n-#include \"diagnostic.h\"\n-#include \"output.h\"\n-#include \"varray.h\"\n-#include \"tree-mudflap.h\"\n-#include \"target.h\"\n-#include \"flags.h\"\n-#include \"rtl.h\"\n-#include \"toplev.h\"\n-\n-\n-/* Initialize the global tree nodes that correspond to mf-runtime.h\n-   declarations.  */\n-tree\n-mflang_lookup_decl (const char* name)\n-{\n-  tree decl = lookup_name (get_identifier (name), 1);\n-  if (decl == NULL_TREE)\n-    internal_error (\"mudflap: cannot find declaration of `%s' from mf-runtime.h\",\n-\t\t    name);\n-\n-  return decl;\n-}\n-\n-\n-/* Emit a synthetic CTOR function for the current file.  Populate it from\n-   the enqueued __mf_register calls.  Register it with the constructors.  */\n-\n-void\n-mflang_flush_calls (tree enqueued_call_stmt_chain)\n-{\n-  tree fnname, fndecl, body;\n-  tree type;\n-\n-  /* Short-circuit!  */\n-  if (enqueued_call_stmt_chain == NULL_TREE)\n-    return;\n-\n-  /* Create a ctor function declaration.  */\n-  fnname = get_identifier (\"__static_initialization_and_destruction_mudflap\");\n-  type = build_function_type (void_type_node, void_list_node);\n-  fndecl = build_lang_decl (FUNCTION_DECL, fnname, type);\n-\n-  TREE_PUBLIC (fndecl) = 0;\n-  TREE_USED (fndecl) = 1;\n-  DECL_ARTIFICIAL (fndecl) = 1;\n-  mf_mark (fndecl);\n-\n-  /* Generate the body, one statement at a time.  */\n-  start_preparsed_function (fndecl, /*attrs=*/NULL_TREE, SF_PRE_PARSED);\n-  body = begin_compound_stmt (BCS_FN_BODY);\n-\n-  while (enqueued_call_stmt_chain)\n-    {\n-      tree next = TREE_CHAIN (enqueued_call_stmt_chain);\n-      finish_expr_stmt (enqueued_call_stmt_chain);\n-      enqueued_call_stmt_chain = next;\n-    }\n-\n-  finish_compound_stmt (body);\n-  fndecl = finish_function (0);\n-\n-  /* NB: We cannot call expand_or_defer_fn here, since that goes through\n-     the callgraph queue.  This queue will have already been processed by the\n-     time this function is running.  */\n-  expand_body (fndecl);\n-  if (targetm.have_ctors_dtors)\n-    (* targetm.asm_out.constructor) (XEXP (DECL_RTL (fndecl), 0),\n-                                     DEFAULT_INIT_PRIORITY);\n-  else\n-    /* By this time, it's too late to do this:\n-       static_ctors = tree_cons (NULL_TREE, fndecl, static_ctors); */\n-    abort ();\n-}"}, {"sha": "2320bc9f2d98c722a85f01d67f840f987b360fcd", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 86, "deletions": 19, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31b8e1b17c56b489399c674ed242c657dd8bf62/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31b8e1b17c56b489399c674ed242c657dd8bf62/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=c31b8e1b17c56b489399c674ed242c657dd8bf62", "patch": "@@ -44,6 +44,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include <demangle.h>\n #include \"langhooks.h\"\n #include \"ggc.h\"\n+#include \"cgraph.h\"\n \n /* Internal function decls */\n \n@@ -52,9 +53,6 @@ static tree mf_build_string (const char *string);\n static tree mf_varname_tree (tree);\n static tree mf_file_function_line_tree (location_t);\n \n-/* Initialization of all the mf-runtime.h extern decls.  */\n-static void mf_init_extern_trees (void);\n-\n /* Indirection-related instrumentation.  */\n static void mf_decl_cache_locals (void);\n static void mf_decl_clear_locals (void);\n@@ -247,10 +245,10 @@ static GTY (()) tree mf_cache_structptr_type;\n /* extern struct __mf_cache __mf_lookup_cache []; */\n static GTY (()) tree mf_cache_array_decl;\n \n-/* extern const unsigned char __mf_lc_shift; */\n+/* extern unsigned char __mf_lc_shift; */\n static GTY (()) tree mf_cache_shift_decl;\n \n-/* extern const uintptr_t __mf_lc_mask; */\n+/* extern uintptr_t __mf_lc_mask; */\n static GTY (()) tree mf_cache_mask_decl;\n \n /* Their function-scope local shadows, used in single-threaded mode only. */\n@@ -267,31 +265,98 @@ static GTY (()) tree mf_check_fndecl;\n /* extern void __mf_register (void *ptr, size_t sz, int type, const char *); */\n static GTY (()) tree mf_register_fndecl;\n \n-/* extern void __mf_unregister (void *ptr, size_t sz); */\n+/* extern void __mf_unregister (void *ptr, size_t sz, int type); */\n static GTY (()) tree mf_unregister_fndecl;\n \n+/* Helper for mudflap_init: construct a decl with the given category,\n+   name, and type, mark it an external reference, and pushdecl it.  */\n+static inline tree\n+mf_make_builtin (enum tree_code category, const char *name, tree type)\n+{\n+  tree decl = mf_mark (build_decl (category, get_identifier (name), type));\n+  TREE_PUBLIC (decl) = 1;\n+  DECL_EXTERNAL (decl) = 1;\n+  lang_hooks.decls.pushdecl (decl);\n+  return decl;\n+}\n+\n+/* Helper for mudflap_init: construct a tree corresponding to the type\n+     struct __mf_cache { uintptr_t low; uintptr_t high; };\n+     where uintptr_t is the FIELD_TYPE argument.  */\n+static inline tree\n+mf_make_mf_cache_struct_type (tree field_type)\n+{\n+  /* There is, abominably, no language-independent way to construct a\n+     RECORD_TYPE.  So we have to call the basic type construction\n+     primitives by hand.  */\n+  tree fieldlo = build_decl (FIELD_DECL, get_identifier (\"low\"), field_type);\n+  tree fieldhi = build_decl (FIELD_DECL, get_identifier (\"high\"), field_type);\n+\n+  tree struct_type = make_node (RECORD_TYPE);\n+  DECL_CONTEXT (fieldlo) = struct_type;\n+  DECL_CONTEXT (fieldhi) = struct_type;\n+  TREE_CHAIN (fieldlo) = fieldhi;\n+  TYPE_FIELDS (struct_type) = fieldlo;\n+  TYPE_NAME (struct_type) = get_identifier (\"__mf_cache\");\n+  layout_type (struct_type);\n+\n+  return struct_type;\n+}\n+\n+#define build_function_type_3(rtype, arg1, arg2, arg3) \\\n+ build_function_type (rtype, tree_cons (0, arg1, tree_cons (0, arg2, \\\n+                             tree_cons (0, arg3, void_list_node))))\n+#define build_function_type_4(rtype, arg1, arg2, arg3, arg4) \\\n+ build_function_type (rtype, tree_cons (0, arg1, tree_cons (0, arg2, \\\n+                             tree_cons (0, arg3, tree_cons (0, arg4, \\\n+                             void_list_node)))))\n \n /* Initialize the global tree nodes that correspond to mf-runtime.h\n    declarations.  */\n-static void\n-mf_init_extern_trees (void)\n+void\n+mudflap_init (void)\n {\n   static bool done = false;\n+  tree mf_const_string_type;\n+  tree mf_cache_array_type;\n+  tree mf_check_register_fntype;\n+  tree mf_unregister_fntype;\n \n   if (done)\n     return;\n   done = true;\n \n-  mf_uintptr_type = TREE_TYPE (mflang_lookup_decl (\"uintptr_t\"));\n-  mf_cache_array_decl = mf_mark (mflang_lookup_decl (\"__mf_lookup_cache\"));\n-  mf_cache_struct_type = TREE_TYPE (TREE_TYPE (mf_cache_array_decl));\n+  mf_uintptr_type = lang_hooks.types.type_for_mode (ptr_mode,\n+\t\t\t\t\t\t    /*unsignedp=*/true);\n+  mf_const_string_type\n+    = build_pointer_type (build_qualified_type\n+\t\t\t  (char_type_node, TYPE_QUAL_CONST));\n+\n+  mf_cache_struct_type = mf_make_mf_cache_struct_type (mf_uintptr_type);\n   mf_cache_structptr_type = build_pointer_type (mf_cache_struct_type);\n-  mf_cache_shift_decl = mf_mark (mflang_lookup_decl (\"__mf_lc_shift\"));\n-  mf_cache_mask_decl = mf_mark (mflang_lookup_decl (\"__mf_lc_mask\"));\n-  mf_check_fndecl = mflang_lookup_decl (\"__mf_check\");\n-  mf_register_fndecl = mflang_lookup_decl (\"__mf_register\");\n-  mf_unregister_fndecl = mflang_lookup_decl (\"__mf_unregister\");\n+  mf_cache_array_type = build_array_type (mf_cache_struct_type, 0);\n+  mf_check_register_fntype =\n+    build_function_type_4 (void_type_node, ptr_type_node, size_type_node,\n+\t\t\t   integer_type_node, mf_const_string_type);\n+  mf_unregister_fntype =\n+    build_function_type_3 (void_type_node, ptr_type_node, size_type_node,\n+\t\t\t   integer_type_node);\n+\n+  mf_cache_array_decl = mf_make_builtin (VAR_DECL, \"__mf_lookup_cache\",\n+\t\t\t\t\t mf_cache_array_type);\n+  mf_cache_shift_decl = mf_make_builtin (VAR_DECL, \"__mf_lc_shift\",\n+\t\t\t\t\t unsigned_char_type_node);\n+  mf_cache_mask_decl = mf_make_builtin (VAR_DECL, \"__mf_lc_mask\",\n+\t\t\t\t\tmf_uintptr_type);\n+  mf_check_fndecl = mf_make_builtin (FUNCTION_DECL, \"__mf_check\",\n+\t\t\t\t     mf_check_register_fntype);\n+  mf_register_fndecl = mf_make_builtin (FUNCTION_DECL, \"__mf_register\",\n+\t\t\t\t\tmf_check_register_fntype);\n+  mf_unregister_fndecl = mf_make_builtin (FUNCTION_DECL, \"__mf_unregister\",\n+\t\t\t\t\t  mf_unregister_fntype);\n }\n+#undef build_function_type_4\n+#undef build_function_type_3\n \n \n /* ------------------------------------------------------------------------ */\n@@ -773,7 +838,6 @@ execute_mudflap_function_decls (void)\n \n   push_gimplify_context ();\n \n-  mf_init_extern_trees ();\n   mf_xform_decls (DECL_SAVED_TREE (current_function_decl),\n                   DECL_ARGUMENTS (current_function_decl));\n \n@@ -1064,7 +1128,6 @@ mudflap_register_call (tree obj, tree object_size, tree varname)\n   arg = convert (ptr_type_node, arg);\n   args = tree_cons (NULL_TREE, arg, args);\n \n-  mf_init_extern_trees ();\n   call_stmt = build_function_call_expr (mf_register_fndecl, args);\n \n   append_to_statement_list (call_stmt, &enqueued_call_stmt_chain);\n@@ -1181,7 +1244,11 @@ mudflap_finish_file (void)\n       VARRAY_CLEAR (deferred_static_decls);\n     }\n \n-  mflang_flush_calls (enqueued_call_stmt_chain);\n+  if (enqueued_call_stmt_chain)\n+    {\n+      cgraph_build_static_cdtor ('I', enqueued_call_stmt_chain);\n+      enqueued_call_stmt_chain = 0;\n+    }\n }\n \n "}, {"sha": "554bf6263f9fda95047c5f7adde6e76b77b0e1bc", "filename": "gcc/tree-mudflap.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31b8e1b17c56b489399c674ed242c657dd8bf62/gcc%2Ftree-mudflap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31b8e1b17c56b489399c674ed242c657dd8bf62/gcc%2Ftree-mudflap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.h?ref=c31b8e1b17c56b489399c674ed242c657dd8bf62", "patch": "@@ -23,6 +23,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define TREE_MUDFLAP_H\n \n /* Instrumentation.  */\n+extern void mudflap_init (void);\n extern void mudflap_c_function_decls (tree);\n extern void mudflap_c_function_ops (tree);\n extern void mudflap_enqueue_decl (tree);\n@@ -33,9 +34,4 @@ extern void mudflap_finish_file (void);\n extern int mf_marked_p (tree);\n extern tree mf_mark (tree);\n \n-/* To be provided by a front-end interface module.  */\n-extern tree mflang_lookup_decl (const char *);\n-extern void mflang_flush_calls (tree);\n-\n-\n #endif /* TREE_MUDFLAP_H */"}, {"sha": "accaec2a85678057820bc895f9ba095d80c3b9b5", "filename": "libmudflap/ChangeLog", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31b8e1b17c56b489399c674ed242c657dd8bf62/libmudflap%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31b8e1b17c56b489399c674ed242c657dd8bf62/libmudflap%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2FChangeLog?ref=c31b8e1b17c56b489399c674ed242c657dd8bf62", "patch": "@@ -1,3 +1,9 @@\n+2004-07-05  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* mf-runtime.h.in: Wrap declarations of struct __mf_cache,\n+\t__mf_lookup_cache, __mf_lc_mask, or __mf_lc_shift in\n+\t#ifndef _MUDFLAP.\n+\n 2004-06-29  Frank Ch. Eigler  <fche@redhat.com>\n \n \tSplay tree implementation fork.\n@@ -95,7 +101,7 @@\n \t* testsuite/libmudflap.c/pass46-frag.c: Ditto.\n \t* configure, Makefile, aclocal.m4, config.h.in, testsuite/Makefile.in:\n \tRegenerated with autoconf 2.57 and automake 1.7.\n-\t\n+\n 2004-06-04  Per Bothner  <per@bothner.com>\n \n \t* configure.in (LIBMUDFLAPTH):  Fix thinko.\n@@ -229,8 +235,8 @@\n 2003-11-19  Frank Ch. Eigler  <fche@redhat.com>\n \n \tlibstdc++/11696\n-        * mf-runtime.h.in: Switch to #pragma redefine_extname for\n-        symbols interposed at compile time.\n+\t* mf-runtime.h.in: Switch to #pragma redefine_extname for\n+\tsymbols interposed at compile time.\n \t* testsuite/libmudflap.c++/pass41-frag.cxx: New test.\n \n \tlibmudflap/12939\n@@ -254,7 +260,7 @@\n \n \t2003-07-29  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n \n-        * configure.in: Update check for union semun.\n+\t* configure.in: Update check for union semun.\n \n 2003-07-29  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n "}, {"sha": "afb04a59b7e7100afca071858f74192f75d8e8ea", "filename": "libmudflap/mf-runtime.h.in", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c31b8e1b17c56b489399c674ed242c657dd8bf62/libmudflap%2Fmf-runtime.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c31b8e1b17c56b489399c674ed242c657dd8bf62/libmudflap%2Fmf-runtime.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fmf-runtime.h.in?ref=c31b8e1b17c56b489399c674ed242c657dd8bf62", "patch": "@@ -15,12 +15,18 @@ typedef unsigned long uintptr_t;\n #endif\n \n \n-/* Global declarations used by instrumentation. */\n-\n+/* Global declarations used by instrumentation.  When _MUDFLAP is\n+   defined, these have been auto-declared by the compiler and we\n+   should not declare them again (ideally we *would* declare them\n+   again, to verify that the compiler's declarations match the\n+   library's, but the C++ front end has no mechanism for allowing\n+   the re-definition of a structure type).  */\n+#ifndef _MUDFLAP\n struct __mf_cache { uintptr_t low; uintptr_t high; };\n extern struct __mf_cache __mf_lookup_cache [];\n extern uintptr_t __mf_lc_mask;\n extern unsigned char __mf_lc_shift;\n+#endif\n \n /* Multithreading support.  */\n #ifdef _MUDFLAPTH"}]}