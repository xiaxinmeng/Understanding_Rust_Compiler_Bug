{"sha": "a9fc64d8120937c5c37e1cacb2f55ae196e8897d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTlmYzY0ZDgxMjA5MzdjNWMzN2UxY2FjYjJmNTVhZTE5NmU4ODk3ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-14T15:24:50Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-29T18:34:05Z"}, "message": "c++: constant expressions are evaluated [PR93314]\n\nMy GCC 11 patch for PR93314 turned off cp_unevaluated_operand while\nprocessing an id-expression that names a non-static data member, but the\nbroader issue is that in general, a constant-expression is evaluated even in\nan unevaluated operand.\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (cp_evaluated): Add reset parm to constructor.\n\t* parser.c (cp_parser_constant_expression): Change\n\tallow_non_constant_p to int.  Use cp_evaluated.\n\t(cp_parser_initializer_clause): Pass 2 to allow_non_constant_p.\n\t* semantics.c (finish_id_expression_1): Don't mess with\n\tcp_unevaluated_operand here.", "tree": {"sha": "b834aa2d4ec8d322cd495e6eb39d953d0723cf50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b834aa2d4ec8d322cd495e6eb39d953d0723cf50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9fc64d8120937c5c37e1cacb2f55ae196e8897d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9fc64d8120937c5c37e1cacb2f55ae196e8897d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9fc64d8120937c5c37e1cacb2f55ae196e8897d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9fc64d8120937c5c37e1cacb2f55ae196e8897d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f0de4dd51fd9a1e9628411b4fd728f5841256fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f0de4dd51fd9a1e9628411b4fd728f5841256fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f0de4dd51fd9a1e9628411b4fd728f5841256fe"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "d3639e3346006139c24a8e7fa67b98265b0ccaf0", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9fc64d8120937c5c37e1cacb2f55ae196e8897d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9fc64d8120937c5c37e1cacb2f55ae196e8897d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a9fc64d8120937c5c37e1cacb2f55ae196e8897d", "patch": "@@ -5482,9 +5482,10 @@ class cp_evaluated\n public:\n   int uneval;\n   int inhibit;\n-  cp_evaluated ()\n+  cp_evaluated (bool reset = true)\n     : uneval(cp_unevaluated_operand), inhibit(c_inhibit_evaluation_warnings)\n-  { cp_unevaluated_operand = c_inhibit_evaluation_warnings = 0; }\n+  { if (reset)\n+      cp_unevaluated_operand = c_inhibit_evaluation_warnings = 0; }\n   ~cp_evaluated ()\n   { cp_unevaluated_operand = uneval;\n     c_inhibit_evaluation_warnings = inhibit; }"}, {"sha": "9603a1ef59411bc55c9dfb4afcd626d57a83d18f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9fc64d8120937c5c37e1cacb2f55ae196e8897d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9fc64d8120937c5c37e1cacb2f55ae196e8897d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a9fc64d8120937c5c37e1cacb2f55ae196e8897d", "patch": "@@ -2163,7 +2163,7 @@ static enum tree_code cp_parser_assignment_operator_opt\n static cp_expr cp_parser_expression\n   (cp_parser *, cp_id_kind * = NULL, bool = false, bool = false, bool = false);\n static cp_expr cp_parser_constant_expression\n-  (cp_parser *, bool = false, bool * = NULL, bool = false);\n+  (cp_parser *, int = 0, bool * = NULL, bool = false);\n static cp_expr cp_parser_builtin_offsetof\n   (cp_parser *);\n static cp_expr cp_parser_lambda_expression\n@@ -10374,13 +10374,15 @@ cp_parser_expression (cp_parser* parser, cp_id_kind * pidk,\n   If ALLOW_NON_CONSTANT_P a non-constant expression is silently\n   accepted.  If ALLOW_NON_CONSTANT_P is true and the expression is not\n   constant, *NON_CONSTANT_P is set to TRUE.  If ALLOW_NON_CONSTANT_P\n-  is false, NON_CONSTANT_P should be NULL.  If STRICT_P is true,\n+  is false, NON_CONSTANT_P should be NULL.  If ALLOW_NON_CONSTANT_P is\n+  greater than 1, this isn't really a constant-expression, only a\n+  potentially constant-evaluated expression.  If STRICT_P is true,\n   only parse a conditional-expression, otherwise parse an\n   assignment-expression.  See below for rationale.  */\n \n static cp_expr\n cp_parser_constant_expression (cp_parser* parser,\n-\t\t\t       bool allow_non_constant_p,\n+\t\t\t       int allow_non_constant_p,\n \t\t\t       bool *non_constant_p,\n \t\t\t       bool strict_p)\n {\n@@ -10416,6 +10418,11 @@ cp_parser_constant_expression (cp_parser* parser,\n   parser->allow_non_integral_constant_expression_p\n     = (allow_non_constant_p || cxx_dialect >= cxx11);\n   parser->non_integral_constant_expression_p = false;\n+\n+  /* A manifestly constant-evaluated expression is evaluated even in an\n+     unevaluated operand.  */\n+  cp_evaluated ev (/*reset if*/allow_non_constant_p <= 1);\n+\n   /* Although the grammar says \"conditional-expression\", when not STRICT_P,\n      we parse an \"assignment-expression\", which also permits\n      \"throw-expression\" and the use of assignment operators.  In the case\n@@ -24239,7 +24246,7 @@ cp_parser_initializer_clause (cp_parser* parser, bool* non_constant_p)\n     {\n       initializer\n \t= cp_parser_constant_expression (parser,\n-\t\t\t\t\t/*allow_non_constant_p=*/true,\n+\t\t\t\t\t/*allow_non_constant_p=*/2,\n \t\t\t\t\tnon_constant_p);\n     }\n   else"}, {"sha": "6224f49f189a357da95f17108ebdbd6fd1536505", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9fc64d8120937c5c37e1cacb2f55ae196e8897d/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9fc64d8120937c5c37e1cacb2f55ae196e8897d/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=a9fc64d8120937c5c37e1cacb2f55ae196e8897d", "patch": "@@ -4097,12 +4097,6 @@ finish_id_expression_1 (tree id_expression,\n \n \t  cp_warn_deprecated_use_scopes (scope);\n \n-\t  /* In a constant-expression context, turn off cp_unevaluated_operand\n-\t     so finish_non_static_data_member will complain (93314).  */\n-\t  auto eval = make_temp_override (cp_unevaluated_operand);\n-\t  if (integral_constant_expression_p && TREE_CODE (decl) == FIELD_DECL)\n-\t    cp_unevaluated_operand = 0;\n-\n \t  if (TYPE_P (scope))\n \t    decl = finish_qualified_id_expr (scope,\n \t\t\t\t\t     decl,\n@@ -4116,10 +4110,6 @@ finish_id_expression_1 (tree id_expression,\n \t}\n       else if (TREE_CODE (decl) == FIELD_DECL)\n \t{\n-\t  auto eval = make_temp_override (cp_unevaluated_operand);\n-\t  if (integral_constant_expression_p)\n-\t    cp_unevaluated_operand = 0;\n-\n \t  /* Since SCOPE is NULL here, this is an unqualified name.\n \t     Access checking has been performed during name lookup\n \t     already.  Turn off checking to avoid duplicate errors.  */"}]}