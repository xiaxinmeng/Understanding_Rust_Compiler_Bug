{"sha": "9fc985118d9f5014afc1caf32a411ee5803fba61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZjOTg1MTE4ZDlmNTAxNGFmYzFjYWYzMmE0MTFlZTU4MDNmYmE2MQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-21T21:51:07Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-21T22:04:48Z"}, "message": "libstdc++: Fix path::generic_string allocator handling (PR 94242)\n\nIt's not possible to construct a path::string_type from an allocator of\na different type. Create the correct specialization of basic_string, and\nadjust path::_S_str_convert to use a basic_string_view so that it is\nindependent of the allocator type.\n\n\tPR libstdc++/94242\n\t* include/bits/fs_path.h (path::_S_str_convert): Replace first\n\tparameter with basic_string_view so that strings with different\n\tallocators can be accepted.\n\t(path::generic_string<C,T,A>()): Use basic_string object that uses the\n\tright allocator type.\n\t* testsuite/27_io/filesystem/path/generic/94242.cc: New test.\n\t* testsuite/27_io/filesystem/path/generic/generic_string.cc: Improve\n\ttest coverage.", "tree": {"sha": "1e6aaade4c304f7f5c240715682adc07cd1d70b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e6aaade4c304f7f5c240715682adc07cd1d70b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fc985118d9f5014afc1caf32a411ee5803fba61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc985118d9f5014afc1caf32a411ee5803fba61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc985118d9f5014afc1caf32a411ee5803fba61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc985118d9f5014afc1caf32a411ee5803fba61/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfb25dfe3d34703f6e493664831dfaf53672b07b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb25dfe3d34703f6e493664831dfaf53672b07b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfb25dfe3d34703f6e493664831dfaf53672b07b"}], "stats": {"total": 107, "additions": 103, "deletions": 4}, "files": [{"sha": "52944dd475c8b585137f752bfb5b3295094e1faf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc985118d9f5014afc1caf32a411ee5803fba61/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc985118d9f5014afc1caf32a411ee5803fba61/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9fc985118d9f5014afc1caf32a411ee5803fba61", "patch": "@@ -1,3 +1,15 @@\n+2020-03-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/94242\n+\t* include/bits/fs_path.h (path::_S_str_convert): Replace first\n+\tparameter with basic_string_view so that strings with different\n+\tallocators can be accepted.\n+\t(path::generic_string<C,T,A>()): Use basic_string object that uses the\n+\tright allocator type.\n+\t* testsuite/27_io/filesystem/path/generic/94242.cc: New test.\n+\t* testsuite/27_io/filesystem/path/generic/generic_string.cc: Improve\n+\ttest coverage.\n+\n 2020-03-18  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/94033"}, {"sha": "fb6e8a5247f6520392d59dc6e75c388864358de2", "filename": "libstdc++-v3/include/bits/fs_path.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc985118d9f5014afc1caf32a411ee5803fba61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc985118d9f5014afc1caf32a411ee5803fba61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h?ref=9fc985118d9f5014afc1caf32a411ee5803fba61", "patch": "@@ -579,7 +579,7 @@ namespace __detail\n \n     template<typename _CharT, typename _Traits, typename _Allocator>\n       static basic_string<_CharT, _Traits, _Allocator>\n-      _S_str_convert(const string_type&, const _Allocator& __a);\n+      _S_str_convert(basic_string_view<value_type>, const _Allocator&);\n \n     void _M_split_cmpts();\n \n@@ -1015,7 +1015,8 @@ namespace __detail\n   /// @cond undocumented\n   template<typename _CharT, typename _Traits, typename _Allocator>\n     std::basic_string<_CharT, _Traits, _Allocator>\n-    path::_S_str_convert(const string_type& __str, const _Allocator& __a)\n+    path::_S_str_convert(basic_string_view<value_type> __str,\n+\t\t\t const _Allocator& __a)\n     {\n       static_assert(!is_same_v<_CharT, value_type>);\n \n@@ -1126,7 +1127,9 @@ namespace __detail\n #else\n       const value_type __slash = '/';\n #endif\n-      string_type __str(__a);\n+      using _Alloc2 = typename allocator_traits<_Allocator>::template\n+\trebind_alloc<value_type>;\n+      basic_string<value_type, char_traits<value_type>, _Alloc2> __str(__a);\n \n       if (_M_type() == _Type::_Root_dir)\n \t__str.assign(1, __slash);\n@@ -1145,7 +1148,7 @@ namespace __detail\n #endif\n \t      if (__add_slash)\n \t\t__str += __slash;\n-\t      __str += __elem._M_pathname;\n+\t      __str += basic_string_view<value_type>(__elem._M_pathname);\n \t      __add_slash = __elem._M_type() == _Type::_Filename;\n \t    }\n \t}"}, {"sha": "c917daed94e14d8ae10e1532d4c10040f1e39a7c", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/generic/94242.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc985118d9f5014afc1caf32a411ee5803fba61/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneric%2F94242.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc985118d9f5014afc1caf32a411ee5803fba61/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneric%2F94242.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneric%2F94242.cc?ref=9fc985118d9f5014afc1caf32a411ee5803fba61", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target c++17 } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// C++17 30.10.7.4.7 path generic format observers [fs.path.generic.obs]\n+\n+#include <filesystem>\n+#include <testsuite_allocator.h>\n+\n+using std::filesystem::path;\n+using __gnu_test::SimpleAllocator;\n+\n+void\n+test01()\n+{\n+  path p = \"//foo//bar//.\";\n+  using C = path::value_type;\n+  auto g = p.generic_string<C, std::char_traits<C>, SimpleAllocator<C>>();\n+  VERIFY( g == path(\"/foo/bar/.\").c_str() );\n+}\n+\n+void\n+test02()\n+{\n+  path p = \"//foo//bar//.\";\n+  using C = char16_t;\n+  auto g = p.generic_string<C, std::char_traits<C>, SimpleAllocator<C>>();\n+  VERIFY( g == u\"/foo/bar/.\" );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "8554e9f8f638a554f674ccd3b75cd3b6b6ebe9f1", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/generic/generic_string.cc", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc985118d9f5014afc1caf32a411ee5803fba61/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneric%2Fgeneric_string.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc985118d9f5014afc1caf32a411ee5803fba61/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneric%2Fgeneric_string.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneric%2Fgeneric_string.cc?ref=9fc985118d9f5014afc1caf32a411ee5803fba61", "patch": "@@ -21,6 +21,7 @@\n // C++17 30.10.7.4.7 path generic format observers [fs.path.generic.obs]\n \n #include <filesystem>\n+#include <testsuite_fs.h>\n #include <testsuite_hooks.h>\n \n using std::filesystem::path;\n@@ -34,11 +35,15 @@ test01()\n #ifdef __CYGWIN__\n   VERIFY( path(\"//a\").generic_string() == \"//a\" );\n   VERIFY( path(\"//a/\").generic_string() == \"//a/\" );\n+  VERIFY( path(\"//a//\").generic_string() == \"//a/\" );\n   VERIFY( path(\"//a/b\").generic_string() == \"//a/b\" );\n+  VERIFY( path(\"//a//b\").generic_string() == \"//a/b\" );\n #else\n   VERIFY( path(\"//a\").generic_string() == \"/a\" );\n   VERIFY( path(\"//a/\").generic_string() == \"/a/\" );\n+  VERIFY( path(\"//a//\").generic_string() == \"/a/\" );\n   VERIFY( path(\"//a/b\").generic_string() == \"/a/b\" );\n+  VERIFY( path(\"//a//b\").generic_string() == \"/a/b\" );\n #endif\n   VERIFY( path(\"/a//b\").generic_string() == \"/a/b\" );\n   VERIFY( path(\"/a//b/\").generic_string() == \"/a/b/\" );\n@@ -57,9 +62,36 @@ test02()\n   }\n }\n \n+void\n+test03()\n+{\n+  for (path p : __gnu_test::test_paths)\n+  {\n+    // A path constructed from the generic format string should compare equal\n+    // to the original, because they represent the same path.\n+    VERIFY( path(p.generic_string()) == p );\n+    VERIFY( path(p.generic_wstring()) == p );\n+    VERIFY( path(p.generic_u8string()) == p );\n+    VERIFY( path(p.generic_u16string()) == p );\n+    VERIFY( path(p.generic_u32string()) == p );\n+  }\n+\n+  for (path p : { \"a///b//c\", \"///a//b//c\", \"a:b//c\", \"a://b///c\" })\n+  {\n+    // A path constructed from the generic format string should compare equal\n+    // to the original, because they represent the same path.\n+    VERIFY( path(p.generic_string()) == p );\n+    VERIFY( path(p.generic_wstring()) == p );\n+    VERIFY( path(p.generic_u8string()) == p );\n+    VERIFY( path(p.generic_u16string()) == p );\n+    VERIFY( path(p.generic_u32string()) == p );\n+  }\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n+  test03();\n }"}]}