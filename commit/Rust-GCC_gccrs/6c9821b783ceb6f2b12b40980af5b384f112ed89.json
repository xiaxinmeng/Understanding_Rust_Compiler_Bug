{"sha": "6c9821b783ceb6f2b12b40980af5b384f112ed89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM5ODIxYjc4M2NlYjZmMmIxMmI0MDk4MGFmNWIzODRmMTEyZWQ4OQ==", "commit": {"author": {"name": "Philippe De Muyter", "email": "phdm@macqel.be", "date": "1999-11-10T17:57:21Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-11-10T17:57:21Z"}, "message": "ansidecl.h: Define and test `GCC_VERSION', not `HAVE_GCC_VERSION'.\n\ninclude:\n        * ansidecl.h: Define and test `GCC_VERSION', not `HAVE_GCC_VERSION'.\n\ngcc:\n        * cppinit.c: Test `GCC_VERSION', not `HAVE_GCC_VERSION'.\n\n        * gansidecl.h: Likewise.\n\n        * rtl.c: Likewise.\n\n        * rtl.h: Likewise.\n\n        * toplev.h: Likewise.\n\n        * tree.c: Likewise.\n\n        * tree.h: Likewise.\n\n        * varray.c: Likewise.\n\n        * varray.h: Likewise.\n\ngcc/cp:\n        * cp-tree.h: Test `GCC_VERSION', not `HAVE_GCC_VERSION'.\n\ngcc/f:\n        * proj.h: Test `GCC_VERSION', not `HAVE_GCC_VERSION'.\n\nCo-Authored-By: Kaveh R. Ghazi <ghazi@caip.rutgers.edu>\n\nFrom-SVN: r30477", "tree": {"sha": "3f1f607d7e9b02c763f4e7b5e8778d0e4ee8373e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f1f607d7e9b02c763f4e7b5e8778d0e4ee8373e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c9821b783ceb6f2b12b40980af5b384f112ed89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c9821b783ceb6f2b12b40980af5b384f112ed89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c9821b783ceb6f2b12b40980af5b384f112ed89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c9821b783ceb6f2b12b40980af5b384f112ed89/comments", "author": {"login": "phdm", "id": 2923420, "node_id": "MDQ6VXNlcjI5MjM0MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/2923420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phdm", "html_url": "https://github.com/phdm", "followers_url": "https://api.github.com/users/phdm/followers", "following_url": "https://api.github.com/users/phdm/following{/other_user}", "gists_url": "https://api.github.com/users/phdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/phdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phdm/subscriptions", "organizations_url": "https://api.github.com/users/phdm/orgs", "repos_url": "https://api.github.com/users/phdm/repos", "events_url": "https://api.github.com/users/phdm/events{/privacy}", "received_events_url": "https://api.github.com/users/phdm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8bfa6fc532f4fd28091c639b39f058404f779265", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bfa6fc532f4fd28091c639b39f058404f779265", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bfa6fc532f4fd28091c639b39f058404f779265"}], "stats": {"total": 101, "additions": 75, "deletions": 26}, "files": [{"sha": "6949bb68598f09c5322313ca4778b4beeef773ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c9821b783ceb6f2b12b40980af5b384f112ed89", "patch": "@@ -1,3 +1,24 @@\n+Wed Nov 10 12:43:21 1999  Philippe De Muyter  <phdm@macqel.be>\n+                          Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* cppinit.c: Test `GCC_VERSION', not `HAVE_GCC_VERSION'.\n+\n+\t* gansidecl.h: Likewise.\n+\n+\t* rtl.c: Likewise.\n+\n+\t* rtl.h: Likewise.\n+\n+\t* toplev.h: Likewise.\n+\n+\t* tree.c: Likewise.\n+\n+\t* tree.h: Likewise.\n+\n+\t* varray.c: Likewise.\n+\n+\t* varray.h: Likewise.\n+\n Wed Nov 10 10:57:22 1999  Clinton Popetz  <cpopetz@cygnus.com>\n \n \t* gcov.c (struct arcdata): Add hits and total, remove prob."}, {"sha": "0f4e3f5faf6dd41d07fb381fa1016462d81bd942", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6c9821b783ceb6f2b12b40980af5b384f112ed89", "patch": "@@ -1,3 +1,8 @@\n+Wed Nov 10 12:43:21 1999  Philippe De Muyter  <phdm@macqel.be>\n+                          Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* cp-tree.h: Test `GCC_VERSION', not `HAVE_GCC_VERSION'.\n+\n 1999-11-09  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (language_function): Remove x_last_dtor_insn and"}, {"sha": "f4059a25ec839a9eb3cea5d9e5da06258efeede0", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6c9821b783ceb6f2b12b40980af5b384f112ed89", "patch": "@@ -124,7 +124,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Language-specific tree checkers. */\n \n-#if defined ENABLE_CHECKING && HAVE_GCC_VERSION(2,7)\n+#if defined ENABLE_CHECKING && (GCC_VERSION >= 2007)\n \n #define VAR_OR_FUNCTION_DECL_CHECK(NODE)\t\t\t\\\n ({  const tree __t = NODE;\t\t\t\t\t\\"}, {"sha": "691e1b0d4c408053086ec8a916b1ae23f0f5b0ab", "filename": "gcc/cppinit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=6c9821b783ceb6f2b12b40980af5b384f112ed89", "patch": "@@ -216,7 +216,7 @@ enum { QUOTE = 0, BRACKET, SYSTEM, AFTER };\n #define CAT(a, b) a/**/b\n #endif\n \n-#if HAVE_GCC_VERSION(2,7)\n+#if (GCC_VERSION >= 2007)\n #define TABLE(id) static inline void CAT(init_, id) PARAMS ((void)) {} \\\n unsigned char id[256] = {\n #define s(p, v) [p] = v,"}, {"sha": "258affeb18d9d8a8cb00e20b547f08971fcbaca8", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=6c9821b783ceb6f2b12b40980af5b384f112ed89", "patch": "@@ -1,3 +1,8 @@\n+Wed Nov 10 12:43:21 1999  Philippe De Muyter  <phdm@macqel.be>\n+                          Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* proj.h: Test `GCC_VERSION', not `HAVE_GCC_VERSION'.\n+\n Tue Oct 26 01:32:19 1999  Mark Mitchell  <mark@codesourcery.com>\n \n \t* com.c (poplevel): Don't call remember_end_note."}, {"sha": "d55bd88f8a61cd097350acfb310dfcffbd6023c5", "filename": "gcc/f/proj.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2Ff%2Fproj.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2Ff%2Fproj.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fproj.h?ref=6c9821b783ceb6f2b12b40980af5b384f112ed89", "patch": "@@ -31,7 +31,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #endif\n #include \"system.j\"\n \n-#if ! HAVE_GCC_VERSION(2,0)\n+#if (GCC_VERSION < 2000)\n #error \"You have to use gcc 2.x to build g77 (might be fixed in g77-0.6).\"\n #endif\n "}, {"sha": "ae88cca55424ba9d9cd0bbc2d5e5f53637b9fc9e", "filename": "gcc/gansidecl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2Fgansidecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2Fgansidecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgansidecl.h?ref=6c9821b783ceb6f2b12b40980af5b384f112ed89", "patch": "@@ -41,7 +41,7 @@ Boston, MA 02111-1307, USA.  */\n    need to do this very early; i.e. before any systems header files or\n    gcc header files in case they use these keywords.  Otherwise\n    conflicts might occur. */\n-#if HAVE_GCC_VERSION(2,7)\n+#if (GCC_VERSION >= 2007)\n # undef const\n # undef inline\n # define inline __inline__  /* Modern gcc can use `__inline__' freely. */"}, {"sha": "77800e3a501fdced0b1e37aff5de2e356369e9ac", "filename": "gcc/rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=6c9821b783ceb6f2b12b40980af5b384f112ed89", "patch": "@@ -1128,7 +1128,7 @@ read_rtx (infile)\n   return return_rtx;\n }\n \n-#if defined ENABLE_CHECKING && HAVE_GCC_VERSION(2,7)\n+#if defined ENABLE_CHECKING && (GCC_VERSION >= 2007)\n void\n rtl_check_failed_bounds (r, n, file, line, func)\n     rtx r;"}, {"sha": "bcf0278e0f5627a9e2bf2f44273ca3353c146cc6", "filename": "gcc/rtl.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=6c9821b783ceb6f2b12b40980af5b384f112ed89", "patch": "@@ -226,7 +226,7 @@ typedef struct rtvec_def{\n \n /* General accessor macros for accessing the fields of an rtx.  */\n \n-#if defined ENABLE_CHECKING  && HAVE_GCC_VERSION(2,7)\n+#if defined ENABLE_CHECKING && (GCC_VERSION >= 2007)\n /* The bit with a star outside the statement expr and an & inside is\n    so that N can be evaluated only once.  */\n #define RTL_CHECK1(RTX, N, C1)\t\t\t\t\t\t\\\n@@ -1679,10 +1679,10 @@ extern int read_rtx_lineno;\n \n extern void fancy_abort PROTO((const char *, int, const char *))\n     ATTRIBUTE_NORETURN;\n-#if ! HAVE_GCC_VERSION(2,7)\n-#define abort() fancy_abort (__FILE__, __LINE__, 0)\n-#else\n+#if (GCC_VERSION >= 2007)\n #define abort() fancy_abort (__FILE__, __LINE__, __PRETTY_FUNCTION__)\n+#else\n+#define abort() fancy_abort (__FILE__, __LINE__, 0)\n #endif\n \n /* In alias.c */"}, {"sha": "71654577dcee3ae0efe2042462be09d55db686c4", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=6c9821b783ceb6f2b12b40980af5b384f112ed89", "patch": "@@ -51,7 +51,7 @@ extern void _fatal_insn\t\t\tPROTO ((const char *,\n \t\t\t\t\t\tconst char *))\n   ATTRIBUTE_NORETURN;\n \n-#if HAVE_GCC_VERSION(2,7)\n+#if (GCC_VERSION >= 2007)\n #define fatal_insn(msgid, insn) \\\n \t_fatal_insn (msgid, insn, __FILE__, __LINE__, __PRETTY_FUNCTION__)\n #define fatal_insn_not_found(insn) \\"}, {"sha": "ea5c1bfce767ee2f3c802cdb8770eadecda997fe", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=6c9821b783ceb6f2b12b40980af5b384f112ed89", "patch": "@@ -5136,7 +5136,7 @@ get_set_constructor_bytes (init, buffer, wd_size)\n   return non_const_bits;\n }\n \f\n-#if defined ENABLE_CHECKING && HAVE_GCC_VERSION(2,7)\n+#if defined ENABLE_CHECKING && (GCC_VERSION >= 2007)\n /* Complain that the tree code of NODE does not match the expected CODE.\n    FILE, LINE, and FUNCTION are of the caller.  */\n void"}, {"sha": "42760c868efa400abf50c040d83db1229eff616d", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6c9821b783ceb6f2b12b40980af5b384f112ed89", "patch": "@@ -321,7 +321,7 @@ struct tree_common\n \n /* When checking is enabled, errors will be generated if a tree node\n    is accessed incorrectly. The macros abort with a fatal error.  */\n-#if defined ENABLE_CHECKING && HAVE_GCC_VERSION(2,7)\n+#if defined ENABLE_CHECKING && (GCC_VERSION >= 2007)\n \n #define TREE_CHECK(t, code)\t\t\t\t\t\t\\\n ({  const tree __t = t;\t\t\t\t\t\t\t\\\n@@ -2513,8 +2513,8 @@ extern void dwarf2out_end_epilogue\tPROTO((void));\n \n extern void fancy_abort PROTO((const char *, int, const char *))\n     ATTRIBUTE_NORETURN;\n-#if ! HAVE_GCC_VERSION(2,7)\n-#define abort() fancy_abort (__FILE__, __LINE__, 0)\n-#else\n+#if (GCC_VERSION >= 2007)\n #define abort() fancy_abort (__FILE__, __LINE__, __PRETTY_FUNCTION__)\n+#else\n+#define abort() fancy_abort (__FILE__, __LINE__, 0)\n #endif"}, {"sha": "34ce80b284bfd6fac6b704274210331321c1bfd7", "filename": "gcc/varray.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2Fvarray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2Fvarray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarray.c?ref=6c9821b783ceb6f2b12b40980af5b384f112ed89", "patch": "@@ -71,7 +71,7 @@ varray_grow (va, n)\n \n /* Check the bounds of a varray access.  */\n \n-#if defined ENABLE_CHECKING && HAVE_GCC_VERSION(2,7)\n+#if defined ENABLE_CHECKING && (GCC_VERSION >= 2007)\n \n extern void error PVPROTO ((const char *, ...))\tATTRIBUTE_PRINTF_1;\n "}, {"sha": "51be0146bce2ce451eff333be0b86586547aefbf", "filename": "gcc/varray.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2Fvarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9821b783ceb6f2b12b40980af5b384f112ed89/gcc%2Fvarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarray.h?ref=6c9821b783ceb6f2b12b40980af5b384f112ed89", "patch": "@@ -163,7 +163,7 @@ extern varray_type varray_grow\tPROTO((varray_type, size_t));\n #define VARRAY_SIZE(VA)\t((VA)->num_elements)\n \n /* Check for VARRAY_xxx macros being in bound.  */\n-#if defined ENABLE_CHECKING && HAVE_GCC_VERSION(2,7)\n+#if defined ENABLE_CHECKING && (GCC_VERSION >= 2007)\n extern void varray_check_failed PROTO ((varray_type, size_t,\n \t\t\t\t\tconst char *, int,\n \t\t\t\t\tconst char *)) ATTRIBUTE_NORETURN;"}, {"sha": "5bdc29052f39a7220798620159885ef2373f0178", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9821b783ceb6f2b12b40980af5b384f112ed89/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9821b783ceb6f2b12b40980af5b384f112ed89/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=6c9821b783ceb6f2b12b40980af5b384f112ed89", "patch": "@@ -1,3 +1,8 @@\n+Wed Nov 10 12:43:21 1999  Philippe De Muyter  <phdm@macqel.be>\n+                          Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* ansidecl.h: Define and test `GCC_VERSION', not `HAVE_GCC_VERSION'.\n+\t\n 1999-10-23 08:51 -0700  Zack Weinberg  <zack@bitmover.com>\n \n \t* hashtab.h: Give hash_table_t a struct tag.  Add prototypes"}, {"sha": "2b5c0e7f549bc62f71e74ab9409e1c15b5e99292", "filename": "include/ansidecl.h", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c9821b783ceb6f2b12b40980af5b384f112ed89/include%2Fansidecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c9821b783ceb6f2b12b40980af5b384f112ed89/include%2Fansidecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fansidecl.h?ref=6c9821b783ceb6f2b12b40980af5b384f112ed89", "patch": "@@ -160,27 +160,40 @@ Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n #endif\t/* ANSI C.  */\n \n-/* This macro will return true if we are using gcc, and it is of a\n-   particular minimum version (both major & minor numbers are checked.)  */\n-#ifndef HAVE_GCC_VERSION\n+\n+/* Using MACRO(x,y) in cpp #if conditionals does not work with some\n+   older preprocessors.  Thus we can't define something like this:\n+\n #define HAVE_GCC_VERSION(MAJOR, MINOR) \\\n   (__GNUC__ > (MAJOR) || (__GNUC__ == (MAJOR) && __GNUC_MINOR__ >= (MINOR)))\n-#endif /* ! HAVE_GCC_VERSION */\n+\n+and then test \"#if HAVE_GCC_VERSION(2,7)\".\n+\n+So instead we use the macro below and test it against specific values.  */\n+\n+/* This macro simplifies testing whether we are using gcc, and if it\n+   is of a particular minimum version. (Both major & minor numbers are\n+   significant.)  This macro will evaluate to 0 if we are not using\n+   gcc at all.  */\n+#ifndef GCC_VERSION\n+#define GCC_VERSION (__GNUC__ * 1000 + __GNUC_MINOR__)\n+#endif /* GCC_VERSION */\n \n /* Define macros for some gcc attributes.  This permits us to use the\n    macros freely, and know that they will come into play for the\n    version of gcc in which they are supported.  */\n \n-#if ! HAVE_GCC_VERSION(2,7)\n+#if (GCC_VERSION < 2007)\n # define __attribute__(x)\n #endif\n \n+/* Attributes on labels were valid as of gcc 2.93. */\n #ifndef ATTRIBUTE_UNUSED_LABEL\n-# if ! HAVE_GCC_VERSION(2,93)\n-#  define ATTRIBUTE_UNUSED_LABEL\n-# else\n+# if (GCC_VERSION >= 2093)\n #  define ATTRIBUTE_UNUSED_LABEL ATTRIBUTE_UNUSED\n-# endif /* GNUC < 2.93 */\n+# else\n+#  define ATTRIBUTE_UNUSED_LABEL\n+# endif /* GNUC >= 2.93 */\n #endif /* ATTRIBUTE_UNUSED_LABEL */\n \n #ifndef ATTRIBUTE_UNUSED"}]}