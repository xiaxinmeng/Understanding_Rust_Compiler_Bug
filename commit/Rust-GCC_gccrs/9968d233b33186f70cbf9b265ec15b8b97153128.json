{"sha": "9968d233b33186f70cbf9b265ec15b8b97153128", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk2OGQyMzNiMzMxODZmNzBjYmY5YjI2NWVjMTViOGI5NzE1MzEyOA==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2009-03-18T16:59:55Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-03-18T16:59:55Z"}, "message": "graphite.c (exclude_component_ref): Renamed contains_component_ref_p.\n\n2009-03-18  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite.c (exclude_component_ref): Renamed contains_component_ref_p.\n\t(is_simple_operand): Call contains_component_ref_p before calling data\n\treference analysis that would fail on COMPONENT_REFs.\n\n\t* tree-vrp.c (search_for_addr_array): Fix formatting.\n\n\t* g++.dg/graphite: New.\n\t* g++.dg/graphite/graphite.exp: New.\n\t* g++.dg/graphite/pr39447.C: New.\n\nFrom-SVN: r144937", "tree": {"sha": "cb8dceda91b400caad10982f1b60272f8ece3948", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb8dceda91b400caad10982f1b60272f8ece3948"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9968d233b33186f70cbf9b265ec15b8b97153128", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9968d233b33186f70cbf9b265ec15b8b97153128", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9968d233b33186f70cbf9b265ec15b8b97153128", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9968d233b33186f70cbf9b265ec15b8b97153128/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69484bfd6c661917cb9daafd9082e1b5be3f6ccb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69484bfd6c661917cb9daafd9082e1b5be3f6ccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69484bfd6c661917cb9daafd9082e1b5be3f6ccb"}], "stats": {"total": 139, "additions": 116, "deletions": 23}, "files": [{"sha": "e18131d3d2db568b895feae0d78f37beb3e58fe9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9968d233b33186f70cbf9b265ec15b8b97153128/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9968d233b33186f70cbf9b265ec15b8b97153128/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9968d233b33186f70cbf9b265ec15b8b97153128", "patch": "@@ -1,3 +1,12 @@\n+2009-03-18  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR middle-end/39447\n+\t* graphite.c (exclude_component_ref): Renamed contains_component_ref_p.\n+\t(is_simple_operand): Call contains_component_ref_p before calling data\n+\treference analysis that would fail on COMPONENT_REFs.\n+\n+\t* tree-vrp.c (search_for_addr_array): Fix formatting.\n+\n 2009-03-18  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-vect-transform.c (vect_loop_versioning): Fold the"}, {"sha": "b732b40d214053a56fbad7106a6aefd49af90556", "filename": "gcc/graphite.c", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9968d233b33186f70cbf9b265ec15b8b97153128/gcc%2Fgraphite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9968d233b33186f70cbf9b265ec15b8b97153128/gcc%2Fgraphite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.c?ref=9968d233b33186f70cbf9b265ec15b8b97153128", "patch": "@@ -1058,31 +1058,24 @@ loop_affine_expr (basic_block scop_entry, struct loop *loop, tree expr)\n \t  || evolution_function_is_affine_multivariate_p (scev, n));\n }\n \n-/* Return false if the tree_code of the operand OP or any of its operands\n-   is component_ref.  */\n+/* Return true if REF or any of its subtrees contains a\n+   component_ref.  */\n \n static bool\n-exclude_component_ref (tree op) \n+contains_component_ref_p (tree ref)\n {\n-  int i;\n-  int len;\n+  if (!ref)\n+    return false;\n \n-  if (op)\n+  while (handled_component_p (ref))\n     {\n-      if (TREE_CODE (op) == COMPONENT_REF)\n-\treturn false;\n-      else\n-\t{\n-\t  len = TREE_OPERAND_LENGTH (op);\t  \n-\t  for (i = 0; i < len; ++i)\n-\t    {\n-\t      if (!exclude_component_ref (TREE_OPERAND (op, i)))\n-\t\treturn false;\n-\t    }\n-\t}\n+      if (TREE_CODE (ref) == COMPONENT_REF)\n+\treturn true;\n+\n+      ref = TREE_OPERAND (ref, 0);\n     }\n \n-  return true;\n+  return false;\n }\n \n /* Return true if the operand OP is simple.  */\n@@ -1094,13 +1087,15 @@ is_simple_operand (loop_p loop, gimple stmt, tree op)\n   if (DECL_P (op)\n       /* or a structure,  */\n       || AGGREGATE_TYPE_P (TREE_TYPE (op))\n+      /* or a COMPONENT_REF,  */\n+      || contains_component_ref_p (op)\n       /* or a memory access that cannot be analyzed by the data\n \t reference analysis.  */\n       || ((handled_component_p (op) || INDIRECT_REF_P (op))\n \t  && !stmt_simple_memref_p (loop, stmt, op)))\n     return false;\n \n-  return exclude_component_ref (op);\n+  return true;\n }\n \n /* Return true only when STMT is simple enough for being handled by"}, {"sha": "510ffbff1b568be4b4355f212d24d731668c56c0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9968d233b33186f70cbf9b265ec15b8b97153128/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9968d233b33186f70cbf9b265ec15b8b97153128/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9968d233b33186f70cbf9b265ec15b8b97153128", "patch": "@@ -1,3 +1,10 @@\n+2009-03-18  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR middle-end/39447\n+\t* g++.dg/graphite: New.\n+\t* g++.dg/graphite/graphite.exp: New.\n+\t* g++.dg/graphite/pr39447.C: New.\n+\n 2009-03-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR c++/39425"}, {"sha": "d1993a2e805f3fa00066167b1db5fa81b7d6a4f4", "filename": "gcc/testsuite/g++.dg/graphite/graphite.exp", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9968d233b33186f70cbf9b265ec15b8b97153128/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fgraphite.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9968d233b33186f70cbf9b265ec15b8b97153128/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fgraphite.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fgraphite.exp?ref=9968d233b33186f70cbf9b265ec15b8b97153128", "patch": "@@ -0,0 +1,48 @@\n+#   Copyright (C) 2009 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Load support procs.\n+load_lib g++-dg.exp\n+\n+if ![check_effective_target_fgraphite] {\n+  return\n+}\n+\n+# The default action for a test is 'compile'.  Save current default.\n+global dg-do-what-default\n+set save-dg-do-what-default ${dg-do-what-default}\n+set dg-do-what-default compile\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# Clean up.\n+set dg-do-what-default ${save-dg-do-what-default}\n+\n+# All done.\n+dg-finish"}, {"sha": "a0d09ec2b93c977cc948bf4e450885b6e6508106", "filename": "gcc/testsuite/g++.dg/graphite/pr39447.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9968d233b33186f70cbf9b265ec15b8b97153128/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fpr39447.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9968d233b33186f70cbf9b265ec15b8b97153128/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fpr39447.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fpr39447.C?ref=9968d233b33186f70cbf9b265ec15b8b97153128", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-options \"-O2 -fgraphite-identity\" } */\n+\n+struct Point\n+{\n+  int line, col;\n+\n+  Point( int l = -1, int c = 0 ) throw() : line( l ), col( c ) {}\n+  bool operator==( const Point & p ) const throw()\n+  { return ( line == p.line && col == p.col ); }\n+  bool operator<( const Point & p ) const throw()\n+  { return ( line < p.line || ( line == p.line && col < p.col ) ); }\n+};\n+\n+class Buffer\n+{\n+public:\n+  int characters( const int line ) const throw();\n+  int pgetc( Point & p ) const throw();\n+  Point eof() const throw() { return Point( 0, 0 ); }\n+  bool pisvalid( const Point & p ) const throw()\n+  { return ( ( p.col >= 0 && p.col < characters( p.line ) ) || p == eof() );\n+  }\n+  bool save( Point p1 = Point(), Point p2 = Point() ) const;\n+};\n+\n+bool Buffer::save( Point p1, Point p2 ) const\n+{\n+  if( !this->pisvalid( p1 ) ) p1 = eof();\n+  if( !this->pisvalid( p2 ) ) p2 = eof();\n+  for( Point p = p1; p < p2; ) { pgetc( p ); }\n+  return true;\n+}\n+\n+"}, {"sha": "755b117e54ae6566c93dd9ccc99b599e90001ec9", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9968d233b33186f70cbf9b265ec15b8b97153128/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9968d233b33186f70cbf9b265ec15b8b97153128/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=9968d233b33186f70cbf9b265ec15b8b97153128", "patch": "@@ -5067,7 +5067,7 @@ check_array_ref (tree ref, const location_t *location, bool ignore_off_by_one)\n    address of an ARRAY_REF, and call check_array_ref on it.  */\n \n static void\n-search_for_addr_array(tree t, const location_t *location)\n+search_for_addr_array (tree t, const location_t *location)\n {\n   while (TREE_CODE (t) == SSA_NAME)\n     {\n@@ -5076,8 +5076,8 @@ search_for_addr_array(tree t, const location_t *location)\n       if (gimple_code (g) != GIMPLE_ASSIGN)\n \treturn;\n \n-      if (get_gimple_rhs_class (gimple_assign_rhs_code (g)) !=\n-\t  GIMPLE_SINGLE_RHS)\n+      if (get_gimple_rhs_class (gimple_assign_rhs_code (g)) \n+\t  != GIMPLE_SINGLE_RHS)\n \treturn;\n \n       t = gimple_assign_rhs1 (g);\n@@ -5094,7 +5094,7 @@ search_for_addr_array(tree t, const location_t *location)\n       if (TREE_CODE (t) == ARRAY_REF)\n \tcheck_array_ref (t, location, true /*ignore_off_by_one*/);\n \n-      t = TREE_OPERAND(t,0);\n+      t = TREE_OPERAND (t, 0);\n     }\n   while (handled_component_p (t));\n }"}]}