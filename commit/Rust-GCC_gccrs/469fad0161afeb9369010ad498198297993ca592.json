{"sha": "469fad0161afeb9369010ad498198297993ca592", "node_id": "C_kwDOANBUbNoAKDQ2OWZhZDAxNjFhZmViOTM2OTAxMGFkNDk4MTk4Mjk3OTkzY2E1OTI", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-04-13T16:40:52Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-04-13T16:40:52Z"}, "message": "OpenMP/Fortran: Fix EXIT in loop diagnostic [PR105242]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/105242\n\t* match.cc (match_exit_cycle): Handle missing OMP LOOP, DO and SIMD\n\tdirectives in the EXIT/CYCLE diagnostic.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/105242\n\t* gfortran.dg/gomp/loop-exit.f90: New test.", "tree": {"sha": "f8dbe12d99329f26ff141570055c48135d07f549", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8dbe12d99329f26ff141570055c48135d07f549"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/469fad0161afeb9369010ad498198297993ca592", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/469fad0161afeb9369010ad498198297993ca592", "html_url": "https://github.com/Rust-GCC/gccrs/commit/469fad0161afeb9369010ad498198297993ca592", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/469fad0161afeb9369010ad498198297993ca592/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec03862f809e544a9b7d28067e51597dc92a0244", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec03862f809e544a9b7d28067e51597dc92a0244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec03862f809e544a9b7d28067e51597dc92a0244"}], "stats": {"total": 840, "additions": 769, "deletions": 71}, "files": [{"sha": "205811bb9694e3d6c895efb5ab9c43311b372bec", "filename": "gcc/fortran/match.cc", "status": "modified", "additions": 95, "deletions": 71, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/469fad0161afeb9369010ad498198297993ca592/gcc%2Ffortran%2Fmatch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/469fad0161afeb9369010ad498198297993ca592/gcc%2Ffortran%2Fmatch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.cc?ref=469fad0161afeb9369010ad498198297993ca592", "patch": "@@ -2857,83 +2857,107 @@ match_exit_cycle (gfc_statement st, gfc_exec_op op)\n \n   for (o = p, cnt = 0; o->state == COMP_DO && o->previous != NULL; cnt++)\n     o = o->previous;\n+\n+  int count = 1;\n   if (cnt > 0\n       && o != NULL\n-      && o->state == COMP_OMP_STRUCTURED_BLOCK\n-      && (o->head->op == EXEC_OACC_LOOP\n-\t  || o->head->op == EXEC_OACC_KERNELS_LOOP\n-\t  || o->head->op == EXEC_OACC_PARALLEL_LOOP\n-\t  || o->head->op == EXEC_OACC_SERIAL_LOOP))\n-    {\n-      int collapse = 1;\n-      gcc_assert (o->head->next != NULL\n-\t\t  && (o->head->next->op == EXEC_DO\n-\t\t      || o->head->next->op == EXEC_DO_WHILE)\n-\t\t  && o->previous != NULL\n-\t\t  && o->previous->tail->op == o->head->op);\n-      if (o->previous->tail->ext.omp_clauses != NULL)\n-\t{\n-\t  /* Both collapsed and tiled loops are lowered the same way, but are not\n-\t     compatible.  In gfc_trans_omp_do, the tile is prioritized.  */\n-\t  if (o->previous->tail->ext.omp_clauses->tile_list)\n-\t    {\n-\t      collapse = 0;\n-\t      gfc_expr_list *el = o->previous->tail->ext.omp_clauses->tile_list;\n-\t      for ( ; el; el = el->next)\n-\t\t++collapse;\n-\t    }\n-\t  else if (o->previous->tail->ext.omp_clauses->collapse > 1)\n-\t    collapse = o->previous->tail->ext.omp_clauses->collapse;\n-\t}\n-      if (st == ST_EXIT && cnt <= collapse)\n-\t{\n-\t  gfc_error (\"EXIT statement at %C terminating !$ACC LOOP loop\");\n-\t  return MATCH_ERROR;\n-\t}\n-      if (st == ST_CYCLE && cnt < collapse)\n-\t{\n-\t  gfc_error (o->previous->tail->ext.omp_clauses->tile_list\n-\t\t     ? G_(\"CYCLE statement at %C to non-innermost tiled\"\n-\t\t\t  \" !$ACC LOOP loop\")\n-\t\t     : G_(\"CYCLE statement at %C to non-innermost collapsed\"\n-\t\t\t  \" !$ACC LOOP loop\"));\n-\t  return MATCH_ERROR;\n-\t}\n-    }\n-  if (cnt > 0\n-      && o != NULL\n-      && (o->state == COMP_OMP_STRUCTURED_BLOCK)\n-      && (o->head->op == EXEC_OMP_DO\n-\t  || o->head->op == EXEC_OMP_PARALLEL_DO\n-\t  || o->head->op == EXEC_OMP_SIMD\n-\t  || o->head->op == EXEC_OMP_DO_SIMD\n-\t  || o->head->op == EXEC_OMP_PARALLEL_DO_SIMD))\n-    {\n-      int count = 1;\n-      gcc_assert (o->head->next != NULL\n+      && o->state == COMP_OMP_STRUCTURED_BLOCK)\n+    switch (o->head->op)\n+      {\n+      case EXEC_OACC_LOOP:\n+      case EXEC_OACC_KERNELS_LOOP:\n+      case EXEC_OACC_PARALLEL_LOOP:\n+      case EXEC_OACC_SERIAL_LOOP:\n+\tgcc_assert (o->head->next != NULL\n+\t\t    && (o->head->next->op == EXEC_DO\n+\t\t\t|| o->head->next->op == EXEC_DO_WHILE)\n+\t\t    && o->previous != NULL\n+\t\t    && o->previous->tail->op == o->head->op);\n+\tif (o->previous->tail->ext.omp_clauses != NULL)\n+\t  {\n+\t    /* Both collapsed and tiled loops are lowered the same way, but are\n+\t       not compatible.  In gfc_trans_omp_do, the tile is prioritized. */\n+\t    if (o->previous->tail->ext.omp_clauses->tile_list)\n+\t      {\n+\t\tcount = 0;\n+\t\tgfc_expr_list *el\n+\t\t  = o->previous->tail->ext.omp_clauses->tile_list;\n+\t\tfor ( ; el; el = el->next)\n+\t\t  ++count;\n+\t      }\n+\t    else if (o->previous->tail->ext.omp_clauses->collapse > 1)\n+\t      count = o->previous->tail->ext.omp_clauses->collapse;\n+\t  }\n+\tif (st == ST_EXIT && cnt <= count)\n+\t  {\n+\t    gfc_error (\"EXIT statement at %C terminating !$ACC LOOP loop\");\n+\t    return MATCH_ERROR;\n+\t  }\n+\tif (st == ST_CYCLE && cnt < count)\n+\t  {\n+\t    gfc_error (o->previous->tail->ext.omp_clauses->tile_list\n+\t\t       ? G_(\"CYCLE statement at %C to non-innermost tiled \"\n+\t\t\t    \"!$ACC LOOP loop\")\n+\t\t       : G_(\"CYCLE statement at %C to non-innermost collapsed \"\n+\t\t\t    \"!$ACC LOOP loop\"));\n+\t    return MATCH_ERROR;\n+\t  }\n+\tbreak;\n+      case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:\n+      case EXEC_OMP_TARGET_PARALLEL_DO_SIMD:\n+      case EXEC_OMP_TARGET_SIMD:\n+      case EXEC_OMP_TASKLOOP_SIMD:\n+      case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n+      case EXEC_OMP_MASTER_TASKLOOP_SIMD:\n+      case EXEC_OMP_PARALLEL_MASKED_TASKLOOP_SIMD:\n+      case EXEC_OMP_MASKED_TASKLOOP_SIMD:\n+      case EXEC_OMP_PARALLEL_DO_SIMD:\n+      case EXEC_OMP_DISTRIBUTE_SIMD:\n+      case EXEC_OMP_DISTRIBUTE_PARALLEL_DO_SIMD:\n+      case EXEC_OMP_TEAMS_DISTRIBUTE_SIMD:\n+      case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD:\n+      case EXEC_OMP_LOOP:\n+      case EXEC_OMP_PARALLEL_LOOP:\n+      case EXEC_OMP_TEAMS_LOOP:\n+      case EXEC_OMP_TARGET_PARALLEL_LOOP:\n+      case EXEC_OMP_TARGET_TEAMS_LOOP:\n+      case EXEC_OMP_DO:\n+      case EXEC_OMP_PARALLEL_DO:\n+      case EXEC_OMP_SIMD:\n+      case EXEC_OMP_DO_SIMD:\n+      case EXEC_OMP_DISTRIBUTE_PARALLEL_DO:\n+      case EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO:\n+      case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO:\n+      case EXEC_OMP_TARGET_PARALLEL_DO:\n+      case EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:\n+\n+\tgcc_assert (o->head->next != NULL\n \t\t  && (o->head->next->op == EXEC_DO\n \t\t      || o->head->next->op == EXEC_DO_WHILE)\n \t\t  && o->previous != NULL\n \t\t  && o->previous->tail->op == o->head->op);\n-      if (o->previous->tail->ext.omp_clauses != NULL)\n-\t{\n-\t  if (o->previous->tail->ext.omp_clauses->collapse > 1)\n-\t    count = o->previous->tail->ext.omp_clauses->collapse;\n-\t  if (o->previous->tail->ext.omp_clauses->orderedc)\n-\t    count = o->previous->tail->ext.omp_clauses->orderedc;\n-\t}\n-      if (st == ST_EXIT && cnt <= count)\n-\t{\n-\t  gfc_error (\"EXIT statement at %C terminating !$OMP DO loop\");\n-\t  return MATCH_ERROR;\n-\t}\n-      if (st == ST_CYCLE && cnt < count)\n-\t{\n-\t  gfc_error (\"CYCLE statement at %C to non-innermost collapsed\"\n-\t\t     \" !$OMP DO loop\");\n-\t  return MATCH_ERROR;\n-\t}\n-    }\n+\tif (o->previous->tail->ext.omp_clauses != NULL)\n+\t  {\n+\t    if (o->previous->tail->ext.omp_clauses->collapse > 1)\n+\t      count = o->previous->tail->ext.omp_clauses->collapse;\n+\t    if (o->previous->tail->ext.omp_clauses->orderedc)\n+\t      count = o->previous->tail->ext.omp_clauses->orderedc;\n+\t  }\n+\tif (st == ST_EXIT && cnt <= count)\n+\t  {\n+\t    gfc_error (\"EXIT statement at %C terminating !$OMP DO loop\");\n+\t    return MATCH_ERROR;\n+\t  }\n+\tif (st == ST_CYCLE && cnt < count)\n+\t  {\n+\t    gfc_error (\"CYCLE statement at %C to non-innermost collapsed \"\n+\t\t       \"!$OMP DO loop\");\n+\t    return MATCH_ERROR;\n+\t  }\n+\tbreak;\n+      default:\n+\tbreak;\n+      }\n \n   /* Save the first statement in the construct - needed by the backend.  */\n   new_st.ext.which_construct = p->construct;"}, {"sha": "81eebcba66afa3c5791423e7cf1b4fc2d88500cb", "filename": "gcc/testsuite/gfortran.dg/gomp/loop-exit.f90", "status": "added", "additions": 674, "deletions": 0, "changes": 674, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/469fad0161afeb9369010ad498198297993ca592/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Floop-exit.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/469fad0161afeb9369010ad498198297993ca592/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Floop-exit.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Floop-exit.f90?ref=469fad0161afeb9369010ad498198297993ca592", "patch": "@@ -0,0 +1,674 @@\n+subroutine sub1\n+!$omp do\n+outer: do i = 1, 5\n+  inner: do j = 1, 5\n+       if (k == 5) exit  ! ok\n+       if (k == 7) exit inner  ! ok\n+       if (k == 9) exit outer  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do inner\n+end do outer\n+end\n+\n+subroutine sub2\n+!$omp parallel do\n+outer: do i = 1, 5\n+  inner: do j = 1, 5\n+       if (k == 5) exit  ! ok\n+       if (k == 7) exit inner  ! ok\n+       if (k == 9) exit outer  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do inner\n+end do outer\n+end\n+\n+subroutine sub3\n+!$omp simd\n+outer: do i = 1, 5\n+  inner: do j = 1, 5\n+       if (k == 5) exit  ! ok\n+       if (k == 7) exit inner  ! ok\n+       if (k == 9) exit outer  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do inner\n+end do outer\n+end\n+\n+subroutine sub4\n+!$omp do simd\n+outer: do i = 1, 5\n+  inner: do j = 1, 5\n+       if (k == 5) exit  ! ok\n+       if (k == 7) exit inner  ! ok\n+       if (k == 9) exit outer  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do inner\n+end do outer\n+end\n+\n+subroutine sub5\n+!$omp parallel do simd\n+outer: do i = 1, 5\n+  inner: do j = 1, 5\n+       if (k == 5) exit  ! ok\n+       if (k == 7) exit inner  ! ok\n+       if (k == 9) exit outer  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do inner\n+end do outer\n+end\n+\n+subroutine sub6\n+!$omp distribute simd\n+outer: do i = 1, 5\n+  inner: do j = 1, 5\n+       if (k == 5) exit  ! ok\n+       if (k == 7) exit inner  ! ok\n+       if (k == 9) exit outer  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do inner\n+end do outer\n+end\n+\n+subroutine sub7\n+!$omp distribute parallel do\n+outer: do i = 1, 5\n+  inner: do j = 1, 5\n+       if (k == 5) exit  ! ok\n+       if (k == 7) exit inner  ! ok\n+       if (k == 9) exit outer  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do inner\n+end do outer\n+end\n+\n+subroutine sub8\n+!$omp distribute parallel do simd\n+outer: do i = 1, 5\n+  inner: do j = 1, 5\n+       if (k == 5) exit  ! ok\n+       if (k == 7) exit inner  ! ok\n+       if (k == 9) exit outer  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do inner\n+end do outer\n+end\n+\n+subroutine sub9\n+!$omp teams distribute simd\n+outer: do i = 1, 5\n+  inner: do j = 1, 5\n+       if (k == 5) exit  ! ok\n+       if (k == 7) exit inner  ! ok\n+       if (k == 9) exit outer  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do inner\n+end do outer\n+end\n+\n+subroutine sub10\n+!$omp target teams distribute simd\n+outer: do i = 1, 5\n+  inner: do j = 1, 5\n+       if (k == 5) exit  ! ok\n+       if (k == 7) exit inner  ! ok\n+       if (k == 9) exit outer  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do inner\n+end do outer\n+end\n+\n+subroutine sub11\n+!$omp teams distribute parallel do\n+outer: do i = 1, 5\n+  inner: do j = 1, 5\n+       if (k == 5) exit  ! ok\n+       if (k == 7) exit inner  ! ok\n+       if (k == 9) exit outer  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do inner\n+end do outer\n+end\n+\n+subroutine sub12\n+!$omp target teams distribute parallel do\n+outer: do i = 1, 5\n+  inner: do j = 1, 5\n+       if (k == 5) exit  ! ok\n+       if (k == 7) exit inner  ! ok\n+       if (k == 9) exit outer  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do inner\n+end do outer\n+end\n+\n+subroutine sub13\n+!$omp teams distribute parallel do simd\n+outer: do i = 1, 5\n+  inner: do j = 1, 5\n+       if (k == 5) exit  ! ok\n+       if (k == 7) exit inner  ! ok\n+       if (k == 9) exit outer  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do inner\n+end do outer\n+end\n+\n+subroutine sub14\n+!$omp target teams distribute parallel do simd\n+outer: do i = 1, 5\n+  inner: do j = 1, 5\n+       if (k == 5) exit  ! ok\n+       if (k == 7) exit inner  ! ok\n+       if (k == 9) exit outer  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do inner\n+end do outer\n+end\n+\n+subroutine sub15\n+!$omp target parallel do\n+outer: do i = 1, 5\n+  inner: do j = 1, 5\n+       if (k == 5) exit  ! ok\n+       if (k == 7) exit inner  ! ok\n+       if (k == 9) exit outer  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do inner\n+end do outer\n+end\n+\n+subroutine sub16\n+!$omp target parallel do simd\n+outer: do i = 1, 5\n+  inner: do j = 1, 5\n+       if (k == 5) exit  ! ok\n+       if (k == 7) exit inner  ! ok\n+       if (k == 9) exit outer  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do inner\n+end do outer\n+end\n+\n+subroutine sub17\n+!$omp target simd\n+outer: do i = 1, 5\n+  inner: do j = 1, 5\n+       if (k == 5) exit  ! ok\n+       if (k == 7) exit inner  ! ok\n+       if (k == 9) exit outer  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do inner\n+end do outer\n+end\n+\n+subroutine sub18\n+!$omp taskloop simd\n+outer: do i = 1, 5\n+  inner: do j = 1, 5\n+       if (k == 5) exit  ! ok\n+       if (k == 7) exit inner  ! ok\n+       if (k == 9) exit outer  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do inner\n+end do outer\n+end\n+\n+subroutine sub19\n+!$omp parallel master taskloop simd\n+outer: do i = 1, 5\n+  inner: do j = 1, 5\n+       if (k == 5) exit  ! ok\n+       if (k == 7) exit inner  ! ok\n+       if (k == 9) exit outer  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do inner\n+end do outer\n+end\n+\n+subroutine sub20\n+!$omp master taskloop simd\n+outer: do i = 1, 5\n+  inner: do j = 1, 5\n+       if (k == 5) exit  ! ok\n+       if (k == 7) exit inner  ! ok\n+       if (k == 9) exit outer  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do inner\n+end do outer\n+end\n+\n+subroutine sub21\n+!$omp parallel masked taskloop simd\n+outer: do i = 1, 5\n+  inner: do j = 1, 5\n+       if (k == 5) exit  ! ok\n+       if (k == 7) exit inner  ! ok\n+       if (k == 9) exit outer  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do inner\n+end do outer\n+end\n+\n+subroutine sub22\n+!$omp masked taskloop simd\n+outer: do i = 1, 5\n+  inner: do j = 1, 5\n+       if (k == 5) exit  ! ok\n+       if (k == 7) exit inner  ! ok\n+       if (k == 9) exit outer  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do inner\n+end do outer\n+end\n+\n+subroutine sub23\n+!$omp loop\n+outer: do i = 1, 5\n+  inner: do j = 1, 5\n+       if (k == 5) exit  ! ok\n+       if (k == 7) exit inner  ! ok\n+       if (k == 9) exit outer  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do inner\n+end do outer\n+end\n+\n+subroutine sub24\n+!$omp parallel loop\n+outer: do i = 1, 5\n+  inner: do j = 1, 5\n+       if (k == 5) exit  ! ok\n+       if (k == 7) exit inner  ! ok\n+       if (k == 9) exit outer  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do inner\n+end do outer\n+end\n+\n+subroutine sub25\n+!$omp teams loop\n+outer: do i = 1, 5\n+  inner: do j = 1, 5\n+       if (k == 5) exit  ! ok\n+       if (k == 7) exit inner  ! ok\n+       if (k == 9) exit outer  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do inner\n+end do outer\n+end\n+\n+subroutine sub26\n+!$omp target parallel loop\n+outer: do i = 1, 5\n+  inner: do j = 1, 5\n+       if (k == 5) exit  ! ok\n+       if (k == 7) exit inner  ! ok\n+       if (k == 9) exit outer  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do inner\n+end do outer\n+end\n+\n+subroutine sub27\n+!$omp target teams loop\n+outer: do i = 1, 5\n+  inner: do j = 1, 5\n+       if (k == 5) exit  ! ok\n+       if (k == 7) exit inner  ! ok\n+       if (k == 9) exit outer  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do inner\n+end do outer\n+end\n+\n+subroutine sub28\n+!$omp do collapse(3)\n+do ii = i1, i2\n+ do jj = j1, j2\n+   do kk = k1, k2\n+     if (kk > 5) then\n+       k = 0\n+     end if\n+     if (kk == 7) exit  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do\n+  end do\n+end do\n+end\n+\n+subroutine sub29\n+!$omp parallel do collapse(3)\n+do ii = i1, i2\n+ do jj = j1, j2\n+   do kk = k1, k2\n+     if (kk > 5) then\n+       k = 0\n+     end if\n+     if (kk == 7) exit  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do\n+  end do\n+end do\n+end\n+\n+subroutine sub30\n+!$omp simd collapse(3)\n+do ii = i1, i2\n+ do jj = j1, j2\n+   do kk = k1, k2\n+     if (kk > 5) then\n+       k = 0\n+     end if\n+     if (kk == 7) exit  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do\n+  end do\n+end do\n+end\n+\n+subroutine sub31\n+!$omp do simd collapse(3)\n+do ii = i1, i2\n+ do jj = j1, j2\n+   do kk = k1, k2\n+     if (kk > 5) then\n+       k = 0\n+     end if\n+     if (kk == 7) exit  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do\n+  end do\n+end do\n+end\n+\n+subroutine sub32\n+!$omp parallel do simd collapse(3)\n+do ii = i1, i2\n+ do jj = j1, j2\n+   do kk = k1, k2\n+     if (kk > 5) then\n+       k = 0\n+     end if\n+     if (kk == 7) exit  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do\n+  end do\n+end do\n+end\n+\n+subroutine sub33\n+!$omp distribute simd collapse(3)\n+do ii = i1, i2\n+ do jj = j1, j2\n+   do kk = k1, k2\n+     if (kk > 5) then\n+       k = 0\n+     end if\n+     if (kk == 7) exit  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do\n+  end do\n+end do\n+end\n+\n+subroutine sub34\n+!$omp distribute parallel do collapse(3)\n+do ii = i1, i2\n+ do jj = j1, j2\n+   do kk = k1, k2\n+     if (kk > 5) then\n+       k = 0\n+     end if\n+     if (kk == 7) exit  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do\n+  end do\n+end do\n+end\n+\n+subroutine sub35\n+!$omp distribute parallel do simd collapse(3)\n+do ii = i1, i2\n+ do jj = j1, j2\n+   do kk = k1, k2\n+     if (kk > 5) then\n+       k = 0\n+     end if\n+     if (kk == 7) exit  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do\n+  end do\n+end do\n+end\n+\n+subroutine sub36\n+!$omp teams distribute simd collapse(3)\n+do ii = i1, i2\n+ do jj = j1, j2\n+   do kk = k1, k2\n+     if (kk > 5) then\n+       k = 0\n+     end if\n+     if (kk == 7) exit  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do\n+  end do\n+end do\n+end\n+\n+subroutine sub37\n+!$omp target teams distribute simd collapse(3)\n+do ii = i1, i2\n+ do jj = j1, j2\n+   do kk = k1, k2\n+     if (kk > 5) then\n+       k = 0\n+     end if\n+     if (kk == 7) exit  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do\n+  end do\n+end do\n+end\n+\n+subroutine sub38\n+!$omp teams distribute parallel do collapse(3)\n+do ii = i1, i2\n+ do jj = j1, j2\n+   do kk = k1, k2\n+     if (kk > 5) then\n+       k = 0\n+     end if\n+     if (kk == 7) exit  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do\n+  end do\n+end do\n+end\n+\n+subroutine sub39\n+!$omp target teams distribute parallel do collapse(3)\n+do ii = i1, i2\n+ do jj = j1, j2\n+   do kk = k1, k2\n+     if (kk > 5) then\n+       k = 0\n+     end if\n+     if (kk == 7) exit  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do\n+  end do\n+end do\n+end\n+\n+subroutine sub40\n+!$omp teams distribute parallel do simd collapse(3)\n+do ii = i1, i2\n+ do jj = j1, j2\n+   do kk = k1, k2\n+     if (kk > 5) then\n+       k = 0\n+     end if\n+     if (kk == 7) exit  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do\n+  end do\n+end do\n+end\n+\n+subroutine sub41\n+!$omp target teams distribute parallel do simd collapse(3)\n+do ii = i1, i2\n+ do jj = j1, j2\n+   do kk = k1, k2\n+     if (kk > 5) then\n+       k = 0\n+     end if\n+     if (kk == 7) exit  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do\n+  end do\n+end do\n+end\n+\n+subroutine sub42\n+!$omp target parallel do collapse(3)\n+do ii = i1, i2\n+ do jj = j1, j2\n+   do kk = k1, k2\n+     if (kk > 5) then\n+       k = 0\n+     end if\n+     if (kk == 7) exit  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do\n+  end do\n+end do\n+end\n+\n+subroutine sub43\n+!$omp target parallel do simd collapse(3)\n+do ii = i1, i2\n+ do jj = j1, j2\n+   do kk = k1, k2\n+     if (kk > 5) then\n+       k = 0\n+     end if\n+     if (kk == 7) exit  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do\n+  end do\n+end do\n+end\n+\n+subroutine sub44\n+!$omp target simd collapse(3)\n+do ii = i1, i2\n+ do jj = j1, j2\n+   do kk = k1, k2\n+     if (kk > 5) then\n+       k = 0\n+     end if\n+     if (kk == 7) exit  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do\n+  end do\n+end do\n+end\n+\n+subroutine sub45\n+!$omp taskloop simd collapse(3)\n+do ii = i1, i2\n+ do jj = j1, j2\n+   do kk = k1, k2\n+     if (kk > 5) then\n+       k = 0\n+     end if\n+     if (kk == 7) exit  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do\n+  end do\n+end do\n+end\n+\n+subroutine sub46\n+!$omp parallel master taskloop simd collapse(3)\n+do ii = i1, i2\n+ do jj = j1, j2\n+   do kk = k1, k2\n+     if (kk > 5) then\n+       k = 0\n+     end if\n+     if (kk == 7) exit  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do\n+  end do\n+end do\n+end\n+\n+subroutine sub47\n+!$omp master taskloop simd collapse(3)\n+do ii = i1, i2\n+ do jj = j1, j2\n+   do kk = k1, k2\n+     if (kk > 5) then\n+       k = 0\n+     end if\n+     if (kk == 7) exit  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do\n+  end do\n+end do\n+end\n+\n+subroutine sub48\n+!$omp parallel masked taskloop simd collapse(3)\n+do ii = i1, i2\n+ do jj = j1, j2\n+   do kk = k1, k2\n+     if (kk > 5) then\n+       k = 0\n+     end if\n+     if (kk == 7) exit  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do\n+  end do\n+end do\n+end\n+\n+subroutine sub49\n+!$omp masked taskloop simd collapse(3)\n+do ii = i1, i2\n+ do jj = j1, j2\n+   do kk = k1, k2\n+     if (kk > 5) then\n+       k = 0\n+     end if\n+     if (kk == 7) exit  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do\n+  end do\n+end do\n+end\n+\n+subroutine sub50\n+!$omp loop collapse(3)\n+do ii = i1, i2\n+ do jj = j1, j2\n+   do kk = k1, k2\n+     if (kk > 5) then\n+       k = 0\n+     end if\n+     if (kk == 7) exit  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do\n+  end do\n+end do\n+end\n+\n+subroutine sub51\n+!$omp parallel loop collapse(3)\n+do ii = i1, i2\n+ do jj = j1, j2\n+   do kk = k1, k2\n+     if (kk > 5) then\n+       k = 0\n+     end if\n+     if (kk == 7) exit  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do\n+  end do\n+end do\n+end\n+\n+subroutine sub52\n+!$omp teams loop collapse(3)\n+do ii = i1, i2\n+ do jj = j1, j2\n+   do kk = k1, k2\n+     if (kk > 5) then\n+       k = 0\n+     end if\n+     if (kk == 7) exit  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do\n+  end do\n+end do\n+end\n+\n+subroutine sub53\n+!$omp target parallel loop collapse(3)\n+do ii = i1, i2\n+do jj = j1, j2\n+do kk = k1, k2\n+     if (kk > 5) then\n+       k = 0\n+     end if\n+     if (kk == 7) exit  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do\n+  end do\n+end do\n+end\n+\n+subroutine sub54\n+!$omp target teams loop collapse(3)\n+do ii = i1, i2\n+ do jj = j1, j2\n+   do kk = k1, k2\n+     if (kk > 5) then\n+       k = 0\n+     end if\n+     if (kk == 7) exit  ! { dg-error \"EXIT statement at .1. terminating !.OMP DO loop\" }\n+  end do\n+  end do\n+end do\n+end"}]}