{"sha": "a69934e07eb54b76012e32a6aee54fe6af1faaa9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY5OTM0ZTA3ZWI1NGI3NjAxMmUzMmE2YWVlNTRmZTZhZjFmYWFhOQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2004-04-14T14:29:35Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2004-04-14T14:29:35Z"}, "message": "builtins.c (fold_builtin_cabs, [...]): Use `mathfn_built_in' to determine the new builtin.\n\n\t* builtins.c (fold_builtin_cabs, fold_builtin): Use\n\t`mathfn_built_in' to determine the new builtin.\n\t* fold-const.c (fold): Likewise.\n\nFrom-SVN: r80680", "tree": {"sha": "1099c5b0ee54972c5f4fe6788abcafa2379973c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1099c5b0ee54972c5f4fe6788abcafa2379973c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a69934e07eb54b76012e32a6aee54fe6af1faaa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a69934e07eb54b76012e32a6aee54fe6af1faaa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a69934e07eb54b76012e32a6aee54fe6af1faaa9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a69934e07eb54b76012e32a6aee54fe6af1faaa9/comments", "author": null, "committer": null, "parents": [{"sha": "74b9f2d5c81c1799cc8bf2a1b41c5fbad88a0127", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74b9f2d5c81c1799cc8bf2a1b41c5fbad88a0127", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74b9f2d5c81c1799cc8bf2a1b41c5fbad88a0127"}], "stats": {"total": 84, "additions": 12, "deletions": 72}, "files": [{"sha": "00c65114eb2c213a5e301597d151c75a250deb71", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a69934e07eb54b76012e32a6aee54fe6af1faaa9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a69934e07eb54b76012e32a6aee54fe6af1faaa9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a69934e07eb54b76012e32a6aee54fe6af1faaa9", "patch": "@@ -1,3 +1,9 @@\n+2004-04-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (fold_builtin_cabs, fold_builtin): Use\n+\t`mathfn_built_in' to determine the new builtin.\n+\t* fold-const.c (fold): Likewise.\n+\n 2004-04-14  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* doc/invoke.texi: Rename MIPS's -mfix-vr4122-bugs to -mfix-vr4120."}, {"sha": "184711bbc4b4eea909edd6b92dd575f43a0ae740", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a69934e07eb54b76012e32a6aee54fe6af1faaa9/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a69934e07eb54b76012e32a6aee54fe6af1faaa9/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=a69934e07eb54b76012e32a6aee54fe6af1faaa9", "patch": "@@ -5973,18 +5973,7 @@ fold_builtin_cabs (tree fndecl, tree arglist, tree type)\n \n   if (flag_unsafe_math_optimizations)\n     {\n-      enum built_in_function fcode;\n-      tree sqrtfn;\n-\n-      fcode = DECL_FUNCTION_CODE (fndecl);\n-      if (fcode == BUILT_IN_CABS)\n-\tsqrtfn = implicit_built_in_decls[BUILT_IN_SQRT];\n-      else if (fcode == BUILT_IN_CABSF)\n-\tsqrtfn = implicit_built_in_decls[BUILT_IN_SQRTF];\n-      else if (fcode == BUILT_IN_CABSL)\n-\tsqrtfn = implicit_built_in_decls[BUILT_IN_SQRTL];\n-      else\n-\tsqrtfn = NULL_TREE;\n+      tree sqrtfn = mathfn_built_in (type, BUILT_IN_SQRT);\n \n       if (sqrtfn != NULL_TREE)\n \t{\n@@ -7097,17 +7086,7 @@ fold_builtin (tree exp)\n \t      if (flag_unsafe_math_optimizations\n \t\t  && REAL_VALUES_EQUAL (c, dconsthalf))\n \t\t{\n-\t\t  tree sqrtfn;\n-\n-\t\t  fcode = DECL_FUNCTION_CODE (fndecl);\n-\t\t  if (fcode == BUILT_IN_POW)\n-\t\t    sqrtfn = implicit_built_in_decls[BUILT_IN_SQRT];\n-\t\t  else if (fcode == BUILT_IN_POWF)\n-\t\t    sqrtfn = implicit_built_in_decls[BUILT_IN_SQRTF];\n-\t\t  else if (fcode == BUILT_IN_POWL)\n-\t\t    sqrtfn = implicit_built_in_decls[BUILT_IN_SQRTL];\n-\t\t  else\n-\t\t    sqrtfn = NULL_TREE;\n+\t\t  tree sqrtfn = mathfn_built_in (type, BUILT_IN_SQRT);\n \n \t\t  if (sqrtfn != NULL_TREE)\n \t\t    {"}, {"sha": "d67944a735c4f2d1aa09f9e6d593d1d5ef659328", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 49, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a69934e07eb54b76012e32a6aee54fe6af1faaa9/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a69934e07eb54b76012e32a6aee54fe6af1faaa9/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=a69934e07eb54b76012e32a6aee54fe6af1faaa9", "patch": "@@ -6509,25 +6509,7 @@ fold (tree expr)\n \t\t  && operand_equal_p (TREE_VALUE (TREE_OPERAND (arg0, 1)),\n \t\t\t\t      TREE_VALUE (TREE_OPERAND (arg1, 1)), 0))\n \t\t{\n-\t\t  tree sinfn;\n-\n-\t\t  switch (fcode0)\n-\t\t    {\n-\t\t    case BUILT_IN_TAN:\n-\t\t    case BUILT_IN_COS:\n-\t\t      sinfn = implicit_built_in_decls[BUILT_IN_SIN];\n-\t\t      break;\n-\t\t    case BUILT_IN_TANF:\n-\t\t    case BUILT_IN_COSF:\n-\t\t      sinfn = implicit_built_in_decls[BUILT_IN_SINF];\n-\t\t      break;\n-\t\t    case BUILT_IN_TANL:\n-\t\t    case BUILT_IN_COSL:\n-\t\t      sinfn = implicit_built_in_decls[BUILT_IN_SINL];\n-\t\t      break;\n-\t\t    default:\n-\t\t      sinfn = NULL_TREE;\n-\t\t    }\n+\t\t  tree sinfn = mathfn_built_in (type, BUILT_IN_SIN);\n \n \t\t  if (sinfn != NULL_TREE)\n \t\t    return build_function_call_expr (sinfn,\n@@ -6588,16 +6570,7 @@ fold (tree expr)\n \t      if (! optimize_size\n \t\t  && operand_equal_p (arg0, arg1, 0))\n \t\t{\n-\t\t  tree powfn;\n-\n-\t\t  if (type == double_type_node)\n-\t\t    powfn = implicit_built_in_decls[BUILT_IN_POW];\n-\t\t  else if (type == float_type_node)\n-\t\t    powfn = implicit_built_in_decls[BUILT_IN_POWF];\n-\t\t  else if (type == long_double_type_node)\n-\t\t    powfn = implicit_built_in_decls[BUILT_IN_POWL];\n-\t\t  else\n-\t\t    powfn = NULL_TREE;\n+\t\t  tree powfn = mathfn_built_in (type, BUILT_IN_POW);\n \n \t\t  if (powfn)\n \t\t    {\n@@ -6831,16 +6804,7 @@ fold (tree expr)\n \t      && operand_equal_p (TREE_VALUE (TREE_OPERAND (arg0, 1)),\n \t\t\t\t  TREE_VALUE (TREE_OPERAND (arg1, 1)), 0))\n \t    {\n-\t      tree tanfn;\n-\n-\t      if (fcode0 == BUILT_IN_SIN)\n-\t\ttanfn = implicit_built_in_decls[BUILT_IN_TAN];\n-\t      else if (fcode0 == BUILT_IN_SINF)\n-\t\ttanfn = implicit_built_in_decls[BUILT_IN_TANF];\n-\t      else if (fcode0 == BUILT_IN_SINL)\n-\t\ttanfn = implicit_built_in_decls[BUILT_IN_TANL];\n-\t      else\n-\t\ttanfn = NULL_TREE;\n+\t      tree tanfn = mathfn_built_in (type, BUILT_IN_TAN);\n \n \t      if (tanfn != NULL_TREE)\n \t\treturn build_function_call_expr (tanfn,\n@@ -6854,16 +6818,7 @@ fold (tree expr)\n \t      && operand_equal_p (TREE_VALUE (TREE_OPERAND (arg0, 1)),\n \t\t\t\t  TREE_VALUE (TREE_OPERAND (arg1, 1)), 0))\n \t    {\n-\t      tree tanfn;\n-\n-\t      if (fcode0 == BUILT_IN_COS)\n-\t\ttanfn = implicit_built_in_decls[BUILT_IN_TAN];\n-\t      else if (fcode0 == BUILT_IN_COSF)\n-\t\ttanfn = implicit_built_in_decls[BUILT_IN_TANF];\n-\t      else if (fcode0 == BUILT_IN_COSL)\n-\t\ttanfn = implicit_built_in_decls[BUILT_IN_TANL];\n-\t      else\n-\t\ttanfn = NULL_TREE;\n+\t      tree tanfn = mathfn_built_in (type, BUILT_IN_TAN);\n \n \t      if (tanfn != NULL_TREE)\n \t\t{"}]}