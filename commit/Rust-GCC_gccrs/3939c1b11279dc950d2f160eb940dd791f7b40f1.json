{"sha": "3939c1b11279dc950d2f160eb940dd791f7b40f1", "node_id": "C_kwDOANBUbNoAKDM5MzljMWIxMTI3OWRjOTUwZDJmMTYwZWI5NDBkZDc5MWY3YjQwZjE", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-02-15T11:26:48Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-02-15T11:26:48Z"}, "message": "Fortran/OpenMP: Fix depend-clause handling\n\ngcc/fortran/ChangeLog:\n\n\t* trans-openmp.cc (gfc_trans_omp_clauses, gfc_trans_omp_depobj):\n\tDepend on the proper addr, for ptr/alloc depend on pointee.\n\nlibgomp/ChangeLog:\n\n\t* testsuite/libgomp.fortran/depend-4.f90: New test.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/gomp/depend-4.f90: New test.\n\t* gfortran.dg/gomp/depend-5.f90: New test.", "tree": {"sha": "ae7e9f7c6bc0869d3add8956f2016847f426cf47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae7e9f7c6bc0869d3add8956f2016847f426cf47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3939c1b11279dc950d2f160eb940dd791f7b40f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3939c1b11279dc950d2f160eb940dd791f7b40f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3939c1b11279dc950d2f160eb940dd791f7b40f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3939c1b11279dc950d2f160eb940dd791f7b40f1/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0863d0ede34d21b2258686e6ccfd6dbb100bb754", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0863d0ede34d21b2258686e6ccfd6dbb100bb754", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0863d0ede34d21b2258686e6ccfd6dbb100bb754"}], "stats": {"total": 477, "additions": 469, "deletions": 8}, "files": [{"sha": "e1c9d46add6d37a94dcf4dd239ecbcd73ab5f3ea", "filename": "gcc/fortran/trans-openmp.cc", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3939c1b11279dc950d2f160eb940dd791f7b40f1/gcc%2Ffortran%2Ftrans-openmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3939c1b11279dc950d2f160eb940dd791f7b40f1/gcc%2Ffortran%2Ftrans-openmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.cc?ref=3939c1b11279dc950d2f160eb940dd791f7b40f1", "patch": "@@ -2881,15 +2881,14 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t\t  tree decl = gfc_trans_omp_variable (n->sym, false);\n \t\t  if (gfc_omp_privatize_by_reference (decl))\n \t\t    decl = build_fold_indirect_ref (decl);\n-\t\t  if (n->u.depend_op == OMP_DEPEND_DEPOBJ\n-\t\t      && POINTER_TYPE_P (TREE_TYPE (decl)))\n-\t\t    decl = build_fold_indirect_ref (decl);\n \t\t  if (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (decl)))\n \t\t    {\n \t\t      decl = gfc_conv_descriptor_data_get (decl);\n \t\t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (decl)));\n \t\t      decl = build_fold_indirect_ref (decl);\n \t\t    }\n+\t\t  else if (n->sym->attr.allocatable || n->sym->attr.pointer)\n+\t\t    decl = build_fold_indirect_ref (decl);\n \t\t  else if (DECL_P (decl))\n \t\t    TREE_ADDRESSABLE (decl) = 1;\n \t\t  OMP_CLAUSE_DECL (node) = decl;\n@@ -5508,12 +5507,43 @@ gfc_trans_omp_depobj (gfc_code *code)\n   if (n)\n     {\n       tree var;\n-      if (n->expr)\n-        var = gfc_convert_expr_to_tree (&block, n->expr);\n+      if (n->expr && n->expr->ref->u.ar.type != AR_FULL)\n+\t{\n+\t  gfc_init_se (&se, NULL);\n+\t  if (n->expr->ref->u.ar.type == AR_ELEMENT)\n+\t    {\n+\t      gfc_conv_expr_reference (&se, n->expr);\n+\t      var = se.expr;\n+\t    }\n+\t  else\n+\t    {\n+\t      gfc_conv_expr_descriptor (&se, n->expr);\n+\t      var = gfc_conv_array_data (se.expr);\n+\t    }\n+\t  gfc_add_block_to_block (&block, &se.pre);\n+\t  gfc_add_block_to_block (&block, &se.post);\n+\t  gcc_assert (POINTER_TYPE_P (TREE_TYPE (var)));\n+\t}\n       else\n-\tvar = gfc_get_symbol_decl (n->sym);\n-      if (!POINTER_TYPE_P (TREE_TYPE (var)))\n-        var = gfc_build_addr_expr (NULL, var);\n+\t{\n+\t  var = gfc_get_symbol_decl (n->sym);\n+\t  if (POINTER_TYPE_P (TREE_TYPE (var))\n+\t      && GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (TREE_TYPE (var))))\n+\t    var = build_fold_indirect_ref (var);\n+\t  if (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (var)))\n+\t    {\n+\t      var = gfc_conv_descriptor_data_get (var);\n+\t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (var)));\n+\t    }\n+\t  else if ((n->sym->attr.allocatable || n->sym->attr.pointer)\n+\t\t   && n->sym->attr.optional)\n+\t    var = build_fold_indirect_ref (var);\n+\t  else if (!POINTER_TYPE_P (TREE_TYPE (var)))\n+\t    {\n+\t      TREE_ADDRESSABLE (var) = 1;\n+\t      var = gfc_build_addr_expr (NULL, var);\n+\t    }\n+\t}\n       depobj = save_expr (depobj);\n       tree r = build_fold_indirect_ref_loc (loc, depobj);\n       gfc_add_expr_to_block (&block,"}, {"sha": "d6686c1e48f8b57d17a424f3591909615624dce7", "filename": "gcc/testsuite/gfortran.dg/gomp/depend-4.f90", "status": "added", "additions": 240, "deletions": 0, "changes": 240, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3939c1b11279dc950d2f160eb940dd791f7b40f1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdepend-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3939c1b11279dc950d2f160eb940dd791f7b40f1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdepend-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdepend-4.f90?ref=3939c1b11279dc950d2f160eb940dd791f7b40f1", "patch": "@@ -0,0 +1,240 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-fdump-tree-gimple -fdump-tree-original\" }\n+\n+! Check that 'omp depobj's depend and 'omp task/... depend' depend on\n+! the same variable\n+\n+! For pointers, it depends on the address of the pointer target\n+! For allocatable, on the allocated memory address\n+\n+subroutine foo(dss, dsp, dsa, daa, daaa, daap, doss, dosp, dosa, doaa, doaaa, doaap)\n+  !use omp_lib\n+  use iso_c_binding, only: c_intptr_t\n+  implicit none (type, external)\n+  integer, parameter :: omp_depend_kind = 2*c_intptr_t\n+  integer :: ss, sp, sa, aa(4), aaa(:), aap(:)\n+  integer :: dss, dsp, dsa, daa(4), daaa(:), daap(:)\n+  integer :: doss, dosp, dosa, doaa(4), doaaa(:), doaap(:)\n+  optional :: doss, dosp, dosa, doaa, doaaa, doaap\n+  allocatable :: sa, aaa, dsa, daaa, dosa, doaaa\n+  pointer :: sp, aap, dsp, daap, dosp, doaap\n+\n+  integer(omp_depend_kind) :: object(18)\n+  integer(omp_depend_kind) :: elem(9)\n+\n+  !$omp depobj(object(1)) depend(in: ss)\n+  !$omp depobj(object(2)) depend(in: sp)\n+  !$omp depobj(object(3)) depend(in: sa)\n+  !$omp depobj(object(4)) depend(in: aa)\n+  !$omp depobj(object(5)) depend(in: aaa)\n+  !$omp depobj(object(6)) depend(in: aap)\n+  !$omp depobj(object(7)) depend(in: dss)\n+  !$omp depobj(object(8)) depend(in: dsp)\n+  !$omp depobj(object(9)) depend(in: dsa)\n+  !$omp depobj(object(10)) depend(in: daa)\n+  !$omp depobj(object(11)) depend(in: daaa)\n+  !$omp depobj(object(12)) depend(in: daap)\n+  !$omp depobj(object(13)) depend(in: doss)\n+  !$omp depobj(object(14)) depend(in: dosp)\n+  !$omp depobj(object(15)) depend(in: dosa)\n+  !$omp depobj(object(16)) depend(in: doaa)\n+  !$omp depobj(object(17)) depend(in: doaaa)\n+  !$omp depobj(object(18)) depend(in: doaap)\n+\n+  !$omp depobj(elem(1)) depend(in: aa(2))\n+  !$omp depobj(elem(2)) depend(in: aaa(2))\n+  !$omp depobj(elem(3)) depend(in: aap(2))\n+  !$omp depobj(elem(4)) depend(in: daa(2))\n+  !$omp depobj(elem(5)) depend(in: daaa(2))\n+  !$omp depobj(elem(6)) depend(in: daap(2))\n+  !$omp depobj(elem(6)) depend(in: doaa(2))\n+  !$omp depobj(elem(8)) depend(in: doaaa(2))\n+  !$omp depobj(elem(9)) depend(in: doaap(2))\n+\n+  !$omp parallel\n+  !$omp single\n+    !$omp task depend(out: ss)\n+      ss = 4\n+    !$omp end task\n+    !$omp task depend(out: sp)\n+      sp = 4\n+    !$omp end task\n+    !$omp task depend(out: sa)\n+      sa = 4\n+    !$omp end task\n+    !$omp task depend(out: aa)\n+      aa = 4\n+    !$omp end task\n+    !$omp task depend(out: aaa)\n+      aaa = 4\n+    !$omp end task\n+    !$omp task depend(out: aap)\n+      aap = 4\n+    !$omp end task\n+    !$omp task depend(out: dss)\n+      dss = 4\n+    !$omp end task\n+    !$omp task depend(out: dsp)\n+      dsp = 4\n+    !$omp end task\n+    !$omp task depend(out: dsa)\n+      dsa = 4\n+    !$omp end task\n+    !$omp task depend(out: daa)\n+      daa = 4\n+    !$omp end task\n+    !$omp task depend(out: daaa)\n+      daaa = 4\n+    !$omp end task\n+    !$omp task depend(out: daap)\n+      daap = 4\n+    !$omp end task\n+    !$omp task depend(out: doss)\n+      doss = 4\n+    !$omp end task\n+    !$omp task depend(out: dosp)\n+      dosp = 4\n+    !$omp end task\n+    !$omp task depend(out: dosa)\n+      dosa = 4\n+    !$omp end task\n+    !$omp task depend(out: doaa)\n+      doaa = 4\n+    !$omp end task\n+    !$omp task depend(out: doaaa)\n+      doaaa = 4\n+    !$omp end task\n+    !$omp task depend(out: doaap)\n+      doaap = 4\n+    !$omp end task\n+\n+    !$omp task depend(out: aa(2))\n+      aa(2) = 4\n+    !$omp end task\n+    !$omp task depend(out: aaa(2))\n+      aaa(2) = 4\n+    !$omp end task\n+    !$omp task depend(out: aap(2))\n+      aap(2) = 4\n+    !$omp end task\n+    !$omp task depend(out: daa(2))\n+      daa(2) = 4\n+    !$omp end task\n+    !$omp task depend(out: daaa(2))\n+      daaa(2) = 4\n+    !$omp end task\n+    !$omp task depend(out: daap(2))\n+      daap(2) = 4\n+    !$omp end task\n+    !$omp task depend(out: doaa(2))\n+      doaa(2) = 4\n+    !$omp end task\n+    !$omp task depend(out: doaaa(2))\n+      doaaa(2) = 4\n+    !$omp end task\n+    !$omp task depend(out: doaap(2))\n+      doaap(2) = 4\n+    !$omp end task\n+  !$omp end single\n+  !$omp end parallel\n+end\n+\n+subroutine bar\n+  implicit none (type, external)\n+  integer :: depvar, x\n+\n+  x = 7\n+  !$omp parallel\n+  !$omp single\n+    !$omp task depend(out: depvar)\n+      x =5\n+    !$omp end task\n+    !$omp task depend(in: depvar)\n+      if (x /= 5) stop\n+    !$omp end task\n+  !$omp end single\n+  !$omp end parallel\n+end\n+\n+! depvar - only used for dependency, but should still be used in depend:\n+\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:depvar\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(in:depvar\\\\)\" 1 \"original\" } }\n+\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[0\\\\\\] = &ss;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[1\\\\\\] = sp;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[2\\\\\\] = sa;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[3\\\\\\] = &aa;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[4\\\\\\] = .integer.kind=4.\\\\\\[0:\\\\\\] \\\\* restrict\\\\) aaa.data;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[5\\\\\\] = .integer.kind=4.\\\\\\[0:\\\\\\] \\\\*\\\\) aap.data;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[6\\\\\\] = dss;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[7\\\\\\] = dsp;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[8\\\\\\] = dsa;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[9\\\\\\] = daa;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[10\\\\\\] = .integer.kind=4.\\\\\\[0:\\\\\\] \\\\* restrict\\\\) daaa->data;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[11\\\\\\] = .integer.kind=4.\\\\\\[0:\\\\\\] \\\\*\\\\) daap->data;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[12\\\\\\] = doss;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[13\\\\\\] = \\\\*dosp;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[14\\\\\\] = \\\\*dosa;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[15\\\\\\] = doaa;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[16\\\\\\] = .integer.kind=4.\\\\\\[0:\\\\\\] \\\\* restrict\\\\) doaaa->data;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&object\\\\\\[17\\\\\\] = .integer.kind=4.\\\\\\[0:\\\\\\] \\\\*\\\\) doaap->data;\" 1 \"original\" } }\n+\n+! { dg-final { scan-tree-dump-times \"&elem\\\\\\[0\\\\\\] = &aa\\\\\\[1\\\\\\];\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&elem\\\\\\[1\\\\\\] = &\\\\(\\\\*\\\\(integer.kind=4.\\\\\\[0:\\\\\\] \\\\* restrict\\\\) aaa.data\\\\)\\\\\\[aaa.offset \\\\+ 2\\\\\\];\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&elem\\\\\\[2\\\\\\] = \\\\(integer.kind=4. \\\\*\\\\) \\\\(aap.data \\\\+ .sizetype. \\\\(\\\\(aap.offset \\\\+ aap.dim\\\\\\[0\\\\\\].stride \\\\* 2\\\\) \\\\* aap.span\\\\)\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&elem\\\\\\[3\\\\\\] = &\\\\(\\\\*daa\\\\)\\\\\\[1\\\\\\];\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&elem\\\\\\[4\\\\\\] = &\\\\(\\\\*\\\\(integer.kind=4.\\\\\\[0:\\\\\\] \\\\* restrict\\\\) daaa->data\\\\)\\\\\\[daaa->offset \\\\+ 2\\\\\\];\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&elem\\\\\\[5\\\\\\] = \\\\(integer.kind=4. \\\\*\\\\) \\\\(daap->data \\\\+ .sizetype. \\\\(\\\\(daap->offset \\\\+ daap->dim\\\\\\[0\\\\\\].stride \\\\* 2\\\\) \\\\* daap->span\\\\)\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&elem\\\\\\[5\\\\\\] = &\\\\(\\\\*doaa\\\\)\\\\\\[1\\\\\\];\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&elem\\\\\\[7\\\\\\] = &\\\\(\\\\*\\\\(integer.kind=4.\\\\\\[0:\\\\\\] \\\\* restrict\\\\) doaaa->data\\\\)\\\\\\[doaaa->offset \\\\+ 2\\\\\\];\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"&elem\\\\\\[8\\\\\\] = \\\\(integer.kind=4. \\\\*\\\\) \\\\(doaap->data \\\\+ .sizetype. \\\\(\\\\(doaap->offset \\\\+ doaap->dim\\\\\\[0\\\\\\].stride \\\\* 2\\\\) \\\\* doaap->span\\\\)\\\\);\" 1 \"original\" } }\n+\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:ss\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*sp\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*sa\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:aa\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) aaa.data\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\*\\\\) aap.data\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*dss\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*\\\\*dsp\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*\\\\*dsa\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*daa\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) daaa->data\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\*\\\\) daap->data\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*doss\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*\\\\*dosp\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*\\\\*dosa\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*doaa\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) doaaa->data\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\*\\\\) doaap->data\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:aa\\\\\\[1\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\(\\\\*\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) aaa.data\\\\)\\\\\\[aaa.offset \\\\+ 2\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*\\\\(integer\\\\(kind=4\\\\) \\\\*\\\\) \\\\(aap.data \\\\+ \\\\(sizetype\\\\) \\\\(\\\\(aap.offset \\\\+ aap.dim\\\\\\[0\\\\\\].stride \\\\* 2\\\\) \\\\* aap.span\\\\)\\\\)\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\(\\\\*daa\\\\)\\\\\\[1\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\(\\\\*\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) daaa->data\\\\)\\\\\\[daaa->offset \\\\+ 2\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*\\\\(integer\\\\(kind=4\\\\) \\\\*\\\\) \\\\(daap->data \\\\+ \\\\(sizetype\\\\) \\\\(\\\\(daap->offset \\\\+ daap->dim\\\\\\[0\\\\\\].stride \\\\* 2\\\\) \\\\* daap->span\\\\)\\\\)\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\(\\\\*doaa\\\\)\\\\\\[1\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\(\\\\*\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) doaaa->data\\\\)\\\\\\[doaaa->offset \\\\+ 2\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:\\\\*\\\\(integer\\\\(kind=4\\\\) \\\\*\\\\) \\\\(doaap->data \\\\+ \\\\(sizetype\\\\) \\\\(\\\\(doaap->offset \\\\+ doaap->dim\\\\\\[0\\\\\\].stride \\\\* 2\\\\) \\\\* doaap->span\\\\)\\\\)\\\\)\" 1 \"original\" } }\n+\n+\n+! gimple dump - check only those which are simple one-line checkable:\n+\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:&ss\\\\) shared\\\\(ss\\\\)\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:sp\\\\) shared\\\\(sp\\\\)\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:sa\\\\) shared\\\\(sa\\\\)\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:&aa\\\\) shared\\\\(aa\\\\)\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:dss\\\\) shared\\\\(dss\\\\)\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:daa\\\\) shared\\\\(daa\\\\)\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:doss\\\\) shared\\\\(doss\\\\)\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:doaa\\\\) shared\\\\(doaa\\\\)\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:&aa\\\\\\[1\\\\\\]\\\\) shared\\\\(aa\\\\)\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"D.\\[0-9\\]+ = \\\\*dsp;\" 2 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"D.\\[0-9\\]+ = \\\\*dsa;\" 3 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"D.\\[0-9\\]+ = \\\\*dosp;\" 2 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"D.\\[0-9\\]+ = \\\\*dosa;\" 3 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"D.\\[0-9\\]+ = doaaa->data;\" 4 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"D.\\[0-9\\]+ = doaap->data;\" 4 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"D.\\[0-9\\]+ = &\\\\(\\\\*daa\\\\)\\\\\\[1\\\\\\];\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"D.\\[0-9\\]+ = &\\\\(\\\\*doaa\\\\)\\\\\\[1\\\\\\];\" 1 \"gimple\" } }"}, {"sha": "6a32b6b5cf9bd04db0a81796786b04b57b4a297e", "filename": "gcc/testsuite/gfortran.dg/gomp/depend-5.f90", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3939c1b11279dc950d2f160eb940dd791f7b40f1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdepend-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3939c1b11279dc950d2f160eb940dd791f7b40f1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdepend-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdepend-5.f90?ref=3939c1b11279dc950d2f160eb940dd791f7b40f1", "patch": "@@ -0,0 +1,82 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-fdump-tree-original\" }\n+\n+! Check that depobj is correctly dereferenced in the depend clause.\n+\n+subroutine foo(dss, dsp, dsa, daa, daaa, daap, doss, dosp, dosa, doaa, doaaa, doaap)\n+  !use omp_lib\n+  use iso_c_binding, only: c_intptr_t\n+  implicit none (type, external)\n+  integer, parameter :: omp_depend_kind = 2*c_intptr_t\n+  integer(omp_depend_kind) :: ss, sp, sa, aa(4), aaa(:), aap(:)\n+  integer(omp_depend_kind) :: dss, dsp, dsa, daa(4), daaa(:), daap(:)\n+  integer(omp_depend_kind) :: doss, dosp, dosa, doaa(4), doaaa(:), doaap(:)\n+  optional :: doss, dosp, dosa, doaa, doaaa, doaap\n+  allocatable :: sa, aaa, dsa, daaa, dosa, doaaa\n+  pointer :: sp, aap, dsp, daap, dosp, doaap\n+\n+  ! Assume the depend types are initialized ...\n+\n+  !$omp parallel\n+  !$omp single\n+    !$omp task depend(depobj: ss)\n+    !$omp end task\n+    !$omp task depend(depobj: sp)\n+    !$omp end task\n+    !$omp task depend(depobj: sa)\n+    !$omp end task\n+    !$omp task depend(depobj: dss)\n+    !$omp end task\n+    !$omp task depend(depobj: dsp)\n+    !$omp end task\n+    !$omp task depend(depobj: dsa)\n+    !$omp end task\n+    !$omp task depend(depobj: doss)\n+    !$omp end task\n+    !$omp task depend(depobj: dosp)\n+    !$omp end task\n+    !$omp task depend(depobj: dosa)\n+    !$omp end task\n+\n+    !$omp task depend(depobj: aa(2))\n+    !$omp end task\n+    !$omp task depend(depobj: aaa(2))\n+    !$omp end task\n+    !$omp task depend(depobj: aap(2))\n+    !$omp end task\n+    !$omp task depend(depobj: daa(2))\n+    !$omp end task\n+    !$omp task depend(depobj: daaa(2))\n+    !$omp end task\n+    !$omp task depend(depobj: daap(2))\n+    !$omp end task\n+    !$omp task depend(depobj: doaa(2))\n+    !$omp end task\n+    !$omp task depend(depobj: doaaa(2))\n+    !$omp end task\n+    !$omp task depend(depobj: doaap(2))\n+    !$omp end task\n+  !$omp end single\n+  !$omp end parallel\n+end\n+\n+\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:ss\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\*sp\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\*sa\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\*dss\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\*\\\\*dsp\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\*\\\\*dsa\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\*doss\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\*\\\\*dosp\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\*\\\\*dosa\\\\)\" 1 \"original\" } }\n+\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:aa\\\\\\[1\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\(\\\\*\\\\(integer\\\\(kind=16\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) aaa.data\\\\)\\\\\\[aaa.offset \\\\+ 2\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\*\\\\(integer\\\\(kind=16\\\\) \\\\*\\\\) \\\\(aap.data \\\\+ \\\\(sizetype\\\\) \\\\(\\\\(aap.offset \\\\+ aap.dim\\\\\\[0\\\\\\].stride \\\\* 2\\\\) \\\\* aap.span\\\\)\\\\)\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\(\\\\*daa\\\\)\\\\\\[1\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\(\\\\*\\\\(integer\\\\(kind=16\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) daaa->data\\\\)\\\\\\[daaa->offset \\\\+ 2\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\*\\\\(integer\\\\(kind=16\\\\) \\\\*\\\\) \\\\(daap->data \\\\+ \\\\(sizetype\\\\) \\\\(\\\\(daap->offset \\\\+ daap->dim\\\\\\[0\\\\\\].stride \\\\* 2\\\\) \\\\* daap->span\\\\)\\\\)\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\(\\\\*doaa\\\\)\\\\\\[1\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\(\\\\*\\\\(integer\\\\(kind=16\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) doaaa->data\\\\)\\\\\\[doaaa->offset \\\\+ 2\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:\\\\*\\\\(integer\\\\(kind=16\\\\) \\\\*\\\\) \\\\(doaap->data \\\\+ \\\\(sizetype\\\\) \\\\(\\\\(doaap->offset \\\\+ doaap->dim\\\\\\[0\\\\\\].stride \\\\* 2\\\\) \\\\* doaap->span\\\\)\\\\)\\\\)\" 1 \"original\" } }"}, {"sha": "80d00cae009d6a3659fdb1656949618dba7285f3", "filename": "libgomp/testsuite/libgomp.fortran/depend-4.f90", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3939c1b11279dc950d2f160eb940dd791f7b40f1/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fdepend-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3939c1b11279dc950d2f160eb940dd791f7b40f1/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fdepend-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fdepend-4.f90?ref=3939c1b11279dc950d2f160eb940dd791f7b40f1", "patch": "@@ -0,0 +1,109 @@\n+! { dg-additional-options \"-fdump-tree-gimple\" }\n+!\n+! { dg-additional-sources my-usleep.c }\n+! { dg-prune-output \"command-line option '-fintrinsic-modules-path=.*' is valid for Fortran but not for C\" }\n+!\n+! Ensure that 'depend(...: var)' and 'depobj(...) depend(...: var)'\n+! depend on the same variable when 'var' is a pointer\n+!\n+program main\n+  use omp_lib\n+  use iso_c_binding\n+  implicit none (external, type)\n+\n+  interface\n+    subroutine usleep(t) bind(C, name=\"my_usleep\")\n+      use iso_c_binding\n+      integer(c_int), value :: t\n+    end subroutine\n+  end interface\n+\n+  integer :: bbb\n+  integer, target :: c\n+  integer(omp_depend_kind) :: obj(2)\n+  integer, pointer :: ppp\n+\n+  integer :: x1, x2, x3 \n+\n+  c = 42\n+  ppp => c\n+ \n+  if (.not. associated (ppp)) &\n+    stop 0;\n+ \n+  x1 = 43\n+  x2 = 44\n+  x3 = 45\n+  !$omp depobj(obj(1)) depend(inout: ppp)\n+  !$omp depobj(obj(2)) depend(in: bbb)\n+ \n+  !$omp parallel num_threads(5)\n+  !$omp single\n+ \n+    !$omp task depend (out: ppp)\n+    write (*,*) \"task 1 (start)\"\n+    call usleep(40)\n+    if (x1 /= 43) stop 11\n+    if (x2 /= 44) stop 12\n+    x1 = 11\n+    write (*,*) \"task 1 (end)\"\n+    !$omp end task\n+ \n+    !$omp task depend(inout: ppp)\n+    write (*,*) \"task 2 (start)\"\n+    call usleep(30)\n+    if (x1 /= 11) stop 21\n+    if (x2 /= 44) stop 22\n+    x1 = 111\n+    x2 = 222\n+    write (*,*) \"task 2 (end)\"\n+    !$omp end task\n+ \n+    !$omp task depend(out: bbb)\n+    write (*,*) \"task 3 (start)\"\n+    call usleep(40)\n+    if (x3 /= 45) stop 3\n+    x3 = 33\n+    write (*,*) \"task 3 (end)\"\n+    !$omp end task\n+ \n+   !$omp task depend(depobj: obj(1), obj(2))\n+    write (*,*) \"task 4 (start)\"\n+    if (x1 /= 111) stop 41\n+    if (x2 /= 222) stop 42\n+    if (x3 /= 33) stop 43\n+    call usleep(10)\n+    x1 = 411\n+    x2 = 422\n+    x3 = 433\n+    write (*,*) \"task 4 (end)\"\n+    !$omp end task\n+ \n+    !$omp task depend(in: ppp)\n+    if (x1 /= 411) stop 51\n+    if (x2 /= 422) stop 52\n+    if (x3 /= 433) stop 53\n+    write (*,*) \"task 5\"\n+    !$omp end task\n+ \n+  !$omp end single\n+  !$omp end parallel\n+ \n+  ! expectation (task dependencies):\n+  ! 1 - 2 \\\n+  !        4 - 5\n+  ! 3 ----/\n+ \n+end program main\n+\n+! Ensure that the pointer target address for ppp is taken\n+! but the address of bbb itself:\n+\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:ppp\\\\)\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(inout:ppp\\\\)\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(out:&bbb\\\\)\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(depobj:&obj\\\\\\[0\\\\\\]\\\\) depend\\\\(depobj:&obj\\\\\\[1\\\\\\]\\\\)\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(in:ppp\\\\)\" 1 \"gimple\" } }\n+\n+! { dg-final { scan-tree-dump-times \"MEM\\\\\\[\\[^\\r\\n]+\\\\\\] = ppp;\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"MEM\\\\\\[\\[^\\r\\n]+\\\\\\] = &bbb;\" 1 \"gimple\" } }"}]}