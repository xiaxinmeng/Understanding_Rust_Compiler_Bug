{"sha": "d80e9fd70ca8fb31e4138b7bd433ab38fcdb0b1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgwZTlmZDcwY2E4ZmIzMWU0MTM4YjdiZDQzM2FiMzhmY2RiMGIxZA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-04T19:02:06Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-04T19:02:06Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1432", "tree": {"sha": "3d82c6e1f7a28f250f613143b57563db67d2d6a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d82c6e1f7a28f250f613143b57563db67d2d6a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d80e9fd70ca8fb31e4138b7bd433ab38fcdb0b1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d80e9fd70ca8fb31e4138b7bd433ab38fcdb0b1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d80e9fd70ca8fb31e4138b7bd433ab38fcdb0b1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d80e9fd70ca8fb31e4138b7bd433ab38fcdb0b1d/comments", "author": null, "committer": null, "parents": [{"sha": "6aeff4656b006b41fefc77bd7a8cffb8e7195a71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aeff4656b006b41fefc77bd7a8cffb8e7195a71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aeff4656b006b41fefc77bd7a8cffb8e7195a71"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "e4ed58ccdcdd9a766867bcd54e1589365b0bce46", "filename": "gcc/cse.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80e9fd70ca8fb31e4138b7bd433ab38fcdb0b1d/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80e9fd70ca8fb31e4138b7bd433ab38fcdb0b1d/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=d80e9fd70ca8fb31e4138b7bd433ab38fcdb0b1d", "patch": "@@ -2879,7 +2879,14 @@ simplify_unary_operation (code, mode, op, op_mode)\n \t  if (op_mode == VOIDmode)\n \t    op_mode = mode;\n \t  if (GET_MODE_BITSIZE (op_mode) == HOST_BITS_PER_INT)\n-\t    val = arg0;\n+\t    {\n+\t      /* If we were really extending the mode,\n+\t\t we would have to distinguish between zero-extension\n+\t\t and sign-extension.  */\n+\t      if (width != GET_MODE_BITSIZE (op_mode))\n+\t\tabort ();\n+\t      val = arg0;\n+\t    }\n \t  else if (GET_MODE_BITSIZE (op_mode) < HOST_BITS_PER_INT)\n \t    val = arg0 & ~((-1) << GET_MODE_BITSIZE (op_mode));\n \t  else\n@@ -2890,7 +2897,14 @@ simplify_unary_operation (code, mode, op, op_mode)\n \t  if (op_mode == VOIDmode)\n \t    op_mode = mode;\n \t  if (GET_MODE_BITSIZE (op_mode) == HOST_BITS_PER_INT)\n-\t    val = arg0;\n+\t    {\n+\t      /* If we were really extending the mode,\n+\t\t we would have to distinguish between zero-extension\n+\t\t and sign-extension.  */\n+\t      if (width != GET_MODE_BITSIZE (op_mode))\n+\t\tabort ();\n+\t      val = arg0;\n+\t    }\n \t  else if (GET_MODE_BITSIZE (op_mode) < HOST_BITS_PER_INT)\n \t    {\n \t      val = arg0 & ~((-1) << GET_MODE_BITSIZE (op_mode));"}, {"sha": "dfeab51bd2b94354ff92363922fc71b98abbc45f", "filename": "gcc/reorg.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80e9fd70ca8fb31e4138b7bd433ab38fcdb0b1d/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80e9fd70ca8fb31e4138b7bd433ab38fcdb0b1d/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=d80e9fd70ca8fb31e4138b7bd433ab38fcdb0b1d", "patch": "@@ -19,11 +19,6 @@ You should have received a copy of the GNU General Public License\n along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n-\n-#include \"insn-attr.h\"\n-\n-#ifdef DELAY_SLOTS\n-\n /* Instruction reorganization pass.\n \n    This pass runs after register allocation and final jump\n@@ -125,6 +120,9 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"flags.h\"\n #include \"output.h\"\n #include \"obstack.h\"\n+#include \"insn-attr.h\"\n+\n+#ifdef DELAY_SLOTS\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free"}]}