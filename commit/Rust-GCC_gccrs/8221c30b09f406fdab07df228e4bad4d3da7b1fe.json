{"sha": "8221c30b09f406fdab07df228e4bad4d3da7b1fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIyMWMzMGIwOWY0MDZmZGFiMDdkZjIyOGU0YmFkNGQzZGE3YjFmZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-05-30T21:19:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-05-30T21:19:39Z"}, "message": "gimplify.c (enum gimplify_omp_var_data): Add GOVD_CONDTEMP.\n\n\t* gimplify.c (enum gimplify_omp_var_data): Add GOVD_CONDTEMP.\n\t(gimplify_adjust_omp_clauses_1): Handle GOVD_CONDTEMP.\n\t(gimplify_omp_for): If worksharing loop with lastprivate conditional\n\tis nested inside of parallel region, add _condtemp_ clause to both.\n\t* tree-nested.c (convert_nonlocal_omp_clauses,\n\tconvert_local_omp_clauses): Ignore OMP_CLAUSE__CONDTEMP_ instead of\n\tassertion failure.\n\t* omp-general.h (struct omp_for_data): Add have_pointer_condtemp\n\tmember.\n\t* omp-general.c (omp_extract_for_data): Compute it.\n\t* omp-low.c (scan_sharing_clauses): Handle OMP_CLAUSE__CONDTEMP_.\n\t(lower_rec_input_clauses): Likewise.\n\t(lower_lastprivate_conditional_clauses): If OMP_CLAUSE__CONDTEMP_\n\tclause is already present, just add one further one after it.\n\t(lower_lastprivate_clauses): Handle cond_ptr with array type.\n\t(lower_send_shared_vars): Clear _condtemp_ vars.\n\t(lower_omp_1) <case GIMPLE_ASSIGN>: Handle target data like critical\n\tor section or taskgroup.\n\t* omp-expand.c (determine_parallel_type): Disallow combining only if\n\tfirst OMP_CLAUSE__CONDTEMP_ has pointer type.  Disallow combining\n\tof parallel sections if OMP_CLAUSE__CONDTEMP_ is present.\n\t(expand_omp_for_generic, expand_omp_for_static_nochunk,\n\texpand_omp_for_static_chunk, expand_omp_for): Use\n\tfd->have_pointer_condtemp instead of fd->lastprivate_conditional to\n\tdetermine if a special set of API routines are needed and if condtemp\n\tneeds to be initialized, while always initialize cond_var if\n\tfd->lastprivate_conditional is non-zero.\n\nFrom-SVN: r271791", "tree": {"sha": "74b2d1d914fc19d40c61df14f7444e8e4b9c8550", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74b2d1d914fc19d40c61df14f7444e8e4b9c8550"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8221c30b09f406fdab07df228e4bad4d3da7b1fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8221c30b09f406fdab07df228e4bad4d3da7b1fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8221c30b09f406fdab07df228e4bad4d3da7b1fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8221c30b09f406fdab07df228e4bad4d3da7b1fe/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "00a0e1f5a3bd62519e4742477e11a32c7df2db98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00a0e1f5a3bd62519e4742477e11a32c7df2db98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00a0e1f5a3bd62519e4742477e11a32c7df2db98"}], "stats": {"total": 239, "additions": 190, "deletions": 49}, "files": [{"sha": "269d62b7dd43cb31370f1550149b2a1c5cd71a75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8221c30b09f406fdab07df228e4bad4d3da7b1fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8221c30b09f406fdab07df228e4bad4d3da7b1fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8221c30b09f406fdab07df228e4bad4d3da7b1fe", "patch": "@@ -1,3 +1,33 @@\n+2019-05-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gimplify.c (enum gimplify_omp_var_data): Add GOVD_CONDTEMP.\n+\t(gimplify_adjust_omp_clauses_1): Handle GOVD_CONDTEMP.\n+\t(gimplify_omp_for): If worksharing loop with lastprivate conditional\n+\tis nested inside of parallel region, add _condtemp_ clause to both.\n+\t* tree-nested.c (convert_nonlocal_omp_clauses,\n+\tconvert_local_omp_clauses): Ignore OMP_CLAUSE__CONDTEMP_ instead of\n+\tassertion failure.\n+\t* omp-general.h (struct omp_for_data): Add have_pointer_condtemp\n+\tmember.\n+\t* omp-general.c (omp_extract_for_data): Compute it.\n+\t* omp-low.c (scan_sharing_clauses): Handle OMP_CLAUSE__CONDTEMP_.\n+\t(lower_rec_input_clauses): Likewise.\n+\t(lower_lastprivate_conditional_clauses): If OMP_CLAUSE__CONDTEMP_\n+\tclause is already present, just add one further one after it.\n+\t(lower_lastprivate_clauses): Handle cond_ptr with array type.\n+\t(lower_send_shared_vars): Clear _condtemp_ vars.\n+\t(lower_omp_1) <case GIMPLE_ASSIGN>: Handle target data like critical\n+\tor section or taskgroup.\n+\t* omp-expand.c (determine_parallel_type): Disallow combining only if\n+\tfirst OMP_CLAUSE__CONDTEMP_ has pointer type.  Disallow combining\n+\tof parallel sections if OMP_CLAUSE__CONDTEMP_ is present.\n+\t(expand_omp_for_generic, expand_omp_for_static_nochunk,\n+\texpand_omp_for_static_chunk, expand_omp_for): Use\n+\tfd->have_pointer_condtemp instead of fd->lastprivate_conditional to\n+\tdetermine if a special set of API routines are needed and if condtemp\n+\tneeds to be initialized, while always initialize cond_var if\n+\tfd->lastprivate_conditional is non-zero.\n+\n 2019-05-30  Bill Schmidt  <wschmidt@linux.ibm.com>\n \t    Michael Meissner  <meissner@linux.ibm.com>\n "}, {"sha": "12b1eff2fa06ef79a3c139ff72cc966986fca3ea", "filename": "gcc/gimplify.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8221c30b09f406fdab07df228e4bad4d3da7b1fe/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8221c30b09f406fdab07df228e4bad4d3da7b1fe/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=8221c30b09f406fdab07df228e4bad4d3da7b1fe", "patch": "@@ -116,6 +116,8 @@ enum gimplify_omp_var_data\n   /* Flag for GOVD_LASTPRIVATE: conditional modifier.  */\n   GOVD_LASTPRIVATE_CONDITIONAL = 0x800000,\n \n+  GOVD_CONDTEMP = 0x1000000,\n+\n   GOVD_DATA_SHARE_CLASS = (GOVD_SHARED | GOVD_PRIVATE | GOVD_FIRSTPRIVATE\n \t\t\t   | GOVD_LASTPRIVATE | GOVD_REDUCTION | GOVD_LINEAR\n \t\t\t   | GOVD_LOCAL)\n@@ -9527,6 +9529,11 @@ gimplify_adjust_omp_clauses_1 (splay_tree_node n, void *data)\n     code = OMP_CLAUSE_LASTPRIVATE;\n   else if (flags & (GOVD_ALIGNED | GOVD_NONTEMPORAL))\n     return 0;\n+  else if (flags & GOVD_CONDTEMP)\n+    {\n+      code = OMP_CLAUSE__CONDTEMP_;\n+      gimple_add_tmp_var (decl);\n+    }\n   else\n     gcc_unreachable ();\n \n@@ -11523,6 +11530,36 @@ gimplify_omp_for (tree *expr_p, gimple_seq *pre_p)\n     }\n   else\n     gimplify_seq_add_stmt (pre_p, gfor);\n+\n+  if (TREE_CODE (orig_for_stmt) == OMP_FOR)\n+    {\n+      struct gimplify_omp_ctx *ctx = gimplify_omp_ctxp;\n+      unsigned lastprivate_conditional = 0;\n+      while (ctx\n+\t     && (ctx->region_type == ORT_TARGET_DATA\n+\t\t || ctx->region_type == ORT_TASKGROUP))\n+\tctx = ctx->outer_context;\n+      if (ctx && (ctx->region_type & ORT_PARALLEL) != 0)\n+\tfor (tree c = gimple_omp_for_clauses (gfor);\n+\t     c; c = OMP_CLAUSE_CHAIN (c))\n+\t  if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_LASTPRIVATE\n+\t      && OMP_CLAUSE_LASTPRIVATE_CONDITIONAL (c))\n+\t    ++lastprivate_conditional;\n+      if (lastprivate_conditional)\n+\t{\n+\t  struct omp_for_data fd;\n+\t  omp_extract_for_data (gfor, &fd, NULL);\n+\t  tree type = build_array_type_nelts (unsigned_type_for (fd.iter_type),\n+\t\t\t\t\t      lastprivate_conditional);\n+\t  tree var = create_tmp_var_raw (type);\n+\t  tree c = build_omp_clause (UNKNOWN_LOCATION, OMP_CLAUSE__CONDTEMP_);\n+\t  OMP_CLAUSE_DECL (c) = var;\n+\t  OMP_CLAUSE_CHAIN (c) = gimple_omp_for_clauses (gfor);\n+\t  gimple_omp_for_set_clauses (gfor, c);\n+\t  omp_add_variable (ctx, var, GOVD_CONDTEMP | GOVD_SEEN);\n+\t}\n+    }\n+\n   if (ret != GS_ALL_DONE)\n     return GS_ERROR;\n   *expr_p = NULL_TREE;"}, {"sha": "832892794cb7924695b9e1d563b8fe7469770e74", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 46, "deletions": 31, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8221c30b09f406fdab07df228e4bad4d3da7b1fe/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8221c30b09f406fdab07df228e4bad4d3da7b1fe/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=8221c30b09f406fdab07df228e4bad4d3da7b1fe", "patch": "@@ -346,12 +346,15 @@ determine_parallel_type (struct omp_region *region)\n \t\t  == OMP_CLAUSE_SCHEDULE_STATIC)\n \t      || omp_find_clause (clauses, OMP_CLAUSE_ORDERED)\n \t      || omp_find_clause (clauses, OMP_CLAUSE__REDUCTEMP_)\n-\t      || omp_find_clause (clauses, OMP_CLAUSE__CONDTEMP_))\n+\t      || ((c = omp_find_clause (clauses, OMP_CLAUSE__CONDTEMP_))\n+\t\t  && POINTER_TYPE_P (TREE_TYPE (OMP_CLAUSE_DECL (c)))))\n \t    return;\n \t}\n       else if (region->inner->type == GIMPLE_OMP_SECTIONS\n-\t       && omp_find_clause (gimple_omp_sections_clauses (ws_stmt),\n-\t\t\t\t   OMP_CLAUSE__REDUCTEMP_))\n+\t       && (omp_find_clause (gimple_omp_sections_clauses (ws_stmt),\n+\t\t\t\t    OMP_CLAUSE__REDUCTEMP_)\n+\t\t   || omp_find_clause (gimple_omp_sections_clauses (ws_stmt),\n+\t\t\t\t       OMP_CLAUSE__CONDTEMP_)))\n \treturn;\n \n       region->is_combined_parallel = true;\n@@ -2686,6 +2689,15 @@ expand_omp_for_generic (struct omp_region *region,\n   tree reductions = NULL_TREE;\n   tree mem = NULL_TREE, cond_var = NULL_TREE, condtemp = NULL_TREE;\n   tree memv = NULL_TREE;\n+  if (fd->lastprivate_conditional)\n+    {\n+      tree c = omp_find_clause (gimple_omp_for_clauses (fd->for_stmt),\n+\t\t\t\tOMP_CLAUSE__CONDTEMP_);\n+      if (fd->have_pointer_condtemp)\n+\tcondtemp = OMP_CLAUSE_DECL (c);\n+      c = omp_find_clause (OMP_CLAUSE_CHAIN (c), OMP_CLAUSE__CONDTEMP_);\n+      cond_var = OMP_CLAUSE_DECL (c);\n+    }\n   if (sched_arg)\n     {\n       if (fd->have_reductemp)\n@@ -2705,13 +2717,8 @@ expand_omp_for_generic (struct omp_region *region,\n \t}\n       else\n \treductions = null_pointer_node;\n-      if (fd->lastprivate_conditional)\n+      if (fd->have_pointer_condtemp)\n \t{\n-\t  tree c = omp_find_clause (gimple_omp_for_clauses (fd->for_stmt),\n-\t\t\t\t    OMP_CLAUSE__CONDTEMP_);\n-\t  condtemp = OMP_CLAUSE_DECL (c);\n-\t  c = omp_find_clause (OMP_CLAUSE_CHAIN (c), OMP_CLAUSE__CONDTEMP_);\n-\t  cond_var = OMP_CLAUSE_DECL (c);\n \t  tree type = TREE_TYPE (condtemp);\n \t  memv = create_tmp_var (type);\n \t  TREE_ADDRESSABLE (memv) = 1;\n@@ -2978,7 +2985,7 @@ expand_omp_for_generic (struct omp_region *region,\n       gsi_insert_before (&gsi, gimple_build_assign (arr, clobber),\n \t\t\t GSI_SAME_STMT);\n     }\n-  if (fd->lastprivate_conditional)\n+  if (fd->have_pointer_condtemp)\n     expand_omp_build_assign (&gsi, condtemp, memv, false);\n   if (fd->have_reductemp)\n     {\n@@ -3540,7 +3547,7 @@ expand_omp_for_static_nochunk (struct omp_region *region,\n   tree *counts = NULL;\n   tree n1, n2, step;\n   tree reductions = NULL_TREE;\n-  tree cond_var = NULL_TREE;\n+  tree cond_var = NULL_TREE, condtemp = NULL_TREE;\n \n   itype = type = TREE_TYPE (fd->loop.v);\n   if (POINTER_TYPE_P (type))\n@@ -3626,7 +3633,16 @@ expand_omp_for_static_nochunk (struct omp_region *region,\n       gsi = gsi_last_bb (entry_bb);\n     }\n \n-  if (fd->have_reductemp || fd->lastprivate_conditional)\n+  if (fd->lastprivate_conditional)\n+    {\n+      tree clauses = gimple_omp_for_clauses (fd->for_stmt);\n+      tree c = omp_find_clause (clauses, OMP_CLAUSE__CONDTEMP_);\n+      if (fd->have_pointer_condtemp)\n+\tcondtemp = OMP_CLAUSE_DECL (c);\n+      c = omp_find_clause (OMP_CLAUSE_CHAIN (c), OMP_CLAUSE__CONDTEMP_);\n+      cond_var = OMP_CLAUSE_DECL (c);\n+    }\n+  if (fd->have_reductemp || fd->have_pointer_condtemp)\n     {\n       tree t1 = build_int_cst (long_integer_type_node, 0);\n       tree t2 = build_int_cst (long_integer_type_node, 1);\n@@ -3636,7 +3652,6 @@ expand_omp_for_static_nochunk (struct omp_region *region,\n       gimple_stmt_iterator gsi2 = gsi_none ();\n       gimple *g = NULL;\n       tree mem = null_pointer_node, memv = NULL_TREE;\n-      tree condtemp = NULL_TREE;\n       if (fd->have_reductemp)\n \t{\n \t  tree c = omp_find_clause (clauses, OMP_CLAUSE__REDUCTEMP_);\n@@ -3655,12 +3670,8 @@ expand_omp_for_static_nochunk (struct omp_region *region,\n \t    gsi2 = gsip;\n \t  reductions = null_pointer_node;\n \t}\n-      if (fd->lastprivate_conditional)\n+      if (fd->have_pointer_condtemp)\n \t{\n-\t  tree c = omp_find_clause (clauses, OMP_CLAUSE__CONDTEMP_);\n-\t  condtemp = OMP_CLAUSE_DECL (c);\n-\t  c = omp_find_clause (OMP_CLAUSE_CHAIN (c), OMP_CLAUSE__CONDTEMP_);\n-\t  cond_var = OMP_CLAUSE_DECL (c);\n \t  tree type = TREE_TYPE (condtemp);\n \t  memv = create_tmp_var (type);\n \t  TREE_ADDRESSABLE (memv) = 1;\n@@ -3677,7 +3688,7 @@ expand_omp_for_static_nochunk (struct omp_region *region,\n \t\t\t   null_pointer_node, reductions, mem);\n       force_gimple_operand_gsi (&gsi2, t, true, NULL_TREE,\n \t\t\t\ttrue, GSI_SAME_STMT);\n-      if (fd->lastprivate_conditional)\n+      if (fd->have_pointer_condtemp)\n \texpand_omp_build_assign (&gsi2, condtemp, memv, false);\n       if (fd->have_reductemp)\n \t{\n@@ -3999,7 +4010,7 @@ expand_omp_for_static_nochunk (struct omp_region *region,\n   if (!gimple_omp_return_nowait_p (gsi_stmt (gsi)))\n     {\n       t = gimple_omp_return_lhs (gsi_stmt (gsi));\n-      if (fd->have_reductemp || fd->lastprivate_conditional)\n+      if (fd->have_reductemp || fd->have_pointer_condtemp)\n \t{\n \t  tree fn;\n \t  if (t)\n@@ -4156,7 +4167,7 @@ expand_omp_for_static_chunk (struct omp_region *region,\n   tree *counts = NULL;\n   tree n1, n2, step;\n   tree reductions = NULL_TREE;\n-  tree cond_var = NULL_TREE;\n+  tree cond_var = NULL_TREE, condtemp = NULL_TREE;\n \n   itype = type = TREE_TYPE (fd->loop.v);\n   if (POINTER_TYPE_P (type))\n@@ -4246,7 +4257,16 @@ expand_omp_for_static_chunk (struct omp_region *region,\n       gsi = gsi_last_bb (entry_bb);\n     }\n \n-  if (fd->have_reductemp || fd->lastprivate_conditional)\n+  if (fd->lastprivate_conditional)\n+    {\n+      tree clauses = gimple_omp_for_clauses (fd->for_stmt);\n+      tree c = omp_find_clause (clauses, OMP_CLAUSE__CONDTEMP_);\n+      if (fd->have_pointer_condtemp)\n+\tcondtemp = OMP_CLAUSE_DECL (c);\n+      c = omp_find_clause (OMP_CLAUSE_CHAIN (c), OMP_CLAUSE__CONDTEMP_);\n+      cond_var = OMP_CLAUSE_DECL (c);\n+    }\n+  if (fd->have_reductemp || fd->have_pointer_condtemp)\n     {\n       tree t1 = build_int_cst (long_integer_type_node, 0);\n       tree t2 = build_int_cst (long_integer_type_node, 1);\n@@ -4256,7 +4276,6 @@ expand_omp_for_static_chunk (struct omp_region *region,\n       gimple_stmt_iterator gsi2 = gsi_none ();\n       gimple *g = NULL;\n       tree mem = null_pointer_node, memv = NULL_TREE;\n-      tree condtemp = NULL_TREE;\n       if (fd->have_reductemp)\n \t{\n \t  tree c = omp_find_clause (clauses, OMP_CLAUSE__REDUCTEMP_);\n@@ -4275,12 +4294,8 @@ expand_omp_for_static_chunk (struct omp_region *region,\n \t    gsi2 = gsip;\n \t  reductions = null_pointer_node;\n \t}\n-      if (fd->lastprivate_conditional)\n+      if (fd->have_pointer_condtemp)\n \t{\n-\t  tree c = omp_find_clause (clauses, OMP_CLAUSE__CONDTEMP_);\n-\t  condtemp = OMP_CLAUSE_DECL (c);\n-\t  c = omp_find_clause (OMP_CLAUSE_CHAIN (c), OMP_CLAUSE__CONDTEMP_);\n-\t  cond_var = OMP_CLAUSE_DECL (c);\n \t  tree type = TREE_TYPE (condtemp);\n \t  memv = create_tmp_var (type);\n \t  TREE_ADDRESSABLE (memv) = 1;\n@@ -4297,7 +4312,7 @@ expand_omp_for_static_chunk (struct omp_region *region,\n \t\t\t   null_pointer_node, reductions, mem);\n       force_gimple_operand_gsi (&gsi2, t, true, NULL_TREE,\n \t\t\t\ttrue, GSI_SAME_STMT);\n-      if (fd->lastprivate_conditional)\n+      if (fd->have_pointer_condtemp)\n \texpand_omp_build_assign (&gsi2, condtemp, memv, false);\n       if (fd->have_reductemp)\n \t{\n@@ -4635,7 +4650,7 @@ expand_omp_for_static_chunk (struct omp_region *region,\n   if (!gimple_omp_return_nowait_p (gsi_stmt (gsi)))\n     {\n       t = gimple_omp_return_lhs (gsi_stmt (gsi));\n-      if (fd->have_reductemp || fd->lastprivate_conditional)\n+      if (fd->have_reductemp || fd->have_pointer_condtemp)\n \t{\n \t  tree fn;\n \t  if (t)\n@@ -6263,7 +6278,7 @@ expand_omp_for (struct omp_region *region, gimple *inner_stmt)\n       else\n \tstart_ix = ((int)BUILT_IN_GOMP_LOOP_STATIC_START) + fn_index;\n       next_ix = ((int)BUILT_IN_GOMP_LOOP_STATIC_NEXT) + fn_index;\n-      if (fd.have_reductemp || fd.lastprivate_conditional)\n+      if (fd.have_reductemp || fd.have_pointer_condtemp)\n \t{\n \t  if (fd.ordered)\n \t    start_ix = (int)BUILT_IN_GOMP_LOOP_DOACROSS_START;"}, {"sha": "c7376666ca66fc494b5887593c3ca7c32f87e5fc", "filename": "gcc/omp-general.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8221c30b09f406fdab07df228e4bad4d3da7b1fe/gcc%2Fomp-general.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8221c30b09f406fdab07df228e4bad4d3da7b1fe/gcc%2Fomp-general.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.c?ref=8221c30b09f406fdab07df228e4bad4d3da7b1fe", "patch": "@@ -168,6 +168,7 @@ omp_extract_for_data (gomp_for *for_stmt, struct omp_for_data *fd,\n   fd->have_nowait = distribute || simd;\n   fd->have_ordered = false;\n   fd->have_reductemp = false;\n+  fd->have_pointer_condtemp = false;\n   fd->lastprivate_conditional = 0;\n   fd->tiling = NULL_TREE;\n   fd->collapse = 1;\n@@ -226,6 +227,10 @@ omp_extract_for_data (gomp_for *for_stmt, struct omp_for_data *fd,\n \tif (OMP_CLAUSE_LASTPRIVATE_CONDITIONAL (t))\n \t  fd->lastprivate_conditional++;\n \tbreak;\n+      case OMP_CLAUSE__CONDTEMP_:\n+\tif (POINTER_TYPE_P (TREE_TYPE (OMP_CLAUSE_DECL (t))))\n+\t  fd->have_pointer_condtemp = true;\n+\tbreak;\n       default:\n \tbreak;\n       }"}, {"sha": "6ce891f2e946f3c932d3334d82ff7338a0733393", "filename": "gcc/omp-general.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8221c30b09f406fdab07df228e4bad4d3da7b1fe/gcc%2Fomp-general.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8221c30b09f406fdab07df228e4bad4d3da7b1fe/gcc%2Fomp-general.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.h?ref=8221c30b09f406fdab07df228e4bad4d3da7b1fe", "patch": "@@ -63,6 +63,7 @@ struct omp_for_data\n   int collapse;  /* Collapsed loops, 1 for a non-collapsed loop.  */\n   int ordered;\n   bool have_nowait, have_ordered, simd_schedule, have_reductemp;\n+  bool have_pointer_condtemp;\n   int lastprivate_conditional;\n   unsigned char sched_modifiers;\n   enum omp_clause_schedule_kind sched_kind;"}, {"sha": "d200005dc2841242a4224cc10830e9e6b5209102", "filename": "gcc/omp-low.c", "status": "modified", "additions": 69, "deletions": 16, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8221c30b09f406fdab07df228e4bad4d3da7b1fe/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8221c30b09f406fdab07df228e4bad4d3da7b1fe/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=8221c30b09f406fdab07df228e4bad4d3da7b1fe", "patch": "@@ -1413,6 +1413,15 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t    install_var_local (decl, ctx);\n \t  break;\n \n+\tcase OMP_CLAUSE__CONDTEMP_:\n+\t  if (is_parallel_ctx (ctx))\n+\t    {\n+\t      decl = OMP_CLAUSE_DECL (c);\n+\t      install_var_field (decl, false, 3, ctx);\n+\t      install_var_local (decl, ctx);\n+\t    }\n+\t  break;\n+\n \tcase OMP_CLAUSE__CACHE_:\n \tdefault:\n \t  gcc_unreachable ();\n@@ -1587,6 +1596,7 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \tcase OMP_CLAUSE__SIMT_:\n \tcase OMP_CLAUSE_IF_PRESENT:\n \tcase OMP_CLAUSE_FINALIZE:\n+\tcase OMP_CLAUSE__CONDTEMP_:\n \t  break;\n \n \tcase OMP_CLAUSE__CACHE_:\n@@ -4041,6 +4051,10 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t  DECL_HAS_VALUE_EXPR_P (new_var) = 1;\n \t\t}\n \t      continue;\n+\t    case OMP_CLAUSE__CONDTEMP_:\n+\t      if (is_parallel_ctx (ctx))\n+\t\tbreak;\n+\t      continue;\n \t    default:\n \t      continue;\n \t    }\n@@ -4707,6 +4721,15 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\tTREE_NO_WARNING (var) = 1;\n \t      break;\n \n+\t    case OMP_CLAUSE__CONDTEMP_:\n+\t      if (is_parallel_ctx (ctx))\n+\t\t{\n+\t\t  x = build_receiver_ref (var, false, ctx);\n+\t\t  SET_DECL_VALUE_EXPR (new_var, x);\n+\t\t  DECL_HAS_VALUE_EXPR_P (new_var) = 1;\n+\t\t}\n+\t      break;\n+\n \t    case OMP_CLAUSE_LASTPRIVATE:\n \t      if (OMP_CLAUSE_LASTPRIVATE_FIRSTPRIVATE (c))\n \t\tbreak;\n@@ -5388,25 +5411,36 @@ lower_lastprivate_conditional_clauses (tree *clauses, omp_context *ctx)\n \t      }\n \t    else if (gimple_code (ctx->stmt) == GIMPLE_OMP_SECTIONS)\n \t      iter_type = unsigned_type_node;\n-\t    cond_ptr = create_tmp_var_raw (build_pointer_type (iter_type));\n-\t    DECL_CONTEXT (cond_ptr) = current_function_decl;\n-\t    DECL_SEEN_IN_BIND_EXPR_P (cond_ptr) = 1;\n-\t    DECL_CHAIN (cond_ptr) = ctx->block_vars;\n-\t    ctx->block_vars = cond_ptr;\n+\t    tree c2 = omp_find_clause (*clauses, OMP_CLAUSE__CONDTEMP_);\n+\t    if (c2)\n+\t      {\n+\t\tcond_ptr\n+\t\t  = lookup_decl_in_outer_ctx (OMP_CLAUSE_DECL (c2), ctx);\n+\t\tOMP_CLAUSE_DECL (c2) = cond_ptr;\n+\t      }\n+\t    else\n+\t      {\n+\t\tcond_ptr = create_tmp_var_raw (build_pointer_type (iter_type));\n+\t\tDECL_CONTEXT (cond_ptr) = current_function_decl;\n+\t\tDECL_SEEN_IN_BIND_EXPR_P (cond_ptr) = 1;\n+\t\tDECL_CHAIN (cond_ptr) = ctx->block_vars;\n+\t\tctx->block_vars = cond_ptr;\n+\t\tc2 = build_omp_clause (UNKNOWN_LOCATION,\n+\t\t\t\t       OMP_CLAUSE__CONDTEMP_);\n+\t\tOMP_CLAUSE_DECL (c2) = cond_ptr;\n+\t\tOMP_CLAUSE_CHAIN (c2) = *clauses;\n+\t\t*clauses = c2;\n+\t      }\n \t    iter_var = create_tmp_var_raw (iter_type);\n \t    DECL_CONTEXT (iter_var) = current_function_decl;\n \t    DECL_SEEN_IN_BIND_EXPR_P (iter_var) = 1;\n \t    DECL_CHAIN (iter_var) = ctx->block_vars;\n \t    ctx->block_vars = iter_var;\n-\t    tree c2\n-\t      = build_omp_clause (UNKNOWN_LOCATION, OMP_CLAUSE__CONDTEMP_);\n \t    tree c3\n \t      = build_omp_clause (UNKNOWN_LOCATION, OMP_CLAUSE__CONDTEMP_);\n-\t    OMP_CLAUSE_DECL (c2) = cond_ptr;\n \t    OMP_CLAUSE_DECL (c3) = iter_var;\n+\t    OMP_CLAUSE_CHAIN (c3) = OMP_CLAUSE_CHAIN (c2);\n \t    OMP_CLAUSE_CHAIN (c2) = c3;\n-\t    OMP_CLAUSE_CHAIN (c3) = *clauses;\n-\t    *clauses = c2;\n \t    ctx->lastprivate_conditional_map = new hash_map<tree, tree>;\n \t  }\n \ttree v = create_tmp_var_raw (iter_type);\n@@ -5536,11 +5570,18 @@ lower_lastprivate_clauses (tree clauses, tree predicate, gimple_seq *body_p,\n \t  tree v = *ctx->lastprivate_conditional_map->get (o);\n \t  gimplify_assign (v, build_zero_cst (type), body_p);\n \t  this_stmt_list = cstmt_list;\n-\t  tree mem = build2 (MEM_REF, type, cond_ptr,\n-\t\t\t     build_int_cst (TREE_TYPE (cond_ptr),\n-\t\t\t\t\t    conditional_off));\n+\t  tree mem;\n+\t  if (POINTER_TYPE_P (TREE_TYPE (cond_ptr)))\n+\t    {\n+\t      mem = build2 (MEM_REF, type, cond_ptr,\n+\t\t\t    build_int_cst (TREE_TYPE (cond_ptr),\n+\t\t\t\t\t   conditional_off));\n+\t      conditional_off += tree_to_uhwi (TYPE_SIZE_UNIT (type));\n+\t    }\n+\t  else\n+\t    mem = build4 (ARRAY_REF, type, cond_ptr,\n+\t\t\t  size_int (conditional_off++), NULL_TREE, NULL_TREE);\n \t  tree mem2 = copy_node (mem);\n-\t  conditional_off += tree_to_uhwi (TYPE_SIZE_UNIT (type));\n \t  gimple_seq seq = NULL;\n \t  mem = force_gimple_operand (mem, &seq, true, NULL_TREE);\n \t  gimple_seq_add_seq (this_stmt_list, seq);\n@@ -6448,7 +6489,16 @@ lower_send_shared_vars (gimple_seq *ilist, gimple_seq *olist, omp_context *ctx)\n       if (use_pointer_for_field (ovar, ctx))\n \t{\n \t  x = build_sender_ref (ovar, ctx);\n-\t  var = build_fold_addr_expr (var);\n+\t  if (TREE_CODE (TREE_TYPE (f)) == ARRAY_TYPE\n+\t      && TREE_TYPE (f) == TREE_TYPE (ovar))\n+\t    {\n+\t      gcc_assert (is_parallel_ctx (ctx)\n+\t\t\t  && DECL_ARTIFICIAL (ovar));\n+\t      /* _condtemp_ clause.  */\n+\t      var = build_constructor (TREE_TYPE (x), NULL);\n+\t    }\n+\t  else\n+\t    var = build_fold_addr_expr (var);\n \t  gimplify_assign (x, var, ilist);\n \t}\n       else\n@@ -10652,7 +10702,10 @@ lower_omp_1 (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t  if (gimple_code (up->stmt) == GIMPLE_OMP_ORDERED\n \t      || gimple_code (up->stmt) == GIMPLE_OMP_CRITICAL\n \t      || gimple_code (up->stmt) == GIMPLE_OMP_TASKGROUP\n-\t      || gimple_code (up->stmt) == GIMPLE_OMP_SECTION)\n+\t      || gimple_code (up->stmt) == GIMPLE_OMP_SECTION\n+\t      || (gimple_code (up->stmt) == GIMPLE_OMP_TARGET\n+\t\t  && (gimple_omp_target_kind (up->stmt)\n+\t\t      == GF_OMP_TARGET_KIND_DATA)))\n \t    continue;\n \t  else if (!up->lastprivate_conditional_map)\n \t    break;"}, {"sha": "5cf2e3dbdfde8029a90be607a7de5e9683d4b3e8", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8221c30b09f406fdab07df228e4bad4d3da7b1fe/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8221c30b09f406fdab07df228e4bad4d3da7b1fe/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=8221c30b09f406fdab07df228e4bad4d3da7b1fe", "patch": "@@ -1348,6 +1348,7 @@ convert_nonlocal_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \tcase OMP_CLAUSE_AUTO:\n \tcase OMP_CLAUSE_IF_PRESENT:\n \tcase OMP_CLAUSE_FINALIZE:\n+\tcase OMP_CLAUSE__CONDTEMP_:\n \t  break;\n \n \t  /* The following clause belongs to the OpenACC cache directive, which\n@@ -1369,7 +1370,6 @@ convert_nonlocal_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \t     function decomposition happens before that.  */\n \tcase OMP_CLAUSE__LOOPTEMP_:\n \tcase OMP_CLAUSE__REDUCTEMP_:\n-\tcase OMP_CLAUSE__CONDTEMP_:\n \tcase OMP_CLAUSE__SIMDUID_:\n \tcase OMP_CLAUSE__GRIDDIM_:\n \tcase OMP_CLAUSE__SIMT_:\n@@ -2076,6 +2076,7 @@ convert_local_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \tcase OMP_CLAUSE_AUTO:\n \tcase OMP_CLAUSE_IF_PRESENT:\n \tcase OMP_CLAUSE_FINALIZE:\n+\tcase OMP_CLAUSE__CONDTEMP_:\n \t  break;\n \n \t  /* The following clause belongs to the OpenACC cache directive, which\n@@ -2097,7 +2098,6 @@ convert_local_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \t     function decomposition happens before that.  */\n \tcase OMP_CLAUSE__LOOPTEMP_:\n \tcase OMP_CLAUSE__REDUCTEMP_:\n-\tcase OMP_CLAUSE__CONDTEMP_:\n \tcase OMP_CLAUSE__SIMDUID_:\n \tcase OMP_CLAUSE__GRIDDIM_:\n \tcase OMP_CLAUSE__SIMT_:"}]}