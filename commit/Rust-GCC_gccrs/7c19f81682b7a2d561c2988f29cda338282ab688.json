{"sha": "7c19f81682b7a2d561c2988f29cda338282ab688", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MxOWY4MTY4MmI3YTJkNTYxYzI5ODhmMjljZGEzMzgyODJhYjY4OA==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2002-09-03T22:47:41Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2002-09-03T22:47:41Z"}, "message": "Makefile.in (TEXI_GCC_FILES): Add compat.texi.\n\n2002-09-03  Janis Johnson  <janis187@us.ibm.com>\n\n\t* Makefile.in (TEXI_GCC_FILES): Add compat.texi.\n\t* doc/gcc.texi (Top): Add new chapter, Binary Compatibility, and\n\tinclude its file, compat.texi.\n\t* doc/compat.texi: New file with new chapter, Binary Compatibility.\n\nFrom-SVN: r56774", "tree": {"sha": "dfd607f674acf3c1f0c689cc295bf85b8a93a08b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfd607f674acf3c1f0c689cc295bf85b8a93a08b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c19f81682b7a2d561c2988f29cda338282ab688", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c19f81682b7a2d561c2988f29cda338282ab688", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c19f81682b7a2d561c2988f29cda338282ab688", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c19f81682b7a2d561c2988f29cda338282ab688/comments", "author": null, "committer": null, "parents": [{"sha": "79ba5e3b9e7f922a99c698829c88f2b47700fd5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ba5e3b9e7f922a99c698829c88f2b47700fd5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79ba5e3b9e7f922a99c698829c88f2b47700fd5e"}], "stats": {"total": 126, "additions": 125, "deletions": 1}, "files": [{"sha": "4f9ed3c96d41d2ceff9634235aeacd877c5ad63c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c19f81682b7a2d561c2988f29cda338282ab688/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c19f81682b7a2d561c2988f29cda338282ab688/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c19f81682b7a2d561c2988f29cda338282ab688", "patch": "@@ -1,3 +1,10 @@\n+2002-09-03  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* Makefile.in (TEXI_GCC_FILES): Add compat.texi.\n+\t* doc/gcc.texi (Top): Add new chapter, Binary Compatibility, and\n+\tinclude its file, compat.texi.\n+\t* doc/compat.texi: New file with new chapter, Binary Compatibility.\n+\n 2002-09-03  Neil Booth  <neil@daikokuya.co.uk>\n \n \tDebian BTS Bug #157416"}, {"sha": "0aa6abc3b11bc5224c4ea9756b11131013fbd4a1", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c19f81682b7a2d561c2988f29cda338282ab688/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c19f81682b7a2d561c2988f29cda338282ab688/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7c19f81682b7a2d561c2988f29cda338282ab688", "patch": "@@ -2477,7 +2477,7 @@ TEXI_GCC_FILES = $(docdir)/gcc.texi $(docdir)/include/gcc-common.texi \\\n \t $(docdir)/invoke.texi $(docdir)/extend.texi $(docdir)/md.texi \\\n \t $(docdir)/objc.texi $(docdir)/gcov.texi $(docdir)/trouble.texi \\\n \t $(docdir)/bugreport.texi $(docdir)/service.texi \\\n-\t $(docdir)/contribute.texi $(docdir)/vms.texi \\\n+\t $(docdir)/contribute.texi $(docdir)/vms.texi $(docdir)/compat.texi \\\n \t $(docdir)/include/funding.texi $(docdir)/gnu.texi \\\n \t $(docdir)/include/gpl.texi $(docdir)/include/fdl.texi \\\n \t $(docdir)/contrib.texi $(docdir)/cppenv.texi $(docdir)/cppopts.texi"}, {"sha": "3e4ef89d7da8b4973366ce445737699a438e6205", "filename": "gcc/doc/compat.texi", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c19f81682b7a2d561c2988f29cda338282ab688/gcc%2Fdoc%2Fcompat.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c19f81682b7a2d561c2988f29cda338282ab688/gcc%2Fdoc%2Fcompat.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcompat.texi?ref=7c19f81682b7a2d561c2988f29cda338282ab688", "patch": "@@ -0,0 +1,115 @@\n+@c Copyright (C) 2002 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@node Compatibility\n+@chapter Binary Compatibility\n+@cindex binary compatibility\n+@cindex ABI\n+@cindex application binary interface\n+\n+Binary compatibility encompasses several related concepts:\n+\n+@table @dfn\n+@item application binary interface (ABI)\n+The set of runtime conventions followed by all of the tools that deal\n+with binary representations of a program, including compilers, assemblers,\n+linkers, and language runtime support.\n+Some ABIs are formal with a written specification, possibly designed\n+by multiple interested parties.  Others are simply the way things are\n+actually done by a particular set of tools.\n+\n+@item ABI conformance\n+A compiler conforms to an ABI if it generates code that follows all of\n+the specifications enumerated by that ABI@.\n+A library conforms to an ABI if it is implemented according to that ABI@.\n+An application conforms to an ABI if it is built using tools that conform\n+to that ABI and does not contain source code that specifically changes\n+behavior specified by the ABI@.\n+\n+@item calling conventions\n+Calling conventions are a subset of an ABI that specify of how arguments\n+are passed and function results are returned.\n+\n+@item interoperability\n+Different sets of tools are interoperable if they generate files that\n+can be used in the same program.  The set of tools includes compilers,\n+assemblers, linkers, libraries, header files, startup files, and debuggers.\n+Binaries produced by different sets of tools are not interoperable unless\n+they implement the same ABI@.  This applies to different versions of the\n+same tools as well as tools from different vendors.\n+\n+@item intercallability\n+Whether a function in a binary built by one set of tools can call a\n+function in a binary built by a different set of tools is a subset\n+of interoperability.\n+\n+@item implementation-defined features\n+Language standards include lists of implementation-defined features whose\n+behavior can vary from one implementation to another.  Some of these\n+features are normally covered by a platform's ABI and others are not.\n+The features that are not covered by an ABI generally affect how a\n+program behaves, but not intercallability.\n+\n+@item compatibility\n+Conformance to the same ABI and the same behavior of implementation-defined\n+features are both relevant for compatibility.\n+@end table\n+\n+The application binary interface implemented by a C or C++ compiler\n+affects code generation and runtime support for:\n+\n+@itemize @bullet\n+@item\n+size and alignment of data types\n+@item\n+layout of structured types\n+@item\n+calling conventions\n+@item\n+register usage conventions\n+@item\n+interfaces for runtime arithmetic support\n+@item\n+object file formats\n+@end itemize\n+\n+In addition, the application binary interface implemented by a C++ compiler\n+affects code generation and runtime support for:\n+@itemize @bullet\n+@item\n+name mangling\n+@item\n+exception handling\n+@item\n+invoking constructors and destructors\n+@item\n+layout, alignment, and padding of classes\n+@item\n+layout and alignment of virtual tables\n+@end itemize\n+\n+Some GCC compilation options cause the compiler to generate code that\n+does not conform to the platform's default ABI@.  Other options cause\n+different program behavior for implementation-defined features that are\n+not covered by an ABI@.  These options are provided for consistency with\n+other compilers that do not follow the platform's default ABI or the\n+usual behavior of implementation-defined features for the platform.\n+Be very careful about using such options.\n+\n+Most platforms have a well-defined ABI that covers C code, but ABIs\n+that cover C++ functionality are not yet common.\n+\n+Starting with GCC 3.2, GCC binary conventions for C++ are based on a\n+written, vendor-neutral C++ ABI that was designed to be specific to\n+64-bit Itanium but also includes generic specifications that apply to\n+any platform.\n+This C++ ABI is also implemented by other compiler vendors on some\n+platforms, notably GNU/Linux and BSD systems.\n+We have tried hard to provide a stable ABI that will be compatible with\n+future GCC releases, but it is possible that we will encounter problems\n+that make this difficult.  Such problems could include different\n+interpretations of the C++ ABI by different vendors, bugs in the ABI, or\n+bugs in the implementation of the ABI in different compilers.\n+GCC's @code{-Wabi} switch warns when G++ generates code that is\n+probably not compatible with the C++ ABI@."}, {"sha": "1e9fcf48e18de689bfc44b470c4eb4e4d7dd86e9", "filename": "gcc/doc/gcc.texi", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c19f81682b7a2d561c2988f29cda338282ab688/gcc%2Fdoc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c19f81682b7a2d561c2988f29cda338282ab688/gcc%2Fdoc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.texi?ref=7c19f81682b7a2d561c2988f29cda338282ab688", "patch": "@@ -164,6 +164,7 @@ Introduction, gccint, GNU Compiler Collection (GCC) Internals}.\n * C Extensions::    GNU extensions to the C language family.\n * C++ Extensions::  GNU extensions to the C++ language.\n * Objective-C::     GNU Objective-C runtime features.\n+* Compatibility::   Binary Compatibility\n * Gcov::\t    gcov: a GCC test coverage program.\n * Trouble::         If you have trouble using GCC.\n * Bugs::            How, why and where to report bugs.\n@@ -188,6 +189,7 @@ Introduction, gccint, GNU Compiler Collection (GCC) Internals}.\n @include invoke.texi\n @include extend.texi\n @include objc.texi\n+@include compat.texi\n @include gcov.texi\n @include trouble.texi\n @include bugreport.texi"}]}