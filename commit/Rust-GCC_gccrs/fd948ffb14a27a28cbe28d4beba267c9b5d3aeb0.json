{"sha": "fd948ffb14a27a28cbe28d4beba267c9b5d3aeb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ5NDhmZmIxNGEyN2EyOGNiZTI4ZDRiZWJhMjY3YzliNWQzYWViMA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-14T20:54:45Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-14T20:54:45Z"}, "message": "Check for duplicate methods.\n\nDon't get into an endless loop given invalid recursive types.\n\nFrom-SVN: r167816", "tree": {"sha": "97ee748d325c348db58dddf215bc69c75278e28c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97ee748d325c348db58dddf215bc69c75278e28c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd948ffb14a27a28cbe28d4beba267c9b5d3aeb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd948ffb14a27a28cbe28d4beba267c9b5d3aeb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd948ffb14a27a28cbe28d4beba267c9b5d3aeb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd948ffb14a27a28cbe28d4beba267c9b5d3aeb0/comments", "author": null, "committer": null, "parents": [{"sha": "d4645ada25ab17809d3b2907b60af3040266f614", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4645ada25ab17809d3b2907b60af3040266f614", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4645ada25ab17809d3b2907b60af3040266f614"}], "stats": {"total": 83, "additions": 71, "deletions": 12}, "files": [{"sha": "36959034a9249e9d5ef33f59131906584283b138", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 60, "deletions": 12, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd948ffb14a27a28cbe28d4beba267c9b5d3aeb0/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd948ffb14a27a28cbe28d4beba267c9b5d3aeb0/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=fd948ffb14a27a28cbe28d4beba267c9b5d3aeb0", "patch": "@@ -53,9 +53,9 @@ Type::base()\n   switch (this->classification_)\n     {\n     case TYPE_NAMED:\n-      return static_cast<Named_type*>(this)->real_type()->base();\n+      return this->named_type()->named_base();\n     case TYPE_FORWARD:\n-      return static_cast<Forward_declaration_type*>(this)->real_type()->base();\n+      return this->forward_declaration_type()->real_type()->base();\n     default:\n       return this;\n     }\n@@ -67,13 +67,9 @@ Type::base() const\n   switch (this->classification_)\n     {\n     case TYPE_NAMED:\n-      return static_cast<const Named_type*>(this)->real_type()->base();\n+      return this->named_type()->named_base();\n     case TYPE_FORWARD:\n-      {\n-\tconst Forward_declaration_type* ftype =\n-\t  static_cast<const Forward_declaration_type*>(this);\n-\treturn ftype->real_type()->base();\n-      }\n+      return this->forward_declaration_type()->real_type()->base();\n     default:\n       return this;\n     }\n@@ -224,7 +220,7 @@ Type::is_error_type() const\n     case TYPE_ERROR:\n       return true;\n     case TYPE_NAMED:\n-      return t->named_type()->real_type()->is_error_type();\n+      return t->named_type()->is_named_error_type();\n     default:\n       return false;\n     }\n@@ -5502,10 +5498,23 @@ Interface_type::finalize_methods()\n       const Typed_identifier* p = &this->methods_->at(from);\n       if (!p->name().empty())\n \t{\n-\t  if (from != to)\n-\t    this->methods_->set(to, *p);\n+\t  size_t i = 0;\n+\t  for (i = 0; i < to; ++i)\n+\t    {\n+\t      if (this->methods_->at(i).name() == p->name())\n+\t\t{\n+\t\t  error_at(p->location(), \"duplicate method %qs\",\n+\t\t\t   Gogo::message_name(p->name()).c_str());\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t  if (i == to)\n+\t    {\n+\t      if (from != to)\n+\t\tthis->methods_->set(to, *p);\n+\t      ++to;\n+\t    }\n \t  ++from;\n-\t  ++to;\n \t  continue;\n \t}\n       Interface_type* it = p->type()->interface_type();\n@@ -6448,6 +6457,45 @@ Named_type::message_name() const\n   return this->named_object_->message_name();\n }\n \n+// Return the base type for this type.  We have to be careful about\n+// circular type definitions, which are invalid but may be seen here.\n+\n+Type*\n+Named_type::named_base()\n+{\n+  if (this->seen_)\n+    return this;\n+  this->seen_ = true;\n+  Type* ret = this->type_->base();\n+  this->seen_ = false;\n+  return ret;\n+}\n+\n+const Type*\n+Named_type::named_base() const\n+{\n+  if (this->seen_)\n+    return this;\n+  this->seen_ = true;\n+  const Type* ret = this->type_->base();\n+  this->seen_ = false;\n+  return ret;\n+}\n+\n+// Return whether this is an error type.  We have to be careful about\n+// circular type definitions, which are invalid but may be seen here.\n+\n+bool\n+Named_type::is_named_error_type() const\n+{\n+  if (this->seen_)\n+    return false;\n+  this->seen_ = true;\n+  bool ret = this->type_->is_error_type();\n+  this->seen_ = false;\n+  return ret;\n+}\n+\n // Add a method to this type.\n \n Named_object*"}, {"sha": "3f1b8ba7817a9b099bb1db161bced91d746d5039", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd948ffb14a27a28cbe28d4beba267c9b5d3aeb0/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd948ffb14a27a28cbe28d4beba267c9b5d3aeb0/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=fd948ffb14a27a28cbe28d4beba267c9b5d3aeb0", "patch": "@@ -2457,6 +2457,17 @@ class Named_type : public Type\n   is_builtin() const\n   { return this->location_ == BUILTINS_LOCATION; }\n \n+  // Return the base type for this type.\n+  Type*\n+  named_base();\n+\n+  const Type*\n+  named_base() const;\n+\n+  // Return whether this is an error type.\n+  bool\n+  is_named_error_type() const;\n+\n   // Add a method to this type.\n   Named_object*\n   add_method(const std::string& name, Function*);"}]}