{"sha": "48330c9355e32a41f18556fc0ebccdfe2cc51044", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgzMzBjOTM1NWUzMmE0MWYxODU1NmZjMGViY2NkZmUyY2M1MTA0NA==", "commit": {"author": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2016-11-21T14:17:05Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2016-11-21T14:17:05Z"}, "message": "re PR c++/71973 (c++ handles built-in functions inconsistently)\n\ngcc:\n2016-11-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n\tPR c++/71973\n\t* doc/invoke.texi (-Wno-builtin-declaration-mismatch): Document the\n\tnew default-enabled warning..\n\t* builtin-types.def (BT_CONST_TM_PTR): New primitive type.\n\t(BT_PTR_CONST_STRING): Updated.\n\t(BT_FN_SIZE_STRING_SIZE_CONST_STRING_CONST_PTR): Removed.\n\t(BT_FN_SIZE_STRING_SIZE_CONST_STRING_CONST_TM_PTR): New function type.\n\t* builtins.def (DEF_TM_BUILTIN): Disable BOTH_P for TM builtins.\n\t(strftime): Update builtin function.\n\t* tree-core.h (TI_CONST_TM_PTR_TYPE): New enum value.\n\t* tree.h (const_tm_ptr_type_node): New type node.\n\t* tree.c (free_lang_data, build_common_tree_nodes): Initialize\n\tconst_tm_ptr_type_node.\n\nc-family:\n2016-11-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n\tPR c++/71973\n\t* c.opt (-Wbuiltin-declaration-mismatch): New warning.\n\t* c-common.c (c_common_nodes_and_builtins): Initialize\n\tconst_tm_ptr_type_node.\n\nc:\n2016-11-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n\tPR c++/71973\n\t* c-decl.c (diagnose_mismatched_decls): Use\n\tOPT_Wbuiltin_declaration_mismatch here too.\n\ncp:\n2016-11-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n\tPR c++/71973\n\t* decl.c (duplicate_decls): Warn when a built-in function is redefined.\n\tDon't overload builtin functions with C++ functions.\n\tHandle const_tm_ptr_type_node like file_ptr_node.\n\tCopy the TREE_NOTHROW flag unmodified to the old decl.\n\nlto:\n2016-11-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n\tPR c++/71973\n\t* lto-lang.c (lto_init): Assert const_tm_ptr_type_node is sane.\n\ntestsuite:\n2016-11-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n\tPR c++/71973\n\t* g++.dg/pr71973-1.C: New test.\n\t* g++.dg/pr71973-2.C: New test.\n\t* g++.dg/pr71973-3.C: New test.\n\t* g++.dg/lto/pr68811_0.C: Add -w to first lto-options.\n\t* g++.dg/lookup/extern-c-redecl4.C: Adjust test expectations.\n\t* g++.old-deja/g++.mike/p700.C: Add -Wno-builtin-declaration-mismatch\n\tto dg-options.\n\t* g++.old-deja/g++.other/realloc.C: Likewise.\n\t* g++.old-deja/g++.other/builtins10.C: Adjust test expectations.\n\nFrom-SVN: r242662", "tree": {"sha": "2aa8fba617d40e3e606b3bdf3e74fb9eda06ff81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2aa8fba617d40e3e606b3bdf3e74fb9eda06ff81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48330c9355e32a41f18556fc0ebccdfe2cc51044", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48330c9355e32a41f18556fc0ebccdfe2cc51044", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48330c9355e32a41f18556fc0ebccdfe2cc51044", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48330c9355e32a41f18556fc0ebccdfe2cc51044/comments", "author": null, "committer": null, "parents": [{"sha": "eeeaf7199a10b61c188785e7a86cd3cdecba07c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeeaf7199a10b61c188785e7a86cd3cdecba07c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeeaf7199a10b61c188785e7a86cd3cdecba07c3"}], "stats": {"total": 214, "additions": 191, "deletions": 23}, "files": [{"sha": "53526b50154ed0291486ef2c76004aea290f6ccb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48330c9355e32a41f18556fc0ebccdfe2cc51044", "patch": "@@ -1,3 +1,19 @@\n+2016-11-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR c++/71973\n+\t* doc/invoke.texi (-Wno-builtin-declaration-mismatch): Document the\n+\tnew default-enabled warning..\n+\t* builtin-types.def (BT_CONST_TM_PTR): New primitive type.\n+\t(BT_PTR_CONST_STRING): Updated.\n+\t(BT_FN_SIZE_STRING_SIZE_CONST_STRING_CONST_PTR): Removed.\n+\t(BT_FN_SIZE_STRING_SIZE_CONST_STRING_CONST_TM_PTR): New function type.\n+\t* builtins.def (DEF_TM_BUILTIN): Disable BOTH_P for TM builtins.\n+\t(strftime): Update builtin function.\n+\t* tree-core.h (TI_CONST_TM_PTR_TYPE): New enum value.\n+\t* tree.h (const_tm_ptr_type_node): New type node.\n+\t* tree.c (free_lang_data, build_common_tree_nodes): Initialize\n+\tconst_tm_ptr_type_node.\n+\n 2016-11-21  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR tree-optimization/78413"}, {"sha": "ecc6dcae8ff3cd7c55bafdbaaefa25505b1804b7", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=48330c9355e32a41f18556fc0ebccdfe2cc51044", "patch": "@@ -103,6 +103,7 @@ DEF_PRIMITIVE_TYPE (BT_COMPLEX_LONGDOUBLE, complex_long_double_type_node)\n \n DEF_PRIMITIVE_TYPE (BT_PTR, ptr_type_node)\n DEF_PRIMITIVE_TYPE (BT_FILEPTR, fileptr_type_node)\n+DEF_PRIMITIVE_TYPE (BT_CONST_TM_PTR, const_tm_ptr_type_node)\n DEF_PRIMITIVE_TYPE (BT_CONST_PTR, const_ptr_type_node)\n DEF_PRIMITIVE_TYPE (BT_VOLATILE_PTR,\n \t\t    build_pointer_type\n@@ -146,7 +147,12 @@ DEF_PRIMITIVE_TYPE (BT_I16, builtin_type_for_size (BITS_PER_UNIT*16, 1))\n \n DEF_PRIMITIVE_TYPE (BT_BND, pointer_bounds_type_node)\n \n-DEF_POINTER_TYPE (BT_PTR_CONST_STRING, BT_CONST_STRING)\n+/* The C type `char * const *'.  */\n+DEF_PRIMITIVE_TYPE (BT_PTR_CONST_STRING,\n+\t\t    build_pointer_type\n+\t\t     (build_qualified_type (string_type_node,\n+\t\t\t\t\t    TYPE_QUAL_CONST)))\n+\n DEF_POINTER_TYPE (BT_PTR_UINT, BT_UINT)\n DEF_POINTER_TYPE (BT_PTR_LONG, BT_LONG)\n DEF_POINTER_TYPE (BT_PTR_ULONG, BT_ULONG)\n@@ -511,8 +517,8 @@ DEF_FUNCTION_TYPE_4 (BT_FN_SIZE_CONST_PTR_SIZE_SIZE_FILEPTR,\n \t\t     BT_SIZE, BT_CONST_PTR, BT_SIZE, BT_SIZE, BT_FILEPTR)\n DEF_FUNCTION_TYPE_4 (BT_FN_INT_STRING_SIZE_CONST_STRING_VALIST_ARG,\n \t\tBT_INT, BT_STRING, BT_SIZE, BT_CONST_STRING, BT_VALIST_ARG)\n-DEF_FUNCTION_TYPE_4 (BT_FN_SIZE_STRING_SIZE_CONST_STRING_CONST_PTR,\n-\t\tBT_SIZE, BT_STRING, BT_SIZE, BT_CONST_STRING, BT_CONST_PTR)\n+DEF_FUNCTION_TYPE_4 (BT_FN_SIZE_STRING_SIZE_CONST_STRING_CONST_TM_PTR,\n+\t\tBT_SIZE, BT_STRING, BT_SIZE, BT_CONST_STRING, BT_CONST_TM_PTR)\n DEF_FUNCTION_TYPE_4 (BT_FN_PTR_PTR_CONST_PTR_SIZE_SIZE,\n \t\t     BT_PTR, BT_PTR, BT_CONST_PTR, BT_SIZE, BT_SIZE)\n DEF_FUNCTION_TYPE_4 (BT_FN_PTR_PTR_INT_SIZE_SIZE,"}, {"sha": "e2c582880c3cc8e1444995690d778ef22de7a012", "filename": "gcc/builtins.def", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=48330c9355e32a41f18556fc0ebccdfe2cc51044", "patch": "@@ -212,8 +212,8 @@ along with GCC; see the file COPYING3.  If not see\n    functions are mapped to the actual implementation of the STM library. */\n #undef DEF_TM_BUILTIN\n #define DEF_TM_BUILTIN(ENUM, NAME, TYPE, ATTRS) \\\n-  DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,    \\\n-\t       true, true, true, ATTRS, false, flag_tm)\n+  DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, BT_LAST, \\\n+\t       false, true, true, ATTRS, false, flag_tm)\n \n /* Builtin used by the implementation of libsanitizer. These\n    functions are mapped to the actual implementation of the \n@@ -866,7 +866,7 @@ DEF_GCC_BUILTIN        (BUILT_IN_RETURN_ADDRESS, \"return_address\", BT_FN_PTR_UIN\n DEF_GCC_BUILTIN        (BUILT_IN_SAVEREGS, \"saveregs\", BT_FN_PTR_VAR, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_SETJMP, \"setjmp\", BT_FN_INT_PTR, ATTR_RT_NOTHROW_LEAF_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRFMON, \"strfmon\", BT_FN_SSIZE_STRING_SIZE_CONST_STRING_VAR, ATTR_FORMAT_STRFMON_NOTHROW_3_4)\n-DEF_LIB_BUILTIN        (BUILT_IN_STRFTIME, \"strftime\", BT_FN_SIZE_STRING_SIZE_CONST_STRING_CONST_PTR, ATTR_FORMAT_STRFTIME_NOTHROW_3_0)\n+DEF_LIB_BUILTIN        (BUILT_IN_STRFTIME, \"strftime\", BT_FN_SIZE_STRING_SIZE_CONST_STRING_CONST_TM_PTR, ATTR_FORMAT_STRFTIME_NOTHROW_3_0)\n DEF_GCC_BUILTIN        (BUILT_IN_TRAP, \"trap\", BT_FN_VOID, ATTR_NORETURN_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_UNREACHABLE, \"unreachable\", BT_FN_VOID, ATTR_CONST_NORETURN_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_UNWIND_INIT, \"unwind_init\", BT_FN_VOID, ATTR_NULL)"}, {"sha": "565ff823fc326597a767edef5fde1089c362fb2c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=48330c9355e32a41f18556fc0ebccdfe2cc51044", "patch": "@@ -1,3 +1,10 @@\n+2016-11-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR c++/71973\n+\t* c.opt (-Wbuiltin-declaration-mismatch): New warning.\n+\t* c-common.c (c_common_nodes_and_builtins): Initialize\n+\tconst_tm_ptr_type_node.\n+\n 2016-11-16  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/78285"}, {"sha": "cc18f295e00c3d2a377f8bce64e21fc3dc21009c", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=48330c9355e32a41f18556fc0ebccdfe2cc51044", "patch": "@@ -4293,9 +4293,13 @@ c_common_nodes_and_builtins (void)\n \t}\n \n   if (c_dialect_cxx ())\n-    /* For C++, make fileptr_type_node a distinct void * type until\n-       FILE type is defined.  */\n-    fileptr_type_node = build_variant_type_copy (ptr_type_node);\n+    {\n+      /* For C++, make fileptr_type_node a distinct void * type until\n+\t FILE type is defined.  */\n+      fileptr_type_node = build_variant_type_copy (ptr_type_node);\n+      /* Likewise for const struct tm*.  */\n+      const_tm_ptr_type_node = build_variant_type_copy (const_ptr_type_node);\n+    }\n \n   record_builtin_type (RID_VOID, NULL, void_type_node);\n "}, {"sha": "10a87936107f50bc050abd47a2e0f7bb6105b76b", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=48330c9355e32a41f18556fc0ebccdfe2cc51044", "patch": "@@ -337,6 +337,10 @@ Wframe-address\n C ObjC C++ ObjC++ Var(warn_frame_address) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn when __builtin_frame_address or __builtin_return_address is used unsafely.\n \n+Wbuiltin-declaration-mismatch\n+C ObjC C++ ObjC++ Var(warn_builtin_declaraion_mismatch) Init(1) Warning\n+Warn when a built-in function is declared with the wrong signature.\n+\n Wbuiltin-macro-redefined\n C ObjC C++ ObjC++ CPP(warn_builtin_macro_redefined) CppReason(CPP_W_BUILTIN_MACRO_REDEFINED) Var(cpp_warn_builtin_macro_redefined) Init(1) Warning\n Warn when a built-in preprocessor macro is undefined or redefined."}, {"sha": "dec9c9d44172f4ba2d37611db4653804ca5d416e", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=48330c9355e32a41f18556fc0ebccdfe2cc51044", "patch": "@@ -1,6 +1,12 @@\n+2016-11-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR c++/71973\n+\t* c-decl.c (diagnose_mismatched_decls): Use\n+\tOPT_Wbuiltin_declaration_mismatch here too.\n+\n 2016-11-18  Richard Sandiford  <richard.sandiford@arm.com>\n- \t    Alan Hayward  <alan.hayward@arm.com>\n- \t    David Sherwood  <david.sherwood@arm.com>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n \n \t* c-decl.c (merge_decls): Use SET_DECL_MODE.\n \t(make_label, finish_struct): Likewise."}, {"sha": "db293fe60d14460cd5bbf97dc33c67e872938a6a", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=48330c9355e32a41f18556fc0ebccdfe2cc51044", "patch": "@@ -1867,7 +1867,8 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t      /* If types don't match for a built-in, throw away the\n \t\t built-in.  No point in calling locate_old_decl here, it\n \t\t won't print anything.  */\n-\t      warning (0, \"conflicting types for built-in function %q+D\",\n+\t      warning (OPT_Wbuiltin_declaration_mismatch,\n+\t\t       \"conflicting types for built-in function %q+D\",\n \t\t       newdecl);\n \t      return false;\n \t    }"}, {"sha": "f5475ae75b1ef02a1d31c823a972249a2b0f5b2d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=48330c9355e32a41f18556fc0ebccdfe2cc51044", "patch": "@@ -1,3 +1,11 @@\n+2016-11-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR c++/71973\n+\t* decl.c (duplicate_decls): Warn when a built-in function is redefined.\n+\tDon't overload builtin functions with C++ functions.\n+\tHandle const_tm_ptr_type_node like file_ptr_node.\n+\tCopy the TREE_NOTHROW flag unmodified to the old decl.\n+\n 2016-11-18  Jason Merrill  <jason@redhat.com>\n \n \tPR objc++/78418 - ICE in string tests on darwin"}, {"sha": "6893eae084a08ec472556a396438900e2e15edc4", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=48330c9355e32a41f18556fc0ebccdfe2cc51044", "patch": "@@ -1490,16 +1490,23 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t     explicitly declared.  */\n \t  if (DECL_ANTICIPATED (olddecl))\n \t    {\n-\t      /* Deal with fileptr_type_node.  FILE type is not known\n-\t\t at the time we create the builtins.  */\n \t      tree t1, t2;\n \n+\t      /* A new declaration doesn't match a built-in one unless it\n+\t\t is also extern \"C\".  */\n+\t      gcc_assert (DECL_IS_BUILTIN (olddecl));\n+\t      gcc_assert (DECL_EXTERN_C_P (olddecl));\n+\t      if (!DECL_EXTERN_C_P (newdecl))\n+\t\treturn NULL_TREE;\n+\n \t      for (t1 = TYPE_ARG_TYPES (TREE_TYPE (newdecl)),\n \t\t   t2 = TYPE_ARG_TYPES (TREE_TYPE (olddecl));\n \t\t   t1 || t2;\n \t\t   t1 = TREE_CHAIN (t1), t2 = TREE_CHAIN (t2))\n \t\tif (!t1 || !t2)\n \t\t  break;\n+\t        /* Deal with fileptr_type_node.  FILE type is not known\n+\t\t   at the time we create the builtins.  */\n \t\telse if (TREE_VALUE (t2) == fileptr_type_node)\n \t\t  {\n \t\t    tree t = TREE_VALUE (t1);\n@@ -1511,6 +1518,27 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t\t      {\n \t\t\ttree oldargs = TYPE_ARG_TYPES (TREE_TYPE (olddecl));\n \n+\t\t\tTYPE_ARG_TYPES (TREE_TYPE (olddecl))\n+\t\t\t  = TYPE_ARG_TYPES (TREE_TYPE (newdecl));\n+\t\t\ttypes_match = decls_match (newdecl, olddecl);\n+\t\t\tif (types_match)\n+\t\t\t  return duplicate_decls (newdecl, olddecl,\n+\t\t\t\t\t\t  newdecl_is_friend);\n+\t\t\tTYPE_ARG_TYPES (TREE_TYPE (olddecl)) = oldargs;\n+\t\t      }\n+\t\t  }\n+\t\t/* Likewise for const struct tm*.  */\n+\t\telse if (TREE_VALUE (t2) == const_tm_ptr_type_node)\n+\t\t  {\n+\t\t    tree t = TREE_VALUE (t1);\n+\n+\t\t    if (TYPE_PTR_P (t)\n+\t\t\t&& TYPE_IDENTIFIER (TREE_TYPE (t))\n+\t\t\t   == get_identifier (\"tm\")\n+\t\t\t&& compparms (TREE_CHAIN (t1), TREE_CHAIN (t2)))\n+\t\t      {\n+\t\t\ttree oldargs = TYPE_ARG_TYPES (TREE_TYPE (olddecl));\n+\n \t\t\tTYPE_ARG_TYPES (TREE_TYPE (olddecl))\n \t\t\t  = TYPE_ARG_TYPES (TREE_TYPE (newdecl));\n \t\t\ttypes_match = decls_match (newdecl, olddecl);\n@@ -1522,6 +1550,11 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t\t  }\n \t\telse if (! same_type_p (TREE_VALUE (t1), TREE_VALUE (t2)))\n \t\t  break;\n+\n+\t      warning_at (DECL_SOURCE_LOCATION (newdecl),\n+\t\t\t  OPT_Wbuiltin_declaration_mismatch,\n+\t\t\t  \"declaration of %q+#D conflicts with built-in \"\n+\t\t\t  \"declaration %q#D\", newdecl, olddecl);\n \t    }\n \t  else if ((DECL_EXTERN_C_P (newdecl)\n \t\t    && DECL_EXTERN_C_P (olddecl))\n@@ -1531,7 +1564,8 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t      /* A near match; override the builtin.  */\n \n \t      if (TREE_PUBLIC (newdecl))\n-\t\twarning_at (DECL_SOURCE_LOCATION (newdecl), 0,\n+\t\twarning_at (DECL_SOURCE_LOCATION (newdecl),\n+\t\t\t    OPT_Wbuiltin_declaration_mismatch,\n \t\t\t    \"new declaration %q#D ambiguates built-in \"\n \t\t\t    \"declaration %q#D\", newdecl, olddecl);\n \t      else\n@@ -2243,6 +2277,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n       TREE_TYPE (olddecl) = TREE_TYPE (newdecl);\n       TREE_READONLY (olddecl) = TREE_READONLY (newdecl);\n       TREE_THIS_VOLATILE (olddecl) = TREE_THIS_VOLATILE (newdecl);\n+      TREE_NOTHROW (olddecl) = TREE_NOTHROW (newdecl);\n       TREE_SIDE_EFFECTS (olddecl) = TREE_SIDE_EFFECTS (newdecl);\n     }\n "}, {"sha": "4dcaf10eb6aed9474fc030840c52fe06a8b0992b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=48330c9355e32a41f18556fc0ebccdfe2cc51044", "patch": "@@ -259,6 +259,7 @@ Objective-C and Objective-C++ Dialects}.\n -Walloca -Walloca-larger-than=@var{n} @gol\n -Wno-aggressive-loop-optimizations -Warray-bounds -Warray-bounds=@var{n} @gol\n -Wno-attributes -Wbool-compare -Wbool-operation @gol\n+-Wno-builtin-declaration-mismatch @gol\n -Wno-builtin-macro-redefined -Wc90-c99-compat -Wc99-c11-compat @gol\n -Wc++-compat -Wc++11-compat -Wc++14-compat -Wcast-align  -Wcast-qual  @gol\n -Wchar-subscripts -Wclobbered  -Wcomment -Wconditionally-supported  @gol\n@@ -5925,6 +5926,12 @@ unrecognized attributes, function attributes applied to variables,\n etc.  This does not stop errors for incorrect use of supported\n attributes.\n \n+@item -Wno-builtin-declaration-mismatch\n+@opindex Wno-builtin-declaration-mismatch\n+@opindex Wbuiltin-declaration-mismatch\n+Warn if a built-in function is declared with the wrong signature.\n+This warning is enabled by default.\n+\n @item -Wno-builtin-macro-redefined\n @opindex Wno-builtin-macro-redefined\n @opindex Wbuiltin-macro-redefined"}, {"sha": "732fc8a53ec2e8960ae179be2ddb9c4dfdaed386", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=48330c9355e32a41f18556fc0ebccdfe2cc51044", "patch": "@@ -1,6 +1,11 @@\n+2016-11-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR c++/71973\n+\t* lto-lang.c (lto_init): Assert const_tm_ptr_type_node is sane.\n+\n 2016-11-18  Richard Sandiford  <richard.sandiford@arm.com>\n- \t    Alan Hayward  <alan.hayward@arm.com>\n- \t    David Sherwood  <david.sherwood@arm.com>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n \n \t* lto.c (offload_handle_link_vars): Use SET_DECL_MODE.\n "}, {"sha": "a5f04ba8e7210e1d1fd41510a821ed11b9c0977f", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=48330c9355e32a41f18556fc0ebccdfe2cc51044", "patch": "@@ -1266,6 +1266,10 @@ lto_init (void)\n      always use the C definition here in lto1.  */\n   gcc_assert (fileptr_type_node == ptr_type_node);\n   gcc_assert (TYPE_MAIN_VARIANT (fileptr_type_node) == ptr_type_node);\n+  /* Likewise for const struct tm*.  */\n+  gcc_assert (const_tm_ptr_type_node == const_ptr_type_node);\n+  gcc_assert (TYPE_MAIN_VARIANT (const_tm_ptr_type_node)\n+\t      == const_ptr_type_node);\n \n   ptrdiff_type_node = integer_type_node;\n "}, {"sha": "ef6e22cc71a812cfb21fd460c4aa27b7d036084d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=48330c9355e32a41f18556fc0ebccdfe2cc51044", "patch": "@@ -1,3 +1,16 @@\n+2016-11-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR c++/71973\n+\t* g++.dg/pr71973-1.C: New test.\n+\t* g++.dg/pr71973-2.C: New test.\n+\t* g++.dg/pr71973-3.C: New test.\n+\t* g++.dg/lto/pr68811_0.C: Add -w to first lto-options.\n+\t* g++.dg/lookup/extern-c-redecl4.C: Adjust test expectations.\n+\t* g++.old-deja/g++.mike/p700.C: Add -Wno-builtin-declaration-mismatch\n+\tto dg-options.\n+\t* g++.old-deja/g++.other/realloc.C: Likewise.\n+\t* g++.old-deja/g++.other/builtins10.C: Adjust test expectations.\n+\n 2016-11-21  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR tree-optimization/78413"}, {"sha": "f7fae78259c98b33bcf7fbab29fc2e8b26dbb8ab", "filename": "gcc/testsuite/g++.dg/lookup/extern-c-redecl4.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fextern-c-redecl4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fextern-c-redecl4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fextern-c-redecl4.C?ref=48330c9355e32a41f18556fc0ebccdfe2cc51044", "patch": "@@ -3,7 +3,6 @@\n \n // { dg-options \"\" }\n // { dg-do compile }\n-// { dg-final { scan-assembler \"call\\[\\t \\]+\\[^\\$\\]*?_Z4forkv\" { target i?86-*-* x86_64-*-* } } }\n \n class frok\n {\n@@ -14,5 +13,5 @@ class frok\n void\n foo ()\n {\n-  fork ();\n+  fork (); // { dg-error \"was not declared in this scope\" }\n }"}, {"sha": "807c803b3473fda2f3911415a5bbde54500fef32", "filename": "gcc/testsuite/g++.dg/lto/pr68811_0.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr68811_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr68811_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr68811_0.C?ref=48330c9355e32a41f18556fc0ebccdfe2cc51044", "patch": "@@ -1,5 +1,5 @@\n // { dg-lto-do link }\n-/* { dg-lto-options \"-O2  -w\" } */\n+/* { dg-lto-options { { -O2 -w } { -w } } } */\n // { dg-extra-ld-options \"-r -nostdlib\" }\n extern \"C\" char *strcpy(char *, const char *);\n char InitXPCOMGlue_lastSlash;"}, {"sha": "7da0bb5e7063cee52506360a1ac51bb20b3e6bd0", "filename": "gcc/testsuite/g++.dg/pr71973-1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71973-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71973-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71973-1.C?ref=48330c9355e32a41f18556fc0ebccdfe2cc51044", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile }\n+// { dg-options \"-Wall -fdump-tree-eh\" }\n+\n+extern \"C\"\n+void fork () // { dg-warning \"conflicts with built-in declaration\" }\n+__attribute__ ((__nothrow__));\n+\n+void foo () throw ()\n+{\n+  fork ();\n+}\n+\n+// { dg-final { scan-tree-dump-not \"eh_dispatch\" \"eh\" } }\n+// { dg-final { scan-tree-dump-not \"resx\" \"eh\" } }"}, {"sha": "d8271b1d87416680cb139e1e44fa1e469e32ec8f", "filename": "gcc/testsuite/g++.dg/pr71973-2.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71973-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71973-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71973-2.C?ref=48330c9355e32a41f18556fc0ebccdfe2cc51044", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do compile }\n+// { dg-options \"-Wall -fdump-tree-eh\" }\n+\n+typedef __SIZE_TYPE__ size_t;\n+struct tm;\n+\n+extern \"C\"\n+size_t strftime (char*, size_t, const char*, const struct tm*)\n+__attribute__ ((__nothrow__));\n+\n+void foo () throw ()\n+{\n+  strftime (0,0,0,0); // { dg-warning \"null argument where non-null required\" }\n+  // { dg-warning \"too many arguments for format\" \"\" { target *-*-* } .-1 }\n+}\n+\n+// { dg-final { scan-tree-dump-not \"eh_dispatch\" \"eh\" } }\n+// { dg-final { scan-tree-dump-not \"resx\" \"eh\" } }"}, {"sha": "12fd0dcea47f7e7e1664aa9d4ab9290627c173a3", "filename": "gcc/testsuite/g++.dg/pr71973-3.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71973-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71973-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71973-3.C?ref=48330c9355e32a41f18556fc0ebccdfe2cc51044", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile }\n+// { dg-options \"-Wall -fdump-tree-eh\" }\n+\n+extern \"C\"\n+int execve (const char *__path, char *const __argv[], char *const __envp[])\n+__attribute__ ((__nothrow__));\n+\n+void foo () throw ()\n+{\n+  execve (0,0,0);\n+}\n+\n+// { dg-final { scan-tree-dump-not \"eh_dispatch\" \"eh\" } }\n+// { dg-final { scan-tree-dump-not \"resx\" \"eh\" } }"}, {"sha": "622477917751837c474bca7da5c489bb7a4593b5", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p700.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp700.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp700.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp700.C?ref=48330c9355e32a41f18556fc0ebccdfe2cc51044", "patch": "@@ -1,5 +1,5 @@\n // { dg-do assemble  }\n-// { dg-options \"-Wno-deprecated -Wno-register\" }\n+// { dg-options \"-Wno-deprecated -Wno-register -Wno-builtin-declaration-mismatch\" }\n // { dg-error \"limited range of data type\" \"16-bit target\" { target xstormy16-*-* } 0 }\n // prms-id: 700\n "}, {"sha": "e5ba8bf6a725af17a184448b3023b5142375ef9a", "filename": "gcc/testsuite/g++.old-deja/g++.other/builtins10.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fbuiltins10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fbuiltins10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fbuiltins10.C?ref=48330c9355e32a41f18556fc0ebccdfe2cc51044", "patch": "@@ -1,7 +1,8 @@\n // { dg-do assemble  }\n-// Test that built-in functions don't warn when prototyped without arguments.\n+// Test that built-in functions do warn when prototyped without arguments.\n // Origin: PR c++/9367\n // Copyright (C) 2003 Free Software Foundation.\n \n-extern \"C\" int snprintf();\n+extern \"C\" int snprintf(); // { dg-warning \"conflicts with built-in declaration\" \"\" { target c++11 } }\n+extern \"C\" int printf(); // { dg-warning \"conflicts with built-in declaration\" }\n "}, {"sha": "8b9c2c60887cbf0981ffdfecb26f181c288d03d8", "filename": "gcc/testsuite/g++.old-deja/g++.other/realloc.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Frealloc.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Frealloc.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Frealloc.C?ref=48330c9355e32a41f18556fc0ebccdfe2cc51044", "patch": "@@ -1,4 +1,5 @@\n // { dg-do assemble  }\n+// { dg-options \"-Wno-builtin-declaration-mismatch\" }\n \n extern \"C\" void realloc();\n "}, {"sha": "a3d220df24670066e2e3255399ecda4f79fdc9c8", "filename": "gcc/tree-core.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=48330c9355e32a41f18556fc0ebccdfe2cc51044", "patch": "@@ -618,6 +618,7 @@ enum tree_index {\n   TI_VA_LIST_FPR_COUNTER_FIELD,\n   TI_BOOLEAN_TYPE,\n   TI_FILEPTR_TYPE,\n+  TI_CONST_TM_PTR_TYPE,\n   TI_POINTER_SIZED_TYPE,\n \n   TI_POINTER_BOUNDS_TYPE,"}, {"sha": "a4c5b1b968dc75a234c717838425e4b8a3081291", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=48330c9355e32a41f18556fc0ebccdfe2cc51044", "patch": "@@ -6006,6 +6006,7 @@ free_lang_data (void)\n   /* Create gimple variants for common types.  */\n   ptrdiff_type_node = integer_type_node;\n   fileptr_type_node = ptr_type_node;\n+  const_tm_ptr_type_node = const_ptr_type_node;\n \n   /* Reset some langhooks.  Do not reset types_compatible_p, it may\n      still be used indirectly via the get_alias_set langhook.  */\n@@ -10332,6 +10333,7 @@ build_common_tree_nodes (bool signed_char)\n   const_ptr_type_node\n     = build_pointer_type (build_type_variant (void_type_node, 1, 0));\n   fileptr_type_node = ptr_type_node;\n+  const_tm_ptr_type_node = const_ptr_type_node;\n \n   pointer_sized_int_node = build_nonstandard_integer_type (POINTER_SIZE, 1);\n "}, {"sha": "b4ec3fd069084bc1182f3a8c516187ee813a46b7", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48330c9355e32a41f18556fc0ebccdfe2cc51044/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=48330c9355e32a41f18556fc0ebccdfe2cc51044", "patch": "@@ -3672,6 +3672,8 @@ tree_operand_check_code (const_tree __t, enum tree_code __code, int __i,\n #define va_list_fpr_counter_field\tglobal_trees[TI_VA_LIST_FPR_COUNTER_FIELD]\n /* The C type `FILE *'.  */\n #define fileptr_type_node\t\tglobal_trees[TI_FILEPTR_TYPE]\n+/* The C type `const struct tm *'.  */\n+#define const_tm_ptr_type_node\t\tglobal_trees[TI_CONST_TM_PTR_TYPE]\n #define pointer_sized_int_node\t\tglobal_trees[TI_POINTER_SIZED_TYPE]\n \n #define boolean_type_node\t\tglobal_trees[TI_BOOLEAN_TYPE]"}]}