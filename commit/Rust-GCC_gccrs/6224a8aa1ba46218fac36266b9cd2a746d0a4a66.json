{"sha": "6224a8aa1ba46218fac36266b9cd2a746d0a4a66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIyNGE4YWExYmE0NjIxOGZhYzM2MjY2YjljZDJhNzQ2ZDBhNGE2Ng==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-10-03T13:41:23Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-10-11T09:56:03Z"}, "message": "Objective-C, Darwin : Update protocol metadata to current version.\n\nLater versions of the NeXT runtime protocol metadata contain additional\nfields.  This patch adds these fields and populates a new list of\nmethod types.\n\ngcc/objc/ChangeLog:\n\n\t* objc-next-runtime-abi-02.c (build_v2_super_template): Add new\n\tfields to the template.\n\t(build_v2_protocol_template): Build new field entries.\n\t(generate_v2_meth_descriptor_table): Adjust to allow recording all\n\tmethod types.\n\t(generate_v2_meth_type_list): New.\n\t(build_v2_protocol_initializer): Initialize the additional fields.\n\t(generate_v2_protocols): Record method types for all entries and\n\tgenerate the additional method type table.", "tree": {"sha": "ece3a5a1de013f4680fa96f63eedff83a2648246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ece3a5a1de013f4680fa96f63eedff83a2648246"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6224a8aa1ba46218fac36266b9cd2a746d0a4a66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6224a8aa1ba46218fac36266b9cd2a746d0a4a66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6224a8aa1ba46218fac36266b9cd2a746d0a4a66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6224a8aa1ba46218fac36266b9cd2a746d0a4a66/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aab566a4fb69743593bf3b5bd0a48d4e33c01057", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aab566a4fb69743593bf3b5bd0a48d4e33c01057", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aab566a4fb69743593bf3b5bd0a48d4e33c01057"}], "stats": {"total": 103, "additions": 87, "deletions": 16}, "files": [{"sha": "3a308975325711ec85f1fe11ab4ecbd8d66dd8aa", "filename": "gcc/objc/objc-next-runtime-abi-02.c", "status": "modified", "additions": 87, "deletions": 16, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6224a8aa1ba46218fac36266b9cd2a746d0a4a66/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6224a8aa1ba46218fac36266b9cd2a746d0a4a66/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c?ref=6224a8aa1ba46218fac36266b9cd2a746d0a4a66", "patch": "@@ -743,6 +743,9 @@ build_v2_super_template (void)\n      const struct _prop_list_t * const properties;\n      const uint32_t size;\n      const uint32_t flags;\n+     const char ** extended_method_types;\n+     const char * demangled_name;\n+     const struct _prop_list_t * class_properties;\n    }\n */\n static void\n@@ -784,6 +787,16 @@ build_v2_protocol_template (void)\n   /* const uint32_t flags; */\n   add_field_decl (integer_type_node, \"flags\", &chain);\n \n+  /* const char **extendedMethodTypes; */\n+  tree ptr_to_ptr_to_char = build_pointer_type (string_type_node);\n+  add_field_decl (ptr_to_ptr_to_char, \"extended_method_types\", &chain);\n+\n+  /* const char *demangledName; */\n+  add_field_decl (string_type_node, \"demangled_name\", &chain);\n+\n+  /* const struct _prop_list_t *class_properties; */\n+  add_field_decl (objc_prop_list_ptr, \"class_properties\", &chain);\n+\n   objc_finish_struct (objc_v2_protocol_template, decls);\n }\n \n@@ -2296,23 +2309,25 @@ build_v2_method_list_template (tree list_type, int size)\n    objc_method_prototype_template which is missing this field.  */\n static tree\n generate_v2_meth_descriptor_table (tree chain, tree protocol,\n-\t\t\t\t   const char *prefix, tree attr)\n+\t\t\t\t   const char *prefix, tree attr,\n+\t\t\t\t   vec<tree>& all_meths)\n {\n-  tree method_list_template, initlist, decl, methods;\n+  tree method_list_template, initlist, decl;\n   int size, entsize;\n   vec<constructor_elt, va_gc> *v = NULL;\n   char buf[BUFSIZE];\n \n   if (!chain || !prefix)\n     return NULL_TREE;\n \n-  methods = chain;\n+  tree method = chain;\n   size = 0;\n-  while (methods)\n+  while (method)\n     {\n-      if (! METHOD_ENCODING (methods))\n-\tMETHOD_ENCODING (methods) = encode_method_prototype (methods);\n-      methods = TREE_CHAIN (methods);\n+      if (! METHOD_ENCODING (method))\n+\tMETHOD_ENCODING (method) = encode_method_prototype (method);\n+      all_meths.safe_push (method);\n+      method = TREE_CHAIN (method);\n       size++;\n     }\n \n@@ -2337,6 +2352,31 @@ generate_v2_meth_descriptor_table (tree chain, tree protocol,\n   return decl;\n }\n \n+static tree\n+generate_v2_meth_type_list (vec<tree>& all_meths, tree protocol,\n+\t\t\t    const char *prefix)\n+{\n+  if (all_meths.is_empty () || !prefix)\n+    return NULL_TREE;\n+\n+  unsigned size = all_meths.length ();\n+  tree list_type = build_sized_array_type (string_type_node, size);\n+  char *nam;\n+  asprintf (&nam, \"%s_%s\", prefix,\n+\t    IDENTIFIER_POINTER (PROTOCOL_NAME (protocol)));\n+  tree decl = start_var_decl (list_type, nam);\n+  free (nam);\n+  OBJCMETA (decl, objc_meta, meta_base);\n+  vec<constructor_elt, va_gc> *v = NULL;\n+\n+  for (unsigned i = 0; i < size; ++i)\n+    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n+\t\t\t    add_objc_string (METHOD_ENCODING (all_meths[i]),\n+\t\t\t\t\t     meth_var_types));\n+  finish_var_decl (decl, objc_build_constructor (list_type, v));\n+  return decl;\n+}\n+\n /* This routine builds the initializer list to initialize the 'struct\n    _prop_t prop_list[]' field of 'struct _prop_list_t' meta-data.  */\n \n@@ -2463,7 +2503,8 @@ static tree\n build_v2_protocol_initializer (tree type, tree protocol_name, tree protocol_list,\n \t\t\t      tree inst_methods, tree class_methods,\n \t\t\t      tree opt_ins_meth, tree opt_cls_meth,\n-\t\t\t      tree property_list)\n+\t\t\t      tree property_list, tree ext_meth_types,\n+\t\t\t      tree demangled_name, tree class_prop_list)\n {\n   tree expr, ttyp;\n   location_t loc;\n@@ -2518,7 +2559,28 @@ build_v2_protocol_initializer (tree type, tree protocol_name, tree protocol_list\n   /* const uint32_t flags; = 0 */\n   CONSTRUCTOR_APPEND_ELT (inits, NULL_TREE, integer_zero_node);\n \n-  return objc_build_constructor (type, inits);\n+  ttyp = build_pointer_type (string_type_node);\n+  if (ext_meth_types)\n+    expr = convert (ttyp, build_unary_op (loc, ADDR_EXPR, ext_meth_types, 0));\n+  else\n+    expr = convert (ttyp, null_pointer_node);\n+  CONSTRUCTOR_APPEND_ELT (inits, NULL_TREE, expr);\n+\n+  ttyp = string_type_node;\n+   if (demangled_name)\n+    expr = convert (ttyp, build_unary_op (loc, ADDR_EXPR, demangled_name, 0));\n+  else\n+    expr = convert (ttyp, null_pointer_node);\n+  CONSTRUCTOR_APPEND_ELT (inits, NULL_TREE, expr);\n+\n+  ttyp = objc_prop_list_ptr;\n+   if (class_prop_list)\n+    expr = convert (ttyp, build_unary_op (loc, ADDR_EXPR, class_prop_list, 0));\n+  else\n+    expr = convert (ttyp, null_pointer_node);\n+  CONSTRUCTOR_APPEND_ELT (inits, NULL_TREE, expr);\n+\n+ return objc_build_constructor (type, inits);\n }\n \n /* Main routine to build all meta data for all protocols used in a\n@@ -2554,25 +2616,26 @@ generate_v2_protocols (void)\n       loc = DECL_SOURCE_LOCATION (decl);\n       some = true;\n \n+      vec<tree> all_meths = vNULL;\n       inst_meth =\n \tgenerate_v2_meth_descriptor_table (PROTOCOL_NST_METHODS (p), p,\n \t\t\t\t\t   \"_OBJC_ProtocolInstanceMethods\",\n-\t\t\t\t\t   meta_proto_nst_meth);\n+\t\t\t\t\t   meta_proto_nst_meth, all_meths);\n \n       class_meth =\n \tgenerate_v2_meth_descriptor_table (PROTOCOL_CLS_METHODS (p), p,\n \t\t\t\t\t   \"_OBJC_ProtocolClassMethods\",\n-\t\t\t\t\t   meta_proto_cls_meth);\n+\t\t\t\t\t   meta_proto_cls_meth, all_meths);\n \n       opt_inst_meth =\n \tgenerate_v2_meth_descriptor_table (PROTOCOL_OPTIONAL_NST_METHODS (p), p,\n-\t\t\t\t\t   \"_OBJC_OptProtocolInstMethods\",\n-\t\t\t\t\t   meta_proto_nst_meth);\n+\t\t\t\t\t   \"_OBJC_ProtocolOptInstMethods\",\n+\t\t\t\t\t   meta_proto_nst_meth, all_meths);\n \n       opt_class_meth =\n \tgenerate_v2_meth_descriptor_table (PROTOCOL_OPTIONAL_CLS_METHODS (p), p,\n-\t\t\t\t\t   \"_OBJC_OptProtocolClassMethods\",\n-\t\t\t\t\t   meta_proto_cls_meth);\n+\t\t\t\t\t   \"_OBJC_ProtocolOptClassMethods\",\n+\t\t\t\t\t   meta_proto_cls_meth, all_meths);\n \n       if (PROTOCOL_LIST (p))\n \trefs_decl = generate_v2_protocol_list (p, NULL_TREE);\n@@ -2590,13 +2653,21 @@ generate_v2_protocols (void)\n \n       props = generate_v2_property_table (p, NULL_TREE);\n \n+      tree ext_meth_types\n+\t= generate_v2_meth_type_list (all_meths, p,\n+\t\t\t\t      \"_OBJC_ProtocolMethodTypes\");\n+      tree demangled_name = NULL_TREE;\n+      tree class_prop_list = NULL_TREE;\n+\n       initlist = build_v2_protocol_initializer (TREE_TYPE (decl),\n \t\t\t\t\t\tprotocol_name_expr, refs_expr,\n \t\t\t\t\t\tinst_meth, class_meth,\n \t\t\t\t\t\topt_inst_meth, opt_class_meth,\n-\t\t\t\t\t\tprops);\n+\t\t\t\t\t\tprops, ext_meth_types,\n+\t\t\t\t\t\tdemangled_name,class_prop_list);\n       finish_var_decl (decl, initlist);\n       objc_add_to_protocol_list (p, decl);\n+      all_meths.truncate (0);\n     }\n \n   if (some)"}]}