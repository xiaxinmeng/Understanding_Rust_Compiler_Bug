{"sha": "fc8d9e4497032dd295aac9414042163f92250b77", "node_id": "C_kwDOANBUbNoAKGZjOGQ5ZTQ0OTcwMzJkZDI5NWFhYzk0MTQwNDIxNjNmOTIyNTBiNzc", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-04T10:23:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-06T06:14:32Z"}, "message": "tree-optimization/105142 - wrong code with maybe_fold_{and,or}_comparisons\n\nThe following avoids expanding definitions in regions conditionally\nexecuted under the condition A when simplifying A && B or A || B.\nThis is done by passing down the basic-block of the outer condition\nto maybe_fold_{and,or}_comparisons, through the various helpers\nin gimple-fold.cc that might call back to maybe_fold_{and,or}_comparisons\nand ultimatively to maybe_fold_comparisons_from_match_pd where the\nfix is to provide a custom valueization hook to\ngimple_match_op::resimplify that avoids looking at definitions\nthat do not dominate the outer block.\n\nFor the testcase this avoids combining a stmt that invokes undefined\ninteger overflow when the outer condition is false but it also\naovids combining stmts with range information that is derived from\nthe outer condition.\n\nThe new parameter to maybe_fold_{and,or}_comparisons is defaulted\nto nullptr and I only adjusted the if-combine to pass down the\nouter block.  I think other callers like tree-if-conv have the\nsame issue but it's not straight-forward as to what to do there.\n\n2022-04-05  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/105142\n\t* gimple-fold.h (maybe_fold_and_comparisons): Add defaulted\n\tbasic-block parameter.\n\t(maybe_fold_or_comparisons): Likewise.\n\t* gimple-fold.cc (follow_outer_ssa_edges): New.\n\t(maybe_fold_comparisons_from_match_pd): Use follow_outer_ssa_edges\n\twhen an outer condition basic-block is specified.\n\t(and_comparisons_1, and_var_with_comparison,\n\tand_var_with_comparison_1, or_comparisons_1,\n\tor_var_with_comparison, or_var_with_comparison_1): Receive and pass\n\tdown the outer condition basic-block.\n\t* tree-ssa-ifcombine.cc (ifcombine_ifandif): Pass down the\n\tbasic-block of the outer condition.\n\n\t* g++.dg/torture/pr105142.C: New testcase.", "tree": {"sha": "bd172e4343876777a8ce284a87187ce5d4213262", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd172e4343876777a8ce284a87187ce5d4213262"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc8d9e4497032dd295aac9414042163f92250b77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc8d9e4497032dd295aac9414042163f92250b77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc8d9e4497032dd295aac9414042163f92250b77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc8d9e4497032dd295aac9414042163f92250b77/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2a818641ba5d07ebe2c241906896c4886910d18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2a818641ba5d07ebe2c241906896c4886910d18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2a818641ba5d07ebe2c241906896c4886910d18"}], "stats": {"total": 147, "additions": 102, "deletions": 45}, "files": [{"sha": "97880a5f79082633d9d66081a838e65ecfafab55", "filename": "gcc/gimple-fold.cc", "status": "modified", "additions": 88, "deletions": 42, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8d9e4497032dd295aac9414042163f92250b77/gcc%2Fgimple-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8d9e4497032dd295aac9414042163f92250b77/gcc%2Fgimple-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.cc?ref=fc8d9e4497032dd295aac9414042163f92250b77", "patch": "@@ -6537,22 +6537,27 @@ same_bool_result_p (const_tree op1, const_tree op2)\n \n static tree\n and_comparisons_1 (tree type, enum tree_code code1, tree op1a, tree op1b,\n-\t\t   enum tree_code code2, tree op2a, tree op2b);\n+\t\t   enum tree_code code2, tree op2a, tree op2b, basic_block);\n static tree\n and_var_with_comparison (tree type, tree var, bool invert,\n-\t\t\t enum tree_code code2, tree op2a, tree op2b);\n+\t\t\t enum tree_code code2, tree op2a, tree op2b,\n+\t\t\t basic_block);\n static tree\n and_var_with_comparison_1 (tree type, gimple *stmt,\n-\t\t\t   enum tree_code code2, tree op2a, tree op2b);\n+\t\t\t   enum tree_code code2, tree op2a, tree op2b,\n+\t\t\t   basic_block);\n static tree\n or_comparisons_1 (tree, enum tree_code code1, tree op1a, tree op1b,\n-\t\t  enum tree_code code2, tree op2a, tree op2b);\n+\t\t  enum tree_code code2, tree op2a, tree op2b,\n+\t\t  basic_block);\n static tree\n or_var_with_comparison (tree, tree var, bool invert,\n-\t\t\tenum tree_code code2, tree op2a, tree op2b);\n+\t\t\tenum tree_code code2, tree op2a, tree op2b,\n+\t\t\tbasic_block);\n static tree\n or_var_with_comparison_1 (tree, gimple *stmt,\n-\t\t\t  enum tree_code code2, tree op2a, tree op2b);\n+\t\t\t  enum tree_code code2, tree op2a, tree op2b,\n+\t\t\t  basic_block);\n \n /* Helper function for and_comparisons_1:  try to simplify the AND of the\n    ssa variable VAR with the comparison specified by (OP2A CODE2 OP2B).\n@@ -6561,7 +6566,8 @@ or_var_with_comparison_1 (tree, gimple *stmt,\n \n static tree\n and_var_with_comparison (tree type, tree var, bool invert,\n-\t\t\t enum tree_code code2, tree op2a, tree op2b)\n+\t\t\t enum tree_code code2, tree op2a, tree op2b,\n+\t\t\t basic_block outer_cond_bb)\n {\n   tree t;\n   gimple *stmt = SSA_NAME_DEF_STMT (var);\n@@ -6576,9 +6582,10 @@ and_var_with_comparison (tree type, tree var, bool invert,\n   if (invert)\n     t = or_var_with_comparison_1 (type, stmt,\n \t\t\t\t  invert_tree_comparison (code2, false),\n-\t\t\t\t  op2a, op2b);\n+\t\t\t\t  op2a, op2b, outer_cond_bb);\n   else\n-    t = and_var_with_comparison_1 (type, stmt, code2, op2a, op2b);\n+    t = and_var_with_comparison_1 (type, stmt, code2, op2a, op2b,\n+\t\t\t\t   outer_cond_bb);\n   return canonicalize_bool (t, invert);\n }\n \n@@ -6588,7 +6595,8 @@ and_var_with_comparison (tree type, tree var, bool invert,\n \n static tree\n and_var_with_comparison_1 (tree type, gimple *stmt,\n-\t\t\t   enum tree_code code2, tree op2a, tree op2b)\n+\t\t\t   enum tree_code code2, tree op2a, tree op2b,\n+\t\t\t   basic_block outer_cond_bb)\n {\n   tree var = gimple_assign_lhs (stmt);\n   tree true_test_var = NULL_TREE;\n@@ -6623,7 +6631,7 @@ and_var_with_comparison_1 (tree type, gimple *stmt,\n \t\t\t\t  gimple_assign_rhs2 (stmt),\n \t\t\t\t  code2,\n \t\t\t\t  op2a,\n-\t\t\t\t  op2b);\n+\t\t\t\t  op2b, outer_cond_bb);\n       if (t)\n \treturn t;\n     }\n@@ -6655,12 +6663,12 @@ and_var_with_comparison_1 (tree type, gimple *stmt,\n \treturn (is_and\n \t\t? boolean_false_node\n \t\t: and_var_with_comparison (type, inner2, false, code2, op2a,\n-\t\t\t\t\t   op2b));\n+\t\t\t\t\t   op2b, outer_cond_bb));\n       else if (inner2 == false_test_var)\n \treturn (is_and\n \t\t? boolean_false_node\n \t\t: and_var_with_comparison (type, inner1, false, code2, op2a,\n-\t\t\t\t\t   op2b));\n+\t\t\t\t\t   op2b, outer_cond_bb));\n \n       /* Next, redistribute/reassociate the AND across the inner tests.\n \t Compute the first partial result, (inner1 AND (op2a code op2b))  */\n@@ -6670,7 +6678,8 @@ and_var_with_comparison_1 (tree type, gimple *stmt,\n \t  && (t = maybe_fold_and_comparisons (type, gimple_assign_rhs_code (s),\n \t\t\t\t\t      gimple_assign_rhs1 (s),\n \t\t\t\t\t      gimple_assign_rhs2 (s),\n-\t\t\t\t\t      code2, op2a, op2b)))\n+\t\t\t\t\t      code2, op2a, op2b,\n+\t\t\t\t\t      outer_cond_bb)))\n \t{\n \t  /* Handle the AND case, where we are reassociating:\n \t     (inner1 AND inner2) AND (op2a code2 op2b)\n@@ -6702,7 +6711,8 @@ and_var_with_comparison_1 (tree type, gimple *stmt,\n \t  && (t = maybe_fold_and_comparisons (type, gimple_assign_rhs_code (s),\n \t\t\t\t\t      gimple_assign_rhs1 (s),\n \t\t\t\t\t      gimple_assign_rhs2 (s),\n-\t\t\t\t\t      code2, op2a, op2b)))\n+\t\t\t\t\t      code2, op2a, op2b,\n+\t\t\t\t\t      outer_cond_bb)))\n \t{\n \t  /* Handle the AND case, where we are reassociating:\n \t     (inner1 AND inner2) AND (op2a code2 op2b)\n@@ -6756,7 +6766,8 @@ and_var_with_comparison_1 (tree type, gimple *stmt,\n \n static tree\n and_comparisons_1 (tree type, enum tree_code code1, tree op1a, tree op1b,\n-\t\t   enum tree_code code2, tree op2a, tree op2b)\n+\t\t   enum tree_code code2, tree op2a, tree op2b,\n+\t\t   basic_block outer_cond_bb)\n {\n   tree truth_type = truth_type_for (TREE_TYPE (op1a));\n \n@@ -6800,7 +6811,7 @@ and_comparisons_1 (tree type, enum tree_code code1, tree op1a, tree op1b,\n \tcase GIMPLE_ASSIGN:\n \t  /* Try to simplify by copy-propagating the definition.  */\n \t  return and_var_with_comparison (type, op1a, invert, code2, op2a,\n-\t\t\t\t\t  op2b);\n+\t\t\t\t\t  op2b, outer_cond_bb);\n \n \tcase GIMPLE_PHI:\n \t  /* If every argument to the PHI produces the same result when\n@@ -6851,7 +6862,8 @@ and_comparisons_1 (tree type, enum tree_code code1, tree op1a, tree op1b,\n \t\t\t\t\t     gimple_bb (stmt)))\n \t\t\treturn NULL_TREE;\n \t\t      temp = and_var_with_comparison (type, arg, invert, code2,\n-\t\t\t\t\t\t      op2a, op2b);\n+\t\t\t\t\t\t      op2a, op2b,\n+\t\t\t\t\t\t      outer_cond_bb);\n \t\t      if (!temp)\n \t\t\treturn NULL_TREE;\n \t\t      else if (!result)\n@@ -6872,6 +6884,25 @@ and_comparisons_1 (tree type, enum tree_code code1, tree op1a, tree op1b,\n   return NULL_TREE;\n }\n \n+static basic_block fosa_bb;\n+static tree\n+follow_outer_ssa_edges (tree val)\n+{\n+  if (TREE_CODE (val) == SSA_NAME\n+      && !SSA_NAME_IS_DEFAULT_DEF (val))\n+    {\n+      basic_block def_bb = gimple_bb (SSA_NAME_DEF_STMT (val));\n+      if (!def_bb\n+\t  || def_bb == fosa_bb\n+\t  || (dom_info_available_p (CDI_DOMINATORS)\n+\t      && (def_bb == fosa_bb\n+\t\t  || dominated_by_p (CDI_DOMINATORS, fosa_bb, def_bb))))\n+\treturn val;\n+      return NULL_TREE;\n+    }\n+  return val;\n+}\n+\n /* Helper function for maybe_fold_and_comparisons and maybe_fold_or_comparisons\n    : try to simplify the AND/OR of the ssa variable VAR with the comparison\n    specified by (OP2A CODE2 OP2B) from match.pd.  Return NULL_EXPR if we can't\n@@ -6884,7 +6915,8 @@ maybe_fold_comparisons_from_match_pd (tree type, enum tree_code code,\n \t\t\t\t      enum tree_code code1,\n \t\t\t\t      tree op1a, tree op1b,\n \t\t\t\t      enum tree_code code2, tree op2a,\n-\t\t\t\t      tree op2b)\n+\t\t\t\t      tree op2b,\n+\t\t\t\t      basic_block outer_cond_bb)\n {\n   /* Allocate gimple stmt1 on the stack.  */\n   gassign *stmt1\n@@ -6893,6 +6925,7 @@ maybe_fold_comparisons_from_match_pd (tree type, enum tree_code code,\n   gimple_assign_set_rhs_code (stmt1, code1);\n   gimple_assign_set_rhs1 (stmt1, op1a);\n   gimple_assign_set_rhs2 (stmt1, op1b);\n+  gimple_set_bb (stmt1, NULL);\n \n   /* Allocate gimple stmt2 on the stack.  */\n   gassign *stmt2\n@@ -6901,6 +6934,7 @@ maybe_fold_comparisons_from_match_pd (tree type, enum tree_code code,\n   gimple_assign_set_rhs_code (stmt2, code2);\n   gimple_assign_set_rhs1 (stmt2, op2a);\n   gimple_assign_set_rhs2 (stmt2, op2b);\n+  gimple_set_bb (stmt2, NULL);\n \n   /* Allocate SSA names(lhs1) on the stack.  */\n   tree lhs1 = (tree)XALLOCA (tree_ssa_name);\n@@ -6922,7 +6956,9 @@ maybe_fold_comparisons_from_match_pd (tree type, enum tree_code code,\n   gimple_match_op op (gimple_match_cond::UNCOND, code,\n \t\t      type, gimple_assign_lhs (stmt1),\n \t\t      gimple_assign_lhs (stmt2));\n-  if (op.resimplify (NULL, follow_all_ssa_edges))\n+  fosa_bb = outer_cond_bb;\n+  if (op.resimplify (NULL, (!outer_cond_bb\n+\t\t\t    ? follow_all_ssa_edges : follow_outer_ssa_edges)))\n     {\n       if (gimple_simplified_result_is_gimple_val (&op))\n \t{\n@@ -6959,17 +6995,20 @@ maybe_fold_comparisons_from_match_pd (tree type, enum tree_code code,\n tree\n maybe_fold_and_comparisons (tree type,\n \t\t\t    enum tree_code code1, tree op1a, tree op1b,\n-\t\t\t    enum tree_code code2, tree op2a, tree op2b)\n+\t\t\t    enum tree_code code2, tree op2a, tree op2b,\n+\t\t\t    basic_block outer_cond_bb)\n {\n-  if (tree t = and_comparisons_1 (type, code1, op1a, op1b, code2, op2a, op2b))\n+  if (tree t = and_comparisons_1 (type, code1, op1a, op1b, code2, op2a, op2b,\n+\t\t\t\t  outer_cond_bb))\n     return t;\n \n-  if (tree t = and_comparisons_1 (type, code2, op2a, op2b, code1, op1a, op1b))\n+  if (tree t = and_comparisons_1 (type, code2, op2a, op2b, code1, op1a, op1b,\n+\t\t\t\t  outer_cond_bb))\n     return t;\n \n   if (tree t = maybe_fold_comparisons_from_match_pd (type, BIT_AND_EXPR, code1,\n \t\t\t\t\t\t     op1a, op1b, code2, op2a,\n-\t\t\t\t\t\t     op2b))\n+\t\t\t\t\t\t     op2b, outer_cond_bb))\n     return t;\n \n   return NULL_TREE;\n@@ -6982,7 +7021,8 @@ maybe_fold_and_comparisons (tree type,\n \n static tree\n or_var_with_comparison (tree type, tree var, bool invert,\n-\t\t\tenum tree_code code2, tree op2a, tree op2b)\n+\t\t\tenum tree_code code2, tree op2a, tree op2b,\n+\t\t\tbasic_block outer_cond_bb)\n {\n   tree t;\n   gimple *stmt = SSA_NAME_DEF_STMT (var);\n@@ -6997,9 +7037,10 @@ or_var_with_comparison (tree type, tree var, bool invert,\n   if (invert)\n     t = and_var_with_comparison_1 (type, stmt,\n \t\t\t\t   invert_tree_comparison (code2, false),\n-\t\t\t\t   op2a, op2b);\n+\t\t\t\t   op2a, op2b, outer_cond_bb);\n   else\n-    t = or_var_with_comparison_1 (type, stmt, code2, op2a, op2b);\n+    t = or_var_with_comparison_1 (type, stmt, code2, op2a, op2b,\n+\t\t\t\t  outer_cond_bb);\n   return canonicalize_bool (t, invert);\n }\n \n@@ -7009,7 +7050,8 @@ or_var_with_comparison (tree type, tree var, bool invert,\n \n static tree\n or_var_with_comparison_1 (tree type, gimple *stmt,\n-\t\t\t  enum tree_code code2, tree op2a, tree op2b)\n+\t\t\t  enum tree_code code2, tree op2a, tree op2b,\n+\t\t\t  basic_block outer_cond_bb)\n {\n   tree var = gimple_assign_lhs (stmt);\n   tree true_test_var = NULL_TREE;\n@@ -7042,9 +7084,7 @@ or_var_with_comparison_1 (tree type, gimple *stmt,\n       tree t = or_comparisons_1 (type, innercode,\n \t\t\t\t gimple_assign_rhs1 (stmt),\n \t\t\t\t gimple_assign_rhs2 (stmt),\n-\t\t\t\t code2,\n-\t\t\t\t op2a,\n-\t\t\t\t op2b);\n+\t\t\t\t code2, op2a, op2b, outer_cond_bb);\n       if (t)\n \treturn t;\n     }\n@@ -7076,12 +7116,12 @@ or_var_with_comparison_1 (tree type, gimple *stmt,\n \treturn (is_or\n \t\t? boolean_true_node\n \t\t: or_var_with_comparison (type, inner2, false, code2, op2a,\n-\t\t\t\t\t  op2b));\n+\t\t\t\t\t  op2b, outer_cond_bb));\n       else if (inner2 == false_test_var)\n \treturn (is_or\n \t\t? boolean_true_node\n \t\t: or_var_with_comparison (type, inner1, false, code2, op2a,\n-\t\t\t\t\t  op2b));\n+\t\t\t\t\t  op2b, outer_cond_bb));\n       \n       /* Next, redistribute/reassociate the OR across the inner tests.\n \t Compute the first partial result, (inner1 OR (op2a code op2b))  */\n@@ -7091,7 +7131,8 @@ or_var_with_comparison_1 (tree type, gimple *stmt,\n \t  && (t = maybe_fold_or_comparisons (type, gimple_assign_rhs_code (s),\n \t\t\t\t\t     gimple_assign_rhs1 (s),\n \t\t\t\t\t     gimple_assign_rhs2 (s),\n-\t\t\t\t\t     code2, op2a, op2b)))\n+\t\t\t\t\t     code2, op2a, op2b,\n+\t\t\t\t\t     outer_cond_bb)))\n \t{\n \t  /* Handle the OR case, where we are reassociating:\n \t     (inner1 OR inner2) OR (op2a code2 op2b)\n@@ -7123,7 +7164,8 @@ or_var_with_comparison_1 (tree type, gimple *stmt,\n \t  && (t = maybe_fold_or_comparisons (type, gimple_assign_rhs_code (s),\n \t\t\t\t\t     gimple_assign_rhs1 (s),\n \t\t\t\t\t     gimple_assign_rhs2 (s),\n-\t\t\t\t\t     code2, op2a, op2b)))\n+\t\t\t\t\t     code2, op2a, op2b,\n+\t\t\t\t\t     outer_cond_bb)))\n \t{\n \t  /* Handle the OR case, where we are reassociating:\n \t     (inner1 OR inner2) OR (op2a code2 op2b)\n@@ -7178,7 +7220,8 @@ or_var_with_comparison_1 (tree type, gimple *stmt,\n \n static tree\n or_comparisons_1 (tree type, enum tree_code code1, tree op1a, tree op1b,\n-\t\t  enum tree_code code2, tree op2a, tree op2b)\n+\t\t  enum tree_code code2, tree op2a, tree op2b,\n+\t\t  basic_block outer_cond_bb)\n {\n   tree truth_type = truth_type_for (TREE_TYPE (op1a));\n \n@@ -7222,7 +7265,7 @@ or_comparisons_1 (tree type, enum tree_code code1, tree op1a, tree op1b,\n \tcase GIMPLE_ASSIGN:\n \t  /* Try to simplify by copy-propagating the definition.  */\n \t  return or_var_with_comparison (type, op1a, invert, code2, op2a,\n-\t\t\t\t\t op2b);\n+\t\t\t\t\t op2b, outer_cond_bb);\n \n \tcase GIMPLE_PHI:\n \t  /* If every argument to the PHI produces the same result when\n@@ -7273,7 +7316,7 @@ or_comparisons_1 (tree type, enum tree_code code1, tree op1a, tree op1b,\n \t\t\t\t\t     gimple_bb (stmt)))\n \t\t\treturn NULL_TREE;\n \t\t      temp = or_var_with_comparison (type, arg, invert, code2,\n-\t\t\t\t\t\t     op2a, op2b);\n+\t\t\t\t\t\t     op2a, op2b, outer_cond_bb);\n \t\t      if (!temp)\n \t\t\treturn NULL_TREE;\n \t\t      else if (!result)\n@@ -7304,17 +7347,20 @@ or_comparisons_1 (tree type, enum tree_code code1, tree op1a, tree op1b,\n tree\n maybe_fold_or_comparisons (tree type,\n \t\t\t   enum tree_code code1, tree op1a, tree op1b,\n-\t\t\t   enum tree_code code2, tree op2a, tree op2b)\n+\t\t\t   enum tree_code code2, tree op2a, tree op2b,\n+\t\t\t   basic_block outer_cond_bb)\n {\n-  if (tree t = or_comparisons_1 (type, code1, op1a, op1b, code2, op2a, op2b))\n+  if (tree t = or_comparisons_1 (type, code1, op1a, op1b, code2, op2a, op2b,\n+\t\t\t\t outer_cond_bb))\n     return t;\n \n-  if (tree t = or_comparisons_1 (type, code2, op2a, op2b, code1, op1a, op1b))\n+  if (tree t = or_comparisons_1 (type, code2, op2a, op2b, code1, op1a, op1b,\n+\t\t\t\t outer_cond_bb))\n     return t;\n \n   if (tree t = maybe_fold_comparisons_from_match_pd (type, BIT_IOR_EXPR, code1,\n \t\t\t\t\t\t     op1a, op1b, code2, op2a,\n-\t\t\t\t\t\t     op2b))\n+\t\t\t\t\t\t     op2b, outer_cond_bb))\n     return t;\n \n   return NULL_TREE;"}, {"sha": "3a0ef54394e775d8e497568601ade36ece5c6196", "filename": "gcc/gimple-fold.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8d9e4497032dd295aac9414042163f92250b77/gcc%2Fgimple-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8d9e4497032dd295aac9414042163f92250b77/gcc%2Fgimple-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.h?ref=fc8d9e4497032dd295aac9414042163f92250b77", "patch": "@@ -33,9 +33,11 @@ extern bool fold_stmt (gimple_stmt_iterator *);\n extern bool fold_stmt (gimple_stmt_iterator *, tree (*) (tree));\n extern bool fold_stmt_inplace (gimple_stmt_iterator *);\n extern tree maybe_fold_and_comparisons (tree, enum tree_code, tree, tree,\n-\t\t\t\t\tenum tree_code, tree, tree);\n+\t\t\t\t\tenum tree_code, tree, tree,\n+\t\t\t\t\tbasic_block = nullptr);\n extern tree maybe_fold_or_comparisons (tree, enum tree_code, tree, tree,\n-\t\t\t\t       enum tree_code, tree, tree);\n+\t\t\t\t       enum tree_code, tree, tree,\n+\t\t\t\t       basic_block = nullptr);\n extern bool clear_padding_type_may_have_padding_p (tree);\n extern void clear_type_padding_in_mask (tree, unsigned char *);\n extern bool optimize_atomic_compare_exchange_p (gimple *);"}, {"sha": "b2d16abc9d9c5af893f2b1b4f643d45b455d5c6b", "filename": "gcc/testsuite/g++.dg/torture/pr105142.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8d9e4497032dd295aac9414042163f92250b77/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr105142.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8d9e4497032dd295aac9414042163f92250b77/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr105142.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr105142.C?ref=fc8d9e4497032dd295aac9414042163f92250b77", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do run { target lp64 } }\n+\n+long int c = 3623214276426624192L;\n+unsigned short b;\n+char a = 42;\n+const long &min(const long &x, const long &y) { return x < y ? x : y; }\n+__attribute__((noipa)) void test() { b = min(a, min(a, c) + 5713568809962283044L); }\n+int main() { test(); if (b != 42) __builtin_abort(); }"}, {"sha": "ce9bbebf948032d1b8cdaebff2e69ad0e960f173", "filename": "gcc/tree-ssa-ifcombine.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc8d9e4497032dd295aac9414042163f92250b77/gcc%2Ftree-ssa-ifcombine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc8d9e4497032dd295aac9414042163f92250b77/gcc%2Ftree-ssa-ifcombine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ifcombine.cc?ref=fc8d9e4497032dd295aac9414042163f92250b77", "patch": "@@ -561,7 +561,8 @@ ifcombine_ifandif (basic_block inner_cond_bb, bool inner_inv,\n \t\t\t\t\t    gimple_cond_rhs (inner_cond),\n \t\t\t\t\t    outer_cond_code,\n \t\t\t\t\t    gimple_cond_lhs (outer_cond),\n-\t\t\t\t\t    gimple_cond_rhs (outer_cond))))\n+\t\t\t\t\t    gimple_cond_rhs (outer_cond),\n+\t\t\t\t\t    gimple_bb (outer_cond))))\n \t{\n \t  tree t1, t2;\n \t  gimple_stmt_iterator gsi;"}]}