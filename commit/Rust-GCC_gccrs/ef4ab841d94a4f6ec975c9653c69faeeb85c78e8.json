{"sha": "ef4ab841d94a4f6ec975c9653c69faeeb85c78e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY0YWI4NDFkOTRhNGY2ZWM5NzVjOTY1M2M2OWZhZWViODVjNzhlOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-09-11T09:14:49Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-09-11T09:14:49Z"}, "message": "Fix ICE on nested packed variant record type\n\nThis is a regression present on the mainline and 10 branch: the compiler\naborts on code accessing a component of a packed record type whose type\nis a packed discriminated record type with variant part.\n\ngcc/ada/ChangeLog:\n\t* gcc-interface/utils.c (type_has_variable_size): New function.\n\t(create_field_decl): In the packed case, also force byte alignment\n\twhen the type of the field has variable size.\n\ngcc/testsuite/ChangeLog:\n\t* gnat.dg/pack27.adb: New test.\n\t* gnat.dg/pack27_pkg.ads: New helper.", "tree": {"sha": "80865fa17b4278a87fcb9baf63c29ddc36e2b443", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80865fa17b4278a87fcb9baf63c29ddc36e2b443"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef4ab841d94a4f6ec975c9653c69faeeb85c78e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef4ab841d94a4f6ec975c9653c69faeeb85c78e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef4ab841d94a4f6ec975c9653c69faeeb85c78e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef4ab841d94a4f6ec975c9653c69faeeb85c78e8/comments", "author": null, "committer": null, "parents": [{"sha": "b5ffd55a61df01d226f3fa4260f108bda8565c16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5ffd55a61df01d226f3fa4260f108bda8565c16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5ffd55a61df01d226f3fa4260f108bda8565c16"}], "stats": {"total": 80, "additions": 75, "deletions": 5}, "files": [{"sha": "3065fcb6260d26fb489eaf11fe15cd9f960f5e6e", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4ab841d94a4f6ec975c9653c69faeeb85c78e8/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4ab841d94a4f6ec975c9653c69faeeb85c78e8/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=ef4ab841d94a4f6ec975c9653c69faeeb85c78e8", "patch": "@@ -2905,6 +2905,31 @@ aggregate_type_contains_array_p (tree type, bool self_referential)\n     }\n }\n \n+/* Return true if TYPE is a type with variable size or a padding type with a\n+   field of variable size or a record that has a field with such a type.  */\n+\n+static bool\n+type_has_variable_size (tree type)\n+{\n+  tree field;\n+\n+  if (!TREE_CONSTANT (TYPE_SIZE (type)))\n+    return true;\n+\n+  if (TYPE_IS_PADDING_P (type)\n+      && !TREE_CONSTANT (DECL_SIZE (TYPE_FIELDS (type))))\n+    return true;\n+\n+  if (!RECORD_OR_UNION_TYPE_P (type))\n+    return false;\n+\n+  for (field = TYPE_FIELDS (type); field; field = DECL_CHAIN (field))\n+    if (type_has_variable_size (TREE_TYPE (field)))\n+      return true;\n+\n+  return false;\n+}\n+\n /* Return a FIELD_DECL node.  NAME is the field's name, TYPE is its type and\n    RECORD_TYPE is the type of the enclosing record.  If SIZE is nonzero, it\n    is the specified size of the field.  If POS is nonzero, it is the bit\n@@ -2974,13 +2999,15 @@ create_field_decl (tree name, tree type, tree record_type, tree size, tree pos,\n \n   DECL_PACKED (field_decl) = pos ? DECL_BIT_FIELD (field_decl) : packed;\n \n-  /* If FIELD_TYPE is BLKmode, we must ensure this is aligned to at least a\n-     byte boundary since GCC cannot handle less-aligned BLKmode bitfields.\n+  /* If FIELD_TYPE has BLKmode, we must ensure this is aligned to at least\n+     a byte boundary since GCC cannot handle less aligned BLKmode bitfields.\n+     Likewise if it has a variable size and no specified position because\n+     variable-sized objects need to be aligned to at least a byte boundary.\n      Likewise for an aggregate without specified position that contains an\n-     array, because in this case slices of variable length of this array\n-     must be handled by GCC and variable-sized objects need to be aligned\n-     to at least a byte boundary.  */\n+     array because, in this case, slices of variable length of this array\n+     must be handled by GCC and have variable size.  */\n   if (packed && (TYPE_MODE (type) == BLKmode\n+\t\t || (!pos && type_has_variable_size (type))\n \t\t || (!pos\n \t\t     && AGGREGATE_TYPE_P (type)\n \t\t     && aggregate_type_contains_array_p (type, false))))"}, {"sha": "7aff96a2416d4adb9cf8a92f7bf9a0f5853f929d", "filename": "gcc/testsuite/gnat.dg/pack27.adb", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4ab841d94a4f6ec975c9653c69faeeb85c78e8/gcc%2Ftestsuite%2Fgnat.dg%2Fpack27.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4ab841d94a4f6ec975c9653c69faeeb85c78e8/gcc%2Ftestsuite%2Fgnat.dg%2Fpack27.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpack27.adb?ref=ef4ab841d94a4f6ec975c9653c69faeeb85c78e8", "patch": "@@ -0,0 +1,10 @@\n+-- { dg-do compile }\n+\n+with Pack27_Pkg; use Pack27_Pkg;\n+\n+procedure Pack27 is\n+  R1 : Rec1;\n+  R4 : Rec4;\n+begin\n+  R4.R.R.R := R1;\n+end;"}, {"sha": "5d2b68cd00323b9d9ff66e4975e896db78ce62aa", "filename": "gcc/testsuite/gnat.dg/pack27_pkg.ads", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4ab841d94a4f6ec975c9653c69faeeb85c78e8/gcc%2Ftestsuite%2Fgnat.dg%2Fpack27_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4ab841d94a4f6ec975c9653c69faeeb85c78e8/gcc%2Ftestsuite%2Fgnat.dg%2Fpack27_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpack27_pkg.ads?ref=ef4ab841d94a4f6ec975c9653c69faeeb85c78e8", "patch": "@@ -0,0 +1,33 @@\n+pragma No_Component_Reordering;\n+\n+package Pack27_Pkg is\n+\n+  type Enum is (One, Two, Three);\n+\n+  type Rec1 (D : Enum := One) is record\n+    case D is\n+      when One => null;\n+      when Two => null;\n+      when Three => C : Character;\n+    end case;\n+  end record;\n+  pragma Pack (Rec1);\n+\n+  type Rec2 is record\n+    R : Rec1;\n+  end record;\n+  pragma Pack (Rec2);\n+\n+  type Rec3 is record\n+    B : boolean;\n+    R : Rec2;\n+  end record;\n+  pragma Pack (Rec3);\n+\n+  type Rec4 is record\n+    B : Boolean;\n+    R : Rec3;\n+  end record;\n+  pragma Pack (Rec4);\n+\n+end Pack27_Pkg;"}]}