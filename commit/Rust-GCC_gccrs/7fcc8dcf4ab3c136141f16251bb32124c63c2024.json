{"sha": "7fcc8dcf4ab3c136141f16251bb32124c63c2024", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZjYzhkY2Y0YWIzYzEzNjE0MWYxNjI1MWJiMzIxMjRjNjNjMjAyNA==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2007-02-03T21:18:18Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2007-02-03T21:18:18Z"}, "message": "pa.md (addvdi3, [...]): New ftrapv insns and expanders.\n\n\t* pa.md (addvdi3, addvsi3, subvdi3, subvsi3, negvdi2, negvsi2): New\n\tftrapv insns and expanders.\n\t(subdi3): Change define_expand operand 1 to arith11_operand, and\n\toperand 2 to reg_or_0_operand.  Change constraints of 64-bit insn\n\tpattern to handle reg_or_0 operands.  Revise 32-bit insn pattern to\n\thandle 11-bit constants and reg_or_0 operands in operands 1 and 2,\n\trespectively.\n\nFrom-SVN: r121552", "tree": {"sha": "3f433251a7d823e2aac23e2f85ecd9eab895f736", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f433251a7d823e2aac23e2f85ecd9eab895f736"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fcc8dcf4ab3c136141f16251bb32124c63c2024", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fcc8dcf4ab3c136141f16251bb32124c63c2024", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fcc8dcf4ab3c136141f16251bb32124c63c2024", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fcc8dcf4ab3c136141f16251bb32124c63c2024/comments", "author": null, "committer": null, "parents": [{"sha": "2e3e8cea385f28adf4c3f3ac4134f73595c4a8e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e3e8cea385f28adf4c3f3ac4134f73595c4a8e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e3e8cea385f28adf4c3f3ac4134f73595c4a8e2"}], "stats": {"total": 235, "additions": 223, "deletions": 12}, "files": [{"sha": "271facbe78e6977ec9da47ce95316b7d724c2ca6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcc8dcf4ab3c136141f16251bb32124c63c2024/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcc8dcf4ab3c136141f16251bb32124c63c2024/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7fcc8dcf4ab3c136141f16251bb32124c63c2024", "patch": "@@ -1,5 +1,13 @@\n 2007-02-03  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n+\t* pa.md (addvdi3, addvsi3, subvdi3, subvsi3, negvdi2, negvsi2): New\n+\tftrapv insns and expanders.\n+\t(subdi3): Change define_expand operand 1 to arith11_operand, and\n+\toperand 2 to reg_or_0_operand.  Change constraints of 64-bit insn\n+\tpattern to handle reg_or_0 operands.  Revise 32-bit insn pattern to\n+\thandle 11-bit constants and reg_or_0 operands in operands 1 and 2,\n+\trespectively.\n+\n \tPR middle-end/30174\n \t* varasm.c (notice_global_symbol): Treat global objects as weak when\n \tflag_shlib is true."}, {"sha": "0adfe3f78fe312d2d43e88ce64272ce299547b1e", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 215, "deletions": 12, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcc8dcf4ab3c136141f16251bb32124c63c2024/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcc8dcf4ab3c136141f16251bb32124c63c2024/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=7fcc8dcf4ab3c136141f16251bb32124c63c2024", "patch": "@@ -5349,6 +5349,59 @@\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"4\")])\n \n+(define_expand \"addvdi3\"\n+  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t\t   (plus:DI (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n+\t\t\t    (match_operand:DI 2 \"arith11_operand\" \"\")))\n+\t      (trap_if (ne (plus:TI (sign_extend:TI (match_dup 1))\n+\t\t\t\t    (sign_extend:TI (match_dup 2)))\n+\t\t\t   (sign_extend:TI (plus:DI (match_dup 1)\n+\t\t\t\t\t\t    (match_dup 2))))\n+\t\t       (const_int 0))])]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(plus:DI (match_operand:DI 1 \"reg_or_0_operand\" \"%rM,rM\")\n+\t\t (match_operand:DI 2 \"arith11_operand\" \"r,I\")))\n+   (trap_if (ne (plus:TI (sign_extend:TI (match_dup 1))\n+\t\t\t (sign_extend:TI (match_dup 2)))\n+\t\t(sign_extend:TI (plus:DI (match_dup 1)\n+\t\t\t\t\t (match_dup 2))))\n+\t    (const_int 0))]\n+  \"TARGET_64BIT\"\n+  \"@\n+  add,tsv,* %2,%1,%0\n+  addi,tsv,* %2,%1,%0\"\n+  [(set_attr \"type\" \"binary,binary\")\n+   (set_attr \"length\" \"4,4\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(plus:DI (match_operand:DI 1 \"reg_or_0_operand\" \"%rM\")\n+\t\t (match_operand:DI 2 \"arith11_operand\" \"rI\")))\n+   (trap_if (ne (plus:TI (sign_extend:TI (match_dup 1))\n+\t\t\t (sign_extend:TI (match_dup 2)))\n+\t\t(sign_extend:TI (plus:DI (match_dup 1)\n+\t\t\t\t\t (match_dup 2))))\n+\t    (const_int 0))]\n+  \"!TARGET_64BIT\"\n+  \"*\n+{\n+  if (GET_CODE (operands[2]) == CONST_INT)\n+    {\n+      if (INTVAL (operands[2]) >= 0)\n+\treturn \\\"addi %2,%R1,%R0\\;{addco|add,c,tsv} %1,%%r0,%0\\\";\n+      else\n+\treturn \\\"addi %2,%R1,%R0\\;{subbo|sub,b,tsv} %1,%%r0,%0\\\";\n+    }\n+  else\n+    return \\\"add %R2,%R1,%R0\\;{addco|add,c,tsv} %2,%1,%0\\\";\n+}\"\n+  [(set_attr \"type\" \"binary\")\n+   (set_attr \"length\" \"8\")])\n+\n ;; define_splits to optimize cases of adding a constant integer\n ;; to a register when the constant does not fit in 14 bits.  */\n (define_split\n@@ -5426,26 +5479,33 @@\n    (set_attr \"pa_combine_type\" \"addmove\")\n    (set_attr \"length\" \"4,4\")])\n \n+(define_insn \"addvsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(plus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"%rM,rM\")\n+\t\t (match_operand:SI 2 \"arith11_operand\" \"r,I\")))\n+   (trap_if (ne (plus:DI (sign_extend:DI (match_dup 1))\n+\t\t\t (sign_extend:DI (match_dup 2)))\n+\t\t(sign_extend:DI (plus:SI (match_dup 1)\n+\t\t\t\t\t (match_dup 2))))\n+\t    (const_int 0))]\n+  \"\"\n+  \"@\n+  {addo|add,tsv} %2,%1,%0\n+  {addio|addi,tsv} %2,%1,%0\"\n+  [(set_attr \"type\" \"binary,binary\")\n+   (set_attr \"length\" \"4,4\")])\n+\n (define_expand \"subdi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(minus:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t  (match_operand:DI 2 \"register_operand\" \"\")))]\n+\t(minus:DI (match_operand:DI 1 \"arith11_operand\" \"\")\n+\t\t  (match_operand:DI 2 \"reg_or_0_operand\" \"\")))]\n   \"\"\n   \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(minus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t  (match_operand:DI 2 \"register_operand\" \"r\")))]\n-  \"!TARGET_64BIT\"\n-  \"sub %R1,%R2,%R0\\;{subb|sub,b} %1,%2,%0\"\n-  [(set_attr \"type\" \"binary\")\n-  (set_attr \"length\" \"8\")])\n-\n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r,!q\")\n \t(minus:DI (match_operand:DI 1 \"arith11_operand\" \"r,I,!U\")\n-\t\t  (match_operand:DI 2 \"register_operand\" \"r,r,!r\")))]\n+\t\t  (match_operand:DI 2 \"reg_or_0_operand\" \"rM,rM,!rM\")))]\n   \"TARGET_64BIT\"\n   \"@\n    sub %1,%2,%0\n@@ -5454,6 +5514,91 @@\n   [(set_attr \"type\" \"binary,binary,move\")\n   (set_attr \"length\" \"4,4,4\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,&r\")\n+\t(minus:DI (match_operand:DI 1 \"arith11_operand\" \"r,I\")\n+\t\t  (match_operand:DI 2 \"reg_or_0_operand\" \"rM,rM\")))]\n+  \"!TARGET_64BIT\"\n+  \"*\n+{\n+  if (GET_CODE (operands[1]) == CONST_INT)\n+    {\n+      if (INTVAL (operands[1]) >= 0)\n+\treturn \\\"subi %1,%R2,%R0\\;{subb|sub,b} %%r0,%2,%0\\\";\n+      else\n+\treturn \\\"ldi -1,%0\\;subi %1,%R2,%R0\\;{subb|sub,b} %0,%2,%0\\\";\n+    }\n+  else\n+    return \\\"sub %R1,%R2,%R0\\;{subb|sub,b} %1,%2,%0\\\";\n+}\"\n+  [(set_attr \"type\" \"binary\")\n+   (set (attr \"length\")\n+\t(if_then_else (eq_attr \"alternative\" \"0\")\n+\t  (const_int 8)\n+\t  (if_then_else (ge (symbol_ref \"INTVAL (operands[1])\")\n+\t\t\t    (const_int 0))\n+\t    (const_int 8)\n+\t    (const_int 12))))])\n+\n+(define_expand \"subvdi3\"\n+  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t\t   (minus:DI (match_operand:DI 1 \"arith11_operand\" \"\")\n+\t\t\t     (match_operand:DI 2 \"reg_or_0_operand\" \"\")))\n+\t      (trap_if (ne (minus:TI (sign_extend:TI (match_dup 1))\n+\t\t\t\t     (sign_extend:TI (match_dup 2)))\n+\t\t\t   (sign_extend:TI (minus:DI (match_dup 1)\n+\t\t\t\t\t\t     (match_dup 2))))\n+\t\t       (const_int 0))])]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(minus:DI (match_operand:DI 1 \"arith11_operand\" \"r,I\")\n+\t\t  (match_operand:DI 2 \"reg_or_0_operand\" \"rM,rM\")))\n+   (trap_if (ne (minus:TI (sign_extend:TI (match_dup 1))\n+\t\t\t  (sign_extend:TI (match_dup 2)))\n+\t\t(sign_extend:TI (minus:DI (match_dup 1)\n+\t\t\t\t\t  (match_dup 2))))\n+\t    (const_int 0))]\n+  \"TARGET_64BIT\"\n+  \"@\n+  {subo|sub,tsv} %1,%2,%0\n+  {subio|subi,tsv} %1,%2,%0\"\n+  [(set_attr \"type\" \"binary,binary\")\n+   (set_attr \"length\" \"4,4\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,&r\")\n+\t(minus:DI (match_operand:DI 1 \"arith11_operand\" \"r,I\")\n+\t\t  (match_operand:DI 2 \"reg_or_0_operand\" \"rM,rM\")))\n+   (trap_if (ne (minus:TI (sign_extend:TI (match_dup 1))\n+\t\t\t  (sign_extend:TI (match_dup 2)))\n+\t\t(sign_extend:TI (minus:DI (match_dup 1)\n+\t\t\t\t\t  (match_dup 2))))\n+\t    (const_int 0))]\n+  \"!TARGET_64BIT\"\n+  \"*\n+{\n+  if (GET_CODE (operands[1]) == CONST_INT)\n+    {\n+      if (INTVAL (operands[1]) >= 0)\n+\treturn \\\"subi %1,%R2,%R0\\;{subbo|sub,b,tsv} %%r0,%2,%0\\\";\n+      else\n+\treturn \\\"ldi -1,%0\\;subi %1,%R2,%R0\\;{subbo|sub,b,tsv} %0,%2,%0\\\";\n+    }\n+  else\n+    return \\\"sub %R1,%R2,%R0\\;{subbo|sub,b,tsv} %1,%2,%0\\\";\n+}\"\n+  [(set_attr \"type\" \"binary,binary\")\n+   (set (attr \"length\")\n+\t(if_then_else (eq_attr \"alternative\" \"0\")\n+\t  (const_int 8)\n+\t  (if_then_else (ge (symbol_ref \"INTVAL (operands[1])\")\n+\t\t\t    (const_int 0))\n+\t    (const_int 8)\n+\t    (const_int 12))))])\n+\n (define_expand \"subsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(minus:SI (match_operand:SI 1 \"arith11_operand\" \"\")\n@@ -5484,6 +5629,22 @@\n   [(set_attr \"type\" \"binary,binary,move\")\n    (set_attr \"length\" \"4,4,4\")])\n \n+(define_insn \"subvsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(minus:SI (match_operand:SI 1 \"arith11_operand\" \"rM,I\")\n+\t\t  (match_operand:SI 2 \"reg_or_0_operand\" \"rM,rM\")))\n+   (trap_if (ne (minus:DI (sign_extend:DI (match_dup 1))\n+\t\t\t  (sign_extend:DI (match_dup 2)))\n+\t\t(sign_extend:DI (minus:SI (match_dup 1)\n+\t\t\t\t\t  (match_dup 2))))\n+\t    (const_int 0))]\n+  \"\"\n+  \"@\n+  {subo|sub,tsv} %1,%2,%0\n+  {subio|subi,tsv} %1,%2,%0\"\n+  [(set_attr \"type\" \"binary,binary\")\n+   (set_attr \"length\" \"4,4\")])\n+\n ;; Clobbering a \"register_operand\" instead of a match_scratch\n ;; in operand3 of millicode calls avoids spilling %r1 and\n ;; produces better code.\n@@ -6031,6 +6192,37 @@\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"4\")])\n \n+(define_expand \"negvdi2\"\n+  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t\t   (neg:DI (match_operand:DI 1 \"register_operand\" \"\")))\n+\t      (trap_if (ne (neg:TI (sign_extend:TI (match_dup 1)))\n+\t\t\t\t   (sign_extend:TI (neg:DI (match_dup 1))))\n+\t\t       (const_int 0))])]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(neg:DI (match_operand:DI 1 \"register_operand\" \"r\")))\n+   (trap_if (ne (neg:TI (sign_extend:TI (match_dup 1)))\n+\t\t(sign_extend:TI (neg:DI (match_dup 1))))\n+\t    (const_int 0))]\n+  \"!TARGET_64BIT\"\n+  \"sub %%r0,%R1,%R0\\;{subbo|sub,b,tsv} %%r0,%1,%0\"\n+  [(set_attr \"type\" \"unary\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(neg:DI (match_operand:DI 1 \"register_operand\" \"r\")))\n+   (trap_if (ne (neg:TI (sign_extend:TI (match_dup 1)))\n+\t\t(sign_extend:TI (neg:DI (match_dup 1))))\n+\t    (const_int 0))]\n+  \"TARGET_64BIT\"\n+  \"sub,tsv %%r0,%1,%0\"\n+  [(set_attr \"type\" \"unary\")\n+   (set_attr \"length\" \"4\")])\n+\n (define_insn \"negsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n@@ -6039,6 +6231,17 @@\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"4\")])\n \n+(define_insn \"negvsi2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (neg:SI (match_operand:SI 1 \"register_operand\" \"r\")))\n+   (trap_if (ne (neg:DI (sign_extend:DI (match_dup 1)))\n+\t\t(sign_extend:DI (neg:SI (match_dup 1))))\n+\t    (const_int 0))]\n+   \"\"\n+   \"{subo|sub,tsv} %%r0,%1,%0\"\n+  [(set_attr \"type\" \"unary\")\n+   (set_attr \"length\" \"4\")])\n+\n (define_expand \"one_cmpldi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(not:DI (match_operand:DI 1 \"register_operand\" \"\")))]"}]}