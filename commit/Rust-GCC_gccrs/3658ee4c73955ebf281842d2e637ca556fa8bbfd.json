{"sha": "3658ee4c73955ebf281842d2e637ca556fa8bbfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY1OGVlNGM3Mzk1NWViZjI4MTg0MmQyZTYzN2NhNTU2ZmE4YmJmZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-07-13T09:17:35Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-07-13T09:17:35Z"}, "message": "vect: Simplify epilogue reduction code\n\nvect_create_epilog_for_reduction only handles two cases: single-loop\nreductions and double reductions.  \u201cnested cycles\u201d (i.e. reductions\nin the inner loop when vectorising an outer loop) are handled elsewhere\nand don't need a vector->scalar reduction.\n\nThe function had variables called nested_in_vect_loop and double_reduc\nand asserted that nested_in_vect_loop implied double_reduc, but it\nstill had code to handle nested_in_vect_loop && !double_reduc.\nThis patch removes that and uses double_reduc everywhere.\n\ngcc/\n\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Remove\n\tnested_in_vect_loop and use double_reduc everywhere.  Remove dead\n\tassignment to \"loop\".", "tree": {"sha": "5e7527585057e982f664e36cfdda783ae6e1a04a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e7527585057e982f664e36cfdda783ae6e1a04a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3658ee4c73955ebf281842d2e637ca556fa8bbfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3658ee4c73955ebf281842d2e637ca556fa8bbfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3658ee4c73955ebf281842d2e637ca556fa8bbfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3658ee4c73955ebf281842d2e637ca556fa8bbfd/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ae469e8c0ccb93a26bb1e60db6418d6bcced15e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ae469e8c0ccb93a26bb1e60db6418d6bcced15e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ae469e8c0ccb93a26bb1e60db6418d6bcced15e"}], "stats": {"total": 30, "additions": 4, "deletions": 26}, "files": [{"sha": "7c3e3352b43628a2cbe36021f02bc7df829354a8", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 4, "deletions": 26, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3658ee4c73955ebf281842d2e637ca556fa8bbfd/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3658ee4c73955ebf281842d2e637ca556fa8bbfd/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=3658ee4c73955ebf281842d2e637ca556fa8bbfd", "patch": "@@ -5005,7 +5005,6 @@ vect_create_epilog_for_reduction (loop_vec_info loop_vinfo,\n   imm_use_iterator imm_iter, phi_imm_iter;\n   use_operand_p use_p, phi_use_p;\n   gimple *use_stmt;\n-  bool nested_in_vect_loop = false;\n   auto_vec<gimple *> new_phis;\n   int j, i;\n   auto_vec<tree> scalar_results;\n@@ -5023,10 +5022,8 @@ vect_create_epilog_for_reduction (loop_vec_info loop_vinfo,\n     {\n       outer_loop = loop;\n       loop = loop->inner;\n-      nested_in_vect_loop = true;\n-      gcc_assert (!slp_node);\n+      gcc_assert (!slp_node && double_reduc);\n     }\n-  gcc_assert (!nested_in_vect_loop || double_reduc);\n \n   vectype = STMT_VINFO_REDUC_VECTYPE (reduc_info);\n   gcc_assert (vectype);\n@@ -5049,8 +5046,6 @@ vect_create_epilog_for_reduction (loop_vec_info loop_vinfo,\n \tinduc_val = STMT_VINFO_VEC_INDUC_COND_INITIAL_VAL (reduc_info);\n       else if (double_reduc)\n \t;\n-      else if (nested_in_vect_loop)\n-\t;\n       else\n \tadjustment_def = STMT_VINFO_REDUC_EPILOGUE_ADJUSTMENT (reduc_info);\n     }\n@@ -5923,7 +5918,7 @@ vect_create_epilog_for_reduction (loop_vec_info loop_vinfo,\n     {\n       gcc_assert (!slp_reduc);\n       gimple_seq stmts = NULL;\n-      if (nested_in_vect_loop)\n+      if (double_reduc)\n \t{\n           new_phi = new_phis[0];\n \t  gcc_assert (VECTOR_TYPE_P (TREE_TYPE (adjustment_def)));\n@@ -5942,21 +5937,12 @@ vect_create_epilog_for_reduction (loop_vec_info loop_vinfo,\n \n       epilog_stmt = gimple_seq_last_stmt (stmts);\n       gsi_insert_seq_before (&exit_gsi, stmts, GSI_SAME_STMT);\n-      if (nested_in_vect_loop)\n-        {\n-          if (!double_reduc)\n-            scalar_results.quick_push (new_temp);\n-          else\n-            scalar_results[0] = new_temp;\n-        }\n-      else\n-        scalar_results[0] = new_temp;\n-\n+      scalar_results[0] = new_temp;\n       new_phis[0] = epilog_stmt;\n     }\n \n   if (double_reduc)\n-    loop = loop->inner;\n+    loop = outer_loop;\n \n   /* 2.6  Handle the loop-exit phis.  Replace the uses of scalar loop-exit\n           phis with new adjusted scalar results, i.e., replace use <s_out0>\n@@ -6017,14 +6003,6 @@ vect_create_epilog_for_reduction (loop_vec_info loop_vinfo,\n \t  scalar_dest = gimple_assign_lhs (scalar_stmt_info->stmt);\n         }\n \n-      if (nested_in_vect_loop)\n-        {\n-          if (double_reduc)\n-            loop = outer_loop;\n-          else\n-\t    gcc_unreachable ();\n-        }\n-\n       phis.create (3);\n       /* Find the loop-closed-use at the loop exit of the original scalar\n          result.  (The reduction result is expected to have two immediate uses,"}]}