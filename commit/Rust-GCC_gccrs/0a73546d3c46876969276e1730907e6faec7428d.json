{"sha": "0a73546d3c46876969276e1730907e6faec7428d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE3MzU0NmQzYzQ2ODc2OTY5Mjc2ZTE3MzA5MDdlNmZhZWM3NDI4ZA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2013-12-14T20:07:52Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2013-12-14T20:07:52Z"}, "message": "More overflow-negate-* testing.\n\nFrom-SVN: r205992", "tree": {"sha": "d57e8392d1b7dfbfe7299758e9d8fac7435d9847", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d57e8392d1b7dfbfe7299758e9d8fac7435d9847"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a73546d3c46876969276e1730907e6faec7428d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a73546d3c46876969276e1730907e6faec7428d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a73546d3c46876969276e1730907e6faec7428d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a73546d3c46876969276e1730907e6faec7428d/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e57872ee8ed5a74c52a208355a2585e8670c5f5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e57872ee8ed5a74c52a208355a2585e8670c5f5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e57872ee8ed5a74c52a208355a2585e8670c5f5a"}], "stats": {"total": 76, "additions": 73, "deletions": 3}, "files": [{"sha": "d9106ea4212cf1e0d3c56db77a3c1bbf8b185bf3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a73546d3c46876969276e1730907e6faec7428d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a73546d3c46876969276e1730907e6faec7428d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0a73546d3c46876969276e1730907e6faec7428d", "patch": "@@ -1,3 +1,9 @@\n+2013-12-14  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-c++-common/ubsan/overflow-negate-1.c: Add more testing.  Don't\n+\trequire int128 target.\n+\t* c-c++-common/ubsan/overflow-negate-2.c: New test.\n+\n 2013-12-14  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/59502"}, {"sha": "2bdec61cba442e5d625fe7ef3e32d8ad17bdd872", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-negate-1.c", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a73546d3c46876969276e1730907e6faec7428d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-negate-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a73546d3c46876969276e1730907e6faec7428d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-negate-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-negate-1.c?ref=0a73546d3c46876969276e1730907e6faec7428d", "patch": "@@ -1,14 +1,39 @@\n-/* { dg-do run { target int128 } } */\n+/* { dg-do run } */\n /* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable\" } */\n /* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */\n \n #define INT_MIN (-__INT_MAX__ - 1)\n+#define LONG_MIN (-__LONG_MAX__ - 1L)\n+#define LLONG_MIN (-__LONG_LONG_MAX__ - 1LL)\n \n int\n main (void)\n {\n-  int j = INT_MIN;\n-  return -j;\n+  int e = 1, f = -1;\n+  volatile int i = INT_MIN;\n+  volatile int i2 = i & (((((((-i) + 1) - 1) + 1) - 1) + 1) - 1);\n+  i2 = -(i + e + f);\n+  i = -i;\n+\n+  volatile long int li = LONG_MIN;\n+  volatile long int li2 = li & (((((((-li) + 1) - 1) + 1) - 1) + 1) - 1);\n+  li2 = -(li + e + f);\n+  li = -li;\n+\n+  volatile long long int lli = LLONG_MIN;\n+  volatile long long int lli2 = lli & (((((((-lli) + 1) - 1) + 1) - 1) + 1) - 1);\n+  lli2 = -(lli + e + f);\n+  lli = -lli;\n+\n+  return 0;\n }\n \n /* { dg-output \"negation of -2147483648 cannot be represented in type 'int'; cast to an unsigned type to negate this value to itself(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*negation of -2147483648 cannot be represented in type 'int'; cast to an unsigned type to negate this value to itself(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*negation of -2147483648 cannot be represented in type 'int'; cast to an unsigned type to negate this value to itself(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*negation of -\\[^\\n\\r]* cannot be represented in type 'long int'; cast to an unsigned type to negate this value to itself(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*negation of -\\[^\\n\\r]* cannot be represented in type 'long int'; cast to an unsigned type to negate this value to itself(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*negation of -\\[^\\n\\r]* cannot be represented in type 'long int'; cast to an unsigned type to negate this value to itself(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*negation of -9223372036854775808 cannot be represented in type 'long long int'; cast to an unsigned type to negate this value to itself(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*negation of -9223372036854775808 cannot be represented in type 'long long int'; cast to an unsigned type to negate this value to itself(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*negation of -9223372036854775808 cannot be represented in type 'long long int'; cast to an unsigned type to negate this value to itself(\\n|\\r\\n|\\r)\" } */"}, {"sha": "9ff35f86713c7f6cc85331d0c05ac7526ba57800", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-negate-2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a73546d3c46876969276e1730907e6faec7428d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-negate-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a73546d3c46876969276e1730907e6faec7428d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-negate-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-negate-2.c?ref=0a73546d3c46876969276e1730907e6faec7428d", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */\n+\n+#define SCHAR_MIN (-__SCHAR_MAX__ - 1)\n+#define SHRT_MIN (-__SHRT_MAX__ - 1)\n+#define INT_MIN (-__INT_MAX__ - 1)\n+#define LONG_MIN (-__LONG_MAX__ - 1L)\n+#define LLONG_MIN (-__LONG_LONG_MAX__ - 1LL)\n+\n+#define CHECK(A, B) ({ if ((A) != (B)) __builtin_abort (); })\n+\n+int\n+main (void)\n+{\n+  volatile char c = -SCHAR_MIN;\n+  CHECK (c, -128);\n+\n+  volatile short s = -SHRT_MIN;\n+  CHECK (s, -32768);\n+\n+  volatile int i = INT_MIN;\n+  i = -(unsigned) i;\n+  CHECK (i, -0x80000000);\n+\n+  volatile long int li = LONG_MIN;\n+  li = -(unsigned long) li;\n+#if __LONG_MAX__ == 2147483647L\n+  CHECK (li, -0x80000000L);\n+#elif __LONG_MAX__ == 9223372036854775807L\n+  CHECK (li, -0x8000000000000000L);\n+#endif\n+\n+  volatile long long lli = LLONG_MIN;\n+  lli = -(unsigned long long) lli;\n+  CHECK (lli, -0x8000000000000000L);\n+\n+  return 0;\n+}"}]}