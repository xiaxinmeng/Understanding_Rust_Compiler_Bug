{"sha": "4c3b16f3c11088f4c3a25ddd59ee5bc38c15f379", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMzYjE2ZjNjMTEwODhmNGMzYTI1ZGRkNTllZTViYzM4YzE1ZjM3OQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-11-20T19:33:04Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-11-20T19:33:04Z"}, "message": "Only compare sizes of automatic variables\n\none of common remaining reasons for ICF to fail after loading in fuction\nbody is mismatched type of automatic vairable.   This is becuase\ncompatible_types_p resorts to checking TYPE_MAIN_VARIANTS for\neuqivalence that prevents merging many TBAA compaitle cases.  (And thus\nis also not reflected by the hash extended by alias sets of accesses.)\n\nSince in gimple\nautomatic variables are just blocks of memory I think we should only\ncheck its size only. All accesses are matched when copmparing the actual\nloads/stores.\n\nI am not sure if we need to match types of other DECLs but I decided I can try\nto be safe here: for PARM_DECl/RESUILT_DECL we match them anyway to be sure\nthat functions are ABI compatible.  For CONST_DECL and readonly global\nVAR_DECLs they are matched when comparing their constructors.\n\n\t* ipa-icf-gimple.c (func_checker::compare_decl): Do not compare types\n\tof local variables.", "tree": {"sha": "3289563d012bcaaaa6440a2b2a33a2768a02f6db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3289563d012bcaaaa6440a2b2a33a2768a02f6db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c3b16f3c11088f4c3a25ddd59ee5bc38c15f379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c3b16f3c11088f4c3a25ddd59ee5bc38c15f379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c3b16f3c11088f4c3a25ddd59ee5bc38c15f379", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c3b16f3c11088f4c3a25ddd59ee5bc38c15f379/comments", "author": null, "committer": null, "parents": [{"sha": "65854626304d50cf348af53de1c29ccec06d33c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65854626304d50cf348af53de1c29ccec06d33c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65854626304d50cf348af53de1c29ccec06d33c6"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "be5a23d6e02ea54506bd337c1c8614c2ee717447", "filename": "gcc/ipa-icf-gimple.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c3b16f3c11088f4c3a25ddd59ee5bc38c15f379/gcc%2Fipa-icf-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c3b16f3c11088f4c3a25ddd59ee5bc38c15f379/gcc%2Fipa-icf-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf-gimple.c?ref=4c3b16f3c11088f4c3a25ddd59ee5bc38c15f379", "patch": "@@ -153,8 +153,21 @@ func_checker::compare_decl (const_tree t1, const_tree t2)\n       && DECL_BY_REFERENCE (t1) != DECL_BY_REFERENCE (t2))\n     return return_false_with_msg (\"DECL_BY_REFERENCE flags are different\");\n \n-  if (!compatible_types_p (TREE_TYPE (t1), TREE_TYPE (t2)))\n-    return return_false ();\n+  /* We do not really need to check types of variables, since they are just\n+     blocks of memory and we verify types of the accesses to them.\n+     However do compare types of other kinds of decls\n+     (parm decls and result decl types may affect ABI convetions).  */\n+  if (t != VAR_DECL)\n+    {\n+      if (!compatible_types_p (TREE_TYPE (t1), TREE_TYPE (t2)))\n+\treturn return_false ();\n+    }\n+  else\n+    {\n+      if (!operand_equal_p (DECL_SIZE (t1), DECL_SIZE (t2),\n+\t\t\t    OEP_MATCH_SIDE_EFFECTS))\n+\treturn return_false_with_msg (\"DECL_SIZEs are different\");\n+    }\n \n   bool existed_p;\n   const_tree &slot = m_decl_map.get_or_insert (t1, &existed_p);"}]}