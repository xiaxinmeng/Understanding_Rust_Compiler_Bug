{"sha": "d658cd4c6afb95502cd6a314065498c293e1feb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY1OGNkNGM2YWZiOTU1MDJjZDZhMzE0MDY1NDk4YzI5M2UxZmViMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-10-30T23:32:55Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-10-30T23:32:55Z"}, "message": "decl.c (pop_cp_function_context): Don't call free on a NULL pointer.\n\n\t* decl.c (pop_cp_function_context): Don't call free on a NULL\n\tpointer.\n\t* semantics.c: Include ggc.h.\n\t(expand_body): Do garbage-collection after processing a template\n\tfunction.  Clear DECL_SAVED_TREE after generating RTL for a\n\tfunction.\n\t* Makefile.in (semantics.o): Depend on ggc.h.\n\nFrom-SVN: r30279", "tree": {"sha": "eae3147603fa00ebe355662313326062fe4189c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eae3147603fa00ebe355662313326062fe4189c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d658cd4c6afb95502cd6a314065498c293e1feb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d658cd4c6afb95502cd6a314065498c293e1feb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d658cd4c6afb95502cd6a314065498c293e1feb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d658cd4c6afb95502cd6a314065498c293e1feb2/comments", "author": null, "committer": null, "parents": [{"sha": "64658ada1f0eb82338866bf81ed0143d95c151c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64658ada1f0eb82338866bf81ed0143d95c151c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64658ada1f0eb82338866bf81ed0143d95c151c9"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "f430d58ad3d9f36e6e964b19b4e83011e22eac45", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d658cd4c6afb95502cd6a314065498c293e1feb2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d658cd4c6afb95502cd6a314065498c293e1feb2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d658cd4c6afb95502cd6a314065498c293e1feb2", "patch": "@@ -1,3 +1,13 @@\n+1999-10-30  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* decl.c (pop_cp_function_context): Don't call free on a NULL\n+\tpointer.\n+\t* semantics.c: Include ggc.h.\n+\t(expand_body): Do garbage-collection after processing a template\n+\tfunction.  Clear DECL_SAVED_TREE after generating RTL for a\n+\tfunction.\n+\t* Makefile.in (semantics.o): Depend on ggc.h.\n+\t\n 1999-10-29  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (make_typename_type): Change prototype."}, {"sha": "398703b1a266aa24f3e582b0b7ad995b03b59973", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d658cd4c6afb95502cd6a314065498c293e1feb2/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d658cd4c6afb95502cd6a314065498c293e1feb2/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=d658cd4c6afb95502cd6a314065498c293e1feb2", "patch": "@@ -295,7 +295,7 @@ repo.o : repo.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../system.h \\\n   $(srcdir)/../toplev.h $(srcdir)/../ggc.h\n semantics.o: semantics.c $(CONFIG_H) $(CXX_TREE_H) lex.h \\\n   $(srcdir)/../except.h $(srcdir)/../system.h $(srcdir)/../toplev.h \\\n-  $(srcdir)/../flags.h\n+  $(srcdir)/../flags.h $(srcdir)/../ggc.h\n dump.o: dump.c $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../system.h\n \n #\f"}, {"sha": "0f9b5ab3ba81e9fc735fd4be5c52661a15b65c5f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d658cd4c6afb95502cd6a314065498c293e1feb2/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d658cd4c6afb95502cd6a314065498c293e1feb2/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d658cd4c6afb95502cd6a314065498c293e1feb2", "patch": "@@ -14234,7 +14234,8 @@ static void\n pop_cp_function_context (f)\n      struct function *f;\n {\n-  free (f->language);\n+  if (f->language)\n+    free (f->language);\n   f->language = 0;\n }\n "}, {"sha": "54dd7e11f48d6bf21335d6db388731fc540562c6", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d658cd4c6afb95502cd6a314065498c293e1feb2/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d658cd4c6afb95502cd6a314065498c293e1feb2/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=d658cd4c6afb95502cd6a314065498c293e1feb2", "patch": "@@ -32,6 +32,7 @@\n #include \"lex.h\"\n #include \"toplev.h\"\n #include \"flags.h\"\n+#include \"ggc.h\"\n \n /* There routines provide a modular interface to perform many parsing\n    operations.  They may therefore be used during actual parsing, or\n@@ -2509,7 +2510,14 @@ expand_body (fn)\n       || (DECL_LANG_SPECIFIC (fn) \n \t  && DECL_TEMPLATE_INFO (fn)\n \t  && uses_template_parms (DECL_TI_ARGS (fn))))\n-    return;\n+    {\n+      /* Normally, collection only occurs in rest_of_compilation.  So,\n+\t if we don't collect here, we never collect junk generated\n+\t during the processing of templates until we hit a\n+\t non-template function.  */\n+      ggc_collect ();\n+      return;\n+    }\n \n   /* There's no reason to do any of the work here if we're only doing\n      semantic analysis; this code just generates RTL.  */\n@@ -2546,6 +2554,11 @@ expand_body (fn)\n   /* Generate code for the function.  */\n   finish_function (lineno, 0);\n \n+  /* We don't need the body any more.  Allow it to be garbage\n+     collected.  We can't do this if we're going to dump everything.  */\n+  if (!flag_dump_translation_unit)\n+    DECL_SAVED_TREE (fn) = NULL_TREE;\n+\n   /* And restore the current source position.  */\n   lineno = saved_lineno;\n   input_filename = saved_input_filename;"}]}