{"sha": "ddb7f0a0cac48762ba6408d69538f8115c4a2739", "node_id": "C_kwDOANBUbNoAKGRkYjdmMGEwY2FjNDg3NjJiYTY0MDhkNjk1MzhmODExNWM0YTI3Mzk", "commit": {"author": {"name": "Lewis Hyatt", "email": "lhyatt@gmail.com", "date": "2022-10-06T22:05:02Z"}, "committer": {"name": "Lewis Hyatt", "email": "lhyatt@gmail.com", "date": "2022-10-12T22:08:31Z"}, "message": "preprocessor: Fix tracking of system header state [PR60014,PR60723]\n\nThe token_streamer class (which implements gcc mode -E and\n-save-temps/-no-integrated-cpp) needs to keep track whether the last tokens\noutput were in a system header, so that it can generate line marker\nannotations as necessary for a downstream consumer to reconstruct the\nstate. The logic for tracking it, which was added by r5-1863 to resolve\nPR60723, has some edge case issues as revealed by the three new test\ncases. The first, coming from the original PR60014, was incidentally fixed by\nr9-1926 for unrelated reasons. The other two were still failing on master\nprior to this commit. Such code paths were not realizable prior to r13-1544,\nwhich made it possible for the token streamer to see CPP_PRAGMA tokens in more\ncontexts.\n\nThe two main issues being corrected here are:\n\n1) print.prev_was_system_token needs to indicate whether the previous token\noutput was in a system location. However, it was not being set on every token,\nonly on those that triggered the main code path; specifically it was not\ntriggered on a CPP_PRAGMA token. Testcase 2 covers this case.\n\n2) The token_streamer uses a variable \"line_marker_emitted\" to remember\nwhether a line marker has been emitted while processing a given token, so that\nit wouldn't be done more than once in case multiple conditions requiring a\nline marker are true. There was no reason for this to be a member variable\nthat retains its value from token to token, since it is just needed for\ntracking the state locally while processing a single given token. The fact\nthat it could retain its value for a subsequent token is rather difficult to\nobserve, but testcase 3 demonstrates incorrect behavior resulting from\nthat. Moving this to a local variable also simplifies understanding the\ncontrol flow going forward.\n\ngcc/c-family/ChangeLog:\n\n\tPR preprocessor/60014\n\tPR preprocessor/60723\n\t* c-ppoutput.cc (class token_streamer): Remove member\n\tline_marker_emitted to...\n\t(token_streamer::stream): ...a local variable here. Set\n\tprint.prev_was_system_token on all code paths.\n\ngcc/testsuite/ChangeLog:\n\n\tPR preprocessor/60014\n\tPR preprocessor/60723\n\t* gcc.dg/cpp/pr60014-1.c: New test.\n\t* gcc.dg/cpp/pr60014-1.h: New test.\n\t* gcc.dg/cpp/pr60014-2.c: New test.\n\t* gcc.dg/cpp/pr60014-2.h: New test.\n\t* gcc.dg/cpp/pr60014-3.c: New test.\n\t* gcc.dg/cpp/pr60014-3.h: New test.", "tree": {"sha": "0200cd9ddfa77a34ff96a816cd14f0bd74f2f9f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0200cd9ddfa77a34ff96a816cd14f0bd74f2f9f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddb7f0a0cac48762ba6408d69538f8115c4a2739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddb7f0a0cac48762ba6408d69538f8115c4a2739", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddb7f0a0cac48762ba6408d69538f8115c4a2739", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddb7f0a0cac48762ba6408d69538f8115c4a2739/comments", "author": null, "committer": null, "parents": [{"sha": "f77281b25ca6bb34ba271fa826e1e79a15df95fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f77281b25ca6bb34ba271fa826e1e79a15df95fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f77281b25ca6bb34ba271fa826e1e79a15df95fe"}], "stats": {"total": 59, "additions": 52, "deletions": 7}, "files": [{"sha": "a99d9e9c5cac4ee2b81d41984123c5dc83cd9f71", "filename": "gcc/c-family/c-ppoutput.cc", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb7f0a0cac48762ba6408d69538f8115c4a2739/gcc%2Fc-family%2Fc-ppoutput.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb7f0a0cac48762ba6408d69538f8115c4a2739/gcc%2Fc-family%2Fc-ppoutput.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ppoutput.cc?ref=ddb7f0a0cac48762ba6408d69538f8115c4a2739", "patch": "@@ -184,15 +184,13 @@ class token_streamer\n   bool avoid_paste;\n   bool do_line_adjustments;\n   bool in_pragma;\n-  bool line_marker_emitted;\n \n  public:\n   token_streamer (cpp_reader *pfile)\n     :avoid_paste (false),\n     do_line_adjustments (cpp_get_options (pfile)->lang != CLK_ASM\n \t\t\t && !flag_no_line_commands),\n-    in_pragma (false),\n-    line_marker_emitted (false)\n+    in_pragma (false)\n     {\n       gcc_assert (!print.streamer);\n       print.streamer = this;\n@@ -227,7 +225,14 @@ token_streamer::stream (cpp_reader *pfile, const cpp_token *token,\n   if (token->type == CPP_EOF)\n     return;\n \n+  /* Keep track when we move into and out of system locations.  */\n+  const bool is_system_token = in_system_header_at (loc);\n+  const bool system_state_changed\n+    = (is_system_token != print.prev_was_system_token);\n+  print.prev_was_system_token = is_system_token;\n+\n   /* Subtle logic to output a space if and only if necessary.  */\n+  bool line_marker_emitted = false;\n   if (avoid_paste)\n     {\n       unsigned src_line = LOCATION_LINE (loc);\n@@ -301,19 +306,17 @@ token_streamer::stream (cpp_reader *pfile, const cpp_token *token,\n       if (do_line_adjustments\n \t  && !in_pragma\n \t  && !line_marker_emitted\n-\t  && print.prev_was_system_token != !!in_system_header_at (loc)\n+\t  && system_state_changed\n \t  && !is_location_from_builtin_token (loc))\n \t/* The system-ness of this token is different from the one of\n \t   the previous token.  Let's emit a line change to mark the\n \t   new system-ness before we emit the token.  */\n \t{\n-\t  do_line_change (pfile, token, loc, false);\n-\t  print.prev_was_system_token = !!in_system_header_at (loc);\n+\t  line_marker_emitted = do_line_change (pfile, token, loc, false);\n \t}\n       if (!in_pragma || should_output_pragmas ())\n \t{\n \t  cpp_output_token (token, print.outf);\n-\t  line_marker_emitted = false;\n \t  print.printed = true;\n \t}\n     }"}, {"sha": "de52b30c16175aa889922afc03be77f63b813d72", "filename": "gcc/testsuite/gcc.dg/cpp/pr60014-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb7f0a0cac48762ba6408d69538f8115c4a2739/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr60014-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb7f0a0cac48762ba6408d69538f8115c4a2739/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr60014-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr60014-1.c?ref=ddb7f0a0cac48762ba6408d69538f8115c4a2739", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -Wint-conversion\" } */\n+#include \"pr60014-1.h\"\n+int main ()\n+{\n+    X(a, \n+      b);\n+    char *should_warn = 1; /* { dg-warning {-Wint-conversion} } */\n+}"}, {"sha": "50c159c44ee571bae4793380e1c0b554f91b3147", "filename": "gcc/testsuite/gcc.dg/cpp/pr60014-1.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb7f0a0cac48762ba6408d69538f8115c4a2739/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr60014-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb7f0a0cac48762ba6408d69538f8115c4a2739/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr60014-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr60014-1.h?ref=ddb7f0a0cac48762ba6408d69538f8115c4a2739", "patch": "@@ -0,0 +1,5 @@\n+#pragma GCC system_header\n+\n+/* N.B. the semicolon in the macro definition is important, since it produces a\n+   second token from this system header on the same line as the __LINE__ token.  */\n+#define X(a, b) __LINE__;"}, {"sha": "115c9858ec760816c2dd09db21265f6a1e329df6", "filename": "gcc/testsuite/gcc.dg/cpp/pr60014-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb7f0a0cac48762ba6408d69538f8115c4a2739/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr60014-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb7f0a0cac48762ba6408d69538f8115c4a2739/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr60014-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr60014-2.c?ref=ddb7f0a0cac48762ba6408d69538f8115c4a2739", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -Wint-conversion\" } */\n+#include \"pr60014-2.h\"\n+X\n+char *should_warn = 1; /* { dg-warning {-Wint-conversion} } */"}, {"sha": "455f1ed2e5be8e5767d0abd1a43060212581727e", "filename": "gcc/testsuite/gcc.dg/cpp/pr60014-2.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb7f0a0cac48762ba6408d69538f8115c4a2739/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr60014-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb7f0a0cac48762ba6408d69538f8115c4a2739/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr60014-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr60014-2.h?ref=ddb7f0a0cac48762ba6408d69538f8115c4a2739", "patch": "@@ -0,0 +1,5 @@\n+#pragma GCC system_header\n+\n+/* N.B. the semicolon in the macro definition is important, since it produces a\n+   second token from this system header on the same line as the _Pragma.  */\n+#define X _Pragma(\"GCC diagnostic push\");"}, {"sha": "c4306035f051ba17c1fca9f3de683e7cfbdd3796", "filename": "gcc/testsuite/gcc.dg/cpp/pr60014-3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb7f0a0cac48762ba6408d69538f8115c4a2739/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr60014-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb7f0a0cac48762ba6408d69538f8115c4a2739/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr60014-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr60014-3.c?ref=ddb7f0a0cac48762ba6408d69538f8115c4a2739", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -Wint-conversion\" } */\n+#include \"pr60014-3.h\"\n+\n+/* The line continuation on the next line is what triggers the problem here,\n+   because it synchronizes the output line between the input source and the\n+   preprocessed output (whereas without the line continuation, the\n+   preprocessed output would be off by one line from having output a #pragma\n+   on a line by itself). Therefore, the token streamer doesn't have a reason\n+   to generate a line marker purely based on the line number. That gives it\n+   the chance to consider whether instead it needs to generate a line marker\n+   based on a change of the \"in-system-header\" state, allowing us to test that\n+   it comes to the right conclusion, which it did not, prior to this commit to\n+   resolve PR60014.  */\n+P(GCC diagnostic) \\\n+const char *should_warn = 1; /* { dg-warning {-Wint-conversion} } */"}, {"sha": "aedf038d95f5a7fd9c5a6401b5ff51280414d0af", "filename": "gcc/testsuite/gcc.dg/cpp/pr60014-3.h", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb7f0a0cac48762ba6408d69538f8115c4a2739/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr60014-3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb7f0a0cac48762ba6408d69538f8115c4a2739/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr60014-3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr60014-3.h?ref=ddb7f0a0cac48762ba6408d69538f8115c4a2739", "patch": "@@ -0,0 +1,2 @@\n+#pragma GCC system_header\n+#define P(x) _Pragma(#x)"}]}