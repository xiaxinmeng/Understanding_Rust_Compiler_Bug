{"sha": "8f744ea917803a08b8f2625d87a66b4f5a557d34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY3NDRlYTkxNzgwM2EwOGI4ZjI2MjVkODdhNjZiNGY1YTU1N2QzNA==", "commit": {"author": {"name": "David Mosberger", "email": "davidm@hpl.hp.com", "date": "2003-04-01T23:29:35Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-04-01T23:29:35Z"}, "message": "crti.asm: Clean up trailing whitespace.\n\n        * config/ia64/crti.asm: Clean up trailing whitespace.\n        Remove trailing hashes (#) from identifiers.\n\n        * config/ia64/crtn.asm: Ditto.\n\n        * config/ia64/crtend.asm: Remove trailing hashes (#) from\n        identifiers.\n        (__do_global_ctors_aux): Align to 32-byte boundary.  Add unwind\n        directives.  Drop explicit bundling---it just makes the code\n        harder to read.  Don't save/restore gp needlessly.\n\n        * config/ia64/crtbegin.asm: Remove trailing hashes (#) from\n        identifiers (they're only needed if the identifier would clash\n        with a register name otherwise).\n        (__do_global_dtors_aux): Align to 32-byte boundary. Add unwind\n        directives.  Drop explicit bundling---it just makes the code\n        harder to read.\n        (__do_jv_register_classes): Ditto.\n        (.fini_array): Remove \"progbits\" (newer\n        assemblers don't like wrong section-types).\n        (.init_array): Ditto.\n\nFrom-SVN: r65150", "tree": {"sha": "3b7851933c9a813796d6fb586f277231dcf6bf5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b7851933c9a813796d6fb586f277231dcf6bf5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f744ea917803a08b8f2625d87a66b4f5a557d34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f744ea917803a08b8f2625d87a66b4f5a557d34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f744ea917803a08b8f2625d87a66b4f5a557d34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f744ea917803a08b8f2625d87a66b4f5a557d34/comments", "author": null, "committer": null, "parents": [{"sha": "e129b3f9512d0f842df00ea9f08c06011cae7926", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e129b3f9512d0f842df00ea9f08c06011cae7926", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e129b3f9512d0f842df00ea9f08c06011cae7926"}], "stats": {"total": 415, "additions": 209, "deletions": 206}, "files": [{"sha": "ed1698f66132539481861b24b37397016a75ac5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f744ea917803a08b8f2625d87a66b4f5a557d34/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f744ea917803a08b8f2625d87a66b4f5a557d34/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f744ea917803a08b8f2625d87a66b4f5a557d34", "patch": "@@ -1,3 +1,27 @@\n+2003-04-01  David Mosberger <davidm@hpl.hp.com>\n+\n+        * config/ia64/crti.asm: Clean up trailing whitespace.\n+        Remove trailing hashes (#) from identifiers.\n+\n+        * config/ia64/crtn.asm: Ditto.\n+\n+        * config/ia64/crtend.asm: Remove trailing hashes (#) from\n+        identifiers.\n+        (__do_global_ctors_aux): Align to 32-byte boundary.  Add unwind\n+        directives.  Drop explicit bundling---it just makes the code\n+        harder to read.  Don't save/restore gp needlessly.\n+\n+        * config/ia64/crtbegin.asm: Remove trailing hashes (#) from\n+        identifiers (they're only needed if the identifier would clash\n+        with a register name otherwise).\n+        (__do_global_dtors_aux): Align to 32-byte boundary. Add unwind\n+        directives.  Drop explicit bundling---it just makes the code\n+        harder to read.\n+        (__do_jv_register_classes): Ditto.\n+        (.fini_array): Remove \"progbits\" (newer\n+        assemblers don't like wrong section-types).\n+        (.init_array): Ditto.\n+\n 2003-04-01  Roger Sayle  <roger@eyesopen.com>\n \n \tPR fortran/9974"}, {"sha": "c64de028eef4008c31b3548864e8fe1d9398e771", "filename": "gcc/config/ia64/crtbegin.asm", "status": "modified", "additions": 124, "deletions": 136, "changes": 260, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f744ea917803a08b8f2625d87a66b4f5a557d34/gcc%2Fconfig%2Fia64%2Fcrtbegin.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f744ea917803a08b8f2625d87a66b4f5a557d34/gcc%2Fconfig%2Fia64%2Fcrtbegin.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fcrtbegin.asm?ref=8f744ea917803a08b8f2625d87a66b4f5a557d34", "patch": "@@ -33,33 +33,33 @@ __DTOR_LIST__:\n __JCR_LIST__:\n \n .section .sdata\n-\t.type dtor_ptr#,@object\n-\t.size dtor_ptr#,8\n+\t.type dtor_ptr,@object\n+\t.size dtor_ptr,8\n dtor_ptr:\n-\tdata8\t@gprel(__DTOR_LIST__# + 8)\n+\tdata8\t@gprel(__DTOR_LIST__ + 8)\n \n \t/* A handle for __cxa_finalize to manage c++ local destructors.  */\n-\t.global __dso_handle#\n-\t.type __dso_handle#,@object\n-\t.size __dso_handle#,8\n+\t.global __dso_handle\n+\t.type __dso_handle,@object\n+\t.size __dso_handle,8\n #ifdef SHARED\n \t.section .data\n __dso_handle:\n-\tdata8\t__dso_handle#\n+\tdata8\t__dso_handle\n #else\n \t.section .bss\n __dso_handle:\n \tdata8\t0\n #endif\n-\t.hidden __dso_handle#\n+\t.hidden __dso_handle\n \n \n #ifdef HAVE_INITFINI_ARRAY\n \n-.section .fini_array,\"a\",\"progbits\"\n+.section .fini_array,\"a\"\n \tdata8 @fptr(__do_global_dtors_aux)\n \n-.section .init_array,\"a\",\"progbits\"\n+.section .init_array,\"a\"\n \tdata8 @fptr(__do_jv_register_classes)\n \tdata8 @fptr(__do_global_ctors_aux)\n \n@@ -79,7 +79,7 @@ __dso_handle:\n  */\n .section .fini,\"ax\",\"progbits\"\n \t{ .mlx\n-\t  movl r2 = @pcrel(__do_global_dtors_aux# - 16)\n+\t  movl r2 = @pcrel(__do_global_dtors_aux - 16)\n \t}\n \t{ .mii\n \t  mov r3 = ip\n@@ -97,7 +97,7 @@ __dso_handle:\n \n .section .init,\"ax\",\"progbits\"\n \t{ .mlx\n-\t  movl r2 = @pcrel(__do_jv_register_classes# - 16)\n+\t  movl r2 = @pcrel(__do_jv_register_classes - 16)\n \t}\n \t{ .mii\n \t  mov r3 = ip\n@@ -113,56 +113,58 @@ __dso_handle:\n #endif /* !HAVE_INITFINI_ARRAY */\n \n .section .text\n-\t.align\t16\n-\t.proc\t__do_global_dtors_aux#\n+\t.align\t32\n+\t.proc\t__do_global_dtors_aux\n __do_global_dtors_aux:\n+\t.prologue\n #ifndef SHARED\n-\t{ .mii\n-\t  alloc loc3 = ar.pfs, 0, 4, 1, 0\n-\t  addl loc0 = @gprel(dtor_ptr#), gp\n-\t  mov loc1 = b0\n-\t}\n-\t{ .mib\n-\t  mov loc2 = gp\n-\t  br.sptk.few 1f\n-\t  ;;\n-\t}\n+\t.save ar.pfs, r35\n+\talloc loc3 = ar.pfs, 0, 4, 1, 0\n+\taddl loc0 = @gprel(dtor_ptr), gp\n+\t.save rp, loc1\n+\tmov loc1 = rp\n+\t.body\n+\n+\tmov loc2 = gp\n+\tnop 0\n+\tbr.sptk.many 1f\n+\t;;\n #else\n \t/*\n \t\tif (__cxa_finalize)\n \t\t  __cxa_finalize(__dso_handle)\n \t*/\n-\t{ .mii\n-\t  alloc loc3 = ar.pfs, 0, 4, 1, 0\n-\t  addl loc0 = @gprel(dtor_ptr#), gp\n-\t  addl r16 = @ltoff(@fptr(__cxa_finalize#)), gp\n-\t  ;;\n-\t}\n-\t{ .mmi\n-\t  ld8 r16 = [r16]\n-\t  ;;\n-\t  addl out0 = @ltoff(__dso_handle#), gp\n-\t  cmp.ne p7, p0 = r0, r16\n-\t  ;;\n-\t}\n-\t{ .mmi\n-\t  ld8 out0 = [out0]\n-(p7)\t  ld8 r18 = [r16], 8\n-\t  mov loc1 = b0\n-\t  ;;\n-\t}\n-\t{ .mfi\n-\t  mov loc2 = gp\n-(p7)\t  mov b6 = r18\n-\t}\n-\t{\n-\t  .mfb\n-(p7)\t  ld8 gp = [r16]\n-(p7)\t  br.call.sptk.many b0 = b6\n-\t}\n-\t{ .mfb\n-\t  br.sptk.few 1f\n-\t}\n+\t.save ar.pfs, r35\n+\talloc loc3 = ar.pfs, 0, 4, 1, 0\n+\taddl loc0 = @gprel(dtor_ptr), gp\n+\taddl r16 = @ltoff(@fptr(__cxa_finalize)), gp\n+\t;;\n+\n+\tld8 r16 = [r16]\n+\t;;\n+\taddl out0 = @ltoff(__dso_handle), gp\n+\tcmp.ne p7, p0 = r0, r16\n+\t;;\n+\n+\tld8 out0 = [out0]\n+(p7)\tld8 r18 = [r16], 8\n+\t.save rp, loc1\n+\tmov loc1 = rp\n+\t.body\n+\t;;\n+\n+\tmov loc2 = gp\n+(p7)\tld8 gp = [r16]\n+(p7)\tmov b6 = r18\n+\n+\tnop 0\n+\tnop 0\n+(p7)\tbr.call.sptk.many rp = b6\n+\t;;\n+\n+\tnop 0\n+\tnop 0\n+\tbr.sptk.many 1f\n #endif\n \t/*\n \t\tdo {\n@@ -171,89 +173,75 @@ __do_global_dtors_aux:\n \t\t} while (dtor_ptr);\n \t*/\n 0:\n-\t{ .mmi\n-\t  st8 [loc0] = r15\n-\t  ld8 r17 = [r16], 8\n-\t  ;;\n-\t}\n-\t{ .mib\n-\t  ld8 gp = [r16]\n-\t  mov b6 = r17\n-\t  br.call.sptk.many b0 = b6\n-\t}\n-1:\n-\t{ .mmi\n-\t  ld8 r15 = [loc0]\n-\t  ;;\n-\t  add r16 = r15, loc2\n-\t  adds r15 = 8, r15\n-\t  ;;\n-\t}\n-\t{ .mmi\n-\t  ld8 r16 = [r16]\n-\t  mov gp = loc2\n-\t  mov b0 = loc1\n-\t  ;;\n-\t}\n-\t{ .mib\n-\t  cmp.ne p6, p0 = r0, r16\n-\t  mov ar.pfs = loc3\n-(p6)\t  br.cond.sptk.few 0b\n-\t}\n-\t{ .bbb\n-\t  br.ret.sptk.many b0\n-\t  ;;\n-\t}\n-\t.endp\t__do_global_dtors_aux#\n-\n-\t.align\t16\n-\t.proc\t__do_jv_register_classes#\n+\tst8 [loc0] = r15\t\t// update dtor_ptr (in memory)\n+\tld8 r17 = [r16], 8\t\t// r17 <- dtor's entry-point\n+\tnop 0\n+\t;;\n+\n+\tld8 gp = [r16]\t\t\t// gp <- dtor's gp\n+\tmov b6 = r17\n+\tbr.call.sptk.many rp = b6\n+\n+1:\tld8 r15 = [loc0]\t\t// r15 <- dtor_ptr (gp-relative)\n+\t;;\n+\tadd r16 = r15, loc2\t\t// r16 <- dtor_ptr (absolute)\n+\tadds r15 = 8, r15\n+\t;;\n+\n+\tld8 r16 = [r16]\t\t\t// r16 <- pointer to dtor's fdesc\n+\tmov rp = loc1\n+\tmov ar.pfs = loc3\n+\t;;\n+\n+\tcmp.ne p6, p0 = r0, r16\n+(p6)\tbr.cond.sptk.few 0b\n+\tbr.ret.sptk.many rp\n+\t.endp __do_global_dtors_aux\n+\n+\t.align\t32\n+\t.proc\t__do_jv_register_classes\n __do_jv_register_classes:\n-\t{ .mlx\n-\t  alloc loc2 = ar.pfs, 0, 3, 1, 0\n-\t  movl out0 = @gprel(__JCR_LIST__)\n-\t  ;;\n-\t}\n-\t{ .mmi\n-\t  addl r14 = @ltoff(@fptr(_Jv_RegisterClasses)), gp\n-\t  add out0 = out0, gp\n-\t  ;;\n-\t}\n-\t{ .mmi\n-\t  ld8 r14 = [r14]\n-\t  ld8 r15 = [out0]\n-\t  cmp.ne p6, p0 = r0, r0\n-\t  ;;\n-\t}\n-\t{ .mib\n-\t  cmp.eq.or p6, p0 = r0, r14\n-\t  cmp.eq.or p6, p0 = r0, r15\n-(p6)\t  br.ret.sptk.many b0\n-\t}\n-\t{ .mii\n-\t  ld8 r15 = [r14], 8\n-\t  mov loc0 = b0\n-\t  mov loc1 = gp\n-\t  ;;\n-\t}\n-\t{ .mib\n-\t  ld8 gp = [r14]\n-\t  mov b6 = r15\n-\t  br.call.sptk.many b0 = b6\n-\t  ;;\n-\t}\n-\t{ .mii\n-\t  mov gp = loc1\n-\t  mov b0 = loc0\n-\t  mov ar.pfs = loc2\n-\t}\n-\t{ .bbb\n-\t  br.ret.sptk.many b0\n-\t  ;;\n-\t}\n-\t.endp\t__do_jv_register_classes#\n+\t.save ar.pfs, r33\n+\talloc loc1 = ar.pfs, 0, 2, 1, 0\n+\tmovl out0 = @gprel(__JCR_LIST__)\n+\t;;\n+\n+\taddl r14 = @ltoff(@fptr(_Jv_RegisterClasses)), gp\n+\tadd out0 = out0, gp\n+\t.save rp, loc0\n+\tmov loc0 = rp\n+\t.body\n+\t;;\n+\n+\tld8 r14 = [r14]\n+\tld8 r15 = [out0]\n+\tcmp.ne p6, p0 = r0, r0\n+\t;;\n+\n+\tcmp.eq.or p6, p0 = r0, r14\n+\tcmp.eq.or p6, p0 = r0, r15\n+(p6)\tbr.ret.sptk.many rp\n+\n+\tld8 r15 = [r14], 8\n+\t;;\n+\tld8 gp = [r14]\n+\tmov b6 = r15\n+\n+\tnop 0\n+\tnop 0\n+\tbr.call.sptk.many rp = b6\n+\t;;\n+\n+\tnop 0\n+\tmov rp = loc0\n+\tmov ar.pfs = loc1\n+\n+\tnop 0\n+\tnop 0\n+\tbr.ret.sptk.many rp\n+\t.endp\t__do_jv_register_classes\n \n #ifdef SHARED\n-.weak __cxa_finalize#\n+.weak __cxa_finalize\n #endif\n .weak _Jv_RegisterClasses"}, {"sha": "f357e5652f4ad29343149a535dbe8fc54931bf21", "filename": "gcc/config/ia64/crtend.asm", "status": "modified", "additions": 44, "deletions": 53, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f744ea917803a08b8f2625d87a66b4f5a557d34/gcc%2Fconfig%2Fia64%2Fcrtend.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f744ea917803a08b8f2625d87a66b4f5a557d34/gcc%2Fconfig%2Fia64%2Fcrtend.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fcrtend.asm?ref=8f744ea917803a08b8f2625d87a66b4f5a557d34", "patch": "@@ -49,7 +49,7 @@ __JCR_END__:\n  */\n .section .init,\"ax\",\"progbits\"\n \t{ .mlx\n-\t  movl r2 = @pcrel(__do_global_ctors_aux# - 16)\n+\t  movl r2 = @pcrel(__do_global_ctors_aux - 16)\n \t}\n \t{ .mii\n \t  mov r3 = ip\n@@ -65,63 +65,54 @@ __JCR_END__:\n #endif /* !HAVE_INITFINI_ARRAY */\n \n .text\n-\t.align 16\n+\t.align 32\n #ifdef HAVE_INITFINI_ARRAY\n \t/* This is referenced from crtbegin.o.  */\n-\t.globl __do_global_ctors_aux#\n-\t.type __do_global_ctors_aux#,@function\n-\t.hidden __do_global_ctors_aux#\n+\t.globl __do_global_ctors_aux\n+\t.type __do_global_ctors_aux,@function\n+\t.hidden __do_global_ctors_aux\n #endif\n-\t.proc __do_global_ctors_aux#\n+\t.proc __do_global_ctors_aux\n __do_global_ctors_aux:\n+\t.prologue\n \t/*\n \t\tfor (loc0 = __CTOR_END__-1; *p != -1; --p)\n \t\t  (*p) ();\n \t*/\n-\t{ .mlx\n-\t  alloc loc4 = ar.pfs, 0, 5, 0, 0\n-\t  movl loc0 = @gprel(__CTOR_END__# - 8)\n-\t  ;;\n-\t}\n-\t{ .mmi\n-\t  add loc0 = loc0, gp\n-\t  mov loc1 = b0\n-\t  ;;\n-\t}\n-\t{\n-\t  .mmi\n-\t  ld8 loc3 = [loc0], -8\n-\t  mov loc2 = gp\n-\t  ;;\n-\t}\n-\t{ .mfb\n-\t  cmp.eq p6, p0 = -1, loc3\n-(p6)\t  br.cond.spnt.few 2f\n-\t}\n-0:\n-\t{ .mmi\n-\t  ld8 r15 = [loc3], 8\n-\t  ;;\n-\t  ld8 gp = [loc3]\n-\t  mov b6 = r15\n-\t}\n-\t{ .mfb\n-\t  ld8 loc3 = [loc0], -8\n-\t  br.call.sptk.many b0 = b6\n-\t  ;;\n-\t}\n-\t{ .mfb\n-\t  cmp.ne p6, p0 = -1, loc3\n-(p6)\t  br.cond.sptk.few 0b\n-\t}\n-2:\n-\t{ .mii\n-\t  mov gp = loc2\n-\t  mov b0 = loc1\n-\t  mov ar.pfs = loc4\n-\t}\n-\t{ .bbb\n-\t  br.ret.sptk.many b0\n-\t  ;;\n-\t}\n-\t.endp __do_global_ctors_aux#\n+\t.save ar.pfs, r34\n+\talloc loc2 = ar.pfs, 0, 4, 0, 0\n+\tmovl loc0 = @gprel(__CTOR_END__ - 8)\n+\t;;\n+\n+\tadd loc0 = loc0, gp\n+\t;;\n+\tld8 loc3 = [loc0], -8\n+\t.save rp, loc1\n+\tmov loc1 = rp\n+\t.body\n+\t;;\n+\n+\tcmp.eq p6, p0 = -1, loc3\n+\tnop 0\n+(p6)\tbr.cond.spnt.few 2f\n+\n+0:\tld8 r15 = [loc3], 8\n+\t;;\n+\tld8 gp = [loc3]\n+\tmov b6 = r15\n+\n+\tld8 loc3 = [loc0], -8\n+\tnop 0\n+\tbr.call.sptk.many rp = b6\n+\t;;\n+\n+\tcmp.ne p6, p0 = -1, loc3\n+\tnop 0\n+(p6)\tbr.cond.sptk.few 0b\n+\n+2:\tnop.m 0\n+\tmov rp = loc1\n+\tmov ar.pfs = loc2\n+\n+\tbr.ret.sptk.many rp\n+\t.endp __do_global_ctors_aux"}, {"sha": "4b48e3d40e80649553286940ff84524a18f9b63b", "filename": "gcc/config/ia64/crti.asm", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f744ea917803a08b8f2625d87a66b4f5a557d34/gcc%2Fconfig%2Fia64%2Fcrti.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f744ea917803a08b8f2625d87a66b4f5a557d34/gcc%2Fconfig%2Fia64%2Fcrti.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fcrti.asm?ref=8f744ea917803a08b8f2625d87a66b4f5a557d34", "patch": "@@ -1,35 +1,35 @@\n #   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n #   Written By Timothy Wall\n-# \n+#\n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by the\n # Free Software Foundation; either version 2, or (at your option) any\n # later version.\n-# \n+#\n # In addition to the permissions in the GNU General Public License, the\n # Free Software Foundation gives you unlimited permission to link the\n # compiled version of this file with other programs, and to distribute\n # those programs without any restriction coming from the use of this\n # file.  (The General Public License restrictions do apply in other\n # respects; for example, they cover modification of the file, and\n # distribution when not linked into another program.)\n-# \n+#\n # This file is distributed in the hope that it will be useful, but\n # WITHOUT ANY WARRANTY; without even the implied warranty of\n # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n # General Public License for more details.\n-# \n+#\n # You should have received a copy of the GNU General Public License\n # along with this program; see the file COPYING.  If not, write to\n # the Free Software Foundation, 59 Temple Place - Suite 330,\n # Boston, MA 02111-1307, USA.\n-# \n+#\n #    As a special exception, if you link this library with files\n #    compiled with GCC to produce an executable, this does not cause\n #    the resulting executable to be covered by the GNU General Public License.\n #    This exception does not however invalidate any other reasons why\n #    the executable file might be covered by the GNU General Public License.\n-# \n+#\n \n # This file just make a stack frame for the contents of the .fini and\n # .init sections.  Users may put any desired instructions in those\n@@ -39,7 +39,7 @@\n \n \t.section\t\".init\"\n \t.align 16\n-\t.global\t_init#\n+\t.global\t_init\n _init:\n \t.prologue 14, 33\n \t.save ar.pfs, r34\n@@ -49,10 +49,10 @@ _init:\n \t.save rp, r33\n \tmov\tr33 = b0\n \t.body\n-\t\n+\n \t.section\t\".fini\"\n \t.align\t16\n-\t.global\t_fini#\n+\t.global\t_fini\n _fini:\n \t.prologue 14, 33\n \t.save ar.pfs, r34\n@@ -62,5 +62,5 @@ _fini:\n \t.save rp, r33\n \tmov\tr33 = b0\n \t.body\n-\t\n+\n # end of crti.asm"}, {"sha": "48a9a03fdc6125f23a41d6565f6a6f992e9a672e", "filename": "gcc/config/ia64/crtn.asm", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f744ea917803a08b8f2625d87a66b4f5a557d34/gcc%2Fconfig%2Fia64%2Fcrtn.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f744ea917803a08b8f2625d87a66b4f5a557d34/gcc%2Fconfig%2Fia64%2Fcrtn.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fcrtn.asm?ref=8f744ea917803a08b8f2625d87a66b4f5a557d34", "patch": "@@ -1,35 +1,35 @@\n #   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n #   Written By Timothy Wall\n-# \n+#\n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by the\n # Free Software Foundation; either version 2, or (at your option) any\n # later version.\n-# \n+#\n # In addition to the permissions in the GNU General Public License, the\n # Free Software Foundation gives you unlimited permission to link the\n # compiled version of this file with other programs, and to distribute\n # those programs without any restriction coming from the use of this\n # file.  (The General Public License restrictions do apply in other\n # respects; for example, they cover modification of the file, and\n # distribution when not linked into another program.)\n-# \n+#\n # This file is distributed in the hope that it will be useful, but\n # WITHOUT ANY WARRANTY; without even the implied warranty of\n # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n # General Public License for more details.\n-# \n+#\n # You should have received a copy of the GNU General Public License\n # along with this program; see the file COPYING.  If not, write to\n # the Free Software Foundation, 59 Temple Place - Suite 330,\n # Boston, MA 02111-1307, USA.\n-# \n+#\n #    As a special exception, if you link this library with files\n #    compiled with GCC to produce an executable, this does not cause\n #    the resulting executable to be covered by the GNU General Public License.\n #    This exception does not however invalidate any other reasons why\n #    the executable file might be covered by the GNU General Public License.\n-# \n+#\n \n # This file just makes sure that the .fini and .init sections do in\n # fact return.  Users may put any desired instructions in those sections.\n@@ -44,7 +44,7 @@\n \t.restore sp\n \tmov\tr12 = r35\n \tbr.ret.sptk.many b0\n-\t\n+\n \t.section\t\".fini\"\n \t;;\n \tmov\tar.pfs = r34"}]}