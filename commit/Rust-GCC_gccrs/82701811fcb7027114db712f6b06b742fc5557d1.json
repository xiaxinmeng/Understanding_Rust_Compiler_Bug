{"sha": "82701811fcb7027114db712f6b06b742fc5557d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI3MDE4MTFmY2I3MDI3MTE0ZGI3MTJmNmIwNmI3NDJmYzU1NTdkMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T10:41:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T10:41:40Z"}, "message": "[multiple changes]\n\n2014-08-04  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb, einfo.ads: Minor reformatting.\n\n2014-08-04  Yannick Moy  <moy@adacore.com>\n\n\t* inline.adb (Can_Be_Inlined_In_GNATprove_Mode): Fix\n\tdetection of subprograms that cannot be inlined in GNATprove mode.\n\n2014-08-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* einfo.adb: Add guard to Returns_Limited_View.\n\n2014-08-04  Jose Ruiz  <ruiz@adacore.com>\n\n\t* s-tassta.adb, s-tarest.adb (Task_Wrapper): Force maximum alignment of\n\tthe secondary stack to respect the alignments of the returned objects.\n\nFrom-SVN: r213565", "tree": {"sha": "3cc51d0990eeb856addf1f5cfbd49c2cc9ecc50d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cc51d0990eeb856addf1f5cfbd49c2cc9ecc50d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82701811fcb7027114db712f6b06b742fc5557d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82701811fcb7027114db712f6b06b742fc5557d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82701811fcb7027114db712f6b06b742fc5557d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82701811fcb7027114db712f6b06b742fc5557d1/comments", "author": null, "committer": null, "parents": [{"sha": "a4b07ff0af00d647952f0ae946b7340f9fcc2f20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4b07ff0af00d647952f0ae946b7340f9fcc2f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4b07ff0af00d647952f0ae946b7340f9fcc2f20"}], "stats": {"total": 56, "additions": 48, "deletions": 8}, "files": [{"sha": "26d63fad439e58379b849d5548ddb5fe812ae335", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82701811fcb7027114db712f6b06b742fc5557d1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82701811fcb7027114db712f6b06b742fc5557d1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=82701811fcb7027114db712f6b06b742fc5557d1", "patch": "@@ -1,3 +1,21 @@\n+2014-08-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb, einfo.ads: Minor reformatting.\n+\n+2014-08-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* inline.adb (Can_Be_Inlined_In_GNATprove_Mode): Fix\n+\tdetection of subprograms that cannot be inlined in GNATprove mode.\n+\n+2014-08-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* einfo.adb: Add guard to Returns_Limited_View.\n+\n+2014-08-04  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* s-tassta.adb, s-tarest.adb (Task_Wrapper): Force maximum alignment of\n+\tthe secondary stack to respect the alignments of the returned objects.\n+\n 2014-08-04  Ed Schonberg  <schonberg@adacore.com>\n \n \t* einfo.ads, einfo.adb (Returns_Limited_View): New flag defined"}, {"sha": "d4a5260541ec0a3a1f970ca9b9abf788ad7aaa90", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82701811fcb7027114db712f6b06b742fc5557d1/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82701811fcb7027114db712f6b06b742fc5557d1/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=82701811fcb7027114db712f6b06b742fc5557d1", "patch": "@@ -2872,6 +2872,7 @@ package body Einfo is\n \n    function Returns_Limited_View (Id : E) return B is\n    begin\n+      pragma Assert (Ekind (Id) = E_Function);\n       return Flag134 (Id);\n    end Returns_Limited_View;\n \n@@ -5701,6 +5702,7 @@ package body Einfo is\n \n    procedure Set_Returns_Limited_View (Id : E; V : B := True) is\n    begin\n+      pragma Assert (Ekind (Id) = E_Function);\n       Set_Flag134 (Id, V);\n    end Set_Returns_Limited_View;\n "}, {"sha": "491e84dd4b372dd387a7a357659ec875dcd50943", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82701811fcb7027114db712f6b06b742fc5557d1/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82701811fcb7027114db712f6b06b742fc5557d1/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=82701811fcb7027114db712f6b06b742fc5557d1", "patch": "@@ -3767,15 +3767,15 @@ package Einfo is\n --       even though it causes the whole function to return.\n \n --    Returns_By_Ref (Flag90)\n---       Defined in function entities, to indicate that the function\n---       returns the result by reference, either because its return type is a\n---       by-reference-type or because it uses explicitly the secondary stack.\n+--       Defined in function entities. Set if the function returns the result\n+--       by reference, either because its return type is a by-reference-type\n+--       or because the function explicitly uses the secondary stack.\n \n --    Returns_Limited_View (Flag134)\n---       Defined on function entities, to indicate that the return type of\n---       the function at the point of definition is a limited view. Used to\n---       handle the late freezing of the function, when it is called in the\n---       current semantic unit while it is still unfrozen.\n+--       Defined in function entities. Set if the return type of the function\n+--       at the point of definition is a limited view. Used to handle the late\n+--       freezing of the function when it is called in the current semantic\n+--       unit while it is still unfrozen.\n \n --    Reverse_Bit_Order (Flag164) [base type only]\n --       Defined in all record type entities. Set if entity has a Bit_Order"}, {"sha": "022bc7656a86a3727815ed4ed39b7e30a871e773", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82701811fcb7027114db712f6b06b742fc5557d1/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82701811fcb7027114db712f6b06b742fc5557d1/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=82701811fcb7027114db712f6b06b742fc5557d1", "patch": "@@ -1382,6 +1382,9 @@ package body Inline is\n       --  Returns True if subprogram Id has any contract (Pre, Post, Global,\n       --  Depends, etc.)\n \n+      function Is_Unit_Subprogram (Id : Entity_Id) return Boolean;\n+      --  Returns True if subprogram Id defines a compilation unit\n+\n       function In_Package_Visible_Spec (Id : Node_Id) return Boolean;\n       --  Returns True if subprogram Id is defined in the visible part of a\n       --  package specification.\n@@ -1436,6 +1439,20 @@ package body Inline is\n          return Nkind (Original_Node (Decl)) = N_Expression_Function;\n       end Is_Expression_Function;\n \n+      ------------------------\n+      -- Is_Unit_Subprogram --\n+      ------------------------\n+\n+      function Is_Unit_Subprogram (Id : Entity_Id) return Boolean is\n+         Decl : Node_Id := Parent (Parent (Id));\n+      begin\n+         if Nkind (Parent (Id)) = N_Defining_Program_Unit_Name then\n+            Decl := Parent (Decl);\n+         end if;\n+\n+         return Nkind (Parent (Decl)) = N_Compilation_Unit;\n+      end Is_Unit_Subprogram;\n+\n       --  Local declarations\n \n       Id : Entity_Id;  --  Procedure or function entity for the subprogram\n@@ -1462,7 +1479,7 @@ package body Inline is\n \n       --  Do not inline unit-level subprograms\n \n-      if Nkind (Parent (Id)) = N_Defining_Program_Unit_Name then\n+      if Is_Unit_Subprogram (Id) then\n          return False;\n \n       --  Do not inline subprograms declared in the visible part of a package"}, {"sha": "d8478fa7b7a523ca4735f0f4a8450ab82a907fea", "filename": "gcc/ada/s-tarest.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82701811fcb7027114db712f6b06b742fc5557d1/gcc%2Fada%2Fs-tarest.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82701811fcb7027114db712f6b06b742fc5557d1/gcc%2Fada%2Fs-tarest.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tarest.adb?ref=82701811fcb7027114db712f6b06b742fc5557d1", "patch": "@@ -210,6 +210,7 @@ package body System.Tasking.Restricted.Stages is\n       Secondary_Stack : aliased SSE.Storage_Array\n         (1 .. Self_ID.Common.Compiler_Data.Pri_Stack_Info.Size *\n                 SSE.Storage_Offset (Parameters.Sec_Stack_Percentage) / 100);\n+      for Secondary_Stack'Alignment use Standard'Maximum_Alignment;\n \n       pragma Warnings (Off);\n       Secondary_Stack_Address : System.Address := Secondary_Stack'Address;"}, {"sha": "971879c5f23f0be8855b549a2a29fccf43dee319", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82701811fcb7027114db712f6b06b742fc5557d1/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82701811fcb7027114db712f6b06b742fc5557d1/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=82701811fcb7027114db712f6b06b742fc5557d1", "patch": "@@ -1052,6 +1052,7 @@ package body System.Tasking.Stages is\n             SSE.Storage_Offset (Parameters.Sec_Stack_Percentage) / 100;\n \n       Secondary_Stack : aliased SSE.Storage_Array (1 .. Secondary_Stack_Size);\n+      for Secondary_Stack'Alignment use Standard'Maximum_Alignment;\n       --  Actual area allocated for secondary stack\n \n       Secondary_Stack_Address : System.Address := Secondary_Stack'Address;"}, {"sha": "d94ae2621d645041c7bd7c70d7c47d0d797e6b96", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82701811fcb7027114db712f6b06b742fc5557d1/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82701811fcb7027114db712f6b06b742fc5557d1/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=82701811fcb7027114db712f6b06b742fc5557d1", "patch": "@@ -6909,6 +6909,7 @@ package body Sem_Ch3 is\n          --  and the full derivation can only be its underlying full view.\n \n          Build_Full_Derivation;\n+\n          if not Is_Completion then\n             Set_Full_View (Derived_Type, Full_Der);\n          else"}]}