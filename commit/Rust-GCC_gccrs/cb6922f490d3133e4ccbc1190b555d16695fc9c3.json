{"sha": "cb6922f490d3133e4ccbc1190b555d16695fc9c3", "node_id": "C_kwDOANBUbNoAKGNiNjkyMmY0OTBkMzEzM2U0Y2NiYzExOTBiNTU1ZDE2Njk1ZmM5YzM", "commit": {"author": {"name": "Prathamesh Kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2022-12-07T08:04:02Z"}, "committer": {"name": "Prathamesh Kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2022-12-07T08:04:18Z"}, "message": "PR107920: Fix handling of virtual operands and disable folding for -fnon-call-exceptions.\n\ngcc/ChangeLog:\n\tPR target/107920\n\t* config/aarch64/aarch64-sve-builtins-base.cc: Use\n\tgsi_replace_with_seq_vops to handle virtual operands, and gate\n\tthe transform on !flag_non_call_exceptions.\n\t* gimple-fold.cc (gsi_replace_with_seq_vops): Make function non static.\n\t* gimple-fold.h (gsi_replace_with_seq_vops): Declare.\n\ngcc/testsuite/ChangeLog:\n\tPR target/107920\n\t* gcc.target/aarch64/sve/acle/general/pr107920.c: New test.\n\t* g++.target/aarch64/sve/pr107920.C: Likewise.", "tree": {"sha": "7279983f3314ccab9af37b4b93e0088dd75a03e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7279983f3314ccab9af37b4b93e0088dd75a03e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb6922f490d3133e4ccbc1190b555d16695fc9c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb6922f490d3133e4ccbc1190b555d16695fc9c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb6922f490d3133e4ccbc1190b555d16695fc9c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb6922f490d3133e4ccbc1190b555d16695fc9c3/comments", "author": null, "committer": null, "parents": [{"sha": "da7fb32d403759daefefc79dc251d2437c1b638c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da7fb32d403759daefefc79dc251d2437c1b638c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da7fb32d403759daefefc79dc251d2437c1b638c"}], "stats": {"total": 47, "additions": 42, "deletions": 5}, "files": [{"sha": "d52ec083ed06b068739abdd579d7917f76a29e58", "filename": "gcc/config/aarch64/aarch64-sve-builtins-base.cc", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb6922f490d3133e4ccbc1190b555d16695fc9c3/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb6922f490d3133e4ccbc1190b555d16695fc9c3/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc?ref=cb6922f490d3133e4ccbc1190b555d16695fc9c3", "patch": "@@ -45,6 +45,7 @@\n #include \"aarch64-sve-builtins-base.h\"\n #include \"aarch64-sve-builtins-functions.h\"\n #include \"ssa.h\"\n+#include \"gimple-fold.h\"\n \n using namespace aarch64_sve;\n \n@@ -1209,7 +1210,8 @@ class svld1rq_impl : public load_replicate\n        vectype is the corresponding ADVSIMD type.  */\n \n     if (!BYTES_BIG_ENDIAN\n-\t&& integer_all_onesp (arg0))\n+\t&& integer_all_onesp (arg0)\n+\t&& !flag_non_call_exceptions)\n       {\n \ttree lhs = gimple_call_lhs (f.call);\n \ttree lhs_type = TREE_TYPE (lhs);\n@@ -1232,7 +1234,9 @@ class svld1rq_impl : public load_replicate\n \ttree mem_ref_op = fold_build2 (MEM_REF, access_type, arg1, zero);\n \tgimple *mem_ref_stmt\n \t  = gimple_build_assign (mem_ref_lhs, mem_ref_op);\n-\tgsi_insert_before (f.gsi, mem_ref_stmt, GSI_SAME_STMT);\n+\n+\tgimple_seq stmts = NULL;\n+\tgimple_seq_add_stmt_without_update (&stmts, mem_ref_stmt);\n \n \tint source_nelts = TYPE_VECTOR_SUBPARTS (access_type).to_constant ();\n \tvec_perm_builder sel (lhs_len, source_nelts, 1);\n@@ -1245,8 +1249,11 @@ class svld1rq_impl : public load_replicate\n \t\t\t\t\t\t   indices));\n \ttree mask_type = build_vector_type (ssizetype, lhs_len);\n \ttree mask = vec_perm_indices_to_tree (mask_type, indices);\n-\treturn gimple_build_assign (lhs, VEC_PERM_EXPR,\n-\t\t\t\t    mem_ref_lhs, mem_ref_lhs, mask);\n+\tgimple *g2 = gimple_build_assign (lhs, VEC_PERM_EXPR,\n+\t\t\t\t\t  mem_ref_lhs, mem_ref_lhs, mask);\n+\tgimple_seq_add_stmt_without_update (&stmts, g2);\n+\tgsi_replace_with_seq_vops (f.gsi, stmts);\n+\treturn g2;\n       }\n \n     return NULL;"}, {"sha": "c87e17f576398180e57340a5c47e1d3233fac105", "filename": "gcc/gimple-fold.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb6922f490d3133e4ccbc1190b555d16695fc9c3/gcc%2Fgimple-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb6922f490d3133e4ccbc1190b555d16695fc9c3/gcc%2Fgimple-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.cc?ref=cb6922f490d3133e4ccbc1190b555d16695fc9c3", "patch": "@@ -591,7 +591,7 @@ fold_gimple_assign (gimple_stmt_iterator *si)\n    If the statement has a lhs the last stmt in the sequence is expected\n    to assign to that lhs.  */\n \n-static void\n+void\n gsi_replace_with_seq_vops (gimple_stmt_iterator *si_p, gimple_seq stmts)\n {\n   gimple *stmt = gsi_stmt (*si_p);"}, {"sha": "87ed4e56d2570dd6c31d91d2f6b06dc81366fe0a", "filename": "gcc/gimple-fold.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb6922f490d3133e4ccbc1190b555d16695fc9c3/gcc%2Fgimple-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb6922f490d3133e4ccbc1190b555d16695fc9c3/gcc%2Fgimple-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.h?ref=cb6922f490d3133e4ccbc1190b555d16695fc9c3", "patch": "@@ -63,6 +63,7 @@ extern bool arith_code_with_undefined_signed_overflow (tree_code);\n extern gimple_seq rewrite_to_defined_overflow (gimple *, bool = false);\n extern void replace_call_with_value (gimple_stmt_iterator *, tree);\n extern tree tree_vec_extract (gimple_stmt_iterator *, tree, tree, tree, tree);\n+extern void gsi_replace_with_seq_vops (gimple_stmt_iterator *, gimple_seq);\n \n /* gimple_build, functionally matching fold_buildN, outputs stmts\n    int the provided sequence, matching and simplifying them on-the-fly."}, {"sha": "179b2b605bc4d6d4bda8a214c2f9d97cbb2599bf", "filename": "gcc/testsuite/g++.target/aarch64/sve/pr107920.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb6922f490d3133e4ccbc1190b555d16695fc9c3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fpr107920.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb6922f490d3133e4ccbc1190b555d16695fc9c3/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fpr107920.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fpr107920.C?ref=cb6922f490d3133e4ccbc1190b555d16695fc9c3", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fnon-call-exceptions\" } */\n+\n+#include \"arm_sve.h\"\n+\n+svint8_t\n+test_s8(int8_t *x)\n+{\n+  try\n+    {\n+      return svld1rq_s8 (svptrue_b8 (), &x[0]);\n+    }\n+  catch (...)\n+    {\n+      return svdup_s8 (1);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler \"__cxa_begin_catch\" } } */"}, {"sha": "11448ed5e68585729061c3e5e4d72fe6d56d412e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general/pr107920.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb6922f490d3133e4ccbc1190b555d16695fc9c3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fpr107920.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb6922f490d3133e4ccbc1190b555d16695fc9c3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fpr107920.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fpr107920.c?ref=cb6922f490d3133e4ccbc1190b555d16695fc9c3", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fno-tree-ccp -fno-tree-forwprop\" } */\n+\n+#include \"arm_sve.h\"\n+\n+svint8_t\n+test_s8(int8_t *x)\n+{\n+  return svld1rq_s8 (svptrue_b8 (), &x[0]);\n+}"}]}