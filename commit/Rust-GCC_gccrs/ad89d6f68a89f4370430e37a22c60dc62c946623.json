{"sha": "ad89d6f68a89f4370430e37a22c60dc62c946623", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ4OWQ2ZjY4YTg5ZjQzNzA0MzBlMzdhMjJjNjBkYzYyYzk0NjYyMw==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-04-03T23:19:02Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-04-03T23:19:02Z"}, "message": "(simplify_unary_operation): Sign-extend constants when they have the most significant bit set for the target.\n\n(simplify_unary_operation): Sign-extend constants when\nthey have the most significant bit set for the target.\n(simplify_binary_operation): Likewise.\n\nFrom-SVN: r9309", "tree": {"sha": "cf19dc2e9813ce9aa65a7242b50319789111bb79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf19dc2e9813ce9aa65a7242b50319789111bb79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad89d6f68a89f4370430e37a22c60dc62c946623", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad89d6f68a89f4370430e37a22c60dc62c946623", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad89d6f68a89f4370430e37a22c60dc62c946623", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad89d6f68a89f4370430e37a22c60dc62c946623/comments", "author": null, "committer": null, "parents": [{"sha": "2e14370ed42be496fb7a5f2d803824a01a646abe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e14370ed42be496fb7a5f2d803824a01a646abe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e14370ed42be496fb7a5f2d803824a01a646abe"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "b9da9050dbfd015229dd33421f95b9cbeea0e921", "filename": "gcc/cse.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad89d6f68a89f4370430e37a22c60dc62c946623/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad89d6f68a89f4370430e37a22c60dc62c946623/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=ad89d6f68a89f4370430e37a22c60dc62c946623", "patch": "@@ -3266,6 +3266,19 @@ simplify_unary_operation (code, mode, op, op_mode)\n \t      != ((HOST_WIDE_INT) (-1) << (width - 1))))\n \tval &= ((HOST_WIDE_INT) 1 << width) - 1;\n \n+      /* If this would be an entire word for the target, but is not for\n+\t the host, then sign-extend on the host so that the number will look\n+\t the same way on the host that it would on the target.\n+\n+\t For example, when building a 64 bit alpha hosted 32 bit sparc\n+\t targeted compiler, then we want the 32 bit unsigned value -1 to be\n+\t represented as a 64 bit value -1, and not as 0x00000000ffffffff.\n+\t The later confuses the sparc backend.  */\n+\n+      if (BITS_PER_WORD < HOST_BITS_PER_WIDE_INT && BITS_PER_WORD == width\n+\t  && (val & ((HOST_WIDE_INT) 1 << (width - 1))))\n+\tval |= ((HOST_WIDE_INT) (-1) << width);\n+\n       return GEN_INT (val);\n     }\n #endif\n@@ -4126,6 +4139,19 @@ simplify_binary_operation (code, mode, op0, op1)\n \t  != ((HOST_WIDE_INT) (-1) << (width - 1))))\n     val &= ((HOST_WIDE_INT) 1 << width) - 1;\n \n+  /* If this would be an entire word for the target, but is not for\n+     the host, then sign-extend on the host so that the number will look\n+     the same way on the host that it would on the target.\n+\n+     For example, when building a 64 bit alpha hosted 32 bit sparc\n+     targeted compiler, then we want the 32 bit unsigned value -1 to be\n+     represented as a 64 bit value -1, and not as 0x00000000ffffffff.\n+     The later confuses the sparc backend.  */\n+\n+  if (BITS_PER_WORD < HOST_BITS_PER_WIDE_INT && BITS_PER_WORD == width\n+      && (val & ((HOST_WIDE_INT) 1 << (width - 1))))\n+    val |= ((HOST_WIDE_INT) (-1) << width);\n+\n   return GEN_INT (val);\n }\n \f"}]}