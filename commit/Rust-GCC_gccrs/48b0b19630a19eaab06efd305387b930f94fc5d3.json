{"sha": "48b0b19630a19eaab06efd305387b930f94fc5d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhiMGIxOTYzMGExOWVhYWIwNmVmZDMwNTM4N2I5MzBmOTRmYzVkMw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-12-20T20:44:13Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-12-20T20:44:13Z"}, "message": "gcc:\n\n\t* c-decl.c (diagnose_mismatched_decls, grokdeclarator, grokfield)\n\t(finish_struct): Refer to C11 in comments.  Use flag_isoc11.\n\t* c-parser.c (c_parser_static_assert_declaration)\n\t(c_parser_static_assert_declaration_no_semi, c_parser_declspecs)\n\t(c_parser_alignas_specifier, c_parser_alignof_expression): Refer\n\tto C11 in comments.  Use flag_isoc11.\n\t* c-typeck.c (comptypes_check_different_types): Refer to C11 in\n\tcomment.\n\t* doc/cpp.texi (Overview): Refer to -std=c11 instead of -std=c1x.\n\t* doc/cppopts.texi (-std=c11, -std=gnu11): Document in preference\n\tto -std=c1x and -std=gnu1x.\n\t* doc/extend.texi (Inline, Alternate Keywords, Other Builtins)\n\t(__builtin_complex, Unnamed Fields): Refer to -std=c11 and C11\n\tinstead of -std=c1x and C1X.\n\t* doc/invoke.texi (-std=c11, -std=iso9899:2011): Document in\n\tpreference to -std=c1x.\n\t(-std=gnu11): Document in preference to -std=gnu1x.\n\t* doc/standards.texi: Document C11 instead of C1X.  Document C11\n\tas actual standard.  Document headers required from freestanding\n\tC11 implementations.\n\t* ginclude/float.h, ginclude/stddef.h: Test __STDC_VERSION__ >=\n\t201112L for C11.  Update comments to refer to C11.\n\ngcc/c-family:\n\t* c-common.c (flag_isoc99): Update comment to refer to C11.\n\t(flag_isoc1x): Change to flag_isoc11.\n\t* c-common.h (flag_isoc99): Update comment to refer to C11.\n\t(flag_isoc1x): Change to flag_isoc11.\n\t* c-cppbuiltin.c (cpp_atomic_builtins): Change comment to refer to\n\tC11.\n\t* c-opts.c (set_std_c1x): Change to set_std_c11.\n\t(c_common_handle_option): Handle OPT_std_c11 and OPT_std_gnu11.\n\tCall set_std_c11.\n\t(set_std_c89, set_std_c99, set_std_c11): Use flag_isoc11.\n\t(set_std_c1): Use CLK_STDC11 and CLK_GNUC11.\n\t* c.opt (std=c1x): Change to std=c11.  Document as non-draft\n\tstandard.\n\t(std=c1x, std=iso9899:2011): Add as aliases of std=c11.\n\t(std=gnu1x): Change to std=gnu11.  Refer to non-draft standard.\n\t(std=gnu1x): Make alias of std=gnu11.\n\ngcc/testsuite:\n\t* gcc.dg/c11-version-1.c, gcc.dg/c11-version-2.c,\n\tgcc.dg/c94-version-1.c, gcc.dg/c99-version-1.c,\n\tgcc.dg/gnu11-version-1.c: New tests.\n\nlibcpp:\n\t* include/cpplib.h (CLK_GNUC1X): Change to CLK_GNUC11.\n\t(CLK_STDC1X): Change to CLK_STDC11.\n\t* init.c (lang_defaults): Update comments.\n\t(cpp_init_builtins): Update language tests.  Use 201112L for C11\n\t__STDC_VERSION__.\n\nFrom-SVN: r182551", "tree": {"sha": "79d9fc73e458081edfd36bdc00b3cb1ba3d1c859", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79d9fc73e458081edfd36bdc00b3cb1ba3d1c859"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48b0b19630a19eaab06efd305387b930f94fc5d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b0b19630a19eaab06efd305387b930f94fc5d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48b0b19630a19eaab06efd305387b930f94fc5d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b0b19630a19eaab06efd305387b930f94fc5d3/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8fa39bfc87c62cdd4970027dedbd982cc2049e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8fa39bfc87c62cdd4970027dedbd982cc2049e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8fa39bfc87c62cdd4970027dedbd982cc2049e1"}], "stats": {"total": 287, "additions": 207, "deletions": 80}, "files": [{"sha": "ad53a035ba96fdb25f32d925d029556dc660a8ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48b0b19630a19eaab06efd305387b930f94fc5d3", "patch": "@@ -1,3 +1,28 @@\n+2011-12-20  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-decl.c (diagnose_mismatched_decls, grokdeclarator, grokfield)\n+\t(finish_struct): Refer to C11 in comments.  Use flag_isoc11.\n+\t* c-parser.c (c_parser_static_assert_declaration)\n+\t(c_parser_static_assert_declaration_no_semi, c_parser_declspecs)\n+\t(c_parser_alignas_specifier, c_parser_alignof_expression): Refer\n+\tto C11 in comments.  Use flag_isoc11.\n+\t* c-typeck.c (comptypes_check_different_types): Refer to C11 in\n+\tcomment.\n+\t* doc/cpp.texi (Overview): Refer to -std=c11 instead of -std=c1x.\n+\t* doc/cppopts.texi (-std=c11, -std=gnu11): Document in preference\n+\tto -std=c1x and -std=gnu1x.\n+\t* doc/extend.texi (Inline, Alternate Keywords, Other Builtins)\n+\t(__builtin_complex, Unnamed Fields): Refer to -std=c11 and C11\n+\tinstead of -std=c1x and C1X.\n+\t* doc/invoke.texi (-std=c11, -std=iso9899:2011): Document in\n+\tpreference to -std=c1x.\n+\t(-std=gnu11): Document in preference to -std=gnu1x.\n+\t* doc/standards.texi: Document C11 instead of C1X.  Document C11\n+\tas actual standard.  Document headers required from freestanding\n+\tC11 implementations.\n+\t* ginclude/float.h, ginclude/stddef.h: Test __STDC_VERSION__ >=\n+\t201112L for C11.  Update comments to refer to C11.\n+\n 2011-12-20  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* configure: Regenerate."}, {"sha": "96e9c7d17534c33d452519a82a33281e90fa6a69", "filename": "gcc/c-decl.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=48b0b19630a19eaab06efd305387b930f94fc5d3", "patch": "@@ -1786,7 +1786,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n   /* Redeclaration of a type is a constraint violation (6.7.2.3p1),\n      but silently ignore the redeclaration if either is in a system\n      header.  (Conflicting redeclarations were handled above.)  This\n-     is allowed for C1X if the types are the same, not just\n+     is allowed for C11 if the types are the same, not just\n      compatible.  */\n   if (TREE_CODE (newdecl) == TYPE_DECL)\n     {\n@@ -1815,7 +1815,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t\t newdecl);\n \t  locate_old_decl (olddecl);\n \t}\n-      else if (pedantic && !flag_isoc1x)\n+      else if (pedantic && !flag_isoc11)\n \t{\n \t  pedwarn (input_location, OPT_pedantic,\n \t\t   \"redefinition of typedef %q+D\", newdecl);\n@@ -6077,7 +6077,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t      DECL_DECLARED_INLINE_P (decl) = 1;\n \t    if (declspecs->noreturn_p)\n \t      {\n-\t\tif (!flag_isoc1x)\n+\t\tif (!flag_isoc11)\n \t\t  {\n \t\t    if (flag_isoc99)\n \t\t      pedwarn (loc, OPT_pedantic,\n@@ -6761,7 +6761,7 @@ grokfield (location_t loc,\n \n \t If this is something of the form \"foo;\" and foo is a TYPE_DECL, then\n \t   If foo names a structure or union without a tag, then this\n-\t     is an anonymous struct (this is permitted by C1X).\n+\t     is an anonymous struct (this is permitted by C11).\n \t   If MS or Plan 9 extensions are enabled and foo names a\n \t     structure, then again this is an anonymous struct.\n \t   Otherwise this is an error.\n@@ -6792,7 +6792,7 @@ grokfield (location_t loc,\n \t  pedwarn (loc, 0, \"declaration does not declare anything\");\n \t  return NULL_TREE;\n \t}\n-      if (!flag_isoc1x)\n+      if (!flag_isoc11)\n \t{\n \t  if (flag_isoc99)\n \t    pedwarn (loc, OPT_pedantic,\n@@ -7072,7 +7072,7 @@ finish_struct (location_t loc, tree t, tree fieldlist, tree attributes,\n \t{\n \t  if (DECL_NAME (x) != 0)\n \t    break;\n-\t  if (flag_isoc1x\n+\t  if (flag_isoc11\n \t      && (TREE_CODE (TREE_TYPE (x)) == RECORD_TYPE\n \t\t  || TREE_CODE (TREE_TYPE (x)) == UNION_TYPE))\n \t    break;"}, {"sha": "b076e7602f3764ae24b7880434a89e2ab17a51ce", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=48b0b19630a19eaab06efd305387b930f94fc5d3", "patch": "@@ -1,3 +1,22 @@\n+2011-12-20  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c (flag_isoc99): Update comment to refer to C11.\n+\t(flag_isoc1x): Change to flag_isoc11.\n+\t* c-common.h (flag_isoc99): Update comment to refer to C11.\n+\t(flag_isoc1x): Change to flag_isoc11.\n+\t* c-cppbuiltin.c (cpp_atomic_builtins): Change comment to refer to\n+\tC11.\n+\t* c-opts.c (set_std_c1x): Change to set_std_c11.\n+\t(c_common_handle_option): Handle OPT_std_c11 and OPT_std_gnu11.\n+\tCall set_std_c11.\n+\t(set_std_c89, set_std_c99, set_std_c11): Use flag_isoc11.\n+\t(set_std_c1): Use CLK_STDC11 and CLK_GNUC11.\n+\t* c.opt (std=c1x): Change to std=c11.  Document as non-draft\n+\tstandard.\n+\t(std=c1x, std=iso9899:2011): Add as aliases of std=c11.\n+\t(std=gnu1x): Change to std=gnu11.  Refer to non-draft standard.\n+\t(std=gnu1x): Make alias of std=gnu11.\n+\n 2011-12-19  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/51228"}, {"sha": "6f88760c9476bc7ed55b8eb271b16c3312bf5d44", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=48b0b19630a19eaab06efd305387b930f94fc5d3", "patch": "@@ -216,13 +216,13 @@ int flag_cond_mismatch;\n \n int flag_isoc94;\n \n-/* Nonzero means use the ISO C99 (or C1X) dialect of C.  */\n+/* Nonzero means use the ISO C99 (or C11) dialect of C.  */\n \n int flag_isoc99;\n \n-/* Nonzero means use the ISO C1X dialect of C.  */\n+/* Nonzero means use the ISO C11 dialect of C.  */\n \n-int flag_isoc1x;\n+int flag_isoc11;\n \n /* Nonzero means that we have builtin functions, and main is an int.  */\n "}, {"sha": "835b13bbce8bb1798df73de89ba4f861fd31cbae", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=48b0b19630a19eaab06efd305387b930f94fc5d3", "patch": "@@ -106,7 +106,7 @@ enum rid\n   RID_DFLOAT32, RID_DFLOAT64, RID_DFLOAT128,\n   RID_FRACT, RID_ACCUM,\n \n-  /* C1X */\n+  /* C11 */\n   RID_ALIGNAS,\n \n   /* This means to warn that this is a C++ keyword, and then treat it\n@@ -607,13 +607,13 @@ extern int flag_cond_mismatch;\n \n extern int flag_isoc94;\n \n-/* Nonzero means use the ISO C99 (or C1X) dialect of C.  */\n+/* Nonzero means use the ISO C99 (or C11) dialect of C.  */\n \n extern int flag_isoc99;\n \n-/* Nonzero means use the ISO C1X dialect of C.  */\n+/* Nonzero means use the ISO C11 dialect of C.  */\n \n-extern int flag_isoc1x;\n+extern int flag_isoc11;\n \n /* Nonzero means that we have builtin functions, and main is an int.  */\n "}, {"sha": "7e7b9c158767813309bd3051d4a2b147f7522650", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=48b0b19630a19eaab06efd305387b930f94fc5d3", "patch": "@@ -646,7 +646,7 @@ cpp_atomic_builtins (cpp_reader *pfile)\n       have_swap[16] = true;\n     }\n \n-  /* Tell the source code about various types.  These map to the C++11 and C1x\n+  /* Tell the source code about various types.  These map to the C++11 and C11\n      macros where 2 indicates lock-free always, and 1 indicates sometimes\n      lock free.  */\n #define SIZEOF_NODE(T) (tree_low_cst (TYPE_SIZE_UNIT (T), 1))"}, {"sha": "3a4d8a87f62d17313cf1da8bb65c5f48586e3a36", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=48b0b19630a19eaab06efd305387b930f94fc5d3", "patch": "@@ -113,7 +113,7 @@ static void set_std_cxx98 (int);\n static void set_std_cxx11 (int);\n static void set_std_c89 (int, int);\n static void set_std_c99 (int);\n-static void set_std_c1x (int);\n+static void set_std_c11 (int);\n static void check_deps_environment_vars (void);\n static void handle_deferred_opts (void);\n static void sanitize_cpp_opts (void);\n@@ -799,14 +799,14 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n \tset_std_c99 (false /* ISO */);\n       break;\n \n-    case OPT_std_c1x:\n+    case OPT_std_c11:\n       if (!preprocessing_asm_p)\n-\tset_std_c1x (true /* ISO */);\n+\tset_std_c11 (true /* ISO */);\n       break;\n \n-    case OPT_std_gnu1x:\n+    case OPT_std_gnu11:\n       if (!preprocessing_asm_p)\n-\tset_std_c1x (false /* ISO */);\n+\tset_std_c11 (false /* ISO */);\n       break;\n \n     case OPT_trigraphs:\n@@ -1465,7 +1465,7 @@ set_std_c89 (int c94, int iso)\n   flag_no_nonansi_builtin = iso;\n   flag_isoc94 = c94;\n   flag_isoc99 = 0;\n-  flag_isoc1x = 0;\n+  flag_isoc11 = 0;\n }\n \n /* Set the C 99 standard (without GNU extensions if ISO).  */\n@@ -1476,20 +1476,20 @@ set_std_c99 (int iso)\n   flag_no_asm = iso;\n   flag_no_nonansi_builtin = iso;\n   flag_iso = iso;\n-  flag_isoc1x = 0;\n+  flag_isoc11 = 0;\n   flag_isoc99 = 1;\n   flag_isoc94 = 1;\n }\n \n-/* Set the C 1X standard draft (without GNU extensions if ISO).  */\n+/* Set the C 11 standard (without GNU extensions if ISO).  */\n static void\n-set_std_c1x (int iso)\n+set_std_c11 (int iso)\n {\n-  cpp_set_lang (parse_in, iso ? CLK_STDC1X: CLK_GNUC1X);\n+  cpp_set_lang (parse_in, iso ? CLK_STDC11: CLK_GNUC11);\n   flag_no_asm = iso;\n   flag_no_nonansi_builtin = iso;\n   flag_iso = iso;\n-  flag_isoc1x = 1;\n+  flag_isoc11 = 1;\n   flag_isoc99 = 1;\n   flag_isoc94 = 1;\n }"}, {"sha": "42c9a0dfc665cf915c4753fbd71f15f820e42414", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=48b0b19630a19eaab06efd305387b930f94fc5d3", "patch": "@@ -1191,9 +1191,13 @@ std=c++0x\n C++ ObjC++ Alias(std=c++11)\n Deprecated in favor of -std=c++11\n \n-std=c1x\n+std=c11\n C ObjC\n-Conform to the ISO 201X C standard draft (experimental and incomplete support)\n+Conform to the ISO 2011 C standard (experimental and incomplete support)\n+\n+std=c1x\n+C ObjC Alias(std=c11)\n+Deprecated in favor of -std=c11\n \n std=c89\n C ObjC Alias(std=c90)\n@@ -1229,9 +1233,13 @@ std=gnu++0x\n C++ ObjC++ Alias(std=gnu++11)\n Deprecated in favor of -std=gnu++11\n \n-std=gnu1x\n+std=gnu11\n C ObjC\n-Conform to the ISO 201X C standard draft with GNU extensions (experimental and incomplete support)\n+Conform to the ISO 2011 C standard with GNU extensions (experimental and incomplete support)\n+\n+std=gnu1x\n+C ObjC Alias(std=gnu11)\n+Deprecated in favor of -std=gnu11\n \n std=gnu89\n C ObjC Alias(std=gnu90)\n@@ -1265,6 +1273,10 @@ std=iso9899:199x\n C ObjC Alias(std=c99)\n Deprecated in favor of -std=iso9899:1999\n \n+std=iso9899:2011\n+C ObjC Alias(std=c11)\n+Conform to the ISO 2011 C standard (experimental and incomplete support)\n+\n traditional\n Driver\n "}, {"sha": "867ab4183ad3bac5ee223ffff46f4a94b8f4ca18", "filename": "gcc/c-parser.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=48b0b19630a19eaab06efd305387b930f94fc5d3", "patch": "@@ -1796,7 +1796,7 @@ c_parser_asm_definition (c_parser *parser)\n   c_parser_skip_until_found (parser, CPP_SEMICOLON, \"expected %<;%>\");\n }\n \n-/* Parse a static assertion (C1X N1425 6.7.10).\n+/* Parse a static assertion (C11 6.7.10).\n \n    static_assert-declaration:\n      static_assert-declaration-no-semi ;\n@@ -1811,7 +1811,7 @@ c_parser_static_assert_declaration (c_parser *parser)\n     c_parser_skip_to_end_of_block_or_statement (parser);\n }\n \n-/* Parse a static assertion (C1X N1425 6.7.10), without the trailing\n+/* Parse a static assertion (C11 6.7.10), without the trailing\n    semicolon.\n \n    static_assert-declaration-no-semi:\n@@ -1827,7 +1827,7 @@ c_parser_static_assert_declaration_no_semi (c_parser *parser)\n \n   gcc_assert (c_parser_next_token_is_keyword (parser, RID_STATIC_ASSERT));\n   assert_loc = c_parser_peek_token (parser)->location;\n-  if (!flag_isoc1x)\n+  if (!flag_isoc11)\n     {\n       if (flag_isoc99)\n \tpedwarn (assert_loc, OPT_pedantic,\n@@ -1902,7 +1902,7 @@ c_parser_static_assert_declaration_no_semi (c_parser *parser)\n \n    Function specifiers (inline) are from C99, and are currently\n    handled as storage class specifiers, as is __thread.  Alignment\n-   specifiers are from C1X.\n+   specifiers are from C11.\n \n    C90 6.5.1, C99 6.7.1:\n    storage-class-specifier:\n@@ -1917,7 +1917,7 @@ c_parser_static_assert_declaration_no_semi (c_parser *parser)\n      inline\n      _Noreturn\n \n-   (_Noreturn is new in C1X.)\n+   (_Noreturn is new in C11.)\n \n    C90 6.5.2, C99 6.7.2:\n    type-specifier:\n@@ -2768,7 +2768,7 @@ c_parser_typeof_specifier (c_parser *parser)\n \n /* Parse an alignment-specifier.\n \n-   C1X 6.7.5:\n+   C11 6.7.5:\n \n    alignment-specifier:\n      _Alignas ( type-name )\n@@ -2782,7 +2782,7 @@ c_parser_alignas_specifier (c_parser * parser)\n   location_t loc = c_parser_peek_token (parser)->location;\n   gcc_assert (c_parser_next_token_is_keyword (parser, RID_ALIGNAS));\n   c_parser_consume_token (parser);\n-  if (!flag_isoc1x)\n+  if (!flag_isoc11)\n     {\n       if (flag_isoc99)\n \tpedwarn (loc, OPT_pedantic,\n@@ -5841,7 +5841,7 @@ c_parser_cast_expression (c_parser *parser, struct c_expr *after)\n      __alignof__ ( type-name )\n      && identifier\n \n-   (C1X permits _Alignof with type names only.)\n+   (C11 permits _Alignof with type names only.)\n \n    unary-operator: one of\n      __extension__ __real__ __imag__\n@@ -6038,9 +6038,9 @@ c_parser_alignof_expression (c_parser *parser)\n   tree alignof_spelling = c_parser_peek_token (parser)->value;\n   gcc_assert (c_parser_next_token_is_keyword (parser, RID_ALIGNOF));\n   /* A diagnostic is not required for the use of this identifier in\n-     the implementation namespace; only diagnose it for the C1X\n+     the implementation namespace; only diagnose it for the C11\n      spelling because of existing code using the other spellings.  */\n-  if (!flag_isoc1x\n+  if (!flag_isoc11\n       && strcmp (IDENTIFIER_POINTER (alignof_spelling), \"_Alignof\") == 0)\n     {\n       if (flag_isoc99)"}, {"sha": "b696e5e38beb933c0ca32c26c0a80d38c3edb092", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=48b0b19630a19eaab06efd305387b930f94fc5d3", "patch": "@@ -1014,7 +1014,7 @@ comptypes_check_different_types (tree type1, tree type2,\n    compatible integer type, then this sets *ENUM_AND_INT_P to true;\n    *ENUM_AND_INT_P is never set to false.  If DIFFERENT_TYPES_P is not\n    NULL, and the types are compatible but different enough not to be\n-   permitted in C1X typedef redeclarations, then this sets\n+   permitted in C11 typedef redeclarations, then this sets\n    *DIFFERENT_TYPES_P to true; *DIFFERENT_TYPES_P is never set to\n    false, but may or may not be set if the types are incompatible.\n    This differs from comptypes, in that we don't free the seen"}, {"sha": "230d32bdfc0ba156497b616e9b35922e858dc681", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=48b0b19630a19eaab06efd305387b930f94fc5d3", "patch": "@@ -216,7 +216,7 @@ few things required by the standard.  These are features which are\n rarely, if ever, used, and may cause surprising changes to the meaning\n of a program which does not expect them.  To get strict ISO Standard C,\n you should use the @option{-std=c90}, @option{-std=c99} or\n-@option{-std=c1x} options, depending\n+@option{-std=c11} options, depending\n on which version of the standard you want.  To get all the mandatory\n diagnostics, you must also use @option{-pedantic}.  @xref{Invocation}.\n "}, {"sha": "205d87088335ed524eeb90c28a5d0fd0143874ca", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=48b0b19630a19eaab06efd305387b930f94fc5d3", "patch": "@@ -392,8 +392,11 @@ The 1990 C standard, as amended in 1994.\n The revised ISO C standard, published in December 1999.  Before\n publication, this was known as C9X@.\n \n-@item c1x\n-The next version of the ISO C standard, still under development.\n+@item iso9899:2011\n+@itemx c11\n+@itemx c1x\n+The revised ISO C standard, published in December 2011.  Before\n+publication, this was known as C1X@.\n \n @item gnu90\n @itemx gnu89\n@@ -403,9 +406,9 @@ The 1990 C standard plus GNU extensions.  This is the default.\n @itemx gnu9x\n The 1999 C standard plus GNU extensions.\n \n-@item gnu1x\n-The next version of the ISO C standard, still under development, plus\n-GNU extensions.\n+@item gnu11\n+@itemx gnu1x\n+The 2011 C standard plus GNU extensions.\n \n @item c++98\n The 1998 ISO C++ standard plus amendments."}, {"sha": "6c904c10030911ec75d80d004817c5e3a395063b", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=48b0b19630a19eaab06efd305387b930f94fc5d3", "patch": "@@ -5298,8 +5298,8 @@ GCC implements three different semantics of declaring a function\n inline.  One is available with @option{-std=gnu89} or\n @option{-fgnu89-inline} or when @code{gnu_inline} attribute is present\n on all inline declarations, another when\n-@option{-std=c99}, @option{-std=c1x},\n-@option{-std=gnu99} or @option{-std=gnu1x}\n+@option{-std=c99}, @option{-std=c11},\n+@option{-std=gnu99} or @option{-std=gnu11}\n (without @option{-fgnu89-inline}), and the third\n is used when compiling C++.\n \n@@ -6313,7 +6313,7 @@ a general-purpose header file that should be usable by all programs,\n including ISO C programs.  The keywords @code{asm}, @code{typeof} and\n @code{inline} are not available in programs compiled with\n @option{-ansi} or @option{-std} (although @code{inline} can be used in a\n-program compiled with @option{-std=c99} or @option{-std=c1x}).  The\n+program compiled with @option{-std=c99} or @option{-std=c11}).  The\n ISO C99 keyword\n @code{restrict} is only available when @option{-std=gnu99} (which will\n eventually be the default) or @option{-std=c99} (or the equivalent\n@@ -7623,7 +7623,7 @@ be emitted.\n @opindex ansi\n @opindex std\n Outside strict ISO C mode (@option{-ansi}, @option{-std=c90},\n-@option{-std=c99} or @option{-std=c1x}), the functions\n+@option{-std=c99} or @option{-std=c11}), the functions\n @code{_exit}, @code{alloca}, @code{bcmp}, @code{bzero},\n @code{dcgettext}, @code{dgettext}, @code{dremf}, @code{dreml},\n @code{drem}, @code{exp10f}, @code{exp10l}, @code{exp10}, @code{ffsll},\n@@ -7843,7 +7843,7 @@ future revisions.\n @deftypefn {Built-in Function} @var{type} __builtin_complex (@var{real}, @var{imag})\n \n The built-in function @code{__builtin_complex} is provided for use in\n-implementing the ISO C1X macros @code{CMPLXF}, @code{CMPLX} and\n+implementing the ISO C11 macros @code{CMPLXF}, @code{CMPLX} and\n @code{CMPLXL}.  @var{real} and @var{imag} must have the same type, a\n real binary floating-point type, and the result has the corresponding\n complex type with real and imaginary parts @var{real} and @var{imag}.\n@@ -14123,7 +14123,7 @@ versions earlier than 4.4.\n @cindex @code{struct}\n @cindex @code{union}\n \n-As permitted by ISO C1X and for compatibility with other compilers,\n+As permitted by ISO C11 and for compatibility with other compilers,\n GCC allows you to define\n a structure or union that contains, as fields, structures and unions\n without names.  For example:"}, {"sha": "36c37e081ee5c067a63d283c35ef000737ef90f9", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=48b0b19630a19eaab06efd305387b930f94fc5d3", "patch": "@@ -1557,11 +1557,12 @@ ISO C99.  Note that this standard is not yet fully supported; see\n @w{@uref{http://gcc.gnu.org/c99status.html}} for more information.  The\n names @samp{c9x} and @samp{iso9899:199x} are deprecated.\n \n-@item c1x\n-ISO C1X, the draft of the next revision of the ISO C standard.\n-Support is limited and experimental and features enabled by this\n-option may be changed or removed if changed in or removed from the\n-standard draft.\n+@item c11\n+@itemx c1x\n+@itemx iso9899:2011\n+ISO C11, the 2011 revision of the ISO C standard.\n+Support is incomplete and experimental.  The name @samp{c1x} is\n+deprecated.\n \n @item gnu90\n @itemx gnu89\n@@ -1573,10 +1574,10 @@ is the default for C code.\n GNU dialect of ISO C99.  When ISO C99 is fully implemented in GCC,\n this will become the default.  The name @samp{gnu9x} is deprecated.\n \n+@item gnu11\n @item gnu1x\n-GNU dialect of ISO C1X.  Support is limited and experimental and\n-features enabled by this option may be changed or removed if changed\n-in or removed from the standard draft.\n+GNU dialect of ISO C11.  Support is incomplete and experimental.  The\n+name @samp{gnu1x} is deprecated.\n \n @item c++98\n The 1998 ISO C++ standard plus amendments. Same as @option{-ansi} for"}, {"sha": "4e288c64c2fce056ff030b0979214d67af16748b", "filename": "gcc/doc/standards.texi", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fdoc%2Fstandards.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fdoc%2Fstandards.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fstandards.texi?ref=48b0b19630a19eaab06efd305387b930f94fc5d3", "patch": "@@ -33,6 +33,8 @@ with some exceptions, and possibly with some extensions.\n @cindex C99\n @cindex ISO C9X\n @cindex C9X\n+@cindex ISO C11\n+@cindex C11\n @cindex ISO C1X\n @cindex C1X\n @cindex Technical Corrigenda\n@@ -95,9 +97,11 @@ Errors in the 1999 ISO C standard were corrected in three Technical\n Corrigenda published in 2001, 2004 and 2007.  GCC does not support the\n uncorrected version.\n \n-A fourth version of the C standard, known as @dfn{C1X}, is under\n-development; GCC has limited preliminary support for parts of this\n-standard, enabled with @option{-std=c1x}.\n+A fourth version of the C standard, known as @dfn{C11}, was published\n+in 2011 as ISO/IEC 9899:2011.  GCC has limited incomplete support for\n+parts of this standard, enabled with @option{-std=c11} or\n+@option{-std=iso9899:2011}.  (While in development, drafts of this\n+standard version were referred to as @dfn{C1X}.)\n \n By default, GCC provides some extensions to the C language that on\n rare occasions conflict with the C standard.  @xref{C\n@@ -106,21 +110,24 @@ Extensions,,Extensions to the C Language Family}.  Use of the\n they conflict with the C standard version selected.  You may also\n select an extended version of the C language explicitly with\n @option{-std=gnu90} (for C90 with GNU extensions), @option{-std=gnu99}\n-(for C99 with GNU extensions) or @option{-std=gnu1x} (for C1X with GNU\n+(for C99 with GNU extensions) or @option{-std=gnu11} (for C11 with GNU\n extensions).  The default, if no C language dialect\n options are given, is @option{-std=gnu90}; this will change to\n-@option{-std=gnu99} in some future release when the C99 support is\n+@option{-std=gnu99} or @option{-std=gnu11} in some future release when\n+the C99 or C11 support is\n complete.  Some features that are part of the C99 standard are\n-accepted as extensions in C90 mode.\n+accepted as extensions in C90 mode, and some features that are part of\n+the C11 standard are accepted as extensions in C90 and C99 modes.\n \n The ISO C standard defines (in clause 4) two classes of conforming\n implementation.  A @dfn{conforming hosted implementation} supports the\n whole standard including all the library facilities; a @dfn{conforming\n freestanding implementation} is only required to provide certain\n library facilities: those in @code{<float.h>}, @code{<limits.h>},\n @code{<stdarg.h>}, and @code{<stddef.h>}; since AMD1, also those in\n-@code{<iso646.h>}; and in C99, also those in @code{<stdbool.h>} and\n-@code{<stdint.h>}.  In addition, complex types, added in C99, are not\n+@code{<iso646.h>}; since C99, also those in @code{<stdbool.h>} and\n+@code{<stdint.h>}; and since C11, also those in @code{<stdalign.h>}\n+and @code{<stdnoreturn.h>}.  In addition, complex types, added in C99, are not\n required for freestanding implementations.  The standard also defines\n two environments for programs, a @dfn{freestanding environment},\n required of all implementations and which may not have library"}, {"sha": "2954cc4896afb87b1f61c87a0e5e164c98983606", "filename": "gcc/ginclude/float.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fginclude%2Ffloat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fginclude%2Ffloat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Ffloat.h?ref=48b0b19630a19eaab06efd305387b930f94fc5d3", "patch": "@@ -1,4 +1,5 @@\n-/* Copyright (C) 2002, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+/* Copyright (C) 2002, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -157,7 +158,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #endif /* C99 */\n \n-#if defined (__STDC_VERSION__) && __STDC_VERSION__ > 199901L\n+#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L\n /* Versions of DECIMAL_DIG for each floating-point type.  */\n #undef FLT_DECIMAL_DIG\n #undef DBL_DECIMAL_DIG\n@@ -194,7 +195,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define LDBL_TRUE_MIN\t__LDBL_MIN__\n #endif\n \n-#endif /* C1X */\n+#endif /* C11 */\n \n #ifdef __STDC_WANT_DEC_FP__\n /* Draft Technical Report 24732, extension for decimal floating-point"}, {"sha": "a78a77033871deb3d9f9835086d5874bd1a1f02d", "filename": "gcc/ginclude/stddef.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fginclude%2Fstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Fginclude%2Fstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstddef.h?ref=48b0b19630a19eaab06efd305387b930f94fc5d3", "patch": "@@ -412,7 +412,7 @@ typedef __WINT_TYPE__ wint_t;\n /* Offset of member MEMBER in a struct of type TYPE. */\n #define offsetof(TYPE, MEMBER) __builtin_offsetof (TYPE, MEMBER)\n \n-#if (defined (__STDC_VERSION__) && __STDC_VERSION__ > 199901L) \\\n+#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) \\\n   || (defined(__cplusplus) && __cplusplus >= 201103L)\n #ifndef _GCC_MAX_ALIGN_T\n #define _GCC_MAX_ALIGN_T\n@@ -424,7 +424,7 @@ typedef struct {\n   long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));\n } max_align_t;\n #endif\n-#endif /* C1X or C++11.  */\n+#endif /* C11 or C++11.  */\n \n #endif /* _STDDEF_H was defined this time */\n "}, {"sha": "1d329e24df03b430dcb75ea0a93b5c851f900753", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=48b0b19630a19eaab06efd305387b930f94fc5d3", "patch": "@@ -1,3 +1,9 @@\n+2011-12-20  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c11-version-1.c, gcc.dg/c11-version-2.c,\n+\tgcc.dg/c94-version-1.c, gcc.dg/c99-version-1.c,\n+\tgcc.dg/gnu11-version-1.c: New tests.\n+\n 2011-12-20  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR middle-end/51200"}, {"sha": "9ab7936d1ed3db6235ecebe80454593d41d25af2", "filename": "gcc/testsuite/gcc.dg/c11-version-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-version-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-version-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-version-1.c?ref=48b0b19630a19eaab06efd305387b930f94fc5d3", "patch": "@@ -0,0 +1,9 @@\n+/* Test __STDC_VERSION__ for C11.  Test -std=c11.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+#if __STDC_VERSION__ == 201112L\n+int i;\n+#else\n+#error \"Bad __STDC_VERSION__.\"\n+#endif"}, {"sha": "3ac2305f77d88b7f6a992464d3bb9444bca58922", "filename": "gcc/testsuite/gcc.dg/c11-version-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-version-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-version-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-version-2.c?ref=48b0b19630a19eaab06efd305387b930f94fc5d3", "patch": "@@ -0,0 +1,9 @@\n+/* Test __STDC_VERSION__ for C11.  Test -std=iso9899:2011.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:2011 -pedantic-errors\" } */\n+\n+#if __STDC_VERSION__ == 201112L\n+int i;\n+#else\n+#error \"Bad __STDC_VERSION__.\"\n+#endif"}, {"sha": "7437dda90541be05288316c1056672e491cf7906", "filename": "gcc/testsuite/gcc.dg/c94-version-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Ftestsuite%2Fgcc.dg%2Fc94-version-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Ftestsuite%2Fgcc.dg%2Fc94-version-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc94-version-1.c?ref=48b0b19630a19eaab06efd305387b930f94fc5d3", "patch": "@@ -0,0 +1,9 @@\n+/* Test __STDC_VERSION__ for C94.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:199409 -pedantic-errors\" } */\n+\n+#if __STDC_VERSION__ == 199409L\n+int i;\n+#else\n+#error \"Bad __STDC_VERSION__.\"\n+#endif"}, {"sha": "b99d54c7e16205af44b2b609b2a23a99818bc707", "filename": "gcc/testsuite/gcc.dg/c99-version-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-version-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-version-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-version-1.c?ref=48b0b19630a19eaab06efd305387b930f94fc5d3", "patch": "@@ -0,0 +1,9 @@\n+/* Test __STDC_VERSION__ for C99.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -pedantic-errors\" } */\n+\n+#if __STDC_VERSION__ == 199901L\n+int i;\n+#else\n+#error \"Bad __STDC_VERSION__.\"\n+#endif"}, {"sha": "56efbd43bdc579ebde43af9d8d3b9c89f7392078", "filename": "gcc/testsuite/gcc.dg/gnu11-version-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu11-version-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0b19630a19eaab06efd305387b930f94fc5d3/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu11-version-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu11-version-1.c?ref=48b0b19630a19eaab06efd305387b930f94fc5d3", "patch": "@@ -0,0 +1,9 @@\n+/* Test __STDC_VERSION__ for C11 with GNU extensions.  Test -std=gnu11.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu11 -pedantic-errors\" } */\n+\n+#if __STDC_VERSION__ == 201112L\n+int i;\n+#else\n+#error \"Bad __STDC_VERSION__.\"\n+#endif"}, {"sha": "261b8a52067df6fb076d03bf09a05b64f519417b", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0b19630a19eaab06efd305387b930f94fc5d3/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0b19630a19eaab06efd305387b930f94fc5d3/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=48b0b19630a19eaab06efd305387b930f94fc5d3", "patch": "@@ -1,3 +1,11 @@\n+2011-12-20  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* include/cpplib.h (CLK_GNUC1X): Change to CLK_GNUC11.\n+\t(CLK_STDC1X): Change to CLK_STDC11.\n+\t* init.c (lang_defaults): Update comments.\n+\t(cpp_init_builtins): Update language tests.  Use 201112L for C11\n+\t__STDC_VERSION__.\n+\n 2011-12-20  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* configure: Regenerate."}, {"sha": "bf59d016231dc8f817c2516e85bdff263277f020", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0b19630a19eaab06efd305387b930f94fc5d3/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0b19630a19eaab06efd305387b930f94fc5d3/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=48b0b19630a19eaab06efd305387b930f94fc5d3", "patch": "@@ -165,8 +165,8 @@ enum cpp_ttype\n #undef TK\n \n /* C language kind, used when calling cpp_create_reader.  */\n-enum c_lang {CLK_GNUC89 = 0, CLK_GNUC99, CLK_GNUC1X,\n-\t     CLK_STDC89, CLK_STDC94, CLK_STDC99, CLK_STDC1X,\n+enum c_lang {CLK_GNUC89 = 0, CLK_GNUC99, CLK_GNUC11,\n+\t     CLK_STDC89, CLK_STDC94, CLK_STDC99, CLK_STDC11,\n \t     CLK_GNUCXX, CLK_CXX98, CLK_GNUCXX11, CLK_CXX11, CLK_ASM};\n \n /* Payload of a NUMBER, STRING, CHAR or COMMENT token.  */"}, {"sha": "5fa82ca9c3ec14d5eafd00bc6912537246a78e73", "filename": "libcpp/init.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0b19630a19eaab06efd305387b930f94fc5d3/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0b19630a19eaab06efd305387b930f94fc5d3/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=48b0b19630a19eaab06efd305387b930f94fc5d3", "patch": "@@ -87,11 +87,11 @@ static const struct lang_flags lang_defaults[] =\n { /*              c99 c++ xnum xid std  //   digr ulit rlit user_literals */\n   /* GNUC89   */  { 0,  0,  1,   0,  0,   1,   1,   0,   0,    0 },\n   /* GNUC99   */  { 1,  0,  1,   0,  0,   1,   1,   1,   1,    0 },\n-  /* GNUC1X   */  { 1,  0,  1,   0,  0,   1,   1,   1,   1,    0 },\n+  /* GNUC11   */  { 1,  0,  1,   0,  0,   1,   1,   1,   1,    0 },\n   /* STDC89   */  { 0,  0,  0,   0,  1,   0,   0,   0,   0,    0 },\n   /* STDC94   */  { 0,  0,  0,   0,  1,   0,   1,   0,   0,    0 },\n   /* STDC99   */  { 1,  0,  1,   0,  1,   1,   1,   0,   0,    0 },\n-  /* STDC1X   */  { 1,  0,  1,   0,  1,   1,   1,   1,   0,    0 },\n+  /* STDC11   */  { 1,  0,  1,   0,  1,   1,   1,   1,   0,    0 },\n   /* GNUCXX   */  { 0,  1,  1,   0,  0,   1,   1,   0,   0,    0 },\n   /* CXX98    */  { 0,  1,  1,   0,  1,   1,   1,   0,   0,    0 },\n   /* GNUCXX11 */  { 1,  1,  1,   0,  0,   1,   1,   1,   1,    1 },\n@@ -474,9 +474,9 @@ cpp_init_builtins (cpp_reader *pfile, int hosted)\n     _cpp_define_builtin (pfile, \"__ASSEMBLER__ 1\");\n   else if (CPP_OPTION (pfile, lang) == CLK_STDC94)\n     _cpp_define_builtin (pfile, \"__STDC_VERSION__ 199409L\");\n-  else if (CPP_OPTION (pfile, lang) == CLK_STDC1X\n-\t   || CPP_OPTION (pfile, lang) == CLK_GNUC1X)\n-    _cpp_define_builtin (pfile, \"__STDC_VERSION__ 201000L\");\n+  else if (CPP_OPTION (pfile, lang) == CLK_STDC11\n+\t   || CPP_OPTION (pfile, lang) == CLK_GNUC11)\n+    _cpp_define_builtin (pfile, \"__STDC_VERSION__ 201112L\");\n   else if (CPP_OPTION (pfile, c99))\n     _cpp_define_builtin (pfile, \"__STDC_VERSION__ 199901L\");\n "}]}