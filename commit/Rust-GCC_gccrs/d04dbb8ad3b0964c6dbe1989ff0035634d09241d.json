{"sha": "d04dbb8ad3b0964c6dbe1989ff0035634d09241d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA0ZGJiOGFkM2IwOTY0YzZkYmUxOTg5ZmYwMDM1NjM0ZDA5MjQxZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-07-05T21:29:51Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-07-05T21:29:51Z"}, "message": "PR libstdc++/85831 define move constructors and operators for exceptions\n\n\tPR libstdc++/85831\n\t* config/abi/pre/gnu.ver: Export move constructors and move\n\tassignment operators for std::logic_error and std::runtime_error.\n\t* include/std/stdexcept: Use _GLIBCXX_NOTHROW instead of\n\t_GLIBCXX_USE_NOEXCEPT.\n\t(logic_error, runtime_error): Declare move constructors and move\n\tassignment operators. When not declared already, define copy\n\tconstructors and copy assignment operators as explicit-defaulted.\n\t(domain_error, invalid_argument, length_error, out_of_range)\n\t(overflow_error, underflow_error): Define move constructors and move\n\tassignment operators as explicitly-defaulted.\n\t* libsupc++/exception.h (exception): Likewise.\n\t* src/c++11/cow-stdexcept.cc (logic_error, runtime_error): Define\n\tmove constructors and move assignment operators as defaulted.\n\t* testsuite/19_diagnostics/stdexcept.cc: Check that constructors and\n\tassignment operators are defined.\n\nFrom-SVN: r262456", "tree": {"sha": "3c6d2ba152ada4df1eaf32360d28c94b3d60b014", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c6d2ba152ada4df1eaf32360d28c94b3d60b014"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d04dbb8ad3b0964c6dbe1989ff0035634d09241d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d04dbb8ad3b0964c6dbe1989ff0035634d09241d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d04dbb8ad3b0964c6dbe1989ff0035634d09241d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d04dbb8ad3b0964c6dbe1989ff0035634d09241d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c1d2d8ca755341f69e945aa2df1a0f74d02abd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c1d2d8ca755341f69e945aa2df1a0f74d02abd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c1d2d8ca755341f69e945aa2df1a0f74d02abd8"}], "stats": {"total": 137, "additions": 115, "deletions": 22}, "files": [{"sha": "f78d3043858d5313edd1c7d2d47117222cc14e23", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04dbb8ad3b0964c6dbe1989ff0035634d09241d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04dbb8ad3b0964c6dbe1989ff0035634d09241d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d04dbb8ad3b0964c6dbe1989ff0035634d09241d", "patch": "@@ -1,5 +1,22 @@\n 2018-07-05  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/85831\n+\t* config/abi/pre/gnu.ver: Export move constructors and move\n+\tassignment operators for std::logic_error and std::runtime_error.\n+\t* include/std/stdexcept: Use _GLIBCXX_NOTHROW instead of\n+\t_GLIBCXX_USE_NOEXCEPT.\n+\t(logic_error, runtime_error): Declare move constructors and move\n+\tassignment operators. When not declared already, define copy\n+\tconstructors and copy assignment operators as explicit-defaulted.\n+\t(domain_error, invalid_argument, length_error, out_of_range)\n+\t(overflow_error, underflow_error): Define move constructors and move\n+\tassignment operators as explicitly-defaulted.\n+\t* libsupc++/exception.h (exception): Likewise.\n+\t* src/c++11/cow-stdexcept.cc (logic_error, runtime_error): Define\n+\tmove constructors and move assignment operators as defaulted.\n+\t* testsuite/19_diagnostics/stdexcept.cc: Check that constructors and\n+\tassignment operators are defined.\n+\n \t* testsuite/21_strings/basic_string/cons/char/deduction.cc: XFAIL for\n \tCOW strings.\n \t* testsuite/21_strings/basic_string/cons/wchar_t/deduction.cc:"}, {"sha": "521cebf1f8027ac1eb81b5118456f9caa0e67105", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04dbb8ad3b0964c6dbe1989ff0035634d09241d/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04dbb8ad3b0964c6dbe1989ff0035634d09241d/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=d04dbb8ad3b0964c6dbe1989ff0035634d09241d", "patch": "@@ -2014,6 +2014,13 @@ GLIBCXX_3.4.26 {\n     # std::basic_string::insert(const_iterator, initializer_list)\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE6insertEN9__gnu_cxx17__normal_iteratorIPK[cw]S4_EESt16initializer_listI[cw]E;\n \n+    # std::logic_error move operations\n+    _ZNSt11logic_errorC[12]EOS_;\n+    _ZNSt11logic_erroraSEOS_;\n+    # std::runtime_error move operations\n+    _ZNSt13runtime_errorC[12]EOS_;\n+    _ZNSt13runtime_erroraSEOS_;\n+\n } GLIBCXX_3.4.25;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "4fcc719f005b396c0a6e8a63ba17fa44225fcb55", "filename": "libstdc++-v3/include/std/stdexcept", "status": "modified", "additions": 44, "deletions": 18, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04dbb8ad3b0964c6dbe1989ff0035634d09241d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04dbb8ad3b0964c6dbe1989ff0035634d09241d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept?ref=d04dbb8ad3b0964c6dbe1989ff0035634d09241d", "patch": "@@ -55,8 +55,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __cow_string();\n     __cow_string(const std::string&);\n     __cow_string(const char*, size_t);\n-    __cow_string(const __cow_string&) _GLIBCXX_USE_NOEXCEPT;\n-    __cow_string& operator=(const __cow_string&) _GLIBCXX_USE_NOEXCEPT;\n+    __cow_string(const __cow_string&) _GLIBCXX_NOTHROW;\n+    __cow_string& operator=(const __cow_string&) _GLIBCXX_NOTHROW;\n     ~__cow_string();\n #if __cplusplus >= 201103L\n     __cow_string(__cow_string&&) noexcept;\n@@ -83,7 +83,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       char _M_bytes[sizeof(__str)];\n     };\n \n-    __sso_string() _GLIBCXX_USE_NOEXCEPT;\n+    __sso_string() _GLIBCXX_NOTHROW;\n     __sso_string(const std::string&);\n     __sso_string(const char*, size_t);\n     __sso_string(const __sso_string&);\n@@ -122,19 +122,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n     explicit\n     logic_error(const char*) _GLIBCXX_TXN_SAFE;\n+\n+    logic_error(logic_error&&) noexcept;\n+    logic_error& operator=(logic_error&&) noexcept;\n #endif\n \n #if _GLIBCXX_USE_CXX11_ABI || _GLIBCXX_DEFINE_STDEXCEPT_COPY_OPS\n-    logic_error(const logic_error&) _GLIBCXX_USE_NOEXCEPT;\n-    logic_error& operator=(const logic_error&) _GLIBCXX_USE_NOEXCEPT;\n+    logic_error(const logic_error&) _GLIBCXX_NOTHROW;\n+    logic_error& operator=(const logic_error&) _GLIBCXX_NOTHROW;\n+#elif __cplusplus >= 201103L\n+    logic_error(const logic_error&) = default;\n+    logic_error& operator=(const logic_error&) = default;\n #endif\n \n-    virtual ~logic_error() _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT;\n+    virtual ~logic_error() _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_NOTHROW;\n \n     /** Returns a C-style character string describing the general cause of\n      *  the current error (the same string passed to the ctor).  */\n     virtual const char*\n-    what() const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT;\n+    what() const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_NOTHROW;\n \n # ifdef _GLIBCXX_TM_TS_INTERNAL\n     friend void*\n@@ -152,8 +158,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     explicit domain_error(const char*) _GLIBCXX_TXN_SAFE;\n     domain_error(const domain_error&) = default;\n     domain_error& operator=(const domain_error&) = default;\n+    domain_error(domain_error&&) = default;\n+    domain_error& operator=(domain_error&&) = default;\n #endif\n-    virtual ~domain_error() _GLIBCXX_USE_NOEXCEPT;\n+    virtual ~domain_error() _GLIBCXX_NOTHROW;\n   };\n \n   /** Thrown to report invalid arguments to functions.  */\n@@ -165,8 +173,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     explicit invalid_argument(const char*) _GLIBCXX_TXN_SAFE;\n     invalid_argument(const invalid_argument&) = default;\n     invalid_argument& operator=(const invalid_argument&) = default;\n+    invalid_argument(invalid_argument&&) = default;\n+    invalid_argument& operator=(invalid_argument&&) = default;\n #endif\n-    virtual ~invalid_argument() _GLIBCXX_USE_NOEXCEPT;\n+    virtual ~invalid_argument() _GLIBCXX_NOTHROW;\n   };\n \n   /** Thrown when an object is constructed that would exceed its maximum\n@@ -179,8 +189,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     explicit length_error(const char*) _GLIBCXX_TXN_SAFE;\n     length_error(const length_error&) = default;\n     length_error& operator=(const length_error&) = default;\n+    length_error(length_error&&) = default;\n+    length_error& operator=(length_error&&) = default;\n #endif\n-    virtual ~length_error() _GLIBCXX_USE_NOEXCEPT;\n+    virtual ~length_error() _GLIBCXX_NOTHROW;\n   };\n \n   /** This represents an argument whose value is not within the expected\n@@ -193,8 +205,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     explicit out_of_range(const char*) _GLIBCXX_TXN_SAFE;\n     out_of_range(const out_of_range&) = default;\n     out_of_range& operator=(const out_of_range&) = default;\n+    out_of_range(out_of_range&&) = default;\n+    out_of_range& operator=(out_of_range&&) = default;\n #endif\n-    virtual ~out_of_range() _GLIBCXX_USE_NOEXCEPT;\n+    virtual ~out_of_range() _GLIBCXX_NOTHROW;\n   };\n \n   /** Runtime errors represent problems outside the scope of a program;\n@@ -214,19 +228,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n     explicit\n     runtime_error(const char*) _GLIBCXX_TXN_SAFE;\n+\n+    runtime_error(runtime_error&&) noexcept;\n+    runtime_error& operator=(runtime_error&&) noexcept;\n #endif\n \n #if _GLIBCXX_USE_CXX11_ABI || _GLIBCXX_DEFINE_STDEXCEPT_COPY_OPS\n-    runtime_error(const runtime_error&) _GLIBCXX_USE_NOEXCEPT;\n-    runtime_error& operator=(const runtime_error&) _GLIBCXX_USE_NOEXCEPT;\n+    runtime_error(const runtime_error&) _GLIBCXX_NOTHROW;\n+    runtime_error& operator=(const runtime_error&) _GLIBCXX_NOTHROW;\n+#elif __cplusplus >= 201103L\n+    runtime_error(const runtime_error&) = default;\n+    runtime_error& operator=(const runtime_error&) = default;\n #endif\n \n-    virtual ~runtime_error() _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT;\n+    virtual ~runtime_error() _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_NOTHROW;\n \n     /** Returns a C-style character string describing the general cause of\n      *  the current error (the same string passed to the ctor).  */\n     virtual const char*\n-    what() const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT;\n+    what() const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_NOTHROW;\n \n # ifdef _GLIBCXX_TM_TS_INTERNAL\n     friend void*\n@@ -243,8 +263,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     explicit range_error(const char*) _GLIBCXX_TXN_SAFE;\n     range_error(const range_error&) = default;\n     range_error& operator=(const range_error&) = default;\n+    range_error(range_error&&) = default;\n+    range_error& operator=(range_error&&) = default;\n #endif\n-    virtual ~range_error() _GLIBCXX_USE_NOEXCEPT;\n+    virtual ~range_error() _GLIBCXX_NOTHROW;\n   };\n \n   /** Thrown to indicate arithmetic overflow.  */\n@@ -256,8 +278,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     explicit overflow_error(const char*) _GLIBCXX_TXN_SAFE;\n     overflow_error(const overflow_error&) = default;\n     overflow_error& operator=(const overflow_error&) = default;\n+    overflow_error(overflow_error&&) = default;\n+    overflow_error& operator=(overflow_error&&) = default;\n #endif\n-    virtual ~overflow_error() _GLIBCXX_USE_NOEXCEPT;\n+    virtual ~overflow_error() _GLIBCXX_NOTHROW;\n   };\n \n   /** Thrown to indicate arithmetic underflow.  */\n@@ -269,8 +293,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     explicit underflow_error(const char*) _GLIBCXX_TXN_SAFE;\n     underflow_error(const underflow_error&) = default;\n     underflow_error& operator=(const underflow_error&) = default;\n+    underflow_error(underflow_error&&) = default;\n+    underflow_error& operator=(underflow_error&&) = default;\n #endif\n-    virtual ~underflow_error() _GLIBCXX_USE_NOEXCEPT;\n+    virtual ~underflow_error() _GLIBCXX_NOTHROW;\n   };\n \n   // @} group exceptions"}, {"sha": "426fba22a579c993e50fa96234840fe335b4545b", "filename": "libstdc++-v3/libsupc++/exception.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04dbb8ad3b0964c6dbe1989ff0035634d09241d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04dbb8ad3b0964c6dbe1989ff0035634d09241d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception.h?ref=d04dbb8ad3b0964c6dbe1989ff0035634d09241d", "patch": "@@ -60,17 +60,19 @@ namespace std\n   class exception\n   {\n   public:\n-    exception() _GLIBCXX_USE_NOEXCEPT { }\n-    virtual ~exception() _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT;\n+    exception() _GLIBCXX_NOTHROW { }\n+    virtual ~exception() _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_NOTHROW;\n #if __cplusplus >= 201103L\n     exception(const exception&) = default;\n     exception& operator=(const exception&) = default;\n+    exception(exception&&) = default;\n+    exception& operator=(exception&&) = default;\n #endif\n \n     /** Returns a C-style character string describing the general cause\n      *  of the current error.  */\n     virtual const char*\n-    what() const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT;\n+    what() const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_NOTHROW;\n   };\n \n } // namespace std"}, {"sha": "a2df7892fd42bdcea263ab5037a824d5d729e203", "filename": "libstdc++-v3/src/c++11/cow-stdexcept.cc", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04dbb8ad3b0964c6dbe1989ff0035634d09241d/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-stdexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04dbb8ad3b0964c6dbe1989ff0035634d09241d/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-stdexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-stdexcept.cc?ref=d04dbb8ad3b0964c6dbe1989ff0035634d09241d", "patch": "@@ -53,21 +53,34 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  // Copy constructors and assignment operators defined using COW std::string\n+  // Copy/move constructors and assignment operators defined using COW string.\n+  // These operations are noexcept even though copying a COW string is not,\n+  // but we know that the string member in an exception has not been \"leaked\"\n+  // so copying is a simple reference count increment.\n \n   logic_error::logic_error(const logic_error& e) noexcept\n   : exception(e), _M_msg(e._M_msg) { }\n \n   logic_error& logic_error::operator=(const logic_error& e) noexcept\n   { _M_msg = e._M_msg; return *this; }\n \n+  logic_error::logic_error(logic_error&& e) noexcept = default;\n+\n+  logic_error&\n+  logic_error::operator=(logic_error&& e) noexcept = default;\n+\n   runtime_error::runtime_error(const runtime_error& e) noexcept\n   : exception(e), _M_msg(e._M_msg) { }\n \n   runtime_error&\n   runtime_error::operator=(const runtime_error& e) noexcept\n   { _M_msg = e._M_msg; return *this; }\n \n+  runtime_error::runtime_error(runtime_error&& e) noexcept = default;\n+\n+  runtime_error&\n+  runtime_error::operator=(runtime_error&& e) noexcept = default;\n+\n   // New C++11 constructors:\n \n   logic_error::logic_error(const char* __arg)"}, {"sha": "87d111dddefa876540a8ec36ec842baf472cca38", "filename": "libstdc++-v3/testsuite/19_diagnostics/stdexcept.cc", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04dbb8ad3b0964c6dbe1989ff0035634d09241d/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fstdexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04dbb8ad3b0964c6dbe1989ff0035634d09241d/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fstdexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fstdexcept.cc?ref=d04dbb8ad3b0964c6dbe1989ff0035634d09241d", "patch": "@@ -219,9 +219,37 @@ void test02()\n     }\n }\n \n+void test03()\n+{\n+  std::logic_error le1(\"\");\n+  // Copy constructor:\n+  std::logic_error le2(le1);\n+  // Copy assignment operator:\n+  le1 = le2;\n+#if __cplusplus >= 201103L\n+  // Move constructor:\n+  std::logic_error le3 = std::move(le1);\n+  // Move assignment operator:\n+  le1 = std::move(le3);\n+#endif\n+\n+  std::runtime_error re1(\"\");\n+  // Copy constructor:\n+  std::runtime_error re2(re1);\n+  // Copy assignment operator:\n+  re1 = re2;\n+#if __cplusplus >= 201103L\n+  // Move constructor:\n+  std::runtime_error re3 = std::move(re1);\n+  // Move assignment operator:\n+  re1 = std::move(re3);\n+#endif\n+}\n+\n int main(void)\n {\n   test01();\n   test02();\n+  test03();\n   return 0;\n }"}]}