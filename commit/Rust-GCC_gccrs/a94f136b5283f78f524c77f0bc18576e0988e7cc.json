{"sha": "a94f136b5283f78f524c77f0bc18576e0988e7cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk0ZjEzNmI1MjgzZjc4ZjUyNGM3N2YwYmMxODU3NmUwOTg4ZTdjYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-04-03T07:54:27Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-04-03T07:54:27Z"}, "message": "i386.c (constant_address_p): Use legitimate_constant_p.\n\n\t* i386.c (constant_address_p): Use legitimate_constant_p.\n\t(legitimate_address_p): Do not use CONSTANT_ADDRESS_P.\n\nFrom-SVN: r65196", "tree": {"sha": "740482385e264c4400a2f42409f8e91dacd140cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/740482385e264c4400a2f42409f8e91dacd140cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a94f136b5283f78f524c77f0bc18576e0988e7cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a94f136b5283f78f524c77f0bc18576e0988e7cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a94f136b5283f78f524c77f0bc18576e0988e7cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a94f136b5283f78f524c77f0bc18576e0988e7cc/comments", "author": null, "committer": null, "parents": [{"sha": "0de298af4604cc1ad77f4cc9cf03d4486f6f95ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0de298af4604cc1ad77f4cc9cf03d4486f6f95ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0de298af4604cc1ad77f4cc9cf03d4486f6f95ad"}], "stats": {"total": 40, "additions": 13, "deletions": 27}, "files": [{"sha": "ac2b4036bdbfe29d046f4153d54dad55c822ab7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a94f136b5283f78f524c77f0bc18576e0988e7cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a94f136b5283f78f524c77f0bc18576e0988e7cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a94f136b5283f78f524c77f0bc18576e0988e7cc", "patch": "@@ -1,3 +1,8 @@\n+Thu Apr  3 09:53:40 CEST 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c (constant_address_p): Use legitimate_constant_p.\n+\t(legitimate_address_p): Do not use CONSTANT_ADDRESS_P.\n+\n 2003-04-02  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300-protos.h: Add a prototype for\n@@ -26,7 +31,7 @@ Thu Apr  3 00:31:21 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* doc/install.texi (Specific): Update pointers to apple.com.\n \n-Thu Apr  3 00:18:49 CEST 2003  Jan HUbicka  <jh@suse.cz>\n+Thu Apr  3 00:18:49 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.c (override_options):  Disable red zone by default on i386.\n \t(compute_frame_layout, ix86_force_to_memory, ix86_free_from_memory):  "}, {"sha": "1637616c70def2cc8ce7c4d5e030c5af2d071ab4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 7, "deletions": 26, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a94f136b5283f78f524c77f0bc18576e0988e7cc/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a94f136b5283f78f524c77f0bc18576e0988e7cc/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a94f136b5283f78f524c77f0bc18576e0988e7cc", "patch": "@@ -5710,26 +5710,7 @@ bool\n constant_address_p (x)\n      rtx x;\n {\n-  switch (GET_CODE (x))\n-    {\n-    case LABEL_REF:\n-    case CONST_INT:\n-      return true;\n-\n-    case CONST_DOUBLE:\n-      return TARGET_64BIT;\n-\n-    case CONST:\n-      /* For Mach-O, really believe the CONST.  */\n-      if (TARGET_MACHO)\n-\treturn true;\n-      /* Otherwise fall through.  */\n-    case SYMBOL_REF:\n-      return !flag_pic && legitimate_constant_p (x);\n-\n-    default:\n-      return false;\n-    }\n+  return CONSTANT_P (x) && legitimate_address_p (Pmode, x, 1);\n }\n \n /* Nonzero if the constant value X is a legitimate general operand\n@@ -6080,7 +6061,12 @@ legitimate_address_p (mode, addr, strict)\n \t     that never results in lea, this seems to be easier and\n \t     correct fix for crash to disable this test.  */\n \t}\n-      else if (!CONSTANT_ADDRESS_P (disp))\n+      else if (GET_CODE (disp) != LABEL_REF\n+\t       && GET_CODE (disp) != CONST_INT\n+\t       && (GET_CODE (disp) != CONST\n+\t\t   || !legitimate_constant_p (disp))\n+\t       && (GET_CODE (disp) != SYMBOL_REF\n+\t\t   || !legitimate_constant_p (disp)))\n \t{\n \t  reason = \"displacement is not constant\";\n \t  goto report_error;\n@@ -6090,11 +6076,6 @@ legitimate_address_p (mode, addr, strict)\n \t  reason = \"displacement is out of range\";\n \t  goto report_error;\n \t}\n-      else if (!TARGET_64BIT && GET_CODE (disp) == CONST_DOUBLE)\n-\t{\n-\t  reason = \"displacement is a const_double\";\n-\t  goto report_error;\n-\t}\n     }\n \n   /* Everything looks valid.  */"}]}