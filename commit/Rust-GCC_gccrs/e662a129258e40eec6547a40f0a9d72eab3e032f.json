{"sha": "e662a129258e40eec6547a40f0a9d72eab3e032f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY2MmExMjkyNThlNDBlZWM2NTQ3YTQwZjBhOWQ3MmVhYjNlMDMyZg==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2000-09-25T08:23:05Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2000-09-25T08:23:05Z"}, "message": "config:\n\nChanges add TABs on either or both sides, covering start of line,\nup to any operand for all .*ASM.*_OP definitions.\n\nFrom-SVN: r36604", "tree": {"sha": "4342cbef59597393bdaee6ccc3c944a31170df3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4342cbef59597393bdaee6ccc3c944a31170df3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e662a129258e40eec6547a40f0a9d72eab3e032f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e662a129258e40eec6547a40f0a9d72eab3e032f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e662a129258e40eec6547a40f0a9d72eab3e032f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e662a129258e40eec6547a40f0a9d72eab3e032f/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0a3e1f45d82ea5f7468d0bbfb5bd604e61b8ab53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a3e1f45d82ea5f7468d0bbfb5bd604e61b8ab53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a3e1f45d82ea5f7468d0bbfb5bd604e61b8ab53"}], "stats": {"total": 137, "additions": 79, "deletions": 58}, "files": [{"sha": "303a7d4a867cc1ea0fa01ec6ae9d5c084ab2cf45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e662a129258e40eec6547a40f0a9d72eab3e032f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e662a129258e40eec6547a40f0a9d72eab3e032f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e662a129258e40eec6547a40f0a9d72eab3e032f", "patch": "@@ -14,6 +14,27 @@\n \t* defaults.h (ASM_STABD_OP, EH_FRAME_SECTION_ASM_OP): Here.\n \t* varasm.c (ASM_STABS_OP): Here.\n \t* xcoffout.h (ASM_STABS_OP): Here.\n+\t* config/elfos.h (IDENT_ASM_OP, ASM_BYTE_OP, SET_ASM_OP,\n+\tSKIP_ASM_OP, ALIGN_ASM_OP, COMMON_ASM_OP, LOCAL_ASM_OP,\n+\tINT_ASM_OP, ASCII_DATA_ASM_OP, TYPE_ASM_OP, SIZE_ASM_OP,\n+\tSTRING_ASM_OP): Here.\n+\t* config/freebsd.h (IDENT_ASM_OP): Here.\n+\t* config/linux-aout.h (SET_ASM_OP): Here.\n+\t* config/linux.h (SET_ASM_OP): Here.\n+\t* config/lynx.h (CTORS_SECTION_ASM_OP, DTORS_SECTION_ASM_OP,\n+\tINT_ASM_OP): Here.\n+\t* config/netbsd.h (TYPE_ASM_OP, SIZE_ASM_OP, SET_ASM_OP): Here.\n+\t* config/nextstep.h (EH_FRAME_SECTION_ASM_OP, ALIGN_ASM_OP): Here.\n+\t* config/openbsd.h (TYPE_ASM_OP, SIZE_ASM_OP, SET_ASM_OP): Here.\n+\t* config/psos.h (CTORS_SECTION_ASM_OP, DTORS_SECTION_ASM_OP,\n+\tINT_ASM_OP): Here.\n+\t* config/ptx4.h (IDENT_ASM_OP, ASM_BYTE_OP, SET_ASM_OP,\n+\tSKIP_ASM_OP, ALIGN_ASM_OP, COMMON_ASM_OP, LOCAL_ASM_OP,\n+\tINT_ASM_OP, ASCII_DATA_ASM_OP, CONST_SECTION_ASM_OP,\n+\tCTORS_SECTION_ASM_OP, DTORS_SECTION_ASM_OP, INIT_SECTION_ASM_OP,\n+\tFINI_SECTION_ASM_OP, TYPE_ASM_OP, SIZE_ASM_OP STRING_ASM_OP): Here.\n+\t* config/svr3.h (INIT_SECTION_ASM_OP, FINI_SECTION_ASM_OP,\n+\tCONST_SECTION_ASM_OP, ASM_BYTE_OP): Here.\n \n 2000-09-25  Richard Henderson  <rth@cygnus.com>\n "}, {"sha": "050ec1df4b43e4aff1a87aa4a6fb5d111a12770c", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e662a129258e40eec6547a40f0a9d72eab3e032f/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e662a129258e40eec6547a40f0a9d72eab3e032f/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=e662a129258e40eec6547a40f0a9d72eab3e032f", "patch": "@@ -98,7 +98,7 @@ Boston, MA 02111-1307, USA.  */\n    .ident string is patterned after the ones produced by native svr4\n    C compilers.  */\n \n-#define IDENT_ASM_OP \".ident\"\n+#define IDENT_ASM_OP \"\\t.ident\\t\"\n \n #define ASM_FILE_END(FILE)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\\\n@@ -110,10 +110,10 @@ Boston, MA 02111-1307, USA.  */\n   while (0)\n \n #undef  ASM_BYTE_OP\n-#define ASM_BYTE_OP\t\".byte\"\n+#define ASM_BYTE_OP\t\"\\t.byte\\t\"\n \n #undef  SET_ASM_OP\n-#define SET_ASM_OP\t\".set\"\n+#define SET_ASM_OP\t\"\\t.set\\t\"\n \n /* This is how to begin an assembly language file.  Most svr4 assemblers want\n    at least a .file directive to come first, and some want to see a .version\n@@ -129,7 +129,7 @@ Boston, MA 02111-1307, USA.  */\n /* This is how to allocate empty space in some section.  The .zero\n    pseudo-op is used for this on most svr4 assemblers.  */\n \n-#define SKIP_ASM_OP\t\".zero\"\n+#define SKIP_ASM_OP\t\"\\t.zero\\t\"\n \n #undef  ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE, SIZE) \\\n@@ -173,7 +173,7 @@ Boston, MA 02111-1307, USA.  */\n    make sure that the location counter for the .rodata section gets pro-\n    perly re-aligned prior to the actual beginning of the jump table.  */\n \n-#define ALIGN_ASM_OP \".align\"\n+#define ALIGN_ASM_OP \"\\t.align\\t\"\n \n #ifndef ASM_OUTPUT_BEFORE_CASE_LABEL\n #define ASM_OUTPUT_BEFORE_CASE_LABEL(FILE, PREFIX, NUM, TABLE) \\\n@@ -201,7 +201,7 @@ Boston, MA 02111-1307, USA.  */\n    the linker seems to want the alignment of data objects\n    to depend on their types.  We do exactly that here.  */\n \n-#define COMMON_ASM_OP\t\".comm\"\n+#define COMMON_ASM_OP\t\"\\t.comm\\t\"\n \n #undef  ASM_OUTPUT_ALIGNED_COMMON\n #define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\t\\\n@@ -218,7 +218,7 @@ Boston, MA 02111-1307, USA.  */\n    the linker seems to want the alignment of data objects\n    to depend on their types.  We do exactly that here.  */\n \n-#define LOCAL_ASM_OP\t\".local\"\n+#define LOCAL_ASM_OP\t\"\\t.local\\t\"\n \n #undef  ASM_OUTPUT_ALIGNED_LOCAL\n #define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN)\t\\\n@@ -235,14 +235,14 @@ Boston, MA 02111-1307, USA.  */\n    specific value in some section.  This is the same for all known svr4\n    assemblers.  */\n \n-#define INT_ASM_OP\t\t\".long\"\n+#define INT_ASM_OP\t\t\"\\t.long\\t\"\n \n /* This is the pseudo-op used to generate a contiguous sequence of byte\n    values from a double-quoted string WITHOUT HAVING A TERMINATING NUL\n    AUTOMATICALLY APPENDED.  This is the same for most svr4 assemblers.  */\n \n #undef  ASCII_DATA_ASM_OP\n-#define ASCII_DATA_ASM_OP\t\".ascii\"\n+#define ASCII_DATA_ASM_OP\t\"\\t.ascii\\t\"\n \n /* Support const sections and the ctors and dtors sections for g++.\n    Note that there appears to be two different ways to support const\n@@ -514,8 +514,8 @@ dtors_section ()\t\t\t\t\t\t\\\n    different pseudo-op names for these, they may be overridden in the\n    file which includes this one.  */\n \n-#define TYPE_ASM_OP\t\".type\"\n-#define SIZE_ASM_OP\t\".size\"\n+#define TYPE_ASM_OP\t\"\\t.type\\t\"\n+#define SIZE_ASM_OP\t\"\\t.size\\t\"\n \n /* This is how we tell the assembler that a symbol is weak.  */\n \n@@ -691,7 +691,7 @@ dtors_section ()\t\t\t\t\t\t\\\n \n #define STRING_LIMIT\t((unsigned) 256)\n \n-#define STRING_ASM_OP\t\".string\"\n+#define STRING_ASM_OP\t\"\\t.string\\t\"\n \n /* The routine used to output NUL terminated strings.  We use a special\n    version of this for most svr4 targets because doing so makes the"}, {"sha": "69312fa42d5e1e48c34457a3e360906bd2c0479f", "filename": "gcc/config/freebsd.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e662a129258e40eec6547a40f0a9d72eab3e032f/gcc%2Fconfig%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e662a129258e40eec6547a40f0a9d72eab3e032f/gcc%2Fconfig%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffreebsd.h?ref=e662a129258e40eec6547a40f0a9d72eab3e032f", "patch": "@@ -1,5 +1,5 @@\n /* Base configuration file for all FreeBSD targets.\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -104,7 +104,7 @@ Boston, MA 02111-1307, USA.  */\n    the version of GCC which compiled this code.  The format of the .ident\n    string is patterned after the ones produced by native SVR4 C compilers.  */\n #undef IDENT_ASM_OP\n-#define IDENT_ASM_OP \".ident\"\n+#define IDENT_ASM_OP \"\\t.ident\\t\"\n \n /* Output #ident as a .ident.  */\n #undef ASM_OUTPUT_IDENT"}, {"sha": "2560bb8acee9e64119b3c9d5631fb9524350976b", "filename": "gcc/config/linux-aout.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e662a129258e40eec6547a40f0a9d72eab3e032f/gcc%2Fconfig%2Flinux-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e662a129258e40eec6547a40f0a9d72eab3e032f/gcc%2Fconfig%2Flinux-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux-aout.h?ref=e662a129258e40eec6547a40f0a9d72eab3e032f", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for Linux-based GNU systems.\n-   Copyright (C) 1995, 1997, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1995, 1997, 1999, 2000 Free Software Foundation, Inc.\n    Contributed by H.J. Lu (hjl@nynexst.com)\n \n This file is part of GNU CC.\n@@ -39,7 +39,7 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_APP_OFF\n #define ASM_APP_OFF \"#NO_APP\\n\"\n \n-#define SET_ASM_OP\t\".set\"\n+#define SET_ASM_OP\t\"\\t.set\\t\"\n \n /* We need that too. */\n #define HANDLE_SYSV_PRAGMA"}, {"sha": "1ef26b3f1945f579917cd8e9edfceddc3b57e7e4", "filename": "gcc/config/linux.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e662a129258e40eec6547a40f0a9d72eab3e032f/gcc%2Fconfig%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e662a129258e40eec6547a40f0a9d72eab3e032f/gcc%2Fconfig%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.h?ref=e662a129258e40eec6547a40f0a9d72eab3e032f", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for Linux-based GNU systems with ELF format\n-   Copyright (C) 1995, 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n    Contributed by Eric Youngdale.\n    Modified for stabs-in-ELF by H.J. Lu (hjl@lucon.org).\n \n@@ -37,7 +37,7 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_APP_OFF\n #define ASM_APP_OFF \"#NO_APP\\n\"\n \n-#define SET_ASM_OP\t\".set\"\n+#define SET_ASM_OP\t\"\\t.set\\t\"\n \n /* Use stabs instead of DWARF debug format.  */\n #undef PREFERRED_DEBUGGING_TYPE"}, {"sha": "4c215c2c38fe01d3e3af79de7f88b7553b52cfbd", "filename": "gcc/config/lynx.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e662a129258e40eec6547a40f0a9d72eab3e032f/gcc%2Fconfig%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e662a129258e40eec6547a40f0a9d72eab3e032f/gcc%2Fconfig%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flynx.h?ref=e662a129258e40eec6547a40f0a9d72eab3e032f", "patch": "@@ -1,5 +1,5 @@\n /* Target independent definitions for LynxOS.\n-   Copyright (C) 1993, 1994, 1995, 1996, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1994, 1995, 1996, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -138,11 +138,11 @@ do {\t\t\t\t\t\t\t\t\\\n   FINI_SECTION_FUNCTION\n \n #undef CTORS_SECTION_ASM_OP\n-#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors\"\n+#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors\"\n #undef DTORS_SECTION_ASM_OP\n-#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors\"\n+#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors\"\n \n-#define INT_ASM_OP\t\t\".long\"\n+#define INT_ASM_OP\t\t\"\\t.long\\t\"\n \n /* A C statement (sans semicolon) to output an element in the table of\n    global constructors.  */"}, {"sha": "a9cc46abeb05b21db16a96b3fd32efa3310bd5c3", "filename": "gcc/config/netbsd.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e662a129258e40eec6547a40f0a9d72eab3e032f/gcc%2Fconfig%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e662a129258e40eec6547a40f0a9d72eab3e032f/gcc%2Fconfig%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetbsd.h?ref=e662a129258e40eec6547a40f0a9d72eab3e032f", "patch": "@@ -88,9 +88,9 @@\n #undef TYPE_ASM_OP\n #undef SIZE_ASM_OP\n #undef SET_ASM_OP\n-#define TYPE_ASM_OP\t\".type\"\n-#define SIZE_ASM_OP\t\".size\"\n-#define SET_ASM_OP\t\".set\"\n+#define TYPE_ASM_OP\t\"\\t.type\\t\"\n+#define SIZE_ASM_OP\t\"\\t.size\\t\"\n+#define SET_ASM_OP\t\"\\t.set\\t\"\n \n /* This is how we tell the assembler that a symbol is weak.  */\n "}, {"sha": "82d8590e53d1ba61aa09b0847dcb5562d5d28dcc", "filename": "gcc/config/nextstep.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e662a129258e40eec6547a40f0a9d72eab3e032f/gcc%2Fconfig%2Fnextstep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e662a129258e40eec6547a40f0a9d72eab3e032f/gcc%2Fconfig%2Fnextstep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnextstep.h?ref=e662a129258e40eec6547a40f0a9d72eab3e032f", "patch": "@@ -237,7 +237,7 @@ Boston, MA 02111-1307, USA.  */\n        fprintf (FILE, \".reference .destructors_used\\n\");        \\\n       } while (0)\n \n-#define EH_FRAME_SECTION_ASM_OP \".section __TEXT,__eh_frame,regular\"\n+#define EH_FRAME_SECTION_ASM_OP \"\\t.section __TEXT,__eh_frame,regular\"\n \n /* Don't output a .file directive.  That is only used by the assembler for\n    error reporting.  */\n@@ -290,7 +290,7 @@ extern int handle_pragma PARAMS ((int(*)(void), void (*)(int), const char *));\n        else asm_fprintf (FILE, \"%U%s\", NAME); } while (0)\n \n #undef\tALIGN_ASM_OP\n-#define ALIGN_ASM_OP\t\t\".align\"\n+#define ALIGN_ASM_OP\t\t\"\\t.align\\t\"\n \n #undef\tASM_OUTPUT_ALIGN\n #define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\"}, {"sha": "80742221f3122a05eb61e7b4da46cebddf44fa90", "filename": "gcc/config/openbsd.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e662a129258e40eec6547a40f0a9d72eab3e032f/gcc%2Fconfig%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e662a129258e40eec6547a40f0a9d72eab3e032f/gcc%2Fconfig%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fopenbsd.h?ref=e662a129258e40eec6547a40f0a9d72eab3e032f", "patch": "@@ -1,5 +1,5 @@\n /* Base configuration file for all OpenBSD targets.\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -169,9 +169,9 @@ Boston, MA 02111-1307, USA.  */\n #undef SIZE_ASM_OP\n #undef SET_ASM_OP\n \n-#define TYPE_ASM_OP\t\".type\"\n-#define SIZE_ASM_OP\t\".size\"\n-#define SET_ASM_OP\t\".set\"\n+#define TYPE_ASM_OP\t\"\\t.type\\t\"\n+#define SIZE_ASM_OP\t\"\\t.size\\t\"\n+#define SET_ASM_OP\t\"\\t.set\\t\"\n \n /* The following macro defines the format used to output the second\n    operand of the .type assembler directive.  */"}, {"sha": "bfdd51d9c7ba5ff4682fc2c524c49368978d69d5", "filename": "gcc/config/psos.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e662a129258e40eec6547a40f0a9d72eab3e032f/gcc%2Fconfig%2Fpsos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e662a129258e40eec6547a40f0a9d72eab3e032f/gcc%2Fconfig%2Fpsos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpsos.h?ref=e662a129258e40eec6547a40f0a9d72eab3e032f", "patch": "@@ -1,7 +1,7 @@\n /* Operating system specific defines to be used when targeting GCC for some\n    embedded system running pSOS. We assume GNU tools with ELF, but\n    try to maintain compatibility with the MRI tools. Based on svr4.h.\n-   Copyright (C) 1996, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -96,8 +96,8 @@ while (0)\n /* Define the pseudo-ops used to switch to the .ctors and .dtors\n    sections. */\n \n-#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors,\\\"aw\\\"\"\n-#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors,\\\"aw\\\"\"\n+#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"aw\\\"\"\n+#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"aw\\\"\"\n \n /* A default list of other sections which we might be \"in\" at any given\n    time.  For targets that use additional sections (e.g. .tdesc) you\n@@ -142,7 +142,7 @@ dtors_section ()\t\t\t\t\t\t\t\\\n    global constructors.  */\n \n #ifndef INT_ASM_OP\n-#define INT_ASM_OP\t\t\".long\"\n+#define INT_ASM_OP\t\t\"\\t.long\\t\"\n #endif\n #define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "f3e5deed544bf31bad6915484265939d7c4b5378", "filename": "gcc/config/ptx4.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e662a129258e40eec6547a40f0a9d72eab3e032f/gcc%2Fconfig%2Fptx4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e662a129258e40eec6547a40f0a9d72eab3e032f/gcc%2Fconfig%2Fptx4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fptx4.h?ref=e662a129258e40eec6547a40f0a9d72eab3e032f", "patch": "@@ -1,6 +1,6 @@\n /* Operating system specific defines to be used when targeting GCC for some\n    generic System V Release 4 system.\n-   Copyright (C) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@monkeys.com).\n    Renamed and changed to suit Dynix/ptx v4 and later.\n    Modified by Tim Wright (timw@sequent.com).\n@@ -176,7 +176,7 @@ Boston, MA 02111-1307, USA.\n    .ident string is patterned after the ones produced by native svr4\n    C compilers.  */\n \n-#define IDENT_ASM_OP \".ident\"\n+#define IDENT_ASM_OP \"\\t.ident\\t\"\n \n #define ASM_FILE_END(FILE)\t\t\t\t\t\\\n do {\t\t\t\t \t\t\t\t\\\n@@ -306,10 +306,10 @@ while (0)\n /* #define MULTIBYTE_CHARS */\n \n #undef ASM_BYTE_OP\n-#define ASM_BYTE_OP\t\".byte\"\n+#define ASM_BYTE_OP\t\"\\t.byte\\t\"\n \n #undef SET_ASM_OP\n-#define SET_ASM_OP\t\".set\"\n+#define SET_ASM_OP\t\"\\t.set\\t\"\n \n /* This is how to begin an assembly language file.  Most svr4 assemblers want\n    at least a .file directive to come first, and some want to see a .version\n@@ -325,7 +325,7 @@ while (0)\n /* This is how to allocate empty space in some section.  The .zero\n    pseudo-op is used for this on most svr4 assemblers.  */\n \n-#define SKIP_ASM_OP\t\".zero\"\n+#define SKIP_ASM_OP\t\"\\t.zero\\t\"\n \n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE) \\\n@@ -373,7 +373,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    make sure that the location counter for the .rodata section gets pro-\n    perly re-aligned prior to the actual beginning of the jump table.  */\n \n-#define ALIGN_ASM_OP \".align\"\n+#define ALIGN_ASM_OP \"\\t.align\\t\"\n \n #ifndef ASM_OUTPUT_BEFORE_CASE_LABEL\n #define ASM_OUTPUT_BEFORE_CASE_LABEL(FILE,PREFIX,NUM,TABLE) \\\n@@ -399,7 +399,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    the linker seems to want the alignment of data objects\n    to depend on their types.  We do exactly that here.  */\n \n-#define COMMON_ASM_OP\t\".comm\"\n+#define COMMON_ASM_OP\t\"\\t.comm\\t\"\n \n #undef ASM_OUTPUT_ALIGNED_COMMON\n #define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\t\\\n@@ -414,7 +414,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    the linker seems to want the alignment of data objects\n    to depend on their types.  We do exactly that here.  */\n \n-#define LOCAL_ASM_OP\t\".local\"\n+#define LOCAL_ASM_OP\t\"\\t.local\\t\"\n \n #undef ASM_OUTPUT_ALIGNED_LOCAL\n #define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN)\t\t\\\n@@ -429,14 +429,14 @@ do {\t\t\t\t\t\t\t\t\t\\\n    specific value in some section.  This is the same for all known svr4\n    assemblers.  */\n \n-#define INT_ASM_OP\t\t\".long\"\n+#define INT_ASM_OP\t\t\"\\t.long\\t\"\n \n /* This is the pseudo-op used to generate a contiguous sequence of byte\n    values from a double-quoted string WITHOUT HAVING A TERMINATING NUL\n    AUTOMATICALLY APPENDED.  This is the same for most svr4 assemblers.  */\n \n #undef ASCII_DATA_ASM_OP\n-#define ASCII_DATA_ASM_OP\t\".ascii\"\n+#define ASCII_DATA_ASM_OP\t\"\\t.ascii\\t\"\n \n /* Support const sections and the ctors and dtors sections for g++.\n    Note that there appears to be two different ways to support const\n@@ -448,7 +448,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define USE_CONST_SECTION\t1\n \n-#define CONST_SECTION_ASM_OP\t\".section\\t.rodata\"\n+#define CONST_SECTION_ASM_OP\t\"\\t.section\\t.rodata\"\n \n /* Define the pseudo-ops used to switch to the .ctors and .dtors sections.\n \n@@ -465,17 +465,17 @@ do {\t\t\t\t\t\t\t\t\t\\\n    errors unless the .ctors and .dtors sections are marked as writable\n    via the SHF_WRITE attribute.)  */\n \n-#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors,\\\"aw\\\"\"\n-#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors,\\\"aw\\\"\"\n+#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"aw\\\"\"\n+#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"aw\\\"\"\n \n /* On svr4, we *do* have support for the .init and .fini sections, and we\n    can put stuff in there to be executed before and after `main'.  We let\n    crtstuff.c and other files know this by defining the following symbols.\n    The definitions say how to change sections to the .init and .fini\n    sections.  This is the same for all known svr4 assemblers.  */\n \n-#define INIT_SECTION_ASM_OP\t\".section\\t.init\"\n-#define FINI_SECTION_ASM_OP\t\".section\\t.fini\"\n+#define INIT_SECTION_ASM_OP\t\"\\t.section\\t.init\"\n+#define FINI_SECTION_ASM_OP\t\"\\t.section\\t.fini\"\n \n /* A default list of other sections which we might be \"in\" at any given\n    time.  For targets that use additional sections (e.g. .tdesc) you\n@@ -607,8 +607,8 @@ dtors_section ()\t\t\t\t\t\t\t\\\n    different pseudo-op names for these, they may be overridden in the\n    file which includes this one.  */\n \n-#define TYPE_ASM_OP\t\".type\"\n-#define SIZE_ASM_OP\t\".size\"\n+#define TYPE_ASM_OP\t\"\\t.type\\t\"\n+#define SIZE_ASM_OP\t\"\\t.size\\t\"\n \n /* This is how we tell the assembler that a symbol is weak.  */\n \n@@ -752,7 +752,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n \n #define STRING_LIMIT\t((unsigned) 256)\n \n-#define STRING_ASM_OP\t\".string\"\n+#define STRING_ASM_OP\t\"\\t.string\\t\"\n \n /* The routine used to output NUL terminated strings.  We use a special\n    version of this for most svr4 targets because doing so makes the"}, {"sha": "44fc241fa26e4cdec980304a8acf23841b01aa0a", "filename": "gcc/config/svr3.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e662a129258e40eec6547a40f0a9d72eab3e032f/gcc%2Fconfig%2Fsvr3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e662a129258e40eec6547a40f0a9d72eab3e032f/gcc%2Fconfig%2Fsvr3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr3.h?ref=e662a129258e40eec6547a40f0a9d72eab3e032f", "patch": "@@ -1,6 +1,6 @@\n /* Operating system specific defines to be used when targeting GCC for\n    generic System V Release 3 system.\n-   Copyright (C) 1991, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1996, 2000 Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@monkeys.com).\n \n This file is part of GNU CC.\n@@ -157,7 +157,7 @@ Boston, MA 02111-1307, USA.\n    definitions should work for most svr3 systems.  */\n \n #undef ASM_BYTE_OP\n-#define ASM_BYTE_OP \"\\t.byte\"\n+#define ASM_BYTE_OP \"\\t.byte\\t\"\n \n /* The prefix to add to user-visible assembler symbols.\n \n@@ -215,9 +215,9 @@ Boston, MA 02111-1307, USA.\n \n #define USE_CONST_SECTION\t0\n \n-#define INIT_SECTION_ASM_OP     \".section\\t.init\"\n-#define FINI_SECTION_ASM_OP     \".section .fini,\\\"x\\\"\"\n-#define CONST_SECTION_ASM_OP\t\".section\\t.rodata, \\\"x\\\"\"\n+#define INIT_SECTION_ASM_OP     \"\\t.section\\t.init\"\n+#define FINI_SECTION_ASM_OP     \"\\t.section .fini,\\\"x\\\"\"\n+#define CONST_SECTION_ASM_OP\t\"\\t.section\\t.rodata, \\\"x\\\"\"\n #define CTORS_SECTION_ASM_OP\tINIT_SECTION_ASM_OP\n #define DTORS_SECTION_ASM_OP    FINI_SECTION_ASM_OP\n "}]}