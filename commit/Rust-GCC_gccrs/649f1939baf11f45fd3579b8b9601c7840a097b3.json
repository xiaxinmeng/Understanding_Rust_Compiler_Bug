{"sha": "649f1939baf11f45fd3579b8b9601c7840a097b3", "node_id": "C_kwDOANBUbNoAKDY0OWYxOTM5YmFmMTFmNDVmZDM1NzliOGI5NjAxYzc4NDBhMDk3YjM", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2023-03-02T09:39:09Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2023-03-10T14:05:01Z"}, "message": "Fix OpenACC/GCN 'acc_ev_enqueue_launch_end' position\n\nFor an OpenACC compute construct, we've currently got:\n\n  - [...]\n  - acc_ev_enqueue_launch_start\n  - launch kernel\n  - free memory\n  - acc_ev_free\n  - acc_ev_enqueue_launch_end\n\nThis confused another thing that I'm working on, so I adjusted that to:\n\n  - [...]\n  - acc_ev_enqueue_launch_start\n  - launch kernel\n  - acc_ev_enqueue_launch_end\n  - free memory\n  - acc_ev_free\n\nCorrespondingly, verify 'acc_ev_alloc', 'acc_ev_free' in\n'libgomp.oacc-c-c++-common/acc_prof-parallel-1.c'.\n\n\tlibgomp/\n\t* plugin/plugin-gcn.c (gcn_exec): Fix 'acc_ev_enqueue_launch_end'\n\tposition.\n\t* testsuite/libgomp.oacc-c-c++-common/acc_prof-parallel-1.c:\n\tVerify 'acc_ev_alloc', 'acc_ev_free'.", "tree": {"sha": "fa814cd0abcece33915b5492c48648ecaf7e5849", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa814cd0abcece33915b5492c48648ecaf7e5849"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/649f1939baf11f45fd3579b8b9601c7840a097b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/649f1939baf11f45fd3579b8b9601c7840a097b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/649f1939baf11f45fd3579b8b9601c7840a097b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/649f1939baf11f45fd3579b8b9601c7840a097b3/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1c8cf9006bd278e969ab7ed35178067ce128f32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1c8cf9006bd278e969ab7ed35178067ce128f32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1c8cf9006bd278e969ab7ed35178067ce128f32"}], "stats": {"total": 225, "additions": 195, "deletions": 30}, "files": [{"sha": "96920a48d2e4e5d33b1791e063e1ac61a8e69e33", "filename": "libgomp/plugin/plugin-gcn.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649f1939baf11f45fd3579b8b9601c7840a097b3/libgomp%2Fplugin%2Fplugin-gcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649f1939baf11f45fd3579b8b9601c7840a097b3/libgomp%2Fplugin%2Fplugin-gcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-gcn.c?ref=649f1939baf11f45fd3579b8b9601c7840a097b3", "patch": "@@ -3192,18 +3192,9 @@ gcn_exec (struct kernel_info *kernel, size_t mapnum, void **hostaddrs,\n     }\n \n   if (!async)\n-    {\n-      run_kernel (kernel, ind_da, &kla, NULL, false);\n-      gomp_offload_free (ind_da);\n-    }\n+    run_kernel (kernel, ind_da, &kla, NULL, false);\n   else\n-    {\n-      queue_push_launch (aq, kernel, ind_da, &kla);\n-      if (DEBUG_QUEUES)\n-\tGCN_DEBUG (\"queue_push_callback %d:%d gomp_offload_free, %p\\n\",\n-\t\t   aq->agent->device_id, aq->id, ind_da);\n-      queue_push_callback (aq, gomp_offload_free, ind_da);\n-    }\n+    queue_push_launch (aq, kernel, ind_da, &kla);\n \n   if (profiling_dispatch_p)\n     {\n@@ -3213,6 +3204,16 @@ gcn_exec (struct kernel_info *kernel, size_t mapnum, void **hostaddrs,\n \t\t\t\t\t    &enqueue_launch_event_info,\n \t\t\t\t\t    api_info);\n     }\n+\n+  if (!async)\n+    gomp_offload_free (ind_da);\n+  else\n+    {\n+      if (DEBUG_QUEUES)\n+\tGCN_DEBUG (\"queue_push_callback %d:%d gomp_offload_free, %p\\n\",\n+\t\t   aq->agent->device_id, aq->id, ind_da);\n+      queue_push_callback (aq, gomp_offload_free, ind_da);\n+    }\n }\n \n /* }}}  */"}, {"sha": "cbf23d7d83b6d4ab6ff49d53a1fcf965080d61f5", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_prof-parallel-1.c", "status": "modified", "additions": 183, "deletions": 19, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649f1939baf11f45fd3579b8b9601c7840a097b3/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_prof-parallel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649f1939baf11f45fd3579b8b9601c7840a097b3/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_prof-parallel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_prof-parallel-1.c?ref=649f1939baf11f45fd3579b8b9601c7840a097b3", "patch": "@@ -195,6 +195,139 @@ static void cb_device_init_end (acc_prof_info *prof_info, acc_event_info *event_\n #endif\n }\n \n+static void cb_alloc (acc_prof_info *prof_info, acc_event_info *event_info, acc_api_info *api_info)\n+{\n+  DEBUG_printf (\"%s\\n\", __FUNCTION__);\n+\n+#if DEVICE_INIT_INSIDE_COMPUTE_CONSTRUCT\n+# error TODO\n+#else\n+  assert (state == 4\n+\t  || state == 6\n+\t  || state == 104\n+\t  || state == 106);\n+  STATE_OP (state, ++);\n+\n+  if (state == 5\n+      || state == 105)\n+    {\n+      assert (tool_info != NULL);\n+      assert (tool_info->event_info.other_event.event_type == acc_ev_compute_construct_start);\n+      assert (tool_info->nested != NULL);\n+      assert (tool_info->nested->event_info.other_event.event_type == acc_ev_enter_data_start);\n+      assert (tool_info->nested->nested == NULL);\n+    }\n+  else if (state == 7\n+\t   || state == 107)\n+    {\n+      assert (tool_info != NULL);\n+      assert (tool_info->event_info.other_event.event_type == acc_ev_compute_construct_start);\n+      assert (tool_info->nested == NULL);\n+    }\n+  else\n+    abort ();\n+#endif\n+\n+  assert (prof_info->event_type == acc_ev_alloc);\n+  assert (prof_info->valid_bytes == _ACC_PROF_INFO_VALID_BYTES);\n+  assert (prof_info->version == _ACC_PROF_INFO_VERSION);\n+  assert (prof_info->device_type == acc_device_type);\n+  assert (prof_info->device_number == acc_device_num);\n+  assert (prof_info->thread_id == -1);\n+  assert (prof_info->async == acc_async);\n+  assert (prof_info->async_queue == prof_info->async);\n+  assert (prof_info->src_file == NULL);\n+  assert (prof_info->func_name == NULL);\n+  assert (prof_info->line_no == -1);\n+  assert (prof_info->end_line_no == -1);\n+  assert (prof_info->func_line_no == -1);\n+  assert (prof_info->func_end_line_no == -1);\n+\n+  assert (event_info->data_event.event_type == prof_info->event_type);\n+  assert (event_info->data_event.valid_bytes == _ACC_DATA_EVENT_INFO_VALID_BYTES);\n+  assert (event_info->data_event.parent_construct == acc_construct_parallel);\n+  assert (event_info->data_event.implicit == 1);\n+  assert (event_info->data_event.tool_info == NULL);\n+  assert (event_info->data_event.var_name == NULL);\n+  assert (event_info->data_event.bytes != 0);\n+  assert (event_info->data_event.host_ptr == NULL);\n+  assert (event_info->data_event.device_ptr != NULL);\n+\n+  assert (api_info->valid_bytes == _ACC_API_INFO_VALID_BYTES);\n+  assert (api_info->device_type == prof_info->device_type);\n+  assert (api_info->vendor == -1);\n+  assert (api_info->device_handle == NULL);\n+  assert (api_info->context_handle == NULL);\n+  assert (api_info->async_handle == NULL);\n+}\n+\n+static void cb_free (acc_prof_info *prof_info, acc_event_info *event_info, acc_api_info *api_info)\n+{\n+  DEBUG_printf (\"%s\\n\", __FUNCTION__);\n+\n+#if DEVICE_INIT_INSIDE_COMPUTE_CONSTRUCT\n+# error TODO\n+#else\n+  assert (state == 9\n+\t  || state == 11);\n+  STATE_OP (state, ++);\n+\n+  if (state == 10)\n+    {\n+      assert (tool_info != NULL);\n+      assert (tool_info->event_info.other_event.event_type == acc_ev_compute_construct_start);\n+      assert (tool_info->nested == NULL);\n+    }\n+  else if (state == 12)\n+    {\n+      assert (tool_info != NULL);\n+      assert (tool_info->event_info.other_event.event_type == acc_ev_compute_construct_start);\n+      assert (tool_info->nested != NULL);\n+      assert (tool_info->nested->event_info.other_event.event_type == acc_ev_exit_data_start);\n+      assert (tool_info->nested->nested == NULL);\n+    }\n+  else\n+    abort ();\n+#endif\n+\n+  assert (prof_info->event_type == acc_ev_free);\n+  assert (prof_info->valid_bytes == _ACC_PROF_INFO_VALID_BYTES);\n+  assert (prof_info->version == _ACC_PROF_INFO_VERSION);\n+  assert (prof_info->device_type == acc_device_type);\n+  assert (prof_info->device_number == acc_device_num);\n+  assert (prof_info->thread_id == -1);\n+  assert (prof_info->async == acc_async);\n+  assert (prof_info->async_queue == prof_info->async);\n+  assert (prof_info->src_file == NULL);\n+  assert (prof_info->func_name == NULL);\n+  assert (prof_info->line_no == -1);\n+  assert (prof_info->end_line_no == -1);\n+  assert (prof_info->func_line_no == -1);\n+  assert (prof_info->func_end_line_no == -1);\n+\n+  assert (event_info->data_event.event_type == prof_info->event_type);\n+  assert (event_info->data_event.valid_bytes == _ACC_DATA_EVENT_INFO_VALID_BYTES);\n+  assert (event_info->data_event.parent_construct == acc_construct_parallel);\n+  assert (event_info->data_event.implicit == 1);\n+  assert (event_info->data_event.tool_info == NULL);\n+  assert (event_info->data_event.var_name == NULL);\n+  if (acc_device_type == acc_device_nvidia)\n+    assert (event_info->data_event.bytes == (size_t) -1);\n+  else if (acc_device_type == acc_device_radeon)\n+    assert (event_info->data_event.bytes == 0);\n+  else\n+    abort ();\n+  assert (event_info->data_event.host_ptr == NULL);\n+  assert (event_info->data_event.device_ptr != NULL);\n+\n+  assert (api_info->valid_bytes == _ACC_API_INFO_VALID_BYTES);\n+  assert (api_info->device_type == prof_info->device_type);\n+  assert (api_info->vendor == -1);\n+  assert (api_info->device_handle == NULL);\n+  assert (api_info->context_handle == NULL);\n+  assert (api_info->async_handle == NULL);\n+}\n+\n static void cb_enter_data_start (acc_prof_info *prof_info, acc_event_info *event_info, acc_api_info *api_info)\n {\n   DEBUG_printf (\"%s\\n\", __FUNCTION__);\n@@ -246,8 +379,8 @@ static void cb_enter_data_end (acc_prof_info *prof_info, acc_event_info *event_i\n {\n   DEBUG_printf (\"%s\\n\", __FUNCTION__);\n \n-  assert (state == 4\n-\t  || state == 104);\n+  assert (state == 5\n+\t  || state == 105);\n #if defined COPYIN\n   /* Conceptually, 'acc_ev_enter_data_end' marks the end of data copying,\n      before 'acc_ev_enqueue_launch_start' marks invoking the compute region.\n@@ -316,9 +449,19 @@ static void cb_exit_data_start (acc_prof_info *prof_info, acc_event_info *event_\n {\n   DEBUG_printf (\"%s\\n\", __FUNCTION__);\n \n-  assert (state == 7\n #if ASYNC_EXIT_DATA\n-\t  || state == 107\n+  if (acc_async != acc_async_sync)\n+    {\n+      /* Compensate for the deferred 'acc_ev_free'.  */\n+      state += 1;\n+    }\n+#else\n+# error TODO\n+#endif\n+\n+  assert (state == 10\n+#if ASYNC_EXIT_DATA\n+\t  || state == 110\n #endif\n \t  );\n   STATE_OP (state, ++);\n@@ -366,15 +509,25 @@ static void cb_exit_data_start (acc_prof_info *prof_info, acc_event_info *event_\n \n   tool_info->nested->event_info.other_event.event_type = event_info->other_event.event_type;\n   event_info->other_event.tool_info = tool_info->nested;\n+\n+#if ASYNC_EXIT_DATA\n+  if (acc_async != acc_async_sync)\n+    {\n+      /* Compensate for the deferred 'acc_ev_free'.  */\n+      state += 1;\n+    }\n+#else\n+# error TODO\n+#endif\n }\n \n static void cb_exit_data_end (acc_prof_info *prof_info, acc_event_info *event_info, acc_api_info *api_info)\n {\n   DEBUG_printf (\"%s\\n\", __FUNCTION__);\n \n-  assert (state == 8\n+  assert (state == 12\n #if ASYNC_EXIT_DATA\n-\t  || state == 108\n+\t  || state == 112\n #endif\n \t  );\n   STATE_OP (state, ++);\n@@ -488,6 +641,8 @@ static void cb_compute_construct_start (acc_prof_info *prof_info, acc_event_info\n     {\n       /* Compensate for the missing 'acc_ev_enter_data_start'.  */\n       state += 1;\n+      /* Compensate for the missing 'acc_ev_alloc'.  */\n+      state += 1;\n     }\n }\n \n@@ -499,12 +654,19 @@ static void cb_compute_construct_end (acc_prof_info *prof_info, acc_event_info *\n     {\n       /* Compensate for the missing 'acc_ev_enter_data_end'.  */\n       state += 1;\n+      /* Compensate for the missing 'acc_ev_alloc'.  */\n+      state += 1;\n       /* Compensate for the missing 'acc_ev_enqueue_launch_start' and\n \t 'acc_ev_enqueue_launch_end'.  */\n       state += 2;\n-      /* Compensate for the missing 'acc_ev_exit_data_start' and\n-\t 'acc_ev_exit_data_end'.  */\n-      state += 2;\n+      /* Compensate for the missing 'acc_ev_free'.  */\n+      state += 1;\n+      /* Compensate for the missing 'acc_ev_exit_data_start'.  */\n+      state += 1;\n+      /* Compensate for the missing 'acc_ev_free'.  */\n+      state += 1;\n+      /* Compensate for the missing 'acc_ev_exit_data_end'.  */\n+      state += 1;\n     }\n #if !ASYNC_EXIT_DATA\n   else if (acc_async != acc_async_sync)\n@@ -514,8 +676,8 @@ static void cb_compute_construct_end (acc_prof_info *prof_info, acc_event_info *\n       state += 2;\n     }\n #endif\n-  assert (state == 9\n-\t  || state == 109);\n+  assert (state == 13\n+\t  || state == 113);\n   STATE_OP (state, ++);\n \n   assert (tool_info != NULL);\n@@ -569,8 +731,8 @@ static void cb_enqueue_launch_start (acc_prof_info *prof_info, acc_event_info *e\n \n   assert (acc_device_type != acc_device_host);\n \n-  assert (state == 5\n-\t  || state == 105);\n+  assert (state == 7\n+\t  || state == 107);\n   STATE_OP (state, ++);\n \n   assert (tool_info != NULL);\n@@ -638,8 +800,8 @@ static void cb_enqueue_launch_end (acc_prof_info *prof_info, acc_event_info *eve\n \n   assert (acc_device_type != acc_device_host);\n \n-  assert (state == 6\n-\t  || state == 106);\n+  assert (state == 8\n+\t  || state == 108);\n   STATE_OP (state, ++);\n \n   assert (tool_info != NULL);\n@@ -703,6 +865,8 @@ int main()\n   STATE_OP (state, = 0);\n   reg (acc_ev_device_init_start, cb_device_init_start, acc_reg);\n   reg (acc_ev_device_init_end, cb_device_init_end, acc_reg);\n+  reg (acc_ev_alloc, cb_alloc, acc_reg);\n+  reg (acc_ev_free, cb_free, acc_reg);\n   reg (acc_ev_enter_data_start, cb_enter_data_start, acc_reg);\n   reg (acc_ev_enter_data_end, cb_enter_data_end, acc_reg);\n   reg (acc_ev_exit_data_start, cb_exit_data_start, acc_reg);\n@@ -725,9 +889,9 @@ int main()\n \n       state_init = state;\n     }\n-    assert (state_init == 4);\n+    assert (state_init == 5);\n   }\n-  assert (state == 10);\n+  assert (state == 14);\n \n   STATE_OP (state, = 100);\n \n@@ -742,9 +906,9 @@ int main()\n     }\n     acc_async = acc_async_sync;\n #pragma acc wait\n-    assert (state_init == 104);\n+    assert (state_init == 105);\n   }\n-  assert (state == 110);\n+  assert (state == 114);\n \n   return 0;\n }"}]}