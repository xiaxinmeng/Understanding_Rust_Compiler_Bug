{"sha": "1cf11770053ce827551849ab721edccb17b4fdde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNmMTE3NzAwNTNjZTgyNzU1MTg0OWFiNzIxZWRjY2IxN2I0ZmRkZQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2014-01-20T21:08:26Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2014-01-20T21:08:26Z"}, "message": "Add type to DEFCIFCODE to describe the inline failure\n\nReport inline error during early inlining if the inline failure is\nCIF_FINAL_ERROR.\n\ngcc/\n\n\tPR middle-end/59789\n\t* cgraph.c (cgraph_inline_failed_string): Add type to DEFCIFCODE.\n\t(cgraph_inline_failed_type): New function.\n\t* cgraph.h (DEFCIFCODE): Add type.\n\t(cgraph_inline_failed_type_t): New enum.\n\t(cgraph_inline_failed_type): New prototype.\n\t* cif-code.def: Add CIF_FINAL_NORMAL to OK, FUNCTION_NOT_CONSIDERED,\n\tFUNCTION_NOT_OPTIMIZED, REDEFINED_EXTERN_INLINE,\n\tFUNCTION_NOT_INLINE_CANDIDATE, LARGE_FUNCTION_GROWTH_LIMIT,\n\tLARGE_STACK_FRAME_GROWTH_LIMIT, MAX_INLINE_INSNS_SINGLE_LIMIT,\n\tMAX_INLINE_INSNS_AUTO_LIMIT, INLINE_UNIT_GROWTH_LIMIT,\n\tRECURSIVE_INLINING, UNLIKELY_CALL, NOT_DECLARED_INLINED,\n\tOPTIMIZING_FOR_SIZE, ORIGINALLY_INDIRECT_CALL,\n\tINDIRECT_UNKNOWN_CALL, USES_COMDAT_LOCAL. \n\tAdd CIF_FINAL_ERROR to UNSPECIFIED, BODY_NOT_AVAILABLE,\n\tFUNCTION_NOT_INLINABLE, OVERWRITABLE, MISMATCHED_ARGUMENTS,\n\tEH_PERSONALITY, NON_CALL_EXCEPTIONS, TARGET_OPTION_MISMATCH,\n\tOPTIMIZATION_MISMATCH.\n\t* tree-inline.c (expand_call_inline): Emit errors during\n\tearly_inlining if cgraph_inline_failed_type returns\n\tCIF_FINAL_ERROR.\n\ngcc/testsuite/\n\n\tPR middle-end/59789\n\t* gcc.target/i386/pr59789.c: New testcase.\n\nFrom-SVN: r206858", "tree": {"sha": "50ccb405fa1d7c6f984e4ac16406a0427cd1910a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50ccb405fa1d7c6f984e4ac16406a0427cd1910a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cf11770053ce827551849ab721edccb17b4fdde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cf11770053ce827551849ab721edccb17b4fdde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cf11770053ce827551849ab721edccb17b4fdde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cf11770053ce827551849ab721edccb17b4fdde/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8586e4bd470382106dc8ba09d7d2d819dbb15488", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8586e4bd470382106dc8ba09d7d2d819dbb15488", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8586e4bd470382106dc8ba09d7d2d819dbb15488"}], "stats": {"total": 149, "additions": 120, "deletions": 29}, "files": [{"sha": "a666d2e10460d8e0adb049cd9b2cc6b318d46ed9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf11770053ce827551849ab721edccb17b4fdde/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf11770053ce827551849ab721edccb17b4fdde/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1cf11770053ce827551849ab721edccb17b4fdde", "patch": "@@ -1,3 +1,27 @@\n+2014-01-20  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR middle-end/59789\n+\t* cgraph.c (cgraph_inline_failed_string): Add type to DEFCIFCODE.\n+\t(cgraph_inline_failed_type): New function.\n+\t* cgraph.h (DEFCIFCODE): Add type.\n+\t(cgraph_inline_failed_type_t): New enum.\n+\t(cgraph_inline_failed_type): New prototype.\n+\t* cif-code.def: Add CIF_FINAL_NORMAL to OK, FUNCTION_NOT_CONSIDERED,\n+\tFUNCTION_NOT_OPTIMIZED, REDEFINED_EXTERN_INLINE,\n+\tFUNCTION_NOT_INLINE_CANDIDATE, LARGE_FUNCTION_GROWTH_LIMIT,\n+\tLARGE_STACK_FRAME_GROWTH_LIMIT, MAX_INLINE_INSNS_SINGLE_LIMIT,\n+\tMAX_INLINE_INSNS_AUTO_LIMIT, INLINE_UNIT_GROWTH_LIMIT,\n+\tRECURSIVE_INLINING, UNLIKELY_CALL, NOT_DECLARED_INLINED,\n+\tOPTIMIZING_FOR_SIZE, ORIGINALLY_INDIRECT_CALL,\n+\tINDIRECT_UNKNOWN_CALL, USES_COMDAT_LOCAL. \n+\tAdd CIF_FINAL_ERROR to UNSPECIFIED, BODY_NOT_AVAILABLE,\n+\tFUNCTION_NOT_INLINABLE, OVERWRITABLE, MISMATCHED_ARGUMENTS,\n+\tEH_PERSONALITY, NON_CALL_EXCEPTIONS, TARGET_OPTION_MISMATCH,\n+\tOPTIMIZATION_MISMATCH.\n+\t* tree-inline.c (expand_call_inline): Emit errors during\n+\tearly_inlining if cgraph_inline_failed_type returns\n+\tCIF_FINAL_ERROR.\n+\n 2014-01-20  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/59685"}, {"sha": "ae1f43c43596d474b35fe70d9a6f5028041b9391", "filename": "gcc/cgraph.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf11770053ce827551849ab721edccb17b4fdde/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf11770053ce827551849ab721edccb17b4fdde/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=1cf11770053ce827551849ab721edccb17b4fdde", "patch": "@@ -1877,7 +1877,7 @@ const char*\n cgraph_inline_failed_string (cgraph_inline_failed_t reason)\n {\n #undef DEFCIFCODE\n-#define DEFCIFCODE(code, string)\tstring,\n+#define DEFCIFCODE(code, type, string)\tstring,\n \n   static const char *cif_string_table[CIF_N_REASONS] = {\n #include \"cif-code.def\"\n@@ -1889,6 +1889,24 @@ cgraph_inline_failed_string (cgraph_inline_failed_t reason)\n   return cif_string_table[reason];\n }\n \n+/* Return a type describing the failure REASON.  */\n+\n+cgraph_inline_failed_type_t\n+cgraph_inline_failed_type (cgraph_inline_failed_t reason)\n+{\n+#undef DEFCIFCODE\n+#define DEFCIFCODE(code, type, string)\ttype,\n+\n+  static cgraph_inline_failed_type_t cif_type_table[CIF_N_REASONS] = {\n+#include \"cif-code.def\"\n+  };\n+\n+  /* Signedness of an enum type is implementation defined, so cast it\n+     to unsigned before testing. */\n+  gcc_assert ((unsigned) reason < CIF_N_REASONS);\n+  return cif_type_table[reason];\n+}\n+\n /* Names used to print out the availability enum.  */\n const char * const cgraph_availability_names[] =\n   {\"unset\", \"not_available\", \"overwritable\", \"available\", \"local\"};"}, {"sha": "c763516641f347929729538c484995d0c9ff89b9", "filename": "gcc/cgraph.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf11770053ce827551849ab721edccb17b4fdde/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf11770053ce827551849ab721edccb17b4fdde/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=1cf11770053ce827551849ab721edccb17b4fdde", "patch": "@@ -518,13 +518,19 @@ struct varpool_node_set_iterator\n   unsigned index;\n };\n \n-#define DEFCIFCODE(code, string)\tCIF_ ## code,\n+#define DEFCIFCODE(code, type, string)\tCIF_ ## code,\n /* Reasons for inlining failures.  */\n enum cgraph_inline_failed_t {\n #include \"cif-code.def\"\n   CIF_N_REASONS\n };\n \n+enum cgraph_inline_failed_type_t\n+{\n+  CIF_FINAL_NORMAL = 0,\n+  CIF_FINAL_ERROR\n+};\n+\n /* Structure containing additional information about an indirect call.  */\n \n struct GTY(()) cgraph_indirect_call_info\n@@ -774,6 +780,7 @@ void cgraph_unnest_node (struct cgraph_node *);\n enum availability cgraph_function_body_availability (struct cgraph_node *);\n void cgraph_add_new_function (tree, bool);\n const char* cgraph_inline_failed_string (cgraph_inline_failed_t);\n+cgraph_inline_failed_type_t cgraph_inline_failed_type (cgraph_inline_failed_t);\n \n void cgraph_set_nothrow_flag (struct cgraph_node *, bool);\n void cgraph_set_const_flag (struct cgraph_node *, bool, bool);"}, {"sha": "5591f9a9a5f75be91f5f2c9bd97efa8760770487", "filename": "gcc/cif-code.def", "status": "modified", "additions": 40, "deletions": 26, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf11770053ce827551849ab721edccb17b4fdde/gcc%2Fcif-code.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf11770053ce827551849ab721edccb17b4fdde/gcc%2Fcif-code.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcif-code.def?ref=1cf11770053ce827551849ab721edccb17b4fdde", "patch": "@@ -28,84 +28,98 @@ along with GCC see the file COPYING3.  If not see\n    which is a NULL pointer.  */\n \n /* Inlining successful.  This must be the first code.  */\n-DEFCIFCODE(OK , NULL)\n+DEFCIFCODE(OK, CIF_FINAL_NORMAL, NULL)\n \n /* Inlining failed for an unspecified reason.  */\n-DEFCIFCODE(UNSPECIFIED , \"\")\n+DEFCIFCODE(UNSPECIFIED, CIF_FINAL_ERROR, \"\")\n \n /* Function has not be considered for inlining.  This is the code for\n    functions that have not been rejected for inlining yet.  */\n-DEFCIFCODE(FUNCTION_NOT_CONSIDERED, N_(\"function not considered for inlining\"))\n+DEFCIFCODE(FUNCTION_NOT_CONSIDERED, CIF_FINAL_NORMAL,\n+\t   N_(\"function not considered for inlining\"))\n \n /* Caller is compiled with optimizations disabled.  */\n-DEFCIFCODE(FUNCTION_NOT_OPTIMIZED, N_(\"caller is not optimized\"))\n+DEFCIFCODE(FUNCTION_NOT_OPTIMIZED, CIF_FINAL_NORMAL,\n+\t   N_(\"caller is not optimized\"))\n \n /* Inlining failed owing to unavailable function body.  */\n-DEFCIFCODE(BODY_NOT_AVAILABLE, N_(\"function body not available\"))\n+DEFCIFCODE(BODY_NOT_AVAILABLE, CIF_FINAL_ERROR,\n+\t   N_(\"function body not available\"))\n \n /* Extern inline function that has been redefined.  */\n-DEFCIFCODE(REDEFINED_EXTERN_INLINE,\n+DEFCIFCODE(REDEFINED_EXTERN_INLINE, CIF_FINAL_NORMAL,\n \t   N_(\"redefined extern inline functions are not considered for \"\n \t      \"inlining\"))\n \n /* Function is not inlinable.  */\n-DEFCIFCODE(FUNCTION_NOT_INLINABLE, N_(\"function not inlinable\"))\n+DEFCIFCODE(FUNCTION_NOT_INLINABLE, CIF_FINAL_ERROR,\n+\t   N_(\"function not inlinable\"))\n \n /* Function is overwritable.  */\n-DEFCIFCODE(OVERWRITABLE, N_(\"function body can be overwritten at link time\"))\n+DEFCIFCODE(OVERWRITABLE, CIF_FINAL_ERROR,\n+\t   N_(\"function body can be overwritten at link time\"))\n \n /* Function is not an inlining candidate.  */\n-DEFCIFCODE(FUNCTION_NOT_INLINE_CANDIDATE, N_(\"function not inline candidate\"))\n+DEFCIFCODE(FUNCTION_NOT_INLINE_CANDIDATE, CIF_FINAL_NORMAL,\n+\t   N_(\"function not inline candidate\"))\n \n /* Inlining failed because of various limit parameters.  */\n-DEFCIFCODE(LARGE_FUNCTION_GROWTH_LIMIT,\n+DEFCIFCODE(LARGE_FUNCTION_GROWTH_LIMIT, CIF_FINAL_NORMAL,\n \t   N_(\"--param large-function-growth limit reached\"))\n-DEFCIFCODE(LARGE_STACK_FRAME_GROWTH_LIMIT,\n+DEFCIFCODE(LARGE_STACK_FRAME_GROWTH_LIMIT, CIF_FINAL_NORMAL,\n \t   N_(\"--param large-stack-frame-growth limit reached\"))\n-DEFCIFCODE(MAX_INLINE_INSNS_SINGLE_LIMIT,\n+DEFCIFCODE(MAX_INLINE_INSNS_SINGLE_LIMIT, CIF_FINAL_NORMAL,\n \t   N_(\"--param max-inline-insns-single limit reached\"))\n-DEFCIFCODE(MAX_INLINE_INSNS_AUTO_LIMIT,\n+DEFCIFCODE(MAX_INLINE_INSNS_AUTO_LIMIT, CIF_FINAL_NORMAL,\n \t   N_(\"--param max-inline-insns-auto limit reached\"))\n-DEFCIFCODE(INLINE_UNIT_GROWTH_LIMIT,\n+DEFCIFCODE(INLINE_UNIT_GROWTH_LIMIT, CIF_FINAL_NORMAL,\n \t   N_(\"--param inline-unit-growth limit reached\"))\n \n /* Recursive inlining.  */\n-DEFCIFCODE(RECURSIVE_INLINING, N_(\"recursive inlining\"))\n+DEFCIFCODE(RECURSIVE_INLINING, CIF_FINAL_NORMAL,\n+\t   N_(\"recursive inlining\"))\n \n /* Call is unlikely.  */\n-DEFCIFCODE(UNLIKELY_CALL, N_(\"call is unlikely and code size would grow\"))\n+DEFCIFCODE(UNLIKELY_CALL, CIF_FINAL_NORMAL,\n+\t   N_(\"call is unlikely and code size would grow\"))\n \n /* Function is not declared as inline.  */\n-DEFCIFCODE(NOT_DECLARED_INLINED,\n+DEFCIFCODE(NOT_DECLARED_INLINED, CIF_FINAL_NORMAL,\n \t   N_(\"function not declared inline and code size would grow\"))\n \n /* Inlining suppressed due to size optimization.  */\n-DEFCIFCODE(OPTIMIZING_FOR_SIZE,\n+DEFCIFCODE(OPTIMIZING_FOR_SIZE, CIF_FINAL_NORMAL,\n \t   N_(\"optimizing for size and code size would grow\"))\n \n /* Caller and callee disagree on the arguments.  */\n-DEFCIFCODE(MISMATCHED_ARGUMENTS, N_(\"mismatched arguments\"))\n+DEFCIFCODE(MISMATCHED_ARGUMENTS, CIF_FINAL_ERROR,\n+\t   N_(\"mismatched arguments\"))\n \n /* Call was originally indirect.  */\n-DEFCIFCODE(ORIGINALLY_INDIRECT_CALL,\n+DEFCIFCODE(ORIGINALLY_INDIRECT_CALL, CIF_FINAL_NORMAL,\n \t   N_(\"originally indirect function call not considered for inlining\"))\n \n /* Ths edge represents an indirect edge with a yet-undetermined callee .  */\n-DEFCIFCODE(INDIRECT_UNKNOWN_CALL,\n+DEFCIFCODE(INDIRECT_UNKNOWN_CALL, CIF_FINAL_NORMAL,\n \t   N_(\"indirect function call with a yet undetermined callee\"))\n \n /* We can't inline different EH personalities together.  */\n-DEFCIFCODE(EH_PERSONALITY, N_(\"exception handling personality mismatch\"))\n+DEFCIFCODE(EH_PERSONALITY, CIF_FINAL_ERROR,\n+\t   N_(\"exception handling personality mismatch\"))\n \n /* We can't inline if the callee can throw non-call exceptions but the\n    caller cannot.  */\n-DEFCIFCODE(NON_CALL_EXCEPTIONS, N_(\"non-call exception handling mismatch\"))\n+DEFCIFCODE(NON_CALL_EXCEPTIONS, CIF_FINAL_ERROR,\n+\t   N_(\"non-call exception handling mismatch\"))\n \n /* We can't inline because of mismatched target specific options.  */\n-DEFCIFCODE(TARGET_OPTION_MISMATCH, N_(\"target specific option mismatch\"))\n+DEFCIFCODE(TARGET_OPTION_MISMATCH, CIF_FINAL_ERROR,\n+\t   N_(\"target specific option mismatch\"))\n \n /* We can't inline because of mismatched optimization levels.  */\n-DEFCIFCODE(OPTIMIZATION_MISMATCH, N_(\"optimization level attribute mismatch\"))\n+DEFCIFCODE(OPTIMIZATION_MISMATCH, CIF_FINAL_ERROR,\n+\t   N_(\"optimization level attribute mismatch\"))\n \n /* We can't inline because the callee refers to comdat-local symbols.  */\n-DEFCIFCODE(USES_COMDAT_LOCAL, N_(\"callee refers to comdat-local symbols\"))\n+DEFCIFCODE(USES_COMDAT_LOCAL, CIF_FINAL_NORMAL,\n+\t   N_(\"callee refers to comdat-local symbols\"))"}, {"sha": "dad2c3c1fcf620aa791e4ab76bd67abae60fc13b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf11770053ce827551849ab721edccb17b4fdde/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf11770053ce827551849ab721edccb17b4fdde/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1cf11770053ce827551849ab721edccb17b4fdde", "patch": "@@ -1,3 +1,8 @@\n+2014-01-20  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR middle-end/59789\n+\t* gcc.target/i386/pr59789.c: New testcase.\n+\n 2014-01-20  Yufeng Zhang  <yufeng.zhang@arm.com>\n \n \t* g++.dg/debug/ra1.C (struct tree_base): Change the width of"}, {"sha": "b1440254bb0b233f8f9e73a292a2c5e55e038ddf", "filename": "gcc/testsuite/gcc.target/i386/pr59789.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf11770053ce827551849ab721edccb17b4fdde/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59789.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf11770053ce827551849ab721edccb17b4fdde/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59789.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59789.c?ref=1cf11770053ce827551849ab721edccb17b4fdde", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ia32 } */\n+/* { dg-options \"-O -march=i686\" } */\n+\n+#pragma GCC push_options\n+#pragma GCC target(\"sse2\")\n+typedef int __v4si __attribute__ ((__vector_size__ (16)));\n+typedef long long __m128i __attribute__ ((__vector_size__ (16), __may_alias__));\n+\n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_set_epi32 (int __q3, int __q2, int __q1, int __q0) /* { dg-error \"target specific option mismatch\" } */\n+{\n+  return __extension__ (__m128i)(__v4si){ __q0, __q1, __q2, __q3 };\n+}\n+#pragma GCC pop_options\n+\n+\n+__m128i\n+f1(void)\n+{ /* { dg-message \"warning: SSE vector return without SSE enabled changes the ABI\" } */\n+  return _mm_set_epi32 (0, 0, 0, 0); /* { dg-error \"called from here\" } */\n+}"}, {"sha": "a3175b34484899fc858a3f1c0308c9ac58f8acef", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf11770053ce827551849ab721edccb17b4fdde/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf11770053ce827551849ab721edccb17b4fdde/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=1cf11770053ce827551849ab721edccb17b4fdde", "patch": "@@ -4116,7 +4116,8 @@ expand_call_inline (basic_block bb, gimple stmt, copy_body_data *id)\n \t  /* During early inline pass, report only when optimization is\n \t     not turned on.  */\n \t  && (cgraph_global_info_ready\n-\t      || !optimize)\n+\t      || !optimize\n+\t      || cgraph_inline_failed_type (reason) == CIF_FINAL_ERROR)\n \t  /* PR 20090218-1_0.c. Body can be provided by another module. */\n \t  && (reason != CIF_BODY_NOT_AVAILABLE || !flag_generate_lto))\n \t{"}]}